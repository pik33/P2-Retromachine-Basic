00000                 | 
00000                 | #line 1 "/home/pik33/P2-Retromachine-Basic/basic049.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_findfirst = 215
00000                 | 	token_findnext = 216
00000                 | 	token_defchar = 217
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 E0 4A A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec A0 2F 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 68 2C 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 A8 A6 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 04 23 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 5C 1E 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 24 73 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 44 2A 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 94 A4 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 44 E4 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa FC E1 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb D4 F3 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 20 4C 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     F0 5B B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     70 70 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     E0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     E0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00840     52 00 00 FF 
00844     38 E5 05 F1 | 	add	objptr, ##42296
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     38 E5 85 F1 | 	sub	objptr, ##42296
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): audio.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     5C E5 05 F1 | 	add	objptr, ##41308
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     5C E5 85 F1 | 	sub	objptr, ##41308
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     5C 73 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     20 7B B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     A8 74 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     5C E5 05 F1 | 	add	objptr, ##41308
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     5C E5 85 F1 | 	sub	objptr, ##41308
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     FC E4 05 F1 | 	add	objptr, ##42236
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     47 00 00 FF 
009bc     2C E4 85 F1 | 	sub	objptr, ##36396
009c0     6C 72 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     68 40 B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     38 E5 05 F1 | 	add	objptr, ##42296
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     38 E5 85 F1 | 	sub	objptr, ##42296
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     20 E5 05 F1 | 	add	objptr, ##42272
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     20 E5 85 F1 | 	sub	objptr, ##42272
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     60 3E B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     00 3E B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     40 E5 05 F1 | 	add	objptr, ##42304
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     02 E5 85 F1 | 	sub	objptr, ##42242
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     04 E5 05 F1 | 	add	objptr, ##42244
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     02 E5 85 F1 | 	sub	objptr, ##42242
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     90 3D B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     F4 55 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     40 E5 05 F1 | 	add	objptr, ##42304
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     40 E5 85 F1 | 	sub	objptr, ##42304
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     84 59 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): audio.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     5C E5 05 A1 |  if_e	add	objptr, ##41308
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     5C E5 85 A1 |  if_e	sub	objptr, ##41308
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     98 6F B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     5C 77 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     E8 70 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     B0 01 00 FF 
00ccc     25 51 06 F6 | 	mov	local22, ##@LR__5316
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     54 E4 05 F1 | 	add	objptr, ##28244
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     54 E4 85 F1 | 	sub	objptr, ##28244
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     24 3C B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     3C 96 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     48 74 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     20 E5 05 F1 | 	add	objptr, ##42272
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     20 E5 85 F1 | 	sub	objptr, ##42272
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     A4 5D B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     A4 5F B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): audio.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     5C E5 05 F1 | 	add	objptr, ##41308
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     5C E5 85 F1 | 	sub	objptr, ##41308
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     24 6E B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     E8 75 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     74 6F B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     C0 3A B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     14 55 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     08 55 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     54 E4 05 F1 | 	add	objptr, ##28244
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     54 E4 85 F1 | 	sub	objptr, ##28244
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     54 E4 05 F1 | 	add	objptr, ##28244
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     54 E4 85 F1 | 	sub	objptr, ##28244
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     54 E4 05 F1 | 	add	objptr, ##28244
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     54 E4 85 F1 | 	sub	objptr, ##28244
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     98 54 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     54 E4 05 F1 | 	add	objptr, ##28244
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     54 E4 85 F1 | 	sub	objptr, ##28244
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     64 54 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     84 54 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     74 54 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     64 39 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     10 39 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     E0 38 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     40 E5 05 F1 | 	add	objptr, ##42304
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     02 E5 85 F1 | 	sub	objptr, ##42242
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     04 E5 05 F1 | 	add	objptr, ##42244
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     02 E5 85 F1 | 	sub	objptr, ##42242
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     78 38 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     DC 50 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     40 E5 05 F1 | 	add	objptr, ##42304
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     40 E5 85 F1 | 	sub	objptr, ##42304
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     37 00 00 FF 
01138     18 E4 05 F1 | 	add	objptr, ##28184
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     54 E4 85 F1 | 	sub	objptr, ##28244
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     FC 51 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     60 37 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     0C 37 B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     DC 36 B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     40 E5 05 F1 | 	add	objptr, ##42304
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     02 E5 85 F1 | 	sub	objptr, ##42242
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     04 E5 05 F1 | 	add	objptr, ##42244
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     02 E5 85 F1 | 	sub	objptr, ##42242
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     74 36 B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     D8 4E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     40 E5 05 F1 | 	add	objptr, ##42304
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     40 E5 85 F1 | 	sub	objptr, ##42304
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     B0 01 00 FF 
01328     26 51 06 F6 | 	mov	local22, ##@LR__5317
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     E6 E4 05 F1 | 	add	objptr, ##42214
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     24 E5 85 F1 | 	sub	objptr, ##42276
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     24 E5 05 C1 |  if_b	add	objptr, ##42276
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     24 E5 85 C1 |  if_b	sub	objptr, ##42276
0137c     52 00 00 FF 
01380     24 E5 05 F1 | 	add	objptr, ##42276
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     24 E5 85 F1 | 	sub	objptr, ##42276
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     44 50 B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     E6 E4 05 F1 | 	add	objptr, ##42214
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     24 E5 85 F1 | 	sub	objptr, ##42276
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     24 E5 05 31 |  if_ae	add	objptr, ##42276
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     24 E5 85 31 |  if_ae	sub	objptr, ##42276
013dc     52 00 00 FF 
013e0     24 E5 05 F1 | 	add	objptr, ##42276
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     24 E5 85 F1 | 	sub	objptr, ##42276
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     E4 4F B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     EC E4 05 F1 | 	add	objptr, ##42220
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     D4 E4 85 F1 | 	sub	objptr, ##14036
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     54 E4 85 F1 | 	sub	objptr, ##28244
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     54 E4 05 C1 |  if_b	add	objptr, ##28244
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     D4 E4 05 C1 |  if_b	add	objptr, ##14036
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     28 E5 85 C1 |  if_b	sub	objptr, ##42280
01458     52 00 00 FF 
0145c     28 E5 05 F1 | 	add	objptr, ##42280
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     28 E5 85 F1 | 	sub	objptr, ##42280
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     38 4F B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     EC E4 05 F1 | 	add	objptr, ##42220
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     28 E5 85 F1 | 	sub	objptr, ##42280
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     28 E5 05 31 |  if_ae	add	objptr, ##42280
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     28 E5 85 31 |  if_ae	sub	objptr, ##42280
014b8     52 00 00 FF 
014bc     28 E5 05 F1 | 	add	objptr, ##42280
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     28 E5 85 F1 | 	sub	objptr, ##42280
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     DC 4E B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     20 E5 05 F1 | 	add	objptr, ##42272
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     20 E5 85 F1 | 	sub	objptr, ##42272
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     00 3D B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     F0 3C B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     A3 E4 05 F1 | 	add	objptr, ##42147
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     EC E4 85 F1 | 	sub	objptr, ##42220
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     9C 6E B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     EC E4 05 F1 | 	add	objptr, ##42220
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     EC E4 85 F1 | 	sub	objptr, ##42220
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     74 6E B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     EC E4 05 F1 | 	add	objptr, ##42220
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     EC E4 85 F1 | 	sub	objptr, ##42220
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     4C 6E B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     EC E4 05 F1 | 	add	objptr, ##42220
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     EC E4 85 F1 | 	sub	objptr, ##42220
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     0A 4A 05 F6 | 	mov	COUNT_, #10
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     E1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     68 E5 05 F1 | 	add	objptr, ##41832
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     ED F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     70 E5 85 F1 | 	sub	objptr, ##41840
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01650     13 00 00 FF 
01654     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
01658     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
0165c     05 12 66 F0 | 	shl	arg01, #5
01660     09 FB 01 F1 | 	add	result1, arg01
01664     FD FA 01 FB | 	rdlong	result1, result1
01668     13 00 00 FF 
0166c     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
01670     01 FA 55 F2 | 	cmps	result1, #1 wc
01674     B4 01 90 CD |  if_b	jmp	#LR__0061
01678     14 13 02 F6 | 	mov	arg01, local02
0167c     00 14 06 F6 | 	mov	arg02, #0
01680     38 63 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01684     FD 2A 02 F6 | 	mov	local03, result1
01688     14 13 02 F6 | 	mov	arg01, local02
0168c     01 14 06 F6 | 	mov	arg02, #1
01690     28 63 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01694     FD 2C 02 F6 | 	mov	local04, result1
01698     14 13 02 F6 | 	mov	arg01, local02
0169c     02 14 06 F6 | 	mov	arg02, #2
016a0     18 63 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a4     FD 2E 02 F6 | 	mov	local05, result1
016a8     14 13 02 F6 | 	mov	arg01, local02
016ac     00 14 06 F6 | 	mov	arg02, #0
016b0     4C 63 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
016b4     FD 30 02 F6 | 	mov	local06, result1
016b8     14 13 02 F6 | 	mov	arg01, local02
016bc     03 14 06 F6 | 	mov	arg02, #3
016c0     F8 62 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c4     FD 32 02 F6 | 	mov	local07, result1
016c8     14 13 02 F6 | 	mov	arg01, local02
016cc     04 14 06 F6 | 	mov	arg02, #4
016d0     E8 62 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016d4     FD 34 02 F6 | 	mov	local08, result1
016d8     14 13 02 F6 | 	mov	arg01, local02
016dc     05 14 06 F6 | 	mov	arg02, #5
016e0     D8 62 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016e4     FD 36 02 F6 | 	mov	local09, result1
016e8     14 13 02 F6 | 	mov	arg01, local02
016ec     06 14 06 F6 | 	mov	arg02, #6
016f0     C8 62 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016f4     FD 38 02 F6 | 	mov	local10, result1
016f8     14 13 02 F6 | 	mov	arg01, local02
016fc     07 14 06 F6 | 	mov	arg02, #7
01700     B8 62 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01704     FD 14 02 F6 | 	mov	arg02, result1
01708     13 FB 01 F6 | 	mov	result1, local01
0170c     02 FA 65 F0 | 	shl	result1, #2
01710     51 00 00 FF 
01714     78 E5 05 F1 | 	add	objptr, ##41848
01718     F2 FA 01 F1 | 	add	result1, objptr
0171c     FD 2A 62 FC | 	wrlong	local03, result1
01720     13 FB 01 F6 | 	mov	result1, local01
01724     02 FA 65 F0 | 	shl	result1, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 FA 01 F1 | 	add	result1, objptr
01730     FD 2C 62 FC | 	wrlong	local04, result1
01734     13 FB 01 F6 | 	mov	result1, local01
01738     02 FA 65 F0 | 	shl	result1, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 FA 01 F1 | 	add	result1, objptr
01744     FD 2E 62 FC | 	wrlong	local05, result1
01748     13 2F 02 F6 | 	mov	local05, local01
0174c     02 2E 66 F0 | 	shl	local05, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 2E 02 F1 | 	add	local05, objptr
01758     17 31 62 FC | 	wrlong	local06, local05
0175c     13 31 02 F6 | 	mov	local06, local01
01760     02 30 66 F0 | 	shl	local06, #2
01764     1C E4 05 F1 | 	add	objptr, #28
01768     F2 30 02 F1 | 	add	local06, objptr
0176c     18 33 62 FC | 	wrlong	local07, local06
01770     13 33 02 F6 | 	mov	local07, local01
01774     02 32 66 F0 | 	shl	local07, #2
01778     1C E4 05 F1 | 	add	objptr, #28
0177c     F2 32 02 F1 | 	add	local07, objptr
01780     19 35 62 FC | 	wrlong	local08, local07
01784     13 35 02 F6 | 	mov	local08, local01
01788     02 34 66 F0 | 	shl	local08, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 34 02 F1 | 	add	local08, objptr
01794     1A 37 62 FC | 	wrlong	local09, local08
01798     13 37 02 F6 | 	mov	local09, local01
0179c     02 36 66 F0 | 	shl	local09, #2
017a0     1C E4 05 F1 | 	add	objptr, #28
017a4     F2 36 02 F1 | 	add	local09, objptr
017a8     1B 39 62 FC | 	wrlong	local10, local09
017ac     13 39 02 F6 | 	mov	local10, local01
017b0     02 38 66 F0 | 	shl	local10, #2
017b4     1C E4 05 F1 | 	add	objptr, #28
017b8     F2 38 02 F1 | 	add	local10, objptr
017bc     1C 15 62 FC | 	wrlong	arg02, local10
017c0     60 00 00 FF 
017c4     00 2A 06 F1 | 	add	local03, ##49152
017c8     0F 2A 46 F0 | 	shr	local03, #15
017cc     01 38 06 F6 | 	mov	local10, #1
017d0     15 39 02 F1 | 	add	local10, local03
017d4     60 00 00 FF 
017d8     00 2C 06 F1 | 	add	local04, ##49152
017dc     0F 2C 46 F0 | 	shr	local04, #15
017e0     01 36 06 F6 | 	mov	local09, #1
017e4     16 37 02 F1 | 	add	local09, local04
017e8     13 35 02 F6 | 	mov	local08, local01
017ec     02 34 66 F0 | 	shl	local08, #2
017f0     1C E4 05 F1 | 	add	objptr, #28
017f4     F2 34 02 F1 | 	add	local08, objptr
017f8     02 36 66 F0 | 	shl	local09, #2
017fc     1B 39 02 F1 | 	add	local10, local09
01800     1A 39 62 FC | 	wrlong	local10, local08
01804     13 39 02 F6 | 	mov	local10, local01
01808     02 38 66 F0 | 	shl	local10, #2
0180c     1C E4 05 F1 | 	add	objptr, #28
01810     F2 38 02 F1 | 	add	local10, objptr
01814     14 13 02 F6 | 	mov	arg01, local02
01818     52 00 00 FF 
0181c     90 E4 85 F1 | 	sub	objptr, ##42128
01820     70 61 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
01824     1C FB 61 FC | 	wrlong	result1, local10
01828     01 26 06 F1 | 	add	local01, #1
0182c                 | LR__0061
0182c     01 28 06 F1 | 	add	local02, #1
01830     07 28 16 F2 | 	cmp	local02, #7 wc
01834     14 FE 9F CD |  if_b	jmp	#LR__0060
01838     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
0183c                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
0183c                 | LR__0062
0183c     07 26 16 F2 | 	cmp	local01, #7 wc
01840     3C 00 90 3D |  if_ae	jmp	#LR__0064
01844     13 39 02 F6 | 	mov	local10, local01
01848     02 38 66 F0 | 	shl	local10, #2
0184c     52 00 00 FF 
01850     74 E4 05 F1 | 	add	objptr, ##42100
01854     F2 38 02 F1 | 	add	local10, objptr
01858     1C 01 68 FC | 	wrlong	#0, local10
0185c     13 39 02 F6 | 	mov	local10, local01
01860     02 38 66 F0 | 	shl	local10, #2
01864     1C E4 05 F1 | 	add	objptr, #28
01868     F2 38 02 F1 | 	add	local10, objptr
0186c     1C 01 68 FC | 	wrlong	#0, local10
01870     01 26 06 F1 | 	add	local01, #1
01874     52 00 00 FF 
01878     90 E4 85 F1 | 	sub	objptr, ##42128
0187c     BC FF 9F FD | 	jmp	#LR__0062
01880                 | LR__0063
01880                 | LR__0064
01880     A7 F0 03 F6 | 	mov	ptra, fp
01884     B2 00 A0 FD | 	call	#popregs_
01888                 | _gethdi_ret
01888     2D 00 64 FD | 	ret
0188c                 | 
0188c                 | ' 
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' 
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' '
0188c                 | ' '                                     LINE INTERPRETER/TOKENIZER
0188c                 | ' '
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' 
0188c                 | ' 
0188c                 | ' sub interpret
0188c                 | _interpret
0188c     35 4A 05 F6 | 	mov	COUNT_, #53
01890     A8 00 A0 FD | 	call	#pushregs_
01894     01 00 00 FF 
01898     84 F0 07 F1 | 	add	ptra, ##644
0189c     37 00 00 FF 
018a0     3C E4 05 F1 | 	add	objptr, ##28220
018a4     F2 12 02 FB | 	rdlong	arg01, objptr
018a8     37 00 00 FF 
018ac     3C E4 85 F1 | 	sub	objptr, ##28220
018b0     6C 8D B2 FD | 	call	#__system__RTrim_S
018b4     FD 12 02 F6 | 	mov	arg01, result1
018b8     A4 8C B2 FD | 	call	#__system__LTrim_S
018bc     37 00 00 FF 
018c0     40 E4 05 F1 | 	add	objptr, ##28224
018c4     F2 FA 61 FC | 	wrlong	result1, objptr
018c8     04 E4 05 F1 | 	add	objptr, #4
018cc     FF FF FF FF 
018d0     F2 FE 6B FC | 	wrlong	##-1, objptr
018d4     1B 00 00 FF 
018d8     C4 E4 05 F1 | 	add	objptr, ##14020
018dc     F2 00 68 FC | 	wrlong	#0, objptr
018e0     08 00 00 FF 
018e4     6C E4 85 F1 | 	sub	objptr, ##4204
018e8     F2 00 68 FC | 	wrlong	#0, objptr
018ec     4A 00 00 FF 
018f0     9C E4 85 F1 | 	sub	objptr, ##38044
018f4     00 26 06 F6 | 	mov	local01, #0
018f8                 | LR__0070
018f8                 | ' 
018f8                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
018f8                 | ' 
018f8                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
018f8                 | ' 
018f8                 | ' 108 
018f8                 | ' for i=0 to 125: separators(i)=0 :next i
018f8     00 28 06 F6 | 	mov	local02, #0
018fc     38 4E 05 F1 | 	add	fp, #56
01900     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01904                 | LR__0071
01904     14 2B 02 F6 | 	mov	local03, local02
01908     02 2A 66 F0 | 	shl	local03, #2
0190c     A7 2A 02 F1 | 	add	local03, fp
01910     15 01 68 FC | 	wrlong	#0, local03
01914     01 28 06 F1 | 	add	local02, #1
01918     7E 28 56 F2 | 	cmps	local02, #126 wc
0191c     E4 FF 9F CD |  if_b	jmp	#LR__0071
01920                 | LR__0072
01920     38 4E 85 F1 | 	sub	fp, #56
01924                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01924     00 28 06 F6 | 	mov	local02, #0
01928     35 00 00 FF 
0192c     2C E4 05 F1 | 	add	objptr, ##27180
01930     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01934                 | LR__0073
01934     14 2D 02 F6 | 	mov	local04, local02
01938     03 2C 66 F0 | 	shl	local04, #3
0193c     F2 2C 02 F1 | 	add	local04, objptr
01940     B0 01 00 FF 
01944     27 17 06 F6 | 	mov	arg03, ##@LR__5318
01948     16 17 62 FC | 	wrlong	arg03, local04
0194c     14 2D 02 F6 | 	mov	local04, local02
01950     03 2C 66 F0 | 	shl	local04, #3
01954     F2 2E 02 F6 | 	mov	local05, objptr
01958     F2 2C 02 F1 | 	add	local04, objptr
0195c     00 30 06 F6 | 	mov	local06, #0
01960     04 2C 06 F1 | 	add	local04, #4
01964     16 01 68 FC | 	wrlong	#0, local04
01968     01 28 06 F1 | 	add	local02, #1
0196c     7E 28 56 F2 | 	cmps	local02, #126 wc
01970     C0 FF 9F CD |  if_b	jmp	#LR__0073
01974                 | LR__0074
01974     02 00 00 FF 
01978     10 E4 05 F1 | 	add	objptr, ##1040
0197c     F2 12 02 FB | 	rdlong	arg01, objptr
01980     37 00 00 FF 
01984     3C E4 85 F1 | 	sub	objptr, ##28220
01988     94 8C B2 FD | 	call	#__system__RTrim_S
0198c     FD 12 02 F6 | 	mov	arg01, result1
01990     CC 8B B2 FD | 	call	#__system__LTrim_S
01994     37 00 00 FF 
01998     3C E4 05 F1 | 	add	objptr, ##28220
0199c     F2 FA 61 FC | 	wrlong	result1, objptr
019a0     B0 01 00 FF 
019a4     28 2D 06 F6 | 	mov	local04, ##@LR__5319
019a8     1B 00 00 FF 
019ac     08 E5 05 F1 | 	add	objptr, ##14088
019b0     F2 2C 62 FC | 	wrlong	local04, objptr
019b4     1B 00 00 FF 
019b8     08 E5 85 F1 | 	sub	objptr, ##14088
019bc     F2 12 02 FB | 	rdlong	arg01, objptr
019c0     37 00 00 FF 
019c4     3C E4 85 F1 | 	sub	objptr, ##28220
019c8     09 33 02 F6 | 	mov	local07, arg01
019cc     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
019d0                 | LR__0075
019d0     19 FB C9 FA | 	rdbyte	result1, local07 wz
019d4     01 32 06 51 |  if_ne	add	local07, #1
019d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
019dc                 | LR__0076
019dc     09 33 8A F1 | 	sub	local07, arg01 wz
019e0     52 00 00 FF 
019e4     48 E5 05 F1 | 	add	objptr, ##42312
019e8     F2 32 62 FC | 	wrlong	local07, objptr
019ec                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
019ec     52 00 00 FF 
019f0     48 E5 85 F1 | 	sub	objptr, ##42312
019f4     40 2A 90 AD |  if_e	jmp	#LR__0210
019f8     00 34 06 F6 | 	mov	local08, #0
019fc                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
019fc                 | ' for i=1 to len(line$)
019fc     01 28 06 F6 | 	mov	local02, #1
01a00     37 00 00 FF 
01a04     3C E4 05 F1 | 	add	objptr, ##28220
01a08     F2 12 02 FB | 	rdlong	arg01, objptr
01a0c     37 00 00 FF 
01a10     3C E4 85 F1 | 	sub	objptr, ##28220
01a14     09 33 02 F6 | 	mov	local07, arg01
01a18     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01a1c                 | LR__0077
01a1c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a20     01 32 06 51 |  if_ne	add	local07, #1
01a24     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01a28                 | LR__0078
01a28     09 33 82 F1 | 	sub	local07, arg01
01a2c     19 37 02 F6 | 	mov	local09, local07
01a30     01 36 06 F1 | 	add	local09, #1
01a34                 | LR__0079
01a34     1B 29 52 F2 | 	cmps	local02, local09 wc
01a38     AC 00 90 3D |  if_ae	jmp	#LR__0081
01a3c                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01a3c     37 00 00 FF 
01a40     3C E4 05 F1 | 	add	objptr, ##28220
01a44     F2 12 02 FB | 	rdlong	arg01, objptr
01a48     37 00 00 FF 
01a4c     3C E4 85 F1 | 	sub	objptr, ##28220
01a50     14 15 02 F6 | 	mov	arg02, local02
01a54     01 16 06 F6 | 	mov	arg03, #1
01a58     4C 88 B2 FD | 	call	#__system__Mid_S
01a5c     FD 12 02 F6 | 	mov	arg01, result1
01a60     B0 01 00 FF 
01a64     29 15 06 F6 | 	mov	arg02, ##@LR__5320
01a68     CC 66 B2 FD | 	call	#__system___string_cmp
01a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01a70     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a74     01 34 06 A6 |  if_e	mov	local08, #1
01a78     3C 00 90 AD |  if_e	jmp	#LR__0080
01a7c     37 00 00 FF 
01a80     3C E4 05 F1 | 	add	objptr, ##28220
01a84     F2 12 02 FB | 	rdlong	arg01, objptr
01a88     37 00 00 FF 
01a8c     3C E4 85 F1 | 	sub	objptr, ##28220
01a90     14 15 02 F6 | 	mov	arg02, local02
01a94     01 16 06 F6 | 	mov	arg03, #1
01a98     0C 88 B2 FD | 	call	#__system__Mid_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     B0 01 00 FF 
01aa4     2B 15 06 F6 | 	mov	arg02, ##@LR__5321
01aa8     8C 66 B2 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01ab4     00 34 06 A6 |  if_e	mov	local08, #0
01ab8                 | LR__0080
01ab8     14 2D 02 F6 | 	mov	local04, local02
01abc     03 2C 66 F0 | 	shl	local04, #3
01ac0     35 00 00 FF 
01ac4     2C E4 05 F1 | 	add	objptr, ##27180
01ac8     F2 2E 02 F6 | 	mov	local05, objptr
01acc     F2 2C 02 F1 | 	add	local04, objptr
01ad0     04 2C 06 F1 | 	add	local04, #4
01ad4     16 35 62 FC | 	wrlong	local08, local04
01ad8     01 28 06 F1 | 	add	local02, #1
01adc     35 00 00 FF 
01ae0     2C E4 85 F1 | 	sub	objptr, ##27180
01ae4     4C FF 9F FD | 	jmp	#LR__0079
01ae8                 | LR__0081
01ae8     01 28 06 F6 | 	mov	local02, #1
01aec                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01aec                 | LR__0082
01aec     37 00 00 FF 
01af0     3C E4 05 F1 | 	add	objptr, ##28220
01af4     F2 12 02 FB | 	rdlong	arg01, objptr
01af8     37 00 00 FF 
01afc     3C E4 85 F1 | 	sub	objptr, ##28220
01b00     14 15 02 F6 | 	mov	arg02, local02
01b04     01 16 06 F6 | 	mov	arg03, #1
01b08     9C 87 B2 FD | 	call	#__system__Mid_S
01b0c     FD 12 02 F6 | 	mov	arg01, result1
01b10     B0 01 00 FF 
01b14     2D 39 06 F6 | 	mov	local10, ##@LR__5322
01b18     1C 15 02 F6 | 	mov	arg02, local10
01b1c     18 66 B2 FD | 	call	#__system___string_cmp
01b20     00 FA 0D F2 | 	cmp	result1, #0 wz
01b24     34 00 90 5D |  if_ne	jmp	#LR__0083
01b28     14 2F 02 F6 | 	mov	local05, local02
01b2c     03 2E 66 F0 | 	shl	local05, #3
01b30     35 00 00 FF 
01b34     2C E4 05 F1 | 	add	objptr, ##27180
01b38     F2 30 02 F6 | 	mov	local06, objptr
01b3c     F2 2E 02 F1 | 	add	local05, objptr
01b40     04 2E 06 F1 | 	add	local05, #4
01b44     17 3B 02 FB | 	rdlong	local11, local05
01b48     04 2E 86 F1 | 	sub	local05, #4
01b4c     1D 3D 0A F6 | 	mov	local12, local11 wz
01b50     35 00 00 FF 
01b54     2C E4 85 F1 | 	sub	objptr, ##27180
01b58     24 00 90 AD |  if_e	jmp	#LR__0084
01b5c                 | LR__0083
01b5c     52 00 00 FF 
01b60     48 E5 05 F1 | 	add	objptr, ##42312
01b64     F2 3E 02 FB | 	rdlong	local13, objptr
01b68     52 00 00 FF 
01b6c     48 E5 85 F1 | 	sub	objptr, ##42312
01b70     1F 41 02 F6 | 	mov	local14, local13
01b74     20 29 52 F2 | 	cmps	local02, local14 wc
01b78     01 28 06 C1 |  if_b	add	local02, #1
01b7c     6C FF 9F CD |  if_b	jmp	#LR__0082
01b80                 | LR__0084
01b80                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b80     52 00 00 FF 
01b84     48 E5 05 F1 | 	add	objptr, ##42312
01b88     F2 2C 02 FB | 	rdlong	local04, objptr
01b8c     52 00 00 FF 
01b90     48 E5 85 F1 | 	sub	objptr, ##42312
01b94     16 29 52 F2 | 	cmps	local02, local04 wc
01b98     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b9c     37 00 00 FF 
01ba0     3C E4 05 F1 | 	add	objptr, ##28220
01ba4     F2 30 02 FB | 	rdlong	local06, objptr
01ba8     37 00 00 FF 
01bac     3C E4 85 F1 | 	sub	objptr, ##28220
01bb0     18 13 02 F6 | 	mov	arg01, local06
01bb4     09 33 02 F6 | 	mov	local07, arg01
01bb8     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01bbc                 | LR__0085
01bbc     19 FB C9 FA | 	rdbyte	result1, local07 wz
01bc0     01 32 06 51 |  if_ne	add	local07, #1
01bc4     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01bc8                 | LR__0086
01bc8     09 33 82 F1 | 	sub	local07, arg01
01bcc     19 2F 02 F6 | 	mov	local05, local07
01bd0     17 15 02 F6 | 	mov	arg02, local05
01bd4     14 15 82 F1 | 	sub	arg02, local02
01bd8     18 13 02 F6 | 	mov	arg01, local06
01bdc     38 86 B2 FD | 	call	#__system__Right_S
01be0     FD 12 02 F6 | 	mov	arg01, result1
01be4     38 8A B2 FD | 	call	#__system__RTrim_S
01be8     FD 12 02 F6 | 	mov	arg01, result1
01bec     70 89 B2 FD | 	call	#__system__LTrim_S
01bf0     52 00 00 FF 
01bf4     4C E5 05 F1 | 	add	objptr, ##42316
01bf8     F2 FA 61 FC | 	wrlong	result1, objptr
01bfc     1B 00 00 FF 
01c00     10 E5 85 F1 | 	sub	objptr, ##14096
01c04     F2 12 02 FB | 	rdlong	arg01, objptr
01c08     37 00 00 FF 
01c0c     3C E4 85 F1 | 	sub	objptr, ##28220
01c10     01 28 86 F1 | 	sub	local02, #1
01c14     14 15 02 F6 | 	mov	arg02, local02
01c18     74 85 B2 FD | 	call	#__system__Left_S
01c1c     FD 12 02 F6 | 	mov	arg01, result1
01c20     FC 89 B2 FD | 	call	#__system__RTrim_S
01c24     FD 12 02 F6 | 	mov	arg01, result1
01c28     34 89 B2 FD | 	call	#__system__LTrim_S
01c2c     37 00 00 FF 
01c30     3C E4 05 F1 | 	add	objptr, ##28220
01c34     F2 FA 61 FC | 	wrlong	result1, objptr
01c38     37 00 00 FF 
01c3c     3C E4 85 F1 | 	sub	objptr, ##28220
01c40     1C 00 90 FD | 	jmp	#LR__0088
01c44                 | LR__0087
01c44     B0 01 00 FF 
01c48     2F 2D 06 F6 | 	mov	local04, ##@LR__5323
01c4c     52 00 00 FF 
01c50     4C E5 05 F1 | 	add	objptr, ##42316
01c54     F2 2C 62 FC | 	wrlong	local04, objptr
01c58     52 00 00 FF 
01c5c     4C E5 85 F1 | 	sub	objptr, ##42316
01c60                 | LR__0088
01c60                 | ' 
01c60                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01c60     37 00 00 FF 
01c64     44 E4 05 F1 | 	add	objptr, ##28228
01c68     F2 2C 02 FB | 	rdlong	local04, objptr
01c6c     37 00 00 FF 
01c70     44 E4 85 F1 | 	sub	objptr, ##28228
01c74     FF FF 7F FF 
01c78     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c7c     40 00 90 5D |  if_ne	jmp	#LR__0089
01c80     52 00 00 FF 
01c84     4C E5 05 F1 | 	add	objptr, ##42316
01c88     F2 12 02 FB | 	rdlong	arg01, objptr
01c8c     52 00 00 FF 
01c90     4C E5 85 F1 | 	sub	objptr, ##42316
01c94     B0 01 00 FF 
01c98     30 31 06 F6 | 	mov	local06, ##@LR__5324
01c9c     18 15 02 F6 | 	mov	arg02, local06
01ca0     94 64 B2 FD | 	call	#__system___string_cmp
01ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca8     37 00 00 5F 
01cac     44 E4 05 51 |  if_ne	add	objptr, ##28228
01cb0     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01cb4     37 00 00 5F 
01cb8     44 E4 85 51 |  if_ne	sub	objptr, ##28228
01cbc     08 01 90 5D |  if_ne	jmp	#LR__0093
01cc0                 | LR__0089
01cc0                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01cc0     37 00 00 FF 
01cc4     44 E4 05 F1 | 	add	objptr, ##28228
01cc8     F2 2C 02 FB | 	rdlong	local04, objptr
01ccc     37 00 00 FF 
01cd0     44 E4 85 F1 | 	sub	objptr, ##28228
01cd4     FF FF 7F FF 
01cd8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01cdc     3C 00 90 5D |  if_ne	jmp	#LR__0090
01ce0     52 00 00 FF 
01ce4     4C E5 05 F1 | 	add	objptr, ##42316
01ce8     F2 12 02 FB | 	rdlong	arg01, objptr
01cec     52 00 00 FF 
01cf0     4C E5 85 F1 | 	sub	objptr, ##42316
01cf4     B0 01 00 FF 
01cf8     31 15 06 F6 | 	mov	arg02, ##@LR__5325
01cfc     38 64 B2 FD | 	call	#__system___string_cmp
01d00     00 FA 0D F2 | 	cmp	result1, #0 wz
01d04     37 00 00 AF 
01d08     44 E4 05 A1 |  if_e	add	objptr, ##28228
01d0c     F2 06 68 AC |  if_e	wrlong	#3, objptr
01d10     37 00 00 AF 
01d14     44 E4 85 A1 |  if_e	sub	objptr, ##28228
01d18     AC 00 90 AD |  if_e	jmp	#LR__0093
01d1c                 | LR__0090
01d1c                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01d1c     37 00 00 FF 
01d20     44 E4 05 F1 | 	add	objptr, ##28228
01d24     F2 2C 02 FB | 	rdlong	local04, objptr
01d28     37 00 00 FF 
01d2c     44 E4 85 F1 | 	sub	objptr, ##28228
01d30     04 2C 0E F2 | 	cmp	local04, #4 wz
01d34     3C 00 90 5D |  if_ne	jmp	#LR__0091
01d38     52 00 00 FF 
01d3c     4C E5 05 F1 | 	add	objptr, ##42316
01d40     F2 12 02 FB | 	rdlong	arg01, objptr
01d44     52 00 00 FF 
01d48     4C E5 85 F1 | 	sub	objptr, ##42316
01d4c     B0 01 00 FF 
01d50     32 15 06 F6 | 	mov	arg02, ##@LR__5326
01d54     E0 63 B2 FD | 	call	#__system___string_cmp
01d58     00 FA 0D F2 | 	cmp	result1, #0 wz
01d5c     37 00 00 5F 
01d60     44 E4 05 51 |  if_ne	add	objptr, ##28228
01d64     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d68     37 00 00 5F 
01d6c     44 E4 85 51 |  if_ne	sub	objptr, ##28228
01d70     54 00 90 5D |  if_ne	jmp	#LR__0093
01d74                 | LR__0091
01d74                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d74     37 00 00 FF 
01d78     44 E4 05 F1 | 	add	objptr, ##28228
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     37 00 00 FF 
01d84     44 E4 85 F1 | 	sub	objptr, ##28228
01d88     04 2C 0E F2 | 	cmp	local04, #4 wz
01d8c     38 00 90 5D |  if_ne	jmp	#LR__0092
01d90     52 00 00 FF 
01d94     4C E5 05 F1 | 	add	objptr, ##42316
01d98     F2 12 02 FB | 	rdlong	arg01, objptr
01d9c     52 00 00 FF 
01da0     4C E5 85 F1 | 	sub	objptr, ##42316
01da4     B0 01 00 FF 
01da8     33 15 06 F6 | 	mov	arg02, ##@LR__5327
01dac     88 63 B2 FD | 	call	#__system___string_cmp
01db0     00 FA 0D F2 | 	cmp	result1, #0 wz
01db4     37 00 00 AF 
01db8     44 E4 05 A1 |  if_e	add	objptr, ##28228
01dbc     F2 04 68 AC |  if_e	wrlong	#2, objptr
01dc0     37 00 00 AF 
01dc4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
01dc8                 | LR__0092
01dc8                 | LR__0093
01dc8     38 4E 05 F1 | 	add	fp, #56
01dcc     A7 00 68 FC | 	wrlong	#0, fp
01dd0     38 4E 85 F1 | 	sub	fp, #56
01dd4     00 28 06 F6 | 	mov	local02, #0
01dd8     01 42 06 F6 | 	mov	local15, #1
01ddc                 | ' 
01ddc                 | ' ' 1b: find separators
01ddc                 | ' 
01ddc                 | ' 107
01ddc                 | ' separators(0)=0
01ddc                 | ' i=0: j=1
01ddc                 | ' do: 
01ddc                 | LR__0094
01ddc     01 28 06 F1 | 	add	local02, #1
01de0     37 00 00 FF 
01de4     3C E4 05 F1 | 	add	objptr, ##28220
01de8     F2 12 02 FB | 	rdlong	arg01, objptr
01dec     37 00 00 FF 
01df0     3C E4 85 F1 | 	sub	objptr, ##28220
01df4     14 15 02 F6 | 	mov	arg02, local02
01df8     01 16 06 F6 | 	mov	arg03, #1
01dfc     A8 84 B2 FD | 	call	#__system__Mid_S
01e00     FD 44 02 F6 | 	mov	local16, result1
01e04                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01e04     22 13 02 F6 | 	mov	arg01, local16
01e08     94 2E B0 FD | 	call	#_isseparator
01e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
01e10     1C 00 90 AD |  if_e	jmp	#LR__0095
01e14     21 2B 02 F6 | 	mov	local03, local15
01e18     02 2A 66 F0 | 	shl	local03, #2
01e1c     38 4E 05 F1 | 	add	fp, #56
01e20     A7 2A 02 F1 | 	add	local03, fp
01e24     15 29 62 FC | 	wrlong	local02, local03
01e28     01 42 06 F1 | 	add	local15, #1
01e2c     38 4E 85 F1 | 	sub	fp, #56
01e30                 | LR__0095
01e30     52 00 00 FF 
01e34     48 E5 05 F1 | 	add	objptr, ##42312
01e38     F2 2C 02 FB | 	rdlong	local04, objptr
01e3c     52 00 00 FF 
01e40     48 E5 85 F1 | 	sub	objptr, ##42312
01e44     16 29 5A F2 | 	cmps	local02, local04 wcz
01e48     90 FF 9F ED |  if_be	jmp	#LR__0094
01e4c     21 2B 02 F6 | 	mov	local03, local15
01e50     02 2A 66 F0 | 	shl	local03, #2
01e54     38 4E 05 F1 | 	add	fp, #56
01e58     A7 38 02 F6 | 	mov	local10, fp
01e5c     A7 2A 02 F1 | 	add	local03, fp
01e60     15 29 62 FC | 	wrlong	local02, local03
01e64     00 46 06 F6 | 	mov	local17, #0
01e68                 | ' for i=0 to j-1 
01e68     00 28 06 F6 | 	mov	local02, #0
01e6c     21 49 02 F6 | 	mov	local18, local15
01e70     38 4E 85 F1 | 	sub	fp, #56
01e74                 | LR__0096
01e74     24 29 52 F2 | 	cmps	local02, local18 wc
01e78     50 01 90 3D |  if_ae	jmp	#LR__0100
01e7c     14 2B 02 F6 | 	mov	local03, local02
01e80     02 2A 66 F0 | 	shl	local03, #2
01e84     38 4E 05 F1 | 	add	fp, #56
01e88     A7 2A 02 F1 | 	add	local03, fp
01e8c     15 2F 02 FB | 	rdlong	local05, local03
01e90     52 00 00 FF 
01e94     54 E5 05 F1 | 	add	objptr, ##42324
01e98     F2 2E 62 FC | 	wrlong	local05, objptr
01e9c     14 2B 02 F6 | 	mov	local03, local02
01ea0     01 2A 06 F1 | 	add	local03, #1
01ea4     02 2A 66 F0 | 	shl	local03, #2
01ea8     A7 38 02 F6 | 	mov	local10, fp
01eac     A7 2A 02 F1 | 	add	local03, fp
01eb0     15 2F 02 FB | 	rdlong	local05, local03
01eb4     04 E4 05 F1 | 	add	objptr, #4
01eb8     F2 2E 62 FC | 	wrlong	local05, objptr
01ebc                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01ebc     04 E4 85 F1 | 	sub	objptr, #4
01ec0     F2 2C 02 FB | 	rdlong	local04, objptr
01ec4     52 00 00 FF 
01ec8     54 E5 85 F1 | 	sub	objptr, ##42324
01ecc     01 2C 56 F2 | 	cmps	local04, #1 wc
01ed0     38 4E 85 F1 | 	sub	fp, #56
01ed4     68 00 90 CD |  if_b	jmp	#LR__0098
01ed8     37 00 00 FF 
01edc     3C E4 05 F1 | 	add	objptr, ##28220
01ee0     F2 12 02 FB | 	rdlong	arg01, objptr
01ee4     1B 00 00 FF 
01ee8     18 E5 05 F1 | 	add	objptr, ##14104
01eec     F2 14 02 FB | 	rdlong	arg02, objptr
01ef0     52 00 00 FF 
01ef4     54 E5 85 F1 | 	sub	objptr, ##42324
01ef8     01 16 06 F6 | 	mov	arg03, #1
01efc     A8 83 B2 FD | 	call	#__system__Mid_S
01f00     FD 4A 02 F6 | 	mov	local19, result1
01f04     B0 01 00 FF 
01f08     34 15 06 F6 | 	mov	arg02, ##@LR__5328
01f0c     25 13 02 F6 | 	mov	arg01, local19
01f10     24 62 B2 FD | 	call	#__system___string_cmp
01f14     00 FA 0D F2 | 	cmp	result1, #0 wz
01f18     24 00 90 AD |  if_e	jmp	#LR__0097
01f1c     23 39 02 F6 | 	mov	local10, local17
01f20     03 38 66 F0 | 	shl	local10, #3
01f24     35 00 00 FF 
01f28     2C E4 05 F1 | 	add	objptr, ##27180
01f2c     F2 38 02 F1 | 	add	local10, objptr
01f30     1C 4B 62 FC | 	wrlong	local19, local10
01f34     01 46 06 F1 | 	add	local17, #1
01f38     35 00 00 FF 
01f3c     2C E4 85 F1 | 	sub	objptr, ##27180
01f40                 | LR__0097
01f40                 | LR__0098
01f40     37 00 00 FF 
01f44     3C E4 05 F1 | 	add	objptr, ##28220
01f48     F2 12 02 FB | 	rdlong	arg01, objptr
01f4c     1B 00 00 FF 
01f50     18 E5 05 F1 | 	add	objptr, ##14104
01f54     F2 14 02 FB | 	rdlong	arg02, objptr
01f58     01 14 06 F1 | 	add	arg02, #1
01f5c     04 E4 05 F1 | 	add	objptr, #4
01f60     F2 16 02 FB | 	rdlong	arg03, objptr
01f64     04 E4 85 F1 | 	sub	objptr, #4
01f68     F2 3A 02 FB | 	rdlong	local11, objptr
01f6c     52 00 00 FF 
01f70     54 E5 85 F1 | 	sub	objptr, ##42324
01f74     1D 3D 02 F6 | 	mov	local12, local11
01f78     1E 17 82 F1 | 	sub	arg03, local12
01f7c     01 16 86 F1 | 	sub	arg03, #1
01f80     24 83 B2 FD | 	call	#__system__Mid_S
01f84     FD 4A 02 F6 | 	mov	local19, result1
01f88                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f88     B0 01 00 FF 
01f8c     35 15 06 F6 | 	mov	arg02, ##@LR__5329
01f90     25 13 02 F6 | 	mov	arg01, local19
01f94     A0 61 B2 FD | 	call	#__system___string_cmp
01f98     00 FA 0D F2 | 	cmp	result1, #0 wz
01f9c     24 00 90 AD |  if_e	jmp	#LR__0099
01fa0     23 39 02 F6 | 	mov	local10, local17
01fa4     03 38 66 F0 | 	shl	local10, #3
01fa8     35 00 00 FF 
01fac     2C E4 05 F1 | 	add	objptr, ##27180
01fb0     F2 38 02 F1 | 	add	local10, objptr
01fb4     1C 4B 62 FC | 	wrlong	local19, local10
01fb8     01 46 06 F1 | 	add	local17, #1
01fbc     35 00 00 FF 
01fc0     2C E4 85 F1 | 	sub	objptr, ##27180
01fc4                 | LR__0099
01fc4     01 28 06 F1 | 	add	local02, #1
01fc8     A8 FE 9F FD | 	jmp	#LR__0096
01fcc                 | LR__0100
01fcc                 | ' 
01fcc                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01fcc                 | ' 
01fcc                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01fcc     37 00 00 FF 
01fd0     44 E4 05 F1 | 	add	objptr, ##28228
01fd4     F2 2C 0A FB | 	rdlong	local04, objptr wz
01fd8     37 00 00 FF 
01fdc     44 E4 85 F1 | 	sub	objptr, ##28228
01fe0     37 00 00 5F 
01fe4     44 E4 05 51 |  if_ne	add	objptr, ##28228
01fe8     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01fec     37 00 00 5F 
01ff0     44 E4 85 51 |  if_ne	sub	objptr, ##28228
01ff4     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01ff8     B8 00 90 5D |  if_ne	jmp	#LR__0103
01ffc     35 00 00 FF 
02000     2C E4 05 F1 | 	add	objptr, ##27180
02004     F2 3A 02 FB | 	rdlong	local11, objptr
02008     35 00 00 FF 
0200c     2C E4 85 F1 | 	sub	objptr, ##27180
02010     1D 13 02 F6 | 	mov	arg01, local11
02014     EC 50 B0 FD | 	call	#_isdec
02018     FD 3C 02 F6 | 	mov	local12, result1
0201c     1E 31 22 F6 | 	not	local06, local12
02020     00 30 0E F2 | 	cmp	local06, #0 wz
02024     8C 00 90 AD |  if_e	jmp	#LR__0103
02028     23 29 02 F6 | 	mov	local02, local17
0202c     35 00 00 FF 
02030     2C E4 05 F1 | 	add	objptr, ##27180
02034     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
02038                 | LR__0101
02038     14 2F 02 F6 | 	mov	local05, local02
0203c     01 2E 86 F1 | 	sub	local05, #1
02040     03 2E 66 F0 | 	shl	local05, #3
02044     F2 2E 02 F1 | 	add	local05, objptr
02048     17 2D 02 FB | 	rdlong	local04, local05
0204c     14 31 02 F6 | 	mov	local06, local02
02050     01 30 86 F1 | 	sub	local06, #1
02054     03 30 66 F0 | 	shl	local06, #3
02058     F2 30 02 F1 | 	add	local06, objptr
0205c     04 30 06 F1 | 	add	local06, #4
02060     18 2B 02 FB | 	rdlong	local03, local06
02064     14 31 02 F6 | 	mov	local06, local02
02068     03 30 66 F0 | 	shl	local06, #3
0206c     F2 3C 02 F6 | 	mov	local12, objptr
02070     F2 30 02 F1 | 	add	local06, objptr
02074     18 2D 62 FC | 	wrlong	local04, local06
02078     14 3B 02 F6 | 	mov	local11, local02
0207c     1D 3F 02 F6 | 	mov	local13, local11
02080     03 3E 66 F0 | 	shl	local13, #3
02084     F2 3E 02 F1 | 	add	local13, objptr
02088     04 3E 06 F1 | 	add	local13, #4
0208c     1F 2B 62 FC | 	wrlong	local03, local13
02090     01 28 86 F1 | 	sub	local02, #1
02094     01 28 56 F2 | 	cmps	local02, #1 wc
02098     9C FF 9F 3D |  if_ae	jmp	#LR__0101
0209c                 | LR__0102
0209c     B0 01 00 FF 
020a0     36 2D 06 F6 | 	mov	local04, ##@LR__5330
020a4     F2 2C 62 FC | 	wrlong	local04, objptr
020a8     35 00 00 FF 
020ac     2C E4 85 F1 | 	sub	objptr, ##27180
020b0     01 46 06 F1 | 	add	local17, #1
020b4                 | LR__0103
020b4     00 28 06 F6 | 	mov	local02, #0
020b8                 | ' 
020b8                 | ' ' 1e : find strings
020b8                 | ' 
020b8                 | ' i=0
020b8                 | ' do
020b8                 | LR__0104
020b8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
020b8     14 2F 02 F6 | 	mov	local05, local02
020bc     03 2E 66 F0 | 	shl	local05, #3
020c0     35 00 00 FF 
020c4     2C E4 05 F1 | 	add	objptr, ##27180
020c8     F2 2E 02 F1 | 	add	local05, objptr
020cc     17 13 02 FB | 	rdlong	arg01, local05
020d0     B0 01 00 FF 
020d4     38 15 06 F6 | 	mov	arg02, ##@LR__5331
020d8     35 00 00 FF 
020dc     2C E4 85 F1 | 	sub	objptr, ##27180
020e0     54 60 B2 FD | 	call	#__system___string_cmp
020e4     00 FA 0D F2 | 	cmp	result1, #0 wz
020e8     01 28 06 51 |  if_ne	add	local02, #1
020ec     20 01 90 5D |  if_ne	jmp	#LR__0109
020f0     14 4D 02 F6 | 	mov	local20, local02
020f4                 | LR__0105
020f4     14 39 02 F6 | 	mov	local10, local02
020f8     01 38 06 F1 | 	add	local10, #1
020fc     03 38 66 F0 | 	shl	local10, #3
02100     35 00 00 FF 
02104     2C E4 05 F1 | 	add	objptr, ##27180
02108     F2 38 02 F1 | 	add	local10, objptr
0210c     1C 4B 02 FB | 	rdlong	local19, local10
02110     26 39 02 F6 | 	mov	local10, local20
02114     03 38 66 F0 | 	shl	local10, #3
02118     F2 38 02 F1 | 	add	local10, objptr
0211c     26 3B 02 F6 | 	mov	local11, local20
02120     1D 41 02 F6 | 	mov	local14, local11
02124     03 40 66 F0 | 	shl	local14, #3
02128     F2 40 02 F1 | 	add	local14, objptr
0212c     20 13 02 FB | 	rdlong	arg01, local14
02130     25 3D 02 F6 | 	mov	local12, local19
02134     1E 15 02 F6 | 	mov	arg02, local12
02138     35 00 00 FF 
0213c     2C E4 85 F1 | 	sub	objptr, ##27180
02140     28 60 B2 FD | 	call	#__system___string_concat
02144     1C FB 61 FC | 	wrlong	result1, local10
02148     14 43 02 F6 | 	mov	local15, local02
0214c     01 42 06 F1 | 	add	local15, #1
02150     23 4F 02 F6 | 	mov	local21, local17
02154     01 4E 06 F1 | 	add	local21, #1
02158     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
0215c                 | LR__0106
0215c     27 43 52 F2 | 	cmps	local15, local21 wc
02160     70 00 90 3D |  if_ae	jmp	#LR__0108
02164     21 2F 02 F6 | 	mov	local05, local15
02168     01 2E 06 F1 | 	add	local05, #1
0216c     03 2E 66 F0 | 	shl	local05, #3
02170     35 00 00 FF 
02174     2C E4 05 F1 | 	add	objptr, ##27180
02178     F2 2E 02 F1 | 	add	local05, objptr
0217c     17 2D 02 FB | 	rdlong	local04, local05
02180     21 31 02 F6 | 	mov	local06, local15
02184     01 30 06 F1 | 	add	local06, #1
02188     03 30 66 F0 | 	shl	local06, #3
0218c     F2 30 02 F1 | 	add	local06, objptr
02190     04 30 06 F1 | 	add	local06, #4
02194     18 2B 02 FB | 	rdlong	local03, local06
02198     21 31 02 F6 | 	mov	local06, local15
0219c     03 30 66 F0 | 	shl	local06, #3
021a0     F2 3C 02 F6 | 	mov	local12, objptr
021a4     F2 30 02 F1 | 	add	local06, objptr
021a8     18 2D 62 FC | 	wrlong	local04, local06
021ac     21 3B 02 F6 | 	mov	local11, local15
021b0     1D 3F 02 F6 | 	mov	local13, local11
021b4     03 3E 66 F0 | 	shl	local13, #3
021b8     F2 3E 02 F1 | 	add	local13, objptr
021bc     04 3E 06 F1 | 	add	local13, #4
021c0     1F 2B 62 FC | 	wrlong	local03, local13
021c4     01 42 06 F1 | 	add	local15, #1
021c8     35 00 00 FF 
021cc     2C E4 85 F1 | 	sub	objptr, ##27180
021d0     88 FF 9F FD | 	jmp	#LR__0106
021d4                 | LR__0107
021d4                 | LR__0108
021d4     01 46 86 F1 | 	sub	local17, #1
021d8     B0 01 00 FF 
021dc     3A 15 06 F6 | 	mov	arg02, ##@LR__5332
021e0     25 13 02 F6 | 	mov	arg01, local19
021e4     50 5F B2 FD | 	call	#__system___string_cmp
021e8     00 FA 0D F2 | 	cmp	result1, #0 wz
021ec     23 29 52 52 |  if_ne	cmps	local02, local17 wc
021f0     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
021f4                 | '   if p$<>"""" then k+=1:i+=1
021f4     B0 01 00 FF 
021f8     3C 15 06 F6 | 	mov	arg02, ##@LR__5333
021fc     25 13 02 F6 | 	mov	arg01, local19
02200     34 5F B2 FD | 	call	#__system___string_cmp
02204     00 FA 0D F2 | 	cmp	result1, #0 wz
02208     01 46 06 51 |  if_ne	add	local17, #1
0220c     01 28 06 51 |  if_ne	add	local02, #1
02210                 | LR__0109
02210     23 29 52 F2 | 	cmps	local02, local17 wc
02214     A0 FE 9F CD |  if_b	jmp	#LR__0104
02218     00 28 06 F6 | 	mov	local02, #0
0221c                 | ' 
0221c                 | ' ' 1f : concatenate strings if "" detected between
0221c                 | '  
0221c                 | ' i=0
0221c                 | ' do
0221c                 | LR__0110
0221c                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0221c     14 2F 02 F6 | 	mov	local05, local02
02220     03 2E 66 F0 | 	shl	local05, #3
02224     35 00 00 FF 
02228     2C E4 05 F1 | 	add	objptr, ##27180
0222c     F2 30 02 F6 | 	mov	local06, objptr
02230     F2 2E 02 F1 | 	add	local05, objptr
02234     17 13 02 FB | 	rdlong	arg01, local05
02238     01 14 06 F6 | 	mov	arg02, #1
0223c     35 00 00 FF 
02240     2C E4 85 F1 | 	sub	objptr, ##27180
02244     D0 7F B2 FD | 	call	#__system__Right_S
02248     FD 12 02 F6 | 	mov	arg01, result1
0224c     B0 01 00 FF 
02250     3E 15 06 F6 | 	mov	arg02, ##@LR__5334
02254     E0 5E B2 FD | 	call	#__system___string_cmp
02258     00 FA 0D F2 | 	cmp	result1, #0 wz
0225c     7C 01 90 5D |  if_ne	jmp	#LR__0116
02260     14 31 02 F6 | 	mov	local06, local02
02264     01 30 06 F1 | 	add	local06, #1
02268     03 30 66 F0 | 	shl	local06, #3
0226c     35 00 00 FF 
02270     2C E4 05 F1 | 	add	objptr, ##27180
02274     F2 3C 02 F6 | 	mov	local12, objptr
02278     F2 30 02 F1 | 	add	local06, objptr
0227c     18 13 02 FB | 	rdlong	arg01, local06
02280     01 14 06 F6 | 	mov	arg02, #1
02284     35 00 00 FF 
02288     2C E4 85 F1 | 	sub	objptr, ##27180
0228c     00 7F B2 FD | 	call	#__system__Left_S
02290     FD 12 02 F6 | 	mov	arg01, result1
02294     B0 01 00 FF 
02298     40 15 06 F6 | 	mov	arg02, ##@LR__5335
0229c     98 5E B2 FD | 	call	#__system___string_cmp
022a0     00 FA 0D F2 | 	cmp	result1, #0 wz
022a4     34 01 90 5D |  if_ne	jmp	#LR__0116
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     2C E4 05 F1 | 	add	objptr, ##27180
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     14 41 02 F6 | 	mov	local14, local02
022c0     03 40 66 F0 | 	shl	local14, #3
022c4     F2 40 02 F1 | 	add	local14, objptr
022c8     20 31 02 FB | 	rdlong	local06, local14
022cc     14 3F 02 F6 | 	mov	local13, local02
022d0     01 3E 06 F1 | 	add	local13, #1
022d4     03 3E 66 F0 | 	shl	local13, #3
022d8     F2 3E 02 F1 | 	add	local13, objptr
022dc     1F 3D 02 FB | 	rdlong	local12, local13
022e0     14 51 02 F6 | 	mov	local22, local02
022e4     01 50 06 F1 | 	add	local22, #1
022e8     28 53 02 F6 | 	mov	local23, local22
022ec     03 52 66 F0 | 	shl	local23, #3
022f0     F2 54 02 F6 | 	mov	local24, objptr
022f4     F2 52 02 F1 | 	add	local23, objptr
022f8     29 13 02 FB | 	rdlong	arg01, local23
022fc     35 00 00 FF 
02300     2C E4 85 F1 | 	sub	objptr, ##27180
02304     09 33 02 F6 | 	mov	local07, arg01
02308     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
0230c                 | LR__0111
0230c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02310     01 32 06 51 |  if_ne	add	local07, #1
02314     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
02318                 | LR__0112
02318     09 33 82 F1 | 	sub	local07, arg01
0231c     19 3B 02 F6 | 	mov	local11, local07
02320     01 3A 86 F1 | 	sub	local11, #1
02324     1E 13 02 F6 | 	mov	arg01, local12
02328     1D 15 02 F6 | 	mov	arg02, local11
0232c     E8 7E B2 FD | 	call	#__system__Right_S
02330     FD 3C 02 F6 | 	mov	local12, result1
02334     18 13 02 F6 | 	mov	arg01, local06
02338     1E 15 02 F6 | 	mov	arg02, local12
0233c     2C 5E B2 FD | 	call	#__system___string_concat
02340     FD 30 02 F6 | 	mov	local06, result1
02344     1C 31 62 FC | 	wrlong	local06, local10
02348                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02348     14 43 02 F6 | 	mov	local15, local02
0234c     01 42 06 F1 | 	add	local15, #1
02350     23 57 02 F6 | 	mov	local25, local17
02354     01 56 06 F1 | 	add	local25, #1
02358     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
0235c                 | LR__0113
0235c     2B 43 52 F2 | 	cmps	local15, local25 wc
02360     70 00 90 3D |  if_ae	jmp	#LR__0115
02364     21 2F 02 F6 | 	mov	local05, local15
02368     01 2E 06 F1 | 	add	local05, #1
0236c     03 2E 66 F0 | 	shl	local05, #3
02370     35 00 00 FF 
02374     2C E4 05 F1 | 	add	objptr, ##27180
02378     F2 2E 02 F1 | 	add	local05, objptr
0237c     17 2D 02 FB | 	rdlong	local04, local05
02380     21 31 02 F6 | 	mov	local06, local15
02384     01 30 06 F1 | 	add	local06, #1
02388     03 30 66 F0 | 	shl	local06, #3
0238c     F2 30 02 F1 | 	add	local06, objptr
02390     04 30 06 F1 | 	add	local06, #4
02394     18 2B 02 FB | 	rdlong	local03, local06
02398     21 31 02 F6 | 	mov	local06, local15
0239c     03 30 66 F0 | 	shl	local06, #3
023a0     F2 3C 02 F6 | 	mov	local12, objptr
023a4     F2 30 02 F1 | 	add	local06, objptr
023a8     18 2D 62 FC | 	wrlong	local04, local06
023ac     21 3B 02 F6 | 	mov	local11, local15
023b0     1D 3F 02 F6 | 	mov	local13, local11
023b4     03 3E 66 F0 | 	shl	local13, #3
023b8     F2 3E 02 F1 | 	add	local13, objptr
023bc     04 3E 06 F1 | 	add	local13, #4
023c0     1F 2B 62 FC | 	wrlong	local03, local13
023c4     01 42 06 F1 | 	add	local15, #1
023c8     35 00 00 FF 
023cc     2C E4 85 F1 | 	sub	objptr, ##27180
023d0     88 FF 9F FD | 	jmp	#LR__0113
023d4                 | LR__0114
023d4                 | LR__0115
023d4     01 28 86 F1 | 	sub	local02, #1
023d8     01 46 86 F1 | 	sub	local17, #1
023dc                 | LR__0116
023dc     01 28 06 F1 | 	add	local02, #1
023e0     23 29 52 F2 | 	cmps	local02, local17 wc
023e4     34 FE 9F CD |  if_b	jmp	#LR__0110
023e8     00 28 06 F6 | 	mov	local02, #0
023ec                 | '  
023ec                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
023ec                 | '  
023ec                 | ' i=0 
023ec                 | ' do
023ec                 | LR__0117
023ec     14 39 02 F6 | 	mov	local10, local02
023f0     03 38 66 F0 | 	shl	local10, #3
023f4     35 00 00 FF 
023f8     2C E4 05 F1 | 	add	objptr, ##27180
023fc     F2 38 02 F1 | 	add	local10, objptr
02400     1C 59 02 FB | 	rdlong	local26, local10
02404     14 39 02 F6 | 	mov	local10, local02
02408     01 38 06 F1 | 	add	local10, #1
0240c     03 38 66 F0 | 	shl	local10, #3
02410     F2 38 02 F1 | 	add	local10, objptr
02414     1C 5B 02 FB | 	rdlong	local27, local10
02418                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
02418                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
02418     B0 01 00 FF 
0241c     42 15 06 F6 | 	mov	arg02, ##@LR__5336
02420     2C 13 02 F6 | 	mov	arg01, local26
02424     35 00 00 FF 
02428     2C E4 85 F1 | 	sub	objptr, ##27180
0242c     08 5D B2 FD | 	call	#__system___string_cmp
02430     00 FA 0D F2 | 	cmp	result1, #0 wz
02434     A8 00 90 AD |  if_e	jmp	#LR__0118
02438     B0 01 00 FF 
0243c     44 15 06 F6 | 	mov	arg02, ##@LR__5337
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     F0 5C B2 FD | 	call	#__system___string_cmp
02448     FD 2A 0A F6 | 	mov	local03, result1 wz
0244c     90 00 90 AD |  if_e	jmp	#LR__0118
02450     B0 01 00 FF 
02454     46 31 06 F6 | 	mov	local06, ##@LR__5338
02458     2C 13 02 F6 | 	mov	arg01, local26
0245c     18 15 02 F6 | 	mov	arg02, local06
02460     D4 5C B2 FD | 	call	#__system___string_cmp
02464     00 FA 0D F2 | 	cmp	result1, #0 wz
02468     74 00 90 AD |  if_e	jmp	#LR__0118
0246c     B0 01 00 FF 
02470     48 3D 06 F6 | 	mov	local12, ##@LR__5339
02474     2C 13 02 F6 | 	mov	arg01, local26
02478     1E 15 02 F6 | 	mov	arg02, local12
0247c     B8 5C B2 FD | 	call	#__system___string_cmp
02480     00 FA 0D F2 | 	cmp	result1, #0 wz
02484     58 00 90 AD |  if_e	jmp	#LR__0118
02488     B0 01 00 FF 
0248c     4A 3B 06 F6 | 	mov	local11, ##@LR__5340
02490     1D 3D 02 F6 | 	mov	local12, local11
02494     2C 13 02 F6 | 	mov	arg01, local26
02498     1E 15 02 F6 | 	mov	arg02, local12
0249c     98 5C B2 FD | 	call	#__system___string_cmp
024a0     FD 30 0A F6 | 	mov	local06, result1 wz
024a4     38 00 90 AD |  if_e	jmp	#LR__0118
024a8     B0 01 00 FF 
024ac     4C 3B 06 F6 | 	mov	local11, ##@LR__5341
024b0     2C 13 02 F6 | 	mov	arg01, local26
024b4     1D 15 02 F6 | 	mov	arg02, local11
024b8     7C 5C B2 FD | 	call	#__system___string_cmp
024bc     FD 3C 0A F6 | 	mov	local12, result1 wz
024c0     1C 00 90 AD |  if_e	jmp	#LR__0118
024c4     B0 01 00 FF 
024c8     4E 41 06 F6 | 	mov	local14, ##@LR__5342
024cc     2C 13 02 F6 | 	mov	arg01, local26
024d0     20 15 02 F6 | 	mov	arg02, local14
024d4     60 5C B2 FD | 	call	#__system___string_cmp
024d8     FD 3A 0A F6 | 	mov	local11, result1 wz
024dc     20 00 90 5D |  if_ne	jmp	#LR__0119
024e0                 | LR__0118
024e0     B0 01 00 FF 
024e4     50 5D 06 F6 | 	mov	local28, ##@LR__5343
024e8     2E 3F 02 F6 | 	mov	local13, local28
024ec     2D 13 02 F6 | 	mov	arg01, local27
024f0     1F 15 02 F6 | 	mov	arg02, local13
024f4     40 5C B2 FD | 	call	#__system___string_cmp
024f8     FD 40 0A F6 | 	mov	local14, result1 wz
024fc     B8 00 90 AD |  if_e	jmp	#LR__0122
02500                 | LR__0119
02500     B0 01 00 FF 
02504     52 5D 06 F6 | 	mov	local28, ##@LR__5344
02508     2C 13 02 F6 | 	mov	arg01, local26
0250c     2E 15 02 F6 | 	mov	arg02, local28
02510     24 5C B2 FD | 	call	#__system___string_cmp
02514     FD 3E 0A F6 | 	mov	local13, result1 wz
02518     20 00 90 5D |  if_ne	jmp	#LR__0120
0251c     B0 01 00 FF 
02520     54 53 06 F6 | 	mov	local23, ##@LR__5345
02524     29 51 02 F6 | 	mov	local22, local23
02528     2D 13 02 F6 | 	mov	arg01, local27
0252c     28 15 02 F6 | 	mov	arg02, local22
02530     04 5C B2 FD | 	call	#__system___string_cmp
02534     FD 5C 0A F6 | 	mov	local28, result1 wz
02538     7C 00 90 AD |  if_e	jmp	#LR__0122
0253c                 | LR__0120
0253c     B0 01 00 FF 
02540     56 53 06 F6 | 	mov	local23, ##@LR__5346
02544     2C 13 02 F6 | 	mov	arg01, local26
02548     29 15 02 F6 | 	mov	arg02, local23
0254c     E8 5B B2 FD | 	call	#__system___string_cmp
02550     FD 50 0A F6 | 	mov	local22, result1 wz
02554     20 00 90 5D |  if_ne	jmp	#LR__0121
02558     B0 01 00 FF 
0255c     58 5F 06 F6 | 	mov	local29, ##@LR__5347
02560     2F 55 02 F6 | 	mov	local24, local29
02564     2D 13 02 F6 | 	mov	arg01, local27
02568     2A 15 02 F6 | 	mov	arg02, local24
0256c     C8 5B B2 FD | 	call	#__system___string_cmp
02570     FD 52 0A F6 | 	mov	local23, result1 wz
02574     40 00 90 AD |  if_e	jmp	#LR__0122
02578                 | LR__0121
02578     B0 01 00 FF 
0257c     5A 61 06 F6 | 	mov	local30, ##@LR__5348
02580     30 5F 02 F6 | 	mov	local29, local30
02584     2C 13 02 F6 | 	mov	arg01, local26
02588     2F 15 02 F6 | 	mov	arg02, local29
0258c     A8 5B B2 FD | 	call	#__system___string_cmp
02590     FD 54 0A F6 | 	mov	local24, result1 wz
02594     F0 00 90 5D |  if_ne	jmp	#LR__0126
02598     B0 01 00 FF 
0259c     5C 63 06 F6 | 	mov	local31, ##@LR__5349
025a0     31 61 02 F6 | 	mov	local30, local31
025a4     2D 13 02 F6 | 	mov	arg01, local27
025a8     30 15 02 F6 | 	mov	arg02, local30
025ac     88 5B B2 FD | 	call	#__system___string_cmp
025b0     FD 5E 0A F6 | 	mov	local29, result1 wz
025b4     D0 00 90 5D |  if_ne	jmp	#LR__0126
025b8                 | LR__0122
025b8     14 39 02 F6 | 	mov	local10, local02
025bc     03 38 66 F0 | 	shl	local10, #3
025c0     35 00 00 FF 
025c4     2C E4 05 F1 | 	add	objptr, ##27180
025c8     F2 38 02 F1 | 	add	local10, objptr
025cc     2D 3D 02 F6 | 	mov	local12, local27
025d0     2C 13 02 F6 | 	mov	arg01, local26
025d4     1E 15 02 F6 | 	mov	arg02, local12
025d8     35 00 00 FF 
025dc     2C E4 85 F1 | 	sub	objptr, ##27180
025e0     88 5B B2 FD | 	call	#__system___string_concat
025e4     1C FB 61 FC | 	wrlong	result1, local10
025e8                 | '     lparts(i).part$=s1$+s2$
025e8                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
025e8     14 43 02 F6 | 	mov	local15, local02
025ec     01 42 06 F1 | 	add	local15, #1
025f0     23 65 02 F6 | 	mov	local32, local17
025f4     01 64 06 F1 | 	add	local32, #1
025f8     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
025fc                 | LR__0123
025fc     32 43 52 F2 | 	cmps	local15, local32 wc
02600     7C 00 90 3D |  if_ae	jmp	#LR__0125
02604     21 2F 02 F6 | 	mov	local05, local15
02608     01 2E 06 F1 | 	add	local05, #1
0260c     03 2E 66 F0 | 	shl	local05, #3
02610     35 00 00 FF 
02614     2C E4 05 F1 | 	add	objptr, ##27180
02618     F2 2E 02 F1 | 	add	local05, objptr
0261c     17 2D 02 FB | 	rdlong	local04, local05
02620     21 31 02 F6 | 	mov	local06, local15
02624     01 30 06 F1 | 	add	local06, #1
02628     03 30 66 F0 | 	shl	local06, #3
0262c     F2 30 02 F1 | 	add	local06, objptr
02630     04 30 06 F1 | 	add	local06, #4
02634     18 2B 02 FB | 	rdlong	local03, local06
02638     21 31 02 F6 | 	mov	local06, local15
0263c     03 30 66 F0 | 	shl	local06, #3
02640     F2 3C 02 F6 | 	mov	local12, objptr
02644     F2 30 02 F1 | 	add	local06, objptr
02648     18 2D 62 FC | 	wrlong	local04, local06
0264c     21 3B 02 F6 | 	mov	local11, local15
02650     1D 41 02 F6 | 	mov	local14, local11
02654     20 3F 02 F6 | 	mov	local13, local14
02658     03 3E 66 F0 | 	shl	local13, #3
0265c     F2 5C 02 F6 | 	mov	local28, objptr
02660     F2 3E 02 F1 | 	add	local13, objptr
02664     04 3E 06 F1 | 	add	local13, #4
02668     1F 2B 62 FC | 	wrlong	local03, local13
0266c     04 3E 86 F1 | 	sub	local13, #4
02670     01 42 06 F1 | 	add	local15, #1
02674     35 00 00 FF 
02678     2C E4 85 F1 | 	sub	objptr, ##27180
0267c     7C FF 9F FD | 	jmp	#LR__0123
02680                 | LR__0124
02680                 | LR__0125
02680     01 28 86 F1 | 	sub	local02, #1
02684     01 46 86 F1 | 	sub	local17, #1
02688                 | LR__0126
02688     01 28 06 F1 | 	add	local02, #1
0268c     23 29 52 F2 | 	cmps	local02, local17 wc
02690     58 FD 9F CD |  if_b	jmp	#LR__0117
02694                 | '  
02694                 | ' ' 1h : now remove parts that are spaces
02694                 | ' 
02694                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02694     00 28 06 F6 | 	mov	local02, #0
02698     23 67 02 F6 | 	mov	local33, local17
0269c     01 66 06 F1 | 	add	local33, #1
026a0                 | LR__0127
026a0     33 29 52 F2 | 	cmps	local02, local33 wc
026a4     50 00 90 3D |  if_ae	jmp	#LR__0128
026a8     14 39 02 F6 | 	mov	local10, local02
026ac     03 38 66 F0 | 	shl	local10, #3
026b0     35 00 00 FF 
026b4     2C E4 05 F1 | 	add	objptr, ##27180
026b8     F2 38 02 F1 | 	add	local10, objptr
026bc     14 3D 02 F6 | 	mov	local12, local02
026c0     1E 3B 02 F6 | 	mov	local11, local12
026c4     1D 41 02 F6 | 	mov	local14, local11
026c8     03 40 66 F0 | 	shl	local14, #3
026cc     F2 3E 02 F6 | 	mov	local13, objptr
026d0     F2 40 02 F1 | 	add	local14, objptr
026d4     20 13 02 FB | 	rdlong	arg01, local14
026d8     35 00 00 FF 
026dc     2C E4 85 F1 | 	sub	objptr, ##27180
026e0     3C 7F B2 FD | 	call	#__system__RTrim_S
026e4     FD 12 02 F6 | 	mov	arg01, result1
026e8     74 7E B2 FD | 	call	#__system__LTrim_S
026ec     1C FB 61 FC | 	wrlong	result1, local10
026f0     01 28 06 F1 | 	add	local02, #1
026f4     A8 FF 9F FD | 	jmp	#LR__0127
026f8                 | LR__0128
026f8     00 28 06 F6 | 	mov	local02, #0
026fc     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
02700                 | ' i=0
02700                 | ' do 
02700                 | LR__0129
02700                 | '   if len(lparts(i).part$)=0 then 
02700     14 2F 02 F6 | 	mov	local05, local02
02704     03 2E 66 F0 | 	shl	local05, #3
02708     35 00 00 FF 
0270c     2C E4 05 F1 | 	add	objptr, ##27180
02710     F2 2E 02 F1 | 	add	local05, objptr
02714     17 13 02 FB | 	rdlong	arg01, local05
02718     35 00 00 FF 
0271c     2C E4 85 F1 | 	sub	objptr, ##27180
02720     09 33 02 F6 | 	mov	local07, arg01
02724                 | LR__0130
02724     19 FB C9 FA | 	rdbyte	result1, local07 wz
02728     01 32 06 51 |  if_ne	add	local07, #1
0272c     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
02730     09 33 8A F1 | 	sub	local07, arg01 wz
02734     C4 00 90 5D |  if_ne	jmp	#LR__0134
02738                 | '     if i=k-1 then k-=1  :  exit
02738     23 2D 02 F6 | 	mov	local04, local17
0273c     01 2C 86 F1 | 	sub	local04, #1
02740     16 29 0A F2 | 	cmp	local02, local04 wz
02744     01 46 86 A1 |  if_e	sub	local17, #1
02748     C4 00 90 AD |  if_e	jmp	#LR__0136
0274c                 | '     if i<k-1 then 
0274c     23 2D 02 F6 | 	mov	local04, local17
02750     01 2C 86 F1 | 	sub	local04, #1
02754     16 29 52 F2 | 	cmps	local02, local04 wc
02758     A0 00 90 3D |  if_ae	jmp	#LR__0133
0275c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0275c     14 43 02 F6 | 	mov	local15, local02
02760     23 69 02 F6 | 	mov	local34, local17
02764     01 68 86 F1 | 	sub	local34, #1
02768                 | LR__0131
02768     34 43 52 F2 | 	cmps	local15, local34 wc
0276c     80 00 90 3D |  if_ae	jmp	#LR__0132
02770     21 2F 02 F6 | 	mov	local05, local15
02774     01 2E 06 F1 | 	add	local05, #1
02778     03 2E 66 F0 | 	shl	local05, #3
0277c     35 00 00 FF 
02780     2C E4 05 F1 | 	add	objptr, ##27180
02784     F2 2E 02 F1 | 	add	local05, objptr
02788     17 2D 02 FB | 	rdlong	local04, local05
0278c     21 31 02 F6 | 	mov	local06, local15
02790     01 30 06 F1 | 	add	local06, #1
02794     03 30 66 F0 | 	shl	local06, #3
02798     F2 30 02 F1 | 	add	local06, objptr
0279c     04 30 06 F1 | 	add	local06, #4
027a0     18 2B 02 FB | 	rdlong	local03, local06
027a4     21 39 02 F6 | 	mov	local10, local15
027a8     1C 31 02 F6 | 	mov	local06, local10
027ac     03 30 66 F0 | 	shl	local06, #3
027b0     F2 3C 02 F6 | 	mov	local12, objptr
027b4     F2 30 02 F1 | 	add	local06, objptr
027b8     18 2D 62 FC | 	wrlong	local04, local06
027bc     21 3B 02 F6 | 	mov	local11, local15
027c0     1D 41 02 F6 | 	mov	local14, local11
027c4     20 3F 02 F6 | 	mov	local13, local14
027c8     03 3E 66 F0 | 	shl	local13, #3
027cc     F2 5C 02 F6 | 	mov	local28, objptr
027d0     F2 3E 02 F1 | 	add	local13, objptr
027d4     04 3E 06 F1 | 	add	local13, #4
027d8     1F 2B 62 FC | 	wrlong	local03, local13
027dc     04 3E 86 F1 | 	sub	local13, #4
027e0     01 42 06 F1 | 	add	local15, #1
027e4     35 00 00 FF 
027e8     2C E4 85 F1 | 	sub	objptr, ##27180
027ec     78 FF 9F FD | 	jmp	#LR__0131
027f0                 | LR__0132
027f0     01 46 86 F1 | 	sub	local17, #1
027f4                 | '       if i>0 then i-=1 
027f4     01 28 56 F2 | 	cmps	local02, #1 wc
027f8     01 28 86 31 |  if_ae	sub	local02, #1
027fc                 | LR__0133
027fc                 | LR__0134
027fc     01 28 06 F1 | 	add	local02, #1
02800     23 2D 02 F6 | 	mov	local04, local17
02804     01 2C 86 F1 | 	sub	local04, #1
02808     16 29 5A F2 | 	cmps	local02, local04 wcz
0280c     F0 FE 9F ED |  if_be	jmp	#LR__0129
02810                 | LR__0135
02810                 | LR__0136
02810                 | ' 
02810                 | ' ' 1i: lowercase all that is not a string
02810                 | ' 
02810                 | ' for j=0 to k-1
02810     00 42 06 F6 | 	mov	local15, #0
02814     23 6B 02 F6 | 	mov	local35, local17
02818                 | LR__0137
02818     35 43 52 F2 | 	cmps	local15, local35 wc
0281c     CC 00 90 3D |  if_ae	jmp	#LR__0140
02820                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
02820     21 2F 02 F6 | 	mov	local05, local15
02824     03 2E 66 F0 | 	shl	local05, #3
02828     35 00 00 FF 
0282c     2C E4 05 F1 | 	add	objptr, ##27180
02830     F2 2E 02 F1 | 	add	local05, objptr
02834     17 13 02 FB | 	rdlong	arg01, local05
02838     01 14 06 F6 | 	mov	arg02, #1
0283c     35 00 00 FF 
02840     2C E4 85 F1 | 	sub	objptr, ##27180
02844     48 79 B2 FD | 	call	#__system__Left_S
02848     FD 12 02 F6 | 	mov	arg01, result1
0284c     B0 01 00 FF 
02850     5E 15 06 F6 | 	mov	arg02, ##@LR__5350
02854     E0 58 B2 FD | 	call	#__system___string_cmp
02858     00 FA 0D F2 | 	cmp	result1, #0 wz
0285c     44 00 90 5D |  if_ne	jmp	#LR__0138
02860     21 31 02 F6 | 	mov	local06, local15
02864     03 30 66 F0 | 	shl	local06, #3
02868     35 00 00 FF 
0286c     2C E4 05 F1 | 	add	objptr, ##27180
02870     F2 3C 02 F6 | 	mov	local12, objptr
02874     F2 30 02 F1 | 	add	local06, objptr
02878     18 13 02 FB | 	rdlong	arg01, local06
0287c     01 14 06 F6 | 	mov	arg02, #1
02880     35 00 00 FF 
02884     2C E4 85 F1 | 	sub	objptr, ##27180
02888     8C 79 B2 FD | 	call	#__system__Right_S
0288c     FD 12 02 F6 | 	mov	arg01, result1
02890     B0 01 00 FF 
02894     60 15 06 F6 | 	mov	arg02, ##@LR__5351
02898     9C 58 B2 FD | 	call	#__system___string_cmp
0289c     00 FA 0D F2 | 	cmp	result1, #0 wz
028a0     40 00 90 AD |  if_e	jmp	#LR__0139
028a4                 | LR__0138
028a4     21 39 02 F6 | 	mov	local10, local15
028a8     03 38 66 F0 | 	shl	local10, #3
028ac     35 00 00 FF 
028b0     2C E4 05 F1 | 	add	objptr, ##27180
028b4     F2 38 02 F1 | 	add	local10, objptr
028b8     21 3D 02 F6 | 	mov	local12, local15
028bc     1E 3B 02 F6 | 	mov	local11, local12
028c0     1D 41 02 F6 | 	mov	local14, local11
028c4     03 40 66 F0 | 	shl	local14, #3
028c8     F2 3E 02 F6 | 	mov	local13, objptr
028cc     F2 40 02 F1 | 	add	local14, objptr
028d0     20 13 02 FB | 	rdlong	arg01, local14
028d4     35 00 00 FF 
028d8     2C E4 85 F1 | 	sub	objptr, ##27180
028dc     C0 7B B2 FD | 	call	#__system__LCase_S
028e0     1C FB 61 FC | 	wrlong	result1, local10
028e4                 | LR__0139
028e4     01 42 06 F1 | 	add	local15, #1
028e8     2C FF 9F FD | 	jmp	#LR__0137
028ec                 | LR__0140
028ec                 | ' 
028ec                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
028ec                 | ' 
028ec                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
028ec     00 28 06 F6 | 	mov	local02, #0
028f0     23 6D 02 F6 | 	mov	local36, local17
028f4     01 6C 06 F1 | 	add	local36, #1
028f8     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
028fc                 | LR__0141
028fc     36 29 52 F2 | 	cmps	local02, local36 wc
02900     30 00 90 3D |  if_ae	jmp	#LR__0143
02904     14 39 02 F6 | 	mov	local10, local02
02908     03 38 66 F0 | 	shl	local10, #3
0290c     35 00 00 FF 
02910     2C E4 05 F1 | 	add	objptr, ##27180
02914     F2 38 02 F1 | 	add	local10, objptr
02918     04 38 06 F1 | 	add	local10, #4
0291c     FF FF FF FF 
02920     1C FF 6B FC | 	wrlong	##-1, local10
02924     01 28 06 F1 | 	add	local02, #1
02928     35 00 00 FF 
0292c     2C E4 85 F1 | 	sub	objptr, ##27180
02930     C8 FF 9F FD | 	jmp	#LR__0141
02934                 | LR__0142
02934                 | LR__0143
02934                 | ' 
02934                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
02934     35 00 00 FF 
02938     2C E4 05 F1 | 	add	objptr, ##27180
0293c     F2 12 02 FB | 	rdlong	arg01, objptr
02940     35 00 00 FF 
02944     2C E4 85 F1 | 	sub	objptr, ##27180
02948     B8 47 B0 FD | 	call	#_isdec
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     01 6E 06 56 |  if_ne	mov	local37, #1
02954     00 6E 06 A6 |  if_e	mov	local37, #0
02958                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02958     35 00 00 FF 
0295c     2C E4 05 F1 | 	add	objptr, ##27180
02960     F2 12 02 FB | 	rdlong	arg01, objptr
02964     35 00 00 FF 
02968     2C E4 85 F1 | 	sub	objptr, ##27180
0296c     B0 01 00 FF 
02970     62 15 06 F6 | 	mov	arg02, ##@LR__5352
02974     C0 57 B2 FD | 	call	#__system___string_cmp
02978     00 FA 0D F2 | 	cmp	result1, #0 wz
0297c     01 6E 06 A6 |  if_e	mov	local37, #1
02980     00 28 06 F6 | 	mov	local02, #0
02984                 | ' i=0 : do 
02984                 | LR__0144
02984                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02984     14 2F 02 F6 | 	mov	local05, local02
02988     03 2E 66 F0 | 	shl	local05, #3
0298c     35 00 00 FF 
02990     2C E4 05 F1 | 	add	objptr, ##27180
02994     F2 2E 02 F1 | 	add	local05, objptr
02998     17 13 02 FB | 	rdlong	arg01, local05
0299c     B0 01 00 FF 
029a0     67 15 06 F6 | 	mov	arg02, ##@LR__5353
029a4     35 00 00 FF 
029a8     2C E4 85 F1 | 	sub	objptr, ##27180
029ac     88 57 B2 FD | 	call	#__system___string_cmp
029b0     00 FA 0D F2 | 	cmp	result1, #0 wz
029b4     0C 00 90 AD |  if_e	jmp	#LR__0145
029b8     01 28 06 F1 | 	add	local02, #1
029bc     23 29 5A F2 | 	cmps	local02, local17 wcz
029c0     C0 FF 9F ED |  if_be	jmp	#LR__0144
029c4                 | LR__0145
029c4                 | ' if i<k then addptr=i+1	 							' then found
029c4     23 29 52 F2 | 	cmps	local02, local17 wc
029c8     14 6F 02 C6 |  if_b	mov	local37, local02
029cc     01 6E 06 C1 |  if_b	add	local37, #1
029d0     35 00 00 FF 
029d4     2C E4 05 F1 | 	add	objptr, ##27180
029d8                 | ' lp$=lparts(addptr).part$ 
029d8                 | ' 
029d8                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
029d8     37 2F 02 F6 | 	mov	local05, local37
029dc     03 2E 66 F0 | 	shl	local05, #3
029e0     F2 2E 02 F1 | 	add	local05, objptr
029e4     17 13 02 FB | 	rdlong	arg01, local05
029e8     01 14 06 F6 | 	mov	arg02, #1
029ec     35 00 00 FF 
029f0     2C E4 85 F1 | 	sub	objptr, ##27180
029f4     98 77 B2 FD | 	call	#__system__Left_S
029f8     FD 12 02 F6 | 	mov	arg01, result1
029fc     B0 01 00 FF 
02a00     6C 15 06 F6 | 	mov	arg02, ##@LR__5354
02a04     30 57 B2 FD | 	call	#__system___string_cmp
02a08     00 FA 0D F2 | 	cmp	result1, #0 wz
02a0c     60 01 90 5D |  if_ne	jmp	#LR__0152
02a10     37 31 02 F6 | 	mov	local06, local37
02a14     03 30 66 F0 | 	shl	local06, #3
02a18     35 00 00 FF 
02a1c     2C E4 05 F1 | 	add	objptr, ##27180
02a20     F2 30 02 F1 | 	add	local06, objptr
02a24     18 13 02 FB | 	rdlong	arg01, local06
02a28     35 00 00 FF 
02a2c     2C E4 85 F1 | 	sub	objptr, ##27180
02a30     09 33 02 F6 | 	mov	local07, arg01
02a34     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02a38                 | LR__0146
02a38     19 FB C9 FA | 	rdbyte	result1, local07 wz
02a3c     01 32 06 51 |  if_ne	add	local07, #1
02a40     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02a44                 | LR__0147
02a44     09 33 82 F1 | 	sub	local07, arg01
02a48     02 32 56 F2 | 	cmps	local07, #2 wc
02a4c     20 01 90 CD |  if_b	jmp	#LR__0152
02a50     01 46 06 F1 | 	add	local17, #1
02a54                 | '   k+=1
02a54                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02a54     23 29 02 F6 | 	mov	local02, local17
02a58     37 71 02 F6 | 	mov	local38, local37
02a5c     01 70 06 F1 | 	add	local38, #1
02a60     35 00 00 FF 
02a64     2C E4 05 F1 | 	add	objptr, ##27180
02a68     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a6c                 | LR__0148
02a6c     14 2F 02 F6 | 	mov	local05, local02
02a70     01 2E 86 F1 | 	sub	local05, #1
02a74     03 2E 66 F0 | 	shl	local05, #3
02a78     F2 2E 02 F1 | 	add	local05, objptr
02a7c     17 2D 02 FB | 	rdlong	local04, local05
02a80     14 31 02 F6 | 	mov	local06, local02
02a84     01 30 86 F1 | 	sub	local06, #1
02a88     03 30 66 F0 | 	shl	local06, #3
02a8c     F2 30 02 F1 | 	add	local06, objptr
02a90     04 30 06 F1 | 	add	local06, #4
02a94     18 2B 02 FB | 	rdlong	local03, local06
02a98     14 31 02 F6 | 	mov	local06, local02
02a9c     03 30 66 F0 | 	shl	local06, #3
02aa0     F2 30 02 F1 | 	add	local06, objptr
02aa4     18 2D 62 FC | 	wrlong	local04, local06
02aa8     14 3F 02 F6 | 	mov	local13, local02
02aac     03 3E 66 F0 | 	shl	local13, #3
02ab0     F2 3E 02 F1 | 	add	local13, objptr
02ab4     04 3E 06 F1 | 	add	local13, #4
02ab8     1F 2B 62 FC | 	wrlong	local03, local13
02abc     01 28 86 F1 | 	sub	local02, #1
02ac0     38 29 52 F2 | 	cmps	local02, local38 wc
02ac4     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02ac8                 | LR__0149
02ac8     37 39 02 F6 | 	mov	local10, local37
02acc     01 38 06 F1 | 	add	local10, #1
02ad0     03 38 66 F0 | 	shl	local10, #3
02ad4     F2 38 02 F1 | 	add	local10, objptr
02ad8     37 41 02 F6 | 	mov	local14, local37
02adc     03 40 66 F0 | 	shl	local14, #3
02ae0     F2 40 02 F1 | 	add	local14, objptr
02ae4     20 31 02 FB | 	rdlong	local06, local14
02ae8     37 3F 02 F6 | 	mov	local13, local37
02aec     1F 5D 02 F6 | 	mov	local28, local13
02af0     2E 51 02 F6 | 	mov	local22, local28
02af4     03 50 66 F0 | 	shl	local22, #3
02af8     F2 52 02 F6 | 	mov	local23, objptr
02afc     F2 50 02 F1 | 	add	local22, objptr
02b00     28 13 02 FB | 	rdlong	arg01, local22
02b04     35 00 00 FF 
02b08     2C E4 85 F1 | 	sub	objptr, ##27180
02b0c     09 33 02 F6 | 	mov	local07, arg01
02b10     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02b14                 | LR__0150
02b14     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b18     01 32 06 51 |  if_ne	add	local07, #1
02b1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02b20                 | LR__0151
02b20     09 33 82 F1 | 	sub	local07, arg01
02b24     19 41 02 F6 | 	mov	local14, local07
02b28     20 3B 02 F6 | 	mov	local11, local14
02b2c     01 3A 86 F1 | 	sub	local11, #1
02b30     1D 3D 02 F6 | 	mov	local12, local11
02b34     18 13 02 F6 | 	mov	arg01, local06
02b38     1E 15 02 F6 | 	mov	arg02, local12
02b3c     D8 76 B2 FD | 	call	#__system__Right_S
02b40     1C FB 61 FC | 	wrlong	result1, local10
02b44     37 39 02 F6 | 	mov	local10, local37
02b48     03 38 66 F0 | 	shl	local10, #3
02b4c     35 00 00 FF 
02b50     2C E4 05 F1 | 	add	objptr, ##27180
02b54     F2 38 02 F1 | 	add	local10, objptr
02b58     B0 01 00 FF 
02b5c     6E 31 06 F6 | 	mov	local06, ##@LR__5355
02b60     1C 31 62 FC | 	wrlong	local06, local10
02b64     35 00 00 FF 
02b68     2C E4 85 F1 | 	sub	objptr, ##27180
02b6c     A8 01 90 FD | 	jmp	#LR__0160
02b70                 | LR__0152
02b70     37 31 02 F6 | 	mov	local06, local37
02b74     03 30 66 F0 | 	shl	local06, #3
02b78     35 00 00 FF 
02b7c     2C E4 05 F1 | 	add	objptr, ##27180
02b80     F2 3C 02 F6 | 	mov	local12, objptr
02b84     F2 30 02 F1 | 	add	local06, objptr
02b88     18 15 02 FB | 	rdlong	arg02, local06
02b8c     B0 01 00 FF 
02b90     70 17 06 F6 | 	mov	arg03, ##@LR__5356
02b94     01 12 06 F6 | 	mov	arg01, #1
02b98     35 00 00 FF 
02b9c     2C E4 85 F1 | 	sub	objptr, ##27180
02ba0     34 7B B2 FD | 	call	#__system__Instr
02ba4     FD 72 02 F6 | 	mov	local39, result1
02ba8                 | ' 
02ba8                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02ba8                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02ba8     01 72 56 F2 | 	cmps	local39, #1 wc
02bac     68 01 90 CD |  if_b	jmp	#LR__0159
02bb0     37 2F 02 F6 | 	mov	local05, local37
02bb4     03 2E 66 F0 | 	shl	local05, #3
02bb8     35 00 00 FF 
02bbc     2C E4 05 F1 | 	add	objptr, ##27180
02bc0     F2 2E 02 F1 | 	add	local05, objptr
02bc4     17 13 02 FB | 	rdlong	arg01, local05
02bc8     35 00 00 FF 
02bcc     2C E4 85 F1 | 	sub	objptr, ##27180
02bd0     09 33 02 F6 | 	mov	local07, arg01
02bd4     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02bd8                 | LR__0153
02bd8     19 FB C9 FA | 	rdbyte	result1, local07 wz
02bdc     01 32 06 51 |  if_ne	add	local07, #1
02be0     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02be4                 | LR__0154
02be4     09 33 82 F1 | 	sub	local07, arg01
02be8     19 73 52 F2 | 	cmps	local39, local07 wc
02bec     28 01 90 3D |  if_ae	jmp	#LR__0159
02bf0     01 46 06 F1 | 	add	local17, #1
02bf4                 | '   k+=1
02bf4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02bf4     23 29 02 F6 | 	mov	local02, local17
02bf8     37 75 02 F6 | 	mov	local40, local37
02bfc     01 74 06 F1 | 	add	local40, #1
02c00     35 00 00 FF 
02c04     2C E4 05 F1 | 	add	objptr, ##27180
02c08     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02c0c                 | LR__0155
02c0c     14 2F 02 F6 | 	mov	local05, local02
02c10     01 2E 86 F1 | 	sub	local05, #1
02c14     03 2E 66 F0 | 	shl	local05, #3
02c18     F2 2E 02 F1 | 	add	local05, objptr
02c1c     17 2D 02 FB | 	rdlong	local04, local05
02c20     14 31 02 F6 | 	mov	local06, local02
02c24     01 30 86 F1 | 	sub	local06, #1
02c28     03 30 66 F0 | 	shl	local06, #3
02c2c     F2 30 02 F1 | 	add	local06, objptr
02c30     04 30 06 F1 | 	add	local06, #4
02c34     18 2B 02 FB | 	rdlong	local03, local06
02c38     14 31 02 F6 | 	mov	local06, local02
02c3c     03 30 66 F0 | 	shl	local06, #3
02c40     F2 30 02 F1 | 	add	local06, objptr
02c44     18 2D 62 FC | 	wrlong	local04, local06
02c48     14 3F 02 F6 | 	mov	local13, local02
02c4c     03 3E 66 F0 | 	shl	local13, #3
02c50     F2 3E 02 F1 | 	add	local13, objptr
02c54     04 3E 06 F1 | 	add	local13, #4
02c58     1F 2B 62 FC | 	wrlong	local03, local13
02c5c     01 28 86 F1 | 	sub	local02, #1
02c60     3A 29 52 F2 | 	cmps	local02, local40 wc
02c64     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c68                 | LR__0156
02c68     37 39 02 F6 | 	mov	local10, local37
02c6c     01 38 06 F1 | 	add	local10, #1
02c70     03 38 66 F0 | 	shl	local10, #3
02c74     F2 38 02 F1 | 	add	local10, objptr
02c78     37 41 02 F6 | 	mov	local14, local37
02c7c     03 40 66 F0 | 	shl	local14, #3
02c80     F2 40 02 F1 | 	add	local14, objptr
02c84     20 31 02 FB | 	rdlong	local06, local14
02c88     37 5D 02 F6 | 	mov	local28, local37
02c8c     2E 51 02 F6 | 	mov	local22, local28
02c90     03 50 66 F0 | 	shl	local22, #3
02c94     F2 52 02 F6 | 	mov	local23, objptr
02c98     F2 50 02 F1 | 	add	local22, objptr
02c9c     28 13 02 FB | 	rdlong	arg01, local22
02ca0     35 00 00 FF 
02ca4     2C E4 85 F1 | 	sub	objptr, ##27180
02ca8     09 33 02 F6 | 	mov	local07, arg01
02cac     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02cb0                 | LR__0157
02cb0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02cb4     01 32 06 51 |  if_ne	add	local07, #1
02cb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02cbc                 | LR__0158
02cbc     09 33 82 F1 | 	sub	local07, arg01
02cc0     19 15 02 F6 | 	mov	arg02, local07
02cc4     39 15 82 F1 | 	sub	arg02, local39
02cc8     18 13 02 F6 | 	mov	arg01, local06
02ccc     48 75 B2 FD | 	call	#__system__Right_S
02cd0     1C FB 61 FC | 	wrlong	result1, local10
02cd4     37 39 02 F6 | 	mov	local10, local37
02cd8     03 38 66 F0 | 	shl	local10, #3
02cdc     35 00 00 FF 
02ce0     2C E4 05 F1 | 	add	objptr, ##27180
02ce4     F2 38 02 F1 | 	add	local10, objptr
02ce8     37 3B 02 F6 | 	mov	local11, local37
02cec     1D 41 02 F6 | 	mov	local14, local11
02cf0     03 40 66 F0 | 	shl	local14, #3
02cf4     F2 3E 02 F6 | 	mov	local13, objptr
02cf8     F2 40 02 F1 | 	add	local14, objptr
02cfc     20 13 02 FB | 	rdlong	arg01, local14
02d00     39 3D 02 F6 | 	mov	local12, local39
02d04     1E 15 02 F6 | 	mov	arg02, local12
02d08     35 00 00 FF 
02d0c     2C E4 85 F1 | 	sub	objptr, ##27180
02d10     7C 74 B2 FD | 	call	#__system__Left_S
02d14     1C FB 61 FC | 	wrlong	result1, local10
02d18                 | LR__0159
02d18                 | LR__0160
02d18     37 39 02 F6 | 	mov	local10, local37
02d1c     03 38 66 F0 | 	shl	local10, #3
02d20     35 00 00 FF 
02d24     2C E4 05 F1 | 	add	objptr, ##27180
02d28     F2 38 02 F1 | 	add	local10, objptr
02d2c     1C 77 02 FB | 	rdlong	local41, local10
02d30                 | ' 
02d30                 | ' 825
02d30                 | ' lp$=lparts(addptr).part$ 
02d30                 | ' 
02d30                 | ' ' process mouse/cursor/click on/off
02d30                 | ' 
02d30                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02d30     B0 01 00 FF 
02d34     72 15 06 F6 | 	mov	arg02, ##@LR__5357
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     35 00 00 FF 
02d40     2C E4 85 F1 | 	sub	objptr, ##27180
02d44     F0 53 B2 FD | 	call	#__system___string_cmp
02d48     00 FA 0D F2 | 	cmp	result1, #0 wz
02d4c     30 00 90 AD |  if_e	jmp	#LR__0161
02d50     B0 01 00 FF 
02d54     78 15 06 F6 | 	mov	arg02, ##@LR__5358
02d58     3B 13 02 F6 | 	mov	arg01, local41
02d5c     D8 53 B2 FD | 	call	#__system___string_cmp
02d60     00 FA 0D F2 | 	cmp	result1, #0 wz
02d64     18 00 90 AD |  if_e	jmp	#LR__0161
02d68     B0 01 00 FF 
02d6c     7F 15 06 F6 | 	mov	arg02, ##@LR__5359
02d70     3B 13 02 F6 | 	mov	arg01, local41
02d74     C0 53 B2 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d80                 | LR__0161
02d80                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d80     37 2F 02 F6 | 	mov	local05, local37
02d84     01 2E 06 F1 | 	add	local05, #1
02d88     03 2E 66 F0 | 	shl	local05, #3
02d8c     35 00 00 FF 
02d90     2C E4 05 F1 | 	add	objptr, ##27180
02d94     F2 2E 02 F1 | 	add	local05, objptr
02d98     17 13 02 FB | 	rdlong	arg01, local05
02d9c     B0 01 00 FF 
02da0     85 15 06 F6 | 	mov	arg02, ##@LR__5360
02da4     35 00 00 FF 
02da8     2C E4 85 F1 | 	sub	objptr, ##27180
02dac     88 53 B2 FD | 	call	#__system___string_cmp
02db0     00 FA 0D F2 | 	cmp	result1, #0 wz
02db4     38 00 90 5D |  if_ne	jmp	#LR__0162
02db8     37 39 02 F6 | 	mov	local10, local37
02dbc     01 38 06 F1 | 	add	local10, #1
02dc0     03 38 66 F0 | 	shl	local10, #3
02dc4     35 00 00 FF 
02dc8     2C E4 05 F1 | 	add	objptr, ##27180
02dcc     F2 38 02 F1 | 	add	local10, objptr
02dd0     B0 01 00 FF 
02dd4     88 31 06 F6 | 	mov	local06, ##@LR__5361
02dd8     1C 31 62 FC | 	wrlong	local06, local10
02ddc     14 E4 05 F1 | 	add	objptr, #20
02de0     01 00 80 FF 
02de4     F2 00 68 FC | 	wrlong	##512, objptr
02de8     35 00 00 FF 
02dec     40 E4 85 F1 | 	sub	objptr, ##27200
02df0                 | LR__0162
02df0                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02df0     37 2F 02 F6 | 	mov	local05, local37
02df4     01 2E 06 F1 | 	add	local05, #1
02df8     03 2E 66 F0 | 	shl	local05, #3
02dfc     35 00 00 FF 
02e00     2C E4 05 F1 | 	add	objptr, ##27180
02e04     F2 2E 02 F1 | 	add	local05, objptr
02e08     17 13 02 FB | 	rdlong	arg01, local05
02e0c     B0 01 00 FF 
02e10     8A 15 06 F6 | 	mov	arg02, ##@LR__5362
02e14     35 00 00 FF 
02e18     2C E4 85 F1 | 	sub	objptr, ##27180
02e1c     18 53 B2 FD | 	call	#__system___string_cmp
02e20     00 FA 0D F2 | 	cmp	result1, #0 wz
02e24     38 00 90 5D |  if_ne	jmp	#LR__0163
02e28     37 39 02 F6 | 	mov	local10, local37
02e2c     01 38 06 F1 | 	add	local10, #1
02e30     03 38 66 F0 | 	shl	local10, #3
02e34     35 00 00 FF 
02e38     2C E4 05 F1 | 	add	objptr, ##27180
02e3c     F2 38 02 F1 | 	add	local10, objptr
02e40     B0 01 00 FF 
02e44     8E 31 06 F6 | 	mov	local06, ##@LR__5363
02e48     1C 31 62 FC | 	wrlong	local06, local10
02e4c     14 E4 05 F1 | 	add	objptr, #20
02e50     01 00 80 FF 
02e54     F2 00 68 FC | 	wrlong	##512, objptr
02e58     35 00 00 FF 
02e5c     40 E4 85 F1 | 	sub	objptr, ##27200
02e60                 | LR__0163
02e60                 | LR__0164
02e60                 | ' 		
02e60                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02e60                 | ' 
02e60                 | ' if (lp$="mode" orelse lp$="m.") then 
02e60     B0 01 00 FF 
02e64     90 15 06 F6 | 	mov	arg02, ##@LR__5364
02e68     3B 13 02 F6 | 	mov	arg01, local41
02e6c     C8 52 B2 FD | 	call	#__system___string_cmp
02e70     00 FA 0D F2 | 	cmp	result1, #0 wz
02e74     18 00 90 AD |  if_e	jmp	#LR__0165
02e78     B0 01 00 FF 
02e7c     95 15 06 F6 | 	mov	arg02, ##@LR__5365
02e80     3B 13 02 F6 | 	mov	arg01, local41
02e84     B0 52 B2 FD | 	call	#__system___string_cmp
02e88     00 FA 0D F2 | 	cmp	result1, #0 wz
02e8c     58 02 90 5D |  if_ne	jmp	#LR__0172
02e90                 | LR__0165
02e90                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     2C E4 05 F1 | 	add	objptr, ##27180
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     B0 01 00 FF 
02eb0     98 15 06 F6 | 	mov	arg02, ##@LR__5366
02eb4     35 00 00 FF 
02eb8     2C E4 85 F1 | 	sub	objptr, ##27180
02ebc     78 52 B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0166
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     2C E4 05 F1 | 	add	objptr, ##27180
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     B0 01 00 FF 
02ee4     9E 31 06 F6 | 	mov	local06, ##@LR__5367
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     2C E4 85 F1 | 	sub	objptr, ##27180
02ef4                 | LR__0166
02ef4                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     2C E4 05 F1 | 	add	objptr, ##27180
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     B0 01 00 FF 
02f14     A0 15 06 F6 | 	mov	arg02, ##@LR__5368
02f18     35 00 00 FF 
02f1c     2C E4 85 F1 | 	sub	objptr, ##27180
02f20     14 52 B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0167
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     2C E4 05 F1 | 	add	objptr, ##27180
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     B0 01 00 FF 
02f48     A9 31 06 F6 | 	mov	local06, ##@LR__5369
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     2C E4 85 F1 | 	sub	objptr, ##27180
02f58                 | LR__0167
02f58                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     2C E4 05 F1 | 	add	objptr, ##27180
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     B0 01 00 FF 
02f78     AB 15 06 F6 | 	mov	arg02, ##@LR__5370
02f7c     35 00 00 FF 
02f80     2C E4 85 F1 | 	sub	objptr, ##27180
02f84     B0 51 B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     2C E4 05 F1 | 	add	objptr, ##27180
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     B0 01 00 FF 
02fac     B4 31 06 F6 | 	mov	local06, ##@LR__5371
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     2C E4 85 F1 | 	sub	objptr, ##27180
02fbc                 | LR__0168
02fbc                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     2C E4 05 F1 | 	add	objptr, ##27180
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     B0 01 00 FF 
02fdc     B6 15 06 F6 | 	mov	arg02, ##@LR__5372
02fe0     35 00 00 FF 
02fe4     2C E4 85 F1 | 	sub	objptr, ##27180
02fe8     4C 51 B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0169
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     2C E4 05 F1 | 	add	objptr, ##27180
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     B0 01 00 FF 
03010     BF 31 06 F6 | 	mov	local06, ##@LR__5373
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     2C E4 85 F1 | 	sub	objptr, ##27180
03020                 | LR__0169
03020                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
03020     37 2F 02 F6 | 	mov	local05, local37
03024     01 2E 06 F1 | 	add	local05, #1
03028     03 2E 66 F0 | 	shl	local05, #3
0302c     35 00 00 FF 
03030     2C E4 05 F1 | 	add	objptr, ##27180
03034     F2 2E 02 F1 | 	add	local05, objptr
03038     17 13 02 FB | 	rdlong	arg01, local05
0303c     B0 01 00 FF 
03040     C1 15 06 F6 | 	mov	arg02, ##@LR__5374
03044     35 00 00 FF 
03048     2C E4 85 F1 | 	sub	objptr, ##27180
0304c     E8 50 B2 FD | 	call	#__system___string_cmp
03050     00 FA 0D F2 | 	cmp	result1, #0 wz
03054     2C 00 90 5D |  if_ne	jmp	#LR__0170
03058     37 39 02 F6 | 	mov	local10, local37
0305c     01 38 06 F1 | 	add	local10, #1
03060     03 38 66 F0 | 	shl	local10, #3
03064     35 00 00 FF 
03068     2C E4 05 F1 | 	add	objptr, ##27180
0306c     F2 38 02 F1 | 	add	local10, objptr
03070     B0 01 00 FF 
03074     C4 31 06 F6 | 	mov	local06, ##@LR__5375
03078     1C 31 62 FC | 	wrlong	local06, local10
0307c     35 00 00 FF 
03080     2C E4 85 F1 | 	sub	objptr, ##27180
03084                 | LR__0170
03084                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
03084     37 2F 02 F6 | 	mov	local05, local37
03088     01 2E 06 F1 | 	add	local05, #1
0308c     03 2E 66 F0 | 	shl	local05, #3
03090     35 00 00 FF 
03094     2C E4 05 F1 | 	add	objptr, ##27180
03098     F2 2E 02 F1 | 	add	local05, objptr
0309c     17 13 02 FB | 	rdlong	arg01, local05
030a0     B0 01 00 FF 
030a4     C6 15 06 F6 | 	mov	arg02, ##@LR__5376
030a8     35 00 00 FF 
030ac     2C E4 85 F1 | 	sub	objptr, ##27180
030b0     84 50 B2 FD | 	call	#__system___string_cmp
030b4     00 FA 0D F2 | 	cmp	result1, #0 wz
030b8     2C 00 90 5D |  if_ne	jmp	#LR__0171
030bc     37 39 02 F6 | 	mov	local10, local37
030c0     01 38 06 F1 | 	add	local10, #1
030c4     03 38 66 F0 | 	shl	local10, #3
030c8     35 00 00 FF 
030cc     2C E4 05 F1 | 	add	objptr, ##27180
030d0     F2 38 02 F1 | 	add	local10, objptr
030d4     B0 01 00 FF 
030d8     CC 31 06 F6 | 	mov	local06, ##@LR__5377
030dc     1C 31 62 FC | 	wrlong	local06, local10
030e0     35 00 00 FF 
030e4     2C E4 85 F1 | 	sub	objptr, ##27180
030e8                 | LR__0171
030e8                 | LR__0172
030e8                 | ' 
030e8                 | ' ' find part types 
030e8                 | ' 
030e8                 | ' for i=0 to k-1
030e8     00 28 06 F6 | 	mov	local02, #0
030ec     23 79 02 F6 | 	mov	local42, local17
030f0                 | LR__0173
030f0     3C 29 52 F2 | 	cmps	local02, local42 wc
030f4     A4 07 90 3D |  if_ae	jmp	#LR__0185
030f8     14 39 02 F6 | 	mov	local10, local02
030fc     03 38 66 F0 | 	shl	local10, #3
03100     35 00 00 FF 
03104     2C E4 05 F1 | 	add	objptr, ##27180
03108     F2 38 02 F1 | 	add	local10, objptr
0310c     14 3B 02 F6 | 	mov	local11, local02
03110     1D 41 02 F6 | 	mov	local14, local11
03114     20 3F 02 F6 | 	mov	local13, local14
03118     03 3E 66 F0 | 	shl	local13, #3
0311c     F2 3E 02 F1 | 	add	local13, objptr
03120     1F 13 02 FB | 	rdlong	arg01, local13
03124     35 00 00 FF 
03128     2C E4 85 F1 | 	sub	objptr, ##27180
0312c     70 1B B0 FD | 	call	#_isseparator
03130     FD FA E1 F8 | 	getbyte	result1, result1, #0
03134     04 38 06 F1 | 	add	local10, #4
03138     1C FB 61 FC | 	wrlong	result1, local10
0313c                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0313c     14 39 02 F6 | 	mov	local10, local02
03140     03 38 66 F0 | 	shl	local10, #3
03144     35 00 00 FF 
03148     2C E4 05 F1 | 	add	objptr, ##27180
0314c     F2 38 02 F1 | 	add	local10, objptr
03150     04 38 06 F1 | 	add	local10, #4
03154     1C 3D 02 FB | 	rdlong	local12, local10
03158     01 3C 56 F2 | 	cmps	local12, #1 wc
0315c     35 00 00 FF 
03160     2C E4 85 F1 | 	sub	objptr, ##27180
03164     2C 07 90 3D |  if_ae	jmp	#LR__0184
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     2C E4 05 F1 | 	add	objptr, ##27180
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     14 3B 02 F6 | 	mov	local11, local02
03180     1D 41 02 F6 | 	mov	local14, local11
03184     20 3F 02 F6 | 	mov	local13, local14
03188     03 3E 66 F0 | 	shl	local13, #3
0318c     F2 3E 02 F1 | 	add	local13, objptr
03190     1F 13 02 FB | 	rdlong	arg01, local13
03194     35 00 00 FF 
03198     2C E4 85 F1 | 	sub	objptr, ##27180
0319c     4C 13 B0 FD | 	call	#_isoperator
031a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
031a4     04 38 06 F1 | 	add	local10, #4
031a8     1C FB 61 FC | 	wrlong	result1, local10
031ac                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031ac     14 39 02 F6 | 	mov	local10, local02
031b0     03 38 66 F0 | 	shl	local10, #3
031b4     35 00 00 FF 
031b8     2C E4 05 F1 | 	add	objptr, ##27180
031bc     F2 38 02 F1 | 	add	local10, objptr
031c0     04 38 06 F1 | 	add	local10, #4
031c4     1C 3D 02 FB | 	rdlong	local12, local10
031c8     01 3C 56 F2 | 	cmps	local12, #1 wc
031cc     35 00 00 FF 
031d0     2C E4 85 F1 | 	sub	objptr, ##27180
031d4     BC 06 90 3D |  if_ae	jmp	#LR__0184
031d8     14 39 02 F6 | 	mov	local10, local02
031dc     03 38 66 F0 | 	shl	local10, #3
031e0     35 00 00 FF 
031e4     2C E4 05 F1 | 	add	objptr, ##27180
031e8     F2 38 02 F1 | 	add	local10, objptr
031ec     14 3B 02 F6 | 	mov	local11, local02
031f0     1D 41 02 F6 | 	mov	local14, local11
031f4     20 3F 02 F6 | 	mov	local13, local14
031f8     03 3E 66 F0 | 	shl	local13, #3
031fc     F2 3E 02 F1 | 	add	local13, objptr
03200     1F 13 02 FB | 	rdlong	arg01, local13
03204     35 00 00 FF 
03208     2C E4 85 F1 | 	sub	objptr, ##27180
0320c                 | ' 
0320c                 | ' select case s
0320c     B1 01 00 FF 
03210     D1 14 06 F6 | 	mov	arg02, ##@LR__5468
03214     20 4F B2 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     1B FA 05 A6 |  if_e	mov	result1, #27
03220     00 FA 05 56 |  if_ne	mov	result1, #0
03224     FD FA E1 F8 | 	getbyte	result1, result1, #0
03228     04 38 06 F1 | 	add	local10, #4
0322c     1C FB 61 FC | 	wrlong	result1, local10
03230                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     2C E4 05 F1 | 	add	objptr, ##27180
03240     F2 38 02 F1 | 	add	local10, objptr
03244     04 38 06 F1 | 	add	local10, #4
03248     1C 3D 02 FB | 	rdlong	local12, local10
0324c     01 3C 56 F2 | 	cmps	local12, #1 wc
03250     35 00 00 FF 
03254     2C E4 85 F1 | 	sub	objptr, ##27180
03258     38 06 90 3D |  if_ae	jmp	#LR__0184
0325c     14 39 02 F6 | 	mov	local10, local02
03260     03 38 66 F0 | 	shl	local10, #3
03264     35 00 00 FF 
03268     2C E4 05 F1 | 	add	objptr, ##27180
0326c     F2 38 02 F1 | 	add	local10, objptr
03270     14 3B 02 F6 | 	mov	local11, local02
03274     1D 41 02 F6 | 	mov	local14, local11
03278     20 3F 02 F6 | 	mov	local13, local14
0327c     03 3E 66 F0 | 	shl	local13, #3
03280     F2 3E 02 F1 | 	add	local13, objptr
03284     1F 13 02 FB | 	rdlong	arg01, local13
03288     35 00 00 FF 
0328c     2C E4 85 F1 | 	sub	objptr, ##27180
03290     0C 1C B0 FD | 	call	#_iscommand
03294     FD FA E1 F8 | 	getbyte	result1, result1, #0
03298     04 38 06 F1 | 	add	local10, #4
0329c     1C FB 61 FC | 	wrlong	result1, local10
032a0                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032a0     14 39 02 F6 | 	mov	local10, local02
032a4     03 38 66 F0 | 	shl	local10, #3
032a8     35 00 00 FF 
032ac     2C E4 05 F1 | 	add	objptr, ##27180
032b0     F2 38 02 F1 | 	add	local10, objptr
032b4     04 38 06 F1 | 	add	local10, #4
032b8     1C 3D 02 FB | 	rdlong	local12, local10
032bc     01 3C 56 F2 | 	cmps	local12, #1 wc
032c0     35 00 00 FF 
032c4     2C E4 85 F1 | 	sub	objptr, ##27180
032c8     C8 05 90 3D |  if_ae	jmp	#LR__0184
032cc     14 39 02 F6 | 	mov	local10, local02
032d0     03 38 66 F0 | 	shl	local10, #3
032d4     35 00 00 FF 
032d8     2C E4 05 F1 | 	add	objptr, ##27180
032dc     F2 38 02 F1 | 	add	local10, objptr
032e0     14 3B 02 F6 | 	mov	local11, local02
032e4     1D 41 02 F6 | 	mov	local14, local11
032e8     20 3F 02 F6 | 	mov	local13, local14
032ec     03 3E 66 F0 | 	shl	local13, #3
032f0     F2 5C 02 F6 | 	mov	local28, objptr
032f4     F2 3E 02 F1 | 	add	local13, objptr
032f8     1F 13 02 FB | 	rdlong	arg01, local13
032fc     35 00 00 FF 
03300     2C E4 85 F1 | 	sub	objptr, ##27180
03304     F8 2C B0 FD | 	call	#_isfunction
03308     FD FA E1 F8 | 	getbyte	result1, result1, #0
0330c     04 38 06 F1 | 	add	local10, #4
03310     1C FB 61 FC | 	wrlong	result1, local10
03314                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03314     14 39 02 F6 | 	mov	local10, local02
03318     03 38 66 F0 | 	shl	local10, #3
0331c     35 00 00 FF 
03320     2C E4 05 F1 | 	add	objptr, ##27180
03324     F2 38 02 F1 | 	add	local10, objptr
03328     04 38 06 F1 | 	add	local10, #4
0332c     1C 3D 02 FB | 	rdlong	local12, local10
03330     01 3C 56 F2 | 	cmps	local12, #1 wc
03334     35 00 00 FF 
03338     2C E4 85 F1 | 	sub	objptr, ##27180
0333c     54 05 90 3D |  if_ae	jmp	#LR__0184
03340     14 39 02 F6 | 	mov	local10, local02
03344     03 38 66 F0 | 	shl	local10, #3
03348     35 00 00 FF 
0334c     2C E4 05 F1 | 	add	objptr, ##27180
03350     F2 38 02 F1 | 	add	local10, objptr
03354     14 3B 02 F6 | 	mov	local11, local02
03358     1D 41 02 F6 | 	mov	local14, local11
0335c     03 40 66 F0 | 	shl	local14, #3
03360     F2 3E 02 F6 | 	mov	local13, objptr
03364     F2 40 02 F1 | 	add	local14, objptr
03368     20 13 02 FB | 	rdlong	arg01, local14
0336c     35 00 00 FF 
03370     2C E4 85 F1 | 	sub	objptr, ##27180
03374     BC 15 B0 FD | 	call	#_isnotename
03378     04 38 06 F1 | 	add	local10, #4
0337c     1C FB 61 FC | 	wrlong	result1, local10
03380                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03380                 | ' if lparts(i).token>0 then 
03380     14 39 02 F6 | 	mov	local10, local02
03384     03 38 66 F0 | 	shl	local10, #3
03388     35 00 00 FF 
0338c     2C E4 05 F1 | 	add	objptr, ##27180
03390     F2 38 02 F1 | 	add	local10, objptr
03394     04 38 06 F1 | 	add	local10, #4
03398     1C 31 02 FB | 	rdlong	local06, local10
0339c     01 30 56 F2 | 	cmps	local06, #1 wc
033a0     35 00 00 FF 
033a4     2C E4 85 F1 | 	sub	objptr, ##27180
033a8     8C 00 90 CD |  if_b	jmp	#LR__0174
033ac     14 2F 02 F6 | 	mov	local05, local02
033b0     03 2E 66 F0 | 	shl	local05, #3
033b4     35 00 00 FF 
033b8     2C E4 05 F1 | 	add	objptr, ##27180
033bc     F2 2E 02 F1 | 	add	local05, objptr
033c0     04 2E 06 F1 | 	add	local05, #4
033c4     17 3D 02 FB | 	rdlong	local12, local05
033c8     1E 13 02 F6 | 	mov	arg01, local12
033cc     35 00 00 FF 
033d0     2C E4 85 F1 | 	sub	objptr, ##27180
033d4     50 3E B0 FD | 	call	#_getnoteval
033d8     FD 7A 02 F6 | 	mov	local43, result1
033dc     14 39 02 F6 | 	mov	local10, local02
033e0     03 38 66 F0 | 	shl	local10, #3
033e4     35 00 00 FF 
033e8     2C E4 05 F1 | 	add	objptr, ##27180
033ec     F2 38 02 F1 | 	add	local10, objptr
033f0     3D 13 02 F6 | 	mov	arg01, local43
033f4     35 00 00 FF 
033f8     2C E4 85 F1 | 	sub	objptr, ##27180
033fc     88 6F B2 FD | 	call	#__system__str_S
03400     1C FB 61 FC | 	wrlong	result1, local10
03404     14 2D 02 F6 | 	mov	local04, local02
03408     16 2B 02 F6 | 	mov	local03, local04
0340c     15 39 02 F6 | 	mov	local10, local03
03410     03 38 66 F0 | 	shl	local10, #3
03414     35 00 00 FF 
03418     2C E4 05 F1 | 	add	objptr, ##27180
0341c     F2 38 02 F1 | 	add	local10, objptr
03420     04 38 06 F1 | 	add	local10, #4
03424     01 00 80 FF 
03428     1C 05 68 FC | 	wrlong	##514, local10
0342c     35 00 00 FF 
03430     2C E4 85 F1 | 	sub	objptr, ##27180
03434     5C 04 90 FD | 	jmp	#LR__0184
03438                 | LR__0174
03438     14 39 02 F6 | 	mov	local10, local02
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     2C E4 05 F1 | 	add	objptr, ##27180
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     14 41 02 F6 | 	mov	local14, local02
03450     03 40 66 F0 | 	shl	local14, #3
03454     F2 40 02 F1 | 	add	local14, objptr
03458     20 13 02 FB | 	rdlong	arg01, local14
0345c     35 00 00 FF 
03460     2C E4 85 F1 | 	sub	objptr, ##27180
03464     64 13 B0 FD | 	call	#_ischannel
03468     04 38 06 F1 | 	add	local10, #4
0346c     1C FB 61 FC | 	wrlong	result1, local10
03470                 | ' 
03470                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
03470                 | ' 
03470                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03470     14 39 02 F6 | 	mov	local10, local02
03474     03 38 66 F0 | 	shl	local10, #3
03478     35 00 00 FF 
0347c     2C E4 05 F1 | 	add	objptr, ##27180
03480     F2 38 02 F1 | 	add	local10, objptr
03484     04 38 06 F1 | 	add	local10, #4
03488     1C 31 02 FB | 	rdlong	local06, local10
0348c     01 30 56 F2 | 	cmps	local06, #1 wc
03490     35 00 00 FF 
03494     2C E4 85 F1 | 	sub	objptr, ##27180
03498     74 00 90 CD |  if_b	jmp	#LR__0175
0349c     14 39 02 F6 | 	mov	local10, local02
034a0     03 38 66 F0 | 	shl	local10, #3
034a4     35 00 00 FF 
034a8     2C E4 05 F1 | 	add	objptr, ##27180
034ac     F2 38 02 F1 | 	add	local10, objptr
034b0     14 3B 02 F6 | 	mov	local11, local02
034b4     1D 41 02 F6 | 	mov	local14, local11
034b8     03 40 66 F0 | 	shl	local14, #3
034bc     F2 3E 02 F6 | 	mov	local13, objptr
034c0     F2 40 02 F1 | 	add	local14, objptr
034c4     20 13 02 FB | 	rdlong	arg01, local14
034c8     01 3C 06 F6 | 	mov	local12, #1
034cc     01 14 06 F6 | 	mov	arg02, #1
034d0     35 00 00 FF 
034d4     2C E4 85 F1 | 	sub	objptr, ##27180
034d8     3C 6D B2 FD | 	call	#__system__Right_S
034dc     1C FB 61 FC | 	wrlong	result1, local10
034e0     14 2D 02 F6 | 	mov	local04, local02
034e4     16 2B 02 F6 | 	mov	local03, local04
034e8     15 39 02 F6 | 	mov	local10, local03
034ec     03 38 66 F0 | 	shl	local10, #3
034f0     35 00 00 FF 
034f4     2C E4 05 F1 | 	add	objptr, ##27180
034f8     F2 38 02 F1 | 	add	local10, objptr
034fc     04 38 06 F1 | 	add	local10, #4
03500     1C 59 68 FC | 	wrlong	#44, local10
03504     35 00 00 FF 
03508     2C E4 85 F1 | 	sub	objptr, ##27180
0350c     84 03 90 FD | 	jmp	#LR__0184
03510                 | LR__0175
03510     14 39 02 F6 | 	mov	local10, local02
03514     03 38 66 F0 | 	shl	local10, #3
03518     35 00 00 FF 
0351c     2C E4 05 F1 | 	add	objptr, ##27180
03520     F2 38 02 F1 | 	add	local10, objptr
03524     14 3B 02 F6 | 	mov	local11, local02
03528     1D 41 02 F6 | 	mov	local14, local11
0352c     03 40 66 F0 | 	shl	local14, #3
03530     F2 3E 02 F6 | 	mov	local13, objptr
03534     F2 40 02 F1 | 	add	local14, objptr
03538     20 13 02 FB | 	rdlong	arg01, local14
0353c     35 00 00 FF 
03540     2C E4 85 F1 | 	sub	objptr, ##27180
03544     6C 13 B0 FD | 	call	#_isconstant
03548     04 38 06 F1 | 	add	local10, #4
0354c     1C FB 61 FC | 	wrlong	result1, local10
03550                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03550     14 39 02 F6 | 	mov	local10, local02
03554     03 38 66 F0 | 	shl	local10, #3
03558     35 00 00 FF 
0355c     2C E4 05 F1 | 	add	objptr, ##27180
03560     F2 38 02 F1 | 	add	local10, objptr
03564     04 38 06 F1 | 	add	local10, #4
03568     1C 3D 02 FB | 	rdlong	local12, local10
0356c     01 3C 56 F2 | 	cmps	local12, #1 wc
03570     35 00 00 FF 
03574     2C E4 85 F1 | 	sub	objptr, ##27180
03578     94 00 90 CD |  if_b	jmp	#LR__0176
0357c     14 39 02 F6 | 	mov	local10, local02
03580     03 38 66 F0 | 	shl	local10, #3
03584     35 00 00 FF 
03588     2C E4 05 F1 | 	add	objptr, ##27180
0358c     F2 38 02 F1 | 	add	local10, objptr
03590     14 3D 02 F6 | 	mov	local12, local02
03594     1E 3B 02 F6 | 	mov	local11, local12
03598     1D 41 02 F6 | 	mov	local14, local11
0359c     03 40 66 F0 | 	shl	local14, #3
035a0     F2 3E 02 F6 | 	mov	local13, objptr
035a4     F2 40 02 F1 | 	add	local14, objptr
035a8     04 40 06 F1 | 	add	local14, #4
035ac     20 13 02 FB | 	rdlong	arg01, local14
035b0     04 40 86 F1 | 	sub	local14, #4
035b4     35 00 00 FF 
035b8     2C E4 85 F1 | 	sub	objptr, ##27180
035bc     09 13 52 F6 | 	abs	arg01, arg01 wc
035c0     1F 7C C6 C9 |  if_b	decod	local44, #31
035c4     00 7C 06 36 |  if_ae	mov	local44, #0
035c8     BC 75 B2 FD | 	call	#__system___float_fromuns
035cc     3E FB 61 F5 | 	xor	result1, local44
035d0     FD 12 02 F6 | 	mov	arg01, result1
035d4     B0 6D B2 FD | 	call	#__system__str_S
035d8     1C FB 61 FC | 	wrlong	result1, local10
035dc     14 2D 02 F6 | 	mov	local04, local02
035e0     16 2B 02 F6 | 	mov	local03, local04
035e4     15 39 02 F6 | 	mov	local10, local03
035e8     03 38 66 F0 | 	shl	local10, #3
035ec     35 00 00 FF 
035f0     2C E4 05 F1 | 	add	objptr, ##27180
035f4     F2 38 02 F1 | 	add	local10, objptr
035f8     04 38 06 F1 | 	add	local10, #4
035fc     01 00 80 FF 
03600     1C 03 68 FC | 	wrlong	##513, local10
03604     35 00 00 FF 
03608     2C E4 85 F1 | 	sub	objptr, ##27180
0360c     84 02 90 FD | 	jmp	#LR__0184
03610                 | LR__0176
03610     14 2F 02 F6 | 	mov	local05, local02
03614     03 2E 66 F0 | 	shl	local05, #3
03618     35 00 00 FF 
0361c     2C E4 05 F1 | 	add	objptr, ##27180
03620     F2 2E 02 F1 | 	add	local05, objptr
03624     17 13 02 FB | 	rdlong	arg01, local05
03628     35 00 00 FF 
0362c     2C E4 85 F1 | 	sub	objptr, ##27180
03630     40 34 B0 FD | 	call	#_isnum
03634     FD 7E 02 F6 | 	mov	local45, result1
03638     14 2F 02 F6 | 	mov	local05, local02
0363c     03 2E 66 F0 | 	shl	local05, #3
03640     35 00 00 FF 
03644     2C E4 05 F1 | 	add	objptr, ##27180
03648     F2 2E 02 F1 | 	add	local05, objptr
0364c     17 13 02 FB | 	rdlong	arg01, local05
03650     35 00 00 FF 
03654     2C E4 85 F1 | 	sub	objptr, ##27180
03658     04 38 B0 FD | 	call	#_isint
0365c     FD 80 02 F6 | 	mov	local46, result1
03660     14 2F 02 F6 | 	mov	local05, local02
03664     03 2E 66 F0 | 	shl	local05, #3
03668     35 00 00 FF 
0366c     2C E4 05 F1 | 	add	objptr, ##27180
03670     F2 2E 02 F1 | 	add	local05, objptr
03674     17 13 02 FB | 	rdlong	arg01, local05
03678     35 00 00 FF 
0367c     2C E4 85 F1 | 	sub	objptr, ##27180
03680     80 3A B0 FD | 	call	#_isdec
03684     FD 82 02 F6 | 	mov	local47, result1
03688                 | ' 
03688                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
03688                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
03688     00 7E 0E F2 | 	cmp	local45, #0 wz
0368c     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03690     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
03694     34 00 90 AD |  if_e	jmp	#LR__0177
03698     14 2D 02 F6 | 	mov	local04, local02
0369c     16 2B 02 F6 | 	mov	local03, local04
036a0     15 39 02 F6 | 	mov	local10, local03
036a4     03 38 66 F0 | 	shl	local10, #3
036a8     35 00 00 FF 
036ac     2C E4 05 F1 | 	add	objptr, ##27180
036b0     F2 38 02 F1 | 	add	local10, objptr
036b4     04 38 06 F1 | 	add	local10, #4
036b8     01 00 80 FF 
036bc     1C 01 68 FC | 	wrlong	##512, local10
036c0     35 00 00 FF 
036c4     2C E4 85 F1 | 	sub	objptr, ##27180
036c8     C8 01 90 FD | 	jmp	#LR__0184
036cc                 | LR__0177
036cc                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
036cc     00 7E 0E F2 | 	cmp	local45, #0 wz
036d0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
036d4     41 2D 22 56 |  if_ne	not	local04, local47
036d8     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
036dc     34 00 90 AD |  if_e	jmp	#LR__0178
036e0     14 2D 02 F6 | 	mov	local04, local02
036e4     16 2B 02 F6 | 	mov	local03, local04
036e8     15 39 02 F6 | 	mov	local10, local03
036ec     03 38 66 F0 | 	shl	local10, #3
036f0     35 00 00 FF 
036f4     2C E4 05 F1 | 	add	objptr, ##27180
036f8     F2 38 02 F1 | 	add	local10, objptr
036fc     04 38 06 F1 | 	add	local10, #4
03700     01 00 80 FF 
03704     1C 03 68 FC | 	wrlong	##513, local10
03708     35 00 00 FF 
0370c     2C E4 85 F1 | 	sub	objptr, ##27180
03710     80 01 90 FD | 	jmp	#LR__0184
03714                 | LR__0178
03714                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03714     00 7E 0E F2 | 	cmp	local45, #0 wz
03718     40 2D 22 56 |  if_ne	not	local04, local46
0371c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03720     41 2B 22 56 |  if_ne	not	local03, local47
03724     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
03728     34 00 90 AD |  if_e	jmp	#LR__0179
0372c     14 2D 02 F6 | 	mov	local04, local02
03730     16 2B 02 F6 | 	mov	local03, local04
03734     15 39 02 F6 | 	mov	local10, local03
03738     03 38 66 F0 | 	shl	local10, #3
0373c     35 00 00 FF 
03740     2C E4 05 F1 | 	add	objptr, ##27180
03744     F2 38 02 F1 | 	add	local10, objptr
03748     04 38 06 F1 | 	add	local10, #4
0374c     01 00 80 FF 
03750     1C 05 68 FC | 	wrlong	##514, local10
03754     35 00 00 FF 
03758     2C E4 85 F1 | 	sub	objptr, ##27180
0375c     34 01 90 FD | 	jmp	#LR__0184
03760                 | LR__0179
03760                 | ' 
03760                 | ' if isstring(lparts(i).part$) then 
03760     14 2F 02 F6 | 	mov	local05, local02
03764     03 2E 66 F0 | 	shl	local05, #3
03768     35 00 00 FF 
0376c     2C E4 05 F1 | 	add	objptr, ##27180
03770     F2 2E 02 F1 | 	add	local05, objptr
03774     17 13 02 FB | 	rdlong	arg01, local05
03778     35 00 00 FF 
0377c     2C E4 85 F1 | 	sub	objptr, ##27180
03780     40 3A B0 FD | 	call	#_isstring
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     A8 00 90 AD |  if_e	jmp	#LR__0182
0378c     14 39 02 F6 | 	mov	local10, local02
03790     03 38 66 F0 | 	shl	local10, #3
03794     35 00 00 FF 
03798     2C E4 05 F1 | 	add	objptr, ##27180
0379c     F2 38 02 F1 | 	add	local10, objptr
037a0     04 38 06 F1 | 	add	local10, #4
037a4     01 00 80 FF 
037a8     1C 07 68 FC | 	wrlong	##515, local10
037ac     14 2D 02 F6 | 	mov	local04, local02
037b0     16 2B 02 F6 | 	mov	local03, local04
037b4     15 39 02 F6 | 	mov	local10, local03
037b8     03 38 66 F0 | 	shl	local10, #3
037bc     F2 38 02 F1 | 	add	local10, objptr
037c0     14 41 02 F6 | 	mov	local14, local02
037c4     03 40 66 F0 | 	shl	local14, #3
037c8     F2 40 02 F1 | 	add	local14, objptr
037cc     20 31 02 FB | 	rdlong	local06, local14
037d0     02 3C 06 F6 | 	mov	local12, #2
037d4     14 51 02 F6 | 	mov	local22, local02
037d8     28 53 02 F6 | 	mov	local23, local22
037dc     03 52 66 F0 | 	shl	local23, #3
037e0     F2 54 02 F6 | 	mov	local24, objptr
037e4     F2 52 02 F1 | 	add	local23, objptr
037e8     29 13 02 FB | 	rdlong	arg01, local23
037ec     35 00 00 FF 
037f0     2C E4 85 F1 | 	sub	objptr, ##27180
037f4     09 33 02 F6 | 	mov	local07, arg01
037f8     97 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
037fc                 | LR__0180
037fc     19 FB C9 FA | 	rdbyte	result1, local07 wz
03800     01 32 06 51 |  if_ne	add	local07, #1
03804     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
03808                 | LR__0181
03808     09 33 82 F1 | 	sub	local07, arg01
0380c     19 3F 02 F6 | 	mov	local13, local07
03810     1F 41 02 F6 | 	mov	local14, local13
03814     02 40 86 F1 | 	sub	local14, #2
03818     20 3B 02 F6 | 	mov	local11, local14
0381c     18 13 02 F6 | 	mov	arg01, local06
03820     1E 15 02 F6 | 	mov	arg02, local12
03824     1D 17 02 F6 | 	mov	arg03, local11
03828     7C 6A B2 FD | 	call	#__system__Mid_S
0382c     1C FB 61 FC | 	wrlong	result1, local10
03830     60 00 90 FD | 	jmp	#LR__0184
03834                 | LR__0182
03834                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03834     14 2B 02 F6 | 	mov	local03, local02
03838     15 2F 02 F6 | 	mov	local05, local03
0383c     03 2E 66 F0 | 	shl	local05, #3
03840     35 00 00 FF 
03844     2C E4 05 F1 | 	add	objptr, ##27180
03848     F2 2E 02 F1 | 	add	local05, objptr
0384c     17 13 02 FB | 	rdlong	arg01, local05
03850     35 00 00 FF 
03854     2C E4 85 F1 | 	sub	objptr, ##27180
03858     A4 2F B0 FD | 	call	#_isname
0385c     FD 2C 0A F6 | 	mov	local04, result1 wz
03860     30 00 90 AD |  if_e	jmp	#LR__0183
03864     14 2D 02 F6 | 	mov	local04, local02
03868     16 2B 02 F6 | 	mov	local03, local04
0386c     15 39 02 F6 | 	mov	local10, local03
03870     03 38 66 F0 | 	shl	local10, #3
03874     35 00 00 FF 
03878     2C E4 05 F1 | 	add	objptr, ##27180
0387c     F2 38 02 F1 | 	add	local10, objptr
03880     04 38 06 F1 | 	add	local10, #4
03884     01 00 80 FF 
03888     1C 09 68 FC | 	wrlong	##516, local10
0388c     35 00 00 FF 
03890     2C E4 85 F1 | 	sub	objptr, ##27180
03894                 | LR__0183
03894                 | LR__0184
03894     01 28 06 F1 | 	add	local02, #1
03898     54 F8 9F FD | 	jmp	#LR__0173
0389c                 | LR__0185
0389c     23 39 02 F6 | 	mov	local10, local17
038a0     03 38 66 F0 | 	shl	local10, #3
038a4     35 00 00 FF 
038a8     2C E4 05 F1 | 	add	objptr, ##27180
038ac     F2 38 02 F1 | 	add	local10, objptr
038b0     04 38 06 F1 | 	add	local10, #4
038b4     1C FD 6B FC | 	wrlong	#510, local10
038b8     23 39 02 F6 | 	mov	local10, local17
038bc     03 38 66 F0 | 	shl	local10, #3
038c0     F2 38 02 F1 | 	add	local10, objptr
038c4     B0 01 00 FF 
038c8     CE 31 06 F6 | 	mov	local06, ##@LR__5378
038cc     1C 31 62 FC | 	wrlong	local06, local10
038d0     10 00 00 FF 
038d4     54 E4 05 F1 | 	add	objptr, ##8276
038d8     F2 46 62 FC | 	wrlong	local17, objptr
038dc     45 00 00 FF 
038e0     80 E4 85 F1 | 	sub	objptr, ##35456
038e4                 | ' 
038e4                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
038e4                 | ' 
038e4                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
038e4                 | '  
038e4                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
038e4     B0 01 00 FF 
038e8     CF 15 06 F6 | 	mov	arg02, ##@LR__5379
038ec     3B 13 02 F6 | 	mov	arg01, local41
038f0     44 48 B2 FD | 	call	#__system___string_cmp
038f4     00 FA 0D F2 | 	cmp	result1, #0 wz
038f8     F0 00 90 AD |  if_e	jmp	#LR__0186
038fc     B0 01 00 FF 
03900     D4 15 06 F6 | 	mov	arg02, ##@LR__5380
03904     3B 13 02 F6 | 	mov	arg01, local41
03908     2C 48 B2 FD | 	call	#__system___string_cmp
0390c     00 FA 0D F2 | 	cmp	result1, #0 wz
03910     D8 00 90 AD |  if_e	jmp	#LR__0186
03914     B0 01 00 FF 
03918     D9 31 06 F6 | 	mov	local06, ##@LR__5381
0391c     3B 13 02 F6 | 	mov	arg01, local41
03920     18 15 02 F6 | 	mov	arg02, local06
03924     10 48 B2 FD | 	call	#__system___string_cmp
03928     00 FA 0D F2 | 	cmp	result1, #0 wz
0392c     BC 00 90 AD |  if_e	jmp	#LR__0186
03930     B0 01 00 FF 
03934     DE 3D 06 F6 | 	mov	local12, ##@LR__5382
03938     1E 31 02 F6 | 	mov	local06, local12
0393c     3B 13 02 F6 | 	mov	arg01, local41
03940     18 15 02 F6 | 	mov	arg02, local06
03944     F0 47 B2 FD | 	call	#__system___string_cmp
03948     00 FA 0D F2 | 	cmp	result1, #0 wz
0394c     9C 00 90 AD |  if_e	jmp	#LR__0186
03950     B0 01 00 FF 
03954     E2 3B 06 F6 | 	mov	local11, ##@LR__5383
03958     1D 3D 02 F6 | 	mov	local12, local11
0395c     3B 13 02 F6 | 	mov	arg01, local41
03960     1E 15 02 F6 | 	mov	arg02, local12
03964     D0 47 B2 FD | 	call	#__system___string_cmp
03968     FD 30 0A F6 | 	mov	local06, result1 wz
0396c     7C 00 90 AD |  if_e	jmp	#LR__0186
03970     B0 01 00 FF 
03974     E6 41 06 F6 | 	mov	local14, ##@LR__5384
03978     20 3B 02 F6 | 	mov	local11, local14
0397c     3B 13 02 F6 | 	mov	arg01, local41
03980     1D 15 02 F6 | 	mov	arg02, local11
03984     B0 47 B2 FD | 	call	#__system___string_cmp
03988     FD 3C 0A F6 | 	mov	local12, result1 wz
0398c     5C 00 90 AD |  if_e	jmp	#LR__0186
03990     B0 01 00 FF 
03994     E9 3F 06 F6 | 	mov	local13, ##@LR__5385
03998     1F 41 02 F6 | 	mov	local14, local13
0399c     3B 13 02 F6 | 	mov	arg01, local41
039a0     20 15 02 F6 | 	mov	arg02, local14
039a4     90 47 B2 FD | 	call	#__system___string_cmp
039a8     FD 3A 0A F6 | 	mov	local11, result1 wz
039ac     3C 00 90 AD |  if_e	jmp	#LR__0186
039b0     B0 01 00 FF 
039b4     ED 3F 06 F6 | 	mov	local13, ##@LR__5386
039b8     3B 13 02 F6 | 	mov	arg01, local41
039bc     1F 15 02 F6 | 	mov	arg02, local13
039c0     74 47 B2 FD | 	call	#__system___string_cmp
039c4     FD 40 0A F6 | 	mov	local14, result1 wz
039c8     20 00 90 AD |  if_e	jmp	#LR__0186
039cc     B0 01 00 FF 
039d0     F3 51 06 F6 | 	mov	local22, ##@LR__5387
039d4     28 5D 02 F6 | 	mov	local28, local22
039d8     3B 13 02 F6 | 	mov	arg01, local41
039dc     2E 15 02 F6 | 	mov	arg02, local28
039e0     54 47 B2 FD | 	call	#__system___string_cmp
039e4     FD 3E 0A F6 | 	mov	local13, result1 wz
039e8     CC 00 90 5D |  if_ne	jmp	#LR__0187
039ec                 | LR__0186
039ec     37 5D 02 F6 | 	mov	local28, local37
039f0     01 5C 06 F1 | 	add	local28, #1
039f4     2E 51 02 F6 | 	mov	local22, local28
039f8     28 53 02 F6 | 	mov	local23, local22
039fc     03 52 66 F0 | 	shl	local23, #3
03a00     35 00 00 FF 
03a04     2C E4 05 F1 | 	add	objptr, ##27180
03a08     F2 54 02 F6 | 	mov	local24, objptr
03a0c     F2 52 02 F1 | 	add	local23, objptr
03a10     04 52 06 F1 | 	add	local23, #4
03a14     29 61 02 FB | 	rdlong	local30, local23
03a18     04 52 86 F1 | 	sub	local23, #4
03a1c     30 5F 02 F6 | 	mov	local29, local30
03a20     01 00 00 FF 
03a24     04 5E 0E F2 | 	cmp	local29, ##516 wz
03a28     35 00 00 FF 
03a2c     2C E4 85 F1 | 	sub	objptr, ##27180
03a30     84 00 90 5D |  if_ne	jmp	#LR__0187
03a34     37 85 02 F6 | 	mov	local48, local37
03a38     01 84 06 F1 | 	add	local48, #1
03a3c     03 84 66 F0 | 	shl	local48, #3
03a40     35 00 00 FF 
03a44     2C E4 05 F1 | 	add	objptr, ##27180
03a48     F2 86 02 F6 | 	mov	local49, objptr
03a4c     F2 84 02 F1 | 	add	local48, objptr
03a50     42 13 02 FB | 	rdlong	arg01, local48
03a54     01 14 06 F6 | 	mov	arg02, #1
03a58     35 00 00 FF 
03a5c     2C E4 85 F1 | 	sub	objptr, ##27180
03a60     B4 67 B2 FD | 	call	#__system__Right_S
03a64     FD 12 02 F6 | 	mov	arg01, result1
03a68     B0 01 00 FF 
03a6c     F6 89 06 F6 | 	mov	local50, ##@LR__5388
03a70     44 8B 02 F6 | 	mov	local51, local50
03a74     45 15 02 F6 | 	mov	arg02, local51
03a78     BC 46 B2 FD | 	call	#__system___string_cmp
03a7c     FD 62 0A F6 | 	mov	local31, result1 wz
03a80     34 00 90 AD |  if_e	jmp	#LR__0187
03a84     37 39 02 F6 | 	mov	local10, local37
03a88     01 38 06 F1 | 	add	local10, #1
03a8c     03 38 66 F0 | 	shl	local10, #3
03a90     35 00 00 FF 
03a94     2C E4 05 F1 | 	add	objptr, ##27180
03a98     F2 38 02 F1 | 	add	local10, objptr
03a9c     01 00 00 FF 
03aa0     03 30 06 F6 | 	mov	local06, ##515
03aa4     04 38 06 F1 | 	add	local10, #4
03aa8     01 00 80 FF 
03aac     1C 07 68 FC | 	wrlong	##515, local10
03ab0     35 00 00 FF 
03ab4     2C E4 85 F1 | 	sub	objptr, ##27180
03ab8                 | LR__0187
03ab8                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03ab8     B0 01 00 FF 
03abc     F8 15 06 F6 | 	mov	arg02, ##@LR__5389
03ac0     3B 13 02 F6 | 	mov	arg01, local41
03ac4     70 46 B2 FD | 	call	#__system___string_cmp
03ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
03acc     1C 00 90 AD |  if_e	jmp	#LR__0188
03ad0     B0 01 00 FF 
03ad4     FF 2F 06 F6 | 	mov	local05, ##@LR__5390
03ad8     3B 13 02 F6 | 	mov	arg01, local41
03adc     17 15 02 F6 | 	mov	arg02, local05
03ae0     54 46 B2 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     CC 00 90 5D |  if_ne	jmp	#LR__0189
03aec                 | LR__0188
03aec     37 2F 02 F6 | 	mov	local05, local37
03af0     01 2E 06 F1 | 	add	local05, #1
03af4     17 31 02 F6 | 	mov	local06, local05
03af8     03 30 66 F0 | 	shl	local06, #3
03afc     35 00 00 FF 
03b00     2C E4 05 F1 | 	add	objptr, ##27180
03b04     F2 3C 02 F6 | 	mov	local12, objptr
03b08     F2 30 02 F1 | 	add	local06, objptr
03b0c     04 30 06 F1 | 	add	local06, #4
03b10     18 41 02 FB | 	rdlong	local14, local06
03b14     04 30 86 F1 | 	sub	local06, #4
03b18     20 3B 02 F6 | 	mov	local11, local14
03b1c     01 00 00 FF 
03b20     04 3A 0E F2 | 	cmp	local11, ##516 wz
03b24     35 00 00 FF 
03b28     2C E4 85 F1 | 	sub	objptr, ##27180
03b2c     88 00 90 5D |  if_ne	jmp	#LR__0189
03b30     37 53 02 F6 | 	mov	local23, local37
03b34     01 52 06 F1 | 	add	local23, #1
03b38     03 52 66 F0 | 	shl	local23, #3
03b3c     35 00 00 FF 
03b40     2C E4 05 F1 | 	add	objptr, ##27180
03b44     F2 54 02 F6 | 	mov	local24, objptr
03b48     F2 52 02 F1 | 	add	local23, objptr
03b4c     29 13 02 FB | 	rdlong	arg01, local23
03b50     01 14 06 F6 | 	mov	arg02, #1
03b54     35 00 00 FF 
03b58     2C E4 85 F1 | 	sub	objptr, ##27180
03b5c     B8 66 B2 FD | 	call	#__system__Right_S
03b60     FD 12 02 F6 | 	mov	arg01, result1
03b64     B1 01 00 FF 
03b68     05 50 06 F6 | 	mov	local22, ##@LR__5391
03b6c     28 5D 02 F6 | 	mov	local28, local22
03b70     2E 15 02 F6 | 	mov	arg02, local28
03b74     C0 45 B2 FD | 	call	#__system___string_cmp
03b78     FD 3E 0A F6 | 	mov	local13, result1 wz
03b7c     38 00 90 AD |  if_e	jmp	#LR__0189
03b80     37 39 02 F6 | 	mov	local10, local37
03b84     01 38 06 F1 | 	add	local10, #1
03b88     03 38 66 F0 | 	shl	local10, #3
03b8c     35 00 00 FF 
03b90     2C E4 05 F1 | 	add	objptr, ##27180
03b94     F2 2E 02 F6 | 	mov	local05, objptr
03b98     F2 38 02 F1 | 	add	local10, objptr
03b9c     01 00 00 FF 
03ba0     03 30 06 F6 | 	mov	local06, ##515
03ba4     04 38 06 F1 | 	add	local10, #4
03ba8     01 00 80 FF 
03bac     1C 07 68 FC | 	wrlong	##515, local10
03bb0     35 00 00 FF 
03bb4     2C E4 85 F1 | 	sub	objptr, ##27180
03bb8                 | LR__0189
03bb8                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03bb8     B1 01 00 FF 
03bbc     07 14 06 F6 | 	mov	arg02, ##@LR__5392
03bc0     3B 13 02 F6 | 	mov	arg01, local41
03bc4     70 45 B2 FD | 	call	#__system___string_cmp
03bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
03bcc     C8 00 90 5D |  if_ne	jmp	#LR__0190
03bd0     37 2F 02 F6 | 	mov	local05, local37
03bd4     01 2E 06 F1 | 	add	local05, #1
03bd8     03 2E 66 F0 | 	shl	local05, #3
03bdc     35 00 00 FF 
03be0     2C E4 05 F1 | 	add	objptr, ##27180
03be4     F2 30 02 F6 | 	mov	local06, objptr
03be8     F2 2E 02 F1 | 	add	local05, objptr
03bec     04 2E 06 F1 | 	add	local05, #4
03bf0     17 3B 02 FB | 	rdlong	local11, local05
03bf4     04 2E 86 F1 | 	sub	local05, #4
03bf8     1D 3D 02 F6 | 	mov	local12, local11
03bfc     01 00 00 FF 
03c00     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c04     35 00 00 FF 
03c08     2C E4 85 F1 | 	sub	objptr, ##27180
03c0c     88 00 90 5D |  if_ne	jmp	#LR__0190
03c10     37 51 02 F6 | 	mov	local22, local37
03c14     01 50 06 F1 | 	add	local22, #1
03c18     03 50 66 F0 | 	shl	local22, #3
03c1c     35 00 00 FF 
03c20     2C E4 05 F1 | 	add	objptr, ##27180
03c24     F2 52 02 F6 | 	mov	local23, objptr
03c28     F2 50 02 F1 | 	add	local22, objptr
03c2c     28 13 02 FB | 	rdlong	arg01, local22
03c30     01 14 06 F6 | 	mov	arg02, #1
03c34     35 00 00 FF 
03c38     2C E4 85 F1 | 	sub	objptr, ##27180
03c3c     D8 65 B2 FD | 	call	#__system__Right_S
03c40     FD 12 02 F6 | 	mov	arg01, result1
03c44     B1 01 00 FF 
03c48     0C 5C 06 F6 | 	mov	local28, ##@LR__5393
03c4c     2E 3F 02 F6 | 	mov	local13, local28
03c50     1F 15 02 F6 | 	mov	arg02, local13
03c54     E0 44 B2 FD | 	call	#__system___string_cmp
03c58     FD 40 0A F6 | 	mov	local14, result1 wz
03c5c     38 00 90 AD |  if_e	jmp	#LR__0190
03c60     37 39 02 F6 | 	mov	local10, local37
03c64     01 38 06 F1 | 	add	local10, #1
03c68     03 38 66 F0 | 	shl	local10, #3
03c6c     35 00 00 FF 
03c70     2C E4 05 F1 | 	add	objptr, ##27180
03c74     F2 2E 02 F6 | 	mov	local05, objptr
03c78     F2 38 02 F1 | 	add	local10, objptr
03c7c     01 00 00 FF 
03c80     03 30 06 F6 | 	mov	local06, ##515
03c84     04 38 06 F1 | 	add	local10, #4
03c88     01 00 80 FF 
03c8c     1C 07 68 FC | 	wrlong	##515, local10
03c90     35 00 00 FF 
03c94     2C E4 85 F1 | 	sub	objptr, ##27180
03c98                 | LR__0190
03c98                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c98     B1 01 00 FF 
03c9c     0E 14 06 F6 | 	mov	arg02, ##@LR__5394
03ca0     3B 13 02 F6 | 	mov	arg01, local41
03ca4     90 44 B2 FD | 	call	#__system___string_cmp
03ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
03cac     C8 00 90 5D |  if_ne	jmp	#LR__0191
03cb0     37 2F 02 F6 | 	mov	local05, local37
03cb4     03 2E 06 F1 | 	add	local05, #3
03cb8     03 2E 66 F0 | 	shl	local05, #3
03cbc     35 00 00 FF 
03cc0     2C E4 05 F1 | 	add	objptr, ##27180
03cc4     F2 30 02 F6 | 	mov	local06, objptr
03cc8     F2 2E 02 F1 | 	add	local05, objptr
03ccc     04 2E 06 F1 | 	add	local05, #4
03cd0     17 3B 02 FB | 	rdlong	local11, local05
03cd4     04 2E 86 F1 | 	sub	local05, #4
03cd8     1D 3D 02 F6 | 	mov	local12, local11
03cdc     01 00 00 FF 
03ce0     04 3C 0E F2 | 	cmp	local12, ##516 wz
03ce4     35 00 00 FF 
03ce8     2C E4 85 F1 | 	sub	objptr, ##27180
03cec     88 00 90 5D |  if_ne	jmp	#LR__0191
03cf0     37 51 02 F6 | 	mov	local22, local37
03cf4     03 50 06 F1 | 	add	local22, #3
03cf8     03 50 66 F0 | 	shl	local22, #3
03cfc     35 00 00 FF 
03d00     2C E4 05 F1 | 	add	objptr, ##27180
03d04     F2 52 02 F6 | 	mov	local23, objptr
03d08     F2 50 02 F1 | 	add	local22, objptr
03d0c     28 13 02 FB | 	rdlong	arg01, local22
03d10     01 14 06 F6 | 	mov	arg02, #1
03d14     35 00 00 FF 
03d18     2C E4 85 F1 | 	sub	objptr, ##27180
03d1c     F8 64 B2 FD | 	call	#__system__Right_S
03d20     FD 12 02 F6 | 	mov	arg01, result1
03d24     B1 01 00 FF 
03d28     13 5C 06 F6 | 	mov	local28, ##@LR__5395
03d2c     2E 3F 02 F6 | 	mov	local13, local28
03d30     1F 15 02 F6 | 	mov	arg02, local13
03d34     00 44 B2 FD | 	call	#__system___string_cmp
03d38     FD 40 0A F6 | 	mov	local14, result1 wz
03d3c     38 00 90 AD |  if_e	jmp	#LR__0191
03d40     37 39 02 F6 | 	mov	local10, local37
03d44     03 38 06 F1 | 	add	local10, #3
03d48     03 38 66 F0 | 	shl	local10, #3
03d4c     35 00 00 FF 
03d50     2C E4 05 F1 | 	add	objptr, ##27180
03d54     F2 2E 02 F6 | 	mov	local05, objptr
03d58     F2 38 02 F1 | 	add	local10, objptr
03d5c     01 00 00 FF 
03d60     03 30 06 F6 | 	mov	local06, ##515
03d64     04 38 06 F1 | 	add	local10, #4
03d68     01 00 80 FF 
03d6c     1C 07 68 FC | 	wrlong	##515, local10
03d70     35 00 00 FF 
03d74     2C E4 85 F1 | 	sub	objptr, ##27180
03d78                 | LR__0191
03d78                 | ' 
03d78                 | ' ' cd needs special treatment..
03d78                 | ' 
03d78                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03d78     B1 01 00 FF 
03d7c     15 14 06 F6 | 	mov	arg02, ##@LR__5396
03d80     3B 13 02 F6 | 	mov	arg01, local41
03d84     B0 43 B2 FD | 	call	#__system___string_cmp
03d88     00 FA 0D F2 | 	cmp	result1, #0 wz
03d8c     38 00 90 5D |  if_ne	jmp	#LR__0192
03d90     37 39 02 F6 | 	mov	local10, local37
03d94     01 38 06 F1 | 	add	local10, #1
03d98     03 38 66 F0 | 	shl	local10, #3
03d9c     35 00 00 FF 
03da0     2C E4 05 F1 | 	add	objptr, ##27180
03da4     F2 2E 02 F6 | 	mov	local05, objptr
03da8     F2 38 02 F1 | 	add	local10, objptr
03dac     01 00 00 FF 
03db0     03 30 06 F6 | 	mov	local06, ##515
03db4     04 38 06 F1 | 	add	local10, #4
03db8     01 00 80 FF 
03dbc     1C 07 68 FC | 	wrlong	##515, local10
03dc0     35 00 00 FF 
03dc4     2C E4 85 F1 | 	sub	objptr, ##27180
03dc8                 | LR__0192
03dc8                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03dc8     B1 01 00 FF 
03dcc     18 14 06 F6 | 	mov	arg02, ##@LR__5397
03dd0     3B 13 02 F6 | 	mov	arg01, local41
03dd4     60 43 B2 FD | 	call	#__system___string_cmp
03dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
03ddc     A4 00 90 5D |  if_ne	jmp	#LR__0193
03de0     37 31 02 F6 | 	mov	local06, local37
03de4     01 30 06 F1 | 	add	local06, #1
03de8     03 30 66 F0 | 	shl	local06, #3
03dec     35 00 00 FF 
03df0     2C E4 05 F1 | 	add	objptr, ##27180
03df4     F2 3C 02 F6 | 	mov	local12, objptr
03df8     F2 30 02 F1 | 	add	local06, objptr
03dfc     18 13 02 FB | 	rdlong	arg01, local06
03e00     B1 01 00 FF 
03e04     1C 2E 06 F6 | 	mov	local05, ##@LR__5398
03e08     17 15 02 F6 | 	mov	arg02, local05
03e0c     35 00 00 FF 
03e10     2C E4 85 F1 | 	sub	objptr, ##27180
03e14     20 43 B2 FD | 	call	#__system___string_cmp
03e18     00 FA 0D F2 | 	cmp	result1, #0 wz
03e1c     64 00 90 5D |  if_ne	jmp	#LR__0193
03e20     37 39 02 F6 | 	mov	local10, local37
03e24     01 38 06 F1 | 	add	local10, #1
03e28     03 38 66 F0 | 	shl	local10, #3
03e2c     35 00 00 FF 
03e30     2C E4 05 F1 | 	add	objptr, ##27180
03e34     F2 38 02 F1 | 	add	local10, objptr
03e38     04 38 06 F1 | 	add	local10, #4
03e3c     01 00 80 FF 
03e40     1C 07 68 FC | 	wrlong	##515, local10
03e44     37 39 02 F6 | 	mov	local10, local37
03e48     01 38 06 F1 | 	add	local10, #1
03e4c     03 38 66 F0 | 	shl	local10, #3
03e50     F2 38 02 F1 | 	add	local10, objptr
03e54     B1 01 00 FF 
03e58     1E 30 06 F6 | 	mov	local06, ##@LR__5399
03e5c     1C 31 62 FC | 	wrlong	local06, local10
03e60     37 39 02 F6 | 	mov	local10, local37
03e64     03 38 66 F0 | 	shl	local10, #3
03e68     F2 2E 02 F6 | 	mov	local05, objptr
03e6c     F2 38 02 F1 | 	add	local10, objptr
03e70     C3 30 06 F6 | 	mov	local06, #195
03e74     04 38 06 F1 | 	add	local10, #4
03e78     1C 87 69 FC | 	wrlong	#195, local10
03e7c     35 00 00 FF 
03e80     2C E4 85 F1 | 	sub	objptr, ##27180
03e84                 | LR__0193
03e84                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03e84     B1 01 00 FF 
03e88     21 38 06 F6 | 	mov	local10, ##@LR__5400
03e8c     3B 13 02 F6 | 	mov	arg01, local41
03e90     1C 15 02 F6 | 	mov	arg02, local10
03e94     A0 42 B2 FD | 	call	#__system___string_cmp
03e98     00 FA 0D F2 | 	cmp	result1, #0 wz
03e9c     04 01 90 5D |  if_ne	jmp	#LR__0196
03ea0     37 31 02 F6 | 	mov	local06, local37
03ea4     01 30 06 F1 | 	add	local06, #1
03ea8     03 30 66 F0 | 	shl	local06, #3
03eac     35 00 00 FF 
03eb0     2C E4 05 F1 | 	add	objptr, ##27180
03eb4     F2 3C 02 F6 | 	mov	local12, objptr
03eb8     F2 30 02 F1 | 	add	local06, objptr
03ebc     18 13 02 FB | 	rdlong	arg01, local06
03ec0     B1 01 00 FF 
03ec4     24 2E 06 F6 | 	mov	local05, ##@LR__5401
03ec8     17 39 02 F6 | 	mov	local10, local05
03ecc     1C 15 02 F6 | 	mov	arg02, local10
03ed0     35 00 00 FF 
03ed4     2C E4 85 F1 | 	sub	objptr, ##27180
03ed8     5C 42 B2 FD | 	call	#__system___string_cmp
03edc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee0     C0 00 90 5D |  if_ne	jmp	#LR__0196
03ee4     37 39 02 F6 | 	mov	local10, local37
03ee8     01 38 06 F1 | 	add	local10, #1
03eec     03 38 66 F0 | 	shl	local10, #3
03ef0     35 00 00 FF 
03ef4     2C E4 05 F1 | 	add	objptr, ##27180
03ef8     F2 2E 02 F6 | 	mov	local05, objptr
03efc     F2 38 02 F1 | 	add	local10, objptr
03f00     01 00 00 FF 
03f04     03 30 06 F6 | 	mov	local06, ##515
03f08     04 38 06 F1 | 	add	local10, #4
03f0c     01 00 80 FF 
03f10     1C 07 68 FC | 	wrlong	##515, local10
03f14     04 38 86 F1 | 	sub	local10, #4
03f18     37 29 02 F6 | 	mov	local02, local37
03f1c     02 28 06 F1 | 	add	local02, #2
03f20     23 8D 02 F6 | 	mov	local52, local17
03f24     01 8C 06 F1 | 	add	local52, #1
03f28     35 00 00 FF 
03f2c     2C E4 85 F1 | 	sub	objptr, ##27180
03f30                 | LR__0194
03f30     46 29 52 F2 | 	cmps	local02, local52 wc
03f34     6C 00 90 3D |  if_ae	jmp	#LR__0195
03f38     14 39 02 F6 | 	mov	local10, local02
03f3c     03 38 66 F0 | 	shl	local10, #3
03f40     35 00 00 FF 
03f44     2C E4 05 F1 | 	add	objptr, ##27180
03f48     F2 38 02 F1 | 	add	local10, objptr
03f4c     1C 8F 02 FB | 	rdlong	local53, local10
03f50     37 39 02 F6 | 	mov	local10, local37
03f54     01 38 06 F1 | 	add	local10, #1
03f58     03 38 66 F0 | 	shl	local10, #3
03f5c     F2 2E 02 F6 | 	mov	local05, objptr
03f60     F2 38 02 F1 | 	add	local10, objptr
03f64     37 3B 02 F6 | 	mov	local11, local37
03f68     01 3A 06 F1 | 	add	local11, #1
03f6c     1D 41 02 F6 | 	mov	local14, local11
03f70     03 40 66 F0 | 	shl	local14, #3
03f74     F2 3E 02 F6 | 	mov	local13, objptr
03f78     F2 40 02 F1 | 	add	local14, objptr
03f7c     20 13 02 FB | 	rdlong	arg01, local14
03f80     47 3D 02 F6 | 	mov	local12, local53
03f84     1E 15 02 F6 | 	mov	arg02, local12
03f88     35 00 00 FF 
03f8c     2C E4 85 F1 | 	sub	objptr, ##27180
03f90     D8 41 B2 FD | 	call	#__system___string_concat
03f94     FD 30 02 F6 | 	mov	local06, result1
03f98     1C 31 62 FC | 	wrlong	local06, local10
03f9c     01 28 06 F1 | 	add	local02, #1
03fa0     8C FF 9F FD | 	jmp	#LR__0194
03fa4                 | LR__0195
03fa4                 | LR__0196
03fa4                 | ' 
03fa4                 | ' ' determine a type of the line and compile it
03fa4                 | ' 
03fa4                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03fa4     35 00 00 FF 
03fa8     2C E4 05 F1 | 	add	objptr, ##27180
03fac     F2 12 02 FB | 	rdlong	arg01, objptr
03fb0     35 00 00 FF 
03fb4     2C E4 85 F1 | 	sub	objptr, ##27180
03fb8     48 31 B0 FD | 	call	#_isdec
03fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc0     30 00 90 AD |  if_e	jmp	#LR__0197
03fc4     35 00 00 FF 
03fc8     2C E4 05 F1 | 	add	objptr, ##27180
03fcc     F2 12 02 FB | 	rdlong	arg01, objptr
03fd0     35 00 00 FF 
03fd4     2C E4 85 F1 | 	sub	objptr, ##27180
03fd8     00 14 06 F6 | 	mov	arg02, #0
03fdc     24 76 B2 FD | 	call	#__system____builtin_atoi
03fe0     52 00 00 FF 
03fe4     08 E5 05 F1 | 	add	objptr, ##42248
03fe8     F2 FA 61 FC | 	wrlong	result1, objptr
03fec     52 00 00 FF 
03ff0     08 E5 85 F1 | 	sub	objptr, ##42248
03ff4                 | LR__0197
03ff4                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03ff4     52 00 00 FF 
03ff8     08 E5 05 F1 | 	add	objptr, ##42248
03ffc     F2 2C 02 FB | 	rdlong	local04, objptr
04000     52 00 00 FF 
04004     08 E5 85 F1 | 	sub	objptr, ##42248
04008     01 2C 16 F2 | 	cmp	local04, #1 wc
0400c     40 00 90 CD |  if_b	jmp	#LR__0198
04010     01 46 0E F2 | 	cmp	local17, #1 wz
04014     37 00 00 AF 
04018     44 E4 05 A1 |  if_e	add	objptr, ##28228
0401c     F2 2E 02 AB |  if_e	rdlong	local05, objptr
04020     37 00 00 AF 
04024     44 E4 85 A1 |  if_e	sub	objptr, ##28228
04028     17 39 02 A6 |  if_e	mov	local10, local05
0402c     03 38 0E A2 |  if_e	cmp	local10, #3 wz
04030     1C 00 90 5D |  if_ne	jmp	#LR__0198
04034     52 00 00 FF 
04038     08 E5 05 F1 | 	add	objptr, ##42248
0403c     F2 12 02 FB | 	rdlong	arg01, objptr
04040     52 00 00 FF 
04044     08 E5 85 F1 | 	sub	objptr, ##42248
04048     64 32 B0 FD | 	call	#_deleteline
0404c     C8 03 90 FD | 	jmp	#LR__0209
04050                 | LR__0198
04050                 | ' 
04050                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
04050     37 00 00 FF 
04054     44 E4 05 F1 | 	add	objptr, ##28228
04058     F2 2C 0A FB | 	rdlong	local04, objptr wz
0405c     37 00 00 FF 
04060     44 E4 85 F1 | 	sub	objptr, ##28228
04064     20 00 90 AD |  if_e	jmp	#LR__0199
04068     37 00 00 FF 
0406c     44 E4 05 F1 | 	add	objptr, ##28228
04070     F2 2E 02 FB | 	rdlong	local05, objptr
04074     37 00 00 FF 
04078     44 E4 85 F1 | 	sub	objptr, ##28228
0407c     17 39 02 F6 | 	mov	local10, local05
04080     03 38 0E F2 | 	cmp	local10, #3 wz
04084     C0 00 90 5D |  if_ne	jmp	#LR__0201
04088                 | LR__0199
04088     35 00 00 FF 
0408c     40 E4 05 F1 | 	add	objptr, ##27200
04090     F2 3C 02 FB | 	rdlong	local12, objptr
04094     35 00 00 FF 
04098     40 E4 85 F1 | 	sub	objptr, ##27200
0409c     1B 3C 0E F2 | 	cmp	local12, #27 wz
040a0     A4 00 90 AD |  if_e	jmp	#LR__0201
040a4     52 00 00 FF 
040a8     08 E5 05 F1 | 	add	objptr, ##42248
040ac     F2 12 02 FB | 	rdlong	arg01, objptr
040b0     1B 00 00 FF 
040b4     C4 E4 85 F1 | 	sub	objptr, ##14020
040b8     F2 16 02 FB | 	rdlong	arg03, objptr
040bc     37 00 00 FF 
040c0     44 E4 85 F1 | 	sub	objptr, ##28228
040c4     00 14 06 F6 | 	mov	arg02, #0
040c8     74 46 B0 FD | 	call	#_compile
040cc     FD 26 0A F6 | 	mov	local01, result1 wz
040d0                 | '   err=compile(linenum,0,cont) 
040d0                 | '   if err<>0 then printerror(err,linenum): goto 101
040d0     20 00 90 AD |  if_e	jmp	#LR__0200
040d4     52 00 00 FF 
040d8     08 E5 05 F1 | 	add	objptr, ##42248
040dc     F2 14 02 FB | 	rdlong	arg02, objptr
040e0     52 00 00 FF 
040e4     08 E5 85 F1 | 	sub	objptr, ##42248
040e8     13 13 02 F6 | 	mov	arg01, local01
040ec     CC 05 B2 FD | 	call	#_printerror
040f0     44 03 90 FD | 	jmp	#LR__0210
040f4                 | LR__0200
040f4                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
040f4     52 00 00 FF 
040f8     4C E5 05 F1 | 	add	objptr, ##42316
040fc     F2 12 02 FB | 	rdlong	arg01, objptr
04100     52 00 00 FF 
04104     4C E5 85 F1 | 	sub	objptr, ##42316
04108     B1 01 00 FF 
0410c     26 14 06 F6 | 	mov	arg02, ##@LR__5402
04110     24 40 B2 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     FC 02 90 AD |  if_e	jmp	#LR__0209
0411c     52 00 00 FF 
04120     4C E5 05 F1 | 	add	objptr, ##42316
04124     F2 2C 02 FB | 	rdlong	local04, objptr
04128     1B 00 00 FF 
0412c     10 E5 85 F1 | 	sub	objptr, ##14096
04130     F2 2C 62 FC | 	wrlong	local04, objptr
04134     08 E4 05 F1 | 	add	objptr, #8
04138     F2 08 68 FC | 	wrlong	#4, objptr
0413c     37 00 00 FF 
04140     44 E4 85 F1 | 	sub	objptr, ##28228
04144     B0 D7 9F FD | 	jmp	#LR__0070
04148                 | LR__0201
04148                 | '       							
04148                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
04148     37 00 00 FF 
0414c     44 E4 05 F1 | 	add	objptr, ##28228
04150     F2 2C 02 FB | 	rdlong	local04, objptr
04154     37 00 00 FF 
04158     44 E4 85 F1 | 	sub	objptr, ##28228
0415c     01 2C 0E F2 | 	cmp	local04, #1 wz
04160     37 00 00 5F 
04164     44 E4 05 51 |  if_ne	add	objptr, ##28228
04168     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0416c     37 00 00 5F 
04170     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04174     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04178     C0 00 90 5D |  if_ne	jmp	#LR__0203
0417c     35 00 00 FF 
04180     38 E4 05 F1 | 	add	objptr, ##27192
04184     F2 3C 02 FB | 	rdlong	local12, objptr
04188     35 00 00 FF 
0418c     38 E4 85 F1 | 	sub	objptr, ##27192
04190     1B 3C 0E F2 | 	cmp	local12, #27 wz
04194     A4 00 90 AD |  if_e	jmp	#LR__0203
04198     52 00 00 FF 
0419c     08 E5 05 F1 | 	add	objptr, ##42248
041a0     F2 12 02 FB | 	rdlong	arg01, objptr
041a4     1B 00 00 FF 
041a8     C4 E4 85 F1 | 	sub	objptr, ##14020
041ac     F2 16 02 FB | 	rdlong	arg03, objptr
041b0     37 00 00 FF 
041b4     44 E4 85 F1 | 	sub	objptr, ##28228
041b8     00 14 06 F6 | 	mov	arg02, #0
041bc     80 45 B0 FD | 	call	#_compile
041c0     FD 26 0A F6 | 	mov	local01, result1 wz
041c4                 | '   err=compile(linenum,0,cont) 
041c4                 | '   if err<>0 then printerror(err,linenum): goto 101
041c4     20 00 90 AD |  if_e	jmp	#LR__0202
041c8     52 00 00 FF 
041cc     08 E5 05 F1 | 	add	objptr, ##42248
041d0     F2 14 02 FB | 	rdlong	arg02, objptr
041d4     52 00 00 FF 
041d8     08 E5 85 F1 | 	sub	objptr, ##42248
041dc     13 13 02 F6 | 	mov	arg01, local01
041e0     D8 04 B2 FD | 	call	#_printerror
041e4     50 02 90 FD | 	jmp	#LR__0210
041e8                 | LR__0202
041e8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
041e8     52 00 00 FF 
041ec     4C E5 05 F1 | 	add	objptr, ##42316
041f0     F2 12 02 FB | 	rdlong	arg01, objptr
041f4     52 00 00 FF 
041f8     4C E5 85 F1 | 	sub	objptr, ##42316
041fc     B1 01 00 FF 
04200     27 14 06 F6 | 	mov	arg02, ##@LR__5403
04204     30 3F B2 FD | 	call	#__system___string_cmp
04208     00 FA 0D F2 | 	cmp	result1, #0 wz
0420c     08 02 90 AD |  if_e	jmp	#LR__0209
04210     52 00 00 FF 
04214     4C E5 05 F1 | 	add	objptr, ##42316
04218     F2 2C 02 FB | 	rdlong	local04, objptr
0421c     1B 00 00 FF 
04220     10 E5 85 F1 | 	sub	objptr, ##14096
04224     F2 2C 62 FC | 	wrlong	local04, objptr
04228     08 E4 05 F1 | 	add	objptr, #8
0422c     F2 08 68 FC | 	wrlong	#4, objptr
04230     37 00 00 FF 
04234     44 E4 85 F1 | 	sub	objptr, ##28228
04238     BC D6 9F FD | 	jmp	#LR__0070
0423c                 | LR__0203
0423c                 | ' 							 
0423c                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
0423c     37 00 00 FF 
04240     44 E4 05 F1 | 	add	objptr, ##28228
04244     F2 2C 0A FB | 	rdlong	local04, objptr wz
04248     37 00 00 FF 
0424c     44 E4 85 F1 | 	sub	objptr, ##28228
04250     37 00 00 5F 
04254     44 E4 05 51 |  if_ne	add	objptr, ##28228
04258     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0425c     37 00 00 5F 
04260     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04264     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
04268     35 00 00 AF 
0426c     40 E4 05 A1 |  if_e	add	objptr, ##27200
04270     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04274     35 00 00 AF 
04278     40 E4 85 A1 |  if_e	sub	objptr, ##27200
0427c     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04280     A4 00 90 5D |  if_ne	jmp	#LR__0205
04284     52 00 00 FF 
04288     08 E5 05 F1 | 	add	objptr, ##42248
0428c     F2 12 02 FB | 	rdlong	arg01, objptr
04290     1B 00 00 FF 
04294     C4 E4 85 F1 | 	sub	objptr, ##14020
04298     F2 16 02 FB | 	rdlong	arg03, objptr
0429c     37 00 00 FF 
042a0     44 E4 85 F1 | 	sub	objptr, ##28228
042a4     00 14 06 F6 | 	mov	arg02, #0
042a8     5C 45 B0 FD | 	call	#_compile_assign
042ac     FD 26 0A F6 | 	mov	local01, result1 wz
042b0                 | '   err=compile_assign(linenum,0,cont)
042b0                 | '   if err<>0 then printerror(err,linenum): goto 101
042b0     20 00 90 AD |  if_e	jmp	#LR__0204
042b4     52 00 00 FF 
042b8     08 E5 05 F1 | 	add	objptr, ##42248
042bc     F2 14 02 FB | 	rdlong	arg02, objptr
042c0     52 00 00 FF 
042c4     08 E5 85 F1 | 	sub	objptr, ##42248
042c8     13 13 02 F6 | 	mov	arg01, local01
042cc     EC 03 B2 FD | 	call	#_printerror
042d0     64 01 90 FD | 	jmp	#LR__0210
042d4                 | LR__0204
042d4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
042d4     52 00 00 FF 
042d8     4C E5 05 F1 | 	add	objptr, ##42316
042dc     F2 12 02 FB | 	rdlong	arg01, objptr
042e0     52 00 00 FF 
042e4     4C E5 85 F1 | 	sub	objptr, ##42316
042e8     B1 01 00 FF 
042ec     28 14 06 F6 | 	mov	arg02, ##@LR__5404
042f0     44 3E B2 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     1C 01 90 AD |  if_e	jmp	#LR__0209
042fc     52 00 00 FF 
04300     4C E5 05 F1 | 	add	objptr, ##42316
04304     F2 2C 02 FB | 	rdlong	local04, objptr
04308     1B 00 00 FF 
0430c     10 E5 85 F1 | 	sub	objptr, ##14096
04310     F2 2C 62 FC | 	wrlong	local04, objptr
04314     08 E4 05 F1 | 	add	objptr, #8
04318     F2 08 68 FC | 	wrlong	#4, objptr
0431c     37 00 00 FF 
04320     44 E4 85 F1 | 	sub	objptr, ##28228
04324     D0 D5 9F FD | 	jmp	#LR__0070
04328                 | LR__0205
04328                 | '     							 
04328                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04328     37 00 00 FF 
0432c     44 E4 05 F1 | 	add	objptr, ##28228
04330     F2 2C 02 FB | 	rdlong	local04, objptr
04334     37 00 00 FF 
04338     44 E4 85 F1 | 	sub	objptr, ##28228
0433c     01 2C 0E F2 | 	cmp	local04, #1 wz
04340     37 00 00 5F 
04344     44 E4 05 51 |  if_ne	add	objptr, ##28228
04348     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0434c     37 00 00 5F 
04350     44 E4 85 51 |  if_ne	sub	objptr, ##28228
04354     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04358     35 00 00 AF 
0435c     38 E4 05 A1 |  if_e	add	objptr, ##27192
04360     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04364     35 00 00 AF 
04368     38 E4 85 A1 |  if_e	sub	objptr, ##27192
0436c     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04370     A4 00 90 5D |  if_ne	jmp	#LR__0208
04374     52 00 00 FF 
04378     08 E5 05 F1 | 	add	objptr, ##42248
0437c     F2 12 02 FB | 	rdlong	arg01, objptr
04380     1B 00 00 FF 
04384     C4 E4 85 F1 | 	sub	objptr, ##14020
04388     F2 16 02 FB | 	rdlong	arg03, objptr
0438c     37 00 00 FF 
04390     44 E4 85 F1 | 	sub	objptr, ##28228
04394     00 14 06 F6 | 	mov	arg02, #0
04398     6C 44 B0 FD | 	call	#_compile_assign
0439c     FD 26 0A F6 | 	mov	local01, result1 wz
043a0                 | '   err=compile_assign(linenum,0,cont) 
043a0                 | '   if err<>0 then printerror(err,linenum): goto 101
043a0     20 00 90 AD |  if_e	jmp	#LR__0206
043a4     52 00 00 FF 
043a8     08 E5 05 F1 | 	add	objptr, ##42248
043ac     F2 14 02 FB | 	rdlong	arg02, objptr
043b0     52 00 00 FF 
043b4     08 E5 85 F1 | 	sub	objptr, ##42248
043b8     13 13 02 F6 | 	mov	arg01, local01
043bc     FC 02 B2 FD | 	call	#_printerror
043c0     74 00 90 FD | 	jmp	#LR__0210
043c4                 | LR__0206
043c4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
043c4     52 00 00 FF 
043c8     4C E5 05 F1 | 	add	objptr, ##42316
043cc     F2 12 02 FB | 	rdlong	arg01, objptr
043d0     52 00 00 FF 
043d4     4C E5 85 F1 | 	sub	objptr, ##42316
043d8     B1 01 00 FF 
043dc     29 14 06 F6 | 	mov	arg02, ##@LR__5405
043e0     54 3D B2 FD | 	call	#__system___string_cmp
043e4     00 FA 4D F2 | 	cmps	result1, #0 wz
043e8     2C 00 90 AD |  if_e	jmp	#LR__0207
043ec     52 00 00 FF 
043f0     4C E5 05 F1 | 	add	objptr, ##42316
043f4     F2 2C 02 FB | 	rdlong	local04, objptr
043f8     1B 00 00 FF 
043fc     10 E5 85 F1 | 	sub	objptr, ##14096
04400     F2 2C 62 FC | 	wrlong	local04, objptr
04404     08 E4 05 F1 | 	add	objptr, #8
04408     F2 08 68 FC | 	wrlong	#4, objptr
0440c     37 00 00 FF 
04410     44 E4 85 F1 | 	sub	objptr, ##28228
04414     E0 D4 9F FD | 	jmp	#LR__0070
04418                 | LR__0207
04418                 | LR__0208
04418                 | LR__0209
04418                 | ' 
04418                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04418     52 00 00 FF 
0441c     08 E5 05 F1 | 	add	objptr, ##42248
04420     F2 2C 0A FB | 	rdlong	local04, objptr wz
04424     52 00 00 FF 
04428     08 E5 85 F1 | 	sub	objptr, ##42248
0442c     B0 00 90 5D |  if_ne	jmp	#LR__0213
04430     02 12 06 F6 | 	mov	arg01, #2
04434     E4 92 B0 FD | 	call	#_execute_line
04438                 | LR__0210
04438                 | '   execute_line(2)
04438                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04438     52 00 00 FF 
0443c     2C E5 05 F1 | 	add	objptr, ##42284
04440     F2 2C 0A FB | 	rdlong	local04, objptr wz
04444     52 00 00 FF 
04448     2C E5 85 F1 | 	sub	objptr, ##42284
0444c     20 00 90 5D |  if_ne	jmp	#LR__0211
04450     B1 01 00 FF 
04454     2A 12 06 F6 | 	mov	arg01, ##@LR__5406
04458                 | ' 
04458                 | ' write(text)
04458     18 24 B2 FD | 	call	#_hg010b_spin2_write
0445c                 | ' crlf
0445c     B4 28 B2 FD | 	call	#_hg010b_spin2_crlf
04460     B1 01 00 FF 
04464     2B 12 06 F6 | 	mov	arg01, ##@LR__5407
04468                 | ' 
04468                 | ' write(text)
04468     08 24 B2 FD | 	call	#_hg010b_spin2_write
0446c                 | ' crlf
0446c     A4 28 B2 FD | 	call	#_hg010b_spin2_crlf
04470                 | LR__0211
04470                 | '     if inload=1 andalso err>0 then print fullline$
04470     52 00 00 FF 
04474     2C E5 05 F1 | 	add	objptr, ##42284
04478     F2 2C 02 FB | 	rdlong	local04, objptr
0447c     52 00 00 FF 
04480     2C E5 85 F1 | 	sub	objptr, ##42284
04484     01 2C 0E F2 | 	cmp	local04, #1 wz
04488     54 00 90 5D |  if_ne	jmp	#LR__0212
0448c     01 26 56 F2 | 	cmps	local01, #1 wc
04490     4C 00 90 CD |  if_b	jmp	#LR__0212
04494     00 12 06 F6 | 	mov	arg01, #0
04498     18 99 B2 FD | 	call	#__system___getiolock_0620
0449c     FD 12 02 F6 | 	mov	arg01, result1
044a0     6C 3C B2 FD | 	call	#__system___lockmem
044a4     37 00 00 FF 
044a8     40 E4 05 F1 | 	add	objptr, ##28224
044ac     F2 14 02 FB | 	rdlong	arg02, objptr
044b0     37 00 00 FF 
044b4     40 E4 85 F1 | 	sub	objptr, ##28224
044b8     00 12 06 F6 | 	mov	arg01, #0
044bc     00 16 06 F6 | 	mov	arg03, #0
044c0     44 49 B2 FD | 	call	#__system___basic_print_string
044c4     00 12 06 F6 | 	mov	arg01, #0
044c8     0A 14 06 F6 | 	mov	arg02, #10
044cc     00 16 06 F6 | 	mov	arg03, #0
044d0     DC 48 B2 FD | 	call	#__system___basic_print_char
044d4     00 12 06 F6 | 	mov	arg01, #0
044d8     D8 98 B2 FD | 	call	#__system___getiolock_0620
044dc     FD 00 68 FC | 	wrlong	#0, result1
044e0                 | LR__0212
044e0                 | LR__0213
044e0     A7 F0 03 F6 | 	mov	ptra, fp
044e4     B2 00 A0 FD | 	call	#popregs_
044e8                 | _interpret_ret
044e8     2D 00 64 FD | 	ret
044ec                 | 
044ec                 | ' 
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' '
044ec                 | ' '                          END OF TOKENIZER MAIN CODE
044ec                 | ' '
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' 
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' 
044ec                 | ' ' Check if the part is an operator, return a token or 0 if not found
044ec                 | ' 
044ec                 | ' function isoperator(s as string) as ubyte
044ec                 | _isoperator
044ec     01 4A 05 F6 | 	mov	COUNT_, #1
044f0     A8 00 A0 FD | 	call	#pushregs_
044f4                 | ' 
044f4                 | ' select case s
044f4     09 27 02 F6 | 	mov	local01, arg01
044f8     B1 01 00 FF 
044fc     31 14 06 F6 | 	mov	arg02, ##@LR__5408
04500     13 13 02 F6 | 	mov	arg01, local01
04504     30 3C B2 FD | 	call	#__system___string_cmp
04508     00 FA 0D F2 | 	cmp	result1, #0 wz
0450c     FC 01 90 AD |  if_e	jmp	#LR__0220
04510     B1 01 00 FF 
04514     33 14 06 F6 | 	mov	arg02, ##@LR__5409
04518     13 13 02 F6 | 	mov	arg01, local01
0451c     18 3C B2 FD | 	call	#__system___string_cmp
04520     00 FA 0D F2 | 	cmp	result1, #0 wz
04524     EC 01 90 AD |  if_e	jmp	#LR__0221
04528     B1 01 00 FF 
0452c     35 14 06 F6 | 	mov	arg02, ##@LR__5410
04530     13 13 02 F6 | 	mov	arg01, local01
04534     00 3C B2 FD | 	call	#__system___string_cmp
04538     00 FA 0D F2 | 	cmp	result1, #0 wz
0453c     DC 01 90 AD |  if_e	jmp	#LR__0222
04540     B1 01 00 FF 
04544     38 14 06 F6 | 	mov	arg02, ##@LR__5411
04548     13 13 02 F6 | 	mov	arg01, local01
0454c     E8 3B B2 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     CC 01 90 AD |  if_e	jmp	#LR__0223
04558     B1 01 00 FF 
0455c     3C 14 06 F6 | 	mov	arg02, ##@LR__5412
04560     13 13 02 F6 | 	mov	arg01, local01
04564     D0 3B B2 FD | 	call	#__system___string_cmp
04568     00 FA 0D F2 | 	cmp	result1, #0 wz
0456c     BC 01 90 AD |  if_e	jmp	#LR__0224
04570     B1 01 00 FF 
04574     3E 14 06 F6 | 	mov	arg02, ##@LR__5413
04578     13 13 02 F6 | 	mov	arg01, local01
0457c     B8 3B B2 FD | 	call	#__system___string_cmp
04580     00 FA 0D F2 | 	cmp	result1, #0 wz
04584     AC 01 90 AD |  if_e	jmp	#LR__0225
04588     B1 01 00 FF 
0458c     40 14 06 F6 | 	mov	arg02, ##@LR__5414
04590     13 13 02 F6 | 	mov	arg01, local01
04594     A0 3B B2 FD | 	call	#__system___string_cmp
04598     00 FA 0D F2 | 	cmp	result1, #0 wz
0459c     9C 01 90 AD |  if_e	jmp	#LR__0226
045a0     B1 01 00 FF 
045a4     44 14 06 F6 | 	mov	arg02, ##@LR__5415
045a8     13 13 02 F6 | 	mov	arg01, local01
045ac     88 3B B2 FD | 	call	#__system___string_cmp
045b0     00 FA 0D F2 | 	cmp	result1, #0 wz
045b4     8C 01 90 AD |  if_e	jmp	#LR__0227
045b8     B1 01 00 FF 
045bc     48 14 06 F6 | 	mov	arg02, ##@LR__5416
045c0     13 13 02 F6 | 	mov	arg01, local01
045c4     70 3B B2 FD | 	call	#__system___string_cmp
045c8     00 FA 0D F2 | 	cmp	result1, #0 wz
045cc     7C 01 90 AD |  if_e	jmp	#LR__0228
045d0     B1 01 00 FF 
045d4     4C 14 06 F6 | 	mov	arg02, ##@LR__5417
045d8     13 13 02 F6 | 	mov	arg01, local01
045dc     58 3B B2 FD | 	call	#__system___string_cmp
045e0     00 FA 0D F2 | 	cmp	result1, #0 wz
045e4     6C 01 90 AD |  if_e	jmp	#LR__0229
045e8     B1 01 00 FF 
045ec     50 14 06 F6 | 	mov	arg02, ##@LR__5418
045f0     13 13 02 F6 | 	mov	arg01, local01
045f4     40 3B B2 FD | 	call	#__system___string_cmp
045f8     00 FA 0D F2 | 	cmp	result1, #0 wz
045fc     5C 01 90 AD |  if_e	jmp	#LR__0230
04600     B1 01 00 FF 
04604     54 14 06 F6 | 	mov	arg02, ##@LR__5419
04608     13 13 02 F6 | 	mov	arg01, local01
0460c     28 3B B2 FD | 	call	#__system___string_cmp
04610     00 FA 0D F2 | 	cmp	result1, #0 wz
04614     4C 01 90 AD |  if_e	jmp	#LR__0231
04618     B1 01 00 FF 
0461c     56 14 06 F6 | 	mov	arg02, ##@LR__5420
04620     13 13 02 F6 | 	mov	arg01, local01
04624     10 3B B2 FD | 	call	#__system___string_cmp
04628     00 FA 0D F2 | 	cmp	result1, #0 wz
0462c     3C 01 90 AD |  if_e	jmp	#LR__0232
04630     B1 01 00 FF 
04634     5A 14 06 F6 | 	mov	arg02, ##@LR__5421
04638     13 13 02 F6 | 	mov	arg01, local01
0463c     F8 3A B2 FD | 	call	#__system___string_cmp
04640     00 FA 0D F2 | 	cmp	result1, #0 wz
04644     2C 01 90 AD |  if_e	jmp	#LR__0233
04648     B1 01 00 FF 
0464c     5C 14 06 F6 | 	mov	arg02, ##@LR__5422
04650     13 13 02 F6 | 	mov	arg01, local01
04654     E0 3A B2 FD | 	call	#__system___string_cmp
04658     00 FA 0D F2 | 	cmp	result1, #0 wz
0465c     1C 01 90 AD |  if_e	jmp	#LR__0234
04660     B1 01 00 FF 
04664     5E 14 06 F6 | 	mov	arg02, ##@LR__5423
04668     13 13 02 F6 | 	mov	arg01, local01
0466c     C8 3A B2 FD | 	call	#__system___string_cmp
04670     00 FA 0D F2 | 	cmp	result1, #0 wz
04674     0C 01 90 AD |  if_e	jmp	#LR__0235
04678     B1 01 00 FF 
0467c     61 14 06 F6 | 	mov	arg02, ##@LR__5424
04680     13 13 02 F6 | 	mov	arg01, local01
04684     B0 3A B2 FD | 	call	#__system___string_cmp
04688     00 FA 0D F2 | 	cmp	result1, #0 wz
0468c     FC 00 90 AD |  if_e	jmp	#LR__0236
04690     B1 01 00 FF 
04694     64 14 06 F6 | 	mov	arg02, ##@LR__5425
04698     13 13 02 F6 | 	mov	arg01, local01
0469c     98 3A B2 FD | 	call	#__system___string_cmp
046a0     00 FA 0D F2 | 	cmp	result1, #0 wz
046a4     EC 00 90 AD |  if_e	jmp	#LR__0237
046a8     B1 01 00 FF 
046ac     66 14 06 F6 | 	mov	arg02, ##@LR__5426
046b0     13 13 02 F6 | 	mov	arg01, local01
046b4     80 3A B2 FD | 	call	#__system___string_cmp
046b8     00 FA 0D F2 | 	cmp	result1, #0 wz
046bc     DC 00 90 AD |  if_e	jmp	#LR__0238
046c0     B1 01 00 FF 
046c4     68 14 06 F6 | 	mov	arg02, ##@LR__5427
046c8     13 13 02 F6 | 	mov	arg01, local01
046cc     68 3A B2 FD | 	call	#__system___string_cmp
046d0     00 FA 0D F2 | 	cmp	result1, #0 wz
046d4     CC 00 90 AD |  if_e	jmp	#LR__0239
046d8     B1 01 00 FF 
046dc     6B 14 06 F6 | 	mov	arg02, ##@LR__5428
046e0     13 13 02 F6 | 	mov	arg01, local01
046e4     50 3A B2 FD | 	call	#__system___string_cmp
046e8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ec     BC 00 90 AD |  if_e	jmp	#LR__0240
046f0     B1 01 00 FF 
046f4     6E 14 06 F6 | 	mov	arg02, ##@LR__5429
046f8     13 13 02 F6 | 	mov	arg01, local01
046fc     38 3A B2 FD | 	call	#__system___string_cmp
04700     00 FA 0D F2 | 	cmp	result1, #0 wz
04704     AC 00 90 AD |  if_e	jmp	#LR__0241
04708     B0 00 90 FD | 	jmp	#LR__0242
0470c                 | LR__0220
0470c     01 FA 05 F6 | 	mov	result1, #1
04710     AC 00 90 FD | 	jmp	#LR__0243
04714                 | LR__0221
04714     02 FA 05 F6 | 	mov	result1, #2
04718     A4 00 90 FD | 	jmp	#LR__0243
0471c                 | LR__0222
0471c     03 FA 05 F6 | 	mov	result1, #3
04720     9C 00 90 FD | 	jmp	#LR__0243
04724                 | LR__0223
04724     04 FA 05 F6 | 	mov	result1, #4
04728     94 00 90 FD | 	jmp	#LR__0243
0472c                 | LR__0224
0472c     05 FA 05 F6 | 	mov	result1, #5
04730     8C 00 90 FD | 	jmp	#LR__0243
04734                 | LR__0225
04734     06 FA 05 F6 | 	mov	result1, #6
04738     84 00 90 FD | 	jmp	#LR__0243
0473c                 | LR__0226
0473c     07 FA 05 F6 | 	mov	result1, #7
04740     7C 00 90 FD | 	jmp	#LR__0243
04744                 | LR__0227
04744     08 FA 05 F6 | 	mov	result1, #8
04748     74 00 90 FD | 	jmp	#LR__0243
0474c                 | LR__0228
0474c     09 FA 05 F6 | 	mov	result1, #9
04750     6C 00 90 FD | 	jmp	#LR__0243
04754                 | LR__0229
04754     0A FA 05 F6 | 	mov	result1, #10
04758     64 00 90 FD | 	jmp	#LR__0243
0475c                 | LR__0230
0475c     0B FA 05 F6 | 	mov	result1, #11
04760     5C 00 90 FD | 	jmp	#LR__0243
04764                 | LR__0231
04764     0C FA 05 F6 | 	mov	result1, #12
04768     54 00 90 FD | 	jmp	#LR__0243
0476c                 | LR__0232
0476c     0D FA 05 F6 | 	mov	result1, #13
04770     4C 00 90 FD | 	jmp	#LR__0243
04774                 | LR__0233
04774     0E FA 05 F6 | 	mov	result1, #14
04778     44 00 90 FD | 	jmp	#LR__0243
0477c                 | LR__0234
0477c     1B FA 05 F6 | 	mov	result1, #27
04780     3C 00 90 FD | 	jmp	#LR__0243
04784                 | LR__0235
04784     27 FA 05 F6 | 	mov	result1, #39
04788     34 00 90 FD | 	jmp	#LR__0243
0478c                 | LR__0236
0478c     26 FA 05 F6 | 	mov	result1, #38
04790     2C 00 90 FD | 	jmp	#LR__0243
04794                 | LR__0237
04794     10 FA 05 F6 | 	mov	result1, #16
04798     24 00 90 FD | 	jmp	#LR__0243
0479c                 | LR__0238
0479c     0F FA 05 F6 | 	mov	result1, #15
047a0     1C 00 90 FD | 	jmp	#LR__0243
047a4                 | LR__0239
047a4     2A FA 05 F6 | 	mov	result1, #42
047a8     14 00 90 FD | 	jmp	#LR__0243
047ac                 | LR__0240
047ac     28 FA 05 F6 | 	mov	result1, #40
047b0     0C 00 90 FD | 	jmp	#LR__0243
047b4                 | LR__0241
047b4     29 FA 05 F6 | 	mov	result1, #41
047b8     04 00 90 FD | 	jmp	#LR__0243
047bc                 | LR__0242
047bc     00 FA 05 F6 | 	mov	result1, #0
047c0                 | LR__0243
047c0     A7 F0 03 F6 | 	mov	ptra, fp
047c4     B2 00 A0 FD | 	call	#popregs_
047c8                 | _isoperator_ret
047c8     2D 00 64 FD | 	ret
047cc                 | 
047cc                 | ' 
047cc                 | ' ' Check if the part is a channel#, return a token or 0 if not found
047cc                 | ' 
047cc                 | ' function ischannel(s as string) as ulong
047cc                 | _ischannel
047cc     02 4A 05 F6 | 	mov	COUNT_, #2
047d0     A8 00 A0 FD | 	call	#pushregs_
047d4                 | ' if left$(s,1)<>"#" then return 0
047d4     09 27 02 F6 | 	mov	local01, arg01
047d8     01 14 06 F6 | 	mov	arg02, #1
047dc     B0 59 B2 FD | 	call	#__system__Left_S
047e0     FD 12 02 F6 | 	mov	arg01, result1
047e4     B1 01 00 FF 
047e8     71 14 06 F6 | 	mov	arg02, ##@LR__5430
047ec     48 39 B2 FD | 	call	#__system___string_cmp
047f0     00 FA 0D F2 | 	cmp	result1, #0 wz
047f4     00 FA 05 56 |  if_ne	mov	result1, #0
047f8     AC 00 90 5D |  if_ne	jmp	#LR__0254
047fc                 | ' if len(s)<>2 then return 0
047fc     13 13 02 F6 | 	mov	arg01, local01
04800     09 29 02 F6 | 	mov	local02, arg01
04804     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04808                 | LR__0250
04808     14 FB C9 FA | 	rdbyte	result1, local02 wz
0480c     01 28 06 51 |  if_ne	add	local02, #1
04810     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
04814                 | LR__0251
04814     09 29 82 F1 | 	sub	local02, arg01
04818     14 FB 01 F6 | 	mov	result1, local02
0481c     02 FA 0D F2 | 	cmp	result1, #2 wz
04820     00 FA 05 56 |  if_ne	mov	result1, #0
04824     80 00 90 5D |  if_ne	jmp	#LR__0254
04828                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04828     13 13 02 F6 | 	mov	arg01, local01
0482c     01 14 06 F6 | 	mov	arg02, #1
04830     E4 59 B2 FD | 	call	#__system__Right_S
04834     FD 12 02 F6 | 	mov	arg01, result1
04838     B1 01 00 FF 
0483c     73 14 06 F6 | 	mov	arg02, ##@LR__5431
04840     F4 38 B2 FD | 	call	#__system___string_cmp
04844     00 FA 55 F2 | 	cmps	result1, #0 wc
04848     24 00 90 CD |  if_b	jmp	#LR__0252
0484c     13 13 02 F6 | 	mov	arg01, local01
04850     01 14 06 F6 | 	mov	arg02, #1
04854     C0 59 B2 FD | 	call	#__system__Right_S
04858     FD 12 02 F6 | 	mov	arg01, result1
0485c     B1 01 00 FF 
04860     75 14 06 F6 | 	mov	arg02, ##@LR__5432
04864     D0 38 B2 FD | 	call	#__system___string_cmp
04868     01 FA 55 F2 | 	cmps	result1, #1 wc
0486c     08 00 90 CD |  if_b	jmp	#LR__0253
04870                 | LR__0252
04870     00 FA 05 F6 | 	mov	result1, #0
04874     30 00 90 FD | 	jmp	#LR__0254
04878                 | LR__0253
04878                 | ' return token_channel+val(right$(s,1))
04878     13 13 02 F6 | 	mov	arg01, local01
0487c     01 14 06 F6 | 	mov	arg02, #1
04880     94 59 B2 FD | 	call	#__system__Right_S
04884     FD 12 02 F6 | 	mov	arg01, result1
04888     10 6F B2 FD | 	call	#__system____builtin_atof
0488c     FD 14 02 F6 | 	mov	arg02, result1
04890     00 18 21 FF 
04894     00 12 06 F6 | 	mov	arg01, ##1110441984
04898     20 63 B2 FD | 	call	#__system___float_add
0489c     FD 12 02 F6 | 	mov	arg01, result1
048a0     00 14 06 F6 | 	mov	arg02, #0
048a4     AC 6B B2 FD | 	call	#__system___float_tointeger
048a8                 | LR__0254
048a8     A7 F0 03 F6 | 	mov	ptra, fp
048ac     B2 00 A0 FD | 	call	#popregs_
048b0                 | _ischannel_ret
048b0     2D 00 64 FD | 	ret
048b4                 | 
048b4                 | ' 
048b4                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
048b4                 | ' ' todo: add spin2/pasm constants for pin control
048b4                 | ' 
048b4                 | ' function isconstant(s as string) as integer
048b4                 | _isconstant
048b4     01 4A 05 F6 | 	mov	COUNT_, #1
048b8     A8 00 A0 FD | 	call	#pushregs_
048bc                 | ' 
048bc                 | ' select case s
048bc     09 27 02 F6 | 	mov	local01, arg01
048c0     B1 01 00 FF 
048c4     77 14 06 F6 | 	mov	arg02, ##@LR__5433
048c8     13 13 02 F6 | 	mov	arg01, local01
048cc     68 38 B2 FD | 	call	#__system___string_cmp
048d0     00 FA 0D F2 | 	cmp	result1, #0 wz
048d4     34 00 90 AD |  if_e	jmp	#LR__0260
048d8     B1 01 00 FF 
048dc     7D 14 06 F6 | 	mov	arg02, ##@LR__5434
048e0     13 13 02 F6 | 	mov	arg01, local01
048e4     50 38 B2 FD | 	call	#__system___string_cmp
048e8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ec     24 00 90 AD |  if_e	jmp	#LR__0261
048f0     B1 01 00 FF 
048f4     84 14 06 F6 | 	mov	arg02, ##@LR__5435
048f8     13 13 02 F6 | 	mov	arg01, local01
048fc     38 38 B2 FD | 	call	#__system___string_cmp
04900     00 FA 0D F2 | 	cmp	result1, #0 wz
04904     14 00 90 AD |  if_e	jmp	#LR__0262
04908     18 00 90 FD | 	jmp	#LR__0263
0490c                 | LR__0260
0490c     01 FA 05 F6 | 	mov	result1, #1
04910     14 00 90 FD | 	jmp	#LR__0264
04914                 | LR__0261
04914     02 FA 05 F6 | 	mov	result1, #2
04918     0C 00 90 FD | 	jmp	#LR__0264
0491c                 | LR__0262
0491c     04 FA 05 F6 | 	mov	result1, #4
04920     04 00 90 FD | 	jmp	#LR__0264
04924                 | LR__0263
04924     00 FA 05 F6 | 	mov	result1, #0
04928                 | LR__0264
04928     A7 F0 03 F6 | 	mov	ptra, fp
0492c     B2 00 A0 FD | 	call	#popregs_
04930                 | _isconstant_ret
04930     2D 00 64 FD | 	ret
04934                 | 
04934                 | ' 
04934                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04934                 | ' 
04934                 | ' function isnotename(s as string) as ulong
04934                 | _isnotename
04934     07 4A 05 F6 | 	mov	COUNT_, #7
04938     A8 00 A0 FD | 	call	#pushregs_
0493c                 | ' if left$(s,1)<>"#" then return 0
0493c     09 27 02 F6 | 	mov	local01, arg01
04940     01 14 06 F6 | 	mov	arg02, #1
04944     48 58 B2 FD | 	call	#__system__Left_S
04948     FD 12 02 F6 | 	mov	arg01, result1
0494c     B1 01 00 FF 
04950     8C 14 06 F6 | 	mov	arg02, ##@LR__5436
04954     E0 37 B2 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     00 FA 05 56 |  if_ne	mov	result1, #0
04960     30 03 90 5D |  if_ne	jmp	#LR__0293
04964                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04964     13 13 02 F6 | 	mov	arg01, local01
04968     03 14 06 F6 | 	mov	arg02, #3
0496c     01 16 06 F6 | 	mov	arg03, #1
04970     34 59 B2 FD | 	call	#__system__Mid_S
04974     FD 12 02 F6 | 	mov	arg01, result1
04978     B1 01 00 FF 
0497c     8E 14 06 F6 | 	mov	arg02, ##@LR__5437
04980     B4 37 B2 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     18 00 90 5D |  if_ne	jmp	#LR__0270
0498c     13 13 02 F6 | 	mov	arg01, local01
04990     02 14 06 F6 | 	mov	arg02, #2
04994     02 16 06 F6 | 	mov	arg03, #2
04998     0C 59 B2 FD | 	call	#__system__Mid_S
0499c     FD 28 02 F6 | 	mov	local02, result1
049a0     14 00 90 FD | 	jmp	#LR__0271
049a4                 | LR__0270
049a4     13 13 02 F6 | 	mov	arg01, local01
049a8     02 14 06 F6 | 	mov	arg02, #2
049ac     01 16 06 F6 | 	mov	arg03, #1
049b0     F4 58 B2 FD | 	call	#__system__Mid_S
049b4     FD 28 02 F6 | 	mov	local02, result1
049b8                 | LR__0271
049b8                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
049b8     13 13 02 F6 | 	mov	arg01, local01
049bc     09 2B 02 F6 | 	mov	local03, arg01
049c0     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
049c4                 | LR__0272
049c4     15 FB C9 FA | 	rdbyte	result1, local03 wz
049c8     01 2A 06 51 |  if_ne	add	local03, #1
049cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
049d0                 | LR__0273
049d0     09 2B 82 F1 | 	sub	local03, arg01
049d4     15 15 02 F6 | 	mov	arg02, local03
049d8     01 14 86 F1 | 	sub	arg02, #1
049dc     13 13 02 F6 | 	mov	arg01, local01
049e0     01 16 06 F6 | 	mov	arg03, #1
049e4     C0 58 B2 FD | 	call	#__system__Mid_S
049e8     FD 12 02 F6 | 	mov	arg01, result1
049ec     B1 01 00 FF 
049f0     90 14 06 F6 | 	mov	arg02, ##@LR__5438
049f4     40 37 B2 FD | 	call	#__system___string_cmp
049f8     00 FA 0D F2 | 	cmp	result1, #0 wz
049fc     28 00 90 AD |  if_e	jmp	#LR__0274
04a00     13 13 02 F6 | 	mov	arg01, local01
04a04     01 14 06 F6 | 	mov	arg02, #1
04a08     0C 58 B2 FD | 	call	#__system__Right_S
04a0c     FD 12 02 F6 | 	mov	arg01, result1
04a10     88 6D B2 FD | 	call	#__system____builtin_atof
04a14     FD 12 02 F6 | 	mov	arg01, result1
04a18     00 14 06 F6 | 	mov	arg02, #0
04a1c     34 6A B2 FD | 	call	#__system___float_tointeger
04a20     FD 2C 02 F6 | 	mov	local04, result1
04a24     34 00 90 FD | 	jmp	#LR__0275
04a28                 | LR__0274
04a28     13 13 02 F6 | 	mov	arg01, local01
04a2c     01 14 06 F6 | 	mov	arg02, #1
04a30     E4 57 B2 FD | 	call	#__system__Right_S
04a34     FD 12 02 F6 | 	mov	arg01, result1
04a38     60 6D B2 FD | 	call	#__system____builtin_atof
04a3c     FD 14 02 F6 | 	mov	arg02, result1
04a40     00 C0 5F FF 
04a44     00 12 06 F6 | 	mov	arg01, ##-1082130432
04a48     40 65 B2 FD | 	call	#__system___float_mul
04a4c     FD 12 02 F6 | 	mov	arg01, result1
04a50     00 14 06 F6 | 	mov	arg02, #0
04a54     FC 69 B2 FD | 	call	#__system___float_tointeger
04a58     FD 2C 02 F6 | 	mov	local04, result1
04a5c                 | LR__0275
04a5c                 | ' 
04a5c                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04a5c     00 2C 0E F2 | 	cmp	local04, #0 wz
04a60     24 00 90 5D |  if_ne	jmp	#LR__0276
04a64     13 13 02 F6 | 	mov	arg01, local01
04a68     01 14 06 F6 | 	mov	arg02, #1
04a6c     A8 57 B2 FD | 	call	#__system__Right_S
04a70     FD 12 02 F6 | 	mov	arg01, result1
04a74     B1 01 00 FF 
04a78     92 14 06 F6 | 	mov	arg02, ##@LR__5439
04a7c     B8 36 B2 FD | 	call	#__system___string_cmp
04a80     00 FA 0D F2 | 	cmp	result1, #0 wz
04a84     04 2C 06 56 |  if_ne	mov	local04, #4
04a88                 | LR__0276
04a88                 | ' 
04a88                 | ' select case s1
04a88     14 2F 02 F6 | 	mov	local05, local02
04a8c     B1 01 00 FF 
04a90     94 14 06 F6 | 	mov	arg02, ##@LR__5440
04a94     17 13 02 F6 | 	mov	arg01, local05
04a98     9C 36 B2 FD | 	call	#__system___string_cmp
04a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa0     24 01 90 AD |  if_e	jmp	#LR__0277
04aa4     B1 01 00 FF 
04aa8     96 14 06 F6 | 	mov	arg02, ##@LR__5441
04aac     17 13 02 F6 | 	mov	arg01, local05
04ab0     84 36 B2 FD | 	call	#__system___string_cmp
04ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab8     18 01 90 AD |  if_e	jmp	#LR__0278
04abc     B1 01 00 FF 
04ac0     99 14 06 F6 | 	mov	arg02, ##@LR__5442
04ac4     17 13 02 F6 | 	mov	arg01, local05
04ac8     6C 36 B2 FD | 	call	#__system___string_cmp
04acc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad0     0C 01 90 AD |  if_e	jmp	#LR__0279
04ad4     B1 01 00 FF 
04ad8     9B 14 06 F6 | 	mov	arg02, ##@LR__5443
04adc     17 13 02 F6 | 	mov	arg01, local05
04ae0     54 36 B2 FD | 	call	#__system___string_cmp
04ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae8     00 01 90 AD |  if_e	jmp	#LR__0280
04aec     B1 01 00 FF 
04af0     9E 14 06 F6 | 	mov	arg02, ##@LR__5444
04af4     17 13 02 F6 | 	mov	arg01, local05
04af8     3C 36 B2 FD | 	call	#__system___string_cmp
04afc     00 FA 0D F2 | 	cmp	result1, #0 wz
04b00     F4 00 90 AD |  if_e	jmp	#LR__0281
04b04     B1 01 00 FF 
04b08     A0 14 06 F6 | 	mov	arg02, ##@LR__5445
04b0c     17 13 02 F6 | 	mov	arg01, local05
04b10     24 36 B2 FD | 	call	#__system___string_cmp
04b14     00 FA 0D F2 | 	cmp	result1, #0 wz
04b18     E8 00 90 AD |  if_e	jmp	#LR__0282
04b1c     B1 01 00 FF 
04b20     A2 14 06 F6 | 	mov	arg02, ##@LR__5446
04b24     17 13 02 F6 | 	mov	arg01, local05
04b28     0C 36 B2 FD | 	call	#__system___string_cmp
04b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b30     DC 00 90 AD |  if_e	jmp	#LR__0283
04b34     B1 01 00 FF 
04b38     A5 14 06 F6 | 	mov	arg02, ##@LR__5447
04b3c     17 13 02 F6 | 	mov	arg01, local05
04b40     F4 35 B2 FD | 	call	#__system___string_cmp
04b44     00 FA 0D F2 | 	cmp	result1, #0 wz
04b48     D0 00 90 AD |  if_e	jmp	#LR__0284
04b4c     B1 01 00 FF 
04b50     A7 14 06 F6 | 	mov	arg02, ##@LR__5448
04b54     17 13 02 F6 | 	mov	arg01, local05
04b58     DC 35 B2 FD | 	call	#__system___string_cmp
04b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b60     C4 00 90 AD |  if_e	jmp	#LR__0285
04b64     B1 01 00 FF 
04b68     AA 14 06 F6 | 	mov	arg02, ##@LR__5449
04b6c     17 13 02 F6 | 	mov	arg01, local05
04b70     C4 35 B2 FD | 	call	#__system___string_cmp
04b74     00 FA 0D F2 | 	cmp	result1, #0 wz
04b78     B8 00 90 AD |  if_e	jmp	#LR__0286
04b7c     B1 01 00 FF 
04b80     AC 14 06 F6 | 	mov	arg02, ##@LR__5450
04b84     17 13 02 F6 | 	mov	arg01, local05
04b88     AC 35 B2 FD | 	call	#__system___string_cmp
04b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b90     AC 00 90 AD |  if_e	jmp	#LR__0287
04b94     B1 01 00 FF 
04b98     AF 14 06 F6 | 	mov	arg02, ##@LR__5451
04b9c     17 13 02 F6 | 	mov	arg01, local05
04ba0     94 35 B2 FD | 	call	#__system___string_cmp
04ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba8     A0 00 90 AD |  if_e	jmp	#LR__0288
04bac     B1 01 00 FF 
04bb0     B1 14 06 F6 | 	mov	arg02, ##@LR__5452
04bb4     17 13 02 F6 | 	mov	arg01, local05
04bb8     7C 35 B2 FD | 	call	#__system___string_cmp
04bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc0     94 00 90 AD |  if_e	jmp	#LR__0289
04bc4     9C 00 90 FD | 	jmp	#LR__0290
04bc8                 | LR__0277
04bc8     01 00 00 FF 
04bcc     00 31 06 F6 | 	mov	local06, ##768
04bd0     98 00 90 FD | 	jmp	#LR__0291
04bd4                 | LR__0278
04bd4     01 00 00 FF 
04bd8     01 31 06 F6 | 	mov	local06, ##769
04bdc     8C 00 90 FD | 	jmp	#LR__0291
04be0                 | LR__0279
04be0     01 00 00 FF 
04be4     02 31 06 F6 | 	mov	local06, ##770
04be8     80 00 90 FD | 	jmp	#LR__0291
04bec                 | LR__0280
04bec     01 00 00 FF 
04bf0     03 31 06 F6 | 	mov	local06, ##771
04bf4     74 00 90 FD | 	jmp	#LR__0291
04bf8                 | LR__0281
04bf8     01 00 00 FF 
04bfc     04 31 06 F6 | 	mov	local06, ##772
04c00     68 00 90 FD | 	jmp	#LR__0291
04c04                 | LR__0282
04c04     01 00 00 FF 
04c08     05 31 06 F6 | 	mov	local06, ##773
04c0c     5C 00 90 FD | 	jmp	#LR__0291
04c10                 | LR__0283
04c10     01 00 00 FF 
04c14     06 31 06 F6 | 	mov	local06, ##774
04c18     50 00 90 FD | 	jmp	#LR__0291
04c1c                 | LR__0284
04c1c     01 00 00 FF 
04c20     07 31 06 F6 | 	mov	local06, ##775
04c24     44 00 90 FD | 	jmp	#LR__0291
04c28                 | LR__0285
04c28     01 00 00 FF 
04c2c     08 31 06 F6 | 	mov	local06, ##776
04c30     38 00 90 FD | 	jmp	#LR__0291
04c34                 | LR__0286
04c34     01 00 00 FF 
04c38     09 31 06 F6 | 	mov	local06, ##777
04c3c     2C 00 90 FD | 	jmp	#LR__0291
04c40                 | LR__0287
04c40     01 00 00 FF 
04c44     0A 31 06 F6 | 	mov	local06, ##778
04c48     20 00 90 FD | 	jmp	#LR__0291
04c4c                 | LR__0288
04c4c     01 00 00 FF 
04c50     0B 31 06 F6 | 	mov	local06, ##779
04c54     14 00 90 FD | 	jmp	#LR__0291
04c58                 | LR__0289
04c58     01 00 00 FF 
04c5c     0B 31 06 F6 | 	mov	local06, ##779
04c60     08 00 90 FD | 	jmp	#LR__0291
04c64                 | LR__0290
04c64     00 FA 05 F6 | 	mov	result1, #0
04c68     28 00 90 FD | 	jmp	#LR__0293
04c6c                 | LR__0291
04c6c                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04c6c     FF FF 7F FF 
04c70     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04c74     18 00 90 CD |  if_b	jmp	#LR__0292
04c78     0A 2C 56 F2 | 	cmps	local04, #10 wc
04c7c     16 33 02 C6 |  if_b	mov	local07, local04
04c80     01 32 66 C0 |  if_b	shl	local07, #1
04c84     16 33 02 C1 |  if_b	add	local07, local04
04c88     02 32 66 C0 |  if_b	shl	local07, #2
04c8c     19 31 02 C1 |  if_b	add	local06, local07
04c90                 | LR__0292
04c90                 | ' return token
04c90     18 FB 01 F6 | 	mov	result1, local06
04c94                 | LR__0293
04c94     A7 F0 03 F6 | 	mov	ptra, fp
04c98     B2 00 A0 FD | 	call	#popregs_
04c9c                 | _isnotename_ret
04c9c     2D 00 64 FD | 	ret
04ca0                 | 
04ca0                 | ' 
04ca0                 | ' ' Check if the part is a separator, return a token or 0 if not found
04ca0                 | ' 
04ca0                 | ' function isseparator(s as string) as ubyte
04ca0                 | _isseparator
04ca0     01 4A 05 F6 | 	mov	COUNT_, #1
04ca4     A8 00 A0 FD | 	call	#pushregs_
04ca8                 | ' 
04ca8                 | ' select case s
04ca8     09 27 02 F6 | 	mov	local01, arg01
04cac     B1 01 00 FF 
04cb0     B3 14 06 F6 | 	mov	arg02, ##@LR__5453
04cb4     13 13 02 F6 | 	mov	arg01, local01
04cb8     7C 34 B2 FD | 	call	#__system___string_cmp
04cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc0     54 01 90 AD |  if_e	jmp	#LR__0300
04cc4     B1 01 00 FF 
04cc8     B5 14 06 F6 | 	mov	arg02, ##@LR__5454
04ccc     13 13 02 F6 | 	mov	arg01, local01
04cd0     64 34 B2 FD | 	call	#__system___string_cmp
04cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd8     44 01 90 AD |  if_e	jmp	#LR__0301
04cdc     B1 01 00 FF 
04ce0     B7 14 06 F6 | 	mov	arg02, ##@LR__5455
04ce4     13 13 02 F6 | 	mov	arg01, local01
04ce8     4C 34 B2 FD | 	call	#__system___string_cmp
04cec     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf0     34 01 90 AD |  if_e	jmp	#LR__0302
04cf4     B1 01 00 FF 
04cf8     B9 14 06 F6 | 	mov	arg02, ##@LR__5456
04cfc     13 13 02 F6 | 	mov	arg01, local01
04d00     34 34 B2 FD | 	call	#__system___string_cmp
04d04     00 FA 0D F2 | 	cmp	result1, #0 wz
04d08     24 01 90 AD |  if_e	jmp	#LR__0303
04d0c     B1 01 00 FF 
04d10     BB 14 06 F6 | 	mov	arg02, ##@LR__5457
04d14     13 13 02 F6 | 	mov	arg01, local01
04d18     1C 34 B2 FD | 	call	#__system___string_cmp
04d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d20     14 01 90 AD |  if_e	jmp	#LR__0304
04d24     B1 01 00 FF 
04d28     BD 14 06 F6 | 	mov	arg02, ##@LR__5458
04d2c     13 13 02 F6 | 	mov	arg01, local01
04d30     04 34 B2 FD | 	call	#__system___string_cmp
04d34     00 FA 0D F2 | 	cmp	result1, #0 wz
04d38     04 01 90 AD |  if_e	jmp	#LR__0305
04d3c     B1 01 00 FF 
04d40     BF 14 06 F6 | 	mov	arg02, ##@LR__5459
04d44     13 13 02 F6 | 	mov	arg01, local01
04d48     EC 33 B2 FD | 	call	#__system___string_cmp
04d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d50     F4 00 90 AD |  if_e	jmp	#LR__0306
04d54     B1 01 00 FF 
04d58     C1 14 06 F6 | 	mov	arg02, ##@LR__5460
04d5c     13 13 02 F6 | 	mov	arg01, local01
04d60     D4 33 B2 FD | 	call	#__system___string_cmp
04d64     00 FA 0D F2 | 	cmp	result1, #0 wz
04d68     E4 00 90 AD |  if_e	jmp	#LR__0307
04d6c     B1 01 00 FF 
04d70     C3 14 06 F6 | 	mov	arg02, ##@LR__5461
04d74     13 13 02 F6 | 	mov	arg01, local01
04d78     BC 33 B2 FD | 	call	#__system___string_cmp
04d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d80     D4 00 90 AD |  if_e	jmp	#LR__0308
04d84     B1 01 00 FF 
04d88     C5 14 06 F6 | 	mov	arg02, ##@LR__5462
04d8c     13 13 02 F6 | 	mov	arg01, local01
04d90     A4 33 B2 FD | 	call	#__system___string_cmp
04d94     00 FA 0D F2 | 	cmp	result1, #0 wz
04d98     C4 00 90 AD |  if_e	jmp	#LR__0309
04d9c     B1 01 00 FF 
04da0     C7 14 06 F6 | 	mov	arg02, ##@LR__5463
04da4     13 13 02 F6 | 	mov	arg01, local01
04da8     8C 33 B2 FD | 	call	#__system___string_cmp
04dac     00 FA 0D F2 | 	cmp	result1, #0 wz
04db0     B4 00 90 AD |  if_e	jmp	#LR__0310
04db4     B1 01 00 FF 
04db8     C9 14 06 F6 | 	mov	arg02, ##@LR__5464
04dbc     13 13 02 F6 | 	mov	arg01, local01
04dc0     74 33 B2 FD | 	call	#__system___string_cmp
04dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc8     A4 00 90 AD |  if_e	jmp	#LR__0311
04dcc     B1 01 00 FF 
04dd0     CB 14 06 F6 | 	mov	arg02, ##@LR__5465
04dd4     13 13 02 F6 | 	mov	arg01, local01
04dd8     5C 33 B2 FD | 	call	#__system___string_cmp
04ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
04de0     94 00 90 AD |  if_e	jmp	#LR__0312
04de4     B1 01 00 FF 
04de8     CD 14 06 F6 | 	mov	arg02, ##@LR__5466
04dec     13 13 02 F6 | 	mov	arg01, local01
04df0     44 33 B2 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     84 00 90 AD |  if_e	jmp	#LR__0313
04dfc     B1 01 00 FF 
04e00     CF 14 06 F6 | 	mov	arg02, ##@LR__5467
04e04     13 13 02 F6 | 	mov	arg01, local01
04e08     2C 33 B2 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     74 00 90 AD |  if_e	jmp	#LR__0314
04e14     78 00 90 FD | 	jmp	#LR__0315
04e18                 | LR__0300
04e18     01 FA 05 F6 | 	mov	result1, #1
04e1c     74 00 90 FD | 	jmp	#LR__0316
04e20                 | LR__0301
04e20     02 FA 05 F6 | 	mov	result1, #2
04e24     6C 00 90 FD | 	jmp	#LR__0316
04e28                 | LR__0302
04e28     1B FA 05 F6 | 	mov	result1, #27
04e2c     64 00 90 FD | 	jmp	#LR__0316
04e30                 | LR__0303
04e30     11 FA 05 F6 | 	mov	result1, #17
04e34     5C 00 90 FD | 	jmp	#LR__0316
04e38                 | LR__0304
04e38     05 FA 05 F6 | 	mov	result1, #5
04e3c     54 00 90 FD | 	jmp	#LR__0316
04e40                 | LR__0305
04e40     06 FA 05 F6 | 	mov	result1, #6
04e44     4C 00 90 FD | 	jmp	#LR__0316
04e48                 | LR__0306
04e48     12 FA 05 F6 | 	mov	result1, #18
04e4c     44 00 90 FD | 	jmp	#LR__0316
04e50                 | LR__0307
04e50     13 FA 05 F6 | 	mov	result1, #19
04e54     3C 00 90 FD | 	jmp	#LR__0316
04e58                 | LR__0308
04e58     0C FA 05 F6 | 	mov	result1, #12
04e5c     34 00 90 FD | 	jmp	#LR__0316
04e60                 | LR__0309
04e60     14 FA 05 F6 | 	mov	result1, #20
04e64     2C 00 90 FD | 	jmp	#LR__0316
04e68                 | LR__0310
04e68     15 FA 05 F6 | 	mov	result1, #21
04e6c     24 00 90 FD | 	jmp	#LR__0316
04e70                 | LR__0311
04e70     16 FA 05 F6 | 	mov	result1, #22
04e74     1C 00 90 FD | 	jmp	#LR__0316
04e78                 | LR__0312
04e78     FF FB 05 F6 | 	mov	result1, #511
04e7c     14 00 90 FD | 	jmp	#LR__0316
04e80                 | LR__0313
04e80     0F FA 05 F6 | 	mov	result1, #15
04e84     0C 00 90 FD | 	jmp	#LR__0316
04e88                 | LR__0314
04e88     10 FA 05 F6 | 	mov	result1, #16
04e8c     04 00 90 FD | 	jmp	#LR__0316
04e90                 | LR__0315
04e90     00 FA 05 F6 | 	mov	result1, #0
04e94                 | LR__0316
04e94     A7 F0 03 F6 | 	mov	ptra, fp
04e98     B2 00 A0 FD | 	call	#popregs_
04e9c                 | _isseparator_ret
04e9c     2D 00 64 FD | 	ret
04ea0                 | 
04ea0                 | ' 
04ea0                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04ea0                 | ' 
04ea0                 | ' function iscommand(s as string) as ubyte
04ea0                 | _iscommand
04ea0     01 4A 05 F6 | 	mov	COUNT_, #1
04ea4     A8 00 A0 FD | 	call	#pushregs_
04ea8                 | ' 
04ea8                 | ' select case s
04ea8     09 27 02 F6 | 	mov	local01, arg01
04eac     B1 01 00 FF 
04eb0     D3 14 06 F6 | 	mov	arg02, ##@LR__5469
04eb4     13 13 02 F6 | 	mov	arg01, local01
04eb8     7C 32 B2 FD | 	call	#__system___string_cmp
04ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec0     DC 0C 90 AD |  if_e	jmp	#LR__0320
04ec4     B1 01 00 FF 
04ec8     D8 14 06 F6 | 	mov	arg02, ##@LR__5470
04ecc     13 13 02 F6 | 	mov	arg01, local01
04ed0     64 32 B2 FD | 	call	#__system___string_cmp
04ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed8     CC 0C 90 AD |  if_e	jmp	#LR__0321
04edc     B1 01 00 FF 
04ee0     DB 14 06 F6 | 	mov	arg02, ##@LR__5471
04ee4     13 13 02 F6 | 	mov	arg01, local01
04ee8     4C 32 B2 FD | 	call	#__system___string_cmp
04eec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef0     BC 0C 90 AD |  if_e	jmp	#LR__0322
04ef4     B1 01 00 FF 
04ef8     E0 14 06 F6 | 	mov	arg02, ##@LR__5472
04efc     13 13 02 F6 | 	mov	arg01, local01
04f00     34 32 B2 FD | 	call	#__system___string_cmp
04f04     00 FA 0D F2 | 	cmp	result1, #0 wz
04f08     AC 0C 90 AD |  if_e	jmp	#LR__0323
04f0c     B1 01 00 FF 
04f10     E4 14 06 F6 | 	mov	arg02, ##@LR__5473
04f14     13 13 02 F6 | 	mov	arg01, local01
04f18     1C 32 B2 FD | 	call	#__system___string_cmp
04f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f20     9C 0C 90 AD |  if_e	jmp	#LR__0324
04f24     B1 01 00 FF 
04f28     E9 14 06 F6 | 	mov	arg02, ##@LR__5474
04f2c     13 13 02 F6 | 	mov	arg01, local01
04f30     04 32 B2 FD | 	call	#__system___string_cmp
04f34     00 FA 0D F2 | 	cmp	result1, #0 wz
04f38     8C 0C 90 AD |  if_e	jmp	#LR__0325
04f3c     B1 01 00 FF 
04f40     ED 14 06 F6 | 	mov	arg02, ##@LR__5475
04f44     13 13 02 F6 | 	mov	arg01, local01
04f48     EC 31 B2 FD | 	call	#__system___string_cmp
04f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f50     7C 0C 90 AD |  if_e	jmp	#LR__0326
04f54     B1 01 00 FF 
04f58     F0 14 06 F6 | 	mov	arg02, ##@LR__5476
04f5c     13 13 02 F6 | 	mov	arg01, local01
04f60     D4 31 B2 FD | 	call	#__system___string_cmp
04f64     00 FA 0D F2 | 	cmp	result1, #0 wz
04f68     6C 0C 90 AD |  if_e	jmp	#LR__0327
04f6c     B1 01 00 FF 
04f70     FB 14 06 F6 | 	mov	arg02, ##@LR__5477
04f74     13 13 02 F6 | 	mov	arg01, local01
04f78     BC 31 B2 FD | 	call	#__system___string_cmp
04f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f80     5C 0C 90 AD |  if_e	jmp	#LR__0328
04f84     B1 01 00 FF 
04f88     FF 14 06 F6 | 	mov	arg02, ##@LR__5478
04f8c     13 13 02 F6 | 	mov	arg01, local01
04f90     A4 31 B2 FD | 	call	#__system___string_cmp
04f94     00 FA 0D F2 | 	cmp	result1, #0 wz
04f98     4C 0C 90 AD |  if_e	jmp	#LR__0329
04f9c     B1 01 00 FF 
04fa0     09 15 06 F6 | 	mov	arg02, ##@LR__5479
04fa4     13 13 02 F6 | 	mov	arg01, local01
04fa8     8C 31 B2 FD | 	call	#__system___string_cmp
04fac     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb0     3C 0C 90 AD |  if_e	jmp	#LR__0330
04fb4     B1 01 00 FF 
04fb8     0D 15 06 F6 | 	mov	arg02, ##@LR__5480
04fbc     13 13 02 F6 | 	mov	arg01, local01
04fc0     74 31 B2 FD | 	call	#__system___string_cmp
04fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc8     2C 0C 90 AD |  if_e	jmp	#LR__0331
04fcc     B1 01 00 FF 
04fd0     17 15 06 F6 | 	mov	arg02, ##@LR__5481
04fd4     13 13 02 F6 | 	mov	arg01, local01
04fd8     5C 31 B2 FD | 	call	#__system___string_cmp
04fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe0     1C 0C 90 AD |  if_e	jmp	#LR__0332
04fe4     B1 01 00 FF 
04fe8     1B 15 06 F6 | 	mov	arg02, ##@LR__5482
04fec     13 13 02 F6 | 	mov	arg01, local01
04ff0     44 31 B2 FD | 	call	#__system___string_cmp
04ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff8     0C 0C 90 AD |  if_e	jmp	#LR__0333
04ffc     B1 01 00 FF 
05000     26 15 06 F6 | 	mov	arg02, ##@LR__5483
05004     13 13 02 F6 | 	mov	arg01, local01
05008     2C 31 B2 FD | 	call	#__system___string_cmp
0500c     00 FA 0D F2 | 	cmp	result1, #0 wz
05010     FC 0B 90 AD |  if_e	jmp	#LR__0334
05014     B1 01 00 FF 
05018     2A 15 06 F6 | 	mov	arg02, ##@LR__5484
0501c     13 13 02 F6 | 	mov	arg01, local01
05020     14 31 B2 FD | 	call	#__system___string_cmp
05024     00 FA 0D F2 | 	cmp	result1, #0 wz
05028     EC 0B 90 AD |  if_e	jmp	#LR__0335
0502c     B1 01 00 FF 
05030     31 15 06 F6 | 	mov	arg02, ##@LR__5485
05034     13 13 02 F6 | 	mov	arg01, local01
05038     FC 30 B2 FD | 	call	#__system___string_cmp
0503c     00 FA 0D F2 | 	cmp	result1, #0 wz
05040     DC 0B 90 AD |  if_e	jmp	#LR__0336
05044     B1 01 00 FF 
05048     35 15 06 F6 | 	mov	arg02, ##@LR__5486
0504c     13 13 02 F6 | 	mov	arg01, local01
05050     E4 30 B2 FD | 	call	#__system___string_cmp
05054     00 FA 0D F2 | 	cmp	result1, #0 wz
05058     CC 0B 90 AD |  if_e	jmp	#LR__0337
0505c     B1 01 00 FF 
05060     3B 15 06 F6 | 	mov	arg02, ##@LR__5487
05064     13 13 02 F6 | 	mov	arg01, local01
05068     CC 30 B2 FD | 	call	#__system___string_cmp
0506c     00 FA 0D F2 | 	cmp	result1, #0 wz
05070     BC 0B 90 AD |  if_e	jmp	#LR__0338
05074     B1 01 00 FF 
05078     41 15 06 F6 | 	mov	arg02, ##@LR__5488
0507c     13 13 02 F6 | 	mov	arg01, local01
05080     B4 30 B2 FD | 	call	#__system___string_cmp
05084     00 FA 0D F2 | 	cmp	result1, #0 wz
05088     AC 0B 90 AD |  if_e	jmp	#LR__0339
0508c     B1 01 00 FF 
05090     45 15 06 F6 | 	mov	arg02, ##@LR__5489
05094     13 13 02 F6 | 	mov	arg01, local01
05098     9C 30 B2 FD | 	call	#__system___string_cmp
0509c     00 FA 0D F2 | 	cmp	result1, #0 wz
050a0     9C 0B 90 AD |  if_e	jmp	#LR__0340
050a4     B1 01 00 FF 
050a8     4D 15 06 F6 | 	mov	arg02, ##@LR__5490
050ac     13 13 02 F6 | 	mov	arg01, local01
050b0     84 30 B2 FD | 	call	#__system___string_cmp
050b4     00 FA 0D F2 | 	cmp	result1, #0 wz
050b8     8C 0B 90 AD |  if_e	jmp	#LR__0341
050bc     B1 01 00 FF 
050c0     53 15 06 F6 | 	mov	arg02, ##@LR__5491
050c4     13 13 02 F6 | 	mov	arg01, local01
050c8     6C 30 B2 FD | 	call	#__system___string_cmp
050cc     00 FA 0D F2 | 	cmp	result1, #0 wz
050d0     7C 0B 90 AD |  if_e	jmp	#LR__0342
050d4     B1 01 00 FF 
050d8     56 15 06 F6 | 	mov	arg02, ##@LR__5492
050dc     13 13 02 F6 | 	mov	arg01, local01
050e0     54 30 B2 FD | 	call	#__system___string_cmp
050e4     00 FA 0D F2 | 	cmp	result1, #0 wz
050e8     6C 0B 90 AD |  if_e	jmp	#LR__0343
050ec     B1 01 00 FF 
050f0     5B 15 06 F6 | 	mov	arg02, ##@LR__5493
050f4     13 13 02 F6 | 	mov	arg01, local01
050f8     3C 30 B2 FD | 	call	#__system___string_cmp
050fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05100     5C 0B 90 AD |  if_e	jmp	#LR__0344
05104     B1 01 00 FF 
05108     62 15 06 F6 | 	mov	arg02, ##@LR__5494
0510c     13 13 02 F6 | 	mov	arg01, local01
05110     24 30 B2 FD | 	call	#__system___string_cmp
05114     00 FA 0D F2 | 	cmp	result1, #0 wz
05118     4C 0B 90 AD |  if_e	jmp	#LR__0345
0511c     B1 01 00 FF 
05120     67 15 06 F6 | 	mov	arg02, ##@LR__5495
05124     13 13 02 F6 | 	mov	arg01, local01
05128     0C 30 B2 FD | 	call	#__system___string_cmp
0512c     00 FA 0D F2 | 	cmp	result1, #0 wz
05130     3C 0B 90 AD |  if_e	jmp	#LR__0346
05134     B1 01 00 FF 
05138     6F 15 06 F6 | 	mov	arg02, ##@LR__5496
0513c     13 13 02 F6 | 	mov	arg01, local01
05140     F4 2F B2 FD | 	call	#__system___string_cmp
05144     00 FA 0D F2 | 	cmp	result1, #0 wz
05148     2C 0B 90 AD |  if_e	jmp	#LR__0347
0514c     B1 01 00 FF 
05150     76 15 06 F6 | 	mov	arg02, ##@LR__5497
05154     13 13 02 F6 | 	mov	arg01, local01
05158     DC 2F B2 FD | 	call	#__system___string_cmp
0515c     00 FA 0D F2 | 	cmp	result1, #0 wz
05160     1C 0B 90 AD |  if_e	jmp	#LR__0348
05164     B1 01 00 FF 
05168     7D 15 06 F6 | 	mov	arg02, ##@LR__5498
0516c     13 13 02 F6 | 	mov	arg01, local01
05170     C4 2F B2 FD | 	call	#__system___string_cmp
05174     00 FA 0D F2 | 	cmp	result1, #0 wz
05178     0C 0B 90 AD |  if_e	jmp	#LR__0349
0517c     B1 01 00 FF 
05180     87 15 06 F6 | 	mov	arg02, ##@LR__5499
05184     13 13 02 F6 | 	mov	arg01, local01
05188     AC 2F B2 FD | 	call	#__system___string_cmp
0518c     00 FA 0D F2 | 	cmp	result1, #0 wz
05190     FC 0A 90 AD |  if_e	jmp	#LR__0350
05194     B1 01 00 FF 
05198     8B 15 06 F6 | 	mov	arg02, ##@LR__5500
0519c     13 13 02 F6 | 	mov	arg01, local01
051a0     94 2F B2 FD | 	call	#__system___string_cmp
051a4     00 FA 0D F2 | 	cmp	result1, #0 wz
051a8     EC 0A 90 AD |  if_e	jmp	#LR__0351
051ac     B1 01 00 FF 
051b0     8F 15 06 F6 | 	mov	arg02, ##@LR__5501
051b4     13 13 02 F6 | 	mov	arg01, local01
051b8     7C 2F B2 FD | 	call	#__system___string_cmp
051bc     00 FA 0D F2 | 	cmp	result1, #0 wz
051c0     DC 0A 90 AD |  if_e	jmp	#LR__0352
051c4     B1 01 00 FF 
051c8     96 15 06 F6 | 	mov	arg02, ##@LR__5502
051cc     13 13 02 F6 | 	mov	arg01, local01
051d0     64 2F B2 FD | 	call	#__system___string_cmp
051d4     00 FA 0D F2 | 	cmp	result1, #0 wz
051d8     CC 0A 90 AD |  if_e	jmp	#LR__0353
051dc     B1 01 00 FF 
051e0     9A 15 06 F6 | 	mov	arg02, ##@LR__5503
051e4     13 13 02 F6 | 	mov	arg01, local01
051e8     4C 2F B2 FD | 	call	#__system___string_cmp
051ec     00 FA 0D F2 | 	cmp	result1, #0 wz
051f0     BC 0A 90 AD |  if_e	jmp	#LR__0354
051f4     B1 01 00 FF 
051f8     9E 15 06 F6 | 	mov	arg02, ##@LR__5504
051fc     13 13 02 F6 | 	mov	arg01, local01
05200     34 2F B2 FD | 	call	#__system___string_cmp
05204     00 FA 0D F2 | 	cmp	result1, #0 wz
05208     AC 0A 90 AD |  if_e	jmp	#LR__0355
0520c     B1 01 00 FF 
05210     A4 15 06 F6 | 	mov	arg02, ##@LR__5505
05214     13 13 02 F6 | 	mov	arg01, local01
05218     1C 2F B2 FD | 	call	#__system___string_cmp
0521c     00 FA 0D F2 | 	cmp	result1, #0 wz
05220     9C 0A 90 AD |  if_e	jmp	#LR__0356
05224     B1 01 00 FF 
05228     A9 15 06 F6 | 	mov	arg02, ##@LR__5506
0522c     13 13 02 F6 | 	mov	arg01, local01
05230     04 2F B2 FD | 	call	#__system___string_cmp
05234     00 FA 0D F2 | 	cmp	result1, #0 wz
05238     8C 0A 90 AD |  if_e	jmp	#LR__0357
0523c     B1 01 00 FF 
05240     B0 15 06 F6 | 	mov	arg02, ##@LR__5507
05244     13 13 02 F6 | 	mov	arg01, local01
05248     EC 2E B2 FD | 	call	#__system___string_cmp
0524c     00 FA 0D F2 | 	cmp	result1, #0 wz
05250     7C 0A 90 AD |  if_e	jmp	#LR__0358
05254     B1 01 00 FF 
05258     B4 15 06 F6 | 	mov	arg02, ##@LR__5508
0525c     13 13 02 F6 | 	mov	arg01, local01
05260     D4 2E B2 FD | 	call	#__system___string_cmp
05264     00 FA 0D F2 | 	cmp	result1, #0 wz
05268     6C 0A 90 AD |  if_e	jmp	#LR__0359
0526c     B1 01 00 FF 
05270     B9 15 06 F6 | 	mov	arg02, ##@LR__5509
05274     13 13 02 F6 | 	mov	arg01, local01
05278     BC 2E B2 FD | 	call	#__system___string_cmp
0527c     00 FA 0D F2 | 	cmp	result1, #0 wz
05280     5C 0A 90 AD |  if_e	jmp	#LR__0360
05284     B1 01 00 FF 
05288     BD 15 06 F6 | 	mov	arg02, ##@LR__5510
0528c     13 13 02 F6 | 	mov	arg01, local01
05290     A4 2E B2 FD | 	call	#__system___string_cmp
05294     00 FA 0D F2 | 	cmp	result1, #0 wz
05298     4C 0A 90 AD |  if_e	jmp	#LR__0361
0529c     B1 01 00 FF 
052a0     C3 15 06 F6 | 	mov	arg02, ##@LR__5511
052a4     13 13 02 F6 | 	mov	arg01, local01
052a8     8C 2E B2 FD | 	call	#__system___string_cmp
052ac     00 FA 0D F2 | 	cmp	result1, #0 wz
052b0     3C 0A 90 AD |  if_e	jmp	#LR__0362
052b4     B1 01 00 FF 
052b8     C6 15 06 F6 | 	mov	arg02, ##@LR__5512
052bc     13 13 02 F6 | 	mov	arg01, local01
052c0     74 2E B2 FD | 	call	#__system___string_cmp
052c4     00 FA 0D F2 | 	cmp	result1, #0 wz
052c8     2C 0A 90 AD |  if_e	jmp	#LR__0363
052cc     B1 01 00 FF 
052d0     CE 15 06 F6 | 	mov	arg02, ##@LR__5513
052d4     13 13 02 F6 | 	mov	arg01, local01
052d8     5C 2E B2 FD | 	call	#__system___string_cmp
052dc     00 FA 0D F2 | 	cmp	result1, #0 wz
052e0     1C 0A 90 AD |  if_e	jmp	#LR__0364
052e4     B1 01 00 FF 
052e8     D2 15 06 F6 | 	mov	arg02, ##@LR__5514
052ec     13 13 02 F6 | 	mov	arg01, local01
052f0     44 2E B2 FD | 	call	#__system___string_cmp
052f4     00 FA 0D F2 | 	cmp	result1, #0 wz
052f8     0C 0A 90 AD |  if_e	jmp	#LR__0365
052fc     B1 01 00 FF 
05300     D7 15 06 F6 | 	mov	arg02, ##@LR__5515
05304     13 13 02 F6 | 	mov	arg01, local01
05308     2C 2E B2 FD | 	call	#__system___string_cmp
0530c     00 FA 0D F2 | 	cmp	result1, #0 wz
05310     FC 09 90 AD |  if_e	jmp	#LR__0366
05314     B1 01 00 FF 
05318     DB 15 06 F6 | 	mov	arg02, ##@LR__5516
0531c     13 13 02 F6 | 	mov	arg01, local01
05320     14 2E B2 FD | 	call	#__system___string_cmp
05324     00 FA 0D F2 | 	cmp	result1, #0 wz
05328     EC 09 90 AD |  if_e	jmp	#LR__0367
0532c     B1 01 00 FF 
05330     E0 15 06 F6 | 	mov	arg02, ##@LR__5517
05334     13 13 02 F6 | 	mov	arg01, local01
05338     FC 2D B2 FD | 	call	#__system___string_cmp
0533c     00 FA 0D F2 | 	cmp	result1, #0 wz
05340     DC 09 90 AD |  if_e	jmp	#LR__0368
05344     B1 01 00 FF 
05348     E4 15 06 F6 | 	mov	arg02, ##@LR__5518
0534c     13 13 02 F6 | 	mov	arg01, local01
05350     E4 2D B2 FD | 	call	#__system___string_cmp
05354     00 FA 0D F2 | 	cmp	result1, #0 wz
05358     CC 09 90 AD |  if_e	jmp	#LR__0369
0535c     B1 01 00 FF 
05360     E7 15 06 F6 | 	mov	arg02, ##@LR__5519
05364     13 13 02 F6 | 	mov	arg01, local01
05368     CC 2D B2 FD | 	call	#__system___string_cmp
0536c     00 FA 0D F2 | 	cmp	result1, #0 wz
05370     BC 09 90 AD |  if_e	jmp	#LR__0370
05374     B1 01 00 FF 
05378     ED 15 06 F6 | 	mov	arg02, ##@LR__5520
0537c     13 13 02 F6 | 	mov	arg01, local01
05380     B4 2D B2 FD | 	call	#__system___string_cmp
05384     00 FA 0D F2 | 	cmp	result1, #0 wz
05388     AC 09 90 AD |  if_e	jmp	#LR__0371
0538c     B1 01 00 FF 
05390     F1 15 06 F6 | 	mov	arg02, ##@LR__5521
05394     13 13 02 F6 | 	mov	arg01, local01
05398     9C 2D B2 FD | 	call	#__system___string_cmp
0539c     00 FA 0D F2 | 	cmp	result1, #0 wz
053a0     9C 09 90 AD |  if_e	jmp	#LR__0372
053a4     B1 01 00 FF 
053a8     F5 15 06 F6 | 	mov	arg02, ##@LR__5522
053ac     13 13 02 F6 | 	mov	arg01, local01
053b0     84 2D B2 FD | 	call	#__system___string_cmp
053b4     00 FA 0D F2 | 	cmp	result1, #0 wz
053b8     8C 09 90 AD |  if_e	jmp	#LR__0373
053bc     B1 01 00 FF 
053c0     FB 15 06 F6 | 	mov	arg02, ##@LR__5523
053c4     13 13 02 F6 | 	mov	arg01, local01
053c8     6C 2D B2 FD | 	call	#__system___string_cmp
053cc     00 FA 0D F2 | 	cmp	result1, #0 wz
053d0     7C 09 90 AD |  if_e	jmp	#LR__0374
053d4     B2 01 00 FF 
053d8     00 14 06 F6 | 	mov	arg02, ##@LR__5524
053dc     13 13 02 F6 | 	mov	arg01, local01
053e0     54 2D B2 FD | 	call	#__system___string_cmp
053e4     00 FA 0D F2 | 	cmp	result1, #0 wz
053e8     6C 09 90 AD |  if_e	jmp	#LR__0375
053ec     B2 01 00 FF 
053f0     03 14 06 F6 | 	mov	arg02, ##@LR__5525
053f4     13 13 02 F6 | 	mov	arg01, local01
053f8     3C 2D B2 FD | 	call	#__system___string_cmp
053fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05400     5C 09 90 AD |  if_e	jmp	#LR__0376
05404     B2 01 00 FF 
05408     06 14 06 F6 | 	mov	arg02, ##@LR__5526
0540c     13 13 02 F6 | 	mov	arg01, local01
05410     24 2D B2 FD | 	call	#__system___string_cmp
05414     00 FA 0D F2 | 	cmp	result1, #0 wz
05418     4C 09 90 AD |  if_e	jmp	#LR__0377
0541c     B2 01 00 FF 
05420     0A 14 06 F6 | 	mov	arg02, ##@LR__5527
05424     13 13 02 F6 | 	mov	arg01, local01
05428     0C 2D B2 FD | 	call	#__system___string_cmp
0542c     00 FA 0D F2 | 	cmp	result1, #0 wz
05430     3C 09 90 AD |  if_e	jmp	#LR__0378
05434     B2 01 00 FF 
05438     0D 14 06 F6 | 	mov	arg02, ##@LR__5528
0543c     13 13 02 F6 | 	mov	arg01, local01
05440     F4 2C B2 FD | 	call	#__system___string_cmp
05444     00 FA 0D F2 | 	cmp	result1, #0 wz
05448     2C 09 90 AD |  if_e	jmp	#LR__0379
0544c     B2 01 00 FF 
05450     13 14 06 F6 | 	mov	arg02, ##@LR__5529
05454     13 13 02 F6 | 	mov	arg01, local01
05458     DC 2C B2 FD | 	call	#__system___string_cmp
0545c     00 FA 0D F2 | 	cmp	result1, #0 wz
05460     1C 09 90 AD |  if_e	jmp	#LR__0380
05464     B2 01 00 FF 
05468     18 14 06 F6 | 	mov	arg02, ##@LR__5530
0546c     13 13 02 F6 | 	mov	arg01, local01
05470     C4 2C B2 FD | 	call	#__system___string_cmp
05474     00 FA 0D F2 | 	cmp	result1, #0 wz
05478     0C 09 90 AD |  if_e	jmp	#LR__0381
0547c     B2 01 00 FF 
05480     1B 14 06 F6 | 	mov	arg02, ##@LR__5531
05484     13 13 02 F6 | 	mov	arg01, local01
05488     AC 2C B2 FD | 	call	#__system___string_cmp
0548c     00 FA 0D F2 | 	cmp	result1, #0 wz
05490     FC 08 90 AD |  if_e	jmp	#LR__0382
05494     B2 01 00 FF 
05498     20 14 06 F6 | 	mov	arg02, ##@LR__5532
0549c     13 13 02 F6 | 	mov	arg01, local01
054a0     94 2C B2 FD | 	call	#__system___string_cmp
054a4     00 FA 0D F2 | 	cmp	result1, #0 wz
054a8     EC 08 90 AD |  if_e	jmp	#LR__0383
054ac     B2 01 00 FF 
054b0     24 14 06 F6 | 	mov	arg02, ##@LR__5533
054b4     13 13 02 F6 | 	mov	arg01, local01
054b8     7C 2C B2 FD | 	call	#__system___string_cmp
054bc     00 FA 0D F2 | 	cmp	result1, #0 wz
054c0     DC 08 90 AD |  if_e	jmp	#LR__0384
054c4     B2 01 00 FF 
054c8     2A 14 06 F6 | 	mov	arg02, ##@LR__5534
054cc     13 13 02 F6 | 	mov	arg01, local01
054d0     64 2C B2 FD | 	call	#__system___string_cmp
054d4     00 FA 0D F2 | 	cmp	result1, #0 wz
054d8     CC 08 90 AD |  if_e	jmp	#LR__0385
054dc     B2 01 00 FF 
054e0     30 14 06 F6 | 	mov	arg02, ##@LR__5535
054e4     13 13 02 F6 | 	mov	arg01, local01
054e8     4C 2C B2 FD | 	call	#__system___string_cmp
054ec     00 FA 0D F2 | 	cmp	result1, #0 wz
054f0     BC 08 90 AD |  if_e	jmp	#LR__0386
054f4     B2 01 00 FF 
054f8     35 14 06 F6 | 	mov	arg02, ##@LR__5536
054fc     13 13 02 F6 | 	mov	arg01, local01
05500     34 2C B2 FD | 	call	#__system___string_cmp
05504     00 FA 0D F2 | 	cmp	result1, #0 wz
05508     AC 08 90 AD |  if_e	jmp	#LR__0387
0550c     B2 01 00 FF 
05510     38 14 06 F6 | 	mov	arg02, ##@LR__5537
05514     13 13 02 F6 | 	mov	arg01, local01
05518     1C 2C B2 FD | 	call	#__system___string_cmp
0551c     00 FA 0D F2 | 	cmp	result1, #0 wz
05520     9C 08 90 AD |  if_e	jmp	#LR__0388
05524     B2 01 00 FF 
05528     3E 14 06 F6 | 	mov	arg02, ##@LR__5538
0552c     13 13 02 F6 | 	mov	arg01, local01
05530     04 2C B2 FD | 	call	#__system___string_cmp
05534     00 FA 0D F2 | 	cmp	result1, #0 wz
05538     8C 08 90 AD |  if_e	jmp	#LR__0389
0553c     B2 01 00 FF 
05540     42 14 06 F6 | 	mov	arg02, ##@LR__5539
05544     13 13 02 F6 | 	mov	arg01, local01
05548     EC 2B B2 FD | 	call	#__system___string_cmp
0554c     00 FA 0D F2 | 	cmp	result1, #0 wz
05550     7C 08 90 AD |  if_e	jmp	#LR__0390
05554     B2 01 00 FF 
05558     47 14 06 F6 | 	mov	arg02, ##@LR__5540
0555c     13 13 02 F6 | 	mov	arg01, local01
05560     D4 2B B2 FD | 	call	#__system___string_cmp
05564     00 FA 0D F2 | 	cmp	result1, #0 wz
05568     6C 08 90 AD |  if_e	jmp	#LR__0391
0556c     B2 01 00 FF 
05570     4A 14 06 F6 | 	mov	arg02, ##@LR__5541
05574     13 13 02 F6 | 	mov	arg01, local01
05578     BC 2B B2 FD | 	call	#__system___string_cmp
0557c     00 FA 0D F2 | 	cmp	result1, #0 wz
05580     5C 08 90 AD |  if_e	jmp	#LR__0392
05584     B2 01 00 FF 
05588     4D 14 06 F6 | 	mov	arg02, ##@LR__5542
0558c     13 13 02 F6 | 	mov	arg01, local01
05590     A4 2B B2 FD | 	call	#__system___string_cmp
05594     00 FA 0D F2 | 	cmp	result1, #0 wz
05598     4C 08 90 AD |  if_e	jmp	#LR__0393
0559c     B2 01 00 FF 
055a0     52 14 06 F6 | 	mov	arg02, ##@LR__5543
055a4     13 13 02 F6 | 	mov	arg01, local01
055a8     8C 2B B2 FD | 	call	#__system___string_cmp
055ac     00 FA 0D F2 | 	cmp	result1, #0 wz
055b0     3C 08 90 AD |  if_e	jmp	#LR__0394
055b4     B2 01 00 FF 
055b8     58 14 06 F6 | 	mov	arg02, ##@LR__5544
055bc     13 13 02 F6 | 	mov	arg01, local01
055c0     74 2B B2 FD | 	call	#__system___string_cmp
055c4     00 FA 0D F2 | 	cmp	result1, #0 wz
055c8     2C 08 90 AD |  if_e	jmp	#LR__0395
055cc     B2 01 00 FF 
055d0     5C 14 06 F6 | 	mov	arg02, ##@LR__5545
055d4     13 13 02 F6 | 	mov	arg01, local01
055d8     5C 2B B2 FD | 	call	#__system___string_cmp
055dc     00 FA 0D F2 | 	cmp	result1, #0 wz
055e0     1C 08 90 AD |  if_e	jmp	#LR__0396
055e4     B2 01 00 FF 
055e8     65 14 06 F6 | 	mov	arg02, ##@LR__5546
055ec     13 13 02 F6 | 	mov	arg01, local01
055f0     44 2B B2 FD | 	call	#__system___string_cmp
055f4     00 FA 0D F2 | 	cmp	result1, #0 wz
055f8     0C 08 90 AD |  if_e	jmp	#LR__0397
055fc     B2 01 00 FF 
05600     6B 14 06 F6 | 	mov	arg02, ##@LR__5547
05604     13 13 02 F6 | 	mov	arg01, local01
05608     2C 2B B2 FD | 	call	#__system___string_cmp
0560c     00 FA 0D F2 | 	cmp	result1, #0 wz
05610     FC 07 90 AD |  if_e	jmp	#LR__0398
05614     B2 01 00 FF 
05618     71 14 06 F6 | 	mov	arg02, ##@LR__5548
0561c     13 13 02 F6 | 	mov	arg01, local01
05620     14 2B B2 FD | 	call	#__system___string_cmp
05624     00 FA 0D F2 | 	cmp	result1, #0 wz
05628     EC 07 90 AD |  if_e	jmp	#LR__0399
0562c     B2 01 00 FF 
05630     7A 14 06 F6 | 	mov	arg02, ##@LR__5549
05634     13 13 02 F6 | 	mov	arg01, local01
05638     FC 2A B2 FD | 	call	#__system___string_cmp
0563c     00 FA 0D F2 | 	cmp	result1, #0 wz
05640     DC 07 90 AD |  if_e	jmp	#LR__0400
05644     B2 01 00 FF 
05648     84 14 06 F6 | 	mov	arg02, ##@LR__5550
0564c     13 13 02 F6 | 	mov	arg01, local01
05650     E4 2A B2 FD | 	call	#__system___string_cmp
05654     00 FA 0D F2 | 	cmp	result1, #0 wz
05658     CC 07 90 AD |  if_e	jmp	#LR__0401
0565c     B2 01 00 FF 
05660     8D 14 06 F6 | 	mov	arg02, ##@LR__5551
05664     13 13 02 F6 | 	mov	arg01, local01
05668     CC 2A B2 FD | 	call	#__system___string_cmp
0566c     00 FA 0D F2 | 	cmp	result1, #0 wz
05670     BC 07 90 AD |  if_e	jmp	#LR__0402
05674     B2 01 00 FF 
05678     92 14 06 F6 | 	mov	arg02, ##@LR__5552
0567c     13 13 02 F6 | 	mov	arg01, local01
05680     B4 2A B2 FD | 	call	#__system___string_cmp
05684     00 FA 0D F2 | 	cmp	result1, #0 wz
05688     AC 07 90 AD |  if_e	jmp	#LR__0403
0568c     B2 01 00 FF 
05690     95 14 06 F6 | 	mov	arg02, ##@LR__5553
05694     13 13 02 F6 | 	mov	arg01, local01
05698     9C 2A B2 FD | 	call	#__system___string_cmp
0569c     00 FA 0D F2 | 	cmp	result1, #0 wz
056a0     9C 07 90 AD |  if_e	jmp	#LR__0404
056a4     B2 01 00 FF 
056a8     9A 14 06 F6 | 	mov	arg02, ##@LR__5554
056ac     13 13 02 F6 | 	mov	arg01, local01
056b0     84 2A B2 FD | 	call	#__system___string_cmp
056b4     00 FA 0D F2 | 	cmp	result1, #0 wz
056b8     8C 07 90 AD |  if_e	jmp	#LR__0405
056bc     B2 01 00 FF 
056c0     9E 14 06 F6 | 	mov	arg02, ##@LR__5555
056c4     13 13 02 F6 | 	mov	arg01, local01
056c8     6C 2A B2 FD | 	call	#__system___string_cmp
056cc     00 FA 0D F2 | 	cmp	result1, #0 wz
056d0     7C 07 90 AD |  if_e	jmp	#LR__0406
056d4     B2 01 00 FF 
056d8     A3 14 06 F6 | 	mov	arg02, ##@LR__5556
056dc     13 13 02 F6 | 	mov	arg01, local01
056e0     54 2A B2 FD | 	call	#__system___string_cmp
056e4     00 FA 0D F2 | 	cmp	result1, #0 wz
056e8     6C 07 90 AD |  if_e	jmp	#LR__0407
056ec     B2 01 00 FF 
056f0     A7 14 06 F6 | 	mov	arg02, ##@LR__5557
056f4     13 13 02 F6 | 	mov	arg01, local01
056f8     3C 2A B2 FD | 	call	#__system___string_cmp
056fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05700     5C 07 90 AD |  if_e	jmp	#LR__0408
05704     B2 01 00 FF 
05708     B0 14 06 F6 | 	mov	arg02, ##@LR__5558
0570c     13 13 02 F6 | 	mov	arg01, local01
05710     24 2A B2 FD | 	call	#__system___string_cmp
05714     00 FA 0D F2 | 	cmp	result1, #0 wz
05718     4C 07 90 AD |  if_e	jmp	#LR__0409
0571c     B2 01 00 FF 
05720     B5 14 06 F6 | 	mov	arg02, ##@LR__5559
05724     13 13 02 F6 | 	mov	arg01, local01
05728     0C 2A B2 FD | 	call	#__system___string_cmp
0572c     00 FA 0D F2 | 	cmp	result1, #0 wz
05730     3C 07 90 AD |  if_e	jmp	#LR__0410
05734     B2 01 00 FF 
05738     BB 14 06 F6 | 	mov	arg02, ##@LR__5560
0573c     13 13 02 F6 | 	mov	arg01, local01
05740     F4 29 B2 FD | 	call	#__system___string_cmp
05744     00 FA 0D F2 | 	cmp	result1, #0 wz
05748     2C 07 90 AD |  if_e	jmp	#LR__0411
0574c     B2 01 00 FF 
05750     BD 14 06 F6 | 	mov	arg02, ##@LR__5561
05754     13 13 02 F6 | 	mov	arg01, local01
05758     DC 29 B2 FD | 	call	#__system___string_cmp
0575c     00 FA 0D F2 | 	cmp	result1, #0 wz
05760     1C 07 90 AD |  if_e	jmp	#LR__0412
05764     B2 01 00 FF 
05768     C1 14 06 F6 | 	mov	arg02, ##@LR__5562
0576c     13 13 02 F6 | 	mov	arg01, local01
05770     C4 29 B2 FD | 	call	#__system___string_cmp
05774     00 FA 0D F2 | 	cmp	result1, #0 wz
05778     0C 07 90 AD |  if_e	jmp	#LR__0413
0577c     B2 01 00 FF 
05780     C5 14 06 F6 | 	mov	arg02, ##@LR__5563
05784     13 13 02 F6 | 	mov	arg01, local01
05788     AC 29 B2 FD | 	call	#__system___string_cmp
0578c     00 FA 0D F2 | 	cmp	result1, #0 wz
05790     FC 06 90 AD |  if_e	jmp	#LR__0414
05794     B2 01 00 FF 
05798     CA 14 06 F6 | 	mov	arg02, ##@LR__5564
0579c     13 13 02 F6 | 	mov	arg01, local01
057a0     94 29 B2 FD | 	call	#__system___string_cmp
057a4     00 FA 0D F2 | 	cmp	result1, #0 wz
057a8     EC 06 90 AD |  if_e	jmp	#LR__0415
057ac     B2 01 00 FF 
057b0     D2 14 06 F6 | 	mov	arg02, ##@LR__5565
057b4     13 13 02 F6 | 	mov	arg01, local01
057b8     7C 29 B2 FD | 	call	#__system___string_cmp
057bc     00 FA 0D F2 | 	cmp	result1, #0 wz
057c0     DC 06 90 AD |  if_e	jmp	#LR__0416
057c4     B2 01 00 FF 
057c8     D6 14 06 F6 | 	mov	arg02, ##@LR__5566
057cc     13 13 02 F6 | 	mov	arg01, local01
057d0     64 29 B2 FD | 	call	#__system___string_cmp
057d4     00 FA 0D F2 | 	cmp	result1, #0 wz
057d8     CC 06 90 AD |  if_e	jmp	#LR__0417
057dc     B2 01 00 FF 
057e0     D8 14 06 F6 | 	mov	arg02, ##@LR__5567
057e4     13 13 02 F6 | 	mov	arg01, local01
057e8     4C 29 B2 FD | 	call	#__system___string_cmp
057ec     00 FA 0D F2 | 	cmp	result1, #0 wz
057f0     BC 06 90 AD |  if_e	jmp	#LR__0418
057f4     B2 01 00 FF 
057f8     E0 14 06 F6 | 	mov	arg02, ##@LR__5568
057fc     13 13 02 F6 | 	mov	arg01, local01
05800     34 29 B2 FD | 	call	#__system___string_cmp
05804     00 FA 0D F2 | 	cmp	result1, #0 wz
05808     AC 06 90 AD |  if_e	jmp	#LR__0419
0580c     B2 01 00 FF 
05810     EF 14 06 F6 | 	mov	arg02, ##@LR__5569
05814     13 13 02 F6 | 	mov	arg01, local01
05818     1C 29 B2 FD | 	call	#__system___string_cmp
0581c     00 FA 0D F2 | 	cmp	result1, #0 wz
05820     9C 06 90 AD |  if_e	jmp	#LR__0420
05824     B2 01 00 FF 
05828     F3 14 06 F6 | 	mov	arg02, ##@LR__5570
0582c     13 13 02 F6 | 	mov	arg01, local01
05830     04 29 B2 FD | 	call	#__system___string_cmp
05834     00 FA 0D F2 | 	cmp	result1, #0 wz
05838     8C 06 90 AD |  if_e	jmp	#LR__0421
0583c     B2 01 00 FF 
05840     FA 14 06 F6 | 	mov	arg02, ##@LR__5571
05844     13 13 02 F6 | 	mov	arg01, local01
05848     EC 28 B2 FD | 	call	#__system___string_cmp
0584c     00 FA 0D F2 | 	cmp	result1, #0 wz
05850     7C 06 90 AD |  if_e	jmp	#LR__0422
05854     B2 01 00 FF 
05858     FE 14 06 F6 | 	mov	arg02, ##@LR__5572
0585c     13 13 02 F6 | 	mov	arg01, local01
05860     D4 28 B2 FD | 	call	#__system___string_cmp
05864     00 FA 0D F2 | 	cmp	result1, #0 wz
05868     6C 06 90 AD |  if_e	jmp	#LR__0423
0586c     B2 01 00 FF 
05870     03 15 06 F6 | 	mov	arg02, ##@LR__5573
05874     13 13 02 F6 | 	mov	arg01, local01
05878     BC 28 B2 FD | 	call	#__system___string_cmp
0587c     00 FA 0D F2 | 	cmp	result1, #0 wz
05880     5C 06 90 AD |  if_e	jmp	#LR__0424
05884     B2 01 00 FF 
05888     06 15 06 F6 | 	mov	arg02, ##@LR__5574
0588c     13 13 02 F6 | 	mov	arg01, local01
05890     A4 28 B2 FD | 	call	#__system___string_cmp
05894     00 FA 0D F2 | 	cmp	result1, #0 wz
05898     4C 06 90 AD |  if_e	jmp	#LR__0425
0589c     B2 01 00 FF 
058a0     0F 15 06 F6 | 	mov	arg02, ##@LR__5575
058a4     13 13 02 F6 | 	mov	arg01, local01
058a8     8C 28 B2 FD | 	call	#__system___string_cmp
058ac     00 FA 0D F2 | 	cmp	result1, #0 wz
058b0     3C 06 90 AD |  if_e	jmp	#LR__0426
058b4     B2 01 00 FF 
058b8     13 15 06 F6 | 	mov	arg02, ##@LR__5576
058bc     13 13 02 F6 | 	mov	arg01, local01
058c0     74 28 B2 FD | 	call	#__system___string_cmp
058c4     00 FA 0D F2 | 	cmp	result1, #0 wz
058c8     2C 06 90 AD |  if_e	jmp	#LR__0427
058cc     B2 01 00 FF 
058d0     1C 15 06 F6 | 	mov	arg02, ##@LR__5577
058d4     13 13 02 F6 | 	mov	arg01, local01
058d8     5C 28 B2 FD | 	call	#__system___string_cmp
058dc     00 FA 0D F2 | 	cmp	result1, #0 wz
058e0     1C 06 90 AD |  if_e	jmp	#LR__0428
058e4     B2 01 00 FF 
058e8     20 15 06 F6 | 	mov	arg02, ##@LR__5578
058ec     13 13 02 F6 | 	mov	arg01, local01
058f0     44 28 B2 FD | 	call	#__system___string_cmp
058f4     00 FA 0D F2 | 	cmp	result1, #0 wz
058f8     0C 06 90 AD |  if_e	jmp	#LR__0429
058fc     B2 01 00 FF 
05900     27 15 06 F6 | 	mov	arg02, ##@LR__5579
05904     13 13 02 F6 | 	mov	arg01, local01
05908     2C 28 B2 FD | 	call	#__system___string_cmp
0590c     00 FA 0D F2 | 	cmp	result1, #0 wz
05910     FC 05 90 AD |  if_e	jmp	#LR__0430
05914     B2 01 00 FF 
05918     2B 15 06 F6 | 	mov	arg02, ##@LR__5580
0591c     13 13 02 F6 | 	mov	arg01, local01
05920     14 28 B2 FD | 	call	#__system___string_cmp
05924     00 FA 0D F2 | 	cmp	result1, #0 wz
05928     EC 05 90 AD |  if_e	jmp	#LR__0431
0592c     B2 01 00 FF 
05930     32 15 06 F6 | 	mov	arg02, ##@LR__5581
05934     13 13 02 F6 | 	mov	arg01, local01
05938     FC 27 B2 FD | 	call	#__system___string_cmp
0593c     00 FA 0D F2 | 	cmp	result1, #0 wz
05940     DC 05 90 AD |  if_e	jmp	#LR__0432
05944     B2 01 00 FF 
05948     36 15 06 F6 | 	mov	arg02, ##@LR__5582
0594c     13 13 02 F6 | 	mov	arg01, local01
05950     E4 27 B2 FD | 	call	#__system___string_cmp
05954     00 FA 0D F2 | 	cmp	result1, #0 wz
05958     CC 05 90 AD |  if_e	jmp	#LR__0433
0595c     B2 01 00 FF 
05960     3D 15 06 F6 | 	mov	arg02, ##@LR__5583
05964     13 13 02 F6 | 	mov	arg01, local01
05968     CC 27 B2 FD | 	call	#__system___string_cmp
0596c     00 FA 0D F2 | 	cmp	result1, #0 wz
05970     BC 05 90 AD |  if_e	jmp	#LR__0434
05974     B2 01 00 FF 
05978     41 15 06 F6 | 	mov	arg02, ##@LR__5584
0597c     13 13 02 F6 | 	mov	arg01, local01
05980     B4 27 B2 FD | 	call	#__system___string_cmp
05984     00 FA 0D F2 | 	cmp	result1, #0 wz
05988     AC 05 90 AD |  if_e	jmp	#LR__0435
0598c     B2 01 00 FF 
05990     4C 15 06 F6 | 	mov	arg02, ##@LR__5585
05994     13 13 02 F6 | 	mov	arg01, local01
05998     9C 27 B2 FD | 	call	#__system___string_cmp
0599c     00 FA 0D F2 | 	cmp	result1, #0 wz
059a0     9C 05 90 AD |  if_e	jmp	#LR__0436
059a4     B2 01 00 FF 
059a8     50 15 06 F6 | 	mov	arg02, ##@LR__5586
059ac     13 13 02 F6 | 	mov	arg01, local01
059b0     84 27 B2 FD | 	call	#__system___string_cmp
059b4     00 FA 0D F2 | 	cmp	result1, #0 wz
059b8     8C 05 90 AD |  if_e	jmp	#LR__0437
059bc     B2 01 00 FF 
059c0     57 15 06 F6 | 	mov	arg02, ##@LR__5587
059c4     13 13 02 F6 | 	mov	arg01, local01
059c8     6C 27 B2 FD | 	call	#__system___string_cmp
059cc     00 FA 0D F2 | 	cmp	result1, #0 wz
059d0     7C 05 90 AD |  if_e	jmp	#LR__0438
059d4     B2 01 00 FF 
059d8     5B 15 06 F6 | 	mov	arg02, ##@LR__5588
059dc     13 13 02 F6 | 	mov	arg01, local01
059e0     54 27 B2 FD | 	call	#__system___string_cmp
059e4     00 FA 0D F2 | 	cmp	result1, #0 wz
059e8     6C 05 90 AD |  if_e	jmp	#LR__0439
059ec     B2 01 00 FF 
059f0     63 15 06 F6 | 	mov	arg02, ##@LR__5589
059f4     13 13 02 F6 | 	mov	arg01, local01
059f8     3C 27 B2 FD | 	call	#__system___string_cmp
059fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05a00     5C 05 90 AD |  if_e	jmp	#LR__0440
05a04     B2 01 00 FF 
05a08     67 15 06 F6 | 	mov	arg02, ##@LR__5590
05a0c     13 13 02 F6 | 	mov	arg01, local01
05a10     24 27 B2 FD | 	call	#__system___string_cmp
05a14     00 FA 0D F2 | 	cmp	result1, #0 wz
05a18     4C 05 90 AD |  if_e	jmp	#LR__0441
05a1c     B2 01 00 FF 
05a20     6E 15 06 F6 | 	mov	arg02, ##@LR__5591
05a24     13 13 02 F6 | 	mov	arg01, local01
05a28     0C 27 B2 FD | 	call	#__system___string_cmp
05a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a30     3C 05 90 AD |  if_e	jmp	#LR__0442
05a34     B2 01 00 FF 
05a38     75 15 06 F6 | 	mov	arg02, ##@LR__5592
05a3c     13 13 02 F6 | 	mov	arg01, local01
05a40     F4 26 B2 FD | 	call	#__system___string_cmp
05a44     00 FA 0D F2 | 	cmp	result1, #0 wz
05a48     2C 05 90 AD |  if_e	jmp	#LR__0443
05a4c     B2 01 00 FF 
05a50     79 15 06 F6 | 	mov	arg02, ##@LR__5593
05a54     13 13 02 F6 | 	mov	arg01, local01
05a58     DC 26 B2 FD | 	call	#__system___string_cmp
05a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a60     1C 05 90 AD |  if_e	jmp	#LR__0444
05a64     B2 01 00 FF 
05a68     7F 15 06 F6 | 	mov	arg02, ##@LR__5594
05a6c     13 13 02 F6 | 	mov	arg01, local01
05a70     C4 26 B2 FD | 	call	#__system___string_cmp
05a74     00 FA 0D F2 | 	cmp	result1, #0 wz
05a78     0C 05 90 AD |  if_e	jmp	#LR__0445
05a7c     B2 01 00 FF 
05a80     83 15 06 F6 | 	mov	arg02, ##@LR__5595
05a84     13 13 02 F6 | 	mov	arg01, local01
05a88     AC 26 B2 FD | 	call	#__system___string_cmp
05a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a90     FC 04 90 AD |  if_e	jmp	#LR__0446
05a94     B2 01 00 FF 
05a98     8A 15 06 F6 | 	mov	arg02, ##@LR__5596
05a9c     13 13 02 F6 | 	mov	arg01, local01
05aa0     94 26 B2 FD | 	call	#__system___string_cmp
05aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05aa8     EC 04 90 AD |  if_e	jmp	#LR__0447
05aac     B2 01 00 FF 
05ab0     8F 15 06 F6 | 	mov	arg02, ##@LR__5597
05ab4     13 13 02 F6 | 	mov	arg01, local01
05ab8     7C 26 B2 FD | 	call	#__system___string_cmp
05abc     00 FA 0D F2 | 	cmp	result1, #0 wz
05ac0     DC 04 90 AD |  if_e	jmp	#LR__0448
05ac4     B2 01 00 FF 
05ac8     94 15 06 F6 | 	mov	arg02, ##@LR__5598
05acc     13 13 02 F6 | 	mov	arg01, local01
05ad0     64 26 B2 FD | 	call	#__system___string_cmp
05ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ad8     CC 04 90 AD |  if_e	jmp	#LR__0449
05adc     B2 01 00 FF 
05ae0     9B 15 06 F6 | 	mov	arg02, ##@LR__5599
05ae4     13 13 02 F6 | 	mov	arg01, local01
05ae8     4C 26 B2 FD | 	call	#__system___string_cmp
05aec     00 FA 0D F2 | 	cmp	result1, #0 wz
05af0     BC 04 90 AD |  if_e	jmp	#LR__0450
05af4     B2 01 00 FF 
05af8     9E 15 06 F6 | 	mov	arg02, ##@LR__5600
05afc     13 13 02 F6 | 	mov	arg01, local01
05b00     34 26 B2 FD | 	call	#__system___string_cmp
05b04     00 FA 0D F2 | 	cmp	result1, #0 wz
05b08     AC 04 90 AD |  if_e	jmp	#LR__0451
05b0c     B2 01 00 FF 
05b10     A8 15 06 F6 | 	mov	arg02, ##@LR__5601
05b14     13 13 02 F6 | 	mov	arg01, local01
05b18     1C 26 B2 FD | 	call	#__system___string_cmp
05b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b20     9C 04 90 AD |  if_e	jmp	#LR__0452
05b24     B2 01 00 FF 
05b28     AC 15 06 F6 | 	mov	arg02, ##@LR__5602
05b2c     13 13 02 F6 | 	mov	arg01, local01
05b30     04 26 B2 FD | 	call	#__system___string_cmp
05b34     00 FA 0D F2 | 	cmp	result1, #0 wz
05b38     8C 04 90 AD |  if_e	jmp	#LR__0453
05b3c     B2 01 00 FF 
05b40     B4 15 06 F6 | 	mov	arg02, ##@LR__5603
05b44     13 13 02 F6 | 	mov	arg01, local01
05b48     EC 25 B2 FD | 	call	#__system___string_cmp
05b4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b50     7C 04 90 AD |  if_e	jmp	#LR__0454
05b54     B2 01 00 FF 
05b58     B8 15 06 F6 | 	mov	arg02, ##@LR__5604
05b5c     13 13 02 F6 | 	mov	arg01, local01
05b60     D4 25 B2 FD | 	call	#__system___string_cmp
05b64     00 FA 0D F2 | 	cmp	result1, #0 wz
05b68     6C 04 90 AD |  if_e	jmp	#LR__0455
05b6c     B2 01 00 FF 
05b70     BE 15 06 F6 | 	mov	arg02, ##@LR__5605
05b74     13 13 02 F6 | 	mov	arg01, local01
05b78     BC 25 B2 FD | 	call	#__system___string_cmp
05b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b80     5C 04 90 AD |  if_e	jmp	#LR__0456
05b84     B2 01 00 FF 
05b88     C4 15 06 F6 | 	mov	arg02, ##@LR__5606
05b8c     13 13 02 F6 | 	mov	arg01, local01
05b90     A4 25 B2 FD | 	call	#__system___string_cmp
05b94     00 FA 0D F2 | 	cmp	result1, #0 wz
05b98     4C 04 90 AD |  if_e	jmp	#LR__0457
05b9c     50 04 90 FD | 	jmp	#LR__0458
05ba0                 | LR__0320
05ba0     5C FA 05 F6 | 	mov	result1, #92
05ba4     4C 04 90 FD | 	jmp	#LR__0459
05ba8                 | LR__0321
05ba8     5C FA 05 F6 | 	mov	result1, #92
05bac     44 04 90 FD | 	jmp	#LR__0459
05bb0                 | LR__0322
05bb0     B9 FA 05 F6 | 	mov	result1, #185
05bb4     3C 04 90 FD | 	jmp	#LR__0459
05bb8                 | LR__0323
05bb8     47 FA 05 F6 | 	mov	result1, #71
05bbc     34 04 90 FD | 	jmp	#LR__0459
05bc0                 | LR__0324
05bc0     59 FA 05 F6 | 	mov	result1, #89
05bc4     2C 04 90 FD | 	jmp	#LR__0459
05bc8                 | LR__0325
05bc8     59 FA 05 F6 | 	mov	result1, #89
05bcc     24 04 90 FD | 	jmp	#LR__0459
05bd0                 | LR__0326
05bd0     C3 FA 05 F6 | 	mov	result1, #195
05bd4     1C 04 90 FD | 	jmp	#LR__0459
05bd8                 | LR__0327
05bd8     AE FA 05 F6 | 	mov	result1, #174
05bdc     14 04 90 FD | 	jmp	#LR__0459
05be0                 | LR__0328
05be0     AE FA 05 F6 | 	mov	result1, #174
05be4     0C 04 90 FD | 	jmp	#LR__0459
05be8                 | LR__0329
05be8     B1 FA 05 F6 | 	mov	result1, #177
05bec     04 04 90 FD | 	jmp	#LR__0459
05bf0                 | LR__0330
05bf0     B1 FA 05 F6 | 	mov	result1, #177
05bf4     FC 03 90 FD | 	jmp	#LR__0459
05bf8                 | LR__0331
05bf8     AF FA 05 F6 | 	mov	result1, #175
05bfc     F4 03 90 FD | 	jmp	#LR__0459
05c00                 | LR__0332
05c00     AF FA 05 F6 | 	mov	result1, #175
05c04     EC 03 90 FD | 	jmp	#LR__0459
05c08                 | LR__0333
05c08     B0 FA 05 F6 | 	mov	result1, #176
05c0c     E4 03 90 FD | 	jmp	#LR__0459
05c10                 | LR__0334
05c10     B0 FA 05 F6 | 	mov	result1, #176
05c14     DC 03 90 FD | 	jmp	#LR__0459
05c18                 | LR__0335
05c18     45 FA 05 F6 | 	mov	result1, #69
05c1c     D4 03 90 FD | 	jmp	#LR__0459
05c20                 | LR__0336
05c20     45 FA 05 F6 | 	mov	result1, #69
05c24     CC 03 90 FD | 	jmp	#LR__0459
05c28                 | LR__0337
05c28     69 FA 05 F6 | 	mov	result1, #105
05c2c     C4 03 90 FD | 	jmp	#LR__0459
05c30                 | LR__0338
05c30     B4 FA 05 F6 | 	mov	result1, #180
05c34     BC 03 90 FD | 	jmp	#LR__0459
05c38                 | LR__0339
05c38     40 FA 05 F6 | 	mov	result1, #64
05c3c     B4 03 90 FD | 	jmp	#LR__0459
05c40                 | LR__0340
05c40     CF FA 05 F6 | 	mov	result1, #207
05c44     AC 03 90 FD | 	jmp	#LR__0459
05c48                 | LR__0341
05c48     49 FA 05 F6 | 	mov	result1, #73
05c4c     A4 03 90 FD | 	jmp	#LR__0459
05c50                 | LR__0342
05c50     49 FA 05 F6 | 	mov	result1, #73
05c54     9C 03 90 FD | 	jmp	#LR__0459
05c58                 | LR__0343
05c58     C4 FA 05 F6 | 	mov	result1, #196
05c5c     94 03 90 FD | 	jmp	#LR__0459
05c60                 | LR__0344
05c60     68 FA 05 F6 | 	mov	result1, #104
05c64     8C 03 90 FD | 	jmp	#LR__0459
05c68                 | LR__0345
05c68     B7 FA 05 F6 | 	mov	result1, #183
05c6c     84 03 90 FD | 	jmp	#LR__0459
05c70                 | LR__0346
05c70     D9 FA 05 F6 | 	mov	result1, #217
05c74     7C 03 90 FD | 	jmp	#LR__0459
05c78                 | LR__0347
05c78     73 FA 05 F6 | 	mov	result1, #115
05c7c     74 03 90 FD | 	jmp	#LR__0459
05c80                 | LR__0348
05c80     74 FA 05 F6 | 	mov	result1, #116
05c84     6C 03 90 FD | 	jmp	#LR__0459
05c88                 | LR__0349
05c88     6C FA 05 F6 | 	mov	result1, #108
05c8c     64 03 90 FD | 	jmp	#LR__0459
05c90                 | LR__0350
05c90     6C FA 05 F6 | 	mov	result1, #108
05c94     5C 03 90 FD | 	jmp	#LR__0459
05c98                 | LR__0351
05c98     89 FA 05 F6 | 	mov	result1, #137
05c9c     54 03 90 FD | 	jmp	#LR__0459
05ca0                 | LR__0352
05ca0     C2 FA 05 F6 | 	mov	result1, #194
05ca4     4C 03 90 FD | 	jmp	#LR__0459
05ca8                 | LR__0353
05ca8     72 FA 05 F6 | 	mov	result1, #114
05cac     44 03 90 FD | 	jmp	#LR__0459
05cb0                 | LR__0354
05cb0     5D FA 05 F6 | 	mov	result1, #93
05cb4     3C 03 90 FD | 	jmp	#LR__0459
05cb8                 | LR__0355
05cb8     96 FA 05 F6 | 	mov	result1, #150
05cbc     34 03 90 FD | 	jmp	#LR__0459
05cc0                 | LR__0356
05cc0     43 FA 05 F6 | 	mov	result1, #67
05cc4     2C 03 90 FD | 	jmp	#LR__0459
05cc8                 | LR__0357
05cc8     43 FA 05 F6 | 	mov	result1, #67
05ccc     24 03 90 FD | 	jmp	#LR__0459
05cd0                 | LR__0358
05cd0     43 FA 05 F6 | 	mov	result1, #67
05cd4     1C 03 90 FD | 	jmp	#LR__0459
05cd8                 | LR__0359
05cd8     5A FA 05 F6 | 	mov	result1, #90
05cdc     14 03 90 FD | 	jmp	#LR__0459
05ce0                 | LR__0360
05ce0     AB FA 05 F6 | 	mov	result1, #171
05ce4     0C 03 90 FD | 	jmp	#LR__0459
05ce8                 | LR__0361
05ce8     BD FA 05 F6 | 	mov	result1, #189
05cec     04 03 90 FD | 	jmp	#LR__0459
05cf0                 | LR__0362
05cf0     BD FA 05 F6 | 	mov	result1, #189
05cf4     FC 02 90 FD | 	jmp	#LR__0459
05cf8                 | LR__0363
05cf8     46 FA 05 F6 | 	mov	result1, #70
05cfc     F4 02 90 FD | 	jmp	#LR__0459
05d00                 | LR__0364
05d00     46 FA 05 F6 | 	mov	result1, #70
05d04     EC 02 90 FD | 	jmp	#LR__0459
05d08                 | LR__0365
05d08     71 FA 05 F6 | 	mov	result1, #113
05d0c     E4 02 90 FD | 	jmp	#LR__0459
05d10                 | LR__0366
05d10     71 FA 05 F6 | 	mov	result1, #113
05d14     DC 02 90 FD | 	jmp	#LR__0459
05d18                 | LR__0367
05d18     60 FA 05 F6 | 	mov	result1, #96
05d1c     D4 02 90 FD | 	jmp	#LR__0459
05d20                 | LR__0368
05d20     4A FA 05 F6 | 	mov	result1, #74
05d24     CC 02 90 FD | 	jmp	#LR__0459
05d28                 | LR__0369
05d28     4A FA 05 F6 | 	mov	result1, #74
05d2c     C4 02 90 FD | 	jmp	#LR__0459
05d30                 | LR__0370
05d30     48 FA 05 F6 | 	mov	result1, #72
05d34     BC 02 90 FD | 	jmp	#LR__0459
05d38                 | LR__0371
05d38     48 FA 05 F6 | 	mov	result1, #72
05d3c     B4 02 90 FD | 	jmp	#LR__0459
05d40                 | LR__0372
05d40     BB FA 05 F6 | 	mov	result1, #187
05d44     AC 02 90 FD | 	jmp	#LR__0459
05d48                 | LR__0373
05d48     A9 FA 05 F6 | 	mov	result1, #169
05d4c     A4 02 90 FD | 	jmp	#LR__0459
05d50                 | LR__0374
05d50     4E FA 05 F6 | 	mov	result1, #78
05d54     9C 02 90 FD | 	jmp	#LR__0459
05d58                 | LR__0375
05d58     4E FA 05 F6 | 	mov	result1, #78
05d5c     94 02 90 FD | 	jmp	#LR__0459
05d60                 | LR__0376
05d60     58 FA 05 F6 | 	mov	result1, #88
05d64     8C 02 90 FD | 	jmp	#LR__0459
05d68                 | LR__0377
05d68     5F FA 05 F6 | 	mov	result1, #95
05d6c     84 02 90 FD | 	jmp	#LR__0459
05d70                 | LR__0378
05d70     5F FA 05 F6 | 	mov	result1, #95
05d74     7C 02 90 FD | 	jmp	#LR__0459
05d78                 | LR__0379
05d78     B5 FA 05 F6 | 	mov	result1, #181
05d7c     74 02 90 FD | 	jmp	#LR__0459
05d80                 | LR__0380
05d80     4C FA 05 F6 | 	mov	result1, #76
05d84     6C 02 90 FD | 	jmp	#LR__0459
05d88                 | LR__0381
05d88     4C FA 05 F6 | 	mov	result1, #76
05d8c     64 02 90 FD | 	jmp	#LR__0459
05d90                 | LR__0382
05d90     52 FA 05 F6 | 	mov	result1, #82
05d94     5C 02 90 FD | 	jmp	#LR__0459
05d98                 | LR__0383
05d98     52 FA 05 F6 | 	mov	result1, #82
05d9c     54 02 90 FD | 	jmp	#LR__0459
05da0                 | LR__0384
05da0     97 FA 05 F6 | 	mov	result1, #151
05da4     4C 02 90 FD | 	jmp	#LR__0459
05da8                 | LR__0385
05da8     C6 FA 05 F6 | 	mov	result1, #198
05dac     44 02 90 FD | 	jmp	#LR__0459
05db0                 | LR__0386
05db0     61 FA 05 F6 | 	mov	result1, #97
05db4     3C 02 90 FD | 	jmp	#LR__0459
05db8                 | LR__0387
05db8     61 FA 05 F6 | 	mov	result1, #97
05dbc     34 02 90 FD | 	jmp	#LR__0459
05dc0                 | LR__0388
05dc0     63 FA 05 F6 | 	mov	result1, #99
05dc4     2C 02 90 FD | 	jmp	#LR__0459
05dc8                 | LR__0389
05dc8     41 FA 05 F6 | 	mov	result1, #65
05dcc     24 02 90 FD | 	jmp	#LR__0459
05dd0                 | LR__0390
05dd0     4B FA 05 F6 | 	mov	result1, #75
05dd4     1C 02 90 FD | 	jmp	#LR__0459
05dd8                 | LR__0391
05dd8     4B FA 05 F6 | 	mov	result1, #75
05ddc     14 02 90 FD | 	jmp	#LR__0459
05de0                 | LR__0392
05de0     C1 FA 05 F6 | 	mov	result1, #193
05de4     0C 02 90 FD | 	jmp	#LR__0459
05de8                 | LR__0393
05de8     B3 FA 05 F6 | 	mov	result1, #179
05dec     04 02 90 FD | 	jmp	#LR__0459
05df0                 | LR__0394
05df0     5E FA 05 F6 | 	mov	result1, #94
05df4     FC 01 90 FD | 	jmp	#LR__0459
05df8                 | LR__0395
05df8     5E FA 05 F6 | 	mov	result1, #94
05dfc     F4 01 90 FD | 	jmp	#LR__0459
05e00                 | LR__0396
05e00     7C FA 05 F6 | 	mov	result1, #124
05e04     EC 01 90 FD | 	jmp	#LR__0459
05e08                 | LR__0397
05e08     7E FA 05 F6 | 	mov	result1, #126
05e0c     E4 01 90 FD | 	jmp	#LR__0459
05e10                 | LR__0398
05e10     7D FA 05 F6 | 	mov	result1, #125
05e14     DC 01 90 FD | 	jmp	#LR__0459
05e18                 | LR__0399
05e18     7F FA 05 F6 | 	mov	result1, #127
05e1c     D4 01 90 FD | 	jmp	#LR__0459
05e20                 | LR__0400
05e20     80 FA 05 F6 | 	mov	result1, #128
05e24     CC 01 90 FD | 	jmp	#LR__0459
05e28                 | LR__0401
05e28     55 FA 05 F6 | 	mov	result1, #85
05e2c     C4 01 90 FD | 	jmp	#LR__0459
05e30                 | LR__0402
05e30     75 FA 05 F6 | 	mov	result1, #117
05e34     BC 01 90 FD | 	jmp	#LR__0459
05e38                 | LR__0403
05e38     75 FA 05 F6 | 	mov	result1, #117
05e3c     B4 01 90 FD | 	jmp	#LR__0459
05e40                 | LR__0404
05e40     42 FA 05 F6 | 	mov	result1, #66
05e44     AC 01 90 FD | 	jmp	#LR__0459
05e48                 | LR__0405
05e48     42 FA 05 F6 | 	mov	result1, #66
05e4c     A4 01 90 FD | 	jmp	#LR__0459
05e50                 | LR__0406
05e50     95 FA 05 F6 | 	mov	result1, #149
05e54     9C 01 90 FD | 	jmp	#LR__0459
05e58                 | LR__0407
05e58     AC FA 05 F6 | 	mov	result1, #172
05e5c     94 01 90 FD | 	jmp	#LR__0459
05e60                 | LR__0408
05e60     81 FA 05 F6 | 	mov	result1, #129
05e64     8C 01 90 FD | 	jmp	#LR__0459
05e68                 | LR__0409
05e68     81 FA 05 F6 | 	mov	result1, #129
05e6c     84 01 90 FD | 	jmp	#LR__0459
05e70                 | LR__0410
05e70     44 FA 05 F6 | 	mov	result1, #68
05e74     7C 01 90 FD | 	jmp	#LR__0459
05e78                 | LR__0411
05e78     44 FA 05 F6 | 	mov	result1, #68
05e7c     74 01 90 FD | 	jmp	#LR__0459
05e80                 | LR__0412
05e80     BC FA 05 F6 | 	mov	result1, #188
05e84     6C 01 90 FD | 	jmp	#LR__0459
05e88                 | LR__0413
05e88     88 FA 05 F6 | 	mov	result1, #136
05e8c     64 01 90 FD | 	jmp	#LR__0459
05e90                 | LR__0414
05e90     B6 FA 05 F6 | 	mov	result1, #182
05e94     5C 01 90 FD | 	jmp	#LR__0459
05e98                 | LR__0415
05e98     92 FA 05 F6 | 	mov	result1, #146
05e9c     54 01 90 FD | 	jmp	#LR__0459
05ea0                 | LR__0416
05ea0     BE FA 05 F6 | 	mov	result1, #190
05ea4     4C 01 90 FD | 	jmp	#LR__0459
05ea8                 | LR__0417
05ea8     BE FA 05 F6 | 	mov	result1, #190
05eac     44 01 90 FD | 	jmp	#LR__0459
05eb0                 | LR__0418
05eb0     C7 FA 05 F6 | 	mov	result1, #199
05eb4     3C 01 90 FD | 	jmp	#LR__0459
05eb8                 | LR__0419
05eb8     D4 FA 05 F6 | 	mov	result1, #212
05ebc     34 01 90 FD | 	jmp	#LR__0459
05ec0                 | LR__0420
05ec0     D4 FA 05 F6 | 	mov	result1, #212
05ec4     2C 01 90 FD | 	jmp	#LR__0459
05ec8                 | LR__0421
05ec8     AA FA 05 F6 | 	mov	result1, #170
05ecc     24 01 90 FD | 	jmp	#LR__0459
05ed0                 | LR__0422
05ed0     4D FA 05 F6 | 	mov	result1, #77
05ed4     1C 01 90 FD | 	jmp	#LR__0459
05ed8                 | LR__0423
05ed8     51 FA 05 F6 | 	mov	result1, #81
05edc     14 01 90 FD | 	jmp	#LR__0459
05ee0                 | LR__0424
05ee0     51 FA 05 F6 | 	mov	result1, #81
05ee4     0C 01 90 FD | 	jmp	#LR__0459
05ee8                 | LR__0425
05ee8     D2 FA 05 F6 | 	mov	result1, #210
05eec     04 01 90 FD | 	jmp	#LR__0459
05ef0                 | LR__0426
05ef0     D2 FA 05 F6 | 	mov	result1, #210
05ef4     FC 00 90 FD | 	jmp	#LR__0459
05ef8                 | LR__0427
05ef8     8E FA 05 F6 | 	mov	result1, #142
05efc     F4 00 90 FD | 	jmp	#LR__0459
05f00                 | LR__0428
05f00     8E FA 05 F6 | 	mov	result1, #142
05f04     EC 00 90 FD | 	jmp	#LR__0459
05f08                 | LR__0429
05f08     90 FA 05 F6 | 	mov	result1, #144
05f0c     E4 00 90 FD | 	jmp	#LR__0459
05f10                 | LR__0430
05f10     90 FA 05 F6 | 	mov	result1, #144
05f14     DC 00 90 FD | 	jmp	#LR__0459
05f18                 | LR__0431
05f18     8D FA 05 F6 | 	mov	result1, #141
05f1c     D4 00 90 FD | 	jmp	#LR__0459
05f20                 | LR__0432
05f20     8D FA 05 F6 | 	mov	result1, #141
05f24     CC 00 90 FD | 	jmp	#LR__0459
05f28                 | LR__0433
05f28     8C FA 05 F6 | 	mov	result1, #140
05f2c     C4 00 90 FD | 	jmp	#LR__0459
05f30                 | LR__0434
05f30     8C FA 05 F6 | 	mov	result1, #140
05f34     BC 00 90 FD | 	jmp	#LR__0459
05f38                 | LR__0435
05f38     91 FA 05 F6 | 	mov	result1, #145
05f3c     B4 00 90 FD | 	jmp	#LR__0459
05f40                 | LR__0436
05f40     91 FA 05 F6 | 	mov	result1, #145
05f44     AC 00 90 FD | 	jmp	#LR__0459
05f48                 | LR__0437
05f48     8B FA 05 F6 | 	mov	result1, #139
05f4c     A4 00 90 FD | 	jmp	#LR__0459
05f50                 | LR__0438
05f50     8B FA 05 F6 | 	mov	result1, #139
05f54     9C 00 90 FD | 	jmp	#LR__0459
05f58                 | LR__0439
05f58     8F FA 05 F6 | 	mov	result1, #143
05f5c     94 00 90 FD | 	jmp	#LR__0459
05f60                 | LR__0440
05f60     8F FA 05 F6 | 	mov	result1, #143
05f64     8C 00 90 FD | 	jmp	#LR__0459
05f68                 | LR__0441
05f68     8F FA 05 F6 | 	mov	result1, #143
05f6c     84 00 90 FD | 	jmp	#LR__0459
05f70                 | LR__0442
05f70     B2 FA 05 F6 | 	mov	result1, #178
05f74     7C 00 90 FD | 	jmp	#LR__0459
05f78                 | LR__0443
05f78     B2 FA 05 F6 | 	mov	result1, #178
05f7c     74 00 90 FD | 	jmp	#LR__0459
05f80                 | LR__0444
05f80     75 FA 05 F6 | 	mov	result1, #117
05f84     6C 00 90 FD | 	jmp	#LR__0459
05f88                 | LR__0445
05f88     75 FA 05 F6 | 	mov	result1, #117
05f8c     64 00 90 FD | 	jmp	#LR__0459
05f90                 | LR__0446
05f90     6D FA 05 F6 | 	mov	result1, #109
05f94     5C 00 90 FD | 	jmp	#LR__0459
05f98                 | LR__0447
05f98     6D FA 05 F6 | 	mov	result1, #109
05f9c     54 00 90 FD | 	jmp	#LR__0459
05fa0                 | LR__0448
05fa0     5B FA 05 F6 | 	mov	result1, #91
05fa4     4C 00 90 FD | 	jmp	#LR__0459
05fa8                 | LR__0449
05fa8     56 FA 05 F6 | 	mov	result1, #86
05fac     44 00 90 FD | 	jmp	#LR__0459
05fb0                 | LR__0450
05fb0     56 FA 05 F6 | 	mov	result1, #86
05fb4     3C 00 90 FD | 	jmp	#LR__0459
05fb8                 | LR__0451
05fb8     70 FA 05 F6 | 	mov	result1, #112
05fbc     34 00 90 FD | 	jmp	#LR__0459
05fc0                 | LR__0452
05fc0     70 FA 05 F6 | 	mov	result1, #112
05fc4     2C 00 90 FD | 	jmp	#LR__0459
05fc8                 | LR__0453
05fc8     57 FA 05 F6 | 	mov	result1, #87
05fcc     24 00 90 FD | 	jmp	#LR__0459
05fd0                 | LR__0454
05fd0     57 FA 05 F6 | 	mov	result1, #87
05fd4     1C 00 90 FD | 	jmp	#LR__0459
05fd8                 | LR__0455
05fd8     79 FA 05 F6 | 	mov	result1, #121
05fdc     14 00 90 FD | 	jmp	#LR__0459
05fe0                 | LR__0456
05fe0     77 FA 05 F6 | 	mov	result1, #119
05fe4     0C 00 90 FD | 	jmp	#LR__0459
05fe8                 | LR__0457
05fe8     78 FA 05 F6 | 	mov	result1, #120
05fec     04 00 90 FD | 	jmp	#LR__0459
05ff0                 | LR__0458
05ff0     00 FA 05 F6 | 	mov	result1, #0
05ff4                 | LR__0459
05ff4     A7 F0 03 F6 | 	mov	ptra, fp
05ff8     B2 00 A0 FD | 	call	#popregs_
05ffc                 | _iscommand_ret
05ffc     2D 00 64 FD | 	ret
06000                 | 
06000                 | ' 
06000                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
06000                 | ' 
06000                 | ' function isfunction(s as string) as ubyte
06000                 | _isfunction
06000     01 4A 05 F6 | 	mov	COUNT_, #1
06004     A8 00 A0 FD | 	call	#pushregs_
06008                 | ' 
06008                 | ' select case s
06008     09 27 02 F6 | 	mov	local01, arg01
0600c     B2 01 00 FF 
06010     CA 15 06 F6 | 	mov	arg02, ##@LR__5607
06014     13 13 02 F6 | 	mov	arg01, local01
06018     1C 21 B2 FD | 	call	#__system___string_cmp
0601c     00 FA 0D F2 | 	cmp	result1, #0 wz
06020     D4 05 90 AD |  if_e	jmp	#LR__0460
06024     B2 01 00 FF 
06028     CE 15 06 F6 | 	mov	arg02, ##@LR__5608
0602c     13 13 02 F6 | 	mov	arg01, local01
06030     04 21 B2 FD | 	call	#__system___string_cmp
06034     00 FA 0D F2 | 	cmp	result1, #0 wz
06038     C4 05 90 AD |  if_e	jmp	#LR__0461
0603c     B2 01 00 FF 
06040     D3 15 06 F6 | 	mov	arg02, ##@LR__5609
06044     13 13 02 F6 | 	mov	arg01, local01
06048     EC 20 B2 FD | 	call	#__system___string_cmp
0604c     00 FA 0D F2 | 	cmp	result1, #0 wz
06050     B4 05 90 AD |  if_e	jmp	#LR__0462
06054     B2 01 00 FF 
06058     D7 15 06 F6 | 	mov	arg02, ##@LR__5610
0605c     13 13 02 F6 | 	mov	arg01, local01
06060     D4 20 B2 FD | 	call	#__system___string_cmp
06064     00 FA 0D F2 | 	cmp	result1, #0 wz
06068     A4 05 90 AD |  if_e	jmp	#LR__0463
0606c     B2 01 00 FF 
06070     DC 15 06 F6 | 	mov	arg02, ##@LR__5611
06074     13 13 02 F6 | 	mov	arg01, local01
06078     BC 20 B2 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     94 05 90 AD |  if_e	jmp	#LR__0464
06084     B2 01 00 FF 
06088     E0 15 06 F6 | 	mov	arg02, ##@LR__5612
0608c     13 13 02 F6 | 	mov	arg01, local01
06090     A4 20 B2 FD | 	call	#__system___string_cmp
06094     00 FA 0D F2 | 	cmp	result1, #0 wz
06098     84 05 90 AD |  if_e	jmp	#LR__0465
0609c     B2 01 00 FF 
060a0     E5 15 06 F6 | 	mov	arg02, ##@LR__5613
060a4     13 13 02 F6 | 	mov	arg01, local01
060a8     8C 20 B2 FD | 	call	#__system___string_cmp
060ac     00 FA 0D F2 | 	cmp	result1, #0 wz
060b0     74 05 90 AD |  if_e	jmp	#LR__0466
060b4     B2 01 00 FF 
060b8     E9 15 06 F6 | 	mov	arg02, ##@LR__5614
060bc     13 13 02 F6 | 	mov	arg01, local01
060c0     74 20 B2 FD | 	call	#__system___string_cmp
060c4     00 FA 0D F2 | 	cmp	result1, #0 wz
060c8     64 05 90 AD |  if_e	jmp	#LR__0467
060cc     B2 01 00 FF 
060d0     EE 15 06 F6 | 	mov	arg02, ##@LR__5615
060d4     13 13 02 F6 | 	mov	arg01, local01
060d8     5C 20 B2 FD | 	call	#__system___string_cmp
060dc     00 FA 0D F2 | 	cmp	result1, #0 wz
060e0     54 05 90 AD |  if_e	jmp	#LR__0468
060e4     B2 01 00 FF 
060e8     F3 15 06 F6 | 	mov	arg02, ##@LR__5616
060ec     13 13 02 F6 | 	mov	arg01, local01
060f0     44 20 B2 FD | 	call	#__system___string_cmp
060f4     00 FA 0D F2 | 	cmp	result1, #0 wz
060f8     44 05 90 AD |  if_e	jmp	#LR__0469
060fc     B2 01 00 FF 
06100     FB 15 06 F6 | 	mov	arg02, ##@LR__5617
06104     13 13 02 F6 | 	mov	arg01, local01
06108     2C 20 B2 FD | 	call	#__system___string_cmp
0610c     00 FA 0D F2 | 	cmp	result1, #0 wz
06110     34 05 90 AD |  if_e	jmp	#LR__0470
06114     B2 01 00 FF 
06118     FF 15 06 F6 | 	mov	arg02, ##@LR__5618
0611c     13 13 02 F6 | 	mov	arg01, local01
06120     14 20 B2 FD | 	call	#__system___string_cmp
06124     00 FA 0D F2 | 	cmp	result1, #0 wz
06128     24 05 90 AD |  if_e	jmp	#LR__0471
0612c     B3 01 00 FF 
06130     05 14 06 F6 | 	mov	arg02, ##@LR__5619
06134     13 13 02 F6 | 	mov	arg01, local01
06138     FC 1F B2 FD | 	call	#__system___string_cmp
0613c     00 FA 0D F2 | 	cmp	result1, #0 wz
06140     14 05 90 AD |  if_e	jmp	#LR__0472
06144     B3 01 00 FF 
06148     0F 14 06 F6 | 	mov	arg02, ##@LR__5620
0614c     13 13 02 F6 | 	mov	arg01, local01
06150     E4 1F B2 FD | 	call	#__system___string_cmp
06154     00 FA 0D F2 | 	cmp	result1, #0 wz
06158     04 05 90 AD |  if_e	jmp	#LR__0473
0615c     B3 01 00 FF 
06160     18 14 06 F6 | 	mov	arg02, ##@LR__5621
06164     13 13 02 F6 | 	mov	arg01, local01
06168     CC 1F B2 FD | 	call	#__system___string_cmp
0616c     00 FA 0D F2 | 	cmp	result1, #0 wz
06170     F4 04 90 AD |  if_e	jmp	#LR__0474
06174     B3 01 00 FF 
06178     21 14 06 F6 | 	mov	arg02, ##@LR__5622
0617c     13 13 02 F6 | 	mov	arg01, local01
06180     B4 1F B2 FD | 	call	#__system___string_cmp
06184     00 FA 0D F2 | 	cmp	result1, #0 wz
06188     E4 04 90 AD |  if_e	jmp	#LR__0475
0618c     B3 01 00 FF 
06190     25 14 06 F6 | 	mov	arg02, ##@LR__5623
06194     13 13 02 F6 | 	mov	arg01, local01
06198     9C 1F B2 FD | 	call	#__system___string_cmp
0619c     00 FA 0D F2 | 	cmp	result1, #0 wz
061a0     D4 04 90 AD |  if_e	jmp	#LR__0476
061a4     B3 01 00 FF 
061a8     29 14 06 F6 | 	mov	arg02, ##@LR__5624
061ac     13 13 02 F6 | 	mov	arg01, local01
061b0     84 1F B2 FD | 	call	#__system___string_cmp
061b4     00 FA 0D F2 | 	cmp	result1, #0 wz
061b8     C4 04 90 AD |  if_e	jmp	#LR__0477
061bc     B3 01 00 FF 
061c0     2D 14 06 F6 | 	mov	arg02, ##@LR__5625
061c4     13 13 02 F6 | 	mov	arg01, local01
061c8     6C 1F B2 FD | 	call	#__system___string_cmp
061cc     00 FA 0D F2 | 	cmp	result1, #0 wz
061d0     B4 04 90 AD |  if_e	jmp	#LR__0478
061d4     B3 01 00 FF 
061d8     36 14 06 F6 | 	mov	arg02, ##@LR__5626
061dc     13 13 02 F6 | 	mov	arg01, local01
061e0     54 1F B2 FD | 	call	#__system___string_cmp
061e4     00 FA 0D F2 | 	cmp	result1, #0 wz
061e8     A4 04 90 AD |  if_e	jmp	#LR__0479
061ec     B3 01 00 FF 
061f0     3F 14 06 F6 | 	mov	arg02, ##@LR__5627
061f4     13 13 02 F6 | 	mov	arg01, local01
061f8     3C 1F B2 FD | 	call	#__system___string_cmp
061fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06200     94 04 90 AD |  if_e	jmp	#LR__0480
06204     B3 01 00 FF 
06208     43 14 06 F6 | 	mov	arg02, ##@LR__5628
0620c     13 13 02 F6 | 	mov	arg01, local01
06210     24 1F B2 FD | 	call	#__system___string_cmp
06214     00 FA 0D F2 | 	cmp	result1, #0 wz
06218     84 04 90 AD |  if_e	jmp	#LR__0481
0621c     B3 01 00 FF 
06220     51 14 06 F6 | 	mov	arg02, ##@LR__5629
06224     13 13 02 F6 | 	mov	arg01, local01
06228     0C 1F B2 FD | 	call	#__system___string_cmp
0622c     00 FA 0D F2 | 	cmp	result1, #0 wz
06230     74 04 90 AD |  if_e	jmp	#LR__0482
06234     B3 01 00 FF 
06238     5E 14 06 F6 | 	mov	arg02, ##@LR__5630
0623c     13 13 02 F6 | 	mov	arg01, local01
06240     F4 1E B2 FD | 	call	#__system___string_cmp
06244     00 FA 0D F2 | 	cmp	result1, #0 wz
06248     64 04 90 AD |  if_e	jmp	#LR__0483
0624c     B3 01 00 FF 
06250     66 14 06 F6 | 	mov	arg02, ##@LR__5631
06254     13 13 02 F6 | 	mov	arg01, local01
06258     DC 1E B2 FD | 	call	#__system___string_cmp
0625c     00 FA 0D F2 | 	cmp	result1, #0 wz
06260     54 04 90 AD |  if_e	jmp	#LR__0484
06264     B3 01 00 FF 
06268     6A 14 06 F6 | 	mov	arg02, ##@LR__5632
0626c     13 13 02 F6 | 	mov	arg01, local01
06270     C4 1E B2 FD | 	call	#__system___string_cmp
06274     00 FA 0D F2 | 	cmp	result1, #0 wz
06278     44 04 90 AD |  if_e	jmp	#LR__0485
0627c     B3 01 00 FF 
06280     6F 14 06 F6 | 	mov	arg02, ##@LR__5633
06284     13 13 02 F6 | 	mov	arg01, local01
06288     AC 1E B2 FD | 	call	#__system___string_cmp
0628c     00 FA 0D F2 | 	cmp	result1, #0 wz
06290     34 04 90 AD |  if_e	jmp	#LR__0486
06294     B3 01 00 FF 
06298     76 14 06 F6 | 	mov	arg02, ##@LR__5634
0629c     13 13 02 F6 | 	mov	arg01, local01
062a0     94 1E B2 FD | 	call	#__system___string_cmp
062a4     00 FA 0D F2 | 	cmp	result1, #0 wz
062a8     24 04 90 AD |  if_e	jmp	#LR__0487
062ac     B3 01 00 FF 
062b0     7A 14 06 F6 | 	mov	arg02, ##@LR__5635
062b4     13 13 02 F6 | 	mov	arg01, local01
062b8     7C 1E B2 FD | 	call	#__system___string_cmp
062bc     00 FA 0D F2 | 	cmp	result1, #0 wz
062c0     14 04 90 AD |  if_e	jmp	#LR__0488
062c4     B3 01 00 FF 
062c8     80 14 06 F6 | 	mov	arg02, ##@LR__5636
062cc     13 13 02 F6 | 	mov	arg01, local01
062d0     64 1E B2 FD | 	call	#__system___string_cmp
062d4     00 FA 0D F2 | 	cmp	result1, #0 wz
062d8     04 04 90 AD |  if_e	jmp	#LR__0489
062dc     B3 01 00 FF 
062e0     84 14 06 F6 | 	mov	arg02, ##@LR__5637
062e4     13 13 02 F6 | 	mov	arg01, local01
062e8     4C 1E B2 FD | 	call	#__system___string_cmp
062ec     00 FA 0D F2 | 	cmp	result1, #0 wz
062f0     F4 03 90 AD |  if_e	jmp	#LR__0490
062f4     B3 01 00 FF 
062f8     88 14 06 F6 | 	mov	arg02, ##@LR__5638
062fc     13 13 02 F6 | 	mov	arg01, local01
06300     34 1E B2 FD | 	call	#__system___string_cmp
06304     00 FA 0D F2 | 	cmp	result1, #0 wz
06308     E4 03 90 AD |  if_e	jmp	#LR__0491
0630c     B3 01 00 FF 
06310     8E 14 06 F6 | 	mov	arg02, ##@LR__5639
06314     13 13 02 F6 | 	mov	arg01, local01
06318     1C 1E B2 FD | 	call	#__system___string_cmp
0631c     00 FA 0D F2 | 	cmp	result1, #0 wz
06320     D4 03 90 AD |  if_e	jmp	#LR__0492
06324     B3 01 00 FF 
06328     95 14 06 F6 | 	mov	arg02, ##@LR__5640
0632c     13 13 02 F6 | 	mov	arg01, local01
06330     04 1E B2 FD | 	call	#__system___string_cmp
06334     00 FA 0D F2 | 	cmp	result1, #0 wz
06338     C4 03 90 AD |  if_e	jmp	#LR__0493
0633c     B3 01 00 FF 
06340     9B 14 06 F6 | 	mov	arg02, ##@LR__5641
06344     13 13 02 F6 | 	mov	arg01, local01
06348     EC 1D B2 FD | 	call	#__system___string_cmp
0634c     00 FA 0D F2 | 	cmp	result1, #0 wz
06350     B4 03 90 AD |  if_e	jmp	#LR__0494
06354     B3 01 00 FF 
06358     A0 14 06 F6 | 	mov	arg02, ##@LR__5642
0635c     13 13 02 F6 | 	mov	arg01, local01
06360     D4 1D B2 FD | 	call	#__system___string_cmp
06364     00 FA 0D F2 | 	cmp	result1, #0 wz
06368     A4 03 90 AD |  if_e	jmp	#LR__0495
0636c     B3 01 00 FF 
06370     A7 14 06 F6 | 	mov	arg02, ##@LR__5643
06374     13 13 02 F6 | 	mov	arg01, local01
06378     BC 1D B2 FD | 	call	#__system___string_cmp
0637c     00 FA 0D F2 | 	cmp	result1, #0 wz
06380     94 03 90 AD |  if_e	jmp	#LR__0496
06384     B3 01 00 FF 
06388     AE 14 06 F6 | 	mov	arg02, ##@LR__5644
0638c     13 13 02 F6 | 	mov	arg01, local01
06390     A4 1D B2 FD | 	call	#__system___string_cmp
06394     00 FA 0D F2 | 	cmp	result1, #0 wz
06398     84 03 90 AD |  if_e	jmp	#LR__0497
0639c     B3 01 00 FF 
063a0     B5 14 06 F6 | 	mov	arg02, ##@LR__5645
063a4     13 13 02 F6 | 	mov	arg01, local01
063a8     8C 1D B2 FD | 	call	#__system___string_cmp
063ac     00 FA 0D F2 | 	cmp	result1, #0 wz
063b0     74 03 90 AD |  if_e	jmp	#LR__0498
063b4     B3 01 00 FF 
063b8     BC 14 06 F6 | 	mov	arg02, ##@LR__5646
063bc     13 13 02 F6 | 	mov	arg01, local01
063c0     74 1D B2 FD | 	call	#__system___string_cmp
063c4     00 FA 0D F2 | 	cmp	result1, #0 wz
063c8     64 03 90 AD |  if_e	jmp	#LR__0499
063cc     B3 01 00 FF 
063d0     C1 14 06 F6 | 	mov	arg02, ##@LR__5647
063d4     13 13 02 F6 | 	mov	arg01, local01
063d8     5C 1D B2 FD | 	call	#__system___string_cmp
063dc     00 FA 0D F2 | 	cmp	result1, #0 wz
063e0     54 03 90 AD |  if_e	jmp	#LR__0500
063e4     B3 01 00 FF 
063e8     C6 14 06 F6 | 	mov	arg02, ##@LR__5648
063ec     13 13 02 F6 | 	mov	arg01, local01
063f0     44 1D B2 FD | 	call	#__system___string_cmp
063f4     00 FA 0D F2 | 	cmp	result1, #0 wz
063f8     44 03 90 AD |  if_e	jmp	#LR__0501
063fc     B3 01 00 FF 
06400     CB 14 06 F6 | 	mov	arg02, ##@LR__5649
06404     13 13 02 F6 | 	mov	arg01, local01
06408     2C 1D B2 FD | 	call	#__system___string_cmp
0640c     00 FA 0D F2 | 	cmp	result1, #0 wz
06410     34 03 90 AD |  if_e	jmp	#LR__0502
06414     B3 01 00 FF 
06418     D0 14 06 F6 | 	mov	arg02, ##@LR__5650
0641c     13 13 02 F6 | 	mov	arg01, local01
06420     14 1D B2 FD | 	call	#__system___string_cmp
06424     00 FA 0D F2 | 	cmp	result1, #0 wz
06428     24 03 90 AD |  if_e	jmp	#LR__0503
0642c     B3 01 00 FF 
06430     D5 14 06 F6 | 	mov	arg02, ##@LR__5651
06434     13 13 02 F6 | 	mov	arg01, local01
06438     FC 1C B2 FD | 	call	#__system___string_cmp
0643c     00 FA 0D F2 | 	cmp	result1, #0 wz
06440     14 03 90 AD |  if_e	jmp	#LR__0504
06444     B3 01 00 FF 
06448     DB 14 06 F6 | 	mov	arg02, ##@LR__5652
0644c     13 13 02 F6 | 	mov	arg01, local01
06450     E4 1C B2 FD | 	call	#__system___string_cmp
06454     00 FA 0D F2 | 	cmp	result1, #0 wz
06458     04 03 90 AD |  if_e	jmp	#LR__0505
0645c     B3 01 00 FF 
06460     E1 14 06 F6 | 	mov	arg02, ##@LR__5653
06464     13 13 02 F6 | 	mov	arg01, local01
06468     CC 1C B2 FD | 	call	#__system___string_cmp
0646c     00 FA 0D F2 | 	cmp	result1, #0 wz
06470     F4 02 90 AD |  if_e	jmp	#LR__0506
06474     B3 01 00 FF 
06478     E7 14 06 F6 | 	mov	arg02, ##@LR__5654
0647c     13 13 02 F6 | 	mov	arg01, local01
06480     B4 1C B2 FD | 	call	#__system___string_cmp
06484     00 FA 0D F2 | 	cmp	result1, #0 wz
06488     E4 02 90 AD |  if_e	jmp	#LR__0507
0648c     B3 01 00 FF 
06490     EC 14 06 F6 | 	mov	arg02, ##@LR__5655
06494     13 13 02 F6 | 	mov	arg01, local01
06498     9C 1C B2 FD | 	call	#__system___string_cmp
0649c     00 FA 0D F2 | 	cmp	result1, #0 wz
064a0     D4 02 90 AD |  if_e	jmp	#LR__0508
064a4     B3 01 00 FF 
064a8     F1 14 06 F6 | 	mov	arg02, ##@LR__5656
064ac     13 13 02 F6 | 	mov	arg01, local01
064b0     84 1C B2 FD | 	call	#__system___string_cmp
064b4     00 FA 0D F2 | 	cmp	result1, #0 wz
064b8     C4 02 90 AD |  if_e	jmp	#LR__0509
064bc     B3 01 00 FF 
064c0     F9 14 06 F6 | 	mov	arg02, ##@LR__5657
064c4     13 13 02 F6 | 	mov	arg01, local01
064c8     6C 1C B2 FD | 	call	#__system___string_cmp
064cc     00 FA 0D F2 | 	cmp	result1, #0 wz
064d0     B4 02 90 AD |  if_e	jmp	#LR__0510
064d4     B3 01 00 FF 
064d8     FF 14 06 F6 | 	mov	arg02, ##@LR__5658
064dc     13 13 02 F6 | 	mov	arg01, local01
064e0     54 1C B2 FD | 	call	#__system___string_cmp
064e4     00 FA 0D F2 | 	cmp	result1, #0 wz
064e8     A4 02 90 AD |  if_e	jmp	#LR__0511
064ec     B3 01 00 FF 
064f0     06 15 06 F6 | 	mov	arg02, ##@LR__5659
064f4     13 13 02 F6 | 	mov	arg01, local01
064f8     3C 1C B2 FD | 	call	#__system___string_cmp
064fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06500     94 02 90 AD |  if_e	jmp	#LR__0512
06504     B3 01 00 FF 
06508     0C 15 06 F6 | 	mov	arg02, ##@LR__5660
0650c     13 13 02 F6 | 	mov	arg01, local01
06510     24 1C B2 FD | 	call	#__system___string_cmp
06514     00 FA 0D F2 | 	cmp	result1, #0 wz
06518     84 02 90 AD |  if_e	jmp	#LR__0513
0651c     B3 01 00 FF 
06520     12 15 06 F6 | 	mov	arg02, ##@LR__5661
06524     13 13 02 F6 | 	mov	arg01, local01
06528     0C 1C B2 FD | 	call	#__system___string_cmp
0652c     00 FA 0D F2 | 	cmp	result1, #0 wz
06530     74 02 90 AD |  if_e	jmp	#LR__0514
06534     B3 01 00 FF 
06538     16 15 06 F6 | 	mov	arg02, ##@LR__5662
0653c     13 13 02 F6 | 	mov	arg01, local01
06540     F4 1B B2 FD | 	call	#__system___string_cmp
06544     00 FA 0D F2 | 	cmp	result1, #0 wz
06548     64 02 90 AD |  if_e	jmp	#LR__0515
0654c     B3 01 00 FF 
06550     1A 15 06 F6 | 	mov	arg02, ##@LR__5663
06554     13 13 02 F6 | 	mov	arg01, local01
06558     DC 1B B2 FD | 	call	#__system___string_cmp
0655c     00 FA 0D F2 | 	cmp	result1, #0 wz
06560     54 02 90 AD |  if_e	jmp	#LR__0516
06564     B3 01 00 FF 
06568     1E 15 06 F6 | 	mov	arg02, ##@LR__5664
0656c     13 13 02 F6 | 	mov	arg01, local01
06570     C4 1B B2 FD | 	call	#__system___string_cmp
06574     00 FA 0D F2 | 	cmp	result1, #0 wz
06578     44 02 90 AD |  if_e	jmp	#LR__0517
0657c     B3 01 00 FF 
06580     24 15 06 F6 | 	mov	arg02, ##@LR__5665
06584     13 13 02 F6 | 	mov	arg01, local01
06588     AC 1B B2 FD | 	call	#__system___string_cmp
0658c     00 FA 0D F2 | 	cmp	result1, #0 wz
06590     34 02 90 AD |  if_e	jmp	#LR__0518
06594     B3 01 00 FF 
06598     2A 15 06 F6 | 	mov	arg02, ##@LR__5666
0659c     13 13 02 F6 | 	mov	arg01, local01
065a0     94 1B B2 FD | 	call	#__system___string_cmp
065a4     00 FA 0D F2 | 	cmp	result1, #0 wz
065a8     24 02 90 AD |  if_e	jmp	#LR__0519
065ac     B3 01 00 FF 
065b0     2F 15 06 F6 | 	mov	arg02, ##@LR__5667
065b4     13 13 02 F6 | 	mov	arg01, local01
065b8     7C 1B B2 FD | 	call	#__system___string_cmp
065bc     00 FA 0D F2 | 	cmp	result1, #0 wz
065c0     14 02 90 AD |  if_e	jmp	#LR__0520
065c4     B3 01 00 FF 
065c8     33 15 06 F6 | 	mov	arg02, ##@LR__5668
065cc     13 13 02 F6 | 	mov	arg01, local01
065d0     64 1B B2 FD | 	call	#__system___string_cmp
065d4     00 FA 0D F2 | 	cmp	result1, #0 wz
065d8     04 02 90 AD |  if_e	jmp	#LR__0521
065dc     B3 01 00 FF 
065e0     37 15 06 F6 | 	mov	arg02, ##@LR__5669
065e4     13 13 02 F6 | 	mov	arg01, local01
065e8     4C 1B B2 FD | 	call	#__system___string_cmp
065ec     00 FA 0D F2 | 	cmp	result1, #0 wz
065f0     F4 01 90 AD |  if_e	jmp	#LR__0522
065f4     F8 01 90 FD | 	jmp	#LR__0523
065f8                 | LR__0460
065f8     9E FA 05 F6 | 	mov	result1, #158
065fc     F4 01 90 FD | 	jmp	#LR__0524
06600                 | LR__0461
06600     85 FA 05 F6 | 	mov	result1, #133
06604     EC 01 90 FD | 	jmp	#LR__0524
06608                 | LR__0462
06608     9B FA 05 F6 | 	mov	result1, #155
0660c     E4 01 90 FD | 	jmp	#LR__0524
06610                 | LR__0463
06610     9B FA 05 F6 | 	mov	result1, #155
06614     DC 01 90 FD | 	jmp	#LR__0524
06618                 | LR__0464
06618     A7 FA 05 F6 | 	mov	result1, #167
0661c     D4 01 90 FD | 	jmp	#LR__0524
06620                 | LR__0465
06620     84 FA 05 F6 | 	mov	result1, #132
06624     CC 01 90 FD | 	jmp	#LR__0524
06628                 | LR__0466
06628     86 FA 05 F6 | 	mov	result1, #134
0662c     C4 01 90 FD | 	jmp	#LR__0524
06630                 | LR__0467
06630     A2 FA 05 F6 | 	mov	result1, #162
06634     BC 01 90 FD | 	jmp	#LR__0524
06638                 | LR__0468
06638     9F FA 05 F6 | 	mov	result1, #159
0663c     B4 01 90 FD | 	jmp	#LR__0524
06640                 | LR__0469
06640     C0 FA 05 F6 | 	mov	result1, #192
06644     AC 01 90 FD | 	jmp	#LR__0524
06648                 | LR__0470
06648     82 FA 05 F6 | 	mov	result1, #130
0664c     A4 01 90 FD | 	jmp	#LR__0524
06650                 | LR__0471
06650     99 FA 05 F6 | 	mov	result1, #153
06654     9C 01 90 FD | 	jmp	#LR__0524
06658                 | LR__0472
06658     D7 FA 05 F6 | 	mov	result1, #215
0665c     94 01 90 FD | 	jmp	#LR__0524
06660                 | LR__0473
06660     D8 FA 05 F6 | 	mov	result1, #216
06664     8C 01 90 FD | 	jmp	#LR__0524
06668                 | LR__0474
06668     C5 FA 05 F6 | 	mov	result1, #197
0666c     84 01 90 FD | 	jmp	#LR__0524
06670                 | LR__0475
06670     C5 FA 05 F6 | 	mov	result1, #197
06674     7C 01 90 FD | 	jmp	#LR__0524
06678                 | LR__0476
06678     9C FA 05 F6 | 	mov	result1, #156
0667c     74 01 90 FD | 	jmp	#LR__0524
06680                 | LR__0477
06680     D3 FA 05 F6 | 	mov	result1, #211
06684     6C 01 90 FD | 	jmp	#LR__0524
06688                 | LR__0478
06688     D3 FA 05 F6 | 	mov	result1, #211
0668c     64 01 90 FD | 	jmp	#LR__0524
06690                 | LR__0479
06690     6F FA 05 F6 | 	mov	result1, #111
06694     5C 01 90 FD | 	jmp	#LR__0524
06698                 | LR__0480
06698     6F FA 05 F6 | 	mov	result1, #111
0669c     54 01 90 FD | 	jmp	#LR__0524
066a0                 | LR__0481
066a0     93 FA 05 F6 | 	mov	result1, #147
066a4     4C 01 90 FD | 	jmp	#LR__0524
066a8                 | LR__0482
066a8     94 FA 05 F6 | 	mov	result1, #148
066ac     44 01 90 FD | 	jmp	#LR__0524
066b0                 | LR__0483
066b0     62 FA 05 F6 | 	mov	result1, #98
066b4     3C 01 90 FD | 	jmp	#LR__0524
066b8                 | LR__0484
066b8     62 FA 05 F6 | 	mov	result1, #98
066bc     34 01 90 FD | 	jmp	#LR__0524
066c0                 | LR__0485
066c0     A3 FA 05 F6 | 	mov	result1, #163
066c4     2C 01 90 FD | 	jmp	#LR__0524
066c8                 | LR__0486
066c8     9D FA 05 F6 | 	mov	result1, #157
066cc     24 01 90 FD | 	jmp	#LR__0524
066d0                 | LR__0487
066d0     8A FA 05 F6 | 	mov	result1, #138
066d4     1C 01 90 FD | 	jmp	#LR__0524
066d8                 | LR__0488
066d8     A4 FA 05 F6 | 	mov	result1, #164
066dc     14 01 90 FD | 	jmp	#LR__0524
066e0                 | LR__0489
066e0     A8 FA 05 F6 | 	mov	result1, #168
066e4     0C 01 90 FD | 	jmp	#LR__0524
066e8                 | LR__0490
066e8     AD FA 05 F6 | 	mov	result1, #173
066ec     04 01 90 FD | 	jmp	#LR__0524
066f0                 | LR__0491
066f0     9A FA 05 F6 | 	mov	result1, #154
066f4     FC 00 90 FD | 	jmp	#LR__0524
066f8                 | LR__0492
066f8     D1 FA 05 F6 | 	mov	result1, #209
066fc     F4 00 90 FD | 	jmp	#LR__0524
06700                 | LR__0493
06700     D0 FA 05 F6 | 	mov	result1, #208
06704     EC 00 90 FD | 	jmp	#LR__0524
06708                 | LR__0494
06708     A6 FA 05 F6 | 	mov	result1, #166
0670c     E4 00 90 FD | 	jmp	#LR__0524
06710                 | LR__0495
06710     66 FA 05 F6 | 	mov	result1, #102
06714     DC 00 90 FD | 	jmp	#LR__0524
06718                 | LR__0496
06718     67 FA 05 F6 | 	mov	result1, #103
0671c     D4 00 90 FD | 	jmp	#LR__0524
06720                 | LR__0497
06720     64 FA 05 F6 | 	mov	result1, #100
06724     CC 00 90 FD | 	jmp	#LR__0524
06728                 | LR__0498
06728     65 FA 05 F6 | 	mov	result1, #101
0672c     C4 00 90 FD | 	jmp	#LR__0524
06730                 | LR__0499
06730     D5 FA 05 F6 | 	mov	result1, #213
06734     BC 00 90 FD | 	jmp	#LR__0524
06738                 | LR__0500
06738     D6 FA 05 F6 | 	mov	result1, #214
0673c     B4 00 90 FD | 	jmp	#LR__0524
06740                 | LR__0501
06740     C8 FA 05 F6 | 	mov	result1, #200
06744     AC 00 90 FD | 	jmp	#LR__0524
06748                 | LR__0502
06748     C9 FA 05 F6 | 	mov	result1, #201
0674c     A4 00 90 FD | 	jmp	#LR__0524
06750                 | LR__0503
06750     CA FA 05 F6 | 	mov	result1, #202
06754     9C 00 90 FD | 	jmp	#LR__0524
06758                 | LR__0504
06758     CC FA 05 F6 | 	mov	result1, #204
0675c     94 00 90 FD | 	jmp	#LR__0524
06760                 | LR__0505
06760     CD FA 05 F6 | 	mov	result1, #205
06764     8C 00 90 FD | 	jmp	#LR__0524
06768                 | LR__0506
06768     CE FA 05 F6 | 	mov	result1, #206
0676c     84 00 90 FD | 	jmp	#LR__0524
06770                 | LR__0507
06770     CB FA 05 F6 | 	mov	result1, #203
06774     7C 00 90 FD | 	jmp	#LR__0524
06778                 | LR__0508
06778     98 FA 05 F6 | 	mov	result1, #152
0677c     74 00 90 FD | 	jmp	#LR__0524
06780                 | LR__0509
06780     7B FA 05 F6 | 	mov	result1, #123
06784     6C 00 90 FD | 	jmp	#LR__0524
06788                 | LR__0510
06788     76 FA 05 F6 | 	mov	result1, #118
0678c     64 00 90 FD | 	jmp	#LR__0524
06790                 | LR__0511
06790     A5 FA 05 F6 | 	mov	result1, #165
06794     5C 00 90 FD | 	jmp	#LR__0524
06798                 | LR__0512
06798     7A FA 05 F6 | 	mov	result1, #122
0679c     54 00 90 FD | 	jmp	#LR__0524
067a0                 | LR__0513
067a0     BF FA 05 F6 | 	mov	result1, #191
067a4     4C 00 90 FD | 	jmp	#LR__0524
067a8                 | LR__0514
067a8     54 FA 05 F6 | 	mov	result1, #84
067ac     44 00 90 FD | 	jmp	#LR__0524
067b0                 | LR__0515
067b0     6B FA 05 F6 | 	mov	result1, #107
067b4     3C 00 90 FD | 	jmp	#LR__0524
067b8                 | LR__0516
067b8     87 FA 05 F6 | 	mov	result1, #135
067bc     34 00 90 FD | 	jmp	#LR__0524
067c0                 | LR__0517
067c0     6A FA 05 F6 | 	mov	result1, #106
067c4     2C 00 90 FD | 	jmp	#LR__0524
067c8                 | LR__0518
067c8     6E FA 05 F6 | 	mov	result1, #110
067cc     24 00 90 FD | 	jmp	#LR__0524
067d0                 | LR__0519
067d0     A1 FA 05 F6 | 	mov	result1, #161
067d4     1C 00 90 FD | 	jmp	#LR__0524
067d8                 | LR__0520
067d8     83 FA 05 F6 | 	mov	result1, #131
067dc     14 00 90 FD | 	jmp	#LR__0524
067e0                 | LR__0521
067e0     A0 FA 05 F6 | 	mov	result1, #160
067e4     0C 00 90 FD | 	jmp	#LR__0524
067e8                 | LR__0522
067e8     9B FA 05 F6 | 	mov	result1, #155
067ec     04 00 90 FD | 	jmp	#LR__0524
067f0                 | LR__0523
067f0     00 FA 05 F6 | 	mov	result1, #0
067f4                 | LR__0524
067f4     A7 F0 03 F6 | 	mov	ptra, fp
067f8     B2 00 A0 FD | 	call	#popregs_
067fc                 | _isfunction_ret
067fc     2D 00 64 FD | 	ret
06800                 | 
06800                 | ' 
06800                 | ' ' Check if the part is a name
06800                 | ' 
06800                 | ' function isname(s as string) as boolean
06800                 | _isname
06800     0D 4A 05 F6 | 	mov	COUNT_, #13
06804     A8 00 A0 FD | 	call	#pushregs_
06808     09 27 02 F6 | 	mov	local01, arg01
0680c     09 29 02 F6 | 	mov	local02, arg01
06810     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
06814                 | LR__0530
06814     14 FB C9 FA | 	rdbyte	result1, local02 wz
06818     01 28 06 51 |  if_ne	add	local02, #1
0681c     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
06820                 | LR__0531
06820     09 29 82 F1 | 	sub	local02, arg01
06824     14 FB 01 F6 | 	mov	result1, local02
06828     FD 2A 0A F6 | 	mov	local03, result1 wz
0682c     00 FA 05 A6 |  if_e	mov	result1, #0
06830     34 02 90 AD |  if_e	jmp	#LR__0543
06834     13 13 02 F6 | 	mov	arg01, local01
06838     01 14 06 F6 | 	mov	arg02, #1
0683c     01 16 06 F6 | 	mov	arg03, #1
06840     64 3A B2 FD | 	call	#__system__Mid_S
06844     FD 2C 02 F6 | 	mov	local04, result1
06848                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06848     B3 01 00 FF 
0684c     3E 15 06 F6 | 	mov	arg02, ##@LR__5670
06850     16 13 02 F6 | 	mov	arg01, local04
06854     E0 18 B2 FD | 	call	#__system___string_cmp
06858     00 FA 55 F2 | 	cmps	result1, #0 wc
0685c     18 00 90 CD |  if_b	jmp	#LR__0532
06860     B3 01 00 FF 
06864     40 15 06 F6 | 	mov	arg02, ##@LR__5671
06868     16 13 02 F6 | 	mov	arg01, local04
0686c     C8 18 B2 FD | 	call	#__system___string_cmp
06870     01 FA 55 F2 | 	cmps	result1, #1 wc
06874     1C 00 90 CD |  if_b	jmp	#LR__0533
06878                 | LR__0532
06878     B3 01 00 FF 
0687c     42 15 06 F6 | 	mov	arg02, ##@LR__5672
06880     16 13 02 F6 | 	mov	arg01, local04
06884     B0 18 B2 FD | 	call	#__system___string_cmp
06888     00 FA 0D F2 | 	cmp	result1, #0 wz
0688c     00 FA 05 56 |  if_ne	mov	result1, #0
06890     D4 01 90 5D |  if_ne	jmp	#LR__0543
06894                 | LR__0533
06894                 | ' if l>2 then 
06894     03 2A 56 F2 | 	cmps	local03, #3 wc
06898     C8 01 90 CD |  if_b	jmp	#LR__0542
0689c                 | '   for i=2 to l
0689c     02 2E 06 F6 | 	mov	local05, #2
068a0     15 31 02 F6 | 	mov	local06, local03
068a4     01 30 06 F1 | 	add	local06, #1
068a8                 | LR__0534
068a8     18 2F 52 F2 | 	cmps	local05, local06 wc
068ac     B4 01 90 3D |  if_ae	jmp	#LR__0541
068b0     13 13 02 F6 | 	mov	arg01, local01
068b4     17 15 02 F6 | 	mov	arg02, local05
068b8     01 16 06 F6 | 	mov	arg03, #1
068bc     E8 39 B2 FD | 	call	#__system__Mid_S
068c0     FD 2C 02 F6 | 	mov	local04, result1
068c4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
068c4     15 2F 52 F2 | 	cmps	local05, local03 wc
068c8     9C 00 90 3D |  if_ae	jmp	#LR__0537
068cc     B3 01 00 FF 
068d0     44 15 06 F6 | 	mov	arg02, ##@LR__5673
068d4     16 13 02 F6 | 	mov	arg01, local04
068d8     5C 18 B2 FD | 	call	#__system___string_cmp
068dc     00 FA 55 F2 | 	cmps	result1, #0 wc
068e0     18 00 90 CD |  if_b	jmp	#LR__0535
068e4     B3 01 00 FF 
068e8     46 15 06 F6 | 	mov	arg02, ##@LR__5674
068ec     16 13 02 F6 | 	mov	arg01, local04
068f0     44 18 B2 FD | 	call	#__system___string_cmp
068f4     01 FA 55 F2 | 	cmps	result1, #1 wc
068f8     6C 00 90 CD |  if_b	jmp	#LR__0537
068fc                 | LR__0535
068fc     B3 01 00 FF 
06900     48 15 06 F6 | 	mov	arg02, ##@LR__5675
06904     16 13 02 F6 | 	mov	arg01, local04
06908     2C 18 B2 FD | 	call	#__system___string_cmp
0690c     00 FA 55 F2 | 	cmps	result1, #0 wc
06910     18 00 90 CD |  if_b	jmp	#LR__0536
06914     B3 01 00 FF 
06918     4A 15 06 F6 | 	mov	arg02, ##@LR__5676
0691c     16 13 02 F6 | 	mov	arg01, local04
06920     14 18 B2 FD | 	call	#__system___string_cmp
06924     01 FA 55 F2 | 	cmps	result1, #1 wc
06928     3C 00 90 CD |  if_b	jmp	#LR__0537
0692c                 | LR__0536
0692c     B3 01 00 FF 
06930     4C 33 06 F6 | 	mov	local07, ##@LR__5677
06934     16 13 02 F6 | 	mov	arg01, local04
06938     19 15 02 F6 | 	mov	arg02, local07
0693c     F8 17 B2 FD | 	call	#__system___string_cmp
06940     00 FA 0D F2 | 	cmp	result1, #0 wz
06944     20 00 90 AD |  if_e	jmp	#LR__0537
06948     B3 01 00 FF 
0694c     4E 35 06 F6 | 	mov	local08, ##@LR__5678
06950     16 13 02 F6 | 	mov	arg01, local04
06954     1A 15 02 F6 | 	mov	arg02, local08
06958     DC 17 B2 FD | 	call	#__system___string_cmp
0695c     FD 36 0A F6 | 	mov	local09, result1 wz
06960     00 FA 05 56 |  if_ne	mov	result1, #0
06964     00 01 90 5D |  if_ne	jmp	#LR__0543
06968                 | LR__0537
06968                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06968     15 2F 0A F2 | 	cmp	local05, local03 wz
0696c     EC 00 90 5D |  if_ne	jmp	#LR__0540
06970     B3 01 00 FF 
06974     50 39 06 F6 | 	mov	local10, ##@LR__5679
06978     16 13 02 F6 | 	mov	arg01, local04
0697c     1C 15 02 F6 | 	mov	arg02, local10
06980     B4 17 B2 FD | 	call	#__system___string_cmp
06984     FD 3A 02 F6 | 	mov	local11, result1
06988     00 3A 56 F2 | 	cmps	local11, #0 wc
0698c     1C 00 90 CD |  if_b	jmp	#LR__0538
06990     B3 01 00 FF 
06994     52 15 06 F6 | 	mov	arg02, ##@LR__5680
06998     16 13 02 F6 | 	mov	arg01, local04
0699c     98 17 B2 FD | 	call	#__system___string_cmp
069a0     FD 38 02 F6 | 	mov	local10, result1
069a4     01 38 56 F2 | 	cmps	local10, #1 wc
069a8     B0 00 90 CD |  if_b	jmp	#LR__0540
069ac                 | LR__0538
069ac     B3 01 00 FF 
069b0     54 15 06 F6 | 	mov	arg02, ##@LR__5681
069b4     16 13 02 F6 | 	mov	arg01, local04
069b8     7C 17 B2 FD | 	call	#__system___string_cmp
069bc     00 FA 55 F2 | 	cmps	result1, #0 wc
069c0     1C 00 90 CD |  if_b	jmp	#LR__0539
069c4     B3 01 00 FF 
069c8     56 37 06 F6 | 	mov	local09, ##@LR__5682
069cc     16 13 02 F6 | 	mov	arg01, local04
069d0     1B 15 02 F6 | 	mov	arg02, local09
069d4     60 17 B2 FD | 	call	#__system___string_cmp
069d8     01 FA 55 F2 | 	cmps	result1, #1 wc
069dc     7C 00 90 CD |  if_b	jmp	#LR__0540
069e0                 | LR__0539
069e0     B3 01 00 FF 
069e4     58 37 06 F6 | 	mov	local09, ##@LR__5683
069e8     16 13 02 F6 | 	mov	arg01, local04
069ec     1B 15 02 F6 | 	mov	arg02, local09
069f0     44 17 B2 FD | 	call	#__system___string_cmp
069f4     00 FA 4D F2 | 	cmps	result1, #0 wz
069f8     60 00 90 AD |  if_e	jmp	#LR__0540
069fc     B3 01 00 FF 
06a00     5A 35 06 F6 | 	mov	local08, ##@LR__5684
06a04     16 13 02 F6 | 	mov	arg01, local04
06a08     1A 15 02 F6 | 	mov	arg02, local08
06a0c     28 17 B2 FD | 	call	#__system___string_cmp
06a10     FD 36 0A F6 | 	mov	local09, result1 wz
06a14     44 00 90 AD |  if_e	jmp	#LR__0540
06a18     B3 01 00 FF 
06a1c     5C 3D 06 F6 | 	mov	local12, ##@LR__5685
06a20     1E 35 02 F6 | 	mov	local08, local12
06a24     16 13 02 F6 | 	mov	arg01, local04
06a28     1A 15 02 F6 | 	mov	arg02, local08
06a2c     08 17 B2 FD | 	call	#__system___string_cmp
06a30     FD 32 0A F6 | 	mov	local07, result1 wz
06a34     24 00 90 AD |  if_e	jmp	#LR__0540
06a38     B3 01 00 FF 
06a3c     5E 3F 06 F6 | 	mov	local13, ##@LR__5686
06a40     1F 3D 02 F6 | 	mov	local12, local13
06a44     16 13 02 F6 | 	mov	arg01, local04
06a48     1E 15 02 F6 | 	mov	arg02, local12
06a4c     E8 16 B2 FD | 	call	#__system___string_cmp
06a50     FD 34 0A F6 | 	mov	local08, result1 wz
06a54     00 FA 05 56 |  if_ne	mov	result1, #0
06a58     0C 00 90 5D |  if_ne	jmp	#LR__0543
06a5c                 | LR__0540
06a5c     01 2E 06 F1 | 	add	local05, #1
06a60     44 FE 9F FD | 	jmp	#LR__0534
06a64                 | LR__0541
06a64                 | LR__0542
06a64                 | ' return true
06a64     01 FA 65 F6 | 	neg	result1, #1
06a68                 | LR__0543
06a68     A7 F0 03 F6 | 	mov	ptra, fp
06a6c     B2 00 A0 FD | 	call	#popregs_
06a70                 | _isname_ret
06a70     2D 00 64 FD | 	ret
06a74                 | 
06a74                 | ' 
06a74                 | ' ' Check if the part is a number.  
06a74                 | ' 
06a74                 | ' function isnum(s as string) as boolean 
06a74                 | _isnum
06a74     13 4A 05 F6 | 	mov	COUNT_, #19
06a78     A8 00 A0 FD | 	call	#pushregs_
06a7c     09 27 02 F6 | 	mov	local01, arg01
06a80     00 28 06 F6 | 	mov	local02, #0
06a84     00 2A 06 F6 | 	mov	local03, #0
06a88     13 13 02 F6 | 	mov	arg01, local01
06a8c     09 2D 02 F6 | 	mov	local04, arg01
06a90     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
06a94                 | LR__0550
06a94     16 FB C9 FA | 	rdbyte	result1, local04 wz
06a98     01 2C 06 51 |  if_ne	add	local04, #1
06a9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
06aa0                 | LR__0551
06aa0     09 2D 82 F1 | 	sub	local04, arg01
06aa4     16 FB 01 F6 | 	mov	result1, local04
06aa8     FD 2E 0A F6 | 	mov	local05, result1 wz
06aac     00 FA 05 A6 |  if_e	mov	result1, #0
06ab0     A0 03 90 AD |  if_e	jmp	#LR__0566
06ab4     13 13 02 F6 | 	mov	arg01, local01
06ab8     01 14 06 F6 | 	mov	arg02, #1
06abc     01 16 06 F6 | 	mov	arg03, #1
06ac0     E4 37 B2 FD | 	call	#__system__Mid_S
06ac4     FD 30 02 F6 | 	mov	local06, result1
06ac8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06ac8     B3 01 00 FF 
06acc     60 15 06 F6 | 	mov	arg02, ##@LR__5687
06ad0     18 13 02 F6 | 	mov	arg01, local06
06ad4     60 16 B2 FD | 	call	#__system___string_cmp
06ad8     00 FA 55 F2 | 	cmps	result1, #0 wc
06adc     1C 00 90 CD |  if_b	jmp	#LR__0552
06ae0     B3 01 00 FF 
06ae4     62 33 06 F6 | 	mov	local07, ##@LR__5688
06ae8     18 13 02 F6 | 	mov	arg01, local06
06aec     19 15 02 F6 | 	mov	arg02, local07
06af0     44 16 B2 FD | 	call	#__system___string_cmp
06af4     01 FA 55 F2 | 	cmps	result1, #1 wc
06af8     84 00 90 CD |  if_b	jmp	#LR__0553
06afc                 | LR__0552
06afc     B3 01 00 FF 
06b00     64 35 06 F6 | 	mov	local08, ##@LR__5689
06b04     1A 33 02 F6 | 	mov	local07, local08
06b08     18 13 02 F6 | 	mov	arg01, local06
06b0c     19 15 02 F6 | 	mov	arg02, local07
06b10     24 16 B2 FD | 	call	#__system___string_cmp
06b14     00 FA 0D F2 | 	cmp	result1, #0 wz
06b18     64 00 90 AD |  if_e	jmp	#LR__0553
06b1c     B3 01 00 FF 
06b20     66 37 06 F6 | 	mov	local09, ##@LR__5690
06b24     1B 35 02 F6 | 	mov	local08, local09
06b28     18 13 02 F6 | 	mov	arg01, local06
06b2c     1A 15 02 F6 | 	mov	arg02, local08
06b30     04 16 B2 FD | 	call	#__system___string_cmp
06b34     FD 32 0A F6 | 	mov	local07, result1 wz
06b38     44 00 90 AD |  if_e	jmp	#LR__0553
06b3c     B3 01 00 FF 
06b40     68 39 06 F6 | 	mov	local10, ##@LR__5691
06b44     1C 37 02 F6 | 	mov	local09, local10
06b48     18 13 02 F6 | 	mov	arg01, local06
06b4c     1B 15 02 F6 | 	mov	arg02, local09
06b50     E4 15 B2 FD | 	call	#__system___string_cmp
06b54     FD 34 0A F6 | 	mov	local08, result1 wz
06b58     24 00 90 AD |  if_e	jmp	#LR__0553
06b5c     B3 01 00 FF 
06b60     6A 3B 06 F6 | 	mov	local11, ##@LR__5692
06b64     1D 39 02 F6 | 	mov	local10, local11
06b68     18 13 02 F6 | 	mov	arg01, local06
06b6c     1C 15 02 F6 | 	mov	arg02, local10
06b70     C4 15 B2 FD | 	call	#__system___string_cmp
06b74     FD 36 0A F6 | 	mov	local09, result1 wz
06b78     00 FA 05 56 |  if_ne	mov	result1, #0
06b7c     D4 02 90 5D |  if_ne	jmp	#LR__0566
06b80                 | LR__0553
06b80                 | ' if m$="." then ds=1
06b80     B3 01 00 FF 
06b84     6C 15 06 F6 | 	mov	arg02, ##@LR__5693
06b88     18 13 02 F6 | 	mov	arg01, local06
06b8c     A8 15 B2 FD | 	call	#__system___string_cmp
06b90     00 FA 0D F2 | 	cmp	result1, #0 wz
06b94     01 28 06 A6 |  if_e	mov	local02, #1
06b98                 | ' if m$="$" then hex=1 else hex=0
06b98     B3 01 00 FF 
06b9c     6E 15 06 F6 | 	mov	arg02, ##@LR__5694
06ba0     18 13 02 F6 | 	mov	arg01, local06
06ba4     90 15 B2 FD | 	call	#__system___string_cmp
06ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
06bac     01 3C 06 A6 |  if_e	mov	local12, #1
06bb0     00 3C 06 56 |  if_ne	mov	local12, #0
06bb4                 | ' if m$="%" then bin=1 else bin=0
06bb4     B3 01 00 FF 
06bb8     70 15 06 F6 | 	mov	arg02, ##@LR__5695
06bbc     18 13 02 F6 | 	mov	arg01, local06
06bc0     74 15 B2 FD | 	call	#__system___string_cmp
06bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
06bc8     01 3E 06 A6 |  if_e	mov	local13, #1
06bcc     00 3E 06 56 |  if_ne	mov	local13, #0
06bd0                 | ' if l>1 then 
06bd0     02 2E 56 F2 | 	cmps	local05, #2 wc
06bd4     78 02 90 CD |  if_b	jmp	#LR__0565
06bd8                 | '   for i=2 to l
06bd8     02 40 06 F6 | 	mov	local14, #2
06bdc     17 43 02 F6 | 	mov	local15, local05
06be0     01 42 06 F1 | 	add	local15, #1
06be4                 | LR__0554
06be4     21 41 52 F2 | 	cmps	local14, local15 wc
06be8     64 02 90 3D |  if_ae	jmp	#LR__0564
06bec     13 13 02 F6 | 	mov	arg01, local01
06bf0     20 15 02 F6 | 	mov	arg02, local14
06bf4     01 16 06 F6 | 	mov	arg03, #1
06bf8     AC 36 B2 FD | 	call	#__system__Mid_S
06bfc     FD 30 02 F6 | 	mov	local06, result1
06c00     00 44 06 F6 | 	mov	local16, #0
06c04                 | '     m$=mid$(s,i,1) : b=false
06c04                 | '     if m$>="0" andalso m$<="9" then b=true  
06c04     B3 01 00 FF 
06c08     72 15 06 F6 | 	mov	arg02, ##@LR__5696
06c0c     18 13 02 F6 | 	mov	arg01, local06
06c10     24 15 B2 FD | 	call	#__system___string_cmp
06c14     00 FA 55 F2 | 	cmps	result1, #0 wc
06c18     1C 00 90 CD |  if_b	jmp	#LR__0555
06c1c     B3 01 00 FF 
06c20     74 33 06 F6 | 	mov	local07, ##@LR__5697
06c24     18 13 02 F6 | 	mov	arg01, local06
06c28     19 15 02 F6 | 	mov	arg02, local07
06c2c     08 15 B2 FD | 	call	#__system___string_cmp
06c30     01 FA 55 F2 | 	cmps	result1, #1 wc
06c34     01 44 66 C6 |  if_b	neg	local16, #1
06c38                 | LR__0555
06c38                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06c38     B3 01 00 FF 
06c3c     76 15 06 F6 | 	mov	arg02, ##@LR__5698
06c40     18 13 02 F6 | 	mov	arg01, local06
06c44     F0 14 B2 FD | 	call	#__system___string_cmp
06c48     00 FA 0D F2 | 	cmp	result1, #0 wz
06c4c     7C 00 90 AD |  if_e	jmp	#LR__0556
06c50     B3 01 00 FF 
06c54     78 33 06 F6 | 	mov	local07, ##@LR__5699
06c58     18 13 02 F6 | 	mov	arg01, local06
06c5c     19 15 02 F6 | 	mov	arg02, local07
06c60     D4 14 B2 FD | 	call	#__system___string_cmp
06c64     00 FA 0D F2 | 	cmp	result1, #0 wz
06c68     60 00 90 AD |  if_e	jmp	#LR__0556
06c6c     B3 01 00 FF 
06c70     7A 35 06 F6 | 	mov	local08, ##@LR__5700
06c74     1A 33 02 F6 | 	mov	local07, local08
06c78     18 13 02 F6 | 	mov	arg01, local06
06c7c     19 15 02 F6 | 	mov	arg02, local07
06c80     B4 14 B2 FD | 	call	#__system___string_cmp
06c84     00 FA 0D F2 | 	cmp	result1, #0 wz
06c88     40 00 90 AD |  if_e	jmp	#LR__0556
06c8c     B3 01 00 FF 
06c90     7C 37 06 F6 | 	mov	local09, ##@LR__5701
06c94     1B 35 02 F6 | 	mov	local08, local09
06c98     18 13 02 F6 | 	mov	arg01, local06
06c9c     1A 15 02 F6 | 	mov	arg02, local08
06ca0     94 14 B2 FD | 	call	#__system___string_cmp
06ca4     FD 32 0A F6 | 	mov	local07, result1 wz
06ca8     20 00 90 AD |  if_e	jmp	#LR__0556
06cac     B3 01 00 FF 
06cb0     7E 39 06 F6 | 	mov	local10, ##@LR__5702
06cb4     1C 37 02 F6 | 	mov	local09, local10
06cb8     18 13 02 F6 | 	mov	arg01, local06
06cbc     1B 15 02 F6 | 	mov	arg02, local09
06cc0     74 14 B2 FD | 	call	#__system___string_cmp
06cc4     FD 34 0A F6 | 	mov	local08, result1 wz
06cc8     04 00 90 5D |  if_ne	jmp	#LR__0557
06ccc                 | LR__0556
06ccc     01 44 66 F6 | 	neg	local16, #1
06cd0                 | LR__0557
06cd0                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06cd0     01 3C 0E F2 | 	cmp	local12, #1 wz
06cd4     34 00 90 5D |  if_ne	jmp	#LR__0558
06cd8     B3 01 00 FF 
06cdc     80 15 06 F6 | 	mov	arg02, ##@LR__5703
06ce0     18 13 02 F6 | 	mov	arg01, local06
06ce4     50 14 B2 FD | 	call	#__system___string_cmp
06ce8     00 FA 55 F2 | 	cmps	result1, #0 wc
06cec     1C 00 90 CD |  if_b	jmp	#LR__0558
06cf0     B3 01 00 FF 
06cf4     82 33 06 F6 | 	mov	local07, ##@LR__5704
06cf8     18 13 02 F6 | 	mov	arg01, local06
06cfc     19 15 02 F6 | 	mov	arg02, local07
06d00     34 14 B2 FD | 	call	#__system___string_cmp
06d04     01 FA 55 F2 | 	cmps	result1, #1 wc
06d08     01 44 66 C6 |  if_b	neg	local16, #1
06d0c                 | LR__0558
06d0c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06d0c     01 3E 0E F2 | 	cmp	local13, #1 wz
06d10     58 00 90 5D |  if_ne	jmp	#LR__0560
06d14     B3 01 00 FF 
06d18     84 15 06 F6 | 	mov	arg02, ##@LR__5705
06d1c     18 13 02 F6 | 	mov	arg01, local06
06d20     14 14 B2 FD | 	call	#__system___string_cmp
06d24     00 FA 55 F2 | 	cmps	result1, #0 wc
06d28     1C 00 90 CD |  if_b	jmp	#LR__0559
06d2c     B3 01 00 FF 
06d30     86 33 06 F6 | 	mov	local07, ##@LR__5706
06d34     18 13 02 F6 | 	mov	arg01, local06
06d38     19 15 02 F6 | 	mov	arg02, local07
06d3c     F8 13 B2 FD | 	call	#__system___string_cmp
06d40     01 FA 55 F2 | 	cmps	result1, #1 wc
06d44     24 00 90 CD |  if_b	jmp	#LR__0560
06d48                 | LR__0559
06d48     B3 01 00 FF 
06d4c     88 35 06 F6 | 	mov	local08, ##@LR__5707
06d50     1A 33 02 F6 | 	mov	local07, local08
06d54     18 13 02 F6 | 	mov	arg01, local06
06d58     19 15 02 F6 | 	mov	arg02, local07
06d5c     D8 13 B2 FD | 	call	#__system___string_cmp
06d60     00 FA 0D F2 | 	cmp	result1, #0 wz
06d64     00 FA 05 56 |  if_ne	mov	result1, #0
06d68     E8 00 90 5D |  if_ne	jmp	#LR__0566
06d6c                 | LR__0560
06d6c                 | '     if not b then return false
06d6c     22 45 22 F6 | 	not	local16, local16
06d70     00 44 0E F2 | 	cmp	local16, #0 wz
06d74     00 FA 05 56 |  if_ne	mov	result1, #0
06d78     D8 00 90 5D |  if_ne	jmp	#LR__0566
06d7c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06d7c     B3 01 00 FF 
06d80     8A 15 06 F6 | 	mov	arg02, ##@LR__5708
06d84     18 13 02 F6 | 	mov	arg01, local06
06d88     AC 13 B2 FD | 	call	#__system___string_cmp
06d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
06d90     3C 00 90 5D |  if_ne	jmp	#LR__0561
06d94     20 15 02 F6 | 	mov	arg02, local14
06d98     01 14 86 F1 | 	sub	arg02, #1
06d9c     13 13 02 F6 | 	mov	arg01, local01
06da0     01 16 06 F6 | 	mov	arg03, #1
06da4     00 35 B2 FD | 	call	#__system__Mid_S
06da8     FD 12 02 F6 | 	mov	arg01, result1
06dac     F0 36 B2 FD | 	call	#__system__LCase_S
06db0     FD 12 02 F6 | 	mov	arg01, result1
06db4     B3 01 00 FF 
06db8     8C 33 06 F6 | 	mov	local07, ##@LR__5709
06dbc     19 15 02 F6 | 	mov	arg02, local07
06dc0     74 13 B2 FD | 	call	#__system___string_cmp
06dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
06dc8     00 FA 05 56 |  if_ne	mov	result1, #0
06dcc     84 00 90 5D |  if_ne	jmp	#LR__0566
06dd0                 | LR__0561
06dd0                 | '     if m$="." then ds+=1: if ds>1 then return false
06dd0     B3 01 00 FF 
06dd4     8E 15 06 F6 | 	mov	arg02, ##@LR__5710
06dd8     18 13 02 F6 | 	mov	arg01, local06
06ddc     58 13 B2 FD | 	call	#__system___string_cmp
06de0     00 FA 0D F2 | 	cmp	result1, #0 wz
06de4     01 28 06 A1 |  if_e	add	local02, #1
06de8     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06dec     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06df0     60 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06df4                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06df4     B3 01 00 FF 
06df8     90 47 06 F6 | 	mov	local17, ##@LR__5711
06dfc     23 49 02 F6 | 	mov	local18, local17
06e00     18 13 02 F6 | 	mov	arg01, local06
06e04     24 15 02 F6 | 	mov	arg02, local18
06e08     2C 13 B2 FD | 	call	#__system___string_cmp
06e0c     FD 4A 0A F6 | 	mov	local19, result1 wz
06e10     20 00 90 AD |  if_e	jmp	#LR__0562
06e14     B3 01 00 FF 
06e18     92 33 06 F6 | 	mov	local07, ##@LR__5712
06e1c     19 47 02 F6 | 	mov	local17, local07
06e20     18 13 02 F6 | 	mov	arg01, local06
06e24     23 15 02 F6 | 	mov	arg02, local17
06e28     0C 13 B2 FD | 	call	#__system___string_cmp
06e2c     FD 48 0A F6 | 	mov	local18, result1 wz
06e30     14 00 90 5D |  if_ne	jmp	#LR__0563
06e34                 | LR__0562
06e34     01 2A 06 F1 | 	add	local03, #1
06e38     00 3C 0E F2 | 	cmp	local12, #0 wz
06e3c     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06e40     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06e44     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06e48                 | LR__0563
06e48     01 40 06 F1 | 	add	local14, #1
06e4c     94 FD 9F FD | 	jmp	#LR__0554
06e50                 | LR__0564
06e50                 | LR__0565
06e50                 | ' return true
06e50     01 FA 65 F6 | 	neg	result1, #1
06e54                 | LR__0566
06e54     A7 F0 03 F6 | 	mov	ptra, fp
06e58     B2 00 A0 FD | 	call	#popregs_
06e5c                 | _isnum_ret
06e5c     2D 00 64 FD | 	ret
06e60                 | 
06e60                 | '   
06e60                 | ' ' Check if the part is an integer number.    
06e60                 | '   
06e60                 | ' function isint(s as string) as boolean
06e60                 | _isint
06e60     0E 4A 05 F6 | 	mov	COUNT_, #14
06e64     A8 00 A0 FD | 	call	#pushregs_
06e68     09 27 02 F6 | 	mov	local01, arg01
06e6c     09 29 02 F6 | 	mov	local02, arg01
06e70     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06e74                 | LR__0570
06e74     14 FB C9 FA | 	rdbyte	result1, local02 wz
06e78     01 28 06 51 |  if_ne	add	local02, #1
06e7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06e80                 | LR__0571
06e80     09 29 82 F1 | 	sub	local02, arg01
06e84     14 FB 01 F6 | 	mov	result1, local02
06e88     FD 2A 0A F6 | 	mov	local03, result1 wz
06e8c     00 FA 05 A6 |  if_e	mov	result1, #0
06e90     64 02 90 AD |  if_e	jmp	#LR__0584
06e94     13 13 02 F6 | 	mov	arg01, local01
06e98     01 14 06 F6 | 	mov	arg02, #1
06e9c     01 16 06 F6 | 	mov	arg03, #1
06ea0     04 34 B2 FD | 	call	#__system__Mid_S
06ea4     FD 2C 02 F6 | 	mov	local04, result1
06ea8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06ea8     B3 01 00 FF 
06eac     94 15 06 F6 | 	mov	arg02, ##@LR__5713
06eb0     16 13 02 F6 | 	mov	arg01, local04
06eb4     80 12 B2 FD | 	call	#__system___string_cmp
06eb8     00 FA 55 F2 | 	cmps	result1, #0 wc
06ebc     1C 00 90 CD |  if_b	jmp	#LR__0572
06ec0     B3 01 00 FF 
06ec4     96 2F 06 F6 | 	mov	local05, ##@LR__5714
06ec8     16 13 02 F6 | 	mov	arg01, local04
06ecc     17 15 02 F6 | 	mov	arg02, local05
06ed0     64 12 B2 FD | 	call	#__system___string_cmp
06ed4     01 FA 55 F2 | 	cmps	result1, #1 wc
06ed8     64 00 90 CD |  if_b	jmp	#LR__0573
06edc                 | LR__0572
06edc     B3 01 00 FF 
06ee0     98 31 06 F6 | 	mov	local06, ##@LR__5715
06ee4     18 2F 02 F6 | 	mov	local05, local06
06ee8     16 13 02 F6 | 	mov	arg01, local04
06eec     17 15 02 F6 | 	mov	arg02, local05
06ef0     44 12 B2 FD | 	call	#__system___string_cmp
06ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ef8     44 00 90 AD |  if_e	jmp	#LR__0573
06efc     B3 01 00 FF 
06f00     9A 33 06 F6 | 	mov	local07, ##@LR__5716
06f04     19 31 02 F6 | 	mov	local06, local07
06f08     16 13 02 F6 | 	mov	arg01, local04
06f0c     18 15 02 F6 | 	mov	arg02, local06
06f10     24 12 B2 FD | 	call	#__system___string_cmp
06f14     FD 2E 0A F6 | 	mov	local05, result1 wz
06f18     24 00 90 AD |  if_e	jmp	#LR__0573
06f1c     B3 01 00 FF 
06f20     9C 35 06 F6 | 	mov	local08, ##@LR__5717
06f24     1A 33 02 F6 | 	mov	local07, local08
06f28     16 13 02 F6 | 	mov	arg01, local04
06f2c     19 15 02 F6 | 	mov	arg02, local07
06f30     04 12 B2 FD | 	call	#__system___string_cmp
06f34     FD 30 0A F6 | 	mov	local06, result1 wz
06f38     00 FA 05 56 |  if_ne	mov	result1, #0
06f3c     B8 01 90 5D |  if_ne	jmp	#LR__0584
06f40                 | LR__0573
06f40                 | ' if m$="$" then hex=1 else hex=0
06f40     B3 01 00 FF 
06f44     9E 15 06 F6 | 	mov	arg02, ##@LR__5718
06f48     16 13 02 F6 | 	mov	arg01, local04
06f4c     E8 11 B2 FD | 	call	#__system___string_cmp
06f50     00 FA 0D F2 | 	cmp	result1, #0 wz
06f54     01 36 06 A6 |  if_e	mov	local09, #1
06f58     00 36 06 56 |  if_ne	mov	local09, #0
06f5c                 | ' if m$="%" then bin=1 else bin=0
06f5c     B3 01 00 FF 
06f60     A0 15 06 F6 | 	mov	arg02, ##@LR__5719
06f64     16 13 02 F6 | 	mov	arg01, local04
06f68     CC 11 B2 FD | 	call	#__system___string_cmp
06f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
06f70     01 38 06 A6 |  if_e	mov	local10, #1
06f74     00 38 06 56 |  if_ne	mov	local10, #0
06f78                 | ' if l>1 then 
06f78     02 2A 56 F2 | 	cmps	local03, #2 wc
06f7c     74 01 90 CD |  if_b	jmp	#LR__0583
06f80                 | '   for i=2 to l
06f80     02 3A 06 F6 | 	mov	local11, #2
06f84     15 3D 02 F6 | 	mov	local12, local03
06f88     01 3C 06 F1 | 	add	local12, #1
06f8c                 | LR__0574
06f8c     1E 3B 52 F2 | 	cmps	local11, local12 wc
06f90     60 01 90 3D |  if_ae	jmp	#LR__0582
06f94     13 13 02 F6 | 	mov	arg01, local01
06f98     1D 15 02 F6 | 	mov	arg02, local11
06f9c     01 16 06 F6 | 	mov	arg03, #1
06fa0     04 33 B2 FD | 	call	#__system__Mid_S
06fa4     FD 2C 02 F6 | 	mov	local04, result1
06fa8                 | '     m$=mid$(s,i,1) 
06fa8                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06fa8     00 36 0E F2 | 	cmp	local09, #0 wz
06fac     50 00 90 5D |  if_ne	jmp	#LR__0576
06fb0     B3 01 00 FF 
06fb4     A2 15 06 F6 | 	mov	arg02, ##@LR__5720
06fb8     16 13 02 F6 | 	mov	arg01, local04
06fbc     78 11 B2 FD | 	call	#__system___string_cmp
06fc0     00 FA 55 F2 | 	cmps	result1, #0 wc
06fc4     18 00 90 CD |  if_b	jmp	#LR__0575
06fc8     B3 01 00 FF 
06fcc     A4 15 06 F6 | 	mov	arg02, ##@LR__5721
06fd0     16 13 02 F6 | 	mov	arg01, local04
06fd4     60 11 B2 FD | 	call	#__system___string_cmp
06fd8     01 FA 55 F2 | 	cmps	result1, #1 wc
06fdc     20 00 90 CD |  if_b	jmp	#LR__0576
06fe0                 | LR__0575
06fe0     B3 01 00 FF 
06fe4     A6 31 06 F6 | 	mov	local06, ##@LR__5722
06fe8     16 13 02 F6 | 	mov	arg01, local04
06fec     18 15 02 F6 | 	mov	arg02, local06
06ff0     44 11 B2 FD | 	call	#__system___string_cmp
06ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ff8     00 FA 05 56 |  if_ne	mov	result1, #0
06ffc     F8 00 90 5D |  if_ne	jmp	#LR__0584
07000                 | LR__0576
07000                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
07000     01 36 0E F2 | 	cmp	local09, #1 wz
07004     90 00 90 5D |  if_ne	jmp	#LR__0579
07008     B3 01 00 FF 
0700c     A8 15 06 F6 | 	mov	arg02, ##@LR__5723
07010     16 13 02 F6 | 	mov	arg01, local04
07014     20 11 B2 FD | 	call	#__system___string_cmp
07018     00 FA 55 F2 | 	cmps	result1, #0 wc
0701c     1C 00 90 CD |  if_b	jmp	#LR__0577
07020     B3 01 00 FF 
07024     AA 15 06 F6 | 	mov	arg02, ##@LR__5724
07028     16 13 02 F6 | 	mov	arg01, local04
0702c     08 11 B2 FD | 	call	#__system___string_cmp
07030     FD 3E 02 F6 | 	mov	local13, result1
07034     01 3E 56 F2 | 	cmps	local13, #1 wc
07038     5C 00 90 CD |  if_b	jmp	#LR__0579
0703c                 | LR__0577
0703c     B3 01 00 FF 
07040     AC 2F 06 F6 | 	mov	local05, ##@LR__5725
07044     16 13 02 F6 | 	mov	arg01, local04
07048     17 15 02 F6 | 	mov	arg02, local05
0704c     E8 10 B2 FD | 	call	#__system___string_cmp
07050     FD 40 02 F6 | 	mov	local14, result1
07054     00 40 56 F2 | 	cmps	local14, #0 wc
07058     1C 00 90 CD |  if_b	jmp	#LR__0578
0705c     B3 01 00 FF 
07060     AE 33 06 F6 | 	mov	local07, ##@LR__5726
07064     16 13 02 F6 | 	mov	arg01, local04
07068     19 15 02 F6 | 	mov	arg02, local07
0706c     C8 10 B2 FD | 	call	#__system___string_cmp
07070     01 FA 55 F2 | 	cmps	result1, #1 wc
07074     20 00 90 CD |  if_b	jmp	#LR__0579
07078                 | LR__0578
07078     B3 01 00 FF 
0707c     B0 35 06 F6 | 	mov	local08, ##@LR__5727
07080     16 13 02 F6 | 	mov	arg01, local04
07084     1A 15 02 F6 | 	mov	arg02, local08
07088     AC 10 B2 FD | 	call	#__system___string_cmp
0708c     00 FA 0D F2 | 	cmp	result1, #0 wz
07090     00 FA 05 56 |  if_ne	mov	result1, #0
07094     60 00 90 5D |  if_ne	jmp	#LR__0584
07098                 | LR__0579
07098                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
07098     01 38 0E F2 | 	cmp	local10, #1 wz
0709c     4C 00 90 5D |  if_ne	jmp	#LR__0581
070a0     B3 01 00 FF 
070a4     B2 15 06 F6 | 	mov	arg02, ##@LR__5728
070a8     16 13 02 F6 | 	mov	arg01, local04
070ac     88 10 B2 FD | 	call	#__system___string_cmp
070b0     00 FA 55 F2 | 	cmps	result1, #0 wc
070b4     18 00 90 CD |  if_b	jmp	#LR__0580
070b8     B3 01 00 FF 
070bc     B4 15 06 F6 | 	mov	arg02, ##@LR__5729
070c0     16 13 02 F6 | 	mov	arg01, local04
070c4     70 10 B2 FD | 	call	#__system___string_cmp
070c8     01 FA 55 F2 | 	cmps	result1, #1 wc
070cc     1C 00 90 CD |  if_b	jmp	#LR__0581
070d0                 | LR__0580
070d0     B3 01 00 FF 
070d4     B6 15 06 F6 | 	mov	arg02, ##@LR__5730
070d8     16 13 02 F6 | 	mov	arg01, local04
070dc     58 10 B2 FD | 	call	#__system___string_cmp
070e0     00 FA 0D F2 | 	cmp	result1, #0 wz
070e4     00 FA 05 56 |  if_ne	mov	result1, #0
070e8     0C 00 90 5D |  if_ne	jmp	#LR__0584
070ec                 | LR__0581
070ec     01 3A 06 F1 | 	add	local11, #1
070f0     98 FE 9F FD | 	jmp	#LR__0574
070f4                 | LR__0582
070f4                 | LR__0583
070f4                 | ' return true
070f4     01 FA 65 F6 | 	neg	result1, #1
070f8                 | LR__0584
070f8     A7 F0 03 F6 | 	mov	ptra, fp
070fc     B2 00 A0 FD | 	call	#popregs_
07100                 | _isint_ret
07100     2D 00 64 FD | 	ret
07104                 | 
07104                 | ' 
07104                 | ' ' Check if the part is a positive decimal number.  
07104                 | ' 
07104                 | ' function isdec(s as string) as boolean
07104                 | _isdec
07104     05 4A 05 F6 | 	mov	COUNT_, #5
07108     A8 00 A0 FD | 	call	#pushregs_
0710c     09 27 02 F6 | 	mov	local01, arg01
07110     09 29 02 F6 | 	mov	local02, arg01
07114     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
07118                 | LR__0590
07118     14 FB C9 FA | 	rdbyte	result1, local02 wz
0711c     01 28 06 51 |  if_ne	add	local02, #1
07120     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
07124                 | LR__0591
07124     09 29 82 F1 | 	sub	local02, arg01
07128     14 FB 01 F6 | 	mov	result1, local02
0712c     FD 28 0A F6 | 	mov	local02, result1 wz
07130     00 FA 05 A6 |  if_e	mov	result1, #0
07134     80 00 90 AD |  if_e	jmp	#LR__0596
07138                 | ' for i=1 to l
07138     01 2A 06 F6 | 	mov	local03, #1
0713c     14 2D 02 F6 | 	mov	local04, local02
07140     01 2C 06 F1 | 	add	local04, #1
07144                 | LR__0592
07144     16 2B 52 F2 | 	cmps	local03, local04 wc
07148     68 00 90 3D |  if_ae	jmp	#LR__0595
0714c     13 13 02 F6 | 	mov	arg01, local01
07150     15 15 02 F6 | 	mov	arg02, local03
07154     01 16 06 F6 | 	mov	arg03, #1
07158     4C 31 B2 FD | 	call	#__system__Mid_S
0715c     FD 2E 02 F6 | 	mov	local05, result1
07160                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07160     B3 01 00 FF 
07164     B8 15 06 F6 | 	mov	arg02, ##@LR__5731
07168     17 13 02 F6 | 	mov	arg01, local05
0716c     C8 0F B2 FD | 	call	#__system___string_cmp
07170     00 FA 55 F2 | 	cmps	result1, #0 wc
07174     18 00 90 CD |  if_b	jmp	#LR__0593
07178     B3 01 00 FF 
0717c     BA 15 06 F6 | 	mov	arg02, ##@LR__5732
07180     17 13 02 F6 | 	mov	arg01, local05
07184     B0 0F B2 FD | 	call	#__system___string_cmp
07188     01 FA 55 F2 | 	cmps	result1, #1 wc
0718c     1C 00 90 CD |  if_b	jmp	#LR__0594
07190                 | LR__0593
07190     B3 01 00 FF 
07194     BC 15 06 F6 | 	mov	arg02, ##@LR__5733
07198     17 13 02 F6 | 	mov	arg01, local05
0719c     98 0F B2 FD | 	call	#__system___string_cmp
071a0     00 FA 0D F2 | 	cmp	result1, #0 wz
071a4     00 FA 05 56 |  if_ne	mov	result1, #0
071a8     0C 00 90 5D |  if_ne	jmp	#LR__0596
071ac                 | LR__0594
071ac     01 2A 06 F1 | 	add	local03, #1
071b0     90 FF 9F FD | 	jmp	#LR__0592
071b4                 | LR__0595
071b4                 | ' return true
071b4     01 FA 65 F6 | 	neg	result1, #1
071b8                 | LR__0596
071b8     A7 F0 03 F6 | 	mov	ptra, fp
071bc     B2 00 A0 FD | 	call	#popregs_
071c0                 | _isdec_ret
071c0     2D 00 64 FD | 	ret
071c4                 | 
071c4                 | ' 
071c4                 | ' ' Check if the part is a string.  
071c4                 | ' 
071c4                 | ' function isstring(s as string) as boolean
071c4                 | _isstring
071c4     01 4A 05 F6 | 	mov	COUNT_, #1
071c8     A8 00 A0 FD | 	call	#pushregs_
071cc                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
071cc     09 27 02 F6 | 	mov	local01, arg01
071d0     01 14 06 F6 | 	mov	arg02, #1
071d4     B8 2F B2 FD | 	call	#__system__Left_S
071d8     FD 12 02 F6 | 	mov	arg01, result1
071dc     B3 01 00 FF 
071e0     BE 15 06 F6 | 	mov	arg02, ##@LR__5734
071e4     50 0F B2 FD | 	call	#__system___string_cmp
071e8     00 FA 4D F2 | 	cmps	result1, #0 wz
071ec     28 00 90 5D |  if_ne	jmp	#LR__0600
071f0     13 13 02 F6 | 	mov	arg01, local01
071f4     01 14 06 F6 | 	mov	arg02, #1
071f8     1C 30 B2 FD | 	call	#__system__Right_S
071fc     FD 12 02 F6 | 	mov	arg01, result1
07200     B3 01 00 FF 
07204     C0 15 06 F6 | 	mov	arg02, ##@LR__5735
07208     2C 0F B2 FD | 	call	#__system___string_cmp
0720c     00 FA 4D F2 | 	cmps	result1, #0 wz
07210     01 FA 65 A6 |  if_e	neg	result1, #1
07214     04 00 90 AD |  if_e	jmp	#LR__0601
07218                 | LR__0600
07218     00 FA 05 F6 | 	mov	result1, #0
0721c                 | LR__0601
0721c     A7 F0 03 F6 | 	mov	ptra, fp
07220     B2 00 A0 FD | 	call	#popregs_
07224                 | _isstring_ret
07224     2D 00 64 FD | 	ret
07228                 | 
07228                 | ' 
07228                 | ' ' getnoteval. Returns the frequency of note token
07228                 | ' 
07228                 | ' function getnoteval(token) as single
07228                 | _getnoteval
07228     02 4A 05 F6 | 	mov	COUNT_, #2
0722c     A8 00 A0 FD | 	call	#pushregs_
07230     01 00 00 FF 
07234     00 13 86 F1 | 	sub	arg01, ##768
07238     09 15 52 F6 | 	abs	arg02, arg01 wc
0723c     0C 14 16 FD | 	qdiv	arg02, #12
07240     14 00 00 FF 
07244     D8 E4 05 F1 | 	add	objptr, ##10456
07248     19 14 62 FD | 	getqy	arg02
0724c     0A 15 82 F6 | 	negc	arg02, arg02
07250     02 14 66 F0 | 	shl	arg02, #2
07254     F2 14 02 F1 | 	add	arg02, objptr
07258     0A 27 02 FB | 	rdlong	local01, arg02
0725c     09 15 52 F6 | 	abs	arg02, arg01 wc
07260     0C 14 16 FD | 	qdiv	arg02, #12
07264     14 00 00 FF 
07268     D8 E4 85 F1 | 	sub	objptr, ##10456
0726c     01 12 06 F6 | 	mov	arg01, #1
07270                 | ' noteexp=1+(note/12) 
07270                 | ' return (2.0^noteexp)*notebase
07270     18 14 62 FD | 	getqx	arg02
07274     0A 13 82 F3 | 	sumc	arg01, arg02
07278     09 13 52 F6 | 	abs	arg01, arg01 wc
0727c     1F 28 C6 C9 |  if_b	decod	local02, #31
07280     00 28 06 36 |  if_ae	mov	local02, #0
07284     00 39 B2 FD | 	call	#__system___float_fromuns
07288     14 FB 61 F5 | 	xor	result1, local02
0728c     FD 14 02 F6 | 	mov	arg02, result1
07290     1E 12 C6 F9 | 	decod	arg01, #30
07294     00 4C B2 FD | 	call	#__system____builtin_powf
07298     FD 12 02 F6 | 	mov	arg01, result1
0729c     13 15 02 F6 | 	mov	arg02, local01
072a0     E8 3C B2 FD | 	call	#__system___float_mul
072a4     A7 F0 03 F6 | 	mov	ptra, fp
072a8     B2 00 A0 FD | 	call	#popregs_
072ac                 | _getnoteval_ret
072ac     2D 00 64 FD | 	ret
072b0                 | 
072b0                 | ' 
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' 
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' '
072b0                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
072b0                 | ' '
072b0                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
072b0                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
072b0                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
072b0                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
072b0                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
072b0                 | ' ' 
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' 
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' ' Helper functions to manage program lines
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' 
072b0                 | ' '----- delete a line from a program
072b0                 | ' 
072b0                 | ' function deleteline(aline as ulong) as integer
072b0                 | _deleteline
072b0     02 4A 05 F6 | 	mov	COUNT_, #2
072b4     A8 00 A0 FD | 	call	#pushregs_
072b8     2C F0 07 F1 | 	add	ptra, #44
072bc     04 4E 05 F1 | 	add	fp, #4
072c0     A7 12 62 FC | 	wrlong	arg01, fp
072c4     4A 00 00 FF 
072c8     A8 E4 05 F1 | 	add	objptr, ##38056
072cc     F2 26 02 FB | 	rdlong	local01, objptr
072d0     0C 4E 05 F1 | 	add	fp, #12
072d4     A7 26 62 FC | 	wrlong	local01, fp
072d8     10 4E 85 F1 | 	sub	fp, #16
072dc                 | ' 
072dc                 | ' searchptr=programstart
072dc                 | ' do
072dc     3E 00 00 FF 
072e0     DC E5 85 F1 | 	sub	objptr, ##32220
072e4                 | LR__0610
072e4     14 4E 05 F1 | 	add	fp, #20
072e8     A7 12 02 F6 | 	mov	arg01, fp
072ec     04 4E 85 F1 | 	sub	fp, #4
072f0     A7 14 02 FB | 	rdlong	arg02, fp
072f4     10 4E 85 F1 | 	sub	fp, #16
072f8     18 16 06 F6 | 	mov	arg03, #24
072fc     6C 01 B2 FD | 	call	#_psram_spin2_read1
07300     10 4E 05 F1 | 	add	fp, #16
07304     A7 26 02 FB | 	rdlong	local01, fp
07308     08 4E 85 F1 | 	sub	fp, #8
0730c     A7 26 62 FC | 	wrlong	local01, fp
07310     20 4E 05 F1 | 	add	fp, #32
07314     A7 26 02 FB | 	rdlong	local01, fp
07318     18 4E 85 F1 | 	sub	fp, #24
0731c     A7 26 62 FC | 	wrlong	local01, fp
07320     04 4E 05 F1 | 	add	fp, #4
07324     A7 26 02 FB | 	rdlong	local01, fp
07328     10 4E 85 F1 | 	sub	fp, #16
0732c     A7 16 02 FB | 	rdlong	arg03, fp
07330     04 4E 85 F1 | 	sub	fp, #4
07334     0B 27 12 F2 | 	cmp	local01, arg03 wc
07338     28 4E 05 C1 |  if_b	add	fp, #40
0733c     A7 28 02 CB |  if_b	rdlong	local02, fp
07340     28 4E 85 C1 |  if_b	sub	fp, #40
07344     FF FF 3F CF 
07348     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0734c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0610
07350     0B 00 00 FF 
07354     CC E4 85 F1 | 	sub	objptr, ##5836
07358                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07358     14 4E 05 F1 | 	add	fp, #20
0735c     A7 26 02 FB | 	rdlong	local01, fp
07360     10 4E 85 F1 | 	sub	fp, #16
07364     A7 28 02 FB | 	rdlong	local02, fp
07368     04 4E 85 F1 | 	sub	fp, #4
0736c     14 27 0A F2 | 	cmp	local01, local02 wz
07370     01 FA 65 56 |  if_ne	neg	result1, #1
07374     34 02 90 5D |  if_ne	jmp	#LR__0615
07378     08 4E 05 F1 | 	add	fp, #8
0737c     A7 12 02 FB | 	rdlong	arg01, fp
07380     08 4E 85 F1 | 	sub	fp, #8
07384     01 14 66 F6 | 	neg	arg02, #1
07388     D0 D4 B1 FD | 	call	#_pslpoke
0738c                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
0738c                 | ' 
0738c                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
0738c     28 4E 05 F1 | 	add	fp, #40
07390     A7 26 02 FB | 	rdlong	local01, fp
07394     28 4E 85 F1 | 	sub	fp, #40
07398     FF FF 3F FF 
0739c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
073a0     24 4E 05 A1 |  if_e	add	fp, #36
073a4     A7 28 02 AB |  if_e	rdlong	local02, fp
073a8     24 4E 85 A1 |  if_e	sub	fp, #36
073ac     FF FF 7F AF 
073b0     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
073b4     88 00 90 5D |  if_ne	jmp	#LR__0611
073b8     4A 00 00 FF 
073bc     A8 E4 05 F1 | 	add	objptr, ##38056
073c0     00 04 80 FF 
073c4     F2 00 68 FC | 	wrlong	##524288, objptr
073c8     07 00 00 FF 
073cc     2C E4 85 F1 | 	sub	objptr, ##3628
073d0     00 04 80 FF 
073d4     F2 00 68 FC | 	wrlong	##524288, objptr
073d8     07 00 00 FF 
073dc     30 E4 05 F1 | 	add	objptr, ##3632
073e0     F2 00 68 FC | 	wrlong	#0, objptr
073e4     04 E4 05 F1 | 	add	objptr, #4
073e8     FF FF FF FF 
073ec     F2 FE 6B FC | 	wrlong	##-1, objptr
073f0     4A 00 00 FF 
073f4     B0 E4 85 F1 | 	sub	objptr, ##38064
073f8     00 12 06 F6 | 	mov	arg01, #0
073fc     01 14 66 F6 | 	neg	arg02, #1
07400     58 D4 B1 FD | 	call	#_pslpoke
07404     10 12 06 F6 | 	mov	arg01, #16
07408     01 14 66 F6 | 	neg	arg02, #1
0740c     4C D4 B1 FD | 	call	#_pslpoke
07410     14 12 06 F6 | 	mov	arg01, #20
07414     1E 14 CE F9 | 	bmask	arg02, #30
07418     40 D4 B1 FD | 	call	#_pslpoke
0741c     50 00 00 FF 
07420     D8 E4 05 F1 | 	add	objptr, ##41176
07424     00 04 80 FF 
07428     F2 00 68 FC | 	wrlong	##524288, objptr
0742c     04 E4 05 F1 | 	add	objptr, #4
07430     00 04 80 FF 
07434     F2 00 68 FC | 	wrlong	##524288, objptr
07438     50 00 00 FF 
0743c     DC E4 85 F1 | 	sub	objptr, ##41180
07440                 | LR__0611
07440                 | ' 
07440                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
07440     28 4E 05 F1 | 	add	fp, #40
07444     A7 26 02 FB | 	rdlong	local01, fp
07448     28 4E 85 F1 | 	sub	fp, #40
0744c     FF FF 3F FF 
07450     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07454     74 00 90 5D |  if_ne	jmp	#LR__0612
07458     24 4E 05 F1 | 	add	fp, #36
0745c     A7 28 02 FB | 	rdlong	local02, fp
07460     24 4E 85 F1 | 	sub	fp, #36
07464     FF FF 7F FF 
07468     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0746c     5C 00 90 AD |  if_e	jmp	#LR__0612
07470     24 4E 05 F1 | 	add	fp, #36
07474     A7 12 02 FB | 	rdlong	arg01, fp
07478     24 4E 85 F1 | 	sub	fp, #36
0747c     14 12 06 F1 | 	add	arg01, #20
07480     1E 14 CE F9 | 	bmask	arg02, #30
07484     D4 D3 B1 FD | 	call	#_pslpoke
07488     24 4E 05 F1 | 	add	fp, #36
0748c     A7 26 02 FB | 	rdlong	local01, fp
07490     4A 00 00 FF 
07494     B0 E4 05 F1 | 	add	objptr, ##38064
07498     F2 26 62 FC | 	wrlong	local01, objptr
0749c     4A 00 00 FF 
074a0     B0 E4 85 F1 | 	sub	objptr, ##38064
074a4     A7 12 02 FB | 	rdlong	arg01, fp
074a8     24 4E 85 F1 | 	sub	fp, #36
074ac     DC D4 B1 FD | 	call	#_pslpeek
074b0     4A 00 00 FF 
074b4     AC E4 05 F1 | 	add	objptr, ##38060
074b8     F2 FA 61 FC | 	wrlong	result1, objptr
074bc     4A 00 00 FF 
074c0     AC E4 85 F1 | 	sub	objptr, ##38060
074c4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
074c4                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
074c4                 | '   lastline=pslpeek(header(4))
074c4                 | '   return 0
074c4     00 FA 05 F6 | 	mov	result1, #0
074c8     E0 00 90 FD | 	jmp	#LR__0615
074cc                 | LR__0612
074cc                 | ' 
074cc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
074cc     28 4E 05 F1 | 	add	fp, #40
074d0     A7 26 02 FB | 	rdlong	local01, fp
074d4     28 4E 85 F1 | 	sub	fp, #40
074d8     FF FF 3F FF 
074dc     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
074e0     58 00 90 AD |  if_e	jmp	#LR__0613
074e4     24 4E 05 F1 | 	add	fp, #36
074e8     A7 28 02 FB | 	rdlong	local02, fp
074ec     24 4E 85 F1 | 	sub	fp, #36
074f0     FF FF 7F FF 
074f4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
074f8     40 00 90 5D |  if_ne	jmp	#LR__0613
074fc     28 4E 05 F1 | 	add	fp, #40
07500     A7 12 02 FB | 	rdlong	arg01, fp
07504     28 4E 85 F1 | 	sub	fp, #40
07508     10 12 06 F1 | 	add	arg01, #16
0750c     01 14 66 F6 | 	neg	arg02, #1
07510     48 D3 B1 FD | 	call	#_pslpoke
07514     28 4E 05 F1 | 	add	fp, #40
07518     A7 26 02 FB | 	rdlong	local01, fp
0751c     28 4E 85 F1 | 	sub	fp, #40
07520     4A 00 00 FF 
07524     A8 E4 05 F1 | 	add	objptr, ##38056
07528     F2 26 62 FC | 	wrlong	local01, objptr
0752c     4A 00 00 FF 
07530     A8 E4 85 F1 | 	sub	objptr, ##38056
07534                 | ' '   print "deleted first line"
07534                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
07534                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
07534                 | '   return 0
07534     00 FA 05 F6 | 	mov	result1, #0
07538     70 00 90 FD | 	jmp	#LR__0615
0753c                 | LR__0613
0753c                 | ' 
0753c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
0753c     28 4E 05 F1 | 	add	fp, #40
07540     A7 26 02 FB | 	rdlong	local01, fp
07544     28 4E 85 F1 | 	sub	fp, #40
07548     FF FF 3F FF 
0754c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07550     24 4E 05 51 |  if_ne	add	fp, #36
07554     A7 28 02 5B |  if_ne	rdlong	local02, fp
07558     24 4E 85 51 |  if_ne	sub	fp, #36
0755c     FF FF 7F 5F 
07560     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
07564     40 00 90 AD |  if_e	jmp	#LR__0614
07568     28 4E 05 F1 | 	add	fp, #40
0756c     A7 12 02 FB | 	rdlong	arg01, fp
07570     10 12 06 F1 | 	add	arg01, #16
07574     04 4E 85 F1 | 	sub	fp, #4
07578     A7 14 02 FB | 	rdlong	arg02, fp
0757c     24 4E 85 F1 | 	sub	fp, #36
07580     D8 D2 B1 FD | 	call	#_pslpoke
07584     24 4E 05 F1 | 	add	fp, #36
07588     A7 12 02 FB | 	rdlong	arg01, fp
0758c     14 12 06 F1 | 	add	arg01, #20
07590     04 4E 05 F1 | 	add	fp, #4
07594     A7 14 02 FB | 	rdlong	arg02, fp
07598     28 4E 85 F1 | 	sub	fp, #40
0759c     BC D2 B1 FD | 	call	#_pslpoke
075a0                 | '    pslpoke(header(5)+16,header(4))  
075a0                 | '    pslpoke(header(4)+20, header(5))
075a0                 | '    return 0
075a0     00 FA 05 F6 | 	mov	result1, #0
075a4     04 00 90 FD | 	jmp	#LR__0615
075a8                 | LR__0614
075a8     00 FA 05 F6 | 	mov	result1, #0
075ac                 | LR__0615
075ac     A7 F0 03 F6 | 	mov	ptra, fp
075b0     B2 00 A0 FD | 	call	#popregs_
075b4                 | _deleteline_ret
075b4     2D 00 64 FD | 	ret
075b8                 | 
075b8                 | ' 
075b8                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
075b8                 | ' 
075b8                 | ' sub save_line
075b8                 | _save_line
075b8     03 4A 05 F6 | 	mov	COUNT_, #3
075bc     A8 00 A0 FD | 	call	#pushregs_
075c0     4A 00 00 FF 
075c4     9C E4 05 F1 | 	add	objptr, ##38044
075c8     F2 16 02 FB | 	rdlong	arg03, objptr
075cc     01 16 06 F1 | 	add	arg03, #1
075d0     05 00 00 FF 
075d4     18 E4 85 F1 | 	sub	objptr, ##2584
075d8     F2 14 02 FB | 	rdlong	arg02, objptr
075dc     0B 15 02 FD | 	qmul	arg02, arg03
075e0     0E 00 00 FF 
075e4     44 E4 85 F1 | 	sub	objptr, ##7236
075e8     F2 12 02 FB | 	rdlong	arg01, objptr
075ec     37 00 00 FF 
075f0     40 E4 85 F1 | 	sub	objptr, ##28224
075f4     09 27 02 F6 | 	mov	local01, arg01
075f8     18 28 62 FD | 	getqx	local02
075fc     97 06 48 FB | 	callpa	#(@LR__0621-@LR__0620)>>2,fcache_load_ptr_
07600                 | LR__0620
07600     13 FB C9 FA | 	rdbyte	result1, local01 wz
07604     01 26 06 51 |  if_ne	add	local01, #1
07608     F4 FF 9F 5D |  if_ne	jmp	#LR__0620
0760c                 | LR__0621
0760c     09 27 82 F1 | 	sub	local01, arg01
07610     03 26 CE F7 | 	test	local01, #3 wz
07614     02 26 46 50 |  if_ne	shr	local01, #2
07618     01 26 06 51 |  if_ne	add	local01, #1
0761c     02 26 66 50 |  if_ne	shl	local01, #2
07620     14 2B 02 F6 | 	mov	local03, local02
07624     13 2B 02 F1 | 	add	local03, local01
07628     43 00 00 FF 
0762c     7C E4 05 F1 | 	add	objptr, ##34428
07630     F2 16 02 FB | 	rdlong	arg03, objptr
07634     14 17 02 F1 | 	add	arg03, local02
07638     04 00 00 FF 
0763c     28 E4 05 F1 | 	add	objptr, ##2088
07640     F2 16 62 FC | 	wrlong	arg03, objptr
07644     04 E4 05 F1 | 	add	objptr, #4
07648     F2 26 62 FC | 	wrlong	local01, objptr
0764c     0C E4 85 F1 | 	sub	objptr, #12
07650     F2 12 02 F6 | 	mov	arg01, objptr
07654     04 00 00 FF 
07658     20 E4 85 F1 | 	sub	objptr, ##2080
0765c     F2 14 02 FB | 	rdlong	arg02, objptr
07660     14 17 02 F6 | 	mov	arg03, local02
07664     37 00 00 FF 
07668     B0 E5 85 F1 | 	sub	objptr, ##28592
0766c     98 FE B1 FD | 	call	#_psram_spin2_write
07670     2B 00 00 FF 
07674     74 E5 05 F1 | 	add	objptr, ##22388
07678     F2 12 02 FB | 	rdlong	arg01, objptr
0767c     0C 00 00 FF 
07680     3C E4 05 F1 | 	add	objptr, ##6204
07684     F2 14 02 FB | 	rdlong	arg02, objptr
07688     14 15 02 F1 | 	add	arg02, local02
0768c     13 17 02 F6 | 	mov	arg03, local01
07690     37 00 00 FF 
07694     B0 E5 85 F1 | 	sub	objptr, ##28592
07698     6C FE B1 FD | 	call	#_psram_spin2_write
0769c     37 00 00 FF 
076a0     B0 E5 05 F1 | 	add	objptr, ##28592
076a4     F2 26 02 FB | 	rdlong	local01, objptr
076a8     15 27 02 F1 | 	add	local01, local03
076ac     F2 26 62 FC | 	wrlong	local01, objptr
076b0     43 00 00 FF 
076b4     7C E4 85 F1 | 	sub	objptr, ##34428
076b8     A7 F0 03 F6 | 	mov	ptra, fp
076bc     B2 00 A0 FD | 	call	#popregs_
076c0                 | _save_line_ret
076c0     2D 00 64 FD | 	ret
076c4                 | 
076c4                 | ' 
076c4                 | ' '----- Insert a new line into the middle of the program
076c4                 | ' 
076c4                 | ' function insertline(aline as ulong) as integer
076c4                 | _insertline
076c4     02 4A 05 F6 | 	mov	COUNT_, #2
076c8     A8 00 A0 FD | 	call	#pushregs_
076cc     28 F0 07 F1 | 	add	ptra, #40
076d0     04 4E 05 F1 | 	add	fp, #4
076d4     A7 12 62 FC | 	wrlong	arg01, fp
076d8     4A 00 00 FF 
076dc     A8 E4 05 F1 | 	add	objptr, ##38056
076e0     F2 26 02 FB | 	rdlong	local01, objptr
076e4     04 4E 05 F1 | 	add	fp, #4
076e8     A7 26 62 FC | 	wrlong	local01, fp
076ec     08 4E 85 F1 | 	sub	fp, #8
076f0                 | ' 
076f0                 | ' do
076f0     3E 00 00 FF 
076f4     DC E5 85 F1 | 	sub	objptr, ##32220
076f8                 | LR__0630
076f8     10 4E 05 F1 | 	add	fp, #16
076fc     A7 12 02 F6 | 	mov	arg01, fp
07700     08 4E 85 F1 | 	sub	fp, #8
07704     A7 14 02 FB | 	rdlong	arg02, fp
07708     08 4E 85 F1 | 	sub	fp, #8
0770c     18 16 06 F6 | 	mov	arg03, #24
07710     58 FD B1 FD | 	call	#_psram_spin2_read1
07714     08 4E 05 F1 | 	add	fp, #8
07718     A7 26 02 FB | 	rdlong	local01, fp
0771c     04 4E 05 F1 | 	add	fp, #4
07720     A7 26 62 FC | 	wrlong	local01, fp
07724     18 4E 05 F1 | 	add	fp, #24
07728     A7 26 02 FB | 	rdlong	local01, fp
0772c     1C 4E 85 F1 | 	sub	fp, #28
07730     A7 26 62 FC | 	wrlong	local01, fp
07734     08 4E 05 F1 | 	add	fp, #8
07738     A7 26 02 FB | 	rdlong	local01, fp
0773c     0C 4E 85 F1 | 	sub	fp, #12
07740     A7 16 02 FB | 	rdlong	arg03, fp
07744     04 4E 85 F1 | 	sub	fp, #4
07748     0B 27 12 F2 | 	cmp	local01, arg03 wc
0774c     24 4E 05 C1 |  if_b	add	fp, #36
07750     A7 28 02 CB |  if_b	rdlong	local02, fp
07754     24 4E 85 C1 |  if_b	sub	fp, #36
07758     FF FF 3F CF 
0775c     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07760     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0630
07764     0B 00 00 FF 
07768     CC E4 85 F1 | 	sub	objptr, ##5836
0776c                 | ' 
0776c                 | ' if header(0)=aline then return -1 				' delete it first
0776c     10 4E 05 F1 | 	add	fp, #16
07770     A7 26 02 FB | 	rdlong	local01, fp
07774     0C 4E 85 F1 | 	sub	fp, #12
07778     A7 28 02 FB | 	rdlong	local02, fp
0777c     04 4E 85 F1 | 	sub	fp, #4
07780     14 27 0A F2 | 	cmp	local01, local02 wz
07784     01 FA 65 A6 |  if_e	neg	result1, #1
07788     48 01 90 AD |  if_e	jmp	#LR__0633
0778c                 | ' if header(0)<aline then return -2 				' end of program reached
0778c     10 4E 05 F1 | 	add	fp, #16
07790     A7 26 02 FB | 	rdlong	local01, fp
07794     0C 4E 85 F1 | 	sub	fp, #12
07798     A7 16 02 FB | 	rdlong	arg03, fp
0779c     04 4E 85 F1 | 	sub	fp, #4
077a0     0B 27 12 F2 | 	cmp	local01, arg03 wc
077a4     02 FA 65 C6 |  if_b	neg	result1, #2
077a8     28 01 90 CD |  if_b	jmp	#LR__0633
077ac                 | ' 
077ac                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
077ac     20 4E 05 F1 | 	add	fp, #32
077b0     A7 26 02 FB | 	rdlong	local01, fp
077b4     20 4E 85 F1 | 	sub	fp, #32
077b8     FF FF 7F FF 
077bc     FF 27 0E F2 | 	cmp	local01, ##-1 wz
077c0     78 00 90 5D |  if_ne	jmp	#LR__0631
077c4     43 00 00 FF 
077c8     7C E4 05 F1 | 	add	objptr, ##34428
077cc     F2 26 02 FB | 	rdlong	local01, objptr
077d0     07 00 00 FF 
077d4     2C E4 05 F1 | 	add	objptr, ##3628
077d8     F2 26 62 FC | 	wrlong	local01, objptr
077dc     0C 4E 05 F1 | 	add	fp, #12
077e0     A7 12 02 FB | 	rdlong	arg01, fp
077e4     0C 4E 85 F1 | 	sub	fp, #12
077e8     10 12 06 F1 | 	add	arg01, #16
077ec     07 00 00 FF 
077f0     2C E4 85 F1 | 	sub	objptr, ##3628
077f4     F2 14 02 FB | 	rdlong	arg02, objptr
077f8     43 00 00 FF 
077fc     7C E4 85 F1 | 	sub	objptr, ##34428
07800     58 D0 B1 FD | 	call	#_pslpoke
07804     47 00 00 FF 
07808     AC E4 05 F1 | 	add	objptr, ##36524
0780c     FF FF FF FF 
07810     F2 FE 6B FC | 	wrlong	##-1, objptr
07814     0C 4E 05 F1 | 	add	fp, #12
07818     A7 26 02 FB | 	rdlong	local01, fp
0781c     0C 4E 85 F1 | 	sub	fp, #12
07820     04 E4 05 F1 | 	add	objptr, #4
07824     F2 26 62 FC | 	wrlong	local01, objptr
07828     47 00 00 FF 
0782c     B0 E4 85 F1 | 	sub	objptr, ##36528
07830     84 FD BF FD | 	call	#_save_line
07834                 | '   programstart=programptr
07834                 | '   pslpoke(lineptr2+16,programptr)
07834                 | '   ucompiledline(4)=$FFFF_FFFF
07834                 | '   ucompiledline(5)=lineptr2
07834                 | '   save_line
07834                 | '   return 0
07834     00 FA 05 F6 | 	mov	result1, #0
07838     98 00 90 FD | 	jmp	#LR__0633
0783c                 | LR__0631
0783c                 | ' 
0783c                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
0783c     20 4E 05 F1 | 	add	fp, #32
07840     A7 26 02 FB | 	rdlong	local01, fp
07844     20 4E 85 F1 | 	sub	fp, #32
07848     FF FF 7F FF 
0784c     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07850     7C 00 90 AD |  if_e	jmp	#LR__0632
07854     20 4E 05 F1 | 	add	fp, #32
07858     A7 26 02 FB | 	rdlong	local01, fp
0785c     47 00 00 FF 
07860     AC E4 05 F1 | 	add	objptr, ##36524
07864     F2 26 62 FC | 	wrlong	local01, objptr
07868     14 4E 85 F1 | 	sub	fp, #20
0786c     A7 26 02 FB | 	rdlong	local01, fp
07870     04 E4 05 F1 | 	add	objptr, #4
07874     F2 26 62 FC | 	wrlong	local01, objptr
07878     A7 12 02 FB | 	rdlong	arg01, fp
0787c     0C 4E 85 F1 | 	sub	fp, #12
07880     10 12 06 F1 | 	add	arg01, #16
07884     04 00 00 FF 
07888     34 E4 85 F1 | 	sub	objptr, ##2100
0788c     F2 14 02 FB | 	rdlong	arg02, objptr
07890     43 00 00 FF 
07894     7C E4 85 F1 | 	sub	objptr, ##34428
07898     C0 CF B1 FD | 	call	#_pslpoke
0789c     20 4E 05 F1 | 	add	fp, #32
078a0     A7 12 02 FB | 	rdlong	arg01, fp
078a4     20 4E 85 F1 | 	sub	fp, #32
078a8     14 12 06 F1 | 	add	arg01, #20
078ac     43 00 00 FF 
078b0     7C E4 05 F1 | 	add	objptr, ##34428
078b4     F2 14 02 FB | 	rdlong	arg02, objptr
078b8     43 00 00 FF 
078bc     7C E4 85 F1 | 	sub	objptr, ##34428
078c0     98 CF B1 FD | 	call	#_pslpoke
078c4     F0 FC BF FD | 	call	#_save_line
078c8                 | '   ucompiledline(4)=header(4)
078c8                 | '   ucompiledline(5)=lineptr2
078c8                 | '   pslpoke(lineptr2+16,programptr)
078c8                 | '   pslpoke(header(4)+20,programptr)
078c8                 | '   save_line
078c8                 | '   return 0
078c8     00 FA 05 F6 | 	mov	result1, #0
078cc     04 00 90 FD | 	jmp	#LR__0633
078d0                 | LR__0632
078d0     00 FA 05 F6 | 	mov	result1, #0
078d4                 | LR__0633
078d4     A7 F0 03 F6 | 	mov	ptra, fp
078d8     B2 00 A0 FD | 	call	#popregs_
078dc                 | _insertline_ret
078dc     2D 00 64 FD | 	ret
078e0                 | 
078e0                 | ' 
078e0                 | ' '----- Adds a new line at the end of the program
078e0                 | ' 
078e0                 | ' sub add_line_at_end(aline) 
078e0                 | _add_line_at_end
078e0     4A 00 00 FF 
078e4     AC E4 05 F1 | 	add	objptr, ##38060
078e8     F2 12 62 FC | 	wrlong	arg01, objptr
078ec     04 E4 05 F1 | 	add	objptr, #4
078f0     F2 14 02 FB | 	rdlong	arg02, objptr
078f4     03 00 00 FF 
078f8     04 E4 85 F1 | 	sub	objptr, ##1540
078fc     F2 14 62 FC | 	wrlong	arg02, objptr
07900     03 00 00 FF 
07904     04 E4 05 F1 | 	add	objptr, ##1540
07908     F2 12 02 FB | 	rdlong	arg01, objptr
0790c     14 12 06 F1 | 	add	arg01, #20
07910     07 00 00 FF 
07914     34 E4 85 F1 | 	sub	objptr, ##3636
07918     F2 14 02 FB | 	rdlong	arg02, objptr
0791c     43 00 00 FF 
07920     7C E4 85 F1 | 	sub	objptr, ##34428
07924     34 CF B1 FD | 	call	#_pslpoke
07928     43 00 00 FF 
0792c     7C E4 05 F1 | 	add	objptr, ##34428
07930     F2 14 02 FB | 	rdlong	arg02, objptr
07934     07 00 00 FF 
07938     34 E4 05 F1 | 	add	objptr, ##3636
0793c     F2 14 62 FC | 	wrlong	arg02, objptr
07940     03 00 00 FF 
07944     00 E4 85 F1 | 	sub	objptr, ##1536
07948     FF FF BF FF 
0794c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07950                 | ' 
07950                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07950                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07950     04 00 00 FF 
07954     34 E4 85 F1 | 	sub	objptr, ##2100
07958     F2 14 02 FB | 	rdlong	arg02, objptr
0795c     43 00 00 FF 
07960     7C E4 85 F1 | 	sub	objptr, ##34428
07964     00 04 00 FF 
07968     00 14 0E F2 | 	cmp	arg02, ##524288 wz
0796c     47 00 00 AF 
07970     AC E4 05 A1 |  if_e	add	objptr, ##36524
07974     FF FF FF AF 
07978     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
0797c     47 00 00 AF 
07980     AC E4 85 A1 |  if_e	sub	objptr, ##36524
07984     30 FC BF FD | 	call	#_save_line
07988     43 00 00 FF 
0798c     7C E4 05 F1 | 	add	objptr, ##34428
07990     F2 12 02 FB | 	rdlong	arg01, objptr
07994     43 00 00 FF 
07998     7C E4 85 F1 | 	sub	objptr, ##34428
0799c     01 14 66 F6 | 	neg	arg02, #1
079a0     B8 CE B1 FD | 	call	#_pslpoke
079a4                 | _add_line_at_end_ret
079a4     2D 00 64 FD | 	ret
079a8                 | 
079a8                 | ' 
079a8                 | ' '--------------------------------------------------------------------------------------------------------------------------
079a8                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
079a8                 | ' '--------------------------------------------------------------------------------------------------------------------------
079a8                 | ' 
079a8                 | ' '--------------------------------------------------------------------------------------------------------------------------
079a8                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
079a8                 | ' '--------------------------------------------------------------------------------------------------------------------------
079a8                 | ' 
079a8                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
079a8                 | ' 
079a8                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
079a8                 | _compile_immediate
079a8     0A 4A 05 F6 | 	mov	COUNT_, #10
079ac     A8 00 A0 FD | 	call	#pushregs_
079b0                 | _compile_immediate_enter
079b0     09 2D 02 F6 | 	mov	local04, arg01
079b4     0A 2F 02 F6 | 	mov	local05, arg02
079b8     00 30 06 F6 | 	mov	local06, #0
079bc     00 32 06 F6 | 	mov	local07, #0
079c0     00 34 06 F6 | 	mov	local08, #0
079c4                 | ' 
079c4                 | ' ' linetype=cont+1
079c4                 | ' ' 1 : this is the first part of the line that will continue
079c4                 | ' ' 2 - this is the continuation of the line
079c4                 | ' ' 3 - this is the last continued line
079c4                 | ' ' 4 - this is the one and only part
079c4                 | ' ' 5 - continued after if/else
079c4                 | ' 
079c4                 | ' err=0
079c4                 | ' cmd=0
079c4                 | ' vars=0
079c4                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
079c4     02 2C 0E F2 | 	cmp	local04, #2 wz
079c8     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
079cc     24 00 90 5D |  if_ne	jmp	#LR__0640
079d0     35 00 00 FF 
079d4     30 E4 05 F1 | 	add	objptr, ##27184
079d8     F2 32 02 FB | 	rdlong	local07, objptr
079dc     01 36 06 F6 | 	mov	local09, #1
079e0     02 00 00 FF 
079e4     34 E4 05 F1 | 	add	objptr, ##1076
079e8     F2 02 68 FC | 	wrlong	#1, objptr
079ec     37 00 00 FF 
079f0     64 E4 85 F1 | 	sub	objptr, ##28260
079f4                 | LR__0640
079f4                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
079f4     04 2C 0E F2 | 	cmp	local04, #4 wz
079f8     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
079fc     30 00 90 5D |  if_ne	jmp	#LR__0641
07a00     35 00 00 FF 
07a04     38 E4 05 F1 | 	add	objptr, ##27192
07a08     F2 32 02 FB | 	rdlong	local07, objptr
07a0c     02 36 06 F6 | 	mov	local09, #2
07a10     02 00 00 FF 
07a14     2C E4 05 F1 | 	add	objptr, ##1068
07a18     F2 04 68 FC | 	wrlong	#2, objptr
07a1c     13 00 00 FF 
07a20     38 E4 05 F1 | 	add	objptr, ##9784
07a24     F2 04 68 FC | 	wrlong	#2, objptr
07a28     4A 00 00 FF 
07a2c     9C E4 85 F1 | 	sub	objptr, ##38044
07a30                 | LR__0641
07a30                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07a30     05 2C 0E F2 | 	cmp	local04, #5 wz
07a34     40 00 90 5D |  if_ne	jmp	#LR__0642
07a38     37 00 00 FF 
07a3c     64 E4 05 F1 | 	add	objptr, ##28260
07a40     F2 FC 01 FB | 	rdlong	result2, objptr
07a44     FE 36 02 F6 | 	mov	local09, result2
07a48     03 36 66 F0 | 	shl	local09, #3
07a4c     02 00 00 FF 
07a50     38 E4 85 F1 | 	sub	objptr, ##1080
07a54     F2 36 02 F1 | 	add	local09, objptr
07a58     04 36 06 F1 | 	add	local09, #4
07a5c     1B 33 02 FB | 	rdlong	local07, local09
07a60     01 FC 05 F1 | 	add	result2, #1
07a64     02 00 00 FF 
07a68     38 E4 05 F1 | 	add	objptr, ##1080
07a6c     F2 FC 61 FC | 	wrlong	result2, objptr
07a70     37 00 00 FF 
07a74     64 E4 85 F1 | 	sub	objptr, ##28260
07a78                 | LR__0642
07a78                 | ' 
07a78                 | ' 'print  "In compile_immediate cmd=:", cmd
07a78                 | ' 451 select case cmd
07a78     5C 32 0E F2 | 	cmp	local07, #92 wz
07a7c     E0 02 90 AD |  if_e	jmp	#LR__0643
07a80     B9 32 0E F2 | 	cmp	local07, #185 wz
07a84     E4 02 90 AD |  if_e	jmp	#LR__0644
07a88     47 32 0E F2 | 	cmp	local07, #71 wz
07a8c     EC 02 90 AD |  if_e	jmp	#LR__0645
07a90     59 32 0E F2 | 	cmp	local07, #89 wz
07a94     F4 02 90 AD |  if_e	jmp	#LR__0646
07a98     C3 32 0E F2 | 	cmp	local07, #195 wz
07a9c     FC 02 90 AD |  if_e	jmp	#LR__0647
07aa0     45 32 0E F2 | 	cmp	local07, #69 wz
07aa4     00 03 90 AD |  if_e	jmp	#LR__0648
07aa8     69 32 0E F2 | 	cmp	local07, #105 wz
07aac     08 03 90 AD |  if_e	jmp	#LR__0649
07ab0     40 32 0E F2 | 	cmp	local07, #64 wz
07ab4     04 07 90 AD |  if_e	jmp	#LR__0725
07ab8     B4 32 0E F2 | 	cmp	local07, #180 wz
07abc     04 03 90 AD |  if_e	jmp	#LR__0650
07ac0     49 32 0E F2 | 	cmp	local07, #73 wz
07ac4     08 03 90 AD |  if_e	jmp	#LR__0651
07ac8     C4 32 0E F2 | 	cmp	local07, #196 wz
07acc     0C 03 90 AD |  if_e	jmp	#LR__0652
07ad0     AE 32 0E F2 | 	cmp	local07, #174 wz
07ad4     10 03 90 AD |  if_e	jmp	#LR__0653
07ad8     B0 32 0E F2 | 	cmp	local07, #176 wz
07adc     14 03 90 AD |  if_e	jmp	#LR__0654
07ae0     AF 32 0E F2 | 	cmp	local07, #175 wz
07ae4     18 03 90 AD |  if_e	jmp	#LR__0655
07ae8     B1 32 0E F2 | 	cmp	local07, #177 wz
07aec     1C 03 90 AD |  if_e	jmp	#LR__0656
07af0     CF 32 0E F2 | 	cmp	local07, #207 wz
07af4     20 03 90 AD |  if_e	jmp	#LR__0657
07af8     68 32 0E F2 | 	cmp	local07, #104 wz
07afc     24 03 90 AD |  if_e	jmp	#LR__0658
07b00     B7 32 0E F2 | 	cmp	local07, #183 wz
07b04     B4 06 90 AD |  if_e	jmp	#LR__0725
07b08     D9 32 0E F2 | 	cmp	local07, #217 wz
07b0c     20 03 90 AD |  if_e	jmp	#LR__0659
07b10     74 32 0E F2 | 	cmp	local07, #116 wz
07b14     24 03 90 AD |  if_e	jmp	#LR__0660
07b18     73 32 0E F2 | 	cmp	local07, #115 wz
07b1c     2C 03 90 AD |  if_e	jmp	#LR__0661
07b20     6C 32 0E F2 | 	cmp	local07, #108 wz
07b24     34 03 90 AD |  if_e	jmp	#LR__0662
07b28     89 32 0E F2 | 	cmp	local07, #137 wz
07b2c     8C 06 90 AD |  if_e	jmp	#LR__0725
07b30     C2 32 0E F2 | 	cmp	local07, #194 wz
07b34     34 03 90 AD |  if_e	jmp	#LR__0663
07b38     72 32 0E F2 | 	cmp	local07, #114 wz
07b3c     38 03 90 AD |  if_e	jmp	#LR__0664
07b40     5D 32 0E F2 | 	cmp	local07, #93 wz
07b44     3C 03 90 AD |  if_e	jmp	#LR__0665
07b48     96 32 0E F2 | 	cmp	local07, #150 wz
07b4c     44 03 90 AD |  if_e	jmp	#LR__0666
07b50     43 32 0E F2 | 	cmp	local07, #67 wz
07b54     48 03 90 AD |  if_e	jmp	#LR__0667
07b58     5A 32 0E F2 | 	cmp	local07, #90 wz
07b5c     50 03 90 AD |  if_e	jmp	#LR__0668
07b60     AB 32 0E F2 | 	cmp	local07, #171 wz
07b64     54 06 90 AD |  if_e	jmp	#LR__0725
07b68     BD 32 0E F2 | 	cmp	local07, #189 wz
07b6c     50 03 90 AD |  if_e	jmp	#LR__0669
07b70     BB 32 0E F2 | 	cmp	local07, #187 wz
07b74     58 03 90 AD |  if_e	jmp	#LR__0670
07b78     4E 32 0E F2 | 	cmp	local07, #78 wz
07b7c     60 03 90 AD |  if_e	jmp	#LR__0671
07b80     A9 32 0E F2 | 	cmp	local07, #169 wz
07b84     78 03 90 AD |  if_e	jmp	#LR__0673
07b88     46 32 0E F2 | 	cmp	local07, #70 wz
07b8c     90 03 90 AD |  if_e	jmp	#LR__0675
07b90     71 32 0E F2 | 	cmp	local07, #113 wz
07b94     98 03 90 AD |  if_e	jmp	#LR__0676
07b98     60 32 0E F2 | 	cmp	local07, #96 wz
07b9c     9C 03 90 AD |  if_e	jmp	#LR__0677
07ba0     4A 32 0E F2 | 	cmp	local07, #74 wz
07ba4     A0 03 90 AD |  if_e	jmp	#LR__0678
07ba8     48 32 0E F2 | 	cmp	local07, #72 wz
07bac     A4 03 90 AD |  if_e	jmp	#LR__0679
07bb0     58 32 0E F2 | 	cmp	local07, #88 wz
07bb4     AC 03 90 AD |  if_e	jmp	#LR__0680
07bb8     5F 32 0E F2 | 	cmp	local07, #95 wz
07bbc     B4 03 90 AD |  if_e	jmp	#LR__0681
07bc0     B5 32 0E F2 | 	cmp	local07, #181 wz
07bc4     B8 03 90 AD |  if_e	jmp	#LR__0682
07bc8     8A 32 0E F2 | 	cmp	local07, #138 wz
07bcc     C0 03 90 AD |  if_e	jmp	#LR__0683
07bd0     4C 32 0E F2 | 	cmp	local07, #76 wz
07bd4     C4 03 90 AD |  if_e	jmp	#LR__0684
07bd8     52 32 0E F2 | 	cmp	local07, #82 wz
07bdc     CC 03 90 AD |  if_e	jmp	#LR__0685
07be0     97 32 0E F2 | 	cmp	local07, #151 wz
07be4     D4 03 90 AD |  if_e	jmp	#LR__0686
07be8     C6 32 0E F2 | 	cmp	local07, #198 wz
07bec     D8 03 90 AD |  if_e	jmp	#LR__0687
07bf0     61 32 0E F2 | 	cmp	local07, #97 wz
07bf4     DC 03 90 AD |  if_e	jmp	#LR__0688
07bf8     63 32 0E F2 | 	cmp	local07, #99 wz
07bfc     E0 03 90 AD |  if_e	jmp	#LR__0689
07c00     41 32 0E F2 | 	cmp	local07, #65 wz
07c04     B4 05 90 AD |  if_e	jmp	#LR__0725
07c08     4B 32 0E F2 | 	cmp	local07, #75 wz
07c0c     DC 03 90 AD |  if_e	jmp	#LR__0690
07c10     C1 32 0E F2 | 	cmp	local07, #193 wz
07c14     E0 03 90 AD |  if_e	jmp	#LR__0691
07c18     B3 32 0E F2 | 	cmp	local07, #179 wz
07c1c     E4 03 90 AD |  if_e	jmp	#LR__0692
07c20     5E 32 0E F2 | 	cmp	local07, #94 wz
07c24     E8 03 90 AD |  if_e	jmp	#LR__0693
07c28     7C 32 0E F2 | 	cmp	local07, #124 wz
07c2c     EC 03 90 AD |  if_e	jmp	#LR__0694
07c30     7D 32 0E F2 | 	cmp	local07, #125 wz
07c34     F0 03 90 AD |  if_e	jmp	#LR__0695
07c38     7E 32 0E F2 | 	cmp	local07, #126 wz
07c3c     F4 03 90 AD |  if_e	jmp	#LR__0696
07c40     7F 32 0E F2 | 	cmp	local07, #127 wz
07c44     F8 03 90 AD |  if_e	jmp	#LR__0697
07c48     80 32 0E F2 | 	cmp	local07, #128 wz
07c4c     FC 03 90 AD |  if_e	jmp	#LR__0698
07c50     55 32 0E F2 | 	cmp	local07, #85 wz
07c54     00 04 90 AD |  if_e	jmp	#LR__0699
07c58     75 32 0E F2 | 	cmp	local07, #117 wz
07c5c     04 04 90 AD |  if_e	jmp	#LR__0700
07c60     42 32 0E F2 | 	cmp	local07, #66 wz
07c64     0C 04 90 AD |  if_e	jmp	#LR__0701
07c68     95 32 0E F2 | 	cmp	local07, #149 wz
07c6c     14 04 90 AD |  if_e	jmp	#LR__0702
07c70     AC 32 0E F2 | 	cmp	local07, #172 wz
07c74     44 05 90 AD |  if_e	jmp	#LR__0725
07c78     81 32 0E F2 | 	cmp	local07, #129 wz
07c7c     10 04 90 AD |  if_e	jmp	#LR__0703
07c80     44 32 0E F2 | 	cmp	local07, #68 wz
07c84     14 04 90 AD |  if_e	jmp	#LR__0704
07c88     BC 32 0E F2 | 	cmp	local07, #188 wz
07c8c     18 04 90 AD |  if_e	jmp	#LR__0705
07c90     88 32 0E F2 | 	cmp	local07, #136 wz
07c94     24 05 90 AD |  if_e	jmp	#LR__0725
07c98     B6 32 0E F2 | 	cmp	local07, #182 wz
07c9c     18 04 90 AD |  if_e	jmp	#LR__0706
07ca0     92 32 0E F2 | 	cmp	local07, #146 wz
07ca4     20 04 90 AD |  if_e	jmp	#LR__0707
07ca8     BE 32 0E F2 | 	cmp	local07, #190 wz
07cac     C8 05 90 AD |  if_e	jmp	#LR__0726
07cb0     C7 32 0E F2 | 	cmp	local07, #199 wz
07cb4     D4 32 0E 52 |  if_ne	cmp	local07, #212 wz
07cb8     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07cbc     FC 04 90 AD |  if_e	jmp	#LR__0725
07cc0     4D 32 0E F2 | 	cmp	local07, #77 wz
07cc4     0C 04 90 AD |  if_e	jmp	#LR__0708
07cc8     51 32 0E F2 | 	cmp	local07, #81 wz
07ccc     14 04 90 AD |  if_e	jmp	#LR__0709
07cd0     D2 32 0E F2 | 	cmp	local07, #210 wz
07cd4     1C 04 90 AD |  if_e	jmp	#LR__0710
07cd8     8E 32 0E F2 | 	cmp	local07, #142 wz
07cdc     24 04 90 AD |  if_e	jmp	#LR__0711
07ce0     90 32 0E F2 | 	cmp	local07, #144 wz
07ce4     28 04 90 AD |  if_e	jmp	#LR__0712
07ce8     8D 32 0E F2 | 	cmp	local07, #141 wz
07cec     2C 04 90 AD |  if_e	jmp	#LR__0713
07cf0     8C 32 0E F2 | 	cmp	local07, #140 wz
07cf4     30 04 90 AD |  if_e	jmp	#LR__0714
07cf8     91 32 0E F2 | 	cmp	local07, #145 wz
07cfc     34 04 90 AD |  if_e	jmp	#LR__0715
07d00     8B 32 0E F2 | 	cmp	local07, #139 wz
07d04     38 04 90 AD |  if_e	jmp	#LR__0716
07d08     8F 32 0E F2 | 	cmp	local07, #143 wz
07d0c     3C 04 90 AD |  if_e	jmp	#LR__0717
07d10     B2 32 0E F2 | 	cmp	local07, #178 wz
07d14     40 04 90 AD |  if_e	jmp	#LR__0718
07d18     6D 32 0E F2 | 	cmp	local07, #109 wz
07d1c     48 04 90 AD |  if_e	jmp	#LR__0719
07d20     70 32 0E F2 | 	cmp	local07, #112 wz
07d24     94 04 90 AD |  if_e	jmp	#LR__0725
07d28     56 32 0E F2 | 	cmp	local07, #86 wz
07d2c     44 04 90 AD |  if_e	jmp	#LR__0720
07d30     57 32 0E F2 | 	cmp	local07, #87 wz
07d34     84 04 90 AD |  if_e	jmp	#LR__0725
07d38     79 32 0E F2 | 	cmp	local07, #121 wz
07d3c     40 04 90 AD |  if_e	jmp	#LR__0721
07d40     77 32 0E F2 | 	cmp	local07, #119 wz
07d44     44 04 90 AD |  if_e	jmp	#LR__0722
07d48     78 32 0E F2 | 	cmp	local07, #120 wz
07d4c     48 04 90 AD |  if_e	jmp	#LR__0723
07d50     01 00 00 FF 
07d54     04 32 0E F2 | 	cmp	local07, ##516 wz
07d58     48 04 90 AD |  if_e	jmp	#LR__0724
07d5c     18 05 90 FD | 	jmp	#LR__0726
07d60                 | LR__0643
07d60     64 0B B0 FD | 	call	#_compile_fun_2p
07d64     FD 30 02 F6 | 	mov	local06, result1
07d68     50 04 90 FD | 	jmp	#LR__0725
07d6c                 | LR__0644
07d6c     28 0E B0 FD | 	call	#_compile_fun_varp
07d70     FD 34 02 F6 | 	mov	local08, result1
07d74     FE 30 02 F6 | 	mov	local06, result2
07d78     40 04 90 FD | 	jmp	#LR__0725
07d7c                 | LR__0645
07d7c     18 0E B0 FD | 	call	#_compile_fun_varp
07d80     FD 34 02 F6 | 	mov	local08, result1
07d84     FE 30 02 F6 | 	mov	local06, result2
07d88     30 04 90 FD | 	jmp	#LR__0725
07d8c                 | LR__0646
07d8c     08 0E B0 FD | 	call	#_compile_fun_varp
07d90     FD 34 02 F6 | 	mov	local08, result1
07d94     FE 30 02 F6 | 	mov	local06, result2
07d98     20 04 90 FD | 	jmp	#LR__0725
07d9c                 | LR__0647
07d9c                 | ' return expr()
07d9c     64 42 B0 FD | 	call	#_expr
07da0     FD 30 02 F6 | 	mov	local06, result1
07da4     14 04 90 FD | 	jmp	#LR__0725
07da8                 | LR__0648
07da8     EC 0D B0 FD | 	call	#_compile_fun_varp
07dac     FD 34 02 F6 | 	mov	local08, result1
07db0     FE 30 02 F6 | 	mov	local06, result2
07db4     04 04 90 FD | 	jmp	#LR__0725
07db8                 | LR__0649
07db8                 | ' return expr()
07db8     48 42 B0 FD | 	call	#_expr
07dbc     FD 30 02 F6 | 	mov	local06, result1
07dc0     F8 03 90 FD | 	jmp	#LR__0725
07dc4                 | LR__0650
07dc4                 | ' return expr()
07dc4     3C 42 B0 FD | 	call	#_expr
07dc8     FD 30 02 F6 | 	mov	local06, result1
07dcc     EC 03 90 FD | 	jmp	#LR__0725
07dd0                 | LR__0651
07dd0                 | ' return expr()
07dd0     30 42 B0 FD | 	call	#_expr
07dd4     FD 30 02 F6 | 	mov	local06, result1
07dd8     E0 03 90 FD | 	jmp	#LR__0725
07ddc                 | LR__0652
07ddc     E8 0A B0 FD | 	call	#_compile_fun_2p
07de0     FD 30 02 F6 | 	mov	local06, result1
07de4     D4 03 90 FD | 	jmp	#LR__0725
07de8                 | LR__0653
07de8     DC 0A B0 FD | 	call	#_compile_fun_2p
07dec     FD 30 02 F6 | 	mov	local06, result1
07df0     C8 03 90 FD | 	jmp	#LR__0725
07df4                 | LR__0654
07df4     D0 0A B0 FD | 	call	#_compile_fun_2p
07df8     FD 30 02 F6 | 	mov	local06, result1
07dfc     BC 03 90 FD | 	jmp	#LR__0725
07e00                 | LR__0655
07e00     C4 0A B0 FD | 	call	#_compile_fun_2p
07e04     FD 30 02 F6 | 	mov	local06, result1
07e08     B0 03 90 FD | 	jmp	#LR__0725
07e0c                 | LR__0656
07e0c     B8 0A B0 FD | 	call	#_compile_fun_2p
07e10     FD 30 02 F6 | 	mov	local06, result1
07e14     A4 03 90 FD | 	jmp	#LR__0725
07e18                 | LR__0657
07e18                 | ' return expr()
07e18     E8 41 B0 FD | 	call	#_expr
07e1c     FD 30 02 F6 | 	mov	local06, result1
07e20     98 03 90 FD | 	jmp	#LR__0725
07e24                 | LR__0658
07e24                 | ' return expr()
07e24     DC 41 B0 FD | 	call	#_expr
07e28     FD 30 02 F6 | 	mov	local06, result1
07e2c     8C 03 90 FD | 	jmp	#LR__0725
07e30                 | LR__0659
07e30     94 0A B0 FD | 	call	#_compile_fun_2p
07e34     FD 30 02 F6 | 	mov	local06, result1
07e38     80 03 90 FD | 	jmp	#LR__0725
07e3c                 | LR__0660
07e3c     58 0D B0 FD | 	call	#_compile_fun_varp
07e40     FD 34 02 F6 | 	mov	local08, result1
07e44     FE 30 02 F6 | 	mov	local06, result2
07e48     70 03 90 FD | 	jmp	#LR__0725
07e4c                 | LR__0661
07e4c     48 0D B0 FD | 	call	#_compile_fun_varp
07e50     FD 34 02 F6 | 	mov	local08, result1
07e54     FE 30 02 F6 | 	mov	local06, result2
07e58     60 03 90 FD | 	jmp	#LR__0725
07e5c                 | LR__0662
07e5c     38 0D B0 FD | 	call	#_compile_fun_varp
07e60     FD 34 02 F6 | 	mov	local08, result1
07e64     FE 30 02 F6 | 	mov	local06, result2
07e68     50 03 90 FD | 	jmp	#LR__0725
07e6c                 | LR__0663
07e6c                 | ' return expr()
07e6c     94 41 B0 FD | 	call	#_expr
07e70     FD 30 02 F6 | 	mov	local06, result1
07e74     44 03 90 FD | 	jmp	#LR__0725
07e78                 | LR__0664
07e78     40 22 B0 FD | 	call	#_compile_dim
07e7c     FD 30 02 F6 | 	mov	local06, result1
07e80     F4 03 90 FD | 	jmp	#LR__0726
07e84                 | LR__0665
07e84     10 0D B0 FD | 	call	#_compile_fun_varp
07e88     FD 34 02 F6 | 	mov	local08, result1
07e8c     FE 30 02 F6 | 	mov	local06, result2
07e90     28 03 90 FD | 	jmp	#LR__0725
07e94                 | LR__0666
07e94     30 0A B0 FD | 	call	#_compile_fun_2p
07e98     FD 30 02 F6 | 	mov	local06, result1
07e9c     1C 03 90 FD | 	jmp	#LR__0725
07ea0                 | LR__0667
07ea0     F4 0C B0 FD | 	call	#_compile_fun_varp
07ea4     FD 34 02 F6 | 	mov	local08, result1
07ea8     FE 30 02 F6 | 	mov	local06, result2
07eac     0C 03 90 FD | 	jmp	#LR__0725
07eb0                 | LR__0668
07eb0     17 13 02 F6 | 	mov	arg01, local05
07eb4     CC 20 B0 FD | 	call	#_compile_else
07eb8     FD 30 02 F6 | 	mov	local06, result1
07ebc     B8 03 90 FD | 	jmp	#LR__0726
07ec0                 | LR__0669
07ec0     D4 0C B0 FD | 	call	#_compile_fun_varp
07ec4     FD 34 02 F6 | 	mov	local08, result1
07ec8     FE 30 02 F6 | 	mov	local06, result2
07ecc     EC 02 90 FD | 	jmp	#LR__0725
07ed0                 | LR__0670
07ed0     C4 0C B0 FD | 	call	#_compile_fun_varp
07ed4     FD 34 02 F6 | 	mov	local08, result1
07ed8     FE 30 02 F6 | 	mov	local06, result2
07edc     DC 02 90 FD | 	jmp	#LR__0725
07ee0                 | LR__0671
07ee0     01 2E 16 F2 | 	cmp	local05, #1 wc
07ee4     08 00 90 CD |  if_b	jmp	#LR__0672
07ee8     6C 33 B0 FD | 	call	#_compile_goto
07eec     88 03 90 FD | 	jmp	#LR__0726
07ef0                 | LR__0672
07ef0     19 12 06 F6 | 	mov	arg01, #25
07ef4     00 14 06 F6 | 	mov	arg02, #0
07ef8     C0 C7 B1 FD | 	call	#_printerror
07efc     78 03 90 FD | 	jmp	#LR__0726
07f00                 | LR__0673
07f00     01 2E 16 F2 | 	cmp	local05, #1 wc
07f04     08 00 90 CD |  if_b	jmp	#LR__0674
07f08     E8 32 B0 FD | 	call	#_compile_gosub
07f0c     68 03 90 FD | 	jmp	#LR__0726
07f10                 | LR__0674
07f10     19 12 06 F6 | 	mov	arg01, #25
07f14     00 14 06 F6 | 	mov	arg02, #0
07f18     A0 C7 B1 FD | 	call	#_printerror
07f1c     58 03 90 FD | 	jmp	#LR__0726
07f20                 | LR__0675
07f20     74 0C B0 FD | 	call	#_compile_fun_varp
07f24     FD 34 02 F6 | 	mov	local08, result1
07f28     FE 30 02 F6 | 	mov	local06, result2
07f2c     8C 02 90 FD | 	jmp	#LR__0725
07f30                 | LR__0676
07f30     0C 0B B0 FD | 	call	#_compile_fun_4p
07f34     FD 30 02 F6 | 	mov	local06, result1
07f38     80 02 90 FD | 	jmp	#LR__0725
07f3c                 | LR__0677
07f3c                 | ' return expr()
07f3c     C4 40 B0 FD | 	call	#_expr
07f40     FD 30 02 F6 | 	mov	local06, result1
07f44     74 02 90 FD | 	jmp	#LR__0725
07f48                 | LR__0678
07f48     44 28 B0 FD | 	call	#_compile_for
07f4c     FD 30 02 F6 | 	mov	local06, result1
07f50     24 03 90 FD | 	jmp	#LR__0726
07f54                 | LR__0679
07f54     40 0C B0 FD | 	call	#_compile_fun_varp
07f58     FD 34 02 F6 | 	mov	local08, result1
07f5c     FE 30 02 F6 | 	mov	local06, result2
07f60     58 02 90 FD | 	jmp	#LR__0725
07f64                 | LR__0680
07f64     17 13 02 F6 | 	mov	arg01, local05
07f68     90 1E B0 FD | 	call	#_compile_if
07f6c     FD 30 02 F6 | 	mov	local06, result1
07f70     04 03 90 FD | 	jmp	#LR__0726
07f74                 | LR__0681
07f74                 | ' return expr()
07f74     8C 40 B0 FD | 	call	#_expr
07f78     FD 30 02 F6 | 	mov	local06, result1
07f7c     3C 02 90 FD | 	jmp	#LR__0725
07f80                 | LR__0682
07f80     E0 0D B0 FD | 	call	#_compile_input
07f84     FD 34 02 F6 | 	mov	local08, result1
07f88     FE 30 02 F6 | 	mov	local06, result2
07f8c     2C 02 90 FD | 	jmp	#LR__0725
07f90                 | LR__0683
07f90                 | ' return expr()
07f90     70 40 B0 FD | 	call	#_expr
07f94     FD 30 02 F6 | 	mov	local06, result1
07f98     20 02 90 FD | 	jmp	#LR__0725
07f9c                 | LR__0684
07f9c     F8 0B B0 FD | 	call	#_compile_fun_varp
07fa0     FD 34 02 F6 | 	mov	local08, result1
07fa4     FE 30 02 F6 | 	mov	local06, result2
07fa8     10 02 90 FD | 	jmp	#LR__0725
07fac                 | LR__0685
07fac     E8 0B B0 FD | 	call	#_compile_fun_varp
07fb0     FD 34 02 F6 | 	mov	local08, result1
07fb4     FE 30 02 F6 | 	mov	local06, result2
07fb8     00 02 90 FD | 	jmp	#LR__0725
07fbc                 | LR__0686
07fbc     08 09 B0 FD | 	call	#_compile_fun_2p
07fc0     FD 30 02 F6 | 	mov	local06, result1
07fc4     F4 01 90 FD | 	jmp	#LR__0725
07fc8                 | LR__0687
07fc8                 | ' return expr()
07fc8     38 40 B0 FD | 	call	#_expr
07fcc     FD 30 02 F6 | 	mov	local06, result1
07fd0     E8 01 90 FD | 	jmp	#LR__0725
07fd4                 | LR__0688
07fd4                 | ' return expr()
07fd4     2C 40 B0 FD | 	call	#_expr
07fd8     FD 30 02 F6 | 	mov	local06, result1
07fdc     DC 01 90 FD | 	jmp	#LR__0725
07fe0                 | LR__0689
07fe0                 | ' return expr()
07fe0     20 40 B0 FD | 	call	#_expr
07fe4     FD 30 02 F6 | 	mov	local06, result1
07fe8     D0 01 90 FD | 	jmp	#LR__0725
07fec                 | LR__0690
07fec     6C 30 B0 FD | 	call	#_compile_next
07ff0     FD 30 02 F6 | 	mov	local06, result1
07ff4     80 02 90 FD | 	jmp	#LR__0726
07ff8                 | LR__0691
07ff8     4C 36 B0 FD | 	call	#_compile_on
07ffc     FD 30 02 F6 | 	mov	local06, result1
08000     74 02 90 FD | 	jmp	#LR__0726
08004                 | LR__0692
08004     48 09 B0 FD | 	call	#_compile_fun_3p
08008     FD 30 02 F6 | 	mov	local06, result1
0800c     AC 01 90 FD | 	jmp	#LR__0725
08010                 | LR__0693
08010                 | ' return expr()
08010     F0 3F B0 FD | 	call	#_expr
08014     FD 30 02 F6 | 	mov	local06, result1
08018     A0 01 90 FD | 	jmp	#LR__0725
0801c                 | LR__0694
0801c                 | ' return expr()
0801c     E4 3F B0 FD | 	call	#_expr
08020     FD 30 02 F6 | 	mov	local06, result1
08024     94 01 90 FD | 	jmp	#LR__0725
08028                 | LR__0695
08028                 | ' return expr()
08028     D8 3F B0 FD | 	call	#_expr
0802c     FD 30 02 F6 | 	mov	local06, result1
08030     88 01 90 FD | 	jmp	#LR__0725
08034                 | LR__0696
08034                 | ' return expr()
08034     CC 3F B0 FD | 	call	#_expr
08038     FD 30 02 F6 | 	mov	local06, result1
0803c     7C 01 90 FD | 	jmp	#LR__0725
08040                 | LR__0697
08040     FC 09 B0 FD | 	call	#_compile_fun_4p
08044     FD 30 02 F6 | 	mov	local06, result1
08048     70 01 90 FD | 	jmp	#LR__0725
0804c                 | LR__0698
0804c                 | ' return expr()
0804c     B4 3F B0 FD | 	call	#_expr
08050     FD 30 02 F6 | 	mov	local06, result1
08054     64 01 90 FD | 	jmp	#LR__0725
08058                 | LR__0699
08058     6C 08 B0 FD | 	call	#_compile_fun_2p
0805c     FD 30 02 F6 | 	mov	local06, result1
08060     58 01 90 FD | 	jmp	#LR__0725
08064                 | LR__0700
08064     30 0B B0 FD | 	call	#_compile_fun_varp
08068     FD 34 02 F6 | 	mov	local08, result1
0806c     FE 30 02 F6 | 	mov	local06, result2
08070     48 01 90 FD | 	jmp	#LR__0725
08074                 | LR__0701
08074     20 0B B0 FD | 	call	#_compile_fun_varp
08078     FD 34 02 F6 | 	mov	local08, result1
0807c     FE 30 02 F6 | 	mov	local06, result2
08080     38 01 90 FD | 	jmp	#LR__0725
08084                 | LR__0702
08084     40 08 B0 FD | 	call	#_compile_fun_2p
08088     FD 30 02 F6 | 	mov	local06, result1
0808c     2C 01 90 FD | 	jmp	#LR__0725
08090                 | LR__0703
08090     34 08 B0 FD | 	call	#_compile_fun_2p
08094     FD 30 02 F6 | 	mov	local06, result1
08098     20 01 90 FD | 	jmp	#LR__0725
0809c                 | LR__0704
0809c     84 16 B0 FD | 	call	#_compile_print
080a0     FD 30 02 F6 | 	mov	local06, result1
080a4     D0 01 90 FD | 	jmp	#LR__0726
080a8                 | LR__0705
080a8     EC 0A B0 FD | 	call	#_compile_fun_varp
080ac     FD 34 02 F6 | 	mov	local08, result1
080b0     FE 30 02 F6 | 	mov	local06, result2
080b4     04 01 90 FD | 	jmp	#LR__0725
080b8                 | LR__0706
080b8     B8 0B B0 FD | 	call	#_compile_read
080bc     FD 34 02 F6 | 	mov	local08, result1
080c0     FE 30 02 F6 | 	mov	local06, result2
080c4     F4 00 90 FD | 	jmp	#LR__0725
080c8                 | LR__0707
080c8                 | ' return expr()
080c8     38 3F B0 FD | 	call	#_expr
080cc     FD 30 02 F6 | 	mov	local06, result1
080d0     E8 00 90 FD | 	jmp	#LR__0725
080d4                 | LR__0708
080d4     C0 0A B0 FD | 	call	#_compile_fun_varp
080d8     FD 34 02 F6 | 	mov	local08, result1
080dc     FE 30 02 F6 | 	mov	local06, result2
080e0     D8 00 90 FD | 	jmp	#LR__0725
080e4                 | LR__0709
080e4     B0 0A B0 FD | 	call	#_compile_fun_varp
080e8     FD 34 02 F6 | 	mov	local08, result1
080ec     FE 30 02 F6 | 	mov	local06, result2
080f0     C8 00 90 FD | 	jmp	#LR__0725
080f4                 | LR__0710
080f4     A0 0A B0 FD | 	call	#_compile_fun_varp
080f8     FD 34 02 F6 | 	mov	local08, result1
080fc     FE 30 02 F6 | 	mov	local06, result2
08100     B8 00 90 FD | 	jmp	#LR__0725
08104                 | LR__0711
08104     C0 07 B0 FD | 	call	#_compile_fun_2p
08108     FD 30 02 F6 | 	mov	local06, result1
0810c     AC 00 90 FD | 	jmp	#LR__0725
08110                 | LR__0712
08110     B4 07 B0 FD | 	call	#_compile_fun_2p
08114     FD 30 02 F6 | 	mov	local06, result1
08118     A0 00 90 FD | 	jmp	#LR__0725
0811c                 | LR__0713
0811c     A8 07 B0 FD | 	call	#_compile_fun_2p
08120     FD 30 02 F6 | 	mov	local06, result1
08124     94 00 90 FD | 	jmp	#LR__0725
08128                 | LR__0714
08128     9C 07 B0 FD | 	call	#_compile_fun_2p
0812c     FD 30 02 F6 | 	mov	local06, result1
08130     88 00 90 FD | 	jmp	#LR__0725
08134                 | LR__0715
08134     90 07 B0 FD | 	call	#_compile_fun_2p
08138     FD 30 02 F6 | 	mov	local06, result1
0813c     7C 00 90 FD | 	jmp	#LR__0725
08140                 | LR__0716
08140     84 07 B0 FD | 	call	#_compile_fun_2p
08144     FD 30 02 F6 | 	mov	local06, result1
08148     70 00 90 FD | 	jmp	#LR__0725
0814c                 | LR__0717
0814c     78 07 B0 FD | 	call	#_compile_fun_2p
08150     FD 30 02 F6 | 	mov	local06, result1
08154     64 00 90 FD | 	jmp	#LR__0725
08158                 | LR__0718
08158     3C 0A B0 FD | 	call	#_compile_fun_varp
0815c     FD 34 02 F6 | 	mov	local08, result1
08160     FE 30 02 F6 | 	mov	local06, result2
08164     54 00 90 FD | 	jmp	#LR__0725
08168                 | LR__0719
08168     E4 07 B0 FD | 	call	#_compile_fun_3p
0816c     FD 30 02 F6 | 	mov	local06, result1
08170     48 00 90 FD | 	jmp	#LR__0725
08174                 | LR__0720
08174                 | ' return expr()
08174     8C 3E B0 FD | 	call	#_expr
08178     FD 30 02 F6 | 	mov	local06, result1
0817c     3C 00 90 FD | 	jmp	#LR__0725
08180                 | LR__0721
08180     44 07 B0 FD | 	call	#_compile_fun_2p
08184     FD 30 02 F6 | 	mov	local06, result1
08188     30 00 90 FD | 	jmp	#LR__0725
0818c                 | LR__0722
0818c     38 07 B0 FD | 	call	#_compile_fun_2p
08190     FD 30 02 F6 | 	mov	local06, result1
08194     24 00 90 FD | 	jmp	#LR__0725
08198                 | LR__0723
08198     2C 07 B0 FD | 	call	#_compile_fun_2p
0819c     FD 30 02 F6 | 	mov	local06, result1
081a0     18 00 90 FD | 	jmp	#LR__0725
081a4                 | LR__0724
081a4     1C 13 B0 FD | 	call	#_compile_array_assign
081a8     FD 30 02 F6 | 	mov	local06, result1
081ac     0E 30 0E F2 | 	cmp	local06, #14 wz
081b0     C4 00 90 5D |  if_ne	jmp	#LR__0726
081b4                 | ' return 23
081b4     17 30 06 F6 | 	mov	local06, #23
081b8     BC 00 90 FD | 	jmp	#LR__0726
081bc                 | ' return 23
081bc                 | LR__0725
081bc     19 2B 02 F6 | 	mov	local03, local07
081c0     1A 27 02 F6 | 	mov	local01, local08
081c4     13 37 02 F6 | 	mov	local09, local01
081c8     14 39 02 F6 | 	mov	local10, local02
081cc     15 33 02 F6 | 	mov	local07, local03
081d0     4A 00 00 FF 
081d4     9C E4 05 F1 | 	add	objptr, ##38044
081d8     F2 26 02 FB | 	rdlong	local01, objptr
081dc     13 35 02 F6 | 	mov	local08, local01
081e0     01 34 66 F0 | 	shl	local08, #1
081e4     13 35 02 F1 | 	add	local08, local01
081e8     02 34 66 F0 | 	shl	local08, #2
081ec     03 00 00 FF 
081f0     00 E4 85 F1 | 	sub	objptr, ##1536
081f4     F2 34 02 F1 | 	add	local08, objptr
081f8     1A 37 62 FC | 	wrlong	local09, local08
081fc     03 00 00 FF 
08200     00 E4 05 F1 | 	add	objptr, ##1536
08204     F2 26 02 FB | 	rdlong	local01, objptr
08208     13 37 02 F6 | 	mov	local09, local01
0820c     01 36 66 F0 | 	shl	local09, #1
08210     13 37 02 F1 | 	add	local09, local01
08214     02 36 66 F0 | 	shl	local09, #2
08218     03 00 00 FF 
0821c     00 E4 85 F1 | 	sub	objptr, ##1536
08220     F2 36 02 F1 | 	add	local09, objptr
08224     04 36 06 F1 | 	add	local09, #4
08228     1B 39 62 FC | 	wrlong	local10, local09
0822c     03 00 00 FF 
08230     00 E4 05 F1 | 	add	objptr, ##1536
08234     F2 26 02 FB | 	rdlong	local01, objptr
08238     13 39 02 F6 | 	mov	local10, local01
0823c     01 38 66 F0 | 	shl	local10, #1
08240     13 39 02 F1 | 	add	local10, local01
08244     02 38 66 F0 | 	shl	local10, #2
08248     03 00 00 FF 
0824c     00 E4 85 F1 | 	sub	objptr, ##1536
08250     F2 38 02 F1 | 	add	local10, objptr
08254     08 38 06 F1 | 	add	local10, #8
08258     1C 33 62 FC | 	wrlong	local07, local10
0825c     03 00 00 FF 
08260     00 E4 05 F1 | 	add	objptr, ##1536
08264     F2 36 02 FB | 	rdlong	local09, objptr
08268     01 36 06 F1 | 	add	local09, #1
0826c     F2 36 62 FC | 	wrlong	local09, objptr
08270     4A 00 00 FF 
08274     9C E4 85 F1 | 	sub	objptr, ##38044
08278                 | LR__0726
08278                 | ' 
08278                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
08278                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
08278     03 2C 0E F2 | 	cmp	local04, #3 wz
0827c     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08280     38 00 90 5D |  if_ne	jmp	#LR__0727
08284     4A 00 00 FF 
08288     9C E4 05 F1 | 	add	objptr, ##38044
0828c     F2 38 02 FB | 	rdlong	local10, objptr
08290     1C 27 02 F6 | 	mov	local01, local10
08294     01 26 66 F0 | 	shl	local01, #1
08298     1C 27 02 F1 | 	add	local01, local10
0829c     02 26 66 F0 | 	shl	local01, #2
082a0     03 00 00 FF 
082a4     00 E4 85 F1 | 	sub	objptr, ##1536
082a8     F2 26 02 F1 | 	add	local01, objptr
082ac     08 26 06 F1 | 	add	local01, #8
082b0     13 FD 6B FC | 	wrlong	#510, local01
082b4     47 00 00 FF 
082b8     9C E4 85 F1 | 	sub	objptr, ##36508
082bc                 | LR__0727
082bc                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
082bc                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
082bc     4A 00 00 FF 
082c0     9C E4 05 F1 | 	add	objptr, ##38044
082c4     F2 26 02 FB | 	rdlong	local01, objptr
082c8     4A 00 00 FF 
082cc     9C E4 85 F1 | 	sub	objptr, ##38044
082d0     97 58 48 FB | 	callpa	#(@LR__0730-@LR__0728)>>2,fcache_load_ptr_
082d4                 | LR__0728
082d4     13 39 02 F6 | 	mov	local10, local01
082d8     01 38 66 F0 | 	shl	local10, #1
082dc     13 39 02 F1 | 	add	local10, local01
082e0     02 38 66 F0 | 	shl	local10, #2
082e4     47 00 00 FF 
082e8     9C E4 05 F1 | 	add	objptr, ##36508
082ec     F2 38 02 F1 | 	add	local10, objptr
082f0     08 38 06 F1 | 	add	local10, #8
082f4     1C 39 02 FB | 	rdlong	local10, local10
082f8     9B 38 0E F2 | 	cmp	local10, #155 wz
082fc     47 00 00 FF 
08300     9C E4 85 F1 | 	sub	objptr, ##36508
08304     70 00 90 5D |  if_ne	jmp	#LR__0729
08308     13 37 02 F6 | 	mov	local09, local01
0830c     01 36 86 F1 | 	sub	local09, #1
08310     1B 39 02 F6 | 	mov	local10, local09
08314     01 38 66 F0 | 	shl	local10, #1
08318     1B 39 02 F1 | 	add	local10, local09
0831c     02 38 66 F0 | 	shl	local10, #2
08320     47 00 00 FF 
08324     9C E4 05 F1 | 	add	objptr, ##36508
08328     F2 38 02 F1 | 	add	local10, objptr
0832c     08 38 06 F1 | 	add	local10, #8
08330     1C 39 02 FB | 	rdlong	local10, local10
08334     11 38 0E F2 | 	cmp	local10, #17 wz
08338     47 00 00 FF 
0833c     9C E4 85 F1 | 	sub	objptr, ##36508
08340     34 00 90 5D |  if_ne	jmp	#LR__0729
08344     13 37 02 F6 | 	mov	local09, local01
08348     01 36 86 F1 | 	sub	local09, #1
0834c     1B 39 02 F6 | 	mov	local10, local09
08350     01 38 66 F0 | 	shl	local10, #1
08354     1B 39 02 F1 | 	add	local10, local09
08358     02 38 66 F0 | 	shl	local10, #2
0835c     47 00 00 FF 
08360     9C E4 05 F1 | 	add	objptr, ##36508
08364     F2 38 02 F1 | 	add	local10, objptr
08368     08 38 06 F1 | 	add	local10, #8
0836c     1C 25 68 FC | 	wrlong	#18, local10
08370     47 00 00 FF 
08374     9C E4 85 F1 | 	sub	objptr, ##36508
08378                 | LR__0729
08378     01 26 86 F1 | 	sub	local01, #1
0837c     01 26 56 F2 | 	cmps	local01, #1 wc
08380     50 FF 9F 3D |  if_ae	jmp	#LR__0728
08384                 | LR__0730
08384                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
08384                 | ' return err
08384     18 FB 01 F6 | 	mov	result1, local06
08388     A7 F0 03 F6 | 	mov	ptra, fp
0838c     B2 00 A0 FD | 	call	#popregs_
08390                 | _compile_immediate_ret
08390     2D 00 64 FD | 	ret
08394                 | 
08394                 | ' 
08394                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
08394                 | ' 
08394                 | ' function compile_immediate_assign(linetype as ulong) as ulong
08394                 | _compile_immediate_assign
08394     0C 4A 05 F6 | 	mov	COUNT_, #12
08398     A8 00 A0 FD | 	call	#pushregs_
0839c     09 2D 02 F6 | 	mov	local04, arg01
083a0     FF 2A 06 F6 | 	mov	local03, #255
083a4     01 2E 66 F6 | 	neg	local05, #1
083a8     00 30 06 F6 | 	mov	local06, #0
083ac                 | ' 
083ac                 | ' t1.result_type=result_error : t1.result.uresult=0
083ac                 | ' i=-1: j=-1 : err=0
083ac                 | ' 
083ac                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
083ac     02 2C 0E F2 | 	cmp	local04, #2 wz
083b0     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
083b4     35 00 00 AF 
083b8     2C E4 05 A1 |  if_e	add	objptr, ##27180
083bc     F2 32 02 AB |  if_e	rdlong	local07, objptr
083c0     02 00 00 AF 
083c4     38 E4 05 A1 |  if_e	add	objptr, ##1080
083c8     F2 04 68 AC |  if_e	wrlong	#2, objptr
083cc     37 00 00 AF 
083d0     64 E4 85 A1 |  if_e	sub	objptr, ##28260
083d4                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
083d4     04 2C 0E F2 | 	cmp	local04, #4 wz
083d8     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
083dc     2C 00 90 5D |  if_ne	jmp	#LR__0740
083e0     35 00 00 FF 
083e4     34 E4 05 F1 | 	add	objptr, ##27188
083e8     F2 32 02 FB | 	rdlong	local07, objptr
083ec     02 00 00 FF 
083f0     30 E4 05 F1 | 	add	objptr, ##1072
083f4     F2 06 68 FC | 	wrlong	#3, objptr
083f8     13 00 00 FF 
083fc     38 E4 05 F1 | 	add	objptr, ##9784
08400     F2 04 68 FC | 	wrlong	#2, objptr
08404     4A 00 00 FF 
08408     9C E4 85 F1 | 	sub	objptr, ##38044
0840c                 | LR__0740
0840c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
0840c     05 2C 0E F2 | 	cmp	local04, #5 wz
08410     3C 00 90 5D |  if_ne	jmp	#LR__0741
08414     37 00 00 FF 
08418     64 E4 05 F1 | 	add	objptr, ##28260
0841c     F2 FA 01 FB | 	rdlong	result1, objptr
08420     FD 32 02 F6 | 	mov	local07, result1
08424     03 32 66 F0 | 	shl	local07, #3
08428     02 00 00 FF 
0842c     38 E4 85 F1 | 	sub	objptr, ##1080
08430     F2 32 02 F1 | 	add	local07, objptr
08434     19 33 02 FB | 	rdlong	local07, local07
08438     02 FA 05 F1 | 	add	result1, #2
0843c     02 00 00 FF 
08440     38 E4 05 F1 | 	add	objptr, ##1080
08444     F2 FA 61 FC | 	wrlong	result1, objptr
08448     37 00 00 FF 
0844c     64 E4 85 F1 | 	sub	objptr, ##28260
08450                 | LR__0741
08450     19 13 02 F6 | 	mov	arg01, local07
08454     01 14 06 F6 | 	mov	arg02, #1
08458     BC 1D B2 FD | 	call	#__system__Right_S
0845c     FD 34 02 F6 | 	mov	local08, result1
08460     A0 3B B0 FD | 	call	#_expr
08464                 | ' 
08464                 | ' suffix2$=right$(varname2$,1)
08464                 | ' expr()
08464                 | ' if varnum>0 then					' try to find a variable
08464     35 00 00 FF 
08468     28 E4 05 F1 | 	add	objptr, ##27176
0846c     F2 36 02 FB | 	rdlong	local09, objptr
08470     35 00 00 FF 
08474     28 E4 85 F1 | 	sub	objptr, ##27176
08478     01 36 56 F2 | 	cmps	local09, #1 wc
0847c     58 00 90 CD |  if_b	jmp	#LR__0744
08480                 | '   for i=0 to varnum-1
08480     00 38 06 F6 | 	mov	local10, #0
08484     35 00 00 FF 
08488     28 E4 05 F1 | 	add	objptr, ##27176
0848c     F2 3A 02 FB | 	rdlong	local11, objptr
08490     35 00 00 FF 
08494     28 E4 85 F1 | 	sub	objptr, ##27176
08498                 | LR__0742
08498     1D 39 52 F2 | 	cmps	local10, local11 wc
0849c     38 00 90 3D |  if_ae	jmp	#LR__0743
084a0                 | '     if variables(i).name=varname2$ then j=i : exit
084a0     1C 37 02 F6 | 	mov	local09, local10
084a4     04 36 66 F0 | 	shl	local09, #4
084a8     15 00 00 FF 
084ac     18 E4 05 F1 | 	add	objptr, ##10776
084b0     F2 36 02 F1 | 	add	local09, objptr
084b4     1B 13 02 FB | 	rdlong	arg01, local09
084b8     19 15 02 F6 | 	mov	arg02, local07
084bc     15 00 00 FF 
084c0     18 E4 85 F1 | 	sub	objptr, ##10776
084c4     70 FC B1 FD | 	call	#__system___string_cmp
084c8     00 FA 0D F2 | 	cmp	result1, #0 wz
084cc     1C 2F 02 A6 |  if_e	mov	local05, local10
084d0     01 38 06 51 |  if_ne	add	local10, #1
084d4     C0 FF 9F 5D |  if_ne	jmp	#LR__0742
084d8                 | LR__0743
084d8                 | LR__0744
084d8                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
084d8     FF FF 7F FF 
084dc     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
084e0     60 00 90 5D |  if_ne	jmp	#LR__0745
084e4     35 00 00 FF 
084e8     28 E4 05 F1 | 	add	objptr, ##27176
084ec     F2 36 02 FB | 	rdlong	local09, objptr
084f0     35 00 00 FF 
084f4     28 E4 85 F1 | 	sub	objptr, ##27176
084f8     02 00 00 FF 
084fc     00 36 56 F2 | 	cmps	local09, ##1024 wc
08500     40 00 90 3D |  if_ae	jmp	#LR__0745
08504     35 00 00 FF 
08508     28 E4 05 F1 | 	add	objptr, ##27176
0850c     F2 3A 02 FB | 	rdlong	local11, objptr
08510     04 3A 66 F0 | 	shl	local11, #4
08514     20 00 00 FF 
08518     10 E4 85 F1 | 	sub	objptr, ##16400
0851c     F2 3A 02 F1 | 	add	local11, objptr
08520     1D 33 62 FC | 	wrlong	local07, local11
08524     20 00 00 FF 
08528     10 E4 05 F1 | 	add	objptr, ##16400
0852c     F2 36 02 FB | 	rdlong	local09, objptr
08530     1B 2F 02 F6 | 	mov	local05, local09
08534     01 36 06 F1 | 	add	local09, #1
08538     F2 36 62 FC | 	wrlong	local09, objptr
0853c     35 00 00 FF 
08540     28 E4 85 F1 | 	sub	objptr, ##27176
08544                 | LR__0745
08544                 | ' if varnum>=maxvars then
08544     35 00 00 FF 
08548     28 E4 05 F1 | 	add	objptr, ##27176
0854c     F2 36 02 FB | 	rdlong	local09, objptr
08550     35 00 00 FF 
08554     28 E4 85 F1 | 	sub	objptr, ##27176
08558     02 00 00 FF 
0855c     00 36 56 F2 | 	cmps	local09, ##1024 wc
08560     2D 30 06 36 |  if_ae	mov	local06, #45
08564     C8 01 90 3D |  if_ae	jmp	#LR__0750
08568     17 27 02 F6 | 	mov	local01, local05
0856c     17 2A 06 F6 | 	mov	local03, #23
08570     13 37 02 F6 | 	mov	local09, local01
08574     14 3D 02 F6 | 	mov	local12, local02
08578     15 27 02 F6 | 	mov	local01, local03
0857c     4A 00 00 FF 
08580     9C E4 05 F1 | 	add	objptr, ##38044
08584     F2 3A 02 FB | 	rdlong	local11, objptr
08588     1D 39 02 F6 | 	mov	local10, local11
0858c     01 38 66 F0 | 	shl	local10, #1
08590     1D 39 02 F1 | 	add	local10, local11
08594     02 38 66 F0 | 	shl	local10, #2
08598     03 00 00 FF 
0859c     00 E4 85 F1 | 	sub	objptr, ##1536
085a0     F2 38 02 F1 | 	add	local10, objptr
085a4     1C 37 62 FC | 	wrlong	local09, local10
085a8     03 00 00 FF 
085ac     00 E4 05 F1 | 	add	objptr, ##1536
085b0     F2 36 02 FB | 	rdlong	local09, objptr
085b4     1B 3B 02 F6 | 	mov	local11, local09
085b8     01 3A 66 F0 | 	shl	local11, #1
085bc     1B 3B 02 F1 | 	add	local11, local09
085c0     02 3A 66 F0 | 	shl	local11, #2
085c4     03 00 00 FF 
085c8     00 E4 85 F1 | 	sub	objptr, ##1536
085cc     F2 3A 02 F1 | 	add	local11, objptr
085d0     04 3A 06 F1 | 	add	local11, #4
085d4     1D 3D 62 FC | 	wrlong	local12, local11
085d8     03 00 00 FF 
085dc     00 E4 05 F1 | 	add	objptr, ##1536
085e0     F2 36 02 FB | 	rdlong	local09, objptr
085e4     1B 3D 02 F6 | 	mov	local12, local09
085e8     01 3C 66 F0 | 	shl	local12, #1
085ec     1B 3D 02 F1 | 	add	local12, local09
085f0     02 3C 66 F0 | 	shl	local12, #2
085f4     03 00 00 FF 
085f8     00 E4 85 F1 | 	sub	objptr, ##1536
085fc     F2 3C 02 F1 | 	add	local12, objptr
08600     08 3C 06 F1 | 	add	local12, #8
08604     1E 27 62 FC | 	wrlong	local01, local12
08608     03 00 00 FF 
0860c     00 E4 05 F1 | 	add	objptr, ##1536
08610     F2 36 02 FB | 	rdlong	local09, objptr
08614     01 36 06 F1 | 	add	local09, #1
08618     F2 36 62 FC | 	wrlong	local09, objptr
0861c     4A 00 00 FF 
08620     9C E4 85 F1 | 	sub	objptr, ##38044
08624                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
08624                 | '   compiledline(lineptr)=t1:  lineptr+=1 
08624                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
08624     03 2C 0E F2 | 	cmp	local04, #3 wz
08628     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
0862c     38 00 90 5D |  if_ne	jmp	#LR__0746
08630     4A 00 00 FF 
08634     9C E4 05 F1 | 	add	objptr, ##38044
08638     F2 3C 02 FB | 	rdlong	local12, objptr
0863c     1E 27 02 F6 | 	mov	local01, local12
08640     01 26 66 F0 | 	shl	local01, #1
08644     1E 27 02 F1 | 	add	local01, local12
08648     02 26 66 F0 | 	shl	local01, #2
0864c     03 00 00 FF 
08650     00 E4 85 F1 | 	sub	objptr, ##1536
08654     F2 26 02 F1 | 	add	local01, objptr
08658     08 26 06 F1 | 	add	local01, #8
0865c     13 FD 6B FC | 	wrlong	#510, local01
08660     47 00 00 FF 
08664     9C E4 85 F1 | 	sub	objptr, ##36508
08668                 | LR__0746
08668                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08668     4A 00 00 FF 
0866c     9C E4 05 F1 | 	add	objptr, ##38044
08670     F2 38 02 FB | 	rdlong	local10, objptr
08674     4A 00 00 FF 
08678     9C E4 85 F1 | 	sub	objptr, ##38044
0867c     97 58 48 FB | 	callpa	#(@LR__0749-@LR__0747)>>2,fcache_load_ptr_
08680                 | LR__0747
08680     1C 3D 02 F6 | 	mov	local12, local10
08684     01 3C 66 F0 | 	shl	local12, #1
08688     1C 3D 02 F1 | 	add	local12, local10
0868c     02 3C 66 F0 | 	shl	local12, #2
08690     47 00 00 FF 
08694     9C E4 05 F1 | 	add	objptr, ##36508
08698     F2 3C 02 F1 | 	add	local12, objptr
0869c     08 3C 06 F1 | 	add	local12, #8
086a0     1E 3D 02 FB | 	rdlong	local12, local12
086a4     9B 3C 0E F2 | 	cmp	local12, #155 wz
086a8     47 00 00 FF 
086ac     9C E4 85 F1 | 	sub	objptr, ##36508
086b0     70 00 90 5D |  if_ne	jmp	#LR__0748
086b4     1C 3D 02 F6 | 	mov	local12, local10
086b8     01 3C 86 F1 | 	sub	local12, #1
086bc     1E 27 02 F6 | 	mov	local01, local12
086c0     01 26 66 F0 | 	shl	local01, #1
086c4     1E 27 02 F1 | 	add	local01, local12
086c8     02 26 66 F0 | 	shl	local01, #2
086cc     47 00 00 FF 
086d0     9C E4 05 F1 | 	add	objptr, ##36508
086d4     F2 26 02 F1 | 	add	local01, objptr
086d8     08 26 06 F1 | 	add	local01, #8
086dc     13 27 02 FB | 	rdlong	local01, local01
086e0     11 26 0E F2 | 	cmp	local01, #17 wz
086e4     47 00 00 FF 
086e8     9C E4 85 F1 | 	sub	objptr, ##36508
086ec     34 00 90 5D |  if_ne	jmp	#LR__0748
086f0     1C 3D 02 F6 | 	mov	local12, local10
086f4     01 3C 86 F1 | 	sub	local12, #1
086f8     1E 27 02 F6 | 	mov	local01, local12
086fc     01 26 66 F0 | 	shl	local01, #1
08700     1E 27 02 F1 | 	add	local01, local12
08704     02 26 66 F0 | 	shl	local01, #2
08708     47 00 00 FF 
0870c     9C E4 05 F1 | 	add	objptr, ##36508
08710     F2 26 02 F1 | 	add	local01, objptr
08714     08 26 06 F1 | 	add	local01, #8
08718     13 25 68 FC | 	wrlong	#18, local01
0871c     47 00 00 FF 
08720     9C E4 85 F1 | 	sub	objptr, ##36508
08724                 | LR__0748
08724     01 38 86 F1 | 	sub	local10, #1
08728     01 38 56 F2 | 	cmps	local10, #1 wc
0872c     50 FF 9F 3D |  if_ae	jmp	#LR__0747
08730                 | LR__0749
08730                 | LR__0750
08730                 | ' return err
08730     18 FB 01 F6 | 	mov	result1, local06
08734     A7 F0 03 F6 | 	mov	ptra, fp
08738     B2 00 A0 FD | 	call	#popregs_
0873c                 | _compile_immediate_assign_ret
0873c     2D 00 64 FD | 	ret
08740                 | 
08740                 | ' 
08740                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08740                 | ' 
08740                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08740                 | _compile
08740     03 4A 05 F6 | 	mov	COUNT_, #3
08744     A8 00 A0 FD | 	call	#pushregs_
08748     09 27 02 F6 | 	mov	local01, arg01
0874c     0B 29 02 F6 | 	mov	local02, arg03
08750     47 00 00 FF 
08754     9C E4 05 F1 | 	add	objptr, ##36508
08758     F2 26 62 FC | 	wrlong	local01, objptr
0875c     04 E4 05 F1 | 	add	objptr, #4
08760     F2 14 62 FC | 	wrlong	arg02, objptr
08764     47 00 00 FF 
08768     A0 E4 85 F1 | 	sub	objptr, ##36512
0876c     14 13 02 F6 | 	mov	arg01, local02
08770     01 12 06 F1 | 	add	arg01, #1
08774     13 15 02 F6 | 	mov	arg02, local01
08778     2C F2 BF FD | 	call	#_compile_immediate
0877c     FD 2A 0A F6 | 	mov	local03, result1 wz
08780                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08780                 | ' ucompiledline(0)=alinemajor
08780                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08780                 | ' 
08780                 | ' ' cont: 
08780                 | ' ' 0 - this is the first part of the line that will continue
08780                 | ' ' 1 - this is the continuation of the line
08780                 | ' ' 2 - this is the last continued line
08780                 | ' ' 3 - this is the one and only part
08780                 | ' 
08780                 | ' err=compile_immediate(cont+1,alinemajor) 
08780                 | ' if err=0 andalso alinemajor>0 then
08780     74 00 90 5D |  if_ne	jmp	#LR__0765
08784     01 26 16 F2 | 	cmp	local01, #1 wc
08788     6C 00 90 CD |  if_b	jmp	#LR__0765
0878c                 | '   if cont=3 orelse cont=2 then 
0878c     03 28 0E F2 | 	cmp	local02, #3 wz
08790     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08794     60 00 90 5D |  if_ne	jmp	#LR__0764
08798                 | '     if alinemajor >lastline then 
08798     4A 00 00 FF 
0879c     AC E4 05 F1 | 	add	objptr, ##38060
087a0     F2 14 02 FB | 	rdlong	arg02, objptr
087a4     4A 00 00 FF 
087a8     AC E4 85 F1 | 	sub	objptr, ##38060
087ac     0A 27 1A F2 | 	cmp	local01, arg02 wcz
087b0     0C 00 90 ED |  if_be	jmp	#LR__0760
087b4     13 13 02 F6 | 	mov	arg01, local01
087b8     24 F1 BF FD | 	call	#_add_line_at_end
087bc     38 00 90 FD | 	jmp	#LR__0763
087c0                 | LR__0760
087c0     13 13 02 F6 | 	mov	arg01, local01
087c4     E8 EA BF FD | 	call	#_deleteline
087c8                 | '       deleteline(alinemajor)  
087c8                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
087c8     4A 00 00 FF 
087cc     AC E4 05 F1 | 	add	objptr, ##38060
087d0     F2 14 02 FB | 	rdlong	arg02, objptr
087d4     4A 00 00 FF 
087d8     AC E4 85 F1 | 	sub	objptr, ##38060
087dc     0A 27 1A F2 | 	cmp	local01, arg02 wcz
087e0     0C 00 90 ED |  if_be	jmp	#LR__0761
087e4     13 13 02 F6 | 	mov	arg01, local01
087e8     F4 F0 BF FD | 	call	#_add_line_at_end
087ec     08 00 90 FD | 	jmp	#LR__0762
087f0                 | LR__0761
087f0     13 13 02 F6 | 	mov	arg01, local01
087f4     CC EE BF FD | 	call	#_insertline
087f8                 | LR__0762
087f8                 | LR__0763
087f8                 | LR__0764
087f8                 | LR__0765
087f8                 | ' return err
087f8     15 FB 01 F6 | 	mov	result1, local03
087fc     A7 F0 03 F6 | 	mov	ptra, fp
08800     B2 00 A0 FD | 	call	#popregs_
08804                 | _compile_ret
08804     2D 00 64 FD | 	ret
08808                 | 
08808                 | ' 
08808                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
08808                 | ' 
08808                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
08808                 | _compile_assign
08808     03 4A 05 F6 | 	mov	COUNT_, #3
0880c     A8 00 A0 FD | 	call	#pushregs_
08810     09 27 02 F6 | 	mov	local01, arg01
08814     0B 29 02 F6 | 	mov	local02, arg03
08818     47 00 00 FF 
0881c     9C E4 05 F1 | 	add	objptr, ##36508
08820     F2 26 62 FC | 	wrlong	local01, objptr
08824     04 E4 05 F1 | 	add	objptr, #4
08828     F2 14 62 FC | 	wrlong	arg02, objptr
0882c     47 00 00 FF 
08830     A0 E4 85 F1 | 	sub	objptr, ##36512
08834     14 13 02 F6 | 	mov	arg01, local02
08838     01 12 06 F1 | 	add	arg01, #1
0883c     54 FB BF FD | 	call	#_compile_immediate_assign
08840     FD 2A 02 F6 | 	mov	local03, result1
08844                 | ' 
08844                 | ' ucompiledline(0)=alinemajor
08844                 | ' ucompiledline(1)=alineminor
08844                 | ' 
08844                 | ' err=compile_immediate_assign(cont+1) 
08844                 | ' if alinemajor>0 then
08844     01 26 16 F2 | 	cmp	local01, #1 wc
08848     6C 00 90 CD |  if_b	jmp	#LR__0775
0884c                 | '   if cont=3 orelse cont=2 then 
0884c     03 28 0E F2 | 	cmp	local02, #3 wz
08850     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08854     60 00 90 5D |  if_ne	jmp	#LR__0774
08858                 | '     if alinemajor >lastline then 
08858     4A 00 00 FF 
0885c     AC E4 05 F1 | 	add	objptr, ##38060
08860     F2 14 02 FB | 	rdlong	arg02, objptr
08864     4A 00 00 FF 
08868     AC E4 85 F1 | 	sub	objptr, ##38060
0886c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08870     0C 00 90 ED |  if_be	jmp	#LR__0770
08874     13 13 02 F6 | 	mov	arg01, local01
08878     64 F0 BF FD | 	call	#_add_line_at_end
0887c     38 00 90 FD | 	jmp	#LR__0773
08880                 | LR__0770
08880     13 13 02 F6 | 	mov	arg01, local01
08884     28 EA BF FD | 	call	#_deleteline
08888                 | '       deleteline(alinemajor)  
08888                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08888     4A 00 00 FF 
0888c     AC E4 05 F1 | 	add	objptr, ##38060
08890     F2 14 02 FB | 	rdlong	arg02, objptr
08894     4A 00 00 FF 
08898     AC E4 85 F1 | 	sub	objptr, ##38060
0889c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
088a0     0C 00 90 ED |  if_be	jmp	#LR__0771
088a4     13 13 02 F6 | 	mov	arg01, local01
088a8     34 F0 BF FD | 	call	#_add_line_at_end
088ac     08 00 90 FD | 	jmp	#LR__0772
088b0                 | LR__0771
088b0     13 13 02 F6 | 	mov	arg01, local01
088b4     0C EE BF FD | 	call	#_insertline
088b8                 | LR__0772
088b8                 | LR__0773
088b8                 | LR__0774
088b8                 | LR__0775
088b8                 | ' return err
088b8     15 FB 01 F6 | 	mov	result1, local03
088bc     A7 F0 03 F6 | 	mov	ptra, fp
088c0     B2 00 A0 FD | 	call	#popregs_
088c4                 | _compile_assign_ret
088c4     2D 00 64 FD | 	ret
088c8                 | 
088c8                 | ' 
088c8                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
088c8                 | ' 
088c8                 | ' function compile_fun_2p() as ulong
088c8                 | _compile_fun_2p
088c8     01 4A 05 F6 | 	mov	COUNT_, #1
088cc     A8 00 A0 FD | 	call	#pushregs_
088d0     30 37 B0 FD | 	call	#_expr
088d4     FD 26 02 F6 | 	mov	local01, result1
088d8                 | ' err=expr() : if err>0 then return err
088d8     01 26 16 F2 | 	cmp	local01, #1 wc
088dc     13 FB 01 36 |  if_ae	mov	result1, local01
088e0     60 00 90 3D |  if_ae	jmp	#LR__0780
088e4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088e4     37 00 00 FF 
088e8     64 E4 05 F1 | 	add	objptr, ##28260
088ec     F2 26 02 FB | 	rdlong	local01, objptr
088f0     03 26 66 F0 | 	shl	local01, #3
088f4     02 00 00 FF 
088f8     38 E4 85 F1 | 	sub	objptr, ##1080
088fc     F2 26 02 F1 | 	add	local01, objptr
08900     04 26 06 F1 | 	add	local01, #4
08904     13 27 02 FB | 	rdlong	local01, local01
08908     11 26 0E F2 | 	cmp	local01, #17 wz
0890c     35 00 00 FF 
08910     2C E4 85 F1 | 	sub	objptr, ##27180
08914     15 FA 05 56 |  if_ne	mov	result1, #21
08918     28 00 90 5D |  if_ne	jmp	#LR__0780
0891c     37 00 00 FF 
08920     64 E4 05 F1 | 	add	objptr, ##28260
08924     F2 26 02 FB | 	rdlong	local01, objptr
08928     01 26 06 F1 | 	add	local01, #1
0892c     F2 26 62 FC | 	wrlong	local01, objptr
08930     37 00 00 FF 
08934     64 E4 85 F1 | 	sub	objptr, ##28260
08938     C8 36 B0 FD | 	call	#_expr
0893c                 | ' err=expr() : if err>0 then return err
0893c     01 FA 15 F2 | 	cmp	result1, #1 wc
08940                 | ' return 0
08940     00 FA 05 C6 |  if_b	mov	result1, #0
08944                 | LR__0780
08944     A7 F0 03 F6 | 	mov	ptra, fp
08948     B2 00 A0 FD | 	call	#popregs_
0894c                 | _compile_fun_2p_ret
0894c     2D 00 64 FD | 	ret
08950                 | 
08950                 | ' 
08950                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08950                 | ' 
08950                 | ' function compile_fun_3p() as ulong
08950                 | _compile_fun_3p
08950     01 4A 05 F6 | 	mov	COUNT_, #1
08954     A8 00 A0 FD | 	call	#pushregs_
08958     A8 36 B0 FD | 	call	#_expr
0895c     FD 26 02 F6 | 	mov	local01, result1
08960                 | ' err=expr() : if err>0 then return err
08960     01 26 16 F2 | 	cmp	local01, #1 wc
08964     13 FB 01 36 |  if_ae	mov	result1, local01
08968     C8 00 90 3D |  if_ae	jmp	#LR__0790
0896c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0896c     37 00 00 FF 
08970     64 E4 05 F1 | 	add	objptr, ##28260
08974     F2 26 02 FB | 	rdlong	local01, objptr
08978     03 26 66 F0 | 	shl	local01, #3
0897c     02 00 00 FF 
08980     38 E4 85 F1 | 	sub	objptr, ##1080
08984     F2 26 02 F1 | 	add	local01, objptr
08988     04 26 06 F1 | 	add	local01, #4
0898c     13 27 02 FB | 	rdlong	local01, local01
08990     11 26 0E F2 | 	cmp	local01, #17 wz
08994     35 00 00 FF 
08998     2C E4 85 F1 | 	sub	objptr, ##27180
0899c     15 FA 05 56 |  if_ne	mov	result1, #21
089a0     90 00 90 5D |  if_ne	jmp	#LR__0790
089a4     37 00 00 FF 
089a8     64 E4 05 F1 | 	add	objptr, ##28260
089ac     F2 26 02 FB | 	rdlong	local01, objptr
089b0     01 26 06 F1 | 	add	local01, #1
089b4     F2 26 62 FC | 	wrlong	local01, objptr
089b8     37 00 00 FF 
089bc     64 E4 85 F1 | 	sub	objptr, ##28260
089c0     40 36 B0 FD | 	call	#_expr
089c4     FD 26 02 F6 | 	mov	local01, result1
089c8                 | ' err=expr() : if err>0 then return err
089c8     01 26 16 F2 | 	cmp	local01, #1 wc
089cc     13 FB 01 36 |  if_ae	mov	result1, local01
089d0     60 00 90 3D |  if_ae	jmp	#LR__0790
089d4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
089d4     37 00 00 FF 
089d8     64 E4 05 F1 | 	add	objptr, ##28260
089dc     F2 26 02 FB | 	rdlong	local01, objptr
089e0     03 26 66 F0 | 	shl	local01, #3
089e4     02 00 00 FF 
089e8     38 E4 85 F1 | 	sub	objptr, ##1080
089ec     F2 26 02 F1 | 	add	local01, objptr
089f0     04 26 06 F1 | 	add	local01, #4
089f4     13 27 02 FB | 	rdlong	local01, local01
089f8     11 26 0E F2 | 	cmp	local01, #17 wz
089fc     35 00 00 FF 
08a00     2C E4 85 F1 | 	sub	objptr, ##27180
08a04     15 FA 05 56 |  if_ne	mov	result1, #21
08a08     28 00 90 5D |  if_ne	jmp	#LR__0790
08a0c     37 00 00 FF 
08a10     64 E4 05 F1 | 	add	objptr, ##28260
08a14     F2 26 02 FB | 	rdlong	local01, objptr
08a18     01 26 06 F1 | 	add	local01, #1
08a1c     F2 26 62 FC | 	wrlong	local01, objptr
08a20     37 00 00 FF 
08a24     64 E4 85 F1 | 	sub	objptr, ##28260
08a28     D8 35 B0 FD | 	call	#_expr
08a2c                 | ' err=expr() : if err>0 then return err
08a2c     01 FA 15 F2 | 	cmp	result1, #1 wc
08a30                 | ' return 0
08a30     00 FA 05 C6 |  if_b	mov	result1, #0
08a34                 | LR__0790
08a34     A7 F0 03 F6 | 	mov	ptra, fp
08a38     B2 00 A0 FD | 	call	#popregs_
08a3c                 | _compile_fun_3p_ret
08a3c     2D 00 64 FD | 	ret
08a40                 | 
08a40                 | ' 
08a40                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08a40                 | ' 
08a40                 | ' function compile_fun_4p() as ulong
08a40                 | _compile_fun_4p
08a40     01 4A 05 F6 | 	mov	COUNT_, #1
08a44     A8 00 A0 FD | 	call	#pushregs_
08a48     B8 35 B0 FD | 	call	#_expr
08a4c     FD 26 02 F6 | 	mov	local01, result1
08a50                 | ' err=expr() : if err>0 then return err
08a50     01 26 16 F2 | 	cmp	local01, #1 wc
08a54     13 FB 01 36 |  if_ae	mov	result1, local01
08a58     30 01 90 3D |  if_ae	jmp	#LR__0800
08a5c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08a5c     37 00 00 FF 
08a60     64 E4 05 F1 | 	add	objptr, ##28260
08a64     F2 26 02 FB | 	rdlong	local01, objptr
08a68     03 26 66 F0 | 	shl	local01, #3
08a6c     02 00 00 FF 
08a70     38 E4 85 F1 | 	sub	objptr, ##1080
08a74     F2 26 02 F1 | 	add	local01, objptr
08a78     04 26 06 F1 | 	add	local01, #4
08a7c     13 27 02 FB | 	rdlong	local01, local01
08a80     11 26 0E F2 | 	cmp	local01, #17 wz
08a84     35 00 00 FF 
08a88     2C E4 85 F1 | 	sub	objptr, ##27180
08a8c     15 FA 05 56 |  if_ne	mov	result1, #21
08a90     F8 00 90 5D |  if_ne	jmp	#LR__0800
08a94     37 00 00 FF 
08a98     64 E4 05 F1 | 	add	objptr, ##28260
08a9c     F2 26 02 FB | 	rdlong	local01, objptr
08aa0     01 26 06 F1 | 	add	local01, #1
08aa4     F2 26 62 FC | 	wrlong	local01, objptr
08aa8     37 00 00 FF 
08aac     64 E4 85 F1 | 	sub	objptr, ##28260
08ab0     50 35 B0 FD | 	call	#_expr
08ab4     FD 26 02 F6 | 	mov	local01, result1
08ab8                 | ' err=expr() : if err>0 then return err
08ab8     01 26 16 F2 | 	cmp	local01, #1 wc
08abc     13 FB 01 36 |  if_ae	mov	result1, local01
08ac0     C8 00 90 3D |  if_ae	jmp	#LR__0800
08ac4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08ac4     37 00 00 FF 
08ac8     64 E4 05 F1 | 	add	objptr, ##28260
08acc     F2 26 02 FB | 	rdlong	local01, objptr
08ad0     03 26 66 F0 | 	shl	local01, #3
08ad4     02 00 00 FF 
08ad8     38 E4 85 F1 | 	sub	objptr, ##1080
08adc     F2 26 02 F1 | 	add	local01, objptr
08ae0     04 26 06 F1 | 	add	local01, #4
08ae4     13 27 02 FB | 	rdlong	local01, local01
08ae8     11 26 0E F2 | 	cmp	local01, #17 wz
08aec     35 00 00 FF 
08af0     2C E4 85 F1 | 	sub	objptr, ##27180
08af4     15 FA 05 56 |  if_ne	mov	result1, #21
08af8     90 00 90 5D |  if_ne	jmp	#LR__0800
08afc     37 00 00 FF 
08b00     64 E4 05 F1 | 	add	objptr, ##28260
08b04     F2 26 02 FB | 	rdlong	local01, objptr
08b08     01 26 06 F1 | 	add	local01, #1
08b0c     F2 26 62 FC | 	wrlong	local01, objptr
08b10     37 00 00 FF 
08b14     64 E4 85 F1 | 	sub	objptr, ##28260
08b18     E8 34 B0 FD | 	call	#_expr
08b1c     FD 26 02 F6 | 	mov	local01, result1
08b20                 | ' err=expr() : if err>0 then return err
08b20     01 26 16 F2 | 	cmp	local01, #1 wc
08b24     13 FB 01 36 |  if_ae	mov	result1, local01
08b28     60 00 90 3D |  if_ae	jmp	#LR__0800
08b2c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08b2c     37 00 00 FF 
08b30     64 E4 05 F1 | 	add	objptr, ##28260
08b34     F2 26 02 FB | 	rdlong	local01, objptr
08b38     03 26 66 F0 | 	shl	local01, #3
08b3c     02 00 00 FF 
08b40     38 E4 85 F1 | 	sub	objptr, ##1080
08b44     F2 26 02 F1 | 	add	local01, objptr
08b48     04 26 06 F1 | 	add	local01, #4
08b4c     13 27 02 FB | 	rdlong	local01, local01
08b50     11 26 0E F2 | 	cmp	local01, #17 wz
08b54     35 00 00 FF 
08b58     2C E4 85 F1 | 	sub	objptr, ##27180
08b5c     15 FA 05 56 |  if_ne	mov	result1, #21
08b60     28 00 90 5D |  if_ne	jmp	#LR__0800
08b64     37 00 00 FF 
08b68     64 E4 05 F1 | 	add	objptr, ##28260
08b6c     F2 26 02 FB | 	rdlong	local01, objptr
08b70     01 26 06 F1 | 	add	local01, #1
08b74     F2 26 62 FC | 	wrlong	local01, objptr
08b78     37 00 00 FF 
08b7c     64 E4 85 F1 | 	sub	objptr, ##28260
08b80     80 34 B0 FD | 	call	#_expr
08b84                 | ' err=expr() : if err>0 then return err
08b84     01 FA 15 F2 | 	cmp	result1, #1 wc
08b88                 | ' return 0
08b88     00 FA 05 C6 |  if_b	mov	result1, #0
08b8c                 | LR__0800
08b8c     A7 F0 03 F6 | 	mov	ptra, fp
08b90     B2 00 A0 FD | 	call	#popregs_
08b94                 | _compile_fun_4p_ret
08b94     2D 00 64 FD | 	ret
08b98                 | 
08b98                 | ' 
08b98                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08b98                 | ' 
08b98                 | ' function compile_fun_varp() as ulong,ulong 
08b98                 | _compile_fun_varp
08b98     03 4A 05 F6 | 	mov	COUNT_, #3
08b9c     A8 00 A0 FD | 	call	#pushregs_
08ba0     00 26 06 F6 | 	mov	local01, #0
08ba4                 | ' 
08ba4                 | ' i=0 : err=0
08ba4                 | ' if lparts(ct).token<>token_end then
08ba4     37 00 00 FF 
08ba8     64 E4 05 F1 | 	add	objptr, ##28260
08bac     F2 28 02 FB | 	rdlong	local02, objptr
08bb0     03 28 66 F0 | 	shl	local02, #3
08bb4     02 00 00 FF 
08bb8     38 E4 85 F1 | 	sub	objptr, ##1080
08bbc     F2 28 02 F1 | 	add	local02, objptr
08bc0     04 28 06 F1 | 	add	local02, #4
08bc4     14 29 02 FB | 	rdlong	local02, local02
08bc8     FE 29 0E F2 | 	cmp	local02, #510 wz
08bcc     35 00 00 FF 
08bd0     2C E4 85 F1 | 	sub	objptr, ##27180
08bd4     88 00 90 AD |  if_e	jmp	#LR__0811
08bd8                 | '   do
08bd8                 | LR__0810
08bd8     28 34 B0 FD | 	call	#_expr
08bdc     01 26 06 F1 | 	add	local01, #1
08be0                 | '     expr()
08be0                 | '     i+=1
08be0                 | '     if lparts(ct).token=token_comma then ct+=1
08be0     37 00 00 FF 
08be4     64 E4 05 F1 | 	add	objptr, ##28260
08be8     F2 28 02 FB | 	rdlong	local02, objptr
08bec     03 28 66 F0 | 	shl	local02, #3
08bf0     02 00 00 FF 
08bf4     38 E4 85 F1 | 	sub	objptr, ##1080
08bf8     F2 28 02 F1 | 	add	local02, objptr
08bfc     04 28 06 F1 | 	add	local02, #4
08c00     14 29 02 FB | 	rdlong	local02, local02
08c04     11 28 0E F2 | 	cmp	local02, #17 wz
08c08     35 00 00 FF 
08c0c     2C E4 85 F1 | 	sub	objptr, ##27180
08c10     37 00 00 AF 
08c14     64 E4 05 A1 |  if_e	add	objptr, ##28260
08c18     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08c1c     01 2A 06 A1 |  if_e	add	local03, #1
08c20     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08c24     37 00 00 AF 
08c28     64 E4 85 A1 |  if_e	sub	objptr, ##28260
08c2c                 | '     if lparts(ct).token=token_end then exit loop
08c2c     37 00 00 FF 
08c30     64 E4 05 F1 | 	add	objptr, ##28260
08c34     F2 28 02 FB | 	rdlong	local02, objptr
08c38     03 28 66 F0 | 	shl	local02, #3
08c3c     02 00 00 FF 
08c40     38 E4 85 F1 | 	sub	objptr, ##1080
08c44     F2 28 02 F1 | 	add	local02, objptr
08c48     04 28 06 F1 | 	add	local02, #4
08c4c     14 29 02 FB | 	rdlong	local02, local02
08c50     FE 29 0E F2 | 	cmp	local02, #510 wz
08c54     35 00 00 FF 
08c58     2C E4 85 F1 | 	sub	objptr, ##27180
08c5c     78 FF 9F 5D |  if_ne	jmp	#LR__0810
08c60                 | LR__0811
08c60                 | ' return i,err
08c60     13 FB 01 F6 | 	mov	result1, local01
08c64     00 FC 05 F6 | 	mov	result2, #0
08c68     A7 F0 03 F6 | 	mov	ptra, fp
08c6c     B2 00 A0 FD | 	call	#popregs_
08c70                 | _compile_fun_varp_ret
08c70     2D 00 64 FD | 	ret
08c74                 | 
08c74                 | ' 
08c74                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08c74                 | ' 
08c74                 | ' function compile_read() as ulong,ulong 
08c74                 | _compile_read
08c74     04 4A 05 F6 | 	mov	COUNT_, #4
08c78     A8 00 A0 FD | 	call	#pushregs_
08c7c     00 26 06 F6 | 	mov	local01, #0
08c80                 | ' 
08c80                 | ' i=0 : err=0
08c80                 | ' if lparts(ct).token<>token_end then
08c80     37 00 00 FF 
08c84     64 E4 05 F1 | 	add	objptr, ##28260
08c88     F2 28 02 FB | 	rdlong	local02, objptr
08c8c     03 28 66 F0 | 	shl	local02, #3
08c90     02 00 00 FF 
08c94     38 E4 85 F1 | 	sub	objptr, ##1080
08c98     F2 28 02 F1 | 	add	local02, objptr
08c9c     04 28 06 F1 | 	add	local02, #4
08ca0     14 29 02 FB | 	rdlong	local02, local02
08ca4     FE 29 0E F2 | 	cmp	local02, #510 wz
08ca8     35 00 00 FF 
08cac     2C E4 85 F1 | 	sub	objptr, ##27180
08cb0     98 00 90 AD |  if_e	jmp	#LR__0821
08cb4                 | '   do
08cb4                 | LR__0820
08cb4     B8 2F B0 FD | 	call	#_getaddr
08cb8     FD 2A 02 F6 | 	mov	local03, result1
08cbc     37 00 00 FF 
08cc0     64 E4 05 F1 | 	add	objptr, ##28260
08cc4     F2 28 02 FB | 	rdlong	local02, objptr
08cc8     01 28 06 F1 | 	add	local02, #1
08ccc     F2 28 62 FC | 	wrlong	local02, objptr
08cd0     01 26 06 F1 | 	add	local01, #1
08cd4                 | '     err=getaddr() :ct+=1
08cd4                 | '     i+=1 
08cd4                 | '     if lparts(ct).token=token_comma then ct+=1 
08cd4     03 28 66 F0 | 	shl	local02, #3
08cd8     02 00 00 FF 
08cdc     38 E4 85 F1 | 	sub	objptr, ##1080
08ce0     F2 28 02 F1 | 	add	local02, objptr
08ce4     04 28 06 F1 | 	add	local02, #4
08ce8     14 29 02 FB | 	rdlong	local02, local02
08cec     11 28 0E F2 | 	cmp	local02, #17 wz
08cf0     35 00 00 FF 
08cf4     2C E4 85 F1 | 	sub	objptr, ##27180
08cf8     37 00 00 AF 
08cfc     64 E4 05 A1 |  if_e	add	objptr, ##28260
08d00     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08d04     01 2C 06 A1 |  if_e	add	local04, #1
08d08     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08d0c     37 00 00 AF 
08d10     64 E4 85 A1 |  if_e	sub	objptr, ##28260
08d14                 | '     if lparts(ct).token=token_end then exit loop
08d14     37 00 00 FF 
08d18     64 E4 05 F1 | 	add	objptr, ##28260
08d1c     F2 28 02 FB | 	rdlong	local02, objptr
08d20     03 28 66 F0 | 	shl	local02, #3
08d24     02 00 00 FF 
08d28     38 E4 85 F1 | 	sub	objptr, ##1080
08d2c     F2 28 02 F1 | 	add	local02, objptr
08d30     04 28 06 F1 | 	add	local02, #4
08d34     14 29 02 FB | 	rdlong	local02, local02
08d38     FE 29 0E F2 | 	cmp	local02, #510 wz
08d3c     35 00 00 FF 
08d40     2C E4 85 F1 | 	sub	objptr, ##27180
08d44     08 00 90 AD |  if_e	jmp	#LR__0822
08d48     68 FF 9F FD | 	jmp	#LR__0820
08d4c                 | LR__0821
08d4c     36 2A 06 F6 | 	mov	local03, #54
08d50                 | LR__0822
08d50                 | ' return i,err
08d50     13 FB 01 F6 | 	mov	result1, local01
08d54     15 FD 01 F6 | 	mov	result2, local03
08d58     A7 F0 03 F6 | 	mov	ptra, fp
08d5c     B2 00 A0 FD | 	call	#popregs_
08d60                 | _compile_read_ret
08d60     2D 00 64 FD | 	ret
08d64                 | 
08d64                 | ' 
08d64                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08d64                 | ' 
08d64                 | ' function compile_input() as ulong,ulong 
08d64                 | _compile_input
08d64     0F 4A 05 F6 | 	mov	COUNT_, #15
08d68     A8 00 A0 FD | 	call	#pushregs_
08d6c                 | ' 
08d6c                 | ' if lparts(ct).token=token_string then
08d6c     37 00 00 FF 
08d70     64 E4 05 F1 | 	add	objptr, ##28260
08d74     F2 16 02 FB | 	rdlong	arg03, objptr
08d78     03 16 66 F0 | 	shl	arg03, #3
08d7c     02 00 00 FF 
08d80     38 E4 85 F1 | 	sub	objptr, ##1080
08d84     F2 16 02 F1 | 	add	arg03, objptr
08d88     04 16 06 F1 | 	add	arg03, #4
08d8c     0B FD 01 FB | 	rdlong	result2, arg03
08d90     01 00 00 FF 
08d94     03 FC 0D F2 | 	cmp	result2, ##515 wz
08d98     35 00 00 FF 
08d9c     2C E4 85 F1 | 	sub	objptr, ##27180
08da0     38 06 90 5D |  if_ne	jmp	#LR__0837
08da4     37 00 00 FF 
08da8     64 E4 05 F1 | 	add	objptr, ##28260
08dac     F2 14 02 FB | 	rdlong	arg02, objptr
08db0     03 14 66 F0 | 	shl	arg02, #3
08db4     02 00 00 FF 
08db8     38 E4 85 F1 | 	sub	objptr, ##1080
08dbc     F2 14 02 F1 | 	add	arg02, objptr
08dc0     0A 13 02 FB | 	rdlong	arg01, arg02
08dc4     35 00 00 FF 
08dc8     2C E4 85 F1 | 	sub	objptr, ##27180
08dcc     09 2D 02 F6 | 	mov	local04, arg01
08dd0     97 06 48 FB | 	callpa	#(@LR__0831-@LR__0830)>>2,fcache_load_ptr_
08dd4                 | LR__0830
08dd4     16 FB C9 FA | 	rdbyte	result1, local04 wz
08dd8     01 2C 06 51 |  if_ne	add	local04, #1
08ddc     F4 FF 9F 5D |  if_ne	jmp	#LR__0830
08de0                 | LR__0831
08de0     09 2D 82 F1 | 	sub	local04, arg01
08de4     16 FB 01 F6 | 	mov	result1, local04
08de8     52 00 00 FF 
08dec     48 E5 05 F1 | 	add	objptr, ##42312
08df0     F2 FA 61 FC | 	wrlong	result1, objptr
08df4     58 E4 85 F1 | 	sub	objptr, #88
08df8     F2 12 02 FB | 	rdlong	arg01, objptr
08dfc     FD 12 82 F1 | 	sub	arg01, result1
08e00     04 12 86 F1 | 	sub	arg01, #4
08e04     03 12 26 F5 | 	andn	arg01, #3
08e08     F2 12 62 FC | 	wrlong	arg01, objptr
08e0c     58 E4 05 F1 | 	add	objptr, #88
08e10     F2 14 02 FB | 	rdlong	arg02, objptr
08e14     52 00 00 FF 
08e18     48 E5 85 F1 | 	sub	objptr, ##42312
08e1c     3C BA B1 FD | 	call	#_pslpoke
08e20                 | '   pslpoke memtop,l
08e20                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08e20     01 2E 06 F6 | 	mov	local05, #1
08e24     52 00 00 FF 
08e28     48 E5 05 F1 | 	add	objptr, ##42312
08e2c     F2 30 02 FB | 	rdlong	local06, objptr
08e30     52 00 00 FF 
08e34     48 E5 85 F1 | 	sub	objptr, ##42312
08e38     01 30 06 F1 | 	add	local06, #1
08e3c                 | LR__0832
08e3c     18 2F 52 F2 | 	cmps	local05, local06 wc
08e40     5C 00 90 3D |  if_ae	jmp	#LR__0833
08e44     52 00 00 FF 
08e48     F0 E4 05 F1 | 	add	objptr, ##42224
08e4c     F2 32 02 FB | 	rdlong	local07, objptr
08e50     03 32 06 F1 | 	add	local07, #3
08e54     17 33 02 F1 | 	add	local07, local05
08e58     1B 00 00 FF 
08e5c     8C E4 85 F1 | 	sub	objptr, ##13964
08e60     F2 14 02 FB | 	rdlong	arg02, objptr
08e64     03 14 66 F0 | 	shl	arg02, #3
08e68     02 00 00 FF 
08e6c     38 E4 85 F1 | 	sub	objptr, ##1080
08e70     F2 14 02 F1 | 	add	arg02, objptr
08e74     0A 13 02 FB | 	rdlong	arg01, arg02
08e78     17 15 02 F6 | 	mov	arg02, local05
08e7c     01 16 06 F6 | 	mov	arg03, #1
08e80     35 00 00 FF 
08e84     2C E4 85 F1 | 	sub	objptr, ##27180
08e88     1C 14 B2 FD | 	call	#__system__Mid_S
08e8c     FD 14 C2 FA | 	rdbyte	arg02, result1
08e90     19 13 02 F6 | 	mov	arg01, local07
08e94     54 BA B1 FD | 	call	#_pspoke
08e98     01 2E 06 F1 | 	add	local05, #1
08e9c     9C FF 9F FD | 	jmp	#LR__0832
08ea0                 | LR__0833
08ea0     52 00 00 FF 
08ea4     F0 E4 05 F1 | 	add	objptr, ##42224
08ea8     F2 26 02 FB | 	rdlong	local01, objptr
08eac     2B 2A 06 F6 | 	mov	local03, #43
08eb0     13 35 02 F6 | 	mov	local08, local01
08eb4     14 33 02 F6 | 	mov	local07, local02
08eb8     15 37 02 F6 | 	mov	local09, local03
08ebc     08 00 00 FF 
08ec0     54 E4 85 F1 | 	sub	objptr, ##4180
08ec4     F2 30 02 FB | 	rdlong	local06, objptr
08ec8     18 2F 02 F6 | 	mov	local05, local06
08ecc     01 2E 66 F0 | 	shl	local05, #1
08ed0     18 2F 02 F1 | 	add	local05, local06
08ed4     02 2E 66 F0 | 	shl	local05, #2
08ed8     03 00 00 FF 
08edc     00 E4 85 F1 | 	sub	objptr, ##1536
08ee0     F2 2E 02 F1 | 	add	local05, objptr
08ee4     17 35 62 FC | 	wrlong	local08, local05
08ee8     03 00 00 FF 
08eec     00 E4 05 F1 | 	add	objptr, ##1536
08ef0     F2 34 02 FB | 	rdlong	local08, objptr
08ef4     1A 31 02 F6 | 	mov	local06, local08
08ef8     01 30 66 F0 | 	shl	local06, #1
08efc     1A 31 02 F1 | 	add	local06, local08
08f00     02 30 66 F0 | 	shl	local06, #2
08f04     03 00 00 FF 
08f08     00 E4 85 F1 | 	sub	objptr, ##1536
08f0c     F2 30 02 F1 | 	add	local06, objptr
08f10     04 30 06 F1 | 	add	local06, #4
08f14     18 33 62 FC | 	wrlong	local07, local06
08f18     03 00 00 FF 
08f1c     00 E4 05 F1 | 	add	objptr, ##1536
08f20     F2 34 02 FB | 	rdlong	local08, objptr
08f24     1A 33 02 F6 | 	mov	local07, local08
08f28     01 32 66 F0 | 	shl	local07, #1
08f2c     1A 33 02 F1 | 	add	local07, local08
08f30     02 32 66 F0 | 	shl	local07, #2
08f34     03 00 00 FF 
08f38     00 E4 85 F1 | 	sub	objptr, ##1536
08f3c     F2 32 02 F1 | 	add	local07, objptr
08f40     08 32 06 F1 | 	add	local07, #8
08f44     19 37 62 FC | 	wrlong	local09, local07
08f48     03 00 00 FF 
08f4c     00 E4 05 F1 | 	add	objptr, ##1536
08f50     F2 34 02 FB | 	rdlong	local08, objptr
08f54     01 34 06 F1 | 	add	local08, #1
08f58     F2 34 62 FC | 	wrlong	local08, objptr
08f5c     13 00 00 FF 
08f60     38 E4 85 F1 | 	sub	objptr, ##9784
08f64     F2 34 02 FB | 	rdlong	local08, objptr
08f68     01 34 06 F1 | 	add	local08, #1
08f6c     F2 34 62 FC | 	wrlong	local08, objptr
08f70                 | '   t1.result.uresult=memtop
08f70                 | '   t1.result_type=result_string2  
08f70                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08f70                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08f70     03 34 66 F0 | 	shl	local08, #3
08f74     02 00 00 FF 
08f78     38 E4 85 F1 | 	sub	objptr, ##1080
08f7c     F2 34 02 F1 | 	add	local08, objptr
08f80     04 34 06 F1 | 	add	local08, #4
08f84     1A 35 02 FB | 	rdlong	local08, local08
08f88     11 34 0E F2 | 	cmp	local08, #17 wz
08f8c     35 00 00 FF 
08f90     2C E4 85 F1 | 	sub	objptr, ##27180
08f94     60 01 90 5D |  if_ne	jmp	#LR__0834
08f98     21 2A 06 F6 | 	mov	local03, #33
08f9c     13 35 02 F6 | 	mov	local08, local01
08fa0     14 33 02 F6 | 	mov	local07, local02
08fa4     15 39 02 F6 | 	mov	local10, local03
08fa8     4A 00 00 FF 
08fac     9C E4 05 F1 | 	add	objptr, ##38044
08fb0     F2 3A 02 FB | 	rdlong	local11, objptr
08fb4     1D 3D 02 F6 | 	mov	local12, local11
08fb8     01 3C 66 F0 | 	shl	local12, #1
08fbc     1D 3D 02 F1 | 	add	local12, local11
08fc0     02 3C 66 F0 | 	shl	local12, #2
08fc4     03 00 00 FF 
08fc8     00 E4 85 F1 | 	sub	objptr, ##1536
08fcc     F2 3C 02 F1 | 	add	local12, objptr
08fd0     1E 35 62 FC | 	wrlong	local08, local12
08fd4     03 00 00 FF 
08fd8     00 E4 05 F1 | 	add	objptr, ##1536
08fdc     F2 3E 02 FB | 	rdlong	local13, objptr
08fe0     1F 35 02 F6 | 	mov	local08, local13
08fe4     01 34 66 F0 | 	shl	local08, #1
08fe8     1F 35 02 F1 | 	add	local08, local13
08fec     02 34 66 F0 | 	shl	local08, #2
08ff0     03 00 00 FF 
08ff4     00 E4 85 F1 | 	sub	objptr, ##1536
08ff8     F2 34 02 F1 | 	add	local08, objptr
08ffc     04 34 06 F1 | 	add	local08, #4
09000     1A 33 62 FC | 	wrlong	local07, local08
09004     03 00 00 FF 
09008     00 E4 05 F1 | 	add	objptr, ##1536
0900c     F2 34 02 FB | 	rdlong	local08, objptr
09010     1A 41 02 F6 | 	mov	local14, local08
09014     01 40 66 F0 | 	shl	local14, #1
09018     1A 41 02 F1 | 	add	local14, local08
0901c     02 40 66 F0 | 	shl	local14, #2
09020     03 00 00 FF 
09024     00 E4 85 F1 | 	sub	objptr, ##1536
09028     F2 40 02 F1 | 	add	local14, objptr
0902c     08 40 06 F1 | 	add	local14, #8
09030     20 39 62 FC | 	wrlong	local10, local14
09034     03 00 00 FF 
09038     00 E4 05 F1 | 	add	objptr, ##1536
0903c     F2 34 02 FB | 	rdlong	local08, objptr
09040     01 34 06 F1 | 	add	local08, #1
09044     F2 34 62 FC | 	wrlong	local08, objptr
09048     44 2A 06 F6 | 	mov	local03, #68
0904c     13 35 02 F6 | 	mov	local08, local01
09050     14 33 02 F6 | 	mov	local07, local02
09054     15 39 02 F6 | 	mov	local10, local03
09058     F2 40 02 FB | 	rdlong	local14, objptr
0905c     20 3F 02 F6 | 	mov	local13, local14
09060     01 3E 66 F0 | 	shl	local13, #1
09064     20 3F 02 F1 | 	add	local13, local14
09068     02 3E 66 F0 | 	shl	local13, #2
0906c     03 00 00 FF 
09070     00 E4 85 F1 | 	sub	objptr, ##1536
09074     F2 3E 02 F1 | 	add	local13, objptr
09078     1F 35 62 FC | 	wrlong	local08, local13
0907c     03 00 00 FF 
09080     00 E4 05 F1 | 	add	objptr, ##1536
09084     F2 40 02 FB | 	rdlong	local14, objptr
09088     20 3F 02 F6 | 	mov	local13, local14
0908c     01 3E 66 F0 | 	shl	local13, #1
09090     20 3F 02 F1 | 	add	local13, local14
09094     02 3E 66 F0 | 	shl	local13, #2
09098     03 00 00 FF 
0909c     00 E4 85 F1 | 	sub	objptr, ##1536
090a0     F2 3E 02 F1 | 	add	local13, objptr
090a4     04 3E 06 F1 | 	add	local13, #4
090a8     1F 33 62 FC | 	wrlong	local07, local13
090ac     03 00 00 FF 
090b0     00 E4 05 F1 | 	add	objptr, ##1536
090b4     F2 3E 02 FB | 	rdlong	local13, objptr
090b8     1F 41 02 F6 | 	mov	local14, local13
090bc     01 40 66 F0 | 	shl	local14, #1
090c0     1F 41 02 F1 | 	add	local14, local13
090c4     02 40 66 F0 | 	shl	local14, #2
090c8     03 00 00 FF 
090cc     00 E4 85 F1 | 	sub	objptr, ##1536
090d0     F2 40 02 F1 | 	add	local14, objptr
090d4     08 40 06 F1 | 	add	local14, #8
090d8     20 39 62 FC | 	wrlong	local10, local14
090dc     03 00 00 FF 
090e0     00 E4 05 F1 | 	add	objptr, ##1536
090e4     F2 34 02 FB | 	rdlong	local08, objptr
090e8     01 34 06 F1 | 	add	local08, #1
090ec     F2 34 62 FC | 	wrlong	local08, objptr
090f0     4A 00 00 FF 
090f4     9C E4 85 F1 | 	sub	objptr, ##38044
090f8                 | LR__0834
090f8                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
090f8     37 00 00 FF 
090fc     64 E4 05 F1 | 	add	objptr, ##28260
09100     F2 34 02 FB | 	rdlong	local08, objptr
09104     03 34 66 F0 | 	shl	local08, #3
09108     02 00 00 FF 
0910c     38 E4 85 F1 | 	sub	objptr, ##1080
09110     F2 34 02 F1 | 	add	local08, objptr
09114     04 34 06 F1 | 	add	local08, #4
09118     1A 41 02 FB | 	rdlong	local14, local08
0911c     12 40 0E F2 | 	cmp	local14, #18 wz
09120     35 00 00 FF 
09124     2C E4 85 F1 | 	sub	objptr, ##27180
09128     60 01 90 5D |  if_ne	jmp	#LR__0835
0912c     22 2A 06 F6 | 	mov	local03, #34
09130     13 35 02 F6 | 	mov	local08, local01
09134     14 33 02 F6 | 	mov	local07, local02
09138     15 39 02 F6 | 	mov	local10, local03
0913c     4A 00 00 FF 
09140     9C E4 05 F1 | 	add	objptr, ##38044
09144     F2 40 02 FB | 	rdlong	local14, objptr
09148     20 3F 02 F6 | 	mov	local13, local14
0914c     01 3E 66 F0 | 	shl	local13, #1
09150     20 3F 02 F1 | 	add	local13, local14
09154     02 3E 66 F0 | 	shl	local13, #2
09158     03 00 00 FF 
0915c     00 E4 85 F1 | 	sub	objptr, ##1536
09160     F2 3E 02 F1 | 	add	local13, objptr
09164     1F 35 62 FC | 	wrlong	local08, local13
09168     03 00 00 FF 
0916c     00 E4 05 F1 | 	add	objptr, ##1536
09170     F2 40 02 FB | 	rdlong	local14, objptr
09174     20 35 02 F6 | 	mov	local08, local14
09178     01 34 66 F0 | 	shl	local08, #1
0917c     20 35 02 F1 | 	add	local08, local14
09180     02 34 66 F0 | 	shl	local08, #2
09184     03 00 00 FF 
09188     00 E4 85 F1 | 	sub	objptr, ##1536
0918c     F2 34 02 F1 | 	add	local08, objptr
09190     04 34 06 F1 | 	add	local08, #4
09194     1A 33 62 FC | 	wrlong	local07, local08
09198     03 00 00 FF 
0919c     00 E4 05 F1 | 	add	objptr, ##1536
091a0     F2 34 02 FB | 	rdlong	local08, objptr
091a4     1A 41 02 F6 | 	mov	local14, local08
091a8     01 40 66 F0 | 	shl	local14, #1
091ac     1A 41 02 F1 | 	add	local14, local08
091b0     02 40 66 F0 | 	shl	local14, #2
091b4     03 00 00 FF 
091b8     00 E4 85 F1 | 	sub	objptr, ##1536
091bc     F2 40 02 F1 | 	add	local14, objptr
091c0     08 40 06 F1 | 	add	local14, #8
091c4     20 39 62 FC | 	wrlong	local10, local14
091c8     03 00 00 FF 
091cc     00 E4 05 F1 | 	add	objptr, ##1536
091d0     F2 34 02 FB | 	rdlong	local08, objptr
091d4     01 34 06 F1 | 	add	local08, #1
091d8     F2 34 62 FC | 	wrlong	local08, objptr
091dc     44 2A 06 F6 | 	mov	local03, #68
091e0     13 35 02 F6 | 	mov	local08, local01
091e4     14 33 02 F6 | 	mov	local07, local02
091e8     15 39 02 F6 | 	mov	local10, local03
091ec     F2 40 02 FB | 	rdlong	local14, objptr
091f0     20 3F 02 F6 | 	mov	local13, local14
091f4     01 3E 66 F0 | 	shl	local13, #1
091f8     20 3F 02 F1 | 	add	local13, local14
091fc     02 3E 66 F0 | 	shl	local13, #2
09200     03 00 00 FF 
09204     00 E4 85 F1 | 	sub	objptr, ##1536
09208     F2 3E 02 F1 | 	add	local13, objptr
0920c     1F 35 62 FC | 	wrlong	local08, local13
09210     03 00 00 FF 
09214     00 E4 05 F1 | 	add	objptr, ##1536
09218     F2 40 02 FB | 	rdlong	local14, objptr
0921c     20 3F 02 F6 | 	mov	local13, local14
09220     01 3E 66 F0 | 	shl	local13, #1
09224     20 3F 02 F1 | 	add	local13, local14
09228     02 3E 66 F0 | 	shl	local13, #2
0922c     03 00 00 FF 
09230     00 E4 85 F1 | 	sub	objptr, ##1536
09234     F2 3E 02 F1 | 	add	local13, objptr
09238     04 3E 06 F1 | 	add	local13, #4
0923c     1F 33 62 FC | 	wrlong	local07, local13
09240     03 00 00 FF 
09244     00 E4 05 F1 | 	add	objptr, ##1536
09248     F2 3E 02 FB | 	rdlong	local13, objptr
0924c     1F 41 02 F6 | 	mov	local14, local13
09250     01 40 66 F0 | 	shl	local14, #1
09254     1F 41 02 F1 | 	add	local14, local13
09258     02 40 66 F0 | 	shl	local14, #2
0925c     03 00 00 FF 
09260     00 E4 85 F1 | 	sub	objptr, ##1536
09264     F2 40 02 F1 | 	add	local14, objptr
09268     08 40 06 F1 | 	add	local14, #8
0926c     20 39 62 FC | 	wrlong	local10, local14
09270     03 00 00 FF 
09274     00 E4 05 F1 | 	add	objptr, ##1536
09278     F2 34 02 FB | 	rdlong	local08, objptr
0927c     01 34 06 F1 | 	add	local08, #1
09280     F2 34 62 FC | 	wrlong	local08, objptr
09284     4A 00 00 FF 
09288     9C E4 85 F1 | 	sub	objptr, ##38044
0928c                 | LR__0835
0928c                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
0928c     37 00 00 FF 
09290     64 E4 05 F1 | 	add	objptr, ##28260
09294     F2 34 02 FB | 	rdlong	local08, objptr
09298     03 34 66 F0 | 	shl	local08, #3
0929c     02 00 00 FF 
092a0     38 E4 85 F1 | 	sub	objptr, ##1080
092a4     F2 34 02 F1 | 	add	local08, objptr
092a8     04 34 06 F1 | 	add	local08, #4
092ac     1A 41 02 FB | 	rdlong	local14, local08
092b0     12 40 0E F2 | 	cmp	local14, #18 wz
092b4     35 00 00 FF 
092b8     2C E4 85 F1 | 	sub	objptr, ##27180
092bc     00 01 90 AD |  if_e	jmp	#LR__0836
092c0     37 00 00 FF 
092c4     64 E4 05 F1 | 	add	objptr, ##28260
092c8     F2 34 02 FB | 	rdlong	local08, objptr
092cc     03 34 66 F0 | 	shl	local08, #3
092d0     02 00 00 FF 
092d4     38 E4 85 F1 | 	sub	objptr, ##1080
092d8     F2 34 02 F1 | 	add	local08, objptr
092dc     04 34 06 F1 | 	add	local08, #4
092e0     1A 41 02 FB | 	rdlong	local14, local08
092e4     11 40 0E F2 | 	cmp	local14, #17 wz
092e8     35 00 00 FF 
092ec     2C E4 85 F1 | 	sub	objptr, ##27180
092f0     CC 00 90 AD |  if_e	jmp	#LR__0836
092f4     44 2A 06 F6 | 	mov	local03, #68
092f8     13 35 02 F6 | 	mov	local08, local01
092fc     14 33 02 F6 | 	mov	local07, local02
09300     15 39 02 F6 | 	mov	local10, local03
09304     4A 00 00 FF 
09308     9C E4 05 F1 | 	add	objptr, ##38044
0930c     F2 40 02 FB | 	rdlong	local14, objptr
09310     20 3F 02 F6 | 	mov	local13, local14
09314     01 3E 66 F0 | 	shl	local13, #1
09318     20 3F 02 F1 | 	add	local13, local14
0931c     02 3E 66 F0 | 	shl	local13, #2
09320     03 00 00 FF 
09324     00 E4 85 F1 | 	sub	objptr, ##1536
09328     F2 3E 02 F1 | 	add	local13, objptr
0932c     1F 35 62 FC | 	wrlong	local08, local13
09330     03 00 00 FF 
09334     00 E4 05 F1 | 	add	objptr, ##1536
09338     F2 40 02 FB | 	rdlong	local14, objptr
0933c     20 3F 02 F6 | 	mov	local13, local14
09340     01 3E 66 F0 | 	shl	local13, #1
09344     20 3F 02 F1 | 	add	local13, local14
09348     02 3E 66 F0 | 	shl	local13, #2
0934c     03 00 00 FF 
09350     00 E4 85 F1 | 	sub	objptr, ##1536
09354     F2 3E 02 F1 | 	add	local13, objptr
09358     04 3E 06 F1 | 	add	local13, #4
0935c     1F 33 62 FC | 	wrlong	local07, local13
09360     03 00 00 FF 
09364     00 E4 05 F1 | 	add	objptr, ##1536
09368     F2 3E 02 FB | 	rdlong	local13, objptr
0936c     1F 41 02 F6 | 	mov	local14, local13
09370     01 40 66 F0 | 	shl	local14, #1
09374     1F 41 02 F1 | 	add	local14, local13
09378     02 40 66 F0 | 	shl	local14, #2
0937c     03 00 00 FF 
09380     00 E4 85 F1 | 	sub	objptr, ##1536
09384     F2 40 02 F1 | 	add	local14, objptr
09388     08 40 06 F1 | 	add	local14, #8
0938c     20 39 62 FC | 	wrlong	local10, local14
09390     03 00 00 FF 
09394     00 E4 05 F1 | 	add	objptr, ##1536
09398     F2 34 02 FB | 	rdlong	local08, objptr
0939c     01 34 06 F1 | 	add	local08, #1
093a0     F2 34 62 FC | 	wrlong	local08, objptr
093a4     13 00 00 FF 
093a8     38 E4 85 F1 | 	sub	objptr, ##9784
093ac     F2 34 02 FB | 	rdlong	local08, objptr
093b0     01 34 86 F1 | 	sub	local08, #1
093b4     F2 34 62 FC | 	wrlong	local08, objptr
093b8     37 00 00 FF 
093bc     64 E4 85 F1 | 	sub	objptr, ##28260
093c0                 | LR__0836
093c0     37 00 00 FF 
093c4     64 E4 05 F1 | 	add	objptr, ##28260
093c8     F2 34 02 FB | 	rdlong	local08, objptr
093cc     01 34 06 F1 | 	add	local08, #1
093d0     F2 34 62 FC | 	wrlong	local08, objptr
093d4     37 00 00 FF 
093d8     64 E4 85 F1 | 	sub	objptr, ##28260
093dc                 | LR__0837
093dc     00 2E 06 F6 | 	mov	local05, #0
093e0                 | ' i=0 : err=0
093e0                 | ' if lparts(ct).token<>token_end then
093e0     37 00 00 FF 
093e4     64 E4 05 F1 | 	add	objptr, ##28260
093e8     F2 40 02 FB | 	rdlong	local14, objptr
093ec     03 40 66 F0 | 	shl	local14, #3
093f0     02 00 00 FF 
093f4     38 E4 85 F1 | 	sub	objptr, ##1080
093f8     F2 40 02 F1 | 	add	local14, objptr
093fc     04 40 06 F1 | 	add	local14, #4
09400     20 41 02 FB | 	rdlong	local14, local14
09404     FE 41 0E F2 | 	cmp	local14, #510 wz
09408     35 00 00 FF 
0940c     2C E4 85 F1 | 	sub	objptr, ##27180
09410     98 00 90 AD |  if_e	jmp	#LR__0839
09414                 | '   do
09414                 | LR__0838
09414     58 28 B0 FD | 	call	#_getaddr
09418     FD 42 02 F6 | 	mov	local15, result1
0941c     37 00 00 FF 
09420     64 E4 05 F1 | 	add	objptr, ##28260
09424     F2 40 02 FB | 	rdlong	local14, objptr
09428     01 40 06 F1 | 	add	local14, #1
0942c     F2 40 62 FC | 	wrlong	local14, objptr
09430     01 2E 06 F1 | 	add	local05, #1
09434                 | '     err=getaddr() :ct+=1
09434                 | '     i+=1 
09434                 | '     if lparts(ct).token=token_comma then ct+=1 
09434     03 40 66 F0 | 	shl	local14, #3
09438     02 00 00 FF 
0943c     38 E4 85 F1 | 	sub	objptr, ##1080
09440     F2 40 02 F1 | 	add	local14, objptr
09444     04 40 06 F1 | 	add	local14, #4
09448     20 41 02 FB | 	rdlong	local14, local14
0944c     11 40 0E F2 | 	cmp	local14, #17 wz
09450     35 00 00 FF 
09454     2C E4 85 F1 | 	sub	objptr, ##27180
09458     37 00 00 AF 
0945c     64 E4 05 A1 |  if_e	add	objptr, ##28260
09460     F2 34 02 AB |  if_e	rdlong	local08, objptr
09464     01 34 06 A1 |  if_e	add	local08, #1
09468     F2 34 62 AC |  if_e	wrlong	local08, objptr
0946c     37 00 00 AF 
09470     64 E4 85 A1 |  if_e	sub	objptr, ##28260
09474                 | '     if lparts(ct).token=token_end then exit loop
09474     37 00 00 FF 
09478     64 E4 05 F1 | 	add	objptr, ##28260
0947c     F2 40 02 FB | 	rdlong	local14, objptr
09480     03 40 66 F0 | 	shl	local14, #3
09484     02 00 00 FF 
09488     38 E4 85 F1 | 	sub	objptr, ##1080
0948c     F2 40 02 F1 | 	add	local14, objptr
09490     04 40 06 F1 | 	add	local14, #4
09494     20 41 02 FB | 	rdlong	local14, local14
09498     FE 41 0E F2 | 	cmp	local14, #510 wz
0949c     35 00 00 FF 
094a0     2C E4 85 F1 | 	sub	objptr, ##27180
094a4     08 00 90 AD |  if_e	jmp	#LR__0840
094a8     68 FF 9F FD | 	jmp	#LR__0838
094ac                 | LR__0839
094ac     36 42 06 F6 | 	mov	local15, #54
094b0                 | LR__0840
094b0                 | ' return i,err
094b0     17 FB 01 F6 | 	mov	result1, local05
094b4     21 FD 01 F6 | 	mov	result2, local15
094b8     A7 F0 03 F6 | 	mov	ptra, fp
094bc     B2 00 A0 FD | 	call	#popregs_
094c0                 | _compile_input_ret
094c0     2D 00 64 FD | 	ret
094c4                 | 
094c4                 | ' 
094c4                 | ' '----- compile assign to an array element
094c4                 | ' 
094c4                 | ' function compile_array_assign() as ulong 
094c4                 | _compile_array_assign
094c4     0B 4A 05 F6 | 	mov	COUNT_, #11
094c8     A8 00 A0 FD | 	call	#pushregs_
094cc     00 2C 06 F6 | 	mov	local04, #0
094d0     00 2E 06 F6 | 	mov	local05, #0
094d4     37 00 00 FF 
094d8     64 E4 05 F1 | 	add	objptr, ##28260
094dc     F2 30 02 FB | 	rdlong	local06, objptr
094e0     18 FB 01 F6 | 	mov	result1, local06
094e4     01 FA 85 F1 | 	sub	result1, #1
094e8     03 FA 65 F0 | 	shl	result1, #3
094ec     02 00 00 FF 
094f0     38 E4 85 F1 | 	sub	objptr, ##1080
094f4     F2 FA 01 F1 | 	add	result1, objptr
094f8     FD 32 02 FB | 	rdlong	local07, result1
094fc                 | ' numpar=0 : err=0
094fc                 | ' varname$=lparts(ct-1).part$
094fc                 | ' if lparts(ct).token=token_lpar then
094fc     03 30 66 F0 | 	shl	local06, #3
09500     F2 30 02 F1 | 	add	local06, objptr
09504     04 30 06 F1 | 	add	local06, #4
09508     18 31 02 FB | 	rdlong	local06, local06
0950c     15 30 0E F2 | 	cmp	local06, #21 wz
09510     35 00 00 FF 
09514     2C E4 85 F1 | 	sub	objptr, ##27180
09518     F4 01 90 5D |  if_ne	jmp	#LR__0854
0951c     37 00 00 FF 
09520     64 E4 05 F1 | 	add	objptr, ##28260
09524     F2 34 02 FB | 	rdlong	local08, objptr
09528     01 34 06 F1 | 	add	local08, #1
0952c     F2 34 62 FC | 	wrlong	local08, objptr
09530     37 00 00 FF 
09534     64 E4 85 F1 | 	sub	objptr, ##28260
09538                 | '   ct+=1 											' omit this lpar, this is for expr list
09538                 | '   do
09538                 | LR__0850
09538     C8 2A B0 FD | 	call	#_expr
0953c     37 00 00 FF 
09540     64 E4 05 F1 | 	add	objptr, ##28260
09544     F2 30 02 FB | 	rdlong	local06, objptr
09548     01 30 06 F1 | 	add	local06, #1
0954c     F2 30 62 FC | 	wrlong	local06, objptr
09550     01 2C 06 F1 | 	add	local04, #1
09554     01 30 86 F1 | 	sub	local06, #1
09558     03 30 66 F0 | 	shl	local06, #3
0955c     02 00 00 FF 
09560     38 E4 85 F1 | 	sub	objptr, ##1080
09564     F2 30 02 F1 | 	add	local06, objptr
09568     04 30 06 F1 | 	add	local06, #4
0956c     18 35 02 FB | 	rdlong	local08, local06
09570     14 34 0E F2 | 	cmp	local08, #20 wz
09574     35 00 00 FF 
09578     2C E4 85 F1 | 	sub	objptr, ##27180
0957c     34 00 90 AD |  if_e	jmp	#LR__0851
09580     37 00 00 FF 
09584     64 E4 05 F1 | 	add	objptr, ##28260
09588     F2 34 02 FB | 	rdlong	local08, objptr
0958c     03 34 66 F0 | 	shl	local08, #3
09590     02 00 00 FF 
09594     38 E4 85 F1 | 	sub	objptr, ##1080
09598     F2 34 02 F1 | 	add	local08, objptr
0959c     04 34 06 F1 | 	add	local08, #4
095a0     1A 35 02 FB | 	rdlong	local08, local08
095a4     FE 35 0E F2 | 	cmp	local08, #510 wz
095a8     35 00 00 FF 
095ac     2C E4 85 F1 | 	sub	objptr, ##27180
095b0     84 FF 9F 5D |  if_ne	jmp	#LR__0850
095b4                 | LR__0851
095b4     37 00 00 FF 
095b8     64 E4 05 F1 | 	add	objptr, ##28260
095bc     F2 34 02 FB | 	rdlong	local08, objptr
095c0     01 34 06 F1 | 	add	local08, #1
095c4     F2 34 62 FC | 	wrlong	local08, objptr
095c8     37 00 00 FF 
095cc     64 E4 85 F1 | 	sub	objptr, ##28260
095d0     30 2A B0 FD | 	call	#_expr
095d4     01 36 66 F6 | 	neg	local09, #1
095d8     00 38 06 F6 | 	mov	local10, #0
095dc                 | '   ct+=1 : expr()
095dc                 | '   j=-1 : i=0 
095dc                 | '   do 
095dc                 | LR__0852
095dc                 | '     if variables(i).name=varname$ then j=i: exit loop
095dc     1C 31 02 F6 | 	mov	local06, local10
095e0     04 30 66 F0 | 	shl	local06, #4
095e4     15 00 00 FF 
095e8     18 E4 05 F1 | 	add	objptr, ##10776
095ec     F2 30 02 F1 | 	add	local06, objptr
095f0     18 13 02 FB | 	rdlong	arg01, local06
095f4     19 15 02 F6 | 	mov	arg02, local07
095f8     15 00 00 FF 
095fc     18 E4 85 F1 | 	sub	objptr, ##10776
09600     34 EB B1 FD | 	call	#__system___string_cmp
09604     00 FA 0D F2 | 	cmp	result1, #0 wz
09608     1C 37 02 A6 |  if_e	mov	local09, local10
0960c     20 00 90 AD |  if_e	jmp	#LR__0853
09610     01 38 06 F1 | 	add	local10, #1
09614     35 00 00 FF 
09618     28 E4 05 F1 | 	add	objptr, ##27176
0961c     F2 34 02 FB | 	rdlong	local08, objptr
09620     35 00 00 FF 
09624     28 E4 85 F1 | 	sub	objptr, ##27176
09628     1A 39 5A F2 | 	cmps	local10, local08 wcz
0962c     AC FF 9F ED |  if_be	jmp	#LR__0852
09630                 | LR__0853
09630     1B 27 02 F6 | 	mov	local01, local09
09634     16 29 02 F6 | 	mov	local02, local04
09638     17 2A 06 F6 | 	mov	local03, #23
0963c     13 35 02 F6 | 	mov	local08, local01
09640     14 3B 02 F6 | 	mov	local11, local02
09644     15 33 02 F6 | 	mov	local07, local03
09648     4A 00 00 FF 
0964c     9C E4 05 F1 | 	add	objptr, ##38044
09650     F2 26 02 FB | 	rdlong	local01, objptr
09654     13 37 02 F6 | 	mov	local09, local01
09658     01 36 66 F0 | 	shl	local09, #1
0965c     13 37 02 F1 | 	add	local09, local01
09660     02 36 66 F0 | 	shl	local09, #2
09664     03 00 00 FF 
09668     00 E4 85 F1 | 	sub	objptr, ##1536
0966c     F2 36 02 F1 | 	add	local09, objptr
09670     1B 35 62 FC | 	wrlong	local08, local09
09674     03 00 00 FF 
09678     00 E4 05 F1 | 	add	objptr, ##1536
0967c     F2 26 02 FB | 	rdlong	local01, objptr
09680     13 37 02 F6 | 	mov	local09, local01
09684     01 36 66 F0 | 	shl	local09, #1
09688     13 37 02 F1 | 	add	local09, local01
0968c     02 36 66 F0 | 	shl	local09, #2
09690     03 00 00 FF 
09694     00 E4 85 F1 | 	sub	objptr, ##1536
09698     F2 36 02 F1 | 	add	local09, objptr
0969c     04 36 06 F1 | 	add	local09, #4
096a0     1B 3B 62 FC | 	wrlong	local11, local09
096a4     03 00 00 FF 
096a8     00 E4 05 F1 | 	add	objptr, ##1536
096ac     F2 3A 02 FB | 	rdlong	local11, objptr
096b0     1D 27 02 F6 | 	mov	local01, local11
096b4     01 26 66 F0 | 	shl	local01, #1
096b8     1D 27 02 F1 | 	add	local01, local11
096bc     02 26 66 F0 | 	shl	local01, #2
096c0     03 00 00 FF 
096c4     00 E4 85 F1 | 	sub	objptr, ##1536
096c8     F2 26 02 F1 | 	add	local01, objptr
096cc     08 26 06 F1 | 	add	local01, #8
096d0     13 33 62 FC | 	wrlong	local07, local01
096d4     03 00 00 FF 
096d8     00 E4 05 F1 | 	add	objptr, ##1536
096dc     F2 34 02 FB | 	rdlong	local08, objptr
096e0     01 34 06 F1 | 	add	local08, #1
096e4     F2 34 62 FC | 	wrlong	local08, objptr
096e8                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
096e8                 | '   if numpar>3 then err=45
096e8     04 2C 16 F2 | 	cmp	local04, #4 wc
096ec     2D 2E 06 36 |  if_ae	mov	local05, #45
096f0                 | '   if i>varnum then err=20
096f0     15 00 00 FF 
096f4     74 E4 85 F1 | 	sub	objptr, ##10868
096f8     F2 34 02 FB | 	rdlong	local08, objptr
096fc     35 00 00 FF 
09700     28 E4 85 F1 | 	sub	objptr, ##27176
09704     1A 39 5A F2 | 	cmps	local10, local08 wcz
09708     14 2E 06 16 |  if_a	mov	local05, #20
0970c     04 00 90 FD | 	jmp	#LR__0855
09710                 | LR__0854
09710     0E 2E 06 F6 | 	mov	local05, #14
09714                 | LR__0855
09714                 | ' return err
09714     17 FB 01 F6 | 	mov	result1, local05
09718     A7 F0 03 F6 | 	mov	ptra, fp
0971c     B2 00 A0 FD | 	call	#popregs_
09720                 | _compile_array_assign_ret
09720     2D 00 64 FD | 	ret
09724                 | 
09724                 | ' 
09724                 | ' '----- compile print command with its ";" and "," modifiers
09724                 | ' 
09724                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09724                 | _compile_print
09724     0B 4A 05 F6 | 	mov	COUNT_, #11
09728     A8 00 A0 FD | 	call	#pushregs_
0972c     00 26 06 F6 | 	mov	local01, #0
09730     1D 2A 06 F6 | 	mov	local03, #29
09734                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09734                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09734     37 00 00 FF 
09738     64 E4 05 F1 | 	add	objptr, ##28260
0973c     F2 2C 02 FB | 	rdlong	local04, objptr
09740     03 2C 66 F0 | 	shl	local04, #3
09744     02 00 00 FF 
09748     38 E4 85 F1 | 	sub	objptr, ##1080
0974c     F2 2C 02 F1 | 	add	local04, objptr
09750     04 2C 06 F1 | 	add	local04, #4
09754     16 2D 02 FB | 	rdlong	local04, local04
09758     FE 2D 0E F2 | 	cmp	local04, #510 wz
0975c     35 00 00 FF 
09760     2C E4 85 F1 | 	sub	objptr, ##27180
09764     68 01 90 5D |  if_ne	jmp	#LR__0860
09768     20 2A 06 F6 | 	mov	local03, #32
0976c     13 2F 02 F6 | 	mov	local05, local01
09770     14 31 02 F6 | 	mov	local06, local02
09774     15 33 02 F6 | 	mov	local07, local03
09778     4A 00 00 FF 
0977c     9C E4 05 F1 | 	add	objptr, ##38044
09780     F2 34 02 FB | 	rdlong	local08, objptr
09784     1A 37 02 F6 | 	mov	local09, local08
09788     01 36 66 F0 | 	shl	local09, #1
0978c     1A 37 02 F1 | 	add	local09, local08
09790     02 36 66 F0 | 	shl	local09, #2
09794     03 00 00 FF 
09798     00 E4 85 F1 | 	sub	objptr, ##1536
0979c     F2 36 02 F1 | 	add	local09, objptr
097a0     1B 2F 62 FC | 	wrlong	local05, local09
097a4     03 00 00 FF 
097a8     00 E4 05 F1 | 	add	objptr, ##1536
097ac     F2 2E 02 FB | 	rdlong	local05, objptr
097b0     17 39 02 F6 | 	mov	local10, local05
097b4     01 38 66 F0 | 	shl	local10, #1
097b8     17 39 02 F1 | 	add	local10, local05
097bc     02 38 66 F0 | 	shl	local10, #2
097c0     03 00 00 FF 
097c4     00 E4 85 F1 | 	sub	objptr, ##1536
097c8     F2 38 02 F1 | 	add	local10, objptr
097cc     04 38 06 F1 | 	add	local10, #4
097d0     1C 31 62 FC | 	wrlong	local06, local10
097d4     03 00 00 FF 
097d8     00 E4 05 F1 | 	add	objptr, ##1536
097dc     F2 2E 02 FB | 	rdlong	local05, objptr
097e0     17 3B 02 F6 | 	mov	local11, local05
097e4     01 3A 66 F0 | 	shl	local11, #1
097e8     17 3B 02 F1 | 	add	local11, local05
097ec     02 3A 66 F0 | 	shl	local11, #2
097f0     03 00 00 FF 
097f4     00 E4 85 F1 | 	sub	objptr, ##1536
097f8     F2 3A 02 F1 | 	add	local11, objptr
097fc     08 3A 06 F1 | 	add	local11, #8
09800     1D 33 62 FC | 	wrlong	local07, local11
09804     03 00 00 FF 
09808     00 E4 05 F1 | 	add	objptr, ##1536
0980c     F2 2E 02 FB | 	rdlong	local05, objptr
09810     01 2E 06 F1 | 	add	local05, #1
09814     F2 2E 62 FC | 	wrlong	local05, objptr
09818     44 2A 06 F6 | 	mov	local03, #68
0981c     13 2F 02 F6 | 	mov	local05, local01
09820     14 31 02 F6 | 	mov	local06, local02
09824     15 33 02 F6 | 	mov	local07, local03
09828     F2 34 02 FB | 	rdlong	local08, objptr
0982c     1A 37 02 F6 | 	mov	local09, local08
09830     01 36 66 F0 | 	shl	local09, #1
09834     1A 37 02 F1 | 	add	local09, local08
09838     02 36 66 F0 | 	shl	local09, #2
0983c     03 00 00 FF 
09840     00 E4 85 F1 | 	sub	objptr, ##1536
09844     F2 36 02 F1 | 	add	local09, objptr
09848     1B 2F 62 FC | 	wrlong	local05, local09
0984c     03 00 00 FF 
09850     00 E4 05 F1 | 	add	objptr, ##1536
09854     F2 3A 02 FB | 	rdlong	local11, objptr
09858     1D 39 02 F6 | 	mov	local10, local11
0985c     01 38 66 F0 | 	shl	local10, #1
09860     1D 39 02 F1 | 	add	local10, local11
09864     02 38 66 F0 | 	shl	local10, #2
09868     03 00 00 FF 
0986c     00 E4 85 F1 | 	sub	objptr, ##1536
09870     F2 38 02 F1 | 	add	local10, objptr
09874     04 38 06 F1 | 	add	local10, #4
09878     1C 31 62 FC | 	wrlong	local06, local10
0987c     03 00 00 FF 
09880     00 E4 05 F1 | 	add	objptr, ##1536
09884     F2 38 02 FB | 	rdlong	local10, objptr
09888     1C 3B 02 F6 | 	mov	local11, local10
0988c     01 3A 66 F0 | 	shl	local11, #1
09890     1C 3B 02 F1 | 	add	local11, local10
09894     02 3A 66 F0 | 	shl	local11, #2
09898     03 00 00 FF 
0989c     00 E4 85 F1 | 	sub	objptr, ##1536
098a0     F2 3A 02 F1 | 	add	local11, objptr
098a4     08 3A 06 F1 | 	add	local11, #8
098a8     1D 33 62 FC | 	wrlong	local07, local11
098ac     03 00 00 FF 
098b0     00 E4 05 F1 | 	add	objptr, ##1536
098b4     F2 2E 02 FB | 	rdlong	local05, objptr
098b8     01 2E 06 F1 | 	add	local05, #1
098bc     F2 2E 62 FC | 	wrlong	local05, objptr
098c0     4A 00 00 FF 
098c4     9C E4 85 F1 | 	sub	objptr, ##38044
098c8     00 FA 05 F6 | 	mov	result1, #0
098cc     20 05 90 FD | 	jmp	#LR__0867
098d0                 | LR__0860
098d0                 | ' do
098d0                 | LR__0861
098d0     30 27 B0 FD | 	call	#_expr
098d4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
098d4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
098d4     37 00 00 FF 
098d8     64 E4 05 F1 | 	add	objptr, ##28260
098dc     F2 2C 02 FB | 	rdlong	local04, objptr
098e0     03 2C 66 F0 | 	shl	local04, #3
098e4     02 00 00 FF 
098e8     38 E4 85 F1 | 	sub	objptr, ##1080
098ec     F2 2C 02 F1 | 	add	local04, objptr
098f0     04 2C 06 F1 | 	add	local04, #4
098f4     16 35 02 FB | 	rdlong	local08, local04
098f8     11 34 0E F2 | 	cmp	local08, #17 wz
098fc     35 00 00 FF 
09900     2C E4 85 F1 | 	sub	objptr, ##27180
09904     60 01 90 5D |  if_ne	jmp	#LR__0862
09908     21 2A 06 F6 | 	mov	local03, #33
0990c     13 2F 02 F6 | 	mov	local05, local01
09910     14 31 02 F6 | 	mov	local06, local02
09914     15 33 02 F6 | 	mov	local07, local03
09918     4A 00 00 FF 
0991c     9C E4 05 F1 | 	add	objptr, ##38044
09920     F2 34 02 FB | 	rdlong	local08, objptr
09924     1A 37 02 F6 | 	mov	local09, local08
09928     01 36 66 F0 | 	shl	local09, #1
0992c     1A 37 02 F1 | 	add	local09, local08
09930     02 36 66 F0 | 	shl	local09, #2
09934     03 00 00 FF 
09938     00 E4 85 F1 | 	sub	objptr, ##1536
0993c     F2 36 02 F1 | 	add	local09, objptr
09940     1B 2F 62 FC | 	wrlong	local05, local09
09944     03 00 00 FF 
09948     00 E4 05 F1 | 	add	objptr, ##1536
0994c     F2 3A 02 FB | 	rdlong	local11, objptr
09950     1D 39 02 F6 | 	mov	local10, local11
09954     01 38 66 F0 | 	shl	local10, #1
09958     1D 39 02 F1 | 	add	local10, local11
0995c     02 38 66 F0 | 	shl	local10, #2
09960     03 00 00 FF 
09964     00 E4 85 F1 | 	sub	objptr, ##1536
09968     F2 38 02 F1 | 	add	local10, objptr
0996c     04 38 06 F1 | 	add	local10, #4
09970     1C 31 62 FC | 	wrlong	local06, local10
09974     03 00 00 FF 
09978     00 E4 05 F1 | 	add	objptr, ##1536
0997c     F2 2E 02 FB | 	rdlong	local05, objptr
09980     17 3B 02 F6 | 	mov	local11, local05
09984     01 3A 66 F0 | 	shl	local11, #1
09988     17 3B 02 F1 | 	add	local11, local05
0998c     02 3A 66 F0 | 	shl	local11, #2
09990     03 00 00 FF 
09994     00 E4 85 F1 | 	sub	objptr, ##1536
09998     F2 3A 02 F1 | 	add	local11, objptr
0999c     08 3A 06 F1 | 	add	local11, #8
099a0     1D 33 62 FC | 	wrlong	local07, local11
099a4     03 00 00 FF 
099a8     00 E4 05 F1 | 	add	objptr, ##1536
099ac     F2 2E 02 FB | 	rdlong	local05, objptr
099b0     01 2E 06 F1 | 	add	local05, #1
099b4     F2 2E 62 FC | 	wrlong	local05, objptr
099b8     44 2A 06 F6 | 	mov	local03, #68
099bc     13 2F 02 F6 | 	mov	local05, local01
099c0     14 31 02 F6 | 	mov	local06, local02
099c4     15 33 02 F6 | 	mov	local07, local03
099c8     F2 34 02 FB | 	rdlong	local08, objptr
099cc     1A 37 02 F6 | 	mov	local09, local08
099d0     01 36 66 F0 | 	shl	local09, #1
099d4     1A 37 02 F1 | 	add	local09, local08
099d8     02 36 66 F0 | 	shl	local09, #2
099dc     03 00 00 FF 
099e0     00 E4 85 F1 | 	sub	objptr, ##1536
099e4     F2 36 02 F1 | 	add	local09, objptr
099e8     1B 2F 62 FC | 	wrlong	local05, local09
099ec     03 00 00 FF 
099f0     00 E4 05 F1 | 	add	objptr, ##1536
099f4     F2 3A 02 FB | 	rdlong	local11, objptr
099f8     1D 39 02 F6 | 	mov	local10, local11
099fc     01 38 66 F0 | 	shl	local10, #1
09a00     1D 39 02 F1 | 	add	local10, local11
09a04     02 38 66 F0 | 	shl	local10, #2
09a08     03 00 00 FF 
09a0c     00 E4 85 F1 | 	sub	objptr, ##1536
09a10     F2 38 02 F1 | 	add	local10, objptr
09a14     04 38 06 F1 | 	add	local10, #4
09a18     1C 31 62 FC | 	wrlong	local06, local10
09a1c     03 00 00 FF 
09a20     00 E4 05 F1 | 	add	objptr, ##1536
09a24     F2 38 02 FB | 	rdlong	local10, objptr
09a28     1C 3B 02 F6 | 	mov	local11, local10
09a2c     01 3A 66 F0 | 	shl	local11, #1
09a30     1C 3B 02 F1 | 	add	local11, local10
09a34     02 3A 66 F0 | 	shl	local11, #2
09a38     03 00 00 FF 
09a3c     00 E4 85 F1 | 	sub	objptr, ##1536
09a40     F2 3A 02 F1 | 	add	local11, objptr
09a44     08 3A 06 F1 | 	add	local11, #8
09a48     1D 33 62 FC | 	wrlong	local07, local11
09a4c     03 00 00 FF 
09a50     00 E4 05 F1 | 	add	objptr, ##1536
09a54     F2 2E 02 FB | 	rdlong	local05, objptr
09a58     01 2E 06 F1 | 	add	local05, #1
09a5c     F2 2E 62 FC | 	wrlong	local05, objptr
09a60     4A 00 00 FF 
09a64     9C E4 85 F1 | 	sub	objptr, ##38044
09a68                 | LR__0862
09a68                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09a68     37 00 00 FF 
09a6c     64 E4 05 F1 | 	add	objptr, ##28260
09a70     F2 2C 02 FB | 	rdlong	local04, objptr
09a74     03 2C 66 F0 | 	shl	local04, #3
09a78     02 00 00 FF 
09a7c     38 E4 85 F1 | 	sub	objptr, ##1080
09a80     F2 2C 02 F1 | 	add	local04, objptr
09a84     04 2C 06 F1 | 	add	local04, #4
09a88     16 35 02 FB | 	rdlong	local08, local04
09a8c     12 34 0E F2 | 	cmp	local08, #18 wz
09a90     35 00 00 FF 
09a94     2C E4 85 F1 | 	sub	objptr, ##27180
09a98     60 01 90 5D |  if_ne	jmp	#LR__0863
09a9c     22 2A 06 F6 | 	mov	local03, #34
09aa0     13 2F 02 F6 | 	mov	local05, local01
09aa4     14 31 02 F6 | 	mov	local06, local02
09aa8     15 33 02 F6 | 	mov	local07, local03
09aac     4A 00 00 FF 
09ab0     9C E4 05 F1 | 	add	objptr, ##38044
09ab4     F2 34 02 FB | 	rdlong	local08, objptr
09ab8     1A 37 02 F6 | 	mov	local09, local08
09abc     01 36 66 F0 | 	shl	local09, #1
09ac0     1A 37 02 F1 | 	add	local09, local08
09ac4     02 36 66 F0 | 	shl	local09, #2
09ac8     03 00 00 FF 
09acc     00 E4 85 F1 | 	sub	objptr, ##1536
09ad0     F2 36 02 F1 | 	add	local09, objptr
09ad4     1B 2F 62 FC | 	wrlong	local05, local09
09ad8     03 00 00 FF 
09adc     00 E4 05 F1 | 	add	objptr, ##1536
09ae0     F2 3A 02 FB | 	rdlong	local11, objptr
09ae4     1D 39 02 F6 | 	mov	local10, local11
09ae8     01 38 66 F0 | 	shl	local10, #1
09aec     1D 39 02 F1 | 	add	local10, local11
09af0     02 38 66 F0 | 	shl	local10, #2
09af4     03 00 00 FF 
09af8     00 E4 85 F1 | 	sub	objptr, ##1536
09afc     F2 38 02 F1 | 	add	local10, objptr
09b00     04 38 06 F1 | 	add	local10, #4
09b04     1C 31 62 FC | 	wrlong	local06, local10
09b08     03 00 00 FF 
09b0c     00 E4 05 F1 | 	add	objptr, ##1536
09b10     F2 2E 02 FB | 	rdlong	local05, objptr
09b14     17 3B 02 F6 | 	mov	local11, local05
09b18     01 3A 66 F0 | 	shl	local11, #1
09b1c     17 3B 02 F1 | 	add	local11, local05
09b20     02 3A 66 F0 | 	shl	local11, #2
09b24     03 00 00 FF 
09b28     00 E4 85 F1 | 	sub	objptr, ##1536
09b2c     F2 3A 02 F1 | 	add	local11, objptr
09b30     08 3A 06 F1 | 	add	local11, #8
09b34     1D 33 62 FC | 	wrlong	local07, local11
09b38     03 00 00 FF 
09b3c     00 E4 05 F1 | 	add	objptr, ##1536
09b40     F2 2E 02 FB | 	rdlong	local05, objptr
09b44     01 2E 06 F1 | 	add	local05, #1
09b48     F2 2E 62 FC | 	wrlong	local05, objptr
09b4c     44 2A 06 F6 | 	mov	local03, #68
09b50     13 2F 02 F6 | 	mov	local05, local01
09b54     14 31 02 F6 | 	mov	local06, local02
09b58     15 33 02 F6 | 	mov	local07, local03
09b5c     F2 34 02 FB | 	rdlong	local08, objptr
09b60     1A 37 02 F6 | 	mov	local09, local08
09b64     01 36 66 F0 | 	shl	local09, #1
09b68     1A 37 02 F1 | 	add	local09, local08
09b6c     02 36 66 F0 | 	shl	local09, #2
09b70     03 00 00 FF 
09b74     00 E4 85 F1 | 	sub	objptr, ##1536
09b78     F2 36 02 F1 | 	add	local09, objptr
09b7c     1B 2F 62 FC | 	wrlong	local05, local09
09b80     03 00 00 FF 
09b84     00 E4 05 F1 | 	add	objptr, ##1536
09b88     F2 3A 02 FB | 	rdlong	local11, objptr
09b8c     1D 39 02 F6 | 	mov	local10, local11
09b90     01 38 66 F0 | 	shl	local10, #1
09b94     1D 39 02 F1 | 	add	local10, local11
09b98     02 38 66 F0 | 	shl	local10, #2
09b9c     03 00 00 FF 
09ba0     00 E4 85 F1 | 	sub	objptr, ##1536
09ba4     F2 38 02 F1 | 	add	local10, objptr
09ba8     04 38 06 F1 | 	add	local10, #4
09bac     1C 31 62 FC | 	wrlong	local06, local10
09bb0     03 00 00 FF 
09bb4     00 E4 05 F1 | 	add	objptr, ##1536
09bb8     F2 38 02 FB | 	rdlong	local10, objptr
09bbc     1C 3B 02 F6 | 	mov	local11, local10
09bc0     01 3A 66 F0 | 	shl	local11, #1
09bc4     1C 3B 02 F1 | 	add	local11, local10
09bc8     02 3A 66 F0 | 	shl	local11, #2
09bcc     03 00 00 FF 
09bd0     00 E4 85 F1 | 	sub	objptr, ##1536
09bd4     F2 3A 02 F1 | 	add	local11, objptr
09bd8     08 3A 06 F1 | 	add	local11, #8
09bdc     1D 33 62 FC | 	wrlong	local07, local11
09be0     03 00 00 FF 
09be4     00 E4 05 F1 | 	add	objptr, ##1536
09be8     F2 2E 02 FB | 	rdlong	local05, objptr
09bec     01 2E 06 F1 | 	add	local05, #1
09bf0     F2 2E 62 FC | 	wrlong	local05, objptr
09bf4     4A 00 00 FF 
09bf8     9C E4 85 F1 | 	sub	objptr, ##38044
09bfc                 | LR__0863
09bfc                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09bfc     37 00 00 FF 
09c00     64 E4 05 F1 | 	add	objptr, ##28260
09c04     F2 2C 02 FB | 	rdlong	local04, objptr
09c08     03 2C 66 F0 | 	shl	local04, #3
09c0c     02 00 00 FF 
09c10     38 E4 85 F1 | 	sub	objptr, ##1080
09c14     F2 2C 02 F1 | 	add	local04, objptr
09c18     04 2C 06 F1 | 	add	local04, #4
09c1c     16 35 02 FB | 	rdlong	local08, local04
09c20     FE 35 0E F2 | 	cmp	local08, #510 wz
09c24     35 00 00 FF 
09c28     2C E4 85 F1 | 	sub	objptr, ##27180
09c2c     B8 00 90 5D |  if_ne	jmp	#LR__0864
09c30     44 2A 06 F6 | 	mov	local03, #68
09c34     13 2F 02 F6 | 	mov	local05, local01
09c38     14 31 02 F6 | 	mov	local06, local02
09c3c     15 33 02 F6 | 	mov	local07, local03
09c40     4A 00 00 FF 
09c44     9C E4 05 F1 | 	add	objptr, ##38044
09c48     F2 34 02 FB | 	rdlong	local08, objptr
09c4c     1A 37 02 F6 | 	mov	local09, local08
09c50     01 36 66 F0 | 	shl	local09, #1
09c54     1A 37 02 F1 | 	add	local09, local08
09c58     02 36 66 F0 | 	shl	local09, #2
09c5c     03 00 00 FF 
09c60     00 E4 85 F1 | 	sub	objptr, ##1536
09c64     F2 36 02 F1 | 	add	local09, objptr
09c68     1B 2F 62 FC | 	wrlong	local05, local09
09c6c     03 00 00 FF 
09c70     00 E4 05 F1 | 	add	objptr, ##1536
09c74     F2 3A 02 FB | 	rdlong	local11, objptr
09c78     1D 39 02 F6 | 	mov	local10, local11
09c7c     01 38 66 F0 | 	shl	local10, #1
09c80     1D 39 02 F1 | 	add	local10, local11
09c84     02 38 66 F0 | 	shl	local10, #2
09c88     03 00 00 FF 
09c8c     00 E4 85 F1 | 	sub	objptr, ##1536
09c90     F2 38 02 F1 | 	add	local10, objptr
09c94     04 38 06 F1 | 	add	local10, #4
09c98     1C 31 62 FC | 	wrlong	local06, local10
09c9c     03 00 00 FF 
09ca0     00 E4 05 F1 | 	add	objptr, ##1536
09ca4     F2 38 02 FB | 	rdlong	local10, objptr
09ca8     1C 3B 02 F6 | 	mov	local11, local10
09cac     01 3A 66 F0 | 	shl	local11, #1
09cb0     1C 3B 02 F1 | 	add	local11, local10
09cb4     02 3A 66 F0 | 	shl	local11, #2
09cb8     03 00 00 FF 
09cbc     00 E4 85 F1 | 	sub	objptr, ##1536
09cc0     F2 3A 02 F1 | 	add	local11, objptr
09cc4     08 3A 06 F1 | 	add	local11, #8
09cc8     1D 33 62 FC | 	wrlong	local07, local11
09ccc     03 00 00 FF 
09cd0     00 E4 05 F1 | 	add	objptr, ##1536
09cd4     F2 2E 02 FB | 	rdlong	local05, objptr
09cd8     01 2E 06 F1 | 	add	local05, #1
09cdc     F2 2E 62 FC | 	wrlong	local05, objptr
09ce0     4A 00 00 FF 
09ce4     9C E4 85 F1 | 	sub	objptr, ##38044
09ce8                 | LR__0864
09ce8                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09ce8     37 00 00 FF 
09cec     64 E4 05 F1 | 	add	objptr, ##28260
09cf0     F2 2C 02 FB | 	rdlong	local04, objptr
09cf4     03 2C 66 F0 | 	shl	local04, #3
09cf8     02 00 00 FF 
09cfc     38 E4 85 F1 | 	sub	objptr, ##1080
09d00     F2 2C 02 F1 | 	add	local04, objptr
09d04     04 2C 06 F1 | 	add	local04, #4
09d08     16 35 02 FB | 	rdlong	local08, local04
09d0c     11 34 0E F2 | 	cmp	local08, #17 wz
09d10     35 00 00 FF 
09d14     2C E4 85 F1 | 	sub	objptr, ##27180
09d18     6C 00 90 AD |  if_e	jmp	#LR__0865
09d1c     37 00 00 FF 
09d20     64 E4 05 F1 | 	add	objptr, ##28260
09d24     F2 34 02 FB | 	rdlong	local08, objptr
09d28     03 34 66 F0 | 	shl	local08, #3
09d2c     02 00 00 FF 
09d30     38 E4 85 F1 | 	sub	objptr, ##1080
09d34     F2 34 02 F1 | 	add	local08, objptr
09d38     04 34 06 F1 | 	add	local08, #4
09d3c     1A 35 02 FB | 	rdlong	local08, local08
09d40     12 34 0E F2 | 	cmp	local08, #18 wz
09d44     35 00 00 FF 
09d48     2C E4 85 F1 | 	sub	objptr, ##27180
09d4c     38 00 90 AD |  if_e	jmp	#LR__0865
09d50     37 00 00 FF 
09d54     64 E4 05 F1 | 	add	objptr, ##28260
09d58     F2 3A 02 FB | 	rdlong	local11, objptr
09d5c     03 3A 66 F0 | 	shl	local11, #3
09d60     02 00 00 FF 
09d64     38 E4 85 F1 | 	sub	objptr, ##1080
09d68     F2 3A 02 F1 | 	add	local11, objptr
09d6c     04 3A 06 F1 | 	add	local11, #4
09d70     1D 3B 02 FB | 	rdlong	local11, local11
09d74     FE 3B 0E F2 | 	cmp	local11, #510 wz
09d78     35 00 00 FF 
09d7c     2C E4 85 F1 | 	sub	objptr, ##27180
09d80     16 FA 05 56 |  if_ne	mov	result1, #22
09d84     68 00 90 5D |  if_ne	jmp	#LR__0867
09d88                 | LR__0865
09d88     37 00 00 FF 
09d8c     64 E4 05 F1 | 	add	objptr, ##28260
09d90     F2 2C 02 FB | 	rdlong	local04, objptr
09d94     01 2C 06 F1 | 	add	local04, #1
09d98     F2 2C 62 FC | 	wrlong	local04, objptr
09d9c     03 2C 66 F0 | 	shl	local04, #3
09da0     02 00 00 FF 
09da4     38 E4 85 F1 | 	sub	objptr, ##1080
09da8     F2 2C 02 F1 | 	add	local04, objptr
09dac     04 2C 06 F1 | 	add	local04, #4
09db0     16 35 02 FB | 	rdlong	local08, local04
09db4     FE 35 0E F2 | 	cmp	local08, #510 wz
09db8     35 00 00 FF 
09dbc     2C E4 85 F1 | 	sub	objptr, ##27180
09dc0     28 00 90 AD |  if_e	jmp	#LR__0866
09dc4     37 00 00 FF 
09dc8     64 E4 05 F1 | 	add	objptr, ##28260
09dcc     F2 3A 02 FB | 	rdlong	local11, objptr
09dd0     0E 00 00 FF 
09dd4     1C E4 05 F1 | 	add	objptr, ##7196
09dd8     F2 38 02 FB | 	rdlong	local10, objptr
09ddc     45 00 00 FF 
09de0     80 E4 85 F1 | 	sub	objptr, ##35456
09de4     1C 3B 52 F2 | 	cmps	local11, local10 wc
09de8     E4 FA 9F CD |  if_b	jmp	#LR__0861
09dec                 | LR__0866
09dec                 | ' return 0
09dec     00 FA 05 F6 | 	mov	result1, #0
09df0                 | LR__0867
09df0     A7 F0 03 F6 | 	mov	ptra, fp
09df4     B2 00 A0 FD | 	call	#popregs_
09df8                 | _compile_print_ret
09df8     2D 00 64 FD | 	ret
09dfc                 | 
09dfc                 | ' 
09dfc                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09dfc                 | ' 
09dfc                 | ' function compile_if(aline as ulong) as ulong  
09dfc                 | _compile_if
09dfc     09 4A 05 F6 | 	mov	COUNT_, #9
09e00     A8 00 A0 FD | 	call	#pushregs_
09e04                 | _compile_if_enter
09e04     09 2D 02 F6 | 	mov	local04, arg01
09e08                 | ' return expr()
09e08     F8 21 B0 FD | 	call	#_expr
09e0c     37 00 00 FF 
09e10     64 E4 05 F1 | 	add	objptr, ##28260
09e14     F2 14 02 FB | 	rdlong	arg02, objptr
09e18     0A 2F 02 F6 | 	mov	local05, arg02
09e1c     03 2E 66 F0 | 	shl	local05, #3
09e20     02 00 00 FF 
09e24     38 E4 85 F1 | 	sub	objptr, ##1080
09e28     F2 2E 02 F1 | 	add	local05, objptr
09e2c     04 2E 06 F1 | 	add	local05, #4
09e30     17 2F 02 FB | 	rdlong	local05, local05
09e34     01 14 06 F1 | 	add	arg02, #1
09e38     02 00 00 FF 
09e3c     38 E4 05 F1 | 	add	objptr, ##1080
09e40     F2 14 62 FC | 	wrlong	arg02, objptr
09e44     37 00 00 FF 
09e48     64 E4 85 F1 | 	sub	objptr, ##28260
09e4c                 | ' 
09e4c                 | ' err=compile_fun_1p()
09e4c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09e4c     5B 2E 0E F2 | 	cmp	local05, #91 wz
09e50     34 FA 05 56 |  if_ne	mov	result1, #52
09e54     20 01 90 5D |  if_ne	jmp	#LR__0872
09e58     58 2A 06 F6 | 	mov	local03, #88
09e5c     13 31 02 F6 | 	mov	local06, local01
09e60     14 33 02 F6 | 	mov	local07, local02
09e64     15 15 02 F6 | 	mov	arg02, local03
09e68     4A 00 00 FF 
09e6c     9C E4 05 F1 | 	add	objptr, ##38044
09e70     F2 12 02 FB | 	rdlong	arg01, objptr
09e74     09 35 02 F6 | 	mov	local08, arg01
09e78     01 34 66 F0 | 	shl	local08, #1
09e7c     09 35 02 F1 | 	add	local08, arg01
09e80     02 34 66 F0 | 	shl	local08, #2
09e84     03 00 00 FF 
09e88     00 E4 85 F1 | 	sub	objptr, ##1536
09e8c     F2 34 02 F1 | 	add	local08, objptr
09e90     1A 31 62 FC | 	wrlong	local06, local08
09e94     03 00 00 FF 
09e98     00 E4 05 F1 | 	add	objptr, ##1536
09e9c     F2 30 02 FB | 	rdlong	local06, objptr
09ea0     18 13 02 F6 | 	mov	arg01, local06
09ea4     01 12 66 F0 | 	shl	arg01, #1
09ea8     18 13 02 F1 | 	add	arg01, local06
09eac     02 12 66 F0 | 	shl	arg01, #2
09eb0     03 00 00 FF 
09eb4     00 E4 85 F1 | 	sub	objptr, ##1536
09eb8     F2 12 02 F1 | 	add	arg01, objptr
09ebc     04 12 06 F1 | 	add	arg01, #4
09ec0     09 33 62 FC | 	wrlong	local07, arg01
09ec4     03 00 00 FF 
09ec8     00 E4 05 F1 | 	add	objptr, ##1536
09ecc     F2 30 02 FB | 	rdlong	local06, objptr
09ed0     18 13 02 F6 | 	mov	arg01, local06
09ed4     01 12 66 F0 | 	shl	arg01, #1
09ed8     18 13 02 F1 | 	add	arg01, local06
09edc     02 12 66 F0 | 	shl	arg01, #2
09ee0     03 00 00 FF 
09ee4     00 E4 85 F1 | 	sub	objptr, ##1536
09ee8     F2 12 02 F1 | 	add	arg01, objptr
09eec     08 12 06 F1 | 	add	arg01, #8
09ef0     09 15 62 FC | 	wrlong	arg02, arg01
09ef4     03 00 00 FF 
09ef8     00 E4 05 F1 | 	add	objptr, ##1536
09efc     F2 30 02 FB | 	rdlong	local06, objptr
09f00     01 30 06 F1 | 	add	local06, #1
09f04     F2 30 62 FC | 	wrlong	local06, objptr
09f08                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09f08                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f08     13 00 00 FF 
09f0c     38 E4 85 F1 | 	sub	objptr, ##9784
09f10     F2 14 02 FB | 	rdlong	arg02, objptr
09f14     01 14 06 F1 | 	add	arg02, #1
09f18     03 14 66 F0 | 	shl	arg02, #3
09f1c     02 00 00 FF 
09f20     38 E4 85 F1 | 	sub	objptr, ##1080
09f24     F2 14 02 F1 | 	add	arg02, objptr
09f28     0A 13 02 FB | 	rdlong	arg01, arg02
09f2c     35 00 00 FF 
09f30     2C E4 85 F1 | 	sub	objptr, ##27180
09f34                 | ' 
09f34                 | ' select case s
09f34     B1 01 00 FF 
09f38     D1 14 06 F6 | 	mov	arg02, ##@LR__5468
09f3c     F8 E1 B1 FD | 	call	#__system___string_cmp
09f40     00 FA 0D F2 | 	cmp	result1, #0 wz
09f44     1B FA 05 A6 |  if_e	mov	result1, #27
09f48     00 FA 05 56 |  if_ne	mov	result1, #0
09f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
09f50     10 00 90 AD |  if_e	jmp	#LR__0870
09f54     05 12 06 F6 | 	mov	arg01, #5
09f58     38 E4 BF FD | 	call	#_compile_immediate_assign
09f5c     FD 36 02 F6 | 	mov	local09, result1
09f60     10 00 90 FD | 	jmp	#LR__0871
09f64                 | LR__0870
09f64     05 12 06 F6 | 	mov	arg01, #5
09f68     16 15 02 F6 | 	mov	arg02, local04
09f6c     38 DA BF FD | 	call	#_compile_immediate
09f70     FD 36 02 F6 | 	mov	local09, result1
09f74                 | LR__0871
09f74                 | ' return err
09f74     1B FB 01 F6 | 	mov	result1, local09
09f78                 | LR__0872
09f78     A7 F0 03 F6 | 	mov	ptra, fp
09f7c     B2 00 A0 FD | 	call	#popregs_
09f80                 | _compile_if_ret
09f80     2D 00 64 FD | 	ret
09f84                 | 
09f84                 | ' 
09f84                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09f84                 | ' 
09f84                 | ' function compile_else(aline as ulong) as ulong  
09f84                 | _compile_else
09f84     07 4A 05 F6 | 	mov	COUNT_, #7
09f88     A8 00 A0 FD | 	call	#pushregs_
09f8c                 | _compile_else_enter
09f8c     09 2D 02 F6 | 	mov	local04, arg01
09f90     5A 2A 06 F6 | 	mov	local03, #90
09f94     13 2F 02 F6 | 	mov	local05, local01
09f98     14 31 02 F6 | 	mov	local06, local02
09f9c     15 27 02 F6 | 	mov	local01, local03
09fa0     4A 00 00 FF 
09fa4     9C E4 05 F1 | 	add	objptr, ##38044
09fa8     F2 14 02 FB | 	rdlong	arg02, objptr
09fac     0A 13 02 F6 | 	mov	arg01, arg02
09fb0     01 12 66 F0 | 	shl	arg01, #1
09fb4     0A 13 02 F1 | 	add	arg01, arg02
09fb8     02 12 66 F0 | 	shl	arg01, #2
09fbc     03 00 00 FF 
09fc0     00 E4 85 F1 | 	sub	objptr, ##1536
09fc4     F2 12 02 F1 | 	add	arg01, objptr
09fc8     09 2F 62 FC | 	wrlong	local05, arg01
09fcc     03 00 00 FF 
09fd0     00 E4 05 F1 | 	add	objptr, ##1536
09fd4     F2 2E 02 FB | 	rdlong	local05, objptr
09fd8     17 15 02 F6 | 	mov	arg02, local05
09fdc     01 14 66 F0 | 	shl	arg02, #1
09fe0     17 15 02 F1 | 	add	arg02, local05
09fe4     02 14 66 F0 | 	shl	arg02, #2
09fe8     03 00 00 FF 
09fec     00 E4 85 F1 | 	sub	objptr, ##1536
09ff0     F2 14 02 F1 | 	add	arg02, objptr
09ff4     04 14 06 F1 | 	add	arg02, #4
09ff8     0A 31 62 FC | 	wrlong	local06, arg02
09ffc     03 00 00 FF 
0a000     00 E4 05 F1 | 	add	objptr, ##1536
0a004     F2 30 02 FB | 	rdlong	local06, objptr
0a008     18 2F 02 F6 | 	mov	local05, local06
0a00c     01 2E 66 F0 | 	shl	local05, #1
0a010     18 2F 02 F1 | 	add	local05, local06
0a014     02 2E 66 F0 | 	shl	local05, #2
0a018     03 00 00 FF 
0a01c     00 E4 85 F1 | 	sub	objptr, ##1536
0a020     F2 2E 02 F1 | 	add	local05, objptr
0a024     08 2E 06 F1 | 	add	local05, #8
0a028     17 27 62 FC | 	wrlong	local01, local05
0a02c     03 00 00 FF 
0a030     00 E4 05 F1 | 	add	objptr, ##1536
0a034     F2 2E 02 FB | 	rdlong	local05, objptr
0a038     01 2E 06 F1 | 	add	local05, #1
0a03c     F2 2E 62 FC | 	wrlong	local05, objptr
0a040                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
0a040                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
0a040     13 00 00 FF 
0a044     38 E4 85 F1 | 	sub	objptr, ##9784
0a048     F2 30 02 FB | 	rdlong	local06, objptr
0a04c     01 30 06 F1 | 	add	local06, #1
0a050     03 30 66 F0 | 	shl	local06, #3
0a054     02 00 00 FF 
0a058     38 E4 85 F1 | 	sub	objptr, ##1080
0a05c     F2 30 02 F1 | 	add	local06, objptr
0a060     18 13 02 FB | 	rdlong	arg01, local06
0a064     35 00 00 FF 
0a068     2C E4 85 F1 | 	sub	objptr, ##27180
0a06c                 | ' 
0a06c                 | ' select case s
0a06c     B1 01 00 FF 
0a070     D1 14 06 F6 | 	mov	arg02, ##@LR__5468
0a074     C0 E0 B1 FD | 	call	#__system___string_cmp
0a078     00 FA 0D F2 | 	cmp	result1, #0 wz
0a07c     1B FA 05 A6 |  if_e	mov	result1, #27
0a080     00 FA 05 56 |  if_ne	mov	result1, #0
0a084     00 FA 0D F2 | 	cmp	result1, #0 wz
0a088     10 00 90 AD |  if_e	jmp	#LR__0880
0a08c     05 12 06 F6 | 	mov	arg01, #5
0a090     00 E3 BF FD | 	call	#_compile_immediate_assign
0a094     FD 32 02 F6 | 	mov	local07, result1
0a098     10 00 90 FD | 	jmp	#LR__0881
0a09c                 | LR__0880
0a09c     05 12 06 F6 | 	mov	arg01, #5
0a0a0     16 15 02 F6 | 	mov	arg02, local04
0a0a4     00 D9 BF FD | 	call	#_compile_immediate
0a0a8     FD 32 02 F6 | 	mov	local07, result1
0a0ac                 | LR__0881
0a0ac                 | ' return err
0a0ac     19 FB 01 F6 | 	mov	result1, local07
0a0b0     A7 F0 03 F6 | 	mov	ptra, fp
0a0b4     B2 00 A0 FD | 	call	#popregs_
0a0b8                 | _compile_else_ret
0a0b8     2D 00 64 FD | 	ret
0a0bc                 | 
0a0bc                 | ' 
0a0bc                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
0a0bc                 | ' 
0a0bc                 | ' function compile_dim() as ulong  
0a0bc                 | _compile_dim
0a0bc     11 4A 05 F6 | 	mov	COUNT_, #17
0a0c0     A8 00 A0 FD | 	call	#pushregs_
0a0c4     01 26 06 F6 | 	mov	local01, #1
0a0c8     01 28 06 F6 | 	mov	local02, #1
0a0cc     01 2A 06 F6 | 	mov	local03, #1
0a0d0                 | ' 
0a0d0                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0a0d0                 | ' if isname(lparts(ct).part$) then 
0a0d0     37 00 00 FF 
0a0d4     64 E4 05 F1 | 	add	objptr, ##28260
0a0d8     F2 18 02 FB | 	rdlong	arg04, objptr
0a0dc     03 18 66 F0 | 	shl	arg04, #3
0a0e0     02 00 00 FF 
0a0e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a0e8     F2 18 02 F1 | 	add	arg04, objptr
0a0ec     0C 13 02 FB | 	rdlong	arg01, arg04
0a0f0     35 00 00 FF 
0a0f4     2C E4 85 F1 | 	sub	objptr, ##27180
0a0f8     04 C7 BF FD | 	call	#_isname
0a0fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a100     78 05 90 AD |  if_e	jmp	#LR__0913
0a104     37 00 00 FF 
0a108     64 E4 05 F1 | 	add	objptr, ##28260
0a10c     F2 2C 02 FB | 	rdlong	local04, objptr
0a110     03 2C 66 F0 | 	shl	local04, #3
0a114     02 00 00 FF 
0a118     38 E4 85 F1 | 	sub	objptr, ##1080
0a11c     F2 2C 02 F1 | 	add	local04, objptr
0a120     16 2F 02 FB | 	rdlong	local05, local04
0a124     01 30 66 F6 | 	neg	local06, #1
0a128                 | '   varname2$=lparts(ct).part$ 
0a128                 | '   j=-1
0a128                 | '   if varnum>0 then
0a128     04 E4 85 F1 | 	sub	objptr, #4
0a12c     F2 32 02 FB | 	rdlong	local07, objptr
0a130     35 00 00 FF 
0a134     28 E4 85 F1 | 	sub	objptr, ##27176
0a138     01 32 56 F2 | 	cmps	local07, #1 wc
0a13c     58 00 90 CD |  if_b	jmp	#LR__0892
0a140                 | '     for i=0 to varnum-1
0a140     00 34 06 F6 | 	mov	local08, #0
0a144     35 00 00 FF 
0a148     28 E4 05 F1 | 	add	objptr, ##27176
0a14c     F2 36 02 FB | 	rdlong	local09, objptr
0a150     35 00 00 FF 
0a154     28 E4 85 F1 | 	sub	objptr, ##27176
0a158                 | LR__0890
0a158     1B 35 52 F2 | 	cmps	local08, local09 wc
0a15c     38 00 90 3D |  if_ae	jmp	#LR__0891
0a160                 | '       if variables(i).name=varname2$ then j=i : exit
0a160     1A 2D 02 F6 | 	mov	local04, local08
0a164     04 2C 66 F0 | 	shl	local04, #4
0a168     15 00 00 FF 
0a16c     18 E4 05 F1 | 	add	objptr, ##10776
0a170     F2 2C 02 F1 | 	add	local04, objptr
0a174     16 13 02 FB | 	rdlong	arg01, local04
0a178     17 15 02 F6 | 	mov	arg02, local05
0a17c     15 00 00 FF 
0a180     18 E4 85 F1 | 	sub	objptr, ##10776
0a184     B0 DF B1 FD | 	call	#__system___string_cmp
0a188     00 FA 0D F2 | 	cmp	result1, #0 wz
0a18c     1A 31 02 A6 |  if_e	mov	local06, local08
0a190     01 34 06 51 |  if_ne	add	local08, #1
0a194     C0 FF 9F 5D |  if_ne	jmp	#LR__0890
0a198                 | LR__0891
0a198                 | LR__0892
0a198                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a198     FF FF 7F FF 
0a19c     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0a1a0     35 00 00 AF 
0a1a4     28 E4 05 A1 |  if_e	add	objptr, ##27176
0a1a8     F2 30 02 AB |  if_e	rdlong	local06, objptr
0a1ac     35 00 00 AF 
0a1b0     28 E4 85 A1 |  if_e	sub	objptr, ##27176
0a1b4     78 00 90 AD |  if_e	jmp	#LR__0893
0a1b8     00 12 06 F6 | 	mov	arg01, #0
0a1bc     F4 3B B2 FD | 	call	#__system___getiolock_0620
0a1c0     FD 12 02 F6 | 	mov	arg01, result1
0a1c4     48 DF B1 FD | 	call	#__system___lockmem
0a1c8     B3 01 00 FF 
0a1cc     C2 15 06 F6 | 	mov	arg02, ##@LR__5736
0a1d0     00 12 06 F6 | 	mov	arg01, #0
0a1d4     00 16 06 F6 | 	mov	arg03, #0
0a1d8     2C EC B1 FD | 	call	#__system___basic_print_string
0a1dc     52 00 00 FF 
0a1e0     08 E5 05 F1 | 	add	objptr, ##42248
0a1e4     F2 14 02 FB | 	rdlong	arg02, objptr
0a1e8     52 00 00 FF 
0a1ec     08 E5 85 F1 | 	sub	objptr, ##42248
0a1f0     00 12 06 F6 | 	mov	arg01, #0
0a1f4     00 16 06 F6 | 	mov	arg03, #0
0a1f8     0A 18 06 F6 | 	mov	arg04, #10
0a1fc     8C EC B1 FD | 	call	#__system___basic_print_unsigned
0a200     B3 01 00 FF 
0a204     D0 15 06 F6 | 	mov	arg02, ##@LR__5737
0a208     00 12 06 F6 | 	mov	arg01, #0
0a20c     00 16 06 F6 | 	mov	arg03, #0
0a210     F4 EB B1 FD | 	call	#__system___basic_print_string
0a214     00 12 06 F6 | 	mov	arg01, #0
0a218     0A 14 06 F6 | 	mov	arg02, #10
0a21c     00 16 06 F6 | 	mov	arg03, #0
0a220     8C EB B1 FD | 	call	#__system___basic_print_char
0a224     00 12 06 F6 | 	mov	arg01, #0
0a228     88 3B B2 FD | 	call	#__system___getiolock_0620
0a22c     FD 00 68 FC | 	wrlong	#0, result1
0a230                 | LR__0893
0a230                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a230     37 00 00 FF 
0a234     64 E4 05 F1 | 	add	objptr, ##28260
0a238     F2 14 02 FB | 	rdlong	arg02, objptr
0a23c     01 14 06 F1 | 	add	arg02, #1
0a240     03 14 66 F0 | 	shl	arg02, #3
0a244     02 00 00 FF 
0a248     38 E4 85 F1 | 	sub	objptr, ##1080
0a24c     F2 14 02 F1 | 	add	arg02, objptr
0a250     0A 13 02 FB | 	rdlong	arg01, arg02
0a254     B3 01 00 FF 
0a258     F1 15 06 F6 | 	mov	arg02, ##@LR__5738
0a25c     35 00 00 FF 
0a260     2C E4 85 F1 | 	sub	objptr, ##27180
0a264     D0 DE B1 FD | 	call	#__system___string_cmp
0a268     00 FA 0D F2 | 	cmp	result1, #0 wz
0a26c     44 00 90 AD |  if_e	jmp	#LR__0894
0a270     37 00 00 FF 
0a274     64 E4 05 F1 | 	add	objptr, ##28260
0a278     F2 36 02 FB | 	rdlong	local09, objptr
0a27c     01 36 06 F1 | 	add	local09, #1
0a280     03 36 66 F0 | 	shl	local09, #3
0a284     02 00 00 FF 
0a288     38 E4 85 F1 | 	sub	objptr, ##1080
0a28c     F2 36 02 F1 | 	add	local09, objptr
0a290     1B 13 02 FB | 	rdlong	arg01, local09
0a294     B3 01 00 FF 
0a298     F3 15 06 F6 | 	mov	arg02, ##@LR__5739
0a29c     35 00 00 FF 
0a2a0     2C E4 85 F1 | 	sub	objptr, ##27180
0a2a4     90 DE B1 FD | 	call	#__system___string_cmp
0a2a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2ac     2B FA 05 56 |  if_ne	mov	result1, #43
0a2b0     D0 04 90 5D |  if_ne	jmp	#LR__0915
0a2b4                 | LR__0894
0a2b4                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a2b4     37 00 00 FF 
0a2b8     64 E4 05 F1 | 	add	objptr, ##28260
0a2bc     F2 14 02 FB | 	rdlong	arg02, objptr
0a2c0     01 14 06 F1 | 	add	arg02, #1
0a2c4     03 14 66 F0 | 	shl	arg02, #3
0a2c8     02 00 00 FF 
0a2cc     38 E4 85 F1 | 	sub	objptr, ##1080
0a2d0     F2 14 02 F1 | 	add	arg02, objptr
0a2d4     0A 13 02 FB | 	rdlong	arg01, arg02
0a2d8     B3 01 00 FF 
0a2dc     F6 15 06 F6 | 	mov	arg02, ##@LR__5740
0a2e0     35 00 00 FF 
0a2e4     2C E4 85 F1 | 	sub	objptr, ##27180
0a2e8     4C DE B1 FD | 	call	#__system___string_cmp
0a2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f0     37 00 00 AF 
0a2f4     64 E4 05 A1 |  if_e	add	objptr, ##28260
0a2f8     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a2fc     37 00 00 AF 
0a300     64 E4 85 A1 |  if_e	sub	objptr, ##28260
0a304     01 38 06 A1 |  if_e	add	local10, #1
0a308     5C 01 90 AD |  if_e	jmp	#LR__0899
0a30c     37 00 00 FF 
0a310     64 E4 05 F1 | 	add	objptr, ##28260
0a314     F2 38 02 FB | 	rdlong	local10, objptr
0a318     37 00 00 FF 
0a31c     64 E4 85 F1 | 	sub	objptr, ##28260
0a320     02 38 06 F1 | 	add	local10, #2
0a324     00 3A 06 F6 | 	mov	local11, #0
0a328                 | '   l=ct+2 : m=0 : do
0a328                 | LR__0895
0a328                 | '   if isdec(lparts(l).part$) then 
0a328     1C 2D 02 F6 | 	mov	local04, local10
0a32c     03 2C 66 F0 | 	shl	local04, #3
0a330     35 00 00 FF 
0a334     2C E4 05 F1 | 	add	objptr, ##27180
0a338     F2 2C 02 F1 | 	add	local04, objptr
0a33c     16 13 02 FB | 	rdlong	arg01, local04
0a340     35 00 00 FF 
0a344     2C E4 85 F1 | 	sub	objptr, ##27180
0a348     B8 CD BF FD | 	call	#_isdec
0a34c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a350     44 00 90 AD |  if_e	jmp	#LR__0896
0a354     1D 3D 02 F6 | 	mov	local12, local11
0a358     13 3D 06 F1 | 	add	local12, #local01
0a35c     1C 37 02 F6 | 	mov	local09, local10
0a360     03 36 66 F0 | 	shl	local09, #3
0a364     35 00 00 FF 
0a368     2C E4 05 F1 | 	add	objptr, ##27180
0a36c     F2 36 02 F1 | 	add	local09, objptr
0a370     1B 13 02 FB | 	rdlong	arg01, local09
0a374     00 14 06 F6 | 	mov	arg02, #0
0a378     35 00 00 FF 
0a37c     2C E4 85 F1 | 	sub	objptr, ##27180
0a380     80 12 B2 FD | 	call	#__system____builtin_atoi
0a384     FD 3E 02 F6 | 	mov	local13, result1
0a388                 | 	'.live	local13
0a388                 | 	'.live	local12
0a388     00 3C 8E F9 | 	altd	local12, #0
0a38c     1F 3D 02 F6 | 	mov	local12, local13
0a390     01 3A 06 F1 | 	add	local11, #1
0a394     08 00 90 FD | 	jmp	#LR__0897
0a398                 | LR__0896
0a398                 | '     return(17)
0a398     11 FA 05 F6 | 	mov	result1, #17
0a39c     E4 03 90 FD | 	jmp	#LR__0915
0a3a0                 | LR__0897
0a3a0                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a3a0     1C 2D 02 F6 | 	mov	local04, local10
0a3a4     01 2C 06 F1 | 	add	local04, #1
0a3a8     03 2C 66 F0 | 	shl	local04, #3
0a3ac     35 00 00 FF 
0a3b0     2C E4 05 F1 | 	add	objptr, ##27180
0a3b4     F2 2C 02 F1 | 	add	local04, objptr
0a3b8     16 13 02 FB | 	rdlong	arg01, local04
0a3bc     B3 01 00 FF 
0a3c0     F9 15 06 F6 | 	mov	arg02, ##@LR__5741
0a3c4     35 00 00 FF 
0a3c8     2C E4 85 F1 | 	sub	objptr, ##27180
0a3cc     68 DD B1 FD | 	call	#__system___string_cmp
0a3d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3d4     3C 00 90 AD |  if_e	jmp	#LR__0898
0a3d8     1C 3F 02 F6 | 	mov	local13, local10
0a3dc     01 3E 06 F1 | 	add	local13, #1
0a3e0     03 3E 66 F0 | 	shl	local13, #3
0a3e4     35 00 00 FF 
0a3e8     2C E4 05 F1 | 	add	objptr, ##27180
0a3ec     F2 3E 02 F1 | 	add	local13, objptr
0a3f0     1F 13 02 FB | 	rdlong	arg01, local13
0a3f4     B3 01 00 FF 
0a3f8     FB 15 06 F6 | 	mov	arg02, ##@LR__5742
0a3fc     35 00 00 FF 
0a400     2C E4 85 F1 | 	sub	objptr, ##27180
0a404     30 DD B1 FD | 	call	#__system___string_cmp
0a408     00 FA 0D F2 | 	cmp	result1, #0 wz
0a40c     2C FA 05 56 |  if_ne	mov	result1, #44
0a410     70 03 90 5D |  if_ne	jmp	#LR__0915
0a414                 | LR__0898
0a414     02 38 06 F1 | 	add	local10, #2
0a418     1C 2D 02 F6 | 	mov	local04, local10
0a41c     01 2C 86 F1 | 	sub	local04, #1
0a420     03 2C 66 F0 | 	shl	local04, #3
0a424     35 00 00 FF 
0a428     2C E4 05 F1 | 	add	objptr, ##27180
0a42c     F2 2C 02 F1 | 	add	local04, objptr
0a430     16 13 02 FB | 	rdlong	arg01, local04
0a434     B3 01 00 FF 
0a438     FD 15 06 F6 | 	mov	arg02, ##@LR__5743
0a43c     35 00 00 FF 
0a440     2C E4 85 F1 | 	sub	objptr, ##27180
0a444     F0 DC B1 FD | 	call	#__system___string_cmp
0a448     00 FA 0D F2 | 	cmp	result1, #0 wz
0a44c     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a450     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0895
0a454                 | '   if m>3 then return 45
0a454     04 3A 56 F2 | 	cmps	local11, #4 wc
0a458     2D FA 05 36 |  if_ae	mov	result1, #45
0a45c     24 03 90 3D |  if_ae	jmp	#LR__0915
0a460     00 41 06 F6 | 	mov	local14, #256
0a464     0C 42 06 F6 | 	mov	local15, #12
0a468                 | LR__0899
0a468                 | '   arraytype=array_no_type : esize=12
0a468                 | ' 1350 
0a468                 | '   if lparts(l).part$="as" then
0a468     1C 2D 02 F6 | 	mov	local04, local10
0a46c     03 2C 66 F0 | 	shl	local04, #3
0a470     35 00 00 FF 
0a474     2C E4 05 F1 | 	add	objptr, ##27180
0a478     F2 2C 02 F1 | 	add	local04, objptr
0a47c     16 13 02 FB | 	rdlong	arg01, local04
0a480     B3 01 00 FF 
0a484     FF 15 06 F6 | 	mov	arg02, ##@LR__5744
0a488     35 00 00 FF 
0a48c     2C E4 85 F1 | 	sub	objptr, ##27180
0a490     A4 DC B1 FD | 	call	#__system___string_cmp
0a494     00 FA 0D F2 | 	cmp	result1, #0 wz
0a498     E8 01 90 5D |  if_ne	jmp	#LR__0914
0a49c                 | '     select case lparts(l+1).part$
0a49c     1C 3D 02 F6 | 	mov	local12, local10
0a4a0     01 3C 06 F1 | 	add	local12, #1
0a4a4     03 3C 66 F0 | 	shl	local12, #3
0a4a8     35 00 00 FF 
0a4ac     2C E4 05 F1 | 	add	objptr, ##27180
0a4b0     F2 3C 02 F1 | 	add	local12, objptr
0a4b4     1E 45 02 FB | 	rdlong	local16, local12
0a4b8     B4 01 00 FF 
0a4bc     02 14 06 F6 | 	mov	arg02, ##@LR__5745
0a4c0     22 13 02 F6 | 	mov	arg01, local16
0a4c4     35 00 00 FF 
0a4c8     2C E4 85 F1 | 	sub	objptr, ##27180
0a4cc     68 DC B1 FD | 	call	#__system___string_cmp
0a4d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4d4     0C 01 90 AD |  if_e	jmp	#LR__0900
0a4d8     B4 01 00 FF 
0a4dc     07 14 06 F6 | 	mov	arg02, ##@LR__5746
0a4e0     22 13 02 F6 | 	mov	arg01, local16
0a4e4     50 DC B1 FD | 	call	#__system___string_cmp
0a4e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4ec     00 01 90 AD |  if_e	jmp	#LR__0901
0a4f0     B4 01 00 FF 
0a4f4     0D 14 06 F6 | 	mov	arg02, ##@LR__5747
0a4f8     22 13 02 F6 | 	mov	arg01, local16
0a4fc     38 DC B1 FD | 	call	#__system___string_cmp
0a500     00 FA 0D F2 | 	cmp	result1, #0 wz
0a504     F4 00 90 AD |  if_e	jmp	#LR__0902
0a508     B4 01 00 FF 
0a50c     13 14 06 F6 | 	mov	arg02, ##@LR__5748
0a510     22 13 02 F6 | 	mov	arg01, local16
0a514     20 DC B1 FD | 	call	#__system___string_cmp
0a518     00 FA 0D F2 | 	cmp	result1, #0 wz
0a51c     E8 00 90 AD |  if_e	jmp	#LR__0903
0a520     B4 01 00 FF 
0a524     1A 14 06 F6 | 	mov	arg02, ##@LR__5749
0a528     22 13 02 F6 | 	mov	arg01, local16
0a52c     08 DC B1 FD | 	call	#__system___string_cmp
0a530     00 FA 0D F2 | 	cmp	result1, #0 wz
0a534     DC 00 90 AD |  if_e	jmp	#LR__0904
0a538     B4 01 00 FF 
0a53c     1F 14 06 F6 | 	mov	arg02, ##@LR__5750
0a540     22 13 02 F6 | 	mov	arg01, local16
0a544     F0 DB B1 FD | 	call	#__system___string_cmp
0a548     00 FA 0D F2 | 	cmp	result1, #0 wz
0a54c     D0 00 90 AD |  if_e	jmp	#LR__0905
0a550     B4 01 00 FF 
0a554     27 14 06 F6 | 	mov	arg02, ##@LR__5751
0a558     22 13 02 F6 | 	mov	arg01, local16
0a55c     D8 DB B1 FD | 	call	#__system___string_cmp
0a560     00 FA 0D F2 | 	cmp	result1, #0 wz
0a564     C4 00 90 AD |  if_e	jmp	#LR__0906
0a568     B4 01 00 FF 
0a56c     2D 14 06 F6 | 	mov	arg02, ##@LR__5752
0a570     22 13 02 F6 | 	mov	arg01, local16
0a574     C0 DB B1 FD | 	call	#__system___string_cmp
0a578     00 FA 0D F2 | 	cmp	result1, #0 wz
0a57c     B8 00 90 AD |  if_e	jmp	#LR__0907
0a580     B4 01 00 FF 
0a584     33 14 06 F6 | 	mov	arg02, ##@LR__5753
0a588     22 13 02 F6 | 	mov	arg01, local16
0a58c     A8 DB B1 FD | 	call	#__system___string_cmp
0a590     00 FA 0D F2 | 	cmp	result1, #0 wz
0a594     AC 00 90 AD |  if_e	jmp	#LR__0908
0a598     B4 01 00 FF 
0a59c     3A 14 06 F6 | 	mov	arg02, ##@LR__5754
0a5a0     22 13 02 F6 | 	mov	arg01, local16
0a5a4     90 DB B1 FD | 	call	#__system___string_cmp
0a5a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5ac     A0 00 90 AD |  if_e	jmp	#LR__0909
0a5b0     B4 01 00 FF 
0a5b4     41 14 06 F6 | 	mov	arg02, ##@LR__5755
0a5b8     22 13 02 F6 | 	mov	arg01, local16
0a5bc     78 DB B1 FD | 	call	#__system___string_cmp
0a5c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5c4     94 00 90 AD |  if_e	jmp	#LR__0910
0a5c8     B4 01 00 FF 
0a5cc     48 14 06 F6 | 	mov	arg02, ##@LR__5756
0a5d0     22 13 02 F6 | 	mov	arg01, local16
0a5d4     60 DB B1 FD | 	call	#__system___string_cmp
0a5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5dc     88 00 90 AD |  if_e	jmp	#LR__0911
0a5e0     90 00 90 FD | 	jmp	#LR__0912
0a5e4                 | LR__0900
0a5e4     01 41 06 F6 | 	mov	local14, #257
0a5e8     01 42 06 F6 | 	mov	local15, #1
0a5ec     94 00 90 FD | 	jmp	#LR__0914
0a5f0                 | LR__0901
0a5f0     02 41 06 F6 | 	mov	local14, #258
0a5f4     01 42 06 F6 | 	mov	local15, #1
0a5f8     88 00 90 FD | 	jmp	#LR__0914
0a5fc                 | LR__0902
0a5fc     03 41 06 F6 | 	mov	local14, #259
0a600     02 42 06 F6 | 	mov	local15, #2
0a604     7C 00 90 FD | 	jmp	#LR__0914
0a608                 | LR__0903
0a608     04 41 06 F6 | 	mov	local14, #260
0a60c     02 42 06 F6 | 	mov	local15, #2
0a610     70 00 90 FD | 	jmp	#LR__0914
0a614                 | LR__0904
0a614     05 41 06 F6 | 	mov	local14, #261
0a618     04 42 06 F6 | 	mov	local15, #4
0a61c     64 00 90 FD | 	jmp	#LR__0914
0a620                 | LR__0905
0a620     05 41 06 F6 | 	mov	local14, #261
0a624     04 42 06 F6 | 	mov	local15, #4
0a628     58 00 90 FD | 	jmp	#LR__0914
0a62c                 | LR__0906
0a62c     06 41 06 F6 | 	mov	local14, #262
0a630     04 42 06 F6 | 	mov	local15, #4
0a634     4C 00 90 FD | 	jmp	#LR__0914
0a638                 | LR__0907
0a638     07 41 06 F6 | 	mov	local14, #263
0a63c     08 42 06 F6 | 	mov	local15, #8
0a640     40 00 90 FD | 	jmp	#LR__0914
0a644                 | LR__0908
0a644     08 41 06 F6 | 	mov	local14, #264
0a648     08 42 06 F6 | 	mov	local15, #8
0a64c     34 00 90 FD | 	jmp	#LR__0914
0a650                 | LR__0909
0a650     09 41 06 F6 | 	mov	local14, #265
0a654     04 42 06 F6 | 	mov	local15, #4
0a658     28 00 90 FD | 	jmp	#LR__0914
0a65c                 | LR__0910
0a65c     0A 41 06 F6 | 	mov	local14, #266
0a660     08 42 06 F6 | 	mov	local15, #8
0a664     1C 00 90 FD | 	jmp	#LR__0914
0a668                 | LR__0911
0a668     0B 41 06 F6 | 	mov	local14, #267
0a66c     04 42 06 F6 | 	mov	local15, #4
0a670     10 00 90 FD | 	jmp	#LR__0914
0a674                 | LR__0912
0a674     2F FA 05 F6 | 	mov	result1, #47
0a678     08 01 90 FD | 	jmp	#LR__0915
0a67c                 | LR__0913
0a67c                 | '   return 46
0a67c     2E FA 05 F6 | 	mov	result1, #46
0a680     00 01 90 FD | 	jmp	#LR__0915
0a684                 | LR__0914
0a684     13 43 02 FD | 	qmul	local15, local01
0a688     18 32 62 FD | 	getqx	local07
0a68c     14 33 02 FD | 	qmul	local07, local02
0a690     18 44 62 FD | 	getqx	local16
0a694     15 45 02 FD | 	qmul	local16, local03
0a698     52 00 00 FF 
0a69c     F0 E4 05 F1 | 	add	objptr, ##42224
0a6a0     F2 46 02 FB | 	rdlong	local17, objptr
0a6a4     20 15 02 F6 | 	mov	arg02, local14
0a6a8     18 44 62 FD | 	getqx	local16
0a6ac     22 47 82 F1 | 	sub	local17, local16
0a6b0     10 46 86 F1 | 	sub	local17, #16
0a6b4     0F 46 26 F5 | 	andn	local17, #15
0a6b8     F2 46 62 FC | 	wrlong	local17, objptr
0a6bc     52 00 00 FF 
0a6c0     F0 E4 85 F1 | 	sub	objptr, ##42224
0a6c4     23 13 02 F6 | 	mov	arg01, local17
0a6c8     D8 A1 B1 FD | 	call	#_psdpoke
0a6cc     23 13 02 F6 | 	mov	arg01, local17
0a6d0     02 12 06 F1 | 	add	arg01, #2
0a6d4     21 15 02 F6 | 	mov	arg02, local15
0a6d8     C8 A1 B1 FD | 	call	#_psdpoke
0a6dc     23 13 02 F6 | 	mov	arg01, local17
0a6e0     04 12 06 F1 | 	add	arg01, #4
0a6e4     13 15 02 F6 | 	mov	arg02, local01
0a6e8     70 A1 B1 FD | 	call	#_pslpoke
0a6ec     23 13 02 F6 | 	mov	arg01, local17
0a6f0     08 12 06 F1 | 	add	arg01, #8
0a6f4     14 15 02 F6 | 	mov	arg02, local02
0a6f8     60 A1 B1 FD | 	call	#_pslpoke
0a6fc     23 13 02 F6 | 	mov	arg01, local17
0a700     0C 12 06 F1 | 	add	arg01, #12
0a704     15 15 02 F6 | 	mov	arg02, local03
0a708     50 A1 B1 FD | 	call	#_pslpoke
0a70c     18 3D 02 F6 | 	mov	local12, local06
0a710     04 3C 66 F0 | 	shl	local12, #4
0a714     15 00 00 FF 
0a718     18 E4 05 F1 | 	add	objptr, ##10776
0a71c     F2 3C 02 F1 | 	add	local12, objptr
0a720     1E 2F 62 FC | 	wrlong	local05, local12
0a724     18 3D 02 F6 | 	mov	local12, local06
0a728     04 3C 66 F0 | 	shl	local12, #4
0a72c     F2 3C 02 F1 | 	add	local12, objptr
0a730     04 3C 06 F1 | 	add	local12, #4
0a734     1E 47 62 FC | 	wrlong	local17, local12
0a738     18 3D 02 F6 | 	mov	local12, local06
0a73c     04 3C 66 F0 | 	shl	local12, #4
0a740     F2 3C 02 F1 | 	add	local12, objptr
0a744     0C 3C 06 F1 | 	add	local12, #12
0a748     1E 41 62 FC | 	wrlong	local14, local12
0a74c                 | ' memtop=arrayptr
0a74c                 | ' psdpoke arrayptr,arraytype 
0a74c                 | ' psdpoke arrayptr+2,esize 
0a74c                 | ' pslpoke arrayptr+4,dims(0)
0a74c                 | ' pslpoke arrayptr+8,dims(1)
0a74c                 | ' pslpoke arrayptr+12,dims(2)
0a74c                 | ' variables(j).name=varname2$
0a74c                 | ' variables(j).value.uresult=arrayptr
0a74c                 | ' variables(j).vartype=arraytype
0a74c                 | ' if j=varnum then varnum+=1
0a74c     20 00 00 FF 
0a750     10 E4 05 F1 | 	add	objptr, ##16400
0a754     F2 32 02 FB | 	rdlong	local07, objptr
0a758     35 00 00 FF 
0a75c     28 E4 85 F1 | 	sub	objptr, ##27176
0a760     19 31 0A F2 | 	cmp	local06, local07 wz
0a764     35 00 00 AF 
0a768     28 E4 05 A1 |  if_e	add	objptr, ##27176
0a76c     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a770     01 32 06 A1 |  if_e	add	local07, #1
0a774     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a778     35 00 00 AF 
0a77c     28 E4 85 A1 |  if_e	sub	objptr, ##27176
0a780                 | ' return 0
0a780     00 FA 05 F6 | 	mov	result1, #0
0a784                 | LR__0915
0a784     A7 F0 03 F6 | 	mov	ptra, fp
0a788     B2 00 A0 FD | 	call	#popregs_
0a78c                 | _compile_dim_ret
0a78c     2D 00 64 FD | 	ret
0a790                 | 
0a790                 | ' 
0a790                 | ' '----- compile 'for' command. 
0a790                 | ' 
0a790                 | ' function compile_for() as ulong  
0a790                 | _compile_for
0a790     0E 4A 05 F6 | 	mov	COUNT_, #14
0a794     A8 00 A0 FD | 	call	#pushregs_
0a798                 | ' 
0a798                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a798     37 00 00 FF 
0a79c     64 E4 05 F1 | 	add	objptr, ##28260
0a7a0     F2 14 02 FB | 	rdlong	arg02, objptr
0a7a4     01 14 06 F1 | 	add	arg02, #1
0a7a8     03 14 66 F0 | 	shl	arg02, #3
0a7ac     02 00 00 FF 
0a7b0     38 E4 85 F1 | 	sub	objptr, ##1080
0a7b4     F2 14 02 F1 | 	add	arg02, objptr
0a7b8     0A 13 02 FB | 	rdlong	arg01, arg02
0a7bc     35 00 00 FF 
0a7c0     2C E4 85 F1 | 	sub	objptr, ##27180
0a7c4                 | ' 
0a7c4                 | ' select case s
0a7c4     B1 01 00 FF 
0a7c8     D1 14 06 F6 | 	mov	arg02, ##@LR__5468
0a7cc     68 D9 B1 FD | 	call	#__system___string_cmp
0a7d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7d4     1B FA 05 A6 |  if_e	mov	result1, #27
0a7d8     00 FA 05 56 |  if_ne	mov	result1, #0
0a7dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7e0     0C 00 90 AD |  if_e	jmp	#LR__0920
0a7e4     05 12 06 F6 | 	mov	arg01, #5
0a7e8     A8 DB BF FD | 	call	#_compile_immediate_assign
0a7ec     08 00 90 FD | 	jmp	#LR__0921
0a7f0                 | LR__0920
0a7f0     20 FA 05 F6 | 	mov	result1, #32
0a7f4     58 08 90 FD | 	jmp	#LR__0937
0a7f8                 | LR__0921
0a7f8     4A 00 00 FF 
0a7fc     9C E4 05 F1 | 	add	objptr, ##38044
0a800     F2 14 02 FB | 	rdlong	arg02, objptr
0a804     0A 13 02 F6 | 	mov	arg01, arg02
0a808     01 12 86 F1 | 	sub	arg01, #1
0a80c     09 2D 02 F6 | 	mov	local04, arg01
0a810     01 2C 66 F0 | 	shl	local04, #1
0a814     09 2D 02 F1 | 	add	local04, arg01
0a818     02 2C 66 F0 | 	shl	local04, #2
0a81c     03 00 00 FF 
0a820     00 E4 85 F1 | 	sub	objptr, ##1536
0a824     F2 2C 02 F1 | 	add	local04, objptr
0a828     16 27 02 FB | 	rdlong	local01, local04
0a82c     04 2C 06 F1 | 	add	local04, #4
0a830     16 2F 02 FB | 	rdlong	local05, local04
0a834     01 14 86 F1 | 	sub	arg02, #1
0a838     0A 2D 02 F6 | 	mov	local04, arg02
0a83c     01 2C 66 F0 | 	shl	local04, #1
0a840     0A 2D 02 F1 | 	add	local04, arg02
0a844     02 2C 66 F0 | 	shl	local04, #2
0a848     F2 30 02 F6 | 	mov	local06, objptr
0a84c     F2 2C 02 F1 | 	add	local04, objptr
0a850     08 2C 06 F1 | 	add	local04, #8
0a854     16 2D 02 FB | 	rdlong	local04, local04
0a858     17 29 02 F6 | 	mov	local02, local05
0a85c     16 2B 02 F6 | 	mov	local03, local04
0a860                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a860     17 2A 0E F2 | 	cmp	local03, #23 wz
0a864     47 00 00 FF 
0a868     9C E4 85 F1 | 	sub	objptr, ##36508
0a86c     22 FA 05 56 |  if_ne	mov	result1, #34
0a870     DC 07 90 5D |  if_ne	jmp	#LR__0937
0a874     13 33 02 F6 | 	mov	local07, local01
0a878                 | ' varnum=t1.result.uresult
0a878                 | ' if lparts(ct).part$<>"to" then return 33
0a878     37 00 00 FF 
0a87c     64 E4 05 F1 | 	add	objptr, ##28260
0a880     F2 2C 02 FB | 	rdlong	local04, objptr
0a884     03 2C 66 F0 | 	shl	local04, #3
0a888     02 00 00 FF 
0a88c     38 E4 85 F1 | 	sub	objptr, ##1080
0a890     F2 2C 02 F1 | 	add	local04, objptr
0a894     16 13 02 FB | 	rdlong	arg01, local04
0a898     B4 01 00 FF 
0a89c     4F 14 06 F6 | 	mov	arg02, ##@LR__5757
0a8a0     35 00 00 FF 
0a8a4     2C E4 85 F1 | 	sub	objptr, ##27180
0a8a8     8C D8 B1 FD | 	call	#__system___string_cmp
0a8ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0a8b0     21 FA 05 56 |  if_ne	mov	result1, #33
0a8b4     98 07 90 5D |  if_ne	jmp	#LR__0937
0a8b8     37 00 00 FF 
0a8bc     64 E4 05 F1 | 	add	objptr, ##28260
0a8c0     F2 34 02 FB | 	rdlong	local08, objptr
0a8c4     01 34 06 F1 | 	add	local08, #1
0a8c8     F2 34 62 FC | 	wrlong	local08, objptr
0a8cc     37 00 00 FF 
0a8d0     64 E4 85 F1 | 	sub	objptr, ##28260
0a8d4     2C 17 B0 FD | 	call	#_expr
0a8d8                 | ' ct+=1
0a8d8                 | ' expr()  										' there is "to" value pushed on the stack
0a8d8                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a8d8     37 00 00 FF 
0a8dc     64 E4 05 F1 | 	add	objptr, ##28260
0a8e0     F2 2C 02 FB | 	rdlong	local04, objptr
0a8e4     03 2C 66 F0 | 	shl	local04, #3
0a8e8     02 00 00 FF 
0a8ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a8f0     F2 2C 02 F1 | 	add	local04, objptr
0a8f4     16 13 02 FB | 	rdlong	arg01, local04
0a8f8     B4 01 00 FF 
0a8fc     52 14 06 F6 | 	mov	arg02, ##@LR__5758
0a900     35 00 00 FF 
0a904     2C E4 85 F1 | 	sub	objptr, ##27180
0a908     2C D8 B1 FD | 	call	#__system___string_cmp
0a90c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a910     48 00 90 AD |  if_e	jmp	#LR__0922
0a914     37 00 00 FF 
0a918     64 E4 05 F1 | 	add	objptr, ##28260
0a91c     F2 2C 02 FB | 	rdlong	local04, objptr
0a920     03 2C 66 F0 | 	shl	local04, #3
0a924     02 00 00 FF 
0a928     38 E4 85 F1 | 	sub	objptr, ##1080
0a92c     F2 2C 02 F1 | 	add	local04, objptr
0a930     16 13 02 FB | 	rdlong	arg01, local04
0a934     02 14 06 F6 | 	mov	arg02, #2
0a938     35 00 00 FF 
0a93c     2C E4 85 F1 | 	sub	objptr, ##27180
0a940     4C F8 B1 FD | 	call	#__system__Left_S
0a944     FD 12 02 F6 | 	mov	arg01, result1
0a948     B4 01 00 FF 
0a94c     57 14 06 F6 | 	mov	arg02, ##@LR__5759
0a950     E4 D7 B1 FD | 	call	#__system___string_cmp
0a954     00 FA 0D F2 | 	cmp	result1, #0 wz
0a958     9C 05 90 5D |  if_ne	jmp	#LR__0935
0a95c                 | LR__0922
0a95c                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a95c     37 00 00 FF 
0a960     64 E4 05 F1 | 	add	objptr, ##28260
0a964     F2 2C 02 FB | 	rdlong	local04, objptr
0a968     03 2C 66 F0 | 	shl	local04, #3
0a96c     02 00 00 FF 
0a970     38 E4 85 F1 | 	sub	objptr, ##1080
0a974     F2 2C 02 F1 | 	add	local04, objptr
0a978     16 13 02 FB | 	rdlong	arg01, local04
0a97c     02 14 06 F6 | 	mov	arg02, #2
0a980     35 00 00 FF 
0a984     2C E4 85 F1 | 	sub	objptr, ##27180
0a988     04 F8 B1 FD | 	call	#__system__Left_S
0a98c     FD 12 02 F6 | 	mov	arg01, result1
0a990     B4 01 00 FF 
0a994     5A 14 06 F6 | 	mov	arg02, ##@LR__5760
0a998     9C D7 B1 FD | 	call	#__system___string_cmp
0a99c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a9a0     30 05 90 5D |  if_ne	jmp	#LR__0934
0a9a4     37 00 00 FF 
0a9a8     64 E4 05 F1 | 	add	objptr, ##28260
0a9ac     F2 2C 02 FB | 	rdlong	local04, objptr
0a9b0     03 2C 66 F0 | 	shl	local04, #3
0a9b4     02 00 00 FF 
0a9b8     38 E4 85 F1 | 	sub	objptr, ##1080
0a9bc     F2 2C 02 F1 | 	add	local04, objptr
0a9c0     16 13 02 FB | 	rdlong	arg01, local04
0a9c4     35 00 00 FF 
0a9c8     2C E4 85 F1 | 	sub	objptr, ##27180
0a9cc     09 37 02 F6 | 	mov	local09, arg01
0a9d0     97 06 48 FB | 	callpa	#(@LR__0924-@LR__0923)>>2,fcache_load_ptr_
0a9d4                 | LR__0923
0a9d4     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a9d8     01 36 06 51 |  if_ne	add	local09, #1
0a9dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0923
0a9e0                 | LR__0924
0a9e0     09 37 82 F1 | 	sub	local09, arg01
0a9e4     03 36 56 F2 | 	cmps	local09, #3 wc
0a9e8     E8 04 90 CD |  if_b	jmp	#LR__0934
0a9ec     37 00 00 FF 
0a9f0     64 E4 05 F1 | 	add	objptr, ##28260
0a9f4     F2 2C 02 FB | 	rdlong	local04, objptr
0a9f8     16 39 02 F6 | 	mov	local10, local04
0a9fc     03 38 66 F0 | 	shl	local10, #3
0aa00     02 00 00 FF 
0aa04     38 E4 85 F1 | 	sub	objptr, ##1080
0aa08     F2 38 02 F1 | 	add	local10, objptr
0aa0c     03 2C 66 F0 | 	shl	local04, #3
0aa10     F2 2C 02 F1 | 	add	local04, objptr
0aa14     16 2D 02 FB | 	rdlong	local04, local04
0aa18     02 00 00 FF 
0aa1c     38 E4 05 F1 | 	add	objptr, ##1080
0aa20     F2 12 02 FB | 	rdlong	arg01, objptr
0aa24     03 12 66 F0 | 	shl	arg01, #3
0aa28     02 00 00 FF 
0aa2c     38 E4 85 F1 | 	sub	objptr, ##1080
0aa30     F2 12 02 F1 | 	add	arg01, objptr
0aa34     09 13 02 FB | 	rdlong	arg01, arg01
0aa38     35 00 00 FF 
0aa3c     2C E4 85 F1 | 	sub	objptr, ##27180
0aa40     09 37 02 F6 | 	mov	local09, arg01
0aa44     97 06 48 FB | 	callpa	#(@LR__0926-@LR__0925)>>2,fcache_load_ptr_
0aa48                 | LR__0925
0aa48     1B FB C9 FA | 	rdbyte	result1, local09 wz
0aa4c     01 36 06 51 |  if_ne	add	local09, #1
0aa50     F4 FF 9F 5D |  if_ne	jmp	#LR__0925
0aa54                 | LR__0926
0aa54     09 37 82 F1 | 	sub	local09, arg01
0aa58     1B 15 02 F6 | 	mov	arg02, local09
0aa5c     02 14 86 F1 | 	sub	arg02, #2
0aa60     16 13 02 F6 | 	mov	arg01, local04
0aa64     B0 F7 B1 FD | 	call	#__system__Right_S
0aa68     1C FB 61 FC | 	wrlong	result1, local10
0aa6c     37 00 00 FF 
0aa70     64 E4 05 F1 | 	add	objptr, ##28260
0aa74     F2 2C 02 FB | 	rdlong	local04, objptr
0aa78     16 39 02 F6 | 	mov	local10, local04
0aa7c     03 38 66 F0 | 	shl	local10, #3
0aa80     02 00 00 FF 
0aa84     38 E4 85 F1 | 	sub	objptr, ##1080
0aa88     F2 38 02 F1 | 	add	local10, objptr
0aa8c     03 2C 66 F0 | 	shl	local04, #3
0aa90     F2 2C 02 F1 | 	add	local04, objptr
0aa94     16 13 02 FB | 	rdlong	arg01, local04
0aa98     35 00 00 FF 
0aa9c     2C E4 85 F1 | 	sub	objptr, ##27180
0aaa0     5C B5 BF FD | 	call	#_isfunction
0aaa4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0aaa8     04 38 06 F1 | 	add	local10, #4
0aaac     1C FB 61 FC | 	wrlong	result1, local10
0aab0                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0aab0     37 00 00 FF 
0aab4     64 E4 05 F1 | 	add	objptr, ##28260
0aab8     F2 38 02 FB | 	rdlong	local10, objptr
0aabc     03 38 66 F0 | 	shl	local10, #3
0aac0     02 00 00 FF 
0aac4     38 E4 85 F1 | 	sub	objptr, ##1080
0aac8     F2 38 02 F1 | 	add	local10, objptr
0aacc     04 38 06 F1 | 	add	local10, #4
0aad0     1C 2D 02 FB | 	rdlong	local04, local10
0aad4     01 2C 56 F2 | 	cmps	local04, #1 wc
0aad8     35 00 00 FF 
0aadc     2C E4 85 F1 | 	sub	objptr, ##27180
0aae0     D4 03 90 3D |  if_ae	jmp	#LR__0933
0aae4     37 00 00 FF 
0aae8     64 E4 05 F1 | 	add	objptr, ##28260
0aaec     F2 2C 02 FB | 	rdlong	local04, objptr
0aaf0     16 39 02 F6 | 	mov	local10, local04
0aaf4     03 38 66 F0 | 	shl	local10, #3
0aaf8     02 00 00 FF 
0aafc     38 E4 85 F1 | 	sub	objptr, ##1080
0ab00     F2 38 02 F1 | 	add	local10, objptr
0ab04     03 2C 66 F0 | 	shl	local04, #3
0ab08     F2 2C 02 F1 | 	add	local04, objptr
0ab0c     16 13 02 FB | 	rdlong	arg01, local04
0ab10     35 00 00 FF 
0ab14     2C E4 85 F1 | 	sub	objptr, ##27180
0ab18     18 9E BF FD | 	call	#_isnotename
0ab1c     04 38 06 F1 | 	add	local10, #4
0ab20     1C FB 61 FC | 	wrlong	result1, local10
0ab24                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0ab24                 | '     if lparts(ct).token>0 then 
0ab24     37 00 00 FF 
0ab28     64 E4 05 F1 | 	add	objptr, ##28260
0ab2c     F2 38 02 FB | 	rdlong	local10, objptr
0ab30     03 38 66 F0 | 	shl	local10, #3
0ab34     02 00 00 FF 
0ab38     38 E4 85 F1 | 	sub	objptr, ##1080
0ab3c     F2 38 02 F1 | 	add	local10, objptr
0ab40     04 38 06 F1 | 	add	local10, #4
0ab44     1C 2D 02 FB | 	rdlong	local04, local10
0ab48     01 2C 56 F2 | 	cmps	local04, #1 wc
0ab4c     35 00 00 FF 
0ab50     2C E4 85 F1 | 	sub	objptr, ##27180
0ab54     94 00 90 CD |  if_b	jmp	#LR__0927
0ab58     37 00 00 FF 
0ab5c     64 E4 05 F1 | 	add	objptr, ##28260
0ab60     F2 38 02 FB | 	rdlong	local10, objptr
0ab64     03 38 66 F0 | 	shl	local10, #3
0ab68     02 00 00 FF 
0ab6c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab70     F2 38 02 F1 | 	add	local10, objptr
0ab74     04 38 06 F1 | 	add	local10, #4
0ab78     1C 13 02 FB | 	rdlong	arg01, local10
0ab7c     35 00 00 FF 
0ab80     2C E4 85 F1 | 	sub	objptr, ##27180
0ab84     A0 C6 BF FD | 	call	#_getnoteval
0ab88     FD 12 02 F6 | 	mov	arg01, result1
0ab8c     37 00 00 FF 
0ab90     64 E4 05 F1 | 	add	objptr, ##28260
0ab94     F2 38 02 FB | 	rdlong	local10, objptr
0ab98     03 38 66 F0 | 	shl	local10, #3
0ab9c     02 00 00 FF 
0aba0     38 E4 85 F1 | 	sub	objptr, ##1080
0aba4     F2 38 02 F1 | 	add	local10, objptr
0aba8     35 00 00 FF 
0abac     2C E4 85 F1 | 	sub	objptr, ##27180
0abb0     D4 F7 B1 FD | 	call	#__system__str_S
0abb4     1C FB 61 FC | 	wrlong	result1, local10
0abb8     37 00 00 FF 
0abbc     64 E4 05 F1 | 	add	objptr, ##28260
0abc0     F2 38 02 FB | 	rdlong	local10, objptr
0abc4     03 38 66 F0 | 	shl	local10, #3
0abc8     02 00 00 FF 
0abcc     38 E4 85 F1 | 	sub	objptr, ##1080
0abd0     F2 38 02 F1 | 	add	local10, objptr
0abd4     04 38 06 F1 | 	add	local10, #4
0abd8     01 00 80 FF 
0abdc     1C 05 68 FC | 	wrlong	##514, local10
0abe0     35 00 00 FF 
0abe4     2C E4 85 F1 | 	sub	objptr, ##27180
0abe8     CC 02 90 FD | 	jmp	#LR__0933
0abec                 | LR__0927
0abec     37 00 00 FF 
0abf0     64 E4 05 F1 | 	add	objptr, ##28260
0abf4     F2 2C 02 FB | 	rdlong	local04, objptr
0abf8     16 39 02 F6 | 	mov	local10, local04
0abfc     03 38 66 F0 | 	shl	local10, #3
0ac00     02 00 00 FF 
0ac04     38 E4 85 F1 | 	sub	objptr, ##1080
0ac08     F2 38 02 F1 | 	add	local10, objptr
0ac0c     03 2C 66 F0 | 	shl	local04, #3
0ac10     F2 2C 02 F1 | 	add	local04, objptr
0ac14     16 13 02 FB | 	rdlong	arg01, local04
0ac18     35 00 00 FF 
0ac1c     2C E4 85 F1 | 	sub	objptr, ##27180
0ac20     90 9C BF FD | 	call	#_isconstant
0ac24     04 38 06 F1 | 	add	local10, #4
0ac28     1C FB 61 FC | 	wrlong	result1, local10
0ac2c                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0ac2c     37 00 00 FF 
0ac30     64 E4 05 F1 | 	add	objptr, ##28260
0ac34     F2 38 02 FB | 	rdlong	local10, objptr
0ac38     03 38 66 F0 | 	shl	local10, #3
0ac3c     02 00 00 FF 
0ac40     38 E4 85 F1 | 	sub	objptr, ##1080
0ac44     F2 38 02 F1 | 	add	local10, objptr
0ac48     04 38 06 F1 | 	add	local10, #4
0ac4c     1C 2D 02 FB | 	rdlong	local04, local10
0ac50     01 2C 56 F2 | 	cmps	local04, #1 wc
0ac54     35 00 00 FF 
0ac58     2C E4 85 F1 | 	sub	objptr, ##27180
0ac5c     8C 00 90 CD |  if_b	jmp	#LR__0928
0ac60     37 00 00 FF 
0ac64     64 E4 05 F1 | 	add	objptr, ##28260
0ac68     F2 34 02 FB | 	rdlong	local08, objptr
0ac6c     1A 39 02 F6 | 	mov	local10, local08
0ac70     03 38 66 F0 | 	shl	local10, #3
0ac74     02 00 00 FF 
0ac78     38 E4 85 F1 | 	sub	objptr, ##1080
0ac7c     F2 38 02 F1 | 	add	local10, objptr
0ac80     03 34 66 F0 | 	shl	local08, #3
0ac84     F2 34 02 F1 | 	add	local08, objptr
0ac88     04 34 06 F1 | 	add	local08, #4
0ac8c     1A 13 02 FB | 	rdlong	arg01, local08
0ac90     35 00 00 FF 
0ac94     2C E4 85 F1 | 	sub	objptr, ##27180
0ac98     09 13 52 F6 | 	abs	arg01, arg01 wc
0ac9c     1F 3A C6 C9 |  if_b	decod	local11, #31
0aca0     00 3A 06 36 |  if_ae	mov	local11, #0
0aca4     E0 FE B1 FD | 	call	#__system___float_fromuns
0aca8     1D FB 61 F5 | 	xor	result1, local11
0acac     FD 12 02 F6 | 	mov	arg01, result1
0acb0     D4 F6 B1 FD | 	call	#__system__str_S
0acb4     1C FB 61 FC | 	wrlong	result1, local10
0acb8     37 00 00 FF 
0acbc     64 E4 05 F1 | 	add	objptr, ##28260
0acc0     F2 38 02 FB | 	rdlong	local10, objptr
0acc4     03 38 66 F0 | 	shl	local10, #3
0acc8     02 00 00 FF 
0accc     38 E4 85 F1 | 	sub	objptr, ##1080
0acd0     F2 38 02 F1 | 	add	local10, objptr
0acd4     04 38 06 F1 | 	add	local10, #4
0acd8     01 00 80 FF 
0acdc     1C 03 68 FC | 	wrlong	##513, local10
0ace0     35 00 00 FF 
0ace4     2C E4 85 F1 | 	sub	objptr, ##27180
0ace8     CC 01 90 FD | 	jmp	#LR__0933
0acec                 | LR__0928
0acec     37 00 00 FF 
0acf0     64 E4 05 F1 | 	add	objptr, ##28260
0acf4     F2 38 02 FB | 	rdlong	local10, objptr
0acf8     03 38 66 F0 | 	shl	local10, #3
0acfc     02 00 00 FF 
0ad00     38 E4 85 F1 | 	sub	objptr, ##1080
0ad04     F2 38 02 F1 | 	add	local10, objptr
0ad08     1C 13 02 FB | 	rdlong	arg01, local10
0ad0c     35 00 00 FF 
0ad10     2C E4 85 F1 | 	sub	objptr, ##27180
0ad14     5C BD BF FD | 	call	#_isnum
0ad18     FD 3C 02 F6 | 	mov	local12, result1
0ad1c     37 00 00 FF 
0ad20     64 E4 05 F1 | 	add	objptr, ##28260
0ad24     F2 38 02 FB | 	rdlong	local10, objptr
0ad28     03 38 66 F0 | 	shl	local10, #3
0ad2c     02 00 00 FF 
0ad30     38 E4 85 F1 | 	sub	objptr, ##1080
0ad34     F2 38 02 F1 | 	add	local10, objptr
0ad38     1C 13 02 FB | 	rdlong	arg01, local10
0ad3c     35 00 00 FF 
0ad40     2C E4 85 F1 | 	sub	objptr, ##27180
0ad44     18 C1 BF FD | 	call	#_isint
0ad48     FD 3E 02 F6 | 	mov	local13, result1
0ad4c     37 00 00 FF 
0ad50     64 E4 05 F1 | 	add	objptr, ##28260
0ad54     F2 38 02 FB | 	rdlong	local10, objptr
0ad58     03 38 66 F0 | 	shl	local10, #3
0ad5c     02 00 00 FF 
0ad60     38 E4 85 F1 | 	sub	objptr, ##1080
0ad64     F2 38 02 F1 | 	add	local10, objptr
0ad68     1C 13 02 FB | 	rdlong	arg01, local10
0ad6c     35 00 00 FF 
0ad70     2C E4 85 F1 | 	sub	objptr, ##27180
0ad74     8C C3 BF FD | 	call	#_isdec
0ad78     FD 40 02 F6 | 	mov	local14, result1
0ad7c                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ad7c                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ad7c     00 3C 0E F2 | 	cmp	local12, #0 wz
0ad80     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ad84     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ad88     34 00 90 AD |  if_e	jmp	#LR__0929
0ad8c     37 00 00 FF 
0ad90     64 E4 05 F1 | 	add	objptr, ##28260
0ad94     F2 38 02 FB | 	rdlong	local10, objptr
0ad98     03 38 66 F0 | 	shl	local10, #3
0ad9c     02 00 00 FF 
0ada0     38 E4 85 F1 | 	sub	objptr, ##1080
0ada4     F2 38 02 F1 | 	add	local10, objptr
0ada8     04 38 06 F1 | 	add	local10, #4
0adac     01 00 80 FF 
0adb0     1C 01 68 FC | 	wrlong	##512, local10
0adb4     35 00 00 FF 
0adb8     2C E4 85 F1 | 	sub	objptr, ##27180
0adbc     F8 00 90 FD | 	jmp	#LR__0933
0adc0                 | LR__0929
0adc0                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0adc0     00 3C 0E F2 | 	cmp	local12, #0 wz
0adc4     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0adc8     20 35 22 56 |  if_ne	not	local08, local14
0adcc     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0add0     34 00 90 AD |  if_e	jmp	#LR__0930
0add4     37 00 00 FF 
0add8     64 E4 05 F1 | 	add	objptr, ##28260
0addc     F2 38 02 FB | 	rdlong	local10, objptr
0ade0     03 38 66 F0 | 	shl	local10, #3
0ade4     02 00 00 FF 
0ade8     38 E4 85 F1 | 	sub	objptr, ##1080
0adec     F2 38 02 F1 | 	add	local10, objptr
0adf0     04 38 06 F1 | 	add	local10, #4
0adf4     01 00 80 FF 
0adf8     1C 03 68 FC | 	wrlong	##513, local10
0adfc     35 00 00 FF 
0ae00     2C E4 85 F1 | 	sub	objptr, ##27180
0ae04     B0 00 90 FD | 	jmp	#LR__0933
0ae08                 | LR__0930
0ae08                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ae08     00 3C 0E F2 | 	cmp	local12, #0 wz
0ae0c     1F 3F 22 56 |  if_ne	not	local13, local13
0ae10     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ae14     20 41 22 56 |  if_ne	not	local14, local14
0ae18     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ae1c     34 00 90 AD |  if_e	jmp	#LR__0931
0ae20     37 00 00 FF 
0ae24     64 E4 05 F1 | 	add	objptr, ##28260
0ae28     F2 38 02 FB | 	rdlong	local10, objptr
0ae2c     03 38 66 F0 | 	shl	local10, #3
0ae30     02 00 00 FF 
0ae34     38 E4 85 F1 | 	sub	objptr, ##1080
0ae38     F2 38 02 F1 | 	add	local10, objptr
0ae3c     04 38 06 F1 | 	add	local10, #4
0ae40     01 00 80 FF 
0ae44     1C 05 68 FC | 	wrlong	##514, local10
0ae48     35 00 00 FF 
0ae4c     2C E4 85 F1 | 	sub	objptr, ##27180
0ae50     64 00 90 FD | 	jmp	#LR__0933
0ae54                 | LR__0931
0ae54                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ae54     37 00 00 FF 
0ae58     64 E4 05 F1 | 	add	objptr, ##28260
0ae5c     F2 38 02 FB | 	rdlong	local10, objptr
0ae60     03 38 66 F0 | 	shl	local10, #3
0ae64     02 00 00 FF 
0ae68     38 E4 85 F1 | 	sub	objptr, ##1080
0ae6c     F2 38 02 F1 | 	add	local10, objptr
0ae70     1C 13 02 FB | 	rdlong	arg01, local10
0ae74     35 00 00 FF 
0ae78     2C E4 85 F1 | 	sub	objptr, ##27180
0ae7c     80 B9 BF FD | 	call	#_isname
0ae80     00 FA 0D F2 | 	cmp	result1, #0 wz
0ae84     30 00 90 AD |  if_e	jmp	#LR__0932
0ae88     37 00 00 FF 
0ae8c     64 E4 05 F1 | 	add	objptr, ##28260
0ae90     F2 38 02 FB | 	rdlong	local10, objptr
0ae94     03 38 66 F0 | 	shl	local10, #3
0ae98     02 00 00 FF 
0ae9c     38 E4 85 F1 | 	sub	objptr, ##1080
0aea0     F2 38 02 F1 | 	add	local10, objptr
0aea4     04 38 06 F1 | 	add	local10, #4
0aea8     01 00 80 FF 
0aeac     1C 09 68 FC | 	wrlong	##516, local10
0aeb0     35 00 00 FF 
0aeb4     2C E4 85 F1 | 	sub	objptr, ##27180
0aeb8                 | LR__0932
0aeb8                 | LR__0933
0aeb8     37 00 00 FF 
0aebc     64 E4 05 F1 | 	add	objptr, ##28260
0aec0     F2 34 02 FB | 	rdlong	local08, objptr
0aec4     01 34 86 F1 | 	sub	local08, #1
0aec8     F2 34 62 FC | 	wrlong	local08, objptr
0aecc     37 00 00 FF 
0aed0     64 E4 85 F1 | 	sub	objptr, ##28260
0aed4                 | LR__0934
0aed4     37 00 00 FF 
0aed8     64 E4 05 F1 | 	add	objptr, ##28260
0aedc     F2 34 02 FB | 	rdlong	local08, objptr
0aee0     01 34 06 F1 | 	add	local08, #1
0aee4     F2 34 62 FC | 	wrlong	local08, objptr
0aee8     37 00 00 FF 
0aeec     64 E4 85 F1 | 	sub	objptr, ##28260
0aef0     10 11 B0 FD | 	call	#_expr
0aef4     78 00 90 FD | 	jmp	#LR__0936
0aef8                 | LR__0935
0aef8     4A 00 00 FF 
0aefc     9C E4 05 F1 | 	add	objptr, ##38044
0af00     F2 40 02 FB | 	rdlong	local14, objptr
0af04     20 39 02 F6 | 	mov	local10, local14
0af08     01 38 66 F0 | 	shl	local10, #1
0af0c     20 39 02 F1 | 	add	local10, local14
0af10     02 38 66 F0 | 	shl	local10, #2
0af14     03 00 00 FF 
0af18     00 E4 85 F1 | 	sub	objptr, ##1536
0af1c     F2 38 02 F1 | 	add	local10, objptr
0af20     08 38 06 F1 | 	add	local10, #8
0af24     1C 39 68 FC | 	wrlong	#28, local10
0af28     03 00 00 FF 
0af2c     00 E4 05 F1 | 	add	objptr, ##1536
0af30     F2 40 02 FB | 	rdlong	local14, objptr
0af34     20 39 02 F6 | 	mov	local10, local14
0af38     01 38 66 F0 | 	shl	local10, #1
0af3c     20 39 02 F1 | 	add	local10, local14
0af40     02 38 66 F0 | 	shl	local10, #2
0af44     03 00 00 FF 
0af48     00 E4 85 F1 | 	sub	objptr, ##1536
0af4c     F2 38 02 F1 | 	add	local10, objptr
0af50     1C 03 68 FC | 	wrlong	#1, local10
0af54     03 00 00 FF 
0af58     00 E4 05 F1 | 	add	objptr, ##1536
0af5c     F2 34 02 FB | 	rdlong	local08, objptr
0af60     01 34 06 F1 | 	add	local08, #1
0af64     F2 34 62 FC | 	wrlong	local08, objptr
0af68     4A 00 00 FF 
0af6c     9C E4 85 F1 | 	sub	objptr, ##38044
0af70                 | LR__0936
0af70     4A 00 00 FF 
0af74     9C E4 05 F1 | 	add	objptr, ##38044
0af78     F2 40 02 FB | 	rdlong	local14, objptr
0af7c     20 39 02 F6 | 	mov	local10, local14
0af80     01 38 66 F0 | 	shl	local10, #1
0af84     20 39 02 F1 | 	add	local10, local14
0af88     02 38 66 F0 | 	shl	local10, #2
0af8c     03 00 00 FF 
0af90     00 E4 85 F1 | 	sub	objptr, ##1536
0af94     F2 38 02 F1 | 	add	local10, objptr
0af98     08 38 06 F1 | 	add	local10, #8
0af9c     1C 39 68 FC | 	wrlong	#28, local10
0afa0     03 00 00 FF 
0afa4     00 E4 05 F1 | 	add	objptr, ##1536
0afa8     F2 40 02 FB | 	rdlong	local14, objptr
0afac     20 39 02 F6 | 	mov	local10, local14
0afb0     01 38 66 F0 | 	shl	local10, #1
0afb4     20 39 02 F1 | 	add	local10, local14
0afb8     02 38 66 F0 | 	shl	local10, #2
0afbc     03 00 00 FF 
0afc0     00 E4 85 F1 | 	sub	objptr, ##1536
0afc4     F2 38 02 F1 | 	add	local10, objptr
0afc8     1C 33 62 FC | 	wrlong	local07, local10
0afcc     03 00 00 FF 
0afd0     00 E4 05 F1 | 	add	objptr, ##1536
0afd4     F2 40 02 FB | 	rdlong	local14, objptr
0afd8     01 40 06 F1 | 	add	local14, #1
0afdc     F2 40 62 FC | 	wrlong	local14, objptr
0afe0     20 39 02 F6 | 	mov	local10, local14
0afe4     01 38 66 F0 | 	shl	local10, #1
0afe8     20 39 02 F1 | 	add	local10, local14
0afec     02 38 66 F0 | 	shl	local10, #2
0aff0     03 00 00 FF 
0aff4     00 E4 85 F1 | 	sub	objptr, ##1536
0aff8     F2 38 02 F1 | 	add	local10, objptr
0affc     08 38 06 F1 | 	add	local10, #8
0b000     1C 95 68 FC | 	wrlong	#74, local10
0b004     03 00 00 FF 
0b008     00 E4 05 F1 | 	add	objptr, ##1536
0b00c     F2 40 02 FB | 	rdlong	local14, objptr
0b010     20 39 02 F6 | 	mov	local10, local14
0b014     01 38 66 F0 | 	shl	local10, #1
0b018     20 39 02 F1 | 	add	local10, local14
0b01c     02 38 66 F0 | 	shl	local10, #2
0b020     03 00 00 FF 
0b024     00 E4 85 F1 | 	sub	objptr, ##1536
0b028     F2 38 02 F1 | 	add	local10, objptr
0b02c     1C 01 68 FC | 	wrlong	#0, local10
0b030     03 00 00 FF 
0b034     00 E4 05 F1 | 	add	objptr, ##1536
0b038     F2 34 02 FB | 	rdlong	local08, objptr
0b03c     01 34 06 F1 | 	add	local08, #1
0b040     F2 34 62 FC | 	wrlong	local08, objptr
0b044     4A 00 00 FF 
0b048     9C E4 85 F1 | 	sub	objptr, ##38044
0b04c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0b04c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b04c                 | ' return 0
0b04c     00 FA 05 F6 | 	mov	result1, #0
0b050                 | LR__0937
0b050     A7 F0 03 F6 | 	mov	ptra, fp
0b054     B2 00 A0 FD | 	call	#popregs_
0b058                 | _compile_for_ret
0b058     2D 00 64 FD | 	ret
0b05c                 | 
0b05c                 | ' 
0b05c                 | ' '----- compile 'next' command. 
0b05c                 | ' 
0b05c                 | ' function compile_next() as ulong
0b05c                 | _compile_next
0b05c     04 4A 05 F6 | 	mov	COUNT_, #4
0b060     A8 00 A0 FD | 	call	#pushregs_
0b064     37 00 00 FF 
0b068     64 E4 05 F1 | 	add	objptr, ##28260
0b06c     F2 14 02 FB | 	rdlong	arg02, objptr
0b070     03 14 66 F0 | 	shl	arg02, #3
0b074     02 00 00 FF 
0b078     38 E4 85 F1 | 	sub	objptr, ##1080
0b07c     F2 14 02 F1 | 	add	arg02, objptr
0b080     0A 27 02 FB | 	rdlong	local01, arg02
0b084                 | ' 
0b084                 | ' varname$=lparts(ct).part$ 
0b084                 | ' if varnum=0 then return 35
0b084     04 E4 85 F1 | 	sub	objptr, #4
0b088     F2 14 0A FB | 	rdlong	arg02, objptr wz
0b08c     35 00 00 FF 
0b090     28 E4 85 F1 | 	sub	objptr, ##27176
0b094     23 FA 05 A6 |  if_e	mov	result1, #35
0b098     4C 01 90 AD |  if_e	jmp	#LR__0942
0b09c     01 28 66 F6 | 	neg	local02, #1
0b0a0                 | ' j=-1
0b0a0                 | ' for i=0 to varnum-1
0b0a0     00 2A 06 F6 | 	mov	local03, #0
0b0a4     35 00 00 FF 
0b0a8     28 E4 05 F1 | 	add	objptr, ##27176
0b0ac     F2 2C 02 FB | 	rdlong	local04, objptr
0b0b0     35 00 00 FF 
0b0b4     28 E4 85 F1 | 	sub	objptr, ##27176
0b0b8                 | LR__0940
0b0b8     16 2B 12 F2 | 	cmp	local03, local04 wc
0b0bc     38 00 90 3D |  if_ae	jmp	#LR__0941
0b0c0                 | '   if variables(i).name=varname$ then j=i : exit
0b0c0     15 15 02 F6 | 	mov	arg02, local03
0b0c4     04 14 66 F0 | 	shl	arg02, #4
0b0c8     15 00 00 FF 
0b0cc     18 E4 05 F1 | 	add	objptr, ##10776
0b0d0     F2 14 02 F1 | 	add	arg02, objptr
0b0d4     0A 13 02 FB | 	rdlong	arg01, arg02
0b0d8     13 15 02 F6 | 	mov	arg02, local01
0b0dc     15 00 00 FF 
0b0e0     18 E4 85 F1 | 	sub	objptr, ##10776
0b0e4     50 D0 B1 FD | 	call	#__system___string_cmp
0b0e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b0ec     15 29 02 A6 |  if_e	mov	local02, local03
0b0f0     01 2A 06 51 |  if_ne	add	local03, #1
0b0f4     C0 FF 9F 5D |  if_ne	jmp	#LR__0940
0b0f8                 | LR__0941
0b0f8                 | ' if j=-1 then return 35
0b0f8     FF FF 7F FF 
0b0fc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0b100     23 FA 05 A6 |  if_e	mov	result1, #35
0b104     E0 00 90 AD |  if_e	jmp	#LR__0942
0b108     4A 00 00 FF 
0b10c     9C E4 05 F1 | 	add	objptr, ##38044
0b110     F2 2C 02 FB | 	rdlong	local04, objptr
0b114     16 2B 02 F6 | 	mov	local03, local04
0b118     01 2A 66 F0 | 	shl	local03, #1
0b11c     16 2B 02 F1 | 	add	local03, local04
0b120     02 2A 66 F0 | 	shl	local03, #2
0b124     03 00 00 FF 
0b128     00 E4 85 F1 | 	sub	objptr, ##1536
0b12c     F2 2A 02 F1 | 	add	local03, objptr
0b130     08 2A 06 F1 | 	add	local03, #8
0b134     15 39 68 FC | 	wrlong	#28, local03
0b138     03 00 00 FF 
0b13c     00 E4 05 F1 | 	add	objptr, ##1536
0b140     F2 2C 02 FB | 	rdlong	local04, objptr
0b144     16 2B 02 F6 | 	mov	local03, local04
0b148     01 2A 66 F0 | 	shl	local03, #1
0b14c     16 2B 02 F1 | 	add	local03, local04
0b150     02 2A 66 F0 | 	shl	local03, #2
0b154     03 00 00 FF 
0b158     00 E4 85 F1 | 	sub	objptr, ##1536
0b15c     F2 2A 02 F1 | 	add	local03, objptr
0b160     15 29 62 FC | 	wrlong	local02, local03
0b164     03 00 00 FF 
0b168     00 E4 05 F1 | 	add	objptr, ##1536
0b16c     F2 2C 02 FB | 	rdlong	local04, objptr
0b170     01 2C 06 F1 | 	add	local04, #1
0b174     F2 2C 62 FC | 	wrlong	local04, objptr
0b178     16 2B 02 F6 | 	mov	local03, local04
0b17c     01 2A 66 F0 | 	shl	local03, #1
0b180     16 2B 02 F1 | 	add	local03, local04
0b184     02 2A 66 F0 | 	shl	local03, #2
0b188     03 00 00 FF 
0b18c     00 E4 85 F1 | 	sub	objptr, ##1536
0b190     F2 2A 02 F1 | 	add	local03, objptr
0b194     08 2A 06 F1 | 	add	local03, #8
0b198     15 97 68 FC | 	wrlong	#75, local03
0b19c     03 00 00 FF 
0b1a0     00 E4 05 F1 | 	add	objptr, ##1536
0b1a4     F2 2C 02 FB | 	rdlong	local04, objptr
0b1a8     16 2B 02 F6 | 	mov	local03, local04
0b1ac     01 2A 66 F0 | 	shl	local03, #1
0b1b0     16 2B 02 F1 | 	add	local03, local04
0b1b4     02 2A 66 F0 | 	shl	local03, #2
0b1b8     03 00 00 FF 
0b1bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b1c0     F2 2A 02 F1 | 	add	local03, objptr
0b1c4     15 01 68 FC | 	wrlong	#0, local03
0b1c8     03 00 00 FF 
0b1cc     00 E4 05 F1 | 	add	objptr, ##1536
0b1d0     F2 2C 02 FB | 	rdlong	local04, objptr
0b1d4     01 2C 06 F1 | 	add	local04, #1
0b1d8     F2 2C 62 FC | 	wrlong	local04, objptr
0b1dc     4A 00 00 FF 
0b1e0     9C E4 85 F1 | 	sub	objptr, ##38044
0b1e4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b1e4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b1e4                 | ' return 0
0b1e4     00 FA 05 F6 | 	mov	result1, #0
0b1e8                 | LR__0942
0b1e8     A7 F0 03 F6 | 	mov	ptra, fp
0b1ec     B2 00 A0 FD | 	call	#popregs_
0b1f0                 | _compile_next_ret
0b1f0     2D 00 64 FD | 	ret
0b1f4                 | 
0b1f4                 | ' 
0b1f4                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b1f4                 | ' 
0b1f4                 | ' function compile_gosub() as ulong
0b1f4                 | _compile_gosub
0b1f4     02 4A 05 F6 | 	mov	COUNT_, #2
0b1f8     A8 00 A0 FD | 	call	#pushregs_
0b1fc     4A 00 00 FF 
0b200     9C E4 05 F1 | 	add	objptr, ##38044
0b204     F2 26 02 FB | 	rdlong	local01, objptr
0b208     13 29 02 F6 | 	mov	local02, local01
0b20c     01 28 66 F0 | 	shl	local02, #1
0b210     13 29 02 F1 | 	add	local02, local01
0b214     02 28 66 F0 | 	shl	local02, #2
0b218     03 00 00 FF 
0b21c     00 E4 85 F1 | 	sub	objptr, ##1536
0b220     F2 28 02 F1 | 	add	local02, objptr
0b224     08 28 06 F1 | 	add	local02, #8
0b228     14 53 69 FC | 	wrlong	#169, local02
0b22c     03 00 00 FF 
0b230     00 E4 05 F1 | 	add	objptr, ##1536
0b234     F2 28 02 FB | 	rdlong	local02, objptr
0b238     01 28 06 F1 | 	add	local02, #1
0b23c     F2 28 62 FC | 	wrlong	local02, objptr
0b240     4A 00 00 FF 
0b244     9C E4 85 F1 | 	sub	objptr, ##38044
0b248     0C 00 B0 FD | 	call	#_compile_goto
0b24c                 | ' compiledline(lineptr).result_type=token_gosub
0b24c                 | ' lineptr+=1
0b24c                 | ' err=compile_goto()
0b24c                 | ' return err
0b24c     A7 F0 03 F6 | 	mov	ptra, fp
0b250     B2 00 A0 FD | 	call	#popregs_
0b254                 | _compile_gosub_ret
0b254     2D 00 64 FD | 	ret
0b258                 | 
0b258                 | ' 
0b258                 | ' '----- compile 'goto' 
0b258                 | ' 
0b258                 | ' function compile_goto() as ulong
0b258                 | _compile_goto
0b258     03 4A 05 F6 | 	mov	COUNT_, #3
0b25c     A8 00 A0 FD | 	call	#pushregs_
0b260     34 F0 07 F1 | 	add	ptra, #52
0b264                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b264     37 00 00 FF 
0b268     64 E4 05 F1 | 	add	objptr, ##28260
0b26c     F2 16 02 FB | 	rdlong	arg03, objptr
0b270     03 16 66 F0 | 	shl	arg03, #3
0b274     02 00 00 FF 
0b278     38 E4 85 F1 | 	sub	objptr, ##1080
0b27c     F2 16 02 F1 | 	add	arg03, objptr
0b280     04 16 06 F1 | 	add	arg03, #4
0b284     0B 17 02 FB | 	rdlong	arg03, arg03
0b288     01 00 00 FF 
0b28c     00 16 0E F2 | 	cmp	arg03, ##512 wz
0b290     35 00 00 FF 
0b294     2C E4 85 F1 | 	sub	objptr, ##27180
0b298     CC 02 90 5D |  if_ne	jmp	#LR__0955
0b29c     37 00 00 FF 
0b2a0     64 E4 05 F1 | 	add	objptr, ##28260
0b2a4     F2 16 02 FB | 	rdlong	arg03, objptr
0b2a8     01 16 06 F1 | 	add	arg03, #1
0b2ac     03 16 66 F0 | 	shl	arg03, #3
0b2b0     02 00 00 FF 
0b2b4     38 E4 85 F1 | 	sub	objptr, ##1080
0b2b8     F2 16 02 F1 | 	add	arg03, objptr
0b2bc     04 16 06 F1 | 	add	arg03, #4
0b2c0     0B 17 02 FB | 	rdlong	arg03, arg03
0b2c4     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b2c8     35 00 00 FF 
0b2cc     2C E4 85 F1 | 	sub	objptr, ##27180
0b2d0     94 02 90 5D |  if_ne	jmp	#LR__0955
0b2d4     37 00 00 FF 
0b2d8     64 E4 05 F1 | 	add	objptr, ##28260
0b2dc     F2 16 02 FB | 	rdlong	arg03, objptr
0b2e0     03 16 66 F0 | 	shl	arg03, #3
0b2e4     02 00 00 FF 
0b2e8     38 E4 85 F1 | 	sub	objptr, ##1080
0b2ec     F2 16 02 F1 | 	add	arg03, objptr
0b2f0     0B 13 02 FB | 	rdlong	arg01, arg03
0b2f4     00 14 06 F6 | 	mov	arg02, #0
0b2f8     35 00 00 FF 
0b2fc     2C E4 85 F1 | 	sub	objptr, ##27180
0b300     00 03 B2 FD | 	call	#__system____builtin_atoi
0b304     04 4E 05 F1 | 	add	fp, #4
0b308     A7 FA 61 FC | 	wrlong	result1, fp
0b30c     4A 00 00 FF 
0b310     9C E4 05 F1 | 	add	objptr, ##38044
0b314     F2 26 02 FB | 	rdlong	local01, objptr
0b318     13 29 02 F6 | 	mov	local02, local01
0b31c     01 28 66 F0 | 	shl	local02, #1
0b320     13 29 02 F1 | 	add	local02, local01
0b324     02 28 66 F0 | 	shl	local02, #2
0b328     03 00 00 FF 
0b32c     00 E4 85 F1 | 	sub	objptr, ##1536
0b330     F2 28 02 F1 | 	add	local02, objptr
0b334     08 28 06 F1 | 	add	local02, #8
0b338     14 9D 68 FC | 	wrlong	#78, local02
0b33c     03 00 00 FF 
0b340     0C E4 05 F1 | 	add	objptr, ##1548
0b344     F2 2A 02 FB | 	rdlong	local03, objptr
0b348     4A 00 00 FF 
0b34c     A8 E4 85 F1 | 	sub	objptr, ##38056
0b350     04 4E 05 F1 | 	add	fp, #4
0b354     A7 2A 62 FC | 	wrlong	local03, fp
0b358     08 4E 85 F1 | 	sub	fp, #8
0b35c                 | '   gotoline=val%(lparts(ct).part$) 
0b35c                 | '   compiledline(lineptr).result_type=token_fast_goto
0b35c                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b35c                 | '   do
0b35c                 | LR__0950
0b35c     10 4E 05 F1 | 	add	fp, #16
0b360     A7 12 02 F6 | 	mov	arg01, fp
0b364     08 4E 85 F1 | 	sub	fp, #8
0b368     A7 14 02 FB | 	rdlong	arg02, fp
0b36c     08 4E 85 F1 | 	sub	fp, #8
0b370     18 16 06 F6 | 	mov	arg03, #24
0b374     0B 00 00 FF 
0b378     CC E4 05 F1 | 	add	objptr, ##5836
0b37c     EC C0 B1 FD | 	call	#_psram_spin2_read1
0b380     0B 00 00 FF 
0b384     CC E4 85 F1 | 	sub	objptr, ##5836
0b388                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b388                 | '     if gotoheader(0)<>$FFFFFFFF then
0b388     10 4E 05 F1 | 	add	fp, #16
0b38c     A7 2A 02 FB | 	rdlong	local03, fp
0b390     10 4E 85 F1 | 	sub	fp, #16
0b394     FF FF 7F FF 
0b398     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b39c     24 00 90 AD |  if_e	jmp	#LR__0951
0b3a0     08 4E 05 F1 | 	add	fp, #8
0b3a4     A7 2A 02 FB | 	rdlong	local03, fp
0b3a8     04 4E 05 F1 | 	add	fp, #4
0b3ac     A7 2A 62 FC | 	wrlong	local03, fp
0b3b0     18 4E 05 F1 | 	add	fp, #24
0b3b4     A7 2A 02 FB | 	rdlong	local03, fp
0b3b8     1C 4E 85 F1 | 	sub	fp, #28
0b3bc     A7 2A 62 FC | 	wrlong	local03, fp
0b3c0     08 4E 85 F1 | 	sub	fp, #8
0b3c4                 | LR__0951
0b3c4     24 4E 05 F1 | 	add	fp, #36
0b3c8     A7 2A 02 FB | 	rdlong	local03, fp
0b3cc     24 4E 85 F1 | 	sub	fp, #36
0b3d0     FF FF 3F FF 
0b3d4     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b3d8     10 4E 05 51 |  if_ne	add	fp, #16
0b3dc     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b3e0     10 4E 85 51 |  if_ne	sub	fp, #16
0b3e4     FF FF 7F 5F 
0b3e8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b3ec     1C 00 90 AD |  if_e	jmp	#LR__0952
0b3f0     10 4E 05 F1 | 	add	fp, #16
0b3f4     A7 2A 02 FB | 	rdlong	local03, fp
0b3f8     0C 4E 85 F1 | 	sub	fp, #12
0b3fc     A7 28 02 FB | 	rdlong	local02, fp
0b400     04 4E 85 F1 | 	sub	fp, #4
0b404     14 2B 0A F2 | 	cmp	local03, local02 wz
0b408     50 FF 9F 5D |  if_ne	jmp	#LR__0950
0b40c                 | LR__0952
0b40c                 | '   if gotoheader(0)=gotoline then
0b40c     10 4E 05 F1 | 	add	fp, #16
0b410     A7 2A 02 FB | 	rdlong	local03, fp
0b414     0C 4E 85 F1 | 	sub	fp, #12
0b418     A7 26 02 FB | 	rdlong	local01, fp
0b41c     04 4E 85 F1 | 	sub	fp, #4
0b420     13 2B 0A F2 | 	cmp	local03, local01 wz
0b424     7C 00 90 5D |  if_ne	jmp	#LR__0953
0b428     4A 00 00 FF 
0b42c     9C E4 05 F1 | 	add	objptr, ##38044
0b430     F2 26 02 FB | 	rdlong	local01, objptr
0b434     13 29 02 F6 | 	mov	local02, local01
0b438     01 28 66 F0 | 	shl	local02, #1
0b43c     13 29 02 F1 | 	add	local02, local01
0b440     02 28 66 F0 | 	shl	local02, #2
0b444     03 00 00 FF 
0b448     00 E4 85 F1 | 	sub	objptr, ##1536
0b44c     F2 28 02 F1 | 	add	local02, objptr
0b450     0C 4E 05 F1 | 	add	fp, #12
0b454     A7 2A 02 FB | 	rdlong	local03, fp
0b458     14 2B 62 FC | 	wrlong	local03, local02
0b45c     03 00 00 FF 
0b460     00 E4 05 F1 | 	add	objptr, ##1536
0b464     F2 26 02 FB | 	rdlong	local01, objptr
0b468     13 29 02 F6 | 	mov	local02, local01
0b46c     01 28 66 F0 | 	shl	local02, #1
0b470     13 29 02 F1 | 	add	local02, local01
0b474     02 28 66 F0 | 	shl	local02, #2
0b478     03 00 00 FF 
0b47c     00 E4 85 F1 | 	sub	objptr, ##1536
0b480     F2 28 02 F1 | 	add	local02, objptr
0b484     08 4E 85 F1 | 	sub	fp, #8
0b488     A7 2A 02 FB | 	rdlong	local03, fp
0b48c     04 4E 85 F1 | 	sub	fp, #4
0b490     04 28 06 F1 | 	add	local02, #4
0b494     14 2B 62 FC | 	wrlong	local03, local02
0b498     47 00 00 FF 
0b49c     9C E4 85 F1 | 	sub	objptr, ##36508
0b4a0     A4 00 90 FD | 	jmp	#LR__0954
0b4a4                 | LR__0953
0b4a4     4A 00 00 FF 
0b4a8     9C E4 05 F1 | 	add	objptr, ##38044
0b4ac     F2 26 02 FB | 	rdlong	local01, objptr
0b4b0     13 29 02 F6 | 	mov	local02, local01
0b4b4     01 28 66 F0 | 	shl	local02, #1
0b4b8     13 29 02 F1 | 	add	local02, local01
0b4bc     02 28 66 F0 | 	shl	local02, #2
0b4c0     03 00 00 FF 
0b4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c8     F2 28 02 F1 | 	add	local02, objptr
0b4cc     00 00 C0 FF 
0b4d0     14 01 68 FC | 	wrlong	##-2147483648, local02
0b4d4     03 00 00 FF 
0b4d8     00 E4 05 F1 | 	add	objptr, ##1536
0b4dc     F2 26 02 FB | 	rdlong	local01, objptr
0b4e0     13 29 02 F6 | 	mov	local02, local01
0b4e4     01 28 66 F0 | 	shl	local02, #1
0b4e8     13 29 02 F1 | 	add	local02, local01
0b4ec     02 28 66 F0 | 	shl	local02, #2
0b4f0     03 00 00 FF 
0b4f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4f8     F2 28 02 F1 | 	add	local02, objptr
0b4fc     04 4E 05 F1 | 	add	fp, #4
0b500     A7 2A 02 FB | 	rdlong	local03, fp
0b504     04 4E 85 F1 | 	sub	fp, #4
0b508     04 28 06 F1 | 	add	local02, #4
0b50c     14 2B 62 FC | 	wrlong	local03, local02
0b510     03 00 00 FF 
0b514     00 E4 05 F1 | 	add	objptr, ##1536
0b518     F2 26 02 FB | 	rdlong	local01, objptr
0b51c     13 29 02 F6 | 	mov	local02, local01
0b520     01 28 66 F0 | 	shl	local02, #1
0b524     13 29 02 F1 | 	add	local02, local01
0b528     02 28 66 F0 | 	shl	local02, #2
0b52c     03 00 00 FF 
0b530     00 E4 85 F1 | 	sub	objptr, ##1536
0b534     F2 28 02 F1 | 	add	local02, objptr
0b538     08 28 06 F1 | 	add	local02, #8
0b53c     14 A7 68 FC | 	wrlong	#83, local02
0b540     47 00 00 FF 
0b544     9C E4 85 F1 | 	sub	objptr, ##36508
0b548                 | LR__0954
0b548     4A 00 00 FF 
0b54c     9C E4 05 F1 | 	add	objptr, ##38044
0b550     F2 2A 02 FB | 	rdlong	local03, objptr
0b554     01 2A 06 F1 | 	add	local03, #1
0b558     F2 2A 62 FC | 	wrlong	local03, objptr
0b55c     4A 00 00 FF 
0b560     9C E4 85 F1 | 	sub	objptr, ##38044
0b564     D0 00 90 FD | 	jmp	#LR__0956
0b568                 | LR__0955
0b568     98 0A B0 FD | 	call	#_expr
0b56c     30 4E 05 F1 | 	add	fp, #48
0b570     A7 9E 68 FC | 	wrlong	#79, fp
0b574     08 4E 85 F1 | 	sub	fp, #8
0b578     A7 00 68 FC | 	wrlong	#0, fp
0b57c     04 4E 05 F1 | 	add	fp, #4
0b580     A7 2A 02 FB | 	rdlong	local03, fp
0b584     04 4E 05 F1 | 	add	fp, #4
0b588     A7 26 02 FB | 	rdlong	local01, fp
0b58c     30 4E 85 F1 | 	sub	fp, #48
0b590     4A 00 00 FF 
0b594     9C E4 05 F1 | 	add	objptr, ##38044
0b598     F2 28 02 FB | 	rdlong	local02, objptr
0b59c     14 17 02 F6 | 	mov	arg03, local02
0b5a0     01 16 66 F0 | 	shl	arg03, #1
0b5a4     14 17 02 F1 | 	add	arg03, local02
0b5a8     02 16 66 F0 | 	shl	arg03, #2
0b5ac     03 00 00 FF 
0b5b0     00 E4 85 F1 | 	sub	objptr, ##1536
0b5b4     F2 16 02 F1 | 	add	arg03, objptr
0b5b8     0B 01 68 FC | 	wrlong	#0, arg03
0b5bc     03 00 00 FF 
0b5c0     00 E4 05 F1 | 	add	objptr, ##1536
0b5c4     F2 28 02 FB | 	rdlong	local02, objptr
0b5c8     14 17 02 F6 | 	mov	arg03, local02
0b5cc     01 16 66 F0 | 	shl	arg03, #1
0b5d0     14 17 02 F1 | 	add	arg03, local02
0b5d4     02 16 66 F0 | 	shl	arg03, #2
0b5d8     03 00 00 FF 
0b5dc     00 E4 85 F1 | 	sub	objptr, ##1536
0b5e0     F2 16 02 F1 | 	add	arg03, objptr
0b5e4     04 16 06 F1 | 	add	arg03, #4
0b5e8     0B 2B 62 FC | 	wrlong	local03, arg03
0b5ec     03 00 00 FF 
0b5f0     00 E4 05 F1 | 	add	objptr, ##1536
0b5f4     F2 2A 02 FB | 	rdlong	local03, objptr
0b5f8     15 29 02 F6 | 	mov	local02, local03
0b5fc     01 28 66 F0 | 	shl	local02, #1
0b600     15 29 02 F1 | 	add	local02, local03
0b604     02 28 66 F0 | 	shl	local02, #2
0b608     03 00 00 FF 
0b60c     00 E4 85 F1 | 	sub	objptr, ##1536
0b610     F2 28 02 F1 | 	add	local02, objptr
0b614     08 28 06 F1 | 	add	local02, #8
0b618     14 27 62 FC | 	wrlong	local01, local02
0b61c     03 00 00 FF 
0b620     00 E4 05 F1 | 	add	objptr, ##1536
0b624     F2 2A 02 FB | 	rdlong	local03, objptr
0b628     01 2A 06 F1 | 	add	local03, #1
0b62c     F2 2A 62 FC | 	wrlong	local03, objptr
0b630     4A 00 00 FF 
0b634     9C E4 85 F1 | 	sub	objptr, ##38044
0b638                 | LR__0956
0b638                 | ' return 0
0b638     00 FA 05 F6 | 	mov	result1, #0
0b63c     A7 F0 03 F6 | 	mov	ptra, fp
0b640     B2 00 A0 FD | 	call	#popregs_
0b644                 | _compile_goto_ret
0b644     2D 00 64 FD | 	ret
0b648                 | 
0b648                 | ' 
0b648                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b648                 | ' 
0b648                 | ' function compile_on() as ulong
0b648                 | _compile_on
0b648     04 4A 05 F6 | 	mov	COUNT_, #4
0b64c     A8 00 A0 FD | 	call	#pushregs_
0b650     B0 09 B0 FD | 	call	#_expr
0b654     00 26 06 F6 | 	mov	local01, #0
0b658     4A 00 00 FF 
0b65c     9C E4 05 F1 | 	add	objptr, ##38044
0b660     F2 14 02 FB | 	rdlong	arg02, objptr
0b664     0A 13 02 F6 | 	mov	arg01, arg02
0b668     01 12 66 F0 | 	shl	arg01, #1
0b66c     0A 13 02 F1 | 	add	arg01, arg02
0b670     02 12 66 F0 | 	shl	arg01, #2
0b674     03 00 00 FF 
0b678     00 E4 85 F1 | 	sub	objptr, ##1536
0b67c     F2 12 02 F1 | 	add	arg01, objptr
0b680     08 12 06 F1 | 	add	arg01, #8
0b684     09 83 69 FC | 	wrlong	#193, arg01
0b688     03 00 00 FF 
0b68c     00 E4 05 F1 | 	add	objptr, ##1536
0b690     F2 14 02 FB | 	rdlong	arg02, objptr
0b694     0A 29 02 F6 | 	mov	local02, arg02
0b698     01 14 06 F1 | 	add	arg02, #1
0b69c     F2 14 62 FC | 	wrlong	arg02, objptr
0b6a0                 | ' expr()
0b6a0                 | ' 'print lparts(ct).part$ 'ok
0b6a0                 | ' numpar=0
0b6a0                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b6a0                 | ' if lparts(ct).part$="goto" then
0b6a0     13 00 00 FF 
0b6a4     38 E4 85 F1 | 	sub	objptr, ##9784
0b6a8     F2 14 02 FB | 	rdlong	arg02, objptr
0b6ac     03 14 66 F0 | 	shl	arg02, #3
0b6b0     02 00 00 FF 
0b6b4     38 E4 85 F1 | 	sub	objptr, ##1080
0b6b8     F2 14 02 F1 | 	add	arg02, objptr
0b6bc     0A 13 02 FB | 	rdlong	arg01, arg02
0b6c0     B4 01 00 FF 
0b6c4     5D 14 06 F6 | 	mov	arg02, ##@LR__5761
0b6c8     35 00 00 FF 
0b6cc     2C E4 85 F1 | 	sub	objptr, ##27180
0b6d0     64 CA B1 FD | 	call	#__system___string_cmp
0b6d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b6d8     14 02 90 5D |  if_ne	jmp	#LR__0965
0b6dc     37 00 00 FF 
0b6e0     64 E4 05 F1 | 	add	objptr, ##28260
0b6e4     F2 2A 02 FB | 	rdlong	local03, objptr
0b6e8     37 00 00 FF 
0b6ec     64 E4 85 F1 | 	sub	objptr, ##28260
0b6f0     01 2A 06 F1 | 	add	local03, #1
0b6f4                 | '   i=ct+1
0b6f4                 | '   do
0b6f4                 | LR__0960
0b6f4                 | '     if lparts(i).token=token_decimal then
0b6f4     15 FB 01 F6 | 	mov	result1, local03
0b6f8     03 FA 65 F0 | 	shl	result1, #3
0b6fc     35 00 00 FF 
0b700     2C E4 05 F1 | 	add	objptr, ##27180
0b704     F2 FA 01 F1 | 	add	result1, objptr
0b708     04 FA 05 F1 | 	add	result1, #4
0b70c     FD FA 01 FB | 	rdlong	result1, result1
0b710     01 00 00 FF 
0b714     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b718     35 00 00 FF 
0b71c     2C E4 85 F1 | 	sub	objptr, ##27180
0b720     DC 00 90 5D |  if_ne	jmp	#LR__0961
0b724     4A 00 00 FF 
0b728     9C E4 05 F1 | 	add	objptr, ##38044
0b72c     F2 FA 01 FB | 	rdlong	result1, objptr
0b730     FD 14 02 F6 | 	mov	arg02, result1
0b734     01 14 66 F0 | 	shl	arg02, #1
0b738     FD 14 02 F1 | 	add	arg02, result1
0b73c     02 14 66 F0 | 	shl	arg02, #2
0b740     03 00 00 FF 
0b744     00 E4 85 F1 | 	sub	objptr, ##1536
0b748     F2 14 02 F1 | 	add	arg02, objptr
0b74c     00 00 C0 FF 
0b750     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b754     03 00 00 FF 
0b758     00 E4 05 F1 | 	add	objptr, ##1536
0b75c     F2 14 02 FB | 	rdlong	arg02, objptr
0b760     0A 2D 02 F6 | 	mov	local04, arg02
0b764     01 2C 66 F0 | 	shl	local04, #1
0b768     0A 2D 02 F1 | 	add	local04, arg02
0b76c     02 2C 66 F0 | 	shl	local04, #2
0b770     03 00 00 FF 
0b774     00 E4 85 F1 | 	sub	objptr, ##1536
0b778     F2 2C 02 F1 | 	add	local04, objptr
0b77c     15 15 02 F6 | 	mov	arg02, local03
0b780     03 14 66 F0 | 	shl	arg02, #3
0b784     12 00 00 FF 
0b788     70 E4 85 F1 | 	sub	objptr, ##9328
0b78c     F2 14 02 F1 | 	add	arg02, objptr
0b790     0A 13 02 FB | 	rdlong	arg01, arg02
0b794     00 14 06 F6 | 	mov	arg02, #0
0b798     35 00 00 FF 
0b79c     2C E4 85 F1 | 	sub	objptr, ##27180
0b7a0     60 FE B1 FD | 	call	#__system____builtin_atoi
0b7a4     04 2C 06 F1 | 	add	local04, #4
0b7a8     16 FB 61 FC | 	wrlong	result1, local04
0b7ac     4A 00 00 FF 
0b7b0     9C E4 05 F1 | 	add	objptr, ##38044
0b7b4     F2 14 02 FB | 	rdlong	arg02, objptr
0b7b8     0A 2D 02 F6 | 	mov	local04, arg02
0b7bc     01 2C 66 F0 | 	shl	local04, #1
0b7c0     0A 2D 02 F1 | 	add	local04, arg02
0b7c4     02 2C 66 F0 | 	shl	local04, #2
0b7c8     03 00 00 FF 
0b7cc     00 E4 85 F1 | 	sub	objptr, ##1536
0b7d0     F2 2C 02 F1 | 	add	local04, objptr
0b7d4     08 2C 06 F1 | 	add	local04, #8
0b7d8     16 A7 68 FC | 	wrlong	#83, local04
0b7dc     03 00 00 FF 
0b7e0     00 E4 05 F1 | 	add	objptr, ##1536
0b7e4     F2 2C 02 FB | 	rdlong	local04, objptr
0b7e8     01 2C 06 F1 | 	add	local04, #1
0b7ec     F2 2C 62 FC | 	wrlong	local04, objptr
0b7f0     4A 00 00 FF 
0b7f4     9C E4 85 F1 | 	sub	objptr, ##38044
0b7f8     01 26 06 F1 | 	add	local01, #1
0b7fc     08 00 90 FD | 	jmp	#LR__0962
0b800                 | LR__0961
0b800                 | '       return 17
0b800     11 FA 05 F6 | 	mov	result1, #17
0b804     5C 04 90 FD | 	jmp	#LR__0975
0b808                 | LR__0962
0b808     01 2A 06 F1 | 	add	local03, #1
0b80c                 | '     i+=1
0b80c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b80c     15 2D 02 F6 | 	mov	local04, local03
0b810     03 2C 66 F0 | 	shl	local04, #3
0b814     35 00 00 FF 
0b818     2C E4 05 F1 | 	add	objptr, ##27180
0b81c     F2 2C 02 F1 | 	add	local04, objptr
0b820     04 2C 06 F1 | 	add	local04, #4
0b824     16 2D 02 FB | 	rdlong	local04, local04
0b828     11 2C 0E F2 | 	cmp	local04, #17 wz
0b82c     35 00 00 FF 
0b830     2C E4 85 F1 | 	sub	objptr, ##27180
0b834     30 00 90 AD |  if_e	jmp	#LR__0963
0b838     15 2D 02 F6 | 	mov	local04, local03
0b83c     03 2C 66 F0 | 	shl	local04, #3
0b840     35 00 00 FF 
0b844     2C E4 05 F1 | 	add	objptr, ##27180
0b848     F2 2C 02 F1 | 	add	local04, objptr
0b84c     04 2C 06 F1 | 	add	local04, #4
0b850     16 2D 02 FB | 	rdlong	local04, local04
0b854     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b858     35 00 00 FF 
0b85c     2C E4 85 F1 | 	sub	objptr, ##27180
0b860     15 FA 05 56 |  if_ne	mov	result1, #21
0b864     FC 03 90 5D |  if_ne	jmp	#LR__0975
0b868                 | LR__0963
0b868                 | '     if lparts(i).token=token_end then exit loop
0b868     15 2D 02 F6 | 	mov	local04, local03
0b86c     03 2C 66 F0 | 	shl	local04, #3
0b870     35 00 00 FF 
0b874     2C E4 05 F1 | 	add	objptr, ##27180
0b878     F2 2C 02 F1 | 	add	local04, objptr
0b87c     04 2C 06 F1 | 	add	local04, #4
0b880     16 2D 02 FB | 	rdlong	local04, local04
0b884     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b888     35 00 00 FF 
0b88c     2C E4 85 F1 | 	sub	objptr, ##27180
0b890     30 00 90 AD |  if_e	jmp	#LR__0964
0b894     01 2A 06 F1 | 	add	local03, #1
0b898     15 2D 02 F6 | 	mov	local04, local03
0b89c     03 2C 66 F0 | 	shl	local04, #3
0b8a0     35 00 00 FF 
0b8a4     2C E4 05 F1 | 	add	objptr, ##27180
0b8a8     F2 2C 02 F1 | 	add	local04, objptr
0b8ac     04 2C 06 F1 | 	add	local04, #4
0b8b0     16 2D 02 FB | 	rdlong	local04, local04
0b8b4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b8b8     35 00 00 FF 
0b8bc     2C E4 85 F1 | 	sub	objptr, ##27180
0b8c0     30 FE 9F 5D |  if_ne	jmp	#LR__0960
0b8c4                 | LR__0964
0b8c4     14 2D 02 F6 | 	mov	local04, local02
0b8c8     01 2C 66 F0 | 	shl	local04, #1
0b8cc     14 2D 02 F1 | 	add	local04, local02
0b8d0     02 2C 66 F0 | 	shl	local04, #2
0b8d4     47 00 00 FF 
0b8d8     9C E4 05 F1 | 	add	objptr, ##36508
0b8dc     F2 2C 02 F1 | 	add	local04, objptr
0b8e0     04 2C 06 F1 | 	add	local04, #4
0b8e4     16 03 68 FC | 	wrlong	#1, local04
0b8e8     47 00 00 FF 
0b8ec     9C E4 85 F1 | 	sub	objptr, ##36508
0b8f0                 | LR__0965
0b8f0                 | ' 
0b8f0                 | ' if lparts(ct).part$="gosub" then
0b8f0     37 00 00 FF 
0b8f4     64 E4 05 F1 | 	add	objptr, ##28260
0b8f8     F2 2A 02 FB | 	rdlong	local03, objptr
0b8fc     03 2A 66 F0 | 	shl	local03, #3
0b900     02 00 00 FF 
0b904     38 E4 85 F1 | 	sub	objptr, ##1080
0b908     F2 2A 02 F1 | 	add	local03, objptr
0b90c     15 13 02 FB | 	rdlong	arg01, local03
0b910     B4 01 00 FF 
0b914     62 14 06 F6 | 	mov	arg02, ##@LR__5762
0b918     35 00 00 FF 
0b91c     2C E4 85 F1 | 	sub	objptr, ##27180
0b920     14 C8 B1 FD | 	call	#__system___string_cmp
0b924     00 FA 0D F2 | 	cmp	result1, #0 wz
0b928     84 02 90 5D |  if_ne	jmp	#LR__0971
0b92c     37 00 00 FF 
0b930     64 E4 05 F1 | 	add	objptr, ##28260
0b934     F2 2A 02 FB | 	rdlong	local03, objptr
0b938     37 00 00 FF 
0b93c     64 E4 85 F1 | 	sub	objptr, ##28260
0b940     01 2A 06 F1 | 	add	local03, #1
0b944                 | '   i=ct+1
0b944                 | '   do
0b944                 | LR__0966
0b944                 | '     if lparts(i).token=token_decimal then
0b944     15 2D 02 F6 | 	mov	local04, local03
0b948     03 2C 66 F0 | 	shl	local04, #3
0b94c     35 00 00 FF 
0b950     2C E4 05 F1 | 	add	objptr, ##27180
0b954     F2 2C 02 F1 | 	add	local04, objptr
0b958     04 2C 06 F1 | 	add	local04, #4
0b95c     16 2D 02 FB | 	rdlong	local04, local04
0b960     01 00 00 FF 
0b964     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b968     35 00 00 FF 
0b96c     2C E4 85 F1 | 	sub	objptr, ##27180
0b970     4C 01 90 5D |  if_ne	jmp	#LR__0967
0b974     4A 00 00 FF 
0b978     9C E4 05 F1 | 	add	objptr, ##38044
0b97c     F2 FA 01 FB | 	rdlong	result1, objptr
0b980     FD 2C 02 F6 | 	mov	local04, result1
0b984     01 2C 66 F0 | 	shl	local04, #1
0b988     FD 2C 02 F1 | 	add	local04, result1
0b98c     02 2C 66 F0 | 	shl	local04, #2
0b990     03 00 00 FF 
0b994     00 E4 85 F1 | 	sub	objptr, ##1536
0b998     F2 2C 02 F1 | 	add	local04, objptr
0b99c     08 2C 06 F1 | 	add	local04, #8
0b9a0     16 53 69 FC | 	wrlong	#169, local04
0b9a4     03 00 00 FF 
0b9a8     00 E4 05 F1 | 	add	objptr, ##1536
0b9ac     F2 FA 01 FB | 	rdlong	result1, objptr
0b9b0     01 FA 05 F1 | 	add	result1, #1
0b9b4     F2 FA 61 FC | 	wrlong	result1, objptr
0b9b8     FD 2C 02 F6 | 	mov	local04, result1
0b9bc     01 2C 66 F0 | 	shl	local04, #1
0b9c0     FD 2C 02 F1 | 	add	local04, result1
0b9c4     02 2C 66 F0 | 	shl	local04, #2
0b9c8     03 00 00 FF 
0b9cc     00 E4 85 F1 | 	sub	objptr, ##1536
0b9d0     F2 2C 02 F1 | 	add	local04, objptr
0b9d4     00 00 C0 FF 
0b9d8     16 01 68 FC | 	wrlong	##-2147483648, local04
0b9dc     03 00 00 FF 
0b9e0     00 E4 05 F1 | 	add	objptr, ##1536
0b9e4     F2 FA 01 FB | 	rdlong	result1, objptr
0b9e8     FD 2C 02 F6 | 	mov	local04, result1
0b9ec     01 2C 66 F0 | 	shl	local04, #1
0b9f0     FD 2C 02 F1 | 	add	local04, result1
0b9f4     02 2C 66 F0 | 	shl	local04, #2
0b9f8     03 00 00 FF 
0b9fc     00 E4 85 F1 | 	sub	objptr, ##1536
0ba00     F2 2C 02 F1 | 	add	local04, objptr
0ba04     15 13 02 F6 | 	mov	arg01, local03
0ba08     03 12 66 F0 | 	shl	arg01, #3
0ba0c     12 00 00 FF 
0ba10     70 E4 85 F1 | 	sub	objptr, ##9328
0ba14     F2 12 02 F1 | 	add	arg01, objptr
0ba18     09 13 02 FB | 	rdlong	arg01, arg01
0ba1c     00 14 06 F6 | 	mov	arg02, #0
0ba20     35 00 00 FF 
0ba24     2C E4 85 F1 | 	sub	objptr, ##27180
0ba28     D8 FB B1 FD | 	call	#__system____builtin_atoi
0ba2c     04 2C 06 F1 | 	add	local04, #4
0ba30     16 FB 61 FC | 	wrlong	result1, local04
0ba34     4A 00 00 FF 
0ba38     9C E4 05 F1 | 	add	objptr, ##38044
0ba3c     F2 12 02 FB | 	rdlong	arg01, objptr
0ba40     09 2D 02 F6 | 	mov	local04, arg01
0ba44     01 2C 66 F0 | 	shl	local04, #1
0ba48     09 2D 02 F1 | 	add	local04, arg01
0ba4c     02 2C 66 F0 | 	shl	local04, #2
0ba50     03 00 00 FF 
0ba54     00 E4 85 F1 | 	sub	objptr, ##1536
0ba58     F2 2C 02 F1 | 	add	local04, objptr
0ba5c     08 2C 06 F1 | 	add	local04, #8
0ba60     16 A7 68 FC | 	wrlong	#83, local04
0ba64     03 00 00 FF 
0ba68     00 E4 05 F1 | 	add	objptr, ##1536
0ba6c     F2 12 02 FB | 	rdlong	arg01, objptr
0ba70     01 12 06 F1 | 	add	arg01, #1
0ba74     F2 12 62 FC | 	wrlong	arg01, objptr
0ba78     01 26 06 F1 | 	add	local01, #1
0ba7c     09 2D 02 F6 | 	mov	local04, arg01
0ba80     01 2C 66 F0 | 	shl	local04, #1
0ba84     09 2D 02 F1 | 	add	local04, arg01
0ba88     02 2C 66 F0 | 	shl	local04, #2
0ba8c     03 00 00 FF 
0ba90     00 E4 85 F1 | 	sub	objptr, ##1536
0ba94     F2 2C 02 F1 | 	add	local04, objptr
0ba98     08 2C 06 F1 | 	add	local04, #8
0ba9c     16 5B 68 FC | 	wrlong	#45, local04
0baa0     03 00 00 FF 
0baa4     00 E4 05 F1 | 	add	objptr, ##1536
0baa8     F2 2C 02 FB | 	rdlong	local04, objptr
0baac     01 2C 06 F1 | 	add	local04, #1
0bab0     F2 2C 62 FC | 	wrlong	local04, objptr
0bab4     4A 00 00 FF 
0bab8     9C E4 85 F1 | 	sub	objptr, ##38044
0babc     08 00 90 FD | 	jmp	#LR__0968
0bac0                 | LR__0967
0bac0                 | '       return 17
0bac0     11 FA 05 F6 | 	mov	result1, #17
0bac4     9C 01 90 FD | 	jmp	#LR__0975
0bac8                 | LR__0968
0bac8     01 2A 06 F1 | 	add	local03, #1
0bacc                 | '     i+=1
0bacc                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0bacc     15 2D 02 F6 | 	mov	local04, local03
0bad0     03 2C 66 F0 | 	shl	local04, #3
0bad4     35 00 00 FF 
0bad8     2C E4 05 F1 | 	add	objptr, ##27180
0badc     F2 2C 02 F1 | 	add	local04, objptr
0bae0     04 2C 06 F1 | 	add	local04, #4
0bae4     16 2D 02 FB | 	rdlong	local04, local04
0bae8     11 2C 0E F2 | 	cmp	local04, #17 wz
0baec     35 00 00 FF 
0baf0     2C E4 85 F1 | 	sub	objptr, ##27180
0baf4     30 00 90 AD |  if_e	jmp	#LR__0969
0baf8     15 2D 02 F6 | 	mov	local04, local03
0bafc     03 2C 66 F0 | 	shl	local04, #3
0bb00     35 00 00 FF 
0bb04     2C E4 05 F1 | 	add	objptr, ##27180
0bb08     F2 2C 02 F1 | 	add	local04, objptr
0bb0c     04 2C 06 F1 | 	add	local04, #4
0bb10     16 2D 02 FB | 	rdlong	local04, local04
0bb14     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bb18     35 00 00 FF 
0bb1c     2C E4 85 F1 | 	sub	objptr, ##27180
0bb20     15 FA 05 56 |  if_ne	mov	result1, #21
0bb24     3C 01 90 5D |  if_ne	jmp	#LR__0975
0bb28                 | LR__0969
0bb28                 | '     if lparts(i).token=token_end then exit loop
0bb28     15 2D 02 F6 | 	mov	local04, local03
0bb2c     03 2C 66 F0 | 	shl	local04, #3
0bb30     35 00 00 FF 
0bb34     2C E4 05 F1 | 	add	objptr, ##27180
0bb38     F2 2C 02 F1 | 	add	local04, objptr
0bb3c     04 2C 06 F1 | 	add	local04, #4
0bb40     16 2D 02 FB | 	rdlong	local04, local04
0bb44     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bb48     35 00 00 FF 
0bb4c     2C E4 85 F1 | 	sub	objptr, ##27180
0bb50     30 00 90 AD |  if_e	jmp	#LR__0970
0bb54     01 2A 06 F1 | 	add	local03, #1
0bb58     15 2D 02 F6 | 	mov	local04, local03
0bb5c     03 2C 66 F0 | 	shl	local04, #3
0bb60     35 00 00 FF 
0bb64     2C E4 05 F1 | 	add	objptr, ##27180
0bb68     F2 2C 02 F1 | 	add	local04, objptr
0bb6c     04 2C 06 F1 | 	add	local04, #4
0bb70     16 2D 02 FB | 	rdlong	local04, local04
0bb74     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bb78     35 00 00 FF 
0bb7c     2C E4 85 F1 | 	sub	objptr, ##27180
0bb80     C0 FD 9F 5D |  if_ne	jmp	#LR__0966
0bb84                 | LR__0970
0bb84     14 2D 02 F6 | 	mov	local04, local02
0bb88     01 2C 66 F0 | 	shl	local04, #1
0bb8c     14 2D 02 F1 | 	add	local04, local02
0bb90     02 2C 66 F0 | 	shl	local04, #2
0bb94     47 00 00 FF 
0bb98     9C E4 05 F1 | 	add	objptr, ##36508
0bb9c     F2 2C 02 F1 | 	add	local04, objptr
0bba0     04 2C 06 F1 | 	add	local04, #4
0bba4     16 07 68 FC | 	wrlong	#3, local04
0bba8     47 00 00 FF 
0bbac     9C E4 85 F1 | 	sub	objptr, ##36508
0bbb0                 | LR__0971
0bbb0     14 2B 02 F6 | 	mov	local03, local02
0bbb4     01 2A 66 F0 | 	shl	local03, #1
0bbb8     14 2B 02 F1 | 	add	local03, local02
0bbbc     02 2A 66 F0 | 	shl	local03, #2
0bbc0     47 00 00 FF 
0bbc4     9C E4 05 F1 | 	add	objptr, ##36508
0bbc8     F2 2A 02 F1 | 	add	local03, objptr
0bbcc     15 27 62 FC | 	wrlong	local01, local03
0bbd0                 | ' compiledline(onlineptr).result.uresult=numpar
0bbd0                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0bbd0     03 00 00 FF 
0bbd4     00 E4 05 F1 | 	add	objptr, ##1536
0bbd8     F2 2A 02 FB | 	rdlong	local03, objptr
0bbdc     4A 00 00 FF 
0bbe0     9C E4 85 F1 | 	sub	objptr, ##38044
0bbe4     97 3C 48 FB | 	callpa	#(@LR__0974-@LR__0972)>>2,fcache_load_ptr_
0bbe8                 | LR__0972
0bbe8     15 2D 02 F6 | 	mov	local04, local03
0bbec     01 2C 66 F0 | 	shl	local04, #1
0bbf0     15 2D 02 F1 | 	add	local04, local03
0bbf4     02 2C 66 F0 | 	shl	local04, #2
0bbf8     47 00 00 FF 
0bbfc     9C E4 05 F1 | 	add	objptr, ##36508
0bc00     F2 2C 02 F1 | 	add	local04, objptr
0bc04     08 2C 06 F1 | 	add	local04, #8
0bc08     16 2D 02 FB | 	rdlong	local04, local04
0bc0c     2D 2C 0E F2 | 	cmp	local04, #45 wz
0bc10     47 00 00 FF 
0bc14     9C E4 85 F1 | 	sub	objptr, ##36508
0bc18     38 00 90 5D |  if_ne	jmp	#LR__0973
0bc1c     15 2D 02 F6 | 	mov	local04, local03
0bc20     01 2C 66 F0 | 	shl	local04, #1
0bc24     15 2D 02 F1 | 	add	local04, local03
0bc28     02 2C 66 F0 | 	shl	local04, #2
0bc2c     47 00 00 FF 
0bc30     9C E4 05 F1 | 	add	objptr, ##36508
0bc34     F2 2C 02 F1 | 	add	local04, objptr
0bc38     03 00 00 FF 
0bc3c     00 E4 05 F1 | 	add	objptr, ##1536
0bc40     F2 26 02 FB | 	rdlong	local01, objptr
0bc44     4A 00 00 FF 
0bc48     9C E4 85 F1 | 	sub	objptr, ##38044
0bc4c     02 26 86 F1 | 	sub	local01, #2
0bc50     16 27 62 FC | 	wrlong	local01, local04
0bc54                 | LR__0973
0bc54     01 2A 86 F1 | 	sub	local03, #1
0bc58     14 2B 52 F2 | 	cmps	local03, local02 wc
0bc5c     88 FF 9F 3D |  if_ae	jmp	#LR__0972
0bc60                 | LR__0974
0bc60                 | ' return 0
0bc60     00 FA 05 F6 | 	mov	result1, #0
0bc64                 | LR__0975
0bc64     A7 F0 03 F6 | 	mov	ptra, fp
0bc68     B2 00 A0 FD | 	call	#popregs_
0bc6c                 | _compile_on_ret
0bc6c     2D 00 64 FD | 	ret
0bc70                 | 
0bc70                 | ' 
0bc70                 | ' '----- A helper for compile_input and compile_read
0bc70                 | '  
0bc70                 | ' function getaddr() as ulong
0bc70                 | _getaddr
0bc70     0B 4A 05 F6 | 	mov	COUNT_, #11
0bc74     A8 00 A0 FD | 	call	#pushregs_
0bc78     37 00 00 FF 
0bc7c     64 E4 05 F1 | 	add	objptr, ##28260
0bc80     F2 2C 02 FB | 	rdlong	local04, objptr
0bc84     03 2C 66 F0 | 	shl	local04, #3
0bc88     02 00 00 FF 
0bc8c     38 E4 85 F1 | 	sub	objptr, ##1080
0bc90     F2 2C 02 F1 | 	add	local04, objptr
0bc94     16 2F 02 FB | 	rdlong	local05, local04
0bc98     01 30 66 F6 | 	neg	local06, #1
0bc9c                 | ' 
0bc9c                 | ' varname$=lparts(ct).part$
0bc9c                 | ' j=-1
0bc9c                 | ' 
0bc9c                 | ' for i=0 to varnum-1
0bc9c     00 32 06 F6 | 	mov	local07, #0
0bca0     04 E4 85 F1 | 	sub	objptr, #4
0bca4     F2 34 02 FB | 	rdlong	local08, objptr
0bca8     35 00 00 FF 
0bcac     28 E4 85 F1 | 	sub	objptr, ##27176
0bcb0                 | LR__0980
0bcb0     1A 33 52 F2 | 	cmps	local07, local08 wc
0bcb4     38 00 90 3D |  if_ae	jmp	#LR__0981
0bcb8                 | '   if variables(i).name=varname$ then j=i : exit
0bcb8     19 2D 02 F6 | 	mov	local04, local07
0bcbc     04 2C 66 F0 | 	shl	local04, #4
0bcc0     15 00 00 FF 
0bcc4     18 E4 05 F1 | 	add	objptr, ##10776
0bcc8     F2 2C 02 F1 | 	add	local04, objptr
0bccc     16 13 02 FB | 	rdlong	arg01, local04
0bcd0     17 15 02 F6 | 	mov	arg02, local05
0bcd4     15 00 00 FF 
0bcd8     18 E4 85 F1 | 	sub	objptr, ##10776
0bcdc     58 C4 B1 FD | 	call	#__system___string_cmp
0bce0     00 FA 0D F2 | 	cmp	result1, #0 wz
0bce4     19 31 02 A6 |  if_e	mov	local06, local07
0bce8     01 32 06 51 |  if_ne	add	local07, #1
0bcec     C0 FF 9F 5D |  if_ne	jmp	#LR__0980
0bcf0                 | LR__0981
0bcf0                 | ' if  j=-1 andalso varnum<maxvars then   
0bcf0     FF FF 7F FF 
0bcf4     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0bcf8     A8 00 90 5D |  if_ne	jmp	#LR__0982
0bcfc     35 00 00 FF 
0bd00     28 E4 05 F1 | 	add	objptr, ##27176
0bd04     F2 34 02 FB | 	rdlong	local08, objptr
0bd08     35 00 00 FF 
0bd0c     28 E4 85 F1 | 	sub	objptr, ##27176
0bd10     02 00 00 FF 
0bd14     00 34 56 F2 | 	cmps	local08, ##1024 wc
0bd18     88 00 90 3D |  if_ae	jmp	#LR__0982
0bd1c     35 00 00 FF 
0bd20     28 E4 05 F1 | 	add	objptr, ##27176
0bd24     F2 2C 02 FB | 	rdlong	local04, objptr
0bd28     04 2C 66 F0 | 	shl	local04, #4
0bd2c     20 00 00 FF 
0bd30     10 E4 85 F1 | 	sub	objptr, ##16400
0bd34     F2 2C 02 F1 | 	add	local04, objptr
0bd38     16 2F 62 FC | 	wrlong	local05, local04
0bd3c     20 00 00 FF 
0bd40     10 E4 05 F1 | 	add	objptr, ##16400
0bd44     F2 2C 02 FB | 	rdlong	local04, objptr
0bd48     04 2C 66 F0 | 	shl	local04, #4
0bd4c     20 00 00 FF 
0bd50     10 E4 85 F1 | 	sub	objptr, ##16400
0bd54     F2 2C 02 F1 | 	add	local04, objptr
0bd58     04 2C 06 F1 | 	add	local04, #4
0bd5c     16 01 68 FC | 	wrlong	#0, local04
0bd60     20 00 00 FF 
0bd64     10 E4 05 F1 | 	add	objptr, ##16400
0bd68     F2 2C 02 FB | 	rdlong	local04, objptr
0bd6c     04 2C 66 F0 | 	shl	local04, #4
0bd70     20 00 00 FF 
0bd74     10 E4 85 F1 | 	sub	objptr, ##16400
0bd78     F2 2C 02 F1 | 	add	local04, objptr
0bd7c     0C 2C 06 F1 | 	add	local04, #12
0bd80     16 39 68 FC | 	wrlong	#28, local04
0bd84     20 00 00 FF 
0bd88     10 E4 05 F1 | 	add	objptr, ##16400
0bd8c     F2 34 02 FB | 	rdlong	local08, objptr
0bd90     1A 31 02 F6 | 	mov	local06, local08
0bd94     01 34 06 F1 | 	add	local08, #1
0bd98     F2 34 62 FC | 	wrlong	local08, objptr
0bd9c     35 00 00 FF 
0bda0     28 E4 85 F1 | 	sub	objptr, ##27176
0bda4                 | LR__0982
0bda4     00 34 06 F6 | 	mov	local08, #0
0bda8                 | ' numpar=0
0bda8                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bda8     37 00 00 FF 
0bdac     64 E4 05 F1 | 	add	objptr, ##28260
0bdb0     F2 2C 02 FB | 	rdlong	local04, objptr
0bdb4     01 2C 06 F1 | 	add	local04, #1
0bdb8     03 2C 66 F0 | 	shl	local04, #3
0bdbc     02 00 00 FF 
0bdc0     38 E4 85 F1 | 	sub	objptr, ##1080
0bdc4     F2 2C 02 F1 | 	add	local04, objptr
0bdc8     04 2C 06 F1 | 	add	local04, #4
0bdcc     16 33 02 FB | 	rdlong	local07, local04
0bdd0     15 32 0E F2 | 	cmp	local07, #21 wz
0bdd4     35 00 00 FF 
0bdd8     2C E4 85 F1 | 	sub	objptr, ##27180
0bddc     54 01 90 5D |  if_ne	jmp	#LR__0987
0bde0     37 00 00 FF 
0bde4     64 E4 05 F1 | 	add	objptr, ##28260
0bde8     F2 36 02 FB | 	rdlong	local09, objptr
0bdec     01 36 06 F1 | 	add	local09, #1
0bdf0     F2 36 62 FC | 	wrlong	local09, objptr
0bdf4     37 00 00 FF 
0bdf8     64 E4 85 F1 | 	sub	objptr, ##28260
0bdfc                 | '   ct+=1 											' omit this lpar, this is for expr list
0bdfc                 | '   do
0bdfc                 | LR__0983
0bdfc     37 00 00 FF 
0be00     64 E4 05 F1 | 	add	objptr, ##28260
0be04     F2 2C 02 FB | 	rdlong	local04, objptr
0be08     01 2C 06 F1 | 	add	local04, #1
0be0c     F2 2C 62 FC | 	wrlong	local04, objptr
0be10                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0be10                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0be10     03 2C 66 F0 | 	shl	local04, #3
0be14     02 00 00 FF 
0be18     38 E4 85 F1 | 	sub	objptr, ##1080
0be1c     F2 2C 02 F1 | 	add	local04, objptr
0be20     04 2C 06 F1 | 	add	local04, #4
0be24     16 37 02 FB | 	rdlong	local09, local04
0be28     15 36 0E F2 | 	cmp	local09, #21 wz
0be2c     35 00 00 FF 
0be30     2C E4 85 F1 | 	sub	objptr, ##27180
0be34     44 00 90 5D |  if_ne	jmp	#LR__0984
0be38     37 00 00 FF 
0be3c     64 E4 05 F1 | 	add	objptr, ##28260
0be40     F2 36 02 FB | 	rdlong	local09, objptr
0be44     01 36 06 F1 | 	add	local09, #1
0be48     F2 36 62 FC | 	wrlong	local09, objptr
0be4c     37 00 00 FF 
0be50     64 E4 85 F1 | 	sub	objptr, ##28260
0be54     AC 01 B0 FD | 	call	#_expr
0be58     FD 38 02 F6 | 	mov	local10, result1
0be5c     37 00 00 FF 
0be60     64 E4 05 F1 | 	add	objptr, ##28260
0be64     F2 36 02 FB | 	rdlong	local09, objptr
0be68     01 36 06 F1 | 	add	local09, #1
0be6c     F2 36 62 FC | 	wrlong	local09, objptr
0be70     37 00 00 FF 
0be74     64 E4 85 F1 | 	sub	objptr, ##28260
0be78     08 00 90 FD | 	jmp	#LR__0985
0be7c                 | LR__0984
0be7c     84 01 B0 FD | 	call	#_expr
0be80     FD 38 02 F6 | 	mov	local10, result1
0be84                 | LR__0985
0be84                 | '     if err>0 then return err
0be84     01 38 56 F2 | 	cmps	local10, #1 wc
0be88     1C FB 01 36 |  if_ae	mov	result1, local10
0be8c     68 01 90 3D |  if_ae	jmp	#LR__0988
0be90     01 34 06 F1 | 	add	local08, #1
0be94     37 00 00 FF 
0be98     64 E4 05 F1 | 	add	objptr, ##28260
0be9c     F2 2C 02 FB | 	rdlong	local04, objptr
0bea0     03 2C 66 F0 | 	shl	local04, #3
0bea4     02 00 00 FF 
0bea8     38 E4 85 F1 | 	sub	objptr, ##1080
0beac     F2 2C 02 F1 | 	add	local04, objptr
0beb0     04 2C 06 F1 | 	add	local04, #4
0beb4     16 39 02 FB | 	rdlong	local10, local04
0beb8     14 38 0E F2 | 	cmp	local10, #20 wz
0bebc     35 00 00 FF 
0bec0     2C E4 85 F1 | 	sub	objptr, ##27180
0bec4     34 00 90 AD |  if_e	jmp	#LR__0986
0bec8     37 00 00 FF 
0becc     64 E4 05 F1 | 	add	objptr, ##28260
0bed0     F2 38 02 FB | 	rdlong	local10, objptr
0bed4     03 38 66 F0 | 	shl	local10, #3
0bed8     02 00 00 FF 
0bedc     38 E4 85 F1 | 	sub	objptr, ##1080
0bee0     F2 38 02 F1 | 	add	local10, objptr
0bee4     04 38 06 F1 | 	add	local10, #4
0bee8     1C 39 02 FB | 	rdlong	local10, local10
0beec     FE 39 0E F2 | 	cmp	local10, #510 wz
0bef0     35 00 00 FF 
0bef4     2C E4 85 F1 | 	sub	objptr, ##27180
0bef8     00 FF 9F 5D |  if_ne	jmp	#LR__0983
0befc                 | LR__0986
0befc                 | '     if lparts(ct).token=token_end then return 14
0befc     37 00 00 FF 
0bf00     64 E4 05 F1 | 	add	objptr, ##28260
0bf04     F2 2C 02 FB | 	rdlong	local04, objptr
0bf08     03 2C 66 F0 | 	shl	local04, #3
0bf0c     02 00 00 FF 
0bf10     38 E4 85 F1 | 	sub	objptr, ##1080
0bf14     F2 2C 02 F1 | 	add	local04, objptr
0bf18     04 2C 06 F1 | 	add	local04, #4
0bf1c     16 39 02 FB | 	rdlong	local10, local04
0bf20     FE 39 0E F2 | 	cmp	local10, #510 wz
0bf24     35 00 00 FF 
0bf28     2C E4 85 F1 | 	sub	objptr, ##27180
0bf2c     0E FA 05 A6 |  if_e	mov	result1, #14
0bf30     C4 00 90 AD |  if_e	jmp	#LR__0988
0bf34                 | LR__0987
0bf34     1A 29 02 F6 | 	mov	local02, local08
0bf38     12 2A 06 F6 | 	mov	local03, #18
0bf3c     18 27 02 F6 | 	mov	local01, local06
0bf40     13 37 02 F6 | 	mov	local09, local01
0bf44     14 3B 02 F6 | 	mov	local11, local02
0bf48     15 27 02 F6 | 	mov	local01, local03
0bf4c     4A 00 00 FF 
0bf50     9C E4 05 F1 | 	add	objptr, ##38044
0bf54     F2 38 02 FB | 	rdlong	local10, objptr
0bf58     1C 35 02 F6 | 	mov	local08, local10
0bf5c     01 34 66 F0 | 	shl	local08, #1
0bf60     1C 35 02 F1 | 	add	local08, local10
0bf64     02 34 66 F0 | 	shl	local08, #2
0bf68     03 00 00 FF 
0bf6c     00 E4 85 F1 | 	sub	objptr, ##1536
0bf70     F2 34 02 F1 | 	add	local08, objptr
0bf74     1A 37 62 FC | 	wrlong	local09, local08
0bf78     03 00 00 FF 
0bf7c     00 E4 05 F1 | 	add	objptr, ##1536
0bf80     F2 38 02 FB | 	rdlong	local10, objptr
0bf84     1C 37 02 F6 | 	mov	local09, local10
0bf88     01 36 66 F0 | 	shl	local09, #1
0bf8c     1C 37 02 F1 | 	add	local09, local10
0bf90     02 36 66 F0 | 	shl	local09, #2
0bf94     03 00 00 FF 
0bf98     00 E4 85 F1 | 	sub	objptr, ##1536
0bf9c     F2 36 02 F1 | 	add	local09, objptr
0bfa0     04 36 06 F1 | 	add	local09, #4
0bfa4     1B 3B 62 FC | 	wrlong	local11, local09
0bfa8     03 00 00 FF 
0bfac     00 E4 05 F1 | 	add	objptr, ##1536
0bfb0     F2 3A 02 FB | 	rdlong	local11, objptr
0bfb4     1D 39 02 F6 | 	mov	local10, local11
0bfb8     01 38 66 F0 | 	shl	local10, #1
0bfbc     1D 39 02 F1 | 	add	local10, local11
0bfc0     02 38 66 F0 | 	shl	local10, #2
0bfc4     03 00 00 FF 
0bfc8     00 E4 85 F1 | 	sub	objptr, ##1536
0bfcc     F2 38 02 F1 | 	add	local10, objptr
0bfd0     08 38 06 F1 | 	add	local10, #8
0bfd4     1C 27 62 FC | 	wrlong	local01, local10
0bfd8     03 00 00 FF 
0bfdc     00 E4 05 F1 | 	add	objptr, ##1536
0bfe0     F2 36 02 FB | 	rdlong	local09, objptr
0bfe4     01 36 06 F1 | 	add	local09, #1
0bfe8     F2 36 62 FC | 	wrlong	local09, objptr
0bfec     4A 00 00 FF 
0bff0     9C E4 85 F1 | 	sub	objptr, ##38044
0bff4                 | ' t2.result.twowords(1)=numpar
0bff4                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bff4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bff4                 | ' return 0
0bff4     00 FA 05 F6 | 	mov	result1, #0
0bff8                 | LR__0988
0bff8     A7 F0 03 F6 | 	mov	ptra, fp
0bffc     B2 00 A0 FD | 	call	#popregs_
0c000                 | _getaddr_ret
0c000     2D 00 64 FD | 	ret
0c004                 | 
0c004                 | ' 
0c004                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' '--------------------------------------------- 
0c004                 | ' 
0c004                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0c004                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' 
0c004                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' '
0c004                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0c004                 | ' '
0c004                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' 
0c004                 | ' function expr() as ulong 
0c004                 | _expr
0c004     07 4A 05 F6 | 	mov	COUNT_, #7
0c008     A8 00 A0 FD | 	call	#pushregs_
0c00c                 | _expr_enter
0c00c     37 00 00 FF 
0c010     64 E4 05 F1 | 	add	objptr, ##28260
0c014     F2 2C 02 FB | 	rdlong	local04, objptr
0c018     03 2C 66 F0 | 	shl	local04, #3
0c01c     02 00 00 FF 
0c020     38 E4 85 F1 | 	sub	objptr, ##1080
0c024     F2 2C 02 F1 | 	add	local04, objptr
0c028     04 2C 06 F1 | 	add	local04, #4
0c02c     16 2F 02 FB | 	rdlong	local05, local04
0c030                 | ' 
0c030                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0c030     FE 2F 0E F2 | 	cmp	local05, #510 wz
0c034     35 00 00 FF 
0c038     2C E4 85 F1 | 	sub	objptr, ##27180
0c03c     C4 00 90 5D |  if_ne	jmp	#LR__0990
0c040     1D 26 06 F6 | 	mov	local01, #29
0c044     FF 2A 06 F6 | 	mov	local03, #255
0c048     13 31 02 F6 | 	mov	local06, local01
0c04c     14 33 02 F6 | 	mov	local07, local02
0c050     15 27 02 F6 | 	mov	local01, local03
0c054     4A 00 00 FF 
0c058     9C E4 05 F1 | 	add	objptr, ##38044
0c05c     F2 2E 02 FB | 	rdlong	local05, objptr
0c060     17 2D 02 F6 | 	mov	local04, local05
0c064     01 2C 66 F0 | 	shl	local04, #1
0c068     17 2D 02 F1 | 	add	local04, local05
0c06c     02 2C 66 F0 | 	shl	local04, #2
0c070     03 00 00 FF 
0c074     00 E4 85 F1 | 	sub	objptr, ##1536
0c078     F2 2C 02 F1 | 	add	local04, objptr
0c07c     16 31 62 FC | 	wrlong	local06, local04
0c080     03 00 00 FF 
0c084     00 E4 05 F1 | 	add	objptr, ##1536
0c088     F2 30 02 FB | 	rdlong	local06, objptr
0c08c     18 2F 02 F6 | 	mov	local05, local06
0c090     01 2E 66 F0 | 	shl	local05, #1
0c094     18 2F 02 F1 | 	add	local05, local06
0c098     02 2E 66 F0 | 	shl	local05, #2
0c09c     03 00 00 FF 
0c0a0     00 E4 85 F1 | 	sub	objptr, ##1536
0c0a4     F2 2E 02 F1 | 	add	local05, objptr
0c0a8     04 2E 06 F1 | 	add	local05, #4
0c0ac     17 33 62 FC | 	wrlong	local07, local05
0c0b0     03 00 00 FF 
0c0b4     00 E4 05 F1 | 	add	objptr, ##1536
0c0b8     F2 32 02 FB | 	rdlong	local07, objptr
0c0bc     19 31 02 F6 | 	mov	local06, local07
0c0c0     01 30 66 F0 | 	shl	local06, #1
0c0c4     19 31 02 F1 | 	add	local06, local07
0c0c8     02 30 66 F0 | 	shl	local06, #2
0c0cc     03 00 00 FF 
0c0d0     00 E4 85 F1 | 	sub	objptr, ##1536
0c0d4     F2 30 02 F1 | 	add	local06, objptr
0c0d8     08 30 06 F1 | 	add	local06, #8
0c0dc     18 27 62 FC | 	wrlong	local01, local06
0c0e0     03 00 00 FF 
0c0e4     00 E4 05 F1 | 	add	objptr, ##1536
0c0e8     F2 30 02 FB | 	rdlong	local06, objptr
0c0ec     01 30 06 F1 | 	add	local06, #1
0c0f0     F2 30 62 FC | 	wrlong	local06, objptr
0c0f4     4A 00 00 FF 
0c0f8     9C E4 85 F1 | 	sub	objptr, ##38044
0c0fc     1D FA 05 F6 | 	mov	result1, #29
0c100     64 01 90 FD | 	jmp	#LR__0993
0c104                 | LR__0990
0c104     00 26 06 F6 | 	mov	local01, #0
0c108     68 01 B0 FD | 	call	#_addsub
0c10c                 | ' t3.result.uresult=0
0c10c                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0c10c                 | ' if err>0 then return err
0c10c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c110     54 01 90 3D |  if_ae	jmp	#LR__0993
0c114     37 00 00 FF 
0c118     64 E4 05 F1 | 	add	objptr, ##28260
0c11c     F2 2C 02 FB | 	rdlong	local04, objptr
0c120     03 2C 66 F0 | 	shl	local04, #3
0c124     02 00 00 FF 
0c128     38 E4 85 F1 | 	sub	objptr, ##1080
0c12c     F2 2C 02 F1 | 	add	local04, objptr
0c130     04 2C 06 F1 | 	add	local04, #4
0c134     16 2F 02 FB | 	rdlong	local05, local04
0c138                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0c138                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0c138     35 00 00 FF 
0c13c     2C E4 85 F1 | 	sub	objptr, ##27180
0c140                 | LR__0991
0c140     1B 2E 0E F2 | 	cmp	local05, #27 wz
0c144     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0c148     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0c14c     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0c150     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0c154     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0c158     08 01 90 5D |  if_ne	jmp	#LR__0992
0c15c     37 00 00 FF 
0c160     64 E4 05 F1 | 	add	objptr, ##28260
0c164     F2 30 02 FB | 	rdlong	local06, objptr
0c168     01 30 06 F1 | 	add	local06, #1
0c16c     F2 30 62 FC | 	wrlong	local06, objptr
0c170     37 00 00 FF 
0c174     64 E4 85 F1 | 	sub	objptr, ##28260
0c178     F8 00 B0 FD | 	call	#_addsub
0c17c                 | '   ct+=1
0c17c                 | '   err=addsub() : if err>0 then return err
0c17c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c180     E4 00 90 3D |  if_ae	jmp	#LR__0993
0c184     17 2B 02 F6 | 	mov	local03, local05
0c188     13 31 02 F6 | 	mov	local06, local01
0c18c     14 33 02 F6 | 	mov	local07, local02
0c190     15 2F 02 F6 | 	mov	local05, local03
0c194     4A 00 00 FF 
0c198     9C E4 05 F1 | 	add	objptr, ##38044
0c19c     F2 2C 02 FB | 	rdlong	local04, objptr
0c1a0     16 FB 01 F6 | 	mov	result1, local04
0c1a4     01 FA 65 F0 | 	shl	result1, #1
0c1a8     16 FB 01 F1 | 	add	result1, local04
0c1ac     02 FA 65 F0 | 	shl	result1, #2
0c1b0     03 00 00 FF 
0c1b4     00 E4 85 F1 | 	sub	objptr, ##1536
0c1b8     F2 FA 01 F1 | 	add	result1, objptr
0c1bc     FD 30 62 FC | 	wrlong	local06, result1
0c1c0     03 00 00 FF 
0c1c4     00 E4 05 F1 | 	add	objptr, ##1536
0c1c8     F2 30 02 FB | 	rdlong	local06, objptr
0c1cc     18 2D 02 F6 | 	mov	local04, local06
0c1d0     01 2C 66 F0 | 	shl	local04, #1
0c1d4     18 2D 02 F1 | 	add	local04, local06
0c1d8     02 2C 66 F0 | 	shl	local04, #2
0c1dc     03 00 00 FF 
0c1e0     00 E4 85 F1 | 	sub	objptr, ##1536
0c1e4     F2 2C 02 F1 | 	add	local04, objptr
0c1e8     04 2C 06 F1 | 	add	local04, #4
0c1ec     16 33 62 FC | 	wrlong	local07, local04
0c1f0     03 00 00 FF 
0c1f4     00 E4 05 F1 | 	add	objptr, ##1536
0c1f8     F2 32 02 FB | 	rdlong	local07, objptr
0c1fc     19 31 02 F6 | 	mov	local06, local07
0c200     01 30 66 F0 | 	shl	local06, #1
0c204     19 31 02 F1 | 	add	local06, local07
0c208     02 30 66 F0 | 	shl	local06, #2
0c20c     03 00 00 FF 
0c210     00 E4 85 F1 | 	sub	objptr, ##1536
0c214     F2 30 02 F1 | 	add	local06, objptr
0c218     08 30 06 F1 | 	add	local06, #8
0c21c     18 2F 62 FC | 	wrlong	local05, local06
0c220     03 00 00 FF 
0c224     00 E4 05 F1 | 	add	objptr, ##1536
0c228     F2 30 02 FB | 	rdlong	local06, objptr
0c22c     01 30 06 F1 | 	add	local06, #1
0c230     F2 30 62 FC | 	wrlong	local06, objptr
0c234     13 00 00 FF 
0c238     38 E4 85 F1 | 	sub	objptr, ##9784
0c23c     F2 2C 02 FB | 	rdlong	local04, objptr
0c240     03 2C 66 F0 | 	shl	local04, #3
0c244     02 00 00 FF 
0c248     38 E4 85 F1 | 	sub	objptr, ##1080
0c24c     F2 2C 02 F1 | 	add	local04, objptr
0c250     04 2C 06 F1 | 	add	local04, #4
0c254     16 2F 02 FB | 	rdlong	local05, local04
0c258     35 00 00 FF 
0c25c     2C E4 85 F1 | 	sub	objptr, ##27180
0c260     DC FE 9F FD | 	jmp	#LR__0991
0c264                 | LR__0992
0c264                 | ' return 0  
0c264     00 FA 05 F6 | 	mov	result1, #0
0c268                 | LR__0993
0c268     A7 F0 03 F6 | 	mov	ptra, fp
0c26c     B2 00 A0 FD | 	call	#popregs_
0c270                 | _expr_ret
0c270     2D 00 64 FD | 	ret
0c274                 | 
0c274                 | ' 
0c274                 | ' ' Second level operators : add, sub, logic
0c274                 | ' 
0c274                 | ' function addsub() as ulong
0c274                 | _addsub
0c274     07 4A 05 F6 | 	mov	COUNT_, #7
0c278     A8 00 A0 FD | 	call	#pushregs_
0c27c                 | _addsub_enter
0c27c     00 26 06 F6 | 	mov	local01, #0
0c280     60 01 B0 FD | 	call	#_muldiv
0c284                 | ' 
0c284                 | ' t3.result.uresult=0
0c284                 | ' err=muldiv() : if err>0 then return err           			 
0c284     01 FA 15 F2 | 	cmp	result1, #1 wc
0c288     4C 01 90 3D |  if_ae	jmp	#LR__1002
0c28c     37 00 00 FF 
0c290     64 E4 05 F1 | 	add	objptr, ##28260
0c294     F2 2C 02 FB | 	rdlong	local04, objptr
0c298     03 2C 66 F0 | 	shl	local04, #3
0c29c     02 00 00 FF 
0c2a0     38 E4 85 F1 | 	sub	objptr, ##1080
0c2a4     F2 2C 02 F1 | 	add	local04, objptr
0c2a8     04 2C 06 F1 | 	add	local04, #4
0c2ac     16 2F 02 FB | 	rdlong	local05, local04
0c2b0                 | ' op = lparts(ct).token				 
0c2b0                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c2b0     35 00 00 FF 
0c2b4     2C E4 85 F1 | 	sub	objptr, ##27180
0c2b8                 | LR__1000
0c2b8     01 2E 0E F2 | 	cmp	local05, #1 wz
0c2bc     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0c2c0     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0c2c4     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0c2c8     08 01 90 5D |  if_ne	jmp	#LR__1001
0c2cc     37 00 00 FF 
0c2d0     64 E4 05 F1 | 	add	objptr, ##28260
0c2d4     F2 2C 02 FB | 	rdlong	local04, objptr
0c2d8     01 2C 06 F1 | 	add	local04, #1
0c2dc     F2 2C 62 FC | 	wrlong	local04, objptr
0c2e0     37 00 00 FF 
0c2e4     64 E4 85 F1 | 	sub	objptr, ##28260
0c2e8     F8 00 B0 FD | 	call	#_muldiv
0c2ec                 | '   ct+=1
0c2ec                 | '   err=muldiv() : if err>0 then return err   
0c2ec     01 FA 15 F2 | 	cmp	result1, #1 wc
0c2f0     E4 00 90 3D |  if_ae	jmp	#LR__1002
0c2f4     17 2B 02 F6 | 	mov	local03, local05
0c2f8     13 31 02 F6 | 	mov	local06, local01
0c2fc     14 33 02 F6 | 	mov	local07, local02
0c300     15 2F 02 F6 | 	mov	local05, local03
0c304     4A 00 00 FF 
0c308     9C E4 05 F1 | 	add	objptr, ##38044
0c30c     F2 2C 02 FB | 	rdlong	local04, objptr
0c310     16 FB 01 F6 | 	mov	result1, local04
0c314     01 FA 65 F0 | 	shl	result1, #1
0c318     16 FB 01 F1 | 	add	result1, local04
0c31c     02 FA 65 F0 | 	shl	result1, #2
0c320     03 00 00 FF 
0c324     00 E4 85 F1 | 	sub	objptr, ##1536
0c328     F2 FA 01 F1 | 	add	result1, objptr
0c32c     FD 30 62 FC | 	wrlong	local06, result1
0c330     03 00 00 FF 
0c334     00 E4 05 F1 | 	add	objptr, ##1536
0c338     F2 30 02 FB | 	rdlong	local06, objptr
0c33c     18 2D 02 F6 | 	mov	local04, local06
0c340     01 2C 66 F0 | 	shl	local04, #1
0c344     18 2D 02 F1 | 	add	local04, local06
0c348     02 2C 66 F0 | 	shl	local04, #2
0c34c     03 00 00 FF 
0c350     00 E4 85 F1 | 	sub	objptr, ##1536
0c354     F2 2C 02 F1 | 	add	local04, objptr
0c358     04 2C 06 F1 | 	add	local04, #4
0c35c     16 33 62 FC | 	wrlong	local07, local04
0c360     03 00 00 FF 
0c364     00 E4 05 F1 | 	add	objptr, ##1536
0c368     F2 32 02 FB | 	rdlong	local07, objptr
0c36c     19 31 02 F6 | 	mov	local06, local07
0c370     01 30 66 F0 | 	shl	local06, #1
0c374     19 31 02 F1 | 	add	local06, local07
0c378     02 30 66 F0 | 	shl	local06, #2
0c37c     03 00 00 FF 
0c380     00 E4 85 F1 | 	sub	objptr, ##1536
0c384     F2 30 02 F1 | 	add	local06, objptr
0c388     08 30 06 F1 | 	add	local06, #8
0c38c     18 2F 62 FC | 	wrlong	local05, local06
0c390     03 00 00 FF 
0c394     00 E4 05 F1 | 	add	objptr, ##1536
0c398     F2 30 02 FB | 	rdlong	local06, objptr
0c39c     01 30 06 F1 | 	add	local06, #1
0c3a0     F2 30 62 FC | 	wrlong	local06, objptr
0c3a4     13 00 00 FF 
0c3a8     38 E4 85 F1 | 	sub	objptr, ##9784
0c3ac     F2 2C 02 FB | 	rdlong	local04, objptr
0c3b0     03 2C 66 F0 | 	shl	local04, #3
0c3b4     02 00 00 FF 
0c3b8     38 E4 85 F1 | 	sub	objptr, ##1080
0c3bc     F2 2C 02 F1 | 	add	local04, objptr
0c3c0     04 2C 06 F1 | 	add	local04, #4
0c3c4     16 2F 02 FB | 	rdlong	local05, local04
0c3c8     35 00 00 FF 
0c3cc     2C E4 85 F1 | 	sub	objptr, ##27180
0c3d0     E4 FE 9F FD | 	jmp	#LR__1000
0c3d4                 | LR__1001
0c3d4                 | ' return 0
0c3d4     00 FA 05 F6 | 	mov	result1, #0
0c3d8                 | LR__1002
0c3d8     A7 F0 03 F6 | 	mov	ptra, fp
0c3dc     B2 00 A0 FD | 	call	#popregs_
0c3e0                 | _addsub_ret
0c3e0     2D 00 64 FD | 	ret
0c3e4                 | 
0c3e4                 | ' 
0c3e4                 | ' ' Third level operators : mul,div,shift,power
0c3e4                 | ' 
0c3e4                 | ' function muldiv() as ulong
0c3e4                 | _muldiv
0c3e4     07 4A 05 F6 | 	mov	COUNT_, #7
0c3e8     A8 00 A0 FD | 	call	#pushregs_
0c3ec                 | _muldiv_enter
0c3ec     00 26 06 F6 | 	mov	local01, #0
0c3f0     6C 01 B0 FD | 	call	#_getvalue
0c3f4                 | ' 
0c3f4                 | ' t3.result.uresult=0
0c3f4                 | ' err=getvalue() : if err>0 then return err     
0c3f4     01 FA 15 F2 | 	cmp	result1, #1 wc
0c3f8     58 01 90 3D |  if_ae	jmp	#LR__1012
0c3fc     37 00 00 FF 
0c400     64 E4 05 F1 | 	add	objptr, ##28260
0c404     F2 2C 02 FB | 	rdlong	local04, objptr
0c408     03 2C 66 F0 | 	shl	local04, #3
0c40c     02 00 00 FF 
0c410     38 E4 85 F1 | 	sub	objptr, ##1080
0c414     F2 2C 02 F1 | 	add	local04, objptr
0c418     04 2C 06 F1 | 	add	local04, #4
0c41c     16 2F 02 FB | 	rdlong	local05, local04
0c420                 | ' op = lparts(ct).token
0c420                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c420     35 00 00 FF 
0c424     2C E4 85 F1 | 	sub	objptr, ##27180
0c428                 | LR__1010
0c428     05 2E 0E F2 | 	cmp	local05, #5 wz
0c42c     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c430     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c434     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c438     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c43c     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c440     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c444     08 01 90 5D |  if_ne	jmp	#LR__1011
0c448     37 00 00 FF 
0c44c     64 E4 05 F1 | 	add	objptr, ##28260
0c450     F2 2C 02 FB | 	rdlong	local04, objptr
0c454     01 2C 06 F1 | 	add	local04, #1
0c458     F2 2C 62 FC | 	wrlong	local04, objptr
0c45c     37 00 00 FF 
0c460     64 E4 85 F1 | 	sub	objptr, ##28260
0c464     F8 00 B0 FD | 	call	#_getvalue
0c468                 | '   ct+=1
0c468                 | '   err=getvalue() :if err>0 then return err   
0c468     01 FA 15 F2 | 	cmp	result1, #1 wc
0c46c     E4 00 90 3D |  if_ae	jmp	#LR__1012
0c470     17 2B 02 F6 | 	mov	local03, local05
0c474     13 31 02 F6 | 	mov	local06, local01
0c478     14 33 02 F6 | 	mov	local07, local02
0c47c     15 2F 02 F6 | 	mov	local05, local03
0c480     4A 00 00 FF 
0c484     9C E4 05 F1 | 	add	objptr, ##38044
0c488     F2 2C 02 FB | 	rdlong	local04, objptr
0c48c     16 FB 01 F6 | 	mov	result1, local04
0c490     01 FA 65 F0 | 	shl	result1, #1
0c494     16 FB 01 F1 | 	add	result1, local04
0c498     02 FA 65 F0 | 	shl	result1, #2
0c49c     03 00 00 FF 
0c4a0     00 E4 85 F1 | 	sub	objptr, ##1536
0c4a4     F2 FA 01 F1 | 	add	result1, objptr
0c4a8     FD 30 62 FC | 	wrlong	local06, result1
0c4ac     03 00 00 FF 
0c4b0     00 E4 05 F1 | 	add	objptr, ##1536
0c4b4     F2 30 02 FB | 	rdlong	local06, objptr
0c4b8     18 2D 02 F6 | 	mov	local04, local06
0c4bc     01 2C 66 F0 | 	shl	local04, #1
0c4c0     18 2D 02 F1 | 	add	local04, local06
0c4c4     02 2C 66 F0 | 	shl	local04, #2
0c4c8     03 00 00 FF 
0c4cc     00 E4 85 F1 | 	sub	objptr, ##1536
0c4d0     F2 2C 02 F1 | 	add	local04, objptr
0c4d4     04 2C 06 F1 | 	add	local04, #4
0c4d8     16 33 62 FC | 	wrlong	local07, local04
0c4dc     03 00 00 FF 
0c4e0     00 E4 05 F1 | 	add	objptr, ##1536
0c4e4     F2 32 02 FB | 	rdlong	local07, objptr
0c4e8     19 31 02 F6 | 	mov	local06, local07
0c4ec     01 30 66 F0 | 	shl	local06, #1
0c4f0     19 31 02 F1 | 	add	local06, local07
0c4f4     02 30 66 F0 | 	shl	local06, #2
0c4f8     03 00 00 FF 
0c4fc     00 E4 85 F1 | 	sub	objptr, ##1536
0c500     F2 30 02 F1 | 	add	local06, objptr
0c504     08 30 06 F1 | 	add	local06, #8
0c508     18 2F 62 FC | 	wrlong	local05, local06
0c50c     03 00 00 FF 
0c510     00 E4 05 F1 | 	add	objptr, ##1536
0c514     F2 30 02 FB | 	rdlong	local06, objptr
0c518     01 30 06 F1 | 	add	local06, #1
0c51c     F2 30 62 FC | 	wrlong	local06, objptr
0c520     13 00 00 FF 
0c524     38 E4 85 F1 | 	sub	objptr, ##9784
0c528     F2 2C 02 FB | 	rdlong	local04, objptr
0c52c     03 2C 66 F0 | 	shl	local04, #3
0c530     02 00 00 FF 
0c534     38 E4 85 F1 | 	sub	objptr, ##1080
0c538     F2 2C 02 F1 | 	add	local04, objptr
0c53c     04 2C 06 F1 | 	add	local04, #4
0c540     16 2F 02 FB | 	rdlong	local05, local04
0c544     35 00 00 FF 
0c548     2C E4 85 F1 | 	sub	objptr, ##27180
0c54c     D8 FE 9F FD | 	jmp	#LR__1010
0c550                 | LR__1011
0c550                 | ' return 0
0c550     00 FA 05 F6 | 	mov	result1, #0
0c554                 | LR__1012
0c554     A7 F0 03 F6 | 	mov	ptra, fp
0c558     B2 00 A0 FD | 	call	#popregs_
0c55c                 | _muldiv_ret
0c55c     2D 00 64 FD | 	ret
0c560                 | 
0c560                 | ' 
0c560                 | ' ' Get a value for operations
0c560                 | ' 
0c560                 | ' function getvalue()  as ulong
0c560                 | _getvalue
0c560     0B 4A 05 F6 | 	mov	COUNT_, #11
0c564     A8 00 A0 FD | 	call	#pushregs_
0c568                 | _getvalue_enter
0c568     01 2C 06 F6 | 	mov	local04, #1
0c56c     00 26 06 F6 | 	mov	local01, #0
0c570     1D 2A 06 F6 | 	mov	local03, #29
0c574     37 00 00 FF 
0c578     64 E4 05 F1 | 	add	objptr, ##28260
0c57c     F2 16 02 FB | 	rdlong	arg03, objptr
0c580     03 16 66 F0 | 	shl	arg03, #3
0c584     02 00 00 FF 
0c588     38 E4 85 F1 | 	sub	objptr, ##1080
0c58c     F2 16 02 F1 | 	add	arg03, objptr
0c590     04 16 06 F1 | 	add	arg03, #4
0c594     0B 2F 02 FB | 	rdlong	local05, arg03
0c598                 | ' 
0c598                 | ' m=1											' for negative numbers
0c598                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c598                 | ' op=lparts(ct).token
0c598                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c598     02 2E 0E F2 | 	cmp	local05, #2 wz
0c59c     35 00 00 FF 
0c5a0     2C E4 85 F1 | 	sub	objptr, ##27180
0c5a4     38 00 90 5D |  if_ne	jmp	#LR__1020
0c5a8     01 2C 66 F6 | 	neg	local04, #1
0c5ac     37 00 00 FF 
0c5b0     64 E4 05 F1 | 	add	objptr, ##28260
0c5b4     F2 2E 02 FB | 	rdlong	local05, objptr
0c5b8     01 2E 06 F1 | 	add	local05, #1
0c5bc     F2 2E 62 FC | 	wrlong	local05, objptr
0c5c0     03 2E 66 F0 | 	shl	local05, #3
0c5c4     02 00 00 FF 
0c5c8     38 E4 85 F1 | 	sub	objptr, ##1080
0c5cc     F2 2E 02 F1 | 	add	local05, objptr
0c5d0     04 2E 06 F1 | 	add	local05, #4
0c5d4     17 2F 02 FB | 	rdlong	local05, local05
0c5d8     35 00 00 FF 
0c5dc     2C E4 85 F1 | 	sub	objptr, ##27180
0c5e0                 | LR__1020
0c5e0                 | ' select case op
0c5e0     01 00 00 FF 
0c5e4     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c5e8     44 00 90 AD |  if_e	jmp	#LR__1021
0c5ec     01 00 00 FF 
0c5f0     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c5f4     90 01 90 AD |  if_e	jmp	#LR__1024
0c5f8     01 00 00 FF 
0c5fc     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c600     44 04 90 AD |  if_e	jmp	#LR__1031
0c604     01 00 00 FF 
0c608     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c60c     A8 05 90 AD |  if_e	jmp	#LR__1034
0c610     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c614     78 07 90 AD |  if_e	jmp	#LR__1039
0c618     01 00 00 FF 
0c61c     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c620     70 08 90 AD |  if_e	jmp	#LR__1040
0c624     15 2E 0E F2 | 	cmp	local05, #21 wz
0c628     98 08 90 AD |  if_e	jmp	#LR__1041
0c62c     10 09 90 FD | 	jmp	#LR__1042
0c630                 | LR__1021
0c630                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c630     01 2C 0E F2 | 	cmp	local04, #1 wz
0c634     3C 00 90 5D |  if_ne	jmp	#LR__1022
0c638     37 00 00 FF 
0c63c     64 E4 05 F1 | 	add	objptr, ##28260
0c640     F2 2E 02 FB | 	rdlong	local05, objptr
0c644     03 2E 66 F0 | 	shl	local05, #3
0c648     02 00 00 FF 
0c64c     38 E4 85 F1 | 	sub	objptr, ##1080
0c650     F2 2E 02 F1 | 	add	local05, objptr
0c654     17 13 02 FB | 	rdlong	arg01, local05
0c658     00 14 06 F6 | 	mov	arg02, #0
0c65c     35 00 00 FF 
0c660     2C E4 85 F1 | 	sub	objptr, ##27180
0c664     9C EF B1 FD | 	call	#__system____builtin_atoi
0c668     FD 2C 02 FD | 	qmul	local04, result1
0c66c     18 26 62 FD | 	getqx	local01
0c670     1C 2A 06 F6 | 	mov	local03, #28
0c674                 | LR__1022
0c674                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c674     FF FF 7F FF 
0c678     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c67c     3C 00 90 5D |  if_ne	jmp	#LR__1023
0c680     37 00 00 FF 
0c684     64 E4 05 F1 | 	add	objptr, ##28260
0c688     F2 2E 02 FB | 	rdlong	local05, objptr
0c68c     03 2E 66 F0 | 	shl	local05, #3
0c690     02 00 00 FF 
0c694     38 E4 85 F1 | 	sub	objptr, ##1080
0c698     F2 2E 02 F1 | 	add	local05, objptr
0c69c     17 13 02 FB | 	rdlong	arg01, local05
0c6a0     00 14 06 F6 | 	mov	arg02, #0
0c6a4     35 00 00 FF 
0c6a8     2C E4 85 F1 | 	sub	objptr, ##27180
0c6ac     54 EF B1 FD | 	call	#__system____builtin_atoi
0c6b0     FD 2C 02 FD | 	qmul	local04, result1
0c6b4     18 26 62 FD | 	getqx	local01
0c6b8     1C 2A 06 F6 | 	mov	local03, #28
0c6bc                 | LR__1023
0c6bc     13 31 02 F6 | 	mov	local06, local01
0c6c0     14 33 02 F6 | 	mov	local07, local02
0c6c4     15 2F 02 F6 | 	mov	local05, local03
0c6c8     4A 00 00 FF 
0c6cc     9C E4 05 F1 | 	add	objptr, ##38044
0c6d0     F2 26 02 FB | 	rdlong	local01, objptr
0c6d4     13 2D 02 F6 | 	mov	local04, local01
0c6d8     01 2C 66 F0 | 	shl	local04, #1
0c6dc     13 2D 02 F1 | 	add	local04, local01
0c6e0     02 2C 66 F0 | 	shl	local04, #2
0c6e4     03 00 00 FF 
0c6e8     00 E4 85 F1 | 	sub	objptr, ##1536
0c6ec     F2 2C 02 F1 | 	add	local04, objptr
0c6f0     16 31 62 FC | 	wrlong	local06, local04
0c6f4     03 00 00 FF 
0c6f8     00 E4 05 F1 | 	add	objptr, ##1536
0c6fc     F2 30 02 FB | 	rdlong	local06, objptr
0c700     18 27 02 F6 | 	mov	local01, local06
0c704     01 26 66 F0 | 	shl	local01, #1
0c708     18 27 02 F1 | 	add	local01, local06
0c70c     02 26 66 F0 | 	shl	local01, #2
0c710     03 00 00 FF 
0c714     00 E4 85 F1 | 	sub	objptr, ##1536
0c718     F2 26 02 F1 | 	add	local01, objptr
0c71c     04 26 06 F1 | 	add	local01, #4
0c720     13 33 62 FC | 	wrlong	local07, local01
0c724     03 00 00 FF 
0c728     00 E4 05 F1 | 	add	objptr, ##1536
0c72c     F2 32 02 FB | 	rdlong	local07, objptr
0c730     19 31 02 F6 | 	mov	local06, local07
0c734     01 30 66 F0 | 	shl	local06, #1
0c738     19 31 02 F1 | 	add	local06, local07
0c73c     02 30 66 F0 | 	shl	local06, #2
0c740     03 00 00 FF 
0c744     00 E4 85 F1 | 	sub	objptr, ##1536
0c748     F2 30 02 F1 | 	add	local06, objptr
0c74c     08 30 06 F1 | 	add	local06, #8
0c750     18 2F 62 FC | 	wrlong	local05, local06
0c754     03 00 00 FF 
0c758     00 E4 05 F1 | 	add	objptr, ##1536
0c75c     F2 30 02 FB | 	rdlong	local06, objptr
0c760     01 30 06 F1 | 	add	local06, #1
0c764     F2 30 62 FC | 	wrlong	local06, objptr
0c768     13 00 00 FF 
0c76c     38 E4 85 F1 | 	sub	objptr, ##9784
0c770     F2 30 02 FB | 	rdlong	local06, objptr
0c774     01 30 06 F1 | 	add	local06, #1
0c778     F2 30 62 FC | 	wrlong	local06, objptr
0c77c     37 00 00 FF 
0c780     64 E4 85 F1 | 	sub	objptr, ##28260
0c784     E4 07 90 FD | 	jmp	#LR__1043
0c788                 | LR__1024
0c788                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c788     37 00 00 FF 
0c78c     64 E4 05 F1 | 	add	objptr, ##28260
0c790     F2 16 02 FB | 	rdlong	arg03, objptr
0c794     03 16 66 F0 | 	shl	arg03, #3
0c798     02 00 00 FF 
0c79c     38 E4 85 F1 | 	sub	objptr, ##1080
0c7a0     F2 16 02 F1 | 	add	arg03, objptr
0c7a4     0B 13 02 FB | 	rdlong	arg01, arg03
0c7a8     01 14 06 F6 | 	mov	arg02, #1
0c7ac     35 00 00 FF 
0c7b0     2C E4 85 F1 | 	sub	objptr, ##27180
0c7b4     D8 D9 B1 FD | 	call	#__system__Left_S
0c7b8     FD 12 02 F6 | 	mov	arg01, result1
0c7bc     B4 01 00 FF 
0c7c0     68 14 06 F6 | 	mov	arg02, ##@LR__5763
0c7c4     70 B9 B1 FD | 	call	#__system___string_cmp
0c7c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0c7cc     94 00 90 5D |  if_ne	jmp	#LR__1027
0c7d0     37 00 00 FF 
0c7d4     64 E4 05 F1 | 	add	objptr, ##28260
0c7d8     F2 32 02 FB | 	rdlong	local07, objptr
0c7dc     19 31 02 F6 | 	mov	local06, local07
0c7e0     03 30 66 F0 | 	shl	local06, #3
0c7e4     02 00 00 FF 
0c7e8     38 E4 85 F1 | 	sub	objptr, ##1080
0c7ec     F2 30 02 F1 | 	add	local06, objptr
0c7f0     B4 01 00 FF 
0c7f4     6A 2E 06 F6 | 	mov	local05, ##@LR__5764
0c7f8     03 32 66 F0 | 	shl	local07, #3
0c7fc     F2 32 02 F1 | 	add	local07, objptr
0c800     19 33 02 FB | 	rdlong	local07, local07
0c804     02 00 00 FF 
0c808     38 E4 05 F1 | 	add	objptr, ##1080
0c80c     F2 26 02 FB | 	rdlong	local01, objptr
0c810     03 26 66 F0 | 	shl	local01, #3
0c814     02 00 00 FF 
0c818     38 E4 85 F1 | 	sub	objptr, ##1080
0c81c     F2 26 02 F1 | 	add	local01, objptr
0c820     13 13 02 FB | 	rdlong	arg01, local01
0c824     35 00 00 FF 
0c828     2C E4 85 F1 | 	sub	objptr, ##27180
0c82c     09 35 02 F6 | 	mov	local08, arg01
0c830     97 06 48 FB | 	callpa	#(@LR__1026-@LR__1025)>>2,fcache_load_ptr_
0c834                 | LR__1025
0c834     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c838     01 34 06 51 |  if_ne	add	local08, #1
0c83c     F4 FF 9F 5D |  if_ne	jmp	#LR__1025
0c840                 | LR__1026
0c840     09 35 82 F1 | 	sub	local08, arg01
0c844     1A 15 02 F6 | 	mov	arg02, local08
0c848     01 14 86 F1 | 	sub	arg02, #1
0c84c     19 13 02 F6 | 	mov	arg01, local07
0c850     C4 D9 B1 FD | 	call	#__system__Right_S
0c854     FD 14 02 F6 | 	mov	arg02, result1
0c858     17 13 02 F6 | 	mov	arg01, local05
0c85c     0C B9 B1 FD | 	call	#__system___string_concat
0c860     18 FB 61 FC | 	wrlong	result1, local06
0c864                 | LR__1027
0c864                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c864     37 00 00 FF 
0c868     64 E4 05 F1 | 	add	objptr, ##28260
0c86c     F2 16 02 FB | 	rdlong	arg03, objptr
0c870     03 16 66 F0 | 	shl	arg03, #3
0c874     02 00 00 FF 
0c878     38 E4 85 F1 | 	sub	objptr, ##1080
0c87c     F2 16 02 F1 | 	add	arg03, objptr
0c880     0B 13 02 FB | 	rdlong	arg01, arg03
0c884     01 14 06 F6 | 	mov	arg02, #1
0c888     35 00 00 FF 
0c88c     2C E4 85 F1 | 	sub	objptr, ##27180
0c890     FC D8 B1 FD | 	call	#__system__Left_S
0c894     FD 12 02 F6 | 	mov	arg01, result1
0c898     B4 01 00 FF 
0c89c     6D 14 06 F6 | 	mov	arg02, ##@LR__5765
0c8a0     94 B8 B1 FD | 	call	#__system___string_cmp
0c8a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0c8a8     94 00 90 5D |  if_ne	jmp	#LR__1030
0c8ac     37 00 00 FF 
0c8b0     64 E4 05 F1 | 	add	objptr, ##28260
0c8b4     F2 32 02 FB | 	rdlong	local07, objptr
0c8b8     19 31 02 F6 | 	mov	local06, local07
0c8bc     03 30 66 F0 | 	shl	local06, #3
0c8c0     02 00 00 FF 
0c8c4     38 E4 85 F1 | 	sub	objptr, ##1080
0c8c8     F2 30 02 F1 | 	add	local06, objptr
0c8cc     B4 01 00 FF 
0c8d0     6F 2E 06 F6 | 	mov	local05, ##@LR__5766
0c8d4     03 32 66 F0 | 	shl	local07, #3
0c8d8     F2 32 02 F1 | 	add	local07, objptr
0c8dc     19 33 02 FB | 	rdlong	local07, local07
0c8e0     02 00 00 FF 
0c8e4     38 E4 05 F1 | 	add	objptr, ##1080
0c8e8     F2 26 02 FB | 	rdlong	local01, objptr
0c8ec     03 26 66 F0 | 	shl	local01, #3
0c8f0     02 00 00 FF 
0c8f4     38 E4 85 F1 | 	sub	objptr, ##1080
0c8f8     F2 26 02 F1 | 	add	local01, objptr
0c8fc     13 13 02 FB | 	rdlong	arg01, local01
0c900     35 00 00 FF 
0c904     2C E4 85 F1 | 	sub	objptr, ##27180
0c908     09 35 02 F6 | 	mov	local08, arg01
0c90c     97 06 48 FB | 	callpa	#(@LR__1029-@LR__1028)>>2,fcache_load_ptr_
0c910                 | LR__1028
0c910     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c914     01 34 06 51 |  if_ne	add	local08, #1
0c918     F4 FF 9F 5D |  if_ne	jmp	#LR__1028
0c91c                 | LR__1029
0c91c     09 35 82 F1 | 	sub	local08, arg01
0c920     1A 15 02 F6 | 	mov	arg02, local08
0c924     01 14 86 F1 | 	sub	arg02, #1
0c928     19 13 02 F6 | 	mov	arg01, local07
0c92c     E8 D8 B1 FD | 	call	#__system__Right_S
0c930     FD 14 02 F6 | 	mov	arg02, result1
0c934     17 13 02 F6 | 	mov	arg01, local05
0c938     30 B8 B1 FD | 	call	#__system___string_concat
0c93c     18 FB 61 FC | 	wrlong	result1, local06
0c940                 | LR__1030
0c940     37 00 00 FF 
0c944     64 E4 05 F1 | 	add	objptr, ##28260
0c948     F2 30 02 FB | 	rdlong	local06, objptr
0c94c     03 30 66 F0 | 	shl	local06, #3
0c950     02 00 00 FF 
0c954     38 E4 85 F1 | 	sub	objptr, ##1080
0c958     F2 30 02 F1 | 	add	local06, objptr
0c95c     18 13 02 FB | 	rdlong	arg01, local06
0c960     00 14 06 F6 | 	mov	arg02, #0
0c964     35 00 00 FF 
0c968     2C E4 85 F1 | 	sub	objptr, ##27180
0c96c     94 EC B1 FD | 	call	#__system____builtin_atoi
0c970     FD 2C 02 FD | 	qmul	local04, result1
0c974     4A 00 00 FF 
0c978     9C E4 05 F1 | 	add	objptr, ##38044
0c97c     F2 30 02 FB | 	rdlong	local06, objptr
0c980     18 37 02 F6 | 	mov	local09, local06
0c984     01 36 66 F0 | 	shl	local09, #1
0c988     18 37 02 F1 | 	add	local09, local06
0c98c     02 36 66 F0 | 	shl	local09, #2
0c990     03 00 00 FF 
0c994     00 E4 85 F1 | 	sub	objptr, ##1536
0c998     F2 36 02 F1 | 	add	local09, objptr
0c99c     03 00 00 FF 
0c9a0     00 E4 05 F1 | 	add	objptr, ##1536
0c9a4     18 26 62 FD | 	getqx	local01
0c9a8     1C 2A 06 F6 | 	mov	local03, #28
0c9ac     13 31 02 F6 | 	mov	local06, local01
0c9b0     14 33 02 F6 | 	mov	local07, local02
0c9b4     1B 31 62 FC | 	wrlong	local06, local09
0c9b8     15 37 02 F6 | 	mov	local09, local03
0c9bc     F2 30 02 FB | 	rdlong	local06, objptr
0c9c0     18 2F 02 F6 | 	mov	local05, local06
0c9c4     01 2E 66 F0 | 	shl	local05, #1
0c9c8     18 2F 02 F1 | 	add	local05, local06
0c9cc     02 2E 66 F0 | 	shl	local05, #2
0c9d0     03 00 00 FF 
0c9d4     00 E4 85 F1 | 	sub	objptr, ##1536
0c9d8     F2 2E 02 F1 | 	add	local05, objptr
0c9dc     04 2E 06 F1 | 	add	local05, #4
0c9e0     17 33 62 FC | 	wrlong	local07, local05
0c9e4     03 00 00 FF 
0c9e8     00 E4 05 F1 | 	add	objptr, ##1536
0c9ec     F2 32 02 FB | 	rdlong	local07, objptr
0c9f0     19 31 02 F6 | 	mov	local06, local07
0c9f4     01 30 66 F0 | 	shl	local06, #1
0c9f8     19 31 02 F1 | 	add	local06, local07
0c9fc     02 30 66 F0 | 	shl	local06, #2
0ca00     03 00 00 FF 
0ca04     00 E4 85 F1 | 	sub	objptr, ##1536
0ca08     F2 30 02 F1 | 	add	local06, objptr
0ca0c     08 30 06 F1 | 	add	local06, #8
0ca10     18 37 62 FC | 	wrlong	local09, local06
0ca14     03 00 00 FF 
0ca18     00 E4 05 F1 | 	add	objptr, ##1536
0ca1c     F2 30 02 FB | 	rdlong	local06, objptr
0ca20     01 30 06 F1 | 	add	local06, #1
0ca24     F2 30 62 FC | 	wrlong	local06, objptr
0ca28     13 00 00 FF 
0ca2c     38 E4 85 F1 | 	sub	objptr, ##9784
0ca30     F2 30 02 FB | 	rdlong	local06, objptr
0ca34     01 30 06 F1 | 	add	local06, #1
0ca38     F2 30 62 FC | 	wrlong	local06, objptr
0ca3c     37 00 00 FF 
0ca40     64 E4 85 F1 | 	sub	objptr, ##28260
0ca44     24 05 90 FD | 	jmp	#LR__1043
0ca48                 | LR__1031
0ca48                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0ca48     01 2C 0E F2 | 	cmp	local04, #1 wz
0ca4c     48 00 90 5D |  if_ne	jmp	#LR__1032
0ca50     00 C0 1F FF 
0ca54     00 30 06 F6 | 	mov	local06, ##1065353216
0ca58     37 00 00 FF 
0ca5c     64 E4 05 F1 | 	add	objptr, ##28260
0ca60     F2 36 02 FB | 	rdlong	local09, objptr
0ca64     03 36 66 F0 | 	shl	local09, #3
0ca68     02 00 00 FF 
0ca6c     38 E4 85 F1 | 	sub	objptr, ##1080
0ca70     F2 36 02 F1 | 	add	local09, objptr
0ca74     1B 13 02 FB | 	rdlong	arg01, local09
0ca78     35 00 00 FF 
0ca7c     2C E4 85 F1 | 	sub	objptr, ##27180
0ca80     18 ED B1 FD | 	call	#__system____builtin_atof
0ca84     FD 14 02 F6 | 	mov	arg02, result1
0ca88     18 13 02 F6 | 	mov	arg01, local06
0ca8c     FC E4 B1 FD | 	call	#__system___float_mul
0ca90     FD 26 02 F6 | 	mov	local01, result1
0ca94     1E 2A 06 F6 | 	mov	local03, #30
0ca98                 | LR__1032
0ca98                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0ca98     FF FF 7F FF 
0ca9c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0caa0     48 00 90 5D |  if_ne	jmp	#LR__1033
0caa4     00 C0 5F FF 
0caa8     00 30 06 F6 | 	mov	local06, ##-1082130432
0caac     37 00 00 FF 
0cab0     64 E4 05 F1 | 	add	objptr, ##28260
0cab4     F2 36 02 FB | 	rdlong	local09, objptr
0cab8     03 36 66 F0 | 	shl	local09, #3
0cabc     02 00 00 FF 
0cac0     38 E4 85 F1 | 	sub	objptr, ##1080
0cac4     F2 36 02 F1 | 	add	local09, objptr
0cac8     1B 13 02 FB | 	rdlong	arg01, local09
0cacc     35 00 00 FF 
0cad0     2C E4 85 F1 | 	sub	objptr, ##27180
0cad4     C4 EC B1 FD | 	call	#__system____builtin_atof
0cad8     FD 14 02 F6 | 	mov	arg02, result1
0cadc     18 13 02 F6 | 	mov	arg01, local06
0cae0     A8 E4 B1 FD | 	call	#__system___float_mul
0cae4     FD 26 02 F6 | 	mov	local01, result1
0cae8     1E 2A 06 F6 | 	mov	local03, #30
0caec                 | LR__1033
0caec     13 31 02 F6 | 	mov	local06, local01
0caf0     14 33 02 F6 | 	mov	local07, local02
0caf4     15 2F 02 F6 | 	mov	local05, local03
0caf8     4A 00 00 FF 
0cafc     9C E4 05 F1 | 	add	objptr, ##38044
0cb00     F2 26 02 FB | 	rdlong	local01, objptr
0cb04     13 37 02 F6 | 	mov	local09, local01
0cb08     01 36 66 F0 | 	shl	local09, #1
0cb0c     13 37 02 F1 | 	add	local09, local01
0cb10     02 36 66 F0 | 	shl	local09, #2
0cb14     03 00 00 FF 
0cb18     00 E4 85 F1 | 	sub	objptr, ##1536
0cb1c     F2 36 02 F1 | 	add	local09, objptr
0cb20     1B 31 62 FC | 	wrlong	local06, local09
0cb24     03 00 00 FF 
0cb28     00 E4 05 F1 | 	add	objptr, ##1536
0cb2c     F2 36 02 FB | 	rdlong	local09, objptr
0cb30     1B 31 02 F6 | 	mov	local06, local09
0cb34     01 30 66 F0 | 	shl	local06, #1
0cb38     1B 31 02 F1 | 	add	local06, local09
0cb3c     02 30 66 F0 | 	shl	local06, #2
0cb40     03 00 00 FF 
0cb44     00 E4 85 F1 | 	sub	objptr, ##1536
0cb48     F2 30 02 F1 | 	add	local06, objptr
0cb4c     04 30 06 F1 | 	add	local06, #4
0cb50     18 33 62 FC | 	wrlong	local07, local06
0cb54     03 00 00 FF 
0cb58     00 E4 05 F1 | 	add	objptr, ##1536
0cb5c     F2 36 02 FB | 	rdlong	local09, objptr
0cb60     1B 33 02 F6 | 	mov	local07, local09
0cb64     01 32 66 F0 | 	shl	local07, #1
0cb68     1B 33 02 F1 | 	add	local07, local09
0cb6c     02 32 66 F0 | 	shl	local07, #2
0cb70     03 00 00 FF 
0cb74     00 E4 85 F1 | 	sub	objptr, ##1536
0cb78     F2 32 02 F1 | 	add	local07, objptr
0cb7c     08 32 06 F1 | 	add	local07, #8
0cb80     19 2F 62 FC | 	wrlong	local05, local07
0cb84     03 00 00 FF 
0cb88     00 E4 05 F1 | 	add	objptr, ##1536
0cb8c     F2 30 02 FB | 	rdlong	local06, objptr
0cb90     01 30 06 F1 | 	add	local06, #1
0cb94     F2 30 62 FC | 	wrlong	local06, objptr
0cb98     13 00 00 FF 
0cb9c     38 E4 85 F1 | 	sub	objptr, ##9784
0cba0     F2 30 02 FB | 	rdlong	local06, objptr
0cba4     01 30 06 F1 | 	add	local06, #1
0cba8     F2 30 62 FC | 	wrlong	local06, objptr
0cbac     37 00 00 FF 
0cbb0     64 E4 85 F1 | 	sub	objptr, ##28260
0cbb4     B4 03 90 FD | 	jmp	#LR__1043
0cbb8                 | LR__1034
0cbb8     37 00 00 FF 
0cbbc     64 E4 05 F1 | 	add	objptr, ##28260
0cbc0     F2 16 02 FB | 	rdlong	arg03, objptr
0cbc4     03 16 66 F0 | 	shl	arg03, #3
0cbc8     02 00 00 FF 
0cbcc     38 E4 85 F1 | 	sub	objptr, ##1080
0cbd0     F2 16 02 F1 | 	add	arg03, objptr
0cbd4     0B 13 02 FB | 	rdlong	arg01, arg03
0cbd8     35 00 00 FF 
0cbdc     2C E4 85 F1 | 	sub	objptr, ##27180
0cbe0     09 35 02 F6 | 	mov	local08, arg01
0cbe4     97 06 48 FB | 	callpa	#(@LR__1036-@LR__1035)>>2,fcache_load_ptr_
0cbe8                 | LR__1035
0cbe8     1A FB C9 FA | 	rdbyte	result1, local08 wz
0cbec     01 34 06 51 |  if_ne	add	local08, #1
0cbf0     F4 FF 9F 5D |  if_ne	jmp	#LR__1035
0cbf4                 | LR__1036
0cbf4     09 35 82 F1 | 	sub	local08, arg01
0cbf8     1A FB 01 F6 | 	mov	result1, local08
0cbfc     52 00 00 FF 
0cc00     48 E5 05 F1 | 	add	objptr, ##42312
0cc04     F2 FA 61 FC | 	wrlong	result1, objptr
0cc08     58 E4 85 F1 | 	sub	objptr, #88
0cc0c     F2 12 02 FB | 	rdlong	arg01, objptr
0cc10     FD 12 82 F1 | 	sub	arg01, result1
0cc14     04 12 86 F1 | 	sub	arg01, #4
0cc18     03 12 26 F5 | 	andn	arg01, #3
0cc1c     F2 12 62 FC | 	wrlong	arg01, objptr
0cc20     58 E4 05 F1 | 	add	objptr, #88
0cc24     F2 14 02 FB | 	rdlong	arg02, objptr
0cc28     52 00 00 FF 
0cc2c     48 E5 85 F1 | 	sub	objptr, ##42312
0cc30     28 7C B1 FD | 	call	#_pslpoke
0cc34                 | '     pslpoke memtop,l
0cc34                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0cc34     01 38 06 F6 | 	mov	local10, #1
0cc38     52 00 00 FF 
0cc3c     48 E5 05 F1 | 	add	objptr, ##42312
0cc40     F2 3A 02 FB | 	rdlong	local11, objptr
0cc44     52 00 00 FF 
0cc48     48 E5 85 F1 | 	sub	objptr, ##42312
0cc4c     01 3A 06 F1 | 	add	local11, #1
0cc50                 | LR__1037
0cc50     1D 39 52 F2 | 	cmps	local10, local11 wc
0cc54     5C 00 90 3D |  if_ae	jmp	#LR__1038
0cc58     52 00 00 FF 
0cc5c     F0 E4 05 F1 | 	add	objptr, ##42224
0cc60     F2 32 02 FB | 	rdlong	local07, objptr
0cc64     03 32 06 F1 | 	add	local07, #3
0cc68     1C 33 02 F1 | 	add	local07, local10
0cc6c     1B 00 00 FF 
0cc70     8C E4 85 F1 | 	sub	objptr, ##13964
0cc74     F2 36 02 FB | 	rdlong	local09, objptr
0cc78     03 36 66 F0 | 	shl	local09, #3
0cc7c     02 00 00 FF 
0cc80     38 E4 85 F1 | 	sub	objptr, ##1080
0cc84     F2 36 02 F1 | 	add	local09, objptr
0cc88     1B 13 02 FB | 	rdlong	arg01, local09
0cc8c     1C 15 02 F6 | 	mov	arg02, local10
0cc90     01 16 06 F6 | 	mov	arg03, #1
0cc94     35 00 00 FF 
0cc98     2C E4 85 F1 | 	sub	objptr, ##27180
0cc9c     08 D6 B1 FD | 	call	#__system__Mid_S
0cca0     FD 14 C2 FA | 	rdbyte	arg02, result1
0cca4     19 13 02 F6 | 	mov	arg01, local07
0cca8     40 7C B1 FD | 	call	#_pspoke
0ccac     01 38 06 F1 | 	add	local10, #1
0ccb0     9C FF 9F FD | 	jmp	#LR__1037
0ccb4                 | LR__1038
0ccb4     52 00 00 FF 
0ccb8     F0 E4 05 F1 | 	add	objptr, ##42224
0ccbc     F2 26 02 FB | 	rdlong	local01, objptr
0ccc0     2B 2A 06 F6 | 	mov	local03, #43
0ccc4     13 31 02 F6 | 	mov	local06, local01
0ccc8     14 33 02 F6 | 	mov	local07, local02
0cccc     15 3B 02 F6 | 	mov	local11, local03
0ccd0     08 00 00 FF 
0ccd4     54 E4 85 F1 | 	sub	objptr, ##4180
0ccd8     F2 38 02 FB | 	rdlong	local10, objptr
0ccdc     1C 37 02 F6 | 	mov	local09, local10
0cce0     01 36 66 F0 | 	shl	local09, #1
0cce4     1C 37 02 F1 | 	add	local09, local10
0cce8     02 36 66 F0 | 	shl	local09, #2
0ccec     03 00 00 FF 
0ccf0     00 E4 85 F1 | 	sub	objptr, ##1536
0ccf4     F2 36 02 F1 | 	add	local09, objptr
0ccf8     1B 31 62 FC | 	wrlong	local06, local09
0ccfc     03 00 00 FF 
0cd00     00 E4 05 F1 | 	add	objptr, ##1536
0cd04     F2 38 02 FB | 	rdlong	local10, objptr
0cd08     1C 37 02 F6 | 	mov	local09, local10
0cd0c     01 36 66 F0 | 	shl	local09, #1
0cd10     1C 37 02 F1 | 	add	local09, local10
0cd14     02 36 66 F0 | 	shl	local09, #2
0cd18     03 00 00 FF 
0cd1c     00 E4 85 F1 | 	sub	objptr, ##1536
0cd20     F2 36 02 F1 | 	add	local09, objptr
0cd24     04 36 06 F1 | 	add	local09, #4
0cd28     1B 33 62 FC | 	wrlong	local07, local09
0cd2c     03 00 00 FF 
0cd30     00 E4 05 F1 | 	add	objptr, ##1536
0cd34     F2 38 02 FB | 	rdlong	local10, objptr
0cd38     1C 37 02 F6 | 	mov	local09, local10
0cd3c     01 36 66 F0 | 	shl	local09, #1
0cd40     1C 37 02 F1 | 	add	local09, local10
0cd44     02 36 66 F0 | 	shl	local09, #2
0cd48     03 00 00 FF 
0cd4c     00 E4 85 F1 | 	sub	objptr, ##1536
0cd50     F2 36 02 F1 | 	add	local09, objptr
0cd54     08 36 06 F1 | 	add	local09, #8
0cd58     1B 3B 62 FC | 	wrlong	local11, local09
0cd5c     03 00 00 FF 
0cd60     00 E4 05 F1 | 	add	objptr, ##1536
0cd64     F2 30 02 FB | 	rdlong	local06, objptr
0cd68     01 30 06 F1 | 	add	local06, #1
0cd6c     F2 30 62 FC | 	wrlong	local06, objptr
0cd70     13 00 00 FF 
0cd74     38 E4 85 F1 | 	sub	objptr, ##9784
0cd78     F2 30 02 FB | 	rdlong	local06, objptr
0cd7c     01 30 06 F1 | 	add	local06, #1
0cd80     F2 30 62 FC | 	wrlong	local06, objptr
0cd84     37 00 00 FF 
0cd88     64 E4 85 F1 | 	sub	objptr, ##28260
0cd8c     DC 01 90 FD | 	jmp	#LR__1043
0cd90                 | LR__1039
0cd90     2C 2A 06 F6 | 	mov	local03, #44
0cd94     37 00 00 FF 
0cd98     64 E4 05 F1 | 	add	objptr, ##28260
0cd9c     F2 30 02 FB | 	rdlong	local06, objptr
0cda0     03 30 66 F0 | 	shl	local06, #3
0cda4     02 00 00 FF 
0cda8     38 E4 85 F1 | 	sub	objptr, ##1080
0cdac     F2 30 02 F1 | 	add	local06, objptr
0cdb0     18 13 02 FB | 	rdlong	arg01, local06
0cdb4     00 14 06 F6 | 	mov	arg02, #0
0cdb8     35 00 00 FF 
0cdbc     2C E4 85 F1 | 	sub	objptr, ##27180
0cdc0     40 E8 B1 FD | 	call	#__system____builtin_atoi
0cdc4     FD 26 02 F6 | 	mov	local01, result1
0cdc8     13 31 02 F6 | 	mov	local06, local01
0cdcc     14 33 02 F6 | 	mov	local07, local02
0cdd0     15 3B 02 F6 | 	mov	local11, local03
0cdd4     4A 00 00 FF 
0cdd8     9C E4 05 F1 | 	add	objptr, ##38044
0cddc     F2 38 02 FB | 	rdlong	local10, objptr
0cde0     1C 37 02 F6 | 	mov	local09, local10
0cde4     01 36 66 F0 | 	shl	local09, #1
0cde8     1C 37 02 F1 | 	add	local09, local10
0cdec     02 36 66 F0 | 	shl	local09, #2
0cdf0     03 00 00 FF 
0cdf4     00 E4 85 F1 | 	sub	objptr, ##1536
0cdf8     F2 36 02 F1 | 	add	local09, objptr
0cdfc     1B 31 62 FC | 	wrlong	local06, local09
0ce00     03 00 00 FF 
0ce04     00 E4 05 F1 | 	add	objptr, ##1536
0ce08     F2 38 02 FB | 	rdlong	local10, objptr
0ce0c     1C 37 02 F6 | 	mov	local09, local10
0ce10     01 36 66 F0 | 	shl	local09, #1
0ce14     1C 37 02 F1 | 	add	local09, local10
0ce18     02 36 66 F0 | 	shl	local09, #2
0ce1c     03 00 00 FF 
0ce20     00 E4 85 F1 | 	sub	objptr, ##1536
0ce24     F2 36 02 F1 | 	add	local09, objptr
0ce28     04 36 06 F1 | 	add	local09, #4
0ce2c     1B 33 62 FC | 	wrlong	local07, local09
0ce30     03 00 00 FF 
0ce34     00 E4 05 F1 | 	add	objptr, ##1536
0ce38     F2 38 02 FB | 	rdlong	local10, objptr
0ce3c     1C 37 02 F6 | 	mov	local09, local10
0ce40     01 36 66 F0 | 	shl	local09, #1
0ce44     1C 37 02 F1 | 	add	local09, local10
0ce48     02 36 66 F0 | 	shl	local09, #2
0ce4c     03 00 00 FF 
0ce50     00 E4 85 F1 | 	sub	objptr, ##1536
0ce54     F2 36 02 F1 | 	add	local09, objptr
0ce58     08 36 06 F1 | 	add	local09, #8
0ce5c     1B 3B 62 FC | 	wrlong	local11, local09
0ce60     03 00 00 FF 
0ce64     00 E4 05 F1 | 	add	objptr, ##1536
0ce68     F2 30 02 FB | 	rdlong	local06, objptr
0ce6c     01 30 06 F1 | 	add	local06, #1
0ce70     F2 30 62 FC | 	wrlong	local06, objptr
0ce74     13 00 00 FF 
0ce78     38 E4 85 F1 | 	sub	objptr, ##9784
0ce7c     F2 30 02 FB | 	rdlong	local06, objptr
0ce80     01 30 06 F1 | 	add	local06, #1
0ce84     F2 30 62 FC | 	wrlong	local06, objptr
0ce88     37 00 00 FF 
0ce8c     64 E4 85 F1 | 	sub	objptr, ##28260
0ce90     D8 00 90 FD | 	jmp	#LR__1043
0ce94                 | LR__1040
0ce94     16 13 02 F6 | 	mov	arg01, local04
0ce98     24 04 B0 FD | 	call	#_getvar
0ce9c     37 00 00 FF 
0cea0     64 E4 05 F1 | 	add	objptr, ##28260
0cea4     F2 30 02 FB | 	rdlong	local06, objptr
0cea8     01 30 06 F1 | 	add	local06, #1
0ceac     F2 30 62 FC | 	wrlong	local06, objptr
0ceb0     37 00 00 FF 
0ceb4     64 E4 85 F1 | 	sub	objptr, ##28260
0ceb8                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0ceb8     01 FA 55 F2 | 	cmps	result1, #1 wc
0cebc     B0 00 90 3D |  if_ae	jmp	#LR__1044
0cec0     A8 00 90 FD | 	jmp	#LR__1043
0cec4                 | LR__1041
0cec4     37 00 00 FF 
0cec8     64 E4 05 F1 | 	add	objptr, ##28260
0cecc     F2 30 02 FB | 	rdlong	local06, objptr
0ced0     01 30 06 F1 | 	add	local06, #1
0ced4     F2 30 62 FC | 	wrlong	local06, objptr
0ced8     37 00 00 FF 
0cedc     64 E4 85 F1 | 	sub	objptr, ##28260
0cee0     20 F1 BF FD | 	call	#_expr
0cee4                 | '     ct+=1
0cee4                 | '     err=expr() : if err>0 then return err 
0cee4     01 FA 55 F2 | 	cmps	result1, #1 wc
0cee8     84 00 90 3D |  if_ae	jmp	#LR__1044
0ceec                 | '     if lparts(ct).token=token_rpar then ct+=1
0ceec     37 00 00 FF 
0cef0     64 E4 05 F1 | 	add	objptr, ##28260
0cef4     F2 3A 02 FB | 	rdlong	local11, objptr
0cef8     03 3A 66 F0 | 	shl	local11, #3
0cefc     02 00 00 FF 
0cf00     38 E4 85 F1 | 	sub	objptr, ##1080
0cf04     F2 3A 02 F1 | 	add	local11, objptr
0cf08     04 3A 06 F1 | 	add	local11, #4
0cf0c     1D 3B 02 FB | 	rdlong	local11, local11
0cf10     14 3A 0E F2 | 	cmp	local11, #20 wz
0cf14     35 00 00 FF 
0cf18     2C E4 85 F1 | 	sub	objptr, ##27180
0cf1c     4C 00 90 5D |  if_ne	jmp	#LR__1043
0cf20     37 00 00 FF 
0cf24     64 E4 05 F1 | 	add	objptr, ##28260
0cf28     F2 30 02 FB | 	rdlong	local06, objptr
0cf2c     01 30 06 F1 | 	add	local06, #1
0cf30     F2 30 62 FC | 	wrlong	local06, objptr
0cf34     37 00 00 FF 
0cf38     64 E4 85 F1 | 	sub	objptr, ##28260
0cf3c     2C 00 90 FD | 	jmp	#LR__1043
0cf40                 | LR__1042
0cf40     16 13 02 F6 | 	mov	arg01, local04
0cf44     34 00 B0 FD | 	call	#_getfun
0cf48     37 00 00 FF 
0cf4c     64 E4 05 F1 | 	add	objptr, ##28260
0cf50     F2 30 02 FB | 	rdlong	local06, objptr
0cf54     01 30 06 F1 | 	add	local06, #1
0cf58     F2 30 62 FC | 	wrlong	local06, objptr
0cf5c     37 00 00 FF 
0cf60     64 E4 85 F1 | 	sub	objptr, ##28260
0cf64                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cf64     01 FA 55 F2 | 	cmps	result1, #1 wc
0cf68     04 00 90 3D |  if_ae	jmp	#LR__1044
0cf6c                 | LR__1043
0cf6c                 | ' return 0  
0cf6c     00 FA 05 F6 | 	mov	result1, #0
0cf70                 | LR__1044
0cf70     A7 F0 03 F6 | 	mov	ptra, fp
0cf74     B2 00 A0 FD | 	call	#popregs_
0cf78                 | _getvalue_ret
0cf78     2D 00 64 FD | 	ret
0cf7c                 | 
0cf7c                 | ' 
0cf7c                 | ' ' Get a function result 
0cf7c                 | ' 
0cf7c                 | ' function getfun(m as integer) as ulong
0cf7c                 | _getfun
0cf7c     0F 4A 05 F6 | 	mov	COUNT_, #15
0cf80     A8 00 A0 FD | 	call	#pushregs_
0cf84                 | _getfun_enter
0cf84     09 2D 02 F6 | 	mov	local04, arg01
0cf88     37 00 00 FF 
0cf8c     64 E4 05 F1 | 	add	objptr, ##28260
0cf90     F2 2E 02 FB | 	rdlong	local05, objptr
0cf94     17 31 02 F6 | 	mov	local06, local05
0cf98     00 32 06 F6 | 	mov	local07, #0
0cf9c                 | ' oldct=ct
0cf9c                 | ' numpar=0
0cf9c                 | ' if lparts(ct+1).token=token_lpar then
0cf9c     01 2E 06 F1 | 	add	local05, #1
0cfa0     03 2E 66 F0 | 	shl	local05, #3
0cfa4     02 00 00 FF 
0cfa8     38 E4 85 F1 | 	sub	objptr, ##1080
0cfac     F2 2E 02 F1 | 	add	local05, objptr
0cfb0     04 2E 06 F1 | 	add	local05, #4
0cfb4     17 2F 02 FB | 	rdlong	local05, local05
0cfb8     15 2E 0E F2 | 	cmp	local05, #21 wz
0cfbc     35 00 00 FF 
0cfc0     2C E4 85 F1 | 	sub	objptr, ##27180
0cfc4     54 01 90 5D |  if_ne	jmp	#LR__1054
0cfc8     37 00 00 FF 
0cfcc     64 E4 05 F1 | 	add	objptr, ##28260
0cfd0     F2 34 02 FB | 	rdlong	local08, objptr
0cfd4     01 34 06 F1 | 	add	local08, #1
0cfd8     F2 34 62 FC | 	wrlong	local08, objptr
0cfdc     37 00 00 FF 
0cfe0     64 E4 85 F1 | 	sub	objptr, ##28260
0cfe4                 | '   ct+=1 											' omit this lpar, this is for expr list
0cfe4                 | '   do
0cfe4                 | LR__1050
0cfe4     37 00 00 FF 
0cfe8     64 E4 05 F1 | 	add	objptr, ##28260
0cfec     F2 2E 02 FB | 	rdlong	local05, objptr
0cff0     01 2E 06 F1 | 	add	local05, #1
0cff4     F2 2E 62 FC | 	wrlong	local05, objptr
0cff8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cff8                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cff8     03 2E 66 F0 | 	shl	local05, #3
0cffc     02 00 00 FF 
0d000     38 E4 85 F1 | 	sub	objptr, ##1080
0d004     F2 2E 02 F1 | 	add	local05, objptr
0d008     04 2E 06 F1 | 	add	local05, #4
0d00c     17 35 02 FB | 	rdlong	local08, local05
0d010     15 34 0E F2 | 	cmp	local08, #21 wz
0d014     35 00 00 FF 
0d018     2C E4 85 F1 | 	sub	objptr, ##27180
0d01c     44 00 90 5D |  if_ne	jmp	#LR__1051
0d020     37 00 00 FF 
0d024     64 E4 05 F1 | 	add	objptr, ##28260
0d028     F2 34 02 FB | 	rdlong	local08, objptr
0d02c     01 34 06 F1 | 	add	local08, #1
0d030     F2 34 62 FC | 	wrlong	local08, objptr
0d034     37 00 00 FF 
0d038     64 E4 85 F1 | 	sub	objptr, ##28260
0d03c     C4 EF BF FD | 	call	#_expr
0d040     FD 36 02 F6 | 	mov	local09, result1
0d044     37 00 00 FF 
0d048     64 E4 05 F1 | 	add	objptr, ##28260
0d04c     F2 34 02 FB | 	rdlong	local08, objptr
0d050     01 34 06 F1 | 	add	local08, #1
0d054     F2 34 62 FC | 	wrlong	local08, objptr
0d058     37 00 00 FF 
0d05c     64 E4 85 F1 | 	sub	objptr, ##28260
0d060     08 00 90 FD | 	jmp	#LR__1052
0d064                 | LR__1051
0d064     9C EF BF FD | 	call	#_expr
0d068     FD 36 02 F6 | 	mov	local09, result1
0d06c                 | LR__1052
0d06c                 | '     if err>0 then return err
0d06c     01 36 16 F2 | 	cmp	local09, #1 wc
0d070     1B FB 01 36 |  if_ae	mov	result1, local09
0d074     3C 02 90 3D |  if_ae	jmp	#LR__1056
0d078     01 32 06 F1 | 	add	local07, #1
0d07c     37 00 00 FF 
0d080     64 E4 05 F1 | 	add	objptr, ##28260
0d084     F2 2E 02 FB | 	rdlong	local05, objptr
0d088     03 2E 66 F0 | 	shl	local05, #3
0d08c     02 00 00 FF 
0d090     38 E4 85 F1 | 	sub	objptr, ##1080
0d094     F2 2E 02 F1 | 	add	local05, objptr
0d098     04 2E 06 F1 | 	add	local05, #4
0d09c     17 37 02 FB | 	rdlong	local09, local05
0d0a0     14 36 0E F2 | 	cmp	local09, #20 wz
0d0a4     35 00 00 FF 
0d0a8     2C E4 85 F1 | 	sub	objptr, ##27180
0d0ac     34 00 90 AD |  if_e	jmp	#LR__1053
0d0b0     37 00 00 FF 
0d0b4     64 E4 05 F1 | 	add	objptr, ##28260
0d0b8     F2 36 02 FB | 	rdlong	local09, objptr
0d0bc     03 36 66 F0 | 	shl	local09, #3
0d0c0     02 00 00 FF 
0d0c4     38 E4 85 F1 | 	sub	objptr, ##1080
0d0c8     F2 36 02 F1 | 	add	local09, objptr
0d0cc     04 36 06 F1 | 	add	local09, #4
0d0d0     1B 37 02 FB | 	rdlong	local09, local09
0d0d4     FE 37 0E F2 | 	cmp	local09, #510 wz
0d0d8     35 00 00 FF 
0d0dc     2C E4 85 F1 | 	sub	objptr, ##27180
0d0e0     00 FF 9F 5D |  if_ne	jmp	#LR__1050
0d0e4                 | LR__1053
0d0e4                 | '   if lparts(ct).token=token_end then return 14
0d0e4     37 00 00 FF 
0d0e8     64 E4 05 F1 | 	add	objptr, ##28260
0d0ec     F2 2E 02 FB | 	rdlong	local05, objptr
0d0f0     03 2E 66 F0 | 	shl	local05, #3
0d0f4     02 00 00 FF 
0d0f8     38 E4 85 F1 | 	sub	objptr, ##1080
0d0fc     F2 2E 02 F1 | 	add	local05, objptr
0d100     04 2E 06 F1 | 	add	local05, #4
0d104     17 37 02 FB | 	rdlong	local09, local05
0d108     FE 37 0E F2 | 	cmp	local09, #510 wz
0d10c     35 00 00 FF 
0d110     2C E4 85 F1 | 	sub	objptr, ##27180
0d114     0E FA 05 A6 |  if_e	mov	result1, #14
0d118     98 01 90 AD |  if_e	jmp	#LR__1056
0d11c                 | LR__1054
0d11c     19 27 02 F6 | 	mov	local01, local07
0d120     03 30 66 F0 | 	shl	local06, #3
0d124     35 00 00 FF 
0d128     2C E4 05 F1 | 	add	objptr, ##27180
0d12c     F2 30 02 F1 | 	add	local06, objptr
0d130     04 30 06 F1 | 	add	local06, #4
0d134     18 2B 02 FB | 	rdlong	local03, local06
0d138     13 35 02 F6 | 	mov	local08, local01
0d13c     14 39 02 F6 | 	mov	local10, local02
0d140     15 3B 02 F6 | 	mov	local11, local03
0d144     15 00 00 FF 
0d148     70 E4 05 F1 | 	add	objptr, ##10864
0d14c     F2 3C 02 FB | 	rdlong	local12, objptr
0d150     1E 3F 02 F6 | 	mov	local13, local12
0d154     01 3E 66 F0 | 	shl	local13, #1
0d158     1E 3F 02 F1 | 	add	local13, local12
0d15c     02 3E 66 F0 | 	shl	local13, #2
0d160     03 00 00 FF 
0d164     00 E4 85 F1 | 	sub	objptr, ##1536
0d168     F2 3E 02 F1 | 	add	local13, objptr
0d16c     1F 35 62 FC | 	wrlong	local08, local13
0d170     03 00 00 FF 
0d174     00 E4 05 F1 | 	add	objptr, ##1536
0d178     F2 34 02 FB | 	rdlong	local08, objptr
0d17c     1A 41 02 F6 | 	mov	local14, local08
0d180     01 40 66 F0 | 	shl	local14, #1
0d184     1A 41 02 F1 | 	add	local14, local08
0d188     02 40 66 F0 | 	shl	local14, #2
0d18c     03 00 00 FF 
0d190     00 E4 85 F1 | 	sub	objptr, ##1536
0d194     F2 40 02 F1 | 	add	local14, objptr
0d198     04 40 06 F1 | 	add	local14, #4
0d19c     20 39 62 FC | 	wrlong	local10, local14
0d1a0     03 00 00 FF 
0d1a4     00 E4 05 F1 | 	add	objptr, ##1536
0d1a8     F2 34 02 FB | 	rdlong	local08, objptr
0d1ac     1A 43 02 F6 | 	mov	local15, local08
0d1b0     01 42 66 F0 | 	shl	local15, #1
0d1b4     1A 43 02 F1 | 	add	local15, local08
0d1b8     02 42 66 F0 | 	shl	local15, #2
0d1bc     03 00 00 FF 
0d1c0     00 E4 85 F1 | 	sub	objptr, ##1536
0d1c4     F2 42 02 F1 | 	add	local15, objptr
0d1c8     08 42 06 F1 | 	add	local15, #8
0d1cc     21 3B 62 FC | 	wrlong	local11, local15
0d1d0     03 00 00 FF 
0d1d4     00 E4 05 F1 | 	add	objptr, ##1536
0d1d8     F2 34 02 FB | 	rdlong	local08, objptr
0d1dc     01 34 06 F1 | 	add	local08, #1
0d1e0     F2 34 62 FC | 	wrlong	local08, objptr
0d1e4     4A 00 00 FF 
0d1e8     9C E4 85 F1 | 	sub	objptr, ##38044
0d1ec                 | ' t2.result.uresult=numpar
0d1ec                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d1ec                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d1ec                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d1ec     FF FF 7F FF 
0d1f0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d1f4     B8 00 90 5D |  if_ne	jmp	#LR__1055
0d1f8     15 2A 06 F6 | 	mov	local03, #21
0d1fc     13 35 02 F6 | 	mov	local08, local01
0d200     14 39 02 F6 | 	mov	local10, local02
0d204     15 3B 02 F6 | 	mov	local11, local03
0d208     4A 00 00 FF 
0d20c     9C E4 05 F1 | 	add	objptr, ##38044
0d210     F2 3C 02 FB | 	rdlong	local12, objptr
0d214     1E 3F 02 F6 | 	mov	local13, local12
0d218     01 3E 66 F0 | 	shl	local13, #1
0d21c     1E 3F 02 F1 | 	add	local13, local12
0d220     02 3E 66 F0 | 	shl	local13, #2
0d224     03 00 00 FF 
0d228     00 E4 85 F1 | 	sub	objptr, ##1536
0d22c     F2 3E 02 F1 | 	add	local13, objptr
0d230     1F 35 62 FC | 	wrlong	local08, local13
0d234     03 00 00 FF 
0d238     00 E4 05 F1 | 	add	objptr, ##1536
0d23c     F2 42 02 FB | 	rdlong	local15, objptr
0d240     21 41 02 F6 | 	mov	local14, local15
0d244     01 40 66 F0 | 	shl	local14, #1
0d248     21 41 02 F1 | 	add	local14, local15
0d24c     02 40 66 F0 | 	shl	local14, #2
0d250     03 00 00 FF 
0d254     00 E4 85 F1 | 	sub	objptr, ##1536
0d258     F2 40 02 F1 | 	add	local14, objptr
0d25c     04 40 06 F1 | 	add	local14, #4
0d260     20 39 62 FC | 	wrlong	local10, local14
0d264     03 00 00 FF 
0d268     00 E4 05 F1 | 	add	objptr, ##1536
0d26c     F2 40 02 FB | 	rdlong	local14, objptr
0d270     20 43 02 F6 | 	mov	local15, local14
0d274     01 42 66 F0 | 	shl	local15, #1
0d278     20 43 02 F1 | 	add	local15, local14
0d27c     02 42 66 F0 | 	shl	local15, #2
0d280     03 00 00 FF 
0d284     00 E4 85 F1 | 	sub	objptr, ##1536
0d288     F2 42 02 F1 | 	add	local15, objptr
0d28c     08 42 06 F1 | 	add	local15, #8
0d290     21 3B 62 FC | 	wrlong	local11, local15
0d294     03 00 00 FF 
0d298     00 E4 05 F1 | 	add	objptr, ##1536
0d29c     F2 34 02 FB | 	rdlong	local08, objptr
0d2a0     01 34 06 F1 | 	add	local08, #1
0d2a4     F2 34 62 FC | 	wrlong	local08, objptr
0d2a8     4A 00 00 FF 
0d2ac     9C E4 85 F1 | 	sub	objptr, ##38044
0d2b0                 | LR__1055
0d2b0                 | ' return 0
0d2b0     00 FA 05 F6 | 	mov	result1, #0
0d2b4                 | LR__1056
0d2b4     A7 F0 03 F6 | 	mov	ptra, fp
0d2b8     B2 00 A0 FD | 	call	#popregs_
0d2bc                 | _getfun_ret
0d2bc     2D 00 64 FD | 	ret
0d2c0                 | 
0d2c0                 | '   
0d2c0                 | '   
0d2c0                 | ' function getvar(m as integer) as ulong
0d2c0                 | _getvar
0d2c0     11 4A 05 F6 | 	mov	COUNT_, #17
0d2c4     A8 00 A0 FD | 	call	#pushregs_
0d2c8                 | _getvar_enter
0d2c8     09 2D 02 F6 | 	mov	local04, arg01
0d2cc     37 00 00 FF 
0d2d0     64 E4 05 F1 | 	add	objptr, ##28260
0d2d4     F2 2E 02 FB | 	rdlong	local05, objptr
0d2d8     03 2E 66 F0 | 	shl	local05, #3
0d2dc     02 00 00 FF 
0d2e0     38 E4 85 F1 | 	sub	objptr, ##1080
0d2e4     F2 2E 02 F1 | 	add	local05, objptr
0d2e8     17 31 02 FB | 	rdlong	local06, local05
0d2ec     01 32 66 F6 | 	neg	local07, #1
0d2f0                 | ' 
0d2f0                 | ' varname$=lparts(ct).part$
0d2f0                 | ' j=-1
0d2f0                 | ' 
0d2f0                 | ' for i=0 to varnum-1
0d2f0     00 34 06 F6 | 	mov	local08, #0
0d2f4     04 E4 85 F1 | 	sub	objptr, #4
0d2f8     F2 36 02 FB | 	rdlong	local09, objptr
0d2fc     35 00 00 FF 
0d300     28 E4 85 F1 | 	sub	objptr, ##27176
0d304                 | LR__1060
0d304     1B 35 52 F2 | 	cmps	local08, local09 wc
0d308     38 00 90 3D |  if_ae	jmp	#LR__1061
0d30c                 | '   if variables(i).name=varname$ then j=i : exit
0d30c     1A 2F 02 F6 | 	mov	local05, local08
0d310     04 2E 66 F0 | 	shl	local05, #4
0d314     15 00 00 FF 
0d318     18 E4 05 F1 | 	add	objptr, ##10776
0d31c     F2 2E 02 F1 | 	add	local05, objptr
0d320     17 13 02 FB | 	rdlong	arg01, local05
0d324     18 15 02 F6 | 	mov	arg02, local06
0d328     15 00 00 FF 
0d32c     18 E4 85 F1 | 	sub	objptr, ##10776
0d330     04 AE B1 FD | 	call	#__system___string_cmp
0d334     00 FA 0D F2 | 	cmp	result1, #0 wz
0d338     1A 33 02 A6 |  if_e	mov	local07, local08
0d33c     01 34 06 51 |  if_ne	add	local08, #1
0d340     C0 FF 9F 5D |  if_ne	jmp	#LR__1060
0d344                 | LR__1061
0d344                 | ' if  j=-1 andalso varnum<maxvars then   
0d344     FF FF 7F FF 
0d348     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d34c     A8 00 90 5D |  if_ne	jmp	#LR__1062
0d350     35 00 00 FF 
0d354     28 E4 05 F1 | 	add	objptr, ##27176
0d358     F2 36 02 FB | 	rdlong	local09, objptr
0d35c     35 00 00 FF 
0d360     28 E4 85 F1 | 	sub	objptr, ##27176
0d364     02 00 00 FF 
0d368     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d36c     88 00 90 3D |  if_ae	jmp	#LR__1062
0d370     35 00 00 FF 
0d374     28 E4 05 F1 | 	add	objptr, ##27176
0d378     F2 2E 02 FB | 	rdlong	local05, objptr
0d37c     04 2E 66 F0 | 	shl	local05, #4
0d380     20 00 00 FF 
0d384     10 E4 85 F1 | 	sub	objptr, ##16400
0d388     F2 2E 02 F1 | 	add	local05, objptr
0d38c     17 31 62 FC | 	wrlong	local06, local05
0d390     20 00 00 FF 
0d394     10 E4 05 F1 | 	add	objptr, ##16400
0d398     F2 2E 02 FB | 	rdlong	local05, objptr
0d39c     04 2E 66 F0 | 	shl	local05, #4
0d3a0     20 00 00 FF 
0d3a4     10 E4 85 F1 | 	sub	objptr, ##16400
0d3a8     F2 2E 02 F1 | 	add	local05, objptr
0d3ac     04 2E 06 F1 | 	add	local05, #4
0d3b0     17 01 68 FC | 	wrlong	#0, local05
0d3b4     20 00 00 FF 
0d3b8     10 E4 05 F1 | 	add	objptr, ##16400
0d3bc     F2 2E 02 FB | 	rdlong	local05, objptr
0d3c0     04 2E 66 F0 | 	shl	local05, #4
0d3c4     20 00 00 FF 
0d3c8     10 E4 85 F1 | 	sub	objptr, ##16400
0d3cc     F2 2E 02 F1 | 	add	local05, objptr
0d3d0     0C 2E 06 F1 | 	add	local05, #12
0d3d4     17 39 68 FC | 	wrlong	#28, local05
0d3d8     20 00 00 FF 
0d3dc     10 E4 05 F1 | 	add	objptr, ##16400
0d3e0     F2 36 02 FB | 	rdlong	local09, objptr
0d3e4     1B 33 02 F6 | 	mov	local07, local09
0d3e8     01 36 06 F1 | 	add	local09, #1
0d3ec     F2 36 62 FC | 	wrlong	local09, objptr
0d3f0     35 00 00 FF 
0d3f4     28 E4 85 F1 | 	sub	objptr, ##27176
0d3f8                 | LR__1062
0d3f8     00 36 06 F6 | 	mov	local09, #0
0d3fc                 | ' numpar=0
0d3fc                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d3fc     37 00 00 FF 
0d400     64 E4 05 F1 | 	add	objptr, ##28260
0d404     F2 2E 02 FB | 	rdlong	local05, objptr
0d408     01 2E 06 F1 | 	add	local05, #1
0d40c     03 2E 66 F0 | 	shl	local05, #3
0d410     02 00 00 FF 
0d414     38 E4 85 F1 | 	sub	objptr, ##1080
0d418     F2 2E 02 F1 | 	add	local05, objptr
0d41c     04 2E 06 F1 | 	add	local05, #4
0d420     17 35 02 FB | 	rdlong	local08, local05
0d424     15 34 0E F2 | 	cmp	local08, #21 wz
0d428     35 00 00 FF 
0d42c     2C E4 85 F1 | 	sub	objptr, ##27180
0d430     54 01 90 5D |  if_ne	jmp	#LR__1067
0d434     37 00 00 FF 
0d438     64 E4 05 F1 | 	add	objptr, ##28260
0d43c     F2 38 02 FB | 	rdlong	local10, objptr
0d440     01 38 06 F1 | 	add	local10, #1
0d444     F2 38 62 FC | 	wrlong	local10, objptr
0d448     37 00 00 FF 
0d44c     64 E4 85 F1 | 	sub	objptr, ##28260
0d450                 | '   ct+=1 											' omit this lpar, this is for expr list
0d450                 | '   do
0d450                 | LR__1063
0d450     37 00 00 FF 
0d454     64 E4 05 F1 | 	add	objptr, ##28260
0d458     F2 2E 02 FB | 	rdlong	local05, objptr
0d45c     01 2E 06 F1 | 	add	local05, #1
0d460     F2 2E 62 FC | 	wrlong	local05, objptr
0d464                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d464                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d464     03 2E 66 F0 | 	shl	local05, #3
0d468     02 00 00 FF 
0d46c     38 E4 85 F1 | 	sub	objptr, ##1080
0d470     F2 2E 02 F1 | 	add	local05, objptr
0d474     04 2E 06 F1 | 	add	local05, #4
0d478     17 39 02 FB | 	rdlong	local10, local05
0d47c     15 38 0E F2 | 	cmp	local10, #21 wz
0d480     35 00 00 FF 
0d484     2C E4 85 F1 | 	sub	objptr, ##27180
0d488     44 00 90 5D |  if_ne	jmp	#LR__1064
0d48c     37 00 00 FF 
0d490     64 E4 05 F1 | 	add	objptr, ##28260
0d494     F2 38 02 FB | 	rdlong	local10, objptr
0d498     01 38 06 F1 | 	add	local10, #1
0d49c     F2 38 62 FC | 	wrlong	local10, objptr
0d4a0     37 00 00 FF 
0d4a4     64 E4 85 F1 | 	sub	objptr, ##28260
0d4a8     58 EB BF FD | 	call	#_expr
0d4ac     FD 3A 02 F6 | 	mov	local11, result1
0d4b0     37 00 00 FF 
0d4b4     64 E4 05 F1 | 	add	objptr, ##28260
0d4b8     F2 38 02 FB | 	rdlong	local10, objptr
0d4bc     01 38 06 F1 | 	add	local10, #1
0d4c0     F2 38 62 FC | 	wrlong	local10, objptr
0d4c4     37 00 00 FF 
0d4c8     64 E4 85 F1 | 	sub	objptr, ##28260
0d4cc     08 00 90 FD | 	jmp	#LR__1065
0d4d0                 | LR__1064
0d4d0     30 EB BF FD | 	call	#_expr
0d4d4     FD 3A 02 F6 | 	mov	local11, result1
0d4d8                 | LR__1065
0d4d8                 | '     if err>0 then return err
0d4d8     01 3A 56 F2 | 	cmps	local11, #1 wc
0d4dc     1D FB 01 36 |  if_ae	mov	result1, local11
0d4e0     2C 02 90 3D |  if_ae	jmp	#LR__1069
0d4e4     01 36 06 F1 | 	add	local09, #1
0d4e8     37 00 00 FF 
0d4ec     64 E4 05 F1 | 	add	objptr, ##28260
0d4f0     F2 2E 02 FB | 	rdlong	local05, objptr
0d4f4     03 2E 66 F0 | 	shl	local05, #3
0d4f8     02 00 00 FF 
0d4fc     38 E4 85 F1 | 	sub	objptr, ##1080
0d500     F2 2E 02 F1 | 	add	local05, objptr
0d504     04 2E 06 F1 | 	add	local05, #4
0d508     17 3B 02 FB | 	rdlong	local11, local05
0d50c     14 3A 0E F2 | 	cmp	local11, #20 wz
0d510     35 00 00 FF 
0d514     2C E4 85 F1 | 	sub	objptr, ##27180
0d518     34 00 90 AD |  if_e	jmp	#LR__1066
0d51c     37 00 00 FF 
0d520     64 E4 05 F1 | 	add	objptr, ##28260
0d524     F2 3A 02 FB | 	rdlong	local11, objptr
0d528     03 3A 66 F0 | 	shl	local11, #3
0d52c     02 00 00 FF 
0d530     38 E4 85 F1 | 	sub	objptr, ##1080
0d534     F2 3A 02 F1 | 	add	local11, objptr
0d538     04 3A 06 F1 | 	add	local11, #4
0d53c     1D 3B 02 FB | 	rdlong	local11, local11
0d540     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d544     35 00 00 FF 
0d548     2C E4 85 F1 | 	sub	objptr, ##27180
0d54c     00 FF 9F 5D |  if_ne	jmp	#LR__1063
0d550                 | LR__1066
0d550                 | '     if lparts(ct).token=token_end then return 14
0d550     37 00 00 FF 
0d554     64 E4 05 F1 | 	add	objptr, ##28260
0d558     F2 2E 02 FB | 	rdlong	local05, objptr
0d55c     03 2E 66 F0 | 	shl	local05, #3
0d560     02 00 00 FF 
0d564     38 E4 85 F1 | 	sub	objptr, ##1080
0d568     F2 2E 02 F1 | 	add	local05, objptr
0d56c     04 2E 06 F1 | 	add	local05, #4
0d570     17 3B 02 FB | 	rdlong	local11, local05
0d574     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d578     35 00 00 FF 
0d57c     2C E4 85 F1 | 	sub	objptr, ##27180
0d580     0E FA 05 A6 |  if_e	mov	result1, #14
0d584     88 01 90 AD |  if_e	jmp	#LR__1069
0d588                 | LR__1067
0d588     1B 29 02 F6 | 	mov	local02, local09
0d58c     11 2A 06 F6 | 	mov	local03, #17
0d590     19 27 02 F6 | 	mov	local01, local07
0d594     13 39 02 F6 | 	mov	local10, local01
0d598     14 3D 02 F6 | 	mov	local12, local02
0d59c     15 3F 02 F6 | 	mov	local13, local03
0d5a0     4A 00 00 FF 
0d5a4     9C E4 05 F1 | 	add	objptr, ##38044
0d5a8     F2 40 02 FB | 	rdlong	local14, objptr
0d5ac     20 43 02 F6 | 	mov	local15, local14
0d5b0     01 42 66 F0 | 	shl	local15, #1
0d5b4     20 43 02 F1 | 	add	local15, local14
0d5b8     02 42 66 F0 | 	shl	local15, #2
0d5bc     03 00 00 FF 
0d5c0     00 E4 85 F1 | 	sub	objptr, ##1536
0d5c4     F2 42 02 F1 | 	add	local15, objptr
0d5c8     21 39 62 FC | 	wrlong	local10, local15
0d5cc     03 00 00 FF 
0d5d0     00 E4 05 F1 | 	add	objptr, ##1536
0d5d4     F2 38 02 FB | 	rdlong	local10, objptr
0d5d8     1C 45 02 F6 | 	mov	local16, local10
0d5dc     01 44 66 F0 | 	shl	local16, #1
0d5e0     1C 45 02 F1 | 	add	local16, local10
0d5e4     02 44 66 F0 | 	shl	local16, #2
0d5e8     03 00 00 FF 
0d5ec     00 E4 85 F1 | 	sub	objptr, ##1536
0d5f0     F2 44 02 F1 | 	add	local16, objptr
0d5f4     04 44 06 F1 | 	add	local16, #4
0d5f8     22 3D 62 FC | 	wrlong	local12, local16
0d5fc     03 00 00 FF 
0d600     00 E4 05 F1 | 	add	objptr, ##1536
0d604     F2 38 02 FB | 	rdlong	local10, objptr
0d608     1C 47 02 F6 | 	mov	local17, local10
0d60c     01 46 66 F0 | 	shl	local17, #1
0d610     1C 47 02 F1 | 	add	local17, local10
0d614     02 46 66 F0 | 	shl	local17, #2
0d618     03 00 00 FF 
0d61c     00 E4 85 F1 | 	sub	objptr, ##1536
0d620     F2 46 02 F1 | 	add	local17, objptr
0d624     08 46 06 F1 | 	add	local17, #8
0d628     23 3F 62 FC | 	wrlong	local13, local17
0d62c     03 00 00 FF 
0d630     00 E4 05 F1 | 	add	objptr, ##1536
0d634     F2 38 02 FB | 	rdlong	local10, objptr
0d638     01 38 06 F1 | 	add	local10, #1
0d63c     F2 38 62 FC | 	wrlong	local10, objptr
0d640     4A 00 00 FF 
0d644     9C E4 85 F1 | 	sub	objptr, ##38044
0d648                 | ' t2.result.twowords(1)=numpar
0d648                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d648                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d648                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d648     FF FF 7F FF 
0d64c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d650     B8 00 90 5D |  if_ne	jmp	#LR__1068
0d654     15 2A 06 F6 | 	mov	local03, #21
0d658     13 39 02 F6 | 	mov	local10, local01
0d65c     14 3D 02 F6 | 	mov	local12, local02
0d660     15 3F 02 F6 | 	mov	local13, local03
0d664     4A 00 00 FF 
0d668     9C E4 05 F1 | 	add	objptr, ##38044
0d66c     F2 40 02 FB | 	rdlong	local14, objptr
0d670     20 43 02 F6 | 	mov	local15, local14
0d674     01 42 66 F0 | 	shl	local15, #1
0d678     20 43 02 F1 | 	add	local15, local14
0d67c     02 42 66 F0 | 	shl	local15, #2
0d680     03 00 00 FF 
0d684     00 E4 85 F1 | 	sub	objptr, ##1536
0d688     F2 42 02 F1 | 	add	local15, objptr
0d68c     21 39 62 FC | 	wrlong	local10, local15
0d690     03 00 00 FF 
0d694     00 E4 05 F1 | 	add	objptr, ##1536
0d698     F2 46 02 FB | 	rdlong	local17, objptr
0d69c     23 45 02 F6 | 	mov	local16, local17
0d6a0     01 44 66 F0 | 	shl	local16, #1
0d6a4     23 45 02 F1 | 	add	local16, local17
0d6a8     02 44 66 F0 | 	shl	local16, #2
0d6ac     03 00 00 FF 
0d6b0     00 E4 85 F1 | 	sub	objptr, ##1536
0d6b4     F2 44 02 F1 | 	add	local16, objptr
0d6b8     04 44 06 F1 | 	add	local16, #4
0d6bc     22 3D 62 FC | 	wrlong	local12, local16
0d6c0     03 00 00 FF 
0d6c4     00 E4 05 F1 | 	add	objptr, ##1536
0d6c8     F2 44 02 FB | 	rdlong	local16, objptr
0d6cc     22 47 02 F6 | 	mov	local17, local16
0d6d0     01 46 66 F0 | 	shl	local17, #1
0d6d4     22 47 02 F1 | 	add	local17, local16
0d6d8     02 46 66 F0 | 	shl	local17, #2
0d6dc     03 00 00 FF 
0d6e0     00 E4 85 F1 | 	sub	objptr, ##1536
0d6e4     F2 46 02 F1 | 	add	local17, objptr
0d6e8     08 46 06 F1 | 	add	local17, #8
0d6ec     23 3F 62 FC | 	wrlong	local13, local17
0d6f0     03 00 00 FF 
0d6f4     00 E4 05 F1 | 	add	objptr, ##1536
0d6f8     F2 38 02 FB | 	rdlong	local10, objptr
0d6fc     01 38 06 F1 | 	add	local10, #1
0d700     F2 38 62 FC | 	wrlong	local10, objptr
0d704     4A 00 00 FF 
0d708     9C E4 85 F1 | 	sub	objptr, ##38044
0d70c                 | LR__1068
0d70c                 | ' return 0
0d70c     00 FA 05 F6 | 	mov	result1, #0
0d710                 | LR__1069
0d710     A7 F0 03 F6 | 	mov	ptra, fp
0d714     B2 00 A0 FD | 	call	#popregs_
0d718                 | _getvar_ret
0d718     2D 00 64 FD | 	ret
0d71c                 | 
0d71c                 | ' 
0d71c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d71c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' 
0d71c                 | ' 
0d71c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' '                                                                                                                                       -
0d71c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d71c                 | ' '                                                                                                                                       -
0d71c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' 
0d71c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d71c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' 
0d71c                 | ' function execute_line (astart=0 as integer) as integer
0d71c                 | _execute_line
0d71c     04 4A 05 F6 | 	mov	COUNT_, #4
0d720     A8 00 A0 FD | 	call	#pushregs_
0d724     50 00 00 FF 
0d728     DC E4 05 F1 | 	add	objptr, ##41180
0d72c     F2 00 68 FC | 	wrlong	#0, objptr
0d730                 | ' 
0d730                 | ' runptr2=0
0d730                 | ' for lineptr_e=astart to lineptr-1
0d730     06 00 00 FF 
0d734     3C E4 85 F1 | 	sub	objptr, ##3132
0d738     F2 12 62 FC | 	wrlong	arg01, objptr
0d73c     04 E4 85 F1 | 	sub	objptr, #4
0d740     F2 26 02 FB | 	rdlong	local01, objptr
0d744     4A 00 00 FF 
0d748     9C E4 85 F1 | 	sub	objptr, ##38044
0d74c                 | LR__1070
0d74c     4A 00 00 FF 
0d750     A0 E4 05 F1 | 	add	objptr, ##38048
0d754     F2 FA 01 FB | 	rdlong	result1, objptr
0d758     4A 00 00 FF 
0d75c     A0 E4 85 F1 | 	sub	objptr, ##38048
0d760     13 FB 51 F2 | 	cmps	result1, local01 wc
0d764     98 00 90 3D |  if_ae	jmp	#LR__1071
0d768     4A 00 00 FF 
0d76c     A0 E4 05 F1 | 	add	objptr, ##38048
0d770     F2 FA 01 FB | 	rdlong	result1, objptr
0d774     FD 28 02 F6 | 	mov	local02, result1
0d778     01 28 66 F0 | 	shl	local02, #1
0d77c     FD 28 02 F1 | 	add	local02, result1
0d780     02 28 66 F0 | 	shl	local02, #2
0d784     03 00 00 FF 
0d788     04 E4 85 F1 | 	sub	objptr, ##1540
0d78c     F2 28 02 F1 | 	add	local02, objptr
0d790     08 28 06 F1 | 	add	local02, #8
0d794     14 29 02 FB | 	rdlong	local02, local02
0d798     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d79c     02 28 66 F0 | 	shl	local02, #2
0d7a0     04 00 00 FF 
0d7a4     1C E4 85 F1 | 	sub	objptr, ##2076
0d7a8     F2 28 02 F1 | 	add	local02, objptr
0d7ac     14 29 02 FB | 	rdlong	local02, local02
0d7b0     14 2B 02 F6 | 	mov	local03, local02
0d7b4     13 28 46 F7 | 	zerox	local02, #19
0d7b8     14 2A 46 F0 | 	shr	local03, #20
0d7bc     02 2A 66 F0 | 	shl	local03, #2
0d7c0     ED 2A 02 F1 | 	add	local03, __methods__
0d7c4     15 2B 02 FB | 	rdlong	local03, local03
0d7c8     43 00 00 FF 
0d7cc     80 E4 85 F1 | 	sub	objptr, ##34432
0d7d0     F2 2C 02 F6 | 	mov	local04, objptr
0d7d4     14 E5 01 F6 | 	mov	objptr, local02
0d7d8     2D 2A 62 FD | 	call	local03
0d7dc     16 E5 01 F6 | 	mov	objptr, local04
0d7e0     4A 00 00 FF 
0d7e4     A0 E4 05 F1 | 	add	objptr, ##38048
0d7e8     F2 2C 02 FB | 	rdlong	local04, objptr
0d7ec     01 2C 06 F1 | 	add	local04, #1
0d7f0     F2 2C 62 FC | 	wrlong	local04, objptr
0d7f4     4A 00 00 FF 
0d7f8     A0 E4 85 F1 | 	sub	objptr, ##38048
0d7fc     4C FF 9F FD | 	jmp	#LR__1070
0d800                 | LR__1071
0d800                 | ' return runptr2
0d800     50 00 00 FF 
0d804     DC E4 05 F1 | 	add	objptr, ##41180
0d808     F2 FA 01 FB | 	rdlong	result1, objptr
0d80c     50 00 00 FF 
0d810     DC E4 85 F1 | 	sub	objptr, ##41180
0d814     A7 F0 03 F6 | 	mov	ptra, fp
0d818     B2 00 A0 FD | 	call	#popregs_
0d81c                 | _execute_line_ret
0d81c     2D 00 64 FD | 	ret
0d820                 | 
0d820                 | ' 
0d820                 | ' 
0d820                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d820                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d820                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d820                 | ' 
0d820                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d820                 | ' 
0d820                 | ' function pop() as expr_result
0d820                 | _pop
0d820                 | ' if stackpointer=0 then
0d820     43 00 00 FF 
0d824     78 E4 05 F1 | 	add	objptr, ##34424
0d828     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d82c     43 00 00 FF 
0d830     78 E4 85 F1 | 	sub	objptr, ##34424
0d834     FF 04 06 A6 |  if_e	mov	_var03, #255
0d838     18 00 06 A6 |  if_e	mov	_var01, #24
0d83c     68 00 90 AD |  if_e	jmp	#LR__1080
0d840     43 00 00 FF 
0d844     78 E4 05 F1 | 	add	objptr, ##34424
0d848     F2 FA 01 FB | 	rdlong	result1, objptr
0d84c     01 FA 85 F1 | 	sub	result1, #1
0d850     F2 FA 61 FC | 	wrlong	result1, objptr
0d854     FD FE 01 F6 | 	mov	result3, result1
0d858     01 FE 65 F0 | 	shl	result3, #1
0d85c     FD FE 01 F1 | 	add	result3, result1
0d860     02 FE 65 F0 | 	shl	result3, #2
0d864     0C 00 00 FF 
0d868     0C E4 85 F1 | 	sub	objptr, ##6156
0d86c     F2 FE 01 F1 | 	add	result3, objptr
0d870     FF 00 02 FB | 	rdlong	_var01, result3
0d874     04 FE 05 F1 | 	add	result3, #4
0d878     FF FE 01 FB | 	rdlong	result3, result3
0d87c     FD FC 01 F6 | 	mov	result2, result1
0d880     01 FC 65 F0 | 	shl	result2, #1
0d884     FD FC 01 F1 | 	add	result2, result1
0d888     02 FC 65 F0 | 	shl	result2, #2
0d88c     F2 FC 01 F1 | 	add	result2, objptr
0d890     08 FC 05 F1 | 	add	result2, #8
0d894     FE FA 01 FB | 	rdlong	result1, result2
0d898     FF 02 02 F6 | 	mov	_var02, result3
0d89c     FD 04 02 F6 | 	mov	_var03, result1
0d8a0     37 00 00 FF 
0d8a4     6C E4 85 F1 | 	sub	objptr, ##28268
0d8a8                 | LR__1080
0d8a8                 | ' return t1
0d8a8     01 FD 01 F6 | 	mov	result2, _var02
0d8ac     02 FF 01 F6 | 	mov	result3, _var03
0d8b0     00 FB 01 F6 | 	mov	result1, _var01
0d8b4                 | _pop_ret
0d8b4     2D 00 64 FD | 	ret
0d8b8                 | 
0d8b8                 | ' 
0d8b8                 | ' sub push(t1 as expr_result )
0d8b8                 | _push
0d8b8                 | ' if stackpointer<maxstack then 
0d8b8     43 00 00 FF 
0d8bc     78 E4 05 F1 | 	add	objptr, ##34424
0d8c0     F2 00 02 FB | 	rdlong	_var01, objptr
0d8c4     43 00 00 FF 
0d8c8     78 E4 85 F1 | 	sub	objptr, ##34424
0d8cc     01 00 00 FF 
0d8d0     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d8d4     BC 00 90 3D |  if_ae	jmp	#LR__1090
0d8d8     09 01 02 FB | 	rdlong	_var01, arg01
0d8dc     04 12 06 F1 | 	add	arg01, #4
0d8e0     09 03 02 FB | 	rdlong	_var02, arg01
0d8e4     04 12 06 F1 | 	add	arg01, #4
0d8e8     09 13 02 FB | 	rdlong	arg01, arg01
0d8ec     43 00 00 FF 
0d8f0     78 E4 05 F1 | 	add	objptr, ##34424
0d8f4     F2 04 02 FB | 	rdlong	_var03, objptr
0d8f8     02 07 02 F6 | 	mov	_var04, _var03
0d8fc     01 06 66 F0 | 	shl	_var04, #1
0d900     02 07 02 F1 | 	add	_var04, _var03
0d904     02 06 66 F0 | 	shl	_var04, #2
0d908     0C 00 00 FF 
0d90c     0C E4 85 F1 | 	sub	objptr, ##6156
0d910     F2 06 02 F1 | 	add	_var04, objptr
0d914     03 01 62 FC | 	wrlong	_var01, _var04
0d918     0C 00 00 FF 
0d91c     0C E4 05 F1 | 	add	objptr, ##6156
0d920     F2 06 02 FB | 	rdlong	_var04, objptr
0d924     03 05 02 F6 | 	mov	_var03, _var04
0d928     01 04 66 F0 | 	shl	_var03, #1
0d92c     03 05 02 F1 | 	add	_var03, _var04
0d930     02 04 66 F0 | 	shl	_var03, #2
0d934     0C 00 00 FF 
0d938     0C E4 85 F1 | 	sub	objptr, ##6156
0d93c     F2 04 02 F1 | 	add	_var03, objptr
0d940     04 04 06 F1 | 	add	_var03, #4
0d944     02 03 62 FC | 	wrlong	_var02, _var03
0d948     0C 00 00 FF 
0d94c     0C E4 05 F1 | 	add	objptr, ##6156
0d950     F2 06 02 FB | 	rdlong	_var04, objptr
0d954     03 05 02 F6 | 	mov	_var03, _var04
0d958     01 04 66 F0 | 	shl	_var03, #1
0d95c     03 05 02 F1 | 	add	_var03, _var04
0d960     02 04 66 F0 | 	shl	_var03, #2
0d964     0C 00 00 FF 
0d968     0C E4 85 F1 | 	sub	objptr, ##6156
0d96c     F2 04 02 F1 | 	add	_var03, objptr
0d970     08 04 06 F1 | 	add	_var03, #8
0d974     02 13 62 FC | 	wrlong	arg01, _var03
0d978     0C 00 00 FF 
0d97c     0C E4 05 F1 | 	add	objptr, ##6156
0d980     F2 00 02 FB | 	rdlong	_var01, objptr
0d984     01 00 06 F1 | 	add	_var01, #1
0d988     F2 00 62 FC | 	wrlong	_var01, objptr
0d98c     43 00 00 FF 
0d990     78 E4 85 F1 | 	sub	objptr, ##34424
0d994                 | LR__1090
0d994                 | _push_ret
0d994     2D 00 64 FD | 	ret
0d998                 | 
0d998                 | ' 
0d998                 | ' ' -------------------------------- Runtime converting functions
0d998                 | ' 
0d998                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d998                 | ' 
0d998                 | ' function  convertstring(psaddr as ulong) as string
0d998                 | _convertstring
0d998     04 4A 05 F6 | 	mov	COUNT_, #4
0d99c     A8 00 A0 FD | 	call	#pushregs_
0d9a0     09 27 02 F6 | 	mov	local01, arg01
0d9a4     E4 6F B1 FD | 	call	#_pslpeek
0d9a8     FD 28 02 F6 | 	mov	local02, result1
0d9ac     B4 01 00 FF 
0d9b0     72 2A 06 F6 | 	mov	local03, ##@LR__5767
0d9b4                 | ' l=pslpeek(psaddr) 
0d9b4                 | ' s="" 
0d9b4                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d9b4     01 2C 06 F6 | 	mov	local04, #1
0d9b8     01 28 06 F1 | 	add	local02, #1
0d9bc                 | LR__1100
0d9bc     14 2D 52 F2 | 	cmps	local04, local02 wc
0d9c0     30 00 90 3D |  if_ae	jmp	#LR__1101
0d9c4     13 13 02 F6 | 	mov	arg01, local01
0d9c8     03 12 06 F1 | 	add	arg01, #3
0d9cc     16 13 02 F1 | 	add	arg01, local04
0d9d0     60 6F B1 FD | 	call	#_pspeek
0d9d4     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d9d8     78 C9 B1 FD | 	call	#__system__Chr_S
0d9dc     FD 14 02 F6 | 	mov	arg02, result1
0d9e0     15 13 02 F6 | 	mov	arg01, local03
0d9e4     84 A7 B1 FD | 	call	#__system___string_concat
0d9e8     FD 2A 02 F6 | 	mov	local03, result1
0d9ec     01 2C 06 F1 | 	add	local04, #1
0d9f0     C8 FF 9F FD | 	jmp	#LR__1100
0d9f4                 | LR__1101
0d9f4                 | ' return s
0d9f4     15 FB 01 F6 | 	mov	result1, local03
0d9f8     A7 F0 03 F6 | 	mov	ptra, fp
0d9fc     B2 00 A0 FD | 	call	#popregs_
0da00                 | _convertstring_ret
0da00     2D 00 64 FD | 	ret
0da04                 | 
0da04                 | ' 
0da04                 | ' ' converts a variable to an integer
0da04                 | ' 
0da04                 | ' function converttoint (t1 as expr_result) as integer 
0da04                 | _converttoint
0da04     02 4A 05 F6 | 	mov	COUNT_, #2
0da08     A8 00 A0 FD | 	call	#pushregs_
0da0c     09 27 02 F6 | 	mov	local01, arg01
0da10                 | ' 
0da10                 | ' select case t1.result_type
0da10     08 26 06 F1 | 	add	local01, #8
0da14     13 29 02 FB | 	rdlong	local02, local01
0da18     08 26 86 F1 | 	sub	local01, #8
0da1c     1C 28 0E F2 | 	cmp	local02, #28 wz
0da20     2C 00 90 AD |  if_e	jmp	#LR__1110
0da24     1D 28 0E F2 | 	cmp	local02, #29 wz
0da28     2C 00 90 AD |  if_e	jmp	#LR__1111
0da2c     1E 28 0E F2 | 	cmp	local02, #30 wz
0da30     2C 00 90 AD |  if_e	jmp	#LR__1112
0da34     1F 28 0E F2 | 	cmp	local02, #31 wz
0da38     34 00 90 AD |  if_e	jmp	#LR__1113
0da3c     2B 28 0E F2 | 	cmp	local02, #43 wz
0da40     44 00 90 AD |  if_e	jmp	#LR__1114
0da44     2C 28 0E F2 | 	cmp	local02, #44 wz
0da48     5C 00 90 AD |  if_e	jmp	#LR__1115
0da4c     60 00 90 FD | 	jmp	#LR__1116
0da50                 | LR__1110
0da50     13 FB 01 FB | 	rdlong	result1, local01
0da54     5C 00 90 FD | 	jmp	#LR__1117
0da58                 | LR__1111
0da58     13 FB 01 FB | 	rdlong	result1, local01
0da5c     54 00 90 FD | 	jmp	#LR__1117
0da60                 | LR__1112
0da60     13 13 02 FB | 	rdlong	arg01, local01
0da64     01 14 06 F6 | 	mov	arg02, #1
0da68     E8 D9 B1 FD | 	call	#__system___float_tointeger
0da6c     44 00 90 FD | 	jmp	#LR__1117
0da70                 | LR__1113
0da70     13 13 02 FB | 	rdlong	arg01, local01
0da74     24 DD B1 FD | 	call	#__system____builtin_atof
0da78     FD 12 02 F6 | 	mov	arg01, result1
0da7c     01 14 06 F6 | 	mov	arg02, #1
0da80     D0 D9 B1 FD | 	call	#__system___float_tointeger
0da84     2C 00 90 FD | 	jmp	#LR__1117
0da88                 | LR__1114
0da88     13 13 02 FB | 	rdlong	arg01, local01
0da8c     08 FF BF FD | 	call	#_convertstring
0da90     FD 12 02 F6 | 	mov	arg01, result1
0da94     04 DD B1 FD | 	call	#__system____builtin_atof
0da98     FD 12 02 F6 | 	mov	arg01, result1
0da9c     01 14 06 F6 | 	mov	arg02, #1
0daa0     B0 D9 B1 FD | 	call	#__system___float_tointeger
0daa4     0C 00 90 FD | 	jmp	#LR__1117
0daa8                 | LR__1115
0daa8     13 FB 01 FB | 	rdlong	result1, local01
0daac     04 00 90 FD | 	jmp	#LR__1117
0dab0                 | LR__1116
0dab0     00 FA 05 F6 | 	mov	result1, #0
0dab4                 | LR__1117
0dab4     A7 F0 03 F6 | 	mov	ptra, fp
0dab8     B2 00 A0 FD | 	call	#popregs_
0dabc                 | _converttoint_ret
0dabc     2D 00 64 FD | 	ret
0dac0                 | 
0dac0                 | ' 
0dac0                 | ' ' converts a variable to float
0dac0                 | ' 
0dac0                 | ' function converttofloat (t1 as expr_result) as single
0dac0                 | _converttofloat
0dac0     03 4A 05 F6 | 	mov	COUNT_, #3
0dac4     A8 00 A0 FD | 	call	#pushregs_
0dac8     09 27 02 F6 | 	mov	local01, arg01
0dacc                 | ' 
0dacc                 | ' select case t1.result_type
0dacc     08 26 06 F1 | 	add	local01, #8
0dad0     13 29 02 FB | 	rdlong	local02, local01
0dad4     08 26 86 F1 | 	sub	local01, #8
0dad8     1C 28 0E F2 | 	cmp	local02, #28 wz
0dadc     24 00 90 AD |  if_e	jmp	#LR__1120
0dae0     1D 28 0E F2 | 	cmp	local02, #29 wz
0dae4     38 00 90 AD |  if_e	jmp	#LR__1121
0dae8     1E 28 0E F2 | 	cmp	local02, #30 wz
0daec     3C 00 90 AD |  if_e	jmp	#LR__1122
0daf0     1F 28 0E F2 | 	cmp	local02, #31 wz
0daf4     3C 00 90 AD |  if_e	jmp	#LR__1123
0daf8     2B 28 0E F2 | 	cmp	local02, #43 wz
0dafc     40 00 90 AD |  if_e	jmp	#LR__1124
0db00     50 00 90 FD | 	jmp	#LR__1125
0db04                 | LR__1120
0db04     13 13 02 FB | 	rdlong	arg01, local01
0db08     09 13 52 F6 | 	abs	arg01, arg01 wc
0db0c     1F 2A C6 C9 |  if_b	decod	local03, #31
0db10     00 2A 06 36 |  if_ae	mov	local03, #0
0db14     70 D0 B1 FD | 	call	#__system___float_fromuns
0db18     15 FB 61 F5 | 	xor	result1, local03
0db1c     38 00 90 FD | 	jmp	#LR__1126
0db20                 | LR__1121
0db20     13 13 02 FB | 	rdlong	arg01, local01
0db24     60 D0 B1 FD | 	call	#__system___float_fromuns
0db28     2C 00 90 FD | 	jmp	#LR__1126
0db2c                 | LR__1122
0db2c     13 FB 01 FB | 	rdlong	result1, local01
0db30     24 00 90 FD | 	jmp	#LR__1126
0db34                 | LR__1123
0db34     13 13 02 FB | 	rdlong	arg01, local01
0db38     60 DC B1 FD | 	call	#__system____builtin_atof
0db3c     18 00 90 FD | 	jmp	#LR__1126
0db40                 | LR__1124
0db40     13 13 02 FB | 	rdlong	arg01, local01
0db44     50 FE BF FD | 	call	#_convertstring
0db48     FD 12 02 F6 | 	mov	arg01, result1
0db4c     4C DC B1 FD | 	call	#__system____builtin_atof
0db50     04 00 90 FD | 	jmp	#LR__1126
0db54                 | LR__1125
0db54     00 FA 05 F6 | 	mov	result1, #0
0db58                 | LR__1126
0db58     A7 F0 03 F6 | 	mov	ptra, fp
0db5c     B2 00 A0 FD | 	call	#popregs_
0db60                 | _converttofloat_ret
0db60     2D 00 64 FD | 	ret
0db64                 | 
0db64                 | ' 
0db64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0db64                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0db64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0db64                 | ' 
0db64                 | ' 
0db64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0db64                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0db64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0db64                 | ' 
0db64                 | ' '-------------------- abs
0db64                 | ' 
0db64                 | ' sub do_abs
0db64                 | _do_abs
0db64     01 4A 05 F6 | 	mov	COUNT_, #1
0db68     A8 00 A0 FD | 	call	#pushregs_
0db6c     0C F0 07 F1 | 	add	ptra, #12
0db70     AC FC BF FD | 	call	#_pop
0db74     FF 26 02 F6 | 	mov	local01, result3
0db78     A7 FA 61 FC | 	wrlong	result1, fp
0db7c     04 4E 05 F1 | 	add	fp, #4
0db80     A7 FC 61 FC | 	wrlong	result2, fp
0db84     04 4E 05 F1 | 	add	fp, #4
0db88     A7 26 62 FC | 	wrlong	local01, fp
0db8c                 | ' 
0db8c                 | ' t1=pop()
0db8c                 | ' if t1.result_type=result_int then 
0db8c     08 4E 85 F1 | 	sub	fp, #8
0db90     1C 26 0E F2 | 	cmp	local01, #28 wz
0db94     A7 12 02 AB |  if_e	rdlong	arg01, fp
0db98     09 27 42 A6 |  if_e	abs	local01, arg01
0db9c     A7 26 62 AC |  if_e	wrlong	local01, fp
0dba0     2C 00 90 AD |  if_e	jmp	#LR__1130
0dba4     08 4E 05 F1 | 	add	fp, #8
0dba8     A7 26 02 FB | 	rdlong	local01, fp
0dbac     08 4E 85 F1 | 	sub	fp, #8
0dbb0     1E 26 0E F2 | 	cmp	local01, #30 wz
0dbb4     A7 FA 01 AB |  if_e	rdlong	result1, fp
0dbb8     1F FA 05 A4 |  if_e	bitl	result1, #31
0dbbc     A7 FA 61 AC |  if_e	wrlong	result1, fp
0dbc0     08 4E 05 51 |  if_ne	add	fp, #8
0dbc4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0dbc8     08 4E 85 51 |  if_ne	sub	fp, #8
0dbcc     A7 50 68 5C |  if_ne	wrlong	#40, fp
0dbd0                 | LR__1130
0dbd0     A7 12 02 F6 | 	mov	arg01, fp
0dbd4     E0 FC BF FD | 	call	#_push
0dbd8     A7 F0 03 F6 | 	mov	ptra, fp
0dbdc     B2 00 A0 FD | 	call	#popregs_
0dbe0                 | _do_abs_ret
0dbe0     2D 00 64 FD | 	ret
0dbe4                 | 
0dbe4                 | ' 
0dbe4                 | ' '-------------------- acos
0dbe4                 | ' 
0dbe4                 | ' sub do_acos
0dbe4                 | _do_acos
0dbe4     01 4A 05 F6 | 	mov	COUNT_, #1
0dbe8     A8 00 A0 FD | 	call	#pushregs_
0dbec     10 F0 07 F1 | 	add	ptra, #16
0dbf0     4A 00 00 FF 
0dbf4     A0 E4 05 F1 | 	add	objptr, ##38048
0dbf8     F2 26 02 FB | 	rdlong	local01, objptr
0dbfc     13 17 02 F6 | 	mov	arg03, local01
0dc00     01 16 66 F0 | 	shl	arg03, #1
0dc04     13 17 02 F1 | 	add	arg03, local01
0dc08     02 16 66 F0 | 	shl	arg03, #2
0dc0c     03 00 00 FF 
0dc10     04 E4 85 F1 | 	sub	objptr, ##1540
0dc14     F2 16 02 F1 | 	add	arg03, objptr
0dc18     0B 17 02 FB | 	rdlong	arg03, arg03
0dc1c     0C 4E 05 F1 | 	add	fp, #12
0dc20     A7 16 62 FC | 	wrlong	arg03, fp
0dc24                 | ' 
0dc24                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc24                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0dc24     0C 4E 85 F1 | 	sub	fp, #12
0dc28     02 16 16 F2 | 	cmp	arg03, #2 wc
0dc2c     47 00 00 FF 
0dc30     9C E4 85 F1 | 	sub	objptr, ##36508
0dc34     0C 4E 05 C1 |  if_b	add	fp, #12
0dc38     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dc3c     0C 4E 85 C1 |  if_b	sub	fp, #12
0dc40     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dc44     00 12 06 F6 | 	mov	arg01, #0
0dc48     68 01 B2 FD | 	call	#__system___getiolock_0620
0dc4c     FD 12 02 F6 | 	mov	arg01, result1
0dc50     BC A4 B1 FD | 	call	#__system___lockmem
0dc54     B4 01 00 FF 
0dc58     73 14 06 F6 | 	mov	arg02, ##@LR__5768
0dc5c     00 12 06 F6 | 	mov	arg01, #0
0dc60     00 16 06 F6 | 	mov	arg03, #0
0dc64     A0 B1 B1 FD | 	call	#__system___basic_print_string
0dc68     00 12 06 F6 | 	mov	arg01, #0
0dc6c     44 01 B2 FD | 	call	#__system___getiolock_0620
0dc70     FD 00 68 FC | 	wrlong	#0, result1
0dc74     27 12 06 F6 | 	mov	arg01, #39
0dc78     00 14 06 F6 | 	mov	arg02, #0
0dc7c     3C 6A B1 FD | 	call	#_printerror
0dc80     64 00 90 FD | 	jmp	#LR__1141
0dc84                 | LR__1140
0dc84     98 FB BF FD | 	call	#_pop
0dc88     FF 26 02 F6 | 	mov	local01, result3
0dc8c     A7 FA 61 FC | 	wrlong	result1, fp
0dc90     04 4E 05 F1 | 	add	fp, #4
0dc94     A7 FC 61 FC | 	wrlong	result2, fp
0dc98     04 4E 05 F1 | 	add	fp, #4
0dc9c     A7 26 62 FC | 	wrlong	local01, fp
0dca0     08 4E 85 F1 | 	sub	fp, #8
0dca4     A7 12 02 F6 | 	mov	arg01, fp
0dca8     14 FE BF FD | 	call	#_converttofloat
0dcac     FD 12 02 F6 | 	mov	arg01, result1
0dcb0     1C DE B1 FD | 	call	#__system____builtin_acosf
0dcb4     FD 12 02 F6 | 	mov	arg01, result1
0dcb8     52 00 00 FF 
0dcbc     04 E5 05 F1 | 	add	objptr, ##42244
0dcc0     F2 14 02 FB | 	rdlong	arg02, objptr
0dcc4     52 00 00 FF 
0dcc8     04 E5 85 F1 | 	sub	objptr, ##42244
0dccc     BC D2 B1 FD | 	call	#__system___float_mul
0dcd0     A7 FA 61 FC | 	wrlong	result1, fp
0dcd4     08 4E 05 F1 | 	add	fp, #8
0dcd8     A7 3C 68 FC | 	wrlong	#30, fp
0dcdc     08 4E 85 F1 | 	sub	fp, #8
0dce0     A7 12 02 F6 | 	mov	arg01, fp
0dce4     D0 FB BF FD | 	call	#_push
0dce8                 | LR__1141
0dce8     A7 F0 03 F6 | 	mov	ptra, fp
0dcec     B2 00 A0 FD | 	call	#popregs_
0dcf0                 | _do_acos_ret
0dcf0     2D 00 64 FD | 	ret
0dcf4                 | 
0dcf4                 | ' 
0dcf4                 | ' '-------------------- asc
0dcf4                 | ' 
0dcf4                 | ' sub do_asc
0dcf4                 | _do_asc
0dcf4     01 4A 05 F6 | 	mov	COUNT_, #1
0dcf8     A8 00 A0 FD | 	call	#pushregs_
0dcfc     14 F0 07 F1 | 	add	ptra, #20
0dd00     4A 00 00 FF 
0dd04     A0 E4 05 F1 | 	add	objptr, ##38048
0dd08     F2 26 02 FB | 	rdlong	local01, objptr
0dd0c     13 17 02 F6 | 	mov	arg03, local01
0dd10     01 16 66 F0 | 	shl	arg03, #1
0dd14     13 17 02 F1 | 	add	arg03, local01
0dd18     02 16 66 F0 | 	shl	arg03, #2
0dd1c     03 00 00 FF 
0dd20     04 E4 85 F1 | 	sub	objptr, ##1540
0dd24     F2 16 02 F1 | 	add	arg03, objptr
0dd28     0B 17 02 FB | 	rdlong	arg03, arg03
0dd2c     0C 4E 05 F1 | 	add	fp, #12
0dd30     A7 16 62 FC | 	wrlong	arg03, fp
0dd34                 | ' 
0dd34                 | ' numpar=compiledline(lineptr_e).result.uresult
0dd34                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0dd34     0C 4E 85 F1 | 	sub	fp, #12
0dd38     02 16 16 F2 | 	cmp	arg03, #2 wc
0dd3c     47 00 00 FF 
0dd40     9C E4 85 F1 | 	sub	objptr, ##36508
0dd44     0C 4E 05 C1 |  if_b	add	fp, #12
0dd48     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dd4c     0C 4E 85 C1 |  if_b	sub	fp, #12
0dd50     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dd54     00 12 06 F6 | 	mov	arg01, #0
0dd58     58 00 B2 FD | 	call	#__system___getiolock_0620
0dd5c     FD 12 02 F6 | 	mov	arg01, result1
0dd60     AC A3 B1 FD | 	call	#__system___lockmem
0dd64     B4 01 00 FF 
0dd68     7A 14 06 F6 | 	mov	arg02, ##@LR__5769
0dd6c     00 12 06 F6 | 	mov	arg01, #0
0dd70     00 16 06 F6 | 	mov	arg03, #0
0dd74     90 B0 B1 FD | 	call	#__system___basic_print_string
0dd78     00 12 06 F6 | 	mov	arg01, #0
0dd7c     34 00 B2 FD | 	call	#__system___getiolock_0620
0dd80     FD 00 68 FC | 	wrlong	#0, result1
0dd84     27 12 06 F6 | 	mov	arg01, #39
0dd88     00 14 06 F6 | 	mov	arg02, #0
0dd8c     2C 69 B1 FD | 	call	#_printerror
0dd90     B4 00 90 FD | 	jmp	#LR__1153
0dd94                 | LR__1150
0dd94     88 FA BF FD | 	call	#_pop
0dd98     FF 16 02 F6 | 	mov	arg03, result3
0dd9c     A7 FA 61 FC | 	wrlong	result1, fp
0dda0     04 4E 05 F1 | 	add	fp, #4
0dda4     A7 FC 61 FC | 	wrlong	result2, fp
0dda8     04 4E 05 F1 | 	add	fp, #4
0ddac     A7 16 62 FC | 	wrlong	arg03, fp
0ddb0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0ddb0     08 4E 85 F1 | 	sub	fp, #8
0ddb4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ddb8     18 00 90 5D |  if_ne	jmp	#LR__1151
0ddbc     A7 12 02 FB | 	rdlong	arg01, fp
0ddc0     D4 FB BF FD | 	call	#_convertstring
0ddc4     A7 FA 61 FC | 	wrlong	result1, fp
0ddc8     08 4E 05 F1 | 	add	fp, #8
0ddcc     A7 3E 68 FC | 	wrlong	#31, fp
0ddd0     08 4E 85 F1 | 	sub	fp, #8
0ddd4                 | LR__1151
0ddd4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0ddd4     08 4E 05 F1 | 	add	fp, #8
0ddd8     A7 16 02 FB | 	rdlong	arg03, fp
0dddc     08 4E 85 F1 | 	sub	fp, #8
0dde0     1F 16 0E F2 | 	cmp	arg03, #31 wz
0dde4     40 00 90 AD |  if_e	jmp	#LR__1152
0dde8     00 12 06 F6 | 	mov	arg01, #0
0ddec     C4 FF B1 FD | 	call	#__system___getiolock_0620
0ddf0     FD 12 02 F6 | 	mov	arg01, result1
0ddf4     18 A3 B1 FD | 	call	#__system___lockmem
0ddf8     B4 01 00 FF 
0ddfc     80 14 06 F6 | 	mov	arg02, ##@LR__5770
0de00     00 12 06 F6 | 	mov	arg01, #0
0de04     00 16 06 F6 | 	mov	arg03, #0
0de08     FC AF B1 FD | 	call	#__system___basic_print_string
0de0c     00 12 06 F6 | 	mov	arg01, #0
0de10     A0 FF B1 FD | 	call	#__system___getiolock_0620
0de14     FD 00 68 FC | 	wrlong	#0, result1
0de18     0F 12 06 F6 | 	mov	arg01, #15
0de1c     00 14 06 F6 | 	mov	arg02, #0
0de20     98 68 B1 FD | 	call	#_printerror
0de24     20 00 90 FD | 	jmp	#LR__1153
0de28                 | LR__1152
0de28     A7 26 02 FB | 	rdlong	local01, fp
0de2c     13 27 C2 FA | 	rdbyte	local01, local01
0de30     A7 26 62 FC | 	wrlong	local01, fp
0de34     08 4E 05 F1 | 	add	fp, #8
0de38     A7 38 68 FC | 	wrlong	#28, fp
0de3c     08 4E 85 F1 | 	sub	fp, #8
0de40     A7 12 02 F6 | 	mov	arg01, fp
0de44     70 FA BF FD | 	call	#_push
0de48                 | LR__1153
0de48     A7 F0 03 F6 | 	mov	ptra, fp
0de4c     B2 00 A0 FD | 	call	#popregs_
0de50                 | _do_asc_ret
0de50     2D 00 64 FD | 	ret
0de54                 | 
0de54                 | ' 
0de54                 | ' '-------------------- asin
0de54                 | ' 
0de54                 | ' sub do_asin
0de54                 | _do_asin
0de54     01 4A 05 F6 | 	mov	COUNT_, #1
0de58     A8 00 A0 FD | 	call	#pushregs_
0de5c     10 F0 07 F1 | 	add	ptra, #16
0de60     4A 00 00 FF 
0de64     A0 E4 05 F1 | 	add	objptr, ##38048
0de68     F2 26 02 FB | 	rdlong	local01, objptr
0de6c     13 17 02 F6 | 	mov	arg03, local01
0de70     01 16 66 F0 | 	shl	arg03, #1
0de74     13 17 02 F1 | 	add	arg03, local01
0de78     02 16 66 F0 | 	shl	arg03, #2
0de7c     03 00 00 FF 
0de80     04 E4 85 F1 | 	sub	objptr, ##1540
0de84     F2 16 02 F1 | 	add	arg03, objptr
0de88     0B 17 02 FB | 	rdlong	arg03, arg03
0de8c     0C 4E 05 F1 | 	add	fp, #12
0de90     A7 16 62 FC | 	wrlong	arg03, fp
0de94                 | ' 
0de94                 | ' numpar=compiledline(lineptr_e).result.uresult
0de94                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0de94     0C 4E 85 F1 | 	sub	fp, #12
0de98     02 16 16 F2 | 	cmp	arg03, #2 wc
0de9c     47 00 00 FF 
0dea0     9C E4 85 F1 | 	sub	objptr, ##36508
0dea4     0C 4E 05 C1 |  if_b	add	fp, #12
0dea8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0deac     0C 4E 85 C1 |  if_b	sub	fp, #12
0deb0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0deb4     00 12 06 F6 | 	mov	arg01, #0
0deb8     F8 FE B1 FD | 	call	#__system___getiolock_0620
0debc     FD 12 02 F6 | 	mov	arg01, result1
0dec0     4C A2 B1 FD | 	call	#__system___lockmem
0dec4     B4 01 00 FF 
0dec8     86 14 06 F6 | 	mov	arg02, ##@LR__5771
0decc     00 12 06 F6 | 	mov	arg01, #0
0ded0     00 16 06 F6 | 	mov	arg03, #0
0ded4     30 AF B1 FD | 	call	#__system___basic_print_string
0ded8     00 12 06 F6 | 	mov	arg01, #0
0dedc     D4 FE B1 FD | 	call	#__system___getiolock_0620
0dee0     FD 00 68 FC | 	wrlong	#0, result1
0dee4     27 12 06 F6 | 	mov	arg01, #39
0dee8     00 14 06 F6 | 	mov	arg02, #0
0deec     CC 67 B1 FD | 	call	#_printerror
0def0     64 00 90 FD | 	jmp	#LR__1161
0def4                 | LR__1160
0def4     28 F9 BF FD | 	call	#_pop
0def8     FF 26 02 F6 | 	mov	local01, result3
0defc     A7 FA 61 FC | 	wrlong	result1, fp
0df00     04 4E 05 F1 | 	add	fp, #4
0df04     A7 FC 61 FC | 	wrlong	result2, fp
0df08     04 4E 05 F1 | 	add	fp, #4
0df0c     A7 26 62 FC | 	wrlong	local01, fp
0df10     08 4E 85 F1 | 	sub	fp, #8
0df14     A7 12 02 F6 | 	mov	arg01, fp
0df18     A4 FB BF FD | 	call	#_converttofloat
0df1c     FD 12 02 F6 | 	mov	arg01, result1
0df20     60 DB B1 FD | 	call	#__system____builtin_asinf
0df24     FD 12 02 F6 | 	mov	arg01, result1
0df28     52 00 00 FF 
0df2c     04 E5 05 F1 | 	add	objptr, ##42244
0df30     F2 14 02 FB | 	rdlong	arg02, objptr
0df34     52 00 00 FF 
0df38     04 E5 85 F1 | 	sub	objptr, ##42244
0df3c     4C D0 B1 FD | 	call	#__system___float_mul
0df40     A7 FA 61 FC | 	wrlong	result1, fp
0df44     08 4E 05 F1 | 	add	fp, #8
0df48     A7 3C 68 FC | 	wrlong	#30, fp
0df4c     08 4E 85 F1 | 	sub	fp, #8
0df50     A7 12 02 F6 | 	mov	arg01, fp
0df54     60 F9 BF FD | 	call	#_push
0df58                 | LR__1161
0df58     A7 F0 03 F6 | 	mov	ptra, fp
0df5c     B2 00 A0 FD | 	call	#popregs_
0df60                 | _do_asin_ret
0df60     2D 00 64 FD | 	ret
0df64                 | 
0df64                 | ' 
0df64                 | ' '-------------------- atn
0df64                 | ' 
0df64                 | ' sub do_atn
0df64                 | _do_atn
0df64     01 4A 05 F6 | 	mov	COUNT_, #1
0df68     A8 00 A0 FD | 	call	#pushregs_
0df6c     10 F0 07 F1 | 	add	ptra, #16
0df70     4A 00 00 FF 
0df74     A0 E4 05 F1 | 	add	objptr, ##38048
0df78     F2 26 02 FB | 	rdlong	local01, objptr
0df7c     13 17 02 F6 | 	mov	arg03, local01
0df80     01 16 66 F0 | 	shl	arg03, #1
0df84     13 17 02 F1 | 	add	arg03, local01
0df88     02 16 66 F0 | 	shl	arg03, #2
0df8c     03 00 00 FF 
0df90     04 E4 85 F1 | 	sub	objptr, ##1540
0df94     F2 16 02 F1 | 	add	arg03, objptr
0df98     0B 17 02 FB | 	rdlong	arg03, arg03
0df9c     0C 4E 05 F1 | 	add	fp, #12
0dfa0     A7 16 62 FC | 	wrlong	arg03, fp
0dfa4                 | ' 
0dfa4                 | ' numpar=compiledline(lineptr_e).result.uresult
0dfa4                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dfa4     0C 4E 85 F1 | 	sub	fp, #12
0dfa8     02 16 16 F2 | 	cmp	arg03, #2 wc
0dfac     47 00 00 FF 
0dfb0     9C E4 85 F1 | 	sub	objptr, ##36508
0dfb4     0C 4E 05 C1 |  if_b	add	fp, #12
0dfb8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dfbc     0C 4E 85 C1 |  if_b	sub	fp, #12
0dfc0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dfc4     00 12 06 F6 | 	mov	arg01, #0
0dfc8     E8 FD B1 FD | 	call	#__system___getiolock_0620
0dfcc     FD 12 02 F6 | 	mov	arg01, result1
0dfd0     3C A1 B1 FD | 	call	#__system___lockmem
0dfd4     B4 01 00 FF 
0dfd8     8D 14 06 F6 | 	mov	arg02, ##@LR__5772
0dfdc     00 12 06 F6 | 	mov	arg01, #0
0dfe0     00 16 06 F6 | 	mov	arg03, #0
0dfe4     20 AE B1 FD | 	call	#__system___basic_print_string
0dfe8     00 12 06 F6 | 	mov	arg01, #0
0dfec     C4 FD B1 FD | 	call	#__system___getiolock_0620
0dff0     FD 00 68 FC | 	wrlong	#0, result1
0dff4     27 12 06 F6 | 	mov	arg01, #39
0dff8     00 14 06 F6 | 	mov	arg02, #0
0dffc     BC 66 B1 FD | 	call	#_printerror
0e000     6C 00 90 FD | 	jmp	#LR__1171
0e004                 | LR__1170
0e004     18 F8 BF FD | 	call	#_pop
0e008     FF 26 02 F6 | 	mov	local01, result3
0e00c     A7 FA 61 FC | 	wrlong	result1, fp
0e010     04 4E 05 F1 | 	add	fp, #4
0e014     A7 FC 61 FC | 	wrlong	result2, fp
0e018     04 4E 05 F1 | 	add	fp, #4
0e01c     A7 26 62 FC | 	wrlong	local01, fp
0e020     08 4E 85 F1 | 	sub	fp, #8
0e024     A7 12 02 F6 | 	mov	arg01, fp
0e028     94 FA BF FD | 	call	#_converttofloat
0e02c     FD 12 02 F6 | 	mov	arg01, result1
0e030     00 C0 1F FF 
0e034     00 14 06 F6 | 	mov	arg02, ##1065353216
0e038     E0 DA B1 FD | 	call	#__system____builtin_atan2f
0e03c     FD 12 02 F6 | 	mov	arg01, result1
0e040     52 00 00 FF 
0e044     04 E5 05 F1 | 	add	objptr, ##42244
0e048     F2 14 02 FB | 	rdlong	arg02, objptr
0e04c     52 00 00 FF 
0e050     04 E5 85 F1 | 	sub	objptr, ##42244
0e054     34 CF B1 FD | 	call	#__system___float_mul
0e058     A7 FA 61 FC | 	wrlong	result1, fp
0e05c     08 4E 05 F1 | 	add	fp, #8
0e060     A7 3C 68 FC | 	wrlong	#30, fp
0e064     08 4E 85 F1 | 	sub	fp, #8
0e068     A7 12 02 F6 | 	mov	arg01, fp
0e06c     48 F8 BF FD | 	call	#_push
0e070                 | LR__1171
0e070     A7 F0 03 F6 | 	mov	ptra, fp
0e074     B2 00 A0 FD | 	call	#popregs_
0e078                 | _do_atn_ret
0e078     2D 00 64 FD | 	ret
0e07c                 | 
0e07c                 | ' 
0e07c                 | ' '-------------------- beep
0e07c                 | ' 
0e07c                 | ' sub do_beep
0e07c                 | _do_beep
0e07c     02 4A 05 F6 | 	mov	COUNT_, #2
0e080     A8 00 A0 FD | 	call	#pushregs_
0e084     20 F0 07 F1 | 	add	ptra, #32
0e088     94 F7 BF FD | 	call	#_pop
0e08c     FD 26 02 F6 | 	mov	local01, result1
0e090     FE 1C 02 F6 | 	mov	arg06, result2
0e094     FF 28 02 F6 | 	mov	local02, result3
0e098     0C 4E 05 F1 | 	add	fp, #12
0e09c     A7 26 62 FC | 	wrlong	local01, fp
0e0a0     04 4E 05 F1 | 	add	fp, #4
0e0a4     A7 1C 62 FC | 	wrlong	arg06, fp
0e0a8     04 4E 05 F1 | 	add	fp, #4
0e0ac     A7 28 62 FC | 	wrlong	local02, fp
0e0b0     14 4E 85 F1 | 	sub	fp, #20
0e0b4     68 F7 BF FD | 	call	#_pop
0e0b8     A7 FA 61 FC | 	wrlong	result1, fp
0e0bc     04 4E 05 F1 | 	add	fp, #4
0e0c0     A7 FC 61 FC | 	wrlong	result2, fp
0e0c4     04 4E 05 F1 | 	add	fp, #4
0e0c8     A7 FE 61 FC | 	wrlong	result3, fp
0e0cc                 | ' 
0e0cc                 | ' t2=pop()
0e0cc                 | ' t1=pop()
0e0cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0e0cc     08 4E 85 F1 | 	sub	fp, #8
0e0d0     1C FE 0D F2 | 	cmp	result3, #28 wz
0e0d4     08 4E 05 51 |  if_ne	add	fp, #8
0e0d8     A7 28 02 5B |  if_ne	rdlong	local02, fp
0e0dc     08 4E 85 51 |  if_ne	sub	fp, #8
0e0e0     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0e0e4     A7 26 02 AB |  if_e	rdlong	local01, fp
0e0e8     18 4E 05 A1 |  if_e	add	fp, #24
0e0ec     A7 26 62 AC |  if_e	wrlong	local01, fp
0e0f0     18 4E 85 A1 |  if_e	sub	fp, #24
0e0f4     14 00 90 AD |  if_e	jmp	#LR__1180
0e0f8     A7 12 02 F6 | 	mov	arg01, fp
0e0fc     04 F9 BF FD | 	call	#_converttoint
0e100     18 4E 05 F1 | 	add	fp, #24
0e104     A7 FA 61 FC | 	wrlong	result1, fp
0e108     18 4E 85 F1 | 	sub	fp, #24
0e10c                 | LR__1180
0e10c     1C 4E 05 F1 | 	add	fp, #28
0e110     A7 FE 48 FC | 	wrbyte	#127, fp
0e114     01 4E 05 F1 | 	add	fp, #1
0e118     A7 00 49 FC | 	wrbyte	#128, fp
0e11c     01 4E 85 F1 | 	sub	fp, #1
0e120     A7 14 02 F6 | 	mov	arg02, fp
0e124     04 4E 85 F1 | 	sub	fp, #4
0e128     A7 16 02 FB | 	rdlong	arg03, fp
0e12c     18 4E 85 F1 | 	sub	fp, #24
0e130     01 16 66 F0 | 	shl	arg03, #1
0e134     07 12 06 F6 | 	mov	arg01, #7
0e138     0E 18 C6 F9 | 	decod	arg04, #14
0e13c     02 1A 06 F6 | 	mov	arg05, #2
0e140     00 1C 06 F6 | 	mov	arg06, #0
0e144     0B 00 00 FF 
0e148     CC E4 05 F1 | 	add	objptr, ##5836
0e14c     AC 9B B1 FD | 	call	#_audio096_spin2_play8
0e150     0B 00 00 FF 
0e154     CC E4 85 F1 | 	sub	objptr, ##5836
0e158     0C 4E 05 F1 | 	add	fp, #12
0e15c     A7 12 02 F6 | 	mov	arg01, fp
0e160     0C 4E 85 F1 | 	sub	fp, #12
0e164     50 F7 BF FD | 	call	#_push
0e168     88 F9 B0 FD | 	call	#_do_waitms
0e16c     07 12 06 F6 | 	mov	arg01, #7
0e170     0B 00 00 FF 
0e174     CC E4 05 F1 | 	add	objptr, ##5836
0e178     24 9C B1 FD | 	call	#_audio096_spin2_stop
0e17c     0B 00 00 FF 
0e180     CC E4 85 F1 | 	sub	objptr, ##5836
0e184     A7 F0 03 F6 | 	mov	ptra, fp
0e188     B2 00 A0 FD | 	call	#popregs_
0e18c                 | _do_beep_ret
0e18c     2D 00 64 FD | 	ret
0e190                 | 
0e190                 | ' 
0e190                 | ' '-------------------- blit
0e190                 | ' 
0e190                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0e190                 | ' sub do_blit
0e190                 | _do_blit
0e190     02 4A 05 F6 | 	mov	COUNT_, #2
0e194     A8 00 A0 FD | 	call	#pushregs_
0e198     3C F0 07 F1 | 	add	ptra, #60
0e19c     4A 00 00 FF 
0e1a0     A0 E4 05 F1 | 	add	objptr, ##38048
0e1a4     F2 26 02 FB | 	rdlong	local01, objptr
0e1a8     13 25 02 F6 | 	mov	arg10, local01
0e1ac     01 24 66 F0 | 	shl	arg10, #1
0e1b0     13 25 02 F1 | 	add	arg10, local01
0e1b4     02 24 66 F0 | 	shl	arg10, #2
0e1b8     03 00 00 FF 
0e1bc     04 E4 85 F1 | 	sub	objptr, ##1540
0e1c0     F2 24 02 F1 | 	add	arg10, objptr
0e1c4     12 25 02 FB | 	rdlong	arg10, arg10
0e1c8     38 4E 05 F1 | 	add	fp, #56
0e1cc     A7 24 62 FC | 	wrlong	arg10, fp
0e1d0                 | ' 
0e1d0                 | ' numpar=compiledline(lineptr_e).result.uresult
0e1d0                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0e1d0     38 4E 85 F1 | 	sub	fp, #56
0e1d4     0A 24 0E F2 | 	cmp	arg10, #10 wz
0e1d8     47 00 00 FF 
0e1dc     9C E4 85 F1 | 	sub	objptr, ##36508
0e1e0     38 4E 05 51 |  if_ne	add	fp, #56
0e1e4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e1e8     38 4E 85 51 |  if_ne	sub	fp, #56
0e1ec     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0e1f0     50 00 90 AD |  if_e	jmp	#LR__1190
0e1f4     00 12 06 F6 | 	mov	arg01, #0
0e1f8     B8 FB B1 FD | 	call	#__system___getiolock_0620
0e1fc     FD 12 02 F6 | 	mov	arg01, result1
0e200     0C 9F B1 FD | 	call	#__system___lockmem
0e204     B4 01 00 FF 
0e208     93 14 06 F6 | 	mov	arg02, ##@LR__5773
0e20c     00 12 06 F6 | 	mov	arg01, #0
0e210     00 16 06 F6 | 	mov	arg03, #0
0e214     F0 AB B1 FD | 	call	#__system___basic_print_string
0e218     00 12 06 F6 | 	mov	arg01, #0
0e21c     94 FB B1 FD | 	call	#__system___getiolock_0620
0e220     FD 00 68 FC | 	wrlong	#0, result1
0e224     50 00 00 FF 
0e228     10 E5 05 F1 | 	add	objptr, ##41232
0e22c     F2 14 02 FB | 	rdlong	arg02, objptr
0e230     50 00 00 FF 
0e234     10 E5 85 F1 | 	sub	objptr, ##41232
0e238     27 12 06 F6 | 	mov	arg01, #39
0e23c     7C 64 B1 FD | 	call	#_printerror
0e240     44 01 90 FD | 	jmp	#LR__1195
0e244                 | LR__1190
0e244                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e244     38 4E 05 F1 | 	add	fp, #56
0e248     A7 28 02 FB | 	rdlong	local02, fp
0e24c     01 28 86 F1 | 	sub	local02, #1
0e250     04 4E 85 F1 | 	sub	fp, #4
0e254     A7 28 62 FC | 	wrlong	local02, fp
0e258     34 4E 85 F1 | 	sub	fp, #52
0e25c                 | LR__1191
0e25c     38 4E 05 F1 | 	add	fp, #56
0e260     A7 26 02 FB | 	rdlong	local01, fp
0e264     01 26 86 F1 | 	sub	local01, #1
0e268     04 4E 85 F1 | 	sub	fp, #4
0e26c     A7 24 02 FB | 	rdlong	arg10, fp
0e270     34 4E 85 F1 | 	sub	fp, #52
0e274     13 25 1A F2 | 	cmp	arg10, local01 wcz
0e278     54 00 90 1D |  if_a	jmp	#LR__1192
0e27c     A0 F5 BF FD | 	call	#_pop
0e280     A7 FA 61 FC | 	wrlong	result1, fp
0e284     04 4E 05 F1 | 	add	fp, #4
0e288     A7 FC 61 FC | 	wrlong	result2, fp
0e28c     04 4E 05 F1 | 	add	fp, #4
0e290     A7 FE 61 FC | 	wrlong	result3, fp
0e294     2C 4E 05 F1 | 	add	fp, #44
0e298     A7 28 02 FB | 	rdlong	local02, fp
0e29c     02 28 66 F0 | 	shl	local02, #2
0e2a0     28 4E 85 F1 | 	sub	fp, #40
0e2a4     A7 28 02 F1 | 	add	local02, fp
0e2a8     0C 4E 85 F1 | 	sub	fp, #12
0e2ac     A7 12 02 F6 | 	mov	arg01, fp
0e2b0     50 F7 BF FD | 	call	#_converttoint
0e2b4     14 FB 61 FC | 	wrlong	result1, local02
0e2b8     34 4E 05 F1 | 	add	fp, #52
0e2bc     A7 28 02 FB | 	rdlong	local02, fp
0e2c0     01 28 86 F1 | 	sub	local02, #1
0e2c4     A7 28 62 FC | 	wrlong	local02, fp
0e2c8     34 4E 85 F1 | 	sub	fp, #52
0e2cc     8C FF 9F FD | 	jmp	#LR__1191
0e2d0                 | LR__1192
0e2d0                 | ' if numpar=10 then 
0e2d0     38 4E 05 F1 | 	add	fp, #56
0e2d4     A7 28 02 FB | 	rdlong	local02, fp
0e2d8     38 4E 85 F1 | 	sub	fp, #56
0e2dc     0A 28 0E F2 | 	cmp	local02, #10 wz
0e2e0     5C 00 90 5D |  if_ne	jmp	#LR__1193
0e2e4     0C 4E 05 F1 | 	add	fp, #12
0e2e8     A7 12 02 FB | 	rdlong	arg01, fp
0e2ec     04 4E 05 F1 | 	add	fp, #4
0e2f0     A7 14 02 FB | 	rdlong	arg02, fp
0e2f4     04 4E 05 F1 | 	add	fp, #4
0e2f8     A7 16 02 FB | 	rdlong	arg03, fp
0e2fc     04 4E 05 F1 | 	add	fp, #4
0e300     A7 18 02 FB | 	rdlong	arg04, fp
0e304     04 4E 05 F1 | 	add	fp, #4
0e308     A7 1A 02 FB | 	rdlong	arg05, fp
0e30c     04 4E 05 F1 | 	add	fp, #4
0e310     A7 1C 02 FB | 	rdlong	arg06, fp
0e314     04 4E 05 F1 | 	add	fp, #4
0e318     A7 1E 02 FB | 	rdlong	arg07, fp
0e31c     04 4E 05 F1 | 	add	fp, #4
0e320     A7 20 02 FB | 	rdlong	arg08, fp
0e324     04 4E 05 F1 | 	add	fp, #4
0e328     A7 22 02 FB | 	rdlong	arg09, fp
0e32c     04 4E 05 F1 | 	add	fp, #4
0e330     A7 24 02 FB | 	rdlong	arg10, fp
0e334     30 4E 85 F1 | 	sub	fp, #48
0e338     88 8B B1 FD | 	call	#_hg010b_spin2_blit
0e33c     48 00 90 FD | 	jmp	#LR__1194
0e340                 | LR__1193
0e340     F2 1E 02 FB | 	rdlong	arg07, objptr
0e344     0C 4E 05 F1 | 	add	fp, #12
0e348     A7 14 02 FB | 	rdlong	arg02, fp
0e34c     04 4E 05 F1 | 	add	fp, #4
0e350     A7 16 02 FB | 	rdlong	arg03, fp
0e354     04 4E 05 F1 | 	add	fp, #4
0e358     A7 18 02 FB | 	rdlong	arg04, fp
0e35c     04 4E 05 F1 | 	add	fp, #4
0e360     A7 1A 02 FB | 	rdlong	arg05, fp
0e364     04 4E 05 F1 | 	add	fp, #4
0e368     A7 20 02 FB | 	rdlong	arg08, fp
0e36c     04 4E 05 F1 | 	add	fp, #4
0e370     A7 22 02 FB | 	rdlong	arg09, fp
0e374     20 4E 85 F1 | 	sub	fp, #32
0e378     0F 13 02 F6 | 	mov	arg01, arg07
0e37c     0A 1C C6 F9 | 	decod	arg06, #10
0e380     0A 24 C6 F9 | 	decod	arg10, #10
0e384     3C 8B B1 FD | 	call	#_hg010b_spin2_blit
0e388                 | LR__1194
0e388                 | LR__1195
0e388     A7 F0 03 F6 | 	mov	ptra, fp
0e38c     B2 00 A0 FD | 	call	#popregs_
0e390                 | _do_blit_ret
0e390     2D 00 64 FD | 	ret
0e394                 | 
0e394                 | ' 
0e394                 | ' 
0e394                 | ' '-------------------- bin$
0e394                 | ' 
0e394                 | ' sub do_bin
0e394                 | _do_bin
0e394     01 4A 05 F6 | 	mov	COUNT_, #1
0e398     A8 00 A0 FD | 	call	#pushregs_
0e39c     18 F0 07 F1 | 	add	ptra, #24
0e3a0     4A 00 00 FF 
0e3a4     A0 E4 05 F1 | 	add	objptr, ##38048
0e3a8     F2 26 02 FB | 	rdlong	local01, objptr
0e3ac     13 17 02 F6 | 	mov	arg03, local01
0e3b0     01 16 66 F0 | 	shl	arg03, #1
0e3b4     13 17 02 F1 | 	add	arg03, local01
0e3b8     02 16 66 F0 | 	shl	arg03, #2
0e3bc     03 00 00 FF 
0e3c0     04 E4 85 F1 | 	sub	objptr, ##1540
0e3c4     F2 16 02 F1 | 	add	arg03, objptr
0e3c8     0B 17 02 FB | 	rdlong	arg03, arg03
0e3cc     0C 4E 05 F1 | 	add	fp, #12
0e3d0     A7 16 62 FC | 	wrlong	arg03, fp
0e3d4                 | ' 
0e3d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0e3d4                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e3d4     0C 4E 85 F1 | 	sub	fp, #12
0e3d8     03 16 16 F2 | 	cmp	arg03, #3 wc
0e3dc     47 00 00 FF 
0e3e0     9C E4 85 F1 | 	sub	objptr, ##36508
0e3e4     0C 4E 05 C1 |  if_b	add	fp, #12
0e3e8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e3ec     0C 4E 85 C1 |  if_b	sub	fp, #12
0e3f0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1200
0e3f4     00 12 06 F6 | 	mov	arg01, #0
0e3f8     B8 F9 B1 FD | 	call	#__system___getiolock_0620
0e3fc     FD 12 02 F6 | 	mov	arg01, result1
0e400     0C 9D B1 FD | 	call	#__system___lockmem
0e404     B4 01 00 FF 
0e408     9A 14 06 F6 | 	mov	arg02, ##@LR__5774
0e40c     00 12 06 F6 | 	mov	arg01, #0
0e410     00 16 06 F6 | 	mov	arg03, #0
0e414     F0 A9 B1 FD | 	call	#__system___basic_print_string
0e418     00 12 06 F6 | 	mov	arg01, #0
0e41c     94 F9 B1 FD | 	call	#__system___getiolock_0620
0e420     FD 00 68 FC | 	wrlong	#0, result1
0e424     27 12 06 F6 | 	mov	arg01, #39
0e428     00 14 06 F6 | 	mov	arg02, #0
0e42c     8C 62 B1 FD | 	call	#_printerror
0e430     B8 00 90 FD | 	jmp	#LR__1203
0e434                 | LR__1200
0e434                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e434     0C 4E 05 F1 | 	add	fp, #12
0e438     A7 26 02 FB | 	rdlong	local01, fp
0e43c     0C 4E 85 F1 | 	sub	fp, #12
0e440     02 26 0E F2 | 	cmp	local01, #2 wz
0e444     38 00 90 5D |  if_ne	jmp	#LR__1201
0e448     D4 F3 BF FD | 	call	#_pop
0e44c     FF 26 02 F6 | 	mov	local01, result3
0e450     A7 FA 61 FC | 	wrlong	result1, fp
0e454     04 4E 05 F1 | 	add	fp, #4
0e458     A7 FC 61 FC | 	wrlong	result2, fp
0e45c     04 4E 05 F1 | 	add	fp, #4
0e460     A7 26 62 FC | 	wrlong	local01, fp
0e464     08 4E 85 F1 | 	sub	fp, #8
0e468     A7 12 02 F6 | 	mov	arg01, fp
0e46c     94 F5 BF FD | 	call	#_converttoint
0e470     14 4E 05 F1 | 	add	fp, #20
0e474     A7 FA 61 FC | 	wrlong	result1, fp
0e478     14 4E 85 F1 | 	sub	fp, #20
0e47c     0C 00 90 FD | 	jmp	#LR__1202
0e480                 | LR__1201
0e480     14 4E 05 F1 | 	add	fp, #20
0e484     A7 00 68 FC | 	wrlong	#0, fp
0e488     14 4E 85 F1 | 	sub	fp, #20
0e48c                 | LR__1202
0e48c     90 F3 BF FD | 	call	#_pop
0e490     FF 26 02 F6 | 	mov	local01, result3
0e494     A7 FA 61 FC | 	wrlong	result1, fp
0e498     04 4E 05 F1 | 	add	fp, #4
0e49c     A7 FC 61 FC | 	wrlong	result2, fp
0e4a0     04 4E 05 F1 | 	add	fp, #4
0e4a4     A7 26 62 FC | 	wrlong	local01, fp
0e4a8     08 4E 85 F1 | 	sub	fp, #8
0e4ac     A7 12 02 F6 | 	mov	arg01, fp
0e4b0     50 F5 BF FD | 	call	#_converttoint
0e4b4     10 4E 05 F1 | 	add	fp, #16
0e4b8     A7 FA 61 FC | 	wrlong	result1, fp
0e4bc     FD 12 02 F6 | 	mov	arg01, result1
0e4c0     04 4E 05 F1 | 	add	fp, #4
0e4c4     A7 14 02 FB | 	rdlong	arg02, fp
0e4c8     14 4E 85 F1 | 	sub	fp, #20
0e4cc     02 16 06 F6 | 	mov	arg03, #2
0e4d0     10 BF B1 FD | 	call	#__system__Number_S
0e4d4     A7 FA 61 FC | 	wrlong	result1, fp
0e4d8     08 4E 05 F1 | 	add	fp, #8
0e4dc     A7 3E 68 FC | 	wrlong	#31, fp
0e4e0     08 4E 85 F1 | 	sub	fp, #8
0e4e4     A7 12 02 F6 | 	mov	arg01, fp
0e4e8     CC F3 BF FD | 	call	#_push
0e4ec                 | LR__1203
0e4ec     A7 F0 03 F6 | 	mov	ptra, fp
0e4f0     B2 00 A0 FD | 	call	#popregs_
0e4f4                 | _do_bin_ret
0e4f4     2D 00 64 FD | 	ret
0e4f8                 | 
0e4f8                 | ' 
0e4f8                 | ' '-------------------- box
0e4f8                 | ' 
0e4f8                 | ' sub do_box
0e4f8                 | _do_box
0e4f8     03 4A 05 F6 | 	mov	COUNT_, #3
0e4fc     A8 00 A0 FD | 	call	#pushregs_
0e500     30 F0 07 F1 | 	add	ptra, #48
0e504     18 F3 BF FD | 	call	#_pop
0e508     FD 1A 02 F6 | 	mov	arg05, result1
0e50c     FE 18 02 F6 | 	mov	arg04, result2
0e510     FF 16 02 F6 | 	mov	arg03, result3
0e514     24 4E 05 F1 | 	add	fp, #36
0e518     A7 1A 62 FC | 	wrlong	arg05, fp
0e51c     04 4E 05 F1 | 	add	fp, #4
0e520     A7 18 62 FC | 	wrlong	arg04, fp
0e524     04 4E 05 F1 | 	add	fp, #4
0e528     A7 16 62 FC | 	wrlong	arg03, fp
0e52c     2C 4E 85 F1 | 	sub	fp, #44
0e530     EC F2 BF FD | 	call	#_pop
0e534     FD 1A 02 F6 | 	mov	arg05, result1
0e538     FE 18 02 F6 | 	mov	arg04, result2
0e53c     FF 16 02 F6 | 	mov	arg03, result3
0e540     18 4E 05 F1 | 	add	fp, #24
0e544     A7 1A 62 FC | 	wrlong	arg05, fp
0e548     04 4E 05 F1 | 	add	fp, #4
0e54c     A7 18 62 FC | 	wrlong	arg04, fp
0e550     04 4E 05 F1 | 	add	fp, #4
0e554     A7 16 62 FC | 	wrlong	arg03, fp
0e558     20 4E 85 F1 | 	sub	fp, #32
0e55c     C0 F2 BF FD | 	call	#_pop
0e560     FD 1A 02 F6 | 	mov	arg05, result1
0e564     FE 18 02 F6 | 	mov	arg04, result2
0e568     FF 26 02 F6 | 	mov	local01, result3
0e56c     0C 4E 05 F1 | 	add	fp, #12
0e570     A7 1A 62 FC | 	wrlong	arg05, fp
0e574     04 4E 05 F1 | 	add	fp, #4
0e578     A7 18 62 FC | 	wrlong	arg04, fp
0e57c     04 4E 05 F1 | 	add	fp, #4
0e580     A7 26 62 FC | 	wrlong	local01, fp
0e584     14 4E 85 F1 | 	sub	fp, #20
0e588     94 F2 BF FD | 	call	#_pop
0e58c     A7 FA 61 FC | 	wrlong	result1, fp
0e590     04 4E 05 F1 | 	add	fp, #4
0e594     A7 FC 61 FC | 	wrlong	result2, fp
0e598     04 4E 05 F1 | 	add	fp, #4
0e59c     A7 FE 61 FC | 	wrlong	result3, fp
0e5a0                 | ' 
0e5a0                 | ' t4=pop()
0e5a0                 | ' t3=pop()
0e5a0                 | ' t2=pop()
0e5a0                 | ' t1=pop()
0e5a0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e5a0     FF 1A 02 F6 | 	mov	arg05, result3
0e5a4     08 4E 85 F1 | 	sub	fp, #8
0e5a8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e5ac     08 4E 05 51 |  if_ne	add	fp, #8
0e5b0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e5b4     08 4E 85 51 |  if_ne	sub	fp, #8
0e5b8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e5bc     A8 00 90 5D |  if_ne	jmp	#LR__1210
0e5c0     14 4E 05 F1 | 	add	fp, #20
0e5c4     A7 26 02 FB | 	rdlong	local01, fp
0e5c8     14 4E 85 F1 | 	sub	fp, #20
0e5cc     1C 26 0E F2 | 	cmp	local01, #28 wz
0e5d0     14 4E 05 51 |  if_ne	add	fp, #20
0e5d4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e5d8     14 4E 85 51 |  if_ne	sub	fp, #20
0e5dc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e5e0     84 00 90 5D |  if_ne	jmp	#LR__1210
0e5e4     20 4E 05 F1 | 	add	fp, #32
0e5e8     A7 26 02 FB | 	rdlong	local01, fp
0e5ec     20 4E 85 F1 | 	sub	fp, #32
0e5f0     1C 26 0E F2 | 	cmp	local01, #28 wz
0e5f4     20 4E 05 51 |  if_ne	add	fp, #32
0e5f8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e5fc     20 4E 85 51 |  if_ne	sub	fp, #32
0e600     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e604     60 00 90 5D |  if_ne	jmp	#LR__1210
0e608     2C 4E 05 F1 | 	add	fp, #44
0e60c     A7 26 02 FB | 	rdlong	local01, fp
0e610     2C 4E 85 F1 | 	sub	fp, #44
0e614     1C 26 0E F2 | 	cmp	local01, #28 wz
0e618     2C 4E 05 51 |  if_ne	add	fp, #44
0e61c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e620     2C 4E 85 51 |  if_ne	sub	fp, #44
0e624     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e628     3C 00 90 5D |  if_ne	jmp	#LR__1210
0e62c     A7 12 02 FB | 	rdlong	arg01, fp
0e630     0C 4E 05 F1 | 	add	fp, #12
0e634     A7 14 02 FB | 	rdlong	arg02, fp
0e638     0C 4E 05 F1 | 	add	fp, #12
0e63c     A7 16 02 FB | 	rdlong	arg03, fp
0e640     0C 4E 05 F1 | 	add	fp, #12
0e644     A7 18 02 FB | 	rdlong	arg04, fp
0e648     24 4E 85 F1 | 	sub	fp, #36
0e64c     37 00 00 FF 
0e650     48 E4 05 F1 | 	add	objptr, ##28232
0e654     F2 1A 02 FB | 	rdlong	arg05, objptr
0e658     37 00 00 FF 
0e65c     48 E4 85 F1 | 	sub	objptr, ##28232
0e660     14 7B B1 FD | 	call	#_hg010b_spin2_box
0e664                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e664     6C 00 90 FD | 	jmp	#LR__1211
0e668                 | LR__1210
0e668     A7 12 02 F6 | 	mov	arg01, fp
0e66c     94 F3 BF FD | 	call	#_converttoint
0e670     FD 28 02 F6 | 	mov	local02, result1
0e674     0C 4E 05 F1 | 	add	fp, #12
0e678     A7 12 02 F6 | 	mov	arg01, fp
0e67c     0C 4E 85 F1 | 	sub	fp, #12
0e680     80 F3 BF FD | 	call	#_converttoint
0e684     FD 2A 02 F6 | 	mov	local03, result1
0e688     18 4E 05 F1 | 	add	fp, #24
0e68c     A7 12 02 F6 | 	mov	arg01, fp
0e690     18 4E 85 F1 | 	sub	fp, #24
0e694     6C F3 BF FD | 	call	#_converttoint
0e698     FD 26 02 F6 | 	mov	local01, result1
0e69c     24 4E 05 F1 | 	add	fp, #36
0e6a0     A7 12 02 F6 | 	mov	arg01, fp
0e6a4     24 4E 85 F1 | 	sub	fp, #36
0e6a8     58 F3 BF FD | 	call	#_converttoint
0e6ac     FD 18 02 F6 | 	mov	arg04, result1
0e6b0     37 00 00 FF 
0e6b4     48 E4 05 F1 | 	add	objptr, ##28232
0e6b8     F2 1A 02 FB | 	rdlong	arg05, objptr
0e6bc     37 00 00 FF 
0e6c0     48 E4 85 F1 | 	sub	objptr, ##28232
0e6c4     14 13 02 F6 | 	mov	arg01, local02
0e6c8     15 15 02 F6 | 	mov	arg02, local03
0e6cc     13 17 02 F6 | 	mov	arg03, local01
0e6d0     A4 7A B1 FD | 	call	#_hg010b_spin2_box
0e6d4                 | LR__1211
0e6d4     A7 F0 03 F6 | 	mov	ptra, fp
0e6d8     B2 00 A0 FD | 	call	#popregs_
0e6dc                 | _do_box_ret
0e6dc     2D 00 64 FD | 	ret
0e6e0                 | 
0e6e0                 | ' 
0e6e0                 | ' '-------------------- brun
0e6e0                 | ' 
0e6e0                 | ' sub do_brun
0e6e0                 | _do_brun
0e6e0     08 4A 05 F6 | 	mov	COUNT_, #8
0e6e4     A8 00 A0 FD | 	call	#pushregs_
0e6e8     34 F1 BF FD | 	call	#_pop
0e6ec     FE 1A 02 F6 | 	mov	arg05, result2
0e6f0     FF 18 02 F6 | 	mov	arg04, result3
0e6f4     FD 26 02 F6 | 	mov	local01, result1
0e6f8     0D 29 02 F6 | 	mov	local02, arg05
0e6fc     0C 2B 02 F6 | 	mov	local03, arg04
0e700                 | ' 
0e700                 | ' t1=pop() 
0e700                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e700     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e704     10 00 90 5D |  if_ne	jmp	#LR__1220
0e708     13 13 02 F6 | 	mov	arg01, local01
0e70c     88 F2 BF FD | 	call	#_convertstring
0e710     FD 26 02 F6 | 	mov	local01, result1
0e714     1F 2A 06 F6 | 	mov	local03, #31
0e718                 | LR__1220
0e718                 | ' if t1.result_type=result_string then
0e718     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e71c     F0 01 90 5D |  if_ne	jmp	#LR__1224
0e720     13 2D 02 F6 | 	mov	local04, local01
0e724                 | '   filename=t1.result.sresult
0e724                 | '   if left$(filename,1)="/" then 
0e724     16 13 02 F6 | 	mov	arg01, local04
0e728     01 14 06 F6 | 	mov	arg02, #1
0e72c     60 BA B1 FD | 	call	#__system__Left_S
0e730     FD 12 02 F6 | 	mov	arg01, result1
0e734     B4 01 00 FF 
0e738     A1 14 06 F6 | 	mov	arg02, ##@LR__5775
0e73c     F8 99 B1 FD | 	call	#__system___string_cmp
0e740     00 FA 0D F2 | 	cmp	result1, #0 wz
0e744     16 2F 02 A6 |  if_e	mov	local05, local04
0e748     14 00 90 AD |  if_e	jmp	#LR__1221
0e74c     B4 01 00 FF 
0e750     A3 12 06 F6 | 	mov	arg01, ##@LR__5776
0e754     16 15 02 F6 | 	mov	arg02, local04
0e758     10 9A B1 FD | 	call	#__system___string_concat
0e75c     FD 2E 02 F6 | 	mov	local05, result1
0e760                 | LR__1221
0e760                 | '   open fullfilename for input as #9
0e760     09 12 06 F6 | 	mov	arg01, #9
0e764     17 15 02 F6 | 	mov	arg02, local05
0e768     00 16 06 F6 | 	mov	arg03, #0
0e76c     A4 A5 B1 FD | 	call	#__system___basic_open_string
0e770     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e774     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e778     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e77c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e780     FD 30 0A F6 | 	mov	local06, result1 wz
0e784                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e784     8C 00 90 AD |  if_e	jmp	#LR__1222
0e788     00 12 06 F6 | 	mov	arg01, #0
0e78c     24 F6 B1 FD | 	call	#__system___getiolock_0620
0e790     FD 12 02 F6 | 	mov	arg01, result1
0e794     78 99 B1 FD | 	call	#__system___lockmem
0e798     B4 01 00 FF 
0e79c     AC 14 06 F6 | 	mov	arg02, ##@LR__5777
0e7a0     00 12 06 F6 | 	mov	arg01, #0
0e7a4     00 16 06 F6 | 	mov	arg03, #0
0e7a8     5C A6 B1 FD | 	call	#__system___basic_print_string
0e7ac     00 12 06 F6 | 	mov	arg01, #0
0e7b0     18 15 02 F6 | 	mov	arg02, local06
0e7b4     00 16 06 F6 | 	mov	arg03, #0
0e7b8     0A 18 06 F6 | 	mov	arg04, #10
0e7bc     8C A6 B1 FD | 	call	#__system___basic_print_integer
0e7c0     B4 01 00 FF 
0e7c4     BA 14 06 F6 | 	mov	arg02, ##@LR__5778
0e7c8     00 12 06 F6 | 	mov	arg01, #0
0e7cc     00 16 06 F6 | 	mov	arg03, #0
0e7d0     34 A6 B1 FD | 	call	#__system___basic_print_string
0e7d4     18 13 02 F6 | 	mov	arg01, local06
0e7d8     C4 C2 B1 FD | 	call	#__system___strerror
0e7dc     FD 14 02 F6 | 	mov	arg02, result1
0e7e0     00 12 06 F6 | 	mov	arg01, #0
0e7e4     00 16 06 F6 | 	mov	arg03, #0
0e7e8     1C A6 B1 FD | 	call	#__system___basic_print_string
0e7ec     00 12 06 F6 | 	mov	arg01, #0
0e7f0     0A 14 06 F6 | 	mov	arg02, #10
0e7f4     00 16 06 F6 | 	mov	arg03, #0
0e7f8     B4 A5 B1 FD | 	call	#__system___basic_print_char
0e7fc     00 12 06 F6 | 	mov	arg01, #0
0e800     B0 F5 B1 FD | 	call	#__system___getiolock_0620
0e804     FD 00 68 FC | 	wrlong	#0, result1
0e808     09 12 06 F6 | 	mov	arg01, #9
0e80c     54 EC B1 FD | 	call	#__system__close
0e810     FC 00 90 FD | 	jmp	#LR__1225
0e814                 | LR__1222
0e814     01 32 06 F6 | 	mov	local07, #1
0e818     00 34 06 F6 | 	mov	local08, #0
0e81c                 | '   do
0e81c                 | LR__1223
0e81c                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e81c     4E 00 00 FF 
0e820     D4 E4 05 F1 | 	add	objptr, ##40148
0e824     F2 16 02 F6 | 	mov	arg03, objptr
0e828     4E 00 00 FF 
0e82c     D4 E4 85 F1 | 	sub	objptr, ##40148
0e830     09 12 06 F6 | 	mov	arg01, #9
0e834     19 15 02 F6 | 	mov	arg02, local07
0e838     0A 18 C6 F9 | 	decod	arg04, #10
0e83c     01 1A 06 F6 | 	mov	arg05, #1
0e840     40 A7 B1 FD | 	call	#__system___basic_get
0e844     FD 30 02 F6 | 	mov	local06, result1
0e848     FD 32 02 F1 | 	add	local07, result1
0e84c     4E 00 00 FF 
0e850     D4 E4 05 F1 | 	add	objptr, ##40148
0e854     F2 12 02 F6 | 	mov	arg01, objptr
0e858     1A 15 02 F6 | 	mov	arg02, local08
0e85c     0A 16 C6 F9 | 	decod	arg03, #10
0e860     43 00 00 FF 
0e864     08 E4 85 F1 | 	sub	objptr, ##34312
0e868     9C 8C B1 FD | 	call	#_psram_spin2_write
0e86c     0B 00 00 FF 
0e870     CC E4 85 F1 | 	sub	objptr, ##5836
0e874     18 35 02 F1 | 	add	local08, local06
0e878     02 00 00 FF 
0e87c     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e880     E0 03 00 AF 
0e884     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e888     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1223
0e88c     37 00 00 FF 
0e890     1C E4 05 F1 | 	add	objptr, ##28188
0e894     F2 12 02 FB | 	rdlong	arg01, objptr
0e898     03 12 62 FD | 	cogstop	arg01
0e89c     04 E4 05 F1 | 	add	objptr, #4
0e8a0     F2 12 02 FB | 	rdlong	arg01, objptr
0e8a4     03 12 62 FD | 	cogstop	arg01
0e8a8     04 E4 05 F1 | 	add	objptr, #4
0e8ac     F2 12 02 FB | 	rdlong	arg01, objptr
0e8b0     03 12 62 FD | 	cogstop	arg01
0e8b4     19 00 00 FF 
0e8b8     3C E5 05 F1 | 	add	objptr, ##13116
0e8bc     F2 12 02 FB | 	rdlong	arg01, objptr
0e8c0     03 12 62 FD | 	cogstop	arg01
0e8c4     18 00 00 FF 
0e8c8     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e8cc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e8d0     18 00 00 FF 
0e8d4     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e8d8     19 00 00 FF 
0e8dc     34 E5 85 F1 | 	sub	objptr, ##13108
0e8e0     1E 34 06 F6 | 	mov	local08, #30
0e8e4     28 E4 61 FD | 	setq	objptr
0e8e8     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e8ec     01 34 66 C6 |  if_b	neg	local08, #1
0e8f0     1B 00 00 FF 
0e8f4     44 E5 05 F1 | 	add	objptr, ##14148
0e8f8     F2 34 62 FC | 	wrlong	local08, objptr
0e8fc     52 00 00 FF 
0e900     70 E5 85 F1 | 	sub	objptr, ##42352
0e904     00 12 06 F6 | 	mov	arg01, #0
0e908     01 12 62 FD | 	cogid	arg01
0e90c     03 12 62 FD | 	cogstop	arg01
0e910                 | LR__1224
0e910                 | LR__1225
0e910     A7 F0 03 F6 | 	mov	ptra, fp
0e914     B2 00 A0 FD | 	call	#popregs_
0e918                 | _do_brun_ret
0e918     2D 00 64 FD | 	ret
0e91c                 | 
0e91c                 | ' 
0e91c                 | ' '-------------------- cd
0e91c                 | ' 
0e91c                 | ' sub do_cd
0e91c                 | _do_cd
0e91c     06 4A 05 F6 | 	mov	COUNT_, #6
0e920     A8 00 A0 FD | 	call	#pushregs_
0e924     B4 01 00 FF 
0e928     BD 12 06 F6 | 	mov	arg01, ##@LR__5779
0e92c     31 14 06 F6 | 	mov	arg02, #49
0e930     40 F6 B1 FD | 	call	#__system___basic_dir
0e934     E8 EE BF FD | 	call	#_pop
0e938     FE 18 02 F6 | 	mov	arg04, result2
0e93c     FF 16 02 F6 | 	mov	arg03, result3
0e940     FD 26 02 F6 | 	mov	local01, result1
0e944     0C 29 02 F6 | 	mov	local02, arg04
0e948     0B 2B 02 F6 | 	mov	local03, arg03
0e94c                 | ' t1=pop()
0e94c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e94c     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e950     10 00 90 5D |  if_ne	jmp	#LR__1230
0e954     13 13 02 F6 | 	mov	arg01, local01
0e958     3C F0 BF FD | 	call	#_convertstring
0e95c     FD 26 02 F6 | 	mov	local01, result1
0e960     1F 2A 06 F6 | 	mov	local03, #31
0e964                 | LR__1230
0e964                 | ' if t1.result_type<>result_string then printerror(15): return
0e964     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e968     10 00 90 AD |  if_e	jmp	#LR__1231
0e96c     0F 12 06 F6 | 	mov	arg01, #15
0e970     00 14 06 F6 | 	mov	arg02, #0
0e974     44 5D B1 FD | 	call	#_printerror
0e978     54 05 90 FD | 	jmp	#LR__1249
0e97c                 | LR__1231
0e97c     13 2D 02 F6 | 	mov	local04, local01
0e980                 | ' newdir$=t1.result.sresult
0e980                 | ' if newdir$=".." then 
0e980     B4 01 00 FF 
0e984     BF 14 06 F6 | 	mov	arg02, ##@LR__5780
0e988     16 13 02 F6 | 	mov	arg01, local04
0e98c     A8 97 B1 FD | 	call	#__system___string_cmp
0e990     00 FA 0D F2 | 	cmp	result1, #0 wz
0e994     C8 01 90 5D |  if_ne	jmp	#LR__1238
0e998     4A 00 00 FF 
0e99c     B4 E4 05 F1 | 	add	objptr, ##38068
0e9a0     F2 12 02 FB | 	rdlong	arg01, objptr
0e9a4     4A 00 00 FF 
0e9a8     B4 E4 85 F1 | 	sub	objptr, ##38068
0e9ac     09 2F 02 F6 | 	mov	local05, arg01
0e9b0     97 06 48 FB | 	callpa	#(@LR__1233-@LR__1232)>>2,fcache_load_ptr_
0e9b4                 | LR__1232
0e9b4     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e9b8     01 2E 06 51 |  if_ne	add	local05, #1
0e9bc     F4 FF 9F 5D |  if_ne	jmp	#LR__1232
0e9c0                 | LR__1233
0e9c0     17 13 C2 F2 | 	subr	arg01, local05
0e9c4     4A 00 00 FF 
0e9c8     B4 E4 05 F1 | 	add	objptr, ##38068
0e9cc     F2 14 02 FB | 	rdlong	arg02, objptr
0e9d0     4A 00 00 FF 
0e9d4     B4 E4 85 F1 | 	sub	objptr, ##38068
0e9d8     B4 01 00 FF 
0e9dc     C2 16 06 F6 | 	mov	arg03, ##@LR__5781
0e9e0     F8 BD B1 FD | 	call	#__system__InstrRev
0e9e4     FD 2C 02 F6 | 	mov	local04, result1
0e9e8                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e9e8     02 2C 56 F2 | 	cmps	local04, #2 wc
0e9ec     28 00 90 CD |  if_b	jmp	#LR__1234
0e9f0     4A 00 00 FF 
0e9f4     B4 E4 05 F1 | 	add	objptr, ##38068
0e9f8     F2 12 02 FB | 	rdlong	arg01, objptr
0e9fc     4A 00 00 FF 
0ea00     B4 E4 85 F1 | 	sub	objptr, ##38068
0ea04     01 2C 86 F1 | 	sub	local04, #1
0ea08     16 15 02 F6 | 	mov	arg02, local04
0ea0c     80 B7 B1 FD | 	call	#__system__Left_S
0ea10     FD 2C 02 F6 | 	mov	local04, result1
0ea14     08 00 90 FD | 	jmp	#LR__1235
0ea18                 | LR__1234
0ea18     B4 01 00 FF 
0ea1c     C4 2C 06 F6 | 	mov	local04, ##@LR__5782
0ea20                 | LR__1235
0ea20     16 13 02 F6 | 	mov	arg01, local04
0ea24     74 9D B1 FD | 	call	#__system___chdir
0ea28     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ea2c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ea30     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ea34     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ea38     FD 30 0A F6 | 	mov	local06, result1 wz
0ea3c                 | '   chdir newdir$
0ea3c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ea3c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ea40     A4 00 90 AD |  if_e	jmp	#LR__1236
0ea44     00 12 06 F6 | 	mov	arg01, #0
0ea48     68 F3 B1 FD | 	call	#__system___getiolock_0620
0ea4c     FD 12 02 F6 | 	mov	arg01, result1
0ea50     BC 96 B1 FD | 	call	#__system___lockmem
0ea54     B4 01 00 FF 
0ea58     C6 14 06 F6 | 	mov	arg02, ##@LR__5783
0ea5c     00 12 06 F6 | 	mov	arg01, #0
0ea60     00 16 06 F6 | 	mov	arg03, #0
0ea64     A0 A3 B1 FD | 	call	#__system___basic_print_string
0ea68     00 12 06 F6 | 	mov	arg01, #0
0ea6c     18 15 02 F6 | 	mov	arg02, local06
0ea70     00 16 06 F6 | 	mov	arg03, #0
0ea74     0A 18 06 F6 | 	mov	arg04, #10
0ea78     D0 A3 B1 FD | 	call	#__system___basic_print_integer
0ea7c     B4 01 00 FF 
0ea80     D4 14 06 F6 | 	mov	arg02, ##@LR__5784
0ea84     00 12 06 F6 | 	mov	arg01, #0
0ea88     00 16 06 F6 | 	mov	arg03, #0
0ea8c     78 A3 B1 FD | 	call	#__system___basic_print_string
0ea90     45 00 00 FF 
0ea94     70 E5 05 F1 | 	add	objptr, ##35696
0ea98     F2 14 02 FB | 	rdlong	arg02, objptr
0ea9c     45 00 00 FF 
0eaa0     70 E5 85 F1 | 	sub	objptr, ##35696
0eaa4     00 12 06 F6 | 	mov	arg01, #0
0eaa8     00 16 06 F6 | 	mov	arg03, #0
0eaac     58 A3 B1 FD | 	call	#__system___basic_print_string
0eab0     00 12 06 F6 | 	mov	arg01, #0
0eab4     0A 14 06 F6 | 	mov	arg02, #10
0eab8     00 16 06 F6 | 	mov	arg03, #0
0eabc     F0 A2 B1 FD | 	call	#__system___basic_print_char
0eac0     00 12 06 F6 | 	mov	arg01, #0
0eac4     EC F2 B1 FD | 	call	#__system___getiolock_0620
0eac8     FD 00 68 FC | 	wrlong	#0, result1
0eacc     4A 00 00 FF 
0ead0     B4 E4 05 F1 | 	add	objptr, ##38068
0ead4     F2 12 02 FB | 	rdlong	arg01, objptr
0ead8     4A 00 00 FF 
0eadc     B4 E4 85 F1 | 	sub	objptr, ##38068
0eae0     B8 9C B1 FD | 	call	#__system___chdir
0eae4     14 00 90 FD | 	jmp	#LR__1237
0eae8                 | LR__1236
0eae8     4A 00 00 FF 
0eaec     B4 E4 05 F1 | 	add	objptr, ##38068
0eaf0     F2 2C 62 FC | 	wrlong	local04, objptr
0eaf4     4A 00 00 FF 
0eaf8     B4 E4 85 F1 | 	sub	objptr, ##38068
0eafc                 | LR__1237
0eafc                 | '   print "Current directory: ";currentdir$
0eafc     00 12 06 F6 | 	mov	arg01, #0
0eb00     B0 F2 B1 FD | 	call	#__system___getiolock_0620
0eb04     FD 12 02 F6 | 	mov	arg01, result1
0eb08     04 96 B1 FD | 	call	#__system___lockmem
0eb0c     B4 01 00 FF 
0eb10     D7 14 06 F6 | 	mov	arg02, ##@LR__5785
0eb14     00 12 06 F6 | 	mov	arg01, #0
0eb18     00 16 06 F6 | 	mov	arg03, #0
0eb1c     E8 A2 B1 FD | 	call	#__system___basic_print_string
0eb20     4A 00 00 FF 
0eb24     B4 E4 05 F1 | 	add	objptr, ##38068
0eb28     F2 14 02 FB | 	rdlong	arg02, objptr
0eb2c     4A 00 00 FF 
0eb30     B4 E4 85 F1 | 	sub	objptr, ##38068
0eb34     00 12 06 F6 | 	mov	arg01, #0
0eb38     00 16 06 F6 | 	mov	arg03, #0
0eb3c     C8 A2 B1 FD | 	call	#__system___basic_print_string
0eb40     00 12 06 F6 | 	mov	arg01, #0
0eb44     0A 14 06 F6 | 	mov	arg02, #10
0eb48     00 16 06 F6 | 	mov	arg03, #0
0eb4c     60 A2 B1 FD | 	call	#__system___basic_print_char
0eb50     00 12 06 F6 | 	mov	arg01, #0
0eb54     5C F2 B1 FD | 	call	#__system___getiolock_0620
0eb58     FD 00 68 FC | 	wrlong	#0, result1
0eb5c                 | '   return
0eb5c     70 03 90 FD | 	jmp	#LR__1249
0eb60                 | LR__1238
0eb60                 | ' if left$(newdir$,1)="/" then 
0eb60     16 13 02 F6 | 	mov	arg01, local04
0eb64     01 14 06 F6 | 	mov	arg02, #1
0eb68     24 B6 B1 FD | 	call	#__system__Left_S
0eb6c     FD 12 02 F6 | 	mov	arg01, result1
0eb70     B4 01 00 FF 
0eb74     EB 14 06 F6 | 	mov	arg02, ##@LR__5786
0eb78     BC 95 B1 FD | 	call	#__system___string_cmp
0eb7c     00 FA 0D F2 | 	cmp	result1, #0 wz
0eb80     40 01 90 5D |  if_ne	jmp	#LR__1241
0eb84     16 13 02 F6 | 	mov	arg01, local04
0eb88     10 9C B1 FD | 	call	#__system___chdir
0eb8c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eb90     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eb94     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0eb98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0eb9c     FD 30 0A F6 | 	mov	local06, result1 wz
0eba0                 | '   chdir(newdir$)
0eba0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eba0     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0eba4     A4 00 90 AD |  if_e	jmp	#LR__1239
0eba8     00 12 06 F6 | 	mov	arg01, #0
0ebac     04 F2 B1 FD | 	call	#__system___getiolock_0620
0ebb0     FD 12 02 F6 | 	mov	arg01, result1
0ebb4     58 95 B1 FD | 	call	#__system___lockmem
0ebb8     B4 01 00 FF 
0ebbc     ED 14 06 F6 | 	mov	arg02, ##@LR__5787
0ebc0     00 12 06 F6 | 	mov	arg01, #0
0ebc4     00 16 06 F6 | 	mov	arg03, #0
0ebc8     3C A2 B1 FD | 	call	#__system___basic_print_string
0ebcc     00 12 06 F6 | 	mov	arg01, #0
0ebd0     18 15 02 F6 | 	mov	arg02, local06
0ebd4     00 16 06 F6 | 	mov	arg03, #0
0ebd8     0A 18 06 F6 | 	mov	arg04, #10
0ebdc     6C A2 B1 FD | 	call	#__system___basic_print_integer
0ebe0     B4 01 00 FF 
0ebe4     FB 14 06 F6 | 	mov	arg02, ##@LR__5788
0ebe8     00 12 06 F6 | 	mov	arg01, #0
0ebec     00 16 06 F6 | 	mov	arg03, #0
0ebf0     14 A2 B1 FD | 	call	#__system___basic_print_string
0ebf4     45 00 00 FF 
0ebf8     70 E5 05 F1 | 	add	objptr, ##35696
0ebfc     F2 14 02 FB | 	rdlong	arg02, objptr
0ec00     45 00 00 FF 
0ec04     70 E5 85 F1 | 	sub	objptr, ##35696
0ec08     00 12 06 F6 | 	mov	arg01, #0
0ec0c     00 16 06 F6 | 	mov	arg03, #0
0ec10     F4 A1 B1 FD | 	call	#__system___basic_print_string
0ec14     00 12 06 F6 | 	mov	arg01, #0
0ec18     0A 14 06 F6 | 	mov	arg02, #10
0ec1c     00 16 06 F6 | 	mov	arg03, #0
0ec20     8C A1 B1 FD | 	call	#__system___basic_print_char
0ec24     00 12 06 F6 | 	mov	arg01, #0
0ec28     88 F1 B1 FD | 	call	#__system___getiolock_0620
0ec2c     FD 00 68 FC | 	wrlong	#0, result1
0ec30     4A 00 00 FF 
0ec34     B4 E4 05 F1 | 	add	objptr, ##38068
0ec38     F2 12 02 FB | 	rdlong	arg01, objptr
0ec3c     4A 00 00 FF 
0ec40     B4 E4 85 F1 | 	sub	objptr, ##38068
0ec44     54 9B B1 FD | 	call	#__system___chdir
0ec48     14 00 90 FD | 	jmp	#LR__1240
0ec4c                 | LR__1239
0ec4c     4A 00 00 FF 
0ec50     B4 E4 05 F1 | 	add	objptr, ##38068
0ec54     F2 2C 62 FC | 	wrlong	local04, objptr
0ec58     4A 00 00 FF 
0ec5c     B4 E4 85 F1 | 	sub	objptr, ##38068
0ec60                 | LR__1240
0ec60                 | '   print "Current directory: ";currentdir$
0ec60     00 12 06 F6 | 	mov	arg01, #0
0ec64     4C F1 B1 FD | 	call	#__system___getiolock_0620
0ec68     FD 12 02 F6 | 	mov	arg01, result1
0ec6c     A0 94 B1 FD | 	call	#__system___lockmem
0ec70     B4 01 00 FF 
0ec74     FE 14 06 F6 | 	mov	arg02, ##@LR__5789
0ec78     00 12 06 F6 | 	mov	arg01, #0
0ec7c     00 16 06 F6 | 	mov	arg03, #0
0ec80     84 A1 B1 FD | 	call	#__system___basic_print_string
0ec84     4A 00 00 FF 
0ec88     B4 E4 05 F1 | 	add	objptr, ##38068
0ec8c     F2 14 02 FB | 	rdlong	arg02, objptr
0ec90     4A 00 00 FF 
0ec94     B4 E4 85 F1 | 	sub	objptr, ##38068
0ec98     00 12 06 F6 | 	mov	arg01, #0
0ec9c     00 16 06 F6 | 	mov	arg03, #0
0eca0     64 A1 B1 FD | 	call	#__system___basic_print_string
0eca4     00 12 06 F6 | 	mov	arg01, #0
0eca8     0A 14 06 F6 | 	mov	arg02, #10
0ecac     00 16 06 F6 | 	mov	arg03, #0
0ecb0     FC A0 B1 FD | 	call	#__system___basic_print_char
0ecb4     00 12 06 F6 | 	mov	arg01, #0
0ecb8     F8 F0 B1 FD | 	call	#__system___getiolock_0620
0ecbc     FD 00 68 FC | 	wrlong	#0, result1
0ecc0                 | '   return
0ecc0     0C 02 90 FD | 	jmp	#LR__1249
0ecc4                 | LR__1241
0ecc4                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ecc4     4A 00 00 FF 
0ecc8     B4 E4 05 F1 | 	add	objptr, ##38068
0eccc     F2 12 02 FB | 	rdlong	arg01, objptr
0ecd0     4A 00 00 FF 
0ecd4     B4 E4 85 F1 | 	sub	objptr, ##38068
0ecd8     B4 01 00 FF 
0ecdc     12 15 06 F6 | 	mov	arg02, ##@LR__5790
0ece0     54 94 B1 FD | 	call	#__system___string_cmp
0ece4     00 FA 0D F2 | 	cmp	result1, #0 wz
0ece8     34 00 90 AD |  if_e	jmp	#LR__1242
0ecec     4A 00 00 FF 
0ecf0     B4 E4 05 F1 | 	add	objptr, ##38068
0ecf4     F2 12 02 FB | 	rdlong	arg01, objptr
0ecf8     4A 00 00 FF 
0ecfc     B4 E4 85 F1 | 	sub	objptr, ##38068
0ed00     B4 01 00 FF 
0ed04     14 15 06 F6 | 	mov	arg02, ##@LR__5791
0ed08     60 94 B1 FD | 	call	#__system___string_concat
0ed0c     FD 12 02 F6 | 	mov	arg01, result1
0ed10     16 15 02 F6 | 	mov	arg02, local04
0ed14     54 94 B1 FD | 	call	#__system___string_concat
0ed18     FD 2C 02 F6 | 	mov	local04, result1
0ed1c     20 00 90 FD | 	jmp	#LR__1243
0ed20                 | LR__1242
0ed20     4A 00 00 FF 
0ed24     B4 E4 05 F1 | 	add	objptr, ##38068
0ed28     F2 12 02 FB | 	rdlong	arg01, objptr
0ed2c     4A 00 00 FF 
0ed30     B4 E4 85 F1 | 	sub	objptr, ##38068
0ed34     16 15 02 F6 | 	mov	arg02, local04
0ed38     30 94 B1 FD | 	call	#__system___string_concat
0ed3c     FD 2C 02 F6 | 	mov	local04, result1
0ed40                 | LR__1243
0ed40                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ed40     16 13 02 F6 | 	mov	arg01, local04
0ed44     01 14 06 F6 | 	mov	arg02, #1
0ed48     CC B4 B1 FD | 	call	#__system__Right_S
0ed4c     FD 12 02 F6 | 	mov	arg01, result1
0ed50     B4 01 00 FF 
0ed54     16 15 06 F6 | 	mov	arg02, ##@LR__5792
0ed58     DC 93 B1 FD | 	call	#__system___string_cmp
0ed5c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ed60     30 00 90 5D |  if_ne	jmp	#LR__1246
0ed64     16 13 02 F6 | 	mov	arg01, local04
0ed68     09 2F 02 F6 | 	mov	local05, arg01
0ed6c     97 06 48 FB | 	callpa	#(@LR__1245-@LR__1244)>>2,fcache_load_ptr_
0ed70                 | LR__1244
0ed70     17 FB C9 FA | 	rdbyte	result1, local05 wz
0ed74     01 2E 06 51 |  if_ne	add	local05, #1
0ed78     F4 FF 9F 5D |  if_ne	jmp	#LR__1244
0ed7c                 | LR__1245
0ed7c     09 2F 82 F1 | 	sub	local05, arg01
0ed80     17 15 02 F6 | 	mov	arg02, local05
0ed84     01 14 86 F1 | 	sub	arg02, #1
0ed88     16 13 02 F6 | 	mov	arg01, local04
0ed8c     00 B4 B1 FD | 	call	#__system__Left_S
0ed90     FD 2C 02 F6 | 	mov	local04, result1
0ed94                 | LR__1246
0ed94     16 13 02 F6 | 	mov	arg01, local04
0ed98     00 9A B1 FD | 	call	#__system___chdir
0ed9c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eda0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eda4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0eda8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0edac     FD 30 0A F6 | 	mov	local06, result1 wz
0edb0                 | '   chdir(newdir$)
0edb0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0edb0     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0edb4     A4 00 90 AD |  if_e	jmp	#LR__1247
0edb8     00 12 06 F6 | 	mov	arg01, #0
0edbc     F4 EF B1 FD | 	call	#__system___getiolock_0620
0edc0     FD 12 02 F6 | 	mov	arg01, result1
0edc4     48 93 B1 FD | 	call	#__system___lockmem
0edc8     B4 01 00 FF 
0edcc     18 15 06 F6 | 	mov	arg02, ##@LR__5793
0edd0     00 12 06 F6 | 	mov	arg01, #0
0edd4     00 16 06 F6 | 	mov	arg03, #0
0edd8     2C A0 B1 FD | 	call	#__system___basic_print_string
0eddc     00 12 06 F6 | 	mov	arg01, #0
0ede0     18 15 02 F6 | 	mov	arg02, local06
0ede4     00 16 06 F6 | 	mov	arg03, #0
0ede8     0A 18 06 F6 | 	mov	arg04, #10
0edec     5C A0 B1 FD | 	call	#__system___basic_print_integer
0edf0     B4 01 00 FF 
0edf4     26 15 06 F6 | 	mov	arg02, ##@LR__5794
0edf8     00 12 06 F6 | 	mov	arg01, #0
0edfc     00 16 06 F6 | 	mov	arg03, #0
0ee00     04 A0 B1 FD | 	call	#__system___basic_print_string
0ee04     45 00 00 FF 
0ee08     70 E5 05 F1 | 	add	objptr, ##35696
0ee0c     F2 14 02 FB | 	rdlong	arg02, objptr
0ee10     45 00 00 FF 
0ee14     70 E5 85 F1 | 	sub	objptr, ##35696
0ee18     00 12 06 F6 | 	mov	arg01, #0
0ee1c     00 16 06 F6 | 	mov	arg03, #0
0ee20     E4 9F B1 FD | 	call	#__system___basic_print_string
0ee24     00 12 06 F6 | 	mov	arg01, #0
0ee28     0A 14 06 F6 | 	mov	arg02, #10
0ee2c     00 16 06 F6 | 	mov	arg03, #0
0ee30     7C 9F B1 FD | 	call	#__system___basic_print_char
0ee34     00 12 06 F6 | 	mov	arg01, #0
0ee38     78 EF B1 FD | 	call	#__system___getiolock_0620
0ee3c     FD 00 68 FC | 	wrlong	#0, result1
0ee40     4A 00 00 FF 
0ee44     B4 E4 05 F1 | 	add	objptr, ##38068
0ee48     F2 12 02 FB | 	rdlong	arg01, objptr
0ee4c     4A 00 00 FF 
0ee50     B4 E4 85 F1 | 	sub	objptr, ##38068
0ee54     44 99 B1 FD | 	call	#__system___chdir
0ee58     14 00 90 FD | 	jmp	#LR__1248
0ee5c                 | LR__1247
0ee5c     4A 00 00 FF 
0ee60     B4 E4 05 F1 | 	add	objptr, ##38068
0ee64     F2 2C 62 FC | 	wrlong	local04, objptr
0ee68     4A 00 00 FF 
0ee6c     B4 E4 85 F1 | 	sub	objptr, ##38068
0ee70                 | LR__1248
0ee70                 | '   print "Current directory: ";currentdir$
0ee70     00 12 06 F6 | 	mov	arg01, #0
0ee74     3C EF B1 FD | 	call	#__system___getiolock_0620
0ee78     FD 12 02 F6 | 	mov	arg01, result1
0ee7c     90 92 B1 FD | 	call	#__system___lockmem
0ee80     B4 01 00 FF 
0ee84     29 15 06 F6 | 	mov	arg02, ##@LR__5795
0ee88     00 12 06 F6 | 	mov	arg01, #0
0ee8c     00 16 06 F6 | 	mov	arg03, #0
0ee90     74 9F B1 FD | 	call	#__system___basic_print_string
0ee94     4A 00 00 FF 
0ee98     B4 E4 05 F1 | 	add	objptr, ##38068
0ee9c     F2 14 02 FB | 	rdlong	arg02, objptr
0eea0     4A 00 00 FF 
0eea4     B4 E4 85 F1 | 	sub	objptr, ##38068
0eea8     00 12 06 F6 | 	mov	arg01, #0
0eeac     00 16 06 F6 | 	mov	arg03, #0
0eeb0     54 9F B1 FD | 	call	#__system___basic_print_string
0eeb4     00 12 06 F6 | 	mov	arg01, #0
0eeb8     0A 14 06 F6 | 	mov	arg02, #10
0eebc     00 16 06 F6 | 	mov	arg03, #0
0eec0     EC 9E B1 FD | 	call	#__system___basic_print_char
0eec4     00 12 06 F6 | 	mov	arg01, #0
0eec8     E8 EE B1 FD | 	call	#__system___getiolock_0620
0eecc     FD 00 68 FC | 	wrlong	#0, result1
0eed0                 | LR__1249
0eed0     A7 F0 03 F6 | 	mov	ptra, fp
0eed4     B2 00 A0 FD | 	call	#popregs_
0eed8                 | _do_cd_ret
0eed8     2D 00 64 FD | 	ret
0eedc                 | 
0eedc                 | ' 
0eedc                 | ' '-------------------- changefreq
0eedc                 | ' 
0eedc                 | ' sub do_changefreq
0eedc                 | _do_changefreq
0eedc     04 4A 05 F6 | 	mov	COUNT_, #4
0eee0     A8 00 A0 FD | 	call	#pushregs_
0eee4     2C F0 07 F1 | 	add	ptra, #44
0eee8     34 E9 BF FD | 	call	#_pop
0eeec     FF 14 02 F6 | 	mov	arg02, result3
0eef0     A7 FA 61 FC | 	wrlong	result1, fp
0eef4     04 4E 05 F1 | 	add	fp, #4
0eef8     A7 FC 61 FC | 	wrlong	result2, fp
0eefc     04 4E 05 F1 | 	add	fp, #4
0ef00     A7 14 62 FC | 	wrlong	arg02, fp
0ef04     08 4E 85 F1 | 	sub	fp, #8
0ef08     A7 12 02 F6 | 	mov	arg01, fp
0ef0c     B0 EB BF FD | 	call	#_converttofloat
0ef10     FD 14 02 F6 | 	mov	arg02, result1
0ef14     28 4E 05 F1 | 	add	fp, #40
0ef18     A7 14 62 FC | 	wrlong	arg02, fp
0ef1c     28 4E 85 F1 | 	sub	fp, #40
0ef20     FC E8 BF FD | 	call	#_pop
0ef24     FF 14 02 F6 | 	mov	arg02, result3
0ef28     A7 FA 61 FC | 	wrlong	result1, fp
0ef2c     04 4E 05 F1 | 	add	fp, #4
0ef30     A7 FC 61 FC | 	wrlong	result2, fp
0ef34     04 4E 05 F1 | 	add	fp, #4
0ef38     A7 14 62 FC | 	wrlong	arg02, fp
0ef3c     08 4E 85 F1 | 	sub	fp, #8
0ef40     A7 12 02 F6 | 	mov	arg01, fp
0ef44     BC EA BF FD | 	call	#_converttoint
0ef48     FD 14 52 F6 | 	abs	arg02, result1 wc
0ef4c     07 14 06 F5 | 	and	arg02, #7
0ef50     0A 15 82 F6 | 	negc	arg02, arg02
0ef54     0C 4E 05 F1 | 	add	fp, #12
0ef58     A7 14 62 FC | 	wrlong	arg02, fp
0ef5c     0A 13 02 F6 | 	mov	arg01, arg02
0ef60     03 12 66 F0 | 	shl	arg01, #3
0ef64     0A 13 82 F1 | 	sub	arg01, arg02
0ef68     02 12 66 F0 | 	shl	arg01, #2
0ef6c     14 00 00 FF 
0ef70     38 E5 05 F1 | 	add	objptr, ##10552
0ef74     F2 12 02 F1 | 	add	arg01, objptr
0ef78     16 12 06 F1 | 	add	arg01, #22
0ef7c     09 15 E2 FA | 	rdword	arg02, arg01
0ef80     14 4E 05 F1 | 	add	fp, #20
0ef84     A7 14 62 FC | 	wrlong	arg02, fp
0ef88                 | ' amode=channels(channel).amode
0ef88                 | ' if amode>0 then
0ef88     20 4E 85 F1 | 	sub	fp, #32
0ef8c     01 14 56 F2 | 	cmps	arg02, #1 wc
0ef90     14 00 00 FF 
0ef94     38 E5 85 F1 | 	sub	objptr, ##10552
0ef98     38 02 90 CD |  if_b	jmp	#LR__1252
0ef9c     28 4E 05 F1 | 	add	fp, #40
0efa0     A7 14 02 FB | 	rdlong	arg02, fp
0efa4     28 4E 85 F1 | 	sub	fp, #40
0efa8     FC 16 20 FF 
0efac     54 12 06 F6 | 	mov	arg01, ##1076754516
0efb0     AC CF B1 FD | 	call	#__system____builtin_logbase
0efb4     FD 26 02 F6 | 	mov	local01, result1
0efb8     1E 14 C6 F9 | 	decod	arg02, #30
0efbc     FC 16 20 FF 
0efc0     54 12 06 F6 | 	mov	arg01, ##1076754516
0efc4     98 CF B1 FD | 	call	#__system____builtin_logbase
0efc8     FD 14 02 F6 | 	mov	arg02, result1
0efcc     13 13 02 F6 | 	mov	arg01, local01
0efd0     BC C1 B1 FD | 	call	#__system___float_div
0efd4     FD 12 02 F6 | 	mov	arg01, result1
0efd8     00 14 06 F6 | 	mov	arg02, #0
0efdc     74 C4 B1 FD | 	call	#__system___float_tointeger
0efe0     10 4E 05 F1 | 	add	fp, #16
0efe4     A7 FA 61 FC | 	wrlong	result1, fp
0efe8     1E 26 C6 F9 | 	decod	local01, #30
0efec     FD 12 02 F6 | 	mov	arg01, result1
0eff0     10 4E 05 F1 | 	add	fp, #16
0eff4     A7 14 02 FB | 	rdlong	arg02, fp
0eff8     20 4E 85 F1 | 	sub	fp, #32
0effc     0A 13 02 F1 | 	add	arg01, arg02
0f000     09 13 52 F6 | 	abs	arg01, arg01 wc
0f004     1F 28 C6 C9 |  if_b	decod	local02, #31
0f008     00 28 06 36 |  if_ae	mov	local02, #0
0f00c     78 BB B1 FD | 	call	#__system___float_fromuns
0f010     14 FB 61 F5 | 	xor	result1, local02
0f014     FD 14 02 F6 | 	mov	arg02, result1
0f018     13 13 02 F6 | 	mov	arg01, local01
0f01c     78 CE B1 FD | 	call	#__system____builtin_powf
0f020     FD 12 02 F6 | 	mov	arg01, result1
0f024     01 14 06 F6 | 	mov	arg02, #1
0f028     28 C4 B1 FD | 	call	#__system___float_tointeger
0f02c     14 4E 05 F1 | 	add	fp, #20
0f030     A7 FA 61 FC | 	wrlong	result1, fp
0f034                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
0f034                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
0f034     14 4E 85 F1 | 	sub	fp, #20
0f038     40 00 00 FF 
0f03c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0f040     30 00 90 CD |  if_b	jmp	#LR__1250
0f044     14 4E 05 F1 | 	add	fp, #20
0f048     A7 26 02 FB | 	rdlong	local01, fp
0f04c     13 27 52 F6 | 	abs	local01, local01 wc
0f050     0F 26 46 F0 | 	shr	local01, #15
0f054     13 27 82 F6 | 	negc	local01, local01
0f058     04 4E 05 F1 | 	add	fp, #4
0f05c     A7 26 62 FC | 	wrlong	local01, fp
0f060     04 4E 85 F1 | 	sub	fp, #4
0f064     40 00 80 FF 
0f068     A7 00 68 FC | 	wrlong	##32768, fp
0f06c     14 4E 85 F1 | 	sub	fp, #20
0f070     0C 00 90 FD | 	jmp	#LR__1251
0f074                 | LR__1250
0f074     18 4E 05 F1 | 	add	fp, #24
0f078     A7 02 68 FC | 	wrlong	#1, fp
0f07c     18 4E 85 F1 | 	sub	fp, #24
0f080                 | LR__1251
0f080     28 4E 05 F1 | 	add	fp, #40
0f084     A7 14 02 FB | 	rdlong	arg02, fp
0f088     28 4E 85 F1 | 	sub	fp, #40
0f08c     AA 2B 25 FF 
0f090     00 13 06 F6 | 	mov	arg01, ##1247237376
0f094     F8 C0 B1 FD | 	call	#__system___float_div
0f098     FD 26 02 F6 | 	mov	local01, result1
0f09c     18 4E 05 F1 | 	add	fp, #24
0f0a0     A7 12 02 FB | 	rdlong	arg01, fp
0f0a4     18 4E 85 F1 | 	sub	fp, #24
0f0a8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f0ac     1F 28 C6 C9 |  if_b	decod	local02, #31
0f0b0     00 28 06 36 |  if_ae	mov	local02, #0
0f0b4     D0 BA B1 FD | 	call	#__system___float_fromuns
0f0b8     14 FB 61 F5 | 	xor	result1, local02
0f0bc     FD 2A 02 F6 | 	mov	local03, result1
0f0c0     1E 2C C6 F9 | 	decod	local04, #30
0f0c4     12 12 06 F6 | 	mov	arg01, #18
0f0c8     20 4E 05 F1 | 	add	fp, #32
0f0cc     A7 14 02 FB | 	rdlong	arg02, fp
0f0d0     0A 13 82 F1 | 	sub	arg01, arg02
0f0d4     10 4E 85 F1 | 	sub	fp, #16
0f0d8     A7 14 02 FB | 	rdlong	arg02, fp
0f0dc     10 4E 85 F1 | 	sub	fp, #16
0f0e0     0A 13 82 F1 | 	sub	arg01, arg02
0f0e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f0e8     1F 28 C6 C9 |  if_b	decod	local02, #31
0f0ec     00 28 06 36 |  if_ae	mov	local02, #0
0f0f0     94 BA B1 FD | 	call	#__system___float_fromuns
0f0f4     14 FB 61 F5 | 	xor	result1, local02
0f0f8     FD 14 02 F6 | 	mov	arg02, result1
0f0fc     16 13 02 F6 | 	mov	arg01, local04
0f100     94 CD B1 FD | 	call	#__system____builtin_powf
0f104     FD 14 02 F6 | 	mov	arg02, result1
0f108     15 13 02 F6 | 	mov	arg01, local03
0f10c     7C BE B1 FD | 	call	#__system___float_mul
0f110     FD 14 02 F6 | 	mov	arg02, result1
0f114     13 13 02 F6 | 	mov	arg01, local01
0f118     74 C0 B1 FD | 	call	#__system___float_div
0f11c     FD 12 02 F6 | 	mov	arg01, result1
0f120     01 14 06 F6 | 	mov	arg02, #1
0f124     2C C3 B1 FD | 	call	#__system___float_tointeger
0f128     1C 4E 05 F1 | 	add	fp, #28
0f12c     A7 FA 61 FC | 	wrlong	result1, fp
0f130     10 4E 85 F1 | 	sub	fp, #16
0f134     A7 2C 02 FB | 	rdlong	local04, fp
0f138     16 2B 02 F6 | 	mov	local03, local04
0f13c     03 2A 66 F0 | 	shl	local03, #3
0f140     16 2B 82 F1 | 	sub	local03, local04
0f144     02 2A 66 F0 | 	shl	local03, #2
0f148     14 00 00 FF 
0f14c     38 E5 05 F1 | 	add	objptr, ##10552
0f150     F2 2A 02 F1 | 	add	local03, objptr
0f154     AA 2B 25 FF 
0f158     00 2D 06 F6 | 	mov	local04, ##1247237376
0f15c     0C 4E 85 F1 | 	sub	fp, #12
0f160     14 00 00 FF 
0f164     38 E5 85 F1 | 	sub	objptr, ##10552
0f168     FD 12 52 F6 | 	abs	arg01, result1 wc
0f16c     1F 28 C6 C9 |  if_b	decod	local02, #31
0f170     00 28 06 36 |  if_ae	mov	local02, #0
0f174     10 BA B1 FD | 	call	#__system___float_fromuns
0f178     14 FB 61 F5 | 	xor	result1, local02
0f17c     FD 14 02 F6 | 	mov	arg02, result1
0f180     16 13 02 F6 | 	mov	arg01, local04
0f184     08 C0 B1 FD | 	call	#__system___float_div
0f188     FD 2C 02 F6 | 	mov	local04, result1
0f18c     14 4E 05 F1 | 	add	fp, #20
0f190     A7 12 02 FB | 	rdlong	arg01, fp
0f194     14 4E 85 F1 | 	sub	fp, #20
0f198     09 13 52 F6 | 	abs	arg01, arg01 wc
0f19c     1F 28 C6 C9 |  if_b	decod	local02, #31
0f1a0     00 28 06 36 |  if_ae	mov	local02, #0
0f1a4     E0 B9 B1 FD | 	call	#__system___float_fromuns
0f1a8     14 FB 61 F5 | 	xor	result1, local02
0f1ac     FD 12 02 F6 | 	mov	arg01, result1
0f1b0     00 40 24 FF 
0f1b4     00 14 06 F6 | 	mov	arg02, ##1216348160
0f1b8     D4 BF B1 FD | 	call	#__system___float_div
0f1bc     FD 14 02 F6 | 	mov	arg02, result1
0f1c0     16 13 02 F6 | 	mov	arg01, local04
0f1c4     C4 BD B1 FD | 	call	#__system___float_mul
0f1c8     18 2A 06 F1 | 	add	local03, #24
0f1cc     15 FB 61 FC | 	wrlong	result1, local03
0f1d0     F0 00 90 FD | 	jmp	#LR__1253
0f1d4                 | LR__1252
0f1d4     1C 4E 05 F1 | 	add	fp, #28
0f1d8     A7 30 68 FC | 	wrlong	#24, fp
0f1dc     00 40 24 FF 
0f1e0     00 26 06 F6 | 	mov	local01, ##1216348160
0f1e4     0C 4E 05 F1 | 	add	fp, #12
0f1e8     A7 12 02 FB | 	rdlong	arg01, fp
0f1ec     28 4E 85 F1 | 	sub	fp, #40
0f1f0     C7 07 24 FF 
0f1f4     00 14 06 F6 | 	mov	arg02, ##1208978944
0f1f8     94 BF B1 FD | 	call	#__system___float_div
0f1fc     FD 14 02 F6 | 	mov	arg02, result1
0f200     13 13 02 F6 | 	mov	arg01, local01
0f204     84 BD B1 FD | 	call	#__system___float_mul
0f208     FD 12 02 F6 | 	mov	arg01, result1
0f20c     01 14 06 F6 | 	mov	arg02, #1
0f210     40 C2 B1 FD | 	call	#__system___float_tointeger
0f214     14 4E 05 F1 | 	add	fp, #20
0f218     A7 FA 61 FC | 	wrlong	result1, fp
0f21c     08 4E 85 F1 | 	sub	fp, #8
0f220     A7 2C 02 FB | 	rdlong	local04, fp
0f224     16 2B 02 F6 | 	mov	local03, local04
0f228     03 2A 66 F0 | 	shl	local03, #3
0f22c     16 2B 82 F1 | 	sub	local03, local04
0f230     02 2A 66 F0 | 	shl	local03, #2
0f234     14 00 00 FF 
0f238     38 E5 05 F1 | 	add	objptr, ##10552
0f23c     F2 2A 02 F1 | 	add	local03, objptr
0f240     AA 2B 25 FF 
0f244     00 2D 06 F6 | 	mov	local04, ##1247237376
0f248     10 4E 05 F1 | 	add	fp, #16
0f24c     A7 12 02 FB | 	rdlong	arg01, fp
0f250     1C 4E 85 F1 | 	sub	fp, #28
0f254     14 00 00 FF 
0f258     38 E5 85 F1 | 	sub	objptr, ##10552
0f25c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f260     1F 28 C6 C9 |  if_b	decod	local02, #31
0f264     00 28 06 36 |  if_ae	mov	local02, #0
0f268     1C B9 B1 FD | 	call	#__system___float_fromuns
0f26c     14 FB 61 F5 | 	xor	result1, local02
0f270     FD 14 02 F6 | 	mov	arg02, result1
0f274     16 13 02 F6 | 	mov	arg01, local04
0f278     14 BF B1 FD | 	call	#__system___float_div
0f27c     FD 2C 02 F6 | 	mov	local04, result1
0f280     14 4E 05 F1 | 	add	fp, #20
0f284     A7 12 02 FB | 	rdlong	arg01, fp
0f288     14 4E 85 F1 | 	sub	fp, #20
0f28c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f290     1F 28 C6 C9 |  if_b	decod	local02, #31
0f294     00 28 06 36 |  if_ae	mov	local02, #0
0f298     EC B8 B1 FD | 	call	#__system___float_fromuns
0f29c     14 FB 61 F5 | 	xor	result1, local02
0f2a0     FD 12 02 F6 | 	mov	arg01, result1
0f2a4     00 40 24 FF 
0f2a8     00 14 06 F6 | 	mov	arg02, ##1216348160
0f2ac     E0 BE B1 FD | 	call	#__system___float_div
0f2b0     FD 14 02 F6 | 	mov	arg02, result1
0f2b4     16 13 02 F6 | 	mov	arg01, local04
0f2b8     D0 BC B1 FD | 	call	#__system___float_mul
0f2bc     18 2A 06 F1 | 	add	local03, #24
0f2c0     15 FB 61 FC | 	wrlong	result1, local03
0f2c4                 | LR__1253
0f2c4     14 4E 05 F1 | 	add	fp, #20
0f2c8     A7 26 02 FB | 	rdlong	local01, fp
0f2cc     10 26 66 F0 | 	shl	local01, #16
0f2d0     08 4E 05 F1 | 	add	fp, #8
0f2d4     A7 2C 02 FB | 	rdlong	local04, fp
0f2d8     16 27 02 F1 | 	add	local01, local04
0f2dc     08 4E 05 F1 | 	add	fp, #8
0f2e0     A7 26 62 FC | 	wrlong	local01, fp
0f2e4                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0f2e4     37 00 00 FF 
0f2e8     30 E4 05 F1 | 	add	objptr, ##28208
0f2ec     F2 12 02 FB | 	rdlong	arg01, objptr
0f2f0     37 00 00 FF 
0f2f4     30 E4 85 F1 | 	sub	objptr, ##28208
0f2f8     18 4E 85 F1 | 	sub	fp, #24
0f2fc     A7 2C 02 FB | 	rdlong	local04, fp
0f300     0C 4E 85 F1 | 	sub	fp, #12
0f304     06 2C 66 F0 | 	shl	local04, #6
0f308     16 13 02 F1 | 	add	arg01, local04
0f30c     08 12 06 F1 | 	add	arg01, #8
0f310     09 FB 01 FB | 	rdlong	result1, arg01
0f314     1B FA 2D F4 | 	testbn	result1, #27 wz
0f318     3C 00 90 5D |  if_ne	jmp	#LR__1254
0f31c     37 00 00 FF 
0f320     30 E4 05 F1 | 	add	objptr, ##28208
0f324     F2 12 02 FB | 	rdlong	arg01, objptr
0f328     37 00 00 FF 
0f32c     30 E4 85 F1 | 	sub	objptr, ##28208
0f330     0C 4E 05 F1 | 	add	fp, #12
0f334     A7 2C 02 FB | 	rdlong	local04, fp
0f338     06 2C 66 F0 | 	shl	local04, #6
0f33c     16 13 02 F1 | 	add	arg01, local04
0f340     18 12 06 F1 | 	add	arg01, #24
0f344     18 4E 05 F1 | 	add	fp, #24
0f348     A7 14 02 FB | 	rdlong	arg02, fp
0f34c     24 4E 85 F1 | 	sub	fp, #36
0f350     09 15 62 FC | 	wrlong	arg02, arg01
0f354     80 00 90 FD | 	jmp	#LR__1255
0f358                 | LR__1254
0f358     37 00 00 FF 
0f35c     30 E4 05 F1 | 	add	objptr, ##28208
0f360     F2 26 02 FB | 	rdlong	local01, objptr
0f364     37 00 00 FF 
0f368     30 E4 85 F1 | 	sub	objptr, ##28208
0f36c     0C 4E 05 F1 | 	add	fp, #12
0f370     A7 2C 02 FB | 	rdlong	local04, fp
0f374     06 2C 66 F0 | 	shl	local04, #6
0f378     16 27 02 F1 | 	add	local01, local04
0f37c     18 26 06 F1 | 	add	local01, #24
0f380     1C 4E 05 F1 | 	add	fp, #28
0f384     A7 14 02 FB | 	rdlong	arg02, fp
0f388     28 4E 85 F1 | 	sub	fp, #40
0f38c     3E 2C 25 FF 
0f390     3C 12 06 F6 | 	mov	arg01, ##1247312956
0f394     F8 BD B1 FD | 	call	#__system___float_div
0f398     FD 12 02 F6 | 	mov	arg01, result1
0f39c     01 14 06 F6 | 	mov	arg02, #1
0f3a0     B0 C0 B1 FD | 	call	#__system___float_tointeger
0f3a4     13 FB 51 FC | 	wrword	result1, local01
0f3a8     37 00 00 FF 
0f3ac     30 E4 05 F1 | 	add	objptr, ##28208
0f3b0     F2 12 02 FB | 	rdlong	arg01, objptr
0f3b4     37 00 00 FF 
0f3b8     30 E4 85 F1 | 	sub	objptr, ##28208
0f3bc     0C 4E 05 F1 | 	add	fp, #12
0f3c0     A7 2C 02 FB | 	rdlong	local04, fp
0f3c4     0C 4E 85 F1 | 	sub	fp, #12
0f3c8     06 2C 66 F0 | 	shl	local04, #6
0f3cc     16 13 02 F1 | 	add	arg01, local04
0f3d0     1A 12 06 F1 | 	add	arg01, #26
0f3d4     09 01 5A FC | 	wrword	#256, arg01
0f3d8                 | LR__1255
0f3d8     A7 F0 03 F6 | 	mov	ptra, fp
0f3dc     B2 00 A0 FD | 	call	#popregs_
0f3e0                 | _do_changefreq_ret
0f3e0     2D 00 64 FD | 	ret
0f3e4                 | 
0f3e4                 | ' 
0f3e4                 | ' '-------------------- changepan
0f3e4                 | ' 
0f3e4                 | ' sub do_changepan
0f3e4                 | _do_changepan
0f3e4     01 4A 05 F6 | 	mov	COUNT_, #1
0f3e8     A8 00 A0 FD | 	call	#pushregs_
0f3ec     14 F0 07 F1 | 	add	ptra, #20
0f3f0     2C E4 BF FD | 	call	#_pop
0f3f4     A7 FA 61 FC | 	wrlong	result1, fp
0f3f8     04 4E 05 F1 | 	add	fp, #4
0f3fc     A7 FC 61 FC | 	wrlong	result2, fp
0f400     04 4E 05 F1 | 	add	fp, #4
0f404     A7 FE 61 FC | 	wrlong	result3, fp
0f408     08 4E 85 F1 | 	sub	fp, #8
0f40c     00 00 23 FF 
0f410     00 26 06 F6 | 	mov	local01, ##1174405120
0f414     A7 12 02 F6 | 	mov	arg01, fp
0f418     A4 E6 BF FD | 	call	#_converttofloat
0f41c     FD 14 02 F6 | 	mov	arg02, result1
0f420     13 13 02 F6 | 	mov	arg01, local01
0f424     64 BB B1 FD | 	call	#__system___float_mul
0f428     FD 12 02 F6 | 	mov	arg01, result1
0f42c     01 14 06 F6 | 	mov	arg02, #1
0f430     20 C0 B1 FD | 	call	#__system___float_tointeger
0f434     0D 26 C6 F9 | 	decod	local01, #13
0f438     FD 26 02 F1 | 	add	local01, result1
0f43c     10 4E 05 F1 | 	add	fp, #16
0f440     A7 26 62 FC | 	wrlong	local01, fp
0f444                 | ' 
0f444                 | ' t1=pop()
0f444                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f444                 | ' if pan<0 then pan=0
0f444     10 4E 85 F1 | 	sub	fp, #16
0f448     00 26 56 F2 | 	cmps	local01, #0 wc
0f44c     10 4E 05 C1 |  if_b	add	fp, #16
0f450     A7 00 68 CC |  if_b	wrlong	#0, fp
0f454     10 4E 85 C1 |  if_b	sub	fp, #16
0f458                 | ' if pan>16384 then pan=16384
0f458     10 4E 05 F1 | 	add	fp, #16
0f45c     A7 26 02 FB | 	rdlong	local01, fp
0f460     10 4E 85 F1 | 	sub	fp, #16
0f464     20 00 00 FF 
0f468     01 26 56 F2 | 	cmps	local01, ##16385 wc
0f46c     10 4E 05 31 |  if_ae	add	fp, #16
0f470     20 00 80 3F 
0f474     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0f478     10 4E 85 31 |  if_ae	sub	fp, #16
0f47c     A0 E3 BF FD | 	call	#_pop
0f480     FF 26 02 F6 | 	mov	local01, result3
0f484     A7 FA 61 FC | 	wrlong	result1, fp
0f488     04 4E 05 F1 | 	add	fp, #4
0f48c     A7 FC 61 FC | 	wrlong	result2, fp
0f490     04 4E 05 F1 | 	add	fp, #4
0f494     A7 26 62 FC | 	wrlong	local01, fp
0f498     08 4E 85 F1 | 	sub	fp, #8
0f49c     A7 12 02 F6 | 	mov	arg01, fp
0f4a0     60 E5 BF FD | 	call	#_converttoint
0f4a4     FD 26 52 F6 | 	abs	local01, result1 wc
0f4a8     07 26 06 F5 | 	and	local01, #7
0f4ac     13 27 82 F6 | 	negc	local01, local01
0f4b0     0C 4E 05 F1 | 	add	fp, #12
0f4b4     A7 26 62 FC | 	wrlong	local01, fp
0f4b8     37 00 00 FF 
0f4bc     30 E4 05 F1 | 	add	objptr, ##28208
0f4c0     F2 12 02 FB | 	rdlong	arg01, objptr
0f4c4     37 00 00 FF 
0f4c8     30 E4 85 F1 | 	sub	objptr, ##28208
0f4cc     06 26 66 F0 | 	shl	local01, #6
0f4d0     13 13 02 F1 | 	add	arg01, local01
0f4d4     16 12 06 F1 | 	add	arg01, #22
0f4d8     04 4E 05 F1 | 	add	fp, #4
0f4dc     A7 14 02 FB | 	rdlong	arg02, fp
0f4e0     10 4E 85 F1 | 	sub	fp, #16
0f4e4     09 15 52 FC | 	wrword	arg02, arg01
0f4e8     A7 F0 03 F6 | 	mov	ptra, fp
0f4ec     B2 00 A0 FD | 	call	#popregs_
0f4f0                 | _do_changepan_ret
0f4f0     2D 00 64 FD | 	ret
0f4f4                 | 
0f4f4                 | ' 
0f4f4                 | ' '-------------------- changevol
0f4f4                 | ' 
0f4f4                 | ' sub do_changevol
0f4f4                 | _do_changevol
0f4f4     00 4A 05 F6 | 	mov	COUNT_, #0
0f4f8     A8 00 A0 FD | 	call	#pushregs_
0f4fc     14 F0 07 F1 | 	add	ptra, #20
0f500     1C E3 BF FD | 	call	#_pop
0f504     FF 14 02 F6 | 	mov	arg02, result3
0f508     A7 FA 61 FC | 	wrlong	result1, fp
0f50c     04 4E 05 F1 | 	add	fp, #4
0f510     A7 FC 61 FC | 	wrlong	result2, fp
0f514     04 4E 05 F1 | 	add	fp, #4
0f518     A7 14 62 FC | 	wrlong	arg02, fp
0f51c     08 4E 85 F1 | 	sub	fp, #8
0f520     A7 12 02 F6 | 	mov	arg01, fp
0f524     98 E5 BF FD | 	call	#_converttofloat
0f528     FD 12 02 F6 | 	mov	arg01, result1
0f52c     00 3D 22 FF 
0f530     00 14 06 F6 | 	mov	arg02, ##1148846080
0f534     54 BA B1 FD | 	call	#__system___float_mul
0f538     FD 12 02 F6 | 	mov	arg01, result1
0f53c     01 14 06 F6 | 	mov	arg02, #1
0f540     10 BF B1 FD | 	call	#__system___float_tointeger
0f544     FD 14 52 F6 | 	abs	arg02, result1 wc
0f548     0D 14 46 F7 | 	zerox	arg02, #13
0f54c     0A 15 82 F6 | 	negc	arg02, arg02
0f550     10 4E 05 F1 | 	add	fp, #16
0f554     A7 14 62 FC | 	wrlong	arg02, fp
0f558     10 4E 85 F1 | 	sub	fp, #16
0f55c     C0 E2 BF FD | 	call	#_pop
0f560     FF 14 02 F6 | 	mov	arg02, result3
0f564     A7 FA 61 FC | 	wrlong	result1, fp
0f568     04 4E 05 F1 | 	add	fp, #4
0f56c     A7 FC 61 FC | 	wrlong	result2, fp
0f570     04 4E 05 F1 | 	add	fp, #4
0f574     A7 14 62 FC | 	wrlong	arg02, fp
0f578     08 4E 85 F1 | 	sub	fp, #8
0f57c     A7 12 02 F6 | 	mov	arg01, fp
0f580     80 E4 BF FD | 	call	#_converttoint
0f584     FD 14 52 F6 | 	abs	arg02, result1 wc
0f588     07 14 06 F5 | 	and	arg02, #7
0f58c     0A 15 82 F6 | 	negc	arg02, arg02
0f590     0C 4E 05 F1 | 	add	fp, #12
0f594     A7 14 62 FC | 	wrlong	arg02, fp
0f598     37 00 00 FF 
0f59c     30 E4 05 F1 | 	add	objptr, ##28208
0f5a0     F2 12 02 FB | 	rdlong	arg01, objptr
0f5a4     37 00 00 FF 
0f5a8     30 E4 85 F1 | 	sub	objptr, ##28208
0f5ac     06 14 66 F0 | 	shl	arg02, #6
0f5b0     0A 13 02 F1 | 	add	arg01, arg02
0f5b4     14 12 06 F1 | 	add	arg01, #20
0f5b8     04 4E 05 F1 | 	add	fp, #4
0f5bc     A7 14 02 FB | 	rdlong	arg02, fp
0f5c0     10 4E 85 F1 | 	sub	fp, #16
0f5c4     09 15 52 FC | 	wrword	arg02, arg01
0f5c8     A7 F0 03 F6 | 	mov	ptra, fp
0f5cc     B2 00 A0 FD | 	call	#popregs_
0f5d0                 | _do_changevol_ret
0f5d0     2D 00 64 FD | 	ret
0f5d4                 | 
0f5d4                 | ' 
0f5d4                 | ' '-------------------- changewav
0f5d4                 | ' 
0f5d4                 | ' sub do_changewav
0f5d4                 | _do_changewav
0f5d4     00 4A 05 F6 | 	mov	COUNT_, #0
0f5d8     A8 00 A0 FD | 	call	#pushregs_
0f5dc     14 F0 07 F1 | 	add	ptra, #20
0f5e0     3C E2 BF FD | 	call	#_pop
0f5e4     FF 14 02 F6 | 	mov	arg02, result3
0f5e8     A7 FA 61 FC | 	wrlong	result1, fp
0f5ec     04 4E 05 F1 | 	add	fp, #4
0f5f0     A7 FC 61 FC | 	wrlong	result2, fp
0f5f4     04 4E 05 F1 | 	add	fp, #4
0f5f8     A7 14 62 FC | 	wrlong	arg02, fp
0f5fc     08 4E 85 F1 | 	sub	fp, #8
0f600     A7 12 02 F6 | 	mov	arg01, fp
0f604     FC E3 BF FD | 	call	#_converttoint
0f608     10 4E 05 F1 | 	add	fp, #16
0f60c     A7 FA 61 FC | 	wrlong	result1, fp
0f610                 | ' 
0f610                 | ' t1=pop()
0f610                 | ' wave=converttoint(t1)
0f610                 | ' if wave<0 then wave=0
0f610     FD 14 02 F6 | 	mov	arg02, result1
0f614     10 4E 85 F1 | 	sub	fp, #16
0f618     00 14 56 F2 | 	cmps	arg02, #0 wc
0f61c     10 4E 05 C1 |  if_b	add	fp, #16
0f620     A7 00 68 CC |  if_b	wrlong	#0, fp
0f624     10 4E 85 C1 |  if_b	sub	fp, #16
0f628     F4 E1 BF FD | 	call	#_pop
0f62c     FF 14 02 F6 | 	mov	arg02, result3
0f630     A7 FA 61 FC | 	wrlong	result1, fp
0f634     04 4E 05 F1 | 	add	fp, #4
0f638     A7 FC 61 FC | 	wrlong	result2, fp
0f63c     04 4E 05 F1 | 	add	fp, #4
0f640     A7 14 62 FC | 	wrlong	arg02, fp
0f644     08 4E 85 F1 | 	sub	fp, #8
0f648     A7 12 02 F6 | 	mov	arg01, fp
0f64c     B4 E3 BF FD | 	call	#_converttoint
0f650     FD 14 52 F6 | 	abs	arg02, result1 wc
0f654     07 14 06 F5 | 	and	arg02, #7
0f658     0A 15 82 F6 | 	negc	arg02, arg02
0f65c     0C 4E 05 F1 | 	add	fp, #12
0f660     A7 14 62 FC | 	wrlong	arg02, fp
0f664                 | ' if wave <32 then 
0f664     04 4E 05 F1 | 	add	fp, #4
0f668     A7 14 02 FB | 	rdlong	arg02, fp
0f66c     10 4E 85 F1 | 	sub	fp, #16
0f670     20 14 56 F2 | 	cmps	arg02, #32 wc
0f674     48 00 90 3D |  if_ae	jmp	#LR__1260
0f678     37 00 00 FF 
0f67c     30 E4 05 F1 | 	add	objptr, ##28208
0f680     F2 12 02 FB | 	rdlong	arg01, objptr
0f684     37 00 00 FF 
0f688     30 E4 85 F1 | 	sub	objptr, ##28208
0f68c     0C 4E 05 F1 | 	add	fp, #12
0f690     A7 14 02 FB | 	rdlong	arg02, fp
0f694     06 14 66 F0 | 	shl	arg02, #6
0f698     0A 13 02 F1 | 	add	arg01, arg02
0f69c     08 12 06 F1 | 	add	arg01, #8
0f6a0     04 4E 05 F1 | 	add	fp, #4
0f6a4     A7 14 02 FB | 	rdlong	arg02, fp
0f6a8     10 4E 85 F1 | 	sub	fp, #16
0f6ac     0B 14 66 F0 | 	shl	arg02, #11
0f6b0     00 00 40 FF 
0f6b4     00 14 06 F1 | 	add	arg02, ##-2147483648
0f6b8     09 15 62 FC | 	wrlong	arg02, arg01
0f6bc     34 00 90 FD | 	jmp	#LR__1261
0f6c0                 | LR__1260
0f6c0     37 00 00 FF 
0f6c4     30 E4 05 F1 | 	add	objptr, ##28208
0f6c8     F2 12 02 FB | 	rdlong	arg01, objptr
0f6cc     37 00 00 FF 
0f6d0     30 E4 85 F1 | 	sub	objptr, ##28208
0f6d4     0C 4E 05 F1 | 	add	fp, #12
0f6d8     A7 14 02 FB | 	rdlong	arg02, fp
0f6dc     0C 4E 85 F1 | 	sub	fp, #12
0f6e0     06 14 66 F0 | 	shl	arg02, #6
0f6e4     0A 13 02 F1 | 	add	arg01, arg02
0f6e8     08 12 06 F1 | 	add	arg01, #8
0f6ec     00 00 C4 FF 
0f6f0     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f6f4                 | LR__1261
0f6f4     A7 F0 03 F6 | 	mov	ptra, fp
0f6f8     B2 00 A0 FD | 	call	#popregs_
0f6fc                 | _do_changewav_ret
0f6fc     2D 00 64 FD | 	ret
0f700                 | 
0f700                 | ' 
0f700                 | ' '-------------------- chr$
0f700                 | ' 
0f700                 | ' sub do_chr
0f700                 | _do_chr
0f700     01 4A 05 F6 | 	mov	COUNT_, #1
0f704     A8 00 A0 FD | 	call	#pushregs_
0f708     14 F0 07 F1 | 	add	ptra, #20
0f70c     4A 00 00 FF 
0f710     A0 E4 05 F1 | 	add	objptr, ##38048
0f714     F2 26 02 FB | 	rdlong	local01, objptr
0f718     13 17 02 F6 | 	mov	arg03, local01
0f71c     01 16 66 F0 | 	shl	arg03, #1
0f720     13 17 02 F1 | 	add	arg03, local01
0f724     02 16 66 F0 | 	shl	arg03, #2
0f728     03 00 00 FF 
0f72c     04 E4 85 F1 | 	sub	objptr, ##1540
0f730     F2 16 02 F1 | 	add	arg03, objptr
0f734     0B 17 02 FB | 	rdlong	arg03, arg03
0f738     0C 4E 05 F1 | 	add	fp, #12
0f73c     A7 16 62 FC | 	wrlong	arg03, fp
0f740                 | ' 
0f740                 | ' numpar=compiledline(lineptr_e).result.uresult
0f740                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f740     0C 4E 85 F1 | 	sub	fp, #12
0f744     02 16 16 F2 | 	cmp	arg03, #2 wc
0f748     47 00 00 FF 
0f74c     9C E4 85 F1 | 	sub	objptr, ##36508
0f750     0C 4E 05 C1 |  if_b	add	fp, #12
0f754     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f758     0C 4E 85 C1 |  if_b	sub	fp, #12
0f75c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1270
0f760     00 12 06 F6 | 	mov	arg01, #0
0f764     4C E6 B1 FD | 	call	#__system___getiolock_0620
0f768     FD 12 02 F6 | 	mov	arg01, result1
0f76c     A0 89 B1 FD | 	call	#__system___lockmem
0f770     B4 01 00 FF 
0f774     3D 15 06 F6 | 	mov	arg02, ##@LR__5796
0f778     00 12 06 F6 | 	mov	arg01, #0
0f77c     00 16 06 F6 | 	mov	arg03, #0
0f780     84 96 B1 FD | 	call	#__system___basic_print_string
0f784     00 12 06 F6 | 	mov	arg01, #0
0f788     28 E6 B1 FD | 	call	#__system___getiolock_0620
0f78c     FD 00 68 FC | 	wrlong	#0, result1
0f790     27 12 06 F6 | 	mov	arg01, #39
0f794     00 14 06 F6 | 	mov	arg02, #0
0f798     20 4F B1 FD | 	call	#_printerror
0f79c     54 00 90 FD | 	jmp	#LR__1271
0f7a0                 | LR__1270
0f7a0     7C E0 BF FD | 	call	#_pop
0f7a4     FF 26 02 F6 | 	mov	local01, result3
0f7a8     A7 FA 61 FC | 	wrlong	result1, fp
0f7ac     04 4E 05 F1 | 	add	fp, #4
0f7b0     A7 FC 61 FC | 	wrlong	result2, fp
0f7b4     04 4E 05 F1 | 	add	fp, #4
0f7b8     A7 26 62 FC | 	wrlong	local01, fp
0f7bc     08 4E 85 F1 | 	sub	fp, #8
0f7c0     A7 12 02 F6 | 	mov	arg01, fp
0f7c4     3C E2 BF FD | 	call	#_converttoint
0f7c8     10 4E 05 F1 | 	add	fp, #16
0f7cc     A7 FA 61 FC | 	wrlong	result1, fp
0f7d0     FD 12 02 F6 | 	mov	arg01, result1
0f7d4     10 4E 85 F1 | 	sub	fp, #16
0f7d8     78 AB B1 FD | 	call	#__system__Chr_S
0f7dc     A7 FA 61 FC | 	wrlong	result1, fp
0f7e0     08 4E 05 F1 | 	add	fp, #8
0f7e4     A7 3E 68 FC | 	wrlong	#31, fp
0f7e8     08 4E 85 F1 | 	sub	fp, #8
0f7ec     A7 12 02 F6 | 	mov	arg01, fp
0f7f0     C4 E0 BF FD | 	call	#_push
0f7f4                 | LR__1271
0f7f4     A7 F0 03 F6 | 	mov	ptra, fp
0f7f8     B2 00 A0 FD | 	call	#popregs_
0f7fc                 | _do_chr_ret
0f7fc     2D 00 64 FD | 	ret
0f800                 | 
0f800                 | ' 
0f800                 | ' '-------------------- circle
0f800                 | ' 
0f800                 | ' sub do_circle
0f800                 | _do_circle
0f800     02 4A 05 F6 | 	mov	COUNT_, #2
0f804     A8 00 A0 FD | 	call	#pushregs_
0f808     24 F0 07 F1 | 	add	ptra, #36
0f80c     10 E0 BF FD | 	call	#_pop
0f810     FD 18 02 F6 | 	mov	arg04, result1
0f814     FE 16 02 F6 | 	mov	arg03, result2
0f818     FF 14 02 F6 | 	mov	arg02, result3
0f81c     18 4E 05 F1 | 	add	fp, #24
0f820     A7 18 62 FC | 	wrlong	arg04, fp
0f824     04 4E 05 F1 | 	add	fp, #4
0f828     A7 16 62 FC | 	wrlong	arg03, fp
0f82c     04 4E 05 F1 | 	add	fp, #4
0f830     A7 14 62 FC | 	wrlong	arg02, fp
0f834     20 4E 85 F1 | 	sub	fp, #32
0f838     E4 DF BF FD | 	call	#_pop
0f83c     FD 18 02 F6 | 	mov	arg04, result1
0f840     FE 16 02 F6 | 	mov	arg03, result2
0f844     FF 26 02 F6 | 	mov	local01, result3
0f848     0C 4E 05 F1 | 	add	fp, #12
0f84c     A7 18 62 FC | 	wrlong	arg04, fp
0f850     04 4E 05 F1 | 	add	fp, #4
0f854     A7 16 62 FC | 	wrlong	arg03, fp
0f858     04 4E 05 F1 | 	add	fp, #4
0f85c     A7 26 62 FC | 	wrlong	local01, fp
0f860     14 4E 85 F1 | 	sub	fp, #20
0f864     B8 DF BF FD | 	call	#_pop
0f868     A7 FA 61 FC | 	wrlong	result1, fp
0f86c     04 4E 05 F1 | 	add	fp, #4
0f870     A7 FC 61 FC | 	wrlong	result2, fp
0f874     04 4E 05 F1 | 	add	fp, #4
0f878     A7 FE 61 FC | 	wrlong	result3, fp
0f87c                 | ' 
0f87c                 | ' t3=pop()
0f87c                 | ' t2=pop()
0f87c                 | ' t1=pop()
0f87c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f87c     FF 18 02 F6 | 	mov	arg04, result3
0f880     08 4E 85 F1 | 	sub	fp, #8
0f884     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f888     08 4E 05 51 |  if_ne	add	fp, #8
0f88c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f890     08 4E 85 51 |  if_ne	sub	fp, #8
0f894     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f898     7C 00 90 5D |  if_ne	jmp	#LR__1280
0f89c     14 4E 05 F1 | 	add	fp, #20
0f8a0     A7 26 02 FB | 	rdlong	local01, fp
0f8a4     14 4E 85 F1 | 	sub	fp, #20
0f8a8     1C 26 0E F2 | 	cmp	local01, #28 wz
0f8ac     14 4E 05 51 |  if_ne	add	fp, #20
0f8b0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f8b4     14 4E 85 51 |  if_ne	sub	fp, #20
0f8b8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f8bc     58 00 90 5D |  if_ne	jmp	#LR__1280
0f8c0     20 4E 05 F1 | 	add	fp, #32
0f8c4     A7 26 02 FB | 	rdlong	local01, fp
0f8c8     20 4E 85 F1 | 	sub	fp, #32
0f8cc     1C 26 0E F2 | 	cmp	local01, #28 wz
0f8d0     20 4E 05 51 |  if_ne	add	fp, #32
0f8d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f8d8     20 4E 85 51 |  if_ne	sub	fp, #32
0f8dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f8e0     34 00 90 5D |  if_ne	jmp	#LR__1280
0f8e4     A7 12 02 FB | 	rdlong	arg01, fp
0f8e8     0C 4E 05 F1 | 	add	fp, #12
0f8ec     A7 14 02 FB | 	rdlong	arg02, fp
0f8f0     0C 4E 05 F1 | 	add	fp, #12
0f8f4     A7 16 02 FB | 	rdlong	arg03, fp
0f8f8     18 4E 85 F1 | 	sub	fp, #24
0f8fc     37 00 00 FF 
0f900     48 E4 05 F1 | 	add	objptr, ##28232
0f904     F2 18 02 FB | 	rdlong	arg04, objptr
0f908     37 00 00 FF 
0f90c     48 E4 85 F1 | 	sub	objptr, ##28232
0f910     98 66 B1 FD | 	call	#_hg010b_spin2_circle
0f914                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f914     54 00 90 FD | 	jmp	#LR__1281
0f918                 | LR__1280
0f918     A7 12 02 F6 | 	mov	arg01, fp
0f91c     E4 E0 BF FD | 	call	#_converttoint
0f920     FD 26 02 F6 | 	mov	local01, result1
0f924     0C 4E 05 F1 | 	add	fp, #12
0f928     A7 12 02 F6 | 	mov	arg01, fp
0f92c     0C 4E 85 F1 | 	sub	fp, #12
0f930     D0 E0 BF FD | 	call	#_converttoint
0f934     FD 28 02 F6 | 	mov	local02, result1
0f938     18 4E 05 F1 | 	add	fp, #24
0f93c     A7 12 02 F6 | 	mov	arg01, fp
0f940     18 4E 85 F1 | 	sub	fp, #24
0f944     BC E0 BF FD | 	call	#_converttoint
0f948     FD 16 02 F6 | 	mov	arg03, result1
0f94c     37 00 00 FF 
0f950     48 E4 05 F1 | 	add	objptr, ##28232
0f954     F2 18 02 FB | 	rdlong	arg04, objptr
0f958     37 00 00 FF 
0f95c     48 E4 85 F1 | 	sub	objptr, ##28232
0f960     13 13 02 F6 | 	mov	arg01, local01
0f964     14 15 02 F6 | 	mov	arg02, local02
0f968     40 66 B1 FD | 	call	#_hg010b_spin2_circle
0f96c                 | LR__1281
0f96c     A7 F0 03 F6 | 	mov	ptra, fp
0f970     B2 00 A0 FD | 	call	#popregs_
0f974                 | _do_circle_ret
0f974     2D 00 64 FD | 	ret
0f978                 | 
0f978                 | ' 
0f978                 | ' '-------------------- click
0f978                 | ' 
0f978                 | ' sub do_click
0f978                 | _do_click
0f978     A4 DE BF FD | 	call	#_pop
0f97c     00 FA 4D F2 | 	cmps	result1, #0 wz
0f980                 | ' 
0f980                 | ' t1=pop()
0f980                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f980     50 00 00 AF 
0f984     5C E5 05 A1 |  if_e	add	objptr, ##41308
0f988     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f98c     50 00 00 FF 
0f990     5C E5 C5 F3 | 	sumz	objptr, ##41308
0f994     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f998     50 00 00 5F 
0f99c     5C E5 85 51 |  if_ne	sub	objptr, ##41308
0f9a0                 | _do_click_ret
0f9a0     2D 00 64 FD | 	ret
0f9a4                 | 
0f9a4                 | ' 
0f9a4                 | ' '-------------------- close
0f9a4                 | ' 
0f9a4                 | ' sub do_close
0f9a4                 | _do_close
0f9a4     03 4A 05 F6 | 	mov	COUNT_, #3
0f9a8     A8 00 A0 FD | 	call	#pushregs_
0f9ac     70 DE BF FD | 	call	#_pop
0f9b0     FD 26 02 F6 | 	mov	local01, result1
0f9b4     FF 16 02 F6 | 	mov	arg03, result3
0f9b8     FE 28 02 F6 | 	mov	local02, result2
0f9bc     0B 2B 02 F6 | 	mov	local03, arg03
0f9c0                 | ' 
0f9c0                 | ' numpar=compiledline(lineptr_e).result.uresult
0f9c0                 | ' t1=pop()
0f9c0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f9c0     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f9c4     44 00 90 AD |  if_e	jmp	#LR__1290
0f9c8     00 12 06 F6 | 	mov	arg01, #0
0f9cc     E4 E3 B1 FD | 	call	#__system___getiolock_0620
0f9d0     FD 12 02 F6 | 	mov	arg01, result1
0f9d4     38 87 B1 FD | 	call	#__system___lockmem
0f9d8     B4 01 00 FF 
0f9dc     44 15 06 F6 | 	mov	arg02, ##@LR__5797
0f9e0     00 12 06 F6 | 	mov	arg01, #0
0f9e4     00 16 06 F6 | 	mov	arg03, #0
0f9e8     1C 94 B1 FD | 	call	#__system___basic_print_string
0f9ec     00 12 06 F6 | 	mov	arg01, #0
0f9f0     0A 14 06 F6 | 	mov	arg02, #10
0f9f4     00 16 06 F6 | 	mov	arg03, #0
0f9f8     B4 93 B1 FD | 	call	#__system___basic_print_char
0f9fc     00 12 06 F6 | 	mov	arg01, #0
0fa00     B0 E3 B1 FD | 	call	#__system___getiolock_0620
0fa04     FD 00 68 FC | 	wrlong	#0, result1
0fa08     08 00 90 FD | 	jmp	#LR__1291
0fa0c                 | LR__1290
0fa0c                 | ' channel  = t1.result.iresult
0fa0c                 | ' close #channel
0fa0c     13 13 02 F6 | 	mov	arg01, local01
0fa10     50 DA B1 FD | 	call	#__system__close
0fa14                 | LR__1291
0fa14     A7 F0 03 F6 | 	mov	ptra, fp
0fa18     B2 00 A0 FD | 	call	#popregs_
0fa1c                 | _do_close_ret
0fa1c     2D 00 64 FD | 	ret
0fa20                 | 
0fa20                 | ' 
0fa20                 | ' '-------------------- cls
0fa20                 | ' 
0fa20                 | ' sub do_cls
0fa20                 | _do_cls
0fa20     37 00 00 FF 
0fa24     5C E4 05 F1 | 	add	objptr, ##28252
0fa28     F2 12 02 FB | 	rdlong	arg01, objptr
0fa2c     04 E4 85 F1 | 	sub	objptr, #4
0fa30     F2 14 02 FB | 	rdlong	arg02, objptr
0fa34     37 00 00 FF 
0fa38     58 E4 85 F1 | 	sub	objptr, ##28248
0fa3c     74 6A B1 FD | 	call	#_hg010b_spin2_cls
0fa40     37 00 00 FF 
0fa44     5C E4 05 F1 | 	add	objptr, ##28252
0fa48     F2 14 02 FB | 	rdlong	arg02, objptr
0fa4c     14 E4 85 F1 | 	sub	objptr, #20
0fa50     F2 14 62 FC | 	wrlong	arg02, objptr
0fa54     37 00 00 FF 
0fa58     48 E4 85 F1 | 	sub	objptr, ##28232
0fa5c                 | _do_cls_ret
0fa5c     2D 00 64 FD | 	ret
0fa60                 | 
0fa60                 | ' 
0fa60                 | ' sub do_coginit
0fa60                 | _do_coginit
0fa60     00 4A 05 F6 | 	mov	COUNT_, #0
0fa64     A8 00 A0 FD | 	call	#pushregs_
0fa68     08 00 00 FF 
0fa6c     1C F0 07 F1 | 	add	ptra, ##4124
0fa70     4A 00 00 FF 
0fa74     A0 E4 05 F1 | 	add	objptr, ##38048
0fa78     F2 FA 01 FB | 	rdlong	result1, objptr
0fa7c     FD FC 01 F6 | 	mov	result2, result1
0fa80     01 FC 65 F0 | 	shl	result2, #1
0fa84     FD FC 01 F1 | 	add	result2, result1
0fa88     02 FC 65 F0 | 	shl	result2, #2
0fa8c     03 00 00 FF 
0fa90     04 E4 85 F1 | 	sub	objptr, ##1540
0fa94     F2 FC 01 F1 | 	add	result2, objptr
0fa98     FE FC 01 FB | 	rdlong	result2, result2
0fa9c     A7 FC 61 FC | 	wrlong	result2, fp
0faa0                 | ' numpar=compiledline(lineptr_e).result.uresult
0faa0                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0faa0     02 FC 55 F2 | 	cmps	result2, #2 wc
0faa4     47 00 00 FF 
0faa8     9C E4 85 F1 | 	sub	objptr, ##36508
0faac     0C 00 90 CD |  if_b	jmp	#LR__1300
0fab0     A7 FA 01 FB | 	rdlong	result1, fp
0fab4     04 FA 55 F2 | 	cmps	result1, #4 wc
0fab8     40 00 90 CD |  if_b	jmp	#LR__1301
0fabc                 | LR__1300
0fabc     00 12 06 F6 | 	mov	arg01, #0
0fac0     F0 E2 B1 FD | 	call	#__system___getiolock_0620
0fac4     FD 12 02 F6 | 	mov	arg01, result1
0fac8     44 86 B1 FD | 	call	#__system___lockmem
0facc     B4 01 00 FF 
0fad0     56 15 06 F6 | 	mov	arg02, ##@LR__5798
0fad4     00 12 06 F6 | 	mov	arg01, #0
0fad8     00 16 06 F6 | 	mov	arg03, #0
0fadc     28 93 B1 FD | 	call	#__system___basic_print_string
0fae0     00 12 06 F6 | 	mov	arg01, #0
0fae4     CC E2 B1 FD | 	call	#__system___getiolock_0620
0fae8     FD 00 68 FC | 	wrlong	#0, result1
0faec     27 12 06 F6 | 	mov	arg01, #39
0faf0     00 14 06 F6 | 	mov	arg02, #0
0faf4     C4 4B B1 FD | 	call	#_printerror
0faf8     94 01 90 FD | 	jmp	#LR__1305
0fafc                 | LR__1301
0fafc     20 DD BF FD | 	call	#_pop
0fb00     FF 16 02 F6 | 	mov	arg03, result3
0fb04     08 00 00 FF 
0fb08     10 4E 05 F1 | 	add	fp, ##4112
0fb0c     A7 FA 61 FC | 	wrlong	result1, fp
0fb10     04 4E 05 F1 | 	add	fp, #4
0fb14     A7 FC 61 FC | 	wrlong	result2, fp
0fb18     04 4E 05 F1 | 	add	fp, #4
0fb1c     A7 16 62 FC | 	wrlong	arg03, fp
0fb20     08 4E 85 F1 | 	sub	fp, #8
0fb24     A7 12 02 F6 | 	mov	arg01, fp
0fb28     08 00 00 FF 
0fb2c     10 4E 85 F1 | 	sub	fp, ##4112
0fb30     D0 DE BF FD | 	call	#_converttoint
0fb34     FD 16 02 F6 | 	mov	arg03, result1
0fb38     04 4E 05 F1 | 	add	fp, #4
0fb3c     A7 16 62 FC | 	wrlong	arg03, fp
0fb40     04 4E 85 F1 | 	sub	fp, #4
0fb44     D8 DC BF FD | 	call	#_pop
0fb48     FF 16 02 F6 | 	mov	arg03, result3
0fb4c     08 00 00 FF 
0fb50     10 4E 05 F1 | 	add	fp, ##4112
0fb54     A7 FA 61 FC | 	wrlong	result1, fp
0fb58     04 4E 05 F1 | 	add	fp, #4
0fb5c     A7 FC 61 FC | 	wrlong	result2, fp
0fb60     04 4E 05 F1 | 	add	fp, #4
0fb64     A7 16 62 FC | 	wrlong	arg03, fp
0fb68     08 4E 85 F1 | 	sub	fp, #8
0fb6c     A7 12 02 F6 | 	mov	arg01, fp
0fb70     08 00 00 FF 
0fb74     10 4E 85 F1 | 	sub	fp, ##4112
0fb78     88 DE BF FD | 	call	#_converttoint
0fb7c     08 4E 05 F1 | 	add	fp, #8
0fb80     A7 FA 61 FC | 	wrlong	result1, fp
0fb84     08 4E 85 F1 | 	sub	fp, #8
0fb88                 | ' t1=pop()
0fb88                 | ' ptra_val=converttoint(t1)
0fb88                 | ' t1=pop()
0fb88                 | ' addrval=converttoint(t1)
0fb88                 | ' if numpar=3 then 
0fb88     A7 FA 01 FB | 	rdlong	result1, fp
0fb8c     03 FA 0D F2 | 	cmp	result1, #3 wz
0fb90     48 00 90 5D |  if_ne	jmp	#LR__1302
0fb94     88 DC BF FD | 	call	#_pop
0fb98     FF 16 02 F6 | 	mov	arg03, result3
0fb9c     08 00 00 FF 
0fba0     10 4E 05 F1 | 	add	fp, ##4112
0fba4     A7 FA 61 FC | 	wrlong	result1, fp
0fba8     04 4E 05 F1 | 	add	fp, #4
0fbac     A7 FC 61 FC | 	wrlong	result2, fp
0fbb0     04 4E 05 F1 | 	add	fp, #4
0fbb4     A7 16 62 FC | 	wrlong	arg03, fp
0fbb8     08 4E 85 F1 | 	sub	fp, #8
0fbbc     A7 12 02 F6 | 	mov	arg01, fp
0fbc0     08 00 00 FF 
0fbc4     10 4E 85 F1 | 	sub	fp, ##4112
0fbc8     38 DE BF FD | 	call	#_converttoint
0fbcc     0C 4E 05 F1 | 	add	fp, #12
0fbd0     A7 FA 61 FC | 	wrlong	result1, fp
0fbd4     0C 4E 85 F1 | 	sub	fp, #12
0fbd8     0C 00 90 FD | 	jmp	#LR__1303
0fbdc                 | LR__1302
0fbdc     0C 4E 05 F1 | 	add	fp, #12
0fbe0     A7 20 68 FC | 	wrlong	#16, fp
0fbe4     0C 4E 85 F1 | 	sub	fp, #12
0fbe8                 | LR__1303
0fbe8                 | '     
0fbe8                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0fbe8     08 4E 05 F1 | 	add	fp, #8
0fbec     A7 16 02 FB | 	rdlong	arg03, fp
0fbf0     08 4E 85 F1 | 	sub	fp, #8
0fbf4     00 04 00 FF 
0fbf8     01 16 56 F2 | 	cmps	arg03, ##524289 wc
0fbfc     40 00 90 CD |  if_b	jmp	#LR__1304
0fc00     10 4E 05 F1 | 	add	fp, #16
0fc04     A7 12 02 F6 | 	mov	arg01, fp
0fc08     08 4E 85 F1 | 	sub	fp, #8
0fc0c     A7 14 02 FB | 	rdlong	arg02, fp
0fc10     08 4E 85 F1 | 	sub	fp, #8
0fc14     0C 16 C6 F9 | 	decod	arg03, #12
0fc18     0B 00 00 FF 
0fc1c     CC E4 05 F1 | 	add	objptr, ##5836
0fc20     48 78 B1 FD | 	call	#_psram_spin2_read1
0fc24     0B 00 00 FF 
0fc28     CC E4 85 F1 | 	sub	objptr, ##5836
0fc2c     10 4E 05 F1 | 	add	fp, #16
0fc30     A7 FA 01 F6 | 	mov	result1, fp
0fc34     08 4E 85 F1 | 	sub	fp, #8
0fc38     A7 FA 61 FC | 	wrlong	result1, fp
0fc3c     08 4E 85 F1 | 	sub	fp, #8
0fc40                 | LR__1304
0fc40     0C 4E 05 F1 | 	add	fp, #12
0fc44     A7 FA 01 FB | 	rdlong	result1, fp
0fc48     04 4E 85 F1 | 	sub	fp, #4
0fc4c     A7 14 02 FB | 	rdlong	arg02, fp
0fc50     04 4E 85 F1 | 	sub	fp, #4
0fc54     A7 16 02 FB | 	rdlong	arg03, fp
0fc58                 | ' 
0fc58                 | '  asm
0fc58     28 16 62 FD | 	setq	arg03
0fc5c     0A FB F1 FC | 	coginit	result1, arg02 wc
0fc60                 | '  
0fc60                 | ' return cog 
0fc60     08 4E 05 F1 | 	add	fp, #8
0fc64     A7 FA 61 FC | 	wrlong	result1, fp
0fc68     08 00 00 FF 
0fc6c     04 4E 05 F1 | 	add	fp, ##4100
0fc70     A7 FA 61 FC | 	wrlong	result1, fp
0fc74     08 4E 05 F1 | 	add	fp, #8
0fc78     A7 38 68 FC | 	wrlong	#28, fp
0fc7c     08 4E 85 F1 | 	sub	fp, #8
0fc80     A7 12 02 F6 | 	mov	arg01, fp
0fc84     08 00 00 FF 
0fc88     10 4E 85 F1 | 	sub	fp, ##4112
0fc8c     28 DC BF FD | 	call	#_push
0fc90                 | LR__1305
0fc90     A7 F0 03 F6 | 	mov	ptra, fp
0fc94     B2 00 A0 FD | 	call	#popregs_
0fc98                 | _do_coginit_ret
0fc98     2D 00 64 FD | 	ret
0fc9c                 | 
0fc9c                 | ' 
0fc9c                 | ' '-------------------- cogstop
0fc9c                 | ' 
0fc9c                 | ' sub do_cogstop
0fc9c                 | _do_cogstop
0fc9c     00 4A 05 F6 | 	mov	COUNT_, #0
0fca0     A8 00 A0 FD | 	call	#pushregs_
0fca4     0C F0 07 F1 | 	add	ptra, #12
0fca8     74 DB BF FD | 	call	#_pop
0fcac     A7 FA 61 FC | 	wrlong	result1, fp
0fcb0     04 4E 05 F1 | 	add	fp, #4
0fcb4     A7 FC 61 FC | 	wrlong	result2, fp
0fcb8     04 4E 05 F1 | 	add	fp, #4
0fcbc     A7 FE 61 FC | 	wrlong	result3, fp
0fcc0     08 4E 85 F1 | 	sub	fp, #8
0fcc4     A7 12 02 F6 | 	mov	arg01, fp
0fcc8     38 DD BF FD | 	call	#_converttoint
0fccc     03 FA 61 FD | 	cogstop	result1
0fcd0     A7 F0 03 F6 | 	mov	ptra, fp
0fcd4     B2 00 A0 FD | 	call	#popregs_
0fcd8                 | _do_cogstop_ret
0fcd8     2D 00 64 FD | 	ret
0fcdc                 | 
0fcdc                 | ' 
0fcdc                 | ' '-------------------- color
0fcdc                 | ' 
0fcdc                 | ' sub do_color
0fcdc                 | _do_color
0fcdc     03 4A 05 F6 | 	mov	COUNT_, #3
0fce0     A8 00 A0 FD | 	call	#pushregs_
0fce4     38 DB BF FD | 	call	#_pop
0fce8     FD 26 02 F6 | 	mov	local01, result1
0fcec     FE 28 02 F6 | 	mov	local02, result2
0fcf0     FF 2A 02 F6 | 	mov	local03, result3
0fcf4     37 00 00 FF 
0fcf8     48 E4 05 F1 | 	add	objptr, ##28232
0fcfc     F2 26 62 FC | 	wrlong	local01, objptr
0fd00     37 00 00 FF 
0fd04     48 E4 85 F1 | 	sub	objptr, ##28232
0fd08     A7 F0 03 F6 | 	mov	ptra, fp
0fd0c     B2 00 A0 FD | 	call	#popregs_
0fd10                 | _do_color_ret
0fd10     2D 00 64 FD | 	ret
0fd14                 | 
0fd14                 | ' 
0fd14                 | ' '-------------------- copy
0fd14                 | ' 
0fd14                 | ' sub do_copy
0fd14                 | _do_copy
0fd14     08 4A 05 F6 | 	mov	COUNT_, #8
0fd18     A8 00 A0 FD | 	call	#pushregs_
0fd1c     00 DB BF FD | 	call	#_pop
0fd20     FD 26 02 F6 | 	mov	local01, result1
0fd24     FE 1A 02 F6 | 	mov	arg05, result2
0fd28     FF 18 02 F6 | 	mov	arg04, result3
0fd2c     0D 29 02 F6 | 	mov	local02, arg05
0fd30     0C 2B 02 F6 | 	mov	local03, arg04
0fd34     E8 DA BF FD | 	call	#_pop
0fd38     FE 1A 02 F6 | 	mov	arg05, result2
0fd3c     FF 18 02 F6 | 	mov	arg04, result3
0fd40     FD 2C 02 F6 | 	mov	local04, result1
0fd44     0D 2F 02 F6 | 	mov	local05, arg05
0fd48     0C 31 02 F6 | 	mov	local06, arg04
0fd4c                 | ' 
0fd4c                 | ' t1=pop()
0fd4c                 | ' t2=pop()
0fd4c                 | ' if t2.result_type=result_string2 then 
0fd4c     2B 30 0E F2 | 	cmp	local06, #43 wz
0fd50     10 00 90 5D |  if_ne	jmp	#LR__1310
0fd54     16 13 02 F6 | 	mov	arg01, local04
0fd58     3C DC BF FD | 	call	#_convertstring
0fd5c     FD 32 02 F6 | 	mov	local07, result1
0fd60     2C 00 90 FD | 	jmp	#LR__1312
0fd64                 | LR__1310
0fd64     1F 30 0E F2 | 	cmp	local06, #31 wz
0fd68     16 33 02 A6 |  if_e	mov	local07, local04
0fd6c     20 00 90 AD |  if_e	jmp	#LR__1311
0fd70     50 00 00 FF 
0fd74     10 E5 05 F1 | 	add	objptr, ##41232
0fd78     F2 14 02 FB | 	rdlong	arg02, objptr
0fd7c     50 00 00 FF 
0fd80     10 E5 85 F1 | 	sub	objptr, ##41232
0fd84     0F 12 06 F6 | 	mov	arg01, #15
0fd88     30 49 B1 FD | 	call	#_printerror
0fd8c                 | '   printerror(15,runheader(0)) : return
0fd8c     58 03 90 FD | 	jmp	#LR__1319
0fd90                 | LR__1311
0fd90                 | LR__1312
0fd90                 | ' if t1.result_type=result_string2 then 
0fd90     2B 2A 0E F2 | 	cmp	local03, #43 wz
0fd94     10 00 90 5D |  if_ne	jmp	#LR__1313
0fd98     13 13 02 F6 | 	mov	arg01, local01
0fd9c     F8 DB BF FD | 	call	#_convertstring
0fda0     FD 34 02 F6 | 	mov	local08, result1
0fda4     2C 00 90 FD | 	jmp	#LR__1315
0fda8                 | LR__1313
0fda8     1F 2A 0E F2 | 	cmp	local03, #31 wz
0fdac     13 35 02 A6 |  if_e	mov	local08, local01
0fdb0     20 00 90 AD |  if_e	jmp	#LR__1314
0fdb4     50 00 00 FF 
0fdb8     10 E5 05 F1 | 	add	objptr, ##41232
0fdbc     F2 14 02 FB | 	rdlong	arg02, objptr
0fdc0     50 00 00 FF 
0fdc4     10 E5 85 F1 | 	sub	objptr, ##41232
0fdc8     0F 12 06 F6 | 	mov	arg01, #15
0fdcc     EC 48 B1 FD | 	call	#_printerror
0fdd0                 | '   printerror(15,runheader(0)) : return
0fdd0     14 03 90 FD | 	jmp	#LR__1319
0fdd4                 | LR__1314
0fdd4                 | LR__1315
0fdd4                 | ' 
0fdd4                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0fdd4     09 12 06 F6 | 	mov	arg01, #9
0fdd8     19 15 02 F6 | 	mov	arg02, local07
0fddc     00 16 06 F6 | 	mov	arg03, #0
0fde0     30 8F B1 FD | 	call	#__system___basic_open_string
0fde4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fde8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fdec     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0fdf0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fdf4     52 00 00 FF 
0fdf8     30 E5 05 F1 | 	add	objptr, ##42288
0fdfc     F2 FA 61 FC | 	wrlong	result1, objptr
0fe00     52 00 00 FF 
0fe04     30 E5 85 F1 | 	sub	objptr, ##42288
0fe08     0C 01 90 AD |  if_e	jmp	#LR__1316
0fe0c     00 12 06 F6 | 	mov	arg01, #0
0fe10     A0 DF B1 FD | 	call	#__system___getiolock_0620
0fe14     FD 12 02 F6 | 	mov	arg01, result1
0fe18     F4 82 B1 FD | 	call	#__system___lockmem
0fe1c     B4 01 00 FF 
0fe20     60 15 06 F6 | 	mov	arg02, ##@LR__5799
0fe24     00 12 06 F6 | 	mov	arg01, #0
0fe28     00 16 06 F6 | 	mov	arg03, #0
0fe2c     D8 8F B1 FD | 	call	#__system___basic_print_string
0fe30     52 00 00 FF 
0fe34     30 E5 05 F1 | 	add	objptr, ##42288
0fe38     F2 14 02 FB | 	rdlong	arg02, objptr
0fe3c     52 00 00 FF 
0fe40     30 E5 85 F1 | 	sub	objptr, ##42288
0fe44     00 12 06 F6 | 	mov	arg01, #0
0fe48     00 16 06 F6 | 	mov	arg03, #0
0fe4c     0A 18 06 F6 | 	mov	arg04, #10
0fe50     F8 8F B1 FD | 	call	#__system___basic_print_integer
0fe54     B4 01 00 FF 
0fe58     70 15 06 F6 | 	mov	arg02, ##@LR__5800
0fe5c     00 12 06 F6 | 	mov	arg01, #0
0fe60     00 16 06 F6 | 	mov	arg03, #0
0fe64     A0 8F B1 FD | 	call	#__system___basic_print_string
0fe68     50 00 00 FF 
0fe6c     10 E5 05 F1 | 	add	objptr, ##41232
0fe70     F2 14 02 FB | 	rdlong	arg02, objptr
0fe74     50 00 00 FF 
0fe78     10 E5 85 F1 | 	sub	objptr, ##41232
0fe7c     00 12 06 F6 | 	mov	arg01, #0
0fe80     00 16 06 F6 | 	mov	arg03, #0
0fe84     0A 18 06 F6 | 	mov	arg04, #10
0fe88     00 90 B1 FD | 	call	#__system___basic_print_unsigned
0fe8c     B4 01 00 FF 
0fe90     7A 15 06 F6 | 	mov	arg02, ##@LR__5801
0fe94     00 12 06 F6 | 	mov	arg01, #0
0fe98     00 16 06 F6 | 	mov	arg03, #0
0fe9c     68 8F B1 FD | 	call	#__system___basic_print_string
0fea0     00 34 06 F6 | 	mov	local08, #0
0fea4     52 00 00 FF 
0fea8     30 E5 05 F1 | 	add	objptr, ##42288
0feac     F2 12 02 FB | 	rdlong	arg01, objptr
0feb0     52 00 00 FF 
0feb4     30 E5 85 F1 | 	sub	objptr, ##42288
0feb8     E4 AB B1 FD | 	call	#__system___strerror
0febc     FD 14 02 F6 | 	mov	arg02, result1
0fec0     1A 13 02 F6 | 	mov	arg01, local08
0fec4     00 16 06 F6 | 	mov	arg03, #0
0fec8     3C 8F B1 FD | 	call	#__system___basic_print_string
0fecc     B4 01 00 FF 
0fed0     7D 15 06 F6 | 	mov	arg02, ##@LR__5802
0fed4     00 12 06 F6 | 	mov	arg01, #0
0fed8     00 16 06 F6 | 	mov	arg03, #0
0fedc     28 8F B1 FD | 	call	#__system___basic_print_string
0fee0     00 12 06 F6 | 	mov	arg01, #0
0fee4     19 15 02 F6 | 	mov	arg02, local07
0fee8     00 16 06 F6 | 	mov	arg03, #0
0feec     18 8F B1 FD | 	call	#__system___basic_print_string
0fef0     00 12 06 F6 | 	mov	arg01, #0
0fef4     0A 14 06 F6 | 	mov	arg02, #10
0fef8     00 16 06 F6 | 	mov	arg03, #0
0fefc     B0 8E B1 FD | 	call	#__system___basic_print_char
0ff00     00 12 06 F6 | 	mov	arg01, #0
0ff04     AC DE B1 FD | 	call	#__system___getiolock_0620
0ff08     FD 00 68 FC | 	wrlong	#0, result1
0ff0c     09 12 06 F6 | 	mov	arg01, #9
0ff10     50 D5 B1 FD | 	call	#__system__close
0ff14     D0 01 90 FD | 	jmp	#LR__1319
0ff18                 | LR__1316
0ff18                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0ff18     08 12 06 F6 | 	mov	arg01, #8
0ff1c     1A 15 02 F6 | 	mov	arg02, local08
0ff20     0D 16 06 F6 | 	mov	arg03, #13
0ff24     EC 8D B1 FD | 	call	#__system___basic_open_string
0ff28     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ff2c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ff30     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ff34     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ff38     52 00 00 FF 
0ff3c     30 E5 05 F1 | 	add	objptr, ##42288
0ff40     F2 FA 61 FC | 	wrlong	result1, objptr
0ff44     52 00 00 FF 
0ff48     30 E5 85 F1 | 	sub	objptr, ##42288
0ff4c     0C 01 90 AD |  if_e	jmp	#LR__1317
0ff50     00 12 06 F6 | 	mov	arg01, #0
0ff54     5C DE B1 FD | 	call	#__system___getiolock_0620
0ff58     FD 12 02 F6 | 	mov	arg01, result1
0ff5c     B0 81 B1 FD | 	call	#__system___lockmem
0ff60     B4 01 00 FF 
0ff64     8B 15 06 F6 | 	mov	arg02, ##@LR__5803
0ff68     00 12 06 F6 | 	mov	arg01, #0
0ff6c     00 16 06 F6 | 	mov	arg03, #0
0ff70     94 8E B1 FD | 	call	#__system___basic_print_string
0ff74     52 00 00 FF 
0ff78     30 E5 05 F1 | 	add	objptr, ##42288
0ff7c     F2 14 02 FB | 	rdlong	arg02, objptr
0ff80     52 00 00 FF 
0ff84     30 E5 85 F1 | 	sub	objptr, ##42288
0ff88     00 12 06 F6 | 	mov	arg01, #0
0ff8c     00 16 06 F6 | 	mov	arg03, #0
0ff90     0A 18 06 F6 | 	mov	arg04, #10
0ff94     B4 8E B1 FD | 	call	#__system___basic_print_integer
0ff98     B4 01 00 FF 
0ff9c     9B 15 06 F6 | 	mov	arg02, ##@LR__5804
0ffa0     00 12 06 F6 | 	mov	arg01, #0
0ffa4     00 16 06 F6 | 	mov	arg03, #0
0ffa8     5C 8E B1 FD | 	call	#__system___basic_print_string
0ffac     50 00 00 FF 
0ffb0     10 E5 05 F1 | 	add	objptr, ##41232
0ffb4     F2 14 02 FB | 	rdlong	arg02, objptr
0ffb8     50 00 00 FF 
0ffbc     10 E5 85 F1 | 	sub	objptr, ##41232
0ffc0     00 12 06 F6 | 	mov	arg01, #0
0ffc4     00 16 06 F6 | 	mov	arg03, #0
0ffc8     0A 18 06 F6 | 	mov	arg04, #10
0ffcc     BC 8E B1 FD | 	call	#__system___basic_print_unsigned
0ffd0     B4 01 00 FF 
0ffd4     A5 15 06 F6 | 	mov	arg02, ##@LR__5805
0ffd8     00 12 06 F6 | 	mov	arg01, #0
0ffdc     00 16 06 F6 | 	mov	arg03, #0
0ffe0     24 8E B1 FD | 	call	#__system___basic_print_string
0ffe4     00 32 06 F6 | 	mov	local07, #0
0ffe8     52 00 00 FF 
0ffec     30 E5 05 F1 | 	add	objptr, ##42288
0fff0     F2 12 02 FB | 	rdlong	arg01, objptr
0fff4     52 00 00 FF 
0fff8     30 E5 85 F1 | 	sub	objptr, ##42288
0fffc     A0 AA B1 FD | 	call	#__system___strerror
10000     FD 14 02 F6 | 	mov	arg02, result1
10004     19 13 02 F6 | 	mov	arg01, local07
10008     00 16 06 F6 | 	mov	arg03, #0
1000c     F8 8D B1 FD | 	call	#__system___basic_print_string
10010     B4 01 00 FF 
10014     A8 15 06 F6 | 	mov	arg02, ##@LR__5806
10018     00 12 06 F6 | 	mov	arg01, #0
1001c     00 16 06 F6 | 	mov	arg03, #0
10020     E4 8D B1 FD | 	call	#__system___basic_print_string
10024     00 12 06 F6 | 	mov	arg01, #0
10028     1A 15 02 F6 | 	mov	arg02, local08
1002c     00 16 06 F6 | 	mov	arg03, #0
10030     D4 8D B1 FD | 	call	#__system___basic_print_string
10034     00 12 06 F6 | 	mov	arg01, #0
10038     0A 14 06 F6 | 	mov	arg02, #10
1003c     00 16 06 F6 | 	mov	arg03, #0
10040     6C 8D B1 FD | 	call	#__system___basic_print_char
10044     00 12 06 F6 | 	mov	arg01, #0
10048     68 DD B1 FD | 	call	#__system___getiolock_0620
1004c     FD 00 68 FC | 	wrlong	#0, result1
10050     08 12 06 F6 | 	mov	arg01, #8
10054     0C D4 B1 FD | 	call	#__system__close
10058     8C 00 90 FD | 	jmp	#LR__1319
1005c                 | LR__1317
1005c                 | ' 
1005c                 | ' do
1005c                 | LR__1318
1005c                 | '   get #9,,block(0),1024,r
1005c     4E 00 00 FF 
10060     D4 E4 05 F1 | 	add	objptr, ##40148
10064     F2 16 02 F6 | 	mov	arg03, objptr
10068     4E 00 00 FF 
1006c     D4 E4 85 F1 | 	sub	objptr, ##40148
10070     09 12 06 F6 | 	mov	arg01, #9
10074     00 14 06 F6 | 	mov	arg02, #0
10078     0A 18 C6 F9 | 	decod	arg04, #10
1007c     01 1A 06 F6 | 	mov	arg05, #1
10080     00 8F B1 FD | 	call	#__system___basic_get
10084     52 00 00 FF 
10088     68 E5 05 F1 | 	add	objptr, ##42344
1008c     F2 FA 61 FC | 	wrlong	result1, objptr
10090                 | '   put #8,,block(0),r
10090     04 00 00 FF 
10094     94 E4 85 F1 | 	sub	objptr, ##2196
10098     F2 16 02 F6 | 	mov	arg03, objptr
1009c     FD 18 02 F6 | 	mov	arg04, result1
100a0     4E 00 00 FF 
100a4     D4 E4 85 F1 | 	sub	objptr, ##40148
100a8     08 12 06 F6 | 	mov	arg01, #8
100ac     00 14 06 F6 | 	mov	arg02, #0
100b0     01 1A 06 F6 | 	mov	arg05, #1
100b4     60 8E B1 FD | 	call	#__system___basic_put
100b8     52 00 00 FF 
100bc     68 E5 05 F1 | 	add	objptr, ##42344
100c0     F2 34 02 FB | 	rdlong	local08, objptr
100c4     52 00 00 FF 
100c8     68 E5 85 F1 | 	sub	objptr, ##42344
100cc     02 00 00 FF 
100d0     00 34 0E F2 | 	cmp	local08, ##1024 wz
100d4     84 FF 9F AD |  if_e	jmp	#LR__1318
100d8                 | ' close #8
100d8     08 12 06 F6 | 	mov	arg01, #8
100dc     84 D3 B1 FD | 	call	#__system__close
100e0                 | ' close #9
100e0     09 12 06 F6 | 	mov	arg01, #9
100e4     7C D3 B1 FD | 	call	#__system__close
100e8                 | LR__1319
100e8     A7 F0 03 F6 | 	mov	ptra, fp
100ec     B2 00 A0 FD | 	call	#popregs_
100f0                 | _do_copy_ret
100f0     2D 00 64 FD | 	ret
100f4                 | 
100f4                 | ' 
100f4                 | ' '-------------------- cos
100f4                 | ' 
100f4                 | ' sub do_cos
100f4                 | _do_cos
100f4     01 4A 05 F6 | 	mov	COUNT_, #1
100f8     A8 00 A0 FD | 	call	#pushregs_
100fc     10 F0 07 F1 | 	add	ptra, #16
10100     4A 00 00 FF 
10104     A0 E4 05 F1 | 	add	objptr, ##38048
10108     F2 26 02 FB | 	rdlong	local01, objptr
1010c     13 17 02 F6 | 	mov	arg03, local01
10110     01 16 66 F0 | 	shl	arg03, #1
10114     13 17 02 F1 | 	add	arg03, local01
10118     02 16 66 F0 | 	shl	arg03, #2
1011c     03 00 00 FF 
10120     04 E4 85 F1 | 	sub	objptr, ##1540
10124     F2 16 02 F1 | 	add	arg03, objptr
10128     0B 17 02 FB | 	rdlong	arg03, arg03
1012c     0C 4E 05 F1 | 	add	fp, #12
10130     A7 16 62 FC | 	wrlong	arg03, fp
10134                 | ' 
10134                 | ' numpar=compiledline(lineptr_e).result.uresult
10134                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
10134     0C 4E 85 F1 | 	sub	fp, #12
10138     02 16 16 F2 | 	cmp	arg03, #2 wc
1013c     47 00 00 FF 
10140     9C E4 85 F1 | 	sub	objptr, ##36508
10144     0C 4E 05 C1 |  if_b	add	fp, #12
10148     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1014c     0C 4E 85 C1 |  if_b	sub	fp, #12
10150     40 00 90 4D |  if_c_and_nz	jmp	#LR__1320
10154     00 12 06 F6 | 	mov	arg01, #0
10158     58 DC B1 FD | 	call	#__system___getiolock_0620
1015c     FD 12 02 F6 | 	mov	arg01, result1
10160     AC 7F B1 FD | 	call	#__system___lockmem
10164     B4 01 00 FF 
10168     B6 15 06 F6 | 	mov	arg02, ##@LR__5807
1016c     00 12 06 F6 | 	mov	arg01, #0
10170     00 16 06 F6 | 	mov	arg03, #0
10174     90 8C B1 FD | 	call	#__system___basic_print_string
10178     00 12 06 F6 | 	mov	arg01, #0
1017c     34 DC B1 FD | 	call	#__system___getiolock_0620
10180     FD 00 68 FC | 	wrlong	#0, result1
10184     27 12 06 F6 | 	mov	arg01, #39
10188     00 14 06 F6 | 	mov	arg02, #0
1018c     2C 45 B1 FD | 	call	#_printerror
10190     78 00 90 FD | 	jmp	#LR__1321
10194                 | LR__1320
10194     88 D6 BF FD | 	call	#_pop
10198     A7 FA 61 FC | 	wrlong	result1, fp
1019c     04 4E 05 F1 | 	add	fp, #4
101a0     A7 FC 61 FC | 	wrlong	result2, fp
101a4     04 4E 05 F1 | 	add	fp, #4
101a8     A7 FE 61 FC | 	wrlong	result3, fp
101ac     08 4E 85 F1 | 	sub	fp, #8
101b0     52 00 00 FF 
101b4     00 E5 05 F1 | 	add	objptr, ##42240
101b8     F2 26 02 FB | 	rdlong	local01, objptr
101bc     52 00 00 FF 
101c0     00 E5 85 F1 | 	sub	objptr, ##42240
101c4     A7 12 02 F6 | 	mov	arg01, fp
101c8     F4 D8 BF FD | 	call	#_converttofloat
101cc     FD 14 02 F6 | 	mov	arg02, result1
101d0     13 13 02 F6 | 	mov	arg01, local01
101d4     B4 AD B1 FD | 	call	#__system___float_mul
101d8     FD 14 02 F6 | 	mov	arg02, result1
101dc     87 E4 1F FF 
101e0     DB 13 06 F6 | 	mov	arg01, ##1070141403
101e4     1F 14 E6 F4 | 	bitnot	arg02, #31
101e8     D0 A9 B1 FD | 	call	#__system___float_add
101ec     FD 12 02 F6 | 	mov	arg01, result1
101f0     FC B6 B1 FD | 	call	#__system____builtin_sinf
101f4     A7 FA 61 FC | 	wrlong	result1, fp
101f8     08 4E 05 F1 | 	add	fp, #8
101fc     A7 3C 68 FC | 	wrlong	#30, fp
10200     08 4E 85 F1 | 	sub	fp, #8
10204     A7 12 02 F6 | 	mov	arg01, fp
10208     AC D6 BF FD | 	call	#_push
1020c                 | LR__1321
1020c     A7 F0 03 F6 | 	mov	ptra, fp
10210     B2 00 A0 FD | 	call	#popregs_
10214                 | _do_cos_ret
10214     2D 00 64 FD | 	ret
10218                 | 
10218                 | ' 
10218                 | ' '-------------------- cursor
10218                 | ' 
10218                 | ' sub do_cursor
10218                 | _do_cursor
10218     04 D6 BF FD | 	call	#_pop
1021c     00 FA 4D F2 | 	cmps	result1, #0 wz
10220                 | ' t1=pop()
10220                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
10220     14 00 90 5D |  if_ne	jmp	#LR__1330
10224     11 12 06 F6 | 	mov	arg01, #17
10228     00 14 06 F6 | 	mov	arg02, #0
1022c     00 16 06 F6 | 	mov	arg03, #0
10230     EC 54 B1 FD | 	call	#_hg010b_spin2_setspritesize
10234     10 00 90 FD | 	jmp	#LR__1331
10238                 | LR__1330
10238     11 12 06 F6 | 	mov	arg01, #17
1023c     08 14 06 F6 | 	mov	arg02, #8
10240     10 16 06 F6 | 	mov	arg03, #16
10244     D8 54 B1 FD | 	call	#_hg010b_spin2_setspritesize
10248                 | LR__1331
10248                 | _do_cursor_ret
10248     2D 00 64 FD | 	ret
1024c                 | 
1024c                 | ' 
1024c                 | ' '-------------------- defchar
1024c                 | ' 
1024c                 | ' sub do_defchar
1024c                 | _do_defchar
1024c     01 4A 05 F6 | 	mov	COUNT_, #1
10250     A8 00 A0 FD | 	call	#pushregs_
10254     28 F0 07 F1 | 	add	ptra, #40
10258     C4 D5 BF FD | 	call	#_pop
1025c     FF 14 02 F6 | 	mov	arg02, result3
10260     A7 FA 61 FC | 	wrlong	result1, fp
10264     04 4E 05 F1 | 	add	fp, #4
10268     A7 FC 61 FC | 	wrlong	result2, fp
1026c     04 4E 05 F1 | 	add	fp, #4
10270     A7 14 62 FC | 	wrlong	arg02, fp
10274     08 4E 85 F1 | 	sub	fp, #8
10278     A7 12 02 F6 | 	mov	arg01, fp
1027c     84 D7 BF FD | 	call	#_converttoint
10280     FD 14 02 F6 | 	mov	arg02, result1
10284     10 4E 05 F1 | 	add	fp, #16
10288     A7 14 62 FC | 	wrlong	arg02, fp
1028c     10 4E 85 F1 | 	sub	fp, #16
10290     8C D5 BF FD | 	call	#_pop
10294     FF 14 02 F6 | 	mov	arg02, result3
10298     A7 FA 61 FC | 	wrlong	result1, fp
1029c     04 4E 05 F1 | 	add	fp, #4
102a0     A7 FC 61 FC | 	wrlong	result2, fp
102a4     04 4E 05 F1 | 	add	fp, #4
102a8     A7 14 62 FC | 	wrlong	arg02, fp
102ac     08 4E 85 F1 | 	sub	fp, #8
102b0     A7 12 02 F6 | 	mov	arg01, fp
102b4     4C D7 BF FD | 	call	#_converttoint
102b8     0C 4E 05 F1 | 	add	fp, #12
102bc     A7 FA 61 FC | 	wrlong	result1, fp
102c0                 | ' 
102c0                 | ' t1=pop() : cptr=converttoint(t1)
102c0                 | ' t1=pop() : c=converttoint(t1)
102c0                 | ' if cptr<$80000 then 
102c0     04 4E 05 F1 | 	add	fp, #4
102c4     A7 14 02 FB | 	rdlong	arg02, fp
102c8     10 4E 85 F1 | 	sub	fp, #16
102cc     00 04 00 FF 
102d0     00 14 16 F2 | 	cmp	arg02, ##524288 wc
102d4     1C 00 90 3D |  if_ae	jmp	#LR__1340
102d8     0C 4E 05 F1 | 	add	fp, #12
102dc     A7 12 02 FB | 	rdlong	arg01, fp
102e0     04 4E 05 F1 | 	add	fp, #4
102e4     A7 14 02 FB | 	rdlong	arg02, fp
102e8     10 4E 85 F1 | 	sub	fp, #16
102ec     40 60 B1 FD | 	call	#_hg010b_spin2_defchar
102f0     60 00 90 FD | 	jmp	#LR__1342
102f4                 | LR__1340
102f4                 | '   for i=0 to 15: buf(i)=pspeek(cptr+i): next i
102f4     24 4E 05 F1 | 	add	fp, #36
102f8     A7 00 68 FC | 	wrlong	#0, fp
102fc                 | LR__1341
102fc     A7 14 02 FB | 	rdlong	arg02, fp
10300     0A 27 02 F6 | 	mov	local01, arg02
10304     10 4E 85 F1 | 	sub	fp, #16
10308     A7 26 02 F1 | 	add	local01, fp
1030c     04 4E 85 F1 | 	sub	fp, #4
10310     A7 12 02 FB | 	rdlong	arg01, fp
10314     10 4E 85 F1 | 	sub	fp, #16
10318     0A 13 02 F1 | 	add	arg01, arg02
1031c     14 46 B1 FD | 	call	#_pspeek
10320     13 FB 41 FC | 	wrbyte	result1, local01
10324     24 4E 05 F1 | 	add	fp, #36
10328     A7 26 02 FB | 	rdlong	local01, fp
1032c     01 26 06 F1 | 	add	local01, #1
10330     A7 26 62 FC | 	wrlong	local01, fp
10334     10 26 56 F2 | 	cmps	local01, #16 wc
10338     C0 FF 9F CD |  if_b	jmp	#LR__1341
1033c     18 4E 85 F1 | 	sub	fp, #24
10340     A7 12 02 FB | 	rdlong	arg01, fp
10344     08 4E 05 F1 | 	add	fp, #8
10348     A7 14 02 F6 | 	mov	arg02, fp
1034c     14 4E 85 F1 | 	sub	fp, #20
10350     DC 5F B1 FD | 	call	#_hg010b_spin2_defchar
10354                 | LR__1342
10354     A7 F0 03 F6 | 	mov	ptra, fp
10358     B2 00 A0 FD | 	call	#popregs_
1035c                 | _do_defchar_ret
1035c     2D 00 64 FD | 	ret
10360                 | 
10360                 | ' 
10360                 | ' '-------------------- defenv
10360                 | ' 
10360                 | ' sub do_defenv
10360                 | _do_defenv
10360     08 4A 05 F6 | 	mov	COUNT_, #8
10364     A8 00 A0 FD | 	call	#pushregs_
10368     58 F0 07 F1 | 	add	ptra, #88
1036c     4A 00 00 FF 
10370     A0 E4 05 F1 | 	add	objptr, ##38048
10374     F2 26 02 FB | 	rdlong	local01, objptr
10378     13 1B 02 F6 | 	mov	arg05, local01
1037c     01 1A 66 F0 | 	shl	arg05, #1
10380     13 1B 02 F1 | 	add	arg05, local01
10384     02 1A 66 F0 | 	shl	arg05, #2
10388     03 00 00 FF 
1038c     04 E4 85 F1 | 	sub	objptr, ##1540
10390     F2 1A 02 F1 | 	add	arg05, objptr
10394     0D 1B 02 FB | 	rdlong	arg05, arg05
10398     10 4E 05 F1 | 	add	fp, #16
1039c     A7 1A 62 FC | 	wrlong	arg05, fp
103a0                 | ' 
103a0                 | ' numpar=compiledline(lineptr_e).result.uresult
103a0                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
103a0     10 4E 85 F1 | 	sub	fp, #16
103a4     02 1A 0E F2 | 	cmp	arg05, #2 wz
103a8     47 00 00 FF 
103ac     9C E4 85 F1 | 	sub	objptr, ##36508
103b0     10 4E 05 51 |  if_ne	add	fp, #16
103b4     A7 26 02 5B |  if_ne	rdlong	local01, fp
103b8     10 4E 85 51 |  if_ne	sub	fp, #16
103bc     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
103c0     90 0A 90 5D |  if_ne	jmp	#LR__1371
103c4                 | ' 
103c4                 | ' if numpar=2 then						' env from .h2 or from a pointer
103c4     10 4E 05 F1 | 	add	fp, #16
103c8     A7 26 02 FB | 	rdlong	local01, fp
103cc     10 4E 85 F1 | 	sub	fp, #16
103d0     02 26 0E F2 | 	cmp	local01, #2 wz
103d4     28 04 90 5D |  if_ne	jmp	#LR__1363
103d8     44 D4 BF FD | 	call	#_pop
103dc     FF 1A 02 F6 | 	mov	arg05, result3
103e0     40 4E 05 F1 | 	add	fp, #64
103e4     A7 FA 61 FC | 	wrlong	result1, fp
103e8     04 4E 05 F1 | 	add	fp, #4
103ec     A7 FC 61 FC | 	wrlong	result2, fp
103f0     04 4E 05 F1 | 	add	fp, #4
103f4     A7 1A 62 FC | 	wrlong	arg05, fp
103f8                 | '   t1=pop()
103f8                 | '   if t1.result_type=result_string2 then 
103f8     48 4E 85 F1 | 	sub	fp, #72
103fc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10400     20 00 90 5D |  if_ne	jmp	#LR__1350
10404     40 4E 05 F1 | 	add	fp, #64
10408     A7 12 02 FB | 	rdlong	arg01, fp
1040c     40 4E 85 F1 | 	sub	fp, #64
10410     84 D5 BF FD | 	call	#_convertstring
10414     4C 4E 05 F1 | 	add	fp, #76
10418     A7 FA 61 FC | 	wrlong	result1, fp
1041c     4C 4E 85 F1 | 	sub	fp, #76
10420     58 00 90 FD | 	jmp	#LR__1353
10424                 | LR__1350
10424     48 4E 05 F1 | 	add	fp, #72
10428     A7 26 02 FB | 	rdlong	local01, fp
1042c     48 4E 85 F1 | 	sub	fp, #72
10430     1F 26 0E F2 | 	cmp	local01, #31 wz
10434     18 00 90 5D |  if_ne	jmp	#LR__1351
10438     40 4E 05 F1 | 	add	fp, #64
1043c     A7 26 02 FB | 	rdlong	local01, fp
10440     0C 4E 05 F1 | 	add	fp, #12
10444     A7 26 62 FC | 	wrlong	local01, fp
10448     4C 4E 85 F1 | 	sub	fp, #76
1044c     2C 00 90 FD | 	jmp	#LR__1352
10450                 | LR__1351
10450     B4 01 00 FF 
10454     BC 27 06 F6 | 	mov	local01, ##@LR__5808
10458     4C 4E 05 F1 | 	add	fp, #76
1045c     A7 26 62 FC | 	wrlong	local01, fp
10460     0C 4E 85 F1 | 	sub	fp, #12
10464     A7 12 02 F6 | 	mov	arg01, fp
10468     40 4E 85 F1 | 	sub	fp, #64
1046c     94 D5 BF FD | 	call	#_converttoint
10470     1C 4E 05 F1 | 	add	fp, #28
10474     A7 FA 61 FC | 	wrlong	result1, fp
10478     1C 4E 85 F1 | 	sub	fp, #28
1047c                 | LR__1352
1047c                 | LR__1353
1047c                 | '   if s1<>"" then 
1047c     4C 4E 05 F1 | 	add	fp, #76
10480     A7 12 02 FB | 	rdlong	arg01, fp
10484     4C 4E 85 F1 | 	sub	fp, #76
10488     B4 01 00 FF 
1048c     BD 15 06 F6 | 	mov	arg02, ##@LR__5809
10490     A4 7C B1 FD | 	call	#__system___string_cmp
10494     00 FA 0D F2 | 	cmp	result1, #0 wz
10498     28 02 90 AD |  if_e	jmp	#LR__1357
1049c     80 D3 BF FD | 	call	#_pop
104a0     FF 26 02 F6 | 	mov	local01, result3
104a4     40 4E 05 F1 | 	add	fp, #64
104a8     A7 FA 61 FC | 	wrlong	result1, fp
104ac     04 4E 05 F1 | 	add	fp, #4
104b0     A7 FC 61 FC | 	wrlong	result2, fp
104b4     04 4E 05 F1 | 	add	fp, #4
104b8     A7 26 62 FC | 	wrlong	local01, fp
104bc     08 4E 85 F1 | 	sub	fp, #8
104c0     A7 12 02 F6 | 	mov	arg01, fp
104c4     40 4E 85 F1 | 	sub	fp, #64
104c8     38 D5 BF FD | 	call	#_converttoint
104cc     18 4E 05 F1 | 	add	fp, #24
104d0     A7 FA 61 FC | 	wrlong	result1, fp
104d4     18 4E 85 F1 | 	sub	fp, #24
104d8                 | '     t1=pop()
104d8                 | '     channel=converttoint(t1) 
104d8                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
104d8     09 12 06 F6 | 	mov	arg01, #9
104dc     84 CF B1 FD | 	call	#__system__close
104e0     09 26 06 F6 | 	mov	local01, #9
104e4     B4 01 00 FF 
104e8     BE 13 06 F6 | 	mov	arg01, ##@LR__5810
104ec     4C 4E 05 F1 | 	add	fp, #76
104f0     A7 14 02 FB | 	rdlong	arg02, fp
104f4     4C 4E 85 F1 | 	sub	fp, #76
104f8     70 7C B1 FD | 	call	#__system___string_concat
104fc     FD 14 02 F6 | 	mov	arg02, result1
10500     13 13 02 F6 | 	mov	arg01, local01
10504     00 16 06 F6 | 	mov	arg03, #0
10508     08 88 B1 FD | 	call	#__system___basic_open_string
1050c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10510     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10514     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10518     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1051c     0C 4E 05 F1 | 	add	fp, #12
10520     A7 FA 61 FC | 	wrlong	result1, fp
10524                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10524     0C 4E 85 F1 | 	sub	fp, #12
10528     A0 00 90 AD |  if_e	jmp	#LR__1354
1052c     00 12 06 F6 | 	mov	arg01, #0
10530     80 D8 B1 FD | 	call	#__system___getiolock_0620
10534     FD 12 02 F6 | 	mov	arg01, result1
10538     D4 7B B1 FD | 	call	#__system___lockmem
1053c     B4 01 00 FF 
10540     CB 15 06 F6 | 	mov	arg02, ##@LR__5811
10544     00 12 06 F6 | 	mov	arg01, #0
10548     00 16 06 F6 | 	mov	arg03, #0
1054c     B8 88 B1 FD | 	call	#__system___basic_print_string
10550     0C 4E 05 F1 | 	add	fp, #12
10554     A7 14 02 FB | 	rdlong	arg02, fp
10558     0C 4E 85 F1 | 	sub	fp, #12
1055c     00 12 06 F6 | 	mov	arg01, #0
10560     00 16 06 F6 | 	mov	arg03, #0
10564     0A 18 06 F6 | 	mov	arg04, #10
10568     E0 88 B1 FD | 	call	#__system___basic_print_integer
1056c     B4 01 00 FF 
10570     D9 15 06 F6 | 	mov	arg02, ##@LR__5812
10574     00 12 06 F6 | 	mov	arg01, #0
10578     00 16 06 F6 | 	mov	arg03, #0
1057c     88 88 B1 FD | 	call	#__system___basic_print_string
10580     00 26 06 F6 | 	mov	local01, #0
10584     0C 4E 05 F1 | 	add	fp, #12
10588     A7 12 02 FB | 	rdlong	arg01, fp
1058c     0C 4E 85 F1 | 	sub	fp, #12
10590     0C A5 B1 FD | 	call	#__system___strerror
10594     FD 14 02 F6 | 	mov	arg02, result1
10598     13 13 02 F6 | 	mov	arg01, local01
1059c     00 16 06 F6 | 	mov	arg03, #0
105a0     64 88 B1 FD | 	call	#__system___basic_print_string
105a4     00 12 06 F6 | 	mov	arg01, #0
105a8     0A 14 06 F6 | 	mov	arg02, #10
105ac     00 16 06 F6 | 	mov	arg03, #0
105b0     FC 87 B1 FD | 	call	#__system___basic_print_char
105b4     00 12 06 F6 | 	mov	arg01, #0
105b8     F8 D7 B1 FD | 	call	#__system___getiolock_0620
105bc     FD 00 68 FC | 	wrlong	#0, result1
105c0     09 12 06 F6 | 	mov	arg01, #9
105c4     9C CE B1 FD | 	call	#__system__close
105c8     88 08 90 FD | 	jmp	#LR__1371
105cc                 | LR__1354
105cc                 | '     get #9,17,envbuf8(channel,0),256
105cc     18 4E 05 F1 | 	add	fp, #24
105d0     A7 1A 02 FB | 	rdlong	arg05, fp
105d4     18 4E 85 F1 | 	sub	fp, #24
105d8     0D 17 02 F6 | 	mov	arg03, arg05
105dc     09 16 66 F0 | 	shl	arg03, #9
105e0     0D 17 02 F1 | 	add	arg03, arg05
105e4     0C 00 00 FF 
105e8     D8 E4 05 F1 | 	add	objptr, ##6360
105ec     F2 16 02 F1 | 	add	arg03, objptr
105f0     09 12 06 F6 | 	mov	arg01, #9
105f4     11 14 06 F6 | 	mov	arg02, #17
105f8     00 19 06 F6 | 	mov	arg04, #256
105fc     01 1A 06 F6 | 	mov	arg05, #1
10600     0C 00 00 FF 
10604     D8 E4 85 F1 | 	sub	objptr, ##6360
10608     78 89 B1 FD | 	call	#__system___basic_get
1060c                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
1060c     14 4E 05 F1 | 	add	fp, #20
10610     A7 FE 69 FC | 	wrlong	#255, fp
10614     14 4E 85 F1 | 	sub	fp, #20
10618     0C 00 00 FF 
1061c     D8 E4 05 F1 | 	add	objptr, ##6360
10620     97 30 48 FB | 	callpa	#(@LR__1356-@LR__1355)>>2,fcache_load_ptr_
10624                 | LR__1355
10624     18 4E 05 F1 | 	add	fp, #24
10628     A7 16 02 FB | 	rdlong	arg03, fp
1062c     0B 27 02 F6 | 	mov	local01, arg03
10630     09 26 66 F0 | 	shl	local01, #9
10634     F2 26 02 F1 | 	add	local01, objptr
10638     04 4E 85 F1 | 	sub	fp, #4
1063c     A7 1A 02 FB | 	rdlong	arg05, fp
10640     0D 19 02 F6 | 	mov	arg04, arg05
10644     01 18 66 F0 | 	shl	arg04, #1
10648     13 19 02 F1 | 	add	arg04, local01
1064c     0B 27 02 F6 | 	mov	local01, arg03
10650     09 26 66 F0 | 	shl	local01, #9
10654     0B 27 02 F1 | 	add	local01, arg03
10658     F2 26 02 F1 | 	add	local01, objptr
1065c     13 1B 02 F1 | 	add	arg05, local01
10660     0D 27 C2 FA | 	rdbyte	local01, arg05
10664     00 27 06 FA | 	mul	local01, #256
10668     0C 27 52 FC | 	wrword	local01, arg04
1066c     A7 26 02 FB | 	rdlong	local01, fp
10670     01 26 86 F1 | 	sub	local01, #1
10674     A7 26 62 FC | 	wrlong	local01, fp
10678     14 4E 85 F1 | 	sub	fp, #20
1067c     00 26 56 F2 | 	cmps	local01, #0 wc
10680     A0 FF 9F 3D |  if_ae	jmp	#LR__1355
10684                 | LR__1356
10684     0C 00 00 FF 
10688     D8 E4 85 F1 | 	sub	objptr, ##6360
1068c                 | '     close #9
1068c     09 12 06 F6 | 	mov	arg01, #9
10690     D0 CD B1 FD | 	call	#__system__close
10694     18 4E 05 F1 | 	add	fp, #24
10698     A7 26 02 FB | 	rdlong	local01, fp
1069c     18 4E 85 F1 | 	sub	fp, #24
106a0     09 26 66 F0 | 	shl	local01, #9
106a4     0C 00 00 FF 
106a8     D8 E4 05 F1 | 	add	objptr, ##6360
106ac     F2 26 02 F1 | 	add	local01, objptr
106b0     FE 27 06 F1 | 	add	local01, #510
106b4     13 01 58 FC | 	wrword	#0, local01
106b8                 | '     envbuf(channel,255)=0                                                              
106b8                 | '     return
106b8     0C 00 00 FF 
106bc     D8 E4 85 F1 | 	sub	objptr, ##6360
106c0     90 07 90 FD | 	jmp	#LR__1371
106c4                 | LR__1357
106c4                 | '     if wptr < $80000 then 
106c4     1C 4E 05 F1 | 	add	fp, #28
106c8     A7 28 02 FB | 	rdlong	local02, fp
106cc     1C 4E 85 F1 | 	sub	fp, #28
106d0     00 04 00 FF 
106d4     00 28 56 F2 | 	cmps	local02, ##524288 wc
106d8     7C 00 90 3D |  if_ae	jmp	#LR__1360
106dc                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
106dc     14 4E 05 F1 | 	add	fp, #20
106e0     A7 00 68 FC | 	wrlong	#0, fp
106e4     14 4E 85 F1 | 	sub	fp, #20
106e8     0C 00 00 FF 
106ec     D8 E4 05 F1 | 	add	objptr, ##6360
106f0     97 2C 48 FB | 	callpa	#(@LR__1359-@LR__1358)>>2,fcache_load_ptr_
106f4                 | LR__1358
106f4     18 4E 05 F1 | 	add	fp, #24
106f8     A7 28 02 FB | 	rdlong	local02, fp
106fc     09 28 66 F0 | 	shl	local02, #9
10700     F2 28 02 F1 | 	add	local02, objptr
10704     04 4E 85 F1 | 	sub	fp, #4
10708     A7 26 02 FB | 	rdlong	local01, fp
1070c     13 1B 02 F6 | 	mov	arg05, local01
10710     01 1A 66 F0 | 	shl	arg05, #1
10714     14 1B 02 F1 | 	add	arg05, local02
10718     08 4E 05 F1 | 	add	fp, #8
1071c     A7 12 02 FB | 	rdlong	arg01, fp
10720     01 26 66 F0 | 	shl	local01, #1
10724     13 13 02 F1 | 	add	arg01, local01
10728     09 FB E1 FA | 	rdword	result1, arg01
1072c     0D FB 51 FC | 	wrword	result1, arg05
10730     08 4E 85 F1 | 	sub	fp, #8
10734     A7 28 02 FB | 	rdlong	local02, fp
10738     01 28 06 F1 | 	add	local02, #1
1073c     A7 28 62 FC | 	wrlong	local02, fp
10740     14 4E 85 F1 | 	sub	fp, #20
10744     00 29 56 F2 | 	cmps	local02, #256 wc
10748     A8 FF 9F CD |  if_b	jmp	#LR__1358
1074c                 | LR__1359
1074c     0C 00 00 FF 
10750     D8 E4 85 F1 | 	sub	objptr, ##6360
10754     78 00 90 FD | 	jmp	#LR__1362
10758                 | LR__1360
10758                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
10758     14 4E 05 F1 | 	add	fp, #20
1075c     A7 00 68 FC | 	wrlong	#0, fp
10760     14 4E 85 F1 | 	sub	fp, #20
10764                 | LR__1361
10764     18 4E 05 F1 | 	add	fp, #24
10768     A7 28 02 FB | 	rdlong	local02, fp
1076c     09 28 66 F0 | 	shl	local02, #9
10770     0C 00 00 FF 
10774     D8 E4 05 F1 | 	add	objptr, ##6360
10778     F2 28 02 F1 | 	add	local02, objptr
1077c     04 4E 85 F1 | 	sub	fp, #4
10780     A7 26 02 FB | 	rdlong	local01, fp
10784     13 2B 02 F6 | 	mov	local03, local01
10788     01 2A 66 F0 | 	shl	local03, #1
1078c     14 2B 02 F1 | 	add	local03, local02
10790     08 4E 05 F1 | 	add	fp, #8
10794     A7 12 02 FB | 	rdlong	arg01, fp
10798     1C 4E 85 F1 | 	sub	fp, #28
1079c     01 26 66 F0 | 	shl	local01, #1
107a0     13 13 02 F1 | 	add	arg01, local01
107a4     0C 00 00 FF 
107a8     D8 E4 85 F1 | 	sub	objptr, ##6360
107ac     34 42 B1 FD | 	call	#_psdpeek
107b0     15 FB 51 FC | 	wrword	result1, local03
107b4     14 4E 05 F1 | 	add	fp, #20
107b8     A7 2A 02 FB | 	rdlong	local03, fp
107bc     01 2A 06 F1 | 	add	local03, #1
107c0     A7 2A 62 FC | 	wrlong	local03, fp
107c4     14 4E 85 F1 | 	sub	fp, #20
107c8     00 2B 56 F2 | 	cmps	local03, #256 wc
107cc     94 FF 9F CD |  if_b	jmp	#LR__1361
107d0                 | LR__1362
107d0     18 4E 05 F1 | 	add	fp, #24
107d4     A7 2A 02 FB | 	rdlong	local03, fp
107d8     18 4E 85 F1 | 	sub	fp, #24
107dc     09 2A 66 F0 | 	shl	local03, #9
107e0     0C 00 00 FF 
107e4     D8 E4 05 F1 | 	add	objptr, ##6360
107e8     F2 2A 02 F1 | 	add	local03, objptr
107ec     FE 2B 06 F1 | 	add	local03, #510
107f0     15 01 58 FC | 	wrword	#0, local03
107f4                 | '     envbuf(channel,255)=0
107f4                 | '     return   
107f4     0C 00 00 FF 
107f8     D8 E4 85 F1 | 	sub	objptr, ##6360
107fc     54 06 90 FD | 	jmp	#LR__1371
10800                 | LR__1363
10800                 | ' 
10800                 | ' if numpar=5 then   						 'simple adsr
10800     10 4E 05 F1 | 	add	fp, #16
10804     A7 28 02 FB | 	rdlong	local02, fp
10808     10 4E 85 F1 | 	sub	fp, #16
1080c     05 28 0E F2 | 	cmp	local02, #5 wz
10810     14 06 90 5D |  if_ne	jmp	#LR__1370
10814     08 D0 BF FD | 	call	#_pop
10818     FF 26 02 F6 | 	mov	local01, result3
1081c     40 4E 05 F1 | 	add	fp, #64
10820     A7 FA 61 FC | 	wrlong	result1, fp
10824     04 4E 05 F1 | 	add	fp, #4
10828     A7 FC 61 FC | 	wrlong	result2, fp
1082c     04 4E 05 F1 | 	add	fp, #4
10830     A7 26 62 FC | 	wrlong	local01, fp
10834     08 4E 85 F1 | 	sub	fp, #8
10838     A7 12 02 F6 | 	mov	arg01, fp
1083c     40 4E 85 F1 | 	sub	fp, #64
10840     7C D2 BF FD | 	call	#_converttofloat
10844     FD 28 02 F6 | 	mov	local02, result1
10848     2C 4E 05 F1 | 	add	fp, #44
1084c     A7 28 62 FC | 	wrlong	local02, fp
10850     2C 4E 85 F1 | 	sub	fp, #44
10854     C8 CF BF FD | 	call	#_pop
10858     FF 26 02 F6 | 	mov	local01, result3
1085c     40 4E 05 F1 | 	add	fp, #64
10860     A7 FA 61 FC | 	wrlong	result1, fp
10864     04 4E 05 F1 | 	add	fp, #4
10868     A7 FC 61 FC | 	wrlong	result2, fp
1086c     04 4E 05 F1 | 	add	fp, #4
10870     A7 26 62 FC | 	wrlong	local01, fp
10874     08 4E 85 F1 | 	sub	fp, #8
10878     A7 12 02 F6 | 	mov	arg01, fp
1087c     40 4E 85 F1 | 	sub	fp, #64
10880     3C D2 BF FD | 	call	#_converttofloat
10884     FD 28 02 F6 | 	mov	local02, result1
10888     28 4E 05 F1 | 	add	fp, #40
1088c     A7 28 62 FC | 	wrlong	local02, fp
10890     28 4E 85 F1 | 	sub	fp, #40
10894     88 CF BF FD | 	call	#_pop
10898     FF 26 02 F6 | 	mov	local01, result3
1089c     40 4E 05 F1 | 	add	fp, #64
108a0     A7 FA 61 FC | 	wrlong	result1, fp
108a4     04 4E 05 F1 | 	add	fp, #4
108a8     A7 FC 61 FC | 	wrlong	result2, fp
108ac     04 4E 05 F1 | 	add	fp, #4
108b0     A7 26 62 FC | 	wrlong	local01, fp
108b4     08 4E 85 F1 | 	sub	fp, #8
108b8     A7 12 02 F6 | 	mov	arg01, fp
108bc     40 4E 85 F1 | 	sub	fp, #64
108c0     FC D1 BF FD | 	call	#_converttofloat
108c4     FD 28 02 F6 | 	mov	local02, result1
108c8     24 4E 05 F1 | 	add	fp, #36
108cc     A7 28 62 FC | 	wrlong	local02, fp
108d0     24 4E 85 F1 | 	sub	fp, #36
108d4     48 CF BF FD | 	call	#_pop
108d8     FF 26 02 F6 | 	mov	local01, result3
108dc     40 4E 05 F1 | 	add	fp, #64
108e0     A7 FA 61 FC | 	wrlong	result1, fp
108e4     04 4E 05 F1 | 	add	fp, #4
108e8     A7 FC 61 FC | 	wrlong	result2, fp
108ec     04 4E 05 F1 | 	add	fp, #4
108f0     A7 26 62 FC | 	wrlong	local01, fp
108f4     08 4E 85 F1 | 	sub	fp, #8
108f8     A7 12 02 F6 | 	mov	arg01, fp
108fc     40 4E 85 F1 | 	sub	fp, #64
10900     BC D1 BF FD | 	call	#_converttofloat
10904     FD 28 02 F6 | 	mov	local02, result1
10908     20 4E 05 F1 | 	add	fp, #32
1090c     A7 28 62 FC | 	wrlong	local02, fp
10910     20 4E 85 F1 | 	sub	fp, #32
10914     08 CF BF FD | 	call	#_pop
10918     FF 26 02 F6 | 	mov	local01, result3
1091c     40 4E 05 F1 | 	add	fp, #64
10920     A7 FA 61 FC | 	wrlong	result1, fp
10924     04 4E 05 F1 | 	add	fp, #4
10928     A7 FC 61 FC | 	wrlong	result2, fp
1092c     04 4E 05 F1 | 	add	fp, #4
10930     A7 26 62 FC | 	wrlong	local01, fp
10934     08 4E 85 F1 | 	sub	fp, #8
10938     A7 12 02 F6 | 	mov	arg01, fp
1093c     40 4E 85 F1 | 	sub	fp, #64
10940     C0 D0 BF FD | 	call	#_converttoint
10944     18 4E 05 F1 | 	add	fp, #24
10948     A7 FA 61 FC | 	wrlong	result1, fp
1094c                 | '   t1=pop() : rr=converttofloat(t1)
1094c                 | '   t1=pop() : ss=converttofloat(t1) 
1094c                 | '   t1=pop() : dd=converttofloat(t1)
1094c                 | '   t1=pop() : aa=converttofloat(t1)
1094c                 | '   t1=pop() : channel=converttoint(t1)
1094c                 | '   if ss<0.0 then ss=0.0 
1094c     10 4E 05 F1 | 	add	fp, #16
10950     A7 12 02 FB | 	rdlong	arg01, fp
10954     28 4E 85 F1 | 	sub	fp, #40
10958     00 14 06 F6 | 	mov	arg02, #0
1095c     01 16 06 F6 | 	mov	arg03, #1
10960     5C AA B1 FD | 	call	#__system___float_cmp
10964     00 FA 55 F2 | 	cmps	result1, #0 wc
10968     28 4E 05 C1 |  if_b	add	fp, #40
1096c     A7 00 68 CC |  if_b	wrlong	#0, fp
10970     28 4E 85 C1 |  if_b	sub	fp, #40
10974                 | '   if ss>1.0 then ss=1.0
10974     28 4E 05 F1 | 	add	fp, #40
10978     A7 12 02 FB | 	rdlong	arg01, fp
1097c     28 4E 85 F1 | 	sub	fp, #40
10980     00 C0 1F FF 
10984     00 14 06 F6 | 	mov	arg02, ##1065353216
10988     01 16 66 F6 | 	neg	arg03, #1
1098c     30 AA B1 FD | 	call	#__system___float_cmp
10990     01 FA 55 F2 | 	cmps	result1, #1 wc
10994     28 4E 05 31 |  if_ae	add	fp, #40
10998     00 C0 9F 3F 
1099c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
109a0     28 4E 85 31 |  if_ae	sub	fp, #40
109a4     20 4E 05 F1 | 	add	fp, #32
109a8     A7 12 02 FB | 	rdlong	arg01, fp
109ac     04 4E 05 F1 | 	add	fp, #4
109b0     A7 14 02 FB | 	rdlong	arg02, fp
109b4     24 4E 85 F1 | 	sub	fp, #36
109b8     00 A2 B1 FD | 	call	#__system___float_add
109bc     FD 12 02 F6 | 	mov	arg01, result1
109c0     2C 4E 05 F1 | 	add	fp, #44
109c4     A7 14 02 FB | 	rdlong	arg02, fp
109c8     2C 4E 85 F1 | 	sub	fp, #44
109cc     EC A1 B1 FD | 	call	#__system___float_add
109d0     30 4E 05 F1 | 	add	fp, #48
109d4     A7 FA 61 FC | 	wrlong	result1, fp
109d8     FD 14 02 F6 | 	mov	arg02, result1
109dc     30 4E 85 F1 | 	sub	fp, #48
109e0     00 C0 21 FF 
109e4     00 12 06 F6 | 	mov	arg01, ##1132462080
109e8     A4 A7 B1 FD | 	call	#__system___float_div
109ec     34 4E 05 F1 | 	add	fp, #52
109f0     A7 FA 61 FC | 	wrlong	result1, fp
109f4     14 4E 85 F1 | 	sub	fp, #20
109f8     A7 12 02 FB | 	rdlong	arg01, fp
109fc     FD 14 02 F6 | 	mov	arg02, result1
10a00     20 4E 85 F1 | 	sub	fp, #32
10a04     84 A5 B1 FD | 	call	#__system___float_mul
10a08     FD 12 02 F6 | 	mov	arg01, result1
10a0c     01 14 06 F6 | 	mov	arg02, #1
10a10     40 AA B1 FD | 	call	#__system___float_tointeger
10a14     A7 FA 61 FC | 	wrlong	result1, fp
10a18     24 4E 05 F1 | 	add	fp, #36
10a1c     A7 12 02 FB | 	rdlong	arg01, fp
10a20     10 4E 05 F1 | 	add	fp, #16
10a24     A7 14 02 FB | 	rdlong	arg02, fp
10a28     34 4E 85 F1 | 	sub	fp, #52
10a2c     5C A5 B1 FD | 	call	#__system___float_mul
10a30     FD 12 02 F6 | 	mov	arg01, result1
10a34     01 14 06 F6 | 	mov	arg02, #1
10a38     18 AA B1 FD | 	call	#__system___float_tointeger
10a3c     04 4E 05 F1 | 	add	fp, #4
10a40     A7 FA 61 FC | 	wrlong	result1, fp
10a44     28 4E 05 F1 | 	add	fp, #40
10a48     A7 12 02 FB | 	rdlong	arg01, fp
10a4c     08 4E 05 F1 | 	add	fp, #8
10a50     A7 14 02 FB | 	rdlong	arg02, fp
10a54     34 4E 85 F1 | 	sub	fp, #52
10a58     30 A5 B1 FD | 	call	#__system___float_mul
10a5c     FD 12 02 F6 | 	mov	arg01, result1
10a60     01 14 06 F6 | 	mov	arg02, #1
10a64     EC A9 B1 FD | 	call	#__system___float_tointeger
10a68     0C 4E 05 F1 | 	add	fp, #12
10a6c     A7 FA 61 FC | 	wrlong	result1, fp
10a70     0C 4E 85 F1 | 	sub	fp, #12
10a74     F8 BF 23 FF 
10a78     00 28 06 F6 | 	mov	local02, ##1199566848
10a7c     A7 12 02 FB | 	rdlong	arg01, fp
10a80     09 13 52 F6 | 	abs	arg01, arg01 wc
10a84     1F 2C C6 C9 |  if_b	decod	local04, #31
10a88     00 2C 06 36 |  if_ae	mov	local04, #0
10a8c     F8 A0 B1 FD | 	call	#__system___float_fromuns
10a90     16 FB 61 F5 | 	xor	result1, local04
10a94     FD 14 02 F6 | 	mov	arg02, result1
10a98     14 13 02 F6 | 	mov	arg01, local02
10a9c     F0 A6 B1 FD | 	call	#__system___float_div
10aa0     38 4E 05 F1 | 	add	fp, #56
10aa4     A7 FA 61 FC | 	wrlong	result1, fp
10aa8     F8 BF 23 FF 
10aac     00 28 06 F6 | 	mov	local02, ##1199566848
10ab0     10 4E 85 F1 | 	sub	fp, #16
10ab4     A7 14 02 FB | 	rdlong	arg02, fp
10ab8     28 4E 85 F1 | 	sub	fp, #40
10abc     F8 BF 23 FF 
10ac0     00 12 06 F6 | 	mov	arg01, ##1199566848
10ac4     C4 A4 B1 FD | 	call	#__system___float_mul
10ac8     FD 14 02 F6 | 	mov	arg02, result1
10acc     14 13 02 F6 | 	mov	arg01, local02
10ad0     1F 14 E6 F4 | 	bitnot	arg02, #31
10ad4     E4 A0 B1 FD | 	call	#__system___float_add
10ad8     FD 28 02 F6 | 	mov	local02, result1
10adc     04 4E 05 F1 | 	add	fp, #4
10ae0     A7 12 02 FB | 	rdlong	arg01, fp
10ae4     04 4E 85 F1 | 	sub	fp, #4
10ae8     09 13 52 F6 | 	abs	arg01, arg01 wc
10aec     1F 2C C6 C9 |  if_b	decod	local04, #31
10af0     00 2C 06 36 |  if_ae	mov	local04, #0
10af4     90 A0 B1 FD | 	call	#__system___float_fromuns
10af8     16 FB 61 F5 | 	xor	result1, local04
10afc     FD 14 02 F6 | 	mov	arg02, result1
10b00     14 13 02 F6 | 	mov	arg01, local02
10b04     88 A6 B1 FD | 	call	#__system___float_div
10b08     24 4E 05 F1 | 	add	fp, #36
10b0c     A7 FA 61 FC | 	wrlong	result1, fp
10b10     04 4E 05 F1 | 	add	fp, #4
10b14     A7 14 02 FB | 	rdlong	arg02, fp
10b18     28 4E 85 F1 | 	sub	fp, #40
10b1c     F8 BF 23 FF 
10b20     00 12 06 F6 | 	mov	arg01, ##1199566848
10b24     64 A4 B1 FD | 	call	#__system___float_mul
10b28     FD 28 02 F6 | 	mov	local02, result1
10b2c     0C 4E 05 F1 | 	add	fp, #12
10b30     A7 12 02 FB | 	rdlong	arg01, fp
10b34     0C 4E 85 F1 | 	sub	fp, #12
10b38     09 13 52 F6 | 	abs	arg01, arg01 wc
10b3c     1F 2C C6 C9 |  if_b	decod	local04, #31
10b40     00 2C 06 36 |  if_ae	mov	local04, #0
10b44     40 A0 B1 FD | 	call	#__system___float_fromuns
10b48     16 FB 61 F5 | 	xor	result1, local04
10b4c     FD 14 02 F6 | 	mov	arg02, result1
10b50     14 13 02 F6 | 	mov	arg01, local02
10b54     38 A6 B1 FD | 	call	#__system___float_div
10b58     3C 4E 05 F1 | 	add	fp, #60
10b5c     A7 FA 61 FC | 	wrlong	result1, fp
10b60     24 4E 85 F1 | 	sub	fp, #36
10b64     A7 2E 02 FB | 	rdlong	local05, fp
10b68     18 4E 85 F1 | 	sub	fp, #24
10b6c     01 2E 66 F0 | 	shl	local05, #1
10b70     52 00 00 FF 
10b74     0C E5 05 F1 | 	add	objptr, ##42252
10b78     F2 2E 02 F1 | 	add	local05, objptr
10b7c     A7 30 02 FB | 	rdlong	local06, fp
10b80     04 4E 05 F1 | 	add	fp, #4
10b84     A7 2A 02 FB | 	rdlong	local03, fp
10b88     15 31 02 F1 | 	add	local06, local03
10b8c     17 31 52 FC | 	wrword	local06, local05
10b90     1C 4E 05 F1 | 	add	fp, #28
10b94     A7 00 68 FC | 	wrlong	#0, fp
10b98                 | '   fulltime=aa+dd+rr
10b98                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
10b98                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
10b98                 | '   suspoints(channel)=a+d
10b98                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
10b98     0C 4E 85 F1 | 	sub	fp, #12
10b9c     A7 00 68 FC | 	wrlong	#0, fp
10ba0     14 4E 85 F1 | 	sub	fp, #20
10ba4     A7 32 02 FB | 	rdlong	local07, fp
10ba8     52 00 00 FF 
10bac     0C E5 85 F1 | 	sub	objptr, ##42252
10bb0                 | LR__1364
10bb0     14 4E 05 F1 | 	add	fp, #20
10bb4     A7 28 02 FB | 	rdlong	local02, fp
10bb8     14 4E 85 F1 | 	sub	fp, #20
10bbc     19 29 52 F2 | 	cmps	local02, local07 wc
10bc0     80 00 90 3D |  if_ae	jmp	#LR__1365
10bc4     18 4E 05 F1 | 	add	fp, #24
10bc8     A7 30 02 FB | 	rdlong	local06, fp
10bcc     09 30 66 F0 | 	shl	local06, #9
10bd0     0C 00 00 FF 
10bd4     D8 E4 05 F1 | 	add	objptr, ##6360
10bd8     F2 30 02 F1 | 	add	local06, objptr
10bdc     04 4E 85 F1 | 	sub	fp, #4
10be0     A7 2E 02 FB | 	rdlong	local05, fp
10be4     01 2E 66 F0 | 	shl	local05, #1
10be8     18 2F 02 F1 | 	add	local05, local06
10bec     0C 4E 05 F1 | 	add	fp, #12
10bf0     A7 12 02 FB | 	rdlong	arg01, fp
10bf4     20 4E 85 F1 | 	sub	fp, #32
10bf8     0C 00 00 FF 
10bfc     D8 E4 85 F1 | 	sub	objptr, ##6360
10c00     01 14 06 F6 | 	mov	arg02, #1
10c04     4C A8 B1 FD | 	call	#__system___float_tointeger
10c08     17 FB 51 FC | 	wrword	result1, local05
10c0c     20 4E 05 F1 | 	add	fp, #32
10c10     A7 12 02 FB | 	rdlong	arg01, fp
10c14     18 4E 05 F1 | 	add	fp, #24
10c18     A7 14 02 FB | 	rdlong	arg02, fp
10c1c     38 4E 85 F1 | 	sub	fp, #56
10c20     98 9F B1 FD | 	call	#__system___float_add
10c24     20 4E 05 F1 | 	add	fp, #32
10c28     A7 FA 61 FC | 	wrlong	result1, fp
10c2c     0C 4E 85 F1 | 	sub	fp, #12
10c30     A7 30 02 FB | 	rdlong	local06, fp
10c34     01 30 06 F1 | 	add	local06, #1
10c38     A7 30 62 FC | 	wrlong	local06, fp
10c3c     14 4E 85 F1 | 	sub	fp, #20
10c40     6C FF 9F FD | 	jmp	#LR__1364
10c44                 | LR__1365
10c44                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10c44     A7 28 02 FB | 	rdlong	local02, fp
10c48     14 4E 05 F1 | 	add	fp, #20
10c4c     A7 28 62 FC | 	wrlong	local02, fp
10c50     14 4E 85 F1 | 	sub	fp, #20
10c54     A7 34 02 FB | 	rdlong	local08, fp
10c58     04 4E 05 F1 | 	add	fp, #4
10c5c     A7 28 02 FB | 	rdlong	local02, fp
10c60     04 4E 85 F1 | 	sub	fp, #4
10c64     14 35 02 F1 | 	add	local08, local02
10c68                 | LR__1366
10c68     14 4E 05 F1 | 	add	fp, #20
10c6c     A7 28 02 FB | 	rdlong	local02, fp
10c70     14 4E 85 F1 | 	sub	fp, #20
10c74     1A 29 52 F2 | 	cmps	local02, local08 wc
10c78     A8 00 90 3D |  if_ae	jmp	#LR__1367
10c7c     18 4E 05 F1 | 	add	fp, #24
10c80     A7 32 02 FB | 	rdlong	local07, fp
10c84     09 32 66 F0 | 	shl	local07, #9
10c88     0C 00 00 FF 
10c8c     D8 E4 05 F1 | 	add	objptr, ##6360
10c90     F2 32 02 F1 | 	add	local07, objptr
10c94     04 4E 85 F1 | 	sub	fp, #4
10c98     A7 30 02 FB | 	rdlong	local06, fp
10c9c     01 30 66 F0 | 	shl	local06, #1
10ca0     19 31 02 F1 | 	add	local06, local07
10ca4     0C 4E 05 F1 | 	add	fp, #12
10ca8     A7 12 02 FB | 	rdlong	arg01, fp
10cac     20 4E 85 F1 | 	sub	fp, #32
10cb0     0C 00 00 FF 
10cb4     D8 E4 85 F1 | 	sub	objptr, ##6360
10cb8     01 14 06 F6 | 	mov	arg02, #1
10cbc     94 A7 B1 FD | 	call	#__system___float_tointeger
10cc0     18 FB 51 FC | 	wrword	result1, local06
10cc4     20 4E 05 F1 | 	add	fp, #32
10cc8     A7 12 02 FB | 	rdlong	arg01, fp
10ccc     04 4E 05 F1 | 	add	fp, #4
10cd0     A7 14 02 FB | 	rdlong	arg02, fp
10cd4     24 4E 85 F1 | 	sub	fp, #36
10cd8     1F 14 E6 F4 | 	bitnot	arg02, #31
10cdc     DC 9E B1 FD | 	call	#__system___float_add
10ce0     20 4E 05 F1 | 	add	fp, #32
10ce4     A7 FA 61 FC | 	wrlong	result1, fp
10ce8     20 4E 85 F1 | 	sub	fp, #32
10cec     FD 12 02 F6 | 	mov	arg01, result1
10cf0     00 14 06 F6 | 	mov	arg02, #0
10cf4     01 16 06 F6 | 	mov	arg03, #1
10cf8     C4 A6 B1 FD | 	call	#__system___float_cmp
10cfc     00 FA 55 F2 | 	cmps	result1, #0 wc
10d00     20 4E 05 C1 |  if_b	add	fp, #32
10d04     A7 00 68 CC |  if_b	wrlong	#0, fp
10d08     20 4E 85 C1 |  if_b	sub	fp, #32
10d0c     14 4E 05 F1 | 	add	fp, #20
10d10     A7 32 02 FB | 	rdlong	local07, fp
10d14     01 32 06 F1 | 	add	local07, #1
10d18     A7 32 62 FC | 	wrlong	local07, fp
10d1c     14 4E 85 F1 | 	sub	fp, #20
10d20     44 FF 9F FD | 	jmp	#LR__1366
10d24                 | LR__1367
10d24                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
10d24     A7 28 02 FB | 	rdlong	local02, fp
10d28     04 4E 05 F1 | 	add	fp, #4
10d2c     A7 34 02 FB | 	rdlong	local08, fp
10d30     1A 29 02 F1 | 	add	local02, local08
10d34     10 4E 05 F1 | 	add	fp, #16
10d38     A7 28 62 FC | 	wrlong	local02, fp
10d3c     14 4E 85 F1 | 	sub	fp, #20
10d40                 | LR__1368
10d40     14 4E 05 F1 | 	add	fp, #20
10d44     A7 2E 02 FB | 	rdlong	local05, fp
10d48     14 4E 85 F1 | 	sub	fp, #20
10d4c     00 2F 56 F2 | 	cmps	local05, #256 wc
10d50     A8 00 90 3D |  if_ae	jmp	#LR__1369
10d54     18 4E 05 F1 | 	add	fp, #24
10d58     A7 34 02 FB | 	rdlong	local08, fp
10d5c     09 34 66 F0 | 	shl	local08, #9
10d60     0C 00 00 FF 
10d64     D8 E4 05 F1 | 	add	objptr, ##6360
10d68     F2 34 02 F1 | 	add	local08, objptr
10d6c     04 4E 85 F1 | 	sub	fp, #4
10d70     A7 32 02 FB | 	rdlong	local07, fp
10d74     01 32 66 F0 | 	shl	local07, #1
10d78     1A 33 02 F1 | 	add	local07, local08
10d7c     0C 4E 05 F1 | 	add	fp, #12
10d80     A7 12 02 FB | 	rdlong	arg01, fp
10d84     20 4E 85 F1 | 	sub	fp, #32
10d88     0C 00 00 FF 
10d8c     D8 E4 85 F1 | 	sub	objptr, ##6360
10d90     01 14 06 F6 | 	mov	arg02, #1
10d94     BC A6 B1 FD | 	call	#__system___float_tointeger
10d98     19 FB 51 FC | 	wrword	result1, local07
10d9c     20 4E 05 F1 | 	add	fp, #32
10da0     A7 12 02 FB | 	rdlong	arg01, fp
10da4     1C 4E 05 F1 | 	add	fp, #28
10da8     A7 14 02 FB | 	rdlong	arg02, fp
10dac     3C 4E 85 F1 | 	sub	fp, #60
10db0     1F 14 E6 F4 | 	bitnot	arg02, #31
10db4     04 9E B1 FD | 	call	#__system___float_add
10db8     20 4E 05 F1 | 	add	fp, #32
10dbc     A7 FA 61 FC | 	wrlong	result1, fp
10dc0     20 4E 85 F1 | 	sub	fp, #32
10dc4     FD 12 02 F6 | 	mov	arg01, result1
10dc8     00 14 06 F6 | 	mov	arg02, #0
10dcc     01 16 06 F6 | 	mov	arg03, #1
10dd0     EC A5 B1 FD | 	call	#__system___float_cmp
10dd4     00 FA 55 F2 | 	cmps	result1, #0 wc
10dd8     20 4E 05 C1 |  if_b	add	fp, #32
10ddc     A7 00 68 CC |  if_b	wrlong	#0, fp
10de0     20 4E 85 C1 |  if_b	sub	fp, #32
10de4     14 4E 05 F1 | 	add	fp, #20
10de8     A7 34 02 FB | 	rdlong	local08, fp
10dec     01 34 06 F1 | 	add	local08, #1
10df0     A7 34 62 FC | 	wrlong	local08, fp
10df4     14 4E 85 F1 | 	sub	fp, #20
10df8     44 FF 9F FD | 	jmp	#LR__1368
10dfc                 | LR__1369
10dfc     18 4E 05 F1 | 	add	fp, #24
10e00     A7 2E 02 FB | 	rdlong	local05, fp
10e04     18 4E 85 F1 | 	sub	fp, #24
10e08     09 2E 66 F0 | 	shl	local05, #9
10e0c     0C 00 00 FF 
10e10     D8 E4 05 F1 | 	add	objptr, ##6360
10e14     F2 2E 02 F1 | 	add	local05, objptr
10e18     FE 2F 06 F1 | 	add	local05, #510
10e1c     17 01 58 FC | 	wrword	#0, local05
10e20     0C 00 00 FF 
10e24     D8 E4 85 F1 | 	sub	objptr, ##6360
10e28                 | LR__1370
10e28     18 4E 05 F1 | 	add	fp, #24
10e2c     A7 2E 02 FB | 	rdlong	local05, fp
10e30     18 4E 85 F1 | 	sub	fp, #24
10e34     09 2E 66 F0 | 	shl	local05, #9
10e38     0C 00 00 FF 
10e3c     D8 E4 05 F1 | 	add	objptr, ##6360
10e40     F2 2E 02 F1 | 	add	local05, objptr
10e44     FE 2F 06 F1 | 	add	local05, #510
10e48     17 01 58 FC | 	wrword	#0, local05
10e4c     0C 00 00 FF 
10e50     D8 E4 85 F1 | 	sub	objptr, ##6360
10e54                 | LR__1371
10e54     A7 F0 03 F6 | 	mov	ptra, fp
10e58     B2 00 A0 FD | 	call	#popregs_
10e5c                 | _do_defenv_ret
10e5c     2D 00 64 FD | 	ret
10e60                 | 
10e60                 | ' 
10e60                 | ' '-------------------- defsnd
10e60                 | ' 
10e60                 | ' sub do_defsnd
10e60                 | _do_defsnd
10e60     04 4A 05 F6 | 	mov	COUNT_, #4
10e64     A8 00 A0 FD | 	call	#pushregs_
10e68     88 F0 07 F1 | 	add	ptra, #136
10e6c     4A 00 00 FF 
10e70     A0 E4 05 F1 | 	add	objptr, ##38048
10e74     F2 1A 02 FB | 	rdlong	arg05, objptr
10e78     0D 19 02 F6 | 	mov	arg04, arg05
10e7c     01 18 66 F0 | 	shl	arg04, #1
10e80     0D 19 02 F1 | 	add	arg04, arg05
10e84     02 18 66 F0 | 	shl	arg04, #2
10e88     03 00 00 FF 
10e8c     04 E4 85 F1 | 	sub	objptr, ##1540
10e90     F2 18 02 F1 | 	add	arg04, objptr
10e94     0C 1B 02 FB | 	rdlong	arg05, arg04
10e98     A7 1A 62 FC | 	wrlong	arg05, fp
10e9c                 | ' 
10e9c                 | ' numpar=compiledline(lineptr_e).result.uresult
10e9c                 | ' 
10e9c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10e9c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10e9c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10e9c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10e9c                 | ' 
10e9c                 | ' if numpar<2 then return
10e9c     02 1A 56 F2 | 	cmps	arg05, #2 wc
10ea0     47 00 00 FF 
10ea4     9C E4 85 F1 | 	sub	objptr, ##36508
10ea8     98 08 90 CD |  if_b	jmp	#LR__1403
10eac                 | '  
10eac                 | ' if numpar=2 then
10eac     A7 1A 02 FB | 	rdlong	arg05, fp
10eb0     02 1A 0E F2 | 	cmp	arg05, #2 wz
10eb4     A4 03 90 5D |  if_ne	jmp	#LR__1390
10eb8     64 C9 BF FD | 	call	#_pop
10ebc     FF 1A 02 F6 | 	mov	arg05, result3
10ec0     2C 4E 05 F1 | 	add	fp, #44
10ec4     A7 FA 61 FC | 	wrlong	result1, fp
10ec8     04 4E 05 F1 | 	add	fp, #4
10ecc     A7 FC 61 FC | 	wrlong	result2, fp
10ed0     04 4E 05 F1 | 	add	fp, #4
10ed4     A7 1A 62 FC | 	wrlong	arg05, fp
10ed8                 | '   t1=pop()
10ed8                 | '   if t1.result_type=result_string2 then 
10ed8     34 4E 85 F1 | 	sub	fp, #52
10edc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10ee0     20 00 90 5D |  if_ne	jmp	#LR__1380
10ee4     2C 4E 05 F1 | 	add	fp, #44
10ee8     A7 12 02 FB | 	rdlong	arg01, fp
10eec     2C 4E 85 F1 | 	sub	fp, #44
10ef0     A4 CA BF FD | 	call	#_convertstring
10ef4     38 4E 05 F1 | 	add	fp, #56
10ef8     A7 FA 61 FC | 	wrlong	result1, fp
10efc     38 4E 85 F1 | 	sub	fp, #56
10f00     58 00 90 FD | 	jmp	#LR__1383
10f04                 | LR__1380
10f04     34 4E 05 F1 | 	add	fp, #52
10f08     A7 1A 02 FB | 	rdlong	arg05, fp
10f0c     34 4E 85 F1 | 	sub	fp, #52
10f10     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10f14     18 00 90 5D |  if_ne	jmp	#LR__1381
10f18     2C 4E 05 F1 | 	add	fp, #44
10f1c     A7 1A 02 FB | 	rdlong	arg05, fp
10f20     0C 4E 05 F1 | 	add	fp, #12
10f24     A7 1A 62 FC | 	wrlong	arg05, fp
10f28     38 4E 85 F1 | 	sub	fp, #56
10f2c     2C 00 90 FD | 	jmp	#LR__1382
10f30                 | LR__1381
10f30     B4 01 00 FF 
10f34     DC 1B 06 F6 | 	mov	arg05, ##@LR__5813
10f38     38 4E 05 F1 | 	add	fp, #56
10f3c     A7 1A 62 FC | 	wrlong	arg05, fp
10f40     0C 4E 85 F1 | 	sub	fp, #12
10f44     A7 12 02 F6 | 	mov	arg01, fp
10f48     2C 4E 85 F1 | 	sub	fp, #44
10f4c     B4 CA BF FD | 	call	#_converttoint
10f50     14 4E 05 F1 | 	add	fp, #20
10f54     A7 FA 61 FC | 	wrlong	result1, fp
10f58     14 4E 85 F1 | 	sub	fp, #20
10f5c                 | LR__1382
10f5c                 | LR__1383
10f5c                 | '   if s<>"" then 
10f5c     38 4E 05 F1 | 	add	fp, #56
10f60     A7 12 02 FB | 	rdlong	arg01, fp
10f64     38 4E 85 F1 | 	sub	fp, #56
10f68     B4 01 00 FF 
10f6c     DD 15 06 F6 | 	mov	arg02, ##@LR__5814
10f70     C4 71 B1 FD | 	call	#__system___string_cmp
10f74     00 FA 0D F2 | 	cmp	result1, #0 wz
10f78     E4 01 90 AD |  if_e	jmp	#LR__1386
10f7c     A0 C8 BF FD | 	call	#_pop
10f80     FF 1A 02 F6 | 	mov	arg05, result3
10f84     2C 4E 05 F1 | 	add	fp, #44
10f88     A7 FA 61 FC | 	wrlong	result1, fp
10f8c     04 4E 05 F1 | 	add	fp, #4
10f90     A7 FC 61 FC | 	wrlong	result2, fp
10f94     04 4E 05 F1 | 	add	fp, #4
10f98     A7 1A 62 FC | 	wrlong	arg05, fp
10f9c     08 4E 85 F1 | 	sub	fp, #8
10fa0     A7 12 02 F6 | 	mov	arg01, fp
10fa4     2C 4E 85 F1 | 	sub	fp, #44
10fa8     58 CA BF FD | 	call	#_converttoint
10fac     10 4E 05 F1 | 	add	fp, #16
10fb0     A7 FA 61 FC | 	wrlong	result1, fp
10fb4                 | '     t1=pop()
10fb4                 | '     channel=converttoint(t1) : if channel>31 then return
10fb4     FD 1A 02 F6 | 	mov	arg05, result1
10fb8     10 4E 85 F1 | 	sub	fp, #16
10fbc     20 1A 56 F2 | 	cmps	arg05, #32 wc
10fc0     80 07 90 3D |  if_ae	jmp	#LR__1403
10fc4                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10fc4     09 12 06 F6 | 	mov	arg01, #9
10fc8     98 C4 B1 FD | 	call	#__system__close
10fcc     09 26 06 F6 | 	mov	local01, #9
10fd0     B4 01 00 FF 
10fd4     DE 13 06 F6 | 	mov	arg01, ##@LR__5815
10fd8     38 4E 05 F1 | 	add	fp, #56
10fdc     A7 14 02 FB | 	rdlong	arg02, fp
10fe0     38 4E 85 F1 | 	sub	fp, #56
10fe4     84 71 B1 FD | 	call	#__system___string_concat
10fe8     FD 14 02 F6 | 	mov	arg02, result1
10fec     13 13 02 F6 | 	mov	arg01, local01
10ff0     00 16 06 F6 | 	mov	arg03, #0
10ff4     1C 7D B1 FD | 	call	#__system___basic_open_string
10ff8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10ffc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
11000     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
11004     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11008     52 00 00 FF 
1100c     68 E5 05 F1 | 	add	objptr, ##42344
11010     F2 FA 61 FC | 	wrlong	result1, objptr
11014                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
11014     52 00 00 FF 
11018     68 E5 85 F1 | 	sub	objptr, ##42344
1101c     B0 00 90 AD |  if_e	jmp	#LR__1384
11020     00 12 06 F6 | 	mov	arg01, #0
11024     8C CD B1 FD | 	call	#__system___getiolock_0620
11028     FD 12 02 F6 | 	mov	arg01, result1
1102c     E0 70 B1 FD | 	call	#__system___lockmem
11030     B4 01 00 FF 
11034     EB 15 06 F6 | 	mov	arg02, ##@LR__5816
11038     00 12 06 F6 | 	mov	arg01, #0
1103c     00 16 06 F6 | 	mov	arg03, #0
11040     C4 7D B1 FD | 	call	#__system___basic_print_string
11044     52 00 00 FF 
11048     68 E5 05 F1 | 	add	objptr, ##42344
1104c     F2 14 02 FB | 	rdlong	arg02, objptr
11050     52 00 00 FF 
11054     68 E5 85 F1 | 	sub	objptr, ##42344
11058     00 12 06 F6 | 	mov	arg01, #0
1105c     00 16 06 F6 | 	mov	arg03, #0
11060     0A 18 06 F6 | 	mov	arg04, #10
11064     E4 7D B1 FD | 	call	#__system___basic_print_integer
11068     B4 01 00 FF 
1106c     F9 15 06 F6 | 	mov	arg02, ##@LR__5817
11070     00 12 06 F6 | 	mov	arg01, #0
11074     00 16 06 F6 | 	mov	arg03, #0
11078     8C 7D B1 FD | 	call	#__system___basic_print_string
1107c     00 26 06 F6 | 	mov	local01, #0
11080     52 00 00 FF 
11084     68 E5 05 F1 | 	add	objptr, ##42344
11088     F2 12 02 FB | 	rdlong	arg01, objptr
1108c     52 00 00 FF 
11090     68 E5 85 F1 | 	sub	objptr, ##42344
11094     08 9A B1 FD | 	call	#__system___strerror
11098     FD 14 02 F6 | 	mov	arg02, result1
1109c     13 13 02 F6 | 	mov	arg01, local01
110a0     00 16 06 F6 | 	mov	arg03, #0
110a4     60 7D B1 FD | 	call	#__system___basic_print_string
110a8     00 12 06 F6 | 	mov	arg01, #0
110ac     0A 14 06 F6 | 	mov	arg02, #10
110b0     00 16 06 F6 | 	mov	arg03, #0
110b4     F8 7C B1 FD | 	call	#__system___basic_print_char
110b8     00 12 06 F6 | 	mov	arg01, #0
110bc     F4 CC B1 FD | 	call	#__system___getiolock_0620
110c0     FD 00 68 FC | 	wrlong	#0, result1
110c4     09 12 06 F6 | 	mov	arg01, #9
110c8     98 C3 B1 FD | 	call	#__system__close
110cc     74 06 90 FD | 	jmp	#LR__1403
110d0                 | LR__1384
110d0                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
110d0     04 4E 05 F1 | 	add	fp, #4
110d4     A7 00 68 FC | 	wrlong	#0, fp
110d8                 | LR__1385
110d8     A7 26 02 FB | 	rdlong	local01, fp
110dc     01 26 66 F0 | 	shl	local01, #1
110e0     11 14 06 F6 | 	mov	arg02, #17
110e4     13 15 02 F1 | 	add	arg02, local01
110e8     78 4E 05 F1 | 	add	fp, #120
110ec     A7 16 02 F6 | 	mov	arg03, fp
110f0     7C 4E 85 F1 | 	sub	fp, #124
110f4     09 12 06 F6 | 	mov	arg01, #9
110f8     01 18 06 F6 | 	mov	arg04, #1
110fc     02 1A 06 F6 | 	mov	arg05, #2
11100     80 7E B1 FD | 	call	#__system___basic_get
11104     10 4E 05 F1 | 	add	fp, #16
11108     A7 12 02 FB | 	rdlong	arg01, fp
1110c     0B 12 66 F0 | 	shl	arg01, #11
11110     0C 4E 85 F1 | 	sub	fp, #12
11114     A7 26 02 FB | 	rdlong	local01, fp
11118     01 26 66 F0 | 	shl	local01, #1
1111c     13 13 02 F1 | 	add	arg01, local01
11120     78 4E 05 F1 | 	add	fp, #120
11124     A7 14 E2 FA | 	rdword	arg02, fp
11128     7C 4E 85 F1 | 	sub	fp, #124
1112c     0F 14 66 F7 | 	signx	arg02, #15
11130     70 37 B1 FD | 	call	#_psdpoke
11134     04 4E 05 F1 | 	add	fp, #4
11138     A7 26 02 FB | 	rdlong	local01, fp
1113c     01 26 06 F1 | 	add	local01, #1
11140     A7 26 62 FC | 	wrlong	local01, fp
11144     02 00 00 FF 
11148     01 26 56 F2 | 	cmps	local01, ##1025 wc
1114c     88 FF 9F CD |  if_b	jmp	#LR__1385
11150     04 4E 85 F1 | 	sub	fp, #4
11154                 | '     close #9
11154     09 12 06 F6 | 	mov	arg01, #9
11158     08 C3 B1 FD | 	call	#__system__close
1115c                 | '     return
1115c     E4 05 90 FD | 	jmp	#LR__1403
11160                 | LR__1386
11160                 | '     if wptr < ($80000 - 2048) then 
11160     14 4E 05 F1 | 	add	fp, #20
11164     A7 26 02 FB | 	rdlong	local01, fp
11168     14 4E 85 F1 | 	sub	fp, #20
1116c     FC 03 00 FF 
11170     00 26 56 F2 | 	cmps	local01, ##522240 wc
11174     70 00 90 3D |  if_ae	jmp	#LR__1388
11178                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
11178     04 4E 05 F1 | 	add	fp, #4
1117c     A7 00 68 FC | 	wrlong	#0, fp
11180     04 4E 85 F1 | 	sub	fp, #4
11184                 | LR__1387
11184     10 4E 05 F1 | 	add	fp, #16
11188     A7 26 02 FB | 	rdlong	local01, fp
1118c     0B 26 66 F0 | 	shl	local01, #11
11190     0C 4E 85 F1 | 	sub	fp, #12
11194     A7 1A 02 FB | 	rdlong	arg05, fp
11198     0D 19 02 F6 | 	mov	arg04, arg05
1119c     01 18 66 F0 | 	shl	arg04, #1
111a0     0C 27 02 F1 | 	add	local01, arg04
111a4     10 4E 05 F1 | 	add	fp, #16
111a8     A7 12 02 FB | 	rdlong	arg01, fp
111ac     14 4E 85 F1 | 	sub	fp, #20
111b0     01 1A 66 F0 | 	shl	arg05, #1
111b4     0D 13 02 F1 | 	add	arg01, arg05
111b8     09 15 E2 FA | 	rdword	arg02, arg01
111bc     13 13 02 F6 | 	mov	arg01, local01
111c0     E0 36 B1 FD | 	call	#_psdpoke
111c4     04 4E 05 F1 | 	add	fp, #4
111c8     A7 26 02 FB | 	rdlong	local01, fp
111cc     01 26 06 F1 | 	add	local01, #1
111d0     A7 26 62 FC | 	wrlong	local01, fp
111d4     04 4E 85 F1 | 	sub	fp, #4
111d8     02 00 00 FF 
111dc     00 26 56 F2 | 	cmps	local01, ##1024 wc
111e0     A0 FF 9F CD |  if_b	jmp	#LR__1387
111e4     5C 05 90 FD | 	jmp	#LR__1403
111e8                 | LR__1388
111e8                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
111e8     04 4E 05 F1 | 	add	fp, #4
111ec     A7 00 68 FC | 	wrlong	#0, fp
111f0     04 4E 85 F1 | 	sub	fp, #4
111f4                 | LR__1389
111f4     10 4E 05 F1 | 	add	fp, #16
111f8     A7 26 02 FB | 	rdlong	local01, fp
111fc     0B 26 66 F0 | 	shl	local01, #11
11200     0C 4E 85 F1 | 	sub	fp, #12
11204     A7 1A 02 FB | 	rdlong	arg05, fp
11208     0D 19 02 F6 | 	mov	arg04, arg05
1120c     01 18 66 F0 | 	shl	arg04, #1
11210     0C 27 02 F1 | 	add	local01, arg04
11214     10 4E 05 F1 | 	add	fp, #16
11218     A7 12 02 FB | 	rdlong	arg01, fp
1121c     14 4E 85 F1 | 	sub	fp, #20
11220     01 1A 66 F0 | 	shl	arg05, #1
11224     0D 13 02 F1 | 	add	arg01, arg05
11228     B8 37 B1 FD | 	call	#_psdpeek
1122c     FD 14 02 F6 | 	mov	arg02, result1
11230     13 13 02 F6 | 	mov	arg01, local01
11234     6C 36 B1 FD | 	call	#_psdpoke
11238     04 4E 05 F1 | 	add	fp, #4
1123c     A7 26 02 FB | 	rdlong	local01, fp
11240     01 26 06 F1 | 	add	local01, #1
11244     A7 26 62 FC | 	wrlong	local01, fp
11248     04 4E 85 F1 | 	sub	fp, #4
1124c     02 00 00 FF 
11250     00 26 56 F2 | 	cmps	local01, ##1024 wc
11254     9C FF 9F CD |  if_b	jmp	#LR__1389
11258                 | '     return 
11258     E8 04 90 FD | 	jmp	#LR__1403
1125c                 | '   return
1125c                 | LR__1390
1125c                 | ' for i=0 to 15 : harm(i)=0: next i  
1125c     04 4E 05 F1 | 	add	fp, #4
11260     A7 00 68 FC | 	wrlong	#0, fp
11264     97 16 48 FB | 	callpa	#(@LR__1392-@LR__1391)>>2,fcache_load_ptr_
11268                 | LR__1391
11268     A7 26 02 FB | 	rdlong	local01, fp
1126c     02 26 66 F0 | 	shl	local01, #2
11270     38 4E 05 F1 | 	add	fp, #56
11274     A7 26 02 F1 | 	add	local01, fp
11278     13 01 68 FC | 	wrlong	#0, local01
1127c     38 4E 85 F1 | 	sub	fp, #56
11280     A7 26 02 FB | 	rdlong	local01, fp
11284     01 26 06 F1 | 	add	local01, #1
11288     A7 26 62 FC | 	wrlong	local01, fp
1128c     10 26 56 F2 | 	cmps	local01, #16 wc
11290     D4 FF 9F CD |  if_b	jmp	#LR__1391
11294                 | LR__1392
11294     04 4E 85 F1 | 	sub	fp, #4
11298                 | ' for i=numpar to 2 step -1 
11298     A7 26 02 FB | 	rdlong	local01, fp
1129c     04 4E 05 F1 | 	add	fp, #4
112a0     A7 26 62 FC | 	wrlong	local01, fp
112a4     04 4E 85 F1 | 	sub	fp, #4
112a8                 | LR__1393
112a8     74 C5 BF FD | 	call	#_pop
112ac     2C 4E 05 F1 | 	add	fp, #44
112b0     A7 FA 61 FC | 	wrlong	result1, fp
112b4     04 4E 05 F1 | 	add	fp, #4
112b8     A7 FC 61 FC | 	wrlong	result2, fp
112bc     04 4E 05 F1 | 	add	fp, #4
112c0     A7 FE 61 FC | 	wrlong	result3, fp
112c4     30 4E 85 F1 | 	sub	fp, #48
112c8     A7 26 02 FB | 	rdlong	local01, fp
112cc     02 26 86 F1 | 	sub	local01, #2
112d0     02 26 66 F0 | 	shl	local01, #2
112d4     38 4E 05 F1 | 	add	fp, #56
112d8     A7 26 02 F1 | 	add	local01, fp
112dc     10 4E 85 F1 | 	sub	fp, #16
112e0     A7 12 02 F6 | 	mov	arg01, fp
112e4     2C 4E 85 F1 | 	sub	fp, #44
112e8     D4 C7 BF FD | 	call	#_converttofloat
112ec     13 FB 61 FC | 	wrlong	result1, local01
112f0     04 4E 05 F1 | 	add	fp, #4
112f4     A7 26 02 FB | 	rdlong	local01, fp
112f8     01 26 86 F1 | 	sub	local01, #1
112fc     A7 26 62 FC | 	wrlong	local01, fp
11300     04 4E 85 F1 | 	sub	fp, #4
11304     02 26 56 F2 | 	cmps	local01, #2 wc
11308     9C FF 9F 3D |  if_ae	jmp	#LR__1393
1130c     10 C5 BF FD | 	call	#_pop
11310     FF 26 02 F6 | 	mov	local01, result3
11314     2C 4E 05 F1 | 	add	fp, #44
11318     A7 FA 61 FC | 	wrlong	result1, fp
1131c     04 4E 05 F1 | 	add	fp, #4
11320     A7 FC 61 FC | 	wrlong	result2, fp
11324     04 4E 05 F1 | 	add	fp, #4
11328     A7 26 62 FC | 	wrlong	local01, fp
1132c     08 4E 85 F1 | 	sub	fp, #8
11330     A7 12 02 F6 | 	mov	arg01, fp
11334     2C 4E 85 F1 | 	sub	fp, #44
11338     C8 C6 BF FD | 	call	#_converttoint
1133c     10 4E 05 F1 | 	add	fp, #16
11340     A7 FA 61 FC | 	wrlong	result1, fp
11344                 | ' t1=pop()
11344                 | ' channel=converttoint(t1) : : if channel>31 then return
11344     FD 26 02 F6 | 	mov	local01, result1
11348     10 4E 85 F1 | 	sub	fp, #16
1134c     20 26 56 F2 | 	cmps	local01, #32 wc
11350     F0 03 90 3D |  if_ae	jmp	#LR__1403
11354     20 4E 05 F1 | 	add	fp, #32
11358     A7 00 68 FC | 	wrlong	#0, fp
1135c                 | ' max=0
1135c                 | ' if harm(0)<0 then
1135c     1C 4E 05 F1 | 	add	fp, #28
11360     A7 12 02 FB | 	rdlong	arg01, fp
11364     3C 4E 85 F1 | 	sub	fp, #60
11368     00 14 06 F6 | 	mov	arg02, #0
1136c     01 16 06 F6 | 	mov	arg03, #1
11370     4C A0 B1 FD | 	call	#__system___float_cmp
11374     00 FA 55 F2 | 	cmps	result1, #0 wc
11378     04 01 90 3D |  if_ae	jmp	#LR__1396
1137c     3C 4E 05 F1 | 	add	fp, #60
11380     A7 FA 01 FB | 	rdlong	result1, fp
11384     1F FA 05 F4 | 	bitl	result1, #31
11388     24 4E 85 F1 | 	sub	fp, #36
1138c     A7 FA 61 FC | 	wrlong	result1, fp
11390     28 4E 05 F1 | 	add	fp, #40
11394     A7 FA 01 FB | 	rdlong	result1, fp
11398     1F FA 05 F4 | 	bitl	result1, #31
1139c     24 4E 85 F1 | 	sub	fp, #36
113a0     A7 FA 61 FC | 	wrlong	result1, fp
113a4     20 4E 05 F1 | 	add	fp, #32
113a8     00 C0 9F FF 
113ac     A7 00 68 FC | 	wrlong	##1065353216, fp
113b0     24 4E 85 F1 | 	sub	fp, #36
113b4     A7 26 02 FB | 	rdlong	local01, fp
113b8     28 4E 05 F1 | 	add	fp, #40
113bc     A7 26 62 FC | 	wrlong	local01, fp
113c0     24 4E 85 F1 | 	sub	fp, #36
113c4     A7 26 02 FB | 	rdlong	local01, fp
113c8     28 4E 05 F1 | 	add	fp, #40
113cc     A7 26 62 FC | 	wrlong	local01, fp
113d0                 | '   harm(0)=1
113d0                 | '   harm(1)=even
113d0                 | '   harm(2)=odd
113d0                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
113d0     40 4E 85 F1 | 	sub	fp, #64
113d4     A7 06 68 FC | 	wrlong	#3, fp
113d8                 | LR__1394
113d8     A7 1A 02 FB | 	rdlong	arg05, fp
113dc     0D 29 02 F6 | 	mov	local02, arg05
113e0     02 28 66 F0 | 	shl	local02, #2
113e4     38 4E 05 F1 | 	add	fp, #56
113e8     A7 28 02 F1 | 	add	local02, fp
113ec     02 1A 86 F1 | 	sub	arg05, #2
113f0     02 1A 66 F0 | 	shl	arg05, #2
113f4     A7 1A 02 F1 | 	add	arg05, fp
113f8     0D 13 02 FB | 	rdlong	arg01, arg05
113fc     24 4E 85 F1 | 	sub	fp, #36
11400     A7 14 02 FB | 	rdlong	arg02, fp
11404     18 4E 85 F1 | 	sub	fp, #24
11408     80 9B B1 FD | 	call	#__system___float_mul
1140c     14 FB 61 FC | 	wrlong	result1, local02
11410     04 4E 05 F1 | 	add	fp, #4
11414     A7 2A 02 FB | 	rdlong	local03, fp
11418     02 2A 06 F1 | 	add	local03, #2
1141c     A7 2A 62 FC | 	wrlong	local03, fp
11420     10 2A 56 F2 | 	cmps	local03, #16 wc
11424     B0 FF 9F CD |  if_b	jmp	#LR__1394
11428                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
11428     A7 08 68 FC | 	wrlong	#4, fp
1142c                 | LR__1395
1142c     A7 2A 02 FB | 	rdlong	local03, fp
11430     15 29 02 F6 | 	mov	local02, local03
11434     02 28 66 F0 | 	shl	local02, #2
11438     38 4E 05 F1 | 	add	fp, #56
1143c     A7 28 02 F1 | 	add	local02, fp
11440     02 2A 86 F1 | 	sub	local03, #2
11444     02 2A 66 F0 | 	shl	local03, #2
11448     A7 2A 02 F1 | 	add	local03, fp
1144c     15 13 02 FB | 	rdlong	arg01, local03
11450     20 4E 85 F1 | 	sub	fp, #32
11454     A7 14 02 FB | 	rdlong	arg02, fp
11458     1C 4E 85 F1 | 	sub	fp, #28
1145c     2C 9B B1 FD | 	call	#__system___float_mul
11460     14 FB 61 FC | 	wrlong	result1, local02
11464     04 4E 05 F1 | 	add	fp, #4
11468     A7 2A 02 FB | 	rdlong	local03, fp
1146c     02 2A 06 F1 | 	add	local03, #2
11470     A7 2A 62 FC | 	wrlong	local03, fp
11474     0F 2A 56 F2 | 	cmps	local03, #15 wc
11478     B0 FF 9F CD |  if_b	jmp	#LR__1395
1147c     04 4E 85 F1 | 	sub	fp, #4
11480                 | LR__1396
11480                 | ' if harm(0)>=0 then ' synthesize with harmonics
11480     3C 4E 05 F1 | 	add	fp, #60
11484     A7 12 02 FB | 	rdlong	arg01, fp
11488     3C 4E 85 F1 | 	sub	fp, #60
1148c     00 14 06 F6 | 	mov	arg02, #0
11490     01 16 66 F6 | 	neg	arg03, #1
11494     28 9F B1 FD | 	call	#__system___float_cmp
11498     00 FA 55 F2 | 	cmps	result1, #0 wc
1149c     A4 02 90 CD |  if_b	jmp	#LR__1402
114a0                 | '   for i=0 to 1023
114a0     04 4E 05 F1 | 	add	fp, #4
114a4     A7 00 68 FC | 	wrlong	#0, fp
114a8     04 4E 85 F1 | 	sub	fp, #4
114ac                 | LR__1397
114ac     24 4E 05 F1 | 	add	fp, #36
114b0     A7 00 68 FC | 	wrlong	#0, fp
114b4                 | '     spl=0
114b4                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
114b4     1C 4E 85 F1 | 	sub	fp, #28
114b8     A7 00 68 FC | 	wrlong	#0, fp
114bc                 | LR__1398
114bc     A7 28 02 FB | 	rdlong	local02, fp
114c0     02 28 66 F0 | 	shl	local02, #2
114c4     34 4E 05 F1 | 	add	fp, #52
114c8     A7 28 02 F1 | 	add	local02, fp
114cc     14 2B 02 FB | 	rdlong	local03, local02
114d0     87 E4 1D FF 
114d4     DB 29 06 F6 | 	mov	local02, ##1003032539
114d8     38 4E 85 F1 | 	sub	fp, #56
114dc     A7 12 02 FB | 	rdlong	arg01, fp
114e0     04 4E 85 F1 | 	sub	fp, #4
114e4     09 13 52 F6 | 	abs	arg01, arg01 wc
114e8     1F 2C C6 C9 |  if_b	decod	local04, #31
114ec     00 2C 06 36 |  if_ae	mov	local04, #0
114f0     94 96 B1 FD | 	call	#__system___float_fromuns
114f4     16 FB 61 F5 | 	xor	result1, local04
114f8     FD 14 02 F6 | 	mov	arg02, result1
114fc     14 13 02 F6 | 	mov	arg01, local02
11500     88 9A B1 FD | 	call	#__system___float_mul
11504     FD 28 02 F6 | 	mov	local02, result1
11508     08 4E 05 F1 | 	add	fp, #8
1150c     A7 12 02 FB | 	rdlong	arg01, fp
11510     08 4E 85 F1 | 	sub	fp, #8
11514     01 12 06 F1 | 	add	arg01, #1
11518     09 13 52 F6 | 	abs	arg01, arg01 wc
1151c     1F 2C C6 C9 |  if_b	decod	local04, #31
11520     00 2C 06 36 |  if_ae	mov	local04, #0
11524     60 96 B1 FD | 	call	#__system___float_fromuns
11528     16 FB 61 F5 | 	xor	result1, local04
1152c     FD 14 02 F6 | 	mov	arg02, result1
11530     14 13 02 F6 | 	mov	arg01, local02
11534     54 9A B1 FD | 	call	#__system___float_mul
11538     FD 12 02 F6 | 	mov	arg01, result1
1153c     B0 A3 B1 FD | 	call	#__system____builtin_sinf
11540     FD 14 02 F6 | 	mov	arg02, result1
11544     15 13 02 F6 | 	mov	arg01, local03
11548     40 9A B1 FD | 	call	#__system___float_mul
1154c     FD 14 02 F6 | 	mov	arg02, result1
11550     24 4E 05 F1 | 	add	fp, #36
11554     A7 12 02 FB | 	rdlong	arg01, fp
11558     24 4E 85 F1 | 	sub	fp, #36
1155c     5C 96 B1 FD | 	call	#__system___float_add
11560     24 4E 05 F1 | 	add	fp, #36
11564     A7 FA 61 FC | 	wrlong	result1, fp
11568     1C 4E 85 F1 | 	sub	fp, #28
1156c     A7 16 02 FB | 	rdlong	arg03, fp
11570     01 16 06 F1 | 	add	arg03, #1
11574     A7 16 62 FC | 	wrlong	arg03, fp
11578     10 16 56 F2 | 	cmps	arg03, #16 wc
1157c     3C FF 9F CD |  if_b	jmp	#LR__1398
11580                 | '     if abs(spl)>max then max=abs(spl)  
11580     1C 4E 05 F1 | 	add	fp, #28
11584     A7 12 02 FB | 	rdlong	arg01, fp
11588     1F 12 06 F4 | 	bitl	arg01, #31
1158c     04 4E 85 F1 | 	sub	fp, #4
11590     A7 14 02 FB | 	rdlong	arg02, fp
11594     20 4E 85 F1 | 	sub	fp, #32
11598     01 16 66 F6 | 	neg	arg03, #1
1159c     20 9E B1 FD | 	call	#__system___float_cmp
115a0     01 FA 55 F2 | 	cmps	result1, #1 wc
115a4     18 00 90 CD |  if_b	jmp	#LR__1399
115a8     24 4E 05 F1 | 	add	fp, #36
115ac     A7 FA 01 FB | 	rdlong	result1, fp
115b0     1F FA 05 F4 | 	bitl	result1, #31
115b4     04 4E 85 F1 | 	sub	fp, #4
115b8     A7 FA 61 FC | 	wrlong	result1, fp
115bc     20 4E 85 F1 | 	sub	fp, #32
115c0                 | LR__1399
115c0     04 4E 05 F1 | 	add	fp, #4
115c4     A7 2A 02 FB | 	rdlong	local03, fp
115c8     01 2A 06 F1 | 	add	local03, #1
115cc     A7 2A 62 FC | 	wrlong	local03, fp
115d0     04 4E 85 F1 | 	sub	fp, #4
115d4     02 00 00 FF 
115d8     00 2A 56 F2 | 	cmps	local03, ##1024 wc
115dc     CC FE 9F CD |  if_b	jmp	#LR__1397
115e0                 | '   for i=0 to 1023
115e0     04 4E 05 F1 | 	add	fp, #4
115e4     A7 00 68 FC | 	wrlong	#0, fp
115e8     04 4E 85 F1 | 	sub	fp, #4
115ec                 | LR__1400
115ec     24 4E 05 F1 | 	add	fp, #36
115f0     A7 00 68 FC | 	wrlong	#0, fp
115f4                 | '     spl=0
115f4                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
115f4     1C 4E 85 F1 | 	sub	fp, #28
115f8     A7 00 68 FC | 	wrlong	#0, fp
115fc                 | LR__1401
115fc     A7 2A 02 FB | 	rdlong	local03, fp
11600     02 2A 66 F0 | 	shl	local03, #2
11604     34 4E 05 F1 | 	add	fp, #52
11608     A7 2A 02 F1 | 	add	local03, fp
1160c     15 2B 02 FB | 	rdlong	local03, local03
11610     1C 4E 85 F1 | 	sub	fp, #28
11614     A7 14 02 FB | 	rdlong	arg02, fp
11618     20 4E 85 F1 | 	sub	fp, #32
1161c     58 7F 23 FF 
11620     00 12 06 F6 | 	mov	arg01, ##1191096320
11624     68 9B B1 FD | 	call	#__system___float_div
11628     FD 14 02 F6 | 	mov	arg02, result1
1162c     15 13 02 F6 | 	mov	arg01, local03
11630     58 99 B1 FD | 	call	#__system___float_mul
11634     FD 2A 02 F6 | 	mov	local03, result1
11638     87 E4 1D FF 
1163c     DB 29 06 F6 | 	mov	local02, ##1003032539
11640     04 4E 05 F1 | 	add	fp, #4
11644     A7 12 02 FB | 	rdlong	arg01, fp
11648     04 4E 85 F1 | 	sub	fp, #4
1164c     09 13 52 F6 | 	abs	arg01, arg01 wc
11650     1F 2C C6 C9 |  if_b	decod	local04, #31
11654     00 2C 06 36 |  if_ae	mov	local04, #0
11658     2C 95 B1 FD | 	call	#__system___float_fromuns
1165c     16 FB 61 F5 | 	xor	result1, local04
11660     FD 14 02 F6 | 	mov	arg02, result1
11664     14 13 02 F6 | 	mov	arg01, local02
11668     20 99 B1 FD | 	call	#__system___float_mul
1166c     FD 28 02 F6 | 	mov	local02, result1
11670     08 4E 05 F1 | 	add	fp, #8
11674     A7 12 02 FB | 	rdlong	arg01, fp
11678     08 4E 85 F1 | 	sub	fp, #8
1167c     01 12 06 F1 | 	add	arg01, #1
11680     09 13 52 F6 | 	abs	arg01, arg01 wc
11684     1F 2C C6 C9 |  if_b	decod	local04, #31
11688     00 2C 06 36 |  if_ae	mov	local04, #0
1168c     F8 94 B1 FD | 	call	#__system___float_fromuns
11690     16 FB 61 F5 | 	xor	result1, local04
11694     FD 14 02 F6 | 	mov	arg02, result1
11698     14 13 02 F6 | 	mov	arg01, local02
1169c     EC 98 B1 FD | 	call	#__system___float_mul
116a0     FD 12 02 F6 | 	mov	arg01, result1
116a4     48 A2 B1 FD | 	call	#__system____builtin_sinf
116a8     FD 14 02 F6 | 	mov	arg02, result1
116ac     15 13 02 F6 | 	mov	arg01, local03
116b0     D8 98 B1 FD | 	call	#__system___float_mul
116b4     FD 14 02 F6 | 	mov	arg02, result1
116b8     24 4E 05 F1 | 	add	fp, #36
116bc     A7 12 02 FB | 	rdlong	arg01, fp
116c0     24 4E 85 F1 | 	sub	fp, #36
116c4     F4 94 B1 FD | 	call	#__system___float_add
116c8     24 4E 05 F1 | 	add	fp, #36
116cc     A7 FA 61 FC | 	wrlong	result1, fp
116d0     1C 4E 85 F1 | 	sub	fp, #28
116d4     A7 2A 02 FB | 	rdlong	local03, fp
116d8     01 2A 06 F1 | 	add	local03, #1
116dc     A7 2A 62 FC | 	wrlong	local03, fp
116e0     10 2A 56 F2 | 	cmps	local03, #16 wc
116e4     14 FF 9F CD |  if_b	jmp	#LR__1401
116e8     08 4E 05 F1 | 	add	fp, #8
116ec     A7 2A 02 FB | 	rdlong	local03, fp
116f0     0B 2A 66 F0 | 	shl	local03, #11
116f4     0C 4E 85 F1 | 	sub	fp, #12
116f8     A7 28 02 FB | 	rdlong	local02, fp
116fc     01 28 66 F0 | 	shl	local02, #1
11700     14 2B 02 F1 | 	add	local03, local02
11704     20 4E 05 F1 | 	add	fp, #32
11708     A7 12 02 FB | 	rdlong	arg01, fp
1170c     24 4E 85 F1 | 	sub	fp, #36
11710     01 14 06 F6 | 	mov	arg02, #1
11714     3C 9D B1 FD | 	call	#__system___float_tointeger
11718     FD 14 02 F6 | 	mov	arg02, result1
1171c     15 13 02 F6 | 	mov	arg01, local03
11720     80 31 B1 FD | 	call	#_psdpoke
11724     04 4E 05 F1 | 	add	fp, #4
11728     A7 2A 02 FB | 	rdlong	local03, fp
1172c     01 2A 06 F1 | 	add	local03, #1
11730     A7 2A 62 FC | 	wrlong	local03, fp
11734     04 4E 85 F1 | 	sub	fp, #4
11738     02 00 00 FF 
1173c     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11740     A8 FE 9F CD |  if_b	jmp	#LR__1400
11744                 | LR__1402
11744                 | LR__1403
11744     A7 F0 03 F6 | 	mov	ptra, fp
11748     B2 00 A0 FD | 	call	#popregs_
1174c                 | _do_defsnd_ret
1174c     2D 00 64 FD | 	ret
11750                 | 
11750                 | ' 
11750                 | ' '-------------------- defsprite
11750                 | ' 
11750                 | ' sub do_defsprite
11750                 | _do_defsprite
11750     07 4A 05 F6 | 	mov	COUNT_, #7
11754     A8 00 A0 FD | 	call	#pushregs_
11758     60 F0 07 F1 | 	add	ptra, #96
1175c     C0 C0 BF FD | 	call	#_pop
11760     FD 16 02 F6 | 	mov	arg03, result1
11764     FE 14 02 F6 | 	mov	arg02, result2
11768     FF 12 02 F6 | 	mov	arg01, result3
1176c     30 4E 05 F1 | 	add	fp, #48
11770     A7 16 62 FC | 	wrlong	arg03, fp
11774     04 4E 05 F1 | 	add	fp, #4
11778     A7 14 62 FC | 	wrlong	arg02, fp
1177c     04 4E 05 F1 | 	add	fp, #4
11780     A7 12 62 FC | 	wrlong	arg01, fp
11784     38 4E 85 F1 | 	sub	fp, #56
11788     94 C0 BF FD | 	call	#_pop
1178c     FD 16 02 F6 | 	mov	arg03, result1
11790     FE 14 02 F6 | 	mov	arg02, result2
11794     FF 12 02 F6 | 	mov	arg01, result3
11798     24 4E 05 F1 | 	add	fp, #36
1179c     A7 16 62 FC | 	wrlong	arg03, fp
117a0     04 4E 05 F1 | 	add	fp, #4
117a4     A7 14 62 FC | 	wrlong	arg02, fp
117a8     04 4E 05 F1 | 	add	fp, #4
117ac     A7 12 62 FC | 	wrlong	arg01, fp
117b0     2C 4E 85 F1 | 	sub	fp, #44
117b4     68 C0 BF FD | 	call	#_pop
117b8     FD 16 02 F6 | 	mov	arg03, result1
117bc     FE 14 02 F6 | 	mov	arg02, result2
117c0     FF 12 02 F6 | 	mov	arg01, result3
117c4     18 4E 05 F1 | 	add	fp, #24
117c8     A7 16 62 FC | 	wrlong	arg03, fp
117cc     04 4E 05 F1 | 	add	fp, #4
117d0     A7 14 62 FC | 	wrlong	arg02, fp
117d4     04 4E 05 F1 | 	add	fp, #4
117d8     A7 12 62 FC | 	wrlong	arg01, fp
117dc     20 4E 85 F1 | 	sub	fp, #32
117e0     3C C0 BF FD | 	call	#_pop
117e4     FD 16 02 F6 | 	mov	arg03, result1
117e8     FE 14 02 F6 | 	mov	arg02, result2
117ec     FF 12 02 F6 | 	mov	arg01, result3
117f0     0C 4E 05 F1 | 	add	fp, #12
117f4     A7 16 62 FC | 	wrlong	arg03, fp
117f8     04 4E 05 F1 | 	add	fp, #4
117fc     A7 14 62 FC | 	wrlong	arg02, fp
11800     04 4E 05 F1 | 	add	fp, #4
11804     A7 12 62 FC | 	wrlong	arg01, fp
11808     14 4E 85 F1 | 	sub	fp, #20
1180c     10 C0 BF FD | 	call	#_pop
11810     FF 16 02 F6 | 	mov	arg03, result3
11814     A7 FA 61 FC | 	wrlong	result1, fp
11818     04 4E 05 F1 | 	add	fp, #4
1181c     A7 FC 61 FC | 	wrlong	result2, fp
11820     04 4E 05 F1 | 	add	fp, #4
11824     A7 16 62 FC | 	wrlong	arg03, fp
11828     08 4E 85 F1 | 	sub	fp, #8
1182c     A7 12 02 F6 | 	mov	arg01, fp
11830     D0 C1 BF FD | 	call	#_converttoint
11834     3C 4E 05 F1 | 	add	fp, #60
11838     A7 FA 61 FC | 	wrlong	result1, fp
1183c     30 4E 85 F1 | 	sub	fp, #48
11840     A7 12 02 F6 | 	mov	arg01, fp
11844     0C 4E 85 F1 | 	sub	fp, #12
11848     B8 C1 BF FD | 	call	#_converttoint
1184c     40 4E 05 F1 | 	add	fp, #64
11850     A7 FA 61 FC | 	wrlong	result1, fp
11854     28 4E 85 F1 | 	sub	fp, #40
11858     A7 12 02 F6 | 	mov	arg01, fp
1185c     18 4E 85 F1 | 	sub	fp, #24
11860     A0 C1 BF FD | 	call	#_converttoint
11864     44 4E 05 F1 | 	add	fp, #68
11868     A7 FA 61 FC | 	wrlong	result1, fp
1186c     20 4E 85 F1 | 	sub	fp, #32
11870     A7 12 02 F6 | 	mov	arg01, fp
11874     24 4E 85 F1 | 	sub	fp, #36
11878     88 C1 BF FD | 	call	#_converttoint
1187c     48 4E 05 F1 | 	add	fp, #72
11880     A7 FA 61 FC | 	wrlong	result1, fp
11884     18 4E 85 F1 | 	sub	fp, #24
11888     A7 12 02 F6 | 	mov	arg01, fp
1188c     30 4E 85 F1 | 	sub	fp, #48
11890     70 C1 BF FD | 	call	#_converttoint
11894     4C 4E 05 F1 | 	add	fp, #76
11898     A7 FA 61 FC | 	wrlong	result1, fp
1189c                 | ' 
1189c                 | ' t5=pop()
1189c                 | ' t4=pop()
1189c                 | ' t3=pop()
1189c                 | ' t2=pop()
1189c                 | ' t1=pop()
1189c                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
1189c                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
1189c     10 4E 85 F1 | 	sub	fp, #16
118a0     A7 16 02 FB | 	rdlong	arg03, fp
118a4     3C 4E 85 F1 | 	sub	fp, #60
118a8     02 16 66 F0 | 	shl	arg03, #2
118ac     52 00 00 FF 
118b0     AC E4 05 F1 | 	add	objptr, ##42156
118b4     F2 16 02 F1 | 	add	arg03, objptr
118b8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
118bc     52 00 00 FF 
118c0     AC E4 85 F1 | 	sub	objptr, ##42156
118c4     2C 00 90 AD |  if_e	jmp	#LR__1410
118c8     3C 4E 05 F1 | 	add	fp, #60
118cc     A7 16 02 FB | 	rdlong	arg03, fp
118d0     3C 4E 85 F1 | 	sub	fp, #60
118d4     02 16 66 F0 | 	shl	arg03, #2
118d8     52 00 00 FF 
118dc     AC E4 05 F1 | 	add	objptr, ##42156
118e0     F2 16 02 F1 | 	add	arg03, objptr
118e4     0B 13 02 FB | 	rdlong	arg01, arg03
118e8     52 00 00 FF 
118ec     AC E4 85 F1 | 	sub	objptr, ##42156
118f0     00 AB B1 FD | 	call	#__system___gc_free
118f4                 | LR__1410
118f4     3C 4E 05 F1 | 	add	fp, #60
118f8     A7 26 02 FB | 	rdlong	local01, fp
118fc     0C 4E 05 F1 | 	add	fp, #12
11900     A7 16 02 FB | 	rdlong	arg03, fp
11904     04 4E 05 F1 | 	add	fp, #4
11908     A7 14 02 FB | 	rdlong	arg02, fp
1190c     0A 17 02 FD | 	qmul	arg03, arg02
11910     02 26 66 F0 | 	shl	local01, #2
11914     52 00 00 FF 
11918     AC E4 05 F1 | 	add	objptr, ##42156
1191c     F2 26 02 F1 | 	add	local01, objptr
11920     4C 4E 85 F1 | 	sub	fp, #76
11924     52 00 00 FF 
11928     AC E4 85 F1 | 	sub	objptr, ##42156
1192c     18 12 62 FD | 	getqx	arg01
11930     84 A9 B1 FD | 	call	#__system___gc_alloc_managed
11934     13 FB 61 FC | 	wrlong	result1, local01
11938                 | ' for y=a3 to a3+a5-1
11938     44 4E 05 F1 | 	add	fp, #68
1193c     A7 28 02 FB | 	rdlong	local02, fp
11940     0C 4E 05 F1 | 	add	fp, #12
11944     A7 28 62 FC | 	wrlong	local02, fp
11948     0C 4E 85 F1 | 	sub	fp, #12
1194c     A7 2A 02 FB | 	rdlong	local03, fp
11950     08 4E 05 F1 | 	add	fp, #8
11954     A7 2C 02 FB | 	rdlong	local04, fp
11958     4C 4E 85 F1 | 	sub	fp, #76
1195c     16 2B 02 F1 | 	add	local03, local04
11960                 | LR__1411
11960     50 4E 05 F1 | 	add	fp, #80
11964     A7 28 02 FB | 	rdlong	local02, fp
11968     50 4E 85 F1 | 	sub	fp, #80
1196c     15 29 52 F2 | 	cmps	local02, local03 wc
11970     F4 00 90 3D |  if_ae	jmp	#LR__1414
11974                 | '   for x=a2 to a4+a2-1
11974     40 4E 05 F1 | 	add	fp, #64
11978     A7 26 02 FB | 	rdlong	local01, fp
1197c     14 4E 05 F1 | 	add	fp, #20
11980     A7 26 62 FC | 	wrlong	local01, fp
11984     0C 4E 85 F1 | 	sub	fp, #12
11988     A7 2E 02 FB | 	rdlong	local05, fp
1198c     08 4E 85 F1 | 	sub	fp, #8
11990     A7 30 02 FB | 	rdlong	local06, fp
11994     40 4E 85 F1 | 	sub	fp, #64
11998     18 2F 02 F1 | 	add	local05, local06
1199c                 | LR__1412
1199c     54 4E 05 F1 | 	add	fp, #84
119a0     A7 26 02 FB | 	rdlong	local01, fp
119a4     54 4E 85 F1 | 	sub	fp, #84
119a8     17 27 52 F2 | 	cmps	local01, local05 wc
119ac     A0 00 90 3D |  if_ae	jmp	#LR__1413
119b0     3C 4E 05 F1 | 	add	fp, #60
119b4     A7 30 02 FB | 	rdlong	local06, fp
119b8     18 4E 05 F1 | 	add	fp, #24
119bc     A7 2C 02 FB | 	rdlong	local04, fp
119c0     14 4E 85 F1 | 	sub	fp, #20
119c4     A7 28 02 FB | 	rdlong	local02, fp
119c8     10 4E 05 F1 | 	add	fp, #16
119cc     A7 26 02 FB | 	rdlong	local01, fp
119d0     13 17 02 F6 | 	mov	arg03, local01
119d4     0C 4E 85 F1 | 	sub	fp, #12
119d8     A7 14 02 FB | 	rdlong	arg02, fp
119dc     0A 17 82 F1 | 	sub	arg03, arg02
119e0     04 4E 05 F1 | 	add	fp, #4
119e4     A7 14 02 FB | 	rdlong	arg02, fp
119e8     0A 17 02 FD | 	qmul	arg03, arg02
119ec     02 30 66 F0 | 	shl	local06, #2
119f0     52 00 00 FF 
119f4     AC E4 05 F1 | 	add	objptr, ##42156
119f8     F2 30 02 F1 | 	add	local06, objptr
119fc     18 31 02 FB | 	rdlong	local06, local06
11a00     16 33 02 F6 | 	mov	local07, local04
11a04     14 33 82 F1 | 	sub	local07, local02
11a08     52 00 00 FF 
11a0c     AC E4 85 F1 | 	sub	objptr, ##42156
11a10     F2 12 02 FB | 	rdlong	arg01, objptr
11a14     16 13 02 F1 | 	add	arg01, local04
11a18     48 4E 85 F1 | 	sub	fp, #72
11a1c     0A 26 66 F0 | 	shl	local01, #10
11a20     13 13 02 F1 | 	add	arg01, local01
11a24     18 2C 62 FD | 	getqx	local04
11a28     16 33 02 F1 | 	add	local07, local04
11a2c     18 33 02 F1 | 	add	local07, local06
11a30     00 2F B1 FD | 	call	#_pspeek
11a34     19 FB 41 FC | 	wrbyte	result1, local07
11a38     54 4E 05 F1 | 	add	fp, #84
11a3c     A7 32 02 FB | 	rdlong	local07, fp
11a40     01 32 06 F1 | 	add	local07, #1
11a44     A7 32 62 FC | 	wrlong	local07, fp
11a48     54 4E 85 F1 | 	sub	fp, #84
11a4c     4C FF 9F FD | 	jmp	#LR__1412
11a50                 | LR__1413
11a50     50 4E 05 F1 | 	add	fp, #80
11a54     A7 32 02 FB | 	rdlong	local07, fp
11a58     01 32 06 F1 | 	add	local07, #1
11a5c     A7 32 62 FC | 	wrlong	local07, fp
11a60     50 4E 85 F1 | 	sub	fp, #80
11a64     F8 FE 9F FD | 	jmp	#LR__1411
11a68                 | LR__1414
11a68     3C 4E 05 F1 | 	add	fp, #60
11a6c     A7 32 02 FB | 	rdlong	local07, fp
11a70     19 13 02 F6 | 	mov	arg01, local07
11a74     3C 4E 85 F1 | 	sub	fp, #60
11a78     02 32 66 F0 | 	shl	local07, #2
11a7c     52 00 00 FF 
11a80     AC E4 05 F1 | 	add	objptr, ##42156
11a84     F2 32 02 F1 | 	add	local07, objptr
11a88     19 15 02 FB | 	rdlong	arg02, local07
11a8c     52 00 00 FF 
11a90     AC E4 85 F1 | 	sub	objptr, ##42156
11a94     F8 3B B1 FD | 	call	#_hg010b_spin2_setspriteptr
11a98     3C 4E 05 F1 | 	add	fp, #60
11a9c     A7 12 02 FB | 	rdlong	arg01, fp
11aa0     0C 4E 05 F1 | 	add	fp, #12
11aa4     A7 14 02 FB | 	rdlong	arg02, fp
11aa8     04 4E 05 F1 | 	add	fp, #4
11aac     A7 16 02 FB | 	rdlong	arg03, fp
11ab0     4C 4E 85 F1 | 	sub	fp, #76
11ab4     68 3C B1 FD | 	call	#_hg010b_spin2_setspritesize
11ab8     A7 F0 03 F6 | 	mov	ptra, fp
11abc     B2 00 A0 FD | 	call	#popregs_
11ac0                 | _do_defsprite_ret
11ac0     2D 00 64 FD | 	ret
11ac4                 | 
11ac4                 | ' 
11ac4                 | ' '-------------------- deg
11ac4                 | ' 
11ac4                 | ' sub do_deg
11ac4                 | _do_deg
11ac4     52 00 00 FF 
11ac8     00 E5 05 F1 | 	add	objptr, ##42240
11acc     7D 47 9E FF 
11ad0     F2 6A 68 FC | 	wrlong	##1016003125, objptr
11ad4     04 E4 05 F1 | 	add	objptr, #4
11ad8     97 32 A1 FF 
11adc     F2 C2 69 FC | 	wrlong	##1113927393, objptr
11ae0     52 00 00 FF 
11ae4     04 E5 85 F1 | 	sub	objptr, ##42244
11ae8                 | _do_deg_ret
11ae8     2D 00 64 FD | 	ret
11aec                 | 
11aec                 | ' 
11aec                 | ' '-------------------- delete
11aec                 | ' 
11aec                 | ' sub do_delete
11aec                 | _do_delete
11aec     05 4A 05 F6 | 	mov	COUNT_, #5
11af0     A8 00 A0 FD | 	call	#pushregs_
11af4     28 BD BF FD | 	call	#_pop
11af8     FE 18 02 F6 | 	mov	arg04, result2
11afc     FF 16 02 F6 | 	mov	arg03, result3
11b00     FD 26 02 F6 | 	mov	local01, result1
11b04     0C 29 02 F6 | 	mov	local02, arg04
11b08     0B 2B 02 F6 | 	mov	local03, arg03
11b0c                 | ' 
11b0c                 | ' t1=pop()
11b0c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11b0c     2B 2A 0E F2 | 	cmp	local03, #43 wz
11b10     10 00 90 5D |  if_ne	jmp	#LR__1420
11b14     13 13 02 F6 | 	mov	arg01, local01
11b18     7C BE BF FD | 	call	#_convertstring
11b1c     FD 26 02 F6 | 	mov	local01, result1
11b20     1F 2A 06 F6 | 	mov	local03, #31
11b24                 | LR__1420
11b24                 | ' if t1.result_type<>result_string then printerror(15): return
11b24     1F 2A 0E F2 | 	cmp	local03, #31 wz
11b28     10 00 90 AD |  if_e	jmp	#LR__1421
11b2c     0F 12 06 F6 | 	mov	arg01, #15
11b30     00 14 06 F6 | 	mov	arg02, #0
11b34     84 2B B1 FD | 	call	#_printerror
11b38     E4 00 90 FD | 	jmp	#LR__1425
11b3c                 | LR__1421
11b3c                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
11b3c     4A 00 00 FF 
11b40     B4 E4 05 F1 | 	add	objptr, ##38068
11b44     F2 12 02 FB | 	rdlong	arg01, objptr
11b48     4A 00 00 FF 
11b4c     B4 E4 85 F1 | 	sub	objptr, ##38068
11b50     B4 01 00 FF 
11b54     FC 15 06 F6 | 	mov	arg02, ##@LR__5818
11b58     DC 65 B1 FD | 	call	#__system___string_cmp
11b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
11b60     34 00 90 AD |  if_e	jmp	#LR__1422
11b64     4A 00 00 FF 
11b68     B4 E4 05 F1 | 	add	objptr, ##38068
11b6c     F2 12 02 FB | 	rdlong	arg01, objptr
11b70     4A 00 00 FF 
11b74     B4 E4 85 F1 | 	sub	objptr, ##38068
11b78     B4 01 00 FF 
11b7c     FE 15 06 F6 | 	mov	arg02, ##@LR__5819
11b80     E8 65 B1 FD | 	call	#__system___string_concat
11b84     FD 12 02 F6 | 	mov	arg01, result1
11b88     13 15 02 F6 | 	mov	arg02, local01
11b8c     DC 65 B1 FD | 	call	#__system___string_concat
11b90     FD 2C 02 F6 | 	mov	local04, result1
11b94     14 00 90 FD | 	jmp	#LR__1423
11b98                 | LR__1422
11b98     B5 01 00 FF 
11b9c     00 12 06 F6 | 	mov	arg01, ##@LR__5820
11ba0     13 15 02 F6 | 	mov	arg02, local01
11ba4     C4 65 B1 FD | 	call	#__system___string_concat
11ba8     FD 2C 02 F6 | 	mov	local04, result1
11bac                 | LR__1423
11bac     16 13 02 F6 | 	mov	arg01, local04
11bb0     2C 8D B1 FD | 	call	#__system___remove
11bb4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11bb8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
11bbc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
11bc0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11bc4     FD 2E 0A F6 | 	mov	local05, result1 wz
11bc8                 | ' kill filename$
11bc8                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
11bc8     54 00 90 AD |  if_e	jmp	#LR__1424
11bcc     00 12 06 F6 | 	mov	arg01, #0
11bd0     E0 C1 B1 FD | 	call	#__system___getiolock_0620
11bd4     FD 12 02 F6 | 	mov	arg01, result1
11bd8     34 65 B1 FD | 	call	#__system___lockmem
11bdc     B5 01 00 FF 
11be0     02 14 06 F6 | 	mov	arg02, ##@LR__5821
11be4     00 12 06 F6 | 	mov	arg01, #0
11be8     00 16 06 F6 | 	mov	arg03, #0
11bec     18 72 B1 FD | 	call	#__system___basic_print_string
11bf0     00 12 06 F6 | 	mov	arg01, #0
11bf4     17 15 02 F6 | 	mov	arg02, local05
11bf8     00 16 06 F6 | 	mov	arg03, #0
11bfc     0A 18 06 F6 | 	mov	arg04, #10
11c00     48 72 B1 FD | 	call	#__system___basic_print_integer
11c04     00 12 06 F6 | 	mov	arg01, #0
11c08     0A 14 06 F6 | 	mov	arg02, #10
11c0c     00 16 06 F6 | 	mov	arg03, #0
11c10     9C 71 B1 FD | 	call	#__system___basic_print_char
11c14     00 12 06 F6 | 	mov	arg01, #0
11c18     98 C1 B1 FD | 	call	#__system___getiolock_0620
11c1c     FD 00 68 FC | 	wrlong	#0, result1
11c20                 | LR__1424
11c20                 | LR__1425
11c20     A7 F0 03 F6 | 	mov	ptra, fp
11c24     B2 00 A0 FD | 	call	#popregs_
11c28                 | _do_delete_ret
11c28     2D 00 64 FD | 	ret
11c2c                 | 
11c2c                 | ' 
11c2c                 | ' '-------------------- dir
11c2c                 | ' 
11c2c                 | ' sub do_dir
11c2c                 | _do_dir
11c2c     13 4A 05 F6 | 	mov	COUNT_, #19
11c30     A8 00 A0 FD | 	call	#pushregs_
11c34     01 00 00 FF 
11c38     38 F0 07 F1 | 	add	ptra, ##568
11c3c                 | ' 
11c3c                 | ' print "Current directory: "; currentdir$ 
11c3c     00 12 06 F6 | 	mov	arg01, #0
11c40     70 C1 B1 FD | 	call	#__system___getiolock_0620
11c44     FD 12 02 F6 | 	mov	arg01, result1
11c48     C4 64 B1 FD | 	call	#__system___lockmem
11c4c     B5 01 00 FF 
11c50     3A 14 06 F6 | 	mov	arg02, ##@LR__5822
11c54     00 12 06 F6 | 	mov	arg01, #0
11c58     00 16 06 F6 | 	mov	arg03, #0
11c5c     A8 71 B1 FD | 	call	#__system___basic_print_string
11c60     4A 00 00 FF 
11c64     B4 E4 05 F1 | 	add	objptr, ##38068
11c68     F2 14 02 FB | 	rdlong	arg02, objptr
11c6c     4A 00 00 FF 
11c70     B4 E4 85 F1 | 	sub	objptr, ##38068
11c74     00 12 06 F6 | 	mov	arg01, #0
11c78     00 16 06 F6 | 	mov	arg03, #0
11c7c     88 71 B1 FD | 	call	#__system___basic_print_string
11c80     00 12 06 F6 | 	mov	arg01, #0
11c84     0A 14 06 F6 | 	mov	arg02, #10
11c88     00 16 06 F6 | 	mov	arg03, #0
11c8c     20 71 B1 FD | 	call	#__system___basic_print_char
11c90     01 26 06 F6 | 	mov	local01, #1
11c94     00 12 06 F6 | 	mov	arg01, #0
11c98     18 C1 B1 FD | 	call	#__system___getiolock_0620
11c9c     FD 00 68 FC | 	wrlong	#0, result1
11ca0     00 28 06 F6 | 	mov	local02, #0
11ca4     00 2A 06 F6 | 	mov	local03, #0
11ca8                 | ' px=0
11ca8                 | ' for i=0 to 127: filelist(i)="" : next i
11ca8     00 2C 06 F6 | 	mov	local04, #0
11cac     1C 4E 05 F1 | 	add	fp, #28
11cb0     97 12 48 FB | 	callpa	#(@LR__1431-@LR__1430)>>2,fcache_load_ptr_
11cb4                 | LR__1430
11cb4     16 2F 02 F6 | 	mov	local05, local04
11cb8     02 2E 66 F0 | 	shl	local05, #2
11cbc     A7 2E 02 F1 | 	add	local05, fp
11cc0     B5 01 00 FF 
11cc4     4E 30 06 F6 | 	mov	local06, ##@LR__5823
11cc8     17 31 62 FC | 	wrlong	local06, local05
11ccc     01 2C 06 F1 | 	add	local04, #1
11cd0     80 2C 56 F2 | 	cmps	local04, #128 wc
11cd4     DC FF 9F CD |  if_b	jmp	#LR__1430
11cd8                 | LR__1431
11cd8     1C 4E 85 F1 | 	sub	fp, #28
11cdc     B5 01 00 FF 
11ce0     4F 12 06 F6 | 	mov	arg01, ##@LR__5824
11ce4     10 14 06 F6 | 	mov	arg02, #16
11ce8     88 C2 B1 FD | 	call	#__system___basic_dir
11cec     FD 32 02 F6 | 	mov	local07, result1
11cf0     00 34 06 F6 | 	mov	local08, #0
11cf4                 | ' filename=dir$("*", fbDirectory)
11cf4                 | ' n=0
11cf4                 | ' while filename <> "" andalso filename <> nil andalso n<128
11cf4                 | LR__1432
11cf4     B5 01 00 FF 
11cf8     51 36 06 F6 | 	mov	local09, ##@LR__5825
11cfc     19 13 02 F6 | 	mov	arg01, local07
11d00     1B 15 02 F6 | 	mov	arg02, local09
11d04     30 64 B1 FD | 	call	#__system___string_cmp
11d08     00 FA 0D F2 | 	cmp	result1, #0 wz
11d0c     68 00 90 AD |  if_e	jmp	#LR__1433
11d10     00 36 06 F6 | 	mov	local09, #0
11d14     19 13 02 F6 | 	mov	arg01, local07
11d18     00 14 06 F6 | 	mov	arg02, #0
11d1c     18 64 B1 FD | 	call	#__system___string_cmp
11d20     00 FA 0D F2 | 	cmp	result1, #0 wz
11d24     50 00 90 AD |  if_e	jmp	#LR__1433
11d28     80 34 56 F2 | 	cmps	local08, #128 wc
11d2c     48 00 90 3D |  if_ae	jmp	#LR__1433
11d30     B5 01 00 FF 
11d34     52 12 06 F6 | 	mov	arg01, ##@LR__5826
11d38     19 15 02 F6 | 	mov	arg02, local07
11d3c     2C 64 B1 FD | 	call	#__system___string_concat
11d40     FD 32 02 F6 | 	mov	local07, result1
11d44     1A 2F 02 F6 | 	mov	local05, local08
11d48     02 2E 66 F0 | 	shl	local05, #2
11d4c     1C 4E 05 F1 | 	add	fp, #28
11d50     A7 2E 02 F1 | 	add	local05, fp
11d54     17 33 62 FC | 	wrlong	local07, local05
11d58     01 34 06 F1 | 	add	local08, #1
11d5c     00 2E 06 F6 | 	mov	local05, #0
11d60     00 12 06 F6 | 	mov	arg01, #0
11d64     00 14 06 F6 | 	mov	arg02, #0
11d68     1C 4E 85 F1 | 	sub	fp, #28
11d6c     04 C2 B1 FD | 	call	#__system___basic_dir
11d70     FD 32 02 F6 | 	mov	local07, result1
11d74     7C FF 9F FD | 	jmp	#LR__1432
11d78                 | LR__1433
11d78                 | ' for i=0 to n-1			' now sort this
11d78     00 2C 06 F6 | 	mov	local04, #0
11d7c     1A 39 02 F6 | 	mov	local10, local08
11d80                 | LR__1434
11d80     1C 2D 52 F2 | 	cmps	local04, local10 wc
11d84     DC 00 90 3D |  if_ae	jmp	#LR__1438
11d88     00 3A 06 F6 | 	mov	local11, #0
11d8c                 | '   swapped=false
11d8c                 | '   for j=0 to n-i-2
11d8c     00 3C 06 F6 | 	mov	local12, #0
11d90     1A 3F 02 F6 | 	mov	local13, local08
11d94     16 3F 82 F1 | 	sub	local13, local04
11d98     01 3E 86 F1 | 	sub	local13, #1
11d9c                 | LR__1435
11d9c     1F 3D 52 F2 | 	cmps	local12, local13 wc
11da0     B0 00 90 3D |  if_ae	jmp	#LR__1437
11da4                 | '     if filelist(j) > filelist(j+1) then
11da4     1E 37 02 F6 | 	mov	local09, local12
11da8     02 36 66 F0 | 	shl	local09, #2
11dac     1C 4E 05 F1 | 	add	fp, #28
11db0     A7 36 02 F1 | 	add	local09, fp
11db4     1B 13 02 FB | 	rdlong	arg01, local09
11db8     1E 37 02 F6 | 	mov	local09, local12
11dbc     01 36 06 F1 | 	add	local09, #1
11dc0     1B 31 02 F6 | 	mov	local06, local09
11dc4     02 30 66 F0 | 	shl	local06, #2
11dc8     A7 26 02 F6 | 	mov	local01, fp
11dcc     A7 30 02 F1 | 	add	local06, fp
11dd0     18 2F 02 FB | 	rdlong	local05, local06
11dd4     17 15 02 F6 | 	mov	arg02, local05
11dd8     1C 4E 85 F1 | 	sub	fp, #28
11ddc     58 63 B1 FD | 	call	#__system___string_cmp
11de0     01 FA 55 F2 | 	cmps	result1, #1 wc
11de4     64 00 90 CD |  if_b	jmp	#LR__1436
11de8     1E 37 02 F6 | 	mov	local09, local12
11dec     01 36 06 F1 | 	add	local09, #1
11df0     02 36 66 F0 | 	shl	local09, #2
11df4     1C 4E 05 F1 | 	add	fp, #28
11df8     A7 36 02 F1 | 	add	local09, fp
11dfc     1B 3B 02 FB | 	rdlong	local11, local09
11e00     1E 31 02 F6 | 	mov	local06, local12
11e04     02 30 66 F0 | 	shl	local06, #2
11e08     A7 30 02 F1 | 	add	local06, fp
11e0c     18 2F 02 FB | 	rdlong	local05, local06
11e10     1E 37 02 F6 | 	mov	local09, local12
11e14     1B 31 02 F6 | 	mov	local06, local09
11e18     02 30 66 F0 | 	shl	local06, #2
11e1c     A7 26 02 F6 | 	mov	local01, fp
11e20     A7 30 02 F1 | 	add	local06, fp
11e24     18 3B 62 FC | 	wrlong	local11, local06
11e28     1E 29 02 F6 | 	mov	local02, local12
11e2c     01 28 06 F1 | 	add	local02, #1
11e30     14 41 02 F6 | 	mov	local14, local02
11e34     02 40 66 F0 | 	shl	local14, #2
11e38     A7 42 02 F6 | 	mov	local15, fp
11e3c     A7 40 02 F1 | 	add	local14, fp
11e40     20 2F 62 FC | 	wrlong	local05, local14
11e44     01 3A 66 F6 | 	neg	local11, #1
11e48     1C 4E 85 F1 | 	sub	fp, #28
11e4c                 | LR__1436
11e4c     01 3C 06 F1 | 	add	local12, #1
11e50     48 FF 9F FD | 	jmp	#LR__1435
11e54                 | LR__1437
11e54                 | ' if not swapped then exit for
11e54     1D 45 22 F6 | 	not	local16, local11
11e58     00 44 0E F2 | 	cmp	local16, #0 wz
11e5c     01 2C 06 A1 |  if_e	add	local04, #1
11e60     1C FF 9F AD |  if_e	jmp	#LR__1434
11e64                 | LR__1438
11e64                 | ' for i=0 to n-1
11e64     00 2C 06 F6 | 	mov	local04, #0
11e68     1A 47 02 F6 | 	mov	local17, local08
11e6c                 | LR__1439
11e6c     23 2D 52 F2 | 	cmps	local04, local17 wc
11e70     94 00 90 3D |  if_ae	jmp	#LR__1441
11e74                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11e74     00 12 06 F6 | 	mov	arg01, #0
11e78     38 BF B1 FD | 	call	#__system___getiolock_0620
11e7c     FD 12 02 F6 | 	mov	arg01, result1
11e80     8C 62 B1 FD | 	call	#__system___lockmem
11e84     16 29 02 F6 | 	mov	local02, local04
11e88     02 28 66 F0 | 	shl	local02, #2
11e8c     1C 4E 05 F1 | 	add	fp, #28
11e90     A7 40 02 F6 | 	mov	local14, fp
11e94     A7 28 02 F1 | 	add	local02, fp
11e98     14 15 02 FB | 	rdlong	arg02, local02
11e9c     00 26 06 F6 | 	mov	local01, #0
11ea0     00 12 06 F6 | 	mov	arg01, #0
11ea4     00 16 06 F6 | 	mov	arg03, #0
11ea8     1C 4E 85 F1 | 	sub	fp, #28
11eac     58 6F B1 FD | 	call	#__system___basic_print_string
11eb0     00 12 06 F6 | 	mov	arg01, #0
11eb4     FC BE B1 FD | 	call	#__system___getiolock_0620
11eb8     FD 00 68 FC | 	wrlong	#0, result1
11ebc     40 2A 06 F1 | 	add	local03, #64
11ec0     15 13 02 F6 | 	mov	arg01, local03
11ec4     E8 44 B1 FD | 	call	#_hg010b_spin2_setcursorx
11ec8     00 2B 56 F2 | 	cmps	local03, #256 wc
11ecc     30 00 90 CD |  if_b	jmp	#LR__1440
11ed0     00 2A 06 F6 | 	mov	local03, #0
11ed4     00 12 06 F6 | 	mov	arg01, #0
11ed8     D8 BE B1 FD | 	call	#__system___getiolock_0620
11edc     FD 12 02 F6 | 	mov	arg01, result1
11ee0     2C 62 B1 FD | 	call	#__system___lockmem
11ee4     00 12 06 F6 | 	mov	arg01, #0
11ee8     0A 14 06 F6 | 	mov	arg02, #10
11eec     00 16 06 F6 | 	mov	arg03, #0
11ef0     BC 6E B1 FD | 	call	#__system___basic_print_char
11ef4     00 12 06 F6 | 	mov	arg01, #0
11ef8     B8 BE B1 FD | 	call	#__system___getiolock_0620
11efc     FD 00 68 FC | 	wrlong	#0, result1
11f00                 | LR__1440
11f00     01 2C 06 F1 | 	add	local04, #1
11f04     64 FF 9F FD | 	jmp	#LR__1439
11f08                 | LR__1441
11f08                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11f08     80 34 56 F2 | 	cmps	local08, #128 wc
11f0c     44 00 90 CD |  if_b	jmp	#LR__1442
11f10     00 12 06 F6 | 	mov	arg01, #0
11f14     9C BE B1 FD | 	call	#__system___getiolock_0620
11f18     FD 12 02 F6 | 	mov	arg01, result1
11f1c     F0 61 B1 FD | 	call	#__system___lockmem
11f20     B5 01 00 FF 
11f24     59 14 06 F6 | 	mov	arg02, ##@LR__5827
11f28     00 12 06 F6 | 	mov	arg01, #0
11f2c     00 16 06 F6 | 	mov	arg03, #0
11f30     D4 6E B1 FD | 	call	#__system___basic_print_string
11f34     00 12 06 F6 | 	mov	arg01, #0
11f38     0A 14 06 F6 | 	mov	arg02, #10
11f3c     00 16 06 F6 | 	mov	arg03, #0
11f40     6C 6E B1 FD | 	call	#__system___basic_print_char
11f44     00 12 06 F6 | 	mov	arg01, #0
11f48     68 BE B1 FD | 	call	#__system___getiolock_0620
11f4c     FD 00 68 FC | 	wrlong	#0, result1
11f50     00 26 06 F6 | 	mov	local01, #0
11f54                 | LR__1442
11f54                 | ' print
11f54     00 12 06 F6 | 	mov	arg01, #0
11f58     58 BE B1 FD | 	call	#__system___getiolock_0620
11f5c     FD 12 02 F6 | 	mov	arg01, result1
11f60     AC 61 B1 FD | 	call	#__system___lockmem
11f64     00 12 06 F6 | 	mov	arg01, #0
11f68     0A 14 06 F6 | 	mov	arg02, #10
11f6c     00 16 06 F6 | 	mov	arg03, #0
11f70     3C 6E B1 FD | 	call	#__system___basic_print_char
11f74     00 12 06 F6 | 	mov	arg01, #0
11f78     38 BE B1 FD | 	call	#__system___getiolock_0620
11f7c     FD 00 68 FC | 	wrlong	#0, result1
11f80     00 30 06 F6 | 	mov	local06, #0
11f84     00 34 06 F6 | 	mov	local08, #0
11f88     00 2A 06 F6 | 	mov	local03, #0
11f8c                 | ' return cursor_y
11f8c     3E E4 05 F1 | 	add	objptr, #62
11f90     F2 48 C2 FA | 	rdbyte	local18, objptr
11f94     3E E4 85 F1 | 	sub	objptr, #62
11f98     B5 01 00 FF 
11f9c     8B 12 06 F6 | 	mov	arg01, ##@LR__5828
11fa0     21 14 06 F6 | 	mov	arg02, #33
11fa4     CC BF B1 FD | 	call	#__system___basic_dir
11fa8     FD 32 02 F6 | 	mov	local07, result1
11fac                 | ' n=0
11fac                 | ' px=0: py=v.getcursory()
11fac                 | ' filename = dir$("*", fbNormal )   
11fac                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11fac                 | LR__1443
11fac     B5 01 00 FF 
11fb0     8D 36 06 F6 | 	mov	local09, ##@LR__5829
11fb4     19 13 02 F6 | 	mov	arg01, local07
11fb8     1B 15 02 F6 | 	mov	arg02, local09
11fbc     78 61 B1 FD | 	call	#__system___string_cmp
11fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
11fc4     54 00 90 AD |  if_e	jmp	#LR__1444
11fc8     00 36 06 F6 | 	mov	local09, #0
11fcc     19 13 02 F6 | 	mov	arg01, local07
11fd0     00 14 06 F6 | 	mov	arg02, #0
11fd4     60 61 B1 FD | 	call	#__system___string_cmp
11fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
11fdc     3C 00 90 AD |  if_e	jmp	#LR__1444
11fe0     80 34 56 F2 | 	cmps	local08, #128 wc
11fe4     34 00 90 3D |  if_ae	jmp	#LR__1444
11fe8     1A 2F 02 F6 | 	mov	local05, local08
11fec     02 2E 66 F0 | 	shl	local05, #2
11ff0     1C 4E 05 F1 | 	add	fp, #28
11ff4     A7 2E 02 F1 | 	add	local05, fp
11ff8     17 33 62 FC | 	wrlong	local07, local05
11ffc     01 34 06 F1 | 	add	local08, #1
12000     00 2E 06 F6 | 	mov	local05, #0
12004     00 12 06 F6 | 	mov	arg01, #0
12008     00 14 06 F6 | 	mov	arg02, #0
1200c     1C 4E 85 F1 | 	sub	fp, #28
12010     60 BF B1 FD | 	call	#__system___basic_dir
12014     FD 32 02 F6 | 	mov	local07, result1
12018     90 FF 9F FD | 	jmp	#LR__1443
1201c                 | LR__1444
1201c                 | ' for i =0 to n-1
1201c     00 2C 06 F6 | 	mov	local04, #0
12020                 | LR__1445
12020     1A 2D 52 F2 | 	cmps	local04, local08 wc
12024     D8 00 90 3D |  if_ae	jmp	#LR__1449
12028     00 3A 06 F6 | 	mov	local11, #0
1202c                 | '   swapped=false
1202c                 | '   for j=0 to n-i-2
1202c     00 3C 06 F6 | 	mov	local12, #0
12030     1A 4B 02 F6 | 	mov	local19, local08
12034     16 4B 82 F1 | 	sub	local19, local04
12038     01 4A 86 F1 | 	sub	local19, #1
1203c                 | LR__1446
1203c     25 3D 52 F2 | 	cmps	local12, local19 wc
12040     AC 00 90 3D |  if_ae	jmp	#LR__1448
12044                 | '     if filelist(j) > filelist(j+1) then
12044     1E 37 02 F6 | 	mov	local09, local12
12048     02 36 66 F0 | 	shl	local09, #2
1204c     1C 4E 05 F1 | 	add	fp, #28
12050     A7 36 02 F1 | 	add	local09, fp
12054     1B 13 02 FB | 	rdlong	arg01, local09
12058     1E 37 02 F6 | 	mov	local09, local12
1205c     01 36 06 F1 | 	add	local09, #1
12060     1B 31 02 F6 | 	mov	local06, local09
12064     02 30 66 F0 | 	shl	local06, #2
12068     A7 26 02 F6 | 	mov	local01, fp
1206c     A7 30 02 F1 | 	add	local06, fp
12070     18 2F 02 FB | 	rdlong	local05, local06
12074     17 15 02 F6 | 	mov	arg02, local05
12078     1C 4E 85 F1 | 	sub	fp, #28
1207c     B8 60 B1 FD | 	call	#__system___string_cmp
12080     01 FA 55 F2 | 	cmps	result1, #1 wc
12084     60 00 90 CD |  if_b	jmp	#LR__1447
12088     1E 37 02 F6 | 	mov	local09, local12
1208c     01 36 06 F1 | 	add	local09, #1
12090     02 36 66 F0 | 	shl	local09, #2
12094     1C 4E 05 F1 | 	add	fp, #28
12098     A7 36 02 F1 | 	add	local09, fp
1209c     1B 45 02 FB | 	rdlong	local16, local09
120a0     1E 31 02 F6 | 	mov	local06, local12
120a4     02 30 66 F0 | 	shl	local06, #2
120a8     A7 30 02 F1 | 	add	local06, fp
120ac     18 2F 02 FB | 	rdlong	local05, local06
120b0     1E 37 02 F6 | 	mov	local09, local12
120b4     1B 31 02 F6 | 	mov	local06, local09
120b8     02 30 66 F0 | 	shl	local06, #2
120bc     A7 26 02 F6 | 	mov	local01, fp
120c0     A7 30 02 F1 | 	add	local06, fp
120c4     18 45 62 FC | 	wrlong	local16, local06
120c8     1E 41 02 F6 | 	mov	local14, local12
120cc     01 40 06 F1 | 	add	local14, #1
120d0     02 40 66 F0 | 	shl	local14, #2
120d4     A7 42 02 F6 | 	mov	local15, fp
120d8     A7 40 02 F1 | 	add	local14, fp
120dc     20 2F 62 FC | 	wrlong	local05, local14
120e0     01 3A 66 F6 | 	neg	local11, #1
120e4     1C 4E 85 F1 | 	sub	fp, #28
120e8                 | LR__1447
120e8     01 3C 06 F1 | 	add	local12, #1
120ec     4C FF 9F FD | 	jmp	#LR__1446
120f0                 | LR__1448
120f0                 | ' if not swapped then exit for
120f0     1D 45 22 F6 | 	not	local16, local11
120f4     00 44 0E F2 | 	cmp	local16, #0 wz
120f8     01 2C 06 A1 |  if_e	add	local04, #1
120fc     20 FF 9F AD |  if_e	jmp	#LR__1445
12100                 | LR__1449
12100                 | ' for i=0 to n-1
12100     00 2C 06 F6 | 	mov	local04, #0
12104                 | LR__1450
12104     1A 2D 52 F2 | 	cmps	local04, local08 wc
12108     8C 00 90 3D |  if_ae	jmp	#LR__1452
1210c                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1210c     00 12 06 F6 | 	mov	arg01, #0
12110     A0 BC B1 FD | 	call	#__system___getiolock_0620
12114     FD 12 02 F6 | 	mov	arg01, result1
12118     F4 5F B1 FD | 	call	#__system___lockmem
1211c     16 29 02 F6 | 	mov	local02, local04
12120     02 28 66 F0 | 	shl	local02, #2
12124     1C 4E 05 F1 | 	add	fp, #28
12128     A7 28 02 F1 | 	add	local02, fp
1212c     14 15 02 FB | 	rdlong	arg02, local02
12130     00 12 06 F6 | 	mov	arg01, #0
12134     00 16 06 F6 | 	mov	arg03, #0
12138     1C 4E 85 F1 | 	sub	fp, #28
1213c     C8 6C B1 FD | 	call	#__system___basic_print_string
12140     00 12 06 F6 | 	mov	arg01, #0
12144     6C BC B1 FD | 	call	#__system___getiolock_0620
12148     FD 00 68 FC | 	wrlong	#0, result1
1214c     40 2A 06 F1 | 	add	local03, #64
12150     15 13 02 F6 | 	mov	arg01, local03
12154     58 42 B1 FD | 	call	#_hg010b_spin2_setcursorx
12158     00 2B 56 F2 | 	cmps	local03, #256 wc
1215c     30 00 90 CD |  if_b	jmp	#LR__1451
12160     00 2A 06 F6 | 	mov	local03, #0
12164     00 12 06 F6 | 	mov	arg01, #0
12168     48 BC B1 FD | 	call	#__system___getiolock_0620
1216c     FD 12 02 F6 | 	mov	arg01, result1
12170     9C 5F B1 FD | 	call	#__system___lockmem
12174     00 12 06 F6 | 	mov	arg01, #0
12178     0A 14 06 F6 | 	mov	arg02, #10
1217c     00 16 06 F6 | 	mov	arg03, #0
12180     2C 6C B1 FD | 	call	#__system___basic_print_char
12184     00 12 06 F6 | 	mov	arg01, #0
12188     28 BC B1 FD | 	call	#__system___getiolock_0620
1218c     FD 00 68 FC | 	wrlong	#0, result1
12190                 | LR__1451
12190     01 2C 06 F1 | 	add	local04, #1
12194     6C FF 9F FD | 	jmp	#LR__1450
12198                 | LR__1452
12198                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
12198     80 34 56 F2 | 	cmps	local08, #128 wc
1219c     40 00 90 CD |  if_b	jmp	#LR__1453
121a0     00 12 06 F6 | 	mov	arg01, #0
121a4     0C BC B1 FD | 	call	#__system___getiolock_0620
121a8     FD 12 02 F6 | 	mov	arg01, result1
121ac     60 5F B1 FD | 	call	#__system___lockmem
121b0     B5 01 00 FF 
121b4     8E 14 06 F6 | 	mov	arg02, ##@LR__5830
121b8     00 12 06 F6 | 	mov	arg01, #0
121bc     00 16 06 F6 | 	mov	arg03, #0
121c0     44 6C B1 FD | 	call	#__system___basic_print_string
121c4     00 12 06 F6 | 	mov	arg01, #0
121c8     0A 14 06 F6 | 	mov	arg02, #10
121cc     00 16 06 F6 | 	mov	arg03, #0
121d0     DC 6B B1 FD | 	call	#__system___basic_print_char
121d4     00 12 06 F6 | 	mov	arg01, #0
121d8     D8 BB B1 FD | 	call	#__system___getiolock_0620
121dc     FD 00 68 FC | 	wrlong	#0, result1
121e0                 | LR__1453
121e0                 | ' print
121e0     00 12 06 F6 | 	mov	arg01, #0
121e4     CC BB B1 FD | 	call	#__system___getiolock_0620
121e8     FD 12 02 F6 | 	mov	arg01, result1
121ec     20 5F B1 FD | 	call	#__system___lockmem
121f0     00 12 06 F6 | 	mov	arg01, #0
121f4     0A 14 06 F6 | 	mov	arg02, #10
121f8     00 16 06 F6 | 	mov	arg03, #0
121fc     B0 6B B1 FD | 	call	#__system___basic_print_char
12200     00 12 06 F6 | 	mov	arg01, #0
12204     AC BB B1 FD | 	call	#__system___getiolock_0620
12208     FD 00 68 FC | 	wrlong	#0, result1
1220c     A7 F0 03 F6 | 	mov	ptra, fp
12210     B2 00 A0 FD | 	call	#popregs_
12214                 | _do_dir_ret
12214     2D 00 64 FD | 	ret
12218                 | 
12218                 | ' 
12218                 | ' '-------------------- dpeek
12218                 | ' 
12218                 | ' sub do_dpeek
12218                 | _do_dpeek
12218     00 4A 05 F6 | 	mov	COUNT_, #0
1221c     A8 00 A0 FD | 	call	#pushregs_
12220     14 F0 07 F1 | 	add	ptra, #20
12224     F8 B5 BF FD | 	call	#_pop
12228     A7 FA 61 FC | 	wrlong	result1, fp
1222c     04 4E 05 F1 | 	add	fp, #4
12230     A7 FC 61 FC | 	wrlong	result2, fp
12234     04 4E 05 F1 | 	add	fp, #4
12238     A7 FE 61 FC | 	wrlong	result3, fp
1223c     08 4E 85 F1 | 	sub	fp, #8
12240     A7 12 02 F6 | 	mov	arg01, fp
12244     BC B7 BF FD | 	call	#_converttoint
12248     0C 4E 05 F1 | 	add	fp, #12
1224c     A7 FA 61 FC | 	wrlong	result1, fp
12250                 | ' 
12250                 | ' t1=pop()
12250                 | ' a=converttoint(t1)
12250                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
12250     0C 4E 85 F1 | 	sub	fp, #12
12254     00 04 00 FF 
12258     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1225c     1C 00 90 3D |  if_ae	jmp	#LR__1460
12260     0C 4E 05 F1 | 	add	fp, #12
12264     A7 12 02 FB | 	rdlong	arg01, fp
12268     09 FB E1 FA | 	rdword	result1, arg01
1226c     04 4E 05 F1 | 	add	fp, #4
12270     A7 FA 61 FC | 	wrlong	result1, fp
12274     10 4E 85 F1 | 	sub	fp, #16
12278     1C 00 90 FD | 	jmp	#LR__1461
1227c                 | LR__1460
1227c     0C 4E 05 F1 | 	add	fp, #12
12280     A7 12 02 FB | 	rdlong	arg01, fp
12284     0C 4E 85 F1 | 	sub	fp, #12
12288     58 27 B1 FD | 	call	#_psdpeek
1228c     10 4E 05 F1 | 	add	fp, #16
12290     A7 FA 61 FC | 	wrlong	result1, fp
12294     10 4E 85 F1 | 	sub	fp, #16
12298                 | LR__1461
12298     08 4E 05 F1 | 	add	fp, #8
1229c     A7 3A 68 FC | 	wrlong	#29, fp
122a0     08 4E 05 F1 | 	add	fp, #8
122a4     A7 12 02 FB | 	rdlong	arg01, fp
122a8     10 4E 85 F1 | 	sub	fp, #16
122ac     A7 12 62 FC | 	wrlong	arg01, fp
122b0     A7 12 02 F6 | 	mov	arg01, fp
122b4     00 B6 BF FD | 	call	#_push
122b8     A7 F0 03 F6 | 	mov	ptra, fp
122bc     B2 00 A0 FD | 	call	#popregs_
122c0                 | _do_dpeek_ret
122c0     2D 00 64 FD | 	ret
122c4                 | 
122c4                 | ' 
122c4                 | ' '-------------------- dpoke
122c4                 | ' 
122c4                 | ' sub do_dpoke
122c4                 | _do_dpoke
122c4     01 4A 05 F6 | 	mov	COUNT_, #1
122c8     A8 00 A0 FD | 	call	#pushregs_
122cc     20 F0 07 F1 | 	add	ptra, #32
122d0     4C B5 BF FD | 	call	#_pop
122d4     FD 14 02 F6 | 	mov	arg02, result1
122d8     FE 12 02 F6 | 	mov	arg01, result2
122dc     FF 26 02 F6 | 	mov	local01, result3
122e0     A7 14 62 FC | 	wrlong	arg02, fp
122e4     04 4E 05 F1 | 	add	fp, #4
122e8     A7 12 62 FC | 	wrlong	arg01, fp
122ec     04 4E 05 F1 | 	add	fp, #4
122f0     A7 26 62 FC | 	wrlong	local01, fp
122f4     08 4E 85 F1 | 	sub	fp, #8
122f8     24 B5 BF FD | 	call	#_pop
122fc     FF 26 02 F6 | 	mov	local01, result3
12300     0C 4E 05 F1 | 	add	fp, #12
12304     A7 FA 61 FC | 	wrlong	result1, fp
12308     04 4E 05 F1 | 	add	fp, #4
1230c     A7 FC 61 FC | 	wrlong	result2, fp
12310     04 4E 05 F1 | 	add	fp, #4
12314     A7 26 62 FC | 	wrlong	local01, fp
12318     08 4E 85 F1 | 	sub	fp, #8
1231c     A7 12 02 F6 | 	mov	arg01, fp
12320     0C 4E 85 F1 | 	sub	fp, #12
12324     DC B6 BF FD | 	call	#_converttoint
12328     18 4E 05 F1 | 	add	fp, #24
1232c     A7 FA 61 FC | 	wrlong	result1, fp
12330     18 4E 85 F1 | 	sub	fp, #24
12334     A7 12 02 F6 | 	mov	arg01, fp
12338     C8 B6 BF FD | 	call	#_converttoint
1233c     1C 4E 05 F1 | 	add	fp, #28
12340     A7 FA 61 FC | 	wrlong	result1, fp
12344                 | ' 
12344                 | ' t1=pop() 'value
12344                 | ' t2=pop() 
12344                 | ' a=converttoint(t2) : v=converttoint(t1)
12344                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
12344     04 4E 85 F1 | 	sub	fp, #4
12348     A7 26 02 FB | 	rdlong	local01, fp
1234c     18 4E 85 F1 | 	sub	fp, #24
12350     00 04 00 FF 
12354     00 26 16 F2 | 	cmp	local01, ##524288 wc
12358     1C 00 90 3D |  if_ae	jmp	#LR__1470
1235c     18 4E 05 F1 | 	add	fp, #24
12360     A7 12 02 FB | 	rdlong	arg01, fp
12364     04 4E 05 F1 | 	add	fp, #4
12368     A7 14 02 FB | 	rdlong	arg02, fp
1236c     1C 4E 85 F1 | 	sub	fp, #28
12370     09 15 52 FC | 	wrword	arg02, arg01
12374     18 00 90 FD | 	jmp	#LR__1471
12378                 | LR__1470
12378     18 4E 05 F1 | 	add	fp, #24
1237c     A7 12 02 FB | 	rdlong	arg01, fp
12380     04 4E 05 F1 | 	add	fp, #4
12384     A7 14 02 FB | 	rdlong	arg02, fp
12388     1C 4E 85 F1 | 	sub	fp, #28
1238c     14 25 B1 FD | 	call	#_psdpoke
12390                 | LR__1471
12390     A7 F0 03 F6 | 	mov	ptra, fp
12394     B2 00 A0 FD | 	call	#popregs_
12398                 | _do_dpoke_ret
12398     2D 00 64 FD | 	ret
1239c                 | 
1239c                 | ' '-------------------- draw
1239c                 | ' 
1239c                 | ' sub do_draw
1239c                 | _do_draw
1239c     00 4A 05 F6 | 	mov	COUNT_, #0
123a0     A8 00 A0 FD | 	call	#pushregs_
123a4     20 F0 07 F1 | 	add	ptra, #32
123a8     74 B4 BF FD | 	call	#_pop
123ac     FD 1A 02 F6 | 	mov	arg05, result1
123b0     FE 18 02 F6 | 	mov	arg04, result2
123b4     FF 16 02 F6 | 	mov	arg03, result3
123b8     0C 4E 05 F1 | 	add	fp, #12
123bc     A7 1A 62 FC | 	wrlong	arg05, fp
123c0     04 4E 05 F1 | 	add	fp, #4
123c4     A7 18 62 FC | 	wrlong	arg04, fp
123c8     04 4E 05 F1 | 	add	fp, #4
123cc     A7 16 62 FC | 	wrlong	arg03, fp
123d0     14 4E 85 F1 | 	sub	fp, #20
123d4     48 B4 BF FD | 	call	#_pop
123d8     FF 1A 02 F6 | 	mov	arg05, result3
123dc     A7 FA 61 FC | 	wrlong	result1, fp
123e0     04 4E 05 F1 | 	add	fp, #4
123e4     A7 FC 61 FC | 	wrlong	result2, fp
123e8     04 4E 05 F1 | 	add	fp, #4
123ec     A7 1A 62 FC | 	wrlong	arg05, fp
123f0     08 4E 85 F1 | 	sub	fp, #8
123f4     A7 12 02 F6 | 	mov	arg01, fp
123f8     08 B6 BF FD | 	call	#_converttoint
123fc     18 4E 05 F1 | 	add	fp, #24
12400     A7 FA 61 FC | 	wrlong	result1, fp
12404     0C 4E 85 F1 | 	sub	fp, #12
12408     A7 12 02 F6 | 	mov	arg01, fp
1240c     0C 4E 85 F1 | 	sub	fp, #12
12410     F0 B5 BF FD | 	call	#_converttoint
12414     1C 4E 05 F1 | 	add	fp, #28
12418     A7 FA 61 FC | 	wrlong	result1, fp
1241c     37 00 00 FF 
12420     4C E4 05 F1 | 	add	objptr, ##28236
12424     F2 12 02 FB | 	rdlong	arg01, objptr
12428     04 E4 05 F1 | 	add	objptr, #4
1242c     F2 14 02 FB | 	rdlong	arg02, objptr
12430     04 4E 85 F1 | 	sub	fp, #4
12434     A7 16 02 FB | 	rdlong	arg03, fp
12438     FD 18 02 F6 | 	mov	arg04, result1
1243c     18 4E 85 F1 | 	sub	fp, #24
12440     08 E4 85 F1 | 	sub	objptr, #8
12444     F2 1A 02 FB | 	rdlong	arg05, objptr
12448     37 00 00 FF 
1244c     48 E4 85 F1 | 	sub	objptr, ##28232
12450     C8 35 B1 FD | 	call	#_hg010b_spin2_draw
12454     18 4E 05 F1 | 	add	fp, #24
12458     A7 1A 02 FB | 	rdlong	arg05, fp
1245c     37 00 00 FF 
12460     4C E4 05 F1 | 	add	objptr, ##28236
12464     F2 1A 62 FC | 	wrlong	arg05, objptr
12468     04 4E 05 F1 | 	add	fp, #4
1246c     A7 1A 02 FB | 	rdlong	arg05, fp
12470     1C 4E 85 F1 | 	sub	fp, #28
12474     04 E4 05 F1 | 	add	objptr, #4
12478     F2 1A 62 FC | 	wrlong	arg05, objptr
1247c     37 00 00 FF 
12480     50 E4 85 F1 | 	sub	objptr, ##28240
12484     A7 F0 03 F6 | 	mov	ptra, fp
12488     B2 00 A0 FD | 	call	#popregs_
1248c                 | _do_draw_ret
1248c     2D 00 64 FD | 	ret
12490                 | 
12490                 | ' 
12490                 | ' '-------------------- else
12490                 | ' 
12490                 | ' sub do_else
12490                 | _do_else
12490     4A 00 00 FF 
12494     9C E4 05 F1 | 	add	objptr, ##38044
12498     F2 00 02 FB | 	rdlong	_var01, objptr
1249c     01 00 86 F1 | 	sub	_var01, #1
124a0     04 E4 05 F1 | 	add	objptr, #4
124a4     F2 00 62 FC | 	wrlong	_var01, objptr
124a8     4A 00 00 FF 
124ac     A0 E4 85 F1 | 	sub	objptr, ##38048
124b0                 | _do_else_ret
124b0     2D 00 64 FD | 	ret
124b4                 | 
124b4                 | ' 
124b4                 | ' '-------------------- end
124b4                 | ' 
124b4                 | ' sub do_end
124b4                 | _do_end
124b4     4A 00 00 FF 
124b8     9C E4 05 F1 | 	add	objptr, ##38044
124bc     F2 00 02 FB | 	rdlong	_var01, objptr
124c0     01 00 86 F1 | 	sub	_var01, #1
124c4     04 E4 05 F1 | 	add	objptr, #4
124c8     F2 00 62 FC | 	wrlong	_var01, objptr
124cc     06 00 00 FF 
124d0     38 E4 05 F1 | 	add	objptr, ##3128
124d4     FF FF BF FF 
124d8     F2 FE 6B FC | 	wrlong	##2147483647, objptr
124dc     50 00 00 FF 
124e0     D8 E4 85 F1 | 	sub	objptr, ##41176
124e4                 | _do_end_ret
124e4     2D 00 64 FD | 	ret
124e8                 | 
124e8                 | ' 
124e8                 | ' '-------------------- enter
124e8                 | ' 
124e8                 | ' sub do_enter
124e8                 | _do_enter
124e8     02 00 00 FF 
124ec     D2 12 06 F6 | 	mov	arg01, ##1234
124f0     00 34 B0 FD | 	call	#_do_load
124f4                 | _do_enter_ret
124f4     2D 00 64 FD | 	ret
124f8                 | 
124f8                 | ' 
124f8                 | ' '------------------- error processing
124f8                 | ' 
124f8                 | ' sub do_error
124f8                 | _do_error
124f8     01 4A 05 F6 | 	mov	COUNT_, #1
124fc     A8 00 A0 FD | 	call	#pushregs_
12500     4A 00 00 FF 
12504     A0 E4 05 F1 | 	add	objptr, ##38048
12508     F2 18 02 FB | 	rdlong	arg04, objptr
1250c     0C 17 02 F6 | 	mov	arg03, arg04
12510     01 16 66 F0 | 	shl	arg03, #1
12514     0C 17 02 F1 | 	add	arg03, arg04
12518     02 16 66 F0 | 	shl	arg03, #2
1251c     03 00 00 FF 
12520     04 E4 85 F1 | 	sub	objptr, ##1540
12524     F2 16 02 F1 | 	add	arg03, objptr
12528     0B 27 02 FB | 	rdlong	local01, arg03
1252c                 | ' r=compiledline(lineptr_e).result.uresult
1252c                 | ' print "Error ";r;": ";errors$(r)
1252c     00 12 06 F6 | 	mov	arg01, #0
12530     47 00 00 FF 
12534     9C E4 85 F1 | 	sub	objptr, ##36508
12538     78 B8 B1 FD | 	call	#__system___getiolock_0620
1253c     FD 12 02 F6 | 	mov	arg01, result1
12540     CC 5B B1 FD | 	call	#__system___lockmem
12544     B5 01 00 FF 
12548     C0 14 06 F6 | 	mov	arg02, ##@LR__5831
1254c     00 12 06 F6 | 	mov	arg01, #0
12550     00 16 06 F6 | 	mov	arg03, #0
12554     B0 68 B1 FD | 	call	#__system___basic_print_string
12558     00 12 06 F6 | 	mov	arg01, #0
1255c     13 15 02 F6 | 	mov	arg02, local01
12560     00 16 06 F6 | 	mov	arg03, #0
12564     0A 18 06 F6 | 	mov	arg04, #10
12568     20 69 B1 FD | 	call	#__system___basic_print_unsigned
1256c     B5 01 00 FF 
12570     C7 14 06 F6 | 	mov	arg02, ##@LR__5832
12574     00 12 06 F6 | 	mov	arg01, #0
12578     00 16 06 F6 | 	mov	arg03, #0
1257c     88 68 B1 FD | 	call	#__system___basic_print_string
12580     02 26 66 F0 | 	shl	local01, #2
12584     45 00 00 FF 
12588     9C E4 05 F1 | 	add	objptr, ##35484
1258c     F2 26 02 F1 | 	add	local01, objptr
12590     13 15 02 FB | 	rdlong	arg02, local01
12594     00 12 06 F6 | 	mov	arg01, #0
12598     00 16 06 F6 | 	mov	arg03, #0
1259c     45 00 00 FF 
125a0     9C E4 85 F1 | 	sub	objptr, ##35484
125a4     60 68 B1 FD | 	call	#__system___basic_print_string
125a8     00 12 06 F6 | 	mov	arg01, #0
125ac     0A 14 06 F6 | 	mov	arg02, #10
125b0     00 16 06 F6 | 	mov	arg03, #0
125b4     F8 67 B1 FD | 	call	#__system___basic_print_char
125b8     00 12 06 F6 | 	mov	arg01, #0
125bc     F4 B7 B1 FD | 	call	#__system___getiolock_0620
125c0     FD 00 68 FC | 	wrlong	#0, result1
125c4     A7 F0 03 F6 | 	mov	ptra, fp
125c8     B2 00 A0 FD | 	call	#popregs_
125cc                 | _do_error_ret
125cc     2D 00 64 FD | 	ret
125d0                 | 
125d0                 | ' 
125d0                 | ' '-------------------- fcircle
125d0                 | ' 
125d0                 | ' sub do_fcircle
125d0                 | _do_fcircle
125d0     02 4A 05 F6 | 	mov	COUNT_, #2
125d4     A8 00 A0 FD | 	call	#pushregs_
125d8     24 F0 07 F1 | 	add	ptra, #36
125dc     40 B2 BF FD | 	call	#_pop
125e0     FD 14 02 F6 | 	mov	arg02, result1
125e4     FE 18 02 F6 | 	mov	arg04, result2
125e8     FF 16 02 F6 | 	mov	arg03, result3
125ec     18 4E 05 F1 | 	add	fp, #24
125f0     A7 14 62 FC | 	wrlong	arg02, fp
125f4     04 4E 05 F1 | 	add	fp, #4
125f8     A7 18 62 FC | 	wrlong	arg04, fp
125fc     04 4E 05 F1 | 	add	fp, #4
12600     A7 16 62 FC | 	wrlong	arg03, fp
12604     20 4E 85 F1 | 	sub	fp, #32
12608     14 B2 BF FD | 	call	#_pop
1260c     FD 14 02 F6 | 	mov	arg02, result1
12610     FE 18 02 F6 | 	mov	arg04, result2
12614     FF 16 02 F6 | 	mov	arg03, result3
12618     0C 4E 05 F1 | 	add	fp, #12
1261c     A7 14 62 FC | 	wrlong	arg02, fp
12620     04 4E 05 F1 | 	add	fp, #4
12624     A7 18 62 FC | 	wrlong	arg04, fp
12628     04 4E 05 F1 | 	add	fp, #4
1262c     A7 16 62 FC | 	wrlong	arg03, fp
12630     14 4E 85 F1 | 	sub	fp, #20
12634     E8 B1 BF FD | 	call	#_pop
12638     FF 14 02 F6 | 	mov	arg02, result3
1263c     A7 FA 61 FC | 	wrlong	result1, fp
12640     04 4E 05 F1 | 	add	fp, #4
12644     A7 FC 61 FC | 	wrlong	result2, fp
12648     04 4E 05 F1 | 	add	fp, #4
1264c     A7 14 62 FC | 	wrlong	arg02, fp
12650     08 4E 85 F1 | 	sub	fp, #8
12654     A7 12 02 F6 | 	mov	arg01, fp
12658     A8 B3 BF FD | 	call	#_converttoint
1265c     FD 26 02 F6 | 	mov	local01, result1
12660     0C 4E 05 F1 | 	add	fp, #12
12664     A7 12 02 F6 | 	mov	arg01, fp
12668     0C 4E 85 F1 | 	sub	fp, #12
1266c     94 B3 BF FD | 	call	#_converttoint
12670     FD 28 02 F6 | 	mov	local02, result1
12674     18 4E 05 F1 | 	add	fp, #24
12678     A7 12 02 F6 | 	mov	arg01, fp
1267c     18 4E 85 F1 | 	sub	fp, #24
12680     80 B3 BF FD | 	call	#_converttoint
12684     FD 16 02 F6 | 	mov	arg03, result1
12688     37 00 00 FF 
1268c     48 E4 05 F1 | 	add	objptr, ##28232
12690     F2 18 02 FB | 	rdlong	arg04, objptr
12694     37 00 00 FF 
12698     48 E4 85 F1 | 	sub	objptr, ##28232
1269c     13 13 02 F6 | 	mov	arg01, local01
126a0     14 15 02 F6 | 	mov	arg02, local02
126a4     F8 37 B1 FD | 	call	#_hg010b_spin2_fcircle
126a8     A7 F0 03 F6 | 	mov	ptra, fp
126ac     B2 00 A0 FD | 	call	#popregs_
126b0                 | _do_fcircle_ret
126b0     2D 00 64 FD | 	ret
126b4                 | 
126b4                 | ' 
126b4                 | ' '-------------------- fill
126b4                 | ' 
126b4                 | ' sub do_fill
126b4                 | _do_fill
126b4     03 4A 05 F6 | 	mov	COUNT_, #3
126b8     A8 00 A0 FD | 	call	#pushregs_
126bc     30 F0 07 F1 | 	add	ptra, #48
126c0     5C B1 BF FD | 	call	#_pop
126c4     FD 16 02 F6 | 	mov	arg03, result1
126c8     FE 14 02 F6 | 	mov	arg02, result2
126cc     FF 18 02 F6 | 	mov	arg04, result3
126d0     24 4E 05 F1 | 	add	fp, #36
126d4     A7 16 62 FC | 	wrlong	arg03, fp
126d8     04 4E 05 F1 | 	add	fp, #4
126dc     A7 14 62 FC | 	wrlong	arg02, fp
126e0     04 4E 05 F1 | 	add	fp, #4
126e4     A7 18 62 FC | 	wrlong	arg04, fp
126e8     2C 4E 85 F1 | 	sub	fp, #44
126ec     30 B1 BF FD | 	call	#_pop
126f0     FD 16 02 F6 | 	mov	arg03, result1
126f4     FE 14 02 F6 | 	mov	arg02, result2
126f8     FF 18 02 F6 | 	mov	arg04, result3
126fc     18 4E 05 F1 | 	add	fp, #24
12700     A7 16 62 FC | 	wrlong	arg03, fp
12704     04 4E 05 F1 | 	add	fp, #4
12708     A7 14 62 FC | 	wrlong	arg02, fp
1270c     04 4E 05 F1 | 	add	fp, #4
12710     A7 18 62 FC | 	wrlong	arg04, fp
12714     20 4E 85 F1 | 	sub	fp, #32
12718     04 B1 BF FD | 	call	#_pop
1271c     FD 16 02 F6 | 	mov	arg03, result1
12720     FE 14 02 F6 | 	mov	arg02, result2
12724     FF 18 02 F6 | 	mov	arg04, result3
12728     0C 4E 05 F1 | 	add	fp, #12
1272c     A7 16 62 FC | 	wrlong	arg03, fp
12730     04 4E 05 F1 | 	add	fp, #4
12734     A7 14 62 FC | 	wrlong	arg02, fp
12738     04 4E 05 F1 | 	add	fp, #4
1273c     A7 18 62 FC | 	wrlong	arg04, fp
12740     14 4E 85 F1 | 	sub	fp, #20
12744     D8 B0 BF FD | 	call	#_pop
12748     FF 16 02 F6 | 	mov	arg03, result3
1274c     A7 FA 61 FC | 	wrlong	result1, fp
12750     04 4E 05 F1 | 	add	fp, #4
12754     A7 FC 61 FC | 	wrlong	result2, fp
12758     04 4E 05 F1 | 	add	fp, #4
1275c     A7 16 62 FC | 	wrlong	arg03, fp
12760     08 4E 85 F1 | 	sub	fp, #8
12764     A7 12 02 F6 | 	mov	arg01, fp
12768     98 B2 BF FD | 	call	#_converttoint
1276c     FD 26 02 F6 | 	mov	local01, result1
12770     0C 4E 05 F1 | 	add	fp, #12
12774     A7 12 02 F6 | 	mov	arg01, fp
12778     0C 4E 85 F1 | 	sub	fp, #12
1277c     84 B2 BF FD | 	call	#_converttoint
12780     FD 28 02 F6 | 	mov	local02, result1
12784     18 4E 05 F1 | 	add	fp, #24
12788     A7 12 02 F6 | 	mov	arg01, fp
1278c     18 4E 85 F1 | 	sub	fp, #24
12790     70 B2 BF FD | 	call	#_converttoint
12794     FD 2A 02 F6 | 	mov	local03, result1
12798     24 4E 05 F1 | 	add	fp, #36
1279c     A7 12 02 F6 | 	mov	arg01, fp
127a0     24 4E 85 F1 | 	sub	fp, #36
127a4     5C B2 BF FD | 	call	#_converttoint
127a8     FD 18 02 F6 | 	mov	arg04, result1
127ac     13 13 02 F6 | 	mov	arg01, local01
127b0     14 15 02 F6 | 	mov	arg02, local02
127b4     15 17 02 F6 | 	mov	arg03, local03
127b8     50 34 B1 FD | 	call	#_hg010b_spin2_fill
127bc     A7 F0 03 F6 | 	mov	ptra, fp
127c0     B2 00 A0 FD | 	call	#popregs_
127c4                 | _do_fill_ret
127c4     2D 00 64 FD | 	ret
127c8                 | 
127c8                 | ' 
127c8                 | ' '-------------------- findfirst
127c8                 | ' 
127c8                 | ' sub do_findfirst
127c8                 | _do_findfirst
127c8     00 4A 05 F6 | 	mov	COUNT_, #0
127cc     A8 00 A0 FD | 	call	#pushregs_
127d0     1C F0 07 F1 | 	add	ptra, #28
127d4     4A 00 00 FF 
127d8     A0 E4 05 F1 | 	add	objptr, ##38048
127dc     F2 16 02 FB | 	rdlong	arg03, objptr
127e0     0B 15 02 F6 | 	mov	arg02, arg03
127e4     01 14 66 F0 | 	shl	arg02, #1
127e8     0B 15 02 F1 | 	add	arg02, arg03
127ec     02 14 66 F0 | 	shl	arg02, #2
127f0     03 00 00 FF 
127f4     04 E4 85 F1 | 	sub	objptr, ##1540
127f8     F2 14 02 F1 | 	add	arg02, objptr
127fc     0A 17 02 FB | 	rdlong	arg03, arg02
12800     A7 16 62 FC | 	wrlong	arg03, fp
12804                 | ' 
12804                 | ' numpar=compiledline(lineptr_e).result.uresult
12804                 | ' if numpar=2 then
12804     02 16 0E F2 | 	cmp	arg03, #2 wz
12808     47 00 00 FF 
1280c     9C E4 85 F1 | 	sub	objptr, ##36508
12810     70 01 90 5D |  if_ne	jmp	#LR__1486
12814     08 B0 BF FD | 	call	#_pop
12818     FF 16 02 F6 | 	mov	arg03, result3
1281c     08 4E 05 F1 | 	add	fp, #8
12820     A7 FA 61 FC | 	wrlong	result1, fp
12824     04 4E 05 F1 | 	add	fp, #4
12828     A7 FC 61 FC | 	wrlong	result2, fp
1282c     04 4E 05 F1 | 	add	fp, #4
12830     A7 16 62 FC | 	wrlong	arg03, fp
12834                 | '   t1=pop()
12834                 | '   if t1.result_type=result_string2 then 
12834     10 4E 85 F1 | 	sub	fp, #16
12838     2B 16 0E F2 | 	cmp	arg03, #43 wz
1283c     20 00 90 5D |  if_ne	jmp	#LR__1480
12840     08 4E 05 F1 | 	add	fp, #8
12844     A7 12 02 FB | 	rdlong	arg01, fp
12848     08 4E 85 F1 | 	sub	fp, #8
1284c     48 B1 BF FD | 	call	#_convertstring
12850     18 4E 05 F1 | 	add	fp, #24
12854     A7 FA 61 FC | 	wrlong	result1, fp
12858     18 4E 85 F1 | 	sub	fp, #24
1285c     6C 00 90 FD | 	jmp	#LR__1483
12860                 | LR__1480
12860     10 4E 05 F1 | 	add	fp, #16
12864     A7 16 02 FB | 	rdlong	arg03, fp
12868     10 4E 85 F1 | 	sub	fp, #16
1286c     1F 16 0E F2 | 	cmp	arg03, #31 wz
12870     18 00 90 5D |  if_ne	jmp	#LR__1481
12874     08 4E 05 F1 | 	add	fp, #8
12878     A7 16 02 FB | 	rdlong	arg03, fp
1287c     10 4E 05 F1 | 	add	fp, #16
12880     A7 16 62 FC | 	wrlong	arg03, fp
12884     18 4E 85 F1 | 	sub	fp, #24
12888     40 00 90 FD | 	jmp	#LR__1482
1288c                 | LR__1481
1288c                 | '     print "findfirst: "; : printerror(30) : return  
1288c     00 12 06 F6 | 	mov	arg01, #0
12890     20 B5 B1 FD | 	call	#__system___getiolock_0620
12894     FD 12 02 F6 | 	mov	arg01, result1
12898     74 58 B1 FD | 	call	#__system___lockmem
1289c     B5 01 00 FF 
128a0     CA 14 06 F6 | 	mov	arg02, ##@LR__5833
128a4     00 12 06 F6 | 	mov	arg01, #0
128a8     00 16 06 F6 | 	mov	arg03, #0
128ac     58 65 B1 FD | 	call	#__system___basic_print_string
128b0     00 12 06 F6 | 	mov	arg01, #0
128b4     FC B4 B1 FD | 	call	#__system___getiolock_0620
128b8     FD 00 68 FC | 	wrlong	#0, result1
128bc     1E 12 06 F6 | 	mov	arg01, #30
128c0     00 14 06 F6 | 	mov	arg02, #0
128c4     F4 1D B1 FD | 	call	#_printerror
128c8     7C 02 90 FD | 	jmp	#LR__1495
128cc                 | LR__1482
128cc                 | LR__1483
128cc     50 AF BF FD | 	call	#_pop
128d0     FF 16 02 F6 | 	mov	arg03, result3
128d4     08 4E 05 F1 | 	add	fp, #8
128d8     A7 FA 61 FC | 	wrlong	result1, fp
128dc     04 4E 05 F1 | 	add	fp, #4
128e0     A7 FC 61 FC | 	wrlong	result2, fp
128e4     04 4E 05 F1 | 	add	fp, #4
128e8     A7 16 62 FC | 	wrlong	arg03, fp
128ec                 | '   t1=pop()
128ec                 | '   if t1.result_type=result_string2 then 
128ec     10 4E 85 F1 | 	sub	fp, #16
128f0     2B 16 0E F2 | 	cmp	arg03, #43 wz
128f4     20 00 90 5D |  if_ne	jmp	#LR__1484
128f8     08 4E 05 F1 | 	add	fp, #8
128fc     A7 12 02 FB | 	rdlong	arg01, fp
12900     08 4E 85 F1 | 	sub	fp, #8
12904     90 B0 BF FD | 	call	#_convertstring
12908     14 4E 05 F1 | 	add	fp, #20
1290c     A7 FA 61 FC | 	wrlong	result1, fp
12910     14 4E 85 F1 | 	sub	fp, #20
12914     88 01 90 FD | 	jmp	#LR__1493
12918                 | LR__1484
12918     10 4E 05 F1 | 	add	fp, #16
1291c     A7 16 02 FB | 	rdlong	arg03, fp
12920     10 4E 85 F1 | 	sub	fp, #16
12924     1F 16 0E F2 | 	cmp	arg03, #31 wz
12928     18 00 90 5D |  if_ne	jmp	#LR__1485
1292c     08 4E 05 F1 | 	add	fp, #8
12930     A7 16 02 FB | 	rdlong	arg03, fp
12934     0C 4E 05 F1 | 	add	fp, #12
12938     A7 16 62 FC | 	wrlong	arg03, fp
1293c     14 4E 85 F1 | 	sub	fp, #20
12940     5C 01 90 FD | 	jmp	#LR__1493
12944                 | LR__1485
12944                 | '     print "findfirst: "; : printerror(30) : return  
12944     00 12 06 F6 | 	mov	arg01, #0
12948     68 B4 B1 FD | 	call	#__system___getiolock_0620
1294c     FD 12 02 F6 | 	mov	arg01, result1
12950     BC 57 B1 FD | 	call	#__system___lockmem
12954     B5 01 00 FF 
12958     D6 14 06 F6 | 	mov	arg02, ##@LR__5834
1295c     00 12 06 F6 | 	mov	arg01, #0
12960     00 16 06 F6 | 	mov	arg03, #0
12964     A0 64 B1 FD | 	call	#__system___basic_print_string
12968     00 12 06 F6 | 	mov	arg01, #0
1296c     44 B4 B1 FD | 	call	#__system___getiolock_0620
12970     FD 00 68 FC | 	wrlong	#0, result1
12974     1E 12 06 F6 | 	mov	arg01, #30
12978     00 14 06 F6 | 	mov	arg02, #0
1297c     3C 1D B1 FD | 	call	#_printerror
12980     C4 01 90 FD | 	jmp	#LR__1495
12984                 | LR__1486
12984     A7 16 02 FB | 	rdlong	arg03, fp
12988     01 16 0E F2 | 	cmp	arg03, #1 wz
1298c     D0 00 90 5D |  if_ne	jmp	#LR__1491
12990     8C AE BF FD | 	call	#_pop
12994     FF 16 02 F6 | 	mov	arg03, result3
12998     08 4E 05 F1 | 	add	fp, #8
1299c     A7 FA 61 FC | 	wrlong	result1, fp
129a0     04 4E 05 F1 | 	add	fp, #4
129a4     A7 FC 61 FC | 	wrlong	result2, fp
129a8     04 4E 05 F1 | 	add	fp, #4
129ac     A7 16 62 FC | 	wrlong	arg03, fp
129b0                 | '   t1=pop()
129b0                 | '   if t1.result_type=result_string2 then 
129b0     10 4E 85 F1 | 	sub	fp, #16
129b4     2B 16 0E F2 | 	cmp	arg03, #43 wz
129b8     20 00 90 5D |  if_ne	jmp	#LR__1487
129bc     08 4E 05 F1 | 	add	fp, #8
129c0     A7 12 02 FB | 	rdlong	arg01, fp
129c4     08 4E 85 F1 | 	sub	fp, #8
129c8     CC AF BF FD | 	call	#_convertstring
129cc     14 4E 05 F1 | 	add	fp, #20
129d0     A7 FA 61 FC | 	wrlong	result1, fp
129d4     14 4E 85 F1 | 	sub	fp, #20
129d8     6C 00 90 FD | 	jmp	#LR__1490
129dc                 | LR__1487
129dc     10 4E 05 F1 | 	add	fp, #16
129e0     A7 16 02 FB | 	rdlong	arg03, fp
129e4     10 4E 85 F1 | 	sub	fp, #16
129e8     1F 16 0E F2 | 	cmp	arg03, #31 wz
129ec     18 00 90 5D |  if_ne	jmp	#LR__1488
129f0     08 4E 05 F1 | 	add	fp, #8
129f4     A7 16 02 FB | 	rdlong	arg03, fp
129f8     0C 4E 05 F1 | 	add	fp, #12
129fc     A7 16 62 FC | 	wrlong	arg03, fp
12a00     14 4E 85 F1 | 	sub	fp, #20
12a04     40 00 90 FD | 	jmp	#LR__1489
12a08                 | LR__1488
12a08                 | '     print "findfirst: "; : printerror(30) : return  
12a08     00 12 06 F6 | 	mov	arg01, #0
12a0c     A4 B3 B1 FD | 	call	#__system___getiolock_0620
12a10     FD 12 02 F6 | 	mov	arg01, result1
12a14     F8 56 B1 FD | 	call	#__system___lockmem
12a18     B5 01 00 FF 
12a1c     E2 14 06 F6 | 	mov	arg02, ##@LR__5835
12a20     00 12 06 F6 | 	mov	arg01, #0
12a24     00 16 06 F6 | 	mov	arg03, #0
12a28     DC 63 B1 FD | 	call	#__system___basic_print_string
12a2c     00 12 06 F6 | 	mov	arg01, #0
12a30     80 B3 B1 FD | 	call	#__system___getiolock_0620
12a34     FD 00 68 FC | 	wrlong	#0, result1
12a38     1E 12 06 F6 | 	mov	arg01, #30
12a3c     00 14 06 F6 | 	mov	arg02, #0
12a40     78 1C B1 FD | 	call	#_printerror
12a44     00 01 90 FD | 	jmp	#LR__1495
12a48                 | LR__1489
12a48                 | LR__1490
12a48     B5 01 00 FF 
12a4c     EE 16 06 F6 | 	mov	arg03, ##@LR__5836
12a50     18 4E 05 F1 | 	add	fp, #24
12a54     A7 16 62 FC | 	wrlong	arg03, fp
12a58     18 4E 85 F1 | 	sub	fp, #24
12a5c     40 00 90 FD | 	jmp	#LR__1492
12a60                 | LR__1491
12a60                 | '   print "findfirst: "; : printerror(39) : return     
12a60     00 12 06 F6 | 	mov	arg01, #0
12a64     4C B3 B1 FD | 	call	#__system___getiolock_0620
12a68     FD 12 02 F6 | 	mov	arg01, result1
12a6c     A0 56 B1 FD | 	call	#__system___lockmem
12a70     B5 01 00 FF 
12a74     EF 14 06 F6 | 	mov	arg02, ##@LR__5837
12a78     00 12 06 F6 | 	mov	arg01, #0
12a7c     00 16 06 F6 | 	mov	arg03, #0
12a80     84 63 B1 FD | 	call	#__system___basic_print_string
12a84     00 12 06 F6 | 	mov	arg01, #0
12a88     28 B3 B1 FD | 	call	#__system___getiolock_0620
12a8c     FD 00 68 FC | 	wrlong	#0, result1
12a90     27 12 06 F6 | 	mov	arg01, #39
12a94     00 14 06 F6 | 	mov	arg02, #0
12a98     20 1C B1 FD | 	call	#_printerror
12a9c     A8 00 90 FD | 	jmp	#LR__1495
12aa0                 | LR__1492
12aa0                 | LR__1493
12aa0                 | ' 
12aa0                 | ' if s2="" then
12aa0     18 4E 05 F1 | 	add	fp, #24
12aa4     A7 12 02 FB | 	rdlong	arg01, fp
12aa8     18 4E 85 F1 | 	sub	fp, #24
12aac     B5 01 00 FF 
12ab0     FB 14 06 F6 | 	mov	arg02, ##@LR__5838
12ab4     80 56 B1 FD | 	call	#__system___string_cmp
12ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
12abc     04 4E 05 A1 |  if_e	add	fp, #4
12ac0     A7 62 68 AC |  if_e	wrlong	#49, fp
12ac4     04 4E 85 A1 |  if_e	sub	fp, #4
12ac8     38 00 90 AD |  if_e	jmp	#LR__1494
12acc     18 4E 05 F1 | 	add	fp, #24
12ad0     A7 12 02 FB | 	rdlong	arg01, fp
12ad4     18 4E 85 F1 | 	sub	fp, #24
12ad8     C4 79 B1 FD | 	call	#__system__LCase_S
12adc     FD 12 02 F6 | 	mov	arg01, result1
12ae0     B5 01 00 FF 
12ae4     FC 14 06 F6 | 	mov	arg02, ##@LR__5839
12ae8     4C 56 B1 FD | 	call	#__system___string_cmp
12aec     00 FA 0D F2 | 	cmp	result1, #0 wz
12af0     04 4E 05 A1 |  if_e	add	fp, #4
12af4     A7 20 68 AC |  if_e	wrlong	#16, fp
12af8     04 4E C5 F3 | 	sumz	fp, #4
12afc     A7 42 68 5C |  if_ne	wrlong	#33, fp
12b00     04 4E 85 51 |  if_ne	sub	fp, #4
12b04                 | LR__1494
12b04     14 4E 05 F1 | 	add	fp, #20
12b08     A7 12 02 FB | 	rdlong	arg01, fp
12b0c     10 4E 85 F1 | 	sub	fp, #16
12b10     A7 14 02 FB | 	rdlong	arg02, fp
12b14     04 4E 85 F1 | 	sub	fp, #4
12b18     58 B4 B1 FD | 	call	#__system___basic_dir
12b1c     18 4E 05 F1 | 	add	fp, #24
12b20     A7 FA 61 FC | 	wrlong	result1, fp
12b24     08 4E 85 F1 | 	sub	fp, #8
12b28     A7 3E 68 FC | 	wrlong	#31, fp
12b2c     08 4E 05 F1 | 	add	fp, #8
12b30     A7 16 02 FB | 	rdlong	arg03, fp
12b34     10 4E 85 F1 | 	sub	fp, #16
12b38     A7 16 62 FC | 	wrlong	arg03, fp
12b3c     A7 12 02 F6 | 	mov	arg01, fp
12b40     08 4E 85 F1 | 	sub	fp, #8
12b44     70 AD BF FD | 	call	#_push
12b48                 | LR__1495
12b48     A7 F0 03 F6 | 	mov	ptra, fp
12b4c     B2 00 A0 FD | 	call	#popregs_
12b50                 | _do_findfirst_ret
12b50     2D 00 64 FD | 	ret
12b54                 | 
12b54                 | ' 
12b54                 | ' '-------------------- findnext
12b54                 | ' 
12b54                 | ' sub do_findnext
12b54                 | _do_findnext
12b54     00 4A 05 F6 | 	mov	COUNT_, #0
12b58     A8 00 A0 FD | 	call	#pushregs_
12b5c     10 F0 07 F1 | 	add	ptra, #16
12b60                 | ' 
12b60                 | ' if compiledline(lineptr_e).result.uresult>0 then print "findnext: "; : printerror(39) : return    
12b60     4A 00 00 FF 
12b64     A0 E4 05 F1 | 	add	objptr, ##38048
12b68     F2 16 02 FB | 	rdlong	arg03, objptr
12b6c     0B 15 02 F6 | 	mov	arg02, arg03
12b70     01 14 66 F0 | 	shl	arg02, #1
12b74     0B 15 02 F1 | 	add	arg02, arg03
12b78     02 14 66 F0 | 	shl	arg02, #2
12b7c     03 00 00 FF 
12b80     04 E4 85 F1 | 	sub	objptr, ##1540
12b84     F2 14 02 F1 | 	add	arg02, objptr
12b88     0A FB 01 FB | 	rdlong	result1, arg02
12b8c     01 FA 15 F2 | 	cmp	result1, #1 wc
12b90     47 00 00 FF 
12b94     9C E4 85 F1 | 	sub	objptr, ##36508
12b98     40 00 90 CD |  if_b	jmp	#LR__1500
12b9c     00 12 06 F6 | 	mov	arg01, #0
12ba0     10 B2 B1 FD | 	call	#__system___getiolock_0620
12ba4     FD 12 02 F6 | 	mov	arg01, result1
12ba8     64 55 B1 FD | 	call	#__system___lockmem
12bac     B5 01 00 FF 
12bb0     00 15 06 F6 | 	mov	arg02, ##@LR__5840
12bb4     00 12 06 F6 | 	mov	arg01, #0
12bb8     00 16 06 F6 | 	mov	arg03, #0
12bbc     48 62 B1 FD | 	call	#__system___basic_print_string
12bc0     00 12 06 F6 | 	mov	arg01, #0
12bc4     EC B1 B1 FD | 	call	#__system___getiolock_0620
12bc8     FD 00 68 FC | 	wrlong	#0, result1
12bcc     27 12 06 F6 | 	mov	arg01, #39
12bd0     00 14 06 F6 | 	mov	arg02, #0
12bd4     E4 1A B1 FD | 	call	#_printerror
12bd8     34 00 90 FD | 	jmp	#LR__1501
12bdc                 | LR__1500
12bdc     00 12 06 F6 | 	mov	arg01, #0
12be0     00 14 06 F6 | 	mov	arg02, #0
12be4     8C B3 B1 FD | 	call	#__system___basic_dir
12be8     0C 4E 05 F1 | 	add	fp, #12
12bec     A7 FA 61 FC | 	wrlong	result1, fp
12bf0     04 4E 85 F1 | 	sub	fp, #4
12bf4     A7 3E 68 FC | 	wrlong	#31, fp
12bf8     04 4E 05 F1 | 	add	fp, #4
12bfc     A7 16 02 FB | 	rdlong	arg03, fp
12c00     0C 4E 85 F1 | 	sub	fp, #12
12c04     A7 16 62 FC | 	wrlong	arg03, fp
12c08     A7 12 02 F6 | 	mov	arg01, fp
12c0c     A8 AC BF FD | 	call	#_push
12c10                 | LR__1501
12c10     A7 F0 03 F6 | 	mov	ptra, fp
12c14     B2 00 A0 FD | 	call	#popregs_
12c18                 | _do_findnext_ret
12c18     2D 00 64 FD | 	ret
12c1c                 | 
12c1c                 | ' 
12c1c                 | ' '-------------------- font
12c1c                 | ' 
12c1c                 | ' sub do_font
12c1c                 | _do_font
12c1c     03 4A 05 F6 | 	mov	COUNT_, #3
12c20     A8 00 A0 FD | 	call	#pushregs_
12c24     F8 AB BF FD | 	call	#_pop
12c28     FD 26 02 F6 | 	mov	local01, result1
12c2c     FE 28 02 F6 | 	mov	local02, result2
12c30     FF 2A 02 F6 | 	mov	local03, result3
12c34                 | ' 
12c34                 | ' t1=pop() 
12c34                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12c34     1E 2A 0E F2 | 	cmp	local03, #30 wz
12c38     10 00 90 5D |  if_ne	jmp	#LR__1510
12c3c     13 13 02 F6 | 	mov	arg01, local01
12c40     00 14 06 F6 | 	mov	arg02, #0
12c44     0C 88 B1 FD | 	call	#__system___float_tointeger
12c48     FD 26 02 F6 | 	mov	local01, result1
12c4c                 | LR__1510
12c4c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12c4c     1F 2A 0E F2 | 	cmp	local03, #31 wz
12c50     18 00 90 5D |  if_ne	jmp	#LR__1511
12c54     13 13 02 F6 | 	mov	arg01, local01
12c58     40 8B B1 FD | 	call	#__system____builtin_atof
12c5c     FD 12 02 F6 | 	mov	arg01, result1
12c60     00 14 06 F6 | 	mov	arg02, #0
12c64     EC 87 B1 FD | 	call	#__system___float_tointeger
12c68     FD 26 02 F6 | 	mov	local01, result1
12c6c                 | LR__1511
12c6c     37 00 00 FF 
12c70     60 E4 05 F1 | 	add	objptr, ##28256
12c74     F2 26 62 FC | 	wrlong	local01, objptr
12c78     37 00 00 FF 
12c7c     60 E4 85 F1 | 	sub	objptr, ##28256
12c80     02 26 66 F0 | 	shl	local01, #2
12c84     13 13 02 F6 | 	mov	arg01, local01
12c88     64 36 B1 FD | 	call	#_hg010b_spin2_setfontfamily
12c8c     A7 F0 03 F6 | 	mov	ptra, fp
12c90     B2 00 A0 FD | 	call	#popregs_
12c94                 | _do_font_ret
12c94     2D 00 64 FD | 	ret
12c98                 | 
12c98                 | ' 
12c98                 | ' '-------------------- for
12c98                 | ' 
12c98                 | ' sub do_for()
12c98                 | _do_for
12c98     01 4A 05 F6 | 	mov	COUNT_, #1
12c9c     A8 00 A0 FD | 	call	#pushregs_
12ca0     10 F0 07 F1 | 	add	ptra, #16
12ca4     50 00 00 FF 
12ca8     50 E5 05 F1 | 	add	objptr, ##41296
12cac     F2 12 02 FB | 	rdlong	arg01, objptr
12cb0     01 12 06 F1 | 	add	arg01, #1
12cb4     F2 12 62 FC | 	wrlong	arg01, objptr
12cb8     50 00 00 FF 
12cbc     50 E5 85 F1 | 	sub	objptr, ##41296
12cc0     5C AB BF FD | 	call	#_pop
12cc4     A7 FA 61 FC | 	wrlong	result1, fp
12cc8     04 4E 05 F1 | 	add	fp, #4
12ccc     A7 FC 61 FC | 	wrlong	result2, fp
12cd0     04 4E 05 F1 | 	add	fp, #4
12cd4     A7 FE 61 FC | 	wrlong	result3, fp
12cd8     08 4E 85 F1 | 	sub	fp, #8
12cdc     50 00 00 FF 
12ce0     50 E5 05 F1 | 	add	objptr, ##41296
12ce4     F2 12 02 FB | 	rdlong	arg01, objptr
12ce8     09 27 02 F6 | 	mov	local01, arg01
12cec     02 26 66 F0 | 	shl	local01, #2
12cf0     09 27 02 F1 | 	add	local01, arg01
12cf4     02 26 66 F0 | 	shl	local01, #2
12cf8     06 00 00 FF 
12cfc     98 E4 85 F1 | 	sub	objptr, ##3224
12d00     F2 26 02 F1 | 	add	local01, objptr
12d04     A7 12 02 FB | 	rdlong	arg01, fp
12d08     08 26 06 F1 | 	add	local01, #8
12d0c     13 13 62 FC | 	wrlong	arg01, local01
12d10     4A 00 00 FF 
12d14     B8 E4 85 F1 | 	sub	objptr, ##38072
12d18     04 AB BF FD | 	call	#_pop
12d1c     A7 FA 61 FC | 	wrlong	result1, fp
12d20     04 4E 05 F1 | 	add	fp, #4
12d24     A7 FC 61 FC | 	wrlong	result2, fp
12d28     04 4E 05 F1 | 	add	fp, #4
12d2c     A7 FE 61 FC | 	wrlong	result3, fp
12d30     08 4E 85 F1 | 	sub	fp, #8
12d34     50 00 00 FF 
12d38     50 E5 05 F1 | 	add	objptr, ##41296
12d3c     F2 12 02 FB | 	rdlong	arg01, objptr
12d40     09 27 02 F6 | 	mov	local01, arg01
12d44     02 26 66 F0 | 	shl	local01, #2
12d48     09 27 02 F1 | 	add	local01, arg01
12d4c     02 26 66 F0 | 	shl	local01, #2
12d50     06 00 00 FF 
12d54     98 E4 85 F1 | 	sub	objptr, ##3224
12d58     F2 26 02 F1 | 	add	local01, objptr
12d5c     A7 12 02 F6 | 	mov	arg01, fp
12d60     4A 00 00 FF 
12d64     B8 E4 85 F1 | 	sub	objptr, ##38072
12d68     98 AC BF FD | 	call	#_converttoint
12d6c     FD 12 02 F6 | 	mov	arg01, result1
12d70     0C 26 06 F1 | 	add	local01, #12
12d74     13 13 62 FC | 	wrlong	arg01, local01
12d78     A4 AA BF FD | 	call	#_pop
12d7c     A7 FA 61 FC | 	wrlong	result1, fp
12d80     04 4E 05 F1 | 	add	fp, #4
12d84     A7 FC 61 FC | 	wrlong	result2, fp
12d88     04 4E 05 F1 | 	add	fp, #4
12d8c     A7 FE 61 FC | 	wrlong	result3, fp
12d90     08 4E 85 F1 | 	sub	fp, #8
12d94     50 00 00 FF 
12d98     50 E5 05 F1 | 	add	objptr, ##41296
12d9c     F2 12 02 FB | 	rdlong	arg01, objptr
12da0     09 27 02 F6 | 	mov	local01, arg01
12da4     02 26 66 F0 | 	shl	local01, #2
12da8     09 27 02 F1 | 	add	local01, arg01
12dac     02 26 66 F0 | 	shl	local01, #2
12db0     06 00 00 FF 
12db4     98 E4 85 F1 | 	sub	objptr, ##3224
12db8     F2 26 02 F1 | 	add	local01, objptr
12dbc     A7 12 02 F6 | 	mov	arg01, fp
12dc0     4A 00 00 FF 
12dc4     B8 E4 85 F1 | 	sub	objptr, ##38072
12dc8     38 AC BF FD | 	call	#_converttoint
12dcc     10 26 06 F1 | 	add	local01, #16
12dd0     13 FB 61 FC | 	wrlong	result1, local01
12dd4                 | ' fortop+=1
12dd4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12dd4                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12dd4                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12dd4                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12dd4     4A 00 00 FF 
12dd8     A0 E4 05 F1 | 	add	objptr, ##38048
12ddc     F2 12 02 FB | 	rdlong	arg01, objptr
12de0     09 27 02 F6 | 	mov	local01, arg01
12de4     01 26 66 F0 | 	shl	local01, #1
12de8     09 27 02 F1 | 	add	local01, arg01
12dec     02 26 66 F0 | 	shl	local01, #2
12df0     03 00 00 FF 
12df4     04 E4 85 F1 | 	sub	objptr, ##1540
12df8     F2 26 02 F1 | 	add	local01, objptr
12dfc     08 26 06 F1 | 	add	local01, #8
12e00     13 27 02 FB | 	rdlong	local01, local01
12e04     FE 27 0E F2 | 	cmp	local01, #510 wz
12e08     47 00 00 FF 
12e0c     9C E4 85 F1 | 	sub	objptr, ##36508
12e10     70 00 90 5D |  if_ne	jmp	#LR__1520
12e14     50 00 00 FF 
12e18     50 E5 05 F1 | 	add	objptr, ##41296
12e1c     F2 12 02 FB | 	rdlong	arg01, objptr
12e20     09 27 02 F6 | 	mov	local01, arg01
12e24     02 26 66 F0 | 	shl	local01, #2
12e28     09 27 02 F1 | 	add	local01, arg01
12e2c     02 26 66 F0 | 	shl	local01, #2
12e30     06 00 00 FF 
12e34     98 E4 85 F1 | 	sub	objptr, ##3224
12e38     F2 26 02 F1 | 	add	local01, objptr
12e3c     06 00 00 FF 
12e40     20 E4 05 F1 | 	add	objptr, ##3104
12e44     F2 12 02 FB | 	rdlong	arg01, objptr
12e48     13 13 62 FC | 	wrlong	arg01, local01
12e4c     78 E4 05 F1 | 	add	objptr, #120
12e50     F2 12 02 FB | 	rdlong	arg01, objptr
12e54     09 27 02 F6 | 	mov	local01, arg01
12e58     02 26 66 F0 | 	shl	local01, #2
12e5c     09 27 02 F1 | 	add	local01, arg01
12e60     02 26 66 F0 | 	shl	local01, #2
12e64     06 00 00 FF 
12e68     98 E4 85 F1 | 	sub	objptr, ##3224
12e6c     F2 26 02 F1 | 	add	local01, objptr
12e70     04 26 06 F1 | 	add	local01, #4
12e74     13 01 68 FC | 	wrlong	#0, local01
12e78     4A 00 00 FF 
12e7c     B8 E4 85 F1 | 	sub	objptr, ##38072
12e80     78 00 90 FD | 	jmp	#LR__1521
12e84                 | LR__1520
12e84     50 00 00 FF 
12e88     50 E5 05 F1 | 	add	objptr, ##41296
12e8c     F2 12 02 FB | 	rdlong	arg01, objptr
12e90     09 27 02 F6 | 	mov	local01, arg01
12e94     02 26 66 F0 | 	shl	local01, #2
12e98     09 27 02 F1 | 	add	local01, arg01
12e9c     02 26 66 F0 | 	shl	local01, #2
12ea0     06 00 00 FF 
12ea4     98 E4 85 F1 | 	sub	objptr, ##3224
12ea8     F2 26 02 F1 | 	add	local01, objptr
12eac     06 00 00 FF 
12eb0     28 E4 05 F1 | 	add	objptr, ##3112
12eb4     F2 12 02 FB | 	rdlong	arg01, objptr
12eb8     13 13 62 FC | 	wrlong	arg01, local01
12ebc     70 E4 05 F1 | 	add	objptr, #112
12ec0     F2 12 02 FB | 	rdlong	arg01, objptr
12ec4     09 27 02 F6 | 	mov	local01, arg01
12ec8     02 26 66 F0 | 	shl	local01, #2
12ecc     09 27 02 F1 | 	add	local01, arg01
12ed0     02 26 66 F0 | 	shl	local01, #2
12ed4     06 00 00 FF 
12ed8     98 E4 85 F1 | 	sub	objptr, ##3224
12edc     F2 26 02 F1 | 	add	local01, objptr
12ee0     18 E4 85 F1 | 	sub	objptr, #24
12ee4     F2 12 02 FB | 	rdlong	arg01, objptr
12ee8     4A 00 00 FF 
12eec     A0 E4 85 F1 | 	sub	objptr, ##38048
12ef0     01 12 06 F1 | 	add	arg01, #1
12ef4     04 26 06 F1 | 	add	local01, #4
12ef8     13 13 62 FC | 	wrlong	arg01, local01
12efc                 | LR__1521
12efc     A7 F0 03 F6 | 	mov	ptra, fp
12f00     B2 00 A0 FD | 	call	#popregs_
12f04                 | _do_for_ret
12f04     2D 00 64 FD | 	ret
12f08                 | 
12f08                 | ' 
12f08                 | ' '-------------------- frame
12f08                 | ' 
12f08                 | ' sub do_frame
12f08                 | _do_frame
12f08     03 4A 05 F6 | 	mov	COUNT_, #3
12f0c     A8 00 A0 FD | 	call	#pushregs_
12f10     30 F0 07 F1 | 	add	ptra, #48
12f14     08 A9 BF FD | 	call	#_pop
12f18     FD 16 02 F6 | 	mov	arg03, result1
12f1c     FE 14 02 F6 | 	mov	arg02, result2
12f20     FF 1A 02 F6 | 	mov	arg05, result3
12f24     24 4E 05 F1 | 	add	fp, #36
12f28     A7 16 62 FC | 	wrlong	arg03, fp
12f2c     04 4E 05 F1 | 	add	fp, #4
12f30     A7 14 62 FC | 	wrlong	arg02, fp
12f34     04 4E 05 F1 | 	add	fp, #4
12f38     A7 1A 62 FC | 	wrlong	arg05, fp
12f3c     2C 4E 85 F1 | 	sub	fp, #44
12f40     DC A8 BF FD | 	call	#_pop
12f44     FD 16 02 F6 | 	mov	arg03, result1
12f48     FE 14 02 F6 | 	mov	arg02, result2
12f4c     FF 1A 02 F6 | 	mov	arg05, result3
12f50     18 4E 05 F1 | 	add	fp, #24
12f54     A7 16 62 FC | 	wrlong	arg03, fp
12f58     04 4E 05 F1 | 	add	fp, #4
12f5c     A7 14 62 FC | 	wrlong	arg02, fp
12f60     04 4E 05 F1 | 	add	fp, #4
12f64     A7 1A 62 FC | 	wrlong	arg05, fp
12f68     20 4E 85 F1 | 	sub	fp, #32
12f6c     B0 A8 BF FD | 	call	#_pop
12f70     FD 16 02 F6 | 	mov	arg03, result1
12f74     FE 14 02 F6 | 	mov	arg02, result2
12f78     FF 1A 02 F6 | 	mov	arg05, result3
12f7c     0C 4E 05 F1 | 	add	fp, #12
12f80     A7 16 62 FC | 	wrlong	arg03, fp
12f84     04 4E 05 F1 | 	add	fp, #4
12f88     A7 14 62 FC | 	wrlong	arg02, fp
12f8c     04 4E 05 F1 | 	add	fp, #4
12f90     A7 1A 62 FC | 	wrlong	arg05, fp
12f94     14 4E 85 F1 | 	sub	fp, #20
12f98     84 A8 BF FD | 	call	#_pop
12f9c     FF 16 02 F6 | 	mov	arg03, result3
12fa0     A7 FA 61 FC | 	wrlong	result1, fp
12fa4     04 4E 05 F1 | 	add	fp, #4
12fa8     A7 FC 61 FC | 	wrlong	result2, fp
12fac     04 4E 05 F1 | 	add	fp, #4
12fb0     A7 16 62 FC | 	wrlong	arg03, fp
12fb4     08 4E 85 F1 | 	sub	fp, #8
12fb8     A7 12 02 F6 | 	mov	arg01, fp
12fbc     44 AA BF FD | 	call	#_converttoint
12fc0     FD 26 02 F6 | 	mov	local01, result1
12fc4     0C 4E 05 F1 | 	add	fp, #12
12fc8     A7 12 02 F6 | 	mov	arg01, fp
12fcc     0C 4E 85 F1 | 	sub	fp, #12
12fd0     30 AA BF FD | 	call	#_converttoint
12fd4     FD 28 02 F6 | 	mov	local02, result1
12fd8     18 4E 05 F1 | 	add	fp, #24
12fdc     A7 12 02 F6 | 	mov	arg01, fp
12fe0     18 4E 85 F1 | 	sub	fp, #24
12fe4     1C AA BF FD | 	call	#_converttoint
12fe8     FD 2A 02 F6 | 	mov	local03, result1
12fec     24 4E 05 F1 | 	add	fp, #36
12ff0     A7 12 02 F6 | 	mov	arg01, fp
12ff4     24 4E 85 F1 | 	sub	fp, #36
12ff8     08 AA BF FD | 	call	#_converttoint
12ffc     FD 18 02 F6 | 	mov	arg04, result1
13000     37 00 00 FF 
13004     48 E4 05 F1 | 	add	objptr, ##28232
13008     F2 1A 02 FB | 	rdlong	arg05, objptr
1300c     37 00 00 FF 
13010     48 E4 85 F1 | 	sub	objptr, ##28232
13014     13 13 02 F6 | 	mov	arg01, local01
13018     14 15 02 F6 | 	mov	arg02, local02
1301c     15 17 02 F6 | 	mov	arg03, local03
13020     D4 30 B1 FD | 	call	#_hg010b_spin2_frame
13024     A7 F0 03 F6 | 	mov	ptra, fp
13028     B2 00 A0 FD | 	call	#popregs_
1302c                 | _do_frame_ret
1302c     2D 00 64 FD | 	ret
13030                 | 
13030                 | ' 
13030                 | ' '-------------------- framebuf
13030                 | ' 
13030                 | ' sub do_framebuf
13030                 | _do_framebuf
13030     00 4A 05 F6 | 	mov	COUNT_, #0
13034     A8 00 A0 FD | 	call	#pushregs_
13038     0C F0 07 F1 | 	add	ptra, #12
1303c     08 4E 05 F1 | 	add	fp, #8
13040     A7 3A 68 FC | 	wrlong	#29, fp
13044     F2 12 02 FB | 	rdlong	arg01, objptr
13048     08 4E 85 F1 | 	sub	fp, #8
1304c     A7 12 62 FC | 	wrlong	arg01, fp
13050     A7 12 02 F6 | 	mov	arg01, fp
13054     60 A8 BF FD | 	call	#_push
13058     A7 F0 03 F6 | 	mov	ptra, fp
1305c     B2 00 A0 FD | 	call	#popregs_
13060                 | _do_framebuf_ret
13060     2D 00 64 FD | 	ret
13064                 | 
13064                 | ' '-------------------- fre
13064                 | ' 
13064                 | ' sub do_fre
13064                 | _do_fre
13064     01 4A 05 F6 | 	mov	COUNT_, #1
13068     A8 00 A0 FD | 	call	#pushregs_
1306c     0C F0 07 F1 | 	add	ptra, #12
13070     52 00 00 FF 
13074     F0 E4 05 F1 | 	add	objptr, ##42224
13078     F2 12 02 FB | 	rdlong	arg01, objptr
1307c     0F 00 00 FF 
13080     74 E4 85 F1 | 	sub	objptr, ##7796
13084     F2 26 02 FB | 	rdlong	local01, objptr
13088     13 13 82 F1 | 	sub	arg01, local01
1308c     0F 00 00 FF 
13090     EC E4 05 F1 | 	add	objptr, ##7916
13094     F2 12 62 FC | 	wrlong	arg01, objptr
13098     08 4E 05 F1 | 	add	fp, #8
1309c     A7 3A 68 FC | 	wrlong	#29, fp
130a0     08 4E 85 F1 | 	sub	fp, #8
130a4     F2 26 02 FB | 	rdlong	local01, objptr
130a8     52 00 00 FF 
130ac     68 E5 85 F1 | 	sub	objptr, ##42344
130b0     A7 26 62 FC | 	wrlong	local01, fp
130b4     A7 12 02 F6 | 	mov	arg01, fp
130b8     FC A7 BF FD | 	call	#_push
130bc     A7 F0 03 F6 | 	mov	ptra, fp
130c0     B2 00 A0 FD | 	call	#popregs_
130c4                 | _do_fre_ret
130c4     2D 00 64 FD | 	ret
130c8                 | 
130c8                 | ' 
130c8                 | ' '-------------------- get
130c8                 | ' 
130c8                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
130c8                 | _do_get
130c8     09 4A 05 F6 | 	mov	COUNT_, #9
130cc     A8 00 A0 FD | 	call	#pushregs_
130d0     40 F0 07 F1 | 	add	ptra, #64
130d4     4A 00 00 FF 
130d8     A0 E4 05 F1 | 	add	objptr, ##38048
130dc     F2 1A 02 FB | 	rdlong	arg05, objptr
130e0     0D 19 02 F6 | 	mov	arg04, arg05
130e4     01 18 66 F0 | 	shl	arg04, #1
130e8     0D 19 02 F1 | 	add	arg04, arg05
130ec     02 18 66 F0 | 	shl	arg04, #2
130f0     03 00 00 FF 
130f4     04 E4 85 F1 | 	sub	objptr, ##1540
130f8     F2 18 02 F1 | 	add	arg04, objptr
130fc     0C 1B 02 FB | 	rdlong	arg05, arg04
13100     A7 1A 62 FC | 	wrlong	arg05, fp
13104                 | ' 
13104                 | ' numpar=compiledline(lineptr_e).result.uresult
13104                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
13104     04 1A 0E F2 | 	cmp	arg05, #4 wz
13108     47 00 00 FF 
1310c     9C E4 85 F1 | 	sub	objptr, ##36508
13110     48 00 90 5D |  if_ne	jmp	#LR__1530
13114     08 A7 BF FD | 	call	#_pop
13118     FF 1A 02 F6 | 	mov	arg05, result3
1311c     1C 4E 05 F1 | 	add	fp, #28
13120     A7 FA 61 FC | 	wrlong	result1, fp
13124     04 4E 05 F1 | 	add	fp, #4
13128     A7 FC 61 FC | 	wrlong	result2, fp
1312c     04 4E 05 F1 | 	add	fp, #4
13130     A7 1A 62 FC | 	wrlong	arg05, fp
13134     08 4E 85 F1 | 	sub	fp, #8
13138     A7 12 02 F6 | 	mov	arg01, fp
1313c     1C 4E 85 F1 | 	sub	fp, #28
13140     C0 A8 BF FD | 	call	#_converttoint
13144     52 00 00 FF 
13148     64 E5 05 F1 | 	add	objptr, ##42340
1314c     F2 FA 61 FC | 	wrlong	result1, objptr
13150     52 00 00 FF 
13154     64 E5 85 F1 | 	sub	objptr, ##42340
13158     18 00 90 FD | 	jmp	#LR__1531
1315c                 | LR__1530
1315c     52 00 00 FF 
13160     64 E5 05 F1 | 	add	objptr, ##42340
13164     FF FF FF FF 
13168     F2 FE 6B FC | 	wrlong	##-1, objptr
1316c     52 00 00 FF 
13170     64 E5 85 F1 | 	sub	objptr, ##42340
13174                 | LR__1531
13174                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
13174     A7 16 02 FB | 	rdlong	arg03, fp
13178     03 16 56 F2 | 	cmps	arg03, #3 wc
1317c     40 00 90 CD |  if_b	jmp	#LR__1532
13180     9C A6 BF FD | 	call	#_pop
13184     FF 16 02 F6 | 	mov	arg03, result3
13188     1C 4E 05 F1 | 	add	fp, #28
1318c     A7 FA 61 FC | 	wrlong	result1, fp
13190     04 4E 05 F1 | 	add	fp, #4
13194     A7 FC 61 FC | 	wrlong	result2, fp
13198     04 4E 05 F1 | 	add	fp, #4
1319c     A7 16 62 FC | 	wrlong	arg03, fp
131a0     08 4E 85 F1 | 	sub	fp, #8
131a4     A7 12 02 F6 | 	mov	arg01, fp
131a8     1C 4E 85 F1 | 	sub	fp, #28
131ac     54 A8 BF FD | 	call	#_converttoint
131b0     08 4E 05 F1 | 	add	fp, #8
131b4     A7 FA 61 FC | 	wrlong	result1, fp
131b8     08 4E 85 F1 | 	sub	fp, #8
131bc     0C 00 90 FD | 	jmp	#LR__1533
131c0                 | LR__1532
131c0     08 4E 05 F1 | 	add	fp, #8
131c4     A7 02 68 FC | 	wrlong	#1, fp
131c8     08 4E 85 F1 | 	sub	fp, #8
131cc                 | LR__1533
131cc                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
131cc     A7 16 02 FB | 	rdlong	arg03, fp
131d0     02 16 56 F2 | 	cmps	arg03, #2 wc
131d4     3C 00 90 CD |  if_b	jmp	#LR__1534
131d8     44 A6 BF FD | 	call	#_pop
131dc     FF 16 02 F6 | 	mov	arg03, result3
131e0     1C 4E 05 F1 | 	add	fp, #28
131e4     A7 FA 61 FC | 	wrlong	result1, fp
131e8     04 4E 05 F1 | 	add	fp, #4
131ec     A7 FC 61 FC | 	wrlong	result2, fp
131f0     04 4E 05 F1 | 	add	fp, #4
131f4     A7 16 62 FC | 	wrlong	arg03, fp
131f8     08 4E 85 F1 | 	sub	fp, #8
131fc     A7 12 02 F6 | 	mov	arg01, fp
13200     1C 4E 85 F1 | 	sub	fp, #28
13204     FC A7 BF FD | 	call	#_converttoint
13208     0C 4E 05 F1 | 	add	fp, #12
1320c     A7 FA 61 FC | 	wrlong	result1, fp
13210     0C 4E 85 F1 | 	sub	fp, #12
13214                 | LR__1534
13214     08 A6 BF FD | 	call	#_pop
13218     FF 16 02 F6 | 	mov	arg03, result3
1321c     1C 4E 05 F1 | 	add	fp, #28
13220     A7 FA 61 FC | 	wrlong	result1, fp
13224     04 4E 05 F1 | 	add	fp, #4
13228     A7 FC 61 FC | 	wrlong	result2, fp
1322c     04 4E 05 F1 | 	add	fp, #4
13230     A7 16 62 FC | 	wrlong	arg03, fp
13234     08 4E 85 F1 | 	sub	fp, #8
13238     A7 12 02 F6 | 	mov	arg01, fp
1323c     1C 4E 85 F1 | 	sub	fp, #28
13240     C0 A7 BF FD | 	call	#_converttoint
13244     04 4E 05 F1 | 	add	fp, #4
13248     A7 FA 61 FC | 	wrlong	result1, fp
1324c     10 4E 05 F1 | 	add	fp, #16
13250     A7 16 02 FB | 	rdlong	arg03, fp
13254     14 4E 85 F1 | 	sub	fp, #20
13258     02 16 66 F0 | 	shl	arg03, #2
1325c     50 00 00 FF 
13260     E4 E4 05 F1 | 	add	objptr, ##41188
13264     F2 26 02 F6 | 	mov	local01, objptr
13268     F2 16 02 F1 | 	add	arg03, objptr
1326c     0B 01 68 FC | 	wrlong	#0, arg03
13270                 | ' t1=pop() : channel=converttoint(t1)
13270                 | ' getres(j)=0
13270                 | ' if pos>=0 then
13270     02 00 00 FF 
13274     80 E4 05 F1 | 	add	objptr, ##1152
13278     F2 28 02 FB | 	rdlong	local02, objptr
1327c     52 00 00 FF 
13280     64 E5 85 F1 | 	sub	objptr, ##42340
13284     00 28 56 F2 | 	cmps	local02, #0 wc
13288     F0 01 90 CD |  if_b	jmp	#LR__1541
1328c                 | '   for i=0 to  amount/1024
1328c     10 4E 05 F1 | 	add	fp, #16
13290     A7 00 68 FC | 	wrlong	#0, fp
13294     08 4E 85 F1 | 	sub	fp, #8
13298     A7 2A 02 FB | 	rdlong	local03, fp
1329c     08 4E 85 F1 | 	sub	fp, #8
132a0     15 2D 52 F6 | 	abs	local04, local03 wc
132a4     0A 2C 46 F0 | 	shr	local04, #10
132a8     16 2D 82 F6 | 	negc	local04, local04
132ac     01 2C 06 F1 | 	add	local04, #1
132b0                 | LR__1535
132b0     10 4E 05 F1 | 	add	fp, #16
132b4     A7 2A 02 FB | 	rdlong	local03, fp
132b8     10 4E 85 F1 | 	sub	fp, #16
132bc     16 2B 52 F2 | 	cmps	local03, local04 wc
132c0     9C 03 90 3D |  if_ae	jmp	#LR__1549
132c4                 | '     get #channel,pos+1,block(0),amount,r
132c4     04 4E 05 F1 | 	add	fp, #4
132c8     A7 12 02 FB | 	rdlong	arg01, fp
132cc     52 00 00 FF 
132d0     64 E5 05 F1 | 	add	objptr, ##42340
132d4     F2 14 02 FB | 	rdlong	arg02, objptr
132d8     01 14 06 F1 | 	add	arg02, #1
132dc     04 00 00 FF 
132e0     90 E4 85 F1 | 	sub	objptr, ##2192
132e4     F2 16 02 F6 | 	mov	arg03, objptr
132e8     4E 00 00 FF 
132ec     D4 E4 85 F1 | 	sub	objptr, ##40148
132f0     04 4E 05 F1 | 	add	fp, #4
132f4     A7 18 02 FB | 	rdlong	arg04, fp
132f8     08 4E 85 F1 | 	sub	fp, #8
132fc     01 1A 06 F6 | 	mov	arg05, #1
13300     80 5C B1 FD | 	call	#__system___basic_get
13304     18 4E 05 F1 | 	add	fp, #24
13308     A7 FA 61 FC | 	wrlong	result1, fp
1330c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1330c     0C 4E 85 F1 | 	sub	fp, #12
13310     A7 28 02 FB | 	rdlong	local02, fp
13314     0C 4E 85 F1 | 	sub	fp, #12
13318     00 04 00 FF 
1331c     00 28 56 F2 | 	cmps	local02, ##524288 wc
13320     7C 00 90 3D |  if_ae	jmp	#LR__1537
13324     14 4E 05 F1 | 	add	fp, #20
13328     A7 00 68 FC | 	wrlong	#0, fp
1332c     04 4E 05 F1 | 	add	fp, #4
13330     A7 2E 02 FB | 	rdlong	local05, fp
13334     18 4E 85 F1 | 	sub	fp, #24
13338                 | LR__1536
13338     14 4E 05 F1 | 	add	fp, #20
1333c     A7 28 02 FB | 	rdlong	local02, fp
13340     14 4E 85 F1 | 	sub	fp, #20
13344     17 29 52 F2 | 	cmps	local02, local05 wc
13348     D8 00 90 3D |  if_ae	jmp	#LR__1540
1334c     0C 4E 05 F1 | 	add	fp, #12
13350     A7 12 02 FB | 	rdlong	arg01, fp
13354     04 4E 05 F1 | 	add	fp, #4
13358     A7 2A 02 FB | 	rdlong	local03, fp
1335c     0A 2A 66 F0 | 	shl	local03, #10
13360     15 13 02 F1 | 	add	arg01, local03
13364     04 4E 05 F1 | 	add	fp, #4
13368     A7 2A 02 FB | 	rdlong	local03, fp
1336c     15 13 02 F1 | 	add	arg01, local03
13370     4E 00 00 FF 
13374     D4 E4 05 F1 | 	add	objptr, ##40148
13378     F2 2A 02 F1 | 	add	local03, objptr
1337c     15 15 C2 FA | 	rdbyte	arg02, local03
13380     09 15 42 FC | 	wrbyte	arg02, arg01
13384     4E 00 00 FF 
13388     D4 E4 85 F1 | 	sub	objptr, ##40148
1338c     A7 2A 02 FB | 	rdlong	local03, fp
13390     01 2A 06 F1 | 	add	local03, #1
13394     A7 2A 62 FC | 	wrlong	local03, fp
13398     14 4E 85 F1 | 	sub	fp, #20
1339c     98 FF 9F FD | 	jmp	#LR__1536
133a0                 | LR__1537
133a0     14 4E 05 F1 | 	add	fp, #20
133a4     A7 00 68 FC | 	wrlong	#0, fp
133a8     04 4E 05 F1 | 	add	fp, #4
133ac     A7 30 02 FB | 	rdlong	local06, fp
133b0     18 4E 85 F1 | 	sub	fp, #24
133b4                 | LR__1538
133b4     14 4E 05 F1 | 	add	fp, #20
133b8     A7 28 02 FB | 	rdlong	local02, fp
133bc     14 4E 85 F1 | 	sub	fp, #20
133c0     18 29 52 F2 | 	cmps	local02, local06 wc
133c4     5C 00 90 3D |  if_ae	jmp	#LR__1539
133c8     0C 4E 05 F1 | 	add	fp, #12
133cc     A7 12 02 FB | 	rdlong	arg01, fp
133d0     04 4E 05 F1 | 	add	fp, #4
133d4     A7 2E 02 FB | 	rdlong	local05, fp
133d8     0A 2E 66 F0 | 	shl	local05, #10
133dc     17 13 02 F1 | 	add	arg01, local05
133e0     04 4E 05 F1 | 	add	fp, #4
133e4     A7 2E 02 FB | 	rdlong	local05, fp
133e8     17 13 02 F1 | 	add	arg01, local05
133ec     14 4E 85 F1 | 	sub	fp, #20
133f0     4E 00 00 FF 
133f4     D4 E4 05 F1 | 	add	objptr, ##40148
133f8     F2 2E 02 F1 | 	add	local05, objptr
133fc     17 15 C2 FA | 	rdbyte	arg02, local05
13400     4E 00 00 FF 
13404     D4 E4 85 F1 | 	sub	objptr, ##40148
13408     E0 14 B1 FD | 	call	#_pspoke
1340c     14 4E 05 F1 | 	add	fp, #20
13410     A7 2E 02 FB | 	rdlong	local05, fp
13414     01 2E 06 F1 | 	add	local05, #1
13418     A7 2E 62 FC | 	wrlong	local05, fp
1341c     14 4E 85 F1 | 	sub	fp, #20
13420     90 FF 9F FD | 	jmp	#LR__1538
13424                 | LR__1539
13424                 | LR__1540
13424     14 4E 05 F1 | 	add	fp, #20
13428     A7 30 02 FB | 	rdlong	local06, fp
1342c     18 2B 02 F6 | 	mov	local03, local06
13430     02 2A 66 F0 | 	shl	local03, #2
13434     50 00 00 FF 
13438     E4 E4 05 F1 | 	add	objptr, ##41188
1343c     F2 2A 02 F1 | 	add	local03, objptr
13440     02 30 66 F0 | 	shl	local06, #2
13444     F2 30 02 F1 | 	add	local06, objptr
13448     18 31 02 FB | 	rdlong	local06, local06
1344c     04 4E 05 F1 | 	add	fp, #4
13450     A7 2E 02 FB | 	rdlong	local05, fp
13454     17 31 02 F1 | 	add	local06, local05
13458     15 31 62 FC | 	wrlong	local06, local03
1345c     08 4E 85 F1 | 	sub	fp, #8
13460     A7 30 02 FB | 	rdlong	local06, fp
13464     01 30 06 F1 | 	add	local06, #1
13468     A7 30 62 FC | 	wrlong	local06, fp
1346c     10 4E 85 F1 | 	sub	fp, #16
13470     50 00 00 FF 
13474     E4 E4 85 F1 | 	sub	objptr, ##41188
13478     34 FE 9F FD | 	jmp	#LR__1535
1347c                 | LR__1541
1347c                 | '   for i=0 to  amount/1024
1347c     10 4E 05 F1 | 	add	fp, #16
13480     A7 00 68 FC | 	wrlong	#0, fp
13484     08 4E 85 F1 | 	sub	fp, #8
13488     A7 2A 02 FB | 	rdlong	local03, fp
1348c     08 4E 85 F1 | 	sub	fp, #8
13490     15 33 52 F6 | 	abs	local07, local03 wc
13494     0A 32 46 F0 | 	shr	local07, #10
13498     19 33 82 F6 | 	negc	local07, local07
1349c     01 32 06 F1 | 	add	local07, #1
134a0                 | LR__1542
134a0     10 4E 05 F1 | 	add	fp, #16
134a4     A7 2A 02 FB | 	rdlong	local03, fp
134a8     10 4E 85 F1 | 	sub	fp, #16
134ac     19 2B 52 F2 | 	cmps	local03, local07 wc
134b0     AC 01 90 3D |  if_ae	jmp	#LR__1548
134b4                 | '     get #channel,,block(0),amount,r
134b4     04 4E 05 F1 | 	add	fp, #4
134b8     A7 12 02 FB | 	rdlong	arg01, fp
134bc     4E 00 00 FF 
134c0     D4 E4 05 F1 | 	add	objptr, ##40148
134c4     F2 16 02 F6 | 	mov	arg03, objptr
134c8     4E 00 00 FF 
134cc     D4 E4 85 F1 | 	sub	objptr, ##40148
134d0     04 4E 05 F1 | 	add	fp, #4
134d4     A7 18 02 FB | 	rdlong	arg04, fp
134d8     08 4E 85 F1 | 	sub	fp, #8
134dc     00 14 06 F6 | 	mov	arg02, #0
134e0     01 1A 06 F6 | 	mov	arg05, #1
134e4     9C 5A B1 FD | 	call	#__system___basic_get
134e8     18 4E 05 F1 | 	add	fp, #24
134ec     A7 FA 61 FC | 	wrlong	result1, fp
134f0                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
134f0     0C 4E 85 F1 | 	sub	fp, #12
134f4     A7 28 02 FB | 	rdlong	local02, fp
134f8     0C 4E 85 F1 | 	sub	fp, #12
134fc     00 04 00 FF 
13500     00 28 56 F2 | 	cmps	local02, ##524288 wc
13504     7C 00 90 3D |  if_ae	jmp	#LR__1544
13508     14 4E 05 F1 | 	add	fp, #20
1350c     A7 00 68 FC | 	wrlong	#0, fp
13510     04 4E 05 F1 | 	add	fp, #4
13514     A7 34 02 FB | 	rdlong	local08, fp
13518     18 4E 85 F1 | 	sub	fp, #24
1351c                 | LR__1543
1351c     14 4E 05 F1 | 	add	fp, #20
13520     A7 28 02 FB | 	rdlong	local02, fp
13524     14 4E 85 F1 | 	sub	fp, #20
13528     1A 29 52 F2 | 	cmps	local02, local08 wc
1352c     D8 00 90 3D |  if_ae	jmp	#LR__1547
13530     0C 4E 05 F1 | 	add	fp, #12
13534     A7 12 02 FB | 	rdlong	arg01, fp
13538     04 4E 05 F1 | 	add	fp, #4
1353c     A7 30 02 FB | 	rdlong	local06, fp
13540     0A 30 66 F0 | 	shl	local06, #10
13544     18 13 02 F1 | 	add	arg01, local06
13548     04 4E 05 F1 | 	add	fp, #4
1354c     A7 30 02 FB | 	rdlong	local06, fp
13550     18 13 02 F1 | 	add	arg01, local06
13554     4E 00 00 FF 
13558     D4 E4 05 F1 | 	add	objptr, ##40148
1355c     F2 30 02 F1 | 	add	local06, objptr
13560     18 15 C2 FA | 	rdbyte	arg02, local06
13564     09 15 42 FC | 	wrbyte	arg02, arg01
13568     4E 00 00 FF 
1356c     D4 E4 85 F1 | 	sub	objptr, ##40148
13570     A7 30 02 FB | 	rdlong	local06, fp
13574     01 30 06 F1 | 	add	local06, #1
13578     A7 30 62 FC | 	wrlong	local06, fp
1357c     14 4E 85 F1 | 	sub	fp, #20
13580     98 FF 9F FD | 	jmp	#LR__1543
13584                 | LR__1544
13584     14 4E 05 F1 | 	add	fp, #20
13588     A7 00 68 FC | 	wrlong	#0, fp
1358c     04 4E 05 F1 | 	add	fp, #4
13590     A7 36 02 FB | 	rdlong	local09, fp
13594     18 4E 85 F1 | 	sub	fp, #24
13598                 | LR__1545
13598     14 4E 05 F1 | 	add	fp, #20
1359c     A7 28 02 FB | 	rdlong	local02, fp
135a0     14 4E 85 F1 | 	sub	fp, #20
135a4     1B 29 52 F2 | 	cmps	local02, local09 wc
135a8     5C 00 90 3D |  if_ae	jmp	#LR__1546
135ac     0C 4E 05 F1 | 	add	fp, #12
135b0     A7 12 02 FB | 	rdlong	arg01, fp
135b4     04 4E 05 F1 | 	add	fp, #4
135b8     A7 34 02 FB | 	rdlong	local08, fp
135bc     0A 34 66 F0 | 	shl	local08, #10
135c0     1A 13 02 F1 | 	add	arg01, local08
135c4     04 4E 05 F1 | 	add	fp, #4
135c8     A7 34 02 FB | 	rdlong	local08, fp
135cc     1A 13 02 F1 | 	add	arg01, local08
135d0     14 4E 85 F1 | 	sub	fp, #20
135d4     4E 00 00 FF 
135d8     D4 E4 05 F1 | 	add	objptr, ##40148
135dc     F2 34 02 F1 | 	add	local08, objptr
135e0     1A 15 C2 FA | 	rdbyte	arg02, local08
135e4     4E 00 00 FF 
135e8     D4 E4 85 F1 | 	sub	objptr, ##40148
135ec     FC 12 B1 FD | 	call	#_pspoke
135f0     14 4E 05 F1 | 	add	fp, #20
135f4     A7 34 02 FB | 	rdlong	local08, fp
135f8     01 34 06 F1 | 	add	local08, #1
135fc     A7 34 62 FC | 	wrlong	local08, fp
13600     14 4E 85 F1 | 	sub	fp, #20
13604     90 FF 9F FD | 	jmp	#LR__1545
13608                 | LR__1546
13608                 | LR__1547
13608     14 4E 05 F1 | 	add	fp, #20
1360c     A7 36 02 FB | 	rdlong	local09, fp
13610     1B 31 02 F6 | 	mov	local06, local09
13614     02 30 66 F0 | 	shl	local06, #2
13618     50 00 00 FF 
1361c     E4 E4 05 F1 | 	add	objptr, ##41188
13620     F2 30 02 F1 | 	add	local06, objptr
13624     02 36 66 F0 | 	shl	local09, #2
13628     F2 36 02 F1 | 	add	local09, objptr
1362c     1B 37 02 FB | 	rdlong	local09, local09
13630     04 4E 05 F1 | 	add	fp, #4
13634     A7 34 02 FB | 	rdlong	local08, fp
13638     1A 37 02 F1 | 	add	local09, local08
1363c     18 37 62 FC | 	wrlong	local09, local06
13640     08 4E 85 F1 | 	sub	fp, #8
13644     A7 36 02 FB | 	rdlong	local09, fp
13648     01 36 06 F1 | 	add	local09, #1
1364c     A7 36 62 FC | 	wrlong	local09, fp
13650     10 4E 85 F1 | 	sub	fp, #16
13654     50 00 00 FF 
13658     E4 E4 85 F1 | 	sub	objptr, ##41188
1365c     40 FE 9F FD | 	jmp	#LR__1542
13660                 | LR__1548
13660                 | LR__1549
13660     A7 F0 03 F6 | 	mov	ptra, fp
13664     B2 00 A0 FD | 	call	#popregs_
13668                 | _do_get_ret
13668     2D 00 64 FD | 	ret
1366c                 | 
1366c                 | ' 
1366c                 | ' '-------------------- getcolor
1366c                 | ' 
1366c                 | ' sub do_getcolor
1366c                 | _do_getcolor
1366c     01 4A 05 F6 | 	mov	COUNT_, #1
13670     A8 00 A0 FD | 	call	#pushregs_
13674     10 F0 07 F1 | 	add	ptra, #16
13678     4A 00 00 FF 
1367c     A0 E4 05 F1 | 	add	objptr, ##38048
13680     F2 26 02 FB | 	rdlong	local01, objptr
13684     13 17 02 F6 | 	mov	arg03, local01
13688     01 16 66 F0 | 	shl	arg03, #1
1368c     13 17 02 F1 | 	add	arg03, local01
13690     02 16 66 F0 | 	shl	arg03, #2
13694     03 00 00 FF 
13698     04 E4 85 F1 | 	sub	objptr, ##1540
1369c     F2 16 02 F1 | 	add	arg03, objptr
136a0     0B 17 02 FB | 	rdlong	arg03, arg03
136a4     0C 4E 05 F1 | 	add	fp, #12
136a8     A7 16 62 FC | 	wrlong	arg03, fp
136ac                 | ' 
136ac                 | ' numpar=compiledline(lineptr_e).result.uresult
136ac                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
136ac     0C 4E 85 F1 | 	sub	fp, #12
136b0     02 16 16 F2 | 	cmp	arg03, #2 wc
136b4     47 00 00 FF 
136b8     9C E4 85 F1 | 	sub	objptr, ##36508
136bc     0C 4E 05 C1 |  if_b	add	fp, #12
136c0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
136c4     0C 4E 85 C1 |  if_b	sub	fp, #12
136c8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
136cc     00 12 06 F6 | 	mov	arg01, #0
136d0     E0 A6 B1 FD | 	call	#__system___getiolock_0620
136d4     FD 12 02 F6 | 	mov	arg01, result1
136d8     34 4A B1 FD | 	call	#__system___lockmem
136dc     B5 01 00 FF 
136e0     0B 15 06 F6 | 	mov	arg02, ##@LR__5841
136e4     00 12 06 F6 | 	mov	arg01, #0
136e8     00 16 06 F6 | 	mov	arg03, #0
136ec     18 57 B1 FD | 	call	#__system___basic_print_string
136f0     00 12 06 F6 | 	mov	arg01, #0
136f4     BC A6 B1 FD | 	call	#__system___getiolock_0620
136f8     FD 00 68 FC | 	wrlong	#0, result1
136fc     27 12 06 F6 | 	mov	arg01, #39
13700     00 14 06 F6 | 	mov	arg02, #0
13704     B4 0F B1 FD | 	call	#_printerror
13708     60 00 90 FD | 	jmp	#LR__1551
1370c                 | LR__1550
1370c     10 A1 BF FD | 	call	#_pop
13710     A7 FA 61 FC | 	wrlong	result1, fp
13714     04 4E 05 F1 | 	add	fp, #4
13718     A7 FC 61 FC | 	wrlong	result2, fp
1371c     04 4E 05 F1 | 	add	fp, #4
13720     A7 FE 61 FC | 	wrlong	result3, fp
13724     08 4E 85 F1 | 	sub	fp, #8
13728     A7 12 02 F6 | 	mov	arg01, fp
1372c     D4 A2 BF FD | 	call	#_converttoint
13730     FD 12 02 F6 | 	mov	arg01, result1
13734                 | ' 
13734                 | ' return long[palette_ptr+4*color]
13734     1C E4 05 F1 | 	add	objptr, #28
13738     F2 FA 01 FB | 	rdlong	result1, objptr
1373c     1C E4 85 F1 | 	sub	objptr, #28
13740     02 12 66 F0 | 	shl	arg01, #2
13744     09 FB 01 F1 | 	add	result1, arg01
13748     FD FA 01 FB | 	rdlong	result1, result1
1374c     08 FA C5 F0 | 	sar	result1, #8
13750     F8 FA 05 F4 | 	bitl	result1, #248
13754     A7 FA 61 FC | 	wrlong	result1, fp
13758     08 4E 05 F1 | 	add	fp, #8
1375c     A7 3A 68 FC | 	wrlong	#29, fp
13760     08 4E 85 F1 | 	sub	fp, #8
13764     A7 12 02 F6 | 	mov	arg01, fp
13768     4C A1 BF FD | 	call	#_push
1376c                 | LR__1551
1376c     A7 F0 03 F6 | 	mov	ptra, fp
13770     B2 00 A0 FD | 	call	#popregs_
13774                 | _do_getcolor_ret
13774     2D 00 64 FD | 	ret
13778                 | 
13778                 | ' 
13778                 | ' '-------------------- getenvsustain
13778                 | ' 
13778                 | ' sub do_getenvsustain
13778                 | _do_getenvsustain
13778     01 4A 05 F6 | 	mov	COUNT_, #1
1377c     A8 00 A0 FD | 	call	#pushregs_
13780     10 F0 07 F1 | 	add	ptra, #16
13784     4A 00 00 FF 
13788     A0 E4 05 F1 | 	add	objptr, ##38048
1378c     F2 26 02 FB | 	rdlong	local01, objptr
13790     13 17 02 F6 | 	mov	arg03, local01
13794     01 16 66 F0 | 	shl	arg03, #1
13798     13 17 02 F1 | 	add	arg03, local01
1379c     02 16 66 F0 | 	shl	arg03, #2
137a0     03 00 00 FF 
137a4     04 E4 85 F1 | 	sub	objptr, ##1540
137a8     F2 16 02 F1 | 	add	arg03, objptr
137ac     0B 17 02 FB | 	rdlong	arg03, arg03
137b0     0C 4E 05 F1 | 	add	fp, #12
137b4     A7 16 62 FC | 	wrlong	arg03, fp
137b8                 | ' 
137b8                 | ' numpar=compiledline(lineptr_e).result.uresult
137b8                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
137b8     0C 4E 85 F1 | 	sub	fp, #12
137bc     02 16 16 F2 | 	cmp	arg03, #2 wc
137c0     47 00 00 FF 
137c4     9C E4 85 F1 | 	sub	objptr, ##36508
137c8     0C 4E 05 C1 |  if_b	add	fp, #12
137cc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
137d0     0C 4E 85 C1 |  if_b	sub	fp, #12
137d4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
137d8     00 12 06 F6 | 	mov	arg01, #0
137dc     D4 A5 B1 FD | 	call	#__system___getiolock_0620
137e0     FD 12 02 F6 | 	mov	arg01, result1
137e4     28 49 B1 FD | 	call	#__system___lockmem
137e8     B5 01 00 FF 
137ec     15 15 06 F6 | 	mov	arg02, ##@LR__5842
137f0     00 12 06 F6 | 	mov	arg01, #0
137f4     00 16 06 F6 | 	mov	arg03, #0
137f8     0C 56 B1 FD | 	call	#__system___basic_print_string
137fc     00 12 06 F6 | 	mov	arg01, #0
13800     B0 A5 B1 FD | 	call	#__system___getiolock_0620
13804     FD 00 68 FC | 	wrlong	#0, result1
13808     27 12 06 F6 | 	mov	arg01, #39
1380c     00 14 06 F6 | 	mov	arg02, #0
13810     A8 0E B1 FD | 	call	#_printerror
13814     64 00 90 FD | 	jmp	#LR__1561
13818                 | LR__1560
13818     04 A0 BF FD | 	call	#_pop
1381c     FD 26 02 F6 | 	mov	local01, result1
13820     FE 16 02 F6 | 	mov	arg03, result2
13824     A7 26 62 FC | 	wrlong	local01, fp
13828     04 4E 05 F1 | 	add	fp, #4
1382c     A7 16 62 FC | 	wrlong	arg03, fp
13830     04 4E 05 F1 | 	add	fp, #4
13834     A7 FE 61 FC | 	wrlong	result3, fp
13838     08 4E 85 F1 | 	sub	fp, #8
1383c     A7 12 02 F6 | 	mov	arg01, fp
13840     C0 A1 BF FD | 	call	#_converttoint
13844     FD 26 02 F6 | 	mov	local01, result1
13848     01 26 66 F0 | 	shl	local01, #1
1384c     52 00 00 FF 
13850     0C E5 05 F1 | 	add	objptr, ##42252
13854     F2 26 02 F1 | 	add	local01, objptr
13858     13 27 E2 FA | 	rdword	local01, local01
1385c     A7 26 62 FC | 	wrlong	local01, fp
13860     08 4E 05 F1 | 	add	fp, #8
13864     A7 38 68 FC | 	wrlong	#28, fp
13868     08 4E 85 F1 | 	sub	fp, #8
1386c     A7 12 02 F6 | 	mov	arg01, fp
13870     52 00 00 FF 
13874     0C E5 85 F1 | 	sub	objptr, ##42252
13878     3C A0 BF FD | 	call	#_push
1387c                 | LR__1561
1387c     A7 F0 03 F6 | 	mov	ptra, fp
13880     B2 00 A0 FD | 	call	#popregs_
13884                 | _do_getenvsustain_ret
13884     2D 00 64 FD | 	ret
13888                 | 
13888                 | ' 
13888                 | ' '-------------------- getnotevalue
13888                 | ' 
13888                 | ' sub do_getnotevalue
13888                 | _do_getnotevalue
13888     01 4A 05 F6 | 	mov	COUNT_, #1
1388c     A8 00 A0 FD | 	call	#pushregs_
13890     1C F0 07 F1 | 	add	ptra, #28
13894     88 9F BF FD | 	call	#_pop
13898     FF 14 02 F6 | 	mov	arg02, result3
1389c     10 4E 05 F1 | 	add	fp, #16
138a0     A7 FA 61 FC | 	wrlong	result1, fp
138a4     04 4E 05 F1 | 	add	fp, #4
138a8     A7 FC 61 FC | 	wrlong	result2, fp
138ac     04 4E 05 F1 | 	add	fp, #4
138b0     A7 14 62 FC | 	wrlong	arg02, fp
138b4     08 4E 85 F1 | 	sub	fp, #8
138b8     A7 12 02 F6 | 	mov	arg01, fp
138bc     10 4E 85 F1 | 	sub	fp, #16
138c0     40 A1 BF FD | 	call	#_converttoint
138c4     FD 14 52 F6 | 	abs	arg02, result1 wc
138c8     0C 14 16 FD | 	qdiv	arg02, #12
138cc     0C 4E 05 F1 | 	add	fp, #12
138d0     A7 FA 61 FC | 	wrlong	result1, fp
138d4     14 00 00 FF 
138d8     D8 E4 05 F1 | 	add	objptr, ##10456
138dc     08 4E 85 F1 | 	sub	fp, #8
138e0     19 14 62 FD | 	getqy	arg02
138e4     0A 15 82 F6 | 	negc	arg02, arg02
138e8     02 14 66 F0 | 	shl	arg02, #2
138ec     F2 14 02 F1 | 	add	arg02, objptr
138f0     0A 15 02 FB | 	rdlong	arg02, arg02
138f4     A7 14 62 FC | 	wrlong	arg02, fp
138f8     08 4E 05 F1 | 	add	fp, #8
138fc     A7 14 02 FB | 	rdlong	arg02, fp
13900     0A 15 52 F6 | 	abs	arg02, arg02 wc
13904     0C 14 16 FD | 	qdiv	arg02, #12
13908     0C 4E 85 F1 | 	sub	fp, #12
1390c     14 00 00 FF 
13910     D8 E4 85 F1 | 	sub	objptr, ##10456
13914     18 14 62 FD | 	getqx	arg02
13918     0A 13 82 F6 | 	negc	arg01, arg02
1391c     09 13 52 F6 | 	abs	arg01, arg01 wc
13920     1F 26 C6 C9 |  if_b	decod	local01, #31
13924     00 26 06 36 |  if_ae	mov	local01, #0
13928     5C 72 B1 FD | 	call	#__system___float_fromuns
1392c     13 FB 61 F5 | 	xor	result1, local01
13930     08 4E 05 F1 | 	add	fp, #8
13934     A7 FA 61 FC | 	wrlong	result1, fp
13938     FD 14 02 F6 | 	mov	arg02, result1
1393c     08 4E 85 F1 | 	sub	fp, #8
13940     1E 12 C6 F9 | 	decod	arg01, #30
13944     50 85 B1 FD | 	call	#__system____builtin_powf
13948     FD 12 02 F6 | 	mov	arg01, result1
1394c     04 4E 05 F1 | 	add	fp, #4
13950     A7 14 02 FB | 	rdlong	arg02, fp
13954     04 4E 85 F1 | 	sub	fp, #4
13958     30 76 B1 FD | 	call	#__system___float_mul
1395c     A7 FA 61 FC | 	wrlong	result1, fp
13960     10 4E 05 F1 | 	add	fp, #16
13964     A7 FA 61 FC | 	wrlong	result1, fp
13968     08 4E 05 F1 | 	add	fp, #8
1396c     A7 3C 68 FC | 	wrlong	#30, fp
13970     08 4E 85 F1 | 	sub	fp, #8
13974     A7 12 02 F6 | 	mov	arg01, fp
13978     10 4E 85 F1 | 	sub	fp, #16
1397c     38 9F BF FD | 	call	#_push
13980     A7 F0 03 F6 | 	mov	ptra, fp
13984     B2 00 A0 FD | 	call	#popregs_
13988                 | _do_getnotevalue_ret
13988     2D 00 64 FD | 	ret
1398c                 | 
1398c                 | ' 
1398c                 | ' '-------------------- getpixel
1398c                 | ' 
1398c                 | ' sub do_getpixel
1398c                 | _do_getpixel
1398c     00 4A 05 F6 | 	mov	COUNT_, #0
13990     A8 00 A0 FD | 	call	#pushregs_
13994     24 F0 07 F1 | 	add	ptra, #36
13998     4A 00 00 FF 
1399c     A0 E4 05 F1 | 	add	objptr, ##38048
139a0     F2 16 02 FB | 	rdlong	arg03, objptr
139a4     0B 15 02 F6 | 	mov	arg02, arg03
139a8     01 14 66 F0 | 	shl	arg02, #1
139ac     0B 15 02 F1 | 	add	arg02, arg03
139b0     02 14 66 F0 | 	shl	arg02, #2
139b4     03 00 00 FF 
139b8     04 E4 85 F1 | 	sub	objptr, ##1540
139bc     F2 14 02 F1 | 	add	arg02, objptr
139c0     0A 17 02 FB | 	rdlong	arg03, arg02
139c4     18 4E 05 F1 | 	add	fp, #24
139c8     A7 16 62 FC | 	wrlong	arg03, fp
139cc                 | ' 
139cc                 | ' numpar=compiledline(lineptr_e).result.uresult
139cc                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
139cc     18 4E 85 F1 | 	sub	fp, #24
139d0     02 16 0E F2 | 	cmp	arg03, #2 wz
139d4     47 00 00 FF 
139d8     9C E4 85 F1 | 	sub	objptr, ##36508
139dc     40 00 90 AD |  if_e	jmp	#LR__1570
139e0     00 12 06 F6 | 	mov	arg01, #0
139e4     CC A3 B1 FD | 	call	#__system___getiolock_0620
139e8     FD 12 02 F6 | 	mov	arg01, result1
139ec     20 47 B1 FD | 	call	#__system___lockmem
139f0     B5 01 00 FF 
139f4     25 15 06 F6 | 	mov	arg02, ##@LR__5843
139f8     00 12 06 F6 | 	mov	arg01, #0
139fc     00 16 06 F6 | 	mov	arg03, #0
13a00     04 54 B1 FD | 	call	#__system___basic_print_string
13a04     00 12 06 F6 | 	mov	arg01, #0
13a08     A8 A3 B1 FD | 	call	#__system___getiolock_0620
13a0c     FD 00 68 FC | 	wrlong	#0, result1
13a10     27 12 06 F6 | 	mov	arg01, #39
13a14     00 14 06 F6 | 	mov	arg02, #0
13a18     A0 0C B1 FD | 	call	#_printerror
13a1c     B4 00 90 FD | 	jmp	#LR__1571
13a20                 | LR__1570
13a20     FC 9D BF FD | 	call	#_pop
13a24     FD 16 02 F6 | 	mov	arg03, result1
13a28     FE 14 02 F6 | 	mov	arg02, result2
13a2c     FF 12 02 F6 | 	mov	arg01, result3
13a30     0C 4E 05 F1 | 	add	fp, #12
13a34     A7 16 62 FC | 	wrlong	arg03, fp
13a38     04 4E 05 F1 | 	add	fp, #4
13a3c     A7 14 62 FC | 	wrlong	arg02, fp
13a40     04 4E 05 F1 | 	add	fp, #4
13a44     A7 12 62 FC | 	wrlong	arg01, fp
13a48     14 4E 85 F1 | 	sub	fp, #20
13a4c     D0 9D BF FD | 	call	#_pop
13a50     FF 16 02 F6 | 	mov	arg03, result3
13a54     A7 FA 61 FC | 	wrlong	result1, fp
13a58     04 4E 05 F1 | 	add	fp, #4
13a5c     A7 FC 61 FC | 	wrlong	result2, fp
13a60     04 4E 05 F1 | 	add	fp, #4
13a64     A7 16 62 FC | 	wrlong	arg03, fp
13a68     08 4E 85 F1 | 	sub	fp, #8
13a6c     A7 12 02 F6 | 	mov	arg01, fp
13a70     90 9F BF FD | 	call	#_converttoint
13a74     1C 4E 05 F1 | 	add	fp, #28
13a78     A7 FA 61 FC | 	wrlong	result1, fp
13a7c     10 4E 85 F1 | 	sub	fp, #16
13a80     A7 12 02 F6 | 	mov	arg01, fp
13a84     0C 4E 85 F1 | 	sub	fp, #12
13a88     78 9F BF FD | 	call	#_converttoint
13a8c     FD 16 02 F6 | 	mov	arg03, result1
13a90     20 4E 05 F1 | 	add	fp, #32
13a94     A7 16 62 FC | 	wrlong	arg03, fp
13a98     F2 12 02 FB | 	rdlong	arg01, objptr
13a9c     04 4E 85 F1 | 	sub	fp, #4
13aa0     A7 FE 01 FB | 	rdlong	result3, fp
13aa4     FF 12 02 F1 | 	add	arg01, result3
13aa8     1C 4E 85 F1 | 	sub	fp, #28
13aac     0A 16 66 F0 | 	shl	arg03, #10
13ab0     0B 13 02 F1 | 	add	arg01, arg03
13ab4     7C 0E B1 FD | 	call	#_pspeek
13ab8     FD FA E1 F8 | 	getbyte	result1, result1, #0
13abc     A7 FA 61 FC | 	wrlong	result1, fp
13ac0     08 4E 05 F1 | 	add	fp, #8
13ac4     A7 3A 68 FC | 	wrlong	#29, fp
13ac8     08 4E 85 F1 | 	sub	fp, #8
13acc     A7 12 02 F6 | 	mov	arg01, fp
13ad0     E4 9D BF FD | 	call	#_push
13ad4                 | LR__1571
13ad4     A7 F0 03 F6 | 	mov	ptra, fp
13ad8     B2 00 A0 FD | 	call	#popregs_
13adc                 | _do_getpixel_ret
13adc     2D 00 64 FD | 	ret
13ae0                 | 
13ae0                 | ' 
13ae0                 | ' '-------------------- gettime
13ae0                 | ' 
13ae0                 | ' sub do_gettime
13ae0                 | _do_gettime
13ae0     02 4A 05 F6 | 	mov	COUNT_, #2
13ae4     A8 00 A0 FD | 	call	#pushregs_
13ae8     14 F0 07 F1 | 	add	ptra, #20
13aec                 | ' 
13aec                 | ' const asm 
13aec     1A 26 72 FD | 	getct	local01 wc
13af0     1A 28 62 FD | 	getct	local02
13af4                 | ' return hi1, lo1
13af4     14 FD 01 F6 | 	mov	result2, local02
13af8     A7 26 62 FC | 	wrlong	local01, fp
13afc     04 4E 05 F1 | 	add	fp, #4
13b00     A7 FC 61 FC | 	wrlong	result2, fp
13b04     0C 4E 05 F1 | 	add	fp, #12
13b08     A7 3A 68 FC | 	wrlong	#29, fp
13b0c     0C 4E 85 F1 | 	sub	fp, #12
13b10     A7 12 02 FB | 	rdlong	arg01, fp
13b14     04 4E 05 F1 | 	add	fp, #4
13b18     A7 12 62 FC | 	wrlong	arg01, fp
13b1c     08 4E 85 F1 | 	sub	fp, #8
13b20     A7 12 02 FB | 	rdlong	arg01, fp
13b24     0C 4E 05 F1 | 	add	fp, #12
13b28     A7 12 62 FC | 	wrlong	arg01, fp
13b2c     04 4E 85 F1 | 	sub	fp, #4
13b30     A7 12 02 F6 | 	mov	arg01, fp
13b34     08 4E 85 F1 | 	sub	fp, #8
13b38     7C 9D BF FD | 	call	#_push
13b3c     A7 F0 03 F6 | 	mov	ptra, fp
13b40     B2 00 A0 FD | 	call	#popregs_
13b44                 | _do_gettime_ret
13b44     2D 00 64 FD | 	ret
13b48                 | 
13b48                 | ' 
13b48                 | ' '-------------------- gosub
13b48                 | ' 
13b48                 | ' sub do_gosub()
13b48                 | _do_gosub
13b48     50 00 00 FF 
13b4c     54 E5 05 F1 | 	add	objptr, ##41300
13b50     F2 00 02 FB | 	rdlong	_var01, objptr
13b54     01 00 06 F1 | 	add	_var01, #1
13b58     F2 00 62 FC | 	wrlong	_var01, objptr
13b5c                 | ' gosubtop+=1
13b5c                 | ' if compiledline(lineptr_e+1).result_type=token_end then
13b5c     06 00 00 FF 
13b60     B4 E4 85 F1 | 	sub	objptr, ##3252
13b64     F2 00 02 FB | 	rdlong	_var01, objptr
13b68     01 00 06 F1 | 	add	_var01, #1
13b6c     00 03 02 F6 | 	mov	_var02, _var01
13b70     01 02 66 F0 | 	shl	_var02, #1
13b74     00 03 02 F1 | 	add	_var02, _var01
13b78     02 02 66 F0 | 	shl	_var02, #2
13b7c     03 00 00 FF 
13b80     04 E4 85 F1 | 	sub	objptr, ##1540
13b84     F2 02 02 F1 | 	add	_var02, objptr
13b88     08 02 06 F1 | 	add	_var02, #8
13b8c     01 03 02 FB | 	rdlong	_var02, _var02
13b90     FE 03 0E F2 | 	cmp	_var02, #510 wz
13b94     47 00 00 FF 
13b98     9C E4 85 F1 | 	sub	objptr, ##36508
13b9c     58 00 90 5D |  if_ne	jmp	#LR__1580
13ba0     50 00 00 FF 
13ba4     54 E5 05 F1 | 	add	objptr, ##41300
13ba8     F2 02 02 FB | 	rdlong	_var02, objptr
13bac     03 02 66 F0 | 	shl	_var02, #3
13bb0     03 00 00 FF 
13bb4     88 E5 85 F1 | 	sub	objptr, ##1928
13bb8     F2 02 02 F1 | 	add	_var02, objptr
13bbc     03 00 00 FF 
13bc0     0C E5 05 F1 | 	add	objptr, ##1804
13bc4     F2 00 02 FB | 	rdlong	_var01, objptr
13bc8     01 01 62 FC | 	wrlong	_var01, _var02
13bcc     7C E4 05 F1 | 	add	objptr, #124
13bd0     F2 02 02 FB | 	rdlong	_var02, objptr
13bd4     03 02 66 F0 | 	shl	_var02, #3
13bd8     03 00 00 FF 
13bdc     88 E5 85 F1 | 	sub	objptr, ##1928
13be0     F2 02 02 F1 | 	add	_var02, objptr
13be4     04 02 06 F1 | 	add	_var02, #4
13be8     01 01 68 FC | 	wrlong	#0, _var02
13bec     4C 00 00 FF 
13bf0     CC E5 85 F1 | 	sub	objptr, ##39372
13bf4     64 00 90 FD | 	jmp	#LR__1581
13bf8                 | LR__1580
13bf8     50 00 00 FF 
13bfc     54 E5 05 F1 | 	add	objptr, ##41300
13c00     F2 02 02 FB | 	rdlong	_var02, objptr
13c04     03 02 66 F0 | 	shl	_var02, #3
13c08     03 00 00 FF 
13c0c     88 E5 85 F1 | 	sub	objptr, ##1928
13c10     F2 02 02 F1 | 	add	_var02, objptr
13c14     03 00 00 FF 
13c18     14 E5 05 F1 | 	add	objptr, ##1812
13c1c     F2 00 02 FB | 	rdlong	_var01, objptr
13c20     01 01 62 FC | 	wrlong	_var01, _var02
13c24     74 E4 05 F1 | 	add	objptr, #116
13c28     F2 02 02 FB | 	rdlong	_var02, objptr
13c2c     03 02 66 F0 | 	shl	_var02, #3
13c30     03 00 00 FF 
13c34     88 E5 85 F1 | 	sub	objptr, ##1928
13c38     F2 02 02 F1 | 	add	_var02, objptr
13c3c     02 00 00 FF 
13c40     2C E5 85 F1 | 	sub	objptr, ##1324
13c44     F2 00 02 FB | 	rdlong	_var01, objptr
13c48     4A 00 00 FF 
13c4c     A0 E4 85 F1 | 	sub	objptr, ##38048
13c50     02 00 06 F1 | 	add	_var01, #2
13c54     04 02 06 F1 | 	add	_var02, #4
13c58     01 01 62 FC | 	wrlong	_var01, _var02
13c5c                 | LR__1581
13c5c                 | _do_gosub_ret
13c5c     2D 00 64 FD | 	ret
13c60                 | 
13c60                 | ' 
13c60                 | ' '--------------------- goto
13c60                 | ' 
13c60                 | ' '------- fast goto
13c60                 | ' 
13c60                 | ' sub do_fast_goto
13c60                 | _do_fast_goto
13c60     02 4A 05 F6 | 	mov	COUNT_, #2
13c64     A8 00 A0 FD | 	call	#pushregs_
13c68                 | _do_fast_goto_enter
13c68     4A 00 00 FF 
13c6c     A0 E4 05 F1 | 	add	objptr, ##38048
13c70     F2 12 02 FB | 	rdlong	arg01, objptr
13c74     09 27 02 F6 | 	mov	local01, arg01
13c78     01 26 66 F0 | 	shl	local01, #1
13c7c     09 27 02 F1 | 	add	local01, arg01
13c80     02 26 66 F0 | 	shl	local01, #2
13c84     03 00 00 FF 
13c88     04 E4 85 F1 | 	sub	objptr, ##1540
13c8c     F2 26 02 F1 | 	add	local01, objptr
13c90     13 29 02 FB | 	rdlong	local02, local01
13c94     14 13 02 F6 | 	mov	arg01, local02
13c98     47 00 00 FF 
13c9c     9C E4 85 F1 | 	sub	objptr, ##36508
13ca0     E8 0C B1 FD | 	call	#_pslpeek
13ca4     FD 12 02 F6 | 	mov	arg01, result1
13ca8                 | ' 
13ca8                 | ' testptr=compiledline(lineptr_e).result.uresult
13ca8                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
13ca8                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
13ca8     4A 00 00 FF 
13cac     A0 E4 05 F1 | 	add	objptr, ##38048
13cb0     F2 FA 01 FB | 	rdlong	result1, objptr
13cb4     FD 26 02 F6 | 	mov	local01, result1
13cb8     01 26 66 F0 | 	shl	local01, #1
13cbc     FD 26 02 F1 | 	add	local01, result1
13cc0     02 26 66 F0 | 	shl	local01, #2
13cc4     03 00 00 FF 
13cc8     04 E4 85 F1 | 	sub	objptr, ##1540
13ccc     F2 26 02 F1 | 	add	local01, objptr
13cd0     04 26 06 F1 | 	add	local01, #4
13cd4     13 27 02 FB | 	rdlong	local01, local01
13cd8     13 13 0A F2 | 	cmp	arg01, local01 wz
13cdc     47 00 00 FF 
13ce0     9C E4 85 F1 | 	sub	objptr, ##36508
13ce4     58 00 90 5D |  if_ne	jmp	#LR__1590
13ce8     50 00 00 FF 
13cec     D8 E4 05 F1 | 	add	objptr, ##41176
13cf0     F2 28 62 FC | 	wrlong	local02, objptr
13cf4     06 00 00 FF 
13cf8     3C E4 85 F1 | 	sub	objptr, ##3132
13cfc     F2 28 02 FB | 	rdlong	local02, objptr
13d00     01 28 86 F1 | 	sub	local02, #1
13d04     04 E4 05 F1 | 	add	objptr, #4
13d08     F2 28 62 FC | 	wrlong	local02, objptr
13d0c                 | '   runptr=testptr
13d0c                 | '   lineptr_e=lineptr-1
13d0c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
13d0c     06 00 00 FF 
13d10     84 E4 05 F1 | 	add	objptr, ##3204
13d14     F2 28 02 FB | 	rdlong	local02, objptr
13d18     50 00 00 FF 
13d1c     24 E5 85 F1 | 	sub	objptr, ##41252
13d20     FF FF 3F FF 
13d24     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13d28     50 00 00 AF 
13d2c     24 E5 05 A1 |  if_e	add	objptr, ##41252
13d30     F2 00 68 AC |  if_e	wrlong	#0, objptr
13d34     50 00 00 AF 
13d38     24 E5 85 A1 |  if_e	sub	objptr, ##41252
13d3c     04 00 90 FD | 	jmp	#LR__1591
13d40                 | LR__1590
13d40     0C 00 B0 FD | 	call	#_do_find_goto
13d44                 | LR__1591
13d44     A7 F0 03 F6 | 	mov	ptra, fp
13d48     B2 00 A0 FD | 	call	#popregs_
13d4c                 | _do_fast_goto_ret
13d4c     2D 00 64 FD | 	ret
13d50                 | 
13d50                 | ' 
13d50                 | ' '------- find goto  
13d50                 | ' 
13d50                 | ' sub do_find_goto
13d50                 | _do_find_goto
13d50     03 4A 05 F6 | 	mov	COUNT_, #3
13d54     A8 00 A0 FD | 	call	#pushregs_
13d58     24 F0 07 F1 | 	add	ptra, #36
13d5c                 | _do_find_goto_enter
13d5c     4A 00 00 FF 
13d60     A0 E4 05 F1 | 	add	objptr, ##38048
13d64     F2 26 02 FB | 	rdlong	local01, objptr
13d68     13 29 02 F6 | 	mov	local02, local01
13d6c     01 28 66 F0 | 	shl	local02, #1
13d70     13 29 02 F1 | 	add	local02, local01
13d74     02 28 66 F0 | 	shl	local02, #2
13d78     03 00 00 FF 
13d7c     04 E4 85 F1 | 	sub	objptr, ##1540
13d80     F2 28 02 F1 | 	add	local02, objptr
13d84     04 28 06 F1 | 	add	local02, #4
13d88     14 29 02 FB | 	rdlong	local02, local02
13d8c     A7 28 62 FC | 	wrlong	local02, fp
13d90     03 00 00 FF 
13d94     0C E4 05 F1 | 	add	objptr, ##1548
13d98     F2 2A 02 FB | 	rdlong	local03, objptr
13d9c     4A 00 00 FF 
13da0     A8 E4 85 F1 | 	sub	objptr, ##38056
13da4     04 4E 05 F1 | 	add	fp, #4
13da8     A7 2A 62 FC | 	wrlong	local03, fp
13dac     04 4E 85 F1 | 	sub	fp, #4
13db0                 | ' 
13db0                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
13db0                 | ' gotoptr=programstart
13db0                 | ' do
13db0                 | LR__1600
13db0     0C 4E 05 F1 | 	add	fp, #12
13db4     A7 12 02 F6 | 	mov	arg01, fp
13db8     08 4E 85 F1 | 	sub	fp, #8
13dbc     A7 14 02 FB | 	rdlong	arg02, fp
13dc0     04 4E 85 F1 | 	sub	fp, #4
13dc4     18 16 06 F6 | 	mov	arg03, #24
13dc8     0B 00 00 FF 
13dcc     CC E4 05 F1 | 	add	objptr, ##5836
13dd0     98 36 B1 FD | 	call	#_psram_spin2_read1
13dd4     0B 00 00 FF 
13dd8     CC E4 85 F1 | 	sub	objptr, ##5836
13ddc                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13ddc                 | '   if gotoheader(0)<>$FFFFFFFF then
13ddc     0C 4E 05 F1 | 	add	fp, #12
13de0     A7 2A 02 FB | 	rdlong	local03, fp
13de4     0C 4E 85 F1 | 	sub	fp, #12
13de8     FF FF 7F FF 
13dec     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
13df0     24 00 90 AD |  if_e	jmp	#LR__1601
13df4     04 4E 05 F1 | 	add	fp, #4
13df8     A7 2A 02 FB | 	rdlong	local03, fp
13dfc     04 4E 05 F1 | 	add	fp, #4
13e00     A7 2A 62 FC | 	wrlong	local03, fp
13e04     18 4E 05 F1 | 	add	fp, #24
13e08     A7 2A 02 FB | 	rdlong	local03, fp
13e0c     1C 4E 85 F1 | 	sub	fp, #28
13e10     A7 2A 62 FC | 	wrlong	local03, fp
13e14     04 4E 85 F1 | 	sub	fp, #4
13e18                 | LR__1601
13e18     20 4E 05 F1 | 	add	fp, #32
13e1c     A7 2A 02 FB | 	rdlong	local03, fp
13e20     20 4E 85 F1 | 	sub	fp, #32
13e24     FF FF 3F FF 
13e28     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
13e2c     0C 4E 05 51 |  if_ne	add	fp, #12
13e30     A7 26 02 5B |  if_ne	rdlong	local01, fp
13e34     0C 4E 85 51 |  if_ne	sub	fp, #12
13e38     FF FF 7F 5F 
13e3c     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13e40     18 00 90 AD |  if_e	jmp	#LR__1602
13e44     0C 4E 05 F1 | 	add	fp, #12
13e48     A7 2A 02 FB | 	rdlong	local03, fp
13e4c     0C 4E 85 F1 | 	sub	fp, #12
13e50     A7 28 02 FB | 	rdlong	local02, fp
13e54     14 2B 0A F2 | 	cmp	local03, local02 wz
13e58     54 FF 9F 5D |  if_ne	jmp	#LR__1600
13e5c                 | LR__1602
13e5c                 | ' 
13e5c                 | ' if gotoheader(0)=gotoline then
13e5c     0C 4E 05 F1 | 	add	fp, #12
13e60     A7 2A 02 FB | 	rdlong	local03, fp
13e64     0C 4E 85 F1 | 	sub	fp, #12
13e68     A7 26 02 FB | 	rdlong	local01, fp
13e6c     13 2B 0A F2 | 	cmp	local03, local01 wz
13e70     D8 00 90 5D |  if_ne	jmp	#LR__1603
13e74     4A 00 00 FF 
13e78     A0 E4 05 F1 | 	add	objptr, ##38048
13e7c     F2 26 02 FB | 	rdlong	local01, objptr
13e80     13 29 02 F6 | 	mov	local02, local01
13e84     01 28 66 F0 | 	shl	local02, #1
13e88     13 29 02 F1 | 	add	local02, local01
13e8c     02 28 66 F0 | 	shl	local02, #2
13e90     03 00 00 FF 
13e94     04 E4 85 F1 | 	sub	objptr, ##1540
13e98     F2 28 02 F1 | 	add	local02, objptr
13e9c     08 4E 05 F1 | 	add	fp, #8
13ea0     A7 2A 02 FB | 	rdlong	local03, fp
13ea4     14 2B 62 FC | 	wrlong	local03, local02
13ea8     03 00 00 FF 
13eac     04 E4 05 F1 | 	add	objptr, ##1540
13eb0     F2 26 02 FB | 	rdlong	local01, objptr
13eb4     13 29 02 F6 | 	mov	local02, local01
13eb8     01 28 66 F0 | 	shl	local02, #1
13ebc     13 29 02 F1 | 	add	local02, local01
13ec0     02 28 66 F0 | 	shl	local02, #2
13ec4     03 00 00 FF 
13ec8     04 E4 85 F1 | 	sub	objptr, ##1540
13ecc     F2 28 02 F1 | 	add	local02, objptr
13ed0     08 28 06 F1 | 	add	local02, #8
13ed4     14 9D 68 FC | 	wrlong	#78, local02
13ed8     03 00 00 FF 
13edc     04 E4 05 F1 | 	add	objptr, ##1540
13ee0     F2 28 02 FB | 	rdlong	local02, objptr
13ee4     14 13 02 F6 | 	mov	arg01, local02
13ee8     01 12 66 F0 | 	shl	arg01, #1
13eec     14 13 02 F1 | 	add	arg01, local02
13ef0     02 12 66 F0 | 	shl	arg01, #2
13ef4     03 00 00 FF 
13ef8     04 E4 85 F1 | 	sub	objptr, ##1540
13efc     F2 12 02 F1 | 	add	arg01, objptr
13f00     09 00 00 FF 
13f04     44 E4 05 F1 | 	add	objptr, ##4676
13f08     F2 14 02 FB | 	rdlong	arg02, objptr
13f0c     02 2A 06 F6 | 	mov	local03, #2
13f10     14 2B 02 F1 | 	add	local03, local02
13f14     0B 00 00 FF 
13f18     5C E4 85 F1 | 	sub	objptr, ##5724
13f1c     F2 16 02 FB | 	rdlong	arg03, objptr
13f20     0B 2B 02 FD | 	qmul	local03, arg03
13f24     08 4E 85 F1 | 	sub	fp, #8
13f28     39 00 00 FF 
13f2c     B8 E5 85 F1 | 	sub	objptr, ##29624
13f30     18 2A 62 FD | 	getqx	local03
13f34     15 15 02 F1 | 	add	arg02, local03
13f38     CC 35 B1 FD | 	call	#_psram_spin2_write
13f3c     0B 00 00 FF 
13f40     CC E4 85 F1 | 	sub	objptr, ##5836
13f44     18 FD BF FD | 	call	#_do_fast_goto
13f48     0C 00 90 FD | 	jmp	#LR__1604
13f4c                 | LR__1603
13f4c     26 12 06 F6 | 	mov	arg01, #38
13f50     00 14 06 F6 | 	mov	arg02, #0
13f54     64 07 B1 FD | 	call	#_printerror
13f58                 | LR__1604
13f58     A7 F0 03 F6 | 	mov	ptra, fp
13f5c     B2 00 A0 FD | 	call	#popregs_
13f60                 | _do_find_goto_ret
13f60     2D 00 64 FD | 	ret
13f64                 | 
13f64                 | ' 
13f64                 | ' '------- slow goto  
13f64                 | ' 
13f64                 | ' sub do_slow_goto
13f64                 | _do_slow_goto
13f64     02 4A 05 F6 | 	mov	COUNT_, #2
13f68     A8 00 A0 FD | 	call	#pushregs_
13f6c     30 F0 07 F1 | 	add	ptra, #48
13f70     AC 98 BF FD | 	call	#_pop
13f74     FF 26 02 F6 | 	mov	local01, result3
13f78     24 4E 05 F1 | 	add	fp, #36
13f7c     A7 FA 61 FC | 	wrlong	result1, fp
13f80     04 4E 05 F1 | 	add	fp, #4
13f84     A7 FC 61 FC | 	wrlong	result2, fp
13f88     04 4E 05 F1 | 	add	fp, #4
13f8c     A7 26 62 FC | 	wrlong	local01, fp
13f90     08 4E 85 F1 | 	sub	fp, #8
13f94     A7 12 02 F6 | 	mov	arg01, fp
13f98     24 4E 85 F1 | 	sub	fp, #36
13f9c     64 9A BF FD | 	call	#_converttoint
13fa0     A7 FA 61 FC | 	wrlong	result1, fp
13fa4     4A 00 00 FF 
13fa8     A8 E4 05 F1 | 	add	objptr, ##38056
13fac     F2 28 02 FB | 	rdlong	local02, objptr
13fb0     4A 00 00 FF 
13fb4     A8 E4 85 F1 | 	sub	objptr, ##38056
13fb8     04 4E 05 F1 | 	add	fp, #4
13fbc     A7 28 62 FC | 	wrlong	local02, fp
13fc0     04 4E 85 F1 | 	sub	fp, #4
13fc4                 | ' 
13fc4                 | ' t1=pop() : gotoline=converttoint(t1)
13fc4                 | ' gotoptr=programstart
13fc4                 | ' do
13fc4                 | LR__1610
13fc4     0C 4E 05 F1 | 	add	fp, #12
13fc8     A7 12 02 F6 | 	mov	arg01, fp
13fcc     08 4E 85 F1 | 	sub	fp, #8
13fd0     A7 14 02 FB | 	rdlong	arg02, fp
13fd4     04 4E 85 F1 | 	sub	fp, #4
13fd8     18 16 06 F6 | 	mov	arg03, #24
13fdc     0B 00 00 FF 
13fe0     CC E4 05 F1 | 	add	objptr, ##5836
13fe4     84 34 B1 FD | 	call	#_psram_spin2_read1
13fe8     0B 00 00 FF 
13fec     CC E4 85 F1 | 	sub	objptr, ##5836
13ff0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13ff0                 | '   if gotoheader(0)<>$FFFFFFFF then
13ff0     0C 4E 05 F1 | 	add	fp, #12
13ff4     A7 28 02 FB | 	rdlong	local02, fp
13ff8     0C 4E 85 F1 | 	sub	fp, #12
13ffc     FF FF 7F FF 
14000     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14004     24 00 90 AD |  if_e	jmp	#LR__1611
14008     04 4E 05 F1 | 	add	fp, #4
1400c     A7 28 02 FB | 	rdlong	local02, fp
14010     04 4E 05 F1 | 	add	fp, #4
14014     A7 28 62 FC | 	wrlong	local02, fp
14018     18 4E 05 F1 | 	add	fp, #24
1401c     A7 28 02 FB | 	rdlong	local02, fp
14020     1C 4E 85 F1 | 	sub	fp, #28
14024     A7 28 62 FC | 	wrlong	local02, fp
14028     04 4E 85 F1 | 	sub	fp, #4
1402c                 | LR__1611
1402c     20 4E 05 F1 | 	add	fp, #32
14030     A7 28 02 FB | 	rdlong	local02, fp
14034     20 4E 85 F1 | 	sub	fp, #32
14038     FF FF 3F FF 
1403c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
14040     0C 4E 05 51 |  if_ne	add	fp, #12
14044     A7 26 02 5B |  if_ne	rdlong	local01, fp
14048     0C 4E 85 51 |  if_ne	sub	fp, #12
1404c     FF FF 7F 5F 
14050     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
14054     18 00 90 AD |  if_e	jmp	#LR__1612
14058     0C 4E 05 F1 | 	add	fp, #12
1405c     A7 28 02 FB | 	rdlong	local02, fp
14060     0C 4E 85 F1 | 	sub	fp, #12
14064     A7 16 02 FB | 	rdlong	arg03, fp
14068     0B 29 0A F2 | 	cmp	local02, arg03 wz
1406c     54 FF 9F 5D |  if_ne	jmp	#LR__1610
14070                 | LR__1612
14070                 | ' if gotoheader(0)=gotoline then  
14070     0C 4E 05 F1 | 	add	fp, #12
14074     A7 28 02 FB | 	rdlong	local02, fp
14078     0C 4E 85 F1 | 	sub	fp, #12
1407c     A7 26 02 FB | 	rdlong	local01, fp
14080     13 29 0A F2 | 	cmp	local02, local01 wz
14084     60 00 90 5D |  if_ne	jmp	#LR__1613
14088     08 4E 05 F1 | 	add	fp, #8
1408c     A7 28 02 FB | 	rdlong	local02, fp
14090     08 4E 85 F1 | 	sub	fp, #8
14094     50 00 00 FF 
14098     D8 E4 05 F1 | 	add	objptr, ##41176
1409c     F2 28 62 FC | 	wrlong	local02, objptr
140a0     06 00 00 FF 
140a4     3C E4 85 F1 | 	sub	objptr, ##3132
140a8     F2 28 02 FB | 	rdlong	local02, objptr
140ac     01 28 86 F1 | 	sub	local02, #1
140b0     04 E4 05 F1 | 	add	objptr, #4
140b4     F2 28 62 FC | 	wrlong	local02, objptr
140b8                 | '    runptr=oldgotoptr
140b8                 | '    lineptr_e=lineptr-1
140b8                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
140b8     06 00 00 FF 
140bc     84 E4 05 F1 | 	add	objptr, ##3204
140c0     F2 28 02 FB | 	rdlong	local02, objptr
140c4     50 00 00 FF 
140c8     24 E5 85 F1 | 	sub	objptr, ##41252
140cc     FF FF 3F FF 
140d0     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
140d4     50 00 00 AF 
140d8     24 E5 05 A1 |  if_e	add	objptr, ##41252
140dc     F2 00 68 AC |  if_e	wrlong	#0, objptr
140e0     50 00 00 AF 
140e4     24 E5 85 A1 |  if_e	sub	objptr, ##41252
140e8                 | LR__1613
140e8     A7 F0 03 F6 | 	mov	ptra, fp
140ec     B2 00 A0 FD | 	call	#popregs_
140f0                 | _do_slow_goto_ret
140f0     2D 00 64 FD | 	ret
140f4                 | 
140f4                 | ' 
140f4                 | ' ' ----------------  hex$
140f4                 | ' 
140f4                 | ' sub do_hex
140f4                 | _do_hex
140f4     01 4A 05 F6 | 	mov	COUNT_, #1
140f8     A8 00 A0 FD | 	call	#pushregs_
140fc     18 F0 07 F1 | 	add	ptra, #24
14100     4A 00 00 FF 
14104     A0 E4 05 F1 | 	add	objptr, ##38048
14108     F2 26 02 FB | 	rdlong	local01, objptr
1410c     13 17 02 F6 | 	mov	arg03, local01
14110     01 16 66 F0 | 	shl	arg03, #1
14114     13 17 02 F1 | 	add	arg03, local01
14118     02 16 66 F0 | 	shl	arg03, #2
1411c     03 00 00 FF 
14120     04 E4 85 F1 | 	sub	objptr, ##1540
14124     F2 16 02 F1 | 	add	arg03, objptr
14128     0B 17 02 FB | 	rdlong	arg03, arg03
1412c     0C 4E 05 F1 | 	add	fp, #12
14130     A7 16 62 FC | 	wrlong	arg03, fp
14134                 | ' 
14134                 | ' numpar=compiledline(lineptr_e).result.uresult
14134                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
14134     0C 4E 85 F1 | 	sub	fp, #12
14138     03 16 16 F2 | 	cmp	arg03, #3 wc
1413c     47 00 00 FF 
14140     9C E4 85 F1 | 	sub	objptr, ##36508
14144     0C 4E 05 C1 |  if_b	add	fp, #12
14148     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1414c     0C 4E 85 C1 |  if_b	sub	fp, #12
14150     40 00 90 4D |  if_c_and_nz	jmp	#LR__1620
14154     00 12 06 F6 | 	mov	arg01, #0
14158     58 9C B1 FD | 	call	#__system___getiolock_0620
1415c     FD 12 02 F6 | 	mov	arg01, result1
14160     AC 3F B1 FD | 	call	#__system___lockmem
14164     B5 01 00 FF 
14168     30 15 06 F6 | 	mov	arg02, ##@LR__5844
1416c     00 12 06 F6 | 	mov	arg01, #0
14170     00 16 06 F6 | 	mov	arg03, #0
14174     90 4C B1 FD | 	call	#__system___basic_print_string
14178     00 12 06 F6 | 	mov	arg01, #0
1417c     34 9C B1 FD | 	call	#__system___getiolock_0620
14180     FD 00 68 FC | 	wrlong	#0, result1
14184     27 12 06 F6 | 	mov	arg01, #39
14188     00 14 06 F6 | 	mov	arg02, #0
1418c     2C 05 B1 FD | 	call	#_printerror
14190     B8 00 90 FD | 	jmp	#LR__1623
14194                 | LR__1620
14194                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
14194     0C 4E 05 F1 | 	add	fp, #12
14198     A7 26 02 FB | 	rdlong	local01, fp
1419c     0C 4E 85 F1 | 	sub	fp, #12
141a0     02 26 0E F2 | 	cmp	local01, #2 wz
141a4     38 00 90 5D |  if_ne	jmp	#LR__1621
141a8     74 96 BF FD | 	call	#_pop
141ac     FF 26 02 F6 | 	mov	local01, result3
141b0     A7 FA 61 FC | 	wrlong	result1, fp
141b4     04 4E 05 F1 | 	add	fp, #4
141b8     A7 FC 61 FC | 	wrlong	result2, fp
141bc     04 4E 05 F1 | 	add	fp, #4
141c0     A7 26 62 FC | 	wrlong	local01, fp
141c4     08 4E 85 F1 | 	sub	fp, #8
141c8     A7 12 02 F6 | 	mov	arg01, fp
141cc     34 98 BF FD | 	call	#_converttoint
141d0     14 4E 05 F1 | 	add	fp, #20
141d4     A7 FA 61 FC | 	wrlong	result1, fp
141d8     14 4E 85 F1 | 	sub	fp, #20
141dc     0C 00 90 FD | 	jmp	#LR__1622
141e0                 | LR__1621
141e0     14 4E 05 F1 | 	add	fp, #20
141e4     A7 10 68 FC | 	wrlong	#8, fp
141e8     14 4E 85 F1 | 	sub	fp, #20
141ec                 | LR__1622
141ec     30 96 BF FD | 	call	#_pop
141f0     FF 26 02 F6 | 	mov	local01, result3
141f4     A7 FA 61 FC | 	wrlong	result1, fp
141f8     04 4E 05 F1 | 	add	fp, #4
141fc     A7 FC 61 FC | 	wrlong	result2, fp
14200     04 4E 05 F1 | 	add	fp, #4
14204     A7 26 62 FC | 	wrlong	local01, fp
14208     08 4E 85 F1 | 	sub	fp, #8
1420c     A7 12 02 F6 | 	mov	arg01, fp
14210     F0 97 BF FD | 	call	#_converttoint
14214     10 4E 05 F1 | 	add	fp, #16
14218     A7 FA 61 FC | 	wrlong	result1, fp
1421c     FD 12 02 F6 | 	mov	arg01, result1
14220     04 4E 05 F1 | 	add	fp, #4
14224     A7 14 02 FB | 	rdlong	arg02, fp
14228     14 4E 85 F1 | 	sub	fp, #20
1422c     10 16 06 F6 | 	mov	arg03, #16
14230     B0 61 B1 FD | 	call	#__system__Number_S
14234     A7 FA 61 FC | 	wrlong	result1, fp
14238     08 4E 05 F1 | 	add	fp, #8
1423c     A7 3E 68 FC | 	wrlong	#31, fp
14240     08 4E 85 F1 | 	sub	fp, #8
14244     A7 12 02 F6 | 	mov	arg01, fp
14248     6C 96 BF FD | 	call	#_push
1424c                 | LR__1623
1424c     A7 F0 03 F6 | 	mov	ptra, fp
14250     B2 00 A0 FD | 	call	#popregs_
14254                 | _do_hex_ret
14254     2D 00 64 FD | 	ret
14258                 | 
14258                 | ' 
14258                 | ' ' ----------------  if
14258                 | ' 
14258                 | ' sub do_if
14258                 | _do_if
14258     05 4A 05 F6 | 	mov	COUNT_, #5
1425c     A8 00 A0 FD | 	call	#pushregs_
14260     BC 95 BF FD | 	call	#_pop
14264     FD 26 0A F6 | 	mov	local01, result1 wz
14268     FE 28 02 F6 | 	mov	local02, result2
1426c     FF 2A 02 F6 | 	mov	local03, result3
14270                 | ' t1=pop()
14270                 | ' ' if uresult=0, jump over else
14270                 | ' if t1.result.uresult = 0 then 
14270     BC 00 90 5D |  if_ne	jmp	#LR__1632
14274                 | '   for i=lineptr_e to lineptr-1
14274     4A 00 00 FF 
14278     A0 E4 05 F1 | 	add	objptr, ##38048
1427c     F2 2C 02 FB | 	rdlong	local04, objptr
14280     04 E4 85 F1 | 	sub	objptr, #4
14284     F2 2E 02 FB | 	rdlong	local05, objptr
14288     4A 00 00 FF 
1428c     9C E4 85 F1 | 	sub	objptr, ##38044
14290                 | LR__1630
14290     17 2D 52 F2 | 	cmps	local04, local05 wc
14294     78 00 90 3D |  if_ae	jmp	#LR__1631
14298     16 FF 01 F6 | 	mov	result3, local04
1429c     01 FE 65 F0 | 	shl	result3, #1
142a0     16 FF 01 F1 | 	add	result3, local04
142a4     02 FE 65 F0 | 	shl	result3, #2
142a8     47 00 00 FF 
142ac     9C E4 05 F1 | 	add	objptr, ##36508
142b0     F2 FE 01 F1 | 	add	result3, objptr
142b4     FF 26 02 FB | 	rdlong	local01, result3
142b8     04 FE 05 F1 | 	add	result3, #4
142bc     FF FC 01 FB | 	rdlong	result2, result3
142c0     16 FF 01 F6 | 	mov	result3, local04
142c4     01 FE 65 F0 | 	shl	result3, #1
142c8     16 FF 01 F1 | 	add	result3, local04
142cc     02 FE 65 F0 | 	shl	result3, #2
142d0     F2 FE 01 F1 | 	add	result3, objptr
142d4     08 FE 05 F1 | 	add	result3, #8
142d8     FF FE 01 FB | 	rdlong	result3, result3
142dc     FE 28 02 F6 | 	mov	local02, result2
142e0     FF 2A 02 F6 | 	mov	local03, result3
142e4                 | '     t1=compiledline(i)
142e4                 | '     if t1.result_type=token_else then lineptr_e=i : return
142e4     5A 2A 0E F2 | 	cmp	local03, #90 wz
142e8     47 00 00 FF 
142ec     9C E4 85 F1 | 	sub	objptr, ##36508
142f0     4A 00 00 AF 
142f4     A0 E4 05 A1 |  if_e	add	objptr, ##38048
142f8     F2 2C 62 AC |  if_e	wrlong	local04, objptr
142fc     4A 00 00 AF 
14300     A0 E4 85 A1 |  if_e	sub	objptr, ##38048
14304     28 00 90 AD |  if_e	jmp	#LR__1633
14308     01 2C 06 F1 | 	add	local04, #1
1430c     80 FF 9F FD | 	jmp	#LR__1630
14310                 | LR__1631
14310     4A 00 00 FF 
14314     9C E4 05 F1 | 	add	objptr, ##38044
14318     F2 2E 02 FB | 	rdlong	local05, objptr
1431c     01 2E 86 F1 | 	sub	local05, #1
14320     04 E4 05 F1 | 	add	objptr, #4
14324     F2 2E 62 FC | 	wrlong	local05, objptr
14328     4A 00 00 FF 
1432c     A0 E4 85 F1 | 	sub	objptr, ##38048
14330                 | LR__1632
14330                 | LR__1633
14330     A7 F0 03 F6 | 	mov	ptra, fp
14334     B2 00 A0 FD | 	call	#popregs_
14338                 | _do_if_ret
14338     2D 00 64 FD | 	ret
1433c                 | 
1433c                 | ' 
1433c                 | ' ' ----------------  inkey$
1433c                 | ' 
1433c                 | ' sub do_inkey
1433c                 | _do_inkey
1433c     02 4A 05 F6 | 	mov	COUNT_, #2
14340     A8 00 A0 FD | 	call	#pushregs_
14344     0C F0 07 F1 | 	add	ptra, #12
14348     4C 35 B1 FD | 	call	#_usbnew_spin2_get_key
1434c     45 00 00 FF 
14350     94 E4 05 F1 | 	add	objptr, ##35476
14354     F2 FA 61 FC | 	wrlong	result1, objptr
14358                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
14358     45 00 00 FF 
1435c     94 E4 85 F1 | 	sub	objptr, ##35476
14360     00 FA 0D F2 | 	cmp	result1, #0 wz
14364     94 00 90 AD |  if_e	jmp	#LR__1641
14368     45 00 00 FF 
1436c     94 E4 05 F1 | 	add	objptr, ##35476
14370     F2 1C 02 FB | 	rdlong	arg06, objptr
14374     45 00 00 FF 
14378     94 E4 85 F1 | 	sub	objptr, ##35476
1437c     00 00 40 FF 
14380     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
14384     45 00 00 CF 
14388     94 E4 05 C1 |  if_b	add	objptr, ##35476
1438c     F2 26 02 CB |  if_b	rdlong	local01, objptr
14390     45 00 00 CF 
14394     94 E4 85 C1 |  if_b	sub	objptr, ##35476
14398     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
1439c     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
143a0     58 00 90 3D |  if_ae	jmp	#LR__1641
143a4                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
143a4     50 00 00 FF 
143a8     5C E5 05 F1 | 	add	objptr, ##41308
143ac     F2 1C 02 FB | 	rdlong	arg06, objptr
143b0     50 00 00 FF 
143b4     5C E5 85 F1 | 	sub	objptr, ##41308
143b8     01 1C 0E F2 | 	cmp	arg06, #1 wz
143bc     3C 00 90 5D |  if_ne	jmp	#LR__1640
143c0     52 00 00 FF 
143c4     FC E4 05 F1 | 	add	objptr, ##42236
143c8     F2 14 02 FB | 	rdlong	arg02, objptr
143cc     04 E4 85 F1 | 	sub	objptr, #4
143d0     F2 1A 02 FB | 	rdlong	arg05, objptr
143d4     07 12 06 F6 | 	mov	arg01, #7
143d8     56 00 00 FF 
143dc     44 16 06 F6 | 	mov	arg03, ##44100
143e0     0C 18 C6 F9 | 	decod	arg04, #12
143e4     01 1C 66 F6 | 	neg	arg06, #1
143e8     47 00 00 FF 
143ec     2C E4 85 F1 | 	sub	objptr, ##36396
143f0     3C 38 B1 FD | 	call	#_audio096_spin2_play
143f4     0B 00 00 FF 
143f8     CC E4 85 F1 | 	sub	objptr, ##5836
143fc                 | LR__1640
143fc                 | LR__1641
143fc                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
143fc     45 00 00 FF 
14400     94 E4 05 F1 | 	add	objptr, ##35476
14404     F2 1C 0A FB | 	rdlong	arg06, objptr wz
14408     45 00 00 FF 
1440c     94 E4 85 F1 | 	sub	objptr, ##35476
14410     D4 01 90 AD |  if_e	jmp	#LR__1650
14414     45 00 00 FF 
14418     94 E4 05 F1 | 	add	objptr, ##35476
1441c     F2 1C 02 FB | 	rdlong	arg06, objptr
14420     45 00 00 FF 
14424     94 E4 85 F1 | 	sub	objptr, ##35476
14428     00 00 40 FF 
1442c     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
14430     45 00 00 CF 
14434     94 E4 05 C1 |  if_b	add	objptr, ##35476
14438     F2 26 02 CB |  if_b	rdlong	local01, objptr
1443c     45 00 00 CF 
14440     94 E4 85 C1 |  if_b	sub	objptr, ##35476
14444     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
14448     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
1444c     98 01 90 3D |  if_ae	jmp	#LR__1650
14450                 | '   if leds and 2 = 2 then 
14450     52 00 00 FF 
14454     38 E5 05 F1 | 	add	objptr, ##42296
14458     F2 26 0A FB | 	rdlong	local01, objptr wz
1445c     52 00 00 FF 
14460     38 E5 85 F1 | 	sub	objptr, ##42296
14464     58 01 90 AD |  if_e	jmp	#LR__1649
14468                 | '     if key>96 andalso key<123 then
14468     45 00 00 FF 
1446c     94 E4 05 F1 | 	add	objptr, ##35476
14470     F2 26 02 FB | 	rdlong	local01, objptr
14474     45 00 00 FF 
14478     94 E4 85 F1 | 	sub	objptr, ##35476
1447c     61 26 16 F2 | 	cmp	local01, #97 wc
14480     3C 00 90 CD |  if_b	jmp	#LR__1642
14484     45 00 00 FF 
14488     94 E4 05 F1 | 	add	objptr, ##35476
1448c     F2 26 02 FB | 	rdlong	local01, objptr
14490     45 00 00 FF 
14494     94 E4 85 F1 | 	sub	objptr, ##35476
14498     7B 26 16 F2 | 	cmp	local01, #123 wc
1449c     20 00 90 3D |  if_ae	jmp	#LR__1642
144a0     45 00 00 FF 
144a4     94 E4 05 F1 | 	add	objptr, ##35476
144a8     F2 26 02 FB | 	rdlong	local01, objptr
144ac     20 26 86 F1 | 	sub	local01, #32
144b0     F2 26 62 FC | 	wrlong	local01, objptr
144b4     45 00 00 FF 
144b8     94 E4 85 F1 | 	sub	objptr, ##35476
144bc     00 01 90 FD | 	jmp	#LR__1648
144c0                 | LR__1642
144c0     45 00 00 FF 
144c4     94 E4 05 F1 | 	add	objptr, ##35476
144c8     F2 26 02 FB | 	rdlong	local01, objptr
144cc     45 00 00 FF 
144d0     94 E4 85 F1 | 	sub	objptr, ##35476
144d4     41 26 16 F2 | 	cmp	local01, #65 wc
144d8     3C 00 90 CD |  if_b	jmp	#LR__1643
144dc     45 00 00 FF 
144e0     94 E4 05 F1 | 	add	objptr, ##35476
144e4     F2 26 02 FB | 	rdlong	local01, objptr
144e8     45 00 00 FF 
144ec     94 E4 85 F1 | 	sub	objptr, ##35476
144f0     5B 26 16 F2 | 	cmp	local01, #91 wc
144f4     20 00 90 3D |  if_ae	jmp	#LR__1643
144f8     45 00 00 FF 
144fc     94 E4 05 F1 | 	add	objptr, ##35476
14500     F2 26 02 FB | 	rdlong	local01, objptr
14504     20 26 06 F1 | 	add	local01, #32
14508     F2 26 62 FC | 	wrlong	local01, objptr
1450c     45 00 00 FF 
14510     94 E4 85 F1 | 	sub	objptr, ##35476
14514     A8 00 90 FD | 	jmp	#LR__1647
14518                 | LR__1643
14518     45 00 00 FF 
1451c     94 E4 05 F1 | 	add	objptr, ##35476
14520     F2 26 02 FB | 	rdlong	local01, objptr
14524     45 00 00 FF 
14528     94 E4 85 F1 | 	sub	objptr, ##35476
1452c     17 26 16 F2 | 	cmp	local01, #23 wc
14530     3C 00 90 CD |  if_b	jmp	#LR__1644
14534     45 00 00 FF 
14538     94 E4 05 F1 | 	add	objptr, ##35476
1453c     F2 26 02 FB | 	rdlong	local01, objptr
14540     45 00 00 FF 
14544     94 E4 85 F1 | 	sub	objptr, ##35476
14548     20 26 16 F2 | 	cmp	local01, #32 wc
1454c     20 00 90 3D |  if_ae	jmp	#LR__1644
14550     45 00 00 FF 
14554     94 E4 05 F1 | 	add	objptr, ##35476
14558     F2 26 02 FB | 	rdlong	local01, objptr
1455c     09 26 86 F1 | 	sub	local01, #9
14560     F2 26 62 FC | 	wrlong	local01, objptr
14564     45 00 00 FF 
14568     94 E4 85 F1 | 	sub	objptr, ##35476
1456c     50 00 90 FD | 	jmp	#LR__1646
14570                 | LR__1644
14570     45 00 00 FF 
14574     94 E4 05 F1 | 	add	objptr, ##35476
14578     F2 28 02 FB | 	rdlong	local02, objptr
1457c     45 00 00 FF 
14580     94 E4 85 F1 | 	sub	objptr, ##35476
14584     0E 28 16 F2 | 	cmp	local02, #14 wc
14588     34 00 90 CD |  if_b	jmp	#LR__1645
1458c     45 00 00 FF 
14590     94 E4 05 F1 | 	add	objptr, ##35476
14594     F2 26 02 FB | 	rdlong	local01, objptr
14598     45 00 00 FF 
1459c     94 E4 85 F1 | 	sub	objptr, ##35476
145a0     17 26 16 F2 | 	cmp	local01, #23 wc
145a4     52 00 00 CF 
145a8     3C E5 05 C1 |  if_b	add	objptr, ##42300
145ac     F2 28 02 CB |  if_b	rdlong	local02, objptr
145b0     27 28 06 C1 |  if_b	add	local02, #39
145b4     F2 28 62 CC |  if_b	wrlong	local02, objptr
145b8     52 00 00 CF 
145bc     3C E5 85 C1 |  if_b	sub	objptr, ##42300
145c0                 | LR__1645
145c0                 | LR__1646
145c0                 | LR__1647
145c0                 | LR__1648
145c0                 | LR__1649
145c0     45 00 00 FF 
145c4     94 E4 05 F1 | 	add	objptr, ##35476
145c8     F2 12 02 FB | 	rdlong	arg01, objptr
145cc     45 00 00 FF 
145d0     94 E4 85 F1 | 	sub	objptr, ##35476
145d4     64 04 B1 FD | 	call	#_scantochar
145d8     FD 12 02 F6 | 	mov	arg01, result1
145dc     74 5D B1 FD | 	call	#__system__Chr_S
145e0     A7 FA 61 FC | 	wrlong	result1, fp
145e4     0C 00 90 FD | 	jmp	#LR__1651
145e8                 | LR__1650
145e8     B5 01 00 FF 
145ec     37 29 06 F6 | 	mov	local02, ##@LR__5845
145f0     A7 28 62 FC | 	wrlong	local02, fp
145f4                 | LR__1651
145f4     08 4E 05 F1 | 	add	fp, #8
145f8     A7 3E 68 FC | 	wrlong	#31, fp
145fc     08 4E 85 F1 | 	sub	fp, #8
14600     A7 12 02 F6 | 	mov	arg01, fp
14604     B0 92 BF FD | 	call	#_push
14608     A7 F0 03 F6 | 	mov	ptra, fp
1460c     B2 00 A0 FD | 	call	#popregs_
14610                 | _do_inkey_ret
14610     2D 00 64 FD | 	ret
14614                 | 
14614                 | ' 
14614                 | ' ' ----------------  ink
14614                 | ' 
14614                 | ' sub do_ink
14614                 | _do_ink
14614     00 4A 05 F6 | 	mov	COUNT_, #0
14618     A8 00 A0 FD | 	call	#pushregs_
1461c     0C F0 07 F1 | 	add	ptra, #12
14620     FC 91 BF FD | 	call	#_pop
14624     FF 14 02 F6 | 	mov	arg02, result3
14628     A7 FA 61 FC | 	wrlong	result1, fp
1462c     04 4E 05 F1 | 	add	fp, #4
14630     A7 FC 61 FC | 	wrlong	result2, fp
14634     04 4E 05 F1 | 	add	fp, #4
14638     A7 14 62 FC | 	wrlong	arg02, fp
1463c     08 4E 85 F1 | 	sub	fp, #8
14640     A7 12 02 F6 | 	mov	arg01, fp
14644     BC 93 BF FD | 	call	#_converttoint
14648     37 00 00 FF 
1464c     5C E4 05 F1 | 	add	objptr, ##28252
14650     F2 FA 61 FC | 	wrlong	result1, objptr
14654     04 E4 85 F1 | 	sub	objptr, #4
14658     F2 14 02 FB | 	rdlong	arg02, objptr
1465c                 | ' 
1465c                 | ' write_color:=ff
1465c     37 00 00 FF 
14660     17 E4 85 F1 | 	sub	objptr, ##28183
14664     F2 FA 61 FC | 	wrlong	result1, objptr
14668                 | ' write_background:=bb
14668     04 E4 05 F1 | 	add	objptr, #4
1466c     F2 14 62 FC | 	wrlong	arg02, objptr
14670     37 00 00 FF 
14674     17 E4 05 F1 | 	add	objptr, ##28183
14678     F2 12 02 FB | 	rdlong	arg01, objptr
1467c     37 00 00 FF 
14680     5C E4 85 F1 | 	sub	objptr, ##28252
14684     40 0C B1 FD | 	call	#_hg010b_spin2_setcursorcolor
14688     A7 F0 03 F6 | 	mov	ptra, fp
1468c     B2 00 A0 FD | 	call	#popregs_
14690                 | _do_ink_ret
14690     2D 00 64 FD | 	ret
14694                 | 
14694                 | ' 
14694                 | ' ' ----------------  int
14694                 | ' 
14694                 | ' sub do_int
14694                 | _do_int
14694     02 4A 05 F6 | 	mov	COUNT_, #2
14698     A8 00 A0 FD | 	call	#pushregs_
1469c     10 F0 07 F1 | 	add	ptra, #16
146a0     7C 91 BF FD | 	call	#_pop
146a4     FE 26 02 F6 | 	mov	local01, result2
146a8     FF 28 02 F6 | 	mov	local02, result3
146ac     A7 FA 61 FC | 	wrlong	result1, fp
146b0     04 4E 05 F1 | 	add	fp, #4
146b4     A7 26 62 FC | 	wrlong	local01, fp
146b8     04 4E 05 F1 | 	add	fp, #4
146bc     A7 28 62 FC | 	wrlong	local02, fp
146c0                 | ' 
146c0                 | ' t1=pop()
146c0                 | ' select case t1.result_type
146c0     08 4E 85 F1 | 	sub	fp, #8
146c4     1E 28 0E F2 | 	cmp	local02, #30 wz
146c8     14 00 90 AD |  if_e	jmp	#LR__1660
146cc     1F 28 0E F2 | 	cmp	local02, #31 wz
146d0     20 00 90 AD |  if_e	jmp	#LR__1661
146d4     2B 28 0E F2 | 	cmp	local02, #43 wz
146d8     34 00 90 AD |  if_e	jmp	#LR__1662
146dc     50 00 90 FD | 	jmp	#LR__1663
146e0                 | LR__1660
146e0     A7 12 02 FB | 	rdlong	arg01, fp
146e4     00 14 06 F6 | 	mov	arg02, #0
146e8     68 6D B1 FD | 	call	#__system___float_tointeger
146ec     A7 FA 61 FC | 	wrlong	result1, fp
146f0     3C 00 90 FD | 	jmp	#LR__1663
146f4                 | LR__1661
146f4     A7 12 02 FB | 	rdlong	arg01, fp
146f8     A0 70 B1 FD | 	call	#__system____builtin_atof
146fc     FD 12 02 F6 | 	mov	arg01, result1
14700     00 14 06 F6 | 	mov	arg02, #0
14704     4C 6D B1 FD | 	call	#__system___float_tointeger
14708     A7 FA 61 FC | 	wrlong	result1, fp
1470c     20 00 90 FD | 	jmp	#LR__1663
14710                 | LR__1662
14710     A7 12 02 FB | 	rdlong	arg01, fp
14714     80 92 BF FD | 	call	#_convertstring
14718     FD 12 02 F6 | 	mov	arg01, result1
1471c     7C 70 B1 FD | 	call	#__system____builtin_atof
14720     FD 12 02 F6 | 	mov	arg01, result1
14724     00 14 06 F6 | 	mov	arg02, #0
14728     28 6D B1 FD | 	call	#__system___float_tointeger
1472c     A7 FA 61 FC | 	wrlong	result1, fp
14730                 | LR__1663
14730     08 4E 05 F1 | 	add	fp, #8
14734     A7 38 68 FC | 	wrlong	#28, fp
14738     08 4E 85 F1 | 	sub	fp, #8
1473c     A7 12 02 F6 | 	mov	arg01, fp
14740     74 91 BF FD | 	call	#_push
14744     A7 F0 03 F6 | 	mov	ptra, fp
14748     B2 00 A0 FD | 	call	#popregs_
1474c                 | _do_int_ret
1474c     2D 00 64 FD | 	ret
14750                 | 
14750                 | ' 
14750                 | ' ' ----------------  input
14750                 | ' 
14750                 | ' sub do_input
14750                 | _do_input
14750     11 4A 05 F6 | 	mov	COUNT_, #17
14754     A8 00 A0 FD | 	call	#pushregs_
14758     50 F1 07 F1 | 	add	ptra, #336
1475c     4A 00 00 FF 
14760     A0 E4 05 F1 | 	add	objptr, ##38048
14764     F2 FE 01 FB | 	rdlong	result3, objptr
14768     FF FC 01 F6 | 	mov	result2, result3
1476c     01 FC 65 F0 | 	shl	result2, #1
14770     FF FC 01 F1 | 	add	result2, result3
14774     02 FC 65 F0 | 	shl	result2, #2
14778     03 00 00 FF 
1477c     04 E4 85 F1 | 	sub	objptr, ##1540
14780     F2 FC 01 F1 | 	add	result2, objptr
14784     FE FC 01 FB | 	rdlong	result2, result2
14788     08 4E 05 F1 | 	add	fp, #8
1478c     A7 FC 61 FC | 	wrlong	result2, fp
14790                 | ' 
14790                 | ' numpar=compiledline(lineptr_e).result.uresult
14790                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
14790     08 4E 85 F1 | 	sub	fp, #8
14794     01 FC 15 F2 | 	cmp	result2, #1 wc
14798     47 00 00 FF 
1479c     9C E4 85 F1 | 	sub	objptr, ##36508
147a0     14 00 90 CD |  if_b	jmp	#LR__1670
147a4     08 4E 05 F1 | 	add	fp, #8
147a8     A7 FC 01 FB | 	rdlong	result2, fp
147ac     08 4E 85 F1 | 	sub	fp, #8
147b0     41 FC 15 F2 | 	cmp	result2, #65 wc
147b4     50 00 90 CD |  if_b	jmp	#LR__1671
147b8                 | LR__1670
147b8     00 12 06 F6 | 	mov	arg01, #0
147bc     F4 95 B1 FD | 	call	#__system___getiolock_0620
147c0     FD 12 02 F6 | 	mov	arg01, result1
147c4     48 39 B1 FD | 	call	#__system___lockmem
147c8     B5 01 00 FF 
147cc     38 15 06 F6 | 	mov	arg02, ##@LR__5846
147d0     00 12 06 F6 | 	mov	arg01, #0
147d4     00 16 06 F6 | 	mov	arg03, #0
147d8     2C 46 B1 FD | 	call	#__system___basic_print_string
147dc     00 12 06 F6 | 	mov	arg01, #0
147e0     D0 95 B1 FD | 	call	#__system___getiolock_0620
147e4     FD 00 68 FC | 	wrlong	#0, result1
147e8     50 00 00 FF 
147ec     10 E5 05 F1 | 	add	objptr, ##41232
147f0     F2 14 02 FB | 	rdlong	arg02, objptr
147f4     50 00 00 FF 
147f8     10 E5 85 F1 | 	sub	objptr, ##41232
147fc     27 12 06 F6 | 	mov	arg01, #39
14800     B8 FE B0 FD | 	call	#_printerror
14804     44 0B 90 FD | 	jmp	#LR__1720
14808                 | LR__1671
14808     08 4E 05 F1 | 	add	fp, #8
1480c     A7 FC 01 FB | 	rdlong	result2, fp
14810     01 FC 85 F1 | 	sub	result2, #1
14814     28 4F 05 F1 | 	add	fp, #296
14818     A7 FC 61 FC | 	wrlong	result2, fp
1481c     3C E4 05 F1 | 	add	objptr, #60
14820     F2 FC E1 FA | 	rdword	result2, objptr
14824     FE FC 51 F6 | 	abs	result2, result2 wc
14828     01 FC 45 F0 | 	shr	result2, #1
1482c     FE FC 81 F6 | 	negc	result2, result2
14830     0C 4E 05 F1 | 	add	fp, #12
14834     A7 FC 61 FC | 	wrlong	result2, fp
14838     02 E4 05 F1 | 	add	objptr, #2
1483c     F2 26 C2 FA | 	rdbyte	local01, objptr
14840     3E E4 85 F1 | 	sub	objptr, #62
14844     04 4E 05 F1 | 	add	fp, #4
14848     A7 26 62 FC | 	wrlong	local01, fp
1484c     40 4F 85 F1 | 	sub	fp, #320
14850                 | ' i=numpar-1
14850                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
14850                 | ' do
14850                 | LR__1672
14850     B0 BF BE FD | 	call	#_edit
14854     A7 FA 61 FC | 	wrlong	result1, fp
14858                 | ' 
14858                 | '   line$=edit()
14858                 | ' 
14858                 | '   if v.cursor_y=cpy+1 then
14858     3E E4 05 F1 | 	add	objptr, #62
1485c     F2 26 C2 FA | 	rdbyte	local01, objptr
14860     3E E4 85 F1 | 	sub	objptr, #62
14864     40 4F 05 F1 | 	add	fp, #320
14868     A7 16 02 FB | 	rdlong	arg03, fp
1486c     40 4F 85 F1 | 	sub	fp, #320
14870     01 16 06 F1 | 	add	arg03, #1
14874     0B 27 0A F2 | 	cmp	local01, arg03 wz
14878     6C 00 90 5D |  if_ne	jmp	#LR__1675
1487c     A7 26 02 FB | 	rdlong	local01, fp
14880     13 13 02 F6 | 	mov	arg01, local01
14884     09 29 02 F6 | 	mov	local02, arg01
14888     97 06 48 FB | 	callpa	#(@LR__1674-@LR__1673)>>2,fcache_load_ptr_
1488c                 | LR__1673
1488c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14890     01 28 06 51 |  if_ne	add	local02, #1
14894     F4 FF 9F 5D |  if_ne	jmp	#LR__1673
14898                 | LR__1674
14898     09 29 82 F1 | 	sub	local02, arg01
1489c     14 15 02 F6 | 	mov	arg02, local02
148a0     3C 4F 05 F1 | 	add	fp, #316
148a4     A7 16 02 FB | 	rdlong	arg03, fp
148a8     3C 4F 85 F1 | 	sub	fp, #316
148ac     0B 15 82 F1 | 	sub	arg02, arg03
148b0     37 00 00 FF 
148b4     54 E4 05 F1 | 	add	objptr, ##28244
148b8     F2 16 02 FB | 	rdlong	arg03, objptr
148bc     37 00 00 FF 
148c0     54 E4 85 F1 | 	sub	objptr, ##28244
148c4     0B 15 02 F1 | 	add	arg02, arg03
148c8     13 13 02 F6 | 	mov	arg01, local01
148cc     48 59 B1 FD | 	call	#__system__Right_S
148d0     FD 12 02 F6 | 	mov	arg01, result1
148d4     48 5D B1 FD | 	call	#__system__RTrim_S
148d8     FD 12 02 F6 | 	mov	arg01, result1
148dc     80 5C B1 FD | 	call	#__system__LTrim_S
148e0     A7 FA 61 FC | 	wrlong	result1, fp
148e4     14 00 90 FD | 	jmp	#LR__1676
148e8                 | LR__1675
148e8     A7 12 02 FB | 	rdlong	arg01, fp
148ec     30 5D B1 FD | 	call	#__system__RTrim_S
148f0     FD 12 02 F6 | 	mov	arg01, result1
148f4     68 5C B1 FD | 	call	#__system__LTrim_S
148f8     A7 FA 61 FC | 	wrlong	result1, fp
148fc                 | LR__1676
148fc                 | '   do
148fc                 | LR__1677
148fc     A7 14 02 FB | 	rdlong	arg02, fp
14900     B5 01 00 FF 
14904     43 17 06 F6 | 	mov	arg03, ##@LR__5847
14908     01 12 06 F6 | 	mov	arg01, #1
1490c     C8 5D B1 FD | 	call	#__system__Instr
14910     0C 4E 05 F1 | 	add	fp, #12
14914     A7 FA 61 FC | 	wrlong	result1, fp
14918                 | '    comma=instr(1,line$,",")  
14918                 | '    if comma>0  then 
14918     0C 4E 85 F1 | 	sub	fp, #12
1491c     01 FA 15 F2 | 	cmp	result1, #1 wc
14920     68 00 90 CD |  if_b	jmp	#LR__1680
14924     A7 12 02 FB | 	rdlong	arg01, fp
14928     0C 4E 05 F1 | 	add	fp, #12
1492c     A7 14 02 FB | 	rdlong	arg02, fp
14930     0C 4E 85 F1 | 	sub	fp, #12
14934     01 14 86 F1 | 	sub	arg02, #1
14938     54 58 B1 FD | 	call	#__system__Left_S
1493c     04 4E 05 F1 | 	add	fp, #4
14940     A7 FA 61 FC | 	wrlong	result1, fp
14944     04 4E 85 F1 | 	sub	fp, #4
14948     A7 26 02 FB | 	rdlong	local01, fp
1494c     13 13 02 F6 | 	mov	arg01, local01
14950     09 29 02 F6 | 	mov	local02, arg01
14954     97 06 48 FB | 	callpa	#(@LR__1679-@LR__1678)>>2,fcache_load_ptr_
14958                 | LR__1678
14958     14 FB C9 FA | 	rdbyte	result1, local02 wz
1495c     01 28 06 51 |  if_ne	add	local02, #1
14960     F4 FF 9F 5D |  if_ne	jmp	#LR__1678
14964                 | LR__1679
14964     09 29 82 F1 | 	sub	local02, arg01
14968     14 15 02 F6 | 	mov	arg02, local02
1496c     0C 4E 05 F1 | 	add	fp, #12
14970     A7 16 02 FB | 	rdlong	arg03, fp
14974     0C 4E 85 F1 | 	sub	fp, #12
14978     0B 15 82 F1 | 	sub	arg02, arg03
1497c     13 13 02 F6 | 	mov	arg01, local01
14980     94 58 B1 FD | 	call	#__system__Right_S
14984     A7 FA 61 FC | 	wrlong	result1, fp
14988     28 00 90 FD | 	jmp	#LR__1681
1498c                 | LR__1680
1498c     A7 12 02 FB | 	rdlong	arg01, fp
14990     8C 5C B1 FD | 	call	#__system__RTrim_S
14994     FD 12 02 F6 | 	mov	arg01, result1
14998     C4 5B B1 FD | 	call	#__system__LTrim_S
1499c     04 4E 05 F1 | 	add	fp, #4
149a0     A7 FA 61 FC | 	wrlong	result1, fp
149a4     04 4E 85 F1 | 	sub	fp, #4
149a8     B5 01 00 FF 
149ac     45 27 06 F6 | 	mov	local01, ##@LR__5848
149b0     A7 26 62 FC | 	wrlong	local01, fp
149b4                 | LR__1681
149b4     30 4F 05 F1 | 	add	fp, #304
149b8     A7 26 02 FB | 	rdlong	local01, fp
149bc     02 26 66 F0 | 	shl	local01, #2
149c0     04 4F 85 F1 | 	sub	fp, #260
149c4     A7 26 02 F1 | 	add	local01, fp
149c8     28 4E 85 F1 | 	sub	fp, #40
149cc     A7 FA 01 FB | 	rdlong	result1, fp
149d0     13 FB 61 FC | 	wrlong	result1, local01
149d4     2C 4F 05 F1 | 	add	fp, #300
149d8     A7 26 02 FB | 	rdlong	local01, fp
149dc     01 26 86 F1 | 	sub	local01, #1
149e0     A7 26 62 FC | 	wrlong	local01, fp
149e4     30 4F 85 F1 | 	sub	fp, #304
149e8     00 26 56 F2 | 	cmps	local01, #0 wc
149ec     18 00 90 CD |  if_b	jmp	#LR__1682
149f0     A7 12 02 FB | 	rdlong	arg01, fp
149f4     B5 01 00 FF 
149f8     46 15 06 F6 | 	mov	arg02, ##@LR__5849
149fc     38 37 B1 FD | 	call	#__system___string_cmp
14a00     00 FA 0D F2 | 	cmp	result1, #0 wz
14a04     F4 FE 9F 5D |  if_ne	jmp	#LR__1677
14a08                 | LR__1682
14a08     30 4F 05 F1 | 	add	fp, #304
14a0c     A7 26 02 FB | 	rdlong	local01, fp
14a10     30 4F 85 F1 | 	sub	fp, #304
14a14     00 26 56 F2 | 	cmps	local01, #0 wc
14a18     34 FE 9F 3D |  if_ae	jmp	#LR__1672
14a1c                 | ' 
14a1c                 | ' for i=0 to numpar-1
14a1c     30 4F 05 F1 | 	add	fp, #304
14a20     A7 00 68 FC | 	wrlong	#0, fp
14a24     28 4F 85 F1 | 	sub	fp, #296
14a28     A7 2A 02 FB | 	rdlong	local03, fp
14a2c     08 4E 85 F1 | 	sub	fp, #8
14a30                 | LR__1683
14a30     30 4F 05 F1 | 	add	fp, #304
14a34     A7 2C 02 FB | 	rdlong	local04, fp
14a38     30 4F 85 F1 | 	sub	fp, #304
14a3c     16 27 02 F6 | 	mov	local01, local04
14a40     15 27 52 F2 | 	cmps	local01, local03 wc
14a44     04 09 90 3D |  if_ae	jmp	#LR__1719
14a48                 | ' 
14a48                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
14a48     30 4F 05 F1 | 	add	fp, #304
14a4c     A7 16 02 FB | 	rdlong	arg03, fp
14a50     02 16 66 F0 | 	shl	arg03, #2
14a54     04 4F 85 F1 | 	sub	fp, #260
14a58     A7 16 02 F1 | 	add	arg03, fp
14a5c     0B 13 02 FB | 	rdlong	arg01, arg03
14a60     2C 4E 85 F1 | 	sub	fp, #44
14a64     0C 20 BF FD | 	call	#_isnum
14a68     FD 2E 02 F6 | 	mov	local05, result1
14a6c     30 4F 05 F1 | 	add	fp, #304
14a70     A7 16 02 FB | 	rdlong	arg03, fp
14a74     02 16 66 F0 | 	shl	arg03, #2
14a78     04 4F 85 F1 | 	sub	fp, #260
14a7c     A7 30 02 F6 | 	mov	local06, fp
14a80     A7 16 02 F1 | 	add	arg03, fp
14a84     0B 13 02 FB | 	rdlong	arg01, arg03
14a88     2C 4E 85 F1 | 	sub	fp, #44
14a8c     D0 23 BF FD | 	call	#_isint
14a90     FD 2E 2A F5 | 	andn	local05, result1 wz
14a94     52 00 00 5F 
14a98     68 E5 05 51 |  if_ne	add	objptr, ##42344
14a9c     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
14aa0     52 00 00 5F 
14aa4     68 E5 85 51 |  if_ne	sub	objptr, ##42344
14aa8                 | '   if isint(args(i)) then r=result_int 
14aa8     30 4F 05 F1 | 	add	fp, #304
14aac     A7 2E 02 FB | 	rdlong	local05, fp
14ab0     02 2E 66 F0 | 	shl	local05, #2
14ab4     04 4F 85 F1 | 	sub	fp, #260
14ab8     A7 2E 02 F1 | 	add	local05, fp
14abc     17 13 02 FB | 	rdlong	arg01, local05
14ac0     2C 4E 85 F1 | 	sub	fp, #44
14ac4     98 23 BF FD | 	call	#_isint
14ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
14acc     52 00 00 5F 
14ad0     68 E5 05 51 |  if_ne	add	objptr, ##42344
14ad4     F2 38 68 5C |  if_ne	wrlong	#28, objptr
14ad8     52 00 00 5F 
14adc     68 E5 85 51 |  if_ne	sub	objptr, ##42344
14ae0                 | '   if isdec(args(i)) then r=result_uint 
14ae0     30 4F 05 F1 | 	add	fp, #304
14ae4     A7 2E 02 FB | 	rdlong	local05, fp
14ae8     02 2E 66 F0 | 	shl	local05, #2
14aec     04 4F 85 F1 | 	sub	fp, #260
14af0     A7 2E 02 F1 | 	add	local05, fp
14af4     17 13 02 FB | 	rdlong	arg01, local05
14af8     2C 4E 85 F1 | 	sub	fp, #44
14afc     04 26 BF FD | 	call	#_isdec
14b00     00 FA 0D F2 | 	cmp	result1, #0 wz
14b04     52 00 00 5F 
14b08     68 E5 05 51 |  if_ne	add	objptr, ##42344
14b0c     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
14b10     52 00 00 5F 
14b14     68 E5 85 51 |  if_ne	sub	objptr, ##42344
14b18                 | '   if not isnum(args(i)) then 
14b18     30 4F 05 F1 | 	add	fp, #304
14b1c     A7 32 02 FB | 	rdlong	local07, fp
14b20     19 35 02 F6 | 	mov	local08, local07
14b24     02 34 66 F0 | 	shl	local08, #2
14b28     04 4F 85 F1 | 	sub	fp, #260
14b2c     A7 36 02 F6 | 	mov	local09, fp
14b30     A7 34 02 F1 | 	add	local08, fp
14b34     1A 13 02 FB | 	rdlong	arg01, local08
14b38     2C 4E 85 F1 | 	sub	fp, #44
14b3c     34 1F BF FD | 	call	#_isnum
14b40     FD 2E 22 F6 | 	not	local05, result1
14b44     00 2E 0E F2 | 	cmp	local05, #0 wz
14b48     44 01 90 AD |  if_e	jmp	#LR__1688
14b4c     52 00 00 FF 
14b50     68 E5 05 F1 | 	add	objptr, ##42344
14b54     F2 56 68 FC | 	wrlong	#43, objptr
14b58     52 00 00 FF 
14b5c     68 E5 85 F1 | 	sub	objptr, ##42344
14b60     04 4E 05 F1 | 	add	fp, #4
14b64     A7 12 02 FB | 	rdlong	arg01, fp
14b68     04 4E 85 F1 | 	sub	fp, #4
14b6c     09 29 02 F6 | 	mov	local02, arg01
14b70     97 06 48 FB | 	callpa	#(@LR__1685-@LR__1684)>>2,fcache_load_ptr_
14b74                 | LR__1684
14b74     14 FB C9 FA | 	rdbyte	result1, local02 wz
14b78     01 28 06 51 |  if_ne	add	local02, #1
14b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__1684
14b80                 | LR__1685
14b80     09 29 82 F1 | 	sub	local02, arg01
14b84     14 33 02 F6 | 	mov	local07, local02
14b88     38 4F 05 F1 | 	add	fp, #312
14b8c     A7 32 62 FC | 	wrlong	local07, fp
14b90     52 00 00 FF 
14b94     F0 E4 05 F1 | 	add	objptr, ##42224
14b98     F2 12 02 FB | 	rdlong	arg01, objptr
14b9c     19 13 82 F1 | 	sub	arg01, local07
14ba0     04 12 86 F1 | 	sub	arg01, #4
14ba4     03 12 26 F5 | 	andn	arg01, #3
14ba8     F2 12 62 FC | 	wrlong	arg01, objptr
14bac     52 00 00 FF 
14bb0     F0 E4 85 F1 | 	sub	objptr, ##42224
14bb4     A7 14 02 FB | 	rdlong	arg02, fp
14bb8     38 4F 85 F1 | 	sub	fp, #312
14bbc     9C FC B0 FD | 	call	#_pslpoke
14bc0                 | '     pslpoke memtop,l
14bc0                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
14bc0     34 4F 05 F1 | 	add	fp, #308
14bc4     A7 02 68 FC | 	wrlong	#1, fp
14bc8     04 4E 05 F1 | 	add	fp, #4
14bcc     A7 38 02 FB | 	rdlong	local10, fp
14bd0     38 4F 85 F1 | 	sub	fp, #312
14bd4     01 38 06 F1 | 	add	local10, #1
14bd8                 | LR__1686
14bd8     34 4F 05 F1 | 	add	fp, #308
14bdc     A7 2E 02 FB | 	rdlong	local05, fp
14be0     34 4F 85 F1 | 	sub	fp, #308
14be4     1C 2F 52 F2 | 	cmps	local05, local10 wc
14be8     84 00 90 3D |  if_ae	jmp	#LR__1687
14bec     52 00 00 FF 
14bf0     F0 E4 05 F1 | 	add	objptr, ##42224
14bf4     F2 32 02 FB | 	rdlong	local07, objptr
14bf8     52 00 00 FF 
14bfc     F0 E4 85 F1 | 	sub	objptr, ##42224
14c00     03 32 06 F1 | 	add	local07, #3
14c04     34 4F 05 F1 | 	add	fp, #308
14c08     A7 3A 02 FB | 	rdlong	local11, fp
14c0c     1D 33 02 F1 | 	add	local07, local11
14c10     04 4E 85 F1 | 	sub	fp, #4
14c14     A7 3C 02 FB | 	rdlong	local12, fp
14c18     02 3C 66 F0 | 	shl	local12, #2
14c1c     04 4F 85 F1 | 	sub	fp, #260
14c20     A7 3E 02 F6 | 	mov	local13, fp
14c24     A7 3C 02 F1 | 	add	local12, fp
14c28     1E 13 02 FB | 	rdlong	arg01, local12
14c2c     2C 4E 85 F1 | 	sub	fp, #44
14c30     01 40 06 F6 | 	mov	local14, #1
14c34     1D 15 02 F6 | 	mov	arg02, local11
14c38     01 16 06 F6 | 	mov	arg03, #1
14c3c     68 56 B1 FD | 	call	#__system__Mid_S
14c40     FD 14 C2 FA | 	rdbyte	arg02, result1
14c44     19 13 02 F6 | 	mov	arg01, local07
14c48     A0 FC B0 FD | 	call	#_pspoke
14c4c     34 4F 05 F1 | 	add	fp, #308
14c50     A7 34 02 FB | 	rdlong	local08, fp
14c54     1A 33 02 F6 | 	mov	local07, local08
14c58     1A 31 02 F6 | 	mov	local06, local08
14c5c     18 37 02 F6 | 	mov	local09, local06
14c60     01 36 06 F1 | 	add	local09, #1
14c64     A7 36 62 FC | 	wrlong	local09, fp
14c68     34 4F 85 F1 | 	sub	fp, #308
14c6c     68 FF 9F FD | 	jmp	#LR__1686
14c70                 | LR__1687
14c70     52 00 00 FF 
14c74     F0 E4 05 F1 | 	add	objptr, ##42224
14c78     F2 2E 02 FB | 	rdlong	local05, objptr
14c7c     52 00 00 FF 
14c80     F0 E4 85 F1 | 	sub	objptr, ##42224
14c84     10 4E 05 F1 | 	add	fp, #16
14c88     A7 2E 62 FC | 	wrlong	local05, fp
14c8c     10 4E 85 F1 | 	sub	fp, #16
14c90                 | LR__1688
14c90     8C 8B BF FD | 	call	#_pop
14c94     FE 2E 02 F6 | 	mov	local05, result2
14c98     FF 42 02 F6 | 	mov	local15, result3
14c9c     1C 4E 05 F1 | 	add	fp, #28
14ca0     A7 FA 61 FC | 	wrlong	result1, fp
14ca4     04 4E 05 F1 | 	add	fp, #4
14ca8     A7 2E 62 FC | 	wrlong	local05, fp
14cac     04 4E 05 F1 | 	add	fp, #4
14cb0     A7 42 62 FC | 	wrlong	local15, fp
14cb4     04 4E 85 F1 | 	sub	fp, #4
14cb8     A7 44 02 FB | 	rdlong	local16, fp
14cbc     0C 4E 85 F1 | 	sub	fp, #12
14cc0     A7 44 62 FC | 	wrlong	local16, fp
14cc4                 | '   t1=pop() : vartype=t1.result.twowords(1)
14cc4                 | '   select case vartype
14cc4     14 4E 85 F1 | 	sub	fp, #20
14cc8     22 47 0A F6 | 	mov	local17, local16 wz
14ccc     64 00 90 AD |  if_e	jmp	#LR__1689
14cd0     00 47 0E F2 | 	cmp	local17, #256 wz
14cd4     6C 00 90 AD |  if_e	jmp	#LR__1690
14cd8     01 47 0E F2 | 	cmp	local17, #257 wz
14cdc     74 00 90 AD |  if_e	jmp	#LR__1691
14ce0     02 47 0E F2 | 	cmp	local17, #258 wz
14ce4     7C 00 90 AD |  if_e	jmp	#LR__1692
14ce8     03 47 0E F2 | 	cmp	local17, #259 wz
14cec     84 00 90 AD |  if_e	jmp	#LR__1693
14cf0     04 47 0E F2 | 	cmp	local17, #260 wz
14cf4     8C 00 90 AD |  if_e	jmp	#LR__1694
14cf8     05 47 0E F2 | 	cmp	local17, #261 wz
14cfc     94 00 90 AD |  if_e	jmp	#LR__1695
14d00     06 47 0E F2 | 	cmp	local17, #262 wz
14d04     9C 00 90 AD |  if_e	jmp	#LR__1696
14d08     07 47 0E F2 | 	cmp	local17, #263 wz
14d0c     A4 00 90 AD |  if_e	jmp	#LR__1697
14d10     08 47 0E F2 | 	cmp	local17, #264 wz
14d14     AC 00 90 AD |  if_e	jmp	#LR__1698
14d18     09 47 0E F2 | 	cmp	local17, #265 wz
14d1c     B4 00 90 AD |  if_e	jmp	#LR__1699
14d20     0A 47 0E F2 | 	cmp	local17, #266 wz
14d24     BC 00 90 AD |  if_e	jmp	#LR__1700
14d28     0B 47 0E F2 | 	cmp	local17, #267 wz
14d2c     C4 00 90 AD |  if_e	jmp	#LR__1701
14d30     D0 00 90 FD | 	jmp	#LR__1702
14d34                 | LR__1689
14d34     18 4E 05 F1 | 	add	fp, #24
14d38     A7 18 68 FC | 	wrlong	#12, fp
14d3c     18 4E 85 F1 | 	sub	fp, #24
14d40     CC 00 90 FD | 	jmp	#LR__1703
14d44                 | LR__1690
14d44     18 4E 05 F1 | 	add	fp, #24
14d48     A7 18 68 FC | 	wrlong	#12, fp
14d4c     18 4E 85 F1 | 	sub	fp, #24
14d50     BC 00 90 FD | 	jmp	#LR__1703
14d54                 | LR__1691
14d54     18 4E 05 F1 | 	add	fp, #24
14d58     A7 02 68 FC | 	wrlong	#1, fp
14d5c     18 4E 85 F1 | 	sub	fp, #24
14d60     AC 00 90 FD | 	jmp	#LR__1703
14d64                 | LR__1692
14d64     18 4E 05 F1 | 	add	fp, #24
14d68     A7 02 68 FC | 	wrlong	#1, fp
14d6c     18 4E 85 F1 | 	sub	fp, #24
14d70     9C 00 90 FD | 	jmp	#LR__1703
14d74                 | LR__1693
14d74     18 4E 05 F1 | 	add	fp, #24
14d78     A7 04 68 FC | 	wrlong	#2, fp
14d7c     18 4E 85 F1 | 	sub	fp, #24
14d80     8C 00 90 FD | 	jmp	#LR__1703
14d84                 | LR__1694
14d84     18 4E 05 F1 | 	add	fp, #24
14d88     A7 04 68 FC | 	wrlong	#2, fp
14d8c     18 4E 85 F1 | 	sub	fp, #24
14d90     7C 00 90 FD | 	jmp	#LR__1703
14d94                 | LR__1695
14d94     18 4E 05 F1 | 	add	fp, #24
14d98     A7 08 68 FC | 	wrlong	#4, fp
14d9c     18 4E 85 F1 | 	sub	fp, #24
14da0     6C 00 90 FD | 	jmp	#LR__1703
14da4                 | LR__1696
14da4     18 4E 05 F1 | 	add	fp, #24
14da8     A7 08 68 FC | 	wrlong	#4, fp
14dac     18 4E 85 F1 | 	sub	fp, #24
14db0     5C 00 90 FD | 	jmp	#LR__1703
14db4                 | LR__1697
14db4     18 4E 05 F1 | 	add	fp, #24
14db8     A7 10 68 FC | 	wrlong	#8, fp
14dbc     18 4E 85 F1 | 	sub	fp, #24
14dc0     4C 00 90 FD | 	jmp	#LR__1703
14dc4                 | LR__1698
14dc4     18 4E 05 F1 | 	add	fp, #24
14dc8     A7 10 68 FC | 	wrlong	#8, fp
14dcc     18 4E 85 F1 | 	sub	fp, #24
14dd0     3C 00 90 FD | 	jmp	#LR__1703
14dd4                 | LR__1699
14dd4     18 4E 05 F1 | 	add	fp, #24
14dd8     A7 0C 68 FC | 	wrlong	#6, fp
14ddc     18 4E 85 F1 | 	sub	fp, #24
14de0     2C 00 90 FD | 	jmp	#LR__1703
14de4                 | LR__1700
14de4     18 4E 05 F1 | 	add	fp, #24
14de8     A7 10 68 FC | 	wrlong	#8, fp
14dec     18 4E 85 F1 | 	sub	fp, #24
14df0     1C 00 90 FD | 	jmp	#LR__1703
14df4                 | LR__1701
14df4     18 4E 05 F1 | 	add	fp, #24
14df8     A7 0A 68 FC | 	wrlong	#5, fp
14dfc     18 4E 85 F1 | 	sub	fp, #24
14e00     0C 00 90 FD | 	jmp	#LR__1703
14e04                 | LR__1702
14e04     18 4E 05 F1 | 	add	fp, #24
14e08     A7 18 68 FC | 	wrlong	#12, fp
14e0c     18 4E 85 F1 | 	sub	fp, #24
14e10                 | LR__1703
14e10                 | '   if esize=12 andalso t1.result.uresult<$80000 then
14e10     18 4E 05 F1 | 	add	fp, #24
14e14     A7 44 02 FB | 	rdlong	local16, fp
14e18     18 4E 85 F1 | 	sub	fp, #24
14e1c     0C 44 0E F2 | 	cmp	local16, #12 wz
14e20     74 01 90 5D |  if_ne	jmp	#LR__1708
14e24     1C 4E 05 F1 | 	add	fp, #28
14e28     A7 32 02 FB | 	rdlong	local07, fp
14e2c     1C 4E 85 F1 | 	sub	fp, #28
14e30     00 04 00 FF 
14e34     00 32 16 F2 | 	cmp	local07, ##524288 wc
14e38     5C 01 90 3D |  if_ae	jmp	#LR__1708
14e3c                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
14e3c     52 00 00 FF 
14e40     68 E5 05 F1 | 	add	objptr, ##42344
14e44     F2 44 02 FB | 	rdlong	local16, objptr
14e48     52 00 00 FF 
14e4c     68 E5 85 F1 | 	sub	objptr, ##42344
14e50     1C 44 0E F2 | 	cmp	local16, #28 wz
14e54     38 00 90 5D |  if_ne	jmp	#LR__1704
14e58     1C 4E 05 F1 | 	add	fp, #28
14e5c     A7 44 02 FB | 	rdlong	local16, fp
14e60     14 4F 05 F1 | 	add	fp, #276
14e64     A7 32 02 FB | 	rdlong	local07, fp
14e68     19 35 02 F6 | 	mov	local08, local07
14e6c     02 34 66 F0 | 	shl	local08, #2
14e70     04 4F 85 F1 | 	sub	fp, #260
14e74     A7 36 02 F6 | 	mov	local09, fp
14e78     A7 34 02 F1 | 	add	local08, fp
14e7c     1A 13 02 FB | 	rdlong	arg01, local08
14e80     00 14 06 F6 | 	mov	arg02, #0
14e84     2C 4E 85 F1 | 	sub	fp, #44
14e88     78 67 B1 FD | 	call	#__system____builtin_atoi
14e8c     22 FB 61 FC | 	wrlong	result1, local16
14e90                 | LR__1704
14e90                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
14e90     52 00 00 FF 
14e94     68 E5 05 F1 | 	add	objptr, ##42344
14e98     F2 44 02 FB | 	rdlong	local16, objptr
14e9c     52 00 00 FF 
14ea0     68 E5 85 F1 | 	sub	objptr, ##42344
14ea4     1D 44 0E F2 | 	cmp	local16, #29 wz
14ea8     38 00 90 5D |  if_ne	jmp	#LR__1705
14eac     1C 4E 05 F1 | 	add	fp, #28
14eb0     A7 44 02 FB | 	rdlong	local16, fp
14eb4     14 4F 05 F1 | 	add	fp, #276
14eb8     A7 32 02 FB | 	rdlong	local07, fp
14ebc     19 35 02 F6 | 	mov	local08, local07
14ec0     02 34 66 F0 | 	shl	local08, #2
14ec4     04 4F 85 F1 | 	sub	fp, #260
14ec8     A7 36 02 F6 | 	mov	local09, fp
14ecc     A7 34 02 F1 | 	add	local08, fp
14ed0     1A 13 02 FB | 	rdlong	arg01, local08
14ed4     00 14 06 F6 | 	mov	arg02, #0
14ed8     2C 4E 85 F1 | 	sub	fp, #44
14edc     24 67 B1 FD | 	call	#__system____builtin_atoi
14ee0     22 FB 61 FC | 	wrlong	result1, local16
14ee4                 | LR__1705
14ee4                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
14ee4     52 00 00 FF 
14ee8     68 E5 05 F1 | 	add	objptr, ##42344
14eec     F2 44 02 FB | 	rdlong	local16, objptr
14ef0     52 00 00 FF 
14ef4     68 E5 85 F1 | 	sub	objptr, ##42344
14ef8     1E 44 0E F2 | 	cmp	local16, #30 wz
14efc     3C 00 90 5D |  if_ne	jmp	#LR__1706
14f00     30 4F 05 F1 | 	add	fp, #304
14f04     A7 32 02 FB | 	rdlong	local07, fp
14f08     02 32 66 F0 | 	shl	local07, #2
14f0c     04 4F 85 F1 | 	sub	fp, #260
14f10     A7 34 02 F6 | 	mov	local08, fp
14f14     A7 32 02 F1 | 	add	local07, fp
14f18     19 13 02 FB | 	rdlong	arg01, local07
14f1c     2C 4E 85 F1 | 	sub	fp, #44
14f20     78 68 B1 FD | 	call	#__system____builtin_atof
14f24     28 4E 05 F1 | 	add	fp, #40
14f28     A7 FA 61 FC | 	wrlong	result1, fp
14f2c     0C 4E 85 F1 | 	sub	fp, #12
14f30     A7 44 02 FB | 	rdlong	local16, fp
14f34     1C 4E 85 F1 | 	sub	fp, #28
14f38     22 FB 61 FC | 	wrlong	result1, local16
14f3c                 | LR__1706
14f3c                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
14f3c     52 00 00 FF 
14f40     68 E5 05 F1 | 	add	objptr, ##42344
14f44     F2 44 02 FB | 	rdlong	local16, objptr
14f48     52 00 00 FF 
14f4c     68 E5 85 F1 | 	sub	objptr, ##42344
14f50     2B 44 0E F2 | 	cmp	local16, #43 wz
14f54     18 00 90 5D |  if_ne	jmp	#LR__1707
14f58     1C 4E 05 F1 | 	add	fp, #28
14f5c     A7 12 02 FB | 	rdlong	arg01, fp
14f60     0C 4E 85 F1 | 	sub	fp, #12
14f64     A7 14 02 FB | 	rdlong	arg02, fp
14f68     10 4E 85 F1 | 	sub	fp, #16
14f6c     09 15 62 FC | 	wrlong	arg02, arg01
14f70                 | LR__1707
14f70     1C 4E 05 F1 | 	add	fp, #28
14f74     A7 12 02 FB | 	rdlong	arg01, fp
14f78     1C 4E 85 F1 | 	sub	fp, #28
14f7c     08 12 06 F1 | 	add	arg01, #8
14f80     52 00 00 FF 
14f84     68 E5 05 F1 | 	add	objptr, ##42344
14f88     F2 14 02 FB | 	rdlong	arg02, objptr
14f8c     52 00 00 FF 
14f90     68 E5 85 F1 | 	sub	objptr, ##42344
14f94     09 15 62 FC | 	wrlong	arg02, arg01
14f98                 | LR__1708
14f98                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
14f98     18 4E 05 F1 | 	add	fp, #24
14f9c     A7 44 02 FB | 	rdlong	local16, fp
14fa0     18 4E 85 F1 | 	sub	fp, #24
14fa4     0C 44 0E F2 | 	cmp	local16, #12 wz
14fa8     94 01 90 5D |  if_ne	jmp	#LR__1713
14fac     1C 4E 05 F1 | 	add	fp, #28
14fb0     A7 32 02 FB | 	rdlong	local07, fp
14fb4     1C 4E 85 F1 | 	sub	fp, #28
14fb8     00 04 00 FF 
14fbc     00 32 16 F2 | 	cmp	local07, ##524288 wc
14fc0     7C 01 90 CD |  if_b	jmp	#LR__1713
14fc4                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
14fc4     52 00 00 FF 
14fc8     68 E5 05 F1 | 	add	objptr, ##42344
14fcc     F2 44 02 FB | 	rdlong	local16, objptr
14fd0     52 00 00 FF 
14fd4     68 E5 85 F1 | 	sub	objptr, ##42344
14fd8     1C 44 0E F2 | 	cmp	local16, #28 wz
14fdc     40 00 90 5D |  if_ne	jmp	#LR__1709
14fe0     1C 4E 05 F1 | 	add	fp, #28
14fe4     A7 44 02 FB | 	rdlong	local16, fp
14fe8     14 4F 05 F1 | 	add	fp, #276
14fec     A7 32 02 FB | 	rdlong	local07, fp
14ff0     19 35 02 F6 | 	mov	local08, local07
14ff4     02 34 66 F0 | 	shl	local08, #2
14ff8     04 4F 85 F1 | 	sub	fp, #260
14ffc     A7 36 02 F6 | 	mov	local09, fp
15000     A7 34 02 F1 | 	add	local08, fp
15004     1A 13 02 FB | 	rdlong	arg01, local08
15008     00 14 06 F6 | 	mov	arg02, #0
1500c     2C 4E 85 F1 | 	sub	fp, #44
15010     F0 65 B1 FD | 	call	#__system____builtin_atoi
15014     FD 14 02 F6 | 	mov	arg02, result1
15018     22 13 02 F6 | 	mov	arg01, local16
1501c     3C F8 B0 FD | 	call	#_pslpoke
15020                 | LR__1709
15020                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
15020     52 00 00 FF 
15024     68 E5 05 F1 | 	add	objptr, ##42344
15028     F2 44 02 FB | 	rdlong	local16, objptr
1502c     52 00 00 FF 
15030     68 E5 85 F1 | 	sub	objptr, ##42344
15034     1D 44 0E F2 | 	cmp	local16, #29 wz
15038     40 00 90 5D |  if_ne	jmp	#LR__1710
1503c     1C 4E 05 F1 | 	add	fp, #28
15040     A7 44 02 FB | 	rdlong	local16, fp
15044     14 4F 05 F1 | 	add	fp, #276
15048     A7 32 02 FB | 	rdlong	local07, fp
1504c     19 35 02 F6 | 	mov	local08, local07
15050     02 34 66 F0 | 	shl	local08, #2
15054     04 4F 85 F1 | 	sub	fp, #260
15058     A7 36 02 F6 | 	mov	local09, fp
1505c     A7 34 02 F1 | 	add	local08, fp
15060     1A 13 02 FB | 	rdlong	arg01, local08
15064     00 14 06 F6 | 	mov	arg02, #0
15068     2C 4E 85 F1 | 	sub	fp, #44
1506c     94 65 B1 FD | 	call	#__system____builtin_atoi
15070     FD 14 02 F6 | 	mov	arg02, result1
15074     22 13 02 F6 | 	mov	arg01, local16
15078     E0 F7 B0 FD | 	call	#_pslpoke
1507c                 | LR__1710
1507c                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1507c     52 00 00 FF 
15080     68 E5 05 F1 | 	add	objptr, ##42344
15084     F2 44 02 FB | 	rdlong	local16, objptr
15088     52 00 00 FF 
1508c     68 E5 85 F1 | 	sub	objptr, ##42344
15090     1E 44 0E F2 | 	cmp	local16, #30 wz
15094     4C 00 90 5D |  if_ne	jmp	#LR__1711
15098     30 4F 05 F1 | 	add	fp, #304
1509c     A7 32 02 FB | 	rdlong	local07, fp
150a0     02 32 66 F0 | 	shl	local07, #2
150a4     04 4F 85 F1 | 	sub	fp, #260
150a8     A7 34 02 F6 | 	mov	local08, fp
150ac     A7 32 02 F1 | 	add	local07, fp
150b0     19 13 02 FB | 	rdlong	arg01, local07
150b4     2C 4E 85 F1 | 	sub	fp, #44
150b8     E0 66 B1 FD | 	call	#__system____builtin_atof
150bc     28 4E 05 F1 | 	add	fp, #40
150c0     A7 FA 61 FC | 	wrlong	result1, fp
150c4     0C 4E 85 F1 | 	sub	fp, #12
150c8     A7 44 02 FB | 	rdlong	local16, fp
150cc     0C 4E 05 F1 | 	add	fp, #12
150d0     A7 12 02 F6 | 	mov	arg01, fp
150d4     28 4E 85 F1 | 	sub	fp, #40
150d8     09 15 02 FB | 	rdlong	arg02, arg01
150dc     22 13 02 F6 | 	mov	arg01, local16
150e0     78 F7 B0 FD | 	call	#_pslpoke
150e4                 | LR__1711
150e4                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
150e4     52 00 00 FF 
150e8     68 E5 05 F1 | 	add	objptr, ##42344
150ec     F2 44 02 FB | 	rdlong	local16, objptr
150f0     52 00 00 FF 
150f4     68 E5 85 F1 | 	sub	objptr, ##42344
150f8     2B 44 0E F2 | 	cmp	local16, #43 wz
150fc     18 00 90 5D |  if_ne	jmp	#LR__1712
15100     1C 4E 05 F1 | 	add	fp, #28
15104     A7 12 02 FB | 	rdlong	arg01, fp
15108     0C 4E 85 F1 | 	sub	fp, #12
1510c     A7 14 02 FB | 	rdlong	arg02, fp
15110     10 4E 85 F1 | 	sub	fp, #16
15114     44 F7 B0 FD | 	call	#_pslpoke
15118                 | LR__1712
15118     1C 4E 05 F1 | 	add	fp, #28
1511c     A7 12 02 FB | 	rdlong	arg01, fp
15120     1C 4E 85 F1 | 	sub	fp, #28
15124     08 12 06 F1 | 	add	arg01, #8
15128     52 00 00 FF 
1512c     68 E5 05 F1 | 	add	objptr, ##42344
15130     F2 14 02 FB | 	rdlong	arg02, objptr
15134     52 00 00 FF 
15138     68 E5 85 F1 | 	sub	objptr, ##42344
1513c     1C F7 B0 FD | 	call	#_pslpoke
15140                 | LR__1713
15140                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
15140     18 4E 05 F1 | 	add	fp, #24
15144     A7 44 02 FB | 	rdlong	local16, fp
15148     18 4E 85 F1 | 	sub	fp, #24
1514c     05 44 0E F2 | 	cmp	local16, #5 wz
15150     52 00 00 AF 
15154     68 E5 05 A1 |  if_e	add	objptr, ##42344
15158     F2 42 02 AB |  if_e	rdlong	local15, objptr
1515c     52 00 00 AF 
15160     68 E5 85 A1 |  if_e	sub	objptr, ##42344
15164     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
15168     18 00 90 5D |  if_ne	jmp	#LR__1714
1516c     1C 4E 05 F1 | 	add	fp, #28
15170     A7 12 02 FB | 	rdlong	arg01, fp
15174     0C 4E 85 F1 | 	sub	fp, #12
15178     A7 14 02 FB | 	rdlong	arg02, fp
1517c     10 4E 85 F1 | 	sub	fp, #16
15180     D8 F6 B0 FD | 	call	#_pslpoke
15184                 | LR__1714
15184                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
15184     18 4E 05 F1 | 	add	fp, #24
15188     A7 44 02 FB | 	rdlong	local16, fp
1518c     18 4E 85 F1 | 	sub	fp, #24
15190     04 44 0E F2 | 	cmp	local16, #4 wz
15194     54 00 90 5D |  if_ne	jmp	#LR__1715
15198     52 00 00 FF 
1519c     68 E5 05 F1 | 	add	objptr, ##42344
151a0     F2 42 02 FB | 	rdlong	local15, objptr
151a4     52 00 00 FF 
151a8     68 E5 85 F1 | 	sub	objptr, ##42344
151ac     2B 42 0E F2 | 	cmp	local15, #43 wz
151b0     38 00 90 AD |  if_e	jmp	#LR__1715
151b4     1C 4E 05 F1 | 	add	fp, #28
151b8     A7 44 02 FB | 	rdlong	local16, fp
151bc     14 4F 05 F1 | 	add	fp, #276
151c0     A7 34 02 FB | 	rdlong	local08, fp
151c4     02 34 66 F0 | 	shl	local08, #2
151c8     04 4F 85 F1 | 	sub	fp, #260
151cc     A7 34 02 F1 | 	add	local08, fp
151d0     1A 13 02 FB | 	rdlong	arg01, local08
151d4     00 14 06 F6 | 	mov	arg02, #0
151d8     2C 4E 85 F1 | 	sub	fp, #44
151dc     24 64 B1 FD | 	call	#__system____builtin_atoi
151e0     FD 14 02 F6 | 	mov	arg02, result1
151e4     22 13 02 F6 | 	mov	arg01, local16
151e8     70 F6 B0 FD | 	call	#_pslpoke
151ec                 | LR__1715
151ec                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
151ec     18 4E 05 F1 | 	add	fp, #24
151f0     A7 44 02 FB | 	rdlong	local16, fp
151f4     18 4E 85 F1 | 	sub	fp, #24
151f8     02 44 0E F2 | 	cmp	local16, #2 wz
151fc     54 00 90 5D |  if_ne	jmp	#LR__1716
15200     52 00 00 FF 
15204     68 E5 05 F1 | 	add	objptr, ##42344
15208     F2 42 02 FB | 	rdlong	local15, objptr
1520c     52 00 00 FF 
15210     68 E5 85 F1 | 	sub	objptr, ##42344
15214     2B 42 0E F2 | 	cmp	local15, #43 wz
15218     38 00 90 AD |  if_e	jmp	#LR__1716
1521c     1C 4E 05 F1 | 	add	fp, #28
15220     A7 44 02 FB | 	rdlong	local16, fp
15224     14 4F 05 F1 | 	add	fp, #276
15228     A7 34 02 FB | 	rdlong	local08, fp
1522c     02 34 66 F0 | 	shl	local08, #2
15230     04 4F 85 F1 | 	sub	fp, #260
15234     A7 34 02 F1 | 	add	local08, fp
15238     1A 13 02 FB | 	rdlong	arg01, local08
1523c     00 14 06 F6 | 	mov	arg02, #0
15240     2C 4E 85 F1 | 	sub	fp, #44
15244     BC 63 B1 FD | 	call	#__system____builtin_atoi
15248     FD 14 02 F6 | 	mov	arg02, result1
1524c     22 13 02 F6 | 	mov	arg01, local16
15250     50 F6 B0 FD | 	call	#_psdpoke
15254                 | LR__1716
15254                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
15254     18 4E 05 F1 | 	add	fp, #24
15258     A7 44 02 FB | 	rdlong	local16, fp
1525c     18 4E 85 F1 | 	sub	fp, #24
15260     01 44 0E F2 | 	cmp	local16, #1 wz
15264     54 00 90 5D |  if_ne	jmp	#LR__1717
15268     52 00 00 FF 
1526c     68 E5 05 F1 | 	add	objptr, ##42344
15270     F2 42 02 FB | 	rdlong	local15, objptr
15274     52 00 00 FF 
15278     68 E5 85 F1 | 	sub	objptr, ##42344
1527c     2B 42 0E F2 | 	cmp	local15, #43 wz
15280     38 00 90 AD |  if_e	jmp	#LR__1717
15284     1C 4E 05 F1 | 	add	fp, #28
15288     A7 44 02 FB | 	rdlong	local16, fp
1528c     14 4F 05 F1 | 	add	fp, #276
15290     A7 34 02 FB | 	rdlong	local08, fp
15294     02 34 66 F0 | 	shl	local08, #2
15298     04 4F 85 F1 | 	sub	fp, #260
1529c     A7 34 02 F1 | 	add	local08, fp
152a0     1A 13 02 FB | 	rdlong	arg01, local08
152a4     00 14 06 F6 | 	mov	arg02, #0
152a8     2C 4E 85 F1 | 	sub	fp, #44
152ac     54 63 B1 FD | 	call	#__system____builtin_atoi
152b0     FD 14 02 F6 | 	mov	arg02, result1
152b4     22 13 02 F6 | 	mov	arg01, local16
152b8     30 F6 B0 FD | 	call	#_pspoke
152bc                 | LR__1717
152bc                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
152bc     18 4E 05 F1 | 	add	fp, #24
152c0     A7 44 02 FB | 	rdlong	local16, fp
152c4     18 4E 85 F1 | 	sub	fp, #24
152c8     06 44 0E F2 | 	cmp	local16, #6 wz
152cc     64 00 90 5D |  if_ne	jmp	#LR__1718
152d0     52 00 00 FF 
152d4     68 E5 05 F1 | 	add	objptr, ##42344
152d8     F2 42 02 FB | 	rdlong	local15, objptr
152dc     52 00 00 FF 
152e0     68 E5 85 F1 | 	sub	objptr, ##42344
152e4     2B 42 0E F2 | 	cmp	local15, #43 wz
152e8     48 00 90 AD |  if_e	jmp	#LR__1718
152ec     30 4F 05 F1 | 	add	fp, #304
152f0     A7 32 02 FB | 	rdlong	local07, fp
152f4     02 32 66 F0 | 	shl	local07, #2
152f8     04 4F 85 F1 | 	sub	fp, #260
152fc     A7 32 02 F1 | 	add	local07, fp
15300     19 13 02 FB | 	rdlong	arg01, local07
15304     2C 4E 85 F1 | 	sub	fp, #44
15308     90 64 B1 FD | 	call	#__system____builtin_atof
1530c     28 4E 05 F1 | 	add	fp, #40
15310     A7 FA 61 FC | 	wrlong	result1, fp
15314     0C 4E 85 F1 | 	sub	fp, #12
15318     A7 44 02 FB | 	rdlong	local16, fp
1531c     0C 4E 05 F1 | 	add	fp, #12
15320     A7 12 02 F6 | 	mov	arg01, fp
15324     28 4E 85 F1 | 	sub	fp, #40
15328     09 15 02 FB | 	rdlong	arg02, arg01
1532c     22 13 02 F6 | 	mov	arg01, local16
15330     28 F5 B0 FD | 	call	#_pslpoke
15334                 | LR__1718
15334     30 4F 05 F1 | 	add	fp, #304
15338     A7 42 02 FB | 	rdlong	local15, fp
1533c     01 42 06 F1 | 	add	local15, #1
15340     A7 42 62 FC | 	wrlong	local15, fp
15344     30 4F 85 F1 | 	sub	fp, #304
15348     E4 F6 9F FD | 	jmp	#LR__1683
1534c                 | LR__1719
1534c                 | LR__1720
1534c     A7 F0 03 F6 | 	mov	ptra, fp
15350     B2 00 A0 FD | 	call	#popregs_
15354                 | _do_input_ret
15354     2D 00 64 FD | 	ret
15358                 | 
15358                 | ' 
15358                 | ' ' ----------------  left$
15358                 | ' 
15358                 | ' sub do_left
15358                 | _do_left
15358     00 4A 05 F6 | 	mov	COUNT_, #0
1535c     A8 00 A0 FD | 	call	#pushregs_
15360     14 F0 07 F1 | 	add	ptra, #20
15364     4A 00 00 FF 
15368     A0 E4 05 F1 | 	add	objptr, ##38048
1536c     F2 16 02 FB | 	rdlong	arg03, objptr
15370     0B 15 02 F6 | 	mov	arg02, arg03
15374     01 14 66 F0 | 	shl	arg02, #1
15378     0B 15 02 F1 | 	add	arg02, arg03
1537c     02 14 66 F0 | 	shl	arg02, #2
15380     03 00 00 FF 
15384     04 E4 85 F1 | 	sub	objptr, ##1540
15388     F2 14 02 F1 | 	add	arg02, objptr
1538c     0A 17 02 FB | 	rdlong	arg03, arg02
15390     0C 4E 05 F1 | 	add	fp, #12
15394     A7 16 62 FC | 	wrlong	arg03, fp
15398                 | ' 
15398                 | ' numpar=compiledline(lineptr_e).result.uresult
15398                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
15398     0C 4E 85 F1 | 	sub	fp, #12
1539c     02 16 0E F2 | 	cmp	arg03, #2 wz
153a0     47 00 00 FF 
153a4     9C E4 85 F1 | 	sub	objptr, ##36508
153a8     40 00 90 AD |  if_e	jmp	#LR__1730
153ac     00 12 06 F6 | 	mov	arg01, #0
153b0     00 8A B1 FD | 	call	#__system___getiolock_0620
153b4     FD 12 02 F6 | 	mov	arg01, result1
153b8     54 2D B1 FD | 	call	#__system___lockmem
153bc     B5 01 00 FF 
153c0     47 15 06 F6 | 	mov	arg02, ##@LR__5850
153c4     00 12 06 F6 | 	mov	arg01, #0
153c8     00 16 06 F6 | 	mov	arg03, #0
153cc     38 3A B1 FD | 	call	#__system___basic_print_string
153d0     00 12 06 F6 | 	mov	arg01, #0
153d4     DC 89 B1 FD | 	call	#__system___getiolock_0620
153d8     FD 00 68 FC | 	wrlong	#0, result1
153dc     27 12 06 F6 | 	mov	arg01, #39
153e0     00 14 06 F6 | 	mov	arg02, #0
153e4     D4 F2 B0 FD | 	call	#_printerror
153e8     EC 00 90 FD | 	jmp	#LR__1733
153ec                 | LR__1730
153ec     30 84 BF FD | 	call	#_pop
153f0     FF 16 02 F6 | 	mov	arg03, result3
153f4     A7 FA 61 FC | 	wrlong	result1, fp
153f8     04 4E 05 F1 | 	add	fp, #4
153fc     A7 FC 61 FC | 	wrlong	result2, fp
15400     04 4E 05 F1 | 	add	fp, #4
15404     A7 16 62 FC | 	wrlong	arg03, fp
15408     08 4E 85 F1 | 	sub	fp, #8
1540c     A7 12 02 F6 | 	mov	arg01, fp
15410     F0 85 BF FD | 	call	#_converttoint
15414     FD 16 02 F6 | 	mov	arg03, result1
15418     10 4E 05 F1 | 	add	fp, #16
1541c     A7 16 62 FC | 	wrlong	arg03, fp
15420     10 4E 85 F1 | 	sub	fp, #16
15424     F8 83 BF FD | 	call	#_pop
15428     FF 16 02 F6 | 	mov	arg03, result3
1542c     A7 FA 61 FC | 	wrlong	result1, fp
15430     04 4E 05 F1 | 	add	fp, #4
15434     A7 FC 61 FC | 	wrlong	result2, fp
15438     04 4E 05 F1 | 	add	fp, #4
1543c     A7 16 62 FC | 	wrlong	arg03, fp
15440                 | ' t1=pop() : arg=converttoint(t1)
15440                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15440     08 4E 85 F1 | 	sub	fp, #8
15444     2B 16 0E F2 | 	cmp	arg03, #43 wz
15448     18 00 90 5D |  if_ne	jmp	#LR__1731
1544c     A7 12 02 FB | 	rdlong	arg01, fp
15450     44 85 BF FD | 	call	#_convertstring
15454     A7 FA 61 FC | 	wrlong	result1, fp
15458     08 4E 05 F1 | 	add	fp, #8
1545c     A7 3E 68 FC | 	wrlong	#31, fp
15460     08 4E 85 F1 | 	sub	fp, #8
15464                 | LR__1731
15464                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
15464     08 4E 05 F1 | 	add	fp, #8
15468     A7 16 02 FB | 	rdlong	arg03, fp
1546c     08 4E 85 F1 | 	sub	fp, #8
15470     1F 16 0E F2 | 	cmp	arg03, #31 wz
15474     40 00 90 AD |  if_e	jmp	#LR__1732
15478     00 12 06 F6 | 	mov	arg01, #0
1547c     34 89 B1 FD | 	call	#__system___getiolock_0620
15480     FD 12 02 F6 | 	mov	arg01, result1
15484     88 2C B1 FD | 	call	#__system___lockmem
15488     B5 01 00 FF 
1548c     4F 15 06 F6 | 	mov	arg02, ##@LR__5851
15490     00 12 06 F6 | 	mov	arg01, #0
15494     00 16 06 F6 | 	mov	arg03, #0
15498     6C 39 B1 FD | 	call	#__system___basic_print_string
1549c     00 12 06 F6 | 	mov	arg01, #0
154a0     10 89 B1 FD | 	call	#__system___getiolock_0620
154a4     FD 00 68 FC | 	wrlong	#0, result1
154a8     0F 12 06 F6 | 	mov	arg01, #15
154ac     00 14 06 F6 | 	mov	arg02, #0
154b0     08 F2 B0 FD | 	call	#_printerror
154b4     20 00 90 FD | 	jmp	#LR__1733
154b8                 | LR__1732
154b8     A7 12 02 FB | 	rdlong	arg01, fp
154bc     10 4E 05 F1 | 	add	fp, #16
154c0     A7 14 02 FB | 	rdlong	arg02, fp
154c4     10 4E 85 F1 | 	sub	fp, #16
154c8     C4 4C B1 FD | 	call	#__system__Left_S
154cc     A7 FA 61 FC | 	wrlong	result1, fp
154d0     A7 12 02 F6 | 	mov	arg01, fp
154d4     E0 83 BF FD | 	call	#_push
154d8                 | LR__1733
154d8     A7 F0 03 F6 | 	mov	ptra, fp
154dc     B2 00 A0 FD | 	call	#popregs_
154e0                 | _do_left_ret
154e0     2D 00 64 FD | 	ret
154e4                 | 
154e4                 | ' 
154e4                 | ' ' ----------------  len
154e4                 | ' 
154e4                 | ' sub do_len
154e4                 | _do_len
154e4     02 4A 05 F6 | 	mov	COUNT_, #2
154e8     A8 00 A0 FD | 	call	#pushregs_
154ec     14 F0 07 F1 | 	add	ptra, #20
154f0     4A 00 00 FF 
154f4     A0 E4 05 F1 | 	add	objptr, ##38048
154f8     F2 26 02 FB | 	rdlong	local01, objptr
154fc     13 17 02 F6 | 	mov	arg03, local01
15500     01 16 66 F0 | 	shl	arg03, #1
15504     13 17 02 F1 | 	add	arg03, local01
15508     02 16 66 F0 | 	shl	arg03, #2
1550c     03 00 00 FF 
15510     04 E4 85 F1 | 	sub	objptr, ##1540
15514     F2 16 02 F1 | 	add	arg03, objptr
15518     0B 17 02 FB | 	rdlong	arg03, arg03
1551c     0C 4E 05 F1 | 	add	fp, #12
15520     A7 16 62 FC | 	wrlong	arg03, fp
15524                 | ' 
15524                 | ' numpar=compiledline(lineptr_e).result.uresult
15524                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
15524     0C 4E 85 F1 | 	sub	fp, #12
15528     02 16 16 F2 | 	cmp	arg03, #2 wc
1552c     47 00 00 FF 
15530     9C E4 85 F1 | 	sub	objptr, ##36508
15534     0C 4E 05 C1 |  if_b	add	fp, #12
15538     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1553c     0C 4E 85 C1 |  if_b	sub	fp, #12
15540     40 00 90 4D |  if_c_and_nz	jmp	#LR__1740
15544     00 12 06 F6 | 	mov	arg01, #0
15548     68 88 B1 FD | 	call	#__system___getiolock_0620
1554c     FD 12 02 F6 | 	mov	arg01, result1
15550     BC 2B B1 FD | 	call	#__system___lockmem
15554     B5 01 00 FF 
15558     57 15 06 F6 | 	mov	arg02, ##@LR__5852
1555c     00 12 06 F6 | 	mov	arg01, #0
15560     00 16 06 F6 | 	mov	arg03, #0
15564     A0 38 B1 FD | 	call	#__system___basic_print_string
15568     00 12 06 F6 | 	mov	arg01, #0
1556c     44 88 B1 FD | 	call	#__system___getiolock_0620
15570     FD 00 68 FC | 	wrlong	#0, result1
15574     27 12 06 F6 | 	mov	arg01, #39
15578     00 14 06 F6 | 	mov	arg02, #0
1557c     3C F1 B0 FD | 	call	#_printerror
15580     C8 00 90 FD | 	jmp	#LR__1745
15584                 | LR__1740
15584     98 82 BF FD | 	call	#_pop
15588     FF 16 02 F6 | 	mov	arg03, result3
1558c     A7 FA 61 FC | 	wrlong	result1, fp
15590     04 4E 05 F1 | 	add	fp, #4
15594     A7 FC 61 FC | 	wrlong	result2, fp
15598     04 4E 05 F1 | 	add	fp, #4
1559c     A7 16 62 FC | 	wrlong	arg03, fp
155a0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
155a0     08 4E 85 F1 | 	sub	fp, #8
155a4     2B 16 0E F2 | 	cmp	arg03, #43 wz
155a8     18 00 90 5D |  if_ne	jmp	#LR__1741
155ac     A7 12 02 FB | 	rdlong	arg01, fp
155b0     E4 83 BF FD | 	call	#_convertstring
155b4     A7 FA 61 FC | 	wrlong	result1, fp
155b8     08 4E 05 F1 | 	add	fp, #8
155bc     A7 3E 68 FC | 	wrlong	#31, fp
155c0     08 4E 85 F1 | 	sub	fp, #8
155c4                 | LR__1741
155c4                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
155c4     08 4E 05 F1 | 	add	fp, #8
155c8     A7 16 02 FB | 	rdlong	arg03, fp
155cc     08 4E 85 F1 | 	sub	fp, #8
155d0     1F 16 0E F2 | 	cmp	arg03, #31 wz
155d4     40 00 90 AD |  if_e	jmp	#LR__1742
155d8     00 12 06 F6 | 	mov	arg01, #0
155dc     D4 87 B1 FD | 	call	#__system___getiolock_0620
155e0     FD 12 02 F6 | 	mov	arg01, result1
155e4     28 2B B1 FD | 	call	#__system___lockmem
155e8     B5 01 00 FF 
155ec     5D 15 06 F6 | 	mov	arg02, ##@LR__5853
155f0     00 12 06 F6 | 	mov	arg01, #0
155f4     00 16 06 F6 | 	mov	arg03, #0
155f8     0C 38 B1 FD | 	call	#__system___basic_print_string
155fc     00 12 06 F6 | 	mov	arg01, #0
15600     B0 87 B1 FD | 	call	#__system___getiolock_0620
15604     FD 00 68 FC | 	wrlong	#0, result1
15608     0F 12 06 F6 | 	mov	arg01, #15
1560c     00 14 06 F6 | 	mov	arg02, #0
15610     A8 F0 B0 FD | 	call	#_printerror
15614     34 00 90 FD | 	jmp	#LR__1745
15618                 | LR__1742
15618     A7 12 02 FB | 	rdlong	arg01, fp
1561c     09 29 02 F6 | 	mov	local02, arg01
15620     97 06 48 FB | 	callpa	#(@LR__1744-@LR__1743)>>2,fcache_load_ptr_
15624                 | LR__1743
15624     14 FB C9 FA | 	rdbyte	result1, local02 wz
15628     01 28 06 51 |  if_ne	add	local02, #1
1562c     F4 FF 9F 5D |  if_ne	jmp	#LR__1743
15630                 | LR__1744
15630     09 29 82 F1 | 	sub	local02, arg01
15634     A7 28 62 FC | 	wrlong	local02, fp
15638     08 4E 05 F1 | 	add	fp, #8
1563c     A7 38 68 FC | 	wrlong	#28, fp
15640     08 4E 85 F1 | 	sub	fp, #8
15644     A7 12 02 F6 | 	mov	arg01, fp
15648     6C 82 BF FD | 	call	#_push
1564c                 | LR__1745
1564c     A7 F0 03 F6 | 	mov	ptra, fp
15650     B2 00 A0 FD | 	call	#popregs_
15654                 | _do_len_ret
15654     2D 00 64 FD | 	ret
15658                 | 
15658                 | ' 
15658                 | ' ' ----------------  list
15658                 | ' 
15658                 | ' sub do_list
15658                 | _do_list
15658     02 4A 05 F6 | 	mov	COUNT_, #2
1565c     A8 00 A0 FD | 	call	#pushregs_
15660     B8 F0 07 F1 | 	add	ptra, #184
15664     04 4E 05 F1 | 	add	fp, #4
15668     A7 00 68 FC | 	wrlong	#0, fp
1566c     04 4E 05 F1 | 	add	fp, #4
15670     FF FF BF FF 
15674     A7 FE 6B FC | 	wrlong	##2147483647, fp
15678     08 4E 85 F1 | 	sub	fp, #8
1567c     4A 00 00 FF 
15680     A0 E4 05 F1 | 	add	objptr, ##38048
15684     F2 26 02 FB | 	rdlong	local01, objptr
15688     13 17 02 F6 | 	mov	arg03, local01
1568c     01 16 66 F0 | 	shl	arg03, #1
15690     13 17 02 F1 | 	add	arg03, local01
15694     02 16 66 F0 | 	shl	arg03, #2
15698     03 00 00 FF 
1569c     04 E4 85 F1 | 	sub	objptr, ##1540
156a0     F2 16 02 F1 | 	add	arg03, objptr
156a4     0B 17 02 FB | 	rdlong	arg03, arg03
156a8     A7 16 62 FC | 	wrlong	arg03, fp
156ac                 | ' 
156ac                 | ' startline=0 : endline=$7FFFFFFF
156ac                 | ' numpar=compiledline(lineptr_e).result.uresult
156ac                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
156ac     01 16 0E F2 | 	cmp	arg03, #1 wz
156b0     47 00 00 FF 
156b4     9C E4 85 F1 | 	sub	objptr, ##36508
156b8     3C 00 90 5D |  if_ne	jmp	#LR__1750
156bc     60 81 BF FD | 	call	#_pop
156c0     FF 26 02 F6 | 	mov	local01, result3
156c4     0C 4E 05 F1 | 	add	fp, #12
156c8     A7 FA 61 FC | 	wrlong	result1, fp
156cc     04 4E 05 F1 | 	add	fp, #4
156d0     A7 FC 61 FC | 	wrlong	result2, fp
156d4     04 4E 05 F1 | 	add	fp, #4
156d8     A7 26 62 FC | 	wrlong	local01, fp
156dc     08 4E 85 F1 | 	sub	fp, #8
156e0     A7 12 02 F6 | 	mov	arg01, fp
156e4     0C 4E 85 F1 | 	sub	fp, #12
156e8     18 83 BF FD | 	call	#_converttoint
156ec     04 4E 05 F1 | 	add	fp, #4
156f0     A7 FA 61 FC | 	wrlong	result1, fp
156f4     04 4E 85 F1 | 	sub	fp, #4
156f8                 | LR__1750
156f8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
156f8     A7 16 02 FB | 	rdlong	arg03, fp
156fc     02 16 0E F2 | 	cmp	arg03, #2 wz
15700     7C 00 90 5D |  if_ne	jmp	#LR__1751
15704     18 81 BF FD | 	call	#_pop
15708     FF 26 02 F6 | 	mov	local01, result3
1570c     0C 4E 05 F1 | 	add	fp, #12
15710     A7 FA 61 FC | 	wrlong	result1, fp
15714     04 4E 05 F1 | 	add	fp, #4
15718     A7 FC 61 FC | 	wrlong	result2, fp
1571c     04 4E 05 F1 | 	add	fp, #4
15720     A7 26 62 FC | 	wrlong	local01, fp
15724     08 4E 85 F1 | 	sub	fp, #8
15728     A7 12 02 F6 | 	mov	arg01, fp
1572c     0C 4E 85 F1 | 	sub	fp, #12
15730     D0 82 BF FD | 	call	#_converttoint
15734     FD 26 02 F6 | 	mov	local01, result1
15738     08 4E 05 F1 | 	add	fp, #8
1573c     A7 26 62 FC | 	wrlong	local01, fp
15740     08 4E 85 F1 | 	sub	fp, #8
15744     D8 80 BF FD | 	call	#_pop
15748     FF 26 02 F6 | 	mov	local01, result3
1574c     0C 4E 05 F1 | 	add	fp, #12
15750     A7 FA 61 FC | 	wrlong	result1, fp
15754     04 4E 05 F1 | 	add	fp, #4
15758     A7 FC 61 FC | 	wrlong	result2, fp
1575c     04 4E 05 F1 | 	add	fp, #4
15760     A7 26 62 FC | 	wrlong	local01, fp
15764     08 4E 85 F1 | 	sub	fp, #8
15768     A7 12 02 F6 | 	mov	arg01, fp
1576c     0C 4E 85 F1 | 	sub	fp, #12
15770     90 82 BF FD | 	call	#_converttoint
15774     04 4E 05 F1 | 	add	fp, #4
15778     A7 FA 61 FC | 	wrlong	result1, fp
1577c     04 4E 85 F1 | 	sub	fp, #4
15780                 | LR__1751
15780                 | ' 
15780                 | ' 
15780                 | ' print
15780     00 12 06 F6 | 	mov	arg01, #0
15784     2C 86 B1 FD | 	call	#__system___getiolock_0620
15788     FD 12 02 F6 | 	mov	arg01, result1
1578c     80 29 B1 FD | 	call	#__system___lockmem
15790     00 12 06 F6 | 	mov	arg01, #0
15794     0A 14 06 F6 | 	mov	arg02, #10
15798     00 16 06 F6 | 	mov	arg03, #0
1579c     10 36 B1 FD | 	call	#__system___basic_print_char
157a0     00 12 06 F6 | 	mov	arg01, #0
157a4     0C 86 B1 FD | 	call	#__system___getiolock_0620
157a8     FD 00 68 FC | 	wrlong	#0, result1
157ac     4A 00 00 FF 
157b0     A8 E4 05 F1 | 	add	objptr, ##38056
157b4     F2 28 02 FB | 	rdlong	local02, objptr
157b8     08 00 00 FF 
157bc     CC E4 05 F1 | 	add	objptr, ##4300
157c0     F2 28 62 FC | 	wrlong	local02, objptr
157c4     52 00 00 FF 
157c8     74 E5 85 F1 | 	sub	objptr, ##42356
157cc                 | ' do 
157cc                 | LR__1752
157cc     20 4E 05 F1 | 	add	fp, #32
157d0     A7 12 02 F6 | 	mov	arg01, fp
157d4     20 4E 85 F1 | 	sub	fp, #32
157d8     52 00 00 FF 
157dc     74 E5 05 F1 | 	add	objptr, ##42356
157e0     F2 14 02 FB | 	rdlong	arg02, objptr
157e4     18 16 06 F6 | 	mov	arg03, #24
157e8     47 00 00 FF 
157ec     A8 E4 85 F1 | 	sub	objptr, ##36520
157f0     78 1C B1 FD | 	call	#_psram_spin2_read1
157f4     0B 00 00 FF 
157f8     CC E4 85 F1 | 	sub	objptr, ##5836
157fc                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
157fc                 | '   
157fc                 | '   if header(0)<> $FFFFFFFF then
157fc     20 4E 05 F1 | 	add	fp, #32
15800     A7 28 02 FB | 	rdlong	local02, fp
15804     20 4E 85 F1 | 	sub	fp, #32
15808     FF FF 7F FF 
1580c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
15810     A8 00 90 AD |  if_e	jmp	#LR__1754
15814     38 4E 05 F1 | 	add	fp, #56
15818     3F 16 06 F6 | 	mov	arg03, #63
1581c     28 16 62 FD | 	setq	arg03
15820     A7 00 68 FC | 	wrlong	#0, fp
15824     A7 12 02 F6 | 	mov	arg01, fp
15828     10 4E 85 F1 | 	sub	fp, #16
1582c     A7 14 02 FB | 	rdlong	arg02, fp
15830     04 4E 05 F1 | 	add	fp, #4
15834     A7 16 02 FB | 	rdlong	arg03, fp
15838     2C 4E 85 F1 | 	sub	fp, #44
1583c     0B 00 00 FF 
15840     CC E4 05 F1 | 	add	objptr, ##5836
15844     24 1C B1 FD | 	call	#_psram_spin2_read1
15848     0B 00 00 FF 
1584c     CC E4 85 F1 | 	sub	objptr, ##5836
15850                 | '     longfill(linebuf,0,64)
15850                 | '     psram.read1(varptr(linebuf),header(2),header(3))
15850                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
15850     20 4E 05 F1 | 	add	fp, #32
15854     A7 28 02 FB | 	rdlong	local02, fp
15858     1C 4E 85 F1 | 	sub	fp, #28
1585c     A7 26 02 FB | 	rdlong	local01, fp
15860     04 4E 85 F1 | 	sub	fp, #4
15864     13 29 52 F2 | 	cmps	local02, local01 wc
15868     30 00 90 CD |  if_b	jmp	#LR__1753
1586c     20 4E 05 F1 | 	add	fp, #32
15870     A7 28 02 FB | 	rdlong	local02, fp
15874     18 4E 85 F1 | 	sub	fp, #24
15878     A7 16 02 FB | 	rdlong	arg03, fp
1587c     08 4E 85 F1 | 	sub	fp, #8
15880     0B 29 5A F2 | 	cmps	local02, arg03 wcz
15884     14 00 90 1D |  if_a	jmp	#LR__1753
15888     38 4E 05 F1 | 	add	fp, #56
1588c     A7 12 02 F6 | 	mov	arg01, fp
15890     38 4E 85 F1 | 	sub	fp, #56
15894                 | ' 
15894                 | ' write(text)
15894     DC 0F B1 FD | 	call	#_hg010b_spin2_write
15898                 | ' crlf
15898     78 14 B1 FD | 	call	#_hg010b_spin2_crlf
1589c                 | LR__1753
1589c     34 4E 05 F1 | 	add	fp, #52
158a0     A7 28 02 FB | 	rdlong	local02, fp
158a4     34 4E 85 F1 | 	sub	fp, #52
158a8     52 00 00 FF 
158ac     74 E5 05 F1 | 	add	objptr, ##42356
158b0     F2 28 62 FC | 	wrlong	local02, objptr
158b4     52 00 00 FF 
158b8     74 E5 85 F1 | 	sub	objptr, ##42356
158bc                 | LR__1754
158bc     34 4E 05 F1 | 	add	fp, #52
158c0     A7 28 02 FB | 	rdlong	local02, fp
158c4     34 4E 85 F1 | 	sub	fp, #52
158c8     FF FF 3F FF 
158cc     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
158d0     20 4E 05 51 |  if_ne	add	fp, #32
158d4     A7 26 02 5B |  if_ne	rdlong	local01, fp
158d8     20 4E 85 51 |  if_ne	sub	fp, #32
158dc     FF FF 7F 5F 
158e0     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
158e4     E4 FE 9F 5D |  if_ne	jmp	#LR__1752
158e8     A7 F0 03 F6 | 	mov	ptra, fp
158ec     B2 00 A0 FD | 	call	#popregs_
158f0                 | _do_list_ret
158f0     2D 00 64 FD | 	ret
158f4                 | 
158f4                 | ' 
158f4                 | ' '-------------------- load
158f4                 | ' 
158f4                 | ' sub do_load(amode=0 as integer)  
158f4                 | _do_load
158f4     01 4A 05 F6 | 	mov	COUNT_, #1
158f8     A8 00 A0 FD | 	call	#pushregs_
158fc     AC F0 07 F1 | 	add	ptra, #172
15900     A7 12 62 FC | 	wrlong	arg01, fp
15904     52 00 00 FF 
15908     2C E5 05 F1 | 	add	objptr, ##42284
1590c     F2 02 68 FC | 	wrlong	#1, objptr
15910     08 00 00 FF 
15914     8C E4 85 F1 | 	sub	objptr, ##4236
15918     F2 14 02 FB | 	rdlong	arg02, objptr
1591c     0A 13 02 F6 | 	mov	arg01, arg02
15920     01 12 66 F0 | 	shl	arg01, #1
15924     0A 13 02 F1 | 	add	arg01, arg02
15928     02 12 66 F0 | 	shl	arg01, #2
1592c     03 00 00 FF 
15930     04 E4 85 F1 | 	sub	objptr, ##1540
15934     F2 12 02 F1 | 	add	arg01, objptr
15938     09 15 02 FB | 	rdlong	arg02, arg01
1593c     1C 4E 05 F1 | 	add	fp, #28
15940     A7 14 62 FC | 	wrlong	arg02, fp
15944     8C 4E 05 F1 | 	add	fp, #140
15948     A7 12 02 F6 | 	mov	arg01, fp
1594c     47 00 00 FF 
15950     9C E4 85 F1 | 	sub	objptr, ##36508
15954     80 4E 85 F1 | 	sub	fp, #128
15958     09 4F 61 FC | 	wrlong	fp, arg01
1595c                 | ' 
1595c                 | ' inload=1
1595c                 | ' numpar=compiledline(lineptr_e).result.uresult
1595c                 | ' lpoke varptr(line2$),varptr(line2)
1595c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1595c     0C 4E 85 F1 | 	sub	fp, #12
15960     A7 26 02 FB | 	rdlong	local01, fp
15964     1C 4E 85 F1 | 	sub	fp, #28
15968     01 26 56 F2 | 	cmps	local01, #1 wc
1596c     24 00 90 CD |  if_b	jmp	#LR__1760
15970     AC 7E BF FD | 	call	#_pop
15974     04 4E 05 F1 | 	add	fp, #4
15978     A7 FA 61 FC | 	wrlong	result1, fp
1597c     04 4E 05 F1 | 	add	fp, #4
15980     A7 FC 61 FC | 	wrlong	result2, fp
15984     04 4E 05 F1 | 	add	fp, #4
15988     A7 FE 61 FC | 	wrlong	result3, fp
1598c     0C 4E 85 F1 | 	sub	fp, #12
15990     28 00 90 FD | 	jmp	#LR__1761
15994                 | LR__1760
15994     52 00 00 FF 
15998     1C E5 05 F1 | 	add	objptr, ##42268
1599c     F2 26 02 FB | 	rdlong	local01, objptr
159a0     52 00 00 FF 
159a4     1C E5 85 F1 | 	sub	objptr, ##42268
159a8     04 4E 05 F1 | 	add	fp, #4
159ac     A7 26 62 FC | 	wrlong	local01, fp
159b0     08 4E 05 F1 | 	add	fp, #8
159b4     A7 3E 68 FC | 	wrlong	#31, fp
159b8     0C 4E 85 F1 | 	sub	fp, #12
159bc                 | LR__1761
159bc                 | ' 'print "popped "; t1.result.uresult, t1.result_type
159bc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
159bc     0C 4E 05 F1 | 	add	fp, #12
159c0     A7 26 02 FB | 	rdlong	local01, fp
159c4     0C 4E 85 F1 | 	sub	fp, #12
159c8     2B 26 0E F2 | 	cmp	local01, #43 wz
159cc     24 00 90 5D |  if_ne	jmp	#LR__1762
159d0     04 4E 05 F1 | 	add	fp, #4
159d4     A7 12 02 FB | 	rdlong	arg01, fp
159d8     04 4E 85 F1 | 	sub	fp, #4
159dc     B8 7F BF FD | 	call	#_convertstring
159e0     04 4E 05 F1 | 	add	fp, #4
159e4     A7 FA 61 FC | 	wrlong	result1, fp
159e8     08 4E 05 F1 | 	add	fp, #8
159ec     A7 3E 68 FC | 	wrlong	#31, fp
159f0     0C 4E 85 F1 | 	sub	fp, #12
159f4                 | LR__1762
159f4                 | ' if t1.result_type=result_string then
159f4     0C 4E 05 F1 | 	add	fp, #12
159f8     A7 26 02 FB | 	rdlong	local01, fp
159fc     0C 4E 85 F1 | 	sub	fp, #12
15a00     1F 26 0E F2 | 	cmp	local01, #31 wz
15a04     E8 02 90 5D |  if_ne	jmp	#LR__1768
15a08                 | '   if amode<>1234 then do_new
15a08     A7 26 02 FB | 	rdlong	local01, fp
15a0c     02 00 00 FF 
15a10     D2 26 0E F2 | 	cmp	local01, ##1234 wz
15a14     34 0F B0 5D |  if_ne	call	#_do_new
15a18                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
15a18     04 4E 05 F1 | 	add	fp, #4
15a1c     A7 12 02 FB | 	rdlong	arg01, fp
15a20     04 4E 85 F1 | 	sub	fp, #4
15a24     B5 01 00 FF 
15a28     63 15 06 F6 | 	mov	arg02, ##@LR__5854
15a2c     08 27 B1 FD | 	call	#__system___string_cmp
15a30     00 FA 0D F2 | 	cmp	result1, #0 wz
15a34     24 00 90 5D |  if_ne	jmp	#LR__1763
15a38     52 00 00 FF 
15a3c     1C E5 05 F1 | 	add	objptr, ##42268
15a40     F2 26 02 FB | 	rdlong	local01, objptr
15a44     52 00 00 FF 
15a48     1C E5 85 F1 | 	sub	objptr, ##42268
15a4c     04 4E 05 F1 | 	add	fp, #4
15a50     A7 26 62 FC | 	wrlong	local01, fp
15a54     04 4E 85 F1 | 	sub	fp, #4
15a58     20 00 90 FD | 	jmp	#LR__1764
15a5c                 | LR__1763
15a5c     04 4E 05 F1 | 	add	fp, #4
15a60     A7 26 02 FB | 	rdlong	local01, fp
15a64     04 4E 85 F1 | 	sub	fp, #4
15a68     52 00 00 FF 
15a6c     1C E5 05 F1 | 	add	objptr, ##42268
15a70     F2 26 62 FC | 	wrlong	local01, objptr
15a74     52 00 00 FF 
15a78     1C E5 85 F1 | 	sub	objptr, ##42268
15a7c                 | LR__1764
15a7c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
15a7c     09 12 06 F6 | 	mov	arg01, #9
15a80     E0 79 B1 FD | 	call	#__system__close
15a84     09 26 06 F6 | 	mov	local01, #9
15a88     4A 00 00 FF 
15a8c     B4 E4 05 F1 | 	add	objptr, ##38068
15a90     F2 12 02 FB | 	rdlong	arg01, objptr
15a94     4A 00 00 FF 
15a98     B4 E4 85 F1 | 	sub	objptr, ##38068
15a9c     B5 01 00 FF 
15aa0     64 15 06 F6 | 	mov	arg02, ##@LR__5855
15aa4     C4 26 B1 FD | 	call	#__system___string_concat
15aa8     FD 12 02 F6 | 	mov	arg01, result1
15aac     04 4E 05 F1 | 	add	fp, #4
15ab0     A7 14 02 FB | 	rdlong	arg02, fp
15ab4     04 4E 85 F1 | 	sub	fp, #4
15ab8     B0 26 B1 FD | 	call	#__system___string_concat
15abc     FD 14 02 F6 | 	mov	arg02, result1
15ac0     13 13 02 F6 | 	mov	arg01, local01
15ac4     00 16 06 F6 | 	mov	arg03, #0
15ac8     48 32 B1 FD | 	call	#__system___basic_open_string
15acc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15ad0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15ad4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
15ad8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15adc     14 4E 05 F1 | 	add	fp, #20
15ae0     A7 FA 61 FC | 	wrlong	result1, fp
15ae4                 | '   r=geterr() 
15ae4                 | '   if r then 
15ae4     14 4E 85 F1 | 	sub	fp, #20
15ae8     54 01 90 AD |  if_e	jmp	#LR__1766
15aec                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
15aec     09 12 06 F6 | 	mov	arg01, #9
15af0     70 79 B1 FD | 	call	#__system__close
15af4     09 26 06 F6 | 	mov	local01, #9
15af8     4A 00 00 FF 
15afc     B4 E4 05 F1 | 	add	objptr, ##38068
15b00     F2 12 02 FB | 	rdlong	arg01, objptr
15b04     4A 00 00 FF 
15b08     B4 E4 85 F1 | 	sub	objptr, ##38068
15b0c     B5 01 00 FF 
15b10     66 15 06 F6 | 	mov	arg02, ##@LR__5856
15b14     54 26 B1 FD | 	call	#__system___string_concat
15b18     FD 12 02 F6 | 	mov	arg01, result1
15b1c     04 4E 05 F1 | 	add	fp, #4
15b20     A7 14 02 FB | 	rdlong	arg02, fp
15b24     04 4E 85 F1 | 	sub	fp, #4
15b28     40 26 B1 FD | 	call	#__system___string_concat
15b2c     FD 12 02 F6 | 	mov	arg01, result1
15b30     B5 01 00 FF 
15b34     68 15 06 F6 | 	mov	arg02, ##@LR__5857
15b38     30 26 B1 FD | 	call	#__system___string_concat
15b3c     FD 14 02 F6 | 	mov	arg02, result1
15b40     13 13 02 F6 | 	mov	arg01, local01
15b44     00 16 06 F6 | 	mov	arg03, #0
15b48     C8 31 B1 FD | 	call	#__system___basic_open_string
15b4c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15b50     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15b54     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
15b58     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15b5c     14 4E 05 F1 | 	add	fp, #20
15b60     A7 FA 61 FC | 	wrlong	result1, fp
15b64                 | '     r=geterr() 
15b64                 | '     if r then 
15b64     14 4E 85 F1 | 	sub	fp, #20
15b68     A0 00 90 AD |  if_e	jmp	#LR__1765
15b6c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
15b6c     00 12 06 F6 | 	mov	arg01, #0
15b70     40 82 B1 FD | 	call	#__system___getiolock_0620
15b74     FD 12 02 F6 | 	mov	arg01, result1
15b78     94 25 B1 FD | 	call	#__system___lockmem
15b7c     B5 01 00 FF 
15b80     6D 15 06 F6 | 	mov	arg02, ##@LR__5858
15b84     00 12 06 F6 | 	mov	arg01, #0
15b88     00 16 06 F6 | 	mov	arg03, #0
15b8c     78 32 B1 FD | 	call	#__system___basic_print_string
15b90     14 4E 05 F1 | 	add	fp, #20
15b94     A7 14 02 FB | 	rdlong	arg02, fp
15b98     14 4E 85 F1 | 	sub	fp, #20
15b9c     00 12 06 F6 | 	mov	arg01, #0
15ba0     00 16 06 F6 | 	mov	arg03, #0
15ba4     0A 18 06 F6 | 	mov	arg04, #10
15ba8     A0 32 B1 FD | 	call	#__system___basic_print_integer
15bac     B5 01 00 FF 
15bb0     7B 15 06 F6 | 	mov	arg02, ##@LR__5859
15bb4     00 12 06 F6 | 	mov	arg01, #0
15bb8     00 16 06 F6 | 	mov	arg03, #0
15bbc     48 32 B1 FD | 	call	#__system___basic_print_string
15bc0     00 26 06 F6 | 	mov	local01, #0
15bc4     14 4E 05 F1 | 	add	fp, #20
15bc8     A7 12 02 FB | 	rdlong	arg01, fp
15bcc     14 4E 85 F1 | 	sub	fp, #20
15bd0     CC 4E B1 FD | 	call	#__system___strerror
15bd4     FD 14 02 F6 | 	mov	arg02, result1
15bd8     13 13 02 F6 | 	mov	arg01, local01
15bdc     00 16 06 F6 | 	mov	arg03, #0
15be0     24 32 B1 FD | 	call	#__system___basic_print_string
15be4     00 12 06 F6 | 	mov	arg01, #0
15be8     0A 14 06 F6 | 	mov	arg02, #10
15bec     00 16 06 F6 | 	mov	arg03, #0
15bf0     BC 31 B1 FD | 	call	#__system___basic_print_char
15bf4     00 12 06 F6 | 	mov	arg01, #0
15bf8     B8 81 B1 FD | 	call	#__system___getiolock_0620
15bfc     FD 00 68 FC | 	wrlong	#0, result1
15c00     09 12 06 F6 | 	mov	arg01, #9
15c04     5C 78 B1 FD | 	call	#__system__close
15c08     94 01 90 FD | 	jmp	#LR__1770
15c0c                 | LR__1765
15c0c     52 00 00 FF 
15c10     1C E5 05 F1 | 	add	objptr, ##42268
15c14     F2 12 02 FB | 	rdlong	arg01, objptr
15c18     52 00 00 FF 
15c1c     1C E5 85 F1 | 	sub	objptr, ##42268
15c20     B5 01 00 FF 
15c24     7E 15 06 F6 | 	mov	arg02, ##@LR__5860
15c28     40 25 B1 FD | 	call	#__system___string_concat
15c2c     52 00 00 FF 
15c30     1C E5 05 F1 | 	add	objptr, ##42268
15c34     F2 FA 61 FC | 	wrlong	result1, objptr
15c38     52 00 00 FF 
15c3c     1C E5 85 F1 | 	sub	objptr, ##42268
15c40                 | LR__1766
15c40                 | '   close #9: open currentdir$+"/"+loadname for input as #9
15c40     09 12 06 F6 | 	mov	arg01, #9
15c44     1C 78 B1 FD | 	call	#__system__close
15c48     09 26 06 F6 | 	mov	local01, #9
15c4c     4A 00 00 FF 
15c50     B4 E4 05 F1 | 	add	objptr, ##38068
15c54     F2 12 02 FB | 	rdlong	arg01, objptr
15c58     4A 00 00 FF 
15c5c     B4 E4 85 F1 | 	sub	objptr, ##38068
15c60     B5 01 00 FF 
15c64     83 15 06 F6 | 	mov	arg02, ##@LR__5861
15c68     00 25 B1 FD | 	call	#__system___string_concat
15c6c     FD 12 02 F6 | 	mov	arg01, result1
15c70     52 00 00 FF 
15c74     1C E5 05 F1 | 	add	objptr, ##42268
15c78     F2 14 02 FB | 	rdlong	arg02, objptr
15c7c     52 00 00 FF 
15c80     1C E5 85 F1 | 	sub	objptr, ##42268
15c84     E4 24 B1 FD | 	call	#__system___string_concat
15c88     FD 14 02 F6 | 	mov	arg02, result1
15c8c     13 13 02 F6 | 	mov	arg01, local01
15c90     00 16 06 F6 | 	mov	arg03, #0
15c94     7C 30 B1 FD | 	call	#__system___basic_open_string
15c98                 | '   do
15c98                 | LR__1767
15c98     09 12 06 F6 | 	mov	arg01, #9
15c9c     7C 26 B1 FD | 	call	#__system___basic_read_line
15ca0     FD 26 02 F6 | 	mov	local01, result1
15ca4     37 00 00 FF 
15ca8     3C E4 05 F1 | 	add	objptr, ##28220
15cac     F2 26 62 FC | 	wrlong	local01, objptr
15cb0     37 00 00 FF 
15cb4     3C E4 85 F1 | 	sub	objptr, ##28220
15cb8     D0 BB BE FD | 	call	#_interpret
15cbc     37 00 00 FF 
15cc0     3C E4 05 F1 | 	add	objptr, ##28220
15cc4     F2 12 02 FB | 	rdlong	arg01, objptr
15cc8     37 00 00 FF 
15ccc     3C E4 85 F1 | 	sub	objptr, ##28220
15cd0     B5 01 00 FF 
15cd4     85 15 06 F6 | 	mov	arg02, ##@LR__5862
15cd8     5C 24 B1 FD | 	call	#__system___string_cmp
15cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
15ce0     B4 FF 9F 5D |  if_ne	jmp	#LR__1767
15ce4                 | '   close #9   
15ce4     09 12 06 F6 | 	mov	arg01, #9
15ce8     78 77 B1 FD | 	call	#__system__close
15cec     0C 00 90 FD | 	jmp	#LR__1769
15cf0                 | LR__1768
15cf0     1E 12 06 F6 | 	mov	arg01, #30
15cf4     00 14 06 F6 | 	mov	arg02, #0
15cf8     C0 E9 B0 FD | 	call	#_printerror
15cfc                 | LR__1769
15cfc                 | ' print "Loaded ";currentdir$+"/"+loadname
15cfc     00 12 06 F6 | 	mov	arg01, #0
15d00     B0 80 B1 FD | 	call	#__system___getiolock_0620
15d04     FD 12 02 F6 | 	mov	arg01, result1
15d08     04 24 B1 FD | 	call	#__system___lockmem
15d0c     B5 01 00 FF 
15d10     86 15 06 F6 | 	mov	arg02, ##@LR__5863
15d14     00 12 06 F6 | 	mov	arg01, #0
15d18     00 16 06 F6 | 	mov	arg03, #0
15d1c     E8 30 B1 FD | 	call	#__system___basic_print_string
15d20     00 26 06 F6 | 	mov	local01, #0
15d24     4A 00 00 FF 
15d28     B4 E4 05 F1 | 	add	objptr, ##38068
15d2c     F2 12 02 FB | 	rdlong	arg01, objptr
15d30     4A 00 00 FF 
15d34     B4 E4 85 F1 | 	sub	objptr, ##38068
15d38     B5 01 00 FF 
15d3c     8E 15 06 F6 | 	mov	arg02, ##@LR__5864
15d40     28 24 B1 FD | 	call	#__system___string_concat
15d44     FD 12 02 F6 | 	mov	arg01, result1
15d48     52 00 00 FF 
15d4c     1C E5 05 F1 | 	add	objptr, ##42268
15d50     F2 14 02 FB | 	rdlong	arg02, objptr
15d54     52 00 00 FF 
15d58     1C E5 85 F1 | 	sub	objptr, ##42268
15d5c     0C 24 B1 FD | 	call	#__system___string_concat
15d60     FD 14 02 F6 | 	mov	arg02, result1
15d64     13 13 02 F6 | 	mov	arg01, local01
15d68     00 16 06 F6 | 	mov	arg03, #0
15d6c     98 30 B1 FD | 	call	#__system___basic_print_string
15d70     00 12 06 F6 | 	mov	arg01, #0
15d74     0A 14 06 F6 | 	mov	arg02, #10
15d78     00 16 06 F6 | 	mov	arg03, #0
15d7c     30 30 B1 FD | 	call	#__system___basic_print_char
15d80     00 12 06 F6 | 	mov	arg01, #0
15d84     2C 80 B1 FD | 	call	#__system___getiolock_0620
15d88     FD 00 68 FC | 	wrlong	#0, result1
15d8c     52 00 00 FF 
15d90     2C E5 05 F1 | 	add	objptr, ##42284
15d94     F2 00 68 FC | 	wrlong	#0, objptr
15d98     52 00 00 FF 
15d9c     2C E5 85 F1 | 	sub	objptr, ##42284
15da0                 | LR__1770
15da0     A7 F0 03 F6 | 	mov	ptra, fp
15da4     B2 00 A0 FD | 	call	#popregs_
15da8                 | _do_load_ret
15da8     2D 00 64 FD | 	ret
15dac                 | 
15dac                 | ' 
15dac                 | ' '-------------------- log
15dac                 | ' 
15dac                 | ' sub do_log
15dac                 | _do_log
15dac     01 4A 05 F6 | 	mov	COUNT_, #1
15db0     A8 00 A0 FD | 	call	#pushregs_
15db4     14 F0 07 F1 | 	add	ptra, #20
15db8     4A 00 00 FF 
15dbc     A0 E4 05 F1 | 	add	objptr, ##38048
15dc0     F2 26 02 FB | 	rdlong	local01, objptr
15dc4     13 17 02 F6 | 	mov	arg03, local01
15dc8     01 16 66 F0 | 	shl	arg03, #1
15dcc     13 17 02 F1 | 	add	arg03, local01
15dd0     02 16 66 F0 | 	shl	arg03, #2
15dd4     03 00 00 FF 
15dd8     04 E4 85 F1 | 	sub	objptr, ##1540
15ddc     F2 16 02 F1 | 	add	arg03, objptr
15de0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15de4     0C 4E 05 F1 | 	add	fp, #12
15de8     A7 16 62 FC | 	wrlong	arg03, fp
15dec                 | ' 
15dec                 | ' numpar=compiledline(lineptr_e).result.uresult
15dec                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
15dec     0C 4E 85 F1 | 	sub	fp, #12
15df0     47 00 00 FF 
15df4     9C E4 85 F1 | 	sub	objptr, ##36508
15df8     0C 4E 05 51 |  if_ne	add	fp, #12
15dfc     A7 26 02 5B |  if_ne	rdlong	local01, fp
15e00     0C 4E 85 51 |  if_ne	sub	fp, #12
15e04     03 26 16 52 |  if_ne	cmp	local01, #3 wc
15e08     40 00 90 4D |  if_c_and_nz	jmp	#LR__1780
15e0c     00 12 06 F6 | 	mov	arg01, #0
15e10     A0 7F B1 FD | 	call	#__system___getiolock_0620
15e14     FD 12 02 F6 | 	mov	arg01, result1
15e18     F4 22 B1 FD | 	call	#__system___lockmem
15e1c     B5 01 00 FF 
15e20     90 15 06 F6 | 	mov	arg02, ##@LR__5865
15e24     00 12 06 F6 | 	mov	arg01, #0
15e28     00 16 06 F6 | 	mov	arg03, #0
15e2c     D8 2F B1 FD | 	call	#__system___basic_print_string
15e30     00 12 06 F6 | 	mov	arg01, #0
15e34     7C 7F B1 FD | 	call	#__system___getiolock_0620
15e38     FD 00 68 FC | 	wrlong	#0, result1
15e3c     27 12 06 F6 | 	mov	arg01, #39
15e40     00 14 06 F6 | 	mov	arg02, #0
15e44     74 E8 B0 FD | 	call	#_printerror
15e48     D0 00 90 FD | 	jmp	#LR__1783
15e4c                 | LR__1780
15e4c                 | ' if numpar=2 then 
15e4c     0C 4E 05 F1 | 	add	fp, #12
15e50     A7 26 02 FB | 	rdlong	local01, fp
15e54     0C 4E 85 F1 | 	sub	fp, #12
15e58     02 26 0E F2 | 	cmp	local01, #2 wz
15e5c     48 00 90 5D |  if_ne	jmp	#LR__1781
15e60     BC 79 BF FD | 	call	#_pop
15e64     FF 26 02 F6 | 	mov	local01, result3
15e68     A7 FA 61 FC | 	wrlong	result1, fp
15e6c     04 4E 05 F1 | 	add	fp, #4
15e70     A7 FC 61 FC | 	wrlong	result2, fp
15e74     04 4E 05 F1 | 	add	fp, #4
15e78     A7 26 62 FC | 	wrlong	local01, fp
15e7c     08 4E 85 F1 | 	sub	fp, #8
15e80     A7 12 02 F6 | 	mov	arg01, fp
15e84     38 7C BF FD | 	call	#_converttofloat
15e88     FD 14 02 F6 | 	mov	arg02, result1
15e8c     FC 16 20 FF 
15e90     54 12 06 F6 | 	mov	arg01, ##1076754516
15e94     C8 60 B1 FD | 	call	#__system____builtin_logbase
15e98     10 4E 05 F1 | 	add	fp, #16
15e9c     A7 FA 61 FC | 	wrlong	result1, fp
15ea0     10 4E 85 F1 | 	sub	fp, #16
15ea4     10 00 90 FD | 	jmp	#LR__1782
15ea8                 | LR__1781
15ea8     10 4E 05 F1 | 	add	fp, #16
15eac     00 C0 9F FF 
15eb0     A7 00 68 FC | 	wrlong	##1065353216, fp
15eb4     10 4E 85 F1 | 	sub	fp, #16
15eb8                 | LR__1782
15eb8     64 79 BF FD | 	call	#_pop
15ebc     FF 26 02 F6 | 	mov	local01, result3
15ec0     A7 FA 61 FC | 	wrlong	result1, fp
15ec4     04 4E 05 F1 | 	add	fp, #4
15ec8     A7 FC 61 FC | 	wrlong	result2, fp
15ecc     04 4E 05 F1 | 	add	fp, #4
15ed0     A7 26 62 FC | 	wrlong	local01, fp
15ed4     08 4E 85 F1 | 	sub	fp, #8
15ed8     A7 12 02 F6 | 	mov	arg01, fp
15edc     E0 7B BF FD | 	call	#_converttofloat
15ee0     FD 14 02 F6 | 	mov	arg02, result1
15ee4     FC 16 20 FF 
15ee8     54 12 06 F6 | 	mov	arg01, ##1076754516
15eec     70 60 B1 FD | 	call	#__system____builtin_logbase
15ef0     FD 12 02 F6 | 	mov	arg01, result1
15ef4     10 4E 05 F1 | 	add	fp, #16
15ef8     A7 14 02 FB | 	rdlong	arg02, fp
15efc     10 4E 85 F1 | 	sub	fp, #16
15f00     8C 52 B1 FD | 	call	#__system___float_div
15f04     A7 FA 61 FC | 	wrlong	result1, fp
15f08     08 4E 05 F1 | 	add	fp, #8
15f0c     A7 3C 68 FC | 	wrlong	#30, fp
15f10     08 4E 85 F1 | 	sub	fp, #8
15f14     A7 12 02 F6 | 	mov	arg01, fp
15f18     9C 79 BF FD | 	call	#_push
15f1c                 | LR__1783
15f1c     A7 F0 03 F6 | 	mov	ptra, fp
15f20     B2 00 A0 FD | 	call	#popregs_
15f24                 | _do_log_ret
15f24     2D 00 64 FD | 	ret
15f28                 | 
15f28                 | ' 
15f28                 | ' '-------------------- lpeek
15f28                 | ' 
15f28                 | ' sub do_lpeek
15f28                 | _do_lpeek
15f28     00 4A 05 F6 | 	mov	COUNT_, #0
15f2c     A8 00 A0 FD | 	call	#pushregs_
15f30     14 F0 07 F1 | 	add	ptra, #20
15f34     E8 78 BF FD | 	call	#_pop
15f38     A7 FA 61 FC | 	wrlong	result1, fp
15f3c     04 4E 05 F1 | 	add	fp, #4
15f40     A7 FC 61 FC | 	wrlong	result2, fp
15f44     04 4E 05 F1 | 	add	fp, #4
15f48     A7 FE 61 FC | 	wrlong	result3, fp
15f4c     08 4E 85 F1 | 	sub	fp, #8
15f50     A7 12 02 F6 | 	mov	arg01, fp
15f54     AC 7A BF FD | 	call	#_converttoint
15f58     0C 4E 05 F1 | 	add	fp, #12
15f5c     A7 FA 61 FC | 	wrlong	result1, fp
15f60                 | ' 
15f60                 | ' t1=pop()
15f60                 | ' a=converttoint(t1)
15f60                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
15f60     0C 4E 85 F1 | 	sub	fp, #12
15f64     00 04 00 FF 
15f68     00 FA 15 F2 | 	cmp	result1, ##524288 wc
15f6c     1C 00 90 3D |  if_ae	jmp	#LR__1790
15f70     0C 4E 05 F1 | 	add	fp, #12
15f74     A7 12 02 FB | 	rdlong	arg01, fp
15f78     09 FB 01 FB | 	rdlong	result1, arg01
15f7c     04 4E 05 F1 | 	add	fp, #4
15f80     A7 FA 61 FC | 	wrlong	result1, fp
15f84     10 4E 85 F1 | 	sub	fp, #16
15f88     1C 00 90 FD | 	jmp	#LR__1791
15f8c                 | LR__1790
15f8c     0C 4E 05 F1 | 	add	fp, #12
15f90     A7 12 02 FB | 	rdlong	arg01, fp
15f94     0C 4E 85 F1 | 	sub	fp, #12
15f98     F0 E9 B0 FD | 	call	#_pslpeek
15f9c     10 4E 05 F1 | 	add	fp, #16
15fa0     A7 FA 61 FC | 	wrlong	result1, fp
15fa4     10 4E 85 F1 | 	sub	fp, #16
15fa8                 | LR__1791
15fa8     08 4E 05 F1 | 	add	fp, #8
15fac     A7 3A 68 FC | 	wrlong	#29, fp
15fb0     08 4E 05 F1 | 	add	fp, #8
15fb4     A7 12 02 FB | 	rdlong	arg01, fp
15fb8     10 4E 85 F1 | 	sub	fp, #16
15fbc     A7 12 62 FC | 	wrlong	arg01, fp
15fc0     A7 12 02 F6 | 	mov	arg01, fp
15fc4     F0 78 BF FD | 	call	#_push
15fc8     A7 F0 03 F6 | 	mov	ptra, fp
15fcc     B2 00 A0 FD | 	call	#popregs_
15fd0                 | _do_lpeek_ret
15fd0     2D 00 64 FD | 	ret
15fd4                 | 
15fd4                 | ' 
15fd4                 | ' '-------------------- lpoke
15fd4                 | ' 
15fd4                 | ' sub do_lpoke
15fd4                 | _do_lpoke
15fd4     01 4A 05 F6 | 	mov	COUNT_, #1
15fd8     A8 00 A0 FD | 	call	#pushregs_
15fdc     20 F0 07 F1 | 	add	ptra, #32
15fe0     3C 78 BF FD | 	call	#_pop
15fe4     FD 14 02 F6 | 	mov	arg02, result1
15fe8     FE 12 02 F6 | 	mov	arg01, result2
15fec     FF 26 02 F6 | 	mov	local01, result3
15ff0     A7 14 62 FC | 	wrlong	arg02, fp
15ff4     04 4E 05 F1 | 	add	fp, #4
15ff8     A7 12 62 FC | 	wrlong	arg01, fp
15ffc     04 4E 05 F1 | 	add	fp, #4
16000     A7 26 62 FC | 	wrlong	local01, fp
16004     08 4E 85 F1 | 	sub	fp, #8
16008     14 78 BF FD | 	call	#_pop
1600c     FF 26 02 F6 | 	mov	local01, result3
16010     0C 4E 05 F1 | 	add	fp, #12
16014     A7 FA 61 FC | 	wrlong	result1, fp
16018     04 4E 05 F1 | 	add	fp, #4
1601c     A7 FC 61 FC | 	wrlong	result2, fp
16020     04 4E 05 F1 | 	add	fp, #4
16024     A7 26 62 FC | 	wrlong	local01, fp
16028     08 4E 85 F1 | 	sub	fp, #8
1602c     A7 12 02 F6 | 	mov	arg01, fp
16030     0C 4E 85 F1 | 	sub	fp, #12
16034     CC 79 BF FD | 	call	#_converttoint
16038     18 4E 05 F1 | 	add	fp, #24
1603c     A7 FA 61 FC | 	wrlong	result1, fp
16040     18 4E 85 F1 | 	sub	fp, #24
16044     A7 12 02 F6 | 	mov	arg01, fp
16048     B8 79 BF FD | 	call	#_converttoint
1604c     1C 4E 05 F1 | 	add	fp, #28
16050     A7 FA 61 FC | 	wrlong	result1, fp
16054                 | ' 
16054                 | ' t1=pop() 'value
16054                 | ' t2=pop() 
16054                 | ' a=converttoint(t2) : v=converttoint(t1)
16054                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
16054     04 4E 85 F1 | 	sub	fp, #4
16058     A7 26 02 FB | 	rdlong	local01, fp
1605c     18 4E 85 F1 | 	sub	fp, #24
16060     00 04 00 FF 
16064     00 26 16 F2 | 	cmp	local01, ##524288 wc
16068     1C 00 90 3D |  if_ae	jmp	#LR__1800
1606c     18 4E 05 F1 | 	add	fp, #24
16070     A7 12 02 FB | 	rdlong	arg01, fp
16074     04 4E 05 F1 | 	add	fp, #4
16078     A7 14 02 FB | 	rdlong	arg02, fp
1607c     1C 4E 85 F1 | 	sub	fp, #28
16080     09 15 62 FC | 	wrlong	arg02, arg01
16084     18 00 90 FD | 	jmp	#LR__1801
16088                 | LR__1800
16088     18 4E 05 F1 | 	add	fp, #24
1608c     A7 12 02 FB | 	rdlong	arg01, fp
16090     04 4E 05 F1 | 	add	fp, #4
16094     A7 14 02 FB | 	rdlong	arg02, fp
16098     1C 4E 85 F1 | 	sub	fp, #28
1609c     BC E7 B0 FD | 	call	#_pslpoke
160a0                 | LR__1801
160a0     A7 F0 03 F6 | 	mov	ptra, fp
160a4     B2 00 A0 FD | 	call	#popregs_
160a8                 | _do_lpoke_ret
160a8     2D 00 64 FD | 	ret
160ac                 | 
160ac                 | ' 
160ac                 | ' '-------------------- memlo
160ac                 | ' 
160ac                 | ' sub do_memlo
160ac                 | _do_memlo
160ac     00 4A 05 F6 | 	mov	COUNT_, #0
160b0     A8 00 A0 FD | 	call	#pushregs_
160b4     0C F0 07 F1 | 	add	ptra, #12
160b8     43 00 00 FF 
160bc     7C E4 05 F1 | 	add	objptr, ##34428
160c0     F2 12 02 FB | 	rdlong	arg01, objptr
160c4     43 00 00 FF 
160c8     7C E4 85 F1 | 	sub	objptr, ##34428
160cc     A7 12 62 FC | 	wrlong	arg01, fp
160d0     08 4E 05 F1 | 	add	fp, #8
160d4     A7 3A 68 FC | 	wrlong	#29, fp
160d8     08 4E 85 F1 | 	sub	fp, #8
160dc     A7 12 02 F6 | 	mov	arg01, fp
160e0     D4 77 BF FD | 	call	#_push
160e4     A7 F0 03 F6 | 	mov	ptra, fp
160e8     B2 00 A0 FD | 	call	#popregs_
160ec                 | _do_memlo_ret
160ec     2D 00 64 FD | 	ret
160f0                 | 
160f0                 | ' 
160f0                 | ' '-------------------- memtop
160f0                 | ' 
160f0                 | ' sub do_memtop
160f0                 | _do_memtop
160f0     00 4A 05 F6 | 	mov	COUNT_, #0
160f4     A8 00 A0 FD | 	call	#pushregs_
160f8     0C F0 07 F1 | 	add	ptra, #12
160fc     52 00 00 FF 
16100     F0 E4 05 F1 | 	add	objptr, ##42224
16104     F2 12 02 FB | 	rdlong	arg01, objptr
16108     52 00 00 FF 
1610c     F0 E4 85 F1 | 	sub	objptr, ##42224
16110     A7 12 62 FC | 	wrlong	arg01, fp
16114     08 4E 05 F1 | 	add	fp, #8
16118     A7 3A 68 FC | 	wrlong	#29, fp
1611c     08 4E 85 F1 | 	sub	fp, #8
16120     A7 12 02 F6 | 	mov	arg01, fp
16124     90 77 BF FD | 	call	#_push
16128     A7 F0 03 F6 | 	mov	ptra, fp
1612c     B2 00 A0 FD | 	call	#popregs_
16130                 | _do_memtop_ret
16130     2D 00 64 FD | 	ret
16134                 | 
16134                 | ' 
16134                 | ' '-------------------- mid$
16134                 | ' 
16134                 | ' sub do_mid
16134                 | _do_mid
16134     00 4A 05 F6 | 	mov	COUNT_, #0
16138     A8 00 A0 FD | 	call	#pushregs_
1613c     18 F0 07 F1 | 	add	ptra, #24
16140     4A 00 00 FF 
16144     A0 E4 05 F1 | 	add	objptr, ##38048
16148     F2 16 02 FB | 	rdlong	arg03, objptr
1614c     0B 15 02 F6 | 	mov	arg02, arg03
16150     01 14 66 F0 | 	shl	arg02, #1
16154     0B 15 02 F1 | 	add	arg02, arg03
16158     02 14 66 F0 | 	shl	arg02, #2
1615c     03 00 00 FF 
16160     04 E4 85 F1 | 	sub	objptr, ##1540
16164     F2 14 02 F1 | 	add	arg02, objptr
16168     0A 17 02 FB | 	rdlong	arg03, arg02
1616c     0C 4E 05 F1 | 	add	fp, #12
16170     A7 16 62 FC | 	wrlong	arg03, fp
16174                 | ' 
16174                 | ' numpar=compiledline(lineptr_e).result.uresult
16174                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
16174     0C 4E 85 F1 | 	sub	fp, #12
16178     03 16 0E F2 | 	cmp	arg03, #3 wz
1617c     47 00 00 FF 
16180     9C E4 85 F1 | 	sub	objptr, ##36508
16184     40 00 90 AD |  if_e	jmp	#LR__1810
16188     00 12 06 F6 | 	mov	arg01, #0
1618c     24 7C B1 FD | 	call	#__system___getiolock_0620
16190     FD 12 02 F6 | 	mov	arg01, result1
16194     78 1F B1 FD | 	call	#__system___lockmem
16198     B5 01 00 FF 
1619c     96 15 06 F6 | 	mov	arg02, ##@LR__5866
161a0     00 12 06 F6 | 	mov	arg01, #0
161a4     00 16 06 F6 | 	mov	arg03, #0
161a8     5C 2C B1 FD | 	call	#__system___basic_print_string
161ac     00 12 06 F6 | 	mov	arg01, #0
161b0     00 7C B1 FD | 	call	#__system___getiolock_0620
161b4     FD 00 68 FC | 	wrlong	#0, result1
161b8     27 12 06 F6 | 	mov	arg01, #39
161bc     00 14 06 F6 | 	mov	arg02, #0
161c0     F8 E4 B0 FD | 	call	#_printerror
161c4     2C 01 90 FD | 	jmp	#LR__1813
161c8                 | LR__1810
161c8     54 76 BF FD | 	call	#_pop
161cc     FF 16 02 F6 | 	mov	arg03, result3
161d0     A7 FA 61 FC | 	wrlong	result1, fp
161d4     04 4E 05 F1 | 	add	fp, #4
161d8     A7 FC 61 FC | 	wrlong	result2, fp
161dc     04 4E 05 F1 | 	add	fp, #4
161e0     A7 16 62 FC | 	wrlong	arg03, fp
161e4     08 4E 85 F1 | 	sub	fp, #8
161e8     A7 12 02 F6 | 	mov	arg01, fp
161ec     14 78 BF FD | 	call	#_converttoint
161f0     FD 16 02 F6 | 	mov	arg03, result1
161f4     14 4E 05 F1 | 	add	fp, #20
161f8     A7 16 62 FC | 	wrlong	arg03, fp
161fc     14 4E 85 F1 | 	sub	fp, #20
16200     1C 76 BF FD | 	call	#_pop
16204     FF 16 02 F6 | 	mov	arg03, result3
16208     A7 FA 61 FC | 	wrlong	result1, fp
1620c     04 4E 05 F1 | 	add	fp, #4
16210     A7 FC 61 FC | 	wrlong	result2, fp
16214     04 4E 05 F1 | 	add	fp, #4
16218     A7 16 62 FC | 	wrlong	arg03, fp
1621c     08 4E 85 F1 | 	sub	fp, #8
16220     A7 12 02 F6 | 	mov	arg01, fp
16224     DC 77 BF FD | 	call	#_converttoint
16228     FD 16 02 F6 | 	mov	arg03, result1
1622c     10 4E 05 F1 | 	add	fp, #16
16230     A7 16 62 FC | 	wrlong	arg03, fp
16234     10 4E 85 F1 | 	sub	fp, #16
16238     E4 75 BF FD | 	call	#_pop
1623c     FF 16 02 F6 | 	mov	arg03, result3
16240     A7 FA 61 FC | 	wrlong	result1, fp
16244     04 4E 05 F1 | 	add	fp, #4
16248     A7 FC 61 FC | 	wrlong	result2, fp
1624c     04 4E 05 F1 | 	add	fp, #4
16250     A7 16 62 FC | 	wrlong	arg03, fp
16254                 | ' t1=pop() : arg2=converttoint(t1)
16254                 | ' t1=pop() : arg1=converttoint(t1)
16254                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16254     08 4E 85 F1 | 	sub	fp, #8
16258     2B 16 0E F2 | 	cmp	arg03, #43 wz
1625c     18 00 90 5D |  if_ne	jmp	#LR__1811
16260     A7 12 02 FB | 	rdlong	arg01, fp
16264     30 77 BF FD | 	call	#_convertstring
16268     A7 FA 61 FC | 	wrlong	result1, fp
1626c     08 4E 05 F1 | 	add	fp, #8
16270     A7 3E 68 FC | 	wrlong	#31, fp
16274     08 4E 85 F1 | 	sub	fp, #8
16278                 | LR__1811
16278                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
16278     08 4E 05 F1 | 	add	fp, #8
1627c     A7 16 02 FB | 	rdlong	arg03, fp
16280     08 4E 85 F1 | 	sub	fp, #8
16284     1F 16 0E F2 | 	cmp	arg03, #31 wz
16288     40 00 90 AD |  if_e	jmp	#LR__1812
1628c     00 12 06 F6 | 	mov	arg01, #0
16290     20 7B B1 FD | 	call	#__system___getiolock_0620
16294     FD 12 02 F6 | 	mov	arg01, result1
16298     74 1E B1 FD | 	call	#__system___lockmem
1629c     B5 01 00 FF 
162a0     9D 15 06 F6 | 	mov	arg02, ##@LR__5867
162a4     00 12 06 F6 | 	mov	arg01, #0
162a8     00 16 06 F6 | 	mov	arg03, #0
162ac     58 2B B1 FD | 	call	#__system___basic_print_string
162b0     00 12 06 F6 | 	mov	arg01, #0
162b4     FC 7A B1 FD | 	call	#__system___getiolock_0620
162b8     FD 00 68 FC | 	wrlong	#0, result1
162bc     0F 12 06 F6 | 	mov	arg01, #15
162c0     00 14 06 F6 | 	mov	arg02, #0
162c4     F4 E3 B0 FD | 	call	#_printerror
162c8     28 00 90 FD | 	jmp	#LR__1813
162cc                 | LR__1812
162cc     A7 12 02 FB | 	rdlong	arg01, fp
162d0     10 4E 05 F1 | 	add	fp, #16
162d4     A7 14 02 FB | 	rdlong	arg02, fp
162d8     04 4E 05 F1 | 	add	fp, #4
162dc     A7 16 02 FB | 	rdlong	arg03, fp
162e0     14 4E 85 F1 | 	sub	fp, #20
162e4     C0 3F B1 FD | 	call	#__system__Mid_S
162e8     A7 FA 61 FC | 	wrlong	result1, fp
162ec     A7 12 02 F6 | 	mov	arg01, fp
162f0     C4 75 BF FD | 	call	#_push
162f4                 | LR__1813
162f4     A7 F0 03 F6 | 	mov	ptra, fp
162f8     B2 00 A0 FD | 	call	#popregs_
162fc                 | _do_mid_ret
162fc     2D 00 64 FD | 	ret
16300                 | 
16300                 | ' 
16300                 | ' '-------------------- mkdir
16300                 | ' 
16300                 | ' sub do_mkdir
16300                 | _do_mkdir
16300     04 4A 05 F6 | 	mov	COUNT_, #4
16304     A8 00 A0 FD | 	call	#pushregs_
16308     14 75 BF FD | 	call	#_pop
1630c     FE 18 02 F6 | 	mov	arg04, result2
16310     FF 16 02 F6 | 	mov	arg03, result3
16314     FD 26 02 F6 | 	mov	local01, result1
16318     0C 29 02 F6 | 	mov	local02, arg04
1631c     0B 2B 02 F6 | 	mov	local03, arg03
16320                 | ' 
16320                 | ' t1=pop()
16320                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16320     2B 2A 0E F2 | 	cmp	local03, #43 wz
16324     10 00 90 5D |  if_ne	jmp	#LR__1820
16328     13 13 02 F6 | 	mov	arg01, local01
1632c     68 76 BF FD | 	call	#_convertstring
16330     FD 26 02 F6 | 	mov	local01, result1
16334     1F 2A 06 F6 | 	mov	local03, #31
16338                 | LR__1820
16338                 | ' if t1.result_type<>result_string then printerror(15): return
16338     1F 2A 0E F2 | 	cmp	local03, #31 wz
1633c     10 00 90 AD |  if_e	jmp	#LR__1821
16340     0F 12 06 F6 | 	mov	arg01, #15
16344     00 14 06 F6 | 	mov	arg02, #0
16348     70 E3 B0 FD | 	call	#_printerror
1634c     64 00 90 FD | 	jmp	#LR__1823
16350                 | LR__1821
16350     13 13 02 F6 | 	mov	arg01, local01
16354     8C 46 B1 FD | 	call	#__system___mkdir
16358     FD 2C 0A F6 | 	mov	local04, result1 wz
1635c                 | ' filename$=t1.result.sresult
1635c                 | ' err=mkdir(filename$)
1635c                 | ' 'err=geterr() : 
1635c                 | ' if err<>0 then print "Cannot create a directory: system error "; err
1635c     54 00 90 AD |  if_e	jmp	#LR__1822
16360     00 12 06 F6 | 	mov	arg01, #0
16364     4C 7A B1 FD | 	call	#__system___getiolock_0620
16368     FD 12 02 F6 | 	mov	arg01, result1
1636c     A0 1D B1 FD | 	call	#__system___lockmem
16370     B5 01 00 FF 
16374     A4 15 06 F6 | 	mov	arg02, ##@LR__5868
16378     00 12 06 F6 | 	mov	arg01, #0
1637c     00 16 06 F6 | 	mov	arg03, #0
16380     84 2A B1 FD | 	call	#__system___basic_print_string
16384     00 12 06 F6 | 	mov	arg01, #0
16388     16 15 02 F6 | 	mov	arg02, local04
1638c     00 16 06 F6 | 	mov	arg03, #0
16390     0A 18 06 F6 | 	mov	arg04, #10
16394     B4 2A B1 FD | 	call	#__system___basic_print_integer
16398     00 12 06 F6 | 	mov	arg01, #0
1639c     0A 14 06 F6 | 	mov	arg02, #10
163a0     00 16 06 F6 | 	mov	arg03, #0
163a4     08 2A B1 FD | 	call	#__system___basic_print_char
163a8     00 12 06 F6 | 	mov	arg01, #0
163ac     04 7A B1 FD | 	call	#__system___getiolock_0620
163b0     FD 00 68 FC | 	wrlong	#0, result1
163b4                 | LR__1822
163b4                 | LR__1823
163b4     A7 F0 03 F6 | 	mov	ptra, fp
163b8     B2 00 A0 FD | 	call	#popregs_
163bc                 | _do_mkdir_ret
163bc     2D 00 64 FD | 	ret
163c0                 | 
163c0                 | ' 
163c0                 | ' '-------------------- mode
163c0                 | ' 
163c0                 | ' sub do_mode
163c0                 | _do_mode
163c0     05 4A 05 F6 | 	mov	COUNT_, #5
163c4     A8 00 A0 FD | 	call	#pushregs_
163c8     54 74 BF FD | 	call	#_pop
163cc     FD 26 02 F6 | 	mov	local01, result1
163d0     FE 28 02 F6 | 	mov	local02, result2
163d4     FF 2A 02 F6 | 	mov	local03, result3
163d8                 | ' t1=pop() 
163d8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
163d8     1E 2A 0E F2 | 	cmp	local03, #30 wz
163dc     10 00 90 5D |  if_ne	jmp	#LR__1830
163e0     13 13 02 F6 | 	mov	arg01, local01
163e4     00 14 06 F6 | 	mov	arg02, #0
163e8     68 50 B1 FD | 	call	#__system___float_tointeger
163ec     FD 26 02 F6 | 	mov	local01, result1
163f0                 | LR__1830
163f0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
163f0     1F 2A 0E F2 | 	cmp	local03, #31 wz
163f4     18 00 90 5D |  if_ne	jmp	#LR__1831
163f8     13 13 02 F6 | 	mov	arg01, local01
163fc     9C 53 B1 FD | 	call	#__system____builtin_atof
16400     FD 12 02 F6 | 	mov	arg01, result1
16404     00 14 06 F6 | 	mov	arg02, #0
16408     48 50 B1 FD | 	call	#__system___float_tointeger
1640c     FD 26 02 F6 | 	mov	local01, result1
16410                 | LR__1831
16410                 | ' select case t1.result.iresult
16410     13 2D 02 F6 | 	mov	local04, local01
16414     06 2C 26 F3 | 	fle	local04, #6
16418     30 2C 62 FD | 	jmprel	local04
1641c                 | LR__1832
1641c     18 00 90 FD | 	jmp	#LR__1833
16420     AC 00 90 FD | 	jmp	#LR__1834
16424     14 01 90 FD | 	jmp	#LR__1835
16428     7C 01 90 FD | 	jmp	#LR__1836
1642c     E4 01 90 FD | 	jmp	#LR__1837
16430     78 02 90 FD | 	jmp	#LR__1838
16434     08 03 90 FD | 	jmp	#LR__1839
16438                 | LR__1833
16438     37 00 00 FF 
1643c     60 E4 05 F1 | 	add	objptr, ##28256
16440     F2 02 68 FC | 	wrlong	#1, objptr
16444     04 E4 85 F1 | 	sub	objptr, #4
16448     F2 34 69 FC | 	wrlong	#154, objptr
1644c     19 00 00 FF 
16450     00 E5 05 F1 | 	add	objptr, ##13056
16454     F2 02 68 FC | 	wrlong	#1, objptr
16458     19 00 00 FF 
1645c     04 E5 85 F1 | 	sub	objptr, ##13060
16460     F2 26 69 FC | 	wrlong	#147, objptr
16464     37 00 00 FF 
16468     58 E4 85 F1 | 	sub	objptr, ##28248
1646c     04 12 06 F6 | 	mov	arg01, #4
16470     7C FE B0 FD | 	call	#_hg010b_spin2_setfontfamily
16474     37 00 00 FF 
16478     5C E4 05 F1 | 	add	objptr, ##28252
1647c     F2 12 02 FB | 	rdlong	arg01, objptr
16480     04 E4 85 F1 | 	sub	objptr, #4
16484     F2 14 02 FB | 	rdlong	arg02, objptr
16488                 | ' 
16488                 | ' write_color:=ff
16488     37 00 00 FF 
1648c     17 E4 85 F1 | 	sub	objptr, ##28183
16490     F2 12 62 FC | 	wrlong	arg01, objptr
16494                 | ' write_background:=bb
16494     04 E4 05 F1 | 	add	objptr, #4
16498     F2 14 62 FC | 	wrlong	arg02, objptr
1649c     01 00 00 FF 
164a0     00 EA 05 F1 | 	add	ptr__dat__, ##512
164a4     52 00 00 FF 
164a8     B7 E4 05 F1 | 	add	objptr, ##42167
164ac     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
164b0     04 E4 85 F1 | 	sub	objptr, #4
164b4     03 00 80 FF 
164b8     F2 30 69 FC | 	wrlong	##1688, objptr
164bc     52 00 00 FF 
164c0     F8 E4 85 F1 | 	sub	objptr, ##42232
164c4     01 00 00 FF 
164c8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
164cc     70 02 90 FD | 	jmp	#LR__1839
164d0                 | LR__1834
164d0     37 00 00 FF 
164d4     60 E4 05 F1 | 	add	objptr, ##28256
164d8     F2 00 68 FC | 	wrlong	#0, objptr
164dc     04 E4 85 F1 | 	sub	objptr, #4
164e0     F2 2E 68 FC | 	wrlong	#23, objptr
164e4     19 00 00 FF 
164e8     00 E5 05 F1 | 	add	objptr, ##13056
164ec     F2 00 68 FC | 	wrlong	#0, objptr
164f0     19 00 00 FF 
164f4     04 E5 85 F1 | 	sub	objptr, ##13060
164f8     F2 00 68 FC | 	wrlong	#0, objptr
164fc     37 00 00 FF 
16500     58 E4 85 F1 | 	sub	objptr, ##28248
16504     00 12 06 F6 | 	mov	arg01, #0
16508     E4 FD B0 FD | 	call	#_hg010b_spin2_setfontfamily
1650c     37 00 00 FF 
16510     5C E4 05 F1 | 	add	objptr, ##28252
16514     F2 12 02 FB | 	rdlong	arg01, objptr
16518     04 E4 85 F1 | 	sub	objptr, #4
1651c     F2 14 02 FB | 	rdlong	arg02, objptr
16520                 | ' 
16520                 | ' write_color:=ff
16520     37 00 00 FF 
16524     17 E4 85 F1 | 	sub	objptr, ##28183
16528     F2 12 62 FC | 	wrlong	arg01, objptr
1652c                 | ' write_background:=bb
1652c     04 E4 05 F1 | 	add	objptr, #4
16530     F2 14 62 FC | 	wrlong	arg02, objptr
16534     45 E4 85 F1 | 	sub	objptr, #69
16538     04 02 90 FD | 	jmp	#LR__1839
1653c                 | LR__1835
1653c     37 00 00 FF 
16540     60 E4 05 F1 | 	add	objptr, ##28256
16544     F2 00 68 FC | 	wrlong	#0, objptr
16548     04 E4 85 F1 | 	sub	objptr, #4
1654c     F2 6A 69 FC | 	wrlong	#181, objptr
16550     19 00 00 FF 
16554     00 E5 05 F1 | 	add	objptr, ##13056
16558     F2 00 68 FC | 	wrlong	#0, objptr
1655c     19 00 00 FF 
16560     04 E5 85 F1 | 	sub	objptr, ##13060
16564     F2 00 68 FC | 	wrlong	#0, objptr
16568     37 00 00 FF 
1656c     58 E4 85 F1 | 	sub	objptr, ##28248
16570     00 12 06 F6 | 	mov	arg01, #0
16574     78 FD B0 FD | 	call	#_hg010b_spin2_setfontfamily
16578     37 00 00 FF 
1657c     5C E4 05 F1 | 	add	objptr, ##28252
16580     F2 12 02 FB | 	rdlong	arg01, objptr
16584     04 E4 85 F1 | 	sub	objptr, #4
16588     F2 14 02 FB | 	rdlong	arg02, objptr
1658c                 | ' 
1658c                 | ' write_color:=ff
1658c     37 00 00 FF 
16590     17 E4 85 F1 | 	sub	objptr, ##28183
16594     F2 12 62 FC | 	wrlong	arg01, objptr
16598                 | ' write_background:=bb
16598     04 E4 05 F1 | 	add	objptr, #4
1659c     F2 14 62 FC | 	wrlong	arg02, objptr
165a0     45 E4 85 F1 | 	sub	objptr, #69
165a4     98 01 90 FD | 	jmp	#LR__1839
165a8                 | LR__1836
165a8     37 00 00 FF 
165ac     60 E4 05 F1 | 	add	objptr, ##28256
165b0     F2 00 68 FC | 	wrlong	#0, objptr
165b4     04 E4 85 F1 | 	sub	objptr, #4
165b8     F2 1E 68 FC | 	wrlong	#15, objptr
165bc     19 00 00 FF 
165c0     00 E5 05 F1 | 	add	objptr, ##13056
165c4     F2 00 68 FC | 	wrlong	#0, objptr
165c8     19 00 00 FF 
165cc     04 E5 85 F1 | 	sub	objptr, ##13060
165d0     F2 00 68 FC | 	wrlong	#0, objptr
165d4     37 00 00 FF 
165d8     58 E4 85 F1 | 	sub	objptr, ##28248
165dc     00 12 06 F6 | 	mov	arg01, #0
165e0     0C FD B0 FD | 	call	#_hg010b_spin2_setfontfamily
165e4     37 00 00 FF 
165e8     5C E4 05 F1 | 	add	objptr, ##28252
165ec     F2 12 02 FB | 	rdlong	arg01, objptr
165f0     04 E4 85 F1 | 	sub	objptr, #4
165f4     F2 14 02 FB | 	rdlong	arg02, objptr
165f8                 | ' 
165f8                 | ' write_color:=ff
165f8     37 00 00 FF 
165fc     17 E4 85 F1 | 	sub	objptr, ##28183
16600     F2 12 62 FC | 	wrlong	arg01, objptr
16604                 | ' write_background:=bb
16604     04 E4 05 F1 | 	add	objptr, #4
16608     F2 14 62 FC | 	wrlong	arg02, objptr
1660c     45 E4 85 F1 | 	sub	objptr, #69
16610     2C 01 90 FD | 	jmp	#LR__1839
16614                 | LR__1837
16614     37 00 00 FF 
16618     60 E4 05 F1 | 	add	objptr, ##28256
1661c     F2 02 68 FC | 	wrlong	#1, objptr
16620     04 E4 85 F1 | 	sub	objptr, #4
16624     F2 02 68 FC | 	wrlong	#1, objptr
16628     19 00 00 FF 
1662c     00 E5 05 F1 | 	add	objptr, ##13056
16630     F2 02 68 FC | 	wrlong	#1, objptr
16634     19 00 00 FF 
16638     04 E5 85 F1 | 	sub	objptr, ##13060
1663c     F2 1C 68 FC | 	wrlong	#14, objptr
16640     37 00 00 FF 
16644     58 E4 85 F1 | 	sub	objptr, ##28248
16648     04 12 06 F6 | 	mov	arg01, #4
1664c     A0 FC B0 FD | 	call	#_hg010b_spin2_setfontfamily
16650     37 00 00 FF 
16654     5C E4 05 F1 | 	add	objptr, ##28252
16658     F2 12 02 FB | 	rdlong	arg01, objptr
1665c     04 E4 85 F1 | 	sub	objptr, #4
16660     F2 14 02 FB | 	rdlong	arg02, objptr
16664                 | ' 
16664                 | ' write_color:=ff
16664     37 00 00 FF 
16668     17 E4 85 F1 | 	sub	objptr, ##28183
1666c     F2 12 62 FC | 	wrlong	arg01, objptr
16670                 | ' write_background:=bb
16670     04 E4 05 F1 | 	add	objptr, #4
16674     F2 14 62 FC | 	wrlong	arg02, objptr
16678     07 00 00 FF 
1667c     82 EB 05 F1 | 	add	ptr__dat__, ##3970
16680     52 00 00 FF 
16684     B7 E4 05 F1 | 	add	objptr, ##42167
16688     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1668c     04 E4 85 F1 | 	sub	objptr, #4
16690     03 00 80 FF 
16694     F2 30 69 FC | 	wrlong	##1688, objptr
16698     52 00 00 FF 
1669c     F8 E4 85 F1 | 	sub	objptr, ##42232
166a0     07 00 00 FF 
166a4     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
166a8     94 00 90 FD | 	jmp	#LR__1839
166ac                 | LR__1838
166ac     37 00 00 FF 
166b0     60 E4 05 F1 | 	add	objptr, ##28256
166b4     F2 04 68 FC | 	wrlong	#2, objptr
166b8     04 E4 85 F1 | 	sub	objptr, #4
166bc     F2 02 68 FC | 	wrlong	#1, objptr
166c0     19 00 00 FF 
166c4     00 E5 05 F1 | 	add	objptr, ##13056
166c8     F2 02 68 FC | 	wrlong	#1, objptr
166cc     19 00 00 FF 
166d0     04 E5 85 F1 | 	sub	objptr, ##13060
166d4     F2 0E 68 FC | 	wrlong	#7, objptr
166d8     37 00 00 FF 
166dc     58 E4 85 F1 | 	sub	objptr, ##28248
166e0     08 12 06 F6 | 	mov	arg01, #8
166e4     08 FC B0 FD | 	call	#_hg010b_spin2_setfontfamily
166e8     37 00 00 FF 
166ec     5C E4 05 F1 | 	add	objptr, ##28252
166f0     F2 12 02 FB | 	rdlong	arg01, objptr
166f4     04 E4 85 F1 | 	sub	objptr, #4
166f8     F2 14 02 FB | 	rdlong	arg02, objptr
166fc                 | ' 
166fc                 | ' write_color:=ff
166fc     37 00 00 FF 
16700     17 E4 85 F1 | 	sub	objptr, ##28183
16704     F2 12 62 FC | 	wrlong	arg01, objptr
16708                 | ' write_background:=bb
16708     04 E4 05 F1 | 	add	objptr, #4
1670c     F2 14 62 FC | 	wrlong	arg02, objptr
16710     07 00 00 FF 
16714     82 EB 05 F1 | 	add	ptr__dat__, ##3970
16718     52 00 00 FF 
1671c     B7 E4 05 F1 | 	add	objptr, ##42167
16720     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16724     04 E4 85 F1 | 	sub	objptr, #4
16728     03 00 80 FF 
1672c     F2 30 69 FC | 	wrlong	##1688, objptr
16730     52 00 00 FF 
16734     F8 E4 85 F1 | 	sub	objptr, ##42232
16738     07 00 00 FF 
1673c     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
16740                 | LR__1839
16740     52 00 00 FF 
16744     F4 E4 05 F1 | 	add	objptr, ##42228
16748     F2 26 62 FC | 	wrlong	local01, objptr
1674c     04 E4 85 F1 | 	sub	objptr, #4
16750     F2 12 02 FB | 	rdlong	arg01, objptr
16754     0F 00 00 FF 
16758     74 E4 85 F1 | 	sub	objptr, ##7796
1675c     F2 2E 02 FB | 	rdlong	local05, objptr
16760     43 00 00 FF 
16764     7C E4 85 F1 | 	sub	objptr, ##34428
16768     17 13 82 F1 | 	sub	arg01, local05
1676c     00 14 06 F6 | 	mov	arg02, #0
16770     0A 16 06 F6 | 	mov	arg03, #10
16774     6C 3C B1 FD | 	call	#__system__Number_S
16778     FD 12 02 F6 | 	mov	arg01, result1
1677c     B5 01 00 FF 
16780     CD 15 06 F6 | 	mov	arg02, ##@LR__5869
16784     E4 19 B1 FD | 	call	#__system___string_concat
16788     50 00 00 FF 
1678c     58 E5 05 F1 | 	add	objptr, ##41304
16790     F2 FA 61 FC | 	wrlong	result1, objptr
16794     19 00 00 FF 
16798     FC E4 85 F1 | 	sub	objptr, ##13052
1679c     F2 12 02 FB | 	rdlong	arg01, objptr
167a0     04 E4 85 F1 | 	sub	objptr, #4
167a4     F2 14 02 FB | 	rdlong	arg02, objptr
167a8     37 00 00 FF 
167ac     58 E4 85 F1 | 	sub	objptr, ##28248
167b0     00 FD B0 FD | 	call	#_hg010b_spin2_cls
167b4     B5 01 00 FF 
167b8     DF 13 06 F6 | 	mov	arg01, ##@LR__5870
167bc                 | ' 
167bc                 | ' write(text)
167bc     B4 00 B1 FD | 	call	#_hg010b_spin2_write
167c0                 | ' crlf
167c0     50 05 B1 FD | 	call	#_hg010b_spin2_crlf
167c4     18 00 00 FF 
167c8     40 EB 05 F1 | 	add	ptr__dat__, ##12608
167cc     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
167d0     18 00 00 FF 
167d4     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
167d8                 | ' 
167d8                 | ' write(text)
167d8     98 00 B1 FD | 	call	#_hg010b_spin2_write
167dc                 | ' crlf
167dc     34 05 B1 FD | 	call	#_hg010b_spin2_crlf
167e0     50 00 00 FF 
167e4     58 E5 05 F1 | 	add	objptr, ##41304
167e8     F2 12 02 FB | 	rdlong	arg01, objptr
167ec     50 00 00 FF 
167f0     58 E5 85 F1 | 	sub	objptr, ##41304
167f4                 | ' 
167f4                 | ' write(text)
167f4     7C 00 B1 FD | 	call	#_hg010b_spin2_write
167f8                 | ' crlf
167f8     18 05 B1 FD | 	call	#_hg010b_spin2_crlf
167fc     A7 F0 03 F6 | 	mov	ptra, fp
16800     B2 00 A0 FD | 	call	#popregs_
16804                 | _do_mode_ret
16804     2D 00 64 FD | 	ret
16808                 | 
16808                 | ' 
16808                 | ' '-------------------- mouse
16808                 | ' 
16808                 | ' sub do_mouse
16808                 | _do_mouse
16808     14 70 BF FD | 	call	#_pop
1680c     00 FA 4D F2 | 	cmps	result1, #0 wz
16810                 | ' 
16810                 | ' t1=pop()
16810                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
16810     14 00 90 5D |  if_ne	jmp	#LR__1840
16814     10 12 06 F6 | 	mov	arg01, #16
16818     00 14 06 F6 | 	mov	arg02, #0
1681c     00 16 06 F6 | 	mov	arg03, #0
16820     FC EE B0 FD | 	call	#_hg010b_spin2_setspritesize
16824     10 00 90 FD | 	jmp	#LR__1841
16828                 | LR__1840
16828     10 12 06 F6 | 	mov	arg01, #16
1682c     20 14 06 F6 | 	mov	arg02, #32
16830     20 16 06 F6 | 	mov	arg03, #32
16834     E8 EE B0 FD | 	call	#_hg010b_spin2_setspritesize
16838                 | LR__1841
16838                 | _do_mouse_ret
16838     2D 00 64 FD | 	ret
1683c                 | 
1683c                 | ' 
1683c                 | ' '-------------------- mousek
1683c                 | ' 
1683c                 | ' sub do_mousek
1683c                 | _do_mousek
1683c     00 4A 05 F6 | 	mov	COUNT_, #0
16840     A8 00 A0 FD | 	call	#pushregs_
16844     0C F0 07 F1 | 	add	ptra, #12
16848     08 4E 05 F1 | 	add	fp, #8
1684c     A7 3A 68 FC | 	wrlong	#29, fp
16850     08 4E 85 F1 | 	sub	fp, #8
16854     51 00 00 FF 
16858     70 E5 05 F1 | 	add	objptr, ##41840
1685c     F2 12 02 FB | 	rdlong	arg01, objptr
16860     51 00 00 FF 
16864     70 E5 85 F1 | 	sub	objptr, ##41840
16868     A7 12 62 FC | 	wrlong	arg01, fp
1686c     A7 12 02 F6 | 	mov	arg01, fp
16870     44 70 BF FD | 	call	#_push
16874     A7 F0 03 F6 | 	mov	ptra, fp
16878     B2 00 A0 FD | 	call	#popregs_
1687c                 | _do_mousek_ret
1687c     2D 00 64 FD | 	ret
16880                 | 
16880                 | ' 
16880                 | ' '-------------------- mousew
16880                 | ' 
16880                 | ' sub do_mousew
16880                 | _do_mousew
16880     00 4A 05 F6 | 	mov	COUNT_, #0
16884     A8 00 A0 FD | 	call	#pushregs_
16888     0C F0 07 F1 | 	add	ptra, #12
1688c     08 4E 05 F1 | 	add	fp, #8
16890     A7 38 68 FC | 	wrlong	#28, fp
16894     08 4E 85 F1 | 	sub	fp, #8
16898     51 00 00 FF 
1689c     74 E5 05 F1 | 	add	objptr, ##41844
168a0     F2 12 02 FB | 	rdlong	arg01, objptr
168a4     51 00 00 FF 
168a8     74 E5 85 F1 | 	sub	objptr, ##41844
168ac     A7 12 62 FC | 	wrlong	arg01, fp
168b0     A7 12 02 F6 | 	mov	arg01, fp
168b4     00 70 BF FD | 	call	#_push
168b8     A7 F0 03 F6 | 	mov	ptra, fp
168bc     B2 00 A0 FD | 	call	#popregs_
168c0                 | _do_mousew_ret
168c0     2D 00 64 FD | 	ret
168c4                 | 
168c4                 | ' 
168c4                 | ' '-------------------- mousex
168c4                 | ' 
168c4                 | ' sub do_mousex
168c4                 | _do_mousex
168c4     00 4A 05 F6 | 	mov	COUNT_, #0
168c8     A8 00 A0 FD | 	call	#pushregs_
168cc     0C F0 07 F1 | 	add	ptra, #12
168d0     08 4E 05 F1 | 	add	fp, #8
168d4     A7 3A 68 FC | 	wrlong	#29, fp
168d8     08 4E 85 F1 | 	sub	fp, #8
168dc     51 00 00 FF 
168e0     68 E5 05 F1 | 	add	objptr, ##41832
168e4     F2 12 02 FB | 	rdlong	arg01, objptr
168e8     51 00 00 FF 
168ec     68 E5 85 F1 | 	sub	objptr, ##41832
168f0     A7 12 62 FC | 	wrlong	arg01, fp
168f4     A7 12 02 F6 | 	mov	arg01, fp
168f8     BC 6F BF FD | 	call	#_push
168fc     A7 F0 03 F6 | 	mov	ptra, fp
16900     B2 00 A0 FD | 	call	#popregs_
16904                 | _do_mousex_ret
16904     2D 00 64 FD | 	ret
16908                 | 
16908                 | ' 
16908                 | ' '-------------------- mousey
16908                 | ' 
16908                 | ' sub do_mousey
16908                 | _do_mousey
16908     00 4A 05 F6 | 	mov	COUNT_, #0
1690c     A8 00 A0 FD | 	call	#pushregs_
16910     0C F0 07 F1 | 	add	ptra, #12
16914     08 4E 05 F1 | 	add	fp, #8
16918     A7 3A 68 FC | 	wrlong	#29, fp
1691c     08 4E 85 F1 | 	sub	fp, #8
16920     51 00 00 FF 
16924     6C E5 05 F1 | 	add	objptr, ##41836
16928     F2 12 02 FB | 	rdlong	arg01, objptr
1692c     51 00 00 FF 
16930     6C E5 85 F1 | 	sub	objptr, ##41836
16934     A7 12 62 FC | 	wrlong	arg01, fp
16938     A7 12 02 F6 | 	mov	arg01, fp
1693c     78 6F BF FD | 	call	#_push
16940     A7 F0 03 F6 | 	mov	ptra, fp
16944     B2 00 A0 FD | 	call	#popregs_
16948                 | _do_mousey_ret
16948     2D 00 64 FD | 	ret
1694c                 | 
1694c                 | ' 
1694c                 | ' '------------------ new
1694c                 | ' 
1694c                 | ' sub do_new
1694c                 | _do_new
1694c     03 4A 05 F6 | 	mov	COUNT_, #3
16950     A8 00 A0 FD | 	call	#pushregs_
16954                 | ' 
16954                 | ' if inrun=1 then inrun=2
16954     50 00 00 FF 
16958     0C E5 05 F1 | 	add	objptr, ##41228
1695c     F2 16 02 FB | 	rdlong	arg03, objptr
16960     50 00 00 FF 
16964     0C E5 85 F1 | 	sub	objptr, ##41228
16968     01 16 0E F2 | 	cmp	arg03, #1 wz
1696c     50 00 00 AF 
16970     0C E5 05 A1 |  if_e	add	objptr, ##41228
16974     F2 04 68 AC |  if_e	wrlong	#2, objptr
16978     50 00 00 AF 
1697c     0C E5 85 A1 |  if_e	sub	objptr, ##41228
16980     13 12 C6 F9 | 	decod	arg01, #19
16984     01 14 66 F6 | 	neg	arg02, #1
16988     D0 DE B0 FD | 	call	#_pslpoke
1698c     35 00 00 FF 
16990     28 E4 05 F1 | 	add	objptr, ##27176
16994     F2 00 68 FC | 	wrlong	#0, objptr
16998                 | ' pslpoke(memlo,$FFFFFFFF)
16998                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
16998     00 26 06 F6 | 	mov	local01, #0
1699c     20 00 00 FF 
169a0     10 E4 85 F1 | 	sub	objptr, ##16400
169a4     97 1E 48 FB | 	callpa	#(@LR__1851-@LR__1850)>>2,fcache_load_ptr_
169a8                 | LR__1850
169a8     13 17 02 F6 | 	mov	arg03, local01
169ac     04 16 66 F0 | 	shl	arg03, #4
169b0     F2 16 02 F1 | 	add	arg03, objptr
169b4     B5 01 00 FF 
169b8     E0 15 06 F6 | 	mov	arg02, ##@LR__5871
169bc     0B 15 62 FC | 	wrlong	arg02, arg03
169c0     13 29 02 F6 | 	mov	local02, local01
169c4     04 28 66 F0 | 	shl	local02, #4
169c8     F2 28 02 F1 | 	add	local02, objptr
169cc     0C 28 06 F1 | 	add	local02, #12
169d0     14 01 68 FC | 	wrlong	#0, local02
169d4     01 26 06 F1 | 	add	local01, #1
169d8     02 00 00 FF 
169dc     01 26 56 F2 | 	cmps	local01, ##1025 wc
169e0     C4 FF 9F CD |  if_b	jmp	#LR__1850
169e4                 | LR__1851
169e4     35 00 00 FF 
169e8     90 E4 05 F1 | 	add	objptr, ##27280
169ec     00 04 80 FF 
169f0     F2 00 68 FC | 	wrlong	##524288, objptr
169f4     06 00 00 FF 
169f8     30 E4 05 F1 | 	add	objptr, ##3120
169fc     00 04 80 FF 
16a00     F2 00 68 FC | 	wrlong	##524288, objptr
16a04     04 E4 05 F1 | 	add	objptr, #4
16a08     00 04 80 FF 
16a0c     F2 00 68 FC | 	wrlong	##524288, objptr
16a10     0D 00 00 FF 
16a14     64 E4 85 F1 | 	sub	objptr, ##6756
16a18     F2 00 68 FC | 	wrlong	#0, objptr
16a1c     07 00 00 FF 
16a20     24 E4 05 F1 | 	add	objptr, ##3620
16a24     F2 00 68 FC | 	wrlong	#0, objptr
16a28     07 00 00 FF 
16a2c     20 E4 85 F1 | 	sub	objptr, ##3616
16a30     00 04 80 FF 
16a34     F2 00 68 FC | 	wrlong	##524288, objptr
16a38     0D 00 00 FF 
16a3c     D0 E4 05 F1 | 	add	objptr, ##6864
16a40     F2 00 68 FC | 	wrlong	#0, objptr
16a44     B5 01 00 FF 
16a48     E1 2B 06 F6 | 	mov	local03, ##@LR__5872
16a4c     01 00 00 FF 
16a50     E8 E5 05 F1 | 	add	objptr, ##1000
16a54     F2 2A 62 FC | 	wrlong	local03, objptr
16a58     08 00 00 FF 
16a5c     88 E4 85 F1 | 	sub	objptr, ##4232
16a60     F2 00 68 FC | 	wrlong	#0, objptr
16a64     04 E4 05 F1 | 	add	objptr, #4
16a68     FF FF FF FF 
16a6c     F2 FE 6B FC | 	wrlong	##-1, objptr
16a70     06 00 00 FF 
16a74     A0 E4 05 F1 | 	add	objptr, ##3232
16a78     F2 00 68 FC | 	wrlong	#0, objptr
16a7c     04 E4 05 F1 | 	add	objptr, #4
16a80     F2 00 68 FC | 	wrlong	#0, objptr
16a84                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
16a84                 | ' stackpointer=0
16a84                 | ' lineptr=0 
16a84                 | ' programptr=memlo ': stringptr=0
16a84                 | ' dataptr=0 : readline=""
16a84                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
16a84                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
16a84     00 26 06 F6 | 	mov	local01, #0
16a88     06 00 00 FF 
16a8c     9C E4 85 F1 | 	sub	objptr, ##3228
16a90     97 16 48 FB | 	callpa	#(@LR__1853-@LR__1852)>>2,fcache_load_ptr_
16a94                 | LR__1852
16a94     13 29 02 F6 | 	mov	local02, local01
16a98     02 28 66 F0 | 	shl	local02, #2
16a9c     13 29 02 F1 | 	add	local02, local01
16aa0     02 28 66 F0 | 	shl	local02, #2
16aa4     F2 28 02 F1 | 	add	local02, objptr
16aa8     08 28 06 F1 | 	add	local02, #8
16aac     FF FF FF FF 
16ab0     14 FF 6B FC | 	wrlong	##-1, local02
16ab4     01 26 06 F1 | 	add	local01, #1
16ab8     41 26 56 F2 | 	cmps	local01, #65 wc
16abc     D4 FF 9F CD |  if_b	jmp	#LR__1852
16ac0                 | LR__1853
16ac0     4A 00 00 FF 
16ac4     B8 E4 85 F1 | 	sub	objptr, ##38072
16ac8                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
16ac8     00 26 06 F6 | 	mov	local01, #0
16acc                 | LR__1854
16acc     13 29 02 F6 | 	mov	local02, local01
16ad0     02 28 66 F0 | 	shl	local02, #2
16ad4     52 00 00 FF 
16ad8     AC E4 05 F1 | 	add	objptr, ##42156
16adc     F2 28 02 F1 | 	add	local02, objptr
16ae0     14 2B 0A FB | 	rdlong	local03, local02 wz
16ae4     52 00 00 FF 
16ae8     AC E4 85 F1 | 	sub	objptr, ##42156
16aec     34 00 90 AD |  if_e	jmp	#LR__1855
16af0     13 13 02 F6 | 	mov	arg01, local01
16af4     00 14 06 F6 | 	mov	arg02, #0
16af8     00 16 06 F6 | 	mov	arg03, #0
16afc     20 EC B0 FD | 	call	#_hg010b_spin2_setspritesize
16b00     13 29 02 F6 | 	mov	local02, local01
16b04     02 28 66 F0 | 	shl	local02, #2
16b08     52 00 00 FF 
16b0c     AC E4 05 F1 | 	add	objptr, ##42156
16b10     F2 28 02 F1 | 	add	local02, objptr
16b14     14 13 02 FB | 	rdlong	arg01, local02
16b18     52 00 00 FF 
16b1c     AC E4 85 F1 | 	sub	objptr, ##42156
16b20     D0 58 B1 FD | 	call	#__system___gc_free
16b24                 | LR__1855
16b24     01 26 06 F1 | 	add	local01, #1
16b28     10 26 56 F2 | 	cmps	local01, #16 wc
16b2c     9C FF 9F CD |  if_b	jmp	#LR__1854
16b30     52 00 00 FF 
16b34     00 E5 05 F1 | 	add	objptr, ##42240
16b38     00 C0 9F FF 
16b3c     F2 00 68 FC | 	wrlong	##1065353216, objptr
16b40     04 E4 05 F1 | 	add	objptr, #4
16b44     00 C0 9F FF 
16b48     F2 00 68 FC | 	wrlong	##1065353216, objptr
16b4c     52 00 00 FF 
16b50     00 E5 85 F1 | 	sub	objptr, ##42240
16b54     F2 2A 02 FB | 	rdlong	local03, objptr
16b58     52 00 00 FF 
16b5c     EC E4 05 F1 | 	add	objptr, ##42220
16b60     F2 2A 62 FC | 	wrlong	local03, objptr
16b64     52 00 00 FF 
16b68     F0 E4 85 F1 | 	sub	objptr, ##42224
16b6c     11 12 06 F6 | 	mov	arg01, #17
16b70     08 14 06 F6 | 	mov	arg02, #8
16b74     10 16 06 F6 | 	mov	arg03, #16
16b78     A4 EB B0 FD | 	call	#_hg010b_spin2_setspritesize
16b7c     10 12 06 F6 | 	mov	arg01, #16
16b80     20 14 06 F6 | 	mov	arg02, #32
16b84     20 16 06 F6 | 	mov	arg03, #32
16b88     94 EB B0 FD | 	call	#_hg010b_spin2_setspritesize
16b8c     B5 01 00 FF 
16b90     E2 2B 06 F6 | 	mov	local03, ##@LR__5873
16b94     52 00 00 FF 
16b98     1C E5 05 F1 | 	add	objptr, ##42268
16b9c     F2 2A 62 FC | 	wrlong	local03, objptr
16ba0     52 00 00 FF 
16ba4     1C E5 85 F1 | 	sub	objptr, ##42268
16ba8     CC CE B0 FD | 	call	#_init_audio
16bac     A7 F0 03 F6 | 	mov	ptra, fp
16bb0     B2 00 A0 FD | 	call	#popregs_
16bb4                 | _do_new_ret
16bb4     2D 00 64 FD | 	ret
16bb8                 | 
16bb8                 | ' 
16bb8                 | ' '-------------------- next
16bb8                 | ' 
16bb8                 | ' sub do_next()
16bb8                 | _do_next
16bb8     04 4A 05 F6 | 	mov	COUNT_, #4
16bbc     A8 00 A0 FD | 	call	#pushregs_
16bc0     5C 6C BF FD | 	call	#_pop
16bc4     FD 26 02 F6 | 	mov	local01, result1
16bc8     FE 28 02 F6 | 	mov	local02, result2
16bcc     FF 2A 02 F6 | 	mov	local03, result3
16bd0                 | ' t1=pop() :varnum=t1.result.uresult
16bd0                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
16bd0     50 00 00 FF 
16bd4     50 E5 05 F1 | 	add	objptr, ##41296
16bd8     F2 14 02 FB | 	rdlong	arg02, objptr
16bdc     0A 13 02 F6 | 	mov	arg01, arg02
16be0     02 12 66 F0 | 	shl	arg01, #2
16be4     0A 13 02 F1 | 	add	arg01, arg02
16be8     02 12 66 F0 | 	shl	arg01, #2
16bec     06 00 00 FF 
16bf0     98 E4 85 F1 | 	sub	objptr, ##3224
16bf4     F2 12 02 F1 | 	add	arg01, objptr
16bf8     08 12 06 F1 | 	add	arg01, #8
16bfc     09 15 02 FB | 	rdlong	arg02, arg01
16c00     13 15 0A F2 | 	cmp	arg02, local01 wz
16c04     4A 00 00 FF 
16c08     B8 E4 85 F1 | 	sub	objptr, ##38072
16c0c     10 00 90 AD |  if_e	jmp	#LR__1860
16c10     25 12 06 F6 | 	mov	arg01, #37
16c14     00 14 06 F6 | 	mov	arg02, #0
16c18     A0 DA B0 FD | 	call	#_printerror
16c1c     54 03 90 FD | 	jmp	#LR__1867
16c20                 | LR__1860
16c20                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
16c20     13 15 02 F6 | 	mov	arg02, local01
16c24     04 14 66 F0 | 	shl	arg02, #4
16c28     15 00 00 FF 
16c2c     18 E4 05 F1 | 	add	objptr, ##10776
16c30     F2 14 02 F1 | 	add	arg02, objptr
16c34     0C 14 06 F1 | 	add	arg02, #12
16c38     0A 15 02 FB | 	rdlong	arg02, arg02
16c3c     1E 14 0E F2 | 	cmp	arg02, #30 wz
16c40     15 00 00 FF 
16c44     18 E4 85 F1 | 	sub	objptr, ##10776
16c48     54 00 90 5D |  if_ne	jmp	#LR__1861
16c4c     13 15 02 F6 | 	mov	arg02, local01
16c50     04 14 66 F0 | 	shl	arg02, #4
16c54     15 00 00 FF 
16c58     18 E4 05 F1 | 	add	objptr, ##10776
16c5c     F2 14 02 F1 | 	add	arg02, objptr
16c60     0C 14 06 F1 | 	add	arg02, #12
16c64     0A 39 68 FC | 	wrlong	#28, arg02
16c68     13 2D 02 F6 | 	mov	local04, local01
16c6c     04 2C 66 F0 | 	shl	local04, #4
16c70     F2 2C 02 F1 | 	add	local04, objptr
16c74     13 15 02 F6 | 	mov	arg02, local01
16c78     04 14 66 F0 | 	shl	arg02, #4
16c7c     F2 14 02 F1 | 	add	arg02, objptr
16c80     04 14 06 F1 | 	add	arg02, #4
16c84     0A 13 02 FB | 	rdlong	arg01, arg02
16c88     15 00 00 FF 
16c8c     18 E4 85 F1 | 	sub	objptr, ##10776
16c90     01 14 06 F6 | 	mov	arg02, #1
16c94     BC 47 B1 FD | 	call	#__system___float_tointeger
16c98     04 2C 06 F1 | 	add	local04, #4
16c9c     16 FB 61 FC | 	wrlong	result1, local04
16ca0                 | LR__1861
16ca0     50 00 00 FF 
16ca4     50 E5 05 F1 | 	add	objptr, ##41296
16ca8     F2 2C 02 FB | 	rdlong	local04, objptr
16cac     16 15 02 F6 | 	mov	arg02, local04
16cb0     02 14 66 F0 | 	shl	arg02, #2
16cb4     16 15 02 F1 | 	add	arg02, local04
16cb8     02 14 66 F0 | 	shl	arg02, #2
16cbc     06 00 00 FF 
16cc0     98 E4 85 F1 | 	sub	objptr, ##3224
16cc4     F2 14 02 F1 | 	add	arg02, objptr
16cc8     0C 14 06 F1 | 	add	arg02, #12
16ccc     0A FF 01 FB | 	rdlong	result3, arg02
16cd0     13 2D 02 F6 | 	mov	local04, local01
16cd4     04 2C 66 F0 | 	shl	local04, #4
16cd8     35 00 00 FF 
16cdc     A0 E4 85 F1 | 	sub	objptr, ##27296
16ce0     F2 2C 02 F1 | 	add	local04, objptr
16ce4     13 15 02 F6 | 	mov	arg02, local01
16ce8     04 14 66 F0 | 	shl	arg02, #4
16cec     F2 14 02 F1 | 	add	arg02, objptr
16cf0     04 14 06 F1 | 	add	arg02, #4
16cf4     0A 13 02 FB | 	rdlong	arg01, arg02
16cf8     FF 12 02 F1 | 	add	arg01, result3
16cfc     04 2C 06 F1 | 	add	local04, #4
16d00     16 13 62 FC | 	wrlong	arg01, local04
16d04                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
16d04                 | ' if fortable(fortop).stepval>=0 then
16d04     3B 00 00 FF 
16d08     38 E5 05 F1 | 	add	objptr, ##30520
16d0c     F2 2C 02 FB | 	rdlong	local04, objptr
16d10     16 13 02 F6 | 	mov	arg01, local04
16d14     02 12 66 F0 | 	shl	arg01, #2
16d18     16 13 02 F1 | 	add	arg01, local04
16d1c     02 12 66 F0 | 	shl	arg01, #2
16d20     06 00 00 FF 
16d24     98 E4 85 F1 | 	sub	objptr, ##3224
16d28     F2 12 02 F1 | 	add	arg01, objptr
16d2c     0C 12 06 F1 | 	add	arg01, #12
16d30     09 13 02 FB | 	rdlong	arg01, arg01
16d34     00 12 56 F2 | 	cmps	arg01, #0 wc
16d38     4A 00 00 FF 
16d3c     B8 E4 85 F1 | 	sub	objptr, ##38072
16d40     78 00 90 CD |  if_b	jmp	#LR__1862
16d44                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
16d44     04 26 66 F0 | 	shl	local01, #4
16d48     15 00 00 FF 
16d4c     18 E4 05 F1 | 	add	objptr, ##10776
16d50     F2 26 02 F1 | 	add	local01, objptr
16d54     3B 00 00 FF 
16d58     38 E5 05 F1 | 	add	objptr, ##30520
16d5c     F2 12 02 FB | 	rdlong	arg01, objptr
16d60     09 2D 02 F6 | 	mov	local04, arg01
16d64     02 2C 66 F0 | 	shl	local04, #2
16d68     09 2D 02 F1 | 	add	local04, arg01
16d6c     02 2C 66 F0 | 	shl	local04, #2
16d70     06 00 00 FF 
16d74     98 E4 85 F1 | 	sub	objptr, ##3224
16d78     F2 2C 02 F1 | 	add	local04, objptr
16d7c     04 26 06 F1 | 	add	local01, #4
16d80     13 27 02 FB | 	rdlong	local01, local01
16d84     10 2C 06 F1 | 	add	local04, #16
16d88     16 2D 02 FB | 	rdlong	local04, local04
16d8c     16 27 5A F2 | 	cmps	local01, local04 wcz
16d90     4A 00 00 FF 
16d94     B8 E4 85 F1 | 	sub	objptr, ##38072
16d98     9C 00 90 ED |  if_be	jmp	#LR__1864
16d9c     50 00 00 FF 
16da0     50 E5 05 F1 | 	add	objptr, ##41296
16da4     F2 2C 02 FB | 	rdlong	local04, objptr
16da8     01 2C 86 F1 | 	sub	local04, #1
16dac     F2 2C 62 FC | 	wrlong	local04, objptr
16db0     50 00 00 FF 
16db4     50 E5 85 F1 | 	sub	objptr, ##41296
16db8     B8 01 90 FD | 	jmp	#LR__1867
16dbc                 | LR__1862
16dbc                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
16dbc     13 2D 02 F6 | 	mov	local04, local01
16dc0     04 2C 66 F0 | 	shl	local04, #4
16dc4     15 00 00 FF 
16dc8     18 E4 05 F1 | 	add	objptr, ##10776
16dcc     F2 2C 02 F1 | 	add	local04, objptr
16dd0     3B 00 00 FF 
16dd4     38 E5 05 F1 | 	add	objptr, ##30520
16dd8     F2 26 02 FB | 	rdlong	local01, objptr
16ddc     13 13 02 F6 | 	mov	arg01, local01
16de0     02 12 66 F0 | 	shl	arg01, #2
16de4     13 13 02 F1 | 	add	arg01, local01
16de8     02 12 66 F0 | 	shl	arg01, #2
16dec     06 00 00 FF 
16df0     98 E4 85 F1 | 	sub	objptr, ##3224
16df4     F2 12 02 F1 | 	add	arg01, objptr
16df8     04 2C 06 F1 | 	add	local04, #4
16dfc     16 2D 02 FB | 	rdlong	local04, local04
16e00     10 12 06 F1 | 	add	arg01, #16
16e04     09 13 02 FB | 	rdlong	arg01, arg01
16e08     09 2D 52 F2 | 	cmps	local04, arg01 wc
16e0c     4A 00 00 FF 
16e10     B8 E4 85 F1 | 	sub	objptr, ##38072
16e14     20 00 90 3D |  if_ae	jmp	#LR__1863
16e18     50 00 00 FF 
16e1c     50 E5 05 F1 | 	add	objptr, ##41296
16e20     F2 2C 02 FB | 	rdlong	local04, objptr
16e24     01 2C 86 F1 | 	sub	local04, #1
16e28     F2 2C 62 FC | 	wrlong	local04, objptr
16e2c     50 00 00 FF 
16e30     50 E5 85 F1 | 	sub	objptr, ##41296
16e34     3C 01 90 FD | 	jmp	#LR__1867
16e38                 | LR__1863
16e38                 | LR__1864
16e38                 | ' ' if not returned, goto pointer 
16e38                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
16e38     50 00 00 FF 
16e3c     0C E5 05 F1 | 	add	objptr, ##41228
16e40     F2 2C 02 FB | 	rdlong	local04, objptr
16e44     50 00 00 FF 
16e48     0C E5 85 F1 | 	sub	objptr, ##41228
16e4c     01 2C 16 F2 | 	cmp	local04, #1 wc
16e50     DC 00 90 CD |  if_b	jmp	#LR__1865
16e54     50 00 00 FF 
16e58     50 E5 05 F1 | 	add	objptr, ##41296
16e5c     F2 2C 02 FB | 	rdlong	local04, objptr
16e60     16 27 02 F6 | 	mov	local01, local04
16e64     02 26 66 F0 | 	shl	local01, #2
16e68     16 27 02 F1 | 	add	local01, local04
16e6c     02 26 66 F0 | 	shl	local01, #2
16e70     06 00 00 FF 
16e74     98 E4 85 F1 | 	sub	objptr, ##3224
16e78     F2 26 02 F1 | 	add	local01, objptr
16e7c     06 00 00 FF 
16e80     20 E4 05 F1 | 	add	objptr, ##3104
16e84     F2 2C 02 FB | 	rdlong	local04, objptr
16e88     50 00 00 FF 
16e8c     D8 E4 85 F1 | 	sub	objptr, ##41176
16e90     13 27 02 FB | 	rdlong	local01, local01
16e94     13 2D 0A F2 | 	cmp	local04, local01 wz
16e98     94 00 90 AD |  if_e	jmp	#LR__1865
16e9c     50 00 00 FF 
16ea0     50 E5 05 F1 | 	add	objptr, ##41296
16ea4     F2 2C 02 FB | 	rdlong	local04, objptr
16ea8     16 27 02 F6 | 	mov	local01, local04
16eac     02 26 66 F0 | 	shl	local01, #2
16eb0     16 27 02 F1 | 	add	local01, local04
16eb4     02 26 66 F0 | 	shl	local01, #2
16eb8     06 00 00 FF 
16ebc     98 E4 85 F1 | 	sub	objptr, ##3224
16ec0     F2 26 02 F1 | 	add	local01, objptr
16ec4     13 27 02 FB | 	rdlong	local01, local01
16ec8     06 00 00 FF 
16ecc     20 E4 05 F1 | 	add	objptr, ##3104
16ed0     F2 26 62 FC | 	wrlong	local01, objptr
16ed4     78 E4 05 F1 | 	add	objptr, #120
16ed8     F2 2C 02 FB | 	rdlong	local04, objptr
16edc     16 27 02 F6 | 	mov	local01, local04
16ee0     02 26 66 F0 | 	shl	local01, #2
16ee4     16 27 02 F1 | 	add	local01, local04
16ee8     02 26 66 F0 | 	shl	local01, #2
16eec     06 00 00 FF 
16ef0     98 E4 85 F1 | 	sub	objptr, ##3224
16ef4     F2 26 02 F1 | 	add	local01, objptr
16ef8     04 26 06 F1 | 	add	local01, #4
16efc     13 27 02 FB | 	rdlong	local01, local01
16f00     06 00 00 FF 
16f04     24 E4 05 F1 | 	add	objptr, ##3108
16f08     F2 26 62 FC | 	wrlong	local01, objptr
16f0c     06 00 00 FF 
16f10     40 E4 85 F1 | 	sub	objptr, ##3136
16f14     F2 2C 02 FB | 	rdlong	local04, objptr
16f18     01 2C 86 F1 | 	sub	local04, #1
16f1c     04 E4 05 F1 | 	add	objptr, #4
16f20     F2 2C 62 FC | 	wrlong	local04, objptr
16f24     4A 00 00 FF 
16f28     A0 E4 85 F1 | 	sub	objptr, ##38048
16f2c     44 00 90 FD | 	jmp	#LR__1866
16f30                 | LR__1865
16f30     50 00 00 FF 
16f34     50 E5 05 F1 | 	add	objptr, ##41296
16f38     F2 2C 02 FB | 	rdlong	local04, objptr
16f3c     16 27 02 F6 | 	mov	local01, local04
16f40     02 26 66 F0 | 	shl	local01, #2
16f44     16 27 02 F1 | 	add	local01, local04
16f48     02 26 66 F0 | 	shl	local01, #2
16f4c     06 00 00 FF 
16f50     98 E4 85 F1 | 	sub	objptr, ##3224
16f54     F2 26 02 F1 | 	add	local01, objptr
16f58     04 26 06 F1 | 	add	local01, #4
16f5c     13 27 02 FB | 	rdlong	local01, local01
16f60     01 26 86 F1 | 	sub	local01, #1
16f64     18 E4 85 F1 | 	sub	objptr, #24
16f68     F2 26 62 FC | 	wrlong	local01, objptr
16f6c     4A 00 00 FF 
16f70     A0 E4 85 F1 | 	sub	objptr, ##38048
16f74                 | LR__1866
16f74                 | LR__1867
16f74     A7 F0 03 F6 | 	mov	ptra, fp
16f78     B2 00 A0 FD | 	call	#popregs_
16f7c                 | _do_next_ret
16f7c     2D 00 64 FD | 	ret
16f80                 | 
16f80                 | ' 
16f80                 | ' '-------------------- no command (print "Unknown command")
16f80                 | ' 
16f80                 | ' sub do_no_command
16f80                 | _do_no_command
16f80     50 00 00 FF 
16f84     10 E5 05 F1 | 	add	objptr, ##41232
16f88     F2 14 02 FB | 	rdlong	arg02, objptr
16f8c     50 00 00 FF 
16f90     10 E5 85 F1 | 	sub	objptr, ##41232
16f94     17 12 06 F6 | 	mov	arg01, #23
16f98     20 D7 B0 FD | 	call	#_printerror
16f9c                 | _do_no_command_ret
16f9c     2D 00 64 FD | 	ret
16fa0                 | 
16fa0                 | ' 
16fa0                 | ' '-------------------- nothing
16fa0                 | ' 
16fa0                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
16fa0                 | _do_nothing
16fa0                 | _do_nothing_ret
16fa0     2D 00 64 FD | 	ret
16fa4                 | 
16fa4                 | ' 
16fa4                 | ' '-------------------- on
16fa4                 | ' 
16fa4                 | ' sub do_on
16fa4                 | _do_on
16fa4     01 4A 05 F6 | 	mov	COUNT_, #1
16fa8     A8 00 A0 FD | 	call	#pushregs_
16fac     18 F0 07 F1 | 	add	ptra, #24
16fb0     4A 00 00 FF 
16fb4     A0 E4 05 F1 | 	add	objptr, ##38048
16fb8     F2 12 02 FB | 	rdlong	arg01, objptr
16fbc     09 FD 01 F6 | 	mov	result2, arg01
16fc0     01 FC 65 F0 | 	shl	result2, #1
16fc4     09 FD 01 F1 | 	add	result2, arg01
16fc8     02 FC 65 F0 | 	shl	result2, #2
16fcc     03 00 00 FF 
16fd0     04 E4 85 F1 | 	sub	objptr, ##1540
16fd4     F2 FC 01 F1 | 	add	result2, objptr
16fd8     FE 12 02 FB | 	rdlong	arg01, result2
16fdc     14 4E 05 F1 | 	add	fp, #20
16fe0     A7 12 62 FC | 	wrlong	arg01, fp
16fe4     03 00 00 FF 
16fe8     04 E4 05 F1 | 	add	objptr, ##1540
16fec     F2 12 02 FB | 	rdlong	arg01, objptr
16ff0     09 27 02 F6 | 	mov	local01, arg01
16ff4     01 26 66 F0 | 	shl	local01, #1
16ff8     09 27 02 F1 | 	add	local01, arg01
16ffc     02 26 66 F0 | 	shl	local01, #2
17000     03 00 00 FF 
17004     04 E4 85 F1 | 	sub	objptr, ##1540
17008     F2 26 02 F1 | 	add	local01, objptr
1700c     04 26 06 F1 | 	add	local01, #4
17010     13 27 02 FB | 	rdlong	local01, local01
17014     08 4E 85 F1 | 	sub	fp, #8
17018     A7 26 62 FC | 	wrlong	local01, fp
1701c     0C 4E 85 F1 | 	sub	fp, #12
17020     47 00 00 FF 
17024     9C E4 85 F1 | 	sub	objptr, ##36508
17028     F4 67 BF FD | 	call	#_pop
1702c     FF 26 02 F6 | 	mov	local01, result3
17030     A7 FA 61 FC | 	wrlong	result1, fp
17034     04 4E 05 F1 | 	add	fp, #4
17038     A7 FC 61 FC | 	wrlong	result2, fp
1703c     04 4E 05 F1 | 	add	fp, #4
17040     A7 26 62 FC | 	wrlong	local01, fp
17044     08 4E 85 F1 | 	sub	fp, #8
17048     A7 12 02 F6 | 	mov	arg01, fp
1704c     B4 69 BF FD | 	call	#_converttoint
17050     10 4E 05 F1 | 	add	fp, #16
17054     A7 FA 61 FC | 	wrlong	result1, fp
17058                 | ' 
17058                 | ' numpar=compiledline(lineptr_e).result.uresult
17058                 | ' skip=compiledline(lineptr_e).result.twowords(1)
17058                 | ' t1=pop()
17058                 | ' t=converttoint(t1)
17058                 | ' if t<1 orelse t>numpar then return
17058     10 4E 85 F1 | 	sub	fp, #16
1705c     01 FA 55 F2 | 	cmps	result1, #1 wc
17060     58 00 90 CD |  if_b	jmp	#LR__1870
17064     10 4E 05 F1 | 	add	fp, #16
17068     A7 26 02 FB | 	rdlong	local01, fp
1706c     04 4E 05 F1 | 	add	fp, #4
17070     A7 12 02 FB | 	rdlong	arg01, fp
17074     14 4E 85 F1 | 	sub	fp, #20
17078     09 27 5A F2 | 	cmps	local01, arg01 wcz
1707c     3C 00 90 1D |  if_a	jmp	#LR__1870
17080     10 4E 05 F1 | 	add	fp, #16
17084     A7 26 02 FB | 	rdlong	local01, fp
17088     01 26 86 F1 | 	sub	local01, #1
1708c     04 4E 85 F1 | 	sub	fp, #4
17090     A7 12 02 FB | 	rdlong	arg01, fp
17094     13 13 02 FD | 	qmul	arg01, local01
17098     4A 00 00 FF 
1709c     A0 E4 05 F1 | 	add	objptr, ##38048
170a0     F2 26 02 FB | 	rdlong	local01, objptr
170a4     0C 4E 85 F1 | 	sub	fp, #12
170a8     18 12 62 FD | 	getqx	arg01
170ac     09 27 02 F1 | 	add	local01, arg01
170b0     F2 26 62 FC | 	wrlong	local01, objptr
170b4     4A 00 00 FF 
170b8     A0 E4 85 F1 | 	sub	objptr, ##38048
170bc                 | LR__1870
170bc     A7 F0 03 F6 | 	mov	ptra, fp
170c0     B2 00 A0 FD | 	call	#popregs_
170c4                 | _do_on_ret
170c4     2D 00 64 FD | 	ret
170c8                 | 
170c8                 | ' 
170c8                 | ' '-------------------- open
170c8                 | ' 
170c8                 | ' sub do_open
170c8                 | _do_open
170c8     02 4A 05 F6 | 	mov	COUNT_, #2
170cc     A8 00 A0 FD | 	call	#pushregs_
170d0     20 F0 07 F1 | 	add	ptra, #32
170d4     4A 00 00 FF 
170d8     A0 E4 05 F1 | 	add	objptr, ##38048
170dc     F2 16 02 FB | 	rdlong	arg03, objptr
170e0     0B 15 02 F6 | 	mov	arg02, arg03
170e4     01 14 66 F0 | 	shl	arg02, #1
170e8     0B 15 02 F1 | 	add	arg02, arg03
170ec     02 14 66 F0 | 	shl	arg02, #2
170f0     03 00 00 FF 
170f4     04 E4 85 F1 | 	sub	objptr, ##1540
170f8     F2 14 02 F1 | 	add	arg02, objptr
170fc     0A 17 02 FB | 	rdlong	arg03, arg02
17100     10 4E 05 F1 | 	add	fp, #16
17104     A7 16 62 FC | 	wrlong	arg03, fp
17108     10 4E 85 F1 | 	sub	fp, #16
1710c     47 00 00 FF 
17110     9C E4 85 F1 | 	sub	objptr, ##36508
17114     08 67 BF FD | 	call	#_pop
17118     FF 16 02 F6 | 	mov	arg03, result3
1711c     A7 FA 61 FC | 	wrlong	result1, fp
17120     04 4E 05 F1 | 	add	fp, #4
17124     A7 FC 61 FC | 	wrlong	result2, fp
17128     04 4E 05 F1 | 	add	fp, #4
1712c     A7 16 62 FC | 	wrlong	arg03, fp
17130                 | ' 
17130                 | ' numpar=compiledline(lineptr_e).result.uresult
17130                 | ' 
17130                 | ' t1=pop()
17130                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
17130     08 4E 85 F1 | 	sub	fp, #8
17134     2B 16 0E F2 | 	cmp	arg03, #43 wz
17138     18 00 90 5D |  if_ne	jmp	#LR__1880
1713c     A7 12 02 FB | 	rdlong	arg01, fp
17140     54 68 BF FD | 	call	#_convertstring
17144     A7 FA 61 FC | 	wrlong	result1, fp
17148     08 4E 05 F1 | 	add	fp, #8
1714c     A7 3E 68 FC | 	wrlong	#31, fp
17150     08 4E 85 F1 | 	sub	fp, #8
17154                 | LR__1880
17154                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
17154     08 4E 05 F1 | 	add	fp, #8
17158     A7 16 02 FB | 	rdlong	arg03, fp
1715c     08 4E 85 F1 | 	sub	fp, #8
17160     1F 16 0E F2 | 	cmp	arg03, #31 wz
17164     44 00 90 AD |  if_e	jmp	#LR__1881
17168     00 12 06 F6 | 	mov	arg01, #0
1716c     44 6C B1 FD | 	call	#__system___getiolock_0620
17170     FD 12 02 F6 | 	mov	arg01, result1
17174     98 0F B1 FD | 	call	#__system___lockmem
17178     B5 01 00 FF 
1717c     ED 15 06 F6 | 	mov	arg02, ##@LR__5874
17180     00 12 06 F6 | 	mov	arg01, #0
17184     00 16 06 F6 | 	mov	arg03, #0
17188     7C 1C B1 FD | 	call	#__system___basic_print_string
1718c     00 12 06 F6 | 	mov	arg01, #0
17190     0A 14 06 F6 | 	mov	arg02, #10
17194     00 16 06 F6 | 	mov	arg03, #0
17198     14 1C B1 FD | 	call	#__system___basic_print_char
1719c     00 12 06 F6 | 	mov	arg01, #0
171a0     10 6C B1 FD | 	call	#__system___getiolock_0620
171a4     FD 00 68 FC | 	wrlong	#0, result1
171a8     28 02 90 FD | 	jmp	#LR__1892
171ac                 | LR__1881
171ac     A7 16 02 FB | 	rdlong	arg03, fp
171b0     0C 4E 05 F1 | 	add	fp, #12
171b4     A7 16 62 FC | 	wrlong	arg03, fp
171b8     0C 4E 85 F1 | 	sub	fp, #12
171bc     60 66 BF FD | 	call	#_pop
171c0     FF 16 02 F6 | 	mov	arg03, result3
171c4     A7 FA 61 FC | 	wrlong	result1, fp
171c8     04 4E 05 F1 | 	add	fp, #4
171cc     A7 FC 61 FC | 	wrlong	result2, fp
171d0     04 4E 05 F1 | 	add	fp, #4
171d4     A7 16 62 FC | 	wrlong	arg03, fp
171d8                 | ' filename=t1.result.sresult
171d8                 | ' t1=pop()
171d8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
171d8     08 4E 85 F1 | 	sub	fp, #8
171dc     2B 16 0E F2 | 	cmp	arg03, #43 wz
171e0     18 00 90 5D |  if_ne	jmp	#LR__1882
171e4     A7 12 02 FB | 	rdlong	arg01, fp
171e8     AC 67 BF FD | 	call	#_convertstring
171ec     A7 FA 61 FC | 	wrlong	result1, fp
171f0     08 4E 05 F1 | 	add	fp, #8
171f4     A7 3E 68 FC | 	wrlong	#31, fp
171f8     08 4E 85 F1 | 	sub	fp, #8
171fc                 | LR__1882
171fc     14 4E 05 F1 | 	add	fp, #20
17200     A7 00 68 FC | 	wrlong	#0, fp
17204                 | ' mode=0
17204                 | ' if t1.result_type=result_string then
17204     0C 4E 85 F1 | 	sub	fp, #12
17208     A7 14 02 FB | 	rdlong	arg02, fp
1720c     08 4E 85 F1 | 	sub	fp, #8
17210     1F 14 0E F2 | 	cmp	arg02, #31 wz
17214     64 00 90 5D |  if_ne	jmp	#LR__1883
17218                 | '   if t1.result.sresult="read" then mode=1
17218     A7 12 02 FB | 	rdlong	arg01, fp
1721c     B5 01 00 FF 
17220     FF 15 06 F6 | 	mov	arg02, ##@LR__5875
17224     10 0F B1 FD | 	call	#__system___string_cmp
17228     00 FA 0D F2 | 	cmp	result1, #0 wz
1722c     14 4E 05 A1 |  if_e	add	fp, #20
17230     A7 02 68 AC |  if_e	wrlong	#1, fp
17234     14 4E 85 A1 |  if_e	sub	fp, #20
17238                 | '   if t1.result.sresult="write" then mode=2
17238     A7 12 02 FB | 	rdlong	arg01, fp
1723c     B6 01 00 FF 
17240     04 14 06 F6 | 	mov	arg02, ##@LR__5876
17244     F0 0E B1 FD | 	call	#__system___string_cmp
17248     00 FA 0D F2 | 	cmp	result1, #0 wz
1724c     14 4E 05 A1 |  if_e	add	fp, #20
17250     A7 04 68 AC |  if_e	wrlong	#2, fp
17254     14 4E 85 A1 |  if_e	sub	fp, #20
17258                 | '   if t1.result.sresult="append" then mode=4
17258     A7 12 02 FB | 	rdlong	arg01, fp
1725c     B6 01 00 FF 
17260     0A 14 06 F6 | 	mov	arg02, ##@LR__5877
17264     D0 0E B1 FD | 	call	#__system___string_cmp
17268     00 FA 0D F2 | 	cmp	result1, #0 wz
1726c     14 4E 05 A1 |  if_e	add	fp, #20
17270     A7 08 68 AC |  if_e	wrlong	#4, fp
17274     14 4E 85 A1 |  if_e	sub	fp, #20
17278     14 00 90 FD | 	jmp	#LR__1884
1727c                 | LR__1883
1727c     A7 12 02 F6 | 	mov	arg01, fp
17280     80 67 BF FD | 	call	#_converttoint
17284     14 4E 05 F1 | 	add	fp, #20
17288     A7 FA 61 FC | 	wrlong	result1, fp
1728c     14 4E 85 F1 | 	sub	fp, #20
17290                 | LR__1884
17290     8C 65 BF FD | 	call	#_pop
17294     FF 16 02 F6 | 	mov	arg03, result3
17298     A7 FA 61 FC | 	wrlong	result1, fp
1729c     04 4E 05 F1 | 	add	fp, #4
172a0     A7 FC 61 FC | 	wrlong	result2, fp
172a4     04 4E 05 F1 | 	add	fp, #4
172a8     A7 16 62 FC | 	wrlong	arg03, fp
172ac                 | ' t1=pop()
172ac                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
172ac     08 4E 85 F1 | 	sub	fp, #8
172b0     2C 16 0E F2 | 	cmp	arg03, #44 wz
172b4     44 00 90 AD |  if_e	jmp	#LR__1885
172b8     00 12 06 F6 | 	mov	arg01, #0
172bc     F4 6A B1 FD | 	call	#__system___getiolock_0620
172c0     FD 12 02 F6 | 	mov	arg01, result1
172c4     48 0E B1 FD | 	call	#__system___lockmem
172c8     B6 01 00 FF 
172cc     11 14 06 F6 | 	mov	arg02, ##@LR__5878
172d0     00 12 06 F6 | 	mov	arg01, #0
172d4     00 16 06 F6 | 	mov	arg03, #0
172d8     2C 1B B1 FD | 	call	#__system___basic_print_string
172dc     00 12 06 F6 | 	mov	arg01, #0
172e0     0A 14 06 F6 | 	mov	arg02, #10
172e4     00 16 06 F6 | 	mov	arg03, #0
172e8     C4 1A B1 FD | 	call	#__system___basic_print_char
172ec     00 12 06 F6 | 	mov	arg01, #0
172f0     C0 6A B1 FD | 	call	#__system___getiolock_0620
172f4     FD 00 68 FC | 	wrlong	#0, result1
172f8     D8 00 90 FD | 	jmp	#LR__1892
172fc                 | LR__1885
172fc     A7 26 02 FB | 	rdlong	local01, fp
17300     18 4E 05 F1 | 	add	fp, #24
17304     A7 26 62 FC | 	wrlong	local01, fp
17308                 | ' channel  = t1.result.iresult
17308                 | ' select case  mode
17308     04 4E 85 F1 | 	sub	fp, #4
1730c     A7 28 02 FB | 	rdlong	local02, fp
17310     14 4E 85 F1 | 	sub	fp, #20
17314     01 28 86 F1 | 	sub	local02, #1
17318     04 28 26 F3 | 	fle	local02, #4
1731c     30 28 62 FD | 	jmprel	local02
17320                 | LR__1886
17320     10 00 90 FD | 	jmp	#LR__1887
17324     2C 00 90 FD | 	jmp	#LR__1888
17328     68 00 90 FD | 	jmp	#LR__1890
1732c     44 00 90 FD | 	jmp	#LR__1889
17330     60 00 90 FD | 	jmp	#LR__1890
17334                 | LR__1887
17334     18 4E 05 F1 | 	add	fp, #24
17338     A7 12 02 FB | 	rdlong	arg01, fp
1733c     0C 4E 85 F1 | 	sub	fp, #12
17340     A7 14 02 FB | 	rdlong	arg02, fp
17344     0C 4E 85 F1 | 	sub	fp, #12
17348     00 16 06 F6 | 	mov	arg03, #0
1734c     C4 19 B1 FD | 	call	#__system___basic_open_string
17350     80 00 90 FD | 	jmp	#LR__1891
17354                 | LR__1888
17354     18 4E 05 F1 | 	add	fp, #24
17358     A7 12 02 FB | 	rdlong	arg01, fp
1735c     0C 4E 85 F1 | 	sub	fp, #12
17360     A7 14 02 FB | 	rdlong	arg02, fp
17364     0C 4E 85 F1 | 	sub	fp, #12
17368     0D 16 06 F6 | 	mov	arg03, #13
1736c     A4 19 B1 FD | 	call	#__system___basic_open_string
17370     60 00 90 FD | 	jmp	#LR__1891
17374                 | LR__1889
17374     18 4E 05 F1 | 	add	fp, #24
17378     A7 12 02 FB | 	rdlong	arg01, fp
1737c     0C 4E 85 F1 | 	sub	fp, #12
17380     A7 14 02 FB | 	rdlong	arg02, fp
17384     0C 4E 85 F1 | 	sub	fp, #12
17388     25 16 06 F6 | 	mov	arg03, #37
1738c     84 19 B1 FD | 	call	#__system___basic_open_string
17390     40 00 90 FD | 	jmp	#LR__1891
17394                 | LR__1890
17394     00 12 06 F6 | 	mov	arg01, #0
17398     18 6A B1 FD | 	call	#__system___getiolock_0620
1739c     FD 12 02 F6 | 	mov	arg01, result1
173a0     6C 0D B1 FD | 	call	#__system___lockmem
173a4     B6 01 00 FF 
173a8     23 14 06 F6 | 	mov	arg02, ##@LR__5879
173ac     00 12 06 F6 | 	mov	arg01, #0
173b0     00 16 06 F6 | 	mov	arg03, #0
173b4     50 1A B1 FD | 	call	#__system___basic_print_string
173b8     00 12 06 F6 | 	mov	arg01, #0
173bc     0A 14 06 F6 | 	mov	arg02, #10
173c0     00 16 06 F6 | 	mov	arg03, #0
173c4     E8 19 B1 FD | 	call	#__system___basic_print_char
173c8     00 12 06 F6 | 	mov	arg01, #0
173cc     E4 69 B1 FD | 	call	#__system___getiolock_0620
173d0     FD 00 68 FC | 	wrlong	#0, result1
173d4                 | LR__1891
173d4                 | LR__1892
173d4     A7 F0 03 F6 | 	mov	ptra, fp
173d8     B2 00 A0 FD | 	call	#popregs_
173dc                 | _do_open_ret
173dc     2D 00 64 FD | 	ret
173e0                 | 
173e0                 | ' 
173e0                 | ' ' ------------------ padrx
173e0                 | ' 
173e0                 | ' sub do_padrx
173e0                 | _do_padrx
173e0     02 4A 05 F6 | 	mov	COUNT_, #2
173e4     A8 00 A0 FD | 	call	#pushregs_
173e8     14 F0 07 F1 | 	add	ptra, #20
173ec     4A 00 00 FF 
173f0     A0 E4 05 F1 | 	add	objptr, ##38048
173f4     F2 26 02 FB | 	rdlong	local01, objptr
173f8     13 17 02 F6 | 	mov	arg03, local01
173fc     01 16 66 F0 | 	shl	arg03, #1
17400     13 17 02 F1 | 	add	arg03, local01
17404     02 16 66 F0 | 	shl	arg03, #2
17408     03 00 00 FF 
1740c     04 E4 85 F1 | 	sub	objptr, ##1540
17410     F2 16 02 F1 | 	add	arg03, objptr
17414     0B 17 02 FB | 	rdlong	arg03, arg03
17418     0C 4E 05 F1 | 	add	fp, #12
1741c     A7 16 62 FC | 	wrlong	arg03, fp
17420                 | ' 
17420                 | ' numpar=compiledline(lineptr_e).result.uresult
17420                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
17420     0C 4E 85 F1 | 	sub	fp, #12
17424     02 16 16 F2 | 	cmp	arg03, #2 wc
17428     47 00 00 FF 
1742c     9C E4 85 F1 | 	sub	objptr, ##36508
17430     40 00 90 CD |  if_b	jmp	#LR__1900
17434     00 12 06 F6 | 	mov	arg01, #0
17438     78 69 B1 FD | 	call	#__system___getiolock_0620
1743c     FD 12 02 F6 | 	mov	arg01, result1
17440     CC 0C B1 FD | 	call	#__system___lockmem
17444     B6 01 00 FF 
17448     36 14 06 F6 | 	mov	arg02, ##@LR__5880
1744c     00 12 06 F6 | 	mov	arg01, #0
17450     00 16 06 F6 | 	mov	arg03, #0
17454     B0 19 B1 FD | 	call	#__system___basic_print_string
17458     00 12 06 F6 | 	mov	arg01, #0
1745c     54 69 B1 FD | 	call	#__system___getiolock_0620
17460     FD 00 68 FC | 	wrlong	#0, result1
17464     27 12 06 F6 | 	mov	arg01, #39
17468     00 14 06 F6 | 	mov	arg02, #0
1746c     4C D2 B0 FD | 	call	#_printerror
17470     E0 01 90 FD | 	jmp	#LR__1904
17474                 | LR__1900
17474                 | ' if numpar=0 then 
17474     0C 4E 05 F1 | 	add	fp, #12
17478     A7 FE 09 FB | 	rdlong	result3, fp wz
1747c     0C 4E 85 F1 | 	sub	fp, #12
17480     A8 00 90 5D |  if_ne	jmp	#LR__1901
17484     00 C0 1B FF 
17488     00 26 06 F6 | 	mov	local01, ##931135488
1748c     51 00 00 FF 
17490     E8 E5 05 F1 | 	add	objptr, ##41960
17494     F2 12 02 FB | 	rdlong	arg01, objptr
17498     51 00 00 FF 
1749c     E8 E5 85 F1 | 	sub	objptr, ##41960
174a0     09 13 52 F6 | 	abs	arg01, arg01 wc
174a4     1F 28 C6 C9 |  if_b	decod	local02, #31
174a8     00 28 06 36 |  if_ae	mov	local02, #0
174ac     D8 36 B1 FD | 	call	#__system___float_fromuns
174b0     14 FB 61 F5 | 	xor	result1, local02
174b4     FD 12 02 F6 | 	mov	arg01, result1
174b8     FF 7F 23 FF 
174bc     00 14 06 F6 | 	mov	arg02, ##1191181824
174c0     CC 3C B1 FD | 	call	#__system___float_div
174c4     FD 14 02 F6 | 	mov	arg02, result1
174c8     13 13 02 F6 | 	mov	arg01, local01
174cc     EC 36 B1 FD | 	call	#__system___float_add
174d0     10 4E 05 F1 | 	add	fp, #16
174d4     A7 FA 61 FC | 	wrlong	result1, fp
174d8                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
174d8     10 4E 85 F1 | 	sub	fp, #16
174dc     1F FA 05 F4 | 	bitl	result1, #31
174e0     FD 12 02 F6 | 	mov	arg01, result1
174e4     89 41 1D FF 
174e8     6F 14 06 F6 | 	mov	arg02, ##981668463
174ec     01 16 06 F6 | 	mov	arg03, #1
174f0     CC 3E B1 FD | 	call	#__system___float_cmp
174f4     00 FA 55 F2 | 	cmps	result1, #0 wc
174f8     10 4E 05 C1 |  if_b	add	fp, #16
174fc     A7 00 68 CC |  if_b	wrlong	#0, fp
17500     10 4E 85 C1 |  if_b	sub	fp, #16
17504     10 4E 05 F1 | 	add	fp, #16
17508     A7 26 02 FB | 	rdlong	local01, fp
1750c     10 4E 85 F1 | 	sub	fp, #16
17510     A7 26 62 FC | 	wrlong	local01, fp
17514     08 4E 05 F1 | 	add	fp, #8
17518     A7 3C 68 FC | 	wrlong	#30, fp
1751c     08 4E 85 F1 | 	sub	fp, #8
17520     A7 12 02 F6 | 	mov	arg01, fp
17524     90 63 BF FD | 	call	#_push
17528                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17528     28 01 90 FD | 	jmp	#LR__1904
1752c                 | LR__1901
1752c     F0 62 BF FD | 	call	#_pop
17530     A7 FA 61 FC | 	wrlong	result1, fp
17534     04 4E 05 F1 | 	add	fp, #4
17538     A7 FC 61 FC | 	wrlong	result2, fp
1753c     04 4E 05 F1 | 	add	fp, #4
17540     A7 FE 61 FC | 	wrlong	result3, fp
17544                 | ' t1=pop()
17544                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17544     08 4E 85 F1 | 	sub	fp, #8
17548     1C FE 0D F2 | 	cmp	result3, #28 wz
1754c     08 4E 05 51 |  if_ne	add	fp, #8
17550     A7 26 02 5B |  if_ne	rdlong	local01, fp
17554     08 4E 85 51 |  if_ne	sub	fp, #8
17558     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1755c     E8 00 90 5D |  if_ne	jmp	#LR__1903
17560     A7 26 02 FB | 	rdlong	local01, fp
17564     52 00 00 FF 
17568     60 E5 05 F1 | 	add	objptr, ##42336
1756c     F2 26 62 FC | 	wrlong	local01, objptr
17570                 | '   q=t1.result.uresult
17570                 | '   if q<7 then 
17570     52 00 00 FF 
17574     60 E5 85 F1 | 	sub	objptr, ##42336
17578     07 26 56 F2 | 	cmps	local01, #7 wc
1757c     B8 00 90 3D |  if_ae	jmp	#LR__1902
17580     00 C0 1B FF 
17584     00 26 06 F6 | 	mov	local01, ##931135488
17588     52 00 00 FF 
1758c     60 E5 05 F1 | 	add	objptr, ##42336
17590     F2 16 02 FB | 	rdlong	arg03, objptr
17594     02 16 66 F0 | 	shl	arg03, #2
17598     78 E5 85 F1 | 	sub	objptr, #376
1759c     F2 16 02 F1 | 	add	arg03, objptr
175a0     0B 13 02 FB | 	rdlong	arg01, arg03
175a4     51 00 00 FF 
175a8     E8 E5 85 F1 | 	sub	objptr, ##41960
175ac     09 13 52 F6 | 	abs	arg01, arg01 wc
175b0     1F 28 C6 C9 |  if_b	decod	local02, #31
175b4     00 28 06 36 |  if_ae	mov	local02, #0
175b8     CC 35 B1 FD | 	call	#__system___float_fromuns
175bc     14 FB 61 F5 | 	xor	result1, local02
175c0     FD 12 02 F6 | 	mov	arg01, result1
175c4     FF 7F 23 FF 
175c8     00 14 06 F6 | 	mov	arg02, ##1191181824
175cc     C0 3B B1 FD | 	call	#__system___float_div
175d0     FD 14 02 F6 | 	mov	arg02, result1
175d4     13 13 02 F6 | 	mov	arg01, local01
175d8     E0 35 B1 FD | 	call	#__system___float_add
175dc     10 4E 05 F1 | 	add	fp, #16
175e0     A7 FA 61 FC | 	wrlong	result1, fp
175e4                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
175e4     10 4E 85 F1 | 	sub	fp, #16
175e8     1F FA 05 F4 | 	bitl	result1, #31
175ec     FD 12 02 F6 | 	mov	arg01, result1
175f0     89 41 1D FF 
175f4     6F 14 06 F6 | 	mov	arg02, ##981668463
175f8     01 16 06 F6 | 	mov	arg03, #1
175fc     C0 3D B1 FD | 	call	#__system___float_cmp
17600     00 FA 55 F2 | 	cmps	result1, #0 wc
17604     10 4E 05 C1 |  if_b	add	fp, #16
17608     A7 00 68 CC |  if_b	wrlong	#0, fp
1760c     10 4E 85 C1 |  if_b	sub	fp, #16
17610     10 4E 05 F1 | 	add	fp, #16
17614     A7 26 02 FB | 	rdlong	local01, fp
17618     10 4E 85 F1 | 	sub	fp, #16
1761c     A7 26 62 FC | 	wrlong	local01, fp
17620     08 4E 05 F1 | 	add	fp, #8
17624     A7 3C 68 FC | 	wrlong	#30, fp
17628     08 4E 85 F1 | 	sub	fp, #8
1762c     A7 12 02 F6 | 	mov	arg01, fp
17630     84 62 BF FD | 	call	#_push
17634                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17634     1C 00 90 FD | 	jmp	#LR__1904
17638                 | LR__1902
17638     29 12 06 F6 | 	mov	arg01, #41
1763c     00 14 06 F6 | 	mov	arg02, #0
17640     78 D0 B0 FD | 	call	#_printerror
17644                 | '      printerror(41) : return
17644     0C 00 90 FD | 	jmp	#LR__1904
17648                 | LR__1903
17648     29 12 06 F6 | 	mov	arg01, #41
1764c     00 14 06 F6 | 	mov	arg02, #0
17650     68 D0 B0 FD | 	call	#_printerror
17654                 | LR__1904
17654     A7 F0 03 F6 | 	mov	ptra, fp
17658     B2 00 A0 FD | 	call	#popregs_
1765c                 | _do_padrx_ret
1765c     2D 00 64 FD | 	ret
17660                 | 
17660                 | ' 
17660                 | ' ' ------------------ padry
17660                 | ' 
17660                 | ' sub do_padry
17660                 | _do_padry
17660     02 4A 05 F6 | 	mov	COUNT_, #2
17664     A8 00 A0 FD | 	call	#pushregs_
17668     14 F0 07 F1 | 	add	ptra, #20
1766c     4A 00 00 FF 
17670     A0 E4 05 F1 | 	add	objptr, ##38048
17674     F2 26 02 FB | 	rdlong	local01, objptr
17678     13 17 02 F6 | 	mov	arg03, local01
1767c     01 16 66 F0 | 	shl	arg03, #1
17680     13 17 02 F1 | 	add	arg03, local01
17684     02 16 66 F0 | 	shl	arg03, #2
17688     03 00 00 FF 
1768c     04 E4 85 F1 | 	sub	objptr, ##1540
17690     F2 16 02 F1 | 	add	arg03, objptr
17694     0B 17 02 FB | 	rdlong	arg03, arg03
17698     0C 4E 05 F1 | 	add	fp, #12
1769c     A7 16 62 FC | 	wrlong	arg03, fp
176a0                 | ' 
176a0                 | ' numpar=compiledline(lineptr_e).result.uresult
176a0                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
176a0     0C 4E 85 F1 | 	sub	fp, #12
176a4     02 16 16 F2 | 	cmp	arg03, #2 wc
176a8     47 00 00 FF 
176ac     9C E4 85 F1 | 	sub	objptr, ##36508
176b0     40 00 90 CD |  if_b	jmp	#LR__1910
176b4     00 12 06 F6 | 	mov	arg01, #0
176b8     F8 66 B1 FD | 	call	#__system___getiolock_0620
176bc     FD 12 02 F6 | 	mov	arg01, result1
176c0     4C 0A B1 FD | 	call	#__system___lockmem
176c4     B6 01 00 FF 
176c8     3E 14 06 F6 | 	mov	arg02, ##@LR__5881
176cc     00 12 06 F6 | 	mov	arg01, #0
176d0     00 16 06 F6 | 	mov	arg03, #0
176d4     30 17 B1 FD | 	call	#__system___basic_print_string
176d8     00 12 06 F6 | 	mov	arg01, #0
176dc     D4 66 B1 FD | 	call	#__system___getiolock_0620
176e0     FD 00 68 FC | 	wrlong	#0, result1
176e4     27 12 06 F6 | 	mov	arg01, #39
176e8     00 14 06 F6 | 	mov	arg02, #0
176ec     CC CF B0 FD | 	call	#_printerror
176f0     E0 01 90 FD | 	jmp	#LR__1914
176f4                 | LR__1910
176f4                 | ' if numpar=0 then 
176f4     0C 4E 05 F1 | 	add	fp, #12
176f8     A7 FE 09 FB | 	rdlong	result3, fp wz
176fc     0C 4E 85 F1 | 	sub	fp, #12
17700     A8 00 90 5D |  if_ne	jmp	#LR__1911
17704     00 C0 1B FF 
17708     00 26 06 F6 | 	mov	local01, ##931135488
1770c     52 00 00 FF 
17710     04 E4 05 F1 | 	add	objptr, ##41988
17714     F2 12 02 FB | 	rdlong	arg01, objptr
17718     52 00 00 FF 
1771c     04 E4 85 F1 | 	sub	objptr, ##41988
17720     09 13 52 F6 | 	abs	arg01, arg01 wc
17724     1F 28 C6 C9 |  if_b	decod	local02, #31
17728     00 28 06 36 |  if_ae	mov	local02, #0
1772c     58 34 B1 FD | 	call	#__system___float_fromuns
17730     14 FB 61 F5 | 	xor	result1, local02
17734     FD 12 02 F6 | 	mov	arg01, result1
17738     FF 7F 23 FF 
1773c     00 14 06 F6 | 	mov	arg02, ##1191181824
17740     4C 3A B1 FD | 	call	#__system___float_div
17744     FD 14 02 F6 | 	mov	arg02, result1
17748     13 13 02 F6 | 	mov	arg01, local01
1774c     6C 34 B1 FD | 	call	#__system___float_add
17750     10 4E 05 F1 | 	add	fp, #16
17754     A7 FA 61 FC | 	wrlong	result1, fp
17758                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17758     10 4E 85 F1 | 	sub	fp, #16
1775c     1F FA 05 F4 | 	bitl	result1, #31
17760     FD 12 02 F6 | 	mov	arg01, result1
17764     89 41 1D FF 
17768     6F 14 06 F6 | 	mov	arg02, ##981668463
1776c     01 16 06 F6 | 	mov	arg03, #1
17770     4C 3C B1 FD | 	call	#__system___float_cmp
17774     00 FA 55 F2 | 	cmps	result1, #0 wc
17778     10 4E 05 C1 |  if_b	add	fp, #16
1777c     A7 00 68 CC |  if_b	wrlong	#0, fp
17780     10 4E 85 C1 |  if_b	sub	fp, #16
17784     10 4E 05 F1 | 	add	fp, #16
17788     A7 26 02 FB | 	rdlong	local01, fp
1778c     10 4E 85 F1 | 	sub	fp, #16
17790     A7 26 62 FC | 	wrlong	local01, fp
17794     08 4E 05 F1 | 	add	fp, #8
17798     A7 3C 68 FC | 	wrlong	#30, fp
1779c     08 4E 85 F1 | 	sub	fp, #8
177a0     A7 12 02 F6 | 	mov	arg01, fp
177a4     10 61 BF FD | 	call	#_push
177a8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
177a8     28 01 90 FD | 	jmp	#LR__1914
177ac                 | LR__1911
177ac     70 60 BF FD | 	call	#_pop
177b0     A7 FA 61 FC | 	wrlong	result1, fp
177b4     04 4E 05 F1 | 	add	fp, #4
177b8     A7 FC 61 FC | 	wrlong	result2, fp
177bc     04 4E 05 F1 | 	add	fp, #4
177c0     A7 FE 61 FC | 	wrlong	result3, fp
177c4                 | ' t1=pop()
177c4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
177c4     08 4E 85 F1 | 	sub	fp, #8
177c8     1C FE 0D F2 | 	cmp	result3, #28 wz
177cc     08 4E 05 51 |  if_ne	add	fp, #8
177d0     A7 26 02 5B |  if_ne	rdlong	local01, fp
177d4     08 4E 85 51 |  if_ne	sub	fp, #8
177d8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
177dc     E8 00 90 5D |  if_ne	jmp	#LR__1913
177e0     A7 26 02 FB | 	rdlong	local01, fp
177e4     52 00 00 FF 
177e8     60 E5 05 F1 | 	add	objptr, ##42336
177ec     F2 26 62 FC | 	wrlong	local01, objptr
177f0                 | '   q=t1.result.uresult
177f0                 | '   if q<7 then 
177f0     52 00 00 FF 
177f4     60 E5 85 F1 | 	sub	objptr, ##42336
177f8     07 26 56 F2 | 	cmps	local01, #7 wc
177fc     B8 00 90 3D |  if_ae	jmp	#LR__1912
17800     00 C0 1B FF 
17804     00 26 06 F6 | 	mov	local01, ##931135488
17808     52 00 00 FF 
1780c     60 E5 05 F1 | 	add	objptr, ##42336
17810     F2 16 02 FB | 	rdlong	arg03, objptr
17814     02 16 66 F0 | 	shl	arg03, #2
17818     5C E5 85 F1 | 	sub	objptr, #348
1781c     F2 16 02 F1 | 	add	arg03, objptr
17820     0B 13 02 FB | 	rdlong	arg01, arg03
17824     52 00 00 FF 
17828     04 E4 85 F1 | 	sub	objptr, ##41988
1782c     09 13 52 F6 | 	abs	arg01, arg01 wc
17830     1F 28 C6 C9 |  if_b	decod	local02, #31
17834     00 28 06 36 |  if_ae	mov	local02, #0
17838     4C 33 B1 FD | 	call	#__system___float_fromuns
1783c     14 FB 61 F5 | 	xor	result1, local02
17840     FD 12 02 F6 | 	mov	arg01, result1
17844     FF 7F 23 FF 
17848     00 14 06 F6 | 	mov	arg02, ##1191181824
1784c     40 39 B1 FD | 	call	#__system___float_div
17850     FD 14 02 F6 | 	mov	arg02, result1
17854     13 13 02 F6 | 	mov	arg01, local01
17858     60 33 B1 FD | 	call	#__system___float_add
1785c     10 4E 05 F1 | 	add	fp, #16
17860     A7 FA 61 FC | 	wrlong	result1, fp
17864                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17864     10 4E 85 F1 | 	sub	fp, #16
17868     1F FA 05 F4 | 	bitl	result1, #31
1786c     FD 12 02 F6 | 	mov	arg01, result1
17870     89 41 1D FF 
17874     6F 14 06 F6 | 	mov	arg02, ##981668463
17878     01 16 06 F6 | 	mov	arg03, #1
1787c     40 3B B1 FD | 	call	#__system___float_cmp
17880     00 FA 55 F2 | 	cmps	result1, #0 wc
17884     10 4E 05 C1 |  if_b	add	fp, #16
17888     A7 00 68 CC |  if_b	wrlong	#0, fp
1788c     10 4E 85 C1 |  if_b	sub	fp, #16
17890     10 4E 05 F1 | 	add	fp, #16
17894     A7 26 02 FB | 	rdlong	local01, fp
17898     10 4E 85 F1 | 	sub	fp, #16
1789c     A7 26 62 FC | 	wrlong	local01, fp
178a0     08 4E 05 F1 | 	add	fp, #8
178a4     A7 3C 68 FC | 	wrlong	#30, fp
178a8     08 4E 85 F1 | 	sub	fp, #8
178ac     A7 12 02 F6 | 	mov	arg01, fp
178b0     04 60 BF FD | 	call	#_push
178b4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
178b4     1C 00 90 FD | 	jmp	#LR__1914
178b8                 | LR__1912
178b8     29 12 06 F6 | 	mov	arg01, #41
178bc     00 14 06 F6 | 	mov	arg02, #0
178c0     F8 CD B0 FD | 	call	#_printerror
178c4                 | '      printerror(41) : return
178c4     0C 00 90 FD | 	jmp	#LR__1914
178c8                 | LR__1913
178c8     29 12 06 F6 | 	mov	arg01, #41
178cc     00 14 06 F6 | 	mov	arg02, #0
178d0     E8 CD B0 FD | 	call	#_printerror
178d4                 | LR__1914
178d4     A7 F0 03 F6 | 	mov	ptra, fp
178d8     B2 00 A0 FD | 	call	#popregs_
178dc                 | _do_padry_ret
178dc     2D 00 64 FD | 	ret
178e0                 | 
178e0                 | ' 
178e0                 | ' ' ------------------ padrz
178e0                 | ' 
178e0                 | ' sub do_padrz
178e0                 | _do_padrz
178e0     02 4A 05 F6 | 	mov	COUNT_, #2
178e4     A8 00 A0 FD | 	call	#pushregs_
178e8     14 F0 07 F1 | 	add	ptra, #20
178ec     4A 00 00 FF 
178f0     A0 E4 05 F1 | 	add	objptr, ##38048
178f4     F2 26 02 FB | 	rdlong	local01, objptr
178f8     13 17 02 F6 | 	mov	arg03, local01
178fc     01 16 66 F0 | 	shl	arg03, #1
17900     13 17 02 F1 | 	add	arg03, local01
17904     02 16 66 F0 | 	shl	arg03, #2
17908     03 00 00 FF 
1790c     04 E4 85 F1 | 	sub	objptr, ##1540
17910     F2 16 02 F1 | 	add	arg03, objptr
17914     0B 17 02 FB | 	rdlong	arg03, arg03
17918     0C 4E 05 F1 | 	add	fp, #12
1791c     A7 16 62 FC | 	wrlong	arg03, fp
17920                 | ' 
17920                 | ' numpar=compiledline(lineptr_e).result.uresult
17920                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
17920     0C 4E 85 F1 | 	sub	fp, #12
17924     02 16 16 F2 | 	cmp	arg03, #2 wc
17928     47 00 00 FF 
1792c     9C E4 85 F1 | 	sub	objptr, ##36508
17930     40 00 90 CD |  if_b	jmp	#LR__1920
17934     00 12 06 F6 | 	mov	arg01, #0
17938     78 64 B1 FD | 	call	#__system___getiolock_0620
1793c     FD 12 02 F6 | 	mov	arg01, result1
17940     CC 07 B1 FD | 	call	#__system___lockmem
17944     B6 01 00 FF 
17948     46 14 06 F6 | 	mov	arg02, ##@LR__5882
1794c     00 12 06 F6 | 	mov	arg01, #0
17950     00 16 06 F6 | 	mov	arg03, #0
17954     B0 14 B1 FD | 	call	#__system___basic_print_string
17958     00 12 06 F6 | 	mov	arg01, #0
1795c     54 64 B1 FD | 	call	#__system___getiolock_0620
17960     FD 00 68 FC | 	wrlong	#0, result1
17964     27 12 06 F6 | 	mov	arg01, #39
17968     00 14 06 F6 | 	mov	arg02, #0
1796c     4C CD B0 FD | 	call	#_printerror
17970     E0 01 90 FD | 	jmp	#LR__1924
17974                 | LR__1920
17974                 | ' if numpar=0 then 
17974     0C 4E 05 F1 | 	add	fp, #12
17978     A7 FE 09 FB | 	rdlong	result3, fp wz
1797c     0C 4E 85 F1 | 	sub	fp, #12
17980     A8 00 90 5D |  if_ne	jmp	#LR__1921
17984     00 C0 1B FF 
17988     00 26 06 F6 | 	mov	local01, ##931135488
1798c     52 00 00 FF 
17990     20 E4 05 F1 | 	add	objptr, ##42016
17994     F2 12 02 FB | 	rdlong	arg01, objptr
17998     52 00 00 FF 
1799c     20 E4 85 F1 | 	sub	objptr, ##42016
179a0     09 13 52 F6 | 	abs	arg01, arg01 wc
179a4     1F 28 C6 C9 |  if_b	decod	local02, #31
179a8     00 28 06 36 |  if_ae	mov	local02, #0
179ac     D8 31 B1 FD | 	call	#__system___float_fromuns
179b0     14 FB 61 F5 | 	xor	result1, local02
179b4     FD 12 02 F6 | 	mov	arg01, result1
179b8     FF 7F 23 FF 
179bc     00 14 06 F6 | 	mov	arg02, ##1191181824
179c0     CC 37 B1 FD | 	call	#__system___float_div
179c4     FD 14 02 F6 | 	mov	arg02, result1
179c8     13 13 02 F6 | 	mov	arg01, local01
179cc     EC 31 B1 FD | 	call	#__system___float_add
179d0     10 4E 05 F1 | 	add	fp, #16
179d4     A7 FA 61 FC | 	wrlong	result1, fp
179d8                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
179d8     10 4E 85 F1 | 	sub	fp, #16
179dc     1F FA 05 F4 | 	bitl	result1, #31
179e0     FD 12 02 F6 | 	mov	arg01, result1
179e4     89 41 1D FF 
179e8     6F 14 06 F6 | 	mov	arg02, ##981668463
179ec     01 16 06 F6 | 	mov	arg03, #1
179f0     CC 39 B1 FD | 	call	#__system___float_cmp
179f4     00 FA 55 F2 | 	cmps	result1, #0 wc
179f8     10 4E 05 C1 |  if_b	add	fp, #16
179fc     A7 00 68 CC |  if_b	wrlong	#0, fp
17a00     10 4E 85 C1 |  if_b	sub	fp, #16
17a04     10 4E 05 F1 | 	add	fp, #16
17a08     A7 26 02 FB | 	rdlong	local01, fp
17a0c     10 4E 85 F1 | 	sub	fp, #16
17a10     A7 26 62 FC | 	wrlong	local01, fp
17a14     08 4E 05 F1 | 	add	fp, #8
17a18     A7 3C 68 FC | 	wrlong	#30, fp
17a1c     08 4E 85 F1 | 	sub	fp, #8
17a20     A7 12 02 F6 | 	mov	arg01, fp
17a24     90 5E BF FD | 	call	#_push
17a28                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17a28     28 01 90 FD | 	jmp	#LR__1924
17a2c                 | LR__1921
17a2c     F0 5D BF FD | 	call	#_pop
17a30     A7 FA 61 FC | 	wrlong	result1, fp
17a34     04 4E 05 F1 | 	add	fp, #4
17a38     A7 FC 61 FC | 	wrlong	result2, fp
17a3c     04 4E 05 F1 | 	add	fp, #4
17a40     A7 FE 61 FC | 	wrlong	result3, fp
17a44                 | ' t1=pop()
17a44                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17a44     08 4E 85 F1 | 	sub	fp, #8
17a48     1C FE 0D F2 | 	cmp	result3, #28 wz
17a4c     08 4E 05 51 |  if_ne	add	fp, #8
17a50     A7 26 02 5B |  if_ne	rdlong	local01, fp
17a54     08 4E 85 51 |  if_ne	sub	fp, #8
17a58     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17a5c     E8 00 90 5D |  if_ne	jmp	#LR__1923
17a60     A7 26 02 FB | 	rdlong	local01, fp
17a64     52 00 00 FF 
17a68     60 E5 05 F1 | 	add	objptr, ##42336
17a6c     F2 26 62 FC | 	wrlong	local01, objptr
17a70                 | '   q=t1.result.uresult
17a70                 | '   if q<7 then 
17a70     52 00 00 FF 
17a74     60 E5 85 F1 | 	sub	objptr, ##42336
17a78     07 26 56 F2 | 	cmps	local01, #7 wc
17a7c     B8 00 90 3D |  if_ae	jmp	#LR__1922
17a80     00 C0 1B FF 
17a84     00 26 06 F6 | 	mov	local01, ##931135488
17a88     52 00 00 FF 
17a8c     60 E5 05 F1 | 	add	objptr, ##42336
17a90     F2 16 02 FB | 	rdlong	arg03, objptr
17a94     02 16 66 F0 | 	shl	arg03, #2
17a98     40 E5 85 F1 | 	sub	objptr, #320
17a9c     F2 16 02 F1 | 	add	arg03, objptr
17aa0     0B 13 02 FB | 	rdlong	arg01, arg03
17aa4     52 00 00 FF 
17aa8     20 E4 85 F1 | 	sub	objptr, ##42016
17aac     09 13 52 F6 | 	abs	arg01, arg01 wc
17ab0     1F 28 C6 C9 |  if_b	decod	local02, #31
17ab4     00 28 06 36 |  if_ae	mov	local02, #0
17ab8     CC 30 B1 FD | 	call	#__system___float_fromuns
17abc     14 FB 61 F5 | 	xor	result1, local02
17ac0     FD 12 02 F6 | 	mov	arg01, result1
17ac4     FF 7F 23 FF 
17ac8     00 14 06 F6 | 	mov	arg02, ##1191181824
17acc     C0 36 B1 FD | 	call	#__system___float_div
17ad0     FD 14 02 F6 | 	mov	arg02, result1
17ad4     13 13 02 F6 | 	mov	arg01, local01
17ad8     E0 30 B1 FD | 	call	#__system___float_add
17adc     10 4E 05 F1 | 	add	fp, #16
17ae0     A7 FA 61 FC | 	wrlong	result1, fp
17ae4                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17ae4     10 4E 85 F1 | 	sub	fp, #16
17ae8     1F FA 05 F4 | 	bitl	result1, #31
17aec     FD 12 02 F6 | 	mov	arg01, result1
17af0     89 41 1D FF 
17af4     6F 14 06 F6 | 	mov	arg02, ##981668463
17af8     01 16 06 F6 | 	mov	arg03, #1
17afc     C0 38 B1 FD | 	call	#__system___float_cmp
17b00     00 FA 55 F2 | 	cmps	result1, #0 wc
17b04     10 4E 05 C1 |  if_b	add	fp, #16
17b08     A7 00 68 CC |  if_b	wrlong	#0, fp
17b0c     10 4E 85 C1 |  if_b	sub	fp, #16
17b10     10 4E 05 F1 | 	add	fp, #16
17b14     A7 26 02 FB | 	rdlong	local01, fp
17b18     10 4E 85 F1 | 	sub	fp, #16
17b1c     A7 26 62 FC | 	wrlong	local01, fp
17b20     08 4E 05 F1 | 	add	fp, #8
17b24     A7 3C 68 FC | 	wrlong	#30, fp
17b28     08 4E 85 F1 | 	sub	fp, #8
17b2c     A7 12 02 F6 | 	mov	arg01, fp
17b30     84 5D BF FD | 	call	#_push
17b34                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17b34     1C 00 90 FD | 	jmp	#LR__1924
17b38                 | LR__1922
17b38     29 12 06 F6 | 	mov	arg01, #41
17b3c     00 14 06 F6 | 	mov	arg02, #0
17b40     78 CB B0 FD | 	call	#_printerror
17b44                 | '      printerror(41) : return
17b44     0C 00 90 FD | 	jmp	#LR__1924
17b48                 | LR__1923
17b48     29 12 06 F6 | 	mov	arg01, #41
17b4c     00 14 06 F6 | 	mov	arg02, #0
17b50     68 CB B0 FD | 	call	#_printerror
17b54                 | LR__1924
17b54     A7 F0 03 F6 | 	mov	ptra, fp
17b58     B2 00 A0 FD | 	call	#popregs_
17b5c                 | _do_padrz_ret
17b5c     2D 00 64 FD | 	ret
17b60                 | 
17b60                 | ' 
17b60                 | ' ' ------------------ pads
17b60                 | ' 
17b60                 | ' sub do_pads
17b60                 | _do_pads
17b60     02 4A 05 F6 | 	mov	COUNT_, #2
17b64     A8 00 A0 FD | 	call	#pushregs_
17b68     14 F0 07 F1 | 	add	ptra, #20
17b6c     4A 00 00 FF 
17b70     A0 E4 05 F1 | 	add	objptr, ##38048
17b74     F2 26 02 FB | 	rdlong	local01, objptr
17b78     13 17 02 F6 | 	mov	arg03, local01
17b7c     01 16 66 F0 | 	shl	arg03, #1
17b80     13 17 02 F1 | 	add	arg03, local01
17b84     02 16 66 F0 | 	shl	arg03, #2
17b88     03 00 00 FF 
17b8c     04 E4 85 F1 | 	sub	objptr, ##1540
17b90     F2 16 02 F1 | 	add	arg03, objptr
17b94     0B 17 02 FB | 	rdlong	arg03, arg03
17b98     0C 4E 05 F1 | 	add	fp, #12
17b9c     A7 16 62 FC | 	wrlong	arg03, fp
17ba0                 | ' 
17ba0                 | ' numpar=compiledline(lineptr_e).result.uresult
17ba0                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
17ba0     0C 4E 85 F1 | 	sub	fp, #12
17ba4     02 16 16 F2 | 	cmp	arg03, #2 wc
17ba8     47 00 00 FF 
17bac     9C E4 85 F1 | 	sub	objptr, ##36508
17bb0     40 00 90 CD |  if_b	jmp	#LR__1930
17bb4     00 12 06 F6 | 	mov	arg01, #0
17bb8     F8 61 B1 FD | 	call	#__system___getiolock_0620
17bbc     FD 12 02 F6 | 	mov	arg01, result1
17bc0     4C 05 B1 FD | 	call	#__system___lockmem
17bc4     B6 01 00 FF 
17bc8     4E 14 06 F6 | 	mov	arg02, ##@LR__5883
17bcc     00 12 06 F6 | 	mov	arg01, #0
17bd0     00 16 06 F6 | 	mov	arg03, #0
17bd4     30 12 B1 FD | 	call	#__system___basic_print_string
17bd8     00 12 06 F6 | 	mov	arg01, #0
17bdc     D4 61 B1 FD | 	call	#__system___getiolock_0620
17be0     FD 00 68 FC | 	wrlong	#0, result1
17be4     27 12 06 F6 | 	mov	arg01, #39
17be8     00 14 06 F6 | 	mov	arg02, #0
17bec     CC CA B0 FD | 	call	#_printerror
17bf0     E0 01 90 FD | 	jmp	#LR__1934
17bf4                 | LR__1930
17bf4                 | ' if numpar=0 then 
17bf4     0C 4E 05 F1 | 	add	fp, #12
17bf8     A7 FE 09 FB | 	rdlong	result3, fp wz
17bfc     0C 4E 85 F1 | 	sub	fp, #12
17c00     A8 00 90 5D |  if_ne	jmp	#LR__1931
17c04     00 C0 1B FF 
17c08     00 26 06 F6 | 	mov	local01, ##931135488
17c0c     52 00 00 FF 
17c10     3C E4 05 F1 | 	add	objptr, ##42044
17c14     F2 12 02 FB | 	rdlong	arg01, objptr
17c18     52 00 00 FF 
17c1c     3C E4 85 F1 | 	sub	objptr, ##42044
17c20     09 13 52 F6 | 	abs	arg01, arg01 wc
17c24     1F 28 C6 C9 |  if_b	decod	local02, #31
17c28     00 28 06 36 |  if_ae	mov	local02, #0
17c2c     58 2F B1 FD | 	call	#__system___float_fromuns
17c30     14 FB 61 F5 | 	xor	result1, local02
17c34     FD 12 02 F6 | 	mov	arg01, result1
17c38     FF 7F 23 FF 
17c3c     00 14 06 F6 | 	mov	arg02, ##1191181824
17c40     4C 35 B1 FD | 	call	#__system___float_div
17c44     FD 14 02 F6 | 	mov	arg02, result1
17c48     13 13 02 F6 | 	mov	arg01, local01
17c4c     6C 2F B1 FD | 	call	#__system___float_add
17c50     10 4E 05 F1 | 	add	fp, #16
17c54     A7 FA 61 FC | 	wrlong	result1, fp
17c58                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17c58     10 4E 85 F1 | 	sub	fp, #16
17c5c     1F FA 05 F4 | 	bitl	result1, #31
17c60     FD 12 02 F6 | 	mov	arg01, result1
17c64     89 41 1D FF 
17c68     6F 14 06 F6 | 	mov	arg02, ##981668463
17c6c     01 16 06 F6 | 	mov	arg03, #1
17c70     4C 37 B1 FD | 	call	#__system___float_cmp
17c74     00 FA 55 F2 | 	cmps	result1, #0 wc
17c78     10 4E 05 C1 |  if_b	add	fp, #16
17c7c     A7 00 68 CC |  if_b	wrlong	#0, fp
17c80     10 4E 85 C1 |  if_b	sub	fp, #16
17c84     10 4E 05 F1 | 	add	fp, #16
17c88     A7 26 02 FB | 	rdlong	local01, fp
17c8c     10 4E 85 F1 | 	sub	fp, #16
17c90     A7 26 62 FC | 	wrlong	local01, fp
17c94     08 4E 05 F1 | 	add	fp, #8
17c98     A7 3C 68 FC | 	wrlong	#30, fp
17c9c     08 4E 85 F1 | 	sub	fp, #8
17ca0     A7 12 02 F6 | 	mov	arg01, fp
17ca4     10 5C BF FD | 	call	#_push
17ca8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17ca8     28 01 90 FD | 	jmp	#LR__1934
17cac                 | LR__1931
17cac     70 5B BF FD | 	call	#_pop
17cb0     A7 FA 61 FC | 	wrlong	result1, fp
17cb4     04 4E 05 F1 | 	add	fp, #4
17cb8     A7 FC 61 FC | 	wrlong	result2, fp
17cbc     04 4E 05 F1 | 	add	fp, #4
17cc0     A7 FE 61 FC | 	wrlong	result3, fp
17cc4                 | ' t1=pop()
17cc4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17cc4     08 4E 85 F1 | 	sub	fp, #8
17cc8     1C FE 0D F2 | 	cmp	result3, #28 wz
17ccc     08 4E 05 51 |  if_ne	add	fp, #8
17cd0     A7 26 02 5B |  if_ne	rdlong	local01, fp
17cd4     08 4E 85 51 |  if_ne	sub	fp, #8
17cd8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17cdc     E8 00 90 5D |  if_ne	jmp	#LR__1933
17ce0     A7 26 02 FB | 	rdlong	local01, fp
17ce4     52 00 00 FF 
17ce8     60 E5 05 F1 | 	add	objptr, ##42336
17cec     F2 26 62 FC | 	wrlong	local01, objptr
17cf0                 | '   q=t1.result.uresult
17cf0                 | '   if q<7 then 
17cf0     52 00 00 FF 
17cf4     60 E5 85 F1 | 	sub	objptr, ##42336
17cf8     07 26 56 F2 | 	cmps	local01, #7 wc
17cfc     B8 00 90 3D |  if_ae	jmp	#LR__1932
17d00     00 C0 1B FF 
17d04     00 26 06 F6 | 	mov	local01, ##931135488
17d08     52 00 00 FF 
17d0c     60 E5 05 F1 | 	add	objptr, ##42336
17d10     F2 16 02 FB | 	rdlong	arg03, objptr
17d14     02 16 66 F0 | 	shl	arg03, #2
17d18     24 E5 85 F1 | 	sub	objptr, #292
17d1c     F2 16 02 F1 | 	add	arg03, objptr
17d20     0B 13 02 FB | 	rdlong	arg01, arg03
17d24     52 00 00 FF 
17d28     3C E4 85 F1 | 	sub	objptr, ##42044
17d2c     09 13 52 F6 | 	abs	arg01, arg01 wc
17d30     1F 28 C6 C9 |  if_b	decod	local02, #31
17d34     00 28 06 36 |  if_ae	mov	local02, #0
17d38     4C 2E B1 FD | 	call	#__system___float_fromuns
17d3c     14 FB 61 F5 | 	xor	result1, local02
17d40     FD 12 02 F6 | 	mov	arg01, result1
17d44     FF 7F 23 FF 
17d48     00 14 06 F6 | 	mov	arg02, ##1191181824
17d4c     40 34 B1 FD | 	call	#__system___float_div
17d50     FD 14 02 F6 | 	mov	arg02, result1
17d54     13 13 02 F6 | 	mov	arg01, local01
17d58     60 2E B1 FD | 	call	#__system___float_add
17d5c     10 4E 05 F1 | 	add	fp, #16
17d60     A7 FA 61 FC | 	wrlong	result1, fp
17d64                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17d64     10 4E 85 F1 | 	sub	fp, #16
17d68     1F FA 05 F4 | 	bitl	result1, #31
17d6c     FD 12 02 F6 | 	mov	arg01, result1
17d70     89 41 1D FF 
17d74     6F 14 06 F6 | 	mov	arg02, ##981668463
17d78     01 16 06 F6 | 	mov	arg03, #1
17d7c     40 36 B1 FD | 	call	#__system___float_cmp
17d80     00 FA 55 F2 | 	cmps	result1, #0 wc
17d84     10 4E 05 C1 |  if_b	add	fp, #16
17d88     A7 00 68 CC |  if_b	wrlong	#0, fp
17d8c     10 4E 85 C1 |  if_b	sub	fp, #16
17d90     10 4E 05 F1 | 	add	fp, #16
17d94     A7 26 02 FB | 	rdlong	local01, fp
17d98     10 4E 85 F1 | 	sub	fp, #16
17d9c     A7 26 62 FC | 	wrlong	local01, fp
17da0     08 4E 05 F1 | 	add	fp, #8
17da4     A7 3C 68 FC | 	wrlong	#30, fp
17da8     08 4E 85 F1 | 	sub	fp, #8
17dac     A7 12 02 F6 | 	mov	arg01, fp
17db0     04 5B BF FD | 	call	#_push
17db4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17db4     1C 00 90 FD | 	jmp	#LR__1934
17db8                 | LR__1932
17db8     29 12 06 F6 | 	mov	arg01, #41
17dbc     00 14 06 F6 | 	mov	arg02, #0
17dc0     F8 C8 B0 FD | 	call	#_printerror
17dc4                 | '      printerror(41) : return
17dc4     0C 00 90 FD | 	jmp	#LR__1934
17dc8                 | LR__1933
17dc8     29 12 06 F6 | 	mov	arg01, #41
17dcc     00 14 06 F6 | 	mov	arg02, #0
17dd0     E8 C8 B0 FD | 	call	#_printerror
17dd4                 | LR__1934
17dd4     A7 F0 03 F6 | 	mov	ptra, fp
17dd8     B2 00 A0 FD | 	call	#popregs_
17ddc                 | _do_pads_ret
17ddc     2D 00 64 FD | 	ret
17de0                 | 
17de0                 | ' 
17de0                 | ' ' ------------------ padw
17de0                 | ' 
17de0                 | ' sub do_padw
17de0                 | _do_padw
17de0     02 4A 05 F6 | 	mov	COUNT_, #2
17de4     A8 00 A0 FD | 	call	#pushregs_
17de8     14 F0 07 F1 | 	add	ptra, #20
17dec     4A 00 00 FF 
17df0     A0 E4 05 F1 | 	add	objptr, ##38048
17df4     F2 26 02 FB | 	rdlong	local01, objptr
17df8     13 17 02 F6 | 	mov	arg03, local01
17dfc     01 16 66 F0 | 	shl	arg03, #1
17e00     13 17 02 F1 | 	add	arg03, local01
17e04     02 16 66 F0 | 	shl	arg03, #2
17e08     03 00 00 FF 
17e0c     04 E4 85 F1 | 	sub	objptr, ##1540
17e10     F2 16 02 F1 | 	add	arg03, objptr
17e14     0B 17 02 FB | 	rdlong	arg03, arg03
17e18     0C 4E 05 F1 | 	add	fp, #12
17e1c     A7 16 62 FC | 	wrlong	arg03, fp
17e20                 | ' 
17e20                 | ' numpar=compiledline(lineptr_e).result.uresult
17e20                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
17e20     0C 4E 85 F1 | 	sub	fp, #12
17e24     02 16 16 F2 | 	cmp	arg03, #2 wc
17e28     47 00 00 FF 
17e2c     9C E4 85 F1 | 	sub	objptr, ##36508
17e30     40 00 90 CD |  if_b	jmp	#LR__1940
17e34     00 12 06 F6 | 	mov	arg01, #0
17e38     78 5F B1 FD | 	call	#__system___getiolock_0620
17e3c     FD 12 02 F6 | 	mov	arg01, result1
17e40     CC 02 B1 FD | 	call	#__system___lockmem
17e44     B6 01 00 FF 
17e48     55 14 06 F6 | 	mov	arg02, ##@LR__5884
17e4c     00 12 06 F6 | 	mov	arg01, #0
17e50     00 16 06 F6 | 	mov	arg03, #0
17e54     B0 0F B1 FD | 	call	#__system___basic_print_string
17e58     00 12 06 F6 | 	mov	arg01, #0
17e5c     54 5F B1 FD | 	call	#__system___getiolock_0620
17e60     FD 00 68 FC | 	wrlong	#0, result1
17e64     27 12 06 F6 | 	mov	arg01, #39
17e68     00 14 06 F6 | 	mov	arg02, #0
17e6c     4C C8 B0 FD | 	call	#_printerror
17e70     E0 01 90 FD | 	jmp	#LR__1944
17e74                 | LR__1940
17e74                 | ' if numpar=0 then 
17e74     0C 4E 05 F1 | 	add	fp, #12
17e78     A7 FE 09 FB | 	rdlong	result3, fp wz
17e7c     0C 4E 85 F1 | 	sub	fp, #12
17e80     A8 00 90 5D |  if_ne	jmp	#LR__1941
17e84     00 C0 1B FF 
17e88     00 26 06 F6 | 	mov	local01, ##931135488
17e8c     52 00 00 FF 
17e90     58 E4 05 F1 | 	add	objptr, ##42072
17e94     F2 12 02 FB | 	rdlong	arg01, objptr
17e98     52 00 00 FF 
17e9c     58 E4 85 F1 | 	sub	objptr, ##42072
17ea0     09 13 52 F6 | 	abs	arg01, arg01 wc
17ea4     1F 28 C6 C9 |  if_b	decod	local02, #31
17ea8     00 28 06 36 |  if_ae	mov	local02, #0
17eac     D8 2C B1 FD | 	call	#__system___float_fromuns
17eb0     14 FB 61 F5 | 	xor	result1, local02
17eb4     FD 12 02 F6 | 	mov	arg01, result1
17eb8     FF 7F 23 FF 
17ebc     00 14 06 F6 | 	mov	arg02, ##1191181824
17ec0     CC 32 B1 FD | 	call	#__system___float_div
17ec4     FD 14 02 F6 | 	mov	arg02, result1
17ec8     13 13 02 F6 | 	mov	arg01, local01
17ecc     EC 2C B1 FD | 	call	#__system___float_add
17ed0     10 4E 05 F1 | 	add	fp, #16
17ed4     A7 FA 61 FC | 	wrlong	result1, fp
17ed8                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17ed8     10 4E 85 F1 | 	sub	fp, #16
17edc     1F FA 05 F4 | 	bitl	result1, #31
17ee0     FD 12 02 F6 | 	mov	arg01, result1
17ee4     89 41 1D FF 
17ee8     6F 14 06 F6 | 	mov	arg02, ##981668463
17eec     01 16 06 F6 | 	mov	arg03, #1
17ef0     CC 34 B1 FD | 	call	#__system___float_cmp
17ef4     00 FA 55 F2 | 	cmps	result1, #0 wc
17ef8     10 4E 05 C1 |  if_b	add	fp, #16
17efc     A7 00 68 CC |  if_b	wrlong	#0, fp
17f00     10 4E 85 C1 |  if_b	sub	fp, #16
17f04     10 4E 05 F1 | 	add	fp, #16
17f08     A7 26 02 FB | 	rdlong	local01, fp
17f0c     10 4E 85 F1 | 	sub	fp, #16
17f10     A7 26 62 FC | 	wrlong	local01, fp
17f14     08 4E 05 F1 | 	add	fp, #8
17f18     A7 3C 68 FC | 	wrlong	#30, fp
17f1c     08 4E 85 F1 | 	sub	fp, #8
17f20     A7 12 02 F6 | 	mov	arg01, fp
17f24     90 59 BF FD | 	call	#_push
17f28                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17f28     28 01 90 FD | 	jmp	#LR__1944
17f2c                 | LR__1941
17f2c     F0 58 BF FD | 	call	#_pop
17f30     A7 FA 61 FC | 	wrlong	result1, fp
17f34     04 4E 05 F1 | 	add	fp, #4
17f38     A7 FC 61 FC | 	wrlong	result2, fp
17f3c     04 4E 05 F1 | 	add	fp, #4
17f40     A7 FE 61 FC | 	wrlong	result3, fp
17f44                 | ' t1=pop()
17f44                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17f44     08 4E 85 F1 | 	sub	fp, #8
17f48     1C FE 0D F2 | 	cmp	result3, #28 wz
17f4c     08 4E 05 51 |  if_ne	add	fp, #8
17f50     A7 26 02 5B |  if_ne	rdlong	local01, fp
17f54     08 4E 85 51 |  if_ne	sub	fp, #8
17f58     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17f5c     E8 00 90 5D |  if_ne	jmp	#LR__1943
17f60     A7 26 02 FB | 	rdlong	local01, fp
17f64     52 00 00 FF 
17f68     60 E5 05 F1 | 	add	objptr, ##42336
17f6c     F2 26 62 FC | 	wrlong	local01, objptr
17f70                 | '   q=t1.result.uresult
17f70                 | '   if q<7 then 
17f70     52 00 00 FF 
17f74     60 E5 85 F1 | 	sub	objptr, ##42336
17f78     07 26 56 F2 | 	cmps	local01, #7 wc
17f7c     B8 00 90 3D |  if_ae	jmp	#LR__1942
17f80     00 C0 1B FF 
17f84     00 26 06 F6 | 	mov	local01, ##931135488
17f88     52 00 00 FF 
17f8c     60 E5 05 F1 | 	add	objptr, ##42336
17f90     F2 16 02 FB | 	rdlong	arg03, objptr
17f94     02 16 66 F0 | 	shl	arg03, #2
17f98     08 E5 85 F1 | 	sub	objptr, #264
17f9c     F2 16 02 F1 | 	add	arg03, objptr
17fa0     0B 13 02 FB | 	rdlong	arg01, arg03
17fa4     52 00 00 FF 
17fa8     58 E4 85 F1 | 	sub	objptr, ##42072
17fac     09 13 52 F6 | 	abs	arg01, arg01 wc
17fb0     1F 28 C6 C9 |  if_b	decod	local02, #31
17fb4     00 28 06 36 |  if_ae	mov	local02, #0
17fb8     CC 2B B1 FD | 	call	#__system___float_fromuns
17fbc     14 FB 61 F5 | 	xor	result1, local02
17fc0     FD 12 02 F6 | 	mov	arg01, result1
17fc4     FF 7F 23 FF 
17fc8     00 14 06 F6 | 	mov	arg02, ##1191181824
17fcc     C0 31 B1 FD | 	call	#__system___float_div
17fd0     FD 14 02 F6 | 	mov	arg02, result1
17fd4     13 13 02 F6 | 	mov	arg01, local01
17fd8     E0 2B B1 FD | 	call	#__system___float_add
17fdc     10 4E 05 F1 | 	add	fp, #16
17fe0     A7 FA 61 FC | 	wrlong	result1, fp
17fe4                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17fe4     10 4E 85 F1 | 	sub	fp, #16
17fe8     1F FA 05 F4 | 	bitl	result1, #31
17fec     FD 12 02 F6 | 	mov	arg01, result1
17ff0     89 41 1D FF 
17ff4     6F 14 06 F6 | 	mov	arg02, ##981668463
17ff8     01 16 06 F6 | 	mov	arg03, #1
17ffc     C0 33 B1 FD | 	call	#__system___float_cmp
18000     00 FA 55 F2 | 	cmps	result1, #0 wc
18004     10 4E 05 C1 |  if_b	add	fp, #16
18008     A7 00 68 CC |  if_b	wrlong	#0, fp
1800c     10 4E 85 C1 |  if_b	sub	fp, #16
18010     10 4E 05 F1 | 	add	fp, #16
18014     A7 26 02 FB | 	rdlong	local01, fp
18018     10 4E 85 F1 | 	sub	fp, #16
1801c     A7 26 62 FC | 	wrlong	local01, fp
18020     08 4E 05 F1 | 	add	fp, #8
18024     A7 3C 68 FC | 	wrlong	#30, fp
18028     08 4E 85 F1 | 	sub	fp, #8
1802c     A7 12 02 F6 | 	mov	arg01, fp
18030     84 58 BF FD | 	call	#_push
18034                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
18034     1C 00 90 FD | 	jmp	#LR__1944
18038                 | LR__1942
18038     29 12 06 F6 | 	mov	arg01, #41
1803c     00 14 06 F6 | 	mov	arg02, #0
18040     78 C6 B0 FD | 	call	#_printerror
18044                 | '      printerror(41) : return
18044     0C 00 90 FD | 	jmp	#LR__1944
18048                 | LR__1943
18048     29 12 06 F6 | 	mov	arg01, #41
1804c     00 14 06 F6 | 	mov	arg02, #0
18050     68 C6 B0 FD | 	call	#_printerror
18054                 | LR__1944
18054     A7 F0 03 F6 | 	mov	ptra, fp
18058     B2 00 A0 FD | 	call	#popregs_
1805c                 | _do_padw_ret
1805c     2D 00 64 FD | 	ret
18060                 | 
18060                 | ' 
18060                 | ' ' ------------------ padx
18060                 | ' 
18060                 | ' sub do_padx
18060                 | _do_padx
18060     02 4A 05 F6 | 	mov	COUNT_, #2
18064     A8 00 A0 FD | 	call	#pushregs_
18068     14 F0 07 F1 | 	add	ptra, #20
1806c     4A 00 00 FF 
18070     A0 E4 05 F1 | 	add	objptr, ##38048
18074     F2 26 02 FB | 	rdlong	local01, objptr
18078     13 17 02 F6 | 	mov	arg03, local01
1807c     01 16 66 F0 | 	shl	arg03, #1
18080     13 17 02 F1 | 	add	arg03, local01
18084     02 16 66 F0 | 	shl	arg03, #2
18088     03 00 00 FF 
1808c     04 E4 85 F1 | 	sub	objptr, ##1540
18090     F2 16 02 F1 | 	add	arg03, objptr
18094     0B 17 02 FB | 	rdlong	arg03, arg03
18098     0C 4E 05 F1 | 	add	fp, #12
1809c     A7 16 62 FC | 	wrlong	arg03, fp
180a0                 | ' 
180a0                 | ' numpar=compiledline(lineptr_e).result.uresult
180a0                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
180a0     0C 4E 85 F1 | 	sub	fp, #12
180a4     02 16 16 F2 | 	cmp	arg03, #2 wc
180a8     47 00 00 FF 
180ac     9C E4 85 F1 | 	sub	objptr, ##36508
180b0     40 00 90 CD |  if_b	jmp	#LR__1950
180b4     00 12 06 F6 | 	mov	arg01, #0
180b8     F8 5C B1 FD | 	call	#__system___getiolock_0620
180bc     FD 12 02 F6 | 	mov	arg01, result1
180c0     4C 00 B1 FD | 	call	#__system___lockmem
180c4     B6 01 00 FF 
180c8     5C 14 06 F6 | 	mov	arg02, ##@LR__5885
180cc     00 12 06 F6 | 	mov	arg01, #0
180d0     00 16 06 F6 | 	mov	arg03, #0
180d4     30 0D B1 FD | 	call	#__system___basic_print_string
180d8     00 12 06 F6 | 	mov	arg01, #0
180dc     D4 5C B1 FD | 	call	#__system___getiolock_0620
180e0     FD 00 68 FC | 	wrlong	#0, result1
180e4     27 12 06 F6 | 	mov	arg01, #39
180e8     00 14 06 F6 | 	mov	arg02, #0
180ec     CC C5 B0 FD | 	call	#_printerror
180f0     E0 01 90 FD | 	jmp	#LR__1954
180f4                 | LR__1950
180f4                 | ' if numpar=0 then 
180f4     0C 4E 05 F1 | 	add	fp, #12
180f8     A7 FE 09 FB | 	rdlong	result3, fp wz
180fc     0C 4E 85 F1 | 	sub	fp, #12
18100     A8 00 90 5D |  if_ne	jmp	#LR__1951
18104     00 C0 1B FF 
18108     00 26 06 F6 | 	mov	local01, ##931135488
1810c     51 00 00 FF 
18110     78 E5 05 F1 | 	add	objptr, ##41848
18114     F2 12 02 FB | 	rdlong	arg01, objptr
18118     51 00 00 FF 
1811c     78 E5 85 F1 | 	sub	objptr, ##41848
18120     09 13 52 F6 | 	abs	arg01, arg01 wc
18124     1F 28 C6 C9 |  if_b	decod	local02, #31
18128     00 28 06 36 |  if_ae	mov	local02, #0
1812c     58 2A B1 FD | 	call	#__system___float_fromuns
18130     14 FB 61 F5 | 	xor	result1, local02
18134     FD 12 02 F6 | 	mov	arg01, result1
18138     FF 7F 23 FF 
1813c     00 14 06 F6 | 	mov	arg02, ##1191181824
18140     4C 30 B1 FD | 	call	#__system___float_div
18144     FD 14 02 F6 | 	mov	arg02, result1
18148     13 13 02 F6 | 	mov	arg01, local01
1814c     6C 2A B1 FD | 	call	#__system___float_add
18150     10 4E 05 F1 | 	add	fp, #16
18154     A7 FA 61 FC | 	wrlong	result1, fp
18158                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18158     10 4E 85 F1 | 	sub	fp, #16
1815c     1F FA 05 F4 | 	bitl	result1, #31
18160     FD 12 02 F6 | 	mov	arg01, result1
18164     89 41 1D FF 
18168     6F 14 06 F6 | 	mov	arg02, ##981668463
1816c     01 16 06 F6 | 	mov	arg03, #1
18170     4C 32 B1 FD | 	call	#__system___float_cmp
18174     00 FA 55 F2 | 	cmps	result1, #0 wc
18178     10 4E 05 C1 |  if_b	add	fp, #16
1817c     A7 00 68 CC |  if_b	wrlong	#0, fp
18180     10 4E 85 C1 |  if_b	sub	fp, #16
18184     10 4E 05 F1 | 	add	fp, #16
18188     A7 26 02 FB | 	rdlong	local01, fp
1818c     10 4E 85 F1 | 	sub	fp, #16
18190     A7 26 62 FC | 	wrlong	local01, fp
18194     08 4E 05 F1 | 	add	fp, #8
18198     A7 3C 68 FC | 	wrlong	#30, fp
1819c     08 4E 85 F1 | 	sub	fp, #8
181a0     A7 12 02 F6 | 	mov	arg01, fp
181a4     10 57 BF FD | 	call	#_push
181a8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
181a8     28 01 90 FD | 	jmp	#LR__1954
181ac                 | LR__1951
181ac     70 56 BF FD | 	call	#_pop
181b0     A7 FA 61 FC | 	wrlong	result1, fp
181b4     04 4E 05 F1 | 	add	fp, #4
181b8     A7 FC 61 FC | 	wrlong	result2, fp
181bc     04 4E 05 F1 | 	add	fp, #4
181c0     A7 FE 61 FC | 	wrlong	result3, fp
181c4                 | ' t1=pop()
181c4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
181c4     08 4E 85 F1 | 	sub	fp, #8
181c8     1C FE 0D F2 | 	cmp	result3, #28 wz
181cc     08 4E 05 51 |  if_ne	add	fp, #8
181d0     A7 26 02 5B |  if_ne	rdlong	local01, fp
181d4     08 4E 85 51 |  if_ne	sub	fp, #8
181d8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
181dc     E8 00 90 5D |  if_ne	jmp	#LR__1953
181e0     A7 26 02 FB | 	rdlong	local01, fp
181e4     52 00 00 FF 
181e8     60 E5 05 F1 | 	add	objptr, ##42336
181ec     F2 26 62 FC | 	wrlong	local01, objptr
181f0                 | '   q=t1.result.uresult
181f0                 | '   if q<7 then 
181f0     52 00 00 FF 
181f4     60 E5 85 F1 | 	sub	objptr, ##42336
181f8     07 26 56 F2 | 	cmps	local01, #7 wc
181fc     B8 00 90 3D |  if_ae	jmp	#LR__1952
18200     00 C0 1B FF 
18204     00 26 06 F6 | 	mov	local01, ##931135488
18208     52 00 00 FF 
1820c     60 E5 05 F1 | 	add	objptr, ##42336
18210     F2 16 02 FB | 	rdlong	arg03, objptr
18214     02 16 66 F0 | 	shl	arg03, #2
18218     E8 E5 85 F1 | 	sub	objptr, #488
1821c     F2 16 02 F1 | 	add	arg03, objptr
18220     0B 13 02 FB | 	rdlong	arg01, arg03
18224     51 00 00 FF 
18228     78 E5 85 F1 | 	sub	objptr, ##41848
1822c     09 13 52 F6 | 	abs	arg01, arg01 wc
18230     1F 28 C6 C9 |  if_b	decod	local02, #31
18234     00 28 06 36 |  if_ae	mov	local02, #0
18238     4C 29 B1 FD | 	call	#__system___float_fromuns
1823c     14 FB 61 F5 | 	xor	result1, local02
18240     FD 12 02 F6 | 	mov	arg01, result1
18244     FF 7F 23 FF 
18248     00 14 06 F6 | 	mov	arg02, ##1191181824
1824c     40 2F B1 FD | 	call	#__system___float_div
18250     FD 14 02 F6 | 	mov	arg02, result1
18254     13 13 02 F6 | 	mov	arg01, local01
18258     60 29 B1 FD | 	call	#__system___float_add
1825c     10 4E 05 F1 | 	add	fp, #16
18260     A7 FA 61 FC | 	wrlong	result1, fp
18264                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18264     10 4E 85 F1 | 	sub	fp, #16
18268     1F FA 05 F4 | 	bitl	result1, #31
1826c     FD 12 02 F6 | 	mov	arg01, result1
18270     89 41 1D FF 
18274     6F 14 06 F6 | 	mov	arg02, ##981668463
18278     01 16 06 F6 | 	mov	arg03, #1
1827c     40 31 B1 FD | 	call	#__system___float_cmp
18280     00 FA 55 F2 | 	cmps	result1, #0 wc
18284     10 4E 05 C1 |  if_b	add	fp, #16
18288     A7 00 68 CC |  if_b	wrlong	#0, fp
1828c     10 4E 85 C1 |  if_b	sub	fp, #16
18290     10 4E 05 F1 | 	add	fp, #16
18294     A7 26 02 FB | 	rdlong	local01, fp
18298     10 4E 85 F1 | 	sub	fp, #16
1829c     A7 26 62 FC | 	wrlong	local01, fp
182a0     08 4E 05 F1 | 	add	fp, #8
182a4     A7 3C 68 FC | 	wrlong	#30, fp
182a8     08 4E 85 F1 | 	sub	fp, #8
182ac     A7 12 02 F6 | 	mov	arg01, fp
182b0     04 56 BF FD | 	call	#_push
182b4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
182b4     1C 00 90 FD | 	jmp	#LR__1954
182b8                 | LR__1952
182b8     29 12 06 F6 | 	mov	arg01, #41
182bc     00 14 06 F6 | 	mov	arg02, #0
182c0     F8 C3 B0 FD | 	call	#_printerror
182c4                 | '      printerror(41) : return
182c4     0C 00 90 FD | 	jmp	#LR__1954
182c8                 | LR__1953
182c8     29 12 06 F6 | 	mov	arg01, #41
182cc     00 14 06 F6 | 	mov	arg02, #0
182d0     E8 C3 B0 FD | 	call	#_printerror
182d4                 | LR__1954
182d4     A7 F0 03 F6 | 	mov	ptra, fp
182d8     B2 00 A0 FD | 	call	#popregs_
182dc                 | _do_padx_ret
182dc     2D 00 64 FD | 	ret
182e0                 | 
182e0                 | ' 
182e0                 | ' ' ------------------ pady
182e0                 | ' 
182e0                 | ' sub do_pady
182e0                 | _do_pady
182e0     02 4A 05 F6 | 	mov	COUNT_, #2
182e4     A8 00 A0 FD | 	call	#pushregs_
182e8     14 F0 07 F1 | 	add	ptra, #20
182ec     4A 00 00 FF 
182f0     A0 E4 05 F1 | 	add	objptr, ##38048
182f4     F2 26 02 FB | 	rdlong	local01, objptr
182f8     13 17 02 F6 | 	mov	arg03, local01
182fc     01 16 66 F0 | 	shl	arg03, #1
18300     13 17 02 F1 | 	add	arg03, local01
18304     02 16 66 F0 | 	shl	arg03, #2
18308     03 00 00 FF 
1830c     04 E4 85 F1 | 	sub	objptr, ##1540
18310     F2 16 02 F1 | 	add	arg03, objptr
18314     0B 17 02 FB | 	rdlong	arg03, arg03
18318     0C 4E 05 F1 | 	add	fp, #12
1831c     A7 16 62 FC | 	wrlong	arg03, fp
18320                 | ' 
18320                 | ' numpar=compiledline(lineptr_e).result.uresult
18320                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
18320     0C 4E 85 F1 | 	sub	fp, #12
18324     02 16 16 F2 | 	cmp	arg03, #2 wc
18328     47 00 00 FF 
1832c     9C E4 85 F1 | 	sub	objptr, ##36508
18330     40 00 90 CD |  if_b	jmp	#LR__1960
18334     00 12 06 F6 | 	mov	arg01, #0
18338     78 5A B1 FD | 	call	#__system___getiolock_0620
1833c     FD 12 02 F6 | 	mov	arg01, result1
18340     CC FD B0 FD | 	call	#__system___lockmem
18344     B6 01 00 FF 
18348     63 14 06 F6 | 	mov	arg02, ##@LR__5886
1834c     00 12 06 F6 | 	mov	arg01, #0
18350     00 16 06 F6 | 	mov	arg03, #0
18354     B0 0A B1 FD | 	call	#__system___basic_print_string
18358     00 12 06 F6 | 	mov	arg01, #0
1835c     54 5A B1 FD | 	call	#__system___getiolock_0620
18360     FD 00 68 FC | 	wrlong	#0, result1
18364     27 12 06 F6 | 	mov	arg01, #39
18368     00 14 06 F6 | 	mov	arg02, #0
1836c     4C C3 B0 FD | 	call	#_printerror
18370     E0 01 90 FD | 	jmp	#LR__1964
18374                 | LR__1960
18374                 | ' if numpar=0 then 
18374     0C 4E 05 F1 | 	add	fp, #12
18378     A7 FE 09 FB | 	rdlong	result3, fp wz
1837c     0C 4E 85 F1 | 	sub	fp, #12
18380     A8 00 90 5D |  if_ne	jmp	#LR__1961
18384     00 C0 1B FF 
18388     00 26 06 F6 | 	mov	local01, ##931135488
1838c     51 00 00 FF 
18390     94 E5 05 F1 | 	add	objptr, ##41876
18394     F2 12 02 FB | 	rdlong	arg01, objptr
18398     51 00 00 FF 
1839c     94 E5 85 F1 | 	sub	objptr, ##41876
183a0     09 13 52 F6 | 	abs	arg01, arg01 wc
183a4     1F 28 C6 C9 |  if_b	decod	local02, #31
183a8     00 28 06 36 |  if_ae	mov	local02, #0
183ac     D8 27 B1 FD | 	call	#__system___float_fromuns
183b0     14 FB 61 F5 | 	xor	result1, local02
183b4     FD 12 02 F6 | 	mov	arg01, result1
183b8     FF 7F 23 FF 
183bc     00 14 06 F6 | 	mov	arg02, ##1191181824
183c0     CC 2D B1 FD | 	call	#__system___float_div
183c4     FD 14 02 F6 | 	mov	arg02, result1
183c8     13 13 02 F6 | 	mov	arg01, local01
183cc     EC 27 B1 FD | 	call	#__system___float_add
183d0     10 4E 05 F1 | 	add	fp, #16
183d4     A7 FA 61 FC | 	wrlong	result1, fp
183d8                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
183d8     10 4E 85 F1 | 	sub	fp, #16
183dc     1F FA 05 F4 | 	bitl	result1, #31
183e0     FD 12 02 F6 | 	mov	arg01, result1
183e4     89 41 1D FF 
183e8     6F 14 06 F6 | 	mov	arg02, ##981668463
183ec     01 16 06 F6 | 	mov	arg03, #1
183f0     CC 2F B1 FD | 	call	#__system___float_cmp
183f4     00 FA 55 F2 | 	cmps	result1, #0 wc
183f8     10 4E 05 C1 |  if_b	add	fp, #16
183fc     A7 00 68 CC |  if_b	wrlong	#0, fp
18400     10 4E 85 C1 |  if_b	sub	fp, #16
18404     10 4E 05 F1 | 	add	fp, #16
18408     A7 26 02 FB | 	rdlong	local01, fp
1840c     10 4E 85 F1 | 	sub	fp, #16
18410     A7 26 62 FC | 	wrlong	local01, fp
18414     08 4E 05 F1 | 	add	fp, #8
18418     A7 3C 68 FC | 	wrlong	#30, fp
1841c     08 4E 85 F1 | 	sub	fp, #8
18420     A7 12 02 F6 | 	mov	arg01, fp
18424     90 54 BF FD | 	call	#_push
18428                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
18428     28 01 90 FD | 	jmp	#LR__1964
1842c                 | LR__1961
1842c     F0 53 BF FD | 	call	#_pop
18430     A7 FA 61 FC | 	wrlong	result1, fp
18434     04 4E 05 F1 | 	add	fp, #4
18438     A7 FC 61 FC | 	wrlong	result2, fp
1843c     04 4E 05 F1 | 	add	fp, #4
18440     A7 FE 61 FC | 	wrlong	result3, fp
18444                 | ' t1=pop()
18444                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
18444     08 4E 85 F1 | 	sub	fp, #8
18448     1C FE 0D F2 | 	cmp	result3, #28 wz
1844c     08 4E 05 51 |  if_ne	add	fp, #8
18450     A7 26 02 5B |  if_ne	rdlong	local01, fp
18454     08 4E 85 51 |  if_ne	sub	fp, #8
18458     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1845c     E8 00 90 5D |  if_ne	jmp	#LR__1963
18460     A7 26 02 FB | 	rdlong	local01, fp
18464     52 00 00 FF 
18468     60 E5 05 F1 | 	add	objptr, ##42336
1846c     F2 26 62 FC | 	wrlong	local01, objptr
18470                 | '   q=t1.result.uresult
18470                 | '   if q<7 then 
18470     52 00 00 FF 
18474     60 E5 85 F1 | 	sub	objptr, ##42336
18478     07 26 56 F2 | 	cmps	local01, #7 wc
1847c     B8 00 90 3D |  if_ae	jmp	#LR__1962
18480     00 C0 1B FF 
18484     00 26 06 F6 | 	mov	local01, ##931135488
18488     52 00 00 FF 
1848c     60 E5 05 F1 | 	add	objptr, ##42336
18490     F2 16 02 FB | 	rdlong	arg03, objptr
18494     02 16 66 F0 | 	shl	arg03, #2
18498     CC E5 85 F1 | 	sub	objptr, #460
1849c     F2 16 02 F1 | 	add	arg03, objptr
184a0     0B 13 02 FB | 	rdlong	arg01, arg03
184a4     51 00 00 FF 
184a8     94 E5 85 F1 | 	sub	objptr, ##41876
184ac     09 13 52 F6 | 	abs	arg01, arg01 wc
184b0     1F 28 C6 C9 |  if_b	decod	local02, #31
184b4     00 28 06 36 |  if_ae	mov	local02, #0
184b8     CC 26 B1 FD | 	call	#__system___float_fromuns
184bc     14 FB 61 F5 | 	xor	result1, local02
184c0     FD 12 02 F6 | 	mov	arg01, result1
184c4     FF 7F 23 FF 
184c8     00 14 06 F6 | 	mov	arg02, ##1191181824
184cc     C0 2C B1 FD | 	call	#__system___float_div
184d0     FD 14 02 F6 | 	mov	arg02, result1
184d4     13 13 02 F6 | 	mov	arg01, local01
184d8     E0 26 B1 FD | 	call	#__system___float_add
184dc     10 4E 05 F1 | 	add	fp, #16
184e0     A7 FA 61 FC | 	wrlong	result1, fp
184e4                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
184e4     10 4E 85 F1 | 	sub	fp, #16
184e8     1F FA 05 F4 | 	bitl	result1, #31
184ec     FD 12 02 F6 | 	mov	arg01, result1
184f0     89 41 1D FF 
184f4     6F 14 06 F6 | 	mov	arg02, ##981668463
184f8     01 16 06 F6 | 	mov	arg03, #1
184fc     C0 2E B1 FD | 	call	#__system___float_cmp
18500     00 FA 55 F2 | 	cmps	result1, #0 wc
18504     10 4E 05 C1 |  if_b	add	fp, #16
18508     A7 00 68 CC |  if_b	wrlong	#0, fp
1850c     10 4E 85 C1 |  if_b	sub	fp, #16
18510     10 4E 05 F1 | 	add	fp, #16
18514     A7 26 02 FB | 	rdlong	local01, fp
18518     10 4E 85 F1 | 	sub	fp, #16
1851c     A7 26 62 FC | 	wrlong	local01, fp
18520     08 4E 05 F1 | 	add	fp, #8
18524     A7 3C 68 FC | 	wrlong	#30, fp
18528     08 4E 85 F1 | 	sub	fp, #8
1852c     A7 12 02 F6 | 	mov	arg01, fp
18530     84 53 BF FD | 	call	#_push
18534                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
18534     1C 00 90 FD | 	jmp	#LR__1964
18538                 | LR__1962
18538     29 12 06 F6 | 	mov	arg01, #41
1853c     00 14 06 F6 | 	mov	arg02, #0
18540     78 C1 B0 FD | 	call	#_printerror
18544                 | '      printerror(41) : return
18544     0C 00 90 FD | 	jmp	#LR__1964
18548                 | LR__1963
18548     29 12 06 F6 | 	mov	arg01, #41
1854c     00 14 06 F6 | 	mov	arg02, #0
18550     68 C1 B0 FD | 	call	#_printerror
18554                 | LR__1964
18554     A7 F0 03 F6 | 	mov	ptra, fp
18558     B2 00 A0 FD | 	call	#popregs_
1855c                 | _do_pady_ret
1855c     2D 00 64 FD | 	ret
18560                 | 
18560                 | ' 
18560                 | ' ' ------------------ padz
18560                 | ' 
18560                 | ' sub do_padz
18560                 | _do_padz
18560     02 4A 05 F6 | 	mov	COUNT_, #2
18564     A8 00 A0 FD | 	call	#pushregs_
18568     14 F0 07 F1 | 	add	ptra, #20
1856c     4A 00 00 FF 
18570     A0 E4 05 F1 | 	add	objptr, ##38048
18574     F2 26 02 FB | 	rdlong	local01, objptr
18578     13 17 02 F6 | 	mov	arg03, local01
1857c     01 16 66 F0 | 	shl	arg03, #1
18580     13 17 02 F1 | 	add	arg03, local01
18584     02 16 66 F0 | 	shl	arg03, #2
18588     03 00 00 FF 
1858c     04 E4 85 F1 | 	sub	objptr, ##1540
18590     F2 16 02 F1 | 	add	arg03, objptr
18594     0B 17 02 FB | 	rdlong	arg03, arg03
18598     0C 4E 05 F1 | 	add	fp, #12
1859c     A7 16 62 FC | 	wrlong	arg03, fp
185a0                 | ' 
185a0                 | ' numpar=compiledline(lineptr_e).result.uresult
185a0                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
185a0     0C 4E 85 F1 | 	sub	fp, #12
185a4     02 16 16 F2 | 	cmp	arg03, #2 wc
185a8     47 00 00 FF 
185ac     9C E4 85 F1 | 	sub	objptr, ##36508
185b0     40 00 90 CD |  if_b	jmp	#LR__1970
185b4     00 12 06 F6 | 	mov	arg01, #0
185b8     F8 57 B1 FD | 	call	#__system___getiolock_0620
185bc     FD 12 02 F6 | 	mov	arg01, result1
185c0     4C FB B0 FD | 	call	#__system___lockmem
185c4     B6 01 00 FF 
185c8     6A 14 06 F6 | 	mov	arg02, ##@LR__5887
185cc     00 12 06 F6 | 	mov	arg01, #0
185d0     00 16 06 F6 | 	mov	arg03, #0
185d4     30 08 B1 FD | 	call	#__system___basic_print_string
185d8     00 12 06 F6 | 	mov	arg01, #0
185dc     D4 57 B1 FD | 	call	#__system___getiolock_0620
185e0     FD 00 68 FC | 	wrlong	#0, result1
185e4     27 12 06 F6 | 	mov	arg01, #39
185e8     00 14 06 F6 | 	mov	arg02, #0
185ec     CC C0 B0 FD | 	call	#_printerror
185f0     E0 01 90 FD | 	jmp	#LR__1974
185f4                 | LR__1970
185f4                 | ' if numpar=0 then 
185f4     0C 4E 05 F1 | 	add	fp, #12
185f8     A7 FE 09 FB | 	rdlong	result3, fp wz
185fc     0C 4E 85 F1 | 	sub	fp, #12
18600     A8 00 90 5D |  if_ne	jmp	#LR__1971
18604     00 C0 1B FF 
18608     00 26 06 F6 | 	mov	local01, ##931135488
1860c     51 00 00 FF 
18610     B0 E5 05 F1 | 	add	objptr, ##41904
18614     F2 12 02 FB | 	rdlong	arg01, objptr
18618     51 00 00 FF 
1861c     B0 E5 85 F1 | 	sub	objptr, ##41904
18620     09 13 52 F6 | 	abs	arg01, arg01 wc
18624     1F 28 C6 C9 |  if_b	decod	local02, #31
18628     00 28 06 36 |  if_ae	mov	local02, #0
1862c     58 25 B1 FD | 	call	#__system___float_fromuns
18630     14 FB 61 F5 | 	xor	result1, local02
18634     FD 12 02 F6 | 	mov	arg01, result1
18638     FF 7F 23 FF 
1863c     00 14 06 F6 | 	mov	arg02, ##1191181824
18640     4C 2B B1 FD | 	call	#__system___float_div
18644     FD 14 02 F6 | 	mov	arg02, result1
18648     13 13 02 F6 | 	mov	arg01, local01
1864c     6C 25 B1 FD | 	call	#__system___float_add
18650     10 4E 05 F1 | 	add	fp, #16
18654     A7 FA 61 FC | 	wrlong	result1, fp
18658                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18658     10 4E 85 F1 | 	sub	fp, #16
1865c     1F FA 05 F4 | 	bitl	result1, #31
18660     FD 12 02 F6 | 	mov	arg01, result1
18664     89 41 1D FF 
18668     6F 14 06 F6 | 	mov	arg02, ##981668463
1866c     01 16 06 F6 | 	mov	arg03, #1
18670     4C 2D B1 FD | 	call	#__system___float_cmp
18674     00 FA 55 F2 | 	cmps	result1, #0 wc
18678     10 4E 05 C1 |  if_b	add	fp, #16
1867c     A7 00 68 CC |  if_b	wrlong	#0, fp
18680     10 4E 85 C1 |  if_b	sub	fp, #16
18684     10 4E 05 F1 | 	add	fp, #16
18688     A7 26 02 FB | 	rdlong	local01, fp
1868c     10 4E 85 F1 | 	sub	fp, #16
18690     A7 26 62 FC | 	wrlong	local01, fp
18694     08 4E 05 F1 | 	add	fp, #8
18698     A7 3C 68 FC | 	wrlong	#30, fp
1869c     08 4E 85 F1 | 	sub	fp, #8
186a0     A7 12 02 F6 | 	mov	arg01, fp
186a4     10 52 BF FD | 	call	#_push
186a8                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
186a8     28 01 90 FD | 	jmp	#LR__1974
186ac                 | LR__1971
186ac     70 51 BF FD | 	call	#_pop
186b0     A7 FA 61 FC | 	wrlong	result1, fp
186b4     04 4E 05 F1 | 	add	fp, #4
186b8     A7 FC 61 FC | 	wrlong	result2, fp
186bc     04 4E 05 F1 | 	add	fp, #4
186c0     A7 FE 61 FC | 	wrlong	result3, fp
186c4                 | ' t1=pop()
186c4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
186c4     08 4E 85 F1 | 	sub	fp, #8
186c8     1C FE 0D F2 | 	cmp	result3, #28 wz
186cc     08 4E 05 51 |  if_ne	add	fp, #8
186d0     A7 26 02 5B |  if_ne	rdlong	local01, fp
186d4     08 4E 85 51 |  if_ne	sub	fp, #8
186d8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
186dc     E8 00 90 5D |  if_ne	jmp	#LR__1973
186e0     A7 26 02 FB | 	rdlong	local01, fp
186e4     52 00 00 FF 
186e8     60 E5 05 F1 | 	add	objptr, ##42336
186ec     F2 26 62 FC | 	wrlong	local01, objptr
186f0                 | '   q=t1.result.uresult
186f0                 | '   if q<7 then 
186f0     52 00 00 FF 
186f4     60 E5 85 F1 | 	sub	objptr, ##42336
186f8     07 26 56 F2 | 	cmps	local01, #7 wc
186fc     B8 00 90 3D |  if_ae	jmp	#LR__1972
18700     00 C0 1B FF 
18704     00 26 06 F6 | 	mov	local01, ##931135488
18708     52 00 00 FF 
1870c     60 E5 05 F1 | 	add	objptr, ##42336
18710     F2 16 02 FB | 	rdlong	arg03, objptr
18714     02 16 66 F0 | 	shl	arg03, #2
18718     B0 E5 85 F1 | 	sub	objptr, #432
1871c     F2 16 02 F1 | 	add	arg03, objptr
18720     0B 13 02 FB | 	rdlong	arg01, arg03
18724     51 00 00 FF 
18728     B0 E5 85 F1 | 	sub	objptr, ##41904
1872c     09 13 52 F6 | 	abs	arg01, arg01 wc
18730     1F 28 C6 C9 |  if_b	decod	local02, #31
18734     00 28 06 36 |  if_ae	mov	local02, #0
18738     4C 24 B1 FD | 	call	#__system___float_fromuns
1873c     14 FB 61 F5 | 	xor	result1, local02
18740     FD 12 02 F6 | 	mov	arg01, result1
18744     FF 7F 23 FF 
18748     00 14 06 F6 | 	mov	arg02, ##1191181824
1874c     40 2A B1 FD | 	call	#__system___float_div
18750     FD 14 02 F6 | 	mov	arg02, result1
18754     13 13 02 F6 | 	mov	arg01, local01
18758     60 24 B1 FD | 	call	#__system___float_add
1875c     10 4E 05 F1 | 	add	fp, #16
18760     A7 FA 61 FC | 	wrlong	result1, fp
18764                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18764     10 4E 85 F1 | 	sub	fp, #16
18768     1F FA 05 F4 | 	bitl	result1, #31
1876c     FD 12 02 F6 | 	mov	arg01, result1
18770     89 41 1D FF 
18774     6F 14 06 F6 | 	mov	arg02, ##981668463
18778     01 16 06 F6 | 	mov	arg03, #1
1877c     40 2C B1 FD | 	call	#__system___float_cmp
18780     00 FA 55 F2 | 	cmps	result1, #0 wc
18784     10 4E 05 C1 |  if_b	add	fp, #16
18788     A7 00 68 CC |  if_b	wrlong	#0, fp
1878c     10 4E 85 C1 |  if_b	sub	fp, #16
18790     10 4E 05 F1 | 	add	fp, #16
18794     A7 26 02 FB | 	rdlong	local01, fp
18798     10 4E 85 F1 | 	sub	fp, #16
1879c     A7 26 62 FC | 	wrlong	local01, fp
187a0     08 4E 05 F1 | 	add	fp, #8
187a4     A7 3C 68 FC | 	wrlong	#30, fp
187a8     08 4E 85 F1 | 	sub	fp, #8
187ac     A7 12 02 F6 | 	mov	arg01, fp
187b0     04 51 BF FD | 	call	#_push
187b4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
187b4     1C 00 90 FD | 	jmp	#LR__1974
187b8                 | LR__1972
187b8     29 12 06 F6 | 	mov	arg01, #41
187bc     00 14 06 F6 | 	mov	arg02, #0
187c0     F8 BE B0 FD | 	call	#_printerror
187c4                 | '      printerror(41) : return
187c4     0C 00 90 FD | 	jmp	#LR__1974
187c8                 | LR__1973
187c8     29 12 06 F6 | 	mov	arg01, #41
187cc     00 14 06 F6 | 	mov	arg02, #0
187d0     E8 BE B0 FD | 	call	#_printerror
187d4                 | LR__1974
187d4     A7 F0 03 F6 | 	mov	ptra, fp
187d8     B2 00 A0 FD | 	call	#popregs_
187dc                 | _do_padz_ret
187dc     2D 00 64 FD | 	ret
187e0                 | 
187e0                 | ' 
187e0                 | ' '-------------------- paper
187e0                 | ' 
187e0                 | ' sub do_paper
187e0                 | _do_paper
187e0     03 4A 05 F6 | 	mov	COUNT_, #3
187e4     A8 00 A0 FD | 	call	#pushregs_
187e8     34 50 BF FD | 	call	#_pop
187ec     FD 26 02 F6 | 	mov	local01, result1
187f0     FE 28 02 F6 | 	mov	local02, result2
187f4     FF 2A 02 F6 | 	mov	local03, result3
187f8                 | ' t1=pop() 
187f8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
187f8     1E 2A 0E F2 | 	cmp	local03, #30 wz
187fc     10 00 90 5D |  if_ne	jmp	#LR__1980
18800     13 13 02 F6 | 	mov	arg01, local01
18804     00 14 06 F6 | 	mov	arg02, #0
18808     48 2C B1 FD | 	call	#__system___float_tointeger
1880c     FD 26 02 F6 | 	mov	local01, result1
18810                 | LR__1980
18810                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
18810     1F 2A 0E F2 | 	cmp	local03, #31 wz
18814     18 00 90 5D |  if_ne	jmp	#LR__1981
18818     13 13 02 F6 | 	mov	arg01, local01
1881c     7C 2F B1 FD | 	call	#__system____builtin_atof
18820     FD 12 02 F6 | 	mov	arg01, result1
18824     00 14 06 F6 | 	mov	arg02, #0
18828     28 2C B1 FD | 	call	#__system___float_tointeger
1882c     FD 26 02 F6 | 	mov	local01, result1
18830                 | LR__1981
18830     37 00 00 FF 
18834     58 E4 05 F1 | 	add	objptr, ##28248
18838     F2 26 62 FC | 	wrlong	local01, objptr
1883c     04 E4 05 F1 | 	add	objptr, #4
18840     F2 12 02 FB | 	rdlong	arg01, objptr
18844                 | ' 
18844                 | ' write_color:=ff
18844     37 00 00 FF 
18848     1B E4 85 F1 | 	sub	objptr, ##28187
1884c     F2 12 62 FC | 	wrlong	arg01, objptr
18850                 | ' write_background:=bb
18850     04 E4 05 F1 | 	add	objptr, #4
18854     F2 26 62 FC | 	wrlong	local01, objptr
18858     45 E4 85 F1 | 	sub	objptr, #69
1885c     A7 F0 03 F6 | 	mov	ptra, fp
18860     B2 00 A0 FD | 	call	#popregs_
18864                 | _do_paper_ret
18864     2D 00 64 FD | 	ret
18868                 | 
18868                 | ' 
18868                 | ' '-------------------- peek
18868                 | ' 
18868                 | ' sub do_peek
18868                 | _do_peek
18868     00 4A 05 F6 | 	mov	COUNT_, #0
1886c     A8 00 A0 FD | 	call	#pushregs_
18870     14 F0 07 F1 | 	add	ptra, #20
18874     A8 4F BF FD | 	call	#_pop
18878     A7 FA 61 FC | 	wrlong	result1, fp
1887c     04 4E 05 F1 | 	add	fp, #4
18880     A7 FC 61 FC | 	wrlong	result2, fp
18884     04 4E 05 F1 | 	add	fp, #4
18888     A7 FE 61 FC | 	wrlong	result3, fp
1888c     08 4E 85 F1 | 	sub	fp, #8
18890     A7 12 02 F6 | 	mov	arg01, fp
18894     6C 51 BF FD | 	call	#_converttoint
18898     0C 4E 05 F1 | 	add	fp, #12
1889c     A7 FA 61 FC | 	wrlong	result1, fp
188a0                 | ' 
188a0                 | ' t1=pop()
188a0                 | ' a=converttoint(t1)
188a0                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
188a0     0C 4E 85 F1 | 	sub	fp, #12
188a4     00 04 00 FF 
188a8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
188ac     1C 00 90 3D |  if_ae	jmp	#LR__1990
188b0     0C 4E 05 F1 | 	add	fp, #12
188b4     A7 12 02 FB | 	rdlong	arg01, fp
188b8     09 FB C1 FA | 	rdbyte	result1, arg01
188bc     04 4E 05 F1 | 	add	fp, #4
188c0     A7 FA 61 FC | 	wrlong	result1, fp
188c4     10 4E 85 F1 | 	sub	fp, #16
188c8     20 00 90 FD | 	jmp	#LR__1991
188cc                 | LR__1990
188cc     0C 4E 05 F1 | 	add	fp, #12
188d0     A7 12 02 FB | 	rdlong	arg01, fp
188d4     0C 4E 85 F1 | 	sub	fp, #12
188d8     58 C0 B0 FD | 	call	#_pspeek
188dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
188e0     10 4E 05 F1 | 	add	fp, #16
188e4     A7 FA 61 FC | 	wrlong	result1, fp
188e8     10 4E 85 F1 | 	sub	fp, #16
188ec                 | LR__1991
188ec     08 4E 05 F1 | 	add	fp, #8
188f0     A7 3A 68 FC | 	wrlong	#29, fp
188f4     08 4E 05 F1 | 	add	fp, #8
188f8     A7 12 02 FB | 	rdlong	arg01, fp
188fc     10 4E 85 F1 | 	sub	fp, #16
18900     A7 12 62 FC | 	wrlong	arg01, fp
18904     A7 12 02 F6 | 	mov	arg01, fp
18908     AC 4F BF FD | 	call	#_push
1890c     A7 F0 03 F6 | 	mov	ptra, fp
18910     B2 00 A0 FD | 	call	#popregs_
18914                 | _do_peek_ret
18914     2D 00 64 FD | 	ret
18918                 | 
18918                 | ' 
18918                 | ' '-------------------- pinfloat
18918                 | ' 
18918                 | ' sub do_pinfloat
18918                 | _do_pinfloat
18918     00 4A 05 F6 | 	mov	COUNT_, #0
1891c     A8 00 A0 FD | 	call	#pushregs_
18920     0C F0 07 F1 | 	add	ptra, #12
18924     F8 4E BF FD | 	call	#_pop
18928     A7 FA 61 FC | 	wrlong	result1, fp
1892c     04 4E 05 F1 | 	add	fp, #4
18930     A7 FC 61 FC | 	wrlong	result2, fp
18934     04 4E 05 F1 | 	add	fp, #4
18938     A7 FE 61 FC | 	wrlong	result3, fp
1893c     08 4E 85 F1 | 	sub	fp, #8
18940     A7 12 02 F6 | 	mov	arg01, fp
18944     BC 50 BF FD | 	call	#_converttoint
18948     50 FA 61 FD | 	fltl	result1
1894c     A7 F0 03 F6 | 	mov	ptra, fp
18950     B2 00 A0 FD | 	call	#popregs_
18954                 | _do_pinfloat_ret
18954     2D 00 64 FD | 	ret
18958                 | 
18958                 | ' 
18958                 | ' '-------------------- pinhi
18958                 | ' 
18958                 | ' sub do_pinhi
18958                 | _do_pinhi
18958     00 4A 05 F6 | 	mov	COUNT_, #0
1895c     A8 00 A0 FD | 	call	#pushregs_
18960     0C F0 07 F1 | 	add	ptra, #12
18964     B8 4E BF FD | 	call	#_pop
18968     A7 FA 61 FC | 	wrlong	result1, fp
1896c     04 4E 05 F1 | 	add	fp, #4
18970     A7 FC 61 FC | 	wrlong	result2, fp
18974     04 4E 05 F1 | 	add	fp, #4
18978     A7 FE 61 FC | 	wrlong	result3, fp
1897c     08 4E 85 F1 | 	sub	fp, #8
18980     A7 12 02 F6 | 	mov	arg01, fp
18984     7C 50 BF FD | 	call	#_converttoint
18988     59 FA 61 FD | 	drvh	result1
1898c     A7 F0 03 F6 | 	mov	ptra, fp
18990     B2 00 A0 FD | 	call	#popregs_
18994                 | _do_pinhi_ret
18994     2D 00 64 FD | 	ret
18998                 | 
18998                 | ' 
18998                 | ' '-------------------- pinlo
18998                 | ' 
18998                 | ' sub do_pinlo
18998                 | _do_pinlo
18998     00 4A 05 F6 | 	mov	COUNT_, #0
1899c     A8 00 A0 FD | 	call	#pushregs_
189a0     0C F0 07 F1 | 	add	ptra, #12
189a4     78 4E BF FD | 	call	#_pop
189a8     A7 FA 61 FC | 	wrlong	result1, fp
189ac     04 4E 05 F1 | 	add	fp, #4
189b0     A7 FC 61 FC | 	wrlong	result2, fp
189b4     04 4E 05 F1 | 	add	fp, #4
189b8     A7 FE 61 FC | 	wrlong	result3, fp
189bc     08 4E 85 F1 | 	sub	fp, #8
189c0     A7 12 02 F6 | 	mov	arg01, fp
189c4     3C 50 BF FD | 	call	#_converttoint
189c8     58 FA 61 FD | 	drvl	result1
189cc     A7 F0 03 F6 | 	mov	ptra, fp
189d0     B2 00 A0 FD | 	call	#popregs_
189d4                 | _do_pinlo_ret
189d4     2D 00 64 FD | 	ret
189d8                 | 
189d8                 | ' 
189d8                 | ' '-------------------- pinread
189d8                 | ' 
189d8                 | ' sub do_pinread
189d8                 | _do_pinread
189d8     00 4A 05 F6 | 	mov	COUNT_, #0
189dc     A8 00 A0 FD | 	call	#pushregs_
189e0     0C F0 07 F1 | 	add	ptra, #12
189e4     38 4E BF FD | 	call	#_pop
189e8     A7 FA 61 FC | 	wrlong	result1, fp
189ec     04 4E 05 F1 | 	add	fp, #4
189f0     A7 FC 61 FC | 	wrlong	result2, fp
189f4     04 4E 05 F1 | 	add	fp, #4
189f8     A7 FE 61 FC | 	wrlong	result3, fp
189fc     08 4E 85 F1 | 	sub	fp, #8
18a00     A7 12 02 F6 | 	mov	arg01, fp
18a04     FC 4F BF FD | 	call	#_converttoint
18a08     FD 12 02 F6 | 	mov	arg01, result1
18a0c     20 12 CE F7 | 	test	arg01, #32 wz
18a10     FF FB 01 56 |  if_ne	mov	result1, inb
18a14     FE FB 01 A6 |  if_e	mov	result1, ina
18a18     09 FB 41 F0 | 	shr	result1, arg01
18a1c     06 12 46 F0 | 	shr	arg01, #6
18a20     09 FB 41 F7 | 	zerox	result1, arg01
18a24     52 00 00 FF 
18a28     68 E5 05 F1 | 	add	objptr, ##42344
18a2c     F2 FA 61 FC | 	wrlong	result1, objptr
18a30     52 00 00 FF 
18a34     68 E5 85 F1 | 	sub	objptr, ##42344
18a38     08 4E 05 F1 | 	add	fp, #8
18a3c     A7 3A 68 FC | 	wrlong	#29, fp
18a40     08 4E 85 F1 | 	sub	fp, #8
18a44     A7 08 68 FC | 	wrlong	#4, fp
18a48     A7 12 02 F6 | 	mov	arg01, fp
18a4c     68 4E BF FD | 	call	#_push
18a50     A7 F0 03 F6 | 	mov	ptra, fp
18a54     B2 00 A0 FD | 	call	#popregs_
18a58                 | _do_pinread_ret
18a58     2D 00 64 FD | 	ret
18a5c                 | 
18a5c                 | ' 
18a5c                 | ' '-------------------- pinstart
18a5c                 | ' 
18a5c                 | ' sub do_pinstart
18a5c                 | _do_pinstart
18a5c     03 4A 05 F6 | 	mov	COUNT_, #3
18a60     A8 00 A0 FD | 	call	#pushregs_
18a64     30 F0 07 F1 | 	add	ptra, #48
18a68     B4 4D BF FD | 	call	#_pop
18a6c     FD 16 02 F6 | 	mov	arg03, result1
18a70     FE 14 02 F6 | 	mov	arg02, result2
18a74     FF 18 02 F6 | 	mov	arg04, result3
18a78     A7 16 62 FC | 	wrlong	arg03, fp
18a7c     04 4E 05 F1 | 	add	fp, #4
18a80     A7 14 62 FC | 	wrlong	arg02, fp
18a84     04 4E 05 F1 | 	add	fp, #4
18a88     A7 18 62 FC | 	wrlong	arg04, fp
18a8c     08 4E 85 F1 | 	sub	fp, #8
18a90     8C 4D BF FD | 	call	#_pop
18a94     FD 16 02 F6 | 	mov	arg03, result1
18a98     FE 14 02 F6 | 	mov	arg02, result2
18a9c     FF 18 02 F6 | 	mov	arg04, result3
18aa0     0C 4E 05 F1 | 	add	fp, #12
18aa4     A7 16 62 FC | 	wrlong	arg03, fp
18aa8     04 4E 05 F1 | 	add	fp, #4
18aac     A7 14 62 FC | 	wrlong	arg02, fp
18ab0     04 4E 05 F1 | 	add	fp, #4
18ab4     A7 18 62 FC | 	wrlong	arg04, fp
18ab8     14 4E 85 F1 | 	sub	fp, #20
18abc     60 4D BF FD | 	call	#_pop
18ac0     FD 16 02 F6 | 	mov	arg03, result1
18ac4     FE 14 02 F6 | 	mov	arg02, result2
18ac8     FF 18 02 F6 | 	mov	arg04, result3
18acc     18 4E 05 F1 | 	add	fp, #24
18ad0     A7 16 62 FC | 	wrlong	arg03, fp
18ad4     04 4E 05 F1 | 	add	fp, #4
18ad8     A7 14 62 FC | 	wrlong	arg02, fp
18adc     04 4E 05 F1 | 	add	fp, #4
18ae0     A7 18 62 FC | 	wrlong	arg04, fp
18ae4     20 4E 85 F1 | 	sub	fp, #32
18ae8     34 4D BF FD | 	call	#_pop
18aec     FF 16 02 F6 | 	mov	arg03, result3
18af0     24 4E 05 F1 | 	add	fp, #36
18af4     A7 FA 61 FC | 	wrlong	result1, fp
18af8     04 4E 05 F1 | 	add	fp, #4
18afc     A7 FC 61 FC | 	wrlong	result2, fp
18b00     04 4E 05 F1 | 	add	fp, #4
18b04     A7 16 62 FC | 	wrlong	arg03, fp
18b08     08 4E 85 F1 | 	sub	fp, #8
18b0c     A7 12 02 F6 | 	mov	arg01, fp
18b10     24 4E 85 F1 | 	sub	fp, #36
18b14     EC 4E BF FD | 	call	#_converttoint
18b18     FD 26 02 F6 | 	mov	local01, result1
18b1c     18 4E 05 F1 | 	add	fp, #24
18b20     A7 12 02 F6 | 	mov	arg01, fp
18b24     18 4E 85 F1 | 	sub	fp, #24
18b28     D8 4E BF FD | 	call	#_converttoint
18b2c     FD 28 02 F6 | 	mov	local02, result1
18b30     0C 4E 05 F1 | 	add	fp, #12
18b34     A7 12 02 F6 | 	mov	arg01, fp
18b38     0C 4E 85 F1 | 	sub	fp, #12
18b3c     C4 4E BF FD | 	call	#_converttoint
18b40     FD 2A 02 F6 | 	mov	local03, result1
18b44     A7 12 02 F6 | 	mov	arg01, fp
18b48     B8 4E BF FD | 	call	#_converttoint
18b4c     40 26 62 FD | 	dirl	local01
18b50     13 29 02 FC | 	wrpin	local02, local01
18b54     13 2B 12 FC | 	wxpin	local03, local01
18b58     13 FB 21 FC | 	wypin	result1, local01
18b5c     41 26 62 FD | 	dirh	local01
18b60     A7 F0 03 F6 | 	mov	ptra, fp
18b64     B2 00 A0 FD | 	call	#popregs_
18b68                 | _do_pinstart_ret
18b68     2D 00 64 FD | 	ret
18b6c                 | 
18b6c                 | ' 
18b6c                 | ' '-------------------- pintoggle
18b6c                 | ' 
18b6c                 | ' sub do_pintoggle
18b6c                 | _do_pintoggle
18b6c     00 4A 05 F6 | 	mov	COUNT_, #0
18b70     A8 00 A0 FD | 	call	#pushregs_
18b74     0C F0 07 F1 | 	add	ptra, #12
18b78     A4 4C BF FD | 	call	#_pop
18b7c     A7 FA 61 FC | 	wrlong	result1, fp
18b80     04 4E 05 F1 | 	add	fp, #4
18b84     A7 FC 61 FC | 	wrlong	result2, fp
18b88     04 4E 05 F1 | 	add	fp, #4
18b8c     A7 FE 61 FC | 	wrlong	result3, fp
18b90     08 4E 85 F1 | 	sub	fp, #8
18b94     A7 12 02 F6 | 	mov	arg01, fp
18b98     68 4E BF FD | 	call	#_converttoint
18b9c     5F FA 61 FD | 	drvnot	result1
18ba0     A7 F0 03 F6 | 	mov	ptra, fp
18ba4     B2 00 A0 FD | 	call	#popregs_
18ba8                 | _do_pintoggle_ret
18ba8     2D 00 64 FD | 	ret
18bac                 | 
18bac                 | ' 
18bac                 | ' '-------------------- pinwrite
18bac                 | ' 
18bac                 | ' sub do_pinwrite
18bac                 | _do_pinwrite
18bac     01 4A 05 F6 | 	mov	COUNT_, #1
18bb0     A8 00 A0 FD | 	call	#pushregs_
18bb4     18 F0 07 F1 | 	add	ptra, #24
18bb8     64 4C BF FD | 	call	#_pop
18bbc     FD 14 02 F6 | 	mov	arg02, result1
18bc0     FE 12 02 F6 | 	mov	arg01, result2
18bc4     FF 26 02 F6 | 	mov	local01, result3
18bc8     A7 14 62 FC | 	wrlong	arg02, fp
18bcc     04 4E 05 F1 | 	add	fp, #4
18bd0     A7 12 62 FC | 	wrlong	arg01, fp
18bd4     04 4E 05 F1 | 	add	fp, #4
18bd8     A7 26 62 FC | 	wrlong	local01, fp
18bdc     08 4E 85 F1 | 	sub	fp, #8
18be0     3C 4C BF FD | 	call	#_pop
18be4     FF 26 02 F6 | 	mov	local01, result3
18be8     0C 4E 05 F1 | 	add	fp, #12
18bec     A7 FA 61 FC | 	wrlong	result1, fp
18bf0     04 4E 05 F1 | 	add	fp, #4
18bf4     A7 FC 61 FC | 	wrlong	result2, fp
18bf8     04 4E 05 F1 | 	add	fp, #4
18bfc     A7 26 62 FC | 	wrlong	local01, fp
18c00     08 4E 85 F1 | 	sub	fp, #8
18c04     A7 12 02 F6 | 	mov	arg01, fp
18c08     0C 4E 85 F1 | 	sub	fp, #12
18c0c     F4 4D BF FD | 	call	#_converttoint
18c10     FD 26 02 F6 | 	mov	local01, result1
18c14     A7 12 02 F6 | 	mov	arg01, fp
18c18     E8 4D BF FD | 	call	#_converttoint
18c1c     FD 14 02 F6 | 	mov	arg02, result1
18c20     13 13 02 F6 | 	mov	arg01, local01
18c24     9C F6 B0 FD | 	call	#__system___pinwrite
18c28     A7 F0 03 F6 | 	mov	ptra, fp
18c2c     B2 00 A0 FD | 	call	#popregs_
18c30                 | _do_pinwrite_ret
18c30     2D 00 64 FD | 	ret
18c34                 | 
18c34                 | ' 
18c34                 | ' '-------------------- play
18c34                 | ' 
18c34                 | ' sub do_play
18c34                 | _do_play
18c34     08 4A 05 F6 | 	mov	COUNT_, #8
18c38     A8 00 A0 FD | 	call	#pushregs_
18c3c     84 F0 07 F1 | 	add	ptra, #132
18c40     70 4E 05 F1 | 	add	fp, #112
18c44     77 CC A1 FF 
18c48     A7 7C 6B FC | 	wrlong	##1134096318, fp
18c4c                 | ' speed_coeff=305.873
18c4c                 | ' 
18c4c                 | ' for i=0 to 9 : params(i)=-2.0 : next i
18c4c     6C 4E 85 F1 | 	sub	fp, #108
18c50     A7 00 68 FC | 	wrlong	#0, fp
18c54     97 18 48 FB | 	callpa	#(@LR__2001-@LR__2000)>>2,fcache_load_ptr_
18c58                 | LR__2000
18c58     A7 18 02 FB | 	rdlong	arg04, fp
18c5c     02 18 66 F0 | 	shl	arg04, #2
18c60     38 4E 05 F1 | 	add	fp, #56
18c64     A7 18 02 F1 | 	add	arg04, fp
18c68     00 00 E0 FF 
18c6c     0C 01 68 FC | 	wrlong	##-1073741824, arg04
18c70     38 4E 85 F1 | 	sub	fp, #56
18c74     A7 26 02 FB | 	rdlong	local01, fp
18c78     01 26 06 F1 | 	add	local01, #1
18c7c     A7 26 62 FC | 	wrlong	local01, fp
18c80     0A 26 56 F2 | 	cmps	local01, #10 wc
18c84     D0 FF 9F CD |  if_b	jmp	#LR__2000
18c88                 | LR__2001
18c88     04 4E 85 F1 | 	sub	fp, #4
18c8c     4A 00 00 FF 
18c90     A0 E4 05 F1 | 	add	objptr, ##38048
18c94     F2 28 02 FB | 	rdlong	local02, objptr
18c98     14 2B 02 F6 | 	mov	local03, local02
18c9c     01 2A 66 F0 | 	shl	local03, #1
18ca0     14 2B 02 F1 | 	add	local03, local02
18ca4     02 2A 66 F0 | 	shl	local03, #2
18ca8     03 00 00 FF 
18cac     04 E4 85 F1 | 	sub	objptr, ##1540
18cb0     F2 2A 02 F1 | 	add	local03, objptr
18cb4     15 2D 02 FB | 	rdlong	local04, local03
18cb8     A7 2C 62 FC | 	wrlong	local04, fp
18cbc                 | ' numpar=compiledline(lineptr_e).result.uresult
18cbc                 | ' for i=numpar to 1 step -1 
18cbc     04 4E 05 F1 | 	add	fp, #4
18cc0     A7 2C 62 FC | 	wrlong	local04, fp
18cc4     04 4E 85 F1 | 	sub	fp, #4
18cc8     47 00 00 FF 
18ccc     9C E4 85 F1 | 	sub	objptr, ##36508
18cd0                 | LR__2002
18cd0     4C 4B BF FD | 	call	#_pop
18cd4     64 4E 05 F1 | 	add	fp, #100
18cd8     A7 FA 61 FC | 	wrlong	result1, fp
18cdc     04 4E 05 F1 | 	add	fp, #4
18ce0     A7 FC 61 FC | 	wrlong	result2, fp
18ce4     04 4E 05 F1 | 	add	fp, #4
18ce8     A7 FE 61 FC | 	wrlong	result3, fp
18cec     68 4E 85 F1 | 	sub	fp, #104
18cf0     A7 2A 02 FB | 	rdlong	local03, fp
18cf4     01 2A 86 F1 | 	sub	local03, #1
18cf8     02 2A 66 F0 | 	shl	local03, #2
18cfc     38 4E 05 F1 | 	add	fp, #56
18d00     A7 2A 02 F1 | 	add	local03, fp
18d04     28 4E 05 F1 | 	add	fp, #40
18d08     A7 2E 02 F6 | 	mov	local05, fp
18d0c     17 13 02 F6 | 	mov	arg01, local05
18d10     64 4E 85 F1 | 	sub	fp, #100
18d14     A8 4D BF FD | 	call	#_converttofloat
18d18     15 FB 61 FC | 	wrlong	result1, local03
18d1c     04 4E 05 F1 | 	add	fp, #4
18d20     A7 26 02 FB | 	rdlong	local01, fp
18d24     01 26 86 F1 | 	sub	local01, #1
18d28     A7 26 62 FC | 	wrlong	local01, fp
18d2c     04 4E 85 F1 | 	sub	fp, #4
18d30     01 26 56 F2 | 	cmps	local01, #1 wc
18d34     98 FF 9F 3D |  if_ae	jmp	#LR__2002
18d38                 | ' 
18d38                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
18d38     3C 4E 05 F1 | 	add	fp, #60
18d3c     A7 12 02 FB | 	rdlong	arg01, fp
18d40     3C 4E 85 F1 | 	sub	fp, #60
18d44     00 14 06 F6 | 	mov	arg02, #0
18d48     01 16 06 F6 | 	mov	arg03, #1
18d4c     70 26 B1 FD | 	call	#__system___float_cmp
18d50     00 FA 55 F2 | 	cmps	result1, #0 wc
18d54     0C 4E 05 C1 |  if_b	add	fp, #12
18d58     A7 00 68 CC |  if_b	wrlong	#0, fp
18d5c     0C 4E 85 C1 |  if_b	sub	fp, #12
18d60     2C 00 90 CD |  if_b	jmp	#LR__2003
18d64     3C 4E 05 F1 | 	add	fp, #60
18d68     A7 12 02 FB | 	rdlong	arg01, fp
18d6c     3C 4E 85 F1 | 	sub	fp, #60
18d70     01 14 06 F6 | 	mov	arg02, #1
18d74     DC 26 B1 FD | 	call	#__system___float_tointeger
18d78     FD 26 52 F6 | 	abs	local01, result1 wc
18d7c     07 26 06 F5 | 	and	local01, #7
18d80     13 27 82 F6 | 	negc	local01, local01
18d84     0C 4E 05 F1 | 	add	fp, #12
18d88     A7 26 62 FC | 	wrlong	local01, fp
18d8c     0C 4E 85 F1 | 	sub	fp, #12
18d90                 | LR__2003
18d90                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
18d90     40 4E 05 F1 | 	add	fp, #64
18d94     A7 12 02 FB | 	rdlong	arg01, fp
18d98     40 4E 85 F1 | 	sub	fp, #64
18d9c     00 14 06 F6 | 	mov	arg02, #0
18da0     01 16 06 F6 | 	mov	arg03, #1
18da4     18 26 B1 FD | 	call	#__system___float_cmp
18da8     00 FA 55 F2 | 	cmps	result1, #0 wc
18dac     40 00 90 3D |  if_ae	jmp	#LR__2004
18db0     0C 4E 05 F1 | 	add	fp, #12
18db4     A7 28 02 FB | 	rdlong	local02, fp
18db8     14 2B 02 F6 | 	mov	local03, local02
18dbc     03 2A 66 F0 | 	shl	local03, #3
18dc0     14 2B 82 F1 | 	sub	local03, local02
18dc4     02 2A 66 F0 | 	shl	local03, #2
18dc8     14 00 00 FF 
18dcc     38 E5 05 F1 | 	add	objptr, ##10552
18dd0     F2 2A 02 F1 | 	add	local03, objptr
18dd4     15 31 02 FB | 	rdlong	local06, local03
18dd8     68 4E 05 F1 | 	add	fp, #104
18ddc     A7 30 62 FC | 	wrlong	local06, fp
18de0     74 4E 85 F1 | 	sub	fp, #116
18de4     14 00 00 FF 
18de8     38 E5 85 F1 | 	sub	objptr, ##10552
18dec     44 00 90 FD | 	jmp	#LR__2005
18df0                 | LR__2004
18df0     40 4E 05 F1 | 	add	fp, #64
18df4     A7 2C 02 FB | 	rdlong	local04, fp
18df8     34 4E 05 F1 | 	add	fp, #52
18dfc     A7 2C 62 FC | 	wrlong	local04, fp
18e00     68 4E 85 F1 | 	sub	fp, #104
18e04     A7 28 02 FB | 	rdlong	local02, fp
18e08     14 2B 02 F6 | 	mov	local03, local02
18e0c     03 2A 66 F0 | 	shl	local03, #3
18e10     14 2B 82 F1 | 	sub	local03, local02
18e14     02 2A 66 F0 | 	shl	local03, #2
18e18     14 00 00 FF 
18e1c     38 E5 05 F1 | 	add	objptr, ##10552
18e20     F2 2A 02 F1 | 	add	local03, objptr
18e24     0C 4E 85 F1 | 	sub	fp, #12
18e28     15 2D 62 FC | 	wrlong	local04, local03
18e2c     14 00 00 FF 
18e30     38 E5 85 F1 | 	sub	objptr, ##10552
18e34                 | LR__2005
18e34                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
18e34     44 4E 05 F1 | 	add	fp, #68
18e38     A7 12 02 FB | 	rdlong	arg01, fp
18e3c     44 4E 85 F1 | 	sub	fp, #68
18e40     00 14 06 F6 | 	mov	arg02, #0
18e44     01 16 06 F6 | 	mov	arg03, #1
18e48     74 25 B1 FD | 	call	#__system___float_cmp
18e4c     00 FA 55 F2 | 	cmps	result1, #0 wc
18e50     24 00 90 CD |  if_b	jmp	#LR__2006
18e54     44 4E 05 F1 | 	add	fp, #68
18e58     A7 12 02 FB | 	rdlong	arg01, fp
18e5c     44 4E 85 F1 | 	sub	fp, #68
18e60     20 0E 23 FF 
18e64     00 14 06 F6 | 	mov	arg02, ##1176256512
18e68     01 16 66 F6 | 	neg	arg03, #1
18e6c     50 25 B1 FD | 	call	#__system___float_cmp
18e70     01 FA 55 F2 | 	cmps	result1, #1 wc
18e74     48 00 90 CD |  if_b	jmp	#LR__2007
18e78                 | LR__2006
18e78     0C 4E 05 F1 | 	add	fp, #12
18e7c     A7 2A 02 FB | 	rdlong	local03, fp
18e80     15 33 02 F6 | 	mov	local07, local03
18e84     03 32 66 F0 | 	shl	local07, #3
18e88     15 33 82 F1 | 	sub	local07, local03
18e8c     02 32 66 F0 | 	shl	local07, #2
18e90     14 00 00 FF 
18e94     38 E5 05 F1 | 	add	objptr, ##10552
18e98     F2 32 02 F1 | 	add	local07, objptr
18e9c     06 32 06 F1 | 	add	local07, #6
18ea0     19 2F E2 FA | 	rdword	local05, local07
18ea4     17 2D 32 F9 | 	getword	local04, local05, #0
18ea8     1C 4E 05 F1 | 	add	fp, #28
18eac     A7 2C 62 FC | 	wrlong	local04, fp
18eb0     28 4E 85 F1 | 	sub	fp, #40
18eb4     14 00 00 FF 
18eb8     38 E5 85 F1 | 	sub	objptr, ##10552
18ebc     54 00 90 FD | 	jmp	#LR__2008
18ec0                 | LR__2007
18ec0     44 4E 05 F1 | 	add	fp, #68
18ec4     A7 12 02 FB | 	rdlong	arg01, fp
18ec8     44 4E 85 F1 | 	sub	fp, #68
18ecc     01 14 06 F6 | 	mov	arg02, #1
18ed0     80 25 B1 FD | 	call	#__system___float_tointeger
18ed4     28 4E 05 F1 | 	add	fp, #40
18ed8     A7 FA 61 FC | 	wrlong	result1, fp
18edc     1C 4E 85 F1 | 	sub	fp, #28
18ee0     A7 28 02 FB | 	rdlong	local02, fp
18ee4     14 2B 02 F6 | 	mov	local03, local02
18ee8     03 2A 66 F0 | 	shl	local03, #3
18eec     14 2B 82 F1 | 	sub	local03, local02
18ef0     02 2A 66 F0 | 	shl	local03, #2
18ef4     14 00 00 FF 
18ef8     38 E5 05 F1 | 	add	objptr, ##10552
18efc     F2 2A 02 F1 | 	add	local03, objptr
18f00     0C 4E 85 F1 | 	sub	fp, #12
18f04     06 2A 06 F1 | 	add	local03, #6
18f08     15 FB 51 FC | 	wrword	result1, local03
18f0c     14 00 00 FF 
18f10     38 E5 85 F1 | 	sub	objptr, ##10552
18f14                 | LR__2008
18f14                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
18f14     48 4E 05 F1 | 	add	fp, #72
18f18     A7 12 02 FB | 	rdlong	arg01, fp
18f1c     48 4E 85 F1 | 	sub	fp, #72
18f20     00 14 06 F6 | 	mov	arg02, #0
18f24     01 16 06 F6 | 	mov	arg03, #1
18f28     94 24 B1 FD | 	call	#__system___float_cmp
18f2c     00 FA 55 F2 | 	cmps	result1, #0 wc
18f30     24 00 90 CD |  if_b	jmp	#LR__2009
18f34     48 4E 05 F1 | 	add	fp, #72
18f38     A7 12 02 FB | 	rdlong	arg01, fp
18f3c     48 4E 85 F1 | 	sub	fp, #72
18f40     89 C1 20 FF 
18f44     6F 14 06 F6 | 	mov	arg02, ##1099108975
18f48     01 16 66 F6 | 	neg	arg03, #1
18f4c     70 24 B1 FD | 	call	#__system___float_cmp
18f50     01 FA 55 F2 | 	cmps	result1, #1 wc
18f54     44 00 90 CD |  if_b	jmp	#LR__2010
18f58                 | LR__2009
18f58     0C 4E 05 F1 | 	add	fp, #12
18f5c     A7 28 02 FB | 	rdlong	local02, fp
18f60     14 2B 02 F6 | 	mov	local03, local02
18f64     03 2A 66 F0 | 	shl	local03, #3
18f68     14 2B 82 F1 | 	sub	local03, local02
18f6c     02 2A 66 F0 | 	shl	local03, #2
18f70     14 00 00 FF 
18f74     38 E5 05 F1 | 	add	objptr, ##10552
18f78     F2 2A 02 F1 | 	add	local03, objptr
18f7c     0C 2A 06 F1 | 	add	local03, #12
18f80     15 31 02 FB | 	rdlong	local06, local03
18f84     70 4E 05 F1 | 	add	fp, #112
18f88     A7 30 62 FC | 	wrlong	local06, fp
18f8c     7C 4E 85 F1 | 	sub	fp, #124
18f90     14 00 00 FF 
18f94     38 E5 85 F1 | 	sub	objptr, ##10552
18f98     48 00 90 FD | 	jmp	#LR__2011
18f9c                 | LR__2010
18f9c     48 4E 05 F1 | 	add	fp, #72
18fa0     A7 2C 02 FB | 	rdlong	local04, fp
18fa4     34 4E 05 F1 | 	add	fp, #52
18fa8     A7 2C 62 FC | 	wrlong	local04, fp
18fac     70 4E 85 F1 | 	sub	fp, #112
18fb0     A7 28 02 FB | 	rdlong	local02, fp
18fb4     14 2B 02 F6 | 	mov	local03, local02
18fb8     03 2A 66 F0 | 	shl	local03, #3
18fbc     14 2B 82 F1 | 	sub	local03, local02
18fc0     02 2A 66 F0 | 	shl	local03, #2
18fc4     14 00 00 FF 
18fc8     38 E5 05 F1 | 	add	objptr, ##10552
18fcc     F2 2A 02 F1 | 	add	local03, objptr
18fd0     0C 4E 85 F1 | 	sub	fp, #12
18fd4     0C 2A 06 F1 | 	add	local03, #12
18fd8     15 2D 62 FC | 	wrlong	local04, local03
18fdc     14 00 00 FF 
18fe0     38 E5 85 F1 | 	sub	objptr, ##10552
18fe4                 | LR__2011
18fe4                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
18fe4     4C 4E 05 F1 | 	add	fp, #76
18fe8     A7 12 02 FB | 	rdlong	arg01, fp
18fec     4C 4E 85 F1 | 	sub	fp, #76
18ff0     00 14 06 F6 | 	mov	arg02, #0
18ff4     01 16 06 F6 | 	mov	arg03, #1
18ff8     C4 23 B1 FD | 	call	#__system___float_cmp
18ffc     00 FA 55 F2 | 	cmps	result1, #0 wc
19000     24 00 90 CD |  if_b	jmp	#LR__2012
19004     4C 4E 05 F1 | 	add	fp, #76
19008     A7 12 02 FB | 	rdlong	arg01, fp
1900c     4C 4E 85 F1 | 	sub	fp, #76
19010     00 00 21 FF 
19014     00 14 06 F6 | 	mov	arg02, ##1107296256
19018     01 16 66 F6 | 	neg	arg03, #1
1901c     A0 23 B1 FD | 	call	#__system___float_cmp
19020     01 FA 55 F2 | 	cmps	result1, #1 wc
19024     48 00 90 CD |  if_b	jmp	#LR__2013
19028                 | LR__2012
19028     0C 4E 05 F1 | 	add	fp, #12
1902c     A7 2A 02 FB | 	rdlong	local03, fp
19030     15 33 02 F6 | 	mov	local07, local03
19034     03 32 66 F0 | 	shl	local07, #3
19038     15 33 82 F1 | 	sub	local07, local03
1903c     02 32 66 F0 | 	shl	local07, #2
19040     14 00 00 FF 
19044     38 E5 05 F1 | 	add	objptr, ##10552
19048     F2 32 02 F1 | 	add	local07, objptr
1904c     04 32 06 F1 | 	add	local07, #4
19050     19 2F C2 FA | 	rdbyte	local05, local07
19054     17 2D E2 F8 | 	getbyte	local04, local05, #0
19058     14 4E 05 F1 | 	add	fp, #20
1905c     A7 2C 62 FC | 	wrlong	local04, fp
19060     20 4E 85 F1 | 	sub	fp, #32
19064     14 00 00 FF 
19068     38 E5 85 F1 | 	sub	objptr, ##10552
1906c     54 00 90 FD | 	jmp	#LR__2014
19070                 | LR__2013
19070     4C 4E 05 F1 | 	add	fp, #76
19074     A7 12 02 FB | 	rdlong	arg01, fp
19078     4C 4E 85 F1 | 	sub	fp, #76
1907c     01 14 06 F6 | 	mov	arg02, #1
19080     D0 23 B1 FD | 	call	#__system___float_tointeger
19084     20 4E 05 F1 | 	add	fp, #32
19088     A7 FA 61 FC | 	wrlong	result1, fp
1908c     14 4E 85 F1 | 	sub	fp, #20
19090     A7 28 02 FB | 	rdlong	local02, fp
19094     14 2B 02 F6 | 	mov	local03, local02
19098     03 2A 66 F0 | 	shl	local03, #3
1909c     14 2B 82 F1 | 	sub	local03, local02
190a0     02 2A 66 F0 | 	shl	local03, #2
190a4     14 00 00 FF 
190a8     38 E5 05 F1 | 	add	objptr, ##10552
190ac     F2 2A 02 F1 | 	add	local03, objptr
190b0     0C 4E 85 F1 | 	sub	fp, #12
190b4     04 2A 06 F1 | 	add	local03, #4
190b8     15 FB 41 FC | 	wrbyte	result1, local03
190bc     14 00 00 FF 
190c0     38 E5 85 F1 | 	sub	objptr, ##10552
190c4                 | LR__2014
190c4                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
190c4     50 4E 05 F1 | 	add	fp, #80
190c8     A7 12 02 FB | 	rdlong	arg01, fp
190cc     50 4E 85 F1 | 	sub	fp, #80
190d0     00 14 06 F6 | 	mov	arg02, #0
190d4     01 16 06 F6 | 	mov	arg03, #1
190d8     E4 22 B1 FD | 	call	#__system___float_cmp
190dc     00 FA 55 F2 | 	cmps	result1, #0 wc
190e0     24 00 90 CD |  if_b	jmp	#LR__2015
190e4     50 4E 05 F1 | 	add	fp, #80
190e8     A7 12 02 FB | 	rdlong	arg01, fp
190ec     50 4E 85 F1 | 	sub	fp, #80
190f0     00 80 20 FF 
190f4     00 14 06 F6 | 	mov	arg02, ##1090519040
190f8     01 16 66 F6 | 	neg	arg03, #1
190fc     C0 22 B1 FD | 	call	#__system___float_cmp
19100     01 FA 55 F2 | 	cmps	result1, #1 wc
19104     48 00 90 CD |  if_b	jmp	#LR__2016
19108                 | LR__2015
19108     0C 4E 05 F1 | 	add	fp, #12
1910c     A7 2A 02 FB | 	rdlong	local03, fp
19110     15 33 02 F6 | 	mov	local07, local03
19114     03 32 66 F0 | 	shl	local07, #3
19118     15 33 82 F1 | 	sub	local07, local03
1911c     02 32 66 F0 | 	shl	local07, #2
19120     14 00 00 FF 
19124     38 E5 05 F1 | 	add	objptr, ##10552
19128     F2 32 02 F1 | 	add	local07, objptr
1912c     05 32 06 F1 | 	add	local07, #5
19130     19 2F C2 FA | 	rdbyte	local05, local07
19134     17 2D E2 F8 | 	getbyte	local04, local05, #0
19138     18 4E 05 F1 | 	add	fp, #24
1913c     A7 2C 62 FC | 	wrlong	local04, fp
19140     24 4E 85 F1 | 	sub	fp, #36
19144     14 00 00 FF 
19148     38 E5 85 F1 | 	sub	objptr, ##10552
1914c     54 00 90 FD | 	jmp	#LR__2017
19150                 | LR__2016
19150     50 4E 05 F1 | 	add	fp, #80
19154     A7 12 02 FB | 	rdlong	arg01, fp
19158     50 4E 85 F1 | 	sub	fp, #80
1915c     01 14 06 F6 | 	mov	arg02, #1
19160     F0 22 B1 FD | 	call	#__system___float_tointeger
19164     24 4E 05 F1 | 	add	fp, #36
19168     A7 FA 61 FC | 	wrlong	result1, fp
1916c     18 4E 85 F1 | 	sub	fp, #24
19170     A7 28 02 FB | 	rdlong	local02, fp
19174     14 2B 02 F6 | 	mov	local03, local02
19178     03 2A 66 F0 | 	shl	local03, #3
1917c     14 2B 82 F1 | 	sub	local03, local02
19180     02 2A 66 F0 | 	shl	local03, #2
19184     14 00 00 FF 
19188     38 E5 05 F1 | 	add	objptr, ##10552
1918c     F2 2A 02 F1 | 	add	local03, objptr
19190     0C 4E 85 F1 | 	sub	fp, #12
19194     05 2A 06 F1 | 	add	local03, #5
19198     15 FB 41 FC | 	wrbyte	result1, local03
1919c     14 00 00 FF 
191a0     38 E5 85 F1 | 	sub	objptr, ##10552
191a4                 | LR__2017
191a4                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
191a4     54 4E 05 F1 | 	add	fp, #84
191a8     A7 12 02 FB | 	rdlong	arg01, fp
191ac     54 4E 85 F1 | 	sub	fp, #84
191b0     00 14 06 F6 | 	mov	arg02, #0
191b4     01 16 06 F6 | 	mov	arg03, #1
191b8     04 22 B1 FD | 	call	#__system___float_cmp
191bc     00 FA 55 F2 | 	cmps	result1, #0 wc
191c0     24 00 90 CD |  if_b	jmp	#LR__2018
191c4     54 4E 05 F1 | 	add	fp, #84
191c8     A7 12 02 FB | 	rdlong	arg01, fp
191cc     54 4E 85 F1 | 	sub	fp, #84
191d0     00 3D 22 FF 
191d4     00 14 06 F6 | 	mov	arg02, ##1148846080
191d8     01 16 66 F6 | 	neg	arg03, #1
191dc     E0 21 B1 FD | 	call	#__system___float_cmp
191e0     01 FA 55 F2 | 	cmps	result1, #1 wc
191e4     44 00 90 CD |  if_b	jmp	#LR__2019
191e8                 | LR__2018
191e8     0C 4E 05 F1 | 	add	fp, #12
191ec     A7 28 02 FB | 	rdlong	local02, fp
191f0     14 2B 02 F6 | 	mov	local03, local02
191f4     03 2A 66 F0 | 	shl	local03, #3
191f8     14 2B 82 F1 | 	sub	local03, local02
191fc     02 2A 66 F0 | 	shl	local03, #2
19200     14 00 00 FF 
19204     38 E5 05 F1 | 	add	objptr, ##10552
19208     F2 2A 02 F1 | 	add	local03, objptr
1920c     08 2A 06 F1 | 	add	local03, #8
19210     15 31 02 FB | 	rdlong	local06, local03
19214     74 4E 05 F1 | 	add	fp, #116
19218     A7 30 62 FC | 	wrlong	local06, fp
1921c     80 4E 85 F1 | 	sub	fp, #128
19220     14 00 00 FF 
19224     38 E5 85 F1 | 	sub	objptr, ##10552
19228     48 00 90 FD | 	jmp	#LR__2020
1922c                 | LR__2019
1922c     54 4E 05 F1 | 	add	fp, #84
19230     A7 30 02 FB | 	rdlong	local06, fp
19234     2C 4E 05 F1 | 	add	fp, #44
19238     A7 30 62 FC | 	wrlong	local06, fp
1923c     74 4E 85 F1 | 	sub	fp, #116
19240     A7 28 02 FB | 	rdlong	local02, fp
19244     14 2B 02 F6 | 	mov	local03, local02
19248     03 2A 66 F0 | 	shl	local03, #3
1924c     14 2B 82 F1 | 	sub	local03, local02
19250     02 2A 66 F0 | 	shl	local03, #2
19254     14 00 00 FF 
19258     38 E5 05 F1 | 	add	objptr, ##10552
1925c     F2 2A 02 F1 | 	add	local03, objptr
19260     0C 4E 85 F1 | 	sub	fp, #12
19264     08 2A 06 F1 | 	add	local03, #8
19268     15 31 62 FC | 	wrlong	local06, local03
1926c     14 00 00 FF 
19270     38 E5 85 F1 | 	sub	objptr, ##10552
19274                 | LR__2020
19274                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
19274     58 4E 05 F1 | 	add	fp, #88
19278     A7 12 02 FB | 	rdlong	arg01, fp
1927c     58 4E 85 F1 | 	sub	fp, #88
19280     00 C0 5F FF 
19284     00 14 06 F6 | 	mov	arg02, ##-1082130432
19288     01 16 06 F6 | 	mov	arg03, #1
1928c     30 21 B1 FD | 	call	#__system___float_cmp
19290     00 FA 55 F2 | 	cmps	result1, #0 wc
19294     24 00 90 CD |  if_b	jmp	#LR__2021
19298     58 4E 05 F1 | 	add	fp, #88
1929c     A7 12 02 FB | 	rdlong	arg01, fp
192a0     58 4E 85 F1 | 	sub	fp, #88
192a4     00 C0 1F FF 
192a8     00 14 06 F6 | 	mov	arg02, ##1065353216
192ac     01 16 66 F6 | 	neg	arg03, #1
192b0     0C 21 B1 FD | 	call	#__system___float_cmp
192b4     01 FA 55 F2 | 	cmps	result1, #1 wc
192b8     44 00 90 CD |  if_b	jmp	#LR__2022
192bc                 | LR__2021
192bc     0C 4E 05 F1 | 	add	fp, #12
192c0     A7 28 02 FB | 	rdlong	local02, fp
192c4     14 2B 02 F6 | 	mov	local03, local02
192c8     03 2A 66 F0 | 	shl	local03, #3
192cc     14 2B 82 F1 | 	sub	local03, local02
192d0     02 2A 66 F0 | 	shl	local03, #2
192d4     14 00 00 FF 
192d8     38 E5 05 F1 | 	add	objptr, ##10552
192dc     F2 2A 02 F1 | 	add	local03, objptr
192e0     10 2A 06 F1 | 	add	local03, #16
192e4     15 31 02 FB | 	rdlong	local06, local03
192e8     6C 4E 05 F1 | 	add	fp, #108
192ec     A7 30 62 FC | 	wrlong	local06, fp
192f0     78 4E 85 F1 | 	sub	fp, #120
192f4     14 00 00 FF 
192f8     38 E5 85 F1 | 	sub	objptr, ##10552
192fc     48 00 90 FD | 	jmp	#LR__2023
19300                 | LR__2022
19300     58 4E 05 F1 | 	add	fp, #88
19304     A7 30 02 FB | 	rdlong	local06, fp
19308     20 4E 05 F1 | 	add	fp, #32
1930c     A7 30 62 FC | 	wrlong	local06, fp
19310     6C 4E 85 F1 | 	sub	fp, #108
19314     A7 28 02 FB | 	rdlong	local02, fp
19318     14 2B 02 F6 | 	mov	local03, local02
1931c     03 2A 66 F0 | 	shl	local03, #3
19320     14 2B 82 F1 | 	sub	local03, local02
19324     02 2A 66 F0 | 	shl	local03, #2
19328     14 00 00 FF 
1932c     38 E5 05 F1 | 	add	objptr, ##10552
19330     F2 2A 02 F1 | 	add	local03, objptr
19334     0C 4E 85 F1 | 	sub	fp, #12
19338     10 2A 06 F1 | 	add	local03, #16
1933c     15 31 62 FC | 	wrlong	local06, local03
19340     14 00 00 FF 
19344     38 E5 85 F1 | 	sub	objptr, ##10552
19348                 | LR__2023
19348                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
19348     5C 4E 05 F1 | 	add	fp, #92
1934c     A7 12 02 FB | 	rdlong	arg01, fp
19350     5C 4E 85 F1 | 	sub	fp, #92
19354     00 14 06 F6 | 	mov	arg02, #0
19358     01 16 06 F6 | 	mov	arg03, #1
1935c     60 20 B1 FD | 	call	#__system___float_cmp
19360     00 FA 55 F2 | 	cmps	result1, #0 wc
19364     24 00 90 CD |  if_b	jmp	#LR__2024
19368     5C 4E 05 F1 | 	add	fp, #92
1936c     A7 12 02 FB | 	rdlong	arg01, fp
19370     5C 4E 85 F1 | 	sub	fp, #92
19374     80 BF 21 FF 
19378     00 14 06 F6 | 	mov	arg02, ##1132396544
1937c     01 16 66 F6 | 	neg	arg03, #1
19380     3C 20 B1 FD | 	call	#__system___float_cmp
19384     01 FA 55 F2 | 	cmps	result1, #1 wc
19388     44 00 90 CD |  if_b	jmp	#LR__2025
1938c                 | LR__2024
1938c     0C 4E 05 F1 | 	add	fp, #12
19390     A7 2A 02 FB | 	rdlong	local03, fp
19394     15 33 02 F6 | 	mov	local07, local03
19398     03 32 66 F0 | 	shl	local07, #3
1939c     15 33 82 F1 | 	sub	local07, local03
193a0     02 32 66 F0 | 	shl	local07, #2
193a4     14 00 00 FF 
193a8     38 E5 05 F1 | 	add	objptr, ##10552
193ac     F2 32 02 F1 | 	add	local07, objptr
193b0     14 32 06 F1 | 	add	local07, #20
193b4     19 2D E2 FA | 	rdword	local04, local07
193b8     20 4E 05 F1 | 	add	fp, #32
193bc     A7 2C 62 FC | 	wrlong	local04, fp
193c0     2C 4E 85 F1 | 	sub	fp, #44
193c4     14 00 00 FF 
193c8     38 E5 85 F1 | 	sub	objptr, ##10552
193cc     54 00 90 FD | 	jmp	#LR__2026
193d0                 | LR__2025
193d0     5C 4E 05 F1 | 	add	fp, #92
193d4     A7 12 02 FB | 	rdlong	arg01, fp
193d8     5C 4E 85 F1 | 	sub	fp, #92
193dc     01 14 06 F6 | 	mov	arg02, #1
193e0     70 20 B1 FD | 	call	#__system___float_tointeger
193e4     2C 4E 05 F1 | 	add	fp, #44
193e8     A7 FA 61 FC | 	wrlong	result1, fp
193ec     20 4E 85 F1 | 	sub	fp, #32
193f0     A7 28 02 FB | 	rdlong	local02, fp
193f4     14 2B 02 F6 | 	mov	local03, local02
193f8     03 2A 66 F0 | 	shl	local03, #3
193fc     14 2B 82 F1 | 	sub	local03, local02
19400     02 2A 66 F0 | 	shl	local03, #2
19404     14 00 00 FF 
19408     38 E5 05 F1 | 	add	objptr, ##10552
1940c     F2 2A 02 F1 | 	add	local03, objptr
19410     0C 4E 85 F1 | 	sub	fp, #12
19414     14 2A 06 F1 | 	add	local03, #20
19418     15 FB 51 FC | 	wrword	result1, local03
1941c     14 00 00 FF 
19420     38 E5 85 F1 | 	sub	objptr, ##10552
19424                 | LR__2026
19424                 | ' if params(9)<0 orelse params(8)>255 then amode=channels(channel).amode else amode= round(params(9)) : channels(channel).amode=amode
19424     60 4E 05 F1 | 	add	fp, #96
19428     A7 12 02 FB | 	rdlong	arg01, fp
1942c     60 4E 85 F1 | 	sub	fp, #96
19430     00 14 06 F6 | 	mov	arg02, #0
19434     01 16 06 F6 | 	mov	arg03, #1
19438     84 1F B1 FD | 	call	#__system___float_cmp
1943c     00 FA 55 F2 | 	cmps	result1, #0 wc
19440     24 00 90 CD |  if_b	jmp	#LR__2027
19444     5C 4E 05 F1 | 	add	fp, #92
19448     A7 12 02 FB | 	rdlong	arg01, fp
1944c     5C 4E 85 F1 | 	sub	fp, #92
19450     80 BF 21 FF 
19454     00 14 06 F6 | 	mov	arg02, ##1132396544
19458     01 16 66 F6 | 	neg	arg03, #1
1945c     60 1F B1 FD | 	call	#__system___float_cmp
19460     01 FA 55 F2 | 	cmps	result1, #1 wc
19464     44 00 90 CD |  if_b	jmp	#LR__2028
19468                 | LR__2027
19468     0C 4E 05 F1 | 	add	fp, #12
1946c     A7 2A 02 FB | 	rdlong	local03, fp
19470     15 33 02 F6 | 	mov	local07, local03
19474     03 32 66 F0 | 	shl	local07, #3
19478     15 33 82 F1 | 	sub	local07, local03
1947c     02 32 66 F0 | 	shl	local07, #2
19480     14 00 00 FF 
19484     38 E5 05 F1 | 	add	objptr, ##10552
19488     F2 32 02 F1 | 	add	local07, objptr
1948c     16 32 06 F1 | 	add	local07, #22
19490     19 2D E2 FA | 	rdword	local04, local07
19494     2C 4E 05 F1 | 	add	fp, #44
19498     A7 2C 62 FC | 	wrlong	local04, fp
1949c     38 4E 85 F1 | 	sub	fp, #56
194a0     14 00 00 FF 
194a4     38 E5 85 F1 | 	sub	objptr, ##10552
194a8     54 00 90 FD | 	jmp	#LR__2029
194ac                 | LR__2028
194ac     60 4E 05 F1 | 	add	fp, #96
194b0     A7 12 02 FB | 	rdlong	arg01, fp
194b4     60 4E 85 F1 | 	sub	fp, #96
194b8     01 14 06 F6 | 	mov	arg02, #1
194bc     94 1F B1 FD | 	call	#__system___float_tointeger
194c0     38 4E 05 F1 | 	add	fp, #56
194c4     A7 FA 61 FC | 	wrlong	result1, fp
194c8     2C 4E 85 F1 | 	sub	fp, #44
194cc     A7 28 02 FB | 	rdlong	local02, fp
194d0     14 2B 02 F6 | 	mov	local03, local02
194d4     03 2A 66 F0 | 	shl	local03, #3
194d8     14 2B 82 F1 | 	sub	local03, local02
194dc     02 2A 66 F0 | 	shl	local03, #2
194e0     14 00 00 FF 
194e4     38 E5 05 F1 | 	add	objptr, ##10552
194e8     F2 2A 02 F1 | 	add	local03, objptr
194ec     0C 4E 85 F1 | 	sub	fp, #12
194f0     16 2A 06 F1 | 	add	local03, #22
194f4     15 FB 51 FC | 	wrword	result1, local03
194f8     14 00 00 FF 
194fc     38 E5 85 F1 | 	sub	objptr, ##10552
19500                 | LR__2029
19500                 | ' 
19500                 | ' 
19500                 | ' if amode>0 then
19500     38 4E 05 F1 | 	add	fp, #56
19504     A7 2C 02 FB | 	rdlong	local04, fp
19508     38 4E 85 F1 | 	sub	fp, #56
1950c     01 2C 56 F2 | 	cmps	local04, #1 wc
19510     08 03 90 CD |  if_b	jmp	#LR__2032
19514     74 4E 05 F1 | 	add	fp, #116
19518     A7 14 02 FB | 	rdlong	arg02, fp
1951c     74 4E 85 F1 | 	sub	fp, #116
19520     FC 16 20 FF 
19524     54 12 06 F6 | 	mov	arg01, ##1076754516
19528     34 2A B1 FD | 	call	#__system____builtin_logbase
1952c     FD 2C 02 F6 | 	mov	local04, result1
19530     1E 14 C6 F9 | 	decod	arg02, #30
19534     FC 16 20 FF 
19538     54 12 06 F6 | 	mov	arg01, ##1076754516
1953c     20 2A B1 FD | 	call	#__system____builtin_logbase
19540     FD 14 02 F6 | 	mov	arg02, result1
19544     16 13 02 F6 | 	mov	arg01, local04
19548     44 1C B1 FD | 	call	#__system___float_div
1954c     FD 12 02 F6 | 	mov	arg01, result1
19550     00 14 06 F6 | 	mov	arg02, #0
19554     FC 1E B1 FD | 	call	#__system___float_tointeger
19558     30 4E 05 F1 | 	add	fp, #48
1955c     A7 FA 61 FC | 	wrlong	result1, fp
19560     1E 2C C6 F9 | 	decod	local04, #30
19564     FD 12 02 F6 | 	mov	arg01, result1
19568     08 4E 05 F1 | 	add	fp, #8
1956c     A7 32 02 FB | 	rdlong	local07, fp
19570     38 4E 85 F1 | 	sub	fp, #56
19574     19 13 02 F1 | 	add	arg01, local07
19578     09 13 52 F6 | 	abs	arg01, arg01 wc
1957c     1F 34 C6 C9 |  if_b	decod	local08, #31
19580     00 34 06 36 |  if_ae	mov	local08, #0
19584     00 16 B1 FD | 	call	#__system___float_fromuns
19588     1A FB 61 F5 | 	xor	result1, local08
1958c     FD 14 02 F6 | 	mov	arg02, result1
19590     16 13 02 F6 | 	mov	arg01, local04
19594     00 29 B1 FD | 	call	#__system____builtin_powf
19598     FD 12 02 F6 | 	mov	arg01, result1
1959c     01 14 06 F6 | 	mov	arg02, #1
195a0     B0 1E B1 FD | 	call	#__system___float_tointeger
195a4     10 4E 05 F1 | 	add	fp, #16
195a8     A7 FA 61 FC | 	wrlong	result1, fp
195ac                 | '   skip=round(2^(lfreq+amode))                     '''' this const + const 2 lines lower=18
195ac                 | '   if skip>32768 then i=skip/32768: skip=32768 else i=1
195ac     10 4E 85 F1 | 	sub	fp, #16
195b0     40 00 00 FF 
195b4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
195b8     30 00 90 CD |  if_b	jmp	#LR__2030
195bc     10 4E 05 F1 | 	add	fp, #16
195c0     A7 26 02 FB | 	rdlong	local01, fp
195c4     13 2D 52 F6 | 	abs	local04, local01 wc
195c8     0F 2C 46 F0 | 	shr	local04, #15
195cc     16 2D 82 F6 | 	negc	local04, local04
195d0     0C 4E 85 F1 | 	sub	fp, #12
195d4     A7 2C 62 FC | 	wrlong	local04, fp
195d8     0C 4E 05 F1 | 	add	fp, #12
195dc     40 00 80 FF 
195e0     A7 00 68 FC | 	wrlong	##32768, fp
195e4     10 4E 85 F1 | 	sub	fp, #16
195e8     0C 00 90 FD | 	jmp	#LR__2031
195ec                 | LR__2030
195ec     04 4E 05 F1 | 	add	fp, #4
195f0     A7 02 68 FC | 	wrlong	#1, fp
195f4     04 4E 85 F1 | 	sub	fp, #4
195f8                 | LR__2031
195f8     74 4E 05 F1 | 	add	fp, #116
195fc     A7 14 02 FB | 	rdlong	arg02, fp
19600     74 4E 85 F1 | 	sub	fp, #116
19604     AA 2B 25 FF 
19608     00 13 06 F6 | 	mov	arg01, ##1247237376
1960c     80 1B B1 FD | 	call	#__system___float_div
19610     FD 2C 02 F6 | 	mov	local04, result1
19614     04 4E 05 F1 | 	add	fp, #4
19618     A7 12 02 FB | 	rdlong	arg01, fp
1961c     04 4E 85 F1 | 	sub	fp, #4
19620     09 13 52 F6 | 	abs	arg01, arg01 wc
19624     1F 34 C6 C9 |  if_b	decod	local08, #31
19628     00 34 06 36 |  if_ae	mov	local08, #0
1962c     58 15 B1 FD | 	call	#__system___float_fromuns
19630     1A FB 61 F5 | 	xor	result1, local08
19634     FD 26 02 F6 | 	mov	local01, result1
19638     1E 28 C6 F9 | 	decod	local02, #30
1963c     12 12 06 F6 | 	mov	arg01, #18
19640     38 4E 05 F1 | 	add	fp, #56
19644     A7 30 02 FB | 	rdlong	local06, fp
19648     18 13 82 F1 | 	sub	arg01, local06
1964c     08 4E 85 F1 | 	sub	fp, #8
19650     A7 32 02 FB | 	rdlong	local07, fp
19654     30 4E 85 F1 | 	sub	fp, #48
19658     19 13 82 F1 | 	sub	arg01, local07
1965c     09 13 52 F6 | 	abs	arg01, arg01 wc
19660     1F 34 C6 C9 |  if_b	decod	local08, #31
19664     00 34 06 36 |  if_ae	mov	local08, #0
19668     1C 15 B1 FD | 	call	#__system___float_fromuns
1966c     1A FB 61 F5 | 	xor	result1, local08
19670     FD 14 02 F6 | 	mov	arg02, result1
19674     14 13 02 F6 | 	mov	arg01, local02
19678     1C 28 B1 FD | 	call	#__system____builtin_powf
1967c     FD 14 02 F6 | 	mov	arg02, result1
19680     13 13 02 F6 | 	mov	arg01, local01
19684     04 19 B1 FD | 	call	#__system___float_mul
19688     FD 14 02 F6 | 	mov	arg02, result1
1968c     16 13 02 F6 | 	mov	arg01, local04
19690     FC 1A B1 FD | 	call	#__system___float_div
19694     FD 12 02 F6 | 	mov	arg01, result1
19698     01 14 06 F6 | 	mov	arg02, #1
1969c     B4 1D B1 FD | 	call	#__system___float_tointeger
196a0     34 4E 05 F1 | 	add	fp, #52
196a4     A7 FA 61 FC | 	wrlong	result1, fp
196a8     28 4E 85 F1 | 	sub	fp, #40
196ac     A7 28 02 FB | 	rdlong	local02, fp
196b0     14 2B 02 F6 | 	mov	local03, local02
196b4     03 2A 66 F0 | 	shl	local03, #3
196b8     14 2B 82 F1 | 	sub	local03, local02
196bc     02 2A 66 F0 | 	shl	local03, #2
196c0     14 00 00 FF 
196c4     38 E5 05 F1 | 	add	objptr, ##10552
196c8     F2 2A 02 F1 | 	add	local03, objptr
196cc     AA 2B 25 FF 
196d0     00 31 06 F6 | 	mov	local06, ##1247237376
196d4     0C 4E 85 F1 | 	sub	fp, #12
196d8     14 00 00 FF 
196dc     38 E5 85 F1 | 	sub	objptr, ##10552
196e0     FD 12 52 F6 | 	abs	arg01, result1 wc
196e4     1F 34 C6 C9 |  if_b	decod	local08, #31
196e8     00 34 06 36 |  if_ae	mov	local08, #0
196ec     98 14 B1 FD | 	call	#__system___float_fromuns
196f0     1A FB 61 F5 | 	xor	result1, local08
196f4     FD 14 02 F6 | 	mov	arg02, result1
196f8     18 13 02 F6 | 	mov	arg01, local06
196fc     90 1A B1 FD | 	call	#__system___float_div
19700     FD 30 02 F6 | 	mov	local06, result1
19704     10 4E 05 F1 | 	add	fp, #16
19708     A7 12 02 FB | 	rdlong	arg01, fp
1970c     10 4E 85 F1 | 	sub	fp, #16
19710     09 13 52 F6 | 	abs	arg01, arg01 wc
19714     1F 34 C6 C9 |  if_b	decod	local08, #31
19718     00 34 06 36 |  if_ae	mov	local08, #0
1971c     68 14 B1 FD | 	call	#__system___float_fromuns
19720     1A FB 61 F5 | 	xor	result1, local08
19724     FD 12 02 F6 | 	mov	arg01, result1
19728     00 40 24 FF 
1972c     00 14 06 F6 | 	mov	arg02, ##1216348160
19730     5C 1A B1 FD | 	call	#__system___float_div
19734     FD 14 02 F6 | 	mov	arg02, result1
19738     18 13 02 F6 | 	mov	arg01, local06
1973c     4C 18 B1 FD | 	call	#__system___float_mul
19740     FD 30 02 F6 | 	mov	local06, result1
19744     18 2A 06 F1 | 	add	local03, #24
19748     15 31 62 FC | 	wrlong	local06, local03
1974c                 | '   period=round((3528000/freq)/(i*(2^(18-amode-lfreq))))  ' should be 3546895 but I use 338688000 for 44100 Hz samples
1974c                 | '   channels(channel).realfreq=(3528000.0/period)*(skip/(256.0*1024.0)) : print period, skip, channels(channel).realfreq
1974c     00 12 06 F6 | 	mov	arg01, #0
19750     60 46 B1 FD | 	call	#__system___getiolock_0620
19754     FD 12 02 F6 | 	mov	arg01, result1
19758     B4 E9 B0 FD | 	call	#__system___lockmem
1975c     34 4E 05 F1 | 	add	fp, #52
19760     A7 14 02 FB | 	rdlong	arg02, fp
19764     34 4E 85 F1 | 	sub	fp, #52
19768     00 12 06 F6 | 	mov	arg01, #0
1976c     00 16 06 F6 | 	mov	arg03, #0
19770     0A 18 06 F6 | 	mov	arg04, #10
19774     D4 F6 B0 FD | 	call	#__system___basic_print_integer
19778     00 12 06 F6 | 	mov	arg01, #0
1977c     09 14 06 F6 | 	mov	arg02, #9
19780     00 16 06 F6 | 	mov	arg03, #0
19784     28 F6 B0 FD | 	call	#__system___basic_print_char
19788     10 4E 05 F1 | 	add	fp, #16
1978c     A7 14 02 FB | 	rdlong	arg02, fp
19790     10 4E 85 F1 | 	sub	fp, #16
19794     00 12 06 F6 | 	mov	arg01, #0
19798     00 16 06 F6 | 	mov	arg03, #0
1979c     0A 18 06 F6 | 	mov	arg04, #10
197a0     A8 F6 B0 FD | 	call	#__system___basic_print_integer
197a4     00 12 06 F6 | 	mov	arg01, #0
197a8     09 14 06 F6 | 	mov	arg02, #9
197ac     00 16 06 F6 | 	mov	arg03, #0
197b0     FC F5 B0 FD | 	call	#__system___basic_print_char
197b4     0C 4E 05 F1 | 	add	fp, #12
197b8     A7 32 02 FB | 	rdlong	local07, fp
197bc     0C 4E 85 F1 | 	sub	fp, #12
197c0     19 31 02 F6 | 	mov	local06, local07
197c4     03 30 66 F0 | 	shl	local06, #3
197c8     19 31 82 F1 | 	sub	local06, local07
197cc     02 30 66 F0 | 	shl	local06, #2
197d0     14 00 00 FF 
197d4     38 E5 05 F1 | 	add	objptr, ##10552
197d8     F2 30 02 F1 | 	add	local06, objptr
197dc     18 30 06 F1 | 	add	local06, #24
197e0     18 15 02 FB | 	rdlong	arg02, local06
197e4     00 12 06 F6 | 	mov	arg01, #0
197e8     00 16 06 F6 | 	mov	arg03, #0
197ec     23 18 06 F6 | 	mov	arg04, #35
197f0     14 00 00 FF 
197f4     38 E5 85 F1 | 	sub	objptr, ##10552
197f8     A8 1D B1 FD | 	call	#__system___basic_print_float
197fc     00 12 06 F6 | 	mov	arg01, #0
19800     0A 14 06 F6 | 	mov	arg02, #10
19804     00 16 06 F6 | 	mov	arg03, #0
19808     A4 F5 B0 FD | 	call	#__system___basic_print_char
1980c     00 12 06 F6 | 	mov	arg01, #0
19810     A0 45 B1 FD | 	call	#__system___getiolock_0620
19814     FD 00 68 FC | 	wrlong	#0, result1
19818     C0 01 90 FD | 	jmp	#LR__2033
1981c                 | LR__2032
1981c     34 4E 05 F1 | 	add	fp, #52
19820     A7 30 68 FC | 	wrlong	#24, fp
19824     00 40 24 FF 
19828     00 2C 06 F6 | 	mov	local04, ##1216348160
1982c     40 4E 05 F1 | 	add	fp, #64
19830     A7 12 02 FB | 	rdlong	arg01, fp
19834     74 4E 85 F1 | 	sub	fp, #116
19838     C7 07 24 FF 
1983c     00 14 06 F6 | 	mov	arg02, ##1208978944
19840     4C 19 B1 FD | 	call	#__system___float_div
19844     FD 14 02 F6 | 	mov	arg02, result1
19848     16 13 02 F6 | 	mov	arg01, local04
1984c     3C 17 B1 FD | 	call	#__system___float_mul
19850     FD 12 02 F6 | 	mov	arg01, result1
19854     01 14 06 F6 | 	mov	arg02, #1
19858     F8 1B B1 FD | 	call	#__system___float_tointeger
1985c     10 4E 05 F1 | 	add	fp, #16
19860     A7 FA 61 FC | 	wrlong	result1, fp
19864     04 4E 85 F1 | 	sub	fp, #4
19868     A7 28 02 FB | 	rdlong	local02, fp
1986c     14 2B 02 F6 | 	mov	local03, local02
19870     03 2A 66 F0 | 	shl	local03, #3
19874     14 2B 82 F1 | 	sub	local03, local02
19878     02 2A 66 F0 | 	shl	local03, #2
1987c     14 00 00 FF 
19880     38 E5 05 F1 | 	add	objptr, ##10552
19884     F2 2A 02 F1 | 	add	local03, objptr
19888     AA 2B 25 FF 
1988c     00 31 06 F6 | 	mov	local06, ##1247237376
19890     28 4E 05 F1 | 	add	fp, #40
19894     A7 12 02 FB | 	rdlong	arg01, fp
19898     34 4E 85 F1 | 	sub	fp, #52
1989c     14 00 00 FF 
198a0     38 E5 85 F1 | 	sub	objptr, ##10552
198a4     09 13 52 F6 | 	abs	arg01, arg01 wc
198a8     1F 34 C6 C9 |  if_b	decod	local08, #31
198ac     00 34 06 36 |  if_ae	mov	local08, #0
198b0     D4 12 B1 FD | 	call	#__system___float_fromuns
198b4     1A FB 61 F5 | 	xor	result1, local08
198b8     FD 14 02 F6 | 	mov	arg02, result1
198bc     18 13 02 F6 | 	mov	arg01, local06
198c0     CC 18 B1 FD | 	call	#__system___float_div
198c4     FD 30 02 F6 | 	mov	local06, result1
198c8     10 4E 05 F1 | 	add	fp, #16
198cc     A7 12 02 FB | 	rdlong	arg01, fp
198d0     10 4E 85 F1 | 	sub	fp, #16
198d4     09 13 52 F6 | 	abs	arg01, arg01 wc
198d8     1F 34 C6 C9 |  if_b	decod	local08, #31
198dc     00 34 06 36 |  if_ae	mov	local08, #0
198e0     A4 12 B1 FD | 	call	#__system___float_fromuns
198e4     1A FB 61 F5 | 	xor	result1, local08
198e8     FD 12 02 F6 | 	mov	arg01, result1
198ec     00 40 24 FF 
198f0     00 14 06 F6 | 	mov	arg02, ##1216348160
198f4     98 18 B1 FD | 	call	#__system___float_div
198f8     FD 14 02 F6 | 	mov	arg02, result1
198fc     18 13 02 F6 | 	mov	arg01, local06
19900     88 16 B1 FD | 	call	#__system___float_mul
19904     FD 30 02 F6 | 	mov	local06, result1
19908     18 2A 06 F1 | 	add	local03, #24
1990c     15 31 62 FC | 	wrlong	local06, local03
19910                 | '   period=24 '147000 Hz
19910                 | '   skip=round(1024*256*(freq/147000.0))
19910                 | '   channels(channel).realfreq=(3528000.0/period)*(skip/(256.0*1024.0)) : print period, skip, channels(channel).realfreq
19910     00 12 06 F6 | 	mov	arg01, #0
19914     9C 44 B1 FD | 	call	#__system___getiolock_0620
19918     FD 12 02 F6 | 	mov	arg01, result1
1991c     F0 E7 B0 FD | 	call	#__system___lockmem
19920     34 4E 05 F1 | 	add	fp, #52
19924     A7 14 02 FB | 	rdlong	arg02, fp
19928     34 4E 85 F1 | 	sub	fp, #52
1992c     00 12 06 F6 | 	mov	arg01, #0
19930     00 16 06 F6 | 	mov	arg03, #0
19934     0A 18 06 F6 | 	mov	arg04, #10
19938     10 F5 B0 FD | 	call	#__system___basic_print_integer
1993c     00 12 06 F6 | 	mov	arg01, #0
19940     09 14 06 F6 | 	mov	arg02, #9
19944     00 16 06 F6 | 	mov	arg03, #0
19948     64 F4 B0 FD | 	call	#__system___basic_print_char
1994c     10 4E 05 F1 | 	add	fp, #16
19950     A7 14 02 FB | 	rdlong	arg02, fp
19954     10 4E 85 F1 | 	sub	fp, #16
19958     00 12 06 F6 | 	mov	arg01, #0
1995c     00 16 06 F6 | 	mov	arg03, #0
19960     0A 18 06 F6 | 	mov	arg04, #10
19964     E4 F4 B0 FD | 	call	#__system___basic_print_integer
19968     00 12 06 F6 | 	mov	arg01, #0
1996c     09 14 06 F6 | 	mov	arg02, #9
19970     00 16 06 F6 | 	mov	arg03, #0
19974     38 F4 B0 FD | 	call	#__system___basic_print_char
19978     0C 4E 05 F1 | 	add	fp, #12
1997c     A7 32 02 FB | 	rdlong	local07, fp
19980     0C 4E 85 F1 | 	sub	fp, #12
19984     19 31 02 F6 | 	mov	local06, local07
19988     03 30 66 F0 | 	shl	local06, #3
1998c     19 31 82 F1 | 	sub	local06, local07
19990     02 30 66 F0 | 	shl	local06, #2
19994     14 00 00 FF 
19998     38 E5 05 F1 | 	add	objptr, ##10552
1999c     F2 30 02 F1 | 	add	local06, objptr
199a0     18 30 06 F1 | 	add	local06, #24
199a4     18 15 02 FB | 	rdlong	arg02, local06
199a8     00 12 06 F6 | 	mov	arg01, #0
199ac     00 16 06 F6 | 	mov	arg03, #0
199b0     23 18 06 F6 | 	mov	arg04, #35
199b4     14 00 00 FF 
199b8     38 E5 85 F1 | 	sub	objptr, ##10552
199bc     E4 1B B1 FD | 	call	#__system___basic_print_float
199c0     00 12 06 F6 | 	mov	arg01, #0
199c4     0A 14 06 F6 | 	mov	arg02, #10
199c8     00 16 06 F6 | 	mov	arg03, #0
199cc     E0 F3 B0 FD | 	call	#__system___basic_print_char
199d0     00 12 06 F6 | 	mov	arg01, #0
199d4     DC 43 B1 FD | 	call	#__system___getiolock_0620
199d8     FD 00 68 FC | 	wrlong	#0, result1
199dc                 | LR__2033
199dc     70 4E 05 F1 | 	add	fp, #112
199e0     A7 12 02 FB | 	rdlong	arg01, fp
199e4     10 4E 05 F1 | 	add	fp, #16
199e8     A7 14 02 FB | 	rdlong	arg02, fp
199ec     80 4E 85 F1 | 	sub	fp, #128
199f0     9C 17 B1 FD | 	call	#__system___float_div
199f4     FD 12 02 F6 | 	mov	arg01, result1
199f8     01 14 06 F6 | 	mov	arg02, #1
199fc     54 1A B1 FD | 	call	#__system___float_tointeger
19a00     FD 2C 02 F6 | 	mov	local04, result1
19a04     14 4E 05 F1 | 	add	fp, #20
19a08     A7 2C 62 FC | 	wrlong	local04, fp
19a0c     64 4E 05 F1 | 	add	fp, #100
19a10     A7 14 02 FB | 	rdlong	arg02, fp
19a14     78 4E 85 F1 | 	sub	fp, #120
19a18     00 00 23 FF 
19a1c     00 12 06 F6 | 	mov	arg01, ##1174405120
19a20     68 15 B1 FD | 	call	#__system___float_mul
19a24     FD 12 02 F6 | 	mov	arg01, result1
19a28     01 14 06 F6 | 	mov	arg02, #1
19a2c     24 1A B1 FD | 	call	#__system___float_tointeger
19a30     0D 2C C6 F9 | 	decod	local04, #13
19a34     FD 2C 02 F1 | 	add	local04, result1
19a38     18 4E 05 F1 | 	add	fp, #24
19a3c     A7 2C 62 FC | 	wrlong	local04, fp
19a40     64 4E 05 F1 | 	add	fp, #100
19a44     A7 14 02 FB | 	rdlong	arg02, fp
19a48     7C 4E 85 F1 | 	sub	fp, #124
19a4c     00 3D 22 FF 
19a50     00 12 06 F6 | 	mov	arg01, ##1148846080
19a54     34 15 B1 FD | 	call	#__system___float_mul
19a58     FD 12 02 F6 | 	mov	arg01, result1
19a5c     01 14 06 F6 | 	mov	arg02, #1
19a60     F0 19 B1 FD | 	call	#__system___float_tointeger
19a64     1C 4E 05 F1 | 	add	fp, #28
19a68     A7 FA 61 FC | 	wrlong	result1, fp
19a6c     37 00 00 FF 
19a70     30 E4 05 F1 | 	add	objptr, ##28208
19a74     F2 2C 02 FB | 	rdlong	local04, objptr
19a78     37 00 00 FF 
19a7c     30 E4 85 F1 | 	sub	objptr, ##28208
19a80     10 4E 85 F1 | 	sub	fp, #16
19a84     A7 28 02 FB | 	rdlong	local02, fp
19a88     06 28 66 F0 | 	shl	local02, #6
19a8c     14 2D 02 F1 | 	add	local04, local02
19a90     04 4E 85 F1 | 	sub	fp, #4
19a94     A7 2C 62 FC | 	wrlong	local04, fp
19a98                 | ' 
19a98                 | ' speed=round(speed_coeff/slen)
19a98                 | ' ipan=8192+round(8192*pan)
19a98                 | ' ivol=round(1000.0*vol)
19a98                 | ' base2=base+64*channel
19a98                 | ' if wave <32 then 
19a98     18 4E 05 F1 | 	add	fp, #24
19a9c     A7 2C 02 FB | 	rdlong	local04, fp
19aa0     20 4E 85 F1 | 	sub	fp, #32
19aa4     20 2C 56 F2 | 	cmps	local04, #32 wc
19aa8     2C 00 90 3D |  if_ae	jmp	#LR__2034
19aac     08 4E 05 F1 | 	add	fp, #8
19ab0     A7 12 02 FB | 	rdlong	arg01, fp
19ab4     08 12 06 F1 | 	add	arg01, #8
19ab8     18 4E 05 F1 | 	add	fp, #24
19abc     A7 14 02 FB | 	rdlong	arg02, fp
19ac0     20 4E 85 F1 | 	sub	fp, #32
19ac4     0B 14 66 F0 | 	shl	arg02, #11
19ac8     00 00 60 FF 
19acc     00 14 06 F1 | 	add	arg02, ##-1073741824
19ad0     09 15 62 FC | 	wrlong	arg02, arg01
19ad4     18 00 90 FD | 	jmp	#LR__2035
19ad8                 | LR__2034
19ad8     08 4E 05 F1 | 	add	fp, #8
19adc     A7 12 02 FB | 	rdlong	arg01, fp
19ae0     08 4E 85 F1 | 	sub	fp, #8
19ae4     08 12 06 F1 | 	add	arg01, #8
19ae8     00 00 E4 FF 
19aec     09 01 68 FC | 	wrlong	##-939524096, arg01
19af0                 | LR__2035
19af0     08 4E 05 F1 | 	add	fp, #8
19af4     A7 12 02 FB | 	rdlong	arg01, fp
19af8     10 12 06 F1 | 	add	arg01, #16
19afc     04 00 80 FF 
19b00     09 01 68 FC | 	wrlong	##2048, arg01
19b04     A7 12 02 FB | 	rdlong	arg01, fp
19b08     0C 12 06 F1 | 	add	arg01, #12
19b0c     09 01 68 FC | 	wrlong	#0, arg01
19b10     A7 12 02 FB | 	rdlong	arg01, fp
19b14     14 12 06 F1 | 	add	arg01, #20
19b18     14 4E 05 F1 | 	add	fp, #20
19b1c     A7 14 02 FB | 	rdlong	arg02, fp
19b20     09 15 52 FC | 	wrword	arg02, arg01
19b24     14 4E 85 F1 | 	sub	fp, #20
19b28     A7 12 02 FB | 	rdlong	arg01, fp
19b2c     16 12 06 F1 | 	add	arg01, #22
19b30     10 4E 05 F1 | 	add	fp, #16
19b34     A7 14 02 FB | 	rdlong	arg02, fp
19b38     09 15 52 FC | 	wrword	arg02, arg01
19b3c                 | ' lpoke base2+16,2048
19b3c                 | ' lpoke base2+12,0
19b3c                 | ' dpoke base2+20,ivol 
19b3c                 | ' dpoke base2+22,ipan 
19b3c                 | ' if wave<32 then
19b3c     08 4E 05 F1 | 	add	fp, #8
19b40     A7 2C 02 FB | 	rdlong	local04, fp
19b44     20 4E 85 F1 | 	sub	fp, #32
19b48     20 2C 56 F2 | 	cmps	local04, #32 wc
19b4c     38 00 90 3D |  if_ae	jmp	#LR__2036
19b50     08 4E 05 F1 | 	add	fp, #8
19b54     A7 12 02 FB | 	rdlong	arg01, fp
19b58     18 12 06 F1 | 	add	arg01, #24
19b5c     2C 4E 05 F1 | 	add	fp, #44
19b60     A7 14 02 FB | 	rdlong	arg02, fp
19b64     09 15 52 FC | 	wrword	arg02, arg01
19b68     2C 4E 85 F1 | 	sub	fp, #44
19b6c     A7 12 02 FB | 	rdlong	arg01, fp
19b70     1A 12 06 F1 | 	add	arg01, #26
19b74     08 4E 05 F1 | 	add	fp, #8
19b78     A7 14 02 FB | 	rdlong	arg02, fp
19b7c     10 4E 85 F1 | 	sub	fp, #16
19b80     09 15 52 FC | 	wrword	arg02, arg01
19b84     48 00 90 FD | 	jmp	#LR__2037
19b88                 | LR__2036
19b88     08 4E 05 F1 | 	add	fp, #8
19b8c     A7 2C 02 FB | 	rdlong	local04, fp
19b90     18 2C 06 F1 | 	add	local04, #24
19b94     6C 4E 05 F1 | 	add	fp, #108
19b98     A7 14 02 FB | 	rdlong	arg02, fp
19b9c     74 4E 85 F1 | 	sub	fp, #116
19ba0     3E 2C 25 FF 
19ba4     3C 12 06 F6 | 	mov	arg01, ##1247312956
19ba8     E4 15 B1 FD | 	call	#__system___float_div
19bac     FD 12 02 F6 | 	mov	arg01, result1
19bb0     01 14 06 F6 | 	mov	arg02, #1
19bb4     9C 18 B1 FD | 	call	#__system___float_tointeger
19bb8     16 FB 51 FC | 	wrword	result1, local04
19bbc     08 4E 05 F1 | 	add	fp, #8
19bc0     A7 12 02 FB | 	rdlong	arg01, fp
19bc4     08 4E 85 F1 | 	sub	fp, #8
19bc8     1A 12 06 F1 | 	add	arg01, #26
19bcc     09 01 5A FC | 	wrword	#256, arg01
19bd0                 | LR__2037
19bd0     08 4E 05 F1 | 	add	fp, #8
19bd4     A7 12 02 FB | 	rdlong	arg01, fp
19bd8     1C 12 06 F1 | 	add	arg01, #28
19bdc     09 01 68 FC | 	wrlong	#0, arg01
19be0     A7 12 02 FB | 	rdlong	arg01, fp
19be4     20 12 06 F1 | 	add	arg01, #32
19be8     09 01 68 FC | 	wrlong	#0, arg01
19bec                 | ' lpoke base2+28,$0000_0000
19bec                 | ' lpoke base2+32,0 
19bec                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
19bec     1C 4E 05 F1 | 	add	fp, #28
19bf0     A7 2C 02 FB | 	rdlong	local04, fp
19bf4     24 4E 85 F1 | 	sub	fp, #36
19bf8     08 2C 0E F2 | 	cmp	local04, #8 wz
19bfc     18 00 90 5D |  if_ne	jmp	#LR__2038
19c00     08 4E 05 F1 | 	add	fp, #8
19c04     A7 12 02 FB | 	rdlong	arg01, fp
19c08     08 4E 85 F1 | 	sub	fp, #8
19c0c     24 12 06 F1 | 	add	arg01, #36
19c10     09 01 68 FC | 	wrlong	#0, arg01
19c14     34 00 90 FD | 	jmp	#LR__2039
19c18                 | LR__2038
19c18     08 4E 05 F1 | 	add	fp, #8
19c1c     A7 12 02 FB | 	rdlong	arg01, fp
19c20     24 12 06 F1 | 	add	arg01, #36
19c24     1C 4E 05 F1 | 	add	fp, #28
19c28     A7 14 02 FB | 	rdlong	arg02, fp
19c2c     24 4E 85 F1 | 	sub	fp, #36
19c30     09 14 66 F0 | 	shl	arg02, #9
19c34     0C 00 00 FF 
19c38     D8 E4 05 F1 | 	add	objptr, ##6360
19c3c     F2 14 02 F1 | 	add	arg02, objptr
19c40     0C 00 00 FF 
19c44     D8 E4 85 F1 | 	sub	objptr, ##6360
19c48     09 15 62 FC | 	wrlong	arg02, arg01
19c4c                 | LR__2039
19c4c     08 4E 05 F1 | 	add	fp, #8
19c50     A7 12 02 FB | 	rdlong	arg01, fp
19c54     28 12 06 F1 | 	add	arg01, #40
19c58     0C 4E 05 F1 | 	add	fp, #12
19c5c     A7 14 02 FB | 	rdlong	arg02, fp
19c60     09 15 62 FC | 	wrlong	arg02, arg01
19c64     0C 4E 85 F1 | 	sub	fp, #12
19c68     A7 12 02 FB | 	rdlong	arg01, fp
19c6c     2C 12 06 F1 | 	add	arg01, #44
19c70     24 4E 05 F1 | 	add	fp, #36
19c74     A7 14 02 FB | 	rdlong	arg02, fp
19c78     09 15 62 FC | 	wrlong	arg02, arg01
19c7c                 | ' lpoke base2+40,speed 
19c7c                 | ' lpoke base2+44,sus 
19c7c                 | ' if delay>0 then waitms(delay) 
19c7c     04 4E 85 F1 | 	sub	fp, #4
19c80     A7 2C 02 FB | 	rdlong	local04, fp
19c84     28 4E 85 F1 | 	sub	fp, #40
19c88     01 2C 56 F2 | 	cmps	local04, #1 wc
19c8c     28 4E 05 31 |  if_ae	add	fp, #40
19c90     A7 12 02 3B |  if_ae	rdlong	arg01, fp
19c94     28 4E 85 31 |  if_ae	sub	fp, #40
19c98     68 E7 B0 3D |  if_ae	call	#__system___waitms
19c9c     A7 F0 03 F6 | 	mov	ptra, fp
19ca0     B2 00 A0 FD | 	call	#popregs_
19ca4                 | _do_play_ret
19ca4     2D 00 64 FD | 	ret
19ca8                 | 
19ca8                 | ' 
19ca8                 | ' '-------------------- plot
19ca8                 | ' 
19ca8                 | ' sub do_plot
19ca8                 | _do_plot
19ca8     00 4A 05 F6 | 	mov	COUNT_, #0
19cac     A8 00 A0 FD | 	call	#pushregs_
19cb0     20 F0 07 F1 | 	add	ptra, #32
19cb4     68 3B BF FD | 	call	#_pop
19cb8     FD 16 02 F6 | 	mov	arg03, result1
19cbc     FE 14 02 F6 | 	mov	arg02, result2
19cc0     FF 12 02 F6 | 	mov	arg01, result3
19cc4     0C 4E 05 F1 | 	add	fp, #12
19cc8     A7 16 62 FC | 	wrlong	arg03, fp
19ccc     04 4E 05 F1 | 	add	fp, #4
19cd0     A7 14 62 FC | 	wrlong	arg02, fp
19cd4     04 4E 05 F1 | 	add	fp, #4
19cd8     A7 12 62 FC | 	wrlong	arg01, fp
19cdc     14 4E 85 F1 | 	sub	fp, #20
19ce0     3C 3B BF FD | 	call	#_pop
19ce4     FF 16 02 F6 | 	mov	arg03, result3
19ce8     A7 FA 61 FC | 	wrlong	result1, fp
19cec     04 4E 05 F1 | 	add	fp, #4
19cf0     A7 FC 61 FC | 	wrlong	result2, fp
19cf4     04 4E 05 F1 | 	add	fp, #4
19cf8     A7 16 62 FC | 	wrlong	arg03, fp
19cfc     08 4E 85 F1 | 	sub	fp, #8
19d00     A7 12 02 F6 | 	mov	arg01, fp
19d04     FC 3C BF FD | 	call	#_converttoint
19d08     18 4E 05 F1 | 	add	fp, #24
19d0c     A7 FA 61 FC | 	wrlong	result1, fp
19d10     0C 4E 85 F1 | 	sub	fp, #12
19d14     A7 12 02 F6 | 	mov	arg01, fp
19d18     0C 4E 85 F1 | 	sub	fp, #12
19d1c     E4 3C BF FD | 	call	#_converttoint
19d20     1C 4E 05 F1 | 	add	fp, #28
19d24     A7 FA 61 FC | 	wrlong	result1, fp
19d28     04 4E 85 F1 | 	sub	fp, #4
19d2c     A7 16 02 FB | 	rdlong	arg03, fp
19d30     37 00 00 FF 
19d34     4C E4 05 F1 | 	add	objptr, ##28236
19d38     F2 16 62 FC | 	wrlong	arg03, objptr
19d3c     04 4E 05 F1 | 	add	fp, #4
19d40     A7 14 02 FB | 	rdlong	arg02, fp
19d44     1C 4E 85 F1 | 	sub	fp, #28
19d48     04 E4 05 F1 | 	add	objptr, #4
19d4c     F2 14 62 FC | 	wrlong	arg02, objptr
19d50     04 E4 85 F1 | 	sub	objptr, #4
19d54     F2 12 02 FB | 	rdlong	arg01, objptr
19d58     04 E4 85 F1 | 	sub	objptr, #4
19d5c     F2 16 02 FB | 	rdlong	arg03, objptr
19d60     37 00 00 FF 
19d64     48 E4 85 F1 | 	sub	objptr, ##28232
19d68     00 BA B0 FD | 	call	#_hg010b_spin2_putpixel
19d6c     A7 F0 03 F6 | 	mov	ptra, fp
19d70     B2 00 A0 FD | 	call	#popregs_
19d74                 | _do_plot_ret
19d74     2D 00 64 FD | 	ret
19d78                 | 
19d78                 | ' 
19d78                 | ' '-------------------- poke
19d78                 | ' 
19d78                 | ' sub do_poke
19d78                 | _do_poke
19d78     01 4A 05 F6 | 	mov	COUNT_, #1
19d7c     A8 00 A0 FD | 	call	#pushregs_
19d80     20 F0 07 F1 | 	add	ptra, #32
19d84     98 3A BF FD | 	call	#_pop
19d88     FD 14 02 F6 | 	mov	arg02, result1
19d8c     FE 12 02 F6 | 	mov	arg01, result2
19d90     FF 26 02 F6 | 	mov	local01, result3
19d94     A7 14 62 FC | 	wrlong	arg02, fp
19d98     04 4E 05 F1 | 	add	fp, #4
19d9c     A7 12 62 FC | 	wrlong	arg01, fp
19da0     04 4E 05 F1 | 	add	fp, #4
19da4     A7 26 62 FC | 	wrlong	local01, fp
19da8     08 4E 85 F1 | 	sub	fp, #8
19dac     70 3A BF FD | 	call	#_pop
19db0     FF 26 02 F6 | 	mov	local01, result3
19db4     0C 4E 05 F1 | 	add	fp, #12
19db8     A7 FA 61 FC | 	wrlong	result1, fp
19dbc     04 4E 05 F1 | 	add	fp, #4
19dc0     A7 FC 61 FC | 	wrlong	result2, fp
19dc4     04 4E 05 F1 | 	add	fp, #4
19dc8     A7 26 62 FC | 	wrlong	local01, fp
19dcc     08 4E 85 F1 | 	sub	fp, #8
19dd0     A7 12 02 F6 | 	mov	arg01, fp
19dd4     0C 4E 85 F1 | 	sub	fp, #12
19dd8     28 3C BF FD | 	call	#_converttoint
19ddc     18 4E 05 F1 | 	add	fp, #24
19de0     A7 FA 61 FC | 	wrlong	result1, fp
19de4     18 4E 85 F1 | 	sub	fp, #24
19de8     A7 12 02 F6 | 	mov	arg01, fp
19dec     14 3C BF FD | 	call	#_converttoint
19df0     1C 4E 05 F1 | 	add	fp, #28
19df4     A7 FA 61 FC | 	wrlong	result1, fp
19df8                 | ' t1=pop() 'value
19df8                 | ' t2=pop() 
19df8                 | ' a=converttoint(t2) : v=converttoint(t1)
19df8                 | ' if a<$80000 then poke a,v else pspoke a,v
19df8     04 4E 85 F1 | 	sub	fp, #4
19dfc     A7 26 02 FB | 	rdlong	local01, fp
19e00     18 4E 85 F1 | 	sub	fp, #24
19e04     00 04 00 FF 
19e08     00 26 16 F2 | 	cmp	local01, ##524288 wc
19e0c     1C 00 90 3D |  if_ae	jmp	#LR__2040
19e10     18 4E 05 F1 | 	add	fp, #24
19e14     A7 12 02 FB | 	rdlong	arg01, fp
19e18     04 4E 05 F1 | 	add	fp, #4
19e1c     A7 14 02 FB | 	rdlong	arg02, fp
19e20     1C 4E 85 F1 | 	sub	fp, #28
19e24     09 15 42 FC | 	wrbyte	arg02, arg01
19e28     18 00 90 FD | 	jmp	#LR__2041
19e2c                 | LR__2040
19e2c     18 4E 05 F1 | 	add	fp, #24
19e30     A7 12 02 FB | 	rdlong	arg01, fp
19e34     04 4E 05 F1 | 	add	fp, #4
19e38     A7 14 02 FB | 	rdlong	arg02, fp
19e3c     1C 4E 85 F1 | 	sub	fp, #28
19e40     A8 AA B0 FD | 	call	#_pspoke
19e44                 | LR__2041
19e44     A7 F0 03 F6 | 	mov	ptra, fp
19e48     B2 00 A0 FD | 	call	#popregs_
19e4c                 | _do_poke_ret
19e4c     2D 00 64 FD | 	ret
19e50                 | 
19e50                 | ' 
19e50                 | ' '-------------------- pop
19e50                 | ' 
19e50                 | ' sub do_pop()
19e50                 | _do_pop
19e50                 | ' if gosubtop>0 then  gosubtop -=1 
19e50     50 00 00 FF 
19e54     54 E5 05 F1 | 	add	objptr, ##41300
19e58     F2 00 02 FB | 	rdlong	_var01, objptr
19e5c     50 00 00 FF 
19e60     54 E5 85 F1 | 	sub	objptr, ##41300
19e64     01 00 56 F2 | 	cmps	_var01, #1 wc
19e68     50 00 00 3F 
19e6c     54 E5 05 31 |  if_ae	add	objptr, ##41300
19e70     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
19e74     01 00 86 31 |  if_ae	sub	_var01, #1
19e78     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
19e7c     50 00 00 3F 
19e80     54 E5 85 31 |  if_ae	sub	objptr, ##41300
19e84                 | _do_pop_ret
19e84     2D 00 64 FD | 	ret
19e88                 | 
19e88                 | ' 
19e88                 | ' '-------------------- position
19e88                 | ' 
19e88                 | ' sub do_position
19e88                 | _do_position
19e88     01 4A 05 F6 | 	mov	COUNT_, #1
19e8c     A8 00 A0 FD | 	call	#pushregs_
19e90     18 F0 07 F1 | 	add	ptra, #24
19e94     88 39 BF FD | 	call	#_pop
19e98     FD 14 02 F6 | 	mov	arg02, result1
19e9c     FE 12 02 F6 | 	mov	arg01, result2
19ea0     FF 26 02 F6 | 	mov	local01, result3
19ea4     A7 14 62 FC | 	wrlong	arg02, fp
19ea8     04 4E 05 F1 | 	add	fp, #4
19eac     A7 12 62 FC | 	wrlong	arg01, fp
19eb0     04 4E 05 F1 | 	add	fp, #4
19eb4     A7 26 62 FC | 	wrlong	local01, fp
19eb8     08 4E 85 F1 | 	sub	fp, #8
19ebc     60 39 BF FD | 	call	#_pop
19ec0     FF 26 02 F6 | 	mov	local01, result3
19ec4     0C 4E 05 F1 | 	add	fp, #12
19ec8     A7 FA 61 FC | 	wrlong	result1, fp
19ecc     04 4E 05 F1 | 	add	fp, #4
19ed0     A7 FC 61 FC | 	wrlong	result2, fp
19ed4     04 4E 05 F1 | 	add	fp, #4
19ed8     A7 26 62 FC | 	wrlong	local01, fp
19edc     08 4E 85 F1 | 	sub	fp, #8
19ee0     A7 12 02 F6 | 	mov	arg01, fp
19ee4     0C 4E 85 F1 | 	sub	fp, #12
19ee8     18 3B BF FD | 	call	#_converttoint
19eec     FD 26 02 F6 | 	mov	local01, result1
19ef0     A7 12 02 F6 | 	mov	arg01, fp
19ef4     0C 3B BF FD | 	call	#_converttoint
19ef8     FD 14 02 F6 | 	mov	arg02, result1
19efc     13 13 02 F6 | 	mov	arg01, local01
19f00     70 C4 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19f04     A7 F0 03 F6 | 	mov	ptra, fp
19f08     B2 00 A0 FD | 	call	#popregs_
19f0c                 | _do_position_ret
19f0c     2D 00 64 FD | 	ret
19f10                 | 
19f10                 | ' 
19f10                 | ' '-------------------- print
19f10                 | ' 
19f10                 | ' sub do_print  
19f10                 | _do_print
19f10     0B 4A 05 F6 | 	mov	COUNT_, #11
19f14     A8 00 A0 FD | 	call	#pushregs_
19f18     00 2C 06 F6 | 	mov	local04, #0
19f1c     00 39 BF FD | 	call	#_pop
19f20     FD 2E 02 F6 | 	mov	local05, result1
19f24     FE 30 02 F6 | 	mov	local06, result2
19f28     FF 32 02 F6 | 	mov	local07, result3
19f2c     17 27 02 F6 | 	mov	local01, local05
19f30     18 29 02 F6 | 	mov	local02, local06
19f34     19 2B 02 F6 | 	mov	local03, local07
19f38                 | '  
19f38                 | ' r=0
19f38                 | ' t1=pop() 
19f38                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
19f38     21 2A 0E F2 | 	cmp	local03, #33 wz
19f3c     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
19f40     20 00 90 5D |  if_ne	jmp	#LR__2050
19f44     15 2D 02 F6 | 	mov	local04, local03
19f48     D4 38 BF FD | 	call	#_pop
19f4c     FD 2E 02 F6 | 	mov	local05, result1
19f50     FE 30 02 F6 | 	mov	local06, result2
19f54     FF 32 02 F6 | 	mov	local07, result3
19f58     17 27 02 F6 | 	mov	local01, local05
19f5c     18 29 02 F6 | 	mov	local02, local06
19f60     19 2B 02 F6 | 	mov	local03, local07
19f64                 | LR__2050
19f64                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
19f64     20 2A 0E F2 | 	cmp	local03, #32 wz
19f68     15 2D 02 A6 |  if_e	mov	local04, local03
19f6c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
19f6c     FF 2A 0E F2 | 	cmp	local03, #255 wz
19f70     10 00 90 5D |  if_ne	jmp	#LR__2051
19f74     13 13 02 F6 | 	mov	arg01, local01
19f78     00 14 06 F6 | 	mov	arg02, #0
19f7c     3C A7 B0 FD | 	call	#_printerror
19f80     D4 04 90 FD | 	jmp	#LR__2070
19f84                 | LR__2051
19f84                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
19f84     2B 2A 0E F2 | 	cmp	local03, #43 wz
19f88     14 00 90 5D |  if_ne	jmp	#LR__2052
19f8c     13 13 02 F6 | 	mov	arg01, local01
19f90     04 3A BF FD | 	call	#_convertstring
19f94     FD 2E 02 F6 | 	mov	local05, result1
19f98     17 27 02 F6 | 	mov	local01, local05
19f9c     1F 2A 06 F6 | 	mov	local03, #31
19fa0                 | LR__2052
19fa0                 | ' 
19fa0                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
19fa0     2C 2A 0E F2 | 	cmp	local03, #44 wz
19fa4     80 00 90 5D |  if_ne	jmp	#LR__2053
19fa8     00 12 06 F6 | 	mov	arg01, #0
19fac     04 3E B1 FD | 	call	#__system___getiolock_0620
19fb0     FD 12 02 F6 | 	mov	arg01, result1
19fb4     58 E1 B0 FD | 	call	#__system___lockmem
19fb8     B6 01 00 FF 
19fbc     71 14 06 F6 | 	mov	arg02, ##@LR__5888
19fc0     00 12 06 F6 | 	mov	arg01, #0
19fc4     00 16 06 F6 | 	mov	arg03, #0
19fc8     3C EE B0 FD | 	call	#__system___basic_print_string
19fcc     0A 34 06 F6 | 	mov	local08, #10
19fd0     00 12 06 F6 | 	mov	arg01, #0
19fd4     13 15 02 F6 | 	mov	arg02, local01
19fd8     00 16 06 F6 | 	mov	arg03, #0
19fdc     0A 18 06 F6 | 	mov	arg04, #10
19fe0     68 EE B0 FD | 	call	#__system___basic_print_integer
19fe4     FD 36 02 F6 | 	mov	local09, result1
19fe8     00 12 06 F6 | 	mov	arg01, #0
19fec     0A 14 06 F6 | 	mov	arg02, #10
19ff0     00 16 06 F6 | 	mov	arg03, #0
19ff4     B8 ED B0 FD | 	call	#__system___basic_print_char
19ff8     01 38 06 F6 | 	mov	local10, #1
19ffc     00 12 06 F6 | 	mov	arg01, #0
1a000     B0 3D B1 FD | 	call	#__system___getiolock_0620
1a004     FD 00 68 FC | 	wrlong	#0, result1
1a008     00 3A 06 F6 | 	mov	local11, #0
1a00c     10 38 BF FD | 	call	#_pop
1a010     FD 2E 02 F6 | 	mov	local05, result1
1a014     FE 30 02 F6 | 	mov	local06, result2
1a018     FF 32 02 F6 | 	mov	local07, result3
1a01c     17 27 02 F6 | 	mov	local01, local05
1a020     18 29 02 F6 | 	mov	local02, local06
1a024     19 2B 02 F6 | 	mov	local03, local07
1a028                 | LR__2053
1a028                 | ' 
1a028                 | ' if r=print_mod_comma  then
1a028     21 2C 0E F2 | 	cmp	local04, #33 wz
1a02c     AC 01 90 5D |  if_ne	jmp	#LR__2058
1a030                 | '   if t1.result_type=result_int then print t1.result.iresult,
1a030     1C 2A 0E F2 | 	cmp	local03, #28 wz
1a034     64 00 90 5D |  if_ne	jmp	#LR__2054
1a038     00 12 06 F6 | 	mov	arg01, #0
1a03c     74 3D B1 FD | 	call	#__system___getiolock_0620
1a040     FD 12 02 F6 | 	mov	arg01, result1
1a044     C8 E0 B0 FD | 	call	#__system___lockmem
1a048     00 30 06 F6 | 	mov	local06, #0
1a04c     00 12 06 F6 | 	mov	arg01, #0
1a050     13 15 02 F6 | 	mov	arg02, local01
1a054     00 16 06 F6 | 	mov	arg03, #0
1a058     0A 18 06 F6 | 	mov	arg04, #10
1a05c     EC ED B0 FD | 	call	#__system___basic_print_integer
1a060     FD 32 02 F6 | 	mov	local07, result1
1a064     18 2F 02 F6 | 	mov	local05, local06
1a068     19 2F 02 F1 | 	add	local05, local07
1a06c     00 3A 06 F6 | 	mov	local11, #0
1a070     00 12 06 F6 | 	mov	arg01, #0
1a074     09 14 06 F6 | 	mov	arg02, #9
1a078     00 16 06 F6 | 	mov	arg03, #0
1a07c     30 ED B0 FD | 	call	#__system___basic_print_char
1a080     FD 36 02 F6 | 	mov	local09, result1
1a084     FD 2E 02 F1 | 	add	local05, result1
1a088     00 12 06 F6 | 	mov	arg01, #0
1a08c     24 3D B1 FD | 	call	#__system___getiolock_0620
1a090     FD 00 68 FC | 	wrlong	#0, result1
1a094     00 FA 05 F6 | 	mov	result1, #0
1a098     00 38 06 F6 | 	mov	local10, #0
1a09c                 | LR__2054
1a09c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1a09c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1a0a0     64 00 90 5D |  if_ne	jmp	#LR__2055
1a0a4     00 12 06 F6 | 	mov	arg01, #0
1a0a8     08 3D B1 FD | 	call	#__system___getiolock_0620
1a0ac     FD 12 02 F6 | 	mov	arg01, result1
1a0b0     5C E0 B0 FD | 	call	#__system___lockmem
1a0b4     00 30 06 F6 | 	mov	local06, #0
1a0b8     00 12 06 F6 | 	mov	arg01, #0
1a0bc     13 15 02 F6 | 	mov	arg02, local01
1a0c0     00 16 06 F6 | 	mov	arg03, #0
1a0c4     0A 18 06 F6 | 	mov	arg04, #10
1a0c8     C0 ED B0 FD | 	call	#__system___basic_print_unsigned
1a0cc     FD 32 02 F6 | 	mov	local07, result1
1a0d0     18 2F 02 F6 | 	mov	local05, local06
1a0d4     19 2F 02 F1 | 	add	local05, local07
1a0d8     00 3A 06 F6 | 	mov	local11, #0
1a0dc     00 12 06 F6 | 	mov	arg01, #0
1a0e0     09 14 06 F6 | 	mov	arg02, #9
1a0e4     00 16 06 F6 | 	mov	arg03, #0
1a0e8     C4 EC B0 FD | 	call	#__system___basic_print_char
1a0ec     FD 36 02 F6 | 	mov	local09, result1
1a0f0     FD 2E 02 F1 | 	add	local05, result1
1a0f4     00 12 06 F6 | 	mov	arg01, #0
1a0f8     B8 3C B1 FD | 	call	#__system___getiolock_0620
1a0fc     FD 00 68 FC | 	wrlong	#0, result1
1a100     00 FA 05 F6 | 	mov	result1, #0
1a104     00 38 06 F6 | 	mov	local10, #0
1a108                 | LR__2055
1a108                 | '   if t1.result_type=result_float then print t1.result.fresult,
1a108     1E 2A 0E F2 | 	cmp	local03, #30 wz
1a10c     64 00 90 5D |  if_ne	jmp	#LR__2056
1a110     00 12 06 F6 | 	mov	arg01, #0
1a114     9C 3C B1 FD | 	call	#__system___getiolock_0620
1a118     FD 12 02 F6 | 	mov	arg01, result1
1a11c     F0 DF B0 FD | 	call	#__system___lockmem
1a120     00 30 06 F6 | 	mov	local06, #0
1a124     00 12 06 F6 | 	mov	arg01, #0
1a128     13 15 02 F6 | 	mov	arg02, local01
1a12c     00 16 06 F6 | 	mov	arg03, #0
1a130     23 18 06 F6 | 	mov	arg04, #35
1a134     6C 14 B1 FD | 	call	#__system___basic_print_float
1a138     FD 32 02 F6 | 	mov	local07, result1
1a13c     18 2F 02 F6 | 	mov	local05, local06
1a140     19 2F 02 F1 | 	add	local05, local07
1a144     00 3A 06 F6 | 	mov	local11, #0
1a148     00 12 06 F6 | 	mov	arg01, #0
1a14c     09 14 06 F6 | 	mov	arg02, #9
1a150     00 16 06 F6 | 	mov	arg03, #0
1a154     58 EC B0 FD | 	call	#__system___basic_print_char
1a158     FD 36 02 F6 | 	mov	local09, result1
1a15c     FD 2E 02 F1 | 	add	local05, result1
1a160     00 12 06 F6 | 	mov	arg01, #0
1a164     4C 3C B1 FD | 	call	#__system___getiolock_0620
1a168     FD 00 68 FC | 	wrlong	#0, result1
1a16c     00 FA 05 F6 | 	mov	result1, #0
1a170     00 38 06 F6 | 	mov	local10, #0
1a174                 | LR__2056
1a174                 | '   if t1.result_type=result_string then print t1.result.sresult,
1a174     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a178     60 00 90 5D |  if_ne	jmp	#LR__2057
1a17c     00 12 06 F6 | 	mov	arg01, #0
1a180     30 3C B1 FD | 	call	#__system___getiolock_0620
1a184     FD 12 02 F6 | 	mov	arg01, result1
1a188     84 DF B0 FD | 	call	#__system___lockmem
1a18c     00 30 06 F6 | 	mov	local06, #0
1a190     00 12 06 F6 | 	mov	arg01, #0
1a194     13 15 02 F6 | 	mov	arg02, local01
1a198     00 16 06 F6 | 	mov	arg03, #0
1a19c     68 EC B0 FD | 	call	#__system___basic_print_string
1a1a0     FD 32 02 F6 | 	mov	local07, result1
1a1a4     18 2F 02 F6 | 	mov	local05, local06
1a1a8     19 2F 02 F1 | 	add	local05, local07
1a1ac     00 3A 06 F6 | 	mov	local11, #0
1a1b0     00 12 06 F6 | 	mov	arg01, #0
1a1b4     09 14 06 F6 | 	mov	arg02, #9
1a1b8     00 16 06 F6 | 	mov	arg03, #0
1a1bc     F0 EB B0 FD | 	call	#__system___basic_print_char
1a1c0     FD 36 02 F6 | 	mov	local09, result1
1a1c4     FD 2E 02 F1 | 	add	local05, result1
1a1c8     00 12 06 F6 | 	mov	arg01, #0
1a1cc     E4 3B B1 FD | 	call	#__system___getiolock_0620
1a1d0     FD 00 68 FC | 	wrlong	#0, result1
1a1d4     00 FA 05 F6 | 	mov	result1, #0
1a1d8     00 38 06 F6 | 	mov	local10, #0
1a1dc                 | LR__2057
1a1dc                 | LR__2058
1a1dc                 | ' if r=print_mod_semicolon then 
1a1dc     22 2C 0E F2 | 	cmp	local04, #34 wz
1a1e0     1C 01 90 5D |  if_ne	jmp	#LR__2063
1a1e4                 | '   if t1.result_type=result_int then print t1.result.iresult;
1a1e4     1C 2A 0E F2 | 	cmp	local03, #28 wz
1a1e8     50 00 90 5D |  if_ne	jmp	#LR__2059
1a1ec     00 12 06 F6 | 	mov	arg01, #0
1a1f0     C0 3B B1 FD | 	call	#__system___getiolock_0620
1a1f4     FD 12 02 F6 | 	mov	arg01, result1
1a1f8     14 DF B0 FD | 	call	#__system___lockmem
1a1fc     00 30 06 F6 | 	mov	local06, #0
1a200     00 38 06 F6 | 	mov	local10, #0
1a204     0A 3A 06 F6 | 	mov	local11, #10
1a208     00 12 06 F6 | 	mov	arg01, #0
1a20c     13 15 02 F6 | 	mov	arg02, local01
1a210     00 16 06 F6 | 	mov	arg03, #0
1a214     0A 18 06 F6 | 	mov	arg04, #10
1a218     30 EC B0 FD | 	call	#__system___basic_print_integer
1a21c     FD 32 02 F6 | 	mov	local07, result1
1a220     18 2F 02 F6 | 	mov	local05, local06
1a224     19 2F 02 F1 | 	add	local05, local07
1a228     00 12 06 F6 | 	mov	arg01, #0
1a22c     84 3B B1 FD | 	call	#__system___getiolock_0620
1a230     FD 00 68 FC | 	wrlong	#0, result1
1a234     00 FA 05 F6 | 	mov	result1, #0
1a238     00 36 06 F6 | 	mov	local09, #0
1a23c                 | LR__2059
1a23c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1a23c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1a240     50 00 90 5D |  if_ne	jmp	#LR__2060
1a244     00 12 06 F6 | 	mov	arg01, #0
1a248     68 3B B1 FD | 	call	#__system___getiolock_0620
1a24c     FD 12 02 F6 | 	mov	arg01, result1
1a250     BC DE B0 FD | 	call	#__system___lockmem
1a254     00 30 06 F6 | 	mov	local06, #0
1a258     00 38 06 F6 | 	mov	local10, #0
1a25c     0A 3A 06 F6 | 	mov	local11, #10
1a260     00 12 06 F6 | 	mov	arg01, #0
1a264     13 15 02 F6 | 	mov	arg02, local01
1a268     00 16 06 F6 | 	mov	arg03, #0
1a26c     0A 18 06 F6 | 	mov	arg04, #10
1a270     18 EC B0 FD | 	call	#__system___basic_print_unsigned
1a274     FD 32 02 F6 | 	mov	local07, result1
1a278     18 2F 02 F6 | 	mov	local05, local06
1a27c     19 2F 02 F1 | 	add	local05, local07
1a280     00 12 06 F6 | 	mov	arg01, #0
1a284     2C 3B B1 FD | 	call	#__system___getiolock_0620
1a288     FD 00 68 FC | 	wrlong	#0, result1
1a28c     00 FA 05 F6 | 	mov	result1, #0
1a290     00 36 06 F6 | 	mov	local09, #0
1a294                 | LR__2060
1a294                 | '   if t1.result_type=result_float then print t1.result.fresult;
1a294     1E 2A 0E F2 | 	cmp	local03, #30 wz
1a298     30 00 90 5D |  if_ne	jmp	#LR__2061
1a29c     00 12 06 F6 | 	mov	arg01, #0
1a2a0     10 3B B1 FD | 	call	#__system___getiolock_0620
1a2a4     FD 12 02 F6 | 	mov	arg01, result1
1a2a8     64 DE B0 FD | 	call	#__system___lockmem
1a2ac     00 12 06 F6 | 	mov	arg01, #0
1a2b0     13 15 02 F6 | 	mov	arg02, local01
1a2b4     00 16 06 F6 | 	mov	arg03, #0
1a2b8     23 18 06 F6 | 	mov	arg04, #35
1a2bc     E4 12 B1 FD | 	call	#__system___basic_print_float
1a2c0     00 12 06 F6 | 	mov	arg01, #0
1a2c4     EC 3A B1 FD | 	call	#__system___getiolock_0620
1a2c8     FD 00 68 FC | 	wrlong	#0, result1
1a2cc                 | LR__2061
1a2cc                 | '   if t1.result_type=result_string then print t1.result.sresult;
1a2cc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a2d0     2C 00 90 5D |  if_ne	jmp	#LR__2062
1a2d4     00 12 06 F6 | 	mov	arg01, #0
1a2d8     D8 3A B1 FD | 	call	#__system___getiolock_0620
1a2dc     FD 12 02 F6 | 	mov	arg01, result1
1a2e0     2C DE B0 FD | 	call	#__system___lockmem
1a2e4     00 12 06 F6 | 	mov	arg01, #0
1a2e8     13 15 02 F6 | 	mov	arg02, local01
1a2ec     00 16 06 F6 | 	mov	arg03, #0
1a2f0     14 EB B0 FD | 	call	#__system___basic_print_string
1a2f4     00 12 06 F6 | 	mov	arg01, #0
1a2f8     B8 3A B1 FD | 	call	#__system___getiolock_0620
1a2fc     FD 00 68 FC | 	wrlong	#0, result1
1a300                 | LR__2062
1a300                 | LR__2063
1a300                 | ' if r=0 then 
1a300     00 2C 0E F2 | 	cmp	local04, #0 wz
1a304     1C 01 90 5D |  if_ne	jmp	#LR__2068
1a308                 | '   if t1.result_type=result_int then print t1.result.iresult
1a308     1C 2A 0E F2 | 	cmp	local03, #28 wz
1a30c     40 00 90 5D |  if_ne	jmp	#LR__2064
1a310     00 12 06 F6 | 	mov	arg01, #0
1a314     9C 3A B1 FD | 	call	#__system___getiolock_0620
1a318     FD 12 02 F6 | 	mov	arg01, result1
1a31c     F0 DD B0 FD | 	call	#__system___lockmem
1a320     00 12 06 F6 | 	mov	arg01, #0
1a324     13 15 02 F6 | 	mov	arg02, local01
1a328     00 16 06 F6 | 	mov	arg03, #0
1a32c     0A 18 06 F6 | 	mov	arg04, #10
1a330     18 EB B0 FD | 	call	#__system___basic_print_integer
1a334     00 12 06 F6 | 	mov	arg01, #0
1a338     0A 14 06 F6 | 	mov	arg02, #10
1a33c     00 16 06 F6 | 	mov	arg03, #0
1a340     6C EA B0 FD | 	call	#__system___basic_print_char
1a344     00 12 06 F6 | 	mov	arg01, #0
1a348     68 3A B1 FD | 	call	#__system___getiolock_0620
1a34c     FD 00 68 FC | 	wrlong	#0, result1
1a350                 | LR__2064
1a350                 | '   if t1.result_type=result_uint then print t1.result.uresult
1a350     1D 2A 0E F2 | 	cmp	local03, #29 wz
1a354     40 00 90 5D |  if_ne	jmp	#LR__2065
1a358     00 12 06 F6 | 	mov	arg01, #0
1a35c     54 3A B1 FD | 	call	#__system___getiolock_0620
1a360     FD 12 02 F6 | 	mov	arg01, result1
1a364     A8 DD B0 FD | 	call	#__system___lockmem
1a368     00 12 06 F6 | 	mov	arg01, #0
1a36c     13 15 02 F6 | 	mov	arg02, local01
1a370     00 16 06 F6 | 	mov	arg03, #0
1a374     0A 18 06 F6 | 	mov	arg04, #10
1a378     10 EB B0 FD | 	call	#__system___basic_print_unsigned
1a37c     00 12 06 F6 | 	mov	arg01, #0
1a380     0A 14 06 F6 | 	mov	arg02, #10
1a384     00 16 06 F6 | 	mov	arg03, #0
1a388     24 EA B0 FD | 	call	#__system___basic_print_char
1a38c     00 12 06 F6 | 	mov	arg01, #0
1a390     20 3A B1 FD | 	call	#__system___getiolock_0620
1a394     FD 00 68 FC | 	wrlong	#0, result1
1a398                 | LR__2065
1a398                 | '   if t1.result_type=result_float then print t1.result.fresult
1a398     1E 2A 0E F2 | 	cmp	local03, #30 wz
1a39c     40 00 90 5D |  if_ne	jmp	#LR__2066
1a3a0     00 12 06 F6 | 	mov	arg01, #0
1a3a4     0C 3A B1 FD | 	call	#__system___getiolock_0620
1a3a8     FD 12 02 F6 | 	mov	arg01, result1
1a3ac     60 DD B0 FD | 	call	#__system___lockmem
1a3b0     00 12 06 F6 | 	mov	arg01, #0
1a3b4     13 15 02 F6 | 	mov	arg02, local01
1a3b8     00 16 06 F6 | 	mov	arg03, #0
1a3bc     23 18 06 F6 | 	mov	arg04, #35
1a3c0     E0 11 B1 FD | 	call	#__system___basic_print_float
1a3c4     00 12 06 F6 | 	mov	arg01, #0
1a3c8     0A 14 06 F6 | 	mov	arg02, #10
1a3cc     00 16 06 F6 | 	mov	arg03, #0
1a3d0     DC E9 B0 FD | 	call	#__system___basic_print_char
1a3d4     00 12 06 F6 | 	mov	arg01, #0
1a3d8     D8 39 B1 FD | 	call	#__system___getiolock_0620
1a3dc     FD 00 68 FC | 	wrlong	#0, result1
1a3e0                 | LR__2066
1a3e0                 | '   if t1.result_type=result_string then print t1.result.sresult
1a3e0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a3e4     3C 00 90 5D |  if_ne	jmp	#LR__2067
1a3e8     00 12 06 F6 | 	mov	arg01, #0
1a3ec     C4 39 B1 FD | 	call	#__system___getiolock_0620
1a3f0     FD 12 02 F6 | 	mov	arg01, result1
1a3f4     18 DD B0 FD | 	call	#__system___lockmem
1a3f8     00 12 06 F6 | 	mov	arg01, #0
1a3fc     13 15 02 F6 | 	mov	arg02, local01
1a400     00 16 06 F6 | 	mov	arg03, #0
1a404     00 EA B0 FD | 	call	#__system___basic_print_string
1a408     00 12 06 F6 | 	mov	arg01, #0
1a40c     0A 14 06 F6 | 	mov	arg02, #10
1a410     00 16 06 F6 | 	mov	arg03, #0
1a414     98 E9 B0 FD | 	call	#__system___basic_print_char
1a418     00 12 06 F6 | 	mov	arg01, #0
1a41c     94 39 B1 FD | 	call	#__system___getiolock_0620
1a420     FD 00 68 FC | 	wrlong	#0, result1
1a424                 | LR__2067
1a424                 | LR__2068
1a424                 | ' if r=print_mod_empty then print
1a424     20 2C 0E F2 | 	cmp	local04, #32 wz
1a428     2C 00 90 5D |  if_ne	jmp	#LR__2069
1a42c     00 12 06 F6 | 	mov	arg01, #0
1a430     80 39 B1 FD | 	call	#__system___getiolock_0620
1a434     FD 12 02 F6 | 	mov	arg01, result1
1a438     D4 DC B0 FD | 	call	#__system___lockmem
1a43c     00 12 06 F6 | 	mov	arg01, #0
1a440     0A 14 06 F6 | 	mov	arg02, #10
1a444     00 16 06 F6 | 	mov	arg03, #0
1a448     64 E9 B0 FD | 	call	#__system___basic_print_char
1a44c     00 12 06 F6 | 	mov	arg01, #0
1a450     60 39 B1 FD | 	call	#__system___getiolock_0620
1a454     FD 00 68 FC | 	wrlong	#0, result1
1a458                 | LR__2069
1a458                 | LR__2070
1a458     A7 F0 03 F6 | 	mov	ptra, fp
1a45c     B2 00 A0 FD | 	call	#popregs_
1a460                 | _do_print_ret
1a460     2D 00 64 FD | 	ret
1a464                 | 
1a464                 | ' 
1a464                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
1a464                 | ' 
1a464                 | ' sub do_push
1a464                 | _do_push
1a464                 | ' if stackpointer<maxstack then 
1a464     43 00 00 FF 
1a468     78 E4 05 F1 | 	add	objptr, ##34424
1a46c     F2 00 02 FB | 	rdlong	_var01, objptr
1a470     43 00 00 FF 
1a474     78 E4 85 F1 | 	sub	objptr, ##34424
1a478     01 00 00 FF 
1a47c     00 00 56 F2 | 	cmps	_var01, ##512 wc
1a480     F8 00 90 3D |  if_ae	jmp	#LR__2080
1a484     4A 00 00 FF 
1a488     A0 E4 05 F1 | 	add	objptr, ##38048
1a48c     F2 02 02 FB | 	rdlong	_var02, objptr
1a490     01 05 02 F6 | 	mov	_var03, _var02
1a494     01 04 66 F0 | 	shl	_var03, #1
1a498     01 05 02 F1 | 	add	_var03, _var02
1a49c     02 04 66 F0 | 	shl	_var03, #2
1a4a0     03 00 00 FF 
1a4a4     04 E4 85 F1 | 	sub	objptr, ##1540
1a4a8     F2 04 02 F1 | 	add	_var03, objptr
1a4ac     02 01 02 FB | 	rdlong	_var01, _var03
1a4b0     04 04 06 F1 | 	add	_var03, #4
1a4b4     02 07 02 FB | 	rdlong	_var04, _var03
1a4b8     01 05 02 F6 | 	mov	_var03, _var02
1a4bc     01 04 66 F0 | 	shl	_var03, #1
1a4c0     01 05 02 F1 | 	add	_var03, _var02
1a4c4     02 04 66 F0 | 	shl	_var03, #2
1a4c8     F2 04 02 F1 | 	add	_var03, objptr
1a4cc     08 04 06 F1 | 	add	_var03, #8
1a4d0     02 03 02 FB | 	rdlong	_var02, _var03
1a4d4     04 00 00 FF 
1a4d8     24 E4 85 F1 | 	sub	objptr, ##2084
1a4dc     F2 04 02 FB | 	rdlong	_var03, objptr
1a4e0     02 09 02 F6 | 	mov	_var05, _var03
1a4e4     01 08 66 F0 | 	shl	_var05, #1
1a4e8     02 09 02 F1 | 	add	_var05, _var03
1a4ec     02 08 66 F0 | 	shl	_var05, #2
1a4f0     0C 00 00 FF 
1a4f4     0C E4 85 F1 | 	sub	objptr, ##6156
1a4f8     F2 08 02 F1 | 	add	_var05, objptr
1a4fc     04 01 62 FC | 	wrlong	_var01, _var05
1a500     0C 00 00 FF 
1a504     0C E4 05 F1 | 	add	objptr, ##6156
1a508     F2 08 02 FB | 	rdlong	_var05, objptr
1a50c     04 05 02 F6 | 	mov	_var03, _var05
1a510     01 04 66 F0 | 	shl	_var03, #1
1a514     04 05 02 F1 | 	add	_var03, _var05
1a518     02 04 66 F0 | 	shl	_var03, #2
1a51c     0C 00 00 FF 
1a520     0C E4 85 F1 | 	sub	objptr, ##6156
1a524     F2 04 02 F1 | 	add	_var03, objptr
1a528     04 04 06 F1 | 	add	_var03, #4
1a52c     02 07 62 FC | 	wrlong	_var04, _var03
1a530     0C 00 00 FF 
1a534     0C E4 05 F1 | 	add	objptr, ##6156
1a538     F2 08 02 FB | 	rdlong	_var05, objptr
1a53c     04 07 02 F6 | 	mov	_var04, _var05
1a540     01 06 66 F0 | 	shl	_var04, #1
1a544     04 07 02 F1 | 	add	_var04, _var05
1a548     02 06 66 F0 | 	shl	_var04, #2
1a54c     0C 00 00 FF 
1a550     0C E4 85 F1 | 	sub	objptr, ##6156
1a554     F2 06 02 F1 | 	add	_var04, objptr
1a558     08 06 06 F1 | 	add	_var04, #8
1a55c     03 03 62 FC | 	wrlong	_var02, _var04
1a560     0C 00 00 FF 
1a564     0C E4 05 F1 | 	add	objptr, ##6156
1a568     F2 00 02 FB | 	rdlong	_var01, objptr
1a56c     01 00 06 F1 | 	add	_var01, #1
1a570     F2 00 62 FC | 	wrlong	_var01, objptr
1a574     43 00 00 FF 
1a578     78 E4 85 F1 | 	sub	objptr, ##34424
1a57c                 | LR__2080
1a57c                 | _do_push_ret
1a57c     2D 00 64 FD | 	ret
1a580                 | 
1a580                 | ' 
1a580                 | ' '-------------------- put
1a580                 | ' 
1a580                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
1a580                 | _do_put
1a580     03 4A 05 F6 | 	mov	COUNT_, #3
1a584     A8 00 A0 FD | 	call	#pushregs_
1a588     28 F0 07 F1 | 	add	ptra, #40
1a58c     4A 00 00 FF 
1a590     A0 E4 05 F1 | 	add	objptr, ##38048
1a594     F2 1A 02 FB | 	rdlong	arg05, objptr
1a598     0D 19 02 F6 | 	mov	arg04, arg05
1a59c     01 18 66 F0 | 	shl	arg04, #1
1a5a0     0D 19 02 F1 | 	add	arg04, arg05
1a5a4     02 18 66 F0 | 	shl	arg04, #2
1a5a8     03 00 00 FF 
1a5ac     04 E4 85 F1 | 	sub	objptr, ##1540
1a5b0     F2 18 02 F1 | 	add	arg04, objptr
1a5b4     0C 1B 02 FB | 	rdlong	arg05, arg04
1a5b8     A7 1A 62 FC | 	wrlong	arg05, fp
1a5bc                 | ' 
1a5bc                 | ' numpar=compiledline(lineptr_e).result.uresult
1a5bc                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1a5bc     04 1A 0E F2 | 	cmp	arg05, #4 wz
1a5c0     47 00 00 FF 
1a5c4     9C E4 85 F1 | 	sub	objptr, ##36508
1a5c8     48 00 90 5D |  if_ne	jmp	#LR__2090
1a5cc     50 32 BF FD | 	call	#_pop
1a5d0     FF 1A 02 F6 | 	mov	arg05, result3
1a5d4     1C 4E 05 F1 | 	add	fp, #28
1a5d8     A7 FA 61 FC | 	wrlong	result1, fp
1a5dc     04 4E 05 F1 | 	add	fp, #4
1a5e0     A7 FC 61 FC | 	wrlong	result2, fp
1a5e4     04 4E 05 F1 | 	add	fp, #4
1a5e8     A7 1A 62 FC | 	wrlong	arg05, fp
1a5ec     08 4E 85 F1 | 	sub	fp, #8
1a5f0     A7 12 02 F6 | 	mov	arg01, fp
1a5f4     1C 4E 85 F1 | 	sub	fp, #28
1a5f8     08 34 BF FD | 	call	#_converttoint
1a5fc     52 00 00 FF 
1a600     64 E5 05 F1 | 	add	objptr, ##42340
1a604     F2 FA 61 FC | 	wrlong	result1, objptr
1a608     52 00 00 FF 
1a60c     64 E5 85 F1 | 	sub	objptr, ##42340
1a610     18 00 90 FD | 	jmp	#LR__2091
1a614                 | LR__2090
1a614     52 00 00 FF 
1a618     64 E5 05 F1 | 	add	objptr, ##42340
1a61c     FF FF FF FF 
1a620     F2 FE 6B FC | 	wrlong	##-1, objptr
1a624     52 00 00 FF 
1a628     64 E5 85 F1 | 	sub	objptr, ##42340
1a62c                 | LR__2091
1a62c                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
1a62c     A7 1A 02 FB | 	rdlong	arg05, fp
1a630     03 1A 56 F2 | 	cmps	arg05, #3 wc
1a634     40 00 90 CD |  if_b	jmp	#LR__2092
1a638     E4 31 BF FD | 	call	#_pop
1a63c     FF 1A 02 F6 | 	mov	arg05, result3
1a640     1C 4E 05 F1 | 	add	fp, #28
1a644     A7 FA 61 FC | 	wrlong	result1, fp
1a648     04 4E 05 F1 | 	add	fp, #4
1a64c     A7 FC 61 FC | 	wrlong	result2, fp
1a650     04 4E 05 F1 | 	add	fp, #4
1a654     A7 1A 62 FC | 	wrlong	arg05, fp
1a658     08 4E 85 F1 | 	sub	fp, #8
1a65c     A7 12 02 F6 | 	mov	arg01, fp
1a660     1C 4E 85 F1 | 	sub	fp, #28
1a664     9C 33 BF FD | 	call	#_converttoint
1a668     08 4E 05 F1 | 	add	fp, #8
1a66c     A7 FA 61 FC | 	wrlong	result1, fp
1a670     08 4E 85 F1 | 	sub	fp, #8
1a674     0C 00 90 FD | 	jmp	#LR__2093
1a678                 | LR__2092
1a678     08 4E 05 F1 | 	add	fp, #8
1a67c     A7 02 68 FC | 	wrlong	#1, fp
1a680     08 4E 85 F1 | 	sub	fp, #8
1a684                 | LR__2093
1a684                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
1a684     A7 18 02 FB | 	rdlong	arg04, fp
1a688     02 18 56 F2 | 	cmps	arg04, #2 wc
1a68c     3C 00 90 CD |  if_b	jmp	#LR__2094
1a690     8C 31 BF FD | 	call	#_pop
1a694     FF 18 02 F6 | 	mov	arg04, result3
1a698     1C 4E 05 F1 | 	add	fp, #28
1a69c     A7 FA 61 FC | 	wrlong	result1, fp
1a6a0     04 4E 05 F1 | 	add	fp, #4
1a6a4     A7 FC 61 FC | 	wrlong	result2, fp
1a6a8     04 4E 05 F1 | 	add	fp, #4
1a6ac     A7 18 62 FC | 	wrlong	arg04, fp
1a6b0     08 4E 85 F1 | 	sub	fp, #8
1a6b4     A7 12 02 F6 | 	mov	arg01, fp
1a6b8     1C 4E 85 F1 | 	sub	fp, #28
1a6bc     44 33 BF FD | 	call	#_converttoint
1a6c0     0C 4E 05 F1 | 	add	fp, #12
1a6c4     A7 FA 61 FC | 	wrlong	result1, fp
1a6c8     0C 4E 85 F1 | 	sub	fp, #12
1a6cc                 | LR__2094
1a6cc     50 31 BF FD | 	call	#_pop
1a6d0     FF 18 02 F6 | 	mov	arg04, result3
1a6d4     1C 4E 05 F1 | 	add	fp, #28
1a6d8     A7 FA 61 FC | 	wrlong	result1, fp
1a6dc     04 4E 05 F1 | 	add	fp, #4
1a6e0     A7 FC 61 FC | 	wrlong	result2, fp
1a6e4     04 4E 05 F1 | 	add	fp, #4
1a6e8     A7 18 62 FC | 	wrlong	arg04, fp
1a6ec     08 4E 85 F1 | 	sub	fp, #8
1a6f0     A7 12 02 F6 | 	mov	arg01, fp
1a6f4     1C 4E 85 F1 | 	sub	fp, #28
1a6f8     08 33 BF FD | 	call	#_converttoint
1a6fc     04 4E 05 F1 | 	add	fp, #4
1a700     A7 FA 61 FC | 	wrlong	result1, fp
1a704     10 4E 05 F1 | 	add	fp, #16
1a708     A7 26 02 FB | 	rdlong	local01, fp
1a70c     14 4E 85 F1 | 	sub	fp, #20
1a710     02 26 66 F0 | 	shl	local01, #2
1a714     50 00 00 FF 
1a718     E4 E4 05 F1 | 	add	objptr, ##41188
1a71c     F2 26 02 F1 | 	add	local01, objptr
1a720     13 01 68 FC | 	wrlong	#0, local01
1a724                 | ' t1=pop() : channel=converttoint(t1)
1a724                 | ' getres(j)=0
1a724                 | ' if pos>=0 then
1a724     02 00 00 FF 
1a728     80 E4 05 F1 | 	add	objptr, ##1152
1a72c     F2 28 02 FB | 	rdlong	local02, objptr
1a730     52 00 00 FF 
1a734     64 E5 85 F1 | 	sub	objptr, ##42340
1a738     00 28 56 F2 | 	cmps	local02, #0 wc
1a73c     C0 01 90 CD |  if_b	jmp	#LR__2100
1a740     10 4E 05 F1 | 	add	fp, #16
1a744     A7 00 68 FC | 	wrlong	#0, fp
1a748     10 4E 85 F1 | 	sub	fp, #16
1a74c                 | '    i=0: do
1a74c                 | LR__2095
1a74c     14 4E 05 F1 | 	add	fp, #20
1a750     A7 00 68 FC | 	wrlong	#0, fp
1a754     14 4E 85 F1 | 	sub	fp, #20
1a758                 | '    j=0: do    
1a758                 | LR__2096
1a758                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1a758     0C 4E 05 F1 | 	add	fp, #12
1a75c     A7 28 02 FB | 	rdlong	local02, fp
1a760     0C 4E 85 F1 | 	sub	fp, #12
1a764     00 04 00 FF 
1a768     00 28 56 F2 | 	cmps	local02, ##524288 wc
1a76c     4C 00 90 3D |  if_ae	jmp	#LR__2097
1a770     14 4E 05 F1 | 	add	fp, #20
1a774     A7 28 02 FB | 	rdlong	local02, fp
1a778     14 27 02 F6 | 	mov	local01, local02
1a77c     4E 00 00 FF 
1a780     D4 E4 05 F1 | 	add	objptr, ##40148
1a784     F2 26 02 F1 | 	add	local01, objptr
1a788     08 4E 85 F1 | 	sub	fp, #8
1a78c     A7 12 02 FB | 	rdlong	arg01, fp
1a790     04 4E 05 F1 | 	add	fp, #4
1a794     A7 18 02 FB | 	rdlong	arg04, fp
1a798     0A 18 66 F0 | 	shl	arg04, #10
1a79c     0C 13 02 F1 | 	add	arg01, arg04
1a7a0     10 4E 85 F1 | 	sub	fp, #16
1a7a4     14 13 02 F1 | 	add	arg01, local02
1a7a8     09 FB C1 FA | 	rdbyte	result1, arg01
1a7ac     4E 00 00 FF 
1a7b0     D4 E4 85 F1 | 	sub	objptr, ##40148
1a7b4     13 FB 41 FC | 	wrbyte	result1, local01
1a7b8     48 00 90 FD | 	jmp	#LR__2098
1a7bc                 | LR__2097
1a7bc     14 4E 05 F1 | 	add	fp, #20
1a7c0     A7 28 02 FB | 	rdlong	local02, fp
1a7c4     14 27 02 F6 | 	mov	local01, local02
1a7c8     4E 00 00 FF 
1a7cc     D4 E4 05 F1 | 	add	objptr, ##40148
1a7d0     F2 26 02 F1 | 	add	local01, objptr
1a7d4     08 4E 85 F1 | 	sub	fp, #8
1a7d8     A7 12 02 FB | 	rdlong	arg01, fp
1a7dc     04 4E 05 F1 | 	add	fp, #4
1a7e0     A7 18 02 FB | 	rdlong	arg04, fp
1a7e4     0A 18 66 F0 | 	shl	arg04, #10
1a7e8     0C 13 02 F1 | 	add	arg01, arg04
1a7ec     10 4E 85 F1 | 	sub	fp, #16
1a7f0     14 13 02 F1 | 	add	arg01, local02
1a7f4     4E 00 00 FF 
1a7f8     D4 E4 85 F1 | 	sub	objptr, ##40148
1a7fc     34 A1 B0 FD | 	call	#_pspeek
1a800     13 FB 41 FC | 	wrbyte	result1, local01
1a804                 | LR__2098
1a804     14 4E 05 F1 | 	add	fp, #20
1a808     A7 28 02 FB | 	rdlong	local02, fp
1a80c     01 28 06 F1 | 	add	local02, #1
1a810     A7 28 62 FC | 	wrlong	local02, fp
1a814     14 4E 85 F1 | 	sub	fp, #20
1a818     02 00 00 FF 
1a81c     00 28 56 F2 | 	cmps	local02, ##1024 wc
1a820     2C 00 90 3D |  if_ae	jmp	#LR__2099
1a824     10 4E 05 F1 | 	add	fp, #16
1a828     A7 26 02 FB | 	rdlong	local01, fp
1a82c     0A 26 66 F0 | 	shl	local01, #10
1a830     04 4E 05 F1 | 	add	fp, #4
1a834     A7 28 02 FB | 	rdlong	local02, fp
1a838     14 27 02 F1 | 	add	local01, local02
1a83c     0C 4E 85 F1 | 	sub	fp, #12
1a840     A7 28 02 FB | 	rdlong	local02, fp
1a844     08 4E 85 F1 | 	sub	fp, #8
1a848     14 27 5A F2 | 	cmps	local01, local02 wcz
1a84c     08 FF 9F ED |  if_be	jmp	#LR__2096
1a850                 | LR__2099
1a850                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
1a850     04 4E 05 F1 | 	add	fp, #4
1a854     A7 12 02 FB | 	rdlong	arg01, fp
1a858     52 00 00 FF 
1a85c     64 E5 05 F1 | 	add	objptr, ##42340
1a860     F2 14 02 FB | 	rdlong	arg02, objptr
1a864     01 14 06 F1 | 	add	arg02, #1
1a868     04 00 00 FF 
1a86c     90 E4 85 F1 | 	sub	objptr, ##2192
1a870     F2 16 02 F6 | 	mov	arg03, objptr
1a874     4E 00 00 FF 
1a878     D4 E4 85 F1 | 	sub	objptr, ##40148
1a87c     04 4E 05 F1 | 	add	fp, #4
1a880     A7 18 02 FB | 	rdlong	arg04, fp
1a884     08 4E 85 F1 | 	sub	fp, #8
1a888     01 1A 06 F6 | 	mov	arg05, #1
1a88c     88 E6 B0 FD | 	call	#__system___basic_put
1a890     18 4E 05 F1 | 	add	fp, #24
1a894     A7 FA 61 FC | 	wrlong	result1, fp
1a898     14 4E 85 F1 | 	sub	fp, #20
1a89c     A7 26 02 FB | 	rdlong	local01, fp
1a8a0     02 26 66 F0 | 	shl	local01, #2
1a8a4     50 00 00 FF 
1a8a8     E4 E4 05 F1 | 	add	objptr, ##41188
1a8ac     F2 26 02 F1 | 	add	local01, objptr
1a8b0     13 FB 61 FC | 	wrlong	result1, local01
1a8b4                 | '    if 1024*i+j>amount then exit loop
1a8b4     0C 4E 05 F1 | 	add	fp, #12
1a8b8     A7 28 02 FB | 	rdlong	local02, fp
1a8bc     0A 28 66 F0 | 	shl	local02, #10
1a8c0     04 4E 05 F1 | 	add	fp, #4
1a8c4     A7 26 02 FB | 	rdlong	local01, fp
1a8c8     13 29 02 F1 | 	add	local02, local01
1a8cc     0C 4E 85 F1 | 	sub	fp, #12
1a8d0     A7 26 02 FB | 	rdlong	local01, fp
1a8d4     08 4E 85 F1 | 	sub	fp, #8
1a8d8     13 29 5A F2 | 	cmps	local02, local01 wcz
1a8dc     50 00 00 FF 
1a8e0     E4 E4 85 F1 | 	sub	objptr, ##41188
1a8e4     CC 01 90 1D |  if_a	jmp	#LR__2107
1a8e8     10 4E 05 F1 | 	add	fp, #16
1a8ec     A7 28 02 FB | 	rdlong	local02, fp
1a8f0     01 28 06 F1 | 	add	local02, #1
1a8f4     A7 28 62 FC | 	wrlong	local02, fp
1a8f8     10 4E 85 F1 | 	sub	fp, #16
1a8fc     4C FE 9F FD | 	jmp	#LR__2095
1a900                 | LR__2100
1a900     10 4E 05 F1 | 	add	fp, #16
1a904     A7 00 68 FC | 	wrlong	#0, fp
1a908     10 4E 85 F1 | 	sub	fp, #16
1a90c                 | '    i=0: do
1a90c                 | LR__2101
1a90c     14 4E 05 F1 | 	add	fp, #20
1a910     A7 00 68 FC | 	wrlong	#0, fp
1a914     14 4E 85 F1 | 	sub	fp, #20
1a918                 | '    j=0: do  
1a918                 | LR__2102
1a918                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1a918     0C 4E 05 F1 | 	add	fp, #12
1a91c     A7 28 02 FB | 	rdlong	local02, fp
1a920     0C 4E 85 F1 | 	sub	fp, #12
1a924     00 04 00 FF 
1a928     00 28 56 F2 | 	cmps	local02, ##524288 wc
1a92c     4C 00 90 3D |  if_ae	jmp	#LR__2103
1a930     14 4E 05 F1 | 	add	fp, #20
1a934     A7 28 02 FB | 	rdlong	local02, fp
1a938     14 27 02 F6 | 	mov	local01, local02
1a93c     4E 00 00 FF 
1a940     D4 E4 05 F1 | 	add	objptr, ##40148
1a944     F2 26 02 F1 | 	add	local01, objptr
1a948     08 4E 85 F1 | 	sub	fp, #8
1a94c     A7 12 02 FB | 	rdlong	arg01, fp
1a950     04 4E 05 F1 | 	add	fp, #4
1a954     A7 18 02 FB | 	rdlong	arg04, fp
1a958     0A 18 66 F0 | 	shl	arg04, #10
1a95c     0C 13 02 F1 | 	add	arg01, arg04
1a960     10 4E 85 F1 | 	sub	fp, #16
1a964     14 13 02 F1 | 	add	arg01, local02
1a968     09 FB C1 FA | 	rdbyte	result1, arg01
1a96c     4E 00 00 FF 
1a970     D4 E4 85 F1 | 	sub	objptr, ##40148
1a974     13 FB 41 FC | 	wrbyte	result1, local01
1a978     48 00 90 FD | 	jmp	#LR__2104
1a97c                 | LR__2103
1a97c     14 4E 05 F1 | 	add	fp, #20
1a980     A7 28 02 FB | 	rdlong	local02, fp
1a984     14 27 02 F6 | 	mov	local01, local02
1a988     4E 00 00 FF 
1a98c     D4 E4 05 F1 | 	add	objptr, ##40148
1a990     F2 26 02 F1 | 	add	local01, objptr
1a994     08 4E 85 F1 | 	sub	fp, #8
1a998     A7 12 02 FB | 	rdlong	arg01, fp
1a99c     04 4E 05 F1 | 	add	fp, #4
1a9a0     A7 18 02 FB | 	rdlong	arg04, fp
1a9a4     0A 18 66 F0 | 	shl	arg04, #10
1a9a8     0C 13 02 F1 | 	add	arg01, arg04
1a9ac     10 4E 85 F1 | 	sub	fp, #16
1a9b0     14 13 02 F1 | 	add	arg01, local02
1a9b4     4E 00 00 FF 
1a9b8     D4 E4 85 F1 | 	sub	objptr, ##40148
1a9bc     74 9F B0 FD | 	call	#_pspeek
1a9c0     13 FB 41 FC | 	wrbyte	result1, local01
1a9c4                 | LR__2104
1a9c4     14 4E 05 F1 | 	add	fp, #20
1a9c8     A7 28 02 FB | 	rdlong	local02, fp
1a9cc     01 28 06 F1 | 	add	local02, #1
1a9d0     A7 28 62 FC | 	wrlong	local02, fp
1a9d4     14 4E 85 F1 | 	sub	fp, #20
1a9d8     02 00 00 FF 
1a9dc     00 28 56 F2 | 	cmps	local02, ##1024 wc
1a9e0     2C 00 90 3D |  if_ae	jmp	#LR__2105
1a9e4     10 4E 05 F1 | 	add	fp, #16
1a9e8     A7 26 02 FB | 	rdlong	local01, fp
1a9ec     0A 26 66 F0 | 	shl	local01, #10
1a9f0     04 4E 05 F1 | 	add	fp, #4
1a9f4     A7 28 02 FB | 	rdlong	local02, fp
1a9f8     14 27 02 F1 | 	add	local01, local02
1a9fc     0C 4E 85 F1 | 	sub	fp, #12
1aa00     A7 28 02 FB | 	rdlong	local02, fp
1aa04     08 4E 85 F1 | 	sub	fp, #8
1aa08     14 27 5A F2 | 	cmps	local01, local02 wcz
1aa0c     08 FF 9F ED |  if_be	jmp	#LR__2102
1aa10                 | LR__2105
1aa10                 | '    put #channel,,block(0),amount, r : getres(channel)=r
1aa10     04 4E 05 F1 | 	add	fp, #4
1aa14     A7 12 02 FB | 	rdlong	arg01, fp
1aa18     4E 00 00 FF 
1aa1c     D4 E4 05 F1 | 	add	objptr, ##40148
1aa20     F2 16 02 F6 | 	mov	arg03, objptr
1aa24     4E 00 00 FF 
1aa28     D4 E4 85 F1 | 	sub	objptr, ##40148
1aa2c     04 4E 05 F1 | 	add	fp, #4
1aa30     A7 18 02 FB | 	rdlong	arg04, fp
1aa34     08 4E 85 F1 | 	sub	fp, #8
1aa38     00 14 06 F6 | 	mov	arg02, #0
1aa3c     01 1A 06 F6 | 	mov	arg05, #1
1aa40     D4 E4 B0 FD | 	call	#__system___basic_put
1aa44     18 4E 05 F1 | 	add	fp, #24
1aa48     A7 FA 61 FC | 	wrlong	result1, fp
1aa4c     14 4E 85 F1 | 	sub	fp, #20
1aa50     A7 26 02 FB | 	rdlong	local01, fp
1aa54     02 26 66 F0 | 	shl	local01, #2
1aa58     50 00 00 FF 
1aa5c     E4 E4 05 F1 | 	add	objptr, ##41188
1aa60     F2 26 02 F1 | 	add	local01, objptr
1aa64     13 FB 61 FC | 	wrlong	result1, local01
1aa68                 | '    if 1024*i+j>amount then exit loop
1aa68     0C 4E 05 F1 | 	add	fp, #12
1aa6c     A7 28 02 FB | 	rdlong	local02, fp
1aa70     0A 28 66 F0 | 	shl	local02, #10
1aa74     04 4E 05 F1 | 	add	fp, #4
1aa78     A7 26 02 FB | 	rdlong	local01, fp
1aa7c     13 29 02 F1 | 	add	local02, local01
1aa80     0C 4E 85 F1 | 	sub	fp, #12
1aa84     A7 2A 02 FB | 	rdlong	local03, fp
1aa88     08 4E 85 F1 | 	sub	fp, #8
1aa8c     15 29 5A F2 | 	cmps	local02, local03 wcz
1aa90     50 00 00 FF 
1aa94     E4 E4 85 F1 | 	sub	objptr, ##41188
1aa98     18 00 90 1D |  if_a	jmp	#LR__2106
1aa9c     10 4E 05 F1 | 	add	fp, #16
1aaa0     A7 28 02 FB | 	rdlong	local02, fp
1aaa4     01 28 06 F1 | 	add	local02, #1
1aaa8     A7 28 62 FC | 	wrlong	local02, fp
1aaac     10 4E 85 F1 | 	sub	fp, #16
1aab0     58 FE 9F FD | 	jmp	#LR__2101
1aab4                 | LR__2106
1aab4                 | LR__2107
1aab4     A7 F0 03 F6 | 	mov	ptra, fp
1aab8     B2 00 A0 FD | 	call	#popregs_
1aabc                 | _do_put_ret
1aabc     2D 00 64 FD | 	ret
1aac0                 | 
1aac0                 | ' 
1aac0                 | ' '-------------------- rad
1aac0                 | ' 
1aac0                 | ' sub do_rad
1aac0                 | _do_rad
1aac0     52 00 00 FF 
1aac4     00 E5 05 F1 | 	add	objptr, ##42240
1aac8     00 C0 9F FF 
1aacc     F2 00 68 FC | 	wrlong	##1065353216, objptr
1aad0     04 E4 05 F1 | 	add	objptr, #4
1aad4     00 C0 9F FF 
1aad8     F2 00 68 FC | 	wrlong	##1065353216, objptr
1aadc     52 00 00 FF 
1aae0     04 E5 85 F1 | 	sub	objptr, ##42244
1aae4                 | _do_rad_ret
1aae4     2D 00 64 FD | 	ret
1aae8                 | 
1aae8                 | ' 
1aae8                 | ' '-------------------- rdpin
1aae8                 | ' 
1aae8                 | ' sub do_rdpin
1aae8                 | _do_rdpin
1aae8     00 4A 05 F6 | 	mov	COUNT_, #0
1aaec     A8 00 A0 FD | 	call	#pushregs_
1aaf0     0C F0 07 F1 | 	add	ptra, #12
1aaf4     28 2D BF FD | 	call	#_pop
1aaf8     A7 FA 61 FC | 	wrlong	result1, fp
1aafc     04 4E 05 F1 | 	add	fp, #4
1ab00     A7 FC 61 FC | 	wrlong	result2, fp
1ab04     04 4E 05 F1 | 	add	fp, #4
1ab08     A7 FE 61 FC | 	wrlong	result3, fp
1ab0c     08 4E 85 F1 | 	sub	fp, #8
1ab10     A7 12 02 F6 | 	mov	arg01, fp
1ab14     EC 2E BF FD | 	call	#_converttoint
1ab18     FD FA 89 FA | 	rdpin	result1, result1
1ab1c     52 00 00 FF 
1ab20     68 E5 05 F1 | 	add	objptr, ##42344
1ab24     F2 FA 61 FC | 	wrlong	result1, objptr
1ab28     52 00 00 FF 
1ab2c     68 E5 85 F1 | 	sub	objptr, ##42344
1ab30     08 4E 05 F1 | 	add	fp, #8
1ab34     A7 3A 68 FC | 	wrlong	#29, fp
1ab38     08 4E 85 F1 | 	sub	fp, #8
1ab3c     A7 08 68 FC | 	wrlong	#4, fp
1ab40     A7 12 02 F6 | 	mov	arg01, fp
1ab44     70 2D BF FD | 	call	#_push
1ab48     A7 F0 03 F6 | 	mov	ptra, fp
1ab4c     B2 00 A0 FD | 	call	#popregs_
1ab50                 | _do_rdpin_ret
1ab50     2D 00 64 FD | 	ret
1ab54                 | 
1ab54                 | ' 
1ab54                 | ' ' ----------------  read
1ab54                 | ' 
1ab54                 | ' function read_next_line() as string
1ab54                 | _read_next_line
1ab54     07 4A 05 F6 | 	mov	COUNT_, #7
1ab58     A8 00 A0 FD | 	call	#pushregs_
1ab5c                 | ' if dataptr=$7FFFFFFF then return("")
1ab5c     50 00 00 FF 
1ab60     4C E5 05 F1 | 	add	objptr, ##41292
1ab64     F2 26 02 FB | 	rdlong	local01, objptr
1ab68     50 00 00 FF 
1ab6c     4C E5 85 F1 | 	sub	objptr, ##41292
1ab70     FF FF 3F FF 
1ab74     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
1ab78     B6 01 00 AF 
1ab7c     98 FA 05 A6 |  if_e	mov	result1, ##@LR__5889
1ab80     BC 01 90 AD |  if_e	jmp	#LR__2117
1ab84                 | ' do
1ab84                 | LR__2110
1ab84     50 00 00 FF 
1ab88     28 E5 05 F1 | 	add	objptr, ##41256
1ab8c     F2 12 02 F6 | 	mov	arg01, objptr
1ab90     24 E4 05 F1 | 	add	objptr, #36
1ab94     F2 14 02 FB | 	rdlong	arg02, objptr
1ab98     24 16 06 F6 | 	mov	arg03, #36
1ab9c     45 00 00 FF 
1aba0     80 E4 85 F1 | 	sub	objptr, ##35456
1aba4     C4 C8 B0 FD | 	call	#_psram_spin2_read1
1aba8                 | '  ' print dataptr
1aba8                 | '   psram.read1(varptr(dataheader),dataptr,36) 
1aba8                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
1aba8     45 00 00 FF 
1abac     5C E4 05 F1 | 	add	objptr, ##35420
1abb0     F2 26 02 FB | 	rdlong	local01, objptr
1abb4     50 00 00 FF 
1abb8     28 E5 85 F1 | 	sub	objptr, ##41256
1abbc     FF FF 7F FF 
1abc0     FF 27 0E F2 | 	cmp	local01, ##-1 wz
1abc4     50 00 00 5F 
1abc8     3C E5 05 51 |  if_ne	add	objptr, ##41276
1abcc     F2 26 02 5B |  if_ne	rdlong	local01, objptr
1abd0     10 E4 05 51 |  if_ne	add	objptr, #16
1abd4     F2 26 62 5C |  if_ne	wrlong	local01, objptr
1abd8     50 00 00 5F 
1abdc     4C E5 85 51 |  if_ne	sub	objptr, ##41292
1abe0     50 00 00 FF 
1abe4     3C E5 05 F1 | 	add	objptr, ##41276
1abe8     F2 26 02 FB | 	rdlong	local01, objptr
1abec     50 00 00 FF 
1abf0     3C E5 85 F1 | 	sub	objptr, ##41276
1abf4     FF FF 3F FF 
1abf8     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
1abfc     50 00 00 5F 
1ac00     28 E5 05 51 |  if_ne	add	objptr, ##41256
1ac04     F2 28 02 5B |  if_ne	rdlong	local02, objptr
1ac08     50 00 00 5F 
1ac0c     28 E5 85 51 |  if_ne	sub	objptr, ##41256
1ac10     FF FF 7F 5F 
1ac14     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
1ac18     50 00 00 5F 
1ac1c     48 E5 05 51 |  if_ne	add	objptr, ##41288
1ac20     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
1ac24     50 00 00 5F 
1ac28     48 E5 85 51 |  if_ne	sub	objptr, ##41288
1ac2c     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
1ac30     50 FF 9F 5D |  if_ne	jmp	#LR__2110
1ac34                 | ' if dataheader(8)=token_data then 
1ac34     50 00 00 FF 
1ac38     48 E5 05 F1 | 	add	objptr, ##41288
1ac3c     F2 26 02 FB | 	rdlong	local01, objptr
1ac40     50 00 00 FF 
1ac44     48 E5 85 F1 | 	sub	objptr, ##41288
1ac48     B7 26 0E F2 | 	cmp	local01, #183 wz
1ac4c     E0 00 90 5D |  if_ne	jmp	#LR__2115
1ac50     50 00 00 FF 
1ac54     30 E5 05 F1 | 	add	objptr, ##41264
1ac58     F2 26 02 FB | 	rdlong	local01, objptr
1ac5c     02 00 00 FF 
1ac60     18 E4 05 F1 | 	add	objptr, ##1048
1ac64     F2 26 62 FC | 	wrlong	local01, objptr
1ac68     02 00 00 FF 
1ac6c     14 E4 85 F1 | 	sub	objptr, ##1044
1ac70     F2 2C 02 FB | 	rdlong	local04, objptr
1ac74     02 00 00 FF 
1ac78     0C E4 05 F1 | 	add	objptr, ##1036
1ac7c     F2 2C 62 FC | 	wrlong	local04, objptr
1ac80                 | '  'print "data found at line "; dataheader(0)
1ac80                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
1ac80     00 2E 06 F6 | 	mov	local05, #0
1ac84     52 00 00 FF 
1ac88     40 E5 85 F1 | 	sub	objptr, ##42304
1ac8c                 | LR__2111
1ac8c     16 2F 52 F2 | 	cmps	local05, local04 wc
1ac90     3C 00 90 3D |  if_ae	jmp	#LR__2112
1ac94     52 00 00 FF 
1ac98     48 E5 05 F1 | 	add	objptr, ##42312
1ac9c     F2 12 02 FB | 	rdlong	arg01, objptr
1aca0     52 00 00 FF 
1aca4     48 E5 85 F1 | 	sub	objptr, ##42312
1aca8     17 13 02 F1 | 	add	arg01, local05
1acac     84 9C B0 FD | 	call	#_pspeek
1acb0     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
1acb4     9C F6 B0 FD | 	call	#__system__Chr_S
1acb8     FD 14 02 F6 | 	mov	arg02, result1
1acbc     18 13 02 F6 | 	mov	arg01, local06
1acc0     A8 D4 B0 FD | 	call	#__system___string_concat
1acc4     FD 30 02 F6 | 	mov	local06, result1
1acc8     01 2E 06 F1 | 	add	local05, #1
1accc     BC FF 9F FD | 	jmp	#LR__2111
1acd0                 | LR__2112
1acd0     B6 01 00 FF 
1acd4     99 16 06 F6 | 	mov	arg03, ##@LR__5890
1acd8     01 12 06 F6 | 	mov	arg01, #1
1acdc     18 15 02 F6 | 	mov	arg02, local06
1ace0     F4 F9 B0 FD | 	call	#__system__Instr
1ace4     FD 2E 02 F6 | 	mov	local05, result1
1ace8     18 13 02 F6 | 	mov	arg01, local06
1acec     09 33 02 F6 | 	mov	local07, arg01
1acf0     97 06 48 FB | 	callpa	#(@LR__2114-@LR__2113)>>2,fcache_load_ptr_
1acf4                 | LR__2113
1acf4     19 FB C9 FA | 	rdbyte	result1, local07 wz
1acf8     01 32 06 51 |  if_ne	add	local07, #1
1acfc     F4 FF 9F 5D |  if_ne	jmp	#LR__2113
1ad00                 | LR__2114
1ad00     09 33 82 F1 | 	sub	local07, arg01
1ad04     19 15 02 F6 | 	mov	arg02, local07
1ad08     17 15 82 F1 | 	sub	arg02, local05
1ad0c     04 14 86 F1 | 	sub	arg02, #4
1ad10     18 13 02 F6 | 	mov	arg01, local06
1ad14     00 F5 B0 FD | 	call	#__system__Right_S
1ad18     FD 12 02 F6 | 	mov	arg01, result1
1ad1c     00 F9 B0 FD | 	call	#__system__RTrim_S
1ad20     FD 12 02 F6 | 	mov	arg01, result1
1ad24     38 F8 B0 FD | 	call	#__system__LTrim_S
1ad28     FD 30 02 F6 | 	mov	local06, result1
1ad2c     0C 00 90 FD | 	jmp	#LR__2116
1ad30                 | LR__2115
1ad30                 | '   return ("") 'todo proper err
1ad30     B6 01 00 FF 
1ad34     9E FA 05 F6 | 	mov	result1, ##@LR__5891
1ad38     04 00 90 FD | 	jmp	#LR__2117
1ad3c                 | LR__2116
1ad3c                 | ' return readline
1ad3c     18 FB 01 F6 | 	mov	result1, local06
1ad40                 | LR__2117
1ad40     A7 F0 03 F6 | 	mov	ptra, fp
1ad44     B2 00 A0 FD | 	call	#popregs_
1ad48                 | _read_next_line_ret
1ad48     2D 00 64 FD | 	ret
1ad4c                 | 
1ad4c                 | ' 
1ad4c                 | ' sub do_read
1ad4c                 | _do_read
1ad4c     11 4A 05 F6 | 	mov	COUNT_, #17
1ad50     A8 00 A0 FD | 	call	#pushregs_
1ad54     58 F1 07 F1 | 	add	ptra, #344
1ad58     4A 00 00 FF 
1ad5c     A0 E4 05 F1 | 	add	objptr, ##38048
1ad60     F2 FE 01 FB | 	rdlong	result3, objptr
1ad64     FF FC 01 F6 | 	mov	result2, result3
1ad68     01 FC 65 F0 | 	shl	result2, #1
1ad6c     FF FC 01 F1 | 	add	result2, result3
1ad70     02 FC 65 F0 | 	shl	result2, #2
1ad74     03 00 00 FF 
1ad78     04 E4 85 F1 | 	sub	objptr, ##1540
1ad7c     F2 FC 01 F1 | 	add	result2, objptr
1ad80     FE FC 01 FB | 	rdlong	result2, result2
1ad84     08 4E 05 F1 | 	add	fp, #8
1ad88     A7 FC 61 FC | 	wrlong	result2, fp
1ad8c                 | ' 
1ad8c                 | ' 
1ad8c                 | ' numpar=compiledline(lineptr_e).result.uresult
1ad8c                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
1ad8c     08 4E 85 F1 | 	sub	fp, #8
1ad90     01 FC 15 F2 | 	cmp	result2, #1 wc
1ad94     47 00 00 FF 
1ad98     9C E4 85 F1 | 	sub	objptr, ##36508
1ad9c     14 00 90 CD |  if_b	jmp	#LR__2120
1ada0     08 4E 05 F1 | 	add	fp, #8
1ada4     A7 FC 01 FB | 	rdlong	result2, fp
1ada8     08 4E 85 F1 | 	sub	fp, #8
1adac     41 FC 15 F2 | 	cmp	result2, #65 wc
1adb0     50 00 90 CD |  if_b	jmp	#LR__2121
1adb4                 | LR__2120
1adb4     00 12 06 F6 | 	mov	arg01, #0
1adb8     F8 2F B1 FD | 	call	#__system___getiolock_0620
1adbc     FD 12 02 F6 | 	mov	arg01, result1
1adc0     4C D3 B0 FD | 	call	#__system___lockmem
1adc4     B6 01 00 FF 
1adc8     9F 14 06 F6 | 	mov	arg02, ##@LR__5892
1adcc     00 12 06 F6 | 	mov	arg01, #0
1add0     00 16 06 F6 | 	mov	arg03, #0
1add4     30 E0 B0 FD | 	call	#__system___basic_print_string
1add8     00 12 06 F6 | 	mov	arg01, #0
1addc     D4 2F B1 FD | 	call	#__system___getiolock_0620
1ade0     FD 00 68 FC | 	wrlong	#0, result1
1ade4     50 00 00 FF 
1ade8     10 E5 05 F1 | 	add	objptr, ##41232
1adec     F2 14 02 FB | 	rdlong	arg02, objptr
1adf0     50 00 00 FF 
1adf4     10 E5 85 F1 | 	sub	objptr, ##41232
1adf8     27 12 06 F6 | 	mov	arg01, #39
1adfc     BC 98 B0 FD | 	call	#_printerror
1ae00     D0 0C 90 FD | 	jmp	#LR__2171
1ae04                 | LR__2121
1ae04     08 4E 05 F1 | 	add	fp, #8
1ae08     A7 16 02 FB | 	rdlong	arg03, fp
1ae0c     01 16 86 F1 | 	sub	arg03, #1
1ae10     28 4F 05 F1 | 	add	fp, #296
1ae14     A7 16 62 FC | 	wrlong	arg03, fp
1ae18     30 4F 85 F1 | 	sub	fp, #304
1ae1c                 | ' i=numpar-1
1ae1c                 | ' if readline="" then readline=read_next_line() ': print readline
1ae1c     52 00 00 FF 
1ae20     34 E5 05 F1 | 	add	objptr, ##42292
1ae24     F2 12 02 FB | 	rdlong	arg01, objptr
1ae28     52 00 00 FF 
1ae2c     34 E5 85 F1 | 	sub	objptr, ##42292
1ae30     B6 01 00 FF 
1ae34     A9 14 06 F6 | 	mov	arg02, ##@LR__5893
1ae38     FC D2 B0 FD | 	call	#__system___string_cmp
1ae3c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ae40     18 00 90 5D |  if_ne	jmp	#LR__2122
1ae44     0C FD BF FD | 	call	#_read_next_line
1ae48     52 00 00 FF 
1ae4c     34 E5 05 F1 | 	add	objptr, ##42292
1ae50     F2 FA 61 FC | 	wrlong	result1, objptr
1ae54     52 00 00 FF 
1ae58     34 E5 85 F1 | 	sub	objptr, ##42292
1ae5c                 | LR__2122
1ae5c                 | ' if readline="" then printerror(55,runheader(0)) :return
1ae5c     52 00 00 FF 
1ae60     34 E5 05 F1 | 	add	objptr, ##42292
1ae64     F2 12 02 FB | 	rdlong	arg01, objptr
1ae68     52 00 00 FF 
1ae6c     34 E5 85 F1 | 	sub	objptr, ##42292
1ae70     B6 01 00 FF 
1ae74     AA 14 06 F6 | 	mov	arg02, ##@LR__5894
1ae78     BC D2 B0 FD | 	call	#__system___string_cmp
1ae7c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ae80     20 00 90 5D |  if_ne	jmp	#LR__2123
1ae84     50 00 00 FF 
1ae88     10 E5 05 F1 | 	add	objptr, ##41232
1ae8c     F2 14 02 FB | 	rdlong	arg02, objptr
1ae90     50 00 00 FF 
1ae94     10 E5 85 F1 | 	sub	objptr, ##41232
1ae98     37 12 06 F6 | 	mov	arg01, #55
1ae9c     1C 98 B0 FD | 	call	#_printerror
1aea0     30 0C 90 FD | 	jmp	#LR__2171
1aea4                 | LR__2123
1aea4     34 4F 05 F1 | 	add	fp, #308
1aea8     A7 00 68 FC | 	wrlong	#0, fp
1aeac     2C 4F 85 F1 | 	sub	fp, #300
1aeb0     A7 26 02 FB | 	rdlong	local01, fp
1aeb4     01 26 86 F1 | 	sub	local01, #1
1aeb8     28 4F 05 F1 | 	add	fp, #296
1aebc     A7 26 62 FC | 	wrlong	local01, fp
1aec0     30 4F 85 F1 | 	sub	fp, #304
1aec4                 | ' j=0
1aec4                 | ' i=numpar-1
1aec4                 | ' do
1aec4                 | LR__2124
1aec4                 | '   do
1aec4                 | LR__2125
1aec4     52 00 00 FF 
1aec8     34 E5 05 F1 | 	add	objptr, ##42292
1aecc     F2 14 02 FB | 	rdlong	arg02, objptr
1aed0     52 00 00 FF 
1aed4     34 E5 85 F1 | 	sub	objptr, ##42292
1aed8     B6 01 00 FF 
1aedc     AB 16 06 F6 | 	mov	arg03, ##@LR__5895
1aee0     01 12 06 F6 | 	mov	arg01, #1
1aee4     F0 F7 B0 FD | 	call	#__system__Instr
1aee8     0C 4E 05 F1 | 	add	fp, #12
1aeec     A7 FA 61 FC | 	wrlong	result1, fp
1aef0                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
1aef0     0C 4E 85 F1 | 	sub	fp, #12
1aef4     01 FA 15 F2 | 	cmp	result1, #1 wc
1aef8     3C 00 90 CD |  if_b	jmp	#LR__2126
1aefc     52 00 00 FF 
1af00     34 E5 05 F1 | 	add	objptr, ##42292
1af04     F2 12 02 FB | 	rdlong	arg01, objptr
1af08     52 00 00 FF 
1af0c     34 E5 85 F1 | 	sub	objptr, ##42292
1af10     0C 4E 05 F1 | 	add	fp, #12
1af14     A7 14 02 FB | 	rdlong	arg02, fp
1af18     0C 4E 85 F1 | 	sub	fp, #12
1af1c     01 14 86 F1 | 	sub	arg02, #1
1af20     6C F2 B0 FD | 	call	#__system__Left_S
1af24     52 00 00 FF 
1af28     34 E5 05 F1 | 	add	objptr, ##42292
1af2c     F2 FA 61 FC | 	wrlong	result1, objptr
1af30     52 00 00 FF 
1af34     34 E5 85 F1 | 	sub	objptr, ##42292
1af38                 | LR__2126
1af38     52 00 00 FF 
1af3c     34 E5 05 F1 | 	add	objptr, ##42292
1af40     F2 14 02 FB | 	rdlong	arg02, objptr
1af44     52 00 00 FF 
1af48     34 E5 85 F1 | 	sub	objptr, ##42292
1af4c     B6 01 00 FF 
1af50     AD 16 06 F6 | 	mov	arg03, ##@LR__5896
1af54     01 12 06 F6 | 	mov	arg01, #1
1af58     7C F7 B0 FD | 	call	#__system__Instr
1af5c     0C 4E 05 F1 | 	add	fp, #12
1af60     A7 FA 61 FC | 	wrlong	result1, fp
1af64                 | '     comma=instr(1,readline,",")  
1af64                 | '       if comma>0  then 
1af64     0C 4E 85 F1 | 	sub	fp, #12
1af68     01 FA 15 F2 | 	cmp	result1, #1 wc
1af6c     98 00 90 CD |  if_b	jmp	#LR__2129
1af70     52 00 00 FF 
1af74     34 E5 05 F1 | 	add	objptr, ##42292
1af78     F2 12 02 FB | 	rdlong	arg01, objptr
1af7c     52 00 00 FF 
1af80     34 E5 85 F1 | 	sub	objptr, ##42292
1af84     0C 4E 05 F1 | 	add	fp, #12
1af88     A7 14 02 FB | 	rdlong	arg02, fp
1af8c     0C 4E 85 F1 | 	sub	fp, #12
1af90     01 14 86 F1 | 	sub	arg02, #1
1af94     F8 F1 B0 FD | 	call	#__system__Left_S
1af98     04 4E 05 F1 | 	add	fp, #4
1af9c     A7 FA 61 FC | 	wrlong	result1, fp
1afa0     04 4E 85 F1 | 	sub	fp, #4
1afa4     52 00 00 FF 
1afa8     34 E5 05 F1 | 	add	objptr, ##42292
1afac     F2 12 02 FB | 	rdlong	arg01, objptr
1afb0     09 27 02 F6 | 	mov	local01, arg01
1afb4     52 00 00 FF 
1afb8     34 E5 85 F1 | 	sub	objptr, ##42292
1afbc     09 29 02 F6 | 	mov	local02, arg01
1afc0     97 06 48 FB | 	callpa	#(@LR__2128-@LR__2127)>>2,fcache_load_ptr_
1afc4                 | LR__2127
1afc4     14 FB C9 FA | 	rdbyte	result1, local02 wz
1afc8     01 28 06 51 |  if_ne	add	local02, #1
1afcc     F4 FF 9F 5D |  if_ne	jmp	#LR__2127
1afd0                 | LR__2128
1afd0     09 29 82 F1 | 	sub	local02, arg01
1afd4     14 15 02 F6 | 	mov	arg02, local02
1afd8     0C 4E 05 F1 | 	add	fp, #12
1afdc     A7 16 02 FB | 	rdlong	arg03, fp
1afe0     0C 4E 85 F1 | 	sub	fp, #12
1afe4     0B 15 82 F1 | 	sub	arg02, arg03
1afe8     13 13 02 F6 | 	mov	arg01, local01
1afec     28 F2 B0 FD | 	call	#__system__Right_S
1aff0     52 00 00 FF 
1aff4     34 E5 05 F1 | 	add	objptr, ##42292
1aff8     F2 FA 61 FC | 	wrlong	result1, objptr
1affc     52 00 00 FF 
1b000     34 E5 85 F1 | 	sub	objptr, ##42292
1b004     48 00 90 FD | 	jmp	#LR__2130
1b008                 | LR__2129
1b008     52 00 00 FF 
1b00c     34 E5 05 F1 | 	add	objptr, ##42292
1b010     F2 12 02 FB | 	rdlong	arg01, objptr
1b014     52 00 00 FF 
1b018     34 E5 85 F1 | 	sub	objptr, ##42292
1b01c     00 F6 B0 FD | 	call	#__system__RTrim_S
1b020     FD 12 02 F6 | 	mov	arg01, result1
1b024     38 F5 B0 FD | 	call	#__system__LTrim_S
1b028     04 4E 05 F1 | 	add	fp, #4
1b02c     A7 FA 61 FC | 	wrlong	result1, fp
1b030     04 4E 85 F1 | 	sub	fp, #4
1b034     B6 01 00 FF 
1b038     AF 26 06 F6 | 	mov	local01, ##@LR__5897
1b03c     52 00 00 FF 
1b040     34 E5 05 F1 | 	add	objptr, ##42292
1b044     F2 26 62 FC | 	wrlong	local01, objptr
1b048     52 00 00 FF 
1b04c     34 E5 85 F1 | 	sub	objptr, ##42292
1b050                 | LR__2130
1b050                 | '      
1b050                 | '      if part$<>"" then j=j+1
1b050     04 4E 05 F1 | 	add	fp, #4
1b054     A7 12 02 FB | 	rdlong	arg01, fp
1b058     04 4E 85 F1 | 	sub	fp, #4
1b05c     B6 01 00 FF 
1b060     B0 14 06 F6 | 	mov	arg02, ##@LR__5898
1b064     D0 D0 B0 FD | 	call	#__system___string_cmp
1b068     00 FA 0D F2 | 	cmp	result1, #0 wz
1b06c     34 4F 05 51 |  if_ne	add	fp, #308
1b070     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b074     01 26 06 51 |  if_ne	add	local01, #1
1b078     A7 26 62 5C |  if_ne	wrlong	local01, fp
1b07c     34 4F 85 51 |  if_ne	sub	fp, #308
1b080     30 4F 05 F1 | 	add	fp, #304
1b084     A7 26 02 FB | 	rdlong	local01, fp
1b088     02 26 66 F0 | 	shl	local01, #2
1b08c     04 4F 85 F1 | 	sub	fp, #260
1b090     A7 26 02 F1 | 	add	local01, fp
1b094     28 4E 85 F1 | 	sub	fp, #40
1b098     A7 FA 01 FB | 	rdlong	result1, fp
1b09c     13 FB 61 FC | 	wrlong	result1, local01
1b0a0     2C 4F 05 F1 | 	add	fp, #300
1b0a4     A7 26 02 FB | 	rdlong	local01, fp
1b0a8     01 26 86 F1 | 	sub	local01, #1
1b0ac     A7 26 62 FC | 	wrlong	local01, fp
1b0b0     30 4F 85 F1 | 	sub	fp, #304
1b0b4                 | '      args(i)=part$  
1b0b4                 | '      i=i-1
1b0b4                 | '     if readline="" then readline=read_next_line() 
1b0b4     52 00 00 FF 
1b0b8     34 E5 05 F1 | 	add	objptr, ##42292
1b0bc     F2 12 02 FB | 	rdlong	arg01, objptr
1b0c0     52 00 00 FF 
1b0c4     34 E5 85 F1 | 	sub	objptr, ##42292
1b0c8     B6 01 00 FF 
1b0cc     B1 14 06 F6 | 	mov	arg02, ##@LR__5899
1b0d0     64 D0 B0 FD | 	call	#__system___string_cmp
1b0d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b0d8     18 00 90 5D |  if_ne	jmp	#LR__2131
1b0dc     74 FA BF FD | 	call	#_read_next_line
1b0e0     52 00 00 FF 
1b0e4     34 E5 05 F1 | 	add	objptr, ##42292
1b0e8     F2 FA 61 FC | 	wrlong	result1, objptr
1b0ec     52 00 00 FF 
1b0f0     34 E5 85 F1 | 	sub	objptr, ##42292
1b0f4                 | LR__2131
1b0f4     30 4F 05 F1 | 	add	fp, #304
1b0f8     A7 26 02 FB | 	rdlong	local01, fp
1b0fc     30 4F 85 F1 | 	sub	fp, #304
1b100     00 26 56 F2 | 	cmps	local01, #0 wc
1b104     28 00 90 CD |  if_b	jmp	#LR__2132
1b108     52 00 00 FF 
1b10c     34 E5 05 F1 | 	add	objptr, ##42292
1b110     F2 12 02 FB | 	rdlong	arg01, objptr
1b114     52 00 00 FF 
1b118     34 E5 85 F1 | 	sub	objptr, ##42292
1b11c     B6 01 00 FF 
1b120     B2 14 06 F6 | 	mov	arg02, ##@LR__5900
1b124     10 D0 B0 FD | 	call	#__system___string_cmp
1b128     00 FA 0D F2 | 	cmp	result1, #0 wz
1b12c     94 FD 9F 5D |  if_ne	jmp	#LR__2125
1b130                 | LR__2132
1b130     30 4F 05 F1 | 	add	fp, #304
1b134     A7 26 02 FB | 	rdlong	local01, fp
1b138     30 4F 85 F1 | 	sub	fp, #304
1b13c     00 26 56 F2 | 	cmps	local01, #0 wc
1b140     80 FD 9F 3D |  if_ae	jmp	#LR__2124
1b144                 | ' if j<numpar then printerror(55,runheader(0))
1b144     34 4F 05 F1 | 	add	fp, #308
1b148     A7 26 02 FB | 	rdlong	local01, fp
1b14c     2C 4F 85 F1 | 	sub	fp, #300
1b150     A7 16 02 FB | 	rdlong	arg03, fp
1b154     08 4E 85 F1 | 	sub	fp, #8
1b158     0B 27 52 F2 | 	cmps	local01, arg03 wc
1b15c     50 00 00 CF 
1b160     10 E5 05 C1 |  if_b	add	objptr, ##41232
1b164     F2 14 02 CB |  if_b	rdlong	arg02, objptr
1b168     50 00 00 CF 
1b16c     10 E5 85 C1 |  if_b	sub	objptr, ##41232
1b170     37 12 06 C6 |  if_b	mov	arg01, #55
1b174     44 95 B0 CD |  if_b	call	#_printerror
1b178                 | ' 
1b178                 | ' for i=0 to numpar-1
1b178     30 4F 05 F1 | 	add	fp, #304
1b17c     A7 00 68 FC | 	wrlong	#0, fp
1b180     28 4F 85 F1 | 	sub	fp, #296
1b184     A7 2A 02 FB | 	rdlong	local03, fp
1b188     08 4E 85 F1 | 	sub	fp, #8
1b18c                 | LR__2133
1b18c     30 4F 05 F1 | 	add	fp, #304
1b190     A7 2C 02 FB | 	rdlong	local04, fp
1b194     30 4F 85 F1 | 	sub	fp, #304
1b198     16 27 02 F6 | 	mov	local01, local04
1b19c     15 27 52 F2 | 	cmps	local01, local03 wc
1b1a0     30 09 90 3D |  if_ae	jmp	#LR__2170
1b1a4                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1b1a4     30 4F 05 F1 | 	add	fp, #304
1b1a8     A7 16 02 FB | 	rdlong	arg03, fp
1b1ac     02 16 66 F0 | 	shl	arg03, #2
1b1b0     04 4F 85 F1 | 	sub	fp, #260
1b1b4     A7 16 02 F1 | 	add	arg03, fp
1b1b8     0B 13 02 FB | 	rdlong	arg01, arg03
1b1bc     2C 4E 85 F1 | 	sub	fp, #44
1b1c0     B0 B8 BE FD | 	call	#_isnum
1b1c4     FD 2E 02 F6 | 	mov	local05, result1
1b1c8     30 4F 05 F1 | 	add	fp, #304
1b1cc     A7 16 02 FB | 	rdlong	arg03, fp
1b1d0     02 16 66 F0 | 	shl	arg03, #2
1b1d4     04 4F 85 F1 | 	sub	fp, #260
1b1d8     A7 30 02 F6 | 	mov	local06, fp
1b1dc     A7 16 02 F1 | 	add	arg03, fp
1b1e0     0B 13 02 FB | 	rdlong	arg01, arg03
1b1e4     2C 4E 85 F1 | 	sub	fp, #44
1b1e8     74 BC BE FD | 	call	#_isint
1b1ec     FD 2E 2A F5 | 	andn	local05, result1 wz
1b1f0     52 00 00 5F 
1b1f4     68 E5 05 51 |  if_ne	add	objptr, ##42344
1b1f8     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
1b1fc     52 00 00 5F 
1b200     68 E5 85 51 |  if_ne	sub	objptr, ##42344
1b204                 | '   if isint(args(i)) then r=result_int 
1b204     30 4F 05 F1 | 	add	fp, #304
1b208     A7 2E 02 FB | 	rdlong	local05, fp
1b20c     02 2E 66 F0 | 	shl	local05, #2
1b210     04 4F 85 F1 | 	sub	fp, #260
1b214     A7 2E 02 F1 | 	add	local05, fp
1b218     17 13 02 FB | 	rdlong	arg01, local05
1b21c     2C 4E 85 F1 | 	sub	fp, #44
1b220     3C BC BE FD | 	call	#_isint
1b224     00 FA 0D F2 | 	cmp	result1, #0 wz
1b228     52 00 00 5F 
1b22c     68 E5 05 51 |  if_ne	add	objptr, ##42344
1b230     F2 38 68 5C |  if_ne	wrlong	#28, objptr
1b234     52 00 00 5F 
1b238     68 E5 85 51 |  if_ne	sub	objptr, ##42344
1b23c                 | '   if isdec(args(i)) then r=result_uint 
1b23c     30 4F 05 F1 | 	add	fp, #304
1b240     A7 2E 02 FB | 	rdlong	local05, fp
1b244     02 2E 66 F0 | 	shl	local05, #2
1b248     04 4F 85 F1 | 	sub	fp, #260
1b24c     A7 2E 02 F1 | 	add	local05, fp
1b250     17 13 02 FB | 	rdlong	arg01, local05
1b254     2C 4E 85 F1 | 	sub	fp, #44
1b258     A8 BE BE FD | 	call	#_isdec
1b25c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b260     52 00 00 5F 
1b264     68 E5 05 51 |  if_ne	add	objptr, ##42344
1b268     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
1b26c     52 00 00 5F 
1b270     68 E5 85 51 |  if_ne	sub	objptr, ##42344
1b274                 | '   if not isnum(args(i)) then 
1b274     30 4F 05 F1 | 	add	fp, #304
1b278     A7 2E 02 FB | 	rdlong	local05, fp
1b27c     02 2E 66 F0 | 	shl	local05, #2
1b280     04 4F 85 F1 | 	sub	fp, #260
1b284     A7 2E 02 F1 | 	add	local05, fp
1b288     17 13 02 FB | 	rdlong	arg01, local05
1b28c     2C 4E 85 F1 | 	sub	fp, #44
1b290     E0 B7 BE FD | 	call	#_isnum
1b294     FD 2E 22 F6 | 	not	local05, result1
1b298     00 2E 0E F2 | 	cmp	local05, #0 wz
1b29c     4C 01 90 AD |  if_e	jmp	#LR__2138
1b2a0     52 00 00 FF 
1b2a4     68 E5 05 F1 | 	add	objptr, ##42344
1b2a8     F2 56 68 FC | 	wrlong	#43, objptr
1b2ac     52 00 00 FF 
1b2b0     68 E5 85 F1 | 	sub	objptr, ##42344
1b2b4     30 4F 05 F1 | 	add	fp, #304
1b2b8     A7 16 02 FB | 	rdlong	arg03, fp
1b2bc     02 16 66 F0 | 	shl	arg03, #2
1b2c0     04 4F 85 F1 | 	sub	fp, #260
1b2c4     A7 16 02 F1 | 	add	arg03, fp
1b2c8     0B 13 02 FB | 	rdlong	arg01, arg03
1b2cc     2C 4E 85 F1 | 	sub	fp, #44
1b2d0     09 29 02 F6 | 	mov	local02, arg01
1b2d4     97 06 48 FB | 	callpa	#(@LR__2135-@LR__2134)>>2,fcache_load_ptr_
1b2d8                 | LR__2134
1b2d8     14 FB C9 FA | 	rdbyte	result1, local02 wz
1b2dc     01 28 06 51 |  if_ne	add	local02, #1
1b2e0     F4 FF 9F 5D |  if_ne	jmp	#LR__2134
1b2e4                 | LR__2135
1b2e4     09 29 82 F1 | 	sub	local02, arg01
1b2e8     14 FB 01 F6 | 	mov	result1, local02
1b2ec     38 4F 05 F1 | 	add	fp, #312
1b2f0     A7 FA 61 FC | 	wrlong	result1, fp
1b2f4     52 00 00 FF 
1b2f8     F0 E4 05 F1 | 	add	objptr, ##42224
1b2fc     F2 12 02 FB | 	rdlong	arg01, objptr
1b300     FD 12 82 F1 | 	sub	arg01, result1
1b304     04 12 86 F1 | 	sub	arg01, #4
1b308     03 12 26 F5 | 	andn	arg01, #3
1b30c     F2 12 62 FC | 	wrlong	arg01, objptr
1b310     52 00 00 FF 
1b314     F0 E4 85 F1 | 	sub	objptr, ##42224
1b318     A7 14 02 FB | 	rdlong	arg02, fp
1b31c     38 4F 85 F1 | 	sub	fp, #312
1b320     38 95 B0 FD | 	call	#_pslpoke
1b324                 | '     pslpoke memtop,l
1b324                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1b324     34 4F 05 F1 | 	add	fp, #308
1b328     A7 02 68 FC | 	wrlong	#1, fp
1b32c     04 4E 05 F1 | 	add	fp, #4
1b330     A7 32 02 FB | 	rdlong	local07, fp
1b334     38 4F 85 F1 | 	sub	fp, #312
1b338     01 32 06 F1 | 	add	local07, #1
1b33c                 | LR__2136
1b33c     34 4F 05 F1 | 	add	fp, #308
1b340     A7 2E 02 FB | 	rdlong	local05, fp
1b344     34 4F 85 F1 | 	sub	fp, #308
1b348     19 2F 52 F2 | 	cmps	local05, local07 wc
1b34c     7C 00 90 3D |  if_ae	jmp	#LR__2137
1b350     52 00 00 FF 
1b354     F0 E4 05 F1 | 	add	objptr, ##42224
1b358     F2 30 02 FB | 	rdlong	local06, objptr
1b35c     52 00 00 FF 
1b360     F0 E4 85 F1 | 	sub	objptr, ##42224
1b364     03 30 06 F1 | 	add	local06, #3
1b368     34 4F 05 F1 | 	add	fp, #308
1b36c     A7 34 02 FB | 	rdlong	local08, fp
1b370     1A 31 02 F1 | 	add	local06, local08
1b374     04 4E 85 F1 | 	sub	fp, #4
1b378     A7 36 02 FB | 	rdlong	local09, fp
1b37c     02 36 66 F0 | 	shl	local09, #2
1b380     04 4F 85 F1 | 	sub	fp, #260
1b384     A7 38 02 F6 | 	mov	local10, fp
1b388     A7 36 02 F1 | 	add	local09, fp
1b38c     1B 13 02 FB | 	rdlong	arg01, local09
1b390     2C 4E 85 F1 | 	sub	fp, #44
1b394     01 3A 06 F6 | 	mov	local11, #1
1b398     1A 15 02 F6 | 	mov	arg02, local08
1b39c     01 16 06 F6 | 	mov	arg03, #1
1b3a0     04 EF B0 FD | 	call	#__system__Mid_S
1b3a4     FD 14 C2 FA | 	rdbyte	arg02, result1
1b3a8     18 13 02 F6 | 	mov	arg01, local06
1b3ac     3C 95 B0 FD | 	call	#_pspoke
1b3b0     34 4F 05 F1 | 	add	fp, #308
1b3b4     A7 30 02 FB | 	rdlong	local06, fp
1b3b8     18 2F 02 F6 | 	mov	local05, local06
1b3bc     01 2E 06 F1 | 	add	local05, #1
1b3c0     A7 2E 62 FC | 	wrlong	local05, fp
1b3c4     34 4F 85 F1 | 	sub	fp, #308
1b3c8     70 FF 9F FD | 	jmp	#LR__2136
1b3cc                 | LR__2137
1b3cc     52 00 00 FF 
1b3d0     F0 E4 05 F1 | 	add	objptr, ##42224
1b3d4     F2 2E 02 FB | 	rdlong	local05, objptr
1b3d8     52 00 00 FF 
1b3dc     F0 E4 85 F1 | 	sub	objptr, ##42224
1b3e0     10 4E 05 F1 | 	add	fp, #16
1b3e4     A7 2E 62 FC | 	wrlong	local05, fp
1b3e8     10 4E 85 F1 | 	sub	fp, #16
1b3ec                 | LR__2138
1b3ec     30 24 BF FD | 	call	#_pop
1b3f0     1C 4E 05 F1 | 	add	fp, #28
1b3f4     A7 FA 61 FC | 	wrlong	result1, fp
1b3f8     04 4E 05 F1 | 	add	fp, #4
1b3fc     A7 FC 61 FC | 	wrlong	result2, fp
1b400     04 4E 05 F1 | 	add	fp, #4
1b404     A7 FE 61 FC | 	wrlong	result3, fp
1b408                 | '   t1=pop() 
1b408                 | '   if i>=numpar-j then
1b408     1C 4E 85 F1 | 	sub	fp, #28
1b40c     A7 2E 02 FB | 	rdlong	local05, fp
1b410     17 3D 02 F6 | 	mov	local12, local05
1b414     2C 4F 05 F1 | 	add	fp, #300
1b418     A7 3E 02 FB | 	rdlong	local13, fp
1b41c     1F 41 02 F6 | 	mov	local14, local13
1b420     20 3D 82 F1 | 	sub	local12, local14
1b424     04 4E 85 F1 | 	sub	fp, #4
1b428     A7 42 02 FB | 	rdlong	local15, fp
1b42c     30 4F 85 F1 | 	sub	fp, #304
1b430     21 45 02 F6 | 	mov	local16, local15
1b434     1E 45 52 F2 | 	cmps	local16, local12 wc
1b438     80 06 90 CD |  if_b	jmp	#LR__2169
1b43c     20 4E 05 F1 | 	add	fp, #32
1b440     A7 3C 02 FB | 	rdlong	local12, fp
1b444     0C 4E 85 F1 | 	sub	fp, #12
1b448     A7 3C 62 FC | 	wrlong	local12, fp
1b44c                 | '     vartype=t1.result.twowords(1)
1b44c                 | '     select case vartype
1b44c     14 4E 85 F1 | 	sub	fp, #20
1b450     1E 47 0A F6 | 	mov	local17, local12 wz
1b454     64 00 90 AD |  if_e	jmp	#LR__2139
1b458     00 47 0E F2 | 	cmp	local17, #256 wz
1b45c     6C 00 90 AD |  if_e	jmp	#LR__2140
1b460     01 47 0E F2 | 	cmp	local17, #257 wz
1b464     74 00 90 AD |  if_e	jmp	#LR__2141
1b468     02 47 0E F2 | 	cmp	local17, #258 wz
1b46c     7C 00 90 AD |  if_e	jmp	#LR__2142
1b470     03 47 0E F2 | 	cmp	local17, #259 wz
1b474     84 00 90 AD |  if_e	jmp	#LR__2143
1b478     04 47 0E F2 | 	cmp	local17, #260 wz
1b47c     8C 00 90 AD |  if_e	jmp	#LR__2144
1b480     05 47 0E F2 | 	cmp	local17, #261 wz
1b484     94 00 90 AD |  if_e	jmp	#LR__2145
1b488     06 47 0E F2 | 	cmp	local17, #262 wz
1b48c     9C 00 90 AD |  if_e	jmp	#LR__2146
1b490     07 47 0E F2 | 	cmp	local17, #263 wz
1b494     A4 00 90 AD |  if_e	jmp	#LR__2147
1b498     08 47 0E F2 | 	cmp	local17, #264 wz
1b49c     AC 00 90 AD |  if_e	jmp	#LR__2148
1b4a0     09 47 0E F2 | 	cmp	local17, #265 wz
1b4a4     B4 00 90 AD |  if_e	jmp	#LR__2149
1b4a8     0A 47 0E F2 | 	cmp	local17, #266 wz
1b4ac     BC 00 90 AD |  if_e	jmp	#LR__2150
1b4b0     0B 47 0E F2 | 	cmp	local17, #267 wz
1b4b4     C4 00 90 AD |  if_e	jmp	#LR__2151
1b4b8     D0 00 90 FD | 	jmp	#LR__2152
1b4bc                 | LR__2139
1b4bc     18 4E 05 F1 | 	add	fp, #24
1b4c0     A7 18 68 FC | 	wrlong	#12, fp
1b4c4     18 4E 85 F1 | 	sub	fp, #24
1b4c8     CC 00 90 FD | 	jmp	#LR__2153
1b4cc                 | LR__2140
1b4cc     18 4E 05 F1 | 	add	fp, #24
1b4d0     A7 18 68 FC | 	wrlong	#12, fp
1b4d4     18 4E 85 F1 | 	sub	fp, #24
1b4d8     BC 00 90 FD | 	jmp	#LR__2153
1b4dc                 | LR__2141
1b4dc     18 4E 05 F1 | 	add	fp, #24
1b4e0     A7 02 68 FC | 	wrlong	#1, fp
1b4e4     18 4E 85 F1 | 	sub	fp, #24
1b4e8     AC 00 90 FD | 	jmp	#LR__2153
1b4ec                 | LR__2142
1b4ec     18 4E 05 F1 | 	add	fp, #24
1b4f0     A7 02 68 FC | 	wrlong	#1, fp
1b4f4     18 4E 85 F1 | 	sub	fp, #24
1b4f8     9C 00 90 FD | 	jmp	#LR__2153
1b4fc                 | LR__2143
1b4fc     18 4E 05 F1 | 	add	fp, #24
1b500     A7 04 68 FC | 	wrlong	#2, fp
1b504     18 4E 85 F1 | 	sub	fp, #24
1b508     8C 00 90 FD | 	jmp	#LR__2153
1b50c                 | LR__2144
1b50c     18 4E 05 F1 | 	add	fp, #24
1b510     A7 04 68 FC | 	wrlong	#2, fp
1b514     18 4E 85 F1 | 	sub	fp, #24
1b518     7C 00 90 FD | 	jmp	#LR__2153
1b51c                 | LR__2145
1b51c     18 4E 05 F1 | 	add	fp, #24
1b520     A7 08 68 FC | 	wrlong	#4, fp
1b524     18 4E 85 F1 | 	sub	fp, #24
1b528     6C 00 90 FD | 	jmp	#LR__2153
1b52c                 | LR__2146
1b52c     18 4E 05 F1 | 	add	fp, #24
1b530     A7 08 68 FC | 	wrlong	#4, fp
1b534     18 4E 85 F1 | 	sub	fp, #24
1b538     5C 00 90 FD | 	jmp	#LR__2153
1b53c                 | LR__2147
1b53c     18 4E 05 F1 | 	add	fp, #24
1b540     A7 10 68 FC | 	wrlong	#8, fp
1b544     18 4E 85 F1 | 	sub	fp, #24
1b548     4C 00 90 FD | 	jmp	#LR__2153
1b54c                 | LR__2148
1b54c     18 4E 05 F1 | 	add	fp, #24
1b550     A7 10 68 FC | 	wrlong	#8, fp
1b554     18 4E 85 F1 | 	sub	fp, #24
1b558     3C 00 90 FD | 	jmp	#LR__2153
1b55c                 | LR__2149
1b55c     18 4E 05 F1 | 	add	fp, #24
1b560     A7 0C 68 FC | 	wrlong	#6, fp
1b564     18 4E 85 F1 | 	sub	fp, #24
1b568     2C 00 90 FD | 	jmp	#LR__2153
1b56c                 | LR__2150
1b56c     18 4E 05 F1 | 	add	fp, #24
1b570     A7 10 68 FC | 	wrlong	#8, fp
1b574     18 4E 85 F1 | 	sub	fp, #24
1b578     1C 00 90 FD | 	jmp	#LR__2153
1b57c                 | LR__2151
1b57c     18 4E 05 F1 | 	add	fp, #24
1b580     A7 0A 68 FC | 	wrlong	#5, fp
1b584     18 4E 85 F1 | 	sub	fp, #24
1b588     0C 00 90 FD | 	jmp	#LR__2153
1b58c                 | LR__2152
1b58c     18 4E 05 F1 | 	add	fp, #24
1b590     A7 18 68 FC | 	wrlong	#12, fp
1b594     18 4E 85 F1 | 	sub	fp, #24
1b598                 | LR__2153
1b598                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1b598     18 4E 05 F1 | 	add	fp, #24
1b59c     A7 3C 02 FB | 	rdlong	local12, fp
1b5a0     18 4E 85 F1 | 	sub	fp, #24
1b5a4     0C 3C 0E F2 | 	cmp	local12, #12 wz
1b5a8     74 01 90 5D |  if_ne	jmp	#LR__2158
1b5ac     1C 4E 05 F1 | 	add	fp, #28
1b5b0     A7 3E 02 FB | 	rdlong	local13, fp
1b5b4     1C 4E 85 F1 | 	sub	fp, #28
1b5b8     00 04 00 FF 
1b5bc     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1b5c0     5C 01 90 3D |  if_ae	jmp	#LR__2158
1b5c4                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1b5c4     52 00 00 FF 
1b5c8     68 E5 05 F1 | 	add	objptr, ##42344
1b5cc     F2 3C 02 FB | 	rdlong	local12, objptr
1b5d0     52 00 00 FF 
1b5d4     68 E5 85 F1 | 	sub	objptr, ##42344
1b5d8     1C 3C 0E F2 | 	cmp	local12, #28 wz
1b5dc     38 00 90 5D |  if_ne	jmp	#LR__2154
1b5e0     1C 4E 05 F1 | 	add	fp, #28
1b5e4     A7 3C 02 FB | 	rdlong	local12, fp
1b5e8     14 4F 05 F1 | 	add	fp, #276
1b5ec     A7 3E 02 FB | 	rdlong	local13, fp
1b5f0     1F 45 02 F6 | 	mov	local16, local13
1b5f4     02 44 66 F0 | 	shl	local16, #2
1b5f8     04 4F 85 F1 | 	sub	fp, #260
1b5fc     A7 42 02 F6 | 	mov	local15, fp
1b600     A7 44 02 F1 | 	add	local16, fp
1b604     22 13 02 FB | 	rdlong	arg01, local16
1b608     00 14 06 F6 | 	mov	arg02, #0
1b60c     2C 4E 85 F1 | 	sub	fp, #44
1b610     F0 FF B0 FD | 	call	#__system____builtin_atoi
1b614     1E FB 61 FC | 	wrlong	result1, local12
1b618                 | LR__2154
1b618                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1b618     52 00 00 FF 
1b61c     68 E5 05 F1 | 	add	objptr, ##42344
1b620     F2 3C 02 FB | 	rdlong	local12, objptr
1b624     52 00 00 FF 
1b628     68 E5 85 F1 | 	sub	objptr, ##42344
1b62c     1D 3C 0E F2 | 	cmp	local12, #29 wz
1b630     38 00 90 5D |  if_ne	jmp	#LR__2155
1b634     1C 4E 05 F1 | 	add	fp, #28
1b638     A7 3C 02 FB | 	rdlong	local12, fp
1b63c     14 4F 05 F1 | 	add	fp, #276
1b640     A7 3E 02 FB | 	rdlong	local13, fp
1b644     1F 45 02 F6 | 	mov	local16, local13
1b648     02 44 66 F0 | 	shl	local16, #2
1b64c     04 4F 85 F1 | 	sub	fp, #260
1b650     A7 42 02 F6 | 	mov	local15, fp
1b654     A7 44 02 F1 | 	add	local16, fp
1b658     22 13 02 FB | 	rdlong	arg01, local16
1b65c     00 14 06 F6 | 	mov	arg02, #0
1b660     2C 4E 85 F1 | 	sub	fp, #44
1b664     9C FF B0 FD | 	call	#__system____builtin_atoi
1b668     1E FB 61 FC | 	wrlong	result1, local12
1b66c                 | LR__2155
1b66c                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1b66c     52 00 00 FF 
1b670     68 E5 05 F1 | 	add	objptr, ##42344
1b674     F2 3C 02 FB | 	rdlong	local12, objptr
1b678     52 00 00 FF 
1b67c     68 E5 85 F1 | 	sub	objptr, ##42344
1b680     1E 3C 0E F2 | 	cmp	local12, #30 wz
1b684     3C 00 90 5D |  if_ne	jmp	#LR__2156
1b688     30 4F 05 F1 | 	add	fp, #304
1b68c     A7 3E 02 FB | 	rdlong	local13, fp
1b690     02 3E 66 F0 | 	shl	local13, #2
1b694     04 4F 85 F1 | 	sub	fp, #260
1b698     A7 44 02 F6 | 	mov	local16, fp
1b69c     A7 3E 02 F1 | 	add	local13, fp
1b6a0     1F 13 02 FB | 	rdlong	arg01, local13
1b6a4     2C 4E 85 F1 | 	sub	fp, #44
1b6a8     F0 00 B1 FD | 	call	#__system____builtin_atof
1b6ac     28 4E 05 F1 | 	add	fp, #40
1b6b0     A7 FA 61 FC | 	wrlong	result1, fp
1b6b4     0C 4E 85 F1 | 	sub	fp, #12
1b6b8     A7 3C 02 FB | 	rdlong	local12, fp
1b6bc     1C 4E 85 F1 | 	sub	fp, #28
1b6c0     1E FB 61 FC | 	wrlong	result1, local12
1b6c4                 | LR__2156
1b6c4                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1b6c4     52 00 00 FF 
1b6c8     68 E5 05 F1 | 	add	objptr, ##42344
1b6cc     F2 3C 02 FB | 	rdlong	local12, objptr
1b6d0     52 00 00 FF 
1b6d4     68 E5 85 F1 | 	sub	objptr, ##42344
1b6d8     2B 3C 0E F2 | 	cmp	local12, #43 wz
1b6dc     18 00 90 5D |  if_ne	jmp	#LR__2157
1b6e0     1C 4E 05 F1 | 	add	fp, #28
1b6e4     A7 12 02 FB | 	rdlong	arg01, fp
1b6e8     0C 4E 85 F1 | 	sub	fp, #12
1b6ec     A7 14 02 FB | 	rdlong	arg02, fp
1b6f0     10 4E 85 F1 | 	sub	fp, #16
1b6f4     09 15 62 FC | 	wrlong	arg02, arg01
1b6f8                 | LR__2157
1b6f8     1C 4E 05 F1 | 	add	fp, #28
1b6fc     A7 12 02 FB | 	rdlong	arg01, fp
1b700     1C 4E 85 F1 | 	sub	fp, #28
1b704     08 12 06 F1 | 	add	arg01, #8
1b708     52 00 00 FF 
1b70c     68 E5 05 F1 | 	add	objptr, ##42344
1b710     F2 14 02 FB | 	rdlong	arg02, objptr
1b714     52 00 00 FF 
1b718     68 E5 85 F1 | 	sub	objptr, ##42344
1b71c     09 15 62 FC | 	wrlong	arg02, arg01
1b720                 | LR__2158
1b720                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1b720     18 4E 05 F1 | 	add	fp, #24
1b724     A7 3C 02 FB | 	rdlong	local12, fp
1b728     18 4E 85 F1 | 	sub	fp, #24
1b72c     0C 3C 0E F2 | 	cmp	local12, #12 wz
1b730     94 01 90 5D |  if_ne	jmp	#LR__2163
1b734     1C 4E 05 F1 | 	add	fp, #28
1b738     A7 3E 02 FB | 	rdlong	local13, fp
1b73c     1C 4E 85 F1 | 	sub	fp, #28
1b740     00 04 00 FF 
1b744     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1b748     7C 01 90 CD |  if_b	jmp	#LR__2163
1b74c                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1b74c     52 00 00 FF 
1b750     68 E5 05 F1 | 	add	objptr, ##42344
1b754     F2 3C 02 FB | 	rdlong	local12, objptr
1b758     52 00 00 FF 
1b75c     68 E5 85 F1 | 	sub	objptr, ##42344
1b760     1C 3C 0E F2 | 	cmp	local12, #28 wz
1b764     40 00 90 5D |  if_ne	jmp	#LR__2159
1b768     1C 4E 05 F1 | 	add	fp, #28
1b76c     A7 3C 02 FB | 	rdlong	local12, fp
1b770     14 4F 05 F1 | 	add	fp, #276
1b774     A7 3E 02 FB | 	rdlong	local13, fp
1b778     1F 45 02 F6 | 	mov	local16, local13
1b77c     02 44 66 F0 | 	shl	local16, #2
1b780     04 4F 85 F1 | 	sub	fp, #260
1b784     A7 42 02 F6 | 	mov	local15, fp
1b788     A7 44 02 F1 | 	add	local16, fp
1b78c     22 13 02 FB | 	rdlong	arg01, local16
1b790     00 14 06 F6 | 	mov	arg02, #0
1b794     2C 4E 85 F1 | 	sub	fp, #44
1b798     68 FE B0 FD | 	call	#__system____builtin_atoi
1b79c     FD 14 02 F6 | 	mov	arg02, result1
1b7a0     1E 13 02 F6 | 	mov	arg01, local12
1b7a4     B4 90 B0 FD | 	call	#_pslpoke
1b7a8                 | LR__2159
1b7a8                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1b7a8     52 00 00 FF 
1b7ac     68 E5 05 F1 | 	add	objptr, ##42344
1b7b0     F2 3C 02 FB | 	rdlong	local12, objptr
1b7b4     52 00 00 FF 
1b7b8     68 E5 85 F1 | 	sub	objptr, ##42344
1b7bc     1D 3C 0E F2 | 	cmp	local12, #29 wz
1b7c0     40 00 90 5D |  if_ne	jmp	#LR__2160
1b7c4     1C 4E 05 F1 | 	add	fp, #28
1b7c8     A7 3C 02 FB | 	rdlong	local12, fp
1b7cc     14 4F 05 F1 | 	add	fp, #276
1b7d0     A7 3E 02 FB | 	rdlong	local13, fp
1b7d4     1F 45 02 F6 | 	mov	local16, local13
1b7d8     02 44 66 F0 | 	shl	local16, #2
1b7dc     04 4F 85 F1 | 	sub	fp, #260
1b7e0     A7 42 02 F6 | 	mov	local15, fp
1b7e4     A7 44 02 F1 | 	add	local16, fp
1b7e8     22 13 02 FB | 	rdlong	arg01, local16
1b7ec     00 14 06 F6 | 	mov	arg02, #0
1b7f0     2C 4E 85 F1 | 	sub	fp, #44
1b7f4     0C FE B0 FD | 	call	#__system____builtin_atoi
1b7f8     FD 14 02 F6 | 	mov	arg02, result1
1b7fc     1E 13 02 F6 | 	mov	arg01, local12
1b800     58 90 B0 FD | 	call	#_pslpoke
1b804                 | LR__2160
1b804                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1b804     52 00 00 FF 
1b808     68 E5 05 F1 | 	add	objptr, ##42344
1b80c     F2 3C 02 FB | 	rdlong	local12, objptr
1b810     52 00 00 FF 
1b814     68 E5 85 F1 | 	sub	objptr, ##42344
1b818     1E 3C 0E F2 | 	cmp	local12, #30 wz
1b81c     4C 00 90 5D |  if_ne	jmp	#LR__2161
1b820     30 4F 05 F1 | 	add	fp, #304
1b824     A7 3E 02 FB | 	rdlong	local13, fp
1b828     02 3E 66 F0 | 	shl	local13, #2
1b82c     04 4F 85 F1 | 	sub	fp, #260
1b830     A7 44 02 F6 | 	mov	local16, fp
1b834     A7 3E 02 F1 | 	add	local13, fp
1b838     1F 13 02 FB | 	rdlong	arg01, local13
1b83c     2C 4E 85 F1 | 	sub	fp, #44
1b840     58 FF B0 FD | 	call	#__system____builtin_atof
1b844     28 4E 05 F1 | 	add	fp, #40
1b848     A7 FA 61 FC | 	wrlong	result1, fp
1b84c     0C 4E 85 F1 | 	sub	fp, #12
1b850     A7 3C 02 FB | 	rdlong	local12, fp
1b854     0C 4E 05 F1 | 	add	fp, #12
1b858     A7 12 02 F6 | 	mov	arg01, fp
1b85c     28 4E 85 F1 | 	sub	fp, #40
1b860     09 15 02 FB | 	rdlong	arg02, arg01
1b864     1E 13 02 F6 | 	mov	arg01, local12
1b868     F0 8F B0 FD | 	call	#_pslpoke
1b86c                 | LR__2161
1b86c                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1b86c     52 00 00 FF 
1b870     68 E5 05 F1 | 	add	objptr, ##42344
1b874     F2 3C 02 FB | 	rdlong	local12, objptr
1b878     52 00 00 FF 
1b87c     68 E5 85 F1 | 	sub	objptr, ##42344
1b880     2B 3C 0E F2 | 	cmp	local12, #43 wz
1b884     18 00 90 5D |  if_ne	jmp	#LR__2162
1b888     1C 4E 05 F1 | 	add	fp, #28
1b88c     A7 12 02 FB | 	rdlong	arg01, fp
1b890     0C 4E 85 F1 | 	sub	fp, #12
1b894     A7 14 02 FB | 	rdlong	arg02, fp
1b898     10 4E 85 F1 | 	sub	fp, #16
1b89c     BC 8F B0 FD | 	call	#_pslpoke
1b8a0                 | LR__2162
1b8a0     1C 4E 05 F1 | 	add	fp, #28
1b8a4     A7 12 02 FB | 	rdlong	arg01, fp
1b8a8     1C 4E 85 F1 | 	sub	fp, #28
1b8ac     08 12 06 F1 | 	add	arg01, #8
1b8b0     52 00 00 FF 
1b8b4     68 E5 05 F1 | 	add	objptr, ##42344
1b8b8     F2 14 02 FB | 	rdlong	arg02, objptr
1b8bc     52 00 00 FF 
1b8c0     68 E5 85 F1 | 	sub	objptr, ##42344
1b8c4     94 8F B0 FD | 	call	#_pslpoke
1b8c8                 | LR__2163
1b8c8                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1b8c8     18 4E 05 F1 | 	add	fp, #24
1b8cc     A7 3C 02 FB | 	rdlong	local12, fp
1b8d0     18 4E 85 F1 | 	sub	fp, #24
1b8d4     05 3C 0E F2 | 	cmp	local12, #5 wz
1b8d8     52 00 00 AF 
1b8dc     68 E5 05 A1 |  if_e	add	objptr, ##42344
1b8e0     F2 40 02 AB |  if_e	rdlong	local14, objptr
1b8e4     52 00 00 AF 
1b8e8     68 E5 85 A1 |  if_e	sub	objptr, ##42344
1b8ec     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1b8f0     18 00 90 5D |  if_ne	jmp	#LR__2164
1b8f4     1C 4E 05 F1 | 	add	fp, #28
1b8f8     A7 12 02 FB | 	rdlong	arg01, fp
1b8fc     0C 4E 85 F1 | 	sub	fp, #12
1b900     A7 14 02 FB | 	rdlong	arg02, fp
1b904     10 4E 85 F1 | 	sub	fp, #16
1b908     50 8F B0 FD | 	call	#_pslpoke
1b90c                 | LR__2164
1b90c                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1b90c     18 4E 05 F1 | 	add	fp, #24
1b910     A7 3C 02 FB | 	rdlong	local12, fp
1b914     18 4E 85 F1 | 	sub	fp, #24
1b918     04 3C 0E F2 | 	cmp	local12, #4 wz
1b91c     54 00 90 5D |  if_ne	jmp	#LR__2165
1b920     52 00 00 FF 
1b924     68 E5 05 F1 | 	add	objptr, ##42344
1b928     F2 40 02 FB | 	rdlong	local14, objptr
1b92c     52 00 00 FF 
1b930     68 E5 85 F1 | 	sub	objptr, ##42344
1b934     2B 40 0E F2 | 	cmp	local14, #43 wz
1b938     38 00 90 AD |  if_e	jmp	#LR__2165
1b93c     1C 4E 05 F1 | 	add	fp, #28
1b940     A7 3C 02 FB | 	rdlong	local12, fp
1b944     14 4F 05 F1 | 	add	fp, #276
1b948     A7 44 02 FB | 	rdlong	local16, fp
1b94c     02 44 66 F0 | 	shl	local16, #2
1b950     04 4F 85 F1 | 	sub	fp, #260
1b954     A7 44 02 F1 | 	add	local16, fp
1b958     22 13 02 FB | 	rdlong	arg01, local16
1b95c     00 14 06 F6 | 	mov	arg02, #0
1b960     2C 4E 85 F1 | 	sub	fp, #44
1b964     9C FC B0 FD | 	call	#__system____builtin_atoi
1b968     FD 14 02 F6 | 	mov	arg02, result1
1b96c     1E 13 02 F6 | 	mov	arg01, local12
1b970     E8 8E B0 FD | 	call	#_pslpoke
1b974                 | LR__2165
1b974                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1b974     18 4E 05 F1 | 	add	fp, #24
1b978     A7 3C 02 FB | 	rdlong	local12, fp
1b97c     18 4E 85 F1 | 	sub	fp, #24
1b980     02 3C 0E F2 | 	cmp	local12, #2 wz
1b984     54 00 90 5D |  if_ne	jmp	#LR__2166
1b988     52 00 00 FF 
1b98c     68 E5 05 F1 | 	add	objptr, ##42344
1b990     F2 40 02 FB | 	rdlong	local14, objptr
1b994     52 00 00 FF 
1b998     68 E5 85 F1 | 	sub	objptr, ##42344
1b99c     2B 40 0E F2 | 	cmp	local14, #43 wz
1b9a0     38 00 90 AD |  if_e	jmp	#LR__2166
1b9a4     1C 4E 05 F1 | 	add	fp, #28
1b9a8     A7 3C 02 FB | 	rdlong	local12, fp
1b9ac     14 4F 05 F1 | 	add	fp, #276
1b9b0     A7 44 02 FB | 	rdlong	local16, fp
1b9b4     02 44 66 F0 | 	shl	local16, #2
1b9b8     04 4F 85 F1 | 	sub	fp, #260
1b9bc     A7 44 02 F1 | 	add	local16, fp
1b9c0     22 13 02 FB | 	rdlong	arg01, local16
1b9c4     00 14 06 F6 | 	mov	arg02, #0
1b9c8     2C 4E 85 F1 | 	sub	fp, #44
1b9cc     34 FC B0 FD | 	call	#__system____builtin_atoi
1b9d0     FD 14 02 F6 | 	mov	arg02, result1
1b9d4     1E 13 02 F6 | 	mov	arg01, local12
1b9d8     C8 8E B0 FD | 	call	#_psdpoke
1b9dc                 | LR__2166
1b9dc                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1b9dc     18 4E 05 F1 | 	add	fp, #24
1b9e0     A7 3C 02 FB | 	rdlong	local12, fp
1b9e4     18 4E 85 F1 | 	sub	fp, #24
1b9e8     01 3C 0E F2 | 	cmp	local12, #1 wz
1b9ec     54 00 90 5D |  if_ne	jmp	#LR__2167
1b9f0     52 00 00 FF 
1b9f4     68 E5 05 F1 | 	add	objptr, ##42344
1b9f8     F2 40 02 FB | 	rdlong	local14, objptr
1b9fc     52 00 00 FF 
1ba00     68 E5 85 F1 | 	sub	objptr, ##42344
1ba04     2B 40 0E F2 | 	cmp	local14, #43 wz
1ba08     38 00 90 AD |  if_e	jmp	#LR__2167
1ba0c     1C 4E 05 F1 | 	add	fp, #28
1ba10     A7 3C 02 FB | 	rdlong	local12, fp
1ba14     14 4F 05 F1 | 	add	fp, #276
1ba18     A7 44 02 FB | 	rdlong	local16, fp
1ba1c     02 44 66 F0 | 	shl	local16, #2
1ba20     04 4F 85 F1 | 	sub	fp, #260
1ba24     A7 44 02 F1 | 	add	local16, fp
1ba28     22 13 02 FB | 	rdlong	arg01, local16
1ba2c     00 14 06 F6 | 	mov	arg02, #0
1ba30     2C 4E 85 F1 | 	sub	fp, #44
1ba34     CC FB B0 FD | 	call	#__system____builtin_atoi
1ba38     FD 14 02 F6 | 	mov	arg02, result1
1ba3c     1E 13 02 F6 | 	mov	arg01, local12
1ba40     A8 8E B0 FD | 	call	#_pspoke
1ba44                 | LR__2167
1ba44                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1ba44     18 4E 05 F1 | 	add	fp, #24
1ba48     A7 3C 02 FB | 	rdlong	local12, fp
1ba4c     18 4E 85 F1 | 	sub	fp, #24
1ba50     06 3C 0E F2 | 	cmp	local12, #6 wz
1ba54     64 00 90 5D |  if_ne	jmp	#LR__2168
1ba58     52 00 00 FF 
1ba5c     68 E5 05 F1 | 	add	objptr, ##42344
1ba60     F2 40 02 FB | 	rdlong	local14, objptr
1ba64     52 00 00 FF 
1ba68     68 E5 85 F1 | 	sub	objptr, ##42344
1ba6c     2B 40 0E F2 | 	cmp	local14, #43 wz
1ba70     48 00 90 AD |  if_e	jmp	#LR__2168
1ba74     30 4F 05 F1 | 	add	fp, #304
1ba78     A7 3E 02 FB | 	rdlong	local13, fp
1ba7c     02 3E 66 F0 | 	shl	local13, #2
1ba80     04 4F 85 F1 | 	sub	fp, #260
1ba84     A7 3E 02 F1 | 	add	local13, fp
1ba88     1F 13 02 FB | 	rdlong	arg01, local13
1ba8c     2C 4E 85 F1 | 	sub	fp, #44
1ba90     08 FD B0 FD | 	call	#__system____builtin_atof
1ba94     28 4E 05 F1 | 	add	fp, #40
1ba98     A7 FA 61 FC | 	wrlong	result1, fp
1ba9c     0C 4E 85 F1 | 	sub	fp, #12
1baa0     A7 3C 02 FB | 	rdlong	local12, fp
1baa4     0C 4E 05 F1 | 	add	fp, #12
1baa8     A7 12 02 F6 | 	mov	arg01, fp
1baac     28 4E 85 F1 | 	sub	fp, #40
1bab0     09 15 02 FB | 	rdlong	arg02, arg01
1bab4     1E 13 02 F6 | 	mov	arg01, local12
1bab8     A0 8D B0 FD | 	call	#_pslpoke
1babc                 | LR__2168
1babc                 | LR__2169
1babc     30 4F 05 F1 | 	add	fp, #304
1bac0     A7 40 02 FB | 	rdlong	local14, fp
1bac4     01 40 06 F1 | 	add	local14, #1
1bac8     A7 40 62 FC | 	wrlong	local14, fp
1bacc     30 4F 85 F1 | 	sub	fp, #304
1bad0     B8 F6 9F FD | 	jmp	#LR__2133
1bad4                 | LR__2170
1bad4                 | LR__2171
1bad4     A7 F0 03 F6 | 	mov	ptra, fp
1bad8     B2 00 A0 FD | 	call	#popregs_
1badc                 | _do_read_ret
1badc     2D 00 64 FD | 	ret
1bae0                 | 
1bae0                 | ' 
1bae0                 | ' '------------------- release
1bae0                 | ' 
1bae0                 | ' sub do_release
1bae0                 | _do_release
1bae0     00 4A 05 F6 | 	mov	COUNT_, #0
1bae4     A8 00 A0 FD | 	call	#pushregs_
1bae8     10 F0 07 F1 | 	add	ptra, #16
1baec     30 1D BF FD | 	call	#_pop
1baf0     FF 14 02 F6 | 	mov	arg02, result3
1baf4     A7 FA 61 FC | 	wrlong	result1, fp
1baf8     04 4E 05 F1 | 	add	fp, #4
1bafc     A7 FC 61 FC | 	wrlong	result2, fp
1bb00     04 4E 05 F1 | 	add	fp, #4
1bb04     A7 14 62 FC | 	wrlong	arg02, fp
1bb08     08 4E 85 F1 | 	sub	fp, #8
1bb0c     A7 12 02 F6 | 	mov	arg01, fp
1bb10     F0 1E BF FD | 	call	#_converttoint
1bb14     0C 4E 05 F1 | 	add	fp, #12
1bb18     A7 FA 61 FC | 	wrlong	result1, fp
1bb1c                 | ' 
1bb1c                 | ' t1=pop()
1bb1c                 | ' channel=converttoint(t1)
1bb1c                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1bb1c     0C 4E 85 F1 | 	sub	fp, #12
1bb20     00 FA 55 F2 | 	cmps	result1, #0 wc
1bb24     44 00 90 CD |  if_b	jmp	#LR__2180
1bb28     0C 4E 05 F1 | 	add	fp, #12
1bb2c     A7 14 02 FB | 	rdlong	arg02, fp
1bb30     0C 4E 85 F1 | 	sub	fp, #12
1bb34     08 14 56 F2 | 	cmps	arg02, #8 wc
1bb38     30 00 90 3D |  if_ae	jmp	#LR__2180
1bb3c     37 00 00 FF 
1bb40     30 E4 05 F1 | 	add	objptr, ##28208
1bb44     F2 12 02 FB | 	rdlong	arg01, objptr
1bb48     37 00 00 FF 
1bb4c     30 E4 85 F1 | 	sub	objptr, ##28208
1bb50     0C 4E 05 F1 | 	add	fp, #12
1bb54     A7 14 02 FB | 	rdlong	arg02, fp
1bb58     0C 4E 85 F1 | 	sub	fp, #12
1bb5c     06 14 66 F0 | 	shl	arg02, #6
1bb60     0A 13 02 F1 | 	add	arg01, arg02
1bb64     2C 12 06 F1 | 	add	arg01, #44
1bb68     09 FF 69 FC | 	wrlong	#255, arg01
1bb6c                 | LR__2180
1bb6c     A7 F0 03 F6 | 	mov	ptra, fp
1bb70     B2 00 A0 FD | 	call	#popregs_
1bb74                 | _do_release_ret
1bb74     2D 00 64 FD | 	ret
1bb78                 | 
1bb78                 | ' 
1bb78                 | ' '------------------- restore
1bb78                 | ' 
1bb78                 | ' sub do_restore()
1bb78                 | _do_restore
1bb78     4A 00 00 FF 
1bb7c     A8 E4 05 F1 | 	add	objptr, ##38056
1bb80     F2 00 02 FB | 	rdlong	_var01, objptr
1bb84     06 00 00 FF 
1bb88     A4 E4 05 F1 | 	add	objptr, ##3236
1bb8c     F2 00 62 FC | 	wrlong	_var01, objptr
1bb90     B6 01 00 FF 
1bb94     B3 00 06 F6 | 	mov	_var01, ##@LR__5901
1bb98     01 00 00 FF 
1bb9c     E8 E5 05 F1 | 	add	objptr, ##1000
1bba0     F2 00 62 FC | 	wrlong	_var01, objptr
1bba4     52 00 00 FF 
1bba8     34 E5 85 F1 | 	sub	objptr, ##42292
1bbac                 | _do_restore_ret
1bbac     2D 00 64 FD | 	ret
1bbb0                 | 
1bbb0                 | ' 
1bbb0                 | ' '------------------- restorepalette
1bbb0                 | ' 
1bbb0                 | ' sub do_restorepalette()
1bbb0                 | _do_restorepalette
1bbb0     70 95 B0 FD | 	call	#_hg010b_spin2_restorepalette
1bbb4                 | _do_restorepalette_ret
1bbb4     2D 00 64 FD | 	ret
1bbb8                 | 
1bbb8                 | ' '------------------- return
1bbb8                 | ' 
1bbb8                 | ' sub do_return()
1bbb8                 | _do_return
1bbb8                 | ' if gosubtop>0 then
1bbb8     50 00 00 FF 
1bbbc     54 E5 05 F1 | 	add	objptr, ##41300
1bbc0     F2 00 02 FB | 	rdlong	_var01, objptr
1bbc4     50 00 00 FF 
1bbc8     54 E5 85 F1 | 	sub	objptr, ##41300
1bbcc     01 00 56 F2 | 	cmps	_var01, #1 wc
1bbd0     8C 00 90 CD |  if_b	jmp	#LR__2190
1bbd4     50 00 00 FF 
1bbd8     54 E5 05 F1 | 	add	objptr, ##41300
1bbdc     F2 00 02 FB | 	rdlong	_var01, objptr
1bbe0     03 00 66 F0 | 	shl	_var01, #3
1bbe4     03 00 00 FF 
1bbe8     88 E5 85 F1 | 	sub	objptr, ##1928
1bbec     F2 00 02 F1 | 	add	_var01, objptr
1bbf0     00 01 02 FB | 	rdlong	_var01, _var01
1bbf4     03 00 00 FF 
1bbf8     0C E5 05 F1 | 	add	objptr, ##1804
1bbfc     F2 00 62 FC | 	wrlong	_var01, objptr
1bc00     7C E4 05 F1 | 	add	objptr, #124
1bc04     F2 00 02 FB | 	rdlong	_var01, objptr
1bc08     03 00 66 F0 | 	shl	_var01, #3
1bc0c     03 00 00 FF 
1bc10     88 E5 85 F1 | 	sub	objptr, ##1928
1bc14     F2 00 02 F1 | 	add	_var01, objptr
1bc18     04 00 06 F1 | 	add	_var01, #4
1bc1c     00 01 02 FB | 	rdlong	_var01, _var01
1bc20     03 00 00 FF 
1bc24     10 E5 05 F1 | 	add	objptr, ##1808
1bc28     F2 00 62 FC | 	wrlong	_var01, objptr
1bc2c     06 00 00 FF 
1bc30     40 E4 85 F1 | 	sub	objptr, ##3136
1bc34     F2 00 02 FB | 	rdlong	_var01, objptr
1bc38     01 00 86 F1 | 	sub	_var01, #1
1bc3c     04 E4 05 F1 | 	add	objptr, #4
1bc40     F2 00 62 FC | 	wrlong	_var01, objptr
1bc44     06 00 00 FF 
1bc48     B4 E4 05 F1 | 	add	objptr, ##3252
1bc4c     F2 00 02 FB | 	rdlong	_var01, objptr
1bc50     01 00 86 F1 | 	sub	_var01, #1
1bc54     F2 00 62 FC | 	wrlong	_var01, objptr
1bc58     50 00 00 FF 
1bc5c     54 E5 85 F1 | 	sub	objptr, ##41300
1bc60                 | LR__2190
1bc60                 | _do_return_ret
1bc60     2D 00 64 FD | 	ret
1bc64                 | 
1bc64                 | ' 
1bc64                 | ' '------------------- right$
1bc64                 | ' 
1bc64                 | ' sub do_right
1bc64                 | _do_right
1bc64     00 4A 05 F6 | 	mov	COUNT_, #0
1bc68     A8 00 A0 FD | 	call	#pushregs_
1bc6c     14 F0 07 F1 | 	add	ptra, #20
1bc70     4A 00 00 FF 
1bc74     A0 E4 05 F1 | 	add	objptr, ##38048
1bc78     F2 16 02 FB | 	rdlong	arg03, objptr
1bc7c     0B 15 02 F6 | 	mov	arg02, arg03
1bc80     01 14 66 F0 | 	shl	arg02, #1
1bc84     0B 15 02 F1 | 	add	arg02, arg03
1bc88     02 14 66 F0 | 	shl	arg02, #2
1bc8c     03 00 00 FF 
1bc90     04 E4 85 F1 | 	sub	objptr, ##1540
1bc94     F2 14 02 F1 | 	add	arg02, objptr
1bc98     0A 17 02 FB | 	rdlong	arg03, arg02
1bc9c     0C 4E 05 F1 | 	add	fp, #12
1bca0     A7 16 62 FC | 	wrlong	arg03, fp
1bca4                 | ' 
1bca4                 | ' numpar=compiledline(lineptr_e).result.uresult
1bca4                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1bca4     0C 4E 85 F1 | 	sub	fp, #12
1bca8     02 16 0E F2 | 	cmp	arg03, #2 wz
1bcac     47 00 00 FF 
1bcb0     9C E4 85 F1 | 	sub	objptr, ##36508
1bcb4     40 00 90 AD |  if_e	jmp	#LR__2200
1bcb8     00 12 06 F6 | 	mov	arg01, #0
1bcbc     F4 20 B1 FD | 	call	#__system___getiolock_0620
1bcc0     FD 12 02 F6 | 	mov	arg01, result1
1bcc4     48 C4 B0 FD | 	call	#__system___lockmem
1bcc8     B6 01 00 FF 
1bccc     B4 14 06 F6 | 	mov	arg02, ##@LR__5902
1bcd0     00 12 06 F6 | 	mov	arg01, #0
1bcd4     00 16 06 F6 | 	mov	arg03, #0
1bcd8     2C D1 B0 FD | 	call	#__system___basic_print_string
1bcdc     00 12 06 F6 | 	mov	arg01, #0
1bce0     D0 20 B1 FD | 	call	#__system___getiolock_0620
1bce4     FD 00 68 FC | 	wrlong	#0, result1
1bce8     27 12 06 F6 | 	mov	arg01, #39
1bcec     00 14 06 F6 | 	mov	arg02, #0
1bcf0     C8 89 B0 FD | 	call	#_printerror
1bcf4     EC 00 90 FD | 	jmp	#LR__2203
1bcf8                 | LR__2200
1bcf8     24 1B BF FD | 	call	#_pop
1bcfc     FF 16 02 F6 | 	mov	arg03, result3
1bd00     A7 FA 61 FC | 	wrlong	result1, fp
1bd04     04 4E 05 F1 | 	add	fp, #4
1bd08     A7 FC 61 FC | 	wrlong	result2, fp
1bd0c     04 4E 05 F1 | 	add	fp, #4
1bd10     A7 16 62 FC | 	wrlong	arg03, fp
1bd14     08 4E 85 F1 | 	sub	fp, #8
1bd18     A7 12 02 F6 | 	mov	arg01, fp
1bd1c     E4 1C BF FD | 	call	#_converttoint
1bd20     FD 16 02 F6 | 	mov	arg03, result1
1bd24     10 4E 05 F1 | 	add	fp, #16
1bd28     A7 16 62 FC | 	wrlong	arg03, fp
1bd2c     10 4E 85 F1 | 	sub	fp, #16
1bd30     EC 1A BF FD | 	call	#_pop
1bd34     FF 16 02 F6 | 	mov	arg03, result3
1bd38     A7 FA 61 FC | 	wrlong	result1, fp
1bd3c     04 4E 05 F1 | 	add	fp, #4
1bd40     A7 FC 61 FC | 	wrlong	result2, fp
1bd44     04 4E 05 F1 | 	add	fp, #4
1bd48     A7 16 62 FC | 	wrlong	arg03, fp
1bd4c                 | ' t1=pop() : arg=converttoint(t1)
1bd4c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1bd4c     08 4E 85 F1 | 	sub	fp, #8
1bd50     2B 16 0E F2 | 	cmp	arg03, #43 wz
1bd54     18 00 90 5D |  if_ne	jmp	#LR__2201
1bd58     A7 12 02 FB | 	rdlong	arg01, fp
1bd5c     38 1C BF FD | 	call	#_convertstring
1bd60     A7 FA 61 FC | 	wrlong	result1, fp
1bd64     08 4E 05 F1 | 	add	fp, #8
1bd68     A7 3E 68 FC | 	wrlong	#31, fp
1bd6c     08 4E 85 F1 | 	sub	fp, #8
1bd70                 | LR__2201
1bd70                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1bd70     08 4E 05 F1 | 	add	fp, #8
1bd74     A7 16 02 FB | 	rdlong	arg03, fp
1bd78     08 4E 85 F1 | 	sub	fp, #8
1bd7c     1F 16 0E F2 | 	cmp	arg03, #31 wz
1bd80     40 00 90 AD |  if_e	jmp	#LR__2202
1bd84     00 12 06 F6 | 	mov	arg01, #0
1bd88     28 20 B1 FD | 	call	#__system___getiolock_0620
1bd8c     FD 12 02 F6 | 	mov	arg01, result1
1bd90     7C C3 B0 FD | 	call	#__system___lockmem
1bd94     B6 01 00 FF 
1bd98     BD 14 06 F6 | 	mov	arg02, ##@LR__5903
1bd9c     00 12 06 F6 | 	mov	arg01, #0
1bda0     00 16 06 F6 | 	mov	arg03, #0
1bda4     60 D0 B0 FD | 	call	#__system___basic_print_string
1bda8     00 12 06 F6 | 	mov	arg01, #0
1bdac     04 20 B1 FD | 	call	#__system___getiolock_0620
1bdb0     FD 00 68 FC | 	wrlong	#0, result1
1bdb4     0F 12 06 F6 | 	mov	arg01, #15
1bdb8     00 14 06 F6 | 	mov	arg02, #0
1bdbc     FC 88 B0 FD | 	call	#_printerror
1bdc0     20 00 90 FD | 	jmp	#LR__2203
1bdc4                 | LR__2202
1bdc4     A7 12 02 FB | 	rdlong	arg01, fp
1bdc8     10 4E 05 F1 | 	add	fp, #16
1bdcc     A7 14 02 FB | 	rdlong	arg02, fp
1bdd0     10 4E 85 F1 | 	sub	fp, #16
1bdd4     40 E4 B0 FD | 	call	#__system__Right_S
1bdd8     A7 FA 61 FC | 	wrlong	result1, fp
1bddc     A7 12 02 F6 | 	mov	arg01, fp
1bde0     D4 1A BF FD | 	call	#_push
1bde4                 | LR__2203
1bde4     A7 F0 03 F6 | 	mov	ptra, fp
1bde8     B2 00 A0 FD | 	call	#popregs_
1bdec                 | _do_right_ret
1bdec     2D 00 64 FD | 	ret
1bdf0                 | 
1bdf0                 | ' 
1bdf0                 | ' '------------------- rnd
1bdf0                 | ' 
1bdf0                 | ' sub do_rnd
1bdf0                 | _do_rnd
1bdf0     01 4A 05 F6 | 	mov	COUNT_, #1
1bdf4     A8 00 A0 FD | 	call	#pushregs_
1bdf8     10 F0 07 F1 | 	add	ptra, #16
1bdfc     4A 00 00 FF 
1be00     A0 E4 05 F1 | 	add	objptr, ##38048
1be04     F2 26 02 FB | 	rdlong	local01, objptr
1be08     13 17 02 F6 | 	mov	arg03, local01
1be0c     01 16 66 F0 | 	shl	arg03, #1
1be10     13 17 02 F1 | 	add	arg03, local01
1be14     02 16 66 F0 | 	shl	arg03, #2
1be18     03 00 00 FF 
1be1c     04 E4 85 F1 | 	sub	objptr, ##1540
1be20     F2 16 02 F1 | 	add	arg03, objptr
1be24     0B 17 02 FB | 	rdlong	arg03, arg03
1be28     0C 4E 05 F1 | 	add	fp, #12
1be2c     A7 16 62 FC | 	wrlong	arg03, fp
1be30                 | ' 
1be30                 | ' numpar=compiledline(lineptr_e).result.uresult
1be30                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1be30     0C 4E 85 F1 | 	sub	fp, #12
1be34     02 16 16 F2 | 	cmp	arg03, #2 wc
1be38     47 00 00 FF 
1be3c     9C E4 85 F1 | 	sub	objptr, ##36508
1be40     40 00 90 CD |  if_b	jmp	#LR__2210
1be44     00 12 06 F6 | 	mov	arg01, #0
1be48     68 1F B1 FD | 	call	#__system___getiolock_0620
1be4c     FD 12 02 F6 | 	mov	arg01, result1
1be50     BC C2 B0 FD | 	call	#__system___lockmem
1be54     B6 01 00 FF 
1be58     C6 14 06 F6 | 	mov	arg02, ##@LR__5904
1be5c     00 12 06 F6 | 	mov	arg01, #0
1be60     00 16 06 F6 | 	mov	arg03, #0
1be64     A0 CF B0 FD | 	call	#__system___basic_print_string
1be68     00 12 06 F6 | 	mov	arg01, #0
1be6c     44 1F B1 FD | 	call	#__system___getiolock_0620
1be70     FD 00 68 FC | 	wrlong	#0, result1
1be74     27 12 06 F6 | 	mov	arg01, #39
1be78     00 14 06 F6 | 	mov	arg02, #0
1be7c     3C 88 B0 FD | 	call	#_printerror
1be80     30 01 90 FD | 	jmp	#LR__2217
1be84                 | LR__2210
1be84                 | ' if numpar=0 then
1be84     0C 4E 05 F1 | 	add	fp, #12
1be88     A7 FE 09 FB | 	rdlong	result3, fp wz
1be8c     0C 4E 85 F1 | 	sub	fp, #12
1be90     20 00 90 5D |  if_ne	jmp	#LR__2211
1be94     08 4E 05 F1 | 	add	fp, #8
1be98     A7 3A 68 FC | 	wrlong	#29, fp
1be9c     08 4E 85 F1 | 	sub	fp, #8
1bea0     1B FA 61 FD | 	getrnd	result1
1bea4     A7 FA 61 FC | 	wrlong	result1, fp
1bea8     A7 12 02 F6 | 	mov	arg01, fp
1beac     08 1A BF FD | 	call	#_push
1beb0     00 01 90 FD | 	jmp	#LR__2216
1beb4                 | LR__2211
1beb4     68 19 BF FD | 	call	#_pop
1beb8     A7 FA 61 FC | 	wrlong	result1, fp
1bebc     04 4E 05 F1 | 	add	fp, #4
1bec0     A7 FC 61 FC | 	wrlong	result2, fp
1bec4     04 4E 05 F1 | 	add	fp, #4
1bec8     A7 FE 61 FC | 	wrlong	result3, fp
1becc                 | '   t1=pop()
1becc                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1becc     08 4E 85 F1 | 	sub	fp, #8
1bed0     1C FE 0D F2 | 	cmp	result3, #28 wz
1bed4     08 4E 05 51 |  if_ne	add	fp, #8
1bed8     A7 26 02 5B |  if_ne	rdlong	local01, fp
1bedc     08 4E 85 51 |  if_ne	sub	fp, #8
1bee0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1bee4     2C 00 90 5D |  if_ne	jmp	#LR__2212
1bee8     1B FA 61 FD | 	getrnd	result1
1beec     A7 26 02 FB | 	rdlong	local01, fp
1bef0     13 FB 11 FD | 	qdiv	result1, local01
1bef4     A7 12 02 F6 | 	mov	arg01, fp
1bef8     19 26 62 FD | 	getqy	local01
1befc     A7 26 62 FC | 	wrlong	local01, fp
1bf00     08 4E 05 F1 | 	add	fp, #8
1bf04     A7 3A 68 FC | 	wrlong	#29, fp
1bf08     08 4E 85 F1 | 	sub	fp, #8
1bf0c     A8 19 BF FD | 	call	#_push
1bf10     A0 00 90 FD | 	jmp	#LR__2215
1bf14                 | LR__2212
1bf14     08 4E 05 F1 | 	add	fp, #8
1bf18     A7 26 02 FB | 	rdlong	local01, fp
1bf1c     08 4E 85 F1 | 	sub	fp, #8
1bf20     1E 26 0E F2 | 	cmp	local01, #30 wz
1bf24     48 00 90 5D |  if_ne	jmp	#LR__2213
1bf28     A7 12 02 FB | 	rdlong	arg01, fp
1bf2c     00 C0 24 FF 
1bf30     00 14 06 F6 | 	mov	arg02, ##1233125376
1bf34     58 F2 B0 FD | 	call	#__system___float_div
1bf38     FD 26 02 F6 | 	mov	local01, result1
1bf3c     1B 12 62 FD | 	getrnd	arg01
1bf40     74 13 06 F4 | 	bitl	arg01, #372
1bf44     40 EC B0 FD | 	call	#__system___float_fromuns
1bf48     FD 14 02 F6 | 	mov	arg02, result1
1bf4c     13 13 02 F6 | 	mov	arg01, local01
1bf50     38 F0 B0 FD | 	call	#__system___float_mul
1bf54     A7 FA 61 FC | 	wrlong	result1, fp
1bf58     08 4E 05 F1 | 	add	fp, #8
1bf5c     A7 3C 68 FC | 	wrlong	#30, fp
1bf60     08 4E 85 F1 | 	sub	fp, #8
1bf64     A7 12 02 F6 | 	mov	arg01, fp
1bf68     4C 19 BF FD | 	call	#_push
1bf6c     44 00 90 FD | 	jmp	#LR__2214
1bf70                 | LR__2213
1bf70                 | '     print "rnd: "; : printerror(40) 
1bf70     00 12 06 F6 | 	mov	arg01, #0
1bf74     3C 1E B1 FD | 	call	#__system___getiolock_0620
1bf78     FD 12 02 F6 | 	mov	arg01, result1
1bf7c     90 C1 B0 FD | 	call	#__system___lockmem
1bf80     B6 01 00 FF 
1bf84     CC 14 06 F6 | 	mov	arg02, ##@LR__5905
1bf88     00 12 06 F6 | 	mov	arg01, #0
1bf8c     00 16 06 F6 | 	mov	arg03, #0
1bf90     74 CE B0 FD | 	call	#__system___basic_print_string
1bf94     00 12 06 F6 | 	mov	arg01, #0
1bf98     18 1E B1 FD | 	call	#__system___getiolock_0620
1bf9c     FD 00 68 FC | 	wrlong	#0, result1
1bfa0     28 12 06 F6 | 	mov	arg01, #40
1bfa4     00 14 06 F6 | 	mov	arg02, #0
1bfa8     10 87 B0 FD | 	call	#_printerror
1bfac     A7 12 02 F6 | 	mov	arg01, fp
1bfb0     04 19 BF FD | 	call	#_push
1bfb4                 | LR__2214
1bfb4                 | LR__2215
1bfb4                 | LR__2216
1bfb4                 | LR__2217
1bfb4     A7 F0 03 F6 | 	mov	ptra, fp
1bfb8     B2 00 A0 FD | 	call	#popregs_
1bfbc                 | _do_rnd_ret
1bfbc     2D 00 64 FD | 	ret
1bfc0                 | 
1bfc0                 | ' 
1bfc0                 | ' '-------------------- round
1bfc0                 | ' 
1bfc0                 | ' sub do_round
1bfc0                 | _do_round
1bfc0     00 4A 05 F6 | 	mov	COUNT_, #0
1bfc4     A8 00 A0 FD | 	call	#pushregs_
1bfc8     0C F0 07 F1 | 	add	ptra, #12
1bfcc     50 18 BF FD | 	call	#_pop
1bfd0     A7 FA 61 FC | 	wrlong	result1, fp
1bfd4     04 4E 05 F1 | 	add	fp, #4
1bfd8     A7 FC 61 FC | 	wrlong	result2, fp
1bfdc     04 4E 05 F1 | 	add	fp, #4
1bfe0     A7 FE 61 FC | 	wrlong	result3, fp
1bfe4     08 4E 85 F1 | 	sub	fp, #8
1bfe8     A7 12 02 F6 | 	mov	arg01, fp
1bfec     14 1A BF FD | 	call	#_converttoint
1bff0     A7 FA 61 FC | 	wrlong	result1, fp
1bff4     08 4E 05 F1 | 	add	fp, #8
1bff8     A7 38 68 FC | 	wrlong	#28, fp
1bffc     08 4E 85 F1 | 	sub	fp, #8
1c000     A7 12 02 F6 | 	mov	arg01, fp
1c004     B0 18 BF FD | 	call	#_push
1c008     A7 F0 03 F6 | 	mov	ptra, fp
1c00c     B2 00 A0 FD | 	call	#popregs_
1c010                 | _do_round_ret
1c010     2D 00 64 FD | 	ret
1c014                 | 
1c014                 | ' 
1c014                 | ' '-------------------- rqpin
1c014                 | ' 
1c014                 | ' sub do_rqpin
1c014                 | _do_rqpin
1c014     00 4A 05 F6 | 	mov	COUNT_, #0
1c018     A8 00 A0 FD | 	call	#pushregs_
1c01c     0C F0 07 F1 | 	add	ptra, #12
1c020     FC 17 BF FD | 	call	#_pop
1c024     A7 FA 61 FC | 	wrlong	result1, fp
1c028     04 4E 05 F1 | 	add	fp, #4
1c02c     A7 FC 61 FC | 	wrlong	result2, fp
1c030     04 4E 05 F1 | 	add	fp, #4
1c034     A7 FE 61 FC | 	wrlong	result3, fp
1c038     08 4E 85 F1 | 	sub	fp, #8
1c03c     A7 12 02 F6 | 	mov	arg01, fp
1c040     C0 19 BF FD | 	call	#_converttoint
1c044     FD 12 02 F6 | 	mov	arg01, result1
1c048     00 FA 05 F6 | 	mov	result1, #0
1c04c     09 FB 81 FA | 	rqpin	result1, arg01
1c050     52 00 00 FF 
1c054     68 E5 05 F1 | 	add	objptr, ##42344
1c058     F2 FA 61 FC | 	wrlong	result1, objptr
1c05c     52 00 00 FF 
1c060     68 E5 85 F1 | 	sub	objptr, ##42344
1c064     08 4E 05 F1 | 	add	fp, #8
1c068     A7 3A 68 FC | 	wrlong	#29, fp
1c06c     08 4E 85 F1 | 	sub	fp, #8
1c070     A7 08 68 FC | 	wrlong	#4, fp
1c074     A7 12 02 F6 | 	mov	arg01, fp
1c078     3C 18 BF FD | 	call	#_push
1c07c     A7 F0 03 F6 | 	mov	ptra, fp
1c080     B2 00 A0 FD | 	call	#popregs_
1c084                 | _do_rqpin_ret
1c084     2D 00 64 FD | 	ret
1c088                 | 
1c088                 | ' 
1c088                 | ' ' ------------------ run
1c088                 | ' 
1c088                 | ' sub do_run
1c088                 | _do_run
1c088     04 4A 05 F6 | 	mov	COUNT_, #4
1c08c     A8 00 A0 FD | 	call	#pushregs_
1c090     4A 00 00 FF 
1c094     A0 E4 05 F1 | 	add	objptr, ##38048
1c098     F2 26 02 FB | 	rdlong	local01, objptr
1c09c     06 00 00 FF 
1c0a0     38 E4 05 F1 | 	add	objptr, ##3128
1c0a4     F2 28 02 FB | 	rdlong	local02, objptr
1c0a8     04 E4 05 F1 | 	add	objptr, #4
1c0ac     F2 2A 02 FB | 	rdlong	local03, objptr
1c0b0     13 19 02 F6 | 	mov	arg04, local01
1c0b4     0C 17 02 F6 | 	mov	arg03, arg04
1c0b8     01 16 66 F0 | 	shl	arg03, #1
1c0bc     0C 17 02 F1 | 	add	arg03, arg04
1c0c0     02 16 66 F0 | 	shl	arg03, #2
1c0c4     09 00 00 FF 
1c0c8     40 E4 85 F1 | 	sub	objptr, ##4672
1c0cc     F2 16 02 F1 | 	add	arg03, objptr
1c0d0     0B 15 02 FB | 	rdlong	arg02, arg03
1c0d4                 | ' 
1c0d4                 | ' r_lineptr_e=lineptr_e
1c0d4                 | ' r_runptr=runptr
1c0d4                 | ' r_runptr2=runptr2
1c0d4                 | ' 
1c0d4                 | ' numpar=compiledline(lineptr_e).result.uresult
1c0d4                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1c0d4     01 14 0E F2 | 	cmp	arg02, #1 wz
1c0d8     47 00 00 FF 
1c0dc     9C E4 85 F1 | 	sub	objptr, ##36508
1c0e0     00 12 06 A6 |  if_e	mov	arg01, #0
1c0e4     0C 98 BF AD |  if_e	call	#_do_load
1c0e8     4A 00 00 FF 
1c0ec     A8 E4 05 F1 | 	add	objptr, ##38056
1c0f0     F2 18 02 FB | 	rdlong	arg04, objptr
1c0f4     06 00 00 FF 
1c0f8     30 E4 05 F1 | 	add	objptr, ##3120
1c0fc     F2 18 62 FC | 	wrlong	arg04, objptr
1c100     04 E4 05 F1 | 	add	objptr, #4
1c104     F2 00 68 FC | 	wrlong	#0, objptr
1c108     04 E4 05 F1 | 	add	objptr, #4
1c10c     FF FF FF FF 
1c110     F2 FE 6B FC | 	wrlong	##-1, objptr
1c114     06 00 00 FF 
1c118     38 E4 85 F1 | 	sub	objptr, ##3128
1c11c     F2 18 02 FB | 	rdlong	arg04, objptr
1c120     06 00 00 FF 
1c124     A4 E4 05 F1 | 	add	objptr, ##3236
1c128     F2 18 62 FC | 	wrlong	arg04, objptr
1c12c     B6 01 00 FF 
1c130     D2 18 06 F6 | 	mov	arg04, ##@LR__5906
1c134     01 00 00 FF 
1c138     E8 E5 05 F1 | 	add	objptr, ##1000
1c13c     F2 18 62 FC | 	wrlong	arg04, objptr
1c140                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1c140                 | ' dataptr=programstart : readline="" ' reset the data pointer
1c140                 | ' if inrun>0 then 
1c140     02 00 00 FF 
1c144     28 E4 85 F1 | 	sub	objptr, ##1064
1c148     F2 18 02 FB | 	rdlong	arg04, objptr
1c14c     50 00 00 FF 
1c150     0C E5 85 F1 | 	sub	objptr, ##41228
1c154     01 18 16 F2 | 	cmp	arg04, #1 wc
1c158     30 00 90 CD |  if_b	jmp	#LR__2220
1c15c     50 00 00 FF 
1c160     10 E5 05 F1 | 	add	objptr, ##41232
1c164     F2 12 02 F6 | 	mov	arg01, objptr
1c168     38 E4 85 F1 | 	sub	objptr, #56
1c16c     F2 14 02 FB | 	rdlong	arg02, objptr
1c170     18 16 06 F6 | 	mov	arg03, #24
1c174     45 00 00 FF 
1c178     0C E4 85 F1 | 	sub	objptr, ##35340
1c17c     EC B2 B0 FD | 	call	#_psram_spin2_read1
1c180     0B 00 00 FF 
1c184     CC E4 85 F1 | 	sub	objptr, ##5836
1c188                 | '   psram.read1(varptr(runheader),runptr,24)  
1c188                 | '   return
1c188     0C 03 90 FD | 	jmp	#LR__2227
1c18c                 | LR__2220
1c18c     50 00 00 FF 
1c190     0C E5 05 F1 | 	add	objptr, ##41228
1c194     F2 02 68 FC | 	wrlong	#1, objptr
1c198     04 E4 05 F1 | 	add	objptr, #4
1c19c     F2 12 02 F6 | 	mov	arg01, objptr
1c1a0     38 E4 85 F1 | 	sub	objptr, #56
1c1a4     F2 14 02 FB | 	rdlong	arg02, objptr
1c1a8     18 16 06 F6 | 	mov	arg03, #24
1c1ac     45 00 00 FF 
1c1b0     0C E4 85 F1 | 	sub	objptr, ##35340
1c1b4     B4 B2 B0 FD | 	call	#_psram_spin2_read1
1c1b8                 | ' inrun=1
1c1b8                 | ' psram.read1(varptr(runheader),runptr,24) 
1c1b8                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1c1b8     45 00 00 FF 
1c1bc     44 E4 05 F1 | 	add	objptr, ##35396
1c1c0     F2 2C 02 FB | 	rdlong	local04, objptr
1c1c4     50 00 00 FF 
1c1c8     10 E5 85 F1 | 	sub	objptr, ##41232
1c1cc     FF FF 7F FF 
1c1d0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1c1d4     50 00 00 AF 
1c1d8     0C E5 05 A1 |  if_e	add	objptr, ##41228
1c1dc     F2 00 68 AC |  if_e	wrlong	#0, objptr
1c1e0     50 00 00 AF 
1c1e4     0C E5 85 A1 |  if_e	sub	objptr, ##41228
1c1e8     AC 02 90 AD |  if_e	jmp	#LR__2227
1c1ec                 | ' do 
1c1ec                 | LR__2221
1c1ec                 | '   if runptr<>oldrunptr then
1c1ec     50 00 00 FF 
1c1f0     D8 E4 05 F1 | 	add	objptr, ##41176
1c1f4     F2 2C 02 FB | 	rdlong	local04, objptr
1c1f8     08 E4 05 F1 | 	add	objptr, #8
1c1fc     F2 18 02 FB | 	rdlong	arg04, objptr
1c200     50 00 00 FF 
1c204     E0 E4 85 F1 | 	sub	objptr, ##41184
1c208     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1c20c     CC 00 90 AD |  if_e	jmp	#LR__2222
1c210     50 00 00 FF 
1c214     10 E5 05 F1 | 	add	objptr, ##41232
1c218     F2 12 02 F6 | 	mov	arg01, objptr
1c21c     38 E4 85 F1 | 	sub	objptr, #56
1c220     F2 14 02 FB | 	rdlong	arg02, objptr
1c224     18 16 06 F6 | 	mov	arg03, #24
1c228     45 00 00 FF 
1c22c     0C E4 85 F1 | 	sub	objptr, ##35340
1c230     38 B2 B0 FD | 	call	#_psram_spin2_read1
1c234     3B 00 00 FF 
1c238     D0 E5 05 F1 | 	add	objptr, ##30672
1c23c     F2 12 02 F6 | 	mov	arg01, objptr
1c240     09 00 00 FF 
1c244     3C E4 05 F1 | 	add	objptr, ##4668
1c248     F2 14 02 FB | 	rdlong	arg02, objptr
1c24c     0B 00 00 FF 
1c250     54 E4 85 F1 | 	sub	objptr, ##5716
1c254     F2 2C 02 FB | 	rdlong	local04, objptr
1c258     01 2C 66 F0 | 	shl	local04, #1
1c25c     16 15 02 F1 | 	add	arg02, local04
1c260     0B 00 00 FF 
1c264     94 E4 05 F1 | 	add	objptr, ##5780
1c268     F2 16 02 FB | 	rdlong	arg03, objptr
1c26c     40 E4 85 F1 | 	sub	objptr, #64
1c270     F2 2C 02 FB | 	rdlong	local04, objptr
1c274     16 17 82 F1 | 	sub	arg03, local04
1c278     45 00 00 FF 
1c27c     0C E4 85 F1 | 	sub	objptr, ##35340
1c280     E8 B1 B0 FD | 	call	#_psram_spin2_read1
1c284     45 00 00 FF 
1c288     4C E4 05 F1 | 	add	objptr, ##35404
1c28c     F2 2C 02 FB | 	rdlong	local04, objptr
1c290     40 E4 85 F1 | 	sub	objptr, #64
1c294     F2 14 02 FB | 	rdlong	arg02, objptr
1c298     0A 2D 82 F1 | 	sub	local04, arg02
1c29c     0B 00 00 FF 
1c2a0     54 E4 85 F1 | 	sub	objptr, ##5716
1c2a4     F2 14 02 FB | 	rdlong	arg02, objptr
1c2a8     0A 2D 12 FD | 	qdiv	local04, arg02
1c2ac     05 00 00 FF 
1c2b0     18 E4 05 F1 | 	add	objptr, ##2584
1c2b4     18 2C 62 FD | 	getqx	local04
1c2b8     03 2C 86 F1 | 	sub	local04, #3
1c2bc     F2 2C 62 FC | 	wrlong	local04, objptr
1c2c0     06 00 00 FF 
1c2c4     3C E4 05 F1 | 	add	objptr, ##3132
1c2c8     F2 2C 02 FB | 	rdlong	local04, objptr
1c2cc     08 E4 05 F1 | 	add	objptr, #8
1c2d0     F2 2C 62 FC | 	wrlong	local04, objptr
1c2d4     50 00 00 FF 
1c2d8     E0 E4 85 F1 | 	sub	objptr, ##41184
1c2dc                 | LR__2222
1c2dc     50 00 00 FF 
1c2e0     24 E5 05 F1 | 	add	objptr, ##41252
1c2e4     F2 2C 02 FB | 	rdlong	local04, objptr
1c2e8     4C E4 85 F1 | 	sub	objptr, #76
1c2ec     F2 2C 62 FC | 	wrlong	local04, objptr
1c2f0     04 E4 05 F1 | 	add	objptr, #4
1c2f4     F2 12 02 FB | 	rdlong	arg01, objptr
1c2f8     50 00 00 FF 
1c2fc     DC E4 85 F1 | 	sub	objptr, ##41180
1c300     18 14 BF FD | 	call	#_execute_line
1c304     50 00 00 FF 
1c308     DC E4 05 F1 | 	add	objptr, ##41180
1c30c     F2 FA 61 FC | 	wrlong	result1, objptr
1c310     04 E4 85 F1 | 	sub	objptr, #4
1c314     F2 2C 02 FB | 	rdlong	local04, objptr
1c318     50 00 00 FF 
1c31c     D8 E4 85 F1 | 	sub	objptr, ##41176
1c320     FF FF 3F FF 
1c324     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1c328     4C 00 90 AD |  if_e	jmp	#LR__2225
1c32c     E0 12 06 F6 | 	mov	arg01, #224
1c330     C8 B4 B0 FD | 	call	#_usbnew_spin2_keystate
1c334     00 FA 0D F2 | 	cmp	result1, #0 wz
1c338     10 00 90 5D |  if_ne	jmp	#LR__2223
1c33c     E4 12 06 F6 | 	mov	arg01, #228
1c340     B8 B4 B0 FD | 	call	#_usbnew_spin2_keystate
1c344     00 FA 0D F2 | 	cmp	result1, #0 wz
1c348     10 00 90 AD |  if_e	jmp	#LR__2224
1c34c                 | LR__2223
1c34c     06 12 06 F6 | 	mov	arg01, #6
1c350     A8 B4 B0 FD | 	call	#_usbnew_spin2_keystate
1c354     00 FA 0D F2 | 	cmp	result1, #0 wz
1c358     1C 00 90 5D |  if_ne	jmp	#LR__2225
1c35c                 | LR__2224
1c35c     50 00 00 FF 
1c360     0C E5 05 F1 | 	add	objptr, ##41228
1c364     F2 2C 02 FB | 	rdlong	local04, objptr
1c368     50 00 00 FF 
1c36c     0C E5 85 F1 | 	sub	objptr, ##41228
1c370     02 2C 0E F2 | 	cmp	local04, #2 wz
1c374     74 FE 9F 5D |  if_ne	jmp	#LR__2221
1c378                 | LR__2225
1c378                 | '   ''do whatever kbm.peek_latest_key()=$106 
1c378                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1c378     50 00 00 FF 
1c37c     D8 E4 05 F1 | 	add	objptr, ##41176
1c380     F2 2C 02 FB | 	rdlong	local04, objptr
1c384     50 00 00 FF 
1c388     D8 E4 85 F1 | 	sub	objptr, ##41176
1c38c     FF FF 3F FF 
1c390     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1c394     AC 00 90 AD |  if_e	jmp	#LR__2226
1c398     50 00 00 FF 
1c39c     0C E5 05 F1 | 	add	objptr, ##41228
1c3a0     F2 2C 02 FB | 	rdlong	local04, objptr
1c3a4     50 00 00 FF 
1c3a8     0C E5 85 F1 | 	sub	objptr, ##41228
1c3ac     01 2C 0E F2 | 	cmp	local04, #1 wz
1c3b0     90 00 90 5D |  if_ne	jmp	#LR__2226
1c3b4                 | '   print: print "Stopped at line ";runheader(0) 
1c3b4     00 12 06 F6 | 	mov	arg01, #0
1c3b8     F8 19 B1 FD | 	call	#__system___getiolock_0620
1c3bc     FD 12 02 F6 | 	mov	arg01, result1
1c3c0     4C BD B0 FD | 	call	#__system___lockmem
1c3c4     00 12 06 F6 | 	mov	arg01, #0
1c3c8     0A 14 06 F6 | 	mov	arg02, #10
1c3cc     00 16 06 F6 | 	mov	arg03, #0
1c3d0     DC C9 B0 FD | 	call	#__system___basic_print_char
1c3d4     00 12 06 F6 | 	mov	arg01, #0
1c3d8     D8 19 B1 FD | 	call	#__system___getiolock_0620
1c3dc     FD 00 68 FC | 	wrlong	#0, result1
1c3e0     00 12 06 F6 | 	mov	arg01, #0
1c3e4     CC 19 B1 FD | 	call	#__system___getiolock_0620
1c3e8     FD 12 02 F6 | 	mov	arg01, result1
1c3ec     20 BD B0 FD | 	call	#__system___lockmem
1c3f0     B6 01 00 FF 
1c3f4     D3 14 06 F6 | 	mov	arg02, ##@LR__5907
1c3f8     00 12 06 F6 | 	mov	arg01, #0
1c3fc     00 16 06 F6 | 	mov	arg03, #0
1c400     04 CA B0 FD | 	call	#__system___basic_print_string
1c404     50 00 00 FF 
1c408     10 E5 05 F1 | 	add	objptr, ##41232
1c40c     F2 14 02 FB | 	rdlong	arg02, objptr
1c410     50 00 00 FF 
1c414     10 E5 85 F1 | 	sub	objptr, ##41232
1c418     00 12 06 F6 | 	mov	arg01, #0
1c41c     00 16 06 F6 | 	mov	arg03, #0
1c420     0A 18 06 F6 | 	mov	arg04, #10
1c424     64 CA B0 FD | 	call	#__system___basic_print_unsigned
1c428     00 12 06 F6 | 	mov	arg01, #0
1c42c     0A 14 06 F6 | 	mov	arg02, #10
1c430     00 16 06 F6 | 	mov	arg03, #0
1c434     78 C9 B0 FD | 	call	#__system___basic_print_char
1c438     00 12 06 F6 | 	mov	arg01, #0
1c43c     74 19 B1 FD | 	call	#__system___getiolock_0620
1c440     FD 00 68 FC | 	wrlong	#0, result1
1c444                 | LR__2226
1c444     50 00 00 FF 
1c448     0C E5 05 F1 | 	add	objptr, ##41228
1c44c     F2 00 68 FC | 	wrlong	#0, objptr
1c450     06 00 00 FF 
1c454     6C E4 85 F1 | 	sub	objptr, ##3180
1c458     F2 26 62 FC | 	wrlong	local01, objptr
1c45c     06 00 00 FF 
1c460     38 E4 05 F1 | 	add	objptr, ##3128
1c464     F2 28 62 FC | 	wrlong	local02, objptr
1c468     04 E4 05 F1 | 	add	objptr, #4
1c46c     F2 2A 62 FC | 	wrlong	local03, objptr
1c470     50 00 00 FF 
1c474     DC E4 85 F1 | 	sub	objptr, ##41180
1c478     11 12 06 F6 | 	mov	arg01, #17
1c47c     08 14 06 F6 | 	mov	arg02, #8
1c480     10 16 06 F6 | 	mov	arg03, #16
1c484     98 92 B0 FD | 	call	#_hg010b_spin2_setspritesize
1c488     10 12 06 F6 | 	mov	arg01, #16
1c48c     20 14 06 F6 | 	mov	arg02, #32
1c490     20 16 06 F6 | 	mov	arg03, #32
1c494     88 92 B0 FD | 	call	#_hg010b_spin2_setspritesize
1c498                 | LR__2227
1c498     A7 F0 03 F6 | 	mov	ptra, fp
1c49c     B2 00 A0 FD | 	call	#popregs_
1c4a0                 | _do_run_ret
1c4a0     2D 00 64 FD | 	ret
1c4a4                 | 
1c4a4                 | ' 
1c4a4                 | ' ' ------------------ save
1c4a4                 | ' 
1c4a4                 | ' sub do_save                        
1c4a4                 | _do_save
1c4a4     04 4A 05 F6 | 	mov	COUNT_, #4
1c4a8     A8 00 A0 FD | 	call	#pushregs_
1c4ac     B8 F0 07 F1 | 	add	ptra, #184
1c4b0     4A 00 00 FF 
1c4b4     A0 E4 05 F1 | 	add	objptr, ##38048
1c4b8     F2 26 02 FB | 	rdlong	local01, objptr
1c4bc     13 29 02 F6 | 	mov	local02, local01
1c4c0     01 28 66 F0 | 	shl	local02, #1
1c4c4     13 29 02 F1 | 	add	local02, local01
1c4c8     02 28 66 F0 | 	shl	local02, #2
1c4cc     03 00 00 FF 
1c4d0     04 E4 85 F1 | 	sub	objptr, ##1540
1c4d4     F2 28 02 F1 | 	add	local02, objptr
1c4d8     14 2B 02 FB | 	rdlong	local03, local02
1c4dc     10 4E 05 F1 | 	add	fp, #16
1c4e0     A7 2A 62 FC | 	wrlong	local03, fp
1c4e4                 | ' 
1c4e4                 | ' numpar=compiledline(lineptr_e).result.uresult
1c4e4                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1c4e4     10 4E 85 F1 | 	sub	fp, #16
1c4e8     01 2A 56 F2 | 	cmps	local03, #1 wc
1c4ec     47 00 00 FF 
1c4f0     9C E4 85 F1 | 	sub	objptr, ##36508
1c4f4     20 00 90 CD |  if_b	jmp	#LR__2230
1c4f8     24 13 BF FD | 	call	#_pop
1c4fc     A7 FA 61 FC | 	wrlong	result1, fp
1c500     04 4E 05 F1 | 	add	fp, #4
1c504     A7 FC 61 FC | 	wrlong	result2, fp
1c508     04 4E 05 F1 | 	add	fp, #4
1c50c     A7 FE 61 FC | 	wrlong	result3, fp
1c510     08 4E 85 F1 | 	sub	fp, #8
1c514     24 00 90 FD | 	jmp	#LR__2231
1c518                 | LR__2230
1c518     52 00 00 FF 
1c51c     1C E5 05 F1 | 	add	objptr, ##42268
1c520     F2 2A 02 FB | 	rdlong	local03, objptr
1c524     52 00 00 FF 
1c528     1C E5 85 F1 | 	sub	objptr, ##42268
1c52c     A7 2A 62 FC | 	wrlong	local03, fp
1c530     08 4E 05 F1 | 	add	fp, #8
1c534     A7 3E 68 FC | 	wrlong	#31, fp
1c538     08 4E 85 F1 | 	sub	fp, #8
1c53c                 | LR__2231
1c53c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1c53c     4A 00 00 FF 
1c540     A8 E4 05 F1 | 	add	objptr, ##38056
1c544     F2 12 02 FB | 	rdlong	arg01, objptr
1c548     4A 00 00 FF 
1c54c     A8 E4 85 F1 | 	sub	objptr, ##38056
1c550     38 84 B0 FD | 	call	#_pslpeek
1c554     FF FF 7F FF 
1c558     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1c55c     10 00 90 5D |  if_ne	jmp	#LR__2232
1c560     1B 12 06 F6 | 	mov	arg01, #27
1c564     00 14 06 F6 | 	mov	arg02, #0
1c568     50 81 B0 FD | 	call	#_printerror
1c56c     CC 02 90 FD | 	jmp	#LR__2238
1c570                 | LR__2232
1c570                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1c570     08 4E 05 F1 | 	add	fp, #8
1c574     A7 2A 02 FB | 	rdlong	local03, fp
1c578     08 4E 85 F1 | 	sub	fp, #8
1c57c     2B 2A 0E F2 | 	cmp	local03, #43 wz
1c580     18 00 90 5D |  if_ne	jmp	#LR__2233
1c584     A7 12 02 FB | 	rdlong	arg01, fp
1c588     0C 14 BF FD | 	call	#_convertstring
1c58c     A7 FA 61 FC | 	wrlong	result1, fp
1c590     08 4E 05 F1 | 	add	fp, #8
1c594     A7 3E 68 FC | 	wrlong	#31, fp
1c598     08 4E 85 F1 | 	sub	fp, #8
1c59c                 | LR__2233
1c59c                 | ' if t1.result_type=result_string then
1c59c     08 4E 05 F1 | 	add	fp, #8
1c5a0     A7 2A 02 FB | 	rdlong	local03, fp
1c5a4     08 4E 85 F1 | 	sub	fp, #8
1c5a8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c5ac     8C 02 90 5D |  if_ne	jmp	#LR__2237
1c5b0                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1c5b0     A7 12 02 FB | 	rdlong	arg01, fp
1c5b4     B6 01 00 FF 
1c5b8     E4 14 06 F6 | 	mov	arg02, ##@LR__5908
1c5bc     78 BB B0 FD | 	call	#__system___string_cmp
1c5c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5c4     52 00 00 AF 
1c5c8     1C E5 05 A1 |  if_e	add	objptr, ##42268
1c5cc     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1c5d0     A7 2A 62 AC |  if_e	wrlong	local03, fp
1c5d4     52 00 00 AF 
1c5d8     1C E5 85 A1 |  if_e	sub	objptr, ##42268
1c5dc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c5e0     52 00 00 5F 
1c5e4     1C E5 05 51 |  if_ne	add	objptr, ##42268
1c5e8     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1c5ec     52 00 00 5F 
1c5f0     1C E5 85 51 |  if_ne	sub	objptr, ##42268
1c5f4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1c5f4     09 12 06 F6 | 	mov	arg01, #9
1c5f8     68 0E B1 FD | 	call	#__system__close
1c5fc     09 2A 06 F6 | 	mov	local03, #9
1c600     4A 00 00 FF 
1c604     B4 E4 05 F1 | 	add	objptr, ##38068
1c608     F2 12 02 FB | 	rdlong	arg01, objptr
1c60c     4A 00 00 FF 
1c610     B4 E4 85 F1 | 	sub	objptr, ##38068
1c614     B6 01 00 FF 
1c618     E5 14 06 F6 | 	mov	arg02, ##@LR__5909
1c61c     4C BB B0 FD | 	call	#__system___string_concat
1c620     FD 12 02 F6 | 	mov	arg01, result1
1c624     A7 14 02 FB | 	rdlong	arg02, fp
1c628     40 BB B0 FD | 	call	#__system___string_concat
1c62c     FD 14 02 F6 | 	mov	arg02, result1
1c630     15 13 02 F6 | 	mov	arg01, local03
1c634     0D 16 06 F6 | 	mov	arg03, #13
1c638     D8 C6 B0 FD | 	call	#__system___basic_open_string
1c63c     4A 00 00 FF 
1c640     A8 E4 05 F1 | 	add	objptr, ##38056
1c644     F2 2A 02 FB | 	rdlong	local03, objptr
1c648     4A 00 00 FF 
1c64c     A8 E4 85 F1 | 	sub	objptr, ##38056
1c650     B0 4E 05 F1 | 	add	fp, #176
1c654     A7 2A 62 FC | 	wrlong	local03, fp
1c658     B0 4E 85 F1 | 	sub	fp, #176
1c65c                 | '   saveptr=programstart
1c65c                 | '   do
1c65c                 | LR__2234
1c65c     14 4E 05 F1 | 	add	fp, #20
1c660     A7 12 02 F6 | 	mov	arg01, fp
1c664     9C 4E 05 F1 | 	add	fp, #156
1c668     A7 14 02 FB | 	rdlong	arg02, fp
1c66c     B0 4E 85 F1 | 	sub	fp, #176
1c670     18 16 06 F6 | 	mov	arg03, #24
1c674     0B 00 00 FF 
1c678     CC E4 05 F1 | 	add	objptr, ##5836
1c67c     EC AD B0 FD | 	call	#_psram_spin2_read1
1c680     2C 4E 05 F1 | 	add	fp, #44
1c684     A7 12 02 F6 | 	mov	arg01, fp
1c688     10 4E 85 F1 | 	sub	fp, #16
1c68c     A7 14 02 FB | 	rdlong	arg02, fp
1c690     04 4E 05 F1 | 	add	fp, #4
1c694     A7 16 02 FB | 	rdlong	arg03, fp
1c698     20 4E 85 F1 | 	sub	fp, #32
1c69c     CC AD B0 FD | 	call	#_psram_spin2_read1
1c6a0     0B 00 00 FF 
1c6a4     CC E4 85 F1 | 	sub	objptr, ##5836
1c6a8     B6 01 00 FF 
1c6ac     E7 2A 06 F6 | 	mov	local03, ##@LR__5910
1c6b0     AC 4E 05 F1 | 	add	fp, #172
1c6b4     A7 2A 62 FC | 	wrlong	local03, fp
1c6b8                 | '     psram.read1(varptr(header(0)),saveptr,24)
1c6b8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1c6b8                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1c6b8     A0 4E 85 F1 | 	sub	fp, #160
1c6bc     A7 02 68 FC | 	wrlong	#1, fp
1c6c0     14 4E 05 F1 | 	add	fp, #20
1c6c4     A7 2C 02 FB | 	rdlong	local04, fp
1c6c8     20 4E 85 F1 | 	sub	fp, #32
1c6cc     01 2C 06 F1 | 	add	local04, #1
1c6d0                 | LR__2235
1c6d0     0C 4E 05 F1 | 	add	fp, #12
1c6d4     A7 2A 02 FB | 	rdlong	local03, fp
1c6d8     0C 4E 85 F1 | 	sub	fp, #12
1c6dc     16 2B 52 F2 | 	cmps	local03, local04 wc
1c6e0     54 00 90 3D |  if_ae	jmp	#LR__2236
1c6e4     AC 4E 05 F1 | 	add	fp, #172
1c6e8     A7 26 02 FB | 	rdlong	local01, fp
1c6ec     A0 4E 85 F1 | 	sub	fp, #160
1c6f0     A7 2A 02 FB | 	rdlong	local03, fp
1c6f4     01 2A 86 F1 | 	sub	local03, #1
1c6f8     20 4E 05 F1 | 	add	fp, #32
1c6fc     A7 2A 02 F1 | 	add	local03, fp
1c700     15 13 C2 FA | 	rdbyte	arg01, local03
1c704     2C 4E 85 F1 | 	sub	fp, #44
1c708     48 DC B0 FD | 	call	#__system__Chr_S
1c70c     FD 14 02 F6 | 	mov	arg02, result1
1c710     13 13 02 F6 | 	mov	arg01, local01
1c714     54 BA B0 FD | 	call	#__system___string_concat
1c718     AC 4E 05 F1 | 	add	fp, #172
1c71c     A7 FA 61 FC | 	wrlong	result1, fp
1c720     A0 4E 85 F1 | 	sub	fp, #160
1c724     A7 2A 02 FB | 	rdlong	local03, fp
1c728     01 2A 06 F1 | 	add	local03, #1
1c72c     A7 2A 62 FC | 	wrlong	local03, fp
1c730     0C 4E 85 F1 | 	sub	fp, #12
1c734     98 FF 9F FD | 	jmp	#LR__2235
1c738                 | LR__2236
1c738                 | '     print #9, saveline$
1c738     09 12 06 F6 | 	mov	arg01, #9
1c73c     74 16 B1 FD | 	call	#__system___getiolock_0620
1c740     FD 12 02 F6 | 	mov	arg01, result1
1c744     C8 B9 B0 FD | 	call	#__system___lockmem
1c748     AC 4E 05 F1 | 	add	fp, #172
1c74c     A7 14 02 FB | 	rdlong	arg02, fp
1c750     AC 4E 85 F1 | 	sub	fp, #172
1c754     09 12 06 F6 | 	mov	arg01, #9
1c758     00 16 06 F6 | 	mov	arg03, #0
1c75c     A8 C6 B0 FD | 	call	#__system___basic_print_string
1c760     09 12 06 F6 | 	mov	arg01, #9
1c764     0A 14 06 F6 | 	mov	arg02, #10
1c768     00 16 06 F6 | 	mov	arg03, #0
1c76c     40 C6 B0 FD | 	call	#__system___basic_print_char
1c770     09 12 06 F6 | 	mov	arg01, #9
1c774     3C 16 B1 FD | 	call	#__system___getiolock_0620
1c778     FD 00 68 FC | 	wrlong	#0, result1
1c77c     28 4E 05 F1 | 	add	fp, #40
1c780     A7 2A 02 FB | 	rdlong	local03, fp
1c784     88 4E 05 F1 | 	add	fp, #136
1c788     A7 2A 62 FC | 	wrlong	local03, fp
1c78c     88 4E 85 F1 | 	sub	fp, #136
1c790     A7 2A 02 FB | 	rdlong	local03, fp
1c794     28 4E 85 F1 | 	sub	fp, #40
1c798     FF FF 3F FF 
1c79c     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1c7a0     B8 FE 9F 5D |  if_ne	jmp	#LR__2234
1c7a4                 | '   close #9  
1c7a4     09 12 06 F6 | 	mov	arg01, #9
1c7a8     B8 0C B1 FD | 	call	#__system__close
1c7ac                 | '   print "Saved as ";currentdir$+"/"+loadname
1c7ac     00 12 06 F6 | 	mov	arg01, #0
1c7b0     00 16 B1 FD | 	call	#__system___getiolock_0620
1c7b4     FD 12 02 F6 | 	mov	arg01, result1
1c7b8     54 B9 B0 FD | 	call	#__system___lockmem
1c7bc     B6 01 00 FF 
1c7c0     E8 14 06 F6 | 	mov	arg02, ##@LR__5911
1c7c4     00 12 06 F6 | 	mov	arg01, #0
1c7c8     00 16 06 F6 | 	mov	arg03, #0
1c7cc     38 C6 B0 FD | 	call	#__system___basic_print_string
1c7d0     00 28 06 F6 | 	mov	local02, #0
1c7d4     4A 00 00 FF 
1c7d8     B4 E4 05 F1 | 	add	objptr, ##38068
1c7dc     F2 12 02 FB | 	rdlong	arg01, objptr
1c7e0     4A 00 00 FF 
1c7e4     B4 E4 85 F1 | 	sub	objptr, ##38068
1c7e8     B6 01 00 FF 
1c7ec     F2 14 06 F6 | 	mov	arg02, ##@LR__5912
1c7f0     78 B9 B0 FD | 	call	#__system___string_concat
1c7f4     FD 12 02 F6 | 	mov	arg01, result1
1c7f8     52 00 00 FF 
1c7fc     1C E5 05 F1 | 	add	objptr, ##42268
1c800     F2 14 02 FB | 	rdlong	arg02, objptr
1c804     52 00 00 FF 
1c808     1C E5 85 F1 | 	sub	objptr, ##42268
1c80c     5C B9 B0 FD | 	call	#__system___string_concat
1c810     FD 14 02 F6 | 	mov	arg02, result1
1c814     14 13 02 F6 | 	mov	arg01, local02
1c818     00 16 06 F6 | 	mov	arg03, #0
1c81c     E8 C5 B0 FD | 	call	#__system___basic_print_string
1c820     00 12 06 F6 | 	mov	arg01, #0
1c824     0A 14 06 F6 | 	mov	arg02, #10
1c828     00 16 06 F6 | 	mov	arg03, #0
1c82c     80 C5 B0 FD | 	call	#__system___basic_print_char
1c830     00 12 06 F6 | 	mov	arg01, #0
1c834     7C 15 B1 FD | 	call	#__system___getiolock_0620
1c838     FD 00 68 FC | 	wrlong	#0, result1
1c83c                 | LR__2237
1c83c                 | LR__2238
1c83c     A7 F0 03 F6 | 	mov	ptra, fp
1c840     B2 00 A0 FD | 	call	#popregs_
1c844                 | _do_save_ret
1c844     2D 00 64 FD | 	ret
1c848                 | 
1c848                 | ' 
1c848                 | ' ' ------------------ setcolor
1c848                 | ' 
1c848                 | ' sub do_setcolor
1c848                 | _do_setcolor
1c848     00 4A 05 F6 | 	mov	COUNT_, #0
1c84c     A8 00 A0 FD | 	call	#pushregs_
1c850     20 F0 07 F1 | 	add	ptra, #32
1c854     4A 00 00 FF 
1c858     A0 E4 05 F1 | 	add	objptr, ##38048
1c85c     F2 18 02 FB | 	rdlong	arg04, objptr
1c860     0C 17 02 F6 | 	mov	arg03, arg04
1c864     01 16 66 F0 | 	shl	arg03, #1
1c868     0C 17 02 F1 | 	add	arg03, arg04
1c86c     02 16 66 F0 | 	shl	arg03, #2
1c870     03 00 00 FF 
1c874     04 E4 85 F1 | 	sub	objptr, ##1540
1c878     F2 16 02 F1 | 	add	arg03, objptr
1c87c     0B 19 02 FB | 	rdlong	arg04, arg03
1c880     1C 4E 05 F1 | 	add	fp, #28
1c884     A7 18 62 FC | 	wrlong	arg04, fp
1c888                 | ' 
1c888                 | ' numpar=compiledline(lineptr_e).result.uresult
1c888                 | ' 
1c888                 | ' if numpar=4 then
1c888     1C 4E 85 F1 | 	sub	fp, #28
1c88c     04 18 0E F2 | 	cmp	arg04, #4 wz
1c890     47 00 00 FF 
1c894     9C E4 85 F1 | 	sub	objptr, ##36508
1c898     E0 00 90 5D |  if_ne	jmp	#LR__2240
1c89c     80 0F BF FD | 	call	#_pop
1c8a0     FF 18 02 F6 | 	mov	arg04, result3
1c8a4     A7 FA 61 FC | 	wrlong	result1, fp
1c8a8     04 4E 05 F1 | 	add	fp, #4
1c8ac     A7 FC 61 FC | 	wrlong	result2, fp
1c8b0     04 4E 05 F1 | 	add	fp, #4
1c8b4     A7 18 62 FC | 	wrlong	arg04, fp
1c8b8     08 4E 85 F1 | 	sub	fp, #8
1c8bc     A7 12 02 F6 | 	mov	arg01, fp
1c8c0     40 11 BF FD | 	call	#_converttoint
1c8c4     FD 18 02 F6 | 	mov	arg04, result1
1c8c8     14 4E 05 F1 | 	add	fp, #20
1c8cc     A7 18 62 FC | 	wrlong	arg04, fp
1c8d0     14 4E 85 F1 | 	sub	fp, #20
1c8d4     48 0F BF FD | 	call	#_pop
1c8d8     FF 18 02 F6 | 	mov	arg04, result3
1c8dc     A7 FA 61 FC | 	wrlong	result1, fp
1c8e0     04 4E 05 F1 | 	add	fp, #4
1c8e4     A7 FC 61 FC | 	wrlong	result2, fp
1c8e8     04 4E 05 F1 | 	add	fp, #4
1c8ec     A7 18 62 FC | 	wrlong	arg04, fp
1c8f0     08 4E 85 F1 | 	sub	fp, #8
1c8f4     A7 12 02 F6 | 	mov	arg01, fp
1c8f8     08 11 BF FD | 	call	#_converttoint
1c8fc     FD 18 02 F6 | 	mov	arg04, result1
1c900     10 4E 05 F1 | 	add	fp, #16
1c904     A7 18 62 FC | 	wrlong	arg04, fp
1c908     10 4E 85 F1 | 	sub	fp, #16
1c90c     10 0F BF FD | 	call	#_pop
1c910     FF 18 02 F6 | 	mov	arg04, result3
1c914     A7 FA 61 FC | 	wrlong	result1, fp
1c918     04 4E 05 F1 | 	add	fp, #4
1c91c     A7 FC 61 FC | 	wrlong	result2, fp
1c920     04 4E 05 F1 | 	add	fp, #4
1c924     A7 18 62 FC | 	wrlong	arg04, fp
1c928     08 4E 85 F1 | 	sub	fp, #8
1c92c     A7 12 02 F6 | 	mov	arg01, fp
1c930     D0 10 BF FD | 	call	#_converttoint
1c934     FD 18 02 F6 | 	mov	arg04, result1
1c938     0C 4E 05 F1 | 	add	fp, #12
1c93c     A7 18 62 FC | 	wrlong	arg04, fp
1c940     0C 4E 85 F1 | 	sub	fp, #12
1c944     D8 0E BF FD | 	call	#_pop
1c948     FF 18 02 F6 | 	mov	arg04, result3
1c94c     A7 FA 61 FC | 	wrlong	result1, fp
1c950     04 4E 05 F1 | 	add	fp, #4
1c954     A7 FC 61 FC | 	wrlong	result2, fp
1c958     04 4E 05 F1 | 	add	fp, #4
1c95c     A7 18 62 FC | 	wrlong	arg04, fp
1c960     08 4E 85 F1 | 	sub	fp, #8
1c964     A7 12 02 F6 | 	mov	arg01, fp
1c968     98 10 BF FD | 	call	#_converttoint
1c96c     18 4E 05 F1 | 	add	fp, #24
1c970     A7 FA 61 FC | 	wrlong	result1, fp
1c974     18 4E 85 F1 | 	sub	fp, #24
1c978     04 01 90 FD | 	jmp	#LR__2243
1c97c                 | LR__2240
1c97c     1C 4E 05 F1 | 	add	fp, #28
1c980     A7 18 02 FB | 	rdlong	arg04, fp
1c984     1C 4E 85 F1 | 	sub	fp, #28
1c988     02 18 0E F2 | 	cmp	arg04, #2 wz
1c98c     A0 00 90 5D |  if_ne	jmp	#LR__2241
1c990     8C 0E BF FD | 	call	#_pop
1c994     FF 18 02 F6 | 	mov	arg04, result3
1c998     A7 FA 61 FC | 	wrlong	result1, fp
1c99c     04 4E 05 F1 | 	add	fp, #4
1c9a0     A7 FC 61 FC | 	wrlong	result2, fp
1c9a4     04 4E 05 F1 | 	add	fp, #4
1c9a8     A7 18 62 FC | 	wrlong	arg04, fp
1c9ac     08 4E 85 F1 | 	sub	fp, #8
1c9b0     A7 12 02 F6 | 	mov	arg01, fp
1c9b4     4C 10 BF FD | 	call	#_converttoint
1c9b8     18 4E 05 F1 | 	add	fp, #24
1c9bc     A7 FA 61 FC | 	wrlong	result1, fp
1c9c0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c9c4     04 4E 85 F1 | 	sub	fp, #4
1c9c8     A7 FA 61 FC | 	wrlong	result1, fp
1c9cc     04 4E 05 F1 | 	add	fp, #4
1c9d0     A7 18 02 FB | 	rdlong	arg04, fp
1c9d4     0C 19 EA F8 | 	getbyte	arg04, arg04, #1
1c9d8     08 4E 85 F1 | 	sub	fp, #8
1c9dc     A7 18 62 FC | 	wrlong	arg04, fp
1c9e0     08 4E 05 F1 | 	add	fp, #8
1c9e4     A7 18 02 FB | 	rdlong	arg04, fp
1c9e8     0C 19 F2 F8 | 	getbyte	arg04, arg04, #2
1c9ec     0C 4E 85 F1 | 	sub	fp, #12
1c9f0     A7 18 62 FC | 	wrlong	arg04, fp
1c9f4     0C 4E 85 F1 | 	sub	fp, #12
1c9f8     24 0E BF FD | 	call	#_pop
1c9fc     FF 18 02 F6 | 	mov	arg04, result3
1ca00     A7 FA 61 FC | 	wrlong	result1, fp
1ca04     04 4E 05 F1 | 	add	fp, #4
1ca08     A7 FC 61 FC | 	wrlong	result2, fp
1ca0c     04 4E 05 F1 | 	add	fp, #4
1ca10     A7 18 62 FC | 	wrlong	arg04, fp
1ca14     08 4E 85 F1 | 	sub	fp, #8
1ca18     A7 12 02 F6 | 	mov	arg01, fp
1ca1c     E4 0F BF FD | 	call	#_converttoint
1ca20     18 4E 05 F1 | 	add	fp, #24
1ca24     A7 FA 61 FC | 	wrlong	result1, fp
1ca28     18 4E 85 F1 | 	sub	fp, #24
1ca2c     50 00 90 FD | 	jmp	#LR__2242
1ca30                 | LR__2241
1ca30                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1ca30     00 12 06 F6 | 	mov	arg01, #0
1ca34     7C 13 B1 FD | 	call	#__system___getiolock_0620
1ca38     FD 12 02 F6 | 	mov	arg01, result1
1ca3c     D0 B6 B0 FD | 	call	#__system___lockmem
1ca40     B6 01 00 FF 
1ca44     F4 14 06 F6 | 	mov	arg02, ##@LR__5913
1ca48     00 12 06 F6 | 	mov	arg01, #0
1ca4c     00 16 06 F6 | 	mov	arg03, #0
1ca50     B4 C3 B0 FD | 	call	#__system___basic_print_string
1ca54     00 12 06 F6 | 	mov	arg01, #0
1ca58     58 13 B1 FD | 	call	#__system___getiolock_0620
1ca5c     FD 00 68 FC | 	wrlong	#0, result1
1ca60     50 00 00 FF 
1ca64     10 E5 05 F1 | 	add	objptr, ##41232
1ca68     F2 14 02 FB | 	rdlong	arg02, objptr
1ca6c     50 00 00 FF 
1ca70     10 E5 85 F1 | 	sub	objptr, ##41232
1ca74     27 12 06 F6 | 	mov	arg01, #39
1ca78     40 7C B0 FD | 	call	#_printerror
1ca7c     28 00 90 FD | 	jmp	#LR__2244
1ca80                 | LR__2242
1ca80                 | LR__2243
1ca80     18 4E 05 F1 | 	add	fp, #24
1ca84     A7 12 02 FB | 	rdlong	arg01, fp
1ca88     0C 4E 85 F1 | 	sub	fp, #12
1ca8c     A7 14 02 FB | 	rdlong	arg02, fp
1ca90     04 4E 05 F1 | 	add	fp, #4
1ca94     A7 16 02 FB | 	rdlong	arg03, fp
1ca98     04 4E 05 F1 | 	add	fp, #4
1ca9c     A7 18 02 FB | 	rdlong	arg04, fp
1caa0     14 4E 85 F1 | 	sub	fp, #20
1caa4     DC 99 B0 FD | 	call	#_hg010b_spin2_setcolor
1caa8                 | LR__2244
1caa8     A7 F0 03 F6 | 	mov	ptra, fp
1caac     B2 00 A0 FD | 	call	#popregs_
1cab0                 | _do_setcolor_ret
1cab0     2D 00 64 FD | 	ret
1cab4                 | 
1cab4                 | ' 
1cab4                 | ' ' ------------------ setdelay
1cab4                 | ' 
1cab4                 | ' sub do_setdelay
1cab4                 | _do_setdelay
1cab4     02 4A 05 F6 | 	mov	COUNT_, #2
1cab8     A8 00 A0 FD | 	call	#pushregs_
1cabc     18 F0 07 F1 | 	add	ptra, #24
1cac0     5C 0D BF FD | 	call	#_pop
1cac4     FD 12 02 F6 | 	mov	arg01, result1
1cac8     FE 26 02 F6 | 	mov	local01, result2
1cacc     FF 28 02 F6 | 	mov	local02, result3
1cad0     A7 12 62 FC | 	wrlong	arg01, fp
1cad4     04 4E 05 F1 | 	add	fp, #4
1cad8     A7 26 62 FC | 	wrlong	local01, fp
1cadc     04 4E 05 F1 | 	add	fp, #4
1cae0     A7 28 62 FC | 	wrlong	local02, fp
1cae4     08 4E 85 F1 | 	sub	fp, #8
1cae8     34 0D BF FD | 	call	#_pop
1caec     FD 28 02 F6 | 	mov	local02, result1
1caf0     0C 4E 05 F1 | 	add	fp, #12
1caf4     A7 28 62 FC | 	wrlong	local02, fp
1caf8     04 4E 05 F1 | 	add	fp, #4
1cafc     A7 FC 61 FC | 	wrlong	result2, fp
1cb00     04 4E 05 F1 | 	add	fp, #4
1cb04     A7 FE 61 FC | 	wrlong	result3, fp
1cb08     08 4E 85 F1 | 	sub	fp, #8
1cb0c     A7 12 02 F6 | 	mov	arg01, fp
1cb10     0C 4E 85 F1 | 	sub	fp, #12
1cb14     EC 0E BF FD | 	call	#_converttoint
1cb18     FD 28 02 F6 | 	mov	local02, result1
1cb1c     14 27 02 F6 | 	mov	local01, local02
1cb20     03 26 66 F0 | 	shl	local01, #3
1cb24     14 27 82 F1 | 	sub	local01, local02
1cb28     02 26 66 F0 | 	shl	local01, #2
1cb2c     14 00 00 FF 
1cb30     38 E5 05 F1 | 	add	objptr, ##10552
1cb34     F2 26 02 F1 | 	add	local01, objptr
1cb38     A7 12 02 F6 | 	mov	arg01, fp
1cb3c     14 00 00 FF 
1cb40     38 E5 85 F1 | 	sub	objptr, ##10552
1cb44     BC 0E BF FD | 	call	#_converttoint
1cb48     06 26 06 F1 | 	add	local01, #6
1cb4c     13 FB 51 FC | 	wrword	result1, local01
1cb50     A7 F0 03 F6 | 	mov	ptra, fp
1cb54     B2 00 A0 FD | 	call	#popregs_
1cb58                 | _do_setdelay_ret
1cb58     2D 00 64 FD | 	ret
1cb5c                 | 
1cb5c                 | ' 
1cb5c                 | ' ' ------------------ setenv
1cb5c                 | ' 
1cb5c                 | ' sub do_setenv
1cb5c                 | _do_setenv
1cb5c     02 4A 05 F6 | 	mov	COUNT_, #2
1cb60     A8 00 A0 FD | 	call	#pushregs_
1cb64     18 F0 07 F1 | 	add	ptra, #24
1cb68     B4 0C BF FD | 	call	#_pop
1cb6c     FD 12 02 F6 | 	mov	arg01, result1
1cb70     FE 26 02 F6 | 	mov	local01, result2
1cb74     FF 28 02 F6 | 	mov	local02, result3
1cb78     A7 12 62 FC | 	wrlong	arg01, fp
1cb7c     04 4E 05 F1 | 	add	fp, #4
1cb80     A7 26 62 FC | 	wrlong	local01, fp
1cb84     04 4E 05 F1 | 	add	fp, #4
1cb88     A7 28 62 FC | 	wrlong	local02, fp
1cb8c     08 4E 85 F1 | 	sub	fp, #8
1cb90     8C 0C BF FD | 	call	#_pop
1cb94     FD 28 02 F6 | 	mov	local02, result1
1cb98     0C 4E 05 F1 | 	add	fp, #12
1cb9c     A7 28 62 FC | 	wrlong	local02, fp
1cba0     04 4E 05 F1 | 	add	fp, #4
1cba4     A7 FC 61 FC | 	wrlong	result2, fp
1cba8     04 4E 05 F1 | 	add	fp, #4
1cbac     A7 FE 61 FC | 	wrlong	result3, fp
1cbb0     08 4E 85 F1 | 	sub	fp, #8
1cbb4     A7 12 02 F6 | 	mov	arg01, fp
1cbb8     0C 4E 85 F1 | 	sub	fp, #12
1cbbc     44 0E BF FD | 	call	#_converttoint
1cbc0     FD 28 02 F6 | 	mov	local02, result1
1cbc4     14 27 02 F6 | 	mov	local01, local02
1cbc8     03 26 66 F0 | 	shl	local01, #3
1cbcc     14 27 82 F1 | 	sub	local01, local02
1cbd0     02 26 66 F0 | 	shl	local01, #2
1cbd4     14 00 00 FF 
1cbd8     38 E5 05 F1 | 	add	objptr, ##10552
1cbdc     F2 26 02 F1 | 	add	local01, objptr
1cbe0     A7 12 02 F6 | 	mov	arg01, fp
1cbe4     14 00 00 FF 
1cbe8     38 E5 85 F1 | 	sub	objptr, ##10552
1cbec     14 0E BF FD | 	call	#_converttoint
1cbf0     05 26 06 F1 | 	add	local01, #5
1cbf4     13 FB 41 FC | 	wrbyte	result1, local01
1cbf8     A7 F0 03 F6 | 	mov	ptra, fp
1cbfc     B2 00 A0 FD | 	call	#popregs_
1cc00                 | _do_setenv_ret
1cc00     2D 00 64 FD | 	ret
1cc04                 | 
1cc04                 | ' 
1cc04                 | ' ' ------------------ setlen
1cc04                 | ' 
1cc04                 | ' sub do_setlen
1cc04                 | _do_setlen
1cc04     02 4A 05 F6 | 	mov	COUNT_, #2
1cc08     A8 00 A0 FD | 	call	#pushregs_
1cc0c     18 F0 07 F1 | 	add	ptra, #24
1cc10     0C 0C BF FD | 	call	#_pop
1cc14     FD 12 02 F6 | 	mov	arg01, result1
1cc18     FE 26 02 F6 | 	mov	local01, result2
1cc1c     FF 28 02 F6 | 	mov	local02, result3
1cc20     A7 12 62 FC | 	wrlong	arg01, fp
1cc24     04 4E 05 F1 | 	add	fp, #4
1cc28     A7 26 62 FC | 	wrlong	local01, fp
1cc2c     04 4E 05 F1 | 	add	fp, #4
1cc30     A7 28 62 FC | 	wrlong	local02, fp
1cc34     08 4E 85 F1 | 	sub	fp, #8
1cc38     E4 0B BF FD | 	call	#_pop
1cc3c     FD 28 02 F6 | 	mov	local02, result1
1cc40     0C 4E 05 F1 | 	add	fp, #12
1cc44     A7 28 62 FC | 	wrlong	local02, fp
1cc48     04 4E 05 F1 | 	add	fp, #4
1cc4c     A7 FC 61 FC | 	wrlong	result2, fp
1cc50     04 4E 05 F1 | 	add	fp, #4
1cc54     A7 FE 61 FC | 	wrlong	result3, fp
1cc58     08 4E 85 F1 | 	sub	fp, #8
1cc5c     A7 12 02 F6 | 	mov	arg01, fp
1cc60     0C 4E 85 F1 | 	sub	fp, #12
1cc64     9C 0D BF FD | 	call	#_converttoint
1cc68     FD 28 02 F6 | 	mov	local02, result1
1cc6c     14 27 02 F6 | 	mov	local01, local02
1cc70     03 26 66 F0 | 	shl	local01, #3
1cc74     14 27 82 F1 | 	sub	local01, local02
1cc78     02 26 66 F0 | 	shl	local01, #2
1cc7c     14 00 00 FF 
1cc80     38 E5 05 F1 | 	add	objptr, ##10552
1cc84     F2 26 02 F1 | 	add	local01, objptr
1cc88     A7 12 02 F6 | 	mov	arg01, fp
1cc8c     14 00 00 FF 
1cc90     38 E5 85 F1 | 	sub	objptr, ##10552
1cc94     28 0E BF FD | 	call	#_converttofloat
1cc98     08 26 06 F1 | 	add	local01, #8
1cc9c     13 FB 61 FC | 	wrlong	result1, local01
1cca0     A7 F0 03 F6 | 	mov	ptra, fp
1cca4     B2 00 A0 FD | 	call	#popregs_
1cca8                 | _do_setlen_ret
1cca8     2D 00 64 FD | 	ret
1ccac                 | 
1ccac                 | ' 
1ccac                 | ' ' ------------------ setpan
1ccac                 | ' 
1ccac                 | ' sub do_setpan
1ccac                 | _do_setpan
1ccac     02 4A 05 F6 | 	mov	COUNT_, #2
1ccb0     A8 00 A0 FD | 	call	#pushregs_
1ccb4     18 F0 07 F1 | 	add	ptra, #24
1ccb8     64 0B BF FD | 	call	#_pop
1ccbc     FD 12 02 F6 | 	mov	arg01, result1
1ccc0     FE 26 02 F6 | 	mov	local01, result2
1ccc4     FF 28 02 F6 | 	mov	local02, result3
1ccc8     A7 12 62 FC | 	wrlong	arg01, fp
1cccc     04 4E 05 F1 | 	add	fp, #4
1ccd0     A7 26 62 FC | 	wrlong	local01, fp
1ccd4     04 4E 05 F1 | 	add	fp, #4
1ccd8     A7 28 62 FC | 	wrlong	local02, fp
1ccdc     08 4E 85 F1 | 	sub	fp, #8
1cce0     3C 0B BF FD | 	call	#_pop
1cce4     FD 28 02 F6 | 	mov	local02, result1
1cce8     0C 4E 05 F1 | 	add	fp, #12
1ccec     A7 28 62 FC | 	wrlong	local02, fp
1ccf0     04 4E 05 F1 | 	add	fp, #4
1ccf4     A7 FC 61 FC | 	wrlong	result2, fp
1ccf8     04 4E 05 F1 | 	add	fp, #4
1ccfc     A7 FE 61 FC | 	wrlong	result3, fp
1cd00     08 4E 85 F1 | 	sub	fp, #8
1cd04     A7 12 02 F6 | 	mov	arg01, fp
1cd08     0C 4E 85 F1 | 	sub	fp, #12
1cd0c     F4 0C BF FD | 	call	#_converttoint
1cd10     FD 28 02 F6 | 	mov	local02, result1
1cd14     14 27 02 F6 | 	mov	local01, local02
1cd18     03 26 66 F0 | 	shl	local01, #3
1cd1c     14 27 82 F1 | 	sub	local01, local02
1cd20     02 26 66 F0 | 	shl	local01, #2
1cd24     14 00 00 FF 
1cd28     38 E5 05 F1 | 	add	objptr, ##10552
1cd2c     F2 26 02 F1 | 	add	local01, objptr
1cd30     A7 12 02 F6 | 	mov	arg01, fp
1cd34     14 00 00 FF 
1cd38     38 E5 85 F1 | 	sub	objptr, ##10552
1cd3c     80 0D BF FD | 	call	#_converttofloat
1cd40     10 26 06 F1 | 	add	local01, #16
1cd44     13 FB 61 FC | 	wrlong	result1, local01
1cd48     A7 F0 03 F6 | 	mov	ptra, fp
1cd4c     B2 00 A0 FD | 	call	#popregs_
1cd50                 | _do_setpan_ret
1cd50     2D 00 64 FD | 	ret
1cd54                 | 
1cd54                 | ' 
1cd54                 | ' ' ------------------ setsustain
1cd54                 | ' 
1cd54                 | ' sub do_setsustain
1cd54                 | _do_setsustain
1cd54     02 4A 05 F6 | 	mov	COUNT_, #2
1cd58     A8 00 A0 FD | 	call	#pushregs_
1cd5c     18 F0 07 F1 | 	add	ptra, #24
1cd60     BC 0A BF FD | 	call	#_pop
1cd64     FD 12 02 F6 | 	mov	arg01, result1
1cd68     FE 26 02 F6 | 	mov	local01, result2
1cd6c     FF 28 02 F6 | 	mov	local02, result3
1cd70     A7 12 62 FC | 	wrlong	arg01, fp
1cd74     04 4E 05 F1 | 	add	fp, #4
1cd78     A7 26 62 FC | 	wrlong	local01, fp
1cd7c     04 4E 05 F1 | 	add	fp, #4
1cd80     A7 28 62 FC | 	wrlong	local02, fp
1cd84     08 4E 85 F1 | 	sub	fp, #8
1cd88     94 0A BF FD | 	call	#_pop
1cd8c     FD 28 02 F6 | 	mov	local02, result1
1cd90     0C 4E 05 F1 | 	add	fp, #12
1cd94     A7 28 62 FC | 	wrlong	local02, fp
1cd98     04 4E 05 F1 | 	add	fp, #4
1cd9c     A7 FC 61 FC | 	wrlong	result2, fp
1cda0     04 4E 05 F1 | 	add	fp, #4
1cda4     A7 FE 61 FC | 	wrlong	result3, fp
1cda8     08 4E 85 F1 | 	sub	fp, #8
1cdac     A7 12 02 F6 | 	mov	arg01, fp
1cdb0     0C 4E 85 F1 | 	sub	fp, #12
1cdb4     4C 0C BF FD | 	call	#_converttoint
1cdb8     FD 28 02 F6 | 	mov	local02, result1
1cdbc     14 27 02 F6 | 	mov	local01, local02
1cdc0     03 26 66 F0 | 	shl	local01, #3
1cdc4     14 27 82 F1 | 	sub	local01, local02
1cdc8     02 26 66 F0 | 	shl	local01, #2
1cdcc     14 00 00 FF 
1cdd0     38 E5 05 F1 | 	add	objptr, ##10552
1cdd4     F2 26 02 F1 | 	add	local01, objptr
1cdd8     A7 12 02 F6 | 	mov	arg01, fp
1cddc     14 00 00 FF 
1cde0     38 E5 85 F1 | 	sub	objptr, ##10552
1cde4     1C 0C BF FD | 	call	#_converttoint
1cde8     14 26 06 F1 | 	add	local01, #20
1cdec     13 FB 51 FC | 	wrword	result1, local01
1cdf0     A7 F0 03 F6 | 	mov	ptra, fp
1cdf4     B2 00 A0 FD | 	call	#popregs_
1cdf8                 | _do_setsustain_ret
1cdf8     2D 00 64 FD | 	ret
1cdfc                 | 
1cdfc                 | ' 
1cdfc                 | ' ' ------------------ setvol
1cdfc                 | ' 
1cdfc                 | ' sub do_setvol
1cdfc                 | _do_setvol
1cdfc     02 4A 05 F6 | 	mov	COUNT_, #2
1ce00     A8 00 A0 FD | 	call	#pushregs_
1ce04     18 F0 07 F1 | 	add	ptra, #24
1ce08     14 0A BF FD | 	call	#_pop
1ce0c     FD 12 02 F6 | 	mov	arg01, result1
1ce10     FE 26 02 F6 | 	mov	local01, result2
1ce14     FF 28 02 F6 | 	mov	local02, result3
1ce18     A7 12 62 FC | 	wrlong	arg01, fp
1ce1c     04 4E 05 F1 | 	add	fp, #4
1ce20     A7 26 62 FC | 	wrlong	local01, fp
1ce24     04 4E 05 F1 | 	add	fp, #4
1ce28     A7 28 62 FC | 	wrlong	local02, fp
1ce2c     08 4E 85 F1 | 	sub	fp, #8
1ce30     EC 09 BF FD | 	call	#_pop
1ce34     FD 28 02 F6 | 	mov	local02, result1
1ce38     0C 4E 05 F1 | 	add	fp, #12
1ce3c     A7 28 62 FC | 	wrlong	local02, fp
1ce40     04 4E 05 F1 | 	add	fp, #4
1ce44     A7 FC 61 FC | 	wrlong	result2, fp
1ce48     04 4E 05 F1 | 	add	fp, #4
1ce4c     A7 FE 61 FC | 	wrlong	result3, fp
1ce50     08 4E 85 F1 | 	sub	fp, #8
1ce54     A7 12 02 F6 | 	mov	arg01, fp
1ce58     0C 4E 85 F1 | 	sub	fp, #12
1ce5c     A4 0B BF FD | 	call	#_converttoint
1ce60     FD 28 02 F6 | 	mov	local02, result1
1ce64     14 27 02 F6 | 	mov	local01, local02
1ce68     03 26 66 F0 | 	shl	local01, #3
1ce6c     14 27 82 F1 | 	sub	local01, local02
1ce70     02 26 66 F0 | 	shl	local01, #2
1ce74     14 00 00 FF 
1ce78     38 E5 05 F1 | 	add	objptr, ##10552
1ce7c     F2 26 02 F1 | 	add	local01, objptr
1ce80     A7 12 02 F6 | 	mov	arg01, fp
1ce84     14 00 00 FF 
1ce88     38 E5 85 F1 | 	sub	objptr, ##10552
1ce8c     30 0C BF FD | 	call	#_converttofloat
1ce90     0C 26 06 F1 | 	add	local01, #12
1ce94     13 FB 61 FC | 	wrlong	result1, local01
1ce98     A7 F0 03 F6 | 	mov	ptra, fp
1ce9c     B2 00 A0 FD | 	call	#popregs_
1cea0                 | _do_setvol_ret
1cea0     2D 00 64 FD | 	ret
1cea4                 | 
1cea4                 | ' 
1cea4                 | ' ' ------------------ setwave
1cea4                 | ' 
1cea4                 | ' sub do_setwave
1cea4                 | _do_setwave
1cea4     02 4A 05 F6 | 	mov	COUNT_, #2
1cea8     A8 00 A0 FD | 	call	#pushregs_
1ceac     18 F0 07 F1 | 	add	ptra, #24
1ceb0     6C 09 BF FD | 	call	#_pop
1ceb4     FD 12 02 F6 | 	mov	arg01, result1
1ceb8     FE 26 02 F6 | 	mov	local01, result2
1cebc     FF 28 02 F6 | 	mov	local02, result3
1cec0     A7 12 62 FC | 	wrlong	arg01, fp
1cec4     04 4E 05 F1 | 	add	fp, #4
1cec8     A7 26 62 FC | 	wrlong	local01, fp
1cecc     04 4E 05 F1 | 	add	fp, #4
1ced0     A7 28 62 FC | 	wrlong	local02, fp
1ced4     08 4E 85 F1 | 	sub	fp, #8
1ced8     44 09 BF FD | 	call	#_pop
1cedc     FD 28 02 F6 | 	mov	local02, result1
1cee0     0C 4E 05 F1 | 	add	fp, #12
1cee4     A7 28 62 FC | 	wrlong	local02, fp
1cee8     04 4E 05 F1 | 	add	fp, #4
1ceec     A7 FC 61 FC | 	wrlong	result2, fp
1cef0     04 4E 05 F1 | 	add	fp, #4
1cef4     A7 FE 61 FC | 	wrlong	result3, fp
1cef8     08 4E 85 F1 | 	sub	fp, #8
1cefc     A7 12 02 F6 | 	mov	arg01, fp
1cf00     0C 4E 85 F1 | 	sub	fp, #12
1cf04     FC 0A BF FD | 	call	#_converttoint
1cf08     FD 28 02 F6 | 	mov	local02, result1
1cf0c     14 27 02 F6 | 	mov	local01, local02
1cf10     03 26 66 F0 | 	shl	local01, #3
1cf14     14 27 82 F1 | 	sub	local01, local02
1cf18     02 26 66 F0 | 	shl	local01, #2
1cf1c     14 00 00 FF 
1cf20     38 E5 05 F1 | 	add	objptr, ##10552
1cf24     F2 26 02 F1 | 	add	local01, objptr
1cf28     A7 12 02 F6 | 	mov	arg01, fp
1cf2c     14 00 00 FF 
1cf30     38 E5 85 F1 | 	sub	objptr, ##10552
1cf34     CC 0A BF FD | 	call	#_converttoint
1cf38     04 26 06 F1 | 	add	local01, #4
1cf3c     13 FB 41 FC | 	wrbyte	result1, local01
1cf40     A7 F0 03 F6 | 	mov	ptra, fp
1cf44     B2 00 A0 FD | 	call	#popregs_
1cf48                 | _do_setwave_ret
1cf48     2D 00 64 FD | 	ret
1cf4c                 | 
1cf4c                 | ' 
1cf4c                 | ' ' ------------------ shutup
1cf4c                 | ' 
1cf4c                 | ' sub do_shutup
1cf4c                 | _do_shutup
1cf4c     03 4A 05 F6 | 	mov	COUNT_, #3
1cf50     A8 00 A0 FD | 	call	#pushregs_
1cf54     18 F0 07 F1 | 	add	ptra, #24
1cf58     4A 00 00 FF 
1cf5c     A0 E4 05 F1 | 	add	objptr, ##38048
1cf60     F2 26 02 FB | 	rdlong	local01, objptr
1cf64     13 29 02 F6 | 	mov	local02, local01
1cf68     01 28 66 F0 | 	shl	local02, #1
1cf6c     13 29 02 F1 | 	add	local02, local01
1cf70     02 28 66 F0 | 	shl	local02, #2
1cf74     03 00 00 FF 
1cf78     04 E4 85 F1 | 	sub	objptr, ##1540
1cf7c     F2 28 02 F1 | 	add	local02, objptr
1cf80     14 2B 0A FB | 	rdlong	local03, local02 wz
1cf84     14 4E 05 F1 | 	add	fp, #20
1cf88     A7 2A 62 FC | 	wrlong	local03, fp
1cf8c                 | ' 
1cf8c                 | ' numpar=compiledline(lineptr_e).result.uresult
1cf8c                 | ' if numpar=0 then
1cf8c     14 4E 85 F1 | 	sub	fp, #20
1cf90     47 00 00 FF 
1cf94     9C E4 85 F1 | 	sub	objptr, ##36508
1cf98     50 00 90 5D |  if_ne	jmp	#LR__2252
1cf9c                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1cf9c     10 4E 05 F1 | 	add	fp, #16
1cfa0     A7 00 68 FC | 	wrlong	#0, fp
1cfa4     37 00 00 FF 
1cfa8     30 E4 05 F1 | 	add	objptr, ##28208
1cfac     97 16 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
1cfb0                 | LR__2250
1cfb0     F2 12 02 FB | 	rdlong	arg01, objptr
1cfb4     A7 2A 02 FB | 	rdlong	local03, fp
1cfb8     06 2A 66 F0 | 	shl	local03, #6
1cfbc     15 13 02 F1 | 	add	arg01, local03
1cfc0     14 12 06 F1 | 	add	arg01, #20
1cfc4     09 01 58 FC | 	wrword	#0, arg01
1cfc8     A7 2A 02 FB | 	rdlong	local03, fp
1cfcc     01 2A 06 F1 | 	add	local03, #1
1cfd0     A7 2A 62 FC | 	wrlong	local03, fp
1cfd4     08 2A 56 F2 | 	cmps	local03, #8 wc
1cfd8     D4 FF 9F CD |  if_b	jmp	#LR__2250
1cfdc                 | LR__2251
1cfdc     37 00 00 FF 
1cfe0     30 E4 85 F1 | 	sub	objptr, ##28208
1cfe4     10 4E 85 F1 | 	sub	fp, #16
1cfe8     64 00 90 FD | 	jmp	#LR__2253
1cfec                 | LR__2252
1cfec     30 08 BF FD | 	call	#_pop
1cff0     FF 26 02 F6 | 	mov	local01, result3
1cff4     A7 FA 61 FC | 	wrlong	result1, fp
1cff8     04 4E 05 F1 | 	add	fp, #4
1cffc     A7 FC 61 FC | 	wrlong	result2, fp
1d000     04 4E 05 F1 | 	add	fp, #4
1d004     A7 26 62 FC | 	wrlong	local01, fp
1d008     08 4E 85 F1 | 	sub	fp, #8
1d00c     A7 12 02 F6 | 	mov	arg01, fp
1d010     F0 09 BF FD | 	call	#_converttoint
1d014     FD 2A 52 F6 | 	abs	local03, result1 wc
1d018     07 2A 06 F5 | 	and	local03, #7
1d01c     15 29 82 F6 | 	negc	local02, local03
1d020     0C 4E 05 F1 | 	add	fp, #12
1d024     A7 28 62 FC | 	wrlong	local02, fp
1d028     37 00 00 FF 
1d02c     30 E4 05 F1 | 	add	objptr, ##28208
1d030     F2 12 02 FB | 	rdlong	arg01, objptr
1d034     37 00 00 FF 
1d038     30 E4 85 F1 | 	sub	objptr, ##28208
1d03c     0C 4E 85 F1 | 	sub	fp, #12
1d040     06 28 66 F0 | 	shl	local02, #6
1d044     14 13 02 F1 | 	add	arg01, local02
1d048     14 12 06 F1 | 	add	arg01, #20
1d04c     09 01 58 FC | 	wrword	#0, arg01
1d050                 | LR__2253
1d050     A7 F0 03 F6 | 	mov	ptra, fp
1d054     B2 00 A0 FD | 	call	#popregs_
1d058                 | _do_shutup_ret
1d058     2D 00 64 FD | 	ret
1d05c                 | 
1d05c                 | ' 
1d05c                 | ' ' ------------------ sin
1d05c                 | ' 
1d05c                 | ' sub do_sin
1d05c                 | _do_sin
1d05c     01 4A 05 F6 | 	mov	COUNT_, #1
1d060     A8 00 A0 FD | 	call	#pushregs_
1d064     10 F0 07 F1 | 	add	ptra, #16
1d068     4A 00 00 FF 
1d06c     A0 E4 05 F1 | 	add	objptr, ##38048
1d070     F2 26 02 FB | 	rdlong	local01, objptr
1d074     13 17 02 F6 | 	mov	arg03, local01
1d078     01 16 66 F0 | 	shl	arg03, #1
1d07c     13 17 02 F1 | 	add	arg03, local01
1d080     02 16 66 F0 | 	shl	arg03, #2
1d084     03 00 00 FF 
1d088     04 E4 85 F1 | 	sub	objptr, ##1540
1d08c     F2 16 02 F1 | 	add	arg03, objptr
1d090     0B 17 02 FB | 	rdlong	arg03, arg03
1d094     0C 4E 05 F1 | 	add	fp, #12
1d098     A7 16 62 FC | 	wrlong	arg03, fp
1d09c                 | ' 
1d09c                 | ' numpar=compiledline(lineptr_e).result.uresult
1d09c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1d09c     0C 4E 85 F1 | 	sub	fp, #12
1d0a0     02 16 16 F2 | 	cmp	arg03, #2 wc
1d0a4     47 00 00 FF 
1d0a8     9C E4 85 F1 | 	sub	objptr, ##36508
1d0ac     0C 4E 05 C1 |  if_b	add	fp, #12
1d0b0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d0b4     0C 4E 85 C1 |  if_b	sub	fp, #12
1d0b8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2260
1d0bc     00 12 06 F6 | 	mov	arg01, #0
1d0c0     F0 0C B1 FD | 	call	#__system___getiolock_0620
1d0c4     FD 12 02 F6 | 	mov	arg01, result1
1d0c8     44 B0 B0 FD | 	call	#__system___lockmem
1d0cc     B6 01 00 FF 
1d0d0     FF 14 06 F6 | 	mov	arg02, ##@LR__5914
1d0d4     00 12 06 F6 | 	mov	arg01, #0
1d0d8     00 16 06 F6 | 	mov	arg03, #0
1d0dc     28 BD B0 FD | 	call	#__system___basic_print_string
1d0e0     00 12 06 F6 | 	mov	arg01, #0
1d0e4     CC 0C B1 FD | 	call	#__system___getiolock_0620
1d0e8     FD 00 68 FC | 	wrlong	#0, result1
1d0ec     27 12 06 F6 | 	mov	arg01, #39
1d0f0     00 14 06 F6 | 	mov	arg02, #0
1d0f4     C4 75 B0 FD | 	call	#_printerror
1d0f8     64 00 90 FD | 	jmp	#LR__2261
1d0fc                 | LR__2260
1d0fc     20 07 BF FD | 	call	#_pop
1d100     A7 FA 61 FC | 	wrlong	result1, fp
1d104     04 4E 05 F1 | 	add	fp, #4
1d108     A7 FC 61 FC | 	wrlong	result2, fp
1d10c     04 4E 05 F1 | 	add	fp, #4
1d110     A7 FE 61 FC | 	wrlong	result3, fp
1d114     08 4E 85 F1 | 	sub	fp, #8
1d118     52 00 00 FF 
1d11c     00 E5 05 F1 | 	add	objptr, ##42240
1d120     F2 26 02 FB | 	rdlong	local01, objptr
1d124     52 00 00 FF 
1d128     00 E5 85 F1 | 	sub	objptr, ##42240
1d12c     A7 12 02 F6 | 	mov	arg01, fp
1d130     8C 09 BF FD | 	call	#_converttofloat
1d134     FD 14 02 F6 | 	mov	arg02, result1
1d138     13 13 02 F6 | 	mov	arg01, local01
1d13c     4C DE B0 FD | 	call	#__system___float_mul
1d140     FD 12 02 F6 | 	mov	arg01, result1
1d144     A8 E7 B0 FD | 	call	#__system____builtin_sinf
1d148     A7 FA 61 FC | 	wrlong	result1, fp
1d14c     08 4E 05 F1 | 	add	fp, #8
1d150     A7 3C 68 FC | 	wrlong	#30, fp
1d154     08 4E 85 F1 | 	sub	fp, #8
1d158     A7 12 02 F6 | 	mov	arg01, fp
1d15c     58 07 BF FD | 	call	#_push
1d160                 | LR__2261
1d160     A7 F0 03 F6 | 	mov	ptra, fp
1d164     B2 00 A0 FD | 	call	#popregs_
1d168                 | _do_sin_ret
1d168     2D 00 64 FD | 	ret
1d16c                 | 
1d16c                 | ' 
1d16c                 | ' ' ------------------ skip
1d16c                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1d16c                 | ' 
1d16c                 | ' sub do_skip
1d16c                 | _do_skip
1d16c     4A 00 00 FF 
1d170     A0 E4 05 F1 | 	add	objptr, ##38048
1d174     F2 00 02 FB | 	rdlong	_var01, objptr
1d178     00 03 02 F6 | 	mov	_var02, _var01
1d17c     01 02 66 F0 | 	shl	_var02, #1
1d180     00 03 02 F1 | 	add	_var02, _var01
1d184     02 02 66 F0 | 	shl	_var02, #2
1d188     03 00 00 FF 
1d18c     04 E4 85 F1 | 	sub	objptr, ##1540
1d190     F2 02 02 F1 | 	add	_var02, objptr
1d194     01 03 02 FB | 	rdlong	_var02, _var02
1d198     01 02 86 F1 | 	sub	_var02, #1
1d19c     03 00 00 FF 
1d1a0     04 E4 05 F1 | 	add	objptr, ##1540
1d1a4     F2 02 62 FC | 	wrlong	_var02, objptr
1d1a8     4A 00 00 FF 
1d1ac     A0 E4 85 F1 | 	sub	objptr, ##38048
1d1b0                 | _do_skip_ret
1d1b0     2D 00 64 FD | 	ret
1d1b4                 | 
1d1b4                 | ' 
1d1b4                 | ' ' ------------------ sprite
1d1b4                 | ' 
1d1b4                 | ' sub do_sprite
1d1b4                 | _do_sprite
1d1b4     00 4A 05 F6 | 	mov	COUNT_, #0
1d1b8     A8 00 A0 FD | 	call	#pushregs_
1d1bc     30 F0 07 F1 | 	add	ptra, #48
1d1c0     5C 06 BF FD | 	call	#_pop
1d1c4     FD 16 02 F6 | 	mov	arg03, result1
1d1c8     FE 14 02 F6 | 	mov	arg02, result2
1d1cc     FF 12 02 F6 | 	mov	arg01, result3
1d1d0     18 4E 05 F1 | 	add	fp, #24
1d1d4     A7 16 62 FC | 	wrlong	arg03, fp
1d1d8     04 4E 05 F1 | 	add	fp, #4
1d1dc     A7 14 62 FC | 	wrlong	arg02, fp
1d1e0     04 4E 05 F1 | 	add	fp, #4
1d1e4     A7 12 62 FC | 	wrlong	arg01, fp
1d1e8     20 4E 85 F1 | 	sub	fp, #32
1d1ec     30 06 BF FD | 	call	#_pop
1d1f0     FD 16 02 F6 | 	mov	arg03, result1
1d1f4     FE 14 02 F6 | 	mov	arg02, result2
1d1f8     FF 12 02 F6 | 	mov	arg01, result3
1d1fc     0C 4E 05 F1 | 	add	fp, #12
1d200     A7 16 62 FC | 	wrlong	arg03, fp
1d204     04 4E 05 F1 | 	add	fp, #4
1d208     A7 14 62 FC | 	wrlong	arg02, fp
1d20c     04 4E 05 F1 | 	add	fp, #4
1d210     A7 12 62 FC | 	wrlong	arg01, fp
1d214     14 4E 85 F1 | 	sub	fp, #20
1d218     04 06 BF FD | 	call	#_pop
1d21c     FF 16 02 F6 | 	mov	arg03, result3
1d220     A7 FA 61 FC | 	wrlong	result1, fp
1d224     04 4E 05 F1 | 	add	fp, #4
1d228     A7 FC 61 FC | 	wrlong	result2, fp
1d22c     04 4E 05 F1 | 	add	fp, #4
1d230     A7 16 62 FC | 	wrlong	arg03, fp
1d234     08 4E 85 F1 | 	sub	fp, #8
1d238     A7 12 02 F6 | 	mov	arg01, fp
1d23c     C4 07 BF FD | 	call	#_converttoint
1d240     24 4E 05 F1 | 	add	fp, #36
1d244     A7 FA 61 FC | 	wrlong	result1, fp
1d248     18 4E 85 F1 | 	sub	fp, #24
1d24c     A7 12 02 F6 | 	mov	arg01, fp
1d250     0C 4E 85 F1 | 	sub	fp, #12
1d254     AC 07 BF FD | 	call	#_converttoint
1d258     28 4E 05 F1 | 	add	fp, #40
1d25c     A7 FA 61 FC | 	wrlong	result1, fp
1d260     10 4E 85 F1 | 	sub	fp, #16
1d264     A7 12 02 F6 | 	mov	arg01, fp
1d268     18 4E 85 F1 | 	sub	fp, #24
1d26c     94 07 BF FD | 	call	#_converttoint
1d270     2C 4E 05 F1 | 	add	fp, #44
1d274     A7 FA 61 FC | 	wrlong	result1, fp
1d278     08 4E 85 F1 | 	sub	fp, #8
1d27c     A7 12 02 FB | 	rdlong	arg01, fp
1d280     04 4E 05 F1 | 	add	fp, #4
1d284     A7 14 02 FB | 	rdlong	arg02, fp
1d288     FD 16 02 F6 | 	mov	arg03, result1
1d28c     28 4E 85 F1 | 	sub	fp, #40
1d290     24 84 B0 FD | 	call	#_hg010b_spin2_setspritepos
1d294     A7 F0 03 F6 | 	mov	ptra, fp
1d298     B2 00 A0 FD | 	call	#popregs_
1d29c                 | _do_sprite_ret
1d29c     2D 00 64 FD | 	ret
1d2a0                 | 
1d2a0                 | ' 
1d2a0                 | ' ' ------------------ sqr
1d2a0                 | ' 
1d2a0                 | ' sub do_sqr
1d2a0                 | _do_sqr
1d2a0     01 4A 05 F6 | 	mov	COUNT_, #1
1d2a4     A8 00 A0 FD | 	call	#pushregs_
1d2a8     10 F0 07 F1 | 	add	ptra, #16
1d2ac     4A 00 00 FF 
1d2b0     A0 E4 05 F1 | 	add	objptr, ##38048
1d2b4     F2 26 02 FB | 	rdlong	local01, objptr
1d2b8     13 17 02 F6 | 	mov	arg03, local01
1d2bc     01 16 66 F0 | 	shl	arg03, #1
1d2c0     13 17 02 F1 | 	add	arg03, local01
1d2c4     02 16 66 F0 | 	shl	arg03, #2
1d2c8     03 00 00 FF 
1d2cc     04 E4 85 F1 | 	sub	objptr, ##1540
1d2d0     F2 16 02 F1 | 	add	arg03, objptr
1d2d4     0B 17 02 FB | 	rdlong	arg03, arg03
1d2d8     0C 4E 05 F1 | 	add	fp, #12
1d2dc     A7 16 62 FC | 	wrlong	arg03, fp
1d2e0                 | ' 
1d2e0                 | ' numpar=compiledline(lineptr_e).result.uresult
1d2e0                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1d2e0     0C 4E 85 F1 | 	sub	fp, #12
1d2e4     02 16 16 F2 | 	cmp	arg03, #2 wc
1d2e8     47 00 00 FF 
1d2ec     9C E4 85 F1 | 	sub	objptr, ##36508
1d2f0     0C 4E 05 C1 |  if_b	add	fp, #12
1d2f4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d2f8     0C 4E 85 C1 |  if_b	sub	fp, #12
1d2fc     40 00 90 4D |  if_c_and_nz	jmp	#LR__2270
1d300     00 12 06 F6 | 	mov	arg01, #0
1d304     AC 0A B1 FD | 	call	#__system___getiolock_0620
1d308     FD 12 02 F6 | 	mov	arg01, result1
1d30c     00 AE B0 FD | 	call	#__system___lockmem
1d310     B6 01 00 FF 
1d314     05 15 06 F6 | 	mov	arg02, ##@LR__5915
1d318     00 12 06 F6 | 	mov	arg01, #0
1d31c     00 16 06 F6 | 	mov	arg03, #0
1d320     E4 BA B0 FD | 	call	#__system___basic_print_string
1d324     00 12 06 F6 | 	mov	arg01, #0
1d328     88 0A B1 FD | 	call	#__system___getiolock_0620
1d32c     FD 00 68 FC | 	wrlong	#0, result1
1d330     27 12 06 F6 | 	mov	arg01, #39
1d334     00 14 06 F6 | 	mov	arg02, #0
1d338     80 73 B0 FD | 	call	#_printerror
1d33c     48 00 90 FD | 	jmp	#LR__2271
1d340                 | LR__2270
1d340     DC 04 BF FD | 	call	#_pop
1d344     FF 26 02 F6 | 	mov	local01, result3
1d348     A7 FA 61 FC | 	wrlong	result1, fp
1d34c     04 4E 05 F1 | 	add	fp, #4
1d350     A7 FC 61 FC | 	wrlong	result2, fp
1d354     04 4E 05 F1 | 	add	fp, #4
1d358     A7 26 62 FC | 	wrlong	local01, fp
1d35c     08 4E 85 F1 | 	sub	fp, #8
1d360     A7 12 02 F6 | 	mov	arg01, fp
1d364     58 07 BF FD | 	call	#_converttofloat
1d368     FD 12 02 F6 | 	mov	arg01, result1
1d36c     44 DB B0 FD | 	call	#__system___float_sqrt
1d370     A7 FA 61 FC | 	wrlong	result1, fp
1d374     08 4E 05 F1 | 	add	fp, #8
1d378     A7 3C 68 FC | 	wrlong	#30, fp
1d37c     08 4E 85 F1 | 	sub	fp, #8
1d380     A7 12 02 F6 | 	mov	arg01, fp
1d384     30 05 BF FD | 	call	#_push
1d388                 | LR__2271
1d388     A7 F0 03 F6 | 	mov	ptra, fp
1d38c     B2 00 A0 FD | 	call	#popregs_
1d390                 | _do_sqr_ret
1d390     2D 00 64 FD | 	ret
1d394                 | 
1d394                 | ' 
1d394                 | ' ' ------------------ stick
1d394                 | ' 
1d394                 | ' sub do_stick
1d394                 | _do_stick
1d394     01 4A 05 F6 | 	mov	COUNT_, #1
1d398     A8 00 A0 FD | 	call	#pushregs_
1d39c     10 F0 07 F1 | 	add	ptra, #16
1d3a0     4A 00 00 FF 
1d3a4     A0 E4 05 F1 | 	add	objptr, ##38048
1d3a8     F2 26 02 FB | 	rdlong	local01, objptr
1d3ac     13 17 02 F6 | 	mov	arg03, local01
1d3b0     01 16 66 F0 | 	shl	arg03, #1
1d3b4     13 17 02 F1 | 	add	arg03, local01
1d3b8     02 16 66 F0 | 	shl	arg03, #2
1d3bc     03 00 00 FF 
1d3c0     04 E4 85 F1 | 	sub	objptr, ##1540
1d3c4     F2 16 02 F1 | 	add	arg03, objptr
1d3c8     0B 17 02 FB | 	rdlong	arg03, arg03
1d3cc     0C 4E 05 F1 | 	add	fp, #12
1d3d0     A7 16 62 FC | 	wrlong	arg03, fp
1d3d4                 | ' 
1d3d4                 | ' numpar=compiledline(lineptr_e).result.uresult
1d3d4                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1d3d4     0C 4E 85 F1 | 	sub	fp, #12
1d3d8     02 16 16 F2 | 	cmp	arg03, #2 wc
1d3dc     47 00 00 FF 
1d3e0     9C E4 85 F1 | 	sub	objptr, ##36508
1d3e4     40 00 90 CD |  if_b	jmp	#LR__2280
1d3e8     00 12 06 F6 | 	mov	arg01, #0
1d3ec     C4 09 B1 FD | 	call	#__system___getiolock_0620
1d3f0     FD 12 02 F6 | 	mov	arg01, result1
1d3f4     18 AD B0 FD | 	call	#__system___lockmem
1d3f8     B6 01 00 FF 
1d3fc     0B 15 06 F6 | 	mov	arg02, ##@LR__5916
1d400     00 12 06 F6 | 	mov	arg01, #0
1d404     00 16 06 F6 | 	mov	arg03, #0
1d408     FC B9 B0 FD | 	call	#__system___basic_print_string
1d40c     00 12 06 F6 | 	mov	arg01, #0
1d410     A0 09 B1 FD | 	call	#__system___getiolock_0620
1d414     FD 00 68 FC | 	wrlong	#0, result1
1d418     27 12 06 F6 | 	mov	arg01, #39
1d41c     00 14 06 F6 | 	mov	arg02, #0
1d420     98 72 B0 FD | 	call	#_printerror
1d424     F0 00 90 FD | 	jmp	#LR__2284
1d428                 | LR__2280
1d428                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1d428     0C 4E 05 F1 | 	add	fp, #12
1d42c     A7 FE 09 FB | 	rdlong	result3, fp wz
1d430     0C 4E 85 F1 | 	sub	fp, #12
1d434     30 00 90 5D |  if_ne	jmp	#LR__2281
1d438     52 00 00 FF 
1d43c     74 E4 05 F1 | 	add	objptr, ##42100
1d440     F2 26 02 FB | 	rdlong	local01, objptr
1d444     52 00 00 FF 
1d448     74 E4 85 F1 | 	sub	objptr, ##42100
1d44c     A7 26 62 FC | 	wrlong	local01, fp
1d450     08 4E 05 F1 | 	add	fp, #8
1d454     A7 3A 68 FC | 	wrlong	#29, fp
1d458     08 4E 85 F1 | 	sub	fp, #8
1d45c     A7 12 02 F6 | 	mov	arg01, fp
1d460     54 04 BF FD | 	call	#_push
1d464     B0 00 90 FD | 	jmp	#LR__2284
1d468                 | LR__2281
1d468     B4 03 BF FD | 	call	#_pop
1d46c     A7 FA 61 FC | 	wrlong	result1, fp
1d470     04 4E 05 F1 | 	add	fp, #4
1d474     A7 FC 61 FC | 	wrlong	result2, fp
1d478     04 4E 05 F1 | 	add	fp, #4
1d47c     A7 FE 61 FC | 	wrlong	result3, fp
1d480                 | ' t1=pop()
1d480                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1d480     08 4E 85 F1 | 	sub	fp, #8
1d484     1C FE 0D F2 | 	cmp	result3, #28 wz
1d488     08 4E 05 51 |  if_ne	add	fp, #8
1d48c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1d490     08 4E 85 51 |  if_ne	sub	fp, #8
1d494     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1d498     70 00 90 5D |  if_ne	jmp	#LR__2283
1d49c     A7 26 02 FB | 	rdlong	local01, fp
1d4a0     52 00 00 FF 
1d4a4     60 E5 05 F1 | 	add	objptr, ##42336
1d4a8     F2 26 62 FC | 	wrlong	local01, objptr
1d4ac                 | '   q=t1.result.uresult
1d4ac                 | '   if q<7 then 
1d4ac     52 00 00 FF 
1d4b0     60 E5 85 F1 | 	sub	objptr, ##42336
1d4b4     07 26 56 F2 | 	cmps	local01, #7 wc
1d4b8     40 00 90 3D |  if_ae	jmp	#LR__2282
1d4bc     52 00 00 FF 
1d4c0     60 E5 05 F1 | 	add	objptr, ##42336
1d4c4     F2 26 02 FB | 	rdlong	local01, objptr
1d4c8     02 26 66 F0 | 	shl	local01, #2
1d4cc     EC E4 85 F1 | 	sub	objptr, #236
1d4d0     F2 26 02 F1 | 	add	local01, objptr
1d4d4     13 27 02 FB | 	rdlong	local01, local01
1d4d8     A7 26 62 FC | 	wrlong	local01, fp
1d4dc     08 4E 05 F1 | 	add	fp, #8
1d4e0     A7 3A 68 FC | 	wrlong	#29, fp
1d4e4     08 4E 85 F1 | 	sub	fp, #8
1d4e8     A7 12 02 F6 | 	mov	arg01, fp
1d4ec     52 00 00 FF 
1d4f0     74 E4 85 F1 | 	sub	objptr, ##42100
1d4f4     C0 03 BF FD | 	call	#_push
1d4f8                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1d4f8     1C 00 90 FD | 	jmp	#LR__2284
1d4fc                 | LR__2282
1d4fc     29 12 06 F6 | 	mov	arg01, #41
1d500     00 14 06 F6 | 	mov	arg02, #0
1d504     B4 71 B0 FD | 	call	#_printerror
1d508                 | '      printerror(41) : return
1d508     0C 00 90 FD | 	jmp	#LR__2284
1d50c                 | LR__2283
1d50c     29 12 06 F6 | 	mov	arg01, #41
1d510     00 14 06 F6 | 	mov	arg02, #0
1d514     A4 71 B0 FD | 	call	#_printerror
1d518                 | LR__2284
1d518     A7 F0 03 F6 | 	mov	ptra, fp
1d51c     B2 00 A0 FD | 	call	#popregs_
1d520                 | _do_stick_ret
1d520     2D 00 64 FD | 	ret
1d524                 | 
1d524                 | ' 
1d524                 | ' ' ------------------ strig
1d524                 | ' 
1d524                 | ' sub do_strig
1d524                 | _do_strig
1d524     01 4A 05 F6 | 	mov	COUNT_, #1
1d528     A8 00 A0 FD | 	call	#pushregs_
1d52c     10 F0 07 F1 | 	add	ptra, #16
1d530     4A 00 00 FF 
1d534     A0 E4 05 F1 | 	add	objptr, ##38048
1d538     F2 26 02 FB | 	rdlong	local01, objptr
1d53c     13 17 02 F6 | 	mov	arg03, local01
1d540     01 16 66 F0 | 	shl	arg03, #1
1d544     13 17 02 F1 | 	add	arg03, local01
1d548     02 16 66 F0 | 	shl	arg03, #2
1d54c     03 00 00 FF 
1d550     04 E4 85 F1 | 	sub	objptr, ##1540
1d554     F2 16 02 F1 | 	add	arg03, objptr
1d558     0B 17 02 FB | 	rdlong	arg03, arg03
1d55c     0C 4E 05 F1 | 	add	fp, #12
1d560     A7 16 62 FC | 	wrlong	arg03, fp
1d564                 | ' 
1d564                 | ' numpar=compiledline(lineptr_e).result.uresult
1d564                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1d564     0C 4E 85 F1 | 	sub	fp, #12
1d568     02 16 16 F2 | 	cmp	arg03, #2 wc
1d56c     47 00 00 FF 
1d570     9C E4 85 F1 | 	sub	objptr, ##36508
1d574     40 00 90 CD |  if_b	jmp	#LR__2290
1d578     00 12 06 F6 | 	mov	arg01, #0
1d57c     34 08 B1 FD | 	call	#__system___getiolock_0620
1d580     FD 12 02 F6 | 	mov	arg01, result1
1d584     88 AB B0 FD | 	call	#__system___lockmem
1d588     B6 01 00 FF 
1d58c     13 15 06 F6 | 	mov	arg02, ##@LR__5917
1d590     00 12 06 F6 | 	mov	arg01, #0
1d594     00 16 06 F6 | 	mov	arg03, #0
1d598     6C B8 B0 FD | 	call	#__system___basic_print_string
1d59c     00 12 06 F6 | 	mov	arg01, #0
1d5a0     10 08 B1 FD | 	call	#__system___getiolock_0620
1d5a4     FD 00 68 FC | 	wrlong	#0, result1
1d5a8     27 12 06 F6 | 	mov	arg01, #39
1d5ac     00 14 06 F6 | 	mov	arg02, #0
1d5b0     08 71 B0 FD | 	call	#_printerror
1d5b4     F0 00 90 FD | 	jmp	#LR__2294
1d5b8                 | LR__2290
1d5b8                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1d5b8     0C 4E 05 F1 | 	add	fp, #12
1d5bc     A7 FE 09 FB | 	rdlong	result3, fp wz
1d5c0     0C 4E 85 F1 | 	sub	fp, #12
1d5c4     30 00 90 5D |  if_ne	jmp	#LR__2291
1d5c8     52 00 00 FF 
1d5cc     90 E4 05 F1 | 	add	objptr, ##42128
1d5d0     F2 26 02 FB | 	rdlong	local01, objptr
1d5d4     52 00 00 FF 
1d5d8     90 E4 85 F1 | 	sub	objptr, ##42128
1d5dc     A7 26 62 FC | 	wrlong	local01, fp
1d5e0     08 4E 05 F1 | 	add	fp, #8
1d5e4     A7 3A 68 FC | 	wrlong	#29, fp
1d5e8     08 4E 85 F1 | 	sub	fp, #8
1d5ec     A7 12 02 F6 | 	mov	arg01, fp
1d5f0     C4 02 BF FD | 	call	#_push
1d5f4     B0 00 90 FD | 	jmp	#LR__2294
1d5f8                 | LR__2291
1d5f8     24 02 BF FD | 	call	#_pop
1d5fc     A7 FA 61 FC | 	wrlong	result1, fp
1d600     04 4E 05 F1 | 	add	fp, #4
1d604     A7 FC 61 FC | 	wrlong	result2, fp
1d608     04 4E 05 F1 | 	add	fp, #4
1d60c     A7 FE 61 FC | 	wrlong	result3, fp
1d610                 | ' t1=pop()
1d610                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1d610     08 4E 85 F1 | 	sub	fp, #8
1d614     1C FE 0D F2 | 	cmp	result3, #28 wz
1d618     08 4E 05 51 |  if_ne	add	fp, #8
1d61c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1d620     08 4E 85 51 |  if_ne	sub	fp, #8
1d624     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1d628     70 00 90 5D |  if_ne	jmp	#LR__2293
1d62c     A7 26 02 FB | 	rdlong	local01, fp
1d630     52 00 00 FF 
1d634     60 E5 05 F1 | 	add	objptr, ##42336
1d638     F2 26 62 FC | 	wrlong	local01, objptr
1d63c                 | '   q=t1.result.uresult
1d63c                 | '   if q<7 then 
1d63c     52 00 00 FF 
1d640     60 E5 85 F1 | 	sub	objptr, ##42336
1d644     07 26 56 F2 | 	cmps	local01, #7 wc
1d648     40 00 90 3D |  if_ae	jmp	#LR__2292
1d64c     52 00 00 FF 
1d650     60 E5 05 F1 | 	add	objptr, ##42336
1d654     F2 26 02 FB | 	rdlong	local01, objptr
1d658     02 26 66 F0 | 	shl	local01, #2
1d65c     D0 E4 85 F1 | 	sub	objptr, #208
1d660     F2 26 02 F1 | 	add	local01, objptr
1d664     13 27 02 FB | 	rdlong	local01, local01
1d668     A7 26 62 FC | 	wrlong	local01, fp
1d66c     08 4E 05 F1 | 	add	fp, #8
1d670     A7 3A 68 FC | 	wrlong	#29, fp
1d674     08 4E 85 F1 | 	sub	fp, #8
1d678     A7 12 02 F6 | 	mov	arg01, fp
1d67c     52 00 00 FF 
1d680     90 E4 85 F1 | 	sub	objptr, ##42128
1d684     30 02 BF FD | 	call	#_push
1d688                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1d688     1C 00 90 FD | 	jmp	#LR__2294
1d68c                 | LR__2292
1d68c     29 12 06 F6 | 	mov	arg01, #41
1d690     00 14 06 F6 | 	mov	arg02, #0
1d694     24 70 B0 FD | 	call	#_printerror
1d698                 | '      printerror(41) : return
1d698     0C 00 90 FD | 	jmp	#LR__2294
1d69c                 | LR__2293
1d69c     29 12 06 F6 | 	mov	arg01, #41
1d6a0     00 14 06 F6 | 	mov	arg02, #0
1d6a4     14 70 B0 FD | 	call	#_printerror
1d6a8                 | LR__2294
1d6a8     A7 F0 03 F6 | 	mov	ptra, fp
1d6ac     B2 00 A0 FD | 	call	#popregs_
1d6b0                 | _do_strig_ret
1d6b0     2D 00 64 FD | 	ret
1d6b4                 | 
1d6b4                 | ' 
1d6b4                 | ' ' ------------------ tan
1d6b4                 | ' 
1d6b4                 | ' sub do_tan
1d6b4                 | _do_tan
1d6b4     01 4A 05 F6 | 	mov	COUNT_, #1
1d6b8     A8 00 A0 FD | 	call	#pushregs_
1d6bc     10 F0 07 F1 | 	add	ptra, #16
1d6c0     4A 00 00 FF 
1d6c4     A0 E4 05 F1 | 	add	objptr, ##38048
1d6c8     F2 26 02 FB | 	rdlong	local01, objptr
1d6cc     13 17 02 F6 | 	mov	arg03, local01
1d6d0     01 16 66 F0 | 	shl	arg03, #1
1d6d4     13 17 02 F1 | 	add	arg03, local01
1d6d8     02 16 66 F0 | 	shl	arg03, #2
1d6dc     03 00 00 FF 
1d6e0     04 E4 85 F1 | 	sub	objptr, ##1540
1d6e4     F2 16 02 F1 | 	add	arg03, objptr
1d6e8     0B 17 02 FB | 	rdlong	arg03, arg03
1d6ec     0C 4E 05 F1 | 	add	fp, #12
1d6f0     A7 16 62 FC | 	wrlong	arg03, fp
1d6f4                 | ' 
1d6f4                 | ' numpar=compiledline(lineptr_e).result.uresult
1d6f4                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1d6f4     0C 4E 85 F1 | 	sub	fp, #12
1d6f8     02 16 16 F2 | 	cmp	arg03, #2 wc
1d6fc     47 00 00 FF 
1d700     9C E4 85 F1 | 	sub	objptr, ##36508
1d704     0C 4E 05 C1 |  if_b	add	fp, #12
1d708     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d70c     0C 4E 85 C1 |  if_b	sub	fp, #12
1d710     40 00 90 4D |  if_c_and_nz	jmp	#LR__2300
1d714     00 12 06 F6 | 	mov	arg01, #0
1d718     98 06 B1 FD | 	call	#__system___getiolock_0620
1d71c     FD 12 02 F6 | 	mov	arg01, result1
1d720     EC A9 B0 FD | 	call	#__system___lockmem
1d724     B6 01 00 FF 
1d728     1B 15 06 F6 | 	mov	arg02, ##@LR__5918
1d72c     00 12 06 F6 | 	mov	arg01, #0
1d730     00 16 06 F6 | 	mov	arg03, #0
1d734     D0 B6 B0 FD | 	call	#__system___basic_print_string
1d738     00 12 06 F6 | 	mov	arg01, #0
1d73c     74 06 B1 FD | 	call	#__system___getiolock_0620
1d740     FD 00 68 FC | 	wrlong	#0, result1
1d744     27 12 06 F6 | 	mov	arg01, #39
1d748     00 14 06 F6 | 	mov	arg02, #0
1d74c     6C 6F B0 FD | 	call	#_printerror
1d750     64 00 90 FD | 	jmp	#LR__2301
1d754                 | LR__2300
1d754     C8 00 BF FD | 	call	#_pop
1d758     A7 FA 61 FC | 	wrlong	result1, fp
1d75c     04 4E 05 F1 | 	add	fp, #4
1d760     A7 FC 61 FC | 	wrlong	result2, fp
1d764     04 4E 05 F1 | 	add	fp, #4
1d768     A7 FE 61 FC | 	wrlong	result3, fp
1d76c     08 4E 85 F1 | 	sub	fp, #8
1d770     52 00 00 FF 
1d774     00 E5 05 F1 | 	add	objptr, ##42240
1d778     F2 26 02 FB | 	rdlong	local01, objptr
1d77c     52 00 00 FF 
1d780     00 E5 85 F1 | 	sub	objptr, ##42240
1d784     A7 12 02 F6 | 	mov	arg01, fp
1d788     34 03 BF FD | 	call	#_converttofloat
1d78c     FD 14 02 F6 | 	mov	arg02, result1
1d790     13 13 02 F6 | 	mov	arg01, local01
1d794     F4 D7 B0 FD | 	call	#__system___float_mul
1d798     FD 12 02 F6 | 	mov	arg01, result1
1d79c     9C E2 B0 FD | 	call	#__system____builtin_tanf
1d7a0     A7 FA 61 FC | 	wrlong	result1, fp
1d7a4     08 4E 05 F1 | 	add	fp, #8
1d7a8     A7 3C 68 FC | 	wrlong	#30, fp
1d7ac     08 4E 85 F1 | 	sub	fp, #8
1d7b0     A7 12 02 F6 | 	mov	arg01, fp
1d7b4     00 01 BF FD | 	call	#_push
1d7b8                 | LR__2301
1d7b8     A7 F0 03 F6 | 	mov	ptra, fp
1d7bc     B2 00 A0 FD | 	call	#popregs_
1d7c0                 | _do_tan_ret
1d7c0     2D 00 64 FD | 	ret
1d7c4                 | 
1d7c4                 | ' 
1d7c4                 | ' ' ------------------ val
1d7c4                 | ' 
1d7c4                 | ' sub do_val
1d7c4                 | _do_val
1d7c4     03 4A 05 F6 | 	mov	COUNT_, #3
1d7c8     A8 00 A0 FD | 	call	#pushregs_
1d7cc     20 F0 07 F1 | 	add	ptra, #32
1d7d0     4A 00 00 FF 
1d7d4     A0 E4 05 F1 | 	add	objptr, ##38048
1d7d8     F2 16 02 FB | 	rdlong	arg03, objptr
1d7dc     0B 27 02 F6 | 	mov	local01, arg03
1d7e0     01 26 66 F0 | 	shl	local01, #1
1d7e4     0B 27 02 F1 | 	add	local01, arg03
1d7e8     02 26 66 F0 | 	shl	local01, #2
1d7ec     03 00 00 FF 
1d7f0     04 E4 85 F1 | 	sub	objptr, ##1540
1d7f4     F2 26 02 F1 | 	add	local01, objptr
1d7f8     13 17 02 FB | 	rdlong	arg03, local01
1d7fc     0C 4E 05 F1 | 	add	fp, #12
1d800     A7 16 62 FC | 	wrlong	arg03, fp
1d804                 | ' 
1d804                 | ' numpar=compiledline(lineptr_e).result.uresult
1d804                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1d804     0C 4E 85 F1 | 	sub	fp, #12
1d808     02 16 16 F2 | 	cmp	arg03, #2 wc
1d80c     47 00 00 FF 
1d810     9C E4 85 F1 | 	sub	objptr, ##36508
1d814     0C 4E 05 C1 |  if_b	add	fp, #12
1d818     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d81c     0C 4E 85 C1 |  if_b	sub	fp, #12
1d820     40 00 90 4D |  if_c_and_nz	jmp	#LR__2310
1d824     00 12 06 F6 | 	mov	arg01, #0
1d828     88 05 B1 FD | 	call	#__system___getiolock_0620
1d82c     FD 12 02 F6 | 	mov	arg01, result1
1d830     DC A8 B0 FD | 	call	#__system___lockmem
1d834     B6 01 00 FF 
1d838     21 15 06 F6 | 	mov	arg02, ##@LR__5919
1d83c     00 12 06 F6 | 	mov	arg01, #0
1d840     00 16 06 F6 | 	mov	arg03, #0
1d844     C0 B5 B0 FD | 	call	#__system___basic_print_string
1d848     00 12 06 F6 | 	mov	arg01, #0
1d84c     64 05 B1 FD | 	call	#__system___getiolock_0620
1d850     FD 00 68 FC | 	wrlong	#0, result1
1d854     27 12 06 F6 | 	mov	arg01, #39
1d858     00 14 06 F6 | 	mov	arg02, #0
1d85c     5C 6E B0 FD | 	call	#_printerror
1d860     60 02 90 FD | 	jmp	#LR__2323
1d864                 | LR__2310
1d864     B8 FF BE FD | 	call	#_pop
1d868     FF 16 02 F6 | 	mov	arg03, result3
1d86c     A7 FA 61 FC | 	wrlong	result1, fp
1d870     04 4E 05 F1 | 	add	fp, #4
1d874     A7 FC 61 FC | 	wrlong	result2, fp
1d878     04 4E 05 F1 | 	add	fp, #4
1d87c     A7 16 62 FC | 	wrlong	arg03, fp
1d880                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1d880     08 4E 85 F1 | 	sub	fp, #8
1d884     2B 16 0E F2 | 	cmp	arg03, #43 wz
1d888     18 00 90 5D |  if_ne	jmp	#LR__2311
1d88c     A7 12 02 FB | 	rdlong	arg01, fp
1d890     04 01 BF FD | 	call	#_convertstring
1d894     A7 FA 61 FC | 	wrlong	result1, fp
1d898     08 4E 05 F1 | 	add	fp, #8
1d89c     A7 3E 68 FC | 	wrlong	#31, fp
1d8a0     08 4E 85 F1 | 	sub	fp, #8
1d8a4                 | LR__2311
1d8a4                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1d8a4     08 4E 05 F1 | 	add	fp, #8
1d8a8     A7 16 02 FB | 	rdlong	arg03, fp
1d8ac     08 4E 85 F1 | 	sub	fp, #8
1d8b0     1F 16 0E F2 | 	cmp	arg03, #31 wz
1d8b4     40 00 90 AD |  if_e	jmp	#LR__2312
1d8b8     00 12 06 F6 | 	mov	arg01, #0
1d8bc     F4 04 B1 FD | 	call	#__system___getiolock_0620
1d8c0     FD 12 02 F6 | 	mov	arg01, result1
1d8c4     48 A8 B0 FD | 	call	#__system___lockmem
1d8c8     B6 01 00 FF 
1d8cc     27 15 06 F6 | 	mov	arg02, ##@LR__5920
1d8d0     00 12 06 F6 | 	mov	arg01, #0
1d8d4     00 16 06 F6 | 	mov	arg03, #0
1d8d8     2C B5 B0 FD | 	call	#__system___basic_print_string
1d8dc     00 12 06 F6 | 	mov	arg01, #0
1d8e0     D0 04 B1 FD | 	call	#__system___getiolock_0620
1d8e4     FD 00 68 FC | 	wrlong	#0, result1
1d8e8     0F 12 06 F6 | 	mov	arg01, #15
1d8ec     00 14 06 F6 | 	mov	arg02, #0
1d8f0     C8 6D B0 FD | 	call	#_printerror
1d8f4     CC 01 90 FD | 	jmp	#LR__2323
1d8f8                 | LR__2312
1d8f8                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1d8f8     A7 12 02 FB | 	rdlong	arg01, fp
1d8fc     01 14 06 F6 | 	mov	arg02, #1
1d900     8C C8 B0 FD | 	call	#__system__Left_S
1d904     FD 12 02 F6 | 	mov	arg01, result1
1d908     B6 01 00 FF 
1d90c     2D 15 06 F6 | 	mov	arg02, ##@LR__5921
1d910     24 A8 B0 FD | 	call	#__system___string_cmp
1d914     00 FA 0D F2 | 	cmp	result1, #0 wz
1d918     48 00 90 5D |  if_ne	jmp	#LR__2315
1d91c     B6 01 00 FF 
1d920     2F 27 06 F6 | 	mov	local01, ##@LR__5922
1d924     A7 16 02 FB | 	rdlong	arg03, fp
1d928     0B 13 02 F6 | 	mov	arg01, arg03
1d92c     09 29 02 F6 | 	mov	local02, arg01
1d930     97 06 48 FB | 	callpa	#(@LR__2314-@LR__2313)>>2,fcache_load_ptr_
1d934                 | LR__2313
1d934     14 FB C9 FA | 	rdbyte	result1, local02 wz
1d938     01 28 06 51 |  if_ne	add	local02, #1
1d93c     F4 FF 9F 5D |  if_ne	jmp	#LR__2313
1d940                 | LR__2314
1d940     09 29 82 F1 | 	sub	local02, arg01
1d944     14 15 02 F6 | 	mov	arg02, local02
1d948     01 14 86 F1 | 	sub	arg02, #1
1d94c     0B 13 02 F6 | 	mov	arg01, arg03
1d950     C4 C8 B0 FD | 	call	#__system__Right_S
1d954     FD 14 02 F6 | 	mov	arg02, result1
1d958     13 13 02 F6 | 	mov	arg01, local01
1d95c     0C A8 B0 FD | 	call	#__system___string_concat
1d960     A7 FA 61 FC | 	wrlong	result1, fp
1d964                 | LR__2315
1d964                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1d964     A7 12 02 FB | 	rdlong	arg01, fp
1d968     01 14 06 F6 | 	mov	arg02, #1
1d96c     20 C8 B0 FD | 	call	#__system__Left_S
1d970     FD 12 02 F6 | 	mov	arg01, result1
1d974     B6 01 00 FF 
1d978     32 15 06 F6 | 	mov	arg02, ##@LR__5923
1d97c     B8 A7 B0 FD | 	call	#__system___string_cmp
1d980     00 FA 0D F2 | 	cmp	result1, #0 wz
1d984     48 00 90 5D |  if_ne	jmp	#LR__2318
1d988     B6 01 00 FF 
1d98c     34 27 06 F6 | 	mov	local01, ##@LR__5924
1d990     A7 16 02 FB | 	rdlong	arg03, fp
1d994     0B 13 02 F6 | 	mov	arg01, arg03
1d998     09 29 02 F6 | 	mov	local02, arg01
1d99c     97 06 48 FB | 	callpa	#(@LR__2317-@LR__2316)>>2,fcache_load_ptr_
1d9a0                 | LR__2316
1d9a0     14 FB C9 FA | 	rdbyte	result1, local02 wz
1d9a4     01 28 06 51 |  if_ne	add	local02, #1
1d9a8     F4 FF 9F 5D |  if_ne	jmp	#LR__2316
1d9ac                 | LR__2317
1d9ac     09 29 82 F1 | 	sub	local02, arg01
1d9b0     14 15 02 F6 | 	mov	arg02, local02
1d9b4     01 14 86 F1 | 	sub	arg02, #1
1d9b8     0B 13 02 F6 | 	mov	arg01, arg03
1d9bc     58 C8 B0 FD | 	call	#__system__Right_S
1d9c0     FD 14 02 F6 | 	mov	arg02, result1
1d9c4     13 13 02 F6 | 	mov	arg01, local01
1d9c8     A0 A7 B0 FD | 	call	#__system___string_concat
1d9cc     A7 FA 61 FC | 	wrlong	result1, fp
1d9d0                 | LR__2318
1d9d0     A7 12 02 FB | 	rdlong	arg01, fp
1d9d4     C4 DD B0 FD | 	call	#__system____builtin_atof
1d9d8     1C 4E 05 F1 | 	add	fp, #28
1d9dc     A7 FA 61 FC | 	wrlong	result1, fp
1d9e0     1C 4E 85 F1 | 	sub	fp, #28
1d9e4     A7 12 02 FB | 	rdlong	arg01, fp
1d9e8     00 14 06 F6 | 	mov	arg02, #0
1d9ec     14 DC B0 FD | 	call	#__system____builtin_atoi
1d9f0     18 4E 05 F1 | 	add	fp, #24
1d9f4     A7 FA 61 FC | 	wrlong	result1, fp
1d9f8                 | ' fval=val(t1.result.sresult)
1d9f8                 | ' ival=val%(t1.result.sresult)
1d9f8                 | ' if fval=ival then
1d9f8     04 4E 05 F1 | 	add	fp, #4
1d9fc     A7 26 02 FB | 	rdlong	local01, fp
1da00     1C 4E 85 F1 | 	sub	fp, #28
1da04     FD 12 52 F6 | 	abs	arg01, result1 wc
1da08     1F 2A C6 C9 |  if_b	decod	local03, #31
1da0c     00 2A 06 36 |  if_ae	mov	local03, #0
1da10     74 D1 B0 FD | 	call	#__system___float_fromuns
1da14     15 FB 61 F5 | 	xor	result1, local03
1da18     FD 14 02 F6 | 	mov	arg02, result1
1da1c     13 13 02 F6 | 	mov	arg01, local01
1da20     01 16 06 F6 | 	mov	arg03, #1
1da24     98 D9 B0 FD | 	call	#__system___float_cmp
1da28     00 FA 0D F2 | 	cmp	result1, #0 wz
1da2c     20 00 90 5D |  if_ne	jmp	#LR__2319
1da30     18 4E 05 F1 | 	add	fp, #24
1da34     A7 26 02 FB | 	rdlong	local01, fp
1da38     18 4E 85 F1 | 	sub	fp, #24
1da3c     A7 26 62 FC | 	wrlong	local01, fp
1da40     08 4E 05 F1 | 	add	fp, #8
1da44     A7 38 68 FC | 	wrlong	#28, fp
1da48     08 4E 85 F1 | 	sub	fp, #8
1da4c     6C 00 90 FD | 	jmp	#LR__2322
1da50                 | LR__2319
1da50                 | '   if fval=0 andalso ival<>0 then
1da50     1C 4E 05 F1 | 	add	fp, #28
1da54     A7 12 02 FB | 	rdlong	arg01, fp
1da58     1C 4E 85 F1 | 	sub	fp, #28
1da5c     00 14 06 F6 | 	mov	arg02, #0
1da60     01 16 06 F6 | 	mov	arg03, #1
1da64     58 D9 B0 FD | 	call	#__system___float_cmp
1da68     00 FA 0D F2 | 	cmp	result1, #0 wz
1da6c     30 00 90 5D |  if_ne	jmp	#LR__2320
1da70     18 4E 05 F1 | 	add	fp, #24
1da74     A7 26 0A FB | 	rdlong	local01, fp wz
1da78     18 4E 85 F1 | 	sub	fp, #24
1da7c     20 00 90 AD |  if_e	jmp	#LR__2320
1da80     18 4E 05 F1 | 	add	fp, #24
1da84     A7 26 02 FB | 	rdlong	local01, fp
1da88     18 4E 85 F1 | 	sub	fp, #24
1da8c     A7 26 62 FC | 	wrlong	local01, fp
1da90     08 4E 05 F1 | 	add	fp, #8
1da94     A7 38 68 FC | 	wrlong	#28, fp
1da98     08 4E 85 F1 | 	sub	fp, #8
1da9c     1C 00 90 FD | 	jmp	#LR__2321
1daa0                 | LR__2320
1daa0     1C 4E 05 F1 | 	add	fp, #28
1daa4     A7 26 02 FB | 	rdlong	local01, fp
1daa8     1C 4E 85 F1 | 	sub	fp, #28
1daac     A7 26 62 FC | 	wrlong	local01, fp
1dab0     08 4E 05 F1 | 	add	fp, #8
1dab4     A7 3C 68 FC | 	wrlong	#30, fp
1dab8     08 4E 85 F1 | 	sub	fp, #8
1dabc                 | LR__2321
1dabc                 | LR__2322
1dabc     A7 12 02 F6 | 	mov	arg01, fp
1dac0     F4 FD BE FD | 	call	#_push
1dac4                 | LR__2323
1dac4     A7 F0 03 F6 | 	mov	ptra, fp
1dac8     B2 00 A0 FD | 	call	#popregs_
1dacc                 | _do_val_ret
1dacc     2D 00 64 FD | 	ret
1dad0                 | 
1dad0                 | ' 
1dad0                 | ' ' ------------------ waitclock
1dad0                 | ' 
1dad0                 | ' sub do_waitclock
1dad0                 | _do_waitclock
1dad0     52 00 00 FF 
1dad4     EC E4 05 F1 | 	add	objptr, ##42220
1dad8     F2 00 02 FB | 	rdlong	_var01, objptr
1dadc                 | ' c=hkcnt
1dadc                 | ' do: loop until hkcnt<>c
1dadc                 | LR__2330
1dadc     F2 02 02 FB | 	rdlong	_var02, objptr
1dae0     00 03 0A F2 | 	cmp	_var02, _var01 wz
1dae4     F4 FF 9F AD |  if_e	jmp	#LR__2330
1dae8     52 00 00 FF 
1daec     EC E4 85 F1 | 	sub	objptr, ##42220
1daf0                 | _do_waitclock_ret
1daf0     2D 00 64 FD | 	ret
1daf4                 | 
1daf4                 | ' 
1daf4                 | ' ' ------------------ waitms
1daf4                 | ' 
1daf4                 | ' sub do_waitms
1daf4                 | _do_waitms
1daf4     01 4A 05 F6 | 	mov	COUNT_, #1
1daf8     A8 00 A0 FD | 	call	#pushregs_
1dafc     18 F0 07 F1 | 	add	ptra, #24
1db00     1C FD BE FD | 	call	#_pop
1db04     A7 FA 61 FC | 	wrlong	result1, fp
1db08     04 4E 05 F1 | 	add	fp, #4
1db0c     A7 FC 61 FC | 	wrlong	result2, fp
1db10     04 4E 05 F1 | 	add	fp, #4
1db14     A7 FE 61 FC | 	wrlong	result3, fp
1db18     08 4E 85 F1 | 	sub	fp, #8
1db1c     A7 12 02 F6 | 	mov	arg01, fp
1db20     E0 FE BE FD | 	call	#_converttoint
1db24     0C 4E 05 F1 | 	add	fp, #12
1db28     A7 FA 61 FC | 	wrlong	result1, fp
1db2c                 | ' 
1db2c                 | ' t1=pop()  
1db2c                 | ' t=converttoint(t1)
1db2c                 | ' if t<0 then return
1db2c     0C 4E 85 F1 | 	sub	fp, #12
1db30     00 FA 55 F2 | 	cmps	result1, #0 wc
1db34     E4 00 90 CD |  if_b	jmp	#LR__2346
1db38                 | ' if t < 1000 then 
1db38     0C 4E 05 F1 | 	add	fp, #12
1db3c     A7 12 02 FB | 	rdlong	arg01, fp
1db40     0C 4E 85 F1 | 	sub	fp, #12
1db44     01 00 00 FF 
1db48     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1db4c     14 00 90 3D |  if_ae	jmp	#LR__2340
1db50     0C 4E 05 F1 | 	add	fp, #12
1db54     A7 12 02 FB | 	rdlong	arg01, fp
1db58     0C 4E 85 F1 | 	sub	fp, #12
1db5c     A4 A8 B0 FD | 	call	#__system___waitms
1db60     B8 00 90 FD | 	jmp	#LR__2345
1db64                 | LR__2340
1db64     10 4E 05 F1 | 	add	fp, #16
1db68     A7 02 68 FC | 	wrlong	#1, fp
1db6c     04 4E 85 F1 | 	sub	fp, #4
1db70     A7 12 02 FB | 	rdlong	arg01, fp
1db74     09 13 52 F6 | 	abs	arg01, arg01 wc
1db78     01 00 00 FF 
1db7c     E8 13 16 FD | 	qdiv	arg01, ##1000
1db80                 | '   for i=1 to t/1000
1db80     0C 4E 85 F1 | 	sub	fp, #12
1db84     18 26 62 FD | 	getqx	local01
1db88     13 27 82 F6 | 	negc	local01, local01
1db8c     01 26 06 F1 | 	add	local01, #1
1db90                 | LR__2341
1db90     10 4E 05 F1 | 	add	fp, #16
1db94     A7 12 02 FB | 	rdlong	arg01, fp
1db98     10 4E 85 F1 | 	sub	fp, #16
1db9c     13 13 52 F2 | 	cmps	arg01, local01 wc
1dba0     54 00 90 3D |  if_ae	jmp	#LR__2344
1dba4     01 00 00 FF 
1dba8     E8 13 06 F6 | 	mov	arg01, ##1000
1dbac     54 A8 B0 FD | 	call	#__system___waitms
1dbb0                 | '     waitms(1000)
1dbb0                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1dbb0     E0 12 06 F6 | 	mov	arg01, #224
1dbb4     44 9C B0 FD | 	call	#_usbnew_spin2_keystate
1dbb8     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbbc     10 00 90 5D |  if_ne	jmp	#LR__2342
1dbc0     E4 12 06 F6 | 	mov	arg01, #228
1dbc4     34 9C B0 FD | 	call	#_usbnew_spin2_keystate
1dbc8     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbcc     10 00 90 AD |  if_e	jmp	#LR__2343
1dbd0                 | LR__2342
1dbd0     06 12 06 F6 | 	mov	arg01, #6
1dbd4     24 9C B0 FD | 	call	#_usbnew_spin2_keystate
1dbd8     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbdc     3C 00 90 5D |  if_ne	jmp	#LR__2346
1dbe0                 | LR__2343
1dbe0     10 4E 05 F1 | 	add	fp, #16
1dbe4     A7 12 02 FB | 	rdlong	arg01, fp
1dbe8     01 12 06 F1 | 	add	arg01, #1
1dbec     A7 12 62 FC | 	wrlong	arg01, fp
1dbf0     10 4E 85 F1 | 	sub	fp, #16
1dbf4     98 FF 9F FD | 	jmp	#LR__2341
1dbf8                 | LR__2344
1dbf8     0C 4E 05 F1 | 	add	fp, #12
1dbfc     A7 26 02 FB | 	rdlong	local01, fp
1dc00     13 27 52 F6 | 	abs	local01, local01 wc
1dc04     01 00 00 FF 
1dc08     E8 27 16 FD | 	qdiv	local01, ##1000
1dc0c     0C 4E 85 F1 | 	sub	fp, #12
1dc10     19 26 62 FD | 	getqy	local01
1dc14     13 13 82 F6 | 	negc	arg01, local01
1dc18     E8 A7 B0 FD | 	call	#__system___waitms
1dc1c                 | LR__2345
1dc1c                 | LR__2346
1dc1c     A7 F0 03 F6 | 	mov	ptra, fp
1dc20     B2 00 A0 FD | 	call	#popregs_
1dc24                 | _do_waitms_ret
1dc24     2D 00 64 FD | 	ret
1dc28                 | 
1dc28                 | ' 
1dc28                 | ' ' ------------------ waitvbl
1dc28                 | ' 
1dc28                 | ' sub do_waitvbl
1dc28                 | _do_waitvbl
1dc28     01 12 06 F6 | 	mov	arg01, #1
1dc2c     E4 87 B0 FD | 	call	#_hg010b_spin2_waitvbl
1dc30                 | _do_waitvbl_ret
1dc30     2D 00 64 FD | 	ret
1dc34                 | 
1dc34                 | ' 
1dc34                 | ' ' ------------------ wrpin
1dc34                 | ' 
1dc34                 | ' sub do_wrpin
1dc34                 | _do_wrpin
1dc34     01 4A 05 F6 | 	mov	COUNT_, #1
1dc38     A8 00 A0 FD | 	call	#pushregs_
1dc3c     18 F0 07 F1 | 	add	ptra, #24
1dc40     DC FB BE FD | 	call	#_pop
1dc44     FD 14 02 F6 | 	mov	arg02, result1
1dc48     FE 12 02 F6 | 	mov	arg01, result2
1dc4c     FF 26 02 F6 | 	mov	local01, result3
1dc50     A7 14 62 FC | 	wrlong	arg02, fp
1dc54     04 4E 05 F1 | 	add	fp, #4
1dc58     A7 12 62 FC | 	wrlong	arg01, fp
1dc5c     04 4E 05 F1 | 	add	fp, #4
1dc60     A7 26 62 FC | 	wrlong	local01, fp
1dc64     08 4E 85 F1 | 	sub	fp, #8
1dc68     B4 FB BE FD | 	call	#_pop
1dc6c     FF 26 02 F6 | 	mov	local01, result3
1dc70     0C 4E 05 F1 | 	add	fp, #12
1dc74     A7 FA 61 FC | 	wrlong	result1, fp
1dc78     04 4E 05 F1 | 	add	fp, #4
1dc7c     A7 FC 61 FC | 	wrlong	result2, fp
1dc80     04 4E 05 F1 | 	add	fp, #4
1dc84     A7 26 62 FC | 	wrlong	local01, fp
1dc88     08 4E 85 F1 | 	sub	fp, #8
1dc8c     A7 12 02 F6 | 	mov	arg01, fp
1dc90     0C 4E 85 F1 | 	sub	fp, #12
1dc94     6C FD BE FD | 	call	#_converttoint
1dc98     FD 26 02 F6 | 	mov	local01, result1
1dc9c     A7 12 02 F6 | 	mov	arg01, fp
1dca0     60 FD BE FD | 	call	#_converttoint
1dca4     13 FB 01 FC | 	wrpin	result1, local01
1dca8     A7 F0 03 F6 | 	mov	ptra, fp
1dcac     B2 00 A0 FD | 	call	#popregs_
1dcb0                 | _do_wrpin_ret
1dcb0     2D 00 64 FD | 	ret
1dcb4                 | 
1dcb4                 | ' 
1dcb4                 | ' ' ------------------ wxpin
1dcb4                 | ' 
1dcb4                 | ' sub do_wxpin
1dcb4                 | _do_wxpin
1dcb4     01 4A 05 F6 | 	mov	COUNT_, #1
1dcb8     A8 00 A0 FD | 	call	#pushregs_
1dcbc     18 F0 07 F1 | 	add	ptra, #24
1dcc0     5C FB BE FD | 	call	#_pop
1dcc4     FD 14 02 F6 | 	mov	arg02, result1
1dcc8     FE 12 02 F6 | 	mov	arg01, result2
1dccc     FF 26 02 F6 | 	mov	local01, result3
1dcd0     A7 14 62 FC | 	wrlong	arg02, fp
1dcd4     04 4E 05 F1 | 	add	fp, #4
1dcd8     A7 12 62 FC | 	wrlong	arg01, fp
1dcdc     04 4E 05 F1 | 	add	fp, #4
1dce0     A7 26 62 FC | 	wrlong	local01, fp
1dce4     08 4E 85 F1 | 	sub	fp, #8
1dce8     34 FB BE FD | 	call	#_pop
1dcec     FF 26 02 F6 | 	mov	local01, result3
1dcf0     0C 4E 05 F1 | 	add	fp, #12
1dcf4     A7 FA 61 FC | 	wrlong	result1, fp
1dcf8     04 4E 05 F1 | 	add	fp, #4
1dcfc     A7 FC 61 FC | 	wrlong	result2, fp
1dd00     04 4E 05 F1 | 	add	fp, #4
1dd04     A7 26 62 FC | 	wrlong	local01, fp
1dd08     08 4E 85 F1 | 	sub	fp, #8
1dd0c     A7 12 02 F6 | 	mov	arg01, fp
1dd10     0C 4E 85 F1 | 	sub	fp, #12
1dd14     EC FC BE FD | 	call	#_converttoint
1dd18     FD 26 02 F6 | 	mov	local01, result1
1dd1c     A7 12 02 F6 | 	mov	arg01, fp
1dd20     E0 FC BE FD | 	call	#_converttoint
1dd24     13 FB 11 FC | 	wxpin	result1, local01
1dd28     A7 F0 03 F6 | 	mov	ptra, fp
1dd2c     B2 00 A0 FD | 	call	#popregs_
1dd30                 | _do_wxpin_ret
1dd30     2D 00 64 FD | 	ret
1dd34                 | 
1dd34                 | ' 
1dd34                 | ' ' ------------------ wypin
1dd34                 | ' 
1dd34                 | ' sub do_wypin
1dd34                 | _do_wypin
1dd34     01 4A 05 F6 | 	mov	COUNT_, #1
1dd38     A8 00 A0 FD | 	call	#pushregs_
1dd3c     18 F0 07 F1 | 	add	ptra, #24
1dd40     DC FA BE FD | 	call	#_pop
1dd44     FD 14 02 F6 | 	mov	arg02, result1
1dd48     FE 12 02 F6 | 	mov	arg01, result2
1dd4c     FF 26 02 F6 | 	mov	local01, result3
1dd50     A7 14 62 FC | 	wrlong	arg02, fp
1dd54     04 4E 05 F1 | 	add	fp, #4
1dd58     A7 12 62 FC | 	wrlong	arg01, fp
1dd5c     04 4E 05 F1 | 	add	fp, #4
1dd60     A7 26 62 FC | 	wrlong	local01, fp
1dd64     08 4E 85 F1 | 	sub	fp, #8
1dd68     B4 FA BE FD | 	call	#_pop
1dd6c     FF 26 02 F6 | 	mov	local01, result3
1dd70     0C 4E 05 F1 | 	add	fp, #12
1dd74     A7 FA 61 FC | 	wrlong	result1, fp
1dd78     04 4E 05 F1 | 	add	fp, #4
1dd7c     A7 FC 61 FC | 	wrlong	result2, fp
1dd80     04 4E 05 F1 | 	add	fp, #4
1dd84     A7 26 62 FC | 	wrlong	local01, fp
1dd88     08 4E 85 F1 | 	sub	fp, #8
1dd8c     A7 12 02 F6 | 	mov	arg01, fp
1dd90     0C 4E 85 F1 | 	sub	fp, #12
1dd94     6C FC BE FD | 	call	#_converttoint
1dd98     FD 26 02 F6 | 	mov	local01, result1
1dd9c     A7 12 02 F6 | 	mov	arg01, fp
1dda0     60 FC BE FD | 	call	#_converttoint
1dda4     13 FB 21 FC | 	wypin	result1, local01
1dda8     A7 F0 03 F6 | 	mov	ptra, fp
1ddac     B2 00 A0 FD | 	call	#popregs_
1ddb0                 | _do_wypin_ret
1ddb0     2D 00 64 FD | 	ret
1ddb4                 | 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ddb4                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1ddb4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' '------------------ Assign
1ddb4                 | ' 
1ddb4                 | ' sub do_assign
1ddb4                 | _do_assign
1ddb4     05 4A 05 F6 | 	mov	COUNT_, #5
1ddb8     A8 00 A0 FD | 	call	#pushregs_
1ddbc     44 F0 07 F1 | 	add	ptra, #68
1ddc0     4A 00 00 FF 
1ddc4     A0 E4 05 F1 | 	add	objptr, ##38048
1ddc8     F2 16 02 FB | 	rdlong	arg03, objptr
1ddcc     0B 15 02 F6 | 	mov	arg02, arg03
1ddd0     01 14 66 F0 | 	shl	arg02, #1
1ddd4     0B 15 02 F1 | 	add	arg02, arg03
1ddd8     02 14 66 F0 | 	shl	arg02, #2
1dddc     03 00 00 FF 
1dde0     04 E4 85 F1 | 	sub	objptr, ##1540
1dde4     F2 14 02 F1 | 	add	arg02, objptr
1dde8     0A 15 02 FB | 	rdlong	arg02, arg02
1ddec     18 4E 05 F1 | 	add	fp, #24
1ddf0     A7 14 62 FC | 	wrlong	arg02, fp
1ddf4                 | ' 
1ddf4                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1ddf4                 | ' if variables(varnum).vartype<array_no_type then 
1ddf4     18 4E 85 F1 | 	sub	fp, #24
1ddf8     04 14 66 F0 | 	shl	arg02, #4
1ddfc     32 00 00 FF 
1de00     84 E4 85 F1 | 	sub	objptr, ##25732
1de04     F2 14 02 F1 | 	add	arg02, objptr
1de08     0C 14 06 F1 | 	add	arg02, #12
1de0c     0A 17 02 FB | 	rdlong	arg03, arg02
1de10     00 17 16 F2 | 	cmp	arg03, #256 wc
1de14     15 00 00 FF 
1de18     18 E4 85 F1 | 	sub	objptr, ##10776
1de1c     18 01 90 3D |  if_ae	jmp	#LR__2350
1de20     FC F9 BE FD | 	call	#_pop
1de24     A7 FA 61 FC | 	wrlong	result1, fp
1de28     04 4E 05 F1 | 	add	fp, #4
1de2c     A7 FC 61 FC | 	wrlong	result2, fp
1de30     04 4E 05 F1 | 	add	fp, #4
1de34     A7 FE 61 FC | 	wrlong	result3, fp
1de38     08 4E 85 F1 | 	sub	fp, #8
1de3c     A7 16 02 FB | 	rdlong	arg03, fp
1de40     04 4E 05 F1 | 	add	fp, #4
1de44     A7 14 02 FB | 	rdlong	arg02, fp
1de48     14 4E 05 F1 | 	add	fp, #20
1de4c     A7 12 02 FB | 	rdlong	arg01, fp
1de50     04 12 66 F0 | 	shl	arg01, #4
1de54     15 00 00 FF 
1de58     18 E4 05 F1 | 	add	objptr, ##10776
1de5c     F2 12 02 F1 | 	add	arg01, objptr
1de60     04 12 06 F1 | 	add	arg01, #4
1de64     09 17 62 FC | 	wrlong	arg03, arg01
1de68     A7 16 02 FB | 	rdlong	arg03, fp
1de6c     04 16 66 F0 | 	shl	arg03, #4
1de70     F2 16 02 F1 | 	add	arg03, objptr
1de74     08 16 06 F1 | 	add	arg03, #8
1de78     0B 15 62 FC | 	wrlong	arg02, arg03
1de7c     A7 16 02 FB | 	rdlong	arg03, fp
1de80     04 16 66 F0 | 	shl	arg03, #4
1de84     F2 16 02 F1 | 	add	arg03, objptr
1de88     10 4E 85 F1 | 	sub	fp, #16
1de8c     A7 14 02 FB | 	rdlong	arg02, fp
1de90     0C 16 06 F1 | 	add	arg03, #12
1de94     0B 15 62 FC | 	wrlong	arg02, arg03
1de98                 | '   t1=pop() 
1de98                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1de98                 | '   if variables(varnum).vartype<>result_string2 then return
1de98     10 4E 05 F1 | 	add	fp, #16
1de9c     A7 16 02 FB | 	rdlong	arg03, fp
1dea0     18 4E 85 F1 | 	sub	fp, #24
1dea4     04 16 66 F0 | 	shl	arg03, #4
1dea8     F2 16 02 F1 | 	add	arg03, objptr
1deac     0C 16 06 F1 | 	add	arg03, #12
1deb0     0B 17 02 FB | 	rdlong	arg03, arg03
1deb4     2B 16 0E F2 | 	cmp	arg03, #43 wz
1deb8     15 00 00 FF 
1debc     18 E4 85 F1 | 	sub	objptr, ##10776
1dec0     EC 04 90 5D |  if_ne	jmp	#LR__2373
1dec4     18 4E 05 F1 | 	add	fp, #24
1dec8     A7 16 02 FB | 	rdlong	arg03, fp
1decc     0B 27 02 F6 | 	mov	local01, arg03
1ded0     04 26 66 F0 | 	shl	local01, #4
1ded4     15 00 00 FF 
1ded8     18 E4 05 F1 | 	add	objptr, ##10776
1dedc     F2 26 02 F1 | 	add	local01, objptr
1dee0     18 4E 85 F1 | 	sub	fp, #24
1dee4     04 16 66 F0 | 	shl	arg03, #4
1dee8     F2 16 02 F1 | 	add	arg03, objptr
1deec     04 16 06 F1 | 	add	arg03, #4
1def0     0B 13 02 FB | 	rdlong	arg01, arg03
1def4     15 00 00 FF 
1def8     18 E4 85 F1 | 	sub	objptr, ##10776
1defc     98 FA BE FD | 	call	#_convertstring
1df00     04 26 06 F1 | 	add	local01, #4
1df04     13 FB 61 FC | 	wrlong	result1, local01
1df08     18 4E 05 F1 | 	add	fp, #24
1df0c     A7 26 02 FB | 	rdlong	local01, fp
1df10     18 4E 85 F1 | 	sub	fp, #24
1df14     04 26 66 F0 | 	shl	local01, #4
1df18     15 00 00 FF 
1df1c     18 E4 05 F1 | 	add	objptr, ##10776
1df20     F2 26 02 F1 | 	add	local01, objptr
1df24     0C 26 06 F1 | 	add	local01, #12
1df28     13 3F 68 FC | 	wrlong	#31, local01
1df2c                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1df2c                 | '   variables(varnum).vartype=result_string
1df2c                 | '   return
1df2c     15 00 00 FF 
1df30     18 E4 85 F1 | 	sub	objptr, ##10776
1df34     78 04 90 FD | 	jmp	#LR__2373
1df38                 | LR__2350
1df38                 | ' for i=0 to 2 : arrid(i)=0 : next i
1df38     1C 4E 05 F1 | 	add	fp, #28
1df3c     A7 00 68 FC | 	wrlong	#0, fp
1df40     97 16 48 FB | 	callpa	#(@LR__2352-@LR__2351)>>2,fcache_load_ptr_
1df44                 | LR__2351
1df44     A7 26 02 FB | 	rdlong	local01, fp
1df48     02 26 66 F0 | 	shl	local01, #2
1df4c     18 4E 05 F1 | 	add	fp, #24
1df50     A7 26 02 F1 | 	add	local01, fp
1df54     13 01 68 FC | 	wrlong	#0, local01
1df58     18 4E 85 F1 | 	sub	fp, #24
1df5c     A7 26 02 FB | 	rdlong	local01, fp
1df60     01 26 06 F1 | 	add	local01, #1
1df64     A7 26 62 FC | 	wrlong	local01, fp
1df68     03 26 16 F2 | 	cmp	local01, #3 wc
1df6c     D4 FF 9F CD |  if_b	jmp	#LR__2351
1df70                 | LR__2352
1df70     4A 00 00 FF 
1df74     A0 E4 05 F1 | 	add	objptr, ##38048
1df78     F2 16 02 FB | 	rdlong	arg03, objptr
1df7c     0B 27 02 F6 | 	mov	local01, arg03
1df80     01 26 66 F0 | 	shl	local01, #1
1df84     0B 27 02 F1 | 	add	local01, arg03
1df88     02 26 66 F0 | 	shl	local01, #2
1df8c     03 00 00 FF 
1df90     04 E4 85 F1 | 	sub	objptr, ##1540
1df94     F2 26 02 F1 | 	add	local01, objptr
1df98     04 26 06 F1 | 	add	local01, #4
1df9c     13 29 02 FB | 	rdlong	local02, local01
1dfa0     04 4E 05 F1 | 	add	fp, #4
1dfa4     A7 28 62 FC | 	wrlong	local02, fp
1dfa8     20 4E 85 F1 | 	sub	fp, #32
1dfac     47 00 00 FF 
1dfb0     9C E4 85 F1 | 	sub	objptr, ##36508
1dfb4     68 F8 BE FD | 	call	#_pop
1dfb8     A7 FA 61 FC | 	wrlong	result1, fp
1dfbc     04 4E 05 F1 | 	add	fp, #4
1dfc0     A7 FC 61 FC | 	wrlong	result2, fp
1dfc4     04 4E 05 F1 | 	add	fp, #4
1dfc8     A7 FE 61 FC | 	wrlong	result3, fp
1dfcc                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1dfcc                 | ' t1=pop() ' var value
1dfcc                 | ' if numpar>0 then
1dfcc     18 4E 05 F1 | 	add	fp, #24
1dfd0     A7 2A 02 FB | 	rdlong	local03, fp
1dfd4     20 4E 85 F1 | 	sub	fp, #32
1dfd8     01 2A 16 F2 | 	cmp	local03, #1 wc
1dfdc     78 00 90 CD |  if_b	jmp	#LR__2355
1dfe0                 | '   for i=numpar to 1 step -1
1dfe0     20 4E 05 F1 | 	add	fp, #32
1dfe4     A7 2C 0A FB | 	rdlong	local04, fp wz
1dfe8     04 4E 85 F1 | 	sub	fp, #4
1dfec     A7 2C 62 FC | 	wrlong	local04, fp
1dff0     1C 4E 85 F1 | 	sub	fp, #28
1dff4     60 00 90 AD |  if_e	jmp	#LR__2354
1dff8                 | LR__2353
1dff8     24 F8 BE FD | 	call	#_pop
1dffc     0C 4E 05 F1 | 	add	fp, #12
1e000     A7 FA 61 FC | 	wrlong	result1, fp
1e004     04 4E 05 F1 | 	add	fp, #4
1e008     A7 FC 61 FC | 	wrlong	result2, fp
1e00c     04 4E 05 F1 | 	add	fp, #4
1e010     A7 FE 61 FC | 	wrlong	result3, fp
1e014     08 4E 05 F1 | 	add	fp, #8
1e018     A7 2A 02 FB | 	rdlong	local03, fp
1e01c     01 2A 86 F1 | 	sub	local03, #1
1e020     02 2A 66 F0 | 	shl	local03, #2
1e024     18 4E 05 F1 | 	add	fp, #24
1e028     A7 2A 02 F1 | 	add	local03, fp
1e02c     28 4E 85 F1 | 	sub	fp, #40
1e030     A7 12 02 F6 | 	mov	arg01, fp
1e034     0C 4E 85 F1 | 	sub	fp, #12
1e038     C8 F9 BE FD | 	call	#_converttoint
1e03c     15 FB 61 FC | 	wrlong	result1, local03
1e040     1C 4E 05 F1 | 	add	fp, #28
1e044     A7 2C 02 FB | 	rdlong	local04, fp
1e048     01 2C 8E F1 | 	sub	local04, #1 wz
1e04c     A7 2C 62 FC | 	wrlong	local04, fp
1e050     1C 4E 85 F1 | 	sub	fp, #28
1e054     A0 FF 9F 5D |  if_ne	jmp	#LR__2353
1e058                 | LR__2354
1e058                 | LR__2355
1e058     18 4E 05 F1 | 	add	fp, #24
1e05c     A7 26 02 FB | 	rdlong	local01, fp
1e060     04 26 66 F0 | 	shl	local01, #4
1e064     15 00 00 FF 
1e068     18 E4 05 F1 | 	add	objptr, ##10776
1e06c     F2 26 02 F1 | 	add	local01, objptr
1e070     04 26 06 F1 | 	add	local01, #4
1e074     13 13 02 FB | 	rdlong	arg01, local01
1e078     0C 4E 05 F1 | 	add	fp, #12
1e07c     A7 12 62 FC | 	wrlong	arg01, fp
1e080     24 4E 85 F1 | 	sub	fp, #36
1e084     15 00 00 FF 
1e088     18 E4 85 F1 | 	sub	objptr, ##10776
1e08c     FC 68 B0 FD | 	call	#_pslpeek
1e090     FD 2C 32 F9 | 	getword	local04, result1, #0
1e094     28 4E 05 F1 | 	add	fp, #40
1e098     A7 2C 62 FC | 	wrlong	local04, fp
1e09c     04 4E 85 F1 | 	sub	fp, #4
1e0a0     A7 12 02 FB | 	rdlong	arg01, fp
1e0a4     24 4E 85 F1 | 	sub	fp, #36
1e0a8     02 12 06 F1 | 	add	arg01, #2
1e0ac     84 68 B0 FD | 	call	#_pspeek
1e0b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e0b4     2C 4E 05 F1 | 	add	fp, #44
1e0b8     A7 FA 61 FC | 	wrlong	result1, fp
1e0bc                 | ' esize=pspeek(arrptr+2)
1e0bc                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1e0bc     08 4E 85 F1 | 	sub	fp, #8
1e0c0     A7 12 02 FB | 	rdlong	arg01, fp
1e0c4     24 4E 85 F1 | 	sub	fp, #36
1e0c8     04 12 06 F1 | 	add	arg01, #4
1e0cc     BC 68 B0 FD | 	call	#_pslpeek
1e0d0     FD 2C 02 F6 | 	mov	local04, result1
1e0d4     34 4E 05 F1 | 	add	fp, #52
1e0d8     A7 26 02 FB | 	rdlong	local01, fp
1e0dc     34 4E 85 F1 | 	sub	fp, #52
1e0e0     16 27 12 F2 | 	cmp	local01, local04 wc
1e0e4     54 00 90 3D |  if_ae	jmp	#LR__2356
1e0e8     24 4E 05 F1 | 	add	fp, #36
1e0ec     A7 12 02 FB | 	rdlong	arg01, fp
1e0f0     24 4E 85 F1 | 	sub	fp, #36
1e0f4     08 12 06 F1 | 	add	arg01, #8
1e0f8     90 68 B0 FD | 	call	#_pslpeek
1e0fc     FD 26 02 F6 | 	mov	local01, result1
1e100     38 4E 05 F1 | 	add	fp, #56
1e104     A7 2C 02 FB | 	rdlong	local04, fp
1e108     38 4E 85 F1 | 	sub	fp, #56
1e10c     13 2D 12 F2 | 	cmp	local04, local01 wc
1e110     28 00 90 3D |  if_ae	jmp	#LR__2356
1e114     24 4E 05 F1 | 	add	fp, #36
1e118     A7 12 02 FB | 	rdlong	arg01, fp
1e11c     24 4E 85 F1 | 	sub	fp, #36
1e120     0C 12 06 F1 | 	add	arg01, #12
1e124     64 68 B0 FD | 	call	#_pslpeek
1e128     3C 4E 05 F1 | 	add	fp, #60
1e12c     A7 2C 02 FB | 	rdlong	local04, fp
1e130     3C 4E 85 F1 | 	sub	fp, #60
1e134     FD 2C 12 F2 | 	cmp	local04, result1 wc
1e138     10 00 90 CD |  if_b	jmp	#LR__2357
1e13c                 | LR__2356
1e13c     31 12 06 F6 | 	mov	arg01, #49
1e140     00 14 06 F6 | 	mov	arg02, #0
1e144     74 65 B0 FD | 	call	#_printerror
1e148     64 02 90 FD | 	jmp	#LR__2373
1e14c                 | LR__2357
1e14c     24 4E 05 F1 | 	add	fp, #36
1e150     A7 12 02 FB | 	rdlong	arg01, fp
1e154     09 2D 02 F6 | 	mov	local04, arg01
1e158     10 2C 06 F1 | 	add	local04, #16
1e15c     24 4E 85 F1 | 	sub	fp, #36
1e160     04 12 06 F1 | 	add	arg01, #4
1e164     24 68 B0 FD | 	call	#_pslpeek
1e168     FD 26 02 F6 | 	mov	local01, result1
1e16c     38 4E 05 F1 | 	add	fp, #56
1e170     A7 28 02 FB | 	rdlong	local02, fp
1e174     14 27 02 FD | 	qmul	local01, local02
1e178     04 4E 85 F1 | 	sub	fp, #4
1e17c     A7 2A 02 FB | 	rdlong	local03, fp
1e180     10 4E 85 F1 | 	sub	fp, #16
1e184     A7 12 02 FB | 	rdlong	arg01, fp
1e188     24 4E 85 F1 | 	sub	fp, #36
1e18c     08 12 06 F1 | 	add	arg01, #8
1e190     18 28 62 FD | 	getqx	local02
1e194     14 2B 02 F1 | 	add	local03, local02
1e198     F0 67 B0 FD | 	call	#_pslpeek
1e19c     FD 28 02 F6 | 	mov	local02, result1
1e1a0     24 4E 05 F1 | 	add	fp, #36
1e1a4     A7 12 02 FB | 	rdlong	arg01, fp
1e1a8     24 4E 85 F1 | 	sub	fp, #36
1e1ac     04 12 06 F1 | 	add	arg01, #4
1e1b0     D8 67 B0 FD | 	call	#_pslpeek
1e1b4     FD 28 02 FD | 	qmul	local02, result1
1e1b8     3C 4E 05 F1 | 	add	fp, #60
1e1bc     A7 28 02 FB | 	rdlong	local02, fp
1e1c0     18 26 62 FD | 	getqx	local01
1e1c4     14 27 02 FD | 	qmul	local01, local02
1e1c8     10 4E 85 F1 | 	sub	fp, #16
1e1cc     A7 28 02 FB | 	rdlong	local02, fp
1e1d0     18 26 62 FD | 	getqx	local01
1e1d4     13 2B 02 F1 | 	add	local03, local01
1e1d8     15 29 02 FD | 	qmul	local02, local03
1e1dc     04 4E 05 F1 | 	add	fp, #4
1e1e0                 | ' 
1e1e0                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1e1e0                 | ' select case arrtype
1e1e0     18 2A 62 FD | 	getqx	local03
1e1e4     15 2D 02 F1 | 	add	local04, local03
1e1e8     A7 2C 62 FC | 	wrlong	local04, fp
1e1ec     08 4E 85 F1 | 	sub	fp, #8
1e1f0     A7 2E 02 FB | 	rdlong	local05, fp
1e1f4     28 4E 85 F1 | 	sub	fp, #40
1e1f8     00 2F 86 F1 | 	sub	local05, #256
1e1fc     0C 2E 26 F3 | 	fle	local05, #12
1e200     30 2E 62 FD | 	jmprel	local05
1e204                 | LR__2358
1e204     30 00 90 FD | 	jmp	#LR__2359
1e208     58 00 90 FD | 	jmp	#LR__2360
1e20c     6C 00 90 FD | 	jmp	#LR__2361
1e210     80 00 90 FD | 	jmp	#LR__2362
1e214     B0 00 90 FD | 	jmp	#LR__2363
1e218     E0 00 90 FD | 	jmp	#LR__2364
1e21c     F4 00 90 FD | 	jmp	#LR__2365
1e220     08 01 90 FD | 	jmp	#LR__2366
1e224     1C 01 90 FD | 	jmp	#LR__2367
1e228     30 01 90 FD | 	jmp	#LR__2368
1e22c     44 01 90 FD | 	jmp	#LR__2369
1e230     58 01 90 FD | 	jmp	#LR__2370
1e234     6C 01 90 FD | 	jmp	#LR__2371
1e238                 | LR__2359
1e238     A7 12 02 F6 | 	mov	arg01, fp
1e23c     30 4E 05 F1 | 	add	fp, #48
1e240     A7 14 02 FB | 	rdlong	arg02, fp
1e244     30 4E 85 F1 | 	sub	fp, #48
1e248     0C 16 06 F6 | 	mov	arg03, #12
1e24c     0B 00 00 FF 
1e250     CC E4 05 F1 | 	add	objptr, ##5836
1e254     B0 92 B0 FD | 	call	#_psram_spin2_write
1e258     0B 00 00 FF 
1e25c     CC E4 85 F1 | 	sub	objptr, ##5836
1e260     4C 01 90 FD | 	jmp	#LR__2372
1e264                 | LR__2360
1e264     30 4E 05 F1 | 	add	fp, #48
1e268     A7 12 02 FB | 	rdlong	arg01, fp
1e26c     30 4E 85 F1 | 	sub	fp, #48
1e270     A7 14 02 FB | 	rdlong	arg02, fp
1e274     74 66 B0 FD | 	call	#_pspoke
1e278     34 01 90 FD | 	jmp	#LR__2372
1e27c                 | LR__2361
1e27c     30 4E 05 F1 | 	add	fp, #48
1e280     A7 12 02 FB | 	rdlong	arg01, fp
1e284     30 4E 85 F1 | 	sub	fp, #48
1e288     A7 14 02 FB | 	rdlong	arg02, fp
1e28c     5C 66 B0 FD | 	call	#_pspoke
1e290     1C 01 90 FD | 	jmp	#LR__2372
1e294                 | LR__2362
1e294     30 4E 05 F1 | 	add	fp, #48
1e298     A7 12 02 FB | 	rdlong	arg01, fp
1e29c     30 4E 85 F1 | 	sub	fp, #48
1e2a0     A7 14 02 FB | 	rdlong	arg02, fp
1e2a4     44 66 B0 FD | 	call	#_pspoke
1e2a8     30 4E 05 F1 | 	add	fp, #48
1e2ac     A7 12 02 FB | 	rdlong	arg01, fp
1e2b0     30 4E 85 F1 | 	sub	fp, #48
1e2b4     01 12 06 F1 | 	add	arg01, #1
1e2b8     A7 14 02 FB | 	rdlong	arg02, fp
1e2bc     08 14 46 F0 | 	shr	arg02, #8
1e2c0     28 66 B0 FD | 	call	#_pspoke
1e2c4     E8 00 90 FD | 	jmp	#LR__2372
1e2c8                 | LR__2363
1e2c8     30 4E 05 F1 | 	add	fp, #48
1e2cc     A7 12 02 FB | 	rdlong	arg01, fp
1e2d0     30 4E 85 F1 | 	sub	fp, #48
1e2d4     A7 14 02 FB | 	rdlong	arg02, fp
1e2d8     10 66 B0 FD | 	call	#_pspoke
1e2dc     30 4E 05 F1 | 	add	fp, #48
1e2e0     A7 12 02 FB | 	rdlong	arg01, fp
1e2e4     30 4E 85 F1 | 	sub	fp, #48
1e2e8     01 12 06 F1 | 	add	arg01, #1
1e2ec     A7 14 02 FB | 	rdlong	arg02, fp
1e2f0     08 14 46 F0 | 	shr	arg02, #8
1e2f4     F4 65 B0 FD | 	call	#_pspoke
1e2f8     B4 00 90 FD | 	jmp	#LR__2372
1e2fc                 | LR__2364
1e2fc     30 4E 05 F1 | 	add	fp, #48
1e300     A7 12 02 FB | 	rdlong	arg01, fp
1e304     30 4E 85 F1 | 	sub	fp, #48
1e308     A7 14 02 FB | 	rdlong	arg02, fp
1e30c     4C 65 B0 FD | 	call	#_pslpoke
1e310     9C 00 90 FD | 	jmp	#LR__2372
1e314                 | LR__2365
1e314     30 4E 05 F1 | 	add	fp, #48
1e318     A7 12 02 FB | 	rdlong	arg01, fp
1e31c     30 4E 85 F1 | 	sub	fp, #48
1e320     A7 14 02 FB | 	rdlong	arg02, fp
1e324     34 65 B0 FD | 	call	#_pslpoke
1e328     84 00 90 FD | 	jmp	#LR__2372
1e32c                 | LR__2366
1e32c     30 4E 05 F1 | 	add	fp, #48
1e330     A7 12 02 FB | 	rdlong	arg01, fp
1e334     30 4E 85 F1 | 	sub	fp, #48
1e338     A7 14 02 FB | 	rdlong	arg02, fp
1e33c     1C 65 B0 FD | 	call	#_pslpoke
1e340     6C 00 90 FD | 	jmp	#LR__2372
1e344                 | LR__2367
1e344     30 4E 05 F1 | 	add	fp, #48
1e348     A7 12 02 FB | 	rdlong	arg01, fp
1e34c     30 4E 85 F1 | 	sub	fp, #48
1e350     A7 14 02 FB | 	rdlong	arg02, fp
1e354     04 65 B0 FD | 	call	#_pslpoke
1e358     54 00 90 FD | 	jmp	#LR__2372
1e35c                 | LR__2368
1e35c     30 4E 05 F1 | 	add	fp, #48
1e360     A7 12 02 FB | 	rdlong	arg01, fp
1e364     30 4E 85 F1 | 	sub	fp, #48
1e368     A7 14 02 FB | 	rdlong	arg02, fp
1e36c     EC 64 B0 FD | 	call	#_pslpoke
1e370     3C 00 90 FD | 	jmp	#LR__2372
1e374                 | LR__2369
1e374     30 4E 05 F1 | 	add	fp, #48
1e378     A7 12 02 FB | 	rdlong	arg01, fp
1e37c     30 4E 85 F1 | 	sub	fp, #48
1e380     A7 14 02 FB | 	rdlong	arg02, fp
1e384     D4 64 B0 FD | 	call	#_pslpoke
1e388     24 00 90 FD | 	jmp	#LR__2372
1e38c                 | LR__2370
1e38c     30 4E 05 F1 | 	add	fp, #48
1e390     A7 12 02 FB | 	rdlong	arg01, fp
1e394     30 4E 85 F1 | 	sub	fp, #48
1e398     A7 14 02 FB | 	rdlong	arg02, fp
1e39c     BC 64 B0 FD | 	call	#_pslpoke
1e3a0     0C 00 90 FD | 	jmp	#LR__2372
1e3a4                 | LR__2371
1e3a4     32 12 06 F6 | 	mov	arg01, #50
1e3a8     00 14 06 F6 | 	mov	arg02, #0
1e3ac     0C 63 B0 FD | 	call	#_printerror
1e3b0                 | LR__2372
1e3b0                 | LR__2373
1e3b0     A7 F0 03 F6 | 	mov	ptra, fp
1e3b4     B2 00 A0 FD | 	call	#popregs_
1e3b8                 | _do_assign_ret
1e3b8     2D 00 64 FD | 	ret
1e3bc                 | 
1e3bc                 | ' 
1e3bc                 | ' 
1e3bc                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1e3bc                 | ' 
1e3bc                 | ' sub do_getvar
1e3bc                 | _do_getvar
1e3bc     04 4A 05 F6 | 	mov	COUNT_, #4
1e3c0     A8 00 A0 FD | 	call	#pushregs_
1e3c4     3C F0 07 F1 | 	add	ptra, #60
1e3c8                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1e3c8     4A 00 00 FF 
1e3cc     A0 E4 05 F1 | 	add	objptr, ##38048
1e3d0     F2 26 02 FB | 	rdlong	local01, objptr
1e3d4     13 17 02 F6 | 	mov	arg03, local01
1e3d8     01 16 66 F0 | 	shl	arg03, #1
1e3dc     13 17 02 F1 | 	add	arg03, local01
1e3e0     02 16 66 F0 | 	shl	arg03, #2
1e3e4     03 00 00 FF 
1e3e8     04 E4 85 F1 | 	sub	objptr, ##1540
1e3ec     F2 16 02 F1 | 	add	arg03, objptr
1e3f0     04 16 06 F1 | 	add	arg03, #4
1e3f4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1e3f8     47 00 00 FF 
1e3fc     9C E4 85 F1 | 	sub	objptr, ##36508
1e400     C4 00 90 5D |  if_ne	jmp	#LR__2381
1e404     4A 00 00 FF 
1e408     A0 E4 05 F1 | 	add	objptr, ##38048
1e40c     F2 26 02 FB | 	rdlong	local01, objptr
1e410     13 13 02 F6 | 	mov	arg01, local01
1e414     01 12 66 F0 | 	shl	arg01, #1
1e418     13 13 02 F1 | 	add	arg01, local01
1e41c     02 12 66 F0 | 	shl	arg01, #2
1e420     03 00 00 FF 
1e424     04 E4 85 F1 | 	sub	objptr, ##1540
1e428     F2 12 02 F1 | 	add	arg01, objptr
1e42c     09 27 02 FB | 	rdlong	local01, arg01
1e430     04 26 66 F0 | 	shl	local01, #4
1e434     32 00 00 FF 
1e438     84 E4 85 F1 | 	sub	objptr, ##25732
1e43c     F2 26 02 F1 | 	add	local01, objptr
1e440     04 26 06 F1 | 	add	local01, #4
1e444     13 13 02 FB | 	rdlong	arg01, local01
1e448     04 26 06 F1 | 	add	local01, #4
1e44c     13 27 02 FB | 	rdlong	local01, local01
1e450     A7 12 62 FC | 	wrlong	arg01, fp
1e454     04 4E 05 F1 | 	add	fp, #4
1e458     A7 26 62 FC | 	wrlong	local01, fp
1e45c     35 00 00 FF 
1e460     88 E4 05 F1 | 	add	objptr, ##27272
1e464     F2 26 02 FB | 	rdlong	local01, objptr
1e468     13 13 02 F6 | 	mov	arg01, local01
1e46c     01 12 66 F0 | 	shl	arg01, #1
1e470     13 13 02 F1 | 	add	arg01, local01
1e474     02 12 66 F0 | 	shl	arg01, #2
1e478     03 00 00 FF 
1e47c     04 E4 85 F1 | 	sub	objptr, ##1540
1e480     F2 12 02 F1 | 	add	arg01, objptr
1e484     09 27 02 FB | 	rdlong	local01, arg01
1e488     04 26 66 F0 | 	shl	local01, #4
1e48c     32 00 00 FF 
1e490     84 E4 85 F1 | 	sub	objptr, ##25732
1e494     F2 26 02 F1 | 	add	local01, objptr
1e498     0C 26 06 F1 | 	add	local01, #12
1e49c     13 27 02 FB | 	rdlong	local01, local01
1e4a0     04 4E 05 F1 | 	add	fp, #4
1e4a4     A7 26 62 FC | 	wrlong	local01, fp
1e4a8                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1e4a8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1e4a8                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1e4a8     08 4E 85 F1 | 	sub	fp, #8
1e4ac     00 27 16 F2 | 	cmp	local01, #256 wc
1e4b0     15 00 00 FF 
1e4b4     18 E4 85 F1 | 	sub	objptr, ##10776
1e4b8     0C 00 90 3D |  if_ae	jmp	#LR__2380
1e4bc     A7 12 02 F6 | 	mov	arg01, fp
1e4c0     F4 F3 BE FD | 	call	#_push
1e4c4     A0 04 90 FD | 	jmp	#LR__2402
1e4c8                 | LR__2380
1e4c8                 | LR__2381
1e4c8     4A 00 00 FF 
1e4cc     A0 E4 05 F1 | 	add	objptr, ##38048
1e4d0     F2 16 02 FB | 	rdlong	arg03, objptr
1e4d4     0B 15 02 F6 | 	mov	arg02, arg03
1e4d8     01 14 66 F0 | 	shl	arg02, #1
1e4dc     0B 15 02 F1 | 	add	arg02, arg03
1e4e0     02 14 66 F0 | 	shl	arg02, #2
1e4e4     03 00 00 FF 
1e4e8     04 E4 85 F1 | 	sub	objptr, ##1540
1e4ec     F2 14 02 F1 | 	add	arg02, objptr
1e4f0     0A 17 02 FB | 	rdlong	arg03, arg02
1e4f4     04 16 66 F0 | 	shl	arg03, #4
1e4f8     32 00 00 FF 
1e4fc     84 E4 85 F1 | 	sub	objptr, ##25732
1e500     F2 16 02 F1 | 	add	arg03, objptr
1e504     04 16 06 F1 | 	add	arg03, #4
1e508     0B 13 02 FB | 	rdlong	arg01, arg03
1e50c     0C 4E 05 F1 | 	add	fp, #12
1e510     A7 12 62 FC | 	wrlong	arg01, fp
1e514     0C 4E 85 F1 | 	sub	fp, #12
1e518     15 00 00 FF 
1e51c     18 E4 85 F1 | 	sub	objptr, ##10776
1e520     68 64 B0 FD | 	call	#_pslpeek
1e524     FD FA 31 F9 | 	getword	result1, result1, #0
1e528     10 4E 05 F1 | 	add	fp, #16
1e52c     A7 FA 61 FC | 	wrlong	result1, fp
1e530     4A 00 00 FF 
1e534     A0 E4 05 F1 | 	add	objptr, ##38048
1e538     F2 16 02 FB | 	rdlong	arg03, objptr
1e53c     0B 15 02 F6 | 	mov	arg02, arg03
1e540     01 14 66 F0 | 	shl	arg02, #1
1e544     0B 15 02 F1 | 	add	arg02, arg03
1e548     02 14 66 F0 | 	shl	arg02, #2
1e54c     03 00 00 FF 
1e550     04 E4 85 F1 | 	sub	objptr, ##1540
1e554     F2 14 02 F1 | 	add	arg02, objptr
1e558     04 14 06 F1 | 	add	arg02, #4
1e55c     0A 17 02 FB | 	rdlong	arg03, arg02
1e560     04 4E 05 F1 | 	add	fp, #4
1e564     A7 16 62 FC | 	wrlong	arg03, fp
1e568     08 4E 85 F1 | 	sub	fp, #8
1e56c     A7 12 02 FB | 	rdlong	arg01, fp
1e570     0C 4E 85 F1 | 	sub	fp, #12
1e574     02 12 06 F1 | 	add	arg01, #2
1e578     47 00 00 FF 
1e57c     9C E4 85 F1 | 	sub	objptr, ##36508
1e580     B0 63 B0 FD | 	call	#_pspeek
1e584     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e588     18 4E 05 F1 | 	add	fp, #24
1e58c     A7 FA 61 FC | 	wrlong	result1, fp
1e590     0C 4E 85 F1 | 	sub	fp, #12
1e594     A7 12 02 FB | 	rdlong	arg01, fp
1e598     0C 4E 85 F1 | 	sub	fp, #12
1e59c     04 12 06 F1 | 	add	arg01, #4
1e5a0     E8 63 B0 FD | 	call	#_pslpeek
1e5a4     1C 4E 05 F1 | 	add	fp, #28
1e5a8     A7 FA 61 FC | 	wrlong	result1, fp
1e5ac     10 4E 85 F1 | 	sub	fp, #16
1e5b0     A7 12 02 FB | 	rdlong	arg01, fp
1e5b4     0C 4E 85 F1 | 	sub	fp, #12
1e5b8     08 12 06 F1 | 	add	arg01, #8
1e5bc     CC 63 B0 FD | 	call	#_pslpeek
1e5c0     20 4E 05 F1 | 	add	fp, #32
1e5c4     A7 FA 61 FC | 	wrlong	result1, fp
1e5c8     14 4E 85 F1 | 	sub	fp, #20
1e5cc     A7 12 02 FB | 	rdlong	arg01, fp
1e5d0     0C 4E 85 F1 | 	sub	fp, #12
1e5d4     0C 12 06 F1 | 	add	arg01, #12
1e5d8     B0 63 B0 FD | 	call	#_pslpeek
1e5dc     24 4E 05 F1 | 	add	fp, #36
1e5e0     A7 FA 61 FC | 	wrlong	result1, fp
1e5e4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1e5e4                 | ' esize=pspeek(arrptr+2)
1e5e4                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1e5e4                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1e5e4                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1e5e4                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1e5e4     10 4E 85 F1 | 	sub	fp, #16
1e5e8     A7 16 02 FB | 	rdlong	arg03, fp
1e5ec     14 4E 85 F1 | 	sub	fp, #20
1e5f0     03 16 16 F2 | 	cmp	arg03, #3 wc
1e5f4     38 00 90 CD |  if_b	jmp	#LR__2382
1e5f8     24 F2 BE FD | 	call	#_pop
1e5fc     FF 16 02 F6 | 	mov	arg03, result3
1e600     A7 FA 61 FC | 	wrlong	result1, fp
1e604     04 4E 05 F1 | 	add	fp, #4
1e608     A7 FC 61 FC | 	wrlong	result2, fp
1e60c     04 4E 05 F1 | 	add	fp, #4
1e610     A7 16 62 FC | 	wrlong	arg03, fp
1e614     08 4E 85 F1 | 	sub	fp, #8
1e618     A7 12 02 F6 | 	mov	arg01, fp
1e61c     E4 F3 BE FD | 	call	#_converttoint
1e620     30 4E 05 F1 | 	add	fp, #48
1e624     A7 FA 61 FC | 	wrlong	result1, fp
1e628     30 4E 85 F1 | 	sub	fp, #48
1e62c     0C 00 90 FD | 	jmp	#LR__2383
1e630                 | LR__2382
1e630     30 4E 05 F1 | 	add	fp, #48
1e634     A7 00 68 FC | 	wrlong	#0, fp
1e638     30 4E 85 F1 | 	sub	fp, #48
1e63c                 | LR__2383
1e63c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1e63c     14 4E 05 F1 | 	add	fp, #20
1e640     A7 16 02 FB | 	rdlong	arg03, fp
1e644     14 4E 85 F1 | 	sub	fp, #20
1e648     02 16 16 F2 | 	cmp	arg03, #2 wc
1e64c     38 00 90 CD |  if_b	jmp	#LR__2384
1e650     CC F1 BE FD | 	call	#_pop
1e654     FF 16 02 F6 | 	mov	arg03, result3
1e658     A7 FA 61 FC | 	wrlong	result1, fp
1e65c     04 4E 05 F1 | 	add	fp, #4
1e660     A7 FC 61 FC | 	wrlong	result2, fp
1e664     04 4E 05 F1 | 	add	fp, #4
1e668     A7 16 62 FC | 	wrlong	arg03, fp
1e66c     08 4E 85 F1 | 	sub	fp, #8
1e670     A7 12 02 F6 | 	mov	arg01, fp
1e674     8C F3 BE FD | 	call	#_converttoint
1e678     2C 4E 05 F1 | 	add	fp, #44
1e67c     A7 FA 61 FC | 	wrlong	result1, fp
1e680     2C 4E 85 F1 | 	sub	fp, #44
1e684     0C 00 90 FD | 	jmp	#LR__2385
1e688                 | LR__2384
1e688     2C 4E 05 F1 | 	add	fp, #44
1e68c     A7 00 68 FC | 	wrlong	#0, fp
1e690     2C 4E 85 F1 | 	sub	fp, #44
1e694                 | LR__2385
1e694                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1e694     14 4E 05 F1 | 	add	fp, #20
1e698     A7 16 02 FB | 	rdlong	arg03, fp
1e69c     14 4E 85 F1 | 	sub	fp, #20
1e6a0     01 16 16 F2 | 	cmp	arg03, #1 wc
1e6a4     38 00 90 CD |  if_b	jmp	#LR__2386
1e6a8     74 F1 BE FD | 	call	#_pop
1e6ac     FF 16 02 F6 | 	mov	arg03, result3
1e6b0     A7 FA 61 FC | 	wrlong	result1, fp
1e6b4     04 4E 05 F1 | 	add	fp, #4
1e6b8     A7 FC 61 FC | 	wrlong	result2, fp
1e6bc     04 4E 05 F1 | 	add	fp, #4
1e6c0     A7 16 62 FC | 	wrlong	arg03, fp
1e6c4     08 4E 85 F1 | 	sub	fp, #8
1e6c8     A7 12 02 F6 | 	mov	arg01, fp
1e6cc     34 F3 BE FD | 	call	#_converttoint
1e6d0     28 4E 05 F1 | 	add	fp, #40
1e6d4     A7 FA 61 FC | 	wrlong	result1, fp
1e6d8     28 4E 85 F1 | 	sub	fp, #40
1e6dc     0C 00 90 FD | 	jmp	#LR__2387
1e6e0                 | LR__2386
1e6e0     28 4E 05 F1 | 	add	fp, #40
1e6e4     A7 00 68 FC | 	wrlong	#0, fp
1e6e8     28 4E 85 F1 | 	sub	fp, #40
1e6ec                 | LR__2387
1e6ec     0C 4E 05 F1 | 	add	fp, #12
1e6f0     A7 28 02 FB | 	rdlong	local02, fp
1e6f4     1C 4E 05 F1 | 	add	fp, #28
1e6f8     A7 2A 02 FB | 	rdlong	local03, fp
1e6fc     04 4E 05 F1 | 	add	fp, #4
1e700     A7 FC 01 FB | 	rdlong	result2, fp
1e704     10 4E 85 F1 | 	sub	fp, #16
1e708     A7 FE 01 FB | 	rdlong	result3, fp
1e70c     FF FC 01 FD | 	qmul	result2, result3
1e710     10 28 06 F1 | 	add	local02, #16
1e714     14 4E 05 F1 | 	add	fp, #20
1e718     A7 FC 01 FB | 	rdlong	result2, fp
1e71c     18 FA 61 FD | 	getqx	result1
1e720     FF FC 01 FD | 	qmul	result2, result3
1e724     FD 2A 02 F1 | 	add	local03, result1
1e728     10 4E 85 F1 | 	sub	fp, #16
1e72c     A7 FE 01 FB | 	rdlong	result3, fp
1e730     18 FC 61 FD | 	getqx	result2
1e734     FF FC 01 FD | 	qmul	result2, result3
1e738     08 4E 85 F1 | 	sub	fp, #8
1e73c     A7 FE 01 FB | 	rdlong	result3, fp
1e740     18 FC 61 FD | 	getqx	result2
1e744     FE 2A 02 F1 | 	add	local03, result2
1e748     FF 2A 02 FD | 	qmul	local03, result3
1e74c     1C 4E 05 F1 | 	add	fp, #28
1e750                 | ' 
1e750                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1e750                 | ' 
1e750                 | ' select case vartype
1e750     18 FC 61 FD | 	getqx	result2
1e754     FE 28 02 F1 | 	add	local02, result2
1e758     A7 28 62 FC | 	wrlong	local02, fp
1e75c     24 4E 85 F1 | 	sub	fp, #36
1e760     A7 2C 02 FB | 	rdlong	local04, fp
1e764     10 4E 85 F1 | 	sub	fp, #16
1e768     00 2D 86 F1 | 	sub	local04, #256
1e76c     0C 2C 26 F3 | 	fle	local04, #12
1e770     30 2C 62 FD | 	jmprel	local04
1e774                 | LR__2388
1e774     30 00 90 FD | 	jmp	#LR__2389
1e778     58 00 90 FD | 	jmp	#LR__2390
1e77c     8C 00 90 FD | 	jmp	#LR__2391
1e780     AC 00 90 FD | 	jmp	#LR__2392
1e784     E8 00 90 FD | 	jmp	#LR__2393
1e788     08 01 90 FD | 	jmp	#LR__2394
1e78c     24 01 90 FD | 	jmp	#LR__2395
1e790     40 01 90 FD | 	jmp	#LR__2396
1e794     50 01 90 FD | 	jmp	#LR__2397
1e798     60 01 90 FD | 	jmp	#LR__2398
1e79c     7C 01 90 FD | 	jmp	#LR__2399
1e7a0     8C 01 90 FD | 	jmp	#LR__2400
1e7a4     B8 01 90 FD | 	jmp	#LR__2401
1e7a8                 | LR__2389
1e7a8     A7 12 02 F6 | 	mov	arg01, fp
1e7ac     34 4E 05 F1 | 	add	fp, #52
1e7b0     A7 14 02 FB | 	rdlong	arg02, fp
1e7b4     34 4E 85 F1 | 	sub	fp, #52
1e7b8     0C 16 06 F6 | 	mov	arg03, #12
1e7bc     0B 00 00 FF 
1e7c0     CC E4 05 F1 | 	add	objptr, ##5836
1e7c4     A4 8C B0 FD | 	call	#_psram_spin2_read1
1e7c8     0B 00 00 FF 
1e7cc     CC E4 85 F1 | 	sub	objptr, ##5836
1e7d0     8C 01 90 FD | 	jmp	#LR__2401
1e7d4                 | LR__2390
1e7d4     08 4E 05 F1 | 	add	fp, #8
1e7d8     A7 38 68 FC | 	wrlong	#28, fp
1e7dc     2C 4E 05 F1 | 	add	fp, #44
1e7e0     A7 12 02 FB | 	rdlong	arg01, fp
1e7e4     34 4E 85 F1 | 	sub	fp, #52
1e7e8     48 61 B0 FD | 	call	#_pspeek
1e7ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e7f0     A7 FA 61 FC | 	wrlong	result1, fp
1e7f4     80 FA 15 F2 | 	cmp	result1, #128 wc
1e7f8     00 27 66 36 |  if_ae	neg	local01, #256
1e7fc     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1e800     15 27 42 35 |  if_ae	or	local01, local03
1e804     A7 26 62 3C |  if_ae	wrlong	local01, fp
1e808     54 01 90 FD | 	jmp	#LR__2401
1e80c                 | LR__2391
1e80c     08 4E 05 F1 | 	add	fp, #8
1e810     A7 3A 68 FC | 	wrlong	#29, fp
1e814     2C 4E 05 F1 | 	add	fp, #44
1e818     A7 12 02 FB | 	rdlong	arg01, fp
1e81c     34 4E 85 F1 | 	sub	fp, #52
1e820     10 61 B0 FD | 	call	#_pspeek
1e824     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e828     A7 FA 61 FC | 	wrlong	result1, fp
1e82c     30 01 90 FD | 	jmp	#LR__2401
1e830                 | LR__2392
1e830     08 4E 05 F1 | 	add	fp, #8
1e834     A7 38 68 FC | 	wrlong	#28, fp
1e838     2C 4E 05 F1 | 	add	fp, #44
1e83c     A7 12 02 FB | 	rdlong	arg01, fp
1e840     34 4E 85 F1 | 	sub	fp, #52
1e844     44 61 B0 FD | 	call	#_pslpeek
1e848     FD FA 31 F9 | 	getword	result1, result1, #0
1e84c     A7 FA 61 FC | 	wrlong	result1, fp
1e850     40 00 00 FF 
1e854     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1e858     FF 7F 00 3F 
1e85c     00 27 06 36 |  if_ae	mov	local01, ##16776960
1e860     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1e864     15 27 42 35 |  if_ae	or	local01, local03
1e868     A7 26 62 3C |  if_ae	wrlong	local01, fp
1e86c     F0 00 90 FD | 	jmp	#LR__2401
1e870                 | LR__2393
1e870     08 4E 05 F1 | 	add	fp, #8
1e874     A7 3A 68 FC | 	wrlong	#29, fp
1e878     2C 4E 05 F1 | 	add	fp, #44
1e87c     A7 12 02 FB | 	rdlong	arg01, fp
1e880     34 4E 85 F1 | 	sub	fp, #52
1e884     04 61 B0 FD | 	call	#_pslpeek
1e888     FD FA 31 F9 | 	getword	result1, result1, #0
1e88c     A7 FA 61 FC | 	wrlong	result1, fp
1e890     CC 00 90 FD | 	jmp	#LR__2401
1e894                 | LR__2394
1e894     08 4E 05 F1 | 	add	fp, #8
1e898     A7 38 68 FC | 	wrlong	#28, fp
1e89c     2C 4E 05 F1 | 	add	fp, #44
1e8a0     A7 12 02 FB | 	rdlong	arg01, fp
1e8a4     34 4E 85 F1 | 	sub	fp, #52
1e8a8     E0 60 B0 FD | 	call	#_pslpeek
1e8ac     A7 FA 61 FC | 	wrlong	result1, fp
1e8b0     AC 00 90 FD | 	jmp	#LR__2401
1e8b4                 | LR__2395
1e8b4     08 4E 05 F1 | 	add	fp, #8
1e8b8     A7 3A 68 FC | 	wrlong	#29, fp
1e8bc     2C 4E 05 F1 | 	add	fp, #44
1e8c0     A7 12 02 FB | 	rdlong	arg01, fp
1e8c4     34 4E 85 F1 | 	sub	fp, #52
1e8c8     C0 60 B0 FD | 	call	#_pslpeek
1e8cc     A7 FA 61 FC | 	wrlong	result1, fp
1e8d0     8C 00 90 FD | 	jmp	#LR__2401
1e8d4                 | LR__2396
1e8d4     08 4E 05 F1 | 	add	fp, #8
1e8d8     A7 FE 69 FC | 	wrlong	#255, fp
1e8dc     08 4E 85 F1 | 	sub	fp, #8
1e8e0     A7 60 68 FC | 	wrlong	#48, fp
1e8e4     78 00 90 FD | 	jmp	#LR__2401
1e8e8                 | LR__2397
1e8e8     08 4E 05 F1 | 	add	fp, #8
1e8ec     A7 FE 69 FC | 	wrlong	#255, fp
1e8f0     08 4E 85 F1 | 	sub	fp, #8
1e8f4     A7 60 68 FC | 	wrlong	#48, fp
1e8f8     64 00 90 FD | 	jmp	#LR__2401
1e8fc                 | LR__2398
1e8fc     08 4E 05 F1 | 	add	fp, #8
1e900     A7 3C 68 FC | 	wrlong	#30, fp
1e904     2C 4E 05 F1 | 	add	fp, #44
1e908     A7 12 02 FB | 	rdlong	arg01, fp
1e90c     34 4E 85 F1 | 	sub	fp, #52
1e910     78 60 B0 FD | 	call	#_pslpeek
1e914     A7 FA 61 FC | 	wrlong	result1, fp
1e918     44 00 90 FD | 	jmp	#LR__2401
1e91c                 | LR__2399
1e91c     08 4E 05 F1 | 	add	fp, #8
1e920     A7 FE 69 FC | 	wrlong	#255, fp
1e924     08 4E 85 F1 | 	sub	fp, #8
1e928     A7 60 68 FC | 	wrlong	#48, fp
1e92c     30 00 90 FD | 	jmp	#LR__2401
1e930                 | LR__2400
1e930     08 4E 05 F1 | 	add	fp, #8
1e934     A7 3E 68 FC | 	wrlong	#31, fp
1e938     2C 4E 05 F1 | 	add	fp, #44
1e93c     A7 12 02 FB | 	rdlong	arg01, fp
1e940     34 4E 85 F1 | 	sub	fp, #52
1e944     44 60 B0 FD | 	call	#_pslpeek
1e948     A7 FA 61 FC | 	wrlong	result1, fp
1e94c     00 04 00 FF 
1e950     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1e954     08 4E 05 31 |  if_ae	add	fp, #8
1e958     A7 56 68 3C |  if_ae	wrlong	#43, fp
1e95c     08 4E 85 31 |  if_ae	sub	fp, #8
1e960                 | LR__2401
1e960     A7 12 02 F6 | 	mov	arg01, fp
1e964     50 EF BE FD | 	call	#_push
1e968                 | LR__2402
1e968     A7 F0 03 F6 | 	mov	ptra, fp
1e96c     B2 00 A0 FD | 	call	#popregs_
1e970                 | _do_getvar_ret
1e970     2D 00 64 FD | 	ret
1e974                 | 
1e974                 | ' 
1e974                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1e974                 | ' 
1e974                 | ' sub do_getaddr
1e974                 | _do_getaddr
1e974     01 4A 05 F6 | 	mov	COUNT_, #1
1e978     A8 00 A0 FD | 	call	#pushregs_
1e97c     38 F0 07 F1 | 	add	ptra, #56
1e980                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1e980                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1e980     4A 00 00 FF 
1e984     A0 E4 05 F1 | 	add	objptr, ##38048
1e988     F2 12 02 FB | 	rdlong	arg01, objptr
1e98c     09 FD 01 F6 | 	mov	result2, arg01
1e990     01 FC 65 F0 | 	shl	result2, #1
1e994     09 FD 01 F1 | 	add	result2, arg01
1e998     02 FC 65 F0 | 	shl	result2, #2
1e99c     03 00 00 FF 
1e9a0     04 E4 85 F1 | 	sub	objptr, ##1540
1e9a4     F2 FC 01 F1 | 	add	result2, objptr
1e9a8     04 FC 05 F1 | 	add	result2, #4
1e9ac     FE FC 09 FB | 	rdlong	result2, result2 wz
1e9b0     47 00 00 FF 
1e9b4     9C E4 85 F1 | 	sub	objptr, ##36508
1e9b8     10 01 90 5D |  if_ne	jmp	#LR__2410
1e9bc     4A 00 00 FF 
1e9c0     A0 E4 05 F1 | 	add	objptr, ##38048
1e9c4     F2 12 02 FB | 	rdlong	arg01, objptr
1e9c8     09 FD 01 F6 | 	mov	result2, arg01
1e9cc     01 FC 65 F0 | 	shl	result2, #1
1e9d0     09 FD 01 F1 | 	add	result2, arg01
1e9d4     02 FC 65 F0 | 	shl	result2, #2
1e9d8     03 00 00 FF 
1e9dc     04 E4 85 F1 | 	sub	objptr, ##1540
1e9e0     F2 FC 01 F1 | 	add	result2, objptr
1e9e4     FE 12 02 FB | 	rdlong	arg01, result2
1e9e8     04 12 66 F0 | 	shl	arg01, #4
1e9ec     32 00 00 FF 
1e9f0     84 E4 85 F1 | 	sub	objptr, ##25732
1e9f4     F2 12 02 F1 | 	add	arg01, objptr
1e9f8     0C 12 06 F1 | 	add	arg01, #12
1e9fc     09 13 02 FB | 	rdlong	arg01, arg01
1ea00     08 4E 05 F1 | 	add	fp, #8
1ea04     A7 12 62 FC | 	wrlong	arg01, fp
1ea08                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1ea08                 | '    if t1.result_type>=array_no_type then goto 2200
1ea08     08 4E 85 F1 | 	sub	fp, #8
1ea0c     00 13 16 F2 | 	cmp	arg01, #256 wc
1ea10     15 00 00 FF 
1ea14     18 E4 85 F1 | 	sub	objptr, ##10776
1ea18     B0 00 90 3D |  if_ae	jmp	#LR__2411
1ea1c     4A 00 00 FF 
1ea20     A0 E4 05 F1 | 	add	objptr, ##38048
1ea24     F2 12 02 FB | 	rdlong	arg01, objptr
1ea28     09 FF 01 F6 | 	mov	result3, arg01
1ea2c     01 FE 65 F0 | 	shl	result3, #1
1ea30     09 FF 01 F1 | 	add	result3, arg01
1ea34     02 FE 65 F0 | 	shl	result3, #2
1ea38     03 00 00 FF 
1ea3c     04 E4 85 F1 | 	sub	objptr, ##1540
1ea40     F2 FE 01 F1 | 	add	result3, objptr
1ea44     FF FA 01 FB | 	rdlong	result1, result3
1ea48     04 FA 65 F0 | 	shl	result1, #4
1ea4c     32 00 00 FF 
1ea50     84 E4 85 F1 | 	sub	objptr, ##25732
1ea54     F2 FA 01 F1 | 	add	result1, objptr
1ea58     04 FA 05 F1 | 	add	result1, #4
1ea5c     A7 FA 61 FC | 	wrlong	result1, fp
1ea60     35 00 00 FF 
1ea64     88 E4 05 F1 | 	add	objptr, ##27272
1ea68     F2 FE 01 FB | 	rdlong	result3, objptr
1ea6c     FF 12 02 F6 | 	mov	arg01, result3
1ea70     01 12 66 F0 | 	shl	arg01, #1
1ea74     FF 12 02 F1 | 	add	arg01, result3
1ea78     02 12 66 F0 | 	shl	arg01, #2
1ea7c     03 00 00 FF 
1ea80     04 E4 85 F1 | 	sub	objptr, ##1540
1ea84     F2 12 02 F1 | 	add	arg01, objptr
1ea88     09 13 02 FB | 	rdlong	arg01, arg01
1ea8c     04 12 66 F0 | 	shl	arg01, #4
1ea90     32 00 00 FF 
1ea94     84 E4 85 F1 | 	sub	objptr, ##25732
1ea98     F2 12 02 F1 | 	add	arg01, objptr
1ea9c     0C 12 06 F1 | 	add	arg01, #12
1eaa0     09 13 02 FB | 	rdlong	arg01, arg01
1eaa4     04 4E 05 F1 | 	add	fp, #4
1eaa8     A7 12 62 FC | 	wrlong	arg01, fp
1eaac     04 4E 05 F1 | 	add	fp, #4
1eab0     A7 3A 68 FC | 	wrlong	#29, fp
1eab4     08 4E 85 F1 | 	sub	fp, #8
1eab8     A7 12 02 F6 | 	mov	arg01, fp
1eabc     15 00 00 FF 
1eac0     18 E4 85 F1 | 	sub	objptr, ##10776
1eac4     F0 ED BE FD | 	call	#_push
1eac8                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1eac8                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1eac8                 | '   t1.result_type=result_uint
1eac8                 | '   push t1 : return
1eac8     2C 03 90 FD | 	jmp	#LR__2420
1eacc                 | LR__2410
1eacc                 | LR__2411
1eacc     4A 00 00 FF 
1ead0     A0 E4 05 F1 | 	add	objptr, ##38048
1ead4     F2 FE 01 FB | 	rdlong	result3, objptr
1ead8     FF FC 01 F6 | 	mov	result2, result3
1eadc     01 FC 65 F0 | 	shl	result2, #1
1eae0     FF FC 01 F1 | 	add	result2, result3
1eae4     02 FC 65 F0 | 	shl	result2, #2
1eae8     03 00 00 FF 
1eaec     04 E4 85 F1 | 	sub	objptr, ##1540
1eaf0     F2 FC 01 F1 | 	add	result2, objptr
1eaf4     FE FE 01 FB | 	rdlong	result3, result2
1eaf8     04 FE 65 F0 | 	shl	result3, #4
1eafc     32 00 00 FF 
1eb00     84 E4 85 F1 | 	sub	objptr, ##25732
1eb04     F2 FE 01 F1 | 	add	result3, objptr
1eb08     04 FE 05 F1 | 	add	result3, #4
1eb0c     FF FE 01 FB | 	rdlong	result3, result3
1eb10     0C 4E 05 F1 | 	add	fp, #12
1eb14     A7 FE 61 FC | 	wrlong	result3, fp
1eb18     35 00 00 FF 
1eb1c     88 E4 05 F1 | 	add	objptr, ##27272
1eb20     F2 FE 01 FB | 	rdlong	result3, objptr
1eb24     FF 12 02 F6 | 	mov	arg01, result3
1eb28     01 12 66 F0 | 	shl	arg01, #1
1eb2c     FF 12 02 F1 | 	add	arg01, result3
1eb30     02 12 66 F0 | 	shl	arg01, #2
1eb34     03 00 00 FF 
1eb38     04 E4 85 F1 | 	sub	objptr, ##1540
1eb3c     F2 12 02 F1 | 	add	arg01, objptr
1eb40     09 13 02 FB | 	rdlong	arg01, arg01
1eb44     04 12 66 F0 | 	shl	arg01, #4
1eb48     32 00 00 FF 
1eb4c     84 E4 85 F1 | 	sub	objptr, ##25732
1eb50     F2 12 02 F1 | 	add	arg01, objptr
1eb54     0C 12 06 F1 | 	add	arg01, #12
1eb58     09 13 02 FB | 	rdlong	arg01, arg01
1eb5c     08 4E 85 F1 | 	sub	fp, #8
1eb60     A7 12 62 FC | 	wrlong	arg01, fp
1eb64     08 4E 05 F1 | 	add	fp, #8
1eb68     A7 12 02 FB | 	rdlong	arg01, fp
1eb6c     0C 4E 85 F1 | 	sub	fp, #12
1eb70     15 00 00 FF 
1eb74     18 E4 85 F1 | 	sub	objptr, ##10776
1eb78     10 5E B0 FD | 	call	#_pslpeek
1eb7c     FD FA 31 F9 | 	getword	result1, result1, #0
1eb80     10 4E 05 F1 | 	add	fp, #16
1eb84     A7 FA 61 FC | 	wrlong	result1, fp
1eb88     4A 00 00 FF 
1eb8c     A0 E4 05 F1 | 	add	objptr, ##38048
1eb90     F2 FE 01 FB | 	rdlong	result3, objptr
1eb94     FF 12 02 F6 | 	mov	arg01, result3
1eb98     01 12 66 F0 | 	shl	arg01, #1
1eb9c     FF 12 02 F1 | 	add	arg01, result3
1eba0     02 12 66 F0 | 	shl	arg01, #2
1eba4     03 00 00 FF 
1eba8     04 E4 85 F1 | 	sub	objptr, ##1540
1ebac     F2 12 02 F1 | 	add	arg01, objptr
1ebb0     04 12 06 F1 | 	add	arg01, #4
1ebb4     09 13 02 FB | 	rdlong	arg01, arg01
1ebb8     04 4E 05 F1 | 	add	fp, #4
1ebbc     A7 12 62 FC | 	wrlong	arg01, fp
1ebc0     08 4E 85 F1 | 	sub	fp, #8
1ebc4     A7 12 02 FB | 	rdlong	arg01, fp
1ebc8     0C 4E 85 F1 | 	sub	fp, #12
1ebcc     02 12 06 F1 | 	add	arg01, #2
1ebd0     47 00 00 FF 
1ebd4     9C E4 85 F1 | 	sub	objptr, ##36508
1ebd8     58 5D B0 FD | 	call	#_pspeek
1ebdc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ebe0     18 4E 05 F1 | 	add	fp, #24
1ebe4     A7 FA 61 FC | 	wrlong	result1, fp
1ebe8     0C 4E 85 F1 | 	sub	fp, #12
1ebec     A7 12 02 FB | 	rdlong	arg01, fp
1ebf0     0C 4E 85 F1 | 	sub	fp, #12
1ebf4     04 12 06 F1 | 	add	arg01, #4
1ebf8     90 5D B0 FD | 	call	#_pslpeek
1ebfc     1C 4E 05 F1 | 	add	fp, #28
1ec00     A7 FA 61 FC | 	wrlong	result1, fp
1ec04     10 4E 85 F1 | 	sub	fp, #16
1ec08     A7 12 02 FB | 	rdlong	arg01, fp
1ec0c     0C 4E 85 F1 | 	sub	fp, #12
1ec10     08 12 06 F1 | 	add	arg01, #8
1ec14     74 5D B0 FD | 	call	#_pslpeek
1ec18     20 4E 05 F1 | 	add	fp, #32
1ec1c     A7 FA 61 FC | 	wrlong	result1, fp
1ec20     14 4E 85 F1 | 	sub	fp, #20
1ec24     A7 12 02 FB | 	rdlong	arg01, fp
1ec28     0C 4E 85 F1 | 	sub	fp, #12
1ec2c     0C 12 06 F1 | 	add	arg01, #12
1ec30     58 5D B0 FD | 	call	#_pslpeek
1ec34     24 4E 05 F1 | 	add	fp, #36
1ec38     A7 FA 61 FC | 	wrlong	result1, fp
1ec3c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1ec3c                 | ' esize=pspeek(arrptr+2)
1ec3c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1ec3c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1ec3c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1ec3c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1ec3c     10 4E 85 F1 | 	sub	fp, #16
1ec40     A7 12 02 FB | 	rdlong	arg01, fp
1ec44     14 4E 85 F1 | 	sub	fp, #20
1ec48     03 12 16 F2 | 	cmp	arg01, #3 wc
1ec4c     34 00 90 CD |  if_b	jmp	#LR__2412
1ec50     CC EB BE FD | 	call	#_pop
1ec54     A7 FA 61 FC | 	wrlong	result1, fp
1ec58     04 4E 05 F1 | 	add	fp, #4
1ec5c     A7 FC 61 FC | 	wrlong	result2, fp
1ec60     04 4E 05 F1 | 	add	fp, #4
1ec64     A7 FE 61 FC | 	wrlong	result3, fp
1ec68     08 4E 85 F1 | 	sub	fp, #8
1ec6c     A7 12 02 F6 | 	mov	arg01, fp
1ec70     90 ED BE FD | 	call	#_converttoint
1ec74     30 4E 05 F1 | 	add	fp, #48
1ec78     A7 FA 61 FC | 	wrlong	result1, fp
1ec7c     30 4E 85 F1 | 	sub	fp, #48
1ec80     0C 00 90 FD | 	jmp	#LR__2413
1ec84                 | LR__2412
1ec84     30 4E 05 F1 | 	add	fp, #48
1ec88     A7 00 68 FC | 	wrlong	#0, fp
1ec8c     30 4E 85 F1 | 	sub	fp, #48
1ec90                 | LR__2413
1ec90                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1ec90     14 4E 05 F1 | 	add	fp, #20
1ec94     A7 12 02 FB | 	rdlong	arg01, fp
1ec98     14 4E 85 F1 | 	sub	fp, #20
1ec9c     02 12 16 F2 | 	cmp	arg01, #2 wc
1eca0     34 00 90 CD |  if_b	jmp	#LR__2414
1eca4     78 EB BE FD | 	call	#_pop
1eca8     A7 FA 61 FC | 	wrlong	result1, fp
1ecac     04 4E 05 F1 | 	add	fp, #4
1ecb0     A7 FC 61 FC | 	wrlong	result2, fp
1ecb4     04 4E 05 F1 | 	add	fp, #4
1ecb8     A7 FE 61 FC | 	wrlong	result3, fp
1ecbc     08 4E 85 F1 | 	sub	fp, #8
1ecc0     A7 12 02 F6 | 	mov	arg01, fp
1ecc4     3C ED BE FD | 	call	#_converttoint
1ecc8     2C 4E 05 F1 | 	add	fp, #44
1eccc     A7 FA 61 FC | 	wrlong	result1, fp
1ecd0     2C 4E 85 F1 | 	sub	fp, #44
1ecd4     0C 00 90 FD | 	jmp	#LR__2415
1ecd8                 | LR__2414
1ecd8     2C 4E 05 F1 | 	add	fp, #44
1ecdc     A7 00 68 FC | 	wrlong	#0, fp
1ece0     2C 4E 85 F1 | 	sub	fp, #44
1ece4                 | LR__2415
1ece4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1ece4     14 4E 05 F1 | 	add	fp, #20
1ece8     A7 12 02 FB | 	rdlong	arg01, fp
1ecec     14 4E 85 F1 | 	sub	fp, #20
1ecf0     01 12 16 F2 | 	cmp	arg01, #1 wc
1ecf4     34 00 90 CD |  if_b	jmp	#LR__2416
1ecf8     24 EB BE FD | 	call	#_pop
1ecfc     A7 FA 61 FC | 	wrlong	result1, fp
1ed00     04 4E 05 F1 | 	add	fp, #4
1ed04     A7 FC 61 FC | 	wrlong	result2, fp
1ed08     04 4E 05 F1 | 	add	fp, #4
1ed0c     A7 FE 61 FC | 	wrlong	result3, fp
1ed10     08 4E 85 F1 | 	sub	fp, #8
1ed14     A7 12 02 F6 | 	mov	arg01, fp
1ed18     E8 EC BE FD | 	call	#_converttoint
1ed1c     28 4E 05 F1 | 	add	fp, #40
1ed20     A7 FA 61 FC | 	wrlong	result1, fp
1ed24     28 4E 85 F1 | 	sub	fp, #40
1ed28     0C 00 90 FD | 	jmp	#LR__2417
1ed2c                 | LR__2416
1ed2c     28 4E 05 F1 | 	add	fp, #40
1ed30     A7 00 68 FC | 	wrlong	#0, fp
1ed34     28 4E 85 F1 | 	sub	fp, #40
1ed38                 | LR__2417
1ed38                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1ed38                 | ' if numpar>0 then
1ed38     14 4E 05 F1 | 	add	fp, #20
1ed3c     A7 FE 01 FB | 	rdlong	result3, fp
1ed40     14 4E 85 F1 | 	sub	fp, #20
1ed44     01 FE 15 F2 | 	cmp	result3, #1 wc
1ed48     8C 00 90 CD |  if_b	jmp	#LR__2418
1ed4c     0C 4E 05 F1 | 	add	fp, #12
1ed50     A7 FC 01 FB | 	rdlong	result2, fp
1ed54     1C 4E 05 F1 | 	add	fp, #28
1ed58     A7 FE 01 FB | 	rdlong	result3, fp
1ed5c     04 4E 05 F1 | 	add	fp, #4
1ed60     A7 12 02 FB | 	rdlong	arg01, fp
1ed64     10 4E 85 F1 | 	sub	fp, #16
1ed68     A7 FA 01 FB | 	rdlong	result1, fp
1ed6c     FD 12 02 FD | 	qmul	arg01, result1
1ed70     10 FC 05 F1 | 	add	result2, #16
1ed74     14 4E 05 F1 | 	add	fp, #20
1ed78     A7 26 02 FB | 	rdlong	local01, fp
1ed7c     18 12 62 FD | 	getqx	arg01
1ed80     FD 26 02 FD | 	qmul	local01, result1
1ed84     09 FF 01 F1 | 	add	result3, arg01
1ed88     10 4E 85 F1 | 	sub	fp, #16
1ed8c     A7 26 02 FB | 	rdlong	local01, fp
1ed90     18 FA 61 FD | 	getqx	result1
1ed94     13 FB 01 FD | 	qmul	result1, local01
1ed98     08 4E 85 F1 | 	sub	fp, #8
1ed9c     A7 26 02 FB | 	rdlong	local01, fp
1eda0     18 FA 61 FD | 	getqx	result1
1eda4     FD FE 01 F1 | 	add	result3, result1
1eda8     13 FF 01 FD | 	qmul	result3, local01
1edac     1C 4E 05 F1 | 	add	fp, #28
1edb0     18 26 62 FD | 	getqx	local01
1edb4     13 FD 01 F1 | 	add	result2, local01
1edb8     A7 FC 61 FC | 	wrlong	result2, fp
1edbc     2C 4E 85 F1 | 	sub	fp, #44
1edc0     A7 3A 68 FC | 	wrlong	#29, fp
1edc4     2C 4E 05 F1 | 	add	fp, #44
1edc8     A7 26 02 FB | 	rdlong	local01, fp
1edcc     34 4E 85 F1 | 	sub	fp, #52
1edd0     A7 26 62 FC | 	wrlong	local01, fp
1edd4     18 00 90 FD | 	jmp	#LR__2419
1edd8                 | LR__2418
1edd8     08 4E 05 F1 | 	add	fp, #8
1eddc     A7 3A 68 FC | 	wrlong	#29, fp
1ede0     04 4E 05 F1 | 	add	fp, #4
1ede4     A7 26 02 FB | 	rdlong	local01, fp
1ede8     0C 4E 85 F1 | 	sub	fp, #12
1edec     A7 26 62 FC | 	wrlong	local01, fp
1edf0                 | LR__2419
1edf0     A7 12 02 F6 | 	mov	arg01, fp
1edf4     C0 EA BE FD | 	call	#_push
1edf8                 | LR__2420
1edf8     A7 F0 03 F6 | 	mov	ptra, fp
1edfc     B2 00 A0 FD | 	call	#popregs_
1ee00                 | _do_getaddr_ret
1ee00     2D 00 64 FD | 	ret
1ee04                 | 
1ee04                 | ' 
1ee04                 | ' 
1ee04                 | ' 
1ee04                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ee04                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1ee04                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ee04                 | ' 
1ee04                 | ' '--------------------------------- AND 
1ee04                 | ' 
1ee04                 | ' sub do_and 
1ee04                 | _do_and
1ee04     03 4A 05 F6 | 	mov	COUNT_, #3
1ee08     A8 00 A0 FD | 	call	#pushregs_
1ee0c     18 F0 07 F1 | 	add	ptra, #24
1ee10     0C EA BE FD | 	call	#_pop
1ee14     FD 12 02 F6 | 	mov	arg01, result1
1ee18     FE 26 02 F6 | 	mov	local01, result2
1ee1c     FF 28 02 F6 | 	mov	local02, result3
1ee20     0C 4E 05 F1 | 	add	fp, #12
1ee24     A7 12 62 FC | 	wrlong	arg01, fp
1ee28     04 4E 05 F1 | 	add	fp, #4
1ee2c     A7 26 62 FC | 	wrlong	local01, fp
1ee30     04 4E 05 F1 | 	add	fp, #4
1ee34     A7 28 62 FC | 	wrlong	local02, fp
1ee38     14 4E 85 F1 | 	sub	fp, #20
1ee3c     E0 E9 BE FD | 	call	#_pop
1ee40     FF 2A 02 F6 | 	mov	local03, result3
1ee44     A7 FA 61 FC | 	wrlong	result1, fp
1ee48     04 4E 05 F1 | 	add	fp, #4
1ee4c     A7 FC 61 FC | 	wrlong	result2, fp
1ee50     04 4E 05 F1 | 	add	fp, #4
1ee54     A7 2A 62 FC | 	wrlong	local03, fp
1ee58                 | ' 
1ee58                 | ' t2=pop()
1ee58                 | ' t1=pop()
1ee58                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ee58     08 4E 85 F1 | 	sub	fp, #8
1ee5c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ee60     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ee64     A7 2A 62 AC |  if_e	wrlong	local03, fp
1ee68     08 4E 05 A1 |  if_e	add	fp, #8
1ee6c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1ee70     08 4E 85 A1 |  if_e	sub	fp, #8
1ee74                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ee74     14 4E 05 F1 | 	add	fp, #20
1ee78     A7 2A 02 FB | 	rdlong	local03, fp
1ee7c     14 4E 85 F1 | 	sub	fp, #20
1ee80     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ee84     18 00 90 5D |  if_ne	jmp	#LR__2430
1ee88     0C 4E 05 F1 | 	add	fp, #12
1ee8c     A7 2A 02 FB | 	rdlong	local03, fp
1ee90     A7 2A 62 FC | 	wrlong	local03, fp
1ee94     08 4E 05 F1 | 	add	fp, #8
1ee98     A7 3A 68 FC | 	wrlong	#29, fp
1ee9c     14 4E 85 F1 | 	sub	fp, #20
1eea0                 | LR__2430
1eea0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1eea0     08 4E 05 F1 | 	add	fp, #8
1eea4     A7 2A 02 FB | 	rdlong	local03, fp
1eea8     08 4E 85 F1 | 	sub	fp, #8
1eeac     1F 2A 0E F2 | 	cmp	local03, #31 wz
1eeb0     14 4E 05 51 |  if_ne	add	fp, #20
1eeb4     A7 28 02 5B |  if_ne	rdlong	local02, fp
1eeb8     14 4E 85 51 |  if_ne	sub	fp, #20
1eebc     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1eec0     08 4E 05 51 |  if_ne	add	fp, #8
1eec4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1eec8     08 4E 85 51 |  if_ne	sub	fp, #8
1eecc     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1eed0     14 4E 05 51 |  if_ne	add	fp, #20
1eed4     14 4E 85 51 |  if_ne	sub	fp, #20
1eed8     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1eedc     A7 0C 68 AC |  if_e	wrlong	#6, fp
1eee0     08 4E 05 A1 |  if_e	add	fp, #8
1eee4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1eee8     08 4E 85 A1 |  if_e	sub	fp, #8
1eeec     18 00 90 AD |  if_e	jmp	#LR__2431
1eef0     A7 2A 02 FB | 	rdlong	local03, fp
1eef4     0C 4E 05 F1 | 	add	fp, #12
1eef8     A7 26 02 FB | 	rdlong	local01, fp
1eefc     0C 4E 85 F1 | 	sub	fp, #12
1ef00     13 2B 02 F5 | 	and	local03, local01
1ef04     A7 2A 62 FC | 	wrlong	local03, fp
1ef08                 | LR__2431
1ef08     A7 12 02 F6 | 	mov	arg01, fp
1ef0c     A8 E9 BE FD | 	call	#_push
1ef10     A7 F0 03 F6 | 	mov	ptra, fp
1ef14     B2 00 A0 FD | 	call	#popregs_
1ef18                 | _do_and_ret
1ef18     2D 00 64 FD | 	ret
1ef1c                 | 
1ef1c                 | ' 
1ef1c                 | ' '--------------------------------- DIV (integer divide)
1ef1c                 | ' 
1ef1c                 | ' sub do_div 
1ef1c                 | _do_div
1ef1c     01 4A 05 F6 | 	mov	COUNT_, #1
1ef20     A8 00 A0 FD | 	call	#pushregs_
1ef24     18 F0 07 F1 | 	add	ptra, #24
1ef28     F4 E8 BE FD | 	call	#_pop
1ef2c     FD 92 02 F6 | 	mov	muldivb_, result1
1ef30     FE 90 02 F6 | 	mov	muldiva_, result2
1ef34     FF 26 02 F6 | 	mov	local01, result3
1ef38     0C 4E 05 F1 | 	add	fp, #12
1ef3c     A7 92 62 FC | 	wrlong	muldivb_, fp
1ef40     04 4E 05 F1 | 	add	fp, #4
1ef44     A7 90 62 FC | 	wrlong	muldiva_, fp
1ef48     04 4E 05 F1 | 	add	fp, #4
1ef4c     A7 26 62 FC | 	wrlong	local01, fp
1ef50     14 4E 85 F1 | 	sub	fp, #20
1ef54     C8 E8 BE FD | 	call	#_pop
1ef58     A7 FA 61 FC | 	wrlong	result1, fp
1ef5c     04 4E 05 F1 | 	add	fp, #4
1ef60     A7 FC 61 FC | 	wrlong	result2, fp
1ef64     04 4E 05 F1 | 	add	fp, #4
1ef68     A7 FE 61 FC | 	wrlong	result3, fp
1ef6c                 | ' 
1ef6c                 | ' t2=pop()
1ef6c                 | ' t1=pop()
1ef6c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1ef6c     08 4E 85 F1 | 	sub	fp, #8
1ef70     1F FE 0D F2 | 	cmp	result3, #31 wz
1ef74     14 4E 05 51 |  if_ne	add	fp, #20
1ef78     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1ef7c     14 4E 85 51 |  if_ne	sub	fp, #20
1ef80     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1ef84     A7 14 68 AC |  if_e	wrlong	#10, fp
1ef88     08 4E 05 A1 |  if_e	add	fp, #8
1ef8c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ef90     08 4E 85 A1 |  if_e	sub	fp, #8
1ef94     90 01 90 AD |  if_e	jmp	#LR__2446
1ef98                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1ef98     08 4E 05 F1 | 	add	fp, #8
1ef9c     A7 92 02 FB | 	rdlong	muldivb_, fp
1efa0     08 4E 85 F1 | 	sub	fp, #8
1efa4     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1efa8     1C 00 90 5D |  if_ne	jmp	#LR__2440
1efac     08 4E 05 F1 | 	add	fp, #8
1efb0     A7 38 68 FC | 	wrlong	#28, fp
1efb4     08 4E 85 F1 | 	sub	fp, #8
1efb8     A7 12 02 FB | 	rdlong	arg01, fp
1efbc     00 14 06 F6 | 	mov	arg02, #0
1efc0     90 C4 B0 FD | 	call	#__system___float_tointeger
1efc4     A7 FA 61 FC | 	wrlong	result1, fp
1efc8                 | LR__2440
1efc8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1efc8     14 4E 05 F1 | 	add	fp, #20
1efcc     A7 92 02 FB | 	rdlong	muldivb_, fp
1efd0     14 4E 85 F1 | 	sub	fp, #20
1efd4     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1efd8     28 00 90 5D |  if_ne	jmp	#LR__2441
1efdc     14 4E 05 F1 | 	add	fp, #20
1efe0     A7 38 68 FC | 	wrlong	#28, fp
1efe4     08 4E 85 F1 | 	sub	fp, #8
1efe8     A7 12 02 FB | 	rdlong	arg01, fp
1efec     0C 4E 85 F1 | 	sub	fp, #12
1eff0     00 14 06 F6 | 	mov	arg02, #0
1eff4     5C C4 B0 FD | 	call	#__system___float_tointeger
1eff8     0C 4E 05 F1 | 	add	fp, #12
1effc     A7 FA 61 FC | 	wrlong	result1, fp
1f000     0C 4E 85 F1 | 	sub	fp, #12
1f004                 | LR__2441
1f004                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1f004     08 4E 05 F1 | 	add	fp, #8
1f008     A7 92 02 FB | 	rdlong	muldivb_, fp
1f00c     08 4E 85 F1 | 	sub	fp, #8
1f010     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1f014     14 4E 05 A1 |  if_e	add	fp, #20
1f018     A7 26 02 AB |  if_e	rdlong	local01, fp
1f01c     14 4E 85 A1 |  if_e	sub	fp, #20
1f020     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1f024     20 00 90 5D |  if_ne	jmp	#LR__2442
1f028     0C 4E 05 F1 | 	add	fp, #12
1f02c     A7 26 02 FB | 	rdlong	local01, fp
1f030     0C 4E 85 F1 | 	sub	fp, #12
1f034     A7 92 02 FB | 	rdlong	muldivb_, fp
1f038     13 93 12 FD | 	qdiv	muldivb_, local01
1f03c     18 26 62 FD | 	getqx	local01
1f040     A7 26 62 FC | 	wrlong	local01, fp
1f044     E0 00 90 FD | 	jmp	#LR__2446
1f048                 | LR__2442
1f048                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1f048     08 4E 05 F1 | 	add	fp, #8
1f04c     A7 92 02 FB | 	rdlong	muldivb_, fp
1f050     08 4E 85 F1 | 	sub	fp, #8
1f054     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1f058     14 4E 05 A1 |  if_e	add	fp, #20
1f05c     A7 26 02 AB |  if_e	rdlong	local01, fp
1f060     14 4E 85 A1 |  if_e	sub	fp, #20
1f064     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1f068     2C 00 90 5D |  if_ne	jmp	#LR__2443
1f06c     0C 4E 05 F1 | 	add	fp, #12
1f070     A7 26 02 FB | 	rdlong	local01, fp
1f074     0C 4E 85 F1 | 	sub	fp, #12
1f078     A7 92 02 FB | 	rdlong	muldivb_, fp
1f07c     13 93 12 FD | 	qdiv	muldivb_, local01
1f080     18 26 62 FD | 	getqx	local01
1f084     A7 26 62 FC | 	wrlong	local01, fp
1f088     08 4E 05 F1 | 	add	fp, #8
1f08c     A7 38 68 FC | 	wrlong	#28, fp
1f090     08 4E 85 F1 | 	sub	fp, #8
1f094     90 00 90 FD | 	jmp	#LR__2446
1f098                 | LR__2443
1f098                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1f098     08 4E 05 F1 | 	add	fp, #8
1f09c     A7 92 02 FB | 	rdlong	muldivb_, fp
1f0a0     08 4E 85 F1 | 	sub	fp, #8
1f0a4     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1f0a8     14 4E 05 A1 |  if_e	add	fp, #20
1f0ac     A7 26 02 AB |  if_e	rdlong	local01, fp
1f0b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f0b4     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1f0b8     1C 00 90 5D |  if_ne	jmp	#LR__2444
1f0bc     A7 90 02 FB | 	rdlong	muldiva_, fp
1f0c0     0C 4E 05 F1 | 	add	fp, #12
1f0c4     A7 92 02 FB | 	rdlong	muldivb_, fp
1f0c8     0C 4E 85 F1 | 	sub	fp, #12
1f0cc     BA 00 A0 FD | 	call	#divide_
1f0d0     A7 92 62 FC | 	wrlong	muldivb_, fp
1f0d4     50 00 90 FD | 	jmp	#LR__2446
1f0d8                 | LR__2444
1f0d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1f0d8     08 4E 05 F1 | 	add	fp, #8
1f0dc     A7 92 02 FB | 	rdlong	muldivb_, fp
1f0e0     08 4E 85 F1 | 	sub	fp, #8
1f0e4     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1f0e8     14 4E 05 A1 |  if_e	add	fp, #20
1f0ec     A7 26 02 AB |  if_e	rdlong	local01, fp
1f0f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f0f4     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1f0f8     1C 00 90 5D |  if_ne	jmp	#LR__2445
1f0fc     A7 90 02 FB | 	rdlong	muldiva_, fp
1f100     0C 4E 05 F1 | 	add	fp, #12
1f104     A7 92 02 FB | 	rdlong	muldivb_, fp
1f108     0C 4E 85 F1 | 	sub	fp, #12
1f10c     BA 00 A0 FD | 	call	#divide_
1f110     A7 92 62 FC | 	wrlong	muldivb_, fp
1f114     10 00 90 FD | 	jmp	#LR__2446
1f118                 | LR__2445
1f118     A7 16 68 FC | 	wrlong	#11, fp
1f11c     08 4E 05 F1 | 	add	fp, #8
1f120     A7 FE 69 FC | 	wrlong	#255, fp
1f124     08 4E 85 F1 | 	sub	fp, #8
1f128                 | LR__2446
1f128     A7 12 02 F6 | 	mov	arg01, fp
1f12c     88 E7 BE FD | 	call	#_push
1f130     A7 F0 03 F6 | 	mov	ptra, fp
1f134     B2 00 A0 FD | 	call	#popregs_
1f138                 | _do_div_ret
1f138     2D 00 64 FD | 	ret
1f13c                 | 
1f13c                 | ' 
1f13c                 | ' '--------------------------------- equal (=)
1f13c                 | ' 
1f13c                 | ' sub do_eq
1f13c                 | _do_eq
1f13c     05 4A 05 F6 | 	mov	COUNT_, #5
1f140     A8 00 A0 FD | 	call	#pushregs_
1f144     18 F0 07 F1 | 	add	ptra, #24
1f148     D4 E6 BE FD | 	call	#_pop
1f14c     FD 26 02 F6 | 	mov	local01, result1
1f150     FE 28 02 F6 | 	mov	local02, result2
1f154     FF 2A 02 F6 | 	mov	local03, result3
1f158     0C 4E 05 F1 | 	add	fp, #12
1f15c     A7 26 62 FC | 	wrlong	local01, fp
1f160     04 4E 05 F1 | 	add	fp, #4
1f164     A7 28 62 FC | 	wrlong	local02, fp
1f168     04 4E 05 F1 | 	add	fp, #4
1f16c     A7 2A 62 FC | 	wrlong	local03, fp
1f170     14 4E 85 F1 | 	sub	fp, #20
1f174     A8 E6 BE FD | 	call	#_pop
1f178     FF 2A 02 F6 | 	mov	local03, result3
1f17c     A7 FA 61 FC | 	wrlong	result1, fp
1f180     04 4E 05 F1 | 	add	fp, #4
1f184     A7 FC 61 FC | 	wrlong	result2, fp
1f188     04 4E 05 F1 | 	add	fp, #4
1f18c     A7 2A 62 FC | 	wrlong	local03, fp
1f190                 | ' 
1f190                 | ' t2=pop()
1f190                 | ' t1=pop()
1f190                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1f190     08 4E 85 F1 | 	sub	fp, #8
1f194     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f198     14 4E 05 A1 |  if_e	add	fp, #20
1f19c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f1a4     16 2B 02 A6 |  if_e	mov	local03, local04
1f1a8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f1ac     28 00 90 5D |  if_ne	jmp	#LR__2450
1f1b0     00 26 06 F6 | 	mov	local01, #0
1f1b4     A7 12 02 FB | 	rdlong	arg01, fp
1f1b8     0C 4E 05 F1 | 	add	fp, #12
1f1bc     A7 14 02 FB | 	rdlong	arg02, fp
1f1c0     0C 4E 85 F1 | 	sub	fp, #12
1f1c4     70 8F B0 FD | 	call	#__system___string_cmp
1f1c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1f1cc     00 26 26 A6 |  if_e	not	local01, #0
1f1d0     A7 26 62 FC | 	wrlong	local01, fp
1f1d4     20 04 90 FD | 	jmp	#LR__2463
1f1d8                 | LR__2450
1f1d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1f1d8     08 4E 05 F1 | 	add	fp, #8
1f1dc     A7 26 02 FB | 	rdlong	local01, fp
1f1e0     08 4E 85 F1 | 	sub	fp, #8
1f1e4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f1e8     14 4E 05 A1 |  if_e	add	fp, #20
1f1ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f1f4     16 2B 02 A6 |  if_e	mov	local03, local04
1f1f8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f1fc     2C 00 90 5D |  if_ne	jmp	#LR__2451
1f200     00 26 06 F6 | 	mov	local01, #0
1f204     A7 12 02 FB | 	rdlong	arg01, fp
1f208     0C 4E 05 F1 | 	add	fp, #12
1f20c     A7 14 02 FB | 	rdlong	arg02, fp
1f210     0C 4E 85 F1 | 	sub	fp, #12
1f214     01 16 06 F6 | 	mov	arg03, #1
1f218     A4 C1 B0 FD | 	call	#__system___float_cmp
1f21c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f220     00 26 26 A6 |  if_e	not	local01, #0
1f224     A7 26 62 FC | 	wrlong	local01, fp
1f228     CC 03 90 FD | 	jmp	#LR__2463
1f22c                 | LR__2451
1f22c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1f22c     08 4E 05 F1 | 	add	fp, #8
1f230     A7 26 02 FB | 	rdlong	local01, fp
1f234     08 4E 85 F1 | 	sub	fp, #8
1f238     1E 26 0E F2 | 	cmp	local01, #30 wz
1f23c     14 4E 05 A1 |  if_e	add	fp, #20
1f240     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f244     14 4E 85 A1 |  if_e	sub	fp, #20
1f248     16 2B 02 A6 |  if_e	mov	local03, local04
1f24c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f250     48 00 90 5D |  if_ne	jmp	#LR__2452
1f254     00 26 06 F6 | 	mov	local01, #0
1f258     A7 28 02 FB | 	rdlong	local02, fp
1f25c     0C 4E 05 F1 | 	add	fp, #12
1f260     A7 12 02 FB | 	rdlong	arg01, fp
1f264     0C 4E 85 F1 | 	sub	fp, #12
1f268     09 13 52 F6 | 	abs	arg01, arg01 wc
1f26c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f270     00 2E 06 36 |  if_ae	mov	local05, #0
1f274     10 B9 B0 FD | 	call	#__system___float_fromuns
1f278     17 FB 61 F5 | 	xor	result1, local05
1f27c     FD 14 02 F6 | 	mov	arg02, result1
1f280     14 13 02 F6 | 	mov	arg01, local02
1f284     01 16 06 F6 | 	mov	arg03, #1
1f288     34 C1 B0 FD | 	call	#__system___float_cmp
1f28c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f290     00 26 26 A6 |  if_e	not	local01, #0
1f294     A7 26 62 FC | 	wrlong	local01, fp
1f298     5C 03 90 FD | 	jmp	#LR__2463
1f29c                 | LR__2452
1f29c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1f29c     08 4E 05 F1 | 	add	fp, #8
1f2a0     A7 26 02 FB | 	rdlong	local01, fp
1f2a4     08 4E 85 F1 | 	sub	fp, #8
1f2a8     1E 26 0E F2 | 	cmp	local01, #30 wz
1f2ac     14 4E 05 A1 |  if_e	add	fp, #20
1f2b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2b4     14 4E 85 A1 |  if_e	sub	fp, #20
1f2b8     16 2B 02 A6 |  if_e	mov	local03, local04
1f2bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f2c0     38 00 90 5D |  if_ne	jmp	#LR__2453
1f2c4     00 26 06 F6 | 	mov	local01, #0
1f2c8     A7 28 02 FB | 	rdlong	local02, fp
1f2cc     0C 4E 05 F1 | 	add	fp, #12
1f2d0     A7 12 02 FB | 	rdlong	arg01, fp
1f2d4     0C 4E 85 F1 | 	sub	fp, #12
1f2d8     AC B8 B0 FD | 	call	#__system___float_fromuns
1f2dc     FD 14 02 F6 | 	mov	arg02, result1
1f2e0     14 13 02 F6 | 	mov	arg01, local02
1f2e4     01 16 06 F6 | 	mov	arg03, #1
1f2e8     D4 C0 B0 FD | 	call	#__system___float_cmp
1f2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1f2f0     00 26 26 A6 |  if_e	not	local01, #0
1f2f4     A7 26 62 FC | 	wrlong	local01, fp
1f2f8     FC 02 90 FD | 	jmp	#LR__2463
1f2fc                 | LR__2453
1f2fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1f2fc     08 4E 05 F1 | 	add	fp, #8
1f300     A7 26 02 FB | 	rdlong	local01, fp
1f304     08 4E 85 F1 | 	sub	fp, #8
1f308     1C 26 0E F2 | 	cmp	local01, #28 wz
1f30c     14 4E 05 A1 |  if_e	add	fp, #20
1f310     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f314     14 4E 85 A1 |  if_e	sub	fp, #20
1f318     16 2B 02 A6 |  if_e	mov	local03, local04
1f31c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f320     44 00 90 5D |  if_ne	jmp	#LR__2454
1f324     00 26 06 F6 | 	mov	local01, #0
1f328     A7 12 02 FB | 	rdlong	arg01, fp
1f32c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f330     1F 2E C6 C9 |  if_b	decod	local05, #31
1f334     00 2E 06 36 |  if_ae	mov	local05, #0
1f338     4C B8 B0 FD | 	call	#__system___float_fromuns
1f33c     17 FB 61 F5 | 	xor	result1, local05
1f340     FD 12 02 F6 | 	mov	arg01, result1
1f344     0C 4E 05 F1 | 	add	fp, #12
1f348     A7 14 02 FB | 	rdlong	arg02, fp
1f34c     0C 4E 85 F1 | 	sub	fp, #12
1f350     01 16 06 F6 | 	mov	arg03, #1
1f354     68 C0 B0 FD | 	call	#__system___float_cmp
1f358     00 FA 0D F2 | 	cmp	result1, #0 wz
1f35c     00 26 26 A6 |  if_e	not	local01, #0
1f360     A7 26 62 FC | 	wrlong	local01, fp
1f364     90 02 90 FD | 	jmp	#LR__2463
1f368                 | LR__2454
1f368                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1f368     08 4E 05 F1 | 	add	fp, #8
1f36c     A7 26 02 FB | 	rdlong	local01, fp
1f370     08 4E 85 F1 | 	sub	fp, #8
1f374     1C 26 0E F2 | 	cmp	local01, #28 wz
1f378     14 4E 05 A1 |  if_e	add	fp, #20
1f37c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f380     14 4E 85 A1 |  if_e	sub	fp, #20
1f384     16 2B 02 A6 |  if_e	mov	local03, local04
1f388     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f38c     24 00 90 5D |  if_ne	jmp	#LR__2455
1f390     00 26 06 F6 | 	mov	local01, #0
1f394     A7 28 02 FB | 	rdlong	local02, fp
1f398     0C 4E 05 F1 | 	add	fp, #12
1f39c     A7 2A 02 FB | 	rdlong	local03, fp
1f3a0     0C 4E 85 F1 | 	sub	fp, #12
1f3a4     15 29 0A F2 | 	cmp	local02, local03 wz
1f3a8     01 26 66 A6 |  if_e	neg	local01, #1
1f3ac     A7 26 62 FC | 	wrlong	local01, fp
1f3b0     44 02 90 FD | 	jmp	#LR__2463
1f3b4                 | LR__2455
1f3b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1f3b4     08 4E 05 F1 | 	add	fp, #8
1f3b8     A7 26 02 FB | 	rdlong	local01, fp
1f3bc     08 4E 85 F1 | 	sub	fp, #8
1f3c0     1C 26 0E F2 | 	cmp	local01, #28 wz
1f3c4     14 4E 05 A1 |  if_e	add	fp, #20
1f3c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f3cc     14 4E 85 A1 |  if_e	sub	fp, #20
1f3d0     16 2B 02 A6 |  if_e	mov	local03, local04
1f3d4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f3d8     24 00 90 5D |  if_ne	jmp	#LR__2456
1f3dc     00 26 06 F6 | 	mov	local01, #0
1f3e0     A7 28 02 FB | 	rdlong	local02, fp
1f3e4     0C 4E 05 F1 | 	add	fp, #12
1f3e8     A7 2A 02 FB | 	rdlong	local03, fp
1f3ec     0C 4E 85 F1 | 	sub	fp, #12
1f3f0     15 29 0A F2 | 	cmp	local02, local03 wz
1f3f4     01 26 66 A6 |  if_e	neg	local01, #1
1f3f8     A7 26 62 FC | 	wrlong	local01, fp
1f3fc     F8 01 90 FD | 	jmp	#LR__2463
1f400                 | LR__2456
1f400                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1f400     08 4E 05 F1 | 	add	fp, #8
1f404     A7 26 02 FB | 	rdlong	local01, fp
1f408     08 4E 85 F1 | 	sub	fp, #8
1f40c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f410     14 4E 05 A1 |  if_e	add	fp, #20
1f414     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f418     14 4E 85 A1 |  if_e	sub	fp, #20
1f41c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f420     34 00 90 5D |  if_ne	jmp	#LR__2457
1f424     00 26 06 F6 | 	mov	local01, #0
1f428     A7 12 02 FB | 	rdlong	arg01, fp
1f42c     58 B7 B0 FD | 	call	#__system___float_fromuns
1f430     FD 12 02 F6 | 	mov	arg01, result1
1f434     0C 4E 05 F1 | 	add	fp, #12
1f438     A7 14 02 FB | 	rdlong	arg02, fp
1f43c     0C 4E 85 F1 | 	sub	fp, #12
1f440     01 16 06 F6 | 	mov	arg03, #1
1f444     78 BF B0 FD | 	call	#__system___float_cmp
1f448     00 FA 0D F2 | 	cmp	result1, #0 wz
1f44c     00 26 26 A6 |  if_e	not	local01, #0
1f450     A7 26 62 FC | 	wrlong	local01, fp
1f454     A0 01 90 FD | 	jmp	#LR__2463
1f458                 | LR__2457
1f458                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1f458     08 4E 05 F1 | 	add	fp, #8
1f45c     A7 26 02 FB | 	rdlong	local01, fp
1f460     08 4E 85 F1 | 	sub	fp, #8
1f464     1D 26 0E F2 | 	cmp	local01, #29 wz
1f468     14 4E 05 A1 |  if_e	add	fp, #20
1f46c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f470     14 4E 85 A1 |  if_e	sub	fp, #20
1f474     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f478     24 00 90 5D |  if_ne	jmp	#LR__2458
1f47c     00 26 06 F6 | 	mov	local01, #0
1f480     A7 28 02 FB | 	rdlong	local02, fp
1f484     0C 4E 05 F1 | 	add	fp, #12
1f488     A7 2A 02 FB | 	rdlong	local03, fp
1f48c     0C 4E 85 F1 | 	sub	fp, #12
1f490     15 29 0A F2 | 	cmp	local02, local03 wz
1f494     01 26 66 A6 |  if_e	neg	local01, #1
1f498     A7 26 62 FC | 	wrlong	local01, fp
1f49c     58 01 90 FD | 	jmp	#LR__2463
1f4a0                 | LR__2458
1f4a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1f4a0     08 4E 05 F1 | 	add	fp, #8
1f4a4     A7 26 02 FB | 	rdlong	local01, fp
1f4a8     08 4E 85 F1 | 	sub	fp, #8
1f4ac     1D 26 0E F2 | 	cmp	local01, #29 wz
1f4b0     14 4E 05 A1 |  if_e	add	fp, #20
1f4b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f4b8     14 4E 85 A1 |  if_e	sub	fp, #20
1f4bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f4c0     24 00 90 5D |  if_ne	jmp	#LR__2459
1f4c4     00 26 06 F6 | 	mov	local01, #0
1f4c8     A7 28 02 FB | 	rdlong	local02, fp
1f4cc     0C 4E 05 F1 | 	add	fp, #12
1f4d0     A7 2A 02 FB | 	rdlong	local03, fp
1f4d4     0C 4E 85 F1 | 	sub	fp, #12
1f4d8     15 29 0A F2 | 	cmp	local02, local03 wz
1f4dc     01 26 66 A6 |  if_e	neg	local01, #1
1f4e0     A7 26 62 FC | 	wrlong	local01, fp
1f4e4     10 01 90 FD | 	jmp	#LR__2463
1f4e8                 | LR__2459
1f4e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1f4e8     08 4E 05 F1 | 	add	fp, #8
1f4ec     A7 26 02 FB | 	rdlong	local01, fp
1f4f0     08 4E 85 F1 | 	sub	fp, #8
1f4f4     2B 26 0E F2 | 	cmp	local01, #43 wz
1f4f8     14 4E 05 A1 |  if_e	add	fp, #20
1f4fc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f500     14 4E 85 A1 |  if_e	sub	fp, #20
1f504     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f508     30 00 90 5D |  if_ne	jmp	#LR__2460
1f50c     00 26 06 F6 | 	mov	local01, #0
1f510     A7 12 02 FB | 	rdlong	arg01, fp
1f514     80 E4 BE FD | 	call	#_convertstring
1f518     FD 12 02 F6 | 	mov	arg01, result1
1f51c     0C 4E 05 F1 | 	add	fp, #12
1f520     A7 14 02 FB | 	rdlong	arg02, fp
1f524     0C 4E 85 F1 | 	sub	fp, #12
1f528     0C 8C B0 FD | 	call	#__system___string_cmp
1f52c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f530     00 26 26 A6 |  if_e	not	local01, #0
1f534     A7 26 62 FC | 	wrlong	local01, fp
1f538     BC 00 90 FD | 	jmp	#LR__2463
1f53c                 | LR__2460
1f53c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1f53c     08 4E 05 F1 | 	add	fp, #8
1f540     A7 26 02 FB | 	rdlong	local01, fp
1f544     08 4E 85 F1 | 	sub	fp, #8
1f548     1F 26 0E F2 | 	cmp	local01, #31 wz
1f54c     14 4E 05 A1 |  if_e	add	fp, #20
1f550     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f554     14 4E 85 A1 |  if_e	sub	fp, #20
1f558     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f55c     34 00 90 5D |  if_ne	jmp	#LR__2461
1f560     00 26 06 F6 | 	mov	local01, #0
1f564     A7 28 02 FB | 	rdlong	local02, fp
1f568     0C 4E 05 F1 | 	add	fp, #12
1f56c     A7 12 02 FB | 	rdlong	arg01, fp
1f570     0C 4E 85 F1 | 	sub	fp, #12
1f574     20 E4 BE FD | 	call	#_convertstring
1f578     FD 14 02 F6 | 	mov	arg02, result1
1f57c     14 13 02 F6 | 	mov	arg01, local02
1f580     B4 8B B0 FD | 	call	#__system___string_cmp
1f584     00 FA 0D F2 | 	cmp	result1, #0 wz
1f588     00 26 26 A6 |  if_e	not	local01, #0
1f58c     A7 26 62 FC | 	wrlong	local01, fp
1f590     64 00 90 FD | 	jmp	#LR__2463
1f594                 | LR__2461
1f594                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1f594     08 4E 05 F1 | 	add	fp, #8
1f598     A7 26 02 FB | 	rdlong	local01, fp
1f59c     08 4E 85 F1 | 	sub	fp, #8
1f5a0     2B 26 0E F2 | 	cmp	local01, #43 wz
1f5a4     14 4E 05 A1 |  if_e	add	fp, #20
1f5a8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f5ac     14 4E 85 A1 |  if_e	sub	fp, #20
1f5b0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f5b4     3C 00 90 5D |  if_ne	jmp	#LR__2462
1f5b8     00 26 06 F6 | 	mov	local01, #0
1f5bc     A7 12 02 FB | 	rdlong	arg01, fp
1f5c0     D4 E3 BE FD | 	call	#_convertstring
1f5c4     FD 28 02 F6 | 	mov	local02, result1
1f5c8     0C 4E 05 F1 | 	add	fp, #12
1f5cc     A7 12 02 FB | 	rdlong	arg01, fp
1f5d0     0C 4E 85 F1 | 	sub	fp, #12
1f5d4     C0 E3 BE FD | 	call	#_convertstring
1f5d8     FD 14 02 F6 | 	mov	arg02, result1
1f5dc     14 13 02 F6 | 	mov	arg01, local02
1f5e0     54 8B B0 FD | 	call	#__system___string_cmp
1f5e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f5e8     00 26 26 A6 |  if_e	not	local01, #0
1f5ec     A7 26 62 FC | 	wrlong	local01, fp
1f5f0     04 00 90 FD | 	jmp	#LR__2463
1f5f4                 | LR__2462
1f5f4     A7 00 68 FC | 	wrlong	#0, fp
1f5f8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f5f8                 | LR__2463
1f5f8     08 4E 05 F1 | 	add	fp, #8
1f5fc     A7 38 68 FC | 	wrlong	#28, fp
1f600     08 4E 85 F1 | 	sub	fp, #8
1f604     A7 12 02 F6 | 	mov	arg01, fp
1f608     AC E2 BE FD | 	call	#_push
1f60c     A7 F0 03 F6 | 	mov	ptra, fp
1f610     B2 00 A0 FD | 	call	#popregs_
1f614                 | _do_eq_ret
1f614     2D 00 64 FD | 	ret
1f618                 | 
1f618                 | ' 
1f618                 | ' '--------------------------------- fdiv (/) - float divide
1f618                 | ' 
1f618                 | ' sub do_fdiv 
1f618                 | _do_fdiv
1f618     02 4A 05 F6 | 	mov	COUNT_, #2
1f61c     A8 00 A0 FD | 	call	#pushregs_
1f620     18 F0 07 F1 | 	add	ptra, #24
1f624     F8 E1 BE FD | 	call	#_pop
1f628     FD 14 02 F6 | 	mov	arg02, result1
1f62c     FE 12 02 F6 | 	mov	arg01, result2
1f630     FF 26 02 F6 | 	mov	local01, result3
1f634     0C 4E 05 F1 | 	add	fp, #12
1f638     A7 14 62 FC | 	wrlong	arg02, fp
1f63c     04 4E 05 F1 | 	add	fp, #4
1f640     A7 12 62 FC | 	wrlong	arg01, fp
1f644     04 4E 05 F1 | 	add	fp, #4
1f648     A7 26 62 FC | 	wrlong	local01, fp
1f64c     14 4E 85 F1 | 	sub	fp, #20
1f650     CC E1 BE FD | 	call	#_pop
1f654     A7 FA 61 FC | 	wrlong	result1, fp
1f658     04 4E 05 F1 | 	add	fp, #4
1f65c     A7 FC 61 FC | 	wrlong	result2, fp
1f660     04 4E 05 F1 | 	add	fp, #4
1f664     A7 FE 61 FC | 	wrlong	result3, fp
1f668                 | ' 
1f668                 | ' t2=pop()
1f668                 | ' t1=pop()
1f668                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1f668     08 4E 85 F1 | 	sub	fp, #8
1f66c     1F FE 0D F2 | 	cmp	result3, #31 wz
1f670     14 4E 05 51 |  if_ne	add	fp, #20
1f674     A7 26 02 5B |  if_ne	rdlong	local01, fp
1f678     14 4E 85 51 |  if_ne	sub	fp, #20
1f67c     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1f680     A7 14 68 AC |  if_e	wrlong	#10, fp
1f684     08 4E 05 A1 |  if_e	add	fp, #8
1f688     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f68c     08 4E 85 A1 |  if_e	sub	fp, #8
1f690     38 01 90 AD |  if_e	jmp	#LR__2475
1f694                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1f694     08 4E 05 F1 | 	add	fp, #8
1f698     A7 14 02 FB | 	rdlong	arg02, fp
1f69c     08 4E 85 F1 | 	sub	fp, #8
1f6a0     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f6a4     28 00 90 5D |  if_ne	jmp	#LR__2470
1f6a8     08 4E 05 F1 | 	add	fp, #8
1f6ac     A7 3C 68 FC | 	wrlong	#30, fp
1f6b0     08 4E 85 F1 | 	sub	fp, #8
1f6b4     A7 12 02 FB | 	rdlong	arg01, fp
1f6b8     09 13 52 F6 | 	abs	arg01, arg01 wc
1f6bc     1F 28 C6 C9 |  if_b	decod	local02, #31
1f6c0     00 28 06 36 |  if_ae	mov	local02, #0
1f6c4     C0 B4 B0 FD | 	call	#__system___float_fromuns
1f6c8     14 FB 61 F5 | 	xor	result1, local02
1f6cc     A7 FA 61 FC | 	wrlong	result1, fp
1f6d0                 | LR__2470
1f6d0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1f6d0     08 4E 05 F1 | 	add	fp, #8
1f6d4     A7 14 02 FB | 	rdlong	arg02, fp
1f6d8     08 4E 85 F1 | 	sub	fp, #8
1f6dc     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f6e0     18 00 90 5D |  if_ne	jmp	#LR__2471
1f6e4     08 4E 05 F1 | 	add	fp, #8
1f6e8     A7 3C 68 FC | 	wrlong	#30, fp
1f6ec     08 4E 85 F1 | 	sub	fp, #8
1f6f0     A7 12 02 FB | 	rdlong	arg01, fp
1f6f4     90 B4 B0 FD | 	call	#__system___float_fromuns
1f6f8     A7 FA 61 FC | 	wrlong	result1, fp
1f6fc                 | LR__2471
1f6fc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1f6fc     14 4E 05 F1 | 	add	fp, #20
1f700     A7 14 02 FB | 	rdlong	arg02, fp
1f704     14 4E 85 F1 | 	sub	fp, #20
1f708     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f70c     34 00 90 5D |  if_ne	jmp	#LR__2472
1f710     14 4E 05 F1 | 	add	fp, #20
1f714     A7 3C 68 FC | 	wrlong	#30, fp
1f718     08 4E 85 F1 | 	sub	fp, #8
1f71c     A7 12 02 FB | 	rdlong	arg01, fp
1f720     0C 4E 85 F1 | 	sub	fp, #12
1f724     09 13 52 F6 | 	abs	arg01, arg01 wc
1f728     1F 28 C6 C9 |  if_b	decod	local02, #31
1f72c     00 28 06 36 |  if_ae	mov	local02, #0
1f730     54 B4 B0 FD | 	call	#__system___float_fromuns
1f734     14 FB 61 F5 | 	xor	result1, local02
1f738     0C 4E 05 F1 | 	add	fp, #12
1f73c     A7 FA 61 FC | 	wrlong	result1, fp
1f740     0C 4E 85 F1 | 	sub	fp, #12
1f744                 | LR__2472
1f744                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1f744     14 4E 05 F1 | 	add	fp, #20
1f748     A7 14 02 FB | 	rdlong	arg02, fp
1f74c     14 4E 85 F1 | 	sub	fp, #20
1f750     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f754     24 00 90 5D |  if_ne	jmp	#LR__2473
1f758     14 4E 05 F1 | 	add	fp, #20
1f75c     A7 3C 68 FC | 	wrlong	#30, fp
1f760     08 4E 85 F1 | 	sub	fp, #8
1f764     A7 12 02 FB | 	rdlong	arg01, fp
1f768     0C 4E 85 F1 | 	sub	fp, #12
1f76c     18 B4 B0 FD | 	call	#__system___float_fromuns
1f770     0C 4E 05 F1 | 	add	fp, #12
1f774     A7 FA 61 FC | 	wrlong	result1, fp
1f778     0C 4E 85 F1 | 	sub	fp, #12
1f77c                 | LR__2473
1f77c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1f77c     08 4E 05 F1 | 	add	fp, #8
1f780     A7 14 02 FB | 	rdlong	arg02, fp
1f784     08 4E 85 F1 | 	sub	fp, #8
1f788     1E 14 0E F2 | 	cmp	arg02, #30 wz
1f78c     14 4E 05 A1 |  if_e	add	fp, #20
1f790     A7 26 02 AB |  if_e	rdlong	local01, fp
1f794     14 4E 85 A1 |  if_e	sub	fp, #20
1f798     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1f79c     1C 00 90 5D |  if_ne	jmp	#LR__2474
1f7a0     A7 12 02 FB | 	rdlong	arg01, fp
1f7a4     0C 4E 05 F1 | 	add	fp, #12
1f7a8     A7 14 02 FB | 	rdlong	arg02, fp
1f7ac     0C 4E 85 F1 | 	sub	fp, #12
1f7b0     DC B9 B0 FD | 	call	#__system___float_div
1f7b4     A7 FA 61 FC | 	wrlong	result1, fp
1f7b8     10 00 90 FD | 	jmp	#LR__2475
1f7bc                 | LR__2474
1f7bc     A7 16 68 FC | 	wrlong	#11, fp
1f7c0     08 4E 05 F1 | 	add	fp, #8
1f7c4     A7 FE 69 FC | 	wrlong	#255, fp
1f7c8     08 4E 85 F1 | 	sub	fp, #8
1f7cc                 | LR__2475
1f7cc     A7 12 02 F6 | 	mov	arg01, fp
1f7d0     E4 E0 BE FD | 	call	#_push
1f7d4     A7 F0 03 F6 | 	mov	ptra, fp
1f7d8     B2 00 A0 FD | 	call	#popregs_
1f7dc                 | _do_fdiv_ret
1f7dc     2D 00 64 FD | 	ret
1f7e0                 | 
1f7e0                 | ' 
1f7e0                 | ' '--------------------------------- greater or equal (>=)
1f7e0                 | ' 
1f7e0                 | ' sub do_ge
1f7e0                 | _do_ge
1f7e0     05 4A 05 F6 | 	mov	COUNT_, #5
1f7e4     A8 00 A0 FD | 	call	#pushregs_
1f7e8     18 F0 07 F1 | 	add	ptra, #24
1f7ec     30 E0 BE FD | 	call	#_pop
1f7f0     FD 26 02 F6 | 	mov	local01, result1
1f7f4     FE 28 02 F6 | 	mov	local02, result2
1f7f8     FF 2A 02 F6 | 	mov	local03, result3
1f7fc     0C 4E 05 F1 | 	add	fp, #12
1f800     A7 26 62 FC | 	wrlong	local01, fp
1f804     04 4E 05 F1 | 	add	fp, #4
1f808     A7 28 62 FC | 	wrlong	local02, fp
1f80c     04 4E 05 F1 | 	add	fp, #4
1f810     A7 2A 62 FC | 	wrlong	local03, fp
1f814     14 4E 85 F1 | 	sub	fp, #20
1f818     04 E0 BE FD | 	call	#_pop
1f81c     FF 2A 02 F6 | 	mov	local03, result3
1f820     A7 FA 61 FC | 	wrlong	result1, fp
1f824     04 4E 05 F1 | 	add	fp, #4
1f828     A7 FC 61 FC | 	wrlong	result2, fp
1f82c     04 4E 05 F1 | 	add	fp, #4
1f830     A7 2A 62 FC | 	wrlong	local03, fp
1f834                 | ' 
1f834                 | ' t2=pop()
1f834                 | ' t1=pop()
1f834                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1f834     08 4E 85 F1 | 	sub	fp, #8
1f838     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f83c     14 4E 05 A1 |  if_e	add	fp, #20
1f840     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f844     14 4E 85 A1 |  if_e	sub	fp, #20
1f848     16 2B 02 A6 |  if_e	mov	local03, local04
1f84c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f850     28 00 90 5D |  if_ne	jmp	#LR__2480
1f854     00 26 06 F6 | 	mov	local01, #0
1f858     A7 12 02 FB | 	rdlong	arg01, fp
1f85c     0C 4E 05 F1 | 	add	fp, #12
1f860     A7 14 02 FB | 	rdlong	arg02, fp
1f864     0C 4E 85 F1 | 	sub	fp, #12
1f868     CC 88 B0 FD | 	call	#__system___string_cmp
1f86c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f870     00 26 26 36 |  if_ae	not	local01, #0
1f874     A7 26 62 FC | 	wrlong	local01, fp
1f878     24 04 90 FD | 	jmp	#LR__2493
1f87c                 | LR__2480
1f87c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1f87c     08 4E 05 F1 | 	add	fp, #8
1f880     A7 26 02 FB | 	rdlong	local01, fp
1f884     08 4E 85 F1 | 	sub	fp, #8
1f888     1E 26 0E F2 | 	cmp	local01, #30 wz
1f88c     14 4E 05 A1 |  if_e	add	fp, #20
1f890     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f894     14 4E 85 A1 |  if_e	sub	fp, #20
1f898     16 2B 02 A6 |  if_e	mov	local03, local04
1f89c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f8a0     2C 00 90 5D |  if_ne	jmp	#LR__2481
1f8a4     00 26 06 F6 | 	mov	local01, #0
1f8a8     A7 12 02 FB | 	rdlong	arg01, fp
1f8ac     0C 4E 05 F1 | 	add	fp, #12
1f8b0     A7 14 02 FB | 	rdlong	arg02, fp
1f8b4     0C 4E 85 F1 | 	sub	fp, #12
1f8b8     01 16 66 F6 | 	neg	arg03, #1
1f8bc     00 BB B0 FD | 	call	#__system___float_cmp
1f8c0     00 FA 55 F2 | 	cmps	result1, #0 wc
1f8c4     00 26 26 36 |  if_ae	not	local01, #0
1f8c8     A7 26 62 FC | 	wrlong	local01, fp
1f8cc     D0 03 90 FD | 	jmp	#LR__2493
1f8d0                 | LR__2481
1f8d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1f8d0     08 4E 05 F1 | 	add	fp, #8
1f8d4     A7 26 02 FB | 	rdlong	local01, fp
1f8d8     08 4E 85 F1 | 	sub	fp, #8
1f8dc     1E 26 0E F2 | 	cmp	local01, #30 wz
1f8e0     14 4E 05 A1 |  if_e	add	fp, #20
1f8e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f8e8     14 4E 85 A1 |  if_e	sub	fp, #20
1f8ec     16 2B 02 A6 |  if_e	mov	local03, local04
1f8f0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f8f4     48 00 90 5D |  if_ne	jmp	#LR__2482
1f8f8     00 26 06 F6 | 	mov	local01, #0
1f8fc     A7 28 02 FB | 	rdlong	local02, fp
1f900     0C 4E 05 F1 | 	add	fp, #12
1f904     A7 12 02 FB | 	rdlong	arg01, fp
1f908     0C 4E 85 F1 | 	sub	fp, #12
1f90c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f910     1F 2E C6 C9 |  if_b	decod	local05, #31
1f914     00 2E 06 36 |  if_ae	mov	local05, #0
1f918     6C B2 B0 FD | 	call	#__system___float_fromuns
1f91c     17 FB 61 F5 | 	xor	result1, local05
1f920     FD 14 02 F6 | 	mov	arg02, result1
1f924     14 13 02 F6 | 	mov	arg01, local02
1f928     01 16 66 F6 | 	neg	arg03, #1
1f92c     90 BA B0 FD | 	call	#__system___float_cmp
1f930     00 FA 55 F2 | 	cmps	result1, #0 wc
1f934     00 26 26 36 |  if_ae	not	local01, #0
1f938     A7 26 62 FC | 	wrlong	local01, fp
1f93c     60 03 90 FD | 	jmp	#LR__2493
1f940                 | LR__2482
1f940                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1f940     08 4E 05 F1 | 	add	fp, #8
1f944     A7 26 02 FB | 	rdlong	local01, fp
1f948     08 4E 85 F1 | 	sub	fp, #8
1f94c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f950     14 4E 05 A1 |  if_e	add	fp, #20
1f954     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f958     14 4E 85 A1 |  if_e	sub	fp, #20
1f95c     16 2B 02 A6 |  if_e	mov	local03, local04
1f960     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f964     38 00 90 5D |  if_ne	jmp	#LR__2483
1f968     00 26 06 F6 | 	mov	local01, #0
1f96c     A7 28 02 FB | 	rdlong	local02, fp
1f970     0C 4E 05 F1 | 	add	fp, #12
1f974     A7 12 02 FB | 	rdlong	arg01, fp
1f978     0C 4E 85 F1 | 	sub	fp, #12
1f97c     08 B2 B0 FD | 	call	#__system___float_fromuns
1f980     FD 14 02 F6 | 	mov	arg02, result1
1f984     14 13 02 F6 | 	mov	arg01, local02
1f988     01 16 66 F6 | 	neg	arg03, #1
1f98c     30 BA B0 FD | 	call	#__system___float_cmp
1f990     00 FA 55 F2 | 	cmps	result1, #0 wc
1f994     00 26 26 36 |  if_ae	not	local01, #0
1f998     A7 26 62 FC | 	wrlong	local01, fp
1f99c     00 03 90 FD | 	jmp	#LR__2493
1f9a0                 | LR__2483
1f9a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1f9a0     08 4E 05 F1 | 	add	fp, #8
1f9a4     A7 26 02 FB | 	rdlong	local01, fp
1f9a8     08 4E 85 F1 | 	sub	fp, #8
1f9ac     1C 26 0E F2 | 	cmp	local01, #28 wz
1f9b0     14 4E 05 A1 |  if_e	add	fp, #20
1f9b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f9b8     14 4E 85 A1 |  if_e	sub	fp, #20
1f9bc     16 2B 02 A6 |  if_e	mov	local03, local04
1f9c0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f9c4     44 00 90 5D |  if_ne	jmp	#LR__2484
1f9c8     00 26 06 F6 | 	mov	local01, #0
1f9cc     A7 12 02 FB | 	rdlong	arg01, fp
1f9d0     09 13 52 F6 | 	abs	arg01, arg01 wc
1f9d4     1F 2E C6 C9 |  if_b	decod	local05, #31
1f9d8     00 2E 06 36 |  if_ae	mov	local05, #0
1f9dc     A8 B1 B0 FD | 	call	#__system___float_fromuns
1f9e0     17 FB 61 F5 | 	xor	result1, local05
1f9e4     FD 12 02 F6 | 	mov	arg01, result1
1f9e8     0C 4E 05 F1 | 	add	fp, #12
1f9ec     A7 14 02 FB | 	rdlong	arg02, fp
1f9f0     0C 4E 85 F1 | 	sub	fp, #12
1f9f4     01 16 66 F6 | 	neg	arg03, #1
1f9f8     C4 B9 B0 FD | 	call	#__system___float_cmp
1f9fc     00 FA 55 F2 | 	cmps	result1, #0 wc
1fa00     00 26 26 36 |  if_ae	not	local01, #0
1fa04     A7 26 62 FC | 	wrlong	local01, fp
1fa08     94 02 90 FD | 	jmp	#LR__2493
1fa0c                 | LR__2484
1fa0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1fa0c     08 4E 05 F1 | 	add	fp, #8
1fa10     A7 26 02 FB | 	rdlong	local01, fp
1fa14     08 4E 85 F1 | 	sub	fp, #8
1fa18     1C 26 0E F2 | 	cmp	local01, #28 wz
1fa1c     14 4E 05 A1 |  if_e	add	fp, #20
1fa20     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fa24     14 4E 85 A1 |  if_e	sub	fp, #20
1fa28     16 2B 02 A6 |  if_e	mov	local03, local04
1fa2c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fa30     24 00 90 5D |  if_ne	jmp	#LR__2485
1fa34     00 26 06 F6 | 	mov	local01, #0
1fa38     A7 28 02 FB | 	rdlong	local02, fp
1fa3c     0C 4E 05 F1 | 	add	fp, #12
1fa40     A7 2A 02 FB | 	rdlong	local03, fp
1fa44     0C 4E 85 F1 | 	sub	fp, #12
1fa48     15 29 52 F2 | 	cmps	local02, local03 wc
1fa4c     01 26 66 36 |  if_ae	neg	local01, #1
1fa50     A7 26 62 FC | 	wrlong	local01, fp
1fa54     48 02 90 FD | 	jmp	#LR__2493
1fa58                 | LR__2485
1fa58                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1fa58     08 4E 05 F1 | 	add	fp, #8
1fa5c     A7 26 02 FB | 	rdlong	local01, fp
1fa60     08 4E 85 F1 | 	sub	fp, #8
1fa64     1C 26 0E F2 | 	cmp	local01, #28 wz
1fa68     14 4E 05 A1 |  if_e	add	fp, #20
1fa6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fa70     14 4E 85 A1 |  if_e	sub	fp, #20
1fa74     16 2B 02 A6 |  if_e	mov	local03, local04
1fa78     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fa7c     24 00 90 5D |  if_ne	jmp	#LR__2486
1fa80     00 26 06 F6 | 	mov	local01, #0
1fa84     A7 28 02 FB | 	rdlong	local02, fp
1fa88     0C 4E 05 F1 | 	add	fp, #12
1fa8c     A7 2A 02 FB | 	rdlong	local03, fp
1fa90     0C 4E 85 F1 | 	sub	fp, #12
1fa94     15 29 52 F2 | 	cmps	local02, local03 wc
1fa98     01 26 66 36 |  if_ae	neg	local01, #1
1fa9c     A7 26 62 FC | 	wrlong	local01, fp
1faa0     FC 01 90 FD | 	jmp	#LR__2493
1faa4                 | LR__2486
1faa4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1faa4     08 4E 05 F1 | 	add	fp, #8
1faa8     A7 26 02 FB | 	rdlong	local01, fp
1faac     08 4E 85 F1 | 	sub	fp, #8
1fab0     1D 26 0E F2 | 	cmp	local01, #29 wz
1fab4     14 4E 05 A1 |  if_e	add	fp, #20
1fab8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fabc     14 4E 85 A1 |  if_e	sub	fp, #20
1fac0     16 2B 02 A6 |  if_e	mov	local03, local04
1fac4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fac8     34 00 90 5D |  if_ne	jmp	#LR__2487
1facc     00 26 06 F6 | 	mov	local01, #0
1fad0     A7 12 02 FB | 	rdlong	arg01, fp
1fad4     B0 B0 B0 FD | 	call	#__system___float_fromuns
1fad8     FD 12 02 F6 | 	mov	arg01, result1
1fadc     0C 4E 05 F1 | 	add	fp, #12
1fae0     A7 14 02 FB | 	rdlong	arg02, fp
1fae4     0C 4E 85 F1 | 	sub	fp, #12
1fae8     01 16 66 F6 | 	neg	arg03, #1
1faec     D0 B8 B0 FD | 	call	#__system___float_cmp
1faf0     00 FA 55 F2 | 	cmps	result1, #0 wc
1faf4     00 26 26 36 |  if_ae	not	local01, #0
1faf8     A7 26 62 FC | 	wrlong	local01, fp
1fafc     A0 01 90 FD | 	jmp	#LR__2493
1fb00                 | LR__2487
1fb00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1fb00     08 4E 05 F1 | 	add	fp, #8
1fb04     A7 26 02 FB | 	rdlong	local01, fp
1fb08     08 4E 85 F1 | 	sub	fp, #8
1fb0c     1D 26 0E F2 | 	cmp	local01, #29 wz
1fb10     14 4E 05 A1 |  if_e	add	fp, #20
1fb14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fb18     14 4E 85 A1 |  if_e	sub	fp, #20
1fb1c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1fb20     24 00 90 5D |  if_ne	jmp	#LR__2488
1fb24     00 26 06 F6 | 	mov	local01, #0
1fb28     A7 28 02 FB | 	rdlong	local02, fp
1fb2c     0C 4E 05 F1 | 	add	fp, #12
1fb30     A7 2A 02 FB | 	rdlong	local03, fp
1fb34     0C 4E 85 F1 | 	sub	fp, #12
1fb38     15 29 52 F2 | 	cmps	local02, local03 wc
1fb3c     01 26 66 36 |  if_ae	neg	local01, #1
1fb40     A7 26 62 FC | 	wrlong	local01, fp
1fb44     58 01 90 FD | 	jmp	#LR__2493
1fb48                 | LR__2488
1fb48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1fb48     08 4E 05 F1 | 	add	fp, #8
1fb4c     A7 26 02 FB | 	rdlong	local01, fp
1fb50     08 4E 85 F1 | 	sub	fp, #8
1fb54     1D 26 0E F2 | 	cmp	local01, #29 wz
1fb58     14 4E 05 A1 |  if_e	add	fp, #20
1fb5c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fb60     14 4E 85 A1 |  if_e	sub	fp, #20
1fb64     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fb68     24 00 90 5D |  if_ne	jmp	#LR__2489
1fb6c     00 26 06 F6 | 	mov	local01, #0
1fb70     A7 28 02 FB | 	rdlong	local02, fp
1fb74     0C 4E 05 F1 | 	add	fp, #12
1fb78     A7 2A 02 FB | 	rdlong	local03, fp
1fb7c     0C 4E 85 F1 | 	sub	fp, #12
1fb80     15 29 12 F2 | 	cmp	local02, local03 wc
1fb84     01 26 66 36 |  if_ae	neg	local01, #1
1fb88     A7 26 62 FC | 	wrlong	local01, fp
1fb8c     10 01 90 FD | 	jmp	#LR__2493
1fb90                 | LR__2489
1fb90                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1fb90     08 4E 05 F1 | 	add	fp, #8
1fb94     A7 26 02 FB | 	rdlong	local01, fp
1fb98     08 4E 85 F1 | 	sub	fp, #8
1fb9c     2B 26 0E F2 | 	cmp	local01, #43 wz
1fba0     14 4E 05 A1 |  if_e	add	fp, #20
1fba4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fba8     14 4E 85 A1 |  if_e	sub	fp, #20
1fbac     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1fbb0     30 00 90 5D |  if_ne	jmp	#LR__2490
1fbb4     00 26 06 F6 | 	mov	local01, #0
1fbb8     A7 12 02 FB | 	rdlong	arg01, fp
1fbbc     D8 DD BE FD | 	call	#_convertstring
1fbc0     FD 12 02 F6 | 	mov	arg01, result1
1fbc4     0C 4E 05 F1 | 	add	fp, #12
1fbc8     A7 14 02 FB | 	rdlong	arg02, fp
1fbcc     0C 4E 85 F1 | 	sub	fp, #12
1fbd0     64 85 B0 FD | 	call	#__system___string_cmp
1fbd4     00 FA 55 F2 | 	cmps	result1, #0 wc
1fbd8     00 26 26 36 |  if_ae	not	local01, #0
1fbdc     A7 26 62 FC | 	wrlong	local01, fp
1fbe0     BC 00 90 FD | 	jmp	#LR__2493
1fbe4                 | LR__2490
1fbe4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1fbe4     08 4E 05 F1 | 	add	fp, #8
1fbe8     A7 26 02 FB | 	rdlong	local01, fp
1fbec     08 4E 85 F1 | 	sub	fp, #8
1fbf0     1F 26 0E F2 | 	cmp	local01, #31 wz
1fbf4     14 4E 05 A1 |  if_e	add	fp, #20
1fbf8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fbfc     14 4E 85 A1 |  if_e	sub	fp, #20
1fc00     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fc04     34 00 90 5D |  if_ne	jmp	#LR__2491
1fc08     00 26 06 F6 | 	mov	local01, #0
1fc0c     A7 28 02 FB | 	rdlong	local02, fp
1fc10     0C 4E 05 F1 | 	add	fp, #12
1fc14     A7 12 02 FB | 	rdlong	arg01, fp
1fc18     0C 4E 85 F1 | 	sub	fp, #12
1fc1c     78 DD BE FD | 	call	#_convertstring
1fc20     FD 14 02 F6 | 	mov	arg02, result1
1fc24     14 13 02 F6 | 	mov	arg01, local02
1fc28     0C 85 B0 FD | 	call	#__system___string_cmp
1fc2c     00 FA 55 F2 | 	cmps	result1, #0 wc
1fc30     00 26 26 36 |  if_ae	not	local01, #0
1fc34     A7 26 62 FC | 	wrlong	local01, fp
1fc38     64 00 90 FD | 	jmp	#LR__2493
1fc3c                 | LR__2491
1fc3c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1fc3c     08 4E 05 F1 | 	add	fp, #8
1fc40     A7 26 02 FB | 	rdlong	local01, fp
1fc44     08 4E 85 F1 | 	sub	fp, #8
1fc48     2B 26 0E F2 | 	cmp	local01, #43 wz
1fc4c     14 4E 05 A1 |  if_e	add	fp, #20
1fc50     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fc54     14 4E 85 A1 |  if_e	sub	fp, #20
1fc58     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fc5c     3C 00 90 5D |  if_ne	jmp	#LR__2492
1fc60     00 26 06 F6 | 	mov	local01, #0
1fc64     A7 12 02 FB | 	rdlong	arg01, fp
1fc68     2C DD BE FD | 	call	#_convertstring
1fc6c     FD 28 02 F6 | 	mov	local02, result1
1fc70     0C 4E 05 F1 | 	add	fp, #12
1fc74     A7 12 02 FB | 	rdlong	arg01, fp
1fc78     0C 4E 85 F1 | 	sub	fp, #12
1fc7c     18 DD BE FD | 	call	#_convertstring
1fc80     FD 14 02 F6 | 	mov	arg02, result1
1fc84     14 13 02 F6 | 	mov	arg01, local02
1fc88     AC 84 B0 FD | 	call	#__system___string_cmp
1fc8c     00 FA 55 F2 | 	cmps	result1, #0 wc
1fc90     00 26 26 36 |  if_ae	not	local01, #0
1fc94     A7 26 62 FC | 	wrlong	local01, fp
1fc98     04 00 90 FD | 	jmp	#LR__2493
1fc9c                 | LR__2492
1fc9c     A7 00 68 FC | 	wrlong	#0, fp
1fca0                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1fca0                 | LR__2493
1fca0     08 4E 05 F1 | 	add	fp, #8
1fca4     A7 38 68 FC | 	wrlong	#28, fp
1fca8     08 4E 85 F1 | 	sub	fp, #8
1fcac                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1fcac     A7 26 0A FB | 	rdlong	local01, fp wz
1fcb0     A7 02 68 5C |  if_ne	wrlong	#1, fp
1fcb4     A7 12 02 F6 | 	mov	arg01, fp
1fcb8     FC DB BE FD | 	call	#_push
1fcbc     A7 F0 03 F6 | 	mov	ptra, fp
1fcc0     B2 00 A0 FD | 	call	#popregs_
1fcc4                 | _do_ge_ret
1fcc4     2D 00 64 FD | 	ret
1fcc8                 | 
1fcc8                 | ' 
1fcc8                 | ' '--------------------------------- greater than (>)
1fcc8                 | ' 
1fcc8                 | ' sub do_gt
1fcc8                 | _do_gt
1fcc8     05 4A 05 F6 | 	mov	COUNT_, #5
1fccc     A8 00 A0 FD | 	call	#pushregs_
1fcd0     18 F0 07 F1 | 	add	ptra, #24
1fcd4     48 DB BE FD | 	call	#_pop
1fcd8     FD 26 02 F6 | 	mov	local01, result1
1fcdc     FE 28 02 F6 | 	mov	local02, result2
1fce0     FF 2A 02 F6 | 	mov	local03, result3
1fce4     0C 4E 05 F1 | 	add	fp, #12
1fce8     A7 26 62 FC | 	wrlong	local01, fp
1fcec     04 4E 05 F1 | 	add	fp, #4
1fcf0     A7 28 62 FC | 	wrlong	local02, fp
1fcf4     04 4E 05 F1 | 	add	fp, #4
1fcf8     A7 2A 62 FC | 	wrlong	local03, fp
1fcfc     14 4E 85 F1 | 	sub	fp, #20
1fd00     1C DB BE FD | 	call	#_pop
1fd04     FF 2A 02 F6 | 	mov	local03, result3
1fd08     A7 FA 61 FC | 	wrlong	result1, fp
1fd0c     04 4E 05 F1 | 	add	fp, #4
1fd10     A7 FC 61 FC | 	wrlong	result2, fp
1fd14     04 4E 05 F1 | 	add	fp, #4
1fd18     A7 2A 62 FC | 	wrlong	local03, fp
1fd1c                 | ' 
1fd1c                 | ' t2=pop()
1fd1c                 | ' t1=pop()
1fd1c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1fd1c     08 4E 85 F1 | 	sub	fp, #8
1fd20     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fd24     14 4E 05 A1 |  if_e	add	fp, #20
1fd28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd2c     14 4E 85 A1 |  if_e	sub	fp, #20
1fd30     16 2B 02 A6 |  if_e	mov	local03, local04
1fd34     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1fd38     28 00 90 5D |  if_ne	jmp	#LR__2500
1fd3c     00 26 06 F6 | 	mov	local01, #0
1fd40     A7 12 02 FB | 	rdlong	arg01, fp
1fd44     0C 4E 05 F1 | 	add	fp, #12
1fd48     A7 14 02 FB | 	rdlong	arg02, fp
1fd4c     0C 4E 85 F1 | 	sub	fp, #12
1fd50     E4 83 B0 FD | 	call	#__system___string_cmp
1fd54     01 FA 55 F2 | 	cmps	result1, #1 wc
1fd58     00 26 26 36 |  if_ae	not	local01, #0
1fd5c     A7 26 62 FC | 	wrlong	local01, fp
1fd60     20 04 90 FD | 	jmp	#LR__2513
1fd64                 | LR__2500
1fd64                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1fd64     08 4E 05 F1 | 	add	fp, #8
1fd68     A7 26 02 FB | 	rdlong	local01, fp
1fd6c     08 4E 85 F1 | 	sub	fp, #8
1fd70     1E 26 0E F2 | 	cmp	local01, #30 wz
1fd74     14 4E 05 A1 |  if_e	add	fp, #20
1fd78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd7c     14 4E 85 A1 |  if_e	sub	fp, #20
1fd80     16 2B 02 A6 |  if_e	mov	local03, local04
1fd84     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fd88     2C 00 90 5D |  if_ne	jmp	#LR__2501
1fd8c     00 26 06 F6 | 	mov	local01, #0
1fd90     A7 12 02 FB | 	rdlong	arg01, fp
1fd94     0C 4E 05 F1 | 	add	fp, #12
1fd98     A7 14 02 FB | 	rdlong	arg02, fp
1fd9c     0C 4E 85 F1 | 	sub	fp, #12
1fda0     01 16 66 F6 | 	neg	arg03, #1
1fda4     18 B6 B0 FD | 	call	#__system___float_cmp
1fda8     01 FA 55 F2 | 	cmps	result1, #1 wc
1fdac     00 26 26 36 |  if_ae	not	local01, #0
1fdb0     A7 26 62 FC | 	wrlong	local01, fp
1fdb4     CC 03 90 FD | 	jmp	#LR__2513
1fdb8                 | LR__2501
1fdb8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1fdb8     08 4E 05 F1 | 	add	fp, #8
1fdbc     A7 26 02 FB | 	rdlong	local01, fp
1fdc0     08 4E 85 F1 | 	sub	fp, #8
1fdc4     1E 26 0E F2 | 	cmp	local01, #30 wz
1fdc8     14 4E 05 A1 |  if_e	add	fp, #20
1fdcc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fdd0     14 4E 85 A1 |  if_e	sub	fp, #20
1fdd4     16 2B 02 A6 |  if_e	mov	local03, local04
1fdd8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fddc     48 00 90 5D |  if_ne	jmp	#LR__2502
1fde0     00 26 06 F6 | 	mov	local01, #0
1fde4     A7 28 02 FB | 	rdlong	local02, fp
1fde8     0C 4E 05 F1 | 	add	fp, #12
1fdec     A7 12 02 FB | 	rdlong	arg01, fp
1fdf0     0C 4E 85 F1 | 	sub	fp, #12
1fdf4     09 13 52 F6 | 	abs	arg01, arg01 wc
1fdf8     1F 2E C6 C9 |  if_b	decod	local05, #31
1fdfc     00 2E 06 36 |  if_ae	mov	local05, #0
1fe00     84 AD B0 FD | 	call	#__system___float_fromuns
1fe04     17 FB 61 F5 | 	xor	result1, local05
1fe08     FD 14 02 F6 | 	mov	arg02, result1
1fe0c     14 13 02 F6 | 	mov	arg01, local02
1fe10     01 16 66 F6 | 	neg	arg03, #1
1fe14     A8 B5 B0 FD | 	call	#__system___float_cmp
1fe18     01 FA 55 F2 | 	cmps	result1, #1 wc
1fe1c     00 26 26 36 |  if_ae	not	local01, #0
1fe20     A7 26 62 FC | 	wrlong	local01, fp
1fe24     5C 03 90 FD | 	jmp	#LR__2513
1fe28                 | LR__2502
1fe28                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1fe28     08 4E 05 F1 | 	add	fp, #8
1fe2c     A7 26 02 FB | 	rdlong	local01, fp
1fe30     08 4E 85 F1 | 	sub	fp, #8
1fe34     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe38     14 4E 05 A1 |  if_e	add	fp, #20
1fe3c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fe40     14 4E 85 A1 |  if_e	sub	fp, #20
1fe44     16 2B 02 A6 |  if_e	mov	local03, local04
1fe48     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fe4c     38 00 90 5D |  if_ne	jmp	#LR__2503
1fe50     00 26 06 F6 | 	mov	local01, #0
1fe54     A7 28 02 FB | 	rdlong	local02, fp
1fe58     0C 4E 05 F1 | 	add	fp, #12
1fe5c     A7 12 02 FB | 	rdlong	arg01, fp
1fe60     0C 4E 85 F1 | 	sub	fp, #12
1fe64     20 AD B0 FD | 	call	#__system___float_fromuns
1fe68     FD 14 02 F6 | 	mov	arg02, result1
1fe6c     14 13 02 F6 | 	mov	arg01, local02
1fe70     01 16 66 F6 | 	neg	arg03, #1
1fe74     48 B5 B0 FD | 	call	#__system___float_cmp
1fe78     01 FA 55 F2 | 	cmps	result1, #1 wc
1fe7c     00 26 26 36 |  if_ae	not	local01, #0
1fe80     A7 26 62 FC | 	wrlong	local01, fp
1fe84     FC 02 90 FD | 	jmp	#LR__2513
1fe88                 | LR__2503
1fe88                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1fe88     08 4E 05 F1 | 	add	fp, #8
1fe8c     A7 26 02 FB | 	rdlong	local01, fp
1fe90     08 4E 85 F1 | 	sub	fp, #8
1fe94     1C 26 0E F2 | 	cmp	local01, #28 wz
1fe98     14 4E 05 A1 |  if_e	add	fp, #20
1fe9c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fea0     14 4E 85 A1 |  if_e	sub	fp, #20
1fea4     16 2B 02 A6 |  if_e	mov	local03, local04
1fea8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1feac     44 00 90 5D |  if_ne	jmp	#LR__2504
1feb0     00 26 06 F6 | 	mov	local01, #0
1feb4     A7 12 02 FB | 	rdlong	arg01, fp
1feb8     09 13 52 F6 | 	abs	arg01, arg01 wc
1febc     1F 2E C6 C9 |  if_b	decod	local05, #31
1fec0     00 2E 06 36 |  if_ae	mov	local05, #0
1fec4     C0 AC B0 FD | 	call	#__system___float_fromuns
1fec8     17 FB 61 F5 | 	xor	result1, local05
1fecc     FD 12 02 F6 | 	mov	arg01, result1
1fed0     0C 4E 05 F1 | 	add	fp, #12
1fed4     A7 14 02 FB | 	rdlong	arg02, fp
1fed8     0C 4E 85 F1 | 	sub	fp, #12
1fedc     01 16 66 F6 | 	neg	arg03, #1
1fee0     DC B4 B0 FD | 	call	#__system___float_cmp
1fee4     01 FA 55 F2 | 	cmps	result1, #1 wc
1fee8     00 26 26 36 |  if_ae	not	local01, #0
1feec     A7 26 62 FC | 	wrlong	local01, fp
1fef0     90 02 90 FD | 	jmp	#LR__2513
1fef4                 | LR__2504
1fef4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1fef4     08 4E 05 F1 | 	add	fp, #8
1fef8     A7 26 02 FB | 	rdlong	local01, fp
1fefc     08 4E 85 F1 | 	sub	fp, #8
1ff00     1C 26 0E F2 | 	cmp	local01, #28 wz
1ff04     14 4E 05 A1 |  if_e	add	fp, #20
1ff08     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ff0c     14 4E 85 A1 |  if_e	sub	fp, #20
1ff10     16 2B 02 A6 |  if_e	mov	local03, local04
1ff14     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ff18     24 00 90 5D |  if_ne	jmp	#LR__2505
1ff1c     00 26 06 F6 | 	mov	local01, #0
1ff20     A7 28 02 FB | 	rdlong	local02, fp
1ff24     0C 4E 05 F1 | 	add	fp, #12
1ff28     A7 2A 02 FB | 	rdlong	local03, fp
1ff2c     0C 4E 85 F1 | 	sub	fp, #12
1ff30     15 29 5A F2 | 	cmps	local02, local03 wcz
1ff34     01 26 66 16 |  if_a	neg	local01, #1
1ff38     A7 26 62 FC | 	wrlong	local01, fp
1ff3c     44 02 90 FD | 	jmp	#LR__2513
1ff40                 | LR__2505
1ff40                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1ff40     08 4E 05 F1 | 	add	fp, #8
1ff44     A7 26 02 FB | 	rdlong	local01, fp
1ff48     08 4E 85 F1 | 	sub	fp, #8
1ff4c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ff50     14 4E 05 A1 |  if_e	add	fp, #20
1ff54     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ff58     14 4E 85 A1 |  if_e	sub	fp, #20
1ff5c     16 2B 02 A6 |  if_e	mov	local03, local04
1ff60     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ff64     24 00 90 5D |  if_ne	jmp	#LR__2506
1ff68     00 26 06 F6 | 	mov	local01, #0
1ff6c     A7 28 02 FB | 	rdlong	local02, fp
1ff70     0C 4E 05 F1 | 	add	fp, #12
1ff74     A7 2A 02 FB | 	rdlong	local03, fp
1ff78     0C 4E 85 F1 | 	sub	fp, #12
1ff7c     15 29 5A F2 | 	cmps	local02, local03 wcz
1ff80     01 26 66 16 |  if_a	neg	local01, #1
1ff84     A7 26 62 FC | 	wrlong	local01, fp
1ff88     F8 01 90 FD | 	jmp	#LR__2513
1ff8c                 | LR__2506
1ff8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1ff8c     08 4E 05 F1 | 	add	fp, #8
1ff90     A7 26 02 FB | 	rdlong	local01, fp
1ff94     08 4E 85 F1 | 	sub	fp, #8
1ff98     1D 26 0E F2 | 	cmp	local01, #29 wz
1ff9c     14 4E 05 A1 |  if_e	add	fp, #20
1ffa0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ffa4     14 4E 85 A1 |  if_e	sub	fp, #20
1ffa8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ffac     34 00 90 5D |  if_ne	jmp	#LR__2507
1ffb0     00 26 06 F6 | 	mov	local01, #0
1ffb4     A7 12 02 FB | 	rdlong	arg01, fp
1ffb8     CC AB B0 FD | 	call	#__system___float_fromuns
1ffbc     FD 12 02 F6 | 	mov	arg01, result1
1ffc0     0C 4E 05 F1 | 	add	fp, #12
1ffc4     A7 14 02 FB | 	rdlong	arg02, fp
1ffc8     0C 4E 85 F1 | 	sub	fp, #12
1ffcc     01 16 66 F6 | 	neg	arg03, #1
1ffd0     EC B3 B0 FD | 	call	#__system___float_cmp
1ffd4     01 FA 55 F2 | 	cmps	result1, #1 wc
1ffd8     00 26 26 36 |  if_ae	not	local01, #0
1ffdc     A7 26 62 FC | 	wrlong	local01, fp
1ffe0     A0 01 90 FD | 	jmp	#LR__2513
1ffe4                 | LR__2507
1ffe4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1ffe4     08 4E 05 F1 | 	add	fp, #8
1ffe8     A7 26 02 FB | 	rdlong	local01, fp
1ffec     08 4E 85 F1 | 	sub	fp, #8
1fff0     1D 26 0E F2 | 	cmp	local01, #29 wz
1fff4     14 4E 05 A1 |  if_e	add	fp, #20
1fff8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fffc     14 4E 85 A1 |  if_e	sub	fp, #20
20000     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20004     24 00 90 5D |  if_ne	jmp	#LR__2508
20008     00 26 06 F6 | 	mov	local01, #0
2000c     A7 28 02 FB | 	rdlong	local02, fp
20010     0C 4E 05 F1 | 	add	fp, #12
20014     A7 2A 02 FB | 	rdlong	local03, fp
20018     0C 4E 85 F1 | 	sub	fp, #12
2001c     15 29 5A F2 | 	cmps	local02, local03 wcz
20020     01 26 66 16 |  if_a	neg	local01, #1
20024     A7 26 62 FC | 	wrlong	local01, fp
20028     58 01 90 FD | 	jmp	#LR__2513
2002c                 | LR__2508
2002c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
2002c     08 4E 05 F1 | 	add	fp, #8
20030     A7 26 02 FB | 	rdlong	local01, fp
20034     08 4E 85 F1 | 	sub	fp, #8
20038     1D 26 0E F2 | 	cmp	local01, #29 wz
2003c     14 4E 05 A1 |  if_e	add	fp, #20
20040     A7 2A 02 AB |  if_e	rdlong	local03, fp
20044     14 4E 85 A1 |  if_e	sub	fp, #20
20048     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2004c     24 00 90 5D |  if_ne	jmp	#LR__2509
20050     00 26 06 F6 | 	mov	local01, #0
20054     A7 28 02 FB | 	rdlong	local02, fp
20058     0C 4E 05 F1 | 	add	fp, #12
2005c     A7 2A 02 FB | 	rdlong	local03, fp
20060     0C 4E 85 F1 | 	sub	fp, #12
20064     15 29 1A F2 | 	cmp	local02, local03 wcz
20068     01 26 66 16 |  if_a	neg	local01, #1
2006c     A7 26 62 FC | 	wrlong	local01, fp
20070     10 01 90 FD | 	jmp	#LR__2513
20074                 | LR__2509
20074                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
20074     08 4E 05 F1 | 	add	fp, #8
20078     A7 26 02 FB | 	rdlong	local01, fp
2007c     08 4E 85 F1 | 	sub	fp, #8
20080     2B 26 0E F2 | 	cmp	local01, #43 wz
20084     14 4E 05 A1 |  if_e	add	fp, #20
20088     A7 2A 02 AB |  if_e	rdlong	local03, fp
2008c     14 4E 85 A1 |  if_e	sub	fp, #20
20090     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20094     30 00 90 5D |  if_ne	jmp	#LR__2510
20098     00 26 06 F6 | 	mov	local01, #0
2009c     A7 12 02 FB | 	rdlong	arg01, fp
200a0     F4 D8 BE FD | 	call	#_convertstring
200a4     FD 12 02 F6 | 	mov	arg01, result1
200a8     0C 4E 05 F1 | 	add	fp, #12
200ac     A7 14 02 FB | 	rdlong	arg02, fp
200b0     0C 4E 85 F1 | 	sub	fp, #12
200b4     80 80 B0 FD | 	call	#__system___string_cmp
200b8     01 FA 55 F2 | 	cmps	result1, #1 wc
200bc     00 26 26 36 |  if_ae	not	local01, #0
200c0     A7 26 62 FC | 	wrlong	local01, fp
200c4     BC 00 90 FD | 	jmp	#LR__2513
200c8                 | LR__2510
200c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
200c8     08 4E 05 F1 | 	add	fp, #8
200cc     A7 26 02 FB | 	rdlong	local01, fp
200d0     08 4E 85 F1 | 	sub	fp, #8
200d4     1F 26 0E F2 | 	cmp	local01, #31 wz
200d8     14 4E 05 A1 |  if_e	add	fp, #20
200dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
200e0     14 4E 85 A1 |  if_e	sub	fp, #20
200e4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
200e8     34 00 90 5D |  if_ne	jmp	#LR__2511
200ec     00 26 06 F6 | 	mov	local01, #0
200f0     A7 28 02 FB | 	rdlong	local02, fp
200f4     0C 4E 05 F1 | 	add	fp, #12
200f8     A7 12 02 FB | 	rdlong	arg01, fp
200fc     0C 4E 85 F1 | 	sub	fp, #12
20100     94 D8 BE FD | 	call	#_convertstring
20104     FD 14 02 F6 | 	mov	arg02, result1
20108     14 13 02 F6 | 	mov	arg01, local02
2010c     28 80 B0 FD | 	call	#__system___string_cmp
20110     01 FA 55 F2 | 	cmps	result1, #1 wc
20114     00 26 26 36 |  if_ae	not	local01, #0
20118     A7 26 62 FC | 	wrlong	local01, fp
2011c     64 00 90 FD | 	jmp	#LR__2513
20120                 | LR__2511
20120                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
20120     08 4E 05 F1 | 	add	fp, #8
20124     A7 26 02 FB | 	rdlong	local01, fp
20128     08 4E 85 F1 | 	sub	fp, #8
2012c     2B 26 0E F2 | 	cmp	local01, #43 wz
20130     14 4E 05 A1 |  if_e	add	fp, #20
20134     A7 2A 02 AB |  if_e	rdlong	local03, fp
20138     14 4E 85 A1 |  if_e	sub	fp, #20
2013c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20140     3C 00 90 5D |  if_ne	jmp	#LR__2512
20144     00 26 06 F6 | 	mov	local01, #0
20148     A7 12 02 FB | 	rdlong	arg01, fp
2014c     48 D8 BE FD | 	call	#_convertstring
20150     FD 28 02 F6 | 	mov	local02, result1
20154     0C 4E 05 F1 | 	add	fp, #12
20158     A7 12 02 FB | 	rdlong	arg01, fp
2015c     0C 4E 85 F1 | 	sub	fp, #12
20160     34 D8 BE FD | 	call	#_convertstring
20164     FD 14 02 F6 | 	mov	arg02, result1
20168     14 13 02 F6 | 	mov	arg01, local02
2016c     C8 7F B0 FD | 	call	#__system___string_cmp
20170     01 FA 55 F2 | 	cmps	result1, #1 wc
20174     00 26 26 36 |  if_ae	not	local01, #0
20178     A7 26 62 FC | 	wrlong	local01, fp
2017c     04 00 90 FD | 	jmp	#LR__2513
20180                 | LR__2512
20180     A7 00 68 FC | 	wrlong	#0, fp
20184                 | LR__2513
20184     08 4E 05 F1 | 	add	fp, #8
20188     A7 38 68 FC | 	wrlong	#28, fp
2018c     08 4E 85 F1 | 	sub	fp, #8
20190                 | ' t1.result.uresult=0
20190                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20190     A7 26 0A FB | 	rdlong	local01, fp wz
20194     A7 02 68 5C |  if_ne	wrlong	#1, fp
20198     A7 12 02 F6 | 	mov	arg01, fp
2019c     18 D7 BE FD | 	call	#_push
201a0     A7 F0 03 F6 | 	mov	ptra, fp
201a4     B2 00 A0 FD | 	call	#popregs_
201a8                 | _do_gt_ret
201a8     2D 00 64 FD | 	ret
201ac                 | 
201ac                 | ' 
201ac                 | ' '--------------------------------- less or equal (<=)
201ac                 | ' 
201ac                 | ' sub do_le
201ac                 | _do_le
201ac     05 4A 05 F6 | 	mov	COUNT_, #5
201b0     A8 00 A0 FD | 	call	#pushregs_
201b4     18 F0 07 F1 | 	add	ptra, #24
201b8     64 D6 BE FD | 	call	#_pop
201bc     FD 26 02 F6 | 	mov	local01, result1
201c0     FE 28 02 F6 | 	mov	local02, result2
201c4     FF 2A 02 F6 | 	mov	local03, result3
201c8     0C 4E 05 F1 | 	add	fp, #12
201cc     A7 26 62 FC | 	wrlong	local01, fp
201d0     04 4E 05 F1 | 	add	fp, #4
201d4     A7 28 62 FC | 	wrlong	local02, fp
201d8     04 4E 05 F1 | 	add	fp, #4
201dc     A7 2A 62 FC | 	wrlong	local03, fp
201e0     14 4E 85 F1 | 	sub	fp, #20
201e4     38 D6 BE FD | 	call	#_pop
201e8     FF 2A 02 F6 | 	mov	local03, result3
201ec     A7 FA 61 FC | 	wrlong	result1, fp
201f0     04 4E 05 F1 | 	add	fp, #4
201f4     A7 FC 61 FC | 	wrlong	result2, fp
201f8     04 4E 05 F1 | 	add	fp, #4
201fc     A7 2A 62 FC | 	wrlong	local03, fp
20200                 | ' 
20200                 | ' t2=pop()
20200                 | ' t1=pop()
20200                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
20200     08 4E 85 F1 | 	sub	fp, #8
20204     1F 2A 0E F2 | 	cmp	local03, #31 wz
20208     14 4E 05 A1 |  if_e	add	fp, #20
2020c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20210     14 4E 85 A1 |  if_e	sub	fp, #20
20214     16 2B 02 A6 |  if_e	mov	local03, local04
20218     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
2021c     28 00 90 5D |  if_ne	jmp	#LR__2520
20220     00 26 06 F6 | 	mov	local01, #0
20224     A7 12 02 FB | 	rdlong	arg01, fp
20228     0C 4E 05 F1 | 	add	fp, #12
2022c     A7 14 02 FB | 	rdlong	arg02, fp
20230     0C 4E 85 F1 | 	sub	fp, #12
20234     00 7F B0 FD | 	call	#__system___string_cmp
20238     01 FA 55 F2 | 	cmps	result1, #1 wc
2023c     00 26 26 C6 |  if_b	not	local01, #0
20240     A7 26 62 FC | 	wrlong	local01, fp
20244     20 04 90 FD | 	jmp	#LR__2533
20248                 | LR__2520
20248                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
20248     08 4E 05 F1 | 	add	fp, #8
2024c     A7 26 02 FB | 	rdlong	local01, fp
20250     08 4E 85 F1 | 	sub	fp, #8
20254     1E 26 0E F2 | 	cmp	local01, #30 wz
20258     14 4E 05 A1 |  if_e	add	fp, #20
2025c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20260     14 4E 85 A1 |  if_e	sub	fp, #20
20264     16 2B 02 A6 |  if_e	mov	local03, local04
20268     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
2026c     2C 00 90 5D |  if_ne	jmp	#LR__2521
20270     00 26 06 F6 | 	mov	local01, #0
20274     A7 12 02 FB | 	rdlong	arg01, fp
20278     0C 4E 05 F1 | 	add	fp, #12
2027c     A7 14 02 FB | 	rdlong	arg02, fp
20280     0C 4E 85 F1 | 	sub	fp, #12
20284     01 16 06 F6 | 	mov	arg03, #1
20288     34 B1 B0 FD | 	call	#__system___float_cmp
2028c     01 FA 55 F2 | 	cmps	result1, #1 wc
20290     00 26 26 C6 |  if_b	not	local01, #0
20294     A7 26 62 FC | 	wrlong	local01, fp
20298     CC 03 90 FD | 	jmp	#LR__2533
2029c                 | LR__2521
2029c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
2029c     08 4E 05 F1 | 	add	fp, #8
202a0     A7 26 02 FB | 	rdlong	local01, fp
202a4     08 4E 85 F1 | 	sub	fp, #8
202a8     1E 26 0E F2 | 	cmp	local01, #30 wz
202ac     14 4E 05 A1 |  if_e	add	fp, #20
202b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
202b4     14 4E 85 A1 |  if_e	sub	fp, #20
202b8     16 2B 02 A6 |  if_e	mov	local03, local04
202bc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
202c0     48 00 90 5D |  if_ne	jmp	#LR__2522
202c4     00 26 06 F6 | 	mov	local01, #0
202c8     A7 28 02 FB | 	rdlong	local02, fp
202cc     0C 4E 05 F1 | 	add	fp, #12
202d0     A7 12 02 FB | 	rdlong	arg01, fp
202d4     0C 4E 85 F1 | 	sub	fp, #12
202d8     09 13 52 F6 | 	abs	arg01, arg01 wc
202dc     1F 2E C6 C9 |  if_b	decod	local05, #31
202e0     00 2E 06 36 |  if_ae	mov	local05, #0
202e4     A0 A8 B0 FD | 	call	#__system___float_fromuns
202e8     17 FB 61 F5 | 	xor	result1, local05
202ec     FD 14 02 F6 | 	mov	arg02, result1
202f0     14 13 02 F6 | 	mov	arg01, local02
202f4     01 16 06 F6 | 	mov	arg03, #1
202f8     C4 B0 B0 FD | 	call	#__system___float_cmp
202fc     01 FA 55 F2 | 	cmps	result1, #1 wc
20300     00 26 26 C6 |  if_b	not	local01, #0
20304     A7 26 62 FC | 	wrlong	local01, fp
20308     5C 03 90 FD | 	jmp	#LR__2533
2030c                 | LR__2522
2030c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
2030c     08 4E 05 F1 | 	add	fp, #8
20310     A7 26 02 FB | 	rdlong	local01, fp
20314     08 4E 85 F1 | 	sub	fp, #8
20318     1E 26 0E F2 | 	cmp	local01, #30 wz
2031c     14 4E 05 A1 |  if_e	add	fp, #20
20320     A7 2C 02 AB |  if_e	rdlong	local04, fp
20324     14 4E 85 A1 |  if_e	sub	fp, #20
20328     16 2B 02 A6 |  if_e	mov	local03, local04
2032c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20330     38 00 90 5D |  if_ne	jmp	#LR__2523
20334     00 26 06 F6 | 	mov	local01, #0
20338     A7 28 02 FB | 	rdlong	local02, fp
2033c     0C 4E 05 F1 | 	add	fp, #12
20340     A7 12 02 FB | 	rdlong	arg01, fp
20344     0C 4E 85 F1 | 	sub	fp, #12
20348     3C A8 B0 FD | 	call	#__system___float_fromuns
2034c     FD 14 02 F6 | 	mov	arg02, result1
20350     14 13 02 F6 | 	mov	arg01, local02
20354     01 16 06 F6 | 	mov	arg03, #1
20358     64 B0 B0 FD | 	call	#__system___float_cmp
2035c     01 FA 55 F2 | 	cmps	result1, #1 wc
20360     00 26 26 C6 |  if_b	not	local01, #0
20364     A7 26 62 FC | 	wrlong	local01, fp
20368     FC 02 90 FD | 	jmp	#LR__2533
2036c                 | LR__2523
2036c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
2036c     08 4E 05 F1 | 	add	fp, #8
20370     A7 26 02 FB | 	rdlong	local01, fp
20374     08 4E 85 F1 | 	sub	fp, #8
20378     1C 26 0E F2 | 	cmp	local01, #28 wz
2037c     14 4E 05 A1 |  if_e	add	fp, #20
20380     A7 2C 02 AB |  if_e	rdlong	local04, fp
20384     14 4E 85 A1 |  if_e	sub	fp, #20
20388     16 2B 02 A6 |  if_e	mov	local03, local04
2038c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20390     44 00 90 5D |  if_ne	jmp	#LR__2524
20394     00 26 06 F6 | 	mov	local01, #0
20398     A7 12 02 FB | 	rdlong	arg01, fp
2039c     09 13 52 F6 | 	abs	arg01, arg01 wc
203a0     1F 2E C6 C9 |  if_b	decod	local05, #31
203a4     00 2E 06 36 |  if_ae	mov	local05, #0
203a8     DC A7 B0 FD | 	call	#__system___float_fromuns
203ac     17 FB 61 F5 | 	xor	result1, local05
203b0     FD 12 02 F6 | 	mov	arg01, result1
203b4     0C 4E 05 F1 | 	add	fp, #12
203b8     A7 14 02 FB | 	rdlong	arg02, fp
203bc     0C 4E 85 F1 | 	sub	fp, #12
203c0     01 16 06 F6 | 	mov	arg03, #1
203c4     F8 AF B0 FD | 	call	#__system___float_cmp
203c8     01 FA 55 F2 | 	cmps	result1, #1 wc
203cc     00 26 26 C6 |  if_b	not	local01, #0
203d0     A7 26 62 FC | 	wrlong	local01, fp
203d4     90 02 90 FD | 	jmp	#LR__2533
203d8                 | LR__2524
203d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
203d8     08 4E 05 F1 | 	add	fp, #8
203dc     A7 26 02 FB | 	rdlong	local01, fp
203e0     08 4E 85 F1 | 	sub	fp, #8
203e4     1C 26 0E F2 | 	cmp	local01, #28 wz
203e8     14 4E 05 A1 |  if_e	add	fp, #20
203ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
203f0     14 4E 85 A1 |  if_e	sub	fp, #20
203f4     16 2B 02 A6 |  if_e	mov	local03, local04
203f8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
203fc     24 00 90 5D |  if_ne	jmp	#LR__2525
20400     00 26 06 F6 | 	mov	local01, #0
20404     A7 28 02 FB | 	rdlong	local02, fp
20408     0C 4E 05 F1 | 	add	fp, #12
2040c     A7 2A 02 FB | 	rdlong	local03, fp
20410     0C 4E 85 F1 | 	sub	fp, #12
20414     15 29 5A F2 | 	cmps	local02, local03 wcz
20418     01 26 66 E6 |  if_be	neg	local01, #1
2041c     A7 26 62 FC | 	wrlong	local01, fp
20420     44 02 90 FD | 	jmp	#LR__2533
20424                 | LR__2525
20424                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
20424     08 4E 05 F1 | 	add	fp, #8
20428     A7 26 02 FB | 	rdlong	local01, fp
2042c     08 4E 85 F1 | 	sub	fp, #8
20430     1C 26 0E F2 | 	cmp	local01, #28 wz
20434     14 4E 05 A1 |  if_e	add	fp, #20
20438     A7 2C 02 AB |  if_e	rdlong	local04, fp
2043c     14 4E 85 A1 |  if_e	sub	fp, #20
20440     16 2B 02 A6 |  if_e	mov	local03, local04
20444     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20448     24 00 90 5D |  if_ne	jmp	#LR__2526
2044c     00 26 06 F6 | 	mov	local01, #0
20450     A7 28 02 FB | 	rdlong	local02, fp
20454     0C 4E 05 F1 | 	add	fp, #12
20458     A7 2A 02 FB | 	rdlong	local03, fp
2045c     0C 4E 85 F1 | 	sub	fp, #12
20460     15 29 5A F2 | 	cmps	local02, local03 wcz
20464     01 26 66 E6 |  if_be	neg	local01, #1
20468     A7 26 62 FC | 	wrlong	local01, fp
2046c     F8 01 90 FD | 	jmp	#LR__2533
20470                 | LR__2526
20470                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
20470     08 4E 05 F1 | 	add	fp, #8
20474     A7 26 02 FB | 	rdlong	local01, fp
20478     08 4E 85 F1 | 	sub	fp, #8
2047c     1D 26 0E F2 | 	cmp	local01, #29 wz
20480     14 4E 05 A1 |  if_e	add	fp, #20
20484     A7 2C 02 AB |  if_e	rdlong	local04, fp
20488     14 4E 85 A1 |  if_e	sub	fp, #20
2048c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20490     34 00 90 5D |  if_ne	jmp	#LR__2527
20494     00 26 06 F6 | 	mov	local01, #0
20498     A7 12 02 FB | 	rdlong	arg01, fp
2049c     E8 A6 B0 FD | 	call	#__system___float_fromuns
204a0     FD 12 02 F6 | 	mov	arg01, result1
204a4     0C 4E 05 F1 | 	add	fp, #12
204a8     A7 14 02 FB | 	rdlong	arg02, fp
204ac     0C 4E 85 F1 | 	sub	fp, #12
204b0     01 16 06 F6 | 	mov	arg03, #1
204b4     08 AF B0 FD | 	call	#__system___float_cmp
204b8     01 FA 55 F2 | 	cmps	result1, #1 wc
204bc     00 26 26 C6 |  if_b	not	local01, #0
204c0     A7 26 62 FC | 	wrlong	local01, fp
204c4     A0 01 90 FD | 	jmp	#LR__2533
204c8                 | LR__2527
204c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
204c8     08 4E 05 F1 | 	add	fp, #8
204cc     A7 26 02 FB | 	rdlong	local01, fp
204d0     08 4E 85 F1 | 	sub	fp, #8
204d4     1D 26 0E F2 | 	cmp	local01, #29 wz
204d8     14 4E 05 A1 |  if_e	add	fp, #20
204dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
204e0     14 4E 85 A1 |  if_e	sub	fp, #20
204e4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
204e8     24 00 90 5D |  if_ne	jmp	#LR__2528
204ec     00 26 06 F6 | 	mov	local01, #0
204f0     A7 28 02 FB | 	rdlong	local02, fp
204f4     0C 4E 05 F1 | 	add	fp, #12
204f8     A7 2A 02 FB | 	rdlong	local03, fp
204fc     0C 4E 85 F1 | 	sub	fp, #12
20500     15 29 5A F2 | 	cmps	local02, local03 wcz
20504     01 26 66 E6 |  if_be	neg	local01, #1
20508     A7 26 62 FC | 	wrlong	local01, fp
2050c     58 01 90 FD | 	jmp	#LR__2533
20510                 | LR__2528
20510                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
20510     08 4E 05 F1 | 	add	fp, #8
20514     A7 26 02 FB | 	rdlong	local01, fp
20518     08 4E 85 F1 | 	sub	fp, #8
2051c     1D 26 0E F2 | 	cmp	local01, #29 wz
20520     14 4E 05 A1 |  if_e	add	fp, #20
20524     A7 2A 02 AB |  if_e	rdlong	local03, fp
20528     14 4E 85 A1 |  if_e	sub	fp, #20
2052c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20530     24 00 90 5D |  if_ne	jmp	#LR__2529
20534     00 26 06 F6 | 	mov	local01, #0
20538     A7 28 02 FB | 	rdlong	local02, fp
2053c     0C 4E 05 F1 | 	add	fp, #12
20540     A7 2A 02 FB | 	rdlong	local03, fp
20544     0C 4E 85 F1 | 	sub	fp, #12
20548     15 29 1A F2 | 	cmp	local02, local03 wcz
2054c     01 26 66 E6 |  if_be	neg	local01, #1
20550     A7 26 62 FC | 	wrlong	local01, fp
20554     10 01 90 FD | 	jmp	#LR__2533
20558                 | LR__2529
20558                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
20558     08 4E 05 F1 | 	add	fp, #8
2055c     A7 26 02 FB | 	rdlong	local01, fp
20560     08 4E 85 F1 | 	sub	fp, #8
20564     2B 26 0E F2 | 	cmp	local01, #43 wz
20568     14 4E 05 A1 |  if_e	add	fp, #20
2056c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20570     14 4E 85 A1 |  if_e	sub	fp, #20
20574     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20578     30 00 90 5D |  if_ne	jmp	#LR__2530
2057c     00 26 06 F6 | 	mov	local01, #0
20580     A7 12 02 FB | 	rdlong	arg01, fp
20584     10 D4 BE FD | 	call	#_convertstring
20588     FD 12 02 F6 | 	mov	arg01, result1
2058c     0C 4E 05 F1 | 	add	fp, #12
20590     A7 14 02 FB | 	rdlong	arg02, fp
20594     0C 4E 85 F1 | 	sub	fp, #12
20598     9C 7B B0 FD | 	call	#__system___string_cmp
2059c     01 FA 55 F2 | 	cmps	result1, #1 wc
205a0     00 26 26 C6 |  if_b	not	local01, #0
205a4     A7 26 62 FC | 	wrlong	local01, fp
205a8     BC 00 90 FD | 	jmp	#LR__2533
205ac                 | LR__2530
205ac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
205ac     08 4E 05 F1 | 	add	fp, #8
205b0     A7 26 02 FB | 	rdlong	local01, fp
205b4     08 4E 85 F1 | 	sub	fp, #8
205b8     1F 26 0E F2 | 	cmp	local01, #31 wz
205bc     14 4E 05 A1 |  if_e	add	fp, #20
205c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
205c4     14 4E 85 A1 |  if_e	sub	fp, #20
205c8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
205cc     34 00 90 5D |  if_ne	jmp	#LR__2531
205d0     00 26 06 F6 | 	mov	local01, #0
205d4     A7 28 02 FB | 	rdlong	local02, fp
205d8     0C 4E 05 F1 | 	add	fp, #12
205dc     A7 12 02 FB | 	rdlong	arg01, fp
205e0     0C 4E 85 F1 | 	sub	fp, #12
205e4     B0 D3 BE FD | 	call	#_convertstring
205e8     FD 14 02 F6 | 	mov	arg02, result1
205ec     14 13 02 F6 | 	mov	arg01, local02
205f0     44 7B B0 FD | 	call	#__system___string_cmp
205f4     01 FA 55 F2 | 	cmps	result1, #1 wc
205f8     00 26 26 C6 |  if_b	not	local01, #0
205fc     A7 26 62 FC | 	wrlong	local01, fp
20600     64 00 90 FD | 	jmp	#LR__2533
20604                 | LR__2531
20604                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
20604     08 4E 05 F1 | 	add	fp, #8
20608     A7 26 02 FB | 	rdlong	local01, fp
2060c     08 4E 85 F1 | 	sub	fp, #8
20610     2B 26 0E F2 | 	cmp	local01, #43 wz
20614     14 4E 05 A1 |  if_e	add	fp, #20
20618     A7 2A 02 AB |  if_e	rdlong	local03, fp
2061c     14 4E 85 A1 |  if_e	sub	fp, #20
20620     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20624     3C 00 90 5D |  if_ne	jmp	#LR__2532
20628     00 26 06 F6 | 	mov	local01, #0
2062c     A7 12 02 FB | 	rdlong	arg01, fp
20630     64 D3 BE FD | 	call	#_convertstring
20634     FD 28 02 F6 | 	mov	local02, result1
20638     0C 4E 05 F1 | 	add	fp, #12
2063c     A7 12 02 FB | 	rdlong	arg01, fp
20640     0C 4E 85 F1 | 	sub	fp, #12
20644     50 D3 BE FD | 	call	#_convertstring
20648     FD 14 02 F6 | 	mov	arg02, result1
2064c     14 13 02 F6 | 	mov	arg01, local02
20650     E4 7A B0 FD | 	call	#__system___string_cmp
20654     01 FA 55 F2 | 	cmps	result1, #1 wc
20658     00 26 26 C6 |  if_b	not	local01, #0
2065c     A7 26 62 FC | 	wrlong	local01, fp
20660     04 00 90 FD | 	jmp	#LR__2533
20664                 | LR__2532
20664     A7 00 68 FC | 	wrlong	#0, fp
20668                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20668                 | LR__2533
20668     08 4E 05 F1 | 	add	fp, #8
2066c     A7 38 68 FC | 	wrlong	#28, fp
20670     08 4E 85 F1 | 	sub	fp, #8
20674     A7 12 02 F6 | 	mov	arg01, fp
20678     3C D2 BE FD | 	call	#_push
2067c     A7 F0 03 F6 | 	mov	ptra, fp
20680     B2 00 A0 FD | 	call	#popregs_
20684                 | _do_le_ret
20684     2D 00 64 FD | 	ret
20688                 | 
20688                 | ' 
20688                 | ' '--------------------------------- less than (<)
20688                 | ' 
20688                 | ' sub do_lt
20688                 | _do_lt
20688     05 4A 05 F6 | 	mov	COUNT_, #5
2068c     A8 00 A0 FD | 	call	#pushregs_
20690     18 F0 07 F1 | 	add	ptra, #24
20694     88 D1 BE FD | 	call	#_pop
20698     FD 26 02 F6 | 	mov	local01, result1
2069c     FE 28 02 F6 | 	mov	local02, result2
206a0     FF 2A 02 F6 | 	mov	local03, result3
206a4     0C 4E 05 F1 | 	add	fp, #12
206a8     A7 26 62 FC | 	wrlong	local01, fp
206ac     04 4E 05 F1 | 	add	fp, #4
206b0     A7 28 62 FC | 	wrlong	local02, fp
206b4     04 4E 05 F1 | 	add	fp, #4
206b8     A7 2A 62 FC | 	wrlong	local03, fp
206bc     14 4E 85 F1 | 	sub	fp, #20
206c0     5C D1 BE FD | 	call	#_pop
206c4     FF 2A 02 F6 | 	mov	local03, result3
206c8     A7 FA 61 FC | 	wrlong	result1, fp
206cc     04 4E 05 F1 | 	add	fp, #4
206d0     A7 FC 61 FC | 	wrlong	result2, fp
206d4     04 4E 05 F1 | 	add	fp, #4
206d8     A7 2A 62 FC | 	wrlong	local03, fp
206dc                 | ' 
206dc                 | ' t2=pop()
206dc                 | ' t1=pop()
206dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
206dc     08 4E 85 F1 | 	sub	fp, #8
206e0     1F 2A 0E F2 | 	cmp	local03, #31 wz
206e4     14 4E 05 A1 |  if_e	add	fp, #20
206e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
206ec     14 4E 85 A1 |  if_e	sub	fp, #20
206f0     16 2B 02 A6 |  if_e	mov	local03, local04
206f4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
206f8     28 00 90 5D |  if_ne	jmp	#LR__2540
206fc     00 26 06 F6 | 	mov	local01, #0
20700     A7 12 02 FB | 	rdlong	arg01, fp
20704     0C 4E 05 F1 | 	add	fp, #12
20708     A7 14 02 FB | 	rdlong	arg02, fp
2070c     0C 4E 85 F1 | 	sub	fp, #12
20710     24 7A B0 FD | 	call	#__system___string_cmp
20714     00 FA 55 F2 | 	cmps	result1, #0 wc
20718     00 26 26 C6 |  if_b	not	local01, #0
2071c     A7 26 62 FC | 	wrlong	local01, fp
20720     10 04 90 FD | 	jmp	#LR__2553
20724                 | LR__2540
20724                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
20724     08 4E 05 F1 | 	add	fp, #8
20728     A7 26 02 FB | 	rdlong	local01, fp
2072c     08 4E 85 F1 | 	sub	fp, #8
20730     1E 26 0E F2 | 	cmp	local01, #30 wz
20734     14 4E 05 A1 |  if_e	add	fp, #20
20738     A7 2C 02 AB |  if_e	rdlong	local04, fp
2073c     14 4E 85 A1 |  if_e	sub	fp, #20
20740     16 2B 02 A6 |  if_e	mov	local03, local04
20744     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20748     2C 00 90 5D |  if_ne	jmp	#LR__2541
2074c     00 26 06 F6 | 	mov	local01, #0
20750     A7 12 02 FB | 	rdlong	arg01, fp
20754     0C 4E 05 F1 | 	add	fp, #12
20758     A7 14 02 FB | 	rdlong	arg02, fp
2075c     0C 4E 85 F1 | 	sub	fp, #12
20760     01 16 06 F6 | 	mov	arg03, #1
20764     58 AC B0 FD | 	call	#__system___float_cmp
20768     00 FA 55 F2 | 	cmps	result1, #0 wc
2076c     00 26 26 C6 |  if_b	not	local01, #0
20770     A7 26 62 FC | 	wrlong	local01, fp
20774     BC 03 90 FD | 	jmp	#LR__2553
20778                 | LR__2541
20778                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
20778     08 4E 05 F1 | 	add	fp, #8
2077c     A7 26 02 FB | 	rdlong	local01, fp
20780     08 4E 85 F1 | 	sub	fp, #8
20784     1E 26 0E F2 | 	cmp	local01, #30 wz
20788     14 4E 05 A1 |  if_e	add	fp, #20
2078c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20790     14 4E 85 A1 |  if_e	sub	fp, #20
20794     16 2B 02 A6 |  if_e	mov	local03, local04
20798     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2079c     48 00 90 5D |  if_ne	jmp	#LR__2542
207a0     00 26 06 F6 | 	mov	local01, #0
207a4     A7 28 02 FB | 	rdlong	local02, fp
207a8     0C 4E 05 F1 | 	add	fp, #12
207ac     A7 12 02 FB | 	rdlong	arg01, fp
207b0     0C 4E 85 F1 | 	sub	fp, #12
207b4     09 13 52 F6 | 	abs	arg01, arg01 wc
207b8     1F 2E C6 C9 |  if_b	decod	local05, #31
207bc     00 2E 06 36 |  if_ae	mov	local05, #0
207c0     C4 A3 B0 FD | 	call	#__system___float_fromuns
207c4     17 FB 61 F5 | 	xor	result1, local05
207c8     FD 14 02 F6 | 	mov	arg02, result1
207cc     14 13 02 F6 | 	mov	arg01, local02
207d0     01 16 06 F6 | 	mov	arg03, #1
207d4     E8 AB B0 FD | 	call	#__system___float_cmp
207d8     00 FA 55 F2 | 	cmps	result1, #0 wc
207dc     00 26 26 C6 |  if_b	not	local01, #0
207e0     A7 26 62 FC | 	wrlong	local01, fp
207e4     4C 03 90 FD | 	jmp	#LR__2553
207e8                 | LR__2542
207e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
207e8     08 4E 05 F1 | 	add	fp, #8
207ec     A7 26 02 FB | 	rdlong	local01, fp
207f0     08 4E 85 F1 | 	sub	fp, #8
207f4     1E 26 0E F2 | 	cmp	local01, #30 wz
207f8     14 4E 05 A1 |  if_e	add	fp, #20
207fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
20800     14 4E 85 A1 |  if_e	sub	fp, #20
20804     16 2B 02 A6 |  if_e	mov	local03, local04
20808     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2080c     38 00 90 5D |  if_ne	jmp	#LR__2543
20810     00 26 06 F6 | 	mov	local01, #0
20814     A7 28 02 FB | 	rdlong	local02, fp
20818     0C 4E 05 F1 | 	add	fp, #12
2081c     A7 12 02 FB | 	rdlong	arg01, fp
20820     0C 4E 85 F1 | 	sub	fp, #12
20824     60 A3 B0 FD | 	call	#__system___float_fromuns
20828     FD 14 02 F6 | 	mov	arg02, result1
2082c     14 13 02 F6 | 	mov	arg01, local02
20830     01 16 06 F6 | 	mov	arg03, #1
20834     88 AB B0 FD | 	call	#__system___float_cmp
20838     00 FA 55 F2 | 	cmps	result1, #0 wc
2083c     00 26 26 C6 |  if_b	not	local01, #0
20840     A7 26 62 FC | 	wrlong	local01, fp
20844     EC 02 90 FD | 	jmp	#LR__2553
20848                 | LR__2543
20848                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
20848     08 4E 05 F1 | 	add	fp, #8
2084c     A7 26 02 FB | 	rdlong	local01, fp
20850     08 4E 85 F1 | 	sub	fp, #8
20854     1C 26 0E F2 | 	cmp	local01, #28 wz
20858     14 4E 05 A1 |  if_e	add	fp, #20
2085c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20860     14 4E 85 A1 |  if_e	sub	fp, #20
20864     16 2B 02 A6 |  if_e	mov	local03, local04
20868     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
2086c     44 00 90 5D |  if_ne	jmp	#LR__2544
20870     00 26 06 F6 | 	mov	local01, #0
20874     A7 12 02 FB | 	rdlong	arg01, fp
20878     09 13 52 F6 | 	abs	arg01, arg01 wc
2087c     1F 2E C6 C9 |  if_b	decod	local05, #31
20880     00 2E 06 36 |  if_ae	mov	local05, #0
20884     00 A3 B0 FD | 	call	#__system___float_fromuns
20888     17 FB 61 F5 | 	xor	result1, local05
2088c     FD 12 02 F6 | 	mov	arg01, result1
20890     0C 4E 05 F1 | 	add	fp, #12
20894     A7 14 02 FB | 	rdlong	arg02, fp
20898     0C 4E 85 F1 | 	sub	fp, #12
2089c     01 16 06 F6 | 	mov	arg03, #1
208a0     1C AB B0 FD | 	call	#__system___float_cmp
208a4     00 FA 55 F2 | 	cmps	result1, #0 wc
208a8     00 26 26 C6 |  if_b	not	local01, #0
208ac     A7 26 62 FC | 	wrlong	local01, fp
208b0     80 02 90 FD | 	jmp	#LR__2553
208b4                 | LR__2544
208b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
208b4     08 4E 05 F1 | 	add	fp, #8
208b8     A7 26 02 FB | 	rdlong	local01, fp
208bc     08 4E 85 F1 | 	sub	fp, #8
208c0     1C 26 0E F2 | 	cmp	local01, #28 wz
208c4     14 4E 05 A1 |  if_e	add	fp, #20
208c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
208cc     14 4E 85 A1 |  if_e	sub	fp, #20
208d0     16 2B 02 A6 |  if_e	mov	local03, local04
208d4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
208d8     20 00 90 5D |  if_ne	jmp	#LR__2545
208dc     A7 28 02 FB | 	rdlong	local02, fp
208e0     0C 4E 05 F1 | 	add	fp, #12
208e4     A7 2A 02 FB | 	rdlong	local03, fp
208e8     0C 4E 85 F1 | 	sub	fp, #12
208ec     15 29 52 F2 | 	cmps	local02, local03 wc
208f0     13 27 A2 F1 | 	subx	local01, local01
208f4     A7 26 62 FC | 	wrlong	local01, fp
208f8     38 02 90 FD | 	jmp	#LR__2553
208fc                 | LR__2545
208fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
208fc     08 4E 05 F1 | 	add	fp, #8
20900     A7 26 02 FB | 	rdlong	local01, fp
20904     08 4E 85 F1 | 	sub	fp, #8
20908     1C 26 0E F2 | 	cmp	local01, #28 wz
2090c     14 4E 05 A1 |  if_e	add	fp, #20
20910     A7 2C 02 AB |  if_e	rdlong	local04, fp
20914     14 4E 85 A1 |  if_e	sub	fp, #20
20918     16 2B 02 A6 |  if_e	mov	local03, local04
2091c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20920     20 00 90 5D |  if_ne	jmp	#LR__2546
20924     A7 28 02 FB | 	rdlong	local02, fp
20928     0C 4E 05 F1 | 	add	fp, #12
2092c     A7 2A 02 FB | 	rdlong	local03, fp
20930     0C 4E 85 F1 | 	sub	fp, #12
20934     15 29 52 F2 | 	cmps	local02, local03 wc
20938     13 27 A2 F1 | 	subx	local01, local01
2093c     A7 26 62 FC | 	wrlong	local01, fp
20940     F0 01 90 FD | 	jmp	#LR__2553
20944                 | LR__2546
20944                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
20944     08 4E 05 F1 | 	add	fp, #8
20948     A7 26 02 FB | 	rdlong	local01, fp
2094c     08 4E 85 F1 | 	sub	fp, #8
20950     1D 26 0E F2 | 	cmp	local01, #29 wz
20954     14 4E 05 A1 |  if_e	add	fp, #20
20958     A7 2C 02 AB |  if_e	rdlong	local04, fp
2095c     14 4E 85 A1 |  if_e	sub	fp, #20
20960     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20964     34 00 90 5D |  if_ne	jmp	#LR__2547
20968     00 26 06 F6 | 	mov	local01, #0
2096c     A7 12 02 FB | 	rdlong	arg01, fp
20970     14 A2 B0 FD | 	call	#__system___float_fromuns
20974     FD 12 02 F6 | 	mov	arg01, result1
20978     0C 4E 05 F1 | 	add	fp, #12
2097c     A7 14 02 FB | 	rdlong	arg02, fp
20980     0C 4E 85 F1 | 	sub	fp, #12
20984     01 16 06 F6 | 	mov	arg03, #1
20988     34 AA B0 FD | 	call	#__system___float_cmp
2098c     00 FA 55 F2 | 	cmps	result1, #0 wc
20990     00 26 26 C6 |  if_b	not	local01, #0
20994     A7 26 62 FC | 	wrlong	local01, fp
20998     98 01 90 FD | 	jmp	#LR__2553
2099c                 | LR__2547
2099c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
2099c     08 4E 05 F1 | 	add	fp, #8
209a0     A7 26 02 FB | 	rdlong	local01, fp
209a4     08 4E 85 F1 | 	sub	fp, #8
209a8     1D 26 0E F2 | 	cmp	local01, #29 wz
209ac     14 4E 05 A1 |  if_e	add	fp, #20
209b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
209b4     14 4E 85 A1 |  if_e	sub	fp, #20
209b8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
209bc     20 00 90 5D |  if_ne	jmp	#LR__2548
209c0     A7 28 02 FB | 	rdlong	local02, fp
209c4     0C 4E 05 F1 | 	add	fp, #12
209c8     A7 2A 02 FB | 	rdlong	local03, fp
209cc     0C 4E 85 F1 | 	sub	fp, #12
209d0     15 29 52 F2 | 	cmps	local02, local03 wc
209d4     13 27 A2 F1 | 	subx	local01, local01
209d8     A7 26 62 FC | 	wrlong	local01, fp
209dc     54 01 90 FD | 	jmp	#LR__2553
209e0                 | LR__2548
209e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
209e0     08 4E 05 F1 | 	add	fp, #8
209e4     A7 26 02 FB | 	rdlong	local01, fp
209e8     08 4E 85 F1 | 	sub	fp, #8
209ec     1D 26 0E F2 | 	cmp	local01, #29 wz
209f0     14 4E 05 A1 |  if_e	add	fp, #20
209f4     A7 2A 02 AB |  if_e	rdlong	local03, fp
209f8     14 4E 85 A1 |  if_e	sub	fp, #20
209fc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20a00     20 00 90 5D |  if_ne	jmp	#LR__2549
20a04     A7 28 02 FB | 	rdlong	local02, fp
20a08     0C 4E 05 F1 | 	add	fp, #12
20a0c     A7 2A 02 FB | 	rdlong	local03, fp
20a10     0C 4E 85 F1 | 	sub	fp, #12
20a14     15 29 12 F2 | 	cmp	local02, local03 wc
20a18     13 27 A2 F1 | 	subx	local01, local01
20a1c     A7 26 62 FC | 	wrlong	local01, fp
20a20     10 01 90 FD | 	jmp	#LR__2553
20a24                 | LR__2549
20a24                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
20a24     08 4E 05 F1 | 	add	fp, #8
20a28     A7 26 02 FB | 	rdlong	local01, fp
20a2c     08 4E 85 F1 | 	sub	fp, #8
20a30     2B 26 0E F2 | 	cmp	local01, #43 wz
20a34     14 4E 05 A1 |  if_e	add	fp, #20
20a38     A7 2A 02 AB |  if_e	rdlong	local03, fp
20a3c     14 4E 85 A1 |  if_e	sub	fp, #20
20a40     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20a44     30 00 90 5D |  if_ne	jmp	#LR__2550
20a48     00 26 06 F6 | 	mov	local01, #0
20a4c     A7 12 02 FB | 	rdlong	arg01, fp
20a50     44 CF BE FD | 	call	#_convertstring
20a54     FD 12 02 F6 | 	mov	arg01, result1
20a58     0C 4E 05 F1 | 	add	fp, #12
20a5c     A7 14 02 FB | 	rdlong	arg02, fp
20a60     0C 4E 85 F1 | 	sub	fp, #12
20a64     D0 76 B0 FD | 	call	#__system___string_cmp
20a68     00 FA 55 F2 | 	cmps	result1, #0 wc
20a6c     00 26 26 C6 |  if_b	not	local01, #0
20a70     A7 26 62 FC | 	wrlong	local01, fp
20a74     BC 00 90 FD | 	jmp	#LR__2553
20a78                 | LR__2550
20a78                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
20a78     08 4E 05 F1 | 	add	fp, #8
20a7c     A7 26 02 FB | 	rdlong	local01, fp
20a80     08 4E 85 F1 | 	sub	fp, #8
20a84     1F 26 0E F2 | 	cmp	local01, #31 wz
20a88     14 4E 05 A1 |  if_e	add	fp, #20
20a8c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20a90     14 4E 85 A1 |  if_e	sub	fp, #20
20a94     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20a98     34 00 90 5D |  if_ne	jmp	#LR__2551
20a9c     00 26 06 F6 | 	mov	local01, #0
20aa0     A7 28 02 FB | 	rdlong	local02, fp
20aa4     0C 4E 05 F1 | 	add	fp, #12
20aa8     A7 12 02 FB | 	rdlong	arg01, fp
20aac     0C 4E 85 F1 | 	sub	fp, #12
20ab0     E4 CE BE FD | 	call	#_convertstring
20ab4     FD 14 02 F6 | 	mov	arg02, result1
20ab8     14 13 02 F6 | 	mov	arg01, local02
20abc     78 76 B0 FD | 	call	#__system___string_cmp
20ac0     00 FA 55 F2 | 	cmps	result1, #0 wc
20ac4     00 26 26 C6 |  if_b	not	local01, #0
20ac8     A7 26 62 FC | 	wrlong	local01, fp
20acc     64 00 90 FD | 	jmp	#LR__2553
20ad0                 | LR__2551
20ad0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
20ad0     08 4E 05 F1 | 	add	fp, #8
20ad4     A7 26 02 FB | 	rdlong	local01, fp
20ad8     08 4E 85 F1 | 	sub	fp, #8
20adc     2B 26 0E F2 | 	cmp	local01, #43 wz
20ae0     14 4E 05 A1 |  if_e	add	fp, #20
20ae4     A7 2A 02 AB |  if_e	rdlong	local03, fp
20ae8     14 4E 85 A1 |  if_e	sub	fp, #20
20aec     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20af0     3C 00 90 5D |  if_ne	jmp	#LR__2552
20af4     00 26 06 F6 | 	mov	local01, #0
20af8     A7 12 02 FB | 	rdlong	arg01, fp
20afc     98 CE BE FD | 	call	#_convertstring
20b00     FD 28 02 F6 | 	mov	local02, result1
20b04     0C 4E 05 F1 | 	add	fp, #12
20b08     A7 12 02 FB | 	rdlong	arg01, fp
20b0c     0C 4E 85 F1 | 	sub	fp, #12
20b10     84 CE BE FD | 	call	#_convertstring
20b14     FD 14 02 F6 | 	mov	arg02, result1
20b18     14 13 02 F6 | 	mov	arg01, local02
20b1c     18 76 B0 FD | 	call	#__system___string_cmp
20b20     00 FA 55 F2 | 	cmps	result1, #0 wc
20b24     00 26 26 C6 |  if_b	not	local01, #0
20b28     A7 26 62 FC | 	wrlong	local01, fp
20b2c     04 00 90 FD | 	jmp	#LR__2553
20b30                 | LR__2552
20b30     A7 00 68 FC | 	wrlong	#0, fp
20b34                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20b34                 | LR__2553
20b34     08 4E 05 F1 | 	add	fp, #8
20b38     A7 38 68 FC | 	wrlong	#28, fp
20b3c     08 4E 85 F1 | 	sub	fp, #8
20b40     A7 12 02 F6 | 	mov	arg01, fp
20b44     70 CD BE FD | 	call	#_push
20b48     A7 F0 03 F6 | 	mov	ptra, fp
20b4c     B2 00 A0 FD | 	call	#popregs_
20b50                 | _do_lt_ret
20b50     2D 00 64 FD | 	ret
20b54                 | 
20b54                 | ' 
20b54                 | ' '--------------------------------- minus (-)
20b54                 | ' 
20b54                 | ' sub do_minus
20b54                 | _do_minus
20b54     05 4A 05 F6 | 	mov	COUNT_, #5
20b58     A8 00 A0 FD | 	call	#pushregs_
20b5c     18 F0 07 F1 | 	add	ptra, #24
20b60     BC CC BE FD | 	call	#_pop
20b64     FD 26 02 F6 | 	mov	local01, result1
20b68     FE 28 02 F6 | 	mov	local02, result2
20b6c     FF 2A 02 F6 | 	mov	local03, result3
20b70     0C 4E 05 F1 | 	add	fp, #12
20b74     A7 26 62 FC | 	wrlong	local01, fp
20b78     04 4E 05 F1 | 	add	fp, #4
20b7c     A7 28 62 FC | 	wrlong	local02, fp
20b80     04 4E 05 F1 | 	add	fp, #4
20b84     A7 2A 62 FC | 	wrlong	local03, fp
20b88     14 4E 85 F1 | 	sub	fp, #20
20b8c     90 CC BE FD | 	call	#_pop
20b90     FF 2A 02 F6 | 	mov	local03, result3
20b94     A7 FA 61 FC | 	wrlong	result1, fp
20b98     04 4E 05 F1 | 	add	fp, #4
20b9c     A7 FC 61 FC | 	wrlong	result2, fp
20ba0     04 4E 05 F1 | 	add	fp, #4
20ba4     A7 2A 62 FC | 	wrlong	local03, fp
20ba8                 | ' 
20ba8                 | ' t2=pop()
20ba8                 | ' t1=pop()
20ba8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
20ba8     08 4E 85 F1 | 	sub	fp, #8
20bac     1D 2A 0E F2 | 	cmp	local03, #29 wz
20bb0     14 4E 05 A1 |  if_e	add	fp, #20
20bb4     A7 2C 02 AB |  if_e	rdlong	local04, fp
20bb8     14 4E 85 A1 |  if_e	sub	fp, #20
20bbc     16 2B 02 A6 |  if_e	mov	local03, local04
20bc0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20bc4     5C 00 90 5D |  if_ne	jmp	#LR__2561
20bc8                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
20bc8     0C 4E 05 F1 | 	add	fp, #12
20bcc     A7 26 02 FB | 	rdlong	local01, fp
20bd0     0C 4E 85 F1 | 	sub	fp, #12
20bd4     A7 2A 02 FB | 	rdlong	local03, fp
20bd8     15 27 12 F2 | 	cmp	local01, local03 wc
20bdc     1C 00 90 3D |  if_ae	jmp	#LR__2560
20be0     A7 26 02 FB | 	rdlong	local01, fp
20be4     0C 4E 05 F1 | 	add	fp, #12
20be8     A7 28 02 FB | 	rdlong	local02, fp
20bec     0C 4E 85 F1 | 	sub	fp, #12
20bf0     14 27 82 F1 | 	sub	local01, local02
20bf4     A7 26 62 FC | 	wrlong	local01, fp
20bf8     F4 02 90 FD | 	jmp	#LR__2570
20bfc                 | LR__2560
20bfc     A7 26 02 FB | 	rdlong	local01, fp
20c00     0C 4E 05 F1 | 	add	fp, #12
20c04     A7 28 02 FB | 	rdlong	local02, fp
20c08     0C 4E 85 F1 | 	sub	fp, #12
20c0c     14 27 82 F1 | 	sub	local01, local02
20c10     A7 26 62 FC | 	wrlong	local01, fp
20c14     08 4E 05 F1 | 	add	fp, #8
20c18     A7 38 68 FC | 	wrlong	#28, fp
20c1c     08 4E 85 F1 | 	sub	fp, #8
20c20     CC 02 90 FD | 	jmp	#LR__2570
20c24                 | LR__2561
20c24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
20c24     08 4E 05 F1 | 	add	fp, #8
20c28     A7 26 02 FB | 	rdlong	local01, fp
20c2c     08 4E 85 F1 | 	sub	fp, #8
20c30     1D 26 0E F2 | 	cmp	local01, #29 wz
20c34     14 4E 05 A1 |  if_e	add	fp, #20
20c38     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c3c     14 4E 85 A1 |  if_e	sub	fp, #20
20c40     16 2B 02 A6 |  if_e	mov	local03, local04
20c44     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20c48     28 00 90 5D |  if_ne	jmp	#LR__2562
20c4c     A7 26 02 FB | 	rdlong	local01, fp
20c50     0C 4E 05 F1 | 	add	fp, #12
20c54     A7 28 02 FB | 	rdlong	local02, fp
20c58     0C 4E 85 F1 | 	sub	fp, #12
20c5c     14 27 82 F1 | 	sub	local01, local02
20c60     A7 26 62 FC | 	wrlong	local01, fp
20c64     08 4E 05 F1 | 	add	fp, #8
20c68     A7 38 68 FC | 	wrlong	#28, fp
20c6c     08 4E 85 F1 | 	sub	fp, #8
20c70     7C 02 90 FD | 	jmp	#LR__2570
20c74                 | LR__2562
20c74                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
20c74     08 4E 05 F1 | 	add	fp, #8
20c78     A7 26 02 FB | 	rdlong	local01, fp
20c7c     08 4E 85 F1 | 	sub	fp, #8
20c80     1D 26 0E F2 | 	cmp	local01, #29 wz
20c84     14 4E 05 A1 |  if_e	add	fp, #20
20c88     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c8c     14 4E 85 A1 |  if_e	sub	fp, #20
20c90     16 2B 02 A6 |  if_e	mov	local03, local04
20c94     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20c98     34 00 90 5D |  if_ne	jmp	#LR__2563
20c9c     A7 12 02 FB | 	rdlong	arg01, fp
20ca0     E4 9E B0 FD | 	call	#__system___float_fromuns
20ca4     FD 12 02 F6 | 	mov	arg01, result1
20ca8     0C 4E 05 F1 | 	add	fp, #12
20cac     A7 14 02 FB | 	rdlong	arg02, fp
20cb0     0C 4E 85 F1 | 	sub	fp, #12
20cb4     1F 14 E6 F4 | 	bitnot	arg02, #31
20cb8     00 9F B0 FD | 	call	#__system___float_add
20cbc     A7 FA 61 FC | 	wrlong	result1, fp
20cc0     08 4E 05 F1 | 	add	fp, #8
20cc4     A7 3C 68 FC | 	wrlong	#30, fp
20cc8     08 4E 85 F1 | 	sub	fp, #8
20ccc     20 02 90 FD | 	jmp	#LR__2570
20cd0                 | LR__2563
20cd0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
20cd0     08 4E 05 F1 | 	add	fp, #8
20cd4     A7 26 02 FB | 	rdlong	local01, fp
20cd8     08 4E 85 F1 | 	sub	fp, #8
20cdc     1C 26 0E F2 | 	cmp	local01, #28 wz
20ce0     14 4E 05 A1 |  if_e	add	fp, #20
20ce4     A7 2C 02 AB |  if_e	rdlong	local04, fp
20ce8     14 4E 85 A1 |  if_e	sub	fp, #20
20cec     16 2B 02 A6 |  if_e	mov	local03, local04
20cf0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20cf4     1C 00 90 5D |  if_ne	jmp	#LR__2564
20cf8     A7 26 02 FB | 	rdlong	local01, fp
20cfc     0C 4E 05 F1 | 	add	fp, #12
20d00     A7 28 02 FB | 	rdlong	local02, fp
20d04     0C 4E 85 F1 | 	sub	fp, #12
20d08     14 27 82 F1 | 	sub	local01, local02
20d0c     A7 26 62 FC | 	wrlong	local01, fp
20d10     DC 01 90 FD | 	jmp	#LR__2570
20d14                 | LR__2564
20d14                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
20d14     08 4E 05 F1 | 	add	fp, #8
20d18     A7 26 02 FB | 	rdlong	local01, fp
20d1c     08 4E 85 F1 | 	sub	fp, #8
20d20     1C 26 0E F2 | 	cmp	local01, #28 wz
20d24     14 4E 05 A1 |  if_e	add	fp, #20
20d28     A7 2C 02 AB |  if_e	rdlong	local04, fp
20d2c     14 4E 85 A1 |  if_e	sub	fp, #20
20d30     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
20d34     1C 00 90 5D |  if_ne	jmp	#LR__2565
20d38     A7 26 02 FB | 	rdlong	local01, fp
20d3c     0C 4E 05 F1 | 	add	fp, #12
20d40     A7 28 02 FB | 	rdlong	local02, fp
20d44     0C 4E 85 F1 | 	sub	fp, #12
20d48     14 27 82 F1 | 	sub	local01, local02
20d4c     A7 26 62 FC | 	wrlong	local01, fp
20d50     9C 01 90 FD | 	jmp	#LR__2570
20d54                 | LR__2565
20d54                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
20d54     08 4E 05 F1 | 	add	fp, #8
20d58     A7 26 02 FB | 	rdlong	local01, fp
20d5c     08 4E 85 F1 | 	sub	fp, #8
20d60     1C 26 0E F2 | 	cmp	local01, #28 wz
20d64     14 4E 05 A1 |  if_e	add	fp, #20
20d68     A7 2A 02 AB |  if_e	rdlong	local03, fp
20d6c     14 4E 85 A1 |  if_e	sub	fp, #20
20d70     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20d74     44 00 90 5D |  if_ne	jmp	#LR__2566
20d78     A7 12 02 FB | 	rdlong	arg01, fp
20d7c     09 13 52 F6 | 	abs	arg01, arg01 wc
20d80     1F 2E C6 C9 |  if_b	decod	local05, #31
20d84     00 2E 06 36 |  if_ae	mov	local05, #0
20d88     FC 9D B0 FD | 	call	#__system___float_fromuns
20d8c     17 FB 61 F5 | 	xor	result1, local05
20d90     FD 12 02 F6 | 	mov	arg01, result1
20d94     0C 4E 05 F1 | 	add	fp, #12
20d98     A7 14 02 FB | 	rdlong	arg02, fp
20d9c     0C 4E 85 F1 | 	sub	fp, #12
20da0     1F 14 E6 F4 | 	bitnot	arg02, #31
20da4     14 9E B0 FD | 	call	#__system___float_add
20da8     A7 FA 61 FC | 	wrlong	result1, fp
20dac     08 4E 05 F1 | 	add	fp, #8
20db0     A7 3C 68 FC | 	wrlong	#30, fp
20db4     08 4E 85 F1 | 	sub	fp, #8
20db8     34 01 90 FD | 	jmp	#LR__2570
20dbc                 | LR__2566
20dbc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
20dbc     08 4E 05 F1 | 	add	fp, #8
20dc0     A7 26 02 FB | 	rdlong	local01, fp
20dc4     08 4E 85 F1 | 	sub	fp, #8
20dc8     1E 26 0E F2 | 	cmp	local01, #30 wz
20dcc     14 4E 05 A1 |  if_e	add	fp, #20
20dd0     A7 2A 02 AB |  if_e	rdlong	local03, fp
20dd4     14 4E 85 A1 |  if_e	sub	fp, #20
20dd8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20ddc     2C 00 90 5D |  if_ne	jmp	#LR__2567
20de0     A7 26 02 FB | 	rdlong	local01, fp
20de4     0C 4E 05 F1 | 	add	fp, #12
20de8     A7 12 02 FB | 	rdlong	arg01, fp
20dec     0C 4E 85 F1 | 	sub	fp, #12
20df0     94 9D B0 FD | 	call	#__system___float_fromuns
20df4     FD 14 02 F6 | 	mov	arg02, result1
20df8     13 13 02 F6 | 	mov	arg01, local01
20dfc     1F 14 E6 F4 | 	bitnot	arg02, #31
20e00     B8 9D B0 FD | 	call	#__system___float_add
20e04     A7 FA 61 FC | 	wrlong	result1, fp
20e08     E4 00 90 FD | 	jmp	#LR__2570
20e0c                 | LR__2567
20e0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
20e0c     08 4E 05 F1 | 	add	fp, #8
20e10     A7 26 02 FB | 	rdlong	local01, fp
20e14     08 4E 85 F1 | 	sub	fp, #8
20e18     1E 26 0E F2 | 	cmp	local01, #30 wz
20e1c     14 4E 05 A1 |  if_e	add	fp, #20
20e20     A7 2A 02 AB |  if_e	rdlong	local03, fp
20e24     14 4E 85 A1 |  if_e	sub	fp, #20
20e28     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20e2c     3C 00 90 5D |  if_ne	jmp	#LR__2568
20e30     A7 26 02 FB | 	rdlong	local01, fp
20e34     0C 4E 05 F1 | 	add	fp, #12
20e38     A7 12 02 FB | 	rdlong	arg01, fp
20e3c     0C 4E 85 F1 | 	sub	fp, #12
20e40     09 13 52 F6 | 	abs	arg01, arg01 wc
20e44     1F 2E C6 C9 |  if_b	decod	local05, #31
20e48     00 2E 06 36 |  if_ae	mov	local05, #0
20e4c     38 9D B0 FD | 	call	#__system___float_fromuns
20e50     17 FB 61 F5 | 	xor	result1, local05
20e54     FD 14 02 F6 | 	mov	arg02, result1
20e58     13 13 02 F6 | 	mov	arg01, local01
20e5c     1F 14 E6 F4 | 	bitnot	arg02, #31
20e60     58 9D B0 FD | 	call	#__system___float_add
20e64     A7 FA 61 FC | 	wrlong	result1, fp
20e68     84 00 90 FD | 	jmp	#LR__2570
20e6c                 | LR__2568
20e6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
20e6c     08 4E 05 F1 | 	add	fp, #8
20e70     A7 26 02 FB | 	rdlong	local01, fp
20e74     08 4E 85 F1 | 	sub	fp, #8
20e78     1E 26 0E F2 | 	cmp	local01, #30 wz
20e7c     14 4E 05 A1 |  if_e	add	fp, #20
20e80     A7 2A 02 AB |  if_e	rdlong	local03, fp
20e84     14 4E 85 A1 |  if_e	sub	fp, #20
20e88     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20e8c     20 00 90 5D |  if_ne	jmp	#LR__2569
20e90     A7 12 02 FB | 	rdlong	arg01, fp
20e94     0C 4E 05 F1 | 	add	fp, #12
20e98     A7 14 02 FB | 	rdlong	arg02, fp
20e9c     0C 4E 85 F1 | 	sub	fp, #12
20ea0     1F 14 E6 F4 | 	bitnot	arg02, #31
20ea4     14 9D B0 FD | 	call	#__system___float_add
20ea8     A7 FA 61 FC | 	wrlong	result1, fp
20eac     40 00 90 FD | 	jmp	#LR__2570
20eb0                 | LR__2569
20eb0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
20eb0     08 4E 05 F1 | 	add	fp, #8
20eb4     A7 26 02 FB | 	rdlong	local01, fp
20eb8     08 4E 85 F1 | 	sub	fp, #8
20ebc     1F 26 0E F2 | 	cmp	local01, #31 wz
20ec0     14 4E 05 51 |  if_ne	add	fp, #20
20ec4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20ec8     14 4E 85 51 |  if_ne	sub	fp, #20
20ecc     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
20ed0     A7 06 68 AC |  if_e	wrlong	#3, fp
20ed4     08 4E 05 A1 |  if_e	add	fp, #8
20ed8     A7 FE 69 AC |  if_e	wrlong	#255, fp
20edc     08 4E 85 A1 |  if_e	sub	fp, #8
20ee0     A7 0A 68 5C |  if_ne	wrlong	#5, fp
20ee4     08 4E 05 51 |  if_ne	add	fp, #8
20ee8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20eec     08 4E 85 51 |  if_ne	sub	fp, #8
20ef0                 | LR__2570
20ef0     A7 12 02 F6 | 	mov	arg01, fp
20ef4     C0 C9 BE FD | 	call	#_push
20ef8     A7 F0 03 F6 | 	mov	ptra, fp
20efc     B2 00 A0 FD | 	call	#popregs_
20f00                 | _do_minus_ret
20f00     2D 00 64 FD | 	ret
20f04                 | 
20f04                 | ' 
20f04                 | ' '--------------------------------- negative (-), one argument negative
20f04                 | ' 
20f04                 | ' sub do_negative
20f04                 | _do_negative
20f04     02 4A 05 F6 | 	mov	COUNT_, #2
20f08     A8 00 A0 FD | 	call	#pushregs_
20f0c     0C F0 07 F1 | 	add	ptra, #12
20f10     0C C9 BE FD | 	call	#_pop
20f14     FF 26 02 F6 | 	mov	local01, result3
20f18     A7 FA 61 FC | 	wrlong	result1, fp
20f1c     04 4E 05 F1 | 	add	fp, #4
20f20     A7 FC 61 FC | 	wrlong	result2, fp
20f24     04 4E 05 F1 | 	add	fp, #4
20f28     A7 26 62 FC | 	wrlong	local01, fp
20f2c                 | ' 
20f2c                 | ' t1=pop()
20f2c                 | ' if t1.result_type=result_int then 
20f2c     08 4E 85 F1 | 	sub	fp, #8
20f30     1C 26 0E F2 | 	cmp	local01, #28 wz
20f34     A7 28 02 AB |  if_e	rdlong	local02, fp
20f38     14 27 62 A6 |  if_e	neg	local01, local02
20f3c     A7 26 62 AC |  if_e	wrlong	local01, fp
20f40     5C 00 90 AD |  if_e	jmp	#LR__2582
20f44     08 4E 05 F1 | 	add	fp, #8
20f48     A7 26 02 FB | 	rdlong	local01, fp
20f4c     08 4E 85 F1 | 	sub	fp, #8
20f50     1D 26 0E F2 | 	cmp	local01, #29 wz
20f54     1C 00 90 5D |  if_ne	jmp	#LR__2580
20f58     A7 28 02 FB | 	rdlong	local02, fp
20f5c     14 27 62 F6 | 	neg	local01, local02
20f60     A7 26 62 FC | 	wrlong	local01, fp
20f64     08 4E 05 F1 | 	add	fp, #8
20f68     A7 38 68 FC | 	wrlong	#28, fp
20f6c     08 4E 85 F1 | 	sub	fp, #8
20f70     2C 00 90 FD | 	jmp	#LR__2581
20f74                 | LR__2580
20f74     08 4E 05 F1 | 	add	fp, #8
20f78     A7 26 02 FB | 	rdlong	local01, fp
20f7c     08 4E 85 F1 | 	sub	fp, #8
20f80     1E 26 0E F2 | 	cmp	local01, #30 wz
20f84     A7 FA 01 AB |  if_e	rdlong	result1, fp
20f88     1F FA E5 A4 |  if_e	bitnot	result1, #31
20f8c     A7 FA 61 AC |  if_e	wrlong	result1, fp
20f90     08 4E 05 51 |  if_ne	add	fp, #8
20f94     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20f98     08 4E 85 51 |  if_ne	sub	fp, #8
20f9c     A7 50 68 5C |  if_ne	wrlong	#40, fp
20fa0                 | LR__2581
20fa0                 | LR__2582
20fa0     A7 12 02 F6 | 	mov	arg01, fp
20fa4     10 C9 BE FD | 	call	#_push
20fa8     A7 F0 03 F6 | 	mov	ptra, fp
20fac     B2 00 A0 FD | 	call	#popregs_
20fb0                 | _do_negative_ret
20fb0     2D 00 64 FD | 	ret
20fb4                 | 
20fb4                 | ' 
20fb4                 | ' '--------------------------------- MOD (modulo)
20fb4                 | ' 
20fb4                 | ' sub do_mod 
20fb4                 | _do_mod
20fb4     01 4A 05 F6 | 	mov	COUNT_, #1
20fb8     A8 00 A0 FD | 	call	#pushregs_
20fbc     18 F0 07 F1 | 	add	ptra, #24
20fc0     5C C8 BE FD | 	call	#_pop
20fc4     FD 92 02 F6 | 	mov	muldivb_, result1
20fc8     FE 90 02 F6 | 	mov	muldiva_, result2
20fcc     FF 26 02 F6 | 	mov	local01, result3
20fd0     0C 4E 05 F1 | 	add	fp, #12
20fd4     A7 92 62 FC | 	wrlong	muldivb_, fp
20fd8     04 4E 05 F1 | 	add	fp, #4
20fdc     A7 90 62 FC | 	wrlong	muldiva_, fp
20fe0     04 4E 05 F1 | 	add	fp, #4
20fe4     A7 26 62 FC | 	wrlong	local01, fp
20fe8     14 4E 85 F1 | 	sub	fp, #20
20fec     30 C8 BE FD | 	call	#_pop
20ff0     A7 FA 61 FC | 	wrlong	result1, fp
20ff4     04 4E 05 F1 | 	add	fp, #4
20ff8     A7 FC 61 FC | 	wrlong	result2, fp
20ffc     04 4E 05 F1 | 	add	fp, #4
21000     A7 FE 61 FC | 	wrlong	result3, fp
21004                 | ' 
21004                 | ' t2=pop()
21004                 | ' t1=pop()
21004                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
21004     08 4E 85 F1 | 	sub	fp, #8
21008     1F FE 0D F2 | 	cmp	result3, #31 wz
2100c     14 4E 05 51 |  if_ne	add	fp, #20
21010     A7 12 02 5B |  if_ne	rdlong	arg01, fp
21014     14 4E 85 51 |  if_ne	sub	fp, #20
21018     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
2101c     A7 14 68 AC |  if_e	wrlong	#10, fp
21020     08 4E 05 A1 |  if_e	add	fp, #8
21024     A7 FE 69 AC |  if_e	wrlong	#255, fp
21028     08 4E 85 A1 |  if_e	sub	fp, #8
2102c     90 01 90 AD |  if_e	jmp	#LR__2596
21030                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
21030     08 4E 05 F1 | 	add	fp, #8
21034     A7 92 02 FB | 	rdlong	muldivb_, fp
21038     08 4E 85 F1 | 	sub	fp, #8
2103c     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
21040     1C 00 90 5D |  if_ne	jmp	#LR__2590
21044     08 4E 05 F1 | 	add	fp, #8
21048     A7 38 68 FC | 	wrlong	#28, fp
2104c     08 4E 85 F1 | 	sub	fp, #8
21050     A7 12 02 FB | 	rdlong	arg01, fp
21054     00 14 06 F6 | 	mov	arg02, #0
21058     F8 A3 B0 FD | 	call	#__system___float_tointeger
2105c     A7 FA 61 FC | 	wrlong	result1, fp
21060                 | LR__2590
21060                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
21060     14 4E 05 F1 | 	add	fp, #20
21064     A7 92 02 FB | 	rdlong	muldivb_, fp
21068     14 4E 85 F1 | 	sub	fp, #20
2106c     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
21070     28 00 90 5D |  if_ne	jmp	#LR__2591
21074     14 4E 05 F1 | 	add	fp, #20
21078     A7 38 68 FC | 	wrlong	#28, fp
2107c     08 4E 85 F1 | 	sub	fp, #8
21080     A7 12 02 FB | 	rdlong	arg01, fp
21084     0C 4E 85 F1 | 	sub	fp, #12
21088     00 14 06 F6 | 	mov	arg02, #0
2108c     C4 A3 B0 FD | 	call	#__system___float_tointeger
21090     0C 4E 05 F1 | 	add	fp, #12
21094     A7 FA 61 FC | 	wrlong	result1, fp
21098     0C 4E 85 F1 | 	sub	fp, #12
2109c                 | LR__2591
2109c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
2109c     08 4E 05 F1 | 	add	fp, #8
210a0     A7 92 02 FB | 	rdlong	muldivb_, fp
210a4     08 4E 85 F1 | 	sub	fp, #8
210a8     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
210ac     14 4E 05 A1 |  if_e	add	fp, #20
210b0     A7 26 02 AB |  if_e	rdlong	local01, fp
210b4     14 4E 85 A1 |  if_e	sub	fp, #20
210b8     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
210bc     20 00 90 5D |  if_ne	jmp	#LR__2592
210c0     0C 4E 05 F1 | 	add	fp, #12
210c4     A7 26 02 FB | 	rdlong	local01, fp
210c8     0C 4E 85 F1 | 	sub	fp, #12
210cc     A7 92 02 FB | 	rdlong	muldivb_, fp
210d0     13 93 12 FD | 	qdiv	muldivb_, local01
210d4     19 26 62 FD | 	getqy	local01
210d8     A7 26 62 FC | 	wrlong	local01, fp
210dc     E0 00 90 FD | 	jmp	#LR__2596
210e0                 | LR__2592
210e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
210e0     08 4E 05 F1 | 	add	fp, #8
210e4     A7 92 02 FB | 	rdlong	muldivb_, fp
210e8     08 4E 85 F1 | 	sub	fp, #8
210ec     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
210f0     14 4E 05 A1 |  if_e	add	fp, #20
210f4     A7 26 02 AB |  if_e	rdlong	local01, fp
210f8     14 4E 85 A1 |  if_e	sub	fp, #20
210fc     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
21100     2C 00 90 5D |  if_ne	jmp	#LR__2593
21104     0C 4E 05 F1 | 	add	fp, #12
21108     A7 26 02 FB | 	rdlong	local01, fp
2110c     0C 4E 85 F1 | 	sub	fp, #12
21110     A7 92 02 FB | 	rdlong	muldivb_, fp
21114     13 93 12 FD | 	qdiv	muldivb_, local01
21118     19 26 62 FD | 	getqy	local01
2111c     A7 26 62 FC | 	wrlong	local01, fp
21120     08 4E 05 F1 | 	add	fp, #8
21124     A7 38 68 FC | 	wrlong	#28, fp
21128     08 4E 85 F1 | 	sub	fp, #8
2112c     90 00 90 FD | 	jmp	#LR__2596
21130                 | LR__2593
21130                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
21130     08 4E 05 F1 | 	add	fp, #8
21134     A7 92 02 FB | 	rdlong	muldivb_, fp
21138     08 4E 85 F1 | 	sub	fp, #8
2113c     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
21140     14 4E 05 A1 |  if_e	add	fp, #20
21144     A7 26 02 AB |  if_e	rdlong	local01, fp
21148     14 4E 85 A1 |  if_e	sub	fp, #20
2114c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
21150     1C 00 90 5D |  if_ne	jmp	#LR__2594
21154     A7 90 02 FB | 	rdlong	muldiva_, fp
21158     0C 4E 05 F1 | 	add	fp, #12
2115c     A7 92 02 FB | 	rdlong	muldivb_, fp
21160     0C 4E 85 F1 | 	sub	fp, #12
21164     BA 00 A0 FD | 	call	#divide_
21168     A7 90 62 FC | 	wrlong	muldiva_, fp
2116c     50 00 90 FD | 	jmp	#LR__2596
21170                 | LR__2594
21170                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
21170     08 4E 05 F1 | 	add	fp, #8
21174     A7 92 02 FB | 	rdlong	muldivb_, fp
21178     08 4E 85 F1 | 	sub	fp, #8
2117c     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
21180     14 4E 05 A1 |  if_e	add	fp, #20
21184     A7 26 02 AB |  if_e	rdlong	local01, fp
21188     14 4E 85 A1 |  if_e	sub	fp, #20
2118c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
21190     1C 00 90 5D |  if_ne	jmp	#LR__2595
21194     A7 90 02 FB | 	rdlong	muldiva_, fp
21198     0C 4E 05 F1 | 	add	fp, #12
2119c     A7 92 02 FB | 	rdlong	muldivb_, fp
211a0     0C 4E 85 F1 | 	sub	fp, #12
211a4     BA 00 A0 FD | 	call	#divide_
211a8     A7 90 62 FC | 	wrlong	muldiva_, fp
211ac     10 00 90 FD | 	jmp	#LR__2596
211b0                 | LR__2595
211b0     A7 16 68 FC | 	wrlong	#11, fp
211b4     08 4E 05 F1 | 	add	fp, #8
211b8     A7 FE 69 FC | 	wrlong	#255, fp
211bc     08 4E 85 F1 | 	sub	fp, #8
211c0                 | LR__2596
211c0     A7 12 02 F6 | 	mov	arg01, fp
211c4     F0 C6 BE FD | 	call	#_push
211c8     A7 F0 03 F6 | 	mov	ptra, fp
211cc     B2 00 A0 FD | 	call	#popregs_
211d0                 | _do_mod_ret
211d0     2D 00 64 FD | 	ret
211d4                 | 
211d4                 | ' 
211d4                 | ' '--------------------------------- mul (*)
211d4                 | ' 
211d4                 | ' sub do_mul
211d4                 | _do_mul
211d4     05 4A 05 F6 | 	mov	COUNT_, #5
211d8     A8 00 A0 FD | 	call	#pushregs_
211dc     18 F0 07 F1 | 	add	ptra, #24
211e0     3C C6 BE FD | 	call	#_pop
211e4     FD 26 02 F6 | 	mov	local01, result1
211e8     FE 28 02 F6 | 	mov	local02, result2
211ec     FF 2A 02 F6 | 	mov	local03, result3
211f0     0C 4E 05 F1 | 	add	fp, #12
211f4     A7 26 62 FC | 	wrlong	local01, fp
211f8     04 4E 05 F1 | 	add	fp, #4
211fc     A7 28 62 FC | 	wrlong	local02, fp
21200     04 4E 05 F1 | 	add	fp, #4
21204     A7 2A 62 FC | 	wrlong	local03, fp
21208     14 4E 85 F1 | 	sub	fp, #20
2120c     10 C6 BE FD | 	call	#_pop
21210     FF 2A 02 F6 | 	mov	local03, result3
21214     A7 FA 61 FC | 	wrlong	result1, fp
21218     04 4E 05 F1 | 	add	fp, #4
2121c     A7 FC 61 FC | 	wrlong	result2, fp
21220     04 4E 05 F1 | 	add	fp, #4
21224     A7 2A 62 FC | 	wrlong	local03, fp
21228                 | ' 
21228                 | ' t2=pop()
21228                 | ' t1=pop()
21228                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
21228     08 4E 85 F1 | 	sub	fp, #8
2122c     1D 2A 0E F2 | 	cmp	local03, #29 wz
21230     14 4E 05 A1 |  if_e	add	fp, #20
21234     A7 2C 02 AB |  if_e	rdlong	local04, fp
21238     14 4E 85 A1 |  if_e	sub	fp, #20
2123c     16 2B 02 A6 |  if_e	mov	local03, local04
21240     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21244     20 00 90 5D |  if_ne	jmp	#LR__2600
21248     A7 28 02 FB | 	rdlong	local02, fp
2124c     0C 4E 05 F1 | 	add	fp, #12
21250     A7 2A 02 FB | 	rdlong	local03, fp
21254     15 29 02 FD | 	qmul	local02, local03
21258     0C 4E 85 F1 | 	sub	fp, #12
2125c     18 26 62 FD | 	getqx	local01
21260     A7 26 62 FC | 	wrlong	local01, fp
21264     C4 02 90 FD | 	jmp	#LR__2609
21268                 | LR__2600
21268                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
21268     08 4E 05 F1 | 	add	fp, #8
2126c     A7 26 02 FB | 	rdlong	local01, fp
21270     08 4E 85 F1 | 	sub	fp, #8
21274     1D 26 0E F2 | 	cmp	local01, #29 wz
21278     14 4E 05 A1 |  if_e	add	fp, #20
2127c     A7 2C 02 AB |  if_e	rdlong	local04, fp
21280     14 4E 85 A1 |  if_e	sub	fp, #20
21284     16 2B 02 A6 |  if_e	mov	local03, local04
21288     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2128c     2C 00 90 5D |  if_ne	jmp	#LR__2601
21290     A7 28 02 FB | 	rdlong	local02, fp
21294     0C 4E 05 F1 | 	add	fp, #12
21298     A7 2A 02 FB | 	rdlong	local03, fp
2129c     15 29 02 FD | 	qmul	local02, local03
212a0     0C 4E 85 F1 | 	sub	fp, #12
212a4     18 26 62 FD | 	getqx	local01
212a8     A7 26 62 FC | 	wrlong	local01, fp
212ac     08 4E 05 F1 | 	add	fp, #8
212b0     A7 38 68 FC | 	wrlong	#28, fp
212b4     08 4E 85 F1 | 	sub	fp, #8
212b8     70 02 90 FD | 	jmp	#LR__2609
212bc                 | LR__2601
212bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
212bc     08 4E 05 F1 | 	add	fp, #8
212c0     A7 26 02 FB | 	rdlong	local01, fp
212c4     08 4E 85 F1 | 	sub	fp, #8
212c8     1D 26 0E F2 | 	cmp	local01, #29 wz
212cc     14 4E 05 A1 |  if_e	add	fp, #20
212d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
212d4     14 4E 85 A1 |  if_e	sub	fp, #20
212d8     16 2B 02 A6 |  if_e	mov	local03, local04
212dc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
212e0     30 00 90 5D |  if_ne	jmp	#LR__2602
212e4     A7 12 02 FB | 	rdlong	arg01, fp
212e8     9C 98 B0 FD | 	call	#__system___float_fromuns
212ec     FD 12 02 F6 | 	mov	arg01, result1
212f0     0C 4E 05 F1 | 	add	fp, #12
212f4     A7 14 02 FB | 	rdlong	arg02, fp
212f8     0C 4E 85 F1 | 	sub	fp, #12
212fc     8C 9C B0 FD | 	call	#__system___float_mul
21300     A7 FA 61 FC | 	wrlong	result1, fp
21304     08 4E 05 F1 | 	add	fp, #8
21308     A7 3C 68 FC | 	wrlong	#30, fp
2130c     08 4E 85 F1 | 	sub	fp, #8
21310     18 02 90 FD | 	jmp	#LR__2609
21314                 | LR__2602
21314                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
21314     08 4E 05 F1 | 	add	fp, #8
21318     A7 26 02 FB | 	rdlong	local01, fp
2131c     08 4E 85 F1 | 	sub	fp, #8
21320     1C 26 0E F2 | 	cmp	local01, #28 wz
21324     14 4E 05 A1 |  if_e	add	fp, #20
21328     A7 2C 02 AB |  if_e	rdlong	local04, fp
2132c     14 4E 85 A1 |  if_e	sub	fp, #20
21330     16 2B 02 A6 |  if_e	mov	local03, local04
21334     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21338     20 00 90 5D |  if_ne	jmp	#LR__2603
2133c     A7 28 02 FB | 	rdlong	local02, fp
21340     0C 4E 05 F1 | 	add	fp, #12
21344     A7 2A 02 FB | 	rdlong	local03, fp
21348     15 29 02 FD | 	qmul	local02, local03
2134c     0C 4E 85 F1 | 	sub	fp, #12
21350     18 26 62 FD | 	getqx	local01
21354     A7 26 62 FC | 	wrlong	local01, fp
21358     D0 01 90 FD | 	jmp	#LR__2609
2135c                 | LR__2603
2135c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
2135c     08 4E 05 F1 | 	add	fp, #8
21360     A7 26 02 FB | 	rdlong	local01, fp
21364     08 4E 85 F1 | 	sub	fp, #8
21368     1C 26 0E F2 | 	cmp	local01, #28 wz
2136c     14 4E 05 A1 |  if_e	add	fp, #20
21370     A7 2C 02 AB |  if_e	rdlong	local04, fp
21374     14 4E 85 A1 |  if_e	sub	fp, #20
21378     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
2137c     20 00 90 5D |  if_ne	jmp	#LR__2604
21380     A7 28 02 FB | 	rdlong	local02, fp
21384     0C 4E 05 F1 | 	add	fp, #12
21388     A7 2A 02 FB | 	rdlong	local03, fp
2138c     15 29 02 FD | 	qmul	local02, local03
21390     0C 4E 85 F1 | 	sub	fp, #12
21394     18 26 62 FD | 	getqx	local01
21398     A7 26 62 FC | 	wrlong	local01, fp
2139c     8C 01 90 FD | 	jmp	#LR__2609
213a0                 | LR__2604
213a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
213a0     08 4E 05 F1 | 	add	fp, #8
213a4     A7 26 02 FB | 	rdlong	local01, fp
213a8     08 4E 85 F1 | 	sub	fp, #8
213ac     1C 26 0E F2 | 	cmp	local01, #28 wz
213b0     14 4E 05 A1 |  if_e	add	fp, #20
213b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
213b8     14 4E 85 A1 |  if_e	sub	fp, #20
213bc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
213c0     40 00 90 5D |  if_ne	jmp	#LR__2605
213c4     A7 12 02 FB | 	rdlong	arg01, fp
213c8     09 13 52 F6 | 	abs	arg01, arg01 wc
213cc     1F 2E C6 C9 |  if_b	decod	local05, #31
213d0     00 2E 06 36 |  if_ae	mov	local05, #0
213d4     B0 97 B0 FD | 	call	#__system___float_fromuns
213d8     17 FB 61 F5 | 	xor	result1, local05
213dc     FD 12 02 F6 | 	mov	arg01, result1
213e0     0C 4E 05 F1 | 	add	fp, #12
213e4     A7 14 02 FB | 	rdlong	arg02, fp
213e8     0C 4E 85 F1 | 	sub	fp, #12
213ec     9C 9B B0 FD | 	call	#__system___float_mul
213f0     A7 FA 61 FC | 	wrlong	result1, fp
213f4     08 4E 05 F1 | 	add	fp, #8
213f8     A7 3C 68 FC | 	wrlong	#30, fp
213fc     08 4E 85 F1 | 	sub	fp, #8
21400     28 01 90 FD | 	jmp	#LR__2609
21404                 | LR__2605
21404                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
21404     08 4E 05 F1 | 	add	fp, #8
21408     A7 26 02 FB | 	rdlong	local01, fp
2140c     08 4E 85 F1 | 	sub	fp, #8
21410     1E 26 0E F2 | 	cmp	local01, #30 wz
21414     14 4E 05 A1 |  if_e	add	fp, #20
21418     A7 2A 02 AB |  if_e	rdlong	local03, fp
2141c     14 4E 85 A1 |  if_e	sub	fp, #20
21420     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21424     28 00 90 5D |  if_ne	jmp	#LR__2606
21428     A7 26 02 FB | 	rdlong	local01, fp
2142c     0C 4E 05 F1 | 	add	fp, #12
21430     A7 12 02 FB | 	rdlong	arg01, fp
21434     0C 4E 85 F1 | 	sub	fp, #12
21438     4C 97 B0 FD | 	call	#__system___float_fromuns
2143c     FD 14 02 F6 | 	mov	arg02, result1
21440     13 13 02 F6 | 	mov	arg01, local01
21444     44 9B B0 FD | 	call	#__system___float_mul
21448     A7 FA 61 FC | 	wrlong	result1, fp
2144c     DC 00 90 FD | 	jmp	#LR__2609
21450                 | LR__2606
21450                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
21450     08 4E 05 F1 | 	add	fp, #8
21454     A7 26 02 FB | 	rdlong	local01, fp
21458     08 4E 85 F1 | 	sub	fp, #8
2145c     1E 26 0E F2 | 	cmp	local01, #30 wz
21460     14 4E 05 A1 |  if_e	add	fp, #20
21464     A7 2A 02 AB |  if_e	rdlong	local03, fp
21468     14 4E 85 A1 |  if_e	sub	fp, #20
2146c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21470     38 00 90 5D |  if_ne	jmp	#LR__2607
21474     A7 26 02 FB | 	rdlong	local01, fp
21478     0C 4E 05 F1 | 	add	fp, #12
2147c     A7 12 02 FB | 	rdlong	arg01, fp
21480     0C 4E 85 F1 | 	sub	fp, #12
21484     09 13 52 F6 | 	abs	arg01, arg01 wc
21488     1F 2E C6 C9 |  if_b	decod	local05, #31
2148c     00 2E 06 36 |  if_ae	mov	local05, #0
21490     F4 96 B0 FD | 	call	#__system___float_fromuns
21494     17 FB 61 F5 | 	xor	result1, local05
21498     FD 14 02 F6 | 	mov	arg02, result1
2149c     13 13 02 F6 | 	mov	arg01, local01
214a0     E8 9A B0 FD | 	call	#__system___float_mul
214a4     A7 FA 61 FC | 	wrlong	result1, fp
214a8     80 00 90 FD | 	jmp	#LR__2609
214ac                 | LR__2607
214ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
214ac     08 4E 05 F1 | 	add	fp, #8
214b0     A7 26 02 FB | 	rdlong	local01, fp
214b4     08 4E 85 F1 | 	sub	fp, #8
214b8     1E 26 0E F2 | 	cmp	local01, #30 wz
214bc     14 4E 05 A1 |  if_e	add	fp, #20
214c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
214c4     14 4E 85 A1 |  if_e	sub	fp, #20
214c8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
214cc     1C 00 90 5D |  if_ne	jmp	#LR__2608
214d0     A7 12 02 FB | 	rdlong	arg01, fp
214d4     0C 4E 05 F1 | 	add	fp, #12
214d8     A7 14 02 FB | 	rdlong	arg02, fp
214dc     0C 4E 85 F1 | 	sub	fp, #12
214e0     A8 9A B0 FD | 	call	#__system___float_mul
214e4     A7 FA 61 FC | 	wrlong	result1, fp
214e8     40 00 90 FD | 	jmp	#LR__2609
214ec                 | LR__2608
214ec                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
214ec     08 4E 05 F1 | 	add	fp, #8
214f0     A7 26 02 FB | 	rdlong	local01, fp
214f4     08 4E 85 F1 | 	sub	fp, #8
214f8     1F 26 0E F2 | 	cmp	local01, #31 wz
214fc     14 4E 05 51 |  if_ne	add	fp, #20
21500     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21504     14 4E 85 51 |  if_ne	sub	fp, #20
21508     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
2150c     A7 10 68 AC |  if_e	wrlong	#8, fp
21510     08 4E 05 A1 |  if_e	add	fp, #8
21514     A7 FE 69 AC |  if_e	wrlong	#255, fp
21518     08 4E 85 A1 |  if_e	sub	fp, #8
2151c     A7 12 68 5C |  if_ne	wrlong	#9, fp
21520     08 4E 05 51 |  if_ne	add	fp, #8
21524     A7 FE 69 5C |  if_ne	wrlong	#255, fp
21528     08 4E 85 51 |  if_ne	sub	fp, #8
2152c                 | LR__2609
2152c     A7 12 02 F6 | 	mov	arg01, fp
21530     84 C3 BE FD | 	call	#_push
21534     A7 F0 03 F6 | 	mov	ptra, fp
21538     B2 00 A0 FD | 	call	#popregs_
2153c                 | _do_mul_ret
2153c     2D 00 64 FD | 	ret
21540                 | 
21540                 | ' 
21540                 | ' '--------------------------------- not equal (<>)
21540                 | ' 
21540                 | ' sub do_ne
21540                 | _do_ne
21540     05 4A 05 F6 | 	mov	COUNT_, #5
21544     A8 00 A0 FD | 	call	#pushregs_
21548     18 F0 07 F1 | 	add	ptra, #24
2154c     D0 C2 BE FD | 	call	#_pop
21550     FD 26 02 F6 | 	mov	local01, result1
21554     FE 28 02 F6 | 	mov	local02, result2
21558     FF 2A 02 F6 | 	mov	local03, result3
2155c     0C 4E 05 F1 | 	add	fp, #12
21560     A7 26 62 FC | 	wrlong	local01, fp
21564     04 4E 05 F1 | 	add	fp, #4
21568     A7 28 62 FC | 	wrlong	local02, fp
2156c     04 4E 05 F1 | 	add	fp, #4
21570     A7 2A 62 FC | 	wrlong	local03, fp
21574     14 4E 85 F1 | 	sub	fp, #20
21578     A4 C2 BE FD | 	call	#_pop
2157c     FF 2A 02 F6 | 	mov	local03, result3
21580     A7 FA 61 FC | 	wrlong	result1, fp
21584     04 4E 05 F1 | 	add	fp, #4
21588     A7 FC 61 FC | 	wrlong	result2, fp
2158c     04 4E 05 F1 | 	add	fp, #4
21590     A7 2A 62 FC | 	wrlong	local03, fp
21594                 | ' 
21594                 | ' t2=pop()
21594                 | ' t1=pop()
21594                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
21594     08 4E 85 F1 | 	sub	fp, #8
21598     1F 2A 0E F2 | 	cmp	local03, #31 wz
2159c     14 4E 05 A1 |  if_e	add	fp, #20
215a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
215a4     14 4E 85 A1 |  if_e	sub	fp, #20
215a8     16 2B 02 A6 |  if_e	mov	local03, local04
215ac     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
215b0     28 00 90 5D |  if_ne	jmp	#LR__2610
215b4     00 26 06 F6 | 	mov	local01, #0
215b8     A7 12 02 FB | 	rdlong	arg01, fp
215bc     0C 4E 05 F1 | 	add	fp, #12
215c0     A7 14 02 FB | 	rdlong	arg02, fp
215c4     0C 4E 85 F1 | 	sub	fp, #12
215c8     6C 6B B0 FD | 	call	#__system___string_cmp
215cc     00 FA 0D F2 | 	cmp	result1, #0 wz
215d0     00 26 26 56 |  if_ne	not	local01, #0
215d4     A7 26 62 FC | 	wrlong	local01, fp
215d8     20 04 90 FD | 	jmp	#LR__2623
215dc                 | LR__2610
215dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
215dc     08 4E 05 F1 | 	add	fp, #8
215e0     A7 26 02 FB | 	rdlong	local01, fp
215e4     08 4E 85 F1 | 	sub	fp, #8
215e8     1E 26 0E F2 | 	cmp	local01, #30 wz
215ec     14 4E 05 A1 |  if_e	add	fp, #20
215f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
215f4     14 4E 85 A1 |  if_e	sub	fp, #20
215f8     16 2B 02 A6 |  if_e	mov	local03, local04
215fc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21600     2C 00 90 5D |  if_ne	jmp	#LR__2611
21604     00 26 06 F6 | 	mov	local01, #0
21608     A7 12 02 FB | 	rdlong	arg01, fp
2160c     0C 4E 05 F1 | 	add	fp, #12
21610     A7 14 02 FB | 	rdlong	arg02, fp
21614     0C 4E 85 F1 | 	sub	fp, #12
21618     01 16 06 F6 | 	mov	arg03, #1
2161c     A0 9D B0 FD | 	call	#__system___float_cmp
21620     00 FA 0D F2 | 	cmp	result1, #0 wz
21624     00 26 26 56 |  if_ne	not	local01, #0
21628     A7 26 62 FC | 	wrlong	local01, fp
2162c     CC 03 90 FD | 	jmp	#LR__2623
21630                 | LR__2611
21630                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
21630     08 4E 05 F1 | 	add	fp, #8
21634     A7 26 02 FB | 	rdlong	local01, fp
21638     08 4E 85 F1 | 	sub	fp, #8
2163c     1E 26 0E F2 | 	cmp	local01, #30 wz
21640     14 4E 05 A1 |  if_e	add	fp, #20
21644     A7 2C 02 AB |  if_e	rdlong	local04, fp
21648     14 4E 85 A1 |  if_e	sub	fp, #20
2164c     16 2B 02 A6 |  if_e	mov	local03, local04
21650     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21654     48 00 90 5D |  if_ne	jmp	#LR__2612
21658     00 26 06 F6 | 	mov	local01, #0
2165c     A7 28 02 FB | 	rdlong	local02, fp
21660     0C 4E 05 F1 | 	add	fp, #12
21664     A7 12 02 FB | 	rdlong	arg01, fp
21668     0C 4E 85 F1 | 	sub	fp, #12
2166c     09 13 52 F6 | 	abs	arg01, arg01 wc
21670     1F 2E C6 C9 |  if_b	decod	local05, #31
21674     00 2E 06 36 |  if_ae	mov	local05, #0
21678     0C 95 B0 FD | 	call	#__system___float_fromuns
2167c     17 FB 61 F5 | 	xor	result1, local05
21680     FD 14 02 F6 | 	mov	arg02, result1
21684     14 13 02 F6 | 	mov	arg01, local02
21688     01 16 06 F6 | 	mov	arg03, #1
2168c     30 9D B0 FD | 	call	#__system___float_cmp
21690     00 FA 0D F2 | 	cmp	result1, #0 wz
21694     00 26 26 56 |  if_ne	not	local01, #0
21698     A7 26 62 FC | 	wrlong	local01, fp
2169c     5C 03 90 FD | 	jmp	#LR__2623
216a0                 | LR__2612
216a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
216a0     08 4E 05 F1 | 	add	fp, #8
216a4     A7 26 02 FB | 	rdlong	local01, fp
216a8     08 4E 85 F1 | 	sub	fp, #8
216ac     1E 26 0E F2 | 	cmp	local01, #30 wz
216b0     14 4E 05 A1 |  if_e	add	fp, #20
216b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
216b8     14 4E 85 A1 |  if_e	sub	fp, #20
216bc     16 2B 02 A6 |  if_e	mov	local03, local04
216c0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
216c4     38 00 90 5D |  if_ne	jmp	#LR__2613
216c8     00 26 06 F6 | 	mov	local01, #0
216cc     A7 28 02 FB | 	rdlong	local02, fp
216d0     0C 4E 05 F1 | 	add	fp, #12
216d4     A7 12 02 FB | 	rdlong	arg01, fp
216d8     0C 4E 85 F1 | 	sub	fp, #12
216dc     A8 94 B0 FD | 	call	#__system___float_fromuns
216e0     FD 14 02 F6 | 	mov	arg02, result1
216e4     14 13 02 F6 | 	mov	arg01, local02
216e8     01 16 06 F6 | 	mov	arg03, #1
216ec     D0 9C B0 FD | 	call	#__system___float_cmp
216f0     00 FA 0D F2 | 	cmp	result1, #0 wz
216f4     00 26 26 56 |  if_ne	not	local01, #0
216f8     A7 26 62 FC | 	wrlong	local01, fp
216fc     FC 02 90 FD | 	jmp	#LR__2623
21700                 | LR__2613
21700                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
21700     08 4E 05 F1 | 	add	fp, #8
21704     A7 26 02 FB | 	rdlong	local01, fp
21708     08 4E 85 F1 | 	sub	fp, #8
2170c     1C 26 0E F2 | 	cmp	local01, #28 wz
21710     14 4E 05 A1 |  if_e	add	fp, #20
21714     A7 2C 02 AB |  if_e	rdlong	local04, fp
21718     14 4E 85 A1 |  if_e	sub	fp, #20
2171c     16 2B 02 A6 |  if_e	mov	local03, local04
21720     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21724     44 00 90 5D |  if_ne	jmp	#LR__2614
21728     00 26 06 F6 | 	mov	local01, #0
2172c     A7 12 02 FB | 	rdlong	arg01, fp
21730     09 13 52 F6 | 	abs	arg01, arg01 wc
21734     1F 2E C6 C9 |  if_b	decod	local05, #31
21738     00 2E 06 36 |  if_ae	mov	local05, #0
2173c     48 94 B0 FD | 	call	#__system___float_fromuns
21740     17 FB 61 F5 | 	xor	result1, local05
21744     FD 12 02 F6 | 	mov	arg01, result1
21748     0C 4E 05 F1 | 	add	fp, #12
2174c     A7 14 02 FB | 	rdlong	arg02, fp
21750     0C 4E 85 F1 | 	sub	fp, #12
21754     01 16 06 F6 | 	mov	arg03, #1
21758     64 9C B0 FD | 	call	#__system___float_cmp
2175c     00 FA 0D F2 | 	cmp	result1, #0 wz
21760     00 26 26 56 |  if_ne	not	local01, #0
21764     A7 26 62 FC | 	wrlong	local01, fp
21768     90 02 90 FD | 	jmp	#LR__2623
2176c                 | LR__2614
2176c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
2176c     08 4E 05 F1 | 	add	fp, #8
21770     A7 26 02 FB | 	rdlong	local01, fp
21774     08 4E 85 F1 | 	sub	fp, #8
21778     1C 26 0E F2 | 	cmp	local01, #28 wz
2177c     14 4E 05 A1 |  if_e	add	fp, #20
21780     A7 2C 02 AB |  if_e	rdlong	local04, fp
21784     14 4E 85 A1 |  if_e	sub	fp, #20
21788     16 2B 02 A6 |  if_e	mov	local03, local04
2178c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21790     24 00 90 5D |  if_ne	jmp	#LR__2615
21794     00 26 06 F6 | 	mov	local01, #0
21798     A7 28 02 FB | 	rdlong	local02, fp
2179c     0C 4E 05 F1 | 	add	fp, #12
217a0     A7 2A 02 FB | 	rdlong	local03, fp
217a4     0C 4E 85 F1 | 	sub	fp, #12
217a8     15 29 0A F2 | 	cmp	local02, local03 wz
217ac     01 26 66 56 |  if_ne	neg	local01, #1
217b0     A7 26 62 FC | 	wrlong	local01, fp
217b4     44 02 90 FD | 	jmp	#LR__2623
217b8                 | LR__2615
217b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
217b8     08 4E 05 F1 | 	add	fp, #8
217bc     A7 26 02 FB | 	rdlong	local01, fp
217c0     08 4E 85 F1 | 	sub	fp, #8
217c4     1C 26 0E F2 | 	cmp	local01, #28 wz
217c8     14 4E 05 A1 |  if_e	add	fp, #20
217cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
217d0     14 4E 85 A1 |  if_e	sub	fp, #20
217d4     16 2B 02 A6 |  if_e	mov	local03, local04
217d8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
217dc     24 00 90 5D |  if_ne	jmp	#LR__2616
217e0     00 26 06 F6 | 	mov	local01, #0
217e4     A7 28 02 FB | 	rdlong	local02, fp
217e8     0C 4E 05 F1 | 	add	fp, #12
217ec     A7 2A 02 FB | 	rdlong	local03, fp
217f0     0C 4E 85 F1 | 	sub	fp, #12
217f4     15 29 0A F2 | 	cmp	local02, local03 wz
217f8     01 26 66 56 |  if_ne	neg	local01, #1
217fc     A7 26 62 FC | 	wrlong	local01, fp
21800     F8 01 90 FD | 	jmp	#LR__2623
21804                 | LR__2616
21804                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
21804     08 4E 05 F1 | 	add	fp, #8
21808     A7 26 02 FB | 	rdlong	local01, fp
2180c     08 4E 85 F1 | 	sub	fp, #8
21810     1D 26 0E F2 | 	cmp	local01, #29 wz
21814     14 4E 05 A1 |  if_e	add	fp, #20
21818     A7 2C 02 AB |  if_e	rdlong	local04, fp
2181c     14 4E 85 A1 |  if_e	sub	fp, #20
21820     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
21824     34 00 90 5D |  if_ne	jmp	#LR__2617
21828     00 26 06 F6 | 	mov	local01, #0
2182c     A7 12 02 FB | 	rdlong	arg01, fp
21830     54 93 B0 FD | 	call	#__system___float_fromuns
21834     FD 12 02 F6 | 	mov	arg01, result1
21838     0C 4E 05 F1 | 	add	fp, #12
2183c     A7 14 02 FB | 	rdlong	arg02, fp
21840     0C 4E 85 F1 | 	sub	fp, #12
21844     01 16 06 F6 | 	mov	arg03, #1
21848     74 9B B0 FD | 	call	#__system___float_cmp
2184c     00 FA 0D F2 | 	cmp	result1, #0 wz
21850     00 26 26 56 |  if_ne	not	local01, #0
21854     A7 26 62 FC | 	wrlong	local01, fp
21858     A0 01 90 FD | 	jmp	#LR__2623
2185c                 | LR__2617
2185c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
2185c     08 4E 05 F1 | 	add	fp, #8
21860     A7 26 02 FB | 	rdlong	local01, fp
21864     08 4E 85 F1 | 	sub	fp, #8
21868     1D 26 0E F2 | 	cmp	local01, #29 wz
2186c     14 4E 05 A1 |  if_e	add	fp, #20
21870     A7 2A 02 AB |  if_e	rdlong	local03, fp
21874     14 4E 85 A1 |  if_e	sub	fp, #20
21878     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2187c     24 00 90 5D |  if_ne	jmp	#LR__2618
21880     00 26 06 F6 | 	mov	local01, #0
21884     A7 28 02 FB | 	rdlong	local02, fp
21888     0C 4E 05 F1 | 	add	fp, #12
2188c     A7 2A 02 FB | 	rdlong	local03, fp
21890     0C 4E 85 F1 | 	sub	fp, #12
21894     15 29 0A F2 | 	cmp	local02, local03 wz
21898     01 26 66 56 |  if_ne	neg	local01, #1
2189c     A7 26 62 FC | 	wrlong	local01, fp
218a0     58 01 90 FD | 	jmp	#LR__2623
218a4                 | LR__2618
218a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
218a4     08 4E 05 F1 | 	add	fp, #8
218a8     A7 26 02 FB | 	rdlong	local01, fp
218ac     08 4E 85 F1 | 	sub	fp, #8
218b0     1D 26 0E F2 | 	cmp	local01, #29 wz
218b4     14 4E 05 A1 |  if_e	add	fp, #20
218b8     A7 2A 02 AB |  if_e	rdlong	local03, fp
218bc     14 4E 85 A1 |  if_e	sub	fp, #20
218c0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
218c4     24 00 90 5D |  if_ne	jmp	#LR__2619
218c8     00 26 06 F6 | 	mov	local01, #0
218cc     A7 28 02 FB | 	rdlong	local02, fp
218d0     0C 4E 05 F1 | 	add	fp, #12
218d4     A7 2A 02 FB | 	rdlong	local03, fp
218d8     0C 4E 85 F1 | 	sub	fp, #12
218dc     15 29 0A F2 | 	cmp	local02, local03 wz
218e0     01 26 66 56 |  if_ne	neg	local01, #1
218e4     A7 26 62 FC | 	wrlong	local01, fp
218e8     10 01 90 FD | 	jmp	#LR__2623
218ec                 | LR__2619
218ec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
218ec     08 4E 05 F1 | 	add	fp, #8
218f0     A7 26 02 FB | 	rdlong	local01, fp
218f4     08 4E 85 F1 | 	sub	fp, #8
218f8     2B 26 0E F2 | 	cmp	local01, #43 wz
218fc     14 4E 05 A1 |  if_e	add	fp, #20
21900     A7 2A 02 AB |  if_e	rdlong	local03, fp
21904     14 4E 85 A1 |  if_e	sub	fp, #20
21908     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
2190c     30 00 90 5D |  if_ne	jmp	#LR__2620
21910     00 26 06 F6 | 	mov	local01, #0
21914     A7 12 02 FB | 	rdlong	arg01, fp
21918     7C C0 BE FD | 	call	#_convertstring
2191c     FD 12 02 F6 | 	mov	arg01, result1
21920     0C 4E 05 F1 | 	add	fp, #12
21924     A7 14 02 FB | 	rdlong	arg02, fp
21928     0C 4E 85 F1 | 	sub	fp, #12
2192c     08 68 B0 FD | 	call	#__system___string_cmp
21930     00 FA 0D F2 | 	cmp	result1, #0 wz
21934     00 26 26 56 |  if_ne	not	local01, #0
21938     A7 26 62 FC | 	wrlong	local01, fp
2193c     BC 00 90 FD | 	jmp	#LR__2623
21940                 | LR__2620
21940                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
21940     08 4E 05 F1 | 	add	fp, #8
21944     A7 26 02 FB | 	rdlong	local01, fp
21948     08 4E 85 F1 | 	sub	fp, #8
2194c     1F 26 0E F2 | 	cmp	local01, #31 wz
21950     14 4E 05 A1 |  if_e	add	fp, #20
21954     A7 2A 02 AB |  if_e	rdlong	local03, fp
21958     14 4E 85 A1 |  if_e	sub	fp, #20
2195c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
21960     34 00 90 5D |  if_ne	jmp	#LR__2621
21964     00 26 06 F6 | 	mov	local01, #0
21968     A7 28 02 FB | 	rdlong	local02, fp
2196c     0C 4E 05 F1 | 	add	fp, #12
21970     A7 12 02 FB | 	rdlong	arg01, fp
21974     0C 4E 85 F1 | 	sub	fp, #12
21978     1C C0 BE FD | 	call	#_convertstring
2197c     FD 14 02 F6 | 	mov	arg02, result1
21980     14 13 02 F6 | 	mov	arg01, local02
21984     B0 67 B0 FD | 	call	#__system___string_cmp
21988     00 FA 0D F2 | 	cmp	result1, #0 wz
2198c     00 26 26 56 |  if_ne	not	local01, #0
21990     A7 26 62 FC | 	wrlong	local01, fp
21994     64 00 90 FD | 	jmp	#LR__2623
21998                 | LR__2621
21998                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
21998     08 4E 05 F1 | 	add	fp, #8
2199c     A7 26 02 FB | 	rdlong	local01, fp
219a0     08 4E 85 F1 | 	sub	fp, #8
219a4     2B 26 0E F2 | 	cmp	local01, #43 wz
219a8     14 4E 05 A1 |  if_e	add	fp, #20
219ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
219b0     14 4E 85 A1 |  if_e	sub	fp, #20
219b4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
219b8     3C 00 90 5D |  if_ne	jmp	#LR__2622
219bc     00 26 06 F6 | 	mov	local01, #0
219c0     A7 12 02 FB | 	rdlong	arg01, fp
219c4     D0 BF BE FD | 	call	#_convertstring
219c8     FD 28 02 F6 | 	mov	local02, result1
219cc     0C 4E 05 F1 | 	add	fp, #12
219d0     A7 12 02 FB | 	rdlong	arg01, fp
219d4     0C 4E 85 F1 | 	sub	fp, #12
219d8     BC BF BE FD | 	call	#_convertstring
219dc     FD 14 02 F6 | 	mov	arg02, result1
219e0     14 13 02 F6 | 	mov	arg01, local02
219e4     50 67 B0 FD | 	call	#__system___string_cmp
219e8     00 FA 0D F2 | 	cmp	result1, #0 wz
219ec     00 26 26 56 |  if_ne	not	local01, #0
219f0     A7 26 62 FC | 	wrlong	local01, fp
219f4     04 00 90 FD | 	jmp	#LR__2623
219f8                 | LR__2622
219f8     A7 00 68 FC | 	wrlong	#0, fp
219fc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
219fc                 | LR__2623
219fc     08 4E 05 F1 | 	add	fp, #8
21a00     A7 38 68 FC | 	wrlong	#28, fp
21a04     08 4E 85 F1 | 	sub	fp, #8
21a08     A7 12 02 F6 | 	mov	arg01, fp
21a0c     A8 BE BE FD | 	call	#_push
21a10     A7 F0 03 F6 | 	mov	ptra, fp
21a14     B2 00 A0 FD | 	call	#popregs_
21a18                 | _do_ne_ret
21a18     2D 00 64 FD | 	ret
21a1c                 | 
21a1c                 | ' 
21a1c                 | ' '--------------------------------- OR
21a1c                 | ' 
21a1c                 | ' sub do_or 
21a1c                 | _do_or
21a1c     03 4A 05 F6 | 	mov	COUNT_, #3
21a20     A8 00 A0 FD | 	call	#pushregs_
21a24     18 F0 07 F1 | 	add	ptra, #24
21a28     F4 BD BE FD | 	call	#_pop
21a2c     FD 12 02 F6 | 	mov	arg01, result1
21a30     FE 26 02 F6 | 	mov	local01, result2
21a34     FF 28 02 F6 | 	mov	local02, result3
21a38     0C 4E 05 F1 | 	add	fp, #12
21a3c     A7 12 62 FC | 	wrlong	arg01, fp
21a40     04 4E 05 F1 | 	add	fp, #4
21a44     A7 26 62 FC | 	wrlong	local01, fp
21a48     04 4E 05 F1 | 	add	fp, #4
21a4c     A7 28 62 FC | 	wrlong	local02, fp
21a50     14 4E 85 F1 | 	sub	fp, #20
21a54     C8 BD BE FD | 	call	#_pop
21a58     FF 2A 02 F6 | 	mov	local03, result3
21a5c     A7 FA 61 FC | 	wrlong	result1, fp
21a60     04 4E 05 F1 | 	add	fp, #4
21a64     A7 FC 61 FC | 	wrlong	result2, fp
21a68     04 4E 05 F1 | 	add	fp, #4
21a6c     A7 2A 62 FC | 	wrlong	local03, fp
21a70                 | ' 
21a70                 | ' t2=pop()
21a70                 | ' t1=pop()
21a70                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
21a70     08 4E 85 F1 | 	sub	fp, #8
21a74     1C 2A 0E F2 | 	cmp	local03, #28 wz
21a78     A7 2A 02 AB |  if_e	rdlong	local03, fp
21a7c     A7 2A 62 AC |  if_e	wrlong	local03, fp
21a80     08 4E 05 A1 |  if_e	add	fp, #8
21a84     A7 3A 68 AC |  if_e	wrlong	#29, fp
21a88     08 4E 85 A1 |  if_e	sub	fp, #8
21a8c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
21a8c     14 4E 05 F1 | 	add	fp, #20
21a90     A7 2A 02 FB | 	rdlong	local03, fp
21a94     14 4E 85 F1 | 	sub	fp, #20
21a98     1C 2A 0E F2 | 	cmp	local03, #28 wz
21a9c     18 00 90 5D |  if_ne	jmp	#LR__2630
21aa0     0C 4E 05 F1 | 	add	fp, #12
21aa4     A7 2A 02 FB | 	rdlong	local03, fp
21aa8     A7 2A 62 FC | 	wrlong	local03, fp
21aac     08 4E 05 F1 | 	add	fp, #8
21ab0     A7 3A 68 FC | 	wrlong	#29, fp
21ab4     14 4E 85 F1 | 	sub	fp, #20
21ab8                 | LR__2630
21ab8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
21ab8     08 4E 05 F1 | 	add	fp, #8
21abc     A7 2A 02 FB | 	rdlong	local03, fp
21ac0     08 4E 85 F1 | 	sub	fp, #8
21ac4     1F 2A 0E F2 | 	cmp	local03, #31 wz
21ac8     14 4E 05 51 |  if_ne	add	fp, #20
21acc     A7 28 02 5B |  if_ne	rdlong	local02, fp
21ad0     14 4E 85 51 |  if_ne	sub	fp, #20
21ad4     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
21ad8     08 4E 05 51 |  if_ne	add	fp, #8
21adc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21ae0     08 4E 85 51 |  if_ne	sub	fp, #8
21ae4     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
21ae8     14 4E 05 51 |  if_ne	add	fp, #20
21aec     14 4E 85 51 |  if_ne	sub	fp, #20
21af0     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
21af4     A7 0C 68 AC |  if_e	wrlong	#6, fp
21af8     08 4E 05 A1 |  if_e	add	fp, #8
21afc     A7 FE 69 AC |  if_e	wrlong	#255, fp
21b00     08 4E 85 A1 |  if_e	sub	fp, #8
21b04     18 00 90 AD |  if_e	jmp	#LR__2631
21b08     A7 2A 02 FB | 	rdlong	local03, fp
21b0c     0C 4E 05 F1 | 	add	fp, #12
21b10     A7 26 02 FB | 	rdlong	local01, fp
21b14     0C 4E 85 F1 | 	sub	fp, #12
21b18     13 2B 42 F5 | 	or	local03, local01
21b1c     A7 2A 62 FC | 	wrlong	local03, fp
21b20                 | LR__2631
21b20     A7 12 02 F6 | 	mov	arg01, fp
21b24     90 BD BE FD | 	call	#_push
21b28     A7 F0 03 F6 | 	mov	ptra, fp
21b2c     B2 00 A0 FD | 	call	#popregs_
21b30                 | _do_or_ret
21b30     2D 00 64 FD | 	ret
21b34                 | 
21b34                 | ' 
21b34                 | ' '--------------------------------- plus (+)
21b34                 | ' 
21b34                 | ' sub do_plus 
21b34                 | _do_plus
21b34     05 4A 05 F6 | 	mov	COUNT_, #5
21b38     A8 00 A0 FD | 	call	#pushregs_
21b3c     18 F0 07 F1 | 	add	ptra, #24
21b40     DC BC BE FD | 	call	#_pop
21b44     FD 26 02 F6 | 	mov	local01, result1
21b48     FE 28 02 F6 | 	mov	local02, result2
21b4c     FF 2A 02 F6 | 	mov	local03, result3
21b50     0C 4E 05 F1 | 	add	fp, #12
21b54     A7 26 62 FC | 	wrlong	local01, fp
21b58     04 4E 05 F1 | 	add	fp, #4
21b5c     A7 28 62 FC | 	wrlong	local02, fp
21b60     04 4E 05 F1 | 	add	fp, #4
21b64     A7 2A 62 FC | 	wrlong	local03, fp
21b68     14 4E 85 F1 | 	sub	fp, #20
21b6c     B0 BC BE FD | 	call	#_pop
21b70     FF 2A 02 F6 | 	mov	local03, result3
21b74     A7 FA 61 FC | 	wrlong	result1, fp
21b78     04 4E 05 F1 | 	add	fp, #4
21b7c     A7 FC 61 FC | 	wrlong	result2, fp
21b80     04 4E 05 F1 | 	add	fp, #4
21b84     A7 2A 62 FC | 	wrlong	local03, fp
21b88                 | ' 
21b88                 | ' t2=pop()
21b88                 | ' t1=pop()
21b88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
21b88     08 4E 85 F1 | 	sub	fp, #8
21b8c     1D 2A 0E F2 | 	cmp	local03, #29 wz
21b90     14 4E 05 A1 |  if_e	add	fp, #20
21b94     A7 2C 02 AB |  if_e	rdlong	local04, fp
21b98     14 4E 85 A1 |  if_e	sub	fp, #20
21b9c     16 2B 02 A6 |  if_e	mov	local03, local04
21ba0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21ba4     1C 00 90 5D |  if_ne	jmp	#LR__2640
21ba8     A7 26 02 FB | 	rdlong	local01, fp
21bac     0C 4E 05 F1 | 	add	fp, #12
21bb0     A7 28 02 FB | 	rdlong	local02, fp
21bb4     0C 4E 85 F1 | 	sub	fp, #12
21bb8     14 27 02 F1 | 	add	local01, local02
21bbc     A7 26 62 FC | 	wrlong	local01, fp
21bc0     48 04 90 FD | 	jmp	#LR__2655
21bc4                 | LR__2640
21bc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
21bc4     08 4E 05 F1 | 	add	fp, #8
21bc8     A7 26 02 FB | 	rdlong	local01, fp
21bcc     08 4E 85 F1 | 	sub	fp, #8
21bd0     1D 26 0E F2 | 	cmp	local01, #29 wz
21bd4     14 4E 05 A1 |  if_e	add	fp, #20
21bd8     A7 2C 02 AB |  if_e	rdlong	local04, fp
21bdc     14 4E 85 A1 |  if_e	sub	fp, #20
21be0     16 2B 02 A6 |  if_e	mov	local03, local04
21be4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21be8     28 00 90 5D |  if_ne	jmp	#LR__2641
21bec     A7 26 02 FB | 	rdlong	local01, fp
21bf0     0C 4E 05 F1 | 	add	fp, #12
21bf4     A7 28 02 FB | 	rdlong	local02, fp
21bf8     0C 4E 85 F1 | 	sub	fp, #12
21bfc     14 27 02 F1 | 	add	local01, local02
21c00     A7 26 62 FC | 	wrlong	local01, fp
21c04     08 4E 05 F1 | 	add	fp, #8
21c08     A7 38 68 FC | 	wrlong	#28, fp
21c0c     08 4E 85 F1 | 	sub	fp, #8
21c10     F8 03 90 FD | 	jmp	#LR__2655
21c14                 | LR__2641
21c14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
21c14     08 4E 05 F1 | 	add	fp, #8
21c18     A7 26 02 FB | 	rdlong	local01, fp
21c1c     08 4E 85 F1 | 	sub	fp, #8
21c20     1D 26 0E F2 | 	cmp	local01, #29 wz
21c24     14 4E 05 A1 |  if_e	add	fp, #20
21c28     A7 2C 02 AB |  if_e	rdlong	local04, fp
21c2c     14 4E 85 A1 |  if_e	sub	fp, #20
21c30     16 2B 02 A6 |  if_e	mov	local03, local04
21c34     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21c38     30 00 90 5D |  if_ne	jmp	#LR__2642
21c3c     A7 12 02 FB | 	rdlong	arg01, fp
21c40     44 8F B0 FD | 	call	#__system___float_fromuns
21c44     FD 12 02 F6 | 	mov	arg01, result1
21c48     0C 4E 05 F1 | 	add	fp, #12
21c4c     A7 14 02 FB | 	rdlong	arg02, fp
21c50     0C 4E 85 F1 | 	sub	fp, #12
21c54     64 8F B0 FD | 	call	#__system___float_add
21c58     A7 FA 61 FC | 	wrlong	result1, fp
21c5c     08 4E 05 F1 | 	add	fp, #8
21c60     A7 3C 68 FC | 	wrlong	#30, fp
21c64     08 4E 85 F1 | 	sub	fp, #8
21c68     A0 03 90 FD | 	jmp	#LR__2655
21c6c                 | LR__2642
21c6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
21c6c     08 4E 05 F1 | 	add	fp, #8
21c70     A7 26 02 FB | 	rdlong	local01, fp
21c74     08 4E 85 F1 | 	sub	fp, #8
21c78     1C 26 0E F2 | 	cmp	local01, #28 wz
21c7c     14 4E 05 A1 |  if_e	add	fp, #20
21c80     A7 2C 02 AB |  if_e	rdlong	local04, fp
21c84     14 4E 85 A1 |  if_e	sub	fp, #20
21c88     16 2B 02 A6 |  if_e	mov	local03, local04
21c8c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21c90     1C 00 90 5D |  if_ne	jmp	#LR__2643
21c94     A7 26 02 FB | 	rdlong	local01, fp
21c98     0C 4E 05 F1 | 	add	fp, #12
21c9c     A7 28 02 FB | 	rdlong	local02, fp
21ca0     0C 4E 85 F1 | 	sub	fp, #12
21ca4     14 27 02 F1 | 	add	local01, local02
21ca8     A7 26 62 FC | 	wrlong	local01, fp
21cac     5C 03 90 FD | 	jmp	#LR__2655
21cb0                 | LR__2643
21cb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
21cb0     08 4E 05 F1 | 	add	fp, #8
21cb4     A7 26 02 FB | 	rdlong	local01, fp
21cb8     08 4E 85 F1 | 	sub	fp, #8
21cbc     1C 26 0E F2 | 	cmp	local01, #28 wz
21cc0     14 4E 05 A1 |  if_e	add	fp, #20
21cc4     A7 2C 02 AB |  if_e	rdlong	local04, fp
21cc8     14 4E 85 A1 |  if_e	sub	fp, #20
21ccc     16 2B 02 A6 |  if_e	mov	local03, local04
21cd0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21cd4     1C 00 90 5D |  if_ne	jmp	#LR__2644
21cd8     A7 26 02 FB | 	rdlong	local01, fp
21cdc     0C 4E 05 F1 | 	add	fp, #12
21ce0     A7 28 02 FB | 	rdlong	local02, fp
21ce4     0C 4E 85 F1 | 	sub	fp, #12
21ce8     14 27 02 F1 | 	add	local01, local02
21cec     A7 26 62 FC | 	wrlong	local01, fp
21cf0     18 03 90 FD | 	jmp	#LR__2655
21cf4                 | LR__2644
21cf4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
21cf4     08 4E 05 F1 | 	add	fp, #8
21cf8     A7 26 02 FB | 	rdlong	local01, fp
21cfc     08 4E 85 F1 | 	sub	fp, #8
21d00     1C 26 0E F2 | 	cmp	local01, #28 wz
21d04     14 4E 05 A1 |  if_e	add	fp, #20
21d08     A7 2C 02 AB |  if_e	rdlong	local04, fp
21d0c     14 4E 85 A1 |  if_e	sub	fp, #20
21d10     16 2B 02 A6 |  if_e	mov	local03, local04
21d14     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21d18     40 00 90 5D |  if_ne	jmp	#LR__2645
21d1c     A7 12 02 FB | 	rdlong	arg01, fp
21d20     09 13 52 F6 | 	abs	arg01, arg01 wc
21d24     1F 2E C6 C9 |  if_b	decod	local05, #31
21d28     00 2E 06 36 |  if_ae	mov	local05, #0
21d2c     58 8E B0 FD | 	call	#__system___float_fromuns
21d30     17 FB 61 F5 | 	xor	result1, local05
21d34     FD 12 02 F6 | 	mov	arg01, result1
21d38     0C 4E 05 F1 | 	add	fp, #12
21d3c     A7 14 02 FB | 	rdlong	arg02, fp
21d40     0C 4E 85 F1 | 	sub	fp, #12
21d44     74 8E B0 FD | 	call	#__system___float_add
21d48     A7 FA 61 FC | 	wrlong	result1, fp
21d4c     08 4E 05 F1 | 	add	fp, #8
21d50     A7 3C 68 FC | 	wrlong	#30, fp
21d54     08 4E 85 F1 | 	sub	fp, #8
21d58     B0 02 90 FD | 	jmp	#LR__2655
21d5c                 | LR__2645
21d5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
21d5c     08 4E 05 F1 | 	add	fp, #8
21d60     A7 26 02 FB | 	rdlong	local01, fp
21d64     08 4E 85 F1 | 	sub	fp, #8
21d68     1E 26 0E F2 | 	cmp	local01, #30 wz
21d6c     14 4E 05 A1 |  if_e	add	fp, #20
21d70     A7 2C 02 AB |  if_e	rdlong	local04, fp
21d74     14 4E 85 A1 |  if_e	sub	fp, #20
21d78     16 2B 02 A6 |  if_e	mov	local03, local04
21d7c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21d80     28 00 90 5D |  if_ne	jmp	#LR__2646
21d84     A7 26 02 FB | 	rdlong	local01, fp
21d88     0C 4E 05 F1 | 	add	fp, #12
21d8c     A7 12 02 FB | 	rdlong	arg01, fp
21d90     0C 4E 85 F1 | 	sub	fp, #12
21d94     F0 8D B0 FD | 	call	#__system___float_fromuns
21d98     FD 14 02 F6 | 	mov	arg02, result1
21d9c     13 13 02 F6 | 	mov	arg01, local01
21da0     18 8E B0 FD | 	call	#__system___float_add
21da4     A7 FA 61 FC | 	wrlong	result1, fp
21da8     60 02 90 FD | 	jmp	#LR__2655
21dac                 | LR__2646
21dac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
21dac     08 4E 05 F1 | 	add	fp, #8
21db0     A7 26 02 FB | 	rdlong	local01, fp
21db4     08 4E 85 F1 | 	sub	fp, #8
21db8     1E 26 0E F2 | 	cmp	local01, #30 wz
21dbc     14 4E 05 A1 |  if_e	add	fp, #20
21dc0     A7 2C 02 AB |  if_e	rdlong	local04, fp
21dc4     14 4E 85 A1 |  if_e	sub	fp, #20
21dc8     16 2B 02 A6 |  if_e	mov	local03, local04
21dcc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21dd0     38 00 90 5D |  if_ne	jmp	#LR__2647
21dd4     A7 26 02 FB | 	rdlong	local01, fp
21dd8     0C 4E 05 F1 | 	add	fp, #12
21ddc     A7 12 02 FB | 	rdlong	arg01, fp
21de0     0C 4E 85 F1 | 	sub	fp, #12
21de4     09 13 52 F6 | 	abs	arg01, arg01 wc
21de8     1F 2E C6 C9 |  if_b	decod	local05, #31
21dec     00 2E 06 36 |  if_ae	mov	local05, #0
21df0     94 8D B0 FD | 	call	#__system___float_fromuns
21df4     17 FB 61 F5 | 	xor	result1, local05
21df8     FD 14 02 F6 | 	mov	arg02, result1
21dfc     13 13 02 F6 | 	mov	arg01, local01
21e00     B8 8D B0 FD | 	call	#__system___float_add
21e04     A7 FA 61 FC | 	wrlong	result1, fp
21e08     00 02 90 FD | 	jmp	#LR__2655
21e0c                 | LR__2647
21e0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
21e0c     08 4E 05 F1 | 	add	fp, #8
21e10     A7 26 02 FB | 	rdlong	local01, fp
21e14     08 4E 85 F1 | 	sub	fp, #8
21e18     1E 26 0E F2 | 	cmp	local01, #30 wz
21e1c     14 4E 05 A1 |  if_e	add	fp, #20
21e20     A7 2C 02 AB |  if_e	rdlong	local04, fp
21e24     14 4E 85 A1 |  if_e	sub	fp, #20
21e28     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
21e2c     1C 00 90 5D |  if_ne	jmp	#LR__2648
21e30     A7 12 02 FB | 	rdlong	arg01, fp
21e34     0C 4E 05 F1 | 	add	fp, #12
21e38     A7 14 02 FB | 	rdlong	arg02, fp
21e3c     0C 4E 85 F1 | 	sub	fp, #12
21e40     78 8D B0 FD | 	call	#__system___float_add
21e44     A7 FA 61 FC | 	wrlong	result1, fp
21e48     C0 01 90 FD | 	jmp	#LR__2655
21e4c                 | LR__2648
21e4c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
21e4c     08 4E 05 F1 | 	add	fp, #8
21e50     A7 26 02 FB | 	rdlong	local01, fp
21e54     08 4E 85 F1 | 	sub	fp, #8
21e58     1F 26 0E F2 | 	cmp	local01, #31 wz
21e5c     24 00 90 5D |  if_ne	jmp	#LR__2649
21e60     14 4E 05 F1 | 	add	fp, #20
21e64     A7 2A 02 FB | 	rdlong	local03, fp
21e68     14 4E 85 F1 | 	sub	fp, #20
21e6c     1F 2A 0E F2 | 	cmp	local03, #31 wz
21e70     A7 04 68 5C |  if_ne	wrlong	#2, fp
21e74     08 4E 05 51 |  if_ne	add	fp, #8
21e78     A7 FE 69 5C |  if_ne	wrlong	#255, fp
21e7c     08 4E 85 51 |  if_ne	sub	fp, #8
21e80     88 01 90 5D |  if_ne	jmp	#LR__2655
21e84                 | LR__2649
21e84                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
21e84     14 4E 05 F1 | 	add	fp, #20
21e88     A7 26 02 FB | 	rdlong	local01, fp
21e8c     14 4E 85 F1 | 	sub	fp, #20
21e90     1F 26 0E F2 | 	cmp	local01, #31 wz
21e94     24 00 90 5D |  if_ne	jmp	#LR__2650
21e98     08 4E 05 F1 | 	add	fp, #8
21e9c     A7 2A 02 FB | 	rdlong	local03, fp
21ea0     08 4E 85 F1 | 	sub	fp, #8
21ea4     1F 2A 0E F2 | 	cmp	local03, #31 wz
21ea8     A7 04 68 5C |  if_ne	wrlong	#2, fp
21eac     08 4E 05 51 |  if_ne	add	fp, #8
21eb0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
21eb4     08 4E 85 51 |  if_ne	sub	fp, #8
21eb8     50 01 90 5D |  if_ne	jmp	#LR__2655
21ebc                 | LR__2650
21ebc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
21ebc     08 4E 05 F1 | 	add	fp, #8
21ec0     A7 26 02 FB | 	rdlong	local01, fp
21ec4     08 4E 85 F1 | 	sub	fp, #8
21ec8     1F 26 0E F2 | 	cmp	local01, #31 wz
21ecc     14 4E 05 A1 |  if_e	add	fp, #20
21ed0     A7 2A 02 AB |  if_e	rdlong	local03, fp
21ed4     14 4E 85 A1 |  if_e	sub	fp, #20
21ed8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
21edc     1C 00 90 5D |  if_ne	jmp	#LR__2651
21ee0     A7 12 02 FB | 	rdlong	arg01, fp
21ee4     0C 4E 05 F1 | 	add	fp, #12
21ee8     A7 14 02 FB | 	rdlong	arg02, fp
21eec     0C 4E 85 F1 | 	sub	fp, #12
21ef0     78 62 B0 FD | 	call	#__system___string_concat
21ef4     A7 FA 61 FC | 	wrlong	result1, fp
21ef8     10 01 90 FD | 	jmp	#LR__2655
21efc                 | LR__2651
21efc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
21efc     08 4E 05 F1 | 	add	fp, #8
21f00     A7 26 02 FB | 	rdlong	local01, fp
21f04     08 4E 85 F1 | 	sub	fp, #8
21f08     2B 26 0E F2 | 	cmp	local01, #43 wz
21f0c     14 4E 05 A1 |  if_e	add	fp, #20
21f10     A7 2A 02 AB |  if_e	rdlong	local03, fp
21f14     14 4E 85 A1 |  if_e	sub	fp, #20
21f18     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
21f1c     30 00 90 5D |  if_ne	jmp	#LR__2652
21f20     A7 12 02 FB | 	rdlong	arg01, fp
21f24     70 BA BE FD | 	call	#_convertstring
21f28     FD 12 02 F6 | 	mov	arg01, result1
21f2c     0C 4E 05 F1 | 	add	fp, #12
21f30     A7 14 02 FB | 	rdlong	arg02, fp
21f34     0C 4E 85 F1 | 	sub	fp, #12
21f38     30 62 B0 FD | 	call	#__system___string_concat
21f3c     A7 FA 61 FC | 	wrlong	result1, fp
21f40     08 4E 05 F1 | 	add	fp, #8
21f44     A7 3E 68 FC | 	wrlong	#31, fp
21f48     08 4E 85 F1 | 	sub	fp, #8
21f4c     BC 00 90 FD | 	jmp	#LR__2655
21f50                 | LR__2652
21f50                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
21f50     08 4E 05 F1 | 	add	fp, #8
21f54     A7 26 02 FB | 	rdlong	local01, fp
21f58     08 4E 85 F1 | 	sub	fp, #8
21f5c     1F 26 0E F2 | 	cmp	local01, #31 wz
21f60     14 4E 05 A1 |  if_e	add	fp, #20
21f64     A7 2A 02 AB |  if_e	rdlong	local03, fp
21f68     14 4E 85 A1 |  if_e	sub	fp, #20
21f6c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
21f70     28 00 90 5D |  if_ne	jmp	#LR__2653
21f74     A7 26 02 FB | 	rdlong	local01, fp
21f78     0C 4E 05 F1 | 	add	fp, #12
21f7c     A7 12 02 FB | 	rdlong	arg01, fp
21f80     0C 4E 85 F1 | 	sub	fp, #12
21f84     10 BA BE FD | 	call	#_convertstring
21f88     FD 14 02 F6 | 	mov	arg02, result1
21f8c     13 13 02 F6 | 	mov	arg01, local01
21f90     D8 61 B0 FD | 	call	#__system___string_concat
21f94     A7 FA 61 FC | 	wrlong	result1, fp
21f98     70 00 90 FD | 	jmp	#LR__2655
21f9c                 | LR__2653
21f9c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
21f9c     08 4E 05 F1 | 	add	fp, #8
21fa0     A7 26 02 FB | 	rdlong	local01, fp
21fa4     08 4E 85 F1 | 	sub	fp, #8
21fa8     2B 26 0E F2 | 	cmp	local01, #43 wz
21fac     14 4E 05 A1 |  if_e	add	fp, #20
21fb0     A7 2A 02 AB |  if_e	rdlong	local03, fp
21fb4     14 4E 85 A1 |  if_e	sub	fp, #20
21fb8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
21fbc     3C 00 90 5D |  if_ne	jmp	#LR__2654
21fc0     A7 12 02 FB | 	rdlong	arg01, fp
21fc4     D0 B9 BE FD | 	call	#_convertstring
21fc8     FD 26 02 F6 | 	mov	local01, result1
21fcc     0C 4E 05 F1 | 	add	fp, #12
21fd0     A7 12 02 FB | 	rdlong	arg01, fp
21fd4     0C 4E 85 F1 | 	sub	fp, #12
21fd8     BC B9 BE FD | 	call	#_convertstring
21fdc     FD 14 02 F6 | 	mov	arg02, result1
21fe0     13 13 02 F6 | 	mov	arg01, local01
21fe4     84 61 B0 FD | 	call	#__system___string_concat
21fe8     A7 FA 61 FC | 	wrlong	result1, fp
21fec     08 4E 05 F1 | 	add	fp, #8
21ff0     A7 3E 68 FC | 	wrlong	#31, fp
21ff4     08 4E 85 F1 | 	sub	fp, #8
21ff8     10 00 90 FD | 	jmp	#LR__2655
21ffc                 | LR__2654
21ffc     A7 08 68 FC | 	wrlong	#4, fp
22000     08 4E 05 F1 | 	add	fp, #8
22004     A7 FE 69 FC | 	wrlong	#255, fp
22008     08 4E 85 F1 | 	sub	fp, #8
2200c                 | LR__2655
2200c     A7 12 02 F6 | 	mov	arg01, fp
22010     A4 B8 BE FD | 	call	#_push
22014     A7 F0 03 F6 | 	mov	ptra, fp
22018     B2 00 A0 FD | 	call	#popregs_
2201c                 | _do_plus_ret
2201c     2D 00 64 FD | 	ret
22020                 | 
22020                 | ' 
22020                 | ' '--------------------------------- power (^)
22020                 | ' 
22020                 | ' sub do_power 
22020                 | _do_power
22020     02 4A 05 F6 | 	mov	COUNT_, #2
22024     A8 00 A0 FD | 	call	#pushregs_
22028     18 F0 07 F1 | 	add	ptra, #24
2202c     F0 B7 BE FD | 	call	#_pop
22030     FD 14 02 F6 | 	mov	arg02, result1
22034     FE 12 02 F6 | 	mov	arg01, result2
22038     FF 26 02 F6 | 	mov	local01, result3
2203c     0C 4E 05 F1 | 	add	fp, #12
22040     A7 14 62 FC | 	wrlong	arg02, fp
22044     04 4E 05 F1 | 	add	fp, #4
22048     A7 12 62 FC | 	wrlong	arg01, fp
2204c     04 4E 05 F1 | 	add	fp, #4
22050     A7 26 62 FC | 	wrlong	local01, fp
22054     14 4E 85 F1 | 	sub	fp, #20
22058     C4 B7 BE FD | 	call	#_pop
2205c     A7 FA 61 FC | 	wrlong	result1, fp
22060     04 4E 05 F1 | 	add	fp, #4
22064     A7 FC 61 FC | 	wrlong	result2, fp
22068     04 4E 05 F1 | 	add	fp, #4
2206c     A7 FE 61 FC | 	wrlong	result3, fp
22070                 | ' 
22070                 | ' t2=pop()
22070                 | ' t1=pop()
22070                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
22070     08 4E 85 F1 | 	sub	fp, #8
22074     1F FE 0D F2 | 	cmp	result3, #31 wz
22078     14 4E 05 51 |  if_ne	add	fp, #20
2207c     A7 26 02 5B |  if_ne	rdlong	local01, fp
22080     14 4E 85 51 |  if_ne	sub	fp, #20
22084     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
22088     A7 18 68 AC |  if_e	wrlong	#12, fp
2208c     08 4E 05 A1 |  if_e	add	fp, #8
22090     A7 FE 69 AC |  if_e	wrlong	#255, fp
22094     08 4E 85 A1 |  if_e	sub	fp, #8
22098     38 01 90 AD |  if_e	jmp	#LR__2665
2209c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
2209c     08 4E 05 F1 | 	add	fp, #8
220a0     A7 14 02 FB | 	rdlong	arg02, fp
220a4     08 4E 85 F1 | 	sub	fp, #8
220a8     1C 14 0E F2 | 	cmp	arg02, #28 wz
220ac     28 00 90 5D |  if_ne	jmp	#LR__2660
220b0     08 4E 05 F1 | 	add	fp, #8
220b4     A7 3C 68 FC | 	wrlong	#30, fp
220b8     08 4E 85 F1 | 	sub	fp, #8
220bc     A7 12 02 FB | 	rdlong	arg01, fp
220c0     09 13 52 F6 | 	abs	arg01, arg01 wc
220c4     1F 28 C6 C9 |  if_b	decod	local02, #31
220c8     00 28 06 36 |  if_ae	mov	local02, #0
220cc     B8 8A B0 FD | 	call	#__system___float_fromuns
220d0     14 FB 61 F5 | 	xor	result1, local02
220d4     A7 FA 61 FC | 	wrlong	result1, fp
220d8                 | LR__2660
220d8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
220d8     08 4E 05 F1 | 	add	fp, #8
220dc     A7 14 02 FB | 	rdlong	arg02, fp
220e0     08 4E 85 F1 | 	sub	fp, #8
220e4     1D 14 0E F2 | 	cmp	arg02, #29 wz
220e8     18 00 90 5D |  if_ne	jmp	#LR__2661
220ec     08 4E 05 F1 | 	add	fp, #8
220f0     A7 3C 68 FC | 	wrlong	#30, fp
220f4     08 4E 85 F1 | 	sub	fp, #8
220f8     A7 12 02 FB | 	rdlong	arg01, fp
220fc     88 8A B0 FD | 	call	#__system___float_fromuns
22100     A7 FA 61 FC | 	wrlong	result1, fp
22104                 | LR__2661
22104                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
22104     14 4E 05 F1 | 	add	fp, #20
22108     A7 14 02 FB | 	rdlong	arg02, fp
2210c     14 4E 85 F1 | 	sub	fp, #20
22110     1C 14 0E F2 | 	cmp	arg02, #28 wz
22114     34 00 90 5D |  if_ne	jmp	#LR__2662
22118     14 4E 05 F1 | 	add	fp, #20
2211c     A7 3C 68 FC | 	wrlong	#30, fp
22120     08 4E 85 F1 | 	sub	fp, #8
22124     A7 12 02 FB | 	rdlong	arg01, fp
22128     0C 4E 85 F1 | 	sub	fp, #12
2212c     09 13 52 F6 | 	abs	arg01, arg01 wc
22130     1F 28 C6 C9 |  if_b	decod	local02, #31
22134     00 28 06 36 |  if_ae	mov	local02, #0
22138     4C 8A B0 FD | 	call	#__system___float_fromuns
2213c     14 FB 61 F5 | 	xor	result1, local02
22140     0C 4E 05 F1 | 	add	fp, #12
22144     A7 FA 61 FC | 	wrlong	result1, fp
22148     0C 4E 85 F1 | 	sub	fp, #12
2214c                 | LR__2662
2214c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
2214c     14 4E 05 F1 | 	add	fp, #20
22150     A7 14 02 FB | 	rdlong	arg02, fp
22154     14 4E 85 F1 | 	sub	fp, #20
22158     1D 14 0E F2 | 	cmp	arg02, #29 wz
2215c     24 00 90 5D |  if_ne	jmp	#LR__2663
22160     14 4E 05 F1 | 	add	fp, #20
22164     A7 3C 68 FC | 	wrlong	#30, fp
22168     08 4E 85 F1 | 	sub	fp, #8
2216c     A7 12 02 FB | 	rdlong	arg01, fp
22170     0C 4E 85 F1 | 	sub	fp, #12
22174     10 8A B0 FD | 	call	#__system___float_fromuns
22178     0C 4E 05 F1 | 	add	fp, #12
2217c     A7 FA 61 FC | 	wrlong	result1, fp
22180     0C 4E 85 F1 | 	sub	fp, #12
22184                 | LR__2663
22184                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
22184     08 4E 05 F1 | 	add	fp, #8
22188     A7 14 02 FB | 	rdlong	arg02, fp
2218c     08 4E 85 F1 | 	sub	fp, #8
22190     1E 14 0E F2 | 	cmp	arg02, #30 wz
22194     14 4E 05 A1 |  if_e	add	fp, #20
22198     A7 26 02 AB |  if_e	rdlong	local01, fp
2219c     14 4E 85 A1 |  if_e	sub	fp, #20
221a0     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
221a4     1C 00 90 5D |  if_ne	jmp	#LR__2664
221a8     A7 12 02 FB | 	rdlong	arg01, fp
221ac     0C 4E 05 F1 | 	add	fp, #12
221b0     A7 14 02 FB | 	rdlong	arg02, fp
221b4     0C 4E 85 F1 | 	sub	fp, #12
221b8     DC 9C B0 FD | 	call	#__system____builtin_powf
221bc     A7 FA 61 FC | 	wrlong	result1, fp
221c0     10 00 90 FD | 	jmp	#LR__2665
221c4                 | LR__2664
221c4     A7 1A 68 FC | 	wrlong	#13, fp
221c8     08 4E 05 F1 | 	add	fp, #8
221cc     A7 FE 69 FC | 	wrlong	#255, fp
221d0     08 4E 85 F1 | 	sub	fp, #8
221d4                 | LR__2665
221d4     A7 12 02 F6 | 	mov	arg01, fp
221d8     DC B6 BE FD | 	call	#_push
221dc     A7 F0 03 F6 | 	mov	ptra, fp
221e0     B2 00 A0 FD | 	call	#popregs_
221e4                 | _do_power_ret
221e4     2D 00 64 FD | 	ret
221e8                 | 
221e8                 | ' 
221e8                 | ' '--------------------------------- SHL
221e8                 | ' 
221e8                 | ' sub do_shl 
221e8                 | _do_shl
221e8     03 4A 05 F6 | 	mov	COUNT_, #3
221ec     A8 00 A0 FD | 	call	#pushregs_
221f0     18 F0 07 F1 | 	add	ptra, #24
221f4     28 B6 BE FD | 	call	#_pop
221f8     FD 12 02 F6 | 	mov	arg01, result1
221fc     FE 26 02 F6 | 	mov	local01, result2
22200     FF 28 02 F6 | 	mov	local02, result3
22204     0C 4E 05 F1 | 	add	fp, #12
22208     A7 12 62 FC | 	wrlong	arg01, fp
2220c     04 4E 05 F1 | 	add	fp, #4
22210     A7 26 62 FC | 	wrlong	local01, fp
22214     04 4E 05 F1 | 	add	fp, #4
22218     A7 28 62 FC | 	wrlong	local02, fp
2221c     14 4E 85 F1 | 	sub	fp, #20
22220     FC B5 BE FD | 	call	#_pop
22224     FF 2A 02 F6 | 	mov	local03, result3
22228     A7 FA 61 FC | 	wrlong	result1, fp
2222c     04 4E 05 F1 | 	add	fp, #4
22230     A7 FC 61 FC | 	wrlong	result2, fp
22234     04 4E 05 F1 | 	add	fp, #4
22238     A7 2A 62 FC | 	wrlong	local03, fp
2223c                 | ' 
2223c                 | ' t2=pop()
2223c                 | ' t1=pop()
2223c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
2223c     08 4E 85 F1 | 	sub	fp, #8
22240     1C 2A 0E F2 | 	cmp	local03, #28 wz
22244     A7 2A 02 AB |  if_e	rdlong	local03, fp
22248     A7 2A 62 AC |  if_e	wrlong	local03, fp
2224c     08 4E 05 A1 |  if_e	add	fp, #8
22250     A7 3A 68 AC |  if_e	wrlong	#29, fp
22254     08 4E 85 A1 |  if_e	sub	fp, #8
22258                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
22258     14 4E 05 F1 | 	add	fp, #20
2225c     A7 2A 02 FB | 	rdlong	local03, fp
22260     14 4E 85 F1 | 	sub	fp, #20
22264     1C 2A 0E F2 | 	cmp	local03, #28 wz
22268     18 00 90 5D |  if_ne	jmp	#LR__2670
2226c     0C 4E 05 F1 | 	add	fp, #12
22270     A7 2A 02 FB | 	rdlong	local03, fp
22274     A7 2A 62 FC | 	wrlong	local03, fp
22278     08 4E 05 F1 | 	add	fp, #8
2227c     A7 3A 68 FC | 	wrlong	#29, fp
22280     14 4E 85 F1 | 	sub	fp, #20
22284                 | LR__2670
22284                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
22284     08 4E 05 F1 | 	add	fp, #8
22288     A7 2A 02 FB | 	rdlong	local03, fp
2228c     08 4E 85 F1 | 	sub	fp, #8
22290     1F 2A 0E F2 | 	cmp	local03, #31 wz
22294     14 4E 05 51 |  if_ne	add	fp, #20
22298     A7 28 02 5B |  if_ne	rdlong	local02, fp
2229c     14 4E 85 51 |  if_ne	sub	fp, #20
222a0     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
222a4     08 4E 05 51 |  if_ne	add	fp, #8
222a8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
222ac     08 4E 85 51 |  if_ne	sub	fp, #8
222b0     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
222b4     14 4E 05 51 |  if_ne	add	fp, #20
222b8     14 4E 85 51 |  if_ne	sub	fp, #20
222bc     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
222c0     A7 0C 68 AC |  if_e	wrlong	#6, fp
222c4     08 4E 05 A1 |  if_e	add	fp, #8
222c8     A7 FE 69 AC |  if_e	wrlong	#255, fp
222cc     08 4E 85 A1 |  if_e	sub	fp, #8
222d0     18 00 90 AD |  if_e	jmp	#LR__2671
222d4     A7 2A 02 FB | 	rdlong	local03, fp
222d8     0C 4E 05 F1 | 	add	fp, #12
222dc     A7 26 02 FB | 	rdlong	local01, fp
222e0     0C 4E 85 F1 | 	sub	fp, #12
222e4     13 2B 62 F0 | 	shl	local03, local01
222e8     A7 2A 62 FC | 	wrlong	local03, fp
222ec                 | LR__2671
222ec     A7 12 02 F6 | 	mov	arg01, fp
222f0     C4 B5 BE FD | 	call	#_push
222f4     A7 F0 03 F6 | 	mov	ptra, fp
222f8     B2 00 A0 FD | 	call	#popregs_
222fc                 | _do_shl_ret
222fc     2D 00 64 FD | 	ret
22300                 | 
22300                 | ' 
22300                 | ' '--------------------------------- SHR
22300                 | ' 
22300                 | ' sub do_shr 
22300                 | _do_shr
22300     03 4A 05 F6 | 	mov	COUNT_, #3
22304     A8 00 A0 FD | 	call	#pushregs_
22308     18 F0 07 F1 | 	add	ptra, #24
2230c     10 B5 BE FD | 	call	#_pop
22310     FD 12 02 F6 | 	mov	arg01, result1
22314     FE 26 02 F6 | 	mov	local01, result2
22318     FF 28 02 F6 | 	mov	local02, result3
2231c     0C 4E 05 F1 | 	add	fp, #12
22320     A7 12 62 FC | 	wrlong	arg01, fp
22324     04 4E 05 F1 | 	add	fp, #4
22328     A7 26 62 FC | 	wrlong	local01, fp
2232c     04 4E 05 F1 | 	add	fp, #4
22330     A7 28 62 FC | 	wrlong	local02, fp
22334     14 4E 85 F1 | 	sub	fp, #20
22338     E4 B4 BE FD | 	call	#_pop
2233c     FF 2A 02 F6 | 	mov	local03, result3
22340     A7 FA 61 FC | 	wrlong	result1, fp
22344     04 4E 05 F1 | 	add	fp, #4
22348     A7 FC 61 FC | 	wrlong	result2, fp
2234c     04 4E 05 F1 | 	add	fp, #4
22350     A7 2A 62 FC | 	wrlong	local03, fp
22354                 | ' 
22354                 | ' t2=pop()
22354                 | ' t1=pop()
22354                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
22354     08 4E 85 F1 | 	sub	fp, #8
22358     1C 2A 0E F2 | 	cmp	local03, #28 wz
2235c     A7 2A 02 AB |  if_e	rdlong	local03, fp
22360     A7 2A 62 AC |  if_e	wrlong	local03, fp
22364     08 4E 05 A1 |  if_e	add	fp, #8
22368     A7 3A 68 AC |  if_e	wrlong	#29, fp
2236c     08 4E 85 A1 |  if_e	sub	fp, #8
22370                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
22370     14 4E 05 F1 | 	add	fp, #20
22374     A7 2A 02 FB | 	rdlong	local03, fp
22378     14 4E 85 F1 | 	sub	fp, #20
2237c     1C 2A 0E F2 | 	cmp	local03, #28 wz
22380     18 00 90 5D |  if_ne	jmp	#LR__2680
22384     0C 4E 05 F1 | 	add	fp, #12
22388     A7 2A 02 FB | 	rdlong	local03, fp
2238c     A7 2A 62 FC | 	wrlong	local03, fp
22390     08 4E 05 F1 | 	add	fp, #8
22394     A7 3A 68 FC | 	wrlong	#29, fp
22398     14 4E 85 F1 | 	sub	fp, #20
2239c                 | LR__2680
2239c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
2239c     08 4E 05 F1 | 	add	fp, #8
223a0     A7 2A 02 FB | 	rdlong	local03, fp
223a4     08 4E 85 F1 | 	sub	fp, #8
223a8     1F 2A 0E F2 | 	cmp	local03, #31 wz
223ac     14 4E 05 51 |  if_ne	add	fp, #20
223b0     A7 28 02 5B |  if_ne	rdlong	local02, fp
223b4     14 4E 85 51 |  if_ne	sub	fp, #20
223b8     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
223bc     08 4E 05 51 |  if_ne	add	fp, #8
223c0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
223c4     08 4E 85 51 |  if_ne	sub	fp, #8
223c8     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
223cc     14 4E 05 51 |  if_ne	add	fp, #20
223d0     14 4E 85 51 |  if_ne	sub	fp, #20
223d4     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
223d8     A7 0C 68 AC |  if_e	wrlong	#6, fp
223dc     08 4E 05 A1 |  if_e	add	fp, #8
223e0     A7 FE 69 AC |  if_e	wrlong	#255, fp
223e4     08 4E 85 A1 |  if_e	sub	fp, #8
223e8     18 00 90 AD |  if_e	jmp	#LR__2681
223ec     A7 2A 02 FB | 	rdlong	local03, fp
223f0     0C 4E 05 F1 | 	add	fp, #12
223f4     A7 26 02 FB | 	rdlong	local01, fp
223f8     0C 4E 85 F1 | 	sub	fp, #12
223fc     13 2B 42 F0 | 	shr	local03, local01
22400     A7 2A 62 FC | 	wrlong	local03, fp
22404                 | LR__2681
22404     A7 12 02 F6 | 	mov	arg01, fp
22408     AC B4 BE FD | 	call	#_push
2240c     A7 F0 03 F6 | 	mov	ptra, fp
22410     B2 00 A0 FD | 	call	#popregs_
22414                 | _do_shr_ret
22414     2D 00 64 FD | 	ret
22418                 | 
22418                 | ' 
22418                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
22418                 | ' 
22418                 | ' ''----------------------------------------------------------------------------------------------------
22418                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
22418                 | ' ''----------------------------------------------------------------------------------------------------
22418                 | ' 
22418                 | ' ''--------------------------- Command function pointers
22418                 | ' 
22418                 | ' sub init_commands
22418                 | _init_commands
22418                 | ' 
22418                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
22418     00 00 06 F6 | 	mov	_var01, #0
2241c     97 16 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
22420                 | LR__2690
22420     00 FB 01 F6 | 	mov	result1, _var01
22424     02 FA 65 F0 | 	shl	result1, #2
22428     43 00 00 FF 
2242c     80 E4 05 F1 | 	add	objptr, ##34432
22430     F2 FA 01 F1 | 	add	result1, objptr
22434     43 00 00 FF 
22438     80 E4 85 F1 | 	sub	objptr, ##34432
2243c     FD E4 61 FC | 	wrlong	objptr, result1
22440     01 00 06 F1 | 	add	_var01, #1
22444     00 01 56 F2 | 	cmps	_var01, #256 wc
22448     D4 FF 9F CD |  if_b	jmp	#LR__2690
2244c                 | LR__2691
2244c     F2 FA 01 F6 | 	mov	result1, objptr
22450     14 FA 25 F4 | 	bith	result1, #20
22454     43 00 00 FF 
22458     84 E4 05 F1 | 	add	objptr, ##34436
2245c     F2 FA 61 FC | 	wrlong	result1, objptr
22460     43 00 00 FF 
22464     84 E4 85 F1 | 	sub	objptr, ##34436
22468     F2 FA 01 F6 | 	mov	result1, objptr
2246c     15 FA 25 F4 | 	bith	result1, #21
22470     43 00 00 FF 
22474     88 E4 05 F1 | 	add	objptr, ##34440
22478     F2 FA 61 FC | 	wrlong	result1, objptr
2247c     43 00 00 FF 
22480     88 E4 85 F1 | 	sub	objptr, ##34440
22484     F2 FA 01 F6 | 	mov	result1, objptr
22488     34 FA 25 F4 | 	bith	result1, #52
2248c     43 00 00 FF 
22490     8C E4 05 F1 | 	add	objptr, ##34444
22494     F2 FA 61 FC | 	wrlong	result1, objptr
22498     43 00 00 FF 
2249c     8C E4 85 F1 | 	sub	objptr, ##34444
224a0     F2 FA 01 F6 | 	mov	result1, objptr
224a4     16 FA 25 F4 | 	bith	result1, #22
224a8     43 00 00 FF 
224ac     94 E4 05 F1 | 	add	objptr, ##34452
224b0     F2 FA 61 FC | 	wrlong	result1, objptr
224b4     43 00 00 FF 
224b8     94 E4 85 F1 | 	sub	objptr, ##34452
224bc     F2 FA 01 F6 | 	mov	result1, objptr
224c0     00 28 00 FF 
224c4     00 FA 45 F5 | 	or	result1, ##5242880
224c8     43 00 00 FF 
224cc     98 E4 05 F1 | 	add	objptr, ##34456
224d0     F2 FA 61 FC | 	wrlong	result1, objptr
224d4     43 00 00 FF 
224d8     98 E4 85 F1 | 	sub	objptr, ##34456
224dc     F2 FA 01 F6 | 	mov	result1, objptr
224e0     35 FA 25 F4 | 	bith	result1, #53
224e4     43 00 00 FF 
224e8     9C E4 05 F1 | 	add	objptr, ##34460
224ec     F2 FA 61 FC | 	wrlong	result1, objptr
224f0     43 00 00 FF 
224f4     9C E4 85 F1 | 	sub	objptr, ##34460
224f8     F2 FA 01 F6 | 	mov	result1, objptr
224fc     54 FA 25 F4 | 	bith	result1, #84
22500     43 00 00 FF 
22504     A0 E4 05 F1 | 	add	objptr, ##34464
22508     F2 FA 61 FC | 	wrlong	result1, objptr
2250c     43 00 00 FF 
22510     A0 E4 85 F1 | 	sub	objptr, ##34464
22514     F2 FA 01 F6 | 	mov	result1, objptr
22518     17 FA 25 F4 | 	bith	result1, #23
2251c     43 00 00 FF 
22520     A4 E4 05 F1 | 	add	objptr, ##34468
22524     F2 FA 61 FC | 	wrlong	result1, objptr
22528     43 00 00 FF 
2252c     A4 E4 85 F1 | 	sub	objptr, ##34468
22530     F2 FA 01 F6 | 	mov	result1, objptr
22534     00 48 00 FF 
22538     00 FA 45 F5 | 	or	result1, ##9437184
2253c     43 00 00 FF 
22540     A8 E4 05 F1 | 	add	objptr, ##34472
22544     F2 FA 61 FC | 	wrlong	result1, objptr
22548     43 00 00 FF 
2254c     A8 E4 85 F1 | 	sub	objptr, ##34472
22550     F2 FA 01 F6 | 	mov	result1, objptr
22554     00 50 00 FF 
22558     00 FA 45 F5 | 	or	result1, ##10485760
2255c     43 00 00 FF 
22560     AC E4 05 F1 | 	add	objptr, ##34476
22564     F2 FA 61 FC | 	wrlong	result1, objptr
22568     43 00 00 FF 
2256c     AC E4 85 F1 | 	sub	objptr, ##34476
22570     F2 FA 01 F6 | 	mov	result1, objptr
22574     00 58 00 FF 
22578     00 FA 45 F5 | 	or	result1, ##11534336
2257c     43 00 00 FF 
22580     B0 E4 05 F1 | 	add	objptr, ##34480
22584     F2 FA 61 FC | 	wrlong	result1, objptr
22588     43 00 00 FF 
2258c     B0 E4 85 F1 | 	sub	objptr, ##34480
22590     F2 FA 01 F6 | 	mov	result1, objptr
22594     36 FA 25 F4 | 	bith	result1, #54
22598     43 00 00 FF 
2259c     C4 E4 05 F1 | 	add	objptr, ##34500
225a0     F2 FA 61 FC | 	wrlong	result1, objptr
225a4     43 00 00 FF 
225a8     C4 E4 85 F1 | 	sub	objptr, ##34500
225ac     F2 FA 01 F6 | 	mov	result1, objptr
225b0     00 68 00 FF 
225b4     00 FA 45 F5 | 	or	result1, ##13631488
225b8     43 00 00 FF 
225bc     F4 E4 05 F1 | 	add	objptr, ##34548
225c0     F2 FA 61 FC | 	wrlong	result1, objptr
225c4     43 00 00 FF 
225c8     F4 E4 85 F1 | 	sub	objptr, ##34548
225cc     F2 FA 01 F6 | 	mov	result1, objptr
225d0     00 68 00 FF 
225d4     00 FA 45 F5 | 	or	result1, ##13631488
225d8     43 00 00 FF 
225dc     F0 E4 05 F1 | 	add	objptr, ##34544
225e0     F2 FA 61 FC | 	wrlong	result1, objptr
225e4     43 00 00 FF 
225e8     F0 E4 85 F1 | 	sub	objptr, ##34544
225ec     F2 FA 01 F6 | 	mov	result1, objptr
225f0     00 68 00 FF 
225f4     00 FA 45 F5 | 	or	result1, ##13631488
225f8     43 00 00 FF 
225fc     F8 E4 05 F1 | 	add	objptr, ##34552
22600     F2 FA 61 FC | 	wrlong	result1, objptr
22604     43 00 00 FF 
22608     F8 E4 85 F1 | 	sub	objptr, ##34552
2260c     F2 FA 01 F6 | 	mov	result1, objptr
22610     00 68 00 FF 
22614     00 FA 45 F5 | 	or	result1, ##13631488
22618     43 00 00 FF 
2261c     FC E4 05 F1 | 	add	objptr, ##34556
22620     F2 FA 61 FC | 	wrlong	result1, objptr
22624     43 00 00 FF 
22628     FC E4 85 F1 | 	sub	objptr, ##34556
2262c     F2 FA 01 F6 | 	mov	result1, objptr
22630     00 68 00 FF 
22634     00 FA 45 F5 | 	or	result1, ##13631488
22638     43 00 00 FF 
2263c     2C E5 05 F1 | 	add	objptr, ##34604
22640     F2 FA 61 FC | 	wrlong	result1, objptr
22644     43 00 00 FF 
22648     2C E5 85 F1 | 	sub	objptr, ##34604
2264c     F2 FA 01 F6 | 	mov	result1, objptr
22650     55 FA 25 F4 | 	bith	result1, #85
22654     43 00 00 FF 
22658     DC E4 05 F1 | 	add	objptr, ##34524
2265c     F2 FA 61 FC | 	wrlong	result1, objptr
22660     43 00 00 FF 
22664     DC E4 85 F1 | 	sub	objptr, ##34524
22668     F2 FA 01 F6 | 	mov	result1, objptr
2266c     00 68 00 FF 
22670     00 FA 45 F5 | 	or	result1, ##13631488
22674     43 00 00 FF 
22678     30 E5 05 F1 | 	add	objptr, ##34608
2267c     F2 FA 61 FC | 	wrlong	result1, objptr
22680     43 00 00 FF 
22684     30 E5 85 F1 | 	sub	objptr, ##34608
22688     F2 FA 01 F6 | 	mov	result1, objptr
2268c     00 68 00 FF 
22690     00 FA 45 F5 | 	or	result1, ##13631488
22694     43 00 00 FF 
22698     00 E5 05 F1 | 	add	objptr, ##34560
2269c     F2 FA 61 FC | 	wrlong	result1, objptr
226a0     43 00 00 FF 
226a4     00 E5 85 F1 | 	sub	objptr, ##34560
226a8     F2 FA 01 F6 | 	mov	result1, objptr
226ac     00 68 00 FF 
226b0     00 FA 45 F5 | 	or	result1, ##13631488
226b4     43 00 00 FF 
226b8     04 E5 05 F1 | 	add	objptr, ##34564
226bc     F2 FA 61 FC | 	wrlong	result1, objptr
226c0     43 00 00 FF 
226c4     04 E5 85 F1 | 	sub	objptr, ##34564
226c8     F2 FA 01 F6 | 	mov	result1, objptr
226cc     00 68 00 FF 
226d0     00 FA 45 F5 | 	or	result1, ##13631488
226d4     43 00 00 FF 
226d8     08 E5 05 F1 | 	add	objptr, ##34568
226dc     F2 FA 61 FC | 	wrlong	result1, objptr
226e0     43 00 00 FF 
226e4     08 E5 85 F1 | 	sub	objptr, ##34568
226e8     F2 FA 01 F6 | 	mov	result1, objptr
226ec     74 FA 25 F4 | 	bith	result1, #116
226f0     43 00 00 FF 
226f4     80 E5 05 F1 | 	add	objptr, ##34688
226f8     F2 FA 61 FC | 	wrlong	result1, objptr
226fc     43 00 00 FF 
22700     80 E5 85 F1 | 	sub	objptr, ##34688
22704     F2 FA 01 F6 | 	mov	result1, objptr
22708     18 FA 25 F4 | 	bith	result1, #24
2270c     43 00 00 FF 
22710     84 E5 05 F1 | 	add	objptr, ##34692
22714     F2 FA 61 FC | 	wrlong	result1, objptr
22718     43 00 00 FF 
2271c     84 E5 85 F1 | 	sub	objptr, ##34692
22720     F2 FA 01 F6 | 	mov	result1, objptr
22724     00 88 00 FF 
22728     00 FA 45 F5 | 	or	result1, ##17825792
2272c     43 00 00 FF 
22730     88 E5 05 F1 | 	add	objptr, ##34696
22734     F2 FA 61 FC | 	wrlong	result1, objptr
22738     43 00 00 FF 
2273c     88 E5 85 F1 | 	sub	objptr, ##34696
22740     F2 FA 01 F6 | 	mov	result1, objptr
22744     00 90 00 FF 
22748     00 FA 45 F5 | 	or	result1, ##18874368
2274c     43 00 00 FF 
22750     8C E5 05 F1 | 	add	objptr, ##34700
22754     F2 FA 61 FC | 	wrlong	result1, objptr
22758     43 00 00 FF 
2275c     8C E5 85 F1 | 	sub	objptr, ##34700
22760     F2 FA 01 F6 | 	mov	result1, objptr
22764     00 98 00 FF 
22768     00 FA 45 F5 | 	or	result1, ##19922944
2276c     43 00 00 FF 
22770     90 E5 05 F1 | 	add	objptr, ##34704
22774     F2 FA 61 FC | 	wrlong	result1, objptr
22778     43 00 00 FF 
2277c     90 E5 85 F1 | 	sub	objptr, ##34704
22780     F2 FA 01 F6 | 	mov	result1, objptr
22784     00 A0 00 FF 
22788     00 FA 45 F5 | 	or	result1, ##20971520
2278c     43 00 00 FF 
22790     94 E5 05 F1 | 	add	objptr, ##34708
22794     F2 FA 61 FC | 	wrlong	result1, objptr
22798     43 00 00 FF 
2279c     94 E5 85 F1 | 	sub	objptr, ##34708
227a0     F2 FA 01 F6 | 	mov	result1, objptr
227a4     00 A8 00 FF 
227a8     00 FA 45 F5 | 	or	result1, ##22020096
227ac     43 00 00 FF 
227b0     98 E5 05 F1 | 	add	objptr, ##34712
227b4     F2 FA 61 FC | 	wrlong	result1, objptr
227b8     43 00 00 FF 
227bc     98 E5 85 F1 | 	sub	objptr, ##34712
227c0     F2 FA 01 F6 | 	mov	result1, objptr
227c4     00 B0 00 FF 
227c8     00 FA 45 F5 | 	or	result1, ##23068672
227cc     43 00 00 FF 
227d0     9C E5 05 F1 | 	add	objptr, ##34716
227d4     F2 FA 61 FC | 	wrlong	result1, objptr
227d8     43 00 00 FF 
227dc     9C E5 85 F1 | 	sub	objptr, ##34716
227e0     F2 FA 01 F6 | 	mov	result1, objptr
227e4     00 B8 00 FF 
227e8     00 FA 45 F5 | 	or	result1, ##24117248
227ec     43 00 00 FF 
227f0     A0 E5 05 F1 | 	add	objptr, ##34720
227f4     F2 FA 61 FC | 	wrlong	result1, objptr
227f8     43 00 00 FF 
227fc     A0 E5 85 F1 | 	sub	objptr, ##34720
22800     F2 FA 01 F6 | 	mov	result1, objptr
22804     37 FA 25 F4 | 	bith	result1, #55
22808     43 00 00 FF 
2280c     A4 E5 05 F1 | 	add	objptr, ##34724
22810     F2 FA 61 FC | 	wrlong	result1, objptr
22814     43 00 00 FF 
22818     A4 E5 85 F1 | 	sub	objptr, ##34724
2281c     F2 FA 01 F6 | 	mov	result1, objptr
22820     00 C8 00 FF 
22824     00 FA 45 F5 | 	or	result1, ##26214400
22828     43 00 00 FF 
2282c     A8 E5 05 F1 | 	add	objptr, ##34728
22830     F2 FA 61 FC | 	wrlong	result1, objptr
22834     43 00 00 FF 
22838     A8 E5 85 F1 | 	sub	objptr, ##34728
2283c     F2 FA 01 F6 | 	mov	result1, objptr
22840     00 D0 00 FF 
22844     00 FA 45 F5 | 	or	result1, ##27262976
22848     43 00 00 FF 
2284c     AC E5 05 F1 | 	add	objptr, ##34732
22850     F2 FA 61 FC | 	wrlong	result1, objptr
22854     43 00 00 FF 
22858     AC E5 85 F1 | 	sub	objptr, ##34732
2285c     F2 FA 01 F6 | 	mov	result1, objptr
22860     00 D8 00 FF 
22864     00 FA 45 F5 | 	or	result1, ##28311552
22868     43 00 00 FF 
2286c     B0 E5 05 F1 | 	add	objptr, ##34736
22870     F2 FA 61 FC | 	wrlong	result1, objptr
22874     43 00 00 FF 
22878     B0 E5 85 F1 | 	sub	objptr, ##34736
2287c     F2 FA 01 F6 | 	mov	result1, objptr
22880     56 FA 25 F4 | 	bith	result1, #86
22884     43 00 00 FF 
22888     B4 E5 05 F1 | 	add	objptr, ##34740
2288c     F2 FA 61 FC | 	wrlong	result1, objptr
22890     43 00 00 FF 
22894     B4 E5 85 F1 | 	sub	objptr, ##34740
22898     F2 FA 01 F6 | 	mov	result1, objptr
2289c     00 E8 00 FF 
228a0     00 FA 45 F5 | 	or	result1, ##30408704
228a4     45 00 00 FF 
228a8     7C E4 05 F1 | 	add	objptr, ##35452
228ac     F2 FA 61 FC | 	wrlong	result1, objptr
228b0     45 00 00 FF 
228b4     7C E4 85 F1 | 	sub	objptr, ##35452
228b8     F2 FA 01 F6 | 	mov	result1, objptr
228bc     75 FA 25 F4 | 	bith	result1, #117
228c0     43 00 00 FF 
228c4     B8 E5 05 F1 | 	add	objptr, ##34744
228c8     F2 FA 61 FC | 	wrlong	result1, objptr
228cc     43 00 00 FF 
228d0     B8 E5 85 F1 | 	sub	objptr, ##34744
228d4     F2 FA 01 F6 | 	mov	result1, objptr
228d8     94 FA 25 F4 | 	bith	result1, #148
228dc     43 00 00 FF 
228e0     CC E5 05 F1 | 	add	objptr, ##34764
228e4     F2 FA 61 FC | 	wrlong	result1, objptr
228e8     43 00 00 FF 
228ec     CC E5 85 F1 | 	sub	objptr, ##34764
228f0     F2 FA 01 F6 | 	mov	result1, objptr
228f4     19 FA 25 F4 | 	bith	result1, #25
228f8     43 00 00 FF 
228fc     BC E5 05 F1 | 	add	objptr, ##34748
22900     F2 FA 61 FC | 	wrlong	result1, objptr
22904     43 00 00 FF 
22908     BC E5 85 F1 | 	sub	objptr, ##34748
2290c     F2 FA 01 F6 | 	mov	result1, objptr
22910     00 08 01 FF 
22914     00 FA 45 F5 | 	or	result1, ##34603008
22918     43 00 00 FF 
2291c     D8 E4 05 F1 | 	add	objptr, ##34520
22920     F2 FA 61 FC | 	wrlong	result1, objptr
22924     43 00 00 FF 
22928     D8 E4 85 F1 | 	sub	objptr, ##34520
2292c     F2 FA 01 F6 | 	mov	result1, objptr
22930     00 10 01 FF 
22934     00 FA 45 F5 | 	or	result1, ##35651584
22938     43 00 00 FF 
2293c     C4 E5 05 F1 | 	add	objptr, ##34756
22940     F2 FA 61 FC | 	wrlong	result1, objptr
22944     43 00 00 FF 
22948     C4 E5 85 F1 | 	sub	objptr, ##34756
2294c     F2 FA 01 F6 | 	mov	result1, objptr
22950     00 18 01 FF 
22954     00 FA 45 F5 | 	or	result1, ##36700160
22958     43 00 00 FF 
2295c     C8 E5 05 F1 | 	add	objptr, ##34760
22960     F2 FA 61 FC | 	wrlong	result1, objptr
22964     43 00 00 FF 
22968     C8 E5 85 F1 | 	sub	objptr, ##34760
2296c     F2 FA 01 F6 | 	mov	result1, objptr
22970     00 20 01 FF 
22974     00 FA 45 F5 | 	or	result1, ##37748736
22978     43 00 00 FF 
2297c     D4 E5 05 F1 | 	add	objptr, ##34772
22980     F2 FA 61 FC | 	wrlong	result1, objptr
22984     43 00 00 FF 
22988     D4 E5 85 F1 | 	sub	objptr, ##34772
2298c     F2 FA 01 F6 | 	mov	result1, objptr
22990     00 28 01 FF 
22994     00 FA 45 F5 | 	or	result1, ##38797312
22998     43 00 00 FF 
2299c     D8 E5 05 F1 | 	add	objptr, ##34776
229a0     F2 FA 61 FC | 	wrlong	result1, objptr
229a4     43 00 00 FF 
229a8     D8 E5 85 F1 | 	sub	objptr, ##34776
229ac     F2 FA 01 F6 | 	mov	result1, objptr
229b0     00 30 01 FF 
229b4     00 FA 45 F5 | 	or	result1, ##39845888
229b8     43 00 00 FF 
229bc     DC E5 05 F1 | 	add	objptr, ##34780
229c0     F2 FA 61 FC | 	wrlong	result1, objptr
229c4     43 00 00 FF 
229c8     DC E5 85 F1 | 	sub	objptr, ##34780
229cc     F2 FA 01 F6 | 	mov	result1, objptr
229d0     00 38 01 FF 
229d4     00 FA 45 F5 | 	or	result1, ##40894464
229d8     43 00 00 FF 
229dc     E0 E5 05 F1 | 	add	objptr, ##34784
229e0     F2 FA 61 FC | 	wrlong	result1, objptr
229e4     43 00 00 FF 
229e8     E0 E5 85 F1 | 	sub	objptr, ##34784
229ec     F2 FA 01 F6 | 	mov	result1, objptr
229f0     00 40 01 FF 
229f4     00 FA 45 F5 | 	or	result1, ##41943040
229f8     43 00 00 FF 
229fc     E8 E5 05 F1 | 	add	objptr, ##34792
22a00     F2 FA 61 FC | 	wrlong	result1, objptr
22a04     43 00 00 FF 
22a08     E8 E5 85 F1 | 	sub	objptr, ##34792
22a0c     F2 FA 01 F6 | 	mov	result1, objptr
22a10     00 08 01 FF 
22a14     00 FA 45 F5 | 	or	result1, ##34603008
22a18     43 00 00 FF 
22a1c     EC E5 05 F1 | 	add	objptr, ##34796
22a20     F2 FA 61 FC | 	wrlong	result1, objptr
22a24     43 00 00 FF 
22a28     EC E5 85 F1 | 	sub	objptr, ##34796
22a2c     F2 FA 01 F6 | 	mov	result1, objptr
22a30     00 48 01 FF 
22a34     00 FA 45 F5 | 	or	result1, ##42991616
22a38     43 00 00 FF 
22a3c     EC E4 05 F1 | 	add	objptr, ##34540
22a40     F2 FA 61 FC | 	wrlong	result1, objptr
22a44     43 00 00 FF 
22a48     EC E4 85 F1 | 	sub	objptr, ##34540
22a4c     F2 FA 01 F6 | 	mov	result1, objptr
22a50     00 50 01 FF 
22a54     00 FA 45 F5 | 	or	result1, ##44040192
22a58     43 00 00 FF 
22a5c     1C E5 05 F1 | 	add	objptr, ##34588
22a60     F2 FA 61 FC | 	wrlong	result1, objptr
22a64     43 00 00 FF 
22a68     1C E5 85 F1 | 	sub	objptr, ##34588
22a6c     F2 FA 01 F6 | 	mov	result1, objptr
22a70     00 58 01 FF 
22a74     00 FA 45 F5 | 	or	result1, ##45088768
22a78     43 00 00 FF 
22a7c     18 E5 05 F1 | 	add	objptr, ##34584
22a80     F2 FA 61 FC | 	wrlong	result1, objptr
22a84     43 00 00 FF 
22a88     18 E5 85 F1 | 	sub	objptr, ##34584
22a8c     F2 FA 01 F6 | 	mov	result1, objptr
22a90     00 60 01 FF 
22a94     00 FA 45 F5 | 	or	result1, ##46137344
22a98     43 00 00 FF 
22a9c     BC E4 05 F1 | 	add	objptr, ##34492
22aa0     F2 FA 61 FC | 	wrlong	result1, objptr
22aa4     43 00 00 FF 
22aa8     BC E4 85 F1 | 	sub	objptr, ##34492
22aac     F2 FA 01 F6 | 	mov	result1, objptr
22ab0     00 68 01 FF 
22ab4     00 FA 45 F5 | 	or	result1, ##47185920
22ab8     43 00 00 FF 
22abc     C0 E4 05 F1 | 	add	objptr, ##34496
22ac0     F2 FA 61 FC | 	wrlong	result1, objptr
22ac4     43 00 00 FF 
22ac8     C0 E4 85 F1 | 	sub	objptr, ##34496
22acc     F2 FA 01 F6 | 	mov	result1, objptr
22ad0     00 70 01 FF 
22ad4     00 FA 45 F5 | 	or	result1, ##48234496
22ad8     43 00 00 FF 
22adc     28 E5 05 F1 | 	add	objptr, ##34600
22ae0     F2 FA 61 FC | 	wrlong	result1, objptr
22ae4     43 00 00 FF 
22ae8     28 E5 85 F1 | 	sub	objptr, ##34600
22aec     F2 FA 01 F6 | 	mov	result1, objptr
22af0     00 78 01 FF 
22af4     00 FA 45 F5 | 	or	result1, ##49283072
22af8     43 00 00 FF 
22afc     D0 E5 05 F1 | 	add	objptr, ##34768
22b00     F2 FA 61 FC | 	wrlong	result1, objptr
22b04     43 00 00 FF 
22b08     D0 E5 85 F1 | 	sub	objptr, ##34768
22b0c     F2 FA 01 F6 | 	mov	result1, objptr
22b10     38 FA 25 F4 | 	bith	result1, #56
22b14     43 00 00 FF 
22b18     E4 E5 05 F1 | 	add	objptr, ##34788
22b1c     F2 FA 61 FC | 	wrlong	result1, objptr
22b20     43 00 00 FF 
22b24     E4 E5 85 F1 | 	sub	objptr, ##34788
22b28     F2 FA 01 F6 | 	mov	result1, objptr
22b2c     00 88 01 FF 
22b30     00 FA 45 F5 | 	or	result1, ##51380224
22b34     43 00 00 FF 
22b38     F0 E5 05 F1 | 	add	objptr, ##34800
22b3c     F2 FA 61 FC | 	wrlong	result1, objptr
22b40     43 00 00 FF 
22b44     F0 E5 85 F1 | 	sub	objptr, ##34800
22b48     F2 FA 01 F6 | 	mov	result1, objptr
22b4c     00 90 01 FF 
22b50     00 FA 45 F5 | 	or	result1, ##52428800
22b54     43 00 00 FF 
22b58     F4 E5 05 F1 | 	add	objptr, ##34804
22b5c     F2 FA 61 FC | 	wrlong	result1, objptr
22b60     43 00 00 FF 
22b64     F4 E5 85 F1 | 	sub	objptr, ##34804
22b68     F2 FA 01 F6 | 	mov	result1, objptr
22b6c     00 98 01 FF 
22b70     00 FA 45 F5 | 	or	result1, ##53477376
22b74     43 00 00 FF 
22b78     F8 E5 05 F1 | 	add	objptr, ##34808
22b7c     F2 FA 61 FC | 	wrlong	result1, objptr
22b80     43 00 00 FF 
22b84     F8 E5 85 F1 | 	sub	objptr, ##34808
22b88     F2 FA 01 F6 | 	mov	result1, objptr
22b8c     00 A0 01 FF 
22b90     00 FA 45 F5 | 	or	result1, ##54525952
22b94     43 00 00 FF 
22b98     FC E5 05 F1 | 	add	objptr, ##34812
22b9c     F2 FA 61 FC | 	wrlong	result1, objptr
22ba0     43 00 00 FF 
22ba4     FC E5 85 F1 | 	sub	objptr, ##34812
22ba8     F2 FA 01 F6 | 	mov	result1, objptr
22bac     00 A8 01 FF 
22bb0     00 FA 45 F5 | 	or	result1, ##55574528
22bb4     44 00 00 FF 
22bb8     00 E4 05 F1 | 	add	objptr, ##34816
22bbc     F2 FA 61 FC | 	wrlong	result1, objptr
22bc0     44 00 00 FF 
22bc4     00 E4 85 F1 | 	sub	objptr, ##34816
22bc8     F2 FA 01 F6 | 	mov	result1, objptr
22bcc     00 B0 01 FF 
22bd0     00 FA 45 F5 | 	or	result1, ##56623104
22bd4     44 00 00 FF 
22bd8     04 E4 05 F1 | 	add	objptr, ##34820
22bdc     F2 FA 61 FC | 	wrlong	result1, objptr
22be0     44 00 00 FF 
22be4     04 E4 85 F1 | 	sub	objptr, ##34820
22be8     F2 FA 01 F6 | 	mov	result1, objptr
22bec     94 FA 25 F4 | 	bith	result1, #148
22bf0     43 00 00 FF 
22bf4     CC E5 05 F1 | 	add	objptr, ##34764
22bf8     F2 FA 61 FC | 	wrlong	result1, objptr
22bfc     43 00 00 FF 
22c00     CC E5 85 F1 | 	sub	objptr, ##34764
22c04     F2 FA 01 F6 | 	mov	result1, objptr
22c08     00 B8 01 FF 
22c0c     00 FA 45 F5 | 	or	result1, ##57671680
22c10     44 00 00 FF 
22c14     0C E4 05 F1 | 	add	objptr, ##34828
22c18     F2 FA 61 FC | 	wrlong	result1, objptr
22c1c     44 00 00 FF 
22c20     0C E4 85 F1 | 	sub	objptr, ##34828
22c24     F2 FA 01 F6 | 	mov	result1, objptr
22c28     57 FA 25 F4 | 	bith	result1, #87
22c2c     44 00 00 FF 
22c30     08 E4 05 F1 | 	add	objptr, ##34824
22c34     F2 FA 61 FC | 	wrlong	result1, objptr
22c38     44 00 00 FF 
22c3c     08 E4 85 F1 | 	sub	objptr, ##34824
22c40     F2 FA 01 F6 | 	mov	result1, objptr
22c44     00 C8 01 FF 
22c48     00 FA 45 F5 | 	or	result1, ##59768832
22c4c     44 00 00 FF 
22c50     20 E4 05 F1 | 	add	objptr, ##34848
22c54     F2 FA 61 FC | 	wrlong	result1, objptr
22c58     44 00 00 FF 
22c5c     20 E4 85 F1 | 	sub	objptr, ##34848
22c60     F2 FA 01 F6 | 	mov	result1, objptr
22c64     00 D0 01 FF 
22c68     00 FA 45 F5 | 	or	result1, ##60817408
22c6c     44 00 00 FF 
22c70     24 E4 05 F1 | 	add	objptr, ##34852
22c74     F2 FA 61 FC | 	wrlong	result1, objptr
22c78     44 00 00 FF 
22c7c     24 E4 85 F1 | 	sub	objptr, ##34852
22c80     F2 FA 01 F6 | 	mov	result1, objptr
22c84     00 D8 01 FF 
22c88     00 FA 45 F5 | 	or	result1, ##61865984
22c8c     44 00 00 FF 
22c90     10 E4 05 F1 | 	add	objptr, ##34832
22c94     F2 FA 61 FC | 	wrlong	result1, objptr
22c98     44 00 00 FF 
22c9c     10 E4 85 F1 | 	sub	objptr, ##34832
22ca0     F2 FA 01 F6 | 	mov	result1, objptr
22ca4     76 FA 25 F4 | 	bith	result1, #118
22ca8     44 00 00 FF 
22cac     14 E4 05 F1 | 	add	objptr, ##34836
22cb0     F2 FA 61 FC | 	wrlong	result1, objptr
22cb4     44 00 00 FF 
22cb8     14 E4 85 F1 | 	sub	objptr, ##34836
22cbc     F2 FA 01 F6 | 	mov	result1, objptr
22cc0     00 E8 01 FF 
22cc4     00 FA 45 F5 | 	or	result1, ##63963136
22cc8     44 00 00 FF 
22ccc     18 E4 05 F1 | 	add	objptr, ##34840
22cd0     F2 FA 61 FC | 	wrlong	result1, objptr
22cd4     44 00 00 FF 
22cd8     18 E4 85 F1 | 	sub	objptr, ##34840
22cdc     F2 FA 01 F6 | 	mov	result1, objptr
22ce0     95 FA 25 F4 | 	bith	result1, #149
22ce4     44 00 00 FF 
22ce8     1C E4 05 F1 | 	add	objptr, ##34844
22cec     F2 FA 61 FC | 	wrlong	result1, objptr
22cf0     44 00 00 FF 
22cf4     1C E4 85 F1 | 	sub	objptr, ##34844
22cf8     F2 FA 01 F6 | 	mov	result1, objptr
22cfc     B4 FA 25 F4 | 	bith	result1, #180
22d00     44 00 00 FF 
22d04     2C E4 05 F1 | 	add	objptr, ##34860
22d08     F2 FA 61 FC | 	wrlong	result1, objptr
22d0c     44 00 00 FF 
22d10     2C E4 85 F1 | 	sub	objptr, ##34860
22d14     F2 FA 01 F6 | 	mov	result1, objptr
22d18     1A FA 25 F4 | 	bith	result1, #26
22d1c     44 00 00 FF 
22d20     28 E4 05 F1 | 	add	objptr, ##34856
22d24     F2 FA 61 FC | 	wrlong	result1, objptr
22d28     44 00 00 FF 
22d2c     28 E4 85 F1 | 	sub	objptr, ##34856
22d30     F2 FA 01 F6 | 	mov	result1, objptr
22d34     00 08 02 FF 
22d38     00 FA 45 F5 | 	or	result1, ##68157440
22d3c     44 00 00 FF 
22d40     38 E4 05 F1 | 	add	objptr, ##34872
22d44     F2 FA 61 FC | 	wrlong	result1, objptr
22d48     44 00 00 FF 
22d4c     38 E4 85 F1 | 	sub	objptr, ##34872
22d50     F2 FA 01 F6 | 	mov	result1, objptr
22d54     00 10 02 FF 
22d58     00 FA 45 F5 | 	or	result1, ##69206016
22d5c     44 00 00 FF 
22d60     34 E4 05 F1 | 	add	objptr, ##34868
22d64     F2 FA 61 FC | 	wrlong	result1, objptr
22d68     44 00 00 FF 
22d6c     34 E4 85 F1 | 	sub	objptr, ##34868
22d70     F2 FA 01 F6 | 	mov	result1, objptr
22d74     00 18 02 FF 
22d78     00 FA 45 F5 | 	or	result1, ##70254592
22d7c     44 00 00 FF 
22d80     30 E4 05 F1 | 	add	objptr, ##34864
22d84     F2 FA 61 FC | 	wrlong	result1, objptr
22d88     44 00 00 FF 
22d8c     30 E4 85 F1 | 	sub	objptr, ##34864
22d90     F2 FA 01 F6 | 	mov	result1, objptr
22d94     00 20 02 FF 
22d98     00 FA 45 F5 | 	or	result1, ##71303168
22d9c     44 00 00 FF 
22da0     3C E4 05 F1 | 	add	objptr, ##34876
22da4     F2 FA 61 FC | 	wrlong	result1, objptr
22da8     44 00 00 FF 
22dac     3C E4 85 F1 | 	sub	objptr, ##34876
22db0     F2 FA 01 F6 | 	mov	result1, objptr
22db4     00 28 02 FF 
22db8     00 FA 45 F5 | 	or	result1, ##72351744
22dbc     44 00 00 FF 
22dc0     40 E4 05 F1 | 	add	objptr, ##34880
22dc4     F2 FA 61 FC | 	wrlong	result1, objptr
22dc8     44 00 00 FF 
22dcc     40 E4 85 F1 | 	sub	objptr, ##34880
22dd0     F2 FA 01 F6 | 	mov	result1, objptr
22dd4     00 30 02 FF 
22dd8     00 FA 45 F5 | 	or	result1, ##73400320
22ddc     43 00 00 FF 
22de0     D4 E4 05 F1 | 	add	objptr, ##34516
22de4     F2 FA 61 FC | 	wrlong	result1, objptr
22de8     43 00 00 FF 
22dec     D4 E4 85 F1 | 	sub	objptr, ##34516
22df0     F2 FA 01 F6 | 	mov	result1, objptr
22df4     00 38 02 FF 
22df8     00 FA 45 F5 | 	or	result1, ##74448896
22dfc     44 00 00 FF 
22e00     58 E4 05 F1 | 	add	objptr, ##34904
22e04     F2 FA 61 FC | 	wrlong	result1, objptr
22e08     44 00 00 FF 
22e0c     58 E4 85 F1 | 	sub	objptr, ##34904
22e10     F2 FA 01 F6 | 	mov	result1, objptr
22e14     00 40 02 FF 
22e18     00 FA 45 F5 | 	or	result1, ##75497472
22e1c     44 00 00 FF 
22e20     68 E4 05 F1 | 	add	objptr, ##34920
22e24     F2 FA 61 FC | 	wrlong	result1, objptr
22e28     44 00 00 FF 
22e2c     68 E4 85 F1 | 	sub	objptr, ##34920
22e30     F2 FA 01 F6 | 	mov	result1, objptr
22e34     00 48 02 FF 
22e38     00 FA 45 F5 | 	or	result1, ##76546048
22e3c     44 00 00 FF 
22e40     6C E4 05 F1 | 	add	objptr, ##34924
22e44     F2 FA 61 FC | 	wrlong	result1, objptr
22e48     44 00 00 FF 
22e4c     6C E4 85 F1 | 	sub	objptr, ##34924
22e50     F2 FA 01 F6 | 	mov	result1, objptr
22e54     00 50 02 FF 
22e58     00 FA 45 F5 | 	or	result1, ##77594624
22e5c     44 00 00 FF 
22e60     64 E4 05 F1 | 	add	objptr, ##34916
22e64     F2 FA 61 FC | 	wrlong	result1, objptr
22e68     44 00 00 FF 
22e6c     64 E4 85 F1 | 	sub	objptr, ##34916
22e70     F2 FA 01 F6 | 	mov	result1, objptr
22e74     00 58 02 FF 
22e78     00 FA 45 F5 | 	or	result1, ##78643200
22e7c     44 00 00 FF 
22e80     5C E4 05 F1 | 	add	objptr, ##34908
22e84     F2 FA 61 FC | 	wrlong	result1, objptr
22e88     44 00 00 FF 
22e8c     5C E4 85 F1 | 	sub	objptr, ##34908
22e90     F2 FA 01 F6 | 	mov	result1, objptr
22e94     00 60 02 FF 
22e98     00 FA 45 F5 | 	or	result1, ##79691776
22e9c     44 00 00 FF 
22ea0     60 E4 05 F1 | 	add	objptr, ##34912
22ea4     F2 FA 61 FC | 	wrlong	result1, objptr
22ea8     44 00 00 FF 
22eac     60 E4 85 F1 | 	sub	objptr, ##34912
22eb0     F2 FA 01 F6 | 	mov	result1, objptr
22eb4     00 68 02 FF 
22eb8     00 FA 45 F5 | 	or	result1, ##80740352
22ebc     44 00 00 FF 
22ec0     70 E4 05 F1 | 	add	objptr, ##34928
22ec4     F2 FA 61 FC | 	wrlong	result1, objptr
22ec8     44 00 00 FF 
22ecc     70 E4 85 F1 | 	sub	objptr, ##34928
22ed0     F2 FA 01 F6 | 	mov	result1, objptr
22ed4     00 70 02 FF 
22ed8     00 FA 45 F5 | 	or	result1, ##81788928
22edc     44 00 00 FF 
22ee0     74 E4 05 F1 | 	add	objptr, ##34932
22ee4     F2 FA 61 FC | 	wrlong	result1, objptr
22ee8     44 00 00 FF 
22eec     74 E4 85 F1 | 	sub	objptr, ##34932
22ef0     F2 FA 01 F6 | 	mov	result1, objptr
22ef4     00 78 02 FF 
22ef8     00 FA 45 F5 | 	or	result1, ##82837504
22efc     44 00 00 FF 
22f00     78 E4 05 F1 | 	add	objptr, ##34936
22f04     F2 FA 61 FC | 	wrlong	result1, objptr
22f08     44 00 00 FF 
22f0c     78 E4 85 F1 | 	sub	objptr, ##34936
22f10     F2 FA 01 F6 | 	mov	result1, objptr
22f14     00 80 02 FF 
22f18     00 FA 45 F5 | 	or	result1, ##83886080
22f1c     44 00 00 FF 
22f20     7C E4 05 F1 | 	add	objptr, ##34940
22f24     F2 FA 61 FC | 	wrlong	result1, objptr
22f28     44 00 00 FF 
22f2c     7C E4 85 F1 | 	sub	objptr, ##34940
22f30     F2 FA 01 F6 | 	mov	result1, objptr
22f34     00 88 02 FF 
22f38     00 FA 45 F5 | 	or	result1, ##84934656
22f3c     44 00 00 FF 
22f40     80 E4 05 F1 | 	add	objptr, ##34944
22f44     F2 FA 61 FC | 	wrlong	result1, objptr
22f48     44 00 00 FF 
22f4c     80 E4 85 F1 | 	sub	objptr, ##34944
22f50     F2 FA 01 F6 | 	mov	result1, objptr
22f54     00 90 02 FF 
22f58     00 FA 45 F5 | 	or	result1, ##85983232
22f5c     44 00 00 FF 
22f60     84 E4 05 F1 | 	add	objptr, ##34948
22f64     F2 FA 61 FC | 	wrlong	result1, objptr
22f68     44 00 00 FF 
22f6c     84 E4 85 F1 | 	sub	objptr, ##34948
22f70     F2 FA 01 F6 | 	mov	result1, objptr
22f74     00 98 02 FF 
22f78     00 FA 45 F5 | 	or	result1, ##87031808
22f7c     44 00 00 FF 
22f80     88 E4 05 F1 | 	add	objptr, ##34952
22f84     F2 FA 61 FC | 	wrlong	result1, objptr
22f88     44 00 00 FF 
22f8c     88 E4 85 F1 | 	sub	objptr, ##34952
22f90     F2 FA 01 F6 | 	mov	result1, objptr
22f94     00 A0 02 FF 
22f98     00 FA 45 F5 | 	or	result1, ##88080384
22f9c     44 00 00 FF 
22fa0     8C E4 05 F1 | 	add	objptr, ##34956
22fa4     F2 FA 61 FC | 	wrlong	result1, objptr
22fa8     44 00 00 FF 
22fac     8C E4 85 F1 | 	sub	objptr, ##34956
22fb0     F2 FA 01 F6 | 	mov	result1, objptr
22fb4     00 A8 02 FF 
22fb8     00 FA 45 F5 | 	or	result1, ##89128960
22fbc     44 00 00 FF 
22fc0     98 E4 05 F1 | 	add	objptr, ##34968
22fc4     F2 FA 61 FC | 	wrlong	result1, objptr
22fc8     44 00 00 FF 
22fcc     98 E4 85 F1 | 	sub	objptr, ##34968
22fd0     F2 FA 01 F6 | 	mov	result1, objptr
22fd4     00 B0 02 FF 
22fd8     00 FA 45 F5 | 	or	result1, ##90177536
22fdc     44 00 00 FF 
22fe0     90 E4 05 F1 | 	add	objptr, ##34960
22fe4     F2 FA 61 FC | 	wrlong	result1, objptr
22fe8     44 00 00 FF 
22fec     90 E4 85 F1 | 	sub	objptr, ##34960
22ff0     F2 FA 01 F6 | 	mov	result1, objptr
22ff4     00 B8 02 FF 
22ff8     00 FA 45 F5 | 	or	result1, ##91226112
22ffc     44 00 00 FF 
23000     94 E4 05 F1 | 	add	objptr, ##34964
23004     F2 FA 61 FC | 	wrlong	result1, objptr
23008     44 00 00 FF 
2300c     94 E4 85 F1 | 	sub	objptr, ##34964
23010     F2 FA 01 F6 | 	mov	result1, objptr
23014     00 C0 02 FF 
23018     00 FA 45 F5 | 	or	result1, ##92274688
2301c     44 00 00 FF 
23020     9C E4 05 F1 | 	add	objptr, ##34972
23024     F2 FA 61 FC | 	wrlong	result1, objptr
23028     44 00 00 FF 
2302c     9C E4 85 F1 | 	sub	objptr, ##34972
23030     F2 FA 01 F6 | 	mov	result1, objptr
23034     00 C8 02 FF 
23038     00 FA 45 F5 | 	or	result1, ##93323264
2303c     44 00 00 FF 
23040     44 E4 05 F1 | 	add	objptr, ##34884
23044     F2 FA 61 FC | 	wrlong	result1, objptr
23048     44 00 00 FF 
2304c     44 E4 85 F1 | 	sub	objptr, ##34884
23050     F2 FA 01 F6 | 	mov	result1, objptr
23054     00 D0 02 FF 
23058     00 FA 45 F5 | 	or	result1, ##94371840
2305c     44 00 00 FF 
23060     4C E4 05 F1 | 	add	objptr, ##34892
23064     F2 FA 61 FC | 	wrlong	result1, objptr
23068     44 00 00 FF 
2306c     4C E4 85 F1 | 	sub	objptr, ##34892
23070     F2 FA 01 F6 | 	mov	result1, objptr
23074     00 D8 02 FF 
23078     00 FA 45 F5 | 	or	result1, ##95420416
2307c     44 00 00 FF 
23080     50 E4 05 F1 | 	add	objptr, ##34896
23084     F2 FA 61 FC | 	wrlong	result1, objptr
23088     44 00 00 FF 
2308c     50 E4 85 F1 | 	sub	objptr, ##34896
23090     F2 FA 01 F6 | 	mov	result1, objptr
23094     00 E0 02 FF 
23098     00 FA 45 F5 | 	or	result1, ##96468992
2309c     44 00 00 FF 
230a0     A0 E4 05 F1 | 	add	objptr, ##34976
230a4     F2 FA 61 FC | 	wrlong	result1, objptr
230a8     44 00 00 FF 
230ac     A0 E4 85 F1 | 	sub	objptr, ##34976
230b0     F2 FA 01 F6 | 	mov	result1, objptr
230b4     00 E8 02 FF 
230b8     00 FA 45 F5 | 	or	result1, ##97517568
230bc     44 00 00 FF 
230c0     A4 E4 05 F1 | 	add	objptr, ##34980
230c4     F2 FA 61 FC | 	wrlong	result1, objptr
230c8     44 00 00 FF 
230cc     A4 E4 85 F1 | 	sub	objptr, ##34980
230d0     F2 FA 01 F6 | 	mov	result1, objptr
230d4     00 F0 02 FF 
230d8     00 FA 45 F5 | 	or	result1, ##98566144
230dc     44 00 00 FF 
230e0     A8 E4 05 F1 | 	add	objptr, ##34984
230e4     F2 FA 61 FC | 	wrlong	result1, objptr
230e8     44 00 00 FF 
230ec     A8 E4 85 F1 | 	sub	objptr, ##34984
230f0     F2 FA 01 F6 | 	mov	result1, objptr
230f4     00 F8 02 FF 
230f8     00 FA 45 F5 | 	or	result1, ##99614720
230fc     44 00 00 FF 
23100     54 E4 05 F1 | 	add	objptr, ##34900
23104     F2 FA 61 FC | 	wrlong	result1, objptr
23108     44 00 00 FF 
2310c     54 E4 85 F1 | 	sub	objptr, ##34900
23110     F2 FA 01 F6 | 	mov	result1, objptr
23114     39 FA 25 F4 | 	bith	result1, #57
23118     44 00 00 FF 
2311c     B8 E4 05 F1 | 	add	objptr, ##35000
23120     F2 FA 61 FC | 	wrlong	result1, objptr
23124     44 00 00 FF 
23128     B8 E4 85 F1 | 	sub	objptr, ##35000
2312c     F2 FA 01 F6 | 	mov	result1, objptr
23130     00 08 03 FF 
23134     00 FA 45 F5 | 	or	result1, ##101711872
23138     44 00 00 FF 
2313c     C0 E4 05 F1 | 	add	objptr, ##35008
23140     F2 FA 61 FC | 	wrlong	result1, objptr
23144     44 00 00 FF 
23148     C0 E4 85 F1 | 	sub	objptr, ##35008
2314c     F2 FA 01 F6 | 	mov	result1, objptr
23150     00 10 03 FF 
23154     00 FA 45 F5 | 	or	result1, ##102760448
23158     44 00 00 FF 
2315c     B4 E4 05 F1 | 	add	objptr, ##34996
23160     F2 FA 61 FC | 	wrlong	result1, objptr
23164     44 00 00 FF 
23168     B4 E4 85 F1 | 	sub	objptr, ##34996
2316c     F2 FA 01 F6 | 	mov	result1, objptr
23170     00 18 03 FF 
23174     00 FA 45 F5 | 	or	result1, ##103809024
23178     44 00 00 FF 
2317c     B0 E4 05 F1 | 	add	objptr, ##34992
23180     F2 FA 61 FC | 	wrlong	result1, objptr
23184     44 00 00 FF 
23188     B0 E4 85 F1 | 	sub	objptr, ##34992
2318c     F2 FA 01 F6 | 	mov	result1, objptr
23190     00 20 03 FF 
23194     00 FA 45 F5 | 	or	result1, ##104857600
23198     44 00 00 FF 
2319c     AC E4 05 F1 | 	add	objptr, ##34988
231a0     F2 FA 61 FC | 	wrlong	result1, objptr
231a4     44 00 00 FF 
231a8     AC E4 85 F1 | 	sub	objptr, ##34988
231ac     F2 FA 01 F6 | 	mov	result1, objptr
231b0     00 28 03 FF 
231b4     00 FA 45 F5 | 	or	result1, ##105906176
231b8     44 00 00 FF 
231bc     BC E4 05 F1 | 	add	objptr, ##35004
231c0     F2 FA 61 FC | 	wrlong	result1, objptr
231c4     44 00 00 FF 
231c8     BC E4 85 F1 | 	sub	objptr, ##35004
231cc     F2 FA 01 F6 | 	mov	result1, objptr
231d0     00 30 03 FF 
231d4     00 FA 45 F5 | 	or	result1, ##106954752
231d8     44 00 00 FF 
231dc     C4 E4 05 F1 | 	add	objptr, ##35012
231e0     F2 FA 61 FC | 	wrlong	result1, objptr
231e4     44 00 00 FF 
231e8     C4 E4 85 F1 | 	sub	objptr, ##35012
231ec     F2 FA 01 F6 | 	mov	result1, objptr
231f0     00 38 03 FF 
231f4     00 FA 45 F5 | 	or	result1, ##108003328
231f8     44 00 00 FF 
231fc     C8 E4 05 F1 | 	add	objptr, ##35016
23200     F2 FA 61 FC | 	wrlong	result1, objptr
23204     44 00 00 FF 
23208     C8 E4 85 F1 | 	sub	objptr, ##35016
2320c     F2 FA 01 F6 | 	mov	result1, objptr
23210     00 40 03 FF 
23214     00 FA 45 F5 | 	or	result1, ##109051904
23218     44 00 00 FF 
2321c     CC E4 05 F1 | 	add	objptr, ##35020
23220     F2 FA 61 FC | 	wrlong	result1, objptr
23224     44 00 00 FF 
23228     CC E4 85 F1 | 	sub	objptr, ##35020
2322c     F2 FA 01 F6 | 	mov	result1, objptr
23230     00 48 03 FF 
23234     00 FA 45 F5 | 	or	result1, ##110100480
23238     44 00 00 FF 
2323c     D4 E4 05 F1 | 	add	objptr, ##35028
23240     F2 FA 61 FC | 	wrlong	result1, objptr
23244     44 00 00 FF 
23248     D4 E4 85 F1 | 	sub	objptr, ##35028
2324c     F2 FA 01 F6 | 	mov	result1, objptr
23250     00 50 03 FF 
23254     00 FA 45 F5 | 	or	result1, ##111149056
23258     44 00 00 FF 
2325c     D8 E4 05 F1 | 	add	objptr, ##35032
23260     F2 FA 61 FC | 	wrlong	result1, objptr
23264     44 00 00 FF 
23268     D8 E4 85 F1 | 	sub	objptr, ##35032
2326c     F2 FA 01 F6 | 	mov	result1, objptr
23270     00 58 03 FF 
23274     00 FA 45 F5 | 	or	result1, ##112197632
23278     44 00 00 FF 
2327c     DC E4 05 F1 | 	add	objptr, ##35036
23280     F2 FA 61 FC | 	wrlong	result1, objptr
23284     44 00 00 FF 
23288     DC E4 85 F1 | 	sub	objptr, ##35036
2328c     F2 FA 01 F6 | 	mov	result1, objptr
23290     00 60 03 FF 
23294     00 FA 45 F5 | 	or	result1, ##113246208
23298     44 00 00 FF 
2329c     E0 E4 05 F1 | 	add	objptr, ##35040
232a0     F2 FA 61 FC | 	wrlong	result1, objptr
232a4     44 00 00 FF 
232a8     E0 E4 85 F1 | 	sub	objptr, ##35040
232ac     F2 FA 01 F6 | 	mov	result1, objptr
232b0     00 68 03 FF 
232b4     00 FA 45 F5 | 	or	result1, ##114294784
232b8     44 00 00 FF 
232bc     E4 E4 05 F1 | 	add	objptr, ##35044
232c0     F2 FA 61 FC | 	wrlong	result1, objptr
232c4     44 00 00 FF 
232c8     E4 E4 85 F1 | 	sub	objptr, ##35044
232cc     F2 FA 01 F6 | 	mov	result1, objptr
232d0     00 70 03 FF 
232d4     00 FA 45 F5 | 	or	result1, ##115343360
232d8     44 00 00 FF 
232dc     E8 E4 05 F1 | 	add	objptr, ##35048
232e0     F2 FA 61 FC | 	wrlong	result1, objptr
232e4     44 00 00 FF 
232e8     E8 E4 85 F1 | 	sub	objptr, ##35048
232ec     F2 FA 01 F6 | 	mov	result1, objptr
232f0     00 08 01 FF 
232f4     00 FA 45 F5 | 	or	result1, ##34603008
232f8     44 00 00 FF 
232fc     EC E4 05 F1 | 	add	objptr, ##35052
23300     F2 FA 61 FC | 	wrlong	result1, objptr
23304     44 00 00 FF 
23308     EC E4 85 F1 | 	sub	objptr, ##35052
2330c     F2 FA 01 F6 | 	mov	result1, objptr
23310     00 78 03 FF 
23314     00 FA 45 F5 | 	or	result1, ##116391936
23318     44 00 00 FF 
2331c     F0 E4 05 F1 | 	add	objptr, ##35056
23320     F2 FA 61 FC | 	wrlong	result1, objptr
23324     44 00 00 FF 
23328     F0 E4 85 F1 | 	sub	objptr, ##35056
2332c     F2 FA 01 F6 | 	mov	result1, objptr
23330     58 FA 25 F4 | 	bith	result1, #88
23334     44 00 00 FF 
23338     D0 E4 05 F1 | 	add	objptr, ##35024
2333c     F2 FA 61 FC | 	wrlong	result1, objptr
23340     44 00 00 FF 
23344     D0 E4 85 F1 | 	sub	objptr, ##35024
23348     F2 FA 01 F6 | 	mov	result1, objptr
2334c     00 88 03 FF 
23350     00 FA 45 F5 | 	or	result1, ##118489088
23354     43 00 00 FF 
23358     C8 E4 05 F1 | 	add	objptr, ##34504
2335c     F2 FA 61 FC | 	wrlong	result1, objptr
23360     43 00 00 FF 
23364     C8 E4 85 F1 | 	sub	objptr, ##34504
23368     F2 FA 01 F6 | 	mov	result1, objptr
2336c     00 90 03 FF 
23370     00 FA 45 F5 | 	or	result1, ##119537664
23374     44 00 00 FF 
23378     F4 E4 05 F1 | 	add	objptr, ##35060
2337c     F2 FA 61 FC | 	wrlong	result1, objptr
23380     44 00 00 FF 
23384     F4 E4 85 F1 | 	sub	objptr, ##35060
23388     F2 FA 01 F6 | 	mov	result1, objptr
2338c     00 98 03 FF 
23390     00 FA 45 F5 | 	or	result1, ##120586240
23394     44 00 00 FF 
23398     F8 E4 05 F1 | 	add	objptr, ##35064
2339c     F2 FA 61 FC | 	wrlong	result1, objptr
233a0     44 00 00 FF 
233a4     F8 E4 85 F1 | 	sub	objptr, ##35064
233a8     F2 FA 01 F6 | 	mov	result1, objptr
233ac     00 A0 03 FF 
233b0     00 FA 45 F5 | 	or	result1, ##121634816
233b4     44 00 00 FF 
233b8     0C E5 05 F1 | 	add	objptr, ##35084
233bc     F2 FA 61 FC | 	wrlong	result1, objptr
233c0     44 00 00 FF 
233c4     0C E5 85 F1 | 	sub	objptr, ##35084
233c8     F2 FA 01 F6 | 	mov	result1, objptr
233cc     00 A8 03 FF 
233d0     00 FA 45 F5 | 	or	result1, ##122683392
233d4     44 00 00 FF 
233d8     08 E5 05 F1 | 	add	objptr, ##35080
233dc     F2 FA 61 FC | 	wrlong	result1, objptr
233e0     44 00 00 FF 
233e4     08 E5 85 F1 | 	sub	objptr, ##35080
233e8     F2 FA 01 F6 | 	mov	result1, objptr
233ec     00 B0 03 FF 
233f0     00 FA 45 F5 | 	or	result1, ##123731968
233f4     44 00 00 FF 
233f8     00 E5 05 F1 | 	add	objptr, ##35072
233fc     F2 FA 61 FC | 	wrlong	result1, objptr
23400     44 00 00 FF 
23404     00 E5 85 F1 | 	sub	objptr, ##35072
23408     F2 FA 01 F6 | 	mov	result1, objptr
2340c     00 B8 03 FF 
23410     00 FA 45 F5 | 	or	result1, ##124780544
23414     44 00 00 FF 
23418     FC E4 05 F1 | 	add	objptr, ##35068
2341c     F2 FA 61 FC | 	wrlong	result1, objptr
23420     44 00 00 FF 
23424     FC E4 85 F1 | 	sub	objptr, ##35068
23428     F2 FA 01 F6 | 	mov	result1, objptr
2342c     77 FA 25 F4 | 	bith	result1, #119
23430     44 00 00 FF 
23434     1C E5 05 F1 | 	add	objptr, ##35100
23438     F2 FA 61 FC | 	wrlong	result1, objptr
2343c     44 00 00 FF 
23440     1C E5 85 F1 | 	sub	objptr, ##35100
23444     F2 FA 01 F6 | 	mov	result1, objptr
23448     00 C8 03 FF 
2344c     00 FA 45 F5 | 	or	result1, ##126877696
23450     44 00 00 FF 
23454     10 E5 05 F1 | 	add	objptr, ##35088
23458     F2 FA 61 FC | 	wrlong	result1, objptr
2345c     44 00 00 FF 
23460     10 E5 85 F1 | 	sub	objptr, ##35088
23464     F2 FA 01 F6 | 	mov	result1, objptr
23468     00 D0 03 FF 
2346c     00 FA 45 F5 | 	or	result1, ##127926272
23470     44 00 00 FF 
23474     14 E5 05 F1 | 	add	objptr, ##35092
23478     F2 FA 61 FC | 	wrlong	result1, objptr
2347c     44 00 00 FF 
23480     14 E5 85 F1 | 	sub	objptr, ##35092
23484     F2 FA 01 F6 | 	mov	result1, objptr
23488     00 D8 03 FF 
2348c     00 FA 45 F5 | 	or	result1, ##128974848
23490     44 00 00 FF 
23494     18 E5 05 F1 | 	add	objptr, ##35096
23498     F2 FA 61 FC | 	wrlong	result1, objptr
2349c     44 00 00 FF 
234a0     18 E5 85 F1 | 	sub	objptr, ##35096
234a4     F2 FA 01 F6 | 	mov	result1, objptr
234a8     96 FA 25 F4 | 	bith	result1, #150
234ac     44 00 00 FF 
234b0     20 E5 05 F1 | 	add	objptr, ##35104
234b4     F2 FA 61 FC | 	wrlong	result1, objptr
234b8     44 00 00 FF 
234bc     20 E5 85 F1 | 	sub	objptr, ##35104
234c0     F2 FA 01 F6 | 	mov	result1, objptr
234c4     00 E8 03 FF 
234c8     00 FA 45 F5 | 	or	result1, ##131072000
234cc     44 00 00 FF 
234d0     24 E5 05 F1 | 	add	objptr, ##35108
234d4     F2 FA 61 FC | 	wrlong	result1, objptr
234d8     44 00 00 FF 
234dc     24 E5 85 F1 | 	sub	objptr, ##35108
234e0     F2 FA 01 F6 | 	mov	result1, objptr
234e4     B5 FA 25 F4 | 	bith	result1, #181
234e8     44 00 00 FF 
234ec     28 E5 05 F1 | 	add	objptr, ##35112
234f0     F2 FA 61 FC | 	wrlong	result1, objptr
234f4     44 00 00 FF 
234f8     28 E5 85 F1 | 	sub	objptr, ##35112
234fc     F2 FA 01 F6 | 	mov	result1, objptr
23500     D4 FA 25 F4 | 	bith	result1, #212
23504     44 00 00 FF 
23508     2C E5 05 F1 | 	add	objptr, ##35116
2350c     F2 FA 61 FC | 	wrlong	result1, objptr
23510     44 00 00 FF 
23514     2C E5 85 F1 | 	sub	objptr, ##35116
23518     F2 FA 01 F6 | 	mov	result1, objptr
2351c     1B FA 25 F4 | 	bith	result1, #27
23520     44 00 00 FF 
23524     30 E5 05 F1 | 	add	objptr, ##35120
23528     F2 FA 61 FC | 	wrlong	result1, objptr
2352c     44 00 00 FF 
23530     30 E5 85 F1 | 	sub	objptr, ##35120
23534     F2 FA 01 F6 | 	mov	result1, objptr
23538     00 08 04 FF 
2353c     00 FA 45 F5 | 	or	result1, ##135266304
23540     44 00 00 FF 
23544     34 E5 05 F1 | 	add	objptr, ##35124
23548     F2 FA 61 FC | 	wrlong	result1, objptr
2354c     44 00 00 FF 
23550     34 E5 85 F1 | 	sub	objptr, ##35124
23554     F2 FA 01 F6 | 	mov	result1, objptr
23558     00 10 04 FF 
2355c     00 FA 45 F5 | 	or	result1, ##136314880
23560     44 00 00 FF 
23564     3C E5 05 F1 | 	add	objptr, ##35132
23568     F2 FA 61 FC | 	wrlong	result1, objptr
2356c     44 00 00 FF 
23570     3C E5 85 F1 | 	sub	objptr, ##35132
23574     F2 FA 01 F6 | 	mov	result1, objptr
23578     00 18 04 FF 
2357c     00 FA 45 F5 | 	or	result1, ##137363456
23580     44 00 00 FF 
23584     40 E5 05 F1 | 	add	objptr, ##35136
23588     F2 FA 61 FC | 	wrlong	result1, objptr
2358c     44 00 00 FF 
23590     40 E5 85 F1 | 	sub	objptr, ##35136
23594     F2 FA 01 F6 | 	mov	result1, objptr
23598     00 20 04 FF 
2359c     00 FA 45 F5 | 	or	result1, ##138412032
235a0     44 00 00 FF 
235a4     44 E5 05 F1 | 	add	objptr, ##35140
235a8     F2 FA 61 FC | 	wrlong	result1, objptr
235ac     44 00 00 FF 
235b0     44 E5 85 F1 | 	sub	objptr, ##35140
235b4     F2 FA 01 F6 | 	mov	result1, objptr
235b8     00 28 04 FF 
235bc     00 FA 45 F5 | 	or	result1, ##139460608
235c0     44 00 00 FF 
235c4     38 E5 05 F1 | 	add	objptr, ##35128
235c8     F2 FA 61 FC | 	wrlong	result1, objptr
235cc     44 00 00 FF 
235d0     38 E5 85 F1 | 	sub	objptr, ##35128
235d4     F2 FA 01 F6 | 	mov	result1, objptr
235d8     00 30 04 FF 
235dc     00 FA 45 F5 | 	or	result1, ##140509184
235e0     44 00 00 FF 
235e4     48 E5 05 F1 | 	add	objptr, ##35144
235e8     F2 FA 61 FC | 	wrlong	result1, objptr
235ec     44 00 00 FF 
235f0     48 E5 85 F1 | 	sub	objptr, ##35144
235f4     F2 FA 01 F6 | 	mov	result1, objptr
235f8     00 38 04 FF 
235fc     00 FA 45 F5 | 	or	result1, ##141557760
23600     44 00 00 FF 
23604     7C E5 05 F1 | 	add	objptr, ##35196
23608     F2 FA 61 FC | 	wrlong	result1, objptr
2360c     44 00 00 FF 
23610     7C E5 85 F1 | 	sub	objptr, ##35196
23614     F2 FA 01 F6 | 	mov	result1, objptr
23618     00 40 04 FF 
2361c     00 FA 45 F5 | 	or	result1, ##142606336
23620     44 00 00 FF 
23624     74 E5 05 F1 | 	add	objptr, ##35188
23628     F2 FA 61 FC | 	wrlong	result1, objptr
2362c     44 00 00 FF 
23630     74 E5 85 F1 | 	sub	objptr, ##35188
23634     F2 FA 01 F6 | 	mov	result1, objptr
23638     00 48 04 FF 
2363c     00 FA 45 F5 | 	or	result1, ##143654912
23640     44 00 00 FF 
23644     4C E5 05 F1 | 	add	objptr, ##35148
23648     F2 FA 61 FC | 	wrlong	result1, objptr
2364c     44 00 00 FF 
23650     4C E5 85 F1 | 	sub	objptr, ##35148
23654     F2 FA 01 F6 | 	mov	result1, objptr
23658     00 50 04 FF 
2365c     00 FA 45 F5 | 	or	result1, ##144703488
23660     44 00 00 FF 
23664     50 E5 05 F1 | 	add	objptr, ##35152
23668     F2 FA 61 FC | 	wrlong	result1, objptr
2366c     44 00 00 FF 
23670     50 E5 85 F1 | 	sub	objptr, ##35152
23674     F2 FA 01 F6 | 	mov	result1, objptr
23678     00 58 04 FF 
2367c     00 FA 45 F5 | 	or	result1, ##145752064
23680     44 00 00 FF 
23684     6C E5 05 F1 | 	add	objptr, ##35180
23688     F2 FA 61 FC | 	wrlong	result1, objptr
2368c     44 00 00 FF 
23690     6C E5 85 F1 | 	sub	objptr, ##35180
23694     F2 FA 01 F6 | 	mov	result1, objptr
23698     00 60 04 FF 
2369c     00 FA 45 F5 | 	or	result1, ##146800640
236a0     44 00 00 FF 
236a4     70 E5 05 F1 | 	add	objptr, ##35184
236a8     F2 FA 61 FC | 	wrlong	result1, objptr
236ac     44 00 00 FF 
236b0     70 E5 85 F1 | 	sub	objptr, ##35184
236b4     F2 FA 01 F6 | 	mov	result1, objptr
236b8     00 68 04 FF 
236bc     00 FA 45 F5 | 	or	result1, ##147849216
236c0     44 00 00 FF 
236c4     8C E5 05 F1 | 	add	objptr, ##35212
236c8     F2 FA 61 FC | 	wrlong	result1, objptr
236cc     44 00 00 FF 
236d0     8C E5 85 F1 | 	sub	objptr, ##35212
236d4     F2 FA 01 F6 | 	mov	result1, objptr
236d8     00 70 04 FF 
236dc     00 FA 45 F5 | 	or	result1, ##148897792
236e0     44 00 00 FF 
236e4     88 E5 05 F1 | 	add	objptr, ##35208
236e8     F2 FA 61 FC | 	wrlong	result1, objptr
236ec     44 00 00 FF 
236f0     88 E5 85 F1 | 	sub	objptr, ##35208
236f4     F2 FA 01 F6 | 	mov	result1, objptr
236f8     00 78 04 FF 
236fc     00 FA 45 F5 | 	or	result1, ##149946368
23700     44 00 00 FF 
23704     98 E5 05 F1 | 	add	objptr, ##35224
23708     F2 FA 61 FC | 	wrlong	result1, objptr
2370c     44 00 00 FF 
23710     98 E5 85 F1 | 	sub	objptr, ##35224
23714     F2 FA 01 F6 | 	mov	result1, objptr
23718     00 80 04 FF 
2371c     00 FA 45 F5 | 	or	result1, ##150994944
23720     44 00 00 FF 
23724     64 E5 05 F1 | 	add	objptr, ##35172
23728     F2 FA 61 FC | 	wrlong	result1, objptr
2372c     44 00 00 FF 
23730     64 E5 85 F1 | 	sub	objptr, ##35172
23734     F2 FA 01 F6 | 	mov	result1, objptr
23738     00 88 04 FF 
2373c     00 FA 45 F5 | 	or	result1, ##152043520
23740     44 00 00 FF 
23744     94 E5 05 F1 | 	add	objptr, ##35220
23748     F2 FA 61 FC | 	wrlong	result1, objptr
2374c     44 00 00 FF 
23750     94 E5 85 F1 | 	sub	objptr, ##35220
23754     F2 FA 01 F6 | 	mov	result1, objptr
23758     00 90 04 FF 
2375c     00 FA 45 F5 | 	or	result1, ##153092096
23760     44 00 00 FF 
23764     84 E5 05 F1 | 	add	objptr, ##35204
23768     F2 FA 61 FC | 	wrlong	result1, objptr
2376c     44 00 00 FF 
23770     84 E5 85 F1 | 	sub	objptr, ##35204
23774     F2 FA 01 F6 | 	mov	result1, objptr
23778     00 98 04 FF 
2377c     00 FA 45 F5 | 	or	result1, ##154140672
23780     43 00 00 FF 
23784     34 E5 05 F1 | 	add	objptr, ##34612
23788     F2 FA 61 FC | 	wrlong	result1, objptr
2378c     43 00 00 FF 
23790     34 E5 85 F1 | 	sub	objptr, ##34612
23794     F2 FA 01 F6 | 	mov	result1, objptr
23798     00 A0 04 FF 
2379c     00 FA 45 F5 | 	or	result1, ##155189248
237a0     44 00 00 FF 
237a4     54 E5 05 F1 | 	add	objptr, ##35156
237a8     F2 FA 61 FC | 	wrlong	result1, objptr
237ac     44 00 00 FF 
237b0     54 E5 85 F1 | 	sub	objptr, ##35156
237b4     F2 FA 01 F6 | 	mov	result1, objptr
237b8     00 08 01 FF 
237bc     00 FA 45 F5 | 	or	result1, ##34603008
237c0     44 00 00 FF 
237c4     5C E5 05 F1 | 	add	objptr, ##35164
237c8     F2 FA 61 FC | 	wrlong	result1, objptr
237cc     44 00 00 FF 
237d0     5C E5 85 F1 | 	sub	objptr, ##35164
237d4     F2 FA 01 F6 | 	mov	result1, objptr
237d8     00 A8 04 FF 
237dc     00 FA 45 F5 | 	or	result1, ##156237824
237e0     44 00 00 FF 
237e4     58 E5 05 F1 | 	add	objptr, ##35160
237e8     F2 FA 61 FC | 	wrlong	result1, objptr
237ec     44 00 00 FF 
237f0     58 E5 85 F1 | 	sub	objptr, ##35160
237f4     F2 FA 01 F6 | 	mov	result1, objptr
237f8     00 B0 04 FF 
237fc     00 FA 45 F5 | 	or	result1, ##157286400
23800     44 00 00 FF 
23804     9C E5 05 F1 | 	add	objptr, ##35228
23808     F2 FA 61 FC | 	wrlong	result1, objptr
2380c     44 00 00 FF 
23810     9C E5 85 F1 | 	sub	objptr, ##35228
23814     F2 FA 01 F6 | 	mov	result1, objptr
23818     00 B8 04 FF 
2381c     00 FA 45 F5 | 	or	result1, ##158334976
23820     44 00 00 FF 
23824     A0 E5 05 F1 | 	add	objptr, ##35232
23828     F2 FA 61 FC | 	wrlong	result1, objptr
2382c     44 00 00 FF 
23830     A0 E5 85 F1 | 	sub	objptr, ##35232
23834     F2 FA 01 F6 | 	mov	result1, objptr
23838     00 C0 04 FF 
2383c     00 FA 45 F5 | 	or	result1, ##159383552
23840     44 00 00 FF 
23844     A4 E5 05 F1 | 	add	objptr, ##35236
23848     F2 FA 61 FC | 	wrlong	result1, objptr
2384c     44 00 00 FF 
23850     A4 E5 85 F1 | 	sub	objptr, ##35236
23854     F2 FA 01 F6 | 	mov	result1, objptr
23858     00 C8 04 FF 
2385c     00 FA 45 F5 | 	or	result1, ##160432128
23860     44 00 00 FF 
23864     A8 E5 05 F1 | 	add	objptr, ##35240
23868     F2 FA 61 FC | 	wrlong	result1, objptr
2386c     44 00 00 FF 
23870     A8 E5 85 F1 | 	sub	objptr, ##35240
23874     F2 FA 01 F6 | 	mov	result1, objptr
23878     00 D0 04 FF 
2387c     00 FA 45 F5 | 	or	result1, ##161480704
23880     44 00 00 FF 
23884     B0 E5 05 F1 | 	add	objptr, ##35248
23888     F2 FA 61 FC | 	wrlong	result1, objptr
2388c     44 00 00 FF 
23890     B0 E5 85 F1 | 	sub	objptr, ##35248
23894     F2 FA 01 F6 | 	mov	result1, objptr
23898     00 D8 04 FF 
2389c     00 FA 45 F5 | 	or	result1, ##162529280
238a0     44 00 00 FF 
238a4     B4 E5 05 F1 | 	add	objptr, ##35252
238a8     F2 FA 61 FC | 	wrlong	result1, objptr
238ac     44 00 00 FF 
238b0     B4 E5 85 F1 | 	sub	objptr, ##35252
238b4     F2 FA 01 F6 | 	mov	result1, objptr
238b8     00 E0 04 FF 
238bc     00 FA 45 F5 | 	or	result1, ##163577856
238c0     44 00 00 FF 
238c4     B8 E5 05 F1 | 	add	objptr, ##35256
238c8     F2 FA 61 FC | 	wrlong	result1, objptr
238cc     44 00 00 FF 
238d0     B8 E5 85 F1 | 	sub	objptr, ##35256
238d4     F2 FA 01 F6 | 	mov	result1, objptr
238d8     00 E8 04 FF 
238dc     00 FA 45 F5 | 	or	result1, ##164626432
238e0     44 00 00 FF 
238e4     D8 E5 05 F1 | 	add	objptr, ##35288
238e8     F2 FA 61 FC | 	wrlong	result1, objptr
238ec     44 00 00 FF 
238f0     D8 E5 85 F1 | 	sub	objptr, ##35288
238f4     F2 FA 01 F6 | 	mov	result1, objptr
238f8     00 F0 04 FF 
238fc     00 FA 45 F5 | 	or	result1, ##165675008
23900     44 00 00 FF 
23904     D4 E5 05 F1 | 	add	objptr, ##35284
23908     F2 FA 61 FC | 	wrlong	result1, objptr
2390c     44 00 00 FF 
23910     D4 E5 85 F1 | 	sub	objptr, ##35284
23914     F2 FA 01 F6 | 	mov	result1, objptr
23918     00 F8 04 FF 
2391c     00 FA 45 F5 | 	or	result1, ##166723584
23920     44 00 00 FF 
23924     90 E5 05 F1 | 	add	objptr, ##35216
23928     F2 FA 61 FC | 	wrlong	result1, objptr
2392c     44 00 00 FF 
23930     90 E5 85 F1 | 	sub	objptr, ##35216
23934     F2 FA 01 F6 | 	mov	result1, objptr
23938     00 00 05 FF 
2393c     00 FA 45 F5 | 	or	result1, ##167772160
23940     44 00 00 FF 
23944     80 E5 05 F1 | 	add	objptr, ##35200
23948     F2 FA 61 FC | 	wrlong	result1, objptr
2394c     44 00 00 FF 
23950     80 E5 85 F1 | 	sub	objptr, ##35200
23954     F2 FA 01 F6 | 	mov	result1, objptr
23958     00 08 05 FF 
2395c     00 FA 45 F5 | 	or	result1, ##168820736
23960     44 00 00 FF 
23964     BC E5 05 F1 | 	add	objptr, ##35260
23968     F2 FA 61 FC | 	wrlong	result1, objptr
2396c     44 00 00 FF 
23970     BC E5 85 F1 | 	sub	objptr, ##35260
23974     F2 FA 01 F6 | 	mov	result1, objptr
23978     00 10 05 FF 
2397c     00 FA 45 F5 | 	or	result1, ##169869312
23980     44 00 00 FF 
23984     C0 E5 05 F1 | 	add	objptr, ##35264
23988     F2 FA 61 FC | 	wrlong	result1, objptr
2398c     44 00 00 FF 
23990     C0 E5 85 F1 | 	sub	objptr, ##35264
23994     F2 FA 01 F6 | 	mov	result1, objptr
23998     00 18 05 FF 
2399c     00 FA 45 F5 | 	or	result1, ##170917888
239a0     44 00 00 FF 
239a4     C4 E5 05 F1 | 	add	objptr, ##35268
239a8     F2 FA 61 FC | 	wrlong	result1, objptr
239ac     44 00 00 FF 
239b0     C4 E5 85 F1 | 	sub	objptr, ##35268
239b4     F2 FA 01 F6 | 	mov	result1, objptr
239b8     00 20 05 FF 
239bc     00 FA 45 F5 | 	or	result1, ##171966464
239c0     44 00 00 FF 
239c4     C8 E5 05 F1 | 	add	objptr, ##35272
239c8     F2 FA 61 FC | 	wrlong	result1, objptr
239cc     44 00 00 FF 
239d0     C8 E5 85 F1 | 	sub	objptr, ##35272
239d4     F2 FA 01 F6 | 	mov	result1, objptr
239d8     00 28 05 FF 
239dc     00 FA 45 F5 | 	or	result1, ##173015040
239e0     44 00 00 FF 
239e4     CC E5 05 F1 | 	add	objptr, ##35276
239e8     F2 FA 61 FC | 	wrlong	result1, objptr
239ec     44 00 00 FF 
239f0     CC E5 85 F1 | 	sub	objptr, ##35276
239f4     F2 FA 01 F6 | 	mov	result1, objptr
239f8     00 30 05 FF 
239fc     00 FA 45 F5 | 	or	result1, ##174063616
23a00     44 00 00 FF 
23a04     E4 E5 05 F1 | 	add	objptr, ##35300
23a08     F2 FA 61 FC | 	wrlong	result1, objptr
23a0c     44 00 00 FF 
23a10     E4 E5 85 F1 | 	sub	objptr, ##35300
23a14     F2 FA 01 F6 | 	mov	result1, objptr
23a18     00 38 05 FF 
23a1c     00 FA 45 F5 | 	or	result1, ##175112192
23a20     44 00 00 FF 
23a24     D0 E5 05 F1 | 	add	objptr, ##35280
23a28     F2 FA 61 FC | 	wrlong	result1, objptr
23a2c     44 00 00 FF 
23a30     D0 E5 85 F1 | 	sub	objptr, ##35280
23a34     F2 FA 01 F6 | 	mov	result1, objptr
23a38     00 40 05 FF 
23a3c     00 FA 45 F5 | 	or	result1, ##176160768
23a40     44 00 00 FF 
23a44     DC E5 05 F1 | 	add	objptr, ##35292
23a48     F2 FA 61 FC | 	wrlong	result1, objptr
23a4c     44 00 00 FF 
23a50     DC E5 85 F1 | 	sub	objptr, ##35292
23a54     F2 FA 01 F6 | 	mov	result1, objptr
23a58     00 48 05 FF 
23a5c     00 FA 45 F5 | 	or	result1, ##177209344
23a60     44 00 00 FF 
23a64     E0 E5 05 F1 | 	add	objptr, ##35296
23a68     F2 FA 61 FC | 	wrlong	result1, objptr
23a6c     44 00 00 FF 
23a70     E0 E5 85 F1 | 	sub	objptr, ##35296
23a74                 | _init_commands_ret
23a74     2D 00 64 FD | 	ret
23a78                 | 
23a78                 | ' 
23a78                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
23a78                 | ' 
23a78                 | ' sub init_audio
23a78                 | _init_audio
23a78     06 4A 05 F6 | 	mov	COUNT_, #6
23a7c     A8 00 A0 FD | 	call	#pushregs_
23a80     00 C0 1F FF 
23a84     00 26 06 F6 | 	mov	local01, ##1065353216
23a88                 | ' 
23a88                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
23a88     00 28 06 F6 | 	mov	local02, #0
23a8c                 | LR__2700
23a8c     14 2B 02 F6 | 	mov	local03, local02
23a90     01 2A 66 F0 | 	shl	local03, #1
23a94     58 7F 23 FF 
23a98     00 2C 06 F6 | 	mov	local04, ##1191096320
23a9c     14 13 52 F6 | 	abs	arg01, local02 wc
23aa0     1F 2E C6 C9 |  if_b	decod	local05, #31
23aa4     00 2E 06 36 |  if_ae	mov	local05, #0
23aa8     DC 70 B0 FD | 	call	#__system___float_fromuns
23aac     17 FB 61 F5 | 	xor	result1, local05
23ab0     FD 12 02 F6 | 	mov	arg01, result1
23ab4     87 24 20 FF 
23ab8     DB 15 06 F6 | 	mov	arg02, ##1078530011
23abc     CC 74 B0 FD | 	call	#__system___float_mul
23ac0     FD 12 02 F6 | 	mov	arg01, result1
23ac4     00 00 22 FF 
23ac8     00 14 06 F6 | 	mov	arg02, ##1140850688
23acc     C0 76 B0 FD | 	call	#__system___float_div
23ad0     FD 12 02 F6 | 	mov	arg01, result1
23ad4     18 7E B0 FD | 	call	#__system____builtin_sinf
23ad8     FD 14 02 F6 | 	mov	arg02, result1
23adc     16 13 02 F6 | 	mov	arg01, local04
23ae0     A8 74 B0 FD | 	call	#__system___float_mul
23ae4     FD 12 02 F6 | 	mov	arg01, result1
23ae8     01 14 06 F6 | 	mov	arg02, #1
23aec     64 79 B0 FD | 	call	#__system___float_tointeger
23af0     FD 14 02 F6 | 	mov	arg02, result1
23af4     15 13 02 F6 | 	mov	arg01, local03
23af8     A8 0D B0 FD | 	call	#_psdpoke
23afc     01 28 06 F1 | 	add	local02, #1
23b00     02 00 00 FF 
23b04     00 28 56 F2 | 	cmps	local02, ##1024 wc
23b08     80 FF 9F CD |  if_b	jmp	#LR__2700
23b0c                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
23b0c     00 28 06 F6 | 	mov	local02, #0
23b10                 | LR__2701
23b10     14 15 02 F6 | 	mov	arg02, local02
23b14     01 14 66 F0 | 	shl	arg02, #1
23b18     0B 12 C6 F9 | 	decod	arg01, #11
23b1c     0A 13 02 F1 | 	add	arg01, arg02
23b20     14 2D 02 F6 | 	mov	local04, local02
23b24     07 2C 66 F0 | 	shl	local04, #7
23b28     14 2D 82 F1 | 	sub	local04, local02
23b2c     C0 FF 7F FF 
23b30     00 15 06 F6 | 	mov	arg02, ##-32512
23b34     16 15 02 F1 | 	add	arg02, local04
23b38     68 0D B0 FD | 	call	#_psdpoke
23b3c     09 2C C6 F9 | 	decod	local04, #9
23b40     14 2D 02 F1 | 	add	local04, local02
23b44     01 2C 66 F0 | 	shl	local04, #1
23b48     0B 12 C6 F9 | 	decod	arg01, #11
23b4c     16 13 02 F1 | 	add	arg01, local04
23b50     14 2F 02 F6 | 	mov	local05, local02
23b54     07 2E 66 F0 | 	shl	local05, #7
23b58     14 2F 82 F1 | 	sub	local05, local02
23b5c     3F 00 00 FF 
23b60     00 15 06 F6 | 	mov	arg02, ##32512
23b64     17 15 82 F1 | 	sub	arg02, local05
23b68     38 0D B0 FD | 	call	#_psdpoke
23b6c     01 28 06 F1 | 	add	local02, #1
23b70     01 00 00 FF 
23b74     00 28 56 F2 | 	cmps	local02, ##512 wc
23b78     94 FF 9F CD |  if_b	jmp	#LR__2701
23b7c                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
23b7c     00 28 06 F6 | 	mov	local02, #0
23b80                 | LR__2702
23b80     14 2F 02 F6 | 	mov	local05, local02
23b84     01 2E 66 F0 | 	shl	local05, #1
23b88     0C 12 C6 F9 | 	decod	arg01, #12
23b8c     17 13 02 F1 | 	add	arg01, local05
23b90     14 2F 02 F6 | 	mov	local05, local02
23b94     06 2E 66 F0 | 	shl	local05, #6
23b98     14 2F 82 F1 | 	sub	local05, local02
23b9c     C1 FF 7F FF 
23ba0     00 14 06 F6 | 	mov	arg02, ##-32256
23ba4     17 15 02 F1 | 	add	arg02, local05
23ba8     F8 0C B0 FD | 	call	#_psdpoke
23bac     01 28 06 F1 | 	add	local02, #1
23bb0     02 00 00 FF 
23bb4     00 28 56 F2 | 	cmps	local02, ##1024 wc
23bb8     C4 FF 9F CD |  if_b	jmp	#LR__2702
23bbc                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
23bbc     00 28 06 F6 | 	mov	local02, #0
23bc0                 | LR__2703
23bc0     14 2F 02 F6 | 	mov	local05, local02
23bc4     01 2E 66 F0 | 	shl	local05, #1
23bc8     0C 00 00 FF 
23bcc     00 12 06 F6 | 	mov	arg01, ##6144
23bd0     17 13 02 F1 | 	add	arg01, local05
23bd4     C0 FF 7F FF 
23bd8     A8 14 06 F6 | 	mov	arg02, ##-32600
23bdc     C4 0C B0 FD | 	call	#_psdpoke
23be0     01 28 06 F1 | 	add	local02, #1
23be4     80 28 56 F2 | 	cmps	local02, #128 wc
23be8     D4 FF 9F CD |  if_b	jmp	#LR__2703
23bec     80 28 06 F6 | 	mov	local02, #128
23bf0                 | LR__2704
23bf0     14 2F 02 F6 | 	mov	local05, local02
23bf4     01 2E 66 F0 | 	shl	local05, #1
23bf8     0C 00 00 FF 
23bfc     00 12 06 F6 | 	mov	arg01, ##6144
23c00     17 13 02 F1 | 	add	arg01, local05
23c04     3F 00 00 FF 
23c08     58 15 06 F6 | 	mov	arg02, ##32600
23c0c     94 0C B0 FD | 	call	#_psdpoke
23c10     01 28 06 F1 | 	add	local02, #1
23c14     02 00 00 FF 
23c18     00 28 16 F2 | 	cmp	local02, ##1024 wc
23c1c     D0 FF 9F CD |  if_b	jmp	#LR__2704
23c20                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
23c20     00 28 06 F6 | 	mov	local02, #0
23c24                 | LR__2705
23c24     14 2F 02 F6 | 	mov	local05, local02
23c28     01 2E 66 F0 | 	shl	local05, #1
23c2c     0D 12 C6 F9 | 	decod	arg01, #13
23c30     17 13 02 F1 | 	add	arg01, local05
23c34     C0 FF 7F FF 
23c38     A8 14 06 F6 | 	mov	arg02, ##-32600
23c3c     64 0C B0 FD | 	call	#_psdpoke
23c40     01 28 06 F1 | 	add	local02, #1
23c44     01 00 00 FF 
23c48     00 28 56 F2 | 	cmps	local02, ##512 wc
23c4c     D4 FF 9F CD |  if_b	jmp	#LR__2705
23c50     09 28 C6 F9 | 	decod	local02, #9
23c54                 | LR__2706
23c54     14 2F 02 F6 | 	mov	local05, local02
23c58     01 2E 66 F0 | 	shl	local05, #1
23c5c     0D 12 C6 F9 | 	decod	arg01, #13
23c60     17 13 02 F1 | 	add	arg01, local05
23c64     3F 00 00 FF 
23c68     58 15 06 F6 | 	mov	arg02, ##32600
23c6c     34 0C B0 FD | 	call	#_psdpoke
23c70     01 28 06 F1 | 	add	local02, #1
23c74     02 00 00 FF 
23c78     00 28 16 F2 | 	cmp	local02, ##1024 wc
23c7c     D4 FF 9F CD |  if_b	jmp	#LR__2706
23c80                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
23c80     00 28 06 F6 | 	mov	local02, #0
23c84                 | LR__2707
23c84     14 2F 02 F6 | 	mov	local05, local02
23c88     01 2E 66 F0 | 	shl	local05, #1
23c8c     14 00 00 FF 
23c90     00 12 06 F6 | 	mov	arg01, ##10240
23c94     17 13 02 F1 | 	add	arg01, local05
23c98     C0 FF 7F FF 
23c9c     A8 14 06 F6 | 	mov	arg02, ##-32600
23ca0     00 0C B0 FD | 	call	#_psdpoke
23ca4     01 28 06 F1 | 	add	local02, #1
23ca8     00 29 56 F2 | 	cmps	local02, #256 wc
23cac     D4 FF 9F CD |  if_b	jmp	#LR__2707
23cb0     00 29 06 F6 | 	mov	local02, #256
23cb4                 | LR__2708
23cb4     14 2F 02 F6 | 	mov	local05, local02
23cb8     01 2E 66 F0 | 	shl	local05, #1
23cbc     14 00 00 FF 
23cc0     00 12 06 F6 | 	mov	arg01, ##10240
23cc4     17 13 02 F1 | 	add	arg01, local05
23cc8     3F 00 00 FF 
23ccc     58 15 06 F6 | 	mov	arg02, ##32600
23cd0     D0 0B B0 FD | 	call	#_psdpoke
23cd4     01 28 06 F1 | 	add	local02, #1
23cd8     02 00 00 FF 
23cdc     00 28 16 F2 | 	cmp	local02, ##1024 wc
23ce0     D0 FF 9F CD |  if_b	jmp	#LR__2708
23ce4                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
23ce4     18 00 00 FF 
23ce8     00 28 06 F6 | 	mov	local02, ##12288
23cec                 | LR__2709
23cec     14 13 02 F6 | 	mov	arg01, local02
23cf0     00 14 06 F6 | 	mov	arg02, #0
23cf4     64 0B B0 FD | 	call	#_pslpoke
23cf8     04 28 06 F1 | 	add	local02, #4
23cfc     77 00 00 FF 
23d00     FD 29 56 F2 | 	cmps	local02, ##61437 wc
23d04     E4 FF 9F CD |  if_b	jmp	#LR__2709
23d08                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
23d08     00 28 06 F6 | 	mov	local02, #0
23d0c                 | LR__2710
23d0c     14 2F 02 F6 | 	mov	local05, local02
23d10     01 2E 66 F0 | 	shl	local05, #1
23d14     78 00 00 FF 
23d18     00 2A 06 F6 | 	mov	local03, ##61440
23d1c     17 2B 02 F1 | 	add	local03, local05
23d20     12 00 00 FF 
23d24     BA EA 05 F1 | 	add	ptr__dat__, ##9402
23d28     F5 12 02 F6 | 	mov	arg01, ptr__dat__
23d2c     12 00 00 FF 
23d30     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
23d34     10 12 06 F1 | 	add	arg01, #16
23d38     14 15 02 F6 | 	mov	arg02, local02
23d3c     01 14 66 F0 | 	shl	arg02, #1
23d40     0A 13 02 F1 | 	add	arg01, arg02
23d44     09 15 E2 FA | 	rdword	arg02, arg01
23d48     15 13 02 F6 | 	mov	arg01, local03
23d4c     54 0B B0 FD | 	call	#_psdpoke
23d50     01 28 06 F1 | 	add	local02, #1
23d54     02 00 00 FF 
23d58     00 28 56 F2 | 	cmps	local02, ##1024 wc
23d5c     AC FF 9F CD |  if_b	jmp	#LR__2710
23d60                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
23d60     00 28 06 F6 | 	mov	local02, #0
23d64                 | LR__2711
23d64     14 2F 02 F6 | 	mov	local05, local02
23d68     01 2E 66 F0 | 	shl	local05, #1
23d6c     7C 00 00 FF 
23d70     00 2A 06 F6 | 	mov	local03, ##63488
23d74     17 2B 02 F1 | 	add	local03, local05
23d78     0E 00 00 FF 
23d7c     AA EA 05 F1 | 	add	ptr__dat__, ##7338
23d80     F5 12 02 F6 | 	mov	arg01, ptr__dat__
23d84     0E 00 00 FF 
23d88     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
23d8c     10 12 06 F1 | 	add	arg01, #16
23d90     14 15 02 F6 | 	mov	arg02, local02
23d94     01 14 66 F0 | 	shl	arg02, #1
23d98     0A 13 02 F1 | 	add	arg01, arg02
23d9c     09 15 E2 FA | 	rdword	arg02, arg01
23da0     15 13 02 F6 | 	mov	arg01, local03
23da4     FC 0A B0 FD | 	call	#_psdpoke
23da8     01 28 06 F1 | 	add	local02, #1
23dac     02 00 00 FF 
23db0     00 28 56 F2 | 	cmps	local02, ##1024 wc
23db4     AC FF 9F CD |  if_b	jmp	#LR__2711
23db8                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
23db8     00 28 06 F6 | 	mov	local02, #0
23dbc     0C 00 00 FF 
23dc0     D8 E4 05 F1 | 	add	objptr, ##6360
23dc4     97 18 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
23dc8                 | LR__2712
23dc8     14 2F 02 F6 | 	mov	local05, local02
23dcc     01 2E 66 F0 | 	shl	local05, #1
23dd0     F2 2E 02 F1 | 	add	local05, objptr
23dd4     14 2B 02 F6 | 	mov	local03, local02
23dd8     08 2A 66 F0 | 	shl	local03, #8
23ddc     7F 00 00 FF 
23de0     00 31 06 F6 | 	mov	local06, ##65280
23de4     15 31 82 F1 | 	sub	local06, local03
23de8     17 31 52 FC | 	wrword	local06, local05
23dec     01 28 06 F1 | 	add	local02, #1
23df0     00 29 56 F2 | 	cmps	local02, #256 wc
23df4     D0 FF 9F CD |  if_b	jmp	#LR__2712
23df8                 | LR__2713
23df8     0C 00 00 FF 
23dfc     D8 E4 85 F1 | 	sub	objptr, ##6360
23e00                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
23e00     00 28 06 F6 | 	mov	local02, #0
23e04                 | LR__2714
23e04     14 2F 02 F6 | 	mov	local05, local02
23e08     01 2E 66 F0 | 	shl	local05, #1
23e0c     0D 00 00 FF 
23e10     D8 E4 05 F1 | 	add	objptr, ##6872
23e14     F2 2E 02 F1 | 	add	local05, objptr
23e18     80 BF 23 FF 
23e1c     00 12 06 F6 | 	mov	arg01, ##1199505408
23e20     13 15 02 F6 | 	mov	arg02, local01
23e24     0D 00 00 FF 
23e28     D8 E4 85 F1 | 	sub	objptr, ##6872
23e2c     5C 71 B0 FD | 	call	#__system___float_mul
23e30     FD 12 02 F6 | 	mov	arg01, result1
23e34     01 14 06 F6 | 	mov	arg02, #1
23e38     18 76 B0 FD | 	call	#__system___float_tointeger
23e3c     17 FB 51 FC | 	wrword	result1, local05
23e40     13 13 02 F6 | 	mov	arg01, local01
23e44     CC BC 1F FF 
23e48     9A 15 06 F6 | 	mov	arg02, ##1064933786
23e4c     3C 71 B0 FD | 	call	#__system___float_mul
23e50     FD 26 02 F6 | 	mov	local01, result1
23e54     01 28 06 F1 | 	add	local02, #1
23e58     00 29 56 F2 | 	cmps	local02, #256 wc
23e5c     A4 FF 9F CD |  if_b	jmp	#LR__2714
23e60     0E 00 00 FF 
23e64     D6 E4 05 F1 | 	add	objptr, ##7382
23e68     F2 00 58 FC | 	wrword	#0, objptr
23e6c                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
23e6c     00 28 06 F6 | 	mov	local02, #0
23e70     02 E4 05 F1 | 	add	objptr, #2
23e74     97 10 48 FB | 	callpa	#(@LR__2716-@LR__2715)>>2,fcache_load_ptr_
23e78                 | LR__2715
23e78     14 2F 02 F6 | 	mov	local05, local02
23e7c     01 2E 66 F0 | 	shl	local05, #1
23e80     F2 2E 02 F1 | 	add	local05, objptr
23e84     7F 00 80 FF 
23e88     17 01 5A FC | 	wrword	##65280, local05
23e8c     01 28 06 F1 | 	add	local02, #1
23e90     FF 28 56 F2 | 	cmps	local02, #255 wc
23e94     E0 FF 9F CD |  if_b	jmp	#LR__2715
23e98                 | LR__2716
23e98     FE E5 05 F1 | 	add	objptr, #510
23e9c     F2 00 58 FC | 	wrword	#0, objptr
23ea0                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
23ea0     00 28 06 F6 | 	mov	local02, #0
23ea4     02 E4 05 F1 | 	add	objptr, #2
23ea8     97 12 48 FB | 	callpa	#(@LR__2718-@LR__2717)>>2,fcache_load_ptr_
23eac                 | LR__2717
23eac     14 2F 02 F6 | 	mov	local05, local02
23eb0     01 2E 66 F0 | 	shl	local05, #1
23eb4     F2 2E 02 F1 | 	add	local05, objptr
23eb8     14 31 02 F6 | 	mov	local06, local02
23ebc     0C 30 66 F0 | 	shl	local06, #12
23ec0     17 31 52 FC | 	wrword	local06, local05
23ec4     01 28 06 F1 | 	add	local02, #1
23ec8     10 28 56 F2 | 	cmps	local02, #16 wc
23ecc     DC FF 9F CD |  if_b	jmp	#LR__2717
23ed0                 | LR__2718
23ed0                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
23ed0     10 28 06 F6 | 	mov	local02, #16
23ed4     97 10 48 FB | 	callpa	#(@LR__2720-@LR__2719)>>2,fcache_load_ptr_
23ed8                 | LR__2719
23ed8     14 2F 02 F6 | 	mov	local05, local02
23edc     01 2E 66 F0 | 	shl	local05, #1
23ee0     F2 2E 02 F1 | 	add	local05, objptr
23ee4     7F 00 80 FF 
23ee8     17 01 5A FC | 	wrword	##65280, local05
23eec     01 28 06 F1 | 	add	local02, #1
23ef0     F0 28 16 F2 | 	cmp	local02, #240 wc
23ef4     E0 FF 9F CD |  if_b	jmp	#LR__2719
23ef8                 | LR__2720
23ef8                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
23ef8     F0 28 06 F6 | 	mov	local02, #240
23efc     97 14 48 FB | 	callpa	#(@LR__2722-@LR__2721)>>2,fcache_load_ptr_
23f00                 | LR__2721
23f00     14 2F 02 F6 | 	mov	local05, local02
23f04     01 2E 66 F0 | 	shl	local05, #1
23f08     F2 2E 02 F1 | 	add	local05, objptr
23f0c     FF 2A 06 F6 | 	mov	local03, #255
23f10     14 2B 82 F1 | 	sub	local03, local02
23f14     0C 2A 66 F0 | 	shl	local03, #12
23f18     17 2B 52 FC | 	wrword	local03, local05
23f1c     01 28 06 F1 | 	add	local02, #1
23f20     00 29 16 F2 | 	cmp	local02, #256 wc
23f24     D8 FF 9F CD |  if_b	jmp	#LR__2721
23f28                 | LR__2722
23f28                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
23f28     00 28 06 F6 | 	mov	local02, #0
23f2c     01 00 00 FF 
23f30     00 E4 05 F1 | 	add	objptr, ##512
23f34     97 12 48 FB | 	callpa	#(@LR__2724-@LR__2723)>>2,fcache_load_ptr_
23f38                 | LR__2723
23f38     14 2F 02 F6 | 	mov	local05, local02
23f3c     01 2E 66 F0 | 	shl	local05, #1
23f40     F2 2E 02 F1 | 	add	local05, objptr
23f44     14 31 02 F6 | 	mov	local06, local02
23f48     08 30 66 F0 | 	shl	local06, #8
23f4c     17 31 52 FC | 	wrword	local06, local05
23f50     01 28 06 F1 | 	add	local02, #1
23f54     00 29 56 F2 | 	cmps	local02, #256 wc
23f58     DC FF 9F CD |  if_b	jmp	#LR__2723
23f5c                 | LR__2724
23f5c     FE E5 05 F1 | 	add	objptr, #510
23f60     F2 00 58 FC | 	wrword	#0, objptr
23f64                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
23f64     00 28 06 F6 | 	mov	local02, #0
23f68     02 E4 05 F1 | 	add	objptr, #2
23f6c     97 16 48 FB | 	callpa	#(@LR__2726-@LR__2725)>>2,fcache_load_ptr_
23f70                 | LR__2725
23f70     14 2F 02 F6 | 	mov	local05, local02
23f74     01 2E 66 F0 | 	shl	local05, #1
23f78     F2 2E 02 F1 | 	add	local05, objptr
23f7c     14 31 02 F6 | 	mov	local06, local02
23f80     04 30 66 F0 | 	shl	local06, #4
23f84     14 31 02 F1 | 	add	local06, local02
23f88     04 30 66 F0 | 	shl	local06, #4
23f8c     17 31 52 FC | 	wrword	local06, local05
23f90     01 28 06 F1 | 	add	local02, #1
23f94     F0 28 56 F2 | 	cmps	local02, #240 wc
23f98     D4 FF 9F CD |  if_b	jmp	#LR__2725
23f9c                 | LR__2726
23f9c     F0 28 06 F6 | 	mov	local02, #240
23fa0     97 14 48 FB | 	callpa	#(@LR__2728-@LR__2727)>>2,fcache_load_ptr_
23fa4                 | LR__2727
23fa4     14 2F 02 F6 | 	mov	local05, local02
23fa8     01 2E 66 F0 | 	shl	local05, #1
23fac     F2 2E 02 F1 | 	add	local05, objptr
23fb0     FF 2A 06 F6 | 	mov	local03, #255
23fb4     14 2B 82 F1 | 	sub	local03, local02
23fb8     0C 2A 66 F0 | 	shl	local03, #12
23fbc     17 2B 52 FC | 	wrword	local03, local05
23fc0     01 28 06 F1 | 	add	local02, #1
23fc4     00 29 16 F2 | 	cmp	local02, #256 wc
23fc8     D8 FF 9F CD |  if_b	jmp	#LR__2727
23fcc                 | LR__2728
23fcc                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
23fcc     00 28 06 F6 | 	mov	local02, #0
23fd0     01 00 00 FF 
23fd4     00 E4 05 F1 | 	add	objptr, ##512
23fd8     97 20 48 FB | 	callpa	#(@LR__2730-@LR__2729)>>2,fcache_load_ptr_
23fdc                 | LR__2729
23fdc     14 2F 02 F6 | 	mov	local05, local02
23fe0     01 2E 66 F0 | 	shl	local05, #1
23fe4     F2 2E 02 F1 | 	add	local05, objptr
23fe8     14 31 02 F6 | 	mov	local06, local02
23fec     09 30 66 F0 | 	shl	local06, #9
23ff0     17 31 52 FC | 	wrword	local06, local05
23ff4     FF 2E 06 F6 | 	mov	local05, #255
23ff8     14 2F 82 F1 | 	sub	local05, local02
23ffc     01 2E 66 F0 | 	shl	local05, #1
24000     F2 2E 02 F1 | 	add	local05, objptr
24004     14 31 02 F6 | 	mov	local06, local02
24008     09 30 66 F0 | 	shl	local06, #9
2400c     17 31 52 FC | 	wrword	local06, local05
24010     01 28 06 F1 | 	add	local02, #1
24014     80 28 56 F2 | 	cmps	local02, #128 wc
24018     C0 FF 9F CD |  if_b	jmp	#LR__2729
2401c                 | LR__2730
2401c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
2401c     00 28 06 F6 | 	mov	local02, #0
24020     01 00 00 FF 
24024     00 E4 05 F1 | 	add	objptr, ##512
24028     97 12 48 FB | 	callpa	#(@LR__2732-@LR__2731)>>2,fcache_load_ptr_
2402c                 | LR__2731
2402c     14 2F 02 F6 | 	mov	local05, local02
24030     01 2E 66 F0 | 	shl	local05, #1
24034     F2 2E 02 F1 | 	add	local05, objptr
24038     14 31 02 F6 | 	mov	local06, local02
2403c     0D 30 66 F0 | 	shl	local06, #13
24040     17 31 52 FC | 	wrword	local06, local05
24044     01 28 06 F1 | 	add	local02, #1
24048     08 28 56 F2 | 	cmps	local02, #8 wc
2404c     DC FF 9F CD |  if_b	jmp	#LR__2731
24050                 | LR__2732
24050                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
24050     08 28 06 F6 | 	mov	local02, #8
24054     97 1A 48 FB | 	callpa	#(@LR__2734-@LR__2733)>>2,fcache_load_ptr_
24058                 | LR__2733
24058     14 2F 02 F6 | 	mov	local05, local02
2405c     01 2E 66 F0 | 	shl	local05, #1
24060     F2 2E 02 F1 | 	add	local05, objptr
24064     14 27 02 F6 | 	mov	local01, local02
24068     08 26 86 F1 | 	sub	local01, #8
2406c     0B 26 66 F0 | 	shl	local01, #11
24070     7F 00 00 FF 
24074     00 31 06 F6 | 	mov	local06, ##65280
24078     13 31 82 F1 | 	sub	local06, local01
2407c     17 31 52 FC | 	wrword	local06, local05
24080     01 28 06 F1 | 	add	local02, #1
24084     18 28 16 F2 | 	cmp	local02, #24 wc
24088     CC FF 9F CD |  if_b	jmp	#LR__2733
2408c                 | LR__2734
2408c                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
2408c     18 28 06 F6 | 	mov	local02, #24
24090     97 10 48 FB | 	callpa	#(@LR__2736-@LR__2735)>>2,fcache_load_ptr_
24094                 | LR__2735
24094     14 2F 02 F6 | 	mov	local05, local02
24098     01 2E 66 F0 | 	shl	local05, #1
2409c     F2 2E 02 F1 | 	add	local05, objptr
240a0     40 00 80 FF 
240a4     17 01 58 FC | 	wrword	##32768, local05
240a8     01 28 06 F1 | 	add	local02, #1
240ac     81 28 16 F2 | 	cmp	local02, #129 wc
240b0     E0 FF 9F CD |  if_b	jmp	#LR__2735
240b4                 | LR__2736
240b4                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
240b4     81 28 06 F6 | 	mov	local02, #129
240b8     97 14 48 FB | 	callpa	#(@LR__2738-@LR__2737)>>2,fcache_load_ptr_
240bc                 | LR__2737
240bc     14 2F 02 F6 | 	mov	local05, local02
240c0     01 2E 66 F0 | 	shl	local05, #1
240c4     F2 2E 02 F1 | 	add	local05, objptr
240c8     FF 2A 06 F6 | 	mov	local03, #255
240cc     14 2B 82 F1 | 	sub	local03, local02
240d0     08 2A 66 F0 | 	shl	local03, #8
240d4     17 2B 52 FC | 	wrword	local03, local05
240d8     01 28 06 F1 | 	add	local02, #1
240dc     00 29 16 F2 | 	cmp	local02, #256 wc
240e0     D8 FF 9F CD |  if_b	jmp	#LR__2737
240e4                 | LR__2738
240e4     3F 00 00 FF 
240e8     42 E4 05 F1 | 	add	objptr, ##32322
240ec     F2 00 59 FC | 	wrword	#128, objptr
240f0     52 00 00 FF 
240f4     1A E5 85 F1 | 	sub	objptr, ##42266
240f8                 | ' for i=0 to 7
240f8     00 28 06 F6 | 	mov	local02, #0
240fc     97 9C 48 FB | 	callpa	#(@LR__2740-@LR__2739)>>2,fcache_load_ptr_
24100                 | LR__2739
24100     14 2F 02 F6 | 	mov	local05, local02
24104     03 2E 66 F0 | 	shl	local05, #3
24108     14 2F 82 F1 | 	sub	local05, local02
2410c     02 2E 66 F0 | 	shl	local05, #2
24110     14 00 00 FF 
24114     38 E5 05 F1 | 	add	objptr, ##10552
24118     F2 2E 02 F1 | 	add	local05, objptr
2411c     00 EE A1 FF 
24120     17 01 68 FC | 	wrlong	##1138491392, local05
24124     14 2F 02 F6 | 	mov	local05, local02
24128     03 2E 66 F0 | 	shl	local05, #3
2412c     14 2F 82 F1 | 	sub	local05, local02
24130     02 2E 66 F0 | 	shl	local05, #2
24134     F2 2E 02 F1 | 	add	local05, objptr
24138     04 2E 06 F1 | 	add	local05, #4
2413c     17 29 42 FC | 	wrbyte	local02, local05
24140     14 2F 02 F6 | 	mov	local05, local02
24144     03 2E 66 F0 | 	shl	local05, #3
24148     14 2F 82 F1 | 	sub	local05, local02
2414c     02 2E 66 F0 | 	shl	local05, #2
24150     F2 2E 02 F1 | 	add	local05, objptr
24154     05 2E 06 F1 | 	add	local05, #5
24158     17 29 42 FC | 	wrbyte	local02, local05
2415c     14 2F 02 F6 | 	mov	local05, local02
24160     03 2E 66 F0 | 	shl	local05, #3
24164     14 2F 82 F1 | 	sub	local05, local02
24168     02 2E 66 F0 | 	shl	local05, #2
2416c     F2 2E 02 F1 | 	add	local05, objptr
24170     06 2E 06 F1 | 	add	local05, #6
24174     17 01 58 FC | 	wrword	#0, local05
24178     14 2F 02 F6 | 	mov	local05, local02
2417c     03 2E 66 F0 | 	shl	local05, #3
24180     14 2F 82 F1 | 	sub	local05, local02
24184     02 2E 66 F0 | 	shl	local05, #2
24188     F2 2E 02 F1 | 	add	local05, objptr
2418c     08 2E 06 F1 | 	add	local05, #8
24190     00 C0 9F FF 
24194     17 01 68 FC | 	wrlong	##1065353216, local05
24198     14 2F 02 F6 | 	mov	local05, local02
2419c     03 2E 66 F0 | 	shl	local05, #3
241a0     14 2F 82 F1 | 	sub	local05, local02
241a4     02 2E 66 F0 | 	shl	local05, #2
241a8     F2 2E 02 F1 | 	add	local05, objptr
241ac     0C 2E 06 F1 | 	add	local05, #12
241b0     00 40 A0 FF 
241b4     17 01 68 FC | 	wrlong	##1082130432, local05
241b8     14 2F 02 F6 | 	mov	local05, local02
241bc     03 2E 66 F0 | 	shl	local05, #3
241c0     14 2F 82 F1 | 	sub	local05, local02
241c4     02 2E 66 F0 | 	shl	local05, #2
241c8     F2 2E 02 F1 | 	add	local05, objptr
241cc     10 2E 06 F1 | 	add	local05, #16
241d0     17 01 68 FC | 	wrlong	#0, local05
241d4     14 2F 02 F6 | 	mov	local05, local02
241d8     03 2E 66 F0 | 	shl	local05, #3
241dc     14 2F 82 F1 | 	sub	local05, local02
241e0     02 2E 66 F0 | 	shl	local05, #2
241e4     F2 2E 02 F1 | 	add	local05, objptr
241e8     14 2E 06 F1 | 	add	local05, #20
241ec     17 FF 59 FC | 	wrword	#255, local05
241f0     14 2F 02 F6 | 	mov	local05, local02
241f4     03 2E 66 F0 | 	shl	local05, #3
241f8     14 2F 82 F1 | 	sub	local05, local02
241fc     02 2E 66 F0 | 	shl	local05, #2
24200     F2 2E 02 F1 | 	add	local05, objptr
24204     16 2E 06 F1 | 	add	local05, #22
24208     17 01 58 FC | 	wrword	#0, local05
2420c     14 2F 02 F6 | 	mov	local05, local02
24210     01 2E 66 F0 | 	shl	local05, #1
24214     3D 00 00 FF 
24218     D4 E5 05 F1 | 	add	objptr, ##31700
2421c     F2 2E 02 F1 | 	add	local05, objptr
24220     17 FF 59 FC | 	wrword	#255, local05
24224     01 28 06 F1 | 	add	local02, #1
24228     08 28 56 F2 | 	cmps	local02, #8 wc
2422c     52 00 00 FF 
24230     0C E5 85 F1 | 	sub	objptr, ##42252
24234     C8 FE 9F CD |  if_b	jmp	#LR__2739
24238                 | LR__2740
24238     00 6E 20 FF 
2423c     00 30 06 F6 | 	mov	local06, ##1088159744
24240                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
24240     03 2E 06 F6 | 	mov	local05, #3
24244                 | LR__2741
24244     18 13 02 F6 | 	mov	arg01, local06
24248     CE C3 1F FF 
2424c     7D 14 06 F6 | 	mov	arg02, ##1065852029
24250     38 6D B0 FD | 	call	#__system___float_mul
24254     FD 30 02 F6 | 	mov	local06, result1
24258     FA 2F 6E FB | 	djnz	local05, #LR__2741
2425c     00 28 06 F6 | 	mov	local02, #0
24260                 | LR__2742
24260     14 2D 02 F6 | 	mov	local04, local02
24264     02 2C 66 F0 | 	shl	local04, #2
24268     14 00 00 FF 
2426c     D8 E4 05 F1 | 	add	objptr, ##10456
24270     F2 2C 02 F1 | 	add	local04, objptr
24274     16 31 62 FC | 	wrlong	local06, local04
24278     18 13 02 F6 | 	mov	arg01, local06
2427c     CE C3 1F FF 
24280     7D 14 06 F6 | 	mov	arg02, ##1065852029
24284     14 00 00 FF 
24288     D8 E4 85 F1 | 	sub	objptr, ##10456
2428c     FC 6C B0 FD | 	call	#__system___float_mul
24290     FD 30 02 F6 | 	mov	local06, result1
24294     01 28 06 F1 | 	add	local02, #1
24298     0C 28 56 F2 | 	cmps	local02, #12 wc
2429c     C0 FF 9F CD |  if_b	jmp	#LR__2742
242a0     14 00 00 FF 
242a4     08 E5 05 F1 | 	add	objptr, ##10504
242a8     F2 50 6B FC | 	wrlong	#424, objptr
242ac     04 E4 05 F1 | 	add	objptr, #4
242b0     F2 20 6B FC | 	wrlong	#400, objptr
242b4     04 E4 05 F1 | 	add	objptr, #4
242b8     F2 F2 6A FC | 	wrlong	#377, objptr
242bc     04 E4 05 F1 | 	add	objptr, #4
242c0     F2 C8 6A FC | 	wrlong	#356, objptr
242c4     04 E4 05 F1 | 	add	objptr, #4
242c8     F2 A0 6A FC | 	wrlong	#336, objptr
242cc     04 E4 05 F1 | 	add	objptr, #4
242d0     F2 7A 6A FC | 	wrlong	#317, objptr
242d4     04 E4 05 F1 | 	add	objptr, #4
242d8     F2 58 6A FC | 	wrlong	#300, objptr
242dc     04 E4 05 F1 | 	add	objptr, #4
242e0     F2 36 6A FC | 	wrlong	#283, objptr
242e4     04 E4 05 F1 | 	add	objptr, #4
242e8     F2 16 6A FC | 	wrlong	#267, objptr
242ec     04 E4 05 F1 | 	add	objptr, #4
242f0     F2 F8 69 FC | 	wrlong	#252, objptr
242f4     04 E4 05 F1 | 	add	objptr, #4
242f8     F2 DC 69 FC | 	wrlong	#238, objptr
242fc     04 E4 05 F1 | 	add	objptr, #4
24300     F2 C0 69 FC | 	wrlong	#224, objptr
24304     3D 00 00 FF 
24308     E6 E5 05 F1 | 	add	objptr, ##31718
2430c     F2 00 59 FC | 	wrword	#128, objptr
24310     02 E4 85 F1 | 	sub	objptr, #2
24314     F2 00 59 FC | 	wrword	#128, objptr
24318     52 00 00 FF 
2431c     18 E5 85 F1 | 	sub	objptr, ##42264
24320     A7 F0 03 F6 | 	mov	ptra, fp
24324     B2 00 A0 FD | 	call	#popregs_
24328                 | _init_audio_ret
24328     2D 00 64 FD | 	ret
2432c                 | 
2432c                 | ' 
2432c                 | ' '------------------- Error messages
2432c                 | ' 
2432c                 | ' sub init_error_strings
2432c                 | _init_error_strings
2432c     B6 01 00 FF 
24330     37 01 06 F6 | 	mov	_var01, ##@LR__5925
24334     45 00 00 FF 
24338     9C E4 05 F1 | 	add	objptr, ##35484
2433c     F2 00 62 FC | 	wrlong	_var01, objptr
24340     B6 01 00 FF 
24344     38 01 06 F6 | 	mov	_var01, ##@LR__5926
24348     04 E4 05 F1 | 	add	objptr, #4
2434c     F2 00 62 FC | 	wrlong	_var01, objptr
24350     B6 01 00 FF 
24354     5C 01 06 F6 | 	mov	_var01, ##@LR__5927
24358     04 E4 05 F1 | 	add	objptr, #4
2435c     F2 00 62 FC | 	wrlong	_var01, objptr
24360     B6 01 00 FF 
24364     7C 01 06 F6 | 	mov	_var01, ##@LR__5928
24368     04 E4 05 F1 | 	add	objptr, #4
2436c     F2 00 62 FC | 	wrlong	_var01, objptr
24370     B6 01 00 FF 
24374     95 01 06 F6 | 	mov	_var01, ##@LR__5929
24378     04 E4 05 F1 | 	add	objptr, #4
2437c     F2 00 62 FC | 	wrlong	_var01, objptr
24380     B6 01 00 FF 
24384     B0 01 06 F6 | 	mov	_var01, ##@LR__5930
24388     04 E4 05 F1 | 	add	objptr, #4
2438c     F2 00 62 FC | 	wrlong	_var01, objptr
24390     B6 01 00 FF 
24394     D1 01 06 F6 | 	mov	_var01, ##@LR__5931
24398     04 E4 05 F1 | 	add	objptr, #4
2439c     F2 00 62 FC | 	wrlong	_var01, objptr
243a0     B6 01 00 FF 
243a4     FE 01 06 F6 | 	mov	_var01, ##@LR__5932
243a8     04 E4 05 F1 | 	add	objptr, #4
243ac     F2 00 62 FC | 	wrlong	_var01, objptr
243b0     B7 01 00 FF 
243b4     28 00 06 F6 | 	mov	_var01, ##@LR__5933
243b8     04 E4 05 F1 | 	add	objptr, #4
243bc     F2 00 62 FC | 	wrlong	_var01, objptr
243c0     B7 01 00 FF 
243c4     40 00 06 F6 | 	mov	_var01, ##@LR__5934
243c8     04 E4 05 F1 | 	add	objptr, #4
243cc     F2 00 62 FC | 	wrlong	_var01, objptr
243d0     B7 01 00 FF 
243d4     60 00 06 F6 | 	mov	_var01, ##@LR__5935
243d8     04 E4 05 F1 | 	add	objptr, #4
243dc     F2 00 62 FC | 	wrlong	_var01, objptr
243e0     B7 01 00 FF 
243e4     76 00 06 F6 | 	mov	_var01, ##@LR__5936
243e8     04 E4 05 F1 | 	add	objptr, #4
243ec     F2 00 62 FC | 	wrlong	_var01, objptr
243f0     B7 01 00 FF 
243f4     93 00 06 F6 | 	mov	_var01, ##@LR__5937
243f8     04 E4 05 F1 | 	add	objptr, #4
243fc     F2 00 62 FC | 	wrlong	_var01, objptr
24400     B7 01 00 FF 
24404     B6 00 06 F6 | 	mov	_var01, ##@LR__5938
24408     04 E4 05 F1 | 	add	objptr, #4
2440c     F2 00 62 FC | 	wrlong	_var01, objptr
24410     B7 01 00 FF 
24414     DC 00 06 F6 | 	mov	_var01, ##@LR__5939
24418     04 E4 05 F1 | 	add	objptr, #4
2441c     F2 00 62 FC | 	wrlong	_var01, objptr
24420     B7 01 00 FF 
24424     F7 00 06 F6 | 	mov	_var01, ##@LR__5940
24428     04 E4 05 F1 | 	add	objptr, #4
2442c     F2 00 62 FC | 	wrlong	_var01, objptr
24430     B7 01 00 FF 
24434     07 01 06 F6 | 	mov	_var01, ##@LR__5941
24438     04 E4 05 F1 | 	add	objptr, #4
2443c     F2 00 62 FC | 	wrlong	_var01, objptr
24440     B7 01 00 FF 
24444     16 01 06 F6 | 	mov	_var01, ##@LR__5942
24448     04 E4 05 F1 | 	add	objptr, #4
2444c     F2 00 62 FC | 	wrlong	_var01, objptr
24450     B7 01 00 FF 
24454     30 01 06 F6 | 	mov	_var01, ##@LR__5943
24458     04 E4 05 F1 | 	add	objptr, #4
2445c     F2 00 62 FC | 	wrlong	_var01, objptr
24460     B7 01 00 FF 
24464     41 01 06 F6 | 	mov	_var01, ##@LR__5944
24468     04 E4 05 F1 | 	add	objptr, #4
2446c     F2 00 62 FC | 	wrlong	_var01, objptr
24470     B7 01 00 FF 
24474     58 01 06 F6 | 	mov	_var01, ##@LR__5945
24478     04 E4 05 F1 | 	add	objptr, #4
2447c     F2 00 62 FC | 	wrlong	_var01, objptr
24480     B7 01 00 FF 
24484     6B 01 06 F6 | 	mov	_var01, ##@LR__5946
24488     04 E4 05 F1 | 	add	objptr, #4
2448c     F2 00 62 FC | 	wrlong	_var01, objptr
24490     B7 01 00 FF 
24494     7A 01 06 F6 | 	mov	_var01, ##@LR__5947
24498     04 E4 05 F1 | 	add	objptr, #4
2449c     F2 00 62 FC | 	wrlong	_var01, objptr
244a0     B7 01 00 FF 
244a4     96 01 06 F6 | 	mov	_var01, ##@LR__5948
244a8     04 E4 05 F1 | 	add	objptr, #4
244ac     F2 00 62 FC | 	wrlong	_var01, objptr
244b0     B7 01 00 FF 
244b4     A6 01 06 F6 | 	mov	_var01, ##@LR__5949
244b8     04 E4 05 F1 | 	add	objptr, #4
244bc     F2 00 62 FC | 	wrlong	_var01, objptr
244c0     B7 01 00 FF 
244c4     B6 01 06 F6 | 	mov	_var01, ##@LR__5950
244c8     04 E4 05 F1 | 	add	objptr, #4
244cc     F2 00 62 FC | 	wrlong	_var01, objptr
244d0     B7 01 00 FF 
244d4     E9 01 06 F6 | 	mov	_var01, ##@LR__5951
244d8     04 E4 05 F1 | 	add	objptr, #4
244dc     F2 00 62 FC | 	wrlong	_var01, objptr
244e0     B8 01 00 FF 
244e4     04 00 06 F6 | 	mov	_var01, ##@LR__5952
244e8     04 E4 05 F1 | 	add	objptr, #4
244ec     F2 00 62 FC | 	wrlong	_var01, objptr
244f0     B8 01 00 FF 
244f4     19 00 06 F6 | 	mov	_var01, ##@LR__5953
244f8     04 E4 05 F1 | 	add	objptr, #4
244fc     F2 00 62 FC | 	wrlong	_var01, objptr
24500     B8 01 00 FF 
24504     25 00 06 F6 | 	mov	_var01, ##@LR__5954
24508     04 E4 05 F1 | 	add	objptr, #4
2450c     F2 00 62 FC | 	wrlong	_var01, objptr
24510     B8 01 00 FF 
24514     36 00 06 F6 | 	mov	_var01, ##@LR__5955
24518     04 E4 05 F1 | 	add	objptr, #4
2451c     F2 00 62 FC | 	wrlong	_var01, objptr
24520     B8 01 00 FF 
24524     46 00 06 F6 | 	mov	_var01, ##@LR__5956
24528     04 E4 05 F1 | 	add	objptr, #4
2452c     F2 00 62 FC | 	wrlong	_var01, objptr
24530     B8 01 00 FF 
24534     61 00 06 F6 | 	mov	_var01, ##@LR__5957
24538     04 E4 05 F1 | 	add	objptr, #4
2453c     F2 00 62 FC | 	wrlong	_var01, objptr
24540     B8 01 00 FF 
24544     71 00 06 F6 | 	mov	_var01, ##@LR__5958
24548     04 E4 05 F1 | 	add	objptr, #4
2454c     F2 00 62 FC | 	wrlong	_var01, objptr
24550     B8 01 00 FF 
24554     7F 00 06 F6 | 	mov	_var01, ##@LR__5959
24558     04 E4 05 F1 | 	add	objptr, #4
2455c     F2 00 62 FC | 	wrlong	_var01, objptr
24560     B8 01 00 FF 
24564     99 00 06 F6 | 	mov	_var01, ##@LR__5960
24568     04 E4 05 F1 | 	add	objptr, #4
2456c     F2 00 62 FC | 	wrlong	_var01, objptr
24570     B8 01 00 FF 
24574     CC 00 06 F6 | 	mov	_var01, ##@LR__5961
24578     04 E4 05 F1 | 	add	objptr, #4
2457c     F2 00 62 FC | 	wrlong	_var01, objptr
24580     B8 01 00 FF 
24584     E4 00 06 F6 | 	mov	_var01, ##@LR__5962
24588     04 E4 05 F1 | 	add	objptr, #4
2458c     F2 00 62 FC | 	wrlong	_var01, objptr
24590     B8 01 00 FF 
24594     FF 00 06 F6 | 	mov	_var01, ##@LR__5963
24598     04 E4 05 F1 | 	add	objptr, #4
2459c     F2 00 62 FC | 	wrlong	_var01, objptr
245a0     B8 01 00 FF 
245a4     1C 01 06 F6 | 	mov	_var01, ##@LR__5964
245a8     04 E4 05 F1 | 	add	objptr, #4
245ac     F2 00 62 FC | 	wrlong	_var01, objptr
245b0     B8 01 00 FF 
245b4     35 01 06 F6 | 	mov	_var01, ##@LR__5965
245b8     04 E4 05 F1 | 	add	objptr, #4
245bc     F2 00 62 FC | 	wrlong	_var01, objptr
245c0     B8 01 00 FF 
245c4     54 01 06 F6 | 	mov	_var01, ##@LR__5966
245c8     04 E4 05 F1 | 	add	objptr, #4
245cc     F2 00 62 FC | 	wrlong	_var01, objptr
245d0     B8 01 00 FF 
245d4     62 01 06 F6 | 	mov	_var01, ##@LR__5967
245d8     04 E4 05 F1 | 	add	objptr, #4
245dc     F2 00 62 FC | 	wrlong	_var01, objptr
245e0     B8 01 00 FF 
245e4     8F 01 06 F6 | 	mov	_var01, ##@LR__5968
245e8     04 E4 05 F1 | 	add	objptr, #4
245ec     F2 00 62 FC | 	wrlong	_var01, objptr
245f0     B8 01 00 FF 
245f4     9C 01 06 F6 | 	mov	_var01, ##@LR__5969
245f8     04 E4 05 F1 | 	add	objptr, #4
245fc     F2 00 62 FC | 	wrlong	_var01, objptr
24600     B8 01 00 FF 
24604     B0 01 06 F6 | 	mov	_var01, ##@LR__5970
24608     04 E4 05 F1 | 	add	objptr, #4
2460c     F2 00 62 FC | 	wrlong	_var01, objptr
24610     B8 01 00 FF 
24614     D4 01 06 F6 | 	mov	_var01, ##@LR__5971
24618     04 E4 05 F1 | 	add	objptr, #4
2461c     F2 00 62 FC | 	wrlong	_var01, objptr
24620     B8 01 00 FF 
24624     EB 01 06 F6 | 	mov	_var01, ##@LR__5972
24628     04 E4 05 F1 | 	add	objptr, #4
2462c     F2 00 62 FC | 	wrlong	_var01, objptr
24630     B8 01 00 FF 
24634     FE 01 06 F6 | 	mov	_var01, ##@LR__5973
24638     04 E4 05 F1 | 	add	objptr, #4
2463c     F2 00 62 FC | 	wrlong	_var01, objptr
24640     B9 01 00 FF 
24644     15 00 06 F6 | 	mov	_var01, ##@LR__5974
24648     04 E4 05 F1 | 	add	objptr, #4
2464c     F2 00 62 FC | 	wrlong	_var01, objptr
24650     B9 01 00 FF 
24654     2E 00 06 F6 | 	mov	_var01, ##@LR__5975
24658     04 E4 05 F1 | 	add	objptr, #4
2465c     F2 00 62 FC | 	wrlong	_var01, objptr
24660     B9 01 00 FF 
24664     50 00 06 F6 | 	mov	_var01, ##@LR__5976
24668     04 E4 05 F1 | 	add	objptr, #4
2466c     F2 00 62 FC | 	wrlong	_var01, objptr
24670     B9 01 00 FF 
24674     63 00 06 F6 | 	mov	_var01, ##@LR__5977
24678     04 E4 05 F1 | 	add	objptr, #4
2467c     F2 00 62 FC | 	wrlong	_var01, objptr
24680     B9 01 00 FF 
24684     73 00 06 F6 | 	mov	_var01, ##@LR__5978
24688     04 E4 05 F1 | 	add	objptr, #4
2468c     F2 00 62 FC | 	wrlong	_var01, objptr
24690     B9 01 00 FF 
24694     8B 00 06 F6 | 	mov	_var01, ##@LR__5979
24698     04 E4 05 F1 | 	add	objptr, #4
2469c     F2 00 62 FC | 	wrlong	_var01, objptr
246a0     B9 01 00 FF 
246a4     A2 00 06 F6 | 	mov	_var01, ##@LR__5980
246a8     04 E4 05 F1 | 	add	objptr, #4
246ac     F2 00 62 FC | 	wrlong	_var01, objptr
246b0     45 00 00 FF 
246b4     78 E5 85 F1 | 	sub	objptr, ##35704
246b8                 | _init_error_strings_ret
246b8     2D 00 64 FD | 	ret
246bc                 | 
246bc                 | '         
246bc                 | ' sub printerror(err as integer, linenum=0 as integer)
246bc                 | _printerror
246bc     02 4A 05 F6 | 	mov	COUNT_, #2
246c0     A8 00 A0 FD | 	call	#pushregs_
246c4     09 27 02 F6 | 	mov	local01, arg01
246c8     0A 29 02 F6 | 	mov	local02, arg02
246cc     B9 01 00 FF 
246d0     AF 12 06 F6 | 	mov	arg01, ##@LR__5981
246d4     9C 21 B0 FD | 	call	#_hg010b_spin2_write
246d8     13 13 02 F6 | 	mov	arg01, local01
246dc     D8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
246e0     FD 12 02 F6 | 	mov	arg01, result1
246e4     8C 21 B0 FD | 	call	#_hg010b_spin2_write
246e8     B9 01 00 FF 
246ec     B6 12 06 F6 | 	mov	arg01, ##@LR__5982
246f0     80 21 B0 FD | 	call	#_hg010b_spin2_write
246f4     02 26 66 F0 | 	shl	local01, #2
246f8     45 00 00 FF 
246fc     9C E4 05 F1 | 	add	objptr, ##35484
24700     F2 26 02 F1 | 	add	local01, objptr
24704     13 13 02 FB | 	rdlong	arg01, local01
24708     45 00 00 FF 
2470c     9C E4 85 F1 | 	sub	objptr, ##35484
24710     60 21 B0 FD | 	call	#_hg010b_spin2_write
24714                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
24714                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
24714     01 28 56 F2 | 	cmps	local02, #1 wc
24718     24 00 90 CD |  if_b	jmp	#LR__2750
2471c     B9 01 00 FF 
24720     BA 12 06 F6 | 	mov	arg01, ##@LR__5983
24724     4C 21 B0 FD | 	call	#_hg010b_spin2_write
24728     14 13 02 F6 | 	mov	arg01, local02
2472c     88 26 B0 FD | 	call	#_hg010b_spin2_inttostr
24730     FD 12 02 F6 | 	mov	arg01, result1
24734                 | ' 
24734                 | ' write(text)
24734     3C 21 B0 FD | 	call	#_hg010b_spin2_write
24738                 | ' crlf
24738     D8 25 B0 FD | 	call	#_hg010b_spin2_crlf
2473c     10 00 90 FD | 	jmp	#LR__2751
24740                 | LR__2750
24740     B9 01 00 FF 
24744     C4 12 06 F6 | 	mov	arg01, ##@LR__5984
24748                 | ' 
24748                 | ' write(text)
24748     28 21 B0 FD | 	call	#_hg010b_spin2_write
2474c                 | ' crlf
2474c     C4 25 B0 FD | 	call	#_hg010b_spin2_crlf
24750                 | LR__2751
24750     A7 F0 03 F6 | 	mov	ptra, fp
24754     B2 00 A0 FD | 	call	#popregs_
24758                 | _printerror_ret
24758     2D 00 64 FD | 	ret
2475c                 | 
2475c                 | ' 
2475c                 | ' '' ------------------------------- Hardware start/stop/initialization 
2475c                 | ' 
2475c                 | ' sub startpsram
2475c                 | _startpsram
2475c     00 12 06 F6 | 	mov	arg01, #0
24760     0A 14 C6 F9 | 	decod	arg02, #10
24764     0B 16 06 F6 | 	mov	arg03, #11
24768     07 18 06 F6 | 	mov	arg04, #7
2476c     0B 00 00 FF 
24770     CC E4 05 F1 | 	add	objptr, ##5836
24774     C8 2A B0 FD | 	call	#_psram_spin2_startx
24778     2B 00 00 FF 
2477c     5C E5 05 F1 | 	add	objptr, ##22364
24780     F2 FA 61 FC | 	wrlong	result1, objptr
24784                 | '     return $7FF00 + cog*12
24784     0C E4 05 F1 | 	add	objptr, #12
24788     FF 03 80 FF 
2478c     F2 00 6A FC | 	wrlong	##524032, objptr
24790     37 00 00 FF 
24794     34 E4 85 F1 | 	sub	objptr, ##28212
24798                 | _startpsram_ret
24798     2D 00 64 FD | 	ret
2479c                 | 
2479c                 | ' 
2479c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
2479c                 | _startvideo
2479c     01 4A 05 F6 | 	mov	COUNT_, #1
247a0     A8 00 A0 FD | 	call	#pushregs_
247a4     37 00 00 FF 
247a8     34 E4 05 F1 | 	add	objptr, ##28212
247ac     F2 18 02 FB | 	rdlong	arg04, objptr
247b0     37 00 00 FF 
247b4     34 E4 85 F1 | 	sub	objptr, ##28212
247b8     0A 13 02 F6 | 	mov	arg01, arg02
247bc     0C 15 02 F6 | 	mov	arg02, arg04
247c0     20 08 B0 FD | 	call	#_hg010b_spin2_start
247c4     37 00 00 FF 
247c8     20 E4 05 F1 | 	add	objptr, ##28192
247cc     F2 FA 61 FC | 	wrlong	result1, objptr
247d0                 | ' 
247d0                 | ' videocog=v.start(pin,mbox)
247d0                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
247d0     00 26 06 F6 | 	mov	local01, #0
247d4     2B 00 00 FF 
247d8     54 E5 85 F1 | 	sub	objptr, ##22356
247dc                 | LR__2760
247dc     13 13 02 F6 | 	mov	arg01, local01
247e0     00 28 00 FF 
247e4     00 14 06 F6 | 	mov	arg02, ##5242880
247e8     AC 2E B0 FD | 	call	#_psram_spin2_setQos
247ec     01 26 06 F1 | 	add	local01, #1
247f0     08 26 56 F2 | 	cmps	local01, #8 wc
247f4     E4 FF 9F CD |  if_b	jmp	#LR__2760
247f8     2B 00 00 FF 
247fc     54 E5 05 F1 | 	add	objptr, ##22356
24800     F2 12 02 FB | 	rdlong	arg01, objptr
24804     7A 00 02 FF 
24808     00 14 06 F6 | 	mov	arg02, ##67171328
2480c     2B 00 00 FF 
24810     54 E5 85 F1 | 	sub	objptr, ##22356
24814     80 2E B0 FD | 	call	#_psram_spin2_setQos
24818     0B 00 00 FF 
2481c     CC E4 85 F1 | 	sub	objptr, ##5836
24820                 | ' psram.setQoS(videocog, $0400f400) 
24820                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
24820     F2 14 02 F6 | 	mov	arg02, objptr
24824     00 50 05 FF 
24828     00 14 46 F5 | 	or	arg02, ##178257920
2482c     00 16 06 F6 | 	mov	arg03, #0
24830     00 18 06 F6 | 	mov	arg04, #0
24834     00 12 06 F6 | 	mov	arg01, #0
24838     7C 43 B0 FD | 	call	#__system___basic_open
2483c                 | ' return videocog
2483c     37 00 00 FF 
24840     20 E4 05 F1 | 	add	objptr, ##28192
24844     F2 FA 01 FB | 	rdlong	result1, objptr
24848     37 00 00 FF 
2484c     20 E4 85 F1 | 	sub	objptr, ##28192
24850     A7 F0 03 F6 | 	mov	ptra, fp
24854     B2 00 A0 FD | 	call	#popregs_
24858                 | _startvideo_ret
24858     2D 00 64 FD | 	ret
2485c                 | 
2485c                 | ' 
2485c                 | ' 
2485c                 | ' 
2485c                 | ' '' ------------------------------- Convenient psram peek/poke
2485c                 | ' 
2485c                 | ' sub pslpoke(addr as ulong,value as ulong)
2485c                 | _pslpoke
2485c     00 4A 05 F6 | 	mov	COUNT_, #0
24860     A8 00 A0 FD | 	call	#pushregs_
24864     08 F0 07 F1 | 	add	ptra, #8
24868     A7 12 62 FC | 	wrlong	arg01, fp
2486c     04 4E 05 F1 | 	add	fp, #4
24870     A7 14 62 FC | 	wrlong	arg02, fp
24874     A7 12 02 F6 | 	mov	arg01, fp
24878     04 4E 85 F1 | 	sub	fp, #4
2487c     A7 14 02 FB | 	rdlong	arg02, fp
24880     04 16 06 F6 | 	mov	arg03, #4
24884     0B 00 00 FF 
24888     CC E4 05 F1 | 	add	objptr, ##5836
2488c     78 2C B0 FD | 	call	#_psram_spin2_write
24890     0B 00 00 FF 
24894     CC E4 85 F1 | 	sub	objptr, ##5836
24898     A7 F0 03 F6 | 	mov	ptra, fp
2489c     B2 00 A0 FD | 	call	#popregs_
248a0                 | _pslpoke_ret
248a0     2D 00 64 FD | 	ret
248a4                 | 
248a4                 | ' 
248a4                 | ' sub psdpoke(addr as ulong,value as ulong)
248a4                 | _psdpoke
248a4     00 4A 05 F6 | 	mov	COUNT_, #0
248a8     A8 00 A0 FD | 	call	#pushregs_
248ac     08 F0 07 F1 | 	add	ptra, #8
248b0     A7 12 62 FC | 	wrlong	arg01, fp
248b4     04 4E 05 F1 | 	add	fp, #4
248b8     A7 14 62 FC | 	wrlong	arg02, fp
248bc     A7 12 02 F6 | 	mov	arg01, fp
248c0     04 4E 85 F1 | 	sub	fp, #4
248c4     A7 14 02 FB | 	rdlong	arg02, fp
248c8     02 16 06 F6 | 	mov	arg03, #2
248cc     0B 00 00 FF 
248d0     CC E4 05 F1 | 	add	objptr, ##5836
248d4     30 2C B0 FD | 	call	#_psram_spin2_write
248d8     0B 00 00 FF 
248dc     CC E4 85 F1 | 	sub	objptr, ##5836
248e0     A7 F0 03 F6 | 	mov	ptra, fp
248e4     B2 00 A0 FD | 	call	#popregs_
248e8                 | _psdpoke_ret
248e8     2D 00 64 FD | 	ret
248ec                 | 
248ec                 | ' 
248ec                 | ' sub pspoke(addr as ulong,value as ulong)
248ec                 | _pspoke
248ec     00 4A 05 F6 | 	mov	COUNT_, #0
248f0     A8 00 A0 FD | 	call	#pushregs_
248f4     08 F0 07 F1 | 	add	ptra, #8
248f8     A7 12 62 FC | 	wrlong	arg01, fp
248fc     04 4E 05 F1 | 	add	fp, #4
24900     A7 14 62 FC | 	wrlong	arg02, fp
24904     A7 12 02 F6 | 	mov	arg01, fp
24908     04 4E 85 F1 | 	sub	fp, #4
2490c     A7 14 02 FB | 	rdlong	arg02, fp
24910     01 16 06 F6 | 	mov	arg03, #1
24914     0B 00 00 FF 
24918     CC E4 05 F1 | 	add	objptr, ##5836
2491c     E8 2B B0 FD | 	call	#_psram_spin2_write
24920     0B 00 00 FF 
24924     CC E4 85 F1 | 	sub	objptr, ##5836
24928     A7 F0 03 F6 | 	mov	ptra, fp
2492c     B2 00 A0 FD | 	call	#popregs_
24930                 | _pspoke_ret
24930     2D 00 64 FD | 	ret
24934                 | 
24934                 | ' 
24934                 | ' function pspeek(adr as ulong) as ubyte
24934                 | _pspeek
24934     00 4A 05 F6 | 	mov	COUNT_, #0
24938     A8 00 A0 FD | 	call	#pushregs_
2493c     0C F0 07 F1 | 	add	ptra, #12
24940     04 4E 05 F1 | 	add	fp, #4
24944     A7 12 62 FC | 	wrlong	arg01, fp
24948     04 4E 05 F1 | 	add	fp, #4
2494c     A7 12 02 F6 | 	mov	arg01, fp
24950     04 4E 85 F1 | 	sub	fp, #4
24954     A7 14 02 FB | 	rdlong	arg02, fp
24958     04 4E 85 F1 | 	sub	fp, #4
2495c     01 16 06 F6 | 	mov	arg03, #1
24960     0B 00 00 FF 
24964     CC E4 05 F1 | 	add	objptr, ##5836
24968     00 2B B0 FD | 	call	#_psram_spin2_read1
2496c     0B 00 00 FF 
24970     CC E4 85 F1 | 	sub	objptr, ##5836
24974                 | ' psram.read1(varptr(res),adr,1)
24974                 | ' return res
24974     08 4E 05 F1 | 	add	fp, #8
24978     A7 FA C1 FA | 	rdbyte	result1, fp
2497c     08 4E 85 F1 | 	sub	fp, #8
24980     A7 F0 03 F6 | 	mov	ptra, fp
24984     B2 00 A0 FD | 	call	#popregs_
24988                 | _pspeek_ret
24988     2D 00 64 FD | 	ret
2498c                 | 
2498c                 | ' 
2498c                 | ' function pslpeek(adr as ulong) as ulong
2498c                 | _pslpeek
2498c     00 4A 05 F6 | 	mov	COUNT_, #0
24990     A8 00 A0 FD | 	call	#pushregs_
24994     0C F0 07 F1 | 	add	ptra, #12
24998     04 4E 05 F1 | 	add	fp, #4
2499c     A7 12 62 FC | 	wrlong	arg01, fp
249a0     04 4E 05 F1 | 	add	fp, #4
249a4     A7 12 02 F6 | 	mov	arg01, fp
249a8     04 4E 85 F1 | 	sub	fp, #4
249ac     A7 14 02 FB | 	rdlong	arg02, fp
249b0     04 4E 85 F1 | 	sub	fp, #4
249b4     04 16 06 F6 | 	mov	arg03, #4
249b8     0B 00 00 FF 
249bc     CC E4 05 F1 | 	add	objptr, ##5836
249c0     A8 2A B0 FD | 	call	#_psram_spin2_read1
249c4     0B 00 00 FF 
249c8     CC E4 85 F1 | 	sub	objptr, ##5836
249cc                 | ' psram.read1(varptr(res),adr,4)
249cc                 | ' return res
249cc     08 4E 05 F1 | 	add	fp, #8
249d0     A7 FA 01 FB | 	rdlong	result1, fp
249d4     08 4E 85 F1 | 	sub	fp, #8
249d8     A7 F0 03 F6 | 	mov	ptra, fp
249dc     B2 00 A0 FD | 	call	#popregs_
249e0                 | _pslpeek_ret
249e0     2D 00 64 FD | 	ret
249e4                 | 
249e4                 | ' 
249e4                 | ' function psdpeek(adr as ulong) as ulong
249e4                 | _psdpeek
249e4     00 4A 05 F6 | 	mov	COUNT_, #0
249e8     A8 00 A0 FD | 	call	#pushregs_
249ec     0C F0 07 F1 | 	add	ptra, #12
249f0     04 4E 05 F1 | 	add	fp, #4
249f4     A7 12 62 FC | 	wrlong	arg01, fp
249f8     04 4E 05 F1 | 	add	fp, #4
249fc     A7 12 02 F6 | 	mov	arg01, fp
24a00     04 4E 85 F1 | 	sub	fp, #4
24a04     A7 14 02 FB | 	rdlong	arg02, fp
24a08     04 4E 85 F1 | 	sub	fp, #4
24a0c     02 16 06 F6 | 	mov	arg03, #2
24a10     0B 00 00 FF 
24a14     CC E4 05 F1 | 	add	objptr, ##5836
24a18     50 2A B0 FD | 	call	#_psram_spin2_read1
24a1c     0B 00 00 FF 
24a20     CC E4 85 F1 | 	sub	objptr, ##5836
24a24                 | ' psram.read1(varptr(res),adr,2)
24a24                 | ' return res
24a24     08 4E 05 F1 | 	add	fp, #8
24a28     A7 FA E1 FA | 	rdword	result1, fp
24a2c     08 4E 85 F1 | 	sub	fp, #8
24a30     A7 F0 03 F6 | 	mov	ptra, fp
24a34     B2 00 A0 FD | 	call	#popregs_
24a38                 | _psdpeek_ret
24a38     2D 00 64 FD | 	ret
24a3c                 | 
24a3c                 | ' 
24a3c                 | ' '' ------------------------------- USB keyboard scan to char translator
24a3c                 | ' 
24a3c                 | ' function scantochar(key)
24a3c                 | _scantochar
24a3c                 | ' 
24a3c                 | ' select case (key shr 8) and 255
24a3c     09 01 02 F6 | 	mov	_var01, arg01
24a40     08 00 C6 F0 | 	sar	_var01, #8
24a44     FF 00 0E F5 | 	and	_var01, #255 wz
24a48     24 00 90 AD |  if_e	jmp	#LR__2770
24a4c     02 00 0E F2 | 	cmp	_var01, #2 wz
24a50     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
24a54     30 00 90 AD |  if_e	jmp	#LR__2771
24a58     40 00 0E F2 | 	cmp	_var01, #64 wz
24a5c     44 00 90 AD |  if_e	jmp	#LR__2772
24a60     42 00 0E F2 | 	cmp	_var01, #66 wz
24a64     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
24a68     70 00 90 5D |  if_ne	jmp	#LR__2774
24a6c     50 00 90 FD | 	jmp	#LR__2773
24a70                 | LR__2770
24a70     09 FB 01 F6 | 	mov	result1, arg01
24a74     7F FA 05 F5 | 	and	result1, #127
24a78     02 FA 65 F0 | 	shl	result1, #2
24a7c     F5 FA 01 F1 | 	add	result1, ptr__dat__
24a80     FD FA C1 FA | 	rdbyte	result1, result1
24a84     54 00 90 FD | 	jmp	#_scantochar_ret
24a88                 | LR__2771
24a88     09 FB 01 F6 | 	mov	result1, arg01
24a8c     7F FA 05 F5 | 	and	result1, #127
24a90     02 FA 65 F0 | 	shl	result1, #2
24a94     01 FA 05 F1 | 	add	result1, #1
24a98     F5 FA 01 F1 | 	add	result1, ptr__dat__
24a9c     FD FA C1 FA | 	rdbyte	result1, result1
24aa0     38 00 90 FD | 	jmp	#_scantochar_ret
24aa4                 | LR__2772
24aa4     09 FB 01 F6 | 	mov	result1, arg01
24aa8     7F FA 05 F5 | 	and	result1, #127
24aac     02 FA 65 F0 | 	shl	result1, #2
24ab0     02 FA 05 F1 | 	add	result1, #2
24ab4     F5 FA 01 F1 | 	add	result1, ptr__dat__
24ab8     FD FA C1 FA | 	rdbyte	result1, result1
24abc     1C 00 90 FD | 	jmp	#_scantochar_ret
24ac0                 | LR__2773
24ac0     09 FB 01 F6 | 	mov	result1, arg01
24ac4     7F FA 05 F5 | 	and	result1, #127
24ac8     02 FA 65 F0 | 	shl	result1, #2
24acc     03 FA 05 F1 | 	add	result1, #3
24ad0     F5 FA 01 F1 | 	add	result1, ptr__dat__
24ad4     FD FA C1 FA | 	rdbyte	result1, result1
24ad8     00 00 90 FD | 	jmp	#_scantochar_ret
24adc                 | LR__2774
24adc                 | _scantochar_ret
24adc     2D 00 64 FD | 	ret
24ae0                 | 
24ae0                 | _program
24ae0     01 4A 05 F6 | 	mov	COUNT_, #1
24ae4     A8 00 A0 FD | 	call	#pushregs_
24ae8     70 FC BF FD | 	call	#_startpsram
24aec     37 00 00 FF 
24af0     34 E4 05 F1 | 	add	objptr, ##28212
24af4     F2 12 02 FB | 	rdlong	arg01, objptr
24af8     00 14 06 F6 | 	mov	arg02, #0
24afc     F0 03 00 FF 
24b00     00 16 06 F6 | 	mov	arg03, ##516096
24b04     2B 00 00 FF 
24b08     68 E5 85 F1 | 	sub	objptr, ##22376
24b0c     2C 2F B0 FD | 	call	#_audio096_spin2_start
24b10     FE 16 02 F6 | 	mov	arg03, result2
24b14     2B 00 00 FF 
24b18     50 E5 05 F1 | 	add	objptr, ##22352
24b1c     F2 FA 61 FC | 	wrlong	result1, objptr
24b20     14 E4 05 F1 | 	add	objptr, #20
24b24     F2 16 62 FC | 	wrlong	arg03, objptr
24b28     37 00 00 FF 
24b2c     30 E4 85 F1 | 	sub	objptr, ##28208
24b30     32 12 06 F6 | 	mov	arg01, #50
24b34     CC 38 B0 FD | 	call	#__system___waitms
24b38     37 00 00 FF 
24b3c     30 E4 05 F1 | 	add	objptr, ##28208
24b40     F2 12 02 FB | 	rdlong	arg01, objptr
24b44     37 00 00 FF 
24b48     30 E4 85 F1 | 	sub	objptr, ##28208
24b4c     14 12 06 F1 | 	add	arg01, #20
24b50     20 00 80 FF 
24b54     09 01 58 FC | 	wrword	##16384, arg01
24b58     44 2C B0 FD | 	call	#_usbnew_spin2_start
24b5c     37 00 00 FF 
24b60     24 E4 05 F1 | 	add	objptr, ##28196
24b64     F2 FA 61 FC | 	wrlong	result1, objptr
24b68     37 00 00 FF 
24b6c     24 E4 85 F1 | 	sub	objptr, ##28196
24b70     40 12 06 F6 | 	mov	arg01, #64
24b74     00 14 06 F6 | 	mov	arg02, #0
24b78     00 16 06 F6 | 	mov	arg03, #0
24b7c     1C FC BF FD | 	call	#_startvideo
24b80                 | '   mouse_limits[0] := xlim
24b80     0F 00 00 FF 
24b84     C8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
24b88     01 00 80 FF 
24b8c     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
24b90                 | '   mouse_limits[1] := ylim
24b90     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
24b94     01 00 80 FF 
24b98     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
24b9c     11 E5 05 F1 | 	add	objptr, #273
24ba0     F2 12 02 F6 | 	mov	arg01, objptr
24ba4     11 E5 85 F1 | 	sub	objptr, #273
24ba8     C4 12 06 F1 | 	add	arg01, #196
24bac                 | '   mouse_outptr := ptr
24bac     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
24bb0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
24bb4     0F 00 00 FF 
24bb8     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
24bbc     16 00 00 FF 
24bc0     CA EA 05 F1 | 	add	ptr__dat__, ##11466
24bc4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
24bc8     16 00 00 FF 
24bcc     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
24bd0     10 12 06 F6 | 	mov	arg01, #16
24bd4     B8 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
24bd8     10 12 06 F6 | 	mov	arg01, #16
24bdc     20 14 06 F6 | 	mov	arg02, #32
24be0     20 16 06 F6 | 	mov	arg03, #32
24be4     38 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
24be8     09 12 C6 F9 | 	decod	arg01, #9
24bec     2C 15 06 F6 | 	mov	arg02, #300
24bf0     04 2D B0 FD | 	call	#_usbnew_spin2_mouse_move
24bf4     F2 16 02 F6 | 	mov	arg03, objptr
24bf8     50 00 00 FF 
24bfc     64 E5 05 F1 | 	add	objptr, ##41316
24c00     F2 14 02 F6 | 	mov	arg02, objptr
24c04     0A 17 62 FC | 	wrlong	arg03, arg02
24c08     04 14 06 F1 | 	add	arg02, #4
24c0c     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
24c10     EF 14 02 F6 | 	mov	arg02, entryptr__
24c14     1E FA 05 F6 | 	mov	result1, #30
24c18     28 E4 61 FD | 	setq	objptr
24c1c     0A FB F1 FC | 	coginit	result1, arg02 wc
24c20     01 FA 65 C6 |  if_b	neg	result1, #1
24c24     04 E4 85 F1 | 	sub	objptr, #4
24c28     F2 FA 61 FC | 	wrlong	result1, objptr
24c2c     01 00 00 FF 
24c30     8C E5 05 F1 | 	add	objptr, ##908
24c34     F2 00 68 FC | 	wrlong	#0, objptr
24c38     1B 00 00 FF 
24c3c     98 E4 85 F1 | 	sub	objptr, ##13976
24c40     F2 04 68 FC | 	wrlong	#2, objptr
24c44     04 E4 05 F1 | 	add	objptr, #4
24c48     F2 26 69 FC | 	wrlong	#147, objptr
24c4c     04 E4 05 F1 | 	add	objptr, #4
24c50     F2 34 69 FC | 	wrlong	#154, objptr
24c54     04 E4 05 F1 | 	add	objptr, #4
24c58     F2 08 68 FC | 	wrlong	#4, objptr
24c5c     04 E4 85 F1 | 	sub	objptr, #4
24c60     F2 16 02 FB | 	rdlong	arg03, objptr
24c64     14 E4 85 F1 | 	sub	objptr, #20
24c68     F2 16 62 FC | 	wrlong	arg03, objptr
24c6c     04 E4 05 F1 | 	add	objptr, #4
24c70     F2 00 68 FC | 	wrlong	#0, objptr
24c74     04 E4 05 F1 | 	add	objptr, #4
24c78     F2 00 68 FC | 	wrlong	#0, objptr
24c7c     19 00 00 FF 
24c80     0C E5 05 F1 | 	add	objptr, ##13068
24c84     F2 02 68 FC | 	wrlong	#1, objptr
24c88     01 00 00 FF 
24c8c     98 E5 05 F1 | 	add	objptr, ##920
24c90     F2 00 68 FC | 	wrlong	#0, objptr
24c94     01 00 00 FF 
24c98     00 EA 05 F1 | 	add	ptr__dat__, ##512
24c9c     08 E4 05 F1 | 	add	objptr, #8
24ca0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
24ca4     04 E4 85 F1 | 	sub	objptr, #4
24ca8     03 00 80 FF 
24cac     F2 3C 69 FC | 	wrlong	##1694, objptr
24cb0     0D 00 00 FF 
24cb4     74 E4 85 F1 | 	sub	objptr, ##6772
24cb8     F2 18 68 FC | 	wrlong	#12, objptr
24cbc     45 00 00 FF 
24cc0     84 E4 85 F1 | 	sub	objptr, ##35460
24cc4     01 00 00 FF 
24cc8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
24ccc     48 D7 BF FD | 	call	#_init_commands
24cd0     58 F6 BF FD | 	call	#_init_error_strings
24cd4     A0 ED BF FD | 	call	#_init_audio
24cd8     70 1C BF FD | 	call	#_do_new
24cdc     37 00 00 FF 
24ce0     5C E4 05 F1 | 	add	objptr, ##28252
24ce4     F2 12 02 FB | 	rdlong	arg01, objptr
24ce8     04 E4 85 F1 | 	sub	objptr, #4
24cec     F2 14 02 FB | 	rdlong	arg02, objptr
24cf0     37 00 00 FF 
24cf4     58 E4 85 F1 | 	sub	objptr, ##28248
24cf8     B8 17 B0 FD | 	call	#_hg010b_spin2_cls
24cfc     37 00 00 FF 
24d00     60 E4 05 F1 | 	add	objptr, ##28256
24d04     F2 12 02 FB | 	rdlong	arg01, objptr
24d08     37 00 00 FF 
24d0c     60 E4 85 F1 | 	sub	objptr, ##28256
24d10     DC 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
24d14                 | ' 
24d14                 | ' leading_spaces:=amount
24d14     01 00 00 FF 
24d18     B6 E4 05 F1 | 	add	objptr, ##694
24d1c     F2 04 68 FC | 	wrlong	#2, objptr
24d20     01 00 00 FF 
24d24     B6 E4 85 F1 | 	sub	objptr, ##694
24d28     B9 01 00 FF 
24d2c     C5 26 06 F6 | 	mov	local01, ##@LR__5985
24d30     3D 12 06 F6 | 	mov	arg01, #61
24d34     3C 14 06 F6 | 	mov	arg02, #60
24d38     3B 16 06 F6 | 	mov	arg03, #59
24d3c     3A 18 06 F6 | 	mov	arg04, #58
24d40     58 81 B0 FD | 	call	#__system___vfs_open_sdcardx
24d44     FD 14 02 F6 | 	mov	arg02, result1
24d48     13 13 02 F6 | 	mov	arg01, local01
24d4c     8C 37 B0 FD | 	call	#__system___mount
24d50     B9 01 00 FF 
24d54     C9 12 06 F6 | 	mov	arg01, ##@LR__5986
24d58     40 3A B0 FD | 	call	#__system___chdir
24d5c     B9 01 00 FF 
24d60     D1 26 06 F6 | 	mov	local01, ##@LR__5987
24d64     4A 00 00 FF 
24d68     B4 E4 05 F1 | 	add	objptr, ##38068
24d6c     F2 26 62 FC | 	wrlong	local01, objptr
24d70     13 00 00 FF 
24d74     60 E4 85 F1 | 	sub	objptr, ##9824
24d78     F2 12 02 FB | 	rdlong	arg01, objptr
24d7c     37 00 00 FF 
24d80     54 E4 85 F1 | 	sub	objptr, ##28244
24d84     01 12 66 F0 | 	shl	arg01, #1
24d88     01 14 06 F6 | 	mov	arg02, #1
24d8c     E4 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
24d90                 | ' init_commands
24d90                 | ' init_error_strings
24d90                 | ' init_audio
24d90                 | ' do_new
24d90                 | ' cls(ink, paper)
24d90                 | ' v.setfontfamily(font) 				' use ST Mono font
24d90                 | ' v.setleadingspaces(2)
24d90                 | ' mount "/sd", _vfs_open_sdcard()
24d90                 | ' chdir "/sd/bas"
24d90                 | ' currentdir$="/sd/bas"
24d90                 | ' position 2*editor_spaces,1 : print ver$
24d90     00 12 06 F6 | 	mov	arg01, #0
24d94     1C 90 B0 FD | 	call	#__system___getiolock_0620
24d98     FD 12 02 F6 | 	mov	arg01, result1
24d9c     70 33 B0 FD | 	call	#__system___lockmem
24da0     18 00 00 FF 
24da4     40 EB 05 F1 | 	add	ptr__dat__, ##12608
24da8     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
24dac     18 00 00 FF 
24db0     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
24db4     00 12 06 F6 | 	mov	arg01, #0
24db8     00 16 06 F6 | 	mov	arg03, #0
24dbc     48 40 B0 FD | 	call	#__system___basic_print_string
24dc0     00 12 06 F6 | 	mov	arg01, #0
24dc4     0A 14 06 F6 | 	mov	arg02, #10
24dc8     00 16 06 F6 | 	mov	arg03, #0
24dcc     E0 3F B0 FD | 	call	#__system___basic_print_char
24dd0     00 12 06 F6 | 	mov	arg01, #0
24dd4     DC 8F B0 FD | 	call	#__system___getiolock_0620
24dd8     FD 00 68 FC | 	wrlong	#0, result1
24ddc     52 00 00 FF 
24de0     F0 E4 05 F1 | 	add	objptr, ##42224
24de4     F2 12 02 FB | 	rdlong	arg01, objptr
24de8     0F 00 00 FF 
24dec     74 E4 85 F1 | 	sub	objptr, ##7796
24df0     F2 26 02 FB | 	rdlong	local01, objptr
24df4     43 00 00 FF 
24df8     7C E4 85 F1 | 	sub	objptr, ##34428
24dfc     13 13 82 F1 | 	sub	arg01, local01
24e00     00 14 06 F6 | 	mov	arg02, #0
24e04     0A 16 06 F6 | 	mov	arg03, #10
24e08     D8 55 B0 FD | 	call	#__system__Number_S
24e0c     FD 12 02 F6 | 	mov	arg01, result1
24e10     B9 01 00 FF 
24e14     D9 14 06 F6 | 	mov	arg02, ##@LR__5988
24e18     50 33 B0 FD | 	call	#__system___string_concat
24e1c     FD 26 02 F6 | 	mov	local01, result1
24e20     50 00 00 FF 
24e24     58 E5 05 F1 | 	add	objptr, ##41304
24e28     F2 26 62 FC | 	wrlong	local01, objptr
24e2c     50 00 00 FF 
24e30     58 E5 85 F1 | 	sub	objptr, ##41304
24e34                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
24e34     00 12 06 F6 | 	mov	arg01, #0
24e38     78 8F B0 FD | 	call	#__system___getiolock_0620
24e3c     FD 12 02 F6 | 	mov	arg01, result1
24e40     CC 32 B0 FD | 	call	#__system___lockmem
24e44     50 00 00 FF 
24e48     58 E5 05 F1 | 	add	objptr, ##41304
24e4c     F2 14 02 FB | 	rdlong	arg02, objptr
24e50     50 00 00 FF 
24e54     58 E5 85 F1 | 	sub	objptr, ##41304
24e58     00 12 06 F6 | 	mov	arg01, #0
24e5c     00 16 06 F6 | 	mov	arg03, #0
24e60     A4 3F B0 FD | 	call	#__system___basic_print_string
24e64     00 12 06 F6 | 	mov	arg01, #0
24e68     0A 14 06 F6 | 	mov	arg02, #10
24e6c     00 16 06 F6 | 	mov	arg03, #0
24e70     3C 3F B0 FD | 	call	#__system___basic_print_char
24e74     00 12 06 F6 | 	mov	arg01, #0
24e78     38 8F B0 FD | 	call	#__system___getiolock_0620
24e7c     FD 00 68 FC | 	wrlong	#0, result1
24e80     37 00 00 FF 
24e84     54 E4 05 F1 | 	add	objptr, ##28244
24e88     F2 12 02 FB | 	rdlong	arg01, objptr
24e8c     37 00 00 FF 
24e90     54 E4 85 F1 | 	sub	objptr, ##28244
24e94     01 12 66 F0 | 	shl	arg01, #1
24e98     04 14 06 F6 | 	mov	arg02, #4
24e9c     D4 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
24ea0                 | ' position 2*editor_spaces,4 : print "Ready"
24ea0     00 12 06 F6 | 	mov	arg01, #0
24ea4     0C 8F B0 FD | 	call	#__system___getiolock_0620
24ea8     FD 12 02 F6 | 	mov	arg01, result1
24eac     60 32 B0 FD | 	call	#__system___lockmem
24eb0     B9 01 00 FF 
24eb4     EB 14 06 F6 | 	mov	arg02, ##@LR__5989
24eb8     00 12 06 F6 | 	mov	arg01, #0
24ebc     00 16 06 F6 | 	mov	arg03, #0
24ec0     44 3F B0 FD | 	call	#__system___basic_print_string
24ec4     00 12 06 F6 | 	mov	arg01, #0
24ec8     0A 14 06 F6 | 	mov	arg02, #10
24ecc     00 16 06 F6 | 	mov	arg03, #0
24ed0     DC 3E B0 FD | 	call	#__system___basic_print_char
24ed4     00 12 06 F6 | 	mov	arg01, #0
24ed8     D8 8E B0 FD | 	call	#__system___getiolock_0620
24edc     FD 00 68 FC | 	wrlong	#0, result1
24ee0     00 14 06 F6 | 	mov	arg02, #0
24ee4     01 14 D6 F7 | 	test	arg02, #1 wc
24ee8     5A 4C 64 FD | 	drvc	#38
24eec     01 14 D6 F7 | 	test	arg02, #1 wc
24ef0     5A 4E 64 FD | 	drvc	#39
24ef4     B9 01 00 FF 
24ef8     F1 26 06 F6 | 	mov	local01, ##@LR__5990
24efc     52 00 00 FF 
24f00     1C E5 05 F1 | 	add	objptr, ##42268
24f04     F2 26 62 FC | 	wrlong	local01, objptr
24f08     04 E4 05 F1 | 	add	objptr, #4
24f0c     FF FF FF FF 
24f10     F2 FE 6B FC | 	wrlong	##-1, objptr
24f14     0C E4 05 F1 | 	add	objptr, #12
24f18     F2 00 68 FC | 	wrlong	#0, objptr
24f1c     52 00 00 FF 
24f20     2C E5 85 F1 | 	sub	objptr, ##42284
24f24                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
24f24                 | ' loadname="noname.bas"
24f24                 | ' do_insert=-1
24f24                 | ' inload=0
24f24                 | ' 
24f24                 | ' open "/sd/bas/autorun.bas" for input as #9
24f24     B9 01 00 FF 
24f28     FC 14 06 F6 | 	mov	arg02, ##@LR__5991
24f2c     09 12 06 F6 | 	mov	arg01, #9
24f30     00 16 06 F6 | 	mov	arg03, #0
24f34     DC 3D B0 FD | 	call	#__system___basic_open_string
24f38     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24f3c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
24f40     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
24f44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24f48     52 00 00 FF 
24f4c     30 E5 05 F1 | 	add	objptr, ##42288
24f50     F2 FA 61 FC | 	wrlong	result1, objptr
24f54     52 00 00 FF 
24f58     30 E5 85 F1 | 	sub	objptr, ##42288
24f5c                 | ' err=geterr()
24f5c                 | ' close #9
24f5c     09 12 06 F6 | 	mov	arg01, #9
24f60     00 85 B0 FD | 	call	#__system__close
24f64                 | ' if err=0 then line$="run autorun.bas" : interpret
24f64     52 00 00 FF 
24f68     30 E5 05 F1 | 	add	objptr, ##42288
24f6c     F2 26 0A FB | 	rdlong	local01, objptr wz
24f70     52 00 00 FF 
24f74     30 E5 85 F1 | 	sub	objptr, ##42288
24f78     B9 01 00 AF 
24f7c     10 27 06 A6 |  if_e	mov	local01, ##@LR__5992
24f80     37 00 00 AF 
24f84     3C E4 05 A1 |  if_e	add	objptr, ##28220
24f88     F2 26 62 AC |  if_e	wrlong	local01, objptr
24f8c     37 00 00 AF 
24f90     3C E4 85 A1 |  if_e	sub	objptr, ##28220
24f94     F4 C8 BD AD |  if_e	call	#_interpret
24f98                 | ' 
24f98                 | ' 
24f98                 | ' '-------------------------------------------------------------------------------------------------------- 
24f98                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
24f98                 | ' '--------------------------------------------------------------------------------------------------------
24f98                 | ' 
24f98                 | ' do
24f98                 | LR__2780
24f98     68 B8 BD FD | 	call	#_edit
24f9c     FD 26 02 F6 | 	mov	local01, result1
24fa0     37 00 00 FF 
24fa4     3C E4 05 F1 | 	add	objptr, ##28220
24fa8     F2 26 62 FC | 	wrlong	local01, objptr
24fac     37 00 00 FF 
24fb0     3C E4 85 F1 | 	sub	objptr, ##28220
24fb4     D4 C8 BD FD | 	call	#_interpret
24fb8     B9 01 00 FF 
24fbc     20 27 06 F6 | 	mov	local01, ##@LR__5993
24fc0     37 00 00 FF 
24fc4     3C E4 05 F1 | 	add	objptr, ##28220
24fc8     F2 26 62 FC | 	wrlong	local01, objptr
24fcc     37 00 00 FF 
24fd0     3C E4 85 F1 | 	sub	objptr, ##28220
24fd4     C0 FF 9F FD | 	jmp	#LR__2780
24fd8     A7 F0 03 F6 | 	mov	ptra, fp
24fdc     B2 00 A0 FD | 	call	#popregs_
24fe0                 | _program_ret
24fe0     2D 00 64 FD | 	ret
24fe4                 | 
24fe4                 | ' '' this is not a main program.
24fe4                 | ' 
24fe4                 | ' '****************************************************************************************************************
24fe4                 | ' '                                                                                                             	*
24fe4                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
24fe4                 | ' '                                                                                                            	*
24fe4                 | ' ' base - HDMI base pin												*
24fe4                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
24fe4                 | ' '														*
24fe4                 | ' '														*
24fe4                 | ' '****************************************************************************************************************
24fe4                 | ' 
24fe4                 | ' pub start(base,mb):result |i
24fe4                 | _hg010b_spin2_start
24fe4                 | ' 
24fe4                 | ' '--------------------------- initialize pointers and variables
24fe4                 | ' 
24fe4                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
24fe4     34 E4 05 F1 | 	add	objptr, #52
24fe8     F2 FA 01 F6 | 	mov	result1, objptr
24fec     28 E4 85 F1 | 	sub	objptr, #40
24ff0     F2 FA 61 FC | 	wrlong	result1, objptr
24ff4                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
24ff4                 | ' hdmibase:=base							' HDMI base pin, 8*n
24ff4     18 E4 05 F1 | 	add	objptr, #24
24ff8     F2 12 62 FC | 	wrlong	arg01, objptr
24ffc                 | ' mailbox_ptr:=mb		
24ffc     04 E4 05 F1 | 	add	objptr, #4
25000     F2 14 62 FC | 	wrlong	arg02, objptr
25004                 | ' mailbox0:=mb				' PSRAM mailbox pointer
25004     C1 E5 05 F1 | 	add	objptr, #449
25008     F2 14 62 FC | 	wrlong	arg02, objptr
2500c                 | ' sprite_ptr:=@spr1ptr
2500c     D8 E4 85 F1 | 	sub	objptr, #216
25010     F2 FA 01 F6 | 	mov	result1, objptr
25014     E5 E4 85 F1 | 	sub	objptr, #229
25018     F2 FA 61 FC | 	wrlong	result1, objptr
2501c                 | ' 
2501c                 | ' 		'
2501c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
2501c     E5 E4 05 F1 | 	add	objptr, #229
25020     F2 FA 01 FB | 	rdlong	result1, objptr
25024     D0 FA 05 F1 | 	add	result1, #208
25028     FD 10 58 FC | 	wrword	#8, result1
2502c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
2502c     F2 16 02 FB | 	rdlong	arg03, objptr
25030     D2 16 06 F1 | 	add	arg03, #210
25034     0B 21 58 FC | 	wrword	#16, arg03
25038                 | ' leading_spaces:=0				'
25038     A5 E5 05 F1 | 	add	objptr, #421
2503c     F2 00 68 FC | 	wrlong	#0, objptr
25040                 | ' 
25040                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
25040     99 E4 85 F1 | 	sub	objptr, #153
25044     00 00 A0 FF 
25048     F2 0E 68 FC | 	wrlong	##1073741831, objptr
2504c                 | ' emptydl[1]:=0
2504c     04 E4 05 F1 | 	add	objptr, #4
25050     F2 00 68 FC | 	wrlong	#0, objptr
25054                 | ' 
25054                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
25054                 | ' 
25054                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
25054     28 E5 85 F1 | 	sub	objptr, #296
25058     F2 02 68 FC | 	wrlong	#1, objptr
2505c                 | ' if s_debug<>0
2505c                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
2505c     20 00 80 FF 
25060     F2 00 68 FC | 	wrlong	##16384, objptr
25064     F9 E4 85 F1 | 	sub	objptr, #249
25068                 | ' setmode()							' set the mode, see below
25068     1C 03 B0 FD | 	call	#_hg010b_spin2_setmode
2506c                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
2506c     49 E4 05 F1 | 	add	objptr, #73
25070     F2 FA 01 F6 | 	mov	result1, objptr
25074     35 E4 85 F1 | 	sub	objptr, #53
25078     F2 FA 61 FC | 	wrlong	result1, objptr
2507c                 | ' cursor_ptr:=@cursor_x						
2507c     28 E4 05 F1 | 	add	objptr, #40
25080     F2 16 02 F6 | 	mov	arg03, objptr
25084     2C E4 85 F1 | 	sub	objptr, #44
25088     F2 16 62 FC | 	wrlong	arg03, objptr
2508c                 | ' fontnum:=0  							' start with a PC type font 
2508c     55 E4 05 F1 | 	add	objptr, #85
25090     F2 00 68 FC | 	wrlong	#0, objptr
25094                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
25094     1C E4 05 F1 | 	add	objptr, #28
25098     F2 12 02 F6 | 	mov	arg01, objptr
2509c     81 E4 85 F1 | 	sub	objptr, #129
250a0     1C 00 00 FF 
250a4     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14464
250a8     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
250ac     1C 00 00 FF 
250b0     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14464
250b4     10 16 06 F6 | 	mov	arg03, #16
250b8     04 2F B0 FD | 	call	#__system____builtin_memmove
250bc                 | ' leading_spaces:=0
250bc     01 00 00 FF 
250c0     B6 E4 05 F1 | 	add	objptr, ##694
250c4     F2 00 68 FC | 	wrlong	#0, objptr
250c8     01 00 00 FF 
250cc     B6 E4 85 F1 | 	sub	objptr, ##694
250d0                 | ' '---------------------------- initialize a cursor (MSDOS type)
250d0                 | ' 
250d0                 | ' initcursor(154)
250d0     9A 12 06 F6 | 	mov	arg01, #154
250d4     78 00 B0 FD | 	call	#_hg010b_spin2_initcursor
250d8                 | ' 
250d8                 | ' '---------------------------- start the cog
250d8                 | ' 
250d8                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
250d8     1C 00 00 FF 
250dc     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14480
250e0     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
250e4     1C 00 00 FF 
250e8     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14480
250ec     14 E4 05 F1 | 	add	objptr, #20
250f0     10 FA 05 F6 | 	mov	result1, #16
250f4     28 E4 61 FD | 	setq	objptr
250f8     0A FB F1 FC | 	coginit	result1, arg02 wc
250fc     01 FA 65 C6 |  if_b	neg	result1, #1
25100     1C E4 05 F1 | 	add	objptr, #28
25104     F2 FA 61 FC | 	wrlong	result1, objptr
25108     30 E4 85 F1 | 	sub	objptr, #48
2510c                 | ' waitms(40)							' wait for stabilize
2510c     28 12 06 F6 | 	mov	arg01, #40
25110     F0 32 B0 FD | 	call	#__system___waitms
25114                 | ' return cog							' return the driver's cog #
25114     30 E4 05 F1 | 	add	objptr, #48
25118     F2 FA 01 FB | 	rdlong	result1, objptr
2511c     30 E4 85 F1 | 	sub	objptr, #48
25120                 | _hg010b_spin2_start_ret
25120     2D 00 64 FD | 	ret
25124                 | 
25124                 | ' 
25124                 | ' 
25124                 | ' '**************************************************************************************************************** 
25124                 | ' '                                                                                                             	*
25124                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
25124                 | ' '  Mode number - see start() above or bits below								*
25124                 | ' '                                                                                                             	*
25124                 | ' '****************************************************************************************************************
25124                 | ' 
25124                 | ' 
25124                 | ' pub restorepalette()
25124                 | _hg010b_spin2_restorepalette
25124                 | ' 
25124                 | ' longmove(@ataripalette,@ataripalette2,256)
25124     18 00 00 FF 
25128     40 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
2512c     F7 12 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
25130     02 00 00 FF 
25134     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
25138     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
2513c     1A 00 00 FF 
25140     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
25144     00 17 06 F6 | 	mov	arg03, #256
25148     08 2F B0 FD | 	call	#__system__longmove
2514c                 | _hg010b_spin2_restorepalette_ret
2514c     2D 00 64 FD | 	ret
25150                 | 
25150                 | ' 
25150                 | ' '---------------------------- initialize a cursor (MSDOS type)
25150                 | ' pub initcursor(color) |i
25150                 | _hg010b_spin2_initcursor
25150     03 4A 05 F6 | 	mov	COUNT_, #3
25154     A8 00 A0 FD | 	call	#pushregs_
25158     09 27 02 F6 | 	mov	local01, arg01
2515c                 | ' 
2515c                 | ' cursor_x:=0							' place the cursor at 0:0
2515c     3C E4 05 F1 | 	add	objptr, #60
25160     F2 00 58 FC | 	wrword	#0, objptr
25164                 | ' cursor_y:=0
25164     02 E4 05 F1 | 	add	objptr, #2
25168     F2 00 48 FC | 	wrbyte	#0, objptr
2516c                 | ' repeat i from 0 to 111
2516c     00 28 06 F6 | 	mov	local02, #0
25170     F8 E5 05 F1 | 	add	objptr, #504
25174     97 0C 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
25178                 | LR__2790
25178                 | '   cursor[i]:=0
25178     14 2B 02 F6 | 	mov	local03, local02
2517c     F2 2A 02 F1 | 	add	local03, objptr
25180     15 01 48 FC | 	wrbyte	#0, local03
25184     01 28 06 F1 | 	add	local02, #1
25188     70 28 56 F2 | 	cmps	local02, #112 wc
2518c     E8 FF 9F CD |  if_b	jmp	#LR__2790
25190                 | LR__2791
25190                 | ' repeat i from 112 to 127
25190     70 28 06 F6 | 	mov	local02, #112
25194     97 0C 48 FB | 	callpa	#(@LR__2793-@LR__2792)>>2,fcache_load_ptr_
25198                 | LR__2792
25198                 | '   cursor[i]:=color  
25198     14 2B 02 F6 | 	mov	local03, local02
2519c     F2 2A 02 F1 | 	add	local03, objptr
251a0     15 27 42 FC | 	wrbyte	local01, local03
251a4     01 28 06 F1 | 	add	local02, #1
251a8     80 28 16 F2 | 	cmp	local02, #128 wc
251ac     E8 FF 9F CD |  if_b	jmp	#LR__2792
251b0                 | LR__2793
251b0                 | ' 'repeat i from 0 to 127
251b0                 | ' '  if ((i/8)//2)
251b0                 | ' '    cursor[i]:=15
251b0                 | ' '  else
251b0                 | ' '    cursor[i]:=0
251b0                 | ' '  if i>=120    
251b0                 | ' '    cursor[i]:=40
251b0                 | ' setspriteptr(17,@cursor)
251b0     F2 14 02 F6 | 	mov	arg02, objptr
251b4     01 00 00 FF 
251b8     36 E4 85 F1 | 	sub	objptr, ##566
251bc     11 12 06 F6 | 	mov	arg01, #17
251c0     CC 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
251c4                 | ' setspritesize(17,8,16)
251c4     11 12 06 F6 | 	mov	arg01, #17
251c8     08 14 06 F6 | 	mov	arg02, #8
251cc     10 16 06 F6 | 	mov	arg03, #16
251d0     4C 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
251d4                 | ' setspritepos(17,0,0)
251d4     11 12 06 F6 | 	mov	arg01, #17
251d8     00 14 06 F6 | 	mov	arg02, #0
251dc     00 16 06 F6 | 	mov	arg03, #0
251e0     D4 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
251e4                 | ' cursorshape:=14
251e4     0B 00 00 FF 
251e8     C6 E4 05 F1 | 	add	objptr, ##5830
251ec     F2 1C 68 FC | 	wrlong	#14, objptr
251f0                 | ' cursorcolor:=color
251f0     04 E4 85 F1 | 	sub	objptr, #4
251f4     F2 26 62 FC | 	wrlong	local01, objptr
251f8     0B 00 00 FF 
251fc     C2 E4 85 F1 | 	sub	objptr, ##5826
25200     A7 F0 03 F6 | 	mov	ptra, fp
25204     B2 00 A0 FD | 	call	#popregs_
25208                 | _hg010b_spin2_initcursor_ret
25208     2D 00 64 FD | 	ret
2520c                 | 
2520c                 | ' 
2520c                 | ' pub setcursorshape(shape) | i
2520c                 | _hg010b_spin2_setcursorshape
2520c                 | ' 
2520c                 | ' cursorshape:=shape
2520c     0B 00 00 FF 
25210     C6 E4 05 F1 | 	add	objptr, ##5830
25214     F2 12 62 FC | 	wrlong	arg01, objptr
25218                 | ' repeat i from 0 to (8*cursorshape)-1
25218     00 00 06 F6 | 	mov	_var01, #0
2521c     09 03 02 F6 | 	mov	_var02, arg01
25220     03 02 66 F0 | 	shl	_var02, #3
25224     01 02 86 F1 | 	sub	_var02, #1
25228     00 02 56 F2 | 	cmps	_var02, #0 wc
2522c     01 04 86 F6 | 	negc	_var03, #1
25230     02 07 02 F6 | 	mov	_var04, _var03
25234     02 03 02 F1 | 	add	_var02, _var03
25238     0A 00 00 FF 
2523c     90 E4 85 F1 | 	sub	objptr, ##5264
25240     97 0C 48 FB | 	callpa	#(@LR__2801-@LR__2800)>>2,fcache_load_ptr_
25244                 | LR__2800
25244                 | '   cursor[i]:=0
25244     00 05 02 F6 | 	mov	_var03, _var01
25248     F2 04 02 F1 | 	add	_var03, objptr
2524c     02 01 48 FC | 	wrbyte	#0, _var03
25250     03 01 02 F1 | 	add	_var01, _var04
25254     01 01 0A F2 | 	cmp	_var01, _var02 wz
25258     E8 FF 9F 5D |  if_ne	jmp	#LR__2800
2525c                 | LR__2801
2525c                 | ' repeat i from 8*cursorshape to 127
2525c     0A 00 00 FF 
25260     90 E4 05 F1 | 	add	objptr, ##5264
25264     F2 06 02 FB | 	rdlong	_var04, objptr
25268     03 01 02 F6 | 	mov	_var01, _var04
2526c     03 00 66 F0 | 	shl	_var01, #3
25270     0B 00 00 FF 
25274     C6 E4 85 F1 | 	sub	objptr, ##5830
25278     03 06 66 F0 | 	shl	_var04, #3
2527c     80 06 56 F2 | 	cmps	_var04, #128 wc
25280     01 04 A6 F6 | 	negnc	_var03, #1
25284     7F 02 06 F6 | 	mov	_var02, #127
25288     02 03 02 F1 | 	add	_var02, _var03
2528c     97 1A 48 FB | 	callpa	#(@LR__2803-@LR__2802)>>2,fcache_load_ptr_
25290                 | LR__2802
25290                 | '   cursor[i]:=cursorcolor
25290     00 07 02 F6 | 	mov	_var04, _var01
25294     01 00 00 FF 
25298     36 E4 05 F1 | 	add	objptr, ##566
2529c     F2 06 02 F1 | 	add	_var04, objptr
252a0     0A 00 00 FF 
252a4     8C E4 05 F1 | 	add	objptr, ##5260
252a8     F2 12 02 FB | 	rdlong	arg01, objptr
252ac     0B 00 00 FF 
252b0     C2 E4 85 F1 | 	sub	objptr, ##5826
252b4     03 13 42 FC | 	wrbyte	arg01, _var04
252b8     02 01 02 F1 | 	add	_var01, _var03
252bc     01 01 0A F2 | 	cmp	_var01, _var02 wz
252c0     CC FF 9F 5D |  if_ne	jmp	#LR__2802
252c4                 | LR__2803
252c4                 | _hg010b_spin2_setcursorshape_ret
252c4     2D 00 64 FD | 	ret
252c8                 | 
252c8                 | ' 
252c8                 | ' pub setcursorcolor(color) | i
252c8                 | _hg010b_spin2_setcursorcolor
252c8                 | ' 
252c8                 | ' cursorcolor:=color
252c8     0B 00 00 FF 
252cc     C2 E4 05 F1 | 	add	objptr, ##5826
252d0     F2 12 62 FC | 	wrlong	arg01, objptr
252d4                 | ' repeat i from 0 to (8*cursorshape)-1
252d4     00 12 06 F6 | 	mov	arg01, #0
252d8     04 E4 05 F1 | 	add	objptr, #4
252dc     F2 00 02 FB | 	rdlong	_var01, objptr
252e0     03 00 66 F0 | 	shl	_var01, #3
252e4     01 00 86 F1 | 	sub	_var01, #1
252e8     00 00 56 F2 | 	cmps	_var01, #0 wc
252ec     01 02 86 F6 | 	negc	_var02, #1
252f0     01 05 02 F6 | 	mov	_var03, _var02
252f4     01 01 02 F1 | 	add	_var01, _var02
252f8     0A 00 00 FF 
252fc     90 E4 85 F1 | 	sub	objptr, ##5264
25300     97 0C 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
25304                 | LR__2810
25304                 | '   cursor[i]:=0
25304     09 03 02 F6 | 	mov	_var02, arg01
25308     F2 02 02 F1 | 	add	_var02, objptr
2530c     01 01 48 FC | 	wrbyte	#0, _var02
25310     02 13 02 F1 | 	add	arg01, _var03
25314     00 13 0A F2 | 	cmp	arg01, _var01 wz
25318     E8 FF 9F 5D |  if_ne	jmp	#LR__2810
2531c                 | LR__2811
2531c                 | ' repeat i from 8*cursorshape to 127
2531c     0A 00 00 FF 
25320     90 E4 05 F1 | 	add	objptr, ##5264
25324     F2 04 02 FB | 	rdlong	_var03, objptr
25328     02 13 02 F6 | 	mov	arg01, _var03
2532c     03 12 66 F0 | 	shl	arg01, #3
25330     0B 00 00 FF 
25334     C6 E4 85 F1 | 	sub	objptr, ##5830
25338     03 04 66 F0 | 	shl	_var03, #3
2533c     80 04 56 F2 | 	cmps	_var03, #128 wc
25340     01 02 A6 F6 | 	negnc	_var02, #1
25344     7F 00 06 F6 | 	mov	_var01, #127
25348     01 01 02 F1 | 	add	_var01, _var02
2534c     97 1A 48 FB | 	callpa	#(@LR__2813-@LR__2812)>>2,fcache_load_ptr_
25350                 | LR__2812
25350                 | '   cursor[i]:=cursorcolor
25350     09 05 02 F6 | 	mov	_var03, arg01
25354     01 00 00 FF 
25358     36 E4 05 F1 | 	add	objptr, ##566
2535c     F2 04 02 F1 | 	add	_var03, objptr
25360     0A 00 00 FF 
25364     8C E4 05 F1 | 	add	objptr, ##5260
25368     F2 06 02 FB | 	rdlong	_var04, objptr
2536c     0B 00 00 FF 
25370     C2 E4 85 F1 | 	sub	objptr, ##5826
25374     02 07 42 FC | 	wrbyte	_var04, _var03
25378     01 13 02 F1 | 	add	arg01, _var02
2537c     00 13 0A F2 | 	cmp	arg01, _var01 wz
25380     CC FF 9F 5D |  if_ne	jmp	#LR__2812
25384                 | LR__2813
25384                 | _hg010b_spin2_setcursorcolor_ret
25384     2D 00 64 FD | 	ret
25388                 | 
25388                 | '   
25388                 | '   
25388                 | '   
25388                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
25388                 | _hg010b_spin2_setmode
25388     02 4A 05 F6 | 	mov	COUNT_, #2
2538c     A8 00 A0 FD | 	call	#pushregs_
25390                 | ' 
25390                 | ' 
25390                 | ' dl_ptr:=@emptydl[0]
25390     01 00 00 FF 
25394     1D E4 05 F1 | 	add	objptr, ##541
25398     F2 1A 02 F6 | 	mov	arg05, objptr
2539c     FD E5 85 F1 | 	sub	objptr, #509
253a0     F2 1A 62 FC | 	wrlong	arg05, objptr
253a4                 | ' 
253a4                 | ' if cog>0 
253a4     10 E4 05 F1 | 	add	objptr, #16
253a8     F2 1A 02 FB | 	rdlong	arg05, objptr
253ac     30 E4 85 F1 | 	sub	objptr, #48
253b0     01 1A 56 F2 | 	cmps	arg05, #1 wc
253b4                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
253b4     01 12 06 36 |  if_ae	mov	arg01, #1
253b8     58 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
253bc                 | ' xres:=1024
253bc     01 00 00 FF 
253c0     26 E4 05 F1 | 	add	objptr, ##550
253c4     02 00 80 FF 
253c8     F2 00 68 FC | 	wrlong	##1024, objptr
253cc                 | ' yres:=600
253cc     04 E4 05 F1 | 	add	objptr, #4
253d0     01 00 80 FF 
253d4     F2 B0 68 FC | 	wrlong	##600, objptr
253d8                 | ' ppl:=(timings[3])
253d8     1C 00 00 FF 
253dc     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
253e0     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
253e4     51 E5 85 F1 | 	sub	objptr, #337
253e8     F2 1A 62 FC | 	wrlong	arg05, objptr
253ec                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
253ec     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
253f0     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
253f4     01 26 66 F0 | 	shl	local01, #1
253f8     80 E4 85 F1 | 	sub	objptr, #128
253fc     F2 26 62 FC | 	wrlong	local01, objptr
25400                 | ' cpl1:=cpl '' todo remove
25400     04 E4 05 F1 | 	add	objptr, #4
25404     F2 26 62 FC | 	wrlong	local01, objptr
25408                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
25408     04 00 00 FF 
2540c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
25410     41 E4 85 F1 | 	sub	objptr, #65
25414     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
25418                 | ' repeat i from 0 to 3
25418     00 28 06 F6 | 	mov	local02, #0
2541c     04 00 00 FF 
25420     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
25424     08 E4 05 F1 | 	add	objptr, #8
25428     97 20 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
2542c                 | LR__2820
2542c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
2542c     14 27 02 F6 | 	mov	local01, local02
25430     02 26 66 F0 | 	shl	local01, #2
25434     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
25438     F2 1A 02 FB | 	rdlong	arg05, objptr
2543c     11 1A 66 F0 | 	shl	arg05, #17
25440     13 27 02 FB | 	rdlong	local01, local01
25444     0D 27 02 F1 | 	add	local01, arg05
25448     80 40 38 FF 
2544c     00 26 06 F1 | 	add	local01, ##1887502336
25450     14 1B 02 F6 | 	mov	arg05, local02
25454     02 1A 66 F0 | 	shl	arg05, #2
25458     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
2545c     0D 27 62 FC | 	wrlong	local01, arg05
25460     01 28 06 F1 | 	add	local02, #1
25464     04 28 56 F2 | 	cmps	local02, #4 wc
25468     C0 FF 9F CD |  if_b	jmp	#LR__2820
2546c                 | LR__2821
2546c     24 E4 85 F1 | 	sub	objptr, #36
25470     1C 00 00 FF 
25474     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
25478                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
25478                 | ' 'hubset(timings[10])
25478                 | ' waitms(1)                                                   	' wait for stabilization
25478     01 12 06 F6 | 	mov	arg01, #1
2547c     84 2F B0 FD | 	call	#__system___waitms
25480     1C 00 00 FF 
25484     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
25488     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
2548c     61 E4 05 F1 | 	add	objptr, #97
25490     F2 28 62 FC | 	wrlong	local02, objptr
25494     14 27 52 F6 | 	abs	local01, local02 wc
25498     04 26 46 F0 | 	shr	local01, #4
2549c     13 27 82 F6 | 	negc	local01, local01
254a0     9C E4 05 F1 | 	add	objptr, #156
254a4     F2 26 62 FC | 	wrlong	local01, objptr
254a8     A4 E4 85 F1 | 	sub	objptr, #164
254ac     F2 28 02 FB | 	rdlong	local02, objptr
254b0     08 E4 05 F1 | 	add	objptr, #8
254b4     F2 26 02 FB | 	rdlong	local01, objptr
254b8     13 29 02 FD | 	qmul	local02, local01
254bc                 | ' lines:=timings[11]
254bc                 | ' t_lines:=lines/16
254bc                 | ' buflen:=cpl*lines						' framebuffer length in longs
254bc     29 E4 85 F1 | 	sub	objptr, #41
254c0     19 26 C6 F9 | 	decod	local01, #25
254c4     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
254c8     18 28 62 FD | 	getqx	local02
254cc     F2 28 62 FC | 	wrlong	local02, objptr
254d0     38 E4 85 F1 | 	sub	objptr, #56
254d4     02 28 66 F0 | 	shl	local02, #2
254d8     14 27 82 F1 | 	sub	local01, local02
254dc     F2 26 62 FC | 	wrlong	local01, objptr
254e0     FD E4 05 F1 | 	add	objptr, #253
254e4     F2 28 02 FB | 	rdlong	local02, objptr
254e8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
254ec     0D 29 02 FD | 	qmul	local02, arg05
254f0                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
254f0                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
254f0     F9 E4 85 F1 | 	sub	objptr, #249
254f4                 | ' mode_ptr:=@timings						' set pointers to timings
254f4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
254f8                 | ' graphmode:=1024+512+192+48							' det global variable
254f8                 | ' makedl(graphmode)							' make a DL for the mode
254f8     03 00 00 FF 
254fc     F0 12 06 F6 | 	mov	arg01, ##1776
25500     18 28 62 FD | 	getqx	local02
25504     14 27 82 F1 | 	sub	local01, local02
25508     F2 26 62 FC | 	wrlong	local01, objptr
2550c     14 E4 05 F1 | 	add	objptr, #20
25510     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
25514     79 E4 05 F1 | 	add	objptr, #121
25518     03 00 80 FF 
2551c     F2 E0 69 FC | 	wrlong	##1776, objptr
25520     91 E4 85 F1 | 	sub	objptr, #145
25524     1C 00 00 FF 
25528     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
2552c     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
25530                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
25530     F2 26 02 FB | 	rdlong	local01, objptr
25534     DD E4 05 F1 | 	add	objptr, #221
25538     F2 26 62 FC | 	wrlong	local01, objptr
2553c                 | ' s_font_ptr:=font_ptr
2553c     D5 E4 85 F1 | 	sub	objptr, #213
25540     F2 26 02 FB | 	rdlong	local01, objptr
25544     D9 E4 05 F1 | 	add	objptr, #217
25548     F2 26 62 FC | 	wrlong	local01, objptr
2554c                 | ' s_lines:=lines
2554c     80 E4 85 F1 | 	sub	objptr, #128
25550     F2 26 02 FB | 	rdlong	local01, objptr
25554     84 E4 05 F1 | 	add	objptr, #132
25558     F2 26 62 FC | 	wrlong	local01, objptr
2555c                 | ' s_buflen:=buflen
2555c     AD E4 85 F1 | 	sub	objptr, #173
25560     F2 26 02 FB | 	rdlong	local01, objptr
25564     B5 E4 05 F1 | 	add	objptr, #181
25568     F2 26 62 FC | 	wrlong	local01, objptr
2556c                 | ' s_cpl:=cpl
2556c     94 E4 85 F1 | 	sub	objptr, #148
25570     F2 26 02 FB | 	rdlong	local01, objptr
25574     90 E4 05 F1 | 	add	objptr, #144
25578     F2 26 62 FC | 	wrlong	local01, objptr
2557c                 | ' s_cpl1:=cpl
2557c     90 E4 85 F1 | 	sub	objptr, #144
25580     F2 26 02 FB | 	rdlong	local01, objptr
25584     98 E4 05 F1 | 	add	objptr, #152
25588     F2 26 62 FC | 	wrlong	local01, objptr
2558c                 | ' st_lines:=t_lines
2558c     0C E4 05 F1 | 	add	objptr, #12
25590     F2 26 02 FB | 	rdlong	local01, objptr
25594     04 E4 05 F1 | 	add	objptr, #4
25598     F2 26 62 FC | 	wrlong	local01, objptr
2559c                 | ' ppl:=ppl/xzoom  
2559c     28 E4 85 F1 | 	sub	objptr, #40
255a0     F2 90 02 FB | 	rdlong	muldiva_, objptr
255a4     2C E4 05 F1 | 	add	objptr, #44
255a8     F2 92 02 FB | 	rdlong	muldivb_, objptr
255ac     05 E5 85 F1 | 	sub	objptr, #261
255b0     BA 00 A0 FD | 	call	#divide_
255b4     D9 E4 05 F1 | 	add	objptr, #217
255b8     F2 92 62 FC | 	wrlong	muldivb_, objptr
255bc                 | ' s_ppl:=ppl
255bc     1C E4 05 F1 | 	add	objptr, #28
255c0     F2 92 62 FC | 	wrlong	muldivb_, objptr
255c4     F5 E4 85 F1 | 	sub	objptr, #245
255c8                 | ' waitms(20)							' wait 
255c8     14 12 06 F6 | 	mov	arg01, #20
255cc     34 2E B0 FD | 	call	#__system___waitms
255d0                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
255d0     04 E4 05 F1 | 	add	objptr, #4
255d4     F2 12 02 FB | 	rdlong	arg01, objptr
255d8     04 E4 85 F1 | 	sub	objptr, #4
255dc     F2 16 02 FB | 	rdlong	arg03, objptr
255e0     09 17 82 F1 | 	sub	arg03, arg01
255e4     20 14 06 F6 | 	mov	arg02, #32
255e8     00 18 06 F6 | 	mov	arg04, #0
255ec     01 1A 06 F6 | 	mov	arg05, #1
255f0     0B 00 00 FF 
255f4     CC E4 05 F1 | 	add	objptr, ##5836
255f8     A8 1F B0 FD | 	call	#_psram_spin2_fill
255fc     0B 00 00 FF 
25600     CC E4 85 F1 | 	sub	objptr, ##5836
25604     A7 F0 03 F6 | 	mov	ptra, fp
25608     B2 00 A0 FD | 	call	#popregs_
2560c                 | _hg010b_spin2_setmode_ret
2560c     2D 00 64 FD | 	ret
25610                 | 
25610                 | ' 
25610                 | ' '****************************************************************************************************************
25610                 | ' '                                                                                                             	*
25610                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
25610                 | ' '                                                                                                             	*
25610                 | ' '****************************************************************************************************************
25610                 | ' 
25610                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
25610                 | _hg010b_spin2_makedl
25610                 | ' 
25610                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
25610                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
25610                 | ' repeat i from 0 to 11                                                           ' clear DL
25610     00 00 06 F6 | 	mov	_var01, #0
25614     ED E5 05 F1 | 	add	objptr, #493
25618     97 0E 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
2561c                 | LR__2830
2561c                 | '   displaylist[i]:=0 
2561c     00 03 02 F6 | 	mov	_var02, _var01
25620     02 02 66 F0 | 	shl	_var02, #2
25624     F2 02 02 F1 | 	add	_var02, objptr
25628     01 01 68 FC | 	wrlong	#0, _var02
2562c     01 00 06 F1 | 	add	_var01, #1
25630     0C 00 56 F2 | 	cmps	_var01, #12 wc
25634     E4 FF 9F CD |  if_b	jmp	#LR__2830
25638                 | LR__2831
25638                 | '                         ' 
25638                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
25638     8C E5 85 F1 | 	sub	objptr, #396
2563c     F2 02 02 FB | 	rdlong	_var02, objptr
25640     14 02 66 F0 | 	shl	_var02, #20
25644     01 02 06 F1 | 	add	_var02, #1
25648     04 E4 85 F1 | 	sub	objptr, #4
2564c     F2 00 02 FB | 	rdlong	_var01, objptr
25650     06 00 66 F0 | 	shl	_var01, #6
25654     00 03 02 F1 | 	add	_var02, _var01
25658     90 E5 05 F1 | 	add	objptr, #400
2565c     F2 02 62 FC | 	wrlong	_var02, objptr
25660     ED E5 85 F1 | 	sub	objptr, #493
25664                 | ' displaylist[1]:=buf_ptr<<4+%10  
25664     F2 02 02 FB | 	rdlong	_var02, objptr
25668     04 02 66 F0 | 	shl	_var02, #4
2566c     02 02 06 F1 | 	add	_var02, #2
25670     F1 E5 05 F1 | 	add	objptr, #497
25674     F2 02 62 FC | 	wrlong	_var02, objptr
25678                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
25678     04 E4 85 F1 | 	sub	objptr, #4
2567c     F2 02 02 F6 | 	mov	_var02, objptr
25680     CD E5 85 F1 | 	sub	objptr, #461
25684     F2 02 62 FC | 	wrlong	_var02, objptr
25688     20 E4 85 F1 | 	sub	objptr, #32
2568c                 | _hg010b_spin2_makedl_ret
2568c     2D 00 64 FD | 	ret
25690                 | 
25690                 | ' 
25690                 | ' 
25690                 | ' '****************************************************************************************************************
25690                 | ' '                                                                        					*
25690                 | ' '  Graphic primitives                                                    					*
25690                 | ' '                                                                        					*
25690                 | ' '****************************************************************************************************************
25690                 | ' 
25690                 | ' pub setspriteptr(num,ptr)
25690                 | _hg010b_spin2_setspriteptr
25690                 | ' long[@spr1ptr+12*num]:=ptr
25690     11 E5 05 F1 | 	add	objptr, #273
25694     F2 00 02 F6 | 	mov	_var01, objptr
25698     09 03 02 F6 | 	mov	_var02, arg01
2569c     01 02 66 F0 | 	shl	_var02, #1
256a0     09 03 02 F1 | 	add	_var02, arg01
256a4     02 02 66 F0 | 	shl	_var02, #2
256a8     01 01 02 F1 | 	add	_var01, _var02
256ac     00 15 62 FC | 	wrlong	arg02, _var01
256b0     11 E5 85 F1 | 	sub	objptr, #273
256b4                 | _hg010b_spin2_setspriteptr_ret
256b4     2D 00 64 FD | 	ret
256b8                 | 
256b8                 | ' 
256b8                 | ' pub setspritepos(num,x,y)
256b8                 | _hg010b_spin2_setspritepos
256b8                 | ' if y>601
256b8     01 00 00 FF 
256bc     5A 16 56 F2 | 	cmps	arg03, ##602 wc
256c0                 | '   y:=601
256c0     01 00 00 3F 
256c4     59 16 06 36 |  if_ae	mov	arg03, ##601
256c8                 | ' if x>1024
256c8     02 00 00 FF 
256cc     01 14 56 F2 | 	cmps	arg02, ##1025 wc
256d0                 | '   x:=1024
256d0     0A 14 C6 39 |  if_ae	decod	arg02, #10
256d4                 | ' word[@spr1ptr+12*num+4]:=x
256d4     11 E5 05 F1 | 	add	objptr, #273
256d8     F2 00 02 F6 | 	mov	_var01, objptr
256dc     09 03 02 F6 | 	mov	_var02, arg01
256e0     01 02 66 F0 | 	shl	_var02, #1
256e4     09 03 02 F1 | 	add	_var02, arg01
256e8     02 02 66 F0 | 	shl	_var02, #2
256ec     01 01 02 F1 | 	add	_var01, _var02
256f0     04 00 06 F1 | 	add	_var01, #4
256f4     00 15 52 FC | 	wrword	arg02, _var01
256f8                 | ' word[@spr1ptr+12*num+6]:=y
256f8     F2 00 02 F6 | 	mov	_var01, objptr
256fc     09 03 02 F6 | 	mov	_var02, arg01
25700     01 02 66 F0 | 	shl	_var02, #1
25704     09 03 02 F1 | 	add	_var02, arg01
25708     02 02 66 F0 | 	shl	_var02, #2
2570c     01 01 02 F1 | 	add	_var01, _var02
25710     06 00 06 F1 | 	add	_var01, #6
25714     00 17 52 FC | 	wrword	arg03, _var01
25718     11 E5 85 F1 | 	sub	objptr, #273
2571c                 | _hg010b_spin2_setspritepos_ret
2571c     2D 00 64 FD | 	ret
25720                 | 
25720                 | ' 
25720                 | ' pub setspritesize(num,w,h)
25720                 | _hg010b_spin2_setspritesize
25720                 | ' word[@spr1ptr+12*num+8]:=w
25720     11 E5 05 F1 | 	add	objptr, #273
25724     F2 00 02 F6 | 	mov	_var01, objptr
25728     09 03 02 F6 | 	mov	_var02, arg01
2572c     01 02 66 F0 | 	shl	_var02, #1
25730     09 03 02 F1 | 	add	_var02, arg01
25734     02 02 66 F0 | 	shl	_var02, #2
25738     01 01 02 F1 | 	add	_var01, _var02
2573c     08 00 06 F1 | 	add	_var01, #8
25740     00 15 52 FC | 	wrword	arg02, _var01
25744                 | ' word[@spr1ptr+12*num+10]:=h
25744     F2 00 02 F6 | 	mov	_var01, objptr
25748     09 03 02 F6 | 	mov	_var02, arg01
2574c     01 02 66 F0 | 	shl	_var02, #1
25750     09 03 02 F1 | 	add	_var02, arg01
25754     02 02 66 F0 | 	shl	_var02, #2
25758     01 01 02 F1 | 	add	_var01, _var02
2575c     0A 00 06 F1 | 	add	_var01, #10
25760     00 17 52 FC | 	wrword	arg03, _var01
25764     11 E5 85 F1 | 	sub	objptr, #273
25768                 | _hg010b_spin2_setspritesize_ret
25768     2D 00 64 FD | 	ret
2576c                 | 
2576c                 | ' 
2576c                 | ' 
2576c                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
2576c                 | ' 
2576c                 | ' 
2576c                 | ' pub putpixel(x,y,c)
2576c                 | _hg010b_spin2_putpixel
2576c     04 4A 05 F6 | 	mov	COUNT_, #4
25770     A8 00 A0 FD | 	call	#pushregs_
25774     09 27 02 F6 | 	mov	local01, arg01
25778                 | ' 
25778                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
25778     00 28 06 F6 | 	mov	local02, #0
2577c     00 26 56 F2 | 	cmps	local01, #0 wc
25780     01 28 66 36 |  if_ae	neg	local02, #1
25784     E9 E4 05 F1 | 	add	objptr, #233
25788     F2 1A 02 FB | 	rdlong	arg05, objptr
2578c     02 1A 66 F0 | 	shl	arg05, #2
25790     0D 27 52 F2 | 	cmps	local01, arg05 wc
25794     15 2B A2 F1 | 	subx	local03, local03
25798     15 29 02 F5 | 	and	local02, local03
2579c     00 2A 06 F6 | 	mov	local03, #0
257a0     00 14 56 F2 | 	cmps	arg02, #0 wc
257a4     01 2A 66 36 |  if_ae	neg	local03, #1
257a8     15 29 02 F5 | 	and	local02, local03
257ac     04 E4 85 F1 | 	sub	objptr, #4
257b0     F2 2A 02 FB | 	rdlong	local03, objptr
257b4     E5 E4 85 F1 | 	sub	objptr, #229
257b8     15 15 52 F2 | 	cmps	arg02, local03 wc
257bc     16 2D A2 F1 | 	subx	local04, local04
257c0     16 29 CA F7 | 	test	local02, local04 wz
257c4     48 00 90 AD |  if_e	jmp	#LR__2840
257c8     DD E4 05 F1 | 	add	objptr, #221
257cc     F2 12 02 FB | 	rdlong	arg01, objptr
257d0     14 E4 05 F1 | 	add	objptr, #20
257d4     F2 2C 02 FB | 	rdlong	local04, objptr
257d8     02 2C 66 F0 | 	shl	local04, #2
257dc     0A 2D 02 FD | 	qmul	local04, arg02
257e0                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
257e0     0B 15 02 F6 | 	mov	arg02, arg03
257e4     01 16 06 F6 | 	mov	arg03, #1
257e8     00 18 06 F6 | 	mov	arg04, #0
257ec     01 1A 06 F6 | 	mov	arg05, #1
257f0     0A 00 00 FF 
257f4     DB E5 05 F1 | 	add	objptr, ##5595
257f8     18 2C 62 FD | 	getqx	local04
257fc     13 2D 02 F1 | 	add	local04, local01
25800     16 13 02 F1 | 	add	arg01, local04
25804     9C 1D B0 FD | 	call	#_psram_spin2_fill
25808     0B 00 00 FF 
2580c     CC E4 85 F1 | 	sub	objptr, ##5836
25810                 | LR__2840
25810     A7 F0 03 F6 | 	mov	ptra, fp
25814     B2 00 A0 FD | 	call	#popregs_
25818                 | _hg010b_spin2_putpixel_ret
25818     2D 00 64 FD | 	ret
2581c                 | 
2581c                 | ' 
2581c                 | ' pub putpixel2(x,y,c)
2581c                 | _hg010b_spin2_putpixel2
2581c     02 4A 05 F6 | 	mov	COUNT_, #2
25820     A8 00 A0 FD | 	call	#pushregs_
25824     DD E4 05 F1 | 	add	objptr, #221
25828     F2 26 02 FB | 	rdlong	local01, objptr
2582c     14 E4 05 F1 | 	add	objptr, #20
25830     F2 1A 02 FB | 	rdlong	arg05, objptr
25834     02 1A 66 F0 | 	shl	arg05, #2
25838     0A 1B 02 FD | 	qmul	arg05, arg02
2583c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
2583c     0B 15 02 F6 | 	mov	arg02, arg03
25840     01 16 06 F6 | 	mov	arg03, #1
25844     00 18 06 F6 | 	mov	arg04, #0
25848     01 1A 06 F6 | 	mov	arg05, #1
2584c     0A 00 00 FF 
25850     DB E5 05 F1 | 	add	objptr, ##5595
25854     18 28 62 FD | 	getqx	local02
25858     09 29 02 F1 | 	add	local02, arg01
2585c     14 27 02 F1 | 	add	local01, local02
25860     13 13 02 F6 | 	mov	arg01, local01
25864     3C 1D B0 FD | 	call	#_psram_spin2_fill
25868     0B 00 00 FF 
2586c     CC E4 85 F1 | 	sub	objptr, ##5836
25870     A7 F0 03 F6 | 	mov	ptra, fp
25874     B2 00 A0 FD | 	call	#popregs_
25878                 | _hg010b_spin2_putpixel2_ret
25878     2D 00 64 FD | 	ret
2587c                 | 
2587c                 | ' 
2587c                 | ' pub getpixel2(x,y): c 
2587c                 | _hg010b_spin2_getpixel2
2587c     02 4A 05 F6 | 	mov	COUNT_, #2
25880     A8 00 A0 FD | 	call	#pushregs_
25884     0C F0 07 F1 | 	add	ptra, #12
25888     04 4E 05 F1 | 	add	fp, #4
2588c     A7 12 62 FC | 	wrlong	arg01, fp
25890     04 4E 05 F1 | 	add	fp, #4
25894     A7 14 62 FC | 	wrlong	arg02, fp
25898     08 4E 85 F1 | 	sub	fp, #8
2589c     A7 00 68 FC | 	wrlong	#0, fp
258a0     A7 12 02 F6 | 	mov	arg01, fp
258a4     DD E4 05 F1 | 	add	objptr, #221
258a8     F2 14 02 FB | 	rdlong	arg02, objptr
258ac     14 E4 05 F1 | 	add	objptr, #20
258b0     F2 16 02 FB | 	rdlong	arg03, objptr
258b4     02 16 66 F0 | 	shl	arg03, #2
258b8     08 4E 05 F1 | 	add	fp, #8
258bc     A7 FA 01 FB | 	rdlong	result1, fp
258c0     FD 16 02 FD | 	qmul	arg03, result1
258c4                 | ' 
258c4                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
258c4     04 4E 85 F1 | 	sub	fp, #4
258c8     A7 26 02 FB | 	rdlong	local01, fp
258cc     04 4E 85 F1 | 	sub	fp, #4
258d0     01 16 06 F6 | 	mov	arg03, #1
258d4     0A 00 00 FF 
258d8     DB E5 05 F1 | 	add	objptr, ##5595
258dc     18 28 62 FD | 	getqx	local02
258e0     13 29 02 F1 | 	add	local02, local01
258e4     14 15 02 F1 | 	add	arg02, local02
258e8     80 1B B0 FD | 	call	#_psram_spin2_read1
258ec     0B 00 00 FF 
258f0     CC E4 85 F1 | 	sub	objptr, ##5836
258f4                 | ' return c
258f4     A7 FA 01 FB | 	rdlong	result1, fp
258f8     A7 F0 03 F6 | 	mov	ptra, fp
258fc     B2 00 A0 FD | 	call	#popregs_
25900                 | _hg010b_spin2_getpixel2_ret
25900     2D 00 64 FD | 	ret
25904                 | 
25904                 | '   
25904                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
25904                 | ' 
25904                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
25904                 | _hg010b_spin2_fastline
25904     02 4A 05 F6 | 	mov	COUNT_, #2
25908     A8 00 A0 FD | 	call	#pushregs_
2590c     09 27 02 F6 | 	mov	local01, arg01
25910     0A 29 02 F6 | 	mov	local02, arg02
25914                 | ' 
25914                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
25914     00 16 56 F2 | 	cmps	arg03, #0 wc
25918     F4 00 90 CD |  if_b	jmp	#LR__2850
2591c     01 00 00 FF 
25920     2A E4 05 F1 | 	add	objptr, ##554
25924     F2 1A 02 FB | 	rdlong	arg05, objptr
25928     01 00 00 FF 
2592c     2A E4 85 F1 | 	sub	objptr, ##554
25930     0D 17 52 F2 | 	cmps	arg03, arg05 wc
25934     D8 00 90 3D |  if_ae	jmp	#LR__2850
25938     00 26 56 F2 | 	cmps	local01, #0 wc
2593c     00 28 56 C2 |  if_b	cmps	local02, #0 wc
25940     CC 00 90 CD |  if_b	jmp	#LR__2850
25944     01 00 00 FF 
25948     26 E4 05 F1 | 	add	objptr, ##550
2594c     F2 1A 02 FB | 	rdlong	arg05, objptr
25950     01 00 00 FF 
25954     26 E4 85 F1 | 	sub	objptr, ##550
25958     0D 27 5A F2 | 	cmps	local01, arg05 wcz
2595c     01 00 00 1F 
25960     26 E4 05 11 |  if_a	add	objptr, ##550
25964     F2 12 02 1B |  if_a	rdlong	arg01, objptr
25968     01 00 00 1F 
2596c     26 E4 85 11 |  if_a	sub	objptr, ##550
25970     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
25974                 | '   return
25974     98 00 90 1D |  if_a	jmp	#LR__2850
25978     14 27 5A F2 | 	cmps	local01, local02 wcz
2597c     13 1B 02 16 |  if_a	mov	arg05, local01
25980     14 27 02 16 |  if_a	mov	local01, local02
25984     0D 29 02 16 |  if_a	mov	local02, arg05
25988     00 26 56 F2 | 	cmps	local01, #0 wc
2598c     00 26 06 C6 |  if_b	mov	local01, #0
25990     01 00 00 FF 
25994     26 E4 05 F1 | 	add	objptr, ##550
25998     F2 1A 02 FB | 	rdlong	arg05, objptr
2599c     01 00 00 FF 
259a0     26 E4 85 F1 | 	sub	objptr, ##550
259a4     0D 29 52 F2 | 	cmps	local02, arg05 wc
259a8     01 00 00 3F 
259ac     26 E4 05 31 |  if_ae	add	objptr, ##550
259b0     F2 28 02 3B |  if_ae	rdlong	local02, objptr
259b4     01 00 00 3F 
259b8     26 E4 85 31 |  if_ae	sub	objptr, ##550
259bc     DD E4 05 F1 | 	add	objptr, #221
259c0     F2 12 02 FB | 	rdlong	arg01, objptr
259c4     14 E4 05 F1 | 	add	objptr, #20
259c8     F2 1A 02 FB | 	rdlong	arg05, objptr
259cc     02 1A 66 F0 | 	shl	arg05, #2
259d0     0B 1B 02 FD | 	qmul	arg05, arg03
259d4                 | ' if x1>x2
259d4                 | '   x1,x2:=x2,x1
259d4                 | ' if x1<0 
259d4                 | '   x1:=0
259d4                 | ' if x2>=xres
259d4                 | '   x2:=xres-1  
259d4     01 28 86 31 |  if_ae	sub	local02, #1
259d8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
259d8     01 16 06 F6 | 	mov	arg03, #1
259dc     14 17 02 F1 | 	add	arg03, local02
259e0     13 17 82 F1 | 	sub	arg03, local01
259e4     0C 15 02 F6 | 	mov	arg02, arg04
259e8     00 18 06 F6 | 	mov	arg04, #0
259ec     01 1A 06 F6 | 	mov	arg05, #1
259f0     0A 00 00 FF 
259f4     DB E5 05 F1 | 	add	objptr, ##5595
259f8     18 28 62 FD | 	getqx	local02
259fc     13 29 02 F1 | 	add	local02, local01
25a00     14 13 02 F1 | 	add	arg01, local02
25a04     9C 1B B0 FD | 	call	#_psram_spin2_fill
25a08     0B 00 00 FF 
25a0c     CC E4 85 F1 | 	sub	objptr, ##5836
25a10                 | LR__2850
25a10     A7 F0 03 F6 | 	mov	ptra, fp
25a14     B2 00 A0 FD | 	call	#popregs_
25a18                 | _hg010b_spin2_fastline_ret
25a18     2D 00 64 FD | 	ret
25a1c                 | 
25a1c                 | ' 
25a1c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
25a1c                 | _hg010b_spin2_draw
25a1c     0E 4A 05 F6 | 	mov	COUNT_, #14
25a20     A8 00 A0 FD | 	call	#pushregs_
25a24     09 27 02 F6 | 	mov	local01, arg01
25a28     0A 29 02 F6 | 	mov	local02, arg02
25a2c     0B 2B 02 F6 | 	mov	local03, arg03
25a30     0C 2D 02 F6 | 	mov	local04, arg04
25a34     0D 2F 02 F6 | 	mov	local05, arg05
25a38                 | ' 
25a38                 | ' if (y1==y2)
25a38     16 29 0A F2 | 	cmp	local02, local04 wz
25a3c     18 00 90 5D |  if_ne	jmp	#LR__2860
25a40                 | '   fastline(x1,x2,y1,c)
25a40     13 13 02 F6 | 	mov	arg01, local01
25a44     15 15 02 F6 | 	mov	arg02, local03
25a48     14 17 02 F6 | 	mov	arg03, local02
25a4c     17 19 02 F6 | 	mov	arg04, local05
25a50     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
25a54     F8 00 90 FD | 	jmp	#LR__2866
25a58                 | LR__2860
25a58                 | ' else  
25a58                 | '   x:=x1
25a58     13 31 02 F6 | 	mov	local06, local01
25a5c                 | '   y:=y1
25a5c     14 33 02 F6 | 	mov	local07, local02
25a60                 | ' 
25a60                 | '   if (x1<x2) 
25a60     15 27 52 F2 | 	cmps	local01, local03 wc
25a64                 | '     xi:=1
25a64     01 34 06 C6 |  if_b	mov	local08, #1
25a68                 | '     dx:=x2-x1
25a68     15 37 02 C6 |  if_b	mov	local09, local03
25a6c     13 37 82 C1 |  if_b	sub	local09, local01
25a70                 | '   else
25a70                 | '     xi:=-1
25a70     01 34 66 36 |  if_ae	neg	local08, #1
25a74                 | '     dx:=x1-x2
25a74     15 27 82 31 |  if_ae	sub	local01, local03
25a78     13 37 02 36 |  if_ae	mov	local09, local01
25a7c                 | '   
25a7c                 | '   if (y1<y2) 
25a7c     16 29 52 F2 | 	cmps	local02, local04 wc
25a80                 | '     yi:=1
25a80     01 38 06 C6 |  if_b	mov	local10, #1
25a84                 | '     dy:=y2-y1
25a84     16 3B 02 C6 |  if_b	mov	local11, local04
25a88     14 3B 82 C1 |  if_b	sub	local11, local02
25a8c                 | '   else
25a8c                 | '     yi:=-1
25a8c     01 38 66 36 |  if_ae	neg	local10, #1
25a90                 | '     dy:=y1-y2
25a90     16 29 82 31 |  if_ae	sub	local02, local04
25a94     14 3B 02 36 |  if_ae	mov	local11, local02
25a98                 | ' 
25a98                 | '   putpixel(x,y,c)
25a98     17 17 02 F6 | 	mov	arg03, local05
25a9c     18 13 02 F6 | 	mov	arg01, local06
25aa0     19 15 02 F6 | 	mov	arg02, local07
25aa4     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
25aa8                 | ' 
25aa8                 | '   if (dx>dy)
25aa8     1D 37 5A F2 | 	cmps	local09, local11 wcz
25aac     50 00 90 ED |  if_be	jmp	#LR__2862
25ab0                 | '     ai:=(dy-dx)*2
25ab0     1D 3D 02 F6 | 	mov	local12, local11
25ab4     1B 3D 82 F1 | 	sub	local12, local09
25ab8     01 3C 66 F0 | 	shl	local12, #1
25abc                 | '     bi:=dy*2
25abc     01 3A 66 F0 | 	shl	local11, #1
25ac0     1D 3F 02 F6 | 	mov	local13, local11
25ac4                 | '     d:= bi-dx
25ac4     1F 41 02 F6 | 	mov	local14, local13
25ac8     1B 41 82 F1 | 	sub	local14, local09
25acc                 | '     repeat while (x<>x2) 
25acc                 | LR__2861
25acc     15 31 0A F2 | 	cmp	local06, local03 wz
25ad0     7C 00 90 AD |  if_e	jmp	#LR__2865
25ad4                 | '       if (d>=0) 
25ad4     00 40 56 F2 | 	cmps	local14, #0 wc
25ad8                 | '         x+=xi
25ad8     1A 31 02 31 |  if_ae	add	local06, local08
25adc                 | '         y+=yi
25adc     1C 33 02 31 |  if_ae	add	local07, local10
25ae0                 | '         d+=ai
25ae0     1E 41 02 31 |  if_ae	add	local14, local12
25ae4                 | '       else
25ae4                 | '         d+=bi
25ae4     1F 41 02 C1 |  if_b	add	local14, local13
25ae8                 | '         x+=xi
25ae8     1A 31 02 C1 |  if_b	add	local06, local08
25aec                 | '       putpixel(x,y,c)
25aec     18 13 02 F6 | 	mov	arg01, local06
25af0     19 15 02 F6 | 	mov	arg02, local07
25af4     17 17 02 F6 | 	mov	arg03, local05
25af8     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
25afc     CC FF 9F FD | 	jmp	#LR__2861
25b00                 | LR__2862
25b00                 | '   else
25b00                 | '     ai:=(dx-dy)*2
25b00     1B 3D 02 F6 | 	mov	local12, local09
25b04     1D 3D 82 F1 | 	sub	local12, local11
25b08     01 3C 66 F0 | 	shl	local12, #1
25b0c                 | '     bi:=dx*2
25b0c     01 36 66 F0 | 	shl	local09, #1
25b10     1B 3F 02 F6 | 	mov	local13, local09
25b14                 | '     d:=bi-dy
25b14     1F 41 02 F6 | 	mov	local14, local13
25b18     1D 41 82 F1 | 	sub	local14, local11
25b1c                 | '     repeat while (y<>y2)
25b1c                 | LR__2863
25b1c     16 33 0A F2 | 	cmp	local07, local04 wz
25b20     2C 00 90 AD |  if_e	jmp	#LR__2864
25b24                 | '       if (d>=0)
25b24     00 40 56 F2 | 	cmps	local14, #0 wc
25b28                 | '         x+=xi
25b28     1A 31 02 31 |  if_ae	add	local06, local08
25b2c                 | '         y+=yi
25b2c     1C 33 02 31 |  if_ae	add	local07, local10
25b30                 | '         d+=ai
25b30     1E 41 02 31 |  if_ae	add	local14, local12
25b34                 | '       else
25b34                 | '         d+=bi
25b34     1F 41 02 C1 |  if_b	add	local14, local13
25b38                 | '         y+=yi
25b38     1C 33 02 C1 |  if_b	add	local07, local10
25b3c                 | '       putpixel(x, y,c)
25b3c     18 13 02 F6 | 	mov	arg01, local06
25b40     19 15 02 F6 | 	mov	arg02, local07
25b44     17 17 02 F6 | 	mov	arg03, local05
25b48     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
25b4c     CC FF 9F FD | 	jmp	#LR__2863
25b50                 | LR__2864
25b50                 | LR__2865
25b50                 | LR__2866
25b50     A7 F0 03 F6 | 	mov	ptra, fp
25b54     B2 00 A0 FD | 	call	#popregs_
25b58                 | _hg010b_spin2_draw_ret
25b58     2D 00 64 FD | 	ret
25b5c                 | 
25b5c                 | '  
25b5c                 | ' pub fillpush(val) 
25b5c                 | _hg010b_spin2_fillpush
25b5c                 | ' fillstack[fillptr]:=val
25b5c     0B 00 00 FF 
25b60     BA E4 05 F1 | 	add	objptr, ##5818
25b64     F2 00 02 FB | 	rdlong	_var01, objptr
25b68     02 00 66 F0 | 	shl	_var01, #2
25b6c     0A 00 00 FF 
25b70     00 E4 85 F1 | 	sub	objptr, ##5120
25b74     F2 00 02 F1 | 	add	_var01, objptr
25b78     00 13 62 FC | 	wrlong	arg01, _var01
25b7c                 | ' fillptr+=1   
25b7c     0A 00 00 FF 
25b80     00 E4 05 F1 | 	add	objptr, ##5120
25b84     F2 00 02 FB | 	rdlong	_var01, objptr
25b88     01 00 06 F1 | 	add	_var01, #1
25b8c     F2 00 62 FC | 	wrlong	_var01, objptr
25b90     0B 00 00 FF 
25b94     BA E4 85 F1 | 	sub	objptr, ##5818
25b98                 | _hg010b_spin2_fillpush_ret
25b98     2D 00 64 FD | 	ret
25b9c                 | 
25b9c                 | ' 
25b9c                 | '     
25b9c                 | ' pub fillpop() : val
25b9c                 | _hg010b_spin2_fillpop
25b9c                 | ' 
25b9c                 | ' fillptr-=1
25b9c     0B 00 00 FF 
25ba0     BA E4 05 F1 | 	add	objptr, ##5818
25ba4     F2 FA 01 FB | 	rdlong	result1, objptr
25ba8     01 FA 85 F1 | 	sub	result1, #1
25bac     F2 FA 61 FC | 	wrlong	result1, objptr
25bb0                 | ' if fillptr<0
25bb0     0B 00 00 FF 
25bb4     BA E4 85 F1 | 	sub	objptr, ##5818
25bb8     00 FA 55 F2 | 	cmps	result1, #0 wc
25bbc                 | '   fillptr:=0
25bbc     0B 00 00 CF 
25bc0     BA E4 05 C1 |  if_b	add	objptr, ##5818
25bc4     F2 00 68 CC |  if_b	wrlong	#0, objptr
25bc8     0B 00 00 CF 
25bcc     BA E4 85 C1 |  if_b	sub	objptr, ##5818
25bd0                 | '   val:=-12345
25bd0     E7 FF 7F CF 
25bd4     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
25bd8     28 00 90 CD |  if_b	jmp	#LR__2870
25bdc                 | ' else 
25bdc                 | '   val:=fillstack[fillptr]
25bdc     0B 00 00 FF 
25be0     BA E4 05 F1 | 	add	objptr, ##5818
25be4     F2 00 02 FB | 	rdlong	_var01, objptr
25be8     02 00 66 F0 | 	shl	_var01, #2
25bec     0A 00 00 FF 
25bf0     00 E4 85 F1 | 	sub	objptr, ##5120
25bf4     F2 00 02 F1 | 	add	_var01, objptr
25bf8     00 01 02 FB | 	rdlong	_var01, _var01
25bfc     01 00 00 FF 
25c00     BA E4 85 F1 | 	sub	objptr, ##698
25c04                 | LR__2870
25c04                 | ' return val
25c04     00 FB 01 F6 | 	mov	result1, _var01
25c08                 | _hg010b_spin2_fillpop_ret
25c08     2D 00 64 FD | 	ret
25c0c                 | 
25c0c                 | ' 
25c0c                 | '       
25c0c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
25c0c                 | _hg010b_spin2_fill
25c0c     0B 4A 05 F6 | 	mov	COUNT_, #11
25c10     A8 00 A0 FD | 	call	#pushregs_
25c14                 | ' 
25c14                 | ' newcolor:=newcolor & 255
25c14     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
25c18                 | ' oldcolor:=oldcolor & 255
25c18     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
25c1c                 | ' 
25c1c                 | ' if (oldcolor == newcolor) 
25c1c     13 29 0A F2 | 	cmp	local02, local01 wz
25c20                 | '   return
25c20     70 02 90 AD |  if_e	jmp	#LR__2889
25c24                 | ' 
25c24                 | ' fillptr:=0
25c24     0B 00 00 FF 
25c28     BA E4 05 F1 | 	add	objptr, ##5818
25c2c     F2 00 68 FC | 	wrlong	#0, objptr
25c30                 | ' fillmax:=0
25c30     04 E4 05 F1 | 	add	objptr, #4
25c34     F2 00 68 FC | 	wrlong	#0, objptr
25c38     0B 00 00 FF 
25c3c     BE E4 85 F1 | 	sub	objptr, ##5822
25c40                 | ' fillpush(x)
25c40     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
25c44                 | ' fillpush(y)
25c44     0A 13 02 F6 | 	mov	arg01, arg02
25c48     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
25c4c                 | ' y:=fillpop()
25c4c     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
25c50     FD 2A 02 F6 | 	mov	local03, result1
25c54                 | ' x:=fillpop()
25c54     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
25c58     FD 2C 02 F6 | 	mov	local04, result1
25c5c                 | ' 'pinhigh(38)
25c5c                 | ' repeat while (x>-1)       
25c5c                 | LR__2880
25c5c     00 2C 56 F2 | 	cmps	local04, #0 wc
25c60     30 02 90 CD |  if_b	jmp	#LR__2888
25c64                 | '  ' pintoggle(39)
25c64                 | '   x1 := x
25c64     16 2F 02 F6 | 	mov	local05, local04
25c68                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
25c68                 | LR__2881
25c68     00 30 06 F6 | 	mov	local06, #0
25c6c     00 32 06 F6 | 	mov	local07, #0
25c70     00 2E 56 F2 | 	cmps	local05, #0 wc
25c74     01 32 66 36 |  if_ae	neg	local07, #1
25c78     00 32 0E F2 | 	cmp	local07, #0 wz
25c7c     00 30 26 56 |  if_ne	not	local06, #0
25c80     00 34 06 F6 | 	mov	local08, #0
25c84     00 36 06 F6 | 	mov	local09, #0
25c88     15 15 02 F6 | 	mov	arg02, local03
25c8c     17 13 02 F6 | 	mov	arg01, local05
25c90     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
25c94     14 FB 09 F2 | 	cmp	result1, local02 wz
25c98     00 36 26 A6 |  if_e	not	local09, #0
25c9c     00 36 0E F2 | 	cmp	local09, #0 wz
25ca0     00 34 26 56 |  if_ne	not	local08, #0
25ca4     1A 31 CA F7 | 	test	local06, local08 wz
25ca8                 | '     x1--
25ca8     01 2E 86 51 |  if_ne	sub	local05, #1
25cac     B8 FF 9F 5D |  if_ne	jmp	#LR__2881
25cb0                 | '   x1++
25cb0     01 2E 06 F1 | 	add	local05, #1
25cb4                 | '   spanabove := 0
25cb4     00 38 06 F6 | 	mov	local10, #0
25cb8                 | '   spanbelow := 0
25cb8     00 3A 06 F6 | 	mov	local11, #0
25cbc                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
25cbc                 | LR__2882
25cbc     00 30 06 F6 | 	mov	local06, #0
25cc0     02 00 00 FF 
25cc4     00 2E 56 F2 | 	cmps	local05, ##1024 wc
25cc8     00 30 26 C6 |  if_b	not	local06, #0
25ccc     00 34 06 F6 | 	mov	local08, #0
25cd0     00 36 06 F6 | 	mov	local09, #0
25cd4     15 15 02 F6 | 	mov	arg02, local03
25cd8     17 13 02 F6 | 	mov	arg01, local05
25cdc     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
25ce0     14 FB 09 F2 | 	cmp	result1, local02 wz
25ce4     00 36 26 A6 |  if_e	not	local09, #0
25ce8     00 36 0E F2 | 	cmp	local09, #0 wz
25cec     00 34 26 56 |  if_ne	not	local08, #0
25cf0     1A 31 CA F7 | 	test	local06, local08 wz
25cf4     88 01 90 AD |  if_e	jmp	#LR__2887
25cf8                 | '     putpixel2 (x1,y, newcolor & 255)
25cf8     13 17 E2 F8 | 	getbyte	arg03, local01, #0
25cfc     17 13 02 F6 | 	mov	arg01, local05
25d00     15 15 02 F6 | 	mov	arg02, local03
25d04     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
25d08                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
25d08     00 30 06 F6 | 	mov	local06, #0
25d0c     00 32 06 F6 | 	mov	local07, #0
25d10     00 38 0E F2 | 	cmp	local10, #0 wz
25d14     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
25d18     01 32 66 26 |  if_nc_and_z	neg	local07, #1
25d1c     00 32 0E F2 | 	cmp	local07, #0 wz
25d20     00 30 26 56 |  if_ne	not	local06, #0
25d24     00 34 06 F6 | 	mov	local08, #0
25d28     00 36 06 F6 | 	mov	local09, #0
25d2c     15 15 02 F6 | 	mov	arg02, local03
25d30     01 14 86 F1 | 	sub	arg02, #1
25d34     17 13 02 F6 | 	mov	arg01, local05
25d38     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
25d3c     14 FB 09 F2 | 	cmp	result1, local02 wz
25d40     00 36 26 A6 |  if_e	not	local09, #0
25d44     00 36 0E F2 | 	cmp	local09, #0 wz
25d48     00 34 26 56 |  if_ne	not	local08, #0
25d4c     1A 31 CA F7 | 	test	local06, local08 wz
25d50     1C 00 90 AD |  if_e	jmp	#LR__2883
25d54                 | '       fillpush(x1)
25d54     17 13 02 F6 | 	mov	arg01, local05
25d58     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
25d5c                 | '       fillpush(y-1)
25d5c     15 13 02 F6 | 	mov	arg01, local03
25d60     01 12 86 F1 | 	sub	arg01, #1
25d64     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
25d68                 | '       spanabove := 1 
25d68     01 38 06 F6 | 	mov	local10, #1
25d6c     4C 00 90 FD | 	jmp	#LR__2884
25d70                 | LR__2883
25d70                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
25d70     00 30 06 F6 | 	mov	local06, #0
25d74     00 32 06 F6 | 	mov	local07, #0
25d78     00 38 0E F2 | 	cmp	local10, #0 wz
25d7c     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
25d80     01 32 66 16 |  if_a	neg	local07, #1
25d84     00 32 0E F2 | 	cmp	local07, #0 wz
25d88     00 30 26 56 |  if_ne	not	local06, #0
25d8c     00 34 06 F6 | 	mov	local08, #0
25d90     00 36 06 F6 | 	mov	local09, #0
25d94     15 15 02 F6 | 	mov	arg02, local03
25d98     01 14 86 F1 | 	sub	arg02, #1
25d9c     17 13 02 F6 | 	mov	arg01, local05
25da0     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
25da4     14 FB 09 F2 | 	cmp	result1, local02 wz
25da8     00 36 26 56 |  if_ne	not	local09, #0
25dac     00 36 0E F2 | 	cmp	local09, #0 wz
25db0     00 34 26 56 |  if_ne	not	local08, #0
25db4     1A 31 CA F7 | 	test	local06, local08 wz
25db8                 | '       spanabove := 0 
25db8     00 38 06 56 |  if_ne	mov	local10, #0
25dbc                 | LR__2884
25dbc                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
25dbc     00 30 06 F6 | 	mov	local06, #0
25dc0     00 32 06 F6 | 	mov	local07, #0
25dc4     00 3A 0E F2 | 	cmp	local11, #0 wz
25dc8     01 00 00 AF 
25dcc     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
25dd0     01 32 66 86 |  if_c_and_z	neg	local07, #1
25dd4     00 32 0E F2 | 	cmp	local07, #0 wz
25dd8     00 30 26 56 |  if_ne	not	local06, #0
25ddc     00 34 06 F6 | 	mov	local08, #0
25de0     00 36 06 F6 | 	mov	local09, #0
25de4     15 15 02 F6 | 	mov	arg02, local03
25de8     01 14 06 F1 | 	add	arg02, #1
25dec     17 13 02 F6 | 	mov	arg01, local05
25df0     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
25df4     14 FB 09 F2 | 	cmp	result1, local02 wz
25df8     00 36 26 A6 |  if_e	not	local09, #0
25dfc     00 36 0E F2 | 	cmp	local09, #0 wz
25e00     00 34 26 56 |  if_ne	not	local08, #0
25e04     1A 31 CA F7 | 	test	local06, local08 wz
25e08     1C 00 90 AD |  if_e	jmp	#LR__2885
25e0c                 | '       fillpush(x1)
25e0c     17 13 02 F6 | 	mov	arg01, local05
25e10     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
25e14                 | '       fillpush(y + 1)
25e14     15 13 02 F6 | 	mov	arg01, local03
25e18     01 12 06 F1 | 	add	arg01, #1
25e1c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
25e20                 | '       spanBelow := 1
25e20     01 3A 06 F6 | 	mov	local11, #1
25e24     50 00 90 FD | 	jmp	#LR__2886
25e28                 | LR__2885
25e28                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
25e28     00 30 06 F6 | 	mov	local06, #0
25e2c     00 32 06 F6 | 	mov	local07, #0
25e30     00 3A 0E F2 | 	cmp	local11, #0 wz
25e34     01 00 00 5F 
25e38     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
25e3c     01 32 66 46 |  if_c_and_nz	neg	local07, #1
25e40     00 32 0E F2 | 	cmp	local07, #0 wz
25e44     00 30 26 56 |  if_ne	not	local06, #0
25e48     00 34 06 F6 | 	mov	local08, #0
25e4c     00 36 06 F6 | 	mov	local09, #0
25e50     15 15 02 F6 | 	mov	arg02, local03
25e54     01 14 06 F1 | 	add	arg02, #1
25e58     17 13 02 F6 | 	mov	arg01, local05
25e5c     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
25e60     14 FB 09 F2 | 	cmp	result1, local02 wz
25e64     00 36 26 56 |  if_ne	not	local09, #0
25e68     00 36 0E F2 | 	cmp	local09, #0 wz
25e6c     00 34 26 56 |  if_ne	not	local08, #0
25e70     1A 31 CA F7 | 	test	local06, local08 wz
25e74                 | '       spanbelow := 0
25e74     00 3A 06 56 |  if_ne	mov	local11, #0
25e78                 | LR__2886
25e78                 | '     x1++
25e78     01 2E 06 F1 | 	add	local05, #1
25e7c     3C FE 9F FD | 	jmp	#LR__2882
25e80                 | LR__2887
25e80                 | '   y:=fillpop()
25e80     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
25e84     FD 2A 02 F6 | 	mov	local03, result1
25e88                 | '   x:=fillpop()
25e88     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
25e8c     FD 2C 02 F6 | 	mov	local04, result1
25e90     C8 FD 9F FD | 	jmp	#LR__2880
25e94                 | LR__2888
25e94                 | LR__2889
25e94     A7 F0 03 F6 | 	mov	ptra, fp
25e98     B2 00 A0 FD | 	call	#popregs_
25e9c                 | _hg010b_spin2_fill_ret
25e9c     2D 00 64 FD | 	ret
25ea0                 | 
25ea0                 | ' 'pinlow(38)    
25ea0                 | ' 
25ea0                 | ' '-- A filled circle -----------------------------------------------------
25ea0                 | ' 
25ea0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
25ea0                 | _hg010b_spin2_fcircle
25ea0     08 4A 05 F6 | 	mov	COUNT_, #8
25ea4     A8 00 A0 FD | 	call	#pushregs_
25ea8     0B 27 02 F6 | 	mov	local01, arg03
25eac     FF FF 7F FF 
25eb0     FE 27 06 FD | 	qmul	local01, ##-2
25eb4     09 29 02 F6 | 	mov	local02, arg01
25eb8     0A 2B 02 F6 | 	mov	local03, arg02
25ebc     0C 2D 02 F6 | 	mov	local04, arg04
25ec0                 | ' 
25ec0                 | ' d:=5-4*r
25ec0     13 19 02 F6 | 	mov	arg04, local01
25ec4     02 18 66 F0 | 	shl	arg04, #2
25ec8     05 2E 06 F6 | 	mov	local05, #5
25ecc     0C 2F 82 F1 | 	sub	local05, arg04
25ed0                 | ' x:=0
25ed0     00 30 06 F6 | 	mov	local06, #0
25ed4                 | ' y:=r
25ed4                 | ' da:=(-2*r+5)*4
25ed4                 | ' db:=3*4
25ed4     0C 32 06 F6 | 	mov	local07, #12
25ed8                 | ' repeat while (x<=y) 
25ed8     18 34 62 FD | 	getqx	local08
25edc     05 34 06 F1 | 	add	local08, #5
25ee0     02 34 66 F0 | 	shl	local08, #2
25ee4                 | LR__2890
25ee4     13 31 5A F2 | 	cmps	local06, local01 wcz
25ee8     B4 00 90 1D |  if_a	jmp	#LR__2892
25eec                 | '   fastline(x0-x,x0+x,y0-y,c)
25eec     14 13 02 F6 | 	mov	arg01, local02
25ef0     18 13 82 F1 | 	sub	arg01, local06
25ef4     14 15 02 F6 | 	mov	arg02, local02
25ef8     18 15 02 F1 | 	add	arg02, local06
25efc     15 17 02 F6 | 	mov	arg03, local03
25f00     13 17 82 F1 | 	sub	arg03, local01
25f04     16 19 02 F6 | 	mov	arg04, local04
25f08     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
25f0c                 | '   fastline(x0-x,x0+x,y0+y,c)
25f0c     14 13 02 F6 | 	mov	arg01, local02
25f10     18 13 82 F1 | 	sub	arg01, local06
25f14     14 15 02 F6 | 	mov	arg02, local02
25f18     18 15 02 F1 | 	add	arg02, local06
25f1c     15 17 02 F6 | 	mov	arg03, local03
25f20     13 17 02 F1 | 	add	arg03, local01
25f24     16 19 02 F6 | 	mov	arg04, local04
25f28     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
25f2c                 | '   fastline(x0-y,x0+y,y0-x,c)
25f2c     14 13 02 F6 | 	mov	arg01, local02
25f30     13 13 82 F1 | 	sub	arg01, local01
25f34     14 15 02 F6 | 	mov	arg02, local02
25f38     13 15 02 F1 | 	add	arg02, local01
25f3c     15 17 02 F6 | 	mov	arg03, local03
25f40     18 17 82 F1 | 	sub	arg03, local06
25f44     16 19 02 F6 | 	mov	arg04, local04
25f48     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
25f4c                 | '   fastline(x0-y,x0+y,y0+x,c)
25f4c     14 13 02 F6 | 	mov	arg01, local02
25f50     13 13 82 F1 | 	sub	arg01, local01
25f54     14 15 02 F6 | 	mov	arg02, local02
25f58     13 15 02 F1 | 	add	arg02, local01
25f5c     15 17 02 F6 | 	mov	arg03, local03
25f60     18 17 02 F1 | 	add	arg03, local06
25f64     16 19 02 F6 | 	mov	arg04, local04
25f68     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
25f6c                 | '   if d>0 
25f6c     01 2E 56 F2 | 	cmps	local05, #1 wc
25f70     18 00 90 CD |  if_b	jmp	#LR__2891
25f74                 | '     d+=da
25f74     1A 2F 02 F1 | 	add	local05, local08
25f78                 | '     y-=1
25f78     01 26 86 F1 | 	sub	local01, #1
25f7c                 | '     x+=1
25f7c     01 30 06 F1 | 	add	local06, #1
25f80                 | '     da+=4*4
25f80     10 34 06 F1 | 	add	local08, #16
25f84                 | '     db+=2*4
25f84     08 32 06 F1 | 	add	local07, #8
25f88     58 FF 9F FD | 	jmp	#LR__2890
25f8c                 | LR__2891
25f8c                 | '   else
25f8c                 | '     d+=db
25f8c     19 2F 02 F1 | 	add	local05, local07
25f90                 | '     x+=1
25f90     01 30 06 F1 | 	add	local06, #1
25f94                 | '     da+=2*4
25f94     08 34 06 F1 | 	add	local08, #8
25f98                 | '     db+=2*4
25f98     08 32 06 F1 | 	add	local07, #8
25f9c     44 FF 9F FD | 	jmp	#LR__2890
25fa0                 | LR__2892
25fa0     A7 F0 03 F6 | 	mov	ptra, fp
25fa4     B2 00 A0 FD | 	call	#popregs_
25fa8                 | _hg010b_spin2_fcircle_ret
25fa8     2D 00 64 FD | 	ret
25fac                 | 
25fac                 | '  
25fac                 | ' '-- A circle ------------------------------------------------------------ 
25fac                 | '  
25fac                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
25fac                 | _hg010b_spin2_circle
25fac     08 4A 05 F6 | 	mov	COUNT_, #8
25fb0     A8 00 A0 FD | 	call	#pushregs_
25fb4     0B 27 02 F6 | 	mov	local01, arg03
25fb8     FF FF 7F FF 
25fbc     FE 27 06 FD | 	qmul	local01, ##-2
25fc0     09 29 02 F6 | 	mov	local02, arg01
25fc4     0A 2B 02 F6 | 	mov	local03, arg02
25fc8     0C 2D 02 F6 | 	mov	local04, arg04
25fcc                 | ' 
25fcc                 | '  
25fcc                 | ' d:=5-4*r
25fcc     13 19 02 F6 | 	mov	arg04, local01
25fd0     02 18 66 F0 | 	shl	arg04, #2
25fd4     05 2E 06 F6 | 	mov	local05, #5
25fd8     0C 2F 82 F1 | 	sub	local05, arg04
25fdc                 | ' x:=0
25fdc     00 30 06 F6 | 	mov	local06, #0
25fe0                 | ' y:=r
25fe0                 | ' da:=(-2*r+5)*4
25fe0                 | ' db:=3*4
25fe0     0C 32 06 F6 | 	mov	local07, #12
25fe4                 | ' repeat while (x<=y) 
25fe4     18 34 62 FD | 	getqx	local08
25fe8     05 34 06 F1 | 	add	local08, #5
25fec     02 34 66 F0 | 	shl	local08, #2
25ff0                 | LR__2900
25ff0     13 31 5A F2 | 	cmps	local06, local01 wcz
25ff4     F4 00 90 1D |  if_a	jmp	#LR__2902
25ff8                 | '   putpixel(x0-x,y0-y,c)
25ff8     14 13 02 F6 | 	mov	arg01, local02
25ffc     18 13 82 F1 | 	sub	arg01, local06
26000     15 15 02 F6 | 	mov	arg02, local03
26004     13 15 82 F1 | 	sub	arg02, local01
26008     16 17 02 F6 | 	mov	arg03, local04
2600c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
26010                 | '   putpixel(x0-x,y0+y,c)
26010     14 13 02 F6 | 	mov	arg01, local02
26014     18 13 82 F1 | 	sub	arg01, local06
26018     15 15 02 F6 | 	mov	arg02, local03
2601c     13 15 02 F1 | 	add	arg02, local01
26020     16 17 02 F6 | 	mov	arg03, local04
26024     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
26028                 | '   putpixel(x0+x,y0-y,c)
26028     14 13 02 F6 | 	mov	arg01, local02
2602c     18 13 02 F1 | 	add	arg01, local06
26030     15 15 02 F6 | 	mov	arg02, local03
26034     13 15 82 F1 | 	sub	arg02, local01
26038     16 17 02 F6 | 	mov	arg03, local04
2603c     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
26040                 | '   putpixel(x0+x,y0+y,c)
26040     14 13 02 F6 | 	mov	arg01, local02
26044     18 13 02 F1 | 	add	arg01, local06
26048     15 15 02 F6 | 	mov	arg02, local03
2604c     13 15 02 F1 | 	add	arg02, local01
26050     16 17 02 F6 | 	mov	arg03, local04
26054     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
26058                 | '   putpixel(x0-y,y0-x,c)
26058     14 13 02 F6 | 	mov	arg01, local02
2605c     13 13 82 F1 | 	sub	arg01, local01
26060     15 15 02 F6 | 	mov	arg02, local03
26064     18 15 82 F1 | 	sub	arg02, local06
26068     16 17 02 F6 | 	mov	arg03, local04
2606c     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
26070                 | '   putpixel(x0-y,y0+x,c)
26070     14 13 02 F6 | 	mov	arg01, local02
26074     13 13 82 F1 | 	sub	arg01, local01
26078     15 15 02 F6 | 	mov	arg02, local03
2607c     18 15 02 F1 | 	add	arg02, local06
26080     16 17 02 F6 | 	mov	arg03, local04
26084     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
26088                 | '   putpixel(x0+y,y0-x,c)
26088     14 13 02 F6 | 	mov	arg01, local02
2608c     13 13 02 F1 | 	add	arg01, local01
26090     15 15 02 F6 | 	mov	arg02, local03
26094     18 15 82 F1 | 	sub	arg02, local06
26098     16 17 02 F6 | 	mov	arg03, local04
2609c     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
260a0                 | '   putpixel(x0+y,y0+x,c)
260a0     14 13 02 F6 | 	mov	arg01, local02
260a4     13 13 02 F1 | 	add	arg01, local01
260a8     15 15 02 F6 | 	mov	arg02, local03
260ac     18 15 02 F1 | 	add	arg02, local06
260b0     16 17 02 F6 | 	mov	arg03, local04
260b4     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
260b8                 | '   if d>0 
260b8     01 2E 56 F2 | 	cmps	local05, #1 wc
260bc     18 00 90 CD |  if_b	jmp	#LR__2901
260c0                 | '     d+=da
260c0     1A 2F 02 F1 | 	add	local05, local08
260c4                 | '     y-=1
260c4     01 26 86 F1 | 	sub	local01, #1
260c8                 | '     x+=1
260c8     01 30 06 F1 | 	add	local06, #1
260cc                 | '     da+=4*4
260cc     10 34 06 F1 | 	add	local08, #16
260d0                 | '     db+=2*4
260d0     08 32 06 F1 | 	add	local07, #8
260d4     18 FF 9F FD | 	jmp	#LR__2900
260d8                 | LR__2901
260d8                 | '   else
260d8                 | '     d+=db
260d8     19 2F 02 F1 | 	add	local05, local07
260dc                 | '     x+=1
260dc     01 30 06 F1 | 	add	local06, #1
260e0                 | '     da+=2*4
260e0     08 34 06 F1 | 	add	local08, #8
260e4                 | '     db+=2*4
260e4     08 32 06 F1 | 	add	local07, #8
260e8     04 FF 9F FD | 	jmp	#LR__2900
260ec                 | LR__2902
260ec     A7 F0 03 F6 | 	mov	ptra, fp
260f0     B2 00 A0 FD | 	call	#popregs_
260f4                 | _hg010b_spin2_circle_ret
260f4     2D 00 64 FD | 	ret
260f8                 | 
260f8                 | '     
260f8                 | ' '-- A frame (an empty rectangle) ---------------------------------------
260f8                 | ' 
260f8                 | ' pub frame(x1,y1,x2,y2,c)
260f8                 | _hg010b_spin2_frame
260f8     05 4A 05 F6 | 	mov	COUNT_, #5
260fc     A8 00 A0 FD | 	call	#pushregs_
26100     09 27 02 F6 | 	mov	local01, arg01
26104     0A 29 02 F6 | 	mov	local02, arg02
26108     0B 2B 02 F6 | 	mov	local03, arg03
2610c     0C 2D 02 F6 | 	mov	local04, arg04
26110     0D 2F 02 F6 | 	mov	local05, arg05
26114                 | ' 
26114                 | ' fastline(x1,x2,y1,c)
26114     13 13 02 F6 | 	mov	arg01, local01
26118     15 15 02 F6 | 	mov	arg02, local03
2611c     14 17 02 F6 | 	mov	arg03, local02
26120     17 19 02 F6 | 	mov	arg04, local05
26124     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
26128                 | ' fastline(x1,x2,y2,c)
26128     13 13 02 F6 | 	mov	arg01, local01
2612c     15 15 02 F6 | 	mov	arg02, local03
26130     16 17 02 F6 | 	mov	arg03, local04
26134     17 19 02 F6 | 	mov	arg04, local05
26138     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
2613c                 | ' line(x1,y1,x1,y2,c)
2613c     13 13 02 F6 | 	mov	arg01, local01
26140     14 15 02 F6 | 	mov	arg02, local02
26144     13 17 02 F6 | 	mov	arg03, local01
26148     16 19 02 F6 | 	mov	arg04, local04
2614c     17 1B 02 F6 | 	mov	arg05, local05
26150                 | ' draw(x1,y1,x2,y2,c)
26150     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
26154                 | ' line(x2,y1,x2,y2,c)
26154     15 13 02 F6 | 	mov	arg01, local03
26158     14 15 02 F6 | 	mov	arg02, local02
2615c     15 17 02 F6 | 	mov	arg03, local03
26160     16 19 02 F6 | 	mov	arg04, local04
26164     17 1B 02 F6 | 	mov	arg05, local05
26168                 | ' draw(x1,y1,x2,y2,c)
26168     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
2616c     A7 F0 03 F6 | 	mov	ptra, fp
26170     B2 00 A0 FD | 	call	#popregs_
26174                 | _hg010b_spin2_frame_ret
26174     2D 00 64 FD | 	ret
26178                 | 
26178                 | ' 
26178                 | ' '-- A box (a filled rectangle) ----------------------------------------
26178                 | ' 
26178                 | ' pub box(x1,y1,x2,y2,c) |yy
26178                 | _hg010b_spin2_box
26178     06 4A 05 F6 | 	mov	COUNT_, #6
2617c     A8 00 A0 FD | 	call	#pushregs_
26180     09 27 02 F6 | 	mov	local01, arg01
26184     0A 29 02 F6 | 	mov	local02, arg02
26188     0B 2B 02 F6 | 	mov	local03, arg03
2618c     0C 2D 02 F6 | 	mov	local04, arg04
26190     0D 2F 02 F6 | 	mov	local05, arg05
26194                 | ' 
26194                 | ' repeat yy from y1 to y2
26194     14 2D 52 F2 | 	cmps	local04, local02 wc
26198     01 30 86 F6 | 	negc	local06, #1
2619c     18 2D 02 F1 | 	add	local04, local06
261a0                 | LR__2910
261a0                 | '   fastline(x1,x2,yy,c)
261a0     13 13 02 F6 | 	mov	arg01, local01
261a4     15 15 02 F6 | 	mov	arg02, local03
261a8     17 19 02 F6 | 	mov	arg04, local05
261ac     14 17 02 F6 | 	mov	arg03, local02
261b0     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
261b4     18 29 02 F1 | 	add	local02, local06
261b8     16 29 0A F2 | 	cmp	local02, local04 wz
261bc     E0 FF 9F 5D |  if_ne	jmp	#LR__2910
261c0     A7 F0 03 F6 | 	mov	ptra, fp
261c4     B2 00 A0 FD | 	call	#popregs_
261c8                 | _hg010b_spin2_box_ret
261c8     2D 00 64 FD | 	ret
261cc                 | 
261cc                 | '       
261cc                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
261cc                 | _hg010b_spin2_putcharxycgf
261cc                 | ' 
261cc                 | '  
261cc                 | ' repeat yy from 0 to 15
261cc     00 00 06 F6 | 	mov	_var01, #0
261d0     97 8C 48 FB | 	callpa	#(@LR__2922-@LR__2920)>>2,fcache_load_ptr_
261d4                 | LR__2920
261d4                 | ' 
261d4                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
261d4     95 E4 05 F1 | 	add	objptr, #149
261d8     F2 02 02 FB | 	rdlong	_var02, objptr
261dc     0A 02 66 F0 | 	shl	_var02, #10
261e0     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
261e4     01 05 02 F1 | 	add	_var03, _var02
261e8     0B 03 02 F6 | 	mov	_var02, arg03
261ec     04 02 66 F0 | 	shl	_var02, #4
261f0     01 05 02 F1 | 	add	_var03, _var02
261f4     00 05 02 F1 | 	add	_var03, _var01
261f8     02 05 C2 FA | 	rdbyte	_var03, _var03
261fc                 | '   asm
261fc     00 04 0E F4 | 	testb	_var03, #0 wz
26200     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
26204     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
26208     01 04 0E F4 | 	testb	_var03, #1 wz
2620c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
26210     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
26214     02 04 0E F4 | 	testb	_var03, #2 wz
26218     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
2621c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
26220     03 04 0E F4 | 	testb	_var03, #3 wz
26224     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
26228     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
2622c     04 04 0E F4 | 	testb	_var03, #4 wz
26230     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
26234     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
26238     05 04 0E F4 | 	testb	_var03, #5 wz
2623c     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
26240     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
26244     06 04 0E F4 | 	testb	_var03, #6 wz
26248     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
2624c     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
26250     07 04 0E F4 | 	testb	_var03, #7 wz
26254     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
26258     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
2625c                 | '   
2625c                 | '   ccc[0]:=c1
2625c     99 E5 05 F1 | 	add	objptr, #409
26260     F2 06 62 FC | 	wrlong	_var04, objptr
26264                 | '   ccc[1]:=c2 
26264     04 E4 05 F1 | 	add	objptr, #4
26268     F2 08 62 FC | 	wrlong	_var05, objptr
2626c                 | '   long[mailbox0][2]:=8
2626c     49 E4 85 F1 | 	sub	objptr, #73
26270     F2 04 02 FB | 	rdlong	_var03, objptr
26274     08 04 06 F1 | 	add	_var03, #8
26278     02 11 68 FC | 	wrlong	#8, _var03
2627c                 | '   long[mailbox0][1]:=@ccc
2627c     45 E4 05 F1 | 	add	objptr, #69
26280     F2 04 02 F6 | 	mov	_var03, objptr
26284     45 E4 85 F1 | 	sub	objptr, #69
26288     F2 02 02 FB | 	rdlong	_var02, objptr
2628c     04 02 06 F1 | 	add	_var02, #4
26290     01 05 62 FC | 	wrlong	_var03, _var02
26294                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
26294     0C E5 85 F1 | 	sub	objptr, #268
26298     F2 04 02 FB | 	rdlong	_var03, objptr
2629c     0A 03 02 F6 | 	mov	_var02, arg02
262a0     00 03 02 F1 | 	add	_var02, _var01
262a4     0A 02 66 F0 | 	shl	_var02, #10
262a8     09 0B 02 F6 | 	mov	_var06, arg01
262ac     02 0A 66 F0 | 	shl	_var06, #2
262b0     05 03 02 F1 | 	add	_var02, _var06
262b4     01 05 02 F1 | 	add	_var03, _var02
262b8     00 00 78 FF 
262bc     00 04 06 F1 | 	add	_var03, ##-268435456
262c0     0C E5 05 F1 | 	add	objptr, #268
262c4     F2 0A 02 FB | 	rdlong	_var06, objptr
262c8     05 05 62 FC | 	wrlong	_var03, _var06
262cc                 | '   repeat
262cc                 | LR__2921
262cc     F2 04 02 FB | 	rdlong	_var03, objptr
262d0     02 03 02 FB | 	rdlong	_var02, _var03
262d4     00 02 56 F2 | 	cmps	_var02, #0 wc
262d8     F0 FF 9F CD |  if_b	jmp	#LR__2921
262dc     E9 E5 85 F1 | 	sub	objptr, #489
262e0     01 00 06 F1 | 	add	_var01, #1
262e4     10 00 56 F2 | 	cmps	_var01, #16 wc
262e8     E8 FE 9F CD |  if_b	jmp	#LR__2920
262ec                 | LR__2922
262ec                 | _hg010b_spin2_putcharxycgf_ret
262ec     2D 00 64 FD | 	ret
262f0                 | 
262f0                 | ' 
262f0                 | ' 
262f0                 | ' '**********************************************************************r***
262f0                 | ' '                                                                        *
262f0                 | ' ' Font related functions                                                 *
262f0                 | ' '                                                                        *
262f0                 | ' '*************************************************************************
262f0                 | ' 
262f0                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
262f0                 | ' 
262f0                 | ' pub setfontfamily(afontnum)
262f0                 | _hg010b_spin2_setfontfamily
262f0                 | ' 
262f0                 | ' font_family:=afontnum
262f0     95 E4 05 F1 | 	add	objptr, #149
262f4     F2 12 62 FC | 	wrlong	arg01, objptr
262f8     95 E4 85 F1 | 	sub	objptr, #149
262fc                 | ' 'if afontnum==8
262fc                 | ' '  font_ptr:=@amiga_font
262fc                 | ' 
262fc                 | ' if afontnum==4
262fc     04 12 0E F2 | 	cmp	arg01, #4 wz
26300                 | '   font_ptr:=@st_font
26300     08 00 00 AF 
26304     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
26308     08 E4 05 A1 |  if_e	add	objptr, #8
2630c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
26310     08 E4 85 A1 |  if_e	sub	objptr, #8
26314     08 00 00 AF 
26318     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
2631c                 | ' if afontnum==0
2631c     00 12 0E F2 | 	cmp	arg01, #0 wz
26320                 | '   font_ptr:=@vga_font
26320     08 E4 05 A1 |  if_e	add	objptr, #8
26324     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
26328     08 E4 85 A1 |  if_e	sub	objptr, #8
2632c                 | _hg010b_spin2_setfontfamily_ret
2632c     2D 00 64 FD | 	ret
26330                 | 
26330                 | ' 
26330                 | ' ''--------- Redefine a character
26330                 | ' 
26330                 | ' pub defchar(ch,ptr) | s,i ' 
26330                 | _hg010b_spin2_defchar
26330                 | ' 
26330                 | ' s:=font_ptr+ch*16
26330     08 E4 05 F1 | 	add	objptr, #8
26334     F2 00 02 FB | 	rdlong	_var01, objptr
26338     08 E4 85 F1 | 	sub	objptr, #8
2633c     04 12 66 F0 | 	shl	arg01, #4
26340     09 01 02 F1 | 	add	_var01, arg01
26344                 | ' repeat i from 0 to 15
26344     00 02 06 F6 | 	mov	_var02, #0
26348     97 12 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
2634c                 | LR__2930
2634c                 | '   byte[s+i]:=byte[ptr+i]
2634c     0A 13 02 F6 | 	mov	arg01, arg02
26350     01 13 02 F1 | 	add	arg01, _var02
26354     00 05 02 F6 | 	mov	_var03, _var01
26358     09 13 C2 FA | 	rdbyte	arg01, arg01
2635c     01 05 02 F1 | 	add	_var03, _var02
26360     02 13 42 FC | 	wrbyte	arg01, _var03
26364     01 02 06 F1 | 	add	_var02, #1
26368     10 02 56 F2 | 	cmps	_var02, #16 wc
2636c     DC FF 9F CD |  if_b	jmp	#LR__2930
26370                 | LR__2931
26370                 | _hg010b_spin2_defchar_ret
26370     2D 00 64 FD | 	ret
26374                 | 
26374                 | ' 
26374                 | ' 
26374                 | ' '*************************************************************************
26374                 | ' '                                                                        *
26374                 | ' '  Cursor functions                                                      *
26374                 | ' '                                                                        *
26374                 | ' '*************************************************************************
26374                 | ' 
26374                 | ' 
26374                 | ' pub setcursorpos(x,y)
26374                 | _hg010b_spin2_setcursorpos
26374                 | ' 
26374                 | ' ''---------- Set the (x,y) position of cursor
26374                 | ' 
26374                 | ' cursor_x:=x
26374     3C E4 05 F1 | 	add	objptr, #60
26378     F2 12 52 FC | 	wrword	arg01, objptr
2637c                 | ' cursor_y:=y
2637c     02 E4 05 F1 | 	add	objptr, #2
26380     F2 14 42 FC | 	wrbyte	arg02, objptr
26384                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
26384     02 E4 85 F1 | 	sub	objptr, #2
26388     F2 14 E2 FA | 	rdword	arg02, objptr
2638c     02 14 66 F0 | 	shl	arg02, #2
26390     02 E4 05 F1 | 	add	objptr, #2
26394     F2 16 C2 FA | 	rdbyte	arg03, objptr
26398     3E E4 85 F1 | 	sub	objptr, #62
2639c     04 16 66 F0 | 	shl	arg03, #4
263a0     04 16 06 F1 | 	add	arg03, #4
263a4     11 12 06 F6 | 	mov	arg01, #17
263a8     0C F3 BF FD | 	call	#_hg010b_spin2_setspritepos
263ac                 | _hg010b_spin2_setcursorpos_ret
263ac     2D 00 64 FD | 	ret
263b0                 | 
263b0                 | ' 
263b0                 | ' pub setcursorx(x)
263b0                 | _hg010b_spin2_setcursorx
263b0                 | ' cursor_x:=x
263b0     3C E4 05 F1 | 	add	objptr, #60
263b4     F2 12 52 FC | 	wrword	arg01, objptr
263b8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
263b8     F2 14 E2 FA | 	rdword	arg02, objptr
263bc     02 14 66 F0 | 	shl	arg02, #2
263c0     02 E4 05 F1 | 	add	objptr, #2
263c4     F2 16 C2 FA | 	rdbyte	arg03, objptr
263c8     3E E4 85 F1 | 	sub	objptr, #62
263cc     04 16 66 F0 | 	shl	arg03, #4
263d0     04 16 06 F1 | 	add	arg03, #4
263d4     11 12 06 F6 | 	mov	arg01, #17
263d8     DC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
263dc                 | _hg010b_spin2_setcursorx_ret
263dc     2D 00 64 FD | 	ret
263e0                 | 
263e0                 | ' 
263e0                 | ' pub setcursory(y) 
263e0                 | _hg010b_spin2_setcursory
263e0                 | ' cursor_y:=y
263e0     3E E4 05 F1 | 	add	objptr, #62
263e4     F2 12 42 FC | 	wrbyte	arg01, objptr
263e8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
263e8     02 E4 85 F1 | 	sub	objptr, #2
263ec     F2 14 E2 FA | 	rdword	arg02, objptr
263f0     02 14 66 F0 | 	shl	arg02, #2
263f4     02 E4 05 F1 | 	add	objptr, #2
263f8     F2 16 C2 FA | 	rdbyte	arg03, objptr
263fc     3E E4 85 F1 | 	sub	objptr, #62
26400     04 16 66 F0 | 	shl	arg03, #4
26404     04 16 06 F1 | 	add	arg03, #4
26408     11 12 06 F6 | 	mov	arg01, #17
2640c     A8 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
26410                 | _hg010b_spin2_setcursory_ret
26410     2D 00 64 FD | 	ret
26414                 | 
26414                 | ' 
26414                 | ' '*************************************************************************
26414                 | ' '                                                                        *
26414                 | ' '  VBlank functions                                                      *
26414                 | ' '                                                                        *
26414                 | ' '*************************************************************************
26414                 | ' 
26414                 | ' pub waitvbl(amount) | i
26414                 | _hg010b_spin2_waitvbl
26414     03 4A 05 F6 | 	mov	COUNT_, #3
26418     A8 00 A0 FD | 	call	#pushregs_
2641c     09 27 02 F6 | 	mov	local01, arg01
26420                 | ' 
26420                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
26420                 | ' 
26420                 | ' repeat i from 1 to amount
26420     01 28 06 F6 | 	mov	local02, #1
26424     01 26 56 F2 | 	cmps	local01, #1 wc
26428     01 2A 86 F6 | 	negc	local03, #1
2642c     15 27 02 F1 | 	add	local01, local03
26430                 | LR__2940
26430                 | '   repeat until vblank==0
26430                 | LR__2941
26430     49 E4 05 F1 | 	add	objptr, #73
26434     F2 12 0A FB | 	rdlong	arg01, objptr wz
26438     49 E4 85 F1 | 	sub	objptr, #73
2643c     0C 00 90 AD |  if_e	jmp	#LR__2942
26440                 | '     waitus(100)
26440     64 12 06 F6 | 	mov	arg01, #100
26444     28 20 B0 FD | 	call	#__system___waitus
26448     E4 FF 9F FD | 	jmp	#LR__2941
2644c                 | LR__2942
2644c                 | '   repeat until vblank==1
2644c                 | LR__2943
2644c     49 E4 05 F1 | 	add	objptr, #73
26450     F2 12 02 FB | 	rdlong	arg01, objptr
26454     49 E4 85 F1 | 	sub	objptr, #73
26458     01 12 0E F2 | 	cmp	arg01, #1 wz
2645c     0C 00 90 AD |  if_e	jmp	#LR__2944
26460                 | '     waitus(100)
26460     64 12 06 F6 | 	mov	arg01, #100
26464     08 20 B0 FD | 	call	#__system___waitus
26468     E0 FF 9F FD | 	jmp	#LR__2943
2646c                 | LR__2944
2646c     15 29 02 F1 | 	add	local02, local03
26470     13 29 0A F2 | 	cmp	local02, local01 wz
26474     B8 FF 9F 5D |  if_ne	jmp	#LR__2940
26478     A7 F0 03 F6 | 	mov	ptra, fp
2647c     B2 00 A0 FD | 	call	#popregs_
26480                 | _hg010b_spin2_waitvbl_ret
26480     2D 00 64 FD | 	ret
26484                 | 
26484                 | ' 
26484                 | ' ''---------- Set color #c in palette to r,g,b
26484                 | ' 
26484                 | ' pub setcolor(c,r,g,b)  |cc
26484                 | _hg010b_spin2_setcolor
26484                 | ' 
26484                 | ' cc:=r<<24+g<<16+b<<8
26484     18 14 66 F0 | 	shl	arg02, #24
26488     10 16 66 F0 | 	shl	arg03, #16
2648c     0B 15 02 F1 | 	add	arg02, arg03
26490     08 18 66 F0 | 	shl	arg04, #8
26494     0C 15 02 F1 | 	add	arg02, arg04
26498                 | ' long[palette_ptr+4*c]:=cc
26498     1C E4 05 F1 | 	add	objptr, #28
2649c     F2 18 02 FB | 	rdlong	arg04, objptr
264a0     1C E4 85 F1 | 	sub	objptr, #28
264a4     02 12 66 F0 | 	shl	arg01, #2
264a8     09 19 02 F1 | 	add	arg04, arg01
264ac     0C 15 62 FC | 	wrlong	arg02, arg04
264b0                 | _hg010b_spin2_setcolor_ret
264b0     2D 00 64 FD | 	ret
264b4                 | 
264b4                 | ' 
264b4                 | ' 
264b4                 | ' pub cls(fc,bc)   :c,i
264b4                 | _hg010b_spin2_cls
264b4     02 4A 05 F6 | 	mov	COUNT_, #2
264b8     A8 00 A0 FD | 	call	#pushregs_
264bc     09 27 02 F6 | 	mov	local01, arg01
264c0     0A 29 02 F6 | 	mov	local02, arg02
264c4                 | ' 
264c4                 | ' c:=bc
264c4                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
264c4     DD E4 05 F1 | 	add	objptr, #221
264c8     F2 12 02 FB | 	rdlong	arg01, objptr
264cc     A5 E4 85 F1 | 	sub	objptr, #165
264d0     F2 16 02 FB | 	rdlong	arg03, objptr
264d4     02 16 66 F0 | 	shl	arg03, #2
264d8     14 15 02 F6 | 	mov	arg02, local02
264dc     00 18 06 F6 | 	mov	arg04, #0
264e0     01 1A 06 F6 | 	mov	arg05, #1
264e4     0B 00 00 FF 
264e8     94 E4 05 F1 | 	add	objptr, ##5780
264ec     B4 10 B0 FD | 	call	#_psram_spin2_fill
264f0                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
264f0     0B 00 00 FF 
264f4     C8 E4 85 F1 | 	sub	objptr, ##5832
264f8     F2 12 02 FB | 	rdlong	arg01, objptr
264fc     04 E4 85 F1 | 	sub	objptr, #4
26500     F2 16 02 FB | 	rdlong	arg03, objptr
26504     09 17 82 F1 | 	sub	arg03, arg01
26508     20 14 06 F6 | 	mov	arg02, #32
2650c     00 18 06 F6 | 	mov	arg04, #0
26510     01 1A 06 F6 | 	mov	arg05, #1
26514     0B 00 00 FF 
26518     CC E4 05 F1 | 	add	objptr, ##5836
2651c     84 10 B0 FD | 	call	#_psram_spin2_fill
26520                 | ' setwritecolors(fc,bc)
26520                 | ' 
26520                 | ' write_color:=ff
26520     0B 00 00 FF 
26524     8B E4 85 F1 | 	sub	objptr, ##5771
26528     F2 26 62 FC | 	wrlong	local01, objptr
2652c                 | ' write_background:=bb
2652c     04 E4 05 F1 | 	add	objptr, #4
26530     F2 28 62 FC | 	wrlong	local02, objptr
26534                 | ' cursor_x:=0
26534     09 E4 85 F1 | 	sub	objptr, #9
26538     F2 00 58 FC | 	wrword	#0, objptr
2653c                 | ' cursor_y:=0
2653c     02 E4 05 F1 | 	add	objptr, #2
26540     F2 00 48 FC | 	wrbyte	#0, objptr
26544                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
26544     02 E4 85 F1 | 	sub	objptr, #2
26548     F2 14 E2 FA | 	rdword	arg02, objptr
2654c     02 14 66 F0 | 	shl	arg02, #2
26550     02 E4 05 F1 | 	add	objptr, #2
26554     F2 16 C2 FA | 	rdbyte	arg03, objptr
26558     3E E4 85 F1 | 	sub	objptr, #62
2655c     04 16 66 F0 | 	shl	arg03, #4
26560     04 16 06 F1 | 	add	arg03, #4
26564     11 12 06 F6 | 	mov	arg01, #17
26568     4C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
2656c                 | ' setcursorcolor(fc)
2656c     13 13 02 F6 | 	mov	arg01, local01
26570     54 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
26574     14 FB 01 F6 | 	mov	result1, local02
26578     00 FC 05 F6 | 	mov	result2, #0
2657c     A7 F0 03 F6 | 	mov	ptra, fp
26580     B2 00 A0 FD | 	call	#popregs_
26584                 | _hg010b_spin2_cls_ret
26584     2D 00 64 FD | 	ret
26588                 | 
26588                 | ' 
26588                 | ' ''---------- Output a char at the cursor position, move the cursor 
26588                 | ' 
26588                 | ' pub putchar(achar) | c,x,y,l,newcpl
26588                 | _hg010b_spin2_putchar
26588     02 4A 05 F6 | 	mov	COUNT_, #2
2658c     A8 00 A0 FD | 	call	#pushregs_
26590     09 27 02 F6 | 	mov	local01, arg01
26594                 | ' 
26594                 | ' if achar==10
26594     0A 26 0E F2 | 	cmp	local01, #10 wz
26598                 | '   crlf()
26598     78 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
2659c                 | ' if achar==9
2659c     09 26 0E F2 | 	cmp	local01, #9 wz
265a0     18 00 90 5D |  if_ne	jmp	#LR__2950
265a4                 | '   cursor_x:=(cursor_x& %11110000)+16
265a4     3C E4 05 F1 | 	add	objptr, #60
265a8     F2 16 E2 FA | 	rdword	arg03, objptr
265ac     F0 16 06 F5 | 	and	arg03, #240
265b0     10 16 06 F1 | 	add	arg03, #16
265b4     F2 16 52 FC | 	wrword	arg03, objptr
265b8     3C E4 85 F1 | 	sub	objptr, #60
265bc                 | LR__2950
265bc                 | '   
265bc                 | ' if (achar<>9) && (achar<>10) 
265bc     09 26 0E F2 | 	cmp	local01, #9 wz
265c0     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
265c4     A8 00 90 AD |  if_e	jmp	#LR__2951
265c8                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
265c8     3C E4 05 F1 | 	add	objptr, #60
265cc     F2 12 E2 FA | 	rdword	arg01, objptr
265d0     02 E4 05 F1 | 	add	objptr, #2
265d4     F2 14 C2 FA | 	rdbyte	arg02, objptr
265d8     04 14 66 F0 | 	shl	arg02, #4
265dc     04 14 06 F1 | 	add	arg02, #4
265e0     03 E4 05 F1 | 	add	objptr, #3
265e4     F2 18 02 FB | 	rdlong	arg04, objptr
265e8     04 E4 05 F1 | 	add	objptr, #4
265ec     F2 1A 02 FB | 	rdlong	arg05, objptr
265f0     45 E4 85 F1 | 	sub	objptr, #69
265f4     13 17 02 F6 | 	mov	arg03, local01
265f8     D0 FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
265fc     04 E4 05 F1 | 	add	objptr, #4
26600     F2 12 02 FB | 	rdlong	arg01, objptr
26604     1C 00 00 FF 
26608     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
2660c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
26610     3A E4 05 F1 | 	add	objptr, #58
26614     F2 1A C2 FA | 	rdbyte	arg05, objptr
26618     0D 17 02 FD | 	qmul	arg03, arg05
2661c                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
2661c     1C 00 00 FF 
26620     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26624     02 E4 85 F1 | 	sub	objptr, #2
26628     F2 28 E2 FA | 	rdword	local02, objptr
2662c     01 28 46 F0 | 	shr	local02, #1
26630     13 15 02 F6 | 	mov	arg02, local01
26634     01 16 06 F6 | 	mov	arg03, #1
26638     00 18 06 F6 | 	mov	arg04, #0
2663c     01 1A 06 F6 | 	mov	arg05, #1
26640     0B 00 00 FF 
26644     90 E4 05 F1 | 	add	objptr, ##5776
26648     18 26 62 FD | 	getqx	local01
2664c     14 27 02 F1 | 	add	local01, local02
26650     13 13 02 F1 | 	add	arg01, local01
26654     4C 0F B0 FD | 	call	#_psram_spin2_fill
26658                 | '   cursor_x+=2
26658     0B 00 00 FF 
2665c     90 E4 85 F1 | 	sub	objptr, ##5776
26660     F2 28 E2 FA | 	rdword	local02, objptr
26664     02 28 06 F1 | 	add	local02, #2
26668     F2 28 52 FC | 	wrword	local02, objptr
2666c     3C E4 85 F1 | 	sub	objptr, #60
26670                 | LR__2951
26670                 | ' 
26670                 | ' if cursor_x>=256
26670     3C E4 05 F1 | 	add	objptr, #60
26674     F2 28 E2 FA | 	rdword	local02, objptr
26678     3C E4 85 F1 | 	sub	objptr, #60
2667c     00 29 56 F2 | 	cmps	local02, #256 wc
26680     64 00 90 CD |  if_b	jmp	#LR__2953
26684                 | '   cursor_x:=0
26684     3C E4 05 F1 | 	add	objptr, #60
26688     F2 00 58 FC | 	wrword	#0, objptr
2668c                 | '   cursor_y+=1
2668c     02 E4 05 F1 | 	add	objptr, #2
26690     F2 28 C2 FA | 	rdbyte	local02, objptr
26694     01 28 06 F1 | 	add	local02, #1
26698     F2 28 42 FC | 	wrbyte	local02, objptr
2669c                 | '   if cursor_y>st_lines-1
2669c     C3 E4 05 F1 | 	add	objptr, #195
266a0     F2 28 02 FB | 	rdlong	local02, objptr
266a4     01 28 86 F1 | 	sub	local02, #1
266a8     C3 E4 85 F1 | 	sub	objptr, #195
266ac     F2 16 C2 FA | 	rdbyte	arg03, objptr
266b0     3E E4 85 F1 | 	sub	objptr, #62
266b4     14 17 5A F2 | 	cmps	arg03, local02 wcz
266b8     2C 00 90 ED |  if_be	jmp	#LR__2952
266bc                 | '     scrollup2()
266bc     00 12 06 F6 | 	mov	arg01, #0
266c0     01 00 00 FF 
266c4     58 14 06 F6 | 	mov	arg02, ##600
266c8     10 16 06 F6 | 	mov	arg03, #16
266cc     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
266d0                 | '     cursor_y:=st_lines-1
266d0     01 E5 05 F1 | 	add	objptr, #257
266d4     F2 28 02 FB | 	rdlong	local02, objptr
266d8     01 28 86 F1 | 	sub	local02, #1
266dc     C3 E4 85 F1 | 	sub	objptr, #195
266e0     F2 28 42 FC | 	wrbyte	local02, objptr
266e4     3E E4 85 F1 | 	sub	objptr, #62
266e8                 | LR__2952
266e8                 | LR__2953
266e8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
266e8     3C E4 05 F1 | 	add	objptr, #60
266ec     F2 14 E2 FA | 	rdword	arg02, objptr
266f0     02 14 66 F0 | 	shl	arg02, #2
266f4     02 E4 05 F1 | 	add	objptr, #2
266f8     F2 16 C2 FA | 	rdbyte	arg03, objptr
266fc     3E E4 85 F1 | 	sub	objptr, #62
26700     04 16 66 F0 | 	shl	arg03, #4
26704     04 16 06 F1 | 	add	arg03, #4
26708     11 12 06 F6 | 	mov	arg01, #17
2670c     A8 EF BF FD | 	call	#_hg010b_spin2_setspritepos
26710     A7 F0 03 F6 | 	mov	ptra, fp
26714     B2 00 A0 FD | 	call	#popregs_
26718                 | _hg010b_spin2_putchar_ret
26718     2D 00 64 FD | 	ret
2671c                 | 
2671c                 | '     
2671c                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
2671c                 | ' 
2671c                 | ' pub putchar2(achar) | c,x,y,l,newcpl
2671c                 | _hg010b_spin2_putchar2
2671c     02 4A 05 F6 | 	mov	COUNT_, #2
26720     A8 00 A0 FD | 	call	#pushregs_
26724     09 27 02 F6 | 	mov	local01, arg01
26728                 | ' 
26728                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
26728     3C E4 05 F1 | 	add	objptr, #60
2672c     F2 12 E2 FA | 	rdword	arg01, objptr
26730     02 E4 05 F1 | 	add	objptr, #2
26734     F2 14 C2 FA | 	rdbyte	arg02, objptr
26738     04 14 66 F0 | 	shl	arg02, #4
2673c     04 14 06 F1 | 	add	arg02, #4
26740     03 E4 05 F1 | 	add	objptr, #3
26744     F2 18 02 FB | 	rdlong	arg04, objptr
26748     04 E4 05 F1 | 	add	objptr, #4
2674c     F2 1A 02 FB | 	rdlong	arg05, objptr
26750     45 E4 85 F1 | 	sub	objptr, #69
26754     13 17 02 F6 | 	mov	arg03, local01
26758     70 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
2675c     04 E4 05 F1 | 	add	objptr, #4
26760     F2 12 02 FB | 	rdlong	arg01, objptr
26764     1C 00 00 FF 
26768     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
2676c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
26770     3A E4 05 F1 | 	add	objptr, #58
26774     F2 1A C2 FA | 	rdbyte	arg05, objptr
26778     0D 17 02 FD | 	qmul	arg03, arg05
2677c                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
2677c     1C 00 00 FF 
26780     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26784     02 E4 85 F1 | 	sub	objptr, #2
26788     F2 28 E2 FA | 	rdword	local02, objptr
2678c     01 28 46 F0 | 	shr	local02, #1
26790     13 15 02 F6 | 	mov	arg02, local01
26794     01 16 06 F6 | 	mov	arg03, #1
26798     00 18 06 F6 | 	mov	arg04, #0
2679c     01 1A 06 F6 | 	mov	arg05, #1
267a0     0B 00 00 FF 
267a4     90 E4 05 F1 | 	add	objptr, ##5776
267a8     18 26 62 FD | 	getqx	local01
267ac     14 27 02 F1 | 	add	local01, local02
267b0     13 13 02 F1 | 	add	arg01, local01
267b4     EC 0D B0 FD | 	call	#_psram_spin2_fill
267b8                 | ' 
267b8                 | ' cursor_x+=2
267b8     0B 00 00 FF 
267bc     90 E4 85 F1 | 	sub	objptr, ##5776
267c0     F2 28 E2 FA | 	rdword	local02, objptr
267c4     02 28 06 F1 | 	add	local02, #2
267c8     F2 28 52 FC | 	wrword	local02, objptr
267cc                 | ' if cursor_x>=256
267cc     F2 28 E2 FA | 	rdword	local02, objptr
267d0     3C E4 85 F1 | 	sub	objptr, #60
267d4     00 29 56 F2 | 	cmps	local02, #256 wc
267d8     64 00 90 CD |  if_b	jmp	#LR__2961
267dc                 | '   cursor_x:=0
267dc     3C E4 05 F1 | 	add	objptr, #60
267e0     F2 00 58 FC | 	wrword	#0, objptr
267e4                 | '   cursor_y+=1
267e4     02 E4 05 F1 | 	add	objptr, #2
267e8     F2 28 C2 FA | 	rdbyte	local02, objptr
267ec     01 28 06 F1 | 	add	local02, #1
267f0     F2 28 42 FC | 	wrbyte	local02, objptr
267f4                 | '   if cursor_y>st_lines-1
267f4     C3 E4 05 F1 | 	add	objptr, #195
267f8     F2 28 02 FB | 	rdlong	local02, objptr
267fc     01 28 86 F1 | 	sub	local02, #1
26800     C3 E4 85 F1 | 	sub	objptr, #195
26804     F2 16 C2 FA | 	rdbyte	arg03, objptr
26808     3E E4 85 F1 | 	sub	objptr, #62
2680c     14 17 5A F2 | 	cmps	arg03, local02 wcz
26810     2C 00 90 ED |  if_be	jmp	#LR__2960
26814                 | '     scrollup2()
26814     00 12 06 F6 | 	mov	arg01, #0
26818     01 00 00 FF 
2681c     58 14 06 F6 | 	mov	arg02, ##600
26820     10 16 06 F6 | 	mov	arg03, #16
26824     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
26828                 | '     cursor_y:=st_lines-1
26828     01 E5 05 F1 | 	add	objptr, #257
2682c     F2 28 02 FB | 	rdlong	local02, objptr
26830     01 28 86 F1 | 	sub	local02, #1
26834     C3 E4 85 F1 | 	sub	objptr, #195
26838     F2 28 42 FC | 	wrbyte	local02, objptr
2683c     3E E4 85 F1 | 	sub	objptr, #62
26840                 | LR__2960
26840                 | LR__2961
26840                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
26840     3C E4 05 F1 | 	add	objptr, #60
26844     F2 14 E2 FA | 	rdword	arg02, objptr
26848     02 14 66 F0 | 	shl	arg02, #2
2684c     02 E4 05 F1 | 	add	objptr, #2
26850     F2 16 C2 FA | 	rdbyte	arg03, objptr
26854     3E E4 85 F1 | 	sub	objptr, #62
26858     04 16 66 F0 | 	shl	arg03, #4
2685c     04 16 06 F1 | 	add	arg03, #4
26860     11 12 06 F6 | 	mov	arg01, #17
26864     50 EE BF FD | 	call	#_hg010b_spin2_setspritepos
26868     A7 F0 03 F6 | 	mov	ptra, fp
2686c     B2 00 A0 FD | 	call	#popregs_
26870                 | _hg010b_spin2_putchar2_ret
26870     2D 00 64 FD | 	ret
26874                 | 
26874                 | ' ''--------- Output a string at the cursor position, move the cursor  
26874                 | ' 
26874                 | ' pub write(text) | iii,c,ncx,ncy
26874                 | _hg010b_spin2_write
26874     04 4A 05 F6 | 	mov	COUNT_, #4
26878     A8 00 A0 FD | 	call	#pushregs_
2687c     09 27 02 F6 | 	mov	local01, arg01
26880                 | ' 
26880                 | ' repeat iii from 0 to strsize(text)-1
26880     00 28 06 F6 | 	mov	local02, #0
26884     13 13 02 F6 | 	mov	arg01, local01
26888     09 2B 02 F6 | 	mov	local03, arg01
2688c     97 06 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
26890                 | LR__2970
26890     15 FB C9 FA | 	rdbyte	result1, local03 wz
26894     01 2A 06 51 |  if_ne	add	local03, #1
26898     F4 FF 9F 5D |  if_ne	jmp	#LR__2970
2689c                 | LR__2971
2689c     09 2B 82 F1 | 	sub	local03, arg01
268a0     01 2A 86 F1 | 	sub	local03, #1
268a4     00 2A 56 F2 | 	cmps	local03, #0 wc
268a8     01 2C 86 F6 | 	negc	local04, #1
268ac     16 2B 02 F1 | 	add	local03, local04
268b0                 | LR__2972
268b0                 | '   putchar2(byte[text+iii])
268b0     13 13 02 F6 | 	mov	arg01, local01
268b4     14 13 02 F1 | 	add	arg01, local02
268b8     09 13 C2 FA | 	rdbyte	arg01, arg01
268bc     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
268c0     16 29 02 F1 | 	add	local02, local04
268c4     15 29 0A F2 | 	cmp	local02, local03 wz
268c8     E4 FF 9F 5D |  if_ne	jmp	#LR__2972
268cc     A7 F0 03 F6 | 	mov	ptra, fp
268d0     B2 00 A0 FD | 	call	#popregs_
268d4                 | _hg010b_spin2_write_ret
268d4     2D 00 64 FD | 	ret
268d8                 | 
268d8                 | '    
268d8                 | ' ' a version for text scrolling in Basic shifted 4 lines down
268d8                 | ' 
268d8                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
268d8                 | _hg010b_spin2_scrollup2
268d8     03 4A 05 F6 | 	mov	COUNT_, #3
268dc     A8 00 A0 FD | 	call	#pushregs_
268e0                 | ' 	
268e0                 | ' repeat i from 4 to 579 
268e0     04 26 06 F6 | 	mov	local01, #4
268e4                 | LR__2980
268e4     DD E4 05 F1 | 	add	objptr, #221
268e8     F2 14 02 FB | 	rdlong	arg02, objptr
268ec     13 1B 02 F6 | 	mov	arg05, local01
268f0     10 1A 06 F1 | 	add	arg05, #16
268f4     02 1A 66 F0 | 	shl	arg05, #2
268f8     14 E4 05 F1 | 	add	objptr, #20
268fc     F2 16 02 FB | 	rdlong	arg03, objptr
26900     0B 1B 02 FD | 	qmul	arg05, arg03
26904                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
26904     02 16 66 F0 | 	shl	arg03, #2
26908     F4 03 00 FF 
2690c     00 12 06 F6 | 	mov	arg01, ##518144
26910     0A 00 00 FF 
26914     DB E5 05 F1 | 	add	objptr, ##5595
26918     18 1A 62 FD | 	getqx	arg05
2691c     0D 15 02 F1 | 	add	arg02, arg05
26920     48 0B B0 FD | 	call	#_psram_spin2_read1
26924     0A 00 00 FF 
26928     EF E5 85 F1 | 	sub	objptr, ##5615
2692c     F2 14 02 FB | 	rdlong	arg02, objptr
26930     13 1B 02 F6 | 	mov	arg05, local01
26934     02 1A 66 F0 | 	shl	arg05, #2
26938     14 E4 05 F1 | 	add	objptr, #20
2693c     F2 16 02 FB | 	rdlong	arg03, objptr
26940     0B 1B 02 FD | 	qmul	arg05, arg03
26944                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
26944     02 16 66 F0 | 	shl	arg03, #2
26948     F4 03 00 FF 
2694c     00 12 06 F6 | 	mov	arg01, ##518144
26950     0A 00 00 FF 
26954     DB E5 05 F1 | 	add	objptr, ##5595
26958     18 1A 62 FD | 	getqx	arg05
2695c     0D 15 02 F1 | 	add	arg02, arg05
26960     A4 0B B0 FD | 	call	#_psram_spin2_write
26964     0B 00 00 FF 
26968     CC E4 85 F1 | 	sub	objptr, ##5836
2696c     01 26 06 F1 | 	add	local01, #1
26970     01 00 00 FF 
26974     44 26 16 F2 | 	cmp	local01, ##580 wc
26978     68 FF 9F CD |  if_b	jmp	#LR__2980
2697c                 | ' 
2697c                 | ' repeat i from 580 to 599
2697c     01 00 00 FF 
26980     44 26 06 F6 | 	mov	local01, ##580
26984                 | LR__2981
26984                 | '    fastline(0,1023,i,write_background)   
26984     45 E4 05 F1 | 	add	objptr, #69
26988     F2 18 02 FB | 	rdlong	arg04, objptr
2698c     45 E4 85 F1 | 	sub	objptr, #69
26990     00 12 06 F6 | 	mov	arg01, #0
26994     09 14 CE F9 | 	bmask	arg02, #9
26998     13 17 02 F6 | 	mov	arg03, local01
2699c     64 EF BF FD | 	call	#_hg010b_spin2_fastline
269a0     01 26 06 F1 | 	add	local01, #1
269a4     01 00 00 FF 
269a8     58 26 16 F2 | 	cmp	local01, ##600 wc
269ac     D4 FF 9F CD |  if_b	jmp	#LR__2981
269b0                 | ' repeat i from 0 to 3
269b0     00 26 06 F6 | 	mov	local01, #0
269b4                 | LR__2982
269b4                 | '    fastline(0,1023,i,write_background)      
269b4     45 E4 05 F1 | 	add	objptr, #69
269b8     F2 18 02 FB | 	rdlong	arg04, objptr
269bc     45 E4 85 F1 | 	sub	objptr, #69
269c0     00 12 06 F6 | 	mov	arg01, #0
269c4     09 14 CE F9 | 	bmask	arg02, #9
269c8     13 17 02 F6 | 	mov	arg03, local01
269cc     34 EF BF FD | 	call	#_hg010b_spin2_fastline
269d0     01 26 06 F1 | 	add	local01, #1
269d4     04 26 56 F2 | 	cmps	local01, #4 wc
269d8     D8 FF 9F CD |  if_b	jmp	#LR__2982
269dc                 | ' 
269dc                 | ' repeat i from 0 to 35
269dc     00 26 06 F6 | 	mov	local01, #0
269e0                 | LR__2983
269e0     13 1B 02 F6 | 	mov	arg05, local01
269e4     01 1A 06 F1 | 	add	arg05, #1
269e8     1C 00 00 FF 
269ec     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
269f0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
269f4     0B 1B 02 FD | 	qmul	arg05, arg03
269f8                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
269f8     04 E4 05 F1 | 	add	objptr, #4
269fc     F2 14 02 FB | 	rdlong	arg02, objptr
26a00     1C 00 00 FF 
26a04     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26a08     F4 03 00 FF 
26a0c     00 12 06 F6 | 	mov	arg01, ##518144
26a10     0B 00 00 FF 
26a14     C8 E4 05 F1 | 	add	objptr, ##5832
26a18     18 1A 62 FD | 	getqx	arg05
26a1c     0D 15 02 F1 | 	add	arg02, arg05
26a20     48 0A B0 FD | 	call	#_psram_spin2_read1
26a24     1C 00 00 FF 
26a28     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26a2c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
26a30     0B 27 02 FD | 	qmul	local01, arg03
26a34                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
26a34     0B 00 00 FF 
26a38     C8 E4 85 F1 | 	sub	objptr, ##5832
26a3c     F2 14 02 FB | 	rdlong	arg02, objptr
26a40     1C 00 00 FF 
26a44     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26a48     F4 03 00 FF 
26a4c     00 12 06 F6 | 	mov	arg01, ##518144
26a50     0B 00 00 FF 
26a54     C8 E4 05 F1 | 	add	objptr, ##5832
26a58     18 1A 62 FD | 	getqx	arg05
26a5c     0D 15 02 F1 | 	add	arg02, arg05
26a60     A4 0A B0 FD | 	call	#_psram_spin2_write
26a64     0B 00 00 FF 
26a68     CC E4 85 F1 | 	sub	objptr, ##5836
26a6c     01 26 06 F1 | 	add	local01, #1
26a70     24 26 56 F2 | 	cmps	local01, #36 wc
26a74     68 FF 9F CD |  if_b	jmp	#LR__2983
26a78                 | ' repeat i from 0 to timings[7]-1
26a78     00 26 06 F6 | 	mov	local01, #0
26a7c     1C 00 00 FF 
26a80     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26a84     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
26a88     1C 00 00 FF 
26a8c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26a90     01 28 86 F1 | 	sub	local02, #1
26a94     00 28 56 F2 | 	cmps	local02, #0 wc
26a98     01 2A 86 F6 | 	negc	local03, #1
26a9c     15 29 02 F1 | 	add	local02, local03
26aa0                 | LR__2984
26aa0                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
26aa0     04 E4 05 F1 | 	add	objptr, #4
26aa4     F2 12 02 FB | 	rdlong	arg01, objptr
26aa8     1C 00 00 FF 
26aac     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26ab0     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
26ab4     1C 00 00 FF 
26ab8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26abc     0D 19 02 F6 | 	mov	arg04, arg05
26ac0     03 18 66 F0 | 	shl	arg04, #3
26ac4     0D 19 02 F1 | 	add	arg04, arg05
26ac8     02 18 66 F0 | 	shl	arg04, #2
26acc     13 19 02 F1 | 	add	arg04, local01
26ad0     0C 13 02 F1 | 	add	arg01, arg04
26ad4     20 14 06 F6 | 	mov	arg02, #32
26ad8     01 16 06 F6 | 	mov	arg03, #1
26adc     00 18 06 F6 | 	mov	arg04, #0
26ae0     01 1A 06 F6 | 	mov	arg05, #1
26ae4     0B 00 00 FF 
26ae8     C8 E4 05 F1 | 	add	objptr, ##5832
26aec     B4 0A B0 FD | 	call	#_psram_spin2_fill
26af0     0B 00 00 FF 
26af4     CC E4 85 F1 | 	sub	objptr, ##5836
26af8     15 27 02 F1 | 	add	local01, local03
26afc     14 27 0A F2 | 	cmp	local01, local02 wz
26b00     9C FF 9F 5D |  if_ne	jmp	#LR__2984
26b04     A7 F0 03 F6 | 	mov	ptra, fp
26b08     B2 00 A0 FD | 	call	#popregs_
26b0c                 | _hg010b_spin2_scrollup2_ret
26b0c     2D 00 64 FD | 	ret
26b10                 | 
26b10                 | '  
26b10                 | ' ''----------- Scroll the screen one line down 
26b10                 | ' 
26b10                 | ' pub scrolldown(start=0) | i
26b10                 | _hg010b_spin2_scrolldown
26b10     05 4A 05 F6 | 	mov	COUNT_, #5
26b14     A8 00 A0 FD | 	call	#pushregs_
26b18     09 27 02 F6 | 	mov	local01, arg01
26b1c                 | ' 
26b1c                 | ' repeat i from 579 to (start*16)+4
26b1c     01 00 00 FF 
26b20     43 28 06 F6 | 	mov	local02, ##579
26b24     13 2B 02 F6 | 	mov	local03, local01
26b28     04 2A 66 F0 | 	shl	local03, #4
26b2c     04 2A 06 F1 | 	add	local03, #4
26b30     01 00 00 FF 
26b34     43 2A 56 F2 | 	cmps	local03, ##579 wc
26b38     01 2C 86 F6 | 	negc	local04, #1
26b3c     16 2F 02 F6 | 	mov	local05, local04
26b40     16 2B 02 F1 | 	add	local03, local04
26b44                 | LR__2990
26b44     DD E4 05 F1 | 	add	objptr, #221
26b48     F2 14 02 FB | 	rdlong	arg02, objptr
26b4c     14 2D 02 F6 | 	mov	local04, local02
26b50     02 2C 66 F0 | 	shl	local04, #2
26b54     14 E4 05 F1 | 	add	objptr, #20
26b58     F2 16 02 FB | 	rdlong	arg03, objptr
26b5c     0B 2D 02 FD | 	qmul	local04, arg03
26b60                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
26b60     02 16 66 F0 | 	shl	arg03, #2
26b64     F4 03 00 FF 
26b68     00 12 06 F6 | 	mov	arg01, ##518144
26b6c     0A 00 00 FF 
26b70     DB E5 05 F1 | 	add	objptr, ##5595
26b74     18 2C 62 FD | 	getqx	local04
26b78     16 15 02 F1 | 	add	arg02, local04
26b7c     EC 08 B0 FD | 	call	#_psram_spin2_read1
26b80     0A 00 00 FF 
26b84     EF E5 85 F1 | 	sub	objptr, ##5615
26b88     F2 14 02 FB | 	rdlong	arg02, objptr
26b8c     14 2D 02 F6 | 	mov	local04, local02
26b90     10 2C 06 F1 | 	add	local04, #16
26b94     02 2C 66 F0 | 	shl	local04, #2
26b98     14 E4 05 F1 | 	add	objptr, #20
26b9c     F2 16 02 FB | 	rdlong	arg03, objptr
26ba0     0B 2D 02 FD | 	qmul	local04, arg03
26ba4                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
26ba4     02 16 66 F0 | 	shl	arg03, #2
26ba8     F4 03 00 FF 
26bac     00 12 06 F6 | 	mov	arg01, ##518144
26bb0     0A 00 00 FF 
26bb4     DB E5 05 F1 | 	add	objptr, ##5595
26bb8     18 2C 62 FD | 	getqx	local04
26bbc     16 15 02 F1 | 	add	arg02, local04
26bc0     44 09 B0 FD | 	call	#_psram_spin2_write
26bc4     0B 00 00 FF 
26bc8     CC E4 85 F1 | 	sub	objptr, ##5836
26bcc     17 29 02 F1 | 	add	local02, local05
26bd0     15 29 0A F2 | 	cmp	local02, local03 wz
26bd4     6C FF 9F 5D |  if_ne	jmp	#LR__2990
26bd8                 | ' 
26bd8                 | ' repeat i from (start*16)+4 to (start*16)+19
26bd8     13 29 02 F6 | 	mov	local02, local01
26bdc     04 28 66 F0 | 	shl	local02, #4
26be0     04 28 06 F1 | 	add	local02, #4
26be4     13 2F 02 F6 | 	mov	local05, local01
26be8     04 2E 66 F0 | 	shl	local05, #4
26bec     13 2E 06 F1 | 	add	local05, #19
26bf0     13 2D 02 F6 | 	mov	local04, local01
26bf4     04 2C 66 F0 | 	shl	local04, #4
26bf8     04 2C 06 F1 | 	add	local04, #4
26bfc     16 2F 52 F2 | 	cmps	local05, local04 wc
26c00     01 2C 86 F6 | 	negc	local04, #1
26c04     16 2B 02 F6 | 	mov	local03, local04
26c08     16 2F 02 F1 | 	add	local05, local04
26c0c                 | LR__2991
26c0c                 | '    fastline(0,1023,i,write_background)    
26c0c     45 E4 05 F1 | 	add	objptr, #69
26c10     F2 18 02 FB | 	rdlong	arg04, objptr
26c14     45 E4 85 F1 | 	sub	objptr, #69
26c18     00 12 06 F6 | 	mov	arg01, #0
26c1c     09 14 CE F9 | 	bmask	arg02, #9
26c20     14 17 02 F6 | 	mov	arg03, local02
26c24     DC EC BF FD | 	call	#_hg010b_spin2_fastline
26c28     15 29 02 F1 | 	add	local02, local03
26c2c     17 29 0A F2 | 	cmp	local02, local05 wz
26c30     D8 FF 9F 5D |  if_ne	jmp	#LR__2991
26c34                 | '    
26c34                 | ' repeat i from 35 to start
26c34     23 28 06 F6 | 	mov	local02, #35
26c38     23 26 56 F2 | 	cmps	local01, #35 wc
26c3c     01 2C 86 F6 | 	negc	local04, #1
26c40     13 2F 02 F6 | 	mov	local05, local01
26c44     16 2F 02 F1 | 	add	local05, local04
26c48                 | LR__2992
26c48                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
26c48     04 E4 05 F1 | 	add	objptr, #4
26c4c     F2 14 02 FB | 	rdlong	arg02, objptr
26c50     14 2B 02 F6 | 	mov	local03, local02
26c54     07 2A 66 F0 | 	shl	local03, #7
26c58     15 15 02 F1 | 	add	arg02, local03
26c5c     F4 03 00 FF 
26c60     00 12 06 F6 | 	mov	arg01, ##518144
26c64     80 16 06 F6 | 	mov	arg03, #128
26c68     0B 00 00 FF 
26c6c     C8 E4 05 F1 | 	add	objptr, ##5832
26c70     F8 07 B0 FD | 	call	#_psram_spin2_read1
26c74                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
26c74     0B 00 00 FF 
26c78     C8 E4 85 F1 | 	sub	objptr, ##5832
26c7c     F2 14 02 FB | 	rdlong	arg02, objptr
26c80     14 2B 02 F6 | 	mov	local03, local02
26c84     01 2A 06 F1 | 	add	local03, #1
26c88     07 2A 66 F0 | 	shl	local03, #7
26c8c     15 15 02 F1 | 	add	arg02, local03
26c90     F4 03 00 FF 
26c94     00 12 06 F6 | 	mov	arg01, ##518144
26c98     80 16 06 F6 | 	mov	arg03, #128
26c9c     0B 00 00 FF 
26ca0     C8 E4 05 F1 | 	add	objptr, ##5832
26ca4     60 08 B0 FD | 	call	#_psram_spin2_write
26ca8     0B 00 00 FF 
26cac     CC E4 85 F1 | 	sub	objptr, ##5836
26cb0     16 29 02 F1 | 	add	local02, local04
26cb4     17 29 0A F2 | 	cmp	local02, local05 wz
26cb8     8C FF 9F 5D |  if_ne	jmp	#LR__2992
26cbc                 | ' repeat i from 0 to 127
26cbc     00 28 06 F6 | 	mov	local02, #0
26cc0                 | LR__2993
26cc0                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
26cc0     04 E4 05 F1 | 	add	objptr, #4
26cc4     F2 12 02 FB | 	rdlong	arg01, objptr
26cc8     13 2F 02 F6 | 	mov	local05, local01
26ccc     07 2E 66 F0 | 	shl	local05, #7
26cd0     17 13 02 F1 | 	add	arg01, local05
26cd4     14 13 02 F1 | 	add	arg01, local02
26cd8     20 14 06 F6 | 	mov	arg02, #32
26cdc     01 16 06 F6 | 	mov	arg03, #1
26ce0     00 18 06 F6 | 	mov	arg04, #0
26ce4     01 1A 06 F6 | 	mov	arg05, #1
26ce8     0B 00 00 FF 
26cec     C8 E4 05 F1 | 	add	objptr, ##5832
26cf0     B0 08 B0 FD | 	call	#_psram_spin2_fill
26cf4     0B 00 00 FF 
26cf8     CC E4 85 F1 | 	sub	objptr, ##5836
26cfc     01 28 06 F1 | 	add	local02, #1
26d00     80 28 56 F2 | 	cmps	local02, #128 wc
26d04     B8 FF 9F CD |  if_b	jmp	#LR__2993
26d08     A7 F0 03 F6 | 	mov	ptra, fp
26d0c     B2 00 A0 FD | 	call	#popregs_
26d10                 | _hg010b_spin2_scrolldown_ret
26d10     2D 00 64 FD | 	ret
26d14                 | 
26d14                 | ' 
26d14                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
26d14                 | ' 
26d14                 | ' pub crlf()
26d14                 | _hg010b_spin2_crlf
26d14                 | ' 
26d14                 | ' cursor_x:=leading_spaces*2
26d14     01 00 00 FF 
26d18     B6 E4 05 F1 | 	add	objptr, ##694
26d1c     F2 16 02 FB | 	rdlong	arg03, objptr
26d20     01 16 66 F0 | 	shl	arg03, #1
26d24     01 00 00 FF 
26d28     7A E4 85 F1 | 	sub	objptr, ##634
26d2c     F2 16 52 FC | 	wrword	arg03, objptr
26d30                 | ' cursor_y+=1
26d30     02 E4 05 F1 | 	add	objptr, #2
26d34     F2 16 C2 FA | 	rdbyte	arg03, objptr
26d38     01 16 06 F1 | 	add	arg03, #1
26d3c     F2 16 42 FC | 	wrbyte	arg03, objptr
26d40                 | ' if cursor_y>st_lines-1
26d40     C3 E4 05 F1 | 	add	objptr, #195
26d44     F2 16 02 FB | 	rdlong	arg03, objptr
26d48     01 16 86 F1 | 	sub	arg03, #1
26d4c     C3 E4 85 F1 | 	sub	objptr, #195
26d50     F2 14 C2 FA | 	rdbyte	arg02, objptr
26d54     3E E4 85 F1 | 	sub	objptr, #62
26d58     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
26d5c     2C 00 90 ED |  if_be	jmp	#LR__3000
26d60                 | '   scrollup2()
26d60     00 12 06 F6 | 	mov	arg01, #0
26d64     01 00 00 FF 
26d68     58 14 06 F6 | 	mov	arg02, ##600
26d6c     10 16 06 F6 | 	mov	arg03, #16
26d70     64 FB BF FD | 	call	#_hg010b_spin2_scrollup2
26d74                 | '   cursor_y:=st_lines-1
26d74     01 E5 05 F1 | 	add	objptr, #257
26d78     F2 16 02 FB | 	rdlong	arg03, objptr
26d7c     01 16 86 F1 | 	sub	arg03, #1
26d80     C3 E4 85 F1 | 	sub	objptr, #195
26d84     F2 16 42 FC | 	wrbyte	arg03, objptr
26d88     3E E4 85 F1 | 	sub	objptr, #62
26d8c                 | LR__3000
26d8c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
26d8c     3C E4 05 F1 | 	add	objptr, #60
26d90     F2 14 E2 FA | 	rdword	arg02, objptr
26d94     02 14 66 F0 | 	shl	arg02, #2
26d98     02 E4 05 F1 | 	add	objptr, #2
26d9c     F2 16 C2 FA | 	rdbyte	arg03, objptr
26da0     3E E4 85 F1 | 	sub	objptr, #62
26da4     04 16 66 F0 | 	shl	arg03, #4
26da8     04 16 06 F1 | 	add	arg03, #4
26dac     11 12 06 F6 | 	mov	arg01, #17
26db0     04 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
26db4                 | _hg010b_spin2_crlf_ret
26db4     2D 00 64 FD | 	ret
26db8                 | 
26db8                 | ' 
26db8                 | ' 
26db8                 | ' '*************************************************************************
26db8                 | ' '                                                                        *
26db8                 | ' '  Conversions                                                           *
26db8                 | ' '                                                                        *
26db8                 | ' '*************************************************************************
26db8                 | ' 
26db8                 | ' ''---------- Convert a integer to dec string, return a pointer
26db8                 | ' 
26db8                 | ' pub inttostr(i):result |q,pos,k,j
26db8                 | _hg010b_spin2_inttostr
26db8     03 4A 05 F6 | 	mov	COUNT_, #3
26dbc     A8 00 A0 FD | 	call	#pushregs_
26dc0     09 27 0A F6 | 	mov	local01, arg01 wz
26dc4                 | ' 
26dc4                 | ' j:=i
26dc4                 | ' pos:=10
26dc4     0A 28 06 F6 | 	mov	local02, #10
26dc8                 | ' k:=0
26dc8     00 2A 06 F6 | 	mov	local03, #0
26dcc                 | ' 
26dcc                 | ' if (j==0)
26dcc     18 00 90 5D |  if_ne	jmp	#LR__3010
26dd0                 | '   n_string[0]:=48
26dd0     4D E4 05 F1 | 	add	objptr, #77
26dd4     F2 60 48 FC | 	wrbyte	#48, objptr
26dd8                 | '   n_string[1]:=0
26dd8     01 E4 05 F1 | 	add	objptr, #1
26ddc     F2 00 48 FC | 	wrbyte	#0, objptr
26de0     4E E4 85 F1 | 	sub	objptr, #78
26de4     C4 00 90 FD | 	jmp	#LR__3017
26de8                 | LR__3010
26de8                 | ' 
26de8                 | ' else
26de8                 | '   if (j<0)
26de8     13 27 52 F6 | 	abs	local01, local01 wc
26dec                 | '     j:=0-j
26dec                 | '     k:=45
26dec     2D 2A 06 C6 |  if_b	mov	local03, #45
26df0                 | ' 
26df0                 | '   n_string[11]:=0
26df0     58 E4 05 F1 | 	add	objptr, #88
26df4     F2 00 48 FC | 	wrbyte	#0, objptr
26df8     58 E4 85 F1 | 	sub	objptr, #88
26dfc     97 24 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
26e00                 | '   repeat while (pos>-1)
26e00                 | LR__3011
26e00     00 28 56 F2 | 	cmps	local02, #0 wc
26e04     40 00 90 CD |  if_b	jmp	#LR__3013
26e08     13 FB 51 F6 | 	abs	result1, local01 wc
26e0c     0A FA 15 FD | 	qdiv	result1, #10
26e10                 | '     q:=j//10
26e10     19 FA 61 FD | 	getqy	result1
26e14     FD FA 81 F6 | 	negc	result1, result1
26e18     13 27 52 F6 | 	abs	local01, local01 wc
26e1c     0A 26 16 FD | 	qdiv	local01, #10
26e20                 | '     q:=48+q
26e20     30 FA 05 F1 | 	add	result1, #48
26e24                 | '     n_string[pos]:=q
26e24     14 27 02 F6 | 	mov	local01, local02
26e28     4D E4 05 F1 | 	add	objptr, #77
26e2c     F2 26 02 F1 | 	add	local01, objptr
26e30     13 FB 41 FC | 	wrbyte	result1, local01
26e34                 | '     j:=j/10
26e34     4D E4 85 F1 | 	sub	objptr, #77
26e38                 | '     pos-=1
26e38     01 28 86 F1 | 	sub	local02, #1
26e3c     18 26 62 FD | 	getqx	local01
26e40     13 27 82 F6 | 	negc	local01, local01
26e44     B8 FF 9F FD | 	jmp	#LR__3011
26e48                 | LR__3012
26e48                 | LR__3013
26e48                 | '   repeat while n_string[0]==48
26e48                 | LR__3014
26e48     4D E4 05 F1 | 	add	objptr, #77
26e4c     F2 16 C2 FA | 	rdbyte	arg03, objptr
26e50     4D E4 85 F1 | 	sub	objptr, #77
26e54     30 16 0E F2 | 	cmp	arg03, #48 wz
26e58     20 00 90 5D |  if_ne	jmp	#LR__3015
26e5c                 | '     bytemove(@n_string,@n_string+1,12)
26e5c     4D E4 05 F1 | 	add	objptr, #77
26e60     F2 12 02 F6 | 	mov	arg01, objptr
26e64     F2 14 02 F6 | 	mov	arg02, objptr
26e68     4D E4 85 F1 | 	sub	objptr, #77
26e6c     01 14 06 F1 | 	add	arg02, #1
26e70     0C 16 06 F6 | 	mov	arg03, #12
26e74     48 11 B0 FD | 	call	#__system____builtin_memmove
26e78     CC FF 9F FD | 	jmp	#LR__3014
26e7c                 | LR__3015
26e7c                 | ' 
26e7c                 | '   if k==45
26e7c     2D 2A 0E F2 | 	cmp	local03, #45 wz
26e80     28 00 90 5D |  if_ne	jmp	#LR__3016
26e84                 | '      bytemove(@n_string+1,@n_string,12)
26e84     4D E4 05 F1 | 	add	objptr, #77
26e88     F2 12 02 F6 | 	mov	arg01, objptr
26e8c     01 12 06 F1 | 	add	arg01, #1
26e90     F2 14 02 F6 | 	mov	arg02, objptr
26e94     4D E4 85 F1 | 	sub	objptr, #77
26e98     0C 16 06 F6 | 	mov	arg03, #12
26e9c     20 11 B0 FD | 	call	#__system____builtin_memmove
26ea0                 | '      n_string[0]:=k
26ea0     4D E4 05 F1 | 	add	objptr, #77
26ea4     F2 2A 42 FC | 	wrbyte	local03, objptr
26ea8     4D E4 85 F1 | 	sub	objptr, #77
26eac                 | LR__3016
26eac                 | LR__3017
26eac                 | ' 
26eac                 | ' q:=@n_string
26eac     4D E4 05 F1 | 	add	objptr, #77
26eb0     F2 FA 01 F6 | 	mov	result1, objptr
26eb4     4D E4 85 F1 | 	sub	objptr, #77
26eb8                 | ' return q
26eb8     A7 F0 03 F6 | 	mov	ptra, fp
26ebc     B2 00 A0 FD | 	call	#popregs_
26ec0                 | _hg010b_spin2_inttostr_ret
26ec0     2D 00 64 FD | 	ret
26ec4                 | 
26ec4                 | ' 
26ec4                 | ' '**********************************************************************************
26ec4                 | ' '
26ec4                 | ' '        Blitting
26ec4                 | ' '
26ec4                 | ' '**********************************************************************************
26ec4                 | ' 
26ec4                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
26ec4                 | _hg010b_spin2_blit
26ec4     18 4A 05 F6 | 	mov	COUNT_, #24
26ec8     A8 00 A0 FD | 	call	#pushregs_
26ecc     09 27 02 F6 | 	mov	local01, arg01
26ed0     0A 29 02 F6 | 	mov	local02, arg02
26ed4     0B 2B 02 F6 | 	mov	local03, arg03
26ed8     0C 2D 02 F6 | 	mov	local04, arg04
26edc     0D 2F 02 F6 | 	mov	local05, arg05
26ee0     0E 31 02 F6 | 	mov	local06, arg06
26ee4     0F 33 02 F6 | 	mov	local07, arg07
26ee8     10 35 02 F6 | 	mov	local08, arg08
26eec     11 37 02 F6 | 	mov	local09, arg09
26ef0     12 39 02 F6 | 	mov	local10, arg10
26ef4                 | ' 
26ef4                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
26ef4     00 04 00 FF 
26ef8     00 26 56 F2 | 	cmps	local01, ##524288 wc
26efc     00 04 00 3F 
26f00     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
26f04     98 01 90 CD |  if_b	jmp	#LR__3024
26f08     16 29 5A F2 | 	cmps	local02, local04 wcz
26f0c     14 3B 02 16 |  if_a	mov	local11, local02
26f10     16 29 02 16 |  if_a	mov	local02, local04
26f14     1D 2D 02 16 |  if_a	mov	local04, local11
26f18     17 2B 5A F2 | 	cmps	local03, local05 wcz
26f1c     15 3B 02 16 |  if_a	mov	local11, local03
26f20     17 2B 02 16 |  if_a	mov	local03, local05
26f24     18 2B 02 FD | 	qmul	local03, local06
26f28                 | '   if x1a>x2a
26f28                 | '     x1a,x2a:=x2a,x1a
26f28                 | '   if y1a>y2a
26f28                 | '     y1a,y2a:=y2a,y1a  
26f28     1D 2F 02 16 |  if_a	mov	local05, local11
26f2c                 | '   if x2a-x1a>1023 
26f2c     16 3B 02 F6 | 	mov	local11, local04
26f30     14 3B 82 F1 | 	sub	local11, local02
26f34     02 00 00 FF 
26f38     00 3A 56 F2 | 	cmps	local11, ##1024 wc
26f3c                 | '     x2a:=x1a+1023 ' limit the line to 1024
26f3c     14 2D 02 36 |  if_ae	mov	local04, local02
26f40     01 00 00 3F 
26f44     FF 2D 06 31 |  if_ae	add	local04, ##1023
26f48                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
26f48     19 3D 02 F6 | 	mov	local12, local07
26f4c     14 3D 02 F1 | 	add	local12, local02
26f50     18 3A 62 FD | 	getqx	local11
26f54     1C 37 02 FD | 	qmul	local09, local10
26f58     1D 3D 02 F1 | 	add	local12, local11
26f5c     13 3F 02 F6 | 	mov	local13, local01
26f60     1A 3F 02 F1 | 	add	local13, local08
26f64     18 3A 62 FD | 	getqx	local11
26f68     1D 3F 02 F1 | 	add	local13, local11
26f6c     1F 3D 5A F2 | 	cmps	local12, local13 wcz
26f70     98 00 90 ED |  if_be	jmp	#LR__3021
26f74                 | '     repeat y from y1a to y2a
26f74     15 41 02 F6 | 	mov	local14, local03
26f78     15 2F 52 F2 | 	cmps	local05, local03 wc
26f7c     01 42 86 F6 | 	negc	local15, #1
26f80     17 45 02 F6 | 	mov	local16, local05
26f84     21 45 02 F1 | 	add	local16, local15
26f88     0B 00 00 FF 
26f8c     CC E4 05 F1 | 	add	objptr, ##5836
26f90                 | LR__3020
26f90     18 41 02 FD | 	qmul	local14, local06
26f94                 | '   '    writeln(string("I am here"))
26f94                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
26f94     13 15 02 F6 | 	mov	arg02, local01
26f98     16 17 02 F6 | 	mov	arg03, local04
26f9c     14 17 82 F1 | 	sub	arg03, local02
26fa0     01 16 06 F1 | 	add	arg03, #1
26fa4     F4 03 00 FF 
26fa8     00 12 06 F6 | 	mov	arg01, ##518144
26fac     18 3E 62 FD | 	getqx	local13
26fb0     1F 15 02 F1 | 	add	arg02, local13
26fb4     14 15 02 F1 | 	add	arg02, local02
26fb8     B0 04 B0 FD | 	call	#_psram_spin2_read1
26fbc     1B 3F 02 F6 | 	mov	local13, local09
26fc0     15 3F 82 F1 | 	sub	local13, local03
26fc4     20 3F 02 F1 | 	add	local13, local14
26fc8     1C 3F 02 FD | 	qmul	local13, local10
26fcc                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
26fcc     19 15 02 F6 | 	mov	arg02, local07
26fd0     16 17 02 F6 | 	mov	arg03, local04
26fd4     14 17 82 F1 | 	sub	arg03, local02
26fd8     01 16 06 F1 | 	add	arg03, #1
26fdc     F4 03 00 FF 
26fe0     00 12 06 F6 | 	mov	arg01, ##518144
26fe4     18 3E 62 FD | 	getqx	local13
26fe8     1F 15 02 F1 | 	add	arg02, local13
26fec     1A 15 02 F1 | 	add	arg02, local08
26ff0     14 05 B0 FD | 	call	#_psram_spin2_write
26ff4     21 41 02 F1 | 	add	local14, local15
26ff8     22 41 0A F2 | 	cmp	local14, local16 wz
26ffc     90 FF 9F 5D |  if_ne	jmp	#LR__3020
27000     0B 00 00 FF 
27004     CC E4 85 F1 | 	sub	objptr, ##5836
27008     94 00 90 FD | 	jmp	#LR__3023
2700c                 | LR__3021
2700c                 | '   else
2700c                 | '     repeat y from y2a to y1a
2700c     17 41 02 F6 | 	mov	local14, local05
27010     17 2B 52 F2 | 	cmps	local03, local05 wc
27014     01 46 86 F6 | 	negc	local17, #1
27018     15 49 02 F6 | 	mov	local18, local03
2701c     23 49 02 F1 | 	add	local18, local17
27020     0B 00 00 FF 
27024     CC E4 05 F1 | 	add	objptr, ##5836
27028                 | LR__3022
27028     18 41 02 FD | 	qmul	local14, local06
2702c                 | '  '     writeln(string("I am there"))
2702c                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
2702c     13 15 02 F6 | 	mov	arg02, local01
27030     16 17 02 F6 | 	mov	arg03, local04
27034     14 17 82 F1 | 	sub	arg03, local02
27038     01 16 06 F1 | 	add	arg03, #1
2703c     F4 03 00 FF 
27040     00 12 06 F6 | 	mov	arg01, ##518144
27044     18 44 62 FD | 	getqx	local16
27048     22 15 02 F1 | 	add	arg02, local16
2704c     14 15 02 F1 | 	add	arg02, local02
27050     18 04 B0 FD | 	call	#_psram_spin2_read1
27054     1B 45 02 F6 | 	mov	local16, local09
27058     15 45 82 F1 | 	sub	local16, local03
2705c     20 45 02 F1 | 	add	local16, local14
27060     1C 45 02 FD | 	qmul	local16, local10
27064                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
27064     19 15 02 F6 | 	mov	arg02, local07
27068     16 17 02 F6 | 	mov	arg03, local04
2706c     14 17 82 F1 | 	sub	arg03, local02
27070     01 16 06 F1 | 	add	arg03, #1
27074     F4 03 00 FF 
27078     00 12 06 F6 | 	mov	arg01, ##518144
2707c     18 44 62 FD | 	getqx	local16
27080     22 15 02 F1 | 	add	arg02, local16
27084     1A 15 02 F1 | 	add	arg02, local08
27088     7C 04 B0 FD | 	call	#_psram_spin2_write
2708c     23 41 02 F1 | 	add	local14, local17
27090     24 41 0A F2 | 	cmp	local14, local18 wz
27094     90 FF 9F 5D |  if_ne	jmp	#LR__3022
27098     0B 00 00 FF 
2709c     CC E4 85 F1 | 	sub	objptr, ##5836
270a0                 | LR__3023
270a0                 | LR__3024
270a0                 | '     
270a0                 | ' if ((f>=$80000) && (t<$80000)) 
270a0     00 04 00 FF 
270a4     00 26 56 F2 | 	cmps	local01, ##524288 wc
270a8     80 00 90 CD |  if_b	jmp	#LR__3026
270ac     00 04 00 FF 
270b0     00 32 56 F2 | 	cmps	local07, ##524288 wc
270b4     74 00 90 3D |  if_ae	jmp	#LR__3026
270b8                 | '   repeat y from y1a to y2a
270b8     15 41 02 F6 | 	mov	local14, local03
270bc     15 2F 52 F2 | 	cmps	local05, local03 wc
270c0     01 4A 86 F6 | 	negc	local19, #1
270c4     17 4D 02 F6 | 	mov	local20, local05
270c8     25 4D 02 F1 | 	add	local20, local19
270cc     0B 00 00 FF 
270d0     CC E4 05 F1 | 	add	objptr, ##5836
270d4                 | LR__3025
270d4     1B 49 02 F6 | 	mov	local18, local09
270d8     15 49 82 F1 | 	sub	local18, local03
270dc     20 49 02 F1 | 	add	local18, local14
270e0     1C 49 02 FD | 	qmul	local18, local10
270e4                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
270e4     19 13 02 F6 | 	mov	arg01, local07
270e8     18 48 62 FD | 	getqx	local18
270ec     18 41 02 FD | 	qmul	local14, local06
270f0     24 13 02 F1 | 	add	arg01, local18
270f4     1A 13 02 F1 | 	add	arg01, local08
270f8     13 15 02 F6 | 	mov	arg02, local01
270fc     16 17 02 F6 | 	mov	arg03, local04
27100     14 17 82 F1 | 	sub	arg03, local02
27104     01 16 06 F1 | 	add	arg03, #1
27108     18 48 62 FD | 	getqx	local18
2710c     24 15 02 F1 | 	add	arg02, local18
27110     14 15 02 F1 | 	add	arg02, local02
27114     54 03 B0 FD | 	call	#_psram_spin2_read1
27118     25 41 02 F1 | 	add	local14, local19
2711c     26 41 0A F2 | 	cmp	local14, local20 wz
27120     B0 FF 9F 5D |  if_ne	jmp	#LR__3025
27124     0B 00 00 FF 
27128     CC E4 85 F1 | 	sub	objptr, ##5836
2712c                 | LR__3026
2712c                 | '     
2712c                 | ' if ((f<$80000) && (t>=$80000)) 
2712c     00 04 00 FF 
27130     00 26 56 F2 | 	cmps	local01, ##524288 wc
27134     84 00 90 3D |  if_ae	jmp	#LR__3028
27138     00 04 00 FF 
2713c     00 32 56 F2 | 	cmps	local07, ##524288 wc
27140     78 00 90 CD |  if_b	jmp	#LR__3028
27144                 | '   t:=t & $FFFFFFF
27144     7C 32 06 F4 | 	bitl	local07, #124
27148                 | '   repeat y from y1a to y2a
27148     15 41 02 F6 | 	mov	local14, local03
2714c     15 2F 52 F2 | 	cmps	local05, local03 wc
27150     01 4E 86 F6 | 	negc	local21, #1
27154     17 51 02 F6 | 	mov	local22, local05
27158     27 51 02 F1 | 	add	local22, local21
2715c     0B 00 00 FF 
27160     CC E4 05 F1 | 	add	objptr, ##5836
27164                 | LR__3027
27164     18 41 02 FD | 	qmul	local14, local06
27168                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
27168     13 13 02 F6 | 	mov	arg01, local01
2716c     1B 4D 02 F6 | 	mov	local20, local09
27170     15 4D 82 F1 | 	sub	local20, local03
27174     20 4D 02 F1 | 	add	local20, local14
27178     18 4A 62 FD | 	getqx	local19
2717c     1C 4D 02 FD | 	qmul	local20, local10
27180     25 13 02 F1 | 	add	arg01, local19
27184     14 13 02 F1 | 	add	arg01, local02
27188     19 15 02 F6 | 	mov	arg02, local07
2718c     16 17 02 F6 | 	mov	arg03, local04
27190     14 17 82 F1 | 	sub	arg03, local02
27194     01 16 06 F1 | 	add	arg03, #1
27198     18 4C 62 FD | 	getqx	local20
2719c     26 15 02 F1 | 	add	arg02, local20
271a0     1A 15 02 F1 | 	add	arg02, local08
271a4     60 03 B0 FD | 	call	#_psram_spin2_write
271a8     27 41 02 F1 | 	add	local14, local21
271ac     28 41 0A F2 | 	cmp	local14, local22 wz
271b0     B0 FF 9F 5D |  if_ne	jmp	#LR__3027
271b4     0B 00 00 FF 
271b8     CC E4 85 F1 | 	sub	objptr, ##5836
271bc                 | LR__3028
271bc                 | '     
271bc                 | ' if ((f<$80000) && (t<$80000)) 
271bc     00 04 00 FF 
271c0     00 26 56 F2 | 	cmps	local01, ##524288 wc
271c4     00 04 00 CF 
271c8     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
271cc     64 00 90 3D |  if_ae	jmp	#LR__3030
271d0                 | '   repeat y from y1a to y2a
271d0     15 41 02 F6 | 	mov	local14, local03
271d4     15 2F 52 F2 | 	cmps	local05, local03 wc
271d8     01 52 86 F6 | 	negc	local23, #1
271dc     17 55 02 F6 | 	mov	local24, local05
271e0     29 55 02 F1 | 	add	local24, local23
271e4                 | LR__3029
271e4     18 41 02 FD | 	qmul	local14, local06
271e8                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
271e8     13 13 02 F6 | 	mov	arg01, local01
271ec     1B 51 02 F6 | 	mov	local22, local09
271f0     15 51 82 F1 | 	sub	local22, local03
271f4     20 51 02 F1 | 	add	local22, local14
271f8     18 4E 62 FD | 	getqx	local21
271fc     1C 51 02 FD | 	qmul	local22, local10
27200     27 13 02 F1 | 	add	arg01, local21
27204     14 13 02 F1 | 	add	arg01, local02
27208     19 15 02 F6 | 	mov	arg02, local07
2720c     16 17 02 F6 | 	mov	arg03, local04
27210     14 17 82 F1 | 	sub	arg03, local02
27214     01 16 06 F1 | 	add	arg03, #1
27218     18 50 62 FD | 	getqx	local22
2721c     28 15 02 F1 | 	add	arg02, local22
27220     1A 15 02 F1 | 	add	arg02, local08
27224     98 0D B0 FD | 	call	#__system____builtin_memmove
27228     29 41 02 F1 | 	add	local14, local23
2722c     2A 41 0A F2 | 	cmp	local14, local24 wz
27230     B0 FF 9F 5D |  if_ne	jmp	#LR__3029
27234                 | LR__3030
27234     A7 F0 03 F6 | 	mov	ptra, fp
27238     B2 00 A0 FD | 	call	#popregs_
2723c                 | _hg010b_spin2_blit_ret
2723c     2D 00 64 FD | 	ret
27240                 | 
27240                 | ' 
27240                 | ' '..............................................................................
27240                 | ' 
27240                 | ' {{
27240                 | ' }}
27240                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
27240                 | _psram_spin2_startx
27240     04 4A 05 F6 | 	mov	COUNT_, #4
27244     A8 00 A0 FD | 	call	#pushregs_
27248     09 27 02 F6 | 	mov	local01, arg01
2724c     0B 29 02 F6 | 	mov	local02, arg03
27250     0C 2B 02 F6 | 	mov	local03, arg04
27254                 | '     stop() ' restart driver if required
27254     54 01 B0 FD | 	call	#_psram_spin2_stop
27258     00 26 0E F2 | 	cmp	local01, #0 wz
2725c     14 26 06 AB |  if_e	rdlong	local01, #20
27260     13 15 52 F6 | 	abs	arg02, local01 wc
27264     A1 07 00 FF 
27268     40 14 16 FD | 	qdiv	arg02, ##1000000
2726c                 | ' 
2726c                 | '     ' use current frequency if none specified
2726c                 | ' 
2726c                 | '     if freq == 0 
2726c                 | '         freq := clkfreq 
2726c                 | ' 
2726c                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
2726c                 | ' 
2726c                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
2726c                 | '     if burst < 0
2726c                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
2726c     18 14 62 FD | 	getqx	arg02
27270     0A 19 82 F6 | 	negc	arg04, arg02
27274     03 18 66 F0 | 	shl	arg04, #3
27278     84 18 86 F1 | 	sub	arg04, #132
2727c     04 18 46 F0 | 	shr	arg04, #4
27280     04 18 66 F0 | 	shl	arg04, #4
27284     00 18 56 F2 | 	cmps	arg04, #0 wc
27288     0E FA 65 C6 |  if_b	neg	result1, #14
2728c     10 01 90 CD |  if_b	jmp	#LR__3043
27290                 | ' 
27290                 | '     ' compute the input delay
27290                 | ' 
27290                 | '     if delay <= 0
27290     01 28 56 F2 | 	cmps	local02, #1 wc
27294     10 00 90 3D |  if_ae	jmp	#LR__3040
27298                 | '         delay := lookupDelay(freq)
27298     13 13 02 F6 | 	mov	arg01, local01
2729c     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
272a0     FD 28 02 F6 | 	mov	local02, result1
272a4     04 00 90 FD | 	jmp	#LR__3041
272a8                 | LR__3040
272a8                 | '     else
272a8                 | '         delay <#= $f ' limit to 15
272a8     0F 28 66 F3 | 	fles	local02, #15
272ac                 | LR__3041
272ac                 | ' 
272ac                 | '     ' create our lock
272ac                 | ' 
272ac                 | '     driverlock := LOCKNEW()  
272ac     00 FA 05 F6 | 	mov	result1, #0
272b0     04 FA 61 FD | 	locknew	result1
272b4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
272b8     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
272bc                 | '     if driverlock == -1
272bc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
272c0     FF FF 7F FF 
272c4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
272c8                 | '         return ERR_NO_LOCK
272c8     1A FA 65 A6 |  if_e	neg	result1, #26
272cc     D0 00 90 AD |  if_e	jmp	#LR__3043
272d0                 | ' 
272d0                 | '     ' patch in the proper data and HUB addresses to the startup structure
272d0                 | ' 
272d0                 | '     long[@startupData][0]:=clkfreq
272d0     14 26 06 FB | 	rdlong	local01, #20
272d4     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
272d8     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
272dc                 | ' '    long[@startupData][1]:=$1000_0000
272dc                 | '     long[@startupData][5]:=@deviceData
272dc     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
272e0     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
272e4     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
272e8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
272ec     14 14 06 F1 | 	add	arg02, #20
272f0     0A 27 62 FC | 	wrlong	local01, arg02
272f4                 | '     long[@startupData][6]:=@qosData
272f4     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
272f8     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
272fc     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
27300     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
27304     18 14 06 F1 | 	add	arg02, #24
27308     0A 27 62 FC | 	wrlong	local01, arg02
2730c                 | '     long[@startupData][7]:=$7FF00
2730c     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
27310     1C 26 06 F1 | 	add	local01, #28
27314     FF 03 80 FF 
27318     13 01 6A FC | 	wrlong	##524032, local01
2731c                 | ' 
2731c                 | '     ' setup some default bank and QoS parameter values
2731c                 | ' 
2731c                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
2731c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
27320     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
27324     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
27328     10 18 66 F0 | 	shl	arg04, #16
2732c     0C 28 66 F0 | 	shl	local02, #12
27330     14 19 42 F5 | 	or	arg04, local02
27334     18 18 46 F5 | 	or	arg04, #24
27338     0C 15 02 F6 | 	mov	arg02, arg04
2733c     02 16 06 F6 | 	mov	arg03, #2
27340     A0 00 A0 FD | 	call	#\builtin_longfill_
27344                 | '     longfill(@qosData, $FFFF0000, 8)
27344     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
27348     07 16 06 F6 | 	mov	arg03, #7
2734c     28 16 62 FD | 	setq	arg03
27350     80 FF FF FF 
27354     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
27358                 | ' 
27358                 | '     ' get the address of the PSRAM memory driver so we can start it
27358                 | ' 
27358                 | '     driverAddr:= driver.getDriverAddr()
27358                 | '     return @driver_start
27358     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
2735c     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
27360     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
27364                 | ' 
27364                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
27364                 | ' 
27364                 | '     if desiredcog < 0
27364     00 2A 56 F2 | 	cmps	local03, #0 wc
27368                 | '         desiredcog := NEWCOG
27368     10 2A 06 C6 |  if_b	mov	local03, #16
2736c                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
2736c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
27370     15 2D 02 F6 | 	mov	local04, local03
27374     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
27378     0A 2D F2 FC | 	coginit	local04, arg02 wc
2737c     01 2C 66 C6 |  if_b	neg	local04, #1
27380     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
27384     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
27388                 | '     repeat until long[@startupData] == 0 
27388     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
2738c                 | LR__3042
2738c     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
27390     F8 FF 9F 5D |  if_ne	jmp	#LR__3042
27394                 | ' 
27394                 | '     return drivercog
27394     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
27398     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
2739c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
273a0                 | LR__3043
273a0     A7 F0 03 F6 | 	mov	ptra, fp
273a4     B2 00 A0 FD | 	call	#popregs_
273a8                 | _psram_spin2_startx_ret
273a8     2D 00 64 FD | 	ret
273ac                 | 
273ac                 | ' 
273ac                 | ' '..............................................................................
273ac                 | ' 
273ac                 | ' {{
273ac                 | ' }}
273ac                 | ' PUB stop() : i
273ac                 | _psram_spin2_stop
273ac     00 00 06 F6 | 	mov	_var01, #0
273b0                 | '     if drivercog <> -1
273b0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
273b4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
273b8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
273bc     FF FF 7F FF 
273c0     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
273c4     70 00 90 AD |  if_e	jmp	#LR__3053
273c8                 | '         cogstop(drivercog) ' a rather brutal stop
273c8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
273cc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
273d0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
273d4     03 12 62 FD | 	cogstop	arg01
273d8     97 26 48 FB | 	callpa	#(@LR__3052-@LR__3050)>>2,fcache_load_ptr_
273dc                 | '         repeat i from 0 to 7
273dc                 | LR__3050
273dc                 | '             if long[$7FF00][i*3] < 0
273dc     00 FB 01 F6 | 	mov	result1, _var01
273e0     01 FA 65 F0 | 	shl	result1, #1
273e4     00 FB 01 F1 | 	add	result1, _var01
273e8     02 FA 65 F0 | 	shl	result1, #2
273ec     FF 03 00 FF 
273f0     00 FB 05 F1 | 	add	result1, ##524032
273f4     FD FA 01 FB | 	rdlong	result1, result1
273f8     00 FA 55 F2 | 	cmps	result1, #0 wc
273fc     1C 00 90 3D |  if_ae	jmp	#LR__3051
27400                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
27400     00 FB 01 F6 | 	mov	result1, _var01
27404     01 FA 65 F0 | 	shl	result1, #1
27408     00 FB 01 F1 | 	add	result1, _var01
2740c     02 FA 65 F0 | 	shl	result1, #2
27410     FF 03 00 FF 
27414     00 FB 05 F1 | 	add	result1, ##524032
27418     FD 20 68 FC | 	wrlong	#16, result1
2741c                 | LR__3051
2741c     01 00 06 F1 | 	add	_var01, #1
27420     08 00 56 F2 | 	cmps	_var01, #8 wc
27424     B4 FF 9F CD |  if_b	jmp	#LR__3050
27428                 | LR__3052
27428                 | '         drivercog := -1
27428     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2742c     FF FF FF FF 
27430     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
27434     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
27438                 | LR__3053
27438                 | '     if driverlock <> -1
27438     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
2743c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
27440     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
27444     FF FF 7F FF 
27448     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
2744c                 | '         LOCKRET(driverlock)
2744c     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
27450     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
27454     05 12 62 5D |  if_ne	lockret	arg01
27458                 | '         driverlock := -1
27458     FF FF FF 5F 
2745c     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
27460     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
27464     00 FB 01 F6 | 	mov	result1, _var01
27468                 | _psram_spin2_stop_ret
27468     2D 00 64 FD | 	ret
2746c                 | 
2746c                 | ' 
2746c                 | ' '..............................................................................
2746c                 | ' 
2746c                 | ' {{
2746c                 | ' }}
2746c                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
2746c                 | _psram_spin2_read1
2746c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
2746c                 | '     if drivercog == -1 ' driver must be running
2746c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
27470     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
27474     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
27478     FF FF 7F FF 
2747c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
27480                 | '         return ERR_INACTIVE
27480     0F FA 65 A6 |  if_e	neg	result1, #15
27484     7C 00 90 AD |  if_e	jmp	#LR__3061
27488                 | '     if count == 0 ' don't even bother reading
27488     00 16 0E F2 | 	cmp	arg03, #0 wz
2748c                 | '         return 0
2748c     00 FA 05 A6 |  if_e	mov	result1, #0
27490     70 00 90 AD |  if_e	jmp	#LR__3061
27494                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
27494     00 FA 05 F6 | 	mov	result1, #0
27498     01 FA 61 FD | 	cogid	result1
2749c     FD 00 02 F6 | 	mov	_var01, result1
274a0     01 00 66 F0 | 	shl	_var01, #1
274a4     FD 00 02 F1 | 	add	_var01, result1
274a8     02 00 66 F0 | 	shl	_var01, #2
274ac     FF 03 00 FF 
274b0     00 03 06 F6 | 	mov	_var02, ##524032
274b4     00 03 02 F1 | 	add	_var02, _var01
274b8                 | '     if long[mailbox] < 0
274b8     01 01 02 FB | 	rdlong	_var01, _var02
274bc     00 00 56 F2 | 	cmps	_var01, #0 wc
274c0                 | '         return ERR_MAILBOX_BUSY
274c0     1C FA 65 C6 |  if_b	neg	result1, #28
274c4     3C 00 90 CD |  if_b	jmp	#LR__3061
274c8                 | '     long[mailbox][2] := count
274c8     08 02 06 F1 | 	add	_var02, #8
274cc     01 17 62 FC | 	wrlong	arg03, _var02
274d0                 | '     long[mailbox][1] := dstHubAddr
274d0     04 02 86 F1 | 	sub	_var02, #4
274d4     01 13 62 FC | 	wrlong	arg01, _var02
274d8     04 02 86 F1 | 	sub	_var02, #4
274dc                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
274dc     0A 05 02 F6 | 	mov	_var03, arg02
274e0     D9 04 06 F4 | 	bitl	_var03, #217
274e4     00 00 58 FF 
274e8     00 00 06 F6 | 	mov	_var01, ##-1342177280
274ec     02 01 02 F1 | 	add	_var01, _var03
274f0     01 01 62 FC | 	wrlong	_var01, _var02
274f4                 | '     repeat
274f4                 | LR__3060
274f4                 | '         result := long[mailbox]    
274f4     01 05 02 FB | 	rdlong	_var03, _var02
274f8     00 04 56 F2 | 	cmps	_var03, #0 wc
274fc     F4 FF 9F CD |  if_b	jmp	#LR__3060
27500                 | '     while result < 0   
27500                 | '     return -result                       'return success or error
27500     02 FB 61 F6 | 	neg	result1, _var03
27504                 | LR__3061
27504                 | _psram_spin2_read1_ret
27504     2D 00 64 FD | 	ret
27508                 | 
27508                 | ' 
27508                 | ' '..............................................................................
27508                 | ' 
27508                 | ' {{
27508                 | ' }}
27508                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
27508                 | _psram_spin2_write
27508                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
27508                 | '     if drivercog == -1 ' driver must be running
27508     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2750c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
27510     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
27514     FF FF 7F FF 
27518     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
2751c                 | '         return ERR_INACTIVE
2751c     0F FA 65 A6 |  if_e	neg	result1, #15
27520     7C 00 90 AD |  if_e	jmp	#LR__3071
27524                 | '     if count == 0 ' don't even bother writing
27524     00 16 0E F2 | 	cmp	arg03, #0 wz
27528                 | '         return 0
27528     00 FA 05 A6 |  if_e	mov	result1, #0
2752c     70 00 90 AD |  if_e	jmp	#LR__3071
27530                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
27530     00 FA 05 F6 | 	mov	result1, #0
27534     01 FA 61 FD | 	cogid	result1
27538     FD 00 02 F6 | 	mov	_var01, result1
2753c     01 00 66 F0 | 	shl	_var01, #1
27540     FD 00 02 F1 | 	add	_var01, result1
27544     02 00 66 F0 | 	shl	_var01, #2
27548     FF 03 00 FF 
2754c     00 03 06 F6 | 	mov	_var02, ##524032
27550     00 03 02 F1 | 	add	_var02, _var01
27554                 | '     if long[mailbox] < 0
27554     01 01 02 FB | 	rdlong	_var01, _var02
27558     00 00 56 F2 | 	cmps	_var01, #0 wc
2755c                 | '         return ERR_MAILBOX_BUSY
2755c     1C FA 65 C6 |  if_b	neg	result1, #28
27560     3C 00 90 CD |  if_b	jmp	#LR__3071
27564                 | '     long[mailbox][2] := count
27564     08 02 06 F1 | 	add	_var02, #8
27568     01 17 62 FC | 	wrlong	arg03, _var02
2756c                 | '     long[mailbox][1] := srcHubAddr
2756c     04 02 86 F1 | 	sub	_var02, #4
27570     01 13 62 FC | 	wrlong	arg01, _var02
27574     04 02 86 F1 | 	sub	_var02, #4
27578                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
27578     0A 05 02 F6 | 	mov	_var03, arg02
2757c     D9 04 06 F4 | 	bitl	_var03, #217
27580     00 00 78 FF 
27584     00 00 06 F6 | 	mov	_var01, ##-268435456
27588     02 01 02 F1 | 	add	_var01, _var03
2758c     01 01 62 FC | 	wrlong	_var01, _var02
27590                 | '     repeat
27590                 | LR__3070
27590                 | '         result := long[mailbox]    
27590     01 05 02 FB | 	rdlong	_var03, _var02
27594     00 04 56 F2 | 	cmps	_var03, #0 wc
27598     F4 FF 9F CD |  if_b	jmp	#LR__3070
2759c                 | '     while result < 0   
2759c                 | '     return -result                       'return success or error
2759c     02 FB 61 F6 | 	neg	result1, _var03
275a0                 | LR__3071
275a0                 | _psram_spin2_write_ret
275a0     2D 00 64 FD | 	ret
275a4                 | 
275a4                 | ' 
275a4                 | ' ' generalized fill
275a4                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
275a4                 | _psram_spin2_fill
275a4     09 01 02 F6 | 	mov	_var01, arg01
275a8     0A 03 02 F6 | 	mov	_var02, arg02
275ac     0B 05 02 F6 | 	mov	_var03, arg03
275b0     0D 07 02 F6 | 	mov	_var04, arg05
275b4                 | '     case datasize 
275b4     01 06 86 F1 | 	sub	_var04, #1
275b8     04 06 26 F3 | 	fle	_var04, #4
275bc     30 06 62 FD | 	jmprel	_var04
275c0                 | LR__3080
275c0     10 00 90 FD | 	jmp	#LR__3081
275c4     18 00 90 FD | 	jmp	#LR__3082
275c8     2C 00 90 FD | 	jmp	#LR__3084
275cc     1C 00 90 FD | 	jmp	#LR__3083
275d0     24 00 90 FD | 	jmp	#LR__3084
275d4                 | LR__3081
275d4                 | '         1: req := driver.R_WRITEBYTE
275d4     00 00 60 FF 
275d8     00 08 06 F6 | 	mov	_var05, ##-1073741824
275dc     20 00 90 FD | 	jmp	#LR__3085
275e0                 | LR__3082
275e0                 | '         2: req := driver.R_WRITEWORD
275e0     00 00 68 FF 
275e4     00 08 06 F6 | 	mov	_var05, ##-805306368
275e8     14 00 90 FD | 	jmp	#LR__3085
275ec                 | LR__3083
275ec                 | '         4: req := driver.R_WRITELONG
275ec     00 00 70 FF 
275f0     00 08 06 F6 | 	mov	_var05, ##-536870912
275f4     08 00 90 FD | 	jmp	#LR__3085
275f8                 | LR__3084
275f8                 | '         other : return ERR_INVALID
275f8     06 FA 65 F6 | 	neg	result1, #6
275fc     94 00 90 FD | 	jmp	#LR__3087
27600                 | LR__3085
27600                 | '     if count == 0   ' nothing to do
27600     00 04 0E F2 | 	cmp	_var03, #0 wz
27604                 | '         return 0
27604     00 FA 05 A6 |  if_e	mov	result1, #0
27608     88 00 90 AD |  if_e	jmp	#LR__3087
2760c                 | '     if drivercog == -1
2760c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
27610     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
27614     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
27618     FF FF 7F FF 
2761c     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
27620                 | '         return ERR_INACTIVE
27620     0F FA 65 A6 |  if_e	neg	result1, #15
27624     6C 00 90 AD |  if_e	jmp	#LR__3087
27628                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
27628     00 FA 05 F6 | 	mov	result1, #0
2762c     01 FA 61 FD | 	cogid	result1
27630     FD 06 02 F6 | 	mov	_var04, result1
27634     01 06 66 F0 | 	shl	_var04, #1
27638     FD 06 02 F1 | 	add	_var04, result1
2763c     02 06 66 F0 | 	shl	_var04, #2
27640     FF 03 00 FF 
27644     00 0B 06 F6 | 	mov	_var06, ##524032
27648     03 0B 02 F1 | 	add	_var06, _var04
2764c                 | '     if long[mailbox] < 0
2764c     05 07 02 FB | 	rdlong	_var04, _var06
27650     00 06 56 F2 | 	cmps	_var04, #0 wc
27654                 | '         return ERR_MAILBOX_BUSY
27654     1C FA 65 C6 |  if_b	neg	result1, #28
27658     38 00 90 CD |  if_b	jmp	#LR__3087
2765c                 | '     long[mailbox][2] := count
2765c     08 0A 06 F1 | 	add	_var06, #8
27660     05 05 62 FC | 	wrlong	_var03, _var06
27664                 | '     long[mailbox][1] := pattern
27664     04 0A 86 F1 | 	sub	_var06, #4
27668     05 03 62 FC | 	wrlong	_var02, _var06
2766c     04 0A 86 F1 | 	sub	_var06, #4
27670                 | '     long[mailbox] := req + (addr & $1ffffff)
27670     04 0D 02 F6 | 	mov	_var07, _var05
27674     00 0F 02 F6 | 	mov	_var08, _var01
27678     D9 0E 06 F4 | 	bitl	_var08, #217
2767c     07 0D 02 F1 | 	add	_var07, _var08
27680     05 0D 62 FC | 	wrlong	_var07, _var06
27684                 | '     repeat
27684                 | LR__3086
27684                 | '         r := long[mailbox]
27684     05 0F 02 FB | 	rdlong	_var08, _var06
27688     00 0E 56 F2 | 	cmps	_var08, #0 wc
2768c     F4 FF 9F CD |  if_b	jmp	#LR__3086
27690                 | '     while r < 0
27690                 | '     return -r                  ' return 0 for success or negated error code
27690     07 FB 61 F6 | 	neg	result1, _var08
27694                 | LR__3087
27694                 | _psram_spin2_fill_ret
27694     2D 00 64 FD | 	ret
27698                 | 
27698                 | ' 
27698                 | ' '..............................................................................
27698                 | ' 
27698                 | ' {{
27698                 | ' }}
27698                 | ' PUB setQos(cog, qos) : result | mailbox
27698                 | _psram_spin2_setQos
27698     09 01 02 F6 | 	mov	_var01, arg01
2769c                 | '     if drivercog == -1 ' driver must be running
2769c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
276a0     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
276a4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
276a8     FF FF 7F FF 
276ac     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
276b0                 | '         return ERR_INACTIVE
276b0     0F FA 65 A6 |  if_e	neg	result1, #15
276b4     9C 00 90 AD |  if_e	jmp	#LR__3094
276b8                 | '     if cog < 0 or cog > 7 ' enforce cog id range
276b8     00 00 56 F2 | 	cmps	_var01, #0 wc
276bc     08 00 90 CD |  if_b	jmp	#LR__3090
276c0     08 00 56 F2 | 	cmps	_var01, #8 wc
276c4     08 00 90 CD |  if_b	jmp	#LR__3091
276c8                 | LR__3090
276c8                 | '         return ERR_INVALID
276c8     06 FA 65 F6 | 	neg	result1, #6
276cc     84 00 90 FD | 	jmp	#LR__3094
276d0                 | LR__3091
276d0                 | '     long[@qosData][cog] := qos & !$1ff
276d0     FF 15 26 F5 | 	andn	arg02, #511
276d4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
276d8     02 00 66 F0 | 	shl	_var01, #2
276dc     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
276e0     00 15 62 FC | 	wrlong	arg02, _var01
276e4                 | '     mailbox := $7FF00 + drivercog*12
276e4     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
276e8     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
276ec     02 07 02 F6 | 	mov	_var04, _var03
276f0     01 06 66 F0 | 	shl	_var04, #1
276f4     02 07 02 F1 | 	add	_var04, _var03
276f8     02 06 66 F0 | 	shl	_var04, #2
276fc     FF 03 00 FF 
27700     00 09 06 F6 | 	mov	_var05, ##524032
27704     03 09 02 F1 | 	add	_var05, _var04
27708                 | '     repeat until LOCKTRY(driverlock)
27708     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
2770c                 | LR__3092
2770c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
27710     06 12 72 FD | 	locktry	arg01 wc
27714     F4 FF 9F 3D |  if_ae	jmp	#LR__3092
27718     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2771c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
2771c     00 06 06 F6 | 	mov	_var04, #0
27720     01 06 62 FD | 	cogid	_var04
27724     00 00 78 FF 
27728     00 02 06 F6 | 	mov	_var02, ##-268435456
2772c     03 03 02 F1 | 	add	_var02, _var04
27730     04 03 62 FC | 	wrlong	_var02, _var05
27734                 | '     repeat while long[mailbox] < 0
27734                 | LR__3093
27734     04 03 02 FB | 	rdlong	_var02, _var05
27738     00 02 56 F2 | 	cmps	_var02, #0 wc
2773c     F4 FF 9F CD |  if_b	jmp	#LR__3093
27740                 | '     LOCKREL(driverlock)
27740     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
27744     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
27748     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2774c     07 12 72 FD | 	lockrel	arg01 wc
27750     00 FA 05 F6 | 	mov	result1, #0
27754                 | LR__3094
27754                 | _psram_spin2_setQos_ret
27754     2D 00 64 FD | 	ret
27758                 | 
27758                 | ' 
27758                 | ' '..............................................................................
27758                 | ' 
27758                 | ' {{
27758                 | ' }}
27758                 | ' PRI lookupDelay(freq) : delay | profile
27758                 | _psram_spin2_lookupDelay
27758                 | '     profile := @delayTable
27758     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
2775c     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
27760                 | '     delay := long[profile][0]
27760     00 03 02 FB | 	rdlong	_var02, _var01
27764                 | '     repeat while long[profile][1] 
27764     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
27768     97 16 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
2776c                 | LR__3100
2776c     04 00 06 F1 | 	add	_var01, #4
27770     00 FB 09 FB | 	rdlong	result1, _var01 wz
27774     04 00 86 F1 | 	sub	_var01, #4
27778     1C 00 90 AD |  if_e	jmp	#LR__3102
2777c                 | '         if freq +< long[profile][1] 
2777c     04 00 06 F1 | 	add	_var01, #4
27780     00 FB 01 FB | 	rdlong	result1, _var01
27784     04 00 86 F1 | 	sub	_var01, #4
27788     FD 12 12 F2 | 	cmp	arg01, result1 wc
2778c                 | '             quit
2778c                 | '         profile += 4
2778c     04 00 06 31 |  if_ae	add	_var01, #4
27790                 | '         delay++
27790     01 02 06 31 |  if_ae	add	_var02, #1
27794     D4 FF 9F 3D |  if_ae	jmp	#LR__3100
27798                 | LR__3101
27798                 | LR__3102
27798     01 FB 01 F6 | 	mov	result1, _var02
2779c                 | _psram_spin2_lookupDelay_ret
2779c     2D 00 64 FD | 	ret
277a0                 | 
277a0                 | ' 
277a0                 | ' PUB start() : r
277a0                 | _usbnew_spin2_start
277a0     00 00 06 F6 | 	mov	_var01, #0
277a4                 | '   ifnot driver_cog
277a4     15 00 00 FF 
277a8     87 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
277ac     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
277b0     15 00 00 FF 
277b4     87 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
277b8     38 00 90 5D |  if_ne	jmp	#LR__3110
277bc                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
277bc     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
277c0     10 00 06 F6 | 	mov	_var01, #16
277c4     00 16 06 F6 | 	mov	arg03, #0
277c8     28 16 62 FD | 	setq	arg03
277cc     0A 01 F2 FC | 	coginit	_var01, arg02 wc
277d0     01 00 66 C6 |  if_b	neg	_var01, #1
277d4                 | '     if r >= 0
277d4     00 00 56 F2 | 	cmps	_var01, #0 wc
277d8                 | '       driver_cog := r+1
277d8     00 03 02 36 |  if_ae	mov	_var02, _var01
277dc     01 02 06 31 |  if_ae	add	_var02, #1
277e0     15 00 00 3F 
277e4     87 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
277e8     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
277ec     15 00 00 3F 
277f0     87 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
277f4                 | LR__3110
277f4     00 FB 01 F6 | 	mov	result1, _var01
277f8                 | _usbnew_spin2_start_ret
277f8     2D 00 64 FD | 	ret
277fc                 | 
277fc                 | '     '' (Always enabled)
277fc                 | ' 
277fc                 | ' '' Get current pressed state of a keyboard key
277fc                 | ' PUB keystate(key) : r | buf[2],tmp
277fc                 | _usbnew_spin2_keystate
277fc     00 04 06 F6 | 	mov	_var03, #0
27800                 | '   if key >= $E0 && key < $E8
27800     E0 12 56 F2 | 	cmps	arg01, #224 wc
27804     34 00 90 CD |  if_b	jmp	#LR__3120
27808     E8 12 56 F2 | 	cmps	arg01, #232 wc
2780c     2C 00 90 3D |  if_ae	jmp	#LR__3120
27810                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
27810     00 FA 05 F6 | 	mov	result1, #0
27814     13 00 00 FF 
27818     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
2781c     09 07 02 F6 | 	mov	_var04, arg01
27820     E0 06 86 F1 | 	sub	_var04, #224
27824     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
27828     03 09 4A F0 | 	shr	_var05, _var04 wz
2782c     13 00 00 FF 
27830     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
27834     01 FA 65 56 |  if_ne	neg	result1, #1
27838     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
2783c                 | LR__3120
2783c                 | '   else
2783c                 | '     '' Do this in inline ASM to ensure atomicity
2783c                 | '     tmp := @hkbd_report
2783c     13 00 00 FF 
27840     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
27844     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
27848                 | '     org
27848     13 00 00 FF 
2784c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
27850     97 1E 48 FB | 	callpa	#(@LR__3122-@LR__3121)>>2,fcache_load_ptr_
27854                 | LR__3121
27854 000             | 	org	0
27854 000 28 02 64 FD | 	setq	#1
27858 001 04 01 02 FB | 	rdlong	_var01, _var05
2785c 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
27860 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
27864 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
27868 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2786c 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
27870 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
27874 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
27878 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2787c 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
27880 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
27884 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
27888 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2788c 00e 01 04 66 A6 |  if_e	neg	_var03, #1
27890 00f             | LR__3122
27890                 | 	orgh
27890     02 FB 01 F6 | 	mov	result1, _var03
27894                 | _usbnew_spin2_keystate_ret
27894     2D 00 64 FD | 	ret
27898                 | 
27898                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
27898                 | ' 
27898                 | ' '' Return key event from buffer if there is one
27898                 | ' PUB get_key() : r | tail
27898                 | _usbnew_spin2_get_key
27898                 | '   tail := keyq_tail
27898     0F 00 00 FF 
2789c     D5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
278a0     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
278a4                 | '   if keyq_head == tail
278a4     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
278a8     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
278ac     0F 00 00 FF 
278b0     D4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
278b4     00 03 0A F2 | 	cmp	_var02, _var01 wz
278b8                 | '     return 0 ' No event
278b8     00 FA 05 A6 |  if_e	mov	result1, #0
278bc     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
278c0                 | '   r := keyq_data[tail]
278c0     00 03 02 F6 | 	mov	_var02, _var01
278c4     02 02 66 F0 | 	shl	_var02, #2
278c8     0F 00 00 FF 
278cc     D6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7894
278d0     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
278d4     01 FB 01 FB | 	rdlong	result1, _var02
278d8                 | '   if ++tail == KEYQUEUE_SIZE
278d8     01 00 06 F1 | 	add	_var01, #1
278dc     80 00 0E F2 | 	cmp	_var01, #128 wz
278e0                 | '     tail := 0
278e0     00 00 06 A6 |  if_e	mov	_var01, #0
278e4                 | '   keyq_tail := tail
278e4     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
278e8     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
278ec     0F 00 00 FF 
278f0     D5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
278f4                 | _usbnew_spin2_get_key_ret
278f4     2D 00 64 FD | 	ret
278f8                 | 
278f8                 | ' 
278f8                 | ' '' Emulate mouse movement
278f8                 | ' PUB mouse_move(x,y)
278f8                 | _usbnew_spin2_mouse_move
278f8     02 4A 05 F6 | 	mov	COUNT_, #2
278fc     A8 00 A0 FD | 	call	#pushregs_
27900     09 27 02 F6 | 	mov	local01, arg01
27904     0A 29 02 F6 | 	mov	local02, arg02
27908                 | '   mouse_lock := 1
27908     14 00 00 FF 
2790c     F1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
27910     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
27914     14 00 00 FF 
27918     F1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
2791c                 | '   waitus(2) ' hope driver is now done
2791c     02 12 06 F6 | 	mov	arg01, #2
27920     4C 0B B0 FD | 	call	#__system___waitus
27924                 | '   mouse_xacc := x
27924     14 00 00 FF 
27928     E1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
2792c     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
27930                 | '   mouse_yacc := y
27930     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
27934     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
27938                 | '   if mouse_outptr
27938     05 00 00 FF 
2793c     15 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
27940     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
27944     0F 00 00 FF 
27948     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
2794c     24 00 90 AD |  if_e	jmp	#LR__3130
27950                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
27950     10 28 66 F0 | 	shl	local02, #16
27954     13 27 32 F9 | 	getword	local01, local01, #0
27958     13 29 42 F5 | 	or	local02, local01
2795c     0F 00 00 FF 
27960     D0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7888
27964     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
27968     0F 00 00 FF 
2796c     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
27970     13 29 62 FC | 	wrlong	local02, local01
27974                 | LR__3130
27974                 | '   mouse_lock := 0
27974     14 00 00 FF 
27978     F1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
2797c     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
27980     14 00 00 FF 
27984     F1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
27988     A7 F0 03 F6 | 	mov	ptra, fp
2798c     B2 00 A0 FD | 	call	#popregs_
27990                 | _usbnew_spin2_mouse_move_ret
27990     2D 00 64 FD | 	ret
27994                 | 
27994                 | ' 
27994                 | ' '' Get all button states for a device
27994                 | ' PUB hidpad_buttons(dev) : r 
27994                 | _usbnew_spin2_hidpad_buttons
27994                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
27994     13 00 00 FF 
27998     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
2799c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
279a0     05 12 66 F0 | 	shl	arg01, #5
279a4     09 FB 01 F1 | 	add	result1, arg01
279a8     18 FA 05 F1 | 	add	result1, #24
279ac     FD FA 01 FB | 	rdlong	result1, result1
279b0     13 00 00 FF 
279b4     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
279b8                 | _usbnew_spin2_hidpad_buttons_ret
279b8     2D 00 64 FD | 	ret
279bc                 | 
279bc                 | ' 
279bc                 | ' '' Get state of an axis (normalized between -32768 and 32767)
279bc                 | ' PUB hidpad_axis(dev,axnum) : r
279bc                 | _usbnew_spin2_hidpad_axis
279bc                 | '   if axnum +>= 8
279bc     08 14 16 F2 | 	cmp	arg02, #8 wc
279c0                 | '     return 0
279c0     00 FA 05 36 |  if_ae	mov	result1, #0
279c4     34 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
279c8                 | '   else 
279c8                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
279c8     13 00 00 FF 
279cc     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
279d0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
279d4     05 12 66 F0 | 	shl	arg01, #5
279d8     09 FB 01 F1 | 	add	result1, arg01
279dc     04 12 06 F6 | 	mov	arg01, #4
279e0     0A 13 02 F1 | 	add	arg01, arg02
279e4     01 12 66 F0 | 	shl	arg01, #1
279e8     FD 12 02 F1 | 	add	arg01, result1
279ec     09 FB E1 FA | 	rdword	result1, arg01
279f0     0F FA 65 F7 | 	signx	result1, #15
279f4     13 00 00 FF 
279f8     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
279fc                 | _usbnew_spin2_hidpad_axis_ret
279fc     2D 00 64 FD | 	ret
27a00                 | 
27a00                 | ' 
27a00                 | ' '' Get state of a hat
27a00                 | ' PUB hidpad_hat(dev,hatnum) : r
27a00                 | _usbnew_spin2_hidpad_hat
27a00                 | '   if hatnum +>= 4
27a00     04 14 16 F2 | 	cmp	arg02, #4 wc
27a04                 | '     return 0
27a04     00 FA 05 36 |  if_ae	mov	result1, #0
27a08     2C 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
27a0c                 | '   else 
27a0c                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
27a0c     13 00 00 FF 
27a10     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
27a14     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
27a18     05 12 66 F0 | 	shl	arg01, #5
27a1c     09 FB 01 F1 | 	add	result1, arg01
27a20     1C 12 06 F6 | 	mov	arg01, #28
27a24     0A 13 02 F1 | 	add	arg01, arg02
27a28     FD 12 02 F1 | 	add	arg01, result1
27a2c     09 FB C1 FA | 	rdbyte	result1, arg01
27a30     13 00 00 FF 
27a34     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
27a38                 | _usbnew_spin2_hidpad_hat_ret
27a38     2D 00 64 FD | 	ret
27a3c                 | 
27a3c                 | ' 
27a3c                 | ' 
27a3c                 | ' '--------------------------------------------------------------
27a3c                 | ' '---------- Init the variables, start the cog. ----------------
27a3c                 | ' '--------------------------------------------------------------
27a3c                 | ' 
27a3c                 | ' pub start(mbox,scope,cache) :cog,base | iii
27a3c                 | _audio096_spin2_start
27a3c     04 4A 05 F6 | 	mov	COUNT_, #4
27a40     A8 00 A0 FD | 	call	#pushregs_
27a44     09 27 02 F6 | 	mov	local01, arg01
27a48                 | ' 
27a48                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
27a48                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
27a48                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
27a48                 | ' 
27a48                 | ' mailboxaddr:=mbox 
27a48     F2 26 62 FC | 	wrlong	local01, objptr
27a4c                 | ' scope_ptr:=scope
27a4c     04 E4 05 F1 | 	add	objptr, #4
27a50     F2 14 62 FC | 	wrlong	arg02, objptr
27a54                 | ' cache_ptr:=cache
27a54     04 E4 05 F1 | 	add	objptr, #4
27a58     F2 16 62 FC | 	wrlong	arg03, objptr
27a5c                 | ' base:=@channel1[0]
27a5c     04 E4 05 F1 | 	add	objptr, #4
27a60     F2 28 02 F6 | 	mov	local02, objptr
27a64                 | ' long[$40]:=mbox
27a64     40 26 66 FC | 	wrlong	local01, #64
27a68                 | ' repeat iii from 0 to 7
27a68     00 2A 06 F6 | 	mov	local03, #0
27a6c     02 00 00 FF 
27a70     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
27a74     0C E4 85 F1 | 	sub	objptr, #12
27a78     97 BC 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
27a7c                 | LR__3140
27a7c                 | '   long[base+64*iii]:=0
27a7c     14 27 02 F6 | 	mov	local01, local02
27a80     15 FD 01 F6 | 	mov	result2, local03
27a84     06 FC 65 F0 | 	shl	result2, #6
27a88     FE 26 02 F1 | 	add	local01, result2
27a8c     13 01 68 FC | 	wrlong	#0, local01
27a90                 | '   long[base+64*iii+4]:=0
27a90     14 27 02 F6 | 	mov	local01, local02
27a94     15 FD 01 F6 | 	mov	result2, local03
27a98     06 FC 65 F0 | 	shl	result2, #6
27a9c     FE 26 02 F1 | 	add	local01, result2
27aa0     04 26 06 F1 | 	add	local01, #4
27aa4     13 01 68 FC | 	wrlong	#0, local01
27aa8                 | '   long[base+64*iii+12]:=0
27aa8     14 2D 02 F6 | 	mov	local04, local02
27aac     15 27 02 F6 | 	mov	local01, local03
27ab0     06 26 66 F0 | 	shl	local01, #6
27ab4     13 2D 02 F1 | 	add	local04, local01
27ab8     0C 2C 06 F1 | 	add	local04, #12
27abc     16 01 68 FC | 	wrlong	#0, local04
27ac0                 | '   long[base+64*iii+16]:=2 
27ac0     14 2D 02 F6 | 	mov	local04, local02
27ac4     15 27 02 F6 | 	mov	local01, local03
27ac8     06 26 66 F0 | 	shl	local01, #6
27acc     13 2D 02 F1 | 	add	local04, local01
27ad0     10 2C 06 F1 | 	add	local04, #16
27ad4     16 05 68 FC | 	wrlong	#2, local04
27ad8                 | '   word[base+64*iii+20]:=0
27ad8     14 2D 02 F6 | 	mov	local04, local02
27adc     15 27 02 F6 | 	mov	local01, local03
27ae0     06 26 66 F0 | 	shl	local01, #6
27ae4     13 2D 02 F1 | 	add	local04, local01
27ae8     14 2C 06 F1 | 	add	local04, #20
27aec     16 01 58 FC | 	wrword	#0, local04
27af0                 | '   word[base+64*iii+22]:=8192
27af0     14 2D 02 F6 | 	mov	local04, local02
27af4     15 27 02 F6 | 	mov	local01, local03
27af8     06 26 66 F0 | 	shl	local01, #6
27afc     13 2D 02 F1 | 	add	local04, local01
27b00     16 2C 06 F1 | 	add	local04, #22
27b04     10 00 80 FF 
27b08     16 01 58 FC | 	wrword	##8192, local04
27b0c                 | '   word[base+64*iii+24]:=4000+2*iii
27b0c     15 2D 02 F6 | 	mov	local04, local03
27b10     01 2C 66 F0 | 	shl	local04, #1
27b14     07 00 00 FF 
27b18     A0 27 06 F6 | 	mov	local01, ##4000
27b1c     16 27 02 F1 | 	add	local01, local04
27b20     14 2D 02 F6 | 	mov	local04, local02
27b24     15 FD 01 F6 | 	mov	result2, local03
27b28     06 FC 65 F0 | 	shl	result2, #6
27b2c     FE 2C 02 F1 | 	add	local04, result2
27b30     18 2C 06 F1 | 	add	local04, #24
27b34     16 27 52 FC | 	wrword	local01, local04
27b38                 | '   word[base+64*iii+26]:=2
27b38     14 2D 02 F6 | 	mov	local04, local02
27b3c     15 27 02 F6 | 	mov	local01, local03
27b40     06 26 66 F0 | 	shl	local01, #6
27b44     13 2D 02 F1 | 	add	local04, local01
27b48     1A 2C 06 F1 | 	add	local04, #26
27b4c     16 05 58 FC | 	wrword	#2, local04
27b50                 | '   long [base+64*iii+8]:=@null | $C0000000
27b50     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
27b54     3E 26 26 F4 | 	bith	local01, #62
27b58     14 2D 02 F6 | 	mov	local04, local02
27b5c     15 17 02 F6 | 	mov	arg03, local03
27b60     06 16 66 F0 | 	shl	arg03, #6
27b64     0B 2D 02 F1 | 	add	local04, arg03
27b68     08 2C 06 F1 | 	add	local04, #8
27b6c     16 27 62 FC | 	wrlong	local01, local04
27b70                 | '   long[base+64*iii+32]:=0
27b70     14 2D 02 F6 | 	mov	local04, local02
27b74     15 27 02 F6 | 	mov	local01, local03
27b78     06 26 66 F0 | 	shl	local01, #6
27b7c     13 2D 02 F1 | 	add	local04, local01
27b80     20 2C 06 F1 | 	add	local04, #32
27b84     16 01 68 FC | 	wrlong	#0, local04
27b88                 | '   long[base+64*iii+36]:=0
27b88     14 2D 02 F6 | 	mov	local04, local02
27b8c     15 27 02 F6 | 	mov	local01, local03
27b90     06 26 66 F0 | 	shl	local01, #6
27b94     13 2D 02 F1 | 	add	local04, local01
27b98     24 2C 06 F1 | 	add	local04, #36
27b9c     16 01 68 FC | 	wrlong	#0, local04
27ba0                 | '   long[base+64*iii+40]:=0
27ba0     14 2D 02 F6 | 	mov	local04, local02
27ba4     15 27 02 F6 | 	mov	local01, local03
27ba8     06 26 66 F0 | 	shl	local01, #6
27bac     13 2D 02 F1 | 	add	local04, local01
27bb0     28 2C 06 F1 | 	add	local04, #40
27bb4     16 01 68 FC | 	wrlong	#0, local04
27bb8                 | '   long[base+64*iii+44]:=0
27bb8     14 2D 02 F6 | 	mov	local04, local02
27bbc     15 27 02 F6 | 	mov	local01, local03
27bc0     06 26 66 F0 | 	shl	local01, #6
27bc4     13 2D 02 F1 | 	add	local04, local01
27bc8     2C 2C 06 F1 | 	add	local04, #44
27bcc     16 01 68 FC | 	wrlong	#0, local04
27bd0                 | '   long[base+64*iii+28]:=0
27bd0     14 2D 02 F6 | 	mov	local04, local02
27bd4     15 27 02 F6 | 	mov	local01, local03
27bd8     06 26 66 F0 | 	shl	local01, #6
27bdc     13 2D 02 F1 | 	add	local04, local01
27be0     1C 2C 06 F1 | 	add	local04, #28
27be4     16 01 68 FC | 	wrlong	#0, local04
27be8     01 2A 06 F1 | 	add	local03, #1
27bec     08 2A 56 F2 | 	cmps	local03, #8 wc
27bf0     88 FE 9F CD |  if_b	jmp	#LR__3140
27bf4                 | LR__3141
27bf4     02 00 00 FF 
27bf8     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
27bfc                 | '   
27bfc                 | ' cog:=coginit(16,@audio,@mailboxaddr)
27bfc     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
27c00     F2 16 02 F6 | 	mov	arg03, objptr
27c04     10 2C 06 F6 | 	mov	local04, #16
27c08     28 16 62 FD | 	setq	arg03
27c0c     0A 2D F2 FC | 	coginit	local04, arg02 wc
27c10     01 2C 66 C6 |  if_b	neg	local04, #1
27c14                 | ' waitms(100)
27c14     64 12 06 F6 | 	mov	arg01, #100
27c18     E8 07 B0 FD | 	call	#__system___waitms
27c1c                 | ' return cog,base
27c1c     14 FD 01 F6 | 	mov	result2, local02
27c20     16 FB 01 F6 | 	mov	result1, local04
27c24     A7 F0 03 F6 | 	mov	ptra, fp
27c28     B2 00 A0 FD | 	call	#popregs_
27c2c                 | _audio096_spin2_start_ret
27c2c     2D 00 64 FD | 	ret
27c30                 | 
27c30                 | ' 
27c30                 | ' ' a simple play procedure to not poke everything. 
27c30                 | ' 
27c30                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
27c30                 | _audio096_spin2_play
27c30     0C E4 05 F1 | 	add	objptr, #12
27c34     F2 00 02 F6 | 	mov	_var01, objptr
27c38     06 12 66 F0 | 	shl	arg01, #6
27c3c     09 01 02 F1 | 	add	_var01, arg01
27c40     00 13 02 F6 | 	mov	arg01, _var01
27c44     0C 12 06 F1 | 	add	arg01, #12
27c48     09 1B 62 FC | 	wrlong	arg05, arg01
27c4c     00 1C 56 F2 | 	cmps	arg06, #0 wc
27c50     00 13 02 36 |  if_ae	mov	arg01, _var01
27c54     10 12 06 31 |  if_ae	add	arg01, #16
27c58     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
27c5c     02 1A 06 C1 |  if_b	add	arg05, #2
27c60     00 13 02 C6 |  if_b	mov	arg01, _var01
27c64     10 12 06 C1 |  if_b	add	arg01, #16
27c68     09 1B 62 CC |  if_b	wrlong	arg05, arg01
27c6c     0B 13 52 F6 | 	abs	arg01, arg03 wc
27c70     0F 1B 80 FF 
27c74     09 1F 1A FD | 	qdiv	##3546895, arg01
27c78                 | ' 
27c78                 | ' base2:=@channel1[0]+64*channel
27c78                 | ' 
27c78                 | ' 
27c78                 | ' long[base2+12]:= len
27c78                 | ' if loop >=0 
27c78                 | '   long[base2+16]:= loop
27c78     0C E4 85 F1 | 	sub	objptr, #12
27c7c                 | ' else
27c7c                 | '   long[base2+16]:= len+2
27c7c                 | ' word[base2+20]:=vol
27c7c     00 13 02 F6 | 	mov	arg01, _var01
27c80     14 12 06 F1 | 	add	arg01, #20
27c84     09 19 52 FC | 	wrword	arg04, arg01
27c88                 | ' word[base2+24]:= 3546895/splfreq 
27c88     00 19 02 F6 | 	mov	arg04, _var01
27c8c     18 18 06 F1 | 	add	arg04, #24
27c90                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
27c90                 | ' long[base2+28]:=$40000000    
27c90                 | ' long[base2+32]:=0    
27c90                 | ' long[base2+36]:=0    
27c90                 | ' long[base2+40]:=0    
27c90                 | ' long[base2+44]:=0    
27c90                 | ' long[base2+8]:=sample+$C0000000     
27c90     00 00 60 FF 
27c94     00 14 06 F1 | 	add	arg02, ##-1073741824
27c98     18 12 62 FD | 	getqx	arg01
27c9c     09 13 82 F6 | 	negc	arg01, arg01
27ca0     0C 13 52 FC | 	wrword	arg01, arg04
27ca4     00 13 02 F6 | 	mov	arg01, _var01
27ca8     1A 12 06 F1 | 	add	arg01, #26
27cac     09 01 5A FC | 	wrword	#256, arg01
27cb0     00 13 02 F6 | 	mov	arg01, _var01
27cb4     1C 12 06 F1 | 	add	arg01, #28
27cb8     00 00 A0 FF 
27cbc     09 01 68 FC | 	wrlong	##1073741824, arg01
27cc0     00 13 02 F6 | 	mov	arg01, _var01
27cc4     20 12 06 F1 | 	add	arg01, #32
27cc8     09 01 68 FC | 	wrlong	#0, arg01
27ccc     00 13 02 F6 | 	mov	arg01, _var01
27cd0     24 12 06 F1 | 	add	arg01, #36
27cd4     09 01 68 FC | 	wrlong	#0, arg01
27cd8     00 13 02 F6 | 	mov	arg01, _var01
27cdc     28 12 06 F1 | 	add	arg01, #40
27ce0     09 01 68 FC | 	wrlong	#0, arg01
27ce4     00 13 02 F6 | 	mov	arg01, _var01
27ce8     2C 12 06 F1 | 	add	arg01, #44
27cec     09 01 68 FC | 	wrlong	#0, arg01
27cf0     08 00 06 F1 | 	add	_var01, #8
27cf4     00 15 62 FC | 	wrlong	arg02, _var01
27cf8                 | _audio096_spin2_play_ret
27cf8     2D 00 64 FD | 	ret
27cfc                 | 
27cfc                 | ' 
27cfc                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
27cfc                 | _audio096_spin2_play8
27cfc                 | ' 
27cfc                 | ' base2:=@channel1[0]+64*channel
27cfc     0C E4 05 F1 | 	add	objptr, #12
27d00     F2 00 02 F6 | 	mov	_var01, objptr
27d04     06 12 66 F0 | 	shl	arg01, #6
27d08     09 01 02 F1 | 	add	_var01, arg01
27d0c                 | ' long[base2]:=0
27d0c     00 01 68 FC | 	wrlong	#0, _var01
27d10                 | ' long[base2+8]:=sample+$40000000 
27d10     00 00 20 FF 
27d14     00 14 06 F1 | 	add	arg02, ##1073741824
27d18     00 13 02 F6 | 	mov	arg01, _var01
27d1c     08 12 06 F1 | 	add	arg01, #8
27d20     09 15 62 FC | 	wrlong	arg02, arg01
27d24                 | ' if loop>=0
27d24     00 1C 56 F2 | 	cmps	arg06, #0 wc
27d28     0C E4 85 F1 | 	sub	objptr, #12
27d2c     1C 00 90 CD |  if_b	jmp	#LR__3150
27d30                 | '   long[base2+12]:=loop
27d30     00 15 02 F6 | 	mov	arg02, _var01
27d34     0C 14 06 F1 | 	add	arg02, #12
27d38     0A 1D 62 FC | 	wrlong	arg06, arg02
27d3c                 | '   long[base2+16]:= len
27d3c     00 1D 02 F6 | 	mov	arg06, _var01
27d40     10 1C 06 F1 | 	add	arg06, #16
27d44     0E 1B 62 FC | 	wrlong	arg05, arg06
27d48     1C 00 90 FD | 	jmp	#LR__3151
27d4c                 | LR__3150
27d4c                 | ' else
27d4c                 | '   long[base2+12]:= len
27d4c     00 1D 02 F6 | 	mov	arg06, _var01
27d50     0C 1C 06 F1 | 	add	arg06, #12
27d54     0E 1B 62 FC | 	wrlong	arg05, arg06
27d58                 | '   long[base2+16]:= len+1
27d58     01 1A 06 F1 | 	add	arg05, #1
27d5c     00 13 02 F6 | 	mov	arg01, _var01
27d60     10 12 06 F1 | 	add	arg01, #16
27d64     09 1B 62 FC | 	wrlong	arg05, arg01
27d68                 | LR__3151
27d68     0B 17 52 F6 | 	abs	arg03, arg03 wc
27d6c     0F 1B 80 FF 
27d70     0B 1F 1A FD | 	qdiv	##3546895, arg03
27d74                 | ' word[base2+20]:=vol
27d74     00 17 02 F6 | 	mov	arg03, _var01
27d78     14 16 06 F1 | 	add	arg03, #20
27d7c     0B 19 52 FC | 	wrword	arg04, arg03
27d80                 | ' word[base2+24]:= 3546895 /splfreq 
27d80     00 13 02 F6 | 	mov	arg01, _var01
27d84     18 12 06 F1 | 	add	arg01, #24
27d88                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
27d88     1A 00 06 F1 | 	add	_var01, #26
27d8c     18 18 62 FD | 	getqx	arg04
27d90     0C 19 82 F6 | 	negc	arg04, arg04
27d94     09 19 52 FC | 	wrword	arg04, arg01
27d98     00 01 5A FC | 	wrword	#256, _var01
27d9c                 | _audio096_spin2_play8_ret
27d9c     2D 00 64 FD | 	ret
27da0                 | 
27da0                 | ' 'long[base2+28]:=$40000000
27da0                 | ' 
27da0                 | '     
27da0                 | ' pub stop(channel) 'silence it
27da0                 | _audio096_spin2_stop
27da0                 | ' 
27da0                 | ' word[@channel1[0]+64*channel+20]:=0
27da0     0C E4 05 F1 | 	add	objptr, #12
27da4     F2 00 02 F6 | 	mov	_var01, objptr
27da8     09 03 02 F6 | 	mov	_var02, arg01
27dac     06 02 66 F0 | 	shl	_var02, #6
27db0     01 01 02 F1 | 	add	_var01, _var02
27db4     14 00 06 F1 | 	add	_var01, #20
27db8     00 01 58 FC | 	wrword	#0, _var01
27dbc                 | ' word[@channel1[0]+64*channel+20]:=0
27dbc     F2 00 02 F6 | 	mov	_var01, objptr
27dc0     06 12 66 F0 | 	shl	arg01, #6
27dc4     09 01 02 F1 | 	add	_var01, arg01
27dc8     14 00 06 F1 | 	add	_var01, #20
27dcc     00 01 58 FC | 	wrword	#0, _var01
27dd0     0C E4 85 F1 | 	sub	objptr, #12
27dd4                 | _audio096_spin2_stop_ret
27dd4     2D 00 64 FD | 	ret
27dd8                 | hubexit
27dd8     81 00 80 FD | 	jmp	#cogexit
27ddc                 | 
27ddc                 | __system___setbaud
27ddc     14 90 06 FB | 	rdlong	muldiva_, #20
27de0     09 93 02 F6 | 	mov	muldivb_, arg01
27de4     BA 00 A0 FD | 	call	#divide_
27de8     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
27dec                 | LR__3160
27dec     3E FA 9D FA | 	rdpin	result1, #62 wc
27df0     FE FC A1 F1 | 	subx	result2, result2
27df4     F4 FF 9F CD |  if_b	jmp	#LR__3160
27df8                 | LR__3161
27df8     40 7C 64 FD | 	dirl	#62
27dfc     40 7E 64 FD | 	dirl	#63
27e00     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
27e04     10 92 66 F0 | 	shl	muldivb_, #16
27e08     07 14 06 F6 | 	mov	arg02, #7
27e0c     49 15 02 F1 | 	add	arg02, muldivb_
27e10     3E F8 0C FC | 	wrpin	#124, #62
27e14     3E 14 16 FC | 	wxpin	arg02, #62
27e18     3F 7C 0C FC | 	wrpin	#62, #63
27e1c     14 14 06 F1 | 	add	arg02, #20
27e20     3F 14 16 FC | 	wxpin	arg02, #63
27e24     41 7C 64 FD | 	dirh	#62
27e28     41 7E 64 FD | 	dirh	#63
27e2c                 | __system___setbaud_ret
27e2c     2D 00 64 FD | 	ret
27e30                 | 
27e30                 | __system___txraw
27e30     01 4A 05 F6 | 	mov	COUNT_, #1
27e34     A8 00 A0 FD | 	call	#pushregs_
27e38     09 27 02 F6 | 	mov	local01, arg01
27e3c     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
27e40                 | LR__3170
27e40     3E FA 9D FA | 	rdpin	result1, #62 wc
27e44     FE FC A1 F1 | 	subx	result2, result2
27e48     F4 FF 9F CD |  if_b	jmp	#LR__3170
27e4c                 | LR__3171
27e4c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
27e50     C2 01 00 AF 
27e54     00 12 06 A6 |  if_e	mov	arg01, ##230400
27e58     80 FF BF AD |  if_e	call	#__system___setbaud
27e5c     58 7C 64 FD | 	drvl	#62
27e60     3E 26 26 FC | 	wypin	local01, #62
27e64     01 FA 05 F6 | 	mov	result1, #1
27e68     A7 F0 03 F6 | 	mov	ptra, fp
27e6c     B2 00 A0 FD | 	call	#popregs_
27e70                 | __system___txraw_ret
27e70     2D 00 64 FD | 	ret
27e74                 | 
27e74                 | __system___rxraw
27e74     0D 4A 05 F6 | 	mov	COUNT_, #13
27e78     A8 00 A0 FD | 	call	#pushregs_
27e7c     09 27 02 F6 | 	mov	local01, arg01
27e80     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
27e84     C2 01 00 AF 
27e88     00 12 06 A6 |  if_e	mov	arg01, ##230400
27e8c     4C FF BF AD |  if_e	call	#__system___setbaud
27e90     00 26 0E F2 | 	cmp	local01, #0 wz
27e94     20 00 90 AD |  if_e	jmp	#LR__3180
27e98     14 2A 06 FB | 	rdlong	local03, #20
27e9c     0A 2A 46 F0 | 	shr	local03, #10
27ea0     15 27 02 FD | 	qmul	local01, local03
27ea4     1A FA 61 FD | 	getct	result1
27ea8     18 2C 62 FD | 	getqx	local04
27eac     16 FB 01 F1 | 	add	result1, local04
27eb0     FD 2E 02 F6 | 	mov	local05, result1
27eb4     04 00 90 FD | 	jmp	#LR__3181
27eb8                 | LR__3180
27eb8     00 2E 06 F6 | 	mov	local05, #0
27ebc                 | LR__3181
27ebc     01 30 66 F6 | 	neg	local06, #1
27ec0     3F 32 06 F6 | 	mov	local07, #63
27ec4     00 34 06 F6 | 	mov	local08, #0
27ec8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27ecc     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
27ed0     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
27ed4                 | LR__3182
27ed4     08 36 16 F4 | 	testb	local09, #8 wc
27ed8     09 36 76 F4 | 	testbn	local09, #9 andc
27edc     0A 36 46 F0 | 	shr	local09, #10
27ee0     01 34 06 C6 |  if_b	mov	local08, #1
27ee4     40 7E 6C 3D |  if_ae	testp	#63 wz
27ee8     01 34 06 26 |  if_nc_and_z	mov	local08, #1
27eec     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
27ef0     04 36 46 20 |  if_nc_and_z	shr	local09, #4
27ef4                 | LR__3183
27ef4     00 28 06 F6 | 	mov	local02, #0
27ef8     00 34 0E F2 | 	cmp	local08, #0 wz
27efc     01 28 66 56 |  if_ne	neg	local02, #1
27f00     00 38 06 F6 | 	mov	local10, #0
27f04     00 2A 06 F6 | 	mov	local03, #0
27f08     00 26 0E F2 | 	cmp	local01, #0 wz
27f0c     01 2A 66 56 |  if_ne	neg	local03, #1
27f10     00 2C 06 F6 | 	mov	local04, #0
27f14     00 3A 06 F6 | 	mov	local11, #0
27f18     17 3D 02 F6 | 	mov	local12, local05
27f1c     1A FA 61 FD | 	getct	result1
27f20     FD 3E 02 F6 | 	mov	local13, result1
27f24     1F 3D 82 F1 | 	sub	local12, local13
27f28     00 3C 56 F2 | 	cmps	local12, #0 wc
27f2c     00 3A 26 C6 |  if_b	not	local11, #0
27f30     00 3A 0E F2 | 	cmp	local11, #0 wz
27f34     00 2C 26 56 |  if_ne	not	local04, #0
27f38     16 2B CA F7 | 	test	local03, local04 wz
27f3c     00 38 26 56 |  if_ne	not	local10, #0
27f40     1C 29 4A F5 | 	or	local02, local10 wz
27f44     8C FF 9F AD |  if_e	jmp	#LR__3182
27f48     00 34 0E F2 | 	cmp	local08, #0 wz
27f4c     1B 31 02 56 |  if_ne	mov	local06, local09
27f50     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
27f54     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27f58     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
27f5c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
27f60     18 FB 01 F6 | 	mov	result1, local06
27f64     A7 F0 03 F6 | 	mov	ptra, fp
27f68     B2 00 A0 FD | 	call	#popregs_
27f6c                 | __system___rxraw_ret
27f6c     2D 00 64 FD | 	ret
27f70                 | 
27f70                 | __system___getus
27f70     1A FC 71 FD | 	getct	result2 wc
27f74     1A 00 62 FD | 	getct	_var01
27f78     10 E6 05 F1 | 	add	ptr___system__dat__, #16
27f7c     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
27f80     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
27f84     20 00 90 5D |  if_ne	jmp	#LR__3190
27f88     14 02 06 FB | 	rdlong	_var02, #20
27f8c     A1 07 00 FF 
27f90     40 02 16 FD | 	qdiv	_var02, ##1000000
27f94     10 E6 05 F1 | 	add	ptr___system__dat__, #16
27f98     18 FA 61 FD | 	getqx	result1
27f9c     FD 02 02 F6 | 	mov	_var02, result1
27fa0     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
27fa4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
27fa8                 | LR__3190
27fa8     01 FD 11 FD | 	qdiv	result2, _var02
27fac     19 FC 61 FD | 	getqy	result2
27fb0     28 FC 61 FD | 	setq	result2
27fb4     01 01 12 FD | 	qdiv	_var01, _var02
27fb8     18 FA 61 FD | 	getqx	result1
27fbc                 | __system___getus_ret
27fbc     2D 00 64 FD | 	ret
27fc0                 | 
27fc0                 | __system____builtin_memmove
27fc0     09 01 02 F6 | 	mov	_var01, arg01
27fc4     0A 13 52 F2 | 	cmps	arg01, arg02 wc
27fc8     10 00 90 CD |  if_b	jmp	#LR__3200
27fcc     0A 03 02 F6 | 	mov	_var02, arg02
27fd0     0B 03 02 F1 | 	add	_var02, arg03
27fd4     01 13 52 F2 | 	cmps	arg01, _var02 wc
27fd8     48 00 90 CD |  if_b	jmp	#LR__3206
27fdc                 | LR__3200
27fdc     0B 05 02 F6 | 	mov	_var03, arg03
27fe0     02 04 4E F0 | 	shr	_var03, #2 wz
27fe4     18 00 90 AD |  if_e	jmp	#LR__3205
27fe8     97 0A 48 FB | 	callpa	#(@LR__3203-@LR__3201)>>2,fcache_load_ptr_
27fec                 | LR__3201
27fec     02 09 D8 FC | 	rep	@LR__3204, _var03
27ff0                 | LR__3202
27ff0     0A 05 02 FB | 	rdlong	_var03, arg02
27ff4     09 05 62 FC | 	wrlong	_var03, arg01
27ff8     04 12 06 F1 | 	add	arg01, #4
27ffc     04 14 06 F1 | 	add	arg02, #4
28000                 | LR__3203
28000                 | LR__3204
28000                 | LR__3205
28000     02 16 CE F7 | 	test	arg03, #2 wz
28004     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
28008     09 03 52 5C |  if_ne	wrword	_var02, arg01
2800c     02 12 06 51 |  if_ne	add	arg01, #2
28010     02 14 06 51 |  if_ne	add	arg02, #2
28014     01 16 CE F7 | 	test	arg03, #1 wz
28018     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2801c     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
28020     28 00 90 FD | 	jmp	#LR__3212
28024                 | LR__3206
28024     0B 13 02 F1 | 	add	arg01, arg03
28028     0B 15 02 F1 | 	add	arg02, arg03
2802c     0B 07 0A F6 | 	mov	_var04, arg03 wz
28030     18 00 90 AD |  if_e	jmp	#LR__3211
28034     97 0A 48 FB | 	callpa	#(@LR__3209-@LR__3207)>>2,fcache_load_ptr_
28038                 | LR__3207
28038     03 09 D8 FC | 	rep	@LR__3210, _var04
2803c                 | LR__3208
2803c     01 12 86 F1 | 	sub	arg01, #1
28040     01 14 86 F1 | 	sub	arg02, #1
28044     0A 03 C2 FA | 	rdbyte	_var02, arg02
28048     09 03 42 FC | 	wrbyte	_var02, arg01
2804c                 | LR__3209
2804c                 | LR__3210
2804c                 | LR__3211
2804c                 | LR__3212
2804c     00 FB 01 F6 | 	mov	result1, _var01
28050                 | __system____builtin_memmove_ret
28050     2D 00 64 FD | 	ret
28054                 | 
28054                 | __system__longmove
28054     09 01 02 F6 | 	mov	_var01, arg01
28058     0A 13 52 F2 | 	cmps	arg01, arg02 wc
2805c     24 00 90 3D |  if_ae	jmp	#LR__3224
28060     0B 03 0A F6 | 	mov	_var02, arg03 wz
28064     54 00 90 AD |  if_e	jmp	#LR__3230
28068     97 0A 48 FB | 	callpa	#(@LR__3222-@LR__3220)>>2,fcache_load_ptr_
2806c                 | LR__3220
2806c     01 09 D8 FC | 	rep	@LR__3223, _var02
28070                 | LR__3221
28070     0A 03 02 FB | 	rdlong	_var02, arg02
28074     09 03 62 FC | 	wrlong	_var02, arg01
28078     04 12 06 F1 | 	add	arg01, #4
2807c     04 14 06 F1 | 	add	arg02, #4
28080                 | LR__3222
28080                 | LR__3223
28080     38 00 90 FD | 	jmp	#LR__3230
28084                 | LR__3224
28084     0B 03 02 F6 | 	mov	_var02, arg03
28088     02 02 66 F0 | 	shl	_var02, #2
2808c     01 13 02 F1 | 	add	arg01, _var02
28090     0B 05 02 F6 | 	mov	_var03, arg03
28094     02 04 66 F0 | 	shl	_var03, #2
28098     02 15 02 F1 | 	add	arg02, _var03
2809c     0B 07 0A F6 | 	mov	_var04, arg03 wz
280a0     18 00 90 AD |  if_e	jmp	#LR__3229
280a4     97 0A 48 FB | 	callpa	#(@LR__3227-@LR__3225)>>2,fcache_load_ptr_
280a8                 | LR__3225
280a8     03 09 D8 FC | 	rep	@LR__3228, _var04
280ac                 | LR__3226
280ac     04 12 86 F1 | 	sub	arg01, #4
280b0     04 14 86 F1 | 	sub	arg02, #4
280b4     0A 07 02 FB | 	rdlong	_var04, arg02
280b8     09 07 62 FC | 	wrlong	_var04, arg01
280bc                 | LR__3227
280bc                 | LR__3228
280bc                 | LR__3229
280bc                 | LR__3230
280bc     00 FB 01 F6 | 	mov	result1, _var01
280c0                 | __system__longmove_ret
280c0     2D 00 64 FD | 	ret
280c4                 | 
280c4                 | __system____builtin_strcpy
280c4     09 01 02 F6 | 	mov	_var01, arg01
280c8     97 0A 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
280cc                 | LR__3240
280cc     0A FB C9 FA | 	rdbyte	result1, arg02 wz
280d0     09 FB 41 FC | 	wrbyte	result1, arg01
280d4     01 14 06 F1 | 	add	arg02, #1
280d8     01 12 06 F1 | 	add	arg01, #1
280dc     EC FF 9F 5D |  if_ne	jmp	#LR__3240
280e0                 | LR__3241
280e0     00 FB 01 F6 | 	mov	result1, _var01
280e4                 | __system____builtin_strcpy_ret
280e4     2D 00 64 FD | 	ret
280e8                 | 
280e8                 | __system____topofstack
280e8     00 4A 05 F6 | 	mov	COUNT_, #0
280ec     A8 00 A0 FD | 	call	#pushregs_
280f0     08 F0 07 F1 | 	add	ptra, #8
280f4     04 4E 05 F1 | 	add	fp, #4
280f8     A7 12 62 FC | 	wrlong	arg01, fp
280fc     A7 FA 01 F6 | 	mov	result1, fp
28100     04 4E 85 F1 | 	sub	fp, #4
28104     A7 F0 03 F6 | 	mov	ptra, fp
28108     B2 00 A0 FD | 	call	#popregs_
2810c                 | __system____topofstack_ret
2810c     2D 00 64 FD | 	ret
28110                 | 
28110                 | __system___lockmem
28110     00 FA 05 F6 | 	mov	result1, #0
28114     01 FA 61 FD | 	cogid	result1
28118     00 FB 05 F1 | 	add	result1, #256
2811c                 | LR__3250
2811c     09 01 0A FB | 	rdlong	_var01, arg01 wz
28120     09 FB 61 AC |  if_e	wrlong	result1, arg01
28124     09 01 02 AB |  if_e	rdlong	_var01, arg01
28128     09 01 02 AB |  if_e	rdlong	_var01, arg01
2812c     FD 00 0A F2 | 	cmp	_var01, result1 wz
28130     E8 FF 9F 5D |  if_ne	jmp	#LR__3250
28134                 | __system___lockmem_ret
28134     2D 00 64 FD | 	ret
28138                 | 
28138                 | __system___string_cmp
28138     97 14 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
2813c                 | LR__3260
2813c     09 01 C2 FA | 	rdbyte	_var01, arg01
28140     0A 03 C2 FA | 	rdbyte	_var02, arg02
28144     00 05 02 F6 | 	mov	_var03, _var01
28148     01 05 8A F1 | 	sub	_var03, _var02 wz
2814c     01 12 06 F1 | 	add	arg01, #1
28150     01 14 06 F1 | 	add	arg02, #1
28154     0C 00 90 5D |  if_ne	jmp	#LR__3262
28158     00 00 0E F2 | 	cmp	_var01, #0 wz
2815c     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
28160     D8 FF 9F 5D |  if_ne	jmp	#LR__3260
28164                 | LR__3261
28164                 | LR__3262
28164     02 FB 01 F6 | 	mov	result1, _var03
28168                 | __system___string_cmp_ret
28168     2D 00 64 FD | 	ret
2816c                 | 
2816c                 | __system___string_concat
2816c     05 4A 05 F6 | 	mov	COUNT_, #5
28170     A8 00 A0 FD | 	call	#pushregs_
28174     09 27 02 F6 | 	mov	local01, arg01
28178     0A 29 02 F6 | 	mov	local02, arg02
2817c     13 13 02 F6 | 	mov	arg01, local01
28180     09 2B 02 F6 | 	mov	local03, arg01
28184     97 06 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
28188                 | LR__3270
28188     15 FB C9 FA | 	rdbyte	result1, local03 wz
2818c     01 2A 06 51 |  if_ne	add	local03, #1
28190     F4 FF 9F 5D |  if_ne	jmp	#LR__3270
28194                 | LR__3271
28194     09 2B 82 F1 | 	sub	local03, arg01
28198     15 2D 02 F6 | 	mov	local04, local03
2819c     14 13 02 F6 | 	mov	arg01, local02
281a0     09 2B 02 F6 | 	mov	local03, arg01
281a4     97 06 48 FB | 	callpa	#(@LR__3273-@LR__3272)>>2,fcache_load_ptr_
281a8                 | LR__3272
281a8     15 FB C9 FA | 	rdbyte	result1, local03 wz
281ac     01 2A 06 51 |  if_ne	add	local03, #1
281b0     F4 FF 9F 5D |  if_ne	jmp	#LR__3272
281b4                 | LR__3273
281b4     09 2B 82 F1 | 	sub	local03, arg01
281b8     16 13 02 F6 | 	mov	arg01, local04
281bc     15 13 02 F1 | 	add	arg01, local03
281c0     01 12 06 F1 | 	add	arg01, #1
281c4     F0 40 B0 FD | 	call	#__system___gc_alloc_managed
281c8     FD 2E 0A F6 | 	mov	local05, result1 wz
281cc     28 00 90 AD |  if_e	jmp	#LR__3274
281d0     17 13 02 F6 | 	mov	arg01, local05
281d4     13 15 02 F6 | 	mov	arg02, local01
281d8     16 17 02 F6 | 	mov	arg03, local04
281dc     E0 FD BF FD | 	call	#__system____builtin_memmove
281e0     17 13 02 F6 | 	mov	arg01, local05
281e4     16 13 02 F1 | 	add	arg01, local04
281e8     01 2A 06 F1 | 	add	local03, #1
281ec     14 15 02 F6 | 	mov	arg02, local02
281f0     15 17 02 F6 | 	mov	arg03, local03
281f4     C8 FD BF FD | 	call	#__system____builtin_memmove
281f8                 | LR__3274
281f8     17 FB 01 F6 | 	mov	result1, local05
281fc     A7 F0 03 F6 | 	mov	ptra, fp
28200     B2 00 A0 FD | 	call	#popregs_
28204                 | __system___string_concat_ret
28204     2D 00 64 FD | 	ret
28208                 | 
28208                 | __system___tx
28208     02 4A 05 F6 | 	mov	COUNT_, #2
2820c     A8 00 A0 FD | 	call	#pushregs_
28210     09 27 02 F6 | 	mov	local01, arg01
28214     0A 26 0E F2 | 	cmp	local01, #10 wz
28218     18 00 90 5D |  if_ne	jmp	#LR__3280
2821c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
28220     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
28224     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
28228     02 28 CE F7 | 	test	local02, #2 wz
2822c     0D 12 06 56 |  if_ne	mov	arg01, #13
28230     FC FB BF 5D |  if_ne	call	#__system___txraw
28234                 | LR__3280
28234     13 13 02 F6 | 	mov	arg01, local01
28238     F4 FB BF FD | 	call	#__system___txraw
2823c     A7 F0 03 F6 | 	mov	ptra, fp
28240     B2 00 A0 FD | 	call	#popregs_
28244                 | __system___tx_ret
28244     2D 00 64 FD | 	ret
28248                 | 
28248                 | __system___rx
28248     01 4A 05 F6 | 	mov	COUNT_, #1
2824c     A8 00 A0 FD | 	call	#pushregs_
28250                 | LR__3290
28250     00 12 06 F6 | 	mov	arg01, #0
28254     1C FC BF FD | 	call	#__system___rxraw
28258     FD 26 02 F6 | 	mov	local01, result1
2825c     FF FF 7F FF 
28260     FF 27 0E F2 | 	cmp	local01, ##-1 wz
28264     E8 FF 9F AD |  if_e	jmp	#LR__3290
28268     0D 26 0E F2 | 	cmp	local01, #13 wz
2826c     14 00 90 5D |  if_ne	jmp	#LR__3291
28270     08 E6 05 F1 | 	add	ptr___system__dat__, #8
28274     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
28278     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2827c     02 FA CD F7 | 	test	result1, #2 wz
28280     0A 26 06 56 |  if_ne	mov	local01, #10
28284                 | LR__3291
28284     08 E6 05 F1 | 	add	ptr___system__dat__, #8
28288     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2828c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
28290     01 12 CE F7 | 	test	arg01, #1 wz
28294     1C 00 90 AD |  if_e	jmp	#LR__3294
28298     7F 26 0E F2 | 	cmp	local01, #127 wz
2829c     0C 00 90 5D |  if_ne	jmp	#LR__3292
282a0     08 12 06 F6 | 	mov	arg01, #8
282a4     60 FF BF FD | 	call	#__system___tx
282a8     08 00 90 FD | 	jmp	#LR__3293
282ac                 | LR__3292
282ac     13 13 02 F6 | 	mov	arg01, local01
282b0     54 FF BF FD | 	call	#__system___tx
282b4                 | LR__3293
282b4                 | LR__3294
282b4     13 FB 01 F6 | 	mov	result1, local01
282b8     A7 F0 03 F6 | 	mov	ptra, fp
282bc     B2 00 A0 FD | 	call	#popregs_
282c0                 | __system___rx_ret
282c0     2D 00 64 FD | 	ret
282c4                 | 
282c4                 | __system___pinwrite
282c4     09 01 02 F6 | 	mov	_var01, arg01
282c8     1F 00 06 F5 | 	and	_var01, #31
282cc     20 12 CE F7 | 	test	arg01, #32 wz
282d0     06 12 46 F0 | 	shr	arg01, #6
282d4     09 13 CA F9 | 	bmask	arg01, arg01
282d8     00 13 62 F0 | 	shl	arg01, _var01
282dc     00 15 62 F0 | 	shl	arg02, _var01
282e0     1C 00 90 AD |  if_e	jmp	#LR__3300
282e4     09 F7 43 F5 | 	or	dirb, arg01
282e8     FD 01 02 F6 | 	mov	_var01, outb
282ec     09 01 22 F5 | 	andn	_var01, arg01
282f0     09 15 02 F5 | 	and	arg02, arg01
282f4     0A 01 42 F5 | 	or	_var01, arg02
282f8     00 FB 03 F6 | 	mov	outb, _var01
282fc     18 00 90 FD | 	jmp	#LR__3301
28300                 | LR__3300
28300     09 F5 43 F5 | 	or	dira, arg01
28304     FC 01 02 F6 | 	mov	_var01, outa
28308     09 01 22 F5 | 	andn	_var01, arg01
2830c     09 15 02 F5 | 	and	arg02, arg01
28310     0A 01 42 F5 | 	or	_var01, arg02
28314     00 F9 03 F6 | 	mov	outa, _var01
28318                 | LR__3301
28318                 | __system___pinwrite_ret
28318     2D 00 64 FD | 	ret
2831c                 | 
2831c                 | __system___basic_read_line
2831c     06 4A 05 F6 | 	mov	COUNT_, #6
28320     A8 00 A0 FD | 	call	#pushregs_
28324     09 27 02 F6 | 	mov	local01, arg01
28328     00 28 06 F6 | 	mov	local02, #0
2832c     18 2A 06 F6 | 	mov	local03, #24
28330     00 2C 06 F6 | 	mov	local04, #0
28334     18 12 06 F6 | 	mov	arg01, #24
28338     7C 3F B0 FD | 	call	#__system___gc_alloc_managed
2833c     FD 2E 0A F6 | 	mov	local05, result1 wz
28340     17 FB 01 A6 |  if_e	mov	result1, local05
28344     B0 00 90 AD |  if_e	jmp	#LR__3313
28348                 | LR__3310
28348     13 13 02 F6 | 	mov	arg01, local01
2834c     7C 0B B0 FD | 	call	#__system___basic_get_char
28350     FD 30 02 F6 | 	mov	local06, result1
28354     01 30 56 F2 | 	cmps	local06, #1 wc
28358     8C 00 90 CD |  if_b	jmp	#LR__3312
2835c     0A 30 0E F2 | 	cmp	local06, #10 wz
28360     10 00 90 5D |  if_ne	jmp	#LR__3311
28364     00 2C 0E F2 | 	cmp	local04, #0 wz
28368     01 28 56 52 |  if_ne	cmps	local02, #1 wc
2836c     01 28 86 11 |  if_a	sub	local02, #1
28370     74 00 90 FD | 	jmp	#LR__3312
28374                 | LR__3311
28374     0D 30 0E F2 | 	cmp	local06, #13 wz
28378     01 2C 06 A6 |  if_e	mov	local04, #1
2837c     00 2C 06 56 |  if_ne	mov	local04, #0
28380     08 30 0E F2 | 	cmp	local06, #8 wz
28384     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
28388     01 28 56 A2 |  if_e	cmps	local02, #1 wc
2838c     01 28 86 21 |  if_nc_and_z	sub	local02, #1
28390     B4 FF 9F AD |  if_e	jmp	#LR__3310
28394     17 17 02 F6 | 	mov	arg03, local05
28398     14 17 02 F1 | 	add	arg03, local02
2839c     0B 31 42 FC | 	wrbyte	local06, arg03
283a0     01 28 06 F1 | 	add	local02, #1
283a4     15 29 0A F2 | 	cmp	local02, local03 wz
283a8     9C FF 9F 5D |  if_ne	jmp	#LR__3310
283ac     15 13 02 F6 | 	mov	arg01, local03
283b0     20 12 06 F1 | 	add	arg01, #32
283b4     00 3F B0 FD | 	call	#__system___gc_alloc_managed
283b8     FD 30 0A F6 | 	mov	local06, result1 wz
283bc     18 FB 01 A6 |  if_e	mov	result1, local06
283c0     34 00 90 AD |  if_e	jmp	#LR__3313
283c4     18 13 02 F6 | 	mov	arg01, local06
283c8     17 15 02 F6 | 	mov	arg02, local05
283cc     15 17 02 F6 | 	mov	arg03, local03
283d0     EC FB BF FD | 	call	#__system____builtin_memmove
283d4     20 2A 06 F1 | 	add	local03, #32
283d8     17 13 02 F6 | 	mov	arg01, local05
283dc     14 40 B0 FD | 	call	#__system___gc_free
283e0     18 2F 02 F6 | 	mov	local05, local06
283e4     60 FF 9F FD | 	jmp	#LR__3310
283e8                 | LR__3312
283e8     17 31 02 F6 | 	mov	local06, local05
283ec     14 31 02 F1 | 	add	local06, local02
283f0     18 01 48 FC | 	wrbyte	#0, local06
283f4     17 FB 01 F6 | 	mov	result1, local05
283f8                 | LR__3313
283f8     A7 F0 03 F6 | 	mov	ptra, fp
283fc     B2 00 A0 FD | 	call	#popregs_
28400                 | __system___basic_read_line_ret
28400     2D 00 64 FD | 	ret
28404                 | 
28404                 | __system___waitms
28404     09 01 02 F6 | 	mov	_var01, arg01
28408     1A 02 62 FD | 	getct	_var02
2840c     14 04 06 FB | 	rdlong	_var03, #20
28410     97 14 48 FB | 	callpa	#(@LR__3321-@LR__3320)>>2,fcache_load_ptr_
28414                 | LR__3320
28414     01 00 00 FF 
28418     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
2841c     1C 00 90 CD |  if_b	jmp	#LR__3322
28420     02 03 02 F1 | 	add	_var02, _var03
28424     01 13 02 F6 | 	mov	arg01, _var02
28428     00 12 66 FA | 	addct1	arg01, #0
2842c     24 22 60 FD | 	waitct1
28430     01 00 00 FF 
28434     E8 01 86 F1 | 	sub	_var01, ##1000
28438     D8 FF 9F FD | 	jmp	#LR__3320
2843c                 | LR__3321
2843c                 | LR__3322
2843c     01 00 56 F2 | 	cmps	_var01, #1 wc
28440     28 00 90 CD |  if_b	jmp	#LR__3323
28444     02 01 02 FD | 	qmul	_var01, _var03
28448     01 00 00 FF 
2844c     E8 17 06 F6 | 	mov	arg03, ##1000
28450     19 FA 61 FD | 	getqy	result1
28454     18 12 62 FD | 	getqx	arg01
28458     28 FA 61 FD | 	setq	result1
2845c     0B 13 12 FD | 	qdiv	arg01, arg03
28460     18 12 62 FD | 	getqx	arg01
28464     01 13 62 FA | 	addct1	arg01, _var02
28468     24 22 60 FD | 	waitct1
2846c                 | LR__3323
2846c                 | __system___waitms_ret
2846c     2D 00 64 FD | 	ret
28470                 | 
28470                 | __system___waitus
28470     09 01 02 F6 | 	mov	_var01, arg01
28474     1A 02 62 FD | 	getct	_var02
28478     14 04 06 FB | 	rdlong	_var03, #20
2847c     97 14 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
28480                 | LR__3330
28480     A1 07 00 FF 
28484     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
28488     1C 00 90 CD |  if_b	jmp	#LR__3332
2848c     02 03 02 F1 | 	add	_var02, _var03
28490     01 13 02 F6 | 	mov	arg01, _var02
28494     00 12 66 FA | 	addct1	arg01, #0
28498     24 22 60 FD | 	waitct1
2849c     A1 07 00 FF 
284a0     40 00 86 F1 | 	sub	_var01, ##1000000
284a4     D8 FF 9F FD | 	jmp	#LR__3330
284a8                 | LR__3331
284a8                 | LR__3332
284a8     01 00 56 F2 | 	cmps	_var01, #1 wc
284ac     28 00 90 CD |  if_b	jmp	#LR__3333
284b0     02 01 02 FD | 	qmul	_var01, _var03
284b4     A1 07 00 FF 
284b8     40 16 06 F6 | 	mov	arg03, ##1000000
284bc     19 FA 61 FD | 	getqy	result1
284c0     18 12 62 FD | 	getqx	arg01
284c4     28 FA 61 FD | 	setq	result1
284c8     0B 13 12 FD | 	qdiv	arg01, arg03
284cc     18 FA 61 FD | 	getqx	result1
284d0     FD 02 62 FA | 	addct1	_var02, result1
284d4     24 22 60 FD | 	waitct1
284d8                 | LR__3333
284d8                 | __system___waitus_ret
284d8     2D 00 64 FD | 	ret
284dc                 | 
284dc                 | __system___mount
284dc     0B 4A 05 F6 | 	mov	COUNT_, #11
284e0     A8 00 A0 FD | 	call	#pushregs_
284e4     09 27 02 F6 | 	mov	local01, arg01
284e8     0A 29 0A F6 | 	mov	local02, arg02 wz
284ec     01 2A 66 F6 | 	neg	local03, #1
284f0     01 FA 65 A6 |  if_e	neg	result1, #1
284f4     98 02 90 AD |  if_e	jmp	#LR__3355
284f8     13 FB C1 FA | 	rdbyte	result1, local01
284fc     2F FA 0D F2 | 	cmp	result1, #47 wz
28500     28 00 90 5D |  if_ne	jmp	#LR__3342
28504     13 13 02 F6 | 	mov	arg01, local01
28508     09 2D 02 F6 | 	mov	local04, arg01
2850c     97 06 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
28510                 | LR__3340
28510     16 FB C9 FA | 	rdbyte	result1, local04 wz
28514     01 2C 06 51 |  if_ne	add	local04, #1
28518     F4 FF 9F 5D |  if_ne	jmp	#LR__3340
2851c                 | LR__3341
2851c     09 2D 82 F1 | 	sub	local04, arg01
28520     16 FB 01 F6 | 	mov	result1, local04
28524     10 FA 55 F2 | 	cmps	result1, #16 wc
28528     14 00 90 CD |  if_b	jmp	#LR__3343
2852c                 | LR__3342
2852c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28530     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
28534     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28538     01 FA 65 F6 | 	neg	result1, #1
2853c     50 02 90 FD | 	jmp	#LR__3355
28540                 | LR__3343
28540     00 2E 06 F6 | 	mov	local05, #0
28544                 | LR__3344
28544     04 2E 56 F2 | 	cmps	local05, #4 wc
28548     B0 00 90 3D |  if_ae	jmp	#LR__3349
2854c     17 13 02 F6 | 	mov	arg01, local05
28550     02 12 66 F0 | 	shl	arg01, #2
28554     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28558     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2855c     09 FB 09 FB | 	rdlong	result1, arg01 wz
28560     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28564     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
28568     17 2B 02 86 |  if_c_and_z	mov	local03, local05
2856c     84 00 90 8D |  if_c_and_z	jmp	#LR__3348
28570     17 13 02 F6 | 	mov	arg01, local05
28574     02 12 66 F0 | 	shl	arg01, #2
28578     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2857c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
28580     09 13 02 FB | 	rdlong	arg01, arg01
28584     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28588     09 2D 02 F6 | 	mov	local04, arg01
2858c     97 06 48 FB | 	callpa	#(@LR__3346-@LR__3345)>>2,fcache_load_ptr_
28590                 | LR__3345
28590     16 FB C9 FA | 	rdbyte	result1, local04 wz
28594     01 2C 06 51 |  if_ne	add	local04, #1
28598     F4 FF 9F 5D |  if_ne	jmp	#LR__3345
2859c                 | LR__3346
2859c     09 2D 82 F1 | 	sub	local04, arg01
285a0     16 31 02 F6 | 	mov	local06, local04
285a4     18 13 02 F6 | 	mov	arg01, local06
285a8     13 13 02 F1 | 	add	arg01, local01
285ac     09 FB C1 FA | 	rdbyte	result1, arg01
285b0     2F FA 0D F2 | 	cmp	result1, #47 wz
285b4     18 33 02 56 |  if_ne	mov	local07, local06
285b8     13 33 02 51 |  if_ne	add	local07, local01
285bc     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
285c0     30 00 90 5D |  if_ne	jmp	#LR__3347
285c4     17 17 02 F6 | 	mov	arg03, local05
285c8     02 16 66 F0 | 	shl	arg03, #2
285cc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
285d0     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
285d4     0B 15 02 FB | 	rdlong	arg02, arg03
285d8     13 13 02 F6 | 	mov	arg01, local01
285dc     18 17 02 F6 | 	mov	arg03, local06
285e0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
285e4     48 51 B0 FD | 	call	#__system__strncmp
285e8     00 FA 0D F2 | 	cmp	result1, #0 wz
285ec     17 2B 02 A6 |  if_e	mov	local03, local05
285f0     08 00 90 AD |  if_e	jmp	#LR__3349
285f4                 | LR__3347
285f4                 | LR__3348
285f4     01 2E 06 F1 | 	add	local05, #1
285f8     48 FF 9F FD | 	jmp	#LR__3344
285fc                 | LR__3349
285fc     FF FF 7F FF 
28600     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
28604     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28608     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
2860c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28610     01 FA 65 A6 |  if_e	neg	result1, #1
28614     78 01 90 AD |  if_e	jmp	#LR__3355
28618     15 2F 02 F6 | 	mov	local05, local03
2861c     17 33 02 F6 | 	mov	local07, local05
28620     02 32 66 F0 | 	shl	local07, #2
28624     74 E6 05 F1 | 	add	ptr___system__dat__, #116
28628     F3 32 02 F1 | 	add	local07, ptr___system__dat__
2862c     19 31 0A FB | 	rdlong	local06, local07 wz
28630     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
28634     58 00 90 AD |  if_e	jmp	#LR__3350
28638     4C 30 06 F1 | 	add	local06, #76
2863c     18 33 0A FB | 	rdlong	local07, local06 wz
28640     4C 30 86 F1 | 	sub	local06, #76
28644     48 00 90 AD |  if_e	jmp	#LR__3350
28648     4C 30 06 F1 | 	add	local06, #76
2864c     18 33 02 FB | 	rdlong	local07, local06
28650     19 2B 02 F6 | 	mov	local03, local07
28654     13 32 46 F7 | 	zerox	local07, #19
28658     14 2A 46 F0 | 	shr	local03, #20
2865c     02 2A 66 F0 | 	shl	local03, #2
28660     ED 2A 02 F1 | 	add	local03, __methods__
28664     15 2B 02 FB | 	rdlong	local03, local03
28668     17 31 02 F6 | 	mov	local06, local05
2866c     02 30 66 F0 | 	shl	local06, #2
28670     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28674     F3 30 02 F1 | 	add	local06, ptr___system__dat__
28678     18 13 02 FB | 	rdlong	arg01, local06
2867c     F2 30 02 F6 | 	mov	local06, objptr
28680     19 E5 01 F6 | 	mov	objptr, local07
28684     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28688     2D 2A 62 FD | 	call	local03
2868c     18 E5 01 F6 | 	mov	objptr, local06
28690                 | LR__3350
28690     17 35 02 F6 | 	mov	local08, local05
28694     02 34 66 F0 | 	shl	local08, #2
28698     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2869c     F3 34 02 F1 | 	add	local08, ptr___system__dat__
286a0     1A 29 62 FC | 	wrlong	local02, local08
286a4     00 28 0E F2 | 	cmp	local02, #0 wz
286a8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
286ac     18 00 90 5D |  if_ne	jmp	#LR__3351
286b0     02 2E 66 F0 | 	shl	local05, #2
286b4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
286b8     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
286bc     17 01 68 FC | 	wrlong	#0, local05
286c0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
286c4     C4 00 90 FD | 	jmp	#LR__3354
286c8                 | LR__3351
286c8     17 37 02 F6 | 	mov	local09, local05
286cc     04 36 66 F0 | 	shl	local09, #4
286d0     24 E6 05 F1 | 	add	ptr___system__dat__, #36
286d4     F3 36 02 F1 | 	add	local09, ptr___system__dat__
286d8     1B 13 02 F6 | 	mov	arg01, local09
286dc     13 15 02 F6 | 	mov	arg02, local01
286e0     10 16 06 F6 | 	mov	arg03, #16
286e4     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
286e8     94 4F B0 FD | 	call	#__system__strncpy
286ec     48 28 06 F1 | 	add	local02, #72
286f0     14 35 0A FB | 	rdlong	local08, local02 wz
286f4     48 28 86 F1 | 	sub	local02, #72
286f8     7C 00 90 AD |  if_e	jmp	#LR__3353
286fc     48 28 06 F1 | 	add	local02, #72
28700     14 35 02 FB | 	rdlong	local08, local02
28704     1A 39 02 F6 | 	mov	local10, local08
28708     13 34 46 F7 | 	zerox	local08, #19
2870c     14 38 46 F0 | 	shr	local10, #20
28710     02 38 66 F0 | 	shl	local10, #2
28714     ED 38 02 F1 | 	add	local10, __methods__
28718     1C 39 02 FB | 	rdlong	local10, local10
2871c     1B 13 02 F6 | 	mov	arg01, local09
28720     F2 3A 02 F6 | 	mov	local11, objptr
28724     1A E5 01 F6 | 	mov	objptr, local08
28728     2D 38 62 FD | 	call	local10
2872c     1D E5 01 F6 | 	mov	objptr, local11
28730     FD 12 0A F6 | 	mov	arg01, result1 wz
28734     40 00 90 AD |  if_e	jmp	#LR__3352
28738     17 35 02 F6 | 	mov	local08, local05
2873c     02 34 66 F0 | 	shl	local08, #2
28740     74 E6 05 F1 | 	add	ptr___system__dat__, #116
28744     F3 34 02 F1 | 	add	local08, ptr___system__dat__
28748     1A 01 68 FC | 	wrlong	#0, local08
2874c     02 2E 66 F0 | 	shl	local05, #2
28750     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
28754     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
28758     17 01 68 FC | 	wrlong	#0, local05
2875c     09 13 6A F6 | 	neg	arg01, arg01 wz
28760     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
28764     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
28768     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2876c     01 FA 65 56 |  if_ne	neg	result1, #1
28770     00 FA 05 A6 |  if_e	mov	result1, #0
28774     18 00 90 FD | 	jmp	#LR__3355
28778                 | LR__3352
28778                 | LR__3353
28778     02 2E 66 F0 | 	shl	local05, #2
2877c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28780     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
28784     17 37 62 FC | 	wrlong	local09, local05
28788     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2878c                 | LR__3354
2878c     00 FA 05 F6 | 	mov	result1, #0
28790                 | LR__3355
28790     A7 F0 03 F6 | 	mov	ptra, fp
28794     B2 00 A0 FD | 	call	#popregs_
28798                 | __system___mount_ret
28798     2D 00 64 FD | 	ret
2879c                 | 
2879c                 | __system___chdir
2879c     00 4A 05 F6 | 	mov	COUNT_, #0
287a0     A8 00 A0 FD | 	call	#pushregs_
287a4     40 F0 07 F1 | 	add	ptra, #64
287a8     04 4E 05 F1 | 	add	fp, #4
287ac     A7 12 62 FC | 	wrlong	arg01, fp
287b0     04 4E 05 F1 | 	add	fp, #4
287b4     A7 14 02 F6 | 	mov	arg02, fp
287b8     08 4E 85 F1 | 	sub	fp, #8
287bc     64 4B B0 FD | 	call	#__system__stat
287c0     3C 4E 05 F1 | 	add	fp, #60
287c4     A7 FA 61 FC | 	wrlong	result1, fp
287c8     3C 4E 85 F1 | 	sub	fp, #60
287cc     00 FA 0D F2 | 	cmp	result1, #0 wz
287d0     3C 4E 05 51 |  if_ne	add	fp, #60
287d4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
287d8     3C 4E 85 51 |  if_ne	sub	fp, #60
287dc     BC 00 90 5D |  if_ne	jmp	#LR__3362
287e0     10 4E 05 F1 | 	add	fp, #16
287e4     A7 12 02 FB | 	rdlong	arg01, fp
287e8     10 4E 85 F1 | 	sub	fp, #16
287ec     78 00 00 FF 
287f0     00 12 06 F5 | 	and	arg01, ##61440
287f4     08 00 00 FF 
287f8     00 12 0E F2 | 	cmp	arg01, ##4096 wz
287fc     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
28800     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
28804     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
28808     01 FA 65 56 |  if_ne	neg	result1, #1
2880c     8C 00 90 5D |  if_ne	jmp	#LR__3362
28810     04 4E 05 F1 | 	add	fp, #4
28814     A7 16 02 FB | 	rdlong	arg03, fp
28818     04 4E 85 F1 | 	sub	fp, #4
2881c     0B 17 C2 FA | 	rdbyte	arg03, arg03
28820     2F 16 0E F2 | 	cmp	arg03, #47 wz
28824     24 00 90 5D |  if_ne	jmp	#LR__3360
28828     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2882c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
28830     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
28834     04 4E 05 F1 | 	add	fp, #4
28838     A7 14 02 FB | 	rdlong	arg02, fp
2883c     04 4E 85 F1 | 	sub	fp, #4
28840     00 17 06 F6 | 	mov	arg03, #256
28844     38 4E B0 FD | 	call	#__system__strncpy
28848     4C 00 90 FD | 	jmp	#LR__3361
2884c                 | LR__3360
2884c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
28850     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
28854     38 4E 05 F1 | 	add	fp, #56
28858     A7 12 62 FC | 	wrlong	arg01, fp
2885c     38 4E 85 F1 | 	sub	fp, #56
28860     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
28864     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
28868     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2886c     00 17 06 F6 | 	mov	arg03, #256
28870     0C 4E B0 FD | 	call	#__system__strncpy
28874     38 4E 05 F1 | 	add	fp, #56
28878     A7 12 02 FB | 	rdlong	arg01, fp
2887c     34 4E 85 F1 | 	sub	fp, #52
28880     A7 14 02 FB | 	rdlong	arg02, fp
28884     04 4E 85 F1 | 	sub	fp, #4
28888     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2888c     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
28890     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
28894     10 00 B0 FD | 	call	#__system____getvfsforfile
28898                 | LR__3361
28898     00 FA 05 F6 | 	mov	result1, #0
2889c                 | LR__3362
2889c     A7 F0 03 F6 | 	mov	ptra, fp
288a0     B2 00 A0 FD | 	call	#popregs_
288a4                 | __system___chdir_ret
288a4     2D 00 64 FD | 	ret
288a8                 | 
288a8                 | __system____getvfsforfile
288a8     0E 4A 05 F6 | 	mov	COUNT_, #14
288ac     A8 00 A0 FD | 	call	#pushregs_
288b0     09 27 02 F6 | 	mov	local01, arg01
288b4     0A 29 02 F6 | 	mov	local02, arg02
288b8     0B 2B 02 F6 | 	mov	local03, arg03
288bc     97 10 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
288c0                 | LR__3370
288c0     14 FB C1 FA | 	rdbyte	result1, local02
288c4     2F FA 0D F2 | 	cmp	result1, #47 wz
288c8     01 28 06 A1 |  if_e	add	local02, #1
288cc     14 2D C2 AA |  if_e	rdbyte	local04, local02
288d0     01 28 86 A1 |  if_e	sub	local02, #1
288d4     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
288d8     01 28 06 A1 |  if_e	add	local02, #1
288dc     E0 FF 9F AD |  if_e	jmp	#LR__3370
288e0                 | LR__3371
288e0     14 2D C2 FA | 	rdbyte	local04, local02
288e4     2F 2C 0E F2 | 	cmp	local04, #47 wz
288e8     14 00 90 5D |  if_ne	jmp	#LR__3372
288ec     13 13 02 F6 | 	mov	arg01, local01
288f0     14 15 02 F6 | 	mov	arg02, local02
288f4     00 17 06 F6 | 	mov	arg03, #256
288f8     84 4D B0 FD | 	call	#__system__strncpy
288fc     7C 00 90 FD | 	jmp	#LR__3374
28900                 | LR__3372
28900     84 E6 05 F1 | 	add	ptr___system__dat__, #132
28904     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
28908     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2890c     13 13 02 F6 | 	mov	arg01, local01
28910     00 17 06 F6 | 	mov	arg03, #256
28914     68 4D B0 FD | 	call	#__system__strncpy
28918     14 2D CA FA | 	rdbyte	local04, local02 wz
2891c     5C 00 90 AD |  if_e	jmp	#LR__3373
28920     14 2D C2 FA | 	rdbyte	local04, local02
28924     2E 2C 0E F2 | 	cmp	local04, #46 wz
28928     01 28 06 A1 |  if_e	add	local02, #1
2892c     14 2F C2 AA |  if_e	rdbyte	local05, local02
28930     01 28 86 A1 |  if_e	sub	local02, #1
28934     17 31 02 A6 |  if_e	mov	local06, local05
28938     07 30 4E A7 |  if_e	zerox	local06, #7 wz
2893c     3C 00 90 AD |  if_e	jmp	#LR__3373
28940     13 2F C2 FA | 	rdbyte	local05, local01
28944     2F 2E 0E F2 | 	cmp	local05, #47 wz
28948     01 26 06 A1 |  if_e	add	local01, #1
2894c     13 2D C2 AA |  if_e	rdbyte	local04, local01
28950     01 26 86 A1 |  if_e	sub	local01, #1
28954     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
28958     B0 01 00 5F 
2895c     94 14 06 56 |  if_ne	mov	arg02, ##@LR__5290
28960     13 13 02 56 |  if_ne	mov	arg01, local01
28964     00 17 06 56 |  if_ne	mov	arg03, #256
28968     60 4D B0 5D |  if_ne	call	#__system__strncat
2896c     13 13 02 F6 | 	mov	arg01, local01
28970     14 15 02 F6 | 	mov	arg02, local02
28974     00 17 06 F6 | 	mov	arg03, #256
28978     50 4D B0 FD | 	call	#__system__strncat
2897c                 | LR__3373
2897c                 | LR__3374
2897c     13 13 02 F6 | 	mov	arg01, local01
28980     0C 4F B0 FD | 	call	#__system___normalizeName
28984     13 2D CA FA | 	rdbyte	local04, local01 wz
28988     1C 00 90 AD |  if_e	jmp	#LR__3375
2898c     13 2D C2 FA | 	rdbyte	local04, local01
28990     2F 2C 0E F2 | 	cmp	local04, #47 wz
28994     01 26 06 A1 |  if_e	add	local01, #1
28998     13 31 C2 AA |  if_e	rdbyte	local06, local01
2899c     01 26 86 A1 |  if_e	sub	local01, #1
289a0     00 30 4E A2 |  if_e	cmps	local06, #0 wz
289a4     18 00 90 5D |  if_ne	jmp	#LR__3376
289a8                 | LR__3375
289a8     01 00 00 FF 
289ac     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
289b0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
289b4     01 00 00 FF 
289b8     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
289bc     EC 01 90 FD | 	jmp	#LR__3390
289c0                 | LR__3376
289c0     00 32 06 F6 | 	mov	local07, #0
289c4                 | LR__3377
289c4     04 32 56 F2 | 	cmps	local07, #4 wc
289c8     CC 01 90 3D |  if_ae	jmp	#LR__3389
289cc     19 31 02 F6 | 	mov	local06, local07
289d0     02 30 66 F0 | 	shl	local06, #2
289d4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
289d8     F3 30 02 F1 | 	add	local06, ptr___system__dat__
289dc     18 31 0A FB | 	rdlong	local06, local06 wz
289e0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
289e4     A8 01 90 AD |  if_e	jmp	#LR__3388
289e8     19 2D 02 F6 | 	mov	local04, local07
289ec     02 2C 66 F0 | 	shl	local04, #2
289f0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
289f4     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
289f8     16 13 02 FB | 	rdlong	arg01, local04
289fc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28a00     09 35 02 F6 | 	mov	local08, arg01
28a04     97 06 48 FB | 	callpa	#(@LR__3379-@LR__3378)>>2,fcache_load_ptr_
28a08                 | LR__3378
28a08     1A FB C9 FA | 	rdbyte	result1, local08 wz
28a0c     01 34 06 51 |  if_ne	add	local08, #1
28a10     F4 FF 9F 5D |  if_ne	jmp	#LR__3378
28a14                 | LR__3379
28a14     09 35 82 F1 | 	sub	local08, arg01
28a18     1A 37 02 F6 | 	mov	local09, local08
28a1c     1B 2D 02 F6 | 	mov	local04, local09
28a20     13 2D 02 F1 | 	add	local04, local01
28a24     16 31 C2 FA | 	rdbyte	local06, local04
28a28     2F 30 0E F2 | 	cmp	local06, #47 wz
28a2c     1B 39 02 56 |  if_ne	mov	local10, local09
28a30     13 39 02 51 |  if_ne	add	local10, local01
28a34     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
28a38     54 01 90 5D |  if_ne	jmp	#LR__3387
28a3c     19 17 02 F6 | 	mov	arg03, local07
28a40     02 16 66 F0 | 	shl	arg03, #2
28a44     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28a48     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
28a4c     0B 15 02 FB | 	rdlong	arg02, arg03
28a50     1B 17 02 F6 | 	mov	arg03, local09
28a54     13 13 02 F6 | 	mov	arg01, local01
28a58     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28a5c     D0 4C B0 FD | 	call	#__system__strncmp
28a60     00 FA 4D F2 | 	cmps	result1, #0 wz
28a64     28 01 90 5D |  if_ne	jmp	#LR__3387
28a68     19 3B 02 F6 | 	mov	local11, local07
28a6c     02 3A 66 F0 | 	shl	local11, #2
28a70     74 E6 05 F1 | 	add	ptr___system__dat__, #116
28a74     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
28a78     1D 3D 02 FB | 	rdlong	local12, local11
28a7c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
28a80     97 22 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
28a84                 | LR__3380
28a84     1B 31 02 F6 | 	mov	local06, local09
28a88     01 30 06 F1 | 	add	local06, #1
28a8c     13 31 02 F1 | 	add	local06, local01
28a90     18 3B C2 FA | 	rdbyte	local11, local06
28a94     2E 3A 0E F2 | 	cmp	local11, #46 wz
28a98     2C 00 90 5D |  if_ne	jmp	#LR__3382
28a9c     1B 3B 02 F6 | 	mov	local11, local09
28aa0     02 3A 06 F1 | 	add	local11, #2
28aa4     13 3B 02 F1 | 	add	local11, local01
28aa8     1D 39 C2 FA | 	rdbyte	local10, local11
28aac     2F 38 0E F2 | 	cmp	local10, #47 wz
28ab0     1B 3F 02 56 |  if_ne	mov	local13, local09
28ab4     02 3E 06 51 |  if_ne	add	local13, #2
28ab8     13 3F 02 51 |  if_ne	add	local13, local01
28abc     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
28ac0     01 36 06 A1 |  if_e	add	local09, #1
28ac4     BC FF 9F AD |  if_e	jmp	#LR__3380
28ac8                 | LR__3381
28ac8                 | LR__3382
28ac8     00 2A 0E F2 | 	cmp	local03, #0 wz
28acc     15 13 02 56 |  if_ne	mov	arg01, local03
28ad0     13 15 02 56 |  if_ne	mov	arg02, local01
28ad4     00 17 06 56 |  if_ne	mov	arg03, #256
28ad8     A4 4B B0 5D |  if_ne	call	#__system__strncpy
28adc     13 15 02 F6 | 	mov	arg02, local01
28ae0     1B 15 02 F1 | 	add	arg02, local09
28ae4     01 14 06 F1 | 	add	arg02, #1
28ae8     13 13 02 F6 | 	mov	arg01, local01
28aec     D4 F5 BF FD | 	call	#__system____builtin_strcpy
28af0     13 13 02 F6 | 	mov	arg01, local01
28af4     09 35 02 F6 | 	mov	local08, arg01
28af8     97 06 48 FB | 	callpa	#(@LR__3384-@LR__3383)>>2,fcache_load_ptr_
28afc                 | LR__3383
28afc     1A FB C9 FA | 	rdbyte	result1, local08 wz
28b00     01 34 06 51 |  if_ne	add	local08, #1
28b04     F4 FF 9F 5D |  if_ne	jmp	#LR__3383
28b08                 | LR__3384
28b08     09 35 82 F1 | 	sub	local08, arg01
28b0c     1A 37 02 F6 | 	mov	local09, local08
28b10                 | LR__3385
28b10     01 36 56 F2 | 	cmps	local09, #1 wc
28b14     70 00 90 CD |  if_b	jmp	#LR__3386
28b18     1B 2D 02 F6 | 	mov	local04, local09
28b1c     13 2D 02 F1 | 	add	local04, local01
28b20     16 3B C2 FA | 	rdbyte	local11, local04
28b24     2F 3A 0E F2 | 	cmp	local11, #47 wz
28b28     1B 3B 02 A6 |  if_e	mov	local11, local09
28b2c     13 3B 02 A1 |  if_e	add	local11, local01
28b30     1D 01 48 AC |  if_e	wrbyte	#0, local11
28b34     01 36 86 A1 |  if_e	sub	local09, #1
28b38     D4 FF 9F AD |  if_e	jmp	#LR__3385
28b3c     1B 2D 02 F6 | 	mov	local04, local09
28b40     13 2D 02 F1 | 	add	local04, local01
28b44     16 3B C2 FA | 	rdbyte	local11, local04
28b48     2E 3A 0E F2 | 	cmp	local11, #46 wz
28b4c     38 00 90 5D |  if_ne	jmp	#LR__3386
28b50     02 36 56 F2 | 	cmps	local09, #2 wc
28b54     30 00 90 CD |  if_b	jmp	#LR__3386
28b58     1B 41 02 F6 | 	mov	local14, local09
28b5c     01 40 86 F1 | 	sub	local14, #1
28b60     13 41 02 F1 | 	add	local14, local01
28b64     20 2F C2 FA | 	rdbyte	local05, local14
28b68     2F 2E 0E F2 | 	cmp	local05, #47 wz
28b6c     18 00 90 5D |  if_ne	jmp	#LR__3386
28b70     1B 2D 02 F6 | 	mov	local04, local09
28b74     01 2C 86 F1 | 	sub	local04, #1
28b78     13 2D 02 F1 | 	add	local04, local01
28b7c     16 01 48 FC | 	wrbyte	#0, local04
28b80     02 36 86 F1 | 	sub	local09, #2
28b84     88 FF 9F FD | 	jmp	#LR__3385
28b88                 | LR__3386
28b88     1E FB 01 F6 | 	mov	result1, local12
28b8c     1C 00 90 FD | 	jmp	#LR__3390
28b90                 | LR__3387
28b90                 | LR__3388
28b90     01 32 06 F1 | 	add	local07, #1
28b94     2C FE 9F FD | 	jmp	#LR__3377
28b98                 | LR__3389
28b98     02 00 00 FF 
28b9c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
28ba0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
28ba4     02 00 00 FF 
28ba8     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
28bac                 | LR__3390
28bac     A7 F0 03 F6 | 	mov	ptra, fp
28bb0     B2 00 A0 FD | 	call	#popregs_
28bb4                 | __system____getvfsforfile_ret
28bb4     2D 00 64 FD | 	ret
28bb8                 | 
28bb8                 | __system___basic_open
28bb8     05 4A 05 F6 | 	mov	COUNT_, #5
28bbc     A8 00 A0 FD | 	call	#pushregs_
28bc0     0A 27 02 F6 | 	mov	local01, arg02
28bc4     0B 29 02 F6 | 	mov	local02, arg03
28bc8     0C 2B 02 F6 | 	mov	local03, arg04
28bcc     00 2C 06 F6 | 	mov	local04, #0
28bd0     84 4A B0 FD | 	call	#__system____getftab
28bd4     FD 2E 0A F6 | 	mov	local05, result1 wz
28bd8     18 00 90 5D |  if_ne	jmp	#LR__3400
28bdc     EE 12 02 F6 | 	mov	arg01, abortchain
28be0     0C 14 06 F6 | 	mov	arg02, #12
28be4     01 16 06 F6 | 	mov	arg03, #1
28be8     DA 00 A0 FD | 	call	#__longjmp
28bec     01 FA 65 F6 | 	neg	result1, #1
28bf0     14 01 90 FD | 	jmp	#LR__3409
28bf4                 | LR__3400
28bf4     08 2E 06 F1 | 	add	local05, #8
28bf8     17 FB 09 FB | 	rdlong	result1, local05 wz
28bfc     08 2E 86 F1 | 	sub	local05, #8
28c00     17 13 02 56 |  if_ne	mov	arg01, local05
28c04     B0 41 B0 5D |  if_ne	call	#__system___closeraw
28c08     00 26 0E F2 | 	cmp	local01, #0 wz
28c0c     00 28 0E A2 |  if_e	cmp	local02, #0 wz
28c10     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
28c14     3C 00 90 AD |  if_e	jmp	#LR__3402
28c18     0C 12 06 F6 | 	mov	arg01, #12
28c1c     98 36 B0 FD | 	call	#__system___gc_alloc_managed
28c20     FD 2C 0A F6 | 	mov	local04, result1 wz
28c24     18 00 90 5D |  if_ne	jmp	#LR__3401
28c28     EE 12 02 F6 | 	mov	arg01, abortchain
28c2c     07 14 06 F6 | 	mov	arg02, #7
28c30     01 16 06 F6 | 	mov	arg03, #1
28c34     DA 00 A0 FD | 	call	#__longjmp
28c38     01 FA 65 F6 | 	neg	result1, #1
28c3c     C8 00 90 FD | 	jmp	#LR__3409
28c40                 | LR__3401
28c40     16 01 68 FC | 	wrlong	#0, local04
28c44     04 2C 06 F1 | 	add	local04, #4
28c48     16 01 68 FC | 	wrlong	#0, local04
28c4c     04 2C 86 F1 | 	sub	local04, #4
28c50     17 2D 62 FC | 	wrlong	local04, local05
28c54                 | LR__3402
28c54     00 26 0E F2 | 	cmp	local01, #0 wz
28c58     20 00 90 AD |  if_e	jmp	#LR__3403
28c5c     16 27 62 FC | 	wrlong	local01, local04
28c60     16 FB 01 F6 | 	mov	result1, local04
28c64     00 58 05 FF 
28c68     00 FA 45 F5 | 	or	result1, ##179306496
28c6c     1C 2E 06 F1 | 	add	local05, #28
28c70     17 FB 61 FC | 	wrlong	result1, local05
28c74     1C 2E 86 F1 | 	sub	local05, #28
28c78     0C 00 90 FD | 	jmp	#LR__3404
28c7c                 | LR__3403
28c7c     1C 2E 06 F1 | 	add	local05, #28
28c80     17 01 68 FC | 	wrlong	#0, local05
28c84     1C 2E 86 F1 | 	sub	local05, #28
28c88                 | LR__3404
28c88     00 28 0E F2 | 	cmp	local02, #0 wz
28c8c     28 00 90 AD |  if_e	jmp	#LR__3405
28c90     04 2C 06 F1 | 	add	local04, #4
28c94     16 29 62 FC | 	wrlong	local02, local04
28c98     04 2C 86 F1 | 	sub	local04, #4
28c9c     16 FB 01 F6 | 	mov	result1, local04
28ca0     00 60 05 FF 
28ca4     00 FA 45 F5 | 	or	result1, ##180355072
28ca8     20 2E 06 F1 | 	add	local05, #32
28cac     17 FB 61 FC | 	wrlong	result1, local05
28cb0     20 2E 86 F1 | 	sub	local05, #32
28cb4     0C 00 90 FD | 	jmp	#LR__3406
28cb8                 | LR__3405
28cb8     20 2E 06 F1 | 	add	local05, #32
28cbc     17 01 68 FC | 	wrlong	#0, local05
28cc0     20 2E 86 F1 | 	sub	local05, #32
28cc4                 | LR__3406
28cc4     00 2A 0E F2 | 	cmp	local03, #0 wz
28cc8     24 00 90 AD |  if_e	jmp	#LR__3407
28ccc     08 2C 06 F1 | 	add	local04, #8
28cd0     16 2B 62 FC | 	wrlong	local03, local04
28cd4     08 2C 86 F1 | 	sub	local04, #8
28cd8     00 68 05 FF 
28cdc     00 2C 46 F5 | 	or	local04, ##181403648
28ce0     24 2E 06 F1 | 	add	local05, #36
28ce4     17 2D 62 FC | 	wrlong	local04, local05
28ce8     24 2E 86 F1 | 	sub	local05, #36
28cec     0C 00 90 FD | 	jmp	#LR__3408
28cf0                 | LR__3407
28cf0     24 2E 06 F1 | 	add	local05, #36
28cf4     17 01 68 FC | 	wrlong	#0, local05
28cf8     24 2E 86 F1 | 	sub	local05, #36
28cfc                 | LR__3408
28cfc     08 2E 06 F1 | 	add	local05, #8
28d00     17 0F 68 FC | 	wrlong	#7, local05
28d04     00 FA 05 F6 | 	mov	result1, #0
28d08                 | LR__3409
28d08     A7 F0 03 F6 | 	mov	ptra, fp
28d0c     B2 00 A0 FD | 	call	#popregs_
28d10                 | __system___basic_open_ret
28d10     2D 00 64 FD | 	ret
28d14                 | 
28d14                 | __system___basic_open_string
28d14     04 4A 05 F6 | 	mov	COUNT_, #4
28d18     A8 00 A0 FD | 	call	#pushregs_
28d1c     0A 27 02 F6 | 	mov	local01, arg02
28d20     0B 29 02 F6 | 	mov	local02, arg03
28d24     30 49 B0 FD | 	call	#__system____getftab
28d28     FD 2A 0A F6 | 	mov	local03, result1 wz
28d2c     18 00 90 5D |  if_ne	jmp	#LR__3410
28d30     EE 12 02 F6 | 	mov	arg01, abortchain
28d34     0C 14 06 F6 | 	mov	arg02, #12
28d38     01 16 06 F6 | 	mov	arg03, #1
28d3c     DA 00 A0 FD | 	call	#__longjmp
28d40     01 FA 65 F6 | 	neg	result1, #1
28d44     5C 00 90 FD | 	jmp	#LR__3412
28d48                 | LR__3410
28d48     08 2A 06 F1 | 	add	local03, #8
28d4c     15 19 0A FB | 	rdlong	arg04, local03 wz
28d50     08 2A 86 F1 | 	sub	local03, #8
28d54     15 13 02 56 |  if_ne	mov	arg01, local03
28d58     5C 40 B0 5D |  if_ne	call	#__system___closeraw
28d5c     13 15 02 F6 | 	mov	arg02, local01
28d60     14 17 02 F6 | 	mov	arg03, local02
28d64     15 13 02 F6 | 	mov	arg01, local03
28d68     B6 19 06 F6 | 	mov	arg04, #438
28d6c     44 3D B0 FD | 	call	#__system___openraw
28d70     FD 2C 02 F6 | 	mov	local04, result1
28d74     00 2C 56 F2 | 	cmps	local04, #0 wc
28d78     24 00 90 3D |  if_ae	jmp	#LR__3411
28d7c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28d80     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
28d84     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28d88     EE 12 02 F6 | 	mov	arg01, abortchain
28d8c     FD 14 02 FB | 	rdlong	arg02, result1
28d90     01 16 06 F6 | 	mov	arg03, #1
28d94     DA 00 A0 FD | 	call	#__longjmp
28d98     01 FA 65 F6 | 	neg	result1, #1
28d9c     04 00 90 FD | 	jmp	#LR__3412
28da0                 | LR__3411
28da0     16 FB 01 F6 | 	mov	result1, local04
28da4                 | LR__3412
28da4     A7 F0 03 F6 | 	mov	ptra, fp
28da8     B2 00 A0 FD | 	call	#popregs_
28dac                 | __system___basic_open_string_ret
28dac     2D 00 64 FD | 	ret
28db0                 | 
28db0                 | __system___basic_print_char
28db0     03 4A 05 F6 | 	mov	COUNT_, #3
28db4     A8 00 A0 FD | 	call	#pushregs_
28db8     0A 27 02 F6 | 	mov	local01, arg02
28dbc     44 50 B0 FD | 	call	#__system___gettxfunc
28dc0     FD 28 0A F6 | 	mov	local02, result1 wz
28dc4     00 FA 05 A6 |  if_e	mov	result1, #0
28dc8     30 00 90 AD |  if_e	jmp	#LR__3420
28dcc     14 2B 02 F6 | 	mov	local03, local02
28dd0     13 28 46 F7 | 	zerox	local02, #19
28dd4     14 2A 46 F0 | 	shr	local03, #20
28dd8     02 2A 66 F0 | 	shl	local03, #2
28ddc     ED 2A 02 F1 | 	add	local03, __methods__
28de0     15 2B 02 FB | 	rdlong	local03, local03
28de4     13 13 02 F6 | 	mov	arg01, local01
28de8     F2 26 02 F6 | 	mov	local01, objptr
28dec     14 E5 01 F6 | 	mov	objptr, local02
28df0     2D 2A 62 FD | 	call	local03
28df4     13 E5 01 F6 | 	mov	objptr, local01
28df8     01 FA 05 F6 | 	mov	result1, #1
28dfc                 | LR__3420
28dfc     A7 F0 03 F6 | 	mov	ptra, fp
28e00     B2 00 A0 FD | 	call	#popregs_
28e04                 | __system___basic_print_char_ret
28e04     2D 00 64 FD | 	ret
28e08                 | 
28e08                 | __system___basic_print_string
28e08     03 4A 05 F6 | 	mov	COUNT_, #3
28e0c     A8 00 A0 FD | 	call	#pushregs_
28e10     0A 27 02 F6 | 	mov	local01, arg02
28e14     0B 29 02 F6 | 	mov	local02, arg03
28e18     E8 4F B0 FD | 	call	#__system___gettxfunc
28e1c     FD 2A 0A F6 | 	mov	local03, result1 wz
28e20     00 FA 05 A6 |  if_e	mov	result1, #0
28e24     18 00 90 AD |  if_e	jmp	#LR__3430
28e28     00 26 0E F2 | 	cmp	local01, #0 wz
28e2c     00 FA 05 A6 |  if_e	mov	result1, #0
28e30     15 13 02 56 |  if_ne	mov	arg01, local03
28e34     14 15 02 56 |  if_ne	mov	arg02, local02
28e38     13 17 02 56 |  if_ne	mov	arg03, local01
28e3c     08 02 B0 5D |  if_ne	call	#__system___fmtstr
28e40                 | LR__3430
28e40     A7 F0 03 F6 | 	mov	ptra, fp
28e44     B2 00 A0 FD | 	call	#popregs_
28e48                 | __system___basic_print_string_ret
28e48     2D 00 64 FD | 	ret
28e4c                 | 
28e4c                 | __system___basic_print_integer
28e4c     04 4A 05 F6 | 	mov	COUNT_, #4
28e50     A8 00 A0 FD | 	call	#pushregs_
28e54     0A 27 02 F6 | 	mov	local01, arg02
28e58     0B 29 02 F6 | 	mov	local02, arg03
28e5c     0C 2B 02 F6 | 	mov	local03, arg04
28e60     A0 4F B0 FD | 	call	#__system___gettxfunc
28e64     FD 2C 0A F6 | 	mov	local04, result1 wz
28e68     00 FA 05 A6 |  if_e	mov	result1, #0
28e6c     16 13 02 56 |  if_ne	mov	arg01, local04
28e70     14 15 02 56 |  if_ne	mov	arg02, local02
28e74     13 17 02 56 |  if_ne	mov	arg03, local01
28e78     15 19 02 56 |  if_ne	mov	arg04, local03
28e7c     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
28e80     A7 F0 03 F6 | 	mov	ptra, fp
28e84     B2 00 A0 FD | 	call	#popregs_
28e88                 | __system___basic_print_integer_ret
28e88     2D 00 64 FD | 	ret
28e8c                 | 
28e8c                 | __system___basic_print_unsigned
28e8c     03 4A 05 F6 | 	mov	COUNT_, #3
28e90     A8 00 A0 FD | 	call	#pushregs_
28e94     0A 27 02 F6 | 	mov	local01, arg02
28e98     0B 29 02 F6 | 	mov	local02, arg03
28e9c     0C 2B 02 F6 | 	mov	local03, arg04
28ea0     60 4F B0 FD | 	call	#__system___gettxfunc
28ea4     FD 12 0A F6 | 	mov	arg01, result1 wz
28ea8     00 FA 05 A6 |  if_e	mov	result1, #0
28eac     3A 28 26 54 |  if_ne	bith	local02, #58
28eb0     14 15 02 56 |  if_ne	mov	arg02, local02
28eb4     13 17 02 56 |  if_ne	mov	arg03, local01
28eb8     15 19 02 56 |  if_ne	mov	arg04, local03
28ebc     74 02 B0 5D |  if_ne	call	#__system___fmtnum
28ec0     A7 F0 03 F6 | 	mov	ptra, fp
28ec4     B2 00 A0 FD | 	call	#popregs_
28ec8                 | __system___basic_print_unsigned_ret
28ec8     2D 00 64 FD | 	ret
28ecc                 | 
28ecc                 | __system___basic_get_char
28ecc     03 4A 05 F6 | 	mov	COUNT_, #3
28ed0     A8 00 A0 FD | 	call	#pushregs_
28ed4     70 4F B0 FD | 	call	#__system___getrxfunc
28ed8     FD 26 0A F6 | 	mov	local01, result1 wz
28edc     01 FA 65 A6 |  if_e	neg	result1, #1
28ee0     28 00 90 AD |  if_e	jmp	#LR__3440
28ee4     13 29 02 F6 | 	mov	local02, local01
28ee8     13 26 46 F7 | 	zerox	local01, #19
28eec     14 28 46 F0 | 	shr	local02, #20
28ef0     02 28 66 F0 | 	shl	local02, #2
28ef4     ED 28 02 F1 | 	add	local02, __methods__
28ef8     14 29 02 FB | 	rdlong	local02, local02
28efc     F2 2A 02 F6 | 	mov	local03, objptr
28f00     13 E5 01 F6 | 	mov	objptr, local01
28f04     2D 28 62 FD | 	call	local02
28f08     15 E5 01 F6 | 	mov	objptr, local03
28f0c                 | LR__3440
28f0c     A7 F0 03 F6 | 	mov	ptra, fp
28f10     B2 00 A0 FD | 	call	#popregs_
28f14                 | __system___basic_get_char_ret
28f14     2D 00 64 FD | 	ret
28f18                 | 
28f18                 | __system___basic_put
28f18     04 4A 05 F6 | 	mov	COUNT_, #4
28f1c     A8 00 A0 FD | 	call	#pushregs_
28f20     0D 27 02 F6 | 	mov	local01, arg05
28f24     13 19 02 FD | 	qmul	arg04, local01
28f28     09 29 02 F6 | 	mov	local02, arg01
28f2c     0B 2B 02 F6 | 	mov	local03, arg03
28f30     00 14 0E F2 | 	cmp	arg02, #0 wz
28f34     01 14 86 51 |  if_ne	sub	arg02, #1
28f38     14 13 02 56 |  if_ne	mov	arg01, local02
28f3c     00 16 06 56 |  if_ne	mov	arg03, #0
28f40     18 2C 62 FD | 	getqx	local04
28f44     58 45 B0 5D |  if_ne	call	#__system__lseek
28f48     15 15 02 F6 | 	mov	arg02, local03
28f4c     16 17 02 F6 | 	mov	arg03, local04
28f50     14 13 02 F6 | 	mov	arg01, local02
28f54     94 44 B0 FD | 	call	#__system__write
28f58     FD 2C 02 F6 | 	mov	local04, result1
28f5c     01 2C 56 F2 | 	cmps	local04, #1 wc
28f60     10 00 90 CD |  if_b	jmp	#LR__3450
28f64     16 91 02 F6 | 	mov	muldiva_, local04
28f68     13 93 02 F6 | 	mov	muldivb_, local01
28f6c     BA 00 A0 FD | 	call	#divide_
28f70     49 2D 02 F6 | 	mov	local04, muldivb_
28f74                 | LR__3450
28f74     16 FB 01 F6 | 	mov	result1, local04
28f78     A7 F0 03 F6 | 	mov	ptra, fp
28f7c     B2 00 A0 FD | 	call	#popregs_
28f80                 | __system___basic_put_ret
28f80     2D 00 64 FD | 	ret
28f84                 | 
28f84                 | __system___basic_get
28f84     04 4A 05 F6 | 	mov	COUNT_, #4
28f88     A8 00 A0 FD | 	call	#pushregs_
28f8c     0D 27 02 F6 | 	mov	local01, arg05
28f90     13 19 02 FD | 	qmul	arg04, local01
28f94     09 29 02 F6 | 	mov	local02, arg01
28f98     0B 2B 02 F6 | 	mov	local03, arg03
28f9c     00 14 0E F2 | 	cmp	arg02, #0 wz
28fa0     01 14 86 51 |  if_ne	sub	arg02, #1
28fa4     14 13 02 56 |  if_ne	mov	arg01, local02
28fa8     00 16 06 56 |  if_ne	mov	arg03, #0
28fac     18 2C 62 FD | 	getqx	local04
28fb0     EC 44 B0 5D |  if_ne	call	#__system__lseek
28fb4     15 15 02 F6 | 	mov	arg02, local03
28fb8     16 17 02 F6 | 	mov	arg03, local04
28fbc     14 13 02 F6 | 	mov	arg01, local02
28fc0     64 44 B0 FD | 	call	#__system__read
28fc4     FD 2C 02 F6 | 	mov	local04, result1
28fc8     01 2C 56 F2 | 	cmps	local04, #1 wc
28fcc     10 00 90 CD |  if_b	jmp	#LR__3460
28fd0     16 91 02 F6 | 	mov	muldiva_, local04
28fd4     13 93 02 F6 | 	mov	muldivb_, local01
28fd8     BA 00 A0 FD | 	call	#divide_
28fdc     49 2D 02 F6 | 	mov	local04, muldivb_
28fe0                 | LR__3460
28fe0     16 FB 01 F6 | 	mov	result1, local04
28fe4     A7 F0 03 F6 | 	mov	ptra, fp
28fe8     B2 00 A0 FD | 	call	#popregs_
28fec                 | __system___basic_get_ret
28fec     2D 00 64 FD | 	ret
28ff0                 | 
28ff0                 | __system___fmtchar
28ff0     00 4A 05 F6 | 	mov	COUNT_, #0
28ff4     A8 00 A0 FD | 	call	#pushregs_
28ff8     10 F0 07 F1 | 	add	ptra, #16
28ffc     04 4E 05 F1 | 	add	fp, #4
29000     A7 12 62 FC | 	wrlong	arg01, fp
29004     04 4E 05 F1 | 	add	fp, #4
29008     A7 14 62 FC | 	wrlong	arg02, fp
2900c     04 4E 05 F1 | 	add	fp, #4
29010     A7 16 62 FC | 	wrlong	arg03, fp
29014     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
29018     A7 16 62 FC | 	wrlong	arg03, fp
2901c     08 4E 85 F1 | 	sub	fp, #8
29020     A7 12 02 FB | 	rdlong	arg01, fp
29024     04 4E 05 F1 | 	add	fp, #4
29028     A7 14 02 FB | 	rdlong	arg02, fp
2902c     04 4E 05 F1 | 	add	fp, #4
29030     A7 16 02 F6 | 	mov	arg03, fp
29034     0C 4E 85 F1 | 	sub	fp, #12
29038     0C 00 B0 FD | 	call	#__system___fmtstr
2903c     A7 F0 03 F6 | 	mov	ptra, fp
29040     B2 00 A0 FD | 	call	#popregs_
29044                 | __system___fmtchar_ret
29044     2D 00 64 FD | 	ret
29048                 | 
29048                 | __system___fmtstr
29048     09 4A 05 F6 | 	mov	COUNT_, #9
2904c     A8 00 A0 FD | 	call	#pushregs_
29050     09 27 02 F6 | 	mov	local01, arg01
29054     0A 29 02 F6 | 	mov	local02, arg02
29058     0B 2B 02 F6 | 	mov	local03, arg03
2905c     14 19 E2 F8 | 	getbyte	arg04, local02, #0
29060     15 13 02 F6 | 	mov	arg01, local03
29064     09 2D 02 F6 | 	mov	local04, arg01
29068     97 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
2906c                 | LR__3470
2906c     16 FB C9 FA | 	rdbyte	result1, local04 wz
29070     01 2C 06 51 |  if_ne	add	local04, #1
29074     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
29078                 | LR__3471
29078     09 2D 82 F1 | 	sub	local04, arg01
2907c     00 18 0E F2 | 	cmp	arg04, #0 wz
29080     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
29084     14 15 02 F6 | 	mov	arg02, local02
29088     16 17 02 F6 | 	mov	arg03, local04
2908c     13 13 02 F6 | 	mov	arg01, local01
29090     02 18 06 F6 | 	mov	arg04, #2
29094     BC 49 B0 FD | 	call	#__system___fmtpad
29098     FD 2E 02 F6 | 	mov	local05, result1
2909c     00 2E 56 F2 | 	cmps	local05, #0 wc
290a0     17 FB 01 C6 |  if_b	mov	result1, local05
290a4     80 00 90 CD |  if_b	jmp	#LR__3474
290a8     01 2C 56 F2 | 	cmps	local04, #1 wc
290ac     50 00 90 CD |  if_b	jmp	#LR__3473
290b0     16 31 02 F6 | 	mov	local06, local04
290b4                 | LR__3472
290b4     13 33 02 F6 | 	mov	local07, local01
290b8     13 35 02 F6 | 	mov	local08, local01
290bc     13 32 46 F7 | 	zerox	local07, #19
290c0     14 34 46 F0 | 	shr	local08, #20
290c4     02 34 66 F0 | 	shl	local08, #2
290c8     ED 34 02 F1 | 	add	local08, __methods__
290cc     1A 35 02 FB | 	rdlong	local08, local08
290d0     15 13 C2 FA | 	rdbyte	arg01, local03
290d4     F2 36 02 F6 | 	mov	local09, objptr
290d8     19 E5 01 F6 | 	mov	objptr, local07
290dc     01 2A 06 F1 | 	add	local03, #1
290e0     2D 34 62 FD | 	call	local08
290e4     1B E5 01 F6 | 	mov	objptr, local09
290e8     FD 36 02 F6 | 	mov	local09, result1
290ec     00 36 56 F2 | 	cmps	local09, #0 wc
290f0     1B FB 01 C6 |  if_b	mov	result1, local09
290f4     30 00 90 CD |  if_b	jmp	#LR__3474
290f8     1B 2F 02 F1 | 	add	local05, local09
290fc     ED 31 6E FB | 	djnz	local06, #LR__3472
29100                 | LR__3473
29100     14 15 02 F6 | 	mov	arg02, local02
29104     16 17 02 F6 | 	mov	arg03, local04
29108     13 13 02 F6 | 	mov	arg01, local01
2910c     01 18 06 F6 | 	mov	arg04, #1
29110     40 49 B0 FD | 	call	#__system___fmtpad
29114     FD 36 02 F6 | 	mov	local09, result1
29118     00 36 56 F2 | 	cmps	local09, #0 wc
2911c     1B FB 01 C6 |  if_b	mov	result1, local09
29120     1B 2F 02 31 |  if_ae	add	local05, local09
29124     17 FB 01 36 |  if_ae	mov	result1, local05
29128                 | LR__3474
29128     A7 F0 03 F6 | 	mov	ptra, fp
2912c     B2 00 A0 FD | 	call	#popregs_
29130                 | __system___fmtstr_ret
29130     2D 00 64 FD | 	ret
29134                 | 
29134                 | __system___fmtnum
29134     0B 4A 05 F6 | 	mov	COUNT_, #11
29138     A8 00 A0 FD | 	call	#pushregs_
2913c     09 27 02 F6 | 	mov	local01, arg01
29140     0A 29 02 F6 | 	mov	local02, arg02
29144     0B 2B 02 F6 | 	mov	local03, arg03
29148     0C 2D 02 F6 | 	mov	local04, arg04
2914c     F8 2F 02 F6 | 	mov	local05, ptra
29150     17 31 02 F6 | 	mov	local06, local05
29154     00 32 06 F6 | 	mov	local07, #0
29158     14 35 02 F6 | 	mov	local08, local02
2915c     10 34 46 F0 | 	shr	local08, #16
29160     3F 34 06 F5 | 	and	local08, #63
29164     14 37 E2 F8 | 	getbyte	local09, local02, #0
29168     14 39 02 F6 | 	mov	local10, local02
2916c     1A 38 46 F0 | 	shr	local10, #26
29170     03 38 06 F5 | 	and	local10, #3
29174     1C 3B 02 F6 | 	mov	local11, local10
29178     01 34 56 F2 | 	cmps	local08, #1 wc
2917c     44 F0 07 F1 | 	add	ptra, #68
29180     01 34 86 31 |  if_ae	sub	local08, #1
29184     41 36 56 F2 | 	cmps	local09, #65 wc
29188     00 36 0E C2 |  if_b	cmp	local09, #0 wz
2918c     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
29190     03 3A 0E F2 | 	cmp	local11, #3 wz
29194     00 3A 06 A6 |  if_e	mov	local11, #0
29198     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
2919c     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
291a0     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
291a4     00 3A 0E F2 | 	cmp	local11, #0 wz
291a8     4C 00 90 AD |  if_e	jmp	#LR__3483
291ac     01 32 06 F6 | 	mov	local07, #1
291b0     1B 35 0A F2 | 	cmp	local08, local09 wz
291b4     18 00 90 5D |  if_ne	jmp	#LR__3481
291b8     05 34 6E FB | 	djnz	local08, #LR__3480
291bc     13 13 02 F6 | 	mov	arg01, local01
291c0     14 15 02 F6 | 	mov	arg02, local02
291c4     23 16 06 F6 | 	mov	arg03, #35
291c8     24 FE BF FD | 	call	#__system___fmtchar
291cc     88 00 90 FD | 	jmp	#LR__3487
291d0                 | LR__3480
291d0                 | LR__3481
291d0     02 3A 0E F2 | 	cmp	local11, #2 wz
291d4     18 39 02 A6 |  if_e	mov	local10, local06
291d8     01 30 06 A1 |  if_e	add	local06, #1
291dc     1C 41 48 AC |  if_e	wrbyte	#32, local10
291e0     14 00 90 AD |  if_e	jmp	#LR__3482
291e4     04 3A 0E F2 | 	cmp	local11, #4 wz
291e8     18 5B 48 AC |  if_e	wrbyte	#45, local06
291ec     01 30 06 A1 |  if_e	add	local06, #1
291f0     18 57 48 5C |  if_ne	wrbyte	#43, local06
291f4     01 30 06 51 |  if_ne	add	local06, #1
291f8                 | LR__3482
291f8                 | LR__3483
291f8     18 13 02 F6 | 	mov	arg01, local06
291fc     15 15 02 F6 | 	mov	arg02, local03
29200     16 17 02 F6 | 	mov	arg03, local04
29204     1A 19 02 F6 | 	mov	arg04, local08
29208     00 1A 06 F6 | 	mov	arg05, #0
2920c     1D 28 2E F4 | 	testbn	local02, #29 wz
29210     01 1A 06 56 |  if_ne	mov	arg05, #1
29214     04 49 B0 FD | 	call	#__system___uitoa
29218     FD 32 02 F1 | 	add	local07, result1
2921c     1B 33 5A F2 | 	cmps	local07, local09 wcz
29220     24 00 90 ED |  if_be	jmp	#LR__3486
29224     97 0E 48 FB | 	callpa	#(@LR__3485-@LR__3484)>>2,fcache_load_ptr_
29228                 | LR__3484
29228     1B 39 02 F6 | 	mov	local10, local09
2922c     01 38 56 F2 | 	cmps	local10, #1 wc
29230     01 36 86 F1 | 	sub	local09, #1
29234     18 39 02 36 |  if_ae	mov	local10, local06
29238     01 30 06 31 |  if_ae	add	local06, #1
2923c     1C 47 48 3C |  if_ae	wrbyte	#35, local10
29240     E4 FF 9F 3D |  if_ae	jmp	#LR__3484
29244                 | LR__3485
29244     18 01 48 FC | 	wrbyte	#0, local06
29248                 | LR__3486
29248     13 13 02 F6 | 	mov	arg01, local01
2924c     14 15 02 F6 | 	mov	arg02, local02
29250     17 17 02 F6 | 	mov	arg03, local05
29254     F0 FD BF FD | 	call	#__system___fmtstr
29258                 | LR__3487
29258     A7 F0 03 F6 | 	mov	ptra, fp
2925c     B2 00 A0 FD | 	call	#popregs_
29260                 | __system___fmtnum_ret
29260     2D 00 64 FD | 	ret
29264                 | 
29264                 | __system___fmtfloat
29264     10 4A 05 F6 | 	mov	COUNT_, #16
29268     A8 00 A0 FD | 	call	#pushregs_
2926c     24 F1 07 F1 | 	add	ptra, #292
29270     04 4E 05 F1 | 	add	fp, #4
29274     A7 12 62 FC | 	wrlong	arg01, fp
29278     04 4E 05 F1 | 	add	fp, #4
2927c     A7 14 62 FC | 	wrlong	arg02, fp
29280     04 4E 05 F1 | 	add	fp, #4
29284     A7 16 62 FC | 	wrlong	arg03, fp
29288     04 4E 05 F1 | 	add	fp, #4
2928c     A7 18 62 FC | 	wrlong	arg04, fp
29290     0C 4E 05 F1 | 	add	fp, #12
29294     A7 14 68 FC | 	wrlong	#10, fp
29298     08 4E 05 F1 | 	add	fp, #8
2929c     A7 00 68 FC | 	wrlong	#0, fp
292a0     08 4E 05 F1 | 	add	fp, #8
292a4     A7 00 68 FC | 	wrlong	#0, fp
292a8     08 4E 05 F1 | 	add	fp, #8
292ac     A7 00 68 FC | 	wrlong	#0, fp
292b0     04 4E 05 F1 | 	add	fp, #4
292b4     A7 04 68 FC | 	wrlong	#2, fp
292b8     04 4E 05 F1 | 	add	fp, #4
292bc     A7 00 68 FC | 	wrlong	#0, fp
292c0     04 4E 05 F1 | 	add	fp, #4
292c4     A7 00 68 FC | 	wrlong	#0, fp
292c8     04 4E 05 F1 | 	add	fp, #4
292cc     A7 00 68 FC | 	wrlong	#0, fp
292d0     04 4E 05 F1 | 	add	fp, #4
292d4     A7 00 68 FC | 	wrlong	#0, fp
292d8     18 4E 05 F1 | 	add	fp, #24
292dc     A7 00 68 FC | 	wrlong	#0, fp
292e0     68 4E 05 F1 | 	add	fp, #104
292e4     A7 26 02 F6 | 	mov	local01, fp
292e8     08 4E 85 F1 | 	sub	fp, #8
292ec     A7 26 62 FC | 	wrlong	local01, fp
292f0     04 4E 05 F1 | 	add	fp, #4
292f4     A7 26 62 FC | 	wrlong	local01, fp
292f8     BC 4E 85 F1 | 	sub	fp, #188
292fc     A7 26 02 FB | 	rdlong	local01, fp
29300     10 26 46 F0 | 	shr	local01, #16
29304     3F 26 06 F5 | 	and	local01, #63
29308     B0 4E 05 F1 | 	add	fp, #176
2930c     A7 26 62 FC | 	wrlong	local01, fp
29310     B0 4E 85 F1 | 	sub	fp, #176
29314     A7 26 02 FB | 	rdlong	local01, fp
29318     1C 26 46 F0 | 	shr	local01, #28
2931c     01 26 06 F5 | 	and	local01, #1
29320     08 4F 05 F1 | 	add	fp, #264
29324     A7 26 62 FC | 	wrlong	local01, fp
29328     58 4E 85 F1 | 	sub	fp, #88
2932c     A7 26 0A FB | 	rdlong	local01, fp wz
29330     B8 4E 85 F1 | 	sub	fp, #184
29334     3C 00 90 5D |  if_ne	jmp	#LR__3491
29338     10 4E 05 F1 | 	add	fp, #16
2933c     A7 26 02 FB | 	rdlong	local01, fp
29340     10 4E 85 F1 | 	sub	fp, #16
29344     61 26 0E F2 | 	cmp	local01, #97 wz
29348     18 00 90 5D |  if_ne	jmp	#LR__3490
2934c     B8 4E 05 F1 | 	add	fp, #184
29350     A7 1A 68 FC | 	wrlong	#13, fp
29354     84 4E 85 F1 | 	sub	fp, #132
29358     A7 02 68 FC | 	wrlong	#1, fp
2935c     34 4E 85 F1 | 	sub	fp, #52
29360     24 00 90 FD | 	jmp	#LR__3492
29364                 | LR__3490
29364     B8 4E 05 F1 | 	add	fp, #184
29368     A7 0C 68 FC | 	wrlong	#6, fp
2936c     B8 4E 85 F1 | 	sub	fp, #184
29370     14 00 90 FD | 	jmp	#LR__3492
29374                 | LR__3491
29374     B8 4E 05 F1 | 	add	fp, #184
29378     A7 26 02 FB | 	rdlong	local01, fp
2937c     01 26 86 F1 | 	sub	local01, #1
29380     A7 26 62 FC | 	wrlong	local01, fp
29384     B8 4E 85 F1 | 	sub	fp, #184
29388                 | LR__3492
29388     08 4E 05 F1 | 	add	fp, #8
2938c     A7 26 02 FB | 	rdlong	local01, fp
29390     16 26 46 F0 | 	shr	local01, #22
29394     03 26 06 F5 | 	and	local01, #3
29398     04 4F 05 F1 | 	add	fp, #260
2939c     A7 26 62 FC | 	wrlong	local01, fp
293a0     04 4F 85 F1 | 	sub	fp, #260
293a4     A7 26 02 FB | 	rdlong	local01, fp
293a8     1D 26 46 F0 | 	shr	local01, #29
293ac     01 26 06 F5 | 	and	local01, #1
293b0     B4 4E 05 F1 | 	add	fp, #180
293b4     A7 26 62 FC | 	wrlong	local01, fp
293b8     B4 4E 85 F1 | 	sub	fp, #180
293bc     A7 26 02 FB | 	rdlong	local01, fp
293c0     13 27 EA F8 | 	getbyte	local01, local01, #1
293c4     60 4E 05 F1 | 	add	fp, #96
293c8     A7 26 62 FC | 	wrlong	local01, fp
293cc     60 4E 85 F1 | 	sub	fp, #96
293d0     A7 26 02 FB | 	rdlong	local01, fp
293d4     13 27 E2 F8 | 	getbyte	local01, local01, #0
293d8     64 4E 05 F1 | 	add	fp, #100
293dc     A7 26 62 FC | 	wrlong	local01, fp
293e0     00 26 06 F6 | 	mov	local01, #0
293e4     5C 4E 85 F1 | 	sub	fp, #92
293e8     A7 1A 02 FB | 	rdlong	arg05, fp
293ec     65 1A 0E F2 | 	cmp	arg05, #101 wz
293f0     01 26 06 A6 |  if_e	mov	local01, #1
293f4     14 4E 05 F1 | 	add	fp, #20
293f8     A7 26 62 FC | 	wrlong	local01, fp
293fc     98 4E 05 F1 | 	add	fp, #152
29400     A7 28 0A FB | 	rdlong	local02, fp wz
29404     45 26 06 56 |  if_ne	mov	local01, #69
29408     65 26 06 A6 |  if_e	mov	local01, #101
2940c     8C 4E 85 F1 | 	sub	fp, #140
29410     A7 26 62 FC | 	wrlong	local01, fp
29414     20 4E 85 F1 | 	sub	fp, #32
29418     A7 26 02 FB | 	rdlong	local01, fp
2941c     10 4E 85 F1 | 	sub	fp, #16
29420     61 26 0E F2 | 	cmp	local01, #97 wz
29424     4C 00 90 5D |  if_ne	jmp	#LR__3493
29428     24 4E 05 F1 | 	add	fp, #36
2942c     A7 02 68 FC | 	wrlong	#1, fp
29430     98 4E 05 F1 | 	add	fp, #152
29434     A7 28 0A FB | 	rdlong	local02, fp wz
29438     50 26 06 56 |  if_ne	mov	local01, #80
2943c     70 26 06 A6 |  if_e	mov	local01, #112
29440     8C 4E 85 F1 | 	sub	fp, #140
29444     A7 26 62 FC | 	wrlong	local01, fp
29448     14 4E 85 F1 | 	sub	fp, #20
2944c     A7 04 68 FC | 	wrlong	#2, fp
29450     1C 4E 05 F1 | 	add	fp, #28
29454     A7 02 68 FC | 	wrlong	#1, fp
29458     84 4E 05 F1 | 	add	fp, #132
2945c     A7 28 0A FB | 	rdlong	local02, fp wz
29460     58 26 06 56 |  if_ne	mov	local01, #88
29464     78 26 06 A6 |  if_e	mov	local01, #120
29468     7C 4E 85 F1 | 	sub	fp, #124
2946c     A7 26 62 FC | 	wrlong	local01, fp
29470     40 4E 85 F1 | 	sub	fp, #64
29474                 | LR__3493
29474     10 4E 05 F1 | 	add	fp, #16
29478     A7 26 02 FB | 	rdlong	local01, fp
2947c     10 4E 85 F1 | 	sub	fp, #16
29480     23 26 0E F2 | 	cmp	local01, #35 wz
29484     3C 00 90 5D |  if_ne	jmp	#LR__3496
29488     48 4E 05 F1 | 	add	fp, #72
2948c     A7 02 68 FC | 	wrlong	#1, fp
29490     C8 4E 05 F1 | 	add	fp, #200
29494     A7 26 0A FB | 	rdlong	local01, fp wz
29498     10 4F 85 F1 | 	sub	fp, #272
2949c     18 00 90 AD |  if_e	jmp	#LR__3494
294a0     10 4E 05 F1 | 	add	fp, #16
294a4     A7 CC 68 FC | 	wrlong	#102, fp
294a8     00 4F 05 F1 | 	add	fp, #256
294ac     A7 00 68 FC | 	wrlong	#0, fp
294b0     10 4F 85 F1 | 	sub	fp, #272
294b4     0C 00 90 FD | 	jmp	#LR__3495
294b8                 | LR__3494
294b8     10 4F 05 F1 | 	add	fp, #272
294bc     A7 02 68 FC | 	wrlong	#1, fp
294c0     10 4F 85 F1 | 	sub	fp, #272
294c4                 | LR__3495
294c4                 | LR__3496
294c4     08 4E 05 F1 | 	add	fp, #8
294c8     A7 26 02 FB | 	rdlong	local01, fp
294cc     1A 26 46 F0 | 	shr	local01, #26
294d0     03 26 06 F5 | 	and	local01, #3
294d4     5C 4E 05 F1 | 	add	fp, #92
294d8     A7 26 62 FC | 	wrlong	local01, fp
294dc     58 4E 85 F1 | 	sub	fp, #88
294e0     A7 FA 01 FB | 	rdlong	result1, fp
294e4     0C 4E 85 F1 | 	sub	fp, #12
294e8     1F FA 4D F0 | 	shr	result1, #31 wz
294ec     20 00 90 AD |  if_e	jmp	#LR__3497
294f0     2C 4E 05 F1 | 	add	fp, #44
294f4     A7 5A 68 FC | 	wrlong	#45, fp
294f8     20 4E 85 F1 | 	sub	fp, #32
294fc     A7 FA 01 FB | 	rdlong	result1, fp
29500     1F FA E5 F4 | 	bitnot	result1, #31
29504     A7 FA 61 FC | 	wrlong	result1, fp
29508     0C 4E 85 F1 | 	sub	fp, #12
2950c     3C 00 90 FD | 	jmp	#LR__3499
29510                 | LR__3497
29510     64 4E 05 F1 | 	add	fp, #100
29514     A7 26 02 FB | 	rdlong	local01, fp
29518     64 4E 85 F1 | 	sub	fp, #100
2951c     01 26 0E F2 | 	cmp	local01, #1 wz
29520     2C 4E 05 A1 |  if_e	add	fp, #44
29524     A7 56 68 AC |  if_e	wrlong	#43, fp
29528     2C 4E 85 A1 |  if_e	sub	fp, #44
2952c     1C 00 90 AD |  if_e	jmp	#LR__3498
29530     64 4E 05 F1 | 	add	fp, #100
29534     A7 26 02 FB | 	rdlong	local01, fp
29538     64 4E 85 F1 | 	sub	fp, #100
2953c     02 26 0E F2 | 	cmp	local01, #2 wz
29540     2C 4E 05 A1 |  if_e	add	fp, #44
29544     A7 40 68 AC |  if_e	wrlong	#32, fp
29548     2C 4E 85 A1 |  if_e	sub	fp, #44
2954c                 | LR__3498
2954c                 | LR__3499
2954c     08 4E 05 F1 | 	add	fp, #8
29550     A7 26 02 FB | 	rdlong	local01, fp
29554     18 26 46 F0 | 	shr	local01, #24
29558     03 26 06 F5 | 	and	local01, #3
2955c     3C 4E 05 F1 | 	add	fp, #60
29560     A7 26 62 FC | 	wrlong	local01, fp
29564     00 26 06 F6 | 	mov	local01, #0
29568     18 4E 85 F1 | 	sub	fp, #24
2956c     A7 2A 0A FB | 	rdlong	local03, fp wz
29570     2C 4E 85 F1 | 	sub	fp, #44
29574     18 00 90 5D |  if_ne	jmp	#LR__3500
29578     1C 4E 05 F1 | 	add	fp, #28
2957c     A7 2C 02 FB | 	rdlong	local04, fp
29580     1C 4E 85 F1 | 	sub	fp, #28
29584     16 2F 02 F6 | 	mov	local05, local04
29588     0A 2E 0E F2 | 	cmp	local05, #10 wz
2958c     04 00 90 AD |  if_e	jmp	#LR__3501
29590                 | LR__3500
29590     01 26 66 F5 | 	xor	local01, #1
29594                 | LR__3501
29594     3C 4E 05 F1 | 	add	fp, #60
29598     A7 26 62 FC | 	wrlong	local01, fp
2959c     3C 4E 85 F1 | 	sub	fp, #60
295a0     00 26 0E F2 | 	cmp	local01, #0 wz
295a4     0C 01 90 AD |  if_e	jmp	#LR__3503
295a8     44 4E 05 F1 | 	add	fp, #68
295ac     A7 2E 02 FB | 	rdlong	local05, fp
295b0     44 4E 85 F1 | 	sub	fp, #68
295b4     17 2B 02 F6 | 	mov	local03, local05
295b8     02 2A 0E F2 | 	cmp	local03, #2 wz
295bc     F4 00 90 5D |  if_ne	jmp	#LR__3503
295c0     0C 4F 05 F1 | 	add	fp, #268
295c4     A7 30 02 FB | 	rdlong	local06, fp
295c8     0C 4F 85 F1 | 	sub	fp, #268
295cc     18 2D 02 F6 | 	mov	local04, local06
295d0     02 2C 0E F2 | 	cmp	local04, #2 wz
295d4     DC 00 90 AD |  if_e	jmp	#LR__3503
295d8     C0 4E 05 F1 | 	add	fp, #192
295dc     A7 12 02 FB | 	rdlong	arg01, fp
295e0     94 4E 85 F1 | 	sub	fp, #148
295e4     A7 14 02 FB | 	rdlong	arg02, fp
295e8     14 4E 05 F1 | 	add	fp, #20
295ec     A7 16 02 FB | 	rdlong	arg03, fp
295f0     40 4E 85 F1 | 	sub	fp, #64
295f4     8C 47 B0 FD | 	call	#__system__emitsign_0582
295f8     14 4F 05 F1 | 	add	fp, #276
295fc     A7 FA 61 FC | 	wrlong	result1, fp
29600     14 4F 85 F1 | 	sub	fp, #276
29604     00 FA 55 F2 | 	cmps	result1, #0 wc
29608     14 4F 05 C1 |  if_b	add	fp, #276
2960c     A7 FA 01 CB |  if_b	rdlong	result1, fp
29610     14 4F 85 C1 |  if_b	sub	fp, #276
29614     6C 0B 90 CD |  if_b	jmp	#LR__3553
29618     C0 4E 05 F1 | 	add	fp, #192
2961c     A7 26 02 FB | 	rdlong	local01, fp
29620     54 4E 05 F1 | 	add	fp, #84
29624     A7 2E 02 FB | 	rdlong	local05, fp
29628     17 2B 02 F6 | 	mov	local03, local05
2962c     17 27 02 F1 | 	add	local01, local05
29630     54 4E 85 F1 | 	sub	fp, #84
29634     A7 26 62 FC | 	wrlong	local01, fp
29638     58 4E 85 F1 | 	sub	fp, #88
2963c     A7 26 0A FB | 	rdlong	local01, fp wz
29640     68 4E 85 F1 | 	sub	fp, #104
29644     60 00 90 AD |  if_e	jmp	#LR__3502
29648     68 4E 05 F1 | 	add	fp, #104
2964c     A7 26 02 FB | 	rdlong	local01, fp
29650     AC 4E 05 F1 | 	add	fp, #172
29654     A7 2A 02 FB | 	rdlong	local03, fp
29658     15 27 82 F1 | 	sub	local01, local03
2965c     AC 4E 85 F1 | 	sub	fp, #172
29660     A7 26 62 FC | 	wrlong	local01, fp
29664     68 4E 85 F1 | 	sub	fp, #104
29668     00 26 56 F2 | 	cmps	local01, #0 wc
2966c     68 4E 05 C1 |  if_b	add	fp, #104
29670     A7 00 68 CC |  if_b	wrlong	#0, fp
29674     68 4E 85 C1 |  if_b	sub	fp, #104
29678     08 4E 05 F1 | 	add	fp, #8
2967c     A7 26 02 FB | 	rdlong	local01, fp
29680     E8 26 06 F4 | 	bitl	local01, #232
29684     A7 26 62 FC | 	wrlong	local01, fp
29688     60 4E 05 F1 | 	add	fp, #96
2968c     A7 2E 02 FB | 	rdlong	local05, fp
29690     17 2B 02 F6 | 	mov	local03, local05
29694     08 2A 66 F0 | 	shl	local03, #8
29698     15 27 42 F5 | 	or	local01, local03
2969c     60 4E 85 F1 | 	sub	fp, #96
296a0     A7 26 62 FC | 	wrlong	local01, fp
296a4     08 4E 85 F1 | 	sub	fp, #8
296a8                 | LR__3502
296a8     3C 4E 05 F1 | 	add	fp, #60
296ac     A7 00 68 FC | 	wrlong	#0, fp
296b0     3C 4E 85 F1 | 	sub	fp, #60
296b4                 | LR__3503
296b4     0C 4E 05 F1 | 	add	fp, #12
296b8     A7 12 02 FB | 	rdlong	arg01, fp
296bc     0C 4E 85 F1 | 	sub	fp, #12
296c0     F0 21 B0 FD | 	call	#__system____builtin_ilogb
296c4     FF FF 3F FF 
296c8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
296cc     50 00 90 5D |  if_ne	jmp	#LR__3505
296d0     2C 4E 05 F1 | 	add	fp, #44
296d4     A7 26 0A FB | 	rdlong	local01, fp wz
296d8     2C 4E 85 F1 | 	sub	fp, #44
296dc     24 00 90 AD |  if_e	jmp	#LR__3504
296e0     C0 4E 05 F1 | 	add	fp, #192
296e4     A7 28 02 FB | 	rdlong	local02, fp
296e8     14 2B 02 F6 | 	mov	local03, local02
296ec     01 2A 06 F1 | 	add	local03, #1
296f0     A7 2A 62 FC | 	wrlong	local03, fp
296f4     94 4E 85 F1 | 	sub	fp, #148
296f8     A7 2C 02 FB | 	rdlong	local04, fp
296fc     2C 4E 85 F1 | 	sub	fp, #44
29700     14 2D 42 FC | 	wrbyte	local04, local02
29704                 | LR__3504
29704     C0 4E 05 F1 | 	add	fp, #192
29708     A7 12 02 FB | 	rdlong	arg01, fp
2970c     C0 4E 85 F1 | 	sub	fp, #192
29710     B0 01 00 FF 
29714     96 14 06 F6 | 	mov	arg02, ##@LR__5291
29718     A8 E9 BF FD | 	call	#__system____builtin_strcpy
2971c     A4 08 90 FD | 	jmp	#LR__3541
29720                 | LR__3505
29720     0C 4E 05 F1 | 	add	fp, #12
29724     A7 28 02 FB | 	rdlong	local02, fp
29728     0C 4E 85 F1 | 	sub	fp, #12
2972c     14 13 02 F6 | 	mov	arg01, local02
29730     80 21 B0 FD | 	call	#__system____builtin_ilogb
29734     00 00 40 FF 
29738     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
2973c     50 00 90 5D |  if_ne	jmp	#LR__3507
29740     2C 4E 05 F1 | 	add	fp, #44
29744     A7 26 0A FB | 	rdlong	local01, fp wz
29748     2C 4E 85 F1 | 	sub	fp, #44
2974c     24 00 90 AD |  if_e	jmp	#LR__3506
29750     C0 4E 05 F1 | 	add	fp, #192
29754     A7 28 02 FB | 	rdlong	local02, fp
29758     14 2B 02 F6 | 	mov	local03, local02
2975c     01 2A 06 F1 | 	add	local03, #1
29760     A7 2A 62 FC | 	wrlong	local03, fp
29764     94 4E 85 F1 | 	sub	fp, #148
29768     A7 2C 02 FB | 	rdlong	local04, fp
2976c     2C 4E 85 F1 | 	sub	fp, #44
29770     14 2D 42 FC | 	wrbyte	local04, local02
29774                 | LR__3506
29774     C0 4E 05 F1 | 	add	fp, #192
29778     A7 12 02 FB | 	rdlong	arg01, fp
2977c     C0 4E 85 F1 | 	sub	fp, #192
29780     B0 01 00 FF 
29784     9A 14 06 F6 | 	mov	arg02, ##@LR__5292
29788     38 E9 BF FD | 	call	#__system____builtin_strcpy
2978c     34 08 90 FD | 	jmp	#LR__3541
29790                 | LR__3507
29790     10 4E 05 F1 | 	add	fp, #16
29794     A7 26 02 FB | 	rdlong	local01, fp
29798     10 4E 85 F1 | 	sub	fp, #16
2979c     67 26 0E F2 | 	cmp	local01, #103 wz
297a0     10 4E 05 51 |  if_ne	add	fp, #16
297a4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
297a8     10 4E 85 51 |  if_ne	sub	fp, #16
297ac     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
297b0     94 01 90 5D |  if_ne	jmp	#LR__3512
297b4     0C 4E 05 F1 | 	add	fp, #12
297b8     A7 12 02 FB | 	rdlong	arg01, fp
297bc     08 4E 05 F1 | 	add	fp, #8
297c0     A7 14 02 F6 | 	mov	arg02, fp
297c4     0C 4E 05 F1 | 	add	fp, #12
297c8     A7 16 02 F6 | 	mov	arg03, fp
297cc     98 4E 05 F1 | 	add	fp, #152
297d0     A7 18 02 FB | 	rdlong	arg04, fp
297d4     9C 4E 85 F1 | 	sub	fp, #156
297d8     A7 1A 02 FB | 	rdlong	arg05, fp
297dc     1C 4E 85 F1 | 	sub	fp, #28
297e0     AC 43 B0 FD | 	call	#__system__disassemble_0580
297e4     10 4E 05 F1 | 	add	fp, #16
297e8     A7 26 02 FB | 	rdlong	local01, fp
297ec     10 4E 85 F1 | 	sub	fp, #16
297f0     23 26 0E F2 | 	cmp	local01, #35 wz
297f4     A0 00 90 5D |  if_ne	jmp	#LR__3509
297f8     20 4E 05 F1 | 	add	fp, #32
297fc     A7 26 02 FB | 	rdlong	local01, fp
29800     98 4E 05 F1 | 	add	fp, #152
29804     A7 2A 02 FB | 	rdlong	local03, fp
29808     B8 4E 85 F1 | 	sub	fp, #184
2980c     15 27 5A F2 | 	cmps	local01, local03 wcz
29810     24 4E 05 11 |  if_a	add	fp, #36
29814     A7 02 68 1C |  if_a	wrlong	#1, fp
29818     24 4E 85 11 |  if_a	sub	fp, #36
2981c     A4 01 90 1D |  if_a	jmp	#LR__3515
29820     20 4E 05 F1 | 	add	fp, #32
29824     A7 26 02 FB | 	rdlong	local01, fp
29828     20 4E 85 F1 | 	sub	fp, #32
2982c     00 26 56 F2 | 	cmps	local01, #0 wc
29830     2C 00 90 3D |  if_ae	jmp	#LR__3508
29834     B8 4E 05 F1 | 	add	fp, #184
29838     A7 26 02 FB | 	rdlong	local01, fp
2983c     13 27 62 F6 | 	neg	local01, local01
29840     98 4E 85 F1 | 	sub	fp, #152
29844     A7 2A 02 FB | 	rdlong	local03, fp
29848     20 4E 85 F1 | 	sub	fp, #32
2984c     13 2B 5A F2 | 	cmps	local03, local01 wcz
29850     24 4E 05 E1 |  if_be	add	fp, #36
29854     A7 02 68 EC |  if_be	wrlong	#1, fp
29858     24 4E 85 E1 |  if_be	sub	fp, #36
2985c     64 01 90 FD | 	jmp	#LR__3515
29860                 | LR__3508
29860     20 4E 05 F1 | 	add	fp, #32
29864     A7 26 02 FB | 	rdlong	local01, fp
29868     20 4E 85 F1 | 	sub	fp, #32
2986c     01 26 56 F2 | 	cmps	local01, #1 wc
29870     50 01 90 CD |  if_b	jmp	#LR__3515
29874     B8 4E 05 F1 | 	add	fp, #184
29878     A7 26 02 FB | 	rdlong	local01, fp
2987c     98 4E 85 F1 | 	sub	fp, #152
29880     A7 2A 02 FB | 	rdlong	local03, fp
29884     15 27 82 F1 | 	sub	local01, local03
29888     98 4E 05 F1 | 	add	fp, #152
2988c     A7 26 62 FC | 	wrlong	local01, fp
29890     B8 4E 85 F1 | 	sub	fp, #184
29894     2C 01 90 FD | 	jmp	#LR__3515
29898                 | LR__3509
29898     00 26 06 F6 | 	mov	local01, #0
2989c     08 4E 05 F1 | 	add	fp, #8
298a0     A7 28 02 FB | 	rdlong	local02, fp
298a4     1C 28 46 F0 | 	shr	local02, #28
298a8     01 28 0E F5 | 	and	local02, #1 wz
298ac     01 26 06 A6 |  if_e	mov	local01, #1
298b0     2C 4E 05 F1 | 	add	fp, #44
298b4     A7 26 62 FC | 	wrlong	local01, fp
298b8     14 4E 85 F1 | 	sub	fp, #20
298bc     A7 26 02 FB | 	rdlong	local01, fp
298c0     98 4E 05 F1 | 	add	fp, #152
298c4     A7 2A 02 FB | 	rdlong	local03, fp
298c8     B8 4E 85 F1 | 	sub	fp, #184
298cc     15 27 52 F2 | 	cmps	local01, local03 wc
298d0     18 00 90 3D |  if_ae	jmp	#LR__3510
298d4     20 4E 05 F1 | 	add	fp, #32
298d8     A7 2C 02 FB | 	rdlong	local04, fp
298dc     20 4E 85 F1 | 	sub	fp, #32
298e0     FF FF 7F FF 
298e4     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
298e8     10 00 90 3D |  if_ae	jmp	#LR__3511
298ec                 | LR__3510
298ec     24 4E 05 F1 | 	add	fp, #36
298f0     A7 02 68 FC | 	wrlong	#1, fp
298f4     24 4E 85 F1 | 	sub	fp, #36
298f8     C8 00 90 FD | 	jmp	#LR__3515
298fc                 | LR__3511
298fc     B8 4E 05 F1 | 	add	fp, #184
29900     A7 2C 02 FB | 	rdlong	local04, fp
29904     98 4E 85 F1 | 	sub	fp, #152
29908     A7 2A 02 FB | 	rdlong	local03, fp
2990c     15 2D 82 F1 | 	sub	local04, local03
29910     98 4E 05 F1 | 	add	fp, #152
29914     A7 2C 62 FC | 	wrlong	local04, fp
29918     AC 4E 85 F1 | 	sub	fp, #172
2991c     A7 12 02 FB | 	rdlong	arg01, fp
29920     08 4E 05 F1 | 	add	fp, #8
29924     A7 14 02 F6 | 	mov	arg02, fp
29928     0C 4E 05 F1 | 	add	fp, #12
2992c     A7 16 02 F6 | 	mov	arg03, fp
29930     16 19 62 F6 | 	neg	arg04, local04
29934     04 4E 85 F1 | 	sub	fp, #4
29938     A7 1A 02 FB | 	rdlong	arg05, fp
2993c     1C 4E 85 F1 | 	sub	fp, #28
29940     4C 42 B0 FD | 	call	#__system__disassemble_0580
29944     7C 00 90 FD | 	jmp	#LR__3515
29948                 | LR__3512
29948     24 4E 05 F1 | 	add	fp, #36
2994c     A7 26 0A FB | 	rdlong	local01, fp wz
29950     24 4E 85 F1 | 	sub	fp, #36
29954     34 00 90 AD |  if_e	jmp	#LR__3513
29958     0C 4E 05 F1 | 	add	fp, #12
2995c     A7 12 02 FB | 	rdlong	arg01, fp
29960     08 4E 05 F1 | 	add	fp, #8
29964     A7 14 02 F6 | 	mov	arg02, fp
29968     0C 4E 05 F1 | 	add	fp, #12
2996c     A7 16 02 F6 | 	mov	arg03, fp
29970     98 4E 05 F1 | 	add	fp, #152
29974     A7 18 02 FB | 	rdlong	arg04, fp
29978     9C 4E 85 F1 | 	sub	fp, #156
2997c     A7 1A 02 FB | 	rdlong	arg05, fp
29980     1C 4E 85 F1 | 	sub	fp, #28
29984     08 42 B0 FD | 	call	#__system__disassemble_0580
29988     38 00 90 FD | 	jmp	#LR__3514
2998c                 | LR__3513
2998c     0C 4E 05 F1 | 	add	fp, #12
29990     A7 12 02 FB | 	rdlong	arg01, fp
29994     08 4E 05 F1 | 	add	fp, #8
29998     A7 14 02 F6 | 	mov	arg02, fp
2999c     0C 4E 05 F1 | 	add	fp, #12
299a0     A7 16 02 F6 | 	mov	arg03, fp
299a4     98 4E 05 F1 | 	add	fp, #152
299a8     A7 2C 02 FB | 	rdlong	local04, fp
299ac     01 2C 06 F1 | 	add	local04, #1
299b0     16 19 62 F6 | 	neg	arg04, local04
299b4     9C 4E 85 F1 | 	sub	fp, #156
299b8     A7 1A 02 FB | 	rdlong	arg05, fp
299bc     1C 4E 85 F1 | 	sub	fp, #28
299c0     CC 41 B0 FD | 	call	#__system__disassemble_0580
299c4                 | LR__3514
299c4                 | LR__3515
299c4     1C 4E 05 F1 | 	add	fp, #28
299c8     A7 26 02 FB | 	rdlong	local01, fp
299cc     1C 4E 85 F1 | 	sub	fp, #28
299d0     02 26 0E F2 | 	cmp	local01, #2 wz
299d4     4C 00 90 5D |  if_ne	jmp	#LR__3518
299d8     1C 4E 05 F1 | 	add	fp, #28
299dc     A7 20 68 FC | 	wrlong	#16, fp
299e0     1C 4E 85 F1 | 	sub	fp, #28
299e4                 | LR__3516
299e4     14 4E 05 F1 | 	add	fp, #20
299e8     A7 26 0A FB | 	rdlong	local01, fp wz
299ec     14 4E 85 F1 | 	sub	fp, #20
299f0     30 00 90 AD |  if_e	jmp	#LR__3517
299f4     14 4E 05 F1 | 	add	fp, #20
299f8     A7 2A 02 FB | 	rdlong	local03, fp
299fc     14 4E 85 F1 | 	sub	fp, #20
29a00     00 80 00 FF 
29a04     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
29a08     18 00 90 3D |  if_ae	jmp	#LR__3517
29a0c     14 4E 05 F1 | 	add	fp, #20
29a10     A7 26 02 FB | 	rdlong	local01, fp
29a14     01 26 66 F0 | 	shl	local01, #1
29a18     A7 26 62 FC | 	wrlong	local01, fp
29a1c     14 4E 85 F1 | 	sub	fp, #20
29a20     C0 FF 9F FD | 	jmp	#LR__3516
29a24                 | LR__3517
29a24                 | LR__3518
29a24     70 4E 05 F1 | 	add	fp, #112
29a28     A7 12 02 F6 | 	mov	arg01, fp
29a2c     5C 4E 85 F1 | 	sub	fp, #92
29a30     A7 14 02 FB | 	rdlong	arg02, fp
29a34     08 4E 05 F1 | 	add	fp, #8
29a38     A7 16 02 FB | 	rdlong	arg03, fp
29a3c     A0 4E 05 F1 | 	add	fp, #160
29a40     A7 1A 02 FB | 	rdlong	arg05, fp
29a44     BC 4E 85 F1 | 	sub	fp, #188
29a48     01 18 06 F6 | 	mov	arg04, #1
29a4c     CC 40 B0 FD | 	call	#__system___uitoa
29a50     58 4E 05 F1 | 	add	fp, #88
29a54     A7 FA 61 FC | 	wrlong	result1, fp
29a58     38 4E 85 F1 | 	sub	fp, #56
29a5c     A7 26 02 FB | 	rdlong	local01, fp
29a60     20 4E 85 F1 | 	sub	fp, #32
29a64     00 26 56 F2 | 	cmps	local01, #0 wc
29a68     50 00 90 3D |  if_ae	jmp	#LR__3519
29a6c     60 4E 05 F1 | 	add	fp, #96
29a70     A7 5A 68 FC | 	wrlong	#45, fp
29a74     50 4E 05 F1 | 	add	fp, #80
29a78     A7 12 02 F6 | 	mov	arg01, fp
29a7c     90 4E 85 F1 | 	sub	fp, #144
29a80     A7 2A 02 FB | 	rdlong	local03, fp
29a84     15 15 62 F6 | 	neg	arg02, local03
29a88     18 4E 05 F1 | 	add	fp, #24
29a8c     A7 18 02 FB | 	rdlong	arg04, fp
29a90     84 4E 05 F1 | 	add	fp, #132
29a94     A7 30 02 FB | 	rdlong	local06, fp
29a98     BC 4E 85 F1 | 	sub	fp, #188
29a9c     18 2D 02 F6 | 	mov	local04, local06
29aa0     0A 16 06 F6 | 	mov	arg03, #10
29aa4     16 1B 02 F6 | 	mov	arg05, local04
29aa8     70 40 B0 FD | 	call	#__system___uitoa
29aac     5C 4E 05 F1 | 	add	fp, #92
29ab0     A7 FA 61 FC | 	wrlong	result1, fp
29ab4     5C 4E 85 F1 | 	sub	fp, #92
29ab8     48 00 90 FD | 	jmp	#LR__3520
29abc                 | LR__3519
29abc     60 4E 05 F1 | 	add	fp, #96
29ac0     A7 56 68 FC | 	wrlong	#43, fp
29ac4     50 4E 05 F1 | 	add	fp, #80
29ac8     A7 12 02 F6 | 	mov	arg01, fp
29acc     90 4E 85 F1 | 	sub	fp, #144
29ad0     A7 14 02 FB | 	rdlong	arg02, fp
29ad4     18 4E 05 F1 | 	add	fp, #24
29ad8     A7 18 02 FB | 	rdlong	arg04, fp
29adc     84 4E 05 F1 | 	add	fp, #132
29ae0     A7 30 02 FB | 	rdlong	local06, fp
29ae4     BC 4E 85 F1 | 	sub	fp, #188
29ae8     18 2D 02 F6 | 	mov	local04, local06
29aec     0A 16 06 F6 | 	mov	arg03, #10
29af0     16 1B 02 F6 | 	mov	arg05, local04
29af4     24 40 B0 FD | 	call	#__system___uitoa
29af8     5C 4E 05 F1 | 	add	fp, #92
29afc     A7 FA 61 FC | 	wrlong	result1, fp
29b00     5C 4E 85 F1 | 	sub	fp, #92
29b04                 | LR__3520
29b04     24 4E 05 F1 | 	add	fp, #36
29b08     A7 26 0A FB | 	rdlong	local01, fp wz
29b0c     24 4E 85 F1 | 	sub	fp, #36
29b10     2C 00 90 AD |  if_e	jmp	#LR__3521
29b14     50 4E 05 F1 | 	add	fp, #80
29b18     A7 00 68 FC | 	wrlong	#0, fp
29b1c     04 4E 85 F1 | 	sub	fp, #4
29b20     A7 00 68 FC | 	wrlong	#0, fp
29b24     6C 4E 05 F1 | 	add	fp, #108
29b28     A7 26 02 FB | 	rdlong	local01, fp
29b2c     01 26 06 F1 | 	add	local01, #1
29b30     64 4E 85 F1 | 	sub	fp, #100
29b34     A7 26 62 FC | 	wrlong	local01, fp
29b38     54 4E 85 F1 | 	sub	fp, #84
29b3c     88 00 90 FD | 	jmp	#LR__3524
29b40                 | LR__3521
29b40     20 4E 05 F1 | 	add	fp, #32
29b44     A7 26 02 FB | 	rdlong	local01, fp
29b48     20 4E 85 F1 | 	sub	fp, #32
29b4c     00 26 56 F2 | 	cmps	local01, #0 wc
29b50     40 00 90 3D |  if_ae	jmp	#LR__3522
29b54     20 4E 05 F1 | 	add	fp, #32
29b58     A7 28 02 FB | 	rdlong	local02, fp
29b5c     30 4E 05 F1 | 	add	fp, #48
29b60     A7 28 62 FC | 	wrlong	local02, fp
29b64     04 4E 85 F1 | 	sub	fp, #4
29b68     A7 28 62 FC | 	wrlong	local02, fp
29b6c     2C 4E 85 F1 | 	sub	fp, #44
29b70     A7 26 02 FB | 	rdlong	local01, fp
29b74     98 4E 05 F1 | 	add	fp, #152
29b78     A7 2A 02 FB | 	rdlong	local03, fp
29b7c     15 27 02 F1 | 	add	local01, local03
29b80     01 26 06 F1 | 	add	local01, #1
29b84     64 4E 85 F1 | 	sub	fp, #100
29b88     A7 26 62 FC | 	wrlong	local01, fp
29b8c     54 4E 85 F1 | 	sub	fp, #84
29b90     34 00 90 FD | 	jmp	#LR__3523
29b94                 | LR__3522
29b94     4C 4E 05 F1 | 	add	fp, #76
29b98     A7 00 68 FC | 	wrlong	#0, fp
29b9c     2C 4E 85 F1 | 	sub	fp, #44
29ba0     A7 26 02 FB | 	rdlong	local01, fp
29ba4     30 4E 05 F1 | 	add	fp, #48
29ba8     A7 26 62 FC | 	wrlong	local01, fp
29bac     68 4E 05 F1 | 	add	fp, #104
29bb0     A7 2A 02 FB | 	rdlong	local03, fp
29bb4     15 27 02 F1 | 	add	local01, local03
29bb8     01 26 06 F1 | 	add	local01, #1
29bbc     64 4E 85 F1 | 	sub	fp, #100
29bc0     A7 26 62 FC | 	wrlong	local01, fp
29bc4     54 4E 85 F1 | 	sub	fp, #84
29bc8                 | LR__3523
29bc8                 | LR__3524
29bc8     54 4E 05 F1 | 	add	fp, #84
29bcc     A7 26 02 FB | 	rdlong	local01, fp
29bd0     08 4E 85 F1 | 	sub	fp, #8
29bd4     A7 2A 02 FB | 	rdlong	local03, fp
29bd8     15 27 82 F1 | 	sub	local01, local03
29bdc     01 26 06 F1 | 	add	local01, #1
29be0     24 4E 85 F1 | 	sub	fp, #36
29be4     A7 26 62 FC | 	wrlong	local01, fp
29be8     04 4E 05 F1 | 	add	fp, #4
29bec     A7 26 0A FB | 	rdlong	local01, fp wz
29bf0     2C 4E 85 F1 | 	sub	fp, #44
29bf4     28 4E 05 51 |  if_ne	add	fp, #40
29bf8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
29bfc     01 2A 06 51 |  if_ne	add	local03, #1
29c00     A7 2A 62 5C |  if_ne	wrlong	local03, fp
29c04     28 4E 85 51 |  if_ne	sub	fp, #40
29c08     1C 4E 05 F1 | 	add	fp, #28
29c0c     A7 26 02 FB | 	rdlong	local01, fp
29c10     1C 4E 85 F1 | 	sub	fp, #28
29c14     10 26 0E F2 | 	cmp	local01, #16 wz
29c18     28 4E 05 A1 |  if_e	add	fp, #40
29c1c     A7 26 02 AB |  if_e	rdlong	local01, fp
29c20     02 26 06 A1 |  if_e	add	local01, #2
29c24     A7 26 62 AC |  if_e	wrlong	local01, fp
29c28     28 4E 85 A1 |  if_e	sub	fp, #40
29c2c     24 4E 05 F1 | 	add	fp, #36
29c30     A7 26 0A FB | 	rdlong	local01, fp wz
29c34     24 4E 85 F1 | 	sub	fp, #36
29c38     28 00 90 AD |  if_e	jmp	#LR__3525
29c3c     28 4E 05 F1 | 	add	fp, #40
29c40     A7 26 02 FB | 	rdlong	local01, fp
29c44     02 2A 06 F6 | 	mov	local03, #2
29c48     34 4E 05 F1 | 	add	fp, #52
29c4c     A7 2E 02 FB | 	rdlong	local05, fp
29c50     17 2B 02 F1 | 	add	local03, local05
29c54     15 27 02 F1 | 	add	local01, local03
29c58     34 4E 85 F1 | 	sub	fp, #52
29c5c     A7 26 62 FC | 	wrlong	local01, fp
29c60     28 4E 85 F1 | 	sub	fp, #40
29c64                 | LR__3525
29c64     28 4E 05 F1 | 	add	fp, #40
29c68     A7 26 02 FB | 	rdlong	local01, fp
29c6c     28 4E 85 F1 | 	sub	fp, #40
29c70     41 26 56 F2 | 	cmps	local01, #65 wc
29c74     01 FA 65 36 |  if_ae	neg	result1, #1
29c78     08 05 90 3D |  if_ae	jmp	#LR__3553
29c7c     3C 4E 05 F1 | 	add	fp, #60
29c80     A7 26 0A FB | 	rdlong	local01, fp wz
29c84     3C 4E 85 F1 | 	sub	fp, #60
29c88     60 00 90 AD |  if_e	jmp	#LR__3526
29c8c     C0 4E 05 F1 | 	add	fp, #192
29c90     A7 12 02 FB | 	rdlong	arg01, fp
29c94     94 4E 85 F1 | 	sub	fp, #148
29c98     A7 14 02 FB | 	rdlong	arg02, fp
29c9c     14 4E 05 F1 | 	add	fp, #20
29ca0     A7 16 02 FB | 	rdlong	arg03, fp
29ca4     40 4E 85 F1 | 	sub	fp, #64
29ca8     D8 40 B0 FD | 	call	#__system__emitsign_0582
29cac     18 4F 05 F1 | 	add	fp, #280
29cb0     A7 FA 61 FC | 	wrlong	result1, fp
29cb4     18 4F 85 F1 | 	sub	fp, #280
29cb8     00 FA 55 F2 | 	cmps	result1, #0 wc
29cbc     18 4F 05 C1 |  if_b	add	fp, #280
29cc0     A7 FA 01 CB |  if_b	rdlong	result1, fp
29cc4     18 4F 85 C1 |  if_b	sub	fp, #280
29cc8     B8 04 90 CD |  if_b	jmp	#LR__3553
29ccc     C0 4E 05 F1 | 	add	fp, #192
29cd0     A7 26 02 FB | 	rdlong	local01, fp
29cd4     58 4E 05 F1 | 	add	fp, #88
29cd8     A7 2A 02 FB | 	rdlong	local03, fp
29cdc     15 27 02 F1 | 	add	local01, local03
29ce0     58 4E 85 F1 | 	sub	fp, #88
29ce4     A7 26 62 FC | 	wrlong	local01, fp
29ce8     C0 4E 85 F1 | 	sub	fp, #192
29cec                 | LR__3526
29cec     4C 4E 05 F1 | 	add	fp, #76
29cf0     A7 26 02 FB | 	rdlong	local01, fp
29cf4     34 4E 85 F1 | 	sub	fp, #52
29cf8     A7 26 62 FC | 	wrlong	local01, fp
29cfc     18 4E 85 F1 | 	sub	fp, #24
29d00     97 9E 48 FB | 	callpa	#(@LR__3532-@LR__3527)>>2,fcache_load_ptr_
29d04                 | LR__3527
29d04     18 4E 05 F1 | 	add	fp, #24
29d08     A7 28 02 FB | 	rdlong	local02, fp
29d0c     3C 4E 05 F1 | 	add	fp, #60
29d10     A7 2E 02 FB | 	rdlong	local05, fp
29d14     54 4E 85 F1 | 	sub	fp, #84
29d18     17 29 52 F2 | 	cmps	local02, local05 wc
29d1c     20 01 90 3D |  if_ae	jmp	#LR__3533
29d20     18 4E 05 F1 | 	add	fp, #24
29d24     A7 30 02 FB | 	rdlong	local06, fp
29d28     18 4E 85 F1 | 	sub	fp, #24
29d2c     00 30 56 F2 | 	cmps	local06, #0 wc
29d30     58 00 90 CD |  if_b	jmp	#LR__3528
29d34     18 4E 05 F1 | 	add	fp, #24
29d38     A7 30 02 FB | 	rdlong	local06, fp
29d3c     40 4E 05 F1 | 	add	fp, #64
29d40     A7 32 02 FB | 	rdlong	local07, fp
29d44     58 4E 85 F1 | 	sub	fp, #88
29d48     19 31 52 F2 | 	cmps	local06, local07 wc
29d4c     3C 00 90 3D |  if_ae	jmp	#LR__3528
29d50     C0 4E 05 F1 | 	add	fp, #192
29d54     A7 34 02 FB | 	rdlong	local08, fp
29d58     1A 33 02 F6 | 	mov	local07, local08
29d5c     01 32 06 F1 | 	add	local07, #1
29d60     A7 32 62 FC | 	wrlong	local07, fp
29d64     A8 4E 85 F1 | 	sub	fp, #168
29d68     A7 32 02 FB | 	rdlong	local07, fp
29d6c     19 37 02 F6 | 	mov	local09, local07
29d70     58 4E 05 F1 | 	add	fp, #88
29d74     A7 38 02 F6 | 	mov	local10, fp
29d78     A7 36 02 F1 | 	add	local09, fp
29d7c     1B 3B C2 FA | 	rdbyte	local11, local09
29d80     1A 3B 42 FC | 	wrbyte	local11, local08
29d84     70 4E 85 F1 | 	sub	fp, #112
29d88     20 00 90 FD | 	jmp	#LR__3529
29d8c                 | LR__3528
29d8c     C0 4E 05 F1 | 	add	fp, #192
29d90     A7 34 02 FB | 	rdlong	local08, fp
29d94     1A 37 02 F6 | 	mov	local09, local08
29d98     01 36 06 F1 | 	add	local09, #1
29d9c     A7 36 62 FC | 	wrlong	local09, fp
29da0     C0 4E 85 F1 | 	sub	fp, #192
29da4     30 36 06 F6 | 	mov	local09, #48
29da8     1A 61 48 FC | 	wrbyte	#48, local08
29dac                 | LR__3529
29dac     18 4E 05 F1 | 	add	fp, #24
29db0     A7 30 02 FB | 	rdlong	local06, fp
29db4     38 4E 05 F1 | 	add	fp, #56
29db8     A7 3C 02 FB | 	rdlong	local12, fp
29dbc     50 4E 85 F1 | 	sub	fp, #80
29dc0     1E 31 0A F2 | 	cmp	local06, local12 wz
29dc4     5C 00 90 5D |  if_ne	jmp	#LR__3531
29dc8     10 4F 05 F1 | 	add	fp, #272
29dcc     A7 32 02 FB | 	rdlong	local07, fp
29dd0     10 4F 85 F1 | 	sub	fp, #272
29dd4     19 37 0A F6 | 	mov	local09, local07 wz
29dd8     28 00 90 5D |  if_ne	jmp	#LR__3530
29ddc     54 4E 05 F1 | 	add	fp, #84
29de0     A7 3A 02 FB | 	rdlong	local11, fp
29de4     1D 39 02 F6 | 	mov	local10, local11
29de8     01 38 86 F1 | 	sub	local10, #1
29dec     3C 4E 85 F1 | 	sub	fp, #60
29df0     A7 3E 02 FB | 	rdlong	local13, fp
29df4     18 4E 85 F1 | 	sub	fp, #24
29df8     1F 41 02 F6 | 	mov	local14, local13
29dfc     1C 41 52 F2 | 	cmps	local14, local10 wc
29e00     20 00 90 3D |  if_ae	jmp	#LR__3531
29e04                 | LR__3530
29e04     C0 4E 05 F1 | 	add	fp, #192
29e08     A7 34 02 FB | 	rdlong	local08, fp
29e0c     1A 3D 02 F6 | 	mov	local12, local08
29e10     01 3C 06 F1 | 	add	local12, #1
29e14     A7 3C 62 FC | 	wrlong	local12, fp
29e18     C0 4E 85 F1 | 	sub	fp, #192
29e1c     2E 36 06 F6 | 	mov	local09, #46
29e20     1A 5D 48 FC | 	wrbyte	#46, local08
29e24                 | LR__3531
29e24     18 4E 05 F1 | 	add	fp, #24
29e28     A7 42 02 FB | 	rdlong	local15, fp
29e2c     21 3D 02 F6 | 	mov	local12, local15
29e30     01 3C 06 F1 | 	add	local12, #1
29e34     A7 3C 62 FC | 	wrlong	local12, fp
29e38     18 4E 85 F1 | 	sub	fp, #24
29e3c     C4 FE 9F FD | 	jmp	#LR__3527
29e40                 | LR__3532
29e40                 | LR__3533
29e40     34 4E 05 F1 | 	add	fp, #52
29e44     A7 26 0A FB | 	rdlong	local01, fp wz
29e48     34 4E 85 F1 | 	sub	fp, #52
29e4c     A0 00 90 AD |  if_e	jmp	#LR__3537
29e50     C0 4E 05 F1 | 	add	fp, #192
29e54     A7 26 02 FB | 	rdlong	local01, fp
29e58     01 26 86 F1 | 	sub	local01, #1
29e5c     A7 26 62 FC | 	wrlong	local01, fp
29e60     C0 4E 85 F1 | 	sub	fp, #192
29e64     97 26 48 FB | 	callpa	#(@LR__3535-@LR__3534)>>2,fcache_load_ptr_
29e68                 | LR__3534
29e68     C0 4E 05 F1 | 	add	fp, #192
29e6c     A7 26 02 FB | 	rdlong	local01, fp
29e70     04 4E 05 F1 | 	add	fp, #4
29e74     A7 2A 02 FB | 	rdlong	local03, fp
29e78     C4 4E 85 F1 | 	sub	fp, #196
29e7c     15 27 5A F2 | 	cmps	local01, local03 wcz
29e80     30 00 90 ED |  if_be	jmp	#LR__3536
29e84     C0 4E 05 F1 | 	add	fp, #192
29e88     A7 30 02 FB | 	rdlong	local06, fp
29e8c     C0 4E 85 F1 | 	sub	fp, #192
29e90     18 2D C2 FA | 	rdbyte	local04, local06
29e94     30 2C 0E F2 | 	cmp	local04, #48 wz
29e98     18 00 90 5D |  if_ne	jmp	#LR__3536
29e9c     C0 4E 05 F1 | 	add	fp, #192
29ea0     A7 26 02 FB | 	rdlong	local01, fp
29ea4     01 26 86 F1 | 	sub	local01, #1
29ea8     A7 26 62 FC | 	wrlong	local01, fp
29eac     C0 4E 85 F1 | 	sub	fp, #192
29eb0     B4 FF 9F FD | 	jmp	#LR__3534
29eb4                 | LR__3535
29eb4                 | LR__3536
29eb4     C0 4E 05 F1 | 	add	fp, #192
29eb8     A7 28 02 FB | 	rdlong	local02, fp
29ebc     C0 4E 85 F1 | 	sub	fp, #192
29ec0     14 27 C2 FA | 	rdbyte	local01, local02
29ec4     2E 26 0E F2 | 	cmp	local01, #46 wz
29ec8     C0 4E 05 A1 |  if_e	add	fp, #192
29ecc     A7 26 02 AB |  if_e	rdlong	local01, fp
29ed0     01 26 86 A1 |  if_e	sub	local01, #1
29ed4     A7 26 62 AC |  if_e	wrlong	local01, fp
29ed8     C0 4E 85 A1 |  if_e	sub	fp, #192
29edc     C0 4E 05 F1 | 	add	fp, #192
29ee0     A7 2A 02 FB | 	rdlong	local03, fp
29ee4     01 2A 06 F1 | 	add	local03, #1
29ee8     A7 2A 62 FC | 	wrlong	local03, fp
29eec     C0 4E 85 F1 | 	sub	fp, #192
29ef0                 | LR__3537
29ef0     24 4E 05 F1 | 	add	fp, #36
29ef4     A7 26 0A FB | 	rdlong	local01, fp wz
29ef8     24 4E 85 F1 | 	sub	fp, #36
29efc     B4 00 90 AD |  if_e	jmp	#LR__3540
29f00     C0 4E 05 F1 | 	add	fp, #192
29f04     A7 28 02 FB | 	rdlong	local02, fp
29f08     14 2B 02 F6 | 	mov	local03, local02
29f0c     01 2A 06 F1 | 	add	local03, #1
29f10     A7 2A 62 FC | 	wrlong	local03, fp
29f14     90 4E 85 F1 | 	sub	fp, #144
29f18     A7 2C 02 FB | 	rdlong	local04, fp
29f1c     14 2D 42 FC | 	wrbyte	local04, local02
29f20     90 4E 05 F1 | 	add	fp, #144
29f24     A7 28 02 FB | 	rdlong	local02, fp
29f28     14 2B 02 F6 | 	mov	local03, local02
29f2c     01 2A 06 F1 | 	add	local03, #1
29f30     A7 2A 62 FC | 	wrlong	local03, fp
29f34     60 4E 85 F1 | 	sub	fp, #96
29f38     A7 2C 02 FB | 	rdlong	local04, fp
29f3c     14 2D 42 FC | 	wrbyte	local04, local02
29f40     48 4E 85 F1 | 	sub	fp, #72
29f44     A7 00 68 FC | 	wrlong	#0, fp
29f48     18 4E 85 F1 | 	sub	fp, #24
29f4c                 | LR__3538
29f4c     18 4E 05 F1 | 	add	fp, #24
29f50     A7 28 02 FB | 	rdlong	local02, fp
29f54     44 4E 05 F1 | 	add	fp, #68
29f58     A7 2E 02 FB | 	rdlong	local05, fp
29f5c     5C 4E 85 F1 | 	sub	fp, #92
29f60     17 29 52 F2 | 	cmps	local02, local05 wc
29f64     4C 00 90 3D |  if_ae	jmp	#LR__3539
29f68     C0 4E 05 F1 | 	add	fp, #192
29f6c     A7 34 02 FB | 	rdlong	local08, fp
29f70     1A 3D 02 F6 | 	mov	local12, local08
29f74     01 3C 06 F1 | 	add	local12, #1
29f78     A7 3C 62 FC | 	wrlong	local12, fp
29f7c     A8 4E 85 F1 | 	sub	fp, #168
29f80     A7 32 02 FB | 	rdlong	local07, fp
29f84     19 37 02 F6 | 	mov	local09, local07
29f88     98 4E 05 F1 | 	add	fp, #152
29f8c     A7 38 02 F6 | 	mov	local10, fp
29f90     A7 36 02 F1 | 	add	local09, fp
29f94     1B 3B C2 FA | 	rdbyte	local11, local09
29f98     1A 3B 42 FC | 	wrbyte	local11, local08
29f9c     98 4E 85 F1 | 	sub	fp, #152
29fa0     A7 3C 02 FB | 	rdlong	local12, fp
29fa4     01 3C 06 F1 | 	add	local12, #1
29fa8     A7 3C 62 FC | 	wrlong	local12, fp
29fac     18 4E 85 F1 | 	sub	fp, #24
29fb0     98 FF 9F FD | 	jmp	#LR__3538
29fb4                 | LR__3539
29fb4                 | LR__3540
29fb4     C0 4E 05 F1 | 	add	fp, #192
29fb8     A7 26 02 FB | 	rdlong	local01, fp
29fbc     C0 4E 85 F1 | 	sub	fp, #192
29fc0     13 01 48 FC | 	wrbyte	#0, local01
29fc4                 | LR__3541
29fc4     6C 4E 05 F1 | 	add	fp, #108
29fc8     A7 26 0A FB | 	rdlong	local01, fp wz
29fcc     6C 4E 85 F1 | 	sub	fp, #108
29fd0     90 01 90 AD |  if_e	jmp	#LR__3552
29fd4     48 4E 05 F1 | 	add	fp, #72
29fd8     A7 2A 0A FB | 	rdlong	local03, fp wz
29fdc     48 4E 85 F1 | 	sub	fp, #72
29fe0     80 01 90 AD |  if_e	jmp	#LR__3552
29fe4     C4 4E 05 F1 | 	add	fp, #196
29fe8     A7 12 02 FB | 	rdlong	arg01, fp
29fec     C4 4E 85 F1 | 	sub	fp, #196
29ff0     09 45 02 F6 | 	mov	local16, arg01
29ff4     97 06 48 FB | 	callpa	#(@LR__3543-@LR__3542)>>2,fcache_load_ptr_
29ff8                 | LR__3542
29ff8     22 FB C9 FA | 	rdbyte	result1, local16 wz
29ffc     01 44 06 51 |  if_ne	add	local16, #1
2a000     F4 FF 9F 5D |  if_ne	jmp	#LR__3542
2a004                 | LR__3543
2a004     09 45 82 F1 | 	sub	local16, arg01
2a008     22 2D 02 F6 | 	mov	local04, local16
2a00c     6C 4E 05 F1 | 	add	fp, #108
2a010     A7 30 02 FB | 	rdlong	local06, fp
2a014     6C 4E 85 F1 | 	sub	fp, #108
2a018     18 2D 5A F2 | 	cmps	local04, local06 wcz
2a01c     44 01 90 ED |  if_be	jmp	#LR__3552
2a020     C4 4E 05 F1 | 	add	fp, #196
2a024     A7 26 02 FB | 	rdlong	local01, fp
2a028     5C 4E 05 F1 | 	add	fp, #92
2a02c     A7 26 62 FC | 	wrlong	local01, fp
2a030     FC 4E 85 F1 | 	sub	fp, #252
2a034     A7 26 0A FB | 	rdlong	local01, fp wz
2a038     24 4E 85 F1 | 	sub	fp, #36
2a03c     20 00 90 AD |  if_e	jmp	#LR__3544
2a040     B8 4E 05 F1 | 	add	fp, #184
2a044     A7 00 68 FC | 	wrlong	#0, fp
2a048     4C 4E 85 F1 | 	sub	fp, #76
2a04c     A7 26 02 FB | 	rdlong	local01, fp
2a050     B0 4E 05 F1 | 	add	fp, #176
2a054     A7 26 62 FC | 	wrlong	local01, fp
2a058     1C 4F 85 F1 | 	sub	fp, #284
2a05c     24 00 90 FD | 	jmp	#LR__3545
2a060                 | LR__3544
2a060     6C 4E 05 F1 | 	add	fp, #108
2a064     A7 26 02 FB | 	rdlong	local01, fp
2a068     01 26 86 F1 | 	sub	local01, #1
2a06c     4C 4E 05 F1 | 	add	fp, #76
2a070     A7 2A 02 FB | 	rdlong	local03, fp
2a074     15 27 82 F1 | 	sub	local01, local03
2a078     64 4E 05 F1 | 	add	fp, #100
2a07c     A7 26 62 FC | 	wrlong	local01, fp
2a080     1C 4F 85 F1 | 	sub	fp, #284
2a084                 | LR__3545
2a084     97 20 48 FB | 	callpa	#(@LR__3547-@LR__3546)>>2,fcache_load_ptr_
2a088                 | LR__3546
2a088     1C 4F 05 F1 | 	add	fp, #284
2a08c     A7 26 0A FB | 	rdlong	local01, fp wz
2a090     1C 4F 85 F1 | 	sub	fp, #284
2a094     30 00 90 AD |  if_e	jmp	#LR__3548
2a098     20 4F 05 F1 | 	add	fp, #288
2a09c     A7 28 02 FB | 	rdlong	local02, fp
2a0a0     14 2B 02 F6 | 	mov	local03, local02
2a0a4     01 2A 06 F1 | 	add	local03, #1
2a0a8     A7 2A 62 FC | 	wrlong	local03, fp
2a0ac     14 55 48 FC | 	wrbyte	#42, local02
2a0b0     04 4E 85 F1 | 	sub	fp, #4
2a0b4     A7 26 02 FB | 	rdlong	local01, fp
2a0b8     01 26 86 F1 | 	sub	local01, #1
2a0bc     A7 26 62 FC | 	wrlong	local01, fp
2a0c0     1C 4F 85 F1 | 	sub	fp, #284
2a0c4     C0 FF 9F FD | 	jmp	#LR__3546
2a0c8                 | LR__3547
2a0c8                 | LR__3548
2a0c8     B8 4E 05 F1 | 	add	fp, #184
2a0cc     A7 26 0A FB | 	rdlong	local01, fp wz
2a0d0     B8 4E 85 F1 | 	sub	fp, #184
2a0d4     70 00 90 AD |  if_e	jmp	#LR__3551
2a0d8     20 4F 05 F1 | 	add	fp, #288
2a0dc     A7 28 02 FB | 	rdlong	local02, fp
2a0e0     14 2B 02 F6 | 	mov	local03, local02
2a0e4     01 2A 06 F1 | 	add	local03, #1
2a0e8     A7 2A 62 FC | 	wrlong	local03, fp
2a0ec     14 5D 48 FC | 	wrbyte	#46, local02
2a0f0     04 4E 85 F1 | 	sub	fp, #4
2a0f4     A7 00 68 FC | 	wrlong	#0, fp
2a0f8     1C 4F 85 F1 | 	sub	fp, #284
2a0fc                 | LR__3549
2a0fc     1C 4F 05 F1 | 	add	fp, #284
2a100     A7 28 02 FB | 	rdlong	local02, fp
2a104     64 4E 85 F1 | 	sub	fp, #100
2a108     A7 2E 02 FB | 	rdlong	local05, fp
2a10c     B8 4E 85 F1 | 	sub	fp, #184
2a110     17 29 52 F2 | 	cmps	local02, local05 wc
2a114     30 00 90 3D |  if_ae	jmp	#LR__3550
2a118     20 4F 05 F1 | 	add	fp, #288
2a11c     A7 34 02 FB | 	rdlong	local08, fp
2a120     1A 3D 02 F6 | 	mov	local12, local08
2a124     01 3C 06 F1 | 	add	local12, #1
2a128     A7 3C 62 FC | 	wrlong	local12, fp
2a12c     1A 55 48 FC | 	wrbyte	#42, local08
2a130     04 4E 85 F1 | 	sub	fp, #4
2a134     A7 3C 02 FB | 	rdlong	local12, fp
2a138     01 3C 06 F1 | 	add	local12, #1
2a13c     A7 3C 62 FC | 	wrlong	local12, fp
2a140     1C 4F 85 F1 | 	sub	fp, #284
2a144     B4 FF 9F FD | 	jmp	#LR__3549
2a148                 | LR__3550
2a148                 | LR__3551
2a148     20 4F 05 F1 | 	add	fp, #288
2a14c     A7 28 02 FB | 	rdlong	local02, fp
2a150     14 2B 02 F6 | 	mov	local03, local02
2a154     01 2A 06 F1 | 	add	local03, #1
2a158     A7 2A 62 FC | 	wrlong	local03, fp
2a15c     20 4F 85 F1 | 	sub	fp, #288
2a160     14 01 48 FC | 	wrbyte	#0, local02
2a164                 | LR__3552
2a164     04 4E 05 F1 | 	add	fp, #4
2a168     A7 12 02 FB | 	rdlong	arg01, fp
2a16c     04 4E 05 F1 | 	add	fp, #4
2a170     A7 14 02 FB | 	rdlong	arg02, fp
2a174     BC 4E 05 F1 | 	add	fp, #188
2a178     A7 16 02 FB | 	rdlong	arg03, fp
2a17c     C4 4E 85 F1 | 	sub	fp, #196
2a180     C4 EE BF FD | 	call	#__system___fmtstr
2a184                 | LR__3553
2a184     A7 F0 03 F6 | 	mov	ptra, fp
2a188     B2 00 A0 FD | 	call	#popregs_
2a18c                 | __system___fmtfloat_ret
2a18c     2D 00 64 FD | 	ret
2a190                 | 
2a190                 | __system__Left_S
2a190     04 4A 05 F6 | 	mov	COUNT_, #4
2a194     A8 00 A0 FD | 	call	#pushregs_
2a198     09 27 02 F6 | 	mov	local01, arg01
2a19c     0A 29 02 F6 | 	mov	local02, arg02
2a1a0     01 28 56 F2 | 	cmps	local02, #1 wc
2a1a4     B0 01 00 CF 
2a1a8     9E FA 05 C6 |  if_b	mov	result1, ##@LR__5293
2a1ac     5C 00 90 CD |  if_b	jmp	#LR__3563
2a1b0     13 13 02 F6 | 	mov	arg01, local01
2a1b4     09 2B 02 F6 | 	mov	local03, arg01
2a1b8     97 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
2a1bc                 | LR__3560
2a1bc     15 FB C9 FA | 	rdbyte	result1, local03 wz
2a1c0     01 2A 06 51 |  if_ne	add	local03, #1
2a1c4     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
2a1c8                 | LR__3561
2a1c8     09 2B 82 F1 | 	sub	local03, arg01
2a1cc     15 FB 01 F6 | 	mov	result1, local03
2a1d0     14 FB 59 F2 | 	cmps	result1, local02 wcz
2a1d4     13 FB 01 E6 |  if_be	mov	result1, local01
2a1d8     30 00 90 ED |  if_be	jmp	#LR__3563
2a1dc     14 13 02 F6 | 	mov	arg01, local02
2a1e0     02 12 06 F1 | 	add	arg01, #2
2a1e4     D0 20 B0 FD | 	call	#__system___gc_alloc_managed
2a1e8     FD 2C 0A F6 | 	mov	local04, result1 wz
2a1ec     18 00 90 AD |  if_e	jmp	#LR__3562
2a1f0     16 13 02 F6 | 	mov	arg01, local04
2a1f4     13 15 02 F6 | 	mov	arg02, local01
2a1f8     14 17 02 F6 | 	mov	arg03, local02
2a1fc     C0 DD BF FD | 	call	#__system____builtin_memmove
2a200     16 29 02 F1 | 	add	local02, local04
2a204     14 01 48 FC | 	wrbyte	#0, local02
2a208                 | LR__3562
2a208     16 FB 01 F6 | 	mov	result1, local04
2a20c                 | LR__3563
2a20c     A7 F0 03 F6 | 	mov	ptra, fp
2a210     B2 00 A0 FD | 	call	#popregs_
2a214                 | __system__Left_S_ret
2a214     2D 00 64 FD | 	ret
2a218                 | 
2a218                 | __system__Right_S
2a218     05 4A 05 F6 | 	mov	COUNT_, #5
2a21c     A8 00 A0 FD | 	call	#pushregs_
2a220     09 27 02 F6 | 	mov	local01, arg01
2a224     0A 29 02 F6 | 	mov	local02, arg02
2a228     01 28 56 F2 | 	cmps	local02, #1 wc
2a22c     B0 01 00 CF 
2a230     9F FA 05 C6 |  if_b	mov	result1, ##@LR__5294
2a234     64 00 90 CD |  if_b	jmp	#LR__3573
2a238     13 13 02 F6 | 	mov	arg01, local01
2a23c     09 2B 02 F6 | 	mov	local03, arg01
2a240     97 06 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
2a244                 | LR__3570
2a244     15 FB C9 FA | 	rdbyte	result1, local03 wz
2a248     01 2A 06 51 |  if_ne	add	local03, #1
2a24c     F4 FF 9F 5D |  if_ne	jmp	#LR__3570
2a250                 | LR__3571
2a250     09 2B 82 F1 | 	sub	local03, arg01
2a254     15 FB 01 F6 | 	mov	result1, local03
2a258     FD 2C 02 F6 | 	mov	local04, result1
2a25c     14 2D 5A F2 | 	cmps	local04, local02 wcz
2a260     13 FB 01 E6 |  if_be	mov	result1, local01
2a264     34 00 90 ED |  if_be	jmp	#LR__3573
2a268     14 13 02 F6 | 	mov	arg01, local02
2a26c     02 12 06 F1 | 	add	arg01, #2
2a270     44 20 B0 FD | 	call	#__system___gc_alloc_managed
2a274     FD 2E 0A F6 | 	mov	local05, result1 wz
2a278     1C 00 90 AD |  if_e	jmp	#LR__3572
2a27c     14 2D 82 F1 | 	sub	local04, local02
2a280     13 2D 02 F1 | 	add	local04, local01
2a284     01 28 06 F1 | 	add	local02, #1
2a288     17 13 02 F6 | 	mov	arg01, local05
2a28c     16 15 02 F6 | 	mov	arg02, local04
2a290     14 17 02 F6 | 	mov	arg03, local02
2a294     28 DD BF FD | 	call	#__system____builtin_memmove
2a298                 | LR__3572
2a298     17 FB 01 F6 | 	mov	result1, local05
2a29c                 | LR__3573
2a29c     A7 F0 03 F6 | 	mov	ptra, fp
2a2a0     B2 00 A0 FD | 	call	#popregs_
2a2a4                 | __system__Right_S_ret
2a2a4     2D 00 64 FD | 	ret
2a2a8                 | 
2a2a8                 | __system__Mid_S
2a2a8     05 4A 05 F6 | 	mov	COUNT_, #5
2a2ac     A8 00 A0 FD | 	call	#pushregs_
2a2b0     09 27 02 F6 | 	mov	local01, arg01
2a2b4     0A 29 02 F6 | 	mov	local02, arg02
2a2b8     01 16 56 F2 | 	cmps	arg03, #1 wc
2a2bc     B0 01 00 CF 
2a2c0     A0 FA 05 C6 |  if_b	mov	result1, ##@LR__5295
2a2c4     80 00 90 CD |  if_b	jmp	#LR__3583
2a2c8     01 28 86 F1 | 	sub	local02, #1
2a2cc     00 28 56 F3 | 	fges	local02, #0 wc
2a2d0     13 13 02 F6 | 	mov	arg01, local01
2a2d4     09 2B 02 F6 | 	mov	local03, arg01
2a2d8     97 06 48 FB | 	callpa	#(@LR__3581-@LR__3580)>>2,fcache_load_ptr_
2a2dc                 | LR__3580
2a2dc     15 FB C9 FA | 	rdbyte	result1, local03 wz
2a2e0     01 2A 06 51 |  if_ne	add	local03, #1
2a2e4     F4 FF 9F 5D |  if_ne	jmp	#LR__3580
2a2e8                 | LR__3581
2a2e8     09 2B 82 F1 | 	sub	local03, arg01
2a2ec     15 FB 01 F6 | 	mov	result1, local03
2a2f0     FD 14 02 F6 | 	mov	arg02, result1
2a2f4     14 15 52 F2 | 	cmps	arg02, local02 wc
2a2f8     B0 01 00 CF 
2a2fc     A1 FA 05 C6 |  if_b	mov	result1, ##@LR__5296
2a300     44 00 90 CD |  if_b	jmp	#LR__3583
2a304     0A 2D 02 F6 | 	mov	local04, arg02
2a308     14 2D 82 F1 | 	sub	local04, local02
2a30c     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
2a310     0B 2D 02 16 |  if_a	mov	local04, arg03
2a314     16 13 02 F6 | 	mov	arg01, local04
2a318     02 12 06 F1 | 	add	arg01, #2
2a31c     98 1F B0 FD | 	call	#__system___gc_alloc_managed
2a320     FD 2E 0A F6 | 	mov	local05, result1 wz
2a324     1C 00 90 AD |  if_e	jmp	#LR__3582
2a328     13 29 02 F1 | 	add	local02, local01
2a32c     17 13 02 F6 | 	mov	arg01, local05
2a330     14 15 02 F6 | 	mov	arg02, local02
2a334     16 17 02 F6 | 	mov	arg03, local04
2a338     84 DC BF FD | 	call	#__system____builtin_memmove
2a33c     17 2D 02 F1 | 	add	local04, local05
2a340     16 01 48 FC | 	wrbyte	#0, local04
2a344                 | LR__3582
2a344     17 FB 01 F6 | 	mov	result1, local05
2a348                 | LR__3583
2a348     A7 F0 03 F6 | 	mov	ptra, fp
2a34c     B2 00 A0 FD | 	call	#popregs_
2a350                 | __system__Mid_S_ret
2a350     2D 00 64 FD | 	ret
2a354                 | 
2a354                 | __system__Chr_S
2a354     01 4A 05 F6 | 	mov	COUNT_, #1
2a358     A8 00 A0 FD | 	call	#pushregs_
2a35c     09 27 02 F6 | 	mov	local01, arg01
2a360     03 12 06 F6 | 	mov	arg01, #3
2a364     50 1F B0 FD | 	call	#__system___gc_alloc_managed
2a368     00 FA 4D F2 | 	cmps	result1, #0 wz
2a36c     FD 26 42 5C |  if_ne	wrbyte	local01, result1
2a370     01 FA 05 51 |  if_ne	add	result1, #1
2a374     FD 00 48 5C |  if_ne	wrbyte	#0, result1
2a378     01 FA 85 51 |  if_ne	sub	result1, #1
2a37c     A7 F0 03 F6 | 	mov	ptra, fp
2a380     B2 00 A0 FD | 	call	#popregs_
2a384                 | __system__Chr_S_ret
2a384     2D 00 64 FD | 	ret
2a388                 | 
2a388                 | __system__str_S
2a388     02 4A 05 F6 | 	mov	COUNT_, #2
2a38c     A8 00 A0 FD | 	call	#pushregs_
2a390     09 27 02 F6 | 	mov	local01, arg01
2a394     10 12 06 F6 | 	mov	arg01, #16
2a398     1C 1F B0 FD | 	call	#__system___gc_alloc_managed
2a39c     FD 28 0A F6 | 	mov	local02, result1 wz
2a3a0     30 00 90 AD |  if_e	jmp	#LR__3590
2a3a4     F8 13 02 F6 | 	mov	arg01, ptra
2a3a8     08 F0 07 F1 | 	add	ptra, #8
2a3ac     09 29 62 FC | 	wrlong	local02, arg01
2a3b0     04 12 06 F1 | 	add	arg01, #4
2a3b4     09 01 68 FC | 	wrlong	#0, arg01
2a3b8     04 12 86 F1 | 	sub	arg01, #4
2a3bc     00 80 05 FF 
2a3c0     00 12 46 F5 | 	or	arg01, ##184549376
2a3c4     00 14 06 F6 | 	mov	arg02, #0
2a3c8     13 17 02 F6 | 	mov	arg03, local01
2a3cc     67 18 06 F6 | 	mov	arg04, #103
2a3d0     90 EE BF FD | 	call	#__system___fmtfloat
2a3d4                 | LR__3590
2a3d4     14 FB 01 F6 | 	mov	result1, local02
2a3d8     A7 F0 03 F6 | 	mov	ptra, fp
2a3dc     B2 00 A0 FD | 	call	#popregs_
2a3e0                 | __system__str_S_ret
2a3e0     2D 00 64 FD | 	ret
2a3e4                 | 
2a3e4                 | __system__Number_S
2a3e4     08 4A 05 F6 | 	mov	COUNT_, #8
2a3e8     A8 00 A0 FD | 	call	#pushregs_
2a3ec     09 27 02 F6 | 	mov	local01, arg01
2a3f0     0A 29 0A F6 | 	mov	local02, arg02 wz
2a3f4     0B 2B 02 F6 | 	mov	local03, arg03
2a3f8     3C 00 90 5D |  if_ne	jmp	#LR__3602
2a3fc     01 28 06 F6 | 	mov	local02, #1
2a400     15 2D 02 F6 | 	mov	local04, local03
2a404     01 2E 06 F6 | 	mov	local05, #1
2a408     97 16 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
2a40c                 | LR__3600
2a40c     00 30 06 F6 | 	mov	local06, #0
2a410     13 2D 1A F2 | 	cmp	local04, local01 wcz
2a414     01 30 66 E6 |  if_be	neg	local06, #1
2a418     16 2F 12 F2 | 	cmp	local05, local04 wc
2a41c     19 33 A2 F1 | 	subx	local07, local07
2a420     19 31 CA F7 | 	test	local06, local07 wz
2a424     15 2D 02 5D |  if_ne	qmul	local04, local03
2a428     16 2F 02 56 |  if_ne	mov	local05, local04
2a42c     01 28 06 51 |  if_ne	add	local02, #1
2a430     18 2C 62 5D |  if_ne	getqx	local04
2a434     D4 FF 9F 5D |  if_ne	jmp	#LR__3600
2a438                 | LR__3601
2a438                 | LR__3602
2a438     20 28 36 F3 | 	fle	local02, #32 wc
2a43c     14 13 02 F6 | 	mov	arg01, local02
2a440     02 12 06 F1 | 	add	arg01, #2
2a444     70 1E B0 FD | 	call	#__system___gc_alloc_managed
2a448     FD 30 02 F6 | 	mov	local06, result1
2a44c     14 33 02 F6 | 	mov	local07, local02
2a450     18 33 02 F1 | 	add	local07, local06
2a454     19 01 48 FC | 	wrbyte	#0, local07
2a458     97 1A 48 FB | 	callpa	#(@LR__3604-@LR__3603)>>2,fcache_load_ptr_
2a45c                 | LR__3603
2a45c     01 28 16 F2 | 	cmp	local02, #1 wc
2a460     2C 00 90 CD |  if_b	jmp	#LR__3605
2a464     15 27 12 FD | 	qdiv	local01, local03
2a468     01 28 86 F1 | 	sub	local02, #1
2a46c     14 33 02 F6 | 	mov	local07, local02
2a470     18 33 02 F1 | 	add	local07, local06
2a474     19 34 62 FD | 	getqy	local08
2a478     0A 34 16 F2 | 	cmp	local08, #10 wc
2a47c     30 34 06 C1 |  if_b	add	local08, #48
2a480     37 34 06 31 |  if_ae	add	local08, #55
2a484     19 35 42 FC | 	wrbyte	local08, local07
2a488     18 26 62 FD | 	getqx	local01
2a48c     CC FF 9F FD | 	jmp	#LR__3603
2a490                 | LR__3604
2a490                 | LR__3605
2a490     18 FB 01 F6 | 	mov	result1, local06
2a494     A7 F0 03 F6 | 	mov	ptra, fp
2a498     B2 00 A0 FD | 	call	#popregs_
2a49c                 | __system__Number_S_ret
2a49c     2D 00 64 FD | 	ret
2a4a0                 | 
2a4a0                 | __system__LCase_S
2a4a0     07 4A 05 F6 | 	mov	COUNT_, #7
2a4a4     A8 00 A0 FD | 	call	#pushregs_
2a4a8     09 27 02 F6 | 	mov	local01, arg01
2a4ac     09 29 02 F6 | 	mov	local02, arg01
2a4b0     97 06 48 FB | 	callpa	#(@LR__3611-@LR__3610)>>2,fcache_load_ptr_
2a4b4                 | LR__3610
2a4b4     14 FB C9 FA | 	rdbyte	result1, local02 wz
2a4b8     01 28 06 51 |  if_ne	add	local02, #1
2a4bc     F4 FF 9F 5D |  if_ne	jmp	#LR__3610
2a4c0                 | LR__3611
2a4c0     09 29 82 F1 | 	sub	local02, arg01
2a4c4     14 FB 01 F6 | 	mov	result1, local02
2a4c8     FD 28 0A F6 | 	mov	local02, result1 wz
2a4cc     B0 01 00 AF 
2a4d0     A2 FA 05 A6 |  if_e	mov	result1, ##@LR__5297
2a4d4     7C 00 90 AD |  if_e	jmp	#LR__3617
2a4d8     14 13 02 F6 | 	mov	arg01, local02
2a4dc     02 12 06 F1 | 	add	arg01, #2
2a4e0     D4 1D B0 FD | 	call	#__system___gc_alloc_managed
2a4e4     FD 2A 0A F6 | 	mov	local03, result1 wz
2a4e8     64 00 90 AD |  if_e	jmp	#LR__3616
2a4ec     01 2C 66 F6 | 	neg	local04, #1
2a4f0     97 26 48 FB | 	callpa	#(@LR__3615-@LR__3612)>>2,fcache_load_ptr_
2a4f4                 | LR__3612
2a4f4     01 2C 06 F1 | 	add	local04, #1
2a4f8     16 2F 02 F6 | 	mov	local05, local04
2a4fc     13 2F 02 F1 | 	add	local05, local01
2a500     17 31 C2 FA | 	rdbyte	local06, local05
2a504     41 30 56 F2 | 	cmps	local06, #65 wc
2a508     18 00 90 CD |  if_b	jmp	#LR__3613
2a50c     5B 30 56 F2 | 	cmps	local06, #91 wc
2a510     16 33 02 C6 |  if_b	mov	local07, local04
2a514     15 33 02 C1 |  if_b	add	local07, local03
2a518     20 30 06 C1 |  if_b	add	local06, #32
2a51c     19 31 42 CC |  if_b	wrbyte	local06, local07
2a520     0C 00 90 CD |  if_b	jmp	#LR__3614
2a524                 | LR__3613
2a524     16 33 02 F6 | 	mov	local07, local04
2a528     15 33 02 F1 | 	add	local07, local03
2a52c     19 31 42 FC | 	wrbyte	local06, local07
2a530                 | LR__3614
2a530     14 31 02 F6 | 	mov	local06, local02
2a534     01 30 86 F1 | 	sub	local06, #1
2a538     18 2D 0A F2 | 	cmp	local04, local06 wz
2a53c     B4 FF 9F 5D |  if_ne	jmp	#LR__3612
2a540                 | LR__3615
2a540     15 29 02 F1 | 	add	local02, local03
2a544     14 01 48 FC | 	wrbyte	#0, local02
2a548     15 FB 01 F6 | 	mov	result1, local03
2a54c     04 00 90 FD | 	jmp	#LR__3617
2a550                 | LR__3616
2a550     15 FB 01 F6 | 	mov	result1, local03
2a554                 | LR__3617
2a554     A7 F0 03 F6 | 	mov	ptra, fp
2a558     B2 00 A0 FD | 	call	#popregs_
2a55c                 | __system__LCase_S_ret
2a55c     2D 00 64 FD | 	ret
2a560                 | 
2a560                 | __system__LTrim_S
2a560     05 4A 05 F6 | 	mov	COUNT_, #5
2a564     A8 00 A0 FD | 	call	#pushregs_
2a568     09 27 02 F6 | 	mov	local01, arg01
2a56c     09 29 02 F6 | 	mov	local02, arg01
2a570     97 06 48 FB | 	callpa	#(@LR__3621-@LR__3620)>>2,fcache_load_ptr_
2a574                 | LR__3620
2a574     14 FB C9 FA | 	rdbyte	result1, local02 wz
2a578     01 28 06 51 |  if_ne	add	local02, #1
2a57c     F4 FF 9F 5D |  if_ne	jmp	#LR__3620
2a580                 | LR__3621
2a580     09 29 82 F1 | 	sub	local02, arg01
2a584     14 FB 01 F6 | 	mov	result1, local02
2a588     FD 28 0A F6 | 	mov	local02, result1 wz
2a58c     B0 01 00 AF 
2a590     A3 FA 05 A6 |  if_e	mov	result1, ##@LR__5298
2a594     7C 00 90 AD |  if_e	jmp	#LR__3626
2a598     00 2A 06 F6 | 	mov	local03, #0
2a59c     14 2D 02 F6 | 	mov	local04, local02
2a5a0                 | LR__3622
2a5a0     16 2B 52 F2 | 	cmps	local03, local04 wc
2a5a4     68 00 90 3D |  if_ae	jmp	#LR__3625
2a5a8     15 17 02 F6 | 	mov	arg03, local03
2a5ac     13 17 02 F1 | 	add	arg03, local01
2a5b0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2a5b4     20 16 0E F2 | 	cmp	arg03, #32 wz
2a5b8     4C 00 90 AD |  if_e	jmp	#LR__3624
2a5bc     14 13 02 F6 | 	mov	arg01, local02
2a5c0     15 13 82 F1 | 	sub	arg01, local03
2a5c4     02 12 06 F1 | 	add	arg01, #2
2a5c8     EC 1C B0 FD | 	call	#__system___gc_alloc_managed
2a5cc     FD 2E 0A F6 | 	mov	local05, result1 wz
2a5d0     2C 00 90 AD |  if_e	jmp	#LR__3623
2a5d4     15 15 02 F6 | 	mov	arg02, local03
2a5d8     13 15 02 F1 | 	add	arg02, local01
2a5dc     14 17 02 F6 | 	mov	arg03, local02
2a5e0     15 17 82 F1 | 	sub	arg03, local03
2a5e4     17 13 02 F6 | 	mov	arg01, local05
2a5e8     D4 D9 BF FD | 	call	#__system____builtin_memmove
2a5ec     15 29 82 F1 | 	sub	local02, local03
2a5f0     17 29 02 F1 | 	add	local02, local05
2a5f4     14 01 48 FC | 	wrbyte	#0, local02
2a5f8     17 FB 01 F6 | 	mov	result1, local05
2a5fc     14 00 90 FD | 	jmp	#LR__3626
2a600                 | LR__3623
2a600     17 FB 01 F6 | 	mov	result1, local05
2a604     0C 00 90 FD | 	jmp	#LR__3626
2a608                 | LR__3624
2a608     01 2A 06 F1 | 	add	local03, #1
2a60c     90 FF 9F FD | 	jmp	#LR__3622
2a610                 | LR__3625
2a610     13 FB 01 F6 | 	mov	result1, local01
2a614                 | LR__3626
2a614     A7 F0 03 F6 | 	mov	ptra, fp
2a618     B2 00 A0 FD | 	call	#popregs_
2a61c                 | __system__LTrim_S_ret
2a61c     2D 00 64 FD | 	ret
2a620                 | 
2a620                 | __system__RTrim_S
2a620     04 4A 05 F6 | 	mov	COUNT_, #4
2a624     A8 00 A0 FD | 	call	#pushregs_
2a628     09 27 02 F6 | 	mov	local01, arg01
2a62c     09 29 02 F6 | 	mov	local02, arg01
2a630     97 06 48 FB | 	callpa	#(@LR__3631-@LR__3630)>>2,fcache_load_ptr_
2a634                 | LR__3630
2a634     14 FB C9 FA | 	rdbyte	result1, local02 wz
2a638     01 28 06 51 |  if_ne	add	local02, #1
2a63c     F4 FF 9F 5D |  if_ne	jmp	#LR__3630
2a640                 | LR__3631
2a640     09 29 82 F1 | 	sub	local02, arg01
2a644     14 FB 01 F6 | 	mov	result1, local02
2a648     FD 28 0A F6 | 	mov	local02, result1 wz
2a64c     B0 01 00 AF 
2a650     A4 FA 05 A6 |  if_e	mov	result1, ##@LR__5299
2a654     74 00 90 AD |  if_e	jmp	#LR__3635
2a658     14 2B 02 F6 | 	mov	local03, local02
2a65c     01 2A 86 F1 | 	sub	local03, #1
2a660                 | LR__3632
2a660     15 15 02 F6 | 	mov	arg02, local03
2a664     13 15 02 F1 | 	add	arg02, local01
2a668     0A 29 C2 FA | 	rdbyte	local02, arg02
2a66c     20 28 0E F2 | 	cmp	local02, #32 wz
2a670     44 00 90 AD |  if_e	jmp	#LR__3634
2a674     15 13 02 F6 | 	mov	arg01, local03
2a678     02 12 06 F1 | 	add	arg01, #2
2a67c     38 1C B0 FD | 	call	#__system___gc_alloc_managed
2a680     FD 2C 0A F6 | 	mov	local04, result1 wz
2a684     28 00 90 AD |  if_e	jmp	#LR__3633
2a688     15 17 02 F6 | 	mov	arg03, local03
2a68c     01 16 06 F1 | 	add	arg03, #1
2a690     16 13 02 F6 | 	mov	arg01, local04
2a694     13 15 02 F6 | 	mov	arg02, local01
2a698     24 D9 BF FD | 	call	#__system____builtin_memmove
2a69c     01 2A 06 F1 | 	add	local03, #1
2a6a0     16 2B 02 F1 | 	add	local03, local04
2a6a4     15 01 48 FC | 	wrbyte	#0, local03
2a6a8     16 FB 01 F6 | 	mov	result1, local04
2a6ac     1C 00 90 FD | 	jmp	#LR__3635
2a6b0                 | LR__3633
2a6b0     16 FB 01 F6 | 	mov	result1, local04
2a6b4     14 00 90 FD | 	jmp	#LR__3635
2a6b8                 | LR__3634
2a6b8     01 2A 86 F1 | 	sub	local03, #1
2a6bc     00 2A 56 F2 | 	cmps	local03, #0 wc
2a6c0     9C FF 9F 3D |  if_ae	jmp	#LR__3632
2a6c4     B0 01 00 FF 
2a6c8     A5 FA 05 F6 | 	mov	result1, ##@LR__5300
2a6cc                 | LR__3635
2a6cc     A7 F0 03 F6 | 	mov	ptra, fp
2a6d0     B2 00 A0 FD | 	call	#popregs_
2a6d4                 | __system__RTrim_S_ret
2a6d4     2D 00 64 FD | 	ret
2a6d8                 | 
2a6d8                 | __system__Instr
2a6d8     07 4A 05 F6 | 	mov	COUNT_, #7
2a6dc     A8 00 A0 FD | 	call	#pushregs_
2a6e0     09 27 02 F6 | 	mov	local01, arg01
2a6e4     0A 29 02 F6 | 	mov	local02, arg02
2a6e8     0B 2B 02 F6 | 	mov	local03, arg03
2a6ec     15 13 02 F6 | 	mov	arg01, local03
2a6f0     09 2D 02 F6 | 	mov	local04, arg01
2a6f4     97 06 48 FB | 	callpa	#(@LR__3641-@LR__3640)>>2,fcache_load_ptr_
2a6f8                 | LR__3640
2a6f8     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a6fc     01 2C 06 51 |  if_ne	add	local04, #1
2a700     F4 FF 9F 5D |  if_ne	jmp	#LR__3640
2a704                 | LR__3641
2a704     09 2D 82 F1 | 	sub	local04, arg01
2a708     16 2F 02 F6 | 	mov	local05, local04
2a70c     14 13 02 F6 | 	mov	arg01, local02
2a710     09 2D 02 F6 | 	mov	local04, arg01
2a714     97 06 48 FB | 	callpa	#(@LR__3643-@LR__3642)>>2,fcache_load_ptr_
2a718                 | LR__3642
2a718     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a71c     01 2C 06 51 |  if_ne	add	local04, #1
2a720     F4 FF 9F 5D |  if_ne	jmp	#LR__3642
2a724                 | LR__3643
2a724     09 2D 82 F1 | 	sub	local04, arg01
2a728     16 FB 01 F6 | 	mov	result1, local04
2a72c     FD 18 0A F6 | 	mov	arg04, result1 wz
2a730     00 FA 05 A6 |  if_e	mov	result1, #0
2a734     98 00 90 AD |  if_e	jmp	#LR__3647
2a738     00 2E 0E F2 | 	cmp	local05, #0 wz
2a73c     00 FA 05 A6 |  if_e	mov	result1, #0
2a740     8C 00 90 AD |  if_e	jmp	#LR__3647
2a744     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2a748     00 FA 05 16 |  if_a	mov	result1, #0
2a74c     80 00 90 1D |  if_a	jmp	#LR__3647
2a750     01 26 56 F2 | 	cmps	local01, #1 wc
2a754     01 26 06 C6 |  if_b	mov	local01, #1
2a758     15 31 C2 FA | 	rdbyte	local06, local03
2a75c     01 2E 0E F2 | 	cmp	local05, #1 wz
2a760     18 00 90 5D |  if_ne	jmp	#LR__3644
2a764     14 13 02 F6 | 	mov	arg01, local02
2a768     18 15 02 F6 | 	mov	arg02, local06
2a76c     13 17 02 F6 | 	mov	arg03, local01
2a770     00 18 06 F6 | 	mov	arg04, #0
2a774     14 37 B0 FD | 	call	#__system____ScanForChar
2a778     54 00 90 FD | 	jmp	#LR__3647
2a77c                 | LR__3644
2a77c     13 33 02 F6 | 	mov	local07, local01
2a780                 | LR__3645
2a780     14 13 02 F6 | 	mov	arg01, local02
2a784     18 15 02 F6 | 	mov	arg02, local06
2a788     19 17 02 F6 | 	mov	arg03, local07
2a78c     00 18 06 F6 | 	mov	arg04, #0
2a790     F8 36 B0 FD | 	call	#__system____ScanForChar
2a794     FD 32 0A F6 | 	mov	local07, result1 wz
2a798     30 00 90 AD |  if_e	jmp	#LR__3646
2a79c     17 17 02 F6 | 	mov	arg03, local05
2a7a0     14 13 02 F6 | 	mov	arg01, local02
2a7a4     19 15 02 F6 | 	mov	arg02, local07
2a7a8     FC FA BF FD | 	call	#__system__Mid_S
2a7ac     FD 12 02 F6 | 	mov	arg01, result1
2a7b0     15 15 02 F6 | 	mov	arg02, local03
2a7b4     80 D9 BF FD | 	call	#__system___string_cmp
2a7b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a7bc     19 FB 01 A6 |  if_e	mov	result1, local07
2a7c0     0C 00 90 AD |  if_e	jmp	#LR__3647
2a7c4     17 33 02 F1 | 	add	local07, local05
2a7c8     B4 FF 9F FD | 	jmp	#LR__3645
2a7cc                 | LR__3646
2a7cc     00 FA 05 F6 | 	mov	result1, #0
2a7d0                 | LR__3647
2a7d0     A7 F0 03 F6 | 	mov	ptra, fp
2a7d4     B2 00 A0 FD | 	call	#popregs_
2a7d8                 | __system__Instr_ret
2a7d8     2D 00 64 FD | 	ret
2a7dc                 | 
2a7dc                 | __system__InstrRev
2a7dc     07 4A 05 F6 | 	mov	COUNT_, #7
2a7e0     A8 00 A0 FD | 	call	#pushregs_
2a7e4     09 27 02 F6 | 	mov	local01, arg01
2a7e8     0A 29 02 F6 | 	mov	local02, arg02
2a7ec     0B 2B 02 F6 | 	mov	local03, arg03
2a7f0     15 13 02 F6 | 	mov	arg01, local03
2a7f4     09 2D 02 F6 | 	mov	local04, arg01
2a7f8     97 06 48 FB | 	callpa	#(@LR__3651-@LR__3650)>>2,fcache_load_ptr_
2a7fc                 | LR__3650
2a7fc     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a800     01 2C 06 51 |  if_ne	add	local04, #1
2a804     F4 FF 9F 5D |  if_ne	jmp	#LR__3650
2a808                 | LR__3651
2a808     09 2D 82 F1 | 	sub	local04, arg01
2a80c     16 2F 02 F6 | 	mov	local05, local04
2a810     14 13 02 F6 | 	mov	arg01, local02
2a814     09 2D 02 F6 | 	mov	local04, arg01
2a818     97 06 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
2a81c                 | LR__3652
2a81c     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a820     01 2C 06 51 |  if_ne	add	local04, #1
2a824     F4 FF 9F 5D |  if_ne	jmp	#LR__3652
2a828                 | LR__3653
2a828     09 2D 82 F1 | 	sub	local04, arg01
2a82c     16 FB 01 F6 | 	mov	result1, local04
2a830     FD 18 0A F6 | 	mov	arg04, result1 wz
2a834     00 FA 05 A6 |  if_e	mov	result1, #0
2a838     98 00 90 AD |  if_e	jmp	#LR__3657
2a83c     00 2E 0E F2 | 	cmp	local05, #0 wz
2a840     00 FA 05 A6 |  if_e	mov	result1, #0
2a844     8C 00 90 AD |  if_e	jmp	#LR__3657
2a848     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2a84c     0C 27 02 16 |  if_a	mov	local01, arg04
2a850     01 26 56 F2 | 	cmps	local01, #1 wc
2a854     01 26 06 C6 |  if_b	mov	local01, #1
2a858     15 31 C2 FA | 	rdbyte	local06, local03
2a85c     01 2E 0E F2 | 	cmp	local05, #1 wz
2a860     18 00 90 5D |  if_ne	jmp	#LR__3654
2a864     14 13 02 F6 | 	mov	arg01, local02
2a868     18 15 02 F6 | 	mov	arg02, local06
2a86c     13 17 02 F6 | 	mov	arg03, local01
2a870     01 18 06 F6 | 	mov	arg04, #1
2a874     14 36 B0 FD | 	call	#__system____ScanForChar
2a878     58 00 90 FD | 	jmp	#LR__3657
2a87c                 | LR__3654
2a87c     17 33 02 F6 | 	mov	local07, local05
2a880     01 32 86 F1 | 	sub	local07, #1
2a884                 | LR__3655
2a884     14 13 02 F6 | 	mov	arg01, local02
2a888     18 15 02 F6 | 	mov	arg02, local06
2a88c     19 17 02 F6 | 	mov	arg03, local07
2a890     01 18 06 F6 | 	mov	arg04, #1
2a894     F4 35 B0 FD | 	call	#__system____ScanForChar
2a898     FD 32 0A F6 | 	mov	local07, result1 wz
2a89c     30 00 90 AD |  if_e	jmp	#LR__3656
2a8a0     17 17 02 F6 | 	mov	arg03, local05
2a8a4     14 13 02 F6 | 	mov	arg01, local02
2a8a8     19 15 02 F6 | 	mov	arg02, local07
2a8ac     F8 F9 BF FD | 	call	#__system__Mid_S
2a8b0     FD 12 02 F6 | 	mov	arg01, result1
2a8b4     15 15 02 F6 | 	mov	arg02, local03
2a8b8     7C D8 BF FD | 	call	#__system___string_cmp
2a8bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a8c0     19 FB 01 A6 |  if_e	mov	result1, local07
2a8c4     0C 00 90 AD |  if_e	jmp	#LR__3657
2a8c8     17 33 82 F1 | 	sub	local07, local05
2a8cc     B4 FF 9F FD | 	jmp	#LR__3655
2a8d0                 | LR__3656
2a8d0     00 FA 05 F6 | 	mov	result1, #0
2a8d4                 | LR__3657
2a8d4     A7 F0 03 F6 | 	mov	ptra, fp
2a8d8     B2 00 A0 FD | 	call	#popregs_
2a8dc                 | __system__InstrRev_ret
2a8dc     2D 00 64 FD | 	ret
2a8e0                 | 
2a8e0                 | __system___remove
2a8e0     06 4A 05 F6 | 	mov	COUNT_, #6
2a8e4     A8 00 A0 FD | 	call	#pushregs_
2a8e8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a8ec     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2a8f0     09 15 02 F6 | 	mov	arg02, arg01
2a8f4     13 13 02 F6 | 	mov	arg01, local01
2a8f8     00 16 06 F6 | 	mov	arg03, #0
2a8fc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a900     A4 DF BF FD | 	call	#__system____getvfsforfile
2a904     FD 28 0A F6 | 	mov	local02, result1 wz
2a908     10 00 90 AD |  if_e	jmp	#LR__3660
2a90c     20 28 06 F1 | 	add	local02, #32
2a910     14 13 0A FB | 	rdlong	arg01, local02 wz
2a914     20 28 86 F1 | 	sub	local02, #32
2a918     14 00 90 5D |  if_ne	jmp	#LR__3661
2a91c                 | LR__3660
2a91c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a920     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a924     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a928     01 FA 65 F6 | 	neg	result1, #1
2a92c     A8 00 90 FD | 	jmp	#LR__3664
2a930                 | LR__3661
2a930     40 28 06 F1 | 	add	local02, #64
2a934     14 2B 02 FB | 	rdlong	local03, local02
2a938     15 2D 02 F6 | 	mov	local04, local03
2a93c     40 28 86 F1 | 	sub	local02, #64
2a940     13 2C 46 F7 | 	zerox	local04, #19
2a944     14 2A 46 F0 | 	shr	local03, #20
2a948     02 2A 66 F0 | 	shl	local03, #2
2a94c     ED 2A 02 F1 | 	add	local03, __methods__
2a950     15 2B 02 FB | 	rdlong	local03, local03
2a954     13 13 02 F6 | 	mov	arg01, local01
2a958     F2 2E 02 F6 | 	mov	local05, objptr
2a95c     16 E5 01 F6 | 	mov	objptr, local04
2a960     2D 2A 62 FD | 	call	local03
2a964     17 E5 01 F6 | 	mov	objptr, local05
2a968     FD 30 02 F6 | 	mov	local06, result1
2a96c     FF FF 7F FF 
2a970     F2 31 0E F2 | 	cmp	local06, ##-14 wz
2a974     38 00 90 5D |  if_ne	jmp	#LR__3662
2a978     3C 28 06 F1 | 	add	local02, #60
2a97c     14 31 02 FB | 	rdlong	local06, local02
2a980     18 2B 02 F6 | 	mov	local03, local06
2a984     13 30 46 F7 | 	zerox	local06, #19
2a988     14 2A 46 F0 | 	shr	local03, #20
2a98c     02 2A 66 F0 | 	shl	local03, #2
2a990     ED 2A 02 F1 | 	add	local03, __methods__
2a994     15 2B 02 FB | 	rdlong	local03, local03
2a998     13 13 02 F6 | 	mov	arg01, local01
2a99c     F2 2E 02 F6 | 	mov	local05, objptr
2a9a0     18 E5 01 F6 | 	mov	objptr, local06
2a9a4     2D 2A 62 FD | 	call	local03
2a9a8     17 E5 01 F6 | 	mov	objptr, local05
2a9ac     FD 30 02 F6 | 	mov	local06, result1
2a9b0                 | LR__3662
2a9b0     00 30 0E F2 | 	cmp	local06, #0 wz
2a9b4     1C 00 90 AD |  if_e	jmp	#LR__3663
2a9b8     18 13 6A F6 | 	neg	arg01, local06 wz
2a9bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a9c0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a9c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a9c8     01 FA 65 56 |  if_ne	neg	result1, #1
2a9cc     00 FA 05 A6 |  if_e	mov	result1, #0
2a9d0     04 00 90 FD | 	jmp	#LR__3664
2a9d4                 | LR__3663
2a9d4     00 FA 05 F6 | 	mov	result1, #0
2a9d8                 | LR__3664
2a9d8     A7 F0 03 F6 | 	mov	ptra, fp
2a9dc     B2 00 A0 FD | 	call	#popregs_
2a9e0                 | __system___remove_ret
2a9e0     2D 00 64 FD | 	ret
2a9e4                 | 
2a9e4                 | __system___mkdir
2a9e4     05 4A 05 F6 | 	mov	COUNT_, #5
2a9e8     A8 00 A0 FD | 	call	#pushregs_
2a9ec     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a9f0     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2a9f4     09 15 02 F6 | 	mov	arg02, arg01
2a9f8     13 13 02 F6 | 	mov	arg01, local01
2a9fc     00 16 06 F6 | 	mov	arg03, #0
2aa00     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2aa04     A0 DE BF FD | 	call	#__system____getvfsforfile
2aa08     FD 28 0A F6 | 	mov	local02, result1 wz
2aa0c     10 00 90 AD |  if_e	jmp	#LR__3670
2aa10     20 28 06 F1 | 	add	local02, #32
2aa14     14 15 0A FB | 	rdlong	arg02, local02 wz
2aa18     20 28 86 F1 | 	sub	local02, #32
2aa1c     14 00 90 5D |  if_ne	jmp	#LR__3671
2aa20                 | LR__3670
2aa20     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2aa24     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2aa28     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2aa2c     01 FA 65 F6 | 	neg	result1, #1
2aa30     60 00 90 FD | 	jmp	#LR__3673
2aa34                 | LR__3671
2aa34     38 28 06 F1 | 	add	local02, #56
2aa38     14 2B 02 FB | 	rdlong	local03, local02
2aa3c     15 2D 02 F6 | 	mov	local04, local03
2aa40     13 2A 46 F7 | 	zerox	local03, #19
2aa44     14 2C 46 F0 | 	shr	local04, #20
2aa48     02 2C 66 F0 | 	shl	local04, #2
2aa4c     ED 2C 02 F1 | 	add	local04, __methods__
2aa50     16 2D 02 FB | 	rdlong	local04, local04
2aa54     13 13 02 F6 | 	mov	arg01, local01
2aa58     FF 15 06 F6 | 	mov	arg02, #511
2aa5c     F2 2E 02 F6 | 	mov	local05, objptr
2aa60     15 E5 01 F6 | 	mov	objptr, local03
2aa64     2D 2C 62 FD | 	call	local04
2aa68     17 E5 01 F6 | 	mov	objptr, local05
2aa6c     FD 12 0A F6 | 	mov	arg01, result1 wz
2aa70     1C 00 90 AD |  if_e	jmp	#LR__3672
2aa74     09 13 6A F6 | 	neg	arg01, arg01 wz
2aa78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2aa7c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2aa80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2aa84     01 FA 65 56 |  if_ne	neg	result1, #1
2aa88     00 FA 05 A6 |  if_e	mov	result1, #0
2aa8c     04 00 90 FD | 	jmp	#LR__3673
2aa90                 | LR__3672
2aa90     00 FA 05 F6 | 	mov	result1, #0
2aa94                 | LR__3673
2aa94     A7 F0 03 F6 | 	mov	ptra, fp
2aa98     B2 00 A0 FD | 	call	#popregs_
2aa9c                 | __system___mkdir_ret
2aa9c     2D 00 64 FD | 	ret
2aaa0                 | 
2aaa0                 | __system___strerror
2aaa0     00 12 56 F2 | 	cmps	arg01, #0 wc
2aaa4     08 00 90 CD |  if_b	jmp	#LR__3680
2aaa8     1A 12 56 F2 | 	cmps	arg01, #26 wc
2aaac     04 00 90 CD |  if_b	jmp	#LR__3681
2aab0                 | LR__3680
2aab0     19 12 06 F6 | 	mov	arg01, #25
2aab4                 | LR__3681
2aab4     02 12 66 F0 | 	shl	arg01, #2
2aab8     01 00 00 FF 
2aabc     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
2aac0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2aac4     09 FB 01 FB | 	rdlong	result1, arg01
2aac8     01 00 00 FF 
2aacc     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
2aad0                 | __system___strerror_ret
2aad0     2D 00 64 FD | 	ret
2aad4                 | 
2aad4                 | __system___int64_shl
2aad4     20 16 CE F7 | 	test	arg03, #32 wz
2aad8     09 15 02 56 |  if_ne	mov	arg02, arg01
2aadc     00 12 06 56 |  if_ne	mov	arg01, #0
2aae0     1F 16 CE F7 | 	test	arg03, #31 wz
2aae4     18 00 90 AD |  if_e	jmp	#LR__3690
2aae8     0B 15 62 F0 | 	shl	arg02, arg03
2aaec     09 FB 01 F6 | 	mov	result1, arg01
2aaf0     0B FD 61 F6 | 	neg	result2, arg03
2aaf4     FE FA 41 F0 | 	shr	result1, result2
2aaf8     FD 14 42 F5 | 	or	arg02, result1
2aafc     0B 13 62 F0 | 	shl	arg01, arg03
2ab00                 | LR__3690
2ab00     0A FD 01 F6 | 	mov	result2, arg02
2ab04     09 FB 01 F6 | 	mov	result1, arg01
2ab08                 | __system___int64_shl_ret
2ab08     2D 00 64 FD | 	ret
2ab0c                 | 
2ab0c                 | __system___usepins
2ab0c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2ab10     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2ab14     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
2ab18     00 13 CA F7 | 	test	arg01, _var01 wz
2ab1c     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
2ab20     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
2ab24     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
2ab28     01 15 CA A7 |  if_e	test	arg02, _var02 wz
2ab2c     00 FA 05 56 |  if_ne	mov	result1, #0
2ab30     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
2ab34     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2ab38     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2ab3c     09 03 42 F5 | 	or	_var02, arg01
2ab40     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2ab44     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2ab48     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2ab4c     0A 03 42 F5 | 	or	_var02, arg02
2ab50     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2ab54     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2ab58     01 FA 65 F6 | 	neg	result1, #1
2ab5c                 | __system___usepins_ret
2ab5c     2D 00 64 FD | 	ret
2ab60                 | 
2ab60                 | __system___freepins
2ab60     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2ab64     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2ab68     09 01 22 F5 | 	andn	_var01, arg01
2ab6c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2ab70     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2ab74     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2ab78     0A 01 22 F5 | 	andn	_var01, arg02
2ab7c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2ab80     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2ab84                 | __system___freepins_ret
2ab84     2D 00 64 FD | 	ret
2ab88                 | 
2ab88                 | __system___float_fromuns
2ab88     09 17 0A F6 | 	mov	arg03, arg01 wz
2ab8c     0B FB 01 A6 |  if_e	mov	result1, arg03
2ab90     24 00 90 AD |  if_e	jmp	#LR__3700
2ab94     0B 15 92 F7 | 	encod	arg02, arg03 wc
2ab98     01 14 06 C1 |  if_b	add	arg02, #1
2ab9c     01 14 86 F1 | 	sub	arg02, #1
2aba0     1F 12 06 F6 | 	mov	arg01, #31
2aba4     0A 13 82 F1 | 	sub	arg01, arg02
2aba8     09 17 62 F0 | 	shl	arg03, arg01
2abac     02 16 46 F0 | 	shr	arg03, #2
2abb0     00 12 06 F6 | 	mov	arg01, #0
2abb4     4C 09 B0 FD | 	call	#__system___float_Pack
2abb8                 | LR__3700
2abb8                 | __system___float_fromuns_ret
2abb8     2D 00 64 FD | 	ret
2abbc                 | 
2abbc                 | __system___float_add
2abbc     0F 4A 05 F6 | 	mov	COUNT_, #15
2abc0     A8 00 A0 FD | 	call	#pushregs_
2abc4     09 27 02 F6 | 	mov	local01, arg01
2abc8     0A 29 02 F6 | 	mov	local02, arg02
2abcc     00 2A 06 F6 | 	mov	local03, #0
2abd0     13 2D 02 F6 | 	mov	local04, local01
2abd4     16 2F 02 F6 | 	mov	local05, local04
2abd8     16 2E 46 F7 | 	zerox	local05, #22
2abdc     16 31 02 F6 | 	mov	local06, local04
2abe0     01 30 66 F0 | 	shl	local06, #1
2abe4     18 30 46 F0 | 	shr	local06, #24
2abe8     1F 2C 46 F0 | 	shr	local04, #31
2abec     14 13 02 F6 | 	mov	arg01, local02
2abf0     09 FB 01 F6 | 	mov	result1, arg01
2abf4     FD 32 02 F6 | 	mov	local07, result1
2abf8     19 35 02 F6 | 	mov	local08, local07
2abfc     16 34 46 F7 | 	zerox	local08, #22
2ac00     19 37 02 F6 | 	mov	local09, local07
2ac04     01 36 66 F0 | 	shl	local09, #1
2ac08     18 36 46 F0 | 	shr	local09, #24
2ac0c     1B 39 02 F6 | 	mov	local10, local09
2ac10     1F 32 46 F0 | 	shr	local07, #31
2ac14     00 3A 06 F6 | 	mov	local11, #0
2ac18     00 3C 06 F6 | 	mov	local12, #0
2ac1c     1C 31 12 F2 | 	cmp	local06, local10 wc
2ac20     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
2ac24     2C 00 90 1D |  if_a	jmp	#LR__3710
2ac28     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
2ac2c     24 00 90 3D |  if_ae	jmp	#LR__3710
2ac30     17 3F 02 F6 | 	mov	local13, local05
2ac34     1A 2F 02 F6 | 	mov	local05, local08
2ac38     1F 35 02 F6 | 	mov	local08, local13
2ac3c     18 3F 02 F6 | 	mov	local13, local06
2ac40     1C 31 02 F6 | 	mov	local06, local10
2ac44     1F 39 02 F6 | 	mov	local10, local13
2ac48     16 3F 02 F6 | 	mov	local13, local04
2ac4c     19 2D 02 F6 | 	mov	local04, local07
2ac50     1F 33 02 F6 | 	mov	local07, local13
2ac54                 | LR__3710
2ac54     FF 30 0E F2 | 	cmp	local06, #255 wz
2ac58     70 01 90 AD |  if_e	jmp	#LR__3725
2ac5c     00 30 0E F2 | 	cmp	local06, #0 wz
2ac60     AC 01 90 AD |  if_e	jmp	#LR__3727
2ac64     17 2E 26 F4 | 	bith	local05, #23
2ac68                 | LR__3711
2ac68     00 38 0E F2 | 	cmp	local10, #0 wz
2ac6c     F0 01 90 AD |  if_e	jmp	#LR__3731
2ac70     17 34 26 F4 | 	bith	local08, #23
2ac74                 | LR__3712
2ac74     7F 30 86 F1 | 	sub	local06, #127
2ac78     7F 38 86 F1 | 	sub	local10, #127
2ac7c     18 41 02 F6 | 	mov	local14, local06
2ac80     1C 41 82 F1 | 	sub	local14, local10
2ac84     97 14 48 FB | 	callpa	#(@LR__3714-@LR__3713)>>2,fcache_load_ptr_
2ac88                 | LR__3713
2ac88     20 40 56 F2 | 	cmps	local14, #32 wc
2ac8c     20 00 90 CD |  if_b	jmp	#LR__3715
2ac90     1A 37 02 F6 | 	mov	local09, local08
2ac94     00 3A 0E F2 | 	cmp	local11, #0 wz
2ac98     6F 3A 62 FD | 	wrnz	local11
2ac9c     1D 37 42 F5 | 	or	local09, local11
2aca0     1B 3B 02 F6 | 	mov	local11, local09
2aca4     00 34 06 F6 | 	mov	local08, #0
2aca8     20 40 86 F1 | 	sub	local14, #32
2acac     D8 FF 9F FD | 	jmp	#LR__3713
2acb0                 | LR__3714
2acb0                 | LR__3715
2acb0     00 40 0E F2 | 	cmp	local14, #0 wz
2acb4     38 00 90 AD |  if_e	jmp	#LR__3716
2acb8     1A 3F 02 F6 | 	mov	local13, local08
2acbc     20 38 06 F6 | 	mov	local10, #32
2acc0     20 39 82 F1 | 	sub	local10, local14
2acc4     1C 3F 62 F0 | 	shl	local13, local10
2acc8     1D 39 02 F6 | 	mov	local10, local11
2accc     20 36 06 F6 | 	mov	local09, #32
2acd0     20 37 82 F1 | 	sub	local09, local14
2acd4     1B 39 6A F0 | 	shl	local10, local09 wz
2acd8     20 3B 42 F0 | 	shr	local11, local14
2acdc     20 35 42 F0 | 	shr	local08, local14
2ace0     1F 3B 42 F5 | 	or	local11, local13
2ace4     00 42 06 F6 | 	mov	local15, #0
2ace8     01 42 06 56 |  if_ne	mov	local15, #1
2acec     21 3B 42 F5 | 	or	local11, local15
2acf0                 | LR__3716
2acf0     16 43 02 F6 | 	mov	local15, local04
2acf4     19 43 62 F5 | 	xor	local15, local07
2acf8     01 42 CE F7 | 	test	local15, #1 wz
2acfc     18 00 90 AD |  if_e	jmp	#LR__3717
2ad00     1A 35 22 F6 | 	not	local08, local08
2ad04     1D 3B 22 F6 | 	not	local11, local11
2ad08     01 3A 0E F1 | 	add	local11, #1 wz
2ad0c     00 42 06 F6 | 	mov	local15, #0
2ad10     01 42 06 A6 |  if_e	mov	local15, #1
2ad14     21 35 02 F1 | 	add	local08, local15
2ad18                 | LR__3717
2ad18     1D 3D 12 F1 | 	add	local12, local11 wc
2ad1c     1A 2F 22 F1 | 	addx	local05, local08
2ad20     00 2E 56 F2 | 	cmps	local05, #0 wc
2ad24     1C 00 90 3D |  if_ae	jmp	#LR__3718
2ad28     01 2C 66 F5 | 	xor	local04, #1
2ad2c     17 2F 22 F6 | 	not	local05, local05
2ad30     1E 3D 22 F6 | 	not	local12, local12
2ad34     01 3C 0E F1 | 	add	local12, #1 wz
2ad38     00 42 06 F6 | 	mov	local15, #0
2ad3c     01 42 06 A6 |  if_e	mov	local15, #1
2ad40     21 2F 02 F1 | 	add	local05, local15
2ad44                 | LR__3718
2ad44     00 80 00 FF 
2ad48     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
2ad4c     28 00 90 CD |  if_b	jmp	#LR__3719
2ad50     01 30 06 F1 | 	add	local06, #1
2ad54     1E 41 02 F6 | 	mov	local14, local12
2ad58     01 40 06 F5 | 	and	local14, #1
2ad5c     01 3C 46 F0 | 	shr	local12, #1
2ad60     17 43 02 F6 | 	mov	local15, local05
2ad64     1F 42 66 F0 | 	shl	local15, #31
2ad68     21 3D 42 F5 | 	or	local12, local15
2ad6c     20 3D 42 F5 | 	or	local12, local14
2ad70     01 2E 46 F0 | 	shr	local05, #1
2ad74     3C 00 90 FD | 	jmp	#LR__3724
2ad78                 | LR__3719
2ad78     00 40 00 FF 
2ad7c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2ad80     30 00 90 3D |  if_ae	jmp	#LR__3723
2ad84     00 2E 0E F2 | 	cmp	local05, #0 wz
2ad88     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
2ad8c     08 2C 46 A5 |  if_e	or	local04, #8
2ad90     01 2C 26 A5 |  if_e	andn	local04, #1
2ad94     1C 00 90 AD |  if_e	jmp	#LR__3722
2ad98                 | LR__3720
2ad98     00 40 00 FF 
2ad9c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2ada0     10 00 90 3D |  if_ae	jmp	#LR__3721
2ada4     1E 3D 12 F1 | 	add	local12, local12 wc
2ada8     17 2F 22 F1 | 	addx	local05, local05
2adac     01 30 86 F1 | 	sub	local06, #1
2adb0     E4 FF 9F FD | 	jmp	#LR__3720
2adb4                 | LR__3721
2adb4                 | LR__3722
2adb4                 | LR__3723
2adb4                 | LR__3724
2adb4     17 13 02 F6 | 	mov	arg01, local05
2adb8     1E 15 02 F6 | 	mov	arg02, local12
2adbc     18 17 02 F6 | 	mov	arg03, local06
2adc0     16 19 02 F6 | 	mov	arg04, local04
2adc4     08 35 B0 FD | 	call	#__system__pack_0696
2adc8     DC 00 90 FD | 	jmp	#LR__3735
2adcc                 | LR__3725
2adcc     FF 38 0E F2 | 	cmp	local10, #255 wz
2add0     10 00 90 5D |  if_ne	jmp	#LR__3726
2add4     16 33 0A F2 | 	cmp	local07, local04 wz
2add8     00 F8 3F 5F 
2addc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2ade0     C4 00 90 5D |  if_ne	jmp	#LR__3735
2ade4                 | LR__3726
2ade4     00 2E 0E F2 | 	cmp	local05, #0 wz
2ade8     00 F8 3F 5F 
2adec     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2adf0     B4 00 90 5D |  if_ne	jmp	#LR__3735
2adf4     1E 15 02 F6 | 	mov	arg02, local12
2adf8     18 17 02 F6 | 	mov	arg03, local06
2adfc     16 19 02 F6 | 	mov	arg04, local04
2ae00     02 18 46 F5 | 	or	arg04, #2
2ae04     17 13 02 F6 | 	mov	arg01, local05
2ae08     C4 34 B0 FD | 	call	#__system__pack_0696
2ae0c     98 00 90 FD | 	jmp	#LR__3735
2ae10                 | LR__3727
2ae10     00 2E 0E F2 | 	cmp	local05, #0 wz
2ae14     28 00 90 AD |  if_e	jmp	#LR__3730
2ae18     01 2E 66 F0 | 	shl	local05, #1
2ae1c     97 0E 48 FB | 	callpa	#(@LR__3729-@LR__3728)>>2,fcache_load_ptr_
2ae20                 | LR__3728
2ae20     00 40 00 FF 
2ae24     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2ae28     18 43 02 C6 |  if_b	mov	local15, local06
2ae2c     01 42 86 C1 |  if_b	sub	local15, #1
2ae30     21 31 02 C6 |  if_b	mov	local06, local15
2ae34     01 2E 66 C0 |  if_b	shl	local05, #1
2ae38     E4 FF 9F CD |  if_b	jmp	#LR__3728
2ae3c                 | LR__3729
2ae3c     28 FE 9F FD | 	jmp	#LR__3711
2ae40                 | LR__3730
2ae40     19 2D 02 F5 | 	and	local04, local07
2ae44     16 19 02 F6 | 	mov	arg04, local04
2ae48     08 18 46 F5 | 	or	arg04, #8
2ae4c     00 12 06 F6 | 	mov	arg01, #0
2ae50     00 14 06 F6 | 	mov	arg02, #0
2ae54     00 16 06 F6 | 	mov	arg03, #0
2ae58     74 34 B0 FD | 	call	#__system__pack_0696
2ae5c     48 00 90 FD | 	jmp	#LR__3735
2ae60                 | LR__3731
2ae60     00 34 0E F2 | 	cmp	local08, #0 wz
2ae64     28 00 90 AD |  if_e	jmp	#LR__3734
2ae68     01 34 66 F0 | 	shl	local08, #1
2ae6c     97 0E 48 FB | 	callpa	#(@LR__3733-@LR__3732)>>2,fcache_load_ptr_
2ae70                 | LR__3732
2ae70     00 40 00 FF 
2ae74     00 34 16 F2 | 	cmp	local08, ##8388608 wc
2ae78     1C 43 02 C6 |  if_b	mov	local15, local10
2ae7c     01 42 86 C1 |  if_b	sub	local15, #1
2ae80     21 39 02 C6 |  if_b	mov	local10, local15
2ae84     01 34 66 C0 |  if_b	shl	local08, #1
2ae88     E4 FF 9F CD |  if_b	jmp	#LR__3732
2ae8c                 | LR__3733
2ae8c     E4 FD 9F FD | 	jmp	#LR__3712
2ae90                 | LR__3734
2ae90     7F 30 86 F1 | 	sub	local06, #127
2ae94     17 13 02 F6 | 	mov	arg01, local05
2ae98     1E 15 02 F6 | 	mov	arg02, local12
2ae9c     18 17 02 F6 | 	mov	arg03, local06
2aea0     16 19 02 F6 | 	mov	arg04, local04
2aea4     28 34 B0 FD | 	call	#__system__pack_0696
2aea8                 | LR__3735
2aea8     A7 F0 03 F6 | 	mov	ptra, fp
2aeac     B2 00 A0 FD | 	call	#popregs_
2aeb0                 | __system___float_add_ret
2aeb0     2D 00 64 FD | 	ret
2aeb4                 | 
2aeb4                 | __system___float_sqrt
2aeb4     04 4A 05 F6 | 	mov	COUNT_, #4
2aeb8     A8 00 A0 FD | 	call	#pushregs_
2aebc     09 27 02 F6 | 	mov	local01, arg01
2aec0     09 FB 01 F6 | 	mov	result1, arg01
2aec4     FD 28 02 F6 | 	mov	local02, result1
2aec8     14 2B 02 F6 | 	mov	local03, local02
2aecc     16 2A 46 F7 | 	zerox	local03, #22
2aed0     14 2D 02 F6 | 	mov	local04, local02
2aed4     01 2C 66 F0 | 	shl	local04, #1
2aed8     18 2C 4E F0 | 	shr	local04, #24 wz
2aedc     1F 28 46 F0 | 	shr	local02, #31
2aee0     70 00 90 AD |  if_e	jmp	#LR__3741
2aee4     17 2A 26 F4 | 	bith	local03, #23
2aee8                 | LR__3740
2aee8     00 28 0E F2 | 	cmp	local02, #0 wz
2aeec     00 F8 3F 5F 
2aef0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2aef4     88 00 90 5D |  if_ne	jmp	#LR__3744
2aef8     FF 2C 0E F2 | 	cmp	local04, #255 wz
2aefc     13 FB 01 A6 |  if_e	mov	result1, local01
2af00     7C 00 90 AD |  if_e	jmp	#LR__3744
2af04     7F 2C 86 F1 | 	sub	local04, #127
2af08     01 2C CE F7 | 	test	local04, #1 wz
2af0c     01 2A 66 50 |  if_ne	shl	local03, #1
2af10     05 2A 66 F0 | 	shl	local03, #5
2af14     15 01 38 FD | 	qsqrt	#0, local03
2af18     01 2C 86 51 |  if_ne	sub	local04, #1
2af1c     16 2D 52 F6 | 	abs	local04, local04 wc
2af20     01 2C 46 F0 | 	shr	local04, #1
2af24     16 17 82 F6 | 	negc	arg03, local04
2af28     14 19 02 F6 | 	mov	arg04, local02
2af2c     18 12 62 FD | 	getqx	arg01
2af30     09 15 02 F6 | 	mov	arg02, arg01
2af34     19 14 66 F0 | 	shl	arg02, #25
2af38     07 12 46 F0 | 	shr	arg01, #7
2af3c     00 80 00 FF 
2af40     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
2af44     01 16 06 31 |  if_ae	add	arg03, #1
2af48     01 12 46 30 |  if_ae	shr	arg01, #1
2af4c     80 33 B0 FD | 	call	#__system__pack_0696
2af50     2C 00 90 FD | 	jmp	#LR__3744
2af54                 | LR__3741
2af54     00 2A 0E F2 | 	cmp	local03, #0 wz
2af58     13 FB 01 A6 |  if_e	mov	result1, local01
2af5c     20 00 90 AD |  if_e	jmp	#LR__3744
2af60     01 2A 66 F0 | 	shl	local03, #1
2af64     97 0A 48 FB | 	callpa	#(@LR__3743-@LR__3742)>>2,fcache_load_ptr_
2af68                 | LR__3742
2af68     00 40 00 FF 
2af6c     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
2af70     01 2C 86 C1 |  if_b	sub	local04, #1
2af74     01 2A 66 C0 |  if_b	shl	local03, #1
2af78     EC FF 9F CD |  if_b	jmp	#LR__3742
2af7c                 | LR__3743
2af7c     68 FF 9F FD | 	jmp	#LR__3740
2af80                 | LR__3744
2af80     A7 F0 03 F6 | 	mov	ptra, fp
2af84     B2 00 A0 FD | 	call	#popregs_
2af88                 | __system___float_sqrt_ret
2af88     2D 00 64 FD | 	ret
2af8c                 | 
2af8c                 | __system___float_mul
2af8c     0B 4A 05 F6 | 	mov	COUNT_, #11
2af90     A8 00 A0 FD | 	call	#pushregs_
2af94     09 27 02 F6 | 	mov	local01, arg01
2af98     0A 29 02 F6 | 	mov	local02, arg02
2af9c     13 2B 02 F6 | 	mov	local03, local01
2afa0     15 2D 02 F6 | 	mov	local04, local03
2afa4     16 2C 46 F7 | 	zerox	local04, #22
2afa8     15 2F 02 F6 | 	mov	local05, local03
2afac     01 2E 66 F0 | 	shl	local05, #1
2afb0     18 2E 46 F0 | 	shr	local05, #24
2afb4     1F 2A 46 F0 | 	shr	local03, #31
2afb8     14 FB 01 F6 | 	mov	result1, local02
2afbc     FD 30 02 F6 | 	mov	local06, result1
2afc0     18 33 02 F6 | 	mov	local07, local06
2afc4     16 32 46 F7 | 	zerox	local07, #22
2afc8     18 35 02 F6 | 	mov	local08, local06
2afcc     01 34 66 F0 | 	shl	local08, #1
2afd0     18 34 46 F0 | 	shr	local08, #24
2afd4     1F 30 46 F0 | 	shr	local06, #31
2afd8     18 2B 62 F5 | 	xor	local03, local06
2afdc     FF 2E 0E F2 | 	cmp	local05, #255 wz
2afe0     90 00 90 AD |  if_e	jmp	#LR__3753
2afe4     FF 34 0E F2 | 	cmp	local08, #255 wz
2afe8     D8 00 90 AD |  if_e	jmp	#LR__3755
2afec     00 2E 0E F2 | 	cmp	local05, #0 wz
2aff0     0C 01 90 AD |  if_e	jmp	#LR__3756
2aff4     17 2C 26 F4 | 	bith	local04, #23
2aff8                 | LR__3750
2aff8     00 34 0E F2 | 	cmp	local08, #0 wz
2affc     44 01 90 AD |  if_e	jmp	#LR__3760
2b000     17 32 26 F4 | 	bith	local07, #23
2b004                 | LR__3751
2b004     16 29 02 F6 | 	mov	local02, local04
2b008     04 28 66 F0 | 	shl	local02, #4
2b00c     19 31 02 F6 | 	mov	local06, local07
2b010     05 30 66 F0 | 	shl	local06, #5
2b014     18 29 02 FD | 	qmul	local02, local06
2b018     1A 2F 02 F1 | 	add	local05, local08
2b01c     FE 2E 86 F1 | 	sub	local05, #254
2b020     17 37 02 F6 | 	mov	local09, local05
2b024     04 2C 66 F0 | 	shl	local04, #4
2b028     05 32 66 F0 | 	shl	local07, #5
2b02c     18 38 62 FD | 	getqx	local10
2b030     19 2D 02 FD | 	qmul	local04, local07
2b034     19 3A 62 FD | 	getqy	local11
2b038     00 80 00 FF 
2b03c     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
2b040     18 00 90 CD |  if_b	jmp	#LR__3752
2b044     01 36 06 F1 | 	add	local09, #1
2b048     01 38 46 F0 | 	shr	local10, #1
2b04c     1D 35 02 F6 | 	mov	local08, local11
2b050     1F 34 66 F0 | 	shl	local08, #31
2b054     1A 39 42 F5 | 	or	local10, local08
2b058     01 3A 46 F0 | 	shr	local11, #1
2b05c                 | LR__3752
2b05c     1D 13 02 F6 | 	mov	arg01, local11
2b060     1C 15 02 F6 | 	mov	arg02, local10
2b064     1B 17 02 F6 | 	mov	arg03, local09
2b068     15 19 02 F6 | 	mov	arg04, local03
2b06c     60 32 B0 FD | 	call	#__system__pack_0696
2b070     10 01 90 FD | 	jmp	#LR__3764
2b074                 | LR__3753
2b074     00 2C 0E F2 | 	cmp	local04, #0 wz
2b078     13 FB 01 56 |  if_ne	mov	result1, local01
2b07c     04 01 90 5D |  if_ne	jmp	#LR__3764
2b080     FF 34 56 F2 | 	cmps	local08, #255 wc
2b084     00 34 0E C2 |  if_b	cmp	local08, #0 wz
2b088     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
2b08c     18 00 90 4D |  if_c_and_nz	jmp	#LR__3754
2b090     00 F8 3F CF 
2b094     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
2b098     E8 00 90 CD |  if_b	jmp	#LR__3764
2b09c     00 32 0E F2 | 	cmp	local07, #0 wz
2b0a0     14 FB 01 56 |  if_ne	mov	result1, local02
2b0a4     DC 00 90 5D |  if_ne	jmp	#LR__3764
2b0a8                 | LR__3754
2b0a8     02 2A 46 F5 | 	or	local03, #2
2b0ac     00 12 06 F6 | 	mov	arg01, #0
2b0b0     00 14 06 F6 | 	mov	arg02, #0
2b0b4     17 17 02 F6 | 	mov	arg03, local05
2b0b8     15 19 02 F6 | 	mov	arg04, local03
2b0bc     10 32 B0 FD | 	call	#__system__pack_0696
2b0c0     C0 00 90 FD | 	jmp	#LR__3764
2b0c4                 | LR__3755
2b0c4     00 2E 0E F2 | 	cmp	local05, #0 wz
2b0c8     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
2b0cc     00 F8 3F AF 
2b0d0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2b0d4     AC 00 90 AD |  if_e	jmp	#LR__3764
2b0d8     00 32 0E F2 | 	cmp	local07, #0 wz
2b0dc     14 FB 01 56 |  if_ne	mov	result1, local02
2b0e0     A0 00 90 5D |  if_ne	jmp	#LR__3764
2b0e4     1A 17 02 F6 | 	mov	arg03, local08
2b0e8     15 19 02 F6 | 	mov	arg04, local03
2b0ec     02 18 46 F5 | 	or	arg04, #2
2b0f0     00 12 06 F6 | 	mov	arg01, #0
2b0f4     00 14 06 F6 | 	mov	arg02, #0
2b0f8     D4 31 B0 FD | 	call	#__system__pack_0696
2b0fc     84 00 90 FD | 	jmp	#LR__3764
2b100                 | LR__3756
2b100     00 2C 0E F2 | 	cmp	local04, #0 wz
2b104     20 00 90 AD |  if_e	jmp	#LR__3759
2b108     01 2C 66 F0 | 	shl	local04, #1
2b10c     97 0A 48 FB | 	callpa	#(@LR__3758-@LR__3757)>>2,fcache_load_ptr_
2b110                 | LR__3757
2b110     00 40 00 FF 
2b114     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
2b118     01 2E 86 C1 |  if_b	sub	local05, #1
2b11c     01 2C 66 C0 |  if_b	shl	local04, #1
2b120     EC FF 9F CD |  if_b	jmp	#LR__3757
2b124                 | LR__3758
2b124     D0 FE 9F FD | 	jmp	#LR__3750
2b128                 | LR__3759
2b128     08 2A 46 F5 | 	or	local03, #8
2b12c     00 12 06 F6 | 	mov	arg01, #0
2b130     00 14 06 F6 | 	mov	arg02, #0
2b134     00 16 06 F6 | 	mov	arg03, #0
2b138     15 19 02 F6 | 	mov	arg04, local03
2b13c     90 31 B0 FD | 	call	#__system__pack_0696
2b140     40 00 90 FD | 	jmp	#LR__3764
2b144                 | LR__3760
2b144     00 32 0E F2 | 	cmp	local07, #0 wz
2b148     20 00 90 AD |  if_e	jmp	#LR__3763
2b14c     01 32 66 F0 | 	shl	local07, #1
2b150     97 0A 48 FB | 	callpa	#(@LR__3762-@LR__3761)>>2,fcache_load_ptr_
2b154                 | LR__3761
2b154     00 40 00 FF 
2b158     00 32 16 F2 | 	cmp	local07, ##8388608 wc
2b15c     01 34 86 C1 |  if_b	sub	local08, #1
2b160     01 32 66 C0 |  if_b	shl	local07, #1
2b164     EC FF 9F CD |  if_b	jmp	#LR__3761
2b168                 | LR__3762
2b168     98 FE 9F FD | 	jmp	#LR__3751
2b16c                 | LR__3763
2b16c     08 2A 46 F5 | 	or	local03, #8
2b170     00 12 06 F6 | 	mov	arg01, #0
2b174     00 14 06 F6 | 	mov	arg02, #0
2b178     00 16 06 F6 | 	mov	arg03, #0
2b17c     15 19 02 F6 | 	mov	arg04, local03
2b180     4C 31 B0 FD | 	call	#__system__pack_0696
2b184                 | LR__3764
2b184     A7 F0 03 F6 | 	mov	ptra, fp
2b188     B2 00 A0 FD | 	call	#popregs_
2b18c                 | __system___float_mul_ret
2b18c     2D 00 64 FD | 	ret
2b190                 | 
2b190                 | __system___float_div
2b190     0E 4A 05 F6 | 	mov	COUNT_, #14
2b194     A8 00 A0 FD | 	call	#pushregs_
2b198     09 2B 02 F6 | 	mov	local03, arg01
2b19c     0A 2D 02 F6 | 	mov	local04, arg02
2b1a0     15 2F 02 F6 | 	mov	local05, local03
2b1a4     17 31 02 F6 | 	mov	local06, local05
2b1a8     16 30 46 F7 | 	zerox	local06, #22
2b1ac     17 33 02 F6 | 	mov	local07, local05
2b1b0     01 32 66 F0 | 	shl	local07, #1
2b1b4     18 32 46 F0 | 	shr	local07, #24
2b1b8     1F 2E 46 F0 | 	shr	local05, #31
2b1bc     16 FB 01 F6 | 	mov	result1, local04
2b1c0     FD 34 02 F6 | 	mov	local08, result1
2b1c4     1A 37 02 F6 | 	mov	local09, local08
2b1c8     16 36 46 F7 | 	zerox	local09, #22
2b1cc     1A 39 02 F6 | 	mov	local10, local08
2b1d0     01 38 66 F0 | 	shl	local10, #1
2b1d4     18 38 46 F0 | 	shr	local10, #24
2b1d8     1F 34 46 F0 | 	shr	local08, #31
2b1dc     1A 2F 62 F5 | 	xor	local05, local08
2b1e0     FF 32 0E F2 | 	cmp	local07, #255 wz
2b1e4     D4 00 90 AD |  if_e	jmp	#LR__3775
2b1e8     FF 38 0E F2 | 	cmp	local10, #255 wz
2b1ec     04 01 90 AD |  if_e	jmp	#LR__3776
2b1f0     00 32 0E F2 | 	cmp	local07, #0 wz
2b1f4     24 01 90 AD |  if_e	jmp	#LR__3777
2b1f8     17 30 26 F4 | 	bith	local06, #23
2b1fc                 | LR__3770
2b1fc     00 38 0E F2 | 	cmp	local10, #0 wz
2b200     70 01 90 AD |  if_e	jmp	#LR__3781
2b204     17 36 26 F4 | 	bith	local09, #23
2b208                 | LR__3771
2b208     1C 33 82 F1 | 	sub	local07, local10
2b20c     19 3B 02 F6 | 	mov	local11, local07
2b210     18 13 02 F6 | 	mov	arg01, local06
2b214     02 12 46 F0 | 	shr	arg01, #2
2b218     1E 30 66 F0 | 	shl	local06, #30
2b21c     18 15 02 F6 | 	mov	arg02, local06
2b220     1B 17 02 F6 | 	mov	arg03, local09
2b224     28 12 62 FD | 	setq	arg01
2b228     0B 15 12 FD | 	qdiv	arg02, arg03
2b22c     00 3C 06 F6 | 	mov	local12, #0
2b230     18 26 62 FD | 	getqx	local01
2b234     19 FC 61 FD | 	getqy	result2
2b238     FE 28 02 F6 | 	mov	local02, result2
2b23c     13 3F 02 F6 | 	mov	local13, local01
2b240     00 28 4E F2 | 	cmps	local02, #0 wz
2b244     1F 41 02 F6 | 	mov	local14, local13
2b248     19 40 66 F0 | 	shl	local14, #25
2b24c     01 3C 06 56 |  if_ne	mov	local12, #1
2b250     1E 41 42 F5 | 	or	local14, local12
2b254     07 3E 46 F0 | 	shr	local13, #7
2b258     00 80 00 FF 
2b25c     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
2b260     1C 00 90 CD |  if_b	jmp	#LR__3772
2b264     01 3A 06 F1 | 	add	local11, #1
2b268     01 40 46 F0 | 	shr	local14, #1
2b26c     1F 3D 02 F6 | 	mov	local12, local13
2b270     1F 3C 66 F0 | 	shl	local12, #31
2b274     1E 41 42 F5 | 	or	local14, local12
2b278     01 3E 46 F0 | 	shr	local13, #1
2b27c     24 00 90 FD | 	jmp	#LR__3774
2b280                 | LR__3772
2b280     00 40 00 FF 
2b284     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
2b288     18 00 90 3D |  if_ae	jmp	#LR__3773
2b28c     01 3A 86 F1 | 	sub	local11, #1
2b290     01 3E 66 F0 | 	shl	local13, #1
2b294     20 3D 02 F6 | 	mov	local12, local14
2b298     1F 3C 46 F0 | 	shr	local12, #31
2b29c     1E 3F 42 F5 | 	or	local13, local12
2b2a0     01 40 66 F0 | 	shl	local14, #1
2b2a4                 | LR__3773
2b2a4                 | LR__3774
2b2a4     1F 13 02 F6 | 	mov	arg01, local13
2b2a8     20 15 02 F6 | 	mov	arg02, local14
2b2ac     1D 17 02 F6 | 	mov	arg03, local11
2b2b0     17 19 02 F6 | 	mov	arg04, local05
2b2b4     18 30 B0 FD | 	call	#__system__pack_0696
2b2b8     F8 00 90 FD | 	jmp	#LR__3785
2b2bc                 | LR__3775
2b2bc     00 30 0E F2 | 	cmp	local06, #0 wz
2b2c0     15 FB 01 56 |  if_ne	mov	result1, local03
2b2c4     EC 00 90 5D |  if_ne	jmp	#LR__3785
2b2c8     FF 38 0E F2 | 	cmp	local10, #255 wz
2b2cc     00 F8 3F AF 
2b2d0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2b2d4     DC 00 90 AD |  if_e	jmp	#LR__3785
2b2d8     02 2E 46 F5 | 	or	local05, #2
2b2dc     00 12 06 F6 | 	mov	arg01, #0
2b2e0     00 14 06 F6 | 	mov	arg02, #0
2b2e4     19 17 02 F6 | 	mov	arg03, local07
2b2e8     17 19 02 F6 | 	mov	arg04, local05
2b2ec     E0 2F B0 FD | 	call	#__system__pack_0696
2b2f0     C0 00 90 FD | 	jmp	#LR__3785
2b2f4                 | LR__3776
2b2f4     00 36 0E F2 | 	cmp	local09, #0 wz
2b2f8     16 FB 01 56 |  if_ne	mov	result1, local04
2b2fc     B4 00 90 5D |  if_ne	jmp	#LR__3785
2b300     17 19 02 F6 | 	mov	arg04, local05
2b304     08 18 46 F5 | 	or	arg04, #8
2b308     00 12 06 F6 | 	mov	arg01, #0
2b30c     00 14 06 F6 | 	mov	arg02, #0
2b310     00 16 06 F6 | 	mov	arg03, #0
2b314     B8 2F B0 FD | 	call	#__system__pack_0696
2b318     98 00 90 FD | 	jmp	#LR__3785
2b31c                 | LR__3777
2b31c     00 30 0E F2 | 	cmp	local06, #0 wz
2b320     20 00 90 AD |  if_e	jmp	#LR__3780
2b324     01 30 66 F0 | 	shl	local06, #1
2b328     97 0A 48 FB | 	callpa	#(@LR__3779-@LR__3778)>>2,fcache_load_ptr_
2b32c                 | LR__3778
2b32c     00 40 00 FF 
2b330     00 30 16 F2 | 	cmp	local06, ##8388608 wc
2b334     01 32 86 C1 |  if_b	sub	local07, #1
2b338     01 30 66 C0 |  if_b	shl	local06, #1
2b33c     EC FF 9F CD |  if_b	jmp	#LR__3778
2b340                 | LR__3779
2b340     B8 FE 9F FD | 	jmp	#LR__3770
2b344                 | LR__3780
2b344     00 38 0E F2 | 	cmp	local10, #0 wz
2b348     00 36 0E A2 |  if_e	cmp	local09, #0 wz
2b34c     00 F8 3F AF 
2b350     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2b354     5C 00 90 AD |  if_e	jmp	#LR__3785
2b358     17 19 02 F6 | 	mov	arg04, local05
2b35c     08 18 46 F5 | 	or	arg04, #8
2b360     00 12 06 F6 | 	mov	arg01, #0
2b364     00 14 06 F6 | 	mov	arg02, #0
2b368     00 16 06 F6 | 	mov	arg03, #0
2b36c     60 2F B0 FD | 	call	#__system__pack_0696
2b370     40 00 90 FD | 	jmp	#LR__3785
2b374                 | LR__3781
2b374     00 36 0E F2 | 	cmp	local09, #0 wz
2b378     20 00 90 AD |  if_e	jmp	#LR__3784
2b37c     01 36 66 F0 | 	shl	local09, #1
2b380     97 0A 48 FB | 	callpa	#(@LR__3783-@LR__3782)>>2,fcache_load_ptr_
2b384                 | LR__3782
2b384     00 40 00 FF 
2b388     00 36 16 F2 | 	cmp	local09, ##8388608 wc
2b38c     01 38 86 C1 |  if_b	sub	local10, #1
2b390     01 36 66 C0 |  if_b	shl	local09, #1
2b394     EC FF 9F CD |  if_b	jmp	#LR__3782
2b398                 | LR__3783
2b398     6C FE 9F FD | 	jmp	#LR__3771
2b39c                 | LR__3784
2b39c     02 2E 46 F5 | 	or	local05, #2
2b3a0     00 12 06 F6 | 	mov	arg01, #0
2b3a4     00 14 06 F6 | 	mov	arg02, #0
2b3a8     00 16 06 F6 | 	mov	arg03, #0
2b3ac     17 19 02 F6 | 	mov	arg04, local05
2b3b0     1C 2F B0 FD | 	call	#__system__pack_0696
2b3b4                 | LR__3785
2b3b4     A7 F0 03 F6 | 	mov	ptra, fp
2b3b8     B2 00 A0 FD | 	call	#popregs_
2b3bc                 | __system___float_div_ret
2b3bc     2D 00 64 FD | 	ret
2b3c0                 | 
2b3c0                 | __system___float_cmp
2b3c0     00 C0 3F FF 
2b3c4     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2b3c8     00 C0 3F CF 
2b3cc     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2b3d0     0B FB 01 36 |  if_ae	mov	result1, arg03
2b3d4     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2b3d8     00 C0 7F FF 
2b3dc     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
2b3e0     00 C0 7F CF 
2b3e4     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2b3e8     0B FB 01 36 |  if_ae	mov	result1, arg03
2b3ec     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2b3f0     00 12 56 F2 | 	cmps	arg01, #0 wc
2b3f4     2C 00 90 3D |  if_ae	jmp	#LR__3790
2b3f8     00 14 56 F2 | 	cmps	arg02, #0 wc
2b3fc     0A FB 01 C6 |  if_b	mov	result1, arg02
2b400     09 FB 81 C1 |  if_b	sub	result1, arg01
2b404     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2b408     00 14 0E F2 | 	cmp	arg02, #0 wz
2b40c     00 00 40 AF 
2b410     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
2b414     00 FA 05 A6 |  if_e	mov	result1, #0
2b418     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2b41c     01 FA 65 F6 | 	neg	result1, #1
2b420     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
2b424                 | LR__3790
2b424     00 14 56 F2 | 	cmps	arg02, #0 wc
2b428     1C 00 90 3D |  if_ae	jmp	#LR__3791
2b42c     00 12 0E F2 | 	cmp	arg01, #0 wz
2b430     00 00 40 AF 
2b434     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2b438     00 FA 05 A6 |  if_e	mov	result1, #0
2b43c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2b440     01 FA 05 F6 | 	mov	result1, #1
2b444     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2b448                 | LR__3791
2b448     0A 13 82 F1 | 	sub	arg01, arg02
2b44c     09 FB 01 F6 | 	mov	result1, arg01
2b450                 | __system___float_cmp_ret
2b450     2D 00 64 FD | 	ret
2b454                 | 
2b454                 | __system___float_tointeger
2b454     02 4A 05 F6 | 	mov	COUNT_, #2
2b458     A8 00 A0 FD | 	call	#pushregs_
2b45c     50 00 B0 FD | 	call	#__system___float_Unpack
2b460     FF FF 7F FF 
2b464     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2b468     34 00 90 CD |  if_b	jmp	#LR__3800
2b46c     1F FC 55 F2 | 	cmps	result2, #31 wc
2b470     2C 00 90 3D |  if_ae	jmp	#LR__3800
2b474     02 FE 65 F0 | 	shl	result3, #2
2b478     1E 26 06 F6 | 	mov	local01, #30
2b47c     FE 26 82 F1 | 	sub	local01, result2
2b480     13 FF 41 F0 | 	shr	result3, local01
2b484     FF 28 02 F6 | 	mov	local02, result3
2b488     0A 29 02 F1 | 	add	local02, arg02
2b48c     01 28 46 F0 | 	shr	local02, #1
2b490     00 FA 0D F2 | 	cmp	result1, #0 wz
2b494     14 29 62 56 |  if_ne	neg	local02, local02
2b498     14 FB 01 F6 | 	mov	result1, local02
2b49c     04 00 90 FD | 	jmp	#LR__3801
2b4a0                 | LR__3800
2b4a0     00 FA 05 F6 | 	mov	result1, #0
2b4a4                 | LR__3801
2b4a4     A7 F0 03 F6 | 	mov	ptra, fp
2b4a8     B2 00 A0 FD | 	call	#popregs_
2b4ac                 | __system___float_tointeger_ret
2b4ac     2D 00 64 FD | 	ret
2b4b0                 | 
2b4b0                 | __system___float_Unpack
2b4b0     09 01 02 F6 | 	mov	_var01, arg01
2b4b4     1F 00 46 F0 | 	shr	_var01, #31
2b4b8     09 03 02 F6 | 	mov	_var02, arg01
2b4bc     01 02 66 F0 | 	shl	_var02, #1
2b4c0     18 02 4E F0 | 	shr	_var02, #24 wz
2b4c4     17 13 06 F4 | 	bitl	arg01, #279
2b4c8     06 12 66 50 |  if_ne	shl	arg01, #6
2b4cc     1D 12 26 54 |  if_ne	bith	arg01, #29
2b4d0     1C 00 90 5D |  if_ne	jmp	#LR__3810
2b4d4     09 05 92 F7 | 	encod	_var03, arg01 wc
2b4d8     01 04 06 C1 |  if_b	add	_var03, #1
2b4dc     17 04 86 F1 | 	sub	_var03, #23
2b4e0     02 03 02 F6 | 	mov	_var02, _var03
2b4e4     07 FC 05 F6 | 	mov	result2, #7
2b4e8     02 FD 81 F1 | 	sub	result2, _var03
2b4ec     FE 12 62 F0 | 	shl	arg01, result2
2b4f0                 | LR__3810
2b4f0     7F 02 86 F1 | 	sub	_var02, #127
2b4f4     09 FF 01 F6 | 	mov	result3, arg01
2b4f8     00 FB 01 F6 | 	mov	result1, _var01
2b4fc     01 FD 01 F6 | 	mov	result2, _var02
2b500                 | __system___float_Unpack_ret
2b500     2D 00 64 FD | 	ret
2b504                 | 
2b504                 | __system___float_Pack
2b504     00 00 06 F6 | 	mov	_var01, #0
2b508     00 16 0E F2 | 	cmp	arg03, #0 wz
2b50c     8C 00 90 AD |  if_e	jmp	#LR__3821
2b510     0B 03 92 F7 | 	encod	_var02, arg03 wc
2b514     01 02 06 C1 |  if_b	add	_var02, #1
2b518     21 00 06 F6 | 	mov	_var01, #33
2b51c     01 01 82 F1 | 	sub	_var01, _var02
2b520     00 17 62 F0 | 	shl	arg03, _var01
2b524     03 02 06 F6 | 	mov	_var02, #3
2b528     00 03 82 F1 | 	sub	_var02, _var01
2b52c     01 15 02 F1 | 	add	arg02, _var02
2b530     0A 05 02 F6 | 	mov	_var03, arg02
2b534     00 17 06 F1 | 	add	arg03, #256
2b538     0B 03 02 F6 | 	mov	_var02, arg03
2b53c     FF 02 2E F5 | 	andn	_var02, #255 wz
2b540     01 04 06 A1 |  if_e	add	_var03, #1
2b544     7F 04 06 F1 | 	add	_var03, #127
2b548     FF FF 7F FF 
2b54c     E9 05 46 F3 | 	fges	_var03, ##-23
2b550     FF 04 66 F3 | 	fles	_var03, #255
2b554     01 04 56 F2 | 	cmps	_var03, #1 wc
2b558     1C 00 90 3D |  if_ae	jmp	#LR__3820
2b55c     01 16 46 F0 | 	shr	arg03, #1
2b560     1F 02 C6 F9 | 	decod	_var02, #31
2b564     0B 03 02 F1 | 	add	_var02, arg03
2b568     02 05 62 F6 | 	neg	_var03, _var03
2b56c     02 03 42 F0 | 	shr	_var02, _var03
2b570     01 17 02 F6 | 	mov	arg03, _var02
2b574     00 04 06 F6 | 	mov	_var03, #0
2b578                 | LR__3820
2b578     09 FB 01 F6 | 	mov	result1, arg01
2b57c     1F FA 65 F0 | 	shl	result1, #31
2b580     02 03 02 F6 | 	mov	_var02, _var03
2b584     17 02 66 F0 | 	shl	_var02, #23
2b588     01 FB 41 F5 | 	or	result1, _var02
2b58c     0B 07 02 F6 | 	mov	_var04, arg03
2b590     09 06 46 F0 | 	shr	_var04, #9
2b594     03 FB 41 F5 | 	or	result1, _var04
2b598     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2b59c                 | LR__3821
2b59c     00 FB 01 F6 | 	mov	result1, _var01
2b5a0                 | __system___float_Pack_ret
2b5a0     2D 00 64 FD | 	ret
2b5a4                 | 
2b5a4                 | __system___basic_print_float
2b5a4     05 4A 05 F6 | 	mov	COUNT_, #5
2b5a8     A8 00 A0 FD | 	call	#pushregs_
2b5ac     09 27 02 F6 | 	mov	local01, arg01
2b5b0     0A 29 02 F6 | 	mov	local02, arg02
2b5b4     0B 2B 0A F6 | 	mov	local03, arg03 wz
2b5b8     0C 2D 02 F6 | 	mov	local04, arg04
2b5bc     14 00 90 5D |  if_ne	jmp	#LR__3830
2b5c0     23 2C 0E F2 | 	cmp	local04, #35 wz
2b5c4     80 02 10 AF 
2b5c8     00 2E 06 A6 |  if_e	mov	local05, ##537198592
2b5cc     1D 2E C6 59 |  if_ne	decod	local05, #29
2b5d0     17 2B 02 F6 | 	mov	local03, local05
2b5d4                 | LR__3830
2b5d4     13 13 02 F6 | 	mov	arg01, local01
2b5d8     28 28 B0 FD | 	call	#__system___gettxfunc
2b5dc     FD 2E 0A F6 | 	mov	local05, result1 wz
2b5e0     00 FA 05 A6 |  if_e	mov	result1, #0
2b5e4     17 13 02 56 |  if_ne	mov	arg01, local05
2b5e8     15 15 02 56 |  if_ne	mov	arg02, local03
2b5ec     14 17 02 56 |  if_ne	mov	arg03, local02
2b5f0     16 19 02 56 |  if_ne	mov	arg04, local04
2b5f4     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
2b5f8     A7 F0 03 F6 | 	mov	ptra, fp
2b5fc     B2 00 A0 FD | 	call	#popregs_
2b600                 | __system___basic_print_float_ret
2b600     2D 00 64 FD | 	ret
2b604                 | 
2b604                 | __system____builtin_atoi
2b604     07 4A 05 F6 | 	mov	COUNT_, #7
2b608     A8 00 A0 FD | 	call	#pushregs_
2b60c                 | __system____builtin_atoi_enter
2b60c     09 27 02 F6 | 	mov	local01, arg01
2b610     0A 29 02 F6 | 	mov	local02, arg02
2b614     00 2A 06 F6 | 	mov	local03, #0
2b618     00 2C 06 F6 | 	mov	local04, #0
2b61c     00 2E 06 F6 | 	mov	local05, #0
2b620     97 08 48 FB | 	callpa	#(@LR__3841-@LR__3840)>>2,fcache_load_ptr_
2b624                 | LR__3840
2b624     13 31 C2 FA | 	rdbyte	local06, local01
2b628     20 30 0E F2 | 	cmp	local06, #32 wz
2b62c     01 26 06 A1 |  if_e	add	local01, #1
2b630     F0 FF 9F AD |  if_e	jmp	#LR__3840
2b634                 | LR__3841
2b634     13 33 C2 FA | 	rdbyte	local07, local01
2b638     97 12 48 FB | 	callpa	#(@LR__3843-@LR__3842)>>2,fcache_load_ptr_
2b63c                 | LR__3842
2b63c     2D 32 0E F2 | 	cmp	local07, #45 wz
2b640     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
2b644     18 00 90 5D |  if_ne	jmp	#LR__3844
2b648     01 26 06 F1 | 	add	local01, #1
2b64c     2D 32 0E F2 | 	cmp	local07, #45 wz
2b650     01 30 06 A6 |  if_e	mov	local06, #1
2b654     18 2F C2 A2 |  if_e	subr	local05, local06
2b658     13 33 C2 FA | 	rdbyte	local07, local01
2b65c     DC FF 9F FD | 	jmp	#LR__3842
2b660                 | LR__3843
2b660                 | LR__3844
2b660     00 28 0E F2 | 	cmp	local02, #0 wz
2b664     1C 00 90 5D |  if_ne	jmp	#LR__3846
2b668     24 32 0E F2 | 	cmp	local07, #36 wz
2b66c     10 28 06 A6 |  if_e	mov	local02, #16
2b670     01 26 06 A1 |  if_e	add	local01, #1
2b674     0C 00 90 AD |  if_e	jmp	#LR__3845
2b678     25 32 0E F2 | 	cmp	local07, #37 wz
2b67c     02 28 06 A6 |  if_e	mov	local02, #2
2b680     01 26 06 A1 |  if_e	add	local01, #1
2b684                 | LR__3845
2b684                 | LR__3846
2b684     97 48 48 FB | 	callpa	#(@LR__3854-@LR__3847)>>2,fcache_load_ptr_
2b688                 | LR__3847
2b688                 | LR__3848
2b688     13 33 C2 FA | 	rdbyte	local07, local01
2b68c     5F 32 0E F2 | 	cmp	local07, #95 wz
2b690     01 26 06 F1 | 	add	local01, #1
2b694     F0 FF 9F AD |  if_e	jmp	#LR__3848
2b698     30 32 0E F2 | 	cmp	local07, #48 wz
2b69c     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2b6a0     00 2C 06 A6 |  if_e	mov	local04, #0
2b6a4     60 00 90 AD |  if_e	jmp	#LR__3853
2b6a8     31 32 56 F2 | 	cmps	local07, #49 wc
2b6ac     18 00 90 CD |  if_b	jmp	#LR__3849
2b6b0     3A 32 56 F2 | 	cmps	local07, #58 wc
2b6b4     19 2D 02 C6 |  if_b	mov	local04, local07
2b6b8     30 2C 86 C1 |  if_b	sub	local04, #48
2b6bc     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2b6c0     0A 28 06 86 |  if_c_and_z	mov	local02, #10
2b6c4     40 00 90 CD |  if_b	jmp	#LR__3852
2b6c8                 | LR__3849
2b6c8     0B 28 56 F2 | 	cmps	local02, #11 wc
2b6cc     61 32 56 32 |  if_ae	cmps	local07, #97 wc
2b6d0     14 00 90 CD |  if_b	jmp	#LR__3850
2b6d4     67 32 56 F2 | 	cmps	local07, #103 wc
2b6d8     61 32 86 C1 |  if_b	sub	local07, #97
2b6dc     0A 2C 06 C6 |  if_b	mov	local04, #10
2b6e0     19 2D 02 C1 |  if_b	add	local04, local07
2b6e4     20 00 90 CD |  if_b	jmp	#LR__3851
2b6e8                 | LR__3850
2b6e8     0B 28 56 F2 | 	cmps	local02, #11 wc
2b6ec     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2b6f0     24 00 90 CD |  if_b	jmp	#LR__3855
2b6f4     47 32 56 F2 | 	cmps	local07, #71 wc
2b6f8     41 32 86 C1 |  if_b	sub	local07, #65
2b6fc     0A 2C 06 C6 |  if_b	mov	local04, #10
2b700     19 2D 02 C1 |  if_b	add	local04, local07
2b704     10 00 90 3D |  if_ae	jmp	#LR__3855
2b708                 | LR__3851
2b708                 | LR__3852
2b708                 | LR__3853
2b708     15 29 02 FD | 	qmul	local02, local03
2b70c     18 2A 62 FD | 	getqx	local03
2b710     16 2B 02 F1 | 	add	local03, local04
2b714     70 FF 9F FD | 	jmp	#LR__3847
2b718                 | LR__3854
2b718                 | LR__3855
2b718     00 28 0E F2 | 	cmp	local02, #0 wz
2b71c     64 00 90 5D |  if_ne	jmp	#LR__3861
2b720     78 32 0E F2 | 	cmp	local07, #120 wz
2b724     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
2b728     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
2b72c     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2b730     14 00 90 5D |  if_ne	jmp	#LR__3856
2b734     13 13 02 F6 | 	mov	arg01, local01
2b738     10 14 06 F6 | 	mov	arg02, #16
2b73c     C4 FE BF FD | 	call	#__system____builtin_atoi
2b740     FD 2A 02 F6 | 	mov	local03, result1
2b744     3C 00 90 FD | 	jmp	#LR__3860
2b748                 | LR__3856
2b748     62 32 0E F2 | 	cmp	local07, #98 wz
2b74c     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
2b750     14 00 90 5D |  if_ne	jmp	#LR__3857
2b754     13 13 02 F6 | 	mov	arg01, local01
2b758     02 14 06 F6 | 	mov	arg02, #2
2b75c     A4 FE BF FD | 	call	#__system____builtin_atoi
2b760     FD 2A 02 F6 | 	mov	local03, result1
2b764     1C 00 90 FD | 	jmp	#LR__3859
2b768                 | LR__3857
2b768     6F 32 0E F2 | 	cmp	local07, #111 wz
2b76c     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2b770     10 00 90 5D |  if_ne	jmp	#LR__3858
2b774     13 13 02 F6 | 	mov	arg01, local01
2b778     08 14 06 F6 | 	mov	arg02, #8
2b77c     84 FE BF FD | 	call	#__system____builtin_atoi
2b780     FD 2A 02 F6 | 	mov	local03, result1
2b784                 | LR__3858
2b784                 | LR__3859
2b784                 | LR__3860
2b784                 | LR__3861
2b784     00 2E 0E F2 | 	cmp	local05, #0 wz
2b788     15 2B 62 56 |  if_ne	neg	local03, local03
2b78c     15 FB 01 F6 | 	mov	result1, local03
2b790     A7 F0 03 F6 | 	mov	ptra, fp
2b794     B2 00 A0 FD | 	call	#popregs_
2b798                 | __system____builtin_atoi_ret
2b798     2D 00 64 FD | 	ret
2b79c                 | 
2b79c                 | __system____builtin_atof
2b79c     07 4A 05 F6 | 	mov	COUNT_, #7
2b7a0     A8 00 A0 FD | 	call	#pushregs_
2b7a4     09 27 02 F6 | 	mov	local01, arg01
2b7a8     00 28 06 F6 | 	mov	local02, #0
2b7ac     00 2A 06 F6 | 	mov	local03, #0
2b7b0     00 2C 06 F6 | 	mov	local04, #0
2b7b4     00 2E 06 F6 | 	mov	local05, #0
2b7b8     97 08 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
2b7bc                 | LR__3870
2b7bc     13 17 C2 FA | 	rdbyte	arg03, local01
2b7c0     20 16 0E F2 | 	cmp	arg03, #32 wz
2b7c4     01 26 06 A1 |  if_e	add	local01, #1
2b7c8     F0 FF 9F AD |  if_e	jmp	#LR__3870
2b7cc                 | LR__3871
2b7cc     13 31 C2 FA | 	rdbyte	local06, local01
2b7d0                 | LR__3872
2b7d0     2B 30 0E F2 | 	cmp	local06, #43 wz
2b7d4     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
2b7d8     14 00 90 5D |  if_ne	jmp	#LR__3873
2b7dc     2D 30 0E F2 | 	cmp	local06, #45 wz
2b7e0     1F 2C E6 A4 |  if_e	bitnot	local04, #31
2b7e4     01 26 06 F1 | 	add	local01, #1
2b7e8     13 31 C2 FA | 	rdbyte	local06, local01
2b7ec     E0 FF 9F FD | 	jmp	#LR__3872
2b7f0                 | LR__3873
2b7f0                 | LR__3874
2b7f0     97 08 48 FB | 	callpa	#(@LR__3876-@LR__3875)>>2,fcache_load_ptr_
2b7f4                 | LR__3875
2b7f4     13 31 C2 FA | 	rdbyte	local06, local01
2b7f8     5F 30 0E F2 | 	cmp	local06, #95 wz
2b7fc     01 26 06 F1 | 	add	local01, #1
2b800     F0 FF 9F AD |  if_e	jmp	#LR__3875
2b804                 | LR__3876
2b804     00 30 0E F2 | 	cmp	local06, #0 wz
2b808     5C 00 90 AD |  if_e	jmp	#LR__3878
2b80c     30 30 56 F2 | 	cmps	local06, #48 wc
2b810     44 00 90 CD |  if_b	jmp	#LR__3877
2b814     3A 30 56 F2 | 	cmps	local06, #58 wc
2b818     3C 00 90 3D |  if_ae	jmp	#LR__3877
2b81c     14 13 02 F6 | 	mov	arg01, local02
2b820     00 90 20 FF 
2b824     00 14 06 F6 | 	mov	arg02, ##1092616192
2b828     60 F7 BF FD | 	call	#__system___float_mul
2b82c     FD 28 02 F6 | 	mov	local02, result1
2b830     30 30 86 F1 | 	sub	local06, #48
2b834     18 13 02 F6 | 	mov	arg01, local06
2b838     4C F3 BF FD | 	call	#__system___float_fromuns
2b83c     FD 14 02 F6 | 	mov	arg02, result1
2b840     14 13 02 F6 | 	mov	arg01, local02
2b844     74 F3 BF FD | 	call	#__system___float_add
2b848     FD 28 02 F6 | 	mov	local02, result1
2b84c     00 2E 0E F2 | 	cmp	local05, #0 wz
2b850     01 2A 86 51 |  if_ne	sub	local03, #1
2b854     98 FF 9F FD | 	jmp	#LR__3874
2b858                 | LR__3877
2b858     2E 30 0E F2 | 	cmp	local06, #46 wz
2b85c     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2b860     01 2E 06 A6 |  if_e	mov	local05, #1
2b864     88 FF 9F AD |  if_e	jmp	#LR__3874
2b868                 | LR__3878
2b868     45 30 0E F2 | 	cmp	local06, #69 wz
2b86c     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2b870     18 00 90 5D |  if_ne	jmp	#LR__3879
2b874     13 13 02 F6 | 	mov	arg01, local01
2b878     00 14 06 F6 | 	mov	arg02, #0
2b87c     84 FD BF FD | 	call	#__system____builtin_atoi
2b880     15 FB 01 F1 | 	add	result1, local03
2b884     FD 32 02 F6 | 	mov	local07, result1
2b888     04 00 90 FD | 	jmp	#LR__3880
2b88c                 | LR__3879
2b88c     15 33 02 F6 | 	mov	local07, local03
2b890                 | LR__3880
2b890     19 17 02 F6 | 	mov	arg03, local07
2b894     14 13 02 F6 | 	mov	arg01, local02
2b898     00 90 20 FF 
2b89c     00 14 06 F6 | 	mov	arg02, ##1092616192
2b8a0     F4 06 B0 FD | 	call	#__system___float_pow_n
2b8a4     16 FB 61 F5 | 	xor	result1, local04
2b8a8     A7 F0 03 F6 | 	mov	ptra, fp
2b8ac     B2 00 A0 FD | 	call	#popregs_
2b8b0                 | __system____builtin_atof_ret
2b8b0     2D 00 64 FD | 	ret
2b8b4                 | 
2b8b4                 | __system____builtin_ilogb
2b8b4     F8 FB BF FD | 	call	#__system___float_Unpack
2b8b8     00 FE 0D F2 | 	cmp	result3, #0 wz
2b8bc     00 00 40 AF 
2b8c0     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
2b8c4     24 00 90 AD |  if_e	jmp	#LR__3891
2b8c8     80 FC 0D F2 | 	cmp	result2, #128 wz
2b8cc     18 00 90 5D |  if_ne	jmp	#LR__3890
2b8d0     00 00 10 FF 
2b8d4     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
2b8d8     1E FA CD A9 |  if_e	bmask	result1, #30
2b8dc     0C 00 90 AD |  if_e	jmp	#LR__3891
2b8e0     1F FA C5 F9 | 	decod	result1, #31
2b8e4     04 00 90 FD | 	jmp	#LR__3891
2b8e8                 | LR__3890
2b8e8     FE FA 01 F6 | 	mov	result1, result2
2b8ec                 | LR__3891
2b8ec                 | __system____builtin_ilogb_ret
2b8ec     2D 00 64 FD | 	ret
2b8f0                 | 
2b8f0                 | __system____builtin_sinf
2b8f0     03 4A 05 F6 | 	mov	COUNT_, #3
2b8f4     A8 00 A0 FD | 	call	#pushregs_
2b8f8     09 27 02 F6 | 	mov	local01, arg01
2b8fc     87 64 20 FF 
2b900     DB 15 06 F6 | 	mov	arg02, ##1086918619
2b904     88 F8 BF FD | 	call	#__system___float_div
2b908     FD 12 02 F6 | 	mov	arg01, result1
2b90c     00 14 06 F6 | 	mov	arg02, #0
2b910     40 FB BF FD | 	call	#__system___float_tointeger
2b914     FD 16 0A F6 | 	mov	arg03, result1 wz
2b918     44 00 90 AD |  if_e	jmp	#LR__3900
2b91c     0B 13 52 F6 | 	abs	arg01, arg03 wc
2b920     1F 28 C6 C9 |  if_b	decod	local02, #31
2b924     00 28 06 36 |  if_ae	mov	local02, #0
2b928     5C F2 BF FD | 	call	#__system___float_fromuns
2b92c     14 FB 61 F5 | 	xor	result1, local02
2b930     FD 12 02 F6 | 	mov	arg01, result1
2b934     1E 14 C6 F9 | 	decod	arg02, #30
2b938     50 F6 BF FD | 	call	#__system___float_mul
2b93c     FD 12 02 F6 | 	mov	arg01, result1
2b940     87 24 20 FF 
2b944     DB 15 06 F6 | 	mov	arg02, ##1078530011
2b948     40 F6 BF FD | 	call	#__system___float_mul
2b94c     FD 14 02 F6 | 	mov	arg02, result1
2b950     13 13 02 F6 | 	mov	arg01, local01
2b954     1F 14 E6 F4 | 	bitnot	arg02, #31
2b958     60 F2 BF FD | 	call	#__system___float_add
2b95c     FD 26 02 F6 | 	mov	local01, result1
2b960                 | LR__3900
2b960     13 13 02 F6 | 	mov	arg01, local01
2b964     66 E6 1E FF 
2b968     CD 14 06 F6 | 	mov	arg02, ##1036831949
2b96c     01 16 06 F6 | 	mov	arg03, #1
2b970     4C FA BF FD | 	call	#__system___float_cmp
2b974     00 FA 55 F2 | 	cmps	result1, #0 wc
2b978     5C 00 90 3D |  if_ae	jmp	#LR__3901
2b97c     13 13 02 F6 | 	mov	arg01, local01
2b980     66 E6 5E FF 
2b984     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2b988     01 16 66 F6 | 	neg	arg03, #1
2b98c     30 FA BF FD | 	call	#__system___float_cmp
2b990     01 FA 55 F2 | 	cmps	result1, #1 wc
2b994     40 00 90 CD |  if_b	jmp	#LR__3901
2b998     13 13 02 F6 | 	mov	arg01, local01
2b99c     13 15 02 F6 | 	mov	arg02, local01
2b9a0     E8 F5 BF FD | 	call	#__system___float_mul
2b9a4     FD 12 02 F6 | 	mov	arg01, result1
2b9a8     13 15 02 F6 | 	mov	arg02, local01
2b9ac     DC F5 BF FD | 	call	#__system___float_mul
2b9b0     FD 12 02 F6 | 	mov	arg01, result1
2b9b4     00 60 20 FF 
2b9b8     00 14 06 F6 | 	mov	arg02, ##1086324736
2b9bc     D0 F7 BF FD | 	call	#__system___float_div
2b9c0     FD 14 02 F6 | 	mov	arg02, result1
2b9c4     13 13 02 F6 | 	mov	arg01, local01
2b9c8     1F 14 E6 F4 | 	bitnot	arg02, #31
2b9cc     EC F1 BF FD | 	call	#__system___float_add
2b9d0     FD 2A 02 F6 | 	mov	local03, result1
2b9d4     54 00 90 FD | 	jmp	#LR__3902
2b9d8                 | LR__3901
2b9d8     13 13 02 F6 | 	mov	arg01, local01
2b9dc     7C 91 26 FF 
2b9e0     83 15 06 F6 | 	mov	arg02, ##1294137731
2b9e4     A4 F5 BF FD | 	call	#__system___float_mul
2b9e8     FD 12 02 F6 | 	mov	arg01, result1
2b9ec     00 14 06 F6 | 	mov	arg02, #0
2b9f0     60 FA BF FD | 	call	#__system___float_tointeger
2b9f4     02 FA 65 F0 | 	shl	result1, #2
2b9f8     00 00 A0 FF 
2b9fc     FD 00 48 FD | 	qrotate	##1073741824, result1
2ba00     19 12 62 FD | 	getqy	arg01
2ba04     09 13 52 F6 | 	abs	arg01, arg01 wc
2ba08     1F 28 C6 C9 |  if_b	decod	local02, #31
2ba0c     00 28 06 36 |  if_ae	mov	local02, #0
2ba10     74 F1 BF FD | 	call	#__system___float_fromuns
2ba14     14 FB 61 F5 | 	xor	result1, local02
2ba18     FD 12 02 F6 | 	mov	arg01, result1
2ba1c     00 40 27 FF 
2ba20     00 14 06 F6 | 	mov	arg02, ##1317011456
2ba24     68 F7 BF FD | 	call	#__system___float_div
2ba28     FD 2A 02 F6 | 	mov	local03, result1
2ba2c                 | LR__3902
2ba2c     15 FB 01 F6 | 	mov	result1, local03
2ba30     A7 F0 03 F6 | 	mov	ptra, fp
2ba34     B2 00 A0 FD | 	call	#popregs_
2ba38                 | __system____builtin_sinf_ret
2ba38     2D 00 64 FD | 	ret
2ba3c                 | 
2ba3c                 | __system____builtin_tanf
2ba3c     02 4A 05 F6 | 	mov	COUNT_, #2
2ba40     A8 00 A0 FD | 	call	#pushregs_
2ba44     09 27 02 F6 | 	mov	local01, arg01
2ba48     A4 FE BF FD | 	call	#__system____builtin_sinf
2ba4c     FD 28 02 F6 | 	mov	local02, result1
2ba50     13 15 02 F6 | 	mov	arg02, local01
2ba54     87 E4 1F FF 
2ba58     DB 13 06 F6 | 	mov	arg01, ##1070141403
2ba5c     1F 14 E6 F4 | 	bitnot	arg02, #31
2ba60     58 F1 BF FD | 	call	#__system___float_add
2ba64     FD 12 02 F6 | 	mov	arg01, result1
2ba68     84 FE BF FD | 	call	#__system____builtin_sinf
2ba6c     FD 14 02 F6 | 	mov	arg02, result1
2ba70     14 13 02 F6 | 	mov	arg01, local02
2ba74     18 F7 BF FD | 	call	#__system___float_div
2ba78     A7 F0 03 F6 | 	mov	ptra, fp
2ba7c     B2 00 A0 FD | 	call	#popregs_
2ba80                 | __system____builtin_tanf_ret
2ba80     2D 00 64 FD | 	ret
2ba84                 | 
2ba84                 | __system____builtin_asinf
2ba84     01 4A 05 F6 | 	mov	COUNT_, #1
2ba88     A8 00 A0 FD | 	call	#pushregs_
2ba8c     09 27 02 F6 | 	mov	local01, arg01
2ba90     13 15 02 F6 | 	mov	arg02, local01
2ba94     13 13 02 F6 | 	mov	arg01, local01
2ba98     F0 F4 BF FD | 	call	#__system___float_mul
2ba9c     FD 14 02 F6 | 	mov	arg02, result1
2baa0     00 C0 1F FF 
2baa4     00 12 06 F6 | 	mov	arg01, ##1065353216
2baa8     1F 14 E6 F4 | 	bitnot	arg02, #31
2baac     0C F1 BF FD | 	call	#__system___float_add
2bab0     FD 12 02 F6 | 	mov	arg01, result1
2bab4     FC F3 BF FD | 	call	#__system___float_sqrt
2bab8     FD 14 02 F6 | 	mov	arg02, result1
2babc     13 13 02 F6 | 	mov	arg01, local01
2bac0     58 00 B0 FD | 	call	#__system____builtin_atan2f
2bac4     A7 F0 03 F6 | 	mov	ptra, fp
2bac8     B2 00 A0 FD | 	call	#popregs_
2bacc                 | __system____builtin_asinf_ret
2bacc     2D 00 64 FD | 	ret
2bad0                 | 
2bad0                 | __system____builtin_acosf
2bad0     01 4A 05 F6 | 	mov	COUNT_, #1
2bad4     A8 00 A0 FD | 	call	#pushregs_
2bad8     09 27 02 F6 | 	mov	local01, arg01
2badc     13 15 02 F6 | 	mov	arg02, local01
2bae0     13 13 02 F6 | 	mov	arg01, local01
2bae4     A4 F4 BF FD | 	call	#__system___float_mul
2bae8     FD 14 02 F6 | 	mov	arg02, result1
2baec     00 C0 1F FF 
2baf0     00 12 06 F6 | 	mov	arg01, ##1065353216
2baf4     1F 14 E6 F4 | 	bitnot	arg02, #31
2baf8     C0 F0 BF FD | 	call	#__system___float_add
2bafc     FD 12 02 F6 | 	mov	arg01, result1
2bb00     B0 F3 BF FD | 	call	#__system___float_sqrt
2bb04     FD 12 02 F6 | 	mov	arg01, result1
2bb08     13 15 02 F6 | 	mov	arg02, local01
2bb0c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2bb10     A7 F0 03 F6 | 	mov	ptra, fp
2bb14     B2 00 A0 FD | 	call	#popregs_
2bb18                 | __system____builtin_acosf_ret
2bb18     2D 00 64 FD | 	ret
2bb1c                 | 
2bb1c                 | __system____builtin_atan2f
2bb1c     04 4A 05 F6 | 	mov	COUNT_, #4
2bb20     A8 00 A0 FD | 	call	#pushregs_
2bb24     09 27 02 F6 | 	mov	local01, arg01
2bb28     0A 29 02 F6 | 	mov	local02, arg02
2bb2c     13 13 02 F6 | 	mov	arg01, local01
2bb30     00 14 06 F6 | 	mov	arg02, #0
2bb34     01 16 06 F6 | 	mov	arg03, #1
2bb38     84 F8 BF FD | 	call	#__system___float_cmp
2bb3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb40     28 00 90 5D |  if_ne	jmp	#LR__3910
2bb44     14 13 02 F6 | 	mov	arg01, local02
2bb48     00 14 06 F6 | 	mov	arg02, #0
2bb4c     01 16 06 F6 | 	mov	arg03, #1
2bb50     6C F8 BF FD | 	call	#__system___float_cmp
2bb54     00 FA 55 F2 | 	cmps	result1, #0 wc
2bb58     87 24 60 CF 
2bb5c     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2bb60     DC 00 90 CD |  if_b	jmp	#LR__3911
2bb64     00 FA 05 F6 | 	mov	result1, #0
2bb68     D4 00 90 FD | 	jmp	#LR__3911
2bb6c                 | LR__3910
2bb6c     14 13 02 F6 | 	mov	arg01, local02
2bb70     14 15 02 F6 | 	mov	arg02, local02
2bb74     14 F4 BF FD | 	call	#__system___float_mul
2bb78     FD 2A 02 F6 | 	mov	local03, result1
2bb7c     13 13 02 F6 | 	mov	arg01, local01
2bb80     13 15 02 F6 | 	mov	arg02, local01
2bb84     04 F4 BF FD | 	call	#__system___float_mul
2bb88     FD 14 02 F6 | 	mov	arg02, result1
2bb8c     15 13 02 F6 | 	mov	arg01, local03
2bb90     28 F0 BF FD | 	call	#__system___float_add
2bb94     FD 12 02 F6 | 	mov	arg01, result1
2bb98     18 F3 BF FD | 	call	#__system___float_sqrt
2bb9c     FD 2A 02 F6 | 	mov	local03, result1
2bba0     14 13 02 F6 | 	mov	arg01, local02
2bba4     15 15 02 F6 | 	mov	arg02, local03
2bba8     E4 F5 BF FD | 	call	#__system___float_div
2bbac     FD 28 02 F6 | 	mov	local02, result1
2bbb0     13 13 02 F6 | 	mov	arg01, local01
2bbb4     15 15 02 F6 | 	mov	arg02, local03
2bbb8     D4 F5 BF FD | 	call	#__system___float_div
2bbbc     FD 26 02 F6 | 	mov	local01, result1
2bbc0     00 40 27 FF 
2bbc4     00 12 06 F6 | 	mov	arg01, ##1317011456
2bbc8     14 15 02 F6 | 	mov	arg02, local02
2bbcc     BC F3 BF FD | 	call	#__system___float_mul
2bbd0     FD 12 02 F6 | 	mov	arg01, result1
2bbd4     00 14 06 F6 | 	mov	arg02, #0
2bbd8     78 F8 BF FD | 	call	#__system___float_tointeger
2bbdc     FD 2A 02 F6 | 	mov	local03, result1
2bbe0     00 40 27 FF 
2bbe4     00 12 06 F6 | 	mov	arg01, ##1317011456
2bbe8     13 15 02 F6 | 	mov	arg02, local01
2bbec     9C F3 BF FD | 	call	#__system___float_mul
2bbf0     FD 12 02 F6 | 	mov	arg01, result1
2bbf4     00 14 06 F6 | 	mov	arg02, #0
2bbf8     58 F8 BF FD | 	call	#__system___float_tointeger
2bbfc     FD 2A 52 FD | 	qvector	local03, result1
2bc00     87 24 20 FF 
2bc04     DB 2B 06 F6 | 	mov	local03, ##1078530011
2bc08     19 12 62 FD | 	getqy	arg01
2bc0c     01 12 C6 F0 | 	sar	arg01, #1
2bc10     09 13 52 F6 | 	abs	arg01, arg01 wc
2bc14     1F 2C C6 C9 |  if_b	decod	local04, #31
2bc18     00 2C 06 36 |  if_ae	mov	local04, #0
2bc1c     68 EF BF FD | 	call	#__system___float_fromuns
2bc20     16 FB 61 F5 | 	xor	result1, local04
2bc24     FD 12 02 F6 | 	mov	arg01, result1
2bc28     00 40 27 FF 
2bc2c     00 14 06 F6 | 	mov	arg02, ##1317011456
2bc30     5C F5 BF FD | 	call	#__system___float_div
2bc34     FD 14 02 F6 | 	mov	arg02, result1
2bc38     15 13 02 F6 | 	mov	arg01, local03
2bc3c     4C F3 BF FD | 	call	#__system___float_mul
2bc40                 | LR__3911
2bc40     A7 F0 03 F6 | 	mov	ptra, fp
2bc44     B2 00 A0 FD | 	call	#popregs_
2bc48                 | __system____builtin_atan2f_ret
2bc48     2D 00 64 FD | 	ret
2bc4c                 | 
2bc4c                 | __system____builtin_exp2f
2bc4c     04 4A 05 F6 | 	mov	COUNT_, #4
2bc50     A8 00 A0 FD | 	call	#pushregs_
2bc54     09 27 02 F6 | 	mov	local01, arg01
2bc58     00 7F 21 FF 
2bc5c     00 14 06 F6 | 	mov	arg02, ##1123942400
2bc60     01 16 66 F6 | 	neg	arg03, #1
2bc64     58 F7 BF FD | 	call	#__system___float_cmp
2bc68     00 FA 55 F2 | 	cmps	result1, #0 wc
2bc6c     00 C0 3F 3F 
2bc70     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2bc74     DC 00 90 3D |  if_ae	jmp	#LR__3921
2bc78     13 13 02 F6 | 	mov	arg01, local01
2bc7c     00 7F 61 FF 
2bc80     00 14 06 F6 | 	mov	arg02, ##-1023541248
2bc84     01 16 06 F6 | 	mov	arg03, #1
2bc88     34 F7 BF FD | 	call	#__system___float_cmp
2bc8c     00 FA 55 F2 | 	cmps	result1, #0 wc
2bc90     00 FA 05 C6 |  if_b	mov	result1, #0
2bc94     BC 00 90 CD |  if_b	jmp	#LR__3921
2bc98     13 13 02 F6 | 	mov	arg01, local01
2bc9c     00 14 06 F6 | 	mov	arg02, #0
2bca0     B0 F7 BF FD | 	call	#__system___float_tointeger
2bca4     FD 28 02 F6 | 	mov	local02, result1
2bca8     14 13 52 F6 | 	abs	arg01, local02 wc
2bcac     1F 2A C6 C9 |  if_b	decod	local03, #31
2bcb0     00 2A 06 36 |  if_ae	mov	local03, #0
2bcb4     D0 EE BF FD | 	call	#__system___float_fromuns
2bcb8     15 FB 61 F5 | 	xor	result1, local03
2bcbc     FD 14 02 F6 | 	mov	arg02, result1
2bcc0     13 13 02 F6 | 	mov	arg01, local01
2bcc4     1F 14 E6 F4 | 	bitnot	arg02, #31
2bcc8     F0 EE BF FD | 	call	#__system___float_add
2bccc     FD 2C 02 F6 | 	mov	local04, result1
2bcd0     16 13 02 F6 | 	mov	arg01, local04
2bcd4     00 14 06 F6 | 	mov	arg02, #0
2bcd8     01 16 06 F6 | 	mov	arg03, #1
2bcdc     E0 F6 BF FD | 	call	#__system___float_cmp
2bce0     00 FA 55 F2 | 	cmps	result1, #0 wc
2bce4     18 00 90 3D |  if_ae	jmp	#LR__3920
2bce8     16 13 02 F6 | 	mov	arg01, local04
2bcec     00 C0 1F FF 
2bcf0     00 14 06 F6 | 	mov	arg02, ##1065353216
2bcf4     C4 EE BF FD | 	call	#__system___float_add
2bcf8     FD 2C 02 F6 | 	mov	local04, result1
2bcfc     01 28 86 F1 | 	sub	local02, #1
2bd00                 | LR__3920
2bd00     7F 28 06 F1 | 	add	local02, #127
2bd04     17 28 66 F0 | 	shl	local02, #23
2bd08     16 13 02 F6 | 	mov	arg01, local04
2bd0c     00 80 26 FF 
2bd10     00 14 06 F6 | 	mov	arg02, ##1291845632
2bd14     74 F2 BF FD | 	call	#__system___float_mul
2bd18     FD 12 02 F6 | 	mov	arg01, result1
2bd1c     00 14 06 F6 | 	mov	arg02, #0
2bd20     30 F7 BF FD | 	call	#__system___float_tointeger
2bd24     FD 2C 0A F6 | 	mov	local04, result1 wz
2bd28     14 FB 01 A6 |  if_e	mov	result1, local02
2bd2c     24 00 90 AD |  if_e	jmp	#LR__3921
2bd30     3E 2C 26 F4 | 	bith	local04, #62
2bd34     0F 2C 62 FD | 	qexp	local04
2bd38     14 13 02 F6 | 	mov	arg01, local02
2bd3c     18 14 62 FD | 	getqx	arg02
2bd40     01 14 06 F1 | 	add	arg02, #1
2bd44     01 14 46 F0 | 	shr	arg02, #1
2bd48     00 80 1F FF 
2bd4c     00 14 06 F1 | 	add	arg02, ##1056964608
2bd50     38 F2 BF FD | 	call	#__system___float_mul
2bd54                 | LR__3921
2bd54     A7 F0 03 F6 | 	mov	ptra, fp
2bd58     B2 00 A0 FD | 	call	#popregs_
2bd5c                 | __system____builtin_exp2f_ret
2bd5c     2D 00 64 FD | 	ret
2bd60                 | 
2bd60                 | __system____builtin_log2f
2bd60     06 4A 05 F6 | 	mov	COUNT_, #6
2bd64     A8 00 A0 FD | 	call	#pushregs_
2bd68     09 27 02 F6 | 	mov	local01, arg01
2bd6c     09 29 0A F6 | 	mov	local02, arg01 wz
2bd70     00 00 40 5F 
2bd74     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2bd78     00 40 00 AF 
2bd7c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2bd80     08 01 90 AD |  if_e	jmp	#LR__3934
2bd84     00 28 56 F2 | 	cmps	local02, #0 wc
2bd88     00 E0 3F CF 
2bd8c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2bd90     F8 00 90 CD |  if_b	jmp	#LR__3934
2bd94     13 13 02 F6 | 	mov	arg01, local01
2bd98     00 90 20 FF 
2bd9c     00 14 06 F6 | 	mov	arg02, ##1092616192
2bda0     01 16 06 F6 | 	mov	arg03, #1
2bda4     18 F6 BF FD | 	call	#__system___float_cmp
2bda8     00 FA 0D F2 | 	cmp	result1, #0 wz
2bdac     4D 2A 20 AF 
2bdb0     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2bdb4     D4 00 90 AD |  if_e	jmp	#LR__3934
2bdb8     13 13 02 F6 | 	mov	arg01, local01
2bdbc     FC 16 20 FF 
2bdc0     54 14 06 F6 | 	mov	arg02, ##1076754516
2bdc4     01 16 06 F6 | 	mov	arg03, #1
2bdc8     F4 F5 BF FD | 	call	#__system___float_cmp
2bdcc     00 FA 0D F2 | 	cmp	result1, #0 wz
2bdd0     55 DC 1F AF 
2bdd4     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2bdd8     B0 00 90 AD |  if_e	jmp	#LR__3934
2bddc     14 2B 02 F6 | 	mov	local03, local02
2bde0     17 2A 46 F0 | 	shr	local03, #23
2bde4     15 2B E2 F8 | 	getbyte	local03, local03, #0
2bde8     17 29 06 F4 | 	bitl	local02, #279
2bdec     14 2D 02 F6 | 	mov	local04, local02
2bdf0     FF 2A 0E F2 | 	cmp	local03, #255 wz
2bdf4     1C 00 90 5D |  if_ne	jmp	#LR__3930
2bdf8     00 2C 0E F2 | 	cmp	local04, #0 wz
2bdfc     00 C0 3F 5F 
2be00     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2be04     00 E0 3F AF 
2be08     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2be0c     17 FB 01 F6 | 	mov	result1, local05
2be10     78 00 90 FD | 	jmp	#LR__3934
2be14                 | LR__3930
2be14     00 2A 0E F2 | 	cmp	local03, #0 wz
2be18     17 2C 26 54 |  if_ne	bith	local04, #23
2be1c     7F 2A 86 51 |  if_ne	sub	local03, #127
2be20     28 00 90 5D |  if_ne	jmp	#LR__3933
2be24     00 2C 0E F2 | 	cmp	local04, #0 wz
2be28     00 40 00 AF 
2be2c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2be30     58 00 90 AD |  if_e	jmp	#LR__3934
2be34     7E 2A 66 F6 | 	neg	local03, #126
2be38     97 08 48 FB | 	callpa	#(@LR__3932-@LR__3931)>>2,fcache_load_ptr_
2be3c                 | LR__3931
2be3c     17 2C 2E F4 | 	testbn	local04, #23 wz
2be40     01 2C 66 A0 |  if_e	shl	local04, #1
2be44     01 2A 06 A1 |  if_e	add	local03, #1
2be48     F0 FF 9F AD |  if_e	jmp	#LR__3931
2be4c                 | LR__3932
2be4c                 | LR__3933
2be4c     0E 2C 62 FD | 	qlog	local04
2be50     01 2A 86 F1 | 	sub	local03, #1
2be54     15 13 52 F6 | 	abs	arg01, local03 wc
2be58     1F 30 C6 C9 |  if_b	decod	local06, #31
2be5c     00 30 06 36 |  if_ae	mov	local06, #0
2be60     18 2E 62 FD | 	getqx	local05
2be64     9B 2E 06 F4 | 	bitl	local05, #155
2be68     08 2E 06 F1 | 	add	local05, #8
2be6c     04 2E 46 F0 | 	shr	local05, #4
2be70     00 C0 1F FF 
2be74     00 2E 06 F1 | 	add	local05, ##1065353216
2be78     0C ED BF FD | 	call	#__system___float_fromuns
2be7c     18 FB 61 F5 | 	xor	result1, local06
2be80     FD 14 02 F6 | 	mov	arg02, result1
2be84     17 13 02 F6 | 	mov	arg01, local05
2be88     30 ED BF FD | 	call	#__system___float_add
2be8c                 | LR__3934
2be8c     A7 F0 03 F6 | 	mov	ptra, fp
2be90     B2 00 A0 FD | 	call	#popregs_
2be94                 | __system____builtin_log2f_ret
2be94     2D 00 64 FD | 	ret
2be98                 | 
2be98                 | __system____builtin_powf
2be98     04 4A 05 F6 | 	mov	COUNT_, #4
2be9c     A8 00 A0 FD | 	call	#pushregs_
2bea0     09 27 02 F6 | 	mov	local01, arg01
2bea4     0A 29 02 F6 | 	mov	local02, arg02
2bea8     14 13 02 F6 | 	mov	arg01, local02
2beac     00 14 06 F6 | 	mov	arg02, #0
2beb0     A0 F5 BF FD | 	call	#__system___float_tointeger
2beb4     FD 2A 02 F6 | 	mov	local03, result1
2beb8     15 13 52 F6 | 	abs	arg01, local03 wc
2bebc     1F 2C C6 C9 |  if_b	decod	local04, #31
2bec0     00 2C 06 36 |  if_ae	mov	local04, #0
2bec4     C0 EC BF FD | 	call	#__system___float_fromuns
2bec8     16 FB 61 F5 | 	xor	result1, local04
2becc     FD 12 02 F6 | 	mov	arg01, result1
2bed0     14 15 02 F6 | 	mov	arg02, local02
2bed4     01 16 06 F6 | 	mov	arg03, #1
2bed8     E4 F4 BF FD | 	call	#__system___float_cmp
2bedc     00 FA 0D F2 | 	cmp	result1, #0 wz
2bee0     18 00 90 5D |  if_ne	jmp	#LR__3940
2bee4     00 C0 1F FF 
2bee8     00 12 06 F6 | 	mov	arg01, ##1065353216
2beec     13 15 02 F6 | 	mov	arg02, local01
2bef0     15 17 02 F6 | 	mov	arg03, local03
2bef4     A0 00 B0 FD | 	call	#__system___float_pow_n
2bef8     58 00 90 FD | 	jmp	#LR__3941
2befc                 | LR__3940
2befc     13 13 02 F6 | 	mov	arg01, local01
2bf00     00 14 06 F6 | 	mov	arg02, #0
2bf04     01 16 06 F6 | 	mov	arg03, #1
2bf08     B4 F4 BF FD | 	call	#__system___float_cmp
2bf0c     00 FA 55 F2 | 	cmps	result1, #0 wc
2bf10     00 E0 3F CF 
2bf14     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2bf18     38 00 90 CD |  if_b	jmp	#LR__3941
2bf1c     13 13 02 F6 | 	mov	arg01, local01
2bf20     00 14 06 F6 | 	mov	arg02, #0
2bf24     01 16 06 F6 | 	mov	arg03, #1
2bf28     94 F4 BF FD | 	call	#__system___float_cmp
2bf2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf30     00 FA 05 A6 |  if_e	mov	result1, #0
2bf34     1C 00 90 AD |  if_e	jmp	#LR__3941
2bf38     13 13 02 F6 | 	mov	arg01, local01
2bf3c     20 FE BF FD | 	call	#__system____builtin_log2f
2bf40     FD 12 02 F6 | 	mov	arg01, result1
2bf44     14 15 02 F6 | 	mov	arg02, local02
2bf48     40 F0 BF FD | 	call	#__system___float_mul
2bf4c     FD 12 02 F6 | 	mov	arg01, result1
2bf50     F8 FC BF FD | 	call	#__system____builtin_exp2f
2bf54                 | LR__3941
2bf54     A7 F0 03 F6 | 	mov	ptra, fp
2bf58     B2 00 A0 FD | 	call	#popregs_
2bf5c                 | __system____builtin_powf_ret
2bf5c     2D 00 64 FD | 	ret
2bf60                 | 
2bf60                 | __system____builtin_logbase
2bf60     02 4A 05 F6 | 	mov	COUNT_, #2
2bf64     A8 00 A0 FD | 	call	#pushregs_
2bf68     09 27 02 F6 | 	mov	local01, arg01
2bf6c     0A 13 02 F6 | 	mov	arg01, arg02
2bf70     EC FD BF FD | 	call	#__system____builtin_log2f
2bf74     FD 28 02 F6 | 	mov	local02, result1
2bf78     13 13 02 F6 | 	mov	arg01, local01
2bf7c     E0 FD BF FD | 	call	#__system____builtin_log2f
2bf80     FD 14 02 F6 | 	mov	arg02, result1
2bf84     14 13 02 F6 | 	mov	arg01, local02
2bf88     04 F2 BF FD | 	call	#__system___float_div
2bf8c     A7 F0 03 F6 | 	mov	ptra, fp
2bf90     B2 00 A0 FD | 	call	#popregs_
2bf94                 | __system____builtin_logbase_ret
2bf94     2D 00 64 FD | 	ret
2bf98                 | 
2bf98                 | __system___float_pow_n
2bf98     05 4A 05 F6 | 	mov	COUNT_, #5
2bf9c     A8 00 A0 FD | 	call	#pushregs_
2bfa0     09 27 02 F6 | 	mov	local01, arg01
2bfa4     0A 29 02 F6 | 	mov	local02, arg02
2bfa8     0B 2B 02 F6 | 	mov	local03, arg03
2bfac     00 2A 56 F2 | 	cmps	local03, #0 wc
2bfb0     18 00 90 3D |  if_ae	jmp	#LR__3950
2bfb4     01 2C 06 F6 | 	mov	local04, #1
2bfb8     15 2B 62 F6 | 	neg	local03, local03
2bfbc     00 2A 56 F2 | 	cmps	local03, #0 wc
2bfc0     00 FA 05 C6 |  if_b	mov	result1, #0
2bfc4     94 00 90 CD |  if_b	jmp	#LR__3958
2bfc8     04 00 90 FD | 	jmp	#LR__3951
2bfcc                 | LR__3950
2bfcc     00 2C 06 F6 | 	mov	local04, #0
2bfd0                 | LR__3951
2bfd0     00 C0 1F FF 
2bfd4     00 2E 06 F6 | 	mov	local05, ##1065353216
2bfd8                 | LR__3952
2bfd8     01 2A 56 F2 | 	cmps	local03, #1 wc
2bfdc     30 00 90 CD |  if_b	jmp	#LR__3954
2bfe0     01 2A CE F7 | 	test	local03, #1 wz
2bfe4     10 00 90 AD |  if_e	jmp	#LR__3953
2bfe8     17 13 02 F6 | 	mov	arg01, local05
2bfec     14 15 02 F6 | 	mov	arg02, local02
2bff0     98 EF BF FD | 	call	#__system___float_mul
2bff4     FD 2E 02 F6 | 	mov	local05, result1
2bff8                 | LR__3953
2bff8     01 2A C6 F0 | 	sar	local03, #1
2bffc     14 13 02 F6 | 	mov	arg01, local02
2c000     14 15 02 F6 | 	mov	arg02, local02
2c004     84 EF BF FD | 	call	#__system___float_mul
2c008     FD 28 02 F6 | 	mov	local02, result1
2c00c     C8 FF 9F FD | 	jmp	#LR__3952
2c010                 | LR__3954
2c010     00 2C 0E F2 | 	cmp	local04, #0 wz
2c014     14 00 90 AD |  if_e	jmp	#LR__3955
2c018     13 13 02 F6 | 	mov	arg01, local01
2c01c     17 15 02 F6 | 	mov	arg02, local05
2c020     6C F1 BF FD | 	call	#__system___float_div
2c024     FD 2E 02 F6 | 	mov	local05, result1
2c028     2C 00 90 FD | 	jmp	#LR__3957
2c02c                 | LR__3955
2c02c     13 13 02 F6 | 	mov	arg01, local01
2c030     00 C0 1F FF 
2c034     00 14 06 F6 | 	mov	arg02, ##1065353216
2c038     01 16 06 F6 | 	mov	arg03, #1
2c03c     80 F3 BF FD | 	call	#__system___float_cmp
2c040     00 FA 0D F2 | 	cmp	result1, #0 wz
2c044     10 00 90 AD |  if_e	jmp	#LR__3956
2c048     13 13 02 F6 | 	mov	arg01, local01
2c04c     17 15 02 F6 | 	mov	arg02, local05
2c050     38 EF BF FD | 	call	#__system___float_mul
2c054     FD 2E 02 F6 | 	mov	local05, result1
2c058                 | LR__3956
2c058                 | LR__3957
2c058     17 FB 01 F6 | 	mov	result1, local05
2c05c                 | LR__3958
2c05c     A7 F0 03 F6 | 	mov	ptra, fp
2c060     B2 00 A0 FD | 	call	#popregs_
2c064                 | __system___float_pow_n_ret
2c064     2D 00 64 FD | 	ret
2c068                 | 
2c068                 | __system___gc_ptrs
2c068     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2c06c     00 03 02 F6 | 	mov	_var02, _var01
2c070     BB 00 00 FF 
2c074     F8 02 06 F1 | 	add	_var02, ##95992
2c078     00 FD 09 FB | 	rdlong	result2, _var01 wz
2c07c     74 00 90 5D |  if_ne	jmp	#LR__3960
2c080     01 FD 01 F6 | 	mov	result2, _var02
2c084     00 FD 81 F1 | 	sub	result2, _var01
2c088     00 03 58 FC | 	wrword	#1, _var01
2c08c     00 FB 01 F6 | 	mov	result1, _var01
2c090     02 FA 05 F1 | 	add	result1, #2
2c094     36 00 80 FF 
2c098     FD 20 59 FC | 	wrword	##27792, result1
2c09c     00 FB 01 F6 | 	mov	result1, _var01
2c0a0     04 FA 05 F1 | 	add	result1, #4
2c0a4     FD 00 58 FC | 	wrword	#0, result1
2c0a8     00 FB 01 F6 | 	mov	result1, _var01
2c0ac     06 FA 05 F1 | 	add	result1, #6
2c0b0     FD 02 58 FC | 	wrword	#1, result1
2c0b4     10 00 06 F1 | 	add	_var01, #16
2c0b8     FE FC 51 F6 | 	abs	result2, result2 wc
2c0bc     04 FC 45 F0 | 	shr	result2, #4
2c0c0     FE FC 81 F6 | 	negc	result2, result2
2c0c4     00 FD 51 FC | 	wrword	result2, _var01
2c0c8     00 FD 01 F6 | 	mov	result2, _var01
2c0cc     02 FC 05 F1 | 	add	result2, #2
2c0d0     36 00 80 FF 
2c0d4     FE 1E 59 FC | 	wrword	##27791, result2
2c0d8     00 FD 01 F6 | 	mov	result2, _var01
2c0dc     04 FC 05 F1 | 	add	result2, #4
2c0e0     FE 00 58 FC | 	wrword	#0, result2
2c0e4     00 FD 01 F6 | 	mov	result2, _var01
2c0e8     06 FC 05 F1 | 	add	result2, #6
2c0ec     FE 00 58 FC | 	wrword	#0, result2
2c0f0     10 00 86 F1 | 	sub	_var01, #16
2c0f4                 | LR__3960
2c0f4     00 FB 01 F6 | 	mov	result1, _var01
2c0f8     01 FD 01 F6 | 	mov	result2, _var02
2c0fc                 | __system___gc_ptrs_ret
2c0fc     2D 00 64 FD | 	ret
2c100                 | 
2c100                 | __system___gc_tryalloc
2c100     0B 4A 05 F6 | 	mov	COUNT_, #11
2c104     A8 00 A0 FD | 	call	#pushregs_
2c108     09 27 02 F6 | 	mov	local01, arg01
2c10c     0A 29 02 F6 | 	mov	local02, arg02
2c110     54 FF BF FD | 	call	#__system___gc_ptrs
2c114     FD 2A 02 F6 | 	mov	local03, result1
2c118     FE 2C 02 F6 | 	mov	local04, result2
2c11c     15 2F 02 F6 | 	mov	local05, local03
2c120     00 30 06 F6 | 	mov	local06, #0
2c124     97 1E 48 FB | 	callpa	#(@LR__3971-@LR__3970)>>2,fcache_load_ptr_
2c128                 | LR__3970
2c128     17 33 02 F6 | 	mov	local07, local05
2c12c     06 2E 06 F1 | 	add	local05, #6
2c130     17 15 EA FA | 	rdword	arg02, local05 wz
2c134     15 13 02 F6 | 	mov	arg01, local03
2c138     00 FA 05 A6 |  if_e	mov	result1, #0
2c13c     04 14 66 50 |  if_ne	shl	arg02, #4
2c140     0A 13 02 51 |  if_ne	add	arg01, arg02
2c144     09 FB 01 56 |  if_ne	mov	result1, arg01
2c148     FD 2E 0A F6 | 	mov	local05, result1 wz
2c14c     17 31 E2 5A |  if_ne	rdword	local06, local05
2c150     00 2E 0E F2 | 	cmp	local05, #0 wz
2c154     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2c158     08 00 90 1D |  if_a	jmp	#LR__3972
2c15c     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2c160     C4 FF 9F 1D |  if_a	jmp	#LR__3970
2c164                 | LR__3971
2c164                 | LR__3972
2c164     00 2E 0E F2 | 	cmp	local05, #0 wz
2c168     17 FB 01 A6 |  if_e	mov	result1, local05
2c16c     3C 01 90 AD |  if_e	jmp	#LR__3975
2c170     17 FD 01 F6 | 	mov	result2, local05
2c174     06 FC 05 F1 | 	add	result2, #6
2c178     FE 34 E2 FA | 	rdword	local08, result2
2c17c     18 27 52 F2 | 	cmps	local01, local06 wc
2c180     C0 00 90 3D |  if_ae	jmp	#LR__3974
2c184     17 27 52 FC | 	wrword	local01, local05
2c188     17 13 02 F6 | 	mov	arg01, local05
2c18c     13 35 02 F6 | 	mov	local08, local01
2c190     04 34 66 F0 | 	shl	local08, #4
2c194     1A 13 02 F1 | 	add	arg01, local08
2c198     13 31 82 F1 | 	sub	local06, local01
2c19c     09 31 52 FC | 	wrword	local06, arg01
2c1a0     09 35 02 F6 | 	mov	local08, arg01
2c1a4     02 34 06 F1 | 	add	local08, #2
2c1a8     36 00 80 FF 
2c1ac     1A 1F 59 FC | 	wrword	##27791, local08
2c1b0     17 15 0A F6 | 	mov	arg02, local05 wz
2c1b4     00 FA 05 A6 |  if_e	mov	result1, #0
2c1b8     15 15 82 51 |  if_ne	sub	arg02, local03
2c1bc     04 14 46 50 |  if_ne	shr	arg02, #4
2c1c0     0A FB 01 56 |  if_ne	mov	result1, arg02
2c1c4     09 35 02 F6 | 	mov	local08, arg01
2c1c8     04 34 06 F1 | 	add	local08, #4
2c1cc     1A FB 51 FC | 	wrword	result1, local08
2c1d0     17 35 02 F6 | 	mov	local08, local05
2c1d4     06 34 06 F1 | 	add	local08, #6
2c1d8     09 15 02 F6 | 	mov	arg02, arg01
2c1dc     1A 35 E2 FA | 	rdword	local08, local08
2c1e0     06 14 06 F1 | 	add	arg02, #6
2c1e4     0A 35 52 FC | 	wrword	local08, arg02
2c1e8     09 37 02 F6 | 	mov	local09, arg01
2c1ec     1B 15 0A F6 | 	mov	arg02, local09 wz
2c1f0     00 FA 05 A6 |  if_e	mov	result1, #0
2c1f4     15 15 82 51 |  if_ne	sub	arg02, local03
2c1f8     04 14 46 50 |  if_ne	shr	arg02, #4
2c1fc     0A FB 01 56 |  if_ne	mov	result1, arg02
2c200     FD 34 02 F6 | 	mov	local08, result1
2c204     09 39 EA FA | 	rdword	local10, arg01 wz
2c208     00 FA 05 A6 |  if_e	mov	result1, #0
2c20c     04 38 66 50 |  if_ne	shl	local10, #4
2c210     1C 13 02 51 |  if_ne	add	arg01, local10
2c214     09 FB 01 56 |  if_ne	mov	result1, arg01
2c218     FD 3A 0A F6 | 	mov	local11, result1 wz
2c21c     24 00 90 AD |  if_e	jmp	#LR__3973
2c220     16 3B 52 F2 | 	cmps	local11, local04 wc
2c224     1C 00 90 3D |  if_ae	jmp	#LR__3973
2c228     1B 15 0A F6 | 	mov	arg02, local09 wz
2c22c     00 FA 05 A6 |  if_e	mov	result1, #0
2c230     15 15 82 51 |  if_ne	sub	arg02, local03
2c234     04 14 46 50 |  if_ne	shr	arg02, #4
2c238     0A FB 01 56 |  if_ne	mov	result1, arg02
2c23c     04 3A 06 F1 | 	add	local11, #4
2c240     1D FB 51 FC | 	wrword	result1, local11
2c244                 | LR__3973
2c244                 | LR__3974
2c244     06 32 06 F1 | 	add	local07, #6
2c248     19 35 52 FC | 	wrword	local08, local07
2c24c     36 00 00 FF 
2c250     80 36 06 F6 | 	mov	local09, ##27776
2c254     14 37 42 F5 | 	or	local09, local02
2c258     00 FA 05 F6 | 	mov	result1, #0
2c25c     01 FA 61 FD | 	cogid	result1
2c260     FD 36 42 F5 | 	or	local09, result1
2c264     17 3B 02 F6 | 	mov	local11, local05
2c268     02 3A 06 F1 | 	add	local11, #2
2c26c     1D 37 52 FC | 	wrword	local09, local11
2c270     15 37 02 F6 | 	mov	local09, local03
2c274     08 36 06 F1 | 	add	local09, #8
2c278     17 3B 02 F6 | 	mov	local11, local05
2c27c     1B 37 E2 FA | 	rdword	local09, local09
2c280     06 3A 06 F1 | 	add	local11, #6
2c284     1D 37 52 FC | 	wrword	local09, local11
2c288     17 15 0A F6 | 	mov	arg02, local05 wz
2c28c     00 FA 05 A6 |  if_e	mov	result1, #0
2c290     15 15 82 51 |  if_ne	sub	arg02, local03
2c294     04 14 46 50 |  if_ne	shr	arg02, #4
2c298     0A FB 01 56 |  if_ne	mov	result1, arg02
2c29c     08 2A 06 F1 | 	add	local03, #8
2c2a0     15 FB 51 FC | 	wrword	result1, local03
2c2a4     08 2E 06 F1 | 	add	local05, #8
2c2a8     17 FB 01 F6 | 	mov	result1, local05
2c2ac                 | LR__3975
2c2ac     A7 F0 03 F6 | 	mov	ptra, fp
2c2b0     B2 00 A0 FD | 	call	#popregs_
2c2b4                 | __system___gc_tryalloc_ret
2c2b4     2D 00 64 FD | 	ret
2c2b8                 | 
2c2b8                 | __system___gc_alloc_managed
2c2b8     01 4A 05 F6 | 	mov	COUNT_, #1
2c2bc     A8 00 A0 FD | 	call	#pushregs_
2c2c0     09 27 02 F6 | 	mov	local01, arg01
2c2c4     00 14 06 F6 | 	mov	arg02, #0
2c2c8     1C 00 B0 FD | 	call	#__system___gc_doalloc
2c2cc     FD 14 0A F6 | 	mov	arg02, result1 wz
2c2d0     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2c2d4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2c2d8     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2c2dc     A7 F0 03 F6 | 	mov	ptra, fp
2c2e0     B2 00 A0 FD | 	call	#popregs_
2c2e4                 | __system___gc_alloc_managed_ret
2c2e4     2D 00 64 FD | 	ret
2c2e8                 | 
2c2e8                 | __system___gc_doalloc
2c2e8     06 4A 05 F6 | 	mov	COUNT_, #6
2c2ec     A8 00 A0 FD | 	call	#pushregs_
2c2f0     09 27 0A F6 | 	mov	local01, arg01 wz
2c2f4     0A 29 02 F6 | 	mov	local02, arg02
2c2f8     00 FA 05 A6 |  if_e	mov	result1, #0
2c2fc     8C 00 90 AD |  if_e	jmp	#LR__3987
2c300     17 26 06 F1 | 	add	local01, #23
2c304     0F 26 26 F5 | 	andn	local01, #15
2c308     04 26 46 F0 | 	shr	local01, #4
2c30c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2c310     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2c314     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2c318     F4 BD BF FD | 	call	#__system___lockmem
2c31c     13 13 02 F6 | 	mov	arg01, local01
2c320     14 15 02 F6 | 	mov	arg02, local02
2c324     D8 FD BF FD | 	call	#__system___gc_tryalloc
2c328     FD 2A 0A F6 | 	mov	local03, result1 wz
2c32c     14 00 90 5D |  if_ne	jmp	#LR__3980
2c330     70 03 B0 FD | 	call	#__system___gc_docollect
2c334     13 13 02 F6 | 	mov	arg01, local01
2c338     14 15 02 F6 | 	mov	arg02, local02
2c33c     C0 FD BF FD | 	call	#__system___gc_tryalloc
2c340     FD 2A 02 F6 | 	mov	local03, result1
2c344                 | LR__3980
2c344     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2c348     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2c34c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2c350     09 01 68 FC | 	wrlong	#0, arg01
2c354     00 2A 0E F2 | 	cmp	local03, #0 wz
2c358     2C 00 90 AD |  if_e	jmp	#LR__3986
2c35c     04 26 66 F0 | 	shl	local01, #4
2c360     08 26 86 F1 | 	sub	local01, #8
2c364     13 2D 52 F6 | 	abs	local04, local01 wc
2c368     02 2C 46 F0 | 	shr	local04, #2
2c36c     16 2F 8A F6 | 	negc	local05, local04 wz
2c370     15 31 02 F6 | 	mov	local06, local03
2c374     10 00 90 AD |  if_e	jmp	#LR__3985
2c378     97 06 48 FB | 	callpa	#(@LR__3983-@LR__3981)>>2,fcache_load_ptr_
2c37c                 | LR__3981
2c37c     17 05 D8 FC | 	rep	@LR__3984, local05
2c380                 | LR__3982
2c380     18 01 68 FC | 	wrlong	#0, local06
2c384     04 30 06 F1 | 	add	local06, #4
2c388                 | LR__3983
2c388                 | LR__3984
2c388                 | LR__3985
2c388                 | LR__3986
2c388     15 FB 01 F6 | 	mov	result1, local03
2c38c                 | LR__3987
2c38c     A7 F0 03 F6 | 	mov	ptra, fp
2c390     B2 00 A0 FD | 	call	#popregs_
2c394                 | __system___gc_doalloc_ret
2c394     2D 00 64 FD | 	ret
2c398                 | 
2c398                 | __system___gc_isvalidptr
2c398     F8 16 06 F4 | 	bitl	arg03, #248
2c39c     08 16 86 F1 | 	sub	arg03, #8
2c3a0     09 17 52 F2 | 	cmps	arg03, arg01 wc
2c3a4     08 00 90 CD |  if_b	jmp	#LR__3990
2c3a8     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2c3ac     08 00 90 CD |  if_b	jmp	#LR__3991
2c3b0                 | LR__3990
2c3b0     00 FA 05 F6 | 	mov	result1, #0
2c3b4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2c3b8                 | LR__3991
2c3b8     0B 01 02 F6 | 	mov	_var01, arg03
2c3bc     09 01 62 F5 | 	xor	_var01, arg01
2c3c0     0F 00 CE F7 | 	test	_var01, #15 wz
2c3c4     00 FA 05 56 |  if_ne	mov	result1, #0
2c3c8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2c3cc     0B 01 02 F6 | 	mov	_var01, arg03
2c3d0     02 00 06 F1 | 	add	_var01, #2
2c3d4     00 01 E2 FA | 	rdword	_var01, _var01
2c3d8     7F 00 00 FF 
2c3dc     C0 01 06 F5 | 	and	_var01, ##65472
2c3e0     36 00 00 FF 
2c3e4     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2c3e8     00 FA 05 56 |  if_ne	mov	result1, #0
2c3ec     0B FB 01 A6 |  if_e	mov	result1, arg03
2c3f0                 | __system___gc_isvalidptr_ret
2c3f0     2D 00 64 FD | 	ret
2c3f4                 | 
2c3f4                 | __system___gc_free
2c3f4     09 17 02 F6 | 	mov	arg03, arg01
2c3f8     6C FC BF FD | 	call	#__system___gc_ptrs
2c3fc     FD 12 02 F6 | 	mov	arg01, result1
2c400     FE 14 02 F6 | 	mov	arg02, result2
2c404     90 FF BF FD | 	call	#__system___gc_isvalidptr
2c408     FD 14 0A F6 | 	mov	arg02, result1 wz
2c40c     28 00 90 AD |  if_e	jmp	#LR__4000
2c410     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2c414     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2c418     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2c41c     F0 BC BF FD | 	call	#__system___lockmem
2c420     0A 13 02 F6 | 	mov	arg01, arg02
2c424     14 00 B0 FD | 	call	#__system___gc_dofree
2c428     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2c42c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2c430     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2c434     09 01 68 FC | 	wrlong	#0, arg01
2c438                 | LR__4000
2c438                 | __system___gc_free_ret
2c438     2D 00 64 FD | 	ret
2c43c                 | 
2c43c                 | __system___gc_dofree
2c43c     06 4A 05 F6 | 	mov	COUNT_, #6
2c440     A8 00 A0 FD | 	call	#pushregs_
2c444     09 27 02 F6 | 	mov	local01, arg01
2c448     1C FC BF FD | 	call	#__system___gc_ptrs
2c44c     FD 28 02 F6 | 	mov	local02, result1
2c450     FE 2A 02 F6 | 	mov	local03, result2
2c454     13 15 02 F6 | 	mov	arg02, local01
2c458     02 14 06 F1 | 	add	arg02, #2
2c45c     36 00 80 FF 
2c460     0A 1F 59 FC | 	wrword	##27791, arg02
2c464     13 2D 02 F6 | 	mov	local04, local01
2c468     13 13 02 F6 | 	mov	arg01, local01
2c46c     09 2F EA FA | 	rdword	local05, arg01 wz
2c470     00 FA 05 A6 |  if_e	mov	result1, #0
2c474     04 2E 66 50 |  if_ne	shl	local05, #4
2c478     17 13 02 51 |  if_ne	add	arg01, local05
2c47c     09 FB 01 56 |  if_ne	mov	result1, arg01
2c480     FD 30 02 F6 | 	mov	local06, result1
2c484     97 24 48 FB | 	callpa	#(@LR__4011-@LR__4010)>>2,fcache_load_ptr_
2c488                 | LR__4010
2c488     04 2C 06 F1 | 	add	local04, #4
2c48c     16 15 EA FA | 	rdword	arg02, local04 wz
2c490     14 13 02 F6 | 	mov	arg01, local02
2c494     00 FA 05 A6 |  if_e	mov	result1, #0
2c498     04 14 66 50 |  if_ne	shl	arg02, #4
2c49c     0A 13 02 51 |  if_ne	add	arg01, arg02
2c4a0     09 FB 01 56 |  if_ne	mov	result1, arg01
2c4a4     FD 2C 0A F6 | 	mov	local04, result1 wz
2c4a8     24 00 90 AD |  if_e	jmp	#LR__4012
2c4ac     16 13 02 F6 | 	mov	arg01, local04
2c4b0     00 FA 05 F6 | 	mov	result1, #0
2c4b4     02 12 06 F1 | 	add	arg01, #2
2c4b8     09 13 E2 FA | 	rdword	arg01, arg01
2c4bc     36 00 00 FF 
2c4c0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2c4c4     01 FA 65 A6 |  if_e	neg	result1, #1
2c4c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c4cc     B8 FF 9F AD |  if_e	jmp	#LR__4010
2c4d0                 | LR__4011
2c4d0                 | LR__4012
2c4d0     00 2C 0E F2 | 	cmp	local04, #0 wz
2c4d4     14 2D 02 A6 |  if_e	mov	local04, local02
2c4d8     16 15 02 F6 | 	mov	arg02, local04
2c4dc     06 14 06 F1 | 	add	arg02, #6
2c4e0     13 13 02 F6 | 	mov	arg01, local01
2c4e4     0A 15 E2 FA | 	rdword	arg02, arg02
2c4e8     06 12 06 F1 | 	add	arg01, #6
2c4ec     09 15 52 FC | 	wrword	arg02, arg01
2c4f0     13 15 0A F6 | 	mov	arg02, local01 wz
2c4f4     00 FA 05 A6 |  if_e	mov	result1, #0
2c4f8     14 15 82 51 |  if_ne	sub	arg02, local02
2c4fc     04 14 46 50 |  if_ne	shr	arg02, #4
2c500     0A FB 01 56 |  if_ne	mov	result1, arg02
2c504     16 15 02 F6 | 	mov	arg02, local04
2c508     06 14 06 F1 | 	add	arg02, #6
2c50c     0A FB 51 FC | 	wrword	result1, arg02
2c510     14 2D 0A F2 | 	cmp	local04, local02 wz
2c514     A4 00 90 AD |  if_e	jmp	#LR__4015
2c518     16 13 02 F6 | 	mov	arg01, local04
2c51c     09 2F EA FA | 	rdword	local05, arg01 wz
2c520     00 FA 05 A6 |  if_e	mov	result1, #0
2c524     04 2E 66 50 |  if_ne	shl	local05, #4
2c528     17 13 02 51 |  if_ne	add	arg01, local05
2c52c     09 FB 01 56 |  if_ne	mov	result1, arg01
2c530     13 FB 09 F2 | 	cmp	result1, local01 wz
2c534     84 00 90 5D |  if_ne	jmp	#LR__4014
2c538     16 31 E2 FA | 	rdword	local06, local04
2c53c     13 15 E2 FA | 	rdword	arg02, local01
2c540     0A 31 02 F1 | 	add	local06, arg02
2c544     16 31 52 FC | 	wrword	local06, local04
2c548     13 31 02 F6 | 	mov	local06, local01
2c54c     02 30 06 F1 | 	add	local06, #2
2c550     18 01 58 FC | 	wrword	#0, local06
2c554     13 13 02 F6 | 	mov	arg01, local01
2c558     09 2F EA FA | 	rdword	local05, arg01 wz
2c55c     00 FA 05 A6 |  if_e	mov	result1, #0
2c560     04 2E 66 50 |  if_ne	shl	local05, #4
2c564     17 13 02 51 |  if_ne	add	arg01, local05
2c568     09 FB 01 56 |  if_ne	mov	result1, arg01
2c56c     FD 30 02 F6 | 	mov	local06, result1
2c570     15 31 52 F2 | 	cmps	local06, local03 wc
2c574     20 00 90 3D |  if_ae	jmp	#LR__4013
2c578     16 15 0A F6 | 	mov	arg02, local04 wz
2c57c     00 FA 05 A6 |  if_e	mov	result1, #0
2c580     14 15 82 51 |  if_ne	sub	arg02, local02
2c584     04 14 46 50 |  if_ne	shr	arg02, #4
2c588     0A FB 01 56 |  if_ne	mov	result1, arg02
2c58c     18 15 02 F6 | 	mov	arg02, local06
2c590     04 14 06 F1 | 	add	arg02, #4
2c594     0A FB 51 FC | 	wrword	result1, arg02
2c598                 | LR__4013
2c598     13 15 02 F6 | 	mov	arg02, local01
2c59c     06 14 06 F1 | 	add	arg02, #6
2c5a0     16 FD 01 F6 | 	mov	result2, local04
2c5a4     0A 15 E2 FA | 	rdword	arg02, arg02
2c5a8     06 FC 05 F1 | 	add	result2, #6
2c5ac     FE 14 52 FC | 	wrword	arg02, result2
2c5b0     06 26 06 F1 | 	add	local01, #6
2c5b4     13 01 58 FC | 	wrword	#0, local01
2c5b8     16 27 02 F6 | 	mov	local01, local04
2c5bc                 | LR__4014
2c5bc                 | LR__4015
2c5bc     13 13 02 F6 | 	mov	arg01, local01
2c5c0     09 2F EA FA | 	rdword	local05, arg01 wz
2c5c4     00 FA 05 A6 |  if_e	mov	result1, #0
2c5c8     04 2E 66 50 |  if_ne	shl	local05, #4
2c5cc     17 13 02 51 |  if_ne	add	arg01, local05
2c5d0     09 FB 01 56 |  if_ne	mov	result1, arg01
2c5d4     FD 14 0A F6 | 	mov	arg02, result1 wz
2c5d8     B8 00 90 AD |  if_e	jmp	#LR__4017
2c5dc     15 15 52 F2 | 	cmps	arg02, local03 wc
2c5e0     B0 00 90 3D |  if_ae	jmp	#LR__4017
2c5e4     0A 13 02 F6 | 	mov	arg01, arg02
2c5e8     00 FA 05 F6 | 	mov	result1, #0
2c5ec     02 12 06 F1 | 	add	arg01, #2
2c5f0     09 13 E2 FA | 	rdword	arg01, arg01
2c5f4     36 00 00 FF 
2c5f8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2c5fc     01 FA 65 A6 |  if_e	neg	result1, #1
2c600     00 FA 0D F2 | 	cmp	result1, #0 wz
2c604     8C 00 90 AD |  if_e	jmp	#LR__4017
2c608     13 2D 02 F6 | 	mov	local04, local01
2c60c     16 31 E2 FA | 	rdword	local06, local04
2c610     0A 13 02 F6 | 	mov	arg01, arg02
2c614     09 27 E2 FA | 	rdword	local01, arg01
2c618     13 31 02 F1 | 	add	local06, local01
2c61c     16 31 52 FC | 	wrword	local06, local04
2c620     09 31 02 F6 | 	mov	local06, arg01
2c624     06 30 06 F1 | 	add	local06, #6
2c628     16 27 02 F6 | 	mov	local01, local04
2c62c     18 31 E2 FA | 	rdword	local06, local06
2c630     06 26 06 F1 | 	add	local01, #6
2c634     13 31 52 FC | 	wrword	local06, local01
2c638     09 31 02 F6 | 	mov	local06, arg01
2c63c     02 30 06 F1 | 	add	local06, #2
2c640     18 55 59 FC | 	wrword	#170, local06
2c644     09 31 02 F6 | 	mov	local06, arg01
2c648     06 30 06 F1 | 	add	local06, #6
2c64c     18 01 58 FC | 	wrword	#0, local06
2c650     09 2F EA FA | 	rdword	local05, arg01 wz
2c654     00 FA 05 A6 |  if_e	mov	result1, #0
2c658     04 2E 66 50 |  if_ne	shl	local05, #4
2c65c     17 13 02 51 |  if_ne	add	arg01, local05
2c660     09 FB 01 56 |  if_ne	mov	result1, arg01
2c664     FD 30 0A F6 | 	mov	local06, result1 wz
2c668     28 00 90 AD |  if_e	jmp	#LR__4016
2c66c     15 31 52 F2 | 	cmps	local06, local03 wc
2c670     20 00 90 3D |  if_ae	jmp	#LR__4016
2c674     16 15 0A F6 | 	mov	arg02, local04 wz
2c678     00 FA 05 A6 |  if_e	mov	result1, #0
2c67c     14 15 82 51 |  if_ne	sub	arg02, local02
2c680     04 14 46 50 |  if_ne	shr	arg02, #4
2c684     0A FB 01 56 |  if_ne	mov	result1, arg02
2c688     18 2D 02 F6 | 	mov	local04, local06
2c68c     04 2C 06 F1 | 	add	local04, #4
2c690     16 FB 51 FC | 	wrword	result1, local04
2c694                 | LR__4016
2c694                 | LR__4017
2c694     18 FB 01 F6 | 	mov	result1, local06
2c698     A7 F0 03 F6 | 	mov	ptra, fp
2c69c     B2 00 A0 FD | 	call	#popregs_
2c6a0                 | __system___gc_dofree_ret
2c6a0     2D 00 64 FD | 	ret
2c6a4                 | 
2c6a4                 | __system___gc_docollect
2c6a4     05 4A 05 F6 | 	mov	COUNT_, #5
2c6a8     A8 00 A0 FD | 	call	#pushregs_
2c6ac     B8 F9 BF FD | 	call	#__system___gc_ptrs
2c6b0     FE 26 02 F6 | 	mov	local01, result2
2c6b4     FD 28 02 F6 | 	mov	local02, result1
2c6b8     14 13 02 F6 | 	mov	arg01, local02
2c6bc     09 2B EA FA | 	rdword	local03, arg01 wz
2c6c0     00 FA 05 A6 |  if_e	mov	result1, #0
2c6c4     04 2A 66 50 |  if_ne	shl	local03, #4
2c6c8     15 13 02 51 |  if_ne	add	arg01, local03
2c6cc     09 FB 01 56 |  if_ne	mov	result1, arg01
2c6d0     FD 2C 0A F6 | 	mov	local04, result1 wz
2c6d4     00 FA 05 F6 | 	mov	result1, #0
2c6d8     01 FA 61 FD | 	cogid	result1
2c6dc     FD 2E 02 F6 | 	mov	local05, result1
2c6e0     48 00 90 AD |  if_e	jmp	#LR__4022
2c6e4     97 22 48 FB | 	callpa	#(@LR__4021-@LR__4020)>>2,fcache_load_ptr_
2c6e8                 | LR__4020
2c6e8     13 2D 52 F2 | 	cmps	local04, local01 wc
2c6ec     3C 00 90 3D |  if_ae	jmp	#LR__4022
2c6f0     16 15 02 F6 | 	mov	arg02, local04
2c6f4     02 14 06 F1 | 	add	arg02, #2
2c6f8     0A 15 E2 FA | 	rdword	arg02, arg02
2c6fc     20 14 26 F5 | 	andn	arg02, #32
2c700     16 13 02 F6 | 	mov	arg01, local04
2c704     02 12 06 F1 | 	add	arg01, #2
2c708     09 15 52 FC | 	wrword	arg02, arg01
2c70c     16 13 02 F6 | 	mov	arg01, local04
2c710     09 2B EA FA | 	rdword	local03, arg01 wz
2c714     00 FA 05 A6 |  if_e	mov	result1, #0
2c718     04 2A 66 50 |  if_ne	shl	local03, #4
2c71c     15 13 02 51 |  if_ne	add	arg01, local03
2c720     09 FB 01 56 |  if_ne	mov	result1, arg01
2c724     FD 2C 0A F6 | 	mov	local04, result1 wz
2c728     BC FF 9F 5D |  if_ne	jmp	#LR__4020
2c72c                 | LR__4021
2c72c                 | LR__4022
2c72c     00 2A 06 F6 | 	mov	local03, #0
2c730     00 12 06 F6 | 	mov	arg01, #0
2c734     B0 B9 BF FD | 	call	#__system____topofstack
2c738     FD 14 02 F6 | 	mov	arg02, result1
2c73c     15 13 02 F6 | 	mov	arg01, local03
2c740     90 00 B0 FD | 	call	#__system___gc_markhub
2c744     1C 01 B0 FD | 	call	#__system___gc_markcog
2c748     14 13 02 F6 | 	mov	arg01, local02
2c74c     09 2B EA FA | 	rdword	local03, arg01 wz
2c750     00 FA 05 A6 |  if_e	mov	result1, #0
2c754     04 2A 66 50 |  if_ne	shl	local03, #4
2c758     15 13 02 51 |  if_ne	add	arg01, local03
2c75c     09 FB 01 56 |  if_ne	mov	result1, arg01
2c760     FD 28 0A F6 | 	mov	local02, result1 wz
2c764     60 00 90 AD |  if_e	jmp	#LR__4026
2c768                 | LR__4023
2c768     14 2D 02 F6 | 	mov	local04, local02
2c76c     16 13 02 F6 | 	mov	arg01, local04
2c770     09 2B EA FA | 	rdword	local03, arg01 wz
2c774     00 FA 05 A6 |  if_e	mov	result1, #0
2c778     04 2A 66 50 |  if_ne	shl	local03, #4
2c77c     15 13 02 51 |  if_ne	add	arg01, local03
2c780     09 FB 01 56 |  if_ne	mov	result1, arg01
2c784     FD 28 02 F6 | 	mov	local02, result1
2c788     16 15 02 F6 | 	mov	arg02, local04
2c78c     02 14 06 F1 | 	add	arg02, #2
2c790     0A 15 E2 FA | 	rdword	arg02, arg02
2c794     20 14 CE F7 | 	test	arg02, #32 wz
2c798     10 14 CE A7 |  if_e	test	arg02, #16 wz
2c79c     1C 00 90 5D |  if_ne	jmp	#LR__4025
2c7a0     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2c7a4     17 15 0A F2 | 	cmp	arg02, local05 wz
2c7a8     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2c7ac     0C 00 90 5D |  if_ne	jmp	#LR__4024
2c7b0     16 13 02 F6 | 	mov	arg01, local04
2c7b4     84 FC BF FD | 	call	#__system___gc_dofree
2c7b8     FD 28 02 F6 | 	mov	local02, result1
2c7bc                 | LR__4024
2c7bc                 | LR__4025
2c7bc     00 28 0E F2 | 	cmp	local02, #0 wz
2c7c0     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2c7c4     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__4023
2c7c8                 | LR__4026
2c7c8     A7 F0 03 F6 | 	mov	ptra, fp
2c7cc     B2 00 A0 FD | 	call	#popregs_
2c7d0                 | __system___gc_docollect_ret
2c7d0     2D 00 64 FD | 	ret
2c7d4                 | 
2c7d4                 | __system___gc_markhub
2c7d4     04 4A 05 F6 | 	mov	COUNT_, #4
2c7d8     A8 00 A0 FD | 	call	#pushregs_
2c7dc     09 27 02 F6 | 	mov	local01, arg01
2c7e0     0A 29 02 F6 | 	mov	local02, arg02
2c7e4     80 F8 BF FD | 	call	#__system___gc_ptrs
2c7e8     FD 2A 02 F6 | 	mov	local03, result1
2c7ec     FE 2C 02 F6 | 	mov	local04, result2
2c7f0                 | LR__4030
2c7f0     14 27 52 F2 | 	cmps	local01, local02 wc
2c7f4     60 00 90 3D |  if_ae	jmp	#LR__4031
2c7f8     13 17 02 FB | 	rdlong	arg03, local01
2c7fc     04 26 06 F1 | 	add	local01, #4
2c800     16 15 02 F6 | 	mov	arg02, local04
2c804     15 13 02 F6 | 	mov	arg01, local03
2c808     8C FB BF FD | 	call	#__system___gc_isvalidptr
2c80c     FD 16 0A F6 | 	mov	arg03, result1 wz
2c810     DC FF 9F AD |  if_e	jmp	#LR__4030
2c814     0B 13 02 F6 | 	mov	arg01, arg03
2c818     00 FA 05 F6 | 	mov	result1, #0
2c81c     02 12 06 F1 | 	add	arg01, #2
2c820     09 13 E2 FA | 	rdword	arg01, arg01
2c824     36 00 00 FF 
2c828     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2c82c     01 FA 65 A6 |  if_e	neg	result1, #1
2c830     00 FA 0D F2 | 	cmp	result1, #0 wz
2c834     B8 FF 9F 5D |  if_ne	jmp	#LR__4030
2c838     0B FD 01 F6 | 	mov	result2, arg03
2c83c     02 FC 05 F1 | 	add	result2, #2
2c840     FE FC E1 FA | 	rdword	result2, result2
2c844     0F FC 25 F5 | 	andn	result2, #15
2c848     2E FC 45 F5 | 	or	result2, #46
2c84c     02 16 06 F1 | 	add	arg03, #2
2c850     0B FD 51 FC | 	wrword	result2, arg03
2c854     98 FF 9F FD | 	jmp	#LR__4030
2c858                 | LR__4031
2c858     A7 F0 03 F6 | 	mov	ptra, fp
2c85c     B2 00 A0 FD | 	call	#popregs_
2c860                 | __system___gc_markhub_ret
2c860     2D 00 64 FD | 	ret
2c864                 | 
2c864                 | __system___gc_markcog
2c864     04 4A 05 F6 | 	mov	COUNT_, #4
2c868     A8 00 A0 FD | 	call	#pushregs_
2c86c     F8 F7 BF FD | 	call	#__system___gc_ptrs
2c870     FD 26 02 F6 | 	mov	local01, result1
2c874     FE 28 02 F6 | 	mov	local02, result2
2c878     EF 2B 06 F6 | 	mov	local03, #495
2c87c                 | LR__4040
2c87c                 | 	'.live	local03
2c87c     00 2A 96 F9 | 	alts	local03, #0
2c880     15 2D 02 F6 | 	mov	local04, local03
2c884     13 13 02 F6 | 	mov	arg01, local01
2c888     14 15 02 F6 | 	mov	arg02, local02
2c88c     16 17 02 F6 | 	mov	arg03, local04
2c890     04 FB BF FD | 	call	#__system___gc_isvalidptr
2c894     00 FA 0D F2 | 	cmp	result1, #0 wz
2c898     18 00 90 AD |  if_e	jmp	#LR__4041
2c89c     FD 2C 02 F6 | 	mov	local04, result1
2c8a0     02 2C 06 F1 | 	add	local04, #2
2c8a4     16 2D E2 FA | 	rdword	local04, local04
2c8a8     20 2C 46 F5 | 	or	local04, #32
2c8ac     02 FA 05 F1 | 	add	result1, #2
2c8b0     FD 2C 52 FC | 	wrword	local04, result1
2c8b4                 | LR__4041
2c8b4     01 2A 86 F1 | 	sub	local03, #1
2c8b8     00 2A 56 F2 | 	cmps	local03, #0 wc
2c8bc     BC FF 9F 3D |  if_ae	jmp	#LR__4040
2c8c0     A7 F0 03 F6 | 	mov	ptra, fp
2c8c4     B2 00 A0 FD | 	call	#popregs_
2c8c8                 | __system___gc_markcog_ret
2c8c8     2D 00 64 FD | 	ret
2c8cc                 | 
2c8cc                 | __system__opendir
2c8cc     06 4A 05 F6 | 	mov	COUNT_, #6
2c8d0     A8 00 A0 FD | 	call	#pushregs_
2c8d4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2c8d8     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2c8dc     09 15 02 F6 | 	mov	arg02, arg01
2c8e0     13 13 02 F6 | 	mov	arg01, local01
2c8e4     00 16 06 F6 | 	mov	arg03, #0
2c8e8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2c8ec     B8 BF BF FD | 	call	#__system____getvfsforfile
2c8f0     FD 28 0A F6 | 	mov	local02, result1 wz
2c8f4     10 00 90 AD |  if_e	jmp	#LR__4050
2c8f8     28 28 06 F1 | 	add	local02, #40
2c8fc     14 17 0A FB | 	rdlong	arg03, local02 wz
2c900     28 28 86 F1 | 	sub	local02, #40
2c904     14 00 90 5D |  if_ne	jmp	#LR__4051
2c908                 | LR__4050
2c908     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c90c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2c910     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c914     00 FA 05 F6 | 	mov	result1, #0
2c918     90 00 90 FD | 	jmp	#LR__4053
2c91c                 | LR__4051
2c91c     5C 12 06 F6 | 	mov	arg01, #92
2c920     10 14 06 F6 | 	mov	arg02, #16
2c924     C0 F9 BF FD | 	call	#__system___gc_doalloc
2c928     FD 2A 0A F6 | 	mov	local03, result1 wz
2c92c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c930     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2c934     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c938     00 FA 05 A6 |  if_e	mov	result1, #0
2c93c     6C 00 90 AD |  if_e	jmp	#LR__4053
2c940     28 28 06 F1 | 	add	local02, #40
2c944     14 2D 02 FB | 	rdlong	local04, local02
2c948     16 2F 02 F6 | 	mov	local05, local04
2c94c     28 28 86 F1 | 	sub	local02, #40
2c950     13 2E 46 F7 | 	zerox	local05, #19
2c954     14 2C 46 F0 | 	shr	local04, #20
2c958     02 2C 66 F0 | 	shl	local04, #2
2c95c     ED 2C 02 F1 | 	add	local04, __methods__
2c960     16 2D 02 FB | 	rdlong	local04, local04
2c964     15 13 02 F6 | 	mov	arg01, local03
2c968     13 15 02 F6 | 	mov	arg02, local01
2c96c     F2 30 02 F6 | 	mov	local06, objptr
2c970     17 E5 01 F6 | 	mov	objptr, local05
2c974     2D 2C 62 FD | 	call	local04
2c978     18 E5 01 F6 | 	mov	objptr, local06
2c97c     FD 16 0A F6 | 	mov	arg03, result1 wz
2c980     20 00 90 AD |  if_e	jmp	#LR__4052
2c984     00 16 4E F2 | 	cmps	arg03, #0 wz
2c988     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c98c     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2c990     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c994     15 13 02 F6 | 	mov	arg01, local03
2c998     58 FA BF FD | 	call	#__system___gc_free
2c99c     00 FA 05 F6 | 	mov	result1, #0
2c9a0     08 00 90 FD | 	jmp	#LR__4053
2c9a4                 | LR__4052
2c9a4     15 29 62 FC | 	wrlong	local02, local03
2c9a8     15 FB 01 F6 | 	mov	result1, local03
2c9ac                 | LR__4053
2c9ac     A7 F0 03 F6 | 	mov	ptra, fp
2c9b0     B2 00 A0 FD | 	call	#popregs_
2c9b4                 | __system__opendir_ret
2c9b4     2D 00 64 FD | 	ret
2c9b8                 | 
2c9b8                 | __system__closedir
2c9b8     04 4A 05 F6 | 	mov	COUNT_, #4
2c9bc     A8 00 A0 FD | 	call	#pushregs_
2c9c0     09 27 02 F6 | 	mov	local01, arg01
2c9c4     13 13 02 FB | 	rdlong	arg01, local01
2c9c8     2C 12 06 F1 | 	add	arg01, #44
2c9cc     09 29 02 FB | 	rdlong	local02, arg01
2c9d0     14 2B 02 F6 | 	mov	local03, local02
2c9d4     13 2A 46 F7 | 	zerox	local03, #19
2c9d8     14 28 46 F0 | 	shr	local02, #20
2c9dc     02 28 66 F0 | 	shl	local02, #2
2c9e0     ED 28 02 F1 | 	add	local02, __methods__
2c9e4     14 29 02 FB | 	rdlong	local02, local02
2c9e8     13 13 02 F6 | 	mov	arg01, local01
2c9ec     F2 2C 02 F6 | 	mov	local04, objptr
2c9f0     15 E5 01 F6 | 	mov	objptr, local03
2c9f4     2D 28 62 FD | 	call	local02
2c9f8     16 E5 01 F6 | 	mov	objptr, local04
2c9fc     FD 2C 02 F6 | 	mov	local04, result1
2ca00     13 13 02 F6 | 	mov	arg01, local01
2ca04     EC F9 BF FD | 	call	#__system___gc_free
2ca08     00 2C 4E F2 | 	cmps	local04, #0 wz
2ca0c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ca10     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2ca14     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ca18     01 FA 65 56 |  if_ne	neg	result1, #1
2ca1c     00 FA 05 A6 |  if_e	mov	result1, #0
2ca20     A7 F0 03 F6 | 	mov	ptra, fp
2ca24     B2 00 A0 FD | 	call	#popregs_
2ca28                 | __system__closedir_ret
2ca28     2D 00 64 FD | 	ret
2ca2c                 | 
2ca2c                 | __system__readdir
2ca2c     04 4A 05 F6 | 	mov	COUNT_, #4
2ca30     A8 00 A0 FD | 	call	#pushregs_
2ca34     09 15 0A FB | 	rdlong	arg02, arg01 wz
2ca38     08 12 06 F1 | 	add	arg01, #8
2ca3c     09 27 02 F6 | 	mov	local01, arg01
2ca40     08 12 86 F1 | 	sub	arg01, #8
2ca44     00 FA 05 A6 |  if_e	mov	result1, #0
2ca48     5C 00 90 AD |  if_e	jmp	#LR__4061
2ca4c     30 14 06 F1 | 	add	arg02, #48
2ca50     0A 29 02 FB | 	rdlong	local02, arg02
2ca54     14 2B 02 F6 | 	mov	local03, local02
2ca58     13 2A 46 F7 | 	zerox	local03, #19
2ca5c     14 28 46 F0 | 	shr	local02, #20
2ca60     02 28 66 F0 | 	shl	local02, #2
2ca64     ED 28 02 F1 | 	add	local02, __methods__
2ca68     14 29 02 FB | 	rdlong	local02, local02
2ca6c     13 15 02 F6 | 	mov	arg02, local01
2ca70     F2 2C 02 F6 | 	mov	local04, objptr
2ca74     15 E5 01 F6 | 	mov	objptr, local03
2ca78     2D 28 62 FD | 	call	local02
2ca7c     16 E5 01 F6 | 	mov	objptr, local04
2ca80     00 FA 4D F2 | 	cmps	result1, #0 wz
2ca84     1C 00 90 AD |  if_e	jmp	#LR__4060
2ca88     01 FA 55 F2 | 	cmps	result1, #1 wc
2ca8c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2ca90     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ca94     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2ca98     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2ca9c     00 FA 05 F6 | 	mov	result1, #0
2caa0     04 00 90 FD | 	jmp	#LR__4061
2caa4                 | LR__4060
2caa4     13 FB 01 F6 | 	mov	result1, local01
2caa8                 | LR__4061
2caa8     A7 F0 03 F6 | 	mov	ptra, fp
2caac     B2 00 A0 FD | 	call	#popregs_
2cab0                 | __system__readdir_ret
2cab0     2D 00 64 FD | 	ret
2cab4                 | 
2cab4                 | __system___openraw
2cab4     15 4A 05 F6 | 	mov	COUNT_, #21
2cab8     A8 00 A0 FD | 	call	#pushregs_
2cabc     09 27 02 F6 | 	mov	local01, arg01
2cac0     0A 29 02 F6 | 	mov	local02, arg02
2cac4     0B 2B 02 F6 | 	mov	local03, arg03
2cac8     0C 2D 02 F6 | 	mov	local04, arg04
2cacc     04 2E 06 F6 | 	mov	local05, #4
2cad0     13 31 02 F6 | 	mov	local06, local01
2cad4     00 32 06 F6 | 	mov	local07, #0
2cad8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2cadc     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2cae0     1A 13 02 F6 | 	mov	arg01, local08
2cae4     14 15 02 F6 | 	mov	arg02, local02
2cae8     00 16 06 F6 | 	mov	arg03, #0
2caec     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2caf0     B4 BD BF FD | 	call	#__system____getvfsforfile
2caf4     FD 36 0A F6 | 	mov	local09, result1 wz
2caf8     10 00 90 AD |  if_e	jmp	#LR__4070
2cafc     20 36 06 F1 | 	add	local09, #32
2cb00     1B FB 09 FB | 	rdlong	result1, local09 wz
2cb04     20 36 86 F1 | 	sub	local09, #32
2cb08     14 00 90 5D |  if_ne	jmp	#LR__4071
2cb0c                 | LR__4070
2cb0c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cb10     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2cb14     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cb18     01 FA 65 F6 | 	neg	result1, #1
2cb1c     8C 02 90 FD | 	jmp	#LR__4084
2cb20                 | LR__4071
2cb20     18 13 02 F6 | 	mov	arg01, local06
2cb24     00 14 06 F6 | 	mov	arg02, #0
2cb28     34 16 06 F6 | 	mov	arg03, #52
2cb2c     09 39 02 F6 | 	mov	local10, arg01
2cb30     98 00 A0 FD | 	call	#\builtin_bytefill_
2cb34     20 36 06 F1 | 	add	local09, #32
2cb38     1B 3B 02 FB | 	rdlong	local11, local09
2cb3c     1D 3D 02 F6 | 	mov	local12, local11
2cb40     1D 3F 02 F6 | 	mov	local13, local11
2cb44     20 36 86 F1 | 	sub	local09, #32
2cb48     1F 41 02 F6 | 	mov	local14, local13
2cb4c     13 3C 46 F7 | 	zerox	local12, #19
2cb50     14 40 46 F0 | 	shr	local14, #20
2cb54     02 40 66 F0 | 	shl	local14, #2
2cb58     ED 40 02 F1 | 	add	local14, __methods__
2cb5c     20 41 02 FB | 	rdlong	local14, local14
2cb60     18 43 02 F6 | 	mov	local15, local06
2cb64     1A 45 02 F6 | 	mov	local16, local08
2cb68     15 47 02 F6 | 	mov	local17, local03
2cb6c     21 13 02 F6 | 	mov	arg01, local15
2cb70     22 15 02 F6 | 	mov	arg02, local16
2cb74     23 17 02 F6 | 	mov	arg03, local17
2cb78     F2 48 02 F6 | 	mov	local18, objptr
2cb7c     1E E5 01 F6 | 	mov	objptr, local12
2cb80     2D 40 62 FD | 	call	local14
2cb84     24 E5 01 F6 | 	mov	objptr, local18
2cb88     FD 4A 0A F6 | 	mov	local19, result1 wz
2cb8c     04 2A CE 57 |  if_ne	test	local03, #4 wz
2cb90     58 00 90 AD |  if_e	jmp	#LR__4072
2cb94     24 36 06 F1 | 	add	local09, #36
2cb98     1B 3B 02 FB | 	rdlong	local11, local09
2cb9c     1D 3D 02 F6 | 	mov	local12, local11
2cba0     1D 3F 02 F6 | 	mov	local13, local11
2cba4     24 36 86 F1 | 	sub	local09, #36
2cba8     1F 41 02 F6 | 	mov	local14, local13
2cbac     13 3C 46 F7 | 	zerox	local12, #19
2cbb0     14 40 46 F0 | 	shr	local14, #20
2cbb4     02 40 66 F0 | 	shl	local14, #2
2cbb8     ED 40 02 F1 | 	add	local14, __methods__
2cbbc     20 41 02 FB | 	rdlong	local14, local14
2cbc0     18 43 02 F6 | 	mov	local15, local06
2cbc4     1A 45 02 F6 | 	mov	local16, local08
2cbc8     16 47 02 F6 | 	mov	local17, local04
2cbcc     21 13 02 F6 | 	mov	arg01, local15
2cbd0     22 15 02 F6 | 	mov	arg02, local16
2cbd4     23 17 02 F6 | 	mov	arg03, local17
2cbd8     F2 48 02 F6 | 	mov	local18, objptr
2cbdc     1E E5 01 F6 | 	mov	objptr, local12
2cbe0     2D 40 62 FD | 	call	local14
2cbe4     24 E5 01 F6 | 	mov	objptr, local18
2cbe8     FD 4A 02 F6 | 	mov	local19, result1
2cbec                 | LR__4072
2cbec     00 4A 0E F2 | 	cmp	local19, #0 wz
2cbf0     8C 01 90 5D |  if_ne	jmp	#LR__4082
2cbf4     15 4D 02 F6 | 	mov	local20, local03
2cbf8     03 4C 0E F5 | 	and	local20, #3 wz
2cbfc     02 2E 46 55 |  if_ne	or	local05, #2
2cc00     01 4C 0E F2 | 	cmp	local20, #1 wz
2cc04     01 2E 46 55 |  if_ne	or	local05, #1
2cc08     20 2A CE F7 | 	test	local03, #32 wz
2cc0c     C0 2E 46 55 |  if_ne	or	local05, #192
2cc10     08 30 06 F1 | 	add	local06, #8
2cc14     18 2F 62 FC | 	wrlong	local05, local06
2cc18     0C 30 06 F1 | 	add	local06, #12
2cc1c     18 4F 0A FB | 	rdlong	local21, local06 wz
2cc20     14 30 86 F1 | 	sub	local06, #20
2cc24     18 00 90 5D |  if_ne	jmp	#LR__4073
2cc28     04 36 06 F1 | 	add	local09, #4
2cc2c     1B 4F 02 FB | 	rdlong	local21, local09
2cc30     04 36 86 F1 | 	sub	local09, #4
2cc34     14 30 06 F1 | 	add	local06, #20
2cc38     18 4F 62 FC | 	wrlong	local21, local06
2cc3c     14 30 86 F1 | 	sub	local06, #20
2cc40                 | LR__4073
2cc40     18 30 06 F1 | 	add	local06, #24
2cc44     18 4F 0A FB | 	rdlong	local21, local06 wz
2cc48     18 30 86 F1 | 	sub	local06, #24
2cc4c     18 00 90 5D |  if_ne	jmp	#LR__4074
2cc50     08 36 06 F1 | 	add	local09, #8
2cc54     1B 4F 02 FB | 	rdlong	local21, local09
2cc58     08 36 86 F1 | 	sub	local09, #8
2cc5c     18 30 06 F1 | 	add	local06, #24
2cc60     18 4F 62 FC | 	wrlong	local21, local06
2cc64     18 30 86 F1 | 	sub	local06, #24
2cc68                 | LR__4074
2cc68     24 30 06 F1 | 	add	local06, #36
2cc6c     18 4F 0A FB | 	rdlong	local21, local06 wz
2cc70     24 30 86 F1 | 	sub	local06, #36
2cc74     1B 4F 02 AB |  if_e	rdlong	local21, local09
2cc78     24 30 06 A1 |  if_e	add	local06, #36
2cc7c     18 4F 62 AC |  if_e	wrlong	local21, local06
2cc80     24 30 86 A1 |  if_e	sub	local06, #36
2cc84     28 30 06 F1 | 	add	local06, #40
2cc88     18 4F 0A FB | 	rdlong	local21, local06 wz
2cc8c     28 30 86 F1 | 	sub	local06, #40
2cc90     18 00 90 5D |  if_ne	jmp	#LR__4075
2cc94     10 36 06 F1 | 	add	local09, #16
2cc98     1B 4F 02 FB | 	rdlong	local21, local09
2cc9c     10 36 86 F1 | 	sub	local09, #16
2cca0     28 30 06 F1 | 	add	local06, #40
2cca4     18 4F 62 FC | 	wrlong	local21, local06
2cca8     28 30 86 F1 | 	sub	local06, #40
2ccac                 | LR__4075
2ccac     30 30 06 F1 | 	add	local06, #48
2ccb0     18 4F 0A FB | 	rdlong	local21, local06 wz
2ccb4     30 30 86 F1 | 	sub	local06, #48
2ccb8     18 00 90 5D |  if_ne	jmp	#LR__4076
2ccbc     0C 36 06 F1 | 	add	local09, #12
2ccc0     1B 4F 02 FB | 	rdlong	local21, local09
2ccc4     0C 36 86 F1 | 	sub	local09, #12
2ccc8     30 30 06 F1 | 	add	local06, #48
2cccc     18 4F 62 FC | 	wrlong	local21, local06
2ccd0     30 30 86 F1 | 	sub	local06, #48
2ccd4                 | LR__4076
2ccd4     1C 30 06 F1 | 	add	local06, #28
2ccd8     18 4F 0A FB | 	rdlong	local21, local06 wz
2ccdc     1C 30 86 F1 | 	sub	local06, #28
2cce0     1C 00 90 5D |  if_ne	jmp	#LR__4077
2cce4     01 32 06 F6 | 	mov	local07, #1
2cce8     F2 12 02 F6 | 	mov	arg01, objptr
2ccec     00 A8 05 FF 
2ccf0     00 12 46 F5 | 	or	arg01, ##189792256
2ccf4     1C 30 06 F1 | 	add	local06, #28
2ccf8     18 13 62 FC | 	wrlong	arg01, local06
2ccfc     1C 30 86 F1 | 	sub	local06, #28
2cd00                 | LR__4077
2cd00     20 30 06 F1 | 	add	local06, #32
2cd04     18 4F 0A FB | 	rdlong	local21, local06 wz
2cd08     20 30 86 F1 | 	sub	local06, #32
2cd0c     1C 00 90 5D |  if_ne	jmp	#LR__4078
2cd10     01 32 06 F6 | 	mov	local07, #1
2cd14     F2 12 02 F6 | 	mov	arg01, objptr
2cd18     00 B0 05 FF 
2cd1c     00 12 46 F5 | 	or	arg01, ##190840832
2cd20     20 30 06 F1 | 	add	local06, #32
2cd24     18 13 62 FC | 	wrlong	arg01, local06
2cd28     20 30 86 F1 | 	sub	local06, #32
2cd2c                 | LR__4078
2cd2c     2C 30 06 F1 | 	add	local06, #44
2cd30     18 4F 0A FB | 	rdlong	local21, local06 wz
2cd34     2C 30 86 F1 | 	sub	local06, #44
2cd38     44 00 90 5D |  if_ne	jmp	#LR__4081
2cd3c     14 36 06 F1 | 	add	local09, #20
2cd40     1B 4F 0A FB | 	rdlong	local21, local09 wz
2cd44     14 36 86 F1 | 	sub	local09, #20
2cd48     18 00 90 AD |  if_e	jmp	#LR__4079
2cd4c     14 36 06 F1 | 	add	local09, #20
2cd50     1B 4F 02 FB | 	rdlong	local21, local09
2cd54     2C 30 06 F1 | 	add	local06, #44
2cd58     18 4F 62 FC | 	wrlong	local21, local06
2cd5c     2C 30 86 F1 | 	sub	local06, #44
2cd60     1C 00 90 FD | 	jmp	#LR__4080
2cd64                 | LR__4079
2cd64     01 32 06 F6 | 	mov	local07, #1
2cd68     F2 12 02 F6 | 	mov	arg01, objptr
2cd6c     00 B8 05 FF 
2cd70     00 12 46 F5 | 	or	arg01, ##191889408
2cd74     2C 30 06 F1 | 	add	local06, #44
2cd78     18 13 62 FC | 	wrlong	arg01, local06
2cd7c     2C 30 86 F1 | 	sub	local06, #44
2cd80                 | LR__4080
2cd80                 | LR__4081
2cd80                 | LR__4082
2cd80     00 32 0E F2 | 	cmp	local07, #0 wz
2cd84     18 13 02 56 |  if_ne	mov	arg01, local06
2cd88     40 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2cd8c     00 4A 0E F2 | 	cmp	local19, #0 wz
2cd90     00 12 06 A6 |  if_e	mov	arg01, #0
2cd94     10 00 90 5D |  if_ne	jmp	#LR__4083
2cd98     00 12 4E F2 | 	cmps	arg01, #0 wz
2cd9c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cda0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2cda4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cda8                 | LR__4083
2cda8     25 FB 01 F6 | 	mov	result1, local19
2cdac                 | LR__4084
2cdac     A7 F0 03 F6 | 	mov	ptra, fp
2cdb0     B2 00 A0 FD | 	call	#popregs_
2cdb4                 | __system___openraw_ret
2cdb4     2D 00 64 FD | 	ret
2cdb8                 | 
2cdb8                 | __system___closeraw
2cdb8     05 4A 05 F6 | 	mov	COUNT_, #5
2cdbc     A8 00 A0 FD | 	call	#pushregs_
2cdc0     09 27 02 F6 | 	mov	local01, arg01
2cdc4     00 28 06 F6 | 	mov	local02, #0
2cdc8     08 26 06 F1 | 	add	local01, #8
2cdcc     13 FB 09 FB | 	rdlong	result1, local01 wz
2cdd0     08 26 86 F1 | 	sub	local01, #8
2cdd4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cdd8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2cddc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cde0     01 FA 65 A6 |  if_e	neg	result1, #1
2cde4     A8 00 90 AD |  if_e	jmp	#LR__4092
2cde8     2C 26 06 F1 | 	add	local01, #44
2cdec     13 FB 09 FB | 	rdlong	result1, local01 wz
2cdf0     2C 26 86 F1 | 	sub	local01, #44
2cdf4     38 00 90 AD |  if_e	jmp	#LR__4090
2cdf8     2C 26 06 F1 | 	add	local01, #44
2cdfc     13 2B 02 FB | 	rdlong	local03, local01
2ce00     15 2D 02 F6 | 	mov	local04, local03
2ce04     2C 26 86 F1 | 	sub	local01, #44
2ce08     13 2C 46 F7 | 	zerox	local04, #19
2ce0c     14 2A 46 F0 | 	shr	local03, #20
2ce10     02 2A 66 F0 | 	shl	local03, #2
2ce14     ED 2A 02 F1 | 	add	local03, __methods__
2ce18     15 2B 02 FB | 	rdlong	local03, local03
2ce1c     13 13 02 F6 | 	mov	arg01, local01
2ce20     F2 2E 02 F6 | 	mov	local05, objptr
2ce24     16 E5 01 F6 | 	mov	objptr, local04
2ce28     2D 2A 62 FD | 	call	local03
2ce2c     17 E5 01 F6 | 	mov	objptr, local05
2ce30                 | LR__4090
2ce30     24 26 06 F1 | 	add	local01, #36
2ce34     13 2F 0A FB | 	rdlong	local05, local01 wz
2ce38     24 26 86 F1 | 	sub	local01, #36
2ce3c     3C 00 90 AD |  if_e	jmp	#LR__4091
2ce40     24 26 06 F1 | 	add	local01, #36
2ce44     13 2B 02 FB | 	rdlong	local03, local01
2ce48     15 2D 02 F6 | 	mov	local04, local03
2ce4c     24 26 86 F1 | 	sub	local01, #36
2ce50     13 2C 46 F7 | 	zerox	local04, #19
2ce54     14 2A 46 F0 | 	shr	local03, #20
2ce58     02 2A 66 F0 | 	shl	local03, #2
2ce5c     ED 2A 02 F1 | 	add	local03, __methods__
2ce60     15 2B 02 FB | 	rdlong	local03, local03
2ce64     13 13 02 F6 | 	mov	arg01, local01
2ce68     F2 2E 02 F6 | 	mov	local05, objptr
2ce6c     16 E5 01 F6 | 	mov	objptr, local04
2ce70     2D 2A 62 FD | 	call	local03
2ce74     17 E5 01 F6 | 	mov	objptr, local05
2ce78     FD 28 02 F6 | 	mov	local02, result1
2ce7c                 | LR__4091
2ce7c     13 13 02 F6 | 	mov	arg01, local01
2ce80     00 14 06 F6 | 	mov	arg02, #0
2ce84     34 16 06 F6 | 	mov	arg03, #52
2ce88     98 00 A0 FD | 	call	#\builtin_bytefill_
2ce8c     14 FB 01 F6 | 	mov	result1, local02
2ce90                 | LR__4092
2ce90     A7 F0 03 F6 | 	mov	ptra, fp
2ce94     B2 00 A0 FD | 	call	#popregs_
2ce98                 | __system___closeraw_ret
2ce98     2D 00 64 FD | 	ret
2ce9c                 | 
2ce9c                 | __system___vfs_open_sdcardx
2ce9c     0B 4A 05 F6 | 	mov	COUNT_, #11
2cea0     A8 00 A0 FD | 	call	#pushregs_
2cea4     09 2B 02 F6 | 	mov	local03, arg01
2cea8     0A 2D 02 F6 | 	mov	local04, arg02
2ceac     0B 2F 02 F6 | 	mov	local05, arg03
2ceb0     0C 31 02 F6 | 	mov	local06, arg04
2ceb4     24 12 06 F6 | 	mov	arg01, #36
2ceb8     FC F3 BF FD | 	call	#__system___gc_alloc_managed
2cebc     FD 32 02 F6 | 	mov	local07, result1
2cec0     01 00 00 FF 
2cec4     30 12 06 F6 | 	mov	arg01, ##560
2cec8     EC F3 BF FD | 	call	#__system___gc_alloc_managed
2cecc     FD 34 02 F6 | 	mov	local08, result1
2ced0     15 19 02 F6 | 	mov	arg04, local03
2ced4     1F 18 C6 F0 | 	sar	arg04, #31
2ced8     15 17 02 F6 | 	mov	arg03, local03
2cedc     01 12 06 F6 | 	mov	arg01, #1
2cee0     00 14 06 F6 | 	mov	arg02, #0
2cee4     EC DB BF FD | 	call	#__system___int64_shl
2cee8     FD 26 02 F6 | 	mov	local01, result1
2ceec     FE 36 02 F6 | 	mov	local09, result2
2cef0     16 19 02 F6 | 	mov	arg04, local04
2cef4     1F 18 C6 F0 | 	sar	arg04, #31
2cef8     16 17 02 F6 | 	mov	arg03, local04
2cefc     01 12 06 F6 | 	mov	arg01, #1
2cf00     00 14 06 F6 | 	mov	arg02, #0
2cf04     CC DB BF FD | 	call	#__system___int64_shl
2cf08     FD 26 42 F5 | 	or	local01, result1
2cf0c     FE 36 42 F5 | 	or	local09, result2
2cf10     17 19 02 F6 | 	mov	arg04, local05
2cf14     1F 18 C6 F0 | 	sar	arg04, #31
2cf18     17 17 02 F6 | 	mov	arg03, local05
2cf1c     01 12 06 F6 | 	mov	arg01, #1
2cf20     00 14 06 F6 | 	mov	arg02, #0
2cf24     AC DB BF FD | 	call	#__system___int64_shl
2cf28     FD 26 42 F5 | 	or	local01, result1
2cf2c     FE 36 42 F5 | 	or	local09, result2
2cf30     18 19 02 F6 | 	mov	arg04, local06
2cf34     1F 18 C6 F0 | 	sar	arg04, #31
2cf38     18 17 02 F6 | 	mov	arg03, local06
2cf3c     01 12 06 F6 | 	mov	arg01, #1
2cf40     00 14 06 F6 | 	mov	arg02, #0
2cf44     8C DB BF FD | 	call	#__system___int64_shl
2cf48     1B 15 02 F6 | 	mov	arg02, local09
2cf4c     FD 26 42 F5 | 	or	local01, result1
2cf50     0A FD 41 F5 | 	or	result2, arg02
2cf54     FE 28 02 F6 | 	mov	local02, result2
2cf58     13 13 02 F6 | 	mov	arg01, local01
2cf5c     14 15 02 F6 | 	mov	arg02, local02
2cf60     A8 DB BF FD | 	call	#__system___usepins
2cf64     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf68     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cf6c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2cf70     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cf74     00 FA 05 A6 |  if_e	mov	result1, #0
2cf78     AC 00 90 AD |  if_e	jmp	#LR__4102
2cf7c     13 39 02 F6 | 	mov	local10, local01
2cf80     14 37 02 F6 | 	mov	local09, local02
2cf84     08 32 06 F1 | 	add	local07, #8
2cf88     19 39 62 FC | 	wrlong	local10, local07
2cf8c     04 32 06 F1 | 	add	local07, #4
2cf90     19 37 62 FC | 	wrlong	local09, local07
2cf94     0C 32 86 F1 | 	sub	local07, #12
2cf98     18 1B 02 F6 | 	mov	arg05, local06
2cf9c     00 12 06 F6 | 	mov	arg01, #0
2cfa0     15 15 02 F6 | 	mov	arg02, local03
2cfa4     16 17 02 F6 | 	mov	arg03, local04
2cfa8     17 19 02 F6 | 	mov	arg04, local05
2cfac     F2 38 02 F6 | 	mov	local10, objptr
2cfb0     19 E5 01 F6 | 	mov	objptr, local07
2cfb4     CC 26 B0 FD | 	call	#_fatfs_cc_disk_setpins
2cfb8     1C E5 01 F6 | 	mov	objptr, local10
2cfbc     FD 3A 0A F6 | 	mov	local11, result1 wz
2cfc0     24 00 90 5D |  if_ne	jmp	#LR__4100
2cfc4     B0 01 00 FF 
2cfc8     FE 14 06 F6 | 	mov	arg02, ##@LR__5307
2cfcc     1A 13 02 F6 | 	mov	arg01, local08
2cfd0     00 16 06 F6 | 	mov	arg03, #0
2cfd4     F2 3A 02 F6 | 	mov	local11, objptr
2cfd8     19 E5 01 F6 | 	mov	objptr, local07
2cfdc     34 46 B0 FD | 	call	#_fatfs_cc_f_mount
2cfe0     1D E5 01 F6 | 	mov	objptr, local11
2cfe4     FD 3A 02 F6 | 	mov	local11, result1
2cfe8                 | LR__4100
2cfe8     00 3A 0E F2 | 	cmp	local11, #0 wz
2cfec     24 00 90 AD |  if_e	jmp	#LR__4101
2cff0     13 13 02 F6 | 	mov	arg01, local01
2cff4     14 15 02 F6 | 	mov	arg02, local02
2cff8     64 DB BF FD | 	call	#__system___freepins
2cffc     1D 13 6A F6 | 	neg	arg01, local11 wz
2d000     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d004     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d008     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d00c     00 FA 05 F6 | 	mov	result1, #0
2d010     14 00 90 FD | 	jmp	#LR__4102
2d014                 | LR__4101
2d014     19 13 02 F6 | 	mov	arg01, local07
2d018     F2 3A 02 F6 | 	mov	local11, objptr
2d01c     19 E5 01 F6 | 	mov	objptr, local07
2d020     6C 82 B0 FD | 	call	#_fatfs_cc_get_vfs
2d024     1D E5 01 F6 | 	mov	objptr, local11
2d028                 | LR__4102
2d028     A7 F0 03 F6 | 	mov	ptra, fp
2d02c     B2 00 A0 FD | 	call	#popregs_
2d030                 | __system___vfs_open_sdcardx_ret
2d030     2D 00 64 FD | 	ret
2d034                 | 
2d034                 | __system____default_getc
2d034     03 4A 05 F6 | 	mov	COUNT_, #3
2d038     A8 00 A0 FD | 	call	#pushregs_
2d03c     09 27 02 F6 | 	mov	local01, arg01
2d040     13 29 02 FB | 	rdlong	local02, local01
2d044     08 28 06 F1 | 	add	local02, #8
2d048     14 2B 02 FB | 	rdlong	local03, local02
2d04c     02 2A CE F7 | 	test	local03, #2 wz
2d050     13 13 02 56 |  if_ne	mov	arg01, local01
2d054     00 01 B0 5D |  if_ne	call	#__system____default_flush
2d058     14 2B 02 FB | 	rdlong	local03, local02
2d05c     01 2A 46 F5 | 	or	local03, #1
2d060     14 2B 62 FC | 	wrlong	local03, local02
2d064     08 28 86 F1 | 	sub	local02, #8
2d068     14 2B 0A FB | 	rdlong	local03, local02 wz
2d06c     0C 00 90 5D |  if_ne	jmp	#LR__4110
2d070     13 13 02 F6 | 	mov	arg01, local01
2d074     70 18 B0 FD | 	call	#__system____default_filbuf
2d078     FD 2A 02 F6 | 	mov	local03, result1
2d07c                 | LR__4110
2d07c     01 2A 56 F2 | 	cmps	local03, #1 wc
2d080     01 FA 65 C6 |  if_b	neg	result1, #1
2d084     1C 00 90 CD |  if_b	jmp	#LR__4111
2d088     01 2A 86 F1 | 	sub	local03, #1
2d08c     14 2B 62 FC | 	wrlong	local03, local02
2d090     04 28 06 F1 | 	add	local02, #4
2d094     14 2B 02 FB | 	rdlong	local03, local02
2d098     15 FB C1 FA | 	rdbyte	result1, local03
2d09c     01 2A 06 F1 | 	add	local03, #1
2d0a0     14 2B 62 FC | 	wrlong	local03, local02
2d0a4                 | LR__4111
2d0a4     A7 F0 03 F6 | 	mov	ptra, fp
2d0a8     B2 00 A0 FD | 	call	#popregs_
2d0ac                 | __system____default_getc_ret
2d0ac     2D 00 64 FD | 	ret
2d0b0                 | 
2d0b0                 | __system____default_putc
2d0b0     06 4A 05 F6 | 	mov	COUNT_, #6
2d0b4     A8 00 A0 FD | 	call	#pushregs_
2d0b8     09 27 02 F6 | 	mov	local01, arg01
2d0bc     0A 29 02 F6 | 	mov	local02, arg02
2d0c0     14 2B 02 FB | 	rdlong	local03, local02
2d0c4     08 2A 06 F1 | 	add	local03, #8
2d0c8     15 FB 01 FB | 	rdlong	result1, local03
2d0cc     01 FA CD F7 | 	test	result1, #1 wz
2d0d0     14 13 02 56 |  if_ne	mov	arg01, local02
2d0d4     80 00 B0 5D |  if_ne	call	#__system____default_flush
2d0d8     15 2D 02 FB | 	rdlong	local04, local03
2d0dc     02 2C 46 F5 | 	or	local04, #2
2d0e0     15 2D 62 FC | 	wrlong	local04, local03
2d0e4     08 2A 86 F1 | 	sub	local03, #8
2d0e8     15 2F 02 FB | 	rdlong	local05, local03
2d0ec     10 2A 06 F1 | 	add	local03, #16
2d0f0     15 15 02 FB | 	rdlong	arg02, local03
2d0f4     10 2A 86 F1 | 	sub	local03, #16
2d0f8     17 FB 01 F6 | 	mov	result1, local05
2d0fc     0A FB 01 F1 | 	add	result1, arg02
2d100     FD 26 42 FC | 	wrbyte	local01, result1
2d104     13 27 E2 F8 | 	getbyte	local01, local01, #0
2d108     01 2E 06 F1 | 	add	local05, #1
2d10c     15 2F 62 FC | 	wrlong	local05, local03
2d110     06 28 06 F1 | 	add	local02, #6
2d114     14 31 EA FA | 	rdword	local06, local02 wz
2d118     06 28 86 F1 | 	sub	local02, #6
2d11c     0C 2A 06 51 |  if_ne	add	local03, #12
2d120     15 2D 02 5B |  if_ne	rdlong	local04, local03
2d124     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2d128     0C 00 90 AD |  if_e	jmp	#LR__4120
2d12c     0A 26 0E F2 | 	cmp	local01, #10 wz
2d130     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2d134     10 00 90 5D |  if_ne	jmp	#LR__4121
2d138                 | LR__4120
2d138     14 13 02 F6 | 	mov	arg01, local02
2d13c     18 00 B0 FD | 	call	#__system____default_flush
2d140     00 FA 0D F2 | 	cmp	result1, #0 wz
2d144     01 26 66 56 |  if_ne	neg	local01, #1
2d148                 | LR__4121
2d148     13 FB 01 F6 | 	mov	result1, local01
2d14c     A7 F0 03 F6 | 	mov	ptra, fp
2d150     B2 00 A0 FD | 	call	#popregs_
2d154                 | __system____default_putc_ret
2d154     2D 00 64 FD | 	ret
2d158                 | 
2d158                 | __system____default_flush
2d158     06 4A 05 F6 | 	mov	COUNT_, #6
2d15c     A8 00 A0 FD | 	call	#pushregs_
2d160     09 27 02 F6 | 	mov	local01, arg01
2d164     13 29 02 FB | 	rdlong	local02, local01
2d168     14 2B 02 FB | 	rdlong	local03, local02
2d16c     08 28 06 F1 | 	add	local02, #8
2d170     14 FB 01 FB | 	rdlong	result1, local02
2d174     08 28 86 F1 | 	sub	local02, #8
2d178     02 FA CD F7 | 	test	result1, #2 wz
2d17c     D0 00 90 AD |  if_e	jmp	#LR__4132
2d180     01 2A 56 F2 | 	cmps	local03, #1 wc
2d184     20 01 90 CD |  if_b	jmp	#LR__4134
2d188     08 26 06 F1 | 	add	local01, #8
2d18c     13 FB 01 FB | 	rdlong	result1, local01
2d190     08 26 86 F1 | 	sub	local01, #8
2d194     40 FA CD F7 | 	test	result1, #64 wz
2d198     68 00 90 AD |  if_e	jmp	#LR__4131
2d19c     08 26 06 F1 | 	add	local01, #8
2d1a0     13 17 02 FB | 	rdlong	arg03, local01
2d1a4     08 26 86 F1 | 	sub	local01, #8
2d1a8     80 16 CE F7 | 	test	arg03, #128 wz
2d1ac     54 00 90 AD |  if_e	jmp	#LR__4130
2d1b0     30 26 06 F1 | 	add	local01, #48
2d1b4     13 2D 02 FB | 	rdlong	local04, local01
2d1b8     16 2F 02 F6 | 	mov	local05, local04
2d1bc     30 26 86 F1 | 	sub	local01, #48
2d1c0     13 2E 46 F7 | 	zerox	local05, #19
2d1c4     14 2C 46 F0 | 	shr	local04, #20
2d1c8     02 2C 66 F0 | 	shl	local04, #2
2d1cc     ED 2C 02 F1 | 	add	local04, __methods__
2d1d0     16 2D 02 FB | 	rdlong	local04, local04
2d1d4     13 13 02 F6 | 	mov	arg01, local01
2d1d8     00 14 06 F6 | 	mov	arg02, #0
2d1dc     02 16 06 F6 | 	mov	arg03, #2
2d1e0     F2 30 02 F6 | 	mov	local06, objptr
2d1e4     17 E5 01 F6 | 	mov	objptr, local05
2d1e8     2D 2C 62 FD | 	call	local04
2d1ec     18 E5 01 F6 | 	mov	objptr, local06
2d1f0     08 26 06 F1 | 	add	local01, #8
2d1f4     13 31 02 FB | 	rdlong	local06, local01
2d1f8     80 30 26 F5 | 	andn	local06, #128
2d1fc     13 31 62 FC | 	wrlong	local06, local01
2d200     08 26 86 F1 | 	sub	local01, #8
2d204                 | LR__4130
2d204                 | LR__4131
2d204     18 26 06 F1 | 	add	local01, #24
2d208     13 2D 02 FB | 	rdlong	local04, local01
2d20c     16 2F 02 F6 | 	mov	local05, local04
2d210     18 26 86 F1 | 	sub	local01, #24
2d214     13 2E 46 F7 | 	zerox	local05, #19
2d218     14 2C 46 F0 | 	shr	local04, #20
2d21c     02 2C 66 F0 | 	shl	local04, #2
2d220     ED 2C 02 F1 | 	add	local04, __methods__
2d224     16 2D 02 FB | 	rdlong	local04, local04
2d228     10 28 06 F1 | 	add	local02, #16
2d22c     14 15 02 FB | 	rdlong	arg02, local02
2d230     10 28 86 F1 | 	sub	local02, #16
2d234     13 13 02 F6 | 	mov	arg01, local01
2d238     15 17 02 F6 | 	mov	arg03, local03
2d23c     F2 30 02 F6 | 	mov	local06, objptr
2d240     17 E5 01 F6 | 	mov	objptr, local05
2d244     2D 2C 62 FD | 	call	local04
2d248     18 E5 01 F6 | 	mov	objptr, local06
2d24c     58 00 90 FD | 	jmp	#LR__4134
2d250                 | LR__4132
2d250     08 28 06 F1 | 	add	local02, #8
2d254     14 31 02 FB | 	rdlong	local06, local02
2d258     08 28 86 F1 | 	sub	local02, #8
2d25c     01 30 CE F7 | 	test	local06, #1 wz
2d260     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2d264     40 00 90 AD |  if_e	jmp	#LR__4133
2d268     30 26 06 F1 | 	add	local01, #48
2d26c     13 2D 02 FB | 	rdlong	local04, local01
2d270     16 2F 02 F6 | 	mov	local05, local04
2d274     30 26 86 F1 | 	sub	local01, #48
2d278     13 2E 46 F7 | 	zerox	local05, #19
2d27c     14 2C 46 F0 | 	shr	local04, #20
2d280     02 2C 66 F0 | 	shl	local04, #2
2d284     ED 2C 02 F1 | 	add	local04, __methods__
2d288     16 2D 02 FB | 	rdlong	local04, local04
2d28c     13 13 02 F6 | 	mov	arg01, local01
2d290     15 15 62 F6 | 	neg	arg02, local03
2d294     01 16 06 F6 | 	mov	arg03, #1
2d298     F2 30 02 F6 | 	mov	local06, objptr
2d29c     17 E5 01 F6 | 	mov	objptr, local05
2d2a0     2D 2C 62 FD | 	call	local04
2d2a4     18 E5 01 F6 | 	mov	objptr, local06
2d2a8                 | LR__4133
2d2a8                 | LR__4134
2d2a8     14 01 68 FC | 	wrlong	#0, local02
2d2ac     04 28 06 F1 | 	add	local02, #4
2d2b0     14 01 68 FC | 	wrlong	#0, local02
2d2b4     04 28 06 F1 | 	add	local02, #4
2d2b8     14 01 68 FC | 	wrlong	#0, local02
2d2bc     00 FA 05 F6 | 	mov	result1, #0
2d2c0     A7 F0 03 F6 | 	mov	ptra, fp
2d2c4     B2 00 A0 FD | 	call	#popregs_
2d2c8                 | __system____default_flush_ret
2d2c8     2D 00 64 FD | 	ret
2d2cc                 | 
2d2cc                 | __system____default_buffer_init
2d2cc     02 4A 05 F6 | 	mov	COUNT_, #2
2d2d0     A8 00 A0 FD | 	call	#pushregs_
2d2d4     09 27 02 F6 | 	mov	local01, arg01
2d2d8     13 29 02 FB | 	rdlong	local02, local01
2d2dc     13 13 02 F6 | 	mov	arg01, local01
2d2e0     34 03 B0 FD | 	call	#__system___isatty
2d2e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d2e8     06 26 06 51 |  if_ne	add	local01, #6
2d2ec     13 0B 58 5C |  if_ne	wrword	#5, local01
2d2f0     06 26 06 A1 |  if_e	add	local01, #6
2d2f4     13 0D 58 AC |  if_e	wrword	#6, local01
2d2f8     14 28 06 F1 | 	add	local02, #20
2d2fc     14 27 02 F6 | 	mov	local01, local02
2d300     04 28 86 F1 | 	sub	local02, #4
2d304     14 27 62 FC | 	wrlong	local01, local02
2d308     04 28 86 F1 | 	sub	local02, #4
2d30c     02 00 80 FF 
2d310     14 01 68 FC | 	wrlong	##1024, local02
2d314     00 FA 05 F6 | 	mov	result1, #0
2d318     A7 F0 03 F6 | 	mov	ptra, fp
2d31c     B2 00 A0 FD | 	call	#popregs_
2d320                 | __system____default_buffer_init_ret
2d320     2D 00 64 FD | 	ret
2d324                 | 
2d324                 | __system__stat
2d324     04 4A 05 F6 | 	mov	COUNT_, #4
2d328     A8 00 A0 FD | 	call	#pushregs_
2d32c     0A 27 02 F6 | 	mov	local01, arg02
2d330     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2d334     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2d338     09 15 02 F6 | 	mov	arg02, arg01
2d33c     14 13 02 F6 | 	mov	arg01, local02
2d340     00 16 06 F6 | 	mov	arg03, #0
2d344     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2d348     5C B5 BF FD | 	call	#__system____getvfsforfile
2d34c     FD 2A 0A F6 | 	mov	local03, result1 wz
2d350     10 00 90 AD |  if_e	jmp	#LR__4140
2d354     34 2A 06 F1 | 	add	local03, #52
2d358     15 17 0A FB | 	rdlong	arg03, local03 wz
2d35c     34 2A 86 F1 | 	sub	local03, #52
2d360     14 00 90 5D |  if_ne	jmp	#LR__4141
2d364                 | LR__4140
2d364     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d368     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2d36c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d370     01 FA 65 F6 | 	neg	result1, #1
2d374     68 00 90 FD | 	jmp	#LR__4142
2d378                 | LR__4141
2d378     13 13 02 F6 | 	mov	arg01, local01
2d37c     00 14 06 F6 | 	mov	arg02, #0
2d380     30 16 06 F6 | 	mov	arg03, #48
2d384     09 2D 02 F6 | 	mov	local04, arg01
2d388     98 00 A0 FD | 	call	#\builtin_bytefill_
2d38c     16 FB 01 F6 | 	mov	result1, local04
2d390     14 13 CA FA | 	rdbyte	arg01, local02 wz
2d394     08 26 06 A1 |  if_e	add	local01, #8
2d398     08 00 80 AF 
2d39c     13 FF 6B AC |  if_e	wrlong	##4607, local01
2d3a0     00 FA 05 A6 |  if_e	mov	result1, #0
2d3a4     38 00 90 AD |  if_e	jmp	#LR__4142
2d3a8     34 2A 06 F1 | 	add	local03, #52
2d3ac     15 2B 02 FB | 	rdlong	local03, local03
2d3b0     15 2D 02 F6 | 	mov	local04, local03
2d3b4     13 2A 46 F7 | 	zerox	local03, #19
2d3b8     14 2C 46 F0 | 	shr	local04, #20
2d3bc     02 2C 66 F0 | 	shl	local04, #2
2d3c0     ED 2C 02 F1 | 	add	local04, __methods__
2d3c4     16 2D 02 FB | 	rdlong	local04, local04
2d3c8     14 13 02 F6 | 	mov	arg01, local02
2d3cc     13 15 02 F6 | 	mov	arg02, local01
2d3d0     F2 28 02 F6 | 	mov	local02, objptr
2d3d4     15 E5 01 F6 | 	mov	objptr, local03
2d3d8     2D 2C 62 FD | 	call	local04
2d3dc     14 E5 01 F6 | 	mov	objptr, local02
2d3e0                 | LR__4142
2d3e0     A7 F0 03 F6 | 	mov	ptra, fp
2d3e4     B2 00 A0 FD | 	call	#popregs_
2d3e8                 | __system__stat_ret
2d3e8     2D 00 64 FD | 	ret
2d3ec                 | 
2d3ec                 | __system__write
2d3ec     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d3f0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2d3f4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2d3f8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2d3fc     01 FA 65 36 |  if_ae	neg	result1, #1
2d400     20 00 90 3D |  if_ae	jmp	#LR__4150
2d404     34 12 06 FD | 	qmul	arg01, #52
2d408     02 00 00 FF 
2d40c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2d410     18 12 62 FD | 	getqx	arg01
2d414     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2d418     02 00 00 FF 
2d41c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2d420     14 10 B0 FD | 	call	#__system___vfswrite
2d424                 | LR__4150
2d424                 | __system__write_ret
2d424     2D 00 64 FD | 	ret
2d428                 | 
2d428                 | __system__read
2d428     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d42c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2d430     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2d434     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2d438     01 FA 65 36 |  if_ae	neg	result1, #1
2d43c     20 00 90 3D |  if_ae	jmp	#LR__4160
2d440     34 12 06 FD | 	qmul	arg01, #52
2d444     02 00 00 FF 
2d448     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2d44c     18 12 62 FD | 	getqx	arg01
2d450     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2d454     02 00 00 FF 
2d458     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2d45c     A0 11 B0 FD | 	call	#__system___vfsread
2d460                 | LR__4160
2d460                 | __system__read_ret
2d460     2D 00 64 FD | 	ret
2d464                 | 
2d464                 | __system__close
2d464     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d468     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2d46c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2d470     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2d474     01 FA 65 36 |  if_ae	neg	result1, #1
2d478     20 00 90 3D |  if_ae	jmp	#LR__4170
2d47c     34 12 06 FD | 	qmul	arg01, #52
2d480     02 00 00 FF 
2d484     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2d488     18 12 62 FD | 	getqx	arg01
2d48c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2d490     02 00 00 FF 
2d494     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2d498     1C F9 BF FD | 	call	#__system___closeraw
2d49c                 | LR__4170
2d49c                 | __system__close_ret
2d49c     2D 00 64 FD | 	ret
2d4a0                 | 
2d4a0                 | __system__lseek
2d4a0     06 4A 05 F6 | 	mov	COUNT_, #6
2d4a4     A8 00 A0 FD | 	call	#pushregs_
2d4a8     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d4ac     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2d4b0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2d4b4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2d4b8     01 FA 65 36 |  if_ae	neg	result1, #1
2d4bc     C4 00 90 3D |  if_ae	jmp	#LR__4181
2d4c0     34 12 06 FD | 	qmul	arg01, #52
2d4c4     02 00 00 FF 
2d4c8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2d4cc     18 26 62 FD | 	getqx	local01
2d4d0     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2d4d4     30 26 06 F1 | 	add	local01, #48
2d4d8     13 13 0A FB | 	rdlong	arg01, local01 wz
2d4dc     30 26 86 F1 | 	sub	local01, #48
2d4e0     02 00 00 FF 
2d4e4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2d4e8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d4ec     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2d4f0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d4f4     01 FA 65 A6 |  if_e	neg	result1, #1
2d4f8     88 00 90 AD |  if_e	jmp	#LR__4181
2d4fc     08 26 06 F1 | 	add	local01, #8
2d500     13 29 02 FB | 	rdlong	local02, local01
2d504     08 26 86 F1 | 	sub	local01, #8
2d508     40 28 CE F7 | 	test	local02, #64 wz
2d50c     08 26 06 51 |  if_ne	add	local01, #8
2d510     13 29 02 5B |  if_ne	rdlong	local02, local01
2d514     80 28 46 55 |  if_ne	or	local02, #128
2d518     13 29 62 5C |  if_ne	wrlong	local02, local01
2d51c     08 26 86 51 |  if_ne	sub	local01, #8
2d520     30 26 06 F1 | 	add	local01, #48
2d524     13 2B 02 FB | 	rdlong	local03, local01
2d528     15 2D 02 F6 | 	mov	local04, local03
2d52c     30 26 86 F1 | 	sub	local01, #48
2d530     13 2C 46 F7 | 	zerox	local04, #19
2d534     14 2A 46 F0 | 	shr	local03, #20
2d538     02 2A 66 F0 | 	shl	local03, #2
2d53c     ED 2A 02 F1 | 	add	local03, __methods__
2d540     15 2B 02 FB | 	rdlong	local03, local03
2d544     13 13 02 F6 | 	mov	arg01, local01
2d548     F2 2E 02 F6 | 	mov	local05, objptr
2d54c     16 E5 01 F6 | 	mov	objptr, local04
2d550     2D 2A 62 FD | 	call	local03
2d554     17 E5 01 F6 | 	mov	objptr, local05
2d558     FD 30 02 F6 | 	mov	local06, result1
2d55c     00 30 56 F2 | 	cmps	local06, #0 wc
2d560     1C 00 90 3D |  if_ae	jmp	#LR__4180
2d564     18 13 6A F6 | 	neg	arg01, local06 wz
2d568     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d56c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d570     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d574     01 FA 65 56 |  if_ne	neg	result1, #1
2d578     00 FA 05 A6 |  if_e	mov	result1, #0
2d57c     04 00 90 FD | 	jmp	#LR__4181
2d580                 | LR__4180
2d580     18 FB 01 F6 | 	mov	result1, local06
2d584                 | LR__4181
2d584     A7 F0 03 F6 | 	mov	ptra, fp
2d588     B2 00 A0 FD | 	call	#popregs_
2d58c                 | __system__lseek_ret
2d58c     2D 00 64 FD | 	ret
2d590                 | 
2d590                 | __system___ioctl
2d590     03 4A 05 F6 | 	mov	COUNT_, #3
2d594     A8 00 A0 FD | 	call	#pushregs_
2d598     00 12 4E F2 | 	cmps	arg01, #0 wz
2d59c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d5a0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d5a4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d5a8     01 FA 65 A6 |  if_e	neg	result1, #1
2d5ac     5C 00 90 AD |  if_e	jmp	#LR__4191
2d5b0     28 12 06 F1 | 	add	arg01, #40
2d5b4     09 27 02 FB | 	rdlong	local01, arg01
2d5b8     13 29 02 F6 | 	mov	local02, local01
2d5bc     28 12 86 F1 | 	sub	arg01, #40
2d5c0     13 28 46 F7 | 	zerox	local02, #19
2d5c4     14 26 46 F0 | 	shr	local01, #20
2d5c8     02 26 66 F0 | 	shl	local01, #2
2d5cc     ED 26 02 F1 | 	add	local01, __methods__
2d5d0     13 27 02 FB | 	rdlong	local01, local01
2d5d4     F2 2A 02 F6 | 	mov	local03, objptr
2d5d8     14 E5 01 F6 | 	mov	objptr, local02
2d5dc     2D 26 62 FD | 	call	local01
2d5e0     15 E5 01 F6 | 	mov	objptr, local03
2d5e4     FD 12 0A F6 | 	mov	arg01, result1 wz
2d5e8     1C 00 90 AD |  if_e	jmp	#LR__4190
2d5ec     00 12 4E F2 | 	cmps	arg01, #0 wz
2d5f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d5f4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d5f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d5fc     01 FA 65 56 |  if_ne	neg	result1, #1
2d600     00 FA 05 A6 |  if_e	mov	result1, #0
2d604     04 00 90 FD | 	jmp	#LR__4191
2d608                 | LR__4190
2d608     00 FA 05 F6 | 	mov	result1, #0
2d60c                 | LR__4191
2d60c     A7 F0 03 F6 | 	mov	ptra, fp
2d610     B2 00 A0 FD | 	call	#popregs_
2d614                 | __system___ioctl_ret
2d614     2D 00 64 FD | 	ret
2d618                 | 
2d618                 | __system___isatty
2d618     00 4A 05 F6 | 	mov	COUNT_, #0
2d61c     A8 00 A0 FD | 	call	#pushregs_
2d620     0C F0 07 F1 | 	add	ptra, #12
2d624     04 4E 05 F1 | 	add	fp, #4
2d628     A7 12 62 FC | 	wrlong	arg01, fp
2d62c     04 4E 05 F1 | 	add	fp, #4
2d630     A7 16 02 F6 | 	mov	arg03, fp
2d634     08 4E 85 F1 | 	sub	fp, #8
2d638     00 15 06 F6 | 	mov	arg02, #256
2d63c     50 FF BF FD | 	call	#__system___ioctl
2d640     00 FA 0D F2 | 	cmp	result1, #0 wz
2d644     01 FA 05 A6 |  if_e	mov	result1, #1
2d648     00 FA 05 56 |  if_ne	mov	result1, #0
2d64c     A7 F0 03 F6 | 	mov	ptra, fp
2d650     B2 00 A0 FD | 	call	#popregs_
2d654                 | __system___isatty_ret
2d654     2D 00 64 FD | 	ret
2d658                 | 
2d658                 | __system____getftab
2d658     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d65c     34 12 06 CD |  if_b	qmul	arg01, #52
2d660     00 FA 05 36 |  if_ae	mov	result1, #0
2d664     02 00 00 CF 
2d668     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2d66c     18 FA 61 CD |  if_b	getqx	result1
2d670     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2d674     02 00 00 CF 
2d678     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2d67c                 | __system____getftab_ret
2d67c     2D 00 64 FD | 	ret
2d680                 | 
2d680                 | __system__strncpy
2d680     09 01 02 F6 | 	mov	_var01, arg01
2d684                 | LR__4200
2d684     01 16 86 F1 | 	sub	arg03, #1
2d688     00 16 56 F2 | 	cmps	arg03, #0 wc
2d68c     18 00 90 CD |  if_b	jmp	#LR__4201
2d690     0A FB C1 FA | 	rdbyte	result1, arg02
2d694     00 FB 41 FC | 	wrbyte	result1, _var01
2d698     01 14 06 F1 | 	add	arg02, #1
2d69c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2d6a0     01 00 06 F1 | 	add	_var01, #1
2d6a4     DC FF 9F 5D |  if_ne	jmp	#LR__4200
2d6a8                 | LR__4201
2d6a8     97 0C 48 FB | 	callpa	#(@LR__4203-@LR__4202)>>2,fcache_load_ptr_
2d6ac                 | LR__4202
2d6ac     01 16 86 F1 | 	sub	arg03, #1
2d6b0     00 16 56 F2 | 	cmps	arg03, #0 wc
2d6b4     00 03 02 36 |  if_ae	mov	_var02, _var01
2d6b8     01 00 06 31 |  if_ae	add	_var01, #1
2d6bc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2d6c0     E8 FF 9F 3D |  if_ae	jmp	#LR__4202
2d6c4                 | LR__4203
2d6c4     09 FB 01 F6 | 	mov	result1, arg01
2d6c8                 | __system__strncpy_ret
2d6c8     2D 00 64 FD | 	ret
2d6cc                 | 
2d6cc                 | __system__strncat
2d6cc     00 14 4E F2 | 	cmps	arg02, #0 wz
2d6d0     54 00 90 AD |  if_e	jmp	#LR__4215
2d6d4     01 16 16 F2 | 	cmp	arg03, #1 wc
2d6d8     4C 00 90 CD |  if_b	jmp	#LR__4215
2d6dc     09 01 02 F6 | 	mov	_var01, arg01
2d6e0     97 06 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
2d6e4                 | LR__4210
2d6e4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2d6e8     01 00 06 51 |  if_ne	add	_var01, #1
2d6ec     F4 FF 9F 5D |  if_ne	jmp	#LR__4210
2d6f0                 | LR__4211
2d6f0     0B 03 02 F6 | 	mov	_var02, arg03
2d6f4     97 16 48 FB | 	callpa	#(@LR__4213-@LR__4212)>>2,fcache_load_ptr_
2d6f8                 | LR__4212
2d6f8     0A 05 C2 FA | 	rdbyte	_var03, arg02
2d6fc     02 07 02 F6 | 	mov	_var04, _var03
2d700     07 06 4E F7 | 	zerox	_var04, #7 wz
2d704     01 14 06 F1 | 	add	arg02, #1
2d708     18 00 90 AD |  if_e	jmp	#LR__4214
2d70c     01 02 86 F1 | 	sub	_var02, #1
2d710     00 02 56 F2 | 	cmps	_var02, #0 wc
2d714     00 07 02 36 |  if_ae	mov	_var04, _var01
2d718     01 00 06 31 |  if_ae	add	_var01, #1
2d71c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2d720     D4 FF 9F 3D |  if_ae	jmp	#LR__4212
2d724                 | LR__4213
2d724                 | LR__4214
2d724     00 01 48 FC | 	wrbyte	#0, _var01
2d728                 | LR__4215
2d728     09 FB 01 F6 | 	mov	result1, arg01
2d72c                 | __system__strncat_ret
2d72c     2D 00 64 FD | 	ret
2d730                 | 
2d730                 | __system__strncmp
2d730     09 01 0A F6 | 	mov	_var01, arg01 wz
2d734     14 00 90 5D |  if_ne	jmp	#LR__4220
2d738     00 14 0E F2 | 	cmp	arg02, #0 wz
2d73c     01 02 66 56 |  if_ne	neg	_var02, #1
2d740     00 02 06 A6 |  if_e	mov	_var02, #0
2d744     01 FB 01 F6 | 	mov	result1, _var02
2d748     74 00 90 FD | 	jmp	#__system__strncmp_ret
2d74c                 | LR__4220
2d74c     00 14 0E F2 | 	cmp	arg02, #0 wz
2d750     01 FA 05 A6 |  if_e	mov	result1, #1
2d754     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2d758     0B 05 02 F6 | 	mov	_var03, arg03
2d75c     97 16 48 FB | 	callpa	#(@LR__4222-@LR__4221)>>2,fcache_load_ptr_
2d760                 | LR__4221
2d760     00 07 C2 FA | 	rdbyte	_var04, _var01
2d764     0A 09 02 F6 | 	mov	_var05, arg02
2d768     04 0B C2 FA | 	rdbyte	_var06, _var05
2d76c     01 04 86 F1 | 	sub	_var03, #1
2d770     00 04 56 F2 | 	cmps	_var03, #0 wc
2d774     01 00 06 F1 | 	add	_var01, #1
2d778     01 14 06 F1 | 	add	arg02, #1
2d77c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2d780     08 00 90 2D |  if_nc_and_z	jmp	#LR__4223
2d784     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2d788     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4221
2d78c                 | LR__4222
2d78c                 | LR__4223
2d78c     00 04 56 F2 | 	cmps	_var03, #0 wc
2d790     00 FA 05 C6 |  if_b	mov	result1, #0
2d794     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2d798     05 07 0A F2 | 	cmp	_var04, _var06 wz
2d79c     00 FA 05 A6 |  if_e	mov	result1, #0
2d7a0     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2d7a4     00 06 0E F2 | 	cmp	_var04, #0 wz
2d7a8     01 FA 65 A6 |  if_e	neg	result1, #1
2d7ac     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2d7b0     00 0A 0E F2 | 	cmp	_var06, #0 wz
2d7b4     01 FA 05 A6 |  if_e	mov	result1, #1
2d7b8     03 FB 01 56 |  if_ne	mov	result1, _var04
2d7bc     05 FB 81 51 |  if_ne	sub	result1, _var06
2d7c0                 | __system__strncmp_ret
2d7c0     2D 00 64 FD | 	ret
2d7c4                 | 
2d7c4                 | __system____root_opendir
2d7c4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2d7c8     04 12 06 F1 | 	add	arg01, #4
2d7cc     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2d7d0     00 FA 05 F6 | 	mov	result1, #0
2d7d4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2d7d8                 | __system____root_opendir_ret
2d7d8     2D 00 64 FD | 	ret
2d7dc                 | 
2d7dc                 | __system____root_readdir
2d7dc     03 4A 05 F6 | 	mov	COUNT_, #3
2d7e0     A8 00 A0 FD | 	call	#pushregs_
2d7e4     09 27 02 F6 | 	mov	local01, arg01
2d7e8     0A 29 02 F6 | 	mov	local02, arg02
2d7ec     04 26 06 F1 | 	add	local01, #4
2d7f0     13 2B 02 FB | 	rdlong	local03, local01
2d7f4     04 26 86 F1 | 	sub	local01, #4
2d7f8                 | LR__4230
2d7f8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2d7fc     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2d800     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2d804     01 FA 65 A6 |  if_e	neg	result1, #1
2d808     48 00 90 AD |  if_e	jmp	#LR__4231
2d80c     15 17 0A FB | 	rdlong	arg03, local03 wz
2d810     04 2A 06 A1 |  if_e	add	local03, #4
2d814     E0 FF 9F AD |  if_e	jmp	#LR__4230
2d818     15 15 02 FB | 	rdlong	arg02, local03
2d81c     01 14 06 F1 | 	add	arg02, #1
2d820     14 13 02 F6 | 	mov	arg01, local02
2d824     40 16 06 F6 | 	mov	arg03, #64
2d828     54 FE BF FD | 	call	#__system__strncpy
2d82c     50 28 06 F1 | 	add	local02, #80
2d830     14 03 48 FC | 	wrbyte	#1, local02
2d834     08 28 86 F1 | 	sub	local02, #8
2d838     14 01 68 FC | 	wrlong	#0, local02
2d83c     04 28 06 F1 | 	add	local02, #4
2d840     14 01 68 FC | 	wrlong	#0, local02
2d844     04 2A 06 F1 | 	add	local03, #4
2d848     04 26 06 F1 | 	add	local01, #4
2d84c     13 2B 62 FC | 	wrlong	local03, local01
2d850     00 FA 05 F6 | 	mov	result1, #0
2d854                 | LR__4231
2d854     A7 F0 03 F6 | 	mov	ptra, fp
2d858     B2 00 A0 FD | 	call	#popregs_
2d85c                 | __system____root_readdir_ret
2d85c     2D 00 64 FD | 	ret
2d860                 | 
2d860                 | __system____root_closedir
2d860     00 FA 05 F6 | 	mov	result1, #0
2d864                 | __system____root_closedir_ret
2d864     2D 00 64 FD | 	ret
2d868                 | 
2d868                 | __system____root_stat
2d868     0A 01 02 F6 | 	mov	_var01, arg02
2d86c     00 13 02 F6 | 	mov	arg01, _var01
2d870     00 14 06 F6 | 	mov	arg02, #0
2d874     30 16 06 F6 | 	mov	arg03, #48
2d878     98 00 A0 FD | 	call	#\builtin_bytefill_
2d87c     08 00 06 F1 | 	add	_var01, #8
2d880     08 00 80 FF 
2d884     00 FF 6B FC | 	wrlong	##4607, _var01
2d888     00 FA 05 F6 | 	mov	result1, #0
2d88c                 | __system____root_stat_ret
2d88c     2D 00 64 FD | 	ret
2d890                 | 
2d890                 | __system___normalizeName
2d890     00 00 06 F6 | 	mov	_var01, #0
2d894     09 03 02 F6 | 	mov	_var02, arg01
2d898     01 05 02 F6 | 	mov	_var03, _var02
2d89c                 | LR__4240
2d89c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2d8a0     5C 01 90 AD |  if_e	jmp	#LR__4259
2d8a4     00 00 0E F2 | 	cmp	_var01, #0 wz
2d8a8     02 07 02 56 |  if_ne	mov	_var04, _var03
2d8ac     01 04 06 51 |  if_ne	add	_var03, #1
2d8b0     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2d8b4     00 00 06 56 |  if_ne	mov	_var01, #0
2d8b8     01 07 C2 FA | 	rdbyte	_var04, _var02
2d8bc     2E 06 0E F2 | 	cmp	_var04, #46 wz
2d8c0     D8 00 90 5D |  if_ne	jmp	#LR__4252
2d8c4     01 02 06 F1 | 	add	_var02, #1
2d8c8     01 07 C2 FA | 	rdbyte	_var04, _var02
2d8cc     01 02 86 F1 | 	sub	_var02, #1
2d8d0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d8d4     18 00 90 AD |  if_e	jmp	#LR__4241
2d8d8     01 02 06 F1 | 	add	_var02, #1
2d8dc     01 09 C2 FA | 	rdbyte	_var05, _var02
2d8e0     01 02 86 F1 | 	sub	_var02, #1
2d8e4     04 0B 02 F6 | 	mov	_var06, _var05
2d8e8     07 0A 4E F7 | 	zerox	_var06, #7 wz
2d8ec     10 00 90 5D |  if_ne	jmp	#LR__4242
2d8f0                 | LR__4241
2d8f0     01 0D 02 F6 | 	mov	_var07, _var02
2d8f4     01 0C 06 F1 | 	add	_var07, #1
2d8f8     06 03 02 F6 | 	mov	_var02, _var07
2d8fc     E0 00 90 FD | 	jmp	#LR__4256
2d900                 | LR__4242
2d900     01 02 06 F1 | 	add	_var02, #1
2d904     01 0D C2 FA | 	rdbyte	_var07, _var02
2d908     01 02 86 F1 | 	sub	_var02, #1
2d90c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2d910     2E 06 0E F2 | 	cmp	_var04, #46 wz
2d914     84 00 90 5D |  if_ne	jmp	#LR__4251
2d918     02 02 06 F1 | 	add	_var02, #2
2d91c     01 0D C2 FA | 	rdbyte	_var07, _var02
2d920     02 02 86 F1 | 	sub	_var02, #2
2d924     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2d928     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d92c     18 00 90 AD |  if_e	jmp	#LR__4243
2d930     02 02 06 F1 | 	add	_var02, #2
2d934     01 09 C2 FA | 	rdbyte	_var05, _var02
2d938     02 02 86 F1 | 	sub	_var02, #2
2d93c     04 0B 02 F6 | 	mov	_var06, _var05
2d940     07 0A 4E F7 | 	zerox	_var06, #7 wz
2d944     54 00 90 5D |  if_ne	jmp	#LR__4250
2d948                 | LR__4243
2d948     02 02 06 F1 | 	add	_var02, #2
2d94c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2d950     40 00 90 ED |  if_be	jmp	#LR__4249
2d954     02 0F 02 F6 | 	mov	_var08, _var03
2d958     01 0E 86 F1 | 	sub	_var08, #1
2d95c                 | LR__4244
2d95c     07 07 C2 FA | 	rdbyte	_var04, _var08
2d960     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d964     0C 00 90 5D |  if_ne	jmp	#LR__4245
2d968     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2d96c     01 0E 86 11 |  if_a	sub	_var08, #1
2d970     E8 FF 9F 1D |  if_a	jmp	#LR__4244
2d974                 | LR__4245
2d974     97 0C 48 FB | 	callpa	#(@LR__4247-@LR__4246)>>2,fcache_load_ptr_
2d978                 | LR__4246
2d978     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2d97c     10 00 90 ED |  if_be	jmp	#LR__4248
2d980     07 07 C2 FA | 	rdbyte	_var04, _var08
2d984     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d988     01 0E 86 51 |  if_ne	sub	_var08, #1
2d98c     E8 FF 9F 5D |  if_ne	jmp	#LR__4246
2d990                 | LR__4247
2d990                 | LR__4248
2d990     07 05 02 F6 | 	mov	_var03, _var08
2d994                 | LR__4249
2d994     01 00 06 F6 | 	mov	_var01, #1
2d998     44 00 90 FD | 	jmp	#LR__4256
2d99c                 | LR__4250
2d99c                 | LR__4251
2d99c                 | LR__4252
2d99c     97 18 48 FB | 	callpa	#(@LR__4254-@LR__4253)>>2,fcache_load_ptr_
2d9a0                 | LR__4253
2d9a0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2d9a4     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2d9a8     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2d9ac     20 00 90 AD |  if_e	jmp	#LR__4255
2d9b0     01 0B 02 F6 | 	mov	_var06, _var02
2d9b4     01 09 02 F6 | 	mov	_var05, _var02
2d9b8     01 08 06 F1 | 	add	_var05, #1
2d9bc     05 11 C2 FA | 	rdbyte	_var09, _var06
2d9c0     04 03 02 F6 | 	mov	_var02, _var05
2d9c4     02 11 42 FC | 	wrbyte	_var09, _var03
2d9c8     01 04 06 F1 | 	add	_var03, #1
2d9cc     D0 FF 9F FD | 	jmp	#LR__4253
2d9d0                 | LR__4254
2d9d0                 | LR__4255
2d9d0     01 07 C2 FA | 	rdbyte	_var04, _var02
2d9d4     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d9d8     C0 FE 9F 5D |  if_ne	jmp	#LR__4240
2d9dc     01 00 06 F6 | 	mov	_var01, #1
2d9e0                 | LR__4256
2d9e0     97 0C 48 FB | 	callpa	#(@LR__4258-@LR__4257)>>2,fcache_load_ptr_
2d9e4                 | LR__4257
2d9e4     01 07 C2 FA | 	rdbyte	_var04, _var02
2d9e8     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d9ec     01 0D 02 A6 |  if_e	mov	_var07, _var02
2d9f0     01 0C 06 A1 |  if_e	add	_var07, #1
2d9f4     06 03 02 A6 |  if_e	mov	_var02, _var07
2d9f8     E8 FF 9F AD |  if_e	jmp	#LR__4257
2d9fc                 | LR__4258
2d9fc     9C FE 9F FD | 	jmp	#LR__4240
2da00                 | LR__4259
2da00     02 01 48 FC | 	wrbyte	#0, _var03
2da04                 | __system___normalizeName_ret
2da04     2D 00 64 FD | 	ret
2da08                 | 
2da08                 | __system___strrev
2da08     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2da0c     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
2da10     09 03 02 F6 | 	mov	_var02, arg01
2da14     97 06 48 FB | 	callpa	#(@LR__4261-@LR__4260)>>2,fcache_load_ptr_
2da18                 | LR__4260
2da18     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2da1c     01 02 06 51 |  if_ne	add	_var02, #1
2da20     F4 FF 9F 5D |  if_ne	jmp	#LR__4260
2da24                 | LR__4261
2da24     01 02 86 F1 | 	sub	_var02, #1
2da28     97 12 48 FB | 	callpa	#(@LR__4263-@LR__4262)>>2,fcache_load_ptr_
2da2c                 | LR__4262
2da2c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2da30     1C 00 90 ED |  if_be	jmp	#LR__4264
2da34     09 01 C2 FA | 	rdbyte	_var01, arg01
2da38     01 05 C2 FA | 	rdbyte	_var03, _var02
2da3c     09 05 42 FC | 	wrbyte	_var03, arg01
2da40     01 01 42 FC | 	wrbyte	_var01, _var02
2da44     01 12 06 F1 | 	add	arg01, #1
2da48     01 02 86 F1 | 	sub	_var02, #1
2da4c     DC FF 9F FD | 	jmp	#LR__4262
2da50                 | LR__4263
2da50                 | LR__4264
2da50                 | __system___strrev_ret
2da50     2D 00 64 FD | 	ret
2da54                 | 
2da54                 | __system___fmtpad
2da54     06 4A 05 F6 | 	mov	COUNT_, #6
2da58     A8 00 A0 FD | 	call	#pushregs_
2da5c     09 27 02 F6 | 	mov	local01, arg01
2da60     0A 29 02 F6 | 	mov	local02, arg02
2da64     0B 2B 02 F6 | 	mov	local03, arg03
2da68     14 13 EA F8 | 	getbyte	arg01, local02, #1
2da6c     16 28 46 F0 | 	shr	local02, #22
2da70     03 28 0E F5 | 	and	local02, #3 wz
2da74     00 2C 06 F6 | 	mov	local04, #0
2da78     01 28 06 A6 |  if_e	mov	local02, #1
2da7c     0C 29 CA F7 | 	test	local02, arg04 wz
2da80     00 FA 05 A6 |  if_e	mov	result1, #0
2da84     88 00 90 AD |  if_e	jmp	#LR__4273
2da88     09 2B C2 F2 | 	subr	local03, arg01
2da8c     01 2A 56 F2 | 	cmps	local03, #1 wc
2da90     00 FA 05 C6 |  if_b	mov	result1, #0
2da94     78 00 90 CD |  if_b	jmp	#LR__4273
2da98     03 28 0E F2 | 	cmp	local02, #3 wz
2da9c     18 00 90 5D |  if_ne	jmp	#LR__4270
2daa0     01 18 0E F2 | 	cmp	arg04, #1 wz
2daa4     6E 28 62 FD | 	wrz	local02
2daa8     14 2B 02 F1 | 	add	local03, local02
2daac     15 2B 52 F6 | 	abs	local03, local03 wc
2dab0     01 2A 46 F0 | 	shr	local03, #1
2dab4     15 2B 82 F6 | 	negc	local03, local03
2dab8                 | LR__4270
2dab8     01 2A 56 F2 | 	cmps	local03, #1 wc
2dabc     4C 00 90 CD |  if_b	jmp	#LR__4272
2dac0     15 2F 02 F6 | 	mov	local05, local03
2dac4                 | LR__4271
2dac4     13 29 02 F6 | 	mov	local02, local01
2dac8     13 31 02 F6 | 	mov	local06, local01
2dacc     13 28 46 F7 | 	zerox	local02, #19
2dad0     14 30 46 F0 | 	shr	local06, #20
2dad4     02 30 66 F0 | 	shl	local06, #2
2dad8     ED 30 02 F1 | 	add	local06, __methods__
2dadc     18 31 02 FB | 	rdlong	local06, local06
2dae0     20 12 06 F6 | 	mov	arg01, #32
2dae4     F2 2A 02 F6 | 	mov	local03, objptr
2dae8     14 E5 01 F6 | 	mov	objptr, local02
2daec     2D 30 62 FD | 	call	local06
2daf0     15 E5 01 F6 | 	mov	objptr, local03
2daf4     FD 30 02 F6 | 	mov	local06, result1
2daf8     00 30 56 F2 | 	cmps	local06, #0 wc
2dafc     18 FB 01 C6 |  if_b	mov	result1, local06
2db00     0C 00 90 CD |  if_b	jmp	#LR__4273
2db04     18 2D 02 F1 | 	add	local04, local06
2db08     EE 2F 6E FB | 	djnz	local05, #LR__4271
2db0c                 | LR__4272
2db0c     16 FB 01 F6 | 	mov	result1, local04
2db10                 | LR__4273
2db10     A7 F0 03 F6 | 	mov	ptra, fp
2db14     B2 00 A0 FD | 	call	#popregs_
2db18                 | __system___fmtpad_ret
2db18     2D 00 64 FD | 	ret
2db1c                 | 
2db1c                 | __system___uitoa
2db1c     04 4A 05 F6 | 	mov	COUNT_, #4
2db20     A8 00 A0 FD | 	call	#pushregs_
2db24     09 27 02 F6 | 	mov	local01, arg01
2db28     00 1A 4E F2 | 	cmps	arg05, #0 wz
2db2c     13 1B 02 F6 | 	mov	arg05, local01
2db30     00 28 06 F6 | 	mov	local02, #0
2db34     37 2A 06 56 |  if_ne	mov	local03, #55
2db38     57 2A 06 A6 |  if_e	mov	local03, #87
2db3c                 | LR__4280
2db3c     0B 15 12 FD | 	qdiv	arg02, arg03
2db40     19 2C 62 FD | 	getqy	local04
2db44     0B 15 12 FD | 	qdiv	arg02, arg03
2db48     0A 2C 16 F2 | 	cmp	local04, #10 wc
2db4c     30 2C 06 C1 |  if_b	add	local04, #48
2db50     15 2D 02 31 |  if_ae	add	local04, local03
2db54     0D 2D 42 FC | 	wrbyte	local04, arg05
2db58     01 1A 06 F1 | 	add	arg05, #1
2db5c     01 28 06 F1 | 	add	local02, #1
2db60     18 14 62 FD | 	getqx	arg02
2db64     00 14 0E F2 | 	cmp	arg02, #0 wz
2db68     D0 FF 9F 5D |  if_ne	jmp	#LR__4280
2db6c     0C 29 12 F2 | 	cmp	local02, arg04 wc
2db70     C8 FF 9F CD |  if_b	jmp	#LR__4280
2db74     0D 01 48 FC | 	wrbyte	#0, arg05
2db78     13 13 02 F6 | 	mov	arg01, local01
2db7c     88 FE BF FD | 	call	#__system___strrev
2db80     14 FB 01 F6 | 	mov	result1, local02
2db84     A7 F0 03 F6 | 	mov	ptra, fp
2db88     B2 00 A0 FD | 	call	#popregs_
2db8c                 | __system___uitoa_ret
2db8c     2D 00 64 FD | 	ret
2db90                 | 
2db90                 | __system__disassemble_0580
2db90     10 4A 05 F6 | 	mov	COUNT_, #16
2db94     A8 00 A0 FD | 	call	#pushregs_
2db98     09 27 02 F6 | 	mov	local01, arg01
2db9c     0A 29 02 F6 | 	mov	local02, arg02
2dba0     0B 2B 02 F6 | 	mov	local03, arg03
2dba4     0C 2D 02 F6 | 	mov	local04, arg04
2dba8     0D 2F 02 F6 | 	mov	local05, arg05
2dbac     17 13 52 F6 | 	abs	arg01, local05 wc
2dbb0     1F 30 C6 C9 |  if_b	decod	local06, #31
2dbb4     00 30 06 36 |  if_ae	mov	local06, #0
2dbb8     CC CF BF FD | 	call	#__system___float_fromuns
2dbbc     18 FB 61 F5 | 	xor	result1, local06
2dbc0     FD 32 02 F6 | 	mov	local07, result1
2dbc4     00 34 06 F6 | 	mov	local08, #0
2dbc8     13 13 02 F6 | 	mov	arg01, local01
2dbcc     00 14 06 F6 | 	mov	arg02, #0
2dbd0     01 16 06 F6 | 	mov	arg03, #1
2dbd4     E8 D7 BF FD | 	call	#__system___float_cmp
2dbd8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dbdc     00 36 06 A6 |  if_e	mov	local09, #0
2dbe0     14 01 68 AC |  if_e	wrlong	#0, local02
2dbe4     15 37 62 AC |  if_e	wrlong	local09, local03
2dbe8     8C 01 90 AD |  if_e	jmp	#LR__4302
2dbec     13 13 02 F6 | 	mov	arg01, local01
2dbf0     C0 DC BF FD | 	call	#__system____builtin_ilogb
2dbf4     FD 38 02 F6 | 	mov	local10, result1
2dbf8     0A 2E 0E F2 | 	cmp	local05, #10 wz
2dbfc     24 00 90 5D |  if_ne	jmp	#LR__4290
2dc00     1C 37 02 F6 | 	mov	local09, local10
2dc04     01 36 66 F0 | 	shl	local09, #1
2dc08     1C 37 02 F1 | 	add	local09, local10
2dc0c     1B 39 52 F6 | 	abs	local10, local09 wc
2dc10     0A 38 16 FD | 	qdiv	local10, #10
2dc14     09 3A 06 F6 | 	mov	local11, #9
2dc18     18 38 62 FD | 	getqx	local10
2dc1c     1C 39 82 F6 | 	negc	local10, local10
2dc20     04 00 90 FD | 	jmp	#LR__4291
2dc24                 | LR__4290
2dc24     18 3A 06 F6 | 	mov	local11, #24
2dc28                 | LR__4291
2dc28                 | LR__4292
2dc28     08 34 56 F2 | 	cmps	local08, #8 wc
2dc2c     01 34 06 F1 | 	add	local08, #1
2dc30     60 00 90 3D |  if_ae	jmp	#LR__4293
2dc34     00 C0 1F FF 
2dc38     00 12 06 F6 | 	mov	arg01, ##1065353216
2dc3c     19 15 02 F6 | 	mov	arg02, local07
2dc40     1C 17 02 F6 | 	mov	arg03, local10
2dc44     50 E3 BF FD | 	call	#__system___float_pow_n
2dc48     FD 14 02 F6 | 	mov	arg02, result1
2dc4c     13 13 02 F6 | 	mov	arg01, local01
2dc50     3C D5 BF FD | 	call	#__system___float_div
2dc54     FD 3C 02 F6 | 	mov	local12, result1
2dc58     1E 13 02 F6 | 	mov	arg01, local12
2dc5c     00 C0 1F FF 
2dc60     00 14 06 F6 | 	mov	arg02, ##1065353216
2dc64     01 16 06 F6 | 	mov	arg03, #1
2dc68     54 D7 BF FD | 	call	#__system___float_cmp
2dc6c     00 FA 55 F2 | 	cmps	result1, #0 wc
2dc70     01 38 86 C1 |  if_b	sub	local10, #1
2dc74     B0 FF 9F CD |  if_b	jmp	#LR__4292
2dc78     19 15 02 F6 | 	mov	arg02, local07
2dc7c     1E 13 02 F6 | 	mov	arg01, local12
2dc80     01 16 66 F6 | 	neg	arg03, #1
2dc84     38 D7 BF FD | 	call	#__system___float_cmp
2dc88     00 FA 55 F2 | 	cmps	result1, #0 wc
2dc8c     01 38 06 31 |  if_ae	add	local10, #1
2dc90     94 FF 9F 3D |  if_ae	jmp	#LR__4292
2dc94                 | LR__4293
2dc94     1E 13 02 F6 | 	mov	arg01, local12
2dc98     18 DC BF FD | 	call	#__system____builtin_ilogb
2dc9c     FD 3E 02 F6 | 	mov	local13, result1
2dca0     1E 41 02 F6 | 	mov	local14, local12
2dca4     17 41 06 F4 | 	bitl	local14, #279
2dca8     17 40 26 F4 | 	bith	local14, #23
2dcac     1F 41 62 F0 | 	shl	local14, local13
2dcb0     02 2E 0E F2 | 	cmp	local05, #2 wz
2dcb4     02 2C 66 A0 |  if_e	shl	local04, #2
2dcb8     00 42 06 F6 | 	mov	local15, #0
2dcbc     00 2C 56 F2 | 	cmps	local04, #0 wc
2dcc0     10 00 90 3D |  if_ae	jmp	#LR__4294
2dcc4     1C 2D C2 F2 | 	subr	local04, local10
2dcc8     00 2C 56 F2 | 	cmps	local04, #0 wc
2dccc     A0 00 90 CD |  if_b	jmp	#LR__4301
2dcd0     04 00 90 FD | 	jmp	#LR__4295
2dcd4                 | LR__4294
2dcd4     01 2C 06 F1 | 	add	local04, #1
2dcd8                 | LR__4295
2dcd8     1D 2D 7A F3 | 	fles	local04, local11 wcz
2dcdc     01 44 06 F6 | 	mov	local16, #1
2dce0     97 22 48 FB | 	callpa	#(@LR__4297-@LR__4296)>>2,fcache_load_ptr_
2dce4                 | LR__4296
2dce4     00 40 00 FF 
2dce8     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2dcec     38 00 90 3D |  if_ae	jmp	#LR__4298
2dcf0     01 2C 56 F2 | 	cmps	local04, #1 wc
2dcf4     01 2C 86 F1 | 	sub	local04, #1
2dcf8     2C 00 90 CD |  if_b	jmp	#LR__4298
2dcfc     17 43 02 FD | 	qmul	local15, local05
2dd00     20 3F 02 F6 | 	mov	local13, local14
2dd04     17 3E 46 F0 | 	shr	local13, #23
2dd08     17 41 06 F4 | 	bitl	local14, #279
2dd0c     18 42 62 FD | 	getqx	local15
2dd10     17 45 02 FD | 	qmul	local16, local05
2dd14     18 44 62 FD | 	getqx	local16
2dd18     17 41 02 FD | 	qmul	local14, local05
2dd1c     1F 43 02 F1 | 	add	local15, local13
2dd20     18 40 62 FD | 	getqx	local14
2dd24     BC FF 9F FD | 	jmp	#LR__4296
2dd28                 | LR__4297
2dd28                 | LR__4298
2dd28     17 37 02 F6 | 	mov	local09, local05
2dd2c     17 36 66 F0 | 	shl	local09, #23
2dd30     1B 3F 52 F6 | 	abs	local13, local09 wc
2dd34     01 3E 46 F0 | 	shr	local13, #1
2dd38     1F 3F 82 F6 | 	negc	local13, local13
2dd3c     1F 41 1A F2 | 	cmp	local14, local13 wcz
2dd40     20 00 90 1D |  if_a	jmp	#LR__4299
2dd44     17 2E 66 F0 | 	shl	local05, #23
2dd48     17 3F 52 F6 | 	abs	local13, local05 wc
2dd4c     01 3E 46 F0 | 	shr	local13, #1
2dd50     1F 3F 82 F6 | 	negc	local13, local13
2dd54     1F 41 0A F2 | 	cmp	local14, local13 wz
2dd58     14 00 90 5D |  if_ne	jmp	#LR__4300
2dd5c     01 42 CE F7 | 	test	local15, #1 wz
2dd60     0C 00 90 AD |  if_e	jmp	#LR__4300
2dd64                 | LR__4299
2dd64     01 42 06 F1 | 	add	local15, #1
2dd68     22 43 0A F2 | 	cmp	local15, local16 wz
2dd6c     01 38 06 A1 |  if_e	add	local10, #1
2dd70                 | LR__4300
2dd70                 | LR__4301
2dd70     14 43 62 FC | 	wrlong	local15, local02
2dd74     15 39 62 FC | 	wrlong	local10, local03
2dd78                 | LR__4302
2dd78     A7 F0 03 F6 | 	mov	ptra, fp
2dd7c     B2 00 A0 FD | 	call	#popregs_
2dd80                 | __system__disassemble_0580_ret
2dd80     2D 00 64 FD | 	ret
2dd84                 | 
2dd84                 | __system__emitsign_0582
2dd84     00 FA 05 F6 | 	mov	result1, #0
2dd88     00 14 0E F2 | 	cmp	arg02, #0 wz
2dd8c     09 01 02 56 |  if_ne	mov	_var01, arg01
2dd90     01 12 06 51 |  if_ne	add	arg01, #1
2dd94     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2dd98     01 FA 05 56 |  if_ne	mov	result1, #1
2dd9c     00 16 0E F2 | 	cmp	arg03, #0 wz
2dda0     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2dda4     01 12 06 51 |  if_ne	add	arg01, #1
2dda8     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2ddac     02 FA 05 51 |  if_ne	add	result1, #2
2ddb0                 | __system__emitsign_0582_ret
2ddb0     2D 00 64 FD | 	ret
2ddb4                 | 
2ddb4                 | __system___getiolock_0620
2ddb4     01 4A 05 F6 | 	mov	COUNT_, #1
2ddb8     A8 00 A0 FD | 	call	#pushregs_
2ddbc     98 F8 BF FD | 	call	#__system____getftab
2ddc0     FD 26 0A F6 | 	mov	local01, result1 wz
2ddc4     10 00 90 AD |  if_e	jmp	#LR__4310
2ddc8     08 26 06 F1 | 	add	local01, #8
2ddcc     13 FB 09 FB | 	rdlong	result1, local01 wz
2ddd0     08 26 86 F1 | 	sub	local01, #8
2ddd4     18 00 90 5D |  if_ne	jmp	#LR__4311
2ddd8                 | LR__4310
2ddd8     01 00 00 FF 
2dddc     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2dde0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2dde4     01 00 00 FF 
2dde8     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2ddec     08 00 90 FD | 	jmp	#LR__4312
2ddf0                 | LR__4311
2ddf0     0C 26 06 F1 | 	add	local01, #12
2ddf4     13 FB 01 F6 | 	mov	result1, local01
2ddf8                 | LR__4312
2ddf8     A7 F0 03 F6 | 	mov	ptra, fp
2ddfc     B2 00 A0 FD | 	call	#popregs_
2de00                 | __system___getiolock_0620_ret
2de00     2D 00 64 FD | 	ret
2de04                 | 
2de04                 | __system___gettxfunc
2de04     01 4A 05 F6 | 	mov	COUNT_, #1
2de08     A8 00 A0 FD | 	call	#pushregs_
2de0c     48 F8 BF FD | 	call	#__system____getftab
2de10     FD 26 0A F6 | 	mov	local01, result1 wz
2de14     10 00 90 AD |  if_e	jmp	#LR__4320
2de18     08 26 06 F1 | 	add	local01, #8
2de1c     13 15 0A FB | 	rdlong	arg02, local01 wz
2de20     08 26 86 F1 | 	sub	local01, #8
2de24     08 00 90 5D |  if_ne	jmp	#LR__4321
2de28                 | LR__4320
2de28     00 FA 05 F6 | 	mov	result1, #0
2de2c     0C 00 90 FD | 	jmp	#LR__4322
2de30                 | LR__4321
2de30     00 70 05 FF 
2de34     00 26 46 F5 | 	or	local01, ##182452224
2de38     13 FB 01 F6 | 	mov	result1, local01
2de3c                 | LR__4322
2de3c     A7 F0 03 F6 | 	mov	ptra, fp
2de40     B2 00 A0 FD | 	call	#popregs_
2de44                 | __system___gettxfunc_ret
2de44     2D 00 64 FD | 	ret
2de48                 | 
2de48                 | __system___getrxfunc
2de48     01 4A 05 F6 | 	mov	COUNT_, #1
2de4c     A8 00 A0 FD | 	call	#pushregs_
2de50     04 F8 BF FD | 	call	#__system____getftab
2de54     FD 26 0A F6 | 	mov	local01, result1 wz
2de58     10 00 90 AD |  if_e	jmp	#LR__4330
2de5c     08 26 06 F1 | 	add	local01, #8
2de60     13 15 0A FB | 	rdlong	arg02, local01 wz
2de64     08 26 86 F1 | 	sub	local01, #8
2de68     08 00 90 5D |  if_ne	jmp	#LR__4331
2de6c                 | LR__4330
2de6c     00 FA 05 F6 | 	mov	result1, #0
2de70     0C 00 90 FD | 	jmp	#LR__4332
2de74                 | LR__4331
2de74     00 78 05 FF 
2de78     00 26 46 F5 | 	or	local01, ##183500800
2de7c     13 FB 01 F6 | 	mov	result1, local01
2de80                 | LR__4332
2de80     A7 F0 03 F6 | 	mov	ptra, fp
2de84     B2 00 A0 FD | 	call	#popregs_
2de88                 | __system___getrxfunc_ret
2de88     2D 00 64 FD | 	ret
2de8c                 | 
2de8c                 | __system____ScanForChar
2de8c     09 01 02 F6 | 	mov	_var01, arg01
2de90     09 03 02 F6 | 	mov	_var02, arg01
2de94     97 06 48 FB | 	callpa	#(@LR__4341-@LR__4340)>>2,fcache_load_ptr_
2de98                 | LR__4340
2de98     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2de9c     01 02 06 51 |  if_ne	add	_var02, #1
2dea0     F4 FF 9F 5D |  if_ne	jmp	#LR__4340
2dea4                 | LR__4341
2dea4     09 03 82 F1 | 	sub	_var02, arg01
2dea8     01 FB 01 F6 | 	mov	result1, _var02
2deac     FD 12 0A F6 | 	mov	arg01, result1 wz
2deb0     00 FA 05 A6 |  if_e	mov	result1, #0
2deb4     B8 00 90 AD |  if_e	jmp	#LR__4348
2deb8     0A 05 02 F6 | 	mov	_var03, arg02
2debc     07 04 4E F7 | 	zerox	_var03, #7 wz
2dec0     00 FA 05 A6 |  if_e	mov	result1, #0
2dec4     A8 00 90 AD |  if_e	jmp	#LR__4348
2dec8     01 16 16 F2 | 	cmp	arg03, #1 wc
2decc     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2ded0     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2ded4     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2ded8     94 00 90 4D |  if_c_and_nz	jmp	#LR__4348
2dedc     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2dee0     10 00 90 ED |  if_be	jmp	#LR__4342
2dee4     00 18 0E F2 | 	cmp	arg04, #0 wz
2dee8     00 FA 05 A6 |  if_e	mov	result1, #0
2deec     80 00 90 AD |  if_e	jmp	#LR__4348
2def0     09 17 02 F6 | 	mov	arg03, arg01
2def4                 | LR__4342
2def4     01 16 86 F1 | 	sub	arg03, #1
2def8     00 18 0E F2 | 	cmp	arg04, #0 wz
2defc     38 00 90 5D |  if_ne	jmp	#LR__4344
2df00     0B 07 02 F6 | 	mov	_var04, arg03
2df04     09 09 02 F6 | 	mov	_var05, arg01
2df08                 | LR__4343
2df08     04 07 12 F2 | 	cmp	_var04, _var05 wc
2df0c     5C 00 90 3D |  if_ae	jmp	#LR__4347
2df10     03 05 02 F6 | 	mov	_var03, _var04
2df14     00 05 02 F1 | 	add	_var03, _var01
2df18     02 05 C2 FA | 	rdbyte	_var03, _var03
2df1c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2df20     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2df24     01 06 06 A1 |  if_e	add	_var04, #1
2df28     03 FB 01 A6 |  if_e	mov	result1, _var04
2df2c     40 00 90 AD |  if_e	jmp	#LR__4348
2df30     01 06 06 F1 | 	add	_var04, #1
2df34     D0 FF 9F FD | 	jmp	#LR__4343
2df38                 | LR__4344
2df38     0B 07 02 F6 | 	mov	_var04, arg03
2df3c                 | LR__4345
2df3c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2df40     28 00 90 1D |  if_a	jmp	#LR__4346
2df44     03 09 02 F6 | 	mov	_var05, _var04
2df48     00 09 02 F1 | 	add	_var05, _var01
2df4c     04 05 C2 FA | 	rdbyte	_var03, _var05
2df50     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2df54     04 05 0A F2 | 	cmp	_var03, _var05 wz
2df58     01 06 06 A1 |  if_e	add	_var04, #1
2df5c     03 FB 01 A6 |  if_e	mov	result1, _var04
2df60     0C 00 90 AD |  if_e	jmp	#LR__4348
2df64     01 06 86 F1 | 	sub	_var04, #1
2df68     D0 FF 9F FD | 	jmp	#LR__4345
2df6c                 | LR__4346
2df6c                 | LR__4347
2df6c     00 FA 05 F6 | 	mov	result1, #0
2df70                 | LR__4348
2df70                 | __system____ScanForChar_ret
2df70     2D 00 64 FD | 	ret
2df74                 | 
2df74                 | __system___basic_dir
2df74     05 4A 05 F6 | 	mov	COUNT_, #5
2df78     A8 00 A0 FD | 	call	#pushregs_
2df7c     4C F0 07 F1 | 	add	ptra, #76
2df80     04 4E 05 F1 | 	add	fp, #4
2df84     A7 12 62 FC | 	wrlong	arg01, fp
2df88     04 4E 05 F1 | 	add	fp, #4
2df8c     A7 14 62 FC | 	wrlong	arg02, fp
2df90     04 4E 85 F1 | 	sub	fp, #4
2df94     A7 14 0A FB | 	rdlong	arg02, fp wz
2df98     04 4E 85 F1 | 	sub	fp, #4
2df9c     04 4E 05 51 |  if_ne	add	fp, #4
2dfa0     A7 26 02 5B |  if_ne	rdlong	local01, fp
2dfa4     04 4E 85 51 |  if_ne	sub	fp, #4
2dfa8     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2dfac     70 00 90 AD |  if_e	jmp	#LR__4350
2dfb0     03 00 00 FF 
2dfb4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2dfb8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2dfbc     03 00 00 FF 
2dfc0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2dfc4     03 00 00 5F 
2dfc8     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2dfcc     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2dfd0     03 00 00 5F 
2dfd4     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2dfd8     DC E9 BF 5D |  if_ne	call	#__system__closedir
2dfdc     B0 01 00 FF 
2dfe0     00 13 06 F6 | 	mov	arg01, ##@LR__5308
2dfe4     E4 E8 BF FD | 	call	#__system__opendir
2dfe8     03 00 00 FF 
2dfec     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2dff0     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2dff4     08 4E 05 F1 | 	add	fp, #8
2dff8     A7 28 02 FB | 	rdlong	local02, fp
2dffc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2e000     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2e004     04 4E 85 F1 | 	sub	fp, #4
2e008     A7 28 02 FB | 	rdlong	local02, fp
2e00c     04 4E 85 F1 | 	sub	fp, #4
2e010     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2e014     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2e018     03 00 00 FF 
2e01c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2e020                 | LR__4350
2e020     03 00 00 FF 
2e024     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e028     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2e02c     03 00 00 FF 
2e030     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e034     B0 01 00 AF 
2e038     02 FB 05 A6 |  if_e	mov	result1, ##@LR__5309
2e03c     84 02 90 AD |  if_e	jmp	#LR__4363
2e040                 | LR__4351
2e040     03 00 00 FF 
2e044     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e048     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2e04c     03 00 00 FF 
2e050     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e054     D4 E9 BF FD | 	call	#__system__readdir
2e058     0C 4E 05 F1 | 	add	fp, #12
2e05c     A7 FA 61 FC | 	wrlong	result1, fp
2e060     0C 4E 85 F1 | 	sub	fp, #12
2e064     00 FA 0D F2 | 	cmp	result1, #0 wz
2e068     38 00 90 5D |  if_ne	jmp	#LR__4352
2e06c     03 00 00 FF 
2e070     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e074     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2e078     03 00 00 FF 
2e07c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e080     34 E9 BF FD | 	call	#__system__closedir
2e084     03 00 00 FF 
2e088     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2e08c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2e090     03 00 00 FF 
2e094     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2e098     B0 01 00 FF 
2e09c     04 FB 05 F6 | 	mov	result1, ##@LR__5310
2e0a0     20 02 90 FD | 	jmp	#LR__4363
2e0a4                 | LR__4352
2e0a4     0C 4E 05 F1 | 	add	fp, #12
2e0a8     A7 12 02 FB | 	rdlong	arg01, fp
2e0ac     0C 4E 85 F1 | 	sub	fp, #12
2e0b0     03 00 00 FF 
2e0b4     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2e0b8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2e0bc     03 00 00 FF 
2e0c0     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2e0c4     10 09 B0 FD | 	call	#__system___pat_match
2e0c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e0cc     70 FF 9F AD |  if_e	jmp	#LR__4351
2e0d0     03 00 00 FF 
2e0d4     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2e0d8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2e0dc     03 00 00 FF 
2e0e0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2e0e4     78 01 90 AD |  if_e	jmp	#LR__4359
2e0e8     0C 4E 05 F1 | 	add	fp, #12
2e0ec     A7 12 02 FB | 	rdlong	arg01, fp
2e0f0     04 4E 05 F1 | 	add	fp, #4
2e0f4     A7 14 02 F6 | 	mov	arg02, fp
2e0f8     10 4E 85 F1 | 	sub	fp, #16
2e0fc     24 F2 BF FD | 	call	#__system__stat
2e100     40 4E 05 F1 | 	add	fp, #64
2e104     A7 FA 61 FC | 	wrlong	result1, fp
2e108     40 4E 85 F1 | 	sub	fp, #64
2e10c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e110     B0 01 00 5F 
2e114     06 FB 05 56 |  if_ne	mov	result1, ##@LR__5311
2e118     A8 01 90 5D |  if_ne	jmp	#LR__4363
2e11c     18 4E 05 F1 | 	add	fp, #24
2e120     A7 28 02 FB | 	rdlong	local02, fp
2e124     78 00 00 FF 
2e128     00 28 06 F5 | 	and	local02, ##61440
2e12c     2C 4E 05 F1 | 	add	fp, #44
2e130     A7 28 62 FC | 	wrlong	local02, fp
2e134     38 4E 85 F1 | 	sub	fp, #56
2e138     A7 28 02 FB | 	rdlong	local02, fp
2e13c     0C 4E 85 F1 | 	sub	fp, #12
2e140     14 29 C2 FA | 	rdbyte	local02, local02
2e144     2E 28 0E F2 | 	cmp	local02, #46 wz
2e148     08 4E 05 A1 |  if_e	add	fp, #8
2e14c     A7 04 68 AC |  if_e	wrlong	#2, fp
2e150     08 4E C5 F3 | 	sumz	fp, #8
2e154     A7 00 68 5C |  if_ne	wrlong	#0, fp
2e158     08 4E 85 51 |  if_ne	sub	fp, #8
2e15c     44 4E 05 F1 | 	add	fp, #68
2e160     A7 28 02 FB | 	rdlong	local02, fp
2e164     44 4E 85 F1 | 	sub	fp, #68
2e168     08 00 00 FF 
2e16c     00 28 0E F2 | 	cmp	local02, ##4096 wz
2e170     18 00 90 5D |  if_ne	jmp	#LR__4353
2e174     08 4E 05 F1 | 	add	fp, #8
2e178     A7 28 02 FB | 	rdlong	local02, fp
2e17c     10 28 46 F5 | 	or	local02, #16
2e180     A7 28 62 FC | 	wrlong	local02, fp
2e184     08 4E 85 F1 | 	sub	fp, #8
2e188     AC 00 90 FD | 	jmp	#LR__4358
2e18c                 | LR__4353
2e18c     44 4E 05 F1 | 	add	fp, #68
2e190     A7 28 02 FB | 	rdlong	local02, fp
2e194     44 4E 85 F1 | 	sub	fp, #68
2e198     10 00 00 FF 
2e19c     00 28 0E F2 | 	cmp	local02, ##8192 wz
2e1a0     44 4E 05 51 |  if_ne	add	fp, #68
2e1a4     A7 26 02 5B |  if_ne	rdlong	local01, fp
2e1a8     44 4E 85 51 |  if_ne	sub	fp, #68
2e1ac     18 00 00 5F 
2e1b0     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2e1b4     44 4E 05 51 |  if_ne	add	fp, #68
2e1b8     13 2B 02 56 |  if_ne	mov	local03, local01
2e1bc     44 4E 85 51 |  if_ne	sub	fp, #68
2e1c0     20 00 00 5F 
2e1c4     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2e1c8     18 00 90 5D |  if_ne	jmp	#LR__4354
2e1cc     08 4E 05 F1 | 	add	fp, #8
2e1d0     A7 28 02 FB | 	rdlong	local02, fp
2e1d4     04 28 46 F5 | 	or	local02, #4
2e1d8     A7 28 62 FC | 	wrlong	local02, fp
2e1dc     08 4E 85 F1 | 	sub	fp, #8
2e1e0     54 00 90 FD | 	jmp	#LR__4357
2e1e4                 | LR__4354
2e1e4     18 4E 05 F1 | 	add	fp, #24
2e1e8     A7 28 02 FB | 	rdlong	local02, fp
2e1ec     18 4E 85 F1 | 	sub	fp, #24
2e1f0     92 28 CE F7 | 	test	local02, #146 wz
2e1f4     18 00 90 5D |  if_ne	jmp	#LR__4355
2e1f8     08 4E 05 F1 | 	add	fp, #8
2e1fc     A7 28 02 FB | 	rdlong	local02, fp
2e200     01 28 46 F5 | 	or	local02, #1
2e204     A7 28 62 FC | 	wrlong	local02, fp
2e208     08 4E 85 F1 | 	sub	fp, #8
2e20c     28 00 90 FD | 	jmp	#LR__4356
2e210                 | LR__4355
2e210     44 4E 05 F1 | 	add	fp, #68
2e214     A7 2C 02 FB | 	rdlong	local04, fp
2e218     44 4E 85 F1 | 	sub	fp, #68
2e21c     08 00 00 FF 
2e220     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2e224     08 4E 05 51 |  if_ne	add	fp, #8
2e228     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2e22c     20 2C 46 55 |  if_ne	or	local04, #32
2e230     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2e234     08 4E 85 51 |  if_ne	sub	fp, #8
2e238                 | LR__4356
2e238                 | LR__4357
2e238                 | LR__4358
2e238     08 4E 05 F1 | 	add	fp, #8
2e23c     A7 2C 02 FB | 	rdlong	local04, fp
2e240     08 4E 85 F1 | 	sub	fp, #8
2e244     03 00 00 FF 
2e248     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2e24c     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2e250     03 00 00 FF 
2e254     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2e258     13 2D CA F7 | 	test	local04, local01 wz
2e25c     E0 FD 9F AD |  if_e	jmp	#LR__4351
2e260                 | LR__4359
2e260     0C 4E 05 F1 | 	add	fp, #12
2e264     A7 12 02 FB | 	rdlong	arg01, fp
2e268     0C 4E 85 F1 | 	sub	fp, #12
2e26c     09 2F 02 F6 | 	mov	local05, arg01
2e270     97 06 48 FB | 	callpa	#(@LR__4361-@LR__4360)>>2,fcache_load_ptr_
2e274                 | LR__4360
2e274     17 FB C9 FA | 	rdbyte	result1, local05 wz
2e278     01 2E 06 51 |  if_ne	add	local05, #1
2e27c     F4 FF 9F 5D |  if_ne	jmp	#LR__4360
2e280                 | LR__4361
2e280     17 13 C2 F2 | 	subr	arg01, local05
2e284     01 12 06 F1 | 	add	arg01, #1
2e288     2C E0 BF FD | 	call	#__system___gc_alloc_managed
2e28c     48 4E 05 F1 | 	add	fp, #72
2e290     A7 FA 61 FC | 	wrlong	result1, fp
2e294     48 4E 85 F1 | 	sub	fp, #72
2e298     00 FA 0D F2 | 	cmp	result1, #0 wz
2e29c     18 00 90 AD |  if_e	jmp	#LR__4362
2e2a0     48 4E 05 F1 | 	add	fp, #72
2e2a4     A7 12 02 FB | 	rdlong	arg01, fp
2e2a8     3C 4E 85 F1 | 	sub	fp, #60
2e2ac     A7 14 02 FB | 	rdlong	arg02, fp
2e2b0     0C 4E 85 F1 | 	sub	fp, #12
2e2b4     0C 9E BF FD | 	call	#__system____builtin_strcpy
2e2b8                 | LR__4362
2e2b8     48 4E 05 F1 | 	add	fp, #72
2e2bc     A7 FA 01 FB | 	rdlong	result1, fp
2e2c0     48 4E 85 F1 | 	sub	fp, #72
2e2c4                 | LR__4363
2e2c4     A7 F0 03 F6 | 	mov	ptra, fp
2e2c8     B2 00 A0 FD | 	call	#popregs_
2e2cc                 | __system___basic_dir_ret
2e2cc     2D 00 64 FD | 	ret
2e2d0                 | 
2e2d0                 | __system__pack_0696
2e2d0     09 01 02 F6 | 	mov	_var01, arg01
2e2d4     7F 16 06 F1 | 	add	arg03, #127
2e2d8     04 18 CE F7 | 	test	arg04, #4 wz
2e2dc     10 00 90 AD |  if_e	jmp	#LR__4370
2e2e0     00 00 0E F2 | 	cmp	_var01, #0 wz
2e2e4     16 00 C6 A9 |  if_e	decod	_var01, #22
2e2e8     F7 00 26 F4 | 	bith	_var01, #247
2e2ec     B4 00 90 FD | 	jmp	#LR__4379
2e2f0                 | LR__4370
2e2f0     02 18 CE F7 | 	test	arg04, #2 wz
2e2f4     00 C0 3F 5F 
2e2f8     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2e2fc     00 14 06 56 |  if_ne	mov	arg02, #0
2e300     A0 00 90 5D |  if_ne	jmp	#LR__4378
2e304     08 18 CE F7 | 	test	arg04, #8 wz
2e308     00 00 06 56 |  if_ne	mov	_var01, #0
2e30c     94 00 90 5D |  if_ne	jmp	#LR__4377
2e310     FF 16 56 F2 | 	cmps	arg03, #255 wc
2e314     00 C0 3F 3F 
2e318     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2e31c     00 14 06 36 |  if_ae	mov	arg02, #0
2e320     80 00 90 3D |  if_ae	jmp	#LR__4376
2e324     01 16 56 F2 | 	cmps	arg03, #1 wc
2e328     6C 00 90 3D |  if_ae	jmp	#LR__4374
2e32c     01 14 46 F0 | 	shr	arg02, #1
2e330     00 03 02 F6 | 	mov	_var02, _var01
2e334     01 02 06 F5 | 	and	_var02, #1
2e338     1F 02 66 F0 | 	shl	_var02, #31
2e33c     01 15 42 F5 | 	or	arg02, _var02
2e340     01 00 46 F0 | 	shr	_var01, #1
2e344     97 1E 48 FB | 	callpa	#(@LR__4372-@LR__4371)>>2,fcache_load_ptr_
2e348                 | LR__4371
2e348     00 16 56 F2 | 	cmps	arg03, #0 wc
2e34c     34 00 90 3D |  if_ae	jmp	#LR__4373
2e350     00 00 0E F2 | 	cmp	_var01, #0 wz
2e354     2C 00 90 AD |  if_e	jmp	#LR__4373
2e358     0A 13 02 F6 | 	mov	arg01, arg02
2e35c     01 12 06 F5 | 	and	arg01, #1
2e360     01 16 06 F1 | 	add	arg03, #1
2e364     01 14 46 F0 | 	shr	arg02, #1
2e368     00 03 02 F6 | 	mov	_var02, _var01
2e36c     01 02 06 F5 | 	and	_var02, #1
2e370     1F 02 66 F0 | 	shl	_var02, #31
2e374     01 15 42 F5 | 	or	arg02, _var02
2e378     09 15 42 F5 | 	or	arg02, arg01
2e37c     01 00 46 F0 | 	shr	_var01, #1
2e380     C4 FF 9F FD | 	jmp	#LR__4371
2e384                 | LR__4372
2e384                 | LR__4373
2e384     00 16 56 F2 | 	cmps	arg03, #0 wc
2e388     18 00 90 3D |  if_ae	jmp	#LR__4375
2e38c     00 14 0E F2 | 	cmp	arg02, #0 wz
2e390     6F 14 62 FD | 	wrnz	arg02
2e394     0C 00 90 FD | 	jmp	#LR__4375
2e398                 | LR__4374
2e398     17 01 06 F4 | 	bitl	_var01, #279
2e39c     17 16 66 F0 | 	shl	arg03, #23
2e3a0     0B 01 42 F5 | 	or	_var01, arg03
2e3a4                 | LR__4375
2e3a4                 | LR__4376
2e3a4                 | LR__4377
2e3a4                 | LR__4378
2e3a4                 | LR__4379
2e3a4     01 00 CE F7 | 	test	_var01, #1 wz
2e3a8     01 14 46 55 |  if_ne	or	arg02, #1
2e3ac     0A 17 02 F6 | 	mov	arg03, arg02
2e3b0     00 02 06 F6 | 	mov	_var02, #0
2e3b4     FF FF 3F FF 
2e3b8     FF 15 06 F1 | 	add	arg02, ##2147483647
2e3bc     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2e3c0     01 02 06 C6 |  if_b	mov	_var02, #1
2e3c4     01 01 02 F1 | 	add	_var01, _var02
2e3c8     01 18 CE F7 | 	test	arg04, #1 wz
2e3cc     1F 00 26 54 |  if_ne	bith	_var01, #31
2e3d0     00 FB 01 F6 | 	mov	result1, _var01
2e3d4                 | __system__pack_0696_ret
2e3d4     2D 00 64 FD | 	ret
2e3d8                 | 
2e3d8                 | __system___rxtxioctl_0786
2e3d8     00 15 0E F2 | 	cmp	arg02, #256 wz
2e3dc     0C 00 90 AD |  if_e	jmp	#LR__4380
2e3e0     01 15 0E F2 | 	cmp	arg02, #257 wz
2e3e4     1C 00 90 AD |  if_e	jmp	#LR__4381
2e3e8     30 00 90 FD | 	jmp	#LR__4382
2e3ec                 | LR__4380
2e3ec     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2e3f0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2e3f4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2e3f8     0B FB 61 FC | 	wrlong	result1, arg03
2e3fc     00 FA 05 F6 | 	mov	result1, #0
2e400     28 00 90 FD | 	jmp	#LR__4383
2e404                 | LR__4381
2e404     0B 13 02 FB | 	rdlong	arg01, arg03
2e408     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2e40c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2e410     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2e414     00 FA 05 F6 | 	mov	result1, #0
2e418     10 00 90 FD | 	jmp	#LR__4383
2e41c                 | LR__4382
2e41c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e420     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2e424     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e428     01 FA 65 F6 | 	neg	result1, #1
2e42c                 | LR__4383
2e42c                 | __system___rxtxioctl_0786_ret
2e42c     2D 00 64 FD | 	ret
2e430                 | 
2e430                 | __system____dummy_flush_0787
2e430     00 FA 05 F6 | 	mov	result1, #0
2e434                 | __system____dummy_flush_0787_ret
2e434     2D 00 64 FD | 	ret
2e438                 | 
2e438                 | __system___vfswrite
2e438     09 4A 05 F6 | 	mov	COUNT_, #9
2e43c     A8 00 A0 FD | 	call	#pushregs_
2e440     09 27 02 F6 | 	mov	local01, arg01
2e444     0A 29 02 F6 | 	mov	local02, arg02
2e448     0B 2B 02 F6 | 	mov	local03, arg03
2e44c     14 2D 02 F6 | 	mov	local04, local02
2e450     08 26 06 F1 | 	add	local01, #8
2e454     13 13 02 FB | 	rdlong	arg01, local01
2e458     08 26 86 F1 | 	sub	local01, #8
2e45c     02 12 CE F7 | 	test	arg01, #2 wz
2e460     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e464     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e468     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e46c     01 FA 65 A6 |  if_e	neg	result1, #1
2e470     80 01 90 AD |  if_e	jmp	#LR__4396
2e474     08 26 06 F1 | 	add	local01, #8
2e478     13 FB 01 FB | 	rdlong	result1, local01
2e47c     08 26 86 F1 | 	sub	local01, #8
2e480     40 FA CD F7 | 	test	result1, #64 wz
2e484     68 00 90 AD |  if_e	jmp	#LR__4391
2e488     08 26 06 F1 | 	add	local01, #8
2e48c     13 15 02 FB | 	rdlong	arg02, local01
2e490     08 26 86 F1 | 	sub	local01, #8
2e494     80 14 CE F7 | 	test	arg02, #128 wz
2e498     54 00 90 AD |  if_e	jmp	#LR__4390
2e49c     30 26 06 F1 | 	add	local01, #48
2e4a0     13 2F 02 FB | 	rdlong	local05, local01
2e4a4     17 31 02 F6 | 	mov	local06, local05
2e4a8     30 26 86 F1 | 	sub	local01, #48
2e4ac     13 30 46 F7 | 	zerox	local06, #19
2e4b0     14 2E 46 F0 | 	shr	local05, #20
2e4b4     02 2E 66 F0 | 	shl	local05, #2
2e4b8     ED 2E 02 F1 | 	add	local05, __methods__
2e4bc     17 2F 02 FB | 	rdlong	local05, local05
2e4c0     13 13 02 F6 | 	mov	arg01, local01
2e4c4     00 14 06 F6 | 	mov	arg02, #0
2e4c8     02 16 06 F6 | 	mov	arg03, #2
2e4cc     F2 32 02 F6 | 	mov	local07, objptr
2e4d0     18 E5 01 F6 | 	mov	objptr, local06
2e4d4     2D 2E 62 FD | 	call	local05
2e4d8     19 E5 01 F6 | 	mov	objptr, local07
2e4dc     08 26 06 F1 | 	add	local01, #8
2e4e0     13 33 02 FB | 	rdlong	local07, local01
2e4e4     80 32 26 F5 | 	andn	local07, #128
2e4e8     13 33 62 FC | 	wrlong	local07, local01
2e4ec     08 26 86 F1 | 	sub	local01, #8
2e4f0                 | LR__4390
2e4f0                 | LR__4391
2e4f0     18 26 06 F1 | 	add	local01, #24
2e4f4     13 33 0A FB | 	rdlong	local07, local01 wz
2e4f8     18 26 86 F1 | 	sub	local01, #24
2e4fc     80 00 90 AD |  if_e	jmp	#LR__4393
2e500     18 26 06 F1 | 	add	local01, #24
2e504     13 2F 02 FB | 	rdlong	local05, local01
2e508     17 31 02 F6 | 	mov	local06, local05
2e50c     18 26 86 F1 | 	sub	local01, #24
2e510     13 30 46 F7 | 	zerox	local06, #19
2e514     14 2E 46 F0 | 	shr	local05, #20
2e518     02 2E 66 F0 | 	shl	local05, #2
2e51c     ED 2E 02 F1 | 	add	local05, __methods__
2e520     17 2F 02 FB | 	rdlong	local05, local05
2e524     14 15 02 F6 | 	mov	arg02, local02
2e528     15 17 02 F6 | 	mov	arg03, local03
2e52c     13 13 02 F6 | 	mov	arg01, local01
2e530     F2 32 02 F6 | 	mov	local07, objptr
2e534     18 E5 01 F6 | 	mov	objptr, local06
2e538     2D 2E 62 FD | 	call	local05
2e53c     19 E5 01 F6 | 	mov	objptr, local07
2e540     FD 34 02 F6 | 	mov	local08, result1
2e544     00 34 56 F2 | 	cmps	local08, #0 wc
2e548     2C 00 90 3D |  if_ae	jmp	#LR__4392
2e54c     08 26 06 F1 | 	add	local01, #8
2e550     13 33 02 FB | 	rdlong	local07, local01
2e554     20 32 46 F5 | 	or	local07, #32
2e558     13 33 62 FC | 	wrlong	local07, local01
2e55c     00 34 4E F2 | 	cmps	local08, #0 wz
2e560     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e564     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2e568     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e56c     01 FA 65 56 |  if_ne	neg	result1, #1
2e570     00 FA 05 A6 |  if_e	mov	result1, #0
2e574     7C 00 90 FD | 	jmp	#LR__4396
2e578                 | LR__4392
2e578     1A FB 01 F6 | 	mov	result1, local08
2e57c     74 00 90 FD | 	jmp	#LR__4396
2e580                 | LR__4393
2e580     1C 26 06 F1 | 	add	local01, #28
2e584     13 37 0A FB | 	rdlong	local09, local01 wz
2e588     1C 26 86 F1 | 	sub	local01, #28
2e58c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e590     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e594     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e598     01 FA 65 A6 |  if_e	neg	result1, #1
2e59c     54 00 90 AD |  if_e	jmp	#LR__4396
2e5a0     00 34 06 F6 | 	mov	local08, #0
2e5a4                 | LR__4394
2e5a4     01 2A 16 F2 | 	cmp	local03, #1 wc
2e5a8     44 00 90 CD |  if_b	jmp	#LR__4395
2e5ac     1B 31 02 F6 | 	mov	local06, local09
2e5b0     1B 2F 02 F6 | 	mov	local05, local09
2e5b4     13 30 46 F7 | 	zerox	local06, #19
2e5b8     14 2E 46 F0 | 	shr	local05, #20
2e5bc     02 2E 66 F0 | 	shl	local05, #2
2e5c0     ED 2E 02 F1 | 	add	local05, __methods__
2e5c4     17 2F 02 FB | 	rdlong	local05, local05
2e5c8     16 13 C2 FA | 	rdbyte	arg01, local04
2e5cc     13 15 02 F6 | 	mov	arg02, local01
2e5d0     F2 32 02 F6 | 	mov	local07, objptr
2e5d4     18 E5 01 F6 | 	mov	objptr, local06
2e5d8     01 2C 06 F1 | 	add	local04, #1
2e5dc     2D 2E 62 FD | 	call	local05
2e5e0     19 E5 01 F6 | 	mov	objptr, local07
2e5e4     FD 34 02 F1 | 	add	local08, result1
2e5e8     01 2A 86 F1 | 	sub	local03, #1
2e5ec     B4 FF 9F FD | 	jmp	#LR__4394
2e5f0                 | LR__4395
2e5f0     1A FB 01 F6 | 	mov	result1, local08
2e5f4                 | LR__4396
2e5f4     A7 F0 03 F6 | 	mov	ptra, fp
2e5f8     B2 00 A0 FD | 	call	#popregs_
2e5fc                 | __system___vfswrite_ret
2e5fc     2D 00 64 FD | 	ret
2e600                 | 
2e600                 | __system___vfsread
2e600     03 4A 05 F6 | 	mov	COUNT_, #3
2e604     A8 00 A0 FD | 	call	#pushregs_
2e608     28 F0 07 F1 | 	add	ptra, #40
2e60c     04 4E 05 F1 | 	add	fp, #4
2e610     A7 12 62 FC | 	wrlong	arg01, fp
2e614     04 4E 05 F1 | 	add	fp, #4
2e618     A7 14 62 FC | 	wrlong	arg02, fp
2e61c     04 4E 05 F1 | 	add	fp, #4
2e620     A7 16 62 FC | 	wrlong	arg03, fp
2e624     04 4E 85 F1 | 	sub	fp, #4
2e628     A7 FA 01 FB | 	rdlong	result1, fp
2e62c     14 4E 05 F1 | 	add	fp, #20
2e630     A7 FA 61 FC | 	wrlong	result1, fp
2e634     04 4E 05 F1 | 	add	fp, #4
2e638     A7 00 68 FC | 	wrlong	#0, fp
2e63c     1C 4E 85 F1 | 	sub	fp, #28
2e640     A7 12 02 FB | 	rdlong	arg01, fp
2e644     04 4E 85 F1 | 	sub	fp, #4
2e648     08 12 06 F1 | 	add	arg01, #8
2e64c     09 FB 01 FB | 	rdlong	result1, arg01
2e650     01 FA CD F7 | 	test	result1, #1 wz
2e654     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e658     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e65c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e660     01 FA 65 A6 |  if_e	neg	result1, #1
2e664     74 02 90 AD |  if_e	jmp	#LR__4406
2e668     04 4E 05 F1 | 	add	fp, #4
2e66c     A7 12 02 FB | 	rdlong	arg01, fp
2e670     04 4E 85 F1 | 	sub	fp, #4
2e674     14 12 06 F1 | 	add	arg01, #20
2e678     09 FB 09 FB | 	rdlong	result1, arg01 wz
2e67c     B8 00 90 AD |  if_e	jmp	#LR__4401
2e680     04 4E 05 F1 | 	add	fp, #4
2e684     A7 12 02 FB | 	rdlong	arg01, fp
2e688     09 17 02 F6 | 	mov	arg03, arg01
2e68c     14 16 06 F1 | 	add	arg03, #20
2e690     0B 27 02 FB | 	rdlong	local01, arg03
2e694     13 29 02 F6 | 	mov	local02, local01
2e698     13 26 46 F7 | 	zerox	local01, #19
2e69c     14 28 46 F0 | 	shr	local02, #20
2e6a0     02 28 66 F0 | 	shl	local02, #2
2e6a4     ED 28 02 F1 | 	add	local02, __methods__
2e6a8     14 29 02 FB | 	rdlong	local02, local02
2e6ac     04 4E 05 F1 | 	add	fp, #4
2e6b0     A7 14 02 FB | 	rdlong	arg02, fp
2e6b4     04 4E 05 F1 | 	add	fp, #4
2e6b8     A7 16 02 FB | 	rdlong	arg03, fp
2e6bc     0C 4E 85 F1 | 	sub	fp, #12
2e6c0     F2 2A 02 F6 | 	mov	local03, objptr
2e6c4     13 E5 01 F6 | 	mov	objptr, local01
2e6c8     2D 28 62 FD | 	call	local02
2e6cc     15 E5 01 F6 | 	mov	objptr, local03
2e6d0     10 4E 05 F1 | 	add	fp, #16
2e6d4     A7 FA 61 FC | 	wrlong	result1, fp
2e6d8     10 4E 85 F1 | 	sub	fp, #16
2e6dc     00 FA 55 F2 | 	cmps	result1, #0 wc
2e6e0     44 00 90 3D |  if_ae	jmp	#LR__4400
2e6e4     04 4E 05 F1 | 	add	fp, #4
2e6e8     A7 2A 02 FB | 	rdlong	local03, fp
2e6ec     15 27 02 F6 | 	mov	local01, local03
2e6f0     08 2A 06 F1 | 	add	local03, #8
2e6f4     15 29 02 FB | 	rdlong	local02, local03
2e6f8     20 28 46 F5 | 	or	local02, #32
2e6fc     08 26 06 F1 | 	add	local01, #8
2e700     13 29 62 FC | 	wrlong	local02, local01
2e704     0C 4E 05 F1 | 	add	fp, #12
2e708     A7 12 0A FB | 	rdlong	arg01, fp wz
2e70c     10 4E 85 F1 | 	sub	fp, #16
2e710     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e714     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2e718     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e71c     01 FA 65 56 |  if_ne	neg	result1, #1
2e720     00 FA 05 A6 |  if_e	mov	result1, #0
2e724     B4 01 90 FD | 	jmp	#LR__4406
2e728                 | LR__4400
2e728     10 4E 05 F1 | 	add	fp, #16
2e72c     A7 FA 01 FB | 	rdlong	result1, fp
2e730     10 4E 85 F1 | 	sub	fp, #16
2e734     A4 01 90 FD | 	jmp	#LR__4406
2e738                 | LR__4401
2e738     04 4E 05 F1 | 	add	fp, #4
2e73c     A7 12 02 FB | 	rdlong	arg01, fp
2e740     20 12 06 F1 | 	add	arg01, #32
2e744     09 13 0A FB | 	rdlong	arg01, arg01 wz
2e748     14 4E 05 F1 | 	add	fp, #20
2e74c     A7 12 62 FC | 	wrlong	arg01, fp
2e750     18 4E 85 F1 | 	sub	fp, #24
2e754     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e758     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e75c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e760     01 FA 65 A6 |  if_e	neg	result1, #1
2e764     74 01 90 AD |  if_e	jmp	#LR__4406
2e768     04 4E 05 F1 | 	add	fp, #4
2e76c     A7 2A 02 FB | 	rdlong	local03, fp
2e770     04 4E 85 F1 | 	sub	fp, #4
2e774     28 2A 06 F1 | 	add	local03, #40
2e778     15 29 0A FB | 	rdlong	local02, local03 wz
2e77c     7C 00 90 AD |  if_e	jmp	#LR__4403
2e780     04 4E 05 F1 | 	add	fp, #4
2e784     A7 12 02 FB | 	rdlong	arg01, fp
2e788     09 2B 02 F6 | 	mov	local03, arg01
2e78c     28 2A 06 F1 | 	add	local03, #40
2e790     15 27 02 FB | 	rdlong	local01, local03
2e794     13 29 02 F6 | 	mov	local02, local01
2e798     13 26 46 F7 | 	zerox	local01, #19
2e79c     14 28 46 F0 | 	shr	local02, #20
2e7a0     02 28 66 F0 | 	shl	local02, #2
2e7a4     ED 28 02 F1 | 	add	local02, __methods__
2e7a8     14 29 02 FB | 	rdlong	local02, local02
2e7ac     20 4E 05 F1 | 	add	fp, #32
2e7b0     A7 16 02 F6 | 	mov	arg03, fp
2e7b4     24 4E 85 F1 | 	sub	fp, #36
2e7b8     00 15 06 F6 | 	mov	arg02, #256
2e7bc     F2 2A 02 F6 | 	mov	local03, objptr
2e7c0     13 E5 01 F6 | 	mov	objptr, local01
2e7c4     2D 28 62 FD | 	call	local02
2e7c8     15 E5 01 F6 | 	mov	objptr, local03
2e7cc     10 4E 05 F1 | 	add	fp, #16
2e7d0     A7 FA 61 FC | 	wrlong	result1, fp
2e7d4     00 FA 4D F2 | 	cmps	result1, #0 wz
2e7d8     10 4E 85 F1 | 	sub	fp, #16
2e7dc     1C 00 90 5D |  if_ne	jmp	#LR__4402
2e7e0     24 4E 05 F1 | 	add	fp, #36
2e7e4     A7 28 02 FB | 	rdlong	local02, fp
2e7e8     24 4E 85 F1 | 	sub	fp, #36
2e7ec     02 28 CE F7 | 	test	local02, #2 wz
2e7f0     20 4E 05 51 |  if_ne	add	fp, #32
2e7f4     A7 02 68 5C |  if_ne	wrlong	#1, fp
2e7f8     20 4E 85 51 |  if_ne	sub	fp, #32
2e7fc                 | LR__4402
2e7fc                 | LR__4403
2e7fc     10 4E 05 F1 | 	add	fp, #16
2e800     A7 00 68 FC | 	wrlong	#0, fp
2e804     10 4E 85 F1 | 	sub	fp, #16
2e808                 | LR__4404
2e808     0C 4E 05 F1 | 	add	fp, #12
2e80c     A7 2A 02 FB | 	rdlong	local03, fp
2e810     0C 4E 85 F1 | 	sub	fp, #12
2e814     01 2A 16 F2 | 	cmp	local03, #1 wc
2e818     B4 00 90 CD |  if_b	jmp	#LR__4405
2e81c     18 4E 05 F1 | 	add	fp, #24
2e820     A7 28 02 FB | 	rdlong	local02, fp
2e824     14 2B 02 F6 | 	mov	local03, local02
2e828     13 2A 46 F7 | 	zerox	local03, #19
2e82c     14 28 46 F0 | 	shr	local02, #20
2e830     02 28 66 F0 | 	shl	local02, #2
2e834     ED 28 02 F1 | 	add	local02, __methods__
2e838     14 29 02 FB | 	rdlong	local02, local02
2e83c     14 4E 85 F1 | 	sub	fp, #20
2e840     A7 12 02 FB | 	rdlong	arg01, fp
2e844     04 4E 85 F1 | 	sub	fp, #4
2e848     F2 26 02 F6 | 	mov	local01, objptr
2e84c     15 E5 01 F6 | 	mov	objptr, local03
2e850     2D 28 62 FD | 	call	local02
2e854     13 E5 01 F6 | 	mov	objptr, local01
2e858     14 4E 05 F1 | 	add	fp, #20
2e85c     A7 FA 61 FC | 	wrlong	result1, fp
2e860     14 4E 85 F1 | 	sub	fp, #20
2e864     00 FA 55 F2 | 	cmps	result1, #0 wc
2e868     64 00 90 CD |  if_b	jmp	#LR__4405
2e86c     1C 4E 05 F1 | 	add	fp, #28
2e870     A7 2A 02 FB | 	rdlong	local03, fp
2e874     15 29 02 F6 | 	mov	local02, local03
2e878     01 28 06 F1 | 	add	local02, #1
2e87c     A7 28 62 FC | 	wrlong	local02, fp
2e880     08 4E 85 F1 | 	sub	fp, #8
2e884     A7 28 02 FB | 	rdlong	local02, fp
2e888     15 29 42 FC | 	wrbyte	local02, local03
2e88c     04 4E 85 F1 | 	sub	fp, #4
2e890     A7 2A 02 FB | 	rdlong	local03, fp
2e894     01 2A 06 F1 | 	add	local03, #1
2e898     A7 2A 62 FC | 	wrlong	local03, fp
2e89c     04 4E 85 F1 | 	sub	fp, #4
2e8a0     A7 2A 02 FB | 	rdlong	local03, fp
2e8a4     01 2A 86 F1 | 	sub	local03, #1
2e8a8     A7 2A 62 FC | 	wrlong	local03, fp
2e8ac     14 4E 05 F1 | 	add	fp, #20
2e8b0     A7 2A 0A FB | 	rdlong	local03, fp wz
2e8b4     20 4E 85 F1 | 	sub	fp, #32
2e8b8     4C FF 9F AD |  if_e	jmp	#LR__4404
2e8bc     14 4E 05 F1 | 	add	fp, #20
2e8c0     A7 28 02 FB | 	rdlong	local02, fp
2e8c4     14 4E 85 F1 | 	sub	fp, #20
2e8c8     0A 28 0E F2 | 	cmp	local02, #10 wz
2e8cc     38 FF 9F 5D |  if_ne	jmp	#LR__4404
2e8d0                 | LR__4405
2e8d0     10 4E 05 F1 | 	add	fp, #16
2e8d4     A7 FA 01 FB | 	rdlong	result1, fp
2e8d8     10 4E 85 F1 | 	sub	fp, #16
2e8dc                 | LR__4406
2e8dc     A7 F0 03 F6 | 	mov	ptra, fp
2e8e0     B2 00 A0 FD | 	call	#popregs_
2e8e4                 | __system___vfsread_ret
2e8e4     2D 00 64 FD | 	ret
2e8e8                 | 
2e8e8                 | __system____default_filbuf
2e8e8     04 4A 05 F6 | 	mov	COUNT_, #4
2e8ec     A8 00 A0 FD | 	call	#pushregs_
2e8f0     09 27 02 F6 | 	mov	local01, arg01
2e8f4     13 29 02 FB | 	rdlong	local02, local01
2e8f8     0C 28 06 F1 | 	add	local02, #12
2e8fc     14 FB 09 FB | 	rdlong	result1, local02 wz
2e900     0C 28 86 F1 | 	sub	local02, #12
2e904     20 00 90 5D |  if_ne	jmp	#LR__4410
2e908     14 28 06 F1 | 	add	local02, #20
2e90c     14 FB 01 F6 | 	mov	result1, local02
2e910     04 28 86 F1 | 	sub	local02, #4
2e914     14 FB 61 FC | 	wrlong	result1, local02
2e918     04 28 86 F1 | 	sub	local02, #4
2e91c     02 00 80 FF 
2e920     14 01 68 FC | 	wrlong	##1024, local02
2e924     0C 28 86 F1 | 	sub	local02, #12
2e928                 | LR__4410
2e928     14 26 06 F1 | 	add	local01, #20
2e92c     13 2B 02 FB | 	rdlong	local03, local01
2e930     15 2D 02 F6 | 	mov	local04, local03
2e934     14 26 86 F1 | 	sub	local01, #20
2e938     13 2C 46 F7 | 	zerox	local04, #19
2e93c     14 2A 46 F0 | 	shr	local03, #20
2e940     02 2A 66 F0 | 	shl	local03, #2
2e944     ED 2A 02 F1 | 	add	local03, __methods__
2e948     15 2B 02 FB | 	rdlong	local03, local03
2e94c     10 28 06 F1 | 	add	local02, #16
2e950     14 15 02 FB | 	rdlong	arg02, local02
2e954     04 28 86 F1 | 	sub	local02, #4
2e958     14 17 02 FB | 	rdlong	arg03, local02
2e95c     0C 28 86 F1 | 	sub	local02, #12
2e960     13 13 02 F6 | 	mov	arg01, local01
2e964     F2 26 02 F6 | 	mov	local01, objptr
2e968     16 E5 01 F6 | 	mov	objptr, local04
2e96c     2D 2A 62 FD | 	call	local03
2e970     13 E5 01 F6 | 	mov	objptr, local01
2e974     FD 2C 02 F6 | 	mov	local04, result1
2e978     00 2C 56 F2 | 	cmps	local04, #0 wc
2e97c     01 FA 65 C6 |  if_b	neg	result1, #1
2e980     28 00 90 CD |  if_b	jmp	#LR__4411
2e984     14 2D 62 FC | 	wrlong	local04, local02
2e988     10 28 06 F1 | 	add	local02, #16
2e98c     14 2B 02 FB | 	rdlong	local03, local02
2e990     0C 28 86 F1 | 	sub	local02, #12
2e994     14 2B 62 FC | 	wrlong	local03, local02
2e998     04 28 06 F1 | 	add	local02, #4
2e99c     14 2B 02 FB | 	rdlong	local03, local02
2e9a0     01 2A 46 F5 | 	or	local03, #1
2e9a4     14 2B 62 FC | 	wrlong	local03, local02
2e9a8     16 FB 01 F6 | 	mov	result1, local04
2e9ac                 | LR__4411
2e9ac     A7 F0 03 F6 | 	mov	ptra, fp
2e9b0     B2 00 A0 FD | 	call	#popregs_
2e9b4                 | __system____default_filbuf_ret
2e9b4     2D 00 64 FD | 	ret
2e9b8                 | 
2e9b8                 | __system__getlower_1114
2e9b8     41 12 56 F2 | 	cmps	arg01, #65 wc
2e9bc     10 00 90 CD |  if_b	jmp	#LR__4420
2e9c0     5B 12 56 F2 | 	cmps	arg01, #91 wc
2e9c4     09 FB 01 C6 |  if_b	mov	result1, arg01
2e9c8     20 FA 05 C1 |  if_b	add	result1, #32
2e9cc     04 00 90 CD |  if_b	jmp	#__system__getlower_1114_ret
2e9d0                 | LR__4420
2e9d0     09 FB 01 F6 | 	mov	result1, arg01
2e9d4                 | __system__getlower_1114_ret
2e9d4     2D 00 64 FD | 	ret
2e9d8                 | 
2e9d8                 | __system___pat_match
2e9d8     08 4A 05 F6 | 	mov	COUNT_, #8
2e9dc     A8 00 A0 FD | 	call	#pushregs_
2e9e0     09 27 02 F6 | 	mov	local01, arg01
2e9e4                 | LR__4430
2e9e4     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2e9e8     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2e9ec     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2e9f0     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2e9f4     2C 00 90 AD |  if_e	jmp	#LR__4431
2e9f8     0A 13 C2 FA | 	rdbyte	arg01, arg02
2e9fc     B8 FF BF FD | 	call	#__system__getlower_1114
2ea00     FD 2A 02 F6 | 	mov	local03, result1
2ea04     13 13 C2 FA | 	rdbyte	arg01, local01
2ea08     AC FF BF FD | 	call	#__system__getlower_1114
2ea0c     15 FB 09 F2 | 	cmp	result1, local03 wz
2ea10     00 FA 05 56 |  if_ne	mov	result1, #0
2ea14     00 01 90 5D |  if_ne	jmp	#LR__4440
2ea18     01 26 06 F1 | 	add	local01, #1
2ea1c     01 14 06 F1 | 	add	arg02, #1
2ea20     C0 FF 9F FD | 	jmp	#LR__4430
2ea24                 | LR__4431
2ea24     0A 2B C2 FA | 	rdbyte	local03, arg02
2ea28     2A 2A 0E F2 | 	cmp	local03, #42 wz
2ea2c     D8 00 90 5D |  if_ne	jmp	#LR__4439
2ea30     01 14 06 F1 | 	add	arg02, #1
2ea34     0A 29 C2 FA | 	rdbyte	local02, arg02
2ea38     01 14 86 F1 | 	sub	arg02, #1
2ea3c     2E 28 0E F2 | 	cmp	local02, #46 wz
2ea40     28 00 90 5D |  if_ne	jmp	#LR__4432
2ea44     02 14 06 F1 | 	add	arg02, #2
2ea48     0A 29 C2 FA | 	rdbyte	local02, arg02
2ea4c     02 14 86 F1 | 	sub	arg02, #2
2ea50     2A 28 0E F2 | 	cmp	local02, #42 wz
2ea54     03 14 06 A1 |  if_e	add	arg02, #3
2ea58     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2ea5c     03 14 86 A1 |  if_e	sub	arg02, #3
2ea60     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2ea64     01 FA 05 A6 |  if_e	mov	result1, #1
2ea68     AC 00 90 AD |  if_e	jmp	#LR__4440
2ea6c                 | LR__4432
2ea6c     01 14 06 F1 | 	add	arg02, #1
2ea70     00 30 06 F6 | 	mov	local06, #0
2ea74     97 0E 48 FB | 	callpa	#(@LR__4434-@LR__4433)>>2,fcache_load_ptr_
2ea78                 | LR__4433
2ea78     18 33 02 F6 | 	mov	local07, local06
2ea7c     0A 33 02 F1 | 	add	local07, arg02
2ea80     19 33 CA FA | 	rdbyte	local07, local07 wz
2ea84     18 2F 02 56 |  if_ne	mov	local05, local06
2ea88     01 2E 06 51 |  if_ne	add	local05, #1
2ea8c     17 31 02 56 |  if_ne	mov	local06, local05
2ea90     E4 FF 9F 5D |  if_ne	jmp	#LR__4433
2ea94                 | LR__4434
2ea94     00 34 06 F6 | 	mov	local08, #0
2ea98     97 0E 48 FB | 	callpa	#(@LR__4436-@LR__4435)>>2,fcache_load_ptr_
2ea9c                 | LR__4435
2ea9c     1A 33 02 F6 | 	mov	local07, local08
2eaa0     13 33 02 F1 | 	add	local07, local01
2eaa4     19 33 CA FA | 	rdbyte	local07, local07 wz
2eaa8     1A 2F 02 56 |  if_ne	mov	local05, local08
2eaac     01 2E 06 51 |  if_ne	add	local05, #1
2eab0     17 35 02 56 |  if_ne	mov	local08, local05
2eab4     E4 FF 9F 5D |  if_ne	jmp	#LR__4435
2eab8                 | LR__4436
2eab8     18 35 52 F2 | 	cmps	local08, local06 wc
2eabc     00 FA 05 C6 |  if_b	mov	result1, #0
2eac0     54 00 90 CD |  if_b	jmp	#LR__4440
2eac4     1A 29 02 F6 | 	mov	local02, local08
2eac8     18 29 82 F1 | 	sub	local02, local06
2eacc     14 27 02 F1 | 	add	local01, local02
2ead0                 | LR__4437
2ead0     01 30 56 F2 | 	cmps	local06, #1 wc
2ead4     30 00 90 CD |  if_b	jmp	#LR__4438
2ead8     13 13 C2 FA | 	rdbyte	arg01, local01
2eadc     D8 FE BF FD | 	call	#__system__getlower_1114
2eae0     FD 34 02 F6 | 	mov	local08, result1
2eae4     0A 13 C2 FA | 	rdbyte	arg01, arg02
2eae8     CC FE BF FD | 	call	#__system__getlower_1114
2eaec     FD 34 0A F2 | 	cmp	local08, result1 wz
2eaf0     00 FA 05 56 |  if_ne	mov	result1, #0
2eaf4     20 00 90 5D |  if_ne	jmp	#LR__4440
2eaf8     01 26 06 F1 | 	add	local01, #1
2eafc     01 14 06 F1 | 	add	arg02, #1
2eb00     01 30 86 F1 | 	sub	local06, #1
2eb04     C8 FF 9F FD | 	jmp	#LR__4437
2eb08                 | LR__4438
2eb08                 | LR__4439
2eb08     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2eb0c     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2eb10     01 FA 05 A6 |  if_e	mov	result1, #1
2eb14     00 FA 05 56 |  if_ne	mov	result1, #0
2eb18                 | LR__4440
2eb18     A7 F0 03 F6 | 	mov	ptra, fp
2eb1c     B2 00 A0 FD | 	call	#popregs_
2eb20                 | __system___pat_match_ret
2eb20     2D 00 64 FD | 	ret
2eb24                 | 
2eb24                 | _fatfs_cc_memcmp
2eb24                 | ' 	for (n = size; n > 0; n--)
2eb24     00 16 0E F2 | 	cmp	arg03, #0 wz
2eb28     28 00 90 AD |  if_e	jmp	#LR__4451
2eb2c                 | LR__4450
2eb2c     09 01 C2 FA | 	rdbyte	_var01, arg01
2eb30     0A 03 C2 FA | 	rdbyte	_var02, arg02
2eb34     01 01 0A F2 | 	cmp	_var01, _var02 wz
2eb38     01 12 06 A1 |  if_e	add	arg01, #1
2eb3c     01 14 06 A1 |  if_e	add	arg02, #1
2eb40                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2eb40     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2eb44     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2eb48     01 FB 81 51 |  if_ne	sub	result1, _var02
2eb4c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2eb50     F6 17 6E FB | 	djnz	arg03, #LR__4450
2eb54                 | LR__4451
2eb54                 | ' 
2eb54                 | ' 	return(0);
2eb54     00 FA 05 F6 | 	mov	result1, #0
2eb58                 | _fatfs_cc_memcmp_ret
2eb58     2D 00 64 FD | 	ret
2eb5c                 | 
2eb5c                 | _fatfs_cc_strncmp
2eb5c     09 01 0A F6 | 	mov	_var01, arg01 wz
2eb60     14 00 90 5D |  if_ne	jmp	#LR__4460
2eb64                 | ' 		return scan2 ? -1 : 0;
2eb64     00 14 0E F2 | 	cmp	arg02, #0 wz
2eb68     01 02 66 56 |  if_ne	neg	_var02, #1
2eb6c     00 02 06 A6 |  if_e	mov	_var02, #0
2eb70     01 FB 01 F6 | 	mov	result1, _var02
2eb74     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2eb78                 | LR__4460
2eb78     00 14 0E F2 | 	cmp	arg02, #0 wz
2eb7c     01 FA 05 A6 |  if_e	mov	result1, #1
2eb80     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2eb84     0B 05 02 F6 | 	mov	_var03, arg03
2eb88     97 16 48 FB | 	callpa	#(@LR__4462-@LR__4461)>>2,fcache_load_ptr_
2eb8c                 | ' 	count = n;
2eb8c                 | ' 	do {
2eb8c                 | LR__4461
2eb8c     00 07 C2 FA | 	rdbyte	_var04, _var01
2eb90     0A 09 02 F6 | 	mov	_var05, arg02
2eb94     04 0B C2 FA | 	rdbyte	_var06, _var05
2eb98     01 04 86 F1 | 	sub	_var03, #1
2eb9c     00 04 56 F2 | 	cmps	_var03, #0 wc
2eba0     01 00 06 F1 | 	add	_var01, #1
2eba4     01 14 06 F1 | 	add	arg02, #1
2eba8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2ebac     08 00 90 2D |  if_nc_and_z	jmp	#LR__4463
2ebb0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2ebb4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4461
2ebb8                 | LR__4462
2ebb8                 | LR__4463
2ebb8     00 04 56 F2 | 	cmps	_var03, #0 wc
2ebbc                 | ' 		return(0);
2ebbc     00 FA 05 C6 |  if_b	mov	result1, #0
2ebc0     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2ebc4     05 07 0A F2 | 	cmp	_var04, _var06 wz
2ebc8                 | ' 		return(0);
2ebc8     00 FA 05 A6 |  if_e	mov	result1, #0
2ebcc     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2ebd0     00 06 0E F2 | 	cmp	_var04, #0 wz
2ebd4                 | ' 		return(-1);
2ebd4     01 FA 65 A6 |  if_e	neg	result1, #1
2ebd8     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2ebdc     00 0A 0E F2 | 	cmp	_var06, #0 wz
2ebe0                 | ' 		return(1);
2ebe0     01 FA 05 A6 |  if_e	mov	result1, #1
2ebe4                 | ' 		return(c1 - c2);
2ebe4     03 FB 01 56 |  if_ne	mov	result1, _var04
2ebe8     05 FB 81 51 |  if_ne	sub	result1, _var06
2ebec                 | _fatfs_cc_strncmp_ret
2ebec     2D 00 64 FD | 	ret
2ebf0                 | 
2ebf0                 | _fatfs_cc_strchr
2ebf0                 | ' #line 16 "/home/pik33/flexprop/include/libc/string/strchr.c"
2ebf0                 | ' 	while ((c = *s++) != (char) charwanted)
2ebf0                 | LR__4470
2ebf0     09 01 02 F6 | 	mov	_var01, arg01
2ebf4     00 03 C2 FA | 	rdbyte	_var02, _var01
2ebf8     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2ebfc     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2ec00     03 05 0A F2 | 	cmp	_var03, _var04 wz
2ec04     01 12 06 F1 | 	add	arg01, #1
2ec08     14 00 90 AD |  if_e	jmp	#LR__4471
2ec0c     01 05 02 F6 | 	mov	_var03, _var02
2ec10     07 04 4E F7 | 	zerox	_var03, #7 wz
2ec14     00 FA 05 A6 |  if_e	mov	result1, #0
2ec18     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2ec1c     D0 FF 9F FD | 	jmp	#LR__4470
2ec20                 | LR__4471
2ec20                 | ' 	return((char *)--s);
2ec20     01 12 86 F1 | 	sub	arg01, #1
2ec24     09 FB 01 F6 | 	mov	result1, arg01
2ec28                 | _fatfs_cc_strchr_ret
2ec28     2D 00 64 FD | 	ret
2ec2c                 | 
2ec2c                 | _fatfs_cc_disk_initialize
2ec2c     04 4A 05 F6 | 	mov	COUNT_, #4
2ec30     A8 00 A0 FD | 	call	#pushregs_
2ec34     40 F0 07 F1 | 	add	ptra, #64
2ec38     04 4E 05 F1 | 	add	fp, #4
2ec3c     A7 12 42 FC | 	wrbyte	arg01, fp
2ec40     14 E4 05 F1 | 	add	objptr, #20
2ec44     F2 18 02 FB | 	rdlong	arg04, objptr
2ec48     2C 4E 05 F1 | 	add	fp, #44
2ec4c     A7 18 62 FC | 	wrlong	arg04, fp
2ec50     04 E4 85 F1 | 	sub	objptr, #4
2ec54     F2 18 02 FB | 	rdlong	arg04, objptr
2ec58     04 4E 05 F1 | 	add	fp, #4
2ec5c     A7 18 62 FC | 	wrlong	arg04, fp
2ec60     08 E4 05 F1 | 	add	objptr, #8
2ec64     F2 18 02 FB | 	rdlong	arg04, objptr
2ec68     04 4E 05 F1 | 	add	fp, #4
2ec6c     A7 18 62 FC | 	wrlong	arg04, fp
2ec70     04 E4 05 F1 | 	add	objptr, #4
2ec74     F2 18 02 FB | 	rdlong	arg04, objptr
2ec78     04 4E 05 F1 | 	add	fp, #4
2ec7c     A7 18 62 FC | 	wrlong	arg04, fp
2ec80     04 E4 05 F1 | 	add	objptr, #4
2ec84     F2 02 48 FC | 	wrbyte	#1, objptr
2ec88     20 E4 85 F1 | 	sub	objptr, #32
2ec8c     38 4E 85 F1 | 	sub	fp, #56
2ec90     A7 18 CA FA | 	rdbyte	arg04, fp wz
2ec94     04 4E 85 F1 | 	sub	fp, #4
2ec98                 | ' #line 531 "/home/pik33/flexprop/include/filesys/fatfs/sdmm.cc"
2ec98                 | '             return RES_NOTRDY;
2ec98     03 FA 05 56 |  if_ne	mov	result1, #3
2ec9c     D0 05 90 5D |  if_ne	jmp	#LR__4498
2eca0     13 00 00 FF 
2eca4     10 13 06 F6 | 	mov	arg01, ##10000
2eca8     C4 97 BF FD | 	call	#__system___waitus
2ecac     30 4E 05 F1 | 	add	fp, #48
2ecb0     A7 12 02 FB | 	rdlong	arg01, fp
2ecb4     09 01 08 FC | 	wrpin	#0, arg01
2ecb8     04 4E 05 F1 | 	add	fp, #4
2ecbc     A7 12 02 FB | 	rdlong	arg01, fp
2ecc0     09 01 08 FC | 	wrpin	#0, arg01
2ecc4     04 4E 05 F1 | 	add	fp, #4
2ecc8     A7 12 02 FB | 	rdlong	arg01, fp
2eccc     09 01 08 FC | 	wrpin	#0, arg01
2ecd0     04 4E 05 F1 | 	add	fp, #4
2ecd4     A7 12 02 FB | 	rdlong	arg01, fp
2ecd8     09 00 80 FF 
2ecdc     09 01 08 FC | 	wrpin	##4608, arg01
2ece0     0C 4E 85 F1 | 	sub	fp, #12
2ece4     A7 12 02 FB | 	rdlong	arg01, fp
2ece8     59 12 62 FD | 	drvh	arg01
2ecec     04 4E 05 F1 | 	add	fp, #4
2ecf0     A7 12 02 FB | 	rdlong	arg01, fp
2ecf4     59 12 62 FD | 	drvh	arg01
2ecf8     04 4E 05 F1 | 	add	fp, #4
2ecfc     A7 12 02 FB | 	rdlong	arg01, fp
2ed00     59 12 62 FD | 	drvh	arg01
2ed04     04 4E 05 F1 | 	add	fp, #4
2ed08     A7 12 02 FB | 	rdlong	arg01, fp
2ed0c     59 12 62 FD | 	drvh	arg01
2ed10     20 4E 85 F1 | 	sub	fp, #32
2ed14     00 04 80 FF 
2ed18     A7 20 68 FC | 	wrlong	##524304, fp
2ed1c     04 4E 05 F1 | 	add	fp, #4
2ed20     20 03 80 FF 
2ed24     A7 90 68 FC | 	wrlong	##409672, fp
2ed28     14 4E 05 F1 | 	add	fp, #20
2ed2c     A7 26 02 FB | 	rdlong	local01, fp
2ed30     18 4E 85 F1 | 	sub	fp, #24
2ed34     A7 16 02 FB | 	rdlong	arg03, fp
2ed38     40 26 62 FD | 	dirl	local01
2ed3c     A0 03 80 FF 
2ed40     13 91 08 FC | 	wrpin	##475208, local01
2ed44     13 17 12 FC | 	wxpin	arg03, local01
2ed48     13 01 28 FC | 	wypin	#0, local01
2ed4c     41 26 62 FD | 	dirh	local01
2ed50     1C 4E 05 F1 | 	add	fp, #28
2ed54     A7 28 02 FB | 	rdlong	local02, fp
2ed58     14 27 82 F1 | 	sub	local01, local02
2ed5c     07 26 06 F5 | 	and	local01, #7
2ed60     18 26 66 F0 | 	shl	local01, #24
2ed64     78 14 06 F6 | 	mov	arg02, #120
2ed68     13 15 42 F5 | 	or	arg02, local01
2ed6c     14 4E 85 F1 | 	sub	fp, #20
2ed70     A7 14 62 FC | 	wrlong	arg02, fp
2ed74     14 4E 05 F1 | 	add	fp, #20
2ed78     A7 12 02 FB | 	rdlong	arg01, fp
2ed7c     10 14 26 F4 | 	bith	arg02, #16
2ed80     40 12 62 FD | 	dirl	arg01
2ed84     09 15 02 FC | 	wrpin	arg02, arg01
2ed88     09 3F 18 FC | 	wxpin	#31, arg01
2ed8c     FF FF FF FF 
2ed90     09 FF 2B FC | 	wypin	##-1, arg01
2ed94     41 12 62 FD | 	dirh	arg01
2ed98     04 4E 85 F1 | 	sub	fp, #4
2ed9c     A7 14 02 FB | 	rdlong	arg02, fp
2eda0     08 4E 05 F1 | 	add	fp, #8
2eda4     A7 2A 02 FB | 	rdlong	local03, fp
2eda8     15 15 82 F1 | 	sub	arg02, local03
2edac     07 14 06 F5 | 	and	arg02, #7
2edb0     18 14 66 F0 | 	shl	arg02, #24
2edb4     14 4E 85 F1 | 	sub	fp, #20
2edb8     A7 14 62 FC | 	wrlong	arg02, fp
2edbc     29 00 00 FF 
2edc0     7A 14 46 F5 | 	or	arg02, ##21114
2edc4     A7 14 62 FC | 	wrlong	arg02, fp
2edc8     14 4E 05 F1 | 	add	fp, #20
2edcc     A7 12 02 FB | 	rdlong	arg01, fp
2edd0     40 12 62 FD | 	dirl	arg01
2edd4     09 15 02 FC | 	wrpin	arg02, arg01
2edd8     09 4F 18 FC | 	wxpin	#39, arg01
2eddc     09 01 28 FC | 	wypin	#0, arg01
2ede0     41 12 62 FD | 	dirh	arg01
2ede4     28 4E 85 F1 | 	sub	fp, #40
2ede8     A7 12 02 F6 | 	mov	arg01, fp
2edec     14 4E 85 F1 | 	sub	fp, #20
2edf0     0A 14 06 F6 | 	mov	arg02, #10
2edf4     B0 66 B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1145
2edf8     00 12 06 F6 | 	mov	arg01, #0
2edfc     00 14 06 F6 | 	mov	arg02, #0
2ee00     64 6A B0 FD | 	call	#_fatfs_cc_send_cmd_1169
2ee04     B0 67 B0 FD | 	call	#_fatfs_cc_deselect_1155
2ee08     64 12 06 F6 | 	mov	arg01, #100
2ee0c     60 96 BF FD | 	call	#__system___waitus
2ee10     14 4E 05 F1 | 	add	fp, #20
2ee14     A7 12 02 F6 | 	mov	arg01, fp
2ee18     14 4E 85 F1 | 	sub	fp, #20
2ee1c     0A 14 06 F6 | 	mov	arg02, #10
2ee20     84 66 B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1145
2ee24     0C 4E 05 F1 | 	add	fp, #12
2ee28     A7 00 48 FC | 	wrbyte	#0, fp
2ee2c     0C 4E 85 F1 | 	sub	fp, #12
2ee30     00 12 06 F6 | 	mov	arg01, #0
2ee34     00 14 06 F6 | 	mov	arg02, #0
2ee38     2C 6A B0 FD | 	call	#_fatfs_cc_send_cmd_1169
2ee3c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2ee40     01 18 0E F2 | 	cmp	arg04, #1 wz
2ee44     B8 03 90 5D |  if_ne	jmp	#LR__4497
2ee48     08 12 06 F6 | 	mov	arg01, #8
2ee4c     AA 15 06 F6 | 	mov	arg02, #426
2ee50     14 6A B0 FD | 	call	#_fatfs_cc_send_cmd_1169
2ee54     FD FA E1 F8 | 	getbyte	result1, result1, #0
2ee58     01 FA 0D F2 | 	cmp	result1, #1 wz
2ee5c     98 01 90 5D |  if_ne	jmp	#LR__4483
2ee60     14 4E 05 F1 | 	add	fp, #20
2ee64     A7 12 02 F6 | 	mov	arg01, fp
2ee68     14 4E 85 F1 | 	sub	fp, #20
2ee6c     04 14 06 F6 | 	mov	arg02, #4
2ee70     34 66 B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1145
2ee74     16 4E 05 F1 | 	add	fp, #22
2ee78     A7 2C C2 FA | 	rdbyte	local04, fp
2ee7c     16 4E 85 F1 | 	sub	fp, #22
2ee80     01 2C 0E F2 | 	cmp	local04, #1 wz
2ee84     17 4E 05 A1 |  if_e	add	fp, #23
2ee88     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2ee8c     17 4E 85 A1 |  if_e	sub	fp, #23
2ee90     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2ee94     68 03 90 5D |  if_ne	jmp	#LR__4496
2ee98                 | ' 				for (tmr = 1000; tmr; tmr--) {
2ee98     18 4E 05 F1 | 	add	fp, #24
2ee9c     01 00 80 FF 
2eea0     A7 D0 6B FC | 	wrlong	##1000, fp
2eea4     18 4E 85 F1 | 	sub	fp, #24
2eea8                 | LR__4480
2eea8     18 4E 05 F1 | 	add	fp, #24
2eeac     A7 26 0A FB | 	rdlong	local01, fp wz
2eeb0     18 4E 85 F1 | 	sub	fp, #24
2eeb4     3C 00 90 AD |  if_e	jmp	#LR__4481
2eeb8     A9 12 06 F6 | 	mov	arg01, #169
2eebc     1E 14 C6 F9 | 	decod	arg02, #30
2eec0     A4 69 B0 FD | 	call	#_fatfs_cc_send_cmd_1169
2eec4     FD 2C 02 F6 | 	mov	local04, result1
2eec8     07 2C 4E F7 | 	zerox	local04, #7 wz
2eecc     24 00 90 AD |  if_e	jmp	#LR__4481
2eed0     01 00 00 FF 
2eed4     E8 13 06 F6 | 	mov	arg01, ##1000
2eed8     94 95 BF FD | 	call	#__system___waitus
2eedc     18 4E 05 F1 | 	add	fp, #24
2eee0     A7 2C 02 FB | 	rdlong	local04, fp
2eee4     01 2C 86 F1 | 	sub	local04, #1
2eee8     A7 2C 62 FC | 	wrlong	local04, fp
2eeec     18 4E 85 F1 | 	sub	fp, #24
2eef0     B4 FF 9F FD | 	jmp	#LR__4480
2eef4                 | LR__4481
2eef4     18 4E 05 F1 | 	add	fp, #24
2eef8     A7 2C 0A FB | 	rdlong	local04, fp wz
2eefc     18 4E 85 F1 | 	sub	fp, #24
2ef00     4C 00 90 AD |  if_e	jmp	#LR__4482
2ef04     3A 12 06 F6 | 	mov	arg01, #58
2ef08     00 14 06 F6 | 	mov	arg02, #0
2ef0c     58 69 B0 FD | 	call	#_fatfs_cc_send_cmd_1169
2ef10     FD 2A 02 F6 | 	mov	local03, result1
2ef14     07 2A 4E F7 | 	zerox	local03, #7 wz
2ef18     34 00 90 5D |  if_ne	jmp	#LR__4482
2ef1c     14 4E 05 F1 | 	add	fp, #20
2ef20     A7 12 02 F6 | 	mov	arg01, fp
2ef24     14 4E 85 F1 | 	sub	fp, #20
2ef28     04 14 06 F6 | 	mov	arg02, #4
2ef2c     78 65 B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1145
2ef30     14 4E 05 F1 | 	add	fp, #20
2ef34     A7 26 C2 FA | 	rdbyte	local01, fp
2ef38     40 26 CE F7 | 	test	local01, #64 wz
2ef3c     0C 2C 06 56 |  if_ne	mov	local04, #12
2ef40     04 2C 06 A6 |  if_e	mov	local04, #4
2ef44     08 4E 85 F1 | 	sub	fp, #8
2ef48     A7 2C 42 FC | 	wrbyte	local04, fp
2ef4c     0C 4E 85 F1 | 	sub	fp, #12
2ef50                 | LR__4482
2ef50     14 2C 06 FB | 	rdlong	local04, #20
2ef54     18 4E 05 F1 | 	add	fp, #24
2ef58     A7 2C 62 FC | 	wrlong	local04, fp
2ef5c     0C 4E 05 F1 | 	add	fp, #12
2ef60     A7 2C 02 FB | 	rdlong	local04, fp
2ef64     1B 2C 26 F4 | 	bith	local04, #27
2ef68     A7 2C 62 FC | 	wrlong	local04, fp
2ef6c     0C 4E 85 F1 | 	sub	fp, #12
2ef70     A7 2C 02 FB | 	rdlong	local04, fp
2ef74     18 4E 85 F1 | 	sub	fp, #24
2ef78     68 78 04 FF 
2ef7c     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2ef80     1C 4E 05 C1 |  if_b	add	fp, #28
2ef84     00 01 80 CF 
2ef88     A7 08 68 CC |  if_b	wrlong	##131076, fp
2ef8c     1C 4E 85 C1 |  if_b	sub	fp, #28
2ef90     6C 02 90 CD |  if_b	jmp	#LR__4496
2ef94     18 4E 05 F1 | 	add	fp, #24
2ef98     A7 2C 02 FB | 	rdlong	local04, fp
2ef9c     18 4E 85 F1 | 	sub	fp, #24
2efa0     E1 F5 05 FF 
2efa4     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2efa8     1C 4E 05 C1 |  if_b	add	fp, #28
2efac     00 01 80 CF 
2efb0     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2efb4     1C 4E 85 C1 |  if_b	sub	fp, #28
2efb8     44 02 90 CD |  if_b	jmp	#LR__4496
2efbc     18 4E 05 F1 | 	add	fp, #24
2efc0     A7 2C 02 FB | 	rdlong	local04, fp
2efc4     18 4E 85 F1 | 	sub	fp, #24
2efc8     3B 58 08 FF 
2efcc     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2efd0     1C 4E 05 C1 |  if_b	add	fp, #28
2efd4     00 01 80 CF 
2efd8     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2efdc     1C 4E 85 C1 |  if_b	sub	fp, #28
2efe0     1C 02 90 CD |  if_b	jmp	#LR__4496
2efe4     1C 4E 05 F1 | 	add	fp, #28
2efe8     80 01 80 FF 
2efec     A7 10 68 FC | 	wrlong	##196616, fp
2eff0     1C 4E 85 F1 | 	sub	fp, #28
2eff4     08 02 90 FD | 	jmp	#LR__4496
2eff8                 | LR__4483
2eff8     A9 12 06 F6 | 	mov	arg01, #169
2effc     00 14 06 F6 | 	mov	arg02, #0
2f000     64 68 B0 FD | 	call	#_fatfs_cc_send_cmd_1169
2f004     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2f008     02 2C 16 F2 | 	cmp	local04, #2 wc
2f00c     18 00 90 3D |  if_ae	jmp	#LR__4484
2f010     0C 4E 05 F1 | 	add	fp, #12
2f014     A7 04 48 FC | 	wrbyte	#2, fp
2f018     04 4E 05 F1 | 	add	fp, #4
2f01c     A7 52 49 FC | 	wrbyte	#169, fp
2f020     10 4E 85 F1 | 	sub	fp, #16
2f024     14 00 90 FD | 	jmp	#LR__4485
2f028                 | LR__4484
2f028     0C 4E 05 F1 | 	add	fp, #12
2f02c     A7 02 48 FC | 	wrbyte	#1, fp
2f030     04 4E 05 F1 | 	add	fp, #4
2f034     A7 02 48 FC | 	wrbyte	#1, fp
2f038     10 4E 85 F1 | 	sub	fp, #16
2f03c                 | LR__4485
2f03c                 | ' 				ty =  0x01 ; cmd =  (1) ;
2f03c                 | ' 			}
2f03c                 | ' 			for (tmr = 1000; tmr; tmr--) {
2f03c     18 4E 05 F1 | 	add	fp, #24
2f040     01 00 80 FF 
2f044     A7 D0 6B FC | 	wrlong	##1000, fp
2f048     18 4E 85 F1 | 	sub	fp, #24
2f04c                 | LR__4486
2f04c     18 4E 05 F1 | 	add	fp, #24
2f050     A7 2A 0A FB | 	rdlong	local03, fp wz
2f054     18 4E 85 F1 | 	sub	fp, #24
2f058     44 00 90 AD |  if_e	jmp	#LR__4487
2f05c     10 4E 05 F1 | 	add	fp, #16
2f060     A7 12 C2 FA | 	rdbyte	arg01, fp
2f064     10 4E 85 F1 | 	sub	fp, #16
2f068     00 14 06 F6 | 	mov	arg02, #0
2f06c     F8 67 B0 FD | 	call	#_fatfs_cc_send_cmd_1169
2f070     FD 2C 02 F6 | 	mov	local04, result1
2f074     07 2C 4E F7 | 	zerox	local04, #7 wz
2f078     24 00 90 AD |  if_e	jmp	#LR__4487
2f07c     01 00 00 FF 
2f080     E8 13 06 F6 | 	mov	arg01, ##1000
2f084     E8 93 BF FD | 	call	#__system___waitus
2f088     18 4E 05 F1 | 	add	fp, #24
2f08c     A7 2C 02 FB | 	rdlong	local04, fp
2f090     01 2C 86 F1 | 	sub	local04, #1
2f094     A7 2C 62 FC | 	wrlong	local04, fp
2f098     18 4E 85 F1 | 	sub	fp, #24
2f09c     AC FF 9F FD | 	jmp	#LR__4486
2f0a0                 | LR__4487
2f0a0     18 4E 05 F1 | 	add	fp, #24
2f0a4     A7 2C 0A FB | 	rdlong	local04, fp wz
2f0a8     18 4E 85 F1 | 	sub	fp, #24
2f0ac     14 00 90 AD |  if_e	jmp	#LR__4488
2f0b0     10 12 06 F6 | 	mov	arg01, #16
2f0b4     09 14 C6 F9 | 	decod	arg02, #9
2f0b8     AC 67 B0 FD | 	call	#_fatfs_cc_send_cmd_1169
2f0bc     07 FA 4D F7 | 	zerox	result1, #7 wz
2f0c0     0C 00 90 AD |  if_e	jmp	#LR__4489
2f0c4                 | LR__4488
2f0c4     0C 4E 05 F1 | 	add	fp, #12
2f0c8     A7 00 48 FC | 	wrbyte	#0, fp
2f0cc     0C 4E 85 F1 | 	sub	fp, #12
2f0d0                 | LR__4489
2f0d0     14 2C 06 FB | 	rdlong	local04, #20
2f0d4     18 4E 05 F1 | 	add	fp, #24
2f0d8     A7 2C 62 FC | 	wrlong	local04, fp
2f0dc     18 4E 85 F1 | 	sub	fp, #24
2f0e0     F0 FA 02 FF 
2f0e4     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2f0e8     18 00 90 3D |  if_ae	jmp	#LR__4490
2f0ec     24 4E 05 F1 | 	add	fp, #36
2f0f0     A7 2C 02 FB | 	rdlong	local04, fp
2f0f4     1B 2C 26 F4 | 	bith	local04, #27
2f0f8     A7 2C 62 FC | 	wrlong	local04, fp
2f0fc     24 4E 85 F1 | 	sub	fp, #36
2f100     2C 00 90 FD | 	jmp	#LR__4491
2f104                 | LR__4490
2f104     18 4E 05 F1 | 	add	fp, #24
2f108     A7 2C 02 FB | 	rdlong	local04, fp
2f10c     18 4E 85 F1 | 	sub	fp, #24
2f110     E1 F5 05 FF 
2f114     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2f118     24 4E 05 C1 |  if_b	add	fp, #36
2f11c     A7 2C 02 CB |  if_b	rdlong	local04, fp
2f120     80 00 04 CF 
2f124     00 2C 46 C5 |  if_b	or	local04, ##134283264
2f128     A7 2C 62 CC |  if_b	wrlong	local04, fp
2f12c     24 4E 85 C1 |  if_b	sub	fp, #36
2f130                 | LR__4491
2f130     18 4E 05 F1 | 	add	fp, #24
2f134     A7 2C 02 FB | 	rdlong	local04, fp
2f138     18 4E 85 F1 | 	sub	fp, #24
2f13c     F0 FA 02 FF 
2f140     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2f144     1C 4E 05 C1 |  if_b	add	fp, #28
2f148     00 01 80 CF 
2f14c     A7 08 68 CC |  if_b	wrlong	##131076, fp
2f150     1C 4E 85 C1 |  if_b	sub	fp, #28
2f154     A8 00 90 CD |  if_b	jmp	#LR__4495
2f158     18 4E 05 F1 | 	add	fp, #24
2f15c     A7 2C 02 FB | 	rdlong	local04, fp
2f160     18 4E 85 F1 | 	sub	fp, #24
2f164     68 78 04 FF 
2f168     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2f16c     1C 4E 05 C1 |  if_b	add	fp, #28
2f170     80 01 80 CF 
2f174     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2f178     1C 4E 85 C1 |  if_b	sub	fp, #28
2f17c     80 00 90 CD |  if_b	jmp	#LR__4494
2f180     18 4E 05 F1 | 	add	fp, #24
2f184     A7 2C 02 FB | 	rdlong	local04, fp
2f188     18 4E 85 F1 | 	sub	fp, #24
2f18c     E1 F5 05 FF 
2f190     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2f194     1C 4E 05 C1 |  if_b	add	fp, #28
2f198     00 02 80 CF 
2f19c     A7 10 68 CC |  if_b	wrlong	##262152, fp
2f1a0     1C 4E 85 C1 |  if_b	sub	fp, #28
2f1a4     58 00 90 CD |  if_b	jmp	#LR__4493
2f1a8     18 4E 05 F1 | 	add	fp, #24
2f1ac     A7 2C 02 FB | 	rdlong	local04, fp
2f1b0     18 4E 85 F1 | 	sub	fp, #24
2f1b4     59 73 07 FF 
2f1b8     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2f1bc     1C 4E 05 C1 |  if_b	add	fp, #28
2f1c0     80 02 80 CF 
2f1c4     A7 14 68 CC |  if_b	wrlong	##327690, fp
2f1c8     1C 4E 85 C1 |  if_b	sub	fp, #28
2f1cc     30 00 90 CD |  if_b	jmp	#LR__4492
2f1d0     18 4E 05 F1 | 	add	fp, #24
2f1d4     A7 2C 02 FB | 	rdlong	local04, fp
2f1d8     18 4E 85 F1 | 	sub	fp, #24
2f1dc     D1 F0 08 FF 
2f1e0     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2f1e4     1C 4E 05 C1 |  if_b	add	fp, #28
2f1e8     00 03 80 CF 
2f1ec     A7 18 68 CC |  if_b	wrlong	##393228, fp
2f1f0     1C 4E 85 F3 | 	sumc	fp, #28
2f1f4     80 03 80 3F 
2f1f8     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2f1fc     1C 4E 85 31 |  if_ae	sub	fp, #28
2f200                 | LR__4492
2f200                 | LR__4493
2f200                 | LR__4494
2f200                 | LR__4495
2f200                 | LR__4496
2f200                 | LR__4497
2f200     0C 4E 05 F1 | 	add	fp, #12
2f204     A7 2C C2 FA | 	rdbyte	local04, fp
2f208     21 E4 05 F1 | 	add	objptr, #33
2f20c     F2 2C 42 FC | 	wrbyte	local04, objptr
2f210     A7 26 CA FA | 	rdbyte	local01, fp wz
2f214     00 2C 06 56 |  if_ne	mov	local04, #0
2f218     01 2C 06 A6 |  if_e	mov	local04, #1
2f21c     20 4E 05 F1 | 	add	fp, #32
2f220     A7 2C 42 FC | 	wrbyte	local04, fp
2f224     A7 2C C2 FA | 	rdbyte	local04, fp
2f228     2C 4E 85 F1 | 	sub	fp, #44
2f22c     01 E4 85 F1 | 	sub	objptr, #1
2f230     F2 2C 42 FC | 	wrbyte	local04, objptr
2f234     20 E4 85 F1 | 	sub	objptr, #32
2f238     7C 63 B0 FD | 	call	#_fatfs_cc_deselect_1155
2f23c     34 4E 05 F1 | 	add	fp, #52
2f240     A7 12 02 FB | 	rdlong	arg01, fp
2f244     18 4E 85 F1 | 	sub	fp, #24
2f248     A7 14 02 FB | 	rdlong	arg02, fp
2f24c     09 15 12 FC | 	wxpin	arg02, arg01
2f250     1C 4E 05 F1 | 	add	fp, #28
2f254     A7 12 02 FB | 	rdlong	arg01, fp
2f258     14 4E 85 F1 | 	sub	fp, #20
2f25c     A7 14 02 FB | 	rdlong	arg02, fp
2f260     09 15 02 FC | 	wrpin	arg02, arg01
2f264                 | ' 
2f264                 | ' 		}
2f264                 | ' 	}
2f264                 | ' #line 631 "/home/pik33/flexprop/include/filesys/fatfs/sdmm.cc"
2f264                 | ' 	CardType = ty;
2f264                 | ' 	s = ty ? 0 :  0x01 ;
2f264                 | ' 	Stat = s;
2f264                 | ' 
2f264                 | ' 	deselect();
2f264                 | ' 
2f264                 | ' 
2f264                 | ' 	_wxpin( PIN_CLK, ck_div );
2f264                 | ' 	_wrpin( PIN_DI, spm_tx );
2f264                 | ' #line 644 "/home/pik33/flexprop/include/filesys/fatfs/sdmm.cc"
2f264                 | ' 	return s;
2f264     08 4E 05 F1 | 	add	fp, #8
2f268     A7 FA C1 FA | 	rdbyte	result1, fp
2f26c     2C 4E 85 F1 | 	sub	fp, #44
2f270                 | LR__4498
2f270     A7 F0 03 F6 | 	mov	ptra, fp
2f274     B2 00 A0 FD | 	call	#popregs_
2f278                 | _fatfs_cc_disk_initialize_ret
2f278     2D 00 64 FD | 	ret
2f27c                 | 
2f27c                 | _fatfs_cc_disk_read
2f27c     05 4A 05 F6 | 	mov	COUNT_, #5
2f280     A8 00 A0 FD | 	call	#pushregs_
2f284     0A 27 02 F6 | 	mov	local01, arg02
2f288     0B 29 02 F6 | 	mov	local02, arg03
2f28c     0C 2B 02 F6 | 	mov	local03, arg04
2f290     00 12 0E F2 | 	cmp	arg01, #0 wz
2f294     01 FA 05 56 |  if_ne	mov	result1, #1
2f298                 | ' 
2f298                 | ' 	return Stat;
2f298     20 E4 05 A1 |  if_e	add	objptr, #32
2f29c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2f2a0     20 E4 85 A1 |  if_e	sub	objptr, #32
2f2a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f2a8     01 FA CD F7 | 	test	result1, #1 wz
2f2ac     03 FA 05 56 |  if_ne	mov	result1, #3
2f2b0     7C 00 90 5D |  if_ne	jmp	#LR__4502
2f2b4     21 E4 05 F1 | 	add	objptr, #33
2f2b8     F2 2C C2 FA | 	rdbyte	local04, objptr
2f2bc     21 E4 85 F1 | 	sub	objptr, #33
2f2c0     08 2C CE F7 | 	test	local04, #8 wz
2f2c4     09 28 66 A0 |  if_e	shl	local02, #9
2f2c8     02 2A 16 F2 | 	cmp	local03, #2 wc
2f2cc     12 2C 06 36 |  if_ae	mov	local04, #18
2f2d0     11 2C 06 C6 |  if_b	mov	local04, #17
2f2d4     14 15 02 F6 | 	mov	arg02, local02
2f2d8     16 13 02 F6 | 	mov	arg01, local04
2f2dc     88 65 B0 FD | 	call	#_fatfs_cc_send_cmd_1169
2f2e0     FD 2E 02 F6 | 	mov	local05, result1
2f2e4     07 2E 4E F7 | 	zerox	local05, #7 wz
2f2e8     30 00 90 5D |  if_ne	jmp	#LR__4501
2f2ec                 | ' 		do {
2f2ec                 | LR__4500
2f2ec     13 13 02 F6 | 	mov	arg01, local01
2f2f0     09 14 C6 F9 | 	decod	arg02, #9
2f2f4     C4 63 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1163
2f2f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f2fc     01 00 00 5F 
2f300     00 26 06 51 |  if_ne	add	local01, ##512
2f304     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4500
2f308     16 2D E2 F8 | 	getbyte	local04, local04, #0
2f30c     12 2C 0E F2 | 	cmp	local04, #18 wz
2f310     0C 12 06 A6 |  if_e	mov	arg01, #12
2f314     00 14 06 A6 |  if_e	mov	arg02, #0
2f318     4C 65 B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1169
2f31c                 | LR__4501
2f31c     98 62 B0 FD | 	call	#_fatfs_cc_deselect_1155
2f320                 | ' 	}
2f320                 | ' 	deselect();
2f320                 | ' 
2f320                 | ' 	return count ? RES_ERROR : RES_OK;
2f320     00 2A 0E F2 | 	cmp	local03, #0 wz
2f324     01 2E 06 56 |  if_ne	mov	local05, #1
2f328     00 2E 06 A6 |  if_e	mov	local05, #0
2f32c     17 FB 01 F6 | 	mov	result1, local05
2f330                 | LR__4502
2f330     A7 F0 03 F6 | 	mov	ptra, fp
2f334     B2 00 A0 FD | 	call	#popregs_
2f338                 | _fatfs_cc_disk_read_ret
2f338     2D 00 64 FD | 	ret
2f33c                 | 
2f33c                 | _fatfs_cc_disk_write
2f33c     04 4A 05 F6 | 	mov	COUNT_, #4
2f340     A8 00 A0 FD | 	call	#pushregs_
2f344     0A 27 02 F6 | 	mov	local01, arg02
2f348     0C 29 02 F6 | 	mov	local02, arg04
2f34c     0B 2B 02 F6 | 	mov	local03, arg03
2f350     00 12 0E F2 | 	cmp	arg01, #0 wz
2f354     01 FA 05 56 |  if_ne	mov	result1, #1
2f358                 | ' 
2f358                 | ' 	return Stat;
2f358     20 E4 05 A1 |  if_e	add	objptr, #32
2f35c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2f360     20 E4 85 A1 |  if_e	sub	objptr, #32
2f364     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f368     01 FA CD F7 | 	test	result1, #1 wz
2f36c     03 FA 05 56 |  if_ne	mov	result1, #3
2f370     C4 00 90 5D |  if_ne	jmp	#LR__4514
2f374     21 E4 05 F1 | 	add	objptr, #33
2f378     F2 16 C2 FA | 	rdbyte	arg03, objptr
2f37c     21 E4 85 F1 | 	sub	objptr, #33
2f380     08 16 CE F7 | 	test	arg03, #8 wz
2f384     09 2A 66 A0 |  if_e	shl	local03, #9
2f388     01 28 0E F2 | 	cmp	local02, #1 wz
2f38c     30 00 90 5D |  if_ne	jmp	#LR__4510
2f390     18 12 06 F6 | 	mov	arg01, #24
2f394     15 15 02 F6 | 	mov	arg02, local03
2f398     CC 64 B0 FD | 	call	#_fatfs_cc_send_cmd_1169
2f39c     FD 2C 02 F6 | 	mov	local04, result1
2f3a0     07 2C 4E F7 | 	zerox	local04, #7 wz
2f3a4     7C 00 90 5D |  if_ne	jmp	#LR__4513
2f3a8     13 13 02 F6 | 	mov	arg01, local01
2f3ac     FE 14 06 F6 | 	mov	arg02, #254
2f3b0     E8 63 B0 FD | 	call	#_fatfs_cc_xmit_datablock_1165
2f3b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f3b8     00 28 06 56 |  if_ne	mov	local02, #0
2f3bc     64 00 90 FD | 	jmp	#LR__4513
2f3c0                 | LR__4510
2f3c0     21 E4 05 F1 | 	add	objptr, #33
2f3c4     F2 2C C2 FA | 	rdbyte	local04, objptr
2f3c8     21 E4 85 F1 | 	sub	objptr, #33
2f3cc     06 2C CE F7 | 	test	local04, #6 wz
2f3d0     97 12 06 56 |  if_ne	mov	arg01, #151
2f3d4     14 15 02 56 |  if_ne	mov	arg02, local02
2f3d8     8C 64 B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1169
2f3dc     15 15 02 F6 | 	mov	arg02, local03
2f3e0     19 12 06 F6 | 	mov	arg01, #25
2f3e4     80 64 B0 FD | 	call	#_fatfs_cc_send_cmd_1169
2f3e8     FD 2C 02 F6 | 	mov	local04, result1
2f3ec     07 2C 4E F7 | 	zerox	local04, #7 wz
2f3f0     30 00 90 5D |  if_ne	jmp	#LR__4512
2f3f4                 | ' 			do {
2f3f4                 | LR__4511
2f3f4     13 13 02 F6 | 	mov	arg01, local01
2f3f8     FC 14 06 F6 | 	mov	arg02, #252
2f3fc     9C 63 B0 FD | 	call	#_fatfs_cc_xmit_datablock_1165
2f400     00 FA 0D F2 | 	cmp	result1, #0 wz
2f404     01 00 00 5F 
2f408     00 26 06 51 |  if_ne	add	local01, ##512
2f40c     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4511
2f410     00 12 06 F6 | 	mov	arg01, #0
2f414     FD 14 06 F6 | 	mov	arg02, #253
2f418     80 63 B0 FD | 	call	#_fatfs_cc_xmit_datablock_1165
2f41c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f420     01 28 06 A6 |  if_e	mov	local02, #1
2f424                 | LR__4512
2f424                 | LR__4513
2f424     90 61 B0 FD | 	call	#_fatfs_cc_deselect_1155
2f428                 | ' 				count = 1;
2f428                 | ' 		}
2f428                 | ' 	}
2f428                 | ' 	deselect();
2f428                 | ' 
2f428                 | ' 	return count ? RES_ERROR : RES_OK;
2f428     00 28 0E F2 | 	cmp	local02, #0 wz
2f42c     01 2C 06 56 |  if_ne	mov	local04, #1
2f430     00 2C 06 A6 |  if_e	mov	local04, #0
2f434     16 FB 01 F6 | 	mov	result1, local04
2f438                 | LR__4514
2f438     A7 F0 03 F6 | 	mov	ptra, fp
2f43c     B2 00 A0 FD | 	call	#popregs_
2f440                 | _fatfs_cc_disk_write_ret
2f440     2D 00 64 FD | 	ret
2f444                 | 
2f444                 | _fatfs_cc_disk_ioctl
2f444     01 4A 05 F6 | 	mov	COUNT_, #1
2f448     A8 00 A0 FD | 	call	#pushregs_
2f44c     30 F0 07 F1 | 	add	ptra, #48
2f450     04 4E 05 F1 | 	add	fp, #4
2f454     A7 12 42 FC | 	wrbyte	arg01, fp
2f458     04 4E 05 F1 | 	add	fp, #4
2f45c     A7 14 42 FC | 	wrbyte	arg02, fp
2f460     04 4E 05 F1 | 	add	fp, #4
2f464     A7 16 62 FC | 	wrlong	arg03, fp
2f468     08 4E 85 F1 | 	sub	fp, #8
2f46c     A7 12 CA FA | 	rdbyte	arg01, fp wz
2f470     04 4E 85 F1 | 	sub	fp, #4
2f474     01 FA 05 56 |  if_ne	mov	result1, #1
2f478                 | ' 
2f478                 | ' 	return Stat;
2f478     20 E4 05 A1 |  if_e	add	objptr, #32
2f47c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2f480     20 E4 85 A1 |  if_e	sub	objptr, #32
2f484     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f488     01 FA CD F7 | 	test	result1, #1 wz
2f48c     03 FA 05 56 |  if_ne	mov	result1, #3
2f490     E4 01 90 5D |  if_ne	jmp	#LR__4528
2f494     10 4E 05 F1 | 	add	fp, #16
2f498     A7 02 68 FC | 	wrlong	#1, fp
2f49c                 | ' 
2f49c                 | ' 	res = RES_ERROR;
2f49c                 | ' 	switch (ctrl) {
2f49c     08 4E 85 F1 | 	sub	fp, #8
2f4a0     A7 26 C2 FA | 	rdbyte	local01, fp
2f4a4     08 4E 85 F1 | 	sub	fp, #8
2f4a8     04 26 26 F3 | 	fle	local01, #4
2f4ac     30 26 62 FD | 	jmprel	local01
2f4b0                 | LR__4520
2f4b0     10 00 90 FD | 	jmp	#LR__4521
2f4b4     24 00 90 FD | 	jmp	#LR__4522
2f4b8     A0 01 90 FD | 	jmp	#LR__4526
2f4bc     80 01 90 FD | 	jmp	#LR__4525
2f4c0     98 01 90 FD | 	jmp	#LR__4526
2f4c4                 | LR__4521
2f4c4     6C 61 B0 FD | 	call	#_fatfs_cc_select_1159
2f4c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f4cc     10 4E 05 51 |  if_ne	add	fp, #16
2f4d0     A7 00 68 5C |  if_ne	wrlong	#0, fp
2f4d4     10 4E 85 51 |  if_ne	sub	fp, #16
2f4d8                 | ' 			break;
2f4d8     8C 01 90 FD | 	jmp	#LR__4527
2f4dc                 | LR__4522
2f4dc     09 12 06 F6 | 	mov	arg01, #9
2f4e0     00 14 06 F6 | 	mov	arg02, #0
2f4e4     80 63 B0 FD | 	call	#_fatfs_cc_send_cmd_1169
2f4e8     FD 26 02 F6 | 	mov	local01, result1
2f4ec     07 26 4E F7 | 	zerox	local01, #7 wz
2f4f0     74 01 90 5D |  if_ne	jmp	#LR__4527
2f4f4     18 4E 05 F1 | 	add	fp, #24
2f4f8     A7 12 02 F6 | 	mov	arg01, fp
2f4fc     18 4E 85 F1 | 	sub	fp, #24
2f500     10 14 06 F6 | 	mov	arg02, #16
2f504     B4 61 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1163
2f508     00 FA 0D F2 | 	cmp	result1, #0 wz
2f50c     58 01 90 AD |  if_e	jmp	#LR__4527
2f510     18 4E 05 F1 | 	add	fp, #24
2f514     A7 26 C2 FA | 	rdbyte	local01, fp
2f518     18 4E 85 F1 | 	sub	fp, #24
2f51c     06 26 46 F0 | 	shr	local01, #6
2f520     01 26 0E F2 | 	cmp	local01, #1 wz
2f524     5C 00 90 5D |  if_ne	jmp	#LR__4523
2f528     21 4E 05 F1 | 	add	fp, #33
2f52c     A7 26 C2 FA | 	rdbyte	local01, fp
2f530     01 4E 85 F1 | 	sub	fp, #1
2f534     A7 FA C1 FA | 	rdbyte	result1, fp
2f538     FD FA 31 F9 | 	getword	result1, result1, #0
2f53c     08 FA 65 F0 | 	shl	result1, #8
2f540     FD 26 02 F1 | 	add	local01, result1
2f544     01 4E 85 F1 | 	sub	fp, #1
2f548     A7 FA C1 FA | 	rdbyte	result1, fp
2f54c     3F FA 05 F5 | 	and	result1, #63
2f550     10 FA 65 F0 | 	shl	result1, #16
2f554     FD 26 02 F1 | 	add	local01, result1
2f558     01 26 06 F1 | 	add	local01, #1
2f55c     09 4E 05 F1 | 	add	fp, #9
2f560     A7 26 62 FC | 	wrlong	local01, fp
2f564     1C 4E 85 F1 | 	sub	fp, #28
2f568     A7 26 02 FB | 	rdlong	local01, fp
2f56c     1C 4E 05 F1 | 	add	fp, #28
2f570     A7 FA 01 FB | 	rdlong	result1, fp
2f574     28 4E 85 F1 | 	sub	fp, #40
2f578     0A FA 65 F0 | 	shl	result1, #10
2f57c     13 FB 61 FC | 	wrlong	result1, local01
2f580     AC 00 90 FD | 	jmp	#LR__4524
2f584                 | LR__4523
2f584     1D 4E 05 F1 | 	add	fp, #29
2f588     A7 26 C2 FA | 	rdbyte	local01, fp
2f58c     13 27 42 F8 | 	getnib	local01, local01, #0
2f590     05 4E 05 F1 | 	add	fp, #5
2f594     A7 FA C1 FA | 	rdbyte	result1, fp
2f598     80 FA 05 F5 | 	and	result1, #128
2f59c     07 FA C5 F0 | 	sar	result1, #7
2f5a0     FD 26 02 F1 | 	add	local01, result1
2f5a4     01 4E 85 F1 | 	sub	fp, #1
2f5a8     A7 FA C1 FA | 	rdbyte	result1, fp
2f5ac     03 FA 05 F5 | 	and	result1, #3
2f5b0     01 FA 65 F0 | 	shl	result1, #1
2f5b4     FD 26 02 F1 | 	add	local01, result1
2f5b8     02 26 06 F1 | 	add	local01, #2
2f5bc     0D 4E 85 F1 | 	sub	fp, #13
2f5c0     A7 26 42 FC | 	wrbyte	local01, fp
2f5c4     0C 4E 05 F1 | 	add	fp, #12
2f5c8     A7 26 C2 FA | 	rdbyte	local01, fp
2f5cc     06 26 46 F0 | 	shr	local01, #6
2f5d0     01 4E 85 F1 | 	sub	fp, #1
2f5d4     A7 FA C1 FA | 	rdbyte	result1, fp
2f5d8     FD FA 31 F9 | 	getword	result1, result1, #0
2f5dc     02 FA 65 F0 | 	shl	result1, #2
2f5e0     FD 26 02 F1 | 	add	local01, result1
2f5e4     01 4E 85 F1 | 	sub	fp, #1
2f5e8     A7 FA C1 FA | 	rdbyte	result1, fp
2f5ec     03 FA 05 F5 | 	and	result1, #3
2f5f0     FD FA 31 F9 | 	getword	result1, result1, #0
2f5f4     0A FA 65 F0 | 	shl	result1, #10
2f5f8     FD 26 02 F1 | 	add	local01, result1
2f5fc     01 26 06 F1 | 	add	local01, #1
2f600     0A 4E 05 F1 | 	add	fp, #10
2f604     A7 26 62 FC | 	wrlong	local01, fp
2f608     1C 4E 85 F1 | 	sub	fp, #28
2f60c     A7 26 02 FB | 	rdlong	local01, fp
2f610     1C 4E 05 F1 | 	add	fp, #28
2f614     A7 FA 01 FB | 	rdlong	result1, fp
2f618     14 4E 85 F1 | 	sub	fp, #20
2f61c     A7 16 C2 FA | 	rdbyte	arg03, fp
2f620     14 4E 85 F1 | 	sub	fp, #20
2f624     09 16 86 F1 | 	sub	arg03, #9
2f628     0B FB 61 F0 | 	shl	result1, arg03
2f62c     13 FB 61 FC | 	wrlong	result1, local01
2f630                 | LR__4524
2f630     10 4E 05 F1 | 	add	fp, #16
2f634     A7 00 68 FC | 	wrlong	#0, fp
2f638     10 4E 85 F1 | 	sub	fp, #16
2f63c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2f63c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2f63c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2f63c                 | ' 				}
2f63c                 | ' 				res = RES_OK;
2f63c                 | ' 			}
2f63c                 | ' 			break;
2f63c     28 00 90 FD | 	jmp	#LR__4527
2f640                 | LR__4525
2f640     0C 4E 05 F1 | 	add	fp, #12
2f644     A7 26 02 FB | 	rdlong	local01, fp
2f648     13 01 69 FC | 	wrlong	#128, local01
2f64c     04 4E 05 F1 | 	add	fp, #4
2f650     A7 00 68 FC | 	wrlong	#0, fp
2f654     10 4E 85 F1 | 	sub	fp, #16
2f658                 | ' 			*(DWORD*)buff = 128;
2f658                 | ' 			res = RES_OK;
2f658                 | ' 			break;
2f658     0C 00 90 FD | 	jmp	#LR__4527
2f65c                 | LR__4526
2f65c     10 4E 05 F1 | 	add	fp, #16
2f660     A7 08 68 FC | 	wrlong	#4, fp
2f664     10 4E 85 F1 | 	sub	fp, #16
2f668                 | LR__4527
2f668     4C 5F B0 FD | 	call	#_fatfs_cc_deselect_1155
2f66c                 | ' 			res = RES_PARERR;
2f66c                 | ' 	}
2f66c                 | ' 
2f66c                 | ' 	deselect();
2f66c                 | ' 
2f66c                 | ' 	return res;
2f66c     10 4E 05 F1 | 	add	fp, #16
2f670     A7 FA 01 FB | 	rdlong	result1, fp
2f674     10 4E 85 F1 | 	sub	fp, #16
2f678                 | LR__4528
2f678     A7 F0 03 F6 | 	mov	ptra, fp
2f67c     B2 00 A0 FD | 	call	#popregs_
2f680                 | _fatfs_cc_disk_ioctl_ret
2f680     2D 00 64 FD | 	ret
2f684                 | 
2f684                 | _fatfs_cc_disk_setpins
2f684     00 12 0E F2 | 	cmp	arg01, #0 wz
2f688     01 FA 65 56 |  if_ne	neg	result1, #1
2f68c     28 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2f690     10 E4 05 F1 | 	add	objptr, #16
2f694     F2 14 62 FC | 	wrlong	arg02, objptr
2f698     04 E4 05 F1 | 	add	objptr, #4
2f69c     F2 16 62 FC | 	wrlong	arg03, objptr
2f6a0     04 E4 05 F1 | 	add	objptr, #4
2f6a4     F2 18 62 FC | 	wrlong	arg04, objptr
2f6a8     04 E4 05 F1 | 	add	objptr, #4
2f6ac     F2 1A 62 FC | 	wrlong	arg05, objptr
2f6b0     1C E4 85 F1 | 	sub	objptr, #28
2f6b4     00 FA 05 F6 | 	mov	result1, #0
2f6b8                 | _fatfs_cc_disk_setpins_ret
2f6b8     2D 00 64 FD | 	ret
2f6bc                 | 
2f6bc                 | _fatfs_cc_sync_window
2f6bc     02 4A 05 F6 | 	mov	COUNT_, #2
2f6c0     A8 00 A0 FD | 	call	#pushregs_
2f6c4     09 27 02 F6 | 	mov	local01, arg01
2f6c8     00 28 06 F6 | 	mov	local02, #0
2f6cc     03 26 06 F1 | 	add	local01, #3
2f6d0     13 FB C9 FA | 	rdbyte	result1, local01 wz
2f6d4     03 26 86 F1 | 	sub	local01, #3
2f6d8     A4 00 90 AD |  if_e	jmp	#LR__4532
2f6dc     01 26 06 F1 | 	add	local01, #1
2f6e0     13 13 C2 FA | 	rdbyte	arg01, local01
2f6e4     2F 26 06 F1 | 	add	local01, #47
2f6e8     13 15 02 F6 | 	mov	arg02, local01
2f6ec     04 26 86 F1 | 	sub	local01, #4
2f6f0     13 17 02 FB | 	rdlong	arg03, local01
2f6f4     2C 26 86 F1 | 	sub	local01, #44
2f6f8     01 18 06 F6 | 	mov	arg04, #1
2f6fc     3C FC BF FD | 	call	#_fatfs_cc_disk_write
2f700     00 FA 0D F2 | 	cmp	result1, #0 wz
2f704     74 00 90 5D |  if_ne	jmp	#LR__4530
2f708     03 26 06 F1 | 	add	local01, #3
2f70c     13 01 48 FC | 	wrbyte	#0, local01
2f710     29 26 06 F1 | 	add	local01, #41
2f714     13 FB 01 FB | 	rdlong	result1, local01
2f718     0C 26 86 F1 | 	sub	local01, #12
2f71c     13 19 02 FB | 	rdlong	arg04, local01
2f720     0C FB 81 F1 | 	sub	result1, arg04
2f724     08 26 86 F1 | 	sub	local01, #8
2f728     13 19 02 FB | 	rdlong	arg04, local01
2f72c     18 26 86 F1 | 	sub	local01, #24
2f730     0C FB 11 F2 | 	cmp	result1, arg04 wc
2f734     48 00 90 3D |  if_ae	jmp	#LR__4531
2f738     02 26 06 F1 | 	add	local01, #2
2f73c     13 19 C2 FA | 	rdbyte	arg04, local01
2f740     02 26 86 F1 | 	sub	local01, #2
2f744     02 18 0E F2 | 	cmp	arg04, #2 wz
2f748     34 00 90 5D |  if_ne	jmp	#LR__4531
2f74c     01 26 06 F1 | 	add	local01, #1
2f750     13 13 C2 FA | 	rdbyte	arg01, local01
2f754     2F 26 06 F1 | 	add	local01, #47
2f758     13 15 02 F6 | 	mov	arg02, local01
2f75c     04 26 86 F1 | 	sub	local01, #4
2f760     13 17 02 FB | 	rdlong	arg03, local01
2f764     14 26 86 F1 | 	sub	local01, #20
2f768     13 27 02 FB | 	rdlong	local01, local01
2f76c     13 17 02 F1 | 	add	arg03, local01
2f770     01 18 06 F6 | 	mov	arg04, #1
2f774     C4 FB BF FD | 	call	#_fatfs_cc_disk_write
2f778     04 00 90 FD | 	jmp	#LR__4531
2f77c                 | LR__4530
2f77c     01 28 06 F6 | 	mov	local02, #1
2f780                 | LR__4531
2f780                 | LR__4532
2f780                 | ' 			res = FR_DISK_ERR;
2f780                 | ' 		}
2f780                 | ' 	}
2f780                 | ' 	return res;
2f780     14 FB 01 F6 | 	mov	result1, local02
2f784     A7 F0 03 F6 | 	mov	ptra, fp
2f788     B2 00 A0 FD | 	call	#popregs_
2f78c                 | _fatfs_cc_sync_window_ret
2f78c     2D 00 64 FD | 	ret
2f790                 | 
2f790                 | _fatfs_cc_move_window
2f790     03 4A 05 F6 | 	mov	COUNT_, #3
2f794     A8 00 A0 FD | 	call	#pushregs_
2f798     09 27 02 F6 | 	mov	local01, arg01
2f79c     0A 29 02 F6 | 	mov	local02, arg02
2f7a0     00 2A 06 F6 | 	mov	local03, #0
2f7a4     2C 26 06 F1 | 	add	local01, #44
2f7a8     13 19 02 FB | 	rdlong	arg04, local01
2f7ac     2C 26 86 F1 | 	sub	local01, #44
2f7b0     0C 29 0A F2 | 	cmp	local02, arg04 wz
2f7b4     40 00 90 AD |  if_e	jmp	#LR__4541
2f7b8     13 13 02 F6 | 	mov	arg01, local01
2f7bc     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2f7c0     FD 2A 0A F6 | 	mov	local03, result1 wz
2f7c4     30 00 90 5D |  if_ne	jmp	#LR__4540
2f7c8     01 26 06 F1 | 	add	local01, #1
2f7cc     13 13 C2 FA | 	rdbyte	arg01, local01
2f7d0     2F 26 06 F1 | 	add	local01, #47
2f7d4     13 15 02 F6 | 	mov	arg02, local01
2f7d8     14 17 02 F6 | 	mov	arg03, local02
2f7dc     01 18 06 F6 | 	mov	arg04, #1
2f7e0     98 FA BF FD | 	call	#_fatfs_cc_disk_read
2f7e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f7e8     01 28 66 56 |  if_ne	neg	local02, #1
2f7ec     01 2A 06 56 |  if_ne	mov	local03, #1
2f7f0     04 26 86 F1 | 	sub	local01, #4
2f7f4     13 29 62 FC | 	wrlong	local02, local01
2f7f8                 | LR__4540
2f7f8                 | LR__4541
2f7f8                 | ' 				sect = (LBA_t)0 - 1;
2f7f8                 | ' 				res = FR_DISK_ERR;
2f7f8                 | ' 			}
2f7f8                 | ' 			fs->winsect = sect;
2f7f8                 | ' 		}
2f7f8                 | ' 	}
2f7f8                 | ' 	return res;
2f7f8     15 FB 01 F6 | 	mov	result1, local03
2f7fc     A7 F0 03 F6 | 	mov	ptra, fp
2f800     B2 00 A0 FD | 	call	#popregs_
2f804                 | _fatfs_cc_move_window_ret
2f804     2D 00 64 FD | 	ret
2f808                 | 
2f808                 | _fatfs_cc_sync_fs
2f808     02 4A 05 F6 | 	mov	COUNT_, #2
2f80c     A8 00 A0 FD | 	call	#pushregs_
2f810     09 27 02 F6 | 	mov	local01, arg01
2f814     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2f818     FD 28 0A F6 | 	mov	local02, result1 wz
2f81c     D8 00 90 5D |  if_ne	jmp	#LR__4551
2f820     13 19 C2 FA | 	rdbyte	arg04, local01
2f824     03 18 0E F2 | 	cmp	arg04, #3 wz
2f828     04 26 06 A1 |  if_e	add	local01, #4
2f82c     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2f830     04 26 86 A1 |  if_e	sub	local01, #4
2f834     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2f838     A0 00 90 5D |  if_ne	jmp	#LR__4550
2f83c     30 26 06 F1 | 	add	local01, #48
2f840     13 13 02 F6 | 	mov	arg01, local01
2f844     00 14 06 F6 | 	mov	arg02, #0
2f848     09 16 C6 F9 | 	decod	arg03, #9
2f84c     98 00 A0 FD | 	call	#\builtin_bytefill_
2f850     13 13 02 F6 | 	mov	arg01, local01
2f854     FE 13 06 F1 | 	add	arg01, #510
2f858     55 00 80 FF 
2f85c     09 AB 58 FC | 	wrword	##43605, arg01
2f860     A9 B0 A0 FF 
2f864     13 A5 68 FC | 	wrlong	##1096897106, local01
2f868     13 13 02 F6 | 	mov	arg01, local01
2f86c     E4 13 06 F1 | 	add	arg01, #484
2f870     B9 A0 B0 FF 
2f874     09 E5 68 FC | 	wrlong	##1631679090, arg01
2f878     13 13 02 F6 | 	mov	arg01, local01
2f87c     E8 13 06 F1 | 	add	arg01, #488
2f880     20 26 86 F1 | 	sub	local01, #32
2f884     13 15 02 FB | 	rdlong	arg02, local01
2f888     09 15 62 FC | 	wrlong	arg02, arg01
2f88c     20 26 06 F1 | 	add	local01, #32
2f890     13 13 02 F6 | 	mov	arg01, local01
2f894     EC 13 06 F1 | 	add	arg01, #492
2f898     24 26 86 F1 | 	sub	local01, #36
2f89c     13 15 02 FB | 	rdlong	arg02, local01
2f8a0     09 15 62 FC | 	wrlong	arg02, arg01
2f8a4     10 26 06 F1 | 	add	local01, #16
2f8a8     13 17 02 FB | 	rdlong	arg03, local01
2f8ac     01 16 06 F1 | 	add	arg03, #1
2f8b0     10 26 06 F1 | 	add	local01, #16
2f8b4     13 17 62 FC | 	wrlong	arg03, local01
2f8b8     2B 26 86 F1 | 	sub	local01, #43
2f8bc     13 13 C2 FA | 	rdbyte	arg01, local01
2f8c0     2F 26 06 F1 | 	add	local01, #47
2f8c4     13 15 02 F6 | 	mov	arg02, local01
2f8c8     01 18 06 F6 | 	mov	arg04, #1
2f8cc     6C FA BF FD | 	call	#_fatfs_cc_disk_write
2f8d0     2C 26 86 F1 | 	sub	local01, #44
2f8d4     13 01 48 FC | 	wrbyte	#0, local01
2f8d8     04 26 86 F1 | 	sub	local01, #4
2f8dc                 | LR__4550
2f8dc     01 26 06 F1 | 	add	local01, #1
2f8e0     13 13 C2 FA | 	rdbyte	arg01, local01
2f8e4     00 14 06 F6 | 	mov	arg02, #0
2f8e8     00 16 06 F6 | 	mov	arg03, #0
2f8ec     54 FB BF FD | 	call	#_fatfs_cc_disk_ioctl
2f8f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f8f4     01 28 06 56 |  if_ne	mov	local02, #1
2f8f8                 | LR__4551
2f8f8                 | ' 	}
2f8f8                 | ' 
2f8f8                 | ' 	return res;
2f8f8     14 FB 01 F6 | 	mov	result1, local02
2f8fc     A7 F0 03 F6 | 	mov	ptra, fp
2f900     B2 00 A0 FD | 	call	#popregs_
2f904                 | _fatfs_cc_sync_fs_ret
2f904     2D 00 64 FD | 	ret
2f908                 | 
2f908                 | _fatfs_cc_clst2sect
2f908     02 14 86 F1 | 	sub	arg02, #2
2f90c     14 12 06 F1 | 	add	arg01, #20
2f910     09 01 02 FB | 	rdlong	_var01, arg01
2f914     14 12 86 F1 | 	sub	arg01, #20
2f918     02 00 86 F1 | 	sub	_var01, #2
2f91c     00 15 12 F2 | 	cmp	arg02, _var01 wc
2f920     00 FA 05 36 |  if_ae	mov	result1, #0
2f924     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2f928     0A 12 06 F1 | 	add	arg01, #10
2f92c     09 01 E2 FA | 	rdword	_var01, arg01
2f930     0A 01 02 FD | 	qmul	_var01, arg02
2f934                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2f934     1E 12 06 F1 | 	add	arg01, #30
2f938     09 FB 01 FB | 	rdlong	result1, arg01
2f93c     18 00 62 FD | 	getqx	_var01
2f940     00 FB 01 F1 | 	add	result1, _var01
2f944                 | _fatfs_cc_clst2sect_ret
2f944     2D 00 64 FD | 	ret
2f948                 | 
2f948                 | _fatfs_cc_get_fat
2f948     07 4A 05 F6 | 	mov	COUNT_, #7
2f94c     A8 00 A0 FD | 	call	#pushregs_
2f950     0A 27 02 F6 | 	mov	local01, arg02
2f954     09 29 02 FB | 	rdlong	local02, arg01
2f958     02 26 16 F2 | 	cmp	local01, #2 wc
2f95c     14 00 90 CD |  if_b	jmp	#LR__4560
2f960     14 28 06 F1 | 	add	local02, #20
2f964     14 2B 02 FB | 	rdlong	local03, local02
2f968     14 28 86 F1 | 	sub	local02, #20
2f96c     15 27 12 F2 | 	cmp	local01, local03 wc
2f970     08 00 90 CD |  if_b	jmp	#LR__4561
2f974                 | LR__4560
2f974     01 2C 06 F6 | 	mov	local04, #1
2f978     60 01 90 FD | 	jmp	#LR__4568
2f97c                 | LR__4561
2f97c     01 2C 66 F6 | 	neg	local04, #1
2f980                 | ' 		val = 0xFFFFFFFF;
2f980                 | ' 
2f980                 | ' 		switch (fs->fs_type) {
2f980     14 2F C2 FA | 	rdbyte	local05, local02
2f984     01 2E 86 F1 | 	sub	local05, #1
2f988     03 2E 26 F3 | 	fle	local05, #3
2f98c     30 2E 62 FD | 	jmprel	local05
2f990                 | LR__4562
2f990     0C 00 90 FD | 	jmp	#LR__4563
2f994     B8 00 90 FD | 	jmp	#LR__4564
2f998     F8 00 90 FD | 	jmp	#LR__4565
2f99c     38 01 90 FD | 	jmp	#LR__4566
2f9a0                 | LR__4563
2f9a0     13 2F 02 F6 | 	mov	local05, local01
2f9a4     13 13 02 F6 | 	mov	arg01, local01
2f9a8     01 12 46 F0 | 	shr	arg01, #1
2f9ac     09 2F 02 F1 | 	add	local05, arg01
2f9b0     14 13 02 F6 | 	mov	arg01, local02
2f9b4     17 31 02 F6 | 	mov	local06, local05
2f9b8     09 30 46 F0 | 	shr	local06, #9
2f9bc     20 28 06 F1 | 	add	local02, #32
2f9c0     14 15 02 FB | 	rdlong	arg02, local02
2f9c4     20 28 86 F1 | 	sub	local02, #32
2f9c8     18 15 02 F1 | 	add	arg02, local06
2f9cc     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2f9d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f9d4     04 01 90 5D |  if_ne	jmp	#LR__4567
2f9d8     17 31 02 F6 | 	mov	local06, local05
2f9dc     FF 31 06 F5 | 	and	local06, #511
2f9e0     30 28 06 F1 | 	add	local02, #48
2f9e4     14 31 02 F1 | 	add	local06, local02
2f9e8     18 33 C2 FA | 	rdbyte	local07, local06
2f9ec     30 28 86 F1 | 	sub	local02, #48
2f9f0     14 13 02 F6 | 	mov	arg01, local02
2f9f4     01 2E 06 F1 | 	add	local05, #1
2f9f8     17 31 02 F6 | 	mov	local06, local05
2f9fc     09 30 46 F0 | 	shr	local06, #9
2fa00     20 28 06 F1 | 	add	local02, #32
2fa04     14 15 02 FB | 	rdlong	arg02, local02
2fa08     20 28 86 F1 | 	sub	local02, #32
2fa0c     18 15 02 F1 | 	add	arg02, local06
2fa10     7C FD BF FD | 	call	#_fatfs_cc_move_window
2fa14     00 FA 0D F2 | 	cmp	result1, #0 wz
2fa18     C0 00 90 5D |  if_ne	jmp	#LR__4567
2fa1c     FF 2F 06 F5 | 	and	local05, #511
2fa20     30 28 06 F1 | 	add	local02, #48
2fa24     14 2F 02 F1 | 	add	local05, local02
2fa28     17 31 C2 FA | 	rdbyte	local06, local05
2fa2c     08 30 66 F0 | 	shl	local06, #8
2fa30     18 33 42 F5 | 	or	local07, local06
2fa34     01 26 CE F7 | 	test	local01, #1 wz
2fa38     04 32 46 50 |  if_ne	shr	local07, #4
2fa3c     19 2B 02 56 |  if_ne	mov	local03, local07
2fa40     0B 32 46 A7 |  if_e	zerox	local07, #11
2fa44     19 2B 02 A6 |  if_e	mov	local03, local07
2fa48     15 2D 02 F6 | 	mov	local04, local03
2fa4c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2fa4c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2fa4c                 | ' 			break;
2fa4c     8C 00 90 FD | 	jmp	#LR__4567
2fa50                 | LR__4564
2fa50     14 13 02 F6 | 	mov	arg01, local02
2fa54     13 31 02 F6 | 	mov	local06, local01
2fa58     08 30 46 F0 | 	shr	local06, #8
2fa5c     20 28 06 F1 | 	add	local02, #32
2fa60     14 15 02 FB | 	rdlong	arg02, local02
2fa64     20 28 86 F1 | 	sub	local02, #32
2fa68     18 15 02 F1 | 	add	arg02, local06
2fa6c     20 FD BF FD | 	call	#_fatfs_cc_move_window
2fa70     00 FA 0D F2 | 	cmp	result1, #0 wz
2fa74     64 00 90 5D |  if_ne	jmp	#LR__4567
2fa78     30 28 06 F1 | 	add	local02, #48
2fa7c     01 26 66 F0 | 	shl	local01, #1
2fa80     FF 27 06 F5 | 	and	local01, #511
2fa84     13 29 02 F1 | 	add	local02, local01
2fa88                 | ' {
2fa88                 | ' 
2fa88                 | ' 	return *((WORD*)ptr);
2fa88     14 FB E1 FA | 	rdword	result1, local02
2fa8c     FD 2C 32 F9 | 	getword	local04, result1, #0
2fa90                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2fa90                 | ' 			break;
2fa90     48 00 90 FD | 	jmp	#LR__4567
2fa94                 | LR__4565
2fa94     14 13 02 F6 | 	mov	arg01, local02
2fa98     13 31 02 F6 | 	mov	local06, local01
2fa9c     07 30 46 F0 | 	shr	local06, #7
2faa0     20 28 06 F1 | 	add	local02, #32
2faa4     14 15 02 FB | 	rdlong	arg02, local02
2faa8     20 28 86 F1 | 	sub	local02, #32
2faac     18 15 02 F1 | 	add	arg02, local06
2fab0     DC FC BF FD | 	call	#_fatfs_cc_move_window
2fab4     00 FA 0D F2 | 	cmp	result1, #0 wz
2fab8     20 00 90 5D |  if_ne	jmp	#LR__4567
2fabc     30 28 06 F1 | 	add	local02, #48
2fac0     02 26 66 F0 | 	shl	local01, #2
2fac4     FF 27 06 F5 | 	and	local01, #511
2fac8     13 29 02 F1 | 	add	local02, local01
2facc                 | ' {
2facc                 | ' 
2facc                 | ' 	return *((DWORD*)ptr);
2facc     14 2D 02 FB | 	rdlong	local04, local02
2fad0     7C 2C 06 F4 | 	bitl	local04, #124
2fad4                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2fad4                 | ' 			break;
2fad4     04 00 90 FD | 	jmp	#LR__4567
2fad8                 | LR__4566
2fad8     01 2C 06 F6 | 	mov	local04, #1
2fadc                 | LR__4567
2fadc                 | LR__4568
2fadc                 | ' 			val = 1;
2fadc                 | ' 		}
2fadc                 | ' 	}
2fadc                 | ' 
2fadc                 | ' 	return val;
2fadc     16 FB 01 F6 | 	mov	result1, local04
2fae0     A7 F0 03 F6 | 	mov	ptra, fp
2fae4     B2 00 A0 FD | 	call	#popregs_
2fae8                 | _fatfs_cc_get_fat_ret
2fae8     2D 00 64 FD | 	ret
2faec                 | 
2faec                 | _fatfs_cc_put_fat
2faec     08 4A 05 F6 | 	mov	COUNT_, #8
2faf0     A8 00 A0 FD | 	call	#pushregs_
2faf4     09 27 02 F6 | 	mov	local01, arg01
2faf8     0A 29 02 F6 | 	mov	local02, arg02
2fafc     0B 2B 02 F6 | 	mov	local03, arg03
2fb00     02 2C 06 F6 | 	mov	local04, #2
2fb04     02 28 16 F2 | 	cmp	local02, #2 wc
2fb08     E0 01 90 CD |  if_b	jmp	#LR__4577
2fb0c     14 26 06 F1 | 	add	local01, #20
2fb10     13 2F 02 FB | 	rdlong	local05, local01
2fb14     14 26 86 F1 | 	sub	local01, #20
2fb18     17 29 12 F2 | 	cmp	local02, local05 wc
2fb1c     CC 01 90 3D |  if_ae	jmp	#LR__4577
2fb20                 | ' 		switch (fs->fs_type) {
2fb20     13 31 C2 FA | 	rdbyte	local06, local01
2fb24     01 30 86 F1 | 	sub	local06, #1
2fb28     03 30 26 F3 | 	fle	local06, #3
2fb2c     30 30 62 FD | 	jmprel	local06
2fb30                 | LR__4570
2fb30     0C 00 90 FD | 	jmp	#LR__4571
2fb34     F8 00 90 FD | 	jmp	#LR__4574
2fb38     40 01 90 FD | 	jmp	#LR__4575
2fb3c     AC 01 90 FD | 	jmp	#LR__4576
2fb40                 | LR__4571
2fb40     14 33 02 F6 | 	mov	local07, local02
2fb44     14 2F 02 F6 | 	mov	local05, local02
2fb48     01 2E 46 F0 | 	shr	local05, #1
2fb4c     17 33 02 F1 | 	add	local07, local05
2fb50     13 13 02 F6 | 	mov	arg01, local01
2fb54     19 31 02 F6 | 	mov	local06, local07
2fb58     09 30 46 F0 | 	shr	local06, #9
2fb5c     20 26 06 F1 | 	add	local01, #32
2fb60     13 15 02 FB | 	rdlong	arg02, local01
2fb64     20 26 86 F1 | 	sub	local01, #32
2fb68     18 15 02 F1 | 	add	arg02, local06
2fb6c     20 FC BF FD | 	call	#_fatfs_cc_move_window
2fb70     FD 2C 0A F6 | 	mov	local04, result1 wz
2fb74     74 01 90 5D |  if_ne	jmp	#LR__4576
2fb78     30 26 06 F1 | 	add	local01, #48
2fb7c     13 35 02 F6 | 	mov	local08, local01
2fb80     19 2F 02 F6 | 	mov	local05, local07
2fb84     FF 2F 06 F5 | 	and	local05, #511
2fb88     17 35 02 F1 | 	add	local08, local05
2fb8c     01 28 CE F7 | 	test	local02, #1 wz
2fb90     30 26 86 F1 | 	sub	local01, #48
2fb94     01 32 06 F1 | 	add	local07, #1
2fb98     18 00 90 AD |  if_e	jmp	#LR__4572
2fb9c     1A 2F C2 FA | 	rdbyte	local05, local08
2fba0     17 2F 42 F8 | 	getnib	local05, local05, #0
2fba4     15 31 E2 F8 | 	getbyte	local06, local03, #0
2fba8     04 30 66 F0 | 	shl	local06, #4
2fbac     18 2F 42 F5 | 	or	local05, local06
2fbb0     04 00 90 FD | 	jmp	#LR__4573
2fbb4                 | LR__4572
2fbb4     15 2F 02 F6 | 	mov	local05, local03
2fbb8                 | LR__4573
2fbb8     1A 2F 42 FC | 	wrbyte	local05, local08
2fbbc     03 26 06 F1 | 	add	local01, #3
2fbc0     13 03 48 FC | 	wrbyte	#1, local01
2fbc4     03 26 86 F1 | 	sub	local01, #3
2fbc8     13 13 02 F6 | 	mov	arg01, local01
2fbcc     19 35 02 F6 | 	mov	local08, local07
2fbd0     09 34 46 F0 | 	shr	local08, #9
2fbd4     20 26 06 F1 | 	add	local01, #32
2fbd8     13 15 02 FB | 	rdlong	arg02, local01
2fbdc     20 26 86 F1 | 	sub	local01, #32
2fbe0     1A 15 02 F1 | 	add	arg02, local08
2fbe4     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2fbe8     FD 2C 0A F6 | 	mov	local04, result1 wz
2fbec     FC 00 90 5D |  if_ne	jmp	#LR__4576
2fbf0     30 26 06 F1 | 	add	local01, #48
2fbf4     13 35 02 F6 | 	mov	local08, local01
2fbf8     FF 33 06 F5 | 	and	local07, #511
2fbfc     19 35 02 F1 | 	add	local08, local07
2fc00     01 28 CE F7 | 	test	local02, #1 wz
2fc04     04 2A 46 50 |  if_ne	shr	local03, #4
2fc08     15 2F 02 56 |  if_ne	mov	local05, local03
2fc0c     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2fc10     F0 2E 06 A5 |  if_e	and	local05, #240
2fc14     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2fc18     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2fc1c     15 2F 42 A5 |  if_e	or	local05, local03
2fc20     1A 2F 42 FC | 	wrbyte	local05, local08
2fc24     2D 26 86 F1 | 	sub	local01, #45
2fc28     13 03 48 FC | 	wrbyte	#1, local01
2fc2c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2fc2c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2fc2c                 | ' 			fs->wflag = 1;
2fc2c                 | ' 			break;
2fc2c     BC 00 90 FD | 	jmp	#LR__4576
2fc30                 | LR__4574
2fc30     13 13 02 F6 | 	mov	arg01, local01
2fc34     14 35 02 F6 | 	mov	local08, local02
2fc38     08 34 46 F0 | 	shr	local08, #8
2fc3c     20 26 06 F1 | 	add	local01, #32
2fc40     13 15 02 FB | 	rdlong	arg02, local01
2fc44     20 26 86 F1 | 	sub	local01, #32
2fc48     1A 15 02 F1 | 	add	arg02, local08
2fc4c     40 FB BF FD | 	call	#_fatfs_cc_move_window
2fc50     FD 2C 0A F6 | 	mov	local04, result1 wz
2fc54     94 00 90 5D |  if_ne	jmp	#LR__4576
2fc58     30 26 06 F1 | 	add	local01, #48
2fc5c     13 13 02 F6 | 	mov	arg01, local01
2fc60     01 28 66 F0 | 	shl	local02, #1
2fc64     FF 29 06 F5 | 	and	local02, #511
2fc68     14 13 02 F1 | 	add	arg01, local02
2fc6c     09 2B 52 FC | 	wrword	local03, arg01
2fc70     2D 26 86 F1 | 	sub	local01, #45
2fc74     13 03 48 FC | 	wrbyte	#1, local01
2fc78                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2fc78                 | ' 			fs->wflag = 1;
2fc78                 | ' 			break;
2fc78     70 00 90 FD | 	jmp	#LR__4576
2fc7c                 | LR__4575
2fc7c     13 13 02 F6 | 	mov	arg01, local01
2fc80     14 35 02 F6 | 	mov	local08, local02
2fc84     07 34 46 F0 | 	shr	local08, #7
2fc88     20 26 06 F1 | 	add	local01, #32
2fc8c     13 15 02 FB | 	rdlong	arg02, local01
2fc90     20 26 86 F1 | 	sub	local01, #32
2fc94     1A 15 02 F1 | 	add	arg02, local08
2fc98     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2fc9c     FD 2C 0A F6 | 	mov	local04, result1 wz
2fca0     48 00 90 5D |  if_ne	jmp	#LR__4576
2fca4     7C 2A 06 F4 | 	bitl	local03, #124
2fca8     30 26 06 F1 | 	add	local01, #48
2fcac     14 35 02 F6 | 	mov	local08, local02
2fcb0     02 34 66 F0 | 	shl	local08, #2
2fcb4     FF 35 06 F5 | 	and	local08, #511
2fcb8     13 13 02 F6 | 	mov	arg01, local01
2fcbc     1A 13 02 F1 | 	add	arg01, local08
2fcc0                 | ' {
2fcc0                 | ' 
2fcc0                 | ' 	return *((DWORD*)ptr);
2fcc0     09 35 02 FB | 	rdlong	local08, arg01
2fcc4     00 00 78 FF 
2fcc8     00 34 06 F5 | 	and	local08, ##-268435456
2fccc     1A 2B 42 F5 | 	or	local03, local08
2fcd0     13 13 02 F6 | 	mov	arg01, local01
2fcd4     02 28 66 F0 | 	shl	local02, #2
2fcd8     FF 29 06 F5 | 	and	local02, #511
2fcdc     14 13 02 F1 | 	add	arg01, local02
2fce0     09 2B 62 FC | 	wrlong	local03, arg01
2fce4     2D 26 86 F1 | 	sub	local01, #45
2fce8     13 03 48 FC | 	wrbyte	#1, local01
2fcec                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2fcec                 | ' 			}
2fcec                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2fcec                 | ' 			fs->wflag = 1;
2fcec                 | ' 			break;
2fcec                 | LR__4576
2fcec                 | LR__4577
2fcec                 | ' 		}
2fcec                 | ' 	}
2fcec                 | ' 	return res;
2fcec     16 FB 01 F6 | 	mov	result1, local04
2fcf0     A7 F0 03 F6 | 	mov	ptra, fp
2fcf4     B2 00 A0 FD | 	call	#popregs_
2fcf8                 | _fatfs_cc_put_fat_ret
2fcf8     2D 00 64 FD | 	ret
2fcfc                 | 
2fcfc                 | _fatfs_cc_remove_chain
2fcfc     05 4A 05 F6 | 	mov	COUNT_, #5
2fd00     A8 00 A0 FD | 	call	#pushregs_
2fd04     09 27 02 F6 | 	mov	local01, arg01
2fd08     0A 29 02 F6 | 	mov	local02, arg02
2fd0c     0B 2B 02 F6 | 	mov	local03, arg03
2fd10     13 2D 02 FB | 	rdlong	local04, local01
2fd14     02 28 16 F2 | 	cmp	local02, #2 wc
2fd18     14 00 90 CD |  if_b	jmp	#LR__4580
2fd1c     14 2C 06 F1 | 	add	local04, #20
2fd20     16 FB 01 FB | 	rdlong	result1, local04
2fd24     14 2C 86 F1 | 	sub	local04, #20
2fd28     FD 28 12 F2 | 	cmp	local02, result1 wc
2fd2c     08 00 90 CD |  if_b	jmp	#LR__4581
2fd30                 | LR__4580
2fd30     02 FA 05 F6 | 	mov	result1, #2
2fd34     CC 00 90 FD | 	jmp	#LR__4586
2fd38                 | LR__4581
2fd38     00 2A 0E F2 | 	cmp	local03, #0 wz
2fd3c     18 00 90 AD |  if_e	jmp	#LR__4582
2fd40     15 15 02 F6 | 	mov	arg02, local03
2fd44     16 13 02 F6 | 	mov	arg01, local04
2fd48     01 16 66 F6 | 	neg	arg03, #1
2fd4c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2fd50     00 FA 0D F2 | 	cmp	result1, #0 wz
2fd54     AC 00 90 5D |  if_ne	jmp	#LR__4586
2fd58                 | LR__4582
2fd58                 | ' 	}
2fd58                 | ' 
2fd58                 | ' 
2fd58                 | ' 	do {
2fd58                 | LR__4583
2fd58     14 15 02 F6 | 	mov	arg02, local02
2fd5c     13 13 02 F6 | 	mov	arg01, local01
2fd60     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2fd64     FD 2E 0A F6 | 	mov	local05, result1 wz
2fd68     94 00 90 AD |  if_e	jmp	#LR__4585
2fd6c     01 2E 0E F2 | 	cmp	local05, #1 wz
2fd70     02 FA 05 A6 |  if_e	mov	result1, #2
2fd74     8C 00 90 AD |  if_e	jmp	#LR__4586
2fd78     FF FF 7F FF 
2fd7c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2fd80     01 FA 05 A6 |  if_e	mov	result1, #1
2fd84     7C 00 90 AD |  if_e	jmp	#LR__4586
2fd88     14 15 02 F6 | 	mov	arg02, local02
2fd8c     16 13 02 F6 | 	mov	arg01, local04
2fd90     00 16 06 F6 | 	mov	arg03, #0
2fd94     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2fd98     FD 2A 0A F6 | 	mov	local03, result1 wz
2fd9c     15 FB 01 56 |  if_ne	mov	result1, local03
2fda0     60 00 90 5D |  if_ne	jmp	#LR__4586
2fda4     14 2C 06 F1 | 	add	local04, #20
2fda8     16 2B 02 FB | 	rdlong	local03, local04
2fdac     02 2A 86 F1 | 	sub	local03, #2
2fdb0     04 2C 86 F1 | 	sub	local04, #4
2fdb4     16 29 02 FB | 	rdlong	local02, local04
2fdb8     10 2C 86 F1 | 	sub	local04, #16
2fdbc     15 29 12 F2 | 	cmp	local02, local03 wc
2fdc0     24 00 90 3D |  if_ae	jmp	#LR__4584
2fdc4     10 2C 06 F1 | 	add	local04, #16
2fdc8     16 2B 02 FB | 	rdlong	local03, local04
2fdcc     01 2A 06 F1 | 	add	local03, #1
2fdd0     16 2B 62 FC | 	wrlong	local03, local04
2fdd4     0C 2C 86 F1 | 	sub	local04, #12
2fdd8     16 2B C2 FA | 	rdbyte	local03, local04
2fddc     01 2A 46 F5 | 	or	local03, #1
2fde0     16 2B 42 FC | 	wrbyte	local03, local04
2fde4     04 2C 86 F1 | 	sub	local04, #4
2fde8                 | LR__4584
2fde8     17 29 02 F6 | 	mov	local02, local05
2fdec     14 2C 06 F1 | 	add	local04, #20
2fdf0     16 2F 02 FB | 	rdlong	local05, local04
2fdf4     14 2C 86 F1 | 	sub	local04, #20
2fdf8     17 29 12 F2 | 	cmp	local02, local05 wc
2fdfc     58 FF 9F CD |  if_b	jmp	#LR__4583
2fe00                 | LR__4585
2fe00                 | ' #line 1500 "ff.c"
2fe00                 | ' 	return FR_OK;
2fe00     00 FA 05 F6 | 	mov	result1, #0
2fe04                 | LR__4586
2fe04     A7 F0 03 F6 | 	mov	ptra, fp
2fe08     B2 00 A0 FD | 	call	#popregs_
2fe0c                 | _fatfs_cc_remove_chain_ret
2fe0c     2D 00 64 FD | 	ret
2fe10                 | 
2fe10                 | _fatfs_cc_create_chain
2fe10     09 4A 05 F6 | 	mov	COUNT_, #9
2fe14     A8 00 A0 FD | 	call	#pushregs_
2fe18     09 27 02 F6 | 	mov	local01, arg01
2fe1c     0A 29 0A F6 | 	mov	local02, arg02 wz
2fe20     13 2B 02 FB | 	rdlong	local03, local01
2fe24     28 00 90 5D |  if_ne	jmp	#LR__4590
2fe28     0C 2A 06 F1 | 	add	local03, #12
2fe2c     15 2D 0A FB | 	rdlong	local04, local03 wz
2fe30     0C 2A 86 F1 | 	sub	local03, #12
2fe34     14 2A 06 51 |  if_ne	add	local03, #20
2fe38     15 2F 02 5B |  if_ne	rdlong	local05, local03
2fe3c     14 2A 86 51 |  if_ne	sub	local03, #20
2fe40     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2fe44     50 00 90 4D |  if_c_and_nz	jmp	#LR__4591
2fe48     01 2C 06 F6 | 	mov	local04, #1
2fe4c     48 00 90 FD | 	jmp	#LR__4591
2fe50                 | LR__4590
2fe50     14 15 02 F6 | 	mov	arg02, local02
2fe54     13 13 02 F6 | 	mov	arg01, local01
2fe58     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2fe5c     FD 2C 02 F6 | 	mov	local04, result1
2fe60     02 2C 16 F2 | 	cmp	local04, #2 wc
2fe64     01 FA 05 C6 |  if_b	mov	result1, #1
2fe68     BC 01 90 CD |  if_b	jmp	#LR__4601
2fe6c     FF FF 7F FF 
2fe70     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2fe74     16 FB 01 A6 |  if_e	mov	result1, local04
2fe78     AC 01 90 AD |  if_e	jmp	#LR__4601
2fe7c     14 2A 06 F1 | 	add	local03, #20
2fe80     15 2F 02 FB | 	rdlong	local05, local03
2fe84     14 2A 86 F1 | 	sub	local03, #20
2fe88     17 2D 12 F2 | 	cmp	local04, local05 wc
2fe8c     16 FB 01 C6 |  if_b	mov	result1, local04
2fe90     94 01 90 CD |  if_b	jmp	#LR__4601
2fe94     14 2D 02 F6 | 	mov	local04, local02
2fe98                 | LR__4591
2fe98     10 2A 06 F1 | 	add	local03, #16
2fe9c     15 2F 0A FB | 	rdlong	local05, local03 wz
2fea0     10 2A 86 F1 | 	sub	local03, #16
2fea4     00 FA 05 A6 |  if_e	mov	result1, #0
2fea8     7C 01 90 AD |  if_e	jmp	#LR__4601
2feac     00 30 06 F6 | 	mov	local06, #0
2feb0     14 2D 0A F2 | 	cmp	local04, local02 wz
2feb4     74 00 90 5D |  if_ne	jmp	#LR__4594
2feb8     16 31 02 F6 | 	mov	local06, local04
2febc     01 30 06 F1 | 	add	local06, #1
2fec0     14 2A 06 F1 | 	add	local03, #20
2fec4     15 2F 02 FB | 	rdlong	local05, local03
2fec8     14 2A 86 F1 | 	sub	local03, #20
2fecc     17 31 12 F2 | 	cmp	local06, local05 wc
2fed0     02 30 06 36 |  if_ae	mov	local06, #2
2fed4     18 15 02 F6 | 	mov	arg02, local06
2fed8     13 13 02 F6 | 	mov	arg01, local01
2fedc     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2fee0     FD 2E 02 F6 | 	mov	local05, result1
2fee4     01 2E 0E F2 | 	cmp	local05, #1 wz
2fee8     FF FF 7F 5F 
2feec     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2fef0     17 FB 01 A6 |  if_e	mov	result1, local05
2fef4     30 01 90 AD |  if_e	jmp	#LR__4601
2fef8     00 2E 0E F2 | 	cmp	local05, #0 wz
2fefc     2C 00 90 AD |  if_e	jmp	#LR__4593
2ff00     0C 2A 06 F1 | 	add	local03, #12
2ff04     15 33 02 FB | 	rdlong	local07, local03
2ff08     0C 2A 86 F1 | 	sub	local03, #12
2ff0c     02 32 16 F2 | 	cmp	local07, #2 wc
2ff10     14 00 90 CD |  if_b	jmp	#LR__4592
2ff14     14 2A 06 F1 | 	add	local03, #20
2ff18     15 2F 02 FB | 	rdlong	local05, local03
2ff1c     14 2A 86 F1 | 	sub	local03, #20
2ff20     17 33 12 F2 | 	cmp	local07, local05 wc
2ff24     19 2D 02 C6 |  if_b	mov	local04, local07
2ff28                 | LR__4592
2ff28     00 30 06 F6 | 	mov	local06, #0
2ff2c                 | LR__4593
2ff2c                 | LR__4594
2ff2c     00 30 0E F2 | 	cmp	local06, #0 wz
2ff30     60 00 90 5D |  if_ne	jmp	#LR__4597
2ff34     16 31 02 F6 | 	mov	local06, local04
2ff38                 | ' 			ncl = scl;
2ff38                 | ' 			for (;;) {
2ff38                 | LR__4595
2ff38     01 30 06 F1 | 	add	local06, #1
2ff3c     14 2A 06 F1 | 	add	local03, #20
2ff40     15 2F 02 FB | 	rdlong	local05, local03
2ff44     14 2A 86 F1 | 	sub	local03, #20
2ff48     17 31 12 F2 | 	cmp	local06, local05 wc
2ff4c     02 30 06 36 |  if_ae	mov	local06, #2
2ff50     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2ff54     00 FA 05 16 |  if_a	mov	result1, #0
2ff58     CC 00 90 1D |  if_a	jmp	#LR__4601
2ff5c     18 15 02 F6 | 	mov	arg02, local06
2ff60     13 13 02 F6 | 	mov	arg01, local01
2ff64     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2ff68     FD 32 0A F6 | 	mov	local07, result1 wz
2ff6c     24 00 90 AD |  if_e	jmp	#LR__4596
2ff70     01 32 0E F2 | 	cmp	local07, #1 wz
2ff74     FF FF 7F 5F 
2ff78     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2ff7c     19 FB 01 A6 |  if_e	mov	result1, local07
2ff80     A4 00 90 AD |  if_e	jmp	#LR__4601
2ff84     16 31 0A F2 | 	cmp	local06, local04 wz
2ff88     00 FA 05 A6 |  if_e	mov	result1, #0
2ff8c     98 00 90 AD |  if_e	jmp	#LR__4601
2ff90     A4 FF 9F FD | 	jmp	#LR__4595
2ff94                 | LR__4596
2ff94                 | LR__4597
2ff94     15 13 02 F6 | 	mov	arg01, local03
2ff98     18 15 02 F6 | 	mov	arg02, local06
2ff9c     01 16 66 F6 | 	neg	arg03, #1
2ffa0     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2ffa4     FD 34 0A F6 | 	mov	local08, result1 wz
2ffa8     1C 00 90 5D |  if_ne	jmp	#LR__4598
2ffac     00 28 0E F2 | 	cmp	local02, #0 wz
2ffb0     14 00 90 AD |  if_e	jmp	#LR__4598
2ffb4     15 13 02 F6 | 	mov	arg01, local03
2ffb8     14 15 02 F6 | 	mov	arg02, local02
2ffbc     18 17 02 F6 | 	mov	arg03, local06
2ffc0     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2ffc4     FD 34 02 F6 | 	mov	local08, result1
2ffc8                 | LR__4598
2ffc8     00 34 0E F2 | 	cmp	local08, #0 wz
2ffcc     4C 00 90 5D |  if_ne	jmp	#LR__4599
2ffd0     0C 2A 06 F1 | 	add	local03, #12
2ffd4     15 31 62 FC | 	wrlong	local06, local03
2ffd8     08 2A 06 F1 | 	add	local03, #8
2ffdc     15 2F 02 FB | 	rdlong	local05, local03
2ffe0     02 2E 86 F1 | 	sub	local05, #2
2ffe4     04 2A 86 F1 | 	sub	local03, #4
2ffe8     15 37 02 FB | 	rdlong	local09, local03
2ffec     10 2A 86 F1 | 	sub	local03, #16
2fff0     17 37 1A F2 | 	cmp	local09, local05 wcz
2fff4     10 2A 06 E1 |  if_be	add	local03, #16
2fff8     15 37 02 EB |  if_be	rdlong	local09, local03
2fffc     01 36 86 E1 |  if_be	sub	local09, #1
30000     15 37 62 EC |  if_be	wrlong	local09, local03
30004     10 2A 86 E1 |  if_be	sub	local03, #16
30008     04 2A 06 F1 | 	add	local03, #4
3000c     15 2F C2 FA | 	rdbyte	local05, local03
30010     01 2E 46 F5 | 	or	local05, #1
30014     15 2F 42 FC | 	wrbyte	local05, local03
30018     08 00 90 FD | 	jmp	#LR__4600
3001c                 | LR__4599
3001c     01 34 0E F2 | 	cmp	local08, #1 wz
30020     01 30 C6 F6 | 	negz	local06, #1
30024                 | LR__4600
30024                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
30024                 | ' 	}
30024                 | ' 
30024                 | ' 	return ncl;
30024     18 FB 01 F6 | 	mov	result1, local06
30028                 | LR__4601
30028     A7 F0 03 F6 | 	mov	ptra, fp
3002c     B2 00 A0 FD | 	call	#popregs_
30030                 | _fatfs_cc_create_chain_ret
30030     2D 00 64 FD | 	ret
30034                 | 
30034                 | _fatfs_cc_dir_clear
30034     06 4A 05 F6 | 	mov	COUNT_, #6
30038     A8 00 A0 FD | 	call	#pushregs_
3003c     09 27 02 F6 | 	mov	local01, arg01
30040     0A 29 02 F6 | 	mov	local02, arg02
30044     13 13 02 F6 | 	mov	arg01, local01
30048     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
3004c     00 FA 0D F2 | 	cmp	result1, #0 wz
30050     01 FA 05 56 |  if_ne	mov	result1, #1
30054     90 00 90 5D |  if_ne	jmp	#LR__4612
30058     13 13 02 F6 | 	mov	arg01, local01
3005c     14 15 02 F6 | 	mov	arg02, local02
30060     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
30064     FD 2A 02 F6 | 	mov	local03, result1
30068     2C 26 06 F1 | 	add	local01, #44
3006c     13 2B 62 FC | 	wrlong	local03, local01
30070     04 26 06 F1 | 	add	local01, #4
30074     13 13 02 F6 | 	mov	arg01, local01
30078     00 14 06 F6 | 	mov	arg02, #0
3007c     09 16 C6 F9 | 	decod	arg03, #9
30080     98 00 A0 FD | 	call	#\builtin_bytefill_
30084     13 2D 02 F6 | 	mov	local04, local01
30088                 | ' #line 1667 "ff.c"
30088                 | ' 	{
30088                 | ' 		ibuf = fs->win; szb = 1;
30088                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
30088     00 2E 06 F6 | 	mov	local05, #0
3008c     30 26 86 F1 | 	sub	local01, #48
30090                 | LR__4610
30090     0A 26 06 F1 | 	add	local01, #10
30094     13 31 E2 FA | 	rdword	local06, local01
30098     0A 26 86 F1 | 	sub	local01, #10
3009c     18 2F 12 F2 | 	cmp	local05, local06 wc
300a0     2C 00 90 3D |  if_ae	jmp	#LR__4611
300a4     01 26 06 F1 | 	add	local01, #1
300a8     13 13 C2 FA | 	rdbyte	arg01, local01
300ac     01 26 86 F1 | 	sub	local01, #1
300b0     16 15 02 F6 | 	mov	arg02, local04
300b4     15 17 02 F6 | 	mov	arg03, local03
300b8     17 17 02 F1 | 	add	arg03, local05
300bc     01 18 06 F6 | 	mov	arg04, #1
300c0     78 F2 BF FD | 	call	#_fatfs_cc_disk_write
300c4     00 FA 0D F2 | 	cmp	result1, #0 wz
300c8     01 2E 06 A1 |  if_e	add	local05, #1
300cc     C0 FF 9F AD |  if_e	jmp	#LR__4610
300d0                 | LR__4611
300d0                 | ' 	}
300d0                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
300d0     0A 26 06 F1 | 	add	local01, #10
300d4     13 2D E2 FA | 	rdword	local04, local01
300d8     16 2F 0A F2 | 	cmp	local05, local04 wz
300dc     00 30 06 A6 |  if_e	mov	local06, #0
300e0     01 30 06 56 |  if_ne	mov	local06, #1
300e4     18 FB 01 F6 | 	mov	result1, local06
300e8                 | LR__4612
300e8     A7 F0 03 F6 | 	mov	ptra, fp
300ec     B2 00 A0 FD | 	call	#popregs_
300f0                 | _fatfs_cc_dir_clear_ret
300f0     2D 00 64 FD | 	ret
300f4                 | 
300f4                 | _fatfs_cc_dir_sdi
300f4     06 4A 05 F6 | 	mov	COUNT_, #6
300f8     A8 00 A0 FD | 	call	#pushregs_
300fc     09 27 02 F6 | 	mov	local01, arg01
30100     0A 29 02 F6 | 	mov	local02, arg02
30104     13 2B 02 FB | 	rdlong	local03, local01
30108     00 10 00 FF 
3010c     00 28 16 F2 | 	cmp	local02, ##2097152 wc
30110     1F 28 CE C7 |  if_b	test	local02, #31 wz
30114                 | ' 		return FR_INT_ERR;
30114     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
30118     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4626
3011c     10 26 06 F1 | 	add	local01, #16
30120     13 29 62 FC | 	wrlong	local02, local01
30124     08 26 86 F1 | 	sub	local01, #8
30128     13 2D 0A FB | 	rdlong	local04, local01 wz
3012c     08 26 86 F1 | 	sub	local01, #8
30130     15 2F C2 AA |  if_e	rdbyte	local05, local03
30134     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
30138     24 2A 06 21 |  if_nc_and_z	add	local03, #36
3013c     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
30140     24 2A 86 21 |  if_nc_and_z	sub	local03, #36
30144     00 2C 0E F2 | 	cmp	local04, #0 wz
30148     3C 00 90 5D |  if_ne	jmp	#LR__4620
3014c     14 2F 02 F6 | 	mov	local05, local02
30150     05 2E 46 F0 | 	shr	local05, #5
30154     08 2A 06 F1 | 	add	local03, #8
30158     15 15 E2 FA | 	rdword	arg02, local03
3015c     08 2A 86 F1 | 	sub	local03, #8
30160     0A 2F 12 F2 | 	cmp	local05, arg02 wc
30164     02 FA 05 36 |  if_ae	mov	result1, #2
30168     E4 00 90 3D |  if_ae	jmp	#LR__4626
3016c     24 2A 06 F1 | 	add	local03, #36
30170     15 2F 02 FB | 	rdlong	local05, local03
30174     24 2A 86 F1 | 	sub	local03, #36
30178     18 26 06 F1 | 	add	local01, #24
3017c     13 2F 62 FC | 	wrlong	local05, local01
30180     18 26 86 F1 | 	sub	local01, #24
30184     7C 00 90 FD | 	jmp	#LR__4625
30188                 | LR__4620
30188     0A 2A 06 F1 | 	add	local03, #10
3018c     15 31 E2 FA | 	rdword	local06, local03
30190     0A 2A 86 F1 | 	sub	local03, #10
30194     09 30 66 F0 | 	shl	local06, #9
30198                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
30198                 | ' 		while (ofs >= csz) {
30198                 | LR__4621
30198     18 29 12 F2 | 	cmp	local02, local06 wc
3019c     4C 00 90 CD |  if_b	jmp	#LR__4624
301a0     13 13 02 F6 | 	mov	arg01, local01
301a4     16 15 02 F6 | 	mov	arg02, local04
301a8     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
301ac     FD 2C 02 F6 | 	mov	local04, result1
301b0     FF FF 7F FF 
301b4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
301b8     01 FA 05 A6 |  if_e	mov	result1, #1
301bc     90 00 90 AD |  if_e	jmp	#LR__4626
301c0     02 2C 16 F2 | 	cmp	local04, #2 wc
301c4     14 00 90 CD |  if_b	jmp	#LR__4622
301c8     14 2A 06 F1 | 	add	local03, #20
301cc     15 2F 02 FB | 	rdlong	local05, local03
301d0     14 2A 86 F1 | 	sub	local03, #20
301d4     17 2D 12 F2 | 	cmp	local04, local05 wc
301d8     08 00 90 CD |  if_b	jmp	#LR__4623
301dc                 | LR__4622
301dc     02 FA 05 F6 | 	mov	result1, #2
301e0     6C 00 90 FD | 	jmp	#LR__4626
301e4                 | LR__4623
301e4     18 29 82 F1 | 	sub	local02, local06
301e8     AC FF 9F FD | 	jmp	#LR__4621
301ec                 | LR__4624
301ec     15 13 02 F6 | 	mov	arg01, local03
301f0     16 15 02 F6 | 	mov	arg02, local04
301f4     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
301f8     18 26 06 F1 | 	add	local01, #24
301fc     13 FB 61 FC | 	wrlong	result1, local01
30200     18 26 86 F1 | 	sub	local01, #24
30204                 | LR__4625
30204     14 26 06 F1 | 	add	local01, #20
30208     13 2D 62 FC | 	wrlong	local04, local01
3020c     04 26 06 F1 | 	add	local01, #4
30210     13 2F 0A FB | 	rdlong	local05, local01 wz
30214     18 26 86 F1 | 	sub	local01, #24
30218     02 FA 05 A6 |  if_e	mov	result1, #2
3021c     30 00 90 AD |  if_e	jmp	#LR__4626
30220     14 31 02 F6 | 	mov	local06, local02
30224     09 30 46 F0 | 	shr	local06, #9
30228     18 26 06 F1 | 	add	local01, #24
3022c     13 2F 02 FB | 	rdlong	local05, local01
30230     18 2F 02 F1 | 	add	local05, local06
30234     13 2F 62 FC | 	wrlong	local05, local01
30238     30 2A 06 F1 | 	add	local03, #48
3023c     FF 29 06 F5 | 	and	local02, #511
30240     14 2B 02 F1 | 	add	local03, local02
30244     04 26 06 F1 | 	add	local01, #4
30248     13 2B 62 FC | 	wrlong	local03, local01
3024c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
3024c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
3024c                 | ' 
3024c                 | ' 	return FR_OK;
3024c     00 FA 05 F6 | 	mov	result1, #0
30250                 | LR__4626
30250     A7 F0 03 F6 | 	mov	ptra, fp
30254     B2 00 A0 FD | 	call	#popregs_
30258                 | _fatfs_cc_dir_sdi_ret
30258     2D 00 64 FD | 	ret
3025c                 | 
3025c                 | _fatfs_cc_dir_next
3025c     05 4A 05 F6 | 	mov	COUNT_, #5
30260     A8 00 A0 FD | 	call	#pushregs_
30264     09 27 02 F6 | 	mov	local01, arg01
30268     0A 29 02 F6 | 	mov	local02, arg02
3026c     13 2B 02 FB | 	rdlong	local03, local01
30270     10 26 06 F1 | 	add	local01, #16
30274     13 2D 02 FB | 	rdlong	local04, local01
30278     10 26 86 F1 | 	sub	local01, #16
3027c     20 2C 06 F1 | 	add	local04, #32
30280     00 10 00 FF 
30284     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
30288     18 26 06 31 |  if_ae	add	local01, #24
3028c     13 01 68 3C |  if_ae	wrlong	#0, local01
30290     18 26 86 31 |  if_ae	sub	local01, #24
30294     18 26 06 F1 | 	add	local01, #24
30298     13 15 0A FB | 	rdlong	arg02, local01 wz
3029c     18 26 86 F1 | 	sub	local01, #24
302a0     04 FA 05 A6 |  if_e	mov	result1, #4
302a4     64 01 90 AD |  if_e	jmp	#LR__4635
302a8     FF 2D CE F7 | 	test	local04, #511 wz
302ac     3C 01 90 5D |  if_ne	jmp	#LR__4634
302b0     18 26 06 F1 | 	add	local01, #24
302b4     13 15 02 FB | 	rdlong	arg02, local01
302b8     01 14 06 F1 | 	add	arg02, #1
302bc     13 15 62 FC | 	wrlong	arg02, local01
302c0     04 26 86 F1 | 	sub	local01, #4
302c4     13 15 0A FB | 	rdlong	arg02, local01 wz
302c8     14 26 86 F1 | 	sub	local01, #20
302cc     2C 00 90 5D |  if_ne	jmp	#LR__4630
302d0     16 15 02 F6 | 	mov	arg02, local04
302d4     05 14 46 F0 | 	shr	arg02, #5
302d8     08 2A 06 F1 | 	add	local03, #8
302dc     15 29 E2 FA | 	rdword	local02, local03
302e0     08 2A 86 F1 | 	sub	local03, #8
302e4     14 15 12 F2 | 	cmp	arg02, local02 wc
302e8     18 26 06 31 |  if_ae	add	local01, #24
302ec     13 01 68 3C |  if_ae	wrlong	#0, local01
302f0                 | ' 				dp->sect = 0; return FR_NO_FILE;
302f0     04 FA 05 36 |  if_ae	mov	result1, #4
302f4     14 01 90 3D |  if_ae	jmp	#LR__4635
302f8     F0 00 90 FD | 	jmp	#LR__4633
302fc                 | LR__4630
302fc     16 13 02 F6 | 	mov	arg01, local04
30300     09 12 46 F0 | 	shr	arg01, #9
30304     0A 2A 06 F1 | 	add	local03, #10
30308     15 15 E2 FA | 	rdword	arg02, local03
3030c     0A 2A 86 F1 | 	sub	local03, #10
30310     01 14 86 F1 | 	sub	arg02, #1
30314     0A 13 CA F7 | 	test	arg01, arg02 wz
30318     D0 00 90 5D |  if_ne	jmp	#LR__4632
3031c     13 13 02 F6 | 	mov	arg01, local01
30320     14 26 06 F1 | 	add	local01, #20
30324     13 15 02 FB | 	rdlong	arg02, local01
30328     14 26 86 F1 | 	sub	local01, #20
3032c     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
30330     FD 2E 02 F6 | 	mov	local05, result1
30334     02 2E 16 F2 | 	cmp	local05, #2 wc
30338     02 FA 05 C6 |  if_b	mov	result1, #2
3033c     CC 00 90 CD |  if_b	jmp	#LR__4635
30340     FF FF 7F FF 
30344     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
30348     01 FA 05 A6 |  if_e	mov	result1, #1
3034c     BC 00 90 AD |  if_e	jmp	#LR__4635
30350     14 2A 06 F1 | 	add	local03, #20
30354     15 15 02 FB | 	rdlong	arg02, local03
30358     14 2A 86 F1 | 	sub	local03, #20
3035c     0A 2F 12 F2 | 	cmp	local05, arg02 wc
30360     68 00 90 CD |  if_b	jmp	#LR__4631
30364     00 28 0E F2 | 	cmp	local02, #0 wz
30368     18 26 06 A1 |  if_e	add	local01, #24
3036c     13 01 68 AC |  if_e	wrlong	#0, local01
30370                 | ' 						dp->sect = 0; return FR_NO_FILE;
30370     04 FA 05 A6 |  if_e	mov	result1, #4
30374     94 00 90 AD |  if_e	jmp	#LR__4635
30378     13 13 02 F6 | 	mov	arg01, local01
3037c     14 26 06 F1 | 	add	local01, #20
30380     13 15 02 FB | 	rdlong	arg02, local01
30384     14 26 86 F1 | 	sub	local01, #20
30388     84 FA BF FD | 	call	#_fatfs_cc_create_chain
3038c     FD 2E 0A F6 | 	mov	local05, result1 wz
30390     07 FA 05 A6 |  if_e	mov	result1, #7
30394     74 00 90 AD |  if_e	jmp	#LR__4635
30398     01 2E 0E F2 | 	cmp	local05, #1 wz
3039c     02 FA 05 A6 |  if_e	mov	result1, #2
303a0     68 00 90 AD |  if_e	jmp	#LR__4635
303a4     FF FF 7F FF 
303a8     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
303ac     01 FA 05 A6 |  if_e	mov	result1, #1
303b0     58 00 90 AD |  if_e	jmp	#LR__4635
303b4     17 15 02 F6 | 	mov	arg02, local05
303b8     15 13 02 F6 | 	mov	arg01, local03
303bc     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
303c0     00 FA 0D F2 | 	cmp	result1, #0 wz
303c4     01 FA 05 56 |  if_ne	mov	result1, #1
303c8     40 00 90 5D |  if_ne	jmp	#LR__4635
303cc                 | LR__4631
303cc     14 26 06 F1 | 	add	local01, #20
303d0     13 2F 62 FC | 	wrlong	local05, local01
303d4     15 13 02 F6 | 	mov	arg01, local03
303d8     17 15 02 F6 | 	mov	arg02, local05
303dc     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
303e0     04 26 06 F1 | 	add	local01, #4
303e4     13 FB 61 FC | 	wrlong	result1, local01
303e8     18 26 86 F1 | 	sub	local01, #24
303ec                 | LR__4632
303ec                 | LR__4633
303ec                 | LR__4634
303ec     10 26 06 F1 | 	add	local01, #16
303f0     13 2D 62 FC | 	wrlong	local04, local01
303f4     30 2A 06 F1 | 	add	local03, #48
303f8     FF 2D 06 F5 | 	and	local04, #511
303fc     16 2B 02 F1 | 	add	local03, local04
30400     0C 26 06 F1 | 	add	local01, #12
30404     13 2B 62 FC | 	wrlong	local03, local01
30408                 | ' #line 1771 "ff.c"
30408                 | ' 				}
30408                 | ' 				dp->clust = clst;
30408                 | ' 				dp->sect = clst2sect(fs, clst);
30408                 | ' 			}
30408                 | ' 		}
30408                 | ' 	}
30408                 | ' 	dp->dptr = ofs;
30408                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
30408                 | ' 
30408                 | ' 	return FR_OK;
30408     00 FA 05 F6 | 	mov	result1, #0
3040c                 | LR__4635
3040c     A7 F0 03 F6 | 	mov	ptra, fp
30410     B2 00 A0 FD | 	call	#popregs_
30414                 | _fatfs_cc_dir_next_ret
30414     2D 00 64 FD | 	ret
30418                 | 
30418                 | _fatfs_cc_dir_alloc
30418     08 4A 05 F6 | 	mov	COUNT_, #8
3041c     A8 00 A0 FD | 	call	#pushregs_
30420     09 27 02 F6 | 	mov	local01, arg01
30424     0A 29 02 F6 | 	mov	local02, arg02
30428     13 2B 02 FB | 	rdlong	local03, local01
3042c     13 13 02 F6 | 	mov	arg01, local01
30430     00 14 06 F6 | 	mov	arg02, #0
30434     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
30438     FD 2C 0A F6 | 	mov	local04, result1 wz
3043c     70 00 90 5D |  if_ne	jmp	#LR__4644
30440     00 2E 06 F6 | 	mov	local05, #0
30444                 | ' 		n = 0;
30444                 | ' 		do {
30444                 | LR__4640
30444     18 26 06 F1 | 	add	local01, #24
30448     13 15 02 FB | 	rdlong	arg02, local01
3044c     18 26 86 F1 | 	sub	local01, #24
30450     15 13 02 F6 | 	mov	arg01, local03
30454     38 F3 BF FD | 	call	#_fatfs_cc_move_window
30458     FD 2C 0A F6 | 	mov	local04, result1 wz
3045c     50 00 90 5D |  if_ne	jmp	#LR__4643
30460     1C 26 06 F1 | 	add	local01, #28
30464     13 31 02 FB | 	rdlong	local06, local01
30468     1C 26 86 F1 | 	sub	local01, #28
3046c     18 31 C2 FA | 	rdbyte	local06, local06
30470     E5 30 0E F2 | 	cmp	local06, #229 wz
30474     1C 26 06 51 |  if_ne	add	local01, #28
30478     13 33 02 5B |  if_ne	rdlong	local07, local01
3047c     1C 26 86 51 |  if_ne	sub	local01, #28
30480     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
30484     10 00 90 5D |  if_ne	jmp	#LR__4641
30488     01 2E 06 F1 | 	add	local05, #1
3048c     14 2F 0A F2 | 	cmp	local05, local02 wz
30490     1C 00 90 AD |  if_e	jmp	#LR__4643
30494     04 00 90 FD | 	jmp	#LR__4642
30498                 | LR__4641
30498     00 2E 06 F6 | 	mov	local05, #0
3049c                 | LR__4642
3049c     13 13 02 F6 | 	mov	arg01, local01
304a0     01 14 06 F6 | 	mov	arg02, #1
304a4     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
304a8     FD 2C 0A F6 | 	mov	local04, result1 wz
304ac     94 FF 9F AD |  if_e	jmp	#LR__4640
304b0                 | LR__4643
304b0                 | LR__4644
304b0     04 2C 0E F2 | 	cmp	local04, #4 wz
304b4     07 2C 06 A6 |  if_e	mov	local04, #7
304b8                 | ' 	return res;
304b8     16 FB 01 F6 | 	mov	result1, local04
304bc     A7 F0 03 F6 | 	mov	ptra, fp
304c0     B2 00 A0 FD | 	call	#popregs_
304c4                 | _fatfs_cc_dir_alloc_ret
304c4     2D 00 64 FD | 	ret
304c8                 | 
304c8                 | _fatfs_cc_ld_clust
304c8     09 01 02 F6 | 	mov	_var01, arg01
304cc     0A 13 02 F6 | 	mov	arg01, arg02
304d0     1A 12 06 F1 | 	add	arg01, #26
304d4                 | ' {
304d4                 | ' 
304d4                 | ' 	return *((WORD*)ptr);
304d4     09 FB E1 FA | 	rdword	result1, arg01
304d8     FD 12 32 F9 | 	getword	arg01, result1, #0
304dc     00 01 C2 FA | 	rdbyte	_var01, _var01
304e0     03 00 0E F2 | 	cmp	_var01, #3 wz
304e4     14 14 06 A1 |  if_e	add	arg02, #20
304e8                 | ' {
304e8                 | ' 
304e8                 | ' 	return *((WORD*)ptr);
304e8     0A FB E1 AA |  if_e	rdword	result1, arg02
304ec     10 FA 65 A0 |  if_e	shl	result1, #16
304f0     FD 12 42 A5 |  if_e	or	arg01, result1
304f4                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
304f4                 | ' 	}
304f4                 | ' 
304f4                 | ' 	return cl;
304f4     09 FB 01 F6 | 	mov	result1, arg01
304f8                 | _fatfs_cc_ld_clust_ret
304f8     2D 00 64 FD | 	ret
304fc                 | 
304fc                 | _fatfs_cc_st_clust
304fc     09 01 02 F6 | 	mov	_var01, arg01
30500     0A 13 02 F6 | 	mov	arg01, arg02
30504     1A 12 06 F1 | 	add	arg01, #26
30508     09 17 52 FC | 	wrword	arg03, arg01
3050c     00 01 C2 FA | 	rdbyte	_var01, _var01
30510     03 00 0E F2 | 	cmp	_var01, #3 wz
30514     14 14 06 A1 |  if_e	add	arg02, #20
30518     10 16 46 A0 |  if_e	shr	arg03, #16
3051c     0A 17 52 AC |  if_e	wrword	arg03, arg02
30520                 | _fatfs_cc_st_clust_ret
30520     2D 00 64 FD | 	ret
30524                 | 
30524                 | _fatfs_cc_dir_read
30524     09 4A 05 F6 | 	mov	COUNT_, #9
30528     A8 00 A0 FD | 	call	#pushregs_
3052c     09 27 02 F6 | 	mov	local01, arg01
30530     0A 29 02 F6 | 	mov	local02, arg02
30534     04 2A 06 F6 | 	mov	local03, #4
30538     13 2D 02 FB | 	rdlong	local04, local01
3053c                 | ' )
3053c                 | ' {
3053c                 | ' 	FRESULT res = FR_NO_FILE;
3053c                 | ' 	FATFS *fs = dp->obj.fs;
3053c                 | ' 	BYTE attr, b;
3053c                 | ' #line 2303 "ff.c"
3053c                 | ' 	while (dp->sect) {
3053c                 | LR__4650
3053c     18 26 06 F1 | 	add	local01, #24
30540     13 FB 09 FB | 	rdlong	result1, local01 wz
30544     18 26 86 F1 | 	sub	local01, #24
30548     B0 00 90 AD |  if_e	jmp	#LR__4652
3054c     18 26 06 F1 | 	add	local01, #24
30550     13 15 02 FB | 	rdlong	arg02, local01
30554     18 26 86 F1 | 	sub	local01, #24
30558     16 13 02 F6 | 	mov	arg01, local04
3055c     30 F2 BF FD | 	call	#_fatfs_cc_move_window
30560     FD 2A 0A F6 | 	mov	local03, result1 wz
30564     94 00 90 5D |  if_ne	jmp	#LR__4652
30568     1C 26 06 F1 | 	add	local01, #28
3056c     13 FB 01 FB | 	rdlong	result1, local01
30570     1C 26 86 F1 | 	sub	local01, #28
30574     FD 2E C2 FA | 	rdbyte	local05, result1
30578     17 FB 01 F6 | 	mov	result1, local05
3057c     07 FA 4D F7 | 	zerox	result1, #7 wz
30580     04 2A 06 A6 |  if_e	mov	local03, #4
30584                 | ' 			res = FR_NO_FILE; break;
30584     74 00 90 AD |  if_e	jmp	#LR__4652
30588     1C 26 06 F1 | 	add	local01, #28
3058c     13 31 02 FB | 	rdlong	local06, local01
30590     0B 30 06 F1 | 	add	local06, #11
30594     18 33 C2 FA | 	rdbyte	local07, local06
30598     3F 32 06 F5 | 	and	local07, #63
3059c     16 26 86 F1 | 	sub	local01, #22
305a0     13 33 42 FC | 	wrbyte	local07, local01
305a4     06 26 86 F1 | 	sub	local01, #6
305a8     17 FB E1 F8 | 	getbyte	result1, local05, #0
305ac     E5 FA 0D F2 | 	cmp	result1, #229 wz
305b0     17 31 02 56 |  if_ne	mov	local06, local05
305b4     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
305b8     2E 30 0E 52 |  if_ne	cmp	local06, #46 wz
305bc     19 35 02 56 |  if_ne	mov	local08, local07
305c0     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
305c4     0F 34 0E 52 |  if_ne	cmp	local08, #15 wz
305c8     1C 00 90 AD |  if_e	jmp	#LR__4651
305cc     00 36 06 F6 | 	mov	local09, #0
305d0     19 33 E2 F8 | 	getbyte	local07, local07, #0
305d4     20 32 26 F5 | 	andn	local07, #32
305d8     08 32 0E F2 | 	cmp	local07, #8 wz
305dc     01 36 06 A6 |  if_e	mov	local09, #1
305e0     14 37 0A F2 | 	cmp	local09, local02 wz
305e4                 | ' 				break;
305e4     14 00 90 AD |  if_e	jmp	#LR__4652
305e8                 | LR__4651
305e8     13 13 02 F6 | 	mov	arg01, local01
305ec     00 14 06 F6 | 	mov	arg02, #0
305f0     68 FC BF FD | 	call	#_fatfs_cc_dir_next
305f4     FD 2A 0A F6 | 	mov	local03, result1 wz
305f8     40 FF 9F AD |  if_e	jmp	#LR__4650
305fc                 | LR__4652
305fc     00 2A 0E F2 | 	cmp	local03, #0 wz
30600     18 26 06 51 |  if_ne	add	local01, #24
30604     13 01 68 5C |  if_ne	wrlong	#0, local01
30608                 | ' 	return res;
30608     15 FB 01 F6 | 	mov	result1, local03
3060c     A7 F0 03 F6 | 	mov	ptra, fp
30610     B2 00 A0 FD | 	call	#popregs_
30614                 | _fatfs_cc_dir_read_ret
30614     2D 00 64 FD | 	ret
30618                 | 
30618                 | _fatfs_cc_dir_find
30618     03 4A 05 F6 | 	mov	COUNT_, #3
3061c     A8 00 A0 FD | 	call	#pushregs_
30620     09 27 02 F6 | 	mov	local01, arg01
30624     13 29 02 FB | 	rdlong	local02, local01
30628     13 13 02 F6 | 	mov	arg01, local01
3062c     00 14 06 F6 | 	mov	arg02, #0
30630     C0 FA BF FD | 	call	#_fatfs_cc_dir_sdi
30634     00 FA 0D F2 | 	cmp	result1, #0 wz
30638     A8 00 90 5D |  if_ne	jmp	#LR__4663
3063c                 | ' #line 2406 "ff.c"
3063c                 | ' 	do {
3063c                 | LR__4660
3063c     18 26 06 F1 | 	add	local01, #24
30640     13 15 02 FB | 	rdlong	arg02, local01
30644     18 26 86 F1 | 	sub	local01, #24
30648     14 13 02 F6 | 	mov	arg01, local02
3064c     40 F1 BF FD | 	call	#_fatfs_cc_move_window
30650     FD 2A 0A F6 | 	mov	local03, result1 wz
30654     88 00 90 5D |  if_ne	jmp	#LR__4662
30658     1C 26 06 F1 | 	add	local01, #28
3065c     13 17 02 FB | 	rdlong	arg03, local01
30660     1C 26 86 F1 | 	sub	local01, #28
30664     0B 17 CA FA | 	rdbyte	arg03, arg03 wz
30668     04 2A 06 A6 |  if_e	mov	local03, #4
3066c     70 00 90 AD |  if_e	jmp	#LR__4662
30670     1C 26 06 F1 | 	add	local01, #28
30674     13 17 02 FB | 	rdlong	arg03, local01
30678     0B 16 06 F1 | 	add	arg03, #11
3067c     0B 17 C2 FA | 	rdbyte	arg03, arg03
30680     3F 16 06 F5 | 	and	arg03, #63
30684     16 26 86 F1 | 	sub	local01, #22
30688     13 17 42 FC | 	wrbyte	arg03, local01
3068c     16 26 06 F1 | 	add	local01, #22
30690     13 17 02 FB | 	rdlong	arg03, local01
30694     1C 26 86 F1 | 	sub	local01, #28
30698     0B 16 06 F1 | 	add	arg03, #11
3069c     0B 17 C2 FA | 	rdbyte	arg03, arg03
306a0     08 16 CE F7 | 	test	arg03, #8 wz
306a4     24 00 90 5D |  if_ne	jmp	#LR__4661
306a8     1C 26 06 F1 | 	add	local01, #28
306ac     13 13 02 FB | 	rdlong	arg01, local01
306b0     04 26 06 F1 | 	add	local01, #4
306b4     13 15 02 F6 | 	mov	arg02, local01
306b8     20 26 86 F1 | 	sub	local01, #32
306bc     0B 16 06 F6 | 	mov	arg03, #11
306c0     60 E4 BF FD | 	call	#_fatfs_cc_memcmp
306c4     00 FA 0D F2 | 	cmp	result1, #0 wz
306c8     14 00 90 AD |  if_e	jmp	#LR__4662
306cc                 | LR__4661
306cc     13 13 02 F6 | 	mov	arg01, local01
306d0     00 14 06 F6 | 	mov	arg02, #0
306d4     84 FB BF FD | 	call	#_fatfs_cc_dir_next
306d8     FD 2A 0A F6 | 	mov	local03, result1 wz
306dc     5C FF 9F AD |  if_e	jmp	#LR__4660
306e0                 | LR__4662
306e0                 | ' 
306e0                 | ' 	return res;
306e0     15 FB 01 F6 | 	mov	result1, local03
306e4                 | LR__4663
306e4     A7 F0 03 F6 | 	mov	ptra, fp
306e8     B2 00 A0 FD | 	call	#popregs_
306ec                 | _fatfs_cc_dir_find_ret
306ec     2D 00 64 FD | 	ret
306f0                 | 
306f0                 | _fatfs_cc_dir_register
306f0     03 4A 05 F6 | 	mov	COUNT_, #3
306f4     A8 00 A0 FD | 	call	#pushregs_
306f8     09 27 02 F6 | 	mov	local01, arg01
306fc     13 29 02 FB | 	rdlong	local02, local01
30700     13 13 02 F6 | 	mov	arg01, local01
30704     01 14 06 F6 | 	mov	arg02, #1
30708     0C FD BF FD | 	call	#_fatfs_cc_dir_alloc
3070c     FD 2A 0A F6 | 	mov	local03, result1 wz
30710     4C 00 90 5D |  if_ne	jmp	#LR__4671
30714     18 26 06 F1 | 	add	local01, #24
30718     13 15 02 FB | 	rdlong	arg02, local01
3071c     18 26 86 F1 | 	sub	local01, #24
30720     14 13 02 F6 | 	mov	arg01, local02
30724     68 F0 BF FD | 	call	#_fatfs_cc_move_window
30728     FD 2A 0A F6 | 	mov	local03, result1 wz
3072c     30 00 90 5D |  if_ne	jmp	#LR__4670
30730     1C 26 06 F1 | 	add	local01, #28
30734     13 13 02 FB | 	rdlong	arg01, local01
30738     00 14 06 F6 | 	mov	arg02, #0
3073c     20 16 06 F6 | 	mov	arg03, #32
30740     98 00 A0 FD | 	call	#\builtin_bytefill_
30744     13 13 02 FB | 	rdlong	arg01, local01
30748     04 26 06 F1 | 	add	local01, #4
3074c     13 15 02 F6 | 	mov	arg02, local01
30750     0B 16 06 F6 | 	mov	arg03, #11
30754     68 78 BF FD | 	call	#__system____builtin_memmove
30758     03 28 06 F1 | 	add	local02, #3
3075c     14 03 48 FC | 	wrbyte	#1, local02
30760                 | LR__4670
30760                 | LR__4671
30760                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
30760                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
30760                 | ' #line 2540 "ff.c"
30760                 | ' 			fs->wflag = 1;
30760                 | ' 		}
30760                 | ' 	}
30760                 | ' 
30760                 | ' 	return res;
30760     15 FB 01 F6 | 	mov	result1, local03
30764     A7 F0 03 F6 | 	mov	ptra, fp
30768     B2 00 A0 FD | 	call	#popregs_
3076c                 | _fatfs_cc_dir_register_ret
3076c     2D 00 64 FD | 	ret
30770                 | 
30770                 | _fatfs_cc_dir_remove
30770     02 4A 05 F6 | 	mov	COUNT_, #2
30774     A8 00 A0 FD | 	call	#pushregs_
30778     09 27 02 F6 | 	mov	local01, arg01
3077c     13 29 02 FB | 	rdlong	local02, local01
30780     18 26 06 F1 | 	add	local01, #24
30784     13 15 02 FB | 	rdlong	arg02, local01
30788     18 26 86 F1 | 	sub	local01, #24
3078c     14 13 02 F6 | 	mov	arg01, local02
30790     FC EF BF FD | 	call	#_fatfs_cc_move_window
30794     00 FA 4D F2 | 	cmps	result1, #0 wz
30798     1C 26 06 A1 |  if_e	add	local01, #28
3079c     13 27 02 AB |  if_e	rdlong	local01, local01
307a0     13 CB 49 AC |  if_e	wrbyte	#229, local01
307a4     03 28 06 A1 |  if_e	add	local02, #3
307a8     14 03 48 AC |  if_e	wrbyte	#1, local02
307ac                 | ' 		dp->dir[ 0 ] =  0xE5 ;
307ac                 | ' 		fs->wflag = 1;
307ac                 | ' 	}
307ac                 | ' 
307ac                 | ' 
307ac                 | ' 	return res;
307ac     A7 F0 03 F6 | 	mov	ptra, fp
307b0     B2 00 A0 FD | 	call	#popregs_
307b4                 | _fatfs_cc_dir_remove_ret
307b4     2D 00 64 FD | 	ret
307b8                 | 
307b8                 | _fatfs_cc_get_fileinfo
307b8     09 01 02 F6 | 	mov	_var01, arg01
307bc     0C 14 06 F1 | 	add	arg02, #12
307c0     0A 01 48 FC | 	wrbyte	#0, arg02
307c4     0C 14 86 F1 | 	sub	arg02, #12
307c8     18 00 06 F1 | 	add	_var01, #24
307cc     00 FB 09 FB | 	rdlong	result1, _var01 wz
307d0     18 00 86 F1 | 	sub	_var01, #24
307d4     E4 00 90 AD |  if_e	jmp	#LR__4683
307d8     00 02 06 F6 | 	mov	_var02, #0
307dc     00 04 06 F6 | 	mov	_var03, #0
307e0                 | ' #line 2708 "ff.c"
307e0                 | ' 	si = di = 0;
307e0                 | ' 	while (si < 11) {
307e0                 | LR__4680
307e0     0B 04 16 F2 | 	cmp	_var03, #11 wc
307e4     70 00 90 3D |  if_ae	jmp	#LR__4682
307e8     1C 00 06 F1 | 	add	_var01, #28
307ec     00 13 02 FB | 	rdlong	arg01, _var01
307f0     1C 00 86 F1 | 	sub	_var01, #28
307f4     02 FB 01 F6 | 	mov	result1, _var03
307f8     09 FB 01 F1 | 	add	result1, arg01
307fc     FD 06 C2 FA | 	rdbyte	_var04, result1
30800     03 FB E1 F8 | 	getbyte	result1, _var04, #0
30804     20 FA 0D F2 | 	cmp	result1, #32 wz
30808     01 04 06 F1 | 	add	_var03, #1
3080c     D0 FF 9F AD |  if_e	jmp	#LR__4680
30810     03 FB E1 F8 | 	getbyte	result1, _var04, #0
30814     05 FA 0D F2 | 	cmp	result1, #5 wz
30818     E5 06 06 A6 |  if_e	mov	_var04, #229
3081c     09 04 0E F2 | 	cmp	_var03, #9 wz
30820     18 00 90 5D |  if_ne	jmp	#LR__4681
30824     01 FB 01 F6 | 	mov	result1, _var02
30828     0C 14 06 F1 | 	add	arg02, #12
3082c     0A FB 01 F1 | 	add	result1, arg02
30830     FD 5C 48 FC | 	wrbyte	#46, result1
30834     01 02 06 F1 | 	add	_var02, #1
30838     0C 14 86 F1 | 	sub	arg02, #12
3083c                 | LR__4681
3083c     01 FB 01 F6 | 	mov	result1, _var02
30840     0C 14 06 F1 | 	add	arg02, #12
30844     0A FB 01 F1 | 	add	result1, arg02
30848     FD 06 42 FC | 	wrbyte	_var04, result1
3084c     01 02 06 F1 | 	add	_var02, #1
30850     0C 14 86 F1 | 	sub	arg02, #12
30854     88 FF 9F FD | 	jmp	#LR__4680
30858                 | LR__4682
30858     0C 14 06 F1 | 	add	arg02, #12
3085c     0A 03 02 F1 | 	add	_var02, arg02
30860     01 01 48 FC | 	wrbyte	#0, _var02
30864     1C 00 06 F1 | 	add	_var01, #28
30868     00 07 02 FB | 	rdlong	_var04, _var01
3086c     0B 06 06 F1 | 	add	_var04, #11
30870     03 07 C2 FA | 	rdbyte	_var04, _var04
30874     3F 06 06 F5 | 	and	_var04, #63
30878     04 14 86 F1 | 	sub	arg02, #4
3087c     0A 07 42 FC | 	wrbyte	_var04, arg02
30880     08 14 86 F1 | 	sub	arg02, #8
30884     00 13 02 FB | 	rdlong	arg01, _var01
30888     1C 12 06 F1 | 	add	arg01, #28
3088c                 | ' {
3088c                 | ' 
3088c                 | ' 	return *((DWORD*)ptr);
3088c     09 FB 01 FB | 	rdlong	result1, arg01
30890     0A FB 61 FC | 	wrlong	result1, arg02
30894     00 13 02 FB | 	rdlong	arg01, _var01
30898     16 12 06 F1 | 	add	arg01, #22
3089c                 | ' {
3089c                 | ' 
3089c                 | ' 	return *((WORD*)ptr);
3089c     09 FB E1 FA | 	rdword	result1, arg01
308a0     06 14 06 F1 | 	add	arg02, #6
308a4     0A FB 51 FC | 	wrword	result1, arg02
308a8     00 13 02 FB | 	rdlong	arg01, _var01
308ac     18 12 06 F1 | 	add	arg01, #24
308b0                 | ' {
308b0                 | ' 
308b0                 | ' 	return *((WORD*)ptr);
308b0     09 FB E1 FA | 	rdword	result1, arg01
308b4     02 14 86 F1 | 	sub	arg02, #2
308b8     0A FB 51 FC | 	wrword	result1, arg02
308bc                 | LR__4683
308bc                 | _fatfs_cc_get_fileinfo_ret
308bc     2D 00 64 FD | 	ret
308c0                 | 
308c0                 | _fatfs_cc_create_name
308c0     0E 4A 05 F6 | 	mov	COUNT_, #14
308c4     A8 00 A0 FD | 	call	#pushregs_
308c8     0A 27 02 F6 | 	mov	local01, arg02
308cc     13 29 02 FB | 	rdlong	local02, local01
308d0     20 12 06 F1 | 	add	arg01, #32
308d4     09 2B 02 F6 | 	mov	local03, arg01
308d8     20 14 06 F6 | 	mov	arg02, #32
308dc     0B 16 06 F6 | 	mov	arg03, #11
308e0     09 2D 02 F6 | 	mov	local04, arg01
308e4     98 00 A0 FD | 	call	#\builtin_bytefill_
308e8     16 FB 01 F6 | 	mov	result1, local04
308ec     00 2E 06 F6 | 	mov	local05, #0
308f0     00 30 06 F6 | 	mov	local06, #0
308f4     08 32 06 F6 | 	mov	local07, #8
308f8                 | ' 
308f8                 | ' 
308f8                 | ' 	p = *path; sfn = dp->fn;
308f8                 | ' 	__builtin_memset(sfn, ' ', 11) ;
308f8                 | ' 	si = i = 0; ni = 8;
308f8                 | ' #line 2970 "ff.c"
308f8                 | ' 	for (;;) {
308f8                 | LR__4690
308f8     18 35 02 F6 | 	mov	local08, local06
308fc     14 37 02 F6 | 	mov	local09, local02
30900     14 35 02 F1 | 	add	local08, local02
30904     1A 35 C2 FA | 	rdbyte	local08, local08
30908     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
3090c     21 16 16 F2 | 	cmp	arg03, #33 wc
30910     01 30 06 F1 | 	add	local06, #1
30914     54 01 90 CD |  if_b	jmp	#LR__4698
30918     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
3091c     2F 16 0E F2 | 	cmp	arg03, #47 wz
30920     1A 39 02 56 |  if_ne	mov	local10, local08
30924     1C 39 E2 58 |  if_ne	getbyte	local10, local10, #0
30928     5C 38 0E 52 |  if_ne	cmp	local10, #92 wz
3092c     2C 00 90 5D |  if_ne	jmp	#LR__4692
30930                 | ' 			while ( ((p[si]) == '/' || (p[si]) == '\\') ) si++;
30930                 | LR__4691
30930     18 39 02 F6 | 	mov	local10, local06
30934     14 39 02 F1 | 	add	local10, local02
30938     1C 39 C2 FA | 	rdbyte	local10, local10
3093c     2F 38 0E F2 | 	cmp	local10, #47 wz
30940     18 3B 02 56 |  if_ne	mov	local11, local06
30944     14 3B 02 51 |  if_ne	add	local11, local02
30948     1D 37 C2 5A |  if_ne	rdbyte	local09, local11
3094c     5C 36 0E 52 |  if_ne	cmp	local09, #92 wz
30950     18 01 90 5D |  if_ne	jmp	#LR__4698
30954     01 30 06 F1 | 	add	local06, #1
30958     D4 FF 9F FD | 	jmp	#LR__4691
3095c                 | ' 			break;
3095c                 | LR__4692
3095c     1A 37 E2 F8 | 	getbyte	local09, local08, #0
30960     2E 36 0E F2 | 	cmp	local09, #46 wz
30964     19 2F 12 52 |  if_ne	cmp	local05, local07 wc
30968     28 00 90 4D |  if_c_and_nz	jmp	#LR__4695
3096c     0B 32 0E F2 | 	cmp	local07, #11 wz
30970     0C 00 90 AD |  if_e	jmp	#LR__4693
30974     1A 35 E2 F8 | 	getbyte	local08, local08, #0
30978     2E 34 0E F2 | 	cmp	local08, #46 wz
3097c     08 00 90 AD |  if_e	jmp	#LR__4694
30980                 | LR__4693
30980     06 FA 05 F6 | 	mov	result1, #6
30984     30 01 90 FD | 	jmp	#LR__4699
30988                 | LR__4694
30988     08 2E 06 F6 | 	mov	local05, #8
3098c     0B 32 06 F6 | 	mov	local07, #11
30990                 | ' 			i = 8; ni = 11;
30990                 | ' 			continue;
30990     64 FF 9F FD | 	jmp	#LR__4690
30994                 | LR__4695
30994     1A 37 E2 F8 | 	getbyte	local09, local08, #0
30998     80 36 16 F2 | 	cmp	local09, #128 wc
3099c     1A 35 E2 38 |  if_ae	getbyte	local08, local08, #0
309a0     7F 34 06 35 |  if_ae	and	local08, #127
309a4     F6 34 02 31 |  if_ae	add	local08, ptr__fatfs_cc_dat__
309a8     1A 35 C2 3A |  if_ae	rdbyte	local08, local08
309ac     1A 13 02 F6 | 	mov	arg01, local08
309b0     07 12 4E F7 | 	zerox	arg01, #7 wz
309b4     00 FA 05 56 |  if_ne	mov	result1, #0
309b8                 | ' 
309b8                 | ' 	return 0;
309b8     00 FA 05 A6 |  if_e	mov	result1, #0
309bc     00 FA 0D F2 | 	cmp	result1, #0 wz
309c0     5C 00 90 AD |  if_e	jmp	#LR__4696
309c4     18 37 02 F6 | 	mov	local09, local06
309c8     14 37 02 F1 | 	add	local09, local02
309cc     1B 3D C2 FA | 	rdbyte	local12, local09
309d0     1E 13 02 F6 | 	mov	arg01, local12
309d4     01 30 06 F1 | 	add	local06, #1
309d8     07 12 4E F7 | 	zerox	arg01, #7 wz
309dc     00 FA 05 56 |  if_ne	mov	result1, #0
309e0                 | ' 
309e0                 | ' 	return 0;
309e0     00 FA 05 A6 |  if_e	mov	result1, #0
309e4     00 FA 0D F2 | 	cmp	result1, #0 wz
309e8     19 39 02 56 |  if_ne	mov	local10, local07
309ec     01 38 86 51 |  if_ne	sub	local10, #1
309f0     1C 2F 12 52 |  if_ne	cmp	local05, local10 wc
309f4     06 FA 05 B6 |  if_nc_or_z	mov	result1, #6
309f8     BC 00 90 BD |  if_nc_or_z	jmp	#LR__4699
309fc     17 37 02 F6 | 	mov	local09, local05
30a00     15 37 02 F1 | 	add	local09, local03
30a04     1B 35 42 FC | 	wrbyte	local08, local09
30a08     01 2E 06 F1 | 	add	local05, #1
30a0c     17 37 02 F6 | 	mov	local09, local05
30a10     15 37 02 F1 | 	add	local09, local03
30a14     1B 3D 42 FC | 	wrbyte	local12, local09
30a18     01 2E 06 F1 | 	add	local05, #1
30a1c     D8 FE 9F FD | 	jmp	#LR__4690
30a20                 | LR__4696
30a20     B0 01 00 FF 
30a24     08 13 06 F6 | 	mov	arg01, ##@LR__5312
30a28     1A 15 E2 F8 | 	getbyte	arg02, local08, #0
30a2c     C0 E1 BF FD | 	call	#_fatfs_cc_strchr
30a30     00 FA 0D F2 | 	cmp	result1, #0 wz
30a34     06 FA 05 56 |  if_ne	mov	result1, #6
30a38     7C 00 90 5D |  if_ne	jmp	#LR__4699
30a3c     1A 37 E2 F8 | 	getbyte	local09, local08, #0
30a40     61 36 16 F2 | 	cmp	local09, #97 wc
30a44     10 00 90 CD |  if_b	jmp	#LR__4697
30a48     1A 39 E2 F8 | 	getbyte	local10, local08, #0
30a4c     7B 38 16 F2 | 	cmp	local10, #123 wc
30a50     1A 35 E2 C8 |  if_b	getbyte	local08, local08, #0
30a54     20 34 86 C1 |  if_b	sub	local08, #32
30a58                 | LR__4697
30a58     17 37 02 F6 | 	mov	local09, local05
30a5c     15 37 02 F1 | 	add	local09, local03
30a60     1B 35 42 FC | 	wrbyte	local08, local09
30a64     01 2E 06 F1 | 	add	local05, #1
30a68     8C FE 9F FD | 	jmp	#LR__4690
30a6c                 | LR__4698
30a6c     18 3F 02 F6 | 	mov	local13, local06
30a70     14 3F 02 F1 | 	add	local13, local02
30a74     13 3F 62 FC | 	wrlong	local13, local01
30a78     00 2E 0E F2 | 	cmp	local05, #0 wz
30a7c     06 FA 05 A6 |  if_e	mov	result1, #6
30a80     34 00 90 AD |  if_e	jmp	#LR__4699
30a84     15 41 C2 FA | 	rdbyte	local14, local03
30a88     E5 40 0E F2 | 	cmp	local14, #229 wz
30a8c     15 0B 48 AC |  if_e	wrbyte	#5, local03
30a90     1A 39 E2 F8 | 	getbyte	local10, local08, #0
30a94     21 38 16 F2 | 	cmp	local10, #33 wc
30a98     14 31 02 31 |  if_ae	add	local06, local02
30a9c     18 3F C2 3A |  if_ae	rdbyte	local13, local06
30aa0     21 3E 16 32 |  if_ae	cmp	local13, #33 wc
30aa4     04 40 06 C6 |  if_b	mov	local14, #4
30aa8     00 40 06 36 |  if_ae	mov	local14, #0
30aac     0B 2A 06 F1 | 	add	local03, #11
30ab0     15 41 42 FC | 	wrbyte	local14, local03
30ab4                 | ' 	sfn[ 11 ] = (c <= ' ' || p[si] <= ' ') ?  0x04  : 0;
30ab4                 | ' 
30ab4                 | ' 	return FR_OK;
30ab4     00 FA 05 F6 | 	mov	result1, #0
30ab8                 | LR__4699
30ab8     A7 F0 03 F6 | 	mov	ptra, fp
30abc     B2 00 A0 FD | 	call	#popregs_
30ac0                 | _fatfs_cc_create_name_ret
30ac0     2D 00 64 FD | 	ret
30ac4                 | 
30ac4                 | _fatfs_cc_follow_path
30ac4     02 4A 05 F6 | 	mov	COUNT_, #2
30ac8     A8 00 A0 FD | 	call	#pushregs_
30acc     18 F0 07 F1 | 	add	ptra, #24
30ad0     04 4E 05 F1 | 	add	fp, #4
30ad4     A7 12 62 FC | 	wrlong	arg01, fp
30ad8     04 4E 05 F1 | 	add	fp, #4
30adc     A7 14 62 FC | 	wrlong	arg02, fp
30ae0     04 4E 85 F1 | 	sub	fp, #4
30ae4     A7 FA 01 FB | 	rdlong	result1, fp
30ae8     FD 26 02 FB | 	rdlong	local01, result1
30aec     10 4E 05 F1 | 	add	fp, #16
30af0     A7 26 62 FC | 	wrlong	local01, fp
30af4     14 4E 85 F1 | 	sub	fp, #20
30af8     97 24 48 FB | 	callpa	#(@LR__4702-@LR__4700)>>2,fcache_load_ptr_
30afc                 | ' )
30afc                 | ' {
30afc                 | ' 	FRESULT res;
30afc                 | ' 	BYTE ns;
30afc                 | ' 	FATFS *fs = dp->obj.fs;
30afc                 | ' #line 3034 "ff.c"
30afc                 | ' 	{
30afc                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
30afc                 | LR__4700
30afc     08 4E 05 F1 | 	add	fp, #8
30b00     A7 26 02 FB | 	rdlong	local01, fp
30b04     08 4E 85 F1 | 	sub	fp, #8
30b08     13 27 C2 FA | 	rdbyte	local01, local01
30b0c     2F 26 0E F2 | 	cmp	local01, #47 wz
30b10     18 00 90 AD |  if_e	jmp	#LR__4701
30b14     08 4E 05 F1 | 	add	fp, #8
30b18     A7 26 02 FB | 	rdlong	local01, fp
30b1c     08 4E 85 F1 | 	sub	fp, #8
30b20     13 27 C2 FA | 	rdbyte	local01, local01
30b24     5C 26 0E F2 | 	cmp	local01, #92 wz
30b28     18 00 90 5D |  if_ne	jmp	#LR__4703
30b2c                 | LR__4701
30b2c     08 4E 05 F1 | 	add	fp, #8
30b30     A7 26 02 FB | 	rdlong	local01, fp
30b34     01 26 06 F1 | 	add	local01, #1
30b38     A7 26 62 FC | 	wrlong	local01, fp
30b3c     08 4E 85 F1 | 	sub	fp, #8
30b40     B8 FF 9F FD | 	jmp	#LR__4700
30b44                 | LR__4702
30b44                 | LR__4703
30b44     04 4E 05 F1 | 	add	fp, #4
30b48     A7 26 02 FB | 	rdlong	local01, fp
30b4c     08 26 06 F1 | 	add	local01, #8
30b50     13 01 68 FC | 	wrlong	#0, local01
30b54     04 4E 05 F1 | 	add	fp, #4
30b58     A7 26 02 FB | 	rdlong	local01, fp
30b5c     08 4E 85 F1 | 	sub	fp, #8
30b60     13 27 C2 FA | 	rdbyte	local01, local01
30b64     20 26 16 F2 | 	cmp	local01, #32 wc
30b68     30 00 90 3D |  if_ae	jmp	#LR__4704
30b6c     04 4E 05 F1 | 	add	fp, #4
30b70     A7 26 02 FB | 	rdlong	local01, fp
30b74     2B 26 06 F1 | 	add	local01, #43
30b78     13 01 49 FC | 	wrbyte	#128, local01
30b7c     A7 12 02 FB | 	rdlong	arg01, fp
30b80     04 4E 85 F1 | 	sub	fp, #4
30b84     00 14 06 F6 | 	mov	arg02, #0
30b88     68 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
30b8c     0C 4E 05 F1 | 	add	fp, #12
30b90     A7 FA 61 FC | 	wrlong	result1, fp
30b94     0C 4E 85 F1 | 	sub	fp, #12
30b98     1C 01 90 FD | 	jmp	#LR__4708
30b9c                 | LR__4704
30b9c                 | ' 		for (;;) {
30b9c                 | LR__4705
30b9c     04 4E 05 F1 | 	add	fp, #4
30ba0     A7 12 02 FB | 	rdlong	arg01, fp
30ba4     04 4E 05 F1 | 	add	fp, #4
30ba8     A7 14 02 F6 | 	mov	arg02, fp
30bac     08 4E 85 F1 | 	sub	fp, #8
30bb0     0C FD BF FD | 	call	#_fatfs_cc_create_name
30bb4     0C 4E 05 F1 | 	add	fp, #12
30bb8     A7 FA 61 FC | 	wrlong	result1, fp
30bbc     00 FA 4D F2 | 	cmps	result1, #0 wz
30bc0     0C 4E 85 F1 | 	sub	fp, #12
30bc4     F0 00 90 5D |  if_ne	jmp	#LR__4707
30bc8     04 4E 05 F1 | 	add	fp, #4
30bcc     A7 12 02 FB | 	rdlong	arg01, fp
30bd0     04 4E 85 F1 | 	sub	fp, #4
30bd4     40 FA BF FD | 	call	#_fatfs_cc_dir_find
30bd8     0C 4E 05 F1 | 	add	fp, #12
30bdc     A7 FA 61 FC | 	wrlong	result1, fp
30be0     08 4E 85 F1 | 	sub	fp, #8
30be4     A7 26 02 FB | 	rdlong	local01, fp
30be8     2B 26 06 F1 | 	add	local01, #43
30bec     13 27 C2 FA | 	rdbyte	local01, local01
30bf0     0C 4E 05 F1 | 	add	fp, #12
30bf4     A7 26 42 FC | 	wrbyte	local01, fp
30bf8     04 4E 85 F1 | 	sub	fp, #4
30bfc     A7 26 0A FB | 	rdlong	local01, fp wz
30c00     0C 4E 85 F1 | 	sub	fp, #12
30c04     34 00 90 AD |  if_e	jmp	#LR__4706
30c08     0C 4E 05 F1 | 	add	fp, #12
30c0c     A7 26 02 FB | 	rdlong	local01, fp
30c10     0C 4E 85 F1 | 	sub	fp, #12
30c14     04 26 0E F2 | 	cmp	local01, #4 wz
30c18     9C 00 90 5D |  if_ne	jmp	#LR__4707
30c1c     10 4E 05 F1 | 	add	fp, #16
30c20     A7 26 C2 FA | 	rdbyte	local01, fp
30c24     10 4E 85 F1 | 	sub	fp, #16
30c28     04 26 CE F7 | 	test	local01, #4 wz
30c2c     0C 4E 05 A1 |  if_e	add	fp, #12
30c30     A7 0A 68 AC |  if_e	wrlong	#5, fp
30c34     0C 4E 85 A1 |  if_e	sub	fp, #12
30c38                 | ' 					}
30c38                 | ' 				}
30c38                 | ' 				break;
30c38     7C 00 90 FD | 	jmp	#LR__4707
30c3c                 | LR__4706
30c3c     10 4E 05 F1 | 	add	fp, #16
30c40     A7 26 C2 FA | 	rdbyte	local01, fp
30c44     10 4E 85 F1 | 	sub	fp, #16
30c48     04 26 CE F7 | 	test	local01, #4 wz
30c4c     68 00 90 5D |  if_ne	jmp	#LR__4707
30c50     04 4E 05 F1 | 	add	fp, #4
30c54     A7 26 02 FB | 	rdlong	local01, fp
30c58     04 4E 85 F1 | 	sub	fp, #4
30c5c     06 26 06 F1 | 	add	local01, #6
30c60     13 27 C2 FA | 	rdbyte	local01, local01
30c64     10 26 CE F7 | 	test	local01, #16 wz
30c68     0C 4E 05 A1 |  if_e	add	fp, #12
30c6c     A7 0A 68 AC |  if_e	wrlong	#5, fp
30c70     0C 4E 85 A1 |  if_e	sub	fp, #12
30c74                 | ' 				res = FR_NO_PATH; break;
30c74     40 00 90 AD |  if_e	jmp	#LR__4707
30c78     04 4E 05 F1 | 	add	fp, #4
30c7c     A7 28 02 FB | 	rdlong	local02, fp
30c80     14 27 02 F6 | 	mov	local01, local02
30c84     10 4E 05 F1 | 	add	fp, #16
30c88     A7 14 02 FB | 	rdlong	arg02, fp
30c8c     0A 13 02 F6 | 	mov	arg01, arg02
30c90     30 14 06 F1 | 	add	arg02, #48
30c94     14 4E 85 F1 | 	sub	fp, #20
30c98     10 28 06 F1 | 	add	local02, #16
30c9c     14 29 02 FB | 	rdlong	local02, local02
30ca0     FF 29 06 F5 | 	and	local02, #511
30ca4     14 15 02 F1 | 	add	arg02, local02
30ca8     1C F8 BF FD | 	call	#_fatfs_cc_ld_clust
30cac     08 26 06 F1 | 	add	local01, #8
30cb0     13 FB 61 FC | 	wrlong	result1, local01
30cb4     E4 FE 9F FD | 	jmp	#LR__4705
30cb8                 | LR__4707
30cb8                 | LR__4708
30cb8                 | ' 			}
30cb8                 | ' #line 3090 "ff.c"
30cb8                 | ' 			{
30cb8                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
30cb8                 | ' 			}
30cb8                 | ' 		}
30cb8                 | ' 	}
30cb8                 | ' 
30cb8                 | ' 	return res;
30cb8     0C 4E 05 F1 | 	add	fp, #12
30cbc     A7 FA 01 FB | 	rdlong	result1, fp
30cc0     0C 4E 85 F1 | 	sub	fp, #12
30cc4     A7 F0 03 F6 | 	mov	ptra, fp
30cc8     B2 00 A0 FD | 	call	#popregs_
30ccc                 | _fatfs_cc_follow_path_ret
30ccc     2D 00 64 FD | 	ret
30cd0                 | 
30cd0                 | _fatfs_cc_get_ldnumber
30cd0     01 00 66 F6 | 	neg	_var01, #1
30cd4     09 03 0A FB | 	rdlong	_var02, arg01 wz
30cd8     01 05 02 F6 | 	mov	_var03, _var02
30cdc     01 FA 65 A6 |  if_e	neg	result1, #1
30ce0     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
30ce4     97 10 48 FB | 	callpa	#(@LR__4711-@LR__4710)>>2,fcache_load_ptr_
30ce8                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 0 ? ' ' : '!'))  && tc != ':');
30ce8                 | LR__4710
30ce8     02 07 C2 FA | 	rdbyte	_var04, _var03
30cec     03 FB E1 F8 | 	getbyte	result1, _var04, #0
30cf0     21 FA 15 F2 | 	cmp	result1, #33 wc
30cf4     01 04 06 F1 | 	add	_var03, #1
30cf8     03 09 02 36 |  if_ae	mov	_var05, _var04
30cfc     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
30d00     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
30d04     E0 FF 9F 1D |  if_a	jmp	#LR__4710
30d08                 | LR__4711
30d08     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
30d0c     3A 06 0E F2 | 	cmp	_var04, #58 wz
30d10     40 00 90 5D |  if_ne	jmp	#LR__4713
30d14     01 0A 06 F6 | 	mov	_var06, #1
30d18     01 09 C2 FA | 	rdbyte	_var05, _var02
30d1c     30 08 16 F2 | 	cmp	_var05, #48 wc
30d20     1C 00 90 CD |  if_b	jmp	#LR__4712
30d24     01 09 C2 FA | 	rdbyte	_var05, _var02
30d28     3A 08 16 F2 | 	cmp	_var05, #58 wc
30d2c     01 0D 02 C6 |  if_b	mov	_var07, _var02
30d30     02 0C 06 C1 |  if_b	add	_var07, #2
30d34     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
30d38     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
30d3c     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
30d40                 | LR__4712
30d40     01 0A 56 F2 | 	cmps	_var06, #1 wc
30d44     05 01 02 C6 |  if_b	mov	_var01, _var06
30d48     09 05 62 CC |  if_b	wrlong	_var03, arg01
30d4c                 | ' 			vol = i;
30d4c                 | ' 			*path = tt;
30d4c                 | ' 		}
30d4c                 | ' 		return vol;
30d4c     00 FB 01 F6 | 	mov	result1, _var01
30d50     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
30d54                 | LR__4713
30d54                 | ' 	}
30d54                 | ' #line 3170 "ff.c"
30d54                 | ' 	vol = 0;
30d54                 | ' 
30d54                 | ' 	return vol;
30d54     00 FA 05 F6 | 	mov	result1, #0
30d58                 | _fatfs_cc_get_ldnumber_ret
30d58     2D 00 64 FD | 	ret
30d5c                 | 
30d5c                 | _fatfs_cc_check_fs
30d5c     04 4A 05 F6 | 	mov	COUNT_, #4
30d60     A8 00 A0 FD | 	call	#pushregs_
30d64     09 27 02 F6 | 	mov	local01, arg01
30d68     03 26 06 F1 | 	add	local01, #3
30d6c     13 01 48 FC | 	wrbyte	#0, local01
30d70     29 26 06 F1 | 	add	local01, #41
30d74     FF FF FF FF 
30d78     13 FF 6B FC | 	wrlong	##-1, local01
30d7c     2C 26 86 F1 | 	sub	local01, #44
30d80     13 13 02 F6 | 	mov	arg01, local01
30d84     08 EA BF FD | 	call	#_fatfs_cc_move_window
30d88     00 FA 0D F2 | 	cmp	result1, #0 wz
30d8c     04 FA 05 56 |  if_ne	mov	result1, #4
30d90     94 01 90 5D |  if_ne	jmp	#LR__4724
30d94     30 26 06 F1 | 	add	local01, #48
30d98     13 13 02 F6 | 	mov	arg01, local01
30d9c     FE 13 06 F1 | 	add	arg01, #510
30da0                 | ' {
30da0                 | ' 
30da0                 | ' 	return *((WORD*)ptr);
30da0     09 29 E2 FA | 	rdword	local02, arg01
30da4     13 2B C2 FA | 	rdbyte	local03, local01
30da8     30 26 86 F1 | 	sub	local01, #48
30dac     15 2D E2 F8 | 	getbyte	local04, local03, #0
30db0     EB 2C 0E F2 | 	cmp	local04, #235 wz
30db4     15 17 02 56 |  if_ne	mov	arg03, local03
30db8     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
30dbc     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
30dc0     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
30dc4     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
30dc8     44 01 90 5D |  if_ne	jmp	#LR__4723
30dcc     14 2D 32 F9 | 	getword	local04, local02, #0
30dd0     55 00 00 FF 
30dd4     55 2C 0E F2 | 	cmp	local04, ##43605 wz
30dd8     2C 00 90 5D |  if_ne	jmp	#LR__4720
30ddc     30 26 06 F1 | 	add	local01, #48
30de0     13 13 02 F6 | 	mov	arg01, local01
30de4     30 26 86 F1 | 	sub	local01, #48
30de8     52 12 06 F1 | 	add	arg01, #82
30dec     B0 01 00 FF 
30df0     17 15 06 F6 | 	mov	arg02, ##@LR__5313
30df4     08 16 06 F6 | 	mov	arg03, #8
30df8     28 DD BF FD | 	call	#_fatfs_cc_memcmp
30dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
30e00                 | ' 			return 0;
30e00     00 FA 05 A6 |  if_e	mov	result1, #0
30e04     20 01 90 AD |  if_e	jmp	#LR__4724
30e08                 | LR__4720
30e08     30 26 06 F1 | 	add	local01, #48
30e0c     13 13 02 F6 | 	mov	arg01, local01
30e10     0B 12 06 F1 | 	add	arg01, #11
30e14                 | ' {
30e14                 | ' 
30e14                 | ' 	return *((WORD*)ptr);
30e14     09 FB E1 FA | 	rdword	result1, arg01
30e18     0D 26 06 F1 | 	add	local01, #13
30e1c     13 2B C2 FA | 	rdbyte	local03, local01
30e20     3D 26 86 F1 | 	sub	local01, #61
30e24     FD 2C 32 F9 | 	getword	local04, result1, #0
30e28     FD 14 32 F9 | 	getword	arg02, result1, #0
30e2c     01 14 86 F1 | 	sub	arg02, #1
30e30     0A 2D CA F7 | 	test	local04, arg02 wz
30e34     D8 00 90 5D |  if_ne	jmp	#LR__4722
30e38     FD 14 32 F9 | 	getword	arg02, result1, #0
30e3c     01 00 00 FF 
30e40     00 14 16 F2 | 	cmp	arg02, ##512 wc
30e44     C8 00 90 CD |  if_b	jmp	#LR__4722
30e48     FD 14 32 F9 | 	getword	arg02, result1, #0
30e4c     01 00 00 FF 
30e50     01 14 16 F2 | 	cmp	arg02, ##513 wc
30e54     B8 00 90 3D |  if_ae	jmp	#LR__4722
30e58     15 13 02 F6 | 	mov	arg01, local03
30e5c     07 12 4E F7 | 	zerox	arg01, #7 wz
30e60     AC 00 90 AD |  if_e	jmp	#LR__4722
30e64     15 13 E2 F8 | 	getbyte	arg01, local03, #0
30e68     15 2B E2 F8 | 	getbyte	local03, local03, #0
30e6c     01 2A 86 F1 | 	sub	local03, #1
30e70     15 13 CA F7 | 	test	arg01, local03 wz
30e74     98 00 90 5D |  if_ne	jmp	#LR__4722
30e78     30 26 06 F1 | 	add	local01, #48
30e7c     13 13 02 F6 | 	mov	arg01, local01
30e80     30 26 86 F1 | 	sub	local01, #48
30e84     0E 12 06 F1 | 	add	arg01, #14
30e88                 | ' {
30e88                 | ' 
30e88                 | ' 	return *((WORD*)ptr);
30e88     09 FB E9 FA | 	rdword	result1, arg01 wz
30e8c     80 00 90 AD |  if_e	jmp	#LR__4722
30e90     40 26 06 F1 | 	add	local01, #64
30e94     13 13 C2 FA | 	rdbyte	arg01, local01
30e98     40 26 86 F1 | 	sub	local01, #64
30e9c     01 12 86 F1 | 	sub	arg01, #1
30ea0     02 12 16 F2 | 	cmp	arg01, #2 wc
30ea4     68 00 90 3D |  if_ae	jmp	#LR__4722
30ea8     30 26 06 F1 | 	add	local01, #48
30eac     13 13 02 F6 | 	mov	arg01, local01
30eb0     30 26 86 F1 | 	sub	local01, #48
30eb4     11 12 06 F1 | 	add	arg01, #17
30eb8                 | ' {
30eb8                 | ' 
30eb8                 | ' 	return *((WORD*)ptr);
30eb8     09 FB E9 FA | 	rdword	result1, arg01 wz
30ebc     50 00 90 AD |  if_e	jmp	#LR__4722
30ec0     30 26 06 F1 | 	add	local01, #48
30ec4     13 13 02 F6 | 	mov	arg01, local01
30ec8     30 26 86 F1 | 	sub	local01, #48
30ecc     13 12 06 F1 | 	add	arg01, #19
30ed0                 | ' {
30ed0                 | ' 
30ed0                 | ' 	return *((WORD*)ptr);
30ed0     09 FB E1 FA | 	rdword	result1, arg01
30ed4     FD 2A 32 F9 | 	getword	local03, result1, #0
30ed8     80 2A 16 F2 | 	cmp	local03, #128 wc
30edc     20 00 90 3D |  if_ae	jmp	#LR__4721
30ee0     30 26 06 F1 | 	add	local01, #48
30ee4     13 13 02 F6 | 	mov	arg01, local01
30ee8     30 26 86 F1 | 	sub	local01, #48
30eec     20 12 06 F1 | 	add	arg01, #32
30ef0                 | ' {
30ef0                 | ' 
30ef0                 | ' 	return *((DWORD*)ptr);
30ef0     09 FB 01 FB | 	rdlong	result1, arg01
30ef4     80 00 00 FF 
30ef8     00 FA 15 F2 | 	cmp	result1, ##65536 wc
30efc     10 00 90 CD |  if_b	jmp	#LR__4722
30f00                 | LR__4721
30f00     46 26 06 F1 | 	add	local01, #70
30f04                 | ' {
30f04                 | ' 
30f04                 | ' 	return *((WORD*)ptr);
30f04     13 FB E9 FA | 	rdword	result1, local01 wz
30f08                 | ' 			&& b != 0 && (b & (b - 1)) == 0
30f08                 | ' 			&& ld_word(fs->win +  14 ) != 0
30f08                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
30f08                 | ' 			&& ld_word(fs->win +  17 ) != 0
30f08                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
30f08                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
30f08                 | ' 				return 0;
30f08     00 FA 05 56 |  if_ne	mov	result1, #0
30f0c     18 00 90 5D |  if_ne	jmp	#LR__4724
30f10                 | LR__4722
30f10                 | LR__4723
30f10                 | ' 		}
30f10                 | ' 	}
30f10                 | ' 	return sign == 0xAA55 ? 2 : 3;
30f10     14 2B 32 F9 | 	getword	local03, local02, #0
30f14     55 00 00 FF 
30f18     55 2A 0E F2 | 	cmp	local03, ##43605 wz
30f1c     02 2C 06 A6 |  if_e	mov	local04, #2
30f20     03 2C 06 56 |  if_ne	mov	local04, #3
30f24     16 FB 01 F6 | 	mov	result1, local04
30f28                 | LR__4724
30f28     A7 F0 03 F6 | 	mov	ptra, fp
30f2c     B2 00 A0 FD | 	call	#popregs_
30f30                 | _fatfs_cc_check_fs_ret
30f30     2D 00 64 FD | 	ret
30f34                 | 
30f34                 | _fatfs_cc_find_volume
30f34     05 4A 05 F6 | 	mov	COUNT_, #5
30f38     A8 00 A0 FD | 	call	#pushregs_
30f3c     24 F0 07 F1 | 	add	ptra, #36
30f40     09 27 02 F6 | 	mov	local01, arg01
30f44     0A 29 02 F6 | 	mov	local02, arg02
30f48     13 13 02 F6 | 	mov	arg01, local01
30f4c     00 14 06 F6 | 	mov	arg02, #0
30f50     08 FE BF FD | 	call	#_fatfs_cc_check_fs
30f54     02 FA 0D F2 | 	cmp	result1, #2 wz
30f58     0C 00 90 AD |  if_e	jmp	#LR__4730
30f5c     03 FA 15 F2 | 	cmp	result1, #3 wc
30f60     00 28 0E C2 |  if_b	cmp	local02, #0 wz
30f64     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4738
30f68                 | LR__4730
30f68                 | ' 	for (i = 0; i < 4; i++) {
30f68     00 2A 06 F6 | 	mov	local03, #0
30f6c     97 26 48 FB | 	callpa	#(@LR__4732-@LR__4731)>>2,fcache_load_ptr_
30f70                 | LR__4731
30f70     04 2A 16 F2 | 	cmp	local03, #4 wc
30f74     44 00 90 3D |  if_ae	jmp	#LR__4733
30f78     15 2D 02 F6 | 	mov	local04, local03
30f7c     02 2C 66 F0 | 	shl	local04, #2
30f80     14 4E 05 F1 | 	add	fp, #20
30f84     A7 2C 02 F1 | 	add	local04, fp
30f88     30 26 06 F1 | 	add	local01, #48
30f8c     13 13 02 F6 | 	mov	arg01, local01
30f90     30 26 86 F1 | 	sub	local01, #48
30f94     BE 13 06 F1 | 	add	arg01, #446
30f98     15 15 02 F6 | 	mov	arg02, local03
30f9c     04 14 66 F0 | 	shl	arg02, #4
30fa0     0A 13 02 F1 | 	add	arg01, arg02
30fa4     08 12 06 F1 | 	add	arg01, #8
30fa8                 | ' {
30fa8                 | ' 
30fa8                 | ' 	return *((DWORD*)ptr);
30fa8     09 FB 01 FB | 	rdlong	result1, arg01
30fac     14 4E 85 F1 | 	sub	fp, #20
30fb0     16 FB 61 FC | 	wrlong	result1, local04
30fb4     01 2A 06 F1 | 	add	local03, #1
30fb8     B4 FF 9F FD | 	jmp	#LR__4731
30fbc                 | LR__4732
30fbc                 | LR__4733
30fbc     00 28 0E F2 | 	cmp	local02, #0 wz
30fc0     14 2D 02 56 |  if_ne	mov	local04, local02
30fc4     01 2C 86 51 |  if_ne	sub	local04, #1
30fc8     00 2C 06 A6 |  if_e	mov	local04, #0
30fcc     16 2B 02 F6 | 	mov	local03, local04
30fd0                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
30fd0                 | ' 	}
30fd0                 | ' 	i = part ? part - 1 : 0;
30fd0                 | ' 	do {
30fd0                 | LR__4734
30fd0     15 2D 02 F6 | 	mov	local04, local03
30fd4     02 2C 66 F0 | 	shl	local04, #2
30fd8     14 4E 05 F1 | 	add	fp, #20
30fdc     A7 2C 02 F1 | 	add	local04, fp
30fe0     16 2D 0A FB | 	rdlong	local04, local04 wz
30fe4     14 4E 85 F1 | 	sub	fp, #20
30fe8     28 00 90 AD |  if_e	jmp	#LR__4735
30fec     15 2D 02 F6 | 	mov	local04, local03
30ff0     02 2C 66 F0 | 	shl	local04, #2
30ff4     14 4E 05 F1 | 	add	fp, #20
30ff8     A7 2C 02 F1 | 	add	local04, fp
30ffc     16 15 02 FB | 	rdlong	arg02, local04
31000     13 13 02 F6 | 	mov	arg01, local01
31004     14 4E 85 F1 | 	sub	fp, #20
31008     50 FD BF FD | 	call	#_fatfs_cc_check_fs
3100c     FD 2C 02 F6 | 	mov	local04, result1
31010     04 00 90 FD | 	jmp	#LR__4736
31014                 | LR__4735
31014     03 2C 06 F6 | 	mov	local04, #3
31018                 | LR__4736
31018     16 2F 02 F6 | 	mov	local05, local04
3101c     00 28 0E F2 | 	cmp	local02, #0 wz
31020     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
31024     0C 00 90 8D |  if_c_and_z	jmp	#LR__4737
31028     01 2A 06 A1 |  if_e	add	local03, #1
3102c     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
31030     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4734
31034                 | LR__4737
31034                 | ' 	return fmt;
31034     17 FB 01 F6 | 	mov	result1, local05
31038                 | LR__4738
31038     A7 F0 03 F6 | 	mov	ptra, fp
3103c     B2 00 A0 FD | 	call	#popregs_
31040                 | _fatfs_cc_find_volume_ret
31040     2D 00 64 FD | 	ret
31044                 | 
31044                 | _fatfs_cc_mount_volume
31044     0B 4A 05 F6 | 	mov	COUNT_, #11
31048     A8 00 A0 FD | 	call	#pushregs_
3104c     0A 27 02 F6 | 	mov	local01, arg02
31050     0B 29 02 F6 | 	mov	local02, arg03
31054     13 01 68 FC | 	wrlong	#0, local01
31058     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
3105c     FD 2A 02 F6 | 	mov	local03, result1
31060     00 2A 56 F2 | 	cmps	local03, #0 wc
31064     0B FA 05 C6 |  if_b	mov	result1, #11
31068     28 05 90 CD |  if_b	jmp	#LR__4750
3106c     15 17 02 F6 | 	mov	arg03, local03
31070     02 16 66 F0 | 	shl	arg03, #2
31074     F2 16 02 F1 | 	add	arg03, objptr
31078     0B 2D 0A FB | 	rdlong	local04, arg03 wz
3107c     0C FA 05 A6 |  if_e	mov	result1, #12
31080     10 05 90 AD |  if_e	jmp	#LR__4750
31084     13 2D 62 FC | 	wrlong	local04, local01
31088     14 29 E2 F8 | 	getbyte	local02, local02, #0
3108c     FE 28 06 F5 | 	and	local02, #254
31090     16 17 CA FA | 	rdbyte	arg03, local04 wz
31094     44 00 90 AD |  if_e	jmp	#LR__4741
31098     01 2C 06 F1 | 	add	local04, #1
3109c     16 13 CA FA | 	rdbyte	arg01, local04 wz
310a0     01 2C 86 F1 | 	sub	local04, #1
310a4     01 FA 05 56 |  if_ne	mov	result1, #1
310a8                 | ' 
310a8                 | ' 	return Stat;
310a8     20 E4 05 A1 |  if_e	add	objptr, #32
310ac     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
310b0     20 E4 85 A1 |  if_e	sub	objptr, #32
310b4     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
310b8     01 16 CE F7 | 	test	arg03, #1 wz
310bc     1C 00 90 5D |  if_ne	jmp	#LR__4740
310c0     00 28 0E F2 | 	cmp	local02, #0 wz
310c4     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
310c8     04 FA CD 57 |  if_ne	test	result1, #4 wz
310cc                 | ' 				return FR_WRITE_PROTECTED;
310cc     0A FA 05 56 |  if_ne	mov	result1, #10
310d0     C0 04 90 5D |  if_ne	jmp	#LR__4750
310d4                 | ' 			}
310d4                 | ' 			return FR_OK;
310d4     00 FA 05 F6 | 	mov	result1, #0
310d8     B8 04 90 FD | 	jmp	#LR__4750
310dc                 | LR__4740
310dc                 | LR__4741
310dc     16 01 48 FC | 	wrbyte	#0, local04
310e0     01 2C 06 F1 | 	add	local04, #1
310e4     16 2B 42 FC | 	wrbyte	local03, local04
310e8     16 13 C2 FA | 	rdbyte	arg01, local04
310ec     01 2C 86 F1 | 	sub	local04, #1
310f0     38 DB BF FD | 	call	#_fatfs_cc_disk_initialize
310f4     FD 16 02 F6 | 	mov	arg03, result1
310f8     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
310fc     01 2E CE F7 | 	test	local05, #1 wz
31100                 | ' 		return FR_NOT_READY;
31100     03 FA 05 56 |  if_ne	mov	result1, #3
31104     8C 04 90 5D |  if_ne	jmp	#LR__4750
31108     00 28 0E F2 | 	cmp	local02, #0 wz
3110c     0B 2F 02 56 |  if_ne	mov	local05, arg03
31110     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
31114     04 2E CE 57 |  if_ne	test	local05, #4 wz
31118                 | ' 		return FR_WRITE_PROTECTED;
31118     0A FA 05 56 |  if_ne	mov	result1, #10
3111c     74 04 90 5D |  if_ne	jmp	#LR__4750
31120     16 13 02 F6 | 	mov	arg01, local04
31124     00 14 06 F6 | 	mov	arg02, #0
31128     08 FE BF FD | 	call	#_fatfs_cc_find_volume
3112c     FD 12 02 F6 | 	mov	arg01, result1
31130     04 12 0E F2 | 	cmp	arg01, #4 wz
31134     01 FA 05 A6 |  if_e	mov	result1, #1
31138     58 04 90 AD |  if_e	jmp	#LR__4750
3113c     02 12 16 F2 | 	cmp	arg01, #2 wc
31140     0D FA 05 36 |  if_ae	mov	result1, #13
31144     4C 04 90 3D |  if_ae	jmp	#LR__4750
31148     2C 2C 06 F1 | 	add	local04, #44
3114c     16 31 02 FB | 	rdlong	local06, local04
31150     04 2C 06 F1 | 	add	local04, #4
31154     16 13 02 F6 | 	mov	arg01, local04
31158     30 2C 86 F1 | 	sub	local04, #48
3115c     0B 12 06 F1 | 	add	arg01, #11
31160                 | ' {
31160                 | ' 
31160                 | ' 	return *((WORD*)ptr);
31160     09 FB E1 FA | 	rdword	result1, arg01
31164     01 00 00 FF 
31168     00 FA 0D F2 | 	cmp	result1, ##512 wz
3116c     0D FA 05 56 |  if_ne	mov	result1, #13
31170     20 04 90 5D |  if_ne	jmp	#LR__4750
31174     30 2C 06 F1 | 	add	local04, #48
31178     16 13 02 F6 | 	mov	arg01, local04
3117c     30 2C 86 F1 | 	sub	local04, #48
31180     16 12 06 F1 | 	add	arg01, #22
31184                 | ' {
31184                 | ' 
31184                 | ' 	return *((WORD*)ptr);
31184     09 FB E1 FA | 	rdword	result1, arg01
31188     FD 32 0A F6 | 	mov	local07, result1 wz
3118c     18 00 90 5D |  if_ne	jmp	#LR__4742
31190     30 2C 06 F1 | 	add	local04, #48
31194     16 13 02 F6 | 	mov	arg01, local04
31198     30 2C 86 F1 | 	sub	local04, #48
3119c     24 12 06 F1 | 	add	arg01, #36
311a0                 | ' {
311a0                 | ' 
311a0                 | ' 	return *((DWORD*)ptr);
311a0     09 FB 01 FB | 	rdlong	result1, arg01
311a4     FD 32 02 F6 | 	mov	local07, result1
311a8                 | LR__4742
311a8     18 2C 06 F1 | 	add	local04, #24
311ac     16 33 62 FC | 	wrlong	local07, local04
311b0     28 2C 06 F1 | 	add	local04, #40
311b4     16 2F C2 FA | 	rdbyte	local05, local04
311b8     3E 2C 86 F1 | 	sub	local04, #62
311bc     16 2F 42 FC | 	wrbyte	local05, local04
311c0     16 2F C2 FA | 	rdbyte	local05, local04
311c4     02 2C 86 F1 | 	sub	local04, #2
311c8     01 2E 0E F2 | 	cmp	local05, #1 wz
311cc     02 2C 06 51 |  if_ne	add	local04, #2
311d0     16 2F C2 5A |  if_ne	rdbyte	local05, local04
311d4     02 2C 86 51 |  if_ne	sub	local04, #2
311d8     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
311dc     0D FA 05 56 |  if_ne	mov	result1, #13
311e0     B0 03 90 5D |  if_ne	jmp	#LR__4750
311e4     02 2C 06 F1 | 	add	local04, #2
311e8     16 2F C2 FA | 	rdbyte	local05, local04
311ec     17 33 02 FD | 	qmul	local07, local05
311f0     3B 2C 06 F1 | 	add	local04, #59
311f4     16 2F C2 FA | 	rdbyte	local05, local04
311f8     33 2C 86 F1 | 	sub	local04, #51
311fc     16 2F 52 FC | 	wrword	local05, local04
31200     16 2F EA FA | 	rdword	local05, local04 wz
31204     0A 2C 86 F1 | 	sub	local04, #10
31208     18 32 62 FD | 	getqx	local07
3120c     20 00 90 AD |  if_e	jmp	#LR__4743
31210     0A 2C 06 F1 | 	add	local04, #10
31214     16 2F E2 FA | 	rdword	local05, local04
31218     17 2B 32 F9 | 	getword	local03, local05, #0
3121c     0A 2C 86 F1 | 	sub	local04, #10
31220     17 2F 32 F9 | 	getword	local05, local05, #0
31224     01 2E 86 F1 | 	sub	local05, #1
31228     17 2B CA F7 | 	test	local03, local05 wz
3122c     08 00 90 AD |  if_e	jmp	#LR__4744
31230                 | LR__4743
31230     0D FA 05 F6 | 	mov	result1, #13
31234     5C 03 90 FD | 	jmp	#LR__4750
31238                 | LR__4744
31238     30 2C 06 F1 | 	add	local04, #48
3123c     16 13 02 F6 | 	mov	arg01, local04
31240     11 12 06 F1 | 	add	arg01, #17
31244                 | ' {
31244                 | ' 
31244                 | ' 	return *((WORD*)ptr);
31244     09 FB E1 FA | 	rdword	result1, arg01
31248     28 2C 86 F1 | 	sub	local04, #40
3124c     16 FB 51 FC | 	wrword	result1, local04
31250     16 2F E2 FA | 	rdword	local05, local04
31254     08 2C 86 F1 | 	sub	local04, #8
31258     17 13 52 F6 | 	abs	arg01, local05 wc
3125c     09 13 42 F8 | 	getnib	arg01, arg01, #0
31260     09 13 8A F6 | 	negc	arg01, arg01 wz
31264     0D FA 05 56 |  if_ne	mov	result1, #13
31268     28 03 90 5D |  if_ne	jmp	#LR__4750
3126c     30 2C 06 F1 | 	add	local04, #48
31270     16 13 02 F6 | 	mov	arg01, local04
31274     30 2C 86 F1 | 	sub	local04, #48
31278     13 12 06 F1 | 	add	arg01, #19
3127c                 | ' {
3127c                 | ' 
3127c                 | ' 	return *((WORD*)ptr);
3127c     09 FB E1 FA | 	rdword	result1, arg01
31280     FD 34 0A F6 | 	mov	local08, result1 wz
31284     30 2C 06 A1 |  if_e	add	local04, #48
31288     16 13 02 A6 |  if_e	mov	arg01, local04
3128c     30 2C 86 A1 |  if_e	sub	local04, #48
31290     20 12 06 A1 |  if_e	add	arg01, #32
31294                 | ' {
31294                 | ' 
31294                 | ' 	return *((DWORD*)ptr);
31294     09 35 02 AB |  if_e	rdlong	local08, arg01
31298     30 2C 06 F1 | 	add	local04, #48
3129c     16 13 02 F6 | 	mov	arg01, local04
312a0     30 2C 86 F1 | 	sub	local04, #48
312a4     0E 12 06 F1 | 	add	arg01, #14
312a8                 | ' {
312a8                 | ' 
312a8                 | ' 	return *((WORD*)ptr);
312a8     09 FB E1 FA | 	rdword	result1, arg01
312ac     FD 12 02 F6 | 	mov	arg01, result1
312b0     09 2F 02 F6 | 	mov	local05, arg01
312b4     0F 2E 4E F7 | 	zerox	local05, #15 wz
312b8     0D FA 05 A6 |  if_e	mov	result1, #13
312bc     D4 02 90 AD |  if_e	jmp	#LR__4750
312c0     09 37 32 F9 | 	getword	local09, arg01, #0
312c4     19 37 02 F1 | 	add	local09, local07
312c8     08 2C 06 F1 | 	add	local04, #8
312cc     16 2F E2 FA | 	rdword	local05, local04
312d0     08 2C 86 F1 | 	sub	local04, #8
312d4     17 2F 52 F6 | 	abs	local05, local05 wc
312d8     04 2E 46 F0 | 	shr	local05, #4
312dc     17 37 82 F3 | 	sumc	local09, local05
312e0     1B 35 12 F2 | 	cmp	local08, local09 wc
312e4     0D FA 05 C6 |  if_b	mov	result1, #13
312e8     A8 02 90 CD |  if_b	jmp	#LR__4750
312ec     1B 35 82 F1 | 	sub	local08, local09
312f0     0A 2C 06 F1 | 	add	local04, #10
312f4     16 2F E2 FA | 	rdword	local05, local04
312f8     17 35 12 FD | 	qdiv	local08, local05
312fc     0A 2C 86 F1 | 	sub	local04, #10
31300     18 2E 62 FD | 	getqx	local05
31304     00 2E 0E F2 | 	cmp	local05, #0 wz
31308     0D FA 05 A6 |  if_e	mov	result1, #13
3130c     84 02 90 AD |  if_e	jmp	#LR__4750
31310     00 38 06 F6 | 	mov	local10, #0
31314     FF FF 07 FF 
31318     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
3131c     03 38 06 C6 |  if_b	mov	local10, #3
31320     7F 00 00 FF 
31324     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
31328     02 38 06 C6 |  if_b	mov	local10, #2
3132c     07 00 00 FF 
31330     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
31334     01 38 06 C6 |  if_b	mov	local10, #1
31338     00 38 0E F2 | 	cmp	local10, #0 wz
3133c     0D FA 05 A6 |  if_e	mov	result1, #13
31340     50 02 90 AD |  if_e	jmp	#LR__4750
31344     02 2E 06 F1 | 	add	local05, #2
31348     14 2C 06 F1 | 	add	local04, #20
3134c     16 2F 62 FC | 	wrlong	local05, local04
31350     08 2C 06 F1 | 	add	local04, #8
31354     16 31 62 FC | 	wrlong	local06, local04
31358     18 2F 02 F6 | 	mov	local05, local06
3135c     09 13 32 F9 | 	getword	arg01, arg01, #0
31360     09 2F 02 F1 | 	add	local05, arg01
31364     04 2C 06 F1 | 	add	local04, #4
31368     16 2F 62 FC | 	wrlong	local05, local04
3136c     18 2F 02 F6 | 	mov	local05, local06
31370     1B 2F 02 F1 | 	add	local05, local09
31374     08 2C 06 F1 | 	add	local04, #8
31378     16 2F 62 FC | 	wrlong	local05, local04
3137c     28 2C 86 F1 | 	sub	local04, #40
31380     03 38 0E F2 | 	cmp	local10, #3 wz
31384     5C 00 90 5D |  if_ne	jmp	#LR__4745
31388     30 2C 06 F1 | 	add	local04, #48
3138c     16 13 02 F6 | 	mov	arg01, local04
31390     30 2C 86 F1 | 	sub	local04, #48
31394     2A 12 06 F1 | 	add	arg01, #42
31398                 | ' {
31398                 | ' 
31398                 | ' 	return *((WORD*)ptr);
31398     09 FB E9 FA | 	rdword	result1, arg01 wz
3139c     0D FA 05 56 |  if_ne	mov	result1, #13
313a0     F0 01 90 5D |  if_ne	jmp	#LR__4750
313a4     08 2C 06 F1 | 	add	local04, #8
313a8     16 2F EA FA | 	rdword	local05, local04 wz
313ac     08 2C 86 F1 | 	sub	local04, #8
313b0     0D FA 05 56 |  if_ne	mov	result1, #13
313b4     DC 01 90 5D |  if_ne	jmp	#LR__4750
313b8     30 2C 06 F1 | 	add	local04, #48
313bc     16 13 02 F6 | 	mov	arg01, local04
313c0     2C 12 06 F1 | 	add	arg01, #44
313c4                 | ' {
313c4                 | ' 
313c4                 | ' 	return *((DWORD*)ptr);
313c4     09 FB 01 FB | 	rdlong	result1, arg01
313c8     0C 2C 86 F1 | 	sub	local04, #12
313cc     16 FB 61 FC | 	wrlong	result1, local04
313d0     10 2C 86 F1 | 	sub	local04, #16
313d4     16 3B 02 FB | 	rdlong	local11, local04
313d8     14 2C 86 F1 | 	sub	local04, #20
313dc     02 3A 66 F0 | 	shl	local11, #2
313e0     6C 00 90 FD | 	jmp	#LR__4747
313e4                 | LR__4745
313e4     08 2C 06 F1 | 	add	local04, #8
313e8     16 2F EA FA | 	rdword	local05, local04 wz
313ec     08 2C 86 F1 | 	sub	local04, #8
313f0     0D FA 05 A6 |  if_e	mov	result1, #13
313f4     9C 01 90 AD |  if_e	jmp	#LR__4750
313f8     20 2C 06 F1 | 	add	local04, #32
313fc     16 2F 02 FB | 	rdlong	local05, local04
31400     19 2F 02 F1 | 	add	local05, local07
31404     04 2C 06 F1 | 	add	local04, #4
31408     16 2F 62 FC | 	wrlong	local05, local04
3140c     24 2C 86 F1 | 	sub	local04, #36
31410     02 38 0E F2 | 	cmp	local10, #2 wz
31414     14 2C 06 A1 |  if_e	add	local04, #20
31418     16 2F 02 AB |  if_e	rdlong	local05, local04
3141c     14 2C 86 A1 |  if_e	sub	local04, #20
31420     01 2E 66 A0 |  if_e	shl	local05, #1
31424     24 00 90 AD |  if_e	jmp	#LR__4746
31428     14 2C 06 F1 | 	add	local04, #20
3142c     16 3B 02 FB | 	rdlong	local11, local04
31430     1D 2F 02 F6 | 	mov	local05, local11
31434     01 2E 66 F0 | 	shl	local05, #1
31438     1D 2F 02 F1 | 	add	local05, local11
3143c     01 2E 46 F0 | 	shr	local05, #1
31440     14 2C 86 F1 | 	sub	local04, #20
31444     01 3A 06 F5 | 	and	local11, #1
31448     1D 2F 02 F1 | 	add	local05, local11
3144c                 | LR__4746
3144c     17 3B 02 F6 | 	mov	local11, local05
31450                 | LR__4747
31450     FF 3B 06 F1 | 	add	local11, #511
31454     09 3A 46 F0 | 	shr	local11, #9
31458     18 2C 06 F1 | 	add	local04, #24
3145c     16 17 02 FB | 	rdlong	arg03, local04
31460     18 2C 86 F1 | 	sub	local04, #24
31464     1D 17 12 F2 | 	cmp	arg03, local11 wc
31468     0D FA 05 C6 |  if_b	mov	result1, #13
3146c     24 01 90 CD |  if_b	jmp	#LR__4750
31470     10 2C 06 F1 | 	add	local04, #16
31474     FF FF FF FF 
31478     16 FF 6B FC | 	wrlong	##-1, local04
3147c     04 2C 86 F1 | 	sub	local04, #4
31480     FF FF FF FF 
31484     16 FF 6B FC | 	wrlong	##-1, local04
31488     08 2C 86 F1 | 	sub	local04, #8
3148c     16 01 49 FC | 	wrbyte	#128, local04
31490     04 2C 86 F1 | 	sub	local04, #4
31494     03 38 0E F2 | 	cmp	local10, #3 wz
31498     D0 00 90 5D |  if_ne	jmp	#LR__4749
3149c     30 2C 06 F1 | 	add	local04, #48
314a0     16 13 02 F6 | 	mov	arg01, local04
314a4     30 2C 86 F1 | 	sub	local04, #48
314a8     30 12 06 F1 | 	add	arg01, #48
314ac                 | ' {
314ac                 | ' 
314ac                 | ' 	return *((WORD*)ptr);
314ac     09 FB E1 FA | 	rdword	result1, arg01
314b0     FD 2E 32 F9 | 	getword	local05, result1, #0
314b4     01 2E 0E F2 | 	cmp	local05, #1 wz
314b8     B0 00 90 5D |  if_ne	jmp	#LR__4749
314bc     01 30 06 F1 | 	add	local06, #1
314c0     16 13 02 F6 | 	mov	arg01, local04
314c4     18 15 02 F6 | 	mov	arg02, local06
314c8     C4 E2 BF FD | 	call	#_fatfs_cc_move_window
314cc     00 FA 0D F2 | 	cmp	result1, #0 wz
314d0     98 00 90 5D |  if_ne	jmp	#LR__4749
314d4     04 2C 06 F1 | 	add	local04, #4
314d8     16 01 48 FC | 	wrbyte	#0, local04
314dc     2C 2C 06 F1 | 	add	local04, #44
314e0     16 13 02 F6 | 	mov	arg01, local04
314e4     30 2C 86 F1 | 	sub	local04, #48
314e8     FE 13 06 F1 | 	add	arg01, #510
314ec                 | ' {
314ec                 | ' 
314ec                 | ' 	return *((WORD*)ptr);
314ec     09 FB E1 FA | 	rdword	result1, arg01
314f0     FD 2E 32 F9 | 	getword	local05, result1, #0
314f4     55 00 00 FF 
314f8     55 2E 0E F2 | 	cmp	local05, ##43605 wz
314fc     30 2C 06 A1 |  if_e	add	local04, #48
31500     16 13 02 A6 |  if_e	mov	arg01, local04
31504     30 2C 86 A1 |  if_e	sub	local04, #48
31508                 | ' {
31508                 | ' 
31508                 | ' 	return *((DWORD*)ptr);
31508     09 FB 01 AB |  if_e	rdlong	result1, arg01
3150c     A9 B0 20 AF 
31510     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
31514     54 00 90 5D |  if_ne	jmp	#LR__4748
31518     30 2C 06 F1 | 	add	local04, #48
3151c     16 13 02 F6 | 	mov	arg01, local04
31520     30 2C 86 F1 | 	sub	local04, #48
31524     E4 13 06 F1 | 	add	arg01, #484
31528                 | ' {
31528                 | ' 
31528                 | ' 	return *((DWORD*)ptr);
31528     09 FB 01 FB | 	rdlong	result1, arg01
3152c     B9 A0 30 FF 
31530     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
31534     34 00 90 5D |  if_ne	jmp	#LR__4748
31538     30 2C 06 F1 | 	add	local04, #48
3153c     16 13 02 F6 | 	mov	arg01, local04
31540     E8 13 06 F1 | 	add	arg01, #488
31544                 | ' {
31544                 | ' 
31544                 | ' 	return *((DWORD*)ptr);
31544     09 FB 01 FB | 	rdlong	result1, arg01
31548     20 2C 86 F1 | 	sub	local04, #32
3154c     16 FB 61 FC | 	wrlong	result1, local04
31550     20 2C 06 F1 | 	add	local04, #32
31554     16 13 02 F6 | 	mov	arg01, local04
31558     EC 13 06 F1 | 	add	arg01, #492
3155c                 | ' {
3155c                 | ' 
3155c                 | ' 	return *((DWORD*)ptr);
3155c     09 FB 01 FB | 	rdlong	result1, arg01
31560     24 2C 86 F1 | 	sub	local04, #36
31564     16 FB 61 FC | 	wrlong	result1, local04
31568     0C 2C 86 F1 | 	sub	local04, #12
3156c                 | LR__4748
3156c                 | LR__4749
3156c     16 39 42 FC | 	wrbyte	local10, local04
31570     04 E4 05 F1 | 	add	objptr, #4
31574     F2 2E E2 FA | 	rdword	local05, objptr
31578     01 2E 06 F1 | 	add	local05, #1
3157c     F2 2E 52 FC | 	wrword	local05, objptr
31580     F2 3A E2 FA | 	rdword	local11, objptr
31584     04 E4 85 F1 | 	sub	objptr, #4
31588     06 2C 06 F1 | 	add	local04, #6
3158c     16 3B 52 FC | 	wrword	local11, local04
31590                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
31590                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
31590                 | ' 			{
31590                 | ' 
31590                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
31590                 | ' 
31590                 | ' 
31590                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
31590                 | ' 
31590                 | ' 			}
31590                 | ' 		}
31590                 | ' 
31590                 | ' 
31590                 | ' 	}
31590                 | ' 
31590                 | ' 	fs->fs_type = (BYTE)fmt;
31590                 | ' 	fs->id = ++Fsid;
31590                 | ' #line 3567 "ff.c"
31590                 | ' 	return FR_OK;
31590     00 FA 05 F6 | 	mov	result1, #0
31594                 | LR__4750
31594     A7 F0 03 F6 | 	mov	ptra, fp
31598     B2 00 A0 FD | 	call	#popregs_
3159c                 | _fatfs_cc_mount_volume_ret
3159c     2D 00 64 FD | 	ret
315a0                 | 
315a0                 | _fatfs_cc_validate
315a0     09 01 0A F6 | 	mov	_var01, arg01 wz
315a4     09 02 06 F6 | 	mov	_var02, #9
315a8     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
315ac     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
315b0     48 00 90 AD |  if_e	jmp	#LR__4760
315b4     04 00 06 F1 | 	add	_var01, #4
315b8     00 07 E2 FA | 	rdword	_var04, _var01
315bc     04 00 86 F1 | 	sub	_var01, #4
315c0     00 13 02 FB | 	rdlong	arg01, _var01
315c4     06 12 06 F1 | 	add	arg01, #6
315c8     09 FB E1 FA | 	rdword	result1, arg01
315cc     FD 06 0A F2 | 	cmp	_var04, result1 wz
315d0     28 00 90 5D |  if_ne	jmp	#LR__4760
315d4     00 07 02 FB | 	rdlong	_var04, _var01
315d8     01 06 06 F1 | 	add	_var04, #1
315dc     03 13 CA FA | 	rdbyte	arg01, _var04 wz
315e0     01 FA 05 56 |  if_ne	mov	result1, #1
315e4                 | ' 
315e4                 | ' 	return Stat;
315e4     20 E4 05 A1 |  if_e	add	objptr, #32
315e8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
315ec     20 E4 85 A1 |  if_e	sub	objptr, #32
315f0     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
315f4     01 04 CE F7 | 	test	_var03, #1 wz
315f8     00 02 06 A6 |  if_e	mov	_var02, #0
315fc                 | LR__4760
315fc     00 02 0E F2 | 	cmp	_var02, #0 wz
31600     00 05 02 AB |  if_e	rdlong	_var03, _var01
31604     00 04 06 56 |  if_ne	mov	_var03, #0
31608     0A 05 62 FC | 	wrlong	_var03, arg02
3160c                 | ' 			res = FR_OK;
3160c                 | ' 		}
3160c                 | ' 
3160c                 | ' 	}
3160c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
3160c                 | ' 	return res;
3160c     01 FB 01 F6 | 	mov	result1, _var02
31610                 | _fatfs_cc_validate_ret
31610     2D 00 64 FD | 	ret
31614                 | 
31614                 | _fatfs_cc_f_mount
31614     01 4A 05 F6 | 	mov	COUNT_, #1
31618     A8 00 A0 FD | 	call	#pushregs_
3161c     20 F0 07 F1 | 	add	ptra, #32
31620     04 4E 05 F1 | 	add	fp, #4
31624     A7 12 62 FC | 	wrlong	arg01, fp
31628     04 4E 05 F1 | 	add	fp, #4
3162c     A7 14 62 FC | 	wrlong	arg02, fp
31630     04 4E 05 F1 | 	add	fp, #4
31634     A7 16 42 FC | 	wrbyte	arg03, fp
31638     04 4E 85 F1 | 	sub	fp, #4
3163c     A7 16 02 FB | 	rdlong	arg03, fp
31640     14 4E 05 F1 | 	add	fp, #20
31644     A7 16 62 FC | 	wrlong	arg03, fp
31648     A7 12 02 F6 | 	mov	arg01, fp
3164c     1C 4E 85 F1 | 	sub	fp, #28
31650     7C F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
31654     14 4E 05 F1 | 	add	fp, #20
31658     A7 FA 61 FC | 	wrlong	result1, fp
3165c     14 4E 85 F1 | 	sub	fp, #20
31660     00 FA 55 F2 | 	cmps	result1, #0 wc
31664     0B FA 05 C6 |  if_b	mov	result1, #11
31668     C0 00 90 CD |  if_b	jmp	#LR__4771
3166c     14 4E 05 F1 | 	add	fp, #20
31670     A7 16 02 FB | 	rdlong	arg03, fp
31674     02 16 66 F0 | 	shl	arg03, #2
31678     F2 16 02 F1 | 	add	arg03, objptr
3167c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
31680     04 4E 85 F1 | 	sub	fp, #4
31684     A7 16 62 FC | 	wrlong	arg03, fp
31688     10 4E 85 F1 | 	sub	fp, #16
3168c     28 00 90 AD |  if_e	jmp	#LR__4770
31690     10 4E 05 F1 | 	add	fp, #16
31694     A7 16 02 FB | 	rdlong	arg03, fp
31698     10 4E 85 F1 | 	sub	fp, #16
3169c     01 16 06 F1 | 	add	arg03, #1
316a0     0B 13 C2 FA | 	rdbyte	arg01, arg03
316a4     AC 43 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
316a8     10 4E 05 F1 | 	add	fp, #16
316ac     A7 16 02 FB | 	rdlong	arg03, fp
316b0     10 4E 85 F1 | 	sub	fp, #16
316b4     0B 01 48 FC | 	wrbyte	#0, arg03
316b8                 | LR__4770
316b8     04 4E 05 F1 | 	add	fp, #4
316bc     A7 26 0A FB | 	rdlong	local01, fp wz
316c0     04 4E 85 F1 | 	sub	fp, #4
316c4     04 4E 05 51 |  if_ne	add	fp, #4
316c8     A7 26 02 5B |  if_ne	rdlong	local01, fp
316cc     04 4E 85 51 |  if_ne	sub	fp, #4
316d0     13 01 48 5C |  if_ne	wrbyte	#0, local01
316d4     14 4E 05 F1 | 	add	fp, #20
316d8     A7 26 02 FB | 	rdlong	local01, fp
316dc     02 26 66 F0 | 	shl	local01, #2
316e0     F2 26 02 F1 | 	add	local01, objptr
316e4     10 4E 85 F1 | 	sub	fp, #16
316e8     A7 16 02 FB | 	rdlong	arg03, fp
316ec     13 17 62 FC | 	wrlong	arg03, local01
316f0     08 4E 05 F1 | 	add	fp, #8
316f4     A7 26 CA FA | 	rdbyte	local01, fp wz
316f8     0C 4E 85 F1 | 	sub	fp, #12
316fc     00 FA 05 A6 |  if_e	mov	result1, #0
31700     28 00 90 AD |  if_e	jmp	#LR__4771
31704     08 4E 05 F1 | 	add	fp, #8
31708     A7 12 02 F6 | 	mov	arg01, fp
3170c     04 4E 85 F1 | 	sub	fp, #4
31710     A7 14 02 F6 | 	mov	arg02, fp
31714     04 4E 85 F1 | 	sub	fp, #4
31718     00 16 06 F6 | 	mov	arg03, #0
3171c     24 F9 BF FD | 	call	#_fatfs_cc_mount_volume
31720     18 4E 05 F1 | 	add	fp, #24
31724     A7 FA 61 FC | 	wrlong	result1, fp
31728                 | ' 
31728                 | ' 	res = mount_volume(&path, &fs, 0);
31728                 | ' 	return res ;
31728     18 4E 85 F1 | 	sub	fp, #24
3172c                 | LR__4771
3172c     A7 F0 03 F6 | 	mov	ptra, fp
31730     B2 00 A0 FD | 	call	#popregs_
31734                 | _fatfs_cc_f_mount_ret
31734     2D 00 64 FD | 	ret
31738                 | 
31738                 | _fatfs_cc_f_open
31738     02 4A 05 F6 | 	mov	COUNT_, #2
3173c     A8 00 A0 FD | 	call	#pushregs_
31740     5C F0 07 F1 | 	add	ptra, #92
31744     04 4E 05 F1 | 	add	fp, #4
31748     A7 12 62 FC | 	wrlong	arg01, fp
3174c     04 4E 05 F1 | 	add	fp, #4
31750     A7 14 62 FC | 	wrlong	arg02, fp
31754     04 4E 05 F1 | 	add	fp, #4
31758     A7 16 42 FC | 	wrbyte	arg03, fp
3175c     08 4E 85 F1 | 	sub	fp, #8
31760     A7 18 0A FB | 	rdlong	arg04, fp wz
31764     04 4E 85 F1 | 	sub	fp, #4
31768     09 FA 05 A6 |  if_e	mov	result1, #9
3176c     98 06 90 AD |  if_e	jmp	#LR__4797
31770     0C 4E 05 F1 | 	add	fp, #12
31774     A7 18 C2 FA | 	rdbyte	arg04, fp
31778     3F 18 06 F5 | 	and	arg04, #63
3177c     A7 18 42 FC | 	wrbyte	arg04, fp
31780     04 4E 85 F1 | 	sub	fp, #4
31784     A7 12 02 F6 | 	mov	arg01, fp
31788     38 4E 05 F1 | 	add	fp, #56
3178c     A7 14 02 F6 | 	mov	arg02, fp
31790     34 4E 85 F1 | 	sub	fp, #52
31794     A7 16 C2 FA | 	rdbyte	arg03, fp
31798     0C 4E 85 F1 | 	sub	fp, #12
3179c     A4 F8 BF FD | 	call	#_fatfs_cc_mount_volume
317a0     10 4E 05 F1 | 	add	fp, #16
317a4     A7 FA 61 FC | 	wrlong	result1, fp
317a8     10 4E 85 F1 | 	sub	fp, #16
317ac     00 FA 0D F2 | 	cmp	result1, #0 wz
317b0     2C 06 90 5D |  if_ne	jmp	#LR__4796
317b4     40 4E 05 F1 | 	add	fp, #64
317b8     A7 18 02 FB | 	rdlong	arg04, fp
317bc     2C 4E 85 F1 | 	sub	fp, #44
317c0     A7 18 62 FC | 	wrlong	arg04, fp
317c4     A7 12 02 F6 | 	mov	arg01, fp
317c8     0C 4E 85 F1 | 	sub	fp, #12
317cc     A7 26 02 FB | 	rdlong	local01, fp
317d0     08 4E 85 F1 | 	sub	fp, #8
317d4     13 15 02 F6 | 	mov	arg02, local01
317d8     E8 F2 BF FD | 	call	#_fatfs_cc_follow_path
317dc     10 4E 05 F1 | 	add	fp, #16
317e0     A7 FA 61 FC | 	wrlong	result1, fp
317e4     10 4E 85 F1 | 	sub	fp, #16
317e8     00 FA 0D F2 | 	cmp	result1, #0 wz
317ec     1C 00 90 5D |  if_ne	jmp	#LR__4780
317f0     3F 4E 05 F1 | 	add	fp, #63
317f4     A7 18 C2 FA | 	rdbyte	arg04, fp
317f8     3F 4E 85 F1 | 	sub	fp, #63
317fc     80 18 CE F7 | 	test	arg04, #128 wz
31800     10 4E 05 51 |  if_ne	add	fp, #16
31804     A7 0C 68 5C |  if_ne	wrlong	#6, fp
31808     10 4E 85 51 |  if_ne	sub	fp, #16
3180c                 | LR__4780
3180c     0C 4E 05 F1 | 	add	fp, #12
31810     A7 18 C2 FA | 	rdbyte	arg04, fp
31814     0C 4E 85 F1 | 	sub	fp, #12
31818     1C 18 CE F7 | 	test	arg04, #28 wz
3181c     F0 01 90 AD |  if_e	jmp	#LR__4785
31820     10 4E 05 F1 | 	add	fp, #16
31824     A7 26 0A FB | 	rdlong	local01, fp wz
31828     10 4E 85 F1 | 	sub	fp, #16
3182c     48 00 90 AD |  if_e	jmp	#LR__4782
31830     10 4E 05 F1 | 	add	fp, #16
31834     A7 18 02 FB | 	rdlong	arg04, fp
31838     10 4E 85 F1 | 	sub	fp, #16
3183c     04 18 0E F2 | 	cmp	arg04, #4 wz
31840     1C 00 90 5D |  if_ne	jmp	#LR__4781
31844     14 4E 05 F1 | 	add	fp, #20
31848     A7 12 02 F6 | 	mov	arg01, fp
3184c     14 4E 85 F1 | 	sub	fp, #20
31850     9C EE BF FD | 	call	#_fatfs_cc_dir_register
31854     10 4E 05 F1 | 	add	fp, #16
31858     A7 FA 61 FC | 	wrlong	result1, fp
3185c     10 4E 85 F1 | 	sub	fp, #16
31860                 | LR__4781
31860     0C 4E 05 F1 | 	add	fp, #12
31864     A7 26 C2 FA | 	rdbyte	local01, fp
31868     08 26 46 F5 | 	or	local01, #8
3186c     A7 26 42 FC | 	wrbyte	local01, fp
31870     0C 4E 85 F1 | 	sub	fp, #12
31874     3C 00 90 FD | 	jmp	#LR__4784
31878                 | LR__4782
31878     1A 4E 05 F1 | 	add	fp, #26
3187c     A7 26 C2 FA | 	rdbyte	local01, fp
31880     1A 4E 85 F1 | 	sub	fp, #26
31884     11 26 CE F7 | 	test	local01, #17 wz
31888     10 4E 05 51 |  if_ne	add	fp, #16
3188c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31890     10 4E 85 51 |  if_ne	sub	fp, #16
31894     1C 00 90 5D |  if_ne	jmp	#LR__4783
31898     0C 4E 05 F1 | 	add	fp, #12
3189c     A7 26 C2 FA | 	rdbyte	local01, fp
318a0     0C 4E 85 F1 | 	sub	fp, #12
318a4     04 26 CE F7 | 	test	local01, #4 wz
318a8     10 4E 05 51 |  if_ne	add	fp, #16
318ac     A7 10 68 5C |  if_ne	wrlong	#8, fp
318b0     10 4E 85 51 |  if_ne	sub	fp, #16
318b4                 | LR__4783
318b4                 | LR__4784
318b4     10 4E 05 F1 | 	add	fp, #16
318b8     A7 26 0A FB | 	rdlong	local01, fp wz
318bc     10 4E 85 F1 | 	sub	fp, #16
318c0     A8 01 90 5D |  if_ne	jmp	#LR__4788
318c4     0C 4E 05 F1 | 	add	fp, #12
318c8     A7 26 C2 FA | 	rdbyte	local01, fp
318cc     0C 4E 85 F1 | 	sub	fp, #12
318d0     08 26 CE F7 | 	test	local01, #8 wz
318d4     94 01 90 AD |  if_e	jmp	#LR__4788
318d8     AC 2E B0 FD | 	call	#_fatfs_cc__get_fattime
318dc     50 4E 05 F1 | 	add	fp, #80
318e0     A7 FA 61 FC | 	wrlong	result1, fp
318e4     20 4E 85 F1 | 	sub	fp, #32
318e8     A7 12 02 FB | 	rdlong	arg01, fp
318ec     0E 12 06 F1 | 	add	arg01, #14
318f0     09 FB 61 FC | 	wrlong	result1, arg01
318f4     A7 12 02 FB | 	rdlong	arg01, fp
318f8     16 12 06 F1 | 	add	arg01, #22
318fc     20 4E 05 F1 | 	add	fp, #32
31900     A7 14 02 FB | 	rdlong	arg02, fp
31904     09 15 62 FC | 	wrlong	arg02, arg01
31908     10 4E 85 F1 | 	sub	fp, #16
3190c     A7 12 02 FB | 	rdlong	arg01, fp
31910     10 4E 85 F1 | 	sub	fp, #16
31914     A7 14 02 FB | 	rdlong	arg02, fp
31918     30 4E 85 F1 | 	sub	fp, #48
3191c     A8 EB BF FD | 	call	#_fatfs_cc_ld_clust
31920     44 4E 05 F1 | 	add	fp, #68
31924     A7 FA 61 FC | 	wrlong	result1, fp
31928     14 4E 85 F1 | 	sub	fp, #20
3192c     A7 26 02 FB | 	rdlong	local01, fp
31930     0B 26 06 F1 | 	add	local01, #11
31934     13 41 48 FC | 	wrbyte	#32, local01
31938     10 4E 05 F1 | 	add	fp, #16
3193c     A7 12 02 FB | 	rdlong	arg01, fp
31940     10 4E 85 F1 | 	sub	fp, #16
31944     A7 14 02 FB | 	rdlong	arg02, fp
31948     30 4E 85 F1 | 	sub	fp, #48
3194c     00 16 06 F6 | 	mov	arg03, #0
31950     A8 EB BF FD | 	call	#_fatfs_cc_st_clust
31954     30 4E 05 F1 | 	add	fp, #48
31958     A7 12 02 FB | 	rdlong	arg01, fp
3195c     1C 12 06 F1 | 	add	arg01, #28
31960     09 01 68 FC | 	wrlong	#0, arg01
31964     10 4E 05 F1 | 	add	fp, #16
31968     A7 26 02 FB | 	rdlong	local01, fp
3196c     03 26 06 F1 | 	add	local01, #3
31970     13 03 48 FC | 	wrbyte	#1, local01
31974     04 4E 05 F1 | 	add	fp, #4
31978     A7 26 0A FB | 	rdlong	local01, fp wz
3197c     44 4E 85 F1 | 	sub	fp, #68
31980     E8 00 90 AD |  if_e	jmp	#LR__4788
31984     40 4E 05 F1 | 	add	fp, #64
31988     A7 26 02 FB | 	rdlong	local01, fp
3198c     2C 26 06 F1 | 	add	local01, #44
31990     13 27 02 FB | 	rdlong	local01, local01
31994     14 4E 05 F1 | 	add	fp, #20
31998     A7 26 62 FC | 	wrlong	local01, fp
3199c     40 4E 85 F1 | 	sub	fp, #64
319a0     A7 12 02 F6 | 	mov	arg01, fp
319a4     30 4E 05 F1 | 	add	fp, #48
319a8     A7 14 02 FB | 	rdlong	arg02, fp
319ac     44 4E 85 F1 | 	sub	fp, #68
319b0     00 16 06 F6 | 	mov	arg03, #0
319b4     44 E3 BF FD | 	call	#_fatfs_cc_remove_chain
319b8     10 4E 05 F1 | 	add	fp, #16
319bc     A7 FA 61 FC | 	wrlong	result1, fp
319c0     10 4E 85 F1 | 	sub	fp, #16
319c4     00 FA 0D F2 | 	cmp	result1, #0 wz
319c8     A0 00 90 5D |  if_ne	jmp	#LR__4788
319cc     40 4E 05 F1 | 	add	fp, #64
319d0     A7 12 02 FB | 	rdlong	arg01, fp
319d4     14 4E 05 F1 | 	add	fp, #20
319d8     A7 14 02 FB | 	rdlong	arg02, fp
319dc     54 4E 85 F1 | 	sub	fp, #84
319e0     AC DD BF FD | 	call	#_fatfs_cc_move_window
319e4     10 4E 05 F1 | 	add	fp, #16
319e8     A7 FA 61 FC | 	wrlong	result1, fp
319ec     30 4E 05 F1 | 	add	fp, #48
319f0     A7 18 02 FB | 	rdlong	arg04, fp
319f4     04 4E 05 F1 | 	add	fp, #4
319f8     A7 26 02 FB | 	rdlong	local01, fp
319fc     44 4E 85 F1 | 	sub	fp, #68
31a00     01 26 86 F1 | 	sub	local01, #1
31a04     0C 18 06 F1 | 	add	arg04, #12
31a08     0C 27 62 FC | 	wrlong	local01, arg04
31a0c     5C 00 90 FD | 	jmp	#LR__4788
31a10                 | LR__4785
31a10     10 4E 05 F1 | 	add	fp, #16
31a14     A7 18 0A FB | 	rdlong	arg04, fp wz
31a18     10 4E 85 F1 | 	sub	fp, #16
31a1c     4C 00 90 5D |  if_ne	jmp	#LR__4787
31a20     1A 4E 05 F1 | 	add	fp, #26
31a24     A7 18 C2 FA | 	rdbyte	arg04, fp
31a28     1A 4E 85 F1 | 	sub	fp, #26
31a2c     10 18 CE F7 | 	test	arg04, #16 wz
31a30     10 4E 05 51 |  if_ne	add	fp, #16
31a34     A7 08 68 5C |  if_ne	wrlong	#4, fp
31a38     10 4E 85 51 |  if_ne	sub	fp, #16
31a3c     2C 00 90 5D |  if_ne	jmp	#LR__4786
31a40     0C 4E 05 F1 | 	add	fp, #12
31a44     A7 18 C2 FA | 	rdbyte	arg04, fp
31a48     0C 4E 85 F1 | 	sub	fp, #12
31a4c     02 18 CE F7 | 	test	arg04, #2 wz
31a50     1A 4E 05 51 |  if_ne	add	fp, #26
31a54     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
31a58     1A 4E 85 51 |  if_ne	sub	fp, #26
31a5c     01 26 CE 57 |  if_ne	test	local01, #1 wz
31a60     10 4E 05 51 |  if_ne	add	fp, #16
31a64     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31a68     10 4E 85 51 |  if_ne	sub	fp, #16
31a6c                 | LR__4786
31a6c                 | LR__4787
31a6c                 | LR__4788
31a6c     10 4E 05 F1 | 	add	fp, #16
31a70     A7 26 0A FB | 	rdlong	local01, fp wz
31a74     10 4E 85 F1 | 	sub	fp, #16
31a78     60 00 90 5D |  if_ne	jmp	#LR__4789
31a7c     0C 4E 05 F1 | 	add	fp, #12
31a80     A7 28 C2 FA | 	rdbyte	local02, fp
31a84     0C 4E 85 F1 | 	sub	fp, #12
31a88     08 28 CE F7 | 	test	local02, #8 wz
31a8c     0C 4E 05 51 |  if_ne	add	fp, #12
31a90     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
31a94     40 28 46 55 |  if_ne	or	local02, #64
31a98     A7 28 42 5C |  if_ne	wrbyte	local02, fp
31a9c     0C 4E 85 51 |  if_ne	sub	fp, #12
31aa0     04 4E 05 F1 | 	add	fp, #4
31aa4     A7 28 02 FB | 	rdlong	local02, fp
31aa8     3C 4E 05 F1 | 	add	fp, #60
31aac     A7 26 02 FB | 	rdlong	local01, fp
31ab0     2C 26 06 F1 | 	add	local01, #44
31ab4     13 27 02 FB | 	rdlong	local01, local01
31ab8     20 28 06 F1 | 	add	local02, #32
31abc     14 27 62 FC | 	wrlong	local01, local02
31ac0     3C 4E 85 F1 | 	sub	fp, #60
31ac4     A7 28 02 FB | 	rdlong	local02, fp
31ac8     2C 4E 05 F1 | 	add	fp, #44
31acc     A7 26 02 FB | 	rdlong	local01, fp
31ad0     30 4E 85 F1 | 	sub	fp, #48
31ad4     24 28 06 F1 | 	add	local02, #36
31ad8     14 27 62 FC | 	wrlong	local01, local02
31adc                 | LR__4789
31adc     10 4E 05 F1 | 	add	fp, #16
31ae0     A7 28 0A FB | 	rdlong	local02, fp wz
31ae4     10 4E 85 F1 | 	sub	fp, #16
31ae8     F4 02 90 5D |  if_ne	jmp	#LR__4795
31aec     04 4E 05 F1 | 	add	fp, #4
31af0     A7 28 02 FB | 	rdlong	local02, fp
31af4     3C 4E 05 F1 | 	add	fp, #60
31af8     A7 12 02 FB | 	rdlong	arg01, fp
31afc     10 4E 85 F1 | 	sub	fp, #16
31b00     A7 14 02 FB | 	rdlong	arg02, fp
31b04     30 4E 85 F1 | 	sub	fp, #48
31b08     BC E9 BF FD | 	call	#_fatfs_cc_ld_clust
31b0c     08 28 06 F1 | 	add	local02, #8
31b10     14 FB 61 FC | 	wrlong	result1, local02
31b14     04 4E 05 F1 | 	add	fp, #4
31b18     A7 28 02 FB | 	rdlong	local02, fp
31b1c     2C 4E 05 F1 | 	add	fp, #44
31b20     A7 12 02 FB | 	rdlong	arg01, fp
31b24     1C 12 06 F1 | 	add	arg01, #28
31b28                 | ' {
31b28                 | ' 
31b28                 | ' 	return *((DWORD*)ptr);
31b28     09 FB 01 FB | 	rdlong	result1, arg01
31b2c     0C 28 06 F1 | 	add	local02, #12
31b30     14 FB 61 FC | 	wrlong	result1, local02
31b34     2C 4E 85 F1 | 	sub	fp, #44
31b38     A7 28 02 FB | 	rdlong	local02, fp
31b3c     3C 4E 05 F1 | 	add	fp, #60
31b40     A7 26 02 FB | 	rdlong	local01, fp
31b44     14 27 62 FC | 	wrlong	local01, local02
31b48     3C 4E 85 F1 | 	sub	fp, #60
31b4c     A7 28 02 FB | 	rdlong	local02, fp
31b50     3C 4E 05 F1 | 	add	fp, #60
31b54     A7 26 02 FB | 	rdlong	local01, fp
31b58     06 26 06 F1 | 	add	local01, #6
31b5c     13 27 E2 FA | 	rdword	local01, local01
31b60     04 28 06 F1 | 	add	local02, #4
31b64     14 27 52 FC | 	wrword	local01, local02
31b68     3C 4E 85 F1 | 	sub	fp, #60
31b6c     A7 28 02 FB | 	rdlong	local02, fp
31b70     08 4E 05 F1 | 	add	fp, #8
31b74     A7 26 C2 FA | 	rdbyte	local01, fp
31b78     10 28 06 F1 | 	add	local02, #16
31b7c     14 27 42 FC | 	wrbyte	local01, local02
31b80     08 4E 85 F1 | 	sub	fp, #8
31b84     A7 28 02 FB | 	rdlong	local02, fp
31b88     11 28 06 F1 | 	add	local02, #17
31b8c     14 01 48 FC | 	wrbyte	#0, local02
31b90     A7 28 02 FB | 	rdlong	local02, fp
31b94     1C 28 06 F1 | 	add	local02, #28
31b98     14 01 68 FC | 	wrlong	#0, local02
31b9c     A7 28 02 FB | 	rdlong	local02, fp
31ba0     14 28 06 F1 | 	add	local02, #20
31ba4     14 01 68 FC | 	wrlong	#0, local02
31ba8     A7 12 02 FB | 	rdlong	arg01, fp
31bac     04 4E 85 F1 | 	sub	fp, #4
31bb0     28 12 06 F1 | 	add	arg01, #40
31bb4     00 14 06 F6 | 	mov	arg02, #0
31bb8     09 16 C6 F9 | 	decod	arg03, #9
31bbc     98 00 A0 FD | 	call	#\builtin_bytefill_
31bc0     0C 4E 05 F1 | 	add	fp, #12
31bc4     A7 28 C2 FA | 	rdbyte	local02, fp
31bc8     0C 4E 85 F1 | 	sub	fp, #12
31bcc     20 28 CE F7 | 	test	local02, #32 wz
31bd0     0C 02 90 AD |  if_e	jmp	#LR__4794
31bd4     04 4E 05 F1 | 	add	fp, #4
31bd8     A7 26 02 FB | 	rdlong	local01, fp
31bdc     04 4E 85 F1 | 	sub	fp, #4
31be0     0C 26 06 F1 | 	add	local01, #12
31be4     13 29 02 FB | 	rdlong	local02, local01
31be8     01 28 16 F2 | 	cmp	local02, #1 wc
31bec     F0 01 90 CD |  if_b	jmp	#LR__4794
31bf0     04 4E 05 F1 | 	add	fp, #4
31bf4     A7 26 02 FB | 	rdlong	local01, fp
31bf8     13 29 02 F6 | 	mov	local02, local01
31bfc     0C 26 06 F1 | 	add	local01, #12
31c00     13 27 02 FB | 	rdlong	local01, local01
31c04     14 28 06 F1 | 	add	local02, #20
31c08     14 27 62 FC | 	wrlong	local01, local02
31c0c     3C 4E 05 F1 | 	add	fp, #60
31c10     A7 28 02 FB | 	rdlong	local02, fp
31c14     0A 28 06 F1 | 	add	local02, #10
31c18     14 29 E2 FA | 	rdword	local02, local02
31c1c     09 28 66 F0 | 	shl	local02, #9
31c20     08 4E 05 F1 | 	add	fp, #8
31c24     A7 28 62 FC | 	wrlong	local02, fp
31c28     44 4E 85 F1 | 	sub	fp, #68
31c2c     A7 28 02 FB | 	rdlong	local02, fp
31c30     08 28 06 F1 | 	add	local02, #8
31c34     14 27 02 FB | 	rdlong	local01, local02
31c38     48 4E 05 F1 | 	add	fp, #72
31c3c     A7 26 62 FC | 	wrlong	local01, fp
31c40                 | ' 				fp->fptr = fp->obj.objsize;
31c40                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
31c40                 | ' 				clst = fp->obj.sclust;
31c40                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
31c40     48 4E 85 F1 | 	sub	fp, #72
31c44     A7 28 02 FB | 	rdlong	local02, fp
31c48     0C 28 06 F1 | 	add	local02, #12
31c4c     14 27 02 FB | 	rdlong	local01, local02
31c50     54 4E 05 F1 | 	add	fp, #84
31c54     A7 26 62 FC | 	wrlong	local01, fp
31c58     58 4E 85 F1 | 	sub	fp, #88
31c5c                 | LR__4790
31c5c     10 4E 05 F1 | 	add	fp, #16
31c60     A7 28 0A FB | 	rdlong	local02, fp wz
31c64     10 4E 85 F1 | 	sub	fp, #16
31c68     94 00 90 5D |  if_ne	jmp	#LR__4791
31c6c     58 4E 05 F1 | 	add	fp, #88
31c70     A7 28 02 FB | 	rdlong	local02, fp
31c74     10 4E 85 F1 | 	sub	fp, #16
31c78     A7 26 02 FB | 	rdlong	local01, fp
31c7c     48 4E 85 F1 | 	sub	fp, #72
31c80     13 29 1A F2 | 	cmp	local02, local01 wcz
31c84     78 00 90 ED |  if_be	jmp	#LR__4791
31c88     04 4E 05 F1 | 	add	fp, #4
31c8c     A7 12 02 FB | 	rdlong	arg01, fp
31c90     48 4E 05 F1 | 	add	fp, #72
31c94     A7 14 02 FB | 	rdlong	arg02, fp
31c98     4C 4E 85 F1 | 	sub	fp, #76
31c9c     A8 DC BF FD | 	call	#_fatfs_cc_get_fat
31ca0     4C 4E 05 F1 | 	add	fp, #76
31ca4     A7 FA 61 FC | 	wrlong	result1, fp
31ca8     4C 4E 85 F1 | 	sub	fp, #76
31cac     02 FA 15 F2 | 	cmp	result1, #2 wc
31cb0     10 4E 05 C1 |  if_b	add	fp, #16
31cb4     A7 04 68 CC |  if_b	wrlong	#2, fp
31cb8     10 4E 85 C1 |  if_b	sub	fp, #16
31cbc     4C 4E 05 F1 | 	add	fp, #76
31cc0     A7 28 02 FB | 	rdlong	local02, fp
31cc4     4C 4E 85 F1 | 	sub	fp, #76
31cc8     FF FF 7F FF 
31ccc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
31cd0     10 4E 05 A1 |  if_e	add	fp, #16
31cd4     A7 02 68 AC |  if_e	wrlong	#1, fp
31cd8     10 4E 85 A1 |  if_e	sub	fp, #16
31cdc     58 4E 05 F1 | 	add	fp, #88
31ce0     A7 28 02 FB | 	rdlong	local02, fp
31ce4     10 4E 85 F1 | 	sub	fp, #16
31ce8     A7 26 02 FB | 	rdlong	local01, fp
31cec     13 29 82 F1 | 	sub	local02, local01
31cf0     10 4E 05 F1 | 	add	fp, #16
31cf4     A7 28 62 FC | 	wrlong	local02, fp
31cf8     58 4E 85 F1 | 	sub	fp, #88
31cfc     5C FF 9F FD | 	jmp	#LR__4790
31d00                 | LR__4791
31d00     04 4E 05 F1 | 	add	fp, #4
31d04     A7 28 02 FB | 	rdlong	local02, fp
31d08     48 4E 05 F1 | 	add	fp, #72
31d0c     A7 26 02 FB | 	rdlong	local01, fp
31d10     18 28 06 F1 | 	add	local02, #24
31d14     14 27 62 FC | 	wrlong	local01, local02
31d18     3C 4E 85 F1 | 	sub	fp, #60
31d1c     A7 28 0A FB | 	rdlong	local02, fp wz
31d20     10 4E 85 F1 | 	sub	fp, #16
31d24     B8 00 90 5D |  if_ne	jmp	#LR__4793
31d28     58 4E 05 F1 | 	add	fp, #88
31d2c     A7 26 02 FB | 	rdlong	local01, fp
31d30     58 4E 85 F1 | 	sub	fp, #88
31d34     FF 27 CE F7 | 	test	local01, #511 wz
31d38     A4 00 90 AD |  if_e	jmp	#LR__4793
31d3c     40 4E 05 F1 | 	add	fp, #64
31d40     A7 12 02 FB | 	rdlong	arg01, fp
31d44     0C 4E 05 F1 | 	add	fp, #12
31d48     A7 14 02 FB | 	rdlong	arg02, fp
31d4c     4C 4E 85 F1 | 	sub	fp, #76
31d50     B4 DB BF FD | 	call	#_fatfs_cc_clst2sect
31d54     54 4E 05 F1 | 	add	fp, #84
31d58     A7 FA 61 FC | 	wrlong	result1, fp
31d5c     00 FA 4D F2 | 	cmps	result1, #0 wz
31d60     54 4E 85 F1 | 	sub	fp, #84
31d64     10 4E 05 A1 |  if_e	add	fp, #16
31d68     A7 04 68 AC |  if_e	wrlong	#2, fp
31d6c     10 4E 85 A1 |  if_e	sub	fp, #16
31d70     6C 00 90 AD |  if_e	jmp	#LR__4792
31d74     04 4E 05 F1 | 	add	fp, #4
31d78     A7 28 02 FB | 	rdlong	local02, fp
31d7c     50 4E 05 F1 | 	add	fp, #80
31d80     A7 26 02 FB | 	rdlong	local01, fp
31d84     04 4E 05 F1 | 	add	fp, #4
31d88     A7 18 02 FB | 	rdlong	arg04, fp
31d8c     09 18 46 F0 | 	shr	arg04, #9
31d90     0C 27 02 F1 | 	add	local01, arg04
31d94     1C 28 06 F1 | 	add	local02, #28
31d98     14 27 62 FC | 	wrlong	local01, local02
31d9c     18 4E 85 F1 | 	sub	fp, #24
31da0     A7 28 02 FB | 	rdlong	local02, fp
31da4     01 28 06 F1 | 	add	local02, #1
31da8     14 13 C2 FA | 	rdbyte	arg01, local02
31dac     3C 4E 85 F1 | 	sub	fp, #60
31db0     A7 28 02 FB | 	rdlong	local02, fp
31db4     14 15 02 F6 | 	mov	arg02, local02
31db8     28 14 06 F1 | 	add	arg02, #40
31dbc     04 4E 85 F1 | 	sub	fp, #4
31dc0     1C 28 06 F1 | 	add	local02, #28
31dc4     14 17 02 FB | 	rdlong	arg03, local02
31dc8     01 18 06 F6 | 	mov	arg04, #1
31dcc     AC D4 BF FD | 	call	#_fatfs_cc_disk_read
31dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
31dd4     10 4E 05 51 |  if_ne	add	fp, #16
31dd8     A7 02 68 5C |  if_ne	wrlong	#1, fp
31ddc     10 4E 85 51 |  if_ne	sub	fp, #16
31de0                 | LR__4792
31de0                 | LR__4793
31de0                 | LR__4794
31de0                 | LR__4795
31de0                 | LR__4796
31de0     10 4E 05 F1 | 	add	fp, #16
31de4     A7 28 0A FB | 	rdlong	local02, fp wz
31de8     10 4E 85 F1 | 	sub	fp, #16
31dec     04 4E 05 51 |  if_ne	add	fp, #4
31df0     A7 28 02 5B |  if_ne	rdlong	local02, fp
31df4     04 4E 85 51 |  if_ne	sub	fp, #4
31df8     14 01 68 5C |  if_ne	wrlong	#0, local02
31dfc                 | ' 
31dfc                 | ' 	return res ;
31dfc     10 4E 05 F1 | 	add	fp, #16
31e00     A7 FA 01 FB | 	rdlong	result1, fp
31e04     10 4E 85 F1 | 	sub	fp, #16
31e08                 | LR__4797
31e08     A7 F0 03 F6 | 	mov	ptra, fp
31e0c     B2 00 A0 FD | 	call	#popregs_
31e10                 | _fatfs_cc_f_open_ret
31e10     2D 00 64 FD | 	ret
31e14                 | 
31e14                 | _fatfs_cc_f_read
31e14     0E 4A 05 F6 | 	mov	COUNT_, #14
31e18     A8 00 A0 FD | 	call	#pushregs_
31e1c     38 F0 07 F1 | 	add	ptra, #56
31e20     04 4E 05 F1 | 	add	fp, #4
31e24     A7 12 62 FC | 	wrlong	arg01, fp
31e28     04 4E 05 F1 | 	add	fp, #4
31e2c     A7 14 62 FC | 	wrlong	arg02, fp
31e30     04 4E 05 F1 | 	add	fp, #4
31e34     A7 16 62 FC | 	wrlong	arg03, fp
31e38     04 4E 05 F1 | 	add	fp, #4
31e3c     A7 18 62 FC | 	wrlong	arg04, fp
31e40     08 4E 85 F1 | 	sub	fp, #8
31e44     A7 FA 01 FB | 	rdlong	result1, fp
31e48     2C 4E 05 F1 | 	add	fp, #44
31e4c     A7 FA 61 FC | 	wrlong	result1, fp
31e50     24 4E 85 F1 | 	sub	fp, #36
31e54     A7 FA 01 FB | 	rdlong	result1, fp
31e58     FD 00 68 FC | 	wrlong	#0, result1
31e5c     0C 4E 85 F1 | 	sub	fp, #12
31e60     A7 12 02 FB | 	rdlong	arg01, fp
31e64     14 4E 05 F1 | 	add	fp, #20
31e68     A7 14 02 F6 | 	mov	arg02, fp
31e6c     18 4E 85 F1 | 	sub	fp, #24
31e70     2C F7 BF FD | 	call	#_fatfs_cc_validate
31e74     14 4E 05 F1 | 	add	fp, #20
31e78     A7 FA 61 FC | 	wrlong	result1, fp
31e7c     00 FA 4D F2 | 	cmps	result1, #0 wz
31e80     14 4E 85 F1 | 	sub	fp, #20
31e84     20 00 90 5D |  if_ne	jmp	#LR__4800
31e88     04 4E 05 F1 | 	add	fp, #4
31e8c     A7 14 02 FB | 	rdlong	arg02, fp
31e90     11 14 06 F1 | 	add	arg02, #17
31e94     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
31e98     10 4E 05 F1 | 	add	fp, #16
31e9c     A7 14 62 FC | 	wrlong	arg02, fp
31ea0     14 4E 85 F1 | 	sub	fp, #20
31ea4     10 00 90 AD |  if_e	jmp	#LR__4801
31ea8                 | LR__4800
31ea8     14 4E 05 F1 | 	add	fp, #20
31eac     A7 FA 01 FB | 	rdlong	result1, fp
31eb0     14 4E 85 F1 | 	sub	fp, #20
31eb4     EC 05 90 FD | 	jmp	#LR__4820
31eb8                 | LR__4801
31eb8     04 4E 05 F1 | 	add	fp, #4
31ebc     A7 18 02 FB | 	rdlong	arg04, fp
31ec0     04 4E 85 F1 | 	sub	fp, #4
31ec4     10 18 06 F1 | 	add	arg04, #16
31ec8     0C 19 C2 FA | 	rdbyte	arg04, arg04
31ecc     01 18 CE F7 | 	test	arg04, #1 wz
31ed0     07 FA 05 A6 |  if_e	mov	result1, #7
31ed4     CC 05 90 AD |  if_e	jmp	#LR__4820
31ed8     04 4E 05 F1 | 	add	fp, #4
31edc     A7 26 02 FB | 	rdlong	local01, fp
31ee0     13 29 02 F6 | 	mov	local02, local01
31ee4     0C 28 06 F1 | 	add	local02, #12
31ee8     14 2B 02 FB | 	rdlong	local03, local02
31eec     14 26 06 F1 | 	add	local01, #20
31ef0     13 27 02 FB | 	rdlong	local01, local01
31ef4     13 2B 82 F1 | 	sub	local03, local01
31ef8     20 4E 05 F1 | 	add	fp, #32
31efc     A7 2A 62 FC | 	wrlong	local03, fp
31f00     18 4E 85 F1 | 	sub	fp, #24
31f04     A7 2C 02 FB | 	rdlong	local04, fp
31f08     0C 4E 85 F1 | 	sub	fp, #12
31f0c     15 2D 1A F2 | 	cmp	local04, local03 wcz
31f10     24 4E 05 11 |  if_a	add	fp, #36
31f14     A7 2C 02 1B |  if_a	rdlong	local04, fp
31f18     18 4E 85 11 |  if_a	sub	fp, #24
31f1c     A7 2C 62 1C |  if_a	wrlong	local04, fp
31f20     0C 4E 85 11 |  if_a	sub	fp, #12
31f24                 | ' 
31f24                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
31f24                 | LR__4802
31f24     0C 4E 05 F1 | 	add	fp, #12
31f28     A7 28 02 FB | 	rdlong	local02, fp
31f2c     0C 4E 85 F1 | 	sub	fp, #12
31f30     14 2D 02 F6 | 	mov	local04, local02
31f34     01 2C 16 F2 | 	cmp	local04, #1 wc
31f38     64 05 90 CD |  if_b	jmp	#LR__4819
31f3c     04 4E 05 F1 | 	add	fp, #4
31f40     A7 2A 02 FB | 	rdlong	local03, fp
31f44     04 4E 85 F1 | 	sub	fp, #4
31f48     14 2A 06 F1 | 	add	local03, #20
31f4c     15 2B 02 FB | 	rdlong	local03, local03
31f50     FF 2B CE F7 | 	test	local03, #511 wz
31f54     3C 04 90 5D |  if_ne	jmp	#LR__4817
31f58     04 4E 05 F1 | 	add	fp, #4
31f5c     A7 26 02 FB | 	rdlong	local01, fp
31f60     14 26 06 F1 | 	add	local01, #20
31f64     13 2B 02 FB | 	rdlong	local03, local01
31f68     09 2A 46 F0 | 	shr	local03, #9
31f6c     14 4E 05 F1 | 	add	fp, #20
31f70     A7 2E 02 FB | 	rdlong	local05, fp
31f74     17 31 02 F6 | 	mov	local06, local05
31f78     0A 30 06 F1 | 	add	local06, #10
31f7c     18 33 E2 FA | 	rdword	local07, local06
31f80     0A 30 86 F1 | 	sub	local06, #10
31f84     19 35 32 F9 | 	getword	local08, local07, #0
31f88     01 34 86 F1 | 	sub	local08, #1
31f8c     1A 2B 0A F5 | 	and	local03, local08 wz
31f90     18 4E 05 F1 | 	add	fp, #24
31f94     A7 2A 62 FC | 	wrlong	local03, fp
31f98     30 4E 85 F1 | 	sub	fp, #48
31f9c     E0 00 90 5D |  if_ne	jmp	#LR__4807
31fa0     04 4E 05 F1 | 	add	fp, #4
31fa4     A7 2A 02 FB | 	rdlong	local03, fp
31fa8     04 4E 85 F1 | 	sub	fp, #4
31fac     14 2A 06 F1 | 	add	local03, #20
31fb0     15 2B 0A FB | 	rdlong	local03, local03 wz
31fb4     20 00 90 5D |  if_ne	jmp	#LR__4803
31fb8     04 4E 05 F1 | 	add	fp, #4
31fbc     A7 2A 02 FB | 	rdlong	local03, fp
31fc0     08 2A 06 F1 | 	add	local03, #8
31fc4     15 2B 02 FB | 	rdlong	local03, local03
31fc8     18 4E 05 F1 | 	add	fp, #24
31fcc     A7 2A 62 FC | 	wrlong	local03, fp
31fd0     1C 4E 85 F1 | 	sub	fp, #28
31fd4     28 00 90 FD | 	jmp	#LR__4804
31fd8                 | LR__4803
31fd8     04 4E 05 F1 | 	add	fp, #4
31fdc     A7 34 02 FB | 	rdlong	local08, fp
31fe0     1A 13 02 F6 | 	mov	arg01, local08
31fe4     04 4E 85 F1 | 	sub	fp, #4
31fe8     18 34 06 F1 | 	add	local08, #24
31fec     1A 15 02 FB | 	rdlong	arg02, local08
31ff0     54 D9 BF FD | 	call	#_fatfs_cc_get_fat
31ff4     1C 4E 05 F1 | 	add	fp, #28
31ff8     A7 FA 61 FC | 	wrlong	result1, fp
31ffc     1C 4E 85 F1 | 	sub	fp, #28
32000                 | LR__4804
32000     1C 4E 05 F1 | 	add	fp, #28
32004     A7 2A 02 FB | 	rdlong	local03, fp
32008     1C 4E 85 F1 | 	sub	fp, #28
3200c     02 2A 16 F2 | 	cmp	local03, #2 wc
32010     1C 00 90 3D |  if_ae	jmp	#LR__4805
32014     04 4E 05 F1 | 	add	fp, #4
32018     A7 2A 02 FB | 	rdlong	local03, fp
3201c     04 4E 85 F1 | 	sub	fp, #4
32020     11 2A 06 F1 | 	add	local03, #17
32024     15 05 48 FC | 	wrbyte	#2, local03
32028     02 FA 05 F6 | 	mov	result1, #2
3202c     74 04 90 FD | 	jmp	#LR__4820
32030                 | LR__4805
32030     1C 4E 05 F1 | 	add	fp, #28
32034     A7 2A 02 FB | 	rdlong	local03, fp
32038     1C 4E 85 F1 | 	sub	fp, #28
3203c     FF FF 7F FF 
32040     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
32044     1C 00 90 5D |  if_ne	jmp	#LR__4806
32048     04 4E 05 F1 | 	add	fp, #4
3204c     A7 2A 02 FB | 	rdlong	local03, fp
32050     04 4E 85 F1 | 	sub	fp, #4
32054     11 2A 06 F1 | 	add	local03, #17
32058     15 03 48 FC | 	wrbyte	#1, local03
3205c     01 FA 05 F6 | 	mov	result1, #1
32060     40 04 90 FD | 	jmp	#LR__4820
32064                 | LR__4806
32064     04 4E 05 F1 | 	add	fp, #4
32068     A7 2A 02 FB | 	rdlong	local03, fp
3206c     18 4E 05 F1 | 	add	fp, #24
32070     A7 34 02 FB | 	rdlong	local08, fp
32074     1C 4E 85 F1 | 	sub	fp, #28
32078     18 2A 06 F1 | 	add	local03, #24
3207c     15 35 62 FC | 	wrlong	local08, local03
32080                 | LR__4807
32080     18 4E 05 F1 | 	add	fp, #24
32084     A7 12 02 FB | 	rdlong	arg01, fp
32088     14 4E 85 F1 | 	sub	fp, #20
3208c     A7 2A 02 FB | 	rdlong	local03, fp
32090     04 4E 85 F1 | 	sub	fp, #4
32094     18 2A 06 F1 | 	add	local03, #24
32098     15 15 02 FB | 	rdlong	arg02, local03
3209c     68 D8 BF FD | 	call	#_fatfs_cc_clst2sect
320a0     20 4E 05 F1 | 	add	fp, #32
320a4     A7 FA 61 FC | 	wrlong	result1, fp
320a8     20 4E 85 F1 | 	sub	fp, #32
320ac     00 FA 0D F2 | 	cmp	result1, #0 wz
320b0     1C 00 90 5D |  if_ne	jmp	#LR__4808
320b4     04 4E 05 F1 | 	add	fp, #4
320b8     A7 2A 02 FB | 	rdlong	local03, fp
320bc     04 4E 85 F1 | 	sub	fp, #4
320c0     11 2A 06 F1 | 	add	local03, #17
320c4     15 05 48 FC | 	wrbyte	#2, local03
320c8     02 FA 05 F6 | 	mov	result1, #2
320cc     D4 03 90 FD | 	jmp	#LR__4820
320d0                 | LR__4808
320d0     20 4E 05 F1 | 	add	fp, #32
320d4     A7 2A 02 FB | 	rdlong	local03, fp
320d8     10 4E 05 F1 | 	add	fp, #16
320dc     A7 34 02 FB | 	rdlong	local08, fp
320e0     1A 2B 02 F1 | 	add	local03, local08
320e4     10 4E 85 F1 | 	sub	fp, #16
320e8     A7 2A 62 FC | 	wrlong	local03, fp
320ec     14 4E 85 F1 | 	sub	fp, #20
320f0     A7 2A 02 FB | 	rdlong	local03, fp
320f4     09 2A 46 F0 | 	shr	local03, #9
320f8     20 4E 05 F1 | 	add	fp, #32
320fc     A7 2A 62 FC | 	wrlong	local03, fp
32100     2C 4E 85 F1 | 	sub	fp, #44
32104     01 2A 16 F2 | 	cmp	local03, #1 wc
32108     5C 01 90 CD |  if_b	jmp	#LR__4812
3210c     30 4E 05 F1 | 	add	fp, #48
32110     A7 2A 02 FB | 	rdlong	local03, fp
32114     04 4E 85 F1 | 	sub	fp, #4
32118     A7 34 02 FB | 	rdlong	local08, fp
3211c     1A 2B 02 F1 | 	add	local03, local08
32120     14 4E 85 F1 | 	sub	fp, #20
32124     A7 34 02 FB | 	rdlong	local08, fp
32128     18 4E 85 F1 | 	sub	fp, #24
3212c     0A 34 06 F1 | 	add	local08, #10
32130     1A 35 E2 FA | 	rdword	local08, local08
32134     1A 2B 1A F2 | 	cmp	local03, local08 wcz
32138     28 00 90 ED |  if_be	jmp	#LR__4809
3213c     18 4E 05 F1 | 	add	fp, #24
32140     A7 26 02 FB | 	rdlong	local01, fp
32144     0A 26 06 F1 | 	add	local01, #10
32148     13 2B E2 FA | 	rdword	local03, local01
3214c     18 4E 05 F1 | 	add	fp, #24
32150     A7 34 02 FB | 	rdlong	local08, fp
32154     1A 2B 82 F1 | 	sub	local03, local08
32158     04 4E 85 F1 | 	sub	fp, #4
3215c     A7 2A 62 FC | 	wrlong	local03, fp
32160     2C 4E 85 F1 | 	sub	fp, #44
32164                 | LR__4809
32164     18 4E 05 F1 | 	add	fp, #24
32168     A7 26 02 FB | 	rdlong	local01, fp
3216c     01 26 06 F1 | 	add	local01, #1
32170     13 13 C2 FA | 	rdbyte	arg01, local01
32174     1C 4E 05 F1 | 	add	fp, #28
32178     A7 14 02 FB | 	rdlong	arg02, fp
3217c     14 4E 85 F1 | 	sub	fp, #20
32180     A7 16 02 FB | 	rdlong	arg03, fp
32184     0C 4E 05 F1 | 	add	fp, #12
32188     A7 18 02 FB | 	rdlong	arg04, fp
3218c     2C 4E 85 F1 | 	sub	fp, #44
32190     E8 D0 BF FD | 	call	#_fatfs_cc_disk_read
32194     00 FA 0D F2 | 	cmp	result1, #0 wz
32198     1C 00 90 AD |  if_e	jmp	#LR__4810
3219c     04 4E 05 F1 | 	add	fp, #4
321a0     A7 2A 02 FB | 	rdlong	local03, fp
321a4     04 4E 85 F1 | 	sub	fp, #4
321a8     11 2A 06 F1 | 	add	local03, #17
321ac     15 03 48 FC | 	wrbyte	#1, local03
321b0     01 FA 05 F6 | 	mov	result1, #1
321b4     EC 02 90 FD | 	jmp	#LR__4820
321b8                 | LR__4810
321b8     04 4E 05 F1 | 	add	fp, #4
321bc     A7 26 02 FB | 	rdlong	local01, fp
321c0     04 4E 85 F1 | 	sub	fp, #4
321c4     10 26 06 F1 | 	add	local01, #16
321c8     13 2B C2 FA | 	rdbyte	local03, local01
321cc     80 2A CE F7 | 	test	local03, #128 wz
321d0     78 00 90 AD |  if_e	jmp	#LR__4811
321d4     04 4E 05 F1 | 	add	fp, #4
321d8     A7 34 02 FB | 	rdlong	local08, fp
321dc     1C 34 06 F1 | 	add	local08, #28
321e0     1A 35 02 FB | 	rdlong	local08, local08
321e4     1C 4E 05 F1 | 	add	fp, #28
321e8     A7 36 02 FB | 	rdlong	local09, fp
321ec     1B 35 82 F1 | 	sub	local08, local09
321f0     0C 4E 05 F1 | 	add	fp, #12
321f4     A7 38 02 FB | 	rdlong	local10, fp
321f8     2C 4E 85 F1 | 	sub	fp, #44
321fc     1C 3B 02 F6 | 	mov	local11, local10
32200     1D 35 12 F2 | 	cmp	local08, local11 wc
32204     44 00 90 3D |  if_ae	jmp	#LR__4811
32208     34 4E 05 F1 | 	add	fp, #52
3220c     A7 12 02 FB | 	rdlong	arg01, fp
32210     30 4E 85 F1 | 	sub	fp, #48
32214     A7 14 02 FB | 	rdlong	arg02, fp
32218     0A 3B 02 F6 | 	mov	local11, arg02
3221c     1C 3A 06 F1 | 	add	local11, #28
32220     1D 37 02 FB | 	rdlong	local09, local11
32224     1C 4E 05 F1 | 	add	fp, #28
32228     A7 2E 02 FB | 	rdlong	local05, fp
3222c     17 37 82 F1 | 	sub	local09, local05
32230     09 36 66 F0 | 	shl	local09, #9
32234     1B 3B 02 F6 | 	mov	local11, local09
32238     1B 13 02 F1 | 	add	arg01, local09
3223c     20 4E 85 F1 | 	sub	fp, #32
32240     28 14 06 F1 | 	add	arg02, #40
32244     09 16 C6 F9 | 	decod	arg03, #9
32248     74 5D BF FD | 	call	#__system____builtin_memmove
3224c                 | LR__4811
3224c     2C 4E 05 F1 | 	add	fp, #44
32250     A7 2A 02 FB | 	rdlong	local03, fp
32254     09 2A 66 F0 | 	shl	local03, #9
32258     04 4E 85 F1 | 	sub	fp, #4
3225c     A7 2A 62 FC | 	wrlong	local03, fp
32260     28 4E 85 F1 | 	sub	fp, #40
32264                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
32264                 | ' 				}
32264                 | ' 
32264                 | ' 
32264                 | ' 				rcnt =  ((UINT) 512 )  * cc;
32264                 | ' 				continue;
32264     B4 01 90 FD | 	jmp	#LR__4818
32268                 | LR__4812
32268     04 4E 05 F1 | 	add	fp, #4
3226c     A7 2A 02 FB | 	rdlong	local03, fp
32270     1C 2A 06 F1 | 	add	local03, #28
32274     15 2B 02 FB | 	rdlong	local03, local03
32278     1C 4E 05 F1 | 	add	fp, #28
3227c     A7 26 02 FB | 	rdlong	local01, fp
32280     20 4E 85 F1 | 	sub	fp, #32
32284     13 2B 0A F2 | 	cmp	local03, local01 wz
32288     EC 00 90 AD |  if_e	jmp	#LR__4816
3228c     04 4E 05 F1 | 	add	fp, #4
32290     A7 26 02 FB | 	rdlong	local01, fp
32294     04 4E 85 F1 | 	sub	fp, #4
32298     10 26 06 F1 | 	add	local01, #16
3229c     13 2B C2 FA | 	rdbyte	local03, local01
322a0     80 2A CE F7 | 	test	local03, #128 wz
322a4     7C 00 90 AD |  if_e	jmp	#LR__4814
322a8     18 4E 05 F1 | 	add	fp, #24
322ac     A7 26 02 FB | 	rdlong	local01, fp
322b0     01 26 06 F1 | 	add	local01, #1
322b4     13 13 C2 FA | 	rdbyte	arg01, local01
322b8     14 4E 85 F1 | 	sub	fp, #20
322bc     A7 2A 02 FB | 	rdlong	local03, fp
322c0     15 15 02 F6 | 	mov	arg02, local03
322c4     28 14 06 F1 | 	add	arg02, #40
322c8     04 4E 85 F1 | 	sub	fp, #4
322cc     1C 2A 06 F1 | 	add	local03, #28
322d0     15 17 02 FB | 	rdlong	arg03, local03
322d4     01 18 06 F6 | 	mov	arg04, #1
322d8     60 D0 BF FD | 	call	#_fatfs_cc_disk_write
322dc     00 FA 0D F2 | 	cmp	result1, #0 wz
322e0     1C 00 90 AD |  if_e	jmp	#LR__4813
322e4     04 4E 05 F1 | 	add	fp, #4
322e8     A7 2A 02 FB | 	rdlong	local03, fp
322ec     04 4E 85 F1 | 	sub	fp, #4
322f0     11 2A 06 F1 | 	add	local03, #17
322f4     15 03 48 FC | 	wrbyte	#1, local03
322f8     01 FA 05 F6 | 	mov	result1, #1
322fc     A4 01 90 FD | 	jmp	#LR__4820
32300                 | LR__4813
32300     04 4E 05 F1 | 	add	fp, #4
32304     A7 3A 02 FB | 	rdlong	local11, fp
32308     1D 2B 02 F6 | 	mov	local03, local11
3230c     04 4E 85 F1 | 	sub	fp, #4
32310     10 3A 06 F1 | 	add	local11, #16
32314     1D 3B C2 FA | 	rdbyte	local11, local11
32318     7F 3A 06 F5 | 	and	local11, #127
3231c     10 2A 06 F1 | 	add	local03, #16
32320     15 3B 42 FC | 	wrbyte	local11, local03
32324                 | LR__4814
32324     18 4E 05 F1 | 	add	fp, #24
32328     A7 26 02 FB | 	rdlong	local01, fp
3232c     01 26 06 F1 | 	add	local01, #1
32330     13 13 C2 FA | 	rdbyte	arg01, local01
32334     14 4E 85 F1 | 	sub	fp, #20
32338     A7 14 02 FB | 	rdlong	arg02, fp
3233c     28 14 06 F1 | 	add	arg02, #40
32340     1C 4E 05 F1 | 	add	fp, #28
32344     A7 16 02 FB | 	rdlong	arg03, fp
32348     20 4E 85 F1 | 	sub	fp, #32
3234c     01 18 06 F6 | 	mov	arg04, #1
32350     28 CF BF FD | 	call	#_fatfs_cc_disk_read
32354     00 FA 0D F2 | 	cmp	result1, #0 wz
32358     1C 00 90 AD |  if_e	jmp	#LR__4815
3235c     04 4E 05 F1 | 	add	fp, #4
32360     A7 2A 02 FB | 	rdlong	local03, fp
32364     04 4E 85 F1 | 	sub	fp, #4
32368     11 2A 06 F1 | 	add	local03, #17
3236c     15 03 48 FC | 	wrbyte	#1, local03
32370     01 FA 05 F6 | 	mov	result1, #1
32374     2C 01 90 FD | 	jmp	#LR__4820
32378                 | LR__4815
32378                 | LR__4816
32378     04 4E 05 F1 | 	add	fp, #4
3237c     A7 2A 02 FB | 	rdlong	local03, fp
32380     1C 4E 05 F1 | 	add	fp, #28
32384     A7 3A 02 FB | 	rdlong	local11, fp
32388     20 4E 85 F1 | 	sub	fp, #32
3238c     1C 2A 06 F1 | 	add	local03, #28
32390     15 3B 62 FC | 	wrlong	local11, local03
32394                 | LR__4817
32394     04 4E 05 F1 | 	add	fp, #4
32398     A7 26 02 FB | 	rdlong	local01, fp
3239c     14 26 06 F1 | 	add	local01, #20
323a0     13 3B 02 FB | 	rdlong	local11, local01
323a4     FF 3B 06 F5 | 	and	local11, #511
323a8     09 2A C6 F9 | 	decod	local03, #9
323ac     1D 2B 82 F1 | 	sub	local03, local11
323b0     24 4E 05 F1 | 	add	fp, #36
323b4     A7 2A 62 FC | 	wrlong	local03, fp
323b8     1C 4E 85 F1 | 	sub	fp, #28
323bc     A7 3A 02 FB | 	rdlong	local11, fp
323c0     0C 4E 85 F1 | 	sub	fp, #12
323c4     1D 2B 1A F2 | 	cmp	local03, local11 wcz
323c8     0C 4E 05 11 |  if_a	add	fp, #12
323cc     A7 2A 02 1B |  if_a	rdlong	local03, fp
323d0     1C 4E 05 11 |  if_a	add	fp, #28
323d4     A7 2A 62 1C |  if_a	wrlong	local03, fp
323d8     28 4E 85 11 |  if_a	sub	fp, #40
323dc     34 4E 05 F1 | 	add	fp, #52
323e0     A7 12 02 FB | 	rdlong	arg01, fp
323e4     30 4E 85 F1 | 	sub	fp, #48
323e8     A7 30 02 FB | 	rdlong	local06, fp
323ec     18 15 02 F6 | 	mov	arg02, local06
323f0     28 14 06 F1 | 	add	arg02, #40
323f4     14 30 06 F1 | 	add	local06, #20
323f8     18 3B 02 FB | 	rdlong	local11, local06
323fc     1D 37 02 F6 | 	mov	local09, local11
32400     1B 39 02 F6 | 	mov	local10, local09
32404     FF 39 06 F5 | 	and	local10, #511
32408     1C 15 02 F1 | 	add	arg02, local10
3240c     24 4E 05 F1 | 	add	fp, #36
32410     A7 16 02 FB | 	rdlong	arg03, fp
32414     28 4E 85 F1 | 	sub	fp, #40
32418     A4 5B BF FD | 	call	#__system____builtin_memmove
3241c                 | LR__4818
3241c     0C 4E 05 F1 | 	add	fp, #12
32420     A7 2A 02 FB | 	rdlong	local03, fp
32424     1C 4E 05 F1 | 	add	fp, #28
32428     A7 34 02 FB | 	rdlong	local08, fp
3242c     1A 2B 82 F1 | 	sub	local03, local08
32430     1C 4E 85 F1 | 	sub	fp, #28
32434     A7 2A 62 FC | 	wrlong	local03, fp
32438     04 4E 05 F1 | 	add	fp, #4
3243c     A7 26 02 FB | 	rdlong	local01, fp
32440     13 33 02 FB | 	rdlong	local07, local01
32444     18 4E 05 F1 | 	add	fp, #24
32448     A7 34 02 FB | 	rdlong	local08, fp
3244c     1A 33 02 F1 | 	add	local07, local08
32450     13 33 62 FC | 	wrlong	local07, local01
32454     0C 4E 05 F1 | 	add	fp, #12
32458     A7 2A 02 FB | 	rdlong	local03, fp
3245c     0C 4E 85 F1 | 	sub	fp, #12
32460     A7 3C 02 FB | 	rdlong	local12, fp
32464     1E 2B 02 F1 | 	add	local03, local12
32468     0C 4E 05 F1 | 	add	fp, #12
3246c     A7 2A 62 FC | 	wrlong	local03, fp
32470     30 4E 85 F1 | 	sub	fp, #48
32474     A7 3E 02 FB | 	rdlong	local13, fp
32478     1F 2B 02 F6 | 	mov	local03, local13
3247c     14 3E 06 F1 | 	add	local13, #20
32480     1F 41 02 FB | 	rdlong	local14, local13
32484     24 4E 05 F1 | 	add	fp, #36
32488     A7 30 02 FB | 	rdlong	local06, fp
3248c     28 4E 85 F1 | 	sub	fp, #40
32490     18 41 02 F1 | 	add	local14, local06
32494     14 2A 06 F1 | 	add	local03, #20
32498     15 41 62 FC | 	wrlong	local14, local03
3249c     84 FA 9F FD | 	jmp	#LR__4802
324a0                 | LR__4819
324a0                 | ' 
324a0                 | ' 
324a0                 | ' 
324a0                 | ' 
324a0                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
324a0                 | ' 
324a0                 | ' 	}
324a0                 | ' 
324a0                 | ' 	return FR_OK ;
324a0     00 FA 05 F6 | 	mov	result1, #0
324a4                 | LR__4820
324a4     A7 F0 03 F6 | 	mov	ptra, fp
324a8     B2 00 A0 FD | 	call	#popregs_
324ac                 | _fatfs_cc_f_read_ret
324ac     2D 00 64 FD | 	ret
324b0                 | 
324b0                 | _fatfs_cc_f_write
324b0     15 4A 05 F6 | 	mov	COUNT_, #21
324b4     A8 00 A0 FD | 	call	#pushregs_
324b8     34 F0 07 F1 | 	add	ptra, #52
324bc     04 4E 05 F1 | 	add	fp, #4
324c0     A7 12 62 FC | 	wrlong	arg01, fp
324c4     04 4E 05 F1 | 	add	fp, #4
324c8     A7 14 62 FC | 	wrlong	arg02, fp
324cc     04 4E 05 F1 | 	add	fp, #4
324d0     A7 16 62 FC | 	wrlong	arg03, fp
324d4     04 4E 05 F1 | 	add	fp, #4
324d8     A7 18 62 FC | 	wrlong	arg04, fp
324dc     08 4E 85 F1 | 	sub	fp, #8
324e0     A7 FA 01 FB | 	rdlong	result1, fp
324e4     28 4E 05 F1 | 	add	fp, #40
324e8     A7 FA 61 FC | 	wrlong	result1, fp
324ec     20 4E 85 F1 | 	sub	fp, #32
324f0     A7 FA 01 FB | 	rdlong	result1, fp
324f4     FD 00 68 FC | 	wrlong	#0, result1
324f8     0C 4E 85 F1 | 	sub	fp, #12
324fc     A7 12 02 FB | 	rdlong	arg01, fp
32500     14 4E 05 F1 | 	add	fp, #20
32504     A7 14 02 F6 | 	mov	arg02, fp
32508     18 4E 85 F1 | 	sub	fp, #24
3250c     90 F0 BF FD | 	call	#_fatfs_cc_validate
32510     14 4E 05 F1 | 	add	fp, #20
32514     A7 FA 61 FC | 	wrlong	result1, fp
32518     00 FA 4D F2 | 	cmps	result1, #0 wz
3251c     14 4E 85 F1 | 	sub	fp, #20
32520     20 00 90 5D |  if_ne	jmp	#LR__4830
32524     04 4E 05 F1 | 	add	fp, #4
32528     A7 14 02 FB | 	rdlong	arg02, fp
3252c     11 14 06 F1 | 	add	arg02, #17
32530     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32534     10 4E 05 F1 | 	add	fp, #16
32538     A7 14 62 FC | 	wrlong	arg02, fp
3253c     14 4E 85 F1 | 	sub	fp, #20
32540     10 00 90 AD |  if_e	jmp	#LR__4831
32544                 | LR__4830
32544     14 4E 05 F1 | 	add	fp, #20
32548     A7 FA 01 FB | 	rdlong	result1, fp
3254c     14 4E 85 F1 | 	sub	fp, #20
32550     44 07 90 FD | 	jmp	#LR__4853
32554                 | LR__4831
32554     04 4E 05 F1 | 	add	fp, #4
32558     A7 14 02 FB | 	rdlong	arg02, fp
3255c     04 4E 85 F1 | 	sub	fp, #4
32560     10 14 06 F1 | 	add	arg02, #16
32564     0A 15 C2 FA | 	rdbyte	arg02, arg02
32568     02 14 CE F7 | 	test	arg02, #2 wz
3256c     07 FA 05 A6 |  if_e	mov	result1, #7
32570     24 07 90 AD |  if_e	jmp	#LR__4853
32574     04 4E 05 F1 | 	add	fp, #4
32578     A7 14 02 FB | 	rdlong	arg02, fp
3257c     0A 13 02 F6 | 	mov	arg01, arg02
32580     14 12 06 F1 | 	add	arg01, #20
32584     09 13 02 FB | 	rdlong	arg01, arg01
32588     08 4E 05 F1 | 	add	fp, #8
3258c     A7 FA 01 FB | 	rdlong	result1, fp
32590     FD 12 02 F1 | 	add	arg01, result1
32594     0C 4E 85 F1 | 	sub	fp, #12
32598     14 14 06 F1 | 	add	arg02, #20
3259c     0A FB 01 FB | 	rdlong	result1, arg02
325a0     FD 12 12 F2 | 	cmp	arg01, result1 wc
325a4     24 00 90 3D |  if_ae	jmp	#LR__4832
325a8     04 4E 05 F1 | 	add	fp, #4
325ac     A7 14 02 FB | 	rdlong	arg02, fp
325b0     01 FA 65 F6 | 	neg	result1, #1
325b4     14 14 06 F1 | 	add	arg02, #20
325b8     0A 15 02 FB | 	rdlong	arg02, arg02
325bc     0A FB 81 F1 | 	sub	result1, arg02
325c0     08 4E 05 F1 | 	add	fp, #8
325c4     A7 FA 61 FC | 	wrlong	result1, fp
325c8     0C 4E 85 F1 | 	sub	fp, #12
325cc                 | LR__4832
325cc                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
325cc                 | ' 	}
325cc                 | ' 
325cc                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
325cc                 | LR__4833
325cc     0C 4E 05 F1 | 	add	fp, #12
325d0     A7 FA 01 FB | 	rdlong	result1, fp
325d4     0C 4E 85 F1 | 	sub	fp, #12
325d8     01 FA 15 F2 | 	cmp	result1, #1 wc
325dc     90 06 90 CD |  if_b	jmp	#LR__4852
325e0     04 4E 05 F1 | 	add	fp, #4
325e4     A7 FA 01 FB | 	rdlong	result1, fp
325e8     04 4E 85 F1 | 	sub	fp, #4
325ec     14 FA 05 F1 | 	add	result1, #20
325f0     FD FA 01 FB | 	rdlong	result1, result1
325f4     FF FB CD F7 | 	test	result1, #511 wz
325f8     D8 04 90 5D |  if_ne	jmp	#LR__4848
325fc     04 4E 05 F1 | 	add	fp, #4
32600     A7 FA 01 FB | 	rdlong	result1, fp
32604     14 FA 05 F1 | 	add	result1, #20
32608     FD FA 01 FB | 	rdlong	result1, result1
3260c     09 FA 45 F0 | 	shr	result1, #9
32610     14 4E 05 F1 | 	add	fp, #20
32614     A7 14 02 FB | 	rdlong	arg02, fp
32618     0A 14 06 F1 | 	add	arg02, #10
3261c     0A 19 E2 FA | 	rdword	arg04, arg02
32620     0C 15 32 F9 | 	getword	arg02, arg04, #0
32624     01 14 86 F1 | 	sub	arg02, #1
32628     0A FB 09 F5 | 	and	result1, arg02 wz
3262c     14 4E 05 F1 | 	add	fp, #20
32630     A7 FA 61 FC | 	wrlong	result1, fp
32634     2C 4E 85 F1 | 	sub	fp, #44
32638     44 01 90 5D |  if_ne	jmp	#LR__4839
3263c     04 4E 05 F1 | 	add	fp, #4
32640     A7 FA 01 FB | 	rdlong	result1, fp
32644     04 4E 85 F1 | 	sub	fp, #4
32648     14 FA 05 F1 | 	add	result1, #20
3264c     FD 14 0A FB | 	rdlong	arg02, result1 wz
32650     44 00 90 5D |  if_ne	jmp	#LR__4834
32654     04 4E 05 F1 | 	add	fp, #4
32658     A7 14 02 FB | 	rdlong	arg02, fp
3265c     08 14 06 F1 | 	add	arg02, #8
32660     0A 15 0A FB | 	rdlong	arg02, arg02 wz
32664     18 4E 05 F1 | 	add	fp, #24
32668     A7 14 62 FC | 	wrlong	arg02, fp
3266c     1C 4E 85 F1 | 	sub	fp, #28
32670     4C 00 90 5D |  if_ne	jmp	#LR__4835
32674     04 4E 05 F1 | 	add	fp, #4
32678     A7 12 02 FB | 	rdlong	arg01, fp
3267c     04 4E 85 F1 | 	sub	fp, #4
32680     00 14 06 F6 | 	mov	arg02, #0
32684     88 D7 BF FD | 	call	#_fatfs_cc_create_chain
32688     1C 4E 05 F1 | 	add	fp, #28
3268c     A7 FA 61 FC | 	wrlong	result1, fp
32690     1C 4E 85 F1 | 	sub	fp, #28
32694     28 00 90 FD | 	jmp	#LR__4835
32698                 | LR__4834
32698     04 4E 05 F1 | 	add	fp, #4
3269c     A7 18 02 FB | 	rdlong	arg04, fp
326a0     0C 13 02 F6 | 	mov	arg01, arg04
326a4     04 4E 85 F1 | 	sub	fp, #4
326a8     18 18 06 F1 | 	add	arg04, #24
326ac     0C 15 02 FB | 	rdlong	arg02, arg04
326b0     5C D7 BF FD | 	call	#_fatfs_cc_create_chain
326b4     1C 4E 05 F1 | 	add	fp, #28
326b8     A7 FA 61 FC | 	wrlong	result1, fp
326bc     1C 4E 85 F1 | 	sub	fp, #28
326c0                 | LR__4835
326c0     1C 4E 05 F1 | 	add	fp, #28
326c4     A7 FA 09 FB | 	rdlong	result1, fp wz
326c8     1C 4E 85 F1 | 	sub	fp, #28
326cc     A0 05 90 AD |  if_e	jmp	#LR__4852
326d0     1C 4E 05 F1 | 	add	fp, #28
326d4     A7 FA 01 FB | 	rdlong	result1, fp
326d8     1C 4E 85 F1 | 	sub	fp, #28
326dc     01 FA 0D F2 | 	cmp	result1, #1 wz
326e0     1C 00 90 5D |  if_ne	jmp	#LR__4836
326e4     04 4E 05 F1 | 	add	fp, #4
326e8     A7 FA 01 FB | 	rdlong	result1, fp
326ec     04 4E 85 F1 | 	sub	fp, #4
326f0     11 FA 05 F1 | 	add	result1, #17
326f4     FD 04 48 FC | 	wrbyte	#2, result1
326f8     02 FA 05 F6 | 	mov	result1, #2
326fc     98 05 90 FD | 	jmp	#LR__4853
32700                 | LR__4836
32700     1C 4E 05 F1 | 	add	fp, #28
32704     A7 FA 01 FB | 	rdlong	result1, fp
32708     1C 4E 85 F1 | 	sub	fp, #28
3270c     FF FF 7F FF 
32710     FF FB 0D F2 | 	cmp	result1, ##-1 wz
32714     1C 00 90 5D |  if_ne	jmp	#LR__4837
32718     04 4E 05 F1 | 	add	fp, #4
3271c     A7 FA 01 FB | 	rdlong	result1, fp
32720     04 4E 85 F1 | 	sub	fp, #4
32724     11 FA 05 F1 | 	add	result1, #17
32728     FD 02 48 FC | 	wrbyte	#1, result1
3272c     01 FA 05 F6 | 	mov	result1, #1
32730     64 05 90 FD | 	jmp	#LR__4853
32734                 | LR__4837
32734     04 4E 05 F1 | 	add	fp, #4
32738     A7 FA 01 FB | 	rdlong	result1, fp
3273c     18 4E 05 F1 | 	add	fp, #24
32740     A7 18 02 FB | 	rdlong	arg04, fp
32744     18 FA 05 F1 | 	add	result1, #24
32748     FD 18 62 FC | 	wrlong	arg04, result1
3274c     18 4E 85 F1 | 	sub	fp, #24
32750     A7 FA 01 FB | 	rdlong	result1, fp
32754     04 4E 85 F1 | 	sub	fp, #4
32758     08 FA 05 F1 | 	add	result1, #8
3275c     FD FA 09 FB | 	rdlong	result1, result1 wz
32760     1C 00 90 5D |  if_ne	jmp	#LR__4838
32764     04 4E 05 F1 | 	add	fp, #4
32768     A7 18 02 FB | 	rdlong	arg04, fp
3276c     18 4E 05 F1 | 	add	fp, #24
32770     A7 FA 01 FB | 	rdlong	result1, fp
32774     1C 4E 85 F1 | 	sub	fp, #28
32778     08 18 06 F1 | 	add	arg04, #8
3277c     0C FB 61 FC | 	wrlong	result1, arg04
32780                 | LR__4838
32780                 | LR__4839
32780     04 4E 05 F1 | 	add	fp, #4
32784     A7 18 02 FB | 	rdlong	arg04, fp
32788     04 4E 85 F1 | 	sub	fp, #4
3278c     10 18 06 F1 | 	add	arg04, #16
32790     0C 19 C2 FA | 	rdbyte	arg04, arg04
32794     80 18 CE F7 | 	test	arg04, #128 wz
32798     7C 00 90 AD |  if_e	jmp	#LR__4841
3279c     18 4E 05 F1 | 	add	fp, #24
327a0     A7 18 02 FB | 	rdlong	arg04, fp
327a4     01 18 06 F1 | 	add	arg04, #1
327a8     0C 13 C2 FA | 	rdbyte	arg01, arg04
327ac     14 4E 85 F1 | 	sub	fp, #20
327b0     A7 18 02 FB | 	rdlong	arg04, fp
327b4     0C 15 02 F6 | 	mov	arg02, arg04
327b8     28 14 06 F1 | 	add	arg02, #40
327bc     04 4E 85 F1 | 	sub	fp, #4
327c0     1C 18 06 F1 | 	add	arg04, #28
327c4     0C 17 02 FB | 	rdlong	arg03, arg04
327c8     01 18 06 F6 | 	mov	arg04, #1
327cc     6C CB BF FD | 	call	#_fatfs_cc_disk_write
327d0     00 FA 0D F2 | 	cmp	result1, #0 wz
327d4     1C 00 90 AD |  if_e	jmp	#LR__4840
327d8     04 4E 05 F1 | 	add	fp, #4
327dc     A7 FA 01 FB | 	rdlong	result1, fp
327e0     04 4E 85 F1 | 	sub	fp, #4
327e4     11 FA 05 F1 | 	add	result1, #17
327e8     FD 02 48 FC | 	wrbyte	#1, result1
327ec     01 FA 05 F6 | 	mov	result1, #1
327f0     A4 04 90 FD | 	jmp	#LR__4853
327f4                 | LR__4840
327f4     04 4E 05 F1 | 	add	fp, #4
327f8     A7 18 02 FB | 	rdlong	arg04, fp
327fc     0C FB 01 F6 | 	mov	result1, arg04
32800     04 4E 85 F1 | 	sub	fp, #4
32804     10 18 06 F1 | 	add	arg04, #16
32808     0C 19 C2 FA | 	rdbyte	arg04, arg04
3280c     7F 18 06 F5 | 	and	arg04, #127
32810     10 FA 05 F1 | 	add	result1, #16
32814     FD 18 42 FC | 	wrbyte	arg04, result1
32818                 | LR__4841
32818     18 4E 05 F1 | 	add	fp, #24
3281c     A7 12 02 FB | 	rdlong	arg01, fp
32820     14 4E 85 F1 | 	sub	fp, #20
32824     A7 14 02 FB | 	rdlong	arg02, fp
32828     04 4E 85 F1 | 	sub	fp, #4
3282c     18 14 06 F1 | 	add	arg02, #24
32830     0A 15 02 FB | 	rdlong	arg02, arg02
32834     D0 D0 BF FD | 	call	#_fatfs_cc_clst2sect
32838     20 4E 05 F1 | 	add	fp, #32
3283c     A7 FA 61 FC | 	wrlong	result1, fp
32840     20 4E 85 F1 | 	sub	fp, #32
32844     00 FA 0D F2 | 	cmp	result1, #0 wz
32848     1C 00 90 5D |  if_ne	jmp	#LR__4842
3284c     04 4E 05 F1 | 	add	fp, #4
32850     A7 FA 01 FB | 	rdlong	result1, fp
32854     04 4E 85 F1 | 	sub	fp, #4
32858     11 FA 05 F1 | 	add	result1, #17
3285c     FD 04 48 FC | 	wrbyte	#2, result1
32860     02 FA 05 F6 | 	mov	result1, #2
32864     30 04 90 FD | 	jmp	#LR__4853
32868                 | LR__4842
32868     20 4E 05 F1 | 	add	fp, #32
3286c     A7 FA 01 FB | 	rdlong	result1, fp
32870     0C 4E 05 F1 | 	add	fp, #12
32874     A7 26 02 FB | 	rdlong	local01, fp
32878     13 FB 01 F1 | 	add	result1, local01
3287c     0C 4E 85 F1 | 	sub	fp, #12
32880     A7 FA 61 FC | 	wrlong	result1, fp
32884     14 4E 85 F1 | 	sub	fp, #20
32888     A7 FA 01 FB | 	rdlong	result1, fp
3288c     09 FA 45 F0 | 	shr	result1, #9
32890     1C 4E 05 F1 | 	add	fp, #28
32894     A7 FA 61 FC | 	wrlong	result1, fp
32898     28 4E 85 F1 | 	sub	fp, #40
3289c     01 FA 15 F2 | 	cmp	result1, #1 wc
328a0     60 01 90 CD |  if_b	jmp	#LR__4846
328a4     2C 4E 05 F1 | 	add	fp, #44
328a8     A7 FA 01 FB | 	rdlong	result1, fp
328ac     04 4E 85 F1 | 	sub	fp, #4
328b0     A7 18 02 FB | 	rdlong	arg04, fp
328b4     0C FB 01 F1 | 	add	result1, arg04
328b8     10 4E 85 F1 | 	sub	fp, #16
328bc     A7 18 02 FB | 	rdlong	arg04, fp
328c0     18 4E 85 F1 | 	sub	fp, #24
328c4     0A 18 06 F1 | 	add	arg04, #10
328c8     0C 19 E2 FA | 	rdword	arg04, arg04
328cc     0C FB 19 F2 | 	cmp	result1, arg04 wcz
328d0     28 00 90 ED |  if_be	jmp	#LR__4843
328d4     18 4E 05 F1 | 	add	fp, #24
328d8     A7 FA 01 FB | 	rdlong	result1, fp
328dc     0A FA 05 F1 | 	add	result1, #10
328e0     FD FA E1 FA | 	rdword	result1, result1
328e4     14 4E 05 F1 | 	add	fp, #20
328e8     A7 18 02 FB | 	rdlong	arg04, fp
328ec     0C FB 81 F1 | 	sub	result1, arg04
328f0     04 4E 85 F1 | 	sub	fp, #4
328f4     A7 FA 61 FC | 	wrlong	result1, fp
328f8     28 4E 85 F1 | 	sub	fp, #40
328fc                 | LR__4843
328fc     18 4E 05 F1 | 	add	fp, #24
32900     A7 18 02 FB | 	rdlong	arg04, fp
32904     01 18 06 F1 | 	add	arg04, #1
32908     0C 13 C2 FA | 	rdbyte	arg01, arg04
3290c     18 4E 05 F1 | 	add	fp, #24
32910     A7 14 02 FB | 	rdlong	arg02, fp
32914     10 4E 85 F1 | 	sub	fp, #16
32918     A7 16 02 FB | 	rdlong	arg03, fp
3291c     08 4E 05 F1 | 	add	fp, #8
32920     A7 18 02 FB | 	rdlong	arg04, fp
32924     28 4E 85 F1 | 	sub	fp, #40
32928     10 CA BF FD | 	call	#_fatfs_cc_disk_write
3292c     00 FA 0D F2 | 	cmp	result1, #0 wz
32930     1C 00 90 AD |  if_e	jmp	#LR__4844
32934     04 4E 05 F1 | 	add	fp, #4
32938     A7 26 02 FB | 	rdlong	local01, fp
3293c     04 4E 85 F1 | 	sub	fp, #4
32940     11 26 06 F1 | 	add	local01, #17
32944     13 03 48 FC | 	wrbyte	#1, local01
32948     01 FA 05 F6 | 	mov	result1, #1
3294c     48 03 90 FD | 	jmp	#LR__4853
32950                 | LR__4844
32950     04 4E 05 F1 | 	add	fp, #4
32954     A7 FA 01 FB | 	rdlong	result1, fp
32958     1C FA 05 F1 | 	add	result1, #28
3295c     FD FA 01 FB | 	rdlong	result1, result1
32960     1C 4E 05 F1 | 	add	fp, #28
32964     A7 28 02 FB | 	rdlong	local02, fp
32968     14 FB 81 F1 | 	sub	result1, local02
3296c     08 4E 05 F1 | 	add	fp, #8
32970     A7 18 02 FB | 	rdlong	arg04, fp
32974     28 4E 85 F1 | 	sub	fp, #40
32978     0C FB 11 F2 | 	cmp	result1, arg04 wc
3297c     68 00 90 3D |  if_ae	jmp	#LR__4845
32980     04 4E 05 F1 | 	add	fp, #4
32984     A7 12 02 FB | 	rdlong	arg01, fp
32988     28 12 06 F1 | 	add	arg01, #40
3298c     2C 4E 05 F1 | 	add	fp, #44
32990     A7 14 02 FB | 	rdlong	arg02, fp
32994     2C 4E 85 F1 | 	sub	fp, #44
32998     A7 FA 01 FB | 	rdlong	result1, fp
3299c     1C FA 05 F1 | 	add	result1, #28
329a0     FD 2A 02 FB | 	rdlong	local03, result1
329a4     1C 4E 05 F1 | 	add	fp, #28
329a8     A7 18 02 FB | 	rdlong	arg04, fp
329ac     20 4E 85 F1 | 	sub	fp, #32
329b0     0C 2B 82 F1 | 	sub	local03, arg04
329b4     09 2A 66 F0 | 	shl	local03, #9
329b8     15 15 02 F1 | 	add	arg02, local03
329bc     09 16 C6 F9 | 	decod	arg03, #9
329c0     FC 55 BF FD | 	call	#__system____builtin_memmove
329c4     04 4E 05 F1 | 	add	fp, #4
329c8     A7 18 02 FB | 	rdlong	arg04, fp
329cc     0C FB 01 F6 | 	mov	result1, arg04
329d0     04 4E 85 F1 | 	sub	fp, #4
329d4     10 18 06 F1 | 	add	arg04, #16
329d8     0C 19 C2 FA | 	rdbyte	arg04, arg04
329dc     7F 18 06 F5 | 	and	arg04, #127
329e0     10 FA 05 F1 | 	add	result1, #16
329e4     FD 18 42 FC | 	wrbyte	arg04, result1
329e8                 | LR__4845
329e8     28 4E 05 F1 | 	add	fp, #40
329ec     A7 FA 01 FB | 	rdlong	result1, fp
329f0     09 FA 65 F0 | 	shl	result1, #9
329f4     04 4E 85 F1 | 	sub	fp, #4
329f8     A7 FA 61 FC | 	wrlong	result1, fp
329fc     24 4E 85 F1 | 	sub	fp, #36
32a00                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
32a00                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
32a00                 | ' 				}
32a00                 | ' 
32a00                 | ' 
32a00                 | ' 				wcnt =  ((UINT) 512 )  * cc;
32a00                 | ' 				continue;
32a00     74 01 90 FD | 	jmp	#LR__4849
32a04                 | LR__4846
32a04     04 4E 05 F1 | 	add	fp, #4
32a08     A7 28 02 FB | 	rdlong	local02, fp
32a0c     1C 28 06 F1 | 	add	local02, #28
32a10     14 FB 01 FB | 	rdlong	result1, local02
32a14     1C 4E 05 F1 | 	add	fp, #28
32a18     A7 28 02 FB | 	rdlong	local02, fp
32a1c     20 4E 85 F1 | 	sub	fp, #32
32a20     14 FB 09 F2 | 	cmp	result1, local02 wz
32a24     90 00 90 AD |  if_e	jmp	#LR__4847
32a28     04 4E 05 F1 | 	add	fp, #4
32a2c     A7 FA 01 FB | 	rdlong	result1, fp
32a30     FD 2A 02 F6 | 	mov	local03, result1
32a34     04 4E 85 F1 | 	sub	fp, #4
32a38     14 2A 06 F1 | 	add	local03, #20
32a3c     15 2B 02 FB | 	rdlong	local03, local03
32a40     0C FA 05 F1 | 	add	result1, #12
32a44     FD 2C 02 FB | 	rdlong	local04, result1
32a48     16 2F 02 F6 | 	mov	local05, local04
32a4c     17 2B 12 F2 | 	cmp	local03, local05 wc
32a50     64 00 90 3D |  if_ae	jmp	#LR__4847
32a54     18 4E 05 F1 | 	add	fp, #24
32a58     A7 18 02 FB | 	rdlong	arg04, fp
32a5c     01 18 06 F1 | 	add	arg04, #1
32a60     0C 13 C2 FA | 	rdbyte	arg01, arg04
32a64     14 4E 85 F1 | 	sub	fp, #20
32a68     A7 30 02 FB | 	rdlong	local06, fp
32a6c     28 30 06 F1 | 	add	local06, #40
32a70     18 33 02 F6 | 	mov	local07, local06
32a74     1C 4E 05 F1 | 	add	fp, #28
32a78     A7 34 02 FB | 	rdlong	local08, fp
32a7c     20 4E 85 F1 | 	sub	fp, #32
32a80     01 36 06 F6 | 	mov	local09, #1
32a84     19 15 02 F6 | 	mov	arg02, local07
32a88     1A 17 02 F6 | 	mov	arg03, local08
32a8c     01 18 06 F6 | 	mov	arg04, #1
32a90     E8 C7 BF FD | 	call	#_fatfs_cc_disk_read
32a94     FD 38 0A F6 | 	mov	local10, result1 wz
32a98     1C 00 90 AD |  if_e	jmp	#LR__4847
32a9c     04 4E 05 F1 | 	add	fp, #4
32aa0     A7 38 02 FB | 	rdlong	local10, fp
32aa4     04 4E 85 F1 | 	sub	fp, #4
32aa8     11 38 06 F1 | 	add	local10, #17
32aac     1C 03 48 FC | 	wrbyte	#1, local10
32ab0                 | ' 				fp->fptr < fp->obj.objsize &&
32ab0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
32ab0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
32ab0     01 FA 05 F6 | 	mov	result1, #1
32ab4     E0 01 90 FD | 	jmp	#LR__4853
32ab8                 | LR__4847
32ab8     04 4E 05 F1 | 	add	fp, #4
32abc     A7 18 02 FB | 	rdlong	arg04, fp
32ac0     1C 4E 05 F1 | 	add	fp, #28
32ac4     A7 FA 01 FB | 	rdlong	result1, fp
32ac8     20 4E 85 F1 | 	sub	fp, #32
32acc     1C 18 06 F1 | 	add	arg04, #28
32ad0     0C FB 61 FC | 	wrlong	result1, arg04
32ad4                 | LR__4848
32ad4     04 4E 05 F1 | 	add	fp, #4
32ad8     A7 FA 01 FB | 	rdlong	result1, fp
32adc     14 FA 05 F1 | 	add	result1, #20
32ae0     FD FA 01 FB | 	rdlong	result1, result1
32ae4     FF FB 05 F5 | 	and	result1, #511
32ae8     09 3A C6 F9 | 	decod	local11, #9
32aec     FD 3A 82 F1 | 	sub	local11, result1
32af0     20 4E 05 F1 | 	add	fp, #32
32af4     A7 3A 62 FC | 	wrlong	local11, fp
32af8     18 4E 85 F1 | 	sub	fp, #24
32afc     A7 FA 01 FB | 	rdlong	result1, fp
32b00     0C 4E 85 F1 | 	sub	fp, #12
32b04     FD 3A 1A F2 | 	cmp	local11, result1 wcz
32b08     0C 4E 05 11 |  if_a	add	fp, #12
32b0c     A7 3A 02 1B |  if_a	rdlong	local11, fp
32b10     18 4E 05 11 |  if_a	add	fp, #24
32b14     A7 3A 62 1C |  if_a	wrlong	local11, fp
32b18     24 4E 85 11 |  if_a	sub	fp, #36
32b1c     04 4E 05 F1 | 	add	fp, #4
32b20     A7 3A 02 FB | 	rdlong	local11, fp
32b24     1D 13 02 F6 | 	mov	arg01, local11
32b28     28 12 06 F1 | 	add	arg01, #40
32b2c     14 3A 06 F1 | 	add	local11, #20
32b30     1D 3B 02 FB | 	rdlong	local11, local11
32b34     FF 3B 06 F5 | 	and	local11, #511
32b38     1D 13 02 F1 | 	add	arg01, local11
32b3c     2C 4E 05 F1 | 	add	fp, #44
32b40     A7 14 02 FB | 	rdlong	arg02, fp
32b44     0C 4E 85 F1 | 	sub	fp, #12
32b48     A7 16 02 FB | 	rdlong	arg03, fp
32b4c     24 4E 85 F1 | 	sub	fp, #36
32b50     6C 54 BF FD | 	call	#__system____builtin_memmove
32b54     04 4E 05 F1 | 	add	fp, #4
32b58     A7 FA 01 FB | 	rdlong	result1, fp
32b5c     FD 3A 02 F6 | 	mov	local11, result1
32b60     04 4E 85 F1 | 	sub	fp, #4
32b64     10 FA 05 F1 | 	add	result1, #16
32b68     FD FA C1 FA | 	rdbyte	result1, result1
32b6c     80 FA 45 F5 | 	or	result1, #128
32b70     10 3A 06 F1 | 	add	local11, #16
32b74     1D FB 41 FC | 	wrbyte	result1, local11
32b78                 | LR__4849
32b78     0C 4E 05 F1 | 	add	fp, #12
32b7c     A7 3A 02 FB | 	rdlong	local11, fp
32b80     18 4E 05 F1 | 	add	fp, #24
32b84     A7 FA 01 FB | 	rdlong	result1, fp
32b88     FD 3A 82 F1 | 	sub	local11, result1
32b8c     18 4E 85 F1 | 	sub	fp, #24
32b90     A7 3A 62 FC | 	wrlong	local11, fp
32b94     04 4E 05 F1 | 	add	fp, #4
32b98     A7 3C 02 FB | 	rdlong	local12, fp
32b9c     1E 3B 02 FB | 	rdlong	local11, local12
32ba0     14 4E 05 F1 | 	add	fp, #20
32ba4     A7 3E 02 FB | 	rdlong	local13, fp
32ba8     1F 3B 02 F1 | 	add	local11, local13
32bac     1E 3B 62 FC | 	wrlong	local11, local12
32bb0     0C 4E 05 F1 | 	add	fp, #12
32bb4     A7 3A 02 FB | 	rdlong	local11, fp
32bb8     0C 4E 85 F1 | 	sub	fp, #12
32bbc     A7 40 02 FB | 	rdlong	local14, fp
32bc0     20 3B 02 F1 | 	add	local11, local14
32bc4     0C 4E 05 F1 | 	add	fp, #12
32bc8     A7 3A 62 FC | 	wrlong	local11, fp
32bcc     2C 4E 85 F1 | 	sub	fp, #44
32bd0     A7 42 02 FB | 	rdlong	local15, fp
32bd4     21 3B 02 F6 | 	mov	local11, local15
32bd8     14 42 06 F1 | 	add	local15, #20
32bdc     21 43 02 FB | 	rdlong	local15, local15
32be0     20 4E 05 F1 | 	add	fp, #32
32be4     A7 44 02 FB | 	rdlong	local16, fp
32be8     22 43 02 F1 | 	add	local15, local16
32bec     14 3A 06 F1 | 	add	local11, #20
32bf0     1D 43 62 FC | 	wrlong	local15, local11
32bf4     20 4E 85 F1 | 	sub	fp, #32
32bf8     A7 46 02 FB | 	rdlong	local17, fp
32bfc     23 3B 02 F6 | 	mov	local11, local17
32c00     23 49 02 F6 | 	mov	local18, local17
32c04     04 4E 85 F1 | 	sub	fp, #4
32c08     14 46 06 F1 | 	add	local17, #20
32c0c     23 4B 02 FB | 	rdlong	local19, local17
32c10     0C 48 06 F1 | 	add	local18, #12
32c14     24 4D 02 FB | 	rdlong	local20, local18
32c18     26 4B 1A F2 | 	cmp	local19, local20 wcz
32c1c     24 00 90 ED |  if_be	jmp	#LR__4850
32c20     04 4E 05 F1 | 	add	fp, #4
32c24     A7 2E 02 FB | 	rdlong	local05, fp
32c28     04 4E 85 F1 | 	sub	fp, #4
32c2c     17 2B 02 F6 | 	mov	local03, local05
32c30     14 2A 06 F1 | 	add	local03, #20
32c34     15 2D 02 FB | 	rdlong	local04, local03
32c38     14 2A 86 F1 | 	sub	local03, #20
32c3c     16 4F 02 F6 | 	mov	local21, local04
32c40     20 00 90 FD | 	jmp	#LR__4851
32c44                 | LR__4850
32c44     04 4E 05 F1 | 	add	fp, #4
32c48     A7 32 02 FB | 	rdlong	local07, fp
32c4c     04 4E 85 F1 | 	sub	fp, #4
32c50     19 39 02 F6 | 	mov	local10, local07
32c54     0C 38 06 F1 | 	add	local10, #12
32c58     1C 35 02 FB | 	rdlong	local08, local10
32c5c     0C 38 86 F1 | 	sub	local10, #12
32c60     1A 4F 02 F6 | 	mov	local21, local08
32c64                 | LR__4851
32c64     0C 3A 06 F1 | 	add	local11, #12
32c68     1D 4F 62 FC | 	wrlong	local21, local11
32c6c     5C F9 9F FD | 	jmp	#LR__4833
32c70                 | LR__4852
32c70     04 4E 05 F1 | 	add	fp, #4
32c74     A7 3C 02 FB | 	rdlong	local12, fp
32c78     1E 27 02 F6 | 	mov	local01, local12
32c7c     04 4E 85 F1 | 	sub	fp, #4
32c80     10 3C 06 F1 | 	add	local12, #16
32c84     1E 3B C2 FA | 	rdbyte	local11, local12
32c88     40 3A 46 F5 | 	or	local11, #64
32c8c     10 26 06 F1 | 	add	local01, #16
32c90     13 3B 42 FC | 	wrbyte	local11, local01
32c94                 | ' 
32c94                 | ' 
32c94                 | ' 
32c94                 | ' 
32c94                 | ' 
32c94                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
32c94                 | ' 		fp->flag |=  0x80 ;
32c94                 | ' 
32c94                 | ' 	}
32c94                 | ' 
32c94                 | ' 	fp->flag |=  0x40 ;
32c94                 | ' 
32c94                 | ' 	return FR_OK ;
32c94     00 FA 05 F6 | 	mov	result1, #0
32c98                 | LR__4853
32c98     A7 F0 03 F6 | 	mov	ptra, fp
32c9c     B2 00 A0 FD | 	call	#popregs_
32ca0                 | _fatfs_cc_f_write_ret
32ca0     2D 00 64 FD | 	ret
32ca4                 | 
32ca4                 | _fatfs_cc_f_sync
32ca4     00 4A 05 F6 | 	mov	COUNT_, #0
32ca8     A8 00 A0 FD | 	call	#pushregs_
32cac     18 F0 07 F1 | 	add	ptra, #24
32cb0     04 4E 05 F1 | 	add	fp, #4
32cb4     A7 12 62 FC | 	wrlong	arg01, fp
32cb8     08 4E 05 F1 | 	add	fp, #8
32cbc     A7 14 02 F6 | 	mov	arg02, fp
32cc0     0C 4E 85 F1 | 	sub	fp, #12
32cc4     D8 E8 BF FD | 	call	#_fatfs_cc_validate
32cc8     08 4E 05 F1 | 	add	fp, #8
32ccc     A7 FA 61 FC | 	wrlong	result1, fp
32cd0     08 4E 85 F1 | 	sub	fp, #8
32cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
32cd8     C0 01 90 5D |  if_ne	jmp	#LR__4863
32cdc     04 4E 05 F1 | 	add	fp, #4
32ce0     A7 18 02 FB | 	rdlong	arg04, fp
32ce4     04 4E 85 F1 | 	sub	fp, #4
32ce8     10 18 06 F1 | 	add	arg04, #16
32cec     0C 19 C2 FA | 	rdbyte	arg04, arg04
32cf0     40 18 CE F7 | 	test	arg04, #64 wz
32cf4     A4 01 90 AD |  if_e	jmp	#LR__4862
32cf8     04 4E 05 F1 | 	add	fp, #4
32cfc     A7 18 02 FB | 	rdlong	arg04, fp
32d00     04 4E 85 F1 | 	sub	fp, #4
32d04     10 18 06 F1 | 	add	arg04, #16
32d08     0C 19 C2 FA | 	rdbyte	arg04, arg04
32d0c     80 18 CE F7 | 	test	arg04, #128 wz
32d10     64 00 90 AD |  if_e	jmp	#LR__4860
32d14     0C 4E 05 F1 | 	add	fp, #12
32d18     A7 18 02 FB | 	rdlong	arg04, fp
32d1c     01 18 06 F1 | 	add	arg04, #1
32d20     0C 13 C2 FA | 	rdbyte	arg01, arg04
32d24     08 4E 85 F1 | 	sub	fp, #8
32d28     A7 18 02 FB | 	rdlong	arg04, fp
32d2c     0C 15 02 F6 | 	mov	arg02, arg04
32d30     28 14 06 F1 | 	add	arg02, #40
32d34     04 4E 85 F1 | 	sub	fp, #4
32d38     1C 18 06 F1 | 	add	arg04, #28
32d3c     0C 17 02 FB | 	rdlong	arg03, arg04
32d40     01 18 06 F6 | 	mov	arg04, #1
32d44     F4 C5 BF FD | 	call	#_fatfs_cc_disk_write
32d48     00 FA 0D F2 | 	cmp	result1, #0 wz
32d4c     01 FA 05 56 |  if_ne	mov	result1, #1
32d50     54 01 90 5D |  if_ne	jmp	#LR__4864
32d54     04 4E 05 F1 | 	add	fp, #4
32d58     A7 18 02 FB | 	rdlong	arg04, fp
32d5c     0C 17 02 F6 | 	mov	arg03, arg04
32d60     04 4E 85 F1 | 	sub	fp, #4
32d64     10 18 06 F1 | 	add	arg04, #16
32d68     0C 19 C2 FA | 	rdbyte	arg04, arg04
32d6c     7F 18 06 F5 | 	and	arg04, #127
32d70     10 16 06 F1 | 	add	arg03, #16
32d74     0B 19 42 FC | 	wrbyte	arg04, arg03
32d78                 | LR__4860
32d78     0C 1A B0 FD | 	call	#_fatfs_cc__get_fattime
32d7c     10 4E 05 F1 | 	add	fp, #16
32d80     A7 FA 61 FC | 	wrlong	result1, fp
32d84     04 4E 85 F1 | 	sub	fp, #4
32d88     A7 12 02 FB | 	rdlong	arg01, fp
32d8c     08 4E 85 F1 | 	sub	fp, #8
32d90     A7 18 02 FB | 	rdlong	arg04, fp
32d94     04 4E 85 F1 | 	sub	fp, #4
32d98     20 18 06 F1 | 	add	arg04, #32
32d9c     0C 15 02 FB | 	rdlong	arg02, arg04
32da0     EC C9 BF FD | 	call	#_fatfs_cc_move_window
32da4     08 4E 05 F1 | 	add	fp, #8
32da8     A7 FA 61 FC | 	wrlong	result1, fp
32dac     08 4E 85 F1 | 	sub	fp, #8
32db0     00 FA 0D F2 | 	cmp	result1, #0 wz
32db4     E4 00 90 5D |  if_ne	jmp	#LR__4861
32db8     04 4E 05 F1 | 	add	fp, #4
32dbc     A7 18 02 FB | 	rdlong	arg04, fp
32dc0     24 18 06 F1 | 	add	arg04, #36
32dc4     0C 19 02 FB | 	rdlong	arg04, arg04
32dc8     10 4E 05 F1 | 	add	fp, #16
32dcc     A7 18 62 FC | 	wrlong	arg04, fp
32dd0     0C 17 02 F6 | 	mov	arg03, arg04
32dd4     0B 16 06 F1 | 	add	arg03, #11
32dd8     0B 17 C2 FA | 	rdbyte	arg03, arg03
32ddc     20 16 46 F5 | 	or	arg03, #32
32de0     0B 18 06 F1 | 	add	arg04, #11
32de4     0C 17 42 FC | 	wrbyte	arg03, arg04
32de8     10 4E 85 F1 | 	sub	fp, #16
32dec     A7 18 02 FB | 	rdlong	arg04, fp
32df0     0C 13 02 FB | 	rdlong	arg01, arg04
32df4     10 4E 05 F1 | 	add	fp, #16
32df8     A7 14 02 FB | 	rdlong	arg02, fp
32dfc     14 4E 85 F1 | 	sub	fp, #20
32e00     08 18 06 F1 | 	add	arg04, #8
32e04     0C 17 02 FB | 	rdlong	arg03, arg04
32e08     F0 D6 BF FD | 	call	#_fatfs_cc_st_clust
32e0c     14 4E 05 F1 | 	add	fp, #20
32e10     A7 12 02 FB | 	rdlong	arg01, fp
32e14     1C 12 06 F1 | 	add	arg01, #28
32e18     10 4E 85 F1 | 	sub	fp, #16
32e1c     A7 18 02 FB | 	rdlong	arg04, fp
32e20     0C 18 06 F1 | 	add	arg04, #12
32e24     0C 15 02 FB | 	rdlong	arg02, arg04
32e28     09 15 62 FC | 	wrlong	arg02, arg01
32e2c     10 4E 05 F1 | 	add	fp, #16
32e30     A7 12 02 FB | 	rdlong	arg01, fp
32e34     16 12 06 F1 | 	add	arg01, #22
32e38     04 4E 85 F1 | 	sub	fp, #4
32e3c     A7 14 02 FB | 	rdlong	arg02, fp
32e40     09 15 62 FC | 	wrlong	arg02, arg01
32e44     04 4E 05 F1 | 	add	fp, #4
32e48     A7 12 02 FB | 	rdlong	arg01, fp
32e4c     12 12 06 F1 | 	add	arg01, #18
32e50     09 01 58 FC | 	wrword	#0, arg01
32e54     08 4E 85 F1 | 	sub	fp, #8
32e58     A7 18 02 FB | 	rdlong	arg04, fp
32e5c     03 18 06 F1 | 	add	arg04, #3
32e60     0C 03 48 FC | 	wrbyte	#1, arg04
32e64     A7 12 02 FB | 	rdlong	arg01, fp
32e68     0C 4E 85 F1 | 	sub	fp, #12
32e6c     98 C9 BF FD | 	call	#_fatfs_cc_sync_fs
32e70     08 4E 05 F1 | 	add	fp, #8
32e74     A7 FA 61 FC | 	wrlong	result1, fp
32e78     04 4E 85 F1 | 	sub	fp, #4
32e7c     A7 18 02 FB | 	rdlong	arg04, fp
32e80     0C 17 02 F6 | 	mov	arg03, arg04
32e84     04 4E 85 F1 | 	sub	fp, #4
32e88     10 18 06 F1 | 	add	arg04, #16
32e8c     0C 19 C2 FA | 	rdbyte	arg04, arg04
32e90     BF 18 06 F5 | 	and	arg04, #191
32e94     10 16 06 F1 | 	add	arg03, #16
32e98     0B 19 42 FC | 	wrbyte	arg04, arg03
32e9c                 | LR__4861
32e9c                 | LR__4862
32e9c                 | LR__4863
32e9c                 | ' 					dir = fp->dir_ptr;
32e9c                 | ' 					dir[ 11 ] |=  0x20 ;
32e9c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
32e9c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
32e9c                 | ' 					st_dword(dir +  22 , tm);
32e9c                 | ' 					st_word(dir +  18 , 0);
32e9c                 | ' 					fs->wflag = 1;
32e9c                 | ' 					res = sync_fs(fs);
32e9c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
32e9c                 | ' 				}
32e9c                 | ' 			}
32e9c                 | ' 		}
32e9c                 | ' 	}
32e9c                 | ' 
32e9c                 | ' 	return res ;
32e9c     08 4E 05 F1 | 	add	fp, #8
32ea0     A7 FA 01 FB | 	rdlong	result1, fp
32ea4     08 4E 85 F1 | 	sub	fp, #8
32ea8                 | LR__4864
32ea8     A7 F0 03 F6 | 	mov	ptra, fp
32eac     B2 00 A0 FD | 	call	#popregs_
32eb0                 | _fatfs_cc_f_sync_ret
32eb0     2D 00 64 FD | 	ret
32eb4                 | 
32eb4                 | _fatfs_cc_f_close
32eb4     01 4A 05 F6 | 	mov	COUNT_, #1
32eb8     A8 00 A0 FD | 	call	#pushregs_
32ebc     10 F0 07 F1 | 	add	ptra, #16
32ec0     04 4E 05 F1 | 	add	fp, #4
32ec4     A7 12 62 FC | 	wrlong	arg01, fp
32ec8     04 4E 85 F1 | 	sub	fp, #4
32ecc     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
32ed0     08 4E 05 F1 | 	add	fp, #8
32ed4     A7 FA 61 FC | 	wrlong	result1, fp
32ed8     08 4E 85 F1 | 	sub	fp, #8
32edc     00 FA 0D F2 | 	cmp	result1, #0 wz
32ee0     38 00 90 5D |  if_ne	jmp	#LR__4870
32ee4     04 4E 05 F1 | 	add	fp, #4
32ee8     A7 12 02 FB | 	rdlong	arg01, fp
32eec     08 4E 05 F1 | 	add	fp, #8
32ef0     A7 14 02 F6 | 	mov	arg02, fp
32ef4     0C 4E 85 F1 | 	sub	fp, #12
32ef8     A4 E6 BF FD | 	call	#_fatfs_cc_validate
32efc     08 4E 05 F1 | 	add	fp, #8
32f00     A7 FA 61 FC | 	wrlong	result1, fp
32f04     08 4E 85 F1 | 	sub	fp, #8
32f08     00 FA 0D F2 | 	cmp	result1, #0 wz
32f0c     04 4E 05 A1 |  if_e	add	fp, #4
32f10     A7 26 02 AB |  if_e	rdlong	local01, fp
32f14     04 4E 85 A1 |  if_e	sub	fp, #4
32f18     13 01 68 AC |  if_e	wrlong	#0, local01
32f1c                 | LR__4870
32f1c                 | ' 
32f1c                 | ' 
32f1c                 | ' 
32f1c                 | ' 
32f1c                 | ' 			fp->obj.fs = 0;
32f1c                 | ' #line 4192 "ff.c"
32f1c                 | ' 		}
32f1c                 | ' 	}
32f1c                 | ' 	return res;
32f1c     08 4E 05 F1 | 	add	fp, #8
32f20     A7 FA 01 FB | 	rdlong	result1, fp
32f24     08 4E 85 F1 | 	sub	fp, #8
32f28     A7 F0 03 F6 | 	mov	ptra, fp
32f2c     B2 00 A0 FD | 	call	#popregs_
32f30                 | _fatfs_cc_f_close_ret
32f30     2D 00 64 FD | 	ret
32f34                 | 
32f34                 | _fatfs_cc_f_lseek
32f34     00 4A 05 F6 | 	mov	COUNT_, #0
32f38     A8 00 A0 FD | 	call	#pushregs_
32f3c     24 F0 07 F1 | 	add	ptra, #36
32f40     04 4E 05 F1 | 	add	fp, #4
32f44     A7 12 62 FC | 	wrlong	arg01, fp
32f48     04 4E 05 F1 | 	add	fp, #4
32f4c     A7 14 62 FC | 	wrlong	arg02, fp
32f50     04 4E 85 F1 | 	sub	fp, #4
32f54     A7 12 02 FB | 	rdlong	arg01, fp
32f58     0C 4E 05 F1 | 	add	fp, #12
32f5c     A7 14 02 F6 | 	mov	arg02, fp
32f60     10 4E 85 F1 | 	sub	fp, #16
32f64     38 E6 BF FD | 	call	#_fatfs_cc_validate
32f68     0C 4E 05 F1 | 	add	fp, #12
32f6c     A7 FA 61 FC | 	wrlong	result1, fp
32f70     0C 4E 85 F1 | 	sub	fp, #12
32f74     00 FA 0D F2 | 	cmp	result1, #0 wz
32f78     1C 00 90 5D |  if_ne	jmp	#LR__4880
32f7c     04 4E 05 F1 | 	add	fp, #4
32f80     A7 18 02 FB | 	rdlong	arg04, fp
32f84     11 18 06 F1 | 	add	arg04, #17
32f88     0C 19 C2 FA | 	rdbyte	arg04, arg04
32f8c     08 4E 05 F1 | 	add	fp, #8
32f90     A7 18 62 FC | 	wrlong	arg04, fp
32f94     0C 4E 85 F1 | 	sub	fp, #12
32f98                 | LR__4880
32f98     0C 4E 05 F1 | 	add	fp, #12
32f9c     A7 18 0A FB | 	rdlong	arg04, fp wz
32fa0     0C 4E 85 F1 | 	sub	fp, #12
32fa4     0C 4E 05 51 |  if_ne	add	fp, #12
32fa8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
32fac     0C 4E 85 51 |  if_ne	sub	fp, #12
32fb0     40 06 90 5D |  if_ne	jmp	#LR__4903
32fb4     04 4E 05 F1 | 	add	fp, #4
32fb8     A7 18 02 FB | 	rdlong	arg04, fp
32fbc     04 4E 05 F1 | 	add	fp, #4
32fc0     A7 16 02 FB | 	rdlong	arg03, fp
32fc4     08 4E 85 F1 | 	sub	fp, #8
32fc8     0C 18 06 F1 | 	add	arg04, #12
32fcc     0C 19 02 FB | 	rdlong	arg04, arg04
32fd0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
32fd4     3C 00 90 ED |  if_be	jmp	#LR__4881
32fd8     04 4E 05 F1 | 	add	fp, #4
32fdc     A7 16 02 FB | 	rdlong	arg03, fp
32fe0     04 4E 85 F1 | 	sub	fp, #4
32fe4     10 16 06 F1 | 	add	arg03, #16
32fe8     0B 17 C2 FA | 	rdbyte	arg03, arg03
32fec     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
32ff0     02 16 CE F7 | 	test	arg03, #2 wz
32ff4     1C 00 90 5D |  if_ne	jmp	#LR__4881
32ff8     04 4E 05 F1 | 	add	fp, #4
32ffc     A7 16 02 FB | 	rdlong	arg03, fp
33000     0C 16 06 F1 | 	add	arg03, #12
33004     0B 17 02 FB | 	rdlong	arg03, arg03
33008     04 4E 05 F1 | 	add	fp, #4
3300c     A7 16 62 FC | 	wrlong	arg03, fp
33010     08 4E 85 F1 | 	sub	fp, #8
33014                 | LR__4881
33014     04 4E 05 F1 | 	add	fp, #4
33018     A7 16 02 FB | 	rdlong	arg03, fp
3301c     14 16 06 F1 | 	add	arg03, #20
33020     0B 17 02 FB | 	rdlong	arg03, arg03
33024     1C 4E 05 F1 | 	add	fp, #28
33028     A7 16 62 FC | 	wrlong	arg03, fp
3302c     1C 4E 85 F1 | 	sub	fp, #28
33030     A7 16 02 FB | 	rdlong	arg03, fp
33034     18 4E 05 F1 | 	add	fp, #24
33038     A7 00 68 FC | 	wrlong	#0, fp
3303c     14 16 06 F1 | 	add	arg03, #20
33040     0B 01 68 FC | 	wrlong	#0, arg03
33044     14 4E 85 F1 | 	sub	fp, #20
33048     A7 16 02 FB | 	rdlong	arg03, fp
3304c     08 4E 85 F1 | 	sub	fp, #8
33050     01 16 16 F2 | 	cmp	arg03, #1 wc
33054     E4 03 90 CD |  if_b	jmp	#LR__4897
33058     10 4E 05 F1 | 	add	fp, #16
3305c     A7 16 02 FB | 	rdlong	arg03, fp
33060     0A 16 06 F1 | 	add	arg03, #10
33064     0B 19 E2 FA | 	rdword	arg04, arg03
33068     09 18 66 F0 | 	shl	arg04, #9
3306c     08 4E 05 F1 | 	add	fp, #8
33070     A7 18 62 FC | 	wrlong	arg04, fp
33074     08 4E 05 F1 | 	add	fp, #8
33078     A7 18 02 FB | 	rdlong	arg04, fp
3307c     20 4E 85 F1 | 	sub	fp, #32
33080     01 18 16 F2 | 	cmp	arg04, #1 wc
33084     AC 00 90 CD |  if_b	jmp	#LR__4882
33088     08 4E 05 F1 | 	add	fp, #8
3308c     A7 18 02 FB | 	rdlong	arg04, fp
33090     01 18 86 F1 | 	sub	arg04, #1
33094     10 4E 05 F1 | 	add	fp, #16
33098     A7 16 02 FB | 	rdlong	arg03, fp
3309c     0B 19 12 FD | 	qdiv	arg04, arg03
330a0     08 4E 05 F1 | 	add	fp, #8
330a4     A7 FA 01 FB | 	rdlong	result1, fp
330a8     01 FA 85 F1 | 	sub	result1, #1
330ac     18 18 62 FD | 	getqx	arg04
330b0     0B FB 11 FD | 	qdiv	result1, arg03
330b4     20 4E 85 F1 | 	sub	fp, #32
330b8     18 16 62 FD | 	getqx	arg03
330bc     0B 19 12 F2 | 	cmp	arg04, arg03 wc
330c0     70 00 90 CD |  if_b	jmp	#LR__4882
330c4     04 4E 05 F1 | 	add	fp, #4
330c8     A7 16 02 FB | 	rdlong	arg03, fp
330cc     1C 4E 05 F1 | 	add	fp, #28
330d0     A7 FA 01 FB | 	rdlong	result1, fp
330d4     01 FA 85 F1 | 	sub	result1, #1
330d8     08 4E 85 F1 | 	sub	fp, #8
330dc     A7 18 02 FB | 	rdlong	arg04, fp
330e0     01 18 86 F1 | 	sub	arg04, #1
330e4     0C FB 21 F5 | 	andn	result1, arg04
330e8     14 16 06 F1 | 	add	arg03, #20
330ec     0B FB 61 FC | 	wrlong	result1, arg03
330f0     10 4E 85 F1 | 	sub	fp, #16
330f4     A7 16 02 FB | 	rdlong	arg03, fp
330f8     04 4E 85 F1 | 	sub	fp, #4
330fc     A7 18 02 FB | 	rdlong	arg04, fp
33100     14 18 06 F1 | 	add	arg04, #20
33104     0C 19 02 FB | 	rdlong	arg04, arg04
33108     0C 17 82 F1 | 	sub	arg03, arg04
3310c     04 4E 05 F1 | 	add	fp, #4
33110     A7 16 62 FC | 	wrlong	arg03, fp
33114     04 4E 85 F1 | 	sub	fp, #4
33118     A7 16 02 FB | 	rdlong	arg03, fp
3311c     18 16 06 F1 | 	add	arg03, #24
33120     0B 17 02 FB | 	rdlong	arg03, arg03
33124     10 4E 05 F1 | 	add	fp, #16
33128     A7 16 62 FC | 	wrlong	arg03, fp
3312c     14 4E 85 F1 | 	sub	fp, #20
33130     D0 00 90 FD | 	jmp	#LR__4886
33134                 | LR__4882
33134     04 4E 05 F1 | 	add	fp, #4
33138     A7 16 02 FB | 	rdlong	arg03, fp
3313c     08 16 06 F1 | 	add	arg03, #8
33140     0B 17 0A FB | 	rdlong	arg03, arg03 wz
33144     10 4E 05 F1 | 	add	fp, #16
33148     A7 16 62 FC | 	wrlong	arg03, fp
3314c     14 4E 85 F1 | 	sub	fp, #20
33150     94 00 90 5D |  if_ne	jmp	#LR__4885
33154     04 4E 05 F1 | 	add	fp, #4
33158     A7 12 02 FB | 	rdlong	arg01, fp
3315c     04 4E 85 F1 | 	sub	fp, #4
33160     00 14 06 F6 | 	mov	arg02, #0
33164     A8 CC BF FD | 	call	#_fatfs_cc_create_chain
33168     14 4E 05 F1 | 	add	fp, #20
3316c     A7 FA 61 FC | 	wrlong	result1, fp
33170     14 4E 85 F1 | 	sub	fp, #20
33174     01 FA 0D F2 | 	cmp	result1, #1 wz
33178     1C 00 90 5D |  if_ne	jmp	#LR__4883
3317c     04 4E 05 F1 | 	add	fp, #4
33180     A7 16 02 FB | 	rdlong	arg03, fp
33184     04 4E 85 F1 | 	sub	fp, #4
33188     11 16 06 F1 | 	add	arg03, #17
3318c     0B 05 48 FC | 	wrbyte	#2, arg03
33190     02 FA 05 F6 | 	mov	result1, #2
33194     5C 04 90 FD | 	jmp	#LR__4903
33198                 | LR__4883
33198     14 4E 05 F1 | 	add	fp, #20
3319c     A7 FA 01 FB | 	rdlong	result1, fp
331a0     14 4E 85 F1 | 	sub	fp, #20
331a4     FF FF 7F FF 
331a8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
331ac     1C 00 90 5D |  if_ne	jmp	#LR__4884
331b0     04 4E 05 F1 | 	add	fp, #4
331b4     A7 16 02 FB | 	rdlong	arg03, fp
331b8     04 4E 85 F1 | 	sub	fp, #4
331bc     11 16 06 F1 | 	add	arg03, #17
331c0     0B 03 48 FC | 	wrbyte	#1, arg03
331c4     01 FA 05 F6 | 	mov	result1, #1
331c8     28 04 90 FD | 	jmp	#LR__4903
331cc                 | LR__4884
331cc     04 4E 05 F1 | 	add	fp, #4
331d0     A7 16 02 FB | 	rdlong	arg03, fp
331d4     10 4E 05 F1 | 	add	fp, #16
331d8     A7 18 02 FB | 	rdlong	arg04, fp
331dc     14 4E 85 F1 | 	sub	fp, #20
331e0     08 16 06 F1 | 	add	arg03, #8
331e4     0B 19 62 FC | 	wrlong	arg04, arg03
331e8                 | LR__4885
331e8     04 4E 05 F1 | 	add	fp, #4
331ec     A7 16 02 FB | 	rdlong	arg03, fp
331f0     10 4E 05 F1 | 	add	fp, #16
331f4     A7 18 02 FB | 	rdlong	arg04, fp
331f8     14 4E 85 F1 | 	sub	fp, #20
331fc     18 16 06 F1 | 	add	arg03, #24
33200     0B 19 62 FC | 	wrlong	arg04, arg03
33204                 | LR__4886
33204     14 4E 05 F1 | 	add	fp, #20
33208     A7 16 0A FB | 	rdlong	arg03, fp wz
3320c     14 4E 85 F1 | 	sub	fp, #20
33210     28 02 90 AD |  if_e	jmp	#LR__4896
33214                 | ' 				while (ofs > bcs) {
33214                 | LR__4887
33214     08 4E 05 F1 | 	add	fp, #8
33218     A7 18 02 FB | 	rdlong	arg04, fp
3321c     10 4E 05 F1 | 	add	fp, #16
33220     A7 16 02 FB | 	rdlong	arg03, fp
33224     18 4E 85 F1 | 	sub	fp, #24
33228     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
3322c     68 01 90 ED |  if_be	jmp	#LR__4893
33230     08 4E 05 F1 | 	add	fp, #8
33234     A7 18 02 FB | 	rdlong	arg04, fp
33238     10 4E 05 F1 | 	add	fp, #16
3323c     A7 16 02 FB | 	rdlong	arg03, fp
33240     0B 19 82 F1 | 	sub	arg04, arg03
33244     10 4E 85 F1 | 	sub	fp, #16
33248     A7 18 62 FC | 	wrlong	arg04, fp
3324c     04 4E 85 F1 | 	sub	fp, #4
33250     A7 18 02 FB | 	rdlong	arg04, fp
33254     0C FB 01 F6 | 	mov	result1, arg04
33258     14 18 06 F1 | 	add	arg04, #20
3325c     0C 19 02 FB | 	rdlong	arg04, arg04
33260     14 4E 05 F1 | 	add	fp, #20
33264     A7 16 02 FB | 	rdlong	arg03, fp
33268     0B 19 02 F1 | 	add	arg04, arg03
3326c     14 FA 05 F1 | 	add	result1, #20
33270     FD 18 62 FC | 	wrlong	arg04, result1
33274     14 4E 85 F1 | 	sub	fp, #20
33278     A7 16 02 FB | 	rdlong	arg03, fp
3327c     04 4E 85 F1 | 	sub	fp, #4
33280     10 16 06 F1 | 	add	arg03, #16
33284     0B 17 C2 FA | 	rdbyte	arg03, arg03
33288     02 16 CE F7 | 	test	arg03, #2 wz
3328c     3C 00 90 AD |  if_e	jmp	#LR__4888
33290     04 4E 05 F1 | 	add	fp, #4
33294     A7 12 02 FB | 	rdlong	arg01, fp
33298     10 4E 05 F1 | 	add	fp, #16
3329c     A7 14 02 FB | 	rdlong	arg02, fp
332a0     14 4E 85 F1 | 	sub	fp, #20
332a4     68 CB BF FD | 	call	#_fatfs_cc_create_chain
332a8     14 4E 05 F1 | 	add	fp, #20
332ac     A7 FA 61 FC | 	wrlong	result1, fp
332b0     00 FA 4D F2 | 	cmps	result1, #0 wz
332b4     14 4E 85 F1 | 	sub	fp, #20
332b8     08 4E 05 A1 |  if_e	add	fp, #8
332bc     A7 00 68 AC |  if_e	wrlong	#0, fp
332c0     08 4E 85 A1 |  if_e	sub	fp, #8
332c4                 | ' 							ofs = 0; break;
332c4     D0 00 90 AD |  if_e	jmp	#LR__4893
332c8     24 00 90 FD | 	jmp	#LR__4889
332cc                 | LR__4888
332cc     04 4E 05 F1 | 	add	fp, #4
332d0     A7 12 02 FB | 	rdlong	arg01, fp
332d4     10 4E 05 F1 | 	add	fp, #16
332d8     A7 14 02 FB | 	rdlong	arg02, fp
332dc     14 4E 85 F1 | 	sub	fp, #20
332e0     64 C6 BF FD | 	call	#_fatfs_cc_get_fat
332e4     14 4E 05 F1 | 	add	fp, #20
332e8     A7 FA 61 FC | 	wrlong	result1, fp
332ec     14 4E 85 F1 | 	sub	fp, #20
332f0                 | LR__4889
332f0     14 4E 05 F1 | 	add	fp, #20
332f4     A7 16 02 FB | 	rdlong	arg03, fp
332f8     14 4E 85 F1 | 	sub	fp, #20
332fc     FF FF 7F FF 
33300     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33304     1C 00 90 5D |  if_ne	jmp	#LR__4890
33308     04 4E 05 F1 | 	add	fp, #4
3330c     A7 16 02 FB | 	rdlong	arg03, fp
33310     04 4E 85 F1 | 	sub	fp, #4
33314     11 16 06 F1 | 	add	arg03, #17
33318     0B 03 48 FC | 	wrbyte	#1, arg03
3331c     01 FA 05 F6 | 	mov	result1, #1
33320     D0 02 90 FD | 	jmp	#LR__4903
33324                 | LR__4890
33324     14 4E 05 F1 | 	add	fp, #20
33328     A7 16 02 FB | 	rdlong	arg03, fp
3332c     14 4E 85 F1 | 	sub	fp, #20
33330     02 16 16 F2 | 	cmp	arg03, #2 wc
33334     24 00 90 CD |  if_b	jmp	#LR__4891
33338     10 4E 05 F1 | 	add	fp, #16
3333c     A7 18 02 FB | 	rdlong	arg04, fp
33340     04 4E 05 F1 | 	add	fp, #4
33344     A7 16 02 FB | 	rdlong	arg03, fp
33348     14 4E 85 F1 | 	sub	fp, #20
3334c     14 18 06 F1 | 	add	arg04, #20
33350     0C 19 02 FB | 	rdlong	arg04, arg04
33354     0C 17 12 F2 | 	cmp	arg03, arg04 wc
33358     1C 00 90 CD |  if_b	jmp	#LR__4892
3335c                 | LR__4891
3335c     04 4E 05 F1 | 	add	fp, #4
33360     A7 16 02 FB | 	rdlong	arg03, fp
33364     04 4E 85 F1 | 	sub	fp, #4
33368     11 16 06 F1 | 	add	arg03, #17
3336c     0B 05 48 FC | 	wrbyte	#2, arg03
33370     02 FA 05 F6 | 	mov	result1, #2
33374     7C 02 90 FD | 	jmp	#LR__4903
33378                 | LR__4892
33378     04 4E 05 F1 | 	add	fp, #4
3337c     A7 18 02 FB | 	rdlong	arg04, fp
33380     10 4E 05 F1 | 	add	fp, #16
33384     A7 16 02 FB | 	rdlong	arg03, fp
33388     14 4E 85 F1 | 	sub	fp, #20
3338c     18 18 06 F1 | 	add	arg04, #24
33390     0C 17 62 FC | 	wrlong	arg03, arg04
33394     7C FE 9F FD | 	jmp	#LR__4887
33398                 | LR__4893
33398     04 4E 05 F1 | 	add	fp, #4
3339c     A7 16 02 FB | 	rdlong	arg03, fp
333a0     0B 13 02 F6 | 	mov	arg01, arg03
333a4     14 16 06 F1 | 	add	arg03, #20
333a8     0B 15 02 FB | 	rdlong	arg02, arg03
333ac     04 4E 05 F1 | 	add	fp, #4
333b0     A7 16 02 FB | 	rdlong	arg03, fp
333b4     0B 15 02 F1 | 	add	arg02, arg03
333b8     14 12 06 F1 | 	add	arg01, #20
333bc     09 15 62 FC | 	wrlong	arg02, arg01
333c0     A7 16 02 FB | 	rdlong	arg03, fp
333c4     08 4E 85 F1 | 	sub	fp, #8
333c8     FF 17 CE F7 | 	test	arg03, #511 wz
333cc     6C 00 90 AD |  if_e	jmp	#LR__4895
333d0     10 4E 05 F1 | 	add	fp, #16
333d4     A7 12 02 FB | 	rdlong	arg01, fp
333d8     04 4E 05 F1 | 	add	fp, #4
333dc     A7 14 02 FB | 	rdlong	arg02, fp
333e0     14 4E 85 F1 | 	sub	fp, #20
333e4     20 C5 BF FD | 	call	#_fatfs_cc_clst2sect
333e8     1C 4E 05 F1 | 	add	fp, #28
333ec     A7 FA 61 FC | 	wrlong	result1, fp
333f0     1C 4E 85 F1 | 	sub	fp, #28
333f4     00 FA 0D F2 | 	cmp	result1, #0 wz
333f8     1C 00 90 5D |  if_ne	jmp	#LR__4894
333fc     04 4E 05 F1 | 	add	fp, #4
33400     A7 16 02 FB | 	rdlong	arg03, fp
33404     04 4E 85 F1 | 	sub	fp, #4
33408     11 16 06 F1 | 	add	arg03, #17
3340c     0B 05 48 FC | 	wrbyte	#2, arg03
33410     02 FA 05 F6 | 	mov	result1, #2
33414     DC 01 90 FD | 	jmp	#LR__4903
33418                 | LR__4894
33418     1C 4E 05 F1 | 	add	fp, #28
3341c     A7 18 02 FB | 	rdlong	arg04, fp
33420     14 4E 85 F1 | 	sub	fp, #20
33424     A7 16 02 FB | 	rdlong	arg03, fp
33428     09 16 46 F0 | 	shr	arg03, #9
3342c     0B 19 02 F1 | 	add	arg04, arg03
33430     14 4E 05 F1 | 	add	fp, #20
33434     A7 18 62 FC | 	wrlong	arg04, fp
33438     1C 4E 85 F1 | 	sub	fp, #28
3343c                 | LR__4895
3343c                 | LR__4896
3343c                 | LR__4897
3343c     04 4E 05 F1 | 	add	fp, #4
33440     A7 18 02 FB | 	rdlong	arg04, fp
33444     0C 17 02 F6 | 	mov	arg03, arg04
33448     04 4E 85 F1 | 	sub	fp, #4
3344c     14 16 06 F1 | 	add	arg03, #20
33450     0B 17 02 FB | 	rdlong	arg03, arg03
33454     0C 18 06 F1 | 	add	arg04, #12
33458     0C 19 02 FB | 	rdlong	arg04, arg04
3345c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
33460     3C 00 90 ED |  if_be	jmp	#LR__4898
33464     04 4E 05 F1 | 	add	fp, #4
33468     A7 18 02 FB | 	rdlong	arg04, fp
3346c     0C 17 02 F6 | 	mov	arg03, arg04
33470     14 18 06 F1 | 	add	arg04, #20
33474     0C 19 02 FB | 	rdlong	arg04, arg04
33478     0C 16 06 F1 | 	add	arg03, #12
3347c     0B 19 62 FC | 	wrlong	arg04, arg03
33480     A7 18 02 FB | 	rdlong	arg04, fp
33484     0C 17 02 F6 | 	mov	arg03, arg04
33488     04 4E 85 F1 | 	sub	fp, #4
3348c     10 18 06 F1 | 	add	arg04, #16
33490     0C 19 C2 FA | 	rdbyte	arg04, arg04
33494     40 18 46 F5 | 	or	arg04, #64
33498     10 16 06 F1 | 	add	arg03, #16
3349c     0B 19 42 FC | 	wrbyte	arg04, arg03
334a0                 | LR__4898
334a0     04 4E 05 F1 | 	add	fp, #4
334a4     A7 16 02 FB | 	rdlong	arg03, fp
334a8     04 4E 85 F1 | 	sub	fp, #4
334ac     14 16 06 F1 | 	add	arg03, #20
334b0     0B 17 02 FB | 	rdlong	arg03, arg03
334b4     FF 17 CE F7 | 	test	arg03, #511 wz
334b8     2C 01 90 AD |  if_e	jmp	#LR__4902
334bc     04 4E 05 F1 | 	add	fp, #4
334c0     A7 18 02 FB | 	rdlong	arg04, fp
334c4     18 4E 05 F1 | 	add	fp, #24
334c8     A7 16 02 FB | 	rdlong	arg03, fp
334cc     1C 4E 85 F1 | 	sub	fp, #28
334d0     1C 18 06 F1 | 	add	arg04, #28
334d4     0C 19 02 FB | 	rdlong	arg04, arg04
334d8     0C 17 0A F2 | 	cmp	arg03, arg04 wz
334dc     08 01 90 AD |  if_e	jmp	#LR__4902
334e0     04 4E 05 F1 | 	add	fp, #4
334e4     A7 16 02 FB | 	rdlong	arg03, fp
334e8     04 4E 85 F1 | 	sub	fp, #4
334ec     10 16 06 F1 | 	add	arg03, #16
334f0     0B 17 C2 FA | 	rdbyte	arg03, arg03
334f4     80 16 CE F7 | 	test	arg03, #128 wz
334f8     7C 00 90 AD |  if_e	jmp	#LR__4900
334fc     10 4E 05 F1 | 	add	fp, #16
33500     A7 16 02 FB | 	rdlong	arg03, fp
33504     01 16 06 F1 | 	add	arg03, #1
33508     0B 13 C2 FA | 	rdbyte	arg01, arg03
3350c     0C 4E 85 F1 | 	sub	fp, #12
33510     A7 16 02 FB | 	rdlong	arg03, fp
33514     0B 15 02 F6 | 	mov	arg02, arg03
33518     28 14 06 F1 | 	add	arg02, #40
3351c     04 4E 85 F1 | 	sub	fp, #4
33520     1C 16 06 F1 | 	add	arg03, #28
33524     0B 17 02 FB | 	rdlong	arg03, arg03
33528     01 18 06 F6 | 	mov	arg04, #1
3352c     0C BE BF FD | 	call	#_fatfs_cc_disk_write
33530     00 FA 0D F2 | 	cmp	result1, #0 wz
33534     1C 00 90 AD |  if_e	jmp	#LR__4899
33538     04 4E 05 F1 | 	add	fp, #4
3353c     A7 16 02 FB | 	rdlong	arg03, fp
33540     04 4E 85 F1 | 	sub	fp, #4
33544     11 16 06 F1 | 	add	arg03, #17
33548     0B 03 48 FC | 	wrbyte	#1, arg03
3354c     01 FA 05 F6 | 	mov	result1, #1
33550     A0 00 90 FD | 	jmp	#LR__4903
33554                 | LR__4899
33554     04 4E 05 F1 | 	add	fp, #4
33558     A7 18 02 FB | 	rdlong	arg04, fp
3355c     0C 17 02 F6 | 	mov	arg03, arg04
33560     04 4E 85 F1 | 	sub	fp, #4
33564     10 18 06 F1 | 	add	arg04, #16
33568     0C 19 C2 FA | 	rdbyte	arg04, arg04
3356c     7F 18 06 F5 | 	and	arg04, #127
33570     10 16 06 F1 | 	add	arg03, #16
33574     0B 19 42 FC | 	wrbyte	arg04, arg03
33578                 | LR__4900
33578     10 4E 05 F1 | 	add	fp, #16
3357c     A7 16 02 FB | 	rdlong	arg03, fp
33580     01 16 06 F1 | 	add	arg03, #1
33584     0B 13 C2 FA | 	rdbyte	arg01, arg03
33588     0C 4E 85 F1 | 	sub	fp, #12
3358c     A7 14 02 FB | 	rdlong	arg02, fp
33590     28 14 06 F1 | 	add	arg02, #40
33594     18 4E 05 F1 | 	add	fp, #24
33598     A7 16 02 FB | 	rdlong	arg03, fp
3359c     1C 4E 85 F1 | 	sub	fp, #28
335a0     01 18 06 F6 | 	mov	arg04, #1
335a4     D4 BC BF FD | 	call	#_fatfs_cc_disk_read
335a8     00 FA 0D F2 | 	cmp	result1, #0 wz
335ac     1C 00 90 AD |  if_e	jmp	#LR__4901
335b0     04 4E 05 F1 | 	add	fp, #4
335b4     A7 16 02 FB | 	rdlong	arg03, fp
335b8     04 4E 85 F1 | 	sub	fp, #4
335bc     11 16 06 F1 | 	add	arg03, #17
335c0     0B 03 48 FC | 	wrbyte	#1, arg03
335c4     01 FA 05 F6 | 	mov	result1, #1
335c8     28 00 90 FD | 	jmp	#LR__4903
335cc                 | LR__4901
335cc     04 4E 05 F1 | 	add	fp, #4
335d0     A7 18 02 FB | 	rdlong	arg04, fp
335d4     18 4E 05 F1 | 	add	fp, #24
335d8     A7 16 02 FB | 	rdlong	arg03, fp
335dc     1C 4E 85 F1 | 	sub	fp, #28
335e0     1C 18 06 F1 | 	add	arg04, #28
335e4     0C 17 62 FC | 	wrlong	arg03, arg04
335e8                 | LR__4902
335e8                 | ' 
335e8                 | ' 			fp->sect = nsect;
335e8                 | ' 		}
335e8                 | ' 	}
335e8                 | ' 
335e8                 | ' 	return res ;
335e8     0C 4E 05 F1 | 	add	fp, #12
335ec     A7 FA 01 FB | 	rdlong	result1, fp
335f0     0C 4E 85 F1 | 	sub	fp, #12
335f4                 | LR__4903
335f4     A7 F0 03 F6 | 	mov	ptra, fp
335f8     B2 00 A0 FD | 	call	#popregs_
335fc                 | _fatfs_cc_f_lseek_ret
335fc     2D 00 64 FD | 	ret
33600                 | 
33600                 | _fatfs_cc_f_opendir
33600     01 4A 05 F6 | 	mov	COUNT_, #1
33604     A8 00 A0 FD | 	call	#pushregs_
33608     14 F0 07 F1 | 	add	ptra, #20
3360c     04 4E 05 F1 | 	add	fp, #4
33610     A7 12 62 FC | 	wrlong	arg01, fp
33614     04 4E 05 F1 | 	add	fp, #4
33618     A7 14 62 FC | 	wrlong	arg02, fp
3361c     04 4E 85 F1 | 	sub	fp, #4
33620     A7 16 0A FB | 	rdlong	arg03, fp wz
33624     04 4E 85 F1 | 	sub	fp, #4
33628     09 FA 05 A6 |  if_e	mov	result1, #9
3362c     78 01 90 AD |  if_e	jmp	#LR__4916
33630     08 4E 05 F1 | 	add	fp, #8
33634     A7 12 02 F6 | 	mov	arg01, fp
33638     08 4E 05 F1 | 	add	fp, #8
3363c     A7 14 02 F6 | 	mov	arg02, fp
33640     10 4E 85 F1 | 	sub	fp, #16
33644     00 16 06 F6 | 	mov	arg03, #0
33648     F8 D9 BF FD | 	call	#_fatfs_cc_mount_volume
3364c     0C 4E 05 F1 | 	add	fp, #12
33650     A7 FA 61 FC | 	wrlong	result1, fp
33654     0C 4E 85 F1 | 	sub	fp, #12
33658     00 FA 0D F2 | 	cmp	result1, #0 wz
3365c     20 01 90 5D |  if_ne	jmp	#LR__4915
33660     04 4E 05 F1 | 	add	fp, #4
33664     A7 16 02 FB | 	rdlong	arg03, fp
33668     0C 4E 05 F1 | 	add	fp, #12
3366c     A7 FA 01 FB | 	rdlong	result1, fp
33670     0B FB 61 FC | 	wrlong	result1, arg03
33674     0C 4E 85 F1 | 	sub	fp, #12
33678     A7 12 02 FB | 	rdlong	arg01, fp
3367c     04 4E 05 F1 | 	add	fp, #4
33680     A7 14 02 FB | 	rdlong	arg02, fp
33684     08 4E 85 F1 | 	sub	fp, #8
33688     38 D4 BF FD | 	call	#_fatfs_cc_follow_path
3368c     0C 4E 05 F1 | 	add	fp, #12
33690     A7 FA 61 FC | 	wrlong	result1, fp
33694     0C 4E 85 F1 | 	sub	fp, #12
33698     00 FA 0D F2 | 	cmp	result1, #0 wz
3369c     C4 00 90 5D |  if_ne	jmp	#LR__4914
336a0     04 4E 05 F1 | 	add	fp, #4
336a4     A7 16 02 FB | 	rdlong	arg03, fp
336a8     04 4E 85 F1 | 	sub	fp, #4
336ac     2B 16 06 F1 | 	add	arg03, #43
336b0     0B 17 C2 FA | 	rdbyte	arg03, arg03
336b4     80 16 CE F7 | 	test	arg03, #128 wz
336b8     58 00 90 5D |  if_ne	jmp	#LR__4912
336bc     04 4E 05 F1 | 	add	fp, #4
336c0     A7 16 02 FB | 	rdlong	arg03, fp
336c4     04 4E 85 F1 | 	sub	fp, #4
336c8     06 16 06 F1 | 	add	arg03, #6
336cc     0B 17 C2 FA | 	rdbyte	arg03, arg03
336d0     10 16 CE F7 | 	test	arg03, #16 wz
336d4     30 00 90 AD |  if_e	jmp	#LR__4910
336d8     04 4E 05 F1 | 	add	fp, #4
336dc     A7 16 02 FB | 	rdlong	arg03, fp
336e0     0B 27 02 F6 | 	mov	local01, arg03
336e4     0C 4E 05 F1 | 	add	fp, #12
336e8     A7 12 02 FB | 	rdlong	arg01, fp
336ec     10 4E 85 F1 | 	sub	fp, #16
336f0     1C 16 06 F1 | 	add	arg03, #28
336f4     0B 15 02 FB | 	rdlong	arg02, arg03
336f8     CC CD BF FD | 	call	#_fatfs_cc_ld_clust
336fc     08 26 06 F1 | 	add	local01, #8
33700     13 FB 61 FC | 	wrlong	result1, local01
33704     0C 00 90 FD | 	jmp	#LR__4911
33708                 | LR__4910
33708     0C 4E 05 F1 | 	add	fp, #12
3370c     A7 0A 68 FC | 	wrlong	#5, fp
33710     0C 4E 85 F1 | 	sub	fp, #12
33714                 | LR__4911
33714                 | LR__4912
33714     0C 4E 05 F1 | 	add	fp, #12
33718     A7 26 0A FB | 	rdlong	local01, fp wz
3371c     0C 4E 85 F1 | 	sub	fp, #12
33720     40 00 90 5D |  if_ne	jmp	#LR__4913
33724     04 4E 05 F1 | 	add	fp, #4
33728     A7 26 02 FB | 	rdlong	local01, fp
3372c     0C 4E 05 F1 | 	add	fp, #12
33730     A7 16 02 FB | 	rdlong	arg03, fp
33734     06 16 06 F1 | 	add	arg03, #6
33738     0B 17 E2 FA | 	rdword	arg03, arg03
3373c     04 26 06 F1 | 	add	local01, #4
33740     13 17 52 FC | 	wrword	arg03, local01
33744     0C 4E 85 F1 | 	sub	fp, #12
33748     A7 12 02 FB | 	rdlong	arg01, fp
3374c     04 4E 85 F1 | 	sub	fp, #4
33750     00 14 06 F6 | 	mov	arg02, #0
33754     9C C9 BF FD | 	call	#_fatfs_cc_dir_sdi
33758     0C 4E 05 F1 | 	add	fp, #12
3375c     A7 FA 61 FC | 	wrlong	result1, fp
33760     0C 4E 85 F1 | 	sub	fp, #12
33764                 | LR__4913
33764                 | LR__4914
33764     0C 4E 05 F1 | 	add	fp, #12
33768     A7 26 02 FB | 	rdlong	local01, fp
3376c     0C 4E 85 F1 | 	sub	fp, #12
33770     04 26 0E F2 | 	cmp	local01, #4 wz
33774     0C 4E 05 A1 |  if_e	add	fp, #12
33778     A7 0A 68 AC |  if_e	wrlong	#5, fp
3377c     0C 4E 85 A1 |  if_e	sub	fp, #12
33780                 | LR__4915
33780     0C 4E 05 F1 | 	add	fp, #12
33784     A7 26 0A FB | 	rdlong	local01, fp wz
33788     0C 4E 85 F1 | 	sub	fp, #12
3378c     04 4E 05 51 |  if_ne	add	fp, #4
33790     A7 26 02 5B |  if_ne	rdlong	local01, fp
33794     04 4E 85 51 |  if_ne	sub	fp, #4
33798     13 01 68 5C |  if_ne	wrlong	#0, local01
3379c                 | ' 
3379c                 | ' 	return res ;
3379c     0C 4E 05 F1 | 	add	fp, #12
337a0     A7 FA 01 FB | 	rdlong	result1, fp
337a4     0C 4E 85 F1 | 	sub	fp, #12
337a8                 | LR__4916
337a8     A7 F0 03 F6 | 	mov	ptra, fp
337ac     B2 00 A0 FD | 	call	#popregs_
337b0                 | _fatfs_cc_f_opendir_ret
337b0     2D 00 64 FD | 	ret
337b4                 | 
337b4                 | _fatfs_cc_f_closedir
337b4     00 4A 05 F6 | 	mov	COUNT_, #0
337b8     A8 00 A0 FD | 	call	#pushregs_
337bc     10 F0 07 F1 | 	add	ptra, #16
337c0     04 4E 05 F1 | 	add	fp, #4
337c4     A7 12 62 FC | 	wrlong	arg01, fp
337c8     08 4E 05 F1 | 	add	fp, #8
337cc     A7 14 02 F6 | 	mov	arg02, fp
337d0     0C 4E 85 F1 | 	sub	fp, #12
337d4     C8 DD BF FD | 	call	#_fatfs_cc_validate
337d8     08 4E 05 F1 | 	add	fp, #8
337dc     A7 FA 61 FC | 	wrlong	result1, fp
337e0     08 4E 85 F1 | 	sub	fp, #8
337e4     00 FA 0D F2 | 	cmp	result1, #0 wz
337e8     04 4E 05 A1 |  if_e	add	fp, #4
337ec     A7 FA 01 AB |  if_e	rdlong	result1, fp
337f0     04 4E 85 A1 |  if_e	sub	fp, #4
337f4     FD 00 68 AC |  if_e	wrlong	#0, result1
337f8                 | ' 
337f8                 | ' 
337f8                 | ' 
337f8                 | ' 
337f8                 | ' 		dp->obj.fs = 0;
337f8                 | ' #line 4633 "ff.c"
337f8                 | ' 	}
337f8                 | ' 	return res;
337f8     08 4E 05 F1 | 	add	fp, #8
337fc     A7 FA 01 FB | 	rdlong	result1, fp
33800     08 4E 85 F1 | 	sub	fp, #8
33804     A7 F0 03 F6 | 	mov	ptra, fp
33808     B2 00 A0 FD | 	call	#popregs_
3380c                 | _fatfs_cc_f_closedir_ret
3380c     2D 00 64 FD | 	ret
33810                 | 
33810                 | _fatfs_cc_f_readdir
33810     00 4A 05 F6 | 	mov	COUNT_, #0
33814     A8 00 A0 FD | 	call	#pushregs_
33818     14 F0 07 F1 | 	add	ptra, #20
3381c     04 4E 05 F1 | 	add	fp, #4
33820     A7 12 62 FC | 	wrlong	arg01, fp
33824     04 4E 05 F1 | 	add	fp, #4
33828     A7 14 62 FC | 	wrlong	arg02, fp
3382c     04 4E 85 F1 | 	sub	fp, #4
33830     A7 12 02 FB | 	rdlong	arg01, fp
33834     0C 4E 05 F1 | 	add	fp, #12
33838     A7 14 02 F6 | 	mov	arg02, fp
3383c     10 4E 85 F1 | 	sub	fp, #16
33840     5C DD BF FD | 	call	#_fatfs_cc_validate
33844     0C 4E 05 F1 | 	add	fp, #12
33848     A7 FA 61 FC | 	wrlong	result1, fp
3384c     0C 4E 85 F1 | 	sub	fp, #12
33850     00 FA 0D F2 | 	cmp	result1, #0 wz
33854     BC 00 90 5D |  if_ne	jmp	#LR__4923
33858     08 4E 05 F1 | 	add	fp, #8
3385c     A7 FA 09 FB | 	rdlong	result1, fp wz
33860     08 4E 85 F1 | 	sub	fp, #8
33864     24 00 90 5D |  if_ne	jmp	#LR__4920
33868     04 4E 05 F1 | 	add	fp, #4
3386c     A7 12 02 FB | 	rdlong	arg01, fp
33870     04 4E 85 F1 | 	sub	fp, #4
33874     00 14 06 F6 | 	mov	arg02, #0
33878     78 C8 BF FD | 	call	#_fatfs_cc_dir_sdi
3387c     0C 4E 05 F1 | 	add	fp, #12
33880     A7 FA 61 FC | 	wrlong	result1, fp
33884     0C 4E 85 F1 | 	sub	fp, #12
33888     88 00 90 FD | 	jmp	#LR__4922
3388c                 | LR__4920
3388c     04 4E 05 F1 | 	add	fp, #4
33890     A7 12 02 FB | 	rdlong	arg01, fp
33894     04 4E 85 F1 | 	sub	fp, #4
33898     00 14 06 F6 | 	mov	arg02, #0
3389c     84 CC BF FD | 	call	#_fatfs_cc_dir_read
338a0     0C 4E 05 F1 | 	add	fp, #12
338a4     A7 FA 61 FC | 	wrlong	result1, fp
338a8     0C 4E 85 F1 | 	sub	fp, #12
338ac     04 FA 0D F2 | 	cmp	result1, #4 wz
338b0     0C 4E 05 A1 |  if_e	add	fp, #12
338b4     A7 00 68 AC |  if_e	wrlong	#0, fp
338b8     0C 4E 85 A1 |  if_e	sub	fp, #12
338bc     0C 4E 05 F1 | 	add	fp, #12
338c0     A7 FA 09 FB | 	rdlong	result1, fp wz
338c4     0C 4E 85 F1 | 	sub	fp, #12
338c8     48 00 90 5D |  if_ne	jmp	#LR__4921
338cc     04 4E 05 F1 | 	add	fp, #4
338d0     A7 12 02 FB | 	rdlong	arg01, fp
338d4     04 4E 05 F1 | 	add	fp, #4
338d8     A7 14 02 FB | 	rdlong	arg02, fp
338dc     08 4E 85 F1 | 	sub	fp, #8
338e0     D4 CE BF FD | 	call	#_fatfs_cc_get_fileinfo
338e4     04 4E 05 F1 | 	add	fp, #4
338e8     A7 12 02 FB | 	rdlong	arg01, fp
338ec     04 4E 85 F1 | 	sub	fp, #4
338f0     00 14 06 F6 | 	mov	arg02, #0
338f4     64 C9 BF FD | 	call	#_fatfs_cc_dir_next
338f8     0C 4E 05 F1 | 	add	fp, #12
338fc     A7 FA 61 FC | 	wrlong	result1, fp
33900     0C 4E 85 F1 | 	sub	fp, #12
33904     04 FA 0D F2 | 	cmp	result1, #4 wz
33908     0C 4E 05 A1 |  if_e	add	fp, #12
3390c     A7 00 68 AC |  if_e	wrlong	#0, fp
33910     0C 4E 85 A1 |  if_e	sub	fp, #12
33914                 | LR__4921
33914                 | LR__4922
33914                 | LR__4923
33914                 | ' 			}
33914                 | ' 			;
33914                 | ' 		}
33914                 | ' 	}
33914                 | ' 	return res ;
33914     0C 4E 05 F1 | 	add	fp, #12
33918     A7 FA 01 FB | 	rdlong	result1, fp
3391c     0C 4E 85 F1 | 	sub	fp, #12
33920     A7 F0 03 F6 | 	mov	ptra, fp
33924     B2 00 A0 FD | 	call	#popregs_
33928                 | _fatfs_cc_f_readdir_ret
33928     2D 00 64 FD | 	ret
3392c                 | 
3392c                 | _fatfs_cc_f_stat
3392c     00 4A 05 F6 | 	mov	COUNT_, #0
33930     A8 00 A0 FD | 	call	#pushregs_
33934     3C F0 07 F1 | 	add	ptra, #60
33938     04 4E 05 F1 | 	add	fp, #4
3393c     A7 12 62 FC | 	wrlong	arg01, fp
33940     04 4E 05 F1 | 	add	fp, #4
33944     A7 14 62 FC | 	wrlong	arg02, fp
33948     04 4E 85 F1 | 	sub	fp, #4
3394c     A7 12 02 F6 | 	mov	arg01, fp
33950     0C 4E 05 F1 | 	add	fp, #12
33954     A7 14 02 F6 | 	mov	arg02, fp
33958     10 4E 85 F1 | 	sub	fp, #16
3395c     00 16 06 F6 | 	mov	arg03, #0
33960     E0 D6 BF FD | 	call	#_fatfs_cc_mount_volume
33964     0C 4E 05 F1 | 	add	fp, #12
33968     A7 FA 61 FC | 	wrlong	result1, fp
3396c     0C 4E 85 F1 | 	sub	fp, #12
33970     00 FA 0D F2 | 	cmp	result1, #0 wz
33974     74 00 90 5D |  if_ne	jmp	#LR__4933
33978     10 4E 05 F1 | 	add	fp, #16
3397c     A7 12 02 F6 | 	mov	arg01, fp
33980     0C 4E 85 F1 | 	sub	fp, #12
33984     A7 14 02 FB | 	rdlong	arg02, fp
33988     04 4E 85 F1 | 	sub	fp, #4
3398c     34 D1 BF FD | 	call	#_fatfs_cc_follow_path
33990     0C 4E 05 F1 | 	add	fp, #12
33994     A7 FA 61 FC | 	wrlong	result1, fp
33998     0C 4E 85 F1 | 	sub	fp, #12
3399c     00 FA 0D F2 | 	cmp	result1, #0 wz
339a0     48 00 90 5D |  if_ne	jmp	#LR__4932
339a4     3B 4E 05 F1 | 	add	fp, #59
339a8     A7 FA C1 FA | 	rdbyte	result1, fp
339ac     3B 4E 85 F1 | 	sub	fp, #59
339b0     80 FA CD F7 | 	test	result1, #128 wz
339b4     0C 4E 05 51 |  if_ne	add	fp, #12
339b8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
339bc     0C 4E 85 51 |  if_ne	sub	fp, #12
339c0     28 00 90 5D |  if_ne	jmp	#LR__4931
339c4     08 4E 05 F1 | 	add	fp, #8
339c8     A7 FA 09 FB | 	rdlong	result1, fp wz
339cc     08 4E 85 F1 | 	sub	fp, #8
339d0     18 00 90 AD |  if_e	jmp	#LR__4930
339d4     10 4E 05 F1 | 	add	fp, #16
339d8     A7 12 02 F6 | 	mov	arg01, fp
339dc     08 4E 85 F1 | 	sub	fp, #8
339e0     A7 14 02 FB | 	rdlong	arg02, fp
339e4     08 4E 85 F1 | 	sub	fp, #8
339e8     CC CD BF FD | 	call	#_fatfs_cc_get_fileinfo
339ec                 | LR__4930
339ec                 | LR__4931
339ec                 | LR__4932
339ec                 | LR__4933
339ec                 | ' 			}
339ec                 | ' 		}
339ec                 | ' 		;
339ec                 | ' 	}
339ec                 | ' 
339ec                 | ' 	return res ;
339ec     0C 4E 05 F1 | 	add	fp, #12
339f0     A7 FA 01 FB | 	rdlong	result1, fp
339f4     0C 4E 85 F1 | 	sub	fp, #12
339f8     A7 F0 03 F6 | 	mov	ptra, fp
339fc     B2 00 A0 FD | 	call	#popregs_
33a00                 | _fatfs_cc_f_stat_ret
33a00     2D 00 64 FD | 	ret
33a04                 | 
33a04                 | _fatfs_cc_f_unlink
33a04     00 4A 05 F6 | 	mov	COUNT_, #0
33a08     A8 00 A0 FD | 	call	#pushregs_
33a0c     6C F0 07 F1 | 	add	ptra, #108
33a10     04 4E 05 F1 | 	add	fp, #4
33a14     A7 12 62 FC | 	wrlong	arg01, fp
33a18     60 4E 05 F1 | 	add	fp, #96
33a1c     A7 00 68 FC | 	wrlong	#0, fp
33a20     60 4E 85 F1 | 	sub	fp, #96
33a24     A7 12 02 F6 | 	mov	arg01, fp
33a28     64 4E 05 F1 | 	add	fp, #100
33a2c     A7 14 02 F6 | 	mov	arg02, fp
33a30     68 4E 85 F1 | 	sub	fp, #104
33a34     02 16 06 F6 | 	mov	arg03, #2
33a38     08 D6 BF FD | 	call	#_fatfs_cc_mount_volume
33a3c     08 4E 05 F1 | 	add	fp, #8
33a40     A7 FA 61 FC | 	wrlong	result1, fp
33a44     08 4E 85 F1 | 	sub	fp, #8
33a48     00 FA 0D F2 | 	cmp	result1, #0 wz
33a4c     E4 01 90 5D |  if_ne	jmp	#LR__4948
33a50     68 4E 05 F1 | 	add	fp, #104
33a54     A7 16 02 FB | 	rdlong	arg03, fp
33a58     5C 4E 85 F1 | 	sub	fp, #92
33a5c     A7 16 62 FC | 	wrlong	arg03, fp
33a60     A7 12 02 F6 | 	mov	arg01, fp
33a64     08 4E 85 F1 | 	sub	fp, #8
33a68     A7 14 02 FB | 	rdlong	arg02, fp
33a6c     04 4E 85 F1 | 	sub	fp, #4
33a70     50 D0 BF FD | 	call	#_fatfs_cc_follow_path
33a74     08 4E 05 F1 | 	add	fp, #8
33a78     A7 FA 61 FC | 	wrlong	result1, fp
33a7c     00 FA 4D F2 | 	cmps	result1, #0 wz
33a80     08 4E 85 F1 | 	sub	fp, #8
33a84     AC 01 90 5D |  if_ne	jmp	#LR__4947
33a88     37 4E 05 F1 | 	add	fp, #55
33a8c     A7 FA C1 FA | 	rdbyte	result1, fp
33a90     37 4E 85 F1 | 	sub	fp, #55
33a94     80 FA CD F7 | 	test	result1, #128 wz
33a98     08 4E 05 51 |  if_ne	add	fp, #8
33a9c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33aa0     08 4E 85 51 |  if_ne	sub	fp, #8
33aa4     1C 00 90 5D |  if_ne	jmp	#LR__4940
33aa8     12 4E 05 F1 | 	add	fp, #18
33aac     A7 FA C1 FA | 	rdbyte	result1, fp
33ab0     12 4E 85 F1 | 	sub	fp, #18
33ab4     01 FA CD F7 | 	test	result1, #1 wz
33ab8     08 4E 05 51 |  if_ne	add	fp, #8
33abc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
33ac0     08 4E 85 51 |  if_ne	sub	fp, #8
33ac4                 | LR__4940
33ac4     08 4E 05 F1 | 	add	fp, #8
33ac8     A7 FA 09 FB | 	rdlong	result1, fp wz
33acc     08 4E 85 F1 | 	sub	fp, #8
33ad0     C8 00 90 5D |  if_ne	jmp	#LR__4943
33ad4     68 4E 05 F1 | 	add	fp, #104
33ad8     A7 12 02 FB | 	rdlong	arg01, fp
33adc     40 4E 85 F1 | 	sub	fp, #64
33ae0     A7 14 02 FB | 	rdlong	arg02, fp
33ae4     28 4E 85 F1 | 	sub	fp, #40
33ae8     DC C9 BF FD | 	call	#_fatfs_cc_ld_clust
33aec     64 4E 05 F1 | 	add	fp, #100
33af0     A7 FA 61 FC | 	wrlong	result1, fp
33af4     52 4E 85 F1 | 	sub	fp, #82
33af8     A7 FA C1 FA | 	rdbyte	result1, fp
33afc     12 4E 85 F1 | 	sub	fp, #18
33b00     10 FA CD F7 | 	test	result1, #16 wz
33b04     94 00 90 AD |  if_e	jmp	#LR__4942
33b08     68 4E 05 F1 | 	add	fp, #104
33b0c     A7 FA 01 FB | 	rdlong	result1, fp
33b10     30 4E 85 F1 | 	sub	fp, #48
33b14     A7 FA 61 FC | 	wrlong	result1, fp
33b18     2C 4E 05 F1 | 	add	fp, #44
33b1c     A7 16 02 FB | 	rdlong	arg03, fp
33b20     24 4E 85 F1 | 	sub	fp, #36
33b24     A7 16 62 FC | 	wrlong	arg03, fp
33b28     08 4E 85 F1 | 	sub	fp, #8
33b2c     A7 12 02 F6 | 	mov	arg01, fp
33b30     38 4E 85 F1 | 	sub	fp, #56
33b34     00 14 06 F6 | 	mov	arg02, #0
33b38     B8 C5 BF FD | 	call	#_fatfs_cc_dir_sdi
33b3c     08 4E 05 F1 | 	add	fp, #8
33b40     A7 FA 61 FC | 	wrlong	result1, fp
33b44     08 4E 85 F1 | 	sub	fp, #8
33b48     00 FA 0D F2 | 	cmp	result1, #0 wz
33b4c     4C 00 90 5D |  if_ne	jmp	#LR__4941
33b50     38 4E 05 F1 | 	add	fp, #56
33b54     A7 12 02 F6 | 	mov	arg01, fp
33b58     38 4E 85 F1 | 	sub	fp, #56
33b5c     00 14 06 F6 | 	mov	arg02, #0
33b60     C0 C9 BF FD | 	call	#_fatfs_cc_dir_read
33b64     08 4E 05 F1 | 	add	fp, #8
33b68     A7 FA 61 FC | 	wrlong	result1, fp
33b6c     00 FA 4D F2 | 	cmps	result1, #0 wz
33b70     08 4E 85 F1 | 	sub	fp, #8
33b74     08 4E 05 A1 |  if_e	add	fp, #8
33b78     A7 0E 68 AC |  if_e	wrlong	#7, fp
33b7c     08 4E 85 A1 |  if_e	sub	fp, #8
33b80     08 4E 05 F1 | 	add	fp, #8
33b84     A7 FA 01 FB | 	rdlong	result1, fp
33b88     08 4E 85 F1 | 	sub	fp, #8
33b8c     04 FA 0D F2 | 	cmp	result1, #4 wz
33b90     08 4E 05 A1 |  if_e	add	fp, #8
33b94     A7 00 68 AC |  if_e	wrlong	#0, fp
33b98     08 4E 85 A1 |  if_e	sub	fp, #8
33b9c                 | LR__4941
33b9c                 | LR__4942
33b9c                 | LR__4943
33b9c     08 4E 05 F1 | 	add	fp, #8
33ba0     A7 FA 09 FB | 	rdlong	result1, fp wz
33ba4     08 4E 85 F1 | 	sub	fp, #8
33ba8     88 00 90 5D |  if_ne	jmp	#LR__4946
33bac     0C 4E 05 F1 | 	add	fp, #12
33bb0     A7 12 02 F6 | 	mov	arg01, fp
33bb4     0C 4E 85 F1 | 	sub	fp, #12
33bb8     B4 CB BF FD | 	call	#_fatfs_cc_dir_remove
33bbc     08 4E 05 F1 | 	add	fp, #8
33bc0     A7 FA 61 FC | 	wrlong	result1, fp
33bc4     08 4E 85 F1 | 	sub	fp, #8
33bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
33bcc     38 00 90 5D |  if_ne	jmp	#LR__4944
33bd0     64 4E 05 F1 | 	add	fp, #100
33bd4     A7 FA 09 FB | 	rdlong	result1, fp wz
33bd8     64 4E 85 F1 | 	sub	fp, #100
33bdc     28 00 90 AD |  if_e	jmp	#LR__4944
33be0     0C 4E 05 F1 | 	add	fp, #12
33be4     A7 12 02 F6 | 	mov	arg01, fp
33be8     58 4E 05 F1 | 	add	fp, #88
33bec     A7 14 02 FB | 	rdlong	arg02, fp
33bf0     64 4E 85 F1 | 	sub	fp, #100
33bf4     00 16 06 F6 | 	mov	arg03, #0
33bf8     00 C1 BF FD | 	call	#_fatfs_cc_remove_chain
33bfc     08 4E 05 F1 | 	add	fp, #8
33c00     A7 FA 61 FC | 	wrlong	result1, fp
33c04     08 4E 85 F1 | 	sub	fp, #8
33c08                 | LR__4944
33c08     08 4E 05 F1 | 	add	fp, #8
33c0c     A7 FA 09 FB | 	rdlong	result1, fp wz
33c10     08 4E 85 F1 | 	sub	fp, #8
33c14     1C 00 90 5D |  if_ne	jmp	#LR__4945
33c18     68 4E 05 F1 | 	add	fp, #104
33c1c     A7 12 02 FB | 	rdlong	arg01, fp
33c20     68 4E 85 F1 | 	sub	fp, #104
33c24     E0 BB BF FD | 	call	#_fatfs_cc_sync_fs
33c28     08 4E 05 F1 | 	add	fp, #8
33c2c     A7 FA 61 FC | 	wrlong	result1, fp
33c30     08 4E 85 F1 | 	sub	fp, #8
33c34                 | LR__4945
33c34                 | LR__4946
33c34                 | LR__4947
33c34                 | LR__4948
33c34                 | ' 			}
33c34                 | ' 		}
33c34                 | ' 		;
33c34                 | ' 	}
33c34                 | ' 
33c34                 | ' 	return res ;
33c34     08 4E 05 F1 | 	add	fp, #8
33c38     A7 FA 01 FB | 	rdlong	result1, fp
33c3c     08 4E 85 F1 | 	sub	fp, #8
33c40     A7 F0 03 F6 | 	mov	ptra, fp
33c44     B2 00 A0 FD | 	call	#popregs_
33c48                 | _fatfs_cc_f_unlink_ret
33c48     2D 00 64 FD | 	ret
33c4c                 | 
33c4c                 | _fatfs_cc_f_mkdir
33c4c     00 4A 05 F6 | 	mov	COUNT_, #0
33c50     A8 00 A0 FD | 	call	#pushregs_
33c54     58 F0 07 F1 | 	add	ptra, #88
33c58     04 4E 05 F1 | 	add	fp, #4
33c5c     A7 12 62 FC | 	wrlong	arg01, fp
33c60     A7 12 02 F6 | 	mov	arg01, fp
33c64     44 4E 05 F1 | 	add	fp, #68
33c68     A7 14 02 F6 | 	mov	arg02, fp
33c6c     48 4E 85 F1 | 	sub	fp, #72
33c70     02 16 06 F6 | 	mov	arg03, #2
33c74     CC D3 BF FD | 	call	#_fatfs_cc_mount_volume
33c78     08 4E 05 F1 | 	add	fp, #8
33c7c     A7 FA 61 FC | 	wrlong	result1, fp
33c80     08 4E 85 F1 | 	sub	fp, #8
33c84     00 FA 0D F2 | 	cmp	result1, #0 wz
33c88     C4 02 90 5D |  if_ne	jmp	#LR__4955
33c8c     48 4E 05 F1 | 	add	fp, #72
33c90     A7 16 02 FB | 	rdlong	arg03, fp
33c94     3C 4E 85 F1 | 	sub	fp, #60
33c98     A7 16 62 FC | 	wrlong	arg03, fp
33c9c     A7 12 02 F6 | 	mov	arg01, fp
33ca0     08 4E 85 F1 | 	sub	fp, #8
33ca4     A7 14 02 FB | 	rdlong	arg02, fp
33ca8     04 4E 85 F1 | 	sub	fp, #4
33cac     14 CE BF FD | 	call	#_fatfs_cc_follow_path
33cb0     08 4E 05 F1 | 	add	fp, #8
33cb4     A7 FA 61 FC | 	wrlong	result1, fp
33cb8     00 FA 4D F2 | 	cmps	result1, #0 wz
33cbc     08 4E 85 F1 | 	sub	fp, #8
33cc0     08 4E 05 A1 |  if_e	add	fp, #8
33cc4     A7 10 68 AC |  if_e	wrlong	#8, fp
33cc8     08 4E 85 A1 |  if_e	sub	fp, #8
33ccc     08 4E 05 F1 | 	add	fp, #8
33cd0     A7 FA 01 FB | 	rdlong	result1, fp
33cd4     08 4E 85 F1 | 	sub	fp, #8
33cd8     04 FA 0D F2 | 	cmp	result1, #4 wz
33cdc     70 02 90 5D |  if_ne	jmp	#LR__4954
33ce0     48 4E 05 F1 | 	add	fp, #72
33ce4     A7 16 02 FB | 	rdlong	arg03, fp
33ce8     10 4E 85 F1 | 	sub	fp, #16
33cec     A7 16 62 FC | 	wrlong	arg03, fp
33cf0     A7 12 02 F6 | 	mov	arg01, fp
33cf4     38 4E 85 F1 | 	sub	fp, #56
33cf8     00 14 06 F6 | 	mov	arg02, #0
33cfc     10 C1 BF FD | 	call	#_fatfs_cc_create_chain
33d00     4C 4E 05 F1 | 	add	fp, #76
33d04     A7 FA 61 FC | 	wrlong	result1, fp
33d08     44 4E 85 F1 | 	sub	fp, #68
33d0c     A7 00 68 FC | 	wrlong	#0, fp
33d10     44 4E 05 F1 | 	add	fp, #68
33d14     A7 FA 09 FB | 	rdlong	result1, fp wz
33d18     4C 4E 85 F1 | 	sub	fp, #76
33d1c     08 4E 05 A1 |  if_e	add	fp, #8
33d20     A7 0E 68 AC |  if_e	wrlong	#7, fp
33d24     08 4E 85 A1 |  if_e	sub	fp, #8
33d28     4C 4E 05 F1 | 	add	fp, #76
33d2c     A7 FA 01 FB | 	rdlong	result1, fp
33d30     4C 4E 85 F1 | 	sub	fp, #76
33d34     01 FA 0D F2 | 	cmp	result1, #1 wz
33d38     08 4E 05 A1 |  if_e	add	fp, #8
33d3c     A7 04 68 AC |  if_e	wrlong	#2, fp
33d40     08 4E 85 A1 |  if_e	sub	fp, #8
33d44     4C 4E 05 F1 | 	add	fp, #76
33d48     A7 16 02 FB | 	rdlong	arg03, fp
33d4c     4C 4E 85 F1 | 	sub	fp, #76
33d50     FF FF 7F FF 
33d54     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33d58     08 4E 05 A1 |  if_e	add	fp, #8
33d5c     A7 02 68 AC |  if_e	wrlong	#1, fp
33d60     08 4E 85 A1 |  if_e	sub	fp, #8
33d64     20 0A B0 FD | 	call	#_fatfs_cc__get_fattime
33d68     54 4E 05 F1 | 	add	fp, #84
33d6c     A7 FA 61 FC | 	wrlong	result1, fp
33d70     4C 4E 85 F1 | 	sub	fp, #76
33d74     A7 FA 09 FB | 	rdlong	result1, fp wz
33d78     08 4E 85 F1 | 	sub	fp, #8
33d7c     1C 01 90 5D |  if_ne	jmp	#LR__4951
33d80     48 4E 05 F1 | 	add	fp, #72
33d84     A7 12 02 FB | 	rdlong	arg01, fp
33d88     04 4E 05 F1 | 	add	fp, #4
33d8c     A7 14 02 FB | 	rdlong	arg02, fp
33d90     4C 4E 85 F1 | 	sub	fp, #76
33d94     9C C2 BF FD | 	call	#_fatfs_cc_dir_clear
33d98     08 4E 05 F1 | 	add	fp, #8
33d9c     A7 FA 61 FC | 	wrlong	result1, fp
33da0     00 FA 4D F2 | 	cmps	result1, #0 wz
33da4     08 4E 85 F1 | 	sub	fp, #8
33da8     F0 00 90 5D |  if_ne	jmp	#LR__4950
33dac     48 4E 05 F1 | 	add	fp, #72
33db0     A7 12 02 FB | 	rdlong	arg01, fp
33db4     48 4E 85 F1 | 	sub	fp, #72
33db8     30 12 06 F1 | 	add	arg01, #48
33dbc     20 14 06 F6 | 	mov	arg02, #32
33dc0     0B 16 06 F6 | 	mov	arg03, #11
33dc4     98 00 A0 FD | 	call	#\builtin_bytefill_
33dc8     48 4E 05 F1 | 	add	fp, #72
33dcc     A7 FA 01 FB | 	rdlong	result1, fp
33dd0     30 FA 05 F1 | 	add	result1, #48
33dd4     FD 5C 48 FC | 	wrbyte	#46, result1
33dd8     A7 16 02 FB | 	rdlong	arg03, fp
33ddc     3B 16 06 F1 | 	add	arg03, #59
33de0     0B 21 48 FC | 	wrbyte	#16, arg03
33de4     A7 12 02 FB | 	rdlong	arg01, fp
33de8     46 12 06 F1 | 	add	arg01, #70
33dec     0C 4E 05 F1 | 	add	fp, #12
33df0     A7 14 02 FB | 	rdlong	arg02, fp
33df4     09 15 62 FC | 	wrlong	arg02, arg01
33df8     0C 4E 85 F1 | 	sub	fp, #12
33dfc     A7 14 02 FB | 	rdlong	arg02, fp
33e00     0A 13 02 F6 | 	mov	arg01, arg02
33e04     30 14 06 F1 | 	add	arg02, #48
33e08     04 4E 05 F1 | 	add	fp, #4
33e0c     A7 16 02 FB | 	rdlong	arg03, fp
33e10     4C 4E 85 F1 | 	sub	fp, #76
33e14     E4 C6 BF FD | 	call	#_fatfs_cc_st_clust
33e18     48 4E 05 F1 | 	add	fp, #72
33e1c     A7 14 02 FB | 	rdlong	arg02, fp
33e20     0A 13 02 F6 | 	mov	arg01, arg02
33e24     50 12 06 F1 | 	add	arg01, #80
33e28     48 4E 85 F1 | 	sub	fp, #72
33e2c     30 14 06 F1 | 	add	arg02, #48
33e30     20 16 06 F6 | 	mov	arg03, #32
33e34     88 41 BF FD | 	call	#__system____builtin_memmove
33e38     48 4E 05 F1 | 	add	fp, #72
33e3c     A7 16 02 FB | 	rdlong	arg03, fp
33e40     51 16 06 F1 | 	add	arg03, #81
33e44     0B 5D 48 FC | 	wrbyte	#46, arg03
33e48     34 4E 85 F1 | 	sub	fp, #52
33e4c     A7 16 02 FB | 	rdlong	arg03, fp
33e50     3C 4E 05 F1 | 	add	fp, #60
33e54     A7 16 62 FC | 	wrlong	arg03, fp
33e58     08 4E 85 F1 | 	sub	fp, #8
33e5c     A7 14 02 FB | 	rdlong	arg02, fp
33e60     0A 13 02 F6 | 	mov	arg01, arg02
33e64     50 14 06 F1 | 	add	arg02, #80
33e68     48 4E 85 F1 | 	sub	fp, #72
33e6c     8C C6 BF FD | 	call	#_fatfs_cc_st_clust
33e70     48 4E 05 F1 | 	add	fp, #72
33e74     A7 16 02 FB | 	rdlong	arg03, fp
33e78     03 16 06 F1 | 	add	arg03, #3
33e7c     0B 03 48 FC | 	wrbyte	#1, arg03
33e80     3C 4E 85 F1 | 	sub	fp, #60
33e84     A7 12 02 F6 | 	mov	arg01, fp
33e88     0C 4E 85 F1 | 	sub	fp, #12
33e8c     60 C8 BF FD | 	call	#_fatfs_cc_dir_register
33e90     08 4E 05 F1 | 	add	fp, #8
33e94     A7 FA 61 FC | 	wrlong	result1, fp
33e98     08 4E 85 F1 | 	sub	fp, #8
33e9c                 | LR__4950
33e9c                 | LR__4951
33e9c     08 4E 05 F1 | 	add	fp, #8
33ea0     A7 FA 09 FB | 	rdlong	result1, fp wz
33ea4     08 4E 85 F1 | 	sub	fp, #8
33ea8     88 00 90 5D |  if_ne	jmp	#LR__4952
33eac     28 4E 05 F1 | 	add	fp, #40
33eb0     A7 12 02 FB | 	rdlong	arg01, fp
33eb4     16 12 06 F1 | 	add	arg01, #22
33eb8     2C 4E 05 F1 | 	add	fp, #44
33ebc     A7 14 02 FB | 	rdlong	arg02, fp
33ec0     09 15 62 FC | 	wrlong	arg02, arg01
33ec4     0C 4E 85 F1 | 	sub	fp, #12
33ec8     A7 12 02 FB | 	rdlong	arg01, fp
33ecc     20 4E 85 F1 | 	sub	fp, #32
33ed0     A7 14 02 FB | 	rdlong	arg02, fp
33ed4     24 4E 05 F1 | 	add	fp, #36
33ed8     A7 16 02 FB | 	rdlong	arg03, fp
33edc     4C 4E 85 F1 | 	sub	fp, #76
33ee0     18 C6 BF FD | 	call	#_fatfs_cc_st_clust
33ee4     28 4E 05 F1 | 	add	fp, #40
33ee8     A7 FA 01 FB | 	rdlong	result1, fp
33eec     0B FA 05 F1 | 	add	result1, #11
33ef0     FD 20 48 FC | 	wrbyte	#16, result1
33ef4     20 4E 05 F1 | 	add	fp, #32
33ef8     A7 FA 01 FB | 	rdlong	result1, fp
33efc     03 FA 05 F1 | 	add	result1, #3
33f00     FD 02 48 FC | 	wrbyte	#1, result1
33f04     40 4E 85 F1 | 	sub	fp, #64
33f08     A7 FA 09 FB | 	rdlong	result1, fp wz
33f0c     08 4E 85 F1 | 	sub	fp, #8
33f10     3C 00 90 5D |  if_ne	jmp	#LR__4953
33f14     48 4E 05 F1 | 	add	fp, #72
33f18     A7 12 02 FB | 	rdlong	arg01, fp
33f1c     48 4E 85 F1 | 	sub	fp, #72
33f20     E4 B8 BF FD | 	call	#_fatfs_cc_sync_fs
33f24     08 4E 05 F1 | 	add	fp, #8
33f28     A7 FA 61 FC | 	wrlong	result1, fp
33f2c     08 4E 85 F1 | 	sub	fp, #8
33f30     1C 00 90 FD | 	jmp	#LR__4953
33f34                 | LR__4952
33f34     38 4E 05 F1 | 	add	fp, #56
33f38     A7 12 02 F6 | 	mov	arg01, fp
33f3c     14 4E 05 F1 | 	add	fp, #20
33f40     A7 14 02 FB | 	rdlong	arg02, fp
33f44     4C 4E 85 F1 | 	sub	fp, #76
33f48     00 16 06 F6 | 	mov	arg03, #0
33f4c     AC BD BF FD | 	call	#_fatfs_cc_remove_chain
33f50                 | LR__4953
33f50                 | LR__4954
33f50                 | LR__4955
33f50                 | ' 				remove_chain(&sobj, dcl, 0);
33f50                 | ' 			}
33f50                 | ' 		}
33f50                 | ' 		;
33f50                 | ' 	}
33f50                 | ' 
33f50                 | ' 	return res ;
33f50     08 4E 05 F1 | 	add	fp, #8
33f54     A7 FA 01 FB | 	rdlong	result1, fp
33f58     08 4E 85 F1 | 	sub	fp, #8
33f5c     A7 F0 03 F6 | 	mov	ptra, fp
33f60     B2 00 A0 FD | 	call	#popregs_
33f64                 | _fatfs_cc_f_mkdir_ret
33f64     2D 00 64 FD | 	ret
33f68                 | 
33f68                 | _fatfs_cc_f_rename
33f68     01 4A 05 F6 | 	mov	COUNT_, #1
33f6c     A8 00 A0 FD | 	call	#pushregs_
33f70     94 F0 07 F1 | 	add	ptra, #148
33f74     04 4E 05 F1 | 	add	fp, #4
33f78     A7 12 62 FC | 	wrlong	arg01, fp
33f7c     04 4E 05 F1 | 	add	fp, #4
33f80     A7 14 62 FC | 	wrlong	arg02, fp
33f84     A7 12 02 F6 | 	mov	arg01, fp
33f88     08 4E 85 F1 | 	sub	fp, #8
33f8c     40 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
33f90     04 4E 05 F1 | 	add	fp, #4
33f94     A7 12 02 F6 | 	mov	arg01, fp
33f98     64 4E 05 F1 | 	add	fp, #100
33f9c     A7 14 02 F6 | 	mov	arg02, fp
33fa0     68 4E 85 F1 | 	sub	fp, #104
33fa4     02 16 06 F6 | 	mov	arg03, #2
33fa8     98 D0 BF FD | 	call	#_fatfs_cc_mount_volume
33fac     0C 4E 05 F1 | 	add	fp, #12
33fb0     A7 FA 61 FC | 	wrlong	result1, fp
33fb4     0C 4E 85 F1 | 	sub	fp, #12
33fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
33fbc     44 03 90 5D |  if_ne	jmp	#LR__4973
33fc0     68 4E 05 F1 | 	add	fp, #104
33fc4     A7 16 02 FB | 	rdlong	arg03, fp
33fc8     58 4E 85 F1 | 	sub	fp, #88
33fcc     A7 16 62 FC | 	wrlong	arg03, fp
33fd0     A7 12 02 F6 | 	mov	arg01, fp
33fd4     0C 4E 85 F1 | 	sub	fp, #12
33fd8     A7 14 02 FB | 	rdlong	arg02, fp
33fdc     04 4E 85 F1 | 	sub	fp, #4
33fe0     E0 CA BF FD | 	call	#_fatfs_cc_follow_path
33fe4     0C 4E 05 F1 | 	add	fp, #12
33fe8     A7 FA 61 FC | 	wrlong	result1, fp
33fec     00 FA 4D F2 | 	cmps	result1, #0 wz
33ff0     0C 4E 85 F1 | 	sub	fp, #12
33ff4     1C 00 90 5D |  if_ne	jmp	#LR__4960
33ff8     3B 4E 05 F1 | 	add	fp, #59
33ffc     A7 FA C1 FA | 	rdbyte	result1, fp
34000     3B 4E 85 F1 | 	sub	fp, #59
34004     A0 FA CD F7 | 	test	result1, #160 wz
34008     0C 4E 05 51 |  if_ne	add	fp, #12
3400c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
34010     0C 4E 85 51 |  if_ne	sub	fp, #12
34014                 | LR__4960
34014     0C 4E 05 F1 | 	add	fp, #12
34018     A7 26 0A FB | 	rdlong	local01, fp wz
3401c     0C 4E 85 F1 | 	sub	fp, #12
34020     E0 02 90 5D |  if_ne	jmp	#LR__4972
34024     6C 4E 05 F1 | 	add	fp, #108
34028     A7 12 02 F6 | 	mov	arg01, fp
3402c     40 4E 85 F1 | 	sub	fp, #64
34030     A7 14 02 FB | 	rdlong	arg02, fp
34034     2C 4E 85 F1 | 	sub	fp, #44
34038     20 16 06 F6 | 	mov	arg03, #32
3403c     80 3F BF FD | 	call	#__system____builtin_memmove
34040     3C 4E 05 F1 | 	add	fp, #60
34044     A7 12 02 F6 | 	mov	arg01, fp
34048     2C 4E 85 F1 | 	sub	fp, #44
3404c     A7 14 02 F6 | 	mov	arg02, fp
34050     10 4E 85 F1 | 	sub	fp, #16
34054     2C 16 06 F6 | 	mov	arg03, #44
34058     64 3F BF FD | 	call	#__system____builtin_memmove
3405c     3C 4E 05 F1 | 	add	fp, #60
34060     A7 12 02 F6 | 	mov	arg01, fp
34064     34 4E 85 F1 | 	sub	fp, #52
34068     A7 14 02 FB | 	rdlong	arg02, fp
3406c     08 4E 85 F1 | 	sub	fp, #8
34070     50 CA BF FD | 	call	#_fatfs_cc_follow_path
34074     0C 4E 05 F1 | 	add	fp, #12
34078     A7 FA 61 FC | 	wrlong	result1, fp
3407c     0C 4E 85 F1 | 	sub	fp, #12
34080     00 FA 0D F2 | 	cmp	result1, #0 wz
34084     4C 00 90 5D |  if_ne	jmp	#LR__4963
34088     44 4E 05 F1 | 	add	fp, #68
3408c     A7 FA 01 FB | 	rdlong	result1, fp
34090     2C 4E 85 F1 | 	sub	fp, #44
34094     A7 16 02 FB | 	rdlong	arg03, fp
34098     18 4E 85 F1 | 	sub	fp, #24
3409c     0B FB 09 F2 | 	cmp	result1, arg03 wz
340a0     20 00 90 5D |  if_ne	jmp	#LR__4961
340a4     4C 4E 05 F1 | 	add	fp, #76
340a8     A7 FA 01 FB | 	rdlong	result1, fp
340ac     2C 4E 85 F1 | 	sub	fp, #44
340b0     A7 16 02 FB | 	rdlong	arg03, fp
340b4     20 4E 85 F1 | 	sub	fp, #32
340b8     0B FB 09 F2 | 	cmp	result1, arg03 wz
340bc     04 26 06 A6 |  if_e	mov	local01, #4
340c0     04 00 90 AD |  if_e	jmp	#LR__4962
340c4                 | LR__4961
340c4     08 26 06 F6 | 	mov	local01, #8
340c8                 | LR__4962
340c8     0C 4E 05 F1 | 	add	fp, #12
340cc     A7 26 62 FC | 	wrlong	local01, fp
340d0     0C 4E 85 F1 | 	sub	fp, #12
340d4                 | LR__4963
340d4     0C 4E 05 F1 | 	add	fp, #12
340d8     A7 26 02 FB | 	rdlong	local01, fp
340dc     0C 4E 85 F1 | 	sub	fp, #12
340e0     04 26 0E F2 | 	cmp	local01, #4 wz
340e4     CC 01 90 5D |  if_ne	jmp	#LR__4969
340e8     3C 4E 05 F1 | 	add	fp, #60
340ec     A7 12 02 F6 | 	mov	arg01, fp
340f0     3C 4E 85 F1 | 	sub	fp, #60
340f4     F8 C5 BF FD | 	call	#_fatfs_cc_dir_register
340f8     0C 4E 05 F1 | 	add	fp, #12
340fc     A7 FA 61 FC | 	wrlong	result1, fp
34100     0C 4E 85 F1 | 	sub	fp, #12
34104     00 FA 0D F2 | 	cmp	result1, #0 wz
34108     A8 01 90 5D |  if_ne	jmp	#LR__4968
3410c     58 4E 05 F1 | 	add	fp, #88
34110     A7 12 02 FB | 	rdlong	arg01, fp
34114     34 4E 05 F1 | 	add	fp, #52
34118     A7 12 62 FC | 	wrlong	arg01, fp
3411c     0D 12 06 F1 | 	add	arg01, #13
34120     20 4E 85 F1 | 	sub	fp, #32
34124     A7 14 02 F6 | 	mov	arg02, fp
34128     6C 4E 85 F1 | 	sub	fp, #108
3412c     0D 14 06 F1 | 	add	arg02, #13
34130     13 16 06 F6 | 	mov	arg03, #19
34134     88 3E BF FD | 	call	#__system____builtin_memmove
34138     8C 4E 05 F1 | 	add	fp, #140
3413c     A7 26 02 FB | 	rdlong	local01, fp
34140     15 4E 85 F1 | 	sub	fp, #21
34144     A7 FA C1 FA | 	rdbyte	result1, fp
34148     0B 26 06 F1 | 	add	local01, #11
3414c     13 FB 41 FC | 	wrbyte	result1, local01
34150     15 4E 05 F1 | 	add	fp, #21
34154     A7 26 02 FB | 	rdlong	local01, fp
34158     8C 4E 85 F1 | 	sub	fp, #140
3415c     0B 26 06 F1 | 	add	local01, #11
34160     13 27 C2 FA | 	rdbyte	local01, local01
34164     10 26 CE F7 | 	test	local01, #16 wz
34168     24 00 90 5D |  if_ne	jmp	#LR__4964
3416c     8C 4E 05 F1 | 	add	fp, #140
34170     A7 FA 01 FB | 	rdlong	result1, fp
34174     FD 26 02 F6 | 	mov	local01, result1
34178     8C 4E 85 F1 | 	sub	fp, #140
3417c     0B FA 05 F1 | 	add	result1, #11
34180     FD FA C1 FA | 	rdbyte	result1, result1
34184     20 FA 45 F5 | 	or	result1, #32
34188     0B 26 06 F1 | 	add	local01, #11
3418c     13 FB 41 FC | 	wrbyte	result1, local01
34190                 | LR__4964
34190     68 4E 05 F1 | 	add	fp, #104
34194     A7 26 02 FB | 	rdlong	local01, fp
34198     03 26 06 F1 | 	add	local01, #3
3419c     13 03 48 FC | 	wrbyte	#1, local01
341a0     24 4E 05 F1 | 	add	fp, #36
341a4     A7 26 02 FB | 	rdlong	local01, fp
341a8     8C 4E 85 F1 | 	sub	fp, #140
341ac     0B 26 06 F1 | 	add	local01, #11
341b0     13 27 C2 FA | 	rdbyte	local01, local01
341b4     10 26 CE F7 | 	test	local01, #16 wz
341b8     F8 00 90 AD |  if_e	jmp	#LR__4967
341bc     18 4E 05 F1 | 	add	fp, #24
341c0     A7 16 02 FB | 	rdlong	arg03, fp
341c4     2C 4E 05 F1 | 	add	fp, #44
341c8     A7 26 02 FB | 	rdlong	local01, fp
341cc     44 4E 85 F1 | 	sub	fp, #68
341d0     13 17 0A F2 | 	cmp	arg03, local01 wz
341d4     DC 00 90 AD |  if_e	jmp	#LR__4967
341d8     68 4E 05 F1 | 	add	fp, #104
341dc     A7 12 02 FB | 	rdlong	arg01, fp
341e0     09 27 02 F6 | 	mov	local01, arg01
341e4     24 4E 05 F1 | 	add	fp, #36
341e8     A7 14 02 FB | 	rdlong	arg02, fp
341ec     8C 4E 85 F1 | 	sub	fp, #140
341f0     D4 C2 BF FD | 	call	#_fatfs_cc_ld_clust
341f4     FD 14 02 F6 | 	mov	arg02, result1
341f8     13 13 02 F6 | 	mov	arg01, local01
341fc     08 B7 BF FD | 	call	#_fatfs_cc_clst2sect
34200     90 4E 05 F1 | 	add	fp, #144
34204     A7 FA 61 FC | 	wrlong	result1, fp
34208     00 FA 4D F2 | 	cmps	result1, #0 wz
3420c     90 4E 85 F1 | 	sub	fp, #144
34210     0C 4E 05 A1 |  if_e	add	fp, #12
34214     A7 04 68 AC |  if_e	wrlong	#2, fp
34218     0C 4E 85 A1 |  if_e	sub	fp, #12
3421c     94 00 90 AD |  if_e	jmp	#LR__4966
34220     68 4E 05 F1 | 	add	fp, #104
34224     A7 12 02 FB | 	rdlong	arg01, fp
34228     28 4E 05 F1 | 	add	fp, #40
3422c     A7 14 02 FB | 	rdlong	arg02, fp
34230     90 4E 85 F1 | 	sub	fp, #144
34234     58 B5 BF FD | 	call	#_fatfs_cc_move_window
34238     0C 4E 05 F1 | 	add	fp, #12
3423c     A7 FA 61 FC | 	wrlong	result1, fp
34240     5C 4E 05 F1 | 	add	fp, #92
34244     A7 26 02 FB | 	rdlong	local01, fp
34248     50 26 06 F1 | 	add	local01, #80
3424c     24 4E 05 F1 | 	add	fp, #36
34250     A7 26 62 FC | 	wrlong	local01, fp
34254     80 4E 85 F1 | 	sub	fp, #128
34258     A7 26 0A FB | 	rdlong	local01, fp wz
3425c     0C 4E 85 F1 | 	sub	fp, #12
34260     50 00 90 5D |  if_ne	jmp	#LR__4965
34264     8C 4E 05 F1 | 	add	fp, #140
34268     A7 26 02 FB | 	rdlong	local01, fp
3426c     8C 4E 85 F1 | 	sub	fp, #140
34270     01 26 06 F1 | 	add	local01, #1
34274     13 27 C2 FA | 	rdbyte	local01, local01
34278     2E 26 0E F2 | 	cmp	local01, #46 wz
3427c     34 00 90 5D |  if_ne	jmp	#LR__4965
34280     68 4E 05 F1 | 	add	fp, #104
34284     A7 12 02 FB | 	rdlong	arg01, fp
34288     24 4E 05 F1 | 	add	fp, #36
3428c     A7 14 02 FB | 	rdlong	arg02, fp
34290     48 4E 85 F1 | 	sub	fp, #72
34294     A7 16 02 FB | 	rdlong	arg03, fp
34298     44 4E 85 F1 | 	sub	fp, #68
3429c     5C C2 BF FD | 	call	#_fatfs_cc_st_clust
342a0     68 4E 05 F1 | 	add	fp, #104
342a4     A7 26 02 FB | 	rdlong	local01, fp
342a8     68 4E 85 F1 | 	sub	fp, #104
342ac     03 26 06 F1 | 	add	local01, #3
342b0     13 03 48 FC | 	wrbyte	#1, local01
342b4                 | LR__4965
342b4                 | LR__4966
342b4                 | LR__4967
342b4                 | LR__4968
342b4                 | LR__4969
342b4     0C 4E 05 F1 | 	add	fp, #12
342b8     A7 26 0A FB | 	rdlong	local01, fp wz
342bc     0C 4E 85 F1 | 	sub	fp, #12
342c0     40 00 90 5D |  if_ne	jmp	#LR__4971
342c4     10 4E 05 F1 | 	add	fp, #16
342c8     A7 12 02 F6 | 	mov	arg01, fp
342cc     10 4E 85 F1 | 	sub	fp, #16
342d0     9C C4 BF FD | 	call	#_fatfs_cc_dir_remove
342d4     0C 4E 05 F1 | 	add	fp, #12
342d8     A7 FA 61 FC | 	wrlong	result1, fp
342dc     0C 4E 85 F1 | 	sub	fp, #12
342e0     00 FA 0D F2 | 	cmp	result1, #0 wz
342e4     1C 00 90 5D |  if_ne	jmp	#LR__4970
342e8     68 4E 05 F1 | 	add	fp, #104
342ec     A7 12 02 FB | 	rdlong	arg01, fp
342f0     68 4E 85 F1 | 	sub	fp, #104
342f4     10 B5 BF FD | 	call	#_fatfs_cc_sync_fs
342f8     0C 4E 05 F1 | 	add	fp, #12
342fc     A7 FA 61 FC | 	wrlong	result1, fp
34300     0C 4E 85 F1 | 	sub	fp, #12
34304                 | LR__4970
34304                 | LR__4971
34304                 | LR__4972
34304                 | LR__4973
34304                 | ' 					res = sync_fs(fs);
34304                 | ' 				}
34304                 | ' 			}
34304                 | ' 
34304                 | ' 		}
34304                 | ' 		;
34304                 | ' 	}
34304                 | ' 
34304                 | ' 	return res ;
34304     0C 4E 05 F1 | 	add	fp, #12
34308     A7 FA 01 FB | 	rdlong	result1, fp
3430c     0C 4E 85 F1 | 	sub	fp, #12
34310     A7 F0 03 F6 | 	mov	ptra, fp
34314     B2 00 A0 FD | 	call	#popregs_
34318                 | _fatfs_cc_f_rename_ret
34318     2D 00 64 FD | 	ret
3431c                 | 
3431c                 | _fatfs_cc_time
3431c     00 4A 05 F6 | 	mov	COUNT_, #0
34320     A8 00 A0 FD | 	call	#pushregs_
34324     14 F0 07 F1 | 	add	ptra, #20
34328     04 4E 05 F1 | 	add	fp, #4
3432c     A7 12 62 FC | 	wrlong	arg01, fp
34330     04 4E 05 F1 | 	add	fp, #4
34334     A7 12 02 F6 | 	mov	arg01, fp
34338     08 4E 85 F1 | 	sub	fp, #8
3433c     00 14 06 F6 | 	mov	arg02, #0
34340     80 17 B0 FD | 	call	#_fatfs_cc_gettimeofday
34344     08 4E 05 F1 | 	add	fp, #8
34348     A7 FA 01 FB | 	rdlong	result1, fp
3434c     08 4E 05 F1 | 	add	fp, #8
34350     A7 FA 61 FC | 	wrlong	result1, fp
34354     0C 4E 85 F1 | 	sub	fp, #12
34358     A7 FA 09 FB | 	rdlong	result1, fp wz
3435c     04 4E 85 F1 | 	sub	fp, #4
34360     18 00 90 AD |  if_e	jmp	#LR__4980
34364     04 4E 05 F1 | 	add	fp, #4
34368     A7 FA 01 FB | 	rdlong	result1, fp
3436c     0C 4E 05 F1 | 	add	fp, #12
34370     A7 14 02 FB | 	rdlong	arg02, fp
34374     10 4E 85 F1 | 	sub	fp, #16
34378     FD 14 62 FC | 	wrlong	arg02, result1
3437c                 | LR__4980
3437c                 | '         *tp = now;
3437c                 | '     return now;
3437c     10 4E 05 F1 | 	add	fp, #16
34380     A7 FA 01 FB | 	rdlong	result1, fp
34384     10 4E 85 F1 | 	sub	fp, #16
34388     A7 F0 03 F6 | 	mov	ptra, fp
3438c     B2 00 A0 FD | 	call	#popregs_
34390                 | _fatfs_cc_time_ret
34390     2D 00 64 FD | 	ret
34394                 | 
34394                 | _fatfs_cc_mktime
34394     06 4A 05 F6 | 	mov	COUNT_, #6
34398     A8 00 A0 FD | 	call	#pushregs_
3439c     09 27 02 F6 | 	mov	local01, arg01
343a0     14 26 06 F1 | 	add	local01, #20
343a4     13 13 02 FB | 	rdlong	arg01, local01
343a8     14 26 86 F1 | 	sub	local01, #20
343ac     46 12 56 F2 | 	cmps	arg01, #70 wc
343b0                 | '                 return (time_t) -1;
343b0     01 FA 65 C6 |  if_b	neg	result1, #1
343b4     6C 01 90 CD |  if_b	jmp	#LR__4994
343b8     03 00 00 FF 
343bc     6C 29 06 F6 | 	mov	local02, ##1900
343c0     14 26 06 F1 | 	add	local01, #20
343c4     13 FB 01 FB | 	rdlong	result1, local01
343c8     FD 28 02 F1 | 	add	local02, result1
343cc     08 26 86 F1 | 	sub	local01, #8
343d0     13 2B 02 FB | 	rdlong	local03, local01
343d4     01 2A 86 F1 | 	sub	local03, #1
343d8     04 26 06 F1 | 	add	local01, #4
343dc     13 13 02 FB | 	rdlong	arg01, local01
343e0     10 26 86 F1 | 	sub	local01, #16
343e4     02 12 66 F0 | 	shl	arg01, #2
343e8     0C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #268
343ec     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
343f0     09 FB 01 FB | 	rdlong	result1, arg01
343f4     FD 2A 02 F1 | 	add	local03, result1
343f8     14 13 02 F6 | 	mov	arg01, local02
343fc     0C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #268
34400     50 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
34404     00 FA 0D F2 | 	cmp	result1, #0 wz
34408     1C 00 90 AD |  if_e	jmp	#LR__4990
3440c     00 2C 06 F6 | 	mov	local04, #0
34410     10 26 06 F1 | 	add	local01, #16
34414     13 FB 01 FB | 	rdlong	result1, local01
34418     10 26 86 F1 | 	sub	local01, #16
3441c     02 FA 55 F2 | 	cmps	result1, #2 wc
34420     01 2C 06 36 |  if_ae	mov	local04, #1
34424     04 00 90 FD | 	jmp	#LR__4991
34428                 | LR__4990
34428     00 2C 06 F6 | 	mov	local04, #0
3442c                 | LR__4991
3442c     04 26 06 F1 | 	add	local01, #4
34430     13 FB 01 FB | 	rdlong	result1, local01
34434     04 26 86 F1 | 	sub	local01, #4
34438     13 2F 02 FB | 	rdlong	local05, local01
3443c     08 26 06 F1 | 	add	local01, #8
34440     13 13 02 FB | 	rdlong	arg01, local01
34444     07 00 00 FF 
34448     10 12 06 FD | 	qmul	arg01, ##3600
3444c     16 2B 02 F1 | 	add	local03, local04
34450     FD 2C 02 F6 | 	mov	local04, result1
34454     04 2C 66 F0 | 	shl	local04, #4
34458     FD 2C 82 F1 | 	sub	local04, result1
3445c     02 2C 66 F0 | 	shl	local04, #2
34460     16 2F 02 F1 | 	add	local05, local04
34464     08 26 86 F1 | 	sub	local01, #8
34468     18 2C 62 FD | 	getqx	local04
3446c     A8 00 00 FF 
34470     80 2B 06 FD | 	qmul	local03, ##86400
34474     16 2F 02 F1 | 	add	local05, local04
34478     14 2B 02 F6 | 	mov	local03, local02
3447c     03 00 00 FF 
34480     B2 2B 86 F1 | 	sub	local03, ##1970
34484     18 2C 62 FD | 	getqx	local04
34488     99 F0 00 FF 
3448c     80 2B 06 FD | 	qmul	local03, ##31536000
34490     16 2F 02 F1 | 	add	local05, local04
34494     14 2B 02 F6 | 	mov	local03, local02
34498     03 00 00 FF 
3449c     B1 2B 86 F1 | 	sub	local03, ##1969
344a0     15 31 52 F6 | 	abs	local06, local03 wc
344a4     02 30 46 F0 | 	shr	local06, #2
344a8     18 31 82 F6 | 	negc	local06, local06
344ac     03 00 00 FF 
344b0     D1 29 56 F2 | 	cmps	local02, ##2001 wc
344b4     18 2C 62 FD | 	getqx	local04
344b8     16 2F 02 F1 | 	add	local05, local04
344bc     18 00 90 CD |  if_b	jmp	#LR__4992
344c0     03 00 00 FF 
344c4     D0 29 86 F1 | 	sub	local02, ##2000
344c8     14 2D 52 F6 | 	abs	local04, local02 wc
344cc     64 2C 16 FD | 	qdiv	local04, #100
344d0     18 2C 62 FD | 	getqx	local04
344d4     16 31 A2 F3 | 	sumnc	local06, local04
344d8                 | LR__4992
344d8     A8 00 00 FF 
344dc     80 31 06 FD | 	qmul	local06, ##86400
344e0     18 30 62 FD | 	getqx	local06
344e4     18 2F 02 F1 | 	add	local05, local06
344e8     D0 01 B0 FD | 	call	#_fatfs_cc__tzset
344ec     D8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #216
344f0     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
344f4     18 2F 02 F1 | 	add	local05, local06
344f8     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
344fc     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34500     40 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #320
34504     01 2A 0E F2 | 	cmp	local03, #1 wz
34508     14 00 90 5D |  if_ne	jmp	#LR__4993
3450c     13 13 02 F6 | 	mov	arg01, local01
34510     E4 18 B0 FD | 	call	#_fatfs_cc___indst
34514     00 FA 0D F2 | 	cmp	result1, #0 wz
34518     07 00 00 5F 
3451c     10 2E 86 51 |  if_ne	sub	local05, ##3600
34520                 | LR__4993
34520                 | '                 s -=  (3600L) ;
34520                 | ' 
34520                 | '         return s;
34520     17 FB 01 F6 | 	mov	result1, local05
34524                 | LR__4994
34524     A7 F0 03 F6 | 	mov	ptra, fp
34528     B2 00 A0 FD | 	call	#popregs_
3452c                 | _fatfs_cc_mktime_ret
3452c     2D 00 64 FD | 	ret
34530                 | 
34530                 | _fatfs_cc__gmtime_r
34530     03 4A 05 F6 | 	mov	COUNT_, #3
34534     A8 00 A0 FD | 	call	#pushregs_
34538     09 27 02 FB | 	rdlong	local01, arg01
3453c     A8 00 00 FF 
34540     80 27 16 FD | 	qdiv	local01, ##86400
34544     18 FA 61 FD | 	getqx	result1
34548     04 FA 05 F1 | 	add	result1, #4
3454c     07 FA 15 FD | 	qdiv	result1, #7
34550     18 14 06 F1 | 	add	arg02, #24
34554     D1 7F 27 FF 
34558     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
3455c     D1 7F 27 3F 
34560     00 26 86 31 |  if_ae	sub	local01, ##1325376000
34564     03 00 00 3F 
34568     DC 29 06 36 |  if_ae	mov	local02, ##2012
3456c     03 00 00 CF 
34570     B2 29 06 C6 |  if_b	mov	local02, ##1970
34574                 | ' 	  year = 1970;
34574                 | ' 	}
34574                 | ' 
34574                 | ' 	for(;;) {
34574     19 FA 61 FD | 	getqy	result1
34578     0A FB 61 FC | 	wrlong	result1, arg02
3457c     18 14 86 F1 | 	sub	arg02, #24
34580                 | LR__5000
34580     14 13 02 F6 | 	mov	arg01, local02
34584     CC 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
34588     00 FA 0D F2 | 	cmp	result1, #0 wz
3458c     42 F1 00 5F 
34590     00 2B 06 56 |  if_ne	mov	local03, ##31622400
34594     99 F0 00 AF 
34598     80 2B 06 A6 |  if_e	mov	local03, ##31536000
3459c     15 27 12 F2 | 	cmp	local01, local03 wc
345a0                 | ' 	    break;
345a0     01 28 06 31 |  if_ae	add	local02, #1
345a4     15 27 82 31 |  if_ae	sub	local01, local03
345a8     D4 FF 9F 3D |  if_ae	jmp	#LR__5000
345ac     A8 00 00 FF 
345b0     80 27 16 FD | 	qdiv	local01, ##86400
345b4     14 2B 02 F6 | 	mov	local03, local02
345b8     03 00 00 FF 
345bc     6C 2B 86 F1 | 	sub	local03, ##1900
345c0     14 14 06 F1 | 	add	arg02, #20
345c4     0A 2B 62 FC | 	wrlong	local03, arg02
345c8     08 14 06 F1 | 	add	arg02, #8
345cc     14 13 02 F6 | 	mov	arg01, local02
345d0     18 28 62 FD | 	getqx	local02
345d4     0A 29 62 FC | 	wrlong	local02, arg02
345d8     1C 14 86 F1 | 	sub	arg02, #28
345dc     74 15 B0 FD | 	call	#_fatfs_cc__is_leap_year
345e0     00 FA 0D F2 | 	cmp	result1, #0 wz
345e4     1D 2A 06 56 |  if_ne	mov	local03, #29
345e8     1C 2A 06 A6 |  if_e	mov	local03, #28
345ec     E0 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #224
345f0     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
345f4     E0 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #224
345f8                 | ' 
345f8                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
345f8                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
345f8     00 12 06 F6 | 	mov	arg01, #0
345fc     97 22 48 FB | 	callpa	#(@LR__5002-@LR__5001)>>2,fcache_load_ptr_
34600                 | LR__5001
34600     09 2B 02 F6 | 	mov	local03, arg01
34604     02 2A 66 F0 | 	shl	local03, #2
34608     DC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #220
3460c     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
34610     15 2B 02 FB | 	rdlong	local03, local03
34614     15 29 52 F2 | 	cmps	local02, local03 wc
34618     DC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #220
3461c     24 00 90 CD |  if_b	jmp	#LR__5003
34620     09 2B 02 F6 | 	mov	local03, arg01
34624     02 2A 66 F0 | 	shl	local03, #2
34628     DC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #220
3462c     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
34630     15 2B 02 FB | 	rdlong	local03, local03
34634     15 29 82 F1 | 	sub	local02, local03
34638     01 12 06 F1 | 	add	arg01, #1
3463c     DC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #220
34640     BC FF 9F FD | 	jmp	#LR__5001
34644                 | LR__5002
34644                 | LR__5003
34644     A8 00 00 FF 
34648     80 27 16 FD | 	qdiv	local01, ##86400
3464c     10 14 06 F1 | 	add	arg02, #16
34650     0A 13 62 FC | 	wrlong	arg01, arg02
34654     01 28 06 F1 | 	add	local02, #1
34658     04 14 86 F1 | 	sub	arg02, #4
3465c     0A 29 62 FC | 	wrlong	local02, arg02
34660     19 26 62 FD | 	getqy	local01
34664     07 00 00 FF 
34668     10 26 16 FD | 	qdiv	local01, ##3600
3466c     18 2A 62 FD | 	getqx	local03
34670     07 00 00 FF 
34674     10 26 16 FD | 	qdiv	local01, ##3600
34678     04 14 86 F1 | 	sub	arg02, #4
3467c     0A 2B 62 FC | 	wrlong	local03, arg02
34680     19 26 62 FD | 	getqy	local01
34684     3C 26 16 FD | 	qdiv	local01, #60
34688     18 2A 62 FD | 	getqx	local03
3468c     3C 26 16 FD | 	qdiv	local01, #60
34690     04 14 86 F1 | 	sub	arg02, #4
34694     0A 2B 62 FC | 	wrlong	local03, arg02
34698     04 14 86 F1 | 	sub	arg02, #4
3469c                 | '         stm->tm_isdst = 0;
3469c                 | ' 
3469c                 | ' ;
3469c                 | '         return stm;
3469c     0A FB 01 F6 | 	mov	result1, arg02
346a0     19 2A 62 FD | 	getqy	local03
346a4     0A 2B 62 FC | 	wrlong	local03, arg02
346a8     20 14 06 F1 | 	add	arg02, #32
346ac     0A 01 68 FC | 	wrlong	#0, arg02
346b0     A7 F0 03 F6 | 	mov	ptra, fp
346b4     B2 00 A0 FD | 	call	#popregs_
346b8                 | _fatfs_cc__gmtime_r_ret
346b8     2D 00 64 FD | 	ret
346bc                 | 
346bc                 | _fatfs_cc__tzset
346bc     B0 01 00 FF 
346c0     20 13 06 F6 | 	mov	arg01, ##@LR__5314
346c4     24 00 B0 FD | 	call	#_fatfs_cc_getenv
346c8     FD 12 02 F6 | 	mov	arg01, result1
346cc     40 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #320
346d0     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
346d4     40 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #320
346d8     C8 14 B0 FD | 	call	#_fatfs_cc___tzoffset
346dc     D8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #216
346e0     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
346e4     D8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #216
346e8                 | _fatfs_cc__tzset_ret
346e8     2D 00 64 FD | 	ret
346ec                 | 
346ec                 | _fatfs_cc_getenv
346ec     06 4A 05 F6 | 	mov	COUNT_, #6
346f0     A8 00 A0 FD | 	call	#pushregs_
346f4     09 27 02 F6 | 	mov	local01, arg01
346f8     09 29 02 F6 | 	mov	local02, arg01
346fc     97 06 48 FB | 	callpa	#(@LR__5011-@LR__5010)>>2,fcache_load_ptr_
34700                 | LR__5010
34700     14 FB C9 FA | 	rdbyte	result1, local02 wz
34704     01 28 06 51 |  if_ne	add	local02, #1
34708     F4 FF 9F 5D |  if_ne	jmp	#LR__5010
3470c                 | LR__5011
3470c     09 29 82 F1 | 	sub	local02, arg01
34710     14 FB 01 F6 | 	mov	result1, local02
34714     90 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #400
34718     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
3471c     90 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #400
34720                 | '             return 0;
34720     00 FA 05 A6 |  if_e	mov	result1, #0
34724     54 00 90 AD |  if_e	jmp	#LR__5014
34728                 | ' 
34728                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
34728     90 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #400
3472c     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34730     90 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #400
34734                 | LR__5012
34734     15 2D 0A FB | 	rdlong	local04, local03 wz
34738     3C 00 90 AD |  if_e	jmp	#LR__5013
3473c     16 13 02 F6 | 	mov	arg01, local04
34740     13 15 02 F6 | 	mov	arg02, local01
34744     14 17 02 F6 | 	mov	arg03, local02
34748     10 A4 BF FD | 	call	#_fatfs_cc_strncmp
3474c     00 FA 0D F2 | 	cmp	result1, #0 wz
34750     14 2F 02 A6 |  if_e	mov	local05, local02
34754     16 2F 02 A1 |  if_e	add	local05, local04
34758     17 31 C2 AA |  if_e	rdbyte	local06, local05
3475c     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
34760                 | ' 			return name+len+1;
34760     14 2D 02 A1 |  if_e	add	local04, local02
34764     01 2C 06 A1 |  if_e	add	local04, #1
34768     16 FB 01 A6 |  if_e	mov	result1, local04
3476c     0C 00 90 AD |  if_e	jmp	#LR__5014
34770     04 2A 06 F1 | 	add	local03, #4
34774     BC FF 9F FD | 	jmp	#LR__5012
34778                 | LR__5013
34778                 | ' 	}
34778                 | ' 	return 0;
34778     00 FA 05 F6 | 	mov	result1, #0
3477c                 | LR__5014
3477c     A7 F0 03 F6 | 	mov	ptra, fp
34780     B2 00 A0 FD | 	call	#popregs_
34784                 | _fatfs_cc_getenv_ret
34784     2D 00 64 FD | 	ret
34788                 | 
34788                 | _fatfs_cc__get_fattime
34788     00 4A 05 F6 | 	mov	COUNT_, #0
3478c     A8 00 A0 FD | 	call	#pushregs_
34790     34 F0 07 F1 | 	add	ptra, #52
34794     00 12 06 F6 | 	mov	arg01, #0
34798     80 FB BF FD | 	call	#_fatfs_cc_time
3479c     04 4E 05 F1 | 	add	fp, #4
347a0     A7 FA 61 FC | 	wrlong	result1, fp
347a4     A7 12 02 F6 | 	mov	arg01, fp
347a8     0C 4E 05 F1 | 	add	fp, #12
347ac     A7 14 02 F6 | 	mov	arg02, fp
347b0     10 4E 85 F1 | 	sub	fp, #16
347b4     78 FD BF FD | 	call	#_fatfs_cc__gmtime_r
347b8     24 4E 05 F1 | 	add	fp, #36
347bc     A7 14 02 FB | 	rdlong	arg02, fp
347c0     50 14 86 F1 | 	sub	arg02, #80
347c4     09 14 66 F0 | 	shl	arg02, #9
347c8     04 4E 85 F1 | 	sub	fp, #4
347cc     A7 FA 01 FB | 	rdlong	result1, fp
347d0     01 FA 05 F1 | 	add	result1, #1
347d4     05 FA 65 F0 | 	shl	result1, #5
347d8     FD 14 42 F5 | 	or	arg02, result1
347dc     04 4E 85 F1 | 	sub	fp, #4
347e0     A7 FA 01 FB | 	rdlong	result1, fp
347e4     FD 14 42 F5 | 	or	arg02, result1
347e8     14 4E 85 F1 | 	sub	fp, #20
347ec     A7 14 62 FC | 	wrlong	arg02, fp
347f0     10 4E 05 F1 | 	add	fp, #16
347f4     A7 14 02 FB | 	rdlong	arg02, fp
347f8     0B 14 66 F0 | 	shl	arg02, #11
347fc     04 4E 85 F1 | 	sub	fp, #4
34800     A7 FA 01 FB | 	rdlong	result1, fp
34804     05 FA 65 F0 | 	shl	result1, #5
34808     FD 14 42 F5 | 	or	arg02, result1
3480c     04 4E 85 F1 | 	sub	fp, #4
34810     A7 FA 01 FB | 	rdlong	result1, fp
34814     FD 14 42 F5 | 	or	arg02, result1
34818     04 4E 85 F1 | 	sub	fp, #4
3481c     A7 14 62 FC | 	wrlong	arg02, fp
34820                 | ' 
34820                 | '     now = time(0);
34820                 | '     _gmtime_r (&now, &date);
34820                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
34820                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
34820                 | '     return (ffdate << 16) | fftime;
34820     04 4E 85 F1 | 	sub	fp, #4
34824     A7 FA 01 FB | 	rdlong	result1, fp
34828     10 FA 65 F0 | 	shl	result1, #16
3482c     08 4E 85 F1 | 	sub	fp, #8
34830     0A FB 41 F5 | 	or	result1, arg02
34834     A7 F0 03 F6 | 	mov	ptra, fp
34838     B2 00 A0 FD | 	call	#popregs_
3483c                 | _fatfs_cc__get_fattime_ret
3483c     2D 00 64 FD | 	ret
34840                 | 
34840                 | _fatfs_cc_unixtime_0999
34840     00 4A 05 F6 | 	mov	COUNT_, #0
34844     A8 00 A0 FD | 	call	#pushregs_
34848     34 F0 07 F1 | 	add	ptra, #52
3484c     04 4E 05 F1 | 	add	fp, #4
34850     A7 12 62 FC | 	wrlong	arg01, fp
34854     04 4E 05 F1 | 	add	fp, #4
34858     A7 14 62 FC | 	wrlong	arg02, fp
3485c     04 4E 85 F1 | 	sub	fp, #4
34860     A7 14 02 FB | 	rdlong	arg02, fp
34864     09 14 46 F0 | 	shr	arg02, #9
34868     7F 14 06 F5 | 	and	arg02, #127
3486c     50 FA 05 F6 | 	mov	result1, #80
34870     0A FB 01 F1 | 	add	result1, arg02
34874     20 4E 05 F1 | 	add	fp, #32
34878     A7 FA 61 FC | 	wrlong	result1, fp
3487c     20 4E 85 F1 | 	sub	fp, #32
34880     A7 FA 01 FB | 	rdlong	result1, fp
34884     05 FA 45 F0 | 	shr	result1, #5
34888     FD FA 41 F8 | 	getnib	result1, result1, #0
3488c     01 FA 85 F1 | 	sub	result1, #1
34890     1C 4E 05 F1 | 	add	fp, #28
34894     A7 FA 61 FC | 	wrlong	result1, fp
34898     1C 4E 85 F1 | 	sub	fp, #28
3489c     A7 FA 01 FB | 	rdlong	result1, fp
348a0     1F FA 05 F5 | 	and	result1, #31
348a4     18 4E 05 F1 | 	add	fp, #24
348a8     A7 FA 61 FC | 	wrlong	result1, fp
348ac     14 4E 85 F1 | 	sub	fp, #20
348b0     A7 FA 01 FB | 	rdlong	result1, fp
348b4     0B FA 45 F0 | 	shr	result1, #11
348b8     1F FA 05 F5 | 	and	result1, #31
348bc     10 4E 05 F1 | 	add	fp, #16
348c0     A7 FA 61 FC | 	wrlong	result1, fp
348c4     10 4E 85 F1 | 	sub	fp, #16
348c8     A7 FA 01 FB | 	rdlong	result1, fp
348cc     05 FA 45 F0 | 	shr	result1, #5
348d0     3F FA 05 F5 | 	and	result1, #63
348d4     0C 4E 05 F1 | 	add	fp, #12
348d8     A7 FA 61 FC | 	wrlong	result1, fp
348dc     0C 4E 85 F1 | 	sub	fp, #12
348e0     A7 14 02 FB | 	rdlong	arg02, fp
348e4     1F 14 06 F5 | 	and	arg02, #31
348e8     01 14 66 F0 | 	shl	arg02, #1
348ec     08 4E 05 F1 | 	add	fp, #8
348f0     A7 14 62 FC | 	wrlong	arg02, fp
348f4     A7 12 02 F6 | 	mov	arg01, fp
348f8     10 4E 85 F1 | 	sub	fp, #16
348fc     94 FA BF FD | 	call	#_fatfs_cc_mktime
34900     0C 4E 05 F1 | 	add	fp, #12
34904     A7 FA 61 FC | 	wrlong	result1, fp
34908                 | ' 
34908                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
34908                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
34908                 | '     date.tm_mday = (dosdate & 0x1f);
34908                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
34908                 | '     date.tm_min = (dostime >> 5) & 0x3f;
34908                 | '     date.tm_sec = (dostime & 0x1f) << 1;
34908                 | ' 
34908                 | '     t = mktime(&date);
34908                 | ' #line 60 "/home/pik33/flexprop/include/filesys/fatfs/fatfs.cc"
34908                 | '     return t;
34908     0C 4E 85 F1 | 	sub	fp, #12
3490c     A7 F0 03 F6 | 	mov	ptra, fp
34910     B2 00 A0 FD | 	call	#popregs_
34914                 | _fatfs_cc_unixtime_0999_ret
34914     2D 00 64 FD | 	ret
34918                 | 
34918                 | _fatfs_cc__set_dos_error_1001
34918     09 01 02 F6 | 	mov	_var01, arg01
3491c                 | ' #line 74 "/home/pik33/flexprop/include/filesys/fatfs/fatfs.cc"
3491c                 | '     switch (derr) {
3491c     14 00 26 F3 | 	fle	_var01, #20
34920     30 00 62 FD | 	jmprel	_var01
34924                 | LR__5020
34924     50 00 90 FD | 	jmp	#LR__5021
34928     84 00 90 FD | 	jmp	#LR__5035
3492c     80 00 90 FD | 	jmp	#LR__5036
34930     7C 00 90 FD | 	jmp	#LR__5037
34934     48 00 90 FD | 	jmp	#LR__5022
34938     44 00 90 FD | 	jmp	#LR__5023
3493c     40 00 90 FD | 	jmp	#LR__5024
34940     44 00 90 FD | 	jmp	#LR__5025
34944     48 00 90 FD | 	jmp	#LR__5027
34948     54 00 90 FD | 	jmp	#LR__5030
3494c     38 00 90 FD | 	jmp	#LR__5026
34950     4C 00 90 FD | 	jmp	#LR__5031
34954     48 00 90 FD | 	jmp	#LR__5032
34958     44 00 90 FD | 	jmp	#LR__5033
3495c     50 00 90 FD | 	jmp	#LR__5038
34960     4C 00 90 FD | 	jmp	#LR__5038
34964     48 00 90 FD | 	jmp	#LR__5038
34968     2C 00 90 FD | 	jmp	#LR__5028
3496c     38 00 90 FD | 	jmp	#LR__5034
34970     2C 00 90 FD | 	jmp	#LR__5029
34974     38 00 90 FD | 	jmp	#LR__5038
34978                 | LR__5021
34978     00 02 06 F6 | 	mov	_var02, #0
3497c                 | '         r = 0;
3497c                 | '         break;
3497c     34 00 90 FD | 	jmp	#LR__5039
34980                 | LR__5022
34980                 | LR__5023
34980                 | LR__5024
34980     04 02 06 F6 | 	mov	_var02, #4
34984                 | '         r =  4 ;
34984                 | '         break;
34984     2C 00 90 FD | 	jmp	#LR__5039
34988                 | LR__5025
34988                 | LR__5026
34988     06 02 06 F6 | 	mov	_var02, #6
3498c                 | '         r =  6 ;
3498c                 | '         break;
3498c     24 00 90 FD | 	jmp	#LR__5039
34990                 | LR__5027
34990     09 02 06 F6 | 	mov	_var02, #9
34994                 | '         r =  9 ;
34994                 | '         break;
34994     1C 00 90 FD | 	jmp	#LR__5039
34998                 | LR__5028
34998     07 02 06 F6 | 	mov	_var02, #7
3499c                 | '         r =  7 ;
3499c                 | '         break;
3499c     14 00 90 FD | 	jmp	#LR__5039
349a0                 | LR__5029
349a0                 | LR__5030
349a0                 | LR__5031
349a0                 | LR__5032
349a0                 | LR__5033
349a0     0A 02 06 F6 | 	mov	_var02, #10
349a4                 | '         r =  10 ;
349a4                 | '         break;
349a4     0C 00 90 FD | 	jmp	#LR__5039
349a8                 | LR__5034
349a8     0B 02 06 F6 | 	mov	_var02, #11
349ac                 | '         r =  11 ;
349ac                 | '         break;
349ac     04 00 90 FD | 	jmp	#LR__5039
349b0                 | LR__5035
349b0                 | LR__5036
349b0                 | LR__5037
349b0                 | LR__5038
349b0     0C 02 06 F6 | 	mov	_var02, #12
349b4                 | '         r =  12 ;
349b4                 | '         break;
349b4                 | LR__5039
349b4                 | '     }
349b4                 | '     return _seterror(r);
349b4     00 02 4E F2 | 	cmps	_var02, #0 wz
349b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
349bc     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
349c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
349c4     01 FA 65 56 |  if_ne	neg	result1, #1
349c8     00 FA 05 A6 |  if_e	mov	result1, #0
349cc                 | _fatfs_cc__set_dos_error_1001_ret
349cc     2D 00 64 FD | 	ret
349d0                 | 
349d0                 | _fatfs_cc_v_creat
349d0     04 4A 05 F6 | 	mov	COUNT_, #4
349d4     A8 00 A0 FD | 	call	#pushregs_
349d8     09 27 02 F6 | 	mov	local01, arg01
349dc     0A 29 02 F6 | 	mov	local02, arg02
349e0     03 00 00 FF 
349e4     3C 12 06 F6 | 	mov	arg01, ##1596
349e8                 | '     return _gc_alloc(size);
349e8     10 14 06 F6 | 	mov	arg02, #16
349ec     F8 78 BF FD | 	call	#__system___gc_doalloc
349f0     FD 2A 0A F6 | 	mov	local03, result1 wz
349f4                 | '       return _seterror( 7 );
349f4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
349f8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
349fc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34a00     01 FA 65 A6 |  if_e	neg	result1, #1
34a04     58 00 90 AD |  if_e	jmp	#LR__5041
34a08     15 13 02 F6 | 	mov	arg01, local03
34a0c     00 14 06 F6 | 	mov	arg02, #0
34a10     03 00 00 FF 
34a14     3C 16 06 F6 | 	mov	arg03, ##1596
34a18     98 00 A0 FD | 	call	#\builtin_bytefill_
34a1c     02 00 00 FF 
34a20     14 2A 06 F1 | 	add	local03, ##1044
34a24     15 13 02 F6 | 	mov	arg01, local03
34a28     02 00 00 FF 
34a2c     14 2A 86 F1 | 	sub	local03, ##1044
34a30     14 15 02 F6 | 	mov	arg02, local02
34a34     07 16 06 F6 | 	mov	arg03, #7
34a38     FC CC BF FD | 	call	#_fatfs_cc_f_open
34a3c     FD 2C 0A F6 | 	mov	local04, result1 wz
34a40     14 00 90 AD |  if_e	jmp	#LR__5040
34a44     15 13 02 F6 | 	mov	arg01, local03
34a48                 | '     return _gc_free(ptr);
34a48     A8 79 BF FD | 	call	#__system___gc_free
34a4c                 | '     free(f);
34a4c                 | '     return _set_dos_error(r);
34a4c     16 13 02 F6 | 	mov	arg01, local04
34a50     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1001
34a54     08 00 90 FD | 	jmp	#LR__5041
34a58                 | LR__5040
34a58     13 2B 62 FC | 	wrlong	local03, local01
34a5c                 | '   }
34a5c                 | '   fil->vfsdata = f;
34a5c                 | '   return 0;
34a5c     00 FA 05 F6 | 	mov	result1, #0
34a60                 | LR__5041
34a60     A7 F0 03 F6 | 	mov	ptra, fp
34a64     B2 00 A0 FD | 	call	#popregs_
34a68                 | _fatfs_cc_v_creat_ret
34a68     2D 00 64 FD | 	ret
34a6c                 | 
34a6c                 | _fatfs_cc_v_close
34a6c     02 4A 05 F6 | 	mov	COUNT_, #2
34a70     A8 00 A0 FD | 	call	#pushregs_
34a74     09 27 02 FB | 	rdlong	local01, arg01
34a78     02 00 00 FF 
34a7c     14 26 06 F1 | 	add	local01, ##1044
34a80     13 13 02 F6 | 	mov	arg01, local01
34a84     02 00 00 FF 
34a88     14 26 86 F1 | 	sub	local01, ##1044
34a8c     24 E4 BF FD | 	call	#_fatfs_cc_f_close
34a90     FD 28 02 F6 | 	mov	local02, result1
34a94     13 13 02 F6 | 	mov	arg01, local01
34a98                 | '     return _gc_free(ptr);
34a98     58 79 BF FD | 	call	#__system___gc_free
34a9c                 | '     FAT_FIL *f = fil->vfsdata;
34a9c                 | '     r=f_close(&f->fil);
34a9c                 | '     free(f);
34a9c                 | '     return _set_dos_error(r);
34a9c     14 13 02 F6 | 	mov	arg01, local02
34aa0     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1001
34aa4     A7 F0 03 F6 | 	mov	ptra, fp
34aa8     B2 00 A0 FD | 	call	#popregs_
34aac                 | _fatfs_cc_v_close_ret
34aac     2D 00 64 FD | 	ret
34ab0                 | 
34ab0                 | _fatfs_cc_v_opendir
34ab0     04 4A 05 F6 | 	mov	COUNT_, #4
34ab4     A8 00 A0 FD | 	call	#pushregs_
34ab8     09 27 02 F6 | 	mov	local01, arg01
34abc     0A 29 02 F6 | 	mov	local02, arg02
34ac0     2C 12 06 F6 | 	mov	arg01, #44
34ac4                 | '     return _gc_alloc(size);
34ac4     10 14 06 F6 | 	mov	arg02, #16
34ac8     1C 78 BF FD | 	call	#__system___gc_doalloc
34acc     FD 2A 0A F6 | 	mov	local03, result1 wz
34ad0                 | ' #line 158 "/home/pik33/flexprop/include/filesys/fatfs/fatfs.cc"
34ad0                 | '       return _seterror( 7 );
34ad0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34ad4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
34ad8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34adc     01 FA 65 A6 |  if_e	neg	result1, #1
34ae0     34 00 90 AD |  if_e	jmp	#LR__5051
34ae4     14 15 02 F6 | 	mov	arg02, local02
34ae8     15 13 02 F6 | 	mov	arg01, local03
34aec     10 EB BF FD | 	call	#_fatfs_cc_f_opendir
34af0     FD 2C 0A F6 | 	mov	local04, result1 wz
34af4     14 00 90 AD |  if_e	jmp	#LR__5050
34af8     15 13 02 F6 | 	mov	arg01, local03
34afc                 | '     return _gc_free(ptr);
34afc     F4 78 BF FD | 	call	#__system___gc_free
34b00                 | '         free(f);
34b00                 | '         return _set_dos_error(r);
34b00     16 13 02 F6 | 	mov	arg01, local04
34b04     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1001
34b08     0C 00 90 FD | 	jmp	#LR__5051
34b0c                 | LR__5050
34b0c     04 26 06 F1 | 	add	local01, #4
34b10     13 2B 62 FC | 	wrlong	local03, local01
34b14                 | '     }
34b14                 | '     dir->vfsdata = f;
34b14                 | '     return 0;
34b14     00 FA 05 F6 | 	mov	result1, #0
34b18                 | LR__5051
34b18     A7 F0 03 F6 | 	mov	ptra, fp
34b1c     B2 00 A0 FD | 	call	#popregs_
34b20                 | _fatfs_cc_v_opendir_ret
34b20     2D 00 64 FD | 	ret
34b24                 | 
34b24                 | _fatfs_cc_v_closedir
34b24     02 4A 05 F6 | 	mov	COUNT_, #2
34b28     A8 00 A0 FD | 	call	#pushregs_
34b2c     04 12 06 F1 | 	add	arg01, #4
34b30     09 27 02 FB | 	rdlong	local01, arg01
34b34     13 13 02 F6 | 	mov	arg01, local01
34b38     78 EC BF FD | 	call	#_fatfs_cc_f_closedir
34b3c     FD 28 02 F6 | 	mov	local02, result1
34b40     13 13 02 F6 | 	mov	arg01, local01
34b44                 | '     return _gc_free(ptr);
34b44     AC 78 BF FD | 	call	#__system___gc_free
34b48     00 28 0E F2 | 	cmp	local02, #0 wz
34b4c     14 13 02 56 |  if_ne	mov	arg01, local02
34b50     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1001
34b54                 | '     return r;
34b54     14 FB 01 F6 | 	mov	result1, local02
34b58     A7 F0 03 F6 | 	mov	ptra, fp
34b5c     B2 00 A0 FD | 	call	#popregs_
34b60                 | _fatfs_cc_v_closedir_ret
34b60     2D 00 64 FD | 	ret
34b64                 | 
34b64                 | _fatfs_cc_v_readdir
34b64     01 4A 05 F6 | 	mov	COUNT_, #1
34b68     A8 00 A0 FD | 	call	#pushregs_
34b6c     2C F0 07 F1 | 	add	ptra, #44
34b70     04 4E 05 F1 | 	add	fp, #4
34b74     A7 12 62 FC | 	wrlong	arg01, fp
34b78     04 4E 05 F1 | 	add	fp, #4
34b7c     A7 14 62 FC | 	wrlong	arg02, fp
34b80     04 4E 85 F1 | 	sub	fp, #4
34b84     A7 14 02 FB | 	rdlong	arg02, fp
34b88     04 14 06 F1 | 	add	arg02, #4
34b8c     0A 13 02 FB | 	rdlong	arg01, arg02
34b90     08 4E 05 F1 | 	add	fp, #8
34b94     A7 14 02 F6 | 	mov	arg02, fp
34b98     0C 4E 85 F1 | 	sub	fp, #12
34b9c     70 EC BF FD | 	call	#_fatfs_cc_f_readdir
34ba0     28 4E 05 F1 | 	add	fp, #40
34ba4     A7 FA 61 FC | 	wrlong	result1, fp
34ba8     28 4E 85 F1 | 	sub	fp, #40
34bac     00 FA 0D F2 | 	cmp	result1, #0 wz
34bb0     14 00 90 AD |  if_e	jmp	#LR__5060
34bb4                 | '         return _set_dos_error(r);
34bb4     28 4E 05 F1 | 	add	fp, #40
34bb8     A7 12 02 FB | 	rdlong	arg01, fp
34bbc     28 4E 85 F1 | 	sub	fp, #40
34bc0     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1001
34bc4     B0 00 90 FD | 	jmp	#LR__5063
34bc8                 | LR__5060
34bc8     18 4E 05 F1 | 	add	fp, #24
34bcc     A7 14 CA FA | 	rdbyte	arg02, fp wz
34bd0     18 4E 85 F1 | 	sub	fp, #24
34bd4                 | '         return -1;
34bd4     01 FA 65 A6 |  if_e	neg	result1, #1
34bd8     9C 00 90 AD |  if_e	jmp	#LR__5063
34bdc     08 4E 05 F1 | 	add	fp, #8
34be0     A7 12 02 FB | 	rdlong	arg01, fp
34be4     10 4E 05 F1 | 	add	fp, #16
34be8     A7 14 02 F6 | 	mov	arg02, fp
34bec     18 4E 85 F1 | 	sub	fp, #24
34bf0     D0 34 BF FD | 	call	#__system____builtin_strcpy
34bf4     14 4E 05 F1 | 	add	fp, #20
34bf8     A7 FA C1 FA | 	rdbyte	result1, fp
34bfc     14 4E 85 F1 | 	sub	fp, #20
34c00     10 FA CD F7 | 	test	result1, #16 wz
34c04     18 00 90 AD |  if_e	jmp	#LR__5061
34c08     08 4E 05 F1 | 	add	fp, #8
34c0c     A7 FA 01 FB | 	rdlong	result1, fp
34c10     08 4E 85 F1 | 	sub	fp, #8
34c14     50 FA 05 F1 | 	add	result1, #80
34c18     FD 02 48 FC | 	wrbyte	#1, result1
34c1c     14 00 90 FD | 	jmp	#LR__5062
34c20                 | LR__5061
34c20     08 4E 05 F1 | 	add	fp, #8
34c24     A7 FA 01 FB | 	rdlong	result1, fp
34c28     08 4E 85 F1 | 	sub	fp, #8
34c2c     50 FA 05 F1 | 	add	result1, #80
34c30     FD 00 48 FC | 	wrbyte	#0, result1
34c34                 | LR__5062
34c34     08 4E 05 F1 | 	add	fp, #8
34c38     A7 FA 01 FB | 	rdlong	result1, fp
34c3c     04 4E 05 F1 | 	add	fp, #4
34c40     A7 14 02 FB | 	rdlong	arg02, fp
34c44     48 FA 05 F1 | 	add	result1, #72
34c48     FD 14 62 FC | 	wrlong	arg02, result1
34c4c     04 4E 85 F1 | 	sub	fp, #4
34c50     A7 26 02 FB | 	rdlong	local01, fp
34c54     08 4E 05 F1 | 	add	fp, #8
34c58     A7 12 E2 FA | 	rdword	arg01, fp
34c5c     02 4E 05 F1 | 	add	fp, #2
34c60     A7 14 E2 FA | 	rdword	arg02, fp
34c64     12 4E 85 F1 | 	sub	fp, #18
34c68     D4 FB BF FD | 	call	#_fatfs_cc_unixtime_0999
34c6c     4C 26 06 F1 | 	add	local01, #76
34c70     13 FB 61 FC | 	wrlong	result1, local01
34c74                 | '         ent->d_type =  (0) ;
34c74                 | '     }
34c74                 | '     ent->d_size = finfo.fsize;
34c74                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
34c74                 | '     return 0;
34c74     00 FA 05 F6 | 	mov	result1, #0
34c78                 | LR__5063
34c78     A7 F0 03 F6 | 	mov	ptra, fp
34c7c     B2 00 A0 FD | 	call	#popregs_
34c80                 | _fatfs_cc_v_readdir_ret
34c80     2D 00 64 FD | 	ret
34c84                 | 
34c84                 | _fatfs_cc_v_stat
34c84     03 4A 05 F6 | 	mov	COUNT_, #3
34c88     A8 00 A0 FD | 	call	#pushregs_
34c8c     30 F0 07 F1 | 	add	ptra, #48
34c90     04 4E 05 F1 | 	add	fp, #4
34c94     A7 12 62 FC | 	wrlong	arg01, fp
34c98     04 4E 05 F1 | 	add	fp, #4
34c9c     A7 14 62 FC | 	wrlong	arg02, fp
34ca0     08 4E 85 F1 | 	sub	fp, #8
34ca4     0A 13 02 F6 | 	mov	arg01, arg02
34ca8     00 14 06 F6 | 	mov	arg02, #0
34cac     30 16 06 F6 | 	mov	arg03, #48
34cb0     98 00 A0 FD | 	call	#\builtin_bytefill_
34cb4     04 4E 05 F1 | 	add	fp, #4
34cb8     A7 FA 01 FB | 	rdlong	result1, fp
34cbc     04 4E 85 F1 | 	sub	fp, #4
34cc0     FD FA C9 FA | 	rdbyte	result1, result1 wz
34cc4     2C 00 90 AD |  if_e	jmp	#LR__5070
34cc8     04 4E 05 F1 | 	add	fp, #4
34ccc     A7 FA 01 FB | 	rdlong	result1, fp
34cd0     04 4E 85 F1 | 	sub	fp, #4
34cd4     FD FA C1 FA | 	rdbyte	result1, result1
34cd8     2E FA 0D F2 | 	cmp	result1, #46 wz
34cdc     04 4E 05 A1 |  if_e	add	fp, #4
34ce0     A7 26 02 AB |  if_e	rdlong	local01, fp
34ce4     04 4E 85 A1 |  if_e	sub	fp, #4
34ce8     01 26 06 A1 |  if_e	add	local01, #1
34cec     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
34cf0     18 00 90 5D |  if_ne	jmp	#LR__5071
34cf4                 | LR__5070
34cf4     18 4E 05 F1 | 	add	fp, #24
34cf8     A7 20 48 FC | 	wrbyte	#16, fp
34cfc     0C 4E 85 F1 | 	sub	fp, #12
34d00     A7 00 68 FC | 	wrlong	#0, fp
34d04     0C 4E 85 F1 | 	sub	fp, #12
34d08     24 00 90 FD | 	jmp	#LR__5072
34d0c                 | LR__5071
34d0c     04 4E 05 F1 | 	add	fp, #4
34d10     A7 12 02 FB | 	rdlong	arg01, fp
34d14     0C 4E 05 F1 | 	add	fp, #12
34d18     A7 14 02 F6 | 	mov	arg02, fp
34d1c     10 4E 85 F1 | 	sub	fp, #16
34d20     08 EC BF FD | 	call	#_fatfs_cc_f_stat
34d24     0C 4E 05 F1 | 	add	fp, #12
34d28     A7 FA 61 FC | 	wrlong	result1, fp
34d2c     0C 4E 85 F1 | 	sub	fp, #12
34d30                 | LR__5072
34d30     0C 4E 05 F1 | 	add	fp, #12
34d34     A7 28 0A FB | 	rdlong	local02, fp wz
34d38     0C 4E 85 F1 | 	sub	fp, #12
34d3c     14 00 90 AD |  if_e	jmp	#LR__5073
34d40                 | '         return _set_dos_error(r);
34d40     0C 4E 05 F1 | 	add	fp, #12
34d44     A7 12 02 FB | 	rdlong	arg01, fp
34d48     0C 4E 85 F1 | 	sub	fp, #12
34d4c     C8 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1001
34d50     14 01 90 FD | 	jmp	#LR__5074
34d54                 | LR__5073
34d54     2C 4E 05 F1 | 	add	fp, #44
34d58     A7 48 6A FC | 	wrlong	#292, fp
34d5c     14 4E 85 F1 | 	sub	fp, #20
34d60     A7 2A C2 FA | 	rdbyte	local03, fp
34d64     18 4E 85 F1 | 	sub	fp, #24
34d68     01 2A CE F7 | 	test	local03, #1 wz
34d6c     2C 4E 05 A1 |  if_e	add	fp, #44
34d70     A7 2A 02 AB |  if_e	rdlong	local03, fp
34d74     92 2A 46 A5 |  if_e	or	local03, #146
34d78     A7 2A 62 AC |  if_e	wrlong	local03, fp
34d7c     2C 4E 85 A1 |  if_e	sub	fp, #44
34d80     18 4E 05 F1 | 	add	fp, #24
34d84     A7 2A C2 FA | 	rdbyte	local03, fp
34d88     18 4E 85 F1 | 	sub	fp, #24
34d8c     10 2A CE F7 | 	test	local03, #16 wz
34d90     2C 4E 05 51 |  if_ne	add	fp, #44
34d94     A7 2A 02 5B |  if_ne	rdlong	local03, fp
34d98     08 00 00 5F 
34d9c     49 2A 46 55 |  if_ne	or	local03, ##4169
34da0     A7 2A 62 5C |  if_ne	wrlong	local03, fp
34da4     2C 4E 85 51 |  if_ne	sub	fp, #44
34da8     08 4E 05 F1 | 	add	fp, #8
34dac     A7 2A 02 FB | 	rdlong	local03, fp
34db0     24 4E 05 F1 | 	add	fp, #36
34db4     A7 28 02 FB | 	rdlong	local02, fp
34db8     08 2A 06 F1 | 	add	local03, #8
34dbc     15 29 62 FC | 	wrlong	local02, local03
34dc0     24 4E 85 F1 | 	sub	fp, #36
34dc4     A7 2A 02 FB | 	rdlong	local03, fp
34dc8     0C 2A 06 F1 | 	add	local03, #12
34dcc     15 03 68 FC | 	wrlong	#1, local03
34dd0     A7 2A 02 FB | 	rdlong	local03, fp
34dd4     08 4E 05 F1 | 	add	fp, #8
34dd8     A7 28 02 FB | 	rdlong	local02, fp
34ddc     18 2A 06 F1 | 	add	local03, #24
34de0     15 29 62 FC | 	wrlong	local02, local03
34de4     08 4E 85 F1 | 	sub	fp, #8
34de8     A7 2A 02 FB | 	rdlong	local03, fp
34dec     1C 2A 06 F1 | 	add	local03, #28
34df0     01 00 80 FF 
34df4     15 01 68 FC | 	wrlong	##512, local03
34df8     A7 28 02 FB | 	rdlong	local02, fp
34dfc     14 2B 02 F6 | 	mov	local03, local02
34e00     18 28 06 F1 | 	add	local02, #24
34e04     14 29 02 FB | 	rdlong	local02, local02
34e08     FF 29 06 F1 | 	add	local02, #511
34e0c     14 29 52 F6 | 	abs	local02, local02 wc
34e10     09 28 46 F0 | 	shr	local02, #9
34e14     14 29 82 F6 | 	negc	local02, local02
34e18     20 2A 06 F1 | 	add	local03, #32
34e1c     15 29 62 FC | 	wrlong	local02, local03
34e20     A7 28 02 FB | 	rdlong	local02, fp
34e24     14 2B 02 F6 | 	mov	local03, local02
34e28     14 27 02 F6 | 	mov	local01, local02
34e2c     0C 4E 05 F1 | 	add	fp, #12
34e30     A7 12 E2 FA | 	rdword	arg01, fp
34e34     02 4E 05 F1 | 	add	fp, #2
34e38     A7 14 E2 FA | 	rdword	arg02, fp
34e3c     16 4E 85 F1 | 	sub	fp, #22
34e40     FC F9 BF FD | 	call	#_fatfs_cc_unixtime_0999
34e44     2C 26 06 F1 | 	add	local01, #44
34e48     13 FB 61 FC | 	wrlong	result1, local01
34e4c     28 28 06 F1 | 	add	local02, #40
34e50     14 FB 61 FC | 	wrlong	result1, local02
34e54     24 2A 06 F1 | 	add	local03, #36
34e58     15 FB 61 FC | 	wrlong	result1, local03
34e5c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
34e5c                 | '     }
34e5c                 | '     buf->st_mode = mode;
34e5c                 | '     buf->st_nlink = 1;
34e5c                 | '     buf->st_size = finfo.fsize;
34e5c                 | '     buf->st_blksize = 512;
34e5c                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
34e5c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
34e5c                 | ' #line 249 "/home/pik33/flexprop/include/filesys/fatfs/fatfs.cc"
34e5c                 | '     return r;
34e5c     0C 4E 05 F1 | 	add	fp, #12
34e60     A7 FA 01 FB | 	rdlong	result1, fp
34e64     0C 4E 85 F1 | 	sub	fp, #12
34e68                 | LR__5074
34e68     A7 F0 03 F6 | 	mov	ptra, fp
34e6c     B2 00 A0 FD | 	call	#popregs_
34e70                 | _fatfs_cc_v_stat_ret
34e70     2D 00 64 FD | 	ret
34e74                 | 
34e74                 | _fatfs_cc_v_read
34e74     00 4A 05 F6 | 	mov	COUNT_, #0
34e78     A8 00 A0 FD | 	call	#pushregs_
34e7c     1C F0 07 F1 | 	add	ptra, #28
34e80     04 4E 05 F1 | 	add	fp, #4
34e84     A7 12 62 FC | 	wrlong	arg01, fp
34e88     04 4E 05 F1 | 	add	fp, #4
34e8c     A7 14 62 FC | 	wrlong	arg02, fp
34e90     04 4E 05 F1 | 	add	fp, #4
34e94     A7 16 62 FC | 	wrlong	arg03, fp
34e98     08 4E 85 F1 | 	sub	fp, #8
34e9c     A7 12 02 FB | 	rdlong	arg01, fp
34ea0     09 13 0A FB | 	rdlong	arg01, arg01 wz
34ea4     0C 4E 05 F1 | 	add	fp, #12
34ea8     A7 12 62 FC | 	wrlong	arg01, fp
34eac     10 4E 85 F1 | 	sub	fp, #16
34eb0                 | '         return _seterror( 5 );
34eb0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34eb4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
34eb8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34ebc     01 FA 65 A6 |  if_e	neg	result1, #1
34ec0     B8 00 90 AD |  if_e	jmp	#LR__5082
34ec4     10 4E 05 F1 | 	add	fp, #16
34ec8     A7 12 02 FB | 	rdlong	arg01, fp
34ecc     02 00 00 FF 
34ed0     14 12 06 F1 | 	add	arg01, ##1044
34ed4     08 4E 85 F1 | 	sub	fp, #8
34ed8     A7 14 02 FB | 	rdlong	arg02, fp
34edc     04 4E 05 F1 | 	add	fp, #4
34ee0     A7 16 02 FB | 	rdlong	arg03, fp
34ee4     0C 4E 05 F1 | 	add	fp, #12
34ee8     A7 18 02 F6 | 	mov	arg04, fp
34eec     18 4E 85 F1 | 	sub	fp, #24
34ef0     20 CF BF FD | 	call	#_fatfs_cc_f_read
34ef4     14 4E 05 F1 | 	add	fp, #20
34ef8     A7 FA 61 FC | 	wrlong	result1, fp
34efc     14 4E 85 F1 | 	sub	fp, #20
34f00     00 FA 0D F2 | 	cmp	result1, #0 wz
34f04     34 00 90 AD |  if_e	jmp	#LR__5080
34f08     04 4E 05 F1 | 	add	fp, #4
34f0c     A7 18 02 FB | 	rdlong	arg04, fp
34f10     0C 17 02 F6 | 	mov	arg03, arg04
34f14     08 18 06 F1 | 	add	arg04, #8
34f18     0C 19 02 FB | 	rdlong	arg04, arg04
34f1c     20 18 46 F5 | 	or	arg04, #32
34f20     08 16 06 F1 | 	add	arg03, #8
34f24     0B 19 62 FC | 	wrlong	arg04, arg03
34f28                 | '         fil->state |=  (0x20) ;
34f28                 | '         return _set_dos_error(r);
34f28     10 4E 05 F1 | 	add	fp, #16
34f2c     A7 12 02 FB | 	rdlong	arg01, fp
34f30     14 4E 85 F1 | 	sub	fp, #20
34f34     E0 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
34f38     40 00 90 FD | 	jmp	#LR__5082
34f3c                 | LR__5080
34f3c     18 4E 05 F1 | 	add	fp, #24
34f40     A7 FA 09 FB | 	rdlong	result1, fp wz
34f44     18 4E 85 F1 | 	sub	fp, #24
34f48     24 00 90 5D |  if_ne	jmp	#LR__5081
34f4c     04 4E 05 F1 | 	add	fp, #4
34f50     A7 FA 01 FB | 	rdlong	result1, fp
34f54     FD 18 02 F6 | 	mov	arg04, result1
34f58     04 4E 85 F1 | 	sub	fp, #4
34f5c     08 FA 05 F1 | 	add	result1, #8
34f60     FD FA 01 FB | 	rdlong	result1, result1
34f64     10 FA 45 F5 | 	or	result1, #16
34f68     08 18 06 F1 | 	add	arg04, #8
34f6c     0C FB 61 FC | 	wrlong	result1, arg04
34f70                 | LR__5081
34f70                 | '         fil->state |=  (0x10) ;
34f70                 | '     }
34f70                 | '     return x;
34f70     18 4E 05 F1 | 	add	fp, #24
34f74     A7 FA 01 FB | 	rdlong	result1, fp
34f78     18 4E 85 F1 | 	sub	fp, #24
34f7c                 | LR__5082
34f7c     A7 F0 03 F6 | 	mov	ptra, fp
34f80     B2 00 A0 FD | 	call	#popregs_
34f84                 | _fatfs_cc_v_read_ret
34f84     2D 00 64 FD | 	ret
34f88                 | 
34f88                 | _fatfs_cc_v_write
34f88     00 4A 05 F6 | 	mov	COUNT_, #0
34f8c     A8 00 A0 FD | 	call	#pushregs_
34f90     1C F0 07 F1 | 	add	ptra, #28
34f94     04 4E 05 F1 | 	add	fp, #4
34f98     A7 12 62 FC | 	wrlong	arg01, fp
34f9c     04 4E 05 F1 | 	add	fp, #4
34fa0     A7 14 62 FC | 	wrlong	arg02, fp
34fa4     04 4E 05 F1 | 	add	fp, #4
34fa8     A7 16 62 FC | 	wrlong	arg03, fp
34fac     08 4E 85 F1 | 	sub	fp, #8
34fb0     A7 12 02 FB | 	rdlong	arg01, fp
34fb4     09 13 0A FB | 	rdlong	arg01, arg01 wz
34fb8     0C 4E 05 F1 | 	add	fp, #12
34fbc     A7 12 62 FC | 	wrlong	arg01, fp
34fc0     10 4E 85 F1 | 	sub	fp, #16
34fc4                 | '         return _seterror( 5 );
34fc4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34fc8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
34fcc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34fd0     01 FA 65 A6 |  if_e	neg	result1, #1
34fd4     84 00 90 AD |  if_e	jmp	#LR__5091
34fd8     10 4E 05 F1 | 	add	fp, #16
34fdc     A7 12 02 FB | 	rdlong	arg01, fp
34fe0     02 00 00 FF 
34fe4     14 12 06 F1 | 	add	arg01, ##1044
34fe8     08 4E 85 F1 | 	sub	fp, #8
34fec     A7 14 02 FB | 	rdlong	arg02, fp
34ff0     04 4E 05 F1 | 	add	fp, #4
34ff4     A7 16 02 FB | 	rdlong	arg03, fp
34ff8     0C 4E 05 F1 | 	add	fp, #12
34ffc     A7 18 02 F6 | 	mov	arg04, fp
35000     18 4E 85 F1 | 	sub	fp, #24
35004     A8 D4 BF FD | 	call	#_fatfs_cc_f_write
35008     14 4E 05 F1 | 	add	fp, #20
3500c     A7 FA 61 FC | 	wrlong	result1, fp
35010     14 4E 85 F1 | 	sub	fp, #20
35014     00 FA 0D F2 | 	cmp	result1, #0 wz
35018     34 00 90 AD |  if_e	jmp	#LR__5090
3501c     04 4E 05 F1 | 	add	fp, #4
35020     A7 18 02 FB | 	rdlong	arg04, fp
35024     0C 17 02 F6 | 	mov	arg03, arg04
35028     08 18 06 F1 | 	add	arg04, #8
3502c     0C 19 02 FB | 	rdlong	arg04, arg04
35030     20 18 46 F5 | 	or	arg04, #32
35034     08 16 06 F1 | 	add	arg03, #8
35038     0B 19 62 FC | 	wrlong	arg04, arg03
3503c                 | '         fil->state |=  (0x20) ;
3503c                 | '         return _set_dos_error(r);
3503c     10 4E 05 F1 | 	add	fp, #16
35040     A7 12 02 FB | 	rdlong	arg01, fp
35044     14 4E 85 F1 | 	sub	fp, #20
35048     CC F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
3504c     0C 00 90 FD | 	jmp	#LR__5091
35050                 | LR__5090
35050                 | '     }
35050                 | '     return x;
35050     18 4E 05 F1 | 	add	fp, #24
35054     A7 FA 01 FB | 	rdlong	result1, fp
35058     18 4E 85 F1 | 	sub	fp, #24
3505c                 | LR__5091
3505c     A7 F0 03 F6 | 	mov	ptra, fp
35060     B2 00 A0 FD | 	call	#popregs_
35064                 | _fatfs_cc_v_write_ret
35064     2D 00 64 FD | 	ret
35068                 | 
35068                 | _fatfs_cc_v_lseek
35068     04 4A 05 F6 | 	mov	COUNT_, #4
3506c     A8 00 A0 FD | 	call	#pushregs_
35070     0A 27 02 F6 | 	mov	local01, arg02
35074     0B 29 02 F6 | 	mov	local02, arg03
35078     09 2B 02 FB | 	rdlong	local03, arg01
3507c     02 00 00 FF 
35080     14 2A 0E F1 | 	add	local03, ##1044 wz
35084                 | '         return _seterror( 5 );
35084     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35088     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3508c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35090     01 FA 65 A6 |  if_e	neg	result1, #1
35094     4C 00 90 AD |  if_e	jmp	#LR__5102
35098     00 28 0E F2 | 	cmp	local02, #0 wz
3509c     24 00 90 AD |  if_e	jmp	#LR__5100
350a0     01 28 0E F2 | 	cmp	local02, #1 wz
350a4     14 2A 06 A1 |  if_e	add	local03, #20
350a8     15 2D 02 AB |  if_e	rdlong	local04, local03
350ac     14 2A 86 A1 |  if_e	sub	local03, #20
350b0     16 27 02 A1 |  if_e	add	local01, local04
350b4     0C 2A 06 51 |  if_ne	add	local03, #12
350b8     15 2D 02 5B |  if_ne	rdlong	local04, local03
350bc     0C 2A 86 51 |  if_ne	sub	local03, #12
350c0     16 27 02 51 |  if_ne	add	local01, local04
350c4                 | LR__5100
350c4     13 15 02 F6 | 	mov	arg02, local01
350c8     15 13 02 F6 | 	mov	arg01, local03
350cc     64 DE BF FD | 	call	#_fatfs_cc_f_lseek
350d0     FD 12 0A F6 | 	mov	arg01, result1 wz
350d4     08 00 90 AD |  if_e	jmp	#LR__5101
350d8                 | '         return _set_dos_error(result);
350d8     3C F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
350dc     04 00 90 FD | 	jmp	#LR__5102
350e0                 | LR__5101
350e0                 | '     }
350e0                 | '     return offset;
350e0     13 FB 01 F6 | 	mov	result1, local01
350e4                 | LR__5102
350e4     A7 F0 03 F6 | 	mov	ptra, fp
350e8     B2 00 A0 FD | 	call	#popregs_
350ec                 | _fatfs_cc_v_lseek_ret
350ec     2D 00 64 FD | 	ret
350f0                 | 
350f0                 | _fatfs_cc_v_ioctl
350f0                 | ' {
350f0                 | '     return _seterror( 10 );
350f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
350f4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
350f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
350fc     01 FA 65 F6 | 	neg	result1, #1
35100                 | _fatfs_cc_v_ioctl_ret
35100     2D 00 64 FD | 	ret
35104                 | 
35104                 | _fatfs_cc_v_mkdir
35104     44 EB BF FD | 	call	#_fatfs_cc_f_mkdir
35108     FD 12 02 F6 | 	mov	arg01, result1
3510c                 | ' 
3510c                 | '     r = f_mkdir(name);
3510c                 | '     return _set_dos_error(r);
3510c     08 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
35110                 | _fatfs_cc_v_mkdir_ret
35110     2D 00 64 FD | 	ret
35114                 | 
35114                 | _fatfs_cc_v_remove
35114     EC E8 BF FD | 	call	#_fatfs_cc_f_unlink
35118     FD 12 02 F6 | 	mov	arg01, result1
3511c                 | ' 
3511c                 | '     r = f_unlink(name);
3511c                 | '     return _set_dos_error(r);
3511c     F8 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
35120                 | _fatfs_cc_v_remove_ret
35120     2D 00 64 FD | 	ret
35124                 | 
35124                 | _fatfs_cc_v_rmdir
35124     DC E8 BF FD | 	call	#_fatfs_cc_f_unlink
35128     FD 12 02 F6 | 	mov	arg01, result1
3512c                 | ' 
3512c                 | '     r = f_unlink(name);
3512c                 | '     return _set_dos_error(r);
3512c     E8 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
35130                 | _fatfs_cc_v_rmdir_ret
35130     2D 00 64 FD | 	ret
35134                 | 
35134                 | _fatfs_cc_v_rename
35134     30 EE BF FD | 	call	#_fatfs_cc_f_rename
35138     FD 12 02 F6 | 	mov	arg01, result1
3513c                 | '     return _set_dos_error(r);
3513c     D8 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
35140                 | _fatfs_cc_v_rename_ret
35140     2D 00 64 FD | 	ret
35144                 | 
35144                 | _fatfs_cc_v_open
35144     07 4A 05 F6 | 	mov	COUNT_, #7
35148     A8 00 A0 FD | 	call	#pushregs_
3514c     09 27 02 F6 | 	mov	local01, arg01
35150     0A 29 02 F6 | 	mov	local02, arg02
35154     0B 2B 02 F6 | 	mov	local03, arg03
35158     03 00 00 FF 
3515c     3C 12 06 F6 | 	mov	arg01, ##1596
35160                 | '     return _gc_alloc(size);
35160     10 14 06 F6 | 	mov	arg02, #16
35164     80 71 BF FD | 	call	#__system___gc_doalloc
35168     FD 2C 0A F6 | 	mov	local04, result1 wz
3516c                 | '       return _seterror( 7 );
3516c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35170     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35174     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35178     01 FA 65 A6 |  if_e	neg	result1, #1
3517c     98 00 90 AD |  if_e	jmp	#LR__5116
35180     16 13 02 F6 | 	mov	arg01, local04
35184     00 14 06 F6 | 	mov	arg02, #0
35188     03 00 00 FF 
3518c     3C 16 06 F6 | 	mov	arg03, ##1596
35190     98 00 A0 FD | 	call	#\builtin_bytefill_
35194                 | '   switch (flags & 3) {
35194     15 2F 02 F6 | 	mov	local05, local03
35198     03 2E 0E F5 | 	and	local05, #3 wz
3519c     0C 00 90 AD |  if_e	jmp	#LR__5110
351a0     01 2E 0E F2 | 	cmp	local05, #1 wz
351a4     0C 00 90 AD |  if_e	jmp	#LR__5111
351a8     10 00 90 FD | 	jmp	#LR__5112
351ac                 | LR__5110
351ac     01 30 06 F6 | 	mov	local06, #1
351b0                 | '       fs_flags =  0x01 ;
351b0                 | '       break;
351b0     0C 00 90 FD | 	jmp	#LR__5113
351b4                 | LR__5111
351b4     02 30 06 F6 | 	mov	local06, #2
351b8                 | '       fs_flags =  0x02 ;
351b8                 | '       break;
351b8     04 00 90 FD | 	jmp	#LR__5113
351bc                 | LR__5112
351bc     03 30 06 F6 | 	mov	local06, #3
351c0                 | '       fs_flags =  0x01  |  0x02 ;
351c0                 | '       break;
351c0                 | LR__5113
351c0     08 2A CE F7 | 	test	local03, #8 wz
351c4     18 30 46 55 |  if_ne	or	local06, #24
351c8     08 00 90 5D |  if_ne	jmp	#LR__5114
351cc     20 2A CE F7 | 	test	local03, #32 wz
351d0     30 30 46 55 |  if_ne	or	local06, #48
351d4                 | LR__5114
351d4     02 00 00 FF 
351d8     14 2C 06 F1 | 	add	local04, ##1044
351dc     16 13 02 F6 | 	mov	arg01, local04
351e0     02 00 00 FF 
351e4     14 2C 86 F1 | 	sub	local04, ##1044
351e8     14 15 02 F6 | 	mov	arg02, local02
351ec     18 17 02 F6 | 	mov	arg03, local06
351f0     44 C5 BF FD | 	call	#_fatfs_cc_f_open
351f4     FD 32 0A F6 | 	mov	local07, result1 wz
351f8     14 00 90 AD |  if_e	jmp	#LR__5115
351fc     16 13 02 F6 | 	mov	arg01, local04
35200                 | '     return _gc_free(ptr);
35200     F0 71 BF FD | 	call	#__system___gc_free
35204                 | '     free(f);
35204                 | ' #line 417 "/home/pik33/flexprop/include/filesys/fatfs/fatfs.cc"
35204                 | '     return _set_dos_error(r);
35204     19 13 02 F6 | 	mov	arg01, local07
35208     0C F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
3520c     08 00 90 FD | 	jmp	#LR__5116
35210                 | LR__5115
35210     13 2D 62 FC | 	wrlong	local04, local01
35214                 | '   }
35214                 | '   fil->vfsdata = f;
35214                 | '   return 0;
35214     00 FA 05 F6 | 	mov	result1, #0
35218                 | LR__5116
35218     A7 F0 03 F6 | 	mov	ptra, fp
3521c     B2 00 A0 FD | 	call	#popregs_
35220                 | _fatfs_cc_v_open_ret
35220     2D 00 64 FD | 	ret
35224                 | 
35224                 | _fatfs_cc_v_flush
35224     09 13 02 FB | 	rdlong	arg01, arg01
35228     02 00 00 FF 
3522c     14 12 0E F1 | 	add	arg01, ##1044 wz
35230                 | '         return _seterror( 5 );
35230     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35234     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35238     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3523c     01 FA 65 A6 |  if_e	neg	result1, #1
35240     0C 00 90 AD |  if_e	jmp	#LR__5120
35244     5C DA BF FD | 	call	#_fatfs_cc_f_sync
35248     FD 12 02 F6 | 	mov	arg01, result1
3524c                 | '     }
3524c                 | ' #line 437 "/home/pik33/flexprop/include/filesys/fatfs/fatfs.cc"
3524c                 | '     result = f_sync(f);
3524c                 | ' #line 441 "/home/pik33/flexprop/include/filesys/fatfs/fatfs.cc"
3524c                 | '     return _set_dos_error(result);
3524c     C8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1001
35250                 | LR__5120
35250                 | _fatfs_cc_v_flush_ret
35250     2D 00 64 FD | 	ret
35254                 | 
35254                 | _fatfs_cc_v_init
35254                 | ' {
35254                 | '     return 0;
35254     00 FA 05 F6 | 	mov	result1, #0
35258                 | _fatfs_cc_v_init_ret
35258     2D 00 64 FD | 	ret
3525c                 | 
3525c                 | _fatfs_cc_v_deinit
3525c     B0 01 00 FF 
35260     23 15 06 F6 | 	mov	arg02, ##@LR__5315
35264     00 12 06 F6 | 	mov	arg01, #0
35268     00 16 06 F6 | 	mov	arg03, #0
3526c     A4 C3 BF FD | 	call	#_fatfs_cc_f_mount
35270     08 E4 05 F1 | 	add	objptr, #8
35274     F2 12 02 FB | 	rdlong	arg01, objptr
35278     04 E4 05 F1 | 	add	objptr, #4
3527c     F2 14 02 FB | 	rdlong	arg02, objptr
35280     0C E4 85 F1 | 	sub	objptr, #12
35284     D8 58 BF FD | 	call	#__system___freepins
35288                 | ' #line 462 "/home/pik33/flexprop/include/filesys/fatfs/fatfs.cc"
35288                 | '     _freepins(f_pinmask);
35288                 | '     return 0;
35288     00 FA 05 F6 | 	mov	result1, #0
3528c                 | _fatfs_cc_v_deinit_ret
3528c     2D 00 64 FD | 	ret
35290                 | 
35290                 | _fatfs_cc_get_vfs
35290     01 4A 05 F6 | 	mov	COUNT_, #1
35294     A8 00 A0 FD | 	call	#pushregs_
35298     09 27 02 F6 | 	mov	local01, arg01
3529c     50 12 06 F6 | 	mov	arg01, #80
352a0     14 70 BF FD | 	call	#__system___gc_alloc_managed
352a4     FD 12 02 F6 | 	mov	arg01, result1
352a8     F2 FA 01 F6 | 	mov	result1, objptr
352ac     00 C0 05 FF 
352b0     00 FA 45 F5 | 	or	result1, ##192937984
352b4     09 FB 61 FC | 	wrlong	result1, arg01
352b8     F2 FA 01 F6 | 	mov	result1, objptr
352bc     00 C8 05 FF 
352c0     00 FA 45 F5 | 	or	result1, ##193986560
352c4     04 12 06 F1 | 	add	arg01, #4
352c8     09 FB 61 FC | 	wrlong	result1, arg01
352cc     F2 FA 01 F6 | 	mov	result1, objptr
352d0     00 D0 05 FF 
352d4     00 FA 45 F5 | 	or	result1, ##195035136
352d8     04 12 06 F1 | 	add	arg01, #4
352dc     09 FB 61 FC | 	wrlong	result1, arg01
352e0     F2 FA 01 F6 | 	mov	result1, objptr
352e4     00 D8 05 FF 
352e8     00 FA 45 F5 | 	or	result1, ##196083712
352ec     04 12 06 F1 | 	add	arg01, #4
352f0     09 FB 61 FC | 	wrlong	result1, arg01
352f4     F2 FA 01 F6 | 	mov	result1, objptr
352f8     00 E0 05 FF 
352fc     00 FA 45 F5 | 	or	result1, ##197132288
35300     04 12 06 F1 | 	add	arg01, #4
35304     09 FB 61 FC | 	wrlong	result1, arg01
35308     04 12 06 F1 | 	add	arg01, #4
3530c     09 01 68 FC | 	wrlong	#0, arg01
35310     04 12 06 F1 | 	add	arg01, #4
35314     09 27 62 FC | 	wrlong	local01, arg01
35318     04 12 06 F1 | 	add	arg01, #4
3531c     09 01 68 FC | 	wrlong	#0, arg01
35320     F2 FA 01 F6 | 	mov	result1, objptr
35324     00 E8 05 FF 
35328     00 FA 45 F5 | 	or	result1, ##198180864
3532c     04 12 06 F1 | 	add	arg01, #4
35330     09 FB 61 FC | 	wrlong	result1, arg01
35334     F2 FA 01 F6 | 	mov	result1, objptr
35338     00 F0 05 FF 
3533c     00 FA 45 F5 | 	or	result1, ##199229440
35340     04 12 06 F1 | 	add	arg01, #4
35344     09 FB 61 FC | 	wrlong	result1, arg01
35348     F2 FA 01 F6 | 	mov	result1, objptr
3534c     00 F8 05 FF 
35350     00 FA 45 F5 | 	or	result1, ##200278016
35354     04 12 06 F1 | 	add	arg01, #4
35358     09 FB 61 FC | 	wrlong	result1, arg01
3535c     F2 FA 01 F6 | 	mov	result1, objptr
35360     3A FA 25 F4 | 	bith	result1, #58
35364     04 12 06 F1 | 	add	arg01, #4
35368     09 FB 61 FC | 	wrlong	result1, arg01
3536c     F2 FA 01 F6 | 	mov	result1, objptr
35370     00 08 06 FF 
35374     00 FA 45 F5 | 	or	result1, ##202375168
35378     04 12 06 F1 | 	add	arg01, #4
3537c     09 FB 61 FC | 	wrlong	result1, arg01
35380     F2 FA 01 F6 | 	mov	result1, objptr
35384     00 10 06 FF 
35388     00 FA 45 F5 | 	or	result1, ##203423744
3538c     04 12 06 F1 | 	add	arg01, #4
35390     09 FB 61 FC | 	wrlong	result1, arg01
35394     F2 FA 01 F6 | 	mov	result1, objptr
35398     00 18 06 FF 
3539c     00 FA 45 F5 | 	or	result1, ##204472320
353a0     04 12 06 F1 | 	add	arg01, #4
353a4     09 FB 61 FC | 	wrlong	result1, arg01
353a8     F2 FA 01 F6 | 	mov	result1, objptr
353ac     00 20 06 FF 
353b0     00 FA 45 F5 | 	or	result1, ##205520896
353b4     04 12 06 F1 | 	add	arg01, #4
353b8     09 FB 61 FC | 	wrlong	result1, arg01
353bc     F2 FA 01 F6 | 	mov	result1, objptr
353c0     00 28 06 FF 
353c4     00 FA 45 F5 | 	or	result1, ##206569472
353c8     04 12 06 F1 | 	add	arg01, #4
353cc     09 FB 61 FC | 	wrlong	result1, arg01
353d0     F2 FA 01 F6 | 	mov	result1, objptr
353d4     00 30 06 FF 
353d8     00 FA 45 F5 | 	or	result1, ##207618048
353dc     04 12 06 F1 | 	add	arg01, #4
353e0     09 FB 61 FC | 	wrlong	result1, arg01
353e4     F2 FA 01 F6 | 	mov	result1, objptr
353e8     00 38 06 FF 
353ec     00 FA 45 F5 | 	or	result1, ##208666624
353f0     04 12 06 F1 | 	add	arg01, #4
353f4     09 FB 61 FC | 	wrlong	result1, arg01
353f8     F2 FA 01 F6 | 	mov	result1, objptr
353fc     00 40 06 FF 
35400     00 FA 45 F5 | 	or	result1, ##209715200
35404     04 12 06 F1 | 	add	arg01, #4
35408     09 FB 61 FC | 	wrlong	result1, arg01
3540c     4C 12 86 F1 | 	sub	arg01, #76
35410                 | ' 
35410                 | '     v->close = &v_close;
35410                 | '     v->read = &v_read;
35410                 | '     v->write = &v_write;
35410                 | '     v->lseek = &v_lseek;
35410                 | '     v->ioctl = &v_ioctl;
35410                 | '     v->flush = 0;
35410                 | '     v->vfs_data = ptr;
35410                 | '     v->reserved = 0;
35410                 | ' 
35410                 | '     v->open = &v_open;
35410                 | '     v->creat = &v_creat;
35410                 | '     v->opendir = &v_opendir;
35410                 | '     v->closedir = &v_closedir;
35410                 | '     v->readdir = &v_readdir;
35410                 | '     v->stat = &v_stat;
35410                 | ' 
35410                 | '     v->mkdir = &v_mkdir;
35410                 | '     v->rmdir = &v_rmdir;
35410                 | ' 
35410                 | '     v->remove = &v_remove;
35410                 | '     v->rename = &v_rename;
35410                 | ' 
35410                 | '     v->init = &v_init;
35410                 | '     v->deinit = &v_deinit;
35410                 | ' 
35410                 | '     return v;
35410     09 FB 01 F6 | 	mov	result1, arg01
35414     A7 F0 03 F6 | 	mov	ptra, fp
35418     B2 00 A0 FD | 	call	#popregs_
3541c                 | _fatfs_cc_get_vfs_ret
3541c     2D 00 64 FD | 	ret
35420                 | 
35420                 | _fatfs_cc_xmit_mmc_1138
35420     10 E4 05 F1 | 	add	objptr, #16
35424     F2 00 02 FB | 	rdlong	_var01, objptr
35428     08 E4 05 F1 | 	add	objptr, #8
3542c     F2 02 02 FB | 	rdlong	_var02, objptr
35430     18 E4 85 F1 | 	sub	objptr, #24
35434     40 02 62 FD | 	dirl	_var02
35438     28 02 64 FD | 	setq	#1
3543c     09 05 02 FB | 	rdlong	_var03, arg01
35440     69 04 62 FD | 	rev	_var03
35444     1B 04 FE F9 | 	movbyts	_var03, #27
35448     01 05 22 FC | 	wypin	_var03, _var02
3544c     0A 05 02 F6 | 	mov	_var03, arg02
35450     02 14 4E F0 | 	shr	arg02, #2 wz
35454     03 04 66 F0 | 	shl	_var03, #3
35458     00 05 22 FC | 	wypin	_var03, _var01
3545c     41 02 62 FD | 	dirh	_var02
35460     08 12 06 F1 | 	add	arg01, #8
35464     69 06 62 FD | 	rev	_var04
35468     1B 06 FE F9 | 	movbyts	_var04, #27
3546c                 | LR__5130
3546c     01 07 22 5C |  if_ne	wypin	_var04, _var02
35470     09 07 02 5B |  if_ne	rdlong	_var04, arg01
35474     04 12 06 51 |  if_ne	add	arg01, #4
35478     69 06 62 5D |  if_ne	rev	_var04
3547c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
35480                 | LR__5131
35480     40 02 72 5D |  if_ne	testp	_var02 wc
35484     F8 FF 9F 1D |  if_a	jmp	#LR__5131
35488     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5130
3548c                 | LR__5132
3548c     40 00 72 FD | 	testp	_var01 wc
35490     F8 FF 9F 3D |  if_ae	jmp	#LR__5132
35494     40 02 62 FD | 	dirl	_var02
35498     FF FF FF FF 
3549c     01 FF 2B FC | 	wypin	##-1, _var02
354a0     41 02 62 FD | 	dirh	_var02
354a4                 | _fatfs_cc_xmit_mmc_1138_ret
354a4     2D 00 64 FD | 	ret
354a8                 | 
354a8                 | _fatfs_cc_rcvr_mmc_1145
354a8     10 E4 05 F1 | 	add	objptr, #16
354ac     F2 00 02 FB | 	rdlong	_var01, objptr
354b0     0C E4 05 F1 | 	add	objptr, #12
354b4     F2 02 02 FB | 	rdlong	_var02, objptr
354b8     1C E4 85 F1 | 	sub	objptr, #28
354bc     01 03 08 FC | 	akpin	_var02
354c0     0A 05 0A F6 | 	mov	_var03, arg02 wz
354c4     02 04 4E F0 | 	shr	_var03, #2 wz
354c8     30 00 90 AD |  if_e	jmp	#LR__5142
354cc     02 07 02 F6 | 	mov	_var04, _var03
354d0     05 06 66 F0 | 	shl	_var04, #5
354d4     00 07 22 FC | 	wypin	_var04, _var01
354d8     01 7F 18 FC | 	wxpin	#63, _var02
354dc                 | LR__5140
354dc                 | LR__5141
354dc     40 02 72 FD | 	testp	_var02 wc
354e0     F8 FF 9F 3D |  if_ae	jmp	#LR__5141
354e4     01 07 8A FA | 	rdpin	_var04, _var02
354e8     69 06 62 FD | 	rev	_var04
354ec     1B 06 FE F9 | 	movbyts	_var04, #27
354f0     09 07 62 FC | 	wrlong	_var04, arg01
354f4     04 12 06 F1 | 	add	arg01, #4
354f8     F8 05 6E FB | 	djnz	_var03, #LR__5140
354fc                 | LR__5142
354fc     03 14 0E F5 | 	and	arg02, #3 wz
35500     24 00 90 AD |  if_e	jmp	#LR__5145
35504     01 4F 18 FC | 	wxpin	#39, _var02
35508                 | LR__5143
35508     00 11 28 FC | 	wypin	#8, _var01
3550c                 | LR__5144
3550c     40 02 72 FD | 	testp	_var02 wc
35510     F8 FF 9F 3D |  if_ae	jmp	#LR__5144
35514     01 07 8A FA | 	rdpin	_var04, _var02
35518     69 06 62 FD | 	rev	_var04
3551c     09 07 42 FC | 	wrbyte	_var04, arg01
35520     01 12 06 F1 | 	add	arg01, #1
35524     F8 15 6E FB | 	djnz	arg02, #LR__5143
35528                 | LR__5145
35528                 | _fatfs_cc_rcvr_mmc_1145_ret
35528     2D 00 64 FD | 	ret
3552c                 | 
3552c                 | _fatfs_cc_wait_ready_1149
3552c     01 4A 05 F6 | 	mov	COUNT_, #1
35530     A8 00 A0 FD | 	call	#pushregs_
35534     10 F0 07 F1 | 	add	ptra, #16
35538     1A FA 61 FD | 	getct	result1
3553c     08 4E 05 F1 | 	add	fp, #8
35540     A7 FA 61 FC | 	wrlong	result1, fp
35544     14 26 06 FB | 	rdlong	local01, #20
35548     01 26 46 F0 | 	shr	local01, #1
3554c     04 4E 05 F1 | 	add	fp, #4
35550     A7 26 62 FC | 	wrlong	local01, fp
35554     0C 4E 85 F1 | 	sub	fp, #12
35558                 | ' {
35558                 | ' 	BYTE d;
35558                 | ' 	UINT tmr, tmout;
35558                 | ' 
35558                 | ' 	tmr = _cnt();
35558                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
35558                 | ' 	for(;;) {
35558                 | LR__5150
35558     04 4E 05 F1 | 	add	fp, #4
3555c     A7 12 02 F6 | 	mov	arg01, fp
35560     04 4E 85 F1 | 	sub	fp, #4
35564     01 14 06 F6 | 	mov	arg02, #1
35568     3C FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1145
3556c     04 4E 05 F1 | 	add	fp, #4
35570     A7 26 C2 FA | 	rdbyte	local01, fp
35574     04 4E 85 F1 | 	sub	fp, #4
35578     FF 26 0E F2 | 	cmp	local01, #255 wz
3557c     01 FA 05 A6 |  if_e	mov	result1, #1
35580     28 00 90 AD |  if_e	jmp	#LR__5151
35584     1A FA 61 FD | 	getct	result1
35588     08 4E 05 F1 | 	add	fp, #8
3558c     A7 26 02 FB | 	rdlong	local01, fp
35590     13 FB 81 F1 | 	sub	result1, local01
35594     04 4E 05 F1 | 	add	fp, #4
35598     A7 26 02 FB | 	rdlong	local01, fp
3559c     0C 4E 85 F1 | 	sub	fp, #12
355a0     13 FB 11 F2 | 	cmp	result1, local01 wc
355a4     00 FA 05 36 |  if_ae	mov	result1, #0
355a8     AC FF 9F CD |  if_b	jmp	#LR__5150
355ac                 | LR__5151
355ac     A7 F0 03 F6 | 	mov	ptra, fp
355b0     B2 00 A0 FD | 	call	#popregs_
355b4                 | _fatfs_cc_wait_ready_1149_ret
355b4     2D 00 64 FD | 	ret
355b8                 | 
355b8                 | _fatfs_cc_deselect_1155
355b8     00 4A 05 F6 | 	mov	COUNT_, #0
355bc     A8 00 A0 FD | 	call	#pushregs_
355c0     14 F0 07 F1 | 	add	ptra, #20
355c4     14 E4 05 F1 | 	add	objptr, #20
355c8     F2 14 02 FB | 	rdlong	arg02, objptr
355cc     04 4E 05 F1 | 	add	fp, #4
355d0     A7 14 62 FC | 	wrlong	arg02, fp
355d4     04 E4 85 F1 | 	sub	objptr, #4
355d8     F2 14 02 FB | 	rdlong	arg02, objptr
355dc     04 4E 05 F1 | 	add	fp, #4
355e0     A7 14 62 FC | 	wrlong	arg02, fp
355e4     08 E4 05 F1 | 	add	objptr, #8
355e8     F2 14 02 FB | 	rdlong	arg02, objptr
355ec     04 4E 05 F1 | 	add	fp, #4
355f0     A7 14 62 FC | 	wrlong	arg02, fp
355f4     04 E4 05 F1 | 	add	objptr, #4
355f8     F2 14 02 FB | 	rdlong	arg02, objptr
355fc     1C E4 85 F1 | 	sub	objptr, #28
35600     04 4E 05 F1 | 	add	fp, #4
35604     A7 14 62 FC | 	wrlong	arg02, fp
35608     0C 4E 85 F1 | 	sub	fp, #12
3560c     A7 12 02 FB | 	rdlong	arg01, fp
35610     04 4E 85 F1 | 	sub	fp, #4
35614     59 12 62 FD | 	drvh	arg01
35618     1F 20 64 FD | 	waitx	#16
3561c     A7 12 02 F6 | 	mov	arg01, fp
35620     01 14 06 F6 | 	mov	arg02, #1
35624     80 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1145
35628     A7 F0 03 F6 | 	mov	ptra, fp
3562c     B2 00 A0 FD | 	call	#popregs_
35630                 | _fatfs_cc_deselect_1155_ret
35630     2D 00 64 FD | 	ret
35634                 | 
35634                 | _fatfs_cc_select_1159
35634     00 4A 05 F6 | 	mov	COUNT_, #0
35638     A8 00 A0 FD | 	call	#pushregs_
3563c     10 F0 07 F1 | 	add	ptra, #16
35640     14 E4 05 F1 | 	add	objptr, #20
35644     F2 14 02 FB | 	rdlong	arg02, objptr
35648     08 4E 05 F1 | 	add	fp, #8
3564c     A7 14 62 FC | 	wrlong	arg02, fp
35650     08 E4 05 F1 | 	add	objptr, #8
35654     F2 12 02 FB | 	rdlong	arg01, objptr
35658     1C E4 85 F1 | 	sub	objptr, #28
3565c     04 4E 05 F1 | 	add	fp, #4
35660     A7 12 62 FC | 	wrlong	arg01, fp
35664     50 12 62 FD | 	fltl	arg01
35668     04 4E 85 F1 | 	sub	fp, #4
3566c     A7 12 02 FB | 	rdlong	arg01, fp
35670     58 12 62 FD | 	drvl	arg01
35674     1F 20 64 FD | 	waitx	#16
35678     04 4E 05 F1 | 	add	fp, #4
3567c     A7 12 02 FB | 	rdlong	arg01, fp
35680     41 12 62 FD | 	dirh	arg01
35684     08 4E 85 F1 | 	sub	fp, #8
35688     A7 12 02 F6 | 	mov	arg01, fp
3568c     04 4E 85 F1 | 	sub	fp, #4
35690     01 14 06 F6 | 	mov	arg02, #1
35694     10 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1145
35698     90 FE BF FD | 	call	#_fatfs_cc_wait_ready_1149
3569c     00 FA 0D F2 | 	cmp	result1, #0 wz
356a0     01 FA 05 56 |  if_ne	mov	result1, #1
356a4     08 00 90 5D |  if_ne	jmp	#LR__5160
356a8     0C FF BF FD | 	call	#_fatfs_cc_deselect_1155
356ac                 | ' 
356ac                 | ' 	deselect();
356ac                 | ' 	return 0;
356ac     00 FA 05 F6 | 	mov	result1, #0
356b0                 | LR__5160
356b0     A7 F0 03 F6 | 	mov	ptra, fp
356b4     B2 00 A0 FD | 	call	#popregs_
356b8                 | _fatfs_cc_select_1159_ret
356b8     2D 00 64 FD | 	ret
356bc                 | 
356bc                 | _fatfs_cc_rcvr_datablock_1163
356bc     01 4A 05 F6 | 	mov	COUNT_, #1
356c0     A8 00 A0 FD | 	call	#pushregs_
356c4     18 F0 07 F1 | 	add	ptra, #24
356c8     04 4E 05 F1 | 	add	fp, #4
356cc     A7 12 62 FC | 	wrlong	arg01, fp
356d0     04 4E 05 F1 | 	add	fp, #4
356d4     A7 14 62 FC | 	wrlong	arg02, fp
356d8     1A FA 61 FD | 	getct	result1
356dc     08 4E 05 F1 | 	add	fp, #8
356e0     A7 FA 61 FC | 	wrlong	result1, fp
356e4     14 26 06 FB | 	rdlong	local01, #20
356e8     03 26 46 F0 | 	shr	local01, #3
356ec     04 4E 05 F1 | 	add	fp, #4
356f0     A7 26 62 FC | 	wrlong	local01, fp
356f4     14 4E 85 F1 | 	sub	fp, #20
356f8                 | ' 	BYTE *buff,
356f8                 | ' 	UINT btr
356f8                 | ' )
356f8                 | ' {
356f8                 | ' 	BYTE d[2];
356f8                 | ' 	UINT tmr, tmout;
356f8                 | ' 
356f8                 | ' 	tmr = _cnt();
356f8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
356f8                 | ' 	for(;;) {
356f8                 | LR__5170
356f8     0C 4E 05 F1 | 	add	fp, #12
356fc     A7 12 02 F6 | 	mov	arg01, fp
35700     0C 4E 85 F1 | 	sub	fp, #12
35704     01 14 06 F6 | 	mov	arg02, #1
35708     9C FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1145
3570c     0C 4E 05 F1 | 	add	fp, #12
35710     A7 26 C2 FA | 	rdbyte	local01, fp
35714     0C 4E 85 F1 | 	sub	fp, #12
35718     FF 26 0E F2 | 	cmp	local01, #255 wz
3571c     28 00 90 5D |  if_ne	jmp	#LR__5171
35720     1A FA 61 FD | 	getct	result1
35724     FD 26 02 F6 | 	mov	local01, result1
35728     10 4E 05 F1 | 	add	fp, #16
3572c     A7 14 02 FB | 	rdlong	arg02, fp
35730     0A 27 82 F1 | 	sub	local01, arg02
35734     04 4E 05 F1 | 	add	fp, #4
35738     A7 14 02 FB | 	rdlong	arg02, fp
3573c     14 4E 85 F1 | 	sub	fp, #20
35740     0A 27 12 F2 | 	cmp	local01, arg02 wc
35744     B0 FF 9F CD |  if_b	jmp	#LR__5170
35748                 | LR__5171
35748     0C 4E 05 F1 | 	add	fp, #12
3574c     A7 26 C2 FA | 	rdbyte	local01, fp
35750     0C 4E 85 F1 | 	sub	fp, #12
35754     FE 26 0E F2 | 	cmp	local01, #254 wz
35758     00 FA 05 56 |  if_ne	mov	result1, #0
3575c     30 00 90 5D |  if_ne	jmp	#LR__5172
35760     04 4E 05 F1 | 	add	fp, #4
35764     A7 12 02 FB | 	rdlong	arg01, fp
35768     04 4E 05 F1 | 	add	fp, #4
3576c     A7 14 02 FB | 	rdlong	arg02, fp
35770     08 4E 85 F1 | 	sub	fp, #8
35774     30 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1145
35778     0C 4E 05 F1 | 	add	fp, #12
3577c     A7 12 02 F6 | 	mov	arg01, fp
35780     0C 4E 85 F1 | 	sub	fp, #12
35784     02 14 06 F6 | 	mov	arg02, #2
35788     1C FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1145
3578c                 | ' 
3578c                 | ' 	rcvr_mmc(buff, btr);
3578c                 | ' 	rcvr_mmc(d, 2);
3578c                 | ' 
3578c                 | ' 	return 1;
3578c     01 FA 05 F6 | 	mov	result1, #1
35790                 | LR__5172
35790     A7 F0 03 F6 | 	mov	ptra, fp
35794     B2 00 A0 FD | 	call	#popregs_
35798                 | _fatfs_cc_rcvr_datablock_1163_ret
35798     2D 00 64 FD | 	ret
3579c                 | 
3579c                 | _fatfs_cc_xmit_datablock_1165
3579c     00 4A 05 F6 | 	mov	COUNT_, #0
357a0     A8 00 A0 FD | 	call	#pushregs_
357a4     10 F0 07 F1 | 	add	ptra, #16
357a8     04 4E 05 F1 | 	add	fp, #4
357ac     A7 12 62 FC | 	wrlong	arg01, fp
357b0     04 4E 05 F1 | 	add	fp, #4
357b4     A7 14 42 FC | 	wrbyte	arg02, fp
357b8     08 4E 85 F1 | 	sub	fp, #8
357bc     6C FD BF FD | 	call	#_fatfs_cc_wait_ready_1149
357c0     00 FA 0D F2 | 	cmp	result1, #0 wz
357c4     00 FA 05 A6 |  if_e	mov	result1, #0
357c8     90 00 90 AD |  if_e	jmp	#LR__5181
357cc     08 4E 05 F1 | 	add	fp, #8
357d0     A7 14 C2 FA | 	rdbyte	arg02, fp
357d4     04 4E 05 F1 | 	add	fp, #4
357d8     A7 14 42 FC | 	wrbyte	arg02, fp
357dc     A7 12 02 F6 | 	mov	arg01, fp
357e0     0C 4E 85 F1 | 	sub	fp, #12
357e4     01 14 06 F6 | 	mov	arg02, #1
357e8     34 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1138
357ec     08 4E 05 F1 | 	add	fp, #8
357f0     A7 14 C2 FA | 	rdbyte	arg02, fp
357f4     08 4E 85 F1 | 	sub	fp, #8
357f8     FD 14 0E F2 | 	cmp	arg02, #253 wz
357fc     58 00 90 AD |  if_e	jmp	#LR__5180
35800     04 4E 05 F1 | 	add	fp, #4
35804     A7 12 02 FB | 	rdlong	arg01, fp
35808     04 4E 85 F1 | 	sub	fp, #4
3580c     09 14 C6 F9 | 	decod	arg02, #9
35810     0C FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1138
35814     0C 4E 05 F1 | 	add	fp, #12
35818     A7 12 02 F6 | 	mov	arg01, fp
3581c     0C 4E 85 F1 | 	sub	fp, #12
35820     02 14 06 F6 | 	mov	arg02, #2
35824     80 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1145
35828     0C 4E 05 F1 | 	add	fp, #12
3582c     A7 12 02 F6 | 	mov	arg01, fp
35830     0C 4E 85 F1 | 	sub	fp, #12
35834     01 14 06 F6 | 	mov	arg02, #1
35838     6C FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1145
3583c     0C 4E 05 F1 | 	add	fp, #12
35840     A7 14 C2 FA | 	rdbyte	arg02, fp
35844     0C 4E 85 F1 | 	sub	fp, #12
35848     1F 14 06 F5 | 	and	arg02, #31
3584c     05 14 0E F2 | 	cmp	arg02, #5 wz
35850                 | ' 			return 0;
35850     00 FA 05 56 |  if_ne	mov	result1, #0
35854     04 00 90 5D |  if_ne	jmp	#LR__5181
35858                 | LR__5180
35858                 | ' 	}
35858                 | ' 
35858                 | ' 	return 1;
35858     01 FA 05 F6 | 	mov	result1, #1
3585c                 | LR__5181
3585c     A7 F0 03 F6 | 	mov	ptra, fp
35860     B2 00 A0 FD | 	call	#popregs_
35864                 | _fatfs_cc_xmit_datablock_1165_ret
35864     2D 00 64 FD | 	ret
35868                 | 
35868                 | _fatfs_cc_send_cmd_1169
35868     01 4A 05 F6 | 	mov	COUNT_, #1
3586c     A8 00 A0 FD | 	call	#pushregs_
35870     1C F0 07 F1 | 	add	ptra, #28
35874                 | _fatfs_cc_send_cmd_1169_enter
35874     04 4E 05 F1 | 	add	fp, #4
35878     A7 12 42 FC | 	wrbyte	arg01, fp
3587c     04 4E 05 F1 | 	add	fp, #4
35880     A7 14 62 FC | 	wrlong	arg02, fp
35884     04 4E 85 F1 | 	sub	fp, #4
35888     A7 FA C1 FA | 	rdbyte	result1, fp
3588c     04 4E 85 F1 | 	sub	fp, #4
35890     80 FA CD F7 | 	test	result1, #128 wz
35894     44 00 90 AD |  if_e	jmp	#LR__5190
35898     04 4E 05 F1 | 	add	fp, #4
3589c     A7 14 C2 FA | 	rdbyte	arg02, fp
358a0     7F 14 06 F5 | 	and	arg02, #127
358a4     A7 14 42 FC | 	wrbyte	arg02, fp
358a8     04 4E 85 F1 | 	sub	fp, #4
358ac     37 12 06 F6 | 	mov	arg01, #55
358b0     00 14 06 F6 | 	mov	arg02, #0
358b4     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1169
358b8     0C 4E 05 F1 | 	add	fp, #12
358bc     A7 FA 41 FC | 	wrbyte	result1, fp
358c0     A7 14 C2 FA | 	rdbyte	arg02, fp
358c4     0C 4E 85 F1 | 	sub	fp, #12
358c8     02 14 16 F2 | 	cmp	arg02, #2 wc
358cc     0C 4E 05 31 |  if_ae	add	fp, #12
358d0     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
358d4     0C 4E 85 31 |  if_ae	sub	fp, #12
358d8     6C 01 90 3D |  if_ae	jmp	#LR__5194
358dc                 | LR__5190
358dc     04 4E 05 F1 | 	add	fp, #4
358e0     A7 14 C2 FA | 	rdbyte	arg02, fp
358e4     04 4E 85 F1 | 	sub	fp, #4
358e8     0C 14 0E F2 | 	cmp	arg02, #12 wz
358ec     14 00 90 AD |  if_e	jmp	#LR__5191
358f0     C4 FC BF FD | 	call	#_fatfs_cc_deselect_1155
358f4     3C FD BF FD | 	call	#_fatfs_cc_select_1159
358f8     00 FA 0D F2 | 	cmp	result1, #0 wz
358fc     FF FA 05 A6 |  if_e	mov	result1, #255
35900     44 01 90 AD |  if_e	jmp	#LR__5194
35904                 | LR__5191
35904     04 4E 05 F1 | 	add	fp, #4
35908     A7 14 C2 FA | 	rdbyte	arg02, fp
3590c     40 FA 05 F6 | 	mov	result1, #64
35910     0A FB 41 F5 | 	or	result1, arg02
35914     10 4E 05 F1 | 	add	fp, #16
35918     A7 FA 41 FC | 	wrbyte	result1, fp
3591c     0C 4E 85 F1 | 	sub	fp, #12
35920     A7 FA 01 FB | 	rdlong	result1, fp
35924     18 FA 45 F0 | 	shr	result1, #24
35928     0D 4E 05 F1 | 	add	fp, #13
3592c     A7 FA 41 FC | 	wrbyte	result1, fp
35930     0D 4E 85 F1 | 	sub	fp, #13
35934     A7 FA 01 FB | 	rdlong	result1, fp
35938     10 FA 45 F0 | 	shr	result1, #16
3593c     0E 4E 05 F1 | 	add	fp, #14
35940     A7 FA 41 FC | 	wrbyte	result1, fp
35944     0E 4E 85 F1 | 	sub	fp, #14
35948     A7 FA 01 FB | 	rdlong	result1, fp
3594c     08 FA 45 F0 | 	shr	result1, #8
35950     0F 4E 05 F1 | 	add	fp, #15
35954     A7 FA 41 FC | 	wrbyte	result1, fp
35958     0F 4E 85 F1 | 	sub	fp, #15
3595c     A7 FA 01 FB | 	rdlong	result1, fp
35960     10 4E 05 F1 | 	add	fp, #16
35964     A7 FA 41 FC | 	wrbyte	result1, fp
35968     0C 4E 85 F1 | 	sub	fp, #12
3596c     A7 02 48 FC | 	wrbyte	#1, fp
35970     08 4E 85 F1 | 	sub	fp, #8
35974     A7 FA C9 FA | 	rdbyte	result1, fp wz
35978     04 4E 85 F1 | 	sub	fp, #4
3597c     0C 4E 05 A1 |  if_e	add	fp, #12
35980     A7 2A 49 AC |  if_e	wrbyte	#149, fp
35984     0C 4E 85 A1 |  if_e	sub	fp, #12
35988     04 4E 05 F1 | 	add	fp, #4
3598c     A7 FA C1 FA | 	rdbyte	result1, fp
35990     04 4E 85 F1 | 	sub	fp, #4
35994     08 FA 0D F2 | 	cmp	result1, #8 wz
35998     0C 4E 05 A1 |  if_e	add	fp, #12
3599c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
359a0     0C 4E 85 A1 |  if_e	sub	fp, #12
359a4     0C 4E 05 F1 | 	add	fp, #12
359a8     A7 14 C2 FA | 	rdbyte	arg02, fp
359ac     0D 4E 05 F1 | 	add	fp, #13
359b0     A7 14 42 FC | 	wrbyte	arg02, fp
359b4     05 4E 85 F1 | 	sub	fp, #5
359b8     A7 12 02 F6 | 	mov	arg01, fp
359bc     14 4E 85 F1 | 	sub	fp, #20
359c0     06 14 06 F6 | 	mov	arg02, #6
359c4     58 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1138
359c8     04 4E 05 F1 | 	add	fp, #4
359cc     A7 26 C2 FA | 	rdbyte	local01, fp
359d0     04 4E 85 F1 | 	sub	fp, #4
359d4     0C 26 0E F2 | 	cmp	local01, #12 wz
359d8     10 4E 05 A1 |  if_e	add	fp, #16
359dc     A7 12 02 A6 |  if_e	mov	arg01, fp
359e0     10 4E 85 A1 |  if_e	sub	fp, #16
359e4     01 14 06 A6 |  if_e	mov	arg02, #1
359e8     BC FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1145
359ec     0C 4E 05 F1 | 	add	fp, #12
359f0     A7 14 48 FC | 	wrbyte	#10, fp
359f4     0C 4E 85 F1 | 	sub	fp, #12
359f8                 | ' 	n = 10;
359f8                 | ' 	do
359f8                 | LR__5192
359f8     10 4E 05 F1 | 	add	fp, #16
359fc     A7 12 02 F6 | 	mov	arg01, fp
35a00     10 4E 85 F1 | 	sub	fp, #16
35a04     01 14 06 F6 | 	mov	arg02, #1
35a08     9C FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1145
35a0c     10 4E 05 F1 | 	add	fp, #16
35a10     A7 26 C2 FA | 	rdbyte	local01, fp
35a14     10 4E 85 F1 | 	sub	fp, #16
35a18     80 26 CE F7 | 	test	local01, #128 wz
35a1c     1C 00 90 AD |  if_e	jmp	#LR__5193
35a20     0C 4E 05 F1 | 	add	fp, #12
35a24     A7 26 C2 FA | 	rdbyte	local01, fp
35a28     01 26 86 F1 | 	sub	local01, #1
35a2c     A7 26 42 FC | 	wrbyte	local01, fp
35a30     A7 26 CA FA | 	rdbyte	local01, fp wz
35a34     0C 4E 85 F1 | 	sub	fp, #12
35a38     BC FF 9F 5D |  if_ne	jmp	#LR__5192
35a3c                 | LR__5193
35a3c                 | ' 
35a3c                 | ' 	return d;
35a3c     10 4E 05 F1 | 	add	fp, #16
35a40     A7 FA C1 FA | 	rdbyte	result1, fp
35a44     10 4E 85 F1 | 	sub	fp, #16
35a48                 | LR__5194
35a48     A7 F0 03 F6 | 	mov	ptra, fp
35a4c     B2 00 A0 FD | 	call	#popregs_
35a50                 | _fatfs_cc_send_cmd_1169_ret
35a50     2D 00 64 FD | 	ret
35a54                 | 
35a54                 | _fatfs_cc_disk_deinitialize
35a54     03 4A 05 F6 | 	mov	COUNT_, #3
35a58     A8 00 A0 FD | 	call	#pushregs_
35a5c     00 12 4E F2 | 	cmps	arg01, #0 wz
35a60     14 E4 05 F1 | 	add	objptr, #20
35a64     F2 12 02 FB | 	rdlong	arg01, objptr
35a68     04 E4 85 F1 | 	sub	objptr, #4
35a6c     F2 26 02 FB | 	rdlong	local01, objptr
35a70     08 E4 05 F1 | 	add	objptr, #8
35a74     F2 28 02 FB | 	rdlong	local02, objptr
35a78     04 E4 05 F1 | 	add	objptr, #4
35a7c     F2 2A 02 FB | 	rdlong	local03, objptr
35a80     1C E4 85 F1 | 	sub	objptr, #28
35a84                 | ' #line 799 "/home/pik33/flexprop/include/filesys/fatfs/sdmm.cc"
35a84                 | '         return RES_NOTRDY;
35a84     03 FA 05 56 |  if_ne	mov	result1, #3
35a88     2C 00 90 5D |  if_ne	jmp	#LR__5200
35a8c     50 12 62 FD | 	fltl	arg01
35a90     09 01 08 FC | 	wrpin	#0, arg01
35a94     50 26 62 FD | 	fltl	local01
35a98     13 01 08 FC | 	wrpin	#0, local01
35a9c     50 28 62 FD | 	fltl	local02
35aa0     14 01 08 FC | 	wrpin	#0, local02
35aa4     50 2A 62 FD | 	fltl	local03
35aa8     15 01 08 FC | 	wrpin	#0, local03
35aac     0A 12 06 F6 | 	mov	arg01, #10
35ab0     50 29 BF FD | 	call	#__system___waitms
35ab4                 | '     }
35ab4                 | ' #line 805 "/home/pik33/flexprop/include/filesys/fatfs/sdmm.cc"
35ab4                 | '     _pinclear(PIN_SS);
35ab4                 | '     _pinclear(PIN_CLK);
35ab4                 | '     _pinclear(PIN_DI);
35ab4                 | '     _pinclear(PIN_DO);
35ab4                 | ' 
35ab4                 | '     _waitms(10);
35ab4                 | ' 
35ab4                 | '     return 0;
35ab4     00 FA 05 F6 | 	mov	result1, #0
35ab8                 | LR__5200
35ab8     A7 F0 03 F6 | 	mov	ptra, fp
35abc     B2 00 A0 FD | 	call	#popregs_
35ac0                 | _fatfs_cc_disk_deinitialize_ret
35ac0     2D 00 64 FD | 	ret
35ac4                 | 
35ac4                 | _fatfs_cc_gettimeofday
35ac4     04 4A 05 F6 | 	mov	COUNT_, #4
35ac8     A8 00 A0 FD | 	call	#pushregs_
35acc     09 27 02 F6 | 	mov	local01, arg01
35ad0     9C 24 BF FD | 	call	#__system___getus
35ad4     FD 12 02 F6 | 	mov	arg01, result1
35ad8     9C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #412
35adc     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
35ae0     09 FB 01 F6 | 	mov	result1, arg01
35ae4     14 FB 81 F1 | 	sub	result1, local02
35ae8     A1 07 00 FF 
35aec     40 FA 15 FD | 	qdiv	result1, ##1000000
35af0     9C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #412
35af4     18 28 62 FD | 	getqx	local02
35af8     A1 07 00 FF 
35afc     40 FA 15 FD | 	qdiv	result1, ##1000000
35b00     00 28 0E F2 | 	cmp	local02, #0 wz
35b04     19 2A 62 FD | 	getqy	local03
35b08     20 00 90 AD |  if_e	jmp	#LR__5210
35b0c     98 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #408
35b10     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35b14     14 2D 02 F1 | 	add	local04, local02
35b18     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
35b1c     15 13 82 F1 | 	sub	arg01, local03
35b20     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
35b24     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
35b28     9C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #412
35b2c                 | LR__5210
35b2c     98 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #408
35b30     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35b34     98 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #408
35b38     13 2D 62 FC | 	wrlong	local04, local01
35b3c     04 26 06 F1 | 	add	local01, #4
35b40     13 2B 62 FC | 	wrlong	local03, local01
35b44                 | '         lastsec += secs;
35b44                 | '         lastus = now - leftover;
35b44                 | '     }
35b44                 | '     tv->tv_sec = lastsec;
35b44                 | '     tv->tv_usec = leftover;
35b44                 | '     return 0;
35b44     00 FA 05 F6 | 	mov	result1, #0
35b48     A7 F0 03 F6 | 	mov	ptra, fp
35b4c     B2 00 A0 FD | 	call	#popregs_
35b50                 | _fatfs_cc_gettimeofday_ret
35b50     2D 00 64 FD | 	ret
35b54                 | 
35b54                 | _fatfs_cc__is_leap_year
35b54     09 FB 51 F6 | 	abs	result1, arg01 wc
35b58     03 FA 05 F5 | 	and	result1, #3
35b5c     FD FA 89 F6 | 	negc	result1, result1 wz
35b60     38 00 90 5D |  if_ne	jmp	#LR__5221
35b64     09 FB 51 F6 | 	abs	result1, arg01 wc
35b68     64 FA 15 FD | 	qdiv	result1, #100
35b6c     19 FA 61 FD | 	getqy	result1
35b70     FD FA 89 F6 | 	negc	result1, result1 wz
35b74     1C 00 90 5D |  if_ne	jmp	#LR__5220
35b78     09 FB 51 F6 | 	abs	result1, arg01 wc
35b7c     90 FB 15 FD | 	qdiv	result1, #400
35b80                 | '       return (0 == y % 400);
35b80     00 FA 05 F6 | 	mov	result1, #0
35b84     19 00 62 FD | 	getqy	_var01
35b88     00 01 8A F6 | 	negc	_var01, _var01 wz
35b8c     01 FA 05 A6 |  if_e	mov	result1, #1
35b90     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
35b94                 | LR__5220
35b94                 | '     return 1;
35b94     01 FA 05 F6 | 	mov	result1, #1
35b98     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
35b9c                 | LR__5221
35b9c                 | '   }
35b9c                 | '   return 0;
35b9c     00 FA 05 F6 | 	mov	result1, #0
35ba0                 | _fatfs_cc__is_leap_year_ret
35ba0     2D 00 64 FD | 	ret
35ba4                 | 
35ba4                 | _fatfs_cc___tzoffset
35ba4     09 01 0A F6 | 	mov	_var01, arg01 wz
35ba8     FF FF FF FF 
35bac     0A FF 6B FC | 	wrlong	##-1, arg02
35bb0     01 02 06 F6 | 	mov	_var02, #1
35bb4     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
35bb8                 | '                 return 0;
35bb8     00 FA 05 A6 |  if_e	mov	result1, #0
35bbc     34 02 90 AD |  if_e	jmp	#LR__5247
35bc0     0A 01 68 FC | 	wrlong	#0, arg02
35bc4     70 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #368
35bc8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
35bcc                 | ' 
35bcc                 | '        *hasdst = 0;
35bcc                 | ' 
35bcc                 | ' 	n = stdname;
35bcc                 | '         while (*s && isalpha(*s)) {
35bcc     70 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #368
35bd0     97 24 48 FB | 	callpa	#(@LR__5231-@LR__5230)>>2,fcache_load_ptr_
35bd4                 | LR__5230
35bd4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
35bd8     40 00 90 AD |  if_e	jmp	#LR__5232
35bdc     00 13 C2 FA | 	rdbyte	arg01, _var01
35be0                 | ' {
35be0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35be0     80 12 36 F3 | 	fle	arg01, #128 wc
35be4                 | '     return __ctype[c];
35be4     A0 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #416
35be8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35bec     09 FB C1 FA | 	rdbyte	result1, arg01
35bf0     A0 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #416
35bf4     0C FA CD F7 | 	test	result1, #12 wz
35bf8     20 00 90 AD |  if_e	jmp	#LR__5232
35bfc     00 09 02 F6 | 	mov	_var05, _var01
35c00     00 0B 02 F6 | 	mov	_var06, _var01
35c04     01 0A 06 F1 | 	add	_var06, #1
35c08     04 0D C2 FA | 	rdbyte	_var07, _var05
35c0c     05 01 02 F6 | 	mov	_var01, _var06
35c10     03 0D 42 FC | 	wrbyte	_var07, _var04
35c14     01 06 06 F1 | 	add	_var04, #1
35c18     B8 FF 9F FD | 	jmp	#LR__5230
35c1c                 | LR__5231
35c1c                 | LR__5232
35c1c     03 01 48 FC | 	wrbyte	#0, _var04
35c20     00 0E 06 F6 | 	mov	_var08, #0
35c24     00 05 C2 FA | 	rdbyte	_var03, _var01
35c28     2D 04 0E F2 | 	cmp	_var03, #45 wz
35c2c     01 02 66 A6 |  if_e	neg	_var02, #1
35c30     01 00 06 A1 |  if_e	add	_var01, #1
35c34     97 24 48 FB | 	callpa	#(@LR__5234-@LR__5233)>>2,fcache_load_ptr_
35c38                 | '                 sgn = -1;
35c38                 | '                 s++;
35c38                 | '         }
35c38                 | '         while (isdigit(*s)) {
35c38                 | LR__5233
35c38     00 13 C2 FA | 	rdbyte	arg01, _var01
35c3c                 | ' {
35c3c                 | '   return  (__ctype_get(c) & 0x02 ) ;
35c3c     80 12 36 F3 | 	fle	arg01, #128 wc
35c40                 | '     return __ctype[c];
35c40     A0 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #416
35c44     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35c48     09 FB C1 FA | 	rdbyte	result1, arg01
35c4c     A0 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #416
35c50     02 FA CD F7 | 	test	result1, #2 wz
35c54     28 00 90 AD |  if_e	jmp	#LR__5235
35c58     07 05 02 F6 | 	mov	_var03, _var08
35c5c     02 04 66 F0 | 	shl	_var03, #2
35c60     07 05 02 F1 | 	add	_var03, _var08
35c64     01 04 66 F0 | 	shl	_var03, #1
35c68     00 09 C2 FA | 	rdbyte	_var05, _var01
35c6c     30 08 86 F1 | 	sub	_var05, #48
35c70     04 05 02 F1 | 	add	_var03, _var05
35c74     02 0F 02 F6 | 	mov	_var08, _var03
35c78     01 00 06 F1 | 	add	_var01, #1
35c7c     B8 FF 9F FD | 	jmp	#LR__5233
35c80                 | LR__5234
35c80                 | LR__5235
35c80     07 00 00 FF 
35c84     10 0E 06 FD | 	qmul	_var08, ##3600
35c88     00 05 C2 FA | 	rdbyte	_var03, _var01
35c8c     3A 04 0E F2 | 	cmp	_var03, #58 wz
35c90     18 10 62 FD | 	getqx	_var09
35c94     68 00 90 5D |  if_ne	jmp	#LR__5239
35c98     00 0E 06 F6 | 	mov	_var08, #0
35c9c     01 00 06 F1 | 	add	_var01, #1
35ca0     97 24 48 FB | 	callpa	#(@LR__5237-@LR__5236)>>2,fcache_load_ptr_
35ca4                 | '                 x = 0;
35ca4                 | '                 s++;
35ca4                 | '                 while (isdigit(*s)) {
35ca4                 | LR__5236
35ca4     00 13 C2 FA | 	rdbyte	arg01, _var01
35ca8                 | ' {
35ca8                 | '   return  (__ctype_get(c) & 0x02 ) ;
35ca8     80 12 36 F3 | 	fle	arg01, #128 wc
35cac                 | '     return __ctype[c];
35cac     A0 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #416
35cb0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35cb4     09 FB C1 FA | 	rdbyte	result1, arg01
35cb8     A0 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #416
35cbc     02 FA CD F7 | 	test	result1, #2 wz
35cc0     28 00 90 AD |  if_e	jmp	#LR__5238
35cc4     07 05 02 F6 | 	mov	_var03, _var08
35cc8     02 04 66 F0 | 	shl	_var03, #2
35ccc     07 05 02 F1 | 	add	_var03, _var08
35cd0     01 04 66 F0 | 	shl	_var03, #1
35cd4     00 09 C2 FA | 	rdbyte	_var05, _var01
35cd8     30 08 86 F1 | 	sub	_var05, #48
35cdc     04 05 02 F1 | 	add	_var03, _var05
35ce0     02 0F 02 F6 | 	mov	_var08, _var03
35ce4     01 00 06 F1 | 	add	_var01, #1
35ce8     B8 FF 9F FD | 	jmp	#LR__5236
35cec                 | LR__5237
35cec                 | LR__5238
35cec     07 0D 02 F6 | 	mov	_var07, _var08
35cf0     04 0C 66 F0 | 	shl	_var07, #4
35cf4     07 0D 82 F1 | 	sub	_var07, _var08
35cf8     02 0C 66 F0 | 	shl	_var07, #2
35cfc     06 11 02 F1 | 	add	_var09, _var07
35d00                 | LR__5239
35d00     79 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #377
35d04     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
35d08     00 13 C2 FA | 	rdbyte	arg01, _var01
35d0c                 | ' {
35d0c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35d0c     80 12 36 F3 | 	fle	arg01, #128 wc
35d10                 | '     return __ctype[c];
35d10     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
35d14     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35d18     09 FB C1 FA | 	rdbyte	result1, arg01
35d1c     A0 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #416
35d20     0C FA CD F7 | 	test	result1, #12 wz
35d24     48 00 90 AD |  if_e	jmp	#LR__5242
35d28     0A 03 68 FC | 	wrlong	#1, arg02
35d2c                 | '                 *hasdst = 1;
35d2c                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
35d2c                 | LR__5240
35d2c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
35d30     3C 00 90 AD |  if_e	jmp	#LR__5241
35d34     00 13 C2 FA | 	rdbyte	arg01, _var01
35d38                 | ' {
35d38                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35d38     80 12 36 F3 | 	fle	arg01, #128 wc
35d3c                 | '     return __ctype[c];
35d3c     A0 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #416
35d40     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35d44     09 FB C1 FA | 	rdbyte	result1, arg01
35d48     A0 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #416
35d4c     0C FA CD F7 | 	test	result1, #12 wz
35d50     1C 00 90 AD |  if_e	jmp	#LR__5241
35d54     00 0B 02 F6 | 	mov	_var06, _var01
35d58     01 0A 06 F1 | 	add	_var06, #1
35d5c     00 0D C2 FA | 	rdbyte	_var07, _var01
35d60     05 01 02 F6 | 	mov	_var01, _var06
35d64     03 0D 42 FC | 	wrbyte	_var07, _var04
35d68     01 06 06 F1 | 	add	_var04, #1
35d6c     BC FF 9F FD | 	jmp	#LR__5240
35d70                 | LR__5241
35d70                 | LR__5242
35d70     03 01 48 FC | 	wrbyte	#0, _var04
35d74     70 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #368
35d78     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
35d7c     70 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #368
35d80     18 00 90 AD |  if_e	jmp	#LR__5243
35d84     70 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #368
35d88     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35d8c     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
35d90     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35d94     68 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #360
35d98     14 00 90 FD | 	jmp	#LR__5244
35d9c                 | LR__5243
35d9c     82 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #386
35da0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35da4     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
35da8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35dac     68 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #360
35db0                 | LR__5244
35db0     79 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #377
35db4     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
35db8     79 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #377
35dbc     18 00 90 AD |  if_e	jmp	#LR__5245
35dc0     79 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #377
35dc4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35dc8     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
35dcc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35dd0     6C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #364
35dd4     14 00 90 FD | 	jmp	#LR__5246
35dd8                 | LR__5245
35dd8     70 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, #368
35ddc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35de0     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
35de4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35de8     6C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, #364
35dec                 | LR__5246
35dec     08 03 02 FD | 	qmul	_var02, _var09
35df0                 | ' 		_tzname[1] = stdname;
35df0                 | ' 
35df0                 | '         return sgn * off;
35df0     18 FA 61 FD | 	getqx	result1
35df4                 | LR__5247
35df4                 | _fatfs_cc___tzoffset_ret
35df4     2D 00 64 FD | 	ret
35df8                 | 
35df8                 | _fatfs_cc___indst
35df8     10 12 06 F1 | 	add	arg01, #16
35dfc     09 01 02 FB | 	rdlong	_var01, arg01
35e00     10 12 86 F1 | 	sub	arg01, #16
35e04     02 00 0E F2 | 	cmp	_var01, #2 wz
35e08     30 00 90 5D |  if_ne	jmp	#LR__5250
35e0c     07 00 06 F6 | 	mov	_var01, #7
35e10     18 12 06 F1 | 	add	arg01, #24
35e14     09 03 02 FB | 	rdlong	_var02, arg01
35e18     01 01 02 F1 | 	add	_var01, _var02
35e1c     0C 12 86 F1 | 	sub	arg01, #12
35e20     09 05 02 FB | 	rdlong	_var03, arg01
35e24     02 01 82 F1 | 	sub	_var01, _var03
35e28     00 00 56 F2 | 	cmps	_var01, #0 wc
35e2c                 | '                         return 1;
35e2c     01 FA 05 C6 |  if_b	mov	result1, #1
35e30     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
35e34                 | '                 return 0;
35e34     00 FA 05 F6 | 	mov	result1, #0
35e38     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
35e3c                 | LR__5250
35e3c     10 12 06 F1 | 	add	arg01, #16
35e40     09 01 02 FB | 	rdlong	_var01, arg01
35e44     10 12 86 F1 | 	sub	arg01, #16
35e48     0A 00 0E F2 | 	cmp	_var01, #10 wz
35e4c     28 00 90 5D |  if_ne	jmp	#LR__5251
35e50     18 12 06 F1 | 	add	arg01, #24
35e54     09 01 02 FB | 	rdlong	_var01, arg01
35e58     0C 12 86 F1 | 	sub	arg01, #12
35e5c     09 07 02 FB | 	rdlong	_var04, arg01
35e60     03 01 82 F1 | 	sub	_var01, _var04
35e64     00 00 56 F2 | 	cmps	_var01, #0 wc
35e68                 | '                         return 0;
35e68     00 FA 05 C6 |  if_b	mov	result1, #0
35e6c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
35e70                 | '                 return 1;
35e70     01 FA 05 F6 | 	mov	result1, #1
35e74     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
35e78                 | LR__5251
35e78                 | '         }
35e78                 | ' 
35e78                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
35e78     00 00 06 F6 | 	mov	_var01, #0
35e7c     10 12 06 F1 | 	add	arg01, #16
35e80     09 03 02 FB | 	rdlong	_var02, arg01
35e84     10 12 86 F1 | 	sub	arg01, #16
35e88     03 02 56 F2 | 	cmps	_var02, #3 wc
35e8c     10 00 90 CD |  if_b	jmp	#LR__5252
35e90     10 12 06 F1 | 	add	arg01, #16
35e94     09 05 02 FB | 	rdlong	_var03, arg01
35e98     0A 04 56 F2 | 	cmps	_var03, #10 wc
35e9c     01 00 06 C6 |  if_b	mov	_var01, #1
35ea0                 | LR__5252
35ea0     00 FB 01 F6 | 	mov	result1, _var01
35ea4                 | _fatfs_cc___indst_ret
35ea4     2D 00 64 FD | 	ret
35ea8                 | 
35ea8                 | ' 	
35ea8                 | ' 	FUNCTION pfunc(c as integer) as integer
35ea8                 | __system____strs_cl_pfunc_
35ea8                 | ' 		if (i < 16) then
35ea8     04 E4 05 F1 | 	add	objptr, #4
35eac     F2 FA 01 FB | 	rdlong	result1, objptr
35eb0     04 E4 85 F1 | 	sub	objptr, #4
35eb4     10 FA 55 F2 | 	cmps	result1, #16 wc
35eb8     2C 00 90 3D |  if_ae	jmp	#LR__5260
35ebc     F2 FA 01 FB | 	rdlong	result1, objptr
35ec0     04 E4 05 F1 | 	add	objptr, #4
35ec4     F2 00 02 FB | 	rdlong	_var01, objptr
35ec8     FD 00 02 F1 | 	add	_var01, result1
35ecc     00 13 42 FC | 	wrbyte	arg01, _var01
35ed0     F2 FA 01 FB | 	rdlong	result1, objptr
35ed4     01 FA 05 F1 | 	add	result1, #1
35ed8     F2 FA 61 FC | 	wrlong	result1, objptr
35edc     04 E4 85 F1 | 	sub	objptr, #4
35ee0                 | ' 			p(i) = c
35ee0                 | ' 			i = i+1
35ee0                 | ' 			return 1
35ee0     01 FA 05 F6 | 	mov	result1, #1
35ee4     04 00 90 FD | 	jmp	#__system____strs_cl_pfunc__ret
35ee8                 | LR__5260
35ee8                 | ' 			return -1
35ee8     01 FA 65 F6 | 	neg	result1, #1
35eec                 | __system____strs_cl_pfunc__ret
35eec     2D 00 64 FD | 	ret
35ef0                 | 
35ef0                 | __system___struct__s_vfs_file_t_putchar_
35ef0     04 4A 05 F6 | 	mov	COUNT_, #4
35ef4     A8 00 A0 FD | 	call	#pushregs_
35ef8     1C E4 05 F1 | 	add	objptr, #28
35efc     F2 26 0A FB | 	rdlong	local01, objptr wz
35f00     1C E4 85 F1 | 	sub	objptr, #28
35f04     00 FA 05 A6 |  if_e	mov	result1, #0
35f08     48 00 90 AD |  if_e	jmp	#LR__5270
35f0c     1C E4 05 F1 | 	add	objptr, #28
35f10     F2 28 02 FB | 	rdlong	local02, objptr
35f14     14 2B 02 F6 | 	mov	local03, local02
35f18     1C E4 85 F1 | 	sub	objptr, #28
35f1c     13 2A 46 F7 | 	zerox	local03, #19
35f20     14 28 46 F0 | 	shr	local02, #20
35f24     02 28 66 F0 | 	shl	local02, #2
35f28     ED 28 02 F1 | 	add	local02, __methods__
35f2c     14 29 02 FB | 	rdlong	local02, local02
35f30     F2 14 02 F6 | 	mov	arg02, objptr
35f34     F2 2C 02 F6 | 	mov	local04, objptr
35f38     15 E5 01 F6 | 	mov	objptr, local03
35f3c     2D 28 62 FD | 	call	local02
35f40     16 E5 01 F6 | 	mov	objptr, local04
35f44                 | '     return (i < 0) ? 0 : 1;
35f44     00 FA 55 F2 | 	cmps	result1, #0 wc
35f48     00 26 06 C6 |  if_b	mov	local01, #0
35f4c     01 26 06 36 |  if_ae	mov	local01, #1
35f50     13 FB 01 F6 | 	mov	result1, local01
35f54                 | LR__5270
35f54     A7 F0 03 F6 | 	mov	ptra, fp
35f58     B2 00 A0 FD | 	call	#popregs_
35f5c                 | __system___struct__s_vfs_file_t_putchar__ret
35f5c     2D 00 64 FD | 	ret
35f60                 | 
35f60                 | __system___struct__s_vfs_file_t_getchar_
35f60     03 4A 05 F6 | 	mov	COUNT_, #3
35f64     A8 00 A0 FD | 	call	#pushregs_
35f68     20 E4 05 F1 | 	add	objptr, #32
35f6c     F2 12 0A FB | 	rdlong	arg01, objptr wz
35f70     20 E4 85 F1 | 	sub	objptr, #32
35f74     01 FA 65 A6 |  if_e	neg	result1, #1
35f78     38 00 90 AD |  if_e	jmp	#LR__5280
35f7c                 | '     return getcf(__this);
35f7c     20 E4 05 F1 | 	add	objptr, #32
35f80     F2 26 02 FB | 	rdlong	local01, objptr
35f84     13 29 02 F6 | 	mov	local02, local01
35f88     20 E4 85 F1 | 	sub	objptr, #32
35f8c     13 28 46 F7 | 	zerox	local02, #19
35f90     14 26 46 F0 | 	shr	local01, #20
35f94     02 26 66 F0 | 	shl	local01, #2
35f98     ED 26 02 F1 | 	add	local01, __methods__
35f9c     13 27 02 FB | 	rdlong	local01, local01
35fa0     F2 12 02 F6 | 	mov	arg01, objptr
35fa4     F2 2A 02 F6 | 	mov	local03, objptr
35fa8     14 E5 01 F6 | 	mov	objptr, local02
35fac     2D 26 62 FD | 	call	local01
35fb0     15 E5 01 F6 | 	mov	objptr, local03
35fb4                 | LR__5280
35fb4     A7 F0 03 F6 | 	mov	ptra, fp
35fb8     B2 00 A0 FD | 	call	#popregs_
35fbc                 | __system___struct__s_vfs_file_t_getchar__ret
35fbc     2D 00 64 FD | 	ret
35fc0                 | 
35fc0                 | __system___struct___bas_wrap_sender_tx_
35fc0     03 4A 05 F6 | 	mov	COUNT_, #3
35fc4     A8 00 A0 FD | 	call	#pushregs_
35fc8     F2 26 02 FB | 	rdlong	local01, objptr
35fcc     13 29 02 F6 | 	mov	local02, local01
35fd0     13 26 46 F7 | 	zerox	local01, #19
35fd4     14 28 46 F0 | 	shr	local02, #20
35fd8     02 28 66 F0 | 	shl	local02, #2
35fdc     ED 28 02 F1 | 	add	local02, __methods__
35fe0     14 29 02 FB | 	rdlong	local02, local02
35fe4     F2 2A 02 F6 | 	mov	local03, objptr
35fe8     13 E5 01 F6 | 	mov	objptr, local01
35fec     2D 28 62 FD | 	call	local02
35ff0     15 E5 01 F6 | 	mov	objptr, local03
35ff4     01 FA 05 F6 | 	mov	result1, #1
35ff8     A7 F0 03 F6 | 	mov	ptra, fp
35ffc     B2 00 A0 FD | 	call	#popregs_
36000                 | __system___struct___bas_wrap_sender_tx__ret
36000     2D 00 64 FD | 	ret
36004                 | 
36004                 | __system___struct___bas_wrap_sender_rx_
36004     03 4A 05 F6 | 	mov	COUNT_, #3
36008     A8 00 A0 FD | 	call	#pushregs_
3600c     04 E4 05 F1 | 	add	objptr, #4
36010     F2 26 02 FB | 	rdlong	local01, objptr
36014     13 29 02 F6 | 	mov	local02, local01
36018     04 E4 85 F1 | 	sub	objptr, #4
3601c     13 28 46 F7 | 	zerox	local02, #19
36020     14 26 46 F0 | 	shr	local01, #20
36024     02 26 66 F0 | 	shl	local01, #2
36028     ED 26 02 F1 | 	add	local01, __methods__
3602c     13 27 02 FB | 	rdlong	local01, local01
36030     F2 2A 02 F6 | 	mov	local03, objptr
36034     14 E5 01 F6 | 	mov	objptr, local02
36038     2D 26 62 FD | 	call	local01
3603c     15 E5 01 F6 | 	mov	objptr, local03
36040     A7 F0 03 F6 | 	mov	ptra, fp
36044     B2 00 A0 FD | 	call	#popregs_
36048                 | __system___struct___bas_wrap_sender_rx__ret
36048     2D 00 64 FD | 	ret
3604c                 | 
3604c                 | __system___struct___bas_wrap_sender_close_
3604c     03 4A 05 F6 | 	mov	COUNT_, #3
36050     A8 00 A0 FD | 	call	#pushregs_
36054     08 E4 05 F1 | 	add	objptr, #8
36058     F2 26 02 FB | 	rdlong	local01, objptr
3605c     13 29 02 F6 | 	mov	local02, local01
36060     08 E4 85 F1 | 	sub	objptr, #8
36064     13 28 46 F7 | 	zerox	local02, #19
36068     14 26 46 F0 | 	shr	local01, #20
3606c     02 26 66 F0 | 	shl	local01, #2
36070     ED 26 02 F1 | 	add	local01, __methods__
36074     13 27 02 FB | 	rdlong	local01, local01
36078     F2 2A 02 F6 | 	mov	local03, objptr
3607c     14 E5 01 F6 | 	mov	objptr, local02
36080     2D 26 62 FD | 	call	local01
36084     15 E5 01 F6 | 	mov	objptr, local03
36088     A7 F0 03 F6 | 	mov	ptra, fp
3608c     B2 00 A0 FD | 	call	#popregs_
36090                 | __system___struct___bas_wrap_sender_close__ret
36090     2D 00 64 FD | 	ret
36094                 | 
36094                 | LR__5290
36094     2F          | 	byte	"/"
36095     00          | 	byte	0
36096                 | LR__5291
36096     69 6E 66    | 	byte	"inf"
36099     00          | 	byte	0
3609a                 | LR__5292
3609a     6E 61 6E    | 	byte	"nan"
3609d     00          | 	byte	0
3609e                 | LR__5293
3609e                 | 	byte	
3609e     00          | 	byte	0
3609f                 | LR__5294
3609f                 | 	byte	
3609f     00          | 	byte	0
360a0                 | LR__5295
360a0                 | 	byte	
360a0     00          | 	byte	0
360a1                 | LR__5296
360a1                 | 	byte	
360a1     00          | 	byte	0
360a2                 | LR__5297
360a2                 | 	byte	
360a2     00          | 	byte	0
360a3                 | LR__5298
360a3                 | 	byte	
360a3     00          | 	byte	0
360a4                 | LR__5299
360a4                 | 	byte	
360a4     00          | 	byte	0
360a5                 | LR__5300
360a5                 | 	byte	
360a5     00          | 	byte	0
360a6                 | LR__5301
360a6     00          | 	byte	0
360a7     00          | 	byte	0
360a8                 | LR__5302
360a8     00          | 	byte	0
360a9     00          | 	byte	0
360aa                 | LR__5303
360aa     00          | 	byte	0
360ab     00          | 	byte	0
360ac                 | LR__5304
360ac     20 21 21 21 
360b0     20 63 6F 72 
360b4     72 75 70 74 
360b8     65 64 20 68 
360bc     65 61 70 3F 
360c0     3F 3F 20 21 
360c4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
360c7     00          | 	byte	0
360c8                 | LR__5305
360c8     20 21 21 21 
360cc     20 6F 75 74 
360d0     20 6F 66 20 
360d4     68 65 61 70 
360d8     20 6D 65 6D 
360dc     6F 72 79 20 
360e0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
360e4     00          | 	byte	0
360e5                 | LR__5306
360e5     20 21 21 21 
360e9     20 63 6F 72 
360ed     72 75 70 74 
360f1     65 64 20 68 
360f5     65 61 70 20 
360f9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
360fd     00          | 	byte	0
360fe                 | LR__5307
360fe     00          | 	byte	0
360ff     00          | 	byte	0
36100                 | LR__5308
36100     2E          | 	byte	"."
36101     00          | 	byte	0
36102                 | LR__5309
36102     00          | 	byte	0
36103     00          | 	byte	0
36104                 | LR__5310
36104     00          | 	byte	0
36105     00          | 	byte	0
36106                 | LR__5311
36106     00          | 	byte	0
36107     00          | 	byte	0
36108                 | LR__5312
36108     2A 2B 2C 3A 
3610c     3B 3C 3D 3E 
36110     5B 5D 7C 22 
36114     3F 7F       | 	byte	"*+,:;<=>[]|",34,"?",127
36116     00          | 	byte	0
36117                 | LR__5313
36117     46 41 54 33 
3611b     32 20 20 20 | 	byte	"FAT32   "
3611f     00          | 	byte	0
36120                 | LR__5314
36120     54 5A       | 	byte	"TZ"
36122     00          | 	byte	0
36123                 | LR__5315
36123     00          | 	byte	0
36124     00          | 	byte	0
36125                 | LR__5316
36125                 | 	byte	
36125     00          | 	byte	0
36126                 | LR__5317
36126                 | 	byte	
36126     00          | 	byte	0
36127                 | LR__5318
36127                 | 	byte	
36127     00          | 	byte	0
36128                 | LR__5319
36128                 | 	byte	
36128     00          | 	byte	0
36129                 | LR__5320
36129     22          | 	byte	34
3612a     00          | 	byte	0
3612b                 | LR__5321
3612b     22          | 	byte	34
3612c     00          | 	byte	0
3612d                 | LR__5322
3612d     3A          | 	byte	":"
3612e     00          | 	byte	0
3612f                 | LR__5323
3612f                 | 	byte	
3612f     00          | 	byte	0
36130                 | LR__5324
36130                 | 	byte	
36130     00          | 	byte	0
36131                 | LR__5325
36131                 | 	byte	
36131     00          | 	byte	0
36132                 | LR__5326
36132                 | 	byte	
36132     00          | 	byte	0
36133                 | LR__5327
36133                 | 	byte	
36133     00          | 	byte	0
36134                 | LR__5328
36134                 | 	byte	
36134     00          | 	byte	0
36135                 | LR__5329
36135                 | 	byte	
36135     00          | 	byte	0
36136                 | LR__5330
36136     30          | 	byte	"0"
36137     00          | 	byte	0
36138                 | LR__5331
36138     22          | 	byte	34
36139     00          | 	byte	0
3613a                 | LR__5332
3613a     22          | 	byte	34
3613b     00          | 	byte	0
3613c                 | LR__5333
3613c     22          | 	byte	34
3613d     00          | 	byte	0
3613e                 | LR__5334
3613e     22          | 	byte	34
3613f     00          | 	byte	0
36140                 | LR__5335
36140     22          | 	byte	34
36141     00          | 	byte	0
36142                 | LR__5336
36142     3E          | 	byte	">"
36143     00          | 	byte	0
36144                 | LR__5337
36144     3C          | 	byte	"<"
36145     00          | 	byte	0
36146                 | LR__5338
36146     2B          | 	byte	"+"
36147     00          | 	byte	0
36148                 | LR__5339
36148     2D          | 	byte	"-"
36149     00          | 	byte	0
3614a                 | LR__5340
3614a     2A          | 	byte	"*"
3614b     00          | 	byte	0
3614c                 | LR__5341
3614c     2F          | 	byte	"/"
3614d     00          | 	byte	0
3614e                 | LR__5342
3614e     5E          | 	byte	"^"
3614f     00          | 	byte	0
36150                 | LR__5343
36150     3D          | 	byte	"="
36151     00          | 	byte	0
36152                 | LR__5344
36152     2B          | 	byte	"+"
36153     00          | 	byte	0
36154                 | LR__5345
36154     2B          | 	byte	"+"
36155     00          | 	byte	0
36156                 | LR__5346
36156     2D          | 	byte	"-"
36157     00          | 	byte	0
36158                 | LR__5347
36158     2D          | 	byte	"-"
36159     00          | 	byte	0
3615a                 | LR__5348
3615a     3C          | 	byte	"<"
3615b     00          | 	byte	0
3615c                 | LR__5349
3615c     3E          | 	byte	">"
3615d     00          | 	byte	0
3615e                 | LR__5350
3615e     22          | 	byte	34
3615f     00          | 	byte	0
36160                 | LR__5351
36160     22          | 	byte	34
36161     00          | 	byte	0
36162                 | LR__5352
36162     65 6C 73 65 | 	byte	"else"
36166     00          | 	byte	0
36167                 | LR__5353
36167     74 68 65 6E | 	byte	"then"
3616b     00          | 	byte	0
3616c                 | LR__5354
3616c     3F          | 	byte	"?"
3616d     00          | 	byte	0
3616e                 | LR__5355
3616e     3F          | 	byte	"?"
3616f     00          | 	byte	0
36170                 | LR__5356
36170     2E          | 	byte	"."
36171     00          | 	byte	0
36172                 | LR__5357
36172     6D 6F 75 73 
36176     65          | 	byte	"mouse"
36177     00          | 	byte	0
36178                 | LR__5358
36178     63 75 72 73 
3617c     6F 72       | 	byte	"cursor"
3617e     00          | 	byte	0
3617f                 | LR__5359
3617f     63 6C 69 63 
36183     6B          | 	byte	"click"
36184     00          | 	byte	0
36185                 | LR__5360
36185     6F 6E       | 	byte	"on"
36187     00          | 	byte	0
36188                 | LR__5361
36188     31          | 	byte	"1"
36189     00          | 	byte	0
3618a                 | LR__5362
3618a     6F 66 66    | 	byte	"off"
3618d     00          | 	byte	0
3618e                 | LR__5363
3618e     30          | 	byte	"0"
3618f     00          | 	byte	0
36190                 | LR__5364
36190     6D 6F 64 65 | 	byte	"mode"
36194     00          | 	byte	0
36195                 | LR__5365
36195     6D 2E       | 	byte	"m."
36197     00          | 	byte	0
36198                 | LR__5366
36198     61 74 61 72 
3619c     69          | 	byte	"atari"
3619d     00          | 	byte	0
3619e                 | LR__5367
3619e     30          | 	byte	"0"
3619f     00          | 	byte	0
361a0                 | LR__5368
361a0     70 63 5F 61 
361a4     6D 62 65 72 | 	byte	"pc_amber"
361a8     00          | 	byte	0
361a9                 | LR__5369
361a9     31          | 	byte	"1"
361aa     00          | 	byte	0
361ab                 | LR__5370
361ab     70 63 5F 67 
361af     72 65 65 6E | 	byte	"pc_green"
361b3     00          | 	byte	0
361b4                 | LR__5371
361b4     32          | 	byte	"2"
361b5     00          | 	byte	0
361b6                 | LR__5372
361b6     70 63 5F 77 
361ba     68 69 74 65 | 	byte	"pc_white"
361be     00          | 	byte	0
361bf                 | LR__5373
361bf     33          | 	byte	"3"
361c0     00          | 	byte	0
361c1                 | LR__5374
361c1     73 74       | 	byte	"st"
361c3     00          | 	byte	0
361c4                 | LR__5375
361c4     34          | 	byte	"4"
361c5     00          | 	byte	0
361c6                 | LR__5376
361c6     61 6D 69 67 
361ca     61          | 	byte	"amiga"
361cb     00          | 	byte	0
361cc                 | LR__5377
361cc     35          | 	byte	"5"
361cd     00          | 	byte	0
361ce                 | LR__5378
361ce                 | 	byte	
361ce     00          | 	byte	0
361cf                 | LR__5379
361cf     6C 6F 61 64 | 	byte	"load"
361d3     00          | 	byte	0
361d4                 | LR__5380
361d4     73 61 76 65 | 	byte	"save"
361d8     00          | 	byte	0
361d9                 | LR__5381
361d9     62 72 75 6E | 	byte	"brun"
361dd     00          | 	byte	0
361de                 | LR__5382
361de     72 75 6E    | 	byte	"run"
361e1     00          | 	byte	0
361e2                 | LR__5383
361e2     6C 6F 2E    | 	byte	"lo."
361e5     00          | 	byte	0
361e6                 | LR__5384
361e6     73 2E       | 	byte	"s."
361e8     00          | 	byte	0
361e9                 | LR__5385
361e9     62 72 2E    | 	byte	"br."
361ec     00          | 	byte	0
361ed                 | LR__5386
361ed     65 6E 74 65 
361f1     72          | 	byte	"enter"
361f2     00          | 	byte	0
361f3                 | LR__5387
361f3     65 2E       | 	byte	"e."
361f5     00          | 	byte	0
361f6                 | LR__5388
361f6     24          | 	byte	"$"
361f7     00          | 	byte	0
361f8                 | LR__5389
361f8     64 65 6C 65 
361fc     74 65       | 	byte	"delete"
361fe     00          | 	byte	0
361ff                 | LR__5390
361ff     6D 6B 64 69 
36203     72          | 	byte	"mkdir"
36204     00          | 	byte	0
36205                 | LR__5391
36205     24          | 	byte	"$"
36206     00          | 	byte	0
36207                 | LR__5392
36207     63 6F 70 79 | 	byte	"copy"
3620b     00          | 	byte	0
3620c                 | LR__5393
3620c     24          | 	byte	"$"
3620d     00          | 	byte	0
3620e                 | LR__5394
3620e     63 6F 70 79 | 	byte	"copy"
36212     00          | 	byte	0
36213                 | LR__5395
36213     24          | 	byte	"$"
36214     00          | 	byte	0
36215                 | LR__5396
36215     63 64       | 	byte	"cd"
36217     00          | 	byte	0
36218                 | LR__5397
36218     63 64 2E    | 	byte	"cd."
3621b     00          | 	byte	0
3621c                 | LR__5398
3621c     2E          | 	byte	"."
3621d     00          | 	byte	0
3621e                 | LR__5399
3621e     2E 2E       | 	byte	".."
36220     00          | 	byte	0
36221                 | LR__5400
36221     63 64       | 	byte	"cd"
36223     00          | 	byte	0
36224                 | LR__5401
36224     2F          | 	byte	"/"
36225     00          | 	byte	0
36226                 | LR__5402
36226                 | 	byte	
36226     00          | 	byte	0
36227                 | LR__5403
36227                 | 	byte	
36227     00          | 	byte	0
36228                 | LR__5404
36228                 | 	byte	
36228     00          | 	byte	0
36229                 | LR__5405
36229                 | 	byte	
36229     00          | 	byte	0
3622a                 | LR__5406
3622a                 | 	byte	
3622a     00          | 	byte	0
3622b                 | LR__5407
3622b     52 65 61 64 
3622f     79          | 	byte	"Ready"
36230     00          | 	byte	0
36231                 | LR__5408
36231     2B          | 	byte	"+"
36232     00          | 	byte	0
36233                 | LR__5409
36233     2D          | 	byte	"-"
36234     00          | 	byte	0
36235                 | LR__5410
36235     6F 72       | 	byte	"or"
36237     00          | 	byte	0
36238                 | LR__5411
36238     78 6F 72    | 	byte	"xor"
3623b     00          | 	byte	0
3623c                 | LR__5412
3623c     2A          | 	byte	"*"
3623d     00          | 	byte	0
3623e                 | LR__5413
3623e     2F          | 	byte	"/"
3623f     00          | 	byte	0
36240                 | LR__5414
36240     61 6E 64    | 	byte	"and"
36243     00          | 	byte	0
36244                 | LR__5415
36244     64 69 76    | 	byte	"div"
36247     00          | 	byte	0
36248                 | LR__5416
36248     6D 6F 64    | 	byte	"mod"
3624b     00          | 	byte	0
3624c                 | LR__5417
3624c     73 68 6C    | 	byte	"shl"
3624f     00          | 	byte	0
36250                 | LR__5418
36250     73 68 72    | 	byte	"shr"
36253     00          | 	byte	0
36254                 | LR__5419
36254     5E          | 	byte	"^"
36255     00          | 	byte	0
36256                 | LR__5420
36256     6E 6F 74    | 	byte	"not"
36259     00          | 	byte	0
3625a                 | LR__5421
3625a     40          | 	byte	"@"
3625b     00          | 	byte	0
3625c                 | LR__5422
3625c     3D          | 	byte	"="
3625d     00          | 	byte	0
3625e                 | LR__5423
3625e     3E 3D       | 	byte	">="
36260     00          | 	byte	0
36261                 | LR__5424
36261     3C 3D       | 	byte	"<="
36263     00          | 	byte	0
36264                 | LR__5425
36264     3C          | 	byte	"<"
36265     00          | 	byte	0
36266                 | LR__5426
36266     3E          | 	byte	">"
36267     00          | 	byte	0
36268                 | LR__5427
36268     3C 3E       | 	byte	"<>"
3626a     00          | 	byte	0
3626b                 | LR__5428
3626b     2B 2B       | 	byte	"++"
3626d     00          | 	byte	0
3626e                 | LR__5429
3626e     2D 2D       | 	byte	"--"
36270     00          | 	byte	0
36271                 | LR__5430
36271     23          | 	byte	"#"
36272     00          | 	byte	0
36273                 | LR__5431
36273     30          | 	byte	"0"
36274     00          | 	byte	0
36275                 | LR__5432
36275     39          | 	byte	"9"
36276     00          | 	byte	0
36277                 | LR__5433
36277     23 72 65 61 
3627b     64          | 	byte	"#read"
3627c     00          | 	byte	0
3627d                 | LR__5434
3627d     23 77 72 69 
36281     74 65       | 	byte	"#write"
36283     00          | 	byte	0
36284                 | LR__5435
36284     23 61 70 70 
36288     65 6E 64    | 	byte	"#append"
3628b     00          | 	byte	0
3628c                 | LR__5436
3628c     23          | 	byte	"#"
3628d     00          | 	byte	0
3628e                 | LR__5437
3628e     23          | 	byte	"#"
3628f     00          | 	byte	0
36290                 | LR__5438
36290     2D          | 	byte	"-"
36291     00          | 	byte	0
36292                 | LR__5439
36292     30          | 	byte	"0"
36293     00          | 	byte	0
36294                 | LR__5440
36294     63          | 	byte	"c"
36295     00          | 	byte	0
36296                 | LR__5441
36296     63 23       | 	byte	"c#"
36298     00          | 	byte	0
36299                 | LR__5442
36299     64          | 	byte	"d"
3629a     00          | 	byte	0
3629b                 | LR__5443
3629b     64 23       | 	byte	"d#"
3629d     00          | 	byte	0
3629e                 | LR__5444
3629e     65          | 	byte	"e"
3629f     00          | 	byte	0
362a0                 | LR__5445
362a0     66          | 	byte	"f"
362a1     00          | 	byte	0
362a2                 | LR__5446
362a2     66 23       | 	byte	"f#"
362a4     00          | 	byte	0
362a5                 | LR__5447
362a5     67          | 	byte	"g"
362a6     00          | 	byte	0
362a7                 | LR__5448
362a7     67 23       | 	byte	"g#"
362a9     00          | 	byte	0
362aa                 | LR__5449
362aa     61          | 	byte	"a"
362ab     00          | 	byte	0
362ac                 | LR__5450
362ac     61 23       | 	byte	"a#"
362ae     00          | 	byte	0
362af                 | LR__5451
362af     68          | 	byte	"h"
362b0     00          | 	byte	0
362b1                 | LR__5452
362b1     62          | 	byte	"b"
362b2     00          | 	byte	0
362b3                 | LR__5453
362b3     2B          | 	byte	"+"
362b4     00          | 	byte	0
362b5                 | LR__5454
362b5     2D          | 	byte	"-"
362b6     00          | 	byte	0
362b7                 | LR__5455
362b7     3D          | 	byte	"="
362b8     00          | 	byte	0
362b9                 | LR__5456
362b9     2C          | 	byte	","
362ba     00          | 	byte	0
362bb                 | LR__5457
362bb     2A          | 	byte	"*"
362bc     00          | 	byte	0
362bd                 | LR__5458
362bd     2F          | 	byte	"/"
362be     00          | 	byte	0
362bf                 | LR__5459
362bf     3B          | 	byte	";"
362c0     00          | 	byte	0
362c1                 | LR__5460
362c1     22          | 	byte	34
362c2     00          | 	byte	0
362c3                 | LR__5461
362c3     5E          | 	byte	"^"
362c4     00          | 	byte	0
362c5                 | LR__5462
362c5     29          | 	byte	")"
362c6     00          | 	byte	0
362c7                 | LR__5463
362c7     28          | 	byte	"("
362c8     00          | 	byte	0
362c9                 | LR__5464
362c9     3A          | 	byte	":"
362ca     00          | 	byte	0
362cb                 | LR__5465
362cb     20          | 	byte	" "
362cc     00          | 	byte	0
362cd                 | LR__5466
362cd     3E          | 	byte	">"
362ce     00          | 	byte	0
362cf                 | LR__5467
362cf     3C          | 	byte	"<"
362d0     00          | 	byte	0
362d1                 | LR__5468
362d1     3D          | 	byte	"="
362d2     00          | 	byte	0
362d3                 | LR__5469
362d3     62 65 65 70 | 	byte	"beep"
362d7     00          | 	byte	0
362d8                 | LR__5470
362d8     62 2E       | 	byte	"b."
362da     00          | 	byte	0
362db                 | LR__5471
362db     62 6C 69 74 | 	byte	"blit"
362df     00          | 	byte	0
362e0                 | LR__5472
362e0     62 6F 78    | 	byte	"box"
362e3     00          | 	byte	0
362e4                 | LR__5473
362e4     62 72 75 6E | 	byte	"brun"
362e8     00          | 	byte	0
362e9                 | LR__5474
362e9     62 72 2E    | 	byte	"br."
362ec     00          | 	byte	0
362ed                 | LR__5475
362ed     63 64       | 	byte	"cd"
362ef     00          | 	byte	0
362f0                 | LR__5476
362f0     63 68 61 6E 
362f4     67 65 66 72 
362f8     65 71       | 	byte	"changefreq"
362fa     00          | 	byte	0
362fb                 | LR__5477
362fb     63 66 2E    | 	byte	"cf."
362fe     00          | 	byte	0
362ff                 | LR__5478
362ff     63 68 61 6E 
36303     67 65 70 61 
36307     6E          | 	byte	"changepan"
36308     00          | 	byte	0
36309                 | LR__5479
36309     63 70 2E    | 	byte	"cp."
3630c     00          | 	byte	0
3630d                 | LR__5480
3630d     63 68 61 6E 
36311     67 65 76 6F 
36315     6C          | 	byte	"changevol"
36316     00          | 	byte	0
36317                 | LR__5481
36317     63 76 2E    | 	byte	"cv."
3631a     00          | 	byte	0
3631b                 | LR__5482
3631b     63 68 61 6E 
3631f     67 65 77 61 
36323     76 65       | 	byte	"changewave"
36325     00          | 	byte	0
36326                 | LR__5483
36326     63 77 2E    | 	byte	"cw."
36329     00          | 	byte	0
3632a                 | LR__5484
3632a     63 69 72 63 
3632e     6C 65       | 	byte	"circle"
36330     00          | 	byte	0
36331                 | LR__5485
36331     63 69 2E    | 	byte	"ci."
36334     00          | 	byte	0
36335                 | LR__5486
36335     63 6C 69 63 
36339     6B          | 	byte	"click"
3633a     00          | 	byte	0
3633b                 | LR__5487
3633b     63 6C 6F 73 
3633f     65          | 	byte	"close"
36340     00          | 	byte	0
36341                 | LR__5488
36341     63 6C 73    | 	byte	"cls"
36344     00          | 	byte	0
36345                 | LR__5489
36345     63 6F 67 73 
36349     74 6F 70    | 	byte	"cogstop"
3634c     00          | 	byte	0
3634d                 | LR__5490
3634d     63 6F 6C 6F 
36351     72          | 	byte	"color"
36352     00          | 	byte	0
36353                 | LR__5491
36353     63 2E       | 	byte	"c."
36355     00          | 	byte	0
36356                 | LR__5492
36356     63 6F 70 79 | 	byte	"copy"
3635a     00          | 	byte	0
3635b                 | LR__5493
3635b     63 75 72 73 
3635f     6F 72       | 	byte	"cursor"
36361     00          | 	byte	0
36362                 | LR__5494
36362     64 61 74 61 | 	byte	"data"
36366     00          | 	byte	0
36367                 | LR__5495
36367     64 65 66 63 
3636b     68 61 72    | 	byte	"defchar"
3636e     00          | 	byte	0
3636f                 | LR__5496
3636f     64 65 66 73 
36373     6E 64       | 	byte	"defsnd"
36375     00          | 	byte	0
36376                 | LR__5497
36376     64 65 66 65 
3637a     6E 76       | 	byte	"defenv"
3637c     00          | 	byte	0
3637d                 | LR__5498
3637d     64 65 66 73 
36381     70 72 69 74 
36385     65          | 	byte	"defsprite"
36386     00          | 	byte	0
36387                 | LR__5499
36387     64 73 2E    | 	byte	"ds."
3638a     00          | 	byte	0
3638b                 | LR__5500
3638b     64 65 67    | 	byte	"deg"
3638e     00          | 	byte	0
3638f                 | LR__5501
3638f     64 65 6C 65 
36393     74 65       | 	byte	"delete"
36395     00          | 	byte	0
36396                 | LR__5502
36396     64 69 6D    | 	byte	"dim"
36399     00          | 	byte	0
3639a                 | LR__5503
3639a     64 69 72    | 	byte	"dir"
3639d     00          | 	byte	0
3639e                 | LR__5504
3639e     64 70 6F 6B 
363a2     65          | 	byte	"dpoke"
363a3     00          | 	byte	0
363a4                 | LR__5505
363a4     64 72 61 77 | 	byte	"draw"
363a8     00          | 	byte	0
363a9                 | LR__5506
363a9     64 72 61 77 
363ad     74 6F       | 	byte	"drawto"
363af     00          | 	byte	0
363b0                 | LR__5507
363b0     64 72 2E    | 	byte	"dr."
363b3     00          | 	byte	0
363b4                 | LR__5508
363b4     65 6C 73 65 | 	byte	"else"
363b8     00          | 	byte	0
363b9                 | LR__5509
363b9     65 6E 64    | 	byte	"end"
363bc     00          | 	byte	0
363bd                 | LR__5510
363bd     65 6E 74 65 
363c1     72          | 	byte	"enter"
363c2     00          | 	byte	0
363c3                 | LR__5511
363c3     65 2E       | 	byte	"e."
363c5     00          | 	byte	0
363c6                 | LR__5512
363c6     66 63 69 72 
363ca     63 6C 65    | 	byte	"fcircle"
363cd     00          | 	byte	0
363ce                 | LR__5513
363ce     66 63 2E    | 	byte	"fc."
363d1     00          | 	byte	0
363d2                 | LR__5514
363d2     66 69 6C 6C | 	byte	"fill"
363d6     00          | 	byte	0
363d7                 | LR__5515
363d7     66 69 2E    | 	byte	"fi."
363da     00          | 	byte	0
363db                 | LR__5516
363db     66 6F 6E 74 | 	byte	"font"
363df     00          | 	byte	0
363e0                 | LR__5517
363e0     66 6F 72    | 	byte	"for"
363e3     00          | 	byte	0
363e4                 | LR__5518
363e4     66 2E       | 	byte	"f."
363e6     00          | 	byte	0
363e7                 | LR__5519
363e7     66 72 61 6D 
363eb     65          | 	byte	"frame"
363ec     00          | 	byte	0
363ed                 | LR__5520
363ed     66 72 2E    | 	byte	"fr."
363f0     00          | 	byte	0
363f1                 | LR__5521
363f1     67 65 74    | 	byte	"get"
363f4     00          | 	byte	0
363f5                 | LR__5522
363f5     67 6F 73 75 
363f9     62          | 	byte	"gosub"
363fa     00          | 	byte	0
363fb                 | LR__5523
363fb     67 6F 74 6F | 	byte	"goto"
363ff     00          | 	byte	0
36400                 | LR__5524
36400     67 2E       | 	byte	"g."
36402     00          | 	byte	0
36403                 | LR__5525
36403     69 66       | 	byte	"if"
36405     00          | 	byte	0
36406                 | LR__5526
36406     69 6E 6B    | 	byte	"ink"
36409     00          | 	byte	0
3640a                 | LR__5527
3640a     69 2E       | 	byte	"i."
3640c     00          | 	byte	0
3640d                 | LR__5528
3640d     69 6E 70 75 
36411     74          | 	byte	"input"
36412     00          | 	byte	0
36413                 | LR__5529
36413     6C 69 73 74 | 	byte	"list"
36417     00          | 	byte	0
36418                 | LR__5530
36418     6C 2E       | 	byte	"l."
3641a     00          | 	byte	0
3641b                 | LR__5531
3641b     6C 6F 61 64 | 	byte	"load"
3641f     00          | 	byte	0
36420                 | LR__5532
36420     6C 6F 2E    | 	byte	"lo."
36423     00          | 	byte	0
36424                 | LR__5533
36424     6C 70 6F 6B 
36428     65          | 	byte	"lpoke"
36429     00          | 	byte	0
3642a                 | LR__5534
3642a     6D 6B 64 69 
3642e     72          | 	byte	"mkdir"
3642f     00          | 	byte	0
36430                 | LR__5535
36430     6D 6F 64 65 | 	byte	"mode"
36434     00          | 	byte	0
36435                 | LR__5536
36435     6D 2E       | 	byte	"m."
36437     00          | 	byte	0
36438                 | LR__5537
36438     6D 6F 75 73 
3643c     65          | 	byte	"mouse"
3643d     00          | 	byte	0
3643e                 | LR__5538
3643e     6E 65 77    | 	byte	"new"
36441     00          | 	byte	0
36442                 | LR__5539
36442     6E 65 78 74 | 	byte	"next"
36446     00          | 	byte	0
36447                 | LR__5540
36447     6E 2E       | 	byte	"n."
36449     00          | 	byte	0
3644a                 | LR__5541
3644a     6F 6E       | 	byte	"on"
3644c     00          | 	byte	0
3644d                 | LR__5542
3644d     6F 70 65 6E | 	byte	"open"
36451     00          | 	byte	0
36452                 | LR__5543
36452     70 61 70 65 
36456     72          | 	byte	"paper"
36457     00          | 	byte	0
36458                 | LR__5544
36458     70 61 2E    | 	byte	"pa."
3645b     00          | 	byte	0
3645c                 | LR__5545
3645c     70 69 6E 66 
36460     6C 6F 61 74 | 	byte	"pinfloat"
36464     00          | 	byte	0
36465                 | LR__5546
36465     70 69 6E 68 
36469     69          | 	byte	"pinhi"
3646a     00          | 	byte	0
3646b                 | LR__5547
3646b     70 69 6E 6C 
3646f     6F          | 	byte	"pinlo"
36470     00          | 	byte	0
36471                 | LR__5548
36471     70 69 6E 73 
36475     74 61 72 74 | 	byte	"pinstart"
36479     00          | 	byte	0
3647a                 | LR__5549
3647a     70 69 6E 74 
3647e     6F 67 67 6C 
36482     65          | 	byte	"pintoggle"
36483     00          | 	byte	0
36484                 | LR__5550
36484     70 69 6E 77 
36488     72 69 74 65 | 	byte	"pinwrite"
3648c     00          | 	byte	0
3648d                 | LR__5551
3648d     70 6C 61 79 | 	byte	"play"
36491     00          | 	byte	0
36492                 | LR__5552
36492     70 2E       | 	byte	"p."
36494     00          | 	byte	0
36495                 | LR__5553
36495     70 6C 6F 74 | 	byte	"plot"
36499     00          | 	byte	0
3649a                 | LR__5554
3649a     70 6C 2E    | 	byte	"pl."
3649d     00          | 	byte	0
3649e                 | LR__5555
3649e     70 6F 6B 65 | 	byte	"poke"
364a2     00          | 	byte	0
364a3                 | LR__5556
364a3     70 6F 70    | 	byte	"pop"
364a6     00          | 	byte	0
364a7                 | LR__5557
364a7     70 6F 73 69 
364ab     74 69 6F 6E | 	byte	"position"
364af     00          | 	byte	0
364b0                 | LR__5558
364b0     70 6F 73 2E | 	byte	"pos."
364b4     00          | 	byte	0
364b5                 | LR__5559
364b5     70 72 69 6E 
364b9     74          | 	byte	"print"
364ba     00          | 	byte	0
364bb                 | LR__5560
364bb     3F          | 	byte	"?"
364bc     00          | 	byte	0
364bd                 | LR__5561
364bd     70 75 74    | 	byte	"put"
364c0     00          | 	byte	0
364c1                 | LR__5562
364c1     72 61 64    | 	byte	"rad"
364c4     00          | 	byte	0
364c5                 | LR__5563
364c5     72 65 61 64 | 	byte	"read"
364c9     00          | 	byte	0
364ca                 | LR__5564
364ca     72 65 6C 65 
364ce     61 73 65    | 	byte	"release"
364d1     00          | 	byte	0
364d2                 | LR__5565
364d2     72 65 6D    | 	byte	"rem"
364d5     00          | 	byte	0
364d6                 | LR__5566
364d6     27          | 	byte	"'"
364d7     00          | 	byte	0
364d8                 | LR__5567
364d8     72 65 73 74 
364dc     6F 72 65    | 	byte	"restore"
364df     00          | 	byte	0
364e0                 | LR__5568
364e0     72 65 73 74 
364e4     6F 72 65 70 
364e8     61 6C 65 74 
364ec     74 65       | 	byte	"restorepalette"
364ee     00          | 	byte	0
364ef                 | LR__5569
364ef     72 70 2E    | 	byte	"rp."
364f2     00          | 	byte	0
364f3                 | LR__5570
364f3     72 65 74 75 
364f7     72 6E       | 	byte	"return"
364f9     00          | 	byte	0
364fa                 | LR__5571
364fa     72 75 6E    | 	byte	"run"
364fd     00          | 	byte	0
364fe                 | LR__5572
364fe     73 61 76 65 | 	byte	"save"
36502     00          | 	byte	0
36503                 | LR__5573
36503     73 2E       | 	byte	"s."
36505     00          | 	byte	0
36506                 | LR__5574
36506     73 65 74 63 
3650a     6F 6C 6F 72 | 	byte	"setcolor"
3650e     00          | 	byte	0
3650f                 | LR__5575
3650f     73 63 2E    | 	byte	"sc."
36512     00          | 	byte	0
36513                 | LR__5576
36513     73 65 74 64 
36517     65 6C 61 79 | 	byte	"setdelay"
3651b     00          | 	byte	0
3651c                 | LR__5577
3651c     73 64 2E    | 	byte	"sd."
3651f     00          | 	byte	0
36520                 | LR__5578
36520     73 65 74 65 
36524     6E 76       | 	byte	"setenv"
36526     00          | 	byte	0
36527                 | LR__5579
36527     73 65 2E    | 	byte	"se."
3652a     00          | 	byte	0
3652b                 | LR__5580
3652b     73 65 74 6C 
3652f     65 6E       | 	byte	"setlen"
36531     00          | 	byte	0
36532                 | LR__5581
36532     73 6C 2E    | 	byte	"sl."
36535     00          | 	byte	0
36536                 | LR__5582
36536     73 65 74 70 
3653a     61 6E       | 	byte	"setpan"
3653c     00          | 	byte	0
3653d                 | LR__5583
3653d     73 70 2E    | 	byte	"sp."
36540     00          | 	byte	0
36541                 | LR__5584
36541     73 65 74 73 
36545     75 73 74 61 
36549     69 6E       | 	byte	"setsustain"
3654b     00          | 	byte	0
3654c                 | LR__5585
3654c     73 73 2E    | 	byte	"ss."
3654f     00          | 	byte	0
36550                 | LR__5586
36550     73 65 74 76 
36554     6F 6C       | 	byte	"setvol"
36556     00          | 	byte	0
36557                 | LR__5587
36557     73 76 2E    | 	byte	"sv."
3655a     00          | 	byte	0
3655b                 | LR__5588
3655b     73 65 74 77 
3655f     61 76 65    | 	byte	"setwave"
36562     00          | 	byte	0
36563                 | LR__5589
36563     73 77 2E    | 	byte	"sw."
36566     00          | 	byte	0
36567                 | LR__5590
36567     73 65 74 77 
3656b     61 76       | 	byte	"setwav"
3656d     00          | 	byte	0
3656e                 | LR__5591
3656e     73 68 75 74 
36572     75 70       | 	byte	"shutup"
36574     00          | 	byte	0
36575                 | LR__5592
36575     73 68 2E    | 	byte	"sh."
36578     00          | 	byte	0
36579                 | LR__5593
36579     73 6F 75 6E 
3657d     64          | 	byte	"sound"
3657e     00          | 	byte	0
3657f                 | LR__5594
3657f     73 6F 2E    | 	byte	"so."
36582     00          | 	byte	0
36583                 | LR__5595
36583     73 70 72 69 
36587     74 65       | 	byte	"sprite"
36589     00          | 	byte	0
3658a                 | LR__5596
3658a     73 70 72 2E | 	byte	"spr."
3658e     00          | 	byte	0
3658f                 | LR__5597
3658f     74 68 65 6E | 	byte	"then"
36593     00          | 	byte	0
36594                 | LR__5598
36594     77 61 69 74 
36598     6D 73       | 	byte	"waitms"
3659a     00          | 	byte	0
3659b                 | LR__5599
3659b     77 2E       | 	byte	"w."
3659d     00          | 	byte	0
3659e                 | LR__5600
3659e     77 61 69 74 
365a2     63 6C 6F 63 
365a6     6B          | 	byte	"waitclock"
365a7     00          | 	byte	0
365a8                 | LR__5601
365a8     77 63 2E    | 	byte	"wc."
365ab     00          | 	byte	0
365ac                 | LR__5602
365ac     77 61 69 74 
365b0     76 62 6C    | 	byte	"waitvbl"
365b3     00          | 	byte	0
365b4                 | LR__5603
365b4     77 76 2E    | 	byte	"wv."
365b7     00          | 	byte	0
365b8                 | LR__5604
365b8     77 72 70 69 
365bc     6E          | 	byte	"wrpin"
365bd     00          | 	byte	0
365be                 | LR__5605
365be     77 78 70 69 
365c2     6E          | 	byte	"wxpin"
365c3     00          | 	byte	0
365c4                 | LR__5606
365c4     77 79 70 69 
365c8     6E          | 	byte	"wypin"
365c9     00          | 	byte	0
365ca                 | LR__5607
365ca     61 62 73    | 	byte	"abs"
365cd     00          | 	byte	0
365ce                 | LR__5608
365ce     61 63 6F 73 | 	byte	"acos"
365d2     00          | 	byte	0
365d3                 | LR__5609
365d3     61 64 72    | 	byte	"adr"
365d6     00          | 	byte	0
365d7                 | LR__5610
365d7     61 64 64 72 | 	byte	"addr"
365db     00          | 	byte	0
365dc                 | LR__5611
365dc     61 73 63    | 	byte	"asc"
365df     00          | 	byte	0
365e0                 | LR__5612
365e0     61 73 69 6E | 	byte	"asin"
365e4     00          | 	byte	0
365e5                 | LR__5613
365e5     61 74 6E    | 	byte	"atn"
365e8     00          | 	byte	0
365e9                 | LR__5614
365e9     62 69 6E 24 | 	byte	"bin$"
365ed     00          | 	byte	0
365ee                 | LR__5615
365ee     63 68 72 24 | 	byte	"chr$"
365f2     00          | 	byte	0
365f3                 | LR__5616
365f3     63 6F 67 69 
365f7     6E 69 74    | 	byte	"coginit"
365fa     00          | 	byte	0
365fb                 | LR__5617
365fb     63 6F 73    | 	byte	"cos"
365fe     00          | 	byte	0
365ff                 | LR__5618
365ff     64 70 65 65 
36603     6B          | 	byte	"dpeek"
36604     00          | 	byte	0
36605                 | LR__5619
36605     66 69 6E 64 
36609     66 69 72 73 
3660d     74          | 	byte	"findfirst"
3660e     00          | 	byte	0
3660f                 | LR__5620
3660f     66 69 6E 64 
36613     6E 65 78 74 | 	byte	"findnext"
36617     00          | 	byte	0
36618                 | LR__5621
36618     66 72 61 6D 
3661c     65 62 75 66 | 	byte	"framebuf"
36620     00          | 	byte	0
36621                 | LR__5622
36621     66 62 2E    | 	byte	"fb."
36624     00          | 	byte	0
36625                 | LR__5623
36625     66 72 65    | 	byte	"fre"
36628     00          | 	byte	0
36629                 | LR__5624
36629     67 63 2E    | 	byte	"gc."
3662c     00          | 	byte	0
3662d                 | LR__5625
3662d     67 65 74 63 
36631     6F 6C 6F 72 | 	byte	"getcolor"
36635     00          | 	byte	0
36636                 | LR__5626
36636     67 65 74 70 
3663a     69 78 65 6C | 	byte	"getpixel"
3663e     00          | 	byte	0
3663f                 | LR__5627
3663f     67 65 2E    | 	byte	"ge."
36642     00          | 	byte	0
36643                 | LR__5628
36643     67 65 74 65 
36647     6E 76 73 75 
3664b     73 74 61 69 
3664f     6E          | 	byte	"getenvsustain"
36650     00          | 	byte	0
36651                 | LR__5629
36651     67 65 74 6E 
36655     6F 74 65 76 
36659     61 6C 75 65 | 	byte	"getnotevalue"
3665d     00          | 	byte	0
3665e                 | LR__5630
3665e     67 65 74 74 
36662     69 6D 65    | 	byte	"gettime"
36665     00          | 	byte	0
36666                 | LR__5631
36666     67 74 2E    | 	byte	"gt."
36669     00          | 	byte	0
3666a                 | LR__5632
3666a     68 65 78 24 | 	byte	"hex$"
3666e     00          | 	byte	0
3666f                 | LR__5633
3666f     69 6E 6B 65 
36673     79 24       | 	byte	"inkey$"
36675     00          | 	byte	0
36676                 | LR__5634
36676     69 6E 74    | 	byte	"int"
36679     00          | 	byte	0
3667a                 | LR__5635
3667a     6C 65 66 74 
3667e     24          | 	byte	"left$"
3667f     00          | 	byte	0
36680                 | LR__5636
36680     6C 65 6E    | 	byte	"len"
36683     00          | 	byte	0
36684                 | LR__5637
36684     6C 6F 67    | 	byte	"log"
36687     00          | 	byte	0
36688                 | LR__5638
36688     6C 70 65 65 
3668c     6B          | 	byte	"lpeek"
3668d     00          | 	byte	0
3668e                 | LR__5639
3668e     6D 65 6D 74 
36692     6F 70       | 	byte	"memtop"
36694     00          | 	byte	0
36695                 | LR__5640
36695     6D 65 6D 6C 
36699     6F          | 	byte	"memlo"
3669a     00          | 	byte	0
3669b                 | LR__5641
3669b     6D 69 64 24 | 	byte	"mid$"
3669f     00          | 	byte	0
366a0                 | LR__5642
366a0     6D 6F 75 73 
366a4     65 6B       | 	byte	"mousek"
366a6     00          | 	byte	0
366a7                 | LR__5643
366a7     6D 6F 75 73 
366ab     65 77       | 	byte	"mousew"
366ad     00          | 	byte	0
366ae                 | LR__5644
366ae     6D 6F 75 73 
366b2     65 78       | 	byte	"mousex"
366b4     00          | 	byte	0
366b5                 | LR__5645
366b5     6D 6F 75 73 
366b9     65 79       | 	byte	"mousey"
366bb     00          | 	byte	0
366bc                 | LR__5646
366bc     70 61 64 73 | 	byte	"pads"
366c0     00          | 	byte	0
366c1                 | LR__5647
366c1     70 61 64 77 | 	byte	"padw"
366c5     00          | 	byte	0
366c6                 | LR__5648
366c6     70 61 64 78 | 	byte	"padx"
366ca     00          | 	byte	0
366cb                 | LR__5649
366cb     70 61 64 79 | 	byte	"pady"
366cf     00          | 	byte	0
366d0                 | LR__5650
366d0     70 61 64 7A | 	byte	"padz"
366d4     00          | 	byte	0
366d5                 | LR__5651
366d5     70 61 64 72 
366d9     78          | 	byte	"padrx"
366da     00          | 	byte	0
366db                 | LR__5652
366db     70 61 64 72 
366df     79          | 	byte	"padry"
366e0     00          | 	byte	0
366e1                 | LR__5653
366e1     70 61 64 72 
366e5     7A          | 	byte	"padrz"
366e6     00          | 	byte	0
366e7                 | LR__5654
366e7     70 61 64 68 | 	byte	"padh"
366eb     00          | 	byte	0
366ec                 | LR__5655
366ec     70 65 65 6B | 	byte	"peek"
366f0     00          | 	byte	0
366f1                 | LR__5656
366f1     70 69 6E 72 
366f5     65 61 64    | 	byte	"pinread"
366f8     00          | 	byte	0
366f9                 | LR__5657
366f9     72 64 70 69 
366fd     6E          | 	byte	"rdpin"
366fe     00          | 	byte	0
366ff                 | LR__5658
366ff     72 69 67 68 
36703     74 24       | 	byte	"right$"
36705     00          | 	byte	0
36706                 | LR__5659
36706     72 71 70 69 
3670a     6E          | 	byte	"rqpin"
3670b     00          | 	byte	0
3670c                 | LR__5660
3670c     72 6F 75 6E 
36710     64          | 	byte	"round"
36711     00          | 	byte	0
36712                 | LR__5661
36712     72 6E 64    | 	byte	"rnd"
36715     00          | 	byte	0
36716                 | LR__5662
36716     73 69 6E    | 	byte	"sin"
36719     00          | 	byte	0
3671a                 | LR__5663
3671a     73 71 72    | 	byte	"sqr"
3671d     00          | 	byte	0
3671e                 | LR__5664
3671e     73 74 69 63 
36722     6B          | 	byte	"stick"
36723     00          | 	byte	0
36724                 | LR__5665
36724     73 74 72 69 
36728     67          | 	byte	"strig"
36729     00          | 	byte	0
3672a                 | LR__5666
3672a     73 74 72 24 | 	byte	"str$"
3672e     00          | 	byte	0
3672f                 | LR__5667
3672f     74 61 6E    | 	byte	"tan"
36732     00          | 	byte	0
36733                 | LR__5668
36733     76 61 6C    | 	byte	"val"
36736     00          | 	byte	0
36737                 | LR__5669
36737     76 61 72 70 
3673b     74 72       | 	byte	"varptr"
3673d     00          | 	byte	0
3673e                 | LR__5670
3673e     61          | 	byte	"a"
3673f     00          | 	byte	0
36740                 | LR__5671
36740     7A          | 	byte	"z"
36741     00          | 	byte	0
36742                 | LR__5672
36742     5F          | 	byte	"_"
36743     00          | 	byte	0
36744                 | LR__5673
36744     61          | 	byte	"a"
36745     00          | 	byte	0
36746                 | LR__5674
36746     7A          | 	byte	"z"
36747     00          | 	byte	0
36748                 | LR__5675
36748     30          | 	byte	"0"
36749     00          | 	byte	0
3674a                 | LR__5676
3674a     39          | 	byte	"9"
3674b     00          | 	byte	0
3674c                 | LR__5677
3674c     5F          | 	byte	"_"
3674d     00          | 	byte	0
3674e                 | LR__5678
3674e     2E          | 	byte	"."
3674f     00          | 	byte	0
36750                 | LR__5679
36750     61          | 	byte	"a"
36751     00          | 	byte	0
36752                 | LR__5680
36752     7A          | 	byte	"z"
36753     00          | 	byte	0
36754                 | LR__5681
36754     30          | 	byte	"0"
36755     00          | 	byte	0
36756                 | LR__5682
36756     39          | 	byte	"9"
36757     00          | 	byte	0
36758                 | LR__5683
36758     5F          | 	byte	"_"
36759     00          | 	byte	0
3675a                 | LR__5684
3675a     24          | 	byte	"$"
3675b     00          | 	byte	0
3675c                 | LR__5685
3675c     25          | 	byte	"%"
3675d     00          | 	byte	0
3675e                 | LR__5686
3675e     21          | 	byte	"!"
3675f     00          | 	byte	0
36760                 | LR__5687
36760     30          | 	byte	"0"
36761     00          | 	byte	0
36762                 | LR__5688
36762     39          | 	byte	"9"
36763     00          | 	byte	0
36764                 | LR__5689
36764     2E          | 	byte	"."
36765     00          | 	byte	0
36766                 | LR__5690
36766     24          | 	byte	"$"
36767     00          | 	byte	0
36768                 | LR__5691
36768     25          | 	byte	"%"
36769     00          | 	byte	0
3676a                 | LR__5692
3676a     2D          | 	byte	"-"
3676b     00          | 	byte	0
3676c                 | LR__5693
3676c     2E          | 	byte	"."
3676d     00          | 	byte	0
3676e                 | LR__5694
3676e     24          | 	byte	"$"
3676f     00          | 	byte	0
36770                 | LR__5695
36770     25          | 	byte	"%"
36771     00          | 	byte	0
36772                 | LR__5696
36772     30          | 	byte	"0"
36773     00          | 	byte	0
36774                 | LR__5697
36774     39          | 	byte	"9"
36775     00          | 	byte	0
36776                 | LR__5698
36776     5F          | 	byte	"_"
36777     00          | 	byte	0
36778                 | LR__5699
36778     2E          | 	byte	"."
36779     00          | 	byte	0
3677a                 | LR__5700
3677a     45          | 	byte	"E"
3677b     00          | 	byte	0
3677c                 | LR__5701
3677c     65          | 	byte	"e"
3677d     00          | 	byte	0
3677e                 | LR__5702
3677e     2D          | 	byte	"-"
3677f     00          | 	byte	0
36780                 | LR__5703
36780     61          | 	byte	"a"
36781     00          | 	byte	0
36782                 | LR__5704
36782     66          | 	byte	"f"
36783     00          | 	byte	0
36784                 | LR__5705
36784     30          | 	byte	"0"
36785     00          | 	byte	0
36786                 | LR__5706
36786     31          | 	byte	"1"
36787     00          | 	byte	0
36788                 | LR__5707
36788     5F          | 	byte	"_"
36789     00          | 	byte	0
3678a                 | LR__5708
3678a     2D          | 	byte	"-"
3678b     00          | 	byte	0
3678c                 | LR__5709
3678c     65          | 	byte	"e"
3678d     00          | 	byte	0
3678e                 | LR__5710
3678e     2E          | 	byte	"."
3678f     00          | 	byte	0
36790                 | LR__5711
36790     45          | 	byte	"E"
36791     00          | 	byte	0
36792                 | LR__5712
36792     65          | 	byte	"e"
36793     00          | 	byte	0
36794                 | LR__5713
36794     30          | 	byte	"0"
36795     00          | 	byte	0
36796                 | LR__5714
36796     39          | 	byte	"9"
36797     00          | 	byte	0
36798                 | LR__5715
36798     24          | 	byte	"$"
36799     00          | 	byte	0
3679a                 | LR__5716
3679a     25          | 	byte	"%"
3679b     00          | 	byte	0
3679c                 | LR__5717
3679c     2D          | 	byte	"-"
3679d     00          | 	byte	0
3679e                 | LR__5718
3679e     24          | 	byte	"$"
3679f     00          | 	byte	0
367a0                 | LR__5719
367a0     25          | 	byte	"%"
367a1     00          | 	byte	0
367a2                 | LR__5720
367a2     30          | 	byte	"0"
367a3     00          | 	byte	0
367a4                 | LR__5721
367a4     39          | 	byte	"9"
367a5     00          | 	byte	0
367a6                 | LR__5722
367a6     5F          | 	byte	"_"
367a7     00          | 	byte	0
367a8                 | LR__5723
367a8     30          | 	byte	"0"
367a9     00          | 	byte	0
367aa                 | LR__5724
367aa     39          | 	byte	"9"
367ab     00          | 	byte	0
367ac                 | LR__5725
367ac     61          | 	byte	"a"
367ad     00          | 	byte	0
367ae                 | LR__5726
367ae     66          | 	byte	"f"
367af     00          | 	byte	0
367b0                 | LR__5727
367b0     5F          | 	byte	"_"
367b1     00          | 	byte	0
367b2                 | LR__5728
367b2     30          | 	byte	"0"
367b3     00          | 	byte	0
367b4                 | LR__5729
367b4     31          | 	byte	"1"
367b5     00          | 	byte	0
367b6                 | LR__5730
367b6     5F          | 	byte	"_"
367b7     00          | 	byte	0
367b8                 | LR__5731
367b8     30          | 	byte	"0"
367b9     00          | 	byte	0
367ba                 | LR__5732
367ba     39          | 	byte	"9"
367bb     00          | 	byte	0
367bc                 | LR__5733
367bc     5F          | 	byte	"_"
367bd     00          | 	byte	0
367be                 | LR__5734
367be     22          | 	byte	34
367bf     00          | 	byte	0
367c0                 | LR__5735
367c0     22          | 	byte	34
367c1     00          | 	byte	0
367c2                 | LR__5736
367c2     44 69 6D 3A 
367c6     20 61 74 20 
367ca     6C 69 6E 65 
367ce     20          | 	byte	"Dim: at line "
367cf     00          | 	byte	0
367d0                 | LR__5737
367d0     3A 20 77 61 
367d4     72 6E 69 6E 
367d8     67 3A 20 74 
367dc     68 65 20 76 
367e0     61 72 69 61 
367e4     62 6C 65 20 
367e8     65 78 69 73 
367ec     74 65 64 2E | 	byte	": warning: the variable existed."
367f0     00          | 	byte	0
367f1                 | LR__5738
367f1     28          | 	byte	"("
367f2     00          | 	byte	0
367f3                 | LR__5739
367f3     61 73       | 	byte	"as"
367f5     00          | 	byte	0
367f6                 | LR__5740
367f6     61 73       | 	byte	"as"
367f8     00          | 	byte	0
367f9                 | LR__5741
367f9     2C          | 	byte	","
367fa     00          | 	byte	0
367fb                 | LR__5742
367fb     29          | 	byte	")"
367fc     00          | 	byte	0
367fd                 | LR__5743
367fd     29          | 	byte	")"
367fe     00          | 	byte	0
367ff                 | LR__5744
367ff     61 73       | 	byte	"as"
36801     00          | 	byte	0
36802                 | LR__5745
36802     62 79 74 65 | 	byte	"byte"
36806     00          | 	byte	0
36807                 | LR__5746
36807     75 62 79 74 
3680b     65          | 	byte	"ubyte"
3680c     00          | 	byte	0
3680d                 | LR__5747
3680d     73 68 6F 72 
36811     74          | 	byte	"short"
36812     00          | 	byte	0
36813                 | LR__5748
36813     75 73 68 6F 
36817     72 74       | 	byte	"ushort"
36819     00          | 	byte	0
3681a                 | LR__5749
3681a     6C 6F 6E 67 | 	byte	"long"
3681e     00          | 	byte	0
3681f                 | LR__5750
3681f     69 6E 74 65 
36823     67 65 72    | 	byte	"integer"
36826     00          | 	byte	0
36827                 | LR__5751
36827     75 6C 6F 6E 
3682b     67          | 	byte	"ulong"
3682c     00          | 	byte	0
3682d                 | LR__5752
3682d     69 6E 74 36 
36831     34          | 	byte	"int64"
36832     00          | 	byte	0
36833                 | LR__5753
36833     75 69 6E 74 
36837     36 34       | 	byte	"uint64"
36839     00          | 	byte	0
3683a                 | LR__5754
3683a     73 69 6E 67 
3683e     6C 65       | 	byte	"single"
36840     00          | 	byte	0
36841                 | LR__5755
36841     64 6F 75 62 
36845     6C 65       | 	byte	"double"
36847     00          | 	byte	0
36848                 | LR__5756
36848     73 74 72 69 
3684c     6E 67       | 	byte	"string"
3684e     00          | 	byte	0
3684f                 | LR__5757
3684f     74 6F       | 	byte	"to"
36851     00          | 	byte	0
36852                 | LR__5758
36852     73 74 65 70 | 	byte	"step"
36856     00          | 	byte	0
36857                 | LR__5759
36857     73 2E       | 	byte	"s."
36859     00          | 	byte	0
3685a                 | LR__5760
3685a     73 2E       | 	byte	"s."
3685c     00          | 	byte	0
3685d                 | LR__5761
3685d     67 6F 74 6F | 	byte	"goto"
36861     00          | 	byte	0
36862                 | LR__5762
36862     67 6F 73 75 
36866     62          | 	byte	"gosub"
36867     00          | 	byte	0
36868                 | LR__5763
36868     24          | 	byte	"$"
36869     00          | 	byte	0
3686a                 | LR__5764
3686a     26 68       | 	byte	"&h"
3686c     00          | 	byte	0
3686d                 | LR__5765
3686d     25          | 	byte	"%"
3686e     00          | 	byte	0
3686f                 | LR__5766
3686f     26 62       | 	byte	"&b"
36871     00          | 	byte	0
36872                 | LR__5767
36872                 | 	byte	
36872     00          | 	byte	0
36873                 | LR__5768
36873     61 63 6F 73 
36877     3A 20       | 	byte	"acos: "
36879     00          | 	byte	0
3687a                 | LR__5769
3687a     61 73 63 3A 
3687e     20          | 	byte	"asc: "
3687f     00          | 	byte	0
36880                 | LR__5770
36880     61 73 63 3A 
36884     20          | 	byte	"asc: "
36885     00          | 	byte	0
36886                 | LR__5771
36886     61 73 69 6E 
3688a     3A 20       | 	byte	"asin: "
3688c     00          | 	byte	0
3688d                 | LR__5772
3688d     61 74 6E 3A 
36891     20          | 	byte	"atn: "
36892     00          | 	byte	0
36893                 | LR__5773
36893     62 6C 69 74 
36897     3A 20       | 	byte	"blit: "
36899     00          | 	byte	0
3689a                 | LR__5774
3689a     62 69 6E 24 
3689e     3A 20       | 	byte	"bin$: "
368a0     00          | 	byte	0
368a1                 | LR__5775
368a1     2F          | 	byte	"/"
368a2     00          | 	byte	0
368a3                 | LR__5776
368a3     2F 73 64 2F 
368a7     62 69 6E 2F | 	byte	"/sd/bin/"
368ab     00          | 	byte	0
368ac                 | LR__5777
368ac     53 79 73 74 
368b0     65 6D 20 65 
368b4     72 72 6F 72 
368b8     20          | 	byte	"System error "
368b9     00          | 	byte	0
368ba                 | LR__5778
368ba     3A 20       | 	byte	": "
368bc     00          | 	byte	0
368bd                 | LR__5779
368bd     2A          | 	byte	"*"
368be     00          | 	byte	0
368bf                 | LR__5780
368bf     2E 2E       | 	byte	".."
368c1     00          | 	byte	0
368c2                 | LR__5781
368c2     2F          | 	byte	"/"
368c3     00          | 	byte	0
368c4                 | LR__5782
368c4     2F          | 	byte	"/"
368c5     00          | 	byte	0
368c6                 | LR__5783
368c6     53 79 73 74 
368ca     65 6D 20 65 
368ce     72 72 6F 72 
368d2     20          | 	byte	"System error "
368d3     00          | 	byte	0
368d4                 | LR__5784
368d4     3A 20       | 	byte	": "
368d6     00          | 	byte	0
368d7                 | LR__5785
368d7     43 75 72 72 
368db     65 6E 74 20 
368df     64 69 72 65 
368e3     63 74 6F 72 
368e7     79 3A 20    | 	byte	"Current directory: "
368ea     00          | 	byte	0
368eb                 | LR__5786
368eb     2F          | 	byte	"/"
368ec     00          | 	byte	0
368ed                 | LR__5787
368ed     53 79 73 74 
368f1     65 6D 20 65 
368f5     72 72 6F 72 
368f9     20          | 	byte	"System error "
368fa     00          | 	byte	0
368fb                 | LR__5788
368fb     3A 20       | 	byte	": "
368fd     00          | 	byte	0
368fe                 | LR__5789
368fe     43 75 72 72 
36902     65 6E 74 20 
36906     64 69 72 65 
3690a     63 74 6F 72 
3690e     79 3A 20    | 	byte	"Current directory: "
36911     00          | 	byte	0
36912                 | LR__5790
36912     2F          | 	byte	"/"
36913     00          | 	byte	0
36914                 | LR__5791
36914     2F          | 	byte	"/"
36915     00          | 	byte	0
36916                 | LR__5792
36916     2F          | 	byte	"/"
36917     00          | 	byte	0
36918                 | LR__5793
36918     53 79 73 74 
3691c     65 6D 20 65 
36920     72 72 6F 72 
36924     20          | 	byte	"System error "
36925     00          | 	byte	0
36926                 | LR__5794
36926     3A 20       | 	byte	": "
36928     00          | 	byte	0
36929                 | LR__5795
36929     43 75 72 72 
3692d     65 6E 74 20 
36931     64 69 72 65 
36935     63 74 6F 72 
36939     79 3A 20    | 	byte	"Current directory: "
3693c     00          | 	byte	0
3693d                 | LR__5796
3693d     63 68 72 24 
36941     3A 20       | 	byte	"chr$: "
36943     00          | 	byte	0
36944                 | LR__5797
36944     63 68 61 6E 
36948     6E 65 6C 23 
3694c     20 65 78 70 
36950     65 63 74 65 
36954     64          | 	byte	"channel# expected"
36955     00          | 	byte	0
36956                 | LR__5798
36956     63 6F 67 69 
3695a     6E 69 74 3A 
3695e     20          | 	byte	"coginit: "
3695f     00          | 	byte	0
36960                 | LR__5799
36960     53 79 73 74 
36964     65 6D 20 65 
36968     72 72 6F 72 
3696c     20 2D 20    | 	byte	"System error - "
3696f     00          | 	byte	0
36970                 | LR__5800
36970     20 69 6E 20 
36974     6C 69 6E 65 
36978     20          | 	byte	" in line "
36979     00          | 	byte	0
3697a                 | LR__5801
3697a     3A 20       | 	byte	": "
3697c     00          | 	byte	0
3697d                 | LR__5802
3697d     2C 20 66 69 
36981     6C 65 20 6E 
36985     61 6D 65 3A 
36989     20          | 	byte	", file name: "
3698a     00          | 	byte	0
3698b                 | LR__5803
3698b     53 79 73 74 
3698f     65 6D 20 65 
36993     72 72 6F 72 
36997     20 2D 20    | 	byte	"System error - "
3699a     00          | 	byte	0
3699b                 | LR__5804
3699b     20 69 6E 20 
3699f     6C 69 6E 65 
369a3     20          | 	byte	" in line "
369a4     00          | 	byte	0
369a5                 | LR__5805
369a5     3A 20       | 	byte	": "
369a7     00          | 	byte	0
369a8                 | LR__5806
369a8     2C 20 66 69 
369ac     6C 65 20 6E 
369b0     61 6D 65 3A 
369b4     20          | 	byte	", file name: "
369b5     00          | 	byte	0
369b6                 | LR__5807
369b6     63 6F 73 3A 
369ba     20          | 	byte	"cos: "
369bb     00          | 	byte	0
369bc                 | LR__5808
369bc                 | 	byte	
369bc     00          | 	byte	0
369bd                 | LR__5809
369bd                 | 	byte	
369bd     00          | 	byte	0
369be                 | LR__5810
369be     2F 73 64 2F 
369c2     6D 65 64 69 
369c6     61 2F 68 2F | 	byte	"/sd/media/h/"
369ca     00          | 	byte	0
369cb                 | LR__5811
369cb     53 79 73 74 
369cf     65 6D 20 65 
369d3     72 72 6F 72 
369d7     20          | 	byte	"System error "
369d8     00          | 	byte	0
369d9                 | LR__5812
369d9     3A 20       | 	byte	": "
369db     00          | 	byte	0
369dc                 | LR__5813
369dc                 | 	byte	
369dc     00          | 	byte	0
369dd                 | LR__5814
369dd                 | 	byte	
369dd     00          | 	byte	0
369de                 | LR__5815
369de     2F 73 64 2F 
369e2     6D 65 64 69 
369e6     61 2F 73 2F | 	byte	"/sd/media/s/"
369ea     00          | 	byte	0
369eb                 | LR__5816
369eb     53 79 73 74 
369ef     65 6D 20 65 
369f3     72 72 6F 72 
369f7     20          | 	byte	"System error "
369f8     00          | 	byte	0
369f9                 | LR__5817
369f9     3A 20       | 	byte	": "
369fb     00          | 	byte	0
369fc                 | LR__5818
369fc     2F          | 	byte	"/"
369fd     00          | 	byte	0
369fe                 | LR__5819
369fe     2F          | 	byte	"/"
369ff     00          | 	byte	0
36a00                 | LR__5820
36a00     2F          | 	byte	"/"
36a01     00          | 	byte	0
36a02                 | LR__5821
36a02     43 61 6E 6E 
36a06     6F 74 20 64 
36a0a     65 6C 65 74 
36a0e     65 20 66 69 
36a12     6C 65 20 6F 
36a16     72 20 66 69 
36a1a     6C 65 20 64 
36a1e     6F 65 73 6E 
36a22     27 74 20 65 
36a26     78 69 73 74 
36a2a     3A 20 73 79 
36a2e     73 74 65 6D 
36a32     20 65 72 72 
36a36     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
36a39     00          | 	byte	0
36a3a                 | LR__5822
36a3a     43 75 72 72 
36a3e     65 6E 74 20 
36a42     64 69 72 65 
36a46     63 74 6F 72 
36a4a     79 3A 20    | 	byte	"Current directory: "
36a4d     00          | 	byte	0
36a4e                 | LR__5823
36a4e                 | 	byte	
36a4e     00          | 	byte	0
36a4f                 | LR__5824
36a4f     2A          | 	byte	"*"
36a50     00          | 	byte	0
36a51                 | LR__5825
36a51                 | 	byte	
36a51     00          | 	byte	0
36a52                 | LR__5826
36a52     5B 64 69 72 
36a56     5D 20       | 	byte	"[dir] "
36a58     00          | 	byte	0
36a59                 | LR__5827
36a59     4D 6F 72 65 
36a5d     20 74 68 61 
36a61     6E 20 31 32 
36a65     38 20 65 6E 
36a69     74 72 69 65 
36a6d     73 20 66 6F 
36a71     75 6E 64 3A 
36a75     20 63 6C 65 
36a79     61 6E 20 79 
36a7d     6F 75 72 20 
36a81     64 69 72 65 
36a85     63 74 6F 72 
36a89     79          | 	byte	"More than 128 entries found: clean your directory"
36a8a     00          | 	byte	0
36a8b                 | LR__5828
36a8b     2A          | 	byte	"*"
36a8c     00          | 	byte	0
36a8d                 | LR__5829
36a8d                 | 	byte	
36a8d     00          | 	byte	0
36a8e                 | LR__5830
36a8e     4D 6F 72 65 
36a92     20 74 68 61 
36a96     6E 20 31 32 
36a9a     38 20 65 6E 
36a9e     74 72 69 65 
36aa2     73 20 66 6F 
36aa6     75 6E 64 3A 
36aaa     20 63 6C 65 
36aae     61 6E 20 79 
36ab2     6F 75 72 20 
36ab6     64 69 72 65 
36aba     63 74 6F 72 
36abe     79          | 	byte	"More than 128 entries found: clean your directory"
36abf     00          | 	byte	0
36ac0                 | LR__5831
36ac0     45 72 72 6F 
36ac4     72 20       | 	byte	"Error "
36ac6     00          | 	byte	0
36ac7                 | LR__5832
36ac7     3A 20       | 	byte	": "
36ac9     00          | 	byte	0
36aca                 | LR__5833
36aca     66 69 6E 64 
36ace     66 69 72 73 
36ad2     74 3A 20    | 	byte	"findfirst: "
36ad5     00          | 	byte	0
36ad6                 | LR__5834
36ad6     66 69 6E 64 
36ada     66 69 72 73 
36ade     74 3A 20    | 	byte	"findfirst: "
36ae1     00          | 	byte	0
36ae2                 | LR__5835
36ae2     66 69 6E 64 
36ae6     66 69 72 73 
36aea     74 3A 20    | 	byte	"findfirst: "
36aed     00          | 	byte	0
36aee                 | LR__5836
36aee                 | 	byte	
36aee     00          | 	byte	0
36aef                 | LR__5837
36aef     66 69 6E 64 
36af3     66 69 72 73 
36af7     74 3A 20    | 	byte	"findfirst: "
36afa     00          | 	byte	0
36afb                 | LR__5838
36afb                 | 	byte	
36afb     00          | 	byte	0
36afc                 | LR__5839
36afc     64 69 72    | 	byte	"dir"
36aff     00          | 	byte	0
36b00                 | LR__5840
36b00     66 69 6E 64 
36b04     6E 65 78 74 
36b08     3A 20       | 	byte	"findnext: "
36b0a     00          | 	byte	0
36b0b                 | LR__5841
36b0b     67 65 74 63 
36b0f     6F 6C 6F 72 
36b13     20          | 	byte	"getcolor "
36b14     00          | 	byte	0
36b15                 | LR__5842
36b15     67 65 74 65 
36b19     6E 76 73 75 
36b1d     73 74 61 69 
36b21     6E 3A 20    | 	byte	"getenvsustain: "
36b24     00          | 	byte	0
36b25                 | LR__5843
36b25     67 65 74 70 
36b29     69 78 65 6C 
36b2d     3A 20       | 	byte	"getpixel: "
36b2f     00          | 	byte	0
36b30                 | LR__5844
36b30     68 65 78 24 
36b34     3A 20       | 	byte	"hex$: "
36b36     00          | 	byte	0
36b37                 | LR__5845
36b37                 | 	byte	
36b37     00          | 	byte	0
36b38                 | LR__5846
36b38     49 6E 20 69 
36b3c     6E 70 75 74 
36b40     3A 20       | 	byte	"In input: "
36b42     00          | 	byte	0
36b43                 | LR__5847
36b43     2C          | 	byte	","
36b44     00          | 	byte	0
36b45                 | LR__5848
36b45                 | 	byte	
36b45     00          | 	byte	0
36b46                 | LR__5849
36b46                 | 	byte	
36b46     00          | 	byte	0
36b47                 | LR__5850
36b47     6C 65 66 74 
36b4b     24 3A 20    | 	byte	"left$: "
36b4e     00          | 	byte	0
36b4f                 | LR__5851
36b4f     6C 65 66 74 
36b53     24 3A 20    | 	byte	"left$: "
36b56     00          | 	byte	0
36b57                 | LR__5852
36b57     6C 65 6E 3A 
36b5b     20          | 	byte	"len: "
36b5c     00          | 	byte	0
36b5d                 | LR__5853
36b5d     6C 65 6E 3A 
36b61     20          | 	byte	"len: "
36b62     00          | 	byte	0
36b63                 | LR__5854
36b63                 | 	byte	
36b63     00          | 	byte	0
36b64                 | LR__5855
36b64     2F          | 	byte	"/"
36b65     00          | 	byte	0
36b66                 | LR__5856
36b66     2F          | 	byte	"/"
36b67     00          | 	byte	0
36b68                 | LR__5857
36b68     2E 62 61 73 | 	byte	".bas"
36b6c     00          | 	byte	0
36b6d                 | LR__5858
36b6d     53 79 73 74 
36b71     65 6D 20 65 
36b75     72 72 6F 72 
36b79     20          | 	byte	"System error "
36b7a     00          | 	byte	0
36b7b                 | LR__5859
36b7b     3A 20       | 	byte	": "
36b7d     00          | 	byte	0
36b7e                 | LR__5860
36b7e     2E 62 61 73 | 	byte	".bas"
36b82     00          | 	byte	0
36b83                 | LR__5861
36b83     2F          | 	byte	"/"
36b84     00          | 	byte	0
36b85                 | LR__5862
36b85                 | 	byte	
36b85     00          | 	byte	0
36b86                 | LR__5863
36b86     4C 6F 61 64 
36b8a     65 64 20    | 	byte	"Loaded "
36b8d     00          | 	byte	0
36b8e                 | LR__5864
36b8e     2F          | 	byte	"/"
36b8f     00          | 	byte	0
36b90                 | LR__5865
36b90     6C 6F 67 3A 
36b94     20          | 	byte	"log: "
36b95     00          | 	byte	0
36b96                 | LR__5866
36b96     6D 69 64 24 
36b9a     3A 20       | 	byte	"mid$: "
36b9c     00          | 	byte	0
36b9d                 | LR__5867
36b9d     6D 69 64 24 
36ba1     3A 20       | 	byte	"mid$: "
36ba3     00          | 	byte	0
36ba4                 | LR__5868
36ba4     43 61 6E 6E 
36ba8     6F 74 20 63 
36bac     72 65 61 74 
36bb0     65 20 61 20 
36bb4     64 69 72 65 
36bb8     63 74 6F 72 
36bbc     79 3A 20 73 
36bc0     79 73 74 65 
36bc4     6D 20 65 72 
36bc8     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
36bcc     00          | 	byte	0
36bcd                 | LR__5869
36bcd     20 42 41 53 
36bd1     49 43 20 62 
36bd5     79 74 65 73 
36bd9     20 66 72 65 
36bdd     65          | 	byte	" BASIC bytes free"
36bde     00          | 	byte	0
36bdf                 | LR__5870
36bdf                 | 	byte	
36bdf     00          | 	byte	0
36be0                 | LR__5871
36be0                 | 	byte	
36be0     00          | 	byte	0
36be1                 | LR__5872
36be1                 | 	byte	
36be1     00          | 	byte	0
36be2                 | LR__5873
36be2     6E 6F 6E 61 
36be6     6D 65 2E 62 
36bea     61 73       | 	byte	"noname.bas"
36bec     00          | 	byte	0
36bed                 | LR__5874
36bed     66 69 6C 65 
36bf1     6E 61 6D 65 
36bf5     20 65 78 70 
36bf9     65 63 74 65 
36bfd     64          | 	byte	"filename expected"
36bfe     00          | 	byte	0
36bff                 | LR__5875
36bff     72 65 61 64 | 	byte	"read"
36c03     00          | 	byte	0
36c04                 | LR__5876
36c04     77 72 69 74 
36c08     65          | 	byte	"write"
36c09     00          | 	byte	0
36c0a                 | LR__5877
36c0a     61 70 70 65 
36c0e     6E 64       | 	byte	"append"
36c10     00          | 	byte	0
36c11                 | LR__5878
36c11     63 68 61 6E 
36c15     6E 65 6C 23 
36c19     20 65 78 70 
36c1d     65 63 74 65 
36c21     64          | 	byte	"channel# expected"
36c22     00          | 	byte	0
36c23                 | LR__5879
36c23     4F 70 65 6E 
36c27     3A 20 69 6E 
36c2b     76 61 6C 69 
36c2f     64 20 6D 6F 
36c33     64 65       | 	byte	"Open: invalid mode"
36c35     00          | 	byte	0
36c36                 | LR__5880
36c36     70 61 64 72 
36c3a     78 3A 20    | 	byte	"padrx: "
36c3d     00          | 	byte	0
36c3e                 | LR__5881
36c3e     70 61 64 72 
36c42     79 3A 20    | 	byte	"padry: "
36c45     00          | 	byte	0
36c46                 | LR__5882
36c46     70 61 64 72 
36c4a     7A 3A 20    | 	byte	"padrz: "
36c4d     00          | 	byte	0
36c4e                 | LR__5883
36c4e     70 61 64 73 
36c52     3A 20       | 	byte	"pads: "
36c54     00          | 	byte	0
36c55                 | LR__5884
36c55     70 61 64 77 
36c59     3A 20       | 	byte	"padw: "
36c5b     00          | 	byte	0
36c5c                 | LR__5885
36c5c     70 61 64 78 
36c60     3A 20       | 	byte	"padx: "
36c62     00          | 	byte	0
36c63                 | LR__5886
36c63     70 61 64 79 
36c67     3A 20       | 	byte	"pady: "
36c69     00          | 	byte	0
36c6a                 | LR__5887
36c6a     70 61 64 7A 
36c6e     3A 20       | 	byte	"padz: "
36c70     00          | 	byte	0
36c71                 | LR__5888
36c71     50 72 69 6E 
36c75     74 20 74 6F 
36c79     20 63 68 61 
36c7d     6E 6E 65 6C 
36c81     20 28 6E 6F 
36c85     74 20 79 65 
36c89     74 20 69 6D 
36c8d     70 6C 65 6D 
36c91     65 6E 74 65 
36c95     64 29       | 	byte	"Print to channel (not yet implemented)"
36c97     00          | 	byte	0
36c98                 | LR__5889
36c98                 | 	byte	
36c98     00          | 	byte	0
36c99                 | LR__5890
36c99     64 61 74 61 | 	byte	"data"
36c9d     00          | 	byte	0
36c9e                 | LR__5891
36c9e                 | 	byte	
36c9e     00          | 	byte	0
36c9f                 | LR__5892
36c9f     49 6E 20 72 
36ca3     65 61 64 3A 
36ca7     20          | 	byte	"In read: "
36ca8     00          | 	byte	0
36ca9                 | LR__5893
36ca9                 | 	byte	
36ca9     00          | 	byte	0
36caa                 | LR__5894
36caa                 | 	byte	
36caa     00          | 	byte	0
36cab                 | LR__5895
36cab     27          | 	byte	"'"
36cac     00          | 	byte	0
36cad                 | LR__5896
36cad     2C          | 	byte	","
36cae     00          | 	byte	0
36caf                 | LR__5897
36caf                 | 	byte	
36caf     00          | 	byte	0
36cb0                 | LR__5898
36cb0                 | 	byte	
36cb0     00          | 	byte	0
36cb1                 | LR__5899
36cb1                 | 	byte	
36cb1     00          | 	byte	0
36cb2                 | LR__5900
36cb2                 | 	byte	
36cb2     00          | 	byte	0
36cb3                 | LR__5901
36cb3                 | 	byte	
36cb3     00          | 	byte	0
36cb4                 | LR__5902
36cb4     72 69 67 68 
36cb8     74 24 3A 20 | 	byte	"right$: "
36cbc     00          | 	byte	0
36cbd                 | LR__5903
36cbd     72 69 67 68 
36cc1     74 24 3A 20 | 	byte	"right$: "
36cc5     00          | 	byte	0
36cc6                 | LR__5904
36cc6     72 6E 64 3A 
36cca     20          | 	byte	"rnd: "
36ccb     00          | 	byte	0
36ccc                 | LR__5905
36ccc     72 6E 64 3A 
36cd0     20          | 	byte	"rnd: "
36cd1     00          | 	byte	0
36cd2                 | LR__5906
36cd2                 | 	byte	
36cd2     00          | 	byte	0
36cd3                 | LR__5907
36cd3     53 74 6F 70 
36cd7     70 65 64 20 
36cdb     61 74 20 6C 
36cdf     69 6E 65 20 | 	byte	"Stopped at line "
36ce3     00          | 	byte	0
36ce4                 | LR__5908
36ce4                 | 	byte	
36ce4     00          | 	byte	0
36ce5                 | LR__5909
36ce5     2F          | 	byte	"/"
36ce6     00          | 	byte	0
36ce7                 | LR__5910
36ce7                 | 	byte	
36ce7     00          | 	byte	0
36ce8                 | LR__5911
36ce8     53 61 76 65 
36cec     64 20 61 73 
36cf0     20          | 	byte	"Saved as "
36cf1     00          | 	byte	0
36cf2                 | LR__5912
36cf2     2F          | 	byte	"/"
36cf3     00          | 	byte	0
36cf4                 | LR__5913
36cf4     73 65 74 63 
36cf8     6F 6C 6F 72 
36cfc     3A 20       | 	byte	"setcolor: "
36cfe     00          | 	byte	0
36cff                 | LR__5914
36cff     73 69 6E 3A 
36d03     20          | 	byte	"sin: "
36d04     00          | 	byte	0
36d05                 | LR__5915
36d05     73 71 72 3A 
36d09     20          | 	byte	"sqr: "
36d0a     00          | 	byte	0
36d0b                 | LR__5916
36d0b     73 74 69 63 
36d0f     6B 3A 20    | 	byte	"stick: "
36d12     00          | 	byte	0
36d13                 | LR__5917
36d13     73 74 72 69 
36d17     67 3A 20    | 	byte	"strig: "
36d1a     00          | 	byte	0
36d1b                 | LR__5918
36d1b     74 61 6E 3A 
36d1f     20          | 	byte	"tan: "
36d20     00          | 	byte	0
36d21                 | LR__5919
36d21     76 61 6C 3A 
36d25     20          | 	byte	"val: "
36d26     00          | 	byte	0
36d27                 | LR__5920
36d27     76 61 6C 3A 
36d2b     20          | 	byte	"val: "
36d2c     00          | 	byte	0
36d2d                 | LR__5921
36d2d     24          | 	byte	"$"
36d2e     00          | 	byte	0
36d2f                 | LR__5922
36d2f     26 68       | 	byte	"&h"
36d31     00          | 	byte	0
36d32                 | LR__5923
36d32     25          | 	byte	"%"
36d33     00          | 	byte	0
36d34                 | LR__5924
36d34     26 62       | 	byte	"&b"
36d36     00          | 	byte	0
36d37                 | LR__5925
36d37                 | 	byte	
36d37     00          | 	byte	0
36d38                 | LR__5926
36d38     45 78 70 65 
36d3c     63 74 65 64 
36d40     20 6E 75 6D 
36d44     62 65 72 2C 
36d48     20 67 6F 74 
36d4c     20 73 6F 6D 
36d50     65 74 68 69 
36d54     6E 67 20 65 
36d58     6C 73 65    | 	byte	"Expected number, got something else"
36d5b     00          | 	byte	0
36d5c                 | LR__5927
36d5c     43 61 6E 6E 
36d60     6F 74 20 61 
36d64     64 64 20 61 
36d68     20 6E 75 6D 
36d6c     62 65 72 20 
36d70     74 6F 20 61 
36d74     20 73 74 72 
36d78     69 6E 67    | 	byte	"Cannot add a number to a string"
36d7b     00          | 	byte	0
36d7c                 | LR__5928
36d7c     43 61 6E 6E 
36d80     6F 74 20 73 
36d84     75 62 73 74 
36d88     72 61 63 74 
36d8c     20 73 74 72 
36d90     69 6E 67 73 | 	byte	"Cannot substract strings"
36d94     00          | 	byte	0
36d95                 | LR__5929
36d95     55 6E 6B 6E 
36d99     6F 77 6E 20 
36d9d     65 72 72 6F 
36da1     72 20 77 68 
36da5     69 6C 65 20 
36da9     61 64 64 69 
36dad     6E 67       | 	byte	"Unknown error while adding"
36daf     00          | 	byte	0
36db0                 | LR__5930
36db0     55 6E 6B 6E 
36db4     6F 77 6E 20 
36db8     65 72 72 6F 
36dbc     72 20 77 68 
36dc0     69 6C 65 20 
36dc4     73 75 62 73 
36dc8     74 72 61 63 
36dcc     74 69 6E 67 | 	byte	"Unknown error while substracting"
36dd0     00          | 	byte	0
36dd1                 | LR__5931
36dd1     43 61 6E 6E 
36dd5     6F 74 20 64 
36dd9     6F 20 6C 6F 
36ddd     67 69 63 20 
36de1     6F 70 65 72 
36de5     61 74 69 6F 
36de9     6E 20 6F 6E 
36ded     20 73 74 72 
36df1     69 6E 67 20 
36df5     6F 72 20 66 
36df9     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
36dfd     00          | 	byte	0
36dfe                 | LR__5932
36dfe     55 6E 6B 6E 
36e02     6F 77 6E 20 
36e06     65 72 72 6F 
36e0a     72 20 77 68 
36e0e     69 6C 65 20 
36e12     64 6F 69 6E 
36e16     67 20 6C 6F 
36e1a     67 69 63 20 
36e1e     6F 70 65 72 
36e22     61 74 69 6F 
36e26     6E          | 	byte	"Unknown error while doing logic operation"
36e27     00          | 	byte	0
36e28                 | LR__5933
36e28     43 61 6E 6E 
36e2c     6F 74 20 6D 
36e30     75 6C 74 69 
36e34     70 6C 79 20 
36e38     73 74 72 69 
36e3c     6E 67 73    | 	byte	"Cannot multiply strings"
36e3f     00          | 	byte	0
36e40                 | LR__5934
36e40     55 6E 6B 6E 
36e44     6F 77 6E 20 
36e48     65 72 72 6F 
36e4c     72 20 77 68 
36e50     69 6C 65 20 
36e54     6D 75 6C 74 
36e58     69 70 6C 79 
36e5c     69 6E 67    | 	byte	"Unknown error while multiplying"
36e5f     00          | 	byte	0
36e60                 | LR__5935
36e60     43 61 6E 6E 
36e64     6F 74 20 64 
36e68     69 76 69 64 
36e6c     65 20 73 74 
36e70     72 69 6E 67 
36e74     73          | 	byte	"Cannot divide strings"
36e75     00          | 	byte	0
36e76                 | LR__5936
36e76     55 6E 6B 6E 
36e7a     6F 77 6E 20 
36e7e     65 72 72 6F 
36e82     72 20 77 68 
36e86     69 6C 65 20 
36e8a     64 69 76 69 
36e8e     64 69 6E 67 | 	byte	"Unknown error while dividing"
36e92     00          | 	byte	0
36e93                 | LR__5937
36e93     43 61 6E 6E 
36e97     6F 74 20 63 
36e9b     6F 6D 70 75 
36e9f     74 65 20 61 
36ea3     20 70 6F 77 
36ea7     65 72 20 6F 
36eab     66 20 61 20 
36eaf     73 74 72 69 
36eb3     6E 67       | 	byte	"Cannot compute a power of a string"
36eb5     00          | 	byte	0
36eb6                 | LR__5938
36eb6     55 6E 6B 6E 
36eba     6F 77 6E 20 
36ebe     65 72 72 6F 
36ec2     72 20 77 68 
36ec6     69 6C 65 20 
36eca     63 6F 6D 70 
36ece     75 74 69 6E 
36ed2     67 20 61 20 
36ed6     70 6F 77 65 
36eda     72          | 	byte	"Unknown error while computing a power"
36edb     00          | 	byte	0
36edc                 | LR__5939
36edc     52 69 67 68 
36ee0     74 20 70 61 
36ee4     72 65 6E 74 
36ee8     68 65 73 69 
36eec     73 20 65 78 
36ef0     70 65 63 74 
36ef4     65 64       | 	byte	"Right parenthesis expected"
36ef6     00          | 	byte	0
36ef7                 | LR__5940
36ef7     45 78 70 65 
36efb     63 74 65 64 
36eff     20 73 74 72 
36f03     69 6E 67    | 	byte	"Expected string"
36f06     00          | 	byte	0
36f07                 | LR__5941
36f07     45 78 70 65 
36f0b     63 74 65 64 
36f0f     20 66 6C 6F 
36f13     61 74       | 	byte	"Expected float"
36f15     00          | 	byte	0
36f16                 | LR__5942
36f16     45 78 70 65 
36f1a     63 74 65 64 
36f1e     20 75 6E 73 
36f22     69 67 6E 65 
36f26     64 20 69 6E 
36f2a     74 65 67 65 
36f2e     72          | 	byte	"Expected unsigned integer"
36f2f     00          | 	byte	0
36f30                 | LR__5943
36f30     45 78 70 65 
36f34     63 74 65 64 
36f38     20 69 6E 74 
36f3c     65 67 65 72 | 	byte	"Expected integer"
36f40     00          | 	byte	0
36f41                 | LR__5944
36f41     4E 6F 20 6D 
36f45     6F 72 65 20 
36f49     76 61 72 69 
36f4d     61 62 6C 65 
36f51     20 73 6C 6F 
36f55     74 73       | 	byte	"No more variable slots"
36f57     00          | 	byte	0
36f58                 | LR__5945
36f58     56 61 72 69 
36f5c     61 62 6C 65 
36f60     20 6E 6F 74 
36f64     20 66 6F 75 
36f68     6E 64       | 	byte	"Variable not found"
36f6a     00          | 	byte	0
36f6b                 | LR__5946
36f6b     43 6F 6D 6D 
36f6f     61 20 65 78 
36f73     70 65 63 74 
36f77     65 64       | 	byte	"Comma expected"
36f79     00          | 	byte	0
36f7a                 | LR__5947
36f7a     43 6F 6D 6D 
36f7e     61 20 6F 72 
36f82     20 73 65 6D 
36f86     69 63 6F 6C 
36f8a     6F 6E 20 65 
36f8e     78 70 65 63 
36f92     74 65 64    | 	byte	"Comma or semicolon expected"
36f95     00          | 	byte	0
36f96                 | LR__5948
36f96     55 6E 6B 6E 
36f9a     6F 77 6E 20 
36f9e     63 6F 6D 6D 
36fa2     61 6E 64    | 	byte	"Unknown command"
36fa5     00          | 	byte	0
36fa6                 | LR__5949
36fa6     53 74 61 63 
36faa     6B 20 75 6E 
36fae     64 65 72 66 
36fb2     6C 6F 77    | 	byte	"Stack underflow"
36fb5     00          | 	byte	0
36fb6                 | LR__5950
36fb6     43 61 6E 6E 
36fba     6F 74 20 65 
36fbe     78 65 63 75 
36fc2     74 65 20 67 
36fc6     6F 74 6F 20 
36fca     6F 72 20 67 
36fce     6F 73 75 62 
36fd2     20 69 6E 20 
36fd6     74 68 65 20 
36fda     69 6D 6D 65 
36fde     64 69 61 74 
36fe2     65 20 6D 6F 
36fe6     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
36fe8     00          | 	byte	0
36fe9                 | LR__5951
36fe9     43 61 6E 6E 
36fed     6F 74 20 6C 
36ff1     6F 61 64 20 
36ff5     66 72 6F 6D 
36ff9     20 74 68 69 
36ffd     73 20 66 69 
37001     6C 65       | 	byte	"Cannot load from this file"
37003     00          | 	byte	0
37004                 | LR__5952
37004     54 68 65 20 
37008     70 72 6F 67 
3700c     72 61 6D 20 
37010     69 73 20 65 
37014     6D 70 74 79 | 	byte	"The program is empty"
37018     00          | 	byte	0
37019                 | LR__5953
37019     49 66 20 61 
3701d     66 74 65 72 
37021     20 69 66    | 	byte	"If after if"
37024     00          | 	byte	0
37025                 | LR__5954
37025     45 6D 70 74 
37029     79 20 65 78 
3702d     70 72 65 73 
37031     73 69 6F 6E | 	byte	"Empty expression"
37035     00          | 	byte	0
37036                 | LR__5955
37036     53 74 72 69 
3703a     6E 67 20 65 
3703e     78 70 65 63 
37042     74 65 64    | 	byte	"String expected"
37045     00          | 	byte	0
37046                 | LR__5956
37046     49 6E 74 65 
3704a     72 70 72 65 
3704e     74 65 72 20 
37052     69 6E 74 65 
37056     72 6E 61 6C 
3705a     20 65 72 72 
3705e     6F 72       | 	byte	"Interpreter internal error"
37060     00          | 	byte	0
37061                 | LR__5957
37061     45 78 70 65 
37065     63 74 65 64 
37069     20 61 73 73 
3706d     69 67 6E    | 	byte	"Expected assign"
37070     00          | 	byte	0
37071                 | LR__5958
37071     45 78 70 65 
37075     63 74 65 64 
37079     20 27 74 6F 
3707d     27          | 	byte	"Expected 'to'"
3707e     00          | 	byte	0
3707f                 | LR__5959
3707f     45 78 70 65 
37083     63 74 65 64 
37087     20 69 6E 74 
3708b     65 67 65 72 
3708f     20 76 61 72 
37093     69 61 62 6C 
37097     65          | 	byte	"Expected integer variable"
37098     00          | 	byte	0
37099                 | LR__5960
37099     55 6E 69 6E 
3709d     69 74 69 61 
370a1     6C 69 7A 65 
370a5     64 20 76 61 
370a9     72 69 61 62 
370ad     6C 65 20 69 
370b1     6E 20 27 6E 
370b5     65 78 74 27 
370b9     2C 20 75 73 
370bd     65 20 27 66 
370c1     6F 72 27 20 
370c5     62 65 66 6F 
370c9     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
370cb     00          | 	byte	0
370cc                 | LR__5961
370cc     4E 6F 20 6D 
370d0     6F 72 65 20 
370d4     73 6C 6F 74 
370d8     73 20 66 6F 
370dc     72 20 27 66 
370e0     6F 72 27    | 	byte	"No more slots for 'for'"
370e3     00          | 	byte	0
370e4                 | LR__5962
370e4     27 4E 65 78 
370e8     74 27 20 64 
370ec     6F 65 73 6E 
370f0     27 74 20 6D 
370f4     61 74 63 68 
370f8     20 27 66 6F 
370fc     72 27       | 	byte	"'Next' doesn't match 'for'"
370fe     00          | 	byte	0
370ff                 | LR__5963
370ff     27 47 6F 74 
37103     6F 27 20 74 
37107     61 72 67 65 
3710b     74 20 6C 69 
3710f     6E 65 20 6E 
37113     6F 74 20 66 
37117     6F 75 6E 64 | 	byte	"'Goto' target line not found"
3711b     00          | 	byte	0
3711c                 | LR__5964
3711c     42 61 64 20 
37120     6E 75 6D 62 
37124     65 72 20 6F 
37128     66 20 70 61 
3712c     72 61 6D 65 
37130     74 65 72 73 | 	byte	"Bad number of parameters"
37134     00          | 	byte	0
37135                 | LR__5965
37135     46 75 6E 63 
37139     74 69 6F 6E 
3713d     20 75 6E 64 
37141     65 66 69 6E 
37145     65 64 20 66 
37149     6F 72 20 73 
3714d     74 72 69 6E 
37151     67 73       | 	byte	"Function undefined for strings"
37153     00          | 	byte	0
37154                 | LR__5966
37154     42 61 64 20 
37158     70 61 72 61 
3715c     6D 65 74 65 
37160     72          | 	byte	"Bad parameter"
37161     00          | 	byte	0
37162                 | LR__5967
37162     43 61 6E 6E 
37166     6F 74 20 64 
3716a     65 63 6C 61 
3716e     72 65 20 61 
37172     6E 20 61 72 
37176     72 61 79 3A 
3717a     20 74 68 65 
3717e     20 76 61 72 
37182     69 61 62 6C 
37186     65 20 65 78 
3718a     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
3718e     00          | 	byte	0
3718f                 | LR__5968
3718f     45 78 70 65 
37193     63 74 65 64 
37197     20 27 28 27 | 	byte	"Expected '('"
3719b     00          | 	byte	0
3719c                 | LR__5969
3719c     45 78 70 65 
371a0     63 74 65 64 
371a4     20 27 29 27 
371a8     20 6F 72 20 
371ac     27 2C 27    | 	byte	"Expected ')' or ','"
371af     00          | 	byte	0
371b0                 | LR__5970
371b0     4E 6F 20 6D 
371b4     6F 72 65 20 
371b8     74 68 61 6E 
371bc     20 33 20 64 
371c0     69 6D 65 6E 
371c4     73 69 6F 6E 
371c8     73 20 73 75 
371cc     70 70 6F 72 
371d0     74 65 64    | 	byte	"No more than 3 dimensions supported"
371d3     00          | 	byte	0
371d4                 | LR__5971
371d4     56 61 72 69 
371d8     61 62 6C 65 
371dc     20 6E 61 6D 
371e0     65 20 65 78 
371e4     70 65 63 74 
371e8     65 64       | 	byte	"Variable name expected"
371ea     00          | 	byte	0
371eb                 | LR__5972
371eb     54 79 70 65 
371ef     20 6E 61 6D 
371f3     65 20 65 78 
371f7     70 65 63 74 
371fb     65 64       | 	byte	"Type name expected"
371fd     00          | 	byte	0
371fe                 | LR__5973
371fe     54 79 70 65 
37202     20 6E 6F 74 
37206     20 73 75 70 
3720a     70 6F 72 74 
3720e     65 64 20 79 
37212     65 74       | 	byte	"Type not supported yet"
37214     00          | 	byte	0
37215                 | LR__5974
37215     41 72 72 61 
37219     79 20 69 6E 
3721d     64 65 78 20 
37221     6F 75 74 20 
37225     6F 66 20 72 
37229     61 6E 67 65 | 	byte	"Array index out of range"
3722d     00          | 	byte	0
3722e                 | LR__5975
3722e     42 61 64 20 
37232     74 79 70 65 
37236     20 77 68 69 
3723a     6C 65 20 61 
3723e     73 73 69 67 
37242     6E 69 6E 67 
37246     20 74 6F 20 
3724a     61 72 72 61 
3724e     79          | 	byte	"Bad type while assigning to array"
3724f     00          | 	byte	0
37250                 | LR__5976
37250     54 6F 6F 20 
37254     6D 61 6E 79 
37258     20 76 61 72 
3725c     69 61 62 6C 
37260     65 73       | 	byte	"Too many variables"
37262     00          | 	byte	0
37263                 | LR__5977
37263     27 54 68 65 
37267     6E 27 20 65 
3726b     78 70 65 63 
3726f     74 65 64    | 	byte	"'Then' expected"
37272     00          | 	byte	0
37273                 | LR__5978
37273     44 69 72 65 
37277     63 74 6F 72 
3727b     79 20 64 6F 
3727f     65 73 6E 27 
37283     74 20 65 78 
37287     69 73 74    | 	byte	"Directory doesn't exist"
3728a     00          | 	byte	0
3728b                 | LR__5979
3728b     55 6E 65 78 
3728f     70 65 63 74 
37293     65 64 20 65 
37297     6E 64 20 6F 
3729b     66 20 6C 69 
3729f     6E 65       | 	byte	"Unexpected end of line"
372a1     00          | 	byte	0
372a2                 | LR__5980
372a2     4E 6F 20 6D 
372a6     6F 72 65 20 
372aa     64 61 74 61 | 	byte	"No more data"
372ae     00          | 	byte	0
372af                 | LR__5981
372af     45 72 72 6F 
372b3     72 20       | 	byte	"Error "
372b5     00          | 	byte	0
372b6                 | LR__5982
372b6     20 2D 20    | 	byte	" - "
372b9     00          | 	byte	0
372ba                 | LR__5983
372ba     20 69 6E 20 
372be     6C 69 6E 65 
372c2     20          | 	byte	" in line "
372c3     00          | 	byte	0
372c4                 | LR__5984
372c4                 | 	byte	
372c4     00          | 	byte	0
372c5                 | LR__5985
372c5     2F 73 64    | 	byte	"/sd"
372c8     00          | 	byte	0
372c9                 | LR__5986
372c9     2F 73 64 2F 
372cd     62 61 73    | 	byte	"/sd/bas"
372d0     00          | 	byte	0
372d1                 | LR__5987
372d1     2F 73 64 2F 
372d5     62 61 73    | 	byte	"/sd/bas"
372d8     00          | 	byte	0
372d9                 | LR__5988
372d9     20 42 41 53 
372dd     49 43 20 62 
372e1     79 74 65 73 
372e5     20 66 72 65 
372e9     65          | 	byte	" BASIC bytes free"
372ea     00          | 	byte	0
372eb                 | LR__5989
372eb     52 65 61 64 
372ef     79          | 	byte	"Ready"
372f0     00          | 	byte	0
372f1                 | LR__5990
372f1     6E 6F 6E 61 
372f5     6D 65 2E 62 
372f9     61 73       | 	byte	"noname.bas"
372fb     00          | 	byte	0
372fc                 | LR__5991
372fc     2F 73 64 2F 
37300     62 61 73 2F 
37304     61 75 74 6F 
37308     72 75 6E 2E 
3730c     62 61 73    | 	byte	"/sd/bas/autorun.bas"
3730f     00          | 	byte	0
37310                 | LR__5992
37310     72 75 6E 20 
37314     61 75 74 6F 
37318     72 75 6E 2E 
3731c     62 61 73    | 	byte	"run autorun.bas"
3731f     00          | 	byte	0
37320                 | LR__5993
37320                 | 	byte	
37320     00          | 	byte	0
37321     00 00 00    | 	alignl
37324                 | _dat_
37324     00 00 00 00 
37328     00 00 00 00 
3732c     00 00 00 00 
37330     00 00 00 00 | 	byte	$00[16]
37334     61 41 17 0E 
37338     62 42 00 00 
3733c     63 43 19 10 
37340     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
37344     65 45 18 0F 
37348     66 46 00 00 
3734c     67 47 00 00 
37350     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
37354     69 49 00 00 
37358     6A 4A 00 00 
3735c     6B 4B 00 00 
37360     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
37364     6D 4D 00 00 
37368     6E 4E 1A 11 
3736c     6F 4F 1E 15 
37370     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
37374     71 51 00 00 
37378     72 52 00 00 
3737c     73 53 1B 12 
37380     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
37384     75 55 00 00 
37388     76 56 00 00 
3738c     77 57 00 00 
37390     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
37394     79 59 00 00 
37398     7A 5A 1D 14 
3739c     31 21 04 00 
373a0     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
373a4     33 23 06 00 
373a8     34 24 07 00 
373ac     35 25 08 00 
373b0     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
373b4     37 26 0A 00 
373b8     38 2A 0B 00 
373bc     39 28 0C 00 
373c0     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
373c4     8D 8D 00 00 
373c8     9B 9B 00 00 
373cc     88 88 00 00 
373d0     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
373d4     20 20 00 00 
373d8     2D 5F 00 00 
373dc     3D 2B 00 00 
373e0     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
373e4     5D 7D 00 00 
373e8     5C 7C 00 00 
373ec     23 7E 00 00 
373f0     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
373f4     27 22 00 00 
373f8     60 7E 03 00 
373fc     2C 3C 00 00 
37400     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
37404     2F 3F 00 00 
37408     B9 B9 00 00 
3740c     BA 00 00 00 
37410     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
37414     BC 00 00 00 
37418     BD 00 00 00 
3741c     BE 00 00 00 
37420     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
37424     C0 00 00 00 
37428     C1 00 00 00 
3742c     C2 00 00 00 
37430     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
37434     C4 00 00 00 
37438     C5 00 00 00 
3743c     C6 00 00 00 
37440     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
37444     C8 00 00 00 
37448     C9 00 00 00 
3744c     CA 00 00 00 
37450     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
37454     7F 7F 00 00 
37458     CC 00 00 00 
3745c     CD 00 00 00 
37460     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
37464     CF 00 00 00 
37468     D0 00 00 00 
3746c     D1 00 00 00 
37470     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
37474     2F 2F 00 00 
37478     2A 2A 00 00 
3747c     2D 2D 00 00 
37480     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
37484     8D 8D 00 00 
37488     31 31 00 00 
3748c     32 32 00 00 
37490     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
37494     34 34 00 00 
37498     35 35 00 00 
3749c     36 36 00 00 
374a0     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
374a4     38 38 00 00 
374a8     39 39 00 00 
374ac     30 30 00 00 
374b0     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
374b4     5C 7C 00 00 
374b8     00 00 00 00 
374bc     00 00 00 00 
374c0     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
374c4     00 00 00 00 
      ...             
3751c     00 00 00 00 
37520     00 00 00 00 | 	byte	$00[96]
37524     2B 00 A6 F2 
37528     24 A7 09 80 
3752c     5B 88 4D 89 
37530     80 88 A5 88 | atari_spl file "atari.spl"
37534     6D 88 B8 88 
37538     80 88 CB 88 
3753c     92 88 A5 88 
37540     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
37544     A5 88 CA 88 
37548     A6 88 DD 88 
3754c     B8 88 AB 89 
37550     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
37554     C8 AD C6 F1 
37558     91 06 B6 FF 
3755c     13 00 4A 00 
37560     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
37564     5D 00 5E 00 
37568     5D 00 5E 00 
3756c     5E 00 5D 00 
37570     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
37574     38 00 83 00 
37578     25 00 83 00 
3757c     C3 FE D1 04 
37580     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
37584     48 88 38 85 
37588     41 8A CB 88 
3758c     28 89 B8 88 
37590     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
37594     15 89 03 89 
37598     02 89 15 89 
3759c     16 89 15 89 
375a0     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
375a4     15 89 3A 89 
375a8     72 89 E3 89 
375ac     52 83 AD 97 
375b0     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
375b4     0C 02 B6 FF 
375b8     E1 00 A8 00 
375bc     F3 00 A8 00 
375c0     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
375c4     CE 00 CD 00 
375c8     CD 00 BA 00 
375cc     E1 00 BB 00 
375d0     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
375d4     DF 00 C9 FF 
375d8     E6 01 B6 06 
375dc     EE DD 8D 98 
375e0     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
375e4     97 89 73 89 
375e8     3B 89 60 89 
375ec     60 89 60 89 
375f0     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
375f4     73 89 72 89 
375f8     85 89 73 89 
375fc     AA 89 60 89 
37600     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
37604     E8 8A 18 86 
37608     92 88 A5 C2 
3760c     E0 00 C3 05 
37610     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
37614     F2 00 64 01 
37618     06 01 3E 01 
3761c     2B 01 2B 01 
37620     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
37624     2B 01 2A 01 
37628     2B 01 2B 01 
3762c     2B 01 18 01 
37630     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
37634     39 07 61 F3 
37638     C0 AF 37 85 
3763c     0F 88 8B 8A 
37640     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
37644     AB 89 D0 89 
37648     AB 89 D0 89 
3764c     D0 89 CF 89 
37650     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
37654     D0 89 F5 89 
37658     BD 89 08 8A 
3765c     CF 89 E8 8A 
37660     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
37664     53 B3 0D F8 
37668     F4 07 38 00 
3766c     63 01 63 01 
37670     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
37674     88 01 88 01 
37678     76 01 88 01 
3767c     88 01 89 01 
37680     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
37684     75 01 AE 01 
37688     76 01 88 01 
3768c     4A 00 46 06 
37690     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
37694     08 8A 9A 86 
37698     33 8B 08 8A 
3769c     2D 8A F5 89 
376a0     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
376a4     2D 8A 2D 8A 
376a8     2E 8A 1B 8A 
376ac     40 8A 2D 8A 
376b0     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
376b4     2E 8A 79 8A 
376b8     66 8A C8 8B 
376bc     72 82 2B 97 
376c0     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
376c4     1D 02 05 01 
376c8     F8 01 C0 01 
376cc     0B 02 C0 01 
376d0     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
376d4     F9 01 D3 01 
376d8     F8 01 D3 01 
376dc     F8 01 D2 01 
376e0     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
376e4     E6 01 2B 01 
376e8     8E 02 5F 07 
376ec     F7 E2 ED 9C 
376f0     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
376f4     E8 8A 78 8A 
376f8     78 8A 65 8A 
376fc     8B 8A 78 8A 
37700     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
37704     8B 8A 9D 8A 
37708     9D 8A 8B 8A 
3770c     C2 8A 78 8A 
37710     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
37714     70 8C 18 86 
37718     8B 8A 23 C9 
3771c     CB 03 C4 05 
37720     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
37724     0B 02 7B 02 
37728     1E 02 55 02 
3772c     30 02 43 02 
37730     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
37734     43 02 44 02 
37738     43 02 30 02 
3773c     68 02 31 02 
37740     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
37744     07 08 3F F7 
37748     73 B2 13 85 
3774c     15 89 ED 8B 
37750     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
37754     B0 8A FB 8A 
37758     D5 8A FA 8A 
3775c     E8 8A FB 8A 
37760     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
37764     E8 8A 21 8B 
37768     E7 8A 33 8B 
3776c     E8 8A 26 8C 
37770     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
37774     8D B0 27 F6 
37778     9C 08 AD 01 
3777c     7B 02 8D 02 
37780     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
37784     A1 02 A0 02 
37788     A1 02 A0 02 
3778c     A0 02 A0 02 
37790     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
37794     7B 02 D8 02 
37798     7B 02 C6 02 
3779c     3E 01 C3 05 
377a0     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
377a4     00 8C 2A 86 
377a8     E0 8C FA 8A 
377ac     6A 8B FB 8A 
377b0     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
377b4     45 8B 45 8B 
377b8     45 8B 6B 8B 
377bc     46 8B 59 8B 
377c0     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
377c4     6B 8B 6B 8B 
377c8     6B 8B 6B 8B 
377cc     7D 8B 7D 8B 
377d0     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
377d4     90 8B 91 8B 
377d8     90 8B 90 8B 
377dc     A3 8B A3 8B 
377e0     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
377e4     B5 8B B6 8B 
377e8     B5 8B B5 8B 
377ec     B6 8B C8 8B 
377f0     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
377f4     C8 8B DA 8B 
377f8     DB 8B DB 8B 
377fc     DB 8B DC 8B 
37800     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
37804     EE 8B EE 8B 
37808     00 8C 01 8C 
3780c     00 8C 01 8C 
37810     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
37814     12 8C 13 8C 
37818     13 8C 26 8C 
3781c     26 8C 26 8C 
37820     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
37824     38 8C 38 8C 
37828     38 8C 38 8C 
3782c     4B 8C 4B 8C 
37830     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
37834     5E 8C 5E 8C 
37838     5E 8C 5E 8C 
3783c     70 8C 70 8C 
37840     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
37844     70 8C 83 8C 
37848     83 8C 83 8C 
3784c     83 8C 96 8C 
37850     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
37854     95 8C A9 8C 
37858     A9 8C A8 8C 
3785c     A8 8C A8 8C 
37860     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
37864     BB 8C BB 8C 
37868     BB 8C CE 8C 
3786c     CE 8C CE 8C 
37870     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
37874     E0 8C E1 8C 
37878     E1 8C E0 8C 
3787c     F4 8C F2 8C 
37880     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
37884     05 8D 05 8D 
37888     06 8D 06 8D 
3788c     19 8D 19 8D 
37890     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
37894     18 8D 2B 8D 
37898     2B 8D 2B 8D 
3789c     2A 8D 3E 8D 
378a0     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
378a4     3E 8D 51 8D 
378a8     50 8D 50 8D 
378ac     50 8D 51 8D 
378b0     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
378b4     63 8D 64 8D 
378b8     76 8D 75 8D 
378bc     75 8D 76 8D 
378c0     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
378c4     88 8D 88 8D 
378c8     89 8D 9B 8D 
378cc     9A 8D 9B 8D 
378d0     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
378d4     AD 8D AE 8D 
378d8     AD 8D AE 8D 
378dc     C1 8D C1 8D 
378e0     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
378e4     D3 8D D3 8D 
378e8     D3 8D D3 8D 
378ec     D3 8D E6 8D 
378f0     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
378f4     E6 8D E6 8D 
378f8     F9 8D F9 8D 
378fc     F9 8D F8 8D 
37900     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
37904     0B 8E 0B 8E 
37908     1D 8E 1D 8E 
3790c     1E 8E 1E 8E 
37910     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
37914     31 8E 31 8E 
37918     31 8E 42 8E 
3791c     43 8E 43 8E 
37920     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
37924     56 8E 56 8E 
37928     55 8E 56 8E 
3792c     68 8E 69 8E 
37930     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
37934     69 8E 7B 8E 
37938     7C 8E 7B 8E 
3793c     7B 8E 8D 8E 
37940     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
37944     8D 8E A1 8E 
37948     A0 8E A1 8E 
3794c     A1 8E A0 8E 
37950     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
37954     B3 8E B3 8E 
37958     C6 8E C5 8E 
3795c     C6 8E C6 8E 
37960     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
37964     D8 8E D9 8E 
37968     D8 8E EC 8E 
3796c     EB 8E EC 8E 
37970     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
37974     FE 8E FE 8E 
37978     FE 8E FE 8E 
3797c     10 8F 10 8F 
37980     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
37984     11 8F 23 8F 
37988     24 8F 23 8F 
3798c     24 8F 37 8F 
37990     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
37994     36 8F 36 8F 
37998     48 8F 49 8F 
3799c     49 8F 49 8F 
379a0     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
379a4     5B 8F 5C 8F 
379a8     5B 8F 6E 8F 
379ac     6E 8F 6E 8F 
379b0     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
379b4     81 8F 81 8F 
379b8     81 8F 81 8F 
379bc     93 8F 93 8F 
379c0     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
379c4     93 8F A6 8F 
379c8     A6 8F A6 8F 
379cc     A6 8F B9 8F 
379d0     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
379d4     B9 8F B9 8F 
379d8     CC 8F CB 8F 
379dc     CB 8F CC 8F 
379e0     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
379e4     DF 8F DE 8F 
379e8     DE 8F F1 8F 
379ec     F1 8F F1 8F 
379f0     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
379f4     03 90 04 90 
379f8     04 90 04 90 
379fc     16 90 17 90 
37a00     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
37a04     29 90 28 90 
37a08     29 90 28 90 
37a0c     29 90 3C 90 
37a10     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
37a14     3C 90 4F 90 
37a18     4E 90 4E 90 
37a1c     4E 90 4E 90 
37a20     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
37a24     61 90 61 90 
37a28     73 90 74 90 
37a2c     74 90 74 90 
37a30     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
37a34     87 90 86 90 
37a38     87 90 86 90 
37a3c     99 90 99 90 
37a40     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
37a44     AB 90 AB 90 
37a48     AC 90 AB 90 
37a4c     AB 90 BF 90 
37a50     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
37a54     BE 90 D1 90 
37a58     D0 90 D1 90 
37a5c     D1 90 D1 90 
37a60     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
37a64     E3 90 E4 90 
37a68     F6 90 F6 90 
37a6c     F6 90 F6 90 
37a70     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
37a74     09 91 0A 91 
37a78     0A 91 1C 91 
37a7c     1C 91 1C 91 
37a80     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
37a84     2F 91 2E 91 
37a88     2F 91 2F 91 
37a8c     2E 91 41 91 
37a90     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
37a94     41 91 53 91 
37a98     54 91 54 91 
37a9c     53 91 54 91 
37aa0     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
37aa4     67 91 67 91 
37aa8     79 91 7A 91 
37aac     79 91 78 91 
37ab0     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
37ab4     8C 91 8B 91 
37ab8     8C 91 8C 91 
37abc     9E 91 9E 91 
37ac0     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
37ac4     B1 91 B1 91 
37ac8     B2 91 B1 91 
37acc     B1 91 C4 91 
37ad0     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
37ad4     C4 91 D6 91 
37ad8     D7 91 D7 91 
37adc     D7 91 D6 91 
37ae0     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
37ae4     EA 91 EA 91 
37ae8     EA 91 FC 91 
37aec     FC 91 FB 91 
37af0     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
37af4     0E 92 0F 92 
37af8     0F 92 0E 92 
37afc     21 92 21 92 
37b00     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
37b04     21 92 34 92 
37b08     33 92 34 92 
37b0c     34 92 47 92 
37b10     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
37b14     46 92 47 92 
37b18     59 92 59 92 
37b1c     59 92 59 92 
37b20     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
37b24     6C 92 6C 92 
37b28     6B 92 7E 92 
37b2c     7E 92 7E 92 
37b30     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
37b34     92 92 91 92 
37b38     91 92 90 92 
37b3c     91 92 A4 92 
37b40     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
37b44     A3 92 B6 92 
37b48     B6 92 B7 92 
37b4c     B7 92 B6 92 
37b50     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
37b54     CA 92 C9 92 
37b58     CA 92 DC 92 
37b5c     DC 92 DC 92 
37b60     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
37b64     EF 92 EF 92 
37b68     EF 92 EF 92 
37b6c     01 93 01 93 
37b70     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
37b74     15 93 14 93 
37b78     14 93 14 93 
37b7c     14 93 27 93 
37b80     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
37b84     27 93 39 93 
37b88     3A 93 39 93 
37b8c     39 93 39 93 
37b90     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
37b94     4B 93 4C 93 
37b98     5F 93 5F 93 
37b9c     5F 93 5E 93 
37ba0     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
37ba4     5F 93 84 93 
37ba8     4C 93 96 93 
37bac     5F 93 AE 94 
37bb0     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
37bb4     7B C1 00 00 
37bb8     00 00 00 00 
37bbc     00 00 00 00 
37bc0     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37bc4     00 00 00 00 | 	byte	$00, $00, $00, $00
37bc8     7A D7 00 80 
37bcc     87 8A 48 8F 
37bd0     EC 8C 76 8D 
37bd4     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
37bd8     3C 8D 82 8D 
37bdc     42 8D 88 8D 
37be0     8C 8D 8E 8D 
37be4     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
37be8     97 8D DE 8D 
37bec     E1 8D F1 8E 
37bf0     D8 8C A3 83 
37bf4     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
37bf8     65 71 C9 65 
37bfc     FC 64 C4 65 
37c00     C1 65 BF 65 
37c04     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
37c08     B6 65 B4 65 
37c0c     B2 65 AE 65 
37c10     AC 65 ED 65 
37c14     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
37c18     5E 65 25 66 
37c1c     FA 62 23 6B 
37c20     B5 6C 61 0A 
37c24     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
37c28     5D 90 BE 8D 
37c2c     47 8E C3 8D 
37c30     09 8E C9 8D 
37c34     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
37c38     15 8E 19 8E 
37c3c     1B 8E 62 8E 
37c40     64 8E 68 8E 
37c44     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
37c48     B5 8E 4C 90 
37c4c     FA 84 3C 9D 
37c50     98 13 79 6D 
37c54     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
37c58     D9 66 50 66 
37c5c     D4 66 4B 66 
37c60     8C 66 46 66 
37c64     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
37c68     81 66 3A 66 
37c6c     7C 66 36 66 
37c70     76 66 30 66 
37c74     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
37c78     6B 66 88 72 
37c7c     BF 37 E7 B7 
37c80     75 83 8B 8E 
37c84     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
37c88     94 8E 96 8E 
37c8c     DD 8E 9C 8E 
37c90     E2 8E A2 8E 
37c94     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
37c98     EE 8E AE 8E 
37c9c     38 8F B5 8E 
37ca0     3F 8F FD 8E 
37ca4     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
37ca8     A5 87 1E E3 
37cac     6D 5D FA 71 
37cb0     41 64 25 67 
37cb4     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
37cb8     D9 66 1A 67 
37cbc     18 67 15 67 
37cc0     12 67 0F 67 
37cc4     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
37cc8     07 67 C0 66 
37ccc     01 67 BC 66 
37cd0     B8 66 DE 64 
37cd4     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
37cd8     43 E5 1F 8B 
37cdc     14 8A F1 90 
37ce0     1C 8F 63 8F 
37ce4     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
37ce8     29 8F 6E 8F 
37cec     72 8F 75 8F 
37cf0     34 8F BE 8F 
37cf4     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
37cf8     84 8F 87 8F 
37cfc     CC 8F 56 90 
37d00     67 91 49 80 
37d04     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
37d08     46 77 A6 66 
37d0c     E8 66 B0 67 
37d10     AD 67 ED 67 
37d14     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
37d18     A2 67 E3 67 
37d1c     9D 67 9A 67 
37d20     98 67 94 67 
37d24     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
37d28     49 67 CD 67 
37d2c     28 65 5F 6E 
37d30     82 67 3A 01 
37d34     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
37d38     C2 91 A9 8F 
37d3c     EF 8F AE 8F 
37d40     F4 8F B5 8F 
37d44     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
37d48     01 90 03 90 
37d4c     07 90 09 90 
37d50     0C 90 53 90 
37d54     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
37d58     18 90 44 93 
37d5c     85 84 D6 9D 
37d60     87 1F 2F 75 
37d64     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
37d68     C4 68 F6 67 
37d6c     BE 68 F1 67 
37d70     76 68 2E 68 
37d74     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
37d78     27 68 24 68 
37d7c     64 68 1E 68 
37d80     5F 68 19 68 
37d84     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
37d88     DC 68 56 72 
37d8c     7E 36 C2 B8 
37d90     D7 84 73 90 
37d94     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
37d98     7B 90 7F 90 
37d9c     82 90 84 90 
37da0     CB 90 8B 90 
37da4     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
37da8     D7 90 96 90 
37dac     20 91 59 90 
37db0     25 91 A2 90 
37db4     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
37db8     D0 89 40 EE 
37dbc     12 64 C4 71 
37dc0     29 66 0C 69 
37dc4     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
37dc8     C0 68 02 69 
37dcc     FE 68 FB 68 
37dd0     F9 68 F6 68 
37dd4     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
37dd8     EE 68 A8 68 
37ddc     2C 69 5F 68 
37de0     E2 68 81 66 
37de4     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
37de8     1E EB A6 8A 
37dec     73 8B 5E 93 
37df0     7B 90 48 91 
37df4     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
37df8     0D 91 11 91 
37dfc     14 91 16 91 
37e00     5C 91 1C 91 
37e04     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
37e08     68 91 AF 91 
37e0c     2A 91 B5 91 
37e10     75 91 1A 94 
37e14     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
37e18     70 0E CB 6C 
37e1c     5D 6E C4 67 
37e20     99 69 54 69 
37e24     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
37e28     D2 69 49 69 
37e2c     89 69 86 69 
37e30     40 69 C4 69 
37e34     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
37e38     35 69 76 69 
37e3c     58 67 EB 6D 
37e40     E9 6D 89 0F 
37e44     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
37e48     33 94 94 91 
37e4c     D9 91 56 91 
37e50     E0 91 9F 91 
37e54     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
37e58     EC 91 EE 91 
37e5c     F1 91 F4 91 
37e60     F7 91 3D 92 
37e64     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
37e68     46 92 21 94 
37e6c     11 89 A4 9D 
37e70     FD 0E 8F 6C 
37e74     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
37e78     28 6A E1 69 
37e7c     65 6A 1F 6A 
37e80     5F 6A 1A 6A 
37e84     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
37e88     54 6A 0F 6A 
37e8c     4F 6A 09 6A 
37e90     06 6A 03 6A 
37e94     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
37e98     23 68 69 77 
37e9c     3A 4D 38 CA 
37ea0     38 86 4E 91 
37ea4     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
37ea8     64 92 24 92 
37eac     6A 92 2A 92 
37eb0     70 92 30 92 
37eb4     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
37eb8     7B 92 7E 92 
37ebc     C5 92 84 92 
37ec0     CB 92 8A 92 
37ec4     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
37ec8     4D 8D F9 E2 
37ecc     97 59 FE 74 
37ed0     DB 68 6D 6A 
37ed4     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
37ed8     A8 6A A5 6A 
37edc     A3 6A 9F 6A 
37ee0     9D 6A 9B 6A 
37ee4     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
37ee8     D6 6A 8F 6A 
37eec     CF 6A 46 6A 
37ef0     CA 6A E1 67 
37ef4     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
37ef8     D3 F7 15 92 
37efc     90 8C BF 94 
37f00     A6 92 EB 92 
37f04     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
37f08     B1 92 F7 92 
37f0c     FA 92 FD 92 
37f10     00 93 02 93 
37f14     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
37f18     4F 93 52 93 
37f1c     54 93 22 94 
37f20     5A 93 8F 88 
37f24     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
37f28     1C 77 07 6C 
37f2c     E8 69 7A 6B 
37f30     34 6B 75 6B 
37f34     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
37f38     29 6B 26 6B 
37f3c     24 6B 21 6B 
37f40     1D 6B 5E 6B 
37f44     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
37f48     12 6B 52 6B 
37f4c     34 69 34 6E 
37f50     BA 73 A4 24 
37f54     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
37f58     7A 94 B3 93 
37f5c     72 93 31 93 
37f60     78 93 7A 93 
37f64     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
37f68     83 93 86 93 
37f6c     89 93 D0 93 
37f70     D2 93 D5 93 
37f74     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
37f78     DD 93 40 96 
37f7c     30 8B 99 9C 
37f80     52 10 94 71 
37f84     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
37f88     46 6C 79 6B 
37f8c     40 6C B7 6B 
37f90     F7 6B B1 6B 
37f94     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
37f98     EC 6B A5 6B 
37f9c     A2 6B 9F 6B 
37fa0     9D 6B 9A 6B 
37fa4     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
37fa8     C8 6A E4 76 
37fac     20 4B F9 CE 
37fb0     2E 8A 1A 92 
37fb4     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
37fb8     FB 93 BA 93 
37fbc     01 94 03 94 
37fc0     4A 94 09 94 
37fc4     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
37fc8     55 94 14 94 
37fcc     9E 94 1A 94 
37fd0     61 94 20 94 
37fd4     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
37fd8     3E 87 E5 CD 
37fdc     5F 50 6C 78 
37fe0     B5 6A 04 6C 
37fe4     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
37fe8     83 6C 7F 6C 
37fec     7C 6C 36 6C 
37ff0     76 6C 74 6C 
37ff4     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
37ff8     6B 6C 25 6C 
37ffc     66 6C 1F 6C 
38000     1D 6C 41 6A 
38004     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
38008     BA FA FC 94 
3800c     5B 8D 97 96 
38010     3B 94 C5 94 
38014     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
38018     89 94 8C 94 
3801c     8F 94 92 94 
38020     94 94 DB 94 
38024     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
38028     E4 94 E7 94 
3802c     2D 95 74 95 
38030     C8 96 15 89 
38034     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
38038     CB 75 31 6F 
3803c     7E 6B 10 6D 
38040     C9 6C 0A 6D 
38044     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
38048     BD 6C FF 6C 
3804c     FB 6C F9 6C 
38050     B2 6C F3 6C 
38054     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
38058     A7 6C E8 6C 
3805c     0D 6B 85 6F 
38060     C7 74 10 28 
38064     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
38068     96 96 47 95 
3806c     06 95 0A 95 
38070     0C 95 0F 95 
38074     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
38078     17 95 5E 95 
3807c     61 95 63 95 
38080     22 95 AC 95 
38084     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
38088     72 95 17 98 
3808c     59 8E 01 96 
38090     CF FC 5A 68 
38094     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
38098     96 6D 50 6D 
3809c     D5 6D 4A 6D 
380a0     8C 6D 89 6D 
380a4     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
380a8     80 6D 3A 6D 
380ac     7A 6D 77 6D 
380b0     75 6D 71 6D 
380b4     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
380b8     18 6C BC 78 
380bc     9A 4F 7E CF 
380c0     1F 89 F1 93 
380c4     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
380c8     D2 95 4E 95 
380cc     D7 95 53 95 
380d0     DD 95 E0 95 
380d4     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
380d8     A5 95 EB 95 
380dc     EE 95 F0 95 
380e0     37 96 B3 95 
380e4     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
380e8     1A 98 D5 8D 
380ec     C5 9F CD 0F 
380f0     0F 71 F3 73 
380f4     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
380f8     D9 6D 5E 6E 
380fc     D3 6D 58 6E 
38100     12 6E 0F 6E 
38104     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
38108     49 6E BF 6D 
3810c     87 6E 76 6D 
38110     81 6E 11 6B 
38114     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
38118     3F 09 44 95 
3811c     E5 8D 3F 99 
38120     D4 95 A2 96 
38124     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
38128     23 96 69 96 
3812c     6B 96 6E 96 
38130     71 96 74 96 
38134     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
38138     BF 96 3C 96 
3813c     C6 96 C8 96 
38140     A3 98 51 8D 
38144     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
38148     CF 75 29 73 
3814c     90 6C EC 6E 
38150     62 6E E7 6E 
38154     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
38158     9A 6E 98 6E 
3815c     95 6E 91 6E 
38160     8E 6E CF 6E 
38164     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
38168     40 6E C3 6E 
3816c     E8 6C 45 6F 
38170     A5 7B C9 35 
38174     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
38178     2D 98 23 97 
3817c     E1 96 A0 96 
38180     A4 96 EA 96 
38184     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
38188     AF 96 F4 96 
3818c     F8 96 3E 97 
38190     FD 96 43 97 
38194     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
38198     08 97 6B 99 
3819c     D6 92 88 91 
381a0     D8 EE 84 66 
381a4     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
381a8     2E 6F E7 6E 
381ac     6C 6F 24 6F 
381b0     21 6F 1F 6F 
381b4     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
381b8     17 6F 13 6F 
381bc     54 6F 0E 6F 
381c0     0B 6F 4B 6F 
381c4     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
381c8     27 6D 1C 7B 
381cc     19 59 9F DB 
381d0     66 8E BC 94 
381d4     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
381d8     67 97 26 97 
381dc     6D 97 2B 97 
381e0     72 97 32 97 
381e4     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
381e8     C1 97 7F 97 
381ec     C6 97 85 97 
381f0     CB 97 CE 97 
381f4     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
381f8     EC 8A C4 C6 
381fc     68 4C F4 7D 
38200     63 6E E8 6E 
38204     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
38208     ED 6F A7 6F 
3820c     E7 6F A0 6F 
38210     E1 6F 9B 6F 
38214     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
38218     D5 6F 8F 6F 
3821c     CE 6F 45 6F 
38220     86 6F 68 6D 
38224     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
38228     C0 13 AD A2 
3822c     A7 8E 79 99 
38230     E6 97 E8 97 
38234     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
38238     F1 97 F3 97 
3823c     F6 97 F9 97 
38240     FB 97 FE 97 
38244     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
38248     4A 98 0A 98 
3824c     93 98 0F 98 
38250     7F 9B BF 8C 
38254     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
38258     91 7B 62 73 
3825c     1A 6E B9 70 
38260     EB 6F B3 70 
38264     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
38268     25 70 20 70 
3826c     1E 70 1B 70 
38270     18 70 15 70 
38274     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
38278     0D 70 09 70 
3827c     07 70 03 70 
38280     01 70 FD 6F 
38284     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
38288     F6 6F F2 6F 
3828c     EF 6F EC 6F 
38290     2C 70 E6 6F 
38294     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
38298     DD 6F 97 6F 
3829c     D7 6F 84 6E 
382a0     8F 6F 3F 7D 
382a4     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
382a6     FF FF FF FF 
382aa     FF FF       | atarist_spl file "atarist.spl" '512
382ac     00 00 00 00 
382b0     00 00 00 00 
382b4     00 00       | 	byte	$00[10]
382b6     17 7F F2 7F 
382ba     B2 7F 72 7F 
382be     33 7F F4 7E 
382c2     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
382c6     36 7E F5 7D 
382ca     E9 51 F2 0D 
382ce     8E 00 F3 FD 
382d2     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
382d6     57 FD 58 FD 
382da     5B FD 5C FD 
382de     5C FD 60 7D 
382e2     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
382e6     D6 7C 98 7C 
382ea     59 7C 1A 7C 
382ee     DC 7B 9E 7B 
382f2     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
382f6     F3 05 00 FD 
382fa     41 FB EA FA 
382fe     D9 FA DB FA 
38302     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
38306     E4 FA 9B 36 
3830a     F8 7A C0 7A 
3830e     84 7A 45 7A 
38312     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
38316     8E 79 51 79 
3831a     15 79 D7 78 
3831e     3C 1F EB FF 
38322     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
38326     6D F8 65 F8 
3832a     68 F8 6D F8 
3832e     70 F8 74 F8 
38332     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
38336     AB 60 79 60 
3833a     4B 60 1A 60 
3833e     E9 5F B9 5F 
38342     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
38346     FB 59 B2 0B 
3834a     92 FA 3A F7 
3834e     96 F6 79 F6 
38352     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
38356     82 F6 86 F6 
3835a     8C F6 DB 5D 
3835e     F1 5E C1 5E 
38362     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
38366     34 5E 04 5E 
3836a     D6 5D A6 5D 
3836e     78 5D D4 3E 
38372     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
38376     27 F5 BA F4 
3837a     AB F4 AD F4 
3837e     B2 F4 B8 F4 
38382     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
38386     26 5D 2B 5D 
3838a     FC 5C CD 5C 
3838e     9F 5C 70 5C 
38392     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
38396     E5 5B B8 5B 
3839a     DB 24 A7 FC 
3839e     D1 F4 4D F3 
383a2     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
383a6     04 F3 0B F3 
383aa     11 F3 16 F3 
383ae     DE 18 98 5B 
383b2     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
383b6     4E 4A 29 48 
383ba     A0 47 6A 47 
383be     43 47 20 47 
383c2     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
383c6     E2 F6 98 F2 
383ca     C5 F1 A3 F1 
383ce     A3 F1 A8 F1 
383d2     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
383d6     BF F1 00 3D 
383da     EF 46 CD 46 
383de     AA 46 86 46 
383e2     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
383e6     1C 46 F9 45 
383ea     D7 45 EE 43 
383ee     DE 02 E8 F3 
383f2     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
383f6     61 F0 65 F0 
383fa     6D F0 74 F0 
383fe     7C F0 84 F0 
38402     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
38406     8E 45 6D 45 
3840a     49 45 27 45 
3840e     05 45 E1 44 
38412     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
38416     F1 2F A9 FB 
3841a     8B F1 9B EF 
3841e     40 EF 36 EF 
38422     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
38426     4D EF 56 EF 
3842a     5E EF 7B 44 
3842e     8C 44 69 44 
38432     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
38436     03 44 E1 43 
3843a     C0 43 F5 37 
3843e     69 33 0F 11 
38442     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
38446     66 EE 37 EE 
3844a     38 EE 40 EE 
3844e     48 EE 51 EE 
38452     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
38456     7D 32 6A 32 
3845a     51 32 37 32 
3845e     1F 32 05 32 
38462     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
38466     B9 31 A1 31 
3846a     F1 04 F4 F1 
3846e     50 EE A0 ED 
38472     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
38476     93 ED 9A ED 
3847a     A4 ED AD ED 
3847e     F4 27 C1 31 
38482     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
38486     78 31 5F 31 
3848a     46 31 2E 31 
3848e     15 31 FC 30 
38492     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
38496     C4 EF 4A ED 
3849a     DC EC CB EC 
3849e     D2 EC DA EC 
384a2     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
384a6     F9 EC 64 2F 
384aa     0A 31 F1 30 
384ae     D9 30 C0 30 
384b2     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
384b6     78 30 5F 30 
384ba     46 30 38 23 
384be     A6 F6 19 EE 
384c2     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
384c6     20 EC 28 EC 
384ca     32 EC 3C EC 
384ce     47 EC 51 EC 
384d2     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
384d6     A3 22 93 22 
384da     7F 22 6E 22 
384de     5D 22 4C 22 
384e2     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
384e6     77 09 76 F1 
384ea     CC EC F0 EB 
384ee     CD EB CE EB 
384f2     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
384f6     ED EB F5 EB 
384fa     3E F6 6B 22 
384fe     5F 22 4E 22 
38502     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
38506     1B 22 0B 22 
3850a     FA 21 E9 21 
3850e     D8 21 4D FF 
38512     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
38516     92 EB 7B EB 
3851a     82 EB 8C EB 
3851e     97 EB A1 EB 
38522     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
38526     15 22 04 22 
3852a     F3 21 E3 21 
3852e     D2 21 C0 21 
38532     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
38536     8E 21 7D 21 
3853a     9A F8 A4 ED 
3853e     8E EB 2F EB 
38542     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
38546     37 EB 42 EB 
3854a     4C EB 57 EB 
3854e     B2 17 22 19 
38552     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
38556     FD 18 EF 18 
3855a     E3 18 D6 18 
3855e     CA 18 BD 18 
38562     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
38566     60 EC 35 EB 
3856a     01 EB 01 EB 
3856e     0C EB 16 EB 
38572     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
38576     34 EB D0 18 
3857a     00 19 F4 18 
3857e     E8 18 DA 18 
38582     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
38586     B6 18 A9 18 
3858a     9D 18 91 05 
3858e     F0 EF CA EB 
38592     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
38596     E8 EA F2 EA 
3859a     FE EA 07 EB 
3859e     12 EB C2 EF 
385a2     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
385a6     D9 18 CD 18 
385aa     C0 18 B3 18 
385ae     A7 18 9B 18 
385b2     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
385b6     B8 FC 30 EE 
385ba     61 EB DC EA 
385be     CD EA D2 EA 
385c2     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
385c6     F3 EA FE EA 
385ca     D2 09 D1 18 
385ce     C3 18 17 18 
385d2     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
385d6     66 11 52 11 
385da     49 11 41 11 
385de     38 11 E0 F4 
385e2     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
385e6     C9 EA C5 EA 
385ea     CF EA DB EA 
385ee     E6 EA EF EA 
385f2     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
385f6     89 11 80 11 
385fa     78 11 6E 11 
385fe     67 11 5D 11 
38602     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
38606     43 11 32 0D 
3860a     9C F1 07 EC 
3860e     F8 EA CD EA 
38612     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
38616     E4 EA ED EA 
3861a     F8 EA 02 EB 
3861e     55 11 91 11 
38622     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
38626     75 11 6E 11 
3862a     64 11 5E 11 
3862e     54 11 4A 11 
38632     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
38636     A8 EB F1 EA 
3863a     D9 EA DC EA 
3863e     E8 EA F1 EA 
38642     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
38646     A6 EB 9E 11 
3864a     A0 11 96 11 
3864e     8D 11 85 11 
38652     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
38656     6A 11 CA 0D 
3865a     36 0B 57 F8 
3865e     6C ED 57 EB 
38662     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
38666     F4 EA FF EA 
3866a     09 EB 15 EB 
3866e     1E EB 1A FD 
38672     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
38676     ED 0A E8 0A 
3867a     E2 0A DC 0A 
3867e     D6 0A D1 0A 
38682     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
38686     F8 F3 BC EC 
3868a     57 EB 1E EB 
3868e     18 EB 24 EB 
38692     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
38696     42 EB 4D EB 
3869a     08 09 20 0B 
3869e     1A 0B 14 0B 
386a2     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
386a6     04 0B FE 0A 
386aa     F9 0A F2 0A 
386ae     84 08 3A F1 
386b2     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
386b6     42 EB 42 EB 
386ba     4E EB 57 EB 
386be     62 EB 6B EB 
386c2     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
386c6     48 0B 43 0B 
386ca     3C 0B 36 0B 
386ce     31 0B 2C 0B 
386d2     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
386d6     1B 0B 5C 00 
386da     6A EF 1B EC 
386de     81 EB 6A EB 
386e2     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
386e6     85 EB 8E EB 
386ea     99 EB A3 EB 
386ee     DD 05 E5 05 
386f2     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
386f6     DB 05 D8 05 
386fa     D5 05 D1 05 
386fe     D0 05 CB 05 
38702     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
38706     0C EC BB EB 
3870a     B3 EB BB EB 
3870e     C5 EB D0 EB 
38712     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
38716     E4 F7 2C 06 
3871a     28 06 24 06 
3871e     22 06 1F 06 
38722     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
38726     16 06 14 06 
3872a     0F 06 D0 F3 
3872e     65 ED 2D EC 
38732     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
38736     01 EC 0A EC 
3873a     14 EC 1E EC 
3873e     29 EC FB 03 
38742     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
38746     63 06 60 06 
3874a     5E 06 59 06 
3874e     58 06 54 06 
38752     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
38756     69 F1 21 ED 
3875a     55 EC 33 EC 
3875e     36 EC 40 EC 
38762     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
38766     5C EC 68 EC 
3876a     92 02 D9 02 
3876e     D7 02 D7 02 
38772     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
38776     D1 02 D1 02 
3877a     CE 02 CD 02 
3877e     5D FC 80 EF 
38782     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
38786     83 EC 8A EC 
3878a     93 EC 9C EC 
3878e     A5 EC B1 EC 
38792     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
38796     2B 03 2A 03 
3879a     29 03 26 03 
3879e     25 03 24 03 
387a2     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
387a6     1F 03 70 F7 
387aa     D0 EE 27 ED 
387ae     DB EC D4 EC 
387b2     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
387b6     F0 EC FA EC 
387ba     02 ED F9 F4 
387be     7B 03 7C 03 
387c2     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
387c6     75 03 73 03 
387ca     72 03 70 03 
387ce     6D 03 6C 03 
387d2     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
387d6     54 ED 22 ED 
387da     22 ED 2C ED 
387de     35 ED 3F ED 
387e2     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
387e6     14 01 C3 03 
387ea     C1 03 C0 03 
387ee     5F 01 A5 00 
387f2     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
387f6     7B 00 7C 00 
387fa     20 00 85 F1 
387fe     2A EE 89 ED 
38802     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
38806     80 ED 87 ED 
3880a     90 ED 9A ED 
3880e     A3 ED 73 00 
38812     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
38816     D0 00 D0 00 
3881a     D0 00 D0 00 
3881e     D0 00 CF 00 
38822     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
38826     80 F0 3D EE 
3882a     D5 ED C7 ED 
3882e     CD ED D6 ED 
38832     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
38836     F2 ED FA ED 
3883a     1D 01 29 01 
3883e     27 01 27 01 
38842     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
38846     25 01 26 01 
3884a     26 01 23 01 
3884e     D0 F7 EC EF 
38852     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
38856     1C EE 24 EE 
3885a     2D EE 37 EE 
3885e     40 EE 47 EE 
38862     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
38866     7D 01 7B 01 
3886a     7A 01 7A 01 
3886e     79 01 78 01 
38872     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
38876     84 FE DE F3 
3887a     6C EF 93 EE 
3887e     72 EE 72 EE 
38882     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
38886     8B EE 95 EE 
3888a     9E EE 15 FC 
3888e     67 FE 67 FE 
38892     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
38896     6B FE 6B FE 
3889a     6D FE 6D FE 
3889e     6D FE 6F FE 
388a2     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
388a6     DF EE CC EE 
388aa     CF EE D9 EE 
388ae     E1 EE EA EE 
388b2     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
388b6     5A FE C4 FE 
388ba     C3 FE C5 FE 
388be     C6 FE C6 FE 
388c2     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
388c6     C8 FE C7 FE 
388ca     DA FB 85 F1 
388ce     8D EF 31 EF 
388d2     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
388d6     34 EF 3E EF 
388da     46 EF 4F EF 
388de     57 EF 0D FF 
388e2     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
388e6     1F FF 1F FF 
388ea     21 FF 21 FF 
388ee     21 FF 21 FF 
388f2     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
388f6     15 F1 BE EF 
388fa     84 EF 7E EF 
388fe     88 EF 8F EF 
38902     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
38906     A9 EF 06 F2 
3890a     A6 FC AB FC 
3890e     AD FC AE FC 
38912     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
38916     B2 FC B4 FC 
3891a     B6 FC B7 FC 
3891e     8B F4 BD F0 
38922     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
38926     E4 EF EE EF 
3892a     F6 EF FD EF 
3892e     04 F0 0E F0 
38932     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
38936     0B FD 0D FD 
3893a     0F FD 11 FD 
3893e     11 FD 13 FD 
38942     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
38946     17 FD 64 F3 
3894a     CD F0 52 F0 
3894e     41 F0 45 F0 
38952     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
38956     5B F0 64 F0 
3895a     6D F0 FB FC 
3895e     65 FD 68 FD 
38962     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
38966     6C FD 6D FD 
3896a     6F FD 70 FD 
3896e     72 FD B3 FB 
38972     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
38976     A4 F0 99 F0 
3897a     A0 F0 A8 F0 
3897e     AE F0 B9 F0 
38982     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
38986     CB FB DD FB 
3898a     DE FB E0 FB 
3898e     E3 FB E3 FB 
38992     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
38996     E9 FB EC FB 
3899a     62 F7 27 F2 
3899e     2A F1 FF F0 
389a2     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
389a6     0C F1 13 F1 
389aa     1B F1 23 F1 
389ae     33 F2 3C FC 
389b2     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
389b6     42 FC 45 FC 
389ba     47 FC 48 FC 
389be     4A FC 4C FC 
389c2     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
389c6     20 F2 77 F1 
389ca     5C F1 5F F1 
389ce     64 F1 6C F1 
389d2     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
389d6     83 F1 DC F8 
389da     9A FC 9A FC 
389de     9B FC 9E FC 
389e2     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
389e6     A3 FC A4 FC 
389ea     A6 FC A9 FC 
389ee     90 F4 33 F2 
389f2     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
389f6     BA F1 BF F1 
389fa     C7 F1 CE F1 
389fe     D6 F1 DC F1 
38a02     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
38a06     F3 FC F5 FC 
38a0a     FE FB 79 FB 
38a0e     62 FB 5F FB 
38a12     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
38a16     6F FA AF F3 
38a1a     53 F2 12 F2 
38a1e     0F F2 15 F2 
38a22     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
38a26     2A F2 32 F2 
38a2a     38 F2 9A FB 
38a2e     AF FB B1 FB 
38a32     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
38a36     B7 FB B8 FB 
38a3a     BA FB BC FB 
38a3e     C1 FB 3B F8 
38a42     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
38a46     6E F2 6C F2 
38a4a     74 F2 7A F2 
38a4e     81 F2 87 F2 
38a52     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
38a56     06 FC 09 FC 
38a5a     0C FC 0E FC 
38a5e     0F FC 12 FC 
38a62     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
38a66     17 FC 1A FC 
38a6a     B2 F6 7B F3 
38a6e     DD F2 C5 F2 
38a72     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
38a76     D4 F2 DB F2 
38a7a     E0 F2 E8 F2 
38a7e     28 F8 60 FC 
38a82     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
38a86     64 FC 66 FC 
38a8a     68 FC 6A FC 
38a8e     6D FC 52 FC 
38a92     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
38a96     78 F3 24 F3 
38a9a     1A F3 1E F3 
38a9e     24 F3 2A F3 
38aa2     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
38aa6     3D F3 80 FA 
38aaa     0C FB 0F FB 
38aae     10 FB 14 FB 
38ab2     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
38ab6     1B FB 1D FB 
38aba     1F FB 92 FA 
38abe     DE F4 AE F3 
38ac2     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
38ac6     79 F3 7E F3 
38aca     84 F3 8C F3 
38ace     92 F3 97 F3 
38ad2     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
38ad6     67 FB 69 FB 
38ada     6B FB 6F FB 
38ade     71 FB 72 FB 
38ae2     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
38ae6     E3 F8 BA F4 
38aea     EE F3 CC F3 
38aee     CA F3 CF F3 
38af2     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
38af6     E2 F3 E8 F3 
38afa     ED F3 B7 FB 
38afe     BC FB BE FB 
38b02     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
38b06     C4 FB C6 FB 
38b0a     C8 FB C9 FB 
38b0e     CC FB 8F F7 
38b12     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
38b16     1E F4 1E F4 
38b1a     24 F4 2A F4 
38b1e     30 F4 38 F4 
38b22     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
38b26     AD FA B1 FA 
38b2a     B4 FA B6 FA 
38b2e     BA FA BB FA 
38b32     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
38b36     C2 FA C6 FA 
38b3a     55 F6 C6 F4 
38b3e     7D F4 72 F4 
38b42     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
38b46     83 F4 89 F4 
38b4a     8F F4 94 F4 
38b4e     66 FA 03 FB 
38b52     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
38b56     0A FB 0E FB 
38b5a     10 FB 11 FB 
38b5e     16 FB 18 FB 
38b62     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
38b66     F9 F4 CA F4 
38b6a     C5 F4 CB F4 
38b6e     D1 F4 D7 F4 
38b72     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
38b76     E8 F4 3F FB 
38b7a     56 FB 58 FB 
38b7e     5A FB 5E FB 
38b82     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
38b86     64 FB 64 FB 
38b8a     69 FB 99 F9 
38b8e     E9 F5 33 F5 
38b92     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
38b96     1D F5 22 F5 
38b9a     27 F5 2E F5 
38b9e     32 F5 37 F5 
38ba2     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
38ba6     BC FA BC FA 
38baa     C1 FA C2 FA 
38bae     C4 FA C8 FA 
38bb2     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
38bb6     F9 F7 DB F5 
38bba     78 F5 69 F5 
38bbe     6A F5 70 F5 
38bc2     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
38bc6     7F F5 85 F5 
38bca     6E F7 06 FB 
38bce     0A FB 0B FB 
38bd2     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
38bd6     14 FB 15 FB 
38bda     18 FB 1B FB 
38bde     1D FB 70 F7 
38be2     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
38be6     B6 F5 BB F5 
38bea     C0 F5 C6 F5 
38bee     CA F5 CF F5 
38bf2     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
38bf6     54 FB 56 FB 
38bfa     5A FB 5B FB 
38bfe     5E FB 5F FB 
38c02     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
38c06     67 FB 52 FB 
38c0a     29 F7 33 F6 
38c0e     06 F6 02 F6 
38c12     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
38c16     10 F6 16 F6 
38c1a     1A F6 1F F6 
38c1e     81 FB 9F FB 
38c22     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
38c26     51 FB F2 FA 
38c2a     E3 FA E3 FA 
38c2e     E5 FA E9 FA 
38c32     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
38c36     64 F6 4D F6 
38c3a     4D F6 53 F6 
38c3e     57 F6 5C F6 
38c42     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
38c46     6A F6 19 FB 
38c4a     1E FB 22 FB 
38c4e     23 FB 24 FB 
38c52     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
38c56     2C FB 2E FB 
38c5a     32 FB F0 F8 
38c5e     01 F7 A5 F6 
38c62     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
38c66     9F F6 A3 F6 
38c6a     A6 F6 AC F6 
38c6e     B0 F6 EB F7 
38c72     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
38c76     68 FB 6C FB 
38c7a     6E FB 71 FB 
38c7e     72 FB 74 FB 
38c82     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
38c86     71 F8 21 F7 
38c8a     E5 F6 DD F6 
38c8e     E1 F6 E6 F6 
38c92     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
38c96     F5 F6 F7 F6 
38c9a     F7 FA AB FB 
38c9e     AD FB AF FB 
38ca2     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
38ca6     B6 FB B9 FB 
38caa     BB FB BC FB 
38cae     21 FB 07 F8 
38cb2     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
38cb6     22 F7 26 F7 
38cba     2B F7 2E F7 
38cbe     34 F7 38 F7 
38cc2     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
38cc6     13 FB 16 FB 
38cca     17 FB 1B FB 
38cce     1E FB 20 FB 
38cd2     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
38cd6     26 FB 77 FA 
38cda     F3 F7 7C F7 
38cde     67 F7 6A F7 
38ce2     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
38ce6     74 F7 7A F7 
38cea     7E F7 82 F7 
38cee     53 FB 5A FB 
38cf2     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
38cf6     5F FB 63 FB 
38cfa     65 FB 67 FB 
38cfe     69 FB 6A FB 
38d02     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
38d06     B5 F7 A9 F7 
38d0a     AD F7 B0 F7 
38d0e     B5 F7 B8 F7 
38d12     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
38d16     6E F8 99 FB 
38d1a     9C FB 9D FB 
38d1e     9F FB A4 FB 
38d22     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
38d26     A9 FB AB FB 
38d2a     AD FB 46 F9 
38d2e     26 F8 F0 F7 
38d32     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
38d36     F4 F7 F8 F7 
38d3a     FB F7 FF F7 
38d3e     03 F8 65 FA 
38d42     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
38d46     2B FB 2F FB 
38d4a     30 FB 32 FB 
38d4e     34 FB 38 FB 
38d52     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
38d56     E9 F8 4A F8 
38d5a     2E F8 2C F8 
38d5e     2F F8 36 F8 
38d62     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
38d66     41 F8 44 F8 
38d6a     4A FB 67 FB 
38d6e     68 FB 6B FB 
38d72     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
38d76     73 FB 74 FB 
38d7a     78 FB 7A FB 
38d7e     14 FB E7 F8 
38d82     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
38d86     6D F8 70 F8 
38d8a     73 F8 78 F8 
38d8e     7C F8 80 F8 
38d92     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
38d96     A6 FB A7 FB 
38d9a     A9 FB AC FB 
38d9e     AF FB B1 FB 
38da2     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
38da6     B7 FB 73 FA 
38daa     F8 F8 B4 F8 
38dae     A9 F8 AB F8 
38db2     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
38db6     B4 F8 B8 F8 
38dba     BB F8 FA F8 
38dbe     64 FB 65 FB 
38dc2     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
38dc6     6D FB 6F FB 
38dca     70 FB 74 FB 
38dce     77 FB 77 FB 
38dd2     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
38dd6     E9 F8 E4 F8 
38dda     E8 F8 EB F8 
38dde     EE F8 F2 F8 
38de2     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
38de6     B5 FA 9F FB 
38dea     A1 FB A4 FB 
38dee     A5 FB A9 FB 
38df2     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
38df6     AE FB B1 FB 
38dfa     B2 FB C7 F9 
38dfe     39 F9 22 F9 
38e02     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
38e06     26 F9 2A F9 
38e0a     2E F9 32 F9 
38e0e     33 F9 BA FB 
38e12     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
38e16     DE FB E1 FB 
38e1a     E2 FB E4 FB 
38e1e     E5 FB E7 FB 
38e22     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
38e26     C5 F9 67 F9 
38e2a     57 F9 56 F9 
38e2e     5B F9 5F F9 
38e32     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
38e36     68 F9 6C F9 
38e3a     0B FC 11 FC 
38e3e     14 FC 15 FC 
38e42     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
38e46     B5 FB B5 FB 
38e4a     B6 FB B8 FB 
38e4e     E9 FA C8 F9 
38e52     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
38e56     90 F9 94 F9 
38e5a     95 F9 99 F9 
38e5e     9D F9 9F F9 
38e62     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
38e66     DE FB DF FB 
38e6a     E2 FB E4 FB 
38e6e     E6 FB E8 FB 
38e72     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
38e76     EF FB AC FA 
38e7a     E9 F9 C7 F9 
38e7e     C3 F9 C8 F9 
38e82     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
38e86     D0 F9 D4 F9 
38e8a     D6 F9 0E FB 
38e8e     11 FC 13 FC 
38e92     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
38e96     19 FC 1B FC 
38e9a     1D FC 1E FC 
38e9e     21 FC 22 FC 
38ea2     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
38ea6     F7 F9 F7 F9 
38eaa     FB F9 FE F9 
38eae     00 FA 03 FA 
38eb2     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
38eb6     1B FC 45 FC 
38eba     46 FC 48 FC 
38ebe     4A FC 4B FC 
38ec2     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
38ec6     52 FC 54 FC 
38eca     F3 FB 82 FA 
38ece     35 FA 28 FA 
38ed2     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
38ed6     31 FA 32 FA 
38eda     37 FA 37 FA 
38ede     3C FA 00 FC 
38ee2     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
38ee6     09 FC 0B FC 
38eea     0F FC 12 FC 
38eee     12 FC 15 FC 
38ef2     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
38ef6     8D FA 60 FA 
38efa     5B FA 5C FA 
38efe     60 FA 61 FA 
38f02     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
38f06     6C FA 6D FA 
38f0a     37 FC 3A FC 
38f0e     3B FC 3D FC 
38f12     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
38f16     43 FC 44 FC 
38f1a     45 FC 47 FC 
38f1e     51 FB AB FA 
38f22     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
38f26     8E FA 91 FA 
38f2a     93 FA 95 FA 
38f2e     98 FA 9B FA 
38f32     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
38f36     68 FC 6A FC 
38f3a     6C FC 6E FC 
38f3e     70 FC 72 FC 
38f42     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
38f46     76 FC 3B FB 
38f4a     D0 FA BB FA 
38f4e     B9 FA BD FA 
38f52     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
38f56     C4 FA C6 FA 
38f5a     CA FA 13 FC 
38f5e     3A FC 3A FC 
38f62     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
38f66     41 FC 43 FC 
38f6a     44 FC 47 FC 
38f6e     48 FC 3C FC 
38f72     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
38f76     E6 FA E8 FA 
38f7a     EB FA EE FA 
38f7e     F0 FA F2 FA 
38f82     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
38f86     61 FC 66 FC 
38f8a     68 FC 6B FC 
38f8e     6C FC 6E FC 
38f92     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
38f96     73 FC 75 FC 
38f9a     13 FC 3F FB 
38f9e     17 FB 12 FB 
38fa2     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
38fa6     1A FB 1D FB 
38faa     1F FB 20 FB 
38fae     23 FB 92 FC 
38fb2     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
38fb6     96 FC 97 FC 
38fba     9A FC 9C FC 
38fbe     9E FC 9F FC 
38fc2     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
38fc6     5A FB 41 FB 
38fca     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
38fce     73 32 00 04 
38fd2     00 00 10 00 
38fd6     00 00 00 00 
38fda     00 00 00 00 | atari2 file "atari2.s2"
38fde     43 87 43 87 
38fe2     43 87 44 87 
38fe6     43 87 44 87 
38fea     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
38fee     43 87 43 87 
38ff2     43 87 44 87 
38ff6     43 87 43 87 
38ffa     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
38ffe     44 87 43 87 
39002     44 87 43 87 
39006     43 87 43 87 
3900a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3900e     43 87 43 87 
39012     44 87 43 87 
39016     44 87 44 87 
3901a     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3901e     43 87 43 87 
39022     44 87 43 87 
39026     43 87 42 87 
3902a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3902e     43 87 43 87 
39032     43 87 43 87 
39036     44 87 43 87 
3903a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3903e     44 87 44 87 
39042     43 87 44 87 
39046     43 87 44 87 
3904a     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3904e     44 87 43 87 
39052     44 87 44 87 
39056     43 87 43 87 
3905a     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3905e     43 87 44 87 
39062     44 87 43 87 
39066     43 87 44 87 
3906a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3906e     43 87 43 87 
39072     43 87 43 87 
39076     43 87 43 87 
3907a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
3907e     42 87 43 87 
39082     44 87 42 87 
39086     43 87 43 87 
3908a     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3908e     43 87 44 87 
39092     44 87 43 87 
39096     43 87 43 87 
3909a     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3909e     43 87 5C 87 
390a2     EE 86 AC 87 
390a6     4C 7C A3 78 
390aa     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
390ae     BC 78 BB 78 
390b2     BD 78 BC 78 
390b6     BB 78 BD 78 
390ba     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
390be     BB 78 BB 78 
390c2     BC 78 BC 78 
390c6     BC 78 BB 78 
390ca     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
390ce     BC 78 BC 78 
390d2     BC 78 BC 78 
390d6     BC 78 BC 78 
390da     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
390de     BB 78 BC 78 
390e2     A0 78 4C 7C 
390e6     11 7A 29 89 
390ea     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
390ee     44 87 43 87 
390f2     44 87 43 87 
390f6     43 87 42 87 
390fa     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
390fe     43 87 43 87 
39102     44 87 ED 85 
39106     71 85 52 79 
3910a     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3910e     BC 78 BC 78 
39112     BC 78 BC 78 
39116     BC 78 BC 78 
3911a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3911e     BC 78 BC 78 
39122     BC 78 A0 78 
39126     CF 7A B9 81 
3912a     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3912e     44 87 43 87 
39132     43 87 44 87 
39136     43 87 44 87 
3913a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3913e     43 87 43 87 
39142     43 87 43 87 
39146     44 87 43 87 
3914a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3914e     43 87 43 87 
39152     44 87 43 87 
39156     44 87 43 87 
3915a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3915e     44 87 43 87 
39162     43 87 43 87 
39166     5A 87 39 81 
3916a     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3916e     A5 78 BC 78 
39172     BB 78 BC 78 
39176     BB 78 BC 78 
3917a     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3917e     BC 78 BC 78 
39182     BC 78 BC 78 
39186     BC 78 8F 79 
3918a     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3918e     09 85 47 87 
39192     43 87 43 87 
39196     42 87 42 87 
3919a     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3919e     43 87 43 87 
391a2     43 87 43 87 
391a6     43 87 44 87 
391aa     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
391ae     43 87 43 87 
391b2     44 87 43 87 
391b6     42 87 43 87 
391ba     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
391be     44 87 43 87 
391c2     43 87 43 87 
391c6     44 87 44 87 
391ca     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
391ce     94 78 55 7A 
391d2     B9 78 BC 78 
391d6     BC 78 BC 78 
391da     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
391de     BC 78 BB 78 
391e2     BC 78 BC 78 
391e6     BC 78 BC 78 
391ea     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
391ee     BB 78 BC 78 
391f2     BC 78 BC 78 
391f6     BB 78 BC 78 
391fa     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
391fe     BC 78 BC 78 
39202     BD 78 BC 78 
39206     BC 78 BB 78 
3920a     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3920e     94 78 B3 84 
39212     36 84 4A 87 
39216     43 87 43 87 
3921a     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3921e     43 87 44 87 
39222     43 87 43 87 
39226     43 87 43 87 
3922a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3922e     43 87 44 87 
39232     43 87 44 87 
39236     43 87 43 87 
3923a     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3923e     43 87 43 87 
39242     43 87 45 87 
39246     43 87 43 87 
3924a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3924e     43 87 44 87 
39252     44 87 44 87 
39256     43 87 43 87 
3925a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3925e     43 87 42 87 
39262     43 87 43 87 
39266     44 87 43 87 
3926a     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3926e     54 87 3C 82 
39272     36 83 52 79 
39276     C6 78 BC 78 
3927a     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
3927e     BB 78 BB 78 
39282     BC 78 BC 78 
39286     BC 78 BC 78 
3928a     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3928e     BD 78 ED 78 
39292     1B 79 F4 83 
39296     4D 83 4E 87 
3929a     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3929e     44 87 43 87 
392a2     42 87 44 87 
392a6     43 87 42 87 
392aa     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
392ae     43 87 54 87 
392b2     26 82 B3 84 
392b6     D6 77 BB 78 
392ba     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
392be     BC 78 BB 78 
392c2     BB 78 BB 78 
392c6     BB 78 BB 78 
392ca     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
392ce     BC 78 BC 78 
392d2     26 79 18 75 
392d6     36 83 1F 84 
392da     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
392de     43 87 43 87 
392e2     43 87 43 87 
392e6     43 87 44 87 
392ea     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
392ee     43 87 44 87 
392f2     44 87 43 87 
392f6     43 87 43 87 
392fa     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
392fe     43 87 43 87 
39302     43 87 43 87 
39306     44 87 44 87 
3930a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3930e     44 87 43 87 
39312     43 87 43 87 
39316     43 87 44 87 
3931a     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3931e     44 87 44 87 
39322     44 87 43 87 
39326     44 87 43 87 
3932a     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3932e     43 87 43 87 
39332     43 87 44 87 
39336     44 87 43 87 
3933a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3933e     43 87 43 87 
39342     43 87 43 87 
39346     43 87 44 87 
3934a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3934e     43 87 44 87 
39352     43 87 44 87 
39356     19 87 7D 86 
3935a     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3935e     B1 78 BC 78 
39362     BC 78 BC 78 
39366     BC 78 BC 78 
3936a     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3936e     BC 78 BC 78 
39372     BD 78 BC 78 
39376     B7 78 3B 7B 
3937a     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
3937e     96 86 44 87 
39382     43 87 43 87 
39386     43 87 43 87 
3938a     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3938e     44 87 44 87 
39392     43 87 44 87 
39396     43 87 44 87 
3939a     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3939e     43 87 44 87 
393a2     43 87 44 87 
393a6     43 87 44 87 
393aa     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
393ae     43 87 44 87 
393b2     43 87 43 87 
393b6     44 87 43 87 
393ba     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
393be     44 87 44 87 
393c2     43 87 43 87 
393c6     43 87 44 87 
393ca     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
393ce     43 87 43 87 
393d2     43 87 43 87 
393d6     44 87 44 87 
393da     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
393de     36 83 CF 7A 
393e2     AB 78 BB 78 
393e6     BC 78 BC 78 
393ea     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
393ee     BB 78 BC 78 
393f2     BC 78 BC 78 
393f6     BC 78 BC 78 
393fa     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
393fe     BC 78 BC 78 
39402     BC 78 BB 78 
39406     BC 78 BC 78 
3940a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3940e     BB 78 BC 78 
39412     BB 78 BC 78 
39416     BC 78 BD 78 
3941a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3941e     BC 78 BC 78 
39422     BC 78 BC 78 
39426     BC 78 BD 78 
3942a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3942e     BC 78 BB 78 
39432     BC 78 BB 78 
39436     BB 78 BC 78 
3943a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3943e     BC 78 BC 78 
39442     BC 78 BC 78 
39446     BC 78 BB 78 
3944a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3944e     BC 78 BC 78 
39452     BC 78 BD 78 
39456     BB 78 BC 78 
3945a     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3945e     BC 78 BC 78 
39462     BC 78 BB 78 
39466     BC 78 BB 78 
3946a     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3946e     BB 78 BC 78 
39472     BC 78 BC 78 
39476     BC 78 BB 78 
3947a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3947e     BC 78 BC 78 
39482     BC 78 BB 78 
39486     BC 78 BB 78 
3948a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3948e     BC 78 BC 78 
39492     BC 78 BC 78 
39496     BB 78 BC 78 
3949a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3949e     BC 78 9F 78 
394a2     52 79 B3 84 
394a6     2F 86 60 87 
394aa     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
394ae     44 87 43 87 
394b2     43 87 43 87 
394b6     43 87 43 87 
394ba     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
394be     43 87 43 87 
394c2     43 87 44 87 
394c6     43 87 43 87 
394ca     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
394ce     43 87 43 87 
394d2     43 87 43 87 
394d6     43 87 44 87 
394da     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
394de     44 87 44 87 
394e2     5E 87 BC 80 
394e6     FB 80 94 78 
394ea     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
394ee     BD 78 BC 78 
394f2     BB 78 BC 78 
394f6     BB 78 BB 78 
394fa     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
394fe     BC 78 BB 78 
39502     BB 78 6B 79 
39506     D6 77 AC 87 
3950a     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3950e     43 87 44 87 
39512     43 87 43 87 
39516     44 87 43 87 
3951a     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3951e     43 87 44 87 
39522     43 87 5C 87 
39526     E7 80 00 80 
3952a     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3952e     BC 78 BD 78 
39532     BC 78 BC 78 
39536     BC 78 BB 78 
3953a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3953e     BC 78 BC 78 
39542     BB 78 BC 78 
39546     BB 78 BC 78 
3954a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3954e     BB 78 BC 78 
39552     BC 78 BC 78 
39556     BC 78 BC 78 
3955a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3955e     BC 78 BC 78 
39562     BC 78 BC 78 
39566     A0 78 8D 7B 
3956a     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
3956e     60 87 43 87 
39572     44 87 44 87 
39576     43 87 43 87 
3957a     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
3957e     44 87 43 87 
39582     43 87 43 87 
39586     44 87 73 86 
3958a     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3958e     51 7B B6 78 
39592     BC 78 BD 78 
39596     BC 78 BC 78 
3959a     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3959e     BB 78 BC 78 
395a2     BD 78 BB 78 
395a6     BC 78 BB 78 
395aa     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
395ae     BC 78 BC 78 
395b2     BC 78 BC 78 
395b6     BB 78 BC 78 
395ba     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
395be     BC 78 BB 78 
395c2     BB 78 BC 78 
395c6     BC 78 BB 78 
395ca     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
395ce     22 8C AF 84 
395d2     48 87 43 87 
395d6     44 87 43 87 
395da     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
395de     43 87 42 87 
395e2     43 87 43 87 
395e6     44 87 43 87 
395ea     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
395ee     43 87 43 87 
395f2     44 87 44 87 
395f6     43 87 43 87 
395fa     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
395fe     43 87 43 87 
39602     43 87 43 87 
39606     44 87 43 87 
3960a     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3960e     9F 8B D6 77 
39612     16 7C B3 78 
39616     BC 78 BB 78 
3961a     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3961e     BB 78 BC 78 
39622     BB 78 BC 78 
39626     BC 78 BC 78 
3962a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3962e     BC 78 BB 78 
39632     BB 78 BC 78 
39636     BB 78 BC 78 
3963a     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3963e     BB 78 BB 78 
39642     BC 78 BC 78 
39646     BC 78 BB 78 
3964a     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3964e     BC 78 BC 78 
39652     BC 78 BD 78 
39656     BB 78 BC 78 
3965a     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
3965e     BC 78 BC 78 
39662     BC 78 BB 78 
39666     BC 78 BC 78 
3966a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3966e     A8 78 54 7E 
39672     F4 83 17 82 
39676     50 87 43 87 
3967a     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
3967e     44 87 43 87 
39682     44 87 43 87 
39686     43 87 44 87 
3968a     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3968e     43 87 28 87 
39692     20 85 CF 7A 
39696     70 7D AD 78 
3969a     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3969e     BB 78 BC 78 
396a2     BC 78 BC 78 
396a6     BB 78 BB 78 
396aa     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
396ae     BB 78 B2 78 
396b2     9A 7C CF 7A 
396b6     4A 87 0D 87 
396ba     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
396be     43 87 44 87 
396c2     43 87 44 87 
396c6     43 87 43 87 
396ca     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
396ce     44 87 43 87 
396d2     28 87 51 85 
396d6     11 7A 1E 7D 
396da     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
396de     BC 78 BB 78 
396e2     BC 78 BC 78 
396e6     BC 78 BC 78 
396ea     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
396ee     BB 78 BC 78 
396f2     BB 78 BC 78 
396f6     BC 78 BC 78 
396fa     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
396fe     BB 78 BC 78 
39702     BC 78 BC 78 
39706     BD 78 BB 78 
3970a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3970e     BC 78 BB 78 
39712     BC 78 BC 78 
39716     BC 78 BB 78 
3971a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3971e     BC 78 BC 78 
39722     BC 78 BC 78 
39726     BB 78 BC 78 
3972a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3972e     BC 78 BD 78 
39732     BC 78 BC 78 
39736     BC 78 BB 78 
3973a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3973e     BC 78 BB 78 
39742     BB 78 BC 78 
39746     BC 78 BB 78 
3974a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3974e     BB 78 BB 78 
39752     BB 78 BC 78 
39756     B6 78 48 7D 
3975a     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
3975e     56 87 43 87 
39762     42 87 44 87 
39766     44 87 43 87 
3976a     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3976e     43 87 44 87 
39772     43 87 44 87 
39776     4C 87 7E 83 
3977a     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
3977e     F7 78 BC 78 
39782     BC 78 BB 78 
39786     BB 78 BC 78 
3978a     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3978e     BC 78 BB 78 
39792     BC 78 BC 78 
39796     BB 78 BC 78 
3979a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3979e     BB 78 BC 78 
397a2     BC 78 BC 78 
397a6     BC 78 BB 78 
397aa     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
397ae     BC 78 BC 78 
397b2     BC 78 BC 78 
397b6     BC 78 BB 78 
397ba     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
397be     BC 78 BB 78 
397c2     BB 78 BC 78 
397c6     BC 78 BB 78 
397ca     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
397ce     BC 78 BC 78 
397d2     BB 78 BC 78 
397d6     BC 78 BC 78 
397da     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
397de     73 32 00 04 
397e2     00 00 10 00 
397e6     00 00 00 00 
397ea     00 00 00 00 | atari12 file "atari12.s2"
397ee     00 6D 00 6D 
397f2     00 6D 00 6D 
397f6     00 6D 00 6D 
397fa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
397fe     00 6D 00 6D 
39802     00 6D 00 6D 
39806     00 6D 00 6D 
3980a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3980e     00 6D 00 6D 
39812     00 6D 00 6D 
39816     00 6D 00 6D 
3981a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3981e     00 6D 00 6D 
39822     00 6D 00 6D 
39826     00 6D 00 6D 
3982a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3982e     00 6D 00 6D 
39832     00 6D 00 6D 
39836     00 6D 00 6D 
3983a     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
3983e     00 6C 00 6C 
39842     00 6C 00 6C 
39846     00 6C 00 6C 
3984a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3984e     00 6C 00 6C 
39852     00 6C 00 6C 
39856     00 6C 00 6C 
3985a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3985e     00 6C 00 6C 
39862     00 6C 00 6C 
39866     00 6C 00 6C 
3986a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3986e     00 6C 00 6C 
39872     00 6C 00 6C 
39876     00 6C 00 6C 
3987a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3987e     00 6C 00 6C 
39882     00 6C 00 6C 
39886     00 6C 00 6C 
3988a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3988e     00 6C 00 6C 
39892     00 6C 00 6C 
39896     00 6C 00 6C 
3989a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3989e     00 6C 00 6C 
398a2     00 6C 00 6C 
398a6     00 6C 00 6C 
398aa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
398ae     00 6C 00 6C 
398b2     00 6C 00 6C 
398b6     00 6C 00 6C 
398ba     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
398be     00 6C 00 6C 
398c2     00 6C 00 6C 
398c6     00 6C 00 6C 
398ca     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
398ce     00 6C 00 6C 
398d2     00 6C 00 6C 
398d6     00 6C 00 6C 
398da     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
398de     00 6C 00 6C 
398e2     00 6C 00 6C 
398e6     00 6C 00 6C 
398ea     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
398ee     00 6C 00 6B 
398f2     00 6B 00 6B 
398f6     00 6B 00 6B 
398fa     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
398fe     00 6B 00 6B 
39902     00 6B 00 6B 
39906     00 6B 00 6B 
3990a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3990e     00 6B 00 6B 
39912     00 6B 00 6B 
39916     00 6B 00 6B 
3991a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3991e     00 6B 00 6B 
39922     00 6B 00 6B 
39926     00 6B 00 6B 
3992a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3992e     00 6B 00 6B 
39932     00 6B 00 6B 
39936     00 6B 00 6B 
3993a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3993e     00 6B 00 6B 
39942     00 6B 00 6B 
39946     00 6B 00 6B 
3994a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3994e     00 6B 00 6B 
39952     00 6B 00 6B 
39956     00 6B 00 6B 
3995a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3995e     00 6B 00 6B 
39962     00 6B 00 6B 
39966     00 6B 00 6B 
3996a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3996e     00 6B 00 6B 
39972     00 6B 00 6B 
39976     00 6B 00 6B 
3997a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3997e     00 6B 00 6B 
39982     00 6B 00 6B 
39986     00 6A 00 9D 
3998a     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3998e     00 9E 00 9E 
39992     00 9E 00 9E 
39996     00 9E 00 9E 
3999a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3999e     00 9E 00 9E 
399a2     00 9E 00 9E 
399a6     00 9E 00 9E 
399aa     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
399ae     00 9E 00 9E 
399b2     00 9E 00 9E 
399b6     00 9E 00 9E 
399ba     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
399be     00 9E 00 9E 
399c2     00 9E 00 9E 
399c6     00 9E 00 9E 
399ca     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
399ce     00 9E 00 9E 
399d2     00 9E 00 9E 
399d6     00 9E 00 9E 
399da     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
399de     00 9E 00 9E 
399e2     00 9E 00 9E 
399e6     00 9E 00 9E 
399ea     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
399ee     00 9E 00 9E 
399f2     00 9E 00 9E 
399f6     00 9E 00 9E 
399fa     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
399fe     00 9E 00 9E 
39a02     00 9E 00 9E 
39a06     00 9E 00 9E 
39a0a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39a0e     00 9E 00 9E 
39a12     00 9E 00 9E 
39a16     00 9E 00 9E 
39a1a     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
39a1e     00 9F 00 9F 
39a22     00 9F 00 9F 
39a26     00 9F 00 9F 
39a2a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39a2e     00 9F 00 9F 
39a32     00 9F 00 9F 
39a36     00 9F 00 9F 
39a3a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39a3e     00 9F 00 9F 
39a42     00 9F 00 9F 
39a46     00 9F 00 9F 
39a4a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39a4e     00 9F 00 9F 
39a52     00 9F 00 9F 
39a56     00 9F 00 9F 
39a5a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39a5e     00 9F 00 9F 
39a62     00 9F 00 9F 
39a66     00 9F 00 9F 
39a6a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39a6e     00 9F 00 9F 
39a72     00 9F 00 9F 
39a76     00 9F 00 9F 
39a7a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39a7e     00 9F 00 9F 
39a82     00 9F 00 9F 
39a86     00 9F 00 9F 
39a8a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39a8e     00 9F 00 9F 
39a92     00 9F 00 9F 
39a96     00 9F 00 9F 
39a9a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39a9e     00 9F 00 9F 
39aa2     00 9F 00 9F 
39aa6     00 9F 00 9F 
39aaa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39aae     00 9F 00 9F 
39ab2     00 9F 00 9F 
39ab6     00 9F 00 9F 
39aba     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39abe     00 9F 00 9F 
39ac2     00 9F 00 9F 
39ac6     00 9F 00 9F 
39aca     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39ace     00 9F 00 9F 
39ad2     00 9F 00 9F 
39ad6     00 9F 00 9F 
39ada     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39ade     00 9F 00 9F 
39ae2     00 9F 00 A0 
39ae6     00 A0 00 A0 
39aea     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39aee     00 A0 00 A0 
39af2     00 A0 00 A0 
39af6     00 A0 00 A0 
39afa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39afe     00 A0 00 A0 
39b02     00 A0 00 A0 
39b06     00 A0 00 A0 
39b0a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39b0e     00 A0 00 A0 
39b12     00 A0 00 A0 
39b16     00 A0 00 A0 
39b1a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39b1e     00 A0 00 A0 
39b22     00 A0 00 A0 
39b26     00 A0 00 A0 
39b2a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39b2e     00 A0 00 A0 
39b32     00 A0 00 A0 
39b36     00 A0 00 A0 
39b3a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39b3e     00 A0 00 A0 
39b42     00 A0 00 A0 
39b46     00 A0 00 A0 
39b4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39b4e     00 A0 00 A0 
39b52     00 A0 00 A0 
39b56     00 A0 00 A0 
39b5a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39b5e     00 A0 00 A0 
39b62     00 A0 00 A0 
39b66     00 A0 00 A0 
39b6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39b6e     00 A0 00 A0 
39b72     00 A0 00 A0 
39b76     00 A0 00 A0 
39b7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39b7e     00 A0 00 A0 
39b82     00 A0 00 A0 
39b86     00 A0 00 A0 
39b8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39b8e     00 A0 00 A0 
39b92     00 A0 00 A0 
39b96     00 A0 00 A0 
39b9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39b9e     00 A0 00 A0 
39ba2     00 A0 00 A0 
39ba6     00 A0 00 A0 
39baa     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
39bae     00 6D 00 6D 
39bb2     00 6D 00 6D 
39bb6     00 6D 00 6D 
39bba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39bbe     00 6D 00 6D 
39bc2     00 6D 00 6D 
39bc6     00 6D 00 6D 
39bca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39bce     00 6D 00 6D 
39bd2     00 6D 00 6D 
39bd6     00 6D 00 6D 
39bda     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39bde     00 6D 00 6D 
39be2     00 6D 00 6D 
39be6     00 6D 00 6D 
39bea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39bee     00 6D 00 6D 
39bf2     00 6D 00 6D 
39bf6     00 6D 00 6D 
39bfa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39bfe     00 6D 00 6D 
39c02     00 6D 00 6D 
39c06     00 6D 00 6D 
39c0a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39c0e     00 6D 00 6D 
39c12     00 6D 00 6D 
39c16     00 6D 00 6D 
39c1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39c1e     00 6D 00 6D 
39c22     00 6D 00 6D 
39c26     00 6D 00 6D 
39c2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39c2e     00 6D 00 6D 
39c32     00 A0 00 A0 
39c36     00 A0 00 A0 
39c3a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c3e     00 A0 00 A0 
39c42     00 A0 00 A0 
39c46     00 A0 00 A0 
39c4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c4e     00 A0 00 A0 
39c52     00 A0 00 A0 
39c56     00 A0 00 A0 
39c5a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c5e     00 A0 00 A0 
39c62     00 A0 00 A0 
39c66     00 A0 00 A0 
39c6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c6e     00 A0 00 A0 
39c72     00 A0 00 A0 
39c76     00 A0 00 A0 
39c7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c7e     00 A0 00 A0 
39c82     00 A0 00 A0 
39c86     00 A0 00 A0 
39c8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c8e     00 A0 00 A0 
39c92     00 A0 00 A0 
39c96     00 A0 00 A0 
39c9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39c9e     00 A0 00 A0 
39ca2     00 A0 00 A0 
39ca6     00 A0 00 A0 
39caa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39cae     00 A0 00 A0 
39cb2     00 A0 00 A0 
39cb6     00 A0 00 A0 
39cba     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
39cbe     00 6D 00 6D 
39cc2     00 6D 00 6D 
39cc6     00 6D 00 6D 
39cca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39cce     00 6D 00 6D 
39cd2     00 6D 00 6D 
39cd6     00 6D 00 6D 
39cda     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39cde     00 6D 00 6D 
39ce2     00 6D 00 6D 
39ce6     00 6D 00 6D 
39cea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39cee     00 6D 00 6D 
39cf2     00 6D 00 6D 
39cf6     00 6D 00 6D 
39cfa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39cfe     00 6D 00 6D 
39d02     00 6D 00 6D 
39d06     00 6D 00 6D 
39d0a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39d0e     00 6D 00 6D 
39d12     00 6D 00 6D 
39d16     00 6D 00 6D 
39d1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39d1e     00 6D 00 6D 
39d22     00 6D 00 6D 
39d26     00 6D 00 6D 
39d2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39d2e     00 6D 00 6D 
39d32     00 6D 00 6D 
39d36     00 6D 00 6D 
39d3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39d3e     00 6D 00 6D 
39d42     00 6C 00 A0 
39d46     00 9F 00 A0 
39d4a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
39d4e     00 A0 00 A0 
39d52     00 A0 00 A0 
39d56     00 A0 00 A0 
39d5a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d5e     00 A0 00 A0 
39d62     00 A0 00 A0 
39d66     00 A0 00 A0 
39d6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d6e     00 A0 00 A0 
39d72     00 A0 00 A0 
39d76     00 A0 00 A0 
39d7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d7e     00 A0 00 A0 
39d82     00 A0 00 A0 
39d86     00 A0 00 A0 
39d8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d8e     00 A0 00 A0 
39d92     00 A0 00 A0 
39d96     00 A0 00 A0 
39d9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39d9e     00 A0 00 A0 
39da2     00 A0 00 A0 
39da6     00 A0 00 A0 
39daa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39dae     00 A0 00 A0 
39db2     00 A0 00 A0 
39db6     00 A0 00 A0 
39dba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39dbe     00 A0 00 A0 
39dc2     00 A0 00 A0 
39dc6     00 A0 00 A0 
39dca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39dce     00 A0 00 A0 
39dd2     00 A0 00 A0 
39dd6     00 A0 00 A0 
39dda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39dde     00 A0 00 A0 
39de2     00 A0 00 A0 
39de6     00 A0 00 A0 
39dea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39dee     00 A0 00 A0 
39df2     00 A0 00 A0 
39df6     00 A0 00 A0 
39dfa     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
39dfe     00 A1 00 A1 
39e02     00 A1 00 A1 
39e06     00 A1 00 A1 
39e0a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39e0e     00 A1 00 A1 
39e12     00 A1 00 A1 
39e16     00 A1 00 A1 
39e1a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39e1e     00 A1 00 A1 
39e22     00 A1 00 A1 
39e26     00 A1 00 A1 
39e2a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39e2e     00 A1 00 A1 
39e32     00 A1 00 A1 
39e36     00 A1 00 A1 
39e3a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39e3e     00 A1 00 A1 
39e42     00 A1 00 A1 
39e46     00 A1 00 A1 
39e4a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39e4e     00 A1 00 A1 
39e52     00 A1 00 A1 
39e56     00 6E 00 6E 
39e5a     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
39e5e     00 6E 00 6E 
39e62     00 6E 00 6E 
39e66     00 6E 00 6E 
39e6a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
39e6e     00 6E 00 6E 
39e72     00 6E 00 6E 
39e76     00 6E 00 6E 
39e7a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
39e7e     00 6E 00 6E 
39e82     00 6E 00 6E 
39e86     00 6E 00 6E 
39e8a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
39e8e     00 6E 00 6D 
39e92     00 6D 00 6D 
39e96     00 6D 00 6D 
39e9a     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39e9e     00 6D 00 6D 
39ea2     00 6D 00 6D 
39ea6     00 6D 00 6D 
39eaa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39eae     00 6D 00 6D 
39eb2     00 6D 00 6D 
39eb6     00 6D 00 6D 
39eba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ebe     00 6D 00 6D 
39ec2     00 6D 00 6D 
39ec6     00 6D 00 6D 
39eca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ece     00 6D 00 6D 
39ed2     00 6D 00 6D 
39ed6     00 6D 00 6D 
39eda     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ede     00 6D 00 6D 
39ee2     00 6D 00 6D 
39ee6     00 6D 00 6D 
39eea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39eee     00 6D 00 6D 
39ef2     00 6D 00 6D 
39ef6     00 6D 00 6D 
39efa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39efe     00 6D 00 6D 
39f02     00 6D 00 6D 
39f06     00 6D 00 6D 
39f0a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f0e     00 6D 00 6D 
39f12     00 6D 00 6D 
39f16     00 6D 00 6D 
39f1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f1e     00 6D 00 6D 
39f22     00 6D 00 6D 
39f26     00 6D 00 6D 
39f2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f2e     00 6D 00 6D 
39f32     00 6D 00 6D 
39f36     00 6D 00 6D 
39f3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f3e     00 6D 00 6D 
39f42     00 6C 00 6C 
39f46     00 6C 00 6C 
39f4a     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39f4e     00 6C 00 6C 
39f52     00 6C 00 6C 
39f56     00 6C 00 6C 
39f5a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39f5e     00 6C 00 6C 
39f62     00 6C 00 6C 
39f66     00 9D 00 9F 
39f6a     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
39f6e     00 9F 00 9F 
39f72     00 9F 00 9F 
39f76     00 A0 00 A0 
39f7a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f7e     00 A0 00 A0 
39f82     00 A0 00 A0 
39f86     00 A0 00 A0 
39f8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f8e     00 A0 00 A0 
39f92     00 A0 00 A0 
39f96     00 A0 00 A0 
39f9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f9e     00 A0 00 A0 
39fa2     00 A0 00 A0 
39fa6     00 A0 00 A0 
39faa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39fae     00 A0 00 A0 
39fb2     00 A0 00 A0 
39fb6     00 A0 00 A0 
39fba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39fbe     00 A0 00 A0 
39fc2     00 A0 00 A0 
39fc6     00 A0 00 A0 
39fca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39fce     00 A0 00 A0 
39fd2     00 A0 00 A0 
39fd6     00 A0 00 A0 
39fda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39fde     00 A0 00 A0 
39fe2     00 A0 00 A0 
39fe6     00 A0 00 A0 
39fea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39fee     01 00 00 00 
39ff2     00 00 00 00 
39ff6     00 00 00 00 
39ffa     00 00 00 00 | mouse  file "mouse2.def"
39ffe     00 00 00 00 
3a002     00 00 00 00 
3a006     00 00 00 00 
3a00a     00 00 00 00 | 	byte	$00[16]
3a00e     01 01 00 00 
3a012     00 00 00 00 
3a016     00 00 00 00 
3a01a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a01e     00 00 00 00 
3a022     00 00 00 00 
3a026     00 00 00 00 
3a02a     00 00 00 00 | 	byte	$00[16]
3a02e     01 0D 01 00 
3a032     00 00 00 00 
3a036     00 00 00 00 
3a03a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a03e     00 00 00 00 
3a042     00 00 00 00 
3a046     00 00 00 00 
3a04a     00 00 00 00 | 	byte	$00[16]
3a04e     01 0D 0D 01 
3a052     00 00 00 00 
3a056     00 00 00 00 
3a05a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a05e     00 00 00 00 
3a062     00 00 00 00 
3a066     00 00 00 00 
3a06a     00 00 00 00 | 	byte	$00[16]
3a06e     01 0D 0D 0D 
3a072     01 00 00 00 
3a076     00 00 00 00 
3a07a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a07e     00 00 00 00 
3a082     00 00 00 00 
3a086     00 00 00 00 
3a08a     00 00 00 00 | 	byte	$00[16]
3a08e     01 0D 0D 0D 
3a092     0D 01 00 00 
3a096     00 00 00 00 
3a09a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a09e     00 00 00 00 
3a0a2     00 00 00 00 
3a0a6     00 00 00 00 
3a0aa     00 00 00 00 | 	byte	$00[16]
3a0ae     01 0D 0D 0D 
3a0b2     0D 0D 01 00 
3a0b6     00 00 00 00 
3a0ba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a0be     00 00 00 00 
3a0c2     00 00 00 00 
3a0c6     00 00 00 00 
3a0ca     00 00 00 00 | 	byte	$00[16]
3a0ce     01 0D 0D 0D 
3a0d2     0D 0D 0D 01 
3a0d6     00 00 00 00 
3a0da     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3a0de     00 00 00 00 
3a0e2     00 00 00 00 
3a0e6     00 00 00 00 
3a0ea     00 00 00 00 | 	byte	$00[16]
3a0ee     01 0D 0D 0D 
3a0f2     0D 0D 0D 0C 
3a0f6     01 00 00 00 
3a0fa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3a0fe     00 00 00 00 
3a102     00 00 00 00 
3a106     00 00 00 00 
3a10a     00 00 00 00 | 	byte	$00[16]
3a10e     01 0D 0D 0D 
3a112     0D 0D 0D 0D 
3a116     0C 01 00 00 
3a11a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3a11e     00 00 00 00 
3a122     00 00 00 00 
3a126     00 00 00 00 
3a12a     00 00 00 00 | 	byte	$00[16]
3a12e     01 0D 0D 0D 
3a132     0D 0D 0D 0D 
3a136     0D 0C 01 00 
3a13a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3a13e     00 00 00 00 
3a142     00 00 00 00 
3a146     00 00 00 00 
3a14a     00 00 00 00 | 	byte	$00[16]
3a14e     01 0D 0D 0D 
3a152     0D 0D 0D 0D 
3a156     0D 0D 0B 01 
3a15a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3a15e     00 00 00 00 
3a162     00 00 00 00 
3a166     00 00 00 00 
3a16a     00 00 00 00 | 	byte	$00[16]
3a16e     01 0D 0D 0D 
3a172     0C 0D 0D 03 
3a176     01 01 01 01 
3a17a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3a17e     00 00 00 00 
3a182     00 00 00 00 
3a186     00 00 00 00 
3a18a     00 00 00 00 | 	byte	$00[16]
3a18e     01 0D 0D 0C 
3a192     01 09 0D 03 
3a196     00 00 00 00 
3a19a     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3a19e     00 00 00 00 
3a1a2     00 00 00 00 
3a1a6     00 00 00 00 
3a1aa     00 00 00 00 | 	byte	$00[16]
3a1ae     01 0D 0C 01 
3a1b2     00 01 0D 0B 
3a1b6     01 00 00 00 
3a1ba     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3a1be     00 00 00 00 
3a1c2     00 00 00 00 
3a1c6     00 00 00 00 
3a1ca     00 00 00 00 | 	byte	$00[16]
3a1ce     01 0C 01 00 
3a1d2     00 01 0A 0D 
3a1d6     01 00 00 00 
3a1da     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3a1de     00 00 00 00 
3a1e2     00 00 00 00 
3a1e6     00 00 00 00 
3a1ea     00 00 00 00 | 	byte	$00[16]
3a1ee     01 01 00 00 
3a1f2     00 00 01 0D 
3a1f6     0B 01 00 00 
3a1fa     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3a1fe     00 00 00 00 
3a202     00 00 00 00 
3a206     00 00 00 00 
3a20a     00 00 00 00 
3a20e     00 00 00 00 
3a212     00 00       | 	byte	$00[22]
3a214     01 0B 0D 01 
3a218     00 00 00 00 
3a21c     00 00 00 00 
3a220     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a224     00 00 00 00 
3a228     00 00 00 00 
3a22c     00 00 00 00 
3a230     00 00 00 00 
3a234     00          | 	byte	$00[17]
3a235     01 01 00 00 
3a239     00 00 00 00 
3a23d     00 00 00 00 
3a241     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a245     00 00 00 00 
      ...             
3a3e9     00 00 00 00 
3a3ed     00          | 	byte	$00[425]
3a3ee                 | 
3a3ee     00 00       |              	org
3a3f0 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3a3f4 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3a3f8 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3a3fc 003             | 
3a3fc 003 00 30 04 F6 |                 mov     psramaddr,#0
3a400 004             | 
3a400 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3a404 005 20 00 00 FF 
3a408 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3a40c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3a410 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3a414 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3a418 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3a41c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3a420 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3a424 00d             | 
3a424 00d 20 00 00 FF 
3a428 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3a42c 00f E0 03 00 FF 
3a430 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3a434 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3a438 012             | 
3a438 012             |                 
3a438 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3a43c 013             |     
3a43c 013 01 2C 60 FD |                 cogid 	t11				' get id
3a440 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3a444 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3a448 016             | 
3a448 016 00 00 00 00 | t11 		long 	0
3a44c 017 00 FF 07 00 | mailbox 	long 	$7FF00
3a450 018 00 00 00 00 | psramaddr 	long 	0
3a454 019 00 00 00 00 | pslockval	long 	0
3a458 01a 00 00 00 00 | cmd             long    0
3a45c 01b 00 00 00 00 | buf1            long    0
3a460 01c 00 40 00 00 | buf2            long    16384
3a464 01d 68 A4 03 00 | 	long	@@@_dat_ + 12612
3a468 01e 50 32 20 52 
3a46c 01f 65 74 72 6F 
3a470 020 6D 61 63 68 
3a474 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3a478 022 42 41 53 49 
3a47c 023 43 20 76 65 
3a480 024 72 73 69 6F 
3a484 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3a488 026 34 39 20 62 
3a48c 027 65 74 61 20 
3a490 028 31 00 00 00 | 	byte	$34, $39, $20, $62, $65, $74, $61, $20, $31, $00, $00, $00
3a494 029             | 	alignl
3a494 029             | _hg010b_spin2_dat_
3a494 029             | 
3a494 029 00 00 00 00 
3a498 02a 00 00 00 00 
3a49c 02b 00 00 00 00 
3a4a0 02c 00 00 00 00 
3a4a4 02d 00 00 00    | vga_font       file "vgafont.def"
3a4a7 02d 7E 81 A5 81 
3a4ab 02e 81 BD 99 81 
3a4af 02f 81 7E 00 00 
3a4b3 030 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3a4b7 031 7E FF DB FF 
3a4bb 032 FF C3 E7 FF 
3a4bf 033 FF 7E 00 00 
3a4c3 034 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3a4c7 035 00 36 7F 7F 
3a4cb 036 7F 7F 3E 1C 
3a4cf 037 08 00 00 00 
3a4d3 038 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3a4d7 039 00 08 1C 3E 
3a4db 03a 7F 3E 1C 08 
3a4df 03b 00 00 00 00 
3a4e3 03c 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3a4e7 03d 18 3C 3C E7 
3a4eb 03e E7 E7 18 18 
3a4ef 03f 3C 00 00 00 
3a4f3 040 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3a4f7 041 18 3C 7E FF 
3a4fb 042 FF 7E 18 18 
3a4ff 043 3C 00 00 00 
3a503 044 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3a507 045 00 00 00 18 
3a50b 046 3C 3C 18 00 
3a50f 047 00 00 00 00 
3a513 048 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3a517 049 FF FF FF E7 
3a51b 04a C3 C3 E7 FF 
3a51f 04b FF FF FF FF 
3a523 04c FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3a527 04d 00 00 3C 66 
3a52b 04e 42 42 66 3C 
3a52f 04f 00 00 00 00 
3a533 050 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3a537 051 FF FF C3 99 
3a53b 052 BD BD 99 C3 
3a53f 053 FF FF FF FF 
3a543 054 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3a547 055 78 70 58 4C 
3a54b 056 1E 33 33 33 
3a54f 057 33 1E 00 00 
3a553 058 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3a557 059 3C 66 66 66 
3a55b 05a 66 3C 18 7E 
3a55f 05b 18 18 00 00 
3a563 05c 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3a567 05d FC CC FC 0C 
3a56b 05e 0C 0C 0C 0E 
3a56f 05f 0F 07 00 00 
3a573 060 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3a577 061 FE C6 FE C6 
3a57b 062 C6 C6 C6 E6 
3a57f 063 E7 67 03 00 
3a583 064 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3a587 065 18 18 DB 3C 
3a58b 066 E7 3C DB 18 
3a58f 067 18 00 00 00 
3a593 068 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3a597 069 03 07 0F 1F 
3a59b 06a 7F 1F 0F 07 
3a59f 06b 03 01 00 00 
3a5a3 06c 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3a5a7 06d 60 70 78 7C 
3a5ab 06e 7F 7C 78 70 
3a5af 06f 60 40 00 00 
3a5b3 070 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3a5b7 071 18 3C 7E 18 
3a5bb 072 18 18 7E 3C 
3a5bf 073 18 00 00 00 
3a5c3 074 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3a5c7 075 66 66 66 66 
3a5cb 076 66 66 66    | 	byte	$66[7]
3a5ce 077 00 66 66 00 
3a5d2 078 00 00 00 00 
3a5d6 079 00 FE DB DB 
3a5da 07a DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3a5de 07b D8 D8 D8 00 
3a5e2 07c 00 00 00 3E 
3a5e6 07d 63 06 1C 36 
3a5ea 07e 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3a5ee 07f 30 63 3E 00 
3a5f2 080 00 00 00 00 
3a5f6 081 00 00 00 00 
3a5fa 082 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3a5fe 083 7F 7F 7F 00 
3a602 084 00 00 00 00 
3a606 085 00 18 3C 7E 
3a60a 086 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3a60e 087 3C 18 7E 00 
3a612 088 00 00 00 00 
3a616 089 00 18 3C 7E 
3a61a 08a 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3a61e 08b 18 18 18 00 
3a622 08c 00 00 00 00 
3a626 08d 00 18 18 18 
3a62a 08e 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a62e 08f 7E 3C 18 00 
3a632 090 00 00 00 00 
3a636 091 00 00 00 18 
3a63a 092 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3a63e 093 00 00 00 00 
3a642 094 00 00 00 00 
3a646 095 00 00 00    | 	byte	$00[11]
3a649 096 0C 06 7F 06 
3a64d 097 0C 00 00 00 
3a651 098 00 00 00 00 
3a655 099 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a659 09a 00 03 03 03 
3a65d 09b 7F 00 00 00 
3a661 09c 00 00 00 00 
3a665 09d 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a669 09e 14 36 7F 36 
3a66d 09f 14 00 00 00 
3a671 0a0 00 00 00 00 
3a675 0a1 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3a679 0a2 1C 1C 3E 3E 
3a67d 0a3 7F 7F 00 00 
3a681 0a4 00 00 00 00 
3a685 0a5 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3a689 0a6 7F 3E 3E 1C 
3a68d 0a7 1C 08 00 00 
3a691 0a8 00 00 00 00 
3a695 0a9 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a699 0aa 00 00 00 00 
3a69d 0ab 00 00 00 00 
3a6a1 0ac 00 00 00 00 
3a6a5 0ad 00 00       | 	byte	$00[14]
3a6a7 0ad 18 3C 3C 3C 
3a6ab 0ae 18 18 18 00 
3a6af 0af 18 18 00 00 
3a6b3 0b0 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3a6b7 0b1 66 24 00 00 
3a6bb 0b2 00 00 00 00 
3a6bf 0b3 00 00 00 00 
3a6c3 0b4 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a6c7 0b5 00 36 36 7F 
3a6cb 0b6 36 36 36 7F 
3a6cf 0b7 36 36 00 00 
3a6d3 0b8 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3a6d7 0b9 3E 63 43 03 
3a6db 0ba 3E 60 60 61 
3a6df 0bb 63 3E 18 18 
3a6e3 0bc 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3a6e7 0bd 00 00 43 63 
3a6eb 0be 30 18 0C 06 
3a6ef 0bf 63 61 00 00 
3a6f3 0c0 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3a6f7 0c1 1C 36 36 1C 
3a6fb 0c2 6E 3B 33 33 
3a6ff 0c3 33 6E 00 00 
3a703 0c4 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3a707 0c5 0C 0C 0C 06 
3a70b 0c6 00 00 00 00 
3a70f 0c7 00 00 00 00 
3a713 0c8 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a717 0c9 30 18 0C 0C 
3a71b 0ca 0C 0C 0C 0C 
3a71f 0cb 18 30 00 00 
3a723 0cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3a727 0cd 0C 18 30 30 
3a72b 0ce 30 30 30 30 
3a72f 0cf 18 0C 00 00 
3a733 0d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3a737 0d1 00 00 00 66 
3a73b 0d2 3C FF 3C 66 
3a73f 0d3 00 00 00 00 
3a743 0d4 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3a747 0d5 00 00 00 18 
3a74b 0d6 18 7E 18 18 
3a74f 0d7 00 00 00 00 
3a753 0d8 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3a757 0d9 00 00 00 00 
3a75b 0da 00 00 00 00 | 	byte	$00[8]
3a75f 0db 18 18 18 0C 
3a763 0dc 00 00 00 00 
3a767 0dd 00 00 00 00 
3a76b 0de 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3a76f 0df 00 00 00 00 
3a773 0e0 00 00 00 00 
3a777 0e1 00 00 00 00 
3a77b 0e2 00 00 00 00 | 	byte	$00[16]
3a77f 0e3 18 18 00 00 
3a783 0e4 00 00 00 00 
3a787 0e5 00 00 40 60 
3a78b 0e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3a78f 0e7 03 01 00 00 
3a793 0e8 00 00 00 00 
3a797 0e9 1C 36 63 63 
3a79b 0ea 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3a79f 0eb 36 1C 00 00 
3a7a3 0ec 00 00 00 00 
3a7a7 0ed 18 1C 1E 18 
3a7ab 0ee 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3a7af 0ef 18 7E 00 00 
3a7b3 0f0 00 00 00 00 
3a7b7 0f1 3E 63 60 30 
3a7bb 0f2 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3a7bf 0f3 63 7F 00 00 
3a7c3 0f4 00 00 00 00 
3a7c7 0f5 3E 63 60 60 
3a7cb 0f6 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3a7cf 0f7 63 3E 00 00 
3a7d3 0f8 00 00 00 00 
3a7d7 0f9 30 38 3C 36 
3a7db 0fa 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3a7df 0fb 30 78 00 00 
3a7e3 0fc 00 00 00 00 
3a7e7 0fd 7F 03 03 03 
3a7eb 0fe 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3a7ef 0ff 63 3E 00 00 
3a7f3 100 00 00 00 00 
3a7f7 101 1C 06 03 03 
3a7fb 102 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3a7ff 103 63 3E 00 00 
3a803 104 00 00 00 00 
3a807 105 7F 63 60 60 
3a80b 106 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3a80f 107 0C 0C 00 00 
3a813 108 00 00 00 00 
3a817 109 3E 63 63 63 
3a81b 10a 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3a81f 10b 63 3E 00 00 
3a823 10c 00 00 00 00 
3a827 10d 3E 63 63 63 
3a82b 10e 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3a82f 10f 30 1E 00 00 
3a833 110 00 00 00 00 
3a837 111 00 00 00 18 
3a83b 112 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3a83f 113 18 18 00 00 
3a843 114 00 00 00 00 
3a847 115 00 00 00 18 
3a84b 116 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3a84f 117 18 18 0C 00 
3a853 118 00 00 00 00 
3a857 119 00 60 30 18 
3a85b 11a 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3a85f 11b 30 60 00 00 
3a863 11c 00 00 00 00 
3a867 11d 00 00 00 7E 
3a86b 11e 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3a86f 11f 00 00 00 00 
3a873 120 00 00 00 00 
3a877 121 00          | 	byte	$00[9]
3a878 122 06 0C 18 30 
3a87c 123 60 30 18 0C 
3a880 124 06 00 00 00 
3a884 125 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3a888 126 63 63 30 18 
3a88c 127 18 18 00 18 
3a890 128 18 00 00 00 
3a894 129 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3a898 12a 3E 63 63 7B 
3a89c 12b 7B 7B 3B 03 
3a8a0 12c 3E 00 00 00 
3a8a4 12d 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3a8a8 12e 1C 36 63 63 
3a8ac 12f 7F 63 63 63 
3a8b0 130 63 00 00 00 
3a8b4 131 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3a8b8 132 66 66 66 3E 
3a8bc 133 66 66 66 66 
3a8c0 134 3F 00 00 00 
3a8c4 135 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3a8c8 136 66 43 03 03 
3a8cc 137 03 03 43 66 
3a8d0 138 3C 00 00 00 
3a8d4 139 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3a8d8 13a 36 66 66 66 
3a8dc 13b 66 66 66 36 
3a8e0 13c 1F 00 00 00 
3a8e4 13d 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3a8e8 13e 66 46 16 1E 
3a8ec 13f 16 06 46 66 
3a8f0 140 7F 00 00 00 
3a8f4 141 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3a8f8 142 66 46 16 1E 
3a8fc 143 16 06 06 06 
3a900 144 0F 00 00 00 
3a904 145 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3a908 146 66 43 03 03 
3a90c 147 7B 63 63 66 
3a910 148 5C 00 00 00 
3a914 149 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3a918 14a 63 63 63 7F 
3a91c 14b 63 63 63 63 
3a920 14c 63 00 00 00 
3a924 14d 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3a928 14e 18 18 18 18 
3a92c 14f 18 18 18 18 | 	byte	$18[8]
3a930 150 3C 00 00 00 
3a934 151 00 00 00 78 
3a938 152 30 30 30 30 
3a93c 153 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3a940 154 1E 00 00 00 
3a944 155 00 00 00 67 
3a948 156 66 66 36 1E 
3a94c 157 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3a950 158 67 00 00 00 
3a954 159 00 00 00 0F 
3a958 15a 06 06 06 06 
3a95c 15b 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3a960 15c 7F 00 00 00 
3a964 15d 00 00 00 63 
3a968 15e 77 7F 7F 6B 
3a96c 15f 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3a970 160 63 00 00 00 
3a974 161 00 00 00 63 
3a978 162 67 6F 7F 7B 
3a97c 163 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3a980 164 63 00 00 00 
3a984 165 00 00 00 3E 
3a988 166 63 63 63 63 
3a98c 167 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3a990 168 3E 00 00 00 
3a994 169 00 00 00 3F 
3a998 16a 66 66 66 3E 
3a99c 16b 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3a9a0 16c 0F 00 00 00 
3a9a4 16d 00 00 00 3E 
3a9a8 16e 63 63 63 63 
3a9ac 16f 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3a9b0 170 3E 30 70 00 
3a9b4 171 00 00 00 3F 
3a9b8 172 66 66 66 3E 
3a9bc 173 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3a9c0 174 67 00 00 00 
3a9c4 175 00 00 00 3E 
3a9c8 176 63 63 06 1C 
3a9cc 177 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3a9d0 178 3E 00 00 00 
3a9d4 179 00 00 00 7E 
3a9d8 17a 7E 5A 18 18 
3a9dc 17b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3a9e0 17c 3C 00 00 00 
3a9e4 17d 00 00 00 63 
3a9e8 17e 63 63 63 63 
3a9ec 17f 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3a9f0 180 3E 00 00 00 
3a9f4 181 00 00 00 63 
3a9f8 182 63 63 63 63 
3a9fc 183 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3aa00 184 08 00 00 00 
3aa04 185 00 00 00 63 
3aa08 186 63 63 63 6B 
3aa0c 187 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3aa10 188 36 00 00 00 
3aa14 189 00 00 00 63 
3aa18 18a 63 36 3E 1C 
3aa1c 18b 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3aa20 18c 63 00 00 00 
3aa24 18d 00 00 00 66 
3aa28 18e 66 66 66 3C 
3aa2c 18f 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3aa30 190 3C 00 00 00 
3aa34 191 00 00 00 7F 
3aa38 192 63 61 30 18 
3aa3c 193 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3aa40 194 7F 00 00 00 
3aa44 195 00 00 00 3C 
3aa48 196 0C 0C 0C 0C 
3aa4c 197 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3aa50 198 3C 00 00 00 
3aa54 199 00 00 00 00 
3aa58 19a 01 03 07 0E 
3aa5c 19b 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3aa60 19c 40 00 00 00 
3aa64 19d 00 00 00 3C 
3aa68 19e 30 30 30 30 
3aa6c 19f 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3aa70 1a0 3C 00 00 00 
3aa74 1a1 1C 36 00 00 
3aa78 1a2 00 00 00 00 
3aa7c 1a3 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aa80 1a4 00 00 00 00 
3aa84 1a5 00 00 00 00 
3aa88 1a6 00 00 00 00 
3aa8c 1a7 00 00 00 00 
3aa90 1a8 00          | 	byte	$00[17]
3aa91 1a8 FF 00 00 0C 
3aa95 1a9 18 00 00 00 
3aa99 1aa 00 00 00 00 
3aa9d 1ab 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aaa1 1ac 00 00 00 00 
3aaa5 1ad 00 00 00 00 
3aaa9 1ae 00          | 	byte	$00[9]
3aaaa 1ae 1E 30 3E 33 
3aaae 1af 33 33 6E 00 
3aab2 1b0 00 00 00 00 
3aab6 1b1 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3aaba 1b2 1E 36 66 66 
3aabe 1b3 66 66 3E 00 
3aac2 1b4 00 00 00 00 
3aac6 1b5 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aaca 1b6 3E 63 03 03 
3aace 1b7 03 63 3E 00 
3aad2 1b8 00 00 00 00 
3aad6 1b9 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3aada 1ba 3C 36 33 33 
3aade 1bb 33 33 6E 00 
3aae2 1bc 00 00 00 00 
3aae6 1bd 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aaea 1be 3E 63 7F 03 
3aaee 1bf 03 63 3E 00 
3aaf2 1c0 00 00 00 00 
3aaf6 1c1 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3aafa 1c2 0C 1E 0C 0C 
3aafe 1c3 0C 0C 1E 00 
3ab02 1c4 00 00 00 00 
3ab06 1c5 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ab0a 1c6 6E 33 33 33 
3ab0e 1c7 33 33 3E 30 
3ab12 1c8 33 1E 00 00 
3ab16 1c9 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3ab1a 1ca 36 6E 66 66 
3ab1e 1cb 66 66 67 00 
3ab22 1cc 00 00 00 00 
3ab26 1cd 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3ab2a 1ce 1C 18 18 18 
3ab2e 1cf 18 18 3C 00 
3ab32 1d0 00 00 00 00 
3ab36 1d1 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3ab3a 1d2 70 60 60 60 
3ab3e 1d3 60 60 60 66 
3ab42 1d4 66 3C 00 00 
3ab46 1d5 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3ab4a 1d6 66 36 1E 1E 
3ab4e 1d7 36 66 67 00 
3ab52 1d8 00 00 00 00 
3ab56 1d9 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3ab5a 1da 18 18 18 18 
3ab5e 1db 18 18       | 	byte	$18[6]
3ab60 1dc 3C 00 00 00 
3ab64 1dd 00 00 00 00 
3ab68 1de 00 00 37 7F 
3ab6c 1df 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3ab70 1e0 63 00 00 00 
3ab74 1e1 00 00 00 00 
3ab78 1e2 00 00 3B 66 
3ab7c 1e3 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3ab80 1e4 66 00 00 00 
3ab84 1e5 00 00 00 00 
3ab88 1e6 00 00 3E 63 
3ab8c 1e7 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3ab90 1e8 3E 00 00 00 
3ab94 1e9 00 00 00 00 
3ab98 1ea 00 00 3B 66 
3ab9c 1eb 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3aba0 1ec 3E 06 06 0F 
3aba4 1ed 00 00 00 00 
3aba8 1ee 00 00 6E 33 
3abac 1ef 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3abb0 1f0 3E 30 30 78 
3abb4 1f1 00 00 00 00 
3abb8 1f2 00 00 3B 6E 
3abbc 1f3 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3abc0 1f4 0F 00 00 00 
3abc4 1f5 00 00 00 00 
3abc8 1f6 00 00 3E 63 
3abcc 1f7 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3abd0 1f8 3E 00 00 00 
3abd4 1f9 00 00 00 08 
3abd8 1fa 0C 0C 3F 0C 
3abdc 1fb 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3abe0 1fc 38 00 00 00 
3abe4 1fd 00 00 00 00 
3abe8 1fe 00 00 33 33 
3abec 1ff 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3abf0 200 6E 00 00 00 
3abf4 201 00 00 00 00 
3abf8 202 00 00 63 63 
3abfc 203 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3ac00 204 1C 00 00 00 
3ac04 205 00 00 00 00 
3ac08 206 00 00 63 63 
3ac0c 207 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3ac10 208 36 00 00 00 
3ac14 209 00 00 00 00 
3ac18 20a 00 00 63 36 
3ac1c 20b 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3ac20 20c 63 00 00 00 
3ac24 20d 00 00 00 00 
3ac28 20e 00 00 63 63 
3ac2c 20f 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3ac30 210 7E 60 30 1F 
3ac34 211 00 00 00 00 
3ac38 212 00 00 7F 33 
3ac3c 213 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3ac40 214 7F 00 00 00 
3ac44 215 00 00 00 70 
3ac48 216 18 18 18 0E 
3ac4c 217 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3ac50 218 70 00 00 00 
3ac54 219 00 00 00 18 
3ac58 21a 18 18 18 18 
3ac5c 21b 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3ac60 21c 18 00 00 00 
3ac64 21d 00 00 00 0E 
3ac68 21e 18 18 18 70 
3ac6c 21f 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3ac70 220 0E 00 00 00 
3ac74 221 6E 3B 00 00 
3ac78 222 00 00 00 00 
3ac7c 223 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac80 224 00 00 00 00 
3ac84 225 00 00 00 00 
3ac88 226 00 00       | 	byte	$00[10]
3ac8a 226 08 1C 36 63 
3ac8e 227 63 63 7F 00 
3ac92 228 00 00 00 00 
3ac96 229 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3ac9a 22a 03 03 03 03 
3ac9e 22b 43 66 3C 18 
3aca2 22c 30 1E 00 00 
3aca6 22d 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3acaa 22e 33 33 33 33 
3acae 22f 33 33       | 	byte	$33[6]
3acb0 230 6E 00 00 00 
3acb4 231 00 00 60 30 
3acb8 232 18 00 3E 63 
3acbc 233 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3acc0 234 3E 00 00 00 
3acc4 235 00 00 08 1C 
3acc8 236 36 00 1E 30 
3accc 237 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3acd0 238 6E 00 00 00 
3acd4 239 00 00 00 00 
3acd8 23a 33 00 1E 30 
3acdc 23b 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3ace0 23c 6E 00 00 00 
3ace4 23d 00 00 1C 36 
3ace8 23e 1C 00 33 33 
3acec 23f 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3acf0 240 6E 00 00 00 
3acf4 241 00 00 60 30 
3acf8 242 18 00 3E 63 
3acfc 243 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3ad00 244 3E 00 00 00 
3ad04 245 00 00 00 00 
3ad08 246 00 00 3E 63 
3ad0c 247 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3ad10 248 3E 18 30 1E 
3ad14 249 00 00 00 1C 
3ad18 24a 58 78 38 18 
3ad1c 24b 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3ad20 24c 3C 00 00 00 
3ad24 24d 00 00 00 00 
3ad28 24e 63 00 3E 63 
3ad2c 24f 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3ad30 250 3E 00 00 00 
3ad34 251 66 33 00 3E 
3ad38 252 63 63 63 63 
3ad3c 253 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3ad40 254 3E 00 00 00 
3ad44 255 00 00 CC 66 
3ad48 256 33 00 3E 63 
3ad4c 257 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3ad50 258 3E 00 00 00 
3ad54 259 00 00 18 3C 
3ad58 25a 66 00 1C 18 
3ad5c 25b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3ad60 25c 3C 00 00 00 
3ad64 25d 30 18 00 7F 
3ad68 25e 63 61 30 18 
3ad6c 25f 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3ad70 260 7F 00 00 00 
3ad74 261 00 63 00 08 
3ad78 262 1C 36 63 63 
3ad7c 263 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3ad80 264 63 00 00 00 
3ad84 265 30 18 00 3C 
3ad88 266 66 43 03 03 
3ad8c 267 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3ad90 268 3C 00 00 00 
3ad94 269 30 18 00 7F 
3ad98 26a 66 46 16 1E 
3ad9c 26b 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3ada0 26c 7F 00 00 00 
3ada4 26d 0C 06 00 0F 
3ada8 26e 06 06 06 06 
3adac 26f 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3adb0 270 7F 00 00 00 
3adb4 271 30 18 00 1C 
3adb8 272 18 18 18 18 
3adbc 273 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3adc0 274 3C 00 00 00 
3adc4 275 00 00 08 1C 
3adc8 276 36 00 3E 63 
3adcc 277 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3add0 278 3E 00 00 00 
3add4 279 00 00 00 00 
3add8 27a 63 00 3E 63 
3addc 27b 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3ade0 27c 3E 00 00 00 
3ade4 27d 00 00 00 6F 
3ade8 27e 46 26 06 06 
3adec 27f 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3adf0 280 7F 00 00 00 
3adf4 281 00 00 00 6E 
3adf8 282 4C 2C 0C 0C 
3adfc 283 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3ae00 284 1E 00 00 00 
3ae04 285 30 18 00 3E 
3ae08 286 63 63 06 1C 
3ae0c 287 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3ae10 288 3E 00 00 00 
3ae14 289 00 00 60 30 
3ae18 28a 18 00 3E 63 
3ae1c 28b 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3ae20 28c 3E 00 00 00 
3ae24 28d 00 63 00 3E 
3ae28 28e 63 63 63 63 
3ae2c 28f 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3ae30 290 3E 00 00 00 
3ae34 291 00 63 00 63 
3ae38 292 63 63 63 63 
3ae3c 293 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3ae40 294 3E 00 00 00 
3ae44 295 6C 38 00 7E 
3ae48 296 7E 5A 18 18 
3ae4c 297 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3ae50 298 3C 00 00 00 
3ae54 299 00 00 60 48 
3ae58 29a 2C 0C 3F 0C 
3ae5c 29b 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3ae60 29c 38 00 00 00 
3ae64 29d 00 00 00 0F 
3ae68 29e 26 36 1E 0E 
3ae6c 29f 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3ae70 2a0 7F 00 00 00 
3ae74 2a1 00 00 00 00 
3ae78 2a2 00 63 36 1C 
3ae7c 2a3 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3ae80 2a4 00 00 00 00 
3ae84 2a5 00 00       | 	byte	$00[6]
3ae86 2a5 36 1C 08 00 
3ae8a 2a6 3E 63 03 03 
3ae8e 2a7 03 63 3E 00 
3ae92 2a8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3ae96 2a9 30 18 0C 00 
3ae9a 2aa 1E 30 3E 33 
3ae9e 2ab 33 33 6E 00 
3aea2 2ac 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3aea6 2ad 60 30 18 00 
3aeaa 2ae 1C 18 18 18 
3aeae 2af 18 18 3C 00 
3aeb2 2b0 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3aeb6 2b1 60 30 18 00 
3aeba 2b2 3E 63 63 63 
3aebe 2b3 63 63 3E 00 
3aec2 2b4 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3aec6 2b5 30 18 0C 00 
3aeca 2b6 33 33 33 33 
3aece 2b7 33 33 6E 00 
3aed2 2b8 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3aed6 2b9 00 08 1C 36 
3aeda 2ba 63 63 7F 63 
3aede 2bb 63 63 63 18 
3aee2 2bc 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3aee6 2bd 00 00 00 00 
3aeea 2be 1E 30 3E 33 
3aeee 2bf 33 33 6E 18 
3aef2 2c0 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3aef6 2c1 00 7F 63 61 
3aefa 2c2 30 18 0C 06 
3aefe 2c3 43 63 7F 00 
3af02 2c4 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3af06 2c5 36 1C 08 00 
3af0a 2c6 7F 33 18 0C 
3af0e 2c7 06 63 7F 00 
3af12 2c8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3af16 2c9 00 7F 66 46 
3af1a 2ca 16 1E 16 06 
3af1e 2cb 46 66 7F 18 
3af22 2cc 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3af26 2cd 00 00 00 00 
3af2a 2ce 3E 63 7F 03 
3af2e 2cf 03 63 3E 18 
3af32 2d0 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3af36 2d1 00 3C 66 03 
3af3a 2d2 1F 03 0F 03 
3af3e 2d3 03 66 3C 00 
3af42 2d4 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3af46 2d5 60 30 18 00 
3af4a 2d6 7F 33 18 0C 
3af4e 2d7 06 63 7F 00 
3af52 2d8 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3af56 2d9 00 3C 66 43 
3af5a 2da 03 03 03 03 
3af5e 2db 43 66 3C 00 
3af62 2dc 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3af66 2dd 00 00 00 00 
3af6a 2de 3E 63 06 1C 
3af6e 2df 30 63 3E 18 
3af72 2e0 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3af76 2e1 00 00 00 00 
3af7a 2e2 00 00       | 	byte	$00[6]
3af7c 2e3 6C 36 1B 36 
3af80 2e4 6C 00 00 00 
3af84 2e5 00 00 00 00 
3af88 2e6 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af8c 2e7 1B 36 6C 36 
3af90 2e8 1B 00 00 00 
3af94 2e9 88 22 88 22 
3af98 2ea 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3af9c 2eb 88 22 88 22 
3afa0 2ec 88 22 88 22 
3afa4 2ed AA 55 AA 55 
3afa8 2ee AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3afac 2ef AA 55 AA 55 
3afb0 2f0 AA 55 AA 55 
3afb4 2f1 BB EE BB EE 
3afb8 2f2 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3afbc 2f3 BB EE BB EE 
3afc0 2f4 BB EE BB EE 
3afc4 2f5 18 18 18 18 
3afc8 2f6 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3afcc 2f7 18 18 18 18 
3afd0 2f8 18 18 18 18 
3afd4 2f9 18 18 18 18 
3afd8 2fa 18 18 18    | 	byte	$18[15]
3afdb 2fa 1F 18 18 18 
3afdf 2fb 18 18 18 18 
3afe3 2fc 18 30 18 00 
3afe7 2fd 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3afeb 2fe 63 7F 63 63 
3afef 2ff 63 63 00 00 
3aff3 300 00 1C 36 00 
3aff7 301 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3affb 302 63 7F 63 63 
3afff 303 63 63 00 00 
3b003 304 00 36 1C 00 
3b007 305 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3b00b 306 1E 16 06 46 
3b00f 307 66 7F 00 00 
3b013 308 00 00 00 00 
3b017 309 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3b01b 30a 1C 30 60 63 
3b01f 30b 63 3E 18 30 
3b023 30c 1E 6C 6C 6C 
3b027 30d 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3b02b 30e 6F 6C 6C 6C 
3b02f 30f 6C 6C 6C 6C 
3b033 310 6C 6C 6C 6C 
3b037 311 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b03b 312 6C 6C 6C 6C 
3b03f 313 6C 6C 6C 6C 
3b043 314 6C          | 	byte	$6c[9]
3b044 315 00 00 00 00 
3b048 316 00          | 	byte	$00[5]
3b049 316 7F 60 6F 6C 
3b04d 317 6C 6C 6C 6C 
3b051 318 6C 6C 6C 6C 
3b055 319 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b059 31a 6F 60 7F 00 
3b05d 31b 00 00 00 00 
3b061 31c 00 00 00 18 
3b065 31d 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3b069 31e 61 30 18 0C 
3b06d 31f 06 43 63 7F 
3b071 320 00 00 00 00 
3b075 321 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3b079 322 00 7F 33 18 
3b07d 323 0C 06 63 7F 
3b081 324 00 00 00 00 
3b085 325 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3b089 326 00 00 1F 18 
3b08d 327 18 18 18 18 
3b091 328 18 18 18 18 
3b095 329 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b099 32a 18 18 F8 00 
3b09d 32b 00 00 00 00 
3b0a1 32c 00 00 00 18 
3b0a5 32d 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3b0a9 32e 18 18 FF 00 
3b0ad 32f 00 00 00 00 
3b0b1 330 00 00 00 00 
3b0b5 331 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b0b9 332 00 00 FF 18 
3b0bd 333 18 18 18 18 
3b0c1 334 18 18 18 18 
3b0c5 335 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b0c9 336 18 18 F8 18 
3b0cd 337 18 18 18 18 
3b0d1 338 18 18 18 00 
3b0d5 339 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3b0d9 33a 00 00 FF 00 
3b0dd 33b 00 00 00 00 
3b0e1 33c 00 00 00 18 
3b0e5 33d 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3b0e9 33e 18 18 FF 18 
3b0ed 33f 18 18 18 18 
3b0f1 340 18 18 18 63 
3b0f5 341 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3b0f9 342 36 63 63 7F 
3b0fd 343 63 63 63 63 
3b101 344 00 00 00 00 
3b105 345 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3b109 346 00 1E 30 3E 
3b10d 347 33 33 33 6E 
3b111 348 00 00 00 6C 
3b115 349 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3b119 34a EC 0C FC 00 
3b11d 34b 00 00 00 00 
3b121 34c 00 00 00 00 
3b125 34d 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b129 34e FC 0C EC 6C 
3b12d 34f 6C 6C 6C 6C 
3b131 350 6C 6C 6C 6C 
3b135 351 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b139 352 EF 00 FF 00 
3b13d 353 00 00 00 00 
3b141 354 00 00 00 00 
3b145 355 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b149 356 FF 00 EF 6C 
3b14d 357 6C 6C 6C 6C 
3b151 358 6C 6C 6C 6C 
3b155 359 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b159 35a EC 0C EC 6C 
3b15d 35b 6C 6C 6C 6C 
3b161 35c 6C 6C 6C 00 
3b165 35d 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3b169 35e FF 00 FF 00 
3b16d 35f 00 00 00 00 
3b171 360 00 00 00 6C 
3b175 361 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3b179 362 EF 00 EF 6C 
3b17d 363 6C 6C 6C 6C 
3b181 364 6C 6C 6C 00 
3b185 365 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3b189 366 63 3E 63 63 
3b18d 367 63 63 3E 63 
3b191 368 00 00 00 00 
3b195 369 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3b199 36a 30 3C 36 33 
3b19d 36b 33 33 33 6E 
3b1a1 36c 00 00 00 00 
3b1a5 36d 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3b1a9 36e 66 66 6F 66 
3b1ad 36f 66 66 36 1F 
3b1b1 370 00 00 00 36 
3b1b5 371 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3b1b9 372 66 66 66 66 
3b1bd 373 66 66       | 	byte	$66[6]
3b1bf 373 36 1F 00 00 
3b1c3 374 00 00 63 00 
3b1c7 375 7F 66 46 16 
3b1cb 376 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3b1cf 377 66 7F 00 00 
3b1d3 378 00 6C 38 00 
3b1d7 379 38 30 30 3C 
3b1db 37a 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3b1df 37b 33 6E 00 00 
3b1e3 37c 00 36 1C 00 
3b1e7 37d 63 67 6F 7F 
3b1eb 37e 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3b1ef 37f 63 63 00 00 
3b1f3 380 00 30 18 00 
3b1f7 381 3C 18 18 18 
3b1fb 382 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3b1ff 383 18 3C 00 00 
3b203 384 00 3C 66 00 
3b207 385 3C 18 18 18 
3b20b 386 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3b20f 387 18 3C 00 00 
3b213 388 00 00 00 36 
3b217 389 1C 08 00 3E 
3b21b 38a 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3b21f 38b 63 3E 00 00 
3b223 38c 00 18 18 18 
3b227 38d 18 18 18 18 
3b22b 38e 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3b22f 38f 00 00 00 00 
3b233 390 00 00 00 00 
3b237 391 00 00 00 00 | 	byte	$00[12]
3b23b 392 F8 18 18 18 
3b23f 393 18 18 18 18 
3b243 394 18 FF FF FF 
3b247 395 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3b24b 396 FF FF FF FF 
3b24f 397 FF FF FF FF 
3b253 398 FF          | 	byte	$ff[9]
3b254 399 00 00 00 00 
3b258 39a 00 00 00    | 	byte	$00[7]
3b25b 39a FF FF FF FF 
3b25f 39b FF FF FF FF 
3b263 39c FF          | 	byte	$ff[9]
3b264 39d 00 00 00 7E 
3b268 39e 7E 5A 18 18 
3b26c 39f 18 18 18 18 
3b270 3a0 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3b274 3a1 1C 36 1C 63 
3b278 3a2 63 63 63 63 
3b27c 3a3 63 63 63 63 
3b280 3a4 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b284 3a5 FF FF FF FF 
3b288 3a6 FF FF FF    | 	byte	$ff[7]
3b28b 3a6 00 00 00 00 
3b28f 3a7 00 00 00 00 
3b293 3a8 00          | 	byte	$00[9]
3b294 3a9 30 18 00 3E 
3b298 3aa 63 63 63 63 
3b29c 3ab 63 63 63 63 
3b2a0 3ac 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b2a4 3ad 00 00 00 1E 
3b2a8 3ae 33 33 33 1B 
3b2ac 3af 33 63 63 63 
3b2b0 3b0 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3b2b4 3b1 1C 36 00 3E 
3b2b8 3b2 63 63 63 63 
3b2bc 3b3 63 63 63 63 
3b2c0 3b4 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b2c4 3b5 30 18 00 63 
3b2c8 3b6 67 6F 7F 7B 
3b2cc 3b7 73 63 63 63 
3b2d0 3b8 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3b2d4 3b9 00 00 60 30 
3b2d8 3ba 18 00 3B 66 
3b2dc 3bb 66 66 66 66 
3b2e0 3bc 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3b2e4 3bd 00 00 36 1C 
3b2e8 3be 08 00 3B 66 
3b2ec 3bf 66 66 66 66 
3b2f0 3c0 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3b2f4 3c1 36 1C 00 3E 
3b2f8 3c2 63 63 06 1C 
3b2fc 3c3 30 60 63 63 
3b300 3c4 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3b304 3c5 00 00 36 1C 
3b308 3c6 08 00 3E 63 
3b30c 3c7 06 1C 30 63 
3b310 3c8 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3b314 3c9 30 18 00 3F 
3b318 3ca 66 66 66 3E 
3b31c 3cb 36 66 66 66 
3b320 3cc 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3b324 3cd 30 18 00 63 
3b328 3ce 63 63 63 63 
3b32c 3cf 63 63 63 63 
3b330 3d0 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b334 3d1 00 00 60 30 
3b338 3d2 18 00 3B 6E 
3b33c 3d3 66 06 06 06 
3b340 3d4 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3b344 3d5 66 33 00 63 
3b348 3d6 63 63 63 63 
3b34c 3d7 63 63 63 63 
3b350 3d8 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b354 3d9 00 00 60 30 
3b358 3da 18 00 63 63 
3b35c 3db 63 63 63 63 
3b360 3dc 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3b364 3dd 30 18 00 66 
3b368 3de 66 66 66 3C 
3b36c 3df 18 18 18 18 
3b370 3e0 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3b374 3e1 00 00 00 08 
3b378 3e2 0C 0C 3F 0C 
3b37c 3e3 0C 0C 0C 6C 
3b380 3e4 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3b384 3e5 30 18 00 00 
3b388 3e6 00 00 00 00 
3b38c 3e7 00 00 00 00 
3b390 3e8 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b394 3e9 00 00 00 00 
3b398 3ea 00 00 00 00 | 	byte	$00[8]
3b39c 3eb 7F 00 00 00 
3b3a0 3ec 00 00 00 00 
3b3a4 3ed 66 33 00 00 
3b3a8 3ee 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3b3ac 3ef 00 00 00 00 
3b3b0 3f0 00 00 00 00 
3b3b4 3f1 00 00 00 00 
3b3b8 3f2 00 00 00 00 
3b3bc 3f3 00 00 00 00 
3b3c0 3f4 00          | 	byte	$00[21]
3b3c1 3f4 0C 06 3C 36 
3b3c5 3f5 1C 00 00 00 
3b3c9 3f6 00 00 00 00 
3b3cd 3f7 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b3d1 3f8 00 00 00 63 
3b3d5 3f9 3E 00 00 00 
3b3d9 3fa 00 00 00 00 
3b3dd 3fb 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b3e1 3fc 00 00 00 00 
3b3e5 3fd 3E 63 06 1C 
3b3e9 3fe 36 63 63 36 
3b3ed 3ff 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3b3f1 400 00 00 00 00 
3b3f5 401 00 00 00 00 | 	byte	$00[8]
3b3f9 402 18 00 7E 00 
3b3fd 403 18 00 00 00 
3b401 404 00 00 00 00 
3b405 405 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b409 406 00 00 00 00 
3b40d 407 00 00 00 00 | 	byte	$00[8]
3b411 408 18 30 1E 00 
3b415 409 00 00 1C 36 
3b419 40a 36 1C 00 00 
3b41d 40b 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3b421 40c 00 00 00 00 
3b425 40d 63 00 00 00 
3b429 40e 00 00 00 00 
3b42d 40f 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b431 410 00 00 00 18 
3b435 411 18 00 00 00 
3b439 412 00 00 00 00 
3b43d 413 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b441 414 00 00 00 00 
3b445 415 00          | 	byte	$00[5]
3b446 415 CC 66 33 00 
3b44a 416 33 33 33 33 
3b44e 417 33 33 6E 00 
3b452 418 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3b456 419 00 3F 66 66 
3b45a 41a 66 3E 36 66 
3b45e 41b 66 66 6F 00 
3b462 41c 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3b466 41d 36 1C 08 00 
3b46a 41e 3B 6E 66 06 
3b46e 41f 06 06 0F 00 
3b472 420 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3b476 421 00 00 00 7E 
3b47a 422 7E 7E 7E 7E 
3b47e 423 7E 7E 00 00 
3b482 424 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3b486 425 00 00 00 00 
3b48a 426 00 00 00 00 
3b48e 427 00 00 00 00 
3b492 428 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b494 429 00 00 00 00 
      ...             
3b4c4 435 00 00 00 00 
3b4c8 436 00 00 00    | st_font        file "st4font.def"
3b4cb 436 FF FF 00 00 
3b4cf 437 00 00 00 00 
3b4d3 438 00 18 18 18 
3b4d7 439 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b4db 43a 18 18 18 18 
3b4df 43b 18 18 18 18 
3b4e3 43c 18          | 	byte	$18[9]
3b4e4 43d 00 00 00 00 
3b4e8 43e 00 00 00    | 	byte	$00[7]
3b4eb 43e FF FF 18 18 
3b4ef 43f 18 18 18 18 
3b4f3 440 18 18 18 18 
3b4f7 441 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b4fb 442 FF FF 00 00 
3b4ff 443 00 00 00 00 
3b503 444 00 18 18 18 
3b507 445 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b50b 446 1F 1F 18 18 
3b50f 447 18 18 18 18 
3b513 448 18 18 18 18 
3b517 449 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b51b 44a F8 F8 18 18 
3b51f 44b 18 18 18 18 
3b523 44c 18 00 00 00 
3b527 44d 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b52b 44e 1F 1F 18 18 
3b52f 44f 18 18 18 18 
3b533 450 18 00 00 00 
3b537 451 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b53b 452 F8 F8 18 18 
3b53f 453 18 18 18 18 
3b543 454 18 18 18 18 
3b547 455 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b54b 456 1F 1F 00 00 
3b54f 457 00 00 00 00 
3b553 458 00 18 18 18 
3b557 459 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b55b 45a F8 F8 00 00 
3b55f 45b 00 00 00 00 
3b563 45c 00 18 18 18 
3b567 45d 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b56b 45e FF FF 18 18 
3b56f 45f 18 18 18 18 
3b573 460 18 00 00 18 
3b577 461 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3b57b 462 66 7E 7E 66 
3b57f 463 66 66 66 30 
3b583 464 18 00 00 7E 
3b587 465 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3b58b 466 3E 06 06 06 
3b58f 467 06 7E 7E 18 
3b593 468 0C 30 18 3C 
3b597 469 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3b59b 46a 06 06 06 66 
3b59f 46b 66 7E 3C 00 
3b5a3 46c 00 30 18 66 
3b5a7 46d 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3b5ab 46e 7E 7E 76 76 
3b5af 46f 66 66 66 00 
3b5b3 470 00 30 18 7C 
3b5b7 471 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3b5bb 472 1C 38 70 60 
3b5bf 473 60 7E 3E 00 
3b5c3 474 00 30 18 7E 
3b5c7 475 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3b5cb 476 18 0C 0C 06 
3b5cf 477 06 7E 7E 00 
3b5d3 478 00 18 18 00 
3b5d7 479 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3b5db 47a 18 18 0C 0C 
3b5df 47b 06 7E 7E 00 
3b5e3 47c 00 30 18 3C 
3b5e7 47d 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3b5eb 47e 66 66 66 66 
3b5ef 47f 66          | 	byte	$66[5]
3b5f0 480 7E 3C 00 00 
3b5f4 481 00 00 06 06 
3b5f8 482 06 06 16 1E 
3b5fc 483 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3b600 484 7E 7E 00 00 
3b604 485 00 00 00 00 
3b608 486 00 3C 7C 60 
3b60c 487 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3b610 488 7E 7C 30 18 
3b614 489 00 00 00 00 
3b618 48a 00 3C 7E 66 
3b61c 48b 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3b620 48c 7E 7C 18 0C 
3b624 48d 00 00 30 18 
3b628 48e 00 3C 3E 06 
3b62c 48f 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3b630 490 7E 7C 00 00 
3b634 491 00 00 30 18 
3b638 492 00 3E 7E 66 
3b63c 493 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3b640 494 66 66 00 00 
3b644 495 00 00 30 18 
3b648 496 00 7C 7E 06 
3b64c 497 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3b650 498 7E 3E 00 00 
3b654 499 00 00 30 18 
3b658 49a 00 7E 7E 30 
3b65c 49b 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3b660 49c 7E 7E 00 00 
3b664 49d 00 00 18 18 
3b668 49e 00 7E 7E 30 
3b66c 49f 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3b670 4a0 7E 7E 00 00 
3b674 4a1 00 00 30 18 
3b678 4a2 00 3C 7E 66 
3b67c 4a3 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3b680 4a4 7E 3C 00 00 
3b684 4a5 00 00 1C 1C 
3b688 4a6 18 18 38 3C 
3b68c 4a7 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3b690 4a8 3C 3C 00 00 
3b694 4a9 00 00 00 00 
3b698 4aa 00 00 00 00 
3b69c 4ab 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b6a0 4ac 00 00 00 00 
3b6a4 4ad 00 00       | 	byte	$00[6]
3b6a6 4ad 18 18 18 18 
3b6aa 4ae 18 18 18 18 | 	byte	$18[8]
3b6ae 4af 00 00 18 18 
3b6b2 4b0 00 00 00 00 
3b6b6 4b1 66 66 66 66 
3b6ba 4b2 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3b6be 4b3 00 00 00 00 
3b6c2 4b4 00 00 00 00 
3b6c6 4b5 00          | 	byte	$00[9]
3b6c7 4b5 66 66 FF FF 
3b6cb 4b6 66 66 FF FF 
3b6cf 4b7 66 66 00 00 
3b6d3 4b8 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3b6d7 4b9 7C 7E 06 06 
3b6db 4ba 3E 7C 60 60 
3b6df 4bb 7E 3E 18 18 
3b6e3 4bc 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3b6e7 4bd 66 30 30 18 
3b6eb 4be 18 0C 0C 66 
3b6ef 4bf 66 00 00 00 
3b6f3 4c0 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3b6f7 4c1 66 66 3C 1C 
3b6fb 4c2 1C FC FE 66 
3b6ff 4c3 66 FE FC 00 
3b703 4c4 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3b707 4c5 18 18 18 18 
3b70b 4c6 00 00 00 00 
3b70f 4c7 00 00 00 00 
3b713 4c8 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3b717 4c9 18 1C 0C 0C 
3b71b 4ca 0C 0C 0C 0C 
3b71f 4cb 1C 18 30 00 
3b723 4cc 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3b727 4cd 18 38 30 30 
3b72b 4ce 30 30 30 30 
3b72f 4cf 38 18 0C 00 
3b733 4d0 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3b737 4d1 66 66 3C 3C 
3b73b 4d2 FF FF 3C 3C 
3b73f 4d3 66 66 00 00 
3b743 4d4 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3b747 4d5 00 18 18 18 
3b74b 4d6 7E 7E 18 18 
3b74f 4d7 18 00 00 00 
3b753 4d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b757 4d9 00 00 00 00 
3b75b 4da 00 00       | 	byte	$00[6]
3b75d 4db 18 18 18 18 
3b761 4dc 18          | 	byte	$18[5]
3b762 4dc 0C 04 00 00 
3b766 4dd 00 00 00 00 
3b76a 4de 7E 7E 00 00 
3b76e 4df 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3b772 4e0 00 00 00 00 
3b776 4e1 00 00 00 00 
3b77a 4e2 00 00 00 00 
3b77e 4e3 00          | 	byte	$00[13]
3b77f 4e3 18 18 18 00 
3b783 4e4 00 00 00 60 
3b787 4e5 60 60 30 30 
3b78b 4e6 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3b78f 4e7 06 06 06 00 
3b793 4e8 00 00 00 3C 
3b797 4e9 7E 66 66 66 
3b79b 4ea 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3b79f 4eb 66 7E 3C 00 
3b7a3 4ec 00 00 00 18 
3b7a7 4ed 18 1C 1C 18 
3b7ab 4ee 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3b7af 4ef 18 7E 7E 00 
3b7b3 4f0 00 00 00 3C 
3b7b7 4f1 7E 66 66 30 
3b7bb 4f2 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3b7bf 4f3 0C 7E 7E 00 
3b7c3 4f4 00 00 00 7E 
3b7c7 4f5 7E 30 30 18 
3b7cb 4f6 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3b7cf 4f7 66 7E 3C 00 
3b7d3 4f8 00 00 00 30 
3b7d7 4f9 30 38 38 3C 
3b7db 4fa 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3b7df 4fb 7E 30 30 00 
3b7e3 4fc 00 00 00 7E 
3b7e7 4fd 7E 06 06 3E 
3b7eb 4fe 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3b7ef 4ff 66 7E 3C 00 
3b7f3 500 00 00 00 38 
3b7f7 501 3C 0E 06 06 
3b7fb 502 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3b7ff 503 66 7E 3C 00 
3b803 504 00 00 00 7E 
3b807 505 7E 60 60 30 
3b80b 506 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3b80f 507 0C 0C 0C 00 
3b813 508 00 00 00 3C 
3b817 509 7E 66 66 3C 
3b81b 50a 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3b81f 50b 66 7E 3C 00 
3b823 50c 00 00 00 3C 
3b827 50d 7E 66 66 7E 
3b82b 50e 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3b82f 50f 70 3C 1C 00 
3b833 510 00 00 00 00 
3b837 511 00 00 18 18 
3b83b 512 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3b83f 513 18 18 18 00 
3b843 514 00 00 00 00 
3b847 515 00 00 18 18 
3b84b 516 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3b84f 517 18 18 18 0C 
3b853 518 04 00 00 00 
3b857 519 70 38 1C 0E 
3b85b 51a 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3b85f 51b 70 00 00 00 
3b863 51c 00 00 00 00 
3b867 51d 00 00 7E 7E 
3b86b 51e 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3b86f 51f 00 00 00 00 
3b873 520 00 00 00 00 | 	byte	$00[8]
3b877 521 0E 1C 38 70 
3b87b 522 E0 70 38 1C 
3b87f 523 0E 00 00 00 
3b883 524 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3b887 525 7E 66 66 30 
3b88b 526 30 18 18 18 
3b88f 527 00 18 18 00 
3b893 528 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3b897 529 7E 66 66 66 
3b89b 52a 66 36 06 66 
3b89f 52b 66 7E 3C 00 
3b8a3 52c 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3b8a7 52d 3C 7E 66 66 
3b8ab 52e 66 7E 7E 66 
3b8af 52f 66 66 66 00 
3b8b3 530 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3b8b7 531 7E 66 66 7E 
3b8bb 532 3E 66 66 66 
3b8bf 533 66 7E 3E 00 
3b8c3 534 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3b8c7 535 7E 66 66 06 
3b8cb 536 06 06 06 66 
3b8cf 537 66 7E 3C 00 
3b8d3 538 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3b8d7 539 7E 66 66 66 
3b8db 53a 66 66 66 66 
3b8df 53b 66 7E 3E 00 
3b8e3 53c 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3b8e7 53d 7E 06 06 3E 
3b8eb 53e 3E 06 06 06 
3b8ef 53f 06 7E 7E 00 
3b8f3 540 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3b8f7 541 7E 06 06 3E 
3b8fb 542 3E 06 06 06 
3b8ff 543 06 06 06 00 
3b903 544 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3b907 545 7E 06 06 76 
3b90b 546 76 66 66 66 
3b90f 547 66 7E 3C 00 
3b913 548 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3b917 549 66 66 66 7E 
3b91b 54a 7E 66 66 66 
3b91f 54b 66 66 66 00 
3b923 54c 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3b927 54d 7E 18 18 18 
3b92b 54e 18 18 18 18 
3b92f 54f 18 7E 7E 00 
3b933 550 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3b937 551 60 60 60 60 
3b93b 552 60 60 60    | 	byte	$60[7]
3b93e 553 66 66 7E 3C 
3b942 554 00 00 00 00 
3b946 555 66 66 36 36 
3b94a 556 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3b94e 557 66 66 C6 C6 
3b952 558 00 00 00 00 
3b956 559 06 06 06 06 
3b95a 55a 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3b95e 55b 06 06 7E 7E 
3b962 55c 00 00 00 00 
3b966 55d C6 C6 EE EE 
3b96a 55e FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3b96e 55f C6 C6 C6 C6 
3b972 560 00 00 00 00 
3b976 561 66 66 66 6E 
3b97a 562 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3b97e 563 76 66 66 66 
3b982 564 00 00 00 00 
3b986 565 3C 7E 66 66 
3b98a 566 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3b98e 567 66 66 7E 3C 
3b992 568 00 00 00 00 
3b996 569 3E 7E 66 66 
3b99a 56a 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3b99e 56b 06 06 06 06 
3b9a2 56c 00 00 00 00 
3b9a6 56d 3C 7E 66 66 
3b9aa 56e 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3b9ae 56f 66 56 3E 6C 
3b9b2 570 00 00 00 00 
3b9b6 571 3E 7E 66 66 
3b9ba 572 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3b9be 573 66 66 C6 C6 
3b9c2 574 00 00 00 00 
3b9c6 575 7C 7E 06 06 
3b9ca 576 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3b9ce 577 60 60 7E 3E 
3b9d2 578 00 00 00 00 
3b9d6 579 7E 7E 18 18 
3b9da 57a 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3b9de 57b 18 18 18 18 
3b9e2 57c 00 00 00 00 
3b9e6 57d 66 66 66 66 
3b9ea 57e 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3b9ee 57f 66 66 7E 3C 
3b9f2 580 00 00 00 00 
3b9f6 581 66 66 66 66 
3b9fa 582 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3b9fe 583 3C 3C 18 18 
3ba02 584 00 00 00 00 
3ba06 585 C6 C6 C6 C6 
3ba0a 586 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3ba0e 587 FE EE C6 82 
3ba12 588 00 00 00 00 
3ba16 589 66 66 66 3C 
3ba1a 58a 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3ba1e 58b 3C 66 66 66 
3ba22 58c 00 00 00 00 
3ba26 58d 66 66 66 66 
3ba2a 58e 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3ba2e 58f 18 18 18 18 
3ba32 590 00 00 00 00 
3ba36 591 7E 7E 30 30 
3ba3a 592 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3ba3e 593 06 06 7E 7E 
3ba42 594 00 00 00 00 
3ba46 595 3C 3C 0C 0C 
3ba4a 596 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3ba4e 597 0C 0C 3C 3C 
3ba52 598 00 00 00 00 
3ba56 599 06 06 0C 0C 
3ba5a 59a 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3ba5e 59b 60 60 C0 C0 
3ba62 59c 00 00 00 00 
3ba66 59d 3C 3C 30 30 
3ba6a 59e 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3ba6e 59f 30 30 3C 3C 
3ba72 5a0 00 00 00 00 
3ba76 5a1 18 18 3C 3C 
3ba7a 5a2 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3ba7e 5a3 00 00 00 00 
3ba82 5a4 00 00 00 00 
3ba86 5a5 00 00 00 00 
3ba8a 5a6 00 00 00 00 
3ba8e 5a7 00 00       | 	byte	$00[18]
3ba90 5a8 FE FE 00 00 
3ba94 5a9 00 00 0C 0C 
3ba98 5aa 18 18 00 00 
3ba9c 5ab 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3baa0 5ac 00 00 00 00 
3baa4 5ad 00 00 00 00 
3baa8 5ae 00          | 	byte	$00[9]
3baa9 5ae 3C 7C 60 7C 
3baad 5af 7E 66 66 7E 
3bab1 5b0 7C 00 00 00 
3bab5 5b1 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3bab9 5b2 3E 7E 66 66 
3babd 5b3 66 66 66 7E 
3bac1 5b4 3E 00 00 00 
3bac5 5b5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3bac9 5b6 3C 3E 06 06 
3bacd 5b7 06 06 06 7E 
3bad1 5b8 7C 00 00 00 
3bad5 5b9 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3bad9 5ba 7C 7E 66 66 
3badd 5bb 66 66 66 7E 
3bae1 5bc 7C 00 00 00 
3bae5 5bd 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3bae9 5be 3C 7E 66 66 
3baed 5bf 7E 06 06 7E 
3baf1 5c0 7C 00 00 00 
3baf5 5c1 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3baf9 5c2 18 7E 7E 18 
3bafd 5c3 18 18 18 18 
3bb01 5c4 18 00 00 00 
3bb05 5c5 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3bb09 5c6 7C 7E 66 66 
3bb0d 5c7 66 66 7E 7C 
3bb11 5c8 60 7E 3E 00 
3bb15 5c9 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3bb19 5ca 3E 7E 66 66 
3bb1d 5cb 66 66 66 66 
3bb21 5cc 66 00 00 00 
3bb25 5cd 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3bb29 5ce 1C 1C 18 18 
3bb2d 5cf 18 18 18 3C 
3bb31 5d0 3C 00 00 00 
3bb35 5d1 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3bb39 5d2 30 30 30 30 
3bb3d 5d3 30 30 30 30 
3bb41 5d4 30          | 	byte	$30[9]
3bb42 5d4 3E 1E 00 00 
3bb46 5d5 06 06 06 36 
3bb4a 5d6 36 1E 1E 1E 
3bb4e 5d7 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3bb52 5d8 00 00 00 00 
3bb56 5d9 1C 1C 18 18 
3bb5a 5da 18 18 18 18 
3bb5e 5db 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3bb62 5dc 00 00 00 00 
3bb66 5dd 00 00 00    | 	byte	$00[7]
3bb69 5de 6C FE FE D6 
3bb6d 5df D6 C6 C6 C6 
3bb71 5e0 C6 00 00 00 
3bb75 5e1 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3bb79 5e2 3E 7E 66 66 
3bb7d 5e3 66 66 66 66 
3bb81 5e4 66 00 00 00 
3bb85 5e5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3bb89 5e6 3C 7E 66 66 
3bb8d 5e7 66 66 66 7E 
3bb91 5e8 3C 00 00 00 
3bb95 5e9 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3bb99 5ea 3E 7E 66 66 
3bb9d 5eb 66 66 66 7E 
3bba1 5ec 3E 06 06 00 
3bba5 5ed 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3bba9 5ee 7C 7E 66 66 
3bbad 5ef 66 66 66 7E 
3bbb1 5f0 7C 60 60 00 
3bbb5 5f1 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3bbb9 5f2 3E 7E 66 06 
3bbbd 5f3 06 06 06 06 
3bbc1 5f4 06 00 00 00 
3bbc5 5f5 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3bbc9 5f6 7C 7E 06 0E 
3bbcd 5f7 3C 70 60 7E 
3bbd1 5f8 3E 00 00 00 
3bbd5 5f9 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3bbd9 5fa 7E 7E 18 18 
3bbdd 5fb 18 18 18 78 
3bbe1 5fc 70 00 00 00 
3bbe5 5fd 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3bbe9 5fe 66 66 66 66 
3bbed 5ff 66 66 66    | 	byte	$66[7]
3bbf0 600 7E 7C 00 00 
3bbf4 601 00 00 00 00 
3bbf8 602 00 66 66 66 
3bbfc 603 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3bc00 604 18 18 00 00 
3bc04 605 00 00 00 00 
3bc08 606 00 C6 C6 D6 
3bc0c 607 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3bc10 608 C6 82 00 00 
3bc14 609 00 00 00 00 
3bc18 60a 00 66 66 3C 
3bc1c 60b 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3bc20 60c 66 66 00 00 
3bc24 60d 00 00 00 00 
3bc28 60e 00 66 66 66 
3bc2c 60f 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3bc30 610 7C 60 7E 3E 
3bc34 611 00 00 00 00 
3bc38 612 00 7E 7E 30 
3bc3c 613 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3bc40 614 7E 7E 00 00 
3bc44 615 00 00 30 18 
3bc48 616 18 18 18 0C 
3bc4c 617 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3bc50 618 18 30 00 00 
3bc54 619 00 00 18 18 
3bc58 61a 18 18 18 18 
3bc5c 61b 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bc60 61c 18 18 00 00 
3bc64 61d 00 00 0C 18 
3bc68 61e 18 18 18 30 
3bc6c 61f 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3bc70 620 18 0C 00 00 
3bc74 621 00 00 6C 7E 
3bc78 622 36 00 00 00 
3bc7c 623 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3bc80 624 00 00 00 00 
3bc84 625 00 00 00 00 
3bc88 626 00          | 	byte	$00[9]
3bc89 626 18 18 18 18 
3bc8d 627 18 18 00 00 
3bc91 628 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3bc94 629 00 6C FE FE 
3bc98 62a 7C 38 10 00 
3bc9c 62b 18 18 18 F8 
3bca0 62c F8 18 18 18 | a8_font        file "atari8.fnt"
3bca4 62d C0 C0 C0 C0 
3bca8 62e C0 C0 C0 C0 | 	byte	$c0[8]
3bcac 62f 18 18 18 1F 
3bcb0 630 1F 00 00 00 
3bcb4 631 18 18 18 1F 
3bcb8 632 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3bcbc 633 00 00 00 1F 
3bcc0 634 1F 18 18 18 
3bcc4 635 C0 E0 70 38 
3bcc8 636 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3bccc 637 03 07 0E 1C 
3bcd0 638 38 70 E0 C0 
3bcd4 639 80 C0 E0 F0 
3bcd8 63a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3bcdc 63b 00 00 00 00 
3bce0 63c F0 F0 F0 F0 
3bce4 63d 01 03 07 0F 
3bce8 63e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3bcec 63f F0 F0 F0 F0 
3bcf0 640 00 00 00 00 
3bcf4 641 0F 0F 0F 0F 
3bcf8 642 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3bcfc 643 FF FF 00 00 
3bd00 644 00 00 00 00 
3bd04 645 00 00 00 00 
3bd08 646 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3bd0c 647 00 00 00 00 
3bd10 648 0F 0F 0F 0F 
3bd14 649 00 38 38 EE 
3bd18 64a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3bd1c 64b 00 00 00 F8 
3bd20 64c F8 18 18 18 
3bd24 64d 00 00 00 FF 
3bd28 64e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3bd2c 64f 18 18 18 FF 
3bd30 650 FF 18 18 18 
3bd34 651 00 00 3C 7E 
3bd38 652 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3bd3c 653 00 00 00 00 
3bd40 654 FF FF FF FF 
3bd44 655 03 03 03 03 
3bd48 656 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3bd4c 657 00 00 00 FF 
3bd50 658 FF 18 18 18 
3bd54 659 18 18 18 FF 
3bd58 65a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3bd5c 65b 0F 0F 0F 0F 
3bd60 65c 0F 0F 0F 0F | 	byte	$0f[8]
3bd64 65d 18 18 18 F8 
3bd68 65e F8 00 00 00 
3bd6c 65f 1E 06 1E 06 
3bd70 660 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3bd74 661 00 18 3C 7E 
3bd78 662 18 18 18 00 
3bd7c 663 00 18 18 18 
3bd80 664 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3bd84 665 00 18 0C 7E 
3bd88 666 0C 18 00 00 
3bd8c 667 00 18 30 7E 
3bd90 668 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3bd94 669 00 00 00 00 
3bd98 66a 00 00 00 00 
3bd9c 66b 00          | 	byte	$00[9]
3bd9d 66b 18 18 18 18 
3bda1 66c 00 18 00 00 
3bda5 66d 66 66 66 00 
3bda9 66e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3bdad 66f 66 FF 66 66 
3bdb1 670 FF 66 00 18 
3bdb5 671 7C 06 3C 60 
3bdb9 672 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3bdbd 673 66 36 18 0C 
3bdc1 674 66 62 00 38 
3bdc5 675 6C 38 1C F6 
3bdc9 676 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3bdcd 677 18 18 18 00 
3bdd1 678 00 00 00 00 
3bdd5 679 70 38 18 18 
3bdd9 67a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3bddd 67b 0E 1C 18 18 
3bde1 67c 1C 0E 00 00 
3bde5 67d 66 3C FF 3C 
3bde9 67e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3bded 67f 18 18 7E 18 
3bdf1 680 18 00 00 00 
3bdf5 681 00 00 00 00 
3bdf9 682 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3bdfd 683 00 00 7E 00 
3be01 684 00 00 00 00 
3be05 685 00 00 00 00 
3be09 686 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3be0d 687 60 30 18 0C 
3be11 688 06 02 00 00 
3be15 689 3C 66 76 6E 
3be19 68a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3be1d 68b 18 1C 18 18 
3be21 68c 18 7E 00 00 
3be25 68d 3C 66 30 18 
3be29 68e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3be2d 68f 7E 30 18 30 
3be31 690 66 3C 00 00 
3be35 691 30 38 3C 36 
3be39 692 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3be3d 693 7E 06 3E 60 
3be41 694 66 3C 00 00 
3be45 695 3C 06 3E 66 
3be49 696 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3be4d 697 7E 60 30 18 
3be51 698 0C 0C 00 00 
3be55 699 3C 66 3C 66 
3be59 69a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3be5d 69b 3C 66 7C 60 
3be61 69c 30 1C 00 00 
3be65 69d 00 18 18 00 
3be69 69e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3be6d 69f 00 18 18 00 
3be71 6a0 18 18 0C 60 
3be75 6a1 30 18 0C 18 
3be79 6a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3be7d 6a3 00 7E 00 00 
3be81 6a4 7E 00 00 06 
3be85 6a5 0C 18 30 18 
3be89 6a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3be8d 6a7 3C 66 30 18 
3be91 6a8 00 18 00 00 
3be95 6a9 3C 66 76 76 
3be99 6aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3be9d 6ab 18 3C 66 66 
3bea1 6ac 7E 66 00 00 
3bea5 6ad 3E 66 3E 66 
3bea9 6ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3bead 6af 3C 66 06 06 
3beb1 6b0 66 3C 00 00 
3beb5 6b1 1E 36 66 66 
3beb9 6b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3bebd 6b3 7E 06 3E 06 
3bec1 6b4 06 7E 00 00 
3bec5 6b5 7E 06 3E 06 
3bec9 6b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3becd 6b7 7C 06 06 76 
3bed1 6b8 66 7C 00 00 
3bed5 6b9 66 66 7E 66 
3bed9 6ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3bedd 6bb 7E 18 18 18 
3bee1 6bc 18 7E 00 00 
3bee5 6bd 60 60 60 60 
3bee9 6be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3beed 6bf 66 36 1E 1E 
3bef1 6c0 36 66 00 00 
3bef5 6c1 06 06 06 06 
3bef9 6c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3befd 6c3 C6 EE FE D6 
3bf01 6c4 C6 C6 00 00 
3bf05 6c5 66 6E 7E 7E 
3bf09 6c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3bf0d 6c7 3C 66 66 66 
3bf11 6c8 66 3C 00 00 
3bf15 6c9 3E 66 66 3E 
3bf19 6ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3bf1d 6cb 3C 66 66 66 
3bf21 6cc 36 6C 00 00 
3bf25 6cd 3E 66 66 3E 
3bf29 6ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3bf2d 6cf 3C 06 3C 60 
3bf31 6d0 60 3C 00 00 
3bf35 6d1 7E 18 18 18 
3bf39 6d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3bf3d 6d3 66 66 66 66 
3bf41 6d4 66          | 	byte	$66[5]
3bf42 6d4 7E 00 00 66 
3bf46 6d5 66 66 66 3C 
3bf4a 6d6 18 00 00 C6 
3bf4e 6d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3bf52 6d8 C6 00 00 66 
3bf56 6d9 66 3C 3C 66 
3bf5a 6da 66 00 00 66 
3bf5e 6db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3bf62 6dc 18 00 00 7E 
3bf66 6dd 30 18 0C 06 
3bf6a 6de 7E 00 00 78 
3bf6e 6df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3bf72 6e0 78 00 00 02 
3bf76 6e1 06 0C 18 30 
3bf7a 6e2 60 00 00 1E 
3bf7e 6e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3bf82 6e4 1E 00 00 10 
3bf86 6e5 38 6C C6 00 
3bf8a 6e6 00 00 00 00 
3bf8e 6e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bf92 6e8 FF 00 00 18 
3bf96 6e9 3C 7E 7E 3C 
3bf9a 6ea 18 00 00 00 
3bf9e 6eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3bfa2 6ec 7C 00 00 06 
3bfa6 6ed 06 3E 66 66 
3bfaa 6ee 3E 00 00 00 
3bfae 6ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3bfb2 6f0 3C 00 00 60 
3bfb6 6f1 60 7C 66 66 
3bfba 6f2 7C 00 00 00 
3bfbe 6f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3bfc2 6f4 3C 00 00 70 
3bfc6 6f5 18 7C 18 18 
3bfca 6f6 18 00 00 00 
3bfce 6f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3bfd2 6f8 60 3E 00 06 
3bfd6 6f9 06 3E 66 66 
3bfda 6fa 66 00 00 18 
3bfde 6fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3bfe2 6fc 3C 00 00 60 
3bfe6 6fd 00 60 60 60 
3bfea 6fe 60 3C 00 06 
3bfee 6ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3bff2 700 66 00 00 1C 
3bff6 701 18 18 18 18 
3bffa 702 3C 00 00 00 
3bffe 703 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3c002 704 C6 00 00 00 
3c006 705 3E 66 66 66 
3c00a 706 66 00 00 00 
3c00e 707 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3c012 708 3C 00 00 00 
3c016 709 3E 66 66 3E 
3c01a 70a 06 06 00 00 
3c01e 70b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3c022 70c 60 60 00 00 
3c026 70d 3E 66 06 06 
3c02a 70e 06 00 00 00 
3c02e 70f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3c032 710 3E 00 00 18 
3c036 711 7E 18 18 18 
3c03a 712 70 00 00 00 
3c03e 713 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3c042 714 7C 00 00 00 
3c046 715 66 66 66 3C 
3c04a 716 18 00 00 00 
3c04e 717 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3c052 718 6C 00 00 00 
3c056 719 66 3C 18 3C 
3c05a 71a 66 00 00 00 
3c05e 71b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3c062 71c 30 1E 00 00 
3c066 71d 7E 30 18 0C 
3c06a 71e 7E 00 00 18 
3c06e 71f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3c072 720 3C 00 18 18 
3c076 721 18 18 18 18 
3c07a 722 18 18 00 7E 
3c07e 723 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3c082 724 60 00 10 18 
3c086 725 1C 1E 1C 18 
3c08a 726 10 00 08 18 
3c08e 727 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3c092 728 08 00       | 	byte	$08, $00
3c094 729 00 6C FE FE 
3c098 72a 7C 38 10 00 
3c09c 72b 18 18 18 F8 
3c0a0 72c F8 18 18 18 | a8_font2       file "atari8.fnt"
3c0a4 72d C0 C0 C0 C0 
3c0a8 72e C0 C0 C0 C0 | 	byte	$c0[8]
3c0ac 72f 18 18 18 1F 
3c0b0 730 1F 00 00 00 
3c0b4 731 18 18 18 1F 
3c0b8 732 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3c0bc 733 00 00 00 1F 
3c0c0 734 1F 18 18 18 
3c0c4 735 C0 E0 70 38 
3c0c8 736 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3c0cc 737 03 07 0E 1C 
3c0d0 738 38 70 E0 C0 
3c0d4 739 80 C0 E0 F0 
3c0d8 73a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3c0dc 73b 00 00 00 00 
3c0e0 73c F0 F0 F0 F0 
3c0e4 73d 01 03 07 0F 
3c0e8 73e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3c0ec 73f F0 F0 F0 F0 
3c0f0 740 00 00 00 00 
3c0f4 741 0F 0F 0F 0F 
3c0f8 742 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3c0fc 743 FF FF 00 00 
3c100 744 00 00 00 00 
3c104 745 00 00 00 00 
3c108 746 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3c10c 747 00 00 00 00 
3c110 748 0F 0F 0F 0F 
3c114 749 00 38 38 EE 
3c118 74a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3c11c 74b 00 00 00 F8 
3c120 74c F8 18 18 18 
3c124 74d 00 00 00 FF 
3c128 74e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3c12c 74f 18 18 18 FF 
3c130 750 FF 18 18 18 
3c134 751 00 00 3C 7E 
3c138 752 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3c13c 753 00 00 00 00 
3c140 754 FF FF FF FF 
3c144 755 03 03 03 03 
3c148 756 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3c14c 757 00 00 00 FF 
3c150 758 FF 18 18 18 
3c154 759 18 18 18 FF 
3c158 75a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3c15c 75b 0F 0F 0F 0F 
3c160 75c 0F 0F 0F 0F | 	byte	$0f[8]
3c164 75d 18 18 18 F8 
3c168 75e F8 00 00 00 
3c16c 75f 1E 06 1E 06 
3c170 760 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3c174 761 00 18 3C 7E 
3c178 762 18 18 18 00 
3c17c 763 00 18 18 18 
3c180 764 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3c184 765 00 18 0C 7E 
3c188 766 0C 18 00 00 
3c18c 767 00 18 30 7E 
3c190 768 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3c194 769 00 00 00 00 
3c198 76a 00 00 00 00 
3c19c 76b 00          | 	byte	$00[9]
3c19d 76b 18 18 18 18 
3c1a1 76c 00 18 00 00 
3c1a5 76d 66 66 66 00 
3c1a9 76e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3c1ad 76f 66 FF 66 66 
3c1b1 770 FF 66 00 18 
3c1b5 771 7C 06 3C 60 
3c1b9 772 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3c1bd 773 66 36 18 0C 
3c1c1 774 66 62 00 38 
3c1c5 775 6C 38 1C F6 
3c1c9 776 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3c1cd 777 18 18 18 00 
3c1d1 778 00 00 00 00 
3c1d5 779 70 38 18 18 
3c1d9 77a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3c1dd 77b 0E 1C 18 18 
3c1e1 77c 1C 0E 00 00 
3c1e5 77d 66 3C FF 3C 
3c1e9 77e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3c1ed 77f 18 18 7E 18 
3c1f1 780 18 00 00 00 
3c1f5 781 00 00 00 00 
3c1f9 782 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3c1fd 783 00 00 7E 00 
3c201 784 00 00 00 00 
3c205 785 00 00 00 00 
3c209 786 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3c20d 787 60 30 18 0C 
3c211 788 06 02 00 00 
3c215 789 3C 66 76 6E 
3c219 78a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3c21d 78b 18 1C 18 18 
3c221 78c 18 7E 00 00 
3c225 78d 3C 66 30 18 
3c229 78e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3c22d 78f 7E 30 18 30 
3c231 790 66 3C 00 00 
3c235 791 30 38 3C 36 
3c239 792 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3c23d 793 7E 06 3E 60 
3c241 794 66 3C 00 00 
3c245 795 3C 06 3E 66 
3c249 796 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3c24d 797 7E 60 30 18 
3c251 798 0C 0C 00 00 
3c255 799 3C 66 3C 66 
3c259 79a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3c25d 79b 3C 66 7C 60 
3c261 79c 30 1C 00 00 
3c265 79d 00 18 18 00 
3c269 79e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3c26d 79f 00 18 18 00 
3c271 7a0 18 18 0C 60 
3c275 7a1 30 18 0C 18 
3c279 7a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3c27d 7a3 00 7E 00 00 
3c281 7a4 7E 00 00 06 
3c285 7a5 0C 18 30 18 
3c289 7a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3c28d 7a7 3C 66 30 18 
3c291 7a8 00 18 00 00 
3c295 7a9 3C 66 76 76 
3c299 7aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3c29d 7ab 18 3C 66 66 
3c2a1 7ac 7E 66 00 00 
3c2a5 7ad 3E 66 3E 66 
3c2a9 7ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3c2ad 7af 3C 66 06 06 
3c2b1 7b0 66 3C 00 00 
3c2b5 7b1 1E 36 66 66 
3c2b9 7b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3c2bd 7b3 7E 06 3E 06 
3c2c1 7b4 06 7E 00 00 
3c2c5 7b5 7E 06 3E 06 
3c2c9 7b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3c2cd 7b7 7C 06 06 76 
3c2d1 7b8 66 7C 00 00 
3c2d5 7b9 66 66 7E 66 
3c2d9 7ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3c2dd 7bb 7E 18 18 18 
3c2e1 7bc 18 7E 00 00 
3c2e5 7bd 60 60 60 60 
3c2e9 7be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3c2ed 7bf 66 36 1E 1E 
3c2f1 7c0 36 66 00 00 
3c2f5 7c1 06 06 06 06 
3c2f9 7c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3c2fd 7c3 C6 EE FE D6 
3c301 7c4 C6 C6 00 00 
3c305 7c5 66 6E 7E 7E 
3c309 7c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3c30d 7c7 3C 66 66 66 
3c311 7c8 66 3C 00 00 
3c315 7c9 3E 66 66 3E 
3c319 7ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3c31d 7cb 3C 66 66 66 
3c321 7cc 36 6C 00 00 
3c325 7cd 3E 66 66 3E 
3c329 7ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3c32d 7cf 3C 06 3C 60 
3c331 7d0 60 3C 00 00 
3c335 7d1 7E 18 18 18 
3c339 7d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3c33d 7d3 66 66 66 66 
3c341 7d4 66          | 	byte	$66[5]
3c342 7d4 7E 00 00 66 
3c346 7d5 66 66 66 3C 
3c34a 7d6 18 00 00 C6 
3c34e 7d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3c352 7d8 C6 00 00 66 
3c356 7d9 66 3C 3C 66 
3c35a 7da 66 00 00 66 
3c35e 7db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3c362 7dc 18 00 00 7E 
3c366 7dd 30 18 0C 06 
3c36a 7de 7E 00 00 78 
3c36e 7df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3c372 7e0 78 00 00 02 
3c376 7e1 06 0C 18 30 
3c37a 7e2 60 00 00 1E 
3c37e 7e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3c382 7e4 1E 00 00 10 
3c386 7e5 38 6C C6 00 
3c38a 7e6 00 00 00 00 
3c38e 7e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c392 7e8 FF 00 00 18 
3c396 7e9 3C 7E 7E 3C 
3c39a 7ea 18 00 00 00 
3c39e 7eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3c3a2 7ec 7C 00 00 06 
3c3a6 7ed 06 3E 66 66 
3c3aa 7ee 3E 00 00 00 
3c3ae 7ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3c3b2 7f0 3C 00 00 60 
3c3b6 7f1 60 7C 66 66 
3c3ba 7f2 7C 00 00 00 
3c3be 7f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3c3c2 7f4 3C 00 00 70 
3c3c6 7f5 18 7C 18 18 
3c3ca 7f6 18 00 00 00 
3c3ce 7f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3c3d2 7f8 60 3E 00 06 
3c3d6 7f9 06 3E 66 66 
3c3da 7fa 66 00 00 18 
3c3de 7fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3c3e2 7fc 3C 00 00 60 
3c3e6 7fd 00 60 60 60 
3c3ea 7fe 60 3C 00 06 
3c3ee 7ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3c3f2 800 66 00 00 1C 
3c3f6 801 18 18 18 18 
3c3fa 802 3C 00 00 00 
3c3fe 803 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3c402 804 C6 00 00 00 
3c406 805 3E 66 66 66 
3c40a 806 66 00 00 00 
3c40e 807 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3c412 808 3C 00 00 00 
3c416 809 3E 66 66 3E 
3c41a 80a 06 06 00 00 
3c41e 80b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3c422 80c 60 60 00 00 
3c426 80d 3E 66 06 06 
3c42a 80e 06 00 00 00 
3c42e 80f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3c432 810 3E 00 00 18 
3c436 811 7E 18 18 18 
3c43a 812 70 00 00 00 
3c43e 813 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3c442 814 7C 00 00 00 
3c446 815 66 66 66 3C 
3c44a 816 18 00 00 00 
3c44e 817 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3c452 818 6C 00 00 00 
3c456 819 66 3C 18 3C 
3c45a 81a 66 00 00 00 
3c45e 81b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3c462 81c 30 1E 00 00 
3c466 81d 7E 30 18 0C 
3c46a 81e 7E 00 00 18 
3c46e 81f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3c472 820 3C 00 18 18 
3c476 821 18 18 18 18 
3c47a 822 18 18 00 7E 
3c47e 823 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3c482 824 60 00 10 18 
3c486 825 1C 1E 1C 18 
3c48a 826 10 00 08 18 
3c48e 827 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3c492 828 08 00       | 	byte	$08, $00
3c494 829 00 00 00 00 
      ...             
3c6a0 8ac 00 00 00 00 
3c6a4 8ad 00 00       | amiga_font     file "amigafont.def"
3c6a6 8ad 18 18 18 18 
3c6aa 8ae 18 18       | 	byte	$18[6]
3c6ac 8af 00 18 18 00 
3c6b0 8b0 00 00 00 00 
3c6b4 8b1 00 00 66 66 
3c6b8 8b2 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
3c6bc 8b3 00 00 00 00 
3c6c0 8b4 00 00 00 00 
3c6c4 8b5 00 00       | 	byte	$00[10]
3c6c6 8b5 36 36 7F 36 
3c6ca 8b6 36 36 7F 36 
3c6ce 8b7 36 00 00 00 
3c6d2 8b8 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
3c6d6 8b9 18 7C 06 06 
3c6da 8ba 3C 60 60 3E 
3c6de 8bb 18 00 00 00 
3c6e2 8bc 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
3c6e6 8bd 00 00 C6 69 
3c6ea 8be 36 18 6C 96 
3c6ee 8bf 63 00 00 00 
3c6f2 8c0 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
3c6f6 8c1 1C 36 36 1E 
3c6fa 8c2 6E 3B 33 73 
3c6fe 8c3 DE 00 00 00 
3c702 8c4 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
3c706 8c5 18 18 0C 00 
3c70a 8c6 00 00 00 00 
3c70e 8c7 00 00 00 00 
3c712 8c8 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c716 8c9 30 18 0C 0C 
3c71a 8ca 0C 0C 0C 18 
3c71e 8cb 30 00 00 00 
3c722 8cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
3c726 8cd 0C 18 30 30 
3c72a 8ce 30 30 30 18 
3c72e 8cf 0C 00 00 00 
3c732 8d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
3c736 8d1 00 66 66 3C 
3c73a 8d2 FF 3C 66 66 
3c73e 8d3 00 00 00 00 
3c742 8d4 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
3c746 8d5 00 18 18 18 
3c74a 8d6 7E 18 18 18 
3c74e 8d7 00 00 00 00 
3c752 8d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3c756 8d9 00 00 00 00 
3c75a 8da 00 00 00    | 	byte	$00[7]
3c75d 8db 18 18 0C 00 
3c761 8dc 00 00 00 00 
3c765 8dd 00 00 00 00 
3c769 8de 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
3c76d 8df 00 00 00 00 
3c771 8e0 00 00 00 00 
3c775 8e1 00 00 00 00 
3c779 8e2 00 00 00 00 | 	byte	$00[16]
3c77d 8e3 18 18 00 00 
3c781 8e4 00 00 00 00 
3c785 8e5 00 00 C0 60 
3c789 8e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
3c78d 8e7 03 00 00 00 
3c791 8e8 00 00 00 00 
3c795 8e9 00 3C 66 66 
3c799 8ea 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
3c79d 8eb 66 3C 00 00 
3c7a1 8ec 00 00 00 00 
3c7a5 8ed 00 18 1C 1E 
3c7a9 8ee 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
3c7ad 8ef 18 18 00 00 
3c7b1 8f0 00 00 00 00 
3c7b5 8f1 00 3C 66 60 
3c7b9 8f2 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
3c7bd 8f3 06 7E 00 00 
3c7c1 8f4 00 00 00 00 
3c7c5 8f5 00 3C 66 60 
3c7c9 8f6 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
3c7cd 8f7 66 3C 00 00 
3c7d1 8f8 00 00 00 00 
3c7d5 8f9 00 30 38 3C 
3c7d9 8fa 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
3c7dd 8fb 30 30 00 00 
3c7e1 8fc 00 00 00 00 
3c7e5 8fd 00 7E 06 06 
3c7e9 8fe 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
3c7ed 8ff 66 3C 00 00 
3c7f1 900 00 00 00 00 
3c7f5 901 00 38 0C 06 
3c7f9 902 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
3c7fd 903 66 3C 00 00 
3c801 904 00 00 00 00 
3c805 905 00 7E 60 60 
3c809 906 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
3c80d 907 18 18 00 00 
3c811 908 00 00 00 00 
3c815 909 00 3C 66 66 
3c819 90a 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
3c81d 90b 66 3C 00 00 
3c821 90c 00 00 00 00 
3c825 90d 00 3C 66 66 
3c829 90e 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
3c82d 90f 30 1C 00 00 
3c831 910 00 00 00 00 
3c835 911 00 00 00 18 
3c839 912 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
3c83d 913 18 00 00 00 
3c841 914 00 00 00 00 
3c845 915 00 00 00 18 
3c849 916 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3c84d 917 18 18 0C 00 
3c851 918 00 00 00 00 
3c855 919 00 00 00 60 
3c859 91a 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
3c85d 91b 00 00 00 00 
3c861 91c 00 00 00 00 
3c865 91d 00 00 00 00 | 	byte	$00[12]
3c869 91e 7E 00 7E 00 
3c86d 91f 00 00 00 00 
3c871 920 00 00 00 00 
3c875 921 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
3c879 922 18 60 18 06 
3c87d 923 00 00 00 00 
3c881 924 00 00 00 00 
3c885 925 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
3c889 926 60 30 18 00 
3c88d 927 18 18 00 00 
3c891 928 00 00 00 00 
3c895 929 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3c899 92a 7B 6B 7B 03 
3c89d 92b 03 1E 00 00 
3c8a1 92c 00 00 00 00 
3c8a5 92d 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3c8a9 92e 63 7F 63 63 
3c8ad 92f 63 63 00 00 
3c8b1 930 00 00 00 00 
3c8b5 931 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
3c8b9 932 66 3E 66 66 
3c8bd 933 66 3E 00 00 
3c8c1 934 00 00 00 00 
3c8c5 935 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
3c8c9 936 06 06 06 06 
3c8cd 937 0C 78 00 00 
3c8d1 938 00 00 00 00 
3c8d5 939 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
3c8d9 93a 63 63 63 63 
3c8dd 93b 33 1F 00 00 
3c8e1 93c 00 00 00 00 
3c8e5 93d 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3c8e9 93e 06 1E 06 06 
3c8ed 93f 06 7E 00 00 
3c8f1 940 00 00 00 00 
3c8f5 941 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3c8f9 942 06 1E 06 06 
3c8fd 943 06 06 00 00 
3c901 944 00 00 00 00 
3c905 945 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
3c909 946 06 76 66 66 
3c90d 947 66 7C 00 00 
3c911 948 00 00 00 00 
3c915 949 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
3c919 94a 63 7F 63 63 
3c91d 94b 63 63 00 00 
3c921 94c 00 00 00 00 
3c925 94d 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
3c929 94e 18 18 18 18 
3c92d 94f 18          | 	byte	$18[5]
3c92e 94f 3C 00 00 00 
3c932 950 00 00 00 00 
3c936 951 60 60 60 60 
3c93a 952 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
3c93e 953 3E 00 00 00 
3c942 954 00 00 00 00 
3c946 955 C3 63 33 1B 
3c94a 956 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
3c94e 957 C3 00 00 00 
3c952 958 00 00 00 00 
3c956 959 03 03 03 03 
3c95a 95a 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
3c95e 95b 7F 00 00 00 
3c962 95c 00 00 00 00 
3c966 95d 63 77 7F 6B 
3c96a 95e 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
3c96e 95f 63 00 00 00 
3c972 960 00 00 00 00 
3c976 961 63 67 6F 7B 
3c97a 962 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
3c97e 963 63 00 00 00 
3c982 964 00 00 00 00 
3c986 965 3E 63 63 63 
3c98a 966 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
3c98e 967 3E 00 00 00 
3c992 968 00 00 00 00 
3c996 969 3E 66 66 66 
3c99a 96a 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
3c99e 96b 06 00 00 00 
3c9a2 96c 00 00 00 00 
3c9a6 96d 3E 63 63 63 
3c9aa 96e 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
3c9ae 96f FE 00 00 00 
3c9b2 970 00 00 00 00 
3c9b6 971 1F 33 33 33 
3c9ba 972 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
3c9be 973 63 00 00 00 
3c9c2 974 00 00 00 00 
3c9c6 975 3C 66 06 0C 
3c9ca 976 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
3c9ce 977 3C 00 00 00 
3c9d2 978 00 00 00 00 
3c9d6 979 7E 18 18 18 
3c9da 97a 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
3c9de 97b 18 00 00 00 
3c9e2 97c 00 00 00 00 
3c9e6 97d 63 63 63 63 
3c9ea 97e 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
3c9ee 97f 3E 00 00 00 
3c9f2 980 00 00 00 00 
3c9f6 981 63 63 63 63 
3c9fa 982 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
3c9fe 983 08 00 00 00 
3ca02 984 00 00 00 00 
3ca06 985 C3 C3 C3 C3 
3ca0a 986 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
3ca0e 987 C3 00 00 00 
3ca12 988 00 00 00 00 
3ca16 989 C3 C3 66 3C 
3ca1a 98a 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
3ca1e 98b C3 00 00 00 
3ca22 98c 00 00 00 00 
3ca26 98d C3 C3 66 3C 
3ca2a 98e 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
3ca2e 98f 18 00 00 00 
3ca32 990 00 00 00 00 
3ca36 991 7F 60 60 30 
3ca3a 992 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
3ca3e 993 7F 00 00 00 
3ca42 994 00 00 00 00 
3ca46 995 3C 0C 0C 0C 
3ca4a 996 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3ca4e 997 3C 00 00 00 
3ca52 998 00 00 00 00 
3ca56 999 00 03 06 0C 
3ca5a 99a 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
3ca5e 99b 00 00 00 00 
3ca62 99c 00 00 00 00 | 	byte	$00[8]
3ca66 99d 3C 30 30 30 
3ca6a 99e 30 30 30 30 
3ca6e 99f 3C 00 00 00 
3ca72 9a0 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
3ca76 9a1 08 1C 36 63 
3ca7a 9a2 00 00 00 00 
3ca7e 9a3 00 00 00 00 
3ca82 9a4 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ca86 9a5 00 00 00 00 
3ca8a 9a6 00 00 00 00 
3ca8e 9a7 00          | 	byte	$00[9]
3ca8f 9a7 7F 00 00 00 
3ca93 9a8 00 00 00 18 
3ca97 9a9 18 30 00 00 
3ca9b 9aa 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
3ca9f 9ab 00 00 00 00 
3caa3 9ac 00 00 00 00 
3caa7 9ad 00 00       | 	byte	$00[10]
3caa9 9ae 3C 60 7C 66 
3caad 9af 66 7C 00 00 
3cab1 9b0 00 00 00 00 
3cab5 9b1 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
3cab9 9b2 3E 66 66 66 
3cabd 9b3 66 3E 00 00 
3cac1 9b4 00 00 00 00 
3cac5 9b5 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cac9 9b6 3C 06 06 06 
3cacd 9b7 06 3C 00 00 
3cad1 9b8 00 00 00 00 
3cad5 9b9 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
3cad9 9ba 7C 66 66 66 
3cadd 9bb 66 7C 00 00 
3cae1 9bc 00 00 00 00 
3cae5 9bd 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cae9 9be 3C 66 7E 06 
3caed 9bf 06 3C 00 00 
3caf1 9c0 00 00 00 00 
3caf5 9c1 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
3caf9 9c2 3E 0C 0C 0C 
3cafd 9c3 0C 0C 00 00 
3cb01 9c4 00 00 00 00 
3cb05 9c5 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cb09 9c6 7C 66 66 66 
3cb0d 9c7 7C 60 60 3C 
3cb11 9c8 00 00 00 00 
3cb15 9c9 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
3cb19 9ca 3E 66 66 66 
3cb1d 9cb 66 66 00 00 
3cb21 9cc 00 00 00 00 
3cb25 9cd 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
3cb29 9ce 18 18 18 18 
3cb2d 9cf 18          | 	byte	$18[5]
3cb2e 9cf 30 00 00 00 
3cb32 9d0 00 00 00 00 
3cb36 9d1 00 30 00 30 
3cb3a 9d2 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
3cb3e 9d3 30 30 1E 00 
3cb42 9d4 00 00 00 00 
3cb46 9d5 03 03 03 33 
3cb4a 9d6 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
3cb4e 9d7 63 00 00 00 
3cb52 9d8 00 00 00 00 
3cb56 9d9 18 18 18 18 
3cb5a 9da 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3cb5e 9db 30 00 00 00 
3cb62 9dc 00 00 00 00 
3cb66 9dd 00 00 00 37 
3cb6a 9de 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
3cb6e 9df 63 00 00 00 
3cb72 9e0 00 00 00 00 
3cb76 9e1 00 00 00 3E 
3cb7a 9e2 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
3cb7e 9e3 66 00 00 00 
3cb82 9e4 00 00 00 00 
3cb86 9e5 00 00 00 3C 
3cb8a 9e6 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
3cb8e 9e7 3C 00 00 00 
3cb92 9e8 00 00 00 00 
3cb96 9e9 00 00 00 3E 
3cb9a 9ea 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
3cb9e 9eb 06 06 06 00 
3cba2 9ec 00 00 00 00 
3cba6 9ed 00 00 00 7C 
3cbaa 9ee 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
3cbae 9ef 60 60 60 00 
3cbb2 9f0 00 00 00 00 
3cbb6 9f1 00 00 00 3E 
3cbba 9f2 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
3cbbe 9f3 06 00 00 00 
3cbc2 9f4 00 00 00 00 
3cbc6 9f5 00 00 00 3C 
3cbca 9f6 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
3cbce 9f7 3E 00 00 00 
3cbd2 9f8 00 00 00 00 
3cbd6 9f9 00 0C 0C 3E 
3cbda 9fa 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
3cbde 9fb 38 00 00 00 
3cbe2 9fc 00 00 00 00 
3cbe6 9fd 00 00 00 66 
3cbea 9fe 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
3cbee 9ff 7C 00 00 00 
3cbf2 a00 00 00 00 00 
3cbf6 a01 00 00 00 66 
3cbfa a02 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3cbfe a03 18 00 00 00 
3cc02 a04 00 00 00 00 
3cc06 a05 00 00 00 63 
3cc0a a06 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
3cc0e a07 36 00 00 00 
3cc12 a08 00 00 00 00 
3cc16 a09 00 00 00 63 
3cc1a a0a 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
3cc1e a0b 63 00 00 00 
3cc22 a0c 00 00 00 00 
3cc26 a0d 00 00 00 66 
3cc2a a0e 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3cc2e a0f 18 0C 06 00 
3cc32 a10 00 00 00 00 
3cc36 a11 00 00 00 7E 
3cc3a a12 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
3cc3e a13 7E 00 00 00 
3cc42 a14 00 00 00 00 
3cc46 a15 70 18 18 18 
3cc4a a16 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
3cc4e a17 70 00 00 00 
3cc52 a18 00 00 00 00 
3cc56 a19 18 18 18 18 
3cc5a a1a 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3cc5e a1b 18 00 00 00 
3cc62 a1c 00 00 00 00 
3cc66 a1d 0E 18 18 18 
3cc6a a1e 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
3cc6e a1f 0E 00 00 00 
3cc72 a20 00 00 00 00 
3cc76 a21 46 5D 31 00 
3cc7a a22 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
3cc7e a23 00 00 00 00 
3cc82 a24 00 00 00 00 | 	byte	$00[8]
3cc86 a25 C0 F0 3C 0F 
3cc8a a26 C3 F0 3C 0F 
3cc8e a27 03 00 00 00 
3cc92 a28 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
3cc96 a29 18 18 00 18 
3cc9a a2a 18 18 18 18 
3cc9e a2b 18 00 00 00 
3cca2 a2c 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3cca6 a2d 18 18 7E 1B 
3ccaa a2e 1B 7E 18 18 
3ccae a2f 00 00 00 00 
3ccb2 a30 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3ccb6 a31 78 CC 0C 0C 
3ccba a32 1E 0C 0C 06 
3ccbe a33 7F 00 00 00 
3ccc2 a34 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3ccc6 a35 66 3C 66 66 
3ccca a36 3C 66 00 00 
3ccce a37 00 00 00 00 
3ccd2 a38 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ccd6 a39 C3 C3 66 3C 
3ccda a3a 18 7E 18 18 
3ccde a3b 18 00 00 00 
3cce2 a3c 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3cce6 a3d 18 18 18 18 
3ccea a3e 00 18 18 18 
3ccee a3f 18 00 00 00 
3ccf2 a40 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ccf6 a41 3C 06 06 3C 
3ccfa a42 66 66 66 3C 
3ccfe a43 60 60 3C 00 
3cd02 a44 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3cd06 a45 66 66 00 00 
3cd0a a46 00 00 00 00 
3cd0e a47 00 00 00 00 
3cd12 a48 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cd16 a49 7E 81 B9 85 
3cd1a a4a 85 B9 81 7E 
3cd1e a4b 00 00 00 00 
3cd22 a4c 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3cd26 a4d 3C 33 33 7E 
3cd2a a4e 00 7F 00 00 
3cd2e a4f 00 00 00 00 
3cd32 a50 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cd36 a51 00 00 CC 66 
3cd3a a52 33 66 CC 00 
3cd3e a53 00 00 00 00 
3cd42 a54 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cd46 a55 7E 60 60 00 
3cd4a a56 00 00 00 00 
3cd4e a57 00 00 00 00 
3cd52 a58 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cd56 a59 7E 81 9D A5 
3cd5a a5a 9D A5 81 7E 
3cd5e a5b 00 00 00 00 
3cd62 a5c 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3cd66 a5d 7E 00 00 00 
3cd6a a5e 00 00 00 00 
3cd6e a5f 00 00 00 00 
3cd72 a60 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cd76 a61 3C 66 66 3C 
3cd7a a62 00 00 00 00 
3cd7e a63 00 00 00 00 
3cd82 a64 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cd86 a65 18 18 18 7E 
3cd8a a66 18 18 18 00 
3cd8e a67 7E 00 00 00 
3cd92 a68 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
3cd96 a69 1E 30 30 18 
3cd9a a6a 0C 06 3E 00 
3cd9e a6b 00 00 00 00 
3cda2 a6c 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cda6 a6d 1E 30 30 1C 
3cdaa a6e 30 30 1E 00 
3cdae a6f 00 00 00 00 
3cdb2 a70 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cdb6 a71 30 18 0C 06 
3cdba a72 00 00 00 00 
3cdbe a73 00 00 00 00 
3cdc2 a74 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cdc6 a75 00 00 00 66 
3cdca a76 66 66 66 66 
3cdce a77 FE 06 06 00 
3cdd2 a78 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3cdd6 a79 7C 5E 5E 5E 
3cdda a7a 5C 50 50 50 
3cdde a7b 50 50 00 00 
3cde2 a7c 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3cde6 a7d 00 00 00 18 
3cdea a7e 18 00 00 00 
3cdee a7f 00 00 00 00 
3cdf2 a80 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cdf6 a81 00 00 00 00 
3cdfa a82 00 00 00 00 
3cdfe a83 00          | 	byte	$00[9]
3cdff a83 30 18 00 00 
3ce03 a84 00 00 00 18 
3ce07 a85 1C 18 18 18 
3ce0b a86 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
3ce0f a87 00 00 00 00 
3ce13 a88 00 00 00    | 	byte	$00[7]
3ce16 a89 3C 66 66 3C 
3ce1a a8a 00 7E 00 00 
3ce1e a8b 00 00 00 00 
3ce22 a8c 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ce26 a8d 00 00 33 66 
3ce2a a8e CC 66 33 00 
3ce2e a8f 00 00 00 00 
3ce32 a90 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ce36 a91 02 63 32 1A 
3ce3a a92 4E 66 F3 40 
3ce3e a93 40 00 00 00 
3ce42 a94 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
3ce46 a95 04 C6 64 34 
3ce4a a96 7C 8C 46 23 
3ce4e a97 F0 00 00 00 
3ce52 a98 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
3ce56 a99 03 C4 66 34 
3ce5a a9a 5B 6C F6 43 
3ce5e a9b 40 00 00 00 
3ce62 a9c 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
3ce66 a9d 18 18 00 18 
3ce6a a9e 0C 06 06 66 
3ce6e a9f 3C 00 00 00 
3ce72 aa0 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3ce76 aa1 06 0C 3E 63 
3ce7a aa2 63 7F 63 63 
3ce7e aa3 63 00 00 00 
3ce82 aa4 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ce86 aa5 30 18 3E 63 
3ce8a aa6 63 7F 63 63 
3ce8e aa7 63 00 00 00 
3ce92 aa8 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ce96 aa9 0C 33 3E 63 
3ce9a aaa 63 63 7F 63 
3ce9e aab 63 00 00 00 
3cea2 aac 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3cea6 aad 4E 39 3E 63 
3ceaa aae 63 7F 63 63 
3ceae aaf 63 00 00 00 
3ceb2 ab0 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ceb6 ab1 63 00 3E 63 
3ceba ab2 63 7F 63 63 
3cebe ab3 63 00 00 00 
3cec2 ab4 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3cec6 ab5 1C 22 1C 36 
3ceca ab6 63 63 7F 63 
3cece ab7 63 00 00 00 
3ced2 ab8 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3ced6 ab9 F8 3C 3C 36 
3ceda aba F6 3F 33 33 
3cede abb F3 00 00 00 
3cee2 abc 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3cee6 abd 78 0C 06 06 
3ceea abe 06 06 06 0C 
3ceee abf 78 30 18 00 
3cef2 ac0 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3cef6 ac1 0C 18 7E 06 
3cefa ac2 06 3E 06 06 
3cefe ac3 7E 00 00 00 
3cf02 ac4 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3cf06 ac5 30 18 7E 06 
3cf0a ac6 06 3E 06 06 
3cf0e ac7 7E 00 00 00 
3cf12 ac8 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3cf16 ac9 18 66 7E 06 
3cf1a aca 06 3E 06 06 
3cf1e acb 7E 00 00 00 
3cf22 acc 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3cf26 acd 66 00 7E 06 
3cf2a ace 06 3E 06 06 
3cf2e acf 7E 00 00 00 
3cf32 ad0 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3cf36 ad1 0C 18 3C 18 
3cf3a ad2 18 18 18 18 
3cf3e ad3 3C 00 00 00 
3cf42 ad4 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3cf46 ad5 30 18 3C 18 
3cf4a ad6 18 18 18 18 
3cf4e ad7 3C 00 00 00 
3cf52 ad8 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3cf56 ad9 18 66 3C 18 
3cf5a ada 18 18 18 18 
3cf5e adb 3C 00 00 00 
3cf62 adc 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3cf66 add 66 00 3C 18 
3cf6a ade 18 18 18 18 
3cf6e adf 3C 00 00 00 
3cf72 ae0 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3cf76 ae1 1E 36 66 66 
3cf7a ae2 6F 66 66 36 
3cf7e ae3 1E 00 00 00 
3cf82 ae4 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
3cf86 ae5 8E 73 67 6F 
3cf8a ae6 7B 73 63 63 
3cf8e ae7 63 00 00 00 
3cf92 ae8 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3cf96 ae9 06 0C 3E 63 
3cf9a aea 63 63 63 63 
3cf9e aeb 3E 00 00 00 
3cfa2 aec 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3cfa6 aed 30 18 3E 63 
3cfaa aee 63 63 63 63 
3cfae aef 3E 00 00 00 
3cfb2 af0 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3cfb6 af1 0C 33 3E 63 
3cfba af2 63 63 63 63 
3cfbe af3 3E 00 00 00 
3cfc2 af4 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3cfc6 af5 8E 71 3E 63 
3cfca af6 63 63 63 63 
3cfce af7 3E 00 00 00 
3cfd2 af8 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3cfd6 af9 63 00 3E 63 
3cfda afa 63 63 63 63 
3cfde afb 3E 00 00 00 
3cfe2 afc 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3cfe6 afd 00 00 63 36 
3cfea afe 1C 1C 36 63 
3cfee aff 00 00 00 00 
3cff2 b00 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3cff6 b01 BE 63 73 7B 
3cffa b02 6B 6F 67 63 
3cffe b03 3F 00 00 00 
3d002 b04 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3d006 b05 0C 18 63 63 
3d00a b06 63 63 63 63 
3d00e b07 3E 00 00 00 
3d012 b08 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d016 b09 18 0C 63 63 
3d01a b0a 63 63 63 63 
3d01e b0b 3E 00 00 00 
3d022 b0c 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d026 b0d 08 36 63 63 
3d02a b0e 63 63 63 63 
3d02e b0f 3E 00 00 00 
3d032 b10 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d036 b11 63 00 63 63 
3d03a b12 63 63 63 63 
3d03e b13 3E 00 00 00 
3d042 b14 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3d046 b15 30 18 C3 66 
3d04a b16 3C 18 18 18 
3d04e b17 18 00 00 00 
3d052 b18 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d056 b19 03 03 3F 63 
3d05a b1a 63 3F 03 03 
3d05e b1b 03 00 00 00 
3d062 b1c 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
3d066 b1d 3C 66 66 66 
3d06a b1e 36 66 66 66 
3d06e b1f 36 06 06 00 
3d072 b20 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
3d076 b21 06 0C 00 3C 
3d07a b22 60 7C 66 66 
3d07e b23 7C 00 00 00 
3d082 b24 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3d086 b25 60 30 00 3C 
3d08a b26 60 7C 66 66 
3d08e b27 7C 00 00 00 
3d092 b28 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3d096 b29 18 66 00 3C 
3d09a b2a 60 7C 66 66 
3d09e b2b 7C 00 00 00 
3d0a2 b2c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3d0a6 b2d 8E 71 00 3C 
3d0aa b2e 60 7C 66 66 
3d0ae b2f 7C 00 00 00 
3d0b2 b30 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3d0b6 b31 00 66 00 3C 
3d0ba b32 60 7C 66 66 
3d0be b33 7C 00 00 00 
3d0c2 b34 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3d0c6 b35 18 24 18 3C 
3d0ca b36 60 7C 66 66 
3d0ce b37 7C 00 00 00 
3d0d2 b38 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3d0d6 b39 00 00 00 7E 
3d0da b3a D8 FE 1B 1B 
3d0de b3b EE 00 00 00 
3d0e2 b3c 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3d0e6 b3d 00 00 00 3C 
3d0ea b3e 06 06 06 06 
3d0ee b3f 3C 18 0C 00 
3d0f2 b40 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3d0f6 b41 06 0C 00 3C 
3d0fa b42 66 7E 06 06 
3d0fe b43 3C 00 00 00 
3d102 b44 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3d106 b45 60 30 00 3C 
3d10a b46 66 7E 06 06 
3d10e b47 3C 00 00 00 
3d112 b48 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3d116 b49 18 66 00 3C 
3d11a b4a 66 7E 06 06 
3d11e b4b 3C 00 00 00 
3d122 b4c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3d126 b4d 00 66 00 3C 
3d12a b4e 66 7E 06 06 
3d12e b4f 3C 00 00 00 
3d132 b50 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3d136 b51 0C 18 00 18 
3d13a b52 18 18 18 18 
3d13e b53 30 00 00 00 
3d142 b54 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3d146 b55 18 0C 00 0C 
3d14a b56 0C 0C 0C 0C 
3d14e b57 18 00 00 00 
3d152 b58 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
3d156 b59 18 66 00 18 
3d15a b5a 18 18 18 18 
3d15e b5b 30 00 00 00 
3d162 b5c 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3d166 b5d 00 66 00 18 
3d16a b5e 18 18 18 18 
3d16e b5f 30 00 00 00 
3d172 b60 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3d176 b61 03 06 3F 18 
3d17a b62 3C 66 66 66 
3d17e b63 3C 00 00 00 
3d182 b64 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3d186 b65 8E 71 00 3E 
3d18a b66 66 66 66 66 
3d18e b67 66 00 00 00 
3d192 b68 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3d196 b69 06 0C 00 3C 
3d19a b6a 66 66 66 66 
3d19e b6b 3C 00 00 00 
3d1a2 b6c 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3d1a6 b6d 60 30 00 3C 
3d1aa b6e 66 66 66 66 
3d1ae b6f 3C 00 00 00 
3d1b2 b70 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3d1b6 b71 18 66 00 3C 
3d1ba b72 66 66 66 66 
3d1be b73 3C 00 00 00 
3d1c2 b74 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3d1c6 b75 8E 71 00 3C 
3d1ca b76 66 66 66 66 
3d1ce b77 3C 00 00 00 
3d1d2 b78 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3d1d6 b79 00 66 00 3C 
3d1da b7a 66 66 66 66 
3d1de b7b 3C 00 00 00 
3d1e2 b7c 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3d1e6 b7d 00 18 18 00 
3d1ea b7e 7E 00 18 18 
3d1ee b7f 00 00 00 00 
3d1f2 b80 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3d1f6 b81 00 00 00 7E 
3d1fa b82 73 7B 6F 67 
3d1fe b83 3F 00 00 00 
3d202 b84 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3d206 b85 0C 18 00 66 
3d20a b86 66 66 66 66 
3d20e b87 7C 00 00 00 
3d212 b88 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3d216 b89 30 18 00 66 
3d21a b8a 66 66 66 66 
3d21e b8b 7C 00 00 00 
3d222 b8c 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3d226 b8d 18 66 00 66 
3d22a b8e 66 66 66 66 
3d22e b8f 7C 00 00 00 
3d232 b90 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3d236 b91 00 66 00 66 
3d23a b92 66 66 66 66 
3d23e b93 7C 00 00 00 
3d242 b94 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3d246 b95 30 18 00 66 
3d24a b96 66 66 66 3C 
3d24e b97 18 0C 06 00 
3d252 b98 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3d256 b99 06 06 06 3E 
3d25a b9a 66 66 66 3E 
3d25e b9b 06 06 06 00 
3d262 b9c 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
3d266 b9d 00 66 00 66 
3d26a b9e 66 66 66 3C 
3d26e b9f 18 0C 06 00 
3d272 ba0 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3d276 ba1 00 7E 66 66 
3d27a ba2 66 66 66 66 
3d27e ba3 66 7E 00 00 
3d282 ba4 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
3d286 ba5 00 00 00 00 
      ...             
3d48e c27 00 00 00 00 
3d492 c28 00 00       | 	byte	$00[526]
3d494 c29 00 00 00 00 
3d498 c2a 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3d499 c2a 80 00 00 00 
3d49d c2b 00 80 00 00 
3d4a1 c2c 80 80 00 00 
3d4a5 c2d 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3d4a9 c2e 80 00 80 00 
3d4ad c2f 00 40 80 00 
3d4b1 c30 AA AA AA 00 
3d4b5 c31 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3d4b9 c32 FF 00 00 00 
3d4bd c33 00 FF 00 00 
3d4c1 c34 FF FF 00 00 
3d4c5 c35 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3d4c9 c36 FF 00 FF 00 
3d4cd c37 00 FF FF 00 
3d4d1 c38 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3d4d4 c39 00 00 00 00 
3d4d8 c3a 00          | ataripalette   file "ataripalettep2.def"
3d4d9 c3a 11 11 11 00 
3d4dd c3b 22 22 22 00 
3d4e1 c3c 33 33 33 00 
3d4e5 c3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3d4e9 c3e 55 55 55 00 
3d4ed c3f 66 66 66 00 
3d4f1 c40 77 77 77 00 
3d4f5 c41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3d4f9 c42 99 99 99 00 
3d4fd c43 AA AA AA 00 
3d501 c44 BB BB BB 00 
3d505 c45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3d509 c46 DD DD DD 00 
3d50d c47 EE EE EE 00 
3d511 c48 FF FF FF 00 
3d515 c49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3d519 c4a 00 14 40 00 
3d51d c4b 00 1E 60 00 
3d521 c4c 00 28 80 00 
3d525 c4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3d529 c4e 00 3C BF 00 
3d52d c4f 00 46 DF 00 
3d531 c50 00 50 FF 00 
3d535 c51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3d539 c52 39 77 FF 00 
3d53d c53 55 8A FF 00 
3d541 c54 71 9E FF 00 
3d545 c55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3d549 c56 AA C5 FF 00 
3d54d c57 C6 D8 FF 00 
3d551 c58 E3 EC FF 00 
3d555 c59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3d559 c5a 00 00 40 00 
3d55d c5b 00 00 60 00 
3d561 c5c 00 00 80 00 
3d565 c5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3d569 c5e 00 00 BF 00 
3d56d c5f 00 00 DF 00 
3d571 c60 00 00 FF 00 
3d575 c61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3d579 c62 39 39 FF 00 
3d57d c63 55 55 FF 00 
3d581 c64 71 71 FF 00 
3d585 c65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3d589 c66 AA AA FF 00 
3d58d c67 C6 C6 FF 00 
3d591 c68 E3 E3 FF 00 
3d595 c69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3d599 c6a 20 00 40 00 
3d59d c6b 30 00 60 00 
3d5a1 c6c 40 00 80 00 
3d5a5 c6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3d5a9 c6e 60 00 BF 00 
3d5ad c6f 70 00 DF 00 
3d5b1 c70 80 00 FF 00 
3d5b5 c71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3d5b9 c72 9C 39 FF 00 
3d5bd c73 AA 55 FF 00 
3d5c1 c74 B8 71 FF 00 
3d5c5 c75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3d5c9 c76 D5 AA FF 00 
3d5cd c77 E3 C6 FF 00 
3d5d1 c78 F1 E3 FF 00 
3d5d5 c79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3d5d9 c7a 40 00 40 00 
3d5dd c7b 60 00 60 00 
3d5e1 c7c 80 00 80 00 
3d5e5 c7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3d5e9 c7e BF 00 BF 00 
3d5ed c7f DF 00 DF 00 
3d5f1 c80 FF 00 FF 00 
3d5f5 c81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3d5f9 c82 FF 39 FF 00 
3d5fd c83 FF 55 FF 00 
3d601 c84 FF 71 FF 00 
3d605 c85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3d609 c86 FF AA FF 00 
3d60d c87 FF C6 FF 00 
3d611 c88 FF E3 FF 00 
3d615 c89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3d619 c8a 40 00 20 00 
3d61d c8b 60 00 30 00 
3d621 c8c 80 00 40 00 
3d625 c8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3d629 c8e BF 00 60 00 
3d62d c8f DF 00 70 00 
3d631 c90 FF 00 80 00 
3d635 c91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3d639 c92 FF 39 9C 00 
3d63d c93 FF 55 AA 00 
3d641 c94 FF 71 B8 00 
3d645 c95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3d649 c96 FF AA D5 00 
3d64d c97 FF C6 E3 00 
3d651 c98 FF E3 F1 00 
3d655 c99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3d659 c9a 40 00 00 00 
3d65d c9b 60 00 00 00 
3d661 c9c 80 00 00 00 
3d665 c9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3d669 c9e BF 00 00 00 
3d66d c9f DF 00 00 00 
3d671 ca0 FF 00 00 00 
3d675 ca1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3d679 ca2 FF 39 39 00 
3d67d ca3 FF 55 55 00 
3d681 ca4 FF 71 71 00 
3d685 ca5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3d689 ca6 FF AA AA 00 
3d68d ca7 FF C6 C6 00 
3d691 ca8 FF E3 E3 00 
3d695 ca9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3d699 caa 40 10 00 00 
3d69d cab 60 18 00 00 
3d6a1 cac 80 20 00 00 
3d6a5 cad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3d6a9 cae BF 30 00 00 
3d6ad caf DF 38 00 00 
3d6b1 cb0 FF 40 00 00 
3d6b5 cb1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3d6b9 cb2 FF 6A 39 00 
3d6bd cb3 FF 80 55 00 
3d6c1 cb4 FF 95 71 00 
3d6c5 cb5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3d6c9 cb6 FF BF AA 00 
3d6cd cb7 FF D5 C6 00 
3d6d1 cb8 FF EA E3 00 
3d6d5 cb9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3d6d9 cba 40 20 00 00 
3d6dd cbb 60 30 00 00 
3d6e1 cbc 80 40 00 00 
3d6e5 cbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3d6e9 cbe BF 60 00 00 
3d6ed cbf DF 70 00 00 
3d6f1 cc0 FF 80 00 00 
3d6f5 cc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3d6f9 cc2 FF 9C 39 00 
3d6fd cc3 FF AA 55 00 
3d701 cc4 FF B8 71 00 
3d705 cc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3d709 cc6 FF D5 AA 00 
3d70d cc7 FF E3 C6 00 
3d711 cc8 FF F1 E3 00 
3d715 cc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3d719 cca 40 30 00 00 
3d71d ccb 60 48 00 00 
3d721 ccc 80 60 00 00 
3d725 ccd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3d729 cce BF 90 00 00 
3d72d ccf DF A8 00 00 
3d731 cd0 FF C0 00 00 
3d735 cd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3d739 cd2 FF CE 39 00 
3d73d cd3 FF D5 55 00 
3d741 cd4 FF DC 71 00 
3d745 cd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3d749 cd6 FF EA AA 00 
3d74d cd7 FF F1 C6 00 
3d751 cd8 FF F8 E3 00 
3d755 cd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3d759 cda 30 40 00 00 
3d75d cdb 48 60 00 00 
3d761 cdc 60 80 00 00 
3d765 cdd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3d769 cde 90 BF 00 00 
3d76d cdf A8 DF 00 00 
3d771 ce0 C0 FF 00 00 
3d775 ce1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3d779 ce2 CE FF 39 00 
3d77d ce3 D5 FF 55 00 
3d781 ce4 DC FF 71 00 
3d785 ce5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3d789 ce6 EA FF AA 00 
3d78d ce7 F1 FF C6 00 
3d791 ce8 F8 FF E3 00 
3d795 ce9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3d799 cea 00 40 00 00 
3d79d ceb 00 60 00 00 
3d7a1 cec 00 80 00 00 
3d7a5 ced 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3d7a9 cee 00 BF 00 00 
3d7ad cef 00 DF 00 00 
3d7b1 cf0 00 FF 00 00 
3d7b5 cf1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3d7b9 cf2 39 FF 39 00 
3d7bd cf3 55 FF 55 00 
3d7c1 cf4 71 FF 71 00 
3d7c5 cf5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3d7c9 cf6 AA FF AA 00 
3d7cd cf7 C6 FF C6 00 
3d7d1 cf8 E3 FF E3 00 
3d7d5 cf9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3d7d9 cfa 00 40 14 00 
3d7dd cfb 00 60 1E 00 
3d7e1 cfc 00 80 28 00 
3d7e5 cfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3d7e9 cfe 00 BF 3C 00 
3d7ed cff 00 DF 46 00 
3d7f1 d00 00 FF 50 00 
3d7f5 d01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3d7f9 d02 39 FF 77 00 
3d7fd d03 55 FF 8A 00 
3d801 d04 71 FF 9E 00 
3d805 d05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3d809 d06 AA FF C5 00 
3d80d d07 C6 FF D8 00 
3d811 d08 E3 FF EC 00 
3d815 d09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3d819 d0a 00 40 28 00 
3d81d d0b 00 60 3C 00 
3d821 d0c 00 80 50 00 
3d825 d0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3d829 d0e 00 BF 78 00 
3d82d d0f 00 DF 8C 00 
3d831 d10 00 FF A0 00 
3d835 d11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3d839 d12 39 FF B5 00 
3d83d d13 55 FF C0 00 
3d841 d14 71 FF CA 00 
3d845 d15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3d849 d16 AA FF DF 00 
3d84d d17 C6 FF EA 00 
3d851 d18 E3 FF F4 00 
3d855 d19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3d859 d1a 00 40 40 00 
3d85d d1b 00 60 60 00 
3d861 d1c 00 80 80 00 
3d865 d1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3d869 d1e 00 BF BF 00 
3d86d d1f 00 DF DF 00 
3d871 d20 00 FF FF 00 
3d875 d21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3d879 d22 39 FF FF 00 
3d87d d23 55 FF FF 00 
3d881 d24 71 FF FF 00 
3d885 d25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3d889 d26 AA FF FF 00 
3d88d d27 C6 FF FF 00 
3d891 d28 E3 FF FF 00 
3d895 d29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3d899 d2a 00 28 40 00 
3d89d d2b 00 3C 60 00 
3d8a1 d2c 00 50 80 00 
3d8a5 d2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3d8a9 d2e 00 78 BF 00 
3d8ad d2f 00 8C DF 00 
3d8b1 d30 00 A0 FF 00 
3d8b5 d31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3d8b9 d32 39 B5 FF 00 
3d8bd d33 55 C0 FF 00 
3d8c1 d34 71 CA FF 00 
3d8c5 d35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3d8c9 d36 AA DF FF 00 
3d8cd d37 C6 EA FF 00 
3d8d1 d38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3d8d4 d39 00 00 00 00 
3d8d8 d3a 00          | ataripalette2  file "ataripalettep2.def"
3d8d9 d3a 11 11 11 00 
3d8dd d3b 22 22 22 00 
3d8e1 d3c 33 33 33 00 
3d8e5 d3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3d8e9 d3e 55 55 55 00 
3d8ed d3f 66 66 66 00 
3d8f1 d40 77 77 77 00 
3d8f5 d41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3d8f9 d42 99 99 99 00 
3d8fd d43 AA AA AA 00 
3d901 d44 BB BB BB 00 
3d905 d45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3d909 d46 DD DD DD 00 
3d90d d47 EE EE EE 00 
3d911 d48 FF FF FF 00 
3d915 d49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3d919 d4a 00 14 40 00 
3d91d d4b 00 1E 60 00 
3d921 d4c 00 28 80 00 
3d925 d4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3d929 d4e 00 3C BF 00 
3d92d d4f 00 46 DF 00 
3d931 d50 00 50 FF 00 
3d935 d51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3d939 d52 39 77 FF 00 
3d93d d53 55 8A FF 00 
3d941 d54 71 9E FF 00 
3d945 d55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3d949 d56 AA C5 FF 00 
3d94d d57 C6 D8 FF 00 
3d951 d58 E3 EC FF 00 
3d955 d59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3d959 d5a 00 00 40 00 
3d95d d5b 00 00 60 00 
3d961 d5c 00 00 80 00 
3d965 d5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3d969 d5e 00 00 BF 00 
3d96d d5f 00 00 DF 00 
3d971 d60 00 00 FF 00 
3d975 d61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3d979 d62 39 39 FF 00 
3d97d d63 55 55 FF 00 
3d981 d64 71 71 FF 00 
3d985 d65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3d989 d66 AA AA FF 00 
3d98d d67 C6 C6 FF 00 
3d991 d68 E3 E3 FF 00 
3d995 d69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3d999 d6a 20 00 40 00 
3d99d d6b 30 00 60 00 
3d9a1 d6c 40 00 80 00 
3d9a5 d6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3d9a9 d6e 60 00 BF 00 
3d9ad d6f 70 00 DF 00 
3d9b1 d70 80 00 FF 00 
3d9b5 d71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3d9b9 d72 9C 39 FF 00 
3d9bd d73 AA 55 FF 00 
3d9c1 d74 B8 71 FF 00 
3d9c5 d75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3d9c9 d76 D5 AA FF 00 
3d9cd d77 E3 C6 FF 00 
3d9d1 d78 F1 E3 FF 00 
3d9d5 d79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3d9d9 d7a 40 00 40 00 
3d9dd d7b 60 00 60 00 
3d9e1 d7c 80 00 80 00 
3d9e5 d7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3d9e9 d7e BF 00 BF 00 
3d9ed d7f DF 00 DF 00 
3d9f1 d80 FF 00 FF 00 
3d9f5 d81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3d9f9 d82 FF 39 FF 00 
3d9fd d83 FF 55 FF 00 
3da01 d84 FF 71 FF 00 
3da05 d85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3da09 d86 FF AA FF 00 
3da0d d87 FF C6 FF 00 
3da11 d88 FF E3 FF 00 
3da15 d89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3da19 d8a 40 00 20 00 
3da1d d8b 60 00 30 00 
3da21 d8c 80 00 40 00 
3da25 d8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3da29 d8e BF 00 60 00 
3da2d d8f DF 00 70 00 
3da31 d90 FF 00 80 00 
3da35 d91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3da39 d92 FF 39 9C 00 
3da3d d93 FF 55 AA 00 
3da41 d94 FF 71 B8 00 
3da45 d95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3da49 d96 FF AA D5 00 
3da4d d97 FF C6 E3 00 
3da51 d98 FF E3 F1 00 
3da55 d99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3da59 d9a 40 00 00 00 
3da5d d9b 60 00 00 00 
3da61 d9c 80 00 00 00 
3da65 d9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3da69 d9e BF 00 00 00 
3da6d d9f DF 00 00 00 
3da71 da0 FF 00 00 00 
3da75 da1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3da79 da2 FF 39 39 00 
3da7d da3 FF 55 55 00 
3da81 da4 FF 71 71 00 
3da85 da5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3da89 da6 FF AA AA 00 
3da8d da7 FF C6 C6 00 
3da91 da8 FF E3 E3 00 
3da95 da9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3da99 daa 40 10 00 00 
3da9d dab 60 18 00 00 
3daa1 dac 80 20 00 00 
3daa5 dad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3daa9 dae BF 30 00 00 
3daad daf DF 38 00 00 
3dab1 db0 FF 40 00 00 
3dab5 db1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3dab9 db2 FF 6A 39 00 
3dabd db3 FF 80 55 00 
3dac1 db4 FF 95 71 00 
3dac5 db5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3dac9 db6 FF BF AA 00 
3dacd db7 FF D5 C6 00 
3dad1 db8 FF EA E3 00 
3dad5 db9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3dad9 dba 40 20 00 00 
3dadd dbb 60 30 00 00 
3dae1 dbc 80 40 00 00 
3dae5 dbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3dae9 dbe BF 60 00 00 
3daed dbf DF 70 00 00 
3daf1 dc0 FF 80 00 00 
3daf5 dc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3daf9 dc2 FF 9C 39 00 
3dafd dc3 FF AA 55 00 
3db01 dc4 FF B8 71 00 
3db05 dc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3db09 dc6 FF D5 AA 00 
3db0d dc7 FF E3 C6 00 
3db11 dc8 FF F1 E3 00 
3db15 dc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3db19 dca 40 30 00 00 
3db1d dcb 60 48 00 00 
3db21 dcc 80 60 00 00 
3db25 dcd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3db29 dce BF 90 00 00 
3db2d dcf DF A8 00 00 
3db31 dd0 FF C0 00 00 
3db35 dd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3db39 dd2 FF CE 39 00 
3db3d dd3 FF D5 55 00 
3db41 dd4 FF DC 71 00 
3db45 dd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3db49 dd6 FF EA AA 00 
3db4d dd7 FF F1 C6 00 
3db51 dd8 FF F8 E3 00 
3db55 dd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3db59 dda 30 40 00 00 
3db5d ddb 48 60 00 00 
3db61 ddc 60 80 00 00 
3db65 ddd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3db69 dde 90 BF 00 00 
3db6d ddf A8 DF 00 00 
3db71 de0 C0 FF 00 00 
3db75 de1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3db79 de2 CE FF 39 00 
3db7d de3 D5 FF 55 00 
3db81 de4 DC FF 71 00 
3db85 de5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3db89 de6 EA FF AA 00 
3db8d de7 F1 FF C6 00 
3db91 de8 F8 FF E3 00 
3db95 de9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3db99 dea 00 40 00 00 
3db9d deb 00 60 00 00 
3dba1 dec 00 80 00 00 
3dba5 ded 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3dba9 dee 00 BF 00 00 
3dbad def 00 DF 00 00 
3dbb1 df0 00 FF 00 00 
3dbb5 df1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3dbb9 df2 39 FF 39 00 
3dbbd df3 55 FF 55 00 
3dbc1 df4 71 FF 71 00 
3dbc5 df5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3dbc9 df6 AA FF AA 00 
3dbcd df7 C6 FF C6 00 
3dbd1 df8 E3 FF E3 00 
3dbd5 df9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3dbd9 dfa 00 40 14 00 
3dbdd dfb 00 60 1E 00 
3dbe1 dfc 00 80 28 00 
3dbe5 dfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3dbe9 dfe 00 BF 3C 00 
3dbed dff 00 DF 46 00 
3dbf1 e00 00 FF 50 00 
3dbf5 e01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3dbf9 e02 39 FF 77 00 
3dbfd e03 55 FF 8A 00 
3dc01 e04 71 FF 9E 00 
3dc05 e05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3dc09 e06 AA FF C5 00 
3dc0d e07 C6 FF D8 00 
3dc11 e08 E3 FF EC 00 
3dc15 e09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3dc19 e0a 00 40 28 00 
3dc1d e0b 00 60 3C 00 
3dc21 e0c 00 80 50 00 
3dc25 e0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3dc29 e0e 00 BF 78 00 
3dc2d e0f 00 DF 8C 00 
3dc31 e10 00 FF A0 00 
3dc35 e11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3dc39 e12 39 FF B5 00 
3dc3d e13 55 FF C0 00 
3dc41 e14 71 FF CA 00 
3dc45 e15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3dc49 e16 AA FF DF 00 
3dc4d e17 C6 FF EA 00 
3dc51 e18 E3 FF F4 00 
3dc55 e19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3dc59 e1a 00 40 40 00 
3dc5d e1b 00 60 60 00 
3dc61 e1c 00 80 80 00 
3dc65 e1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3dc69 e1e 00 BF BF 00 
3dc6d e1f 00 DF DF 00 
3dc71 e20 00 FF FF 00 
3dc75 e21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3dc79 e22 39 FF FF 00 
3dc7d e23 55 FF FF 00 
3dc81 e24 71 FF FF 00 
3dc85 e25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3dc89 e26 AA FF FF 00 
3dc8d e27 C6 FF FF 00 
3dc91 e28 E3 FF FF 00 
3dc95 e29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3dc99 e2a 00 28 40 00 
3dc9d e2b 00 3C 60 00 
3dca1 e2c 00 50 80 00 
3dca5 e2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3dca9 e2e 00 78 BF 00 
3dcad e2f 00 8C DF 00 
3dcb1 e30 00 A0 FF 00 
3dcb5 e31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3dcb9 e32 39 B5 FF 00 
3dcbd e33 55 C0 FF 00 
3dcc1 e34 71 CA FF 00 
3dcc5 e35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3dcc9 e36 AA DF FF 00 
3dccd e37 C6 EA FF 00 
3dcd1 e38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3dcd4 e39             | 
3dcd4 e39             | '**********************************************************************************
3dcd4 e39             | '
3dcd4 e39             | '        Timings and colors definitions
3dcd4 e39             | '
3dcd4 e39             | '**********************************************************************************
3dcd4 e39             | 
3dcd4 e39             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3dcd4 e39 08 00 00 00 
3dcd8 e3a 3C 00 00 00 
3dcdc e3b 08 00 00 00 
3dce0 e3c 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3dce4 e3d 07 00 00 00 
3dce8 e3e 04 00 00 00 
3dcec e3f 01 00 00 00 
3dcf0 e40 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3dcf4 e41 58 02 00 00 
3dcf8 e42 20 9E 4B 14 
3dcfc e43 FB A8 9E 01 
3dd00 e44 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3dd04 e45 00 00 00 00 
3dd08 e46 C0 00 00 00 
3dd0c e47 00 00 00 00 
3dd10 e48 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dd14 e49             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3dd14 e49 00 75 C7 97 
3dd18 e4a 27 47 F6 0A 
3dd1c e4b 05 79 CB 9B 
3dd20 e4c 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3dd24 e4d             | 
3dd24 e4d             | ''--------  Initialization  ----------------------------------------------------------------
3dd24 e4d             | 
3dd24 e4d 28 0C 64 FD | hdmi            setq    #6
3dd28 e4e 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3dd2c e4f 28 10 64 FD |                 setq    #8
3dd30 e50 D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3dd34 e51             | 
3dd34 e51 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3dd38 e52 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3dd3c e53 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3dd40 e54 D6 C6 01 F1 |                 add     t1,hbase
3dd44 e55 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3dd48 e56 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3dd4c e57 7B 0B 80 5F 
3dd50 e58 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3dd54 e59 66 66 86 FF 
3dd58 e5a 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3dd5c e5b             | '
3dd5c e5b D6 C6 01 F6 |                 mov 	t1,hbase			   '
3dd60 e5c 11 C6 65 F0 |                 shl 	t1,#17                             '
3dd64 e5d E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3dd68 e5e 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3dd6c e5f             | 
3dd6c e5f 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3dd70 e60 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3dd74 e61 E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3dd78 e62             | 
3dd78 e62             | ''--------  frame rendering main loop  ---------------------------------------------------
3dd78 e62             | 
3dd78 e62 28 06 64 FD | p101            setq 	#3
3dd7c e63 00 A5 05 FB | 		rdlong  vblankptr,ptra
3dd80 e64 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3dd84 e65 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3dd88 e66 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3dd8c e67 00 A0 05 F6 |                 mov     dlinum, #0
3dd90 e68 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3dd94 e69 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3dd98 e6a             | 
3dd98 e6a             | 
3dd98 e6a 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3dd9c e6b 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3dda0 e6c ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3dda4 e6d             |                 
3dda4 e6d             | 
3dda4 e6d             | 
3dda4 e6d             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3dda4 e6d             |   
3dda4 e6d 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3dda8 e6e 29 FE 65 3D |          if_nc  setq2   #255
3ddac e6f D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3ddb0 e70             | 
3ddb0 e70             | '' -----   up porch (before the picture)
3ddb0 e70             | 
3ddb0 e70 C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3ddb4 e71 C1 C4 01 F6 |                 mov     hsync1,sync_001	
3ddb8 e72 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3ddbc e73 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3ddc0 e74             |  
3ddc0 e74             |    
3ddc0 e74             |  
3ddc0 e74 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3ddc4 e75 E2 8C B1 FC |                 xzero   m_sn,hsync1
3ddc8 e76 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3ddcc e77 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3ddd0 e78 E1 90 C1 FC |                 xcont   m_vi,hsync0
3ddd4 e79 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3ddd8 e7a             | 
3ddd8 e7a E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3dddc e7b E2 8C B1 FC |                 xzero   m_sn,hsync1
3dde0 e7c 48 00 B0 FD | 		call    #dli
3dde4 e7d E1 8E C1 FC |                 xcont   m_bv,hsync0     
3dde8 e7e E1 90 C1 FC |                 xcont   m_vi,hsync0
3ddec e7f 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3ddf0 e80             |                 	
3ddf0 e80             |                 
3ddf0 e80             | 
3ddf0 e80             |  
3ddf0 e80             | '' ------- the main screen drawing starts here
3ddf0 e80             | 
3ddf0 e80 E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3ddf4 e81 E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3ddf8 e82 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3ddfc e83 E1 8E C1 FC |                 xcont   m_bv,hsync0
3de00 e84 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3de04 e85 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3de08 e86 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3de0c e87             |               
3de0c e87             | 
3de0c e87 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3de10 e88 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3de14 e89             | 
3de14 e89             | ' ---------------- All visible lines displayed now, start vblank  
3de14 e89             | 
3de14 e89 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3de18 e8a 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3de1c e8b C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3de20 e8c C3 C4 01 F6 |                 mov     hsync1,sync_223
3de24 e8d 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3de28 e8e 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3de2c e8f             | 
3de2c e8f             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3de2c e8f             | 
3de2c e8f             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3de2c e8f             | 
3de2c e8f 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3de30 e90             | 
3de30 e90 DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3de34 e91 04 B8 05 A1 |     if_z        add     dlptr2,#4
3de38 e92 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3de3c e93             | 
3de3c e93 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3de40 e94 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3de44 e95 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3de48 e96 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3de4c e97 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3de50 e98             | 
3de50 e98 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3de54 e99 DD C6 41 F8 |                 getnib  t1,dl,#0
3de58 e9a 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3de5c e9b 70 00 90 AD |     if_z        jmp     #preload
3de60 e9c 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3de64 e9d 94 00 90 AD |     if_z        jmp     #preload2
3de68 e9e 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3de6c e9f 0C 00 90 AD |     if_z        jmp     #p390
3de70 ea0 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3de74 ea1 28 00 90 AD |     if_z        jmp     #p391  
3de78 ea2             | 
3de78 ea2 2D 00 64 FD | p308            ret
3de7c ea3             |    
3de7c ea3 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3de80 ea4 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3de84 ea5 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3de88 ea6 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3de8c ea7 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3de90 ea8 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3de94 ea9 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3de98 eaa 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3de9c eab 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3dea0 eac             |  
3dea0 eac             | '' --------  Reload palette. To do 
3dea0 eac             | 
3dea0 eac E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3dea4 ead 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3dea8 eae 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3deac eaf 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3deb0 eb0 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3deb4 eb1 E0 00 00 FB |         	rdlong  $000, framebuf2         	
3deb8 eb2 70 FF 9F FD |         	jmp     #dli                
3debc eb3             |       
3debc eb3             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3debc eb3             | 
3debc eb3             | 
3debc eb3             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3debc eb3             | 
3debc eb3 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3dec0 eb4 E2 8C B1 FC |                 xzero   m_sn,hsync1
3dec4 eb5 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3dec8 eb6 E1 90 C1 FC |                 xcont   m_vi,hsync0
3decc eb7 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3ded0 eb8             |         
3ded0 eb8             | '' -------------- Preload a line from PSRAM        
3ded0 eb8             |         
3ded0 eb8 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3ded4 eb9 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3ded8 eba DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3dedc ebb DE B4 01 F6 |                 mov     buf1,buf1c
3dee0 ebc 03 A0 05 F7 |                 incmod  dlinum,#3
3dee4 ebd             | 
3dee4 ebd 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3dee8 ebe 32 B7 01 F6 |                 mov     buf2,a1024
3deec ebf E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3def0 ec0 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3def4 ec1 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3def8 ec2 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3defc ec3             |  
3defc ec3             |  
3defc ec3             | preload2      '  incmod  dlinum,#3
3defc ec3 04 C0 45 F0 |                 shr 	framebuf2,#4
3df00 ec4 ED B2 01 F6 |                 mov 	cmd,affffffff
3df04 ec5 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3df08 ec6 28 02 64 FD |                 setq	#1
3df0c ec7 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3df10 ec8             |                 
3df10 ec8             | 
3df10 ec8             | '' -------------- Draw sprites
3df10 ec8             | 
3df10 ec8 CF 5C 02 F6 | sprite          mov t8,frames
3df14 ec9 10 5C 0E F5 | 		and t8,#16 wz
3df18 eca 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
3df1c ecb 10 48 06 A6 | 	if_z    mov spritenum, #16	
3df20 ecc             | 		
3df20 ecc             | 
3df20 ecc 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3df24 ecd 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3df28 ece EF 56 96 F9 |                 alts    t5,#sprite1xy
3df2c ecf 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3df30 ed0 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3df34 ed1 EF 56 96 F9 |                 alts    t5,#sprite1xy
3df38 ed2 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3df3c ed3 0F 4C 66 F7 |                 signx	sprite_x,#15
3df40 ed4 F0 56 96 F9 |                 alts    t5,#sprite1wh
3df44 ed5 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3df48 ed6 01 52 86 F1 |                 sub     sprite_h,#1
3df4c ed7 F0 56 96 F9 |                 alts    t5,#sprite1wh
3df50 ed8 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3df54 ed9             | 
3df54 ed9             | 
3df54 ed9 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3df58 eda BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3df5c edb 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3df60 edc B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3df64 edd 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3df68 ede AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3df6c edf 00 5E 06 F6 |                 mov 	t9,#0
3df70 ee0 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3df74 ee1 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3df78 ee2 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3df7c ee3             |      
3df7c ee3 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3df80 ee4 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3df84 ee5 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3df88 ee6 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3df8c ee7 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3df90 ee8             |                 
3df90 ee8 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3df94 ee9 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3df98 eea DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3df9c eeb             |   		
3df9c eeb 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3dfa0 eec 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3dfa4 eed             | 
3dfa4 eed 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3dfa8 eee 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3dfac eef 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3dfb0 ef0             |  
3dfb0 ef0 EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3dfb4 ef1 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3dfb8 ef2 10 00 90 CD |      if_c 	jmp     #p899		
3dfbc ef3             | 	
3dfbc ef3             | 	
3dfbc ef3 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3dfc0 ef4 28 CD 01 F1 | 		add	t4,sprite_w
3dfc4 ef5 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3dfc8 ef6             | 
3dfc8 ef6 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3dfcc ef7             | 
3dfcc ef7 28 59 02 F6 | p899		mov 	t6,sprite_w
3dfd0 ef8 01 58 86 F1 | 	 	sub     t6,#1
3dfd4 ef9 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3dfd8 efa             | 
3dfd8 efa 28 58 62 FD |                 setq   	t6
3dfdc efb E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3dfe0 efc 28 5D 02 F6 |                 mov t8,sprite_w
3dfe4 efd 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3dfe8 efe 24 00 90 AD |         if_z    jmp #p898
3dfec eff             |          
3dfec eff             |         
3dfec eff 70 5F 06 F6 |                 mov  t9,#368
3dff0 f00 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3dff4 f01             | 
3dff4 f01 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3dff8 f02 08 5C 06 FA |                 mul t8,#8				' bits to shr
3dffc f03 FF FF 7F FF 
3e000 f04 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3e004 f05 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3e008 f06 00 5E 8E F9 |                 altd t9,#0				' and mask 
3e00c f07 2D 01 00 F5 |                 and 0-0, t7
3e010 f08             |                
3e010 f08             | 
3e010 f08 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3e014 f09 E5 E0 7A FA |                 wmlong 368,t3				
3e018 f0a             |                 
3e018 f0a C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3e01c f0b 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3e020 f0c 2D 00 64 FD |                 ret
3e024 f0d             | 	
3e024 f0d             | 	
3e024 f0d             |                
3e024 f0d             |  
3e024 f0d             | '' -------------- Graphics line ------------------------------------------------------------
3e024 f0d             |  
3e024 f0d             | 
3e024 f0d             | '' consts and vars
3e024 f0d             | 
3e024 f0d 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3e028 f0e AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3e02c f0f 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3e030 f10 AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3e034 f11             | 
3e034 f11 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3e038 f12             | 
3e038 f12             | '------ these longs will be set by setmode function
3e038 f12             | 
3e038 f12 00 00 00 00 | m_bs            long    0        'blanks before sync
3e03c f13 00 00 00 00 | m_sn            long    0        'sync
3e040 f14 00 00 00 00 | m_bv            long    0        'blanks before visible
3e044 f15 00 00 00 00 | m_vi            long    0        'visible pixels #
3e048 f16             | 'm_border        long    0        'left/right borders
3e048 f16 00 00 00 00 | i_upporch       long    0        'up porch lines
3e04c f17 00 00 00 00 | i_vsync         long    0        'vsync lines
3e050 f18 00 00 00 00 | i_downporch     long    0        'down porch lines
3e054 f19 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3e058 f1a 00 00 00 00 | i_totalvis      long    0
3e05c f1b             | 
3e05c f1b             | '-------------------------------------
3e05c f1b             |  
3e05c f1b 00 00 00 00 | linenum         long    0
3e060 f1c 00 00 00 00 | frames          long    0
3e064 f1d 00 00 00 00 | dlinum long 0
3e068 f1e 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3e06c f1f             | 
3e06c f1f 00 00 00 00 | vblankptr       long    0
3e070 f20 00 00 00 00 | modeptr         long    0
3e074 f21 00 00 00 00 | paletteptr      long    0
3e078 f22 00 00 00 00 | dlptr           long    0
3e07c f23 01 00 00 00 | hbase           long    1
3e080 f24 00 00 00 00 | mailbox         long    0
3e084 f25 00 00 00 00 | spriteptr          long 0
3e088 f26             | 
3e088 f26 00 00 00 00 | cmd             long    0
3e08c f27 00 EC 07 00 | buf1            long    $80000-1024-4096
3e090 f28 00 04 00 00 | buf2            long    1024
3e094 f29 01 00 00 00 | dlptr2          long    1
3e098 f2a 01 00 00 00 | dl              long    1
3e09c f2b             | 
3e09c f2b 00 00 00 00 | buf1c long 0
3e0a0 f2c 00 EC 07 00 | buf1d            long    $80000-1024-4096
3e0a4 f2d 01 00 00 00 | framebuf2       long    1
3e0a8 f2e 01 00 00 00 | hsync0          long    1
3e0ac f2f 01 00 00 00 | hsync1          long    1
3e0b0 f30             | 
3e0b0 f30 01 00 00 00 | t1              long    1
3e0b4 f31 00 00 00 00 | t2 long 0
3e0b8 f32 00 00 00 00 | t3 long 0
3e0bc f33 00 00 00 00 | t4 long 0
3e0c0 f34             | 
3e0c0 f34 00 00 00 00 | rcnt            long    0  'dl repeat count
3e0c4 f35 00 00 00 00 | rcnt2           long    0
3e0c8 f36 00 00 00 00 | rcnt2a          long    0
3e0cc f37 00 00 00 00 | roffset         long    0
3e0d0 f38 00 00 00 00 | rdl             long    0  'dl repeat line
3e0d4 f39 00 00 00 00 | dlc             long    0  'dl command
3e0d8 f3a             | 
3e0d8 f3a FF FF FF FF | affffffff       long    $ffffffff
3e0dc f3b 00 00 00 00 | sprite1pointer long 0
3e0e0 f3c 00 00 00 00 | sprite1xy      long 0
3e0e4 f3d 00 00 00 00 | sprite1wh      long 0
3e0e8 f3e 00 00 00 00 | sprite2pointer long 0
3e0ec f3f 00 00 00 00 | sprite2xy      long 0
3e0f0 f40 00 00 00 00 | sprite2wh      long 0
3e0f4 f41 00 00 00 00 | sprite3pointer long 0
3e0f8 f42 00 00 00 00 | sprite3xy      long 0
3e0fc f43 00 00 00 00 | sprite3wh      long 0
3e100 f44 00 00 00 00 | sprite4pointer long 0
3e104 f45 00 00 00 00 | sprite4xy      long 0
3e108 f46 00 00 00 00 | sprite4wh      long 0
3e10c f47 00 00 00 00 | sprite5pointer long 0
3e110 f48 00 00 00 00 | sprite5xy      long 0
3e114 f49 00 00 00 00 | sprite5wh      long 0
3e118 f4a 00 00 00 00 | sprite6pointer long 0
3e11c f4b 00 00 00 00 | sprite6xy      long 0
3e120 f4c 00 00 00 00 | sprite6wh      long 0
3e124 f4d 00 00 00 00 | sprite7pointer long 0
3e128 f4e 00 00 00 00 | sprite7xy      long 0
3e12c f4f 00 00 00 00 | sprite7wh      long 0
3e130 f50 00 00 00 00 | sprite8pointer long 0
3e134 f51 00 00 00 00 | sprite8xy      long 0
3e138 f52 00 00 00 00 | sprite8wh      long 0
3e13c f53 00 00 00 00 | sprite9pointer long 0
3e140 f54 00 00 00 00 | sprite9xy      long 0
3e144 f55 00 00 00 00 | sprite9wh      long 0
3e148 f56 00 00 00 00 | sprite10pointer long 0
3e14c f57 00 00 00 00 | sprite10xy      long 0
3e150 f58 00 00 00 00 | sprite10wh      long 0
3e154 f59 00 00 00 00 | sprite11pointer long 0
3e158 f5a 00 00 00 00 | sprite11xy      long 0
3e15c f5b 00 00 00 00 | sprite11wh      long 0
3e160 f5c 00 00 00 00 | sprite12pointer long 0
3e164 f5d 00 00 00 00 | sprite12xy      long 0
3e168 f5e 00 00 00 00 | sprite12wh      long 0
3e16c f5f 00 00 00 00 | sprite13pointer long 0
3e170 f60 00 00 00 00 | sprite13xy      long 0
3e174 f61 00 00 00 00 | sprite13wh      long 0
3e178 f62 00 00 00 00 | sprite14pointer long 0
3e17c f63 00 00 00 00 | sprite14xy      long 0
3e180 f64 00 00 00 00 | sprite14wh      long 0
3e184 f65 00 00 00 00 | sprite15pointer long 0
3e188 f66 00 00 00 00 | sprite15xy      long 0
3e18c f67 00 00 00 00 | sprite15wh      long 0
3e190 f68 00 00 00 00 | sprite16pointer long 0
3e194 f69 00 00 00 00 | sprite16xy      long 0
3e198 f6a 00 00 00 00 | sprite16wh      long 0
3e19c f6b 00 00 00 00 | sprite17pointer long 0
3e1a0 f6c 00 00 00 00 | sprite17xy      long 0
3e1a4 f6d 00 00 00 00 | sprite17wh      long 0
3e1a8 f6e 00 00 00 00 | sprite18pointer long 0
3e1ac f6f 00 00 00 00 | sprite18xy      long 0
3e1b0 f70 00 00 00 00 | sprite18wh      long 0
3e1b4 f71 00 00 00 00 | spritenum long 0
3e1b8 f72             | 
3e1b8 f72 00 00 00 00 | spriteline long 0
3e1bc f73 84 03 00 00 | sprite_x long 900
3e1c0 f74 00 00 00 00 | sprite_y long 0
3e1c4 f75 10 00 00 00 | sprite_w long 16
3e1c8 f76 40 00 00 00 | sprite_h long 64
3e1cc f77 00 00 00 00 | l2 long 0
3e1d0 f78 00 00 00 00 | t5 long 0
3e1d4 f79 00 00 00 00 | t6 long 0
3e1d8 f7a 00 00 00 00 | t7 long 0
3e1dc f7b 00 00 00 00 | t8 long 0
3e1e0 f7c 00 00 00 00 | t9 long 0
3e1e4 f7d 00 00 00 00 | preloadaddr long 0
3e1e8 f7e 00 00 00 00 | preloadlineaddr long 0
3e1ec f7f 00 04 00 00 | a1024 long 1024
3e1f0 f80             | 
3e1f0 f80 E0 03 00 00 | aa long 992
3e1f4 f81 FF 03 00 00 | a1023 long 1023
3e1f8 f82 00 10 00 00 | a4096 long 4096
3e1fc f83             |  fit 368
3e1fc f83             | _psram_spin2_dat_
3e1fc f83 00 00 00 00 
      ...             
3e2f4 fc1 00 00 00 00 
3e2f8 fc2 00 00 00 00 |     listdata long 0[8*8]
3e2fc fc3             |             orgh
3e2fc                 | 
3e2fc                 | ' driver state
3e2fc     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3e300     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3e304                 | 
3e304                 | ' delay profile
3e304     07 00 00 00 
3e308     00 CF 7B 05 
3e30c     80 D1 F0 08 
3e310     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3e314     80 C4 60 0F 
3e318     80 39 7A 12 
3e31c     40 2D D9 13 
3e320     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3e324                 | 
3e324                 | ' data to be passed to driver when starting it
3e324                 | startupData
3e324     00 00 00 00 |     long    0           ' current frequency
3e328     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3e32c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3e330     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3e334     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3e338     44 E3 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3e33c     C4 E3 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3e340     E4 E3 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3e344                 | 
3e344                 | ' data for memory
3e344                 | deviceData
3e344                 |     ' 16 bank parameters follow (16MB per bank)
3e344     00 00 00 00 
      ...             
3e37c     00 00 00 00 
3e380     00 00 00 00 |     long    0[16]                               ' banks 0-15
3e384                 |     ' 16 banks of pin parameters follow
3e384     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3e388     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3e38c     FF FF FF FF 
      ...             
3e3bc     FF FF FF FF 
3e3c0     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3e3c4                 | 
3e3c4                 | ' data for COG polling
3e3c4                 | qosData 
3e3c4     00 00 FF FF 
3e3c8     00 00 FF FF 
3e3cc     00 00 FF FF 
3e3d0     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3e3d4     00 00 FF FF 
3e3d8     00 00 FF FF 
3e3dc     00 00 FF FF 
3e3e0     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3e3e4                 |     
3e3e4                 | ' mailbox storage
3e3e4                 | 
3e3e4                 | mailboxes
3e3e4     00 00 00 00 
      ...             
3e43c     00 00 00 00 
3e440     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3e444                 | 	alignl
3e444                 | _psram16drv_spin2_dat_
3e444                 |                             orgh
3e444     00 00 00 00 
      ...             
3e45c     00 00 00 00 
3e460     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3e464                 | 
3e464                 | driver_start
3e464                 |                             org
3e464 000             | '..................................................................................................
3e464 000             | ' Memory layout for COG RAM once operational:
3e464 000             | '
3e464 000             | '  COG RAM address      Usage
3e464 000             | '  ---------------      ----
3e464 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3e464 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3e464 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3e464 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3e464 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3e464 000             | '  ~$198-$1F3           State and register variables
3e464 000             | '
3e464 000             | ' Also during driver COG startup:
3e464 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3e464 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3e464 000             | '..................................................................................................
3e464 000             |                             
3e464 000             | ' Mailbox storage after vector initialization
3e464 000             | 
3e464 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3e468 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3e46c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3e470 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3e474 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3e478 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3e47c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3e480 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3e484 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3e488 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3e48c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3e490 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3e494 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3e498 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3e49c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3e4a0 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3e4a4 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3e4a8 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3e4ac 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3e4b0 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3e4b4 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3e4b8 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3e4bc 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3e4c0 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3e4c4 018             | 
3e4c4 018             | ' Mailbox parameter addresses per COG once patched
3e4c4 018             |                             
3e4c4 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3e4c8 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3e4cc 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3e4d0 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3e4d4 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3e4d8 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3e4dc 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3e4e0 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3e4e4 020             | 
3e4e4 020             | '..................................................................................................
3e4e4 020             | ' Per COG request and state setup and service branching
3e4e4 020             |         
3e4e4 020             | cog0                 
3e4e4 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3e4e8 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3e4ec 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3e4f0 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3e4f4 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3e4f8 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3e4fc 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3e500 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3e504 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3e508 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3e50c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3e510 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3e514 02c             | cog1                        
3e514 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3e518 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3e51c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3e520 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3e524 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3e528 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3e52c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3e530 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3e534 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3e538 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3e53c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3e540 037 33 CA 63 FD |                             execf   request-0               'jump to service
3e544 038             | cog2                         
3e544 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3e548 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3e54c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3e550 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3e554 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3e558 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3e55c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3e560 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3e564 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3e568 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3e56c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3e570 043 33 CA 63 FD |                             execf   request-0               'jump to service
3e574 044             | cog3                        
3e574 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3e578 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3e57c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3e580 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3e584 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3e588 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3e58c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3e590 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3e594 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3e598 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3e59c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3e5a0 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3e5a4 050             | cog4                        
3e5a4 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3e5a8 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3e5ac 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3e5b0 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3e5b4 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3e5b8 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3e5bc 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3e5c0 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3e5c4 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3e5c8 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3e5cc 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3e5d0 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3e5d4 05c             | cog5                        
3e5d4 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3e5d8 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3e5dc 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3e5e0 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3e5e4 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3e5e8 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3e5ec 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3e5f0 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3e5f4 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3e5f8 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3e5fc 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3e600 067 33 CA 63 FD |                             execf   request-0               'jump to service
3e604 068             | cog6                        
3e604 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3e608 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3e60c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3e610 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3e614 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3e618 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3e61c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3e620 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3e624 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3e628 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3e62c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3e630 073 33 CA 63 FD |                             execf   request-0               'jump to service
3e634 074             | cog7                        
3e634 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3e638 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3e63c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3e640 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3e644 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3e648 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3e64c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3e650 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3e654 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3e658 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3e65c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3e660 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3e664 080             |                             fit     128
3e664 080             | 
3e664 080             |                             fit     128
3e664 080             | pad                         long    0[128-$]                'align init code to $80
3e664 080             | 
3e664 080             | '..................................................................................................
3e664 080             | 
3e664 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3e664 080             | 
3e664 080             | init                        
3e664 080             |                             ' get driver scratch long address in hub
3e664 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3e668 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3e66c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3e670 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3e674 084             |                     
3e674 084             |                             ' read in the additional LUT RAM code
3e674 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3e678 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3e67c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3e680 087             | 
3e680 087             |                             ' read the startup parameters
3e680 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3e684 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3e688 089             | 
3e688 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3e688 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3e68c 08a             | 
3e68c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3e690 08b 01 00 00 5F 
3e694 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3e698 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3e69c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3e6a0 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3e6a4 090             | 
3e6a4 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3e6a4 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3e6a8 091 01 00 00 FF 
3e6ac 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3e6b0 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3e6b4 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3e6b8 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3e6bc 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3e6c0 097 08 DE 47 F5 |                             or      a, #8
3e6c4 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3e6c8 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3e6cc 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3e6d0 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3e6d4 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3e6d8 09d 01 DE 07 F1 |                             add     a, #1
3e6dc 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3e6e0 09f             |  
3e6e0 09f             |                             ' setup device control pin states
3e6e0 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3e6e4 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3e6e8 0a1 01 00 00 FF 
3e6ec 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3e6f0 0a3             | 
3e6f0 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3e6f4 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3e6f8 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3e6fc 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3e700 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3e704 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3e708 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3e70c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3e710 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3e714 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3e718 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3e71c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3e720 0af             | pinloop
3e720 0af             |                             ' generate minimum CE high time before access
3e720 0af A1 07 00 FF 
3e724 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3e728 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3e72c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3e730 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3e734 0b4 1F DE 63 FD |                             waitx   a                       'delay
3e738 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3e73c 0b6             | 
3e73c 0b6             |                             ' setup the COG mailboxes and addresses 
3e73c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3e740 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3e744 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3e748 0b9             | 
3e748 0b9 28 2E 64 FD |                             setq    #24-1
3e74c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3e750 0bb             | 
3e750 0bb             |                             ' setup the polling loop for active COGs 
3e750 0bb 01 C2 63 FD |                             cogid   id
3e754 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3e758 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3e75c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3e760 0bf 0A F0 07 F6 |                             mov     ptra, #10
3e764 0c0 E1 F1 03 FA |                             mul     ptra, id
3e768 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3e76c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3e770 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3e774 0c4 03 C2 07 FA |                             mul     id, #3
3e778 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3e77c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3e780 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3e784 0c8 D8 01 B0 FD |                             call    #reloadcogs
3e788 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3e78c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3e790 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3e790 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3e794 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3e798 0cd 08 04 DC FC |                             rep     #2, #8
3e79c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3e7a0 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3e7a4 0d0             | 
3e7a4 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3e7a4 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3e7a4 0d0 01 C2 63 FD |                             cogid   id
3e7a8 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3e7ac 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3e7b0 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3e7b4 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3e7b8 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3e7bc 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3e7c0 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3e7c4 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3e7c8 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3e7cc 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3e7d0 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3e7d4 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3e7d8 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3e7dc 0de A5 E5 03 F1 |                             add     d, const512
3e7e0 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3e7e4 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3e7e8 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3e7ec 0e2             |                             
3e7ec 0e2             |                             ' setup register values for control vector loop setup after we return
3e7ec 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3e7f0 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3e7f4 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3e7f8 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3e7fc 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3e800 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3e804 0e8 D0 C3 8F F9 |                             altd    id, #id0
3e808 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3e80c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3e810 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3e814 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3e818 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3e81c 0ee             |  
3e81c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3e820 0ef 07 CA 07 F5 |                             and     request, #7
3e824 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3e828 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3e82c 0f2             |                             fit     $100                    'ensure all init code fits this space
3e82c 0f2             | 
3e82c 0f2             |                             fit     $100                    'ensure all init code fits this space
3e82c 0f2             | 
3e82c 0f2 00 00 00 00 
      ...             
3e85c 0fe 00 00 00 00 
3e860 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3e864 100             | 
3e864 100             | '..................................................................................................
3e864 100             | ' Error result handling and COG notification of request completion
3e864 100             | 
3e864 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3e868 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3e86c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3e870 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3e874 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3e878 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3e87c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3e880 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3e884 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3e888 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3e88c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3e890 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3e894 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3e898 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3e89c 10e             | ' Poller re-starts here after a COG is serviced
3e89c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3e8a0 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3e8a4 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3e8a8 111             | ' Main dynamic polling loop repeats until a request arrives
3e8a8 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3e8ac 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3e8b0 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3e8b4 114             | 
3e8b4 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3e8b8 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3e8bc 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3e8c0 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3e8c4 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3e8c8 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3e8cc 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3e8d0 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3e8d4 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3e8d8 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3e8dc 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3e8e0 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3e8e4 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3e8e8 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3e8ec 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3e8f0 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3e8f4 124             | 
3e8f4 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3e8f8 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3e8fc 126             |  
3e8fc 126             | '..................................................................................................
3e8fc 126             | ' List handler                               
3e8fc 126             | 
3e8fc 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3e900 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3e904 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3e908 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3e90c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3e910 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3e914 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3e918 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3e91c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3e920 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3e924 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3e928 131 33 00 60 FD |                             execf   0-0                     'process the request 
3e92c 132             | 
3e92c 132             | '..................................................................................................
3e92c 132             | ' Restoring per COG state and resuming where we left off
3e92c 132             | 
3e92c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3e930 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3e934 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3e938 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3e93c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3e940 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3e944 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3e948 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3e94c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3e950 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3e954 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3e958 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3e95c 13e             |                    
3e95c 13e             | '..................................................................................................
3e95c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3e95c 13e             | 
3e95c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3e960 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3e964 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3e968 141 D0 DF B7 F9 |                             setd    a, #id0
3e96c 142 D8 DF BF F9 |                             sets    a, #addr1
3e970 143 FE FF FF FF 
3e974 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3e978 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3e97c 146 3F DE A7 F9 |                             alti    a, #%111_111 
3e980 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3e984 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3e988 149 01 E2 63 FD |                             cogid   c
3e98c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3e990 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3e994 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3e998 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3e99c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3e9a0 14f 00 E0 03 F6 |                             mov     b, 0-0
3e9a4 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3e9a8 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3e9ac 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3e9b0 153 0C 00 90 AD |             if_z            jmp     #excluded               
3e9b4 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3e9b8 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3e9bc 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3e9c0 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3e9c4 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3e9c8 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3e9cc 15a             | 
3e9cc 15a             | 'determine priority cogs and build instructions for the polling sequence
3e9cc 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3e9d0 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3e9d4 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3e9d8 15d             | 
3e9d8 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3e9dc 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3e9e0 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3e9e4 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3e9e8 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3e9ec 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3e9f0 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3e9f4 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3e9f8 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3e9fc 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3ea00 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3ea04 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3ea08 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3ea0c 16a             | endprioloop
3ea0c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3ea10 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3ea14 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3ea18 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3ea1c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3ea20 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3ea24 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3ea28 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3ea2c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3ea30 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3ea34 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3ea38 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3ea3c 176             | 
3ea3c 176             | ' populate the round robin COG polling instructions
3ea3c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3ea40 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3ea44 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3ea48 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3ea4c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3ea50 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3ea54 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3ea58 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3ea5c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3ea60 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3ea64 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3ea68 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3ea6c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3ea70 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3ea74 184             | '..................................................................................................
3ea74 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3ea74 184             | 
3ea74 184             | set_latency                                                 '            (a) set latency
3ea74 184             | get_latency                                                 '            (b) get latency
3ea74 184             | set_burst                                                   '            (c) set burst size of bank
3ea74 184             | get_burst                                                   '            (d) get burst size of bank
3ea74 184             |                                                             '            (e) dump state
3ea74 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3ea78 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3ea7c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3ea80 187             |                                                             ' | | | | e  account for following AUGS
3ea80 187 04 00 00 FF 
3ea84 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3ea88 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3ea8c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3ea90 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3ea94 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3ea98 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3ea9c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3eaa0 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3eaa4 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3eaa8 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3eaac 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3eab0 193             | 
3eab0 193             | '..................................................................................................
3eab0 193             | ' Misc EXECF code
3eab0 193             | 
3eab0 193 33 72 63 FD | start_read_exec             execf   newburstr
3eab4 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3eab8 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3eabc 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3eac0 197             | 
3eac0 197             | '..................................................................................................
3eac0 197             | ' Variables
3eac0 197             | 
3eac0 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3eac4 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3eac8 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3eacc 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3ead0 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3ead4 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3ead8 19d             | 
3ead8 19d 00 00 00 80 | xfreq1          long    $80000000
3eadc 19e 00 00 00 40 | xfreq2          long    $40000000
3eae0 19f 03 00 00 00 | delay           long    3
3eae4 1a0             | 
3eae4 1a0             | lutcodeaddr                 
3eae4 1a0             | startupparams
3eae4 1a0             | excludedcogs                                    'careful: shared register use!
3eae4 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3eae8 1a1 00 00 00 00 | flags           long    0
3eaec 1a2             | mask                                            'careful: shared register use!
3eaec 1a2 00 00 00 00 | resetmaskA      long    0
3eaf0 1a3             | limit                                           'careful: shared register use!
3eaf0 1a3 00 00 00 00 | resetmaskB      long    0
3eaf4 1a4 00 00 00 00 | datapins        long    0
3eaf8 1a5             | const512                                        'careful: shared register use!
3eaf8 1a5 00 00 00 00 | devicelist      long    0
3eafc 1a6 00 00 00 00 | coglist         long    0
3eb00 1a7 00 00 00 00 | mbox            long    0 
3eb04 1a8             | 
3eb04 1a8             | clkpin                                          'shared with code patched during init
3eb04 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3eb08 1a9             | cspin                                           'shared with code patched during init
3eb08 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3eb0c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3eb10 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3eb14 1ac 01 00 00 00 | clkdelay        long    1
3eb18 1ad 00 00 00 00 | regdatabus      long    0
3eb1c 1ae             | 
3eb1c 1ae 10 00 00 00 | deviceaddr      long    $10
3eb20 1af             | rrcounter
3eb20 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3eb24 1b0             | 
3eb24 1b0             | ' jump addresses for the per COG handlers
3eb24 1b0 20 00 00 00 | cog0_handler    long    cog0
3eb28 1b1 2C 00 00 00 | cog1_handler    long    cog1
3eb2c 1b2 38 00 00 00 | cog2_handler    long    cog2
3eb30 1b3 44 00 00 00 | cog3_handler    long    cog3
3eb34 1b4 50 00 00 00 | cog4_handler    long    cog4
3eb38 1b5 5C 00 00 00 | cog5_handler    long    cog5
3eb3c 1b6 68 00 00 00 | cog6_handler    long    cog6
3eb40 1b7 74 00 00 00 | cog7_handler    long    cog7
3eb44 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3eb48 1b9             | 
3eb48 1b9             | ' EXECF sequences
3eb48 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3eb4c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3eb50 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3eb54 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3eb58 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3eb5c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3eb60 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3eb64 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3eb64 1c0             | 
3eb64 1c0             | 
3eb64 1c0             | ' SKIPF sequences
3eb64 1c0             | skiptable
3eb64 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3eb68 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3eb6c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3eb70 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3eb74 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3eb78 1c5 00 00 00 00 | pattern2        long    0
3eb7c 1c6 00 00 00 00 | pattern3        long    0
3eb80 1c7 77 02 00 00 | singlelong      long    %1001110111  
3eb84 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3eb88 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3eb8c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3eb90 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3eb94 1cc             | 
3eb94 1cc             | ' LUT RAM address values
3eb94 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3eb98 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3eb9c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3eba0 1cf F6 02 00 00 | noread          long    noread_lut
3eba4 1d0             | 
3eba4 1d0 00 00 00 00 | id0             long    0
3eba8 1d1 01 00 00 00 | id1             long    1
3ebac 1d2 02 00 00 00 | id2             long    2
3ebb0 1d3 03 00 00 00 | id3             long    3
3ebb4 1d4 04 00 00 00 | id4             long    4
3ebb8 1d5 05 00 00 00 | id5             long    5
3ebbc 1d6 06 00 00 00 | id6             long    6
3ebc0 1d7 07 00 00 00 | id7             long    7
3ebc4 1d8             | 
3ebc4 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3ebc4 1d8             | 'and COG updates and need to follow immediately after id0-id7
3ebc4 1d8 00 00 00 00 | addr1           long    0
3ebc8 1d9 00 00 00 00 | hubdata         long    0
3ebcc 1da 00 00 00 00 | count           long    0
3ebd0 1db 00 00 00 00 | addr2           long    0
3ebd4 1dc 00 00 00 00 | total           long    0
3ebd8 1dd 00 00 00 00 | offset1         long    0
3ebdc 1de 00 00 00 00 | offset2         long    0
3ebe0 1df 00 00 00 00 | link            long    0
3ebe4 1e0             | 
3ebe4 1e0             | burstwrite                                      'note shared register use during init
3ebe4 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3ebe8 1e1 00 00 00 00 | id              long    0
3ebec 1e2             | 
3ebec 1e2 00 00 00 00 | header          long    0
3ebf0 1e3 00 00 00 00 | trailer         long    0
3ebf4 1e4 00 00 00 00 | cmdaddr         long    0
3ebf8 1e5 00 00 00 00 | request         long    0
3ebfc 1e6 00 00 00 00 | rrlimit         long    0
3ec00 1e7 00 00 00 00 | pinconfig       long    0
3ec04 1e8 00 00 00 00 | clks            long    0
3ec08 1e9 00 00 00 00 | resume          long    0
3ec0c 1ea 00 00 00 00 | orighubsize     long    0
3ec10 1eb 00 00 00 00 | wrclks          long    0
3ec14 1ec             | 
3ec14 1ec 00 00 00 00 | pattern         long    0
3ec18 1ed 00 00 00 00 | hubscratch      long    0
3ec1c 1ee 00 10 00 00 | val4k           long    4096
3ec20 1ef             | 
3ec20 1ef             | ' temporary general purpose regs
3ec20 1ef 00 00 00 00 | a               long    0
3ec24 1f0 00 00 00 00 | b               long    0
3ec28 1f1 00 00 00 00 | c               long    0
3ec2c 1f2 00 00 00 00 | d               long    0
3ec30 1f3             |                 fit     502
3ec30 1f3             | 
3ec30 1f3             |                 fit     502
3ec30 1f3             | 
3ec30 1f3             | '..................................................................................................
3ec30 1f3             | 
3ec30 1f3             |             orgh
3ec30                 | 
3ec30                 | lut_code
3ec30                 | 'HW init code up to 80 longs
3ec30                 | 
3ec30                 | '..................................................................................................
3ec30                 | ' Memory layout for LUT RAM once operational:
3ec30                 | '
3ec30                 | '  LUT RAM address      Usage
3ec30                 | '  ---------------      ----
3ec30                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3ec30                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3ec30                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3ec30                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3ec30                 | '
3ec30                 | ' Also during driver COG startup:
3ec30                 | ' $230-$24F is used for HW init setup
3ec30                 | ' $250-$26F is used as temporary vector storage 
3ec30                 | '..................................................................................................
3ec30                 | 
3ec30                 |                 org $230    
3ec30 230             | 
3ec30 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3ec30 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3ec34 231 24 16 60 FD |                             pollxfi
3ec38 232 FF AA 2A FF 
3ec3c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3ec40 234 28 00 B0 FD |                             call    #sendqspi
3ec44 235 07 F8 07 FF 
3ec48 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3ec4c 237 28 00 B0 FD |                             call    #sendspi
3ec50 238 F8 07 78 FF 
3ec54 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3ec58 23a 1C 00 B0 FD |                             call    #sendspi
3ec5c 23b 7F 78 78 FF 
3ec60 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3ec64 23d 10 00 B0 FD |                             call    #sendspi 
3ec68 23e 2D 00 64 FD |                             ret
3ec6c 23f             | 
3ec6c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3ec70 240 32 0C 64 FD |                             skipf   #%110
3ec74 241 9C EF 03 F6 |                             mov     pb, xsendimm
3ec78 242             | 
3ec78 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3ec7c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3ec80 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3ec84 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3ec88 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3ec8c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3ec90 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3ec94 249 50 48 63 FD |                             fltl    datapins                'float data bus
3ec98 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3ec9c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3eca0 24c             | 
3eca0 24c 00 00 00 00 
3eca4 24d 00 00 00 00 
3eca8 24e 00 00 00 00 
3ecac 24f 00 00 00 00 |                 long    0[$270-32-$]
3ecb0 250             |                 fit     $270-32  ' keep room for 32 vector longs
3ecb0 250             |     
3ecb0 250             |                 fit     $270-32  ' keep room for 32 vector longs
3ecb0 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3ecb0 250             | rw_vect ' PSRAM jump vectors
3ecb0 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3ecb4 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3ecb8 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3ecbc 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3ecc0 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3ecc4 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3ecc8 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3eccc 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3ecd0 258             | ro_vect ' R/O PSRAM jump vectors
3ecd0 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3ecd4 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3ecd8 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3ecdc 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3ece0 25c 00 01 00 00 |                 long    unsupported
3ece4 25d 00 01 00 00 |                 long    unsupported
3ece8 25e 00 01 00 00 |                 long    unsupported
3ecec 25f 00 01 00 00 |                 long    unsupported
3ecf0 260             | ctrl_vect ' Control jump vectors
3ecf0 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3ecf4 261 00 01 00 00 |                 long    unsupported
3ecf8 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3ecfc 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3ed00 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3ed04 265 00 01 00 00 |                 long    unsupported
3ed08 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3ed0c 267 3E 01 00 00 |                 long    reconfig 
3ed10 268             | no_vect ' Invalid bank jump vectors
3ed10 268 01 01 00 00 |                 long    invalidbank
3ed14 269 01 01 00 00 |                 long    invalidbank
3ed18 26a 01 01 00 00 |                 long    invalidbank
3ed1c 26b 01 01 00 00 |                 long    invalidbank
3ed20 26c 01 01 00 00 |                 long    invalidbank
3ed24 26d 01 01 00 00 |                 long    invalidbank
3ed28 26e 01 01 00 00 |                 long    invalidbank
3ed2c 26f 01 01 00 00 |                 long    invalidbank
3ed30 270             |                 fit     $270
3ed30 270             | 
3ed30 270             |                 fit     $270
3ed30 270             | '..................................................................................................
3ed30 270             | ' PSRAM READS
3ed30 270             |                                                             ' a b c d e f
3ed30 270             |                                                             ' B W L B R L  (a) byte read
3ed30 270             |                                                             ' Y O O U E O  (b) word read
3ed30 270             |                                                             ' T R N R S C  (c) long read
3ed30 270             |                                                             ' E D G S U K  (d) new burst read
3ed30 270             |                                                             '       T M E  (e) resumed sub-burst
3ed30 270             |                                                             '         E D  (f) locked sub-burst
3ed30 270             | 
3ed30 270             | 
3ed30 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3ed34 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3ed38 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3ed3c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3ed40 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3ed44 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3ed48 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3ed4c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3ed50 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3ed54 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3ed58 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3ed5c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3ed60 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3ed64 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3ed68 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3ed6c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3ed70 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3ed74 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3ed78 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3ed7c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3ed80 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3ed84 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3ed88 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3ed8c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3ed90 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3ed94 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3ed98 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3ed9c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3eda0 28c             | 
3eda0 28c             |                             ' fall through to read bursts
3eda0 28c             |                         
3eda0 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3eda0 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3eda4 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3eda8 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3edac 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3edb0 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3edb4 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3edb8 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3edbc 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3edc0 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3edc4 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3edc8 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3edcc 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3edd0 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3edd4 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3edd8 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3eddc 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3ede0 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3ede4 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3ede8 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3edec 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3edf0 2a0 E8 D1 03 F1 |                             add     clks, clks
3edf4 2a1             | readcommon
3edf4 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3edf8 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3edfc 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3ee00 2a4             | 
3ee00 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3ee04 2a5 69 C8 63 FD |                             rev     cmdaddr
3ee08 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3ee0c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3ee10 2a8             | 
3ee10 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3ee14 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3ee18 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3ee18 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3ee1c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3ee20 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3ee24 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3ee28 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3ee28 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3ee2c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3ee30 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3ee34 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3ee38 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3ee3c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3ee40 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3ee40 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3ee44 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3ee48 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3ee4c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3ee50 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3ee54 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3ee58 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3ee5c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3ee60 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3ee64 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3ee68 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3ee6c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3ee70 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3ee74 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3ee78 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3ee78 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3ee7c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3ee80 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3ee84 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3ee88 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3ee8c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3ee90 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3ee94 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3ee98 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3ee9c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3eea0 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3eea4 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3eea8 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3eeac 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3eeb0 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3eeb4 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3eeb8 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3eebc 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3eec0 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3eec4 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3eec8 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3eecc 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3eed0 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3eed4 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3eed8 2da 10 03 90 FD |                             jmp     #writecommon
3eedc 2db             | 
3eedc 2db             | '..................................................................................................
3eedc 2db             | ' Burst continuation testing
3eedc 2db             | 
3eedc 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3eee0 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3eee4 2dd             | continue_read_lut          
3eee4 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3eee8 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3eeec 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3eef0 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3eef4 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3eef8 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3eefc 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3ef00 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3ef04 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3ef08 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3ef0c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3ef10 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3ef14 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3ef18 2ea             | 
3ef18 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3ef1c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3ef20 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3ef24 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3ef28 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3ef2c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3ef30 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3ef34 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3ef38 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3ef3c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3ef40 2f4 2A 1C 66 0D |             _ret_           push    #poller
3ef44 2f5             | 
3ef44 2f5             | 
3ef44 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3ef48 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3ef48 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3ef4c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3ef50 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3ef54 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3ef58 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3ef5c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3ef60 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3ef64 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3ef68 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3ef6c 2ff             | '..................................................................................................
3ef6c 2ff             | ' Completion of requests
3ef6c 2ff             | 
3ef6c 2ff             | complete_rw_lut             
3ef6c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3ef70 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3ef74 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3ef78 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3ef7c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3ef80 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3ef84 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3ef88 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3ef8c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3ef90 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3ef94 309 32 62 64 AD |             if_z            skipf   #%110001
3ef98 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3ef9c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3efa0 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3efa4 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3efa8 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3efac 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3efb0 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3efb4 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3efb8 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3efbc 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3efc0 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3efc4 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3efc8 316             |                                                             ' skipcase (a) gfx copy to/from hub
3efc8 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3efc8 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3efc8 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3efcc 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3efd0 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3efd4 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3efd8 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3efdc 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3efe0 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3efe4 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3efe8 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3efec 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3eff0 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3eff4 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3eff8 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3effc 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3f000 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3f004 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3f008 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3f00c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3f010 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3f014 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3f018 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3f01c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3f020 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3f024 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3f028 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3f02c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3f030 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3f034 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3f038 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3f03c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3f040 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3f044 335 DF B7 03 A6 |             if_z            mov     addr2, link
3f048 336 34 FF 9F AD |             if_z            jmp     #checknext
3f04c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3f050 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3f054 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3f058 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3f05c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3f060 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3f064 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3f068 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3f06c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3f070 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3f074 341             | 
3f074 341             | '..................................................................................................
3f074 341             | ' PSRAM WRITES
3f074 341             |                                                             '  a b c d e f g h
3f074 341             | 
3f074 341             |                                                             '  B W L F B R L L (a) byte write(s)
3f074 341             |                                                             '  Y O O I U E O O (b) word write(s)
3f074 341             |                                                             '  T R N L R S C C (c) long write(s)
3f074 341             |                                                             '  E D G L S U K K (d) resumed fill
3f074 341             |                                                             '          T M E E (e) new burst write
3f074 341             |                                                             '            E D D (f) resumed burst
3f074 341             |                                                             '              F B (g) locked fill
3f074 341             |                                                             '              I U (h) locked burst write
3f074 341             |                                                             '              L R 
3f074 341             |                                                             '              L S 
3f074 341             |                                                             '                T 
3f074 341             | 
3f074 341             | w_single                   
3f074 341             | w_fill_cont           
3f074 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3f078 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3f07c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3f080 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3f084 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3f088 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3f08c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3f090 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3f094 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3f098 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3f09c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3f0a0 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3f0a4 34d             |                ' disable call to r_resume_burst for single longs when z=0
3f0a4 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3f0a8 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3f0ac 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3f0b0 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3f0b4 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3f0b8 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3f0bc 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3f0c0 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3f0c4 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3f0c8 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3f0cc 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3f0d0 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3f0d4 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3f0d8 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3f0dc 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3f0e0 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3f0e4 35d             |         
3f0e4 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3f0e4 35d             |             '
3f0e4 35d             |             '  At least one of these 3 optional components will be sent
3f0e4 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3f0e4 35d             |             '     body - N x full longs of data
3f0e4 35d             |             '     trailer - last partial long of data
3f0e4 35d             |             '
3f0e4 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3f0e4 35d             |             '
3f0e4 35d             |             'Case    Type                           Sends
3f0e4 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3f0e4 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3f0e4 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3f0e4 35d             |             ' 4)     Multiple long fill             body only
3f0e4 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3f0e4 35d             | 
3f0e4 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3f0e4 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3f0e8 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3f0ec 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3f0f0 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3f0f4 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3f0f8 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3f0fc 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3f100 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3f104 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3f108 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3f10c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3f110 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3f114 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3f118 36a             |                             
3f118 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3f11c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3f120 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3f124 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3f128 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3f12c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3f130 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3f134 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3f138 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3f13c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3f140 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3f144 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3f148 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3f14c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3f150 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3f154 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3f158 37a             | 
3f158 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3f15c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3f160 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3f164 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3f168 37e             |                  
3f168 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3f16c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3f170 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3f174 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3f178 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3f17c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3f180 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3f184 385             | 
3f184 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3f188 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3f18c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3f190 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3f194 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3f198 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3f19c 38b             | 
3f19c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3f19c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3f1a0 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3f1a4 38d 2A B0 63 FD |                             push    addr1                   'save address
3f1a8 38e             | 
3f1a8 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3f1a8 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3f1ac 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3f1b0 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3f1b4 391             |             
3f1b4 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3f1b8 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3f1bc 393 2B B0 63 FD |                             pop     addr1                   'restore address
3f1c0 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3f1c4 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3f1c8 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3f1cc 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3f1d0 398             | 
3f1d0 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3f1d4 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3f1d8 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3f1dc 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3f1e0 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3f1e4 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3f1e8 39e             | 
3f1e8 39e             |                             'trailer is done
3f1e8 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3f1ec 39f             | 
3f1ec 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3f1f0 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3f1f4 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3f1f8 3a2             | 
3f1f8 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3f1fc 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3f200 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3f204 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3f208 3a6             |                             
3f208 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3f20c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3f210 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3f214 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3f218 3aa             |                                                          
3f218 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3f21c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3f220 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3f224 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3f228 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3f22c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3f230 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3f234 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3f238 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3f23c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3f240 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3f244 3b5             |  
3f244 3b5 59 52 63 FD |                             drvh    cspin
3f248 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3f24c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3f250 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3f254 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3f258 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3f25c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3f260 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3f264 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3f268 3be EA E5 03 F6 |                             mov     d, orighubsize
3f26c 3bf EF E5 63 F0 |                             shl     d, a
3f270 3c0 F2 E3 83 F1 |                             sub     c, d
3f274 3c1 DD E3 03 F1 |                             add     c, offset1
3f278 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3f27c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3f280 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3f284 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3f288 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3f28c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3f290 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3f294 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3f298 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3f29c 3cb BB D3 03 F6 |                             mov     resume, restorefill
3f2a0 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3f2a4 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3f2a8 3ce 6C FC BF CD |             if_c            call    #yield
3f2ac 3cf 2D 00 64 FD |                             ret
3f2b0 3d0             |                            
3f2b0 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3f2b0 3d0             |                       '     rczl    pa                      'rotate left into address offset
3f2b0 3d0             |                       '     rczl    c wcz                   'restore count and flags
3f2b0 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3f2b4 3d1 02 EC 67 F0 |                             shl     pa, #2
3f2b8 3d2 28 06 64 AD |             if_z            setq    #3
3f2bc 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3f2c0 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3f2c4 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3f2c8 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3f2cc 3d7             | 
3f2cc 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3f2d0 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3f2d4 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3f2d8 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3f2dc 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3f2e0 3dc             |                 fit 1024-32
3f2e0 3dc             |         
3f2e0 3dc             | 
3f2e0 3dc             | '..................................................................................................
3f2e0 3dc             | 
3f2e0 3dc             |                 fit 1024-32
3f2e0 3dc 00 00 00 00 
3f2e4 3dd 00 00 00 00 
3f2e8 3de 00 00 00 00 
3f2ec 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3f2f0 3e0             |                 org 1024-32
3f2f0 000             | 
3f2f0 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3f2f0 000 00 00 00 00 |                 long $0000
3f2f4 001 11 11 00 00 |                 long $1111
3f2f8 002 22 22 00 00 |                 long $2222
3f2fc 003 33 33 00 00 |                 long $3333
3f300 004 44 44 00 00 |                 long $4444
3f304 005 55 55 00 00 |                 long $5555
3f308 006 66 66 00 00 |                 long $6666
3f30c 007 77 77 00 00 |                 long $7777
3f310 008 88 88 00 00 |                 long $8888
3f314 009 99 99 00 00 |                 long $9999
3f318 00a AA AA 00 00 |                 long $aaaa
3f31c 00b BB BB 00 00 |                 long $bbbb
3f320 00c CC CC 00 00 |                 long $cccc
3f324 00d DD DD 00 00 |                 long $dddd
3f328 00e EE EE 00 00 |                 long $eeee
3f32c 00f FF FF 00 00 |                 long $ffff
3f330 010             | 
3f330 010             | 'masks
3f330 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3f334 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3f338 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3f33c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3f340 014             | 
3f340 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3f344 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3f348 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3f34c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3f350 018             | 
3f350 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3f354 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3f358 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3f35c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3f360 01c             | 
3f360 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3f364 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3f368 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3f36c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3f370 020             |         fit 1024
3f370 020             | 
3f370 020             |         fit 1024
3f370 020             | 
3f370 020             | '--------------------------------------------------------------------------------------------------
3f370 020             |         orgh
3f370                 | 
3f370                 | gfxexpansion
3f370                 |                             'simple line drawing graphics expansion of memory driver
3f370                 |                             'jmp     #donerepeats                'just return for now
3f370                 | 
3f370     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3f374     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3f378     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3f37c     DD E1 03 F6 |                             mov     b, offset1              'get error term
3f380     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3f384     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3f388     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3f38c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3f390     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3f394     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3f398     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3f39c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3f3a0     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3f3a4     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3f3a8     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3f3ac     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3f3b0     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3f3b4     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3f3b8     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3f3bc     DC E5 33 F9 |                             getword d, total, #0            'get line width
3f3c0     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3f3c4     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3f3c8     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3f3cc     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3f3d0     C3 03 80 FD |                             jmp     #readmask               'continue filling
3f3d4                 | 	alignl
3f3d4                 | _usbnew_spin2_dat_
3f3d4                 |                 org     $000
3f3d4 000             | 
3f3d4 000             | usb_host_start
3f3d4 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3f3d8 001             | 
3f3d8 001 03 00 00 FF 
3f3dc 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3f3e0 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3f3e4 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3f3e8 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3f3ec 006 29 72 63 FD |                 setq2   htmp
3f3f0 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3f3f4 008             | 
3f3f4 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3f3f8 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3f3fc 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3f400 00b             | 
3f400 00b             | '------------------------------------------------------------------------------
3f400 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3f400 00b             | ' special because the receiving function must not respond with either STALL or
3f400 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3f400 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3f400 00b             | ' corrupt packet, it must ignore the transaction
3f400 00b             | '------------------------------------------------------------------------------
3f400 00b             | ' On entry:
3f400 00b             | '   PTRA - start address of the SETUP data struct.
3f400 00b             | ' On exit:
3f400 00b             | '   retval - PID_ACK on success, otherwise error code.
3f400 00b             | '------------------------------------------------------------------------------
3f400 00b             | txn_setup
3f400 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3f404 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3f408 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3f40c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3f410 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3f414 010             | .setup
3f414 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3f418 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f41c 012 2D 00 64 AD |         if_z    ret
3f420 013 7C 0B B0 FD |                 call    #retry_wait
3f424 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3f428 015 2D 00 64 AD |         if_z    ret
3f42c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3f430 017 E0 FF 9F FD |                 jmp     #.setup
3f434 018             | 
3f434 018             | '------------------------------------------------------------------------------
3f434 018             | ' IN/INTERRUPT transaction.
3f434 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3f434 018             | '------------------------------------------------------------------------------
3f434 018             | ' On entry:
3f434 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3f434 018             | '     CRC(b19..23).
3f434 018             | ' On exit:
3f434 018             | '------------------------------------------------------------------------------
3f434 018             | txn_in
3f434 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3f438 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3f43c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3f440 01b             | 
3f440 01b             |                 ' Fall through to urx_packet
3f440 01b             | 
3f440 01b             | '------------------------------------------------------------------------------
3f440 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3f440 01b             | ' received are handshakes and IN DATAx.
3f440 01b             | '------------------------------------------------------------------------------
3f440 01b             | ' On entry:
3f440 01b             | ' On exit:
3f440 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3f440 01b             | '     returned.
3f440 01b             | '------------------------------------------------------------------------------
3f440 01b             | urx_packet
3f440 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3f444 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3f448 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3f44c 01e 1A 94 63 FD |                 getct   hct2
3f450 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3f454 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3f458 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3f45c 022             | .wait_sop
3f45c 022 22 A7 8A FA |                 rdpin   urx, dm
3f460 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3f464 024 08 00 90 CD |         if_c    jmp     #.get_pid
3f468 025 FC 25 CC FB |                 jnct2   #.wait_sop
3f46c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3f470 027             | .get_pid
3f470 027 28 02 B0 FD |                 call    #urx_next
3f474 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3f478 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3f47c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3f480 02b             | .chk_pid
3f480 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f484 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3f488 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3f48c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3f490 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3f494 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3f498 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3f49c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3f4a0 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3f4a4 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3f4a8 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3f4ac 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3f4b0 037             | .ack_resend
3f4b0 037 22 A7 82 FA |                 rqpin   urx, dm
3f4b4 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3f4b8 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3f4bc 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3f4c0 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3f4c4 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3f4c8 03d             | .chk_eop
3f4c8 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3f4cc 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3f4d0 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3f4d4 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3f4d8 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3f4dc 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3f4e0 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3f4e4 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3f4e8 045 2D 00 64 FD |                 ret
3f4ec 046             | .idle
3f4ec 046 22 A7 82 FA |                 rqpin   urx, dm
3f4f0 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3f4f4 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3f4f8 049 2D 00 64 FD |                 ret
3f4fc 04a             | 
3f4fc 04a             | '------------------------------------------------------------------------------
3f4fc 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3f4fc 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3f4fc 04a             | ' if one is required.
3f4fc 04a             | '------------------------------------------------------------------------------
3f4fc 04a             | ' On entry:
3f4fc 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3f4fc 04a             | ' On exit:
3f4fc 04a             | '------------------------------------------------------------------------------
3f4fc 04a             | utx_token
3f4fc 04a 22 A7 82 FA |                 rqpin   urx, dm
3f500 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3f504 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3f508 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3f50c 04e 34 0D B0 CD |         if_c    call    #utx_pre
3f510 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3f514 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3f518 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3f51c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3f520 053             | .next_byte
3f520 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3f524 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3f528 055             | .wait
3f528 055 40 46 72 FD |                 testp   dp                      wc
3f52c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3f530 057 23 03 08 FC |                 akpin   dp
3f534 058 22 A5 22 FC |                 wypin   utx, dm
3f538 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3f53c 05a             | 
3f53c 05a             | '------------------------------------------------------------------------------
3f53c 05a             | ' SETUP/OUT/INTERRUPT transaction.
3f53c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3f53c 05a             | '------------------------------------------------------------------------------
3f53c 05a             | ' On entry:
3f53c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3f53c 05a             | '     CRC(b19..23).
3f53c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3f53c 05a             | '   pkt_data - count of DATAx payload bytes to send.
3f53c 05a             | ' On exit:
3f53c 05a             | '------------------------------------------------------------------------------
3f53c 05a             | txn_out
3f53c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3f540 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3f544 05c 00 00 C0 FF 
3f548 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3f54c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3f550 05f             | 
3f550 05f             |                 ' Fall through to utx_data
3f550 05f             | 
3f550 05f             | '------------------------------------------------------------------------------
3f550 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3f550 05f             | ' calculated while the data byte is being shifted out. Since data stage
3f550 05f             | ' success/fail is not determined until the status stage of the transaction,
3f550 05f             | ' this routine is only concerned about the current DATAx packet.
3f550 05f             | '------------------------------------------------------------------------------
3f550 05f             | ' On entry:
3f550 05f             | '   PTRA - hub start address of the data to read.
3f550 05f             | '   pkt_cnt - data payload size.
3f550 05f             | ' On exit:
3f550 05f             | '------------------------------------------------------------------------------
3f550 05f             | utx_data
3f550 05f 22 A7 82 FA |                 rqpin   urx, dm
3f554 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3f558 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3f55c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3f560 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3f564 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3f568 065 D8 0C B0 CD |         if_c    call    #utx_pre
3f56c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3f570 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3f574 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3f578 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3f57c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3f580 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3f584 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3f588 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3f58c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3f590 06f             | .read_byte
3f590 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3f594 070 F0 00 B0 FD |                 call    #utx_byte
3f598 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3f59c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3f5a0 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3f5a4 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3f5a8 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3f5ac 076             | .send_crc
3f5ac 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3f5b0 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3f5b4 078 D0 00 B0 FD |                 call    #utx_byte
3f5b8 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3f5bc 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3f5c0 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3f5c4 07c             | 
3f5c4 07c             | '------------------------------------------------------------------------------
3f5c4 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3f5c4 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3f5c4 07c             | ' expects that the packet includes at least the CRC word.
3f5c4 07c             | '
3f5c4 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3f5c4 07c             | ' was requested, which makes it difficult to determine where the data stops
3f5c4 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3f5c4 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3f5c4 07c             | ' USB-16 expected residual value of 0xB001.
3f5c4 07c             | '
3f5c4 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3f5c4 07c             | ' so the caller can verify IN success before writing the data to its final
3f5c4 07c             | ' destination.
3f5c4 07c             | '------------------------------------------------------------------------------
3f5c4 07c             | ' On entry:
3f5c4 07c             | '   pkt_data - max byte count expected to be in the packet.
3f5c4 07c             | '   newb_flg - signals new byte ready when toggled.
3f5c4 07c             | ' On exit:
3f5c4 07c             | '   pkt_cnt - actual number of bytes read.
3f5c4 07c             | '------------------------------------------------------------------------------
3f5c4 07c             | urx_data
3f5c4 07c F7 77 03 F6 |                 mov     htmp2, pb
3f5c8 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3f5cc 07e 00 00 C0 FF 
3f5d0 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3f5d4 080 BB EF 03 F6 |                 mov     pb, htmp2
3f5d8 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3f5dc 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3f5e0 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
3f5e4 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3f5e8 085             | .wait_byte
3f5e8 085             | ' In-line rx for max speed
3f5e8 085 22 A7 82 FA |                 rqpin   urx, dm
3f5ec 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3f5f0 087 53 A5 02 F5 |                 and     utx, urx
3f5f4 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3f5f8 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3f5fc 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3f600 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3f604 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3f608 08d DC FF 9F FD |                 jmp     #.wait_byte
3f60c 08e             | .get_byte
3f60c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3f610 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3f614 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3f618 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3f61c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3f620 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3f624 094             | .end_crc
3f624 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3f628 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3f62c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3f630 097 2D 00 64 1D |         if_a    ret
3f634 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3f634 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3f634 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3f634 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3f634 098 22 A7 82 FA |                 rqpin   urx, dm
3f638 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3f63c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3f640 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3f640 09b             | .chk_crc
3f640 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3f644 09c 58 00 00 FF 
3f648 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3f64c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3f650 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3f654 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3f658 0a1 34 09 B0 FD |                 call    #poll_waitx
3f65c 0a2             | 
3f65c 0a2             |                 ' Fall through to utx_handshake
3f65c 0a2             | 
3f65c 0a2             | '------------------------------------------------------------------------------
3f65c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3f65c 0a2             | ' the appropriate IP delay has been inserted.
3f65c 0a2             | '------------------------------------------------------------------------------
3f65c 0a2             | ' On entry:
3f65c 0a2             | '   retval - handshake PID to send.
3f65c 0a2             | ' On exit:
3f65c 0a2             | '   retval unchanged.
3f65c 0a2             | '------------------------------------------------------------------------------
3f65c 0a2             | utx_handshake
3f65c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3f660 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3f664 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3f668 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3f66c 0a6 5F A5 02 F6 |                 mov     utx, retval
3f670 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3f674 0a8             | .idle
3f674 0a8 22 A7 82 FA |                 rqpin   urx, dm
3f678 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3f67c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3f680 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3f684 0ac 08 09 90 FD |                 jmp     #poll_waitx
3f688 0ad             | 
3f688 0ad             | '------------------------------------------------------------------------------
3f688 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3f688 0ad             | '------------------------------------------------------------------------------
3f688 0ad             | ' On entry:
3f688 0ad             | '   utx - byte to transmit.
3f688 0ad             | ' On exit:
3f688 0ad             | '------------------------------------------------------------------------------
3f688 0ad             | utx_byte
3f688 0ad 40 46 72 FD |                 testp   dp                      wc
3f68c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3f690 0af 23 03 08 FC |                 akpin   dp
3f694 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3f698 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3f69c 0b2             | 
3f69c 0b2             | '------------------------------------------------------------------------------
3f69c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3f69c 0b2             | '------------------------------------------------------------------------------
3f69c 0b2             | ' On entry:
3f69c 0b2             | ' On exit:
3f69c 0b2             | '   retval - the byte read.
3f69c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3f69c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3f69c 0b2             | '     received.
3f69c 0b2             | '------------------------------------------------------------------------------
3f69c 0b2             | urx_next
3f69c 0b2 22 A7 8A FA |                 rdpin   urx, dm
3f6a0 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3f6a4 0b4 53 A5 02 F5 |                 and     utx, urx
3f6a8 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3f6ac 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3f6b0 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3f6b4 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3f6b8 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3f6bc 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3f6c0 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3f6c4 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3f6c8 0bd 2D 00 64 FD |                 ret
3f6cc 0be             | 
3f6cc 0be             | '------------------------------------------------------------------------------
3f6cc 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3f6cc 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3f6cc 0be             | ' length, and the PID is not included in the CRC calculation:
3f6cc 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3f6cc 0be             | '  CRC5  ENDP ADDRESS PID
3f6cc 0be             | ' %00000_1111_1111111_xxxxxxxx
3f6cc 0be             | '------------------------------------------------------------------------------
3f6cc 0be             | ' On entry:
3f6cc 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3f6cc 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3f6cc 0be             | ' On exit:
3f6cc 0be             | '   ep_addr_pid - CRC value appended to the packet.
3f6cc 0be             | '------------------------------------------------------------------------------
3f6cc 0be             | calc_crc5
3f6cc 0be FF 03 00 FF 
3f6d0 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3f6d4 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
3f6d8 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3f6dc 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3f6e0 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
3f6e4 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3f6e8 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3f6ec 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3f6f0 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3f6f4 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3f6f8 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
3f6fc 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3f700 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
3f704 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3f708 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3f70c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3f710 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3f714 0d0             | 
3f714 0d0             | '------------------------------------------------------------------------------
3f714 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3f714 0d0             | '------------------------------------------------------------------------------
3f714 0d0             | isr1_fsframe
3f714 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3f718 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3f71c 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3f720 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3f724 0d4             | .wait
3f724 0d4 40 46 72 FD |                 testp   dp                      wc
3f728 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3f72c 0d6 23 03 08 FC |                 akpin   dp
3f730 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3f734 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3f738 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3f73c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3f740 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3f744 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3f748 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3f74c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3f750 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3f754 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3f758 0e1 2C FF BF FD |                 call    #utx_byte
3f75c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3f760 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3f764 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3f768 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3f76c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3f770 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3f774 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3f778 0e9 5B A5 42 F5 |                 or      utx, icrc
3f77c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3f780 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3f784 0ec 20 00 90 FD |                 jmp     #isr1_wait
3f788 0ed             | isr1_lsframe
3f788 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3f78c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3f790 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3f794 0f0             | .wait
3f794 0f0 40 46 72 FD |                 testp   dp                      wc
3f798 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3f79c 0f2 23 03 08 FC |                 akpin   dp
3f7a0 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3f7a4 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3f7a8 0f5             | isr1_wait
3f7a8 0f5 22 A5 82 FA |                 rqpin   utx, dm
3f7ac 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3f7b0 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3f7b4 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3f7b8 0f9 03 00 00 FF 
3f7bc 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3f7c0 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3f7c4 0fc F5 FF 3B FB |                 reti1
3f7c8 0fd             | 
3f7c8 0fd             | '------------------------------------------------------------------------------
3f7c8 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3f7c8 0fd             | ' transaction will complete before the next frame is triggered.
3f7c8 0fd             | '------------------------------------------------------------------------------
3f7c8 0fd             | ' On entry:
3f7c8 0fd             | ' On exit:
3f7c8 0fd             | '------------------------------------------------------------------------------
3f7c8 0fd             | wait_txn_ok
3f7c8 0fd 1A 76 63 FD |                 getct   htmp2
3f7cc 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
3f7d0 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3f7d4 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3f7d8 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3f7dc 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3f7e0 103 2D 00 64 FD |                 ret
3f7e4 104             | 
3f7e4 104             | '------------------------------------------------------------------------------
3f7e4 104             | ' A device connection was detected, or a bus reset was requested by the USB
3f7e4 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3f7e4 104             | ' and perform a reset sequence prior to device enumeration.
3f7e4 104             | '------------------------------------------------------------------------------
3f7e4 104             | dev_reset
3f7e4 104 22 A7 82 FA |                 rqpin   urx, dm
3f7e8 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3f7ec 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3f7f0 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3f7f4 108             | reset
3f7f4 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3f7f8 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3f7fc 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3f800 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3f804 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3f808 10d 1A 92 62 FD |                 getct   iframe_ct_base
3f80c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3f810 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3f814 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3f818 111 24 72 07 F1 |                 add     htmp, #36
3f81c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3f820 113             | .framewait
3f820 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
3f824 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3f828 115 2D 00 64 FD |                 ret
3f82c 116             | 
3f82c 116             | '------------------------------------------------------------------------------
3f82c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3f82c 116             | '------------------------------------------------------------------------------
3f82c 116             | ' On entry:
3f82c 116             | '   PTRA - source address.
3f82c 116             | '   PB - destination address.
3f82c 116             | '   hr0 - length of copy, in bytes.
3f82c 116             | ' On exit:
3f82c 116             | '------------------------------------------------------------------------------
3f82c 116             | hmemcpy
3f82c 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
3f830 117 F7 73 43 FC |                 wrbyte  htmp, pb
3f834 118 01 EE 07 F1 |                 add     pb, #1
3f838 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3f83c 11a             | 
3f83c 11a             | '------------------------------------------------------------------------------
3f83c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3f83c 11a             | ' loop until the errant device is disconnected.
3f83c 11a             | '------------------------------------------------------------------------------
3f83c 11a             | ' On entry:
3f83c 11a             | ' On exit:
3f83c 11a             | '------------------------------------------------------------------------------
3f83c 11a             | host_error
3f83c 11a             |           if ERROR_LED >= 0
3f83c 11a             |           end
3f83c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3f840 11b             | 
3f840 11b             | '------------------------------------------------------------------------------
3f840 11b             | ' Get HID descriptor buffer for current port
3f840 11b             | '------------------------------------------------------------------------------
3f840 11b             | ' On entry:
3f840 11b             | ' On exit:
3f840 11b             | '   PB - HID descriptor buffer pointer
3f840 11b             | '------------------------------------------------------------------------------
3f840 11b             | get_hid_descr_buffer
3f840 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3f844 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3f848 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3f84c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3f850 11f             | 
3f850 11f             | 
3f850 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3f854 120             | 
3f854 120             | ' USB commands and error codes
3f854 120 00 00 00 00 | cmd_data        long    0
3f858 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3f85c 122             | 
3f85c 122             | ' Parameters block assigned at cog startup
3f85c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3f860 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3f864 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3f868 125             | if ACTIVITY_LED >= 0
3f868 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3f868 125             | end
3f868 125             | if ERROR_LED >= 0
3f868 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3f868 125             | end
3f868 125 00 00 00 00 | hid_descr_p     long    0
3f86c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3f86c 126             | 'hkbd_report_p   long    0
3f86c 126 00 00 00 00 | hub_descr_p     long    0
3f870 127 00 00 00 00 | urx_buff_p      long    0
3f874 128 00 00 00 00 | dev_desc_buff_p long    0
3f878 129 00 00 00 00 | con_desc_buff_p long    0
3f87c 12a 00 00 00 00 | cache_start_p   long    0
3f880 12b 00 00 00 00 | cache_end_p     long    0
3f884 12c             | if EMUPAD_MAX_PLAYER > 0
3f884 12c             | emupad_out_ptr  long    0
3f884 12c             | end
3f884 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3f888 12d             | 
3f888 12d             | hdev_init_start
3f888 12d             | hdev_port       res     1
3f888 12d             | hdev_port       res     1
3f888 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3f888 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3f888 12d             | kbm_next_datax  res     1
3f888 12d             | kbm_next_datax  res     1
3f888 12d             | hub_intf_num    res     1
3f888 12d             | hub_intf_num    res     1
3f888 12d             | hub_next_datax  res     1
3f888 12d             | hub_next_datax  res     1
3f888 12d             | hub_status_chg  res     1
3f888 12d             | hub_status_chg  res     1
3f888 12d             | hub_port_status res     1
3f888 12d             | hub_port_status res     1
3f888 12d             | if HAVE_MOUSE
3f888 12d             | ms_intf_num     res     1
3f888 12d             | ms_intf_num     res     1
3f888 12d             | ms_in_max_pkt   res     1
3f888 12d             | ms_in_max_pkt   res     1
3f888 12d             | end
3f888 12d             | kb_intf_num     res     1
3f888 12d             | kb_intf_num     res     1
3f888 12d             | kb_interval     res     1
3f888 12d             | kb_interval     res     1
3f888 12d             | kb_in_max_pkt   res     1
3f888 12d             | kb_in_max_pkt   res     1
3f888 12d             | kb_max_index    res     1
3f888 12d             | kb_max_index    res     1
3f888 12d             | kb_led_states   res     1
3f888 12d             | kb_led_states   res     1
3f888 12d             | gp_intf_num     res     1
3f888 12d             | gp_intf_num     res     1
3f888 12d             | gp_interval     res     1
3f888 12d             | gp_interval     res     1
3f888 12d             | gp_max_index    res     1
3f888 12d             | gp_max_index    res     1
3f888 12d             | gp_descr_len    res     1+MAX_DEVICES
3f888 12d             | gp_descr_len    res     1+MAX_DEVICES
3f888 12d             | hdev_init_end
3f888 12d             | 
3f888 12d             | ' Initialized at cog startup:
3f888 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3f888 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3f888 12d             | iframe_ct_new   res     1
3f888 12d             | iframe_ct_new   res     1
3f888 12d             | iframe_ct_base  res     1
3f888 12d             | iframe_ct_base  res     1
3f888 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3f888 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3f888 12d             | 
3f888 12d             | ' This register block is reset to zero when a USB device connects
3f888 12d             | hreg_init_start
3f888 12d             | hstatus         res     1         ' Host status flags
3f888 12d             | hstatus         res     1         ' Host status flags
3f888 12d             | hctwait         res     1         ' Poll-based wait clocks
3f888 12d             | hctwait         res     1         ' Poll-based wait clocks
3f888 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3f888 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3f888 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3f888 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3f888 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3f888 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3f888 12d             | xfer_retry      res     1         ' Control transfer retry count
3f888 12d             | xfer_retry      res     1         ' Control transfer retry count
3f888 12d             | retry           res     1         ' Transaction retry count
3f888 12d             | retry           res     1         ' Transaction retry count
3f888 12d             | utx             res     1         ' Byte to transmit on USB
3f888 12d             | utx             res     1         ' Byte to transmit on USB
3f888 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3f888 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3f888 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3f888 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3f888 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3f888 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3f888 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3f888 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3f888 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3f888 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3f888 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3f888 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3f888 12d             | frame           res     1         ' USB 1ms frame counter value
3f888 12d             | frame           res     1         ' USB 1ms frame counter value
3f888 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3f888 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3f888 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3f888 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3f888 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3f888 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3f888 12d             | crc             res     1         ' Used for CRC16 calculation
3f888 12d             | crc             res     1         ' Used for CRC16 calculation
3f888 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3f888 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3f888 12d             | retval          res     1         ' Global success/fail return parameter
3f888 12d             | retval          res     1         ' Global success/fail return parameter
3f888 12d             | context_retval  res     1         ' Operation contextual return parameter
3f888 12d             | context_retval  res     1         ' Operation contextual return parameter
3f888 12d             | ' Device stuff
3f888 12d             | hdev_id         res     1+MAX_DEVICES
3f888 12d             | hdev_id         res     1+MAX_DEVICES
3f888 12d             | hdev_bcd        res     1
3f888 12d             | hdev_bcd        res     1
3f888 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3f888 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3f888 12d             | ' Keyboard/mouse stuff
3f888 12d             | hctrl_ep_addr   res     1
3f888 12d             | hctrl_ep_addr   res     1
3f888 12d             | hctrl_max_pkt   res     1
3f888 12d             | hctrl_max_pkt   res     1
3f888 12d             | hconfig_base    res     1
3f888 12d             | hconfig_base    res     1
3f888 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3f888 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3f888 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3f888 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3f888 12d             | hdev_class      res     1
3f888 12d             | hdev_class      res     1
3f888 12d             | hdev_subclass   res     1
3f888 12d             | hdev_subclass   res     1
3f888 12d             | hdev_protocol   res     1
3f888 12d             | hdev_protocol   res     1
3f888 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3f888 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3f888 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3f888 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3f888 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3f888 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3f888 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3f888 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3f888 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3f888 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3f888 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3f888 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3f888 12d             | if HAVE_MOUSE
3f888 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3f888 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3f888 12d             | end
3f888 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3f888 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3f888 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3f888 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3f888 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3f888 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3f888 12d             | hdev_out_addr   res     1
3f888 12d             | hdev_out_addr   res     1
3f888 12d             | 
3f888 12d             | if EMUPAD_MAX_PLAYER > 0
3f888 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3f888 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3f888 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3f888 12d             | end
3f888 12d             | 
3f888 12d             | hreg_init_end
3f888 12d             | 
3f888 12d             | hidr_start
3f888 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3f888 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3f888 12d             | hidr_flags      res     1
3f888 12d             | hidr_flags      res     1
3f888 12d             | hidr_axis       res     4
3f888 12d             | hidr_axis       res     4
3f888 12d             | hidr_buttons    res     1
3f888 12d             | hidr_buttons    res     1
3f888 12d             | hidr_hats       res     1
3f888 12d             | hidr_hats       res     1
3f888 12d             | '' Above are actually useful values, 6 longs
3f888 12d             | hidr_type       res     1
3f888 12d             | hidr_type       res     1
3f888 12d             | hidr_id         res     1
3f888 12d             | hidr_id         res     1
3f888 12d             | hidr_offset     res     1
3f888 12d             | hidr_offset     res     1
3f888 12d             | hidr_usage_idx  res     1
3f888 12d             | hidr_usage_idx  res     1
3f888 12d             | ' below need to be push/pop'd
3f888 12d             | hidr_state      res     1
3f888 12d             | hidr_state      res     1
3f888 12d             | hidr_size       res     1
3f888 12d             | hidr_size       res     1
3f888 12d             | hidr_count      res     1
3f888 12d             | hidr_count      res     1
3f888 12d             | hidr_lminmax    res     1
3f888 12d             | hidr_lminmax    res     1
3f888 12d             | hidr_pminmax    res     1
3f888 12d             | hidr_pminmax    res     1
3f888 12d             | hidr_end
3f888 12d             | 
3f888 12d             | ' Variables dependent on the system freqency
3f888 12d             | _var_64_lower_  res     1
3f888 12d             | _var_64_lower_  res     1
3f888 12d             | _var_64_upper_  res     1
3f888 12d             | _var_64_upper_  res     1
3f888 12d             | _12Mbps_        res     1
3f888 12d             | _12Mbps_        res     1
3f888 12d             | _1_5Mbps_       res     1
3f888 12d             | _1_5Mbps_       res     1
3f888 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3f888 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3f888 12d             | _1us_           res     1         ' 1us
3f888 12d             | _1us_           res     1         ' 1us
3f888 12d             | _10us_          res     1         ' 10us
3f888 12d             | _10us_          res     1         ' 10us
3f888 12d             | _33us_          res     1         ' 33us
3f888 12d             | _33us_          res     1         ' 33us
3f888 12d             | _txn_err_       res     1         ' 250us
3f888 12d             | _txn_err_       res     1         ' 250us
3f888 12d             | _500us_         res     1         ' 500us
3f888 12d             | _500us_         res     1         ' 500us
3f888 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3f888 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3f888 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3f888 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3f888 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3f888 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3f888 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3f888 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3f888 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3f888 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3f888 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3f888 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3f888 12d             | _preamble_wait_ res     1
3f888 12d             | _preamble_wait_ res     1
3f888 12d             | _1ms_           res     1         ' 1ms
3f888 12d             | _1ms_           res     1         ' 1ms
3f888 12d             | _2ms_           res     1         ' 2ms
3f888 12d             | _2ms_           res     1         ' 2ms
3f888 12d             | _suspend_wait_  res     1         ' 3ms
3f888 12d             | _suspend_wait_  res     1         ' 3ms
3f888 12d             | _4ms_           res     1         ' 4ms
3f888 12d             | _4ms_           res     1         ' 4ms
3f888 12d             | _xfer_wait_     res     1         ' 5ms
3f888 12d             | _xfer_wait_     res     1         ' 5ms
3f888 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3f888 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3f888 12d             | _reset_hold_    res     1         ' 15ms
3f888 12d             | _reset_hold_    res     1         ' 15ms
3f888 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3f888 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3f888 12d             | _21ms_          res     1         ' 21ms
3f888 12d             | _21ms_          res     1         ' 21ms
3f888 12d             | _100ms_         res     1         ' 100ms
3f888 12d             | _100ms_         res     1         ' 100ms
3f888 12d             | _500ms_         res     1         ' 500ms
3f888 12d             | _500ms_         res     1         ' 500ms
3f888 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3f888 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3f888 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3f888 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3f888 12d             | '------------------------------------------------------------------------------
3f888 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3f888 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3f888 12d             | _usb_d_ls_nco_  res     1
3f888 12d             | _usb_d_ls_nco_  res     1
3f888 12d             | _usb_h_fs_nco_  res     1
3f888 12d             | _usb_h_fs_nco_  res     1
3f888 12d             | _usb_d_fs_nco_  res     1
3f888 12d             | _usb_d_fs_nco_  res     1
3f888 12d             | '------------------------------------------------------------------------------
3f888 12d             | ' Scratch registers
3f888 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3f888 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3f888 12d             | htmp1           res     1
3f888 12d             | htmp1           res     1
3f888 12d             | htmp2           res     1
3f888 12d             | htmp2           res     1
3f888 12d             | htmp3           res     1
3f888 12d             | htmp3           res     1
3f888 12d             | hrep            res     1         ' Repeat count
3f888 12d             | hrep            res     1         ' Repeat count
3f888 12d             | hsave0          res     1         ' Subroutine parameter saves
3f888 12d             | hsave0          res     1         ' Subroutine parameter saves
3f888 12d             | hsave1          res     1
3f888 12d             | hsave1          res     1
3f888 12d             | hsave2          res     1
3f888 12d             | hsave2          res     1
3f888 12d             | isrtmp1         res     1
3f888 12d             | isrtmp1         res     1
3f888 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3f888 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3f888 12d             | hr0             res     1         ' Multi-purpose registers
3f888 12d             | hr0             res     1         ' Multi-purpose registers
3f888 12d             | hr1             res     1
3f888 12d             | hr1             res     1
3f888 12d             | hr2             res     1
3f888 12d             | hr2             res     1
3f888 12d             | hr3             res     1
3f888 12d             | hr3             res     1
3f888 12d             | hpar1           res     1         ' Routine entry/exit parameters
3f888 12d             | hpar1           res     1         ' Routine entry/exit parameters
3f888 12d             | hpar2           res     1
3f888 12d             | hpar2           res     1
3f888 12d             | hpar3           res     1
3f888 12d             | hpar3           res     1
3f888 12d             | hct2            res     1         ' Function response bus turn-around timer
3f888 12d             | hct2            res     1         ' Function response bus turn-around timer
3f888 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3f888 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3f888 12d             | mod_cnt         res     1         ' Used in idle loops
3f888 12d             | mod_cnt         res     1         ' Used in idle loops
3f888 12d             |                 fit     $1F0
3f888 12d             |                 org     $200
3f888 200             | hlut_start
3f888 200             | 
3f888 200             | '------------------------------------------------------------------------------
3f888 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3f888 200             | ' settings to startup defaults.
3f888 200             | '------------------------------------------------------------------------------
3f888 200             | ' On entry:
3f888 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3f888 200             | '------------------------------------------------------------------------------
3f888 200             | set_speed_full
3f888 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3f88c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3f890 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3f894 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3f898 204             | '                ret                             wcz     ' Restore caller flags on exit
3f898 204             | 
3f898 204             | '------------------------------------------------------------------------------
3f898 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3f898 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3f898 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3f898 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3f898 204             | ' putting the smart pins into reset.
3f898 204             | '------------------------------------------------------------------------------
3f898 204             | ' On entry:
3f898 204             | ' On exit: CZ flags restored to caller states
3f898 204             | '------------------------------------------------------------------------------
3f898 204             | set_speed_low
3f898 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3f89c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3f8a0 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3f8a4 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3f8a8 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3f8ac 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3f8b0 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3f8b4 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3f8b8 20c             | 
3f8b8 20c             | '------------------------------------------------------------------------------
3f8b8 20c             | ' Perform configuration stuff required when a device intitially connects.
3f8b8 20c             | '------------------------------------------------------------------------------
3f8b8 20c             | ' On entry:
3f8b8 20c             | ' On exit:
3f8b8 20c             | '------------------------------------------------------------------------------
3f8b8 20c             | on_connect
3f8b8 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3f8bc 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3f8c0 20e             | .retry
3f8c0 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3f8c4 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3f8c8 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3f8cc 211 00 08 00 FF 
3f8d0 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3f8d4 213 28 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3f8d8 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3f8dc 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3f8e0 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3f8e4 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3f8e8 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f8ec 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3f8f0 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3f8f4 21b 4C 03 B0 FD |                 call    #poll_waitx
3f8f8 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3f8fc 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3f900 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3f904 21f B8 FF 9F FD |                 jmp     #.retry
3f908 220             | .get_dev_desc
3f908 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3f90c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3f910 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3f914 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
3f918 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3f91c 225 88 FB BF FD |                 call    #reset
3f920 226 40 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3f924 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3f928 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3f92c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3f930 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f934 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3f938 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
3f93c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3f940 22e 04 00 00 FF 
3f944 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3f948 230 34 FA BF FD |                 call    #calc_crc5
3f94c 231 28 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3f950 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3f954 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3f958 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3f95c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3f960 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3f964 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f968 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3f96c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3f970 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3f974 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3f978 23c A0 99 02 F6 |                 mov     hctwait, _500us_
3f97c 23d C4 02 B0 FD |                 call    #poll_waitx
3f980 23e 30 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3f984 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3f988 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3f98c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3f990 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3f994 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f998 244 2D 00 64 5D |         if_nz   ret
3f99c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3f9a0 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3f9a4 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3f9a8 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3f9ac 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3f9b0 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3f9b4 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3f9b8 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
3f9bc 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3f9c0 24e 2C FB 9F CD |         if_b    jmp     #host_error
3f9c4 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3f9c8 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3f9cc 251 2D EC 63 FD |                 call    pa
3f9d0 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3f9d4 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3f9d8 254 2C EC 63 FD |                 jmp     pa
3f9dc 255             | 
3f9dc 255             | '------------------------------------------------------------------------------
3f9dc 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3f9dc 255             | ' Status reporting is always in the function-to-host direction.
3f9dc 255             | '------------------------------------------------------------------------------
3f9dc 255             | ' On entry:
3f9dc 255             | '   PTRA - start address of the SETUP data in hub.
3f9dc 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3f9dc 255             | '     stage.
3f9dc 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3f9dc 255             | ' On exit:
3f9dc 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3f9dc 255             | '     contains the count of data stage bytes actually received, which must
3f9dc 255             | '     always be <= the count requested.
3f9dc 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3f9dc 255             | '     more specific USB operation error code.
3f9dc 255             | '------------------------------------------------------------------------------
3f9dc 255             | control_read
3f9dc 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3f9e0 256 F8 91 03 F6 |                 mov     hpar2, ptra
3f9e4 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3f9e8 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3f9ec 259             | .xfer_start
3f9ec 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3f9f0 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3f9f4 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f9f8 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3f9fc 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3fa00 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3fa04 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3fa08 260 61 00 00 FF 
3fa0c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3fa10 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3fa14 263             | .data
3fa14 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3fa18 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3fa1c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3fa20 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3fa24 267             | .nak_retry
3fa24 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3fa28 268             | .in_retry
3fa28 268 BC F6 BF FD |                 call    #txn_in
3fa2c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3fa30 26a 28 00 90 AD |         if_z    jmp     #.commit
3fa34 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3fa38 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3fa3c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3fa40 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3fa44 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3fa48 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3fa4c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3fa50 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3fa54 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3fa58 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3fa5c 275             | .commit
3fa5c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3fa60 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3fa64 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3fa68 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
3fa6c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3fa70 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3fa74 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3fa78 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3fa7c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3fa80 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3fa84 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3fa88 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3fa8c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3fa90 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3fa94 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3fa98 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3fa9c 285             | .pre_status
3fa9c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3faa0 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3faa4 287 00 B0 06 F6 |                 mov     pkt_data, #0
3faa8 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3faac 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3fab0 28a 61 00 00 FF 
3fab4 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3fab8 28c             | .out_retry
3fab8 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3fabc 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fac0 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3fac4 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3fac8 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3facc 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3fad0 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3fad4 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3fad8 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3fadc 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3fae0 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3fae4 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3fae4 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3fae4 297             | ' ControlRead() transfer gets things unstuck most of the time...
3fae4 297             | .xfer_retry
3fae4 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
3fae8 298 58 01 B0 FD |                 call    #poll_waitx
3faec 299 8C F9 BF FD |                 call    #wait_txn_ok
3faf0 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3faf4 29b C8 F1 03 F6 |                 mov     ptra, hpar2
3faf8 29c C9 EF 03 F6 |                 mov     pb, hpar3
3fafc 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3fb00 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3fb04 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3fb08 2a0             | 
3fb08 2a0             | '------------------------------------------------------------------------------
3fb08 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3fb08 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3fb08 2a0             | ' the SETUP data struct is filled with the required values.
3fb08 2a0             | '------------------------------------------------------------------------------
3fb08 2a0             | ' On entry:
3fb08 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3fb08 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3fb08 2a0             | '     stage.
3fb08 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3fb08 2a0             | ' On exit:
3fb08 2a0             | '   retval - used to convey the success/failure of each stage.
3fb08 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3fb08 2a0             | '     more specific USB operation error code.
3fb08 2a0             | '------------------------------------------------------------------------------
3fb08 2a0             | control_write
3fb08 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3fb0c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3fb10 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3fb14 2a3             | 
3fb14 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
3fb18 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
3fb1c 2a5 F7 93 03 F6 |                 mov     hpar3, pb
3fb20 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3fb24 2a7             | .xfer_start
3fb24 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3fb28 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3fb2c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3fb30 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fb34 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3fb38 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3fb3c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3fb40 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3fb44 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3fb48 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3fb4c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3fb50 2b2             | .data
3fb50 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3fb54 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3fb58 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3fb5c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3fb60 2b6             | .out_retry
3fb60 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3fb64 2b7 88 F6 BF FD |                 call    #txn_out
3fb68 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fb6c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3fb70 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3fb74 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3fb78 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3fb7c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3fb80 2be             | .commit
3fb80 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3fb84 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3fb88 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3fb8c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3fb90 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3fb94 2c3             | pre_status_in
3fb94 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3fb98 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3fb9c 2c5             | .status_retry
3fb9c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3fba0 2c6 44 F5 BF FD |                 call    #txn_in
3fba4 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3fba8 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3fbac 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3fbb0 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3fbb4 2cb 2D 00 64 AD |         if_z    ret
3fbb8 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3fbbc 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3fbc0 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3fbc4 2cf             | '               ret                                     ' Caller must handle transfer retirement
3fbc4 2cf             | 
3fbc4 2cf             | '------------------------------------------------------------------------------
3fbc4 2cf             | ' Execute an IN interrupt transaction.
3fbc4 2cf             | '------------------------------------------------------------------------------
3fbc4 2cf             | ' On entry:
3fbc4 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3fbc4 2cf             | '   hpar2 - Address of the IN data buffer
3fbc4 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3fbc4 2cf             | ' On exit:
3fbc4 2cf             | '   retval - the result of the operation.
3fbc4 2cf             | '   hpar3 - the count of IN data bytes actually received.
3fbc4 2cf             | '------------------------------------------------------------------------------
3fbc4 2cf             | do_int_in
3fbc4 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3fbc8 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3fbcc 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3fbd0 2d2             | 
3fbd0 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
3fbd4 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3fbd8 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3fbdc 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3fbe0 2d6             | .retry
3fbe0 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3fbe4 2d7 00 F5 BF FD |                 call    #txn_in
3fbe8 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3fbec 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3fbf0 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3fbf4 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3fbf8 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3fbfc 2dd 54 00 B0 FD |                 call    #retry_wait
3fc00 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3fc04 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3fc08 2e0 D4 FF 9F FD |                 jmp     #.retry
3fc0c 2e1             | .commit
3fc0c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3fc10 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3fc14 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3fc18 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3fc1c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3fc20 2e6             | .post_ret
3fc20 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3fc24 2e7             | 
3fc24 2e7             | 
3fc24 2e7             | '------------------------------------------------------------------------------
3fc24 2e7             | ' Resets the downstream hub port to FS
3fc24 2e7             | '------------------------------------------------------------------------------
3fc24 2e7             | dwnstream_reset
3fc24 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3fc28 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3fc2c 2e9             | 
3fc2c 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3fc30 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3fc34 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3fc38 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3fc3c 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3fc40 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3fc44 2ef             | 
3fc44 2ef             | '------------------------------------------------------------------------------
3fc44 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3fc44 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3fc44 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3fc44 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3fc44 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3fc44 2ef             | '------------------------------------------------------------------------------
3fc44 2ef             | ' On entry:
3fc44 2ef             | '   hctwait - wait interval in sysclocks.
3fc44 2ef             | ' On exit:
3fc44 2ef             | '------------------------------------------------------------------------------
3fc44 2ef             | poll_waitx
3fc44 2ef 1A 94 63 FD |                 getct   hct2
3fc48 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
3fc4c 2f1             | .wait
3fc4c 2f1 FF 25 CC FB |                 jnct2   #.wait
3fc50 2f2 2D 00 64 FD |                 ret
3fc54 2f3             | 
3fc54 2f3             | '------------------------------------------------------------------------------
3fc54 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3fc54 2f3             | '------------------------------------------------------------------------------
3fc54 2f3             | ' On entry:
3fc54 2f3             | '   retval - transaction response PID or error code.
3fc54 2f3             | ' On exit:
3fc54 2f3             | '------------------------------------------------------------------------------
3fc54 2f3             | retry_wait
3fc54 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3fc58 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3fc5c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3fc60 2f6 14 00 90 AD |         if_z    jmp     #.nak
3fc64 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3fc68 2f8 D8 FF BF FD |                 call    #poll_waitx
3fc6c 2f9             | .dec
3fc6c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3fc70 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3fc74 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3fc78 2fc             | .nak
3fc78 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3fc7c 2fd C4 FF BF FD |                 call    #poll_waitx
3fc80 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3fc84 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3fc88 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3fc8c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3fc90 302 2D 00 64 FD |                 ret
3fc94 303             | 
3fc94 303             | host_reset
3fc94 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3fc98 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3fc9c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3fc9c 305 BD 01 05 FF 
3fca0 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3fca4 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3fca8 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3fcac 309             | ' Check to see if the system clock has been changed.
3fcac 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3fcb0 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3fcb4 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3fcb8 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3fcbc 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3fcc0 30e 40 46 62 FD |                 dirl    dp
3fcc4 30f             | 
3fcc4 30f 28 02 64 FD |                 setq    #1
3fcc8 310 80 00 80 FF 
3fccc 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3fcd0 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3fcd4 313             | .enable
3fcd4 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3fcd8 314 41 46 62 FD |                 dirh    dp
3fcdc 315 1F 38 63 FD |                 waitx   _1us_
3fce0 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3fce4 317             | 
3fce4 317             |                 ' Handle Port protection enable and startup delay
3fce4 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3fce8 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3fcec 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3fcf0 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3fcf4 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3fcf8 31c             | 
3fcf8 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3fcfc 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3fd00 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3fd04 31f 00 00 04 F6 |                 mov     0-0, #0
3fd08 320             | .regloop
3fd08 320             | 
3fd08 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3fd08 320             | 
3fd08 320             | discon_entry
3fd08 320 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3fd0c 321             | 
3fd0c 321             |               
3fd0c 321             |         if HAVE_HIDPAD
3fd0c 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3fd10 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3fd14 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3fd18 324 F7 01 68 FC |                 wrlong  #0,pb
3fd1c 325             |         end
3fd1c 325             |         if EMUPAD_MAX_PLAYER > 0
3fd1c 325             |         end
3fd1c 325             | 
3fd1c 325             |                 ' Fall through to disconnected loop
3fd1c 325             | 
3fd1c 325             | '-----------------------------------------------------------------------------------------------------------------
3fd1c 325             | ' Device connect handling (Section 7.1.7.3).
3fd1c 325             | '-----------------------------------------------------------------------------------------------------------------
3fd1c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3fd1c 325             | ' device to connect (Section 7.1.7.3).
3fd1c 325             | '-----------------------------------------------------------------------------------------------------------------
3fd1c 325             | disconnected
3fd1c 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3fd20 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
3fd24 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3fd28 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3fd2c 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3fd30 32a             |         if ACTIVITY_LED >= 0
3fd30 32a             |         end
3fd30 32a 22 A7 82 FA |                 rqpin   urx, dm
3fd34 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3fd38 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3fd3c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3fd40 32e             | .se1_test
3fd40 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3fd44 32f FC FE BF FD |                 call    #poll_waitx
3fd48 330 22 A7 82 FA |                 rqpin   urx, dm
3fd4c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3fd50 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3fd54 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3fd58 334             | .se1            'SE1 is a fatal error condition
3fd58 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
3fd5c 335 E4 FE BF FD |                 call    #poll_waitx
3fd60 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3fd64 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3fd68 338             | .connect_test                                           ' Test lines until stable J/K state seen
3fd68 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3fd6c 339 22 A7 82 FA |                 rqpin   urx, dm
3fd70 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3fd74 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3fd78 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3fd7c 33d             | connected
3fd7c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3fd80 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3fd84 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3fd88 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3fd8c 341             | .set_pulse
3fd8c 341 1A 66 63 FD |                 getct   _pulse_time_
3fd90 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3fd94 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3fd94 343             | ' of 1ms and make a correction, if necessary.
3fd94 343             | '                mov     htmp, _1ms_
3fd94 343             | '                subs    htmp, iframe_delta
3fd94 343             | '                adds    _frame1ms_clks_, htmp
3fd94 343             | '                debug(udec(_frame1ms_clks_))
3fd94 343             | 
3fd94 343             |                 ' Fall through to idle/processing loop
3fd94 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3fd98 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3fd9c 345             | 
3fd9c 345             | hidle
3fd9c 345 22 A7 82 FA |                 rqpin   urx, dm
3fda0 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3fda4 347 98 00 90 CD |         if_c    jmp     #.se0_test
3fda8 348 24 06 70 FD |                 pollct3                         wc
3fdac 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3fdb0 34a 1A 96 63 FD |                 getct   hct3
3fdb4 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3fdb8 34c             | 
3fdb8 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3fdbc 34d 00 72 E3 F8 |                 getbyte htmp
3fdc0 34e             | 
3fdc0 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
3fdc4 34f 94 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3fdc8 350 40 00 90 AD |         if_z    jmp     #.poll
3fdcc 351             | 
3fdcc 351             |         if _HAVE_GAMEPAD
3fdcc 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
3fdd0 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3fdd4 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3fdd8 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3fddc 355 2C 00 90 AD |         if_z    jmp     #.poll
3fde0 356             |         end
3fde0 356             | 
3fde0 356             |         if HAVE_MOUSE
3fde0 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
3fde4 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3fde8 358 20 00 90 AD |         if_z    jmp     #.poll
3fdec 359             |         end
3fdec 359             | 
3fdec 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
3fdf0 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3fdf4 35b 14 00 90 AD |         if_z    jmp     #.poll
3fdf8 35c             | 
3fdf8 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
3fdfc 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3fe00 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3fe04 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3fe08 360             |         if HAVE_MOUSE
3fe08 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3fe0c 361             |         else
3fe0c 361             |         end
3fe0c 361             | 
3fe0c 361             | .poll
3fe0c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3fe10 362 2D EC 63 FD |                 call    pa
3fe14 363             | .skip_poll
3fe14 363             | 
3fe14 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3fe18 364             | 
3fe18 364             | .nopoll
3fe18 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3fe1c 365 44 00 90 AD |         if_z    jmp     #hsuspend
3fe20 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3fe24 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3fe28 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3fe2c 369 1A 86 63 FD |                 getct   hr0
3fe30 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3fe34 36b             |         if ACTIVITY_LED >= 0
3fe34 36b             |         end
3fe34 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
3fe38 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
3fe3c 36d 5C FF 9F FD |                 jmp     #hidle
3fe40 36e             | ' Check for extended SE0 state on the bus
3fe40 36e             | .se0_test
3fe40 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
3fe44 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3fe48 370 22 A7 82 FA |                 rqpin   urx, dm
3fe4c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3fe50 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3fe54 373 24 F6 BF FD |                 call    #wait_txn_ok
3fe58 374 00 00 80 FF 
3fe5c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3fe60 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3fe60 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3fe64 377             | 
3fe64 377             | hsuspend
3fe64 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3fe68 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3fe6c 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3fe70 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3fe74 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3fe78 37c 00 98 07 F6 |                 mov     mod_cnt, #0
3fe7c 37d             | 
3fe7c 37d             |                 ' Fall through to resume wait loop
3fe7c 37d             | 
3fe7c 37d             | hwait_resume
3fe7c 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3fe80 37e 02 88 47 F0 |                 shr     hr1, #2
3fe84 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3fe88 380             |         if ACTIVITY_LED >= 0
3fe88 380             |         end
3fe88 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3fe8c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3fe90 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3fe94 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
3fe98 384 18 00 90 AD |         if_z    jmp     #.resume
3fe9c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3fea0 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3fea4 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3fea8 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3feac 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3feb0 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3feb4 38b             | .resume
3feb4 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3feb8 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3febc 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3fec0 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
3fec4 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3fec8 390 1F 72 63 FD |                 waitx   htmp
3fecc 391 22 07 28 FC |                 wypin   #OUT_J, dm
3fed0 392 01 72 47 F0 |                 shr     htmp, #1
3fed4 393 1F 72 63 FD |                 waitx   htmp
3fed8 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3fedc 395 1A 92 62 FD |                 getct   iframe_ct_base
3fee0 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3fee4 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3fee8 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3feec 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
3fef0 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3fef4 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3fef8 39c             | 
3fef8 39c             | '------------------------------------------------------------------------------
3fef8 39c             | ' Send preamble to enable low-speed HUB ports
3fef8 39c             | '------------------------------------------------------------------------------
3fef8 39c             | ' On entry:
3fef8 39c             | ' On exit:
3fef8 39c             | '   USB baud rate set to low-speed
3fef8 39c             | '------------------------------------------------------------------------------
3fef8 39c             | utx_pre
3fef8 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3fefc 39d 40 46 62 FD |                 dirl    dp
3ff00 39e 28 02 64 FD |                 setq    #1
3ff04 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3ff08 3a0 58 44 62 FD |                 drvl    dm
3ff0c 3a1 59 46 62 FD |                 drvh    dp
3ff10 3a2             | 
3ff10 3a2 1E 00 00 FF 
3ff14 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3ff18 3a4             | 
3ff18 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3ff1c 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
3ff20 3a6 28 02 64 3D |         if_nc   setq    #1
3ff24 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3ff28 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
3ff2c 3a9             | .l1
3ff2c 3a9             | 
3ff2c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3ff30 3aa 40 46 62 FD |                 dirl    dp
3ff34 3ab 28 02 64 FD |                 setq    #1
3ff38 3ac 80 00 80 FF 
3ff3c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3ff40 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3ff44 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3ff48 3b0 41 46 62 FD |                 dirh    dp
3ff4c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ff50 3b2             | 
3ff50 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3ff54 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3ff58 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3ff5c 3b5             | 
3ff5c 3b5             | hlut_end
3ff5c 3b5             |                 fit     $400
3ff5c 3b5             |                 orgh
3ff5c                 | if OVERLAP_MEMORY
3ff5c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3ff5c                 | end
3ff5c                 | '------------------------------------------------------------------------------
3ff5c                 | ' Routines called from cog space.
3ff5c                 | '------------------------------------------------------------------------------
3ff5c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3ff5c                 | '------------------------------------------------------------------------------
3ff5c                 | 
3ff5c                 | '------------------------------------------------------------------------------
3ff5c                 | ' USB host cog initialization.
3ff5c                 | '------------------------------------------------------------------------------
3ff5c                 | usb_host_init
3ff5c                 |                 ' Initialize buffer pointers
3ff5c                 |         if OVERLAP_MEMORY
3ff5c                 |         else
3ff5c     4C 15 B0 FE |                 loc     pb, #hid_descr
3ff60                 |         end
3ff60     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3ff64                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3ff64                 |                 {
3ff64                 |                 }
3ff64                 |         
3ff64                 |                 {
3ff64                 |                 }
3ff64                 |                 'loc     pb,#hkbd_report
3ff64                 |                 'mov     hkbd_report_p,pb
3ff64                 | 
3ff64     44 1D B0 FE |                 loc     pb, #hub_descr
3ff68     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3ff6c     59 1D B0 FE |                 loc     pb, #urx_buff
3ff70     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3ff74     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
3ff78     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3ff7c     DB 1D B0 FE |                 loc     pb, #con_desc_buff
3ff80     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3ff84     24 15 B0 FE |                 loc     pb, #usb_cache_start
3ff88     F7 55 02 F6 |                 mov     cache_start_p, pb
3ff8c     25 1D B0 FE |                 loc     pb, #usb_cache_end
3ff90     F7 57 02 F6 |                 mov     cache_end_p, pb
3ff94                 | 
3ff94                 |         if ERROR_LED >= 0
3ff94                 |         end
3ff94                 | 
3ff94                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3ff94                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3ff94                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3ff94                 | ' Configure and enable the Serial Host USB port.
3ff94     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3ff98                 | 
3ff98                 | '------------------------------------------------------------------------------
3ff98                 | ' Timing calculations happen before any interrupt(s) are enabled.
3ff98                 | '------------------------------------------------------------------------------
3ff98                 | ' On entry:
3ff98                 | '   htmp - current CLKFREQ value.
3ff98                 | '------------------------------------------------------------------------------
3ff98                 | hinit_usb_timings
3ff98                 | '                getct   htmp2
3ff98     B9 59 02 F6 |                 mov     save_sysclk, htmp
3ff9c     8D 5B 80 FF 
3ffa0     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3ffa4     18 32 63 FD |                 getqx   _12Mbps_
3ffa8     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
3ffac     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3ffb0     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3ffb4     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
3ffb8     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3ffbc     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3ffc0     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
3ffc4     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3ffc8     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3ffcc     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3ffd0     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3ffd4     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
3ffd8     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3ffdc     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3ffe0     80 00 00 FF 
3ffe4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3ffe8     18 2E 63 FD |                 getqx   _var_64_lower_
3ffec     19 30 63 FD |                 getqy   _var_64_upper_
3fff0     28 2E 63 FD |                 setq    _var_64_lower_
3fff4     65 CD 1D FF 
3fff8     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
3fffc     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
40000     01 00 00 FF 
40004     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
40008     18 2E 63 FD |                 getqx   _var_64_lower_
4000c     19 30 63 FD |                 getqy   _var_64_upper_
40010     28 2E 63 FD |                 setq    _var_64_lower_
40014     A1 07 00 FF 
40018     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
4001c     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
40020     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
40024     09 38 57 F0 |                 shr     _1us_, #9               wc
40028     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
4002c     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
40030     18 3A 63 FD |                 getqx   _10us_
40034     09 3A 57 F0 |                 shr     _10us_, #9              wc
40038     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
4003c     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
40040     18 3C 63 FD |                 getqx   _33us_
40044     09 3C 57 F0 |                 shr     _33us_, #9              wc
40048     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
4004c     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
40050     18 3E 63 FD |                 getqx   _txn_err_
40054     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
40058     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
4005c     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
40060     18 40 63 FD |                 getqx   _500us_
40064     09 40 57 F0 |                 shr     _500us_, #9             wc
40068     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
4006c     01 00 00 FF 
40070     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
40074     18 42 63 FD |                 getqx   _txn_ok_ls_
40078     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
4007c     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
40080     01 00 00 FF 
40084     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
40088     18 44 63 FD |                 getqx   _txn_ok_fs_
4008c     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
40090     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
40094     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
40098     05 00 00 FF 
4009c     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
400a0     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
400a4     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
400a8     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
400ac     1C 00 00 FF 
400b0     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
400b4     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
400b8     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
400bc     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
400c0     00 00 00 FF 
400c4     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
400c8     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
400cc     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
400d0     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
400d4     04 00 00 FF 
400d8     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
400dc     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
400e0     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
400e4     8D 5B 00 FF 
400e8     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
400ec     18 4E 63 FD |                 getqx   _preamble_wait_
400f0     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
400f4     01 00 00 FF 
400f8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
400fc     18 2E 63 FD |                 getqx   _var_64_lower_
40100     19 30 63 FD |                 getqy   _var_64_upper_
40104     28 2E 63 FD |                 setq    _var_64_lower_
40108     01 00 00 FF 
4010c     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
40110     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
40114     09 50 57 F0 |                 shr     _1ms_, #9               wc
40118     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
4011c     FF FF 7F FF 
40120     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
40124     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
40128     A8 53 03 F6 |                 mov     _2ms_, _1ms_
4012c     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
40130     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
40134     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
40138     A8 57 03 F6 |                 mov     _4ms_, _1ms_
4013c     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
40140     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
40144     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
40148     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
4014c     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
40150     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
40154     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
40158     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
4015c     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
40160     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
40164     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
40168     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
4016c     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
40170     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
40174     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
40178     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
4017c     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
40180     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
40184     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
40188     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
4018c                 | '        _ret_   mov     _1sec_, save_sysclk
4018c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
4018c                 | '                ret
4018c                 | {
4018c                 | }
4018c                 | 
4018c                 | '------------------------------------------------------------------------------
4018c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
4018c                 | ' one. If it is, start the task progression that will configure the device for
4018c                 | ' use.
4018c                 | '------------------------------------------------------------------------------
4018c                 | ' On entry:
4018c                 | '   hconfig_base - start address of the cached config descriptor chain.
4018c                 | ' On exit:
4018c                 | '------------------------------------------------------------------------------
4018c                 | hparse_con_desc
4018c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
40190     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
40194     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
40198     4E 72 FF F9 |                 movbyts htmp,#%%1032
4019c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
401a0                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
401a0                 | 
401a0     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
401a4     6E ED 03 F1 |                 add     pa, hconfig_base
401a8     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
401ac                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
401ac                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
401ac                 | ' that defines a keyboard and/or mouse.
401ac     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
401b0                 | .next_intf
401b0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
401b4     B8 01 90 3D |         if_ae   jmp     #hset_config
401b8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
401bc     75 F3 03 F1 |                 add     ptrb, hnext_desc
401c0     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
401c4     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
401c8     0C 00 90 AD |         if_z    jmp     #.intf
401cc     80 73 C7 FA |                 rdbyte  htmp, ptrb
401d0     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
401d4     D8 FF 9F FD |                 jmp     #.next_intf
401d8                 | .intf
401d8     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
401dc     00 92 07 F6 |                 mov     hpar3, #0
401e0     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
401e4     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
401e8     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
401ec     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
401f0                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
401f0                 | 
401f0                 | .endp
401f0     80 73 C7 FA |                 rdbyte  htmp, ptrb
401f4     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
401f8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
401fc     78 00 90 3D |         if_ae   jmp     #.get_device
40200     6E F3 03 F6 |                 mov     ptrb, hconfig_base
40204     75 F3 03 F1 |                 add     ptrb, hnext_desc
40208     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
4020c     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
40210     64 00 90 AD |         if_z    jmp     #.get_device
40214     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
40218     04 00 90 AD |         if_z    jmp     #.get_ep
4021c     D0 FF 9F FD |                 jmp     #.endp
40220                 | .get_ep
40220     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
40224     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
40228     0F 88 67 F0 |                 shl     hr1, #8 + 7
4022c     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
40230     3F 00 00 FF 
40234     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
40238     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
4023c     00 90 0F F2 |                 cmp     hpar2, #0               wz
40240     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
40244     00 92 0F F2 |                 cmp     hpar3, #0               wz
40248     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
4024c     A0 FF 9F FD |                 jmp     #.endp
40250                 | .in_ep
40250     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
40254     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
40258                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
40258     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
4025c     C3 8B DB F8 |                 setbyte hr2, hr0, #3
40260     8C FF 9F FD |                 jmp     #.endp
40264                 | .out_ep
40264     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
40268     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
4026c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
4026c     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
40270     C3 8D DB F8 |                 setbyte hr3, hr0, #3
40274     78 FF 9F FD |                 jmp     #.endp
40278                 | 
40278                 | .get_device
40278     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
4027c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
40280     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
40284     64 00 90 AD |         if_z    jmp     #.gamepad
40288     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
4028c     A8 00 90 AD |         if_z    jmp     #.hub
40290     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
40294     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
40298     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
4029c     4C 00 90 AD |         if_z    jmp     #.gamepad
402a0     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
402a4     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
402a8                 | .keyboard
402a8     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
402ac                 |         if HAVE_MOUSE
402ac     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
402b0                 |         else
402b0                 |         end
402b0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
402b4     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
402b8     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
402bc     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
402c0     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
402c4     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
402c8                 |                 'debug(udec(kb_intf_num))
402c8                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
402c8     E4 FE 9F FD |                 jmp     #.next_intf
402cc                 | if HAVE_MOUSE
402cc                 | .mouse
402cc     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
402d0     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
402d4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
402d8     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
402dc     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
402e0                 |                 'getbyte ms_interval, hr2, #3
402e0     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
402e4     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
402e8                 |                 'debug(udec(kb_intf_num))
402e8                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
402e8     C4 FE 9F FD |                 jmp     #.next_intf
402ec                 | end
402ec                 | .gamepad
402ec     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
402f0     C8 73 63 F5 |                 xor     htmp, hpar2
402f4     3F 00 00 FF 
402f8     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
402fc     B0 FE 9F AD |         if_z    jmp     #.next_intf
40300                 |         if HAVE_MOUSE
40300     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
40304     C8 73 63 F5 |                 xor     htmp, hpar2
40308     3F 00 00 FF 
4030c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40310     9C FE 9F AD |         if_z    jmp     #.next_intf
40314                 |         end
40314     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
40318     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
4031c     90 FE 9F 5D |         if_nz   jmp     #.next_intf
40320                 | 
40320     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
40324     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
40328     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
4032c     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
40330     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
40334                 |                 'debug(udec(gp_intf_num))
40334                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
40334     78 FE 9F FD |                 jmp     #.next_intf
40338                 | .hub
40338     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
4033c     70 FE 9F 5D |         if_nz   jmp     #.next_intf
40340     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
40344     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
40348     64 FE 9F 5D |         if_nz   jmp     #.next_intf
4034c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
40350     5C FE 9F 5D |         if_nz   jmp     #.next_intf
40354     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
40358     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
4035c     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
40360     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40364     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
40368     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
4036c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
4036c     40 FE 9F FD |                 jmp     #.next_intf
40370                 | 
40370                 | '------------------------------------------------------------------------------
40370                 | ' If a newly-connected device is recognized, do whatever is needed to configure
40370                 | ' it according to its function, or functions. In the case of this boot protocol
40370                 | ' keyboard/mouse class driver:
40370                 | ' - SetConfiguration(config_num)
40370                 | ' - SetProtocol(boot)
40370                 | ' - SetIdle(indefinite)
40370                 | ' - Enter the device interrupt IN polling task stage.
40370                 | '------------------------------------------------------------------------------
40370                 | ' On entry:
40370                 | ' On exit:
40370                 | '------------------------------------------------------------------------------
40370                 | hset_config
40370                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
40370                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
40370     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
40374     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40378     00 00 0C F2 |                 cmp     0-0, #0                 wz
4037c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
40380                 |         if HAVE_MOUSE
40380     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
40384                 |         end
40384     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
40388     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
4038c                 | .set_config
4038c     7C 0E D0 FE |                 loc     ptra, #set_config
40390     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
40394     6E ED 03 F1 |                 add     pa, hconfig_base
40398     F6 8F C3 FA |                 rdbyte  hpar1, pa
4039c     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
403a0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
403a4     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
403a8     A0 02 A0 FD |                 call    #control_write
403ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
403b0     2D 00 64 5D |         if_nz   ret
403b4                 | .kbd_config
403b4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
403b8     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
403bc                 | 
403bc     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
403c0     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
403c4     3F 00 00 FF 
403c8     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
403cc     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
403d0                 | 
403d0     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
403d4     44 0E D0 FE |                 loc     ptra, #set_protocol
403d8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
403dc     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
403e0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
403e4     A0 02 A0 FD |                 call    #control_write
403e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
403ec     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
403f0     E4 02 90 5D |         if_nz   jmp     #.notify_client
403f4     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
403f8     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
403fc     30 03 B0 FD |                 call    #hset_idle
40400                 |                 'cmp     retval, #PID_ACK        wz
40400                 |         'if_nz   mov     hkbd_ep_addr, #0
40400                 |         'if_nz   jmp     #.notify_client
40400     A9 99 02 F6 |                 mov     hctwait, _2ms_
40404     EF 02 A0 FD |                 call    #poll_waitx
40408     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
4040c     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
40410     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
40414     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
40418     2C 03 B0 FD |                 call    #hset_kbdled_report
4041c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40420     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
40424     B0 02 90 5D |         if_nz   jmp     #.notify_client
40428     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
4042c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40430     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40434     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
40438     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
4043c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
40440     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
40444     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
40448     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
4044c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
40450     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
40454                 |         if !!HAVE_MOUSE
40454                 |         end
40454                 | 
40454                 | .mouse_config
40454                 | if HAVE_MOUSE
40454     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
40458     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
4045c     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
40460     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
40464     3F 00 00 FF 
40468     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
4046c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
40470                 | 
40470                 |                 debug("mouse passed addr check")
40470                 | 
40470     C0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
40474     00 00 80 FF 
40478     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
4047c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
40480     1B 01 A0 FD |                 call    #get_hid_descr_buffer
40484     55 02 A0 FD |                 call    #control_read
40488     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4048c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
40490     44 02 90 5D |         if_nz   jmp     #.notify_client
40494     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
40498     56 01 00 F6 |                 mov     0-0, total_data
4049c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
404a0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
404a0                 | 
404a0     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
404a4     74 0D D0 FE |                 loc     ptra, #set_protocol
404a8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
404ac     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
404b0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
404b4     A0 02 A0 FD |                 call    #control_write
404b8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
404bc     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
404c0     14 02 90 5D |         if_nz   jmp     #.notify_client
404c4                 |                 debug("mouse passed SetProtocol")
404c4     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
404c8     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
404cc     60 02 B0 FD |                 call    #hset_idle
404d0                 |                 'cmp     retval, #PID_ACK        wz
404d0                 |         'if_nz   mov     hmouse_ep_addr, #0
404d0                 |         'if_nz   jmp     #.notify_client
404d0                 |                 debug("mouse passed SetIdle")
404d0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
404d4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
404d8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
404dc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
404e0     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
404e4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
404e8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
404ec     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
404f0     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
404f4     3F 00 00 FF 
404f8     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
404fc     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
40500     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
40504     D0 01 90 FD |                 jmp     #.notify_client
40508                 | end
40508                 | .gamepad_config
40508                 | if _HAVE_GAMEPAD
40508     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
4050c     00 00 0C F2 |                 cmp     0-0, #0                 wz
40510     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
40514     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
40518     00 72 03 F6 |                 mov     htmp, 0-0
4051c     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
40520     3F 00 00 FF 
40524     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40528     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
4052c                 | 
4052c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
40530     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
40534     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40538     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
4053c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
40540     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40544     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
40548     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
4054c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
40550     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40554     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40558     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
4055c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
40560     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
40564                 | 
40564                 |                 if EMUPAD_MAX_PLAYER > 0
40564                 |                 
40564                 | .rule_loop           
40564                 |                 end
40564                 | 
40564     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
40568     5C 00 90 AD |         if_e    jmp     #.xinput
4056c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
40570     00 72 03 F6 |                 mov     htmp,0-0
40574     01 A6 02 FF 
40578     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
4057c     7C 00 90 AD |         if_e    jmp     #.ps3
40580                 | 
40580     B0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
40584     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
40588     00 00 80 5F 
4058c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
40590     03 00 80 AF 
40594     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
40598     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
4059c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
405a0     55 02 A0 FD |                 call    #control_read
405a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
405a8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
405ac     00 00 04 56 |         if_nz   mov     0-0, #0
405b0     24 01 90 5D |         if_nz   jmp     #.notify_client
405b4     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
405b8     56 01 00 F6 |                 mov     0-0, total_data
405bc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
405c0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
405c0                 | 
405c0     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
405c4     10 01 90 FD |                 jmp     #.notify_client
405c8                 | .xinput
405c8     C4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
405cc     2D EF 03 F6 |                 mov     pb,hdev_port
405d0     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
405d4     03 EE 27 F3 |                 fle     pb,#3
405d8     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
405dc     02 EF 47 FC |                 wrbyte  pb, ptra[2]
405e0                 | 
405e0     03 B0 06 F6 |                 mov     pkt_data, #3
405e4     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
405e8     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
405ec     5A 00 A0 FD |                 call    #txn_out
405f0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
405f4                 | 
405f4     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
405f8     DC 00 90 FD |                 jmp     #.notify_client
405fc                 | .ps3
405fc     60 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
40600     2D EF 03 F6 |                 mov     pb,hdev_port
40604     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
40608     04 EE 27 F3 |                 fle     pb,#4
4060c     F7 EF C3 F9 |                 decod   pb
40610     09 EF 47 FC |                 wrbyte  pb, ptra[9]
40614                 | 
40614     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
40618     10 0C D0 FE |                 loc     ptra, #set_report
4061c     01 00 80 FF 
40620     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
40624     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
40628     03 61 5C FC |                 wrword  #48, ptra[wLength]
4062c     30 0C B0 FE |                 loc     pb, #ps3_command_buff
40630     A0 02 A0 FD |                 call    #control_write
40634                 | 
40634     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
40638     F0 0B D0 FE |                 loc     ptra, #set_report
4063c     01 00 80 FF 
40640     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
40644     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
40648     03 09 5C FC |                 wrword  #4, ptra[wLength]
4064c     0C 0C B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
40650     A0 02 A0 FD |                 call    #control_write
40654     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
40658     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
4065c     00 00 04 56 |         if_nz   mov     0-0, #0
40660     74 00 90 5D |         if_nz   jmp     #.notify_client
40664                 | 
40664     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
40668     6C 00 90 FD |                 jmp     #.notify_client
4066c                 | end
4066c                 | 
4066c                 | .hub_config
4066c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
40670     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
40674     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
40678     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
4067c     3F 00 00 FF 
40680     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40684     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
40688                 | 
40688     B0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
4068c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
40690     26 EF 03 F6 |                 mov     pb, hub_descr_p
40694     55 02 A0 FD |                 call    #control_read
40698     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4069c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
406a0     34 00 90 5D |         if_nz   jmp     #.notify_client
406a4                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
406a4                 | 
406a4     26 F1 03 F6 |                 mov     ptra, hub_descr_p
406a8     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
406ac     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
406b0                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
406b0                 | .pwr_loop
406b0     90 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
406b4     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
406b8     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
406bc     A0 02 A0 FD |                 call    #control_write
406c0     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
406c4                 | 
406c4     B2 99 02 F6 |                 mov     hctwait, _500ms_
406c8     B1 99 02 F1 |                 add     hctwait, _100ms_
406cc     EF 02 A0 FD |                 call    #poll_waitx
406d0                 | 
406d0     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
406d4     00 00 90 FD |                 jmp     #.notify_client
406d8                 | 
406d8                 | .notify_client
406d8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
406dc     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
406e0                 |                 debug(uhex_long(hdev_type,hdev_type+1))
406e0                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
406e0     2D 00 64 FD |                 ret
406e4                 | 
406e4                 | '------------------------------------------------------------------------------
406e4                 | ' Initialize the keyboard/mouse data area to start-up values.
406e4                 | '------------------------------------------------------------------------------
406e4                 | ' On entry:
406e4                 | ' On exit:
406e4                 | '------------------------------------------------------------------------------
406e4                 | init_kbdm_data
406e4     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
406e8     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
406ec                 | 
406ec     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
406f0     2B ED 03 F6 |                 mov     pa, cache_end_p
406f4                 | .loop
406f4     61 01 4C FC |                 wrbyte  #0, ptra++
406f8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
406fc     F4 FF 9F CD |         if_b    jmp     #.loop
40700                 |         
40700                 |         if EMUPAD_MAX_PLAYER > 0
40700                 |         end
40700                 | 
40700                 | 
40700     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
40704                 | .regloop
40704     00 EC 8F F9 |                 altd    pa
40708     00 00 04 F6 |                 mov     0-0, #0
4070c     01 EC 07 F1 |                 add     pa, #1
40710     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
40714     EC FF 9F 5D |         if_nz   jmp     #.regloop
40718                 | 
40718     E1 E1 61 FF 
4071c     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
40720     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
40724     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
40728     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
4072c                 | 
4072c     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
40730                 | 
40730                 | '------------------------------------------------------------------------------
40730                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
40730                 | ' function.
40730                 | '------------------------------------------------------------------------------
40730                 | ' On entry:
40730                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
40730                 | '   hpar2 - index number of the target interface.
40730                 | ' On exit:
40730                 | '------------------------------------------------------------------------------
40730                 | hset_idle
40730     A9 99 02 F6 |                 mov     hctwait, _2ms_
40734     EF 02 A0 FD |                 call    #poll_waitx
40738     E8 0A D0 FE |                 loc     ptra, #set_idle
4073c     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
40740     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
40744     A0 02 80 FD |                 jmp     #control_write
40748                 | 
40748                 | '------------------------------------------------------------------------------
40748                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
40748                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
40748                 | '------------------------------------------------------------------------------
40748                 | ' On entry:
40748                 | '   ep_addr_pid - device address and enpoint for the request.
40748                 | ' On exit:
40748                 | '   retval - transaction result.
40748                 | '------------------------------------------------------------------------------
40748                 | hset_kbdled_report
40748     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
4074c     DC 0A D0 FE |                 loc     ptra, #set_report
40750     01 00 80 FF 
40754     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
40758     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
4075c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
40760     27 EF 03 F6 |                 mov     pb, urx_buff_p
40764     F7 77 42 FC |                 wrbyte  kb_led_states, pb
40768     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
4076c                 | 
4076c                 | '------------------------------------------------------------------------------
4076c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
4076c                 | '------------------------------------------------------------------------------
4076c                 | ' On entry:
4076c                 | ' On exit:
4076c                 | '------------------------------------------------------------------------------
4076c                 | hget_kbd_in_report
4076c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
40770     27 91 03 F6 |                 mov     hpar2, urx_buff_p
40774     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
40778     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
4077c     CF 02 A0 FD |                 call    #do_int_in
40780     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40784     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
40788                 | 
40788     00 92 0F F2 |                 cmp     hpar3, #0               wz
4078c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
40790                 | 
40790     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
40794     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
40798     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
4079c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
407a0                 | 
407a0     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
407a4     18 00 B0 FD |                 call    #hkbd_compare
407a8                 |         if EMUPAD_MAX_PLAYER > 0
407a8                 |         end
407a8                 | 
407a8                 | .led_check
407a8     3B 73 03 F6 |                 mov     htmp, kb_led_states
407ac     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
407b0     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
407b4     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
407b8     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
407bc     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
407c0                 | 
407c0                 | '------------------------------------------------------------------------------
407c0                 | ' Compare current and previous keyboard data buffers for keypress changes.
407c0                 | '------------------------------------------------------------------------------
407c0                 | hkbd_compare
407c0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
407c4     E4 13 F0 FE |                 loc     ptrb, #hkbd_report
407c8     61 75 07 FB |                 rdlong  htmp1, ptra++
407cc     E1 77 07 FB |                 rdlong  htmp2, ptrb++
407d0     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
407d4     61 75 07 FB |                 rdlong  htmp1, ptra++
407d8     E1 77 07 FB |                 rdlong  htmp2, ptrb++
407dc     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
407e0     2D 00 64 AD |         if_z    ret
407e4                 | 
407e4     C4 13 D0 FE |                 loc     ptra, #hkbd_report
407e8                 | 
407e8                 |                 ' Handle modifiers
407e8     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
407ec     00 89 C7 FA |                 rdbyte  hr1, ptra
407f0     C8 89 43 F9 |                 rolword hr1,hpar2,#0
407f4     63 88 63 FD |                 mergew  hr1
407f8     08 EC 07 F6 |                 mov     pa,#8
407fc                 | .modloop
407fc     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
40800     E8 8E 07 F6 |                 mov     hpar1,#$E8
40804     F6 8F 83 F1 |                 sub     hpar1,pa
40808     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
4080c     FB ED 6F FB |                 djnz    pa,#.modloop
40810                 | 
40810     6F E0 75 FD | .release        modc    _set    wc
40814                 |                 'alts    hdev_port, #hid_report_p
40814                 |                 'mov     ptra, hid_report_p
40814     02 F0 07 F1 |                 add     ptra, #2
40818     06 EC 07 F6 |                 mov     pa, #6
4081c     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
40820     20 00 90 AD |         if_z    jmp     #.rl3
40824     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
40828     02 F2 07 F1 |                 add     ptrb, #2
4082c     06 EE 07 F6 |                 mov     pb, #6
40830     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
40834     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
40838     08 00 90 AD |         if_z    jmp     #.rl3
4083c     FC EF 6F FB |                 djnz    pb, #.rl2
40840     68 00 B0 FD |                 call    #hkbd_translate
40844     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
40848                 | 
40848     00 92 07 F6 |                 mov     hpar3, #0
4084c     1F 92 27 F4 |                 bith    hpar3, #31
40850                 | 
40850     6F 00 74 FD | .press          modc    _clr    wc
40854     27 F1 03 F6 |                 mov     ptra, urx_buff_p
40858     02 F0 07 F1 |                 add     ptra, #2
4085c     06 EC 07 F6 |                 mov     pa, #6
40860     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
40864     20 00 90 AD |         if_z    jmp     #.pl3
40868     40 13 F0 FE |                 loc     ptrb, #hkbd_report
4086c     02 F2 07 F1 |                 add     ptrb, #2
40870     06 EE 07 F6 |                 mov     pb, #6
40874     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
40878     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
4087c     08 00 90 AD |         if_z    jmp     #.pl3
40880     FC EF 6F FB |                 djnz    pb, #.pl2
40884     24 00 B0 FD |                 call    #hkbd_translate
40888     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
4088c                 | 
4088c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
40890     18 13 F0 FE |                 loc     ptrb, #hkbd_report
40894     28 02 64 FD |                 setq #1
40898     61 75 07 FB |                 rdlong  htmp1, ptra++
4089c     28 02 64 FD |                 setq #1
408a0     E1 75 67 FC |                 wrlong  htmp1, ptrb++
408a4     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
408a8                 | 
408a8     2D 00 64 FD |                 ret
408ac                 | 
408ac                 | '------------------------------------------------------------------------------
408ac                 | ' Translate keyboard scancode to ASCII
408ac                 | '------------------------------------------------------------------------------
408ac                 | ' On entry:
408ac                 | '   hpar1 - scancode
408ac                 | '   hpar2 - key modifiers state
408ac                 | '       c - pressed (0) or released (1) flag
408ac                 | ' On exit:
408ac                 | '   hpar1 - bit     31 = 0 pressed, 1 released
408ac                 | '               30..17 = unused
408ac                 | '                   18 = scroll-lock state 
408ac                 | '                   17 = caps-lock state
408ac                 | '                   16 = num-lock state 
408ac                 | '                15..8 = key modifiers state
408ac                 | '                 7..0 = scancode
408ac                 | '------------------------------------------------------------------------------
408ac                 | hkbd_translate
408ac     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
408b0     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
408b4     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
408b8     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
408bc     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
408c0     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
408c4                 | 
408c4                 |         if EMUPAD_MAX_PLAYER > 0
408c4                 | 
408c4                 |         if EMUPAD_BT0_BIT >= 0
408c4                 |         end
408c4                 |         if EMUPAD_BT1_BIT >= 0
408c4                 |         end
408c4                 |         if EMUPAD_BT2_BIT >= 0
408c4                 |         end
408c4                 |         if EMUPAD_BT3_BIT >= 0
408c4                 |         end
408c4                 |         if EMUPAD_BT4_BIT >= 0
408c4                 |         end
408c4                 |         if EMUPAD_BT5_BIT >= 0
408c4                 |         end
408c4                 |         if EMUPAD_BT6_BIT >= 0
408c4                 |         end
408c4                 |         if EMUPAD_BT7_BIT >= 0
408c4                 |         end
408c4                 |         if EMUPAD_BT8_BIT >= 0
408c4                 |         end
408c4                 |         if EMUPAD_BT9_BIT >= 0
408c4                 |         end
408c4                 | 
408c4                 |         end
408c4     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
408c8     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
408cc     1F 8E 47 F4 |                 bitc    hpar1, #31
408d0                 |         if KEYQUEUE_SIZE > 0
408d0     D4 09 B0 FE |                 loc pb,#keyq_head
408d4     F7 73 E3 FA |                 rdword htmp,pb
408d8     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
408dc     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
408e0     B9 77 03 F6 |                 mov htmp2,htmp
408e4     04 76 07 FA |                 mul htmp2,#4
408e8     F7 77 03 F1 |                 add htmp2,pb
408ec     02 76 07 F1 |                 add htmp2,#2
408f0     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
408f4     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
408f8     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
408fc     F7 73 43 5C |         if_nz   wrbyte htmp,pb
40900                 |         end
40900     2D 00 7C FD |                 ret wcz
40904                 | 
40904                 | if HAVE_MOUSE
40904                 | '------------------------------------------------------------------------------
40904                 | ' Execute an IN interrupt transaction to poll for mouse activity.
40904                 | '------------------------------------------------------------------------------
40904                 | ' On entry:
40904                 | ' On exit:
40904                 | '------------------------------------------------------------------------------
40904                 | hget_mouse_in_report
40904     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
40908     27 91 03 F6 |                 mov     hpar2, urx_buff_p
4090c     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
40910     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
40914     CF 02 A0 FD |                 call    #do_int_in
40918     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4091c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
40920                 | 
40920     00 92 0F F2 |                 cmp     hpar3, #0               wz
40924     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
40928                 | 
40928     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
4092c     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
40930     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
40934     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
40938                 | 
40938     27 F1 03 F6 |                 mov     ptra, urx_buff_p
4093c     05 92 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
40940     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
40944     01 92 87 31 |         if_ae   sub     hpar3, #1
40948                 | 
40948     50 09 90 FE |                 loc     pa, #mouse_limits
4094c     65 13 F0 FE |                 loc     ptrb, #mouse_xacc
40950                 | 
40950                 |                 ' load xacc,yacc,zacc
40950     28 04 64 FD |                 setq    #3-1
40954     80 89 07 FB |                 rdlong  hr1,ptrb
40958                 |                 ' load limits and outptr
40958     28 04 64 FD |                 setq    #3-1
4095c     F6 75 03 FB |                 rdlong  htmp1,pa
40960                 | 
40960     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
40964     8C 73 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
40968     00 72 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
4096c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
40970     01 72 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
40974     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
40978     02 72 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
4097c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
40980                 |               
40980                 | 
40980     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
40984     07 72 67 F7 |                 signx   htmp, #7
40988     B9 89 03 F1 |                 add     hr1,htmp
4098c     00 74 0F F2 |                 cmp     htmp1,#0 wz
40990     BA 89 63 53 |         if_ne   fles    hr1,htmp1
40994     00 88 47 53 |         if_ne   fges    hr1,#0
40998                 | 
40998     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
4099c     07 72 67 F7 |                 signx   htmp, #7
409a0     B9 8B 03 F1 |                 add     hr2,htmp
409a4     00 76 0F F2 |                 cmp     htmp2,#0 wz
409a8     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
409ac     00 8A 47 53 |         if_ne   fges    hr2,#0
409b0                 |                 
409b0                 | 
409b0     04 92 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
409b4     00 73 C7 AA |         if_z    rdbyte  htmp, ptra
409b8     07 72 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
409bc     B9 8D 03 A1 |         if_z    add     hr3,htmp
409c0                 | 
409c0     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
409c4     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
409c8                 | 
409c8                 |                 ' write back accumulators
409c8     28 04 64 FD |                 setq    #3-1
409cc     80 89 67 FC |                 wrlong  hr1,ptrb
409d0                 |                 ' if outptr set, write X/Y words
409d0     00 78 0F F2 |                 cmp htmp3,#0                    wz
409d4     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
409d8     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
409dc     2D 00 64 FD |                 ret
409e0                 | end
409e0                 | 
409e0                 | '------------------------------------------------------------------------------
409e0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
409e0                 | '------------------------------------------------------------------------------
409e0                 | ' On entry:
409e0                 | ' On exit:
409e0                 | '------------------------------------------------------------------------------
409e0                 | if _HAVE_GAMEPAD
409e0                 | hget_gp_in_report
409e0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
409e4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
409e8                 | 
409e8     27 91 03 F6 |                 mov     hpar2, urx_buff_p
409ec     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
409f0     00 92 E3 F8 |                 getbyte hpar3
409f4     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
409f8     CF 02 A0 FD |                 call    #do_int_in
409fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40a00     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
40a04                 | 
40a04     00 92 0F F2 |                 cmp     hpar3, #0               wz
40a08     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
40a0c                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
40a0c                 | 
40a0c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
40a10     00 72 E3 F8 |                 getbyte htmp                            ' |
40a14     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
40a18     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
40a1c     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
40a20     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
40a24     B9 01 C0 F8 |                 setbyte htmp                            ' |
40a28                 | 
40a28                 | ' Note: the following code compares the current and previous reports
40a28                 | ' and process the data if there are changes to ease the debug output.
40a28                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
40a28                 | ' gpPreReport buffer.
40a28                 | 
40a28                 |                 ' ----- start of block to remove
40a28                 |                 {
40a28                 |                 }
40a28                 |                 ' ----- end of block to remove
40a28     04 05 90 FE |                 loc pa,#hpad_translate
40a2c     2A EC 63 FD |                 push pa
40a30                 | 
40a30                 |                 ' FALL THROUGH !!!!
40a30                 | 
40a30                 | '------------------------------------------------------------------------------
40a30                 | ' Decode controller report
40a30                 | '------------------------------------------------------------------------------
40a30                 | hid_decode
40a30                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
40a30     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
40a34     00 04 00 FF 
40a38     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
40a3c                 | 
40a3c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
40a40                 | 
40a40     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
40a44     00 1C E3 F8 |                 getbyte hidr_type
40a48     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
40a4c     44 02 90 AD |         if_z    jmp     #hpad_xinput
40a50     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
40a54     2C 03 90 AD |         if_z    jmp     #hpad_ps3
40a58     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
40a5c     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
40a60     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
40a64                 |                 
40a64                 | 
40a64                 | '------------------------------------------------------------------------------
40a64                 | ' Handle HID controller (or mouse now
40a64                 | ' On entry:
40a64                 | '   ptrb - controller report
40a64                 | '------------------------------------------------------------------------------
40a64                 | hpad_hid
40a64     1B 01 A0 FD |                 call    #get_hid_descr_buffer
40a68     F7 F1 03 F6 |                 mov     ptra, pb
40a6c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
40a70     00 EC 03 F6 |                 mov     pa, 0-0
40a74                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
40a74     19 2A 3B FF 
40a78     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
40a7c                 | 
40a7c                 | .next
40a7c     00 EC 5F F2 |                 cmps    pa, #0      wcz
40a80     2D 00 7C ED |         if_be   ret     wcz
40a84                 | 
40a84     61 8F C7 FA |                 rdbyte  hpar1, ptra++
40a88     01 EC 87 F1 |                 sub     pa, #1
40a8c     00 90 07 F6 |                 mov     hpar2, #0
40a90                 | 
40a90     C7 73 03 F6 |                 mov     htmp, hpar1
40a94     03 72 07 F5 |                 and     htmp, #$03
40a98     01 72 0F F2 |                 cmp     htmp, #1    wz
40a9c     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
40aa0     07 90 67 A7 |         if_z    signx   hpar2,#7
40aa4     01 EC 87 A1 |         if_z    sub     pa, #1
40aa8     02 72 0F F2 |                 cmp     htmp, #2    wz
40aac     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
40ab0     0F 90 67 A7 |         if_z    signx   hpar2,#15
40ab4     02 EC 87 A1 |         if_z    sub     pa, #2
40ab8     03 72 0F F2 |                 cmp     htmp, #3    wz
40abc     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
40ac0     04 EC 87 A1 |         if_z    sub     pa, #4
40ac4                 | 
40ac4     FC 8E 07 F5 |                 and     hpar1, #$FC
40ac8                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
40ac8                 | 
40ac8     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
40acc     18 01 90 AD |         if_z    jmp     #.report_id
40ad0     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
40ad4     30 01 90 AD |         if_z    jmp     #.usage_page
40ad8     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
40adc     38 01 90 AD |         if_z    jmp     #.usage
40ae0     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
40ae4     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
40ae8     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
40aec     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
40af0     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
40af4     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
40af8     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
40afc     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
40b00     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
40b04     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
40b08     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
40b0c     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
40b10     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
40b14     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
40b18     60 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
40b1c     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
40b20     58 FF 9F 5D |         if_nz   jmp     #.next
40b24                 | 
40b24     D5 25 A7 FB |                 tjf     hidr_state,#.next
40b28                 | 
40b28     03 90 07 F5 |                 and     hpar2, #$03
40b2c     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
40b30     18 00 90 5D |         if_nz   jmp     #.skip
40b34                 | 
40b34     02 24 0F F2 |                 cmp     hidr_state, #2  wz
40b38     20 00 90 AD |         if_z    jmp     #.axes
40b3c     03 24 0F F2 |                 cmp     hidr_state, #3  wz
40b40     5C 00 90 AD |         if_z    jmp     #.hats
40b44     04 24 0F F2 |                 cmp     hidr_state, #4  wz
40b48     70 00 90 AD |         if_z    jmp     #.buttons
40b4c                 | .skip
40b4c     93 73 03 F6 |                 mov     htmp, hidr_size
40b50     94 73 03 FA |                 mul     htmp, hidr_count
40b54     B9 21 03 F1 |                 add     hidr_offset, htmp
40b58     20 FF 9F FD |                 jmp     #.next
40b5c                 | .axes
40b5c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
40b5c     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
40b60     94 89 03 F6 |                 mov     hr1, hidr_count
40b64                 | .l1
40b64     90 8F 03 F6 |                 mov     hpar1, hidr_offset
40b68     93 91 03 F6 |                 mov     hpar2, hidr_size
40b6c     08 03 B0 FD |                 call    #hpad_getbits
40b70     68 03 B0 FD |                 call    #hpad_normalize
40b74     08 86 1F F2 |                 cmp     hr0, #8         wcz
40b78     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
40b7c     00 8A 43 C8 |         if_b    getnib  hr2
40b80     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
40b84     5F 01 20 C9 |         if_b    setword retval
40b88     01 86 07 C1 |         if_b    add     hr0, #1
40b8c     93 21 03 F1 |                 add     hidr_offset, hidr_size
40b90     F4 89 6F FB |                 djnz    hr1, #.l1
40b94                 | 
40b94     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
40b98     01 24 07 F6 |                 mov     hidr_state, #1
40b9c     DC FE 9F FD |                 jmp     #.next
40ba0                 | .hats
40ba0                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
40ba0     90 8F 03 F6 |                 mov     hpar1, hidr_offset
40ba4     93 91 03 F6 |                 mov     hpar2, hidr_size
40ba8     CC 02 B0 FD |                 call    #hpad_getbits
40bac     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
40bb0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
40bb4     01 24 07 F6 |                 mov     hidr_state, #1
40bb8     90 FF 9F FD |                 jmp     #.skip
40bbc                 | .buttons
40bbc                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
40bbc     90 8F 03 F6 |                 mov     hpar1, hidr_offset
40bc0     93 91 03 F6 |                 mov     hpar2, hidr_size
40bc4     94 91 03 FA |                 mul     hpar2, hidr_count
40bc8     AC 02 B0 FD |                 call    #hpad_getbits
40bcc     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
40bd0     B9 BF 62 F0 |                 shl     retval, htmp
40bd4     5F 19 43 F5 |                 or      hidr_buttons, retval
40bd8     94 73 03 F1 |                 add     htmp, hidr_count
40bdc     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
40be0     01 24 07 F6 |                 mov     hidr_state, #1
40be4     64 FF 9F FD |                 jmp     #.skip
40be8                 | .report_id
40be8     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
40bec     2D 00 7C 5D |         if_nz   ret     wcz
40bf0     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
40bf4     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
40bf8     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
40bfc     01 24 67 56 |         if_nz   neg     hidr_state,#1
40c00     01 F2 87 51 |         if_nz   sub     ptrb,#1
40c04     74 FE 9F FD |                 jmp     #.next
40c08                 | .usage_page
40c08     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
40c0c     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
40c10     04 24 07 A6 |         if_z    mov     hidr_state, #4
40c14     64 FE 9F FD |                 jmp     #.next
40c18                 | .usage
40c18     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
40c1c     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
40c20     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
40c24     01 24 07 A6 |         if_z    mov     hidr_state, #1
40c28     50 FE 9F AD |         if_z    jmp     #.next
40c2c     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
40c30     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
40c34     01 24 07 A6 |         if_z    mov     hidr_state, #1
40c38     40 FE 9F AD |         if_z    jmp     #.next
40c3c     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
40c40     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
40c44     10 00 90 3D |         if_nc   jmp     #.usage_axis
40c48     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
40c4c     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
40c50     03 24 07 A6 |         if_z    mov     hidr_state, #3
40c54     24 FE 9F FD |                 jmp     #.next
40c58                 | .usage_axis
40c58     01 24 57 F2 |                 cmps    hidr_state, #1          wc
40c5c     1C FE 9F CD |         if_b    jmp     #.next
40c60     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
40c64     C8 01 00 F8 |                 setnib  hpar2
40c68                 | 
40c68     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
40c6c     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
40c70                 | 
40c70     01 22 07 F1 |                 add     hidr_usage_idx, #1
40c74     02 24 07 F6 |                 mov     hidr_state, #2
40c78     00 FE 9F FD |                 jmp     #.next
40c7c                 | .pushpop
40c7c                 |                 ' Entering with C set if PUSH  
40c7c     38 0F B0 FE |                 loc     pb, #hid_stack
40c80     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
40c84     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
40c88     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
40c8c     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
40c90     E8 FD 9F FD |                 jmp     #.next
40c94                 |         
40c94                 | 
40c94                 | '------------------------------------------------------------------------------
40c94                 | ' Handle XInput controller
40c94                 | ' On entry:
40c94                 | '   ptrb - controller report
40c94                 | '------------------------------------------------------------------------------
40c94                 | '   Default implementation translates the report to a pseudo-defacto hid
40c94                 | '   standard and jumps to hpad_translate for actions.
40c94                 | '   Implementors may take specific actions for this kind of controller.
40c94                 | '------------------------------------------------------------------------------
40c94                 | hpad_xinput
40c94     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
40c98     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
40c9c     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
40ca0     14 72 0F F2 |                 cmp     htmp, #$14      wz
40ca4     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
40ca8                 | 
40ca8                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
40ca8                 | 
40ca8     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
40cac     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
40cb0                 | 
40cb0     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
40cb4     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
40cb8     5F BF 22 F6 |                 not     retval
40cbc     5F 11 2B F9 |                 setword hidr_axis, retval, #1
40cc0     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
40cc4     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
40cc8     5F BF 22 F6 |                 not     retval
40ccc     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
40cd0                 | 
40cd0     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
40cd4     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
40cd8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
40cdc     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
40ce0     F8 01 B0 FD |                 call    #hpad_normalize
40ce4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
40ce8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
40cec     C0 BE 1E F2 |                 cmp     retval, #192    wcz
40cf0     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
40cf4     E4 01 B0 FD |                 call    #hpad_normalize
40cf8     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
40cfc                 | 
40cfc     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
40d00     81 BF E6 FA |                 rdword  retval, ptrb[1]
40d04     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
40d08     00 18 47 F4 |                 bitc    hidr_buttons, #0
40d0c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
40d10     01 18 47 F4 |                 bitc    hidr_buttons, #1
40d14     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
40d18     02 18 47 F4 |                 bitc    hidr_buttons, #2
40d1c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
40d20     03 18 47 F4 |                 bitc    hidr_buttons, #3
40d24     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
40d28     04 18 47 F4 |                 bitc    hidr_buttons, #4
40d2c     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
40d30     05 18 47 F4 |                 bitc    hidr_buttons, #5
40d34     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
40d38     08 18 47 F4 |                 bitc    hidr_buttons, #8
40d3c     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
40d40     09 18 47 F4 |                 bitc    hidr_buttons, #9
40d44     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
40d48     0A 18 47 F4 |                 bitc    hidr_buttons, #10
40d4c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
40d50     0B 18 47 F4 |                 bitc    hidr_buttons, #11
40d54     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
40d58     0C 18 47 F4 |                 bitc    hidr_buttons, #12
40d5c                 | 
40d5c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
40d60     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
40d64     7A BB 7A FF 
40d68     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
40d6c     F9 FF 7F FF 
40d70     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
40d74     BA 73 5F F9 |                 altgn   htmp, #htmp1
40d78     00 72 43 F8 |                 getnib  htmp
40d7c     B9 1B C3 F8 |                 setbyte hidr_hats, htmp, #0
40d80                 | 
40d80     AC 01 90 FD |                 jmp     #hpad_translate
40d84                 | 
40d84                 | '------------------------------------------------------------------------------
40d84                 | ' Handle PS3 controller
40d84                 | ' On entry:
40d84                 | '   ptrb - controller report
40d84                 | '------------------------------------------------------------------------------
40d84                 | '   Default implementation translates the report to a pseudo-defacto hid
40d84                 | '   standard and jumps to hpad_translate for actions.
40d84                 | '   Implementors may take specific actions for this kind of controller.
40d84                 | '------------------------------------------------------------------------------
40d84                 | hpad_ps3
40d84     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
40d88     01 72 0F F2 |                 cmp     htmp, #$01      wz
40d8c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
40d90                 | 
40d90                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
40d90                 | 
40d90     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
40d94     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
40d98     40 01 B0 FD |                 call    #hpad_normalize
40d9c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
40da0     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
40da4     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
40da8     30 01 B0 FD |                 call    #hpad_normalize
40dac     5F 11 2B F9 |                 setword hidr_axis, retval, #1
40db0     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
40db4     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
40db8     20 01 B0 FD |                 call    #hpad_normalize
40dbc     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
40dc0     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
40dc4     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
40dc8     10 01 B0 FD |                 call    #hpad_normalize
40dcc     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
40dd0     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
40dd4     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
40dd8                 | 
40dd8     08 8E 07 F6 |                 mov     hpar1, #8
40ddc     13 90 07 F6 |                 mov     hpar2, #19
40de0     94 00 B0 FD |                 call    #hpad_getbits
40de4                 | 
40de4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
40de8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
40dec     00 18 47 F4 |                 bitc    hidr_buttons, #0
40df0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
40df4     01 18 47 F4 |                 bitc    hidr_buttons, #1
40df8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
40dfc     02 18 47 F4 |                 bitc    hidr_buttons, #2
40e00     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
40e04     03 18 47 F4 |                 bitc    hidr_buttons, #3
40e08     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
40e0c     04 18 47 F4 |                 bitc    hidr_buttons, #4
40e10     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
40e14     05 18 47 F4 |                 bitc    hidr_buttons, #5
40e18     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
40e1c     06 18 47 F4 |                 bitc    hidr_buttons, #6
40e20     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
40e24     07 18 47 F4 |                 bitc    hidr_buttons, #7
40e28     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
40e2c     08 18 47 F4 |                 bitc    hidr_buttons, #8
40e30     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
40e34     09 18 47 F4 |                 bitc    hidr_buttons, #9
40e38     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
40e3c     0A 18 47 F4 |                 bitc    hidr_buttons, #10
40e40     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
40e44     0B 18 47 F4 |                 bitc    hidr_buttons, #11
40e48     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
40e4c     0C 18 47 F4 |                 bitc    hidr_buttons, #12
40e50                 | 
40e50     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
40e54     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
40e58     09 FA 79 FF 
40e5c     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
40e60     FF FA 7F FF 
40e64     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
40e68     BA 73 5F F9 |                 altgn   htmp, #htmp1
40e6c     00 72 43 F8 |                 getnib  htmp
40e70     B9 1B C3 F8 |                 setbyte hidr_hats, htmp, #0
40e74                 | 
40e74     B8 00 90 FD |                 jmp     #hpad_translate
40e78                 | 
40e78                 | '------------------------------------------------------------------------------
40e78                 | ' Read bits from report data buffer
40e78                 | '------------------------------------------------------------------------------
40e78                 | ' On entry:
40e78                 | '   PTRB - report buffer
40e78                 | '   hpar1 - start bit
40e78                 | '   hpar2 - number of bits
40e78                 | ' On exit:
40e78                 | '   retval - bits
40e78                 | '------------------------------------------------------------------------------
40e78                 | hpad_getbits
40e78     C7 73 03 F6 |                 mov     htmp, hpar1
40e7c     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
40e80     F9 73 03 F1 |                 add     htmp, ptrb
40e84     B9 BF 02 FB |                 rdlong  retval, htmp
40e88                 | 
40e88     C7 75 03 F6 |                 mov     htmp1, hpar1
40e8c     07 74 07 F5 |                 and     htmp1, #$07     ' shift
40e90     BA BF 42 F0 |                 shr     retval, htmp1
40e94                 | 
40e94     18 90 1F F2 |                 cmp     hpar2, #24      wcz
40e98     10 00 90 1D |         if_a    jmp     #.l1
40e9c                 | 
40e9c     C8 91 C3 F9 |                 decod   hpar2
40ea0     01 90 87 F1 |                 sub     hpar2, #1
40ea4     C8 BF 02 F5 |                 and     retval, hpar2
40ea8     2D 00 64 FD |                 ret
40eac                 | .l1
40eac     FF 7F 00 FF 
40eb0     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
40eb4     03 72 07 F1 |                 add     htmp, #3
40eb8     B9 77 03 FB |                 rdlong  htmp2, htmp
40ebc     18 90 87 F1 |                 sub     hpar2, #24
40ec0     C8 91 C3 F9 |                 decod   hpar2
40ec4     01 90 87 F1 |                 sub     hpar2, #1
40ec8     BA 77 43 F0 |                 shr     htmp2, htmp1
40ecc     C8 77 03 F5 |                 and     htmp2, hpar2
40ed0     18 76 67 F0 |                 shl     htmp2, #24
40ed4     BB BF 42 F5 |                 or      retval, htmp2
40ed8     2D 00 64 FD |                 ret
40edc                 | 
40edc                 | '------------------------------------------------------------------------------
40edc                 | ' Normalize value to signed word (-32768 / 32767)
40edc                 | '------------------------------------------------------------------------------
40edc                 | ' On entry:
40edc                 | '   retval - value to normalize
40edc                 | '   hidr_lminmax - min (word 1) max (word 0) value range
40edc                 | '   - or -
40edc                 | '   hidr_pminmax - min (word 1) max (word 0) value range
40edc                 | '   hidr_size - value bits length
40edc                 | ' On exit:
40edc                 | '   retval - normalized value
40edc                 | '------------------------------------------------------------------------------
40edc                 | hpad_normalize
40edc     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
40ee0     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
40ee4     2D 00 64 AD |         if_z    ret
40ee8     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
40eec     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
40ef0     0F 74 77 F7 |                 signx   htmp1, #15      wc
40ef4     FF 27 97 C9 |         if_c    alts    hidr_size, #511
40ef8     00 BE 66 C7 |         if_c    signx   retval, #0-0
40efc     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
40f00     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
40f04     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
40f08     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
40f0c     B9 73 53 F6 |                 abs     htmp            wc
40f10     1F BE 0E F4 |                 testb   retval, #31     wz
40f14     5F BF 42 F6 |                 abs     retval
40f18     B9 BF 12 FD |                 qdiv    retval, htmp
40f1c     18 BE 62 FD |                 getqx   retval
40f20     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
40f24     C0 FF 7F FF 
40f28     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
40f2c     2D 00 64 FD |                 ret
40f30                 | 
40f30                 | '------------------------------------------------------------------------------
40f30                 | ' Perform controller actions
40f30                 | ' On entry:
40f30                 | '    hidr_id        report id
40f30                 | '    hidr_axis      axis value (signed word, 2 axes per long)
40f30                 | '                      X = hidr_axis+0, #0
40f30                 | '                      Y = hidr_axis+0, #1
40f30                 | '                      Z = hidr_axis+1, #0
40f30                 | '                     RX = hidr_axis+1, #1
40f30                 | '                     RY = hidr_axis+2, #0
40f30                 | '                     RZ = hidr_axis+2, #1
40f30                 | '                     Sl = hidr_axis+3, #0
40f30                 | '                     Wh = hidr_axis+3, #1
40f30                 | '    hidr_buttons   buttons state (bits 0 to 31)
40f30                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
40f30                 | '
40f30                 | '                     -------3 -------2 -------1 -------0 byte
40f30                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
40f30                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
40f30                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
40f30                 | '                              |||||||| ||||++++--------- n. axes
40f30                 | '                              |||||||| ++++------------- n. hats
40f30                 | '                              ++++++++------------------ valid axes
40f30                 | '------------------------------------------------------------------------------
40f30                 | hpad_translate
40f30                 | 
40f30                 | 
40f30                 |         if HAVE_HIDPAD
40f30     98 0C F0 FE |                 loc     ptrb,#hidpad_report
40f34     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
40f38     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
40f3c     01 72 E7 F2 |                 cmpsub  htmp,#1
40f40     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
40f44     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
40f48     2D 00 7C 3D |         if_ae   ret     wcz
40f4c     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
40f50     B9 F3 03 F1 |                 add     ptrb,htmp
40f54     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
40f58     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
40f5c     28 0E 64 FD |                 setq    #8-1
40f60     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
40f64                 |         end
40f64                 | 
40f64                 | 
40f64                 |         if EMUPAD_MAX_PLAYER > 0
40f64                 | .emupad_no_hat
40f64                 |         if EMUPAD_BT0_BIT >= 0
40f64                 |         end
40f64                 |         if EMUPAD_BT1_BIT >= 0
40f64                 |         end
40f64                 |         if EMUPAD_BT2_BIT >= 0
40f64                 |         end
40f64                 |         if EMUPAD_BT3_BIT >= 0
40f64                 |         end
40f64                 |         if EMUPAD_BT4_BIT >= 0
40f64                 |         end
40f64                 |         if EMUPAD_BT5_BIT >= 0
40f64                 |         end
40f64                 |         if EMUPAD_BT6_BIT >= 0
40f64                 |         end
40f64                 |         if EMUPAD_BT7_BIT >= 0
40f64                 |         end
40f64                 |         if EMUPAD_BT8_BIT >= 0
40f64                 |         end
40f64                 |         if EMUPAD_BT9_BIT >= 0
40f64                 |         end
40f64                 | .emupad_slot_over
40f64                 |         end
40f64                 | 
40f64                 |         if 0
40f64                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
40f64                 | 
40f64                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
40f64                 | 
40f64                 |         end
40f64     2D 00 64 FD |                 ret
40f68                 | end
40f68                 | 
40f68                 | if EMUPAD_MAX_PLAYER > 0
40f68                 | '------------------------------------------------------------------------------
40f68                 | ' Clear EmuPad state
40f68                 | '------------------------------------------------------------------------------
40f68                 | emupad_reset
40f68                 | 
40f68                 | '------------------------------------------------------------------------------
40f68                 | ' Get EmuPad Player number for current device (into retval)
40f68                 | ' Z flag is also set if current device is valid
40f68                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
40f68                 | '------------------------------------------------------------------------------
40f68                 | emupad_getnum
40f68                 | .loop
40f68                 | '------------------------------------------------------------------------------
40f68                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
40f68                 | '------------------------------------------------------------------------------
40f68                 | emupad_discon
40f68                 | .loop         
40f68                 |         
40f68                 |         ' FALL THROUGH!!!
40f68                 | 
40f68                 | '------------------------------------------------------------------------------
40f68                 | ' Update EmuPad reports (all of them...)
40f68                 | '------------------------------------------------------------------------------
40f68                 | emupad_write_reports
40f68                 | .devloop
40f68                 | 
40f68                 | end
40f68                 | 
40f68                 | 
40f68                 | '------------------------------------------------------------------------------
40f68                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
40f68                 | '------------------------------------------------------------------------------
40f68                 | ' On entry:
40f68                 | ' On exit:
40f68                 | '------------------------------------------------------------------------------
40f68                 | hget_hub_status
40f68     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
40f6c     27 91 03 F6 |                 mov     hpar2, urx_buff_p
40f70     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
40f74     01 92 2F F9 |                 setword hpar3, #1, #1
40f78     CF 02 A0 FD |                 call    #do_int_in
40f7c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40f80     0C 00 90 AD |         if_z    jmp     #.data
40f84     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
40f88     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
40f8c     2D 00 64 FD |                 ret
40f90                 | .data
40f90     00 92 0F F2 |                 cmp     hpar3, #0               wz
40f94     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
40f98                 | 
40f98     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
40f9c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
40fa0     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
40fa4     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
40fa8                 |                 debug(ubin_long(hub_status_chg))
40fa8                 | 
40fa8     01 5A 06 F6 |                 mov     hdev_port, #1
40fac                 | .loop
40fac     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
40fb0     0C 00 B0 AD |         if_x1   call    #hub_port_handler
40fb4     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
40fb8     F0 FF 9F 3D |         if_nc   jmp     #.loop
40fbc     2D 00 64 FD |                 ret
40fc0                 | 
40fc0                 | hub_port_handler
40fc0     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
40fc4     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
40fc8     27 EF 03 F6 |                 mov     pb, urx_buff_p
40fcc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
40fd0     55 02 A0 FD |                 call    #control_read
40fd4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
40fd8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
40fd8                 | 
40fd8     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
40fdc     50 01 90 5D |         if_x0   jmp     #.other
40fe0     68 02 D0 FE |                 loc     ptra, #clr_port_feat
40fe4     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
40fe8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
40fec     A0 02 A0 FD |                 call    #control_write
40ff0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
40ff4     7C 01 90 5D |         if_x0   jmp     #.disconnect
40ff8     B1 99 02 F6 |                 mov     hctwait, _100ms_
40ffc     EF 02 A0 FD |                 call    #poll_waitx
41000                 | 
41000     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
41004     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
41008     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
4100c     A0 02 A0 FD |                 call    #control_write
41010                 | 
41010     02 78 07 F6 |                 mov     htmp3, #2
41014                 | .wait_reset
41014     AD 99 02 F6 |                 mov     hctwait, _8ms_
41018     EF 02 A0 FD |                 call    #poll_waitx
4101c     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
41020     27 EF 03 F6 |                 mov     pb, urx_buff_p
41024     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41028     55 02 A0 FD |                 call    #control_read
4102c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
41030     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
41034     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
41038                 | 
41038     10 02 D0 FE |                 loc     ptra, #clr_port_feat
4103c     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
41040     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41044     A0 02 A0 FD |                 call    #control_write
41048                 | 
41048     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
4104c                 | .wait_recover
4104c     A8 99 02 F6 |                 mov     hctwait, _1ms_
41050     EF 02 A0 FD |                 call    #poll_waitx
41054     FD 73 6F FB |                 djnz    htmp,#.wait_recover
41058                 | 
41058     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
4105c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
41060     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
41064                 | 
41064     00 08 00 FF 
41068     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
4106c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
41070     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
41074     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
41078     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
4107c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41080     48 01 90 5D |         if_nz   jmp     #.done
41084                 | .get_dev_desc
41084     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
41088     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
4108c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
41090     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
41094     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
41098     01 73 57 FC |                 wrword  htmp, ptra[wValue]
4109c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
410a0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
410a4     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
410a8     AD 99 02 F6 |                 mov     hctwait, _8ms_
410ac     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
410b0     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
410b4     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
410b8     BE 00 A0 FD |                 call    #calc_crc5
410bc     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
410c0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
410c4     F7 AD C2 FA |                 rdbyte  total_data, pb
410c8     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
410cc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
410d0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
410d4     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
410d8     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
410dc     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
410e0                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
410e0     A0 99 02 F6 |                 mov     hctwait, _500us_
410e4     EF 02 A0 FD |                 call    #poll_waitx
410e8     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
410ec     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
410f0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
410f4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
410f8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
410fc     CC 00 90 5D |         if_nz   jmp     #.done
41100     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
41104     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
41108     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
4110c     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
41110     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
41114     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
41118     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
4111c     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
41120     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
41124     A4 00 90 CD |         if_b    jmp     #.done
41128     60 F0 BF FD |                 call    #hparse_con_desc
4112c     9C 00 90 FD |                 jmp     #.done
41130                 | 
41130                 | .other
41130     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
41134     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
41138     28 00 90 AD |         if_x1   jmp     #.reset_feature
4113c     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
41140     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
41144     1C 00 90 AD |         if_x1   jmp     #.reset_feature
41148     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
4114c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
41150     10 00 90 AD |         if_x1   jmp     #.reset_feature
41154     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
41158     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
4115c     04 00 90 AD |         if_x1   jmp     #.reset_feature
41160     68 00 90 FD |                 jmp     #.done
41164                 | .reset_feature
41164     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
41168     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
4116c     A0 02 A0 FD |                 call    #control_write
41170     58 00 90 FD |                 jmp     #.done
41174                 | .disconnect
41174                 | 
41174     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
41178     00 72 E3 F8 |                 getbyte htmp
4117c     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
41180     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
41184     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
41188     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
4118c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
41190     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
41194                 |         if EMUPAD_MAX_PLAYER > 0
41194                 |         end
41194                 |         if HAVE_MOUSE
41194     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
41198     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
4119c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
411a0                 |         end
411a0                 |         if HAVE_HIDPAD
411a0     28 0A F0 FE |                 loc ptrb,#hidpad_report
411a4     2D 73 03 F6 |                 mov htmp,hdev_port
411a8     01 72 E7 F2 |                 cmpsub htmp,#1
411ac     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
411b0     B9 F3 03 F1 |                 add ptrb,htmp
411b4     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
411b8     80 01 6C FC |                 wrlong #0,ptrb
411bc                 |         end
411bc                 | 
411bc     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
411c0     00 00 C4 F8 |                 setbyte #0
411c4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
411c8     00 00 04 F6 |                 mov     0-0, #0
411cc                 | 
411cc                 | .done
411cc     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
411d0     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
411d4     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
411d8     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
411dc     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
411e0     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
411e4                 | 
411e4     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
411e8     27 EF 03 F6 |                 mov     pb, urx_buff_p
411ec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
411f0     55 02 A0 FD |                 call    #control_read
411f4     00 69 06 FB |                 rdlong  hub_port_status, ptra
411f8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
411f8     2D 00 64 FD |                 ret
411fc                 | 
411fc                 | '------------------------------------------------------------------------------
411fc                 | ' Partially populated SETUP packets
411fc                 | '------------------------------------------------------------------------------
411fc     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
411fd     06          |                 byte    REQ_GET_DESC
411fe     00 01       |                 word    TYPE_DEVICE << 8
41200     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41202     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41204     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
41205     06          |                 byte    REQ_GET_DESC
41206     00 02       |                 word    TYPE_CONFIG << 8
41208     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
4120a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
4120c     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
4120d     09          |                 byte    REQ_SET_CONFIG
4120e     00 00       |                 word    0       ' Configuration value
41210     00 00       |                 word    0       ' Zero
41212     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
41214     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
41215     05          |                 byte    REQ_SET_ADDR
41216     00 00       |                 word    0       ' Zero
41218     00 00       |                 word    0       ' Zero
4121a     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
4121c                 | '------------------------------------------------------------------------------
4121c                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
4121c                 | ' wValue field dictates which protocol should be used.
4121c                 | '
4121c                 | ' When initialized, all devices default to report protocol. However the host
4121c                 | ' should not make any assumptions about the device state and should set the
4121c                 | ' desired protocol whenever initializing a device.
4121c                 | '------------------------------------------------------------------------------
4121c     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
4121d     0B          |                 byte    HID_SET_PROTO
4121e     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
41220                 |                                                 ' (HID 1.11 Section 7.2.6).
41220     00 00       |                 word    0               ' Interface index number.
41222     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
41224                 | '------------------------------------------------------------------------------
41224     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
41225     0A          |                 byte    HID_SET_IDLE
41226     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
41228                 |                                         ' reporting until a change is detected in the report data
41228                 | 
41228                 |                                         ' (HID 1.11 Section 7.2.4).
41228     00 00       |                 word    0       ' Interface index number.
4122a     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
4122c     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
4122d     09          |                 byte    HID_SET_REPORT
4122e     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
41230                 |                                         ' (HID 1.11 Section 7.2.2).
41230     00 00       |                 word    0       ' Interface index number.
41232     00 00       |                 word    0       ' Size of the report, in bytes.
41234     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
41235     06          |                 byte    REQ_GET_DESC
41236     00 22       |                 word    TYPE_REPORT << 8
41238     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
4123a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
4123c                 | '------------------------------------------------------------------------------
4123c     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
4123d     06          |                 byte    REQ_GET_DESC
4123e     00 29       |                 word    TYPE_HUB << 8
41240     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41242     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41244     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
41245     03          |                 byte    REQ_SET_FEATURE
41246     00 00       |                 word    0       ' port power
41248     01 00       |                 word    1       ' Port index number (1+)
4124a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
4124c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
4124d     01          |                 byte    REQ_CLEAR_FEATURE
4124e     00 00       |                 word    0       ' port power
41250     01 00       |                 word    1       ' Port index number (1+)
41252     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41254     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
41255     00          |                 byte    REQ_GET_STATUS
41256     00 00       |                 word    0
41258     01 00       |                 word    1       ' Port index number (1+)
4125a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
4125c                 | '------------------------------------------------------------------------------
4125c                 | if _HAVE_GAMEPAD
4125c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
41260                 | ps3_command_buff
41260     00 00 00 00 
41264     00          |                 byte    $00, $00, $00, $00, $00
41265     00 00 00 00 
41269     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
4126a     FF 27 10 00 
4126e     32          |                 byte    $FF, $27, $10, $00, $32
4126f     FF 27 10 00 
41273     32          |                 byte    $FF, $27, $10, $00, $32
41274     FF 27 10 00 
41278     32          |                 byte    $FF, $27, $10, $00, $32
41279     FF 27 10 00 
4127d     32          |                 byte    $FF, $27, $10, $00, $32
4127e     00 00 00 00 
41282     00          |                 byte    $00, $00, $00, $00, $00
41283     00 00 00 00 
41287     00          |                 byte    $00, $00, $00, $00, $00
41288     00 00 00 00 
4128c     00          |                 byte    $00, $00, $00, $00, $00
4128d     00 00 00    |                 byte    $00, $00, $00
41290                 | '------------------------------------------------------------------------------
41290     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
41293                 |                                         ' 0x01 All blinking
41293                 |                                         ' 0x02 1 flashes, then on
41293                 |                                         ' 0x03 2 flashes, then on
41293                 |                                         ' 0x04 3 flashes, then on
41293                 |                                         ' 0x05 4 flashes, then on
41293                 |                                         ' 0x06 1 on
41293                 |                                         ' 0x07 2 on
41293                 |                                         ' 0x08 3 on
41293                 |                                         ' 0x09 4 on
41293                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
41293                 |                                         ' 0x0B Blinking*
41293                 |                                         ' 0x0C Slow blinking*
41293                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
41293     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
41296     00          |                 byte    $00             ' Left rumble
41297     00          |                 byte    $00             ' Right rumble
41298     00 00 00    |                 byte    $00, $00, $00
4129b     00          | end
4129c                 | alignl
4129c                 | 
4129c                 | if HAVE_MOUSE
4129c     00 00 00 00 
412a0     00 00 00 00 | mouse_limits long 0[2]
412a4     00 00 00 00 | mouse_outptr long 0
412a8                 | end
412a8                 | 
412a8                 | if KEYQUEUE_SIZE > 0
412a8     00          | keyq_head byte 0
412a9     00          | keyq_tail byte 0
412aa     00 00 00 00 
      ...             
414a6     00 00 00 00 
414aa     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
414ac                 | alignl
414ac                 | end
414ac                 | 
414ac                 | if EMUPAD_MAX_PLAYER > 0
414ac                 | emupad_rule_buffer
414ac                 | if EMUPAD_BUILTIN_RULES
414ac                 | file "padmap_builtin.dat"
414ac                 | end
414ac                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
414ac                 | '' Default rule directly follows!
414ac                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
414ac                 | end
414ac                 | 
414ac                 | '------------------------------------------------------------------------------
414ac                 | ' The USB data cache area gets zero-filled at every device disconnect
414ac                 | '------------------------------------------------------------------------------
414ac                 | usb_cache_start
414ac                 | 
414ac                 | ' HID descriptor and report buffers
414ac                 | if !!OVERLAP_MEMORY
414ac     00 00 00 00 
      ...             
41ba4     00 00 00 00 
41ba8     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
41bac                 | end
41bac     00 00 00 00 
41bb0     00 00 00 00 | hkbd_report     byte    0[8]
41bb4     00 00 00 00 | hkbd_led_rep    byte    0
41bb8                 | alignl
41bb8                 | 
41bb8     00 00 00 00 
41bbc     00 00 00 00 
41bc0     00 00 00 00 
41bc4     00 00 00 00 
41bc8     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
41bcc                 | 
41bcc                 | if HAVE_HIDPAD
41bcc     00 00 00 00 
      ...             
41ca4     00 00 00 00 
41ca8     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
41cac                 | end
41cac                 | 
41cac                 | ' HUB descriptor
41cac     00          | hub_descr       byte    0   ' bDescLength
41cad     00          |                 byte    0   ' bDescriptorType
41cae     00          |                 byte    0   ' bNbrPorts
41caf     00 00       |                 word    0   ' wHubCharacteristics
41cb1     00          |                 byte    0   ' bPwrOn2PwrGood
41cb2     00          |                 byte    0   ' bHubContrCurrent
41cb3     00          |                 byte    0   ' DeviceRemoveable
41cb4     00          |                 byte    0   ' PortPwrCtrlMask
41cb5                 | 
41cb5                 | usb_cache_end
41cb5                 | 
41cb5                 | if HAVE_MOUSE
41cb5     00 00 00 00 | mouse_xacc      long 0
41cb9     00 00 00 00 | mouse_yacc      long 0
41cbd     00 00 00 00 | mouse_zacc      long 0
41cc1     00          | mouse_bstate    byte 0
41cc2     00          | mouse_lpending  byte 0
41cc3     00          | mouse_rpending  byte 0
41cc4     00          | mouse_mpending  byte 0
41cc5     00          | mouse_lock      byte 0
41cc6     00 00 00    |                 byte 0[3] ' padding
41cc9                 | end
41cc9                 | 
41cc9     00 00 00 00 
      ...             
41d41     00 00 00 00 
41d45     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
41d49     00 00 00 00 
41d4d     00 00 00 00 
41d51     00 00 00 00 
41d55     00 00 00 00 
41d59     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
41d5b     00 00 00 00 
      ...             
41e53     00 00 00 00 
41e57     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
41e5b                 | 
41e5b     00          | driver_cog      byte    0                       ' Current driver cog + 1
41e5c                 | 	alignl
41e5c                 | _audio096_spin2_dat_
41e5c                 | 
41e5c                 | audio       org     0
41e5c                 | 
41e5c     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
41e60     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
41e64     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
41e68                 |  
41e68     01 EC 63 FD |             cogid   pa                   ' compute cogid
41e6c     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
41e70     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
41e74     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
41e78                 | 
41e78     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
41e7c     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
41e80     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
41e84     0F 24 06 FC |             wrpin   dac2,#right
41e88     0F 00 1E FC |             wxpin   #256,#right    
41e8c     41 9C 64 FD |             dirh    #left addpins 1
41e90     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
41e94     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
41e98     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
41e9c                 |             
41e9c                 | '---------------------------------------------------------------------------------        
41e9c                 | '----------------- The main loop -------------------------------------------------
41e9c                 | '---------------------------------------------------------------------------------
41e9c                 | 
41e9c     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
41ea0     10 00 90 CD |       if_c  jmp     #loop1
41ea4                 |   
41ea4     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
41ea8     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
41eac     D5 00 80 F1 |             sub     0-0,a40000000
41eb0     FD 01 6E FB |             djnz    cn,#p402
41eb4                 |     
41eb4     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
41eb8     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
41ebc     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
41ec0     01 00 06 C6 |     if_c    mov     cn,#1
41ec4     DA 02 3A F3 |             fle     ct,time3 wcz
41ec8     02 00 06 C6 |     if_c    mov     cn,#2     
41ecc     DB 02 3A F3 |             fle     ct,time4 wcz
41ed0     03 00 06 C6 |     if_c    mov     cn,#3
41ed4     DC 02 3A F3 |             fle     ct,time5 wcz
41ed8     04 00 06 C6 |     if_c    mov     cn,#4
41edc     DD 02 3A F3 |             fle     ct,time6 wcz
41ee0     05 00 06 C6 |     if_c    mov     cn,#5
41ee4     DE 02 3A F3 |             fle     ct,time7 wcz
41ee8     06 00 06 C6 |     if_c    mov     cn,#6
41eec     DF 02 3A F3 |             fle     ct,time8 wcz
41ef0     07 00 06 C6 |     if_c    mov     cn,#7
41ef4                 | 
41ef4                 | 
41ef4                 | '----------------------------------------------------------------------------------
41ef4                 | '------------- Compute channel samples --------------------------------------------
41ef4                 | '----------------------------------------------------------------------------------
41ef4                 | 
41ef4                 | 
41ef4     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
41ef8     06 C0 65 F0 |             shl     channeladd,#6
41efc     E0 F0 03 F1 |             add     ptra,channeladd
41f00                 | 
41f00     28 16 64 FD |             setq    #11                        	' read parameters
41f04     00 D7 05 FB |             rdlong  pointer0,ptra
41f08                 |     	    
41f08     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
41f0c     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
41f10     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
41f14     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
41f18     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
41f1c     00 C4 0D F2 |             cmp     qq,#0 wz                         
41f20     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
41f24     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
41f28                 |             
41f28     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
41f2c     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
41f30     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
41f34                 | 
41f34     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
41f38     EC 08 3A F9 |             getword oldrs,sample0,#1
41f3c     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
41f40     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
41f44     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
41f48     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
41f4c                 | 
41f4c     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
41f50     00 04 02 F6 |             mov     dt0,0-0    
41f54     D7 04 82 F1 |             sub     dt0,time0
41f58                 |             
41f58     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
41f5c     FB 00 00 F1 |             add     0-0,afreq0  	
41f60                 |             
41f60                 | '---- envelopes
41f60                 |             
41f60     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
41f64     20 00 00 AF 
41f68     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
41f6c     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
41f70                 | 
41f70     FB 48 02 F6 |             mov     envs1,afreq0
41f74     F5 48 02 FA |             mul     envs1,envspd0
41f78     24 E7 01 F1 |             add     envph0,envs1 
41f7c                 | 
41f7c     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
41f80     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
41f84     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
41f88     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
41f8c     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
41f90     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
41f94     00 46 06 36 |     if_ge   mov     envlo,#0
41f98     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
41f9c     16 E6 65 30 |     if_ge   shl     envph0,#22
41fa0                 | 
41fa0     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
41fa4     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
41fa8     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
41fac     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
41fb0     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
41fb4     24 49 32 F9 |             getword envs1,envs1,#0		' current value
41fb8     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
41fbc     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
41fc0     23 49 02 FA |             mul     envs1,envlo
41fc4     25 49 02 F1 |             add     envs1,envs2
41fc8     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
41fcc                 |             
41fcc     1B DA 0D F4 | p410        testb   sstart0, #27 wz
41fd0     1B C6 61 AD |     if_z    getrnd  spl
41fd4     58 00 90 AD |     if_z    jmp     #p406
41fd8                 |  
41fd8     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
41fdc     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
41fe0     08 D6 45 F0 |             shr     pointer0,#8
41fe4                 |          
41fe4     1F DA 0D F4 |             testb   sstart0,#31 wz            
41fe8     01 D6 65 A0 |     if_z    shl     pointer0,#1        
41fec     1C DA 0D F4 |             testb   sstart0,#28 wz            
41ff0     01 D6 65 A0 |     if_z    shl     pointer0,#1        
41ff4                 |         
41ff4     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
41ff8     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
41ffc     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
42000                 |             
42000     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
42004     ED C4 01 F1 |             add     qq,sstart0            
42008                 | 
42008     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
4200c     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
42010     1C 01 B0 1D |     if_gt   call    #cache_read
42014                 |          
42014     1F DA 0D F4 |             testb   sstart0,#31 wz 
42018     08 C6 65 50 |     if_nz   shl     spl,#8
4201c     08 D6 65 50 |     if_nz   shl     pointer0,#8
42020     07 D6 65 A0 |     if_z    shl     pointer0,#7
42024     1C DA 0D F4 |             testb   sstart0,#28 wz            
42028     01 D6 45 A0 |     if_z    shr     pointer0,#1    
4202c     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
42030                 | 
42030                 | 
42030     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
42034     00 C6 01 F6 |             mov     spl,0-0
42038     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
4203c     00 C6 01 F6 |             mov     spl,0-0
42040                 | 
42040     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
42044     00 0A 02 F6 |             mov     ls0,0-0
42048     20 00 00 FF 
4204c     00 C4 05 F6 |             mov     qq,##16384
42050     FE C4 81 F1 |             sub     qq,apan0
42054     E2 C6 31 FA |             scas    spl,qq
42058     00 0C 02 F6 |             mov     rs0, 0-0
4205c                 | 
4205c     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
42060     06 11 02 F1 |             add     rs,rs0
42064     03 0F 82 F1 |             sub     ls,oldls
42068     05 0F 02 F1 |             add     ls,ls0
4206c                 |    
4206c     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
42070     05 D9 21 F9 |             setword sample0,ls0,#0
42074                 |             
42074     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
42078     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
4207c     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
42080                 |   '  if_z    mov     sample0,#0
42080     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
42084     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
42088     04 00 00 AF 
4208c     00 B0 05 A1 |     if_z    add     time1,##2048
42090     D8 B2 01 A6 |     if_z    mov     time2,time1
42094     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
42098                 | 
42098     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
4209c     00 D7 65 FC |             wrlong  pointer0,ptra
420a0     08 E7 65 FC |             wrlong  envph0,ptra[8]
420a4     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
420a8                 |                       
420a8     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
420ac     FF C3 25 A7 |     if_z    decmod  front, #511          
420b0                 |          
420b0     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
420b4     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
420b8     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
420bc     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
420c0                 | 	    
420c0                 | 		    
420c0     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
420c4     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
420c8     04 15 02 F6 |             mov     newsample, oldrs       
420cc                 | 
420cc     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
420d0     02 AF 01 F1 |             add     time0,dt0    
420d4                 |                                      
420d4     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
420d8     D8 FD 9F AD |     if_z    jmp     #loop1
420dc     02 C5 01 F6 |             mov     qq,dt0
420e0                 | 
420e0                 |     
420e0                 |             
420e0     01 4E 36 F0 | p301        rol     dropper,#1 wc
420e4     40 00 90 3D |     if_nc   jmp     #p399
420e8     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
420ec     00 C2 9D F2 |             cmpr    front, #0-0 wcz
420f0     F4 FF 9F AD |     if_e    jmp     #p398   
420f4                 | 		
420f4     00 1A 0E F2 | 	    cmp     scbase,#0 wz
420f8     20 00 90 AD |     if_z    jmp     #p302	   
420fc                 |   
420fc     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
42100     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
42104     02 1E 66 C0 |     if_c    shl     scptr2,#2
42108     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
4210c     60 1E 66 FC |             wrlong  scptr2,#$60
42110     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
42114     01 00 00 CF 
42118     7F 1C 06 C7 |     if_c    incmod  scptr,##639
4211c                 | 			    
4211c     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
42120     00 00 00 FF 
42124     FF C3 05 F7 |             incmod  front, ##511
42128     ED C5 6D FB | p399        djnz    qq,#p301
4212c                 |             
4212c     6C FD 9F FD |             jmp     #loop            'loop
42130                 | 
42130                 | '----------------------------------------------------------------------------------
42130                 | '------------- This is the end of the main loop -----------------------------------
42130                 | '----------------------------------------------------------------------------------
42130                 | 
42130                 | '----------------------------------------------------------------------------------
42130                 | '------------- PSRAM cache ----------- --------------------------------------------
42130                 | '----------------------------------------------------------------------------------
42130                 | 
42130                 | ' There are 8 cache pointers for 8 channels
42130                 | ' if 24 higher bits of address=cache, then get a word from the cache
42130                 | ' else load the cache from PSRAM, update the pointer, then read a sample
42130                 | 
42130                 | 
42130     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
42134                 |             
42134     E2 40 02 F6 | 	    mov     addrhi,qq		
42138     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
4213c     14 01 96 F9 | 	    alts    cn,#cache1            
42140     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
42144     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
42148                 | 	
42148     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
4214c     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
42150     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
42154     08 38 66 F0 | 	    shl     cmd,#8
42158     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
4215c     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
42160     08 3A 66 F0 |             shl     hubaddr,#8                  '
42164     13 3B 02 F1 |             add     hubaddr,hubptr 
42168     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
4216c     28 04 64 FD |             setq    #2                          ' write 3 longs
42170     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
42174     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
42178     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
4217c                 |             
4217c                 | 	
4217c     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
42180     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
42184     13 C5 01 F1 | 	    add     qq,hubptr
42188     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
4218c     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
42190                 |           
42190                 | 
42190                 | '--------------------------------------------------------------------------
42190                 | '------ Interrupt service -------------------------------------------------
42190                 | '------ Output the sample, get the next one if exists ---------------------
42190                 | '--------------------------------------------------------------------------
42190                 | 
42190     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
42194     0F D0 25 FC |             wypin   rsample,#right       '4
42198     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
4219c     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
421a0     FF F3 07 57 |     if_ne   incmod  ptrb,#511
421a4     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
421a8     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
421ac                 |     
421ac     F5 FF 3B FB |             reti1                        '17/19 
421b0                 |           
421b0                 | '---------------------------------------------------------------------------
421b0                 | '-------- End of interrupt -------------------------------------------------
421b0                 | '---------------------------------------------------------------------------    
421b0                 | 
421b0                 | 
421b0                 | '---------------------------------------------------------------------------
421b0                 | '------- Variables ---------------------------------------------------------
421b0                 | '---------------------------------------------------------------------------
421b0                 | 
421b0                 | ' constants
421b0                 | 
421b0     00 00 00 40 | a40000000   long $40000000
421b4     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
421b8                 | 
421b8                 | ' Time variables
421b8                 | 
421b8     00 00 00 00 | time0       long 0    ' Global sample computing time
421bc     01 00 00 00 | time1       long 1    ' Local channels time
421c0     02 00 00 00 | time2       long 2
421c4     03 00 00 00 | time3       long 3
421c8     04 00 00 00 | time4       long 4
421cc     05 00 00 00 | time5       long 5
421d0     06 00 00 00 | time6       long 6
421d4     07 00 00 00 | time7       long 7
421d8     08 00 00 00 | time8       long 8
421dc                 | 
421dc     00 00 00 00 | channeladd long 0
421e0                 | 
421e0     00 00 00 00 | front       long 0
421e4                 | 
421e4                 | ' temporary variables 
421e4     00 00 00 00 | qq          long 0
421e8     00 00 00 00 | spl         long 0
421ec     00 00 00 00 | zero        long 0
421f0     00 00 00 00 | mailbox     long 0
421f4     00 00 00 00 | mailbox2 long 0
421f8                 | 
421f8                 | ' Interrupt ISR variables
421f8                 | 
421f8     00 00 00 00 | lsample     long 0
421fc     00 00 00 00 | rsample     long 0
42200     00 00 00 00 | lsnext      long 0
42204     00 00 00 00 | rsnext      long 0 
42208                 | 
42208                 | ' channel parameter block
42208                 | 
42208     00 00 00 00 | pointer0    long 0     
4220c     00 00 00 00 | sample0     long 0
42210     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
42214     00 00 00 00 | lstart0     long 0
42218     00 00 00 00 | lend0       long 0
4221c     00 00 00 00 | volpan0     long 0
42220     00 00 00 00 | freqskip0   long 0
42224     00 00 00 00 | command0    long 0
42228     00 00 00 00 | envph0	    long 0
4222c     00 00 00 00 | envptr0	    long 0
42230     00 00 00 00 | envspd0	    long 0
42234     00 00 00 00 | envlen0	    long 0
42238     00 00 00 00 | res5	    long 0
4223c     00 00 00 00 | res6	    long 0
42240     00 00 00 00 | res7	    long 0
42244     00 00 00 00 | res8	    long 0
42248                 | 
42248     00 00 00 00 | afreq0      long 0
4224c     00 00 00 00 | askip0      long 0
42250     00 00 00 00 | avol0       long 0
42254     00 00 00 00 | apan0       long 0
42258                 | 
42258     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
4225c     00 00 00 00 | cn          long 0
42260     00 00 00 00 | ct          long 0
42264     00 00 00 00 | dt0         long 0
42268                 | 
42268                 | ' Samples
42268     00 00 00 00 | oldls       long 0
4226c     00 00 00 00 | oldrs       long 0
42270                 | 
42270     00 00 00 00 | ls0         long 0
42274     00 00 00 00 | rs0         long 0
42278                 | 
42278     00 00 00 00 | ls          long 0    
4227c     00 00 00 00 | rs          long 0
42280                 | 
42280     00 00 00 00 | oldsample   long 0
42284     00 00 00 00 | newsample   long 0
42288                 | 
42288     00 00 00 00 | nrsample    long 0
4228c     00 00 00 00 | nlsample    long 0
42290                 | 
42290     00 00 00 00 | scbase long 0
42294     00 00 00 00 | scptr long 0
42298     00 00 00 00 | scptr2 long 0
4229c     00 00 00 00 | scope long 0
422a0                 | 
422a0     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
422a4     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
422a8                 | 
422a8     00 18 07 00 | hubptr      long $71800
422ac     00 00 00 00 | cache1      long 0
422b0     00 00 00 00 | cache2      long 0
422b4     00 00 00 00 | cache3      long 0
422b8     00 00 00 00 | cache4      long 0
422bc     00 00 00 00 | cache5      long 0
422c0     00 00 00 00 | cache6      long 0
422c4     00 00 00 00 | cache7      long 0
422c8     00 00 00 00 | cache8      long 0
422cc                 | 
422cc                 | 
422cc     00 00 00 00 | cmd         long 0
422d0     00 00 00 00 | hubaddr     long 0
422d4     00 01 00 00 | count       long 256
422d8     00 00 00 00 | addrlo long 0
422dc     00 00 00 00 | addrhi long 0
422e0     00 00 00 00 | pointer00 long 0
422e4     00 00 00 00 | envhi long 0
422e8     00 00 00 00 | envlo long 0
422ec     00 00 00 00 | envs1 long 0
422f0     00 00 00 00 | envs2 long 0
422f4     00 00 00 00 | noise0 long 0
422f8     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
422fc     00 00 00 00 
42300     00 00 00 00 | null  			long 	0,0           ' for channel reset
42304                 | 	alignl
42304                 | __system__dat_
42304     00 00 00 00 
42308     00 00 00 00 | 	byte	$00[8]
4230c     03 00 00 00 
42310     00 00 00 00 
42314     00 00 00 00 
42318     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
4231c     00 00 00 00 
      ...             
425a8     00 00 00 00 
425ac     00 00 00 00 | 	byte	$00[660]
425b0     00 00 10 0B | 	long	(177 {__system____root_opendir})<<20
425b4     00 00 20 0B | 	long	(178 {__system____root_closedir})<<20
425b8     00 00 30 0B | 	long	(179 {__system____root_readdir})<<20
425bc     00 00 40 0B | 	long	(180 {__system____root_stat})<<20
425c0     00 00 00 00 
425c4     00 00 00 00 
425c8     00 00 00 00 
425cc     00 00 00 00 
425d0     00 00 00 00 
425d4     00 00 00 00 
425d8     00 00 00 00 | 	byte	$00[28]
425dc     44 26 04 00 | 	long	@@@__system__dat_ + 832
425e0     47 26 04 00 | 	long	@@@__system__dat_ + 835
425e4     68 26 04 00 | 	long	@@@__system__dat_ + 868
425e8     81 26 04 00 | 	long	@@@__system__dat_ + 893
425ec     9C 26 04 00 | 	long	@@@__system__dat_ + 920
425f0     B6 26 04 00 | 	long	@@@__system__dat_ + 946
425f4     C6 26 04 00 | 	long	@@@__system__dat_ + 962
425f8     D8 26 04 00 | 	long	@@@__system__dat_ + 980
425fc     EA 26 04 00 | 	long	@@@__system__dat_ + 998
42600     FC 26 04 00 | 	long	@@@__system__dat_ + 1016
42604     08 27 04 00 | 	long	@@@__system__dat_ + 1028
42608     19 27 04 00 | 	long	@@@__system__dat_ + 1045
4260c     2D 27 04 00 | 	long	@@@__system__dat_ + 1065
42610     37 27 04 00 | 	long	@@@__system__dat_ + 1075
42614     47 27 04 00 | 	long	@@@__system__dat_ + 1091
42618     56 27 04 00 | 	long	@@@__system__dat_ + 1106
4261c     6C 27 04 00 | 	long	@@@__system__dat_ + 1128
42620     85 27 04 00 | 	long	@@@__system__dat_ + 1153
42624     99 27 04 00 | 	long	@@@__system__dat_ + 1173
42628     A7 27 04 00 | 	long	@@@__system__dat_ + 1187
4262c     BB 27 04 00 | 	long	@@@__system__dat_ + 1207
42630     C7 27 04 00 | 	long	@@@__system__dat_ + 1219
42634     D9 27 04 00 | 	long	@@@__system__dat_ + 1237
42638     F1 27 04 00 | 	long	@@@__system__dat_ + 1261
4263c     03 28 04 00 | 	long	@@@__system__dat_ + 1279
42640     16 28 04 00 | 	long	@@@__system__dat_ + 1298
42644     4F 4B 00 4E 
42648     75 6D 65 72 
4264c     69 63 61 6C 
42650     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
42654     75 6D 65 6E 
42658     74 20 6F 75 
4265c     74 20 6F 66 
42660     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
42664     61 69 6E 00 
42668     52 65 73 75 
4266c     6C 74 20 6E 
42670     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
42674     65 70 72 65 
42678     73 65 6E 74 
4267c     61 62 6C 65 
42680     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
42684     65 67 61 6C 
42688     20 6D 75 6C 
4268c     74 69 62 79 
42690     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
42694     65 71 75 65 
42698     6E 63 65 00 
4269c     4E 6F 20 73 
426a0     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
426a4     66 69 6C 65 
426a8     20 6F 72 20 
426ac     64 69 72 65 
426b0     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
426b4     79 00 42 61 
426b8     64 20 66 69 
426bc     6C 65 20 6E 
426c0     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
426c4     72 00 50 65 
426c8     72 6D 69 73 
426cc     73 69 6F 6E 
426d0     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
426d4     69 65 64 00 
426d8     4E 6F 74 20 
426dc     65 6E 6F 75 
426e0     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
426e4     65 6D 6F 72 
426e8     79 00 54 65 
426ec     6D 70 6F 72 
426f0     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
426f4     66 61 69 6C 
426f8     75 72 65 00 
426fc     46 69 6C 65 
42700     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
42704     73 74 73 00 
42708     49 6E 76 61 
4270c     6C 69 64 20 
42710     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
42714     6D 65 6E 74 
42718     00 54 6F 6F 
4271c     20 6D 61 6E 
42720     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
42724     65 6E 20 66 
42728     69 6C 65 73 
4272c     00 49 2F 4F 
42730     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
42734     6F 72 00 4E 
42738     6F 74 20 61 
4273c     20 64 69 72 
42740     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
42744     72 79 00 49 
42748     73 20 61 20 
4274c     64 69 72 65 
42750     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
42754     79 00 52 65 
42758     61 64 20 6F 
4275c     6E 6C 79 20 
42760     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
42764     20 73 79 73 
42768     74 65 6D 00 
4276c     46 75 6E 63 
42770     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
42774     20 6E 6F 74 
42778     20 69 6D 70 
4277c     6C 65 6D 65 
42780     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
42784     00 44 69 72 
42788     65 63 74 6F 
4278c     72 79 20 6E 
42790     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
42794     6D 70 74 79 
42798     00 4E 61 6D 
4279c     65 20 74 6F 
427a0     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
427a4     6E 67 00 44 
427a8     65 76 69 63 
427ac     65 20 6E 6F 
427b0     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
427b4     65 6B 61 62 
427b8     6C 65 00 42 
427bc     61 64 20 61 
427c0     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
427c4     73 73 00 42 
427c8     72 6F 6B 65 
427cc     6E 20 63 6F 
427d0     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
427d4     74 69 6F 6E 
427d8     00 44 65 76 
427dc     69 63 65 20 
427e0     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
427e4     65 73 6F 75 
427e8     72 63 65 20 
427ec     62 75 73 79 
427f0     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
427f4     73 73 20 64 
427f8     65 76 69 63 
427fc     65 20 6C 69 
42800     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
42804     6F 20 73 70 
42808     61 63 65 20 
4280c     6F 6E 20 64 
42810     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
42814     65 00 55 6E 
42818     6B 6E 6F 77 
4281c     6E 20 65 72 
42820     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
42824     00 00 00 00 
42828     00 00 00 00 
4282c     00 00 00 00 | 	byte	$00[12]
42830     05 00 00 00 
42834     00 00 00 00 
42838     00 00 00 00 
4283c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
42840     00 00 00 00 | 	byte	$00, $00, $00, $00
42844     00 00 90 0C | 	long	(201 {__system___tx})<<20
42848     00 00 A0 0C | 	long	(202 {__system___rx})<<20
4284c     00 00 00 00 | 	byte	$00, $00, $00, $00
42850     00 00 B0 0C | 	long	(203 {__system___rxtxioctl_0786})<<20
42854     00 00 C0 0C | 	long	(204 {__system____dummy_flush_0787})<<20
42858     00 00 00 00 
4285c     00 00 00 00 | 	byte	$00[8]
42860     01 00 00 00 
42864     06 00 00 00 
42868     00 00 00 00 
4286c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
42870     00 00 00 00 
42874     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
42878     00 00 90 0C | 	long	(201 {__system___tx})<<20
4287c     00 00 A0 0C | 	long	(202 {__system___rx})<<20
42880     00 00 00 00 | 	byte	$00, $00, $00, $00
42884     00 00 B0 0C | 	long	(203 {__system___rxtxioctl_0786})<<20
42888     00 00 C0 0C | 	long	(204 {__system____dummy_flush_0787})<<20
4288c     00 00 00 00 
42890     00 00 00 00 | 	byte	$00[8]
42894     01 00 00 00 
42898     06 00 00 00 
4289c     00 00 00 00 
428a0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
428a4     00 00 00 00 
428a8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
428ac     00 00 90 0C | 	long	(201 {__system___tx})<<20
428b0     00 00 A0 0C | 	long	(202 {__system___rx})<<20
428b4     00 00 00 00 | 	byte	$00, $00, $00, $00
428b8     00 00 B0 0C | 	long	(203 {__system___rxtxioctl_0786})<<20
428bc     00 00 C0 0C | 	long	(204 {__system____dummy_flush_0787})<<20
428c0     00 00 00 00 
      ...             
42a30     00 00 00 00 
42a34     00 00 00 00 | 	byte	$00[376]
42a38     3C 2A 04 00 | 	long	@@@__system__dat_ + 1848
42a3c     00 00 00 00 
42a40     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
42a44                 | 	alignl
42a44                 | _fatfs_cc_dat_
42a44     43 55 45 41 
42a48     41 41 41 43 
42a4c     45 45 45 49 
42a50     49 49 41 41 | 	byte	$43, $55, $45, $41, $41, $41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41
42a54     45 92 92 4F 
42a58     4F 4F 55 55 
42a5c     59 4F 55 4F 
42a60     9C 4F 9E 9F | 	byte	$45, $92, $92, $4f, $4f, $4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f
42a64     41 49 4F 55 
42a68     A5 A5 A6 A7 
42a6c     A8 A9 AA AB 
42a70     AC AD AE AF | 	byte	$41, $49, $4f, $55, $a5, $a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af
42a74     B0 B1 B2 B3 
42a78     B4 41 41 41 
42a7c     B8 B9 BA BB 
42a80     BC BD BE BF | 	byte	$b0, $b1, $b2, $b3, $b4, $41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf
42a84     C0 C1 C2 C3 
42a88     C4 C5 41 41 
42a8c     C8 C9 CA CB 
42a90     CC CD CE CF | 	byte	$c0, $c1, $c2, $c3, $c4, $c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf
42a94     D1 D1 45 45 
42a98     45 49 49 49 
42a9c     49 D9 DA DB 
42aa0     DC DD 49 DF | 	byte	$d1, $d1, $45, $45, $45, $49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df
42aa4     4F E1 4F 4F 
42aa8     4F 4F E6 E8 
42aac     E8 55 55 55 
42ab0     59 59 EE EF | 	byte	$4f, $e1, $4f, $4f, $4f, $4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef
42ab4     F0 F1 F2 F3 
42ab8     F4 F5 F6 F7 
42abc     F8 F9 FA FB 
42ac0     FC FD FE FF | 	byte	$f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff
42ac4     00 00 00 00 
42ac8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
42acc     00 00 80 0B | 	long	(184 {_fatfs_cc_v_close})<<20
42ad0     00 00 90 0B | 	long	(185 {_fatfs_cc_v_read})<<20
42ad4     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_write})<<20
42ad8     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_lseek})<<20
42adc     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_ioctl})<<20
42ae0     00 00 D0 0C | 	long	(205 {_fatfs_cc_v_flush})<<20
42ae4     00 00 00 00 
42ae8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
42aec     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_open})<<20
42af0     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_creat})<<20
42af4     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_opendir})<<20
42af8     00 00 00 0C | 	long	(192 {_fatfs_cc_v_closedir})<<20
42afc     00 00 10 0C | 	long	(193 {_fatfs_cc_v_readdir})<<20
42b00     00 00 20 0C | 	long	(194 {_fatfs_cc_v_stat})<<20
42b04     00 00 30 0C | 	long	(195 {_fatfs_cc_v_mkdir})<<20
42b08     00 00 40 0C | 	long	(196 {_fatfs_cc_v_rmdir})<<20
42b0c     00 00 50 0C | 	long	(197 {_fatfs_cc_v_remove})<<20
42b10     00 00 60 0C | 	long	(198 {_fatfs_cc_v_rename})<<20
42b14     00 00 70 0C | 	long	(199 {_fatfs_cc_v_init})<<20
42b18     00 00 80 0C | 	long	(200 {_fatfs_cc_v_deinit})<<20
42b1c     FF FF FF FF 
42b20     1F 00 00 00 
42b24     1C 00 00 00 
42b28     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
42b2c     1E 00 00 00 
42b30     1F 00 00 00 
42b34     1E 00 00 00 
42b38     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
42b3c     1F 00 00 00 
42b40     1E 00 00 00 
42b44     1F 00 00 00 
42b48     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
42b4c     1F 00 00 00 
42b50     00 00 00 00 
42b54     1F 00 00 00 
42b58     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
42b5c     5A 00 00 00 
42b60     78 00 00 00 
42b64     97 00 00 00 
42b68     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
42b6c     D4 00 00 00 
42b70     F3 00 00 00 
42b74     11 01 00 00 
42b78     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
42b7c     4E 01 00 00 
42b80     6D 01 00 00 
42b84     FF FF FF FF 
42b88     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
42b8c     00 00 00 00 
      ...             
42ba4     00 00 00 00 
42ba8     00 00 00 00 | 	byte	$00[32]
42bac     CA 2B 04 00 | 	long	@@@_fatfs_cc_dat_ + 390
42bb0     CE 2B 04 00 | 	long	@@@_fatfs_cc_dat_ + 394
42bb4     00 00 00 00 
42bb8     00 00 00 00 
42bbc     00 00 00 00 
42bc0     00 00 00 00 
42bc4     00 00       | 	byte	$00[18]
42bc6     3F 3F 3F 00 
42bca     55 43 54 00 
42bce     55 43 54 00 
42bd2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
42bd6     00 00 00 00 
42bda     00 00 00    | 	byte	$00[7]
42bdd     CA 9A 3B 00 
42be1     00 00 00 01 
42be5     01 01 01 01 
42be9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
42bed     91 11 11 11 
42bf1     11 01 01 01 
42bf5     01 01 01 01 
42bf9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
42bfd     01 01 01 01 
42c01     01 01 01    | 	byte	$01[7]
42c04     90 20 20 20 
42c08     20 20 20 20 
42c0c     20 20 20 20 
42c10     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
42c14     42 42 42 42 
42c18     42 42 42 42 
42c1c     42 42       | 	byte	$42[10]
42c1e     20 20 20 20 
42c22     20 20 20    | 	byte	$20[7]
42c25     44 44 44 44 
42c29     44 44       | 	byte	$44[6]
42c2b     04 04 04 04 
42c2f     04 04 04 04 
42c33     04 04 04 04 
42c37     04 04 04 04 
42c3b     04 04 04 04 | 	byte	$04[20]
42c3f     20 20 20 20 
42c43     20 20       | 	byte	$20[6]
42c45     48 48 48 48 
42c49     48 48       | 	byte	$48[6]
42c4b     08 08 08 08 
42c4f     08 08 08 08 
42c53     08 08 08 08 
42c57     08 08 08 08 
42c5b     08 08 08 08 | 	byte	$08[20]
42c5f     20 20 20 20 
42c63     01 00 00 00 
42c67     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
42c68                 | __methodtable__
42c68     80 6F 01 00 | 	long	@_do_no_command
42c6c     34 1B 02 00 | 	long	@_do_plus
42c70     54 0B 02 00 | 	long	@_do_minus
42c74     1C 1A 02 00 | 	long	@_do_or
42c78     D4 11 02 00 | 	long	@_do_mul
42c7c     18 F6 01 00 | 	long	@_do_fdiv
42c80     04 EE 01 00 | 	long	@_do_and
42c84     1C EF 01 00 | 	long	@_do_div
42c88     B4 0F 02 00 | 	long	@_do_mod
42c8c     E8 21 02 00 | 	long	@_do_shl
42c90     00 23 02 00 | 	long	@_do_shr
42c94     20 20 02 00 | 	long	@_do_power
42c98     BC E3 01 00 | 	long	@_do_getvar
42c9c     64 A4 01 00 | 	long	@_do_push
42ca0     B4 DD 01 00 | 	long	@_do_assign
42ca4     20 FA 00 00 | 	long	@_do_cls
42ca8     4C 69 01 00 | 	long	@_do_new
42cac     A8 9C 01 00 | 	long	@_do_plot
42cb0     9C 23 01 00 | 	long	@_do_draw
42cb4     10 9F 01 00 | 	long	@_do_print
42cb8     00 F8 00 00 | 	long	@_do_circle
42cbc     D0 25 01 00 | 	long	@_do_fcircle
42cc0     F8 E4 00 00 | 	long	@_do_box
42cc4     08 2F 01 00 | 	long	@_do_frame
42cc8     DC FC 00 00 | 	long	@_do_color
42ccc     98 2C 01 00 | 	long	@_do_for
42cd0     B8 6B 01 00 | 	long	@_do_next
42cd4     58 56 01 00 | 	long	@_do_list
42cd8     88 C0 01 00 | 	long	@_do_run
42cdc     F8 24 01 00 | 	long	@_do_error
42ce0     60 3C 01 00 | 	long	@_do_fast_goto
42ce4     50 3D 01 00 | 	long	@_do_find_goto
42ce8     64 3F 01 00 | 	long	@_do_slow_goto
42cec     A0 6F 01 00 | 	long	@_do_nothing
42cf0     A4 C4 01 00 | 	long	@_do_save
42cf4     F4 58 01 00 | 	long	@_do_load
42cf8     AC 8B 01 00 | 	long	@_do_pinwrite
42cfc     F4 DA 01 00 | 	long	@_do_waitms
42d00     28 DC 01 00 | 	long	@_do_waitvbl
42d04     58 42 01 00 | 	long	@_do_if
42d08     90 24 01 00 | 	long	@_do_else
42d0c     3C F1 01 00 | 	long	@_do_eq
42d10     E0 F7 01 00 | 	long	@_do_ge
42d14     AC 01 02 00 | 	long	@_do_le
42d18     C8 FC 01 00 | 	long	@_do_gt
42d1c     88 06 02 00 | 	long	@_do_lt
42d20     40 15 02 00 | 	long	@_do_ne
42d24     F0 BD 01 00 | 	long	@_do_rnd
42d28     E0 E6 00 00 | 	long	@_do_brun
42d2c     7C E0 00 00 | 	long	@_do_beep
42d30     2C 1C 01 00 | 	long	@_do_dir
42d34     E0 87 01 00 | 	long	@_do_paper
42d38     14 46 01 00 | 	long	@_do_ink
42d3c     1C 2C 01 00 | 	long	@_do_font
42d40     C0 63 01 00 | 	long	@_do_mode
42d44     08 68 01 00 | 	long	@_do_mouse
42d48     E0 3A 01 00 | 	long	@_do_gettime
42d4c     18 02 01 00 | 	long	@_do_cursor
42d50     78 F9 00 00 | 	long	@_do_click
42d54     C4 68 01 00 | 	long	@_do_mousex
42d58     08 69 01 00 | 	long	@_do_mousey
42d5c     3C 68 01 00 | 	long	@_do_mousek
42d60     80 68 01 00 | 	long	@_do_mousew
42d64     5C D0 01 00 | 	long	@_do_sin
42d68     94 D3 01 00 | 	long	@_do_stick
42d6c     24 D5 01 00 | 	long	@_do_strig
42d70     B4 D1 01 00 | 	long	@_do_sprite
42d74     50 17 01 00 | 	long	@_do_defsprite
42d78     8C 39 01 00 | 	long	@_do_getpixel
42d7c     D0 DA 01 00 | 	long	@_do_waitclock
42d80     04 0F 02 00 | 	long	@_do_negative
42d84     E8 AA 01 00 | 	long	@_do_rdpin
42d88     14 C0 01 00 | 	long	@_do_rqpin
42d8c     D8 89 01 00 | 	long	@_do_pinread
42d90     34 DC 01 00 | 	long	@_do_wrpin
42d94     B4 DC 01 00 | 	long	@_do_wxpin
42d98     34 DD 01 00 | 	long	@_do_wypin
42d9c     18 89 01 00 | 	long	@_do_pinfloat
42da0     98 89 01 00 | 	long	@_do_pinlo
42da4     58 89 01 00 | 	long	@_do_pinhi
42da8     5C 8A 01 00 | 	long	@_do_pinstart
42dac     6C 8B 01 00 | 	long	@_do_pintoggle
42db0     88 9E 01 00 | 	long	@_do_position
42db4     F4 00 01 00 | 	long	@_do_cos
42db8     B4 D6 01 00 | 	long	@_do_tan
42dbc     64 DF 00 00 | 	long	@_do_atn
42dc0     54 DE 00 00 | 	long	@_do_asin
42dc4     E4 DB 00 00 | 	long	@_do_acos
42dc8     A0 D2 01 00 | 	long	@_do_sqr
42dcc     B4 26 01 00 | 	long	@_do_fill
42dd0     60 0E 01 00 | 	long	@_do_defsnd
42dd4     60 03 01 00 | 	long	@_do_defenv
42dd8     C0 AA 01 00 | 	long	@_do_rad
42ddc     C4 1A 01 00 | 	long	@_do_deg
42de0     94 46 01 00 | 	long	@_do_int
42de4     34 8C 01 00 | 	long	@_do_play
42de8     B4 CA 01 00 | 	long	@_do_setdelay
42dec     5C CB 01 00 | 	long	@_do_setenv
42df0     04 CC 01 00 | 	long	@_do_setlen
42df4     AC CC 01 00 | 	long	@_do_setpan
42df8     FC CD 01 00 | 	long	@_do_setvol
42dfc     A4 CE 01 00 | 	long	@_do_setwave
42e00     54 CD 01 00 | 	long	@_do_setsustain
42e04     E0 BA 01 00 | 	long	@_do_release
42e08     78 37 01 00 | 	long	@_do_getenvsustain
42e0c     78 9D 01 00 | 	long	@_do_poke
42e10     C4 22 01 00 | 	long	@_do_dpoke
42e14     D4 5F 01 00 | 	long	@_do_lpoke
42e18     68 88 01 00 | 	long	@_do_peek
42e1c     18 22 01 00 | 	long	@_do_dpeek
42e20     28 5F 01 00 | 	long	@_do_lpeek
42e24     64 30 01 00 | 	long	@_do_fre
42e28     88 38 01 00 | 	long	@_do_getnotevalue
42e2c     74 E9 01 00 | 	long	@_do_getaddr
42e30     3C 43 01 00 | 	long	@_do_inkey
42e34     64 DB 00 00 | 	long	@_do_abs
42e38     F4 40 01 00 | 	long	@_do_hex
42e3c     94 E3 00 00 | 	long	@_do_bin
42e40     C4 D7 01 00 | 	long	@_do_val
42e44     00 F7 00 00 | 	long	@_do_chr
42e48     F4 DC 00 00 | 	long	@_do_asc
42e4c     58 53 01 00 | 	long	@_do_left
42e50     64 BC 01 00 | 	long	@_do_right
42e54     34 61 01 00 | 	long	@_do_mid
42e58     E4 54 01 00 | 	long	@_do_len
42e5c     48 3B 01 00 | 	long	@_do_gosub
42e60     B8 BB 01 00 | 	long	@_do_return
42e64     B4 24 01 00 | 	long	@_do_end
42e68     50 9E 01 00 | 	long	@_do_pop
42e6c     AC 5D 01 00 | 	long	@_do_log
42e70     F4 F4 00 00 | 	long	@_do_changevol
42e74     D4 F5 00 00 | 	long	@_do_changewav
42e78     E4 F3 00 00 | 	long	@_do_changepan
42e7c     DC EE 00 00 | 	long	@_do_changefreq
42e80     4C CF 01 00 | 	long	@_do_shutup
42e84     C0 BF 01 00 | 	long	@_do_round
42e88     E8 24 01 00 | 	long	@_do_enter
42e8c     C8 70 01 00 | 	long	@_do_open
42e90     A4 F9 00 00 | 	long	@_do_close
42e94     C8 30 01 00 | 	long	@_do_get
42e98     80 A5 01 00 | 	long	@_do_put
42e9c     1C E9 00 00 | 	long	@_do_cd
42ea0     EC 1A 01 00 | 	long	@_do_delete
42ea4     00 63 01 00 | 	long	@_do_mkdir
42ea8     90 E1 00 00 | 	long	@_do_blit
42eac     30 30 01 00 | 	long	@_do_framebuf
42eb0     A4 6F 01 00 | 	long	@_do_on
42eb4     6C D1 01 00 | 	long	@_do_skip
42eb8     50 47 01 00 | 	long	@_do_input
42ebc     4C AD 01 00 | 	long	@_do_read
42ec0     78 BB 01 00 | 	long	@_do_restore
42ec4     60 80 01 00 | 	long	@_do_padx
42ec8     E0 82 01 00 | 	long	@_do_pady
42ecc     60 85 01 00 | 	long	@_do_padz
42ed0     E0 73 01 00 | 	long	@_do_padrx
42ed4     60 76 01 00 | 	long	@_do_padry
42ed8     E0 78 01 00 | 	long	@_do_padrz
42edc     E0 7D 01 00 | 	long	@_do_padw
42ee0     60 7B 01 00 | 	long	@_do_pads
42ee4     14 FD 00 00 | 	long	@_do_copy
42ee8     60 FA 00 00 | 	long	@_do_coginit
42eec     9C FC 00 00 | 	long	@_do_cogstop
42ef0     AC 60 01 00 | 	long	@_do_memlo
42ef4     F0 60 01 00 | 	long	@_do_memtop
42ef8     48 C8 01 00 | 	long	@_do_setcolor
42efc     6C 36 01 00 | 	long	@_do_getcolor
42f00     4C 02 01 00 | 	long	@_do_defchar
42f04     B0 BB 01 00 | 	long	@_do_restorepalette
42f08     C8 27 01 00 | 	long	@_do_findfirst
42f0c     54 2B 01 00 | 	long	@_do_findnext
42f10     88 65 02 00 | 	long	@_hg010b_spin2_putchar
42f14     C0 5F 03 00 | 	long	@__system___struct___bas_wrap_sender_tx_
42f18     04 60 03 00 | 	long	@__system___struct___bas_wrap_sender_rx_
42f1c     4C 60 03 00 | 	long	@__system___struct___bas_wrap_sender_close_
42f20     F0 5E 03 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
42f24     60 5F 03 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
42f28     A8 5E 03 00 | 	long	@__system____strs_cl_pfunc_
42f2c     C4 D7 02 00 | 	long	@__system____root_opendir
42f30     60 D8 02 00 | 	long	@__system____root_closedir
42f34     DC D7 02 00 | 	long	@__system____root_readdir
42f38     68 D8 02 00 | 	long	@__system____root_stat
42f3c     B0 D0 02 00 | 	long	@__system____default_putc
42f40     34 D0 02 00 | 	long	@__system____default_getc
42f44     58 D1 02 00 | 	long	@__system____default_flush
42f48     6C 4A 03 00 | 	long	@_fatfs_cc_v_close
42f4c     74 4E 03 00 | 	long	@_fatfs_cc_v_read
42f50     88 4F 03 00 | 	long	@_fatfs_cc_v_write
42f54     68 50 03 00 | 	long	@_fatfs_cc_v_lseek
42f58     F0 50 03 00 | 	long	@_fatfs_cc_v_ioctl
42f5c     44 51 03 00 | 	long	@_fatfs_cc_v_open
42f60     D0 49 03 00 | 	long	@_fatfs_cc_v_creat
42f64     B0 4A 03 00 | 	long	@_fatfs_cc_v_opendir
42f68     24 4B 03 00 | 	long	@_fatfs_cc_v_closedir
42f6c     64 4B 03 00 | 	long	@_fatfs_cc_v_readdir
42f70     84 4C 03 00 | 	long	@_fatfs_cc_v_stat
42f74     04 51 03 00 | 	long	@_fatfs_cc_v_mkdir
42f78     24 51 03 00 | 	long	@_fatfs_cc_v_rmdir
42f7c     14 51 03 00 | 	long	@_fatfs_cc_v_remove
42f80     34 51 03 00 | 	long	@_fatfs_cc_v_rename
42f84     54 52 03 00 | 	long	@_fatfs_cc_v_init
42f88     5C 52 03 00 | 	long	@_fatfs_cc_v_deinit
42f8c     08 82 02 00 | 	long	@__system___tx
42f90     48 82 02 00 | 	long	@__system___rx
42f94     D8 E3 02 00 | 	long	@__system___rxtxioctl_0786
42f98     30 E4 02 00 | 	long	@__system____dummy_flush_0787
42f9c     24 52 03 00 | 	long	@_fatfs_cc_v_flush
42fa0                 | __heap_base
42fa0     00 00 00 00 
      ...             
5a6a0     00 00 00 00 
5a6a4     00 00 00 00 | 	long	0[24002]
5a6a8                 | objmem
5a6a8     00 00 00 00 
      ...             
64c18     00 00 00 00 
64c1c     00 00 00 00 | 	long	0[10590]
64c20                 | stackspace
64c20     00 00 00 00 | 	long	0[1]
64c24 100             | 	org	COG_BSS_START
64c24 100             | _var01
64c24 100             | 	res	1
64c24 101             | _var02
64c24 101             | 	res	1
64c24 102             | _var03
64c24 102             | 	res	1
64c24 103             | _var04
64c24 103             | 	res	1
64c24 104             | _var05
64c24 104             | 	res	1
64c24 105             | _var06
64c24 105             | 	res	1
64c24 106             | _var07
64c24 106             | 	res	1
64c24 107             | _var08
64c24 107             | 	res	1
64c24 108             | _var09
64c24 108             | 	res	1
64c24 109             | arg01
64c24 109             | 	res	1
64c24 10a             | arg02
64c24 10a             | 	res	1
64c24 10b             | arg03
64c24 10b             | 	res	1
64c24 10c             | arg04
64c24 10c             | 	res	1
64c24 10d             | arg05
64c24 10d             | 	res	1
64c24 10e             | arg06
64c24 10e             | 	res	1
64c24 10f             | arg07
64c24 10f             | 	res	1
64c24 110             | arg08
64c24 110             | 	res	1
64c24 111             | arg09
64c24 111             | 	res	1
64c24 112             | arg10
64c24 112             | 	res	1
64c24 113             | local01
64c24 113             | 	res	1
64c24 114             | local02
64c24 114             | 	res	1
64c24 115             | local03
64c24 115             | 	res	1
64c24 116             | local04
64c24 116             | 	res	1
64c24 117             | local05
64c24 117             | 	res	1
64c24 118             | local06
64c24 118             | 	res	1
64c24 119             | local07
64c24 119             | 	res	1
64c24 11a             | local08
64c24 11a             | 	res	1
64c24 11b             | local09
64c24 11b             | 	res	1
64c24 11c             | local10
64c24 11c             | 	res	1
64c24 11d             | local11
64c24 11d             | 	res	1
64c24 11e             | local12
64c24 11e             | 	res	1
64c24 11f             | local13
64c24 11f             | 	res	1
64c24 120             | local14
64c24 120             | 	res	1
64c24 121             | local15
64c24 121             | 	res	1
64c24 122             | local16
64c24 122             | 	res	1
64c24 123             | local17
64c24 123             | 	res	1
64c24 124             | local18
64c24 124             | 	res	1
64c24 125             | local19
64c24 125             | 	res	1
64c24 126             | local20
64c24 126             | 	res	1
64c24 127             | local21
64c24 127             | 	res	1
64c24 128             | local22
64c24 128             | 	res	1
64c24 129             | local23
64c24 129             | 	res	1
64c24 12a             | local24
64c24 12a             | 	res	1
64c24 12b             | local25
64c24 12b             | 	res	1
64c24 12c             | local26
64c24 12c             | 	res	1
64c24 12d             | local27
64c24 12d             | 	res	1
64c24 12e             | local28
64c24 12e             | 	res	1
64c24 12f             | local29
64c24 12f             | 	res	1
64c24 130             | local30
64c24 130             | 	res	1
64c24 131             | local31
64c24 131             | 	res	1
64c24 132             | local32
64c24 132             | 	res	1
64c24 133             | local33
64c24 133             | 	res	1
64c24 134             | local34
64c24 134             | 	res	1
64c24 135             | local35
64c24 135             | 	res	1
64c24 136             | local36
64c24 136             | 	res	1
64c24 137             | local37
64c24 137             | 	res	1
64c24 138             | local38
64c24 138             | 	res	1
64c24 139             | local39
64c24 139             | 	res	1
64c24 13a             | local40
64c24 13a             | 	res	1
64c24 13b             | local41
64c24 13b             | 	res	1
64c24 13c             | local42
64c24 13c             | 	res	1
64c24 13d             | local43
64c24 13d             | 	res	1
64c24 13e             | local44
64c24 13e             | 	res	1
64c24 13f             | local45
64c24 13f             | 	res	1
64c24 140             | local46
64c24 140             | 	res	1
64c24 141             | local47
64c24 141             | 	res	1
64c24 142             | local48
64c24 142             | 	res	1
64c24 143             | local49
64c24 143             | 	res	1
64c24 144             | local50
64c24 144             | 	res	1
64c24 145             | local51
64c24 145             | 	res	1
64c24 146             | local52
64c24 146             | 	res	1
64c24 147             | local53
64c24 147             | 	res	1
64c24 148             | muldiva_
64c24 148             | 	res	1
64c24 149             | muldivb_
64c24 149             | 	res	1
64c24 14a             | 	fit	480
64c24 14a             | 
