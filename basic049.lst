00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic049.p2asm"
00000                 | con
00000                 | 	_clkfreq = 344067797
00000                 | 	_clkmode = 32241403
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_pads = 213
00000                 | 	token_padw = 214
00000                 | 	token_findfirst = 215
00000                 | 	token_findnext = 216
00000                 | 	token_defchar = 217
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 344067797
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1ebf6fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 FB F5 80 FF 
00420 007 00 F0 65 FD | 	hubset	##32241400
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a FB F5 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##32241403
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 07 41 8A FF 
00440 00f 14 AA 6D FC | 	wrlong	##344067797, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 20 45 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 40 49 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 08 46 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 48 C0 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 E8 38 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 40 34 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 08 89 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 28 40 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 78 BA 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 28 FA 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa E0 F7 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb B8 09 04 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc A4 65 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     3C 56 B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     BC 6A B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     E0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10208
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     E0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10208
00840     52 00 00 FF 
00844     1C E5 05 F1 | 	add	objptr, ##42268
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     1C E5 85 F1 | 	sub	objptr, ##42268
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): audio.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     A8 6D B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     6C 75 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     F4 6E B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     DC E4 05 F1 | 	add	objptr, ##42204
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     47 00 00 FF 
009bc     0C E4 85 F1 | 	sub	objptr, ##36364
009c0     B8 6C B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     A8 3A B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     1C E5 05 F1 | 	add	objptr, ##42268
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     1C E5 85 F1 | 	sub	objptr, ##42268
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     00 E5 05 F1 | 	add	objptr, ##42240
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     00 E5 85 F1 | 	sub	objptr, ##42240
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     A0 38 B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     40 38 B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     24 E5 05 F1 | 	add	objptr, ##42276
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     E6 E4 85 F1 | 	sub	objptr, ##42214
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     E8 E4 05 F1 | 	add	objptr, ##42216
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     E6 E4 85 F1 | 	sub	objptr, ##42214
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     D0 37 B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     40 50 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     24 E5 05 F1 | 	add	objptr, ##42276
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     24 E5 85 F1 | 	sub	objptr, ##42276
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     D0 53 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then audio.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): audio.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     E4 69 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     A8 71 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     34 6B B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     BB 01 00 FF 
00ccc     0A 51 06 F6 | 	mov	local22, ##@LR__5537
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     64 36 B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     88 90 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     94 6E B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     00 E5 05 F1 | 	add	objptr, ##42240
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     00 E5 85 F1 | 	sub	objptr, ##42240
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     F0 57 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     F0 59 B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then audio.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): audio.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     70 68 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     34 70 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     C0 69 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     00 35 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     60 4F B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     54 4F B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     E4 4E B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     B0 4E B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     D0 4E B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     C0 4E B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     A4 33 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     50 33 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     20 33 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     24 E5 05 F1 | 	add	objptr, ##42276
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     E6 E4 85 F1 | 	sub	objptr, ##42214
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     E8 E4 05 F1 | 	add	objptr, ##42216
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     E6 E4 85 F1 | 	sub	objptr, ##42214
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     B8 32 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     28 4B B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     24 E5 05 F1 | 	add	objptr, ##42276
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     24 E5 85 F1 | 	sub	objptr, ##42276
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     48 4C B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     A0 31 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     4C 31 B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     1C 31 B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     24 E5 05 F1 | 	add	objptr, ##42276
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     E6 E4 85 F1 | 	sub	objptr, ##42214
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     E8 E4 05 F1 | 	add	objptr, ##42216
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     E6 E4 85 F1 | 	sub	objptr, ##42214
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     B4 30 B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     24 49 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     24 E5 05 F1 | 	add	objptr, ##42276
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     24 E5 85 F1 | 	sub	objptr, ##42276
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     BB 01 00 FF 
01328     0B 51 06 F6 | 	mov	local22, ##@LR__5538
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     C6 E4 05 F1 | 	add	objptr, ##42182
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     04 E5 85 F1 | 	sub	objptr, ##42244
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     04 E5 05 C1 |  if_b	add	objptr, ##42244
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     04 E5 85 C1 |  if_b	sub	objptr, ##42244
0137c     52 00 00 FF 
01380     04 E5 05 F1 | 	add	objptr, ##42244
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     04 E5 85 F1 | 	sub	objptr, ##42244
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     90 4A B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     C6 E4 05 F1 | 	add	objptr, ##42182
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     04 E5 85 F1 | 	sub	objptr, ##42244
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     04 E5 05 31 |  if_ae	add	objptr, ##42244
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     04 E5 85 31 |  if_ae	sub	objptr, ##42244
013dc     52 00 00 FF 
013e0     04 E5 05 F1 | 	add	objptr, ##42244
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     04 E5 85 F1 | 	sub	objptr, ##42244
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     30 4A B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     CC E4 05 F1 | 	add	objptr, ##42188
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     D4 E4 85 F1 | 	sub	objptr, ##14036
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     D4 E4 05 C1 |  if_b	add	objptr, ##14036
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     08 E5 85 C1 |  if_b	sub	objptr, ##42248
01458     52 00 00 FF 
0145c     08 E5 05 F1 | 	add	objptr, ##42248
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     08 E5 85 F1 | 	sub	objptr, ##42248
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     84 49 B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     CC E4 05 F1 | 	add	objptr, ##42188
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     08 E5 85 F1 | 	sub	objptr, ##42248
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     08 E5 05 31 |  if_ae	add	objptr, ##42248
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     08 E5 85 31 |  if_ae	sub	objptr, ##42248
014b8     52 00 00 FF 
014bc     08 E5 05 F1 | 	add	objptr, ##42248
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     08 E5 85 F1 | 	sub	objptr, ##42248
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     28 49 B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     00 E5 05 F1 | 	add	objptr, ##42240
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     00 E5 85 F1 | 	sub	objptr, ##42240
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     3C 37 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     2C 37 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     83 E4 05 F1 | 	add	objptr, ##42115
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     CC E4 85 F1 | 	sub	objptr, ##42188
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     E8 68 B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     CC E4 05 F1 | 	add	objptr, ##42188
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     CC E4 85 F1 | 	sub	objptr, ##42188
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     C0 68 B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     CC E4 05 F1 | 	add	objptr, ##42188
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     CC E4 85 F1 | 	sub	objptr, ##42188
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     98 68 B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     CC E4 05 F1 | 	add	objptr, ##42188
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     CC E4 85 F1 | 	sub	objptr, ##42188
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     0A 4A 05 F6 | 	mov	COUNT_, #10
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     E1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     ED F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10477
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
01650     13 00 00 FF 
01654     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
01658     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
0165c     05 12 66 F0 | 	shl	arg01, #5
01660     09 FB 01 F1 | 	add	result1, arg01
01664     FD FA 01 FB | 	rdlong	result1, result1
01668     13 00 00 FF 
0166c     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
01670     01 FA 55 F2 | 	cmps	result1, #1 wc
01674     B4 01 90 CD |  if_b	jmp	#LR__0061
01678     14 13 02 F6 | 	mov	arg01, local02
0167c     00 14 06 F6 | 	mov	arg02, #0
01680     84 5D B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01684     FD 2A 02 F6 | 	mov	local03, result1
01688     14 13 02 F6 | 	mov	arg01, local02
0168c     01 14 06 F6 | 	mov	arg02, #1
01690     74 5D B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01694     FD 2C 02 F6 | 	mov	local04, result1
01698     14 13 02 F6 | 	mov	arg01, local02
0169c     02 14 06 F6 | 	mov	arg02, #2
016a0     64 5D B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a4     FD 2E 02 F6 | 	mov	local05, result1
016a8     14 13 02 F6 | 	mov	arg01, local02
016ac     00 14 06 F6 | 	mov	arg02, #0
016b0     98 5D B2 FD | 	call	#_usbnew_spin2_hidpad_hat
016b4     FD 30 02 F6 | 	mov	local06, result1
016b8     14 13 02 F6 | 	mov	arg01, local02
016bc     03 14 06 F6 | 	mov	arg02, #3
016c0     44 5D B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c4     FD 32 02 F6 | 	mov	local07, result1
016c8     14 13 02 F6 | 	mov	arg01, local02
016cc     04 14 06 F6 | 	mov	arg02, #4
016d0     34 5D B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016d4     FD 34 02 F6 | 	mov	local08, result1
016d8     14 13 02 F6 | 	mov	arg01, local02
016dc     05 14 06 F6 | 	mov	arg02, #5
016e0     24 5D B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016e4     FD 36 02 F6 | 	mov	local09, result1
016e8     14 13 02 F6 | 	mov	arg01, local02
016ec     06 14 06 F6 | 	mov	arg02, #6
016f0     14 5D B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016f4     FD 38 02 F6 | 	mov	local10, result1
016f8     14 13 02 F6 | 	mov	arg01, local02
016fc     07 14 06 F6 | 	mov	arg02, #7
01700     04 5D B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01704     FD 14 02 F6 | 	mov	arg02, result1
01708     13 FB 01 F6 | 	mov	result1, local01
0170c     02 FA 65 F0 | 	shl	result1, #2
01710     51 00 00 FF 
01714     58 E5 05 F1 | 	add	objptr, ##41816
01718     F2 FA 01 F1 | 	add	result1, objptr
0171c     FD 2A 62 FC | 	wrlong	local03, result1
01720     13 FB 01 F6 | 	mov	result1, local01
01724     02 FA 65 F0 | 	shl	result1, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 FA 01 F1 | 	add	result1, objptr
01730     FD 2C 62 FC | 	wrlong	local04, result1
01734     13 FB 01 F6 | 	mov	result1, local01
01738     02 FA 65 F0 | 	shl	result1, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 FA 01 F1 | 	add	result1, objptr
01744     FD 2E 62 FC | 	wrlong	local05, result1
01748     13 2F 02 F6 | 	mov	local05, local01
0174c     02 2E 66 F0 | 	shl	local05, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 2E 02 F1 | 	add	local05, objptr
01758     17 31 62 FC | 	wrlong	local06, local05
0175c     13 31 02 F6 | 	mov	local06, local01
01760     02 30 66 F0 | 	shl	local06, #2
01764     1C E4 05 F1 | 	add	objptr, #28
01768     F2 30 02 F1 | 	add	local06, objptr
0176c     18 33 62 FC | 	wrlong	local07, local06
01770     13 33 02 F6 | 	mov	local07, local01
01774     02 32 66 F0 | 	shl	local07, #2
01778     1C E4 05 F1 | 	add	objptr, #28
0177c     F2 32 02 F1 | 	add	local07, objptr
01780     19 35 62 FC | 	wrlong	local08, local07
01784     13 35 02 F6 | 	mov	local08, local01
01788     02 34 66 F0 | 	shl	local08, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 34 02 F1 | 	add	local08, objptr
01794     1A 37 62 FC | 	wrlong	local09, local08
01798     13 37 02 F6 | 	mov	local09, local01
0179c     02 36 66 F0 | 	shl	local09, #2
017a0     1C E4 05 F1 | 	add	objptr, #28
017a4     F2 36 02 F1 | 	add	local09, objptr
017a8     1B 39 62 FC | 	wrlong	local10, local09
017ac     13 39 02 F6 | 	mov	local10, local01
017b0     02 38 66 F0 | 	shl	local10, #2
017b4     1C E4 05 F1 | 	add	objptr, #28
017b8     F2 38 02 F1 | 	add	local10, objptr
017bc     1C 15 62 FC | 	wrlong	arg02, local10
017c0     60 00 00 FF 
017c4     00 2A 06 F1 | 	add	local03, ##49152
017c8     0F 2A 46 F0 | 	shr	local03, #15
017cc     01 38 06 F6 | 	mov	local10, #1
017d0     15 39 02 F1 | 	add	local10, local03
017d4     60 00 00 FF 
017d8     00 2C 06 F1 | 	add	local04, ##49152
017dc     0F 2C 46 F0 | 	shr	local04, #15
017e0     01 36 06 F6 | 	mov	local09, #1
017e4     16 37 02 F1 | 	add	local09, local04
017e8     13 35 02 F6 | 	mov	local08, local01
017ec     02 34 66 F0 | 	shl	local08, #2
017f0     1C E4 05 F1 | 	add	objptr, #28
017f4     F2 34 02 F1 | 	add	local08, objptr
017f8     02 36 66 F0 | 	shl	local09, #2
017fc     1B 39 02 F1 | 	add	local10, local09
01800     1A 39 62 FC | 	wrlong	local10, local08
01804     13 39 02 F6 | 	mov	local10, local01
01808     02 38 66 F0 | 	shl	local10, #2
0180c     1C E4 05 F1 | 	add	objptr, #28
01810     F2 38 02 F1 | 	add	local10, objptr
01814     14 13 02 F6 | 	mov	arg01, local02
01818     52 00 00 FF 
0181c     70 E4 85 F1 | 	sub	objptr, ##42096
01820     BC 5B B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
01824     1C FB 61 FC | 	wrlong	result1, local10
01828     01 26 06 F1 | 	add	local01, #1
0182c                 | LR__0061
0182c     01 28 06 F1 | 	add	local02, #1
01830     07 28 16 F2 | 	cmp	local02, #7 wc
01834     14 FE 9F CD |  if_b	jmp	#LR__0060
01838     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
0183c                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
0183c                 | LR__0062
0183c     07 26 16 F2 | 	cmp	local01, #7 wc
01840     3C 00 90 3D |  if_ae	jmp	#LR__0064
01844     13 39 02 F6 | 	mov	local10, local01
01848     02 38 66 F0 | 	shl	local10, #2
0184c     52 00 00 FF 
01850     54 E4 05 F1 | 	add	objptr, ##42068
01854     F2 38 02 F1 | 	add	local10, objptr
01858     1C 01 68 FC | 	wrlong	#0, local10
0185c     13 39 02 F6 | 	mov	local10, local01
01860     02 38 66 F0 | 	shl	local10, #2
01864     1C E4 05 F1 | 	add	objptr, #28
01868     F2 38 02 F1 | 	add	local10, objptr
0186c     1C 01 68 FC | 	wrlong	#0, local10
01870     01 26 06 F1 | 	add	local01, #1
01874     52 00 00 FF 
01878     70 E4 85 F1 | 	sub	objptr, ##42096
0187c     BC FF 9F FD | 	jmp	#LR__0062
01880                 | LR__0063
01880                 | LR__0064
01880     A7 F0 03 F6 | 	mov	ptra, fp
01884     B2 00 A0 FD | 	call	#popregs_
01888                 | _gethdi_ret
01888     2D 00 64 FD | 	ret
0188c                 | 
0188c                 | ' 
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' 
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' '
0188c                 | ' '                                     LINE INTERPRETER/TOKENIZER
0188c                 | ' '
0188c                 | ' '-------------------------------------------------------------------------------------------------------------
0188c                 | ' 
0188c                 | ' 
0188c                 | ' sub interpret
0188c                 | _interpret
0188c     35 4A 05 F6 | 	mov	COUNT_, #53
01890     A8 00 A0 FD | 	call	#pushregs_
01894     01 00 00 FF 
01898     84 F0 07 F1 | 	add	ptra, ##644
0189c     37 00 00 FF 
018a0     1C E4 05 F1 | 	add	objptr, ##28188
018a4     F2 12 02 FB | 	rdlong	arg01, objptr
018a8     37 00 00 FF 
018ac     1C E4 85 F1 | 	sub	objptr, ##28188
018b0     B8 87 B2 FD | 	call	#__system__RTrim_S
018b4     FD 12 02 F6 | 	mov	arg01, result1
018b8     F0 86 B2 FD | 	call	#__system__LTrim_S
018bc     37 00 00 FF 
018c0     20 E4 05 F1 | 	add	objptr, ##28192
018c4     F2 FA 61 FC | 	wrlong	result1, objptr
018c8     04 E4 05 F1 | 	add	objptr, #4
018cc     FF FF FF FF 
018d0     F2 FE 6B FC | 	wrlong	##-1, objptr
018d4     1B 00 00 FF 
018d8     C4 E4 05 F1 | 	add	objptr, ##14020
018dc     F2 00 68 FC | 	wrlong	#0, objptr
018e0     08 00 00 FF 
018e4     6C E4 85 F1 | 	sub	objptr, ##4204
018e8     F2 00 68 FC | 	wrlong	#0, objptr
018ec     4A 00 00 FF 
018f0     7C E4 85 F1 | 	sub	objptr, ##38012
018f4     00 26 06 F6 | 	mov	local01, #0
018f8                 | LR__0070
018f8                 | ' 
018f8                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
018f8                 | ' 
018f8                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
018f8                 | ' 
018f8                 | ' 108 
018f8                 | ' for i=0 to 125: separators(i)=0 :next i
018f8     00 28 06 F6 | 	mov	local02, #0
018fc     38 4E 05 F1 | 	add	fp, #56
01900     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01904                 | LR__0071
01904     14 2B 02 F6 | 	mov	local03, local02
01908     02 2A 66 F0 | 	shl	local03, #2
0190c     A7 2A 02 F1 | 	add	local03, fp
01910     15 01 68 FC | 	wrlong	#0, local03
01914     01 28 06 F1 | 	add	local02, #1
01918     7E 28 56 F2 | 	cmps	local02, #126 wc
0191c     E4 FF 9F CD |  if_b	jmp	#LR__0071
01920                 | LR__0072
01920     38 4E 85 F1 | 	sub	fp, #56
01924                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01924     00 28 06 F6 | 	mov	local02, #0
01928     35 00 00 FF 
0192c     0C E4 05 F1 | 	add	objptr, ##27148
01930     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01934                 | LR__0073
01934     14 2D 02 F6 | 	mov	local04, local02
01938     03 2C 66 F0 | 	shl	local04, #3
0193c     F2 2C 02 F1 | 	add	local04, objptr
01940     BB 01 00 FF 
01944     0C 17 06 F6 | 	mov	arg03, ##@LR__5539
01948     16 17 62 FC | 	wrlong	arg03, local04
0194c     14 2D 02 F6 | 	mov	local04, local02
01950     03 2C 66 F0 | 	shl	local04, #3
01954     F2 2E 02 F6 | 	mov	local05, objptr
01958     F2 2C 02 F1 | 	add	local04, objptr
0195c     00 30 06 F6 | 	mov	local06, #0
01960     04 2C 06 F1 | 	add	local04, #4
01964     16 01 68 FC | 	wrlong	#0, local04
01968     01 28 06 F1 | 	add	local02, #1
0196c     7E 28 56 F2 | 	cmps	local02, #126 wc
01970     C0 FF 9F CD |  if_b	jmp	#LR__0073
01974                 | LR__0074
01974     02 00 00 FF 
01978     10 E4 05 F1 | 	add	objptr, ##1040
0197c     F2 12 02 FB | 	rdlong	arg01, objptr
01980     37 00 00 FF 
01984     1C E4 85 F1 | 	sub	objptr, ##28188
01988     E0 86 B2 FD | 	call	#__system__RTrim_S
0198c     FD 12 02 F6 | 	mov	arg01, result1
01990     18 86 B2 FD | 	call	#__system__LTrim_S
01994     37 00 00 FF 
01998     1C E4 05 F1 | 	add	objptr, ##28188
0199c     F2 FA 61 FC | 	wrlong	result1, objptr
019a0     BB 01 00 FF 
019a4     0D 2D 06 F6 | 	mov	local04, ##@LR__5540
019a8     1B 00 00 FF 
019ac     0C E5 05 F1 | 	add	objptr, ##14092
019b0     F2 2C 62 FC | 	wrlong	local04, objptr
019b4     1B 00 00 FF 
019b8     0C E5 85 F1 | 	sub	objptr, ##14092
019bc     F2 12 02 FB | 	rdlong	arg01, objptr
019c0     37 00 00 FF 
019c4     1C E4 85 F1 | 	sub	objptr, ##28188
019c8     09 33 02 F6 | 	mov	local07, arg01
019cc     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
019d0                 | LR__0075
019d0     19 FB C9 FA | 	rdbyte	result1, local07 wz
019d4     01 32 06 51 |  if_ne	add	local07, #1
019d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
019dc                 | LR__0076
019dc     09 33 8A F1 | 	sub	local07, arg01 wz
019e0     52 00 00 FF 
019e4     2C E5 05 F1 | 	add	objptr, ##42284
019e8     F2 32 62 FC | 	wrlong	local07, objptr
019ec                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
019ec     52 00 00 FF 
019f0     2C E5 85 F1 | 	sub	objptr, ##42284
019f4     40 2A 90 AD |  if_e	jmp	#LR__0210
019f8     00 34 06 F6 | 	mov	local08, #0
019fc                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
019fc                 | ' for i=1 to len(line$)
019fc     01 28 06 F6 | 	mov	local02, #1
01a00     37 00 00 FF 
01a04     1C E4 05 F1 | 	add	objptr, ##28188
01a08     F2 12 02 FB | 	rdlong	arg01, objptr
01a0c     37 00 00 FF 
01a10     1C E4 85 F1 | 	sub	objptr, ##28188
01a14     09 33 02 F6 | 	mov	local07, arg01
01a18     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01a1c                 | LR__0077
01a1c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a20     01 32 06 51 |  if_ne	add	local07, #1
01a24     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01a28                 | LR__0078
01a28     09 33 82 F1 | 	sub	local07, arg01
01a2c     19 37 02 F6 | 	mov	local09, local07
01a30     01 36 06 F1 | 	add	local09, #1
01a34                 | LR__0079
01a34     1B 29 52 F2 | 	cmps	local02, local09 wc
01a38     AC 00 90 3D |  if_ae	jmp	#LR__0081
01a3c                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01a3c     37 00 00 FF 
01a40     1C E4 05 F1 | 	add	objptr, ##28188
01a44     F2 12 02 FB | 	rdlong	arg01, objptr
01a48     37 00 00 FF 
01a4c     1C E4 85 F1 | 	sub	objptr, ##28188
01a50     14 15 02 F6 | 	mov	arg02, local02
01a54     01 16 06 F6 | 	mov	arg03, #1
01a58     98 82 B2 FD | 	call	#__system__Mid_S
01a5c     FD 12 02 F6 | 	mov	arg01, result1
01a60     BB 01 00 FF 
01a64     0E 15 06 F6 | 	mov	arg02, ##@LR__5541
01a68     18 61 B2 FD | 	call	#__system___string_cmp
01a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01a70     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a74     01 34 06 A6 |  if_e	mov	local08, #1
01a78     3C 00 90 AD |  if_e	jmp	#LR__0080
01a7c     37 00 00 FF 
01a80     1C E4 05 F1 | 	add	objptr, ##28188
01a84     F2 12 02 FB | 	rdlong	arg01, objptr
01a88     37 00 00 FF 
01a8c     1C E4 85 F1 | 	sub	objptr, ##28188
01a90     14 15 02 F6 | 	mov	arg02, local02
01a94     01 16 06 F6 | 	mov	arg03, #1
01a98     58 82 B2 FD | 	call	#__system__Mid_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     BB 01 00 FF 
01aa4     10 15 06 F6 | 	mov	arg02, ##@LR__5542
01aa8     D8 60 B2 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01ab4     00 34 06 A6 |  if_e	mov	local08, #0
01ab8                 | LR__0080
01ab8     14 2D 02 F6 | 	mov	local04, local02
01abc     03 2C 66 F0 | 	shl	local04, #3
01ac0     35 00 00 FF 
01ac4     0C E4 05 F1 | 	add	objptr, ##27148
01ac8     F2 2E 02 F6 | 	mov	local05, objptr
01acc     F2 2C 02 F1 | 	add	local04, objptr
01ad0     04 2C 06 F1 | 	add	local04, #4
01ad4     16 35 62 FC | 	wrlong	local08, local04
01ad8     01 28 06 F1 | 	add	local02, #1
01adc     35 00 00 FF 
01ae0     0C E4 85 F1 | 	sub	objptr, ##27148
01ae4     4C FF 9F FD | 	jmp	#LR__0079
01ae8                 | LR__0081
01ae8     01 28 06 F6 | 	mov	local02, #1
01aec                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01aec                 | LR__0082
01aec     37 00 00 FF 
01af0     1C E4 05 F1 | 	add	objptr, ##28188
01af4     F2 12 02 FB | 	rdlong	arg01, objptr
01af8     37 00 00 FF 
01afc     1C E4 85 F1 | 	sub	objptr, ##28188
01b00     14 15 02 F6 | 	mov	arg02, local02
01b04     01 16 06 F6 | 	mov	arg03, #1
01b08     E8 81 B2 FD | 	call	#__system__Mid_S
01b0c     FD 12 02 F6 | 	mov	arg01, result1
01b10     BB 01 00 FF 
01b14     12 39 06 F6 | 	mov	local10, ##@LR__5543
01b18     1C 15 02 F6 | 	mov	arg02, local10
01b1c     64 60 B2 FD | 	call	#__system___string_cmp
01b20     00 FA 0D F2 | 	cmp	result1, #0 wz
01b24     34 00 90 5D |  if_ne	jmp	#LR__0083
01b28     14 2F 02 F6 | 	mov	local05, local02
01b2c     03 2E 66 F0 | 	shl	local05, #3
01b30     35 00 00 FF 
01b34     0C E4 05 F1 | 	add	objptr, ##27148
01b38     F2 30 02 F6 | 	mov	local06, objptr
01b3c     F2 2E 02 F1 | 	add	local05, objptr
01b40     04 2E 06 F1 | 	add	local05, #4
01b44     17 3B 02 FB | 	rdlong	local11, local05
01b48     04 2E 86 F1 | 	sub	local05, #4
01b4c     1D 3D 0A F6 | 	mov	local12, local11 wz
01b50     35 00 00 FF 
01b54     0C E4 85 F1 | 	sub	objptr, ##27148
01b58     24 00 90 AD |  if_e	jmp	#LR__0084
01b5c                 | LR__0083
01b5c     52 00 00 FF 
01b60     2C E5 05 F1 | 	add	objptr, ##42284
01b64     F2 3E 02 FB | 	rdlong	local13, objptr
01b68     52 00 00 FF 
01b6c     2C E5 85 F1 | 	sub	objptr, ##42284
01b70     1F 41 02 F6 | 	mov	local14, local13
01b74     20 29 52 F2 | 	cmps	local02, local14 wc
01b78     01 28 06 C1 |  if_b	add	local02, #1
01b7c     6C FF 9F CD |  if_b	jmp	#LR__0082
01b80                 | LR__0084
01b80                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b80     52 00 00 FF 
01b84     2C E5 05 F1 | 	add	objptr, ##42284
01b88     F2 2C 02 FB | 	rdlong	local04, objptr
01b8c     52 00 00 FF 
01b90     2C E5 85 F1 | 	sub	objptr, ##42284
01b94     16 29 52 F2 | 	cmps	local02, local04 wc
01b98     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b9c     37 00 00 FF 
01ba0     1C E4 05 F1 | 	add	objptr, ##28188
01ba4     F2 30 02 FB | 	rdlong	local06, objptr
01ba8     37 00 00 FF 
01bac     1C E4 85 F1 | 	sub	objptr, ##28188
01bb0     18 13 02 F6 | 	mov	arg01, local06
01bb4     09 33 02 F6 | 	mov	local07, arg01
01bb8     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01bbc                 | LR__0085
01bbc     19 FB C9 FA | 	rdbyte	result1, local07 wz
01bc0     01 32 06 51 |  if_ne	add	local07, #1
01bc4     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01bc8                 | LR__0086
01bc8     09 33 82 F1 | 	sub	local07, arg01
01bcc     19 2F 02 F6 | 	mov	local05, local07
01bd0     17 15 02 F6 | 	mov	arg02, local05
01bd4     14 15 82 F1 | 	sub	arg02, local02
01bd8     18 13 02 F6 | 	mov	arg01, local06
01bdc     84 80 B2 FD | 	call	#__system__Right_S
01be0     FD 12 02 F6 | 	mov	arg01, result1
01be4     84 84 B2 FD | 	call	#__system__RTrim_S
01be8     FD 12 02 F6 | 	mov	arg01, result1
01bec     BC 83 B2 FD | 	call	#__system__LTrim_S
01bf0     52 00 00 FF 
01bf4     30 E5 05 F1 | 	add	objptr, ##42288
01bf8     F2 FA 61 FC | 	wrlong	result1, objptr
01bfc     1B 00 00 FF 
01c00     14 E5 85 F1 | 	sub	objptr, ##14100
01c04     F2 12 02 FB | 	rdlong	arg01, objptr
01c08     37 00 00 FF 
01c0c     1C E4 85 F1 | 	sub	objptr, ##28188
01c10     01 28 86 F1 | 	sub	local02, #1
01c14     14 15 02 F6 | 	mov	arg02, local02
01c18     C0 7F B2 FD | 	call	#__system__Left_S
01c1c     FD 12 02 F6 | 	mov	arg01, result1
01c20     48 84 B2 FD | 	call	#__system__RTrim_S
01c24     FD 12 02 F6 | 	mov	arg01, result1
01c28     80 83 B2 FD | 	call	#__system__LTrim_S
01c2c     37 00 00 FF 
01c30     1C E4 05 F1 | 	add	objptr, ##28188
01c34     F2 FA 61 FC | 	wrlong	result1, objptr
01c38     37 00 00 FF 
01c3c     1C E4 85 F1 | 	sub	objptr, ##28188
01c40     1C 00 90 FD | 	jmp	#LR__0088
01c44                 | LR__0087
01c44     BB 01 00 FF 
01c48     14 2D 06 F6 | 	mov	local04, ##@LR__5544
01c4c     52 00 00 FF 
01c50     30 E5 05 F1 | 	add	objptr, ##42288
01c54     F2 2C 62 FC | 	wrlong	local04, objptr
01c58     52 00 00 FF 
01c5c     30 E5 85 F1 | 	sub	objptr, ##42288
01c60                 | LR__0088
01c60                 | ' 
01c60                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01c60     37 00 00 FF 
01c64     24 E4 05 F1 | 	add	objptr, ##28196
01c68     F2 2C 02 FB | 	rdlong	local04, objptr
01c6c     37 00 00 FF 
01c70     24 E4 85 F1 | 	sub	objptr, ##28196
01c74     FF FF 7F FF 
01c78     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c7c     40 00 90 5D |  if_ne	jmp	#LR__0089
01c80     52 00 00 FF 
01c84     30 E5 05 F1 | 	add	objptr, ##42288
01c88     F2 12 02 FB | 	rdlong	arg01, objptr
01c8c     52 00 00 FF 
01c90     30 E5 85 F1 | 	sub	objptr, ##42288
01c94     BB 01 00 FF 
01c98     15 31 06 F6 | 	mov	local06, ##@LR__5545
01c9c     18 15 02 F6 | 	mov	arg02, local06
01ca0     E0 5E B2 FD | 	call	#__system___string_cmp
01ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca8     37 00 00 5F 
01cac     24 E4 05 51 |  if_ne	add	objptr, ##28196
01cb0     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01cb4     37 00 00 5F 
01cb8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01cbc     08 01 90 5D |  if_ne	jmp	#LR__0093
01cc0                 | LR__0089
01cc0                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01cc0     37 00 00 FF 
01cc4     24 E4 05 F1 | 	add	objptr, ##28196
01cc8     F2 2C 02 FB | 	rdlong	local04, objptr
01ccc     37 00 00 FF 
01cd0     24 E4 85 F1 | 	sub	objptr, ##28196
01cd4     FF FF 7F FF 
01cd8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01cdc     3C 00 90 5D |  if_ne	jmp	#LR__0090
01ce0     52 00 00 FF 
01ce4     30 E5 05 F1 | 	add	objptr, ##42288
01ce8     F2 12 02 FB | 	rdlong	arg01, objptr
01cec     52 00 00 FF 
01cf0     30 E5 85 F1 | 	sub	objptr, ##42288
01cf4     BB 01 00 FF 
01cf8     16 15 06 F6 | 	mov	arg02, ##@LR__5546
01cfc     84 5E B2 FD | 	call	#__system___string_cmp
01d00     00 FA 0D F2 | 	cmp	result1, #0 wz
01d04     37 00 00 AF 
01d08     24 E4 05 A1 |  if_e	add	objptr, ##28196
01d0c     F2 06 68 AC |  if_e	wrlong	#3, objptr
01d10     37 00 00 AF 
01d14     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01d18     AC 00 90 AD |  if_e	jmp	#LR__0093
01d1c                 | LR__0090
01d1c                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01d1c     37 00 00 FF 
01d20     24 E4 05 F1 | 	add	objptr, ##28196
01d24     F2 2C 02 FB | 	rdlong	local04, objptr
01d28     37 00 00 FF 
01d2c     24 E4 85 F1 | 	sub	objptr, ##28196
01d30     04 2C 0E F2 | 	cmp	local04, #4 wz
01d34     3C 00 90 5D |  if_ne	jmp	#LR__0091
01d38     52 00 00 FF 
01d3c     30 E5 05 F1 | 	add	objptr, ##42288
01d40     F2 12 02 FB | 	rdlong	arg01, objptr
01d44     52 00 00 FF 
01d48     30 E5 85 F1 | 	sub	objptr, ##42288
01d4c     BB 01 00 FF 
01d50     17 15 06 F6 | 	mov	arg02, ##@LR__5547
01d54     2C 5E B2 FD | 	call	#__system___string_cmp
01d58     00 FA 0D F2 | 	cmp	result1, #0 wz
01d5c     37 00 00 5F 
01d60     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d64     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d68     37 00 00 5F 
01d6c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01d70     54 00 90 5D |  if_ne	jmp	#LR__0093
01d74                 | LR__0091
01d74                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d74     37 00 00 FF 
01d78     24 E4 05 F1 | 	add	objptr, ##28196
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     37 00 00 FF 
01d84     24 E4 85 F1 | 	sub	objptr, ##28196
01d88     04 2C 0E F2 | 	cmp	local04, #4 wz
01d8c     38 00 90 5D |  if_ne	jmp	#LR__0092
01d90     52 00 00 FF 
01d94     30 E5 05 F1 | 	add	objptr, ##42288
01d98     F2 12 02 FB | 	rdlong	arg01, objptr
01d9c     52 00 00 FF 
01da0     30 E5 85 F1 | 	sub	objptr, ##42288
01da4     BB 01 00 FF 
01da8     18 15 06 F6 | 	mov	arg02, ##@LR__5548
01dac     D4 5D B2 FD | 	call	#__system___string_cmp
01db0     00 FA 0D F2 | 	cmp	result1, #0 wz
01db4     37 00 00 AF 
01db8     24 E4 05 A1 |  if_e	add	objptr, ##28196
01dbc     F2 04 68 AC |  if_e	wrlong	#2, objptr
01dc0     37 00 00 AF 
01dc4     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01dc8                 | LR__0092
01dc8                 | LR__0093
01dc8     38 4E 05 F1 | 	add	fp, #56
01dcc     A7 00 68 FC | 	wrlong	#0, fp
01dd0     38 4E 85 F1 | 	sub	fp, #56
01dd4     00 28 06 F6 | 	mov	local02, #0
01dd8     01 42 06 F6 | 	mov	local15, #1
01ddc                 | ' 
01ddc                 | ' ' 1b: find separators
01ddc                 | ' 
01ddc                 | ' 107
01ddc                 | ' separators(0)=0
01ddc                 | ' i=0: j=1
01ddc                 | ' do: 
01ddc                 | LR__0094
01ddc     01 28 06 F1 | 	add	local02, #1
01de0     37 00 00 FF 
01de4     1C E4 05 F1 | 	add	objptr, ##28188
01de8     F2 12 02 FB | 	rdlong	arg01, objptr
01dec     37 00 00 FF 
01df0     1C E4 85 F1 | 	sub	objptr, ##28188
01df4     14 15 02 F6 | 	mov	arg02, local02
01df8     01 16 06 F6 | 	mov	arg03, #1
01dfc     F4 7E B2 FD | 	call	#__system__Mid_S
01e00     FD 44 02 F6 | 	mov	local16, result1
01e04                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01e04     22 13 02 F6 | 	mov	arg01, local16
01e08     94 2E B0 FD | 	call	#_isseparator
01e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
01e10     1C 00 90 AD |  if_e	jmp	#LR__0095
01e14     21 2B 02 F6 | 	mov	local03, local15
01e18     02 2A 66 F0 | 	shl	local03, #2
01e1c     38 4E 05 F1 | 	add	fp, #56
01e20     A7 2A 02 F1 | 	add	local03, fp
01e24     15 29 62 FC | 	wrlong	local02, local03
01e28     01 42 06 F1 | 	add	local15, #1
01e2c     38 4E 85 F1 | 	sub	fp, #56
01e30                 | LR__0095
01e30     52 00 00 FF 
01e34     2C E5 05 F1 | 	add	objptr, ##42284
01e38     F2 2C 02 FB | 	rdlong	local04, objptr
01e3c     52 00 00 FF 
01e40     2C E5 85 F1 | 	sub	objptr, ##42284
01e44     16 29 5A F2 | 	cmps	local02, local04 wcz
01e48     90 FF 9F ED |  if_be	jmp	#LR__0094
01e4c     21 2B 02 F6 | 	mov	local03, local15
01e50     02 2A 66 F0 | 	shl	local03, #2
01e54     38 4E 05 F1 | 	add	fp, #56
01e58     A7 38 02 F6 | 	mov	local10, fp
01e5c     A7 2A 02 F1 | 	add	local03, fp
01e60     15 29 62 FC | 	wrlong	local02, local03
01e64     00 46 06 F6 | 	mov	local17, #0
01e68                 | ' for i=0 to j-1 
01e68     00 28 06 F6 | 	mov	local02, #0
01e6c     21 49 02 F6 | 	mov	local18, local15
01e70     38 4E 85 F1 | 	sub	fp, #56
01e74                 | LR__0096
01e74     24 29 52 F2 | 	cmps	local02, local18 wc
01e78     50 01 90 3D |  if_ae	jmp	#LR__0100
01e7c     14 2B 02 F6 | 	mov	local03, local02
01e80     02 2A 66 F0 | 	shl	local03, #2
01e84     38 4E 05 F1 | 	add	fp, #56
01e88     A7 2A 02 F1 | 	add	local03, fp
01e8c     15 2F 02 FB | 	rdlong	local05, local03
01e90     52 00 00 FF 
01e94     38 E5 05 F1 | 	add	objptr, ##42296
01e98     F2 2E 62 FC | 	wrlong	local05, objptr
01e9c     14 2B 02 F6 | 	mov	local03, local02
01ea0     01 2A 06 F1 | 	add	local03, #1
01ea4     02 2A 66 F0 | 	shl	local03, #2
01ea8     A7 38 02 F6 | 	mov	local10, fp
01eac     A7 2A 02 F1 | 	add	local03, fp
01eb0     15 2F 02 FB | 	rdlong	local05, local03
01eb4     04 E4 05 F1 | 	add	objptr, #4
01eb8     F2 2E 62 FC | 	wrlong	local05, objptr
01ebc                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01ebc     04 E4 85 F1 | 	sub	objptr, #4
01ec0     F2 2C 02 FB | 	rdlong	local04, objptr
01ec4     52 00 00 FF 
01ec8     38 E5 85 F1 | 	sub	objptr, ##42296
01ecc     01 2C 56 F2 | 	cmps	local04, #1 wc
01ed0     38 4E 85 F1 | 	sub	fp, #56
01ed4     68 00 90 CD |  if_b	jmp	#LR__0098
01ed8     37 00 00 FF 
01edc     1C E4 05 F1 | 	add	objptr, ##28188
01ee0     F2 12 02 FB | 	rdlong	arg01, objptr
01ee4     1B 00 00 FF 
01ee8     1C E5 05 F1 | 	add	objptr, ##14108
01eec     F2 14 02 FB | 	rdlong	arg02, objptr
01ef0     52 00 00 FF 
01ef4     38 E5 85 F1 | 	sub	objptr, ##42296
01ef8     01 16 06 F6 | 	mov	arg03, #1
01efc     F4 7D B2 FD | 	call	#__system__Mid_S
01f00     FD 4A 02 F6 | 	mov	local19, result1
01f04     BB 01 00 FF 
01f08     19 15 06 F6 | 	mov	arg02, ##@LR__5549
01f0c     25 13 02 F6 | 	mov	arg01, local19
01f10     70 5C B2 FD | 	call	#__system___string_cmp
01f14     00 FA 0D F2 | 	cmp	result1, #0 wz
01f18     24 00 90 AD |  if_e	jmp	#LR__0097
01f1c     23 39 02 F6 | 	mov	local10, local17
01f20     03 38 66 F0 | 	shl	local10, #3
01f24     35 00 00 FF 
01f28     0C E4 05 F1 | 	add	objptr, ##27148
01f2c     F2 38 02 F1 | 	add	local10, objptr
01f30     1C 4B 62 FC | 	wrlong	local19, local10
01f34     01 46 06 F1 | 	add	local17, #1
01f38     35 00 00 FF 
01f3c     0C E4 85 F1 | 	sub	objptr, ##27148
01f40                 | LR__0097
01f40                 | LR__0098
01f40     37 00 00 FF 
01f44     1C E4 05 F1 | 	add	objptr, ##28188
01f48     F2 12 02 FB | 	rdlong	arg01, objptr
01f4c     1B 00 00 FF 
01f50     1C E5 05 F1 | 	add	objptr, ##14108
01f54     F2 14 02 FB | 	rdlong	arg02, objptr
01f58     01 14 06 F1 | 	add	arg02, #1
01f5c     04 E4 05 F1 | 	add	objptr, #4
01f60     F2 16 02 FB | 	rdlong	arg03, objptr
01f64     04 E4 85 F1 | 	sub	objptr, #4
01f68     F2 3A 02 FB | 	rdlong	local11, objptr
01f6c     52 00 00 FF 
01f70     38 E5 85 F1 | 	sub	objptr, ##42296
01f74     1D 3D 02 F6 | 	mov	local12, local11
01f78     1E 17 82 F1 | 	sub	arg03, local12
01f7c     01 16 86 F1 | 	sub	arg03, #1
01f80     70 7D B2 FD | 	call	#__system__Mid_S
01f84     FD 4A 02 F6 | 	mov	local19, result1
01f88                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f88     BB 01 00 FF 
01f8c     1A 15 06 F6 | 	mov	arg02, ##@LR__5550
01f90     25 13 02 F6 | 	mov	arg01, local19
01f94     EC 5B B2 FD | 	call	#__system___string_cmp
01f98     00 FA 0D F2 | 	cmp	result1, #0 wz
01f9c     24 00 90 AD |  if_e	jmp	#LR__0099
01fa0     23 39 02 F6 | 	mov	local10, local17
01fa4     03 38 66 F0 | 	shl	local10, #3
01fa8     35 00 00 FF 
01fac     0C E4 05 F1 | 	add	objptr, ##27148
01fb0     F2 38 02 F1 | 	add	local10, objptr
01fb4     1C 4B 62 FC | 	wrlong	local19, local10
01fb8     01 46 06 F1 | 	add	local17, #1
01fbc     35 00 00 FF 
01fc0     0C E4 85 F1 | 	sub	objptr, ##27148
01fc4                 | LR__0099
01fc4     01 28 06 F1 | 	add	local02, #1
01fc8     A8 FE 9F FD | 	jmp	#LR__0096
01fcc                 | LR__0100
01fcc                 | ' 
01fcc                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01fcc                 | ' 
01fcc                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01fcc     37 00 00 FF 
01fd0     24 E4 05 F1 | 	add	objptr, ##28196
01fd4     F2 2C 0A FB | 	rdlong	local04, objptr wz
01fd8     37 00 00 FF 
01fdc     24 E4 85 F1 | 	sub	objptr, ##28196
01fe0     37 00 00 5F 
01fe4     24 E4 05 51 |  if_ne	add	objptr, ##28196
01fe8     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01fec     37 00 00 5F 
01ff0     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01ff4     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01ff8     B8 00 90 5D |  if_ne	jmp	#LR__0103
01ffc     35 00 00 FF 
02000     0C E4 05 F1 | 	add	objptr, ##27148
02004     F2 3A 02 FB | 	rdlong	local11, objptr
02008     35 00 00 FF 
0200c     0C E4 85 F1 | 	sub	objptr, ##27148
02010     1D 13 02 F6 | 	mov	arg01, local11
02014     EC 50 B0 FD | 	call	#_isdec
02018     FD 3C 02 F6 | 	mov	local12, result1
0201c     1E 31 22 F6 | 	not	local06, local12
02020     00 30 0E F2 | 	cmp	local06, #0 wz
02024     8C 00 90 AD |  if_e	jmp	#LR__0103
02028     23 29 02 F6 | 	mov	local02, local17
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
02038                 | LR__0101
02038     14 2F 02 F6 | 	mov	local05, local02
0203c     01 2E 86 F1 | 	sub	local05, #1
02040     03 2E 66 F0 | 	shl	local05, #3
02044     F2 2E 02 F1 | 	add	local05, objptr
02048     17 2D 02 FB | 	rdlong	local04, local05
0204c     14 31 02 F6 | 	mov	local06, local02
02050     01 30 86 F1 | 	sub	local06, #1
02054     03 30 66 F0 | 	shl	local06, #3
02058     F2 30 02 F1 | 	add	local06, objptr
0205c     04 30 06 F1 | 	add	local06, #4
02060     18 2B 02 FB | 	rdlong	local03, local06
02064     14 31 02 F6 | 	mov	local06, local02
02068     03 30 66 F0 | 	shl	local06, #3
0206c     F2 3C 02 F6 | 	mov	local12, objptr
02070     F2 30 02 F1 | 	add	local06, objptr
02074     18 2D 62 FC | 	wrlong	local04, local06
02078     14 3B 02 F6 | 	mov	local11, local02
0207c     1D 3F 02 F6 | 	mov	local13, local11
02080     03 3E 66 F0 | 	shl	local13, #3
02084     F2 3E 02 F1 | 	add	local13, objptr
02088     04 3E 06 F1 | 	add	local13, #4
0208c     1F 2B 62 FC | 	wrlong	local03, local13
02090     01 28 86 F1 | 	sub	local02, #1
02094     01 28 56 F2 | 	cmps	local02, #1 wc
02098     9C FF 9F 3D |  if_ae	jmp	#LR__0101
0209c                 | LR__0102
0209c     BB 01 00 FF 
020a0     1B 2D 06 F6 | 	mov	local04, ##@LR__5551
020a4     F2 2C 62 FC | 	wrlong	local04, objptr
020a8     35 00 00 FF 
020ac     0C E4 85 F1 | 	sub	objptr, ##27148
020b0     01 46 06 F1 | 	add	local17, #1
020b4                 | LR__0103
020b4     00 28 06 F6 | 	mov	local02, #0
020b8                 | ' 
020b8                 | ' ' 1e : find strings
020b8                 | ' 
020b8                 | ' i=0
020b8                 | ' do
020b8                 | LR__0104
020b8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
020b8     14 2F 02 F6 | 	mov	local05, local02
020bc     03 2E 66 F0 | 	shl	local05, #3
020c0     35 00 00 FF 
020c4     0C E4 05 F1 | 	add	objptr, ##27148
020c8     F2 2E 02 F1 | 	add	local05, objptr
020cc     17 13 02 FB | 	rdlong	arg01, local05
020d0     BB 01 00 FF 
020d4     1D 15 06 F6 | 	mov	arg02, ##@LR__5552
020d8     35 00 00 FF 
020dc     0C E4 85 F1 | 	sub	objptr, ##27148
020e0     A0 5A B2 FD | 	call	#__system___string_cmp
020e4     00 FA 0D F2 | 	cmp	result1, #0 wz
020e8     01 28 06 51 |  if_ne	add	local02, #1
020ec     20 01 90 5D |  if_ne	jmp	#LR__0109
020f0     14 4D 02 F6 | 	mov	local20, local02
020f4                 | LR__0105
020f4     14 39 02 F6 | 	mov	local10, local02
020f8     01 38 06 F1 | 	add	local10, #1
020fc     03 38 66 F0 | 	shl	local10, #3
02100     35 00 00 FF 
02104     0C E4 05 F1 | 	add	objptr, ##27148
02108     F2 38 02 F1 | 	add	local10, objptr
0210c     1C 4B 02 FB | 	rdlong	local19, local10
02110     26 39 02 F6 | 	mov	local10, local20
02114     03 38 66 F0 | 	shl	local10, #3
02118     F2 38 02 F1 | 	add	local10, objptr
0211c     26 3B 02 F6 | 	mov	local11, local20
02120     1D 41 02 F6 | 	mov	local14, local11
02124     03 40 66 F0 | 	shl	local14, #3
02128     F2 40 02 F1 | 	add	local14, objptr
0212c     20 13 02 FB | 	rdlong	arg01, local14
02130     25 3D 02 F6 | 	mov	local12, local19
02134     1E 15 02 F6 | 	mov	arg02, local12
02138     35 00 00 FF 
0213c     0C E4 85 F1 | 	sub	objptr, ##27148
02140     74 5A B2 FD | 	call	#__system___string_concat
02144     1C FB 61 FC | 	wrlong	result1, local10
02148     14 43 02 F6 | 	mov	local15, local02
0214c     01 42 06 F1 | 	add	local15, #1
02150     23 4F 02 F6 | 	mov	local21, local17
02154     01 4E 06 F1 | 	add	local21, #1
02158     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
0215c                 | LR__0106
0215c     27 43 52 F2 | 	cmps	local15, local21 wc
02160     70 00 90 3D |  if_ae	jmp	#LR__0108
02164     21 2F 02 F6 | 	mov	local05, local15
02168     01 2E 06 F1 | 	add	local05, #1
0216c     03 2E 66 F0 | 	shl	local05, #3
02170     35 00 00 FF 
02174     0C E4 05 F1 | 	add	objptr, ##27148
02178     F2 2E 02 F1 | 	add	local05, objptr
0217c     17 2D 02 FB | 	rdlong	local04, local05
02180     21 31 02 F6 | 	mov	local06, local15
02184     01 30 06 F1 | 	add	local06, #1
02188     03 30 66 F0 | 	shl	local06, #3
0218c     F2 30 02 F1 | 	add	local06, objptr
02190     04 30 06 F1 | 	add	local06, #4
02194     18 2B 02 FB | 	rdlong	local03, local06
02198     21 31 02 F6 | 	mov	local06, local15
0219c     03 30 66 F0 | 	shl	local06, #3
021a0     F2 3C 02 F6 | 	mov	local12, objptr
021a4     F2 30 02 F1 | 	add	local06, objptr
021a8     18 2D 62 FC | 	wrlong	local04, local06
021ac     21 3B 02 F6 | 	mov	local11, local15
021b0     1D 3F 02 F6 | 	mov	local13, local11
021b4     03 3E 66 F0 | 	shl	local13, #3
021b8     F2 3E 02 F1 | 	add	local13, objptr
021bc     04 3E 06 F1 | 	add	local13, #4
021c0     1F 2B 62 FC | 	wrlong	local03, local13
021c4     01 42 06 F1 | 	add	local15, #1
021c8     35 00 00 FF 
021cc     0C E4 85 F1 | 	sub	objptr, ##27148
021d0     88 FF 9F FD | 	jmp	#LR__0106
021d4                 | LR__0107
021d4                 | LR__0108
021d4     01 46 86 F1 | 	sub	local17, #1
021d8     BB 01 00 FF 
021dc     1F 15 06 F6 | 	mov	arg02, ##@LR__5553
021e0     25 13 02 F6 | 	mov	arg01, local19
021e4     9C 59 B2 FD | 	call	#__system___string_cmp
021e8     00 FA 0D F2 | 	cmp	result1, #0 wz
021ec     23 29 52 52 |  if_ne	cmps	local02, local17 wc
021f0     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
021f4                 | '   if p$<>"""" then k+=1:i+=1
021f4     BB 01 00 FF 
021f8     21 15 06 F6 | 	mov	arg02, ##@LR__5554
021fc     25 13 02 F6 | 	mov	arg01, local19
02200     80 59 B2 FD | 	call	#__system___string_cmp
02204     00 FA 0D F2 | 	cmp	result1, #0 wz
02208     01 46 06 51 |  if_ne	add	local17, #1
0220c     01 28 06 51 |  if_ne	add	local02, #1
02210                 | LR__0109
02210     23 29 52 F2 | 	cmps	local02, local17 wc
02214     A0 FE 9F CD |  if_b	jmp	#LR__0104
02218     00 28 06 F6 | 	mov	local02, #0
0221c                 | ' 
0221c                 | ' ' 1f : concatenate strings if "" detected between
0221c                 | '  
0221c                 | ' i=0
0221c                 | ' do
0221c                 | LR__0110
0221c                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0221c     14 2F 02 F6 | 	mov	local05, local02
02220     03 2E 66 F0 | 	shl	local05, #3
02224     35 00 00 FF 
02228     0C E4 05 F1 | 	add	objptr, ##27148
0222c     F2 30 02 F6 | 	mov	local06, objptr
02230     F2 2E 02 F1 | 	add	local05, objptr
02234     17 13 02 FB | 	rdlong	arg01, local05
02238     01 14 06 F6 | 	mov	arg02, #1
0223c     35 00 00 FF 
02240     0C E4 85 F1 | 	sub	objptr, ##27148
02244     1C 7A B2 FD | 	call	#__system__Right_S
02248     FD 12 02 F6 | 	mov	arg01, result1
0224c     BB 01 00 FF 
02250     23 15 06 F6 | 	mov	arg02, ##@LR__5555
02254     2C 59 B2 FD | 	call	#__system___string_cmp
02258     00 FA 0D F2 | 	cmp	result1, #0 wz
0225c     7C 01 90 5D |  if_ne	jmp	#LR__0116
02260     14 31 02 F6 | 	mov	local06, local02
02264     01 30 06 F1 | 	add	local06, #1
02268     03 30 66 F0 | 	shl	local06, #3
0226c     35 00 00 FF 
02270     0C E4 05 F1 | 	add	objptr, ##27148
02274     F2 3C 02 F6 | 	mov	local12, objptr
02278     F2 30 02 F1 | 	add	local06, objptr
0227c     18 13 02 FB | 	rdlong	arg01, local06
02280     01 14 06 F6 | 	mov	arg02, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     4C 79 B2 FD | 	call	#__system__Left_S
02290     FD 12 02 F6 | 	mov	arg01, result1
02294     BB 01 00 FF 
02298     25 15 06 F6 | 	mov	arg02, ##@LR__5556
0229c     E4 58 B2 FD | 	call	#__system___string_cmp
022a0     00 FA 0D F2 | 	cmp	result1, #0 wz
022a4     34 01 90 5D |  if_ne	jmp	#LR__0116
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     14 41 02 F6 | 	mov	local14, local02
022c0     03 40 66 F0 | 	shl	local14, #3
022c4     F2 40 02 F1 | 	add	local14, objptr
022c8     20 31 02 FB | 	rdlong	local06, local14
022cc     14 3F 02 F6 | 	mov	local13, local02
022d0     01 3E 06 F1 | 	add	local13, #1
022d4     03 3E 66 F0 | 	shl	local13, #3
022d8     F2 3E 02 F1 | 	add	local13, objptr
022dc     1F 3D 02 FB | 	rdlong	local12, local13
022e0     14 51 02 F6 | 	mov	local22, local02
022e4     01 50 06 F1 | 	add	local22, #1
022e8     28 53 02 F6 | 	mov	local23, local22
022ec     03 52 66 F0 | 	shl	local23, #3
022f0     F2 54 02 F6 | 	mov	local24, objptr
022f4     F2 52 02 F1 | 	add	local23, objptr
022f8     29 13 02 FB | 	rdlong	arg01, local23
022fc     35 00 00 FF 
02300     0C E4 85 F1 | 	sub	objptr, ##27148
02304     09 33 02 F6 | 	mov	local07, arg01
02308     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
0230c                 | LR__0111
0230c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02310     01 32 06 51 |  if_ne	add	local07, #1
02314     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
02318                 | LR__0112
02318     09 33 82 F1 | 	sub	local07, arg01
0231c     19 3B 02 F6 | 	mov	local11, local07
02320     01 3A 86 F1 | 	sub	local11, #1
02324     1E 13 02 F6 | 	mov	arg01, local12
02328     1D 15 02 F6 | 	mov	arg02, local11
0232c     34 79 B2 FD | 	call	#__system__Right_S
02330     FD 3C 02 F6 | 	mov	local12, result1
02334     18 13 02 F6 | 	mov	arg01, local06
02338     1E 15 02 F6 | 	mov	arg02, local12
0233c     78 58 B2 FD | 	call	#__system___string_concat
02340     FD 30 02 F6 | 	mov	local06, result1
02344     1C 31 62 FC | 	wrlong	local06, local10
02348                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02348     14 43 02 F6 | 	mov	local15, local02
0234c     01 42 06 F1 | 	add	local15, #1
02350     23 57 02 F6 | 	mov	local25, local17
02354     01 56 06 F1 | 	add	local25, #1
02358     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
0235c                 | LR__0113
0235c     2B 43 52 F2 | 	cmps	local15, local25 wc
02360     70 00 90 3D |  if_ae	jmp	#LR__0115
02364     21 2F 02 F6 | 	mov	local05, local15
02368     01 2E 06 F1 | 	add	local05, #1
0236c     03 2E 66 F0 | 	shl	local05, #3
02370     35 00 00 FF 
02374     0C E4 05 F1 | 	add	objptr, ##27148
02378     F2 2E 02 F1 | 	add	local05, objptr
0237c     17 2D 02 FB | 	rdlong	local04, local05
02380     21 31 02 F6 | 	mov	local06, local15
02384     01 30 06 F1 | 	add	local06, #1
02388     03 30 66 F0 | 	shl	local06, #3
0238c     F2 30 02 F1 | 	add	local06, objptr
02390     04 30 06 F1 | 	add	local06, #4
02394     18 2B 02 FB | 	rdlong	local03, local06
02398     21 31 02 F6 | 	mov	local06, local15
0239c     03 30 66 F0 | 	shl	local06, #3
023a0     F2 3C 02 F6 | 	mov	local12, objptr
023a4     F2 30 02 F1 | 	add	local06, objptr
023a8     18 2D 62 FC | 	wrlong	local04, local06
023ac     21 3B 02 F6 | 	mov	local11, local15
023b0     1D 3F 02 F6 | 	mov	local13, local11
023b4     03 3E 66 F0 | 	shl	local13, #3
023b8     F2 3E 02 F1 | 	add	local13, objptr
023bc     04 3E 06 F1 | 	add	local13, #4
023c0     1F 2B 62 FC | 	wrlong	local03, local13
023c4     01 42 06 F1 | 	add	local15, #1
023c8     35 00 00 FF 
023cc     0C E4 85 F1 | 	sub	objptr, ##27148
023d0     88 FF 9F FD | 	jmp	#LR__0113
023d4                 | LR__0114
023d4                 | LR__0115
023d4     01 28 86 F1 | 	sub	local02, #1
023d8     01 46 86 F1 | 	sub	local17, #1
023dc                 | LR__0116
023dc     01 28 06 F1 | 	add	local02, #1
023e0     23 29 52 F2 | 	cmps	local02, local17 wc
023e4     34 FE 9F CD |  if_b	jmp	#LR__0110
023e8     00 28 06 F6 | 	mov	local02, #0
023ec                 | '  
023ec                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
023ec                 | '  
023ec                 | ' i=0 
023ec                 | ' do
023ec                 | LR__0117
023ec     14 39 02 F6 | 	mov	local10, local02
023f0     03 38 66 F0 | 	shl	local10, #3
023f4     35 00 00 FF 
023f8     0C E4 05 F1 | 	add	objptr, ##27148
023fc     F2 38 02 F1 | 	add	local10, objptr
02400     1C 59 02 FB | 	rdlong	local26, local10
02404     14 39 02 F6 | 	mov	local10, local02
02408     01 38 06 F1 | 	add	local10, #1
0240c     03 38 66 F0 | 	shl	local10, #3
02410     F2 38 02 F1 | 	add	local10, objptr
02414     1C 5B 02 FB | 	rdlong	local27, local10
02418                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
02418                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
02418     BB 01 00 FF 
0241c     27 15 06 F6 | 	mov	arg02, ##@LR__5557
02420     2C 13 02 F6 | 	mov	arg01, local26
02424     35 00 00 FF 
02428     0C E4 85 F1 | 	sub	objptr, ##27148
0242c     54 57 B2 FD | 	call	#__system___string_cmp
02430     00 FA 0D F2 | 	cmp	result1, #0 wz
02434     A8 00 90 AD |  if_e	jmp	#LR__0118
02438     BB 01 00 FF 
0243c     29 15 06 F6 | 	mov	arg02, ##@LR__5558
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     3C 57 B2 FD | 	call	#__system___string_cmp
02448     FD 2A 0A F6 | 	mov	local03, result1 wz
0244c     90 00 90 AD |  if_e	jmp	#LR__0118
02450     BB 01 00 FF 
02454     2B 31 06 F6 | 	mov	local06, ##@LR__5559
02458     2C 13 02 F6 | 	mov	arg01, local26
0245c     18 15 02 F6 | 	mov	arg02, local06
02460     20 57 B2 FD | 	call	#__system___string_cmp
02464     00 FA 0D F2 | 	cmp	result1, #0 wz
02468     74 00 90 AD |  if_e	jmp	#LR__0118
0246c     BB 01 00 FF 
02470     2D 3D 06 F6 | 	mov	local12, ##@LR__5560
02474     2C 13 02 F6 | 	mov	arg01, local26
02478     1E 15 02 F6 | 	mov	arg02, local12
0247c     04 57 B2 FD | 	call	#__system___string_cmp
02480     00 FA 0D F2 | 	cmp	result1, #0 wz
02484     58 00 90 AD |  if_e	jmp	#LR__0118
02488     BB 01 00 FF 
0248c     2F 3B 06 F6 | 	mov	local11, ##@LR__5561
02490     1D 3D 02 F6 | 	mov	local12, local11
02494     2C 13 02 F6 | 	mov	arg01, local26
02498     1E 15 02 F6 | 	mov	arg02, local12
0249c     E4 56 B2 FD | 	call	#__system___string_cmp
024a0     FD 30 0A F6 | 	mov	local06, result1 wz
024a4     38 00 90 AD |  if_e	jmp	#LR__0118
024a8     BB 01 00 FF 
024ac     31 3B 06 F6 | 	mov	local11, ##@LR__5562
024b0     2C 13 02 F6 | 	mov	arg01, local26
024b4     1D 15 02 F6 | 	mov	arg02, local11
024b8     C8 56 B2 FD | 	call	#__system___string_cmp
024bc     FD 3C 0A F6 | 	mov	local12, result1 wz
024c0     1C 00 90 AD |  if_e	jmp	#LR__0118
024c4     BB 01 00 FF 
024c8     33 41 06 F6 | 	mov	local14, ##@LR__5563
024cc     2C 13 02 F6 | 	mov	arg01, local26
024d0     20 15 02 F6 | 	mov	arg02, local14
024d4     AC 56 B2 FD | 	call	#__system___string_cmp
024d8     FD 3A 0A F6 | 	mov	local11, result1 wz
024dc     20 00 90 5D |  if_ne	jmp	#LR__0119
024e0                 | LR__0118
024e0     BB 01 00 FF 
024e4     35 5D 06 F6 | 	mov	local28, ##@LR__5564
024e8     2E 3F 02 F6 | 	mov	local13, local28
024ec     2D 13 02 F6 | 	mov	arg01, local27
024f0     1F 15 02 F6 | 	mov	arg02, local13
024f4     8C 56 B2 FD | 	call	#__system___string_cmp
024f8     FD 40 0A F6 | 	mov	local14, result1 wz
024fc     B8 00 90 AD |  if_e	jmp	#LR__0122
02500                 | LR__0119
02500     BB 01 00 FF 
02504     37 5D 06 F6 | 	mov	local28, ##@LR__5565
02508     2C 13 02 F6 | 	mov	arg01, local26
0250c     2E 15 02 F6 | 	mov	arg02, local28
02510     70 56 B2 FD | 	call	#__system___string_cmp
02514     FD 3E 0A F6 | 	mov	local13, result1 wz
02518     20 00 90 5D |  if_ne	jmp	#LR__0120
0251c     BB 01 00 FF 
02520     39 53 06 F6 | 	mov	local23, ##@LR__5566
02524     29 51 02 F6 | 	mov	local22, local23
02528     2D 13 02 F6 | 	mov	arg01, local27
0252c     28 15 02 F6 | 	mov	arg02, local22
02530     50 56 B2 FD | 	call	#__system___string_cmp
02534     FD 5C 0A F6 | 	mov	local28, result1 wz
02538     7C 00 90 AD |  if_e	jmp	#LR__0122
0253c                 | LR__0120
0253c     BB 01 00 FF 
02540     3B 53 06 F6 | 	mov	local23, ##@LR__5567
02544     2C 13 02 F6 | 	mov	arg01, local26
02548     29 15 02 F6 | 	mov	arg02, local23
0254c     34 56 B2 FD | 	call	#__system___string_cmp
02550     FD 50 0A F6 | 	mov	local22, result1 wz
02554     20 00 90 5D |  if_ne	jmp	#LR__0121
02558     BB 01 00 FF 
0255c     3D 5F 06 F6 | 	mov	local29, ##@LR__5568
02560     2F 55 02 F6 | 	mov	local24, local29
02564     2D 13 02 F6 | 	mov	arg01, local27
02568     2A 15 02 F6 | 	mov	arg02, local24
0256c     14 56 B2 FD | 	call	#__system___string_cmp
02570     FD 52 0A F6 | 	mov	local23, result1 wz
02574     40 00 90 AD |  if_e	jmp	#LR__0122
02578                 | LR__0121
02578     BB 01 00 FF 
0257c     3F 61 06 F6 | 	mov	local30, ##@LR__5569
02580     30 5F 02 F6 | 	mov	local29, local30
02584     2C 13 02 F6 | 	mov	arg01, local26
02588     2F 15 02 F6 | 	mov	arg02, local29
0258c     F4 55 B2 FD | 	call	#__system___string_cmp
02590     FD 54 0A F6 | 	mov	local24, result1 wz
02594     F0 00 90 5D |  if_ne	jmp	#LR__0126
02598     BB 01 00 FF 
0259c     41 63 06 F6 | 	mov	local31, ##@LR__5570
025a0     31 61 02 F6 | 	mov	local30, local31
025a4     2D 13 02 F6 | 	mov	arg01, local27
025a8     30 15 02 F6 | 	mov	arg02, local30
025ac     D4 55 B2 FD | 	call	#__system___string_cmp
025b0     FD 5E 0A F6 | 	mov	local29, result1 wz
025b4     D0 00 90 5D |  if_ne	jmp	#LR__0126
025b8                 | LR__0122
025b8     14 39 02 F6 | 	mov	local10, local02
025bc     03 38 66 F0 | 	shl	local10, #3
025c0     35 00 00 FF 
025c4     0C E4 05 F1 | 	add	objptr, ##27148
025c8     F2 38 02 F1 | 	add	local10, objptr
025cc     2D 3D 02 F6 | 	mov	local12, local27
025d0     2C 13 02 F6 | 	mov	arg01, local26
025d4     1E 15 02 F6 | 	mov	arg02, local12
025d8     35 00 00 FF 
025dc     0C E4 85 F1 | 	sub	objptr, ##27148
025e0     D4 55 B2 FD | 	call	#__system___string_concat
025e4     1C FB 61 FC | 	wrlong	result1, local10
025e8                 | '     lparts(i).part$=s1$+s2$
025e8                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
025e8     14 43 02 F6 | 	mov	local15, local02
025ec     01 42 06 F1 | 	add	local15, #1
025f0     23 65 02 F6 | 	mov	local32, local17
025f4     01 64 06 F1 | 	add	local32, #1
025f8     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
025fc                 | LR__0123
025fc     32 43 52 F2 | 	cmps	local15, local32 wc
02600     7C 00 90 3D |  if_ae	jmp	#LR__0125
02604     21 2F 02 F6 | 	mov	local05, local15
02608     01 2E 06 F1 | 	add	local05, #1
0260c     03 2E 66 F0 | 	shl	local05, #3
02610     35 00 00 FF 
02614     0C E4 05 F1 | 	add	objptr, ##27148
02618     F2 2E 02 F1 | 	add	local05, objptr
0261c     17 2D 02 FB | 	rdlong	local04, local05
02620     21 31 02 F6 | 	mov	local06, local15
02624     01 30 06 F1 | 	add	local06, #1
02628     03 30 66 F0 | 	shl	local06, #3
0262c     F2 30 02 F1 | 	add	local06, objptr
02630     04 30 06 F1 | 	add	local06, #4
02634     18 2B 02 FB | 	rdlong	local03, local06
02638     21 31 02 F6 | 	mov	local06, local15
0263c     03 30 66 F0 | 	shl	local06, #3
02640     F2 3C 02 F6 | 	mov	local12, objptr
02644     F2 30 02 F1 | 	add	local06, objptr
02648     18 2D 62 FC | 	wrlong	local04, local06
0264c     21 3B 02 F6 | 	mov	local11, local15
02650     1D 41 02 F6 | 	mov	local14, local11
02654     20 3F 02 F6 | 	mov	local13, local14
02658     03 3E 66 F0 | 	shl	local13, #3
0265c     F2 5C 02 F6 | 	mov	local28, objptr
02660     F2 3E 02 F1 | 	add	local13, objptr
02664     04 3E 06 F1 | 	add	local13, #4
02668     1F 2B 62 FC | 	wrlong	local03, local13
0266c     04 3E 86 F1 | 	sub	local13, #4
02670     01 42 06 F1 | 	add	local15, #1
02674     35 00 00 FF 
02678     0C E4 85 F1 | 	sub	objptr, ##27148
0267c     7C FF 9F FD | 	jmp	#LR__0123
02680                 | LR__0124
02680                 | LR__0125
02680     01 28 86 F1 | 	sub	local02, #1
02684     01 46 86 F1 | 	sub	local17, #1
02688                 | LR__0126
02688     01 28 06 F1 | 	add	local02, #1
0268c     23 29 52 F2 | 	cmps	local02, local17 wc
02690     58 FD 9F CD |  if_b	jmp	#LR__0117
02694                 | '  
02694                 | ' ' 1h : now remove parts that are spaces
02694                 | ' 
02694                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02694     00 28 06 F6 | 	mov	local02, #0
02698     23 67 02 F6 | 	mov	local33, local17
0269c     01 66 06 F1 | 	add	local33, #1
026a0                 | LR__0127
026a0     33 29 52 F2 | 	cmps	local02, local33 wc
026a4     50 00 90 3D |  if_ae	jmp	#LR__0128
026a8     14 39 02 F6 | 	mov	local10, local02
026ac     03 38 66 F0 | 	shl	local10, #3
026b0     35 00 00 FF 
026b4     0C E4 05 F1 | 	add	objptr, ##27148
026b8     F2 38 02 F1 | 	add	local10, objptr
026bc     14 3D 02 F6 | 	mov	local12, local02
026c0     1E 3B 02 F6 | 	mov	local11, local12
026c4     1D 41 02 F6 | 	mov	local14, local11
026c8     03 40 66 F0 | 	shl	local14, #3
026cc     F2 3E 02 F6 | 	mov	local13, objptr
026d0     F2 40 02 F1 | 	add	local14, objptr
026d4     20 13 02 FB | 	rdlong	arg01, local14
026d8     35 00 00 FF 
026dc     0C E4 85 F1 | 	sub	objptr, ##27148
026e0     88 79 B2 FD | 	call	#__system__RTrim_S
026e4     FD 12 02 F6 | 	mov	arg01, result1
026e8     C0 78 B2 FD | 	call	#__system__LTrim_S
026ec     1C FB 61 FC | 	wrlong	result1, local10
026f0     01 28 06 F1 | 	add	local02, #1
026f4     A8 FF 9F FD | 	jmp	#LR__0127
026f8                 | LR__0128
026f8     00 28 06 F6 | 	mov	local02, #0
026fc     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
02700                 | ' i=0
02700                 | ' do 
02700                 | LR__0129
02700                 | '   if len(lparts(i).part$)=0 then 
02700     14 2F 02 F6 | 	mov	local05, local02
02704     03 2E 66 F0 | 	shl	local05, #3
02708     35 00 00 FF 
0270c     0C E4 05 F1 | 	add	objptr, ##27148
02710     F2 2E 02 F1 | 	add	local05, objptr
02714     17 13 02 FB | 	rdlong	arg01, local05
02718     35 00 00 FF 
0271c     0C E4 85 F1 | 	sub	objptr, ##27148
02720     09 33 02 F6 | 	mov	local07, arg01
02724                 | LR__0130
02724     19 FB C9 FA | 	rdbyte	result1, local07 wz
02728     01 32 06 51 |  if_ne	add	local07, #1
0272c     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
02730     09 33 8A F1 | 	sub	local07, arg01 wz
02734     C4 00 90 5D |  if_ne	jmp	#LR__0134
02738                 | '     if i=k-1 then k-=1  :  exit
02738     23 2D 02 F6 | 	mov	local04, local17
0273c     01 2C 86 F1 | 	sub	local04, #1
02740     16 29 0A F2 | 	cmp	local02, local04 wz
02744     01 46 86 A1 |  if_e	sub	local17, #1
02748     C4 00 90 AD |  if_e	jmp	#LR__0136
0274c                 | '     if i<k-1 then 
0274c     23 2D 02 F6 | 	mov	local04, local17
02750     01 2C 86 F1 | 	sub	local04, #1
02754     16 29 52 F2 | 	cmps	local02, local04 wc
02758     A0 00 90 3D |  if_ae	jmp	#LR__0133
0275c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0275c     14 43 02 F6 | 	mov	local15, local02
02760     23 69 02 F6 | 	mov	local34, local17
02764     01 68 86 F1 | 	sub	local34, #1
02768                 | LR__0131
02768     34 43 52 F2 | 	cmps	local15, local34 wc
0276c     80 00 90 3D |  if_ae	jmp	#LR__0132
02770     21 2F 02 F6 | 	mov	local05, local15
02774     01 2E 06 F1 | 	add	local05, #1
02778     03 2E 66 F0 | 	shl	local05, #3
0277c     35 00 00 FF 
02780     0C E4 05 F1 | 	add	objptr, ##27148
02784     F2 2E 02 F1 | 	add	local05, objptr
02788     17 2D 02 FB | 	rdlong	local04, local05
0278c     21 31 02 F6 | 	mov	local06, local15
02790     01 30 06 F1 | 	add	local06, #1
02794     03 30 66 F0 | 	shl	local06, #3
02798     F2 30 02 F1 | 	add	local06, objptr
0279c     04 30 06 F1 | 	add	local06, #4
027a0     18 2B 02 FB | 	rdlong	local03, local06
027a4     21 39 02 F6 | 	mov	local10, local15
027a8     1C 31 02 F6 | 	mov	local06, local10
027ac     03 30 66 F0 | 	shl	local06, #3
027b0     F2 3C 02 F6 | 	mov	local12, objptr
027b4     F2 30 02 F1 | 	add	local06, objptr
027b8     18 2D 62 FC | 	wrlong	local04, local06
027bc     21 3B 02 F6 | 	mov	local11, local15
027c0     1D 41 02 F6 | 	mov	local14, local11
027c4     20 3F 02 F6 | 	mov	local13, local14
027c8     03 3E 66 F0 | 	shl	local13, #3
027cc     F2 5C 02 F6 | 	mov	local28, objptr
027d0     F2 3E 02 F1 | 	add	local13, objptr
027d4     04 3E 06 F1 | 	add	local13, #4
027d8     1F 2B 62 FC | 	wrlong	local03, local13
027dc     04 3E 86 F1 | 	sub	local13, #4
027e0     01 42 06 F1 | 	add	local15, #1
027e4     35 00 00 FF 
027e8     0C E4 85 F1 | 	sub	objptr, ##27148
027ec     78 FF 9F FD | 	jmp	#LR__0131
027f0                 | LR__0132
027f0     01 46 86 F1 | 	sub	local17, #1
027f4                 | '       if i>0 then i-=1 
027f4     01 28 56 F2 | 	cmps	local02, #1 wc
027f8     01 28 86 31 |  if_ae	sub	local02, #1
027fc                 | LR__0133
027fc                 | LR__0134
027fc     01 28 06 F1 | 	add	local02, #1
02800     23 2D 02 F6 | 	mov	local04, local17
02804     01 2C 86 F1 | 	sub	local04, #1
02808     16 29 5A F2 | 	cmps	local02, local04 wcz
0280c     F0 FE 9F ED |  if_be	jmp	#LR__0129
02810                 | LR__0135
02810                 | LR__0136
02810                 | ' 
02810                 | ' ' 1i: lowercase all that is not a string
02810                 | ' 
02810                 | ' for j=0 to k-1
02810     00 42 06 F6 | 	mov	local15, #0
02814     23 6B 02 F6 | 	mov	local35, local17
02818                 | LR__0137
02818     35 43 52 F2 | 	cmps	local15, local35 wc
0281c     CC 00 90 3D |  if_ae	jmp	#LR__0140
02820                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
02820     21 2F 02 F6 | 	mov	local05, local15
02824     03 2E 66 F0 | 	shl	local05, #3
02828     35 00 00 FF 
0282c     0C E4 05 F1 | 	add	objptr, ##27148
02830     F2 2E 02 F1 | 	add	local05, objptr
02834     17 13 02 FB | 	rdlong	arg01, local05
02838     01 14 06 F6 | 	mov	arg02, #1
0283c     35 00 00 FF 
02840     0C E4 85 F1 | 	sub	objptr, ##27148
02844     94 73 B2 FD | 	call	#__system__Left_S
02848     FD 12 02 F6 | 	mov	arg01, result1
0284c     BB 01 00 FF 
02850     43 15 06 F6 | 	mov	arg02, ##@LR__5571
02854     2C 53 B2 FD | 	call	#__system___string_cmp
02858     00 FA 0D F2 | 	cmp	result1, #0 wz
0285c     44 00 90 5D |  if_ne	jmp	#LR__0138
02860     21 31 02 F6 | 	mov	local06, local15
02864     03 30 66 F0 | 	shl	local06, #3
02868     35 00 00 FF 
0286c     0C E4 05 F1 | 	add	objptr, ##27148
02870     F2 3C 02 F6 | 	mov	local12, objptr
02874     F2 30 02 F1 | 	add	local06, objptr
02878     18 13 02 FB | 	rdlong	arg01, local06
0287c     01 14 06 F6 | 	mov	arg02, #1
02880     35 00 00 FF 
02884     0C E4 85 F1 | 	sub	objptr, ##27148
02888     D8 73 B2 FD | 	call	#__system__Right_S
0288c     FD 12 02 F6 | 	mov	arg01, result1
02890     BB 01 00 FF 
02894     45 15 06 F6 | 	mov	arg02, ##@LR__5572
02898     E8 52 B2 FD | 	call	#__system___string_cmp
0289c     00 FA 0D F2 | 	cmp	result1, #0 wz
028a0     40 00 90 AD |  if_e	jmp	#LR__0139
028a4                 | LR__0138
028a4     21 39 02 F6 | 	mov	local10, local15
028a8     03 38 66 F0 | 	shl	local10, #3
028ac     35 00 00 FF 
028b0     0C E4 05 F1 | 	add	objptr, ##27148
028b4     F2 38 02 F1 | 	add	local10, objptr
028b8     21 3D 02 F6 | 	mov	local12, local15
028bc     1E 3B 02 F6 | 	mov	local11, local12
028c0     1D 41 02 F6 | 	mov	local14, local11
028c4     03 40 66 F0 | 	shl	local14, #3
028c8     F2 3E 02 F6 | 	mov	local13, objptr
028cc     F2 40 02 F1 | 	add	local14, objptr
028d0     20 13 02 FB | 	rdlong	arg01, local14
028d4     35 00 00 FF 
028d8     0C E4 85 F1 | 	sub	objptr, ##27148
028dc     0C 76 B2 FD | 	call	#__system__LCase_S
028e0     1C FB 61 FC | 	wrlong	result1, local10
028e4                 | LR__0139
028e4     01 42 06 F1 | 	add	local15, #1
028e8     2C FF 9F FD | 	jmp	#LR__0137
028ec                 | LR__0140
028ec                 | ' 
028ec                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
028ec                 | ' 
028ec                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
028ec     00 28 06 F6 | 	mov	local02, #0
028f0     23 6D 02 F6 | 	mov	local36, local17
028f4     01 6C 06 F1 | 	add	local36, #1
028f8     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
028fc                 | LR__0141
028fc     36 29 52 F2 | 	cmps	local02, local36 wc
02900     30 00 90 3D |  if_ae	jmp	#LR__0143
02904     14 39 02 F6 | 	mov	local10, local02
02908     03 38 66 F0 | 	shl	local10, #3
0290c     35 00 00 FF 
02910     0C E4 05 F1 | 	add	objptr, ##27148
02914     F2 38 02 F1 | 	add	local10, objptr
02918     04 38 06 F1 | 	add	local10, #4
0291c     FF FF FF FF 
02920     1C FF 6B FC | 	wrlong	##-1, local10
02924     01 28 06 F1 | 	add	local02, #1
02928     35 00 00 FF 
0292c     0C E4 85 F1 | 	sub	objptr, ##27148
02930     C8 FF 9F FD | 	jmp	#LR__0141
02934                 | LR__0142
02934                 | LR__0143
02934                 | ' 
02934                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
02934     35 00 00 FF 
02938     0C E4 05 F1 | 	add	objptr, ##27148
0293c     F2 12 02 FB | 	rdlong	arg01, objptr
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     B8 47 B0 FD | 	call	#_isdec
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     01 6E 06 56 |  if_ne	mov	local37, #1
02954     00 6E 06 A6 |  if_e	mov	local37, #0
02958                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02958     35 00 00 FF 
0295c     0C E4 05 F1 | 	add	objptr, ##27148
02960     F2 12 02 FB | 	rdlong	arg01, objptr
02964     35 00 00 FF 
02968     0C E4 85 F1 | 	sub	objptr, ##27148
0296c     BB 01 00 FF 
02970     47 15 06 F6 | 	mov	arg02, ##@LR__5573
02974     0C 52 B2 FD | 	call	#__system___string_cmp
02978     00 FA 0D F2 | 	cmp	result1, #0 wz
0297c     01 6E 06 A6 |  if_e	mov	local37, #1
02980     00 28 06 F6 | 	mov	local02, #0
02984                 | ' i=0 : do 
02984                 | LR__0144
02984                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02984     14 2F 02 F6 | 	mov	local05, local02
02988     03 2E 66 F0 | 	shl	local05, #3
0298c     35 00 00 FF 
02990     0C E4 05 F1 | 	add	objptr, ##27148
02994     F2 2E 02 F1 | 	add	local05, objptr
02998     17 13 02 FB | 	rdlong	arg01, local05
0299c     BB 01 00 FF 
029a0     4C 15 06 F6 | 	mov	arg02, ##@LR__5574
029a4     35 00 00 FF 
029a8     0C E4 85 F1 | 	sub	objptr, ##27148
029ac     D4 51 B2 FD | 	call	#__system___string_cmp
029b0     00 FA 0D F2 | 	cmp	result1, #0 wz
029b4     0C 00 90 AD |  if_e	jmp	#LR__0145
029b8     01 28 06 F1 | 	add	local02, #1
029bc     23 29 5A F2 | 	cmps	local02, local17 wcz
029c0     C0 FF 9F ED |  if_be	jmp	#LR__0144
029c4                 | LR__0145
029c4                 | ' if i<k then addptr=i+1	 							' then found
029c4     23 29 52 F2 | 	cmps	local02, local17 wc
029c8     14 6F 02 C6 |  if_b	mov	local37, local02
029cc     01 6E 06 C1 |  if_b	add	local37, #1
029d0     35 00 00 FF 
029d4     0C E4 05 F1 | 	add	objptr, ##27148
029d8                 | ' lp$=lparts(addptr).part$ 
029d8                 | ' 
029d8                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
029d8     37 2F 02 F6 | 	mov	local05, local37
029dc     03 2E 66 F0 | 	shl	local05, #3
029e0     F2 2E 02 F1 | 	add	local05, objptr
029e4     17 13 02 FB | 	rdlong	arg01, local05
029e8     01 14 06 F6 | 	mov	arg02, #1
029ec     35 00 00 FF 
029f0     0C E4 85 F1 | 	sub	objptr, ##27148
029f4     E4 71 B2 FD | 	call	#__system__Left_S
029f8     FD 12 02 F6 | 	mov	arg01, result1
029fc     BB 01 00 FF 
02a00     51 15 06 F6 | 	mov	arg02, ##@LR__5575
02a04     7C 51 B2 FD | 	call	#__system___string_cmp
02a08     00 FA 0D F2 | 	cmp	result1, #0 wz
02a0c     60 01 90 5D |  if_ne	jmp	#LR__0152
02a10     37 31 02 F6 | 	mov	local06, local37
02a14     03 30 66 F0 | 	shl	local06, #3
02a18     35 00 00 FF 
02a1c     0C E4 05 F1 | 	add	objptr, ##27148
02a20     F2 30 02 F1 | 	add	local06, objptr
02a24     18 13 02 FB | 	rdlong	arg01, local06
02a28     35 00 00 FF 
02a2c     0C E4 85 F1 | 	sub	objptr, ##27148
02a30     09 33 02 F6 | 	mov	local07, arg01
02a34     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02a38                 | LR__0146
02a38     19 FB C9 FA | 	rdbyte	result1, local07 wz
02a3c     01 32 06 51 |  if_ne	add	local07, #1
02a40     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
02a44                 | LR__0147
02a44     09 33 82 F1 | 	sub	local07, arg01
02a48     02 32 56 F2 | 	cmps	local07, #2 wc
02a4c     20 01 90 CD |  if_b	jmp	#LR__0152
02a50     01 46 06 F1 | 	add	local17, #1
02a54                 | '   k+=1
02a54                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02a54     23 29 02 F6 | 	mov	local02, local17
02a58     37 71 02 F6 | 	mov	local38, local37
02a5c     01 70 06 F1 | 	add	local38, #1
02a60     35 00 00 FF 
02a64     0C E4 05 F1 | 	add	objptr, ##27148
02a68     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a6c                 | LR__0148
02a6c     14 2F 02 F6 | 	mov	local05, local02
02a70     01 2E 86 F1 | 	sub	local05, #1
02a74     03 2E 66 F0 | 	shl	local05, #3
02a78     F2 2E 02 F1 | 	add	local05, objptr
02a7c     17 2D 02 FB | 	rdlong	local04, local05
02a80     14 31 02 F6 | 	mov	local06, local02
02a84     01 30 86 F1 | 	sub	local06, #1
02a88     03 30 66 F0 | 	shl	local06, #3
02a8c     F2 30 02 F1 | 	add	local06, objptr
02a90     04 30 06 F1 | 	add	local06, #4
02a94     18 2B 02 FB | 	rdlong	local03, local06
02a98     14 31 02 F6 | 	mov	local06, local02
02a9c     03 30 66 F0 | 	shl	local06, #3
02aa0     F2 30 02 F1 | 	add	local06, objptr
02aa4     18 2D 62 FC | 	wrlong	local04, local06
02aa8     14 3F 02 F6 | 	mov	local13, local02
02aac     03 3E 66 F0 | 	shl	local13, #3
02ab0     F2 3E 02 F1 | 	add	local13, objptr
02ab4     04 3E 06 F1 | 	add	local13, #4
02ab8     1F 2B 62 FC | 	wrlong	local03, local13
02abc     01 28 86 F1 | 	sub	local02, #1
02ac0     38 29 52 F2 | 	cmps	local02, local38 wc
02ac4     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02ac8                 | LR__0149
02ac8     37 39 02 F6 | 	mov	local10, local37
02acc     01 38 06 F1 | 	add	local10, #1
02ad0     03 38 66 F0 | 	shl	local10, #3
02ad4     F2 38 02 F1 | 	add	local10, objptr
02ad8     37 41 02 F6 | 	mov	local14, local37
02adc     03 40 66 F0 | 	shl	local14, #3
02ae0     F2 40 02 F1 | 	add	local14, objptr
02ae4     20 31 02 FB | 	rdlong	local06, local14
02ae8     37 3F 02 F6 | 	mov	local13, local37
02aec     1F 5D 02 F6 | 	mov	local28, local13
02af0     2E 51 02 F6 | 	mov	local22, local28
02af4     03 50 66 F0 | 	shl	local22, #3
02af8     F2 52 02 F6 | 	mov	local23, objptr
02afc     F2 50 02 F1 | 	add	local22, objptr
02b00     28 13 02 FB | 	rdlong	arg01, local22
02b04     35 00 00 FF 
02b08     0C E4 85 F1 | 	sub	objptr, ##27148
02b0c     09 33 02 F6 | 	mov	local07, arg01
02b10     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02b14                 | LR__0150
02b14     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b18     01 32 06 51 |  if_ne	add	local07, #1
02b1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02b20                 | LR__0151
02b20     09 33 82 F1 | 	sub	local07, arg01
02b24     19 41 02 F6 | 	mov	local14, local07
02b28     20 3B 02 F6 | 	mov	local11, local14
02b2c     01 3A 86 F1 | 	sub	local11, #1
02b30     1D 3D 02 F6 | 	mov	local12, local11
02b34     18 13 02 F6 | 	mov	arg01, local06
02b38     1E 15 02 F6 | 	mov	arg02, local12
02b3c     24 71 B2 FD | 	call	#__system__Right_S
02b40     1C FB 61 FC | 	wrlong	result1, local10
02b44     37 39 02 F6 | 	mov	local10, local37
02b48     03 38 66 F0 | 	shl	local10, #3
02b4c     35 00 00 FF 
02b50     0C E4 05 F1 | 	add	objptr, ##27148
02b54     F2 38 02 F1 | 	add	local10, objptr
02b58     BB 01 00 FF 
02b5c     53 31 06 F6 | 	mov	local06, ##@LR__5576
02b60     1C 31 62 FC | 	wrlong	local06, local10
02b64     35 00 00 FF 
02b68     0C E4 85 F1 | 	sub	objptr, ##27148
02b6c     A8 01 90 FD | 	jmp	#LR__0160
02b70                 | LR__0152
02b70     37 31 02 F6 | 	mov	local06, local37
02b74     03 30 66 F0 | 	shl	local06, #3
02b78     35 00 00 FF 
02b7c     0C E4 05 F1 | 	add	objptr, ##27148
02b80     F2 3C 02 F6 | 	mov	local12, objptr
02b84     F2 30 02 F1 | 	add	local06, objptr
02b88     18 15 02 FB | 	rdlong	arg02, local06
02b8c     BB 01 00 FF 
02b90     55 17 06 F6 | 	mov	arg03, ##@LR__5577
02b94     01 12 06 F6 | 	mov	arg01, #1
02b98     35 00 00 FF 
02b9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ba0     80 75 B2 FD | 	call	#__system__Instr
02ba4     FD 72 02 F6 | 	mov	local39, result1
02ba8                 | ' 
02ba8                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02ba8                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02ba8     01 72 56 F2 | 	cmps	local39, #1 wc
02bac     68 01 90 CD |  if_b	jmp	#LR__0159
02bb0     37 2F 02 F6 | 	mov	local05, local37
02bb4     03 2E 66 F0 | 	shl	local05, #3
02bb8     35 00 00 FF 
02bbc     0C E4 05 F1 | 	add	objptr, ##27148
02bc0     F2 2E 02 F1 | 	add	local05, objptr
02bc4     17 13 02 FB | 	rdlong	arg01, local05
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0     09 33 02 F6 | 	mov	local07, arg01
02bd4     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02bd8                 | LR__0153
02bd8     19 FB C9 FA | 	rdbyte	result1, local07 wz
02bdc     01 32 06 51 |  if_ne	add	local07, #1
02be0     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02be4                 | LR__0154
02be4     09 33 82 F1 | 	sub	local07, arg01
02be8     19 73 52 F2 | 	cmps	local39, local07 wc
02bec     28 01 90 3D |  if_ae	jmp	#LR__0159
02bf0     01 46 06 F1 | 	add	local17, #1
02bf4                 | '   k+=1
02bf4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02bf4     23 29 02 F6 | 	mov	local02, local17
02bf8     37 75 02 F6 | 	mov	local40, local37
02bfc     01 74 06 F1 | 	add	local40, #1
02c00     35 00 00 FF 
02c04     0C E4 05 F1 | 	add	objptr, ##27148
02c08     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02c0c                 | LR__0155
02c0c     14 2F 02 F6 | 	mov	local05, local02
02c10     01 2E 86 F1 | 	sub	local05, #1
02c14     03 2E 66 F0 | 	shl	local05, #3
02c18     F2 2E 02 F1 | 	add	local05, objptr
02c1c     17 2D 02 FB | 	rdlong	local04, local05
02c20     14 31 02 F6 | 	mov	local06, local02
02c24     01 30 86 F1 | 	sub	local06, #1
02c28     03 30 66 F0 | 	shl	local06, #3
02c2c     F2 30 02 F1 | 	add	local06, objptr
02c30     04 30 06 F1 | 	add	local06, #4
02c34     18 2B 02 FB | 	rdlong	local03, local06
02c38     14 31 02 F6 | 	mov	local06, local02
02c3c     03 30 66 F0 | 	shl	local06, #3
02c40     F2 30 02 F1 | 	add	local06, objptr
02c44     18 2D 62 FC | 	wrlong	local04, local06
02c48     14 3F 02 F6 | 	mov	local13, local02
02c4c     03 3E 66 F0 | 	shl	local13, #3
02c50     F2 3E 02 F1 | 	add	local13, objptr
02c54     04 3E 06 F1 | 	add	local13, #4
02c58     1F 2B 62 FC | 	wrlong	local03, local13
02c5c     01 28 86 F1 | 	sub	local02, #1
02c60     3A 29 52 F2 | 	cmps	local02, local40 wc
02c64     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c68                 | LR__0156
02c68     37 39 02 F6 | 	mov	local10, local37
02c6c     01 38 06 F1 | 	add	local10, #1
02c70     03 38 66 F0 | 	shl	local10, #3
02c74     F2 38 02 F1 | 	add	local10, objptr
02c78     37 41 02 F6 | 	mov	local14, local37
02c7c     03 40 66 F0 | 	shl	local14, #3
02c80     F2 40 02 F1 | 	add	local14, objptr
02c84     20 31 02 FB | 	rdlong	local06, local14
02c88     37 5D 02 F6 | 	mov	local28, local37
02c8c     2E 51 02 F6 | 	mov	local22, local28
02c90     03 50 66 F0 | 	shl	local22, #3
02c94     F2 52 02 F6 | 	mov	local23, objptr
02c98     F2 50 02 F1 | 	add	local22, objptr
02c9c     28 13 02 FB | 	rdlong	arg01, local22
02ca0     35 00 00 FF 
02ca4     0C E4 85 F1 | 	sub	objptr, ##27148
02ca8     09 33 02 F6 | 	mov	local07, arg01
02cac     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02cb0                 | LR__0157
02cb0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02cb4     01 32 06 51 |  if_ne	add	local07, #1
02cb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02cbc                 | LR__0158
02cbc     09 33 82 F1 | 	sub	local07, arg01
02cc0     19 15 02 F6 | 	mov	arg02, local07
02cc4     39 15 82 F1 | 	sub	arg02, local39
02cc8     18 13 02 F6 | 	mov	arg01, local06
02ccc     94 6F B2 FD | 	call	#__system__Right_S
02cd0     1C FB 61 FC | 	wrlong	result1, local10
02cd4     37 39 02 F6 | 	mov	local10, local37
02cd8     03 38 66 F0 | 	shl	local10, #3
02cdc     35 00 00 FF 
02ce0     0C E4 05 F1 | 	add	objptr, ##27148
02ce4     F2 38 02 F1 | 	add	local10, objptr
02ce8     37 3B 02 F6 | 	mov	local11, local37
02cec     1D 41 02 F6 | 	mov	local14, local11
02cf0     03 40 66 F0 | 	shl	local14, #3
02cf4     F2 3E 02 F6 | 	mov	local13, objptr
02cf8     F2 40 02 F1 | 	add	local14, objptr
02cfc     20 13 02 FB | 	rdlong	arg01, local14
02d00     39 3D 02 F6 | 	mov	local12, local39
02d04     1E 15 02 F6 | 	mov	arg02, local12
02d08     35 00 00 FF 
02d0c     0C E4 85 F1 | 	sub	objptr, ##27148
02d10     C8 6E B2 FD | 	call	#__system__Left_S
02d14     1C FB 61 FC | 	wrlong	result1, local10
02d18                 | LR__0159
02d18                 | LR__0160
02d18     37 39 02 F6 | 	mov	local10, local37
02d1c     03 38 66 F0 | 	shl	local10, #3
02d20     35 00 00 FF 
02d24     0C E4 05 F1 | 	add	objptr, ##27148
02d28     F2 38 02 F1 | 	add	local10, objptr
02d2c     1C 77 02 FB | 	rdlong	local41, local10
02d30                 | ' 
02d30                 | ' 825
02d30                 | ' lp$=lparts(addptr).part$ 
02d30                 | ' 
02d30                 | ' ' process mouse/cursor/click on/off
02d30                 | ' 
02d30                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02d30     BB 01 00 FF 
02d34     57 15 06 F6 | 	mov	arg02, ##@LR__5578
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     35 00 00 FF 
02d40     0C E4 85 F1 | 	sub	objptr, ##27148
02d44     3C 4E B2 FD | 	call	#__system___string_cmp
02d48     00 FA 0D F2 | 	cmp	result1, #0 wz
02d4c     30 00 90 AD |  if_e	jmp	#LR__0161
02d50     BB 01 00 FF 
02d54     5D 15 06 F6 | 	mov	arg02, ##@LR__5579
02d58     3B 13 02 F6 | 	mov	arg01, local41
02d5c     24 4E B2 FD | 	call	#__system___string_cmp
02d60     00 FA 0D F2 | 	cmp	result1, #0 wz
02d64     18 00 90 AD |  if_e	jmp	#LR__0161
02d68     BB 01 00 FF 
02d6c     64 15 06 F6 | 	mov	arg02, ##@LR__5580
02d70     3B 13 02 F6 | 	mov	arg01, local41
02d74     0C 4E B2 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d80                 | LR__0161
02d80                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d80     37 2F 02 F6 | 	mov	local05, local37
02d84     01 2E 06 F1 | 	add	local05, #1
02d88     03 2E 66 F0 | 	shl	local05, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 2E 02 F1 | 	add	local05, objptr
02d98     17 13 02 FB | 	rdlong	arg01, local05
02d9c     BB 01 00 FF 
02da0     6A 15 06 F6 | 	mov	arg02, ##@LR__5581
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac     D4 4D B2 FD | 	call	#__system___string_cmp
02db0     00 FA 0D F2 | 	cmp	result1, #0 wz
02db4     38 00 90 5D |  if_ne	jmp	#LR__0162
02db8     37 39 02 F6 | 	mov	local10, local37
02dbc     01 38 06 F1 | 	add	local10, #1
02dc0     03 38 66 F0 | 	shl	local10, #3
02dc4     35 00 00 FF 
02dc8     0C E4 05 F1 | 	add	objptr, ##27148
02dcc     F2 38 02 F1 | 	add	local10, objptr
02dd0     BB 01 00 FF 
02dd4     6D 31 06 F6 | 	mov	local06, ##@LR__5582
02dd8     1C 31 62 FC | 	wrlong	local06, local10
02ddc     14 E4 05 F1 | 	add	objptr, #20
02de0     01 00 80 FF 
02de4     F2 00 68 FC | 	wrlong	##512, objptr
02de8     35 00 00 FF 
02dec     20 E4 85 F1 | 	sub	objptr, ##27168
02df0                 | LR__0162
02df0                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02df0     37 2F 02 F6 | 	mov	local05, local37
02df4     01 2E 06 F1 | 	add	local05, #1
02df8     03 2E 66 F0 | 	shl	local05, #3
02dfc     35 00 00 FF 
02e00     0C E4 05 F1 | 	add	objptr, ##27148
02e04     F2 2E 02 F1 | 	add	local05, objptr
02e08     17 13 02 FB | 	rdlong	arg01, local05
02e0c     BB 01 00 FF 
02e10     6F 15 06 F6 | 	mov	arg02, ##@LR__5583
02e14     35 00 00 FF 
02e18     0C E4 85 F1 | 	sub	objptr, ##27148
02e1c     64 4D B2 FD | 	call	#__system___string_cmp
02e20     00 FA 0D F2 | 	cmp	result1, #0 wz
02e24     38 00 90 5D |  if_ne	jmp	#LR__0163
02e28     37 39 02 F6 | 	mov	local10, local37
02e2c     01 38 06 F1 | 	add	local10, #1
02e30     03 38 66 F0 | 	shl	local10, #3
02e34     35 00 00 FF 
02e38     0C E4 05 F1 | 	add	objptr, ##27148
02e3c     F2 38 02 F1 | 	add	local10, objptr
02e40     BB 01 00 FF 
02e44     73 31 06 F6 | 	mov	local06, ##@LR__5584
02e48     1C 31 62 FC | 	wrlong	local06, local10
02e4c     14 E4 05 F1 | 	add	objptr, #20
02e50     01 00 80 FF 
02e54     F2 00 68 FC | 	wrlong	##512, objptr
02e58     35 00 00 FF 
02e5c     20 E4 85 F1 | 	sub	objptr, ##27168
02e60                 | LR__0163
02e60                 | LR__0164
02e60                 | ' 		
02e60                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02e60                 | ' 
02e60                 | ' if (lp$="mode" orelse lp$="m.") then 
02e60     BB 01 00 FF 
02e64     75 15 06 F6 | 	mov	arg02, ##@LR__5585
02e68     3B 13 02 F6 | 	mov	arg01, local41
02e6c     14 4D B2 FD | 	call	#__system___string_cmp
02e70     00 FA 0D F2 | 	cmp	result1, #0 wz
02e74     18 00 90 AD |  if_e	jmp	#LR__0165
02e78     BB 01 00 FF 
02e7c     7A 15 06 F6 | 	mov	arg02, ##@LR__5586
02e80     3B 13 02 F6 | 	mov	arg01, local41
02e84     FC 4C B2 FD | 	call	#__system___string_cmp
02e88     00 FA 0D F2 | 	cmp	result1, #0 wz
02e8c     58 02 90 5D |  if_ne	jmp	#LR__0172
02e90                 | LR__0165
02e90                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     0C E4 05 F1 | 	add	objptr, ##27148
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     BB 01 00 FF 
02eb0     7D 15 06 F6 | 	mov	arg02, ##@LR__5587
02eb4     35 00 00 FF 
02eb8     0C E4 85 F1 | 	sub	objptr, ##27148
02ebc     C4 4C B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0166
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     0C E4 05 F1 | 	add	objptr, ##27148
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     BB 01 00 FF 
02ee4     83 31 06 F6 | 	mov	local06, ##@LR__5588
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     0C E4 85 F1 | 	sub	objptr, ##27148
02ef4                 | LR__0166
02ef4                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     0C E4 05 F1 | 	add	objptr, ##27148
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     BB 01 00 FF 
02f14     85 15 06 F6 | 	mov	arg02, ##@LR__5589
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     60 4C B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0167
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     BB 01 00 FF 
02f48     8E 31 06 F6 | 	mov	local06, ##@LR__5590
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58                 | LR__0167
02f58                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     BB 01 00 FF 
02f78     90 15 06 F6 | 	mov	arg02, ##@LR__5591
02f7c     35 00 00 FF 
02f80     0C E4 85 F1 | 	sub	objptr, ##27148
02f84     FC 4B B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     0C E4 05 F1 | 	add	objptr, ##27148
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     BB 01 00 FF 
02fac     99 31 06 F6 | 	mov	local06, ##@LR__5592
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     0C E4 85 F1 | 	sub	objptr, ##27148
02fbc                 | LR__0168
02fbc                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     BB 01 00 FF 
02fdc     9B 15 06 F6 | 	mov	arg02, ##@LR__5593
02fe0     35 00 00 FF 
02fe4     0C E4 85 F1 | 	sub	objptr, ##27148
02fe8     98 4B B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0169
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     0C E4 05 F1 | 	add	objptr, ##27148
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     BB 01 00 FF 
03010     A4 31 06 F6 | 	mov	local06, ##@LR__5594
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     0C E4 85 F1 | 	sub	objptr, ##27148
03020                 | LR__0169
03020                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
03020     37 2F 02 F6 | 	mov	local05, local37
03024     01 2E 06 F1 | 	add	local05, #1
03028     03 2E 66 F0 | 	shl	local05, #3
0302c     35 00 00 FF 
03030     0C E4 05 F1 | 	add	objptr, ##27148
03034     F2 2E 02 F1 | 	add	local05, objptr
03038     17 13 02 FB | 	rdlong	arg01, local05
0303c     BB 01 00 FF 
03040     A6 15 06 F6 | 	mov	arg02, ##@LR__5595
03044     35 00 00 FF 
03048     0C E4 85 F1 | 	sub	objptr, ##27148
0304c     34 4B B2 FD | 	call	#__system___string_cmp
03050     00 FA 0D F2 | 	cmp	result1, #0 wz
03054     2C 00 90 5D |  if_ne	jmp	#LR__0170
03058     37 39 02 F6 | 	mov	local10, local37
0305c     01 38 06 F1 | 	add	local10, #1
03060     03 38 66 F0 | 	shl	local10, #3
03064     35 00 00 FF 
03068     0C E4 05 F1 | 	add	objptr, ##27148
0306c     F2 38 02 F1 | 	add	local10, objptr
03070     BB 01 00 FF 
03074     A9 31 06 F6 | 	mov	local06, ##@LR__5596
03078     1C 31 62 FC | 	wrlong	local06, local10
0307c     35 00 00 FF 
03080     0C E4 85 F1 | 	sub	objptr, ##27148
03084                 | LR__0170
03084                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
03084     37 2F 02 F6 | 	mov	local05, local37
03088     01 2E 06 F1 | 	add	local05, #1
0308c     03 2E 66 F0 | 	shl	local05, #3
03090     35 00 00 FF 
03094     0C E4 05 F1 | 	add	objptr, ##27148
03098     F2 2E 02 F1 | 	add	local05, objptr
0309c     17 13 02 FB | 	rdlong	arg01, local05
030a0     BB 01 00 FF 
030a4     AB 15 06 F6 | 	mov	arg02, ##@LR__5597
030a8     35 00 00 FF 
030ac     0C E4 85 F1 | 	sub	objptr, ##27148
030b0     D0 4A B2 FD | 	call	#__system___string_cmp
030b4     00 FA 0D F2 | 	cmp	result1, #0 wz
030b8     2C 00 90 5D |  if_ne	jmp	#LR__0171
030bc     37 39 02 F6 | 	mov	local10, local37
030c0     01 38 06 F1 | 	add	local10, #1
030c4     03 38 66 F0 | 	shl	local10, #3
030c8     35 00 00 FF 
030cc     0C E4 05 F1 | 	add	objptr, ##27148
030d0     F2 38 02 F1 | 	add	local10, objptr
030d4     BB 01 00 FF 
030d8     B1 31 06 F6 | 	mov	local06, ##@LR__5598
030dc     1C 31 62 FC | 	wrlong	local06, local10
030e0     35 00 00 FF 
030e4     0C E4 85 F1 | 	sub	objptr, ##27148
030e8                 | LR__0171
030e8                 | LR__0172
030e8                 | ' 
030e8                 | ' ' find part types 
030e8                 | ' 
030e8                 | ' for i=0 to k-1
030e8     00 28 06 F6 | 	mov	local02, #0
030ec     23 79 02 F6 | 	mov	local42, local17
030f0                 | LR__0173
030f0     3C 29 52 F2 | 	cmps	local02, local42 wc
030f4     A4 07 90 3D |  if_ae	jmp	#LR__0185
030f8     14 39 02 F6 | 	mov	local10, local02
030fc     03 38 66 F0 | 	shl	local10, #3
03100     35 00 00 FF 
03104     0C E4 05 F1 | 	add	objptr, ##27148
03108     F2 38 02 F1 | 	add	local10, objptr
0310c     14 3B 02 F6 | 	mov	local11, local02
03110     1D 41 02 F6 | 	mov	local14, local11
03114     20 3F 02 F6 | 	mov	local13, local14
03118     03 3E 66 F0 | 	shl	local13, #3
0311c     F2 3E 02 F1 | 	add	local13, objptr
03120     1F 13 02 FB | 	rdlong	arg01, local13
03124     35 00 00 FF 
03128     0C E4 85 F1 | 	sub	objptr, ##27148
0312c     70 1B B0 FD | 	call	#_isseparator
03130     FD FA E1 F8 | 	getbyte	result1, result1, #0
03134     04 38 06 F1 | 	add	local10, #4
03138     1C FB 61 FC | 	wrlong	result1, local10
0313c                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0313c     14 39 02 F6 | 	mov	local10, local02
03140     03 38 66 F0 | 	shl	local10, #3
03144     35 00 00 FF 
03148     0C E4 05 F1 | 	add	objptr, ##27148
0314c     F2 38 02 F1 | 	add	local10, objptr
03150     04 38 06 F1 | 	add	local10, #4
03154     1C 3D 02 FB | 	rdlong	local12, local10
03158     01 3C 56 F2 | 	cmps	local12, #1 wc
0315c     35 00 00 FF 
03160     0C E4 85 F1 | 	sub	objptr, ##27148
03164     2C 07 90 3D |  if_ae	jmp	#LR__0184
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     14 3B 02 F6 | 	mov	local11, local02
03180     1D 41 02 F6 | 	mov	local14, local11
03184     20 3F 02 F6 | 	mov	local13, local14
03188     03 3E 66 F0 | 	shl	local13, #3
0318c     F2 3E 02 F1 | 	add	local13, objptr
03190     1F 13 02 FB | 	rdlong	arg01, local13
03194     35 00 00 FF 
03198     0C E4 85 F1 | 	sub	objptr, ##27148
0319c     4C 13 B0 FD | 	call	#_isoperator
031a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
031a4     04 38 06 F1 | 	add	local10, #4
031a8     1C FB 61 FC | 	wrlong	result1, local10
031ac                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031ac     14 39 02 F6 | 	mov	local10, local02
031b0     03 38 66 F0 | 	shl	local10, #3
031b4     35 00 00 FF 
031b8     0C E4 05 F1 | 	add	objptr, ##27148
031bc     F2 38 02 F1 | 	add	local10, objptr
031c0     04 38 06 F1 | 	add	local10, #4
031c4     1C 3D 02 FB | 	rdlong	local12, local10
031c8     01 3C 56 F2 | 	cmps	local12, #1 wc
031cc     35 00 00 FF 
031d0     0C E4 85 F1 | 	sub	objptr, ##27148
031d4     BC 06 90 3D |  if_ae	jmp	#LR__0184
031d8     14 39 02 F6 | 	mov	local10, local02
031dc     03 38 66 F0 | 	shl	local10, #3
031e0     35 00 00 FF 
031e4     0C E4 05 F1 | 	add	objptr, ##27148
031e8     F2 38 02 F1 | 	add	local10, objptr
031ec     14 3B 02 F6 | 	mov	local11, local02
031f0     1D 41 02 F6 | 	mov	local14, local11
031f4     20 3F 02 F6 | 	mov	local13, local14
031f8     03 3E 66 F0 | 	shl	local13, #3
031fc     F2 3E 02 F1 | 	add	local13, objptr
03200     1F 13 02 FB | 	rdlong	arg01, local13
03204     35 00 00 FF 
03208     0C E4 85 F1 | 	sub	objptr, ##27148
0320c                 | ' 
0320c                 | ' select case s
0320c     BC 01 00 FF 
03210     B6 14 06 F6 | 	mov	arg02, ##@LR__5689
03214     6C 49 B2 FD | 	call	#__system___string_cmp
03218     00 FA 0D F2 | 	cmp	result1, #0 wz
0321c     1B FA 05 A6 |  if_e	mov	result1, #27
03220     00 FA 05 56 |  if_ne	mov	result1, #0
03224     FD FA E1 F8 | 	getbyte	result1, result1, #0
03228     04 38 06 F1 | 	add	local10, #4
0322c     1C FB 61 FC | 	wrlong	result1, local10
03230                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 38 02 F1 | 	add	local10, objptr
03244     04 38 06 F1 | 	add	local10, #4
03248     1C 3D 02 FB | 	rdlong	local12, local10
0324c     01 3C 56 F2 | 	cmps	local12, #1 wc
03250     35 00 00 FF 
03254     0C E4 85 F1 | 	sub	objptr, ##27148
03258     38 06 90 3D |  if_ae	jmp	#LR__0184
0325c     14 39 02 F6 | 	mov	local10, local02
03260     03 38 66 F0 | 	shl	local10, #3
03264     35 00 00 FF 
03268     0C E4 05 F1 | 	add	objptr, ##27148
0326c     F2 38 02 F1 | 	add	local10, objptr
03270     14 3B 02 F6 | 	mov	local11, local02
03274     1D 41 02 F6 | 	mov	local14, local11
03278     20 3F 02 F6 | 	mov	local13, local14
0327c     03 3E 66 F0 | 	shl	local13, #3
03280     F2 3E 02 F1 | 	add	local13, objptr
03284     1F 13 02 FB | 	rdlong	arg01, local13
03288     35 00 00 FF 
0328c     0C E4 85 F1 | 	sub	objptr, ##27148
03290     0C 1C B0 FD | 	call	#_iscommand
03294     FD FA E1 F8 | 	getbyte	result1, result1, #0
03298     04 38 06 F1 | 	add	local10, #4
0329c     1C FB 61 FC | 	wrlong	result1, local10
032a0                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032a0     14 39 02 F6 | 	mov	local10, local02
032a4     03 38 66 F0 | 	shl	local10, #3
032a8     35 00 00 FF 
032ac     0C E4 05 F1 | 	add	objptr, ##27148
032b0     F2 38 02 F1 | 	add	local10, objptr
032b4     04 38 06 F1 | 	add	local10, #4
032b8     1C 3D 02 FB | 	rdlong	local12, local10
032bc     01 3C 56 F2 | 	cmps	local12, #1 wc
032c0     35 00 00 FF 
032c4     0C E4 85 F1 | 	sub	objptr, ##27148
032c8     C8 05 90 3D |  if_ae	jmp	#LR__0184
032cc     14 39 02 F6 | 	mov	local10, local02
032d0     03 38 66 F0 | 	shl	local10, #3
032d4     35 00 00 FF 
032d8     0C E4 05 F1 | 	add	objptr, ##27148
032dc     F2 38 02 F1 | 	add	local10, objptr
032e0     14 3B 02 F6 | 	mov	local11, local02
032e4     1D 41 02 F6 | 	mov	local14, local11
032e8     20 3F 02 F6 | 	mov	local13, local14
032ec     03 3E 66 F0 | 	shl	local13, #3
032f0     F2 5C 02 F6 | 	mov	local28, objptr
032f4     F2 3E 02 F1 | 	add	local13, objptr
032f8     1F 13 02 FB | 	rdlong	arg01, local13
032fc     35 00 00 FF 
03300     0C E4 85 F1 | 	sub	objptr, ##27148
03304     F8 2C B0 FD | 	call	#_isfunction
03308     FD FA E1 F8 | 	getbyte	result1, result1, #0
0330c     04 38 06 F1 | 	add	local10, #4
03310     1C FB 61 FC | 	wrlong	result1, local10
03314                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03314     14 39 02 F6 | 	mov	local10, local02
03318     03 38 66 F0 | 	shl	local10, #3
0331c     35 00 00 FF 
03320     0C E4 05 F1 | 	add	objptr, ##27148
03324     F2 38 02 F1 | 	add	local10, objptr
03328     04 38 06 F1 | 	add	local10, #4
0332c     1C 3D 02 FB | 	rdlong	local12, local10
03330     01 3C 56 F2 | 	cmps	local12, #1 wc
03334     35 00 00 FF 
03338     0C E4 85 F1 | 	sub	objptr, ##27148
0333c     54 05 90 3D |  if_ae	jmp	#LR__0184
03340     14 39 02 F6 | 	mov	local10, local02
03344     03 38 66 F0 | 	shl	local10, #3
03348     35 00 00 FF 
0334c     0C E4 05 F1 | 	add	objptr, ##27148
03350     F2 38 02 F1 | 	add	local10, objptr
03354     14 3B 02 F6 | 	mov	local11, local02
03358     1D 41 02 F6 | 	mov	local14, local11
0335c     03 40 66 F0 | 	shl	local14, #3
03360     F2 3E 02 F6 | 	mov	local13, objptr
03364     F2 40 02 F1 | 	add	local14, objptr
03368     20 13 02 FB | 	rdlong	arg01, local14
0336c     35 00 00 FF 
03370     0C E4 85 F1 | 	sub	objptr, ##27148
03374     BC 15 B0 FD | 	call	#_isnotename
03378     04 38 06 F1 | 	add	local10, #4
0337c     1C FB 61 FC | 	wrlong	result1, local10
03380                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03380                 | ' if lparts(i).token>0 then 
03380     14 39 02 F6 | 	mov	local10, local02
03384     03 38 66 F0 | 	shl	local10, #3
03388     35 00 00 FF 
0338c     0C E4 05 F1 | 	add	objptr, ##27148
03390     F2 38 02 F1 | 	add	local10, objptr
03394     04 38 06 F1 | 	add	local10, #4
03398     1C 31 02 FB | 	rdlong	local06, local10
0339c     01 30 56 F2 | 	cmps	local06, #1 wc
033a0     35 00 00 FF 
033a4     0C E4 85 F1 | 	sub	objptr, ##27148
033a8     8C 00 90 CD |  if_b	jmp	#LR__0174
033ac     14 2F 02 F6 | 	mov	local05, local02
033b0     03 2E 66 F0 | 	shl	local05, #3
033b4     35 00 00 FF 
033b8     0C E4 05 F1 | 	add	objptr, ##27148
033bc     F2 2E 02 F1 | 	add	local05, objptr
033c0     04 2E 06 F1 | 	add	local05, #4
033c4     17 3D 02 FB | 	rdlong	local12, local05
033c8     1E 13 02 F6 | 	mov	arg01, local12
033cc     35 00 00 FF 
033d0     0C E4 85 F1 | 	sub	objptr, ##27148
033d4     50 3E B0 FD | 	call	#_getnoteval
033d8     FD 7A 02 F6 | 	mov	local43, result1
033dc     14 39 02 F6 | 	mov	local10, local02
033e0     03 38 66 F0 | 	shl	local10, #3
033e4     35 00 00 FF 
033e8     0C E4 05 F1 | 	add	objptr, ##27148
033ec     F2 38 02 F1 | 	add	local10, objptr
033f0     3D 13 02 F6 | 	mov	arg01, local43
033f4     35 00 00 FF 
033f8     0C E4 85 F1 | 	sub	objptr, ##27148
033fc     D4 69 B2 FD | 	call	#__system__str_S
03400     1C FB 61 FC | 	wrlong	result1, local10
03404     14 2D 02 F6 | 	mov	local04, local02
03408     16 2B 02 F6 | 	mov	local03, local04
0340c     15 39 02 F6 | 	mov	local10, local03
03410     03 38 66 F0 | 	shl	local10, #3
03414     35 00 00 FF 
03418     0C E4 05 F1 | 	add	objptr, ##27148
0341c     F2 38 02 F1 | 	add	local10, objptr
03420     04 38 06 F1 | 	add	local10, #4
03424     01 00 80 FF 
03428     1C 05 68 FC | 	wrlong	##514, local10
0342c     35 00 00 FF 
03430     0C E4 85 F1 | 	sub	objptr, ##27148
03434     5C 04 90 FD | 	jmp	#LR__0184
03438                 | LR__0174
03438     14 39 02 F6 | 	mov	local10, local02
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     14 41 02 F6 | 	mov	local14, local02
03450     03 40 66 F0 | 	shl	local14, #3
03454     F2 40 02 F1 | 	add	local14, objptr
03458     20 13 02 FB | 	rdlong	arg01, local14
0345c     35 00 00 FF 
03460     0C E4 85 F1 | 	sub	objptr, ##27148
03464     64 13 B0 FD | 	call	#_ischannel
03468     04 38 06 F1 | 	add	local10, #4
0346c     1C FB 61 FC | 	wrlong	result1, local10
03470                 | ' 
03470                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
03470                 | ' 
03470                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03470     14 39 02 F6 | 	mov	local10, local02
03474     03 38 66 F0 | 	shl	local10, #3
03478     35 00 00 FF 
0347c     0C E4 05 F1 | 	add	objptr, ##27148
03480     F2 38 02 F1 | 	add	local10, objptr
03484     04 38 06 F1 | 	add	local10, #4
03488     1C 31 02 FB | 	rdlong	local06, local10
0348c     01 30 56 F2 | 	cmps	local06, #1 wc
03490     35 00 00 FF 
03494     0C E4 85 F1 | 	sub	objptr, ##27148
03498     74 00 90 CD |  if_b	jmp	#LR__0175
0349c     14 39 02 F6 | 	mov	local10, local02
034a0     03 38 66 F0 | 	shl	local10, #3
034a4     35 00 00 FF 
034a8     0C E4 05 F1 | 	add	objptr, ##27148
034ac     F2 38 02 F1 | 	add	local10, objptr
034b0     14 3B 02 F6 | 	mov	local11, local02
034b4     1D 41 02 F6 | 	mov	local14, local11
034b8     03 40 66 F0 | 	shl	local14, #3
034bc     F2 3E 02 F6 | 	mov	local13, objptr
034c0     F2 40 02 F1 | 	add	local14, objptr
034c4     20 13 02 FB | 	rdlong	arg01, local14
034c8     01 3C 06 F6 | 	mov	local12, #1
034cc     01 14 06 F6 | 	mov	arg02, #1
034d0     35 00 00 FF 
034d4     0C E4 85 F1 | 	sub	objptr, ##27148
034d8     88 67 B2 FD | 	call	#__system__Right_S
034dc     1C FB 61 FC | 	wrlong	result1, local10
034e0     14 2D 02 F6 | 	mov	local04, local02
034e4     16 2B 02 F6 | 	mov	local03, local04
034e8     15 39 02 F6 | 	mov	local10, local03
034ec     03 38 66 F0 | 	shl	local10, #3
034f0     35 00 00 FF 
034f4     0C E4 05 F1 | 	add	objptr, ##27148
034f8     F2 38 02 F1 | 	add	local10, objptr
034fc     04 38 06 F1 | 	add	local10, #4
03500     1C 59 68 FC | 	wrlong	#44, local10
03504     35 00 00 FF 
03508     0C E4 85 F1 | 	sub	objptr, ##27148
0350c     84 03 90 FD | 	jmp	#LR__0184
03510                 | LR__0175
03510     14 39 02 F6 | 	mov	local10, local02
03514     03 38 66 F0 | 	shl	local10, #3
03518     35 00 00 FF 
0351c     0C E4 05 F1 | 	add	objptr, ##27148
03520     F2 38 02 F1 | 	add	local10, objptr
03524     14 3B 02 F6 | 	mov	local11, local02
03528     1D 41 02 F6 | 	mov	local14, local11
0352c     03 40 66 F0 | 	shl	local14, #3
03530     F2 3E 02 F6 | 	mov	local13, objptr
03534     F2 40 02 F1 | 	add	local14, objptr
03538     20 13 02 FB | 	rdlong	arg01, local14
0353c     35 00 00 FF 
03540     0C E4 85 F1 | 	sub	objptr, ##27148
03544     6C 13 B0 FD | 	call	#_isconstant
03548     04 38 06 F1 | 	add	local10, #4
0354c     1C FB 61 FC | 	wrlong	result1, local10
03550                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03550     14 39 02 F6 | 	mov	local10, local02
03554     03 38 66 F0 | 	shl	local10, #3
03558     35 00 00 FF 
0355c     0C E4 05 F1 | 	add	objptr, ##27148
03560     F2 38 02 F1 | 	add	local10, objptr
03564     04 38 06 F1 | 	add	local10, #4
03568     1C 3D 02 FB | 	rdlong	local12, local10
0356c     01 3C 56 F2 | 	cmps	local12, #1 wc
03570     35 00 00 FF 
03574     0C E4 85 F1 | 	sub	objptr, ##27148
03578     94 00 90 CD |  if_b	jmp	#LR__0176
0357c     14 39 02 F6 | 	mov	local10, local02
03580     03 38 66 F0 | 	shl	local10, #3
03584     35 00 00 FF 
03588     0C E4 05 F1 | 	add	objptr, ##27148
0358c     F2 38 02 F1 | 	add	local10, objptr
03590     14 3D 02 F6 | 	mov	local12, local02
03594     1E 3B 02 F6 | 	mov	local11, local12
03598     1D 41 02 F6 | 	mov	local14, local11
0359c     03 40 66 F0 | 	shl	local14, #3
035a0     F2 3E 02 F6 | 	mov	local13, objptr
035a4     F2 40 02 F1 | 	add	local14, objptr
035a8     04 40 06 F1 | 	add	local14, #4
035ac     20 13 02 FB | 	rdlong	arg01, local14
035b0     04 40 86 F1 | 	sub	local14, #4
035b4     35 00 00 FF 
035b8     0C E4 85 F1 | 	sub	objptr, ##27148
035bc     09 13 52 F6 | 	abs	arg01, arg01 wc
035c0     1F 7C C6 C9 |  if_b	decod	local44, #31
035c4     00 7C 06 36 |  if_ae	mov	local44, #0
035c8     08 70 B2 FD | 	call	#__system___float_fromuns
035cc     3E FB 61 F5 | 	xor	result1, local44
035d0     FD 12 02 F6 | 	mov	arg01, result1
035d4     FC 67 B2 FD | 	call	#__system__str_S
035d8     1C FB 61 FC | 	wrlong	result1, local10
035dc     14 2D 02 F6 | 	mov	local04, local02
035e0     16 2B 02 F6 | 	mov	local03, local04
035e4     15 39 02 F6 | 	mov	local10, local03
035e8     03 38 66 F0 | 	shl	local10, #3
035ec     35 00 00 FF 
035f0     0C E4 05 F1 | 	add	objptr, ##27148
035f4     F2 38 02 F1 | 	add	local10, objptr
035f8     04 38 06 F1 | 	add	local10, #4
035fc     01 00 80 FF 
03600     1C 03 68 FC | 	wrlong	##513, local10
03604     35 00 00 FF 
03608     0C E4 85 F1 | 	sub	objptr, ##27148
0360c     84 02 90 FD | 	jmp	#LR__0184
03610                 | LR__0176
03610     14 2F 02 F6 | 	mov	local05, local02
03614     03 2E 66 F0 | 	shl	local05, #3
03618     35 00 00 FF 
0361c     0C E4 05 F1 | 	add	objptr, ##27148
03620     F2 2E 02 F1 | 	add	local05, objptr
03624     17 13 02 FB | 	rdlong	arg01, local05
03628     35 00 00 FF 
0362c     0C E4 85 F1 | 	sub	objptr, ##27148
03630     40 34 B0 FD | 	call	#_isnum
03634     FD 7E 02 F6 | 	mov	local45, result1
03638     14 2F 02 F6 | 	mov	local05, local02
0363c     03 2E 66 F0 | 	shl	local05, #3
03640     35 00 00 FF 
03644     0C E4 05 F1 | 	add	objptr, ##27148
03648     F2 2E 02 F1 | 	add	local05, objptr
0364c     17 13 02 FB | 	rdlong	arg01, local05
03650     35 00 00 FF 
03654     0C E4 85 F1 | 	sub	objptr, ##27148
03658     04 38 B0 FD | 	call	#_isint
0365c     FD 80 02 F6 | 	mov	local46, result1
03660     14 2F 02 F6 | 	mov	local05, local02
03664     03 2E 66 F0 | 	shl	local05, #3
03668     35 00 00 FF 
0366c     0C E4 05 F1 | 	add	objptr, ##27148
03670     F2 2E 02 F1 | 	add	local05, objptr
03674     17 13 02 FB | 	rdlong	arg01, local05
03678     35 00 00 FF 
0367c     0C E4 85 F1 | 	sub	objptr, ##27148
03680     80 3A B0 FD | 	call	#_isdec
03684     FD 82 02 F6 | 	mov	local47, result1
03688                 | ' 
03688                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
03688                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
03688     00 7E 0E F2 | 	cmp	local45, #0 wz
0368c     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03690     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
03694     34 00 90 AD |  if_e	jmp	#LR__0177
03698     14 2D 02 F6 | 	mov	local04, local02
0369c     16 2B 02 F6 | 	mov	local03, local04
036a0     15 39 02 F6 | 	mov	local10, local03
036a4     03 38 66 F0 | 	shl	local10, #3
036a8     35 00 00 FF 
036ac     0C E4 05 F1 | 	add	objptr, ##27148
036b0     F2 38 02 F1 | 	add	local10, objptr
036b4     04 38 06 F1 | 	add	local10, #4
036b8     01 00 80 FF 
036bc     1C 01 68 FC | 	wrlong	##512, local10
036c0     35 00 00 FF 
036c4     0C E4 85 F1 | 	sub	objptr, ##27148
036c8     C8 01 90 FD | 	jmp	#LR__0184
036cc                 | LR__0177
036cc                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
036cc     00 7E 0E F2 | 	cmp	local45, #0 wz
036d0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
036d4     41 2D 22 56 |  if_ne	not	local04, local47
036d8     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
036dc     34 00 90 AD |  if_e	jmp	#LR__0178
036e0     14 2D 02 F6 | 	mov	local04, local02
036e4     16 2B 02 F6 | 	mov	local03, local04
036e8     15 39 02 F6 | 	mov	local10, local03
036ec     03 38 66 F0 | 	shl	local10, #3
036f0     35 00 00 FF 
036f4     0C E4 05 F1 | 	add	objptr, ##27148
036f8     F2 38 02 F1 | 	add	local10, objptr
036fc     04 38 06 F1 | 	add	local10, #4
03700     01 00 80 FF 
03704     1C 03 68 FC | 	wrlong	##513, local10
03708     35 00 00 FF 
0370c     0C E4 85 F1 | 	sub	objptr, ##27148
03710     80 01 90 FD | 	jmp	#LR__0184
03714                 | LR__0178
03714                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03714     00 7E 0E F2 | 	cmp	local45, #0 wz
03718     40 2D 22 56 |  if_ne	not	local04, local46
0371c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03720     41 2B 22 56 |  if_ne	not	local03, local47
03724     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
03728     34 00 90 AD |  if_e	jmp	#LR__0179
0372c     14 2D 02 F6 | 	mov	local04, local02
03730     16 2B 02 F6 | 	mov	local03, local04
03734     15 39 02 F6 | 	mov	local10, local03
03738     03 38 66 F0 | 	shl	local10, #3
0373c     35 00 00 FF 
03740     0C E4 05 F1 | 	add	objptr, ##27148
03744     F2 38 02 F1 | 	add	local10, objptr
03748     04 38 06 F1 | 	add	local10, #4
0374c     01 00 80 FF 
03750     1C 05 68 FC | 	wrlong	##514, local10
03754     35 00 00 FF 
03758     0C E4 85 F1 | 	sub	objptr, ##27148
0375c     34 01 90 FD | 	jmp	#LR__0184
03760                 | LR__0179
03760                 | ' 
03760                 | ' if isstring(lparts(i).part$) then 
03760     14 2F 02 F6 | 	mov	local05, local02
03764     03 2E 66 F0 | 	shl	local05, #3
03768     35 00 00 FF 
0376c     0C E4 05 F1 | 	add	objptr, ##27148
03770     F2 2E 02 F1 | 	add	local05, objptr
03774     17 13 02 FB | 	rdlong	arg01, local05
03778     35 00 00 FF 
0377c     0C E4 85 F1 | 	sub	objptr, ##27148
03780     40 3A B0 FD | 	call	#_isstring
03784     00 FA 0D F2 | 	cmp	result1, #0 wz
03788     A8 00 90 AD |  if_e	jmp	#LR__0182
0378c     14 39 02 F6 | 	mov	local10, local02
03790     03 38 66 F0 | 	shl	local10, #3
03794     35 00 00 FF 
03798     0C E4 05 F1 | 	add	objptr, ##27148
0379c     F2 38 02 F1 | 	add	local10, objptr
037a0     04 38 06 F1 | 	add	local10, #4
037a4     01 00 80 FF 
037a8     1C 07 68 FC | 	wrlong	##515, local10
037ac     14 2D 02 F6 | 	mov	local04, local02
037b0     16 2B 02 F6 | 	mov	local03, local04
037b4     15 39 02 F6 | 	mov	local10, local03
037b8     03 38 66 F0 | 	shl	local10, #3
037bc     F2 38 02 F1 | 	add	local10, objptr
037c0     14 41 02 F6 | 	mov	local14, local02
037c4     03 40 66 F0 | 	shl	local14, #3
037c8     F2 40 02 F1 | 	add	local14, objptr
037cc     20 31 02 FB | 	rdlong	local06, local14
037d0     02 3C 06 F6 | 	mov	local12, #2
037d4     14 51 02 F6 | 	mov	local22, local02
037d8     28 53 02 F6 | 	mov	local23, local22
037dc     03 52 66 F0 | 	shl	local23, #3
037e0     F2 54 02 F6 | 	mov	local24, objptr
037e4     F2 52 02 F1 | 	add	local23, objptr
037e8     29 13 02 FB | 	rdlong	arg01, local23
037ec     35 00 00 FF 
037f0     0C E4 85 F1 | 	sub	objptr, ##27148
037f4     09 33 02 F6 | 	mov	local07, arg01
037f8     97 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
037fc                 | LR__0180
037fc     19 FB C9 FA | 	rdbyte	result1, local07 wz
03800     01 32 06 51 |  if_ne	add	local07, #1
03804     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
03808                 | LR__0181
03808     09 33 82 F1 | 	sub	local07, arg01
0380c     19 3F 02 F6 | 	mov	local13, local07
03810     1F 41 02 F6 | 	mov	local14, local13
03814     02 40 86 F1 | 	sub	local14, #2
03818     20 3B 02 F6 | 	mov	local11, local14
0381c     18 13 02 F6 | 	mov	arg01, local06
03820     1E 15 02 F6 | 	mov	arg02, local12
03824     1D 17 02 F6 | 	mov	arg03, local11
03828     C8 64 B2 FD | 	call	#__system__Mid_S
0382c     1C FB 61 FC | 	wrlong	result1, local10
03830     60 00 90 FD | 	jmp	#LR__0184
03834                 | LR__0182
03834                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03834     14 2B 02 F6 | 	mov	local03, local02
03838     15 2F 02 F6 | 	mov	local05, local03
0383c     03 2E 66 F0 | 	shl	local05, #3
03840     35 00 00 FF 
03844     0C E4 05 F1 | 	add	objptr, ##27148
03848     F2 2E 02 F1 | 	add	local05, objptr
0384c     17 13 02 FB | 	rdlong	arg01, local05
03850     35 00 00 FF 
03854     0C E4 85 F1 | 	sub	objptr, ##27148
03858     A4 2F B0 FD | 	call	#_isname
0385c     FD 2C 0A F6 | 	mov	local04, result1 wz
03860     30 00 90 AD |  if_e	jmp	#LR__0183
03864     14 2D 02 F6 | 	mov	local04, local02
03868     16 2B 02 F6 | 	mov	local03, local04
0386c     15 39 02 F6 | 	mov	local10, local03
03870     03 38 66 F0 | 	shl	local10, #3
03874     35 00 00 FF 
03878     0C E4 05 F1 | 	add	objptr, ##27148
0387c     F2 38 02 F1 | 	add	local10, objptr
03880     04 38 06 F1 | 	add	local10, #4
03884     01 00 80 FF 
03888     1C 09 68 FC | 	wrlong	##516, local10
0388c     35 00 00 FF 
03890     0C E4 85 F1 | 	sub	objptr, ##27148
03894                 | LR__0183
03894                 | LR__0184
03894     01 28 06 F1 | 	add	local02, #1
03898     54 F8 9F FD | 	jmp	#LR__0173
0389c                 | LR__0185
0389c     23 39 02 F6 | 	mov	local10, local17
038a0     03 38 66 F0 | 	shl	local10, #3
038a4     35 00 00 FF 
038a8     0C E4 05 F1 | 	add	objptr, ##27148
038ac     F2 38 02 F1 | 	add	local10, objptr
038b0     04 38 06 F1 | 	add	local10, #4
038b4     1C FD 6B FC | 	wrlong	#510, local10
038b8     23 39 02 F6 | 	mov	local10, local17
038bc     03 38 66 F0 | 	shl	local10, #3
038c0     F2 38 02 F1 | 	add	local10, objptr
038c4     BB 01 00 FF 
038c8     B3 31 06 F6 | 	mov	local06, ##@LR__5599
038cc     1C 31 62 FC | 	wrlong	local06, local10
038d0     10 00 00 FF 
038d4     54 E4 05 F1 | 	add	objptr, ##8276
038d8     F2 46 62 FC | 	wrlong	local17, objptr
038dc     45 00 00 FF 
038e0     60 E4 85 F1 | 	sub	objptr, ##35424
038e4                 | ' 
038e4                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
038e4                 | ' 
038e4                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
038e4                 | '  
038e4                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
038e4     BB 01 00 FF 
038e8     B4 15 06 F6 | 	mov	arg02, ##@LR__5600
038ec     3B 13 02 F6 | 	mov	arg01, local41
038f0     90 42 B2 FD | 	call	#__system___string_cmp
038f4     00 FA 0D F2 | 	cmp	result1, #0 wz
038f8     F0 00 90 AD |  if_e	jmp	#LR__0186
038fc     BB 01 00 FF 
03900     B9 15 06 F6 | 	mov	arg02, ##@LR__5601
03904     3B 13 02 F6 | 	mov	arg01, local41
03908     78 42 B2 FD | 	call	#__system___string_cmp
0390c     00 FA 0D F2 | 	cmp	result1, #0 wz
03910     D8 00 90 AD |  if_e	jmp	#LR__0186
03914     BB 01 00 FF 
03918     BE 31 06 F6 | 	mov	local06, ##@LR__5602
0391c     3B 13 02 F6 | 	mov	arg01, local41
03920     18 15 02 F6 | 	mov	arg02, local06
03924     5C 42 B2 FD | 	call	#__system___string_cmp
03928     00 FA 0D F2 | 	cmp	result1, #0 wz
0392c     BC 00 90 AD |  if_e	jmp	#LR__0186
03930     BB 01 00 FF 
03934     C3 3D 06 F6 | 	mov	local12, ##@LR__5603
03938     1E 31 02 F6 | 	mov	local06, local12
0393c     3B 13 02 F6 | 	mov	arg01, local41
03940     18 15 02 F6 | 	mov	arg02, local06
03944     3C 42 B2 FD | 	call	#__system___string_cmp
03948     00 FA 0D F2 | 	cmp	result1, #0 wz
0394c     9C 00 90 AD |  if_e	jmp	#LR__0186
03950     BB 01 00 FF 
03954     C7 3B 06 F6 | 	mov	local11, ##@LR__5604
03958     1D 3D 02 F6 | 	mov	local12, local11
0395c     3B 13 02 F6 | 	mov	arg01, local41
03960     1E 15 02 F6 | 	mov	arg02, local12
03964     1C 42 B2 FD | 	call	#__system___string_cmp
03968     FD 30 0A F6 | 	mov	local06, result1 wz
0396c     7C 00 90 AD |  if_e	jmp	#LR__0186
03970     BB 01 00 FF 
03974     CB 41 06 F6 | 	mov	local14, ##@LR__5605
03978     20 3B 02 F6 | 	mov	local11, local14
0397c     3B 13 02 F6 | 	mov	arg01, local41
03980     1D 15 02 F6 | 	mov	arg02, local11
03984     FC 41 B2 FD | 	call	#__system___string_cmp
03988     FD 3C 0A F6 | 	mov	local12, result1 wz
0398c     5C 00 90 AD |  if_e	jmp	#LR__0186
03990     BB 01 00 FF 
03994     CE 3F 06 F6 | 	mov	local13, ##@LR__5606
03998     1F 41 02 F6 | 	mov	local14, local13
0399c     3B 13 02 F6 | 	mov	arg01, local41
039a0     20 15 02 F6 | 	mov	arg02, local14
039a4     DC 41 B2 FD | 	call	#__system___string_cmp
039a8     FD 3A 0A F6 | 	mov	local11, result1 wz
039ac     3C 00 90 AD |  if_e	jmp	#LR__0186
039b0     BB 01 00 FF 
039b4     D2 3F 06 F6 | 	mov	local13, ##@LR__5607
039b8     3B 13 02 F6 | 	mov	arg01, local41
039bc     1F 15 02 F6 | 	mov	arg02, local13
039c0     C0 41 B2 FD | 	call	#__system___string_cmp
039c4     FD 40 0A F6 | 	mov	local14, result1 wz
039c8     20 00 90 AD |  if_e	jmp	#LR__0186
039cc     BB 01 00 FF 
039d0     D8 51 06 F6 | 	mov	local22, ##@LR__5608
039d4     28 5D 02 F6 | 	mov	local28, local22
039d8     3B 13 02 F6 | 	mov	arg01, local41
039dc     2E 15 02 F6 | 	mov	arg02, local28
039e0     A0 41 B2 FD | 	call	#__system___string_cmp
039e4     FD 3E 0A F6 | 	mov	local13, result1 wz
039e8     CC 00 90 5D |  if_ne	jmp	#LR__0187
039ec                 | LR__0186
039ec     37 5D 02 F6 | 	mov	local28, local37
039f0     01 5C 06 F1 | 	add	local28, #1
039f4     2E 51 02 F6 | 	mov	local22, local28
039f8     28 53 02 F6 | 	mov	local23, local22
039fc     03 52 66 F0 | 	shl	local23, #3
03a00     35 00 00 FF 
03a04     0C E4 05 F1 | 	add	objptr, ##27148
03a08     F2 54 02 F6 | 	mov	local24, objptr
03a0c     F2 52 02 F1 | 	add	local23, objptr
03a10     04 52 06 F1 | 	add	local23, #4
03a14     29 61 02 FB | 	rdlong	local30, local23
03a18     04 52 86 F1 | 	sub	local23, #4
03a1c     30 5F 02 F6 | 	mov	local29, local30
03a20     01 00 00 FF 
03a24     04 5E 0E F2 | 	cmp	local29, ##516 wz
03a28     35 00 00 FF 
03a2c     0C E4 85 F1 | 	sub	objptr, ##27148
03a30     84 00 90 5D |  if_ne	jmp	#LR__0187
03a34     37 85 02 F6 | 	mov	local48, local37
03a38     01 84 06 F1 | 	add	local48, #1
03a3c     03 84 66 F0 | 	shl	local48, #3
03a40     35 00 00 FF 
03a44     0C E4 05 F1 | 	add	objptr, ##27148
03a48     F2 86 02 F6 | 	mov	local49, objptr
03a4c     F2 84 02 F1 | 	add	local48, objptr
03a50     42 13 02 FB | 	rdlong	arg01, local48
03a54     01 14 06 F6 | 	mov	arg02, #1
03a58     35 00 00 FF 
03a5c     0C E4 85 F1 | 	sub	objptr, ##27148
03a60     00 62 B2 FD | 	call	#__system__Right_S
03a64     FD 12 02 F6 | 	mov	arg01, result1
03a68     BB 01 00 FF 
03a6c     DB 89 06 F6 | 	mov	local50, ##@LR__5609
03a70     44 8B 02 F6 | 	mov	local51, local50
03a74     45 15 02 F6 | 	mov	arg02, local51
03a78     08 41 B2 FD | 	call	#__system___string_cmp
03a7c     FD 62 0A F6 | 	mov	local31, result1 wz
03a80     34 00 90 AD |  if_e	jmp	#LR__0187
03a84     37 39 02 F6 | 	mov	local10, local37
03a88     01 38 06 F1 | 	add	local10, #1
03a8c     03 38 66 F0 | 	shl	local10, #3
03a90     35 00 00 FF 
03a94     0C E4 05 F1 | 	add	objptr, ##27148
03a98     F2 38 02 F1 | 	add	local10, objptr
03a9c     01 00 00 FF 
03aa0     03 30 06 F6 | 	mov	local06, ##515
03aa4     04 38 06 F1 | 	add	local10, #4
03aa8     01 00 80 FF 
03aac     1C 07 68 FC | 	wrlong	##515, local10
03ab0     35 00 00 FF 
03ab4     0C E4 85 F1 | 	sub	objptr, ##27148
03ab8                 | LR__0187
03ab8                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03ab8     BB 01 00 FF 
03abc     DD 15 06 F6 | 	mov	arg02, ##@LR__5610
03ac0     3B 13 02 F6 | 	mov	arg01, local41
03ac4     BC 40 B2 FD | 	call	#__system___string_cmp
03ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
03acc     1C 00 90 AD |  if_e	jmp	#LR__0188
03ad0     BB 01 00 FF 
03ad4     E4 2F 06 F6 | 	mov	local05, ##@LR__5611
03ad8     3B 13 02 F6 | 	mov	arg01, local41
03adc     17 15 02 F6 | 	mov	arg02, local05
03ae0     A0 40 B2 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     CC 00 90 5D |  if_ne	jmp	#LR__0189
03aec                 | LR__0188
03aec     37 2F 02 F6 | 	mov	local05, local37
03af0     01 2E 06 F1 | 	add	local05, #1
03af4     17 31 02 F6 | 	mov	local06, local05
03af8     03 30 66 F0 | 	shl	local06, #3
03afc     35 00 00 FF 
03b00     0C E4 05 F1 | 	add	objptr, ##27148
03b04     F2 3C 02 F6 | 	mov	local12, objptr
03b08     F2 30 02 F1 | 	add	local06, objptr
03b0c     04 30 06 F1 | 	add	local06, #4
03b10     18 41 02 FB | 	rdlong	local14, local06
03b14     04 30 86 F1 | 	sub	local06, #4
03b18     20 3B 02 F6 | 	mov	local11, local14
03b1c     01 00 00 FF 
03b20     04 3A 0E F2 | 	cmp	local11, ##516 wz
03b24     35 00 00 FF 
03b28     0C E4 85 F1 | 	sub	objptr, ##27148
03b2c     88 00 90 5D |  if_ne	jmp	#LR__0189
03b30     37 53 02 F6 | 	mov	local23, local37
03b34     01 52 06 F1 | 	add	local23, #1
03b38     03 52 66 F0 | 	shl	local23, #3
03b3c     35 00 00 FF 
03b40     0C E4 05 F1 | 	add	objptr, ##27148
03b44     F2 54 02 F6 | 	mov	local24, objptr
03b48     F2 52 02 F1 | 	add	local23, objptr
03b4c     29 13 02 FB | 	rdlong	arg01, local23
03b50     01 14 06 F6 | 	mov	arg02, #1
03b54     35 00 00 FF 
03b58     0C E4 85 F1 | 	sub	objptr, ##27148
03b5c     04 61 B2 FD | 	call	#__system__Right_S
03b60     FD 12 02 F6 | 	mov	arg01, result1
03b64     BB 01 00 FF 
03b68     EA 51 06 F6 | 	mov	local22, ##@LR__5612
03b6c     28 5D 02 F6 | 	mov	local28, local22
03b70     2E 15 02 F6 | 	mov	arg02, local28
03b74     0C 40 B2 FD | 	call	#__system___string_cmp
03b78     FD 3E 0A F6 | 	mov	local13, result1 wz
03b7c     38 00 90 AD |  if_e	jmp	#LR__0189
03b80     37 39 02 F6 | 	mov	local10, local37
03b84     01 38 06 F1 | 	add	local10, #1
03b88     03 38 66 F0 | 	shl	local10, #3
03b8c     35 00 00 FF 
03b90     0C E4 05 F1 | 	add	objptr, ##27148
03b94     F2 2E 02 F6 | 	mov	local05, objptr
03b98     F2 38 02 F1 | 	add	local10, objptr
03b9c     01 00 00 FF 
03ba0     03 30 06 F6 | 	mov	local06, ##515
03ba4     04 38 06 F1 | 	add	local10, #4
03ba8     01 00 80 FF 
03bac     1C 07 68 FC | 	wrlong	##515, local10
03bb0     35 00 00 FF 
03bb4     0C E4 85 F1 | 	sub	objptr, ##27148
03bb8                 | LR__0189
03bb8                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03bb8     BB 01 00 FF 
03bbc     EC 15 06 F6 | 	mov	arg02, ##@LR__5613
03bc0     3B 13 02 F6 | 	mov	arg01, local41
03bc4     BC 3F B2 FD | 	call	#__system___string_cmp
03bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
03bcc     C8 00 90 5D |  if_ne	jmp	#LR__0190
03bd0     37 2F 02 F6 | 	mov	local05, local37
03bd4     01 2E 06 F1 | 	add	local05, #1
03bd8     03 2E 66 F0 | 	shl	local05, #3
03bdc     35 00 00 FF 
03be0     0C E4 05 F1 | 	add	objptr, ##27148
03be4     F2 30 02 F6 | 	mov	local06, objptr
03be8     F2 2E 02 F1 | 	add	local05, objptr
03bec     04 2E 06 F1 | 	add	local05, #4
03bf0     17 3B 02 FB | 	rdlong	local11, local05
03bf4     04 2E 86 F1 | 	sub	local05, #4
03bf8     1D 3D 02 F6 | 	mov	local12, local11
03bfc     01 00 00 FF 
03c00     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c04     35 00 00 FF 
03c08     0C E4 85 F1 | 	sub	objptr, ##27148
03c0c     88 00 90 5D |  if_ne	jmp	#LR__0190
03c10     37 51 02 F6 | 	mov	local22, local37
03c14     01 50 06 F1 | 	add	local22, #1
03c18     03 50 66 F0 | 	shl	local22, #3
03c1c     35 00 00 FF 
03c20     0C E4 05 F1 | 	add	objptr, ##27148
03c24     F2 52 02 F6 | 	mov	local23, objptr
03c28     F2 50 02 F1 | 	add	local22, objptr
03c2c     28 13 02 FB | 	rdlong	arg01, local22
03c30     01 14 06 F6 | 	mov	arg02, #1
03c34     35 00 00 FF 
03c38     0C E4 85 F1 | 	sub	objptr, ##27148
03c3c     24 60 B2 FD | 	call	#__system__Right_S
03c40     FD 12 02 F6 | 	mov	arg01, result1
03c44     BB 01 00 FF 
03c48     F1 5D 06 F6 | 	mov	local28, ##@LR__5614
03c4c     2E 3F 02 F6 | 	mov	local13, local28
03c50     1F 15 02 F6 | 	mov	arg02, local13
03c54     2C 3F B2 FD | 	call	#__system___string_cmp
03c58     FD 40 0A F6 | 	mov	local14, result1 wz
03c5c     38 00 90 AD |  if_e	jmp	#LR__0190
03c60     37 39 02 F6 | 	mov	local10, local37
03c64     01 38 06 F1 | 	add	local10, #1
03c68     03 38 66 F0 | 	shl	local10, #3
03c6c     35 00 00 FF 
03c70     0C E4 05 F1 | 	add	objptr, ##27148
03c74     F2 2E 02 F6 | 	mov	local05, objptr
03c78     F2 38 02 F1 | 	add	local10, objptr
03c7c     01 00 00 FF 
03c80     03 30 06 F6 | 	mov	local06, ##515
03c84     04 38 06 F1 | 	add	local10, #4
03c88     01 00 80 FF 
03c8c     1C 07 68 FC | 	wrlong	##515, local10
03c90     35 00 00 FF 
03c94     0C E4 85 F1 | 	sub	objptr, ##27148
03c98                 | LR__0190
03c98                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c98     BB 01 00 FF 
03c9c     F3 15 06 F6 | 	mov	arg02, ##@LR__5615
03ca0     3B 13 02 F6 | 	mov	arg01, local41
03ca4     DC 3E B2 FD | 	call	#__system___string_cmp
03ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
03cac     C8 00 90 5D |  if_ne	jmp	#LR__0191
03cb0     37 2F 02 F6 | 	mov	local05, local37
03cb4     03 2E 06 F1 | 	add	local05, #3
03cb8     03 2E 66 F0 | 	shl	local05, #3
03cbc     35 00 00 FF 
03cc0     0C E4 05 F1 | 	add	objptr, ##27148
03cc4     F2 30 02 F6 | 	mov	local06, objptr
03cc8     F2 2E 02 F1 | 	add	local05, objptr
03ccc     04 2E 06 F1 | 	add	local05, #4
03cd0     17 3B 02 FB | 	rdlong	local11, local05
03cd4     04 2E 86 F1 | 	sub	local05, #4
03cd8     1D 3D 02 F6 | 	mov	local12, local11
03cdc     01 00 00 FF 
03ce0     04 3C 0E F2 | 	cmp	local12, ##516 wz
03ce4     35 00 00 FF 
03ce8     0C E4 85 F1 | 	sub	objptr, ##27148
03cec     88 00 90 5D |  if_ne	jmp	#LR__0191
03cf0     37 51 02 F6 | 	mov	local22, local37
03cf4     03 50 06 F1 | 	add	local22, #3
03cf8     03 50 66 F0 | 	shl	local22, #3
03cfc     35 00 00 FF 
03d00     0C E4 05 F1 | 	add	objptr, ##27148
03d04     F2 52 02 F6 | 	mov	local23, objptr
03d08     F2 50 02 F1 | 	add	local22, objptr
03d0c     28 13 02 FB | 	rdlong	arg01, local22
03d10     01 14 06 F6 | 	mov	arg02, #1
03d14     35 00 00 FF 
03d18     0C E4 85 F1 | 	sub	objptr, ##27148
03d1c     44 5F B2 FD | 	call	#__system__Right_S
03d20     FD 12 02 F6 | 	mov	arg01, result1
03d24     BB 01 00 FF 
03d28     F8 5D 06 F6 | 	mov	local28, ##@LR__5616
03d2c     2E 3F 02 F6 | 	mov	local13, local28
03d30     1F 15 02 F6 | 	mov	arg02, local13
03d34     4C 3E B2 FD | 	call	#__system___string_cmp
03d38     FD 40 0A F6 | 	mov	local14, result1 wz
03d3c     38 00 90 AD |  if_e	jmp	#LR__0191
03d40     37 39 02 F6 | 	mov	local10, local37
03d44     03 38 06 F1 | 	add	local10, #3
03d48     03 38 66 F0 | 	shl	local10, #3
03d4c     35 00 00 FF 
03d50     0C E4 05 F1 | 	add	objptr, ##27148
03d54     F2 2E 02 F6 | 	mov	local05, objptr
03d58     F2 38 02 F1 | 	add	local10, objptr
03d5c     01 00 00 FF 
03d60     03 30 06 F6 | 	mov	local06, ##515
03d64     04 38 06 F1 | 	add	local10, #4
03d68     01 00 80 FF 
03d6c     1C 07 68 FC | 	wrlong	##515, local10
03d70     35 00 00 FF 
03d74     0C E4 85 F1 | 	sub	objptr, ##27148
03d78                 | LR__0191
03d78                 | ' 
03d78                 | ' ' cd needs special treatment..
03d78                 | ' 
03d78                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03d78     BB 01 00 FF 
03d7c     FA 15 06 F6 | 	mov	arg02, ##@LR__5617
03d80     3B 13 02 F6 | 	mov	arg01, local41
03d84     FC 3D B2 FD | 	call	#__system___string_cmp
03d88     00 FA 0D F2 | 	cmp	result1, #0 wz
03d8c     38 00 90 5D |  if_ne	jmp	#LR__0192
03d90     37 39 02 F6 | 	mov	local10, local37
03d94     01 38 06 F1 | 	add	local10, #1
03d98     03 38 66 F0 | 	shl	local10, #3
03d9c     35 00 00 FF 
03da0     0C E4 05 F1 | 	add	objptr, ##27148
03da4     F2 2E 02 F6 | 	mov	local05, objptr
03da8     F2 38 02 F1 | 	add	local10, objptr
03dac     01 00 00 FF 
03db0     03 30 06 F6 | 	mov	local06, ##515
03db4     04 38 06 F1 | 	add	local10, #4
03db8     01 00 80 FF 
03dbc     1C 07 68 FC | 	wrlong	##515, local10
03dc0     35 00 00 FF 
03dc4     0C E4 85 F1 | 	sub	objptr, ##27148
03dc8                 | LR__0192
03dc8                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03dc8     BB 01 00 FF 
03dcc     FD 15 06 F6 | 	mov	arg02, ##@LR__5618
03dd0     3B 13 02 F6 | 	mov	arg01, local41
03dd4     AC 3D B2 FD | 	call	#__system___string_cmp
03dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
03ddc     A4 00 90 5D |  if_ne	jmp	#LR__0193
03de0     37 31 02 F6 | 	mov	local06, local37
03de4     01 30 06 F1 | 	add	local06, #1
03de8     03 30 66 F0 | 	shl	local06, #3
03dec     35 00 00 FF 
03df0     0C E4 05 F1 | 	add	objptr, ##27148
03df4     F2 3C 02 F6 | 	mov	local12, objptr
03df8     F2 30 02 F1 | 	add	local06, objptr
03dfc     18 13 02 FB | 	rdlong	arg01, local06
03e00     BC 01 00 FF 
03e04     01 2E 06 F6 | 	mov	local05, ##@LR__5619
03e08     17 15 02 F6 | 	mov	arg02, local05
03e0c     35 00 00 FF 
03e10     0C E4 85 F1 | 	sub	objptr, ##27148
03e14     6C 3D B2 FD | 	call	#__system___string_cmp
03e18     00 FA 0D F2 | 	cmp	result1, #0 wz
03e1c     64 00 90 5D |  if_ne	jmp	#LR__0193
03e20     37 39 02 F6 | 	mov	local10, local37
03e24     01 38 06 F1 | 	add	local10, #1
03e28     03 38 66 F0 | 	shl	local10, #3
03e2c     35 00 00 FF 
03e30     0C E4 05 F1 | 	add	objptr, ##27148
03e34     F2 38 02 F1 | 	add	local10, objptr
03e38     04 38 06 F1 | 	add	local10, #4
03e3c     01 00 80 FF 
03e40     1C 07 68 FC | 	wrlong	##515, local10
03e44     37 39 02 F6 | 	mov	local10, local37
03e48     01 38 06 F1 | 	add	local10, #1
03e4c     03 38 66 F0 | 	shl	local10, #3
03e50     F2 38 02 F1 | 	add	local10, objptr
03e54     BC 01 00 FF 
03e58     03 30 06 F6 | 	mov	local06, ##@LR__5620
03e5c     1C 31 62 FC | 	wrlong	local06, local10
03e60     37 39 02 F6 | 	mov	local10, local37
03e64     03 38 66 F0 | 	shl	local10, #3
03e68     F2 2E 02 F6 | 	mov	local05, objptr
03e6c     F2 38 02 F1 | 	add	local10, objptr
03e70     C3 30 06 F6 | 	mov	local06, #195
03e74     04 38 06 F1 | 	add	local10, #4
03e78     1C 87 69 FC | 	wrlong	#195, local10
03e7c     35 00 00 FF 
03e80     0C E4 85 F1 | 	sub	objptr, ##27148
03e84                 | LR__0193
03e84                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03e84     BC 01 00 FF 
03e88     06 38 06 F6 | 	mov	local10, ##@LR__5621
03e8c     3B 13 02 F6 | 	mov	arg01, local41
03e90     1C 15 02 F6 | 	mov	arg02, local10
03e94     EC 3C B2 FD | 	call	#__system___string_cmp
03e98     00 FA 0D F2 | 	cmp	result1, #0 wz
03e9c     04 01 90 5D |  if_ne	jmp	#LR__0196
03ea0     37 31 02 F6 | 	mov	local06, local37
03ea4     01 30 06 F1 | 	add	local06, #1
03ea8     03 30 66 F0 | 	shl	local06, #3
03eac     35 00 00 FF 
03eb0     0C E4 05 F1 | 	add	objptr, ##27148
03eb4     F2 3C 02 F6 | 	mov	local12, objptr
03eb8     F2 30 02 F1 | 	add	local06, objptr
03ebc     18 13 02 FB | 	rdlong	arg01, local06
03ec0     BC 01 00 FF 
03ec4     09 2E 06 F6 | 	mov	local05, ##@LR__5622
03ec8     17 39 02 F6 | 	mov	local10, local05
03ecc     1C 15 02 F6 | 	mov	arg02, local10
03ed0     35 00 00 FF 
03ed4     0C E4 85 F1 | 	sub	objptr, ##27148
03ed8     A8 3C B2 FD | 	call	#__system___string_cmp
03edc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee0     C0 00 90 5D |  if_ne	jmp	#LR__0196
03ee4     37 39 02 F6 | 	mov	local10, local37
03ee8     01 38 06 F1 | 	add	local10, #1
03eec     03 38 66 F0 | 	shl	local10, #3
03ef0     35 00 00 FF 
03ef4     0C E4 05 F1 | 	add	objptr, ##27148
03ef8     F2 2E 02 F6 | 	mov	local05, objptr
03efc     F2 38 02 F1 | 	add	local10, objptr
03f00     01 00 00 FF 
03f04     03 30 06 F6 | 	mov	local06, ##515
03f08     04 38 06 F1 | 	add	local10, #4
03f0c     01 00 80 FF 
03f10     1C 07 68 FC | 	wrlong	##515, local10
03f14     04 38 86 F1 | 	sub	local10, #4
03f18     37 29 02 F6 | 	mov	local02, local37
03f1c     02 28 06 F1 | 	add	local02, #2
03f20     23 8D 02 F6 | 	mov	local52, local17
03f24     01 8C 06 F1 | 	add	local52, #1
03f28     35 00 00 FF 
03f2c     0C E4 85 F1 | 	sub	objptr, ##27148
03f30                 | LR__0194
03f30     46 29 52 F2 | 	cmps	local02, local52 wc
03f34     6C 00 90 3D |  if_ae	jmp	#LR__0195
03f38     14 39 02 F6 | 	mov	local10, local02
03f3c     03 38 66 F0 | 	shl	local10, #3
03f40     35 00 00 FF 
03f44     0C E4 05 F1 | 	add	objptr, ##27148
03f48     F2 38 02 F1 | 	add	local10, objptr
03f4c     1C 8F 02 FB | 	rdlong	local53, local10
03f50     37 39 02 F6 | 	mov	local10, local37
03f54     01 38 06 F1 | 	add	local10, #1
03f58     03 38 66 F0 | 	shl	local10, #3
03f5c     F2 2E 02 F6 | 	mov	local05, objptr
03f60     F2 38 02 F1 | 	add	local10, objptr
03f64     37 3B 02 F6 | 	mov	local11, local37
03f68     01 3A 06 F1 | 	add	local11, #1
03f6c     1D 41 02 F6 | 	mov	local14, local11
03f70     03 40 66 F0 | 	shl	local14, #3
03f74     F2 3E 02 F6 | 	mov	local13, objptr
03f78     F2 40 02 F1 | 	add	local14, objptr
03f7c     20 13 02 FB | 	rdlong	arg01, local14
03f80     47 3D 02 F6 | 	mov	local12, local53
03f84     1E 15 02 F6 | 	mov	arg02, local12
03f88     35 00 00 FF 
03f8c     0C E4 85 F1 | 	sub	objptr, ##27148
03f90     24 3C B2 FD | 	call	#__system___string_concat
03f94     FD 30 02 F6 | 	mov	local06, result1
03f98     1C 31 62 FC | 	wrlong	local06, local10
03f9c     01 28 06 F1 | 	add	local02, #1
03fa0     8C FF 9F FD | 	jmp	#LR__0194
03fa4                 | LR__0195
03fa4                 | LR__0196
03fa4                 | ' 
03fa4                 | ' ' determine a type of the line and compile it
03fa4                 | ' 
03fa4                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03fa4     35 00 00 FF 
03fa8     0C E4 05 F1 | 	add	objptr, ##27148
03fac     F2 12 02 FB | 	rdlong	arg01, objptr
03fb0     35 00 00 FF 
03fb4     0C E4 85 F1 | 	sub	objptr, ##27148
03fb8     48 31 B0 FD | 	call	#_isdec
03fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc0     30 00 90 AD |  if_e	jmp	#LR__0197
03fc4     35 00 00 FF 
03fc8     0C E4 05 F1 | 	add	objptr, ##27148
03fcc     F2 12 02 FB | 	rdlong	arg01, objptr
03fd0     35 00 00 FF 
03fd4     0C E4 85 F1 | 	sub	objptr, ##27148
03fd8     00 14 06 F6 | 	mov	arg02, #0
03fdc     70 70 B2 FD | 	call	#__system____builtin_atoi
03fe0     52 00 00 FF 
03fe4     E8 E4 05 F1 | 	add	objptr, ##42216
03fe8     F2 FA 61 FC | 	wrlong	result1, objptr
03fec     52 00 00 FF 
03ff0     E8 E4 85 F1 | 	sub	objptr, ##42216
03ff4                 | LR__0197
03ff4                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03ff4     52 00 00 FF 
03ff8     E8 E4 05 F1 | 	add	objptr, ##42216
03ffc     F2 2C 02 FB | 	rdlong	local04, objptr
04000     52 00 00 FF 
04004     E8 E4 85 F1 | 	sub	objptr, ##42216
04008     01 2C 16 F2 | 	cmp	local04, #1 wc
0400c     40 00 90 CD |  if_b	jmp	#LR__0198
04010     01 46 0E F2 | 	cmp	local17, #1 wz
04014     37 00 00 AF 
04018     24 E4 05 A1 |  if_e	add	objptr, ##28196
0401c     F2 2E 02 AB |  if_e	rdlong	local05, objptr
04020     37 00 00 AF 
04024     24 E4 85 A1 |  if_e	sub	objptr, ##28196
04028     17 39 02 A6 |  if_e	mov	local10, local05
0402c     03 38 0E A2 |  if_e	cmp	local10, #3 wz
04030     1C 00 90 5D |  if_ne	jmp	#LR__0198
04034     52 00 00 FF 
04038     E8 E4 05 F1 | 	add	objptr, ##42216
0403c     F2 12 02 FB | 	rdlong	arg01, objptr
04040     52 00 00 FF 
04044     E8 E4 85 F1 | 	sub	objptr, ##42216
04048     64 32 B0 FD | 	call	#_deleteline
0404c     C8 03 90 FD | 	jmp	#LR__0209
04050                 | LR__0198
04050                 | ' 
04050                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
04050     37 00 00 FF 
04054     24 E4 05 F1 | 	add	objptr, ##28196
04058     F2 2C 0A FB | 	rdlong	local04, objptr wz
0405c     37 00 00 FF 
04060     24 E4 85 F1 | 	sub	objptr, ##28196
04064     20 00 90 AD |  if_e	jmp	#LR__0199
04068     37 00 00 FF 
0406c     24 E4 05 F1 | 	add	objptr, ##28196
04070     F2 2E 02 FB | 	rdlong	local05, objptr
04074     37 00 00 FF 
04078     24 E4 85 F1 | 	sub	objptr, ##28196
0407c     17 39 02 F6 | 	mov	local10, local05
04080     03 38 0E F2 | 	cmp	local10, #3 wz
04084     C0 00 90 5D |  if_ne	jmp	#LR__0201
04088                 | LR__0199
04088     35 00 00 FF 
0408c     20 E4 05 F1 | 	add	objptr, ##27168
04090     F2 3C 02 FB | 	rdlong	local12, objptr
04094     35 00 00 FF 
04098     20 E4 85 F1 | 	sub	objptr, ##27168
0409c     1B 3C 0E F2 | 	cmp	local12, #27 wz
040a0     A4 00 90 AD |  if_e	jmp	#LR__0201
040a4     52 00 00 FF 
040a8     E8 E4 05 F1 | 	add	objptr, ##42216
040ac     F2 12 02 FB | 	rdlong	arg01, objptr
040b0     1B 00 00 FF 
040b4     C4 E4 85 F1 | 	sub	objptr, ##14020
040b8     F2 16 02 FB | 	rdlong	arg03, objptr
040bc     37 00 00 FF 
040c0     24 E4 85 F1 | 	sub	objptr, ##28196
040c4     00 14 06 F6 | 	mov	arg02, #0
040c8     74 46 B0 FD | 	call	#_compile
040cc     FD 26 0A F6 | 	mov	local01, result1 wz
040d0                 | '   err=compile(linenum,0,cont) 
040d0                 | '   if err<>0 then printerror(err,linenum): goto 101
040d0     20 00 90 AD |  if_e	jmp	#LR__0200
040d4     52 00 00 FF 
040d8     E8 E4 05 F1 | 	add	objptr, ##42216
040dc     F2 14 02 FB | 	rdlong	arg02, objptr
040e0     52 00 00 FF 
040e4     E8 E4 85 F1 | 	sub	objptr, ##42216
040e8     13 13 02 F6 | 	mov	arg01, local01
040ec     0C 00 B2 FD | 	call	#_printerror
040f0     44 03 90 FD | 	jmp	#LR__0210
040f4                 | LR__0200
040f4                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
040f4     52 00 00 FF 
040f8     30 E5 05 F1 | 	add	objptr, ##42288
040fc     F2 12 02 FB | 	rdlong	arg01, objptr
04100     52 00 00 FF 
04104     30 E5 85 F1 | 	sub	objptr, ##42288
04108     BC 01 00 FF 
0410c     0B 14 06 F6 | 	mov	arg02, ##@LR__5623
04110     70 3A B2 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     FC 02 90 AD |  if_e	jmp	#LR__0209
0411c     52 00 00 FF 
04120     30 E5 05 F1 | 	add	objptr, ##42288
04124     F2 2C 02 FB | 	rdlong	local04, objptr
04128     1B 00 00 FF 
0412c     14 E5 85 F1 | 	sub	objptr, ##14100
04130     F2 2C 62 FC | 	wrlong	local04, objptr
04134     08 E4 05 F1 | 	add	objptr, #8
04138     F2 08 68 FC | 	wrlong	#4, objptr
0413c     37 00 00 FF 
04140     24 E4 85 F1 | 	sub	objptr, ##28196
04144     B0 D7 9F FD | 	jmp	#LR__0070
04148                 | LR__0201
04148                 | '       							
04148                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
04148     37 00 00 FF 
0414c     24 E4 05 F1 | 	add	objptr, ##28196
04150     F2 2C 02 FB | 	rdlong	local04, objptr
04154     37 00 00 FF 
04158     24 E4 85 F1 | 	sub	objptr, ##28196
0415c     01 2C 0E F2 | 	cmp	local04, #1 wz
04160     37 00 00 5F 
04164     24 E4 05 51 |  if_ne	add	objptr, ##28196
04168     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0416c     37 00 00 5F 
04170     24 E4 85 51 |  if_ne	sub	objptr, ##28196
04174     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04178     C0 00 90 5D |  if_ne	jmp	#LR__0203
0417c     35 00 00 FF 
04180     18 E4 05 F1 | 	add	objptr, ##27160
04184     F2 3C 02 FB | 	rdlong	local12, objptr
04188     35 00 00 FF 
0418c     18 E4 85 F1 | 	sub	objptr, ##27160
04190     1B 3C 0E F2 | 	cmp	local12, #27 wz
04194     A4 00 90 AD |  if_e	jmp	#LR__0203
04198     52 00 00 FF 
0419c     E8 E4 05 F1 | 	add	objptr, ##42216
041a0     F2 12 02 FB | 	rdlong	arg01, objptr
041a4     1B 00 00 FF 
041a8     C4 E4 85 F1 | 	sub	objptr, ##14020
041ac     F2 16 02 FB | 	rdlong	arg03, objptr
041b0     37 00 00 FF 
041b4     24 E4 85 F1 | 	sub	objptr, ##28196
041b8     00 14 06 F6 | 	mov	arg02, #0
041bc     80 45 B0 FD | 	call	#_compile
041c0     FD 26 0A F6 | 	mov	local01, result1 wz
041c4                 | '   err=compile(linenum,0,cont) 
041c4                 | '   if err<>0 then printerror(err,linenum): goto 101
041c4     20 00 90 AD |  if_e	jmp	#LR__0202
041c8     52 00 00 FF 
041cc     E8 E4 05 F1 | 	add	objptr, ##42216
041d0     F2 14 02 FB | 	rdlong	arg02, objptr
041d4     52 00 00 FF 
041d8     E8 E4 85 F1 | 	sub	objptr, ##42216
041dc     13 13 02 F6 | 	mov	arg01, local01
041e0     18 FF B1 FD | 	call	#_printerror
041e4     50 02 90 FD | 	jmp	#LR__0210
041e8                 | LR__0202
041e8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
041e8     52 00 00 FF 
041ec     30 E5 05 F1 | 	add	objptr, ##42288
041f0     F2 12 02 FB | 	rdlong	arg01, objptr
041f4     52 00 00 FF 
041f8     30 E5 85 F1 | 	sub	objptr, ##42288
041fc     BC 01 00 FF 
04200     0C 14 06 F6 | 	mov	arg02, ##@LR__5624
04204     7C 39 B2 FD | 	call	#__system___string_cmp
04208     00 FA 0D F2 | 	cmp	result1, #0 wz
0420c     08 02 90 AD |  if_e	jmp	#LR__0209
04210     52 00 00 FF 
04214     30 E5 05 F1 | 	add	objptr, ##42288
04218     F2 2C 02 FB | 	rdlong	local04, objptr
0421c     1B 00 00 FF 
04220     14 E5 85 F1 | 	sub	objptr, ##14100
04224     F2 2C 62 FC | 	wrlong	local04, objptr
04228     08 E4 05 F1 | 	add	objptr, #8
0422c     F2 08 68 FC | 	wrlong	#4, objptr
04230     37 00 00 FF 
04234     24 E4 85 F1 | 	sub	objptr, ##28196
04238     BC D6 9F FD | 	jmp	#LR__0070
0423c                 | LR__0203
0423c                 | ' 							 
0423c                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
0423c     37 00 00 FF 
04240     24 E4 05 F1 | 	add	objptr, ##28196
04244     F2 2C 0A FB | 	rdlong	local04, objptr wz
04248     37 00 00 FF 
0424c     24 E4 85 F1 | 	sub	objptr, ##28196
04250     37 00 00 5F 
04254     24 E4 05 51 |  if_ne	add	objptr, ##28196
04258     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0425c     37 00 00 5F 
04260     24 E4 85 51 |  if_ne	sub	objptr, ##28196
04264     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
04268     35 00 00 AF 
0426c     20 E4 05 A1 |  if_e	add	objptr, ##27168
04270     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04274     35 00 00 AF 
04278     20 E4 85 A1 |  if_e	sub	objptr, ##27168
0427c     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04280     A4 00 90 5D |  if_ne	jmp	#LR__0205
04284     52 00 00 FF 
04288     E8 E4 05 F1 | 	add	objptr, ##42216
0428c     F2 12 02 FB | 	rdlong	arg01, objptr
04290     1B 00 00 FF 
04294     C4 E4 85 F1 | 	sub	objptr, ##14020
04298     F2 16 02 FB | 	rdlong	arg03, objptr
0429c     37 00 00 FF 
042a0     24 E4 85 F1 | 	sub	objptr, ##28196
042a4     00 14 06 F6 | 	mov	arg02, #0
042a8     5C 45 B0 FD | 	call	#_compile_assign
042ac     FD 26 0A F6 | 	mov	local01, result1 wz
042b0                 | '   err=compile_assign(linenum,0,cont)
042b0                 | '   if err<>0 then printerror(err,linenum): goto 101
042b0     20 00 90 AD |  if_e	jmp	#LR__0204
042b4     52 00 00 FF 
042b8     E8 E4 05 F1 | 	add	objptr, ##42216
042bc     F2 14 02 FB | 	rdlong	arg02, objptr
042c0     52 00 00 FF 
042c4     E8 E4 85 F1 | 	sub	objptr, ##42216
042c8     13 13 02 F6 | 	mov	arg01, local01
042cc     2C FE B1 FD | 	call	#_printerror
042d0     64 01 90 FD | 	jmp	#LR__0210
042d4                 | LR__0204
042d4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
042d4     52 00 00 FF 
042d8     30 E5 05 F1 | 	add	objptr, ##42288
042dc     F2 12 02 FB | 	rdlong	arg01, objptr
042e0     52 00 00 FF 
042e4     30 E5 85 F1 | 	sub	objptr, ##42288
042e8     BC 01 00 FF 
042ec     0D 14 06 F6 | 	mov	arg02, ##@LR__5625
042f0     90 38 B2 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     1C 01 90 AD |  if_e	jmp	#LR__0209
042fc     52 00 00 FF 
04300     30 E5 05 F1 | 	add	objptr, ##42288
04304     F2 2C 02 FB | 	rdlong	local04, objptr
04308     1B 00 00 FF 
0430c     14 E5 85 F1 | 	sub	objptr, ##14100
04310     F2 2C 62 FC | 	wrlong	local04, objptr
04314     08 E4 05 F1 | 	add	objptr, #8
04318     F2 08 68 FC | 	wrlong	#4, objptr
0431c     37 00 00 FF 
04320     24 E4 85 F1 | 	sub	objptr, ##28196
04324     D0 D5 9F FD | 	jmp	#LR__0070
04328                 | LR__0205
04328                 | '     							 
04328                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04328     37 00 00 FF 
0432c     24 E4 05 F1 | 	add	objptr, ##28196
04330     F2 2C 02 FB | 	rdlong	local04, objptr
04334     37 00 00 FF 
04338     24 E4 85 F1 | 	sub	objptr, ##28196
0433c     01 2C 0E F2 | 	cmp	local04, #1 wz
04340     37 00 00 5F 
04344     24 E4 05 51 |  if_ne	add	objptr, ##28196
04348     F2 38 02 5B |  if_ne	rdlong	local10, objptr
0434c     37 00 00 5F 
04350     24 E4 85 51 |  if_ne	sub	objptr, ##28196
04354     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04358     35 00 00 AF 
0435c     18 E4 05 A1 |  if_e	add	objptr, ##27160
04360     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04364     35 00 00 AF 
04368     18 E4 85 A1 |  if_e	sub	objptr, ##27160
0436c     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04370     A4 00 90 5D |  if_ne	jmp	#LR__0208
04374     52 00 00 FF 
04378     E8 E4 05 F1 | 	add	objptr, ##42216
0437c     F2 12 02 FB | 	rdlong	arg01, objptr
04380     1B 00 00 FF 
04384     C4 E4 85 F1 | 	sub	objptr, ##14020
04388     F2 16 02 FB | 	rdlong	arg03, objptr
0438c     37 00 00 FF 
04390     24 E4 85 F1 | 	sub	objptr, ##28196
04394     00 14 06 F6 | 	mov	arg02, #0
04398     6C 44 B0 FD | 	call	#_compile_assign
0439c     FD 26 0A F6 | 	mov	local01, result1 wz
043a0                 | '   err=compile_assign(linenum,0,cont) 
043a0                 | '   if err<>0 then printerror(err,linenum): goto 101
043a0     20 00 90 AD |  if_e	jmp	#LR__0206
043a4     52 00 00 FF 
043a8     E8 E4 05 F1 | 	add	objptr, ##42216
043ac     F2 14 02 FB | 	rdlong	arg02, objptr
043b0     52 00 00 FF 
043b4     E8 E4 85 F1 | 	sub	objptr, ##42216
043b8     13 13 02 F6 | 	mov	arg01, local01
043bc     3C FD B1 FD | 	call	#_printerror
043c0     74 00 90 FD | 	jmp	#LR__0210
043c4                 | LR__0206
043c4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
043c4     52 00 00 FF 
043c8     30 E5 05 F1 | 	add	objptr, ##42288
043cc     F2 12 02 FB | 	rdlong	arg01, objptr
043d0     52 00 00 FF 
043d4     30 E5 85 F1 | 	sub	objptr, ##42288
043d8     BC 01 00 FF 
043dc     0E 14 06 F6 | 	mov	arg02, ##@LR__5626
043e0     A0 37 B2 FD | 	call	#__system___string_cmp
043e4     00 FA 4D F2 | 	cmps	result1, #0 wz
043e8     2C 00 90 AD |  if_e	jmp	#LR__0207
043ec     52 00 00 FF 
043f0     30 E5 05 F1 | 	add	objptr, ##42288
043f4     F2 2C 02 FB | 	rdlong	local04, objptr
043f8     1B 00 00 FF 
043fc     14 E5 85 F1 | 	sub	objptr, ##14100
04400     F2 2C 62 FC | 	wrlong	local04, objptr
04404     08 E4 05 F1 | 	add	objptr, #8
04408     F2 08 68 FC | 	wrlong	#4, objptr
0440c     37 00 00 FF 
04410     24 E4 85 F1 | 	sub	objptr, ##28196
04414     E0 D4 9F FD | 	jmp	#LR__0070
04418                 | LR__0207
04418                 | LR__0208
04418                 | LR__0209
04418                 | ' 
04418                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04418     52 00 00 FF 
0441c     E8 E4 05 F1 | 	add	objptr, ##42216
04420     F2 2C 0A FB | 	rdlong	local04, objptr wz
04424     52 00 00 FF 
04428     E8 E4 85 F1 | 	sub	objptr, ##42216
0442c     B0 00 90 5D |  if_ne	jmp	#LR__0213
04430     02 12 06 F6 | 	mov	arg01, #2
04434     E4 92 B0 FD | 	call	#_execute_line
04438                 | LR__0210
04438                 | '   execute_line(2)
04438                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04438     52 00 00 FF 
0443c     0C E5 05 F1 | 	add	objptr, ##42252
04440     F2 2C 0A FB | 	rdlong	local04, objptr wz
04444     52 00 00 FF 
04448     0C E5 85 F1 | 	sub	objptr, ##42252
0444c     20 00 90 5D |  if_ne	jmp	#LR__0211
04450     BC 01 00 FF 
04454     0F 12 06 F6 | 	mov	arg01, ##@LR__5627
04458                 | ' 
04458                 | ' write(text)
04458     64 1E B2 FD | 	call	#_hg010b_spin2_write
0445c                 | ' crlf
0445c     00 23 B2 FD | 	call	#_hg010b_spin2_crlf
04460     BC 01 00 FF 
04464     10 12 06 F6 | 	mov	arg01, ##@LR__5628
04468                 | ' 
04468                 | ' write(text)
04468     54 1E B2 FD | 	call	#_hg010b_spin2_write
0446c                 | ' crlf
0446c     F0 22 B2 FD | 	call	#_hg010b_spin2_crlf
04470                 | LR__0211
04470                 | '     if inload=1 andalso err>0 then print fullline$
04470     52 00 00 FF 
04474     0C E5 05 F1 | 	add	objptr, ##42252
04478     F2 2C 02 FB | 	rdlong	local04, objptr
0447c     52 00 00 FF 
04480     0C E5 85 F1 | 	sub	objptr, ##42252
04484     01 2C 0E F2 | 	cmp	local04, #1 wz
04488     54 00 90 5D |  if_ne	jmp	#LR__0212
0448c     01 26 56 F2 | 	cmps	local01, #1 wc
04490     4C 00 90 CD |  if_b	jmp	#LR__0212
04494     00 12 06 F6 | 	mov	arg01, #0
04498     70 93 B2 FD | 	call	#__system___getiolock_0620
0449c     FD 12 02 F6 | 	mov	arg01, result1
044a0     B8 36 B2 FD | 	call	#__system___lockmem
044a4     37 00 00 FF 
044a8     20 E4 05 F1 | 	add	objptr, ##28192
044ac     F2 14 02 FB | 	rdlong	arg02, objptr
044b0     37 00 00 FF 
044b4     20 E4 85 F1 | 	sub	objptr, ##28192
044b8     00 12 06 F6 | 	mov	arg01, #0
044bc     00 16 06 F6 | 	mov	arg03, #0
044c0     90 43 B2 FD | 	call	#__system___basic_print_string
044c4     00 12 06 F6 | 	mov	arg01, #0
044c8     0A 14 06 F6 | 	mov	arg02, #10
044cc     00 16 06 F6 | 	mov	arg03, #0
044d0     28 43 B2 FD | 	call	#__system___basic_print_char
044d4     00 12 06 F6 | 	mov	arg01, #0
044d8     30 93 B2 FD | 	call	#__system___getiolock_0620
044dc     FD 00 68 FC | 	wrlong	#0, result1
044e0                 | LR__0212
044e0                 | LR__0213
044e0     A7 F0 03 F6 | 	mov	ptra, fp
044e4     B2 00 A0 FD | 	call	#popregs_
044e8                 | _interpret_ret
044e8     2D 00 64 FD | 	ret
044ec                 | 
044ec                 | ' 
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' '
044ec                 | ' '                          END OF TOKENIZER MAIN CODE
044ec                 | ' '
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' 
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
044ec                 | ' '---------------------------------------------------------------------------------------------------------------------
044ec                 | ' 
044ec                 | ' ' Check if the part is an operator, return a token or 0 if not found
044ec                 | ' 
044ec                 | ' function isoperator(s as string) as ubyte
044ec                 | _isoperator
044ec     01 4A 05 F6 | 	mov	COUNT_, #1
044f0     A8 00 A0 FD | 	call	#pushregs_
044f4                 | ' 
044f4                 | ' select case s
044f4     09 27 02 F6 | 	mov	local01, arg01
044f8     BC 01 00 FF 
044fc     16 14 06 F6 | 	mov	arg02, ##@LR__5629
04500     13 13 02 F6 | 	mov	arg01, local01
04504     7C 36 B2 FD | 	call	#__system___string_cmp
04508     00 FA 0D F2 | 	cmp	result1, #0 wz
0450c     FC 01 90 AD |  if_e	jmp	#LR__0220
04510     BC 01 00 FF 
04514     18 14 06 F6 | 	mov	arg02, ##@LR__5630
04518     13 13 02 F6 | 	mov	arg01, local01
0451c     64 36 B2 FD | 	call	#__system___string_cmp
04520     00 FA 0D F2 | 	cmp	result1, #0 wz
04524     EC 01 90 AD |  if_e	jmp	#LR__0221
04528     BC 01 00 FF 
0452c     1A 14 06 F6 | 	mov	arg02, ##@LR__5631
04530     13 13 02 F6 | 	mov	arg01, local01
04534     4C 36 B2 FD | 	call	#__system___string_cmp
04538     00 FA 0D F2 | 	cmp	result1, #0 wz
0453c     DC 01 90 AD |  if_e	jmp	#LR__0222
04540     BC 01 00 FF 
04544     1D 14 06 F6 | 	mov	arg02, ##@LR__5632
04548     13 13 02 F6 | 	mov	arg01, local01
0454c     34 36 B2 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     CC 01 90 AD |  if_e	jmp	#LR__0223
04558     BC 01 00 FF 
0455c     21 14 06 F6 | 	mov	arg02, ##@LR__5633
04560     13 13 02 F6 | 	mov	arg01, local01
04564     1C 36 B2 FD | 	call	#__system___string_cmp
04568     00 FA 0D F2 | 	cmp	result1, #0 wz
0456c     BC 01 90 AD |  if_e	jmp	#LR__0224
04570     BC 01 00 FF 
04574     23 14 06 F6 | 	mov	arg02, ##@LR__5634
04578     13 13 02 F6 | 	mov	arg01, local01
0457c     04 36 B2 FD | 	call	#__system___string_cmp
04580     00 FA 0D F2 | 	cmp	result1, #0 wz
04584     AC 01 90 AD |  if_e	jmp	#LR__0225
04588     BC 01 00 FF 
0458c     25 14 06 F6 | 	mov	arg02, ##@LR__5635
04590     13 13 02 F6 | 	mov	arg01, local01
04594     EC 35 B2 FD | 	call	#__system___string_cmp
04598     00 FA 0D F2 | 	cmp	result1, #0 wz
0459c     9C 01 90 AD |  if_e	jmp	#LR__0226
045a0     BC 01 00 FF 
045a4     29 14 06 F6 | 	mov	arg02, ##@LR__5636
045a8     13 13 02 F6 | 	mov	arg01, local01
045ac     D4 35 B2 FD | 	call	#__system___string_cmp
045b0     00 FA 0D F2 | 	cmp	result1, #0 wz
045b4     8C 01 90 AD |  if_e	jmp	#LR__0227
045b8     BC 01 00 FF 
045bc     2D 14 06 F6 | 	mov	arg02, ##@LR__5637
045c0     13 13 02 F6 | 	mov	arg01, local01
045c4     BC 35 B2 FD | 	call	#__system___string_cmp
045c8     00 FA 0D F2 | 	cmp	result1, #0 wz
045cc     7C 01 90 AD |  if_e	jmp	#LR__0228
045d0     BC 01 00 FF 
045d4     31 14 06 F6 | 	mov	arg02, ##@LR__5638
045d8     13 13 02 F6 | 	mov	arg01, local01
045dc     A4 35 B2 FD | 	call	#__system___string_cmp
045e0     00 FA 0D F2 | 	cmp	result1, #0 wz
045e4     6C 01 90 AD |  if_e	jmp	#LR__0229
045e8     BC 01 00 FF 
045ec     35 14 06 F6 | 	mov	arg02, ##@LR__5639
045f0     13 13 02 F6 | 	mov	arg01, local01
045f4     8C 35 B2 FD | 	call	#__system___string_cmp
045f8     00 FA 0D F2 | 	cmp	result1, #0 wz
045fc     5C 01 90 AD |  if_e	jmp	#LR__0230
04600     BC 01 00 FF 
04604     39 14 06 F6 | 	mov	arg02, ##@LR__5640
04608     13 13 02 F6 | 	mov	arg01, local01
0460c     74 35 B2 FD | 	call	#__system___string_cmp
04610     00 FA 0D F2 | 	cmp	result1, #0 wz
04614     4C 01 90 AD |  if_e	jmp	#LR__0231
04618     BC 01 00 FF 
0461c     3B 14 06 F6 | 	mov	arg02, ##@LR__5641
04620     13 13 02 F6 | 	mov	arg01, local01
04624     5C 35 B2 FD | 	call	#__system___string_cmp
04628     00 FA 0D F2 | 	cmp	result1, #0 wz
0462c     3C 01 90 AD |  if_e	jmp	#LR__0232
04630     BC 01 00 FF 
04634     3F 14 06 F6 | 	mov	arg02, ##@LR__5642
04638     13 13 02 F6 | 	mov	arg01, local01
0463c     44 35 B2 FD | 	call	#__system___string_cmp
04640     00 FA 0D F2 | 	cmp	result1, #0 wz
04644     2C 01 90 AD |  if_e	jmp	#LR__0233
04648     BC 01 00 FF 
0464c     41 14 06 F6 | 	mov	arg02, ##@LR__5643
04650     13 13 02 F6 | 	mov	arg01, local01
04654     2C 35 B2 FD | 	call	#__system___string_cmp
04658     00 FA 0D F2 | 	cmp	result1, #0 wz
0465c     1C 01 90 AD |  if_e	jmp	#LR__0234
04660     BC 01 00 FF 
04664     43 14 06 F6 | 	mov	arg02, ##@LR__5644
04668     13 13 02 F6 | 	mov	arg01, local01
0466c     14 35 B2 FD | 	call	#__system___string_cmp
04670     00 FA 0D F2 | 	cmp	result1, #0 wz
04674     0C 01 90 AD |  if_e	jmp	#LR__0235
04678     BC 01 00 FF 
0467c     46 14 06 F6 | 	mov	arg02, ##@LR__5645
04680     13 13 02 F6 | 	mov	arg01, local01
04684     FC 34 B2 FD | 	call	#__system___string_cmp
04688     00 FA 0D F2 | 	cmp	result1, #0 wz
0468c     FC 00 90 AD |  if_e	jmp	#LR__0236
04690     BC 01 00 FF 
04694     49 14 06 F6 | 	mov	arg02, ##@LR__5646
04698     13 13 02 F6 | 	mov	arg01, local01
0469c     E4 34 B2 FD | 	call	#__system___string_cmp
046a0     00 FA 0D F2 | 	cmp	result1, #0 wz
046a4     EC 00 90 AD |  if_e	jmp	#LR__0237
046a8     BC 01 00 FF 
046ac     4B 14 06 F6 | 	mov	arg02, ##@LR__5647
046b0     13 13 02 F6 | 	mov	arg01, local01
046b4     CC 34 B2 FD | 	call	#__system___string_cmp
046b8     00 FA 0D F2 | 	cmp	result1, #0 wz
046bc     DC 00 90 AD |  if_e	jmp	#LR__0238
046c0     BC 01 00 FF 
046c4     4D 14 06 F6 | 	mov	arg02, ##@LR__5648
046c8     13 13 02 F6 | 	mov	arg01, local01
046cc     B4 34 B2 FD | 	call	#__system___string_cmp
046d0     00 FA 0D F2 | 	cmp	result1, #0 wz
046d4     CC 00 90 AD |  if_e	jmp	#LR__0239
046d8     BC 01 00 FF 
046dc     50 14 06 F6 | 	mov	arg02, ##@LR__5649
046e0     13 13 02 F6 | 	mov	arg01, local01
046e4     9C 34 B2 FD | 	call	#__system___string_cmp
046e8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ec     BC 00 90 AD |  if_e	jmp	#LR__0240
046f0     BC 01 00 FF 
046f4     53 14 06 F6 | 	mov	arg02, ##@LR__5650
046f8     13 13 02 F6 | 	mov	arg01, local01
046fc     84 34 B2 FD | 	call	#__system___string_cmp
04700     00 FA 0D F2 | 	cmp	result1, #0 wz
04704     AC 00 90 AD |  if_e	jmp	#LR__0241
04708     B0 00 90 FD | 	jmp	#LR__0242
0470c                 | LR__0220
0470c     01 FA 05 F6 | 	mov	result1, #1
04710     AC 00 90 FD | 	jmp	#LR__0243
04714                 | LR__0221
04714     02 FA 05 F6 | 	mov	result1, #2
04718     A4 00 90 FD | 	jmp	#LR__0243
0471c                 | LR__0222
0471c     03 FA 05 F6 | 	mov	result1, #3
04720     9C 00 90 FD | 	jmp	#LR__0243
04724                 | LR__0223
04724     04 FA 05 F6 | 	mov	result1, #4
04728     94 00 90 FD | 	jmp	#LR__0243
0472c                 | LR__0224
0472c     05 FA 05 F6 | 	mov	result1, #5
04730     8C 00 90 FD | 	jmp	#LR__0243
04734                 | LR__0225
04734     06 FA 05 F6 | 	mov	result1, #6
04738     84 00 90 FD | 	jmp	#LR__0243
0473c                 | LR__0226
0473c     07 FA 05 F6 | 	mov	result1, #7
04740     7C 00 90 FD | 	jmp	#LR__0243
04744                 | LR__0227
04744     08 FA 05 F6 | 	mov	result1, #8
04748     74 00 90 FD | 	jmp	#LR__0243
0474c                 | LR__0228
0474c     09 FA 05 F6 | 	mov	result1, #9
04750     6C 00 90 FD | 	jmp	#LR__0243
04754                 | LR__0229
04754     0A FA 05 F6 | 	mov	result1, #10
04758     64 00 90 FD | 	jmp	#LR__0243
0475c                 | LR__0230
0475c     0B FA 05 F6 | 	mov	result1, #11
04760     5C 00 90 FD | 	jmp	#LR__0243
04764                 | LR__0231
04764     0C FA 05 F6 | 	mov	result1, #12
04768     54 00 90 FD | 	jmp	#LR__0243
0476c                 | LR__0232
0476c     0D FA 05 F6 | 	mov	result1, #13
04770     4C 00 90 FD | 	jmp	#LR__0243
04774                 | LR__0233
04774     0E FA 05 F6 | 	mov	result1, #14
04778     44 00 90 FD | 	jmp	#LR__0243
0477c                 | LR__0234
0477c     1B FA 05 F6 | 	mov	result1, #27
04780     3C 00 90 FD | 	jmp	#LR__0243
04784                 | LR__0235
04784     27 FA 05 F6 | 	mov	result1, #39
04788     34 00 90 FD | 	jmp	#LR__0243
0478c                 | LR__0236
0478c     26 FA 05 F6 | 	mov	result1, #38
04790     2C 00 90 FD | 	jmp	#LR__0243
04794                 | LR__0237
04794     10 FA 05 F6 | 	mov	result1, #16
04798     24 00 90 FD | 	jmp	#LR__0243
0479c                 | LR__0238
0479c     0F FA 05 F6 | 	mov	result1, #15
047a0     1C 00 90 FD | 	jmp	#LR__0243
047a4                 | LR__0239
047a4     2A FA 05 F6 | 	mov	result1, #42
047a8     14 00 90 FD | 	jmp	#LR__0243
047ac                 | LR__0240
047ac     28 FA 05 F6 | 	mov	result1, #40
047b0     0C 00 90 FD | 	jmp	#LR__0243
047b4                 | LR__0241
047b4     29 FA 05 F6 | 	mov	result1, #41
047b8     04 00 90 FD | 	jmp	#LR__0243
047bc                 | LR__0242
047bc     00 FA 05 F6 | 	mov	result1, #0
047c0                 | LR__0243
047c0     A7 F0 03 F6 | 	mov	ptra, fp
047c4     B2 00 A0 FD | 	call	#popregs_
047c8                 | _isoperator_ret
047c8     2D 00 64 FD | 	ret
047cc                 | 
047cc                 | ' 
047cc                 | ' ' Check if the part is a channel#, return a token or 0 if not found
047cc                 | ' 
047cc                 | ' function ischannel(s as string) as ulong
047cc                 | _ischannel
047cc     02 4A 05 F6 | 	mov	COUNT_, #2
047d0     A8 00 A0 FD | 	call	#pushregs_
047d4                 | ' if left$(s,1)<>"#" then return 0
047d4     09 27 02 F6 | 	mov	local01, arg01
047d8     01 14 06 F6 | 	mov	arg02, #1
047dc     FC 53 B2 FD | 	call	#__system__Left_S
047e0     FD 12 02 F6 | 	mov	arg01, result1
047e4     BC 01 00 FF 
047e8     56 14 06 F6 | 	mov	arg02, ##@LR__5651
047ec     94 33 B2 FD | 	call	#__system___string_cmp
047f0     00 FA 0D F2 | 	cmp	result1, #0 wz
047f4     00 FA 05 56 |  if_ne	mov	result1, #0
047f8     AC 00 90 5D |  if_ne	jmp	#LR__0254
047fc                 | ' if len(s)<>2 then return 0
047fc     13 13 02 F6 | 	mov	arg01, local01
04800     09 29 02 F6 | 	mov	local02, arg01
04804     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04808                 | LR__0250
04808     14 FB C9 FA | 	rdbyte	result1, local02 wz
0480c     01 28 06 51 |  if_ne	add	local02, #1
04810     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
04814                 | LR__0251
04814     09 29 82 F1 | 	sub	local02, arg01
04818     14 FB 01 F6 | 	mov	result1, local02
0481c     02 FA 0D F2 | 	cmp	result1, #2 wz
04820     00 FA 05 56 |  if_ne	mov	result1, #0
04824     80 00 90 5D |  if_ne	jmp	#LR__0254
04828                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04828     13 13 02 F6 | 	mov	arg01, local01
0482c     01 14 06 F6 | 	mov	arg02, #1
04830     30 54 B2 FD | 	call	#__system__Right_S
04834     FD 12 02 F6 | 	mov	arg01, result1
04838     BC 01 00 FF 
0483c     58 14 06 F6 | 	mov	arg02, ##@LR__5652
04840     40 33 B2 FD | 	call	#__system___string_cmp
04844     00 FA 55 F2 | 	cmps	result1, #0 wc
04848     24 00 90 CD |  if_b	jmp	#LR__0252
0484c     13 13 02 F6 | 	mov	arg01, local01
04850     01 14 06 F6 | 	mov	arg02, #1
04854     0C 54 B2 FD | 	call	#__system__Right_S
04858     FD 12 02 F6 | 	mov	arg01, result1
0485c     BC 01 00 FF 
04860     5A 14 06 F6 | 	mov	arg02, ##@LR__5653
04864     1C 33 B2 FD | 	call	#__system___string_cmp
04868     01 FA 55 F2 | 	cmps	result1, #1 wc
0486c     08 00 90 CD |  if_b	jmp	#LR__0253
04870                 | LR__0252
04870     00 FA 05 F6 | 	mov	result1, #0
04874     30 00 90 FD | 	jmp	#LR__0254
04878                 | LR__0253
04878                 | ' return token_channel+val(right$(s,1))
04878     13 13 02 F6 | 	mov	arg01, local01
0487c     01 14 06 F6 | 	mov	arg02, #1
04880     E0 53 B2 FD | 	call	#__system__Right_S
04884     FD 12 02 F6 | 	mov	arg01, result1
04888     5C 69 B2 FD | 	call	#__system____builtin_atof
0488c     FD 14 02 F6 | 	mov	arg02, result1
04890     00 18 21 FF 
04894     00 12 06 F6 | 	mov	arg01, ##1110441984
04898     6C 5D B2 FD | 	call	#__system___float_add
0489c     FD 12 02 F6 | 	mov	arg01, result1
048a0     00 14 06 F6 | 	mov	arg02, #0
048a4     F8 65 B2 FD | 	call	#__system___float_tointeger
048a8                 | LR__0254
048a8     A7 F0 03 F6 | 	mov	ptra, fp
048ac     B2 00 A0 FD | 	call	#popregs_
048b0                 | _ischannel_ret
048b0     2D 00 64 FD | 	ret
048b4                 | 
048b4                 | ' 
048b4                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
048b4                 | ' ' todo: add spin2/pasm constants for pin control
048b4                 | ' 
048b4                 | ' function isconstant(s as string) as integer
048b4                 | _isconstant
048b4     01 4A 05 F6 | 	mov	COUNT_, #1
048b8     A8 00 A0 FD | 	call	#pushregs_
048bc                 | ' 
048bc                 | ' select case s
048bc     09 27 02 F6 | 	mov	local01, arg01
048c0     BC 01 00 FF 
048c4     5C 14 06 F6 | 	mov	arg02, ##@LR__5654
048c8     13 13 02 F6 | 	mov	arg01, local01
048cc     B4 32 B2 FD | 	call	#__system___string_cmp
048d0     00 FA 0D F2 | 	cmp	result1, #0 wz
048d4     34 00 90 AD |  if_e	jmp	#LR__0260
048d8     BC 01 00 FF 
048dc     62 14 06 F6 | 	mov	arg02, ##@LR__5655
048e0     13 13 02 F6 | 	mov	arg01, local01
048e4     9C 32 B2 FD | 	call	#__system___string_cmp
048e8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ec     24 00 90 AD |  if_e	jmp	#LR__0261
048f0     BC 01 00 FF 
048f4     69 14 06 F6 | 	mov	arg02, ##@LR__5656
048f8     13 13 02 F6 | 	mov	arg01, local01
048fc     84 32 B2 FD | 	call	#__system___string_cmp
04900     00 FA 0D F2 | 	cmp	result1, #0 wz
04904     14 00 90 AD |  if_e	jmp	#LR__0262
04908     18 00 90 FD | 	jmp	#LR__0263
0490c                 | LR__0260
0490c     01 FA 05 F6 | 	mov	result1, #1
04910     14 00 90 FD | 	jmp	#LR__0264
04914                 | LR__0261
04914     02 FA 05 F6 | 	mov	result1, #2
04918     0C 00 90 FD | 	jmp	#LR__0264
0491c                 | LR__0262
0491c     04 FA 05 F6 | 	mov	result1, #4
04920     04 00 90 FD | 	jmp	#LR__0264
04924                 | LR__0263
04924     00 FA 05 F6 | 	mov	result1, #0
04928                 | LR__0264
04928     A7 F0 03 F6 | 	mov	ptra, fp
0492c     B2 00 A0 FD | 	call	#popregs_
04930                 | _isconstant_ret
04930     2D 00 64 FD | 	ret
04934                 | 
04934                 | ' 
04934                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04934                 | ' 
04934                 | ' function isnotename(s as string) as ulong
04934                 | _isnotename
04934     07 4A 05 F6 | 	mov	COUNT_, #7
04938     A8 00 A0 FD | 	call	#pushregs_
0493c                 | ' if left$(s,1)<>"#" then return 0
0493c     09 27 02 F6 | 	mov	local01, arg01
04940     01 14 06 F6 | 	mov	arg02, #1
04944     94 52 B2 FD | 	call	#__system__Left_S
04948     FD 12 02 F6 | 	mov	arg01, result1
0494c     BC 01 00 FF 
04950     71 14 06 F6 | 	mov	arg02, ##@LR__5657
04954     2C 32 B2 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     00 FA 05 56 |  if_ne	mov	result1, #0
04960     30 03 90 5D |  if_ne	jmp	#LR__0293
04964                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04964     13 13 02 F6 | 	mov	arg01, local01
04968     03 14 06 F6 | 	mov	arg02, #3
0496c     01 16 06 F6 | 	mov	arg03, #1
04970     80 53 B2 FD | 	call	#__system__Mid_S
04974     FD 12 02 F6 | 	mov	arg01, result1
04978     BC 01 00 FF 
0497c     73 14 06 F6 | 	mov	arg02, ##@LR__5658
04980     00 32 B2 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     18 00 90 5D |  if_ne	jmp	#LR__0270
0498c     13 13 02 F6 | 	mov	arg01, local01
04990     02 14 06 F6 | 	mov	arg02, #2
04994     02 16 06 F6 | 	mov	arg03, #2
04998     58 53 B2 FD | 	call	#__system__Mid_S
0499c     FD 28 02 F6 | 	mov	local02, result1
049a0     14 00 90 FD | 	jmp	#LR__0271
049a4                 | LR__0270
049a4     13 13 02 F6 | 	mov	arg01, local01
049a8     02 14 06 F6 | 	mov	arg02, #2
049ac     01 16 06 F6 | 	mov	arg03, #1
049b0     40 53 B2 FD | 	call	#__system__Mid_S
049b4     FD 28 02 F6 | 	mov	local02, result1
049b8                 | LR__0271
049b8                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
049b8     13 13 02 F6 | 	mov	arg01, local01
049bc     09 2B 02 F6 | 	mov	local03, arg01
049c0     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
049c4                 | LR__0272
049c4     15 FB C9 FA | 	rdbyte	result1, local03 wz
049c8     01 2A 06 51 |  if_ne	add	local03, #1
049cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
049d0                 | LR__0273
049d0     09 2B 82 F1 | 	sub	local03, arg01
049d4     15 15 02 F6 | 	mov	arg02, local03
049d8     01 14 86 F1 | 	sub	arg02, #1
049dc     13 13 02 F6 | 	mov	arg01, local01
049e0     01 16 06 F6 | 	mov	arg03, #1
049e4     0C 53 B2 FD | 	call	#__system__Mid_S
049e8     FD 12 02 F6 | 	mov	arg01, result1
049ec     BC 01 00 FF 
049f0     75 14 06 F6 | 	mov	arg02, ##@LR__5659
049f4     8C 31 B2 FD | 	call	#__system___string_cmp
049f8     00 FA 0D F2 | 	cmp	result1, #0 wz
049fc     28 00 90 AD |  if_e	jmp	#LR__0274
04a00     13 13 02 F6 | 	mov	arg01, local01
04a04     01 14 06 F6 | 	mov	arg02, #1
04a08     58 52 B2 FD | 	call	#__system__Right_S
04a0c     FD 12 02 F6 | 	mov	arg01, result1
04a10     D4 67 B2 FD | 	call	#__system____builtin_atof
04a14     FD 12 02 F6 | 	mov	arg01, result1
04a18     00 14 06 F6 | 	mov	arg02, #0
04a1c     80 64 B2 FD | 	call	#__system___float_tointeger
04a20     FD 2C 02 F6 | 	mov	local04, result1
04a24     34 00 90 FD | 	jmp	#LR__0275
04a28                 | LR__0274
04a28     13 13 02 F6 | 	mov	arg01, local01
04a2c     01 14 06 F6 | 	mov	arg02, #1
04a30     30 52 B2 FD | 	call	#__system__Right_S
04a34     FD 12 02 F6 | 	mov	arg01, result1
04a38     AC 67 B2 FD | 	call	#__system____builtin_atof
04a3c     FD 14 02 F6 | 	mov	arg02, result1
04a40     00 C0 5F FF 
04a44     00 12 06 F6 | 	mov	arg01, ##-1082130432
04a48     8C 5F B2 FD | 	call	#__system___float_mul
04a4c     FD 12 02 F6 | 	mov	arg01, result1
04a50     00 14 06 F6 | 	mov	arg02, #0
04a54     48 64 B2 FD | 	call	#__system___float_tointeger
04a58     FD 2C 02 F6 | 	mov	local04, result1
04a5c                 | LR__0275
04a5c                 | ' 
04a5c                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04a5c     00 2C 0E F2 | 	cmp	local04, #0 wz
04a60     24 00 90 5D |  if_ne	jmp	#LR__0276
04a64     13 13 02 F6 | 	mov	arg01, local01
04a68     01 14 06 F6 | 	mov	arg02, #1
04a6c     F4 51 B2 FD | 	call	#__system__Right_S
04a70     FD 12 02 F6 | 	mov	arg01, result1
04a74     BC 01 00 FF 
04a78     77 14 06 F6 | 	mov	arg02, ##@LR__5660
04a7c     04 31 B2 FD | 	call	#__system___string_cmp
04a80     00 FA 0D F2 | 	cmp	result1, #0 wz
04a84     04 2C 06 56 |  if_ne	mov	local04, #4
04a88                 | LR__0276
04a88                 | ' 
04a88                 | ' select case s1
04a88     14 2F 02 F6 | 	mov	local05, local02
04a8c     BC 01 00 FF 
04a90     79 14 06 F6 | 	mov	arg02, ##@LR__5661
04a94     17 13 02 F6 | 	mov	arg01, local05
04a98     E8 30 B2 FD | 	call	#__system___string_cmp
04a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa0     24 01 90 AD |  if_e	jmp	#LR__0277
04aa4     BC 01 00 FF 
04aa8     7B 14 06 F6 | 	mov	arg02, ##@LR__5662
04aac     17 13 02 F6 | 	mov	arg01, local05
04ab0     D0 30 B2 FD | 	call	#__system___string_cmp
04ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab8     18 01 90 AD |  if_e	jmp	#LR__0278
04abc     BC 01 00 FF 
04ac0     7E 14 06 F6 | 	mov	arg02, ##@LR__5663
04ac4     17 13 02 F6 | 	mov	arg01, local05
04ac8     B8 30 B2 FD | 	call	#__system___string_cmp
04acc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad0     0C 01 90 AD |  if_e	jmp	#LR__0279
04ad4     BC 01 00 FF 
04ad8     80 14 06 F6 | 	mov	arg02, ##@LR__5664
04adc     17 13 02 F6 | 	mov	arg01, local05
04ae0     A0 30 B2 FD | 	call	#__system___string_cmp
04ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae8     00 01 90 AD |  if_e	jmp	#LR__0280
04aec     BC 01 00 FF 
04af0     83 14 06 F6 | 	mov	arg02, ##@LR__5665
04af4     17 13 02 F6 | 	mov	arg01, local05
04af8     88 30 B2 FD | 	call	#__system___string_cmp
04afc     00 FA 0D F2 | 	cmp	result1, #0 wz
04b00     F4 00 90 AD |  if_e	jmp	#LR__0281
04b04     BC 01 00 FF 
04b08     85 14 06 F6 | 	mov	arg02, ##@LR__5666
04b0c     17 13 02 F6 | 	mov	arg01, local05
04b10     70 30 B2 FD | 	call	#__system___string_cmp
04b14     00 FA 0D F2 | 	cmp	result1, #0 wz
04b18     E8 00 90 AD |  if_e	jmp	#LR__0282
04b1c     BC 01 00 FF 
04b20     87 14 06 F6 | 	mov	arg02, ##@LR__5667
04b24     17 13 02 F6 | 	mov	arg01, local05
04b28     58 30 B2 FD | 	call	#__system___string_cmp
04b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b30     DC 00 90 AD |  if_e	jmp	#LR__0283
04b34     BC 01 00 FF 
04b38     8A 14 06 F6 | 	mov	arg02, ##@LR__5668
04b3c     17 13 02 F6 | 	mov	arg01, local05
04b40     40 30 B2 FD | 	call	#__system___string_cmp
04b44     00 FA 0D F2 | 	cmp	result1, #0 wz
04b48     D0 00 90 AD |  if_e	jmp	#LR__0284
04b4c     BC 01 00 FF 
04b50     8C 14 06 F6 | 	mov	arg02, ##@LR__5669
04b54     17 13 02 F6 | 	mov	arg01, local05
04b58     28 30 B2 FD | 	call	#__system___string_cmp
04b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b60     C4 00 90 AD |  if_e	jmp	#LR__0285
04b64     BC 01 00 FF 
04b68     8F 14 06 F6 | 	mov	arg02, ##@LR__5670
04b6c     17 13 02 F6 | 	mov	arg01, local05
04b70     10 30 B2 FD | 	call	#__system___string_cmp
04b74     00 FA 0D F2 | 	cmp	result1, #0 wz
04b78     B8 00 90 AD |  if_e	jmp	#LR__0286
04b7c     BC 01 00 FF 
04b80     91 14 06 F6 | 	mov	arg02, ##@LR__5671
04b84     17 13 02 F6 | 	mov	arg01, local05
04b88     F8 2F B2 FD | 	call	#__system___string_cmp
04b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b90     AC 00 90 AD |  if_e	jmp	#LR__0287
04b94     BC 01 00 FF 
04b98     94 14 06 F6 | 	mov	arg02, ##@LR__5672
04b9c     17 13 02 F6 | 	mov	arg01, local05
04ba0     E0 2F B2 FD | 	call	#__system___string_cmp
04ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba8     A0 00 90 AD |  if_e	jmp	#LR__0288
04bac     BC 01 00 FF 
04bb0     96 14 06 F6 | 	mov	arg02, ##@LR__5673
04bb4     17 13 02 F6 | 	mov	arg01, local05
04bb8     C8 2F B2 FD | 	call	#__system___string_cmp
04bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc0     94 00 90 AD |  if_e	jmp	#LR__0289
04bc4     9C 00 90 FD | 	jmp	#LR__0290
04bc8                 | LR__0277
04bc8     01 00 00 FF 
04bcc     00 31 06 F6 | 	mov	local06, ##768
04bd0     98 00 90 FD | 	jmp	#LR__0291
04bd4                 | LR__0278
04bd4     01 00 00 FF 
04bd8     01 31 06 F6 | 	mov	local06, ##769
04bdc     8C 00 90 FD | 	jmp	#LR__0291
04be0                 | LR__0279
04be0     01 00 00 FF 
04be4     02 31 06 F6 | 	mov	local06, ##770
04be8     80 00 90 FD | 	jmp	#LR__0291
04bec                 | LR__0280
04bec     01 00 00 FF 
04bf0     03 31 06 F6 | 	mov	local06, ##771
04bf4     74 00 90 FD | 	jmp	#LR__0291
04bf8                 | LR__0281
04bf8     01 00 00 FF 
04bfc     04 31 06 F6 | 	mov	local06, ##772
04c00     68 00 90 FD | 	jmp	#LR__0291
04c04                 | LR__0282
04c04     01 00 00 FF 
04c08     05 31 06 F6 | 	mov	local06, ##773
04c0c     5C 00 90 FD | 	jmp	#LR__0291
04c10                 | LR__0283
04c10     01 00 00 FF 
04c14     06 31 06 F6 | 	mov	local06, ##774
04c18     50 00 90 FD | 	jmp	#LR__0291
04c1c                 | LR__0284
04c1c     01 00 00 FF 
04c20     07 31 06 F6 | 	mov	local06, ##775
04c24     44 00 90 FD | 	jmp	#LR__0291
04c28                 | LR__0285
04c28     01 00 00 FF 
04c2c     08 31 06 F6 | 	mov	local06, ##776
04c30     38 00 90 FD | 	jmp	#LR__0291
04c34                 | LR__0286
04c34     01 00 00 FF 
04c38     09 31 06 F6 | 	mov	local06, ##777
04c3c     2C 00 90 FD | 	jmp	#LR__0291
04c40                 | LR__0287
04c40     01 00 00 FF 
04c44     0A 31 06 F6 | 	mov	local06, ##778
04c48     20 00 90 FD | 	jmp	#LR__0291
04c4c                 | LR__0288
04c4c     01 00 00 FF 
04c50     0B 31 06 F6 | 	mov	local06, ##779
04c54     14 00 90 FD | 	jmp	#LR__0291
04c58                 | LR__0289
04c58     01 00 00 FF 
04c5c     0B 31 06 F6 | 	mov	local06, ##779
04c60     08 00 90 FD | 	jmp	#LR__0291
04c64                 | LR__0290
04c64     00 FA 05 F6 | 	mov	result1, #0
04c68     28 00 90 FD | 	jmp	#LR__0293
04c6c                 | LR__0291
04c6c                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04c6c     FF FF 7F FF 
04c70     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04c74     18 00 90 CD |  if_b	jmp	#LR__0292
04c78     0A 2C 56 F2 | 	cmps	local04, #10 wc
04c7c     16 33 02 C6 |  if_b	mov	local07, local04
04c80     01 32 66 C0 |  if_b	shl	local07, #1
04c84     16 33 02 C1 |  if_b	add	local07, local04
04c88     02 32 66 C0 |  if_b	shl	local07, #2
04c8c     19 31 02 C1 |  if_b	add	local06, local07
04c90                 | LR__0292
04c90                 | ' return token
04c90     18 FB 01 F6 | 	mov	result1, local06
04c94                 | LR__0293
04c94     A7 F0 03 F6 | 	mov	ptra, fp
04c98     B2 00 A0 FD | 	call	#popregs_
04c9c                 | _isnotename_ret
04c9c     2D 00 64 FD | 	ret
04ca0                 | 
04ca0                 | ' 
04ca0                 | ' ' Check if the part is a separator, return a token or 0 if not found
04ca0                 | ' 
04ca0                 | ' function isseparator(s as string) as ubyte
04ca0                 | _isseparator
04ca0     01 4A 05 F6 | 	mov	COUNT_, #1
04ca4     A8 00 A0 FD | 	call	#pushregs_
04ca8                 | ' 
04ca8                 | ' select case s
04ca8     09 27 02 F6 | 	mov	local01, arg01
04cac     BC 01 00 FF 
04cb0     98 14 06 F6 | 	mov	arg02, ##@LR__5674
04cb4     13 13 02 F6 | 	mov	arg01, local01
04cb8     C8 2E B2 FD | 	call	#__system___string_cmp
04cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc0     54 01 90 AD |  if_e	jmp	#LR__0300
04cc4     BC 01 00 FF 
04cc8     9A 14 06 F6 | 	mov	arg02, ##@LR__5675
04ccc     13 13 02 F6 | 	mov	arg01, local01
04cd0     B0 2E B2 FD | 	call	#__system___string_cmp
04cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd8     44 01 90 AD |  if_e	jmp	#LR__0301
04cdc     BC 01 00 FF 
04ce0     9C 14 06 F6 | 	mov	arg02, ##@LR__5676
04ce4     13 13 02 F6 | 	mov	arg01, local01
04ce8     98 2E B2 FD | 	call	#__system___string_cmp
04cec     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf0     34 01 90 AD |  if_e	jmp	#LR__0302
04cf4     BC 01 00 FF 
04cf8     9E 14 06 F6 | 	mov	arg02, ##@LR__5677
04cfc     13 13 02 F6 | 	mov	arg01, local01
04d00     80 2E B2 FD | 	call	#__system___string_cmp
04d04     00 FA 0D F2 | 	cmp	result1, #0 wz
04d08     24 01 90 AD |  if_e	jmp	#LR__0303
04d0c     BC 01 00 FF 
04d10     A0 14 06 F6 | 	mov	arg02, ##@LR__5678
04d14     13 13 02 F6 | 	mov	arg01, local01
04d18     68 2E B2 FD | 	call	#__system___string_cmp
04d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d20     14 01 90 AD |  if_e	jmp	#LR__0304
04d24     BC 01 00 FF 
04d28     A2 14 06 F6 | 	mov	arg02, ##@LR__5679
04d2c     13 13 02 F6 | 	mov	arg01, local01
04d30     50 2E B2 FD | 	call	#__system___string_cmp
04d34     00 FA 0D F2 | 	cmp	result1, #0 wz
04d38     04 01 90 AD |  if_e	jmp	#LR__0305
04d3c     BC 01 00 FF 
04d40     A4 14 06 F6 | 	mov	arg02, ##@LR__5680
04d44     13 13 02 F6 | 	mov	arg01, local01
04d48     38 2E B2 FD | 	call	#__system___string_cmp
04d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d50     F4 00 90 AD |  if_e	jmp	#LR__0306
04d54     BC 01 00 FF 
04d58     A6 14 06 F6 | 	mov	arg02, ##@LR__5681
04d5c     13 13 02 F6 | 	mov	arg01, local01
04d60     20 2E B2 FD | 	call	#__system___string_cmp
04d64     00 FA 0D F2 | 	cmp	result1, #0 wz
04d68     E4 00 90 AD |  if_e	jmp	#LR__0307
04d6c     BC 01 00 FF 
04d70     A8 14 06 F6 | 	mov	arg02, ##@LR__5682
04d74     13 13 02 F6 | 	mov	arg01, local01
04d78     08 2E B2 FD | 	call	#__system___string_cmp
04d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d80     D4 00 90 AD |  if_e	jmp	#LR__0308
04d84     BC 01 00 FF 
04d88     AA 14 06 F6 | 	mov	arg02, ##@LR__5683
04d8c     13 13 02 F6 | 	mov	arg01, local01
04d90     F0 2D B2 FD | 	call	#__system___string_cmp
04d94     00 FA 0D F2 | 	cmp	result1, #0 wz
04d98     C4 00 90 AD |  if_e	jmp	#LR__0309
04d9c     BC 01 00 FF 
04da0     AC 14 06 F6 | 	mov	arg02, ##@LR__5684
04da4     13 13 02 F6 | 	mov	arg01, local01
04da8     D8 2D B2 FD | 	call	#__system___string_cmp
04dac     00 FA 0D F2 | 	cmp	result1, #0 wz
04db0     B4 00 90 AD |  if_e	jmp	#LR__0310
04db4     BC 01 00 FF 
04db8     AE 14 06 F6 | 	mov	arg02, ##@LR__5685
04dbc     13 13 02 F6 | 	mov	arg01, local01
04dc0     C0 2D B2 FD | 	call	#__system___string_cmp
04dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc8     A4 00 90 AD |  if_e	jmp	#LR__0311
04dcc     BC 01 00 FF 
04dd0     B0 14 06 F6 | 	mov	arg02, ##@LR__5686
04dd4     13 13 02 F6 | 	mov	arg01, local01
04dd8     A8 2D B2 FD | 	call	#__system___string_cmp
04ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
04de0     94 00 90 AD |  if_e	jmp	#LR__0312
04de4     BC 01 00 FF 
04de8     B2 14 06 F6 | 	mov	arg02, ##@LR__5687
04dec     13 13 02 F6 | 	mov	arg01, local01
04df0     90 2D B2 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     84 00 90 AD |  if_e	jmp	#LR__0313
04dfc     BC 01 00 FF 
04e00     B4 14 06 F6 | 	mov	arg02, ##@LR__5688
04e04     13 13 02 F6 | 	mov	arg01, local01
04e08     78 2D B2 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     74 00 90 AD |  if_e	jmp	#LR__0314
04e14     78 00 90 FD | 	jmp	#LR__0315
04e18                 | LR__0300
04e18     01 FA 05 F6 | 	mov	result1, #1
04e1c     74 00 90 FD | 	jmp	#LR__0316
04e20                 | LR__0301
04e20     02 FA 05 F6 | 	mov	result1, #2
04e24     6C 00 90 FD | 	jmp	#LR__0316
04e28                 | LR__0302
04e28     1B FA 05 F6 | 	mov	result1, #27
04e2c     64 00 90 FD | 	jmp	#LR__0316
04e30                 | LR__0303
04e30     11 FA 05 F6 | 	mov	result1, #17
04e34     5C 00 90 FD | 	jmp	#LR__0316
04e38                 | LR__0304
04e38     05 FA 05 F6 | 	mov	result1, #5
04e3c     54 00 90 FD | 	jmp	#LR__0316
04e40                 | LR__0305
04e40     06 FA 05 F6 | 	mov	result1, #6
04e44     4C 00 90 FD | 	jmp	#LR__0316
04e48                 | LR__0306
04e48     12 FA 05 F6 | 	mov	result1, #18
04e4c     44 00 90 FD | 	jmp	#LR__0316
04e50                 | LR__0307
04e50     13 FA 05 F6 | 	mov	result1, #19
04e54     3C 00 90 FD | 	jmp	#LR__0316
04e58                 | LR__0308
04e58     0C FA 05 F6 | 	mov	result1, #12
04e5c     34 00 90 FD | 	jmp	#LR__0316
04e60                 | LR__0309
04e60     14 FA 05 F6 | 	mov	result1, #20
04e64     2C 00 90 FD | 	jmp	#LR__0316
04e68                 | LR__0310
04e68     15 FA 05 F6 | 	mov	result1, #21
04e6c     24 00 90 FD | 	jmp	#LR__0316
04e70                 | LR__0311
04e70     16 FA 05 F6 | 	mov	result1, #22
04e74     1C 00 90 FD | 	jmp	#LR__0316
04e78                 | LR__0312
04e78     FF FB 05 F6 | 	mov	result1, #511
04e7c     14 00 90 FD | 	jmp	#LR__0316
04e80                 | LR__0313
04e80     0F FA 05 F6 | 	mov	result1, #15
04e84     0C 00 90 FD | 	jmp	#LR__0316
04e88                 | LR__0314
04e88     10 FA 05 F6 | 	mov	result1, #16
04e8c     04 00 90 FD | 	jmp	#LR__0316
04e90                 | LR__0315
04e90     00 FA 05 F6 | 	mov	result1, #0
04e94                 | LR__0316
04e94     A7 F0 03 F6 | 	mov	ptra, fp
04e98     B2 00 A0 FD | 	call	#popregs_
04e9c                 | _isseparator_ret
04e9c     2D 00 64 FD | 	ret
04ea0                 | 
04ea0                 | ' 
04ea0                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04ea0                 | ' 
04ea0                 | ' function iscommand(s as string) as ubyte
04ea0                 | _iscommand
04ea0     01 4A 05 F6 | 	mov	COUNT_, #1
04ea4     A8 00 A0 FD | 	call	#pushregs_
04ea8                 | ' 
04ea8                 | ' select case s
04ea8     09 27 02 F6 | 	mov	local01, arg01
04eac     BC 01 00 FF 
04eb0     B8 14 06 F6 | 	mov	arg02, ##@LR__5690
04eb4     13 13 02 F6 | 	mov	arg01, local01
04eb8     C8 2C B2 FD | 	call	#__system___string_cmp
04ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec0     DC 0C 90 AD |  if_e	jmp	#LR__0320
04ec4     BC 01 00 FF 
04ec8     BD 14 06 F6 | 	mov	arg02, ##@LR__5691
04ecc     13 13 02 F6 | 	mov	arg01, local01
04ed0     B0 2C B2 FD | 	call	#__system___string_cmp
04ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed8     CC 0C 90 AD |  if_e	jmp	#LR__0321
04edc     BC 01 00 FF 
04ee0     C0 14 06 F6 | 	mov	arg02, ##@LR__5692
04ee4     13 13 02 F6 | 	mov	arg01, local01
04ee8     98 2C B2 FD | 	call	#__system___string_cmp
04eec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef0     BC 0C 90 AD |  if_e	jmp	#LR__0322
04ef4     BC 01 00 FF 
04ef8     C5 14 06 F6 | 	mov	arg02, ##@LR__5693
04efc     13 13 02 F6 | 	mov	arg01, local01
04f00     80 2C B2 FD | 	call	#__system___string_cmp
04f04     00 FA 0D F2 | 	cmp	result1, #0 wz
04f08     AC 0C 90 AD |  if_e	jmp	#LR__0323
04f0c     BC 01 00 FF 
04f10     C9 14 06 F6 | 	mov	arg02, ##@LR__5694
04f14     13 13 02 F6 | 	mov	arg01, local01
04f18     68 2C B2 FD | 	call	#__system___string_cmp
04f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f20     9C 0C 90 AD |  if_e	jmp	#LR__0324
04f24     BC 01 00 FF 
04f28     CE 14 06 F6 | 	mov	arg02, ##@LR__5695
04f2c     13 13 02 F6 | 	mov	arg01, local01
04f30     50 2C B2 FD | 	call	#__system___string_cmp
04f34     00 FA 0D F2 | 	cmp	result1, #0 wz
04f38     8C 0C 90 AD |  if_e	jmp	#LR__0325
04f3c     BC 01 00 FF 
04f40     D2 14 06 F6 | 	mov	arg02, ##@LR__5696
04f44     13 13 02 F6 | 	mov	arg01, local01
04f48     38 2C B2 FD | 	call	#__system___string_cmp
04f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f50     7C 0C 90 AD |  if_e	jmp	#LR__0326
04f54     BC 01 00 FF 
04f58     D5 14 06 F6 | 	mov	arg02, ##@LR__5697
04f5c     13 13 02 F6 | 	mov	arg01, local01
04f60     20 2C B2 FD | 	call	#__system___string_cmp
04f64     00 FA 0D F2 | 	cmp	result1, #0 wz
04f68     6C 0C 90 AD |  if_e	jmp	#LR__0327
04f6c     BC 01 00 FF 
04f70     E0 14 06 F6 | 	mov	arg02, ##@LR__5698
04f74     13 13 02 F6 | 	mov	arg01, local01
04f78     08 2C B2 FD | 	call	#__system___string_cmp
04f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f80     5C 0C 90 AD |  if_e	jmp	#LR__0328
04f84     BC 01 00 FF 
04f88     E4 14 06 F6 | 	mov	arg02, ##@LR__5699
04f8c     13 13 02 F6 | 	mov	arg01, local01
04f90     F0 2B B2 FD | 	call	#__system___string_cmp
04f94     00 FA 0D F2 | 	cmp	result1, #0 wz
04f98     4C 0C 90 AD |  if_e	jmp	#LR__0329
04f9c     BC 01 00 FF 
04fa0     EE 14 06 F6 | 	mov	arg02, ##@LR__5700
04fa4     13 13 02 F6 | 	mov	arg01, local01
04fa8     D8 2B B2 FD | 	call	#__system___string_cmp
04fac     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb0     3C 0C 90 AD |  if_e	jmp	#LR__0330
04fb4     BC 01 00 FF 
04fb8     F2 14 06 F6 | 	mov	arg02, ##@LR__5701
04fbc     13 13 02 F6 | 	mov	arg01, local01
04fc0     C0 2B B2 FD | 	call	#__system___string_cmp
04fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc8     2C 0C 90 AD |  if_e	jmp	#LR__0331
04fcc     BC 01 00 FF 
04fd0     FC 14 06 F6 | 	mov	arg02, ##@LR__5702
04fd4     13 13 02 F6 | 	mov	arg01, local01
04fd8     A8 2B B2 FD | 	call	#__system___string_cmp
04fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe0     1C 0C 90 AD |  if_e	jmp	#LR__0332
04fe4     BC 01 00 FF 
04fe8     00 15 06 F6 | 	mov	arg02, ##@LR__5703
04fec     13 13 02 F6 | 	mov	arg01, local01
04ff0     90 2B B2 FD | 	call	#__system___string_cmp
04ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff8     0C 0C 90 AD |  if_e	jmp	#LR__0333
04ffc     BC 01 00 FF 
05000     0B 15 06 F6 | 	mov	arg02, ##@LR__5704
05004     13 13 02 F6 | 	mov	arg01, local01
05008     78 2B B2 FD | 	call	#__system___string_cmp
0500c     00 FA 0D F2 | 	cmp	result1, #0 wz
05010     FC 0B 90 AD |  if_e	jmp	#LR__0334
05014     BC 01 00 FF 
05018     0F 15 06 F6 | 	mov	arg02, ##@LR__5705
0501c     13 13 02 F6 | 	mov	arg01, local01
05020     60 2B B2 FD | 	call	#__system___string_cmp
05024     00 FA 0D F2 | 	cmp	result1, #0 wz
05028     EC 0B 90 AD |  if_e	jmp	#LR__0335
0502c     BC 01 00 FF 
05030     16 15 06 F6 | 	mov	arg02, ##@LR__5706
05034     13 13 02 F6 | 	mov	arg01, local01
05038     48 2B B2 FD | 	call	#__system___string_cmp
0503c     00 FA 0D F2 | 	cmp	result1, #0 wz
05040     DC 0B 90 AD |  if_e	jmp	#LR__0336
05044     BC 01 00 FF 
05048     1A 15 06 F6 | 	mov	arg02, ##@LR__5707
0504c     13 13 02 F6 | 	mov	arg01, local01
05050     30 2B B2 FD | 	call	#__system___string_cmp
05054     00 FA 0D F2 | 	cmp	result1, #0 wz
05058     CC 0B 90 AD |  if_e	jmp	#LR__0337
0505c     BC 01 00 FF 
05060     20 15 06 F6 | 	mov	arg02, ##@LR__5708
05064     13 13 02 F6 | 	mov	arg01, local01
05068     18 2B B2 FD | 	call	#__system___string_cmp
0506c     00 FA 0D F2 | 	cmp	result1, #0 wz
05070     BC 0B 90 AD |  if_e	jmp	#LR__0338
05074     BC 01 00 FF 
05078     26 15 06 F6 | 	mov	arg02, ##@LR__5709
0507c     13 13 02 F6 | 	mov	arg01, local01
05080     00 2B B2 FD | 	call	#__system___string_cmp
05084     00 FA 0D F2 | 	cmp	result1, #0 wz
05088     AC 0B 90 AD |  if_e	jmp	#LR__0339
0508c     BC 01 00 FF 
05090     2A 15 06 F6 | 	mov	arg02, ##@LR__5710
05094     13 13 02 F6 | 	mov	arg01, local01
05098     E8 2A B2 FD | 	call	#__system___string_cmp
0509c     00 FA 0D F2 | 	cmp	result1, #0 wz
050a0     9C 0B 90 AD |  if_e	jmp	#LR__0340
050a4     BC 01 00 FF 
050a8     32 15 06 F6 | 	mov	arg02, ##@LR__5711
050ac     13 13 02 F6 | 	mov	arg01, local01
050b0     D0 2A B2 FD | 	call	#__system___string_cmp
050b4     00 FA 0D F2 | 	cmp	result1, #0 wz
050b8     8C 0B 90 AD |  if_e	jmp	#LR__0341
050bc     BC 01 00 FF 
050c0     38 15 06 F6 | 	mov	arg02, ##@LR__5712
050c4     13 13 02 F6 | 	mov	arg01, local01
050c8     B8 2A B2 FD | 	call	#__system___string_cmp
050cc     00 FA 0D F2 | 	cmp	result1, #0 wz
050d0     7C 0B 90 AD |  if_e	jmp	#LR__0342
050d4     BC 01 00 FF 
050d8     3B 15 06 F6 | 	mov	arg02, ##@LR__5713
050dc     13 13 02 F6 | 	mov	arg01, local01
050e0     A0 2A B2 FD | 	call	#__system___string_cmp
050e4     00 FA 0D F2 | 	cmp	result1, #0 wz
050e8     6C 0B 90 AD |  if_e	jmp	#LR__0343
050ec     BC 01 00 FF 
050f0     40 15 06 F6 | 	mov	arg02, ##@LR__5714
050f4     13 13 02 F6 | 	mov	arg01, local01
050f8     88 2A B2 FD | 	call	#__system___string_cmp
050fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05100     5C 0B 90 AD |  if_e	jmp	#LR__0344
05104     BC 01 00 FF 
05108     47 15 06 F6 | 	mov	arg02, ##@LR__5715
0510c     13 13 02 F6 | 	mov	arg01, local01
05110     70 2A B2 FD | 	call	#__system___string_cmp
05114     00 FA 0D F2 | 	cmp	result1, #0 wz
05118     4C 0B 90 AD |  if_e	jmp	#LR__0345
0511c     BC 01 00 FF 
05120     4C 15 06 F6 | 	mov	arg02, ##@LR__5716
05124     13 13 02 F6 | 	mov	arg01, local01
05128     58 2A B2 FD | 	call	#__system___string_cmp
0512c     00 FA 0D F2 | 	cmp	result1, #0 wz
05130     3C 0B 90 AD |  if_e	jmp	#LR__0346
05134     BC 01 00 FF 
05138     54 15 06 F6 | 	mov	arg02, ##@LR__5717
0513c     13 13 02 F6 | 	mov	arg01, local01
05140     40 2A B2 FD | 	call	#__system___string_cmp
05144     00 FA 0D F2 | 	cmp	result1, #0 wz
05148     2C 0B 90 AD |  if_e	jmp	#LR__0347
0514c     BC 01 00 FF 
05150     5B 15 06 F6 | 	mov	arg02, ##@LR__5718
05154     13 13 02 F6 | 	mov	arg01, local01
05158     28 2A B2 FD | 	call	#__system___string_cmp
0515c     00 FA 0D F2 | 	cmp	result1, #0 wz
05160     1C 0B 90 AD |  if_e	jmp	#LR__0348
05164     BC 01 00 FF 
05168     62 15 06 F6 | 	mov	arg02, ##@LR__5719
0516c     13 13 02 F6 | 	mov	arg01, local01
05170     10 2A B2 FD | 	call	#__system___string_cmp
05174     00 FA 0D F2 | 	cmp	result1, #0 wz
05178     0C 0B 90 AD |  if_e	jmp	#LR__0349
0517c     BC 01 00 FF 
05180     6C 15 06 F6 | 	mov	arg02, ##@LR__5720
05184     13 13 02 F6 | 	mov	arg01, local01
05188     F8 29 B2 FD | 	call	#__system___string_cmp
0518c     00 FA 0D F2 | 	cmp	result1, #0 wz
05190     FC 0A 90 AD |  if_e	jmp	#LR__0350
05194     BC 01 00 FF 
05198     70 15 06 F6 | 	mov	arg02, ##@LR__5721
0519c     13 13 02 F6 | 	mov	arg01, local01
051a0     E0 29 B2 FD | 	call	#__system___string_cmp
051a4     00 FA 0D F2 | 	cmp	result1, #0 wz
051a8     EC 0A 90 AD |  if_e	jmp	#LR__0351
051ac     BC 01 00 FF 
051b0     74 15 06 F6 | 	mov	arg02, ##@LR__5722
051b4     13 13 02 F6 | 	mov	arg01, local01
051b8     C8 29 B2 FD | 	call	#__system___string_cmp
051bc     00 FA 0D F2 | 	cmp	result1, #0 wz
051c0     DC 0A 90 AD |  if_e	jmp	#LR__0352
051c4     BC 01 00 FF 
051c8     7B 15 06 F6 | 	mov	arg02, ##@LR__5723
051cc     13 13 02 F6 | 	mov	arg01, local01
051d0     B0 29 B2 FD | 	call	#__system___string_cmp
051d4     00 FA 0D F2 | 	cmp	result1, #0 wz
051d8     CC 0A 90 AD |  if_e	jmp	#LR__0353
051dc     BC 01 00 FF 
051e0     7F 15 06 F6 | 	mov	arg02, ##@LR__5724
051e4     13 13 02 F6 | 	mov	arg01, local01
051e8     98 29 B2 FD | 	call	#__system___string_cmp
051ec     00 FA 0D F2 | 	cmp	result1, #0 wz
051f0     BC 0A 90 AD |  if_e	jmp	#LR__0354
051f4     BC 01 00 FF 
051f8     83 15 06 F6 | 	mov	arg02, ##@LR__5725
051fc     13 13 02 F6 | 	mov	arg01, local01
05200     80 29 B2 FD | 	call	#__system___string_cmp
05204     00 FA 0D F2 | 	cmp	result1, #0 wz
05208     AC 0A 90 AD |  if_e	jmp	#LR__0355
0520c     BC 01 00 FF 
05210     89 15 06 F6 | 	mov	arg02, ##@LR__5726
05214     13 13 02 F6 | 	mov	arg01, local01
05218     68 29 B2 FD | 	call	#__system___string_cmp
0521c     00 FA 0D F2 | 	cmp	result1, #0 wz
05220     9C 0A 90 AD |  if_e	jmp	#LR__0356
05224     BC 01 00 FF 
05228     8E 15 06 F6 | 	mov	arg02, ##@LR__5727
0522c     13 13 02 F6 | 	mov	arg01, local01
05230     50 29 B2 FD | 	call	#__system___string_cmp
05234     00 FA 0D F2 | 	cmp	result1, #0 wz
05238     8C 0A 90 AD |  if_e	jmp	#LR__0357
0523c     BC 01 00 FF 
05240     95 15 06 F6 | 	mov	arg02, ##@LR__5728
05244     13 13 02 F6 | 	mov	arg01, local01
05248     38 29 B2 FD | 	call	#__system___string_cmp
0524c     00 FA 0D F2 | 	cmp	result1, #0 wz
05250     7C 0A 90 AD |  if_e	jmp	#LR__0358
05254     BC 01 00 FF 
05258     99 15 06 F6 | 	mov	arg02, ##@LR__5729
0525c     13 13 02 F6 | 	mov	arg01, local01
05260     20 29 B2 FD | 	call	#__system___string_cmp
05264     00 FA 0D F2 | 	cmp	result1, #0 wz
05268     6C 0A 90 AD |  if_e	jmp	#LR__0359
0526c     BC 01 00 FF 
05270     9E 15 06 F6 | 	mov	arg02, ##@LR__5730
05274     13 13 02 F6 | 	mov	arg01, local01
05278     08 29 B2 FD | 	call	#__system___string_cmp
0527c     00 FA 0D F2 | 	cmp	result1, #0 wz
05280     5C 0A 90 AD |  if_e	jmp	#LR__0360
05284     BC 01 00 FF 
05288     A2 15 06 F6 | 	mov	arg02, ##@LR__5731
0528c     13 13 02 F6 | 	mov	arg01, local01
05290     F0 28 B2 FD | 	call	#__system___string_cmp
05294     00 FA 0D F2 | 	cmp	result1, #0 wz
05298     4C 0A 90 AD |  if_e	jmp	#LR__0361
0529c     BC 01 00 FF 
052a0     A8 15 06 F6 | 	mov	arg02, ##@LR__5732
052a4     13 13 02 F6 | 	mov	arg01, local01
052a8     D8 28 B2 FD | 	call	#__system___string_cmp
052ac     00 FA 0D F2 | 	cmp	result1, #0 wz
052b0     3C 0A 90 AD |  if_e	jmp	#LR__0362
052b4     BC 01 00 FF 
052b8     AB 15 06 F6 | 	mov	arg02, ##@LR__5733
052bc     13 13 02 F6 | 	mov	arg01, local01
052c0     C0 28 B2 FD | 	call	#__system___string_cmp
052c4     00 FA 0D F2 | 	cmp	result1, #0 wz
052c8     2C 0A 90 AD |  if_e	jmp	#LR__0363
052cc     BC 01 00 FF 
052d0     B3 15 06 F6 | 	mov	arg02, ##@LR__5734
052d4     13 13 02 F6 | 	mov	arg01, local01
052d8     A8 28 B2 FD | 	call	#__system___string_cmp
052dc     00 FA 0D F2 | 	cmp	result1, #0 wz
052e0     1C 0A 90 AD |  if_e	jmp	#LR__0364
052e4     BC 01 00 FF 
052e8     B7 15 06 F6 | 	mov	arg02, ##@LR__5735
052ec     13 13 02 F6 | 	mov	arg01, local01
052f0     90 28 B2 FD | 	call	#__system___string_cmp
052f4     00 FA 0D F2 | 	cmp	result1, #0 wz
052f8     0C 0A 90 AD |  if_e	jmp	#LR__0365
052fc     BC 01 00 FF 
05300     BC 15 06 F6 | 	mov	arg02, ##@LR__5736
05304     13 13 02 F6 | 	mov	arg01, local01
05308     78 28 B2 FD | 	call	#__system___string_cmp
0530c     00 FA 0D F2 | 	cmp	result1, #0 wz
05310     FC 09 90 AD |  if_e	jmp	#LR__0366
05314     BC 01 00 FF 
05318     C0 15 06 F6 | 	mov	arg02, ##@LR__5737
0531c     13 13 02 F6 | 	mov	arg01, local01
05320     60 28 B2 FD | 	call	#__system___string_cmp
05324     00 FA 0D F2 | 	cmp	result1, #0 wz
05328     EC 09 90 AD |  if_e	jmp	#LR__0367
0532c     BC 01 00 FF 
05330     C5 15 06 F6 | 	mov	arg02, ##@LR__5738
05334     13 13 02 F6 | 	mov	arg01, local01
05338     48 28 B2 FD | 	call	#__system___string_cmp
0533c     00 FA 0D F2 | 	cmp	result1, #0 wz
05340     DC 09 90 AD |  if_e	jmp	#LR__0368
05344     BC 01 00 FF 
05348     C9 15 06 F6 | 	mov	arg02, ##@LR__5739
0534c     13 13 02 F6 | 	mov	arg01, local01
05350     30 28 B2 FD | 	call	#__system___string_cmp
05354     00 FA 0D F2 | 	cmp	result1, #0 wz
05358     CC 09 90 AD |  if_e	jmp	#LR__0369
0535c     BC 01 00 FF 
05360     CC 15 06 F6 | 	mov	arg02, ##@LR__5740
05364     13 13 02 F6 | 	mov	arg01, local01
05368     18 28 B2 FD | 	call	#__system___string_cmp
0536c     00 FA 0D F2 | 	cmp	result1, #0 wz
05370     BC 09 90 AD |  if_e	jmp	#LR__0370
05374     BC 01 00 FF 
05378     D2 15 06 F6 | 	mov	arg02, ##@LR__5741
0537c     13 13 02 F6 | 	mov	arg01, local01
05380     00 28 B2 FD | 	call	#__system___string_cmp
05384     00 FA 0D F2 | 	cmp	result1, #0 wz
05388     AC 09 90 AD |  if_e	jmp	#LR__0371
0538c     BC 01 00 FF 
05390     D6 15 06 F6 | 	mov	arg02, ##@LR__5742
05394     13 13 02 F6 | 	mov	arg01, local01
05398     E8 27 B2 FD | 	call	#__system___string_cmp
0539c     00 FA 0D F2 | 	cmp	result1, #0 wz
053a0     9C 09 90 AD |  if_e	jmp	#LR__0372
053a4     BC 01 00 FF 
053a8     DA 15 06 F6 | 	mov	arg02, ##@LR__5743
053ac     13 13 02 F6 | 	mov	arg01, local01
053b0     D0 27 B2 FD | 	call	#__system___string_cmp
053b4     00 FA 0D F2 | 	cmp	result1, #0 wz
053b8     8C 09 90 AD |  if_e	jmp	#LR__0373
053bc     BC 01 00 FF 
053c0     E0 15 06 F6 | 	mov	arg02, ##@LR__5744
053c4     13 13 02 F6 | 	mov	arg01, local01
053c8     B8 27 B2 FD | 	call	#__system___string_cmp
053cc     00 FA 0D F2 | 	cmp	result1, #0 wz
053d0     7C 09 90 AD |  if_e	jmp	#LR__0374
053d4     BC 01 00 FF 
053d8     E5 15 06 F6 | 	mov	arg02, ##@LR__5745
053dc     13 13 02 F6 | 	mov	arg01, local01
053e0     A0 27 B2 FD | 	call	#__system___string_cmp
053e4     00 FA 0D F2 | 	cmp	result1, #0 wz
053e8     6C 09 90 AD |  if_e	jmp	#LR__0375
053ec     BC 01 00 FF 
053f0     E8 15 06 F6 | 	mov	arg02, ##@LR__5746
053f4     13 13 02 F6 | 	mov	arg01, local01
053f8     88 27 B2 FD | 	call	#__system___string_cmp
053fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05400     5C 09 90 AD |  if_e	jmp	#LR__0376
05404     BC 01 00 FF 
05408     EB 15 06 F6 | 	mov	arg02, ##@LR__5747
0540c     13 13 02 F6 | 	mov	arg01, local01
05410     70 27 B2 FD | 	call	#__system___string_cmp
05414     00 FA 0D F2 | 	cmp	result1, #0 wz
05418     4C 09 90 AD |  if_e	jmp	#LR__0377
0541c     BC 01 00 FF 
05420     EF 15 06 F6 | 	mov	arg02, ##@LR__5748
05424     13 13 02 F6 | 	mov	arg01, local01
05428     58 27 B2 FD | 	call	#__system___string_cmp
0542c     00 FA 0D F2 | 	cmp	result1, #0 wz
05430     3C 09 90 AD |  if_e	jmp	#LR__0378
05434     BC 01 00 FF 
05438     F2 15 06 F6 | 	mov	arg02, ##@LR__5749
0543c     13 13 02 F6 | 	mov	arg01, local01
05440     40 27 B2 FD | 	call	#__system___string_cmp
05444     00 FA 0D F2 | 	cmp	result1, #0 wz
05448     2C 09 90 AD |  if_e	jmp	#LR__0379
0544c     BC 01 00 FF 
05450     F8 15 06 F6 | 	mov	arg02, ##@LR__5750
05454     13 13 02 F6 | 	mov	arg01, local01
05458     28 27 B2 FD | 	call	#__system___string_cmp
0545c     00 FA 0D F2 | 	cmp	result1, #0 wz
05460     1C 09 90 AD |  if_e	jmp	#LR__0380
05464     BC 01 00 FF 
05468     FD 15 06 F6 | 	mov	arg02, ##@LR__5751
0546c     13 13 02 F6 | 	mov	arg01, local01
05470     10 27 B2 FD | 	call	#__system___string_cmp
05474     00 FA 0D F2 | 	cmp	result1, #0 wz
05478     0C 09 90 AD |  if_e	jmp	#LR__0381
0547c     BD 01 00 FF 
05480     00 14 06 F6 | 	mov	arg02, ##@LR__5752
05484     13 13 02 F6 | 	mov	arg01, local01
05488     F8 26 B2 FD | 	call	#__system___string_cmp
0548c     00 FA 0D F2 | 	cmp	result1, #0 wz
05490     FC 08 90 AD |  if_e	jmp	#LR__0382
05494     BD 01 00 FF 
05498     05 14 06 F6 | 	mov	arg02, ##@LR__5753
0549c     13 13 02 F6 | 	mov	arg01, local01
054a0     E0 26 B2 FD | 	call	#__system___string_cmp
054a4     00 FA 0D F2 | 	cmp	result1, #0 wz
054a8     EC 08 90 AD |  if_e	jmp	#LR__0383
054ac     BD 01 00 FF 
054b0     09 14 06 F6 | 	mov	arg02, ##@LR__5754
054b4     13 13 02 F6 | 	mov	arg01, local01
054b8     C8 26 B2 FD | 	call	#__system___string_cmp
054bc     00 FA 0D F2 | 	cmp	result1, #0 wz
054c0     DC 08 90 AD |  if_e	jmp	#LR__0384
054c4     BD 01 00 FF 
054c8     0F 14 06 F6 | 	mov	arg02, ##@LR__5755
054cc     13 13 02 F6 | 	mov	arg01, local01
054d0     B0 26 B2 FD | 	call	#__system___string_cmp
054d4     00 FA 0D F2 | 	cmp	result1, #0 wz
054d8     CC 08 90 AD |  if_e	jmp	#LR__0385
054dc     BD 01 00 FF 
054e0     15 14 06 F6 | 	mov	arg02, ##@LR__5756
054e4     13 13 02 F6 | 	mov	arg01, local01
054e8     98 26 B2 FD | 	call	#__system___string_cmp
054ec     00 FA 0D F2 | 	cmp	result1, #0 wz
054f0     BC 08 90 AD |  if_e	jmp	#LR__0386
054f4     BD 01 00 FF 
054f8     1A 14 06 F6 | 	mov	arg02, ##@LR__5757
054fc     13 13 02 F6 | 	mov	arg01, local01
05500     80 26 B2 FD | 	call	#__system___string_cmp
05504     00 FA 0D F2 | 	cmp	result1, #0 wz
05508     AC 08 90 AD |  if_e	jmp	#LR__0387
0550c     BD 01 00 FF 
05510     1D 14 06 F6 | 	mov	arg02, ##@LR__5758
05514     13 13 02 F6 | 	mov	arg01, local01
05518     68 26 B2 FD | 	call	#__system___string_cmp
0551c     00 FA 0D F2 | 	cmp	result1, #0 wz
05520     9C 08 90 AD |  if_e	jmp	#LR__0388
05524     BD 01 00 FF 
05528     23 14 06 F6 | 	mov	arg02, ##@LR__5759
0552c     13 13 02 F6 | 	mov	arg01, local01
05530     50 26 B2 FD | 	call	#__system___string_cmp
05534     00 FA 0D F2 | 	cmp	result1, #0 wz
05538     8C 08 90 AD |  if_e	jmp	#LR__0389
0553c     BD 01 00 FF 
05540     27 14 06 F6 | 	mov	arg02, ##@LR__5760
05544     13 13 02 F6 | 	mov	arg01, local01
05548     38 26 B2 FD | 	call	#__system___string_cmp
0554c     00 FA 0D F2 | 	cmp	result1, #0 wz
05550     7C 08 90 AD |  if_e	jmp	#LR__0390
05554     BD 01 00 FF 
05558     2C 14 06 F6 | 	mov	arg02, ##@LR__5761
0555c     13 13 02 F6 | 	mov	arg01, local01
05560     20 26 B2 FD | 	call	#__system___string_cmp
05564     00 FA 0D F2 | 	cmp	result1, #0 wz
05568     6C 08 90 AD |  if_e	jmp	#LR__0391
0556c     BD 01 00 FF 
05570     2F 14 06 F6 | 	mov	arg02, ##@LR__5762
05574     13 13 02 F6 | 	mov	arg01, local01
05578     08 26 B2 FD | 	call	#__system___string_cmp
0557c     00 FA 0D F2 | 	cmp	result1, #0 wz
05580     5C 08 90 AD |  if_e	jmp	#LR__0392
05584     BD 01 00 FF 
05588     32 14 06 F6 | 	mov	arg02, ##@LR__5763
0558c     13 13 02 F6 | 	mov	arg01, local01
05590     F0 25 B2 FD | 	call	#__system___string_cmp
05594     00 FA 0D F2 | 	cmp	result1, #0 wz
05598     4C 08 90 AD |  if_e	jmp	#LR__0393
0559c     BD 01 00 FF 
055a0     37 14 06 F6 | 	mov	arg02, ##@LR__5764
055a4     13 13 02 F6 | 	mov	arg01, local01
055a8     D8 25 B2 FD | 	call	#__system___string_cmp
055ac     00 FA 0D F2 | 	cmp	result1, #0 wz
055b0     3C 08 90 AD |  if_e	jmp	#LR__0394
055b4     BD 01 00 FF 
055b8     3D 14 06 F6 | 	mov	arg02, ##@LR__5765
055bc     13 13 02 F6 | 	mov	arg01, local01
055c0     C0 25 B2 FD | 	call	#__system___string_cmp
055c4     00 FA 0D F2 | 	cmp	result1, #0 wz
055c8     2C 08 90 AD |  if_e	jmp	#LR__0395
055cc     BD 01 00 FF 
055d0     41 14 06 F6 | 	mov	arg02, ##@LR__5766
055d4     13 13 02 F6 | 	mov	arg01, local01
055d8     A8 25 B2 FD | 	call	#__system___string_cmp
055dc     00 FA 0D F2 | 	cmp	result1, #0 wz
055e0     1C 08 90 AD |  if_e	jmp	#LR__0396
055e4     BD 01 00 FF 
055e8     4A 14 06 F6 | 	mov	arg02, ##@LR__5767
055ec     13 13 02 F6 | 	mov	arg01, local01
055f0     90 25 B2 FD | 	call	#__system___string_cmp
055f4     00 FA 0D F2 | 	cmp	result1, #0 wz
055f8     0C 08 90 AD |  if_e	jmp	#LR__0397
055fc     BD 01 00 FF 
05600     50 14 06 F6 | 	mov	arg02, ##@LR__5768
05604     13 13 02 F6 | 	mov	arg01, local01
05608     78 25 B2 FD | 	call	#__system___string_cmp
0560c     00 FA 0D F2 | 	cmp	result1, #0 wz
05610     FC 07 90 AD |  if_e	jmp	#LR__0398
05614     BD 01 00 FF 
05618     56 14 06 F6 | 	mov	arg02, ##@LR__5769
0561c     13 13 02 F6 | 	mov	arg01, local01
05620     60 25 B2 FD | 	call	#__system___string_cmp
05624     00 FA 0D F2 | 	cmp	result1, #0 wz
05628     EC 07 90 AD |  if_e	jmp	#LR__0399
0562c     BD 01 00 FF 
05630     5F 14 06 F6 | 	mov	arg02, ##@LR__5770
05634     13 13 02 F6 | 	mov	arg01, local01
05638     48 25 B2 FD | 	call	#__system___string_cmp
0563c     00 FA 0D F2 | 	cmp	result1, #0 wz
05640     DC 07 90 AD |  if_e	jmp	#LR__0400
05644     BD 01 00 FF 
05648     69 14 06 F6 | 	mov	arg02, ##@LR__5771
0564c     13 13 02 F6 | 	mov	arg01, local01
05650     30 25 B2 FD | 	call	#__system___string_cmp
05654     00 FA 0D F2 | 	cmp	result1, #0 wz
05658     CC 07 90 AD |  if_e	jmp	#LR__0401
0565c     BD 01 00 FF 
05660     72 14 06 F6 | 	mov	arg02, ##@LR__5772
05664     13 13 02 F6 | 	mov	arg01, local01
05668     18 25 B2 FD | 	call	#__system___string_cmp
0566c     00 FA 0D F2 | 	cmp	result1, #0 wz
05670     BC 07 90 AD |  if_e	jmp	#LR__0402
05674     BD 01 00 FF 
05678     77 14 06 F6 | 	mov	arg02, ##@LR__5773
0567c     13 13 02 F6 | 	mov	arg01, local01
05680     00 25 B2 FD | 	call	#__system___string_cmp
05684     00 FA 0D F2 | 	cmp	result1, #0 wz
05688     AC 07 90 AD |  if_e	jmp	#LR__0403
0568c     BD 01 00 FF 
05690     7A 14 06 F6 | 	mov	arg02, ##@LR__5774
05694     13 13 02 F6 | 	mov	arg01, local01
05698     E8 24 B2 FD | 	call	#__system___string_cmp
0569c     00 FA 0D F2 | 	cmp	result1, #0 wz
056a0     9C 07 90 AD |  if_e	jmp	#LR__0404
056a4     BD 01 00 FF 
056a8     7F 14 06 F6 | 	mov	arg02, ##@LR__5775
056ac     13 13 02 F6 | 	mov	arg01, local01
056b0     D0 24 B2 FD | 	call	#__system___string_cmp
056b4     00 FA 0D F2 | 	cmp	result1, #0 wz
056b8     8C 07 90 AD |  if_e	jmp	#LR__0405
056bc     BD 01 00 FF 
056c0     83 14 06 F6 | 	mov	arg02, ##@LR__5776
056c4     13 13 02 F6 | 	mov	arg01, local01
056c8     B8 24 B2 FD | 	call	#__system___string_cmp
056cc     00 FA 0D F2 | 	cmp	result1, #0 wz
056d0     7C 07 90 AD |  if_e	jmp	#LR__0406
056d4     BD 01 00 FF 
056d8     88 14 06 F6 | 	mov	arg02, ##@LR__5777
056dc     13 13 02 F6 | 	mov	arg01, local01
056e0     A0 24 B2 FD | 	call	#__system___string_cmp
056e4     00 FA 0D F2 | 	cmp	result1, #0 wz
056e8     6C 07 90 AD |  if_e	jmp	#LR__0407
056ec     BD 01 00 FF 
056f0     8C 14 06 F6 | 	mov	arg02, ##@LR__5778
056f4     13 13 02 F6 | 	mov	arg01, local01
056f8     88 24 B2 FD | 	call	#__system___string_cmp
056fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05700     5C 07 90 AD |  if_e	jmp	#LR__0408
05704     BD 01 00 FF 
05708     95 14 06 F6 | 	mov	arg02, ##@LR__5779
0570c     13 13 02 F6 | 	mov	arg01, local01
05710     70 24 B2 FD | 	call	#__system___string_cmp
05714     00 FA 0D F2 | 	cmp	result1, #0 wz
05718     4C 07 90 AD |  if_e	jmp	#LR__0409
0571c     BD 01 00 FF 
05720     9A 14 06 F6 | 	mov	arg02, ##@LR__5780
05724     13 13 02 F6 | 	mov	arg01, local01
05728     58 24 B2 FD | 	call	#__system___string_cmp
0572c     00 FA 0D F2 | 	cmp	result1, #0 wz
05730     3C 07 90 AD |  if_e	jmp	#LR__0410
05734     BD 01 00 FF 
05738     A0 14 06 F6 | 	mov	arg02, ##@LR__5781
0573c     13 13 02 F6 | 	mov	arg01, local01
05740     40 24 B2 FD | 	call	#__system___string_cmp
05744     00 FA 0D F2 | 	cmp	result1, #0 wz
05748     2C 07 90 AD |  if_e	jmp	#LR__0411
0574c     BD 01 00 FF 
05750     A2 14 06 F6 | 	mov	arg02, ##@LR__5782
05754     13 13 02 F6 | 	mov	arg01, local01
05758     28 24 B2 FD | 	call	#__system___string_cmp
0575c     00 FA 0D F2 | 	cmp	result1, #0 wz
05760     1C 07 90 AD |  if_e	jmp	#LR__0412
05764     BD 01 00 FF 
05768     A6 14 06 F6 | 	mov	arg02, ##@LR__5783
0576c     13 13 02 F6 | 	mov	arg01, local01
05770     10 24 B2 FD | 	call	#__system___string_cmp
05774     00 FA 0D F2 | 	cmp	result1, #0 wz
05778     0C 07 90 AD |  if_e	jmp	#LR__0413
0577c     BD 01 00 FF 
05780     AA 14 06 F6 | 	mov	arg02, ##@LR__5784
05784     13 13 02 F6 | 	mov	arg01, local01
05788     F8 23 B2 FD | 	call	#__system___string_cmp
0578c     00 FA 0D F2 | 	cmp	result1, #0 wz
05790     FC 06 90 AD |  if_e	jmp	#LR__0414
05794     BD 01 00 FF 
05798     AF 14 06 F6 | 	mov	arg02, ##@LR__5785
0579c     13 13 02 F6 | 	mov	arg01, local01
057a0     E0 23 B2 FD | 	call	#__system___string_cmp
057a4     00 FA 0D F2 | 	cmp	result1, #0 wz
057a8     EC 06 90 AD |  if_e	jmp	#LR__0415
057ac     BD 01 00 FF 
057b0     B7 14 06 F6 | 	mov	arg02, ##@LR__5786
057b4     13 13 02 F6 | 	mov	arg01, local01
057b8     C8 23 B2 FD | 	call	#__system___string_cmp
057bc     00 FA 0D F2 | 	cmp	result1, #0 wz
057c0     DC 06 90 AD |  if_e	jmp	#LR__0416
057c4     BD 01 00 FF 
057c8     BB 14 06 F6 | 	mov	arg02, ##@LR__5787
057cc     13 13 02 F6 | 	mov	arg01, local01
057d0     B0 23 B2 FD | 	call	#__system___string_cmp
057d4     00 FA 0D F2 | 	cmp	result1, #0 wz
057d8     CC 06 90 AD |  if_e	jmp	#LR__0417
057dc     BD 01 00 FF 
057e0     BD 14 06 F6 | 	mov	arg02, ##@LR__5788
057e4     13 13 02 F6 | 	mov	arg01, local01
057e8     98 23 B2 FD | 	call	#__system___string_cmp
057ec     00 FA 0D F2 | 	cmp	result1, #0 wz
057f0     BC 06 90 AD |  if_e	jmp	#LR__0418
057f4     BD 01 00 FF 
057f8     C5 14 06 F6 | 	mov	arg02, ##@LR__5789
057fc     13 13 02 F6 | 	mov	arg01, local01
05800     80 23 B2 FD | 	call	#__system___string_cmp
05804     00 FA 0D F2 | 	cmp	result1, #0 wz
05808     AC 06 90 AD |  if_e	jmp	#LR__0419
0580c     BD 01 00 FF 
05810     D4 14 06 F6 | 	mov	arg02, ##@LR__5790
05814     13 13 02 F6 | 	mov	arg01, local01
05818     68 23 B2 FD | 	call	#__system___string_cmp
0581c     00 FA 0D F2 | 	cmp	result1, #0 wz
05820     9C 06 90 AD |  if_e	jmp	#LR__0420
05824     BD 01 00 FF 
05828     D8 14 06 F6 | 	mov	arg02, ##@LR__5791
0582c     13 13 02 F6 | 	mov	arg01, local01
05830     50 23 B2 FD | 	call	#__system___string_cmp
05834     00 FA 0D F2 | 	cmp	result1, #0 wz
05838     8C 06 90 AD |  if_e	jmp	#LR__0421
0583c     BD 01 00 FF 
05840     DF 14 06 F6 | 	mov	arg02, ##@LR__5792
05844     13 13 02 F6 | 	mov	arg01, local01
05848     38 23 B2 FD | 	call	#__system___string_cmp
0584c     00 FA 0D F2 | 	cmp	result1, #0 wz
05850     7C 06 90 AD |  if_e	jmp	#LR__0422
05854     BD 01 00 FF 
05858     E3 14 06 F6 | 	mov	arg02, ##@LR__5793
0585c     13 13 02 F6 | 	mov	arg01, local01
05860     20 23 B2 FD | 	call	#__system___string_cmp
05864     00 FA 0D F2 | 	cmp	result1, #0 wz
05868     6C 06 90 AD |  if_e	jmp	#LR__0423
0586c     BD 01 00 FF 
05870     E8 14 06 F6 | 	mov	arg02, ##@LR__5794
05874     13 13 02 F6 | 	mov	arg01, local01
05878     08 23 B2 FD | 	call	#__system___string_cmp
0587c     00 FA 0D F2 | 	cmp	result1, #0 wz
05880     5C 06 90 AD |  if_e	jmp	#LR__0424
05884     BD 01 00 FF 
05888     EB 14 06 F6 | 	mov	arg02, ##@LR__5795
0588c     13 13 02 F6 | 	mov	arg01, local01
05890     F0 22 B2 FD | 	call	#__system___string_cmp
05894     00 FA 0D F2 | 	cmp	result1, #0 wz
05898     4C 06 90 AD |  if_e	jmp	#LR__0425
0589c     BD 01 00 FF 
058a0     F4 14 06 F6 | 	mov	arg02, ##@LR__5796
058a4     13 13 02 F6 | 	mov	arg01, local01
058a8     D8 22 B2 FD | 	call	#__system___string_cmp
058ac     00 FA 0D F2 | 	cmp	result1, #0 wz
058b0     3C 06 90 AD |  if_e	jmp	#LR__0426
058b4     BD 01 00 FF 
058b8     F8 14 06 F6 | 	mov	arg02, ##@LR__5797
058bc     13 13 02 F6 | 	mov	arg01, local01
058c0     C0 22 B2 FD | 	call	#__system___string_cmp
058c4     00 FA 0D F2 | 	cmp	result1, #0 wz
058c8     2C 06 90 AD |  if_e	jmp	#LR__0427
058cc     BD 01 00 FF 
058d0     01 15 06 F6 | 	mov	arg02, ##@LR__5798
058d4     13 13 02 F6 | 	mov	arg01, local01
058d8     A8 22 B2 FD | 	call	#__system___string_cmp
058dc     00 FA 0D F2 | 	cmp	result1, #0 wz
058e0     1C 06 90 AD |  if_e	jmp	#LR__0428
058e4     BD 01 00 FF 
058e8     05 15 06 F6 | 	mov	arg02, ##@LR__5799
058ec     13 13 02 F6 | 	mov	arg01, local01
058f0     90 22 B2 FD | 	call	#__system___string_cmp
058f4     00 FA 0D F2 | 	cmp	result1, #0 wz
058f8     0C 06 90 AD |  if_e	jmp	#LR__0429
058fc     BD 01 00 FF 
05900     0C 15 06 F6 | 	mov	arg02, ##@LR__5800
05904     13 13 02 F6 | 	mov	arg01, local01
05908     78 22 B2 FD | 	call	#__system___string_cmp
0590c     00 FA 0D F2 | 	cmp	result1, #0 wz
05910     FC 05 90 AD |  if_e	jmp	#LR__0430
05914     BD 01 00 FF 
05918     10 15 06 F6 | 	mov	arg02, ##@LR__5801
0591c     13 13 02 F6 | 	mov	arg01, local01
05920     60 22 B2 FD | 	call	#__system___string_cmp
05924     00 FA 0D F2 | 	cmp	result1, #0 wz
05928     EC 05 90 AD |  if_e	jmp	#LR__0431
0592c     BD 01 00 FF 
05930     17 15 06 F6 | 	mov	arg02, ##@LR__5802
05934     13 13 02 F6 | 	mov	arg01, local01
05938     48 22 B2 FD | 	call	#__system___string_cmp
0593c     00 FA 0D F2 | 	cmp	result1, #0 wz
05940     DC 05 90 AD |  if_e	jmp	#LR__0432
05944     BD 01 00 FF 
05948     1B 15 06 F6 | 	mov	arg02, ##@LR__5803
0594c     13 13 02 F6 | 	mov	arg01, local01
05950     30 22 B2 FD | 	call	#__system___string_cmp
05954     00 FA 0D F2 | 	cmp	result1, #0 wz
05958     CC 05 90 AD |  if_e	jmp	#LR__0433
0595c     BD 01 00 FF 
05960     22 15 06 F6 | 	mov	arg02, ##@LR__5804
05964     13 13 02 F6 | 	mov	arg01, local01
05968     18 22 B2 FD | 	call	#__system___string_cmp
0596c     00 FA 0D F2 | 	cmp	result1, #0 wz
05970     BC 05 90 AD |  if_e	jmp	#LR__0434
05974     BD 01 00 FF 
05978     26 15 06 F6 | 	mov	arg02, ##@LR__5805
0597c     13 13 02 F6 | 	mov	arg01, local01
05980     00 22 B2 FD | 	call	#__system___string_cmp
05984     00 FA 0D F2 | 	cmp	result1, #0 wz
05988     AC 05 90 AD |  if_e	jmp	#LR__0435
0598c     BD 01 00 FF 
05990     31 15 06 F6 | 	mov	arg02, ##@LR__5806
05994     13 13 02 F6 | 	mov	arg01, local01
05998     E8 21 B2 FD | 	call	#__system___string_cmp
0599c     00 FA 0D F2 | 	cmp	result1, #0 wz
059a0     9C 05 90 AD |  if_e	jmp	#LR__0436
059a4     BD 01 00 FF 
059a8     35 15 06 F6 | 	mov	arg02, ##@LR__5807
059ac     13 13 02 F6 | 	mov	arg01, local01
059b0     D0 21 B2 FD | 	call	#__system___string_cmp
059b4     00 FA 0D F2 | 	cmp	result1, #0 wz
059b8     8C 05 90 AD |  if_e	jmp	#LR__0437
059bc     BD 01 00 FF 
059c0     3C 15 06 F6 | 	mov	arg02, ##@LR__5808
059c4     13 13 02 F6 | 	mov	arg01, local01
059c8     B8 21 B2 FD | 	call	#__system___string_cmp
059cc     00 FA 0D F2 | 	cmp	result1, #0 wz
059d0     7C 05 90 AD |  if_e	jmp	#LR__0438
059d4     BD 01 00 FF 
059d8     40 15 06 F6 | 	mov	arg02, ##@LR__5809
059dc     13 13 02 F6 | 	mov	arg01, local01
059e0     A0 21 B2 FD | 	call	#__system___string_cmp
059e4     00 FA 0D F2 | 	cmp	result1, #0 wz
059e8     6C 05 90 AD |  if_e	jmp	#LR__0439
059ec     BD 01 00 FF 
059f0     48 15 06 F6 | 	mov	arg02, ##@LR__5810
059f4     13 13 02 F6 | 	mov	arg01, local01
059f8     88 21 B2 FD | 	call	#__system___string_cmp
059fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05a00     5C 05 90 AD |  if_e	jmp	#LR__0440
05a04     BD 01 00 FF 
05a08     4C 15 06 F6 | 	mov	arg02, ##@LR__5811
05a0c     13 13 02 F6 | 	mov	arg01, local01
05a10     70 21 B2 FD | 	call	#__system___string_cmp
05a14     00 FA 0D F2 | 	cmp	result1, #0 wz
05a18     4C 05 90 AD |  if_e	jmp	#LR__0441
05a1c     BD 01 00 FF 
05a20     53 15 06 F6 | 	mov	arg02, ##@LR__5812
05a24     13 13 02 F6 | 	mov	arg01, local01
05a28     58 21 B2 FD | 	call	#__system___string_cmp
05a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a30     3C 05 90 AD |  if_e	jmp	#LR__0442
05a34     BD 01 00 FF 
05a38     5A 15 06 F6 | 	mov	arg02, ##@LR__5813
05a3c     13 13 02 F6 | 	mov	arg01, local01
05a40     40 21 B2 FD | 	call	#__system___string_cmp
05a44     00 FA 0D F2 | 	cmp	result1, #0 wz
05a48     2C 05 90 AD |  if_e	jmp	#LR__0443
05a4c     BD 01 00 FF 
05a50     5E 15 06 F6 | 	mov	arg02, ##@LR__5814
05a54     13 13 02 F6 | 	mov	arg01, local01
05a58     28 21 B2 FD | 	call	#__system___string_cmp
05a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a60     1C 05 90 AD |  if_e	jmp	#LR__0444
05a64     BD 01 00 FF 
05a68     64 15 06 F6 | 	mov	arg02, ##@LR__5815
05a6c     13 13 02 F6 | 	mov	arg01, local01
05a70     10 21 B2 FD | 	call	#__system___string_cmp
05a74     00 FA 0D F2 | 	cmp	result1, #0 wz
05a78     0C 05 90 AD |  if_e	jmp	#LR__0445
05a7c     BD 01 00 FF 
05a80     68 15 06 F6 | 	mov	arg02, ##@LR__5816
05a84     13 13 02 F6 | 	mov	arg01, local01
05a88     F8 20 B2 FD | 	call	#__system___string_cmp
05a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a90     FC 04 90 AD |  if_e	jmp	#LR__0446
05a94     BD 01 00 FF 
05a98     6F 15 06 F6 | 	mov	arg02, ##@LR__5817
05a9c     13 13 02 F6 | 	mov	arg01, local01
05aa0     E0 20 B2 FD | 	call	#__system___string_cmp
05aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05aa8     EC 04 90 AD |  if_e	jmp	#LR__0447
05aac     BD 01 00 FF 
05ab0     74 15 06 F6 | 	mov	arg02, ##@LR__5818
05ab4     13 13 02 F6 | 	mov	arg01, local01
05ab8     C8 20 B2 FD | 	call	#__system___string_cmp
05abc     00 FA 0D F2 | 	cmp	result1, #0 wz
05ac0     DC 04 90 AD |  if_e	jmp	#LR__0448
05ac4     BD 01 00 FF 
05ac8     79 15 06 F6 | 	mov	arg02, ##@LR__5819
05acc     13 13 02 F6 | 	mov	arg01, local01
05ad0     B0 20 B2 FD | 	call	#__system___string_cmp
05ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ad8     CC 04 90 AD |  if_e	jmp	#LR__0449
05adc     BD 01 00 FF 
05ae0     80 15 06 F6 | 	mov	arg02, ##@LR__5820
05ae4     13 13 02 F6 | 	mov	arg01, local01
05ae8     98 20 B2 FD | 	call	#__system___string_cmp
05aec     00 FA 0D F2 | 	cmp	result1, #0 wz
05af0     BC 04 90 AD |  if_e	jmp	#LR__0450
05af4     BD 01 00 FF 
05af8     83 15 06 F6 | 	mov	arg02, ##@LR__5821
05afc     13 13 02 F6 | 	mov	arg01, local01
05b00     80 20 B2 FD | 	call	#__system___string_cmp
05b04     00 FA 0D F2 | 	cmp	result1, #0 wz
05b08     AC 04 90 AD |  if_e	jmp	#LR__0451
05b0c     BD 01 00 FF 
05b10     8D 15 06 F6 | 	mov	arg02, ##@LR__5822
05b14     13 13 02 F6 | 	mov	arg01, local01
05b18     68 20 B2 FD | 	call	#__system___string_cmp
05b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b20     9C 04 90 AD |  if_e	jmp	#LR__0452
05b24     BD 01 00 FF 
05b28     91 15 06 F6 | 	mov	arg02, ##@LR__5823
05b2c     13 13 02 F6 | 	mov	arg01, local01
05b30     50 20 B2 FD | 	call	#__system___string_cmp
05b34     00 FA 0D F2 | 	cmp	result1, #0 wz
05b38     8C 04 90 AD |  if_e	jmp	#LR__0453
05b3c     BD 01 00 FF 
05b40     99 15 06 F6 | 	mov	arg02, ##@LR__5824
05b44     13 13 02 F6 | 	mov	arg01, local01
05b48     38 20 B2 FD | 	call	#__system___string_cmp
05b4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b50     7C 04 90 AD |  if_e	jmp	#LR__0454
05b54     BD 01 00 FF 
05b58     9D 15 06 F6 | 	mov	arg02, ##@LR__5825
05b5c     13 13 02 F6 | 	mov	arg01, local01
05b60     20 20 B2 FD | 	call	#__system___string_cmp
05b64     00 FA 0D F2 | 	cmp	result1, #0 wz
05b68     6C 04 90 AD |  if_e	jmp	#LR__0455
05b6c     BD 01 00 FF 
05b70     A3 15 06 F6 | 	mov	arg02, ##@LR__5826
05b74     13 13 02 F6 | 	mov	arg01, local01
05b78     08 20 B2 FD | 	call	#__system___string_cmp
05b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b80     5C 04 90 AD |  if_e	jmp	#LR__0456
05b84     BD 01 00 FF 
05b88     A9 15 06 F6 | 	mov	arg02, ##@LR__5827
05b8c     13 13 02 F6 | 	mov	arg01, local01
05b90     F0 1F B2 FD | 	call	#__system___string_cmp
05b94     00 FA 0D F2 | 	cmp	result1, #0 wz
05b98     4C 04 90 AD |  if_e	jmp	#LR__0457
05b9c     50 04 90 FD | 	jmp	#LR__0458
05ba0                 | LR__0320
05ba0     5C FA 05 F6 | 	mov	result1, #92
05ba4     4C 04 90 FD | 	jmp	#LR__0459
05ba8                 | LR__0321
05ba8     5C FA 05 F6 | 	mov	result1, #92
05bac     44 04 90 FD | 	jmp	#LR__0459
05bb0                 | LR__0322
05bb0     B9 FA 05 F6 | 	mov	result1, #185
05bb4     3C 04 90 FD | 	jmp	#LR__0459
05bb8                 | LR__0323
05bb8     47 FA 05 F6 | 	mov	result1, #71
05bbc     34 04 90 FD | 	jmp	#LR__0459
05bc0                 | LR__0324
05bc0     59 FA 05 F6 | 	mov	result1, #89
05bc4     2C 04 90 FD | 	jmp	#LR__0459
05bc8                 | LR__0325
05bc8     59 FA 05 F6 | 	mov	result1, #89
05bcc     24 04 90 FD | 	jmp	#LR__0459
05bd0                 | LR__0326
05bd0     C3 FA 05 F6 | 	mov	result1, #195
05bd4     1C 04 90 FD | 	jmp	#LR__0459
05bd8                 | LR__0327
05bd8     AE FA 05 F6 | 	mov	result1, #174
05bdc     14 04 90 FD | 	jmp	#LR__0459
05be0                 | LR__0328
05be0     AE FA 05 F6 | 	mov	result1, #174
05be4     0C 04 90 FD | 	jmp	#LR__0459
05be8                 | LR__0329
05be8     B1 FA 05 F6 | 	mov	result1, #177
05bec     04 04 90 FD | 	jmp	#LR__0459
05bf0                 | LR__0330
05bf0     B1 FA 05 F6 | 	mov	result1, #177
05bf4     FC 03 90 FD | 	jmp	#LR__0459
05bf8                 | LR__0331
05bf8     AF FA 05 F6 | 	mov	result1, #175
05bfc     F4 03 90 FD | 	jmp	#LR__0459
05c00                 | LR__0332
05c00     AF FA 05 F6 | 	mov	result1, #175
05c04     EC 03 90 FD | 	jmp	#LR__0459
05c08                 | LR__0333
05c08     B0 FA 05 F6 | 	mov	result1, #176
05c0c     E4 03 90 FD | 	jmp	#LR__0459
05c10                 | LR__0334
05c10     B0 FA 05 F6 | 	mov	result1, #176
05c14     DC 03 90 FD | 	jmp	#LR__0459
05c18                 | LR__0335
05c18     45 FA 05 F6 | 	mov	result1, #69
05c1c     D4 03 90 FD | 	jmp	#LR__0459
05c20                 | LR__0336
05c20     45 FA 05 F6 | 	mov	result1, #69
05c24     CC 03 90 FD | 	jmp	#LR__0459
05c28                 | LR__0337
05c28     69 FA 05 F6 | 	mov	result1, #105
05c2c     C4 03 90 FD | 	jmp	#LR__0459
05c30                 | LR__0338
05c30     B4 FA 05 F6 | 	mov	result1, #180
05c34     BC 03 90 FD | 	jmp	#LR__0459
05c38                 | LR__0339
05c38     40 FA 05 F6 | 	mov	result1, #64
05c3c     B4 03 90 FD | 	jmp	#LR__0459
05c40                 | LR__0340
05c40     CF FA 05 F6 | 	mov	result1, #207
05c44     AC 03 90 FD | 	jmp	#LR__0459
05c48                 | LR__0341
05c48     49 FA 05 F6 | 	mov	result1, #73
05c4c     A4 03 90 FD | 	jmp	#LR__0459
05c50                 | LR__0342
05c50     49 FA 05 F6 | 	mov	result1, #73
05c54     9C 03 90 FD | 	jmp	#LR__0459
05c58                 | LR__0343
05c58     C4 FA 05 F6 | 	mov	result1, #196
05c5c     94 03 90 FD | 	jmp	#LR__0459
05c60                 | LR__0344
05c60     68 FA 05 F6 | 	mov	result1, #104
05c64     8C 03 90 FD | 	jmp	#LR__0459
05c68                 | LR__0345
05c68     B7 FA 05 F6 | 	mov	result1, #183
05c6c     84 03 90 FD | 	jmp	#LR__0459
05c70                 | LR__0346
05c70     D9 FA 05 F6 | 	mov	result1, #217
05c74     7C 03 90 FD | 	jmp	#LR__0459
05c78                 | LR__0347
05c78     73 FA 05 F6 | 	mov	result1, #115
05c7c     74 03 90 FD | 	jmp	#LR__0459
05c80                 | LR__0348
05c80     74 FA 05 F6 | 	mov	result1, #116
05c84     6C 03 90 FD | 	jmp	#LR__0459
05c88                 | LR__0349
05c88     6C FA 05 F6 | 	mov	result1, #108
05c8c     64 03 90 FD | 	jmp	#LR__0459
05c90                 | LR__0350
05c90     6C FA 05 F6 | 	mov	result1, #108
05c94     5C 03 90 FD | 	jmp	#LR__0459
05c98                 | LR__0351
05c98     89 FA 05 F6 | 	mov	result1, #137
05c9c     54 03 90 FD | 	jmp	#LR__0459
05ca0                 | LR__0352
05ca0     C2 FA 05 F6 | 	mov	result1, #194
05ca4     4C 03 90 FD | 	jmp	#LR__0459
05ca8                 | LR__0353
05ca8     72 FA 05 F6 | 	mov	result1, #114
05cac     44 03 90 FD | 	jmp	#LR__0459
05cb0                 | LR__0354
05cb0     5D FA 05 F6 | 	mov	result1, #93
05cb4     3C 03 90 FD | 	jmp	#LR__0459
05cb8                 | LR__0355
05cb8     96 FA 05 F6 | 	mov	result1, #150
05cbc     34 03 90 FD | 	jmp	#LR__0459
05cc0                 | LR__0356
05cc0     43 FA 05 F6 | 	mov	result1, #67
05cc4     2C 03 90 FD | 	jmp	#LR__0459
05cc8                 | LR__0357
05cc8     43 FA 05 F6 | 	mov	result1, #67
05ccc     24 03 90 FD | 	jmp	#LR__0459
05cd0                 | LR__0358
05cd0     43 FA 05 F6 | 	mov	result1, #67
05cd4     1C 03 90 FD | 	jmp	#LR__0459
05cd8                 | LR__0359
05cd8     5A FA 05 F6 | 	mov	result1, #90
05cdc     14 03 90 FD | 	jmp	#LR__0459
05ce0                 | LR__0360
05ce0     AB FA 05 F6 | 	mov	result1, #171
05ce4     0C 03 90 FD | 	jmp	#LR__0459
05ce8                 | LR__0361
05ce8     BD FA 05 F6 | 	mov	result1, #189
05cec     04 03 90 FD | 	jmp	#LR__0459
05cf0                 | LR__0362
05cf0     BD FA 05 F6 | 	mov	result1, #189
05cf4     FC 02 90 FD | 	jmp	#LR__0459
05cf8                 | LR__0363
05cf8     46 FA 05 F6 | 	mov	result1, #70
05cfc     F4 02 90 FD | 	jmp	#LR__0459
05d00                 | LR__0364
05d00     46 FA 05 F6 | 	mov	result1, #70
05d04     EC 02 90 FD | 	jmp	#LR__0459
05d08                 | LR__0365
05d08     71 FA 05 F6 | 	mov	result1, #113
05d0c     E4 02 90 FD | 	jmp	#LR__0459
05d10                 | LR__0366
05d10     71 FA 05 F6 | 	mov	result1, #113
05d14     DC 02 90 FD | 	jmp	#LR__0459
05d18                 | LR__0367
05d18     60 FA 05 F6 | 	mov	result1, #96
05d1c     D4 02 90 FD | 	jmp	#LR__0459
05d20                 | LR__0368
05d20     4A FA 05 F6 | 	mov	result1, #74
05d24     CC 02 90 FD | 	jmp	#LR__0459
05d28                 | LR__0369
05d28     4A FA 05 F6 | 	mov	result1, #74
05d2c     C4 02 90 FD | 	jmp	#LR__0459
05d30                 | LR__0370
05d30     48 FA 05 F6 | 	mov	result1, #72
05d34     BC 02 90 FD | 	jmp	#LR__0459
05d38                 | LR__0371
05d38     48 FA 05 F6 | 	mov	result1, #72
05d3c     B4 02 90 FD | 	jmp	#LR__0459
05d40                 | LR__0372
05d40     BB FA 05 F6 | 	mov	result1, #187
05d44     AC 02 90 FD | 	jmp	#LR__0459
05d48                 | LR__0373
05d48     A9 FA 05 F6 | 	mov	result1, #169
05d4c     A4 02 90 FD | 	jmp	#LR__0459
05d50                 | LR__0374
05d50     4E FA 05 F6 | 	mov	result1, #78
05d54     9C 02 90 FD | 	jmp	#LR__0459
05d58                 | LR__0375
05d58     4E FA 05 F6 | 	mov	result1, #78
05d5c     94 02 90 FD | 	jmp	#LR__0459
05d60                 | LR__0376
05d60     58 FA 05 F6 | 	mov	result1, #88
05d64     8C 02 90 FD | 	jmp	#LR__0459
05d68                 | LR__0377
05d68     5F FA 05 F6 | 	mov	result1, #95
05d6c     84 02 90 FD | 	jmp	#LR__0459
05d70                 | LR__0378
05d70     5F FA 05 F6 | 	mov	result1, #95
05d74     7C 02 90 FD | 	jmp	#LR__0459
05d78                 | LR__0379
05d78     B5 FA 05 F6 | 	mov	result1, #181
05d7c     74 02 90 FD | 	jmp	#LR__0459
05d80                 | LR__0380
05d80     4C FA 05 F6 | 	mov	result1, #76
05d84     6C 02 90 FD | 	jmp	#LR__0459
05d88                 | LR__0381
05d88     4C FA 05 F6 | 	mov	result1, #76
05d8c     64 02 90 FD | 	jmp	#LR__0459
05d90                 | LR__0382
05d90     52 FA 05 F6 | 	mov	result1, #82
05d94     5C 02 90 FD | 	jmp	#LR__0459
05d98                 | LR__0383
05d98     52 FA 05 F6 | 	mov	result1, #82
05d9c     54 02 90 FD | 	jmp	#LR__0459
05da0                 | LR__0384
05da0     97 FA 05 F6 | 	mov	result1, #151
05da4     4C 02 90 FD | 	jmp	#LR__0459
05da8                 | LR__0385
05da8     C6 FA 05 F6 | 	mov	result1, #198
05dac     44 02 90 FD | 	jmp	#LR__0459
05db0                 | LR__0386
05db0     61 FA 05 F6 | 	mov	result1, #97
05db4     3C 02 90 FD | 	jmp	#LR__0459
05db8                 | LR__0387
05db8     61 FA 05 F6 | 	mov	result1, #97
05dbc     34 02 90 FD | 	jmp	#LR__0459
05dc0                 | LR__0388
05dc0     63 FA 05 F6 | 	mov	result1, #99
05dc4     2C 02 90 FD | 	jmp	#LR__0459
05dc8                 | LR__0389
05dc8     41 FA 05 F6 | 	mov	result1, #65
05dcc     24 02 90 FD | 	jmp	#LR__0459
05dd0                 | LR__0390
05dd0     4B FA 05 F6 | 	mov	result1, #75
05dd4     1C 02 90 FD | 	jmp	#LR__0459
05dd8                 | LR__0391
05dd8     4B FA 05 F6 | 	mov	result1, #75
05ddc     14 02 90 FD | 	jmp	#LR__0459
05de0                 | LR__0392
05de0     C1 FA 05 F6 | 	mov	result1, #193
05de4     0C 02 90 FD | 	jmp	#LR__0459
05de8                 | LR__0393
05de8     B3 FA 05 F6 | 	mov	result1, #179
05dec     04 02 90 FD | 	jmp	#LR__0459
05df0                 | LR__0394
05df0     5E FA 05 F6 | 	mov	result1, #94
05df4     FC 01 90 FD | 	jmp	#LR__0459
05df8                 | LR__0395
05df8     5E FA 05 F6 | 	mov	result1, #94
05dfc     F4 01 90 FD | 	jmp	#LR__0459
05e00                 | LR__0396
05e00     7C FA 05 F6 | 	mov	result1, #124
05e04     EC 01 90 FD | 	jmp	#LR__0459
05e08                 | LR__0397
05e08     7E FA 05 F6 | 	mov	result1, #126
05e0c     E4 01 90 FD | 	jmp	#LR__0459
05e10                 | LR__0398
05e10     7D FA 05 F6 | 	mov	result1, #125
05e14     DC 01 90 FD | 	jmp	#LR__0459
05e18                 | LR__0399
05e18     7F FA 05 F6 | 	mov	result1, #127
05e1c     D4 01 90 FD | 	jmp	#LR__0459
05e20                 | LR__0400
05e20     80 FA 05 F6 | 	mov	result1, #128
05e24     CC 01 90 FD | 	jmp	#LR__0459
05e28                 | LR__0401
05e28     55 FA 05 F6 | 	mov	result1, #85
05e2c     C4 01 90 FD | 	jmp	#LR__0459
05e30                 | LR__0402
05e30     75 FA 05 F6 | 	mov	result1, #117
05e34     BC 01 90 FD | 	jmp	#LR__0459
05e38                 | LR__0403
05e38     75 FA 05 F6 | 	mov	result1, #117
05e3c     B4 01 90 FD | 	jmp	#LR__0459
05e40                 | LR__0404
05e40     42 FA 05 F6 | 	mov	result1, #66
05e44     AC 01 90 FD | 	jmp	#LR__0459
05e48                 | LR__0405
05e48     42 FA 05 F6 | 	mov	result1, #66
05e4c     A4 01 90 FD | 	jmp	#LR__0459
05e50                 | LR__0406
05e50     95 FA 05 F6 | 	mov	result1, #149
05e54     9C 01 90 FD | 	jmp	#LR__0459
05e58                 | LR__0407
05e58     AC FA 05 F6 | 	mov	result1, #172
05e5c     94 01 90 FD | 	jmp	#LR__0459
05e60                 | LR__0408
05e60     81 FA 05 F6 | 	mov	result1, #129
05e64     8C 01 90 FD | 	jmp	#LR__0459
05e68                 | LR__0409
05e68     81 FA 05 F6 | 	mov	result1, #129
05e6c     84 01 90 FD | 	jmp	#LR__0459
05e70                 | LR__0410
05e70     44 FA 05 F6 | 	mov	result1, #68
05e74     7C 01 90 FD | 	jmp	#LR__0459
05e78                 | LR__0411
05e78     44 FA 05 F6 | 	mov	result1, #68
05e7c     74 01 90 FD | 	jmp	#LR__0459
05e80                 | LR__0412
05e80     BC FA 05 F6 | 	mov	result1, #188
05e84     6C 01 90 FD | 	jmp	#LR__0459
05e88                 | LR__0413
05e88     88 FA 05 F6 | 	mov	result1, #136
05e8c     64 01 90 FD | 	jmp	#LR__0459
05e90                 | LR__0414
05e90     B6 FA 05 F6 | 	mov	result1, #182
05e94     5C 01 90 FD | 	jmp	#LR__0459
05e98                 | LR__0415
05e98     92 FA 05 F6 | 	mov	result1, #146
05e9c     54 01 90 FD | 	jmp	#LR__0459
05ea0                 | LR__0416
05ea0     BE FA 05 F6 | 	mov	result1, #190
05ea4     4C 01 90 FD | 	jmp	#LR__0459
05ea8                 | LR__0417
05ea8     BE FA 05 F6 | 	mov	result1, #190
05eac     44 01 90 FD | 	jmp	#LR__0459
05eb0                 | LR__0418
05eb0     C7 FA 05 F6 | 	mov	result1, #199
05eb4     3C 01 90 FD | 	jmp	#LR__0459
05eb8                 | LR__0419
05eb8     D4 FA 05 F6 | 	mov	result1, #212
05ebc     34 01 90 FD | 	jmp	#LR__0459
05ec0                 | LR__0420
05ec0     D4 FA 05 F6 | 	mov	result1, #212
05ec4     2C 01 90 FD | 	jmp	#LR__0459
05ec8                 | LR__0421
05ec8     AA FA 05 F6 | 	mov	result1, #170
05ecc     24 01 90 FD | 	jmp	#LR__0459
05ed0                 | LR__0422
05ed0     4D FA 05 F6 | 	mov	result1, #77
05ed4     1C 01 90 FD | 	jmp	#LR__0459
05ed8                 | LR__0423
05ed8     51 FA 05 F6 | 	mov	result1, #81
05edc     14 01 90 FD | 	jmp	#LR__0459
05ee0                 | LR__0424
05ee0     51 FA 05 F6 | 	mov	result1, #81
05ee4     0C 01 90 FD | 	jmp	#LR__0459
05ee8                 | LR__0425
05ee8     D2 FA 05 F6 | 	mov	result1, #210
05eec     04 01 90 FD | 	jmp	#LR__0459
05ef0                 | LR__0426
05ef0     D2 FA 05 F6 | 	mov	result1, #210
05ef4     FC 00 90 FD | 	jmp	#LR__0459
05ef8                 | LR__0427
05ef8     8E FA 05 F6 | 	mov	result1, #142
05efc     F4 00 90 FD | 	jmp	#LR__0459
05f00                 | LR__0428
05f00     8E FA 05 F6 | 	mov	result1, #142
05f04     EC 00 90 FD | 	jmp	#LR__0459
05f08                 | LR__0429
05f08     90 FA 05 F6 | 	mov	result1, #144
05f0c     E4 00 90 FD | 	jmp	#LR__0459
05f10                 | LR__0430
05f10     90 FA 05 F6 | 	mov	result1, #144
05f14     DC 00 90 FD | 	jmp	#LR__0459
05f18                 | LR__0431
05f18     8D FA 05 F6 | 	mov	result1, #141
05f1c     D4 00 90 FD | 	jmp	#LR__0459
05f20                 | LR__0432
05f20     8D FA 05 F6 | 	mov	result1, #141
05f24     CC 00 90 FD | 	jmp	#LR__0459
05f28                 | LR__0433
05f28     8C FA 05 F6 | 	mov	result1, #140
05f2c     C4 00 90 FD | 	jmp	#LR__0459
05f30                 | LR__0434
05f30     8C FA 05 F6 | 	mov	result1, #140
05f34     BC 00 90 FD | 	jmp	#LR__0459
05f38                 | LR__0435
05f38     91 FA 05 F6 | 	mov	result1, #145
05f3c     B4 00 90 FD | 	jmp	#LR__0459
05f40                 | LR__0436
05f40     91 FA 05 F6 | 	mov	result1, #145
05f44     AC 00 90 FD | 	jmp	#LR__0459
05f48                 | LR__0437
05f48     8B FA 05 F6 | 	mov	result1, #139
05f4c     A4 00 90 FD | 	jmp	#LR__0459
05f50                 | LR__0438
05f50     8B FA 05 F6 | 	mov	result1, #139
05f54     9C 00 90 FD | 	jmp	#LR__0459
05f58                 | LR__0439
05f58     8F FA 05 F6 | 	mov	result1, #143
05f5c     94 00 90 FD | 	jmp	#LR__0459
05f60                 | LR__0440
05f60     8F FA 05 F6 | 	mov	result1, #143
05f64     8C 00 90 FD | 	jmp	#LR__0459
05f68                 | LR__0441
05f68     8F FA 05 F6 | 	mov	result1, #143
05f6c     84 00 90 FD | 	jmp	#LR__0459
05f70                 | LR__0442
05f70     B2 FA 05 F6 | 	mov	result1, #178
05f74     7C 00 90 FD | 	jmp	#LR__0459
05f78                 | LR__0443
05f78     B2 FA 05 F6 | 	mov	result1, #178
05f7c     74 00 90 FD | 	jmp	#LR__0459
05f80                 | LR__0444
05f80     75 FA 05 F6 | 	mov	result1, #117
05f84     6C 00 90 FD | 	jmp	#LR__0459
05f88                 | LR__0445
05f88     75 FA 05 F6 | 	mov	result1, #117
05f8c     64 00 90 FD | 	jmp	#LR__0459
05f90                 | LR__0446
05f90     6D FA 05 F6 | 	mov	result1, #109
05f94     5C 00 90 FD | 	jmp	#LR__0459
05f98                 | LR__0447
05f98     6D FA 05 F6 | 	mov	result1, #109
05f9c     54 00 90 FD | 	jmp	#LR__0459
05fa0                 | LR__0448
05fa0     5B FA 05 F6 | 	mov	result1, #91
05fa4     4C 00 90 FD | 	jmp	#LR__0459
05fa8                 | LR__0449
05fa8     56 FA 05 F6 | 	mov	result1, #86
05fac     44 00 90 FD | 	jmp	#LR__0459
05fb0                 | LR__0450
05fb0     56 FA 05 F6 | 	mov	result1, #86
05fb4     3C 00 90 FD | 	jmp	#LR__0459
05fb8                 | LR__0451
05fb8     70 FA 05 F6 | 	mov	result1, #112
05fbc     34 00 90 FD | 	jmp	#LR__0459
05fc0                 | LR__0452
05fc0     70 FA 05 F6 | 	mov	result1, #112
05fc4     2C 00 90 FD | 	jmp	#LR__0459
05fc8                 | LR__0453
05fc8     57 FA 05 F6 | 	mov	result1, #87
05fcc     24 00 90 FD | 	jmp	#LR__0459
05fd0                 | LR__0454
05fd0     57 FA 05 F6 | 	mov	result1, #87
05fd4     1C 00 90 FD | 	jmp	#LR__0459
05fd8                 | LR__0455
05fd8     79 FA 05 F6 | 	mov	result1, #121
05fdc     14 00 90 FD | 	jmp	#LR__0459
05fe0                 | LR__0456
05fe0     77 FA 05 F6 | 	mov	result1, #119
05fe4     0C 00 90 FD | 	jmp	#LR__0459
05fe8                 | LR__0457
05fe8     78 FA 05 F6 | 	mov	result1, #120
05fec     04 00 90 FD | 	jmp	#LR__0459
05ff0                 | LR__0458
05ff0     00 FA 05 F6 | 	mov	result1, #0
05ff4                 | LR__0459
05ff4     A7 F0 03 F6 | 	mov	ptra, fp
05ff8     B2 00 A0 FD | 	call	#popregs_
05ffc                 | _iscommand_ret
05ffc     2D 00 64 FD | 	ret
06000                 | 
06000                 | ' 
06000                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
06000                 | ' 
06000                 | ' function isfunction(s as string) as ubyte
06000                 | _isfunction
06000     01 4A 05 F6 | 	mov	COUNT_, #1
06004     A8 00 A0 FD | 	call	#pushregs_
06008                 | ' 
06008                 | ' select case s
06008     09 27 02 F6 | 	mov	local01, arg01
0600c     BD 01 00 FF 
06010     AF 15 06 F6 | 	mov	arg02, ##@LR__5828
06014     13 13 02 F6 | 	mov	arg01, local01
06018     68 1B B2 FD | 	call	#__system___string_cmp
0601c     00 FA 0D F2 | 	cmp	result1, #0 wz
06020     D4 05 90 AD |  if_e	jmp	#LR__0460
06024     BD 01 00 FF 
06028     B3 15 06 F6 | 	mov	arg02, ##@LR__5829
0602c     13 13 02 F6 | 	mov	arg01, local01
06030     50 1B B2 FD | 	call	#__system___string_cmp
06034     00 FA 0D F2 | 	cmp	result1, #0 wz
06038     C4 05 90 AD |  if_e	jmp	#LR__0461
0603c     BD 01 00 FF 
06040     B8 15 06 F6 | 	mov	arg02, ##@LR__5830
06044     13 13 02 F6 | 	mov	arg01, local01
06048     38 1B B2 FD | 	call	#__system___string_cmp
0604c     00 FA 0D F2 | 	cmp	result1, #0 wz
06050     B4 05 90 AD |  if_e	jmp	#LR__0462
06054     BD 01 00 FF 
06058     BC 15 06 F6 | 	mov	arg02, ##@LR__5831
0605c     13 13 02 F6 | 	mov	arg01, local01
06060     20 1B B2 FD | 	call	#__system___string_cmp
06064     00 FA 0D F2 | 	cmp	result1, #0 wz
06068     A4 05 90 AD |  if_e	jmp	#LR__0463
0606c     BD 01 00 FF 
06070     C1 15 06 F6 | 	mov	arg02, ##@LR__5832
06074     13 13 02 F6 | 	mov	arg01, local01
06078     08 1B B2 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     94 05 90 AD |  if_e	jmp	#LR__0464
06084     BD 01 00 FF 
06088     C5 15 06 F6 | 	mov	arg02, ##@LR__5833
0608c     13 13 02 F6 | 	mov	arg01, local01
06090     F0 1A B2 FD | 	call	#__system___string_cmp
06094     00 FA 0D F2 | 	cmp	result1, #0 wz
06098     84 05 90 AD |  if_e	jmp	#LR__0465
0609c     BD 01 00 FF 
060a0     CA 15 06 F6 | 	mov	arg02, ##@LR__5834
060a4     13 13 02 F6 | 	mov	arg01, local01
060a8     D8 1A B2 FD | 	call	#__system___string_cmp
060ac     00 FA 0D F2 | 	cmp	result1, #0 wz
060b0     74 05 90 AD |  if_e	jmp	#LR__0466
060b4     BD 01 00 FF 
060b8     CE 15 06 F6 | 	mov	arg02, ##@LR__5835
060bc     13 13 02 F6 | 	mov	arg01, local01
060c0     C0 1A B2 FD | 	call	#__system___string_cmp
060c4     00 FA 0D F2 | 	cmp	result1, #0 wz
060c8     64 05 90 AD |  if_e	jmp	#LR__0467
060cc     BD 01 00 FF 
060d0     D3 15 06 F6 | 	mov	arg02, ##@LR__5836
060d4     13 13 02 F6 | 	mov	arg01, local01
060d8     A8 1A B2 FD | 	call	#__system___string_cmp
060dc     00 FA 0D F2 | 	cmp	result1, #0 wz
060e0     54 05 90 AD |  if_e	jmp	#LR__0468
060e4     BD 01 00 FF 
060e8     D8 15 06 F6 | 	mov	arg02, ##@LR__5837
060ec     13 13 02 F6 | 	mov	arg01, local01
060f0     90 1A B2 FD | 	call	#__system___string_cmp
060f4     00 FA 0D F2 | 	cmp	result1, #0 wz
060f8     44 05 90 AD |  if_e	jmp	#LR__0469
060fc     BD 01 00 FF 
06100     E0 15 06 F6 | 	mov	arg02, ##@LR__5838
06104     13 13 02 F6 | 	mov	arg01, local01
06108     78 1A B2 FD | 	call	#__system___string_cmp
0610c     00 FA 0D F2 | 	cmp	result1, #0 wz
06110     34 05 90 AD |  if_e	jmp	#LR__0470
06114     BD 01 00 FF 
06118     E4 15 06 F6 | 	mov	arg02, ##@LR__5839
0611c     13 13 02 F6 | 	mov	arg01, local01
06120     60 1A B2 FD | 	call	#__system___string_cmp
06124     00 FA 0D F2 | 	cmp	result1, #0 wz
06128     24 05 90 AD |  if_e	jmp	#LR__0471
0612c     BD 01 00 FF 
06130     EA 15 06 F6 | 	mov	arg02, ##@LR__5840
06134     13 13 02 F6 | 	mov	arg01, local01
06138     48 1A B2 FD | 	call	#__system___string_cmp
0613c     00 FA 0D F2 | 	cmp	result1, #0 wz
06140     14 05 90 AD |  if_e	jmp	#LR__0472
06144     BD 01 00 FF 
06148     F4 15 06 F6 | 	mov	arg02, ##@LR__5841
0614c     13 13 02 F6 | 	mov	arg01, local01
06150     30 1A B2 FD | 	call	#__system___string_cmp
06154     00 FA 0D F2 | 	cmp	result1, #0 wz
06158     04 05 90 AD |  if_e	jmp	#LR__0473
0615c     BD 01 00 FF 
06160     FD 15 06 F6 | 	mov	arg02, ##@LR__5842
06164     13 13 02 F6 | 	mov	arg01, local01
06168     18 1A B2 FD | 	call	#__system___string_cmp
0616c     00 FA 0D F2 | 	cmp	result1, #0 wz
06170     F4 04 90 AD |  if_e	jmp	#LR__0474
06174     BE 01 00 FF 
06178     06 14 06 F6 | 	mov	arg02, ##@LR__5843
0617c     13 13 02 F6 | 	mov	arg01, local01
06180     00 1A B2 FD | 	call	#__system___string_cmp
06184     00 FA 0D F2 | 	cmp	result1, #0 wz
06188     E4 04 90 AD |  if_e	jmp	#LR__0475
0618c     BE 01 00 FF 
06190     0A 14 06 F6 | 	mov	arg02, ##@LR__5844
06194     13 13 02 F6 | 	mov	arg01, local01
06198     E8 19 B2 FD | 	call	#__system___string_cmp
0619c     00 FA 0D F2 | 	cmp	result1, #0 wz
061a0     D4 04 90 AD |  if_e	jmp	#LR__0476
061a4     BE 01 00 FF 
061a8     0E 14 06 F6 | 	mov	arg02, ##@LR__5845
061ac     13 13 02 F6 | 	mov	arg01, local01
061b0     D0 19 B2 FD | 	call	#__system___string_cmp
061b4     00 FA 0D F2 | 	cmp	result1, #0 wz
061b8     C4 04 90 AD |  if_e	jmp	#LR__0477
061bc     BE 01 00 FF 
061c0     12 14 06 F6 | 	mov	arg02, ##@LR__5846
061c4     13 13 02 F6 | 	mov	arg01, local01
061c8     B8 19 B2 FD | 	call	#__system___string_cmp
061cc     00 FA 0D F2 | 	cmp	result1, #0 wz
061d0     B4 04 90 AD |  if_e	jmp	#LR__0478
061d4     BE 01 00 FF 
061d8     1B 14 06 F6 | 	mov	arg02, ##@LR__5847
061dc     13 13 02 F6 | 	mov	arg01, local01
061e0     A0 19 B2 FD | 	call	#__system___string_cmp
061e4     00 FA 0D F2 | 	cmp	result1, #0 wz
061e8     A4 04 90 AD |  if_e	jmp	#LR__0479
061ec     BE 01 00 FF 
061f0     24 14 06 F6 | 	mov	arg02, ##@LR__5848
061f4     13 13 02 F6 | 	mov	arg01, local01
061f8     88 19 B2 FD | 	call	#__system___string_cmp
061fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06200     94 04 90 AD |  if_e	jmp	#LR__0480
06204     BE 01 00 FF 
06208     28 14 06 F6 | 	mov	arg02, ##@LR__5849
0620c     13 13 02 F6 | 	mov	arg01, local01
06210     70 19 B2 FD | 	call	#__system___string_cmp
06214     00 FA 0D F2 | 	cmp	result1, #0 wz
06218     84 04 90 AD |  if_e	jmp	#LR__0481
0621c     BE 01 00 FF 
06220     36 14 06 F6 | 	mov	arg02, ##@LR__5850
06224     13 13 02 F6 | 	mov	arg01, local01
06228     58 19 B2 FD | 	call	#__system___string_cmp
0622c     00 FA 0D F2 | 	cmp	result1, #0 wz
06230     74 04 90 AD |  if_e	jmp	#LR__0482
06234     BE 01 00 FF 
06238     43 14 06 F6 | 	mov	arg02, ##@LR__5851
0623c     13 13 02 F6 | 	mov	arg01, local01
06240     40 19 B2 FD | 	call	#__system___string_cmp
06244     00 FA 0D F2 | 	cmp	result1, #0 wz
06248     64 04 90 AD |  if_e	jmp	#LR__0483
0624c     BE 01 00 FF 
06250     4B 14 06 F6 | 	mov	arg02, ##@LR__5852
06254     13 13 02 F6 | 	mov	arg01, local01
06258     28 19 B2 FD | 	call	#__system___string_cmp
0625c     00 FA 0D F2 | 	cmp	result1, #0 wz
06260     54 04 90 AD |  if_e	jmp	#LR__0484
06264     BE 01 00 FF 
06268     4F 14 06 F6 | 	mov	arg02, ##@LR__5853
0626c     13 13 02 F6 | 	mov	arg01, local01
06270     10 19 B2 FD | 	call	#__system___string_cmp
06274     00 FA 0D F2 | 	cmp	result1, #0 wz
06278     44 04 90 AD |  if_e	jmp	#LR__0485
0627c     BE 01 00 FF 
06280     54 14 06 F6 | 	mov	arg02, ##@LR__5854
06284     13 13 02 F6 | 	mov	arg01, local01
06288     F8 18 B2 FD | 	call	#__system___string_cmp
0628c     00 FA 0D F2 | 	cmp	result1, #0 wz
06290     34 04 90 AD |  if_e	jmp	#LR__0486
06294     BE 01 00 FF 
06298     5B 14 06 F6 | 	mov	arg02, ##@LR__5855
0629c     13 13 02 F6 | 	mov	arg01, local01
062a0     E0 18 B2 FD | 	call	#__system___string_cmp
062a4     00 FA 0D F2 | 	cmp	result1, #0 wz
062a8     24 04 90 AD |  if_e	jmp	#LR__0487
062ac     BE 01 00 FF 
062b0     5F 14 06 F6 | 	mov	arg02, ##@LR__5856
062b4     13 13 02 F6 | 	mov	arg01, local01
062b8     C8 18 B2 FD | 	call	#__system___string_cmp
062bc     00 FA 0D F2 | 	cmp	result1, #0 wz
062c0     14 04 90 AD |  if_e	jmp	#LR__0488
062c4     BE 01 00 FF 
062c8     65 14 06 F6 | 	mov	arg02, ##@LR__5857
062cc     13 13 02 F6 | 	mov	arg01, local01
062d0     B0 18 B2 FD | 	call	#__system___string_cmp
062d4     00 FA 0D F2 | 	cmp	result1, #0 wz
062d8     04 04 90 AD |  if_e	jmp	#LR__0489
062dc     BE 01 00 FF 
062e0     69 14 06 F6 | 	mov	arg02, ##@LR__5858
062e4     13 13 02 F6 | 	mov	arg01, local01
062e8     98 18 B2 FD | 	call	#__system___string_cmp
062ec     00 FA 0D F2 | 	cmp	result1, #0 wz
062f0     F4 03 90 AD |  if_e	jmp	#LR__0490
062f4     BE 01 00 FF 
062f8     6D 14 06 F6 | 	mov	arg02, ##@LR__5859
062fc     13 13 02 F6 | 	mov	arg01, local01
06300     80 18 B2 FD | 	call	#__system___string_cmp
06304     00 FA 0D F2 | 	cmp	result1, #0 wz
06308     E4 03 90 AD |  if_e	jmp	#LR__0491
0630c     BE 01 00 FF 
06310     73 14 06 F6 | 	mov	arg02, ##@LR__5860
06314     13 13 02 F6 | 	mov	arg01, local01
06318     68 18 B2 FD | 	call	#__system___string_cmp
0631c     00 FA 0D F2 | 	cmp	result1, #0 wz
06320     D4 03 90 AD |  if_e	jmp	#LR__0492
06324     BE 01 00 FF 
06328     7A 14 06 F6 | 	mov	arg02, ##@LR__5861
0632c     13 13 02 F6 | 	mov	arg01, local01
06330     50 18 B2 FD | 	call	#__system___string_cmp
06334     00 FA 0D F2 | 	cmp	result1, #0 wz
06338     C4 03 90 AD |  if_e	jmp	#LR__0493
0633c     BE 01 00 FF 
06340     80 14 06 F6 | 	mov	arg02, ##@LR__5862
06344     13 13 02 F6 | 	mov	arg01, local01
06348     38 18 B2 FD | 	call	#__system___string_cmp
0634c     00 FA 0D F2 | 	cmp	result1, #0 wz
06350     B4 03 90 AD |  if_e	jmp	#LR__0494
06354     BE 01 00 FF 
06358     85 14 06 F6 | 	mov	arg02, ##@LR__5863
0635c     13 13 02 F6 | 	mov	arg01, local01
06360     20 18 B2 FD | 	call	#__system___string_cmp
06364     00 FA 0D F2 | 	cmp	result1, #0 wz
06368     A4 03 90 AD |  if_e	jmp	#LR__0495
0636c     BE 01 00 FF 
06370     8C 14 06 F6 | 	mov	arg02, ##@LR__5864
06374     13 13 02 F6 | 	mov	arg01, local01
06378     08 18 B2 FD | 	call	#__system___string_cmp
0637c     00 FA 0D F2 | 	cmp	result1, #0 wz
06380     94 03 90 AD |  if_e	jmp	#LR__0496
06384     BE 01 00 FF 
06388     93 14 06 F6 | 	mov	arg02, ##@LR__5865
0638c     13 13 02 F6 | 	mov	arg01, local01
06390     F0 17 B2 FD | 	call	#__system___string_cmp
06394     00 FA 0D F2 | 	cmp	result1, #0 wz
06398     84 03 90 AD |  if_e	jmp	#LR__0497
0639c     BE 01 00 FF 
063a0     9A 14 06 F6 | 	mov	arg02, ##@LR__5866
063a4     13 13 02 F6 | 	mov	arg01, local01
063a8     D8 17 B2 FD | 	call	#__system___string_cmp
063ac     00 FA 0D F2 | 	cmp	result1, #0 wz
063b0     74 03 90 AD |  if_e	jmp	#LR__0498
063b4     BE 01 00 FF 
063b8     A1 14 06 F6 | 	mov	arg02, ##@LR__5867
063bc     13 13 02 F6 | 	mov	arg01, local01
063c0     C0 17 B2 FD | 	call	#__system___string_cmp
063c4     00 FA 0D F2 | 	cmp	result1, #0 wz
063c8     64 03 90 AD |  if_e	jmp	#LR__0499
063cc     BE 01 00 FF 
063d0     A6 14 06 F6 | 	mov	arg02, ##@LR__5868
063d4     13 13 02 F6 | 	mov	arg01, local01
063d8     A8 17 B2 FD | 	call	#__system___string_cmp
063dc     00 FA 0D F2 | 	cmp	result1, #0 wz
063e0     54 03 90 AD |  if_e	jmp	#LR__0500
063e4     BE 01 00 FF 
063e8     AB 14 06 F6 | 	mov	arg02, ##@LR__5869
063ec     13 13 02 F6 | 	mov	arg01, local01
063f0     90 17 B2 FD | 	call	#__system___string_cmp
063f4     00 FA 0D F2 | 	cmp	result1, #0 wz
063f8     44 03 90 AD |  if_e	jmp	#LR__0501
063fc     BE 01 00 FF 
06400     B0 14 06 F6 | 	mov	arg02, ##@LR__5870
06404     13 13 02 F6 | 	mov	arg01, local01
06408     78 17 B2 FD | 	call	#__system___string_cmp
0640c     00 FA 0D F2 | 	cmp	result1, #0 wz
06410     34 03 90 AD |  if_e	jmp	#LR__0502
06414     BE 01 00 FF 
06418     B5 14 06 F6 | 	mov	arg02, ##@LR__5871
0641c     13 13 02 F6 | 	mov	arg01, local01
06420     60 17 B2 FD | 	call	#__system___string_cmp
06424     00 FA 0D F2 | 	cmp	result1, #0 wz
06428     24 03 90 AD |  if_e	jmp	#LR__0503
0642c     BE 01 00 FF 
06430     BA 14 06 F6 | 	mov	arg02, ##@LR__5872
06434     13 13 02 F6 | 	mov	arg01, local01
06438     48 17 B2 FD | 	call	#__system___string_cmp
0643c     00 FA 0D F2 | 	cmp	result1, #0 wz
06440     14 03 90 AD |  if_e	jmp	#LR__0504
06444     BE 01 00 FF 
06448     C0 14 06 F6 | 	mov	arg02, ##@LR__5873
0644c     13 13 02 F6 | 	mov	arg01, local01
06450     30 17 B2 FD | 	call	#__system___string_cmp
06454     00 FA 0D F2 | 	cmp	result1, #0 wz
06458     04 03 90 AD |  if_e	jmp	#LR__0505
0645c     BE 01 00 FF 
06460     C6 14 06 F6 | 	mov	arg02, ##@LR__5874
06464     13 13 02 F6 | 	mov	arg01, local01
06468     18 17 B2 FD | 	call	#__system___string_cmp
0646c     00 FA 0D F2 | 	cmp	result1, #0 wz
06470     F4 02 90 AD |  if_e	jmp	#LR__0506
06474     BE 01 00 FF 
06478     CC 14 06 F6 | 	mov	arg02, ##@LR__5875
0647c     13 13 02 F6 | 	mov	arg01, local01
06480     00 17 B2 FD | 	call	#__system___string_cmp
06484     00 FA 0D F2 | 	cmp	result1, #0 wz
06488     E4 02 90 AD |  if_e	jmp	#LR__0507
0648c     BE 01 00 FF 
06490     D1 14 06 F6 | 	mov	arg02, ##@LR__5876
06494     13 13 02 F6 | 	mov	arg01, local01
06498     E8 16 B2 FD | 	call	#__system___string_cmp
0649c     00 FA 0D F2 | 	cmp	result1, #0 wz
064a0     D4 02 90 AD |  if_e	jmp	#LR__0508
064a4     BE 01 00 FF 
064a8     D6 14 06 F6 | 	mov	arg02, ##@LR__5877
064ac     13 13 02 F6 | 	mov	arg01, local01
064b0     D0 16 B2 FD | 	call	#__system___string_cmp
064b4     00 FA 0D F2 | 	cmp	result1, #0 wz
064b8     C4 02 90 AD |  if_e	jmp	#LR__0509
064bc     BE 01 00 FF 
064c0     DE 14 06 F6 | 	mov	arg02, ##@LR__5878
064c4     13 13 02 F6 | 	mov	arg01, local01
064c8     B8 16 B2 FD | 	call	#__system___string_cmp
064cc     00 FA 0D F2 | 	cmp	result1, #0 wz
064d0     B4 02 90 AD |  if_e	jmp	#LR__0510
064d4     BE 01 00 FF 
064d8     E4 14 06 F6 | 	mov	arg02, ##@LR__5879
064dc     13 13 02 F6 | 	mov	arg01, local01
064e0     A0 16 B2 FD | 	call	#__system___string_cmp
064e4     00 FA 0D F2 | 	cmp	result1, #0 wz
064e8     A4 02 90 AD |  if_e	jmp	#LR__0511
064ec     BE 01 00 FF 
064f0     EB 14 06 F6 | 	mov	arg02, ##@LR__5880
064f4     13 13 02 F6 | 	mov	arg01, local01
064f8     88 16 B2 FD | 	call	#__system___string_cmp
064fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06500     94 02 90 AD |  if_e	jmp	#LR__0512
06504     BE 01 00 FF 
06508     F1 14 06 F6 | 	mov	arg02, ##@LR__5881
0650c     13 13 02 F6 | 	mov	arg01, local01
06510     70 16 B2 FD | 	call	#__system___string_cmp
06514     00 FA 0D F2 | 	cmp	result1, #0 wz
06518     84 02 90 AD |  if_e	jmp	#LR__0513
0651c     BE 01 00 FF 
06520     F7 14 06 F6 | 	mov	arg02, ##@LR__5882
06524     13 13 02 F6 | 	mov	arg01, local01
06528     58 16 B2 FD | 	call	#__system___string_cmp
0652c     00 FA 0D F2 | 	cmp	result1, #0 wz
06530     74 02 90 AD |  if_e	jmp	#LR__0514
06534     BE 01 00 FF 
06538     FB 14 06 F6 | 	mov	arg02, ##@LR__5883
0653c     13 13 02 F6 | 	mov	arg01, local01
06540     40 16 B2 FD | 	call	#__system___string_cmp
06544     00 FA 0D F2 | 	cmp	result1, #0 wz
06548     64 02 90 AD |  if_e	jmp	#LR__0515
0654c     BE 01 00 FF 
06550     FF 14 06 F6 | 	mov	arg02, ##@LR__5884
06554     13 13 02 F6 | 	mov	arg01, local01
06558     28 16 B2 FD | 	call	#__system___string_cmp
0655c     00 FA 0D F2 | 	cmp	result1, #0 wz
06560     54 02 90 AD |  if_e	jmp	#LR__0516
06564     BE 01 00 FF 
06568     03 15 06 F6 | 	mov	arg02, ##@LR__5885
0656c     13 13 02 F6 | 	mov	arg01, local01
06570     10 16 B2 FD | 	call	#__system___string_cmp
06574     00 FA 0D F2 | 	cmp	result1, #0 wz
06578     44 02 90 AD |  if_e	jmp	#LR__0517
0657c     BE 01 00 FF 
06580     09 15 06 F6 | 	mov	arg02, ##@LR__5886
06584     13 13 02 F6 | 	mov	arg01, local01
06588     F8 15 B2 FD | 	call	#__system___string_cmp
0658c     00 FA 0D F2 | 	cmp	result1, #0 wz
06590     34 02 90 AD |  if_e	jmp	#LR__0518
06594     BE 01 00 FF 
06598     0F 15 06 F6 | 	mov	arg02, ##@LR__5887
0659c     13 13 02 F6 | 	mov	arg01, local01
065a0     E0 15 B2 FD | 	call	#__system___string_cmp
065a4     00 FA 0D F2 | 	cmp	result1, #0 wz
065a8     24 02 90 AD |  if_e	jmp	#LR__0519
065ac     BE 01 00 FF 
065b0     14 15 06 F6 | 	mov	arg02, ##@LR__5888
065b4     13 13 02 F6 | 	mov	arg01, local01
065b8     C8 15 B2 FD | 	call	#__system___string_cmp
065bc     00 FA 0D F2 | 	cmp	result1, #0 wz
065c0     14 02 90 AD |  if_e	jmp	#LR__0520
065c4     BE 01 00 FF 
065c8     18 15 06 F6 | 	mov	arg02, ##@LR__5889
065cc     13 13 02 F6 | 	mov	arg01, local01
065d0     B0 15 B2 FD | 	call	#__system___string_cmp
065d4     00 FA 0D F2 | 	cmp	result1, #0 wz
065d8     04 02 90 AD |  if_e	jmp	#LR__0521
065dc     BE 01 00 FF 
065e0     1C 15 06 F6 | 	mov	arg02, ##@LR__5890
065e4     13 13 02 F6 | 	mov	arg01, local01
065e8     98 15 B2 FD | 	call	#__system___string_cmp
065ec     00 FA 0D F2 | 	cmp	result1, #0 wz
065f0     F4 01 90 AD |  if_e	jmp	#LR__0522
065f4     F8 01 90 FD | 	jmp	#LR__0523
065f8                 | LR__0460
065f8     9E FA 05 F6 | 	mov	result1, #158
065fc     F4 01 90 FD | 	jmp	#LR__0524
06600                 | LR__0461
06600     85 FA 05 F6 | 	mov	result1, #133
06604     EC 01 90 FD | 	jmp	#LR__0524
06608                 | LR__0462
06608     9B FA 05 F6 | 	mov	result1, #155
0660c     E4 01 90 FD | 	jmp	#LR__0524
06610                 | LR__0463
06610     9B FA 05 F6 | 	mov	result1, #155
06614     DC 01 90 FD | 	jmp	#LR__0524
06618                 | LR__0464
06618     A7 FA 05 F6 | 	mov	result1, #167
0661c     D4 01 90 FD | 	jmp	#LR__0524
06620                 | LR__0465
06620     84 FA 05 F6 | 	mov	result1, #132
06624     CC 01 90 FD | 	jmp	#LR__0524
06628                 | LR__0466
06628     86 FA 05 F6 | 	mov	result1, #134
0662c     C4 01 90 FD | 	jmp	#LR__0524
06630                 | LR__0467
06630     A2 FA 05 F6 | 	mov	result1, #162
06634     BC 01 90 FD | 	jmp	#LR__0524
06638                 | LR__0468
06638     9F FA 05 F6 | 	mov	result1, #159
0663c     B4 01 90 FD | 	jmp	#LR__0524
06640                 | LR__0469
06640     C0 FA 05 F6 | 	mov	result1, #192
06644     AC 01 90 FD | 	jmp	#LR__0524
06648                 | LR__0470
06648     82 FA 05 F6 | 	mov	result1, #130
0664c     A4 01 90 FD | 	jmp	#LR__0524
06650                 | LR__0471
06650     99 FA 05 F6 | 	mov	result1, #153
06654     9C 01 90 FD | 	jmp	#LR__0524
06658                 | LR__0472
06658     D7 FA 05 F6 | 	mov	result1, #215
0665c     94 01 90 FD | 	jmp	#LR__0524
06660                 | LR__0473
06660     D8 FA 05 F6 | 	mov	result1, #216
06664     8C 01 90 FD | 	jmp	#LR__0524
06668                 | LR__0474
06668     C5 FA 05 F6 | 	mov	result1, #197
0666c     84 01 90 FD | 	jmp	#LR__0524
06670                 | LR__0475
06670     C5 FA 05 F6 | 	mov	result1, #197
06674     7C 01 90 FD | 	jmp	#LR__0524
06678                 | LR__0476
06678     9C FA 05 F6 | 	mov	result1, #156
0667c     74 01 90 FD | 	jmp	#LR__0524
06680                 | LR__0477
06680     D3 FA 05 F6 | 	mov	result1, #211
06684     6C 01 90 FD | 	jmp	#LR__0524
06688                 | LR__0478
06688     D3 FA 05 F6 | 	mov	result1, #211
0668c     64 01 90 FD | 	jmp	#LR__0524
06690                 | LR__0479
06690     6F FA 05 F6 | 	mov	result1, #111
06694     5C 01 90 FD | 	jmp	#LR__0524
06698                 | LR__0480
06698     6F FA 05 F6 | 	mov	result1, #111
0669c     54 01 90 FD | 	jmp	#LR__0524
066a0                 | LR__0481
066a0     93 FA 05 F6 | 	mov	result1, #147
066a4     4C 01 90 FD | 	jmp	#LR__0524
066a8                 | LR__0482
066a8     94 FA 05 F6 | 	mov	result1, #148
066ac     44 01 90 FD | 	jmp	#LR__0524
066b0                 | LR__0483
066b0     62 FA 05 F6 | 	mov	result1, #98
066b4     3C 01 90 FD | 	jmp	#LR__0524
066b8                 | LR__0484
066b8     62 FA 05 F6 | 	mov	result1, #98
066bc     34 01 90 FD | 	jmp	#LR__0524
066c0                 | LR__0485
066c0     A3 FA 05 F6 | 	mov	result1, #163
066c4     2C 01 90 FD | 	jmp	#LR__0524
066c8                 | LR__0486
066c8     9D FA 05 F6 | 	mov	result1, #157
066cc     24 01 90 FD | 	jmp	#LR__0524
066d0                 | LR__0487
066d0     8A FA 05 F6 | 	mov	result1, #138
066d4     1C 01 90 FD | 	jmp	#LR__0524
066d8                 | LR__0488
066d8     A4 FA 05 F6 | 	mov	result1, #164
066dc     14 01 90 FD | 	jmp	#LR__0524
066e0                 | LR__0489
066e0     A8 FA 05 F6 | 	mov	result1, #168
066e4     0C 01 90 FD | 	jmp	#LR__0524
066e8                 | LR__0490
066e8     AD FA 05 F6 | 	mov	result1, #173
066ec     04 01 90 FD | 	jmp	#LR__0524
066f0                 | LR__0491
066f0     9A FA 05 F6 | 	mov	result1, #154
066f4     FC 00 90 FD | 	jmp	#LR__0524
066f8                 | LR__0492
066f8     D1 FA 05 F6 | 	mov	result1, #209
066fc     F4 00 90 FD | 	jmp	#LR__0524
06700                 | LR__0493
06700     D0 FA 05 F6 | 	mov	result1, #208
06704     EC 00 90 FD | 	jmp	#LR__0524
06708                 | LR__0494
06708     A6 FA 05 F6 | 	mov	result1, #166
0670c     E4 00 90 FD | 	jmp	#LR__0524
06710                 | LR__0495
06710     66 FA 05 F6 | 	mov	result1, #102
06714     DC 00 90 FD | 	jmp	#LR__0524
06718                 | LR__0496
06718     67 FA 05 F6 | 	mov	result1, #103
0671c     D4 00 90 FD | 	jmp	#LR__0524
06720                 | LR__0497
06720     64 FA 05 F6 | 	mov	result1, #100
06724     CC 00 90 FD | 	jmp	#LR__0524
06728                 | LR__0498
06728     65 FA 05 F6 | 	mov	result1, #101
0672c     C4 00 90 FD | 	jmp	#LR__0524
06730                 | LR__0499
06730     D5 FA 05 F6 | 	mov	result1, #213
06734     BC 00 90 FD | 	jmp	#LR__0524
06738                 | LR__0500
06738     D6 FA 05 F6 | 	mov	result1, #214
0673c     B4 00 90 FD | 	jmp	#LR__0524
06740                 | LR__0501
06740     C8 FA 05 F6 | 	mov	result1, #200
06744     AC 00 90 FD | 	jmp	#LR__0524
06748                 | LR__0502
06748     C9 FA 05 F6 | 	mov	result1, #201
0674c     A4 00 90 FD | 	jmp	#LR__0524
06750                 | LR__0503
06750     CA FA 05 F6 | 	mov	result1, #202
06754     9C 00 90 FD | 	jmp	#LR__0524
06758                 | LR__0504
06758     CC FA 05 F6 | 	mov	result1, #204
0675c     94 00 90 FD | 	jmp	#LR__0524
06760                 | LR__0505
06760     CD FA 05 F6 | 	mov	result1, #205
06764     8C 00 90 FD | 	jmp	#LR__0524
06768                 | LR__0506
06768     CE FA 05 F6 | 	mov	result1, #206
0676c     84 00 90 FD | 	jmp	#LR__0524
06770                 | LR__0507
06770     CB FA 05 F6 | 	mov	result1, #203
06774     7C 00 90 FD | 	jmp	#LR__0524
06778                 | LR__0508
06778     98 FA 05 F6 | 	mov	result1, #152
0677c     74 00 90 FD | 	jmp	#LR__0524
06780                 | LR__0509
06780     7B FA 05 F6 | 	mov	result1, #123
06784     6C 00 90 FD | 	jmp	#LR__0524
06788                 | LR__0510
06788     76 FA 05 F6 | 	mov	result1, #118
0678c     64 00 90 FD | 	jmp	#LR__0524
06790                 | LR__0511
06790     A5 FA 05 F6 | 	mov	result1, #165
06794     5C 00 90 FD | 	jmp	#LR__0524
06798                 | LR__0512
06798     7A FA 05 F6 | 	mov	result1, #122
0679c     54 00 90 FD | 	jmp	#LR__0524
067a0                 | LR__0513
067a0     BF FA 05 F6 | 	mov	result1, #191
067a4     4C 00 90 FD | 	jmp	#LR__0524
067a8                 | LR__0514
067a8     54 FA 05 F6 | 	mov	result1, #84
067ac     44 00 90 FD | 	jmp	#LR__0524
067b0                 | LR__0515
067b0     6B FA 05 F6 | 	mov	result1, #107
067b4     3C 00 90 FD | 	jmp	#LR__0524
067b8                 | LR__0516
067b8     87 FA 05 F6 | 	mov	result1, #135
067bc     34 00 90 FD | 	jmp	#LR__0524
067c0                 | LR__0517
067c0     6A FA 05 F6 | 	mov	result1, #106
067c4     2C 00 90 FD | 	jmp	#LR__0524
067c8                 | LR__0518
067c8     6E FA 05 F6 | 	mov	result1, #110
067cc     24 00 90 FD | 	jmp	#LR__0524
067d0                 | LR__0519
067d0     A1 FA 05 F6 | 	mov	result1, #161
067d4     1C 00 90 FD | 	jmp	#LR__0524
067d8                 | LR__0520
067d8     83 FA 05 F6 | 	mov	result1, #131
067dc     14 00 90 FD | 	jmp	#LR__0524
067e0                 | LR__0521
067e0     A0 FA 05 F6 | 	mov	result1, #160
067e4     0C 00 90 FD | 	jmp	#LR__0524
067e8                 | LR__0522
067e8     9B FA 05 F6 | 	mov	result1, #155
067ec     04 00 90 FD | 	jmp	#LR__0524
067f0                 | LR__0523
067f0     00 FA 05 F6 | 	mov	result1, #0
067f4                 | LR__0524
067f4     A7 F0 03 F6 | 	mov	ptra, fp
067f8     B2 00 A0 FD | 	call	#popregs_
067fc                 | _isfunction_ret
067fc     2D 00 64 FD | 	ret
06800                 | 
06800                 | ' 
06800                 | ' ' Check if the part is a name
06800                 | ' 
06800                 | ' function isname(s as string) as boolean
06800                 | _isname
06800     0D 4A 05 F6 | 	mov	COUNT_, #13
06804     A8 00 A0 FD | 	call	#pushregs_
06808     09 27 02 F6 | 	mov	local01, arg01
0680c     09 29 02 F6 | 	mov	local02, arg01
06810     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
06814                 | LR__0530
06814     14 FB C9 FA | 	rdbyte	result1, local02 wz
06818     01 28 06 51 |  if_ne	add	local02, #1
0681c     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
06820                 | LR__0531
06820     09 29 82 F1 | 	sub	local02, arg01
06824     14 FB 01 F6 | 	mov	result1, local02
06828     FD 2A 0A F6 | 	mov	local03, result1 wz
0682c     00 FA 05 A6 |  if_e	mov	result1, #0
06830     34 02 90 AD |  if_e	jmp	#LR__0543
06834     13 13 02 F6 | 	mov	arg01, local01
06838     01 14 06 F6 | 	mov	arg02, #1
0683c     01 16 06 F6 | 	mov	arg03, #1
06840     B0 34 B2 FD | 	call	#__system__Mid_S
06844     FD 2C 02 F6 | 	mov	local04, result1
06848                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06848     BE 01 00 FF 
0684c     23 15 06 F6 | 	mov	arg02, ##@LR__5891
06850     16 13 02 F6 | 	mov	arg01, local04
06854     2C 13 B2 FD | 	call	#__system___string_cmp
06858     00 FA 55 F2 | 	cmps	result1, #0 wc
0685c     18 00 90 CD |  if_b	jmp	#LR__0532
06860     BE 01 00 FF 
06864     25 15 06 F6 | 	mov	arg02, ##@LR__5892
06868     16 13 02 F6 | 	mov	arg01, local04
0686c     14 13 B2 FD | 	call	#__system___string_cmp
06870     01 FA 55 F2 | 	cmps	result1, #1 wc
06874     1C 00 90 CD |  if_b	jmp	#LR__0533
06878                 | LR__0532
06878     BE 01 00 FF 
0687c     27 15 06 F6 | 	mov	arg02, ##@LR__5893
06880     16 13 02 F6 | 	mov	arg01, local04
06884     FC 12 B2 FD | 	call	#__system___string_cmp
06888     00 FA 0D F2 | 	cmp	result1, #0 wz
0688c     00 FA 05 56 |  if_ne	mov	result1, #0
06890     D4 01 90 5D |  if_ne	jmp	#LR__0543
06894                 | LR__0533
06894                 | ' if l>2 then 
06894     03 2A 56 F2 | 	cmps	local03, #3 wc
06898     C8 01 90 CD |  if_b	jmp	#LR__0542
0689c                 | '   for i=2 to l
0689c     02 2E 06 F6 | 	mov	local05, #2
068a0     15 31 02 F6 | 	mov	local06, local03
068a4     01 30 06 F1 | 	add	local06, #1
068a8                 | LR__0534
068a8     18 2F 52 F2 | 	cmps	local05, local06 wc
068ac     B4 01 90 3D |  if_ae	jmp	#LR__0541
068b0     13 13 02 F6 | 	mov	arg01, local01
068b4     17 15 02 F6 | 	mov	arg02, local05
068b8     01 16 06 F6 | 	mov	arg03, #1
068bc     34 34 B2 FD | 	call	#__system__Mid_S
068c0     FD 2C 02 F6 | 	mov	local04, result1
068c4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
068c4     15 2F 52 F2 | 	cmps	local05, local03 wc
068c8     9C 00 90 3D |  if_ae	jmp	#LR__0537
068cc     BE 01 00 FF 
068d0     29 15 06 F6 | 	mov	arg02, ##@LR__5894
068d4     16 13 02 F6 | 	mov	arg01, local04
068d8     A8 12 B2 FD | 	call	#__system___string_cmp
068dc     00 FA 55 F2 | 	cmps	result1, #0 wc
068e0     18 00 90 CD |  if_b	jmp	#LR__0535
068e4     BE 01 00 FF 
068e8     2B 15 06 F6 | 	mov	arg02, ##@LR__5895
068ec     16 13 02 F6 | 	mov	arg01, local04
068f0     90 12 B2 FD | 	call	#__system___string_cmp
068f4     01 FA 55 F2 | 	cmps	result1, #1 wc
068f8     6C 00 90 CD |  if_b	jmp	#LR__0537
068fc                 | LR__0535
068fc     BE 01 00 FF 
06900     2D 15 06 F6 | 	mov	arg02, ##@LR__5896
06904     16 13 02 F6 | 	mov	arg01, local04
06908     78 12 B2 FD | 	call	#__system___string_cmp
0690c     00 FA 55 F2 | 	cmps	result1, #0 wc
06910     18 00 90 CD |  if_b	jmp	#LR__0536
06914     BE 01 00 FF 
06918     2F 15 06 F6 | 	mov	arg02, ##@LR__5897
0691c     16 13 02 F6 | 	mov	arg01, local04
06920     60 12 B2 FD | 	call	#__system___string_cmp
06924     01 FA 55 F2 | 	cmps	result1, #1 wc
06928     3C 00 90 CD |  if_b	jmp	#LR__0537
0692c                 | LR__0536
0692c     BE 01 00 FF 
06930     31 33 06 F6 | 	mov	local07, ##@LR__5898
06934     16 13 02 F6 | 	mov	arg01, local04
06938     19 15 02 F6 | 	mov	arg02, local07
0693c     44 12 B2 FD | 	call	#__system___string_cmp
06940     00 FA 0D F2 | 	cmp	result1, #0 wz
06944     20 00 90 AD |  if_e	jmp	#LR__0537
06948     BE 01 00 FF 
0694c     33 35 06 F6 | 	mov	local08, ##@LR__5899
06950     16 13 02 F6 | 	mov	arg01, local04
06954     1A 15 02 F6 | 	mov	arg02, local08
06958     28 12 B2 FD | 	call	#__system___string_cmp
0695c     FD 36 0A F6 | 	mov	local09, result1 wz
06960     00 FA 05 56 |  if_ne	mov	result1, #0
06964     00 01 90 5D |  if_ne	jmp	#LR__0543
06968                 | LR__0537
06968                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06968     15 2F 0A F2 | 	cmp	local05, local03 wz
0696c     EC 00 90 5D |  if_ne	jmp	#LR__0540
06970     BE 01 00 FF 
06974     35 39 06 F6 | 	mov	local10, ##@LR__5900
06978     16 13 02 F6 | 	mov	arg01, local04
0697c     1C 15 02 F6 | 	mov	arg02, local10
06980     00 12 B2 FD | 	call	#__system___string_cmp
06984     FD 3A 02 F6 | 	mov	local11, result1
06988     00 3A 56 F2 | 	cmps	local11, #0 wc
0698c     1C 00 90 CD |  if_b	jmp	#LR__0538
06990     BE 01 00 FF 
06994     37 15 06 F6 | 	mov	arg02, ##@LR__5901
06998     16 13 02 F6 | 	mov	arg01, local04
0699c     E4 11 B2 FD | 	call	#__system___string_cmp
069a0     FD 38 02 F6 | 	mov	local10, result1
069a4     01 38 56 F2 | 	cmps	local10, #1 wc
069a8     B0 00 90 CD |  if_b	jmp	#LR__0540
069ac                 | LR__0538
069ac     BE 01 00 FF 
069b0     39 15 06 F6 | 	mov	arg02, ##@LR__5902
069b4     16 13 02 F6 | 	mov	arg01, local04
069b8     C8 11 B2 FD | 	call	#__system___string_cmp
069bc     00 FA 55 F2 | 	cmps	result1, #0 wc
069c0     1C 00 90 CD |  if_b	jmp	#LR__0539
069c4     BE 01 00 FF 
069c8     3B 37 06 F6 | 	mov	local09, ##@LR__5903
069cc     16 13 02 F6 | 	mov	arg01, local04
069d0     1B 15 02 F6 | 	mov	arg02, local09
069d4     AC 11 B2 FD | 	call	#__system___string_cmp
069d8     01 FA 55 F2 | 	cmps	result1, #1 wc
069dc     7C 00 90 CD |  if_b	jmp	#LR__0540
069e0                 | LR__0539
069e0     BE 01 00 FF 
069e4     3D 37 06 F6 | 	mov	local09, ##@LR__5904
069e8     16 13 02 F6 | 	mov	arg01, local04
069ec     1B 15 02 F6 | 	mov	arg02, local09
069f0     90 11 B2 FD | 	call	#__system___string_cmp
069f4     00 FA 4D F2 | 	cmps	result1, #0 wz
069f8     60 00 90 AD |  if_e	jmp	#LR__0540
069fc     BE 01 00 FF 
06a00     3F 35 06 F6 | 	mov	local08, ##@LR__5905
06a04     16 13 02 F6 | 	mov	arg01, local04
06a08     1A 15 02 F6 | 	mov	arg02, local08
06a0c     74 11 B2 FD | 	call	#__system___string_cmp
06a10     FD 36 0A F6 | 	mov	local09, result1 wz
06a14     44 00 90 AD |  if_e	jmp	#LR__0540
06a18     BE 01 00 FF 
06a1c     41 3D 06 F6 | 	mov	local12, ##@LR__5906
06a20     1E 35 02 F6 | 	mov	local08, local12
06a24     16 13 02 F6 | 	mov	arg01, local04
06a28     1A 15 02 F6 | 	mov	arg02, local08
06a2c     54 11 B2 FD | 	call	#__system___string_cmp
06a30     FD 32 0A F6 | 	mov	local07, result1 wz
06a34     24 00 90 AD |  if_e	jmp	#LR__0540
06a38     BE 01 00 FF 
06a3c     43 3F 06 F6 | 	mov	local13, ##@LR__5907
06a40     1F 3D 02 F6 | 	mov	local12, local13
06a44     16 13 02 F6 | 	mov	arg01, local04
06a48     1E 15 02 F6 | 	mov	arg02, local12
06a4c     34 11 B2 FD | 	call	#__system___string_cmp
06a50     FD 34 0A F6 | 	mov	local08, result1 wz
06a54     00 FA 05 56 |  if_ne	mov	result1, #0
06a58     0C 00 90 5D |  if_ne	jmp	#LR__0543
06a5c                 | LR__0540
06a5c     01 2E 06 F1 | 	add	local05, #1
06a60     44 FE 9F FD | 	jmp	#LR__0534
06a64                 | LR__0541
06a64                 | LR__0542
06a64                 | ' return true
06a64     01 FA 65 F6 | 	neg	result1, #1
06a68                 | LR__0543
06a68     A7 F0 03 F6 | 	mov	ptra, fp
06a6c     B2 00 A0 FD | 	call	#popregs_
06a70                 | _isname_ret
06a70     2D 00 64 FD | 	ret
06a74                 | 
06a74                 | ' 
06a74                 | ' ' Check if the part is a number.  
06a74                 | ' 
06a74                 | ' function isnum(s as string) as boolean 
06a74                 | _isnum
06a74     13 4A 05 F6 | 	mov	COUNT_, #19
06a78     A8 00 A0 FD | 	call	#pushregs_
06a7c     09 27 02 F6 | 	mov	local01, arg01
06a80     00 28 06 F6 | 	mov	local02, #0
06a84     00 2A 06 F6 | 	mov	local03, #0
06a88     13 13 02 F6 | 	mov	arg01, local01
06a8c     09 2D 02 F6 | 	mov	local04, arg01
06a90     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
06a94                 | LR__0550
06a94     16 FB C9 FA | 	rdbyte	result1, local04 wz
06a98     01 2C 06 51 |  if_ne	add	local04, #1
06a9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
06aa0                 | LR__0551
06aa0     09 2D 82 F1 | 	sub	local04, arg01
06aa4     16 FB 01 F6 | 	mov	result1, local04
06aa8     FD 2E 0A F6 | 	mov	local05, result1 wz
06aac     00 FA 05 A6 |  if_e	mov	result1, #0
06ab0     A0 03 90 AD |  if_e	jmp	#LR__0566
06ab4     13 13 02 F6 | 	mov	arg01, local01
06ab8     01 14 06 F6 | 	mov	arg02, #1
06abc     01 16 06 F6 | 	mov	arg03, #1
06ac0     30 32 B2 FD | 	call	#__system__Mid_S
06ac4     FD 30 02 F6 | 	mov	local06, result1
06ac8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06ac8     BE 01 00 FF 
06acc     45 15 06 F6 | 	mov	arg02, ##@LR__5908
06ad0     18 13 02 F6 | 	mov	arg01, local06
06ad4     AC 10 B2 FD | 	call	#__system___string_cmp
06ad8     00 FA 55 F2 | 	cmps	result1, #0 wc
06adc     1C 00 90 CD |  if_b	jmp	#LR__0552
06ae0     BE 01 00 FF 
06ae4     47 33 06 F6 | 	mov	local07, ##@LR__5909
06ae8     18 13 02 F6 | 	mov	arg01, local06
06aec     19 15 02 F6 | 	mov	arg02, local07
06af0     90 10 B2 FD | 	call	#__system___string_cmp
06af4     01 FA 55 F2 | 	cmps	result1, #1 wc
06af8     84 00 90 CD |  if_b	jmp	#LR__0553
06afc                 | LR__0552
06afc     BE 01 00 FF 
06b00     49 35 06 F6 | 	mov	local08, ##@LR__5910
06b04     1A 33 02 F6 | 	mov	local07, local08
06b08     18 13 02 F6 | 	mov	arg01, local06
06b0c     19 15 02 F6 | 	mov	arg02, local07
06b10     70 10 B2 FD | 	call	#__system___string_cmp
06b14     00 FA 0D F2 | 	cmp	result1, #0 wz
06b18     64 00 90 AD |  if_e	jmp	#LR__0553
06b1c     BE 01 00 FF 
06b20     4B 37 06 F6 | 	mov	local09, ##@LR__5911
06b24     1B 35 02 F6 | 	mov	local08, local09
06b28     18 13 02 F6 | 	mov	arg01, local06
06b2c     1A 15 02 F6 | 	mov	arg02, local08
06b30     50 10 B2 FD | 	call	#__system___string_cmp
06b34     FD 32 0A F6 | 	mov	local07, result1 wz
06b38     44 00 90 AD |  if_e	jmp	#LR__0553
06b3c     BE 01 00 FF 
06b40     4D 39 06 F6 | 	mov	local10, ##@LR__5912
06b44     1C 37 02 F6 | 	mov	local09, local10
06b48     18 13 02 F6 | 	mov	arg01, local06
06b4c     1B 15 02 F6 | 	mov	arg02, local09
06b50     30 10 B2 FD | 	call	#__system___string_cmp
06b54     FD 34 0A F6 | 	mov	local08, result1 wz
06b58     24 00 90 AD |  if_e	jmp	#LR__0553
06b5c     BE 01 00 FF 
06b60     4F 3B 06 F6 | 	mov	local11, ##@LR__5913
06b64     1D 39 02 F6 | 	mov	local10, local11
06b68     18 13 02 F6 | 	mov	arg01, local06
06b6c     1C 15 02 F6 | 	mov	arg02, local10
06b70     10 10 B2 FD | 	call	#__system___string_cmp
06b74     FD 36 0A F6 | 	mov	local09, result1 wz
06b78     00 FA 05 56 |  if_ne	mov	result1, #0
06b7c     D4 02 90 5D |  if_ne	jmp	#LR__0566
06b80                 | LR__0553
06b80                 | ' if m$="." then ds=1
06b80     BE 01 00 FF 
06b84     51 15 06 F6 | 	mov	arg02, ##@LR__5914
06b88     18 13 02 F6 | 	mov	arg01, local06
06b8c     F4 0F B2 FD | 	call	#__system___string_cmp
06b90     00 FA 0D F2 | 	cmp	result1, #0 wz
06b94     01 28 06 A6 |  if_e	mov	local02, #1
06b98                 | ' if m$="$" then hex=1 else hex=0
06b98     BE 01 00 FF 
06b9c     53 15 06 F6 | 	mov	arg02, ##@LR__5915
06ba0     18 13 02 F6 | 	mov	arg01, local06
06ba4     DC 0F B2 FD | 	call	#__system___string_cmp
06ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
06bac     01 3C 06 A6 |  if_e	mov	local12, #1
06bb0     00 3C 06 56 |  if_ne	mov	local12, #0
06bb4                 | ' if m$="%" then bin=1 else bin=0
06bb4     BE 01 00 FF 
06bb8     55 15 06 F6 | 	mov	arg02, ##@LR__5916
06bbc     18 13 02 F6 | 	mov	arg01, local06
06bc0     C0 0F B2 FD | 	call	#__system___string_cmp
06bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
06bc8     01 3E 06 A6 |  if_e	mov	local13, #1
06bcc     00 3E 06 56 |  if_ne	mov	local13, #0
06bd0                 | ' if l>1 then 
06bd0     02 2E 56 F2 | 	cmps	local05, #2 wc
06bd4     78 02 90 CD |  if_b	jmp	#LR__0565
06bd8                 | '   for i=2 to l
06bd8     02 40 06 F6 | 	mov	local14, #2
06bdc     17 43 02 F6 | 	mov	local15, local05
06be0     01 42 06 F1 | 	add	local15, #1
06be4                 | LR__0554
06be4     21 41 52 F2 | 	cmps	local14, local15 wc
06be8     64 02 90 3D |  if_ae	jmp	#LR__0564
06bec     13 13 02 F6 | 	mov	arg01, local01
06bf0     20 15 02 F6 | 	mov	arg02, local14
06bf4     01 16 06 F6 | 	mov	arg03, #1
06bf8     F8 30 B2 FD | 	call	#__system__Mid_S
06bfc     FD 30 02 F6 | 	mov	local06, result1
06c00     00 44 06 F6 | 	mov	local16, #0
06c04                 | '     m$=mid$(s,i,1) : b=false
06c04                 | '     if m$>="0" andalso m$<="9" then b=true  
06c04     BE 01 00 FF 
06c08     57 15 06 F6 | 	mov	arg02, ##@LR__5917
06c0c     18 13 02 F6 | 	mov	arg01, local06
06c10     70 0F B2 FD | 	call	#__system___string_cmp
06c14     00 FA 55 F2 | 	cmps	result1, #0 wc
06c18     1C 00 90 CD |  if_b	jmp	#LR__0555
06c1c     BE 01 00 FF 
06c20     59 33 06 F6 | 	mov	local07, ##@LR__5918
06c24     18 13 02 F6 | 	mov	arg01, local06
06c28     19 15 02 F6 | 	mov	arg02, local07
06c2c     54 0F B2 FD | 	call	#__system___string_cmp
06c30     01 FA 55 F2 | 	cmps	result1, #1 wc
06c34     01 44 66 C6 |  if_b	neg	local16, #1
06c38                 | LR__0555
06c38                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06c38     BE 01 00 FF 
06c3c     5B 15 06 F6 | 	mov	arg02, ##@LR__5919
06c40     18 13 02 F6 | 	mov	arg01, local06
06c44     3C 0F B2 FD | 	call	#__system___string_cmp
06c48     00 FA 0D F2 | 	cmp	result1, #0 wz
06c4c     7C 00 90 AD |  if_e	jmp	#LR__0556
06c50     BE 01 00 FF 
06c54     5D 33 06 F6 | 	mov	local07, ##@LR__5920
06c58     18 13 02 F6 | 	mov	arg01, local06
06c5c     19 15 02 F6 | 	mov	arg02, local07
06c60     20 0F B2 FD | 	call	#__system___string_cmp
06c64     00 FA 0D F2 | 	cmp	result1, #0 wz
06c68     60 00 90 AD |  if_e	jmp	#LR__0556
06c6c     BE 01 00 FF 
06c70     5F 35 06 F6 | 	mov	local08, ##@LR__5921
06c74     1A 33 02 F6 | 	mov	local07, local08
06c78     18 13 02 F6 | 	mov	arg01, local06
06c7c     19 15 02 F6 | 	mov	arg02, local07
06c80     00 0F B2 FD | 	call	#__system___string_cmp
06c84     00 FA 0D F2 | 	cmp	result1, #0 wz
06c88     40 00 90 AD |  if_e	jmp	#LR__0556
06c8c     BE 01 00 FF 
06c90     61 37 06 F6 | 	mov	local09, ##@LR__5922
06c94     1B 35 02 F6 | 	mov	local08, local09
06c98     18 13 02 F6 | 	mov	arg01, local06
06c9c     1A 15 02 F6 | 	mov	arg02, local08
06ca0     E0 0E B2 FD | 	call	#__system___string_cmp
06ca4     FD 32 0A F6 | 	mov	local07, result1 wz
06ca8     20 00 90 AD |  if_e	jmp	#LR__0556
06cac     BE 01 00 FF 
06cb0     63 39 06 F6 | 	mov	local10, ##@LR__5923
06cb4     1C 37 02 F6 | 	mov	local09, local10
06cb8     18 13 02 F6 | 	mov	arg01, local06
06cbc     1B 15 02 F6 | 	mov	arg02, local09
06cc0     C0 0E B2 FD | 	call	#__system___string_cmp
06cc4     FD 34 0A F6 | 	mov	local08, result1 wz
06cc8     04 00 90 5D |  if_ne	jmp	#LR__0557
06ccc                 | LR__0556
06ccc     01 44 66 F6 | 	neg	local16, #1
06cd0                 | LR__0557
06cd0                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06cd0     01 3C 0E F2 | 	cmp	local12, #1 wz
06cd4     34 00 90 5D |  if_ne	jmp	#LR__0558
06cd8     BE 01 00 FF 
06cdc     65 15 06 F6 | 	mov	arg02, ##@LR__5924
06ce0     18 13 02 F6 | 	mov	arg01, local06
06ce4     9C 0E B2 FD | 	call	#__system___string_cmp
06ce8     00 FA 55 F2 | 	cmps	result1, #0 wc
06cec     1C 00 90 CD |  if_b	jmp	#LR__0558
06cf0     BE 01 00 FF 
06cf4     67 33 06 F6 | 	mov	local07, ##@LR__5925
06cf8     18 13 02 F6 | 	mov	arg01, local06
06cfc     19 15 02 F6 | 	mov	arg02, local07
06d00     80 0E B2 FD | 	call	#__system___string_cmp
06d04     01 FA 55 F2 | 	cmps	result1, #1 wc
06d08     01 44 66 C6 |  if_b	neg	local16, #1
06d0c                 | LR__0558
06d0c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06d0c     01 3E 0E F2 | 	cmp	local13, #1 wz
06d10     58 00 90 5D |  if_ne	jmp	#LR__0560
06d14     BE 01 00 FF 
06d18     69 15 06 F6 | 	mov	arg02, ##@LR__5926
06d1c     18 13 02 F6 | 	mov	arg01, local06
06d20     60 0E B2 FD | 	call	#__system___string_cmp
06d24     00 FA 55 F2 | 	cmps	result1, #0 wc
06d28     1C 00 90 CD |  if_b	jmp	#LR__0559
06d2c     BE 01 00 FF 
06d30     6B 33 06 F6 | 	mov	local07, ##@LR__5927
06d34     18 13 02 F6 | 	mov	arg01, local06
06d38     19 15 02 F6 | 	mov	arg02, local07
06d3c     44 0E B2 FD | 	call	#__system___string_cmp
06d40     01 FA 55 F2 | 	cmps	result1, #1 wc
06d44     24 00 90 CD |  if_b	jmp	#LR__0560
06d48                 | LR__0559
06d48     BE 01 00 FF 
06d4c     6D 35 06 F6 | 	mov	local08, ##@LR__5928
06d50     1A 33 02 F6 | 	mov	local07, local08
06d54     18 13 02 F6 | 	mov	arg01, local06
06d58     19 15 02 F6 | 	mov	arg02, local07
06d5c     24 0E B2 FD | 	call	#__system___string_cmp
06d60     00 FA 0D F2 | 	cmp	result1, #0 wz
06d64     00 FA 05 56 |  if_ne	mov	result1, #0
06d68     E8 00 90 5D |  if_ne	jmp	#LR__0566
06d6c                 | LR__0560
06d6c                 | '     if not b then return false
06d6c     22 45 22 F6 | 	not	local16, local16
06d70     00 44 0E F2 | 	cmp	local16, #0 wz
06d74     00 FA 05 56 |  if_ne	mov	result1, #0
06d78     D8 00 90 5D |  if_ne	jmp	#LR__0566
06d7c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06d7c     BE 01 00 FF 
06d80     6F 15 06 F6 | 	mov	arg02, ##@LR__5929
06d84     18 13 02 F6 | 	mov	arg01, local06
06d88     F8 0D B2 FD | 	call	#__system___string_cmp
06d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
06d90     3C 00 90 5D |  if_ne	jmp	#LR__0561
06d94     20 15 02 F6 | 	mov	arg02, local14
06d98     01 14 86 F1 | 	sub	arg02, #1
06d9c     13 13 02 F6 | 	mov	arg01, local01
06da0     01 16 06 F6 | 	mov	arg03, #1
06da4     4C 2F B2 FD | 	call	#__system__Mid_S
06da8     FD 12 02 F6 | 	mov	arg01, result1
06dac     3C 31 B2 FD | 	call	#__system__LCase_S
06db0     FD 12 02 F6 | 	mov	arg01, result1
06db4     BE 01 00 FF 
06db8     71 33 06 F6 | 	mov	local07, ##@LR__5930
06dbc     19 15 02 F6 | 	mov	arg02, local07
06dc0     C0 0D B2 FD | 	call	#__system___string_cmp
06dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
06dc8     00 FA 05 56 |  if_ne	mov	result1, #0
06dcc     84 00 90 5D |  if_ne	jmp	#LR__0566
06dd0                 | LR__0561
06dd0                 | '     if m$="." then ds+=1: if ds>1 then return false
06dd0     BE 01 00 FF 
06dd4     73 15 06 F6 | 	mov	arg02, ##@LR__5931
06dd8     18 13 02 F6 | 	mov	arg01, local06
06ddc     A4 0D B2 FD | 	call	#__system___string_cmp
06de0     00 FA 0D F2 | 	cmp	result1, #0 wz
06de4     01 28 06 A1 |  if_e	add	local02, #1
06de8     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06dec     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06df0     60 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06df4                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06df4     BE 01 00 FF 
06df8     75 47 06 F6 | 	mov	local17, ##@LR__5932
06dfc     23 49 02 F6 | 	mov	local18, local17
06e00     18 13 02 F6 | 	mov	arg01, local06
06e04     24 15 02 F6 | 	mov	arg02, local18
06e08     78 0D B2 FD | 	call	#__system___string_cmp
06e0c     FD 4A 0A F6 | 	mov	local19, result1 wz
06e10     20 00 90 AD |  if_e	jmp	#LR__0562
06e14     BE 01 00 FF 
06e18     77 33 06 F6 | 	mov	local07, ##@LR__5933
06e1c     19 47 02 F6 | 	mov	local17, local07
06e20     18 13 02 F6 | 	mov	arg01, local06
06e24     23 15 02 F6 | 	mov	arg02, local17
06e28     58 0D B2 FD | 	call	#__system___string_cmp
06e2c     FD 48 0A F6 | 	mov	local18, result1 wz
06e30     14 00 90 5D |  if_ne	jmp	#LR__0563
06e34                 | LR__0562
06e34     01 2A 06 F1 | 	add	local03, #1
06e38     00 3C 0E F2 | 	cmp	local12, #0 wz
06e3c     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06e40     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06e44     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06e48                 | LR__0563
06e48     01 40 06 F1 | 	add	local14, #1
06e4c     94 FD 9F FD | 	jmp	#LR__0554
06e50                 | LR__0564
06e50                 | LR__0565
06e50                 | ' return true
06e50     01 FA 65 F6 | 	neg	result1, #1
06e54                 | LR__0566
06e54     A7 F0 03 F6 | 	mov	ptra, fp
06e58     B2 00 A0 FD | 	call	#popregs_
06e5c                 | _isnum_ret
06e5c     2D 00 64 FD | 	ret
06e60                 | 
06e60                 | '   
06e60                 | ' ' Check if the part is an integer number.    
06e60                 | '   
06e60                 | ' function isint(s as string) as boolean
06e60                 | _isint
06e60     0E 4A 05 F6 | 	mov	COUNT_, #14
06e64     A8 00 A0 FD | 	call	#pushregs_
06e68     09 27 02 F6 | 	mov	local01, arg01
06e6c     09 29 02 F6 | 	mov	local02, arg01
06e70     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06e74                 | LR__0570
06e74     14 FB C9 FA | 	rdbyte	result1, local02 wz
06e78     01 28 06 51 |  if_ne	add	local02, #1
06e7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06e80                 | LR__0571
06e80     09 29 82 F1 | 	sub	local02, arg01
06e84     14 FB 01 F6 | 	mov	result1, local02
06e88     FD 2A 0A F6 | 	mov	local03, result1 wz
06e8c     00 FA 05 A6 |  if_e	mov	result1, #0
06e90     64 02 90 AD |  if_e	jmp	#LR__0584
06e94     13 13 02 F6 | 	mov	arg01, local01
06e98     01 14 06 F6 | 	mov	arg02, #1
06e9c     01 16 06 F6 | 	mov	arg03, #1
06ea0     50 2E B2 FD | 	call	#__system__Mid_S
06ea4     FD 2C 02 F6 | 	mov	local04, result1
06ea8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06ea8     BE 01 00 FF 
06eac     79 15 06 F6 | 	mov	arg02, ##@LR__5934
06eb0     16 13 02 F6 | 	mov	arg01, local04
06eb4     CC 0C B2 FD | 	call	#__system___string_cmp
06eb8     00 FA 55 F2 | 	cmps	result1, #0 wc
06ebc     1C 00 90 CD |  if_b	jmp	#LR__0572
06ec0     BE 01 00 FF 
06ec4     7B 2F 06 F6 | 	mov	local05, ##@LR__5935
06ec8     16 13 02 F6 | 	mov	arg01, local04
06ecc     17 15 02 F6 | 	mov	arg02, local05
06ed0     B0 0C B2 FD | 	call	#__system___string_cmp
06ed4     01 FA 55 F2 | 	cmps	result1, #1 wc
06ed8     64 00 90 CD |  if_b	jmp	#LR__0573
06edc                 | LR__0572
06edc     BE 01 00 FF 
06ee0     7D 31 06 F6 | 	mov	local06, ##@LR__5936
06ee4     18 2F 02 F6 | 	mov	local05, local06
06ee8     16 13 02 F6 | 	mov	arg01, local04
06eec     17 15 02 F6 | 	mov	arg02, local05
06ef0     90 0C B2 FD | 	call	#__system___string_cmp
06ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ef8     44 00 90 AD |  if_e	jmp	#LR__0573
06efc     BE 01 00 FF 
06f00     7F 33 06 F6 | 	mov	local07, ##@LR__5937
06f04     19 31 02 F6 | 	mov	local06, local07
06f08     16 13 02 F6 | 	mov	arg01, local04
06f0c     18 15 02 F6 | 	mov	arg02, local06
06f10     70 0C B2 FD | 	call	#__system___string_cmp
06f14     FD 2E 0A F6 | 	mov	local05, result1 wz
06f18     24 00 90 AD |  if_e	jmp	#LR__0573
06f1c     BE 01 00 FF 
06f20     81 35 06 F6 | 	mov	local08, ##@LR__5938
06f24     1A 33 02 F6 | 	mov	local07, local08
06f28     16 13 02 F6 | 	mov	arg01, local04
06f2c     19 15 02 F6 | 	mov	arg02, local07
06f30     50 0C B2 FD | 	call	#__system___string_cmp
06f34     FD 30 0A F6 | 	mov	local06, result1 wz
06f38     00 FA 05 56 |  if_ne	mov	result1, #0
06f3c     B8 01 90 5D |  if_ne	jmp	#LR__0584
06f40                 | LR__0573
06f40                 | ' if m$="$" then hex=1 else hex=0
06f40     BE 01 00 FF 
06f44     83 15 06 F6 | 	mov	arg02, ##@LR__5939
06f48     16 13 02 F6 | 	mov	arg01, local04
06f4c     34 0C B2 FD | 	call	#__system___string_cmp
06f50     00 FA 0D F2 | 	cmp	result1, #0 wz
06f54     01 36 06 A6 |  if_e	mov	local09, #1
06f58     00 36 06 56 |  if_ne	mov	local09, #0
06f5c                 | ' if m$="%" then bin=1 else bin=0
06f5c     BE 01 00 FF 
06f60     85 15 06 F6 | 	mov	arg02, ##@LR__5940
06f64     16 13 02 F6 | 	mov	arg01, local04
06f68     18 0C B2 FD | 	call	#__system___string_cmp
06f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
06f70     01 38 06 A6 |  if_e	mov	local10, #1
06f74     00 38 06 56 |  if_ne	mov	local10, #0
06f78                 | ' if l>1 then 
06f78     02 2A 56 F2 | 	cmps	local03, #2 wc
06f7c     74 01 90 CD |  if_b	jmp	#LR__0583
06f80                 | '   for i=2 to l
06f80     02 3A 06 F6 | 	mov	local11, #2
06f84     15 3D 02 F6 | 	mov	local12, local03
06f88     01 3C 06 F1 | 	add	local12, #1
06f8c                 | LR__0574
06f8c     1E 3B 52 F2 | 	cmps	local11, local12 wc
06f90     60 01 90 3D |  if_ae	jmp	#LR__0582
06f94     13 13 02 F6 | 	mov	arg01, local01
06f98     1D 15 02 F6 | 	mov	arg02, local11
06f9c     01 16 06 F6 | 	mov	arg03, #1
06fa0     50 2D B2 FD | 	call	#__system__Mid_S
06fa4     FD 2C 02 F6 | 	mov	local04, result1
06fa8                 | '     m$=mid$(s,i,1) 
06fa8                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06fa8     00 36 0E F2 | 	cmp	local09, #0 wz
06fac     50 00 90 5D |  if_ne	jmp	#LR__0576
06fb0     BE 01 00 FF 
06fb4     87 15 06 F6 | 	mov	arg02, ##@LR__5941
06fb8     16 13 02 F6 | 	mov	arg01, local04
06fbc     C4 0B B2 FD | 	call	#__system___string_cmp
06fc0     00 FA 55 F2 | 	cmps	result1, #0 wc
06fc4     18 00 90 CD |  if_b	jmp	#LR__0575
06fc8     BE 01 00 FF 
06fcc     89 15 06 F6 | 	mov	arg02, ##@LR__5942
06fd0     16 13 02 F6 | 	mov	arg01, local04
06fd4     AC 0B B2 FD | 	call	#__system___string_cmp
06fd8     01 FA 55 F2 | 	cmps	result1, #1 wc
06fdc     20 00 90 CD |  if_b	jmp	#LR__0576
06fe0                 | LR__0575
06fe0     BE 01 00 FF 
06fe4     8B 31 06 F6 | 	mov	local06, ##@LR__5943
06fe8     16 13 02 F6 | 	mov	arg01, local04
06fec     18 15 02 F6 | 	mov	arg02, local06
06ff0     90 0B B2 FD | 	call	#__system___string_cmp
06ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ff8     00 FA 05 56 |  if_ne	mov	result1, #0
06ffc     F8 00 90 5D |  if_ne	jmp	#LR__0584
07000                 | LR__0576
07000                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
07000     01 36 0E F2 | 	cmp	local09, #1 wz
07004     90 00 90 5D |  if_ne	jmp	#LR__0579
07008     BE 01 00 FF 
0700c     8D 15 06 F6 | 	mov	arg02, ##@LR__5944
07010     16 13 02 F6 | 	mov	arg01, local04
07014     6C 0B B2 FD | 	call	#__system___string_cmp
07018     00 FA 55 F2 | 	cmps	result1, #0 wc
0701c     1C 00 90 CD |  if_b	jmp	#LR__0577
07020     BE 01 00 FF 
07024     8F 15 06 F6 | 	mov	arg02, ##@LR__5945
07028     16 13 02 F6 | 	mov	arg01, local04
0702c     54 0B B2 FD | 	call	#__system___string_cmp
07030     FD 3E 02 F6 | 	mov	local13, result1
07034     01 3E 56 F2 | 	cmps	local13, #1 wc
07038     5C 00 90 CD |  if_b	jmp	#LR__0579
0703c                 | LR__0577
0703c     BE 01 00 FF 
07040     91 2F 06 F6 | 	mov	local05, ##@LR__5946
07044     16 13 02 F6 | 	mov	arg01, local04
07048     17 15 02 F6 | 	mov	arg02, local05
0704c     34 0B B2 FD | 	call	#__system___string_cmp
07050     FD 40 02 F6 | 	mov	local14, result1
07054     00 40 56 F2 | 	cmps	local14, #0 wc
07058     1C 00 90 CD |  if_b	jmp	#LR__0578
0705c     BE 01 00 FF 
07060     93 33 06 F6 | 	mov	local07, ##@LR__5947
07064     16 13 02 F6 | 	mov	arg01, local04
07068     19 15 02 F6 | 	mov	arg02, local07
0706c     14 0B B2 FD | 	call	#__system___string_cmp
07070     01 FA 55 F2 | 	cmps	result1, #1 wc
07074     20 00 90 CD |  if_b	jmp	#LR__0579
07078                 | LR__0578
07078     BE 01 00 FF 
0707c     95 35 06 F6 | 	mov	local08, ##@LR__5948
07080     16 13 02 F6 | 	mov	arg01, local04
07084     1A 15 02 F6 | 	mov	arg02, local08
07088     F8 0A B2 FD | 	call	#__system___string_cmp
0708c     00 FA 0D F2 | 	cmp	result1, #0 wz
07090     00 FA 05 56 |  if_ne	mov	result1, #0
07094     60 00 90 5D |  if_ne	jmp	#LR__0584
07098                 | LR__0579
07098                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
07098     01 38 0E F2 | 	cmp	local10, #1 wz
0709c     4C 00 90 5D |  if_ne	jmp	#LR__0581
070a0     BE 01 00 FF 
070a4     97 15 06 F6 | 	mov	arg02, ##@LR__5949
070a8     16 13 02 F6 | 	mov	arg01, local04
070ac     D4 0A B2 FD | 	call	#__system___string_cmp
070b0     00 FA 55 F2 | 	cmps	result1, #0 wc
070b4     18 00 90 CD |  if_b	jmp	#LR__0580
070b8     BE 01 00 FF 
070bc     99 15 06 F6 | 	mov	arg02, ##@LR__5950
070c0     16 13 02 F6 | 	mov	arg01, local04
070c4     BC 0A B2 FD | 	call	#__system___string_cmp
070c8     01 FA 55 F2 | 	cmps	result1, #1 wc
070cc     1C 00 90 CD |  if_b	jmp	#LR__0581
070d0                 | LR__0580
070d0     BE 01 00 FF 
070d4     9B 15 06 F6 | 	mov	arg02, ##@LR__5951
070d8     16 13 02 F6 | 	mov	arg01, local04
070dc     A4 0A B2 FD | 	call	#__system___string_cmp
070e0     00 FA 0D F2 | 	cmp	result1, #0 wz
070e4     00 FA 05 56 |  if_ne	mov	result1, #0
070e8     0C 00 90 5D |  if_ne	jmp	#LR__0584
070ec                 | LR__0581
070ec     01 3A 06 F1 | 	add	local11, #1
070f0     98 FE 9F FD | 	jmp	#LR__0574
070f4                 | LR__0582
070f4                 | LR__0583
070f4                 | ' return true
070f4     01 FA 65 F6 | 	neg	result1, #1
070f8                 | LR__0584
070f8     A7 F0 03 F6 | 	mov	ptra, fp
070fc     B2 00 A0 FD | 	call	#popregs_
07100                 | _isint_ret
07100     2D 00 64 FD | 	ret
07104                 | 
07104                 | ' 
07104                 | ' ' Check if the part is a positive decimal number.  
07104                 | ' 
07104                 | ' function isdec(s as string) as boolean
07104                 | _isdec
07104     05 4A 05 F6 | 	mov	COUNT_, #5
07108     A8 00 A0 FD | 	call	#pushregs_
0710c     09 27 02 F6 | 	mov	local01, arg01
07110     09 29 02 F6 | 	mov	local02, arg01
07114     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
07118                 | LR__0590
07118     14 FB C9 FA | 	rdbyte	result1, local02 wz
0711c     01 28 06 51 |  if_ne	add	local02, #1
07120     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
07124                 | LR__0591
07124     09 29 82 F1 | 	sub	local02, arg01
07128     14 FB 01 F6 | 	mov	result1, local02
0712c     FD 28 0A F6 | 	mov	local02, result1 wz
07130     00 FA 05 A6 |  if_e	mov	result1, #0
07134     80 00 90 AD |  if_e	jmp	#LR__0596
07138                 | ' for i=1 to l
07138     01 2A 06 F6 | 	mov	local03, #1
0713c     14 2D 02 F6 | 	mov	local04, local02
07140     01 2C 06 F1 | 	add	local04, #1
07144                 | LR__0592
07144     16 2B 52 F2 | 	cmps	local03, local04 wc
07148     68 00 90 3D |  if_ae	jmp	#LR__0595
0714c     13 13 02 F6 | 	mov	arg01, local01
07150     15 15 02 F6 | 	mov	arg02, local03
07154     01 16 06 F6 | 	mov	arg03, #1
07158     98 2B B2 FD | 	call	#__system__Mid_S
0715c     FD 2E 02 F6 | 	mov	local05, result1
07160                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
07160     BE 01 00 FF 
07164     9D 15 06 F6 | 	mov	arg02, ##@LR__5952
07168     17 13 02 F6 | 	mov	arg01, local05
0716c     14 0A B2 FD | 	call	#__system___string_cmp
07170     00 FA 55 F2 | 	cmps	result1, #0 wc
07174     18 00 90 CD |  if_b	jmp	#LR__0593
07178     BE 01 00 FF 
0717c     9F 15 06 F6 | 	mov	arg02, ##@LR__5953
07180     17 13 02 F6 | 	mov	arg01, local05
07184     FC 09 B2 FD | 	call	#__system___string_cmp
07188     01 FA 55 F2 | 	cmps	result1, #1 wc
0718c     1C 00 90 CD |  if_b	jmp	#LR__0594
07190                 | LR__0593
07190     BE 01 00 FF 
07194     A1 15 06 F6 | 	mov	arg02, ##@LR__5954
07198     17 13 02 F6 | 	mov	arg01, local05
0719c     E4 09 B2 FD | 	call	#__system___string_cmp
071a0     00 FA 0D F2 | 	cmp	result1, #0 wz
071a4     00 FA 05 56 |  if_ne	mov	result1, #0
071a8     0C 00 90 5D |  if_ne	jmp	#LR__0596
071ac                 | LR__0594
071ac     01 2A 06 F1 | 	add	local03, #1
071b0     90 FF 9F FD | 	jmp	#LR__0592
071b4                 | LR__0595
071b4                 | ' return true
071b4     01 FA 65 F6 | 	neg	result1, #1
071b8                 | LR__0596
071b8     A7 F0 03 F6 | 	mov	ptra, fp
071bc     B2 00 A0 FD | 	call	#popregs_
071c0                 | _isdec_ret
071c0     2D 00 64 FD | 	ret
071c4                 | 
071c4                 | ' 
071c4                 | ' ' Check if the part is a string.  
071c4                 | ' 
071c4                 | ' function isstring(s as string) as boolean
071c4                 | _isstring
071c4     01 4A 05 F6 | 	mov	COUNT_, #1
071c8     A8 00 A0 FD | 	call	#pushregs_
071cc                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
071cc     09 27 02 F6 | 	mov	local01, arg01
071d0     01 14 06 F6 | 	mov	arg02, #1
071d4     04 2A B2 FD | 	call	#__system__Left_S
071d8     FD 12 02 F6 | 	mov	arg01, result1
071dc     BE 01 00 FF 
071e0     A3 15 06 F6 | 	mov	arg02, ##@LR__5955
071e4     9C 09 B2 FD | 	call	#__system___string_cmp
071e8     00 FA 4D F2 | 	cmps	result1, #0 wz
071ec     28 00 90 5D |  if_ne	jmp	#LR__0600
071f0     13 13 02 F6 | 	mov	arg01, local01
071f4     01 14 06 F6 | 	mov	arg02, #1
071f8     68 2A B2 FD | 	call	#__system__Right_S
071fc     FD 12 02 F6 | 	mov	arg01, result1
07200     BE 01 00 FF 
07204     A5 15 06 F6 | 	mov	arg02, ##@LR__5956
07208     78 09 B2 FD | 	call	#__system___string_cmp
0720c     00 FA 4D F2 | 	cmps	result1, #0 wz
07210     01 FA 65 A6 |  if_e	neg	result1, #1
07214     04 00 90 AD |  if_e	jmp	#LR__0601
07218                 | LR__0600
07218     00 FA 05 F6 | 	mov	result1, #0
0721c                 | LR__0601
0721c     A7 F0 03 F6 | 	mov	ptra, fp
07220     B2 00 A0 FD | 	call	#popregs_
07224                 | _isstring_ret
07224     2D 00 64 FD | 	ret
07228                 | 
07228                 | ' 
07228                 | ' ' getnoteval. Returns the frequency of note token
07228                 | ' 
07228                 | ' function getnoteval(token) as single
07228                 | _getnoteval
07228     02 4A 05 F6 | 	mov	COUNT_, #2
0722c     A8 00 A0 FD | 	call	#pushregs_
07230     01 00 00 FF 
07234     00 13 86 F1 | 	sub	arg01, ##768
07238     09 15 52 F6 | 	abs	arg02, arg01 wc
0723c     0C 14 16 FD | 	qdiv	arg02, #12
07240     14 00 00 FF 
07244     D8 E4 05 F1 | 	add	objptr, ##10456
07248     19 14 62 FD | 	getqy	arg02
0724c     0A 15 82 F6 | 	negc	arg02, arg02
07250     02 14 66 F0 | 	shl	arg02, #2
07254     F2 14 02 F1 | 	add	arg02, objptr
07258     0A 27 02 FB | 	rdlong	local01, arg02
0725c     09 15 52 F6 | 	abs	arg02, arg01 wc
07260     0C 14 16 FD | 	qdiv	arg02, #12
07264     14 00 00 FF 
07268     D8 E4 85 F1 | 	sub	objptr, ##10456
0726c     01 12 06 F6 | 	mov	arg01, #1
07270                 | ' noteexp=1+(note/12) 
07270                 | ' return (2.0^noteexp)*notebase
07270     18 14 62 FD | 	getqx	arg02
07274     0A 13 82 F3 | 	sumc	arg01, arg02
07278     09 13 52 F6 | 	abs	arg01, arg01 wc
0727c     1F 28 C6 C9 |  if_b	decod	local02, #31
07280     00 28 06 36 |  if_ae	mov	local02, #0
07284     4C 33 B2 FD | 	call	#__system___float_fromuns
07288     14 FB 61 F5 | 	xor	result1, local02
0728c     FD 14 02 F6 | 	mov	arg02, result1
07290     1E 12 C6 F9 | 	decod	arg01, #30
07294     4C 46 B2 FD | 	call	#__system____builtin_powf
07298     FD 12 02 F6 | 	mov	arg01, result1
0729c     13 15 02 F6 | 	mov	arg02, local01
072a0     34 37 B2 FD | 	call	#__system___float_mul
072a4     A7 F0 03 F6 | 	mov	ptra, fp
072a8     B2 00 A0 FD | 	call	#popregs_
072ac                 | _getnoteval_ret
072ac     2D 00 64 FD | 	ret
072b0                 | 
072b0                 | ' 
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' 
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' '
072b0                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
072b0                 | ' '
072b0                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
072b0                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
072b0                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
072b0                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
072b0                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
072b0                 | ' ' 
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' 
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' ' Helper functions to manage program lines
072b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072b0                 | ' 
072b0                 | ' '----- delete a line from a program
072b0                 | ' 
072b0                 | ' function deleteline(aline as ulong) as integer
072b0                 | _deleteline
072b0     02 4A 05 F6 | 	mov	COUNT_, #2
072b4     A8 00 A0 FD | 	call	#pushregs_
072b8     2C F0 07 F1 | 	add	ptra, #44
072bc     04 4E 05 F1 | 	add	fp, #4
072c0     A7 12 62 FC | 	wrlong	arg01, fp
072c4     4A 00 00 FF 
072c8     88 E4 05 F1 | 	add	objptr, ##38024
072cc     F2 26 02 FB | 	rdlong	local01, objptr
072d0     0C 4E 05 F1 | 	add	fp, #12
072d4     A7 26 62 FC | 	wrlong	local01, fp
072d8     10 4E 85 F1 | 	sub	fp, #16
072dc                 | ' 
072dc                 | ' searchptr=programstart
072dc                 | ' do
072dc     3E 00 00 FF 
072e0     BC E5 85 F1 | 	sub	objptr, ##32188
072e4                 | LR__0610
072e4     14 4E 05 F1 | 	add	fp, #20
072e8     A7 12 02 F6 | 	mov	arg01, fp
072ec     04 4E 85 F1 | 	sub	fp, #4
072f0     A7 14 02 FB | 	rdlong	arg02, fp
072f4     10 4E 85 F1 | 	sub	fp, #16
072f8     18 16 06 F6 | 	mov	arg03, #24
072fc     B8 FB B1 FD | 	call	#_psram_spin2_read1
07300     10 4E 05 F1 | 	add	fp, #16
07304     A7 26 02 FB | 	rdlong	local01, fp
07308     08 4E 85 F1 | 	sub	fp, #8
0730c     A7 26 62 FC | 	wrlong	local01, fp
07310     20 4E 05 F1 | 	add	fp, #32
07314     A7 26 02 FB | 	rdlong	local01, fp
07318     18 4E 85 F1 | 	sub	fp, #24
0731c     A7 26 62 FC | 	wrlong	local01, fp
07320     04 4E 05 F1 | 	add	fp, #4
07324     A7 26 02 FB | 	rdlong	local01, fp
07328     10 4E 85 F1 | 	sub	fp, #16
0732c     A7 16 02 FB | 	rdlong	arg03, fp
07330     04 4E 85 F1 | 	sub	fp, #4
07334     0B 27 12 F2 | 	cmp	local01, arg03 wc
07338     28 4E 05 C1 |  if_b	add	fp, #40
0733c     A7 28 02 CB |  if_b	rdlong	local02, fp
07340     28 4E 85 C1 |  if_b	sub	fp, #40
07344     FF FF 3F CF 
07348     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0734c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0610
07350     0B 00 00 FF 
07354     CC E4 85 F1 | 	sub	objptr, ##5836
07358                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07358     14 4E 05 F1 | 	add	fp, #20
0735c     A7 26 02 FB | 	rdlong	local01, fp
07360     10 4E 85 F1 | 	sub	fp, #16
07364     A7 28 02 FB | 	rdlong	local02, fp
07368     04 4E 85 F1 | 	sub	fp, #4
0736c     14 27 0A F2 | 	cmp	local01, local02 wz
07370     01 FA 65 56 |  if_ne	neg	result1, #1
07374     34 02 90 5D |  if_ne	jmp	#LR__0615
07378     08 4E 05 F1 | 	add	fp, #8
0737c     A7 12 02 FB | 	rdlong	arg01, fp
07380     08 4E 85 F1 | 	sub	fp, #8
07384     01 14 66 F6 | 	neg	arg02, #1
07388     10 CF B1 FD | 	call	#_pslpoke
0738c                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
0738c                 | ' 
0738c                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
0738c     28 4E 05 F1 | 	add	fp, #40
07390     A7 26 02 FB | 	rdlong	local01, fp
07394     28 4E 85 F1 | 	sub	fp, #40
07398     FF FF 3F FF 
0739c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
073a0     24 4E 05 A1 |  if_e	add	fp, #36
073a4     A7 28 02 AB |  if_e	rdlong	local02, fp
073a8     24 4E 85 A1 |  if_e	sub	fp, #36
073ac     FF FF 7F AF 
073b0     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
073b4     88 00 90 5D |  if_ne	jmp	#LR__0611
073b8     4A 00 00 FF 
073bc     88 E4 05 F1 | 	add	objptr, ##38024
073c0     00 04 80 FF 
073c4     F2 00 68 FC | 	wrlong	##524288, objptr
073c8     07 00 00 FF 
073cc     2C E4 85 F1 | 	sub	objptr, ##3628
073d0     00 04 80 FF 
073d4     F2 00 68 FC | 	wrlong	##524288, objptr
073d8     07 00 00 FF 
073dc     30 E4 05 F1 | 	add	objptr, ##3632
073e0     F2 00 68 FC | 	wrlong	#0, objptr
073e4     04 E4 05 F1 | 	add	objptr, #4
073e8     FF FF FF FF 
073ec     F2 FE 6B FC | 	wrlong	##-1, objptr
073f0     4A 00 00 FF 
073f4     90 E4 85 F1 | 	sub	objptr, ##38032
073f8     00 12 06 F6 | 	mov	arg01, #0
073fc     01 14 66 F6 | 	neg	arg02, #1
07400     98 CE B1 FD | 	call	#_pslpoke
07404     10 12 06 F6 | 	mov	arg01, #16
07408     01 14 66 F6 | 	neg	arg02, #1
0740c     8C CE B1 FD | 	call	#_pslpoke
07410     14 12 06 F6 | 	mov	arg01, #20
07414     1E 14 CE F9 | 	bmask	arg02, #30
07418     80 CE B1 FD | 	call	#_pslpoke
0741c     50 00 00 FF 
07420     B8 E4 05 F1 | 	add	objptr, ##41144
07424     00 04 80 FF 
07428     F2 00 68 FC | 	wrlong	##524288, objptr
0742c     04 E4 05 F1 | 	add	objptr, #4
07430     00 04 80 FF 
07434     F2 00 68 FC | 	wrlong	##524288, objptr
07438     50 00 00 FF 
0743c     BC E4 85 F1 | 	sub	objptr, ##41148
07440                 | LR__0611
07440                 | ' 
07440                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
07440     28 4E 05 F1 | 	add	fp, #40
07444     A7 26 02 FB | 	rdlong	local01, fp
07448     28 4E 85 F1 | 	sub	fp, #40
0744c     FF FF 3F FF 
07450     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07454     74 00 90 5D |  if_ne	jmp	#LR__0612
07458     24 4E 05 F1 | 	add	fp, #36
0745c     A7 28 02 FB | 	rdlong	local02, fp
07460     24 4E 85 F1 | 	sub	fp, #36
07464     FF FF 7F FF 
07468     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0746c     5C 00 90 AD |  if_e	jmp	#LR__0612
07470     24 4E 05 F1 | 	add	fp, #36
07474     A7 12 02 FB | 	rdlong	arg01, fp
07478     24 4E 85 F1 | 	sub	fp, #36
0747c     14 12 06 F1 | 	add	arg01, #20
07480     1E 14 CE F9 | 	bmask	arg02, #30
07484     14 CE B1 FD | 	call	#_pslpoke
07488     24 4E 05 F1 | 	add	fp, #36
0748c     A7 26 02 FB | 	rdlong	local01, fp
07490     4A 00 00 FF 
07494     90 E4 05 F1 | 	add	objptr, ##38032
07498     F2 26 62 FC | 	wrlong	local01, objptr
0749c     4A 00 00 FF 
074a0     90 E4 85 F1 | 	sub	objptr, ##38032
074a4     A7 12 02 FB | 	rdlong	arg01, fp
074a8     24 4E 85 F1 | 	sub	fp, #36
074ac     1C CF B1 FD | 	call	#_pslpeek
074b0     4A 00 00 FF 
074b4     8C E4 05 F1 | 	add	objptr, ##38028
074b8     F2 FA 61 FC | 	wrlong	result1, objptr
074bc     4A 00 00 FF 
074c0     8C E4 85 F1 | 	sub	objptr, ##38028
074c4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
074c4                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
074c4                 | '   lastline=pslpeek(header(4))
074c4                 | '   return 0
074c4     00 FA 05 F6 | 	mov	result1, #0
074c8     E0 00 90 FD | 	jmp	#LR__0615
074cc                 | LR__0612
074cc                 | ' 
074cc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
074cc     28 4E 05 F1 | 	add	fp, #40
074d0     A7 26 02 FB | 	rdlong	local01, fp
074d4     28 4E 85 F1 | 	sub	fp, #40
074d8     FF FF 3F FF 
074dc     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
074e0     58 00 90 AD |  if_e	jmp	#LR__0613
074e4     24 4E 05 F1 | 	add	fp, #36
074e8     A7 28 02 FB | 	rdlong	local02, fp
074ec     24 4E 85 F1 | 	sub	fp, #36
074f0     FF FF 7F FF 
074f4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
074f8     40 00 90 5D |  if_ne	jmp	#LR__0613
074fc     28 4E 05 F1 | 	add	fp, #40
07500     A7 12 02 FB | 	rdlong	arg01, fp
07504     28 4E 85 F1 | 	sub	fp, #40
07508     10 12 06 F1 | 	add	arg01, #16
0750c     01 14 66 F6 | 	neg	arg02, #1
07510     88 CD B1 FD | 	call	#_pslpoke
07514     28 4E 05 F1 | 	add	fp, #40
07518     A7 26 02 FB | 	rdlong	local01, fp
0751c     28 4E 85 F1 | 	sub	fp, #40
07520     4A 00 00 FF 
07524     88 E4 05 F1 | 	add	objptr, ##38024
07528     F2 26 62 FC | 	wrlong	local01, objptr
0752c     4A 00 00 FF 
07530     88 E4 85 F1 | 	sub	objptr, ##38024
07534                 | ' '   print "deleted first line"
07534                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
07534                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
07534                 | '   return 0
07534     00 FA 05 F6 | 	mov	result1, #0
07538     70 00 90 FD | 	jmp	#LR__0615
0753c                 | LR__0613
0753c                 | ' 
0753c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
0753c     28 4E 05 F1 | 	add	fp, #40
07540     A7 26 02 FB | 	rdlong	local01, fp
07544     28 4E 85 F1 | 	sub	fp, #40
07548     FF FF 3F FF 
0754c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07550     24 4E 05 51 |  if_ne	add	fp, #36
07554     A7 28 02 5B |  if_ne	rdlong	local02, fp
07558     24 4E 85 51 |  if_ne	sub	fp, #36
0755c     FF FF 7F 5F 
07560     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
07564     40 00 90 AD |  if_e	jmp	#LR__0614
07568     28 4E 05 F1 | 	add	fp, #40
0756c     A7 12 02 FB | 	rdlong	arg01, fp
07570     10 12 06 F1 | 	add	arg01, #16
07574     04 4E 85 F1 | 	sub	fp, #4
07578     A7 14 02 FB | 	rdlong	arg02, fp
0757c     24 4E 85 F1 | 	sub	fp, #36
07580     18 CD B1 FD | 	call	#_pslpoke
07584     24 4E 05 F1 | 	add	fp, #36
07588     A7 12 02 FB | 	rdlong	arg01, fp
0758c     14 12 06 F1 | 	add	arg01, #20
07590     04 4E 05 F1 | 	add	fp, #4
07594     A7 14 02 FB | 	rdlong	arg02, fp
07598     28 4E 85 F1 | 	sub	fp, #40
0759c     FC CC B1 FD | 	call	#_pslpoke
075a0                 | '    pslpoke(header(5)+16,header(4))  
075a0                 | '    pslpoke(header(4)+20, header(5))
075a0                 | '    return 0
075a0     00 FA 05 F6 | 	mov	result1, #0
075a4     04 00 90 FD | 	jmp	#LR__0615
075a8                 | LR__0614
075a8     00 FA 05 F6 | 	mov	result1, #0
075ac                 | LR__0615
075ac     A7 F0 03 F6 | 	mov	ptra, fp
075b0     B2 00 A0 FD | 	call	#popregs_
075b4                 | _deleteline_ret
075b4     2D 00 64 FD | 	ret
075b8                 | 
075b8                 | ' 
075b8                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
075b8                 | ' 
075b8                 | ' sub save_line
075b8                 | _save_line
075b8     03 4A 05 F6 | 	mov	COUNT_, #3
075bc     A8 00 A0 FD | 	call	#pushregs_
075c0     4A 00 00 FF 
075c4     7C E4 05 F1 | 	add	objptr, ##38012
075c8     F2 16 02 FB | 	rdlong	arg03, objptr
075cc     01 16 06 F1 | 	add	arg03, #1
075d0     05 00 00 FF 
075d4     18 E4 85 F1 | 	sub	objptr, ##2584
075d8     F2 14 02 FB | 	rdlong	arg02, objptr
075dc     0B 15 02 FD | 	qmul	arg02, arg03
075e0     0E 00 00 FF 
075e4     44 E4 85 F1 | 	sub	objptr, ##7236
075e8     F2 12 02 FB | 	rdlong	arg01, objptr
075ec     37 00 00 FF 
075f0     20 E4 85 F1 | 	sub	objptr, ##28192
075f4     09 27 02 F6 | 	mov	local01, arg01
075f8     18 28 62 FD | 	getqx	local02
075fc     97 06 48 FB | 	callpa	#(@LR__0621-@LR__0620)>>2,fcache_load_ptr_
07600                 | LR__0620
07600     13 FB C9 FA | 	rdbyte	result1, local01 wz
07604     01 26 06 51 |  if_ne	add	local01, #1
07608     F4 FF 9F 5D |  if_ne	jmp	#LR__0620
0760c                 | LR__0621
0760c     09 27 82 F1 | 	sub	local01, arg01
07610     03 26 CE F7 | 	test	local01, #3 wz
07614     02 26 46 50 |  if_ne	shr	local01, #2
07618     01 26 06 51 |  if_ne	add	local01, #1
0761c     02 26 66 50 |  if_ne	shl	local01, #2
07620     14 2B 02 F6 | 	mov	local03, local02
07624     13 2B 02 F1 | 	add	local03, local01
07628     43 00 00 FF 
0762c     5C E4 05 F1 | 	add	objptr, ##34396
07630     F2 16 02 FB | 	rdlong	arg03, objptr
07634     14 17 02 F1 | 	add	arg03, local02
07638     04 00 00 FF 
0763c     28 E4 05 F1 | 	add	objptr, ##2088
07640     F2 16 62 FC | 	wrlong	arg03, objptr
07644     04 E4 05 F1 | 	add	objptr, #4
07648     F2 26 62 FC | 	wrlong	local01, objptr
0764c     0C E4 85 F1 | 	sub	objptr, #12
07650     F2 12 02 F6 | 	mov	arg01, objptr
07654     04 00 00 FF 
07658     20 E4 85 F1 | 	sub	objptr, ##2080
0765c     F2 14 02 FB | 	rdlong	arg02, objptr
07660     14 17 02 F6 | 	mov	arg03, local02
07664     37 00 00 FF 
07668     90 E5 85 F1 | 	sub	objptr, ##28560
0766c     E4 F8 B1 FD | 	call	#_psram_spin2_write
07670     2B 00 00 FF 
07674     54 E5 05 F1 | 	add	objptr, ##22356
07678     F2 12 02 FB | 	rdlong	arg01, objptr
0767c     0C 00 00 FF 
07680     3C E4 05 F1 | 	add	objptr, ##6204
07684     F2 14 02 FB | 	rdlong	arg02, objptr
07688     14 15 02 F1 | 	add	arg02, local02
0768c     13 17 02 F6 | 	mov	arg03, local01
07690     37 00 00 FF 
07694     90 E5 85 F1 | 	sub	objptr, ##28560
07698     B8 F8 B1 FD | 	call	#_psram_spin2_write
0769c     37 00 00 FF 
076a0     90 E5 05 F1 | 	add	objptr, ##28560
076a4     F2 26 02 FB | 	rdlong	local01, objptr
076a8     15 27 02 F1 | 	add	local01, local03
076ac     F2 26 62 FC | 	wrlong	local01, objptr
076b0     43 00 00 FF 
076b4     5C E4 85 F1 | 	sub	objptr, ##34396
076b8     A7 F0 03 F6 | 	mov	ptra, fp
076bc     B2 00 A0 FD | 	call	#popregs_
076c0                 | _save_line_ret
076c0     2D 00 64 FD | 	ret
076c4                 | 
076c4                 | ' 
076c4                 | ' '----- Insert a new line into the middle of the program
076c4                 | ' 
076c4                 | ' function insertline(aline as ulong) as integer
076c4                 | _insertline
076c4     02 4A 05 F6 | 	mov	COUNT_, #2
076c8     A8 00 A0 FD | 	call	#pushregs_
076cc     28 F0 07 F1 | 	add	ptra, #40
076d0     04 4E 05 F1 | 	add	fp, #4
076d4     A7 12 62 FC | 	wrlong	arg01, fp
076d8     4A 00 00 FF 
076dc     88 E4 05 F1 | 	add	objptr, ##38024
076e0     F2 26 02 FB | 	rdlong	local01, objptr
076e4     04 4E 05 F1 | 	add	fp, #4
076e8     A7 26 62 FC | 	wrlong	local01, fp
076ec     08 4E 85 F1 | 	sub	fp, #8
076f0                 | ' 
076f0                 | ' do
076f0     3E 00 00 FF 
076f4     BC E5 85 F1 | 	sub	objptr, ##32188
076f8                 | LR__0630
076f8     10 4E 05 F1 | 	add	fp, #16
076fc     A7 12 02 F6 | 	mov	arg01, fp
07700     08 4E 85 F1 | 	sub	fp, #8
07704     A7 14 02 FB | 	rdlong	arg02, fp
07708     08 4E 85 F1 | 	sub	fp, #8
0770c     18 16 06 F6 | 	mov	arg03, #24
07710     A4 F7 B1 FD | 	call	#_psram_spin2_read1
07714     08 4E 05 F1 | 	add	fp, #8
07718     A7 26 02 FB | 	rdlong	local01, fp
0771c     04 4E 05 F1 | 	add	fp, #4
07720     A7 26 62 FC | 	wrlong	local01, fp
07724     18 4E 05 F1 | 	add	fp, #24
07728     A7 26 02 FB | 	rdlong	local01, fp
0772c     1C 4E 85 F1 | 	sub	fp, #28
07730     A7 26 62 FC | 	wrlong	local01, fp
07734     08 4E 05 F1 | 	add	fp, #8
07738     A7 26 02 FB | 	rdlong	local01, fp
0773c     0C 4E 85 F1 | 	sub	fp, #12
07740     A7 16 02 FB | 	rdlong	arg03, fp
07744     04 4E 85 F1 | 	sub	fp, #4
07748     0B 27 12 F2 | 	cmp	local01, arg03 wc
0774c     24 4E 05 C1 |  if_b	add	fp, #36
07750     A7 28 02 CB |  if_b	rdlong	local02, fp
07754     24 4E 85 C1 |  if_b	sub	fp, #36
07758     FF FF 3F CF 
0775c     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07760     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0630
07764     0B 00 00 FF 
07768     CC E4 85 F1 | 	sub	objptr, ##5836
0776c                 | ' 
0776c                 | ' if header(0)=aline then return -1 				' delete it first
0776c     10 4E 05 F1 | 	add	fp, #16
07770     A7 26 02 FB | 	rdlong	local01, fp
07774     0C 4E 85 F1 | 	sub	fp, #12
07778     A7 28 02 FB | 	rdlong	local02, fp
0777c     04 4E 85 F1 | 	sub	fp, #4
07780     14 27 0A F2 | 	cmp	local01, local02 wz
07784     01 FA 65 A6 |  if_e	neg	result1, #1
07788     48 01 90 AD |  if_e	jmp	#LR__0633
0778c                 | ' if header(0)<aline then return -2 				' end of program reached
0778c     10 4E 05 F1 | 	add	fp, #16
07790     A7 26 02 FB | 	rdlong	local01, fp
07794     0C 4E 85 F1 | 	sub	fp, #12
07798     A7 16 02 FB | 	rdlong	arg03, fp
0779c     04 4E 85 F1 | 	sub	fp, #4
077a0     0B 27 12 F2 | 	cmp	local01, arg03 wc
077a4     02 FA 65 C6 |  if_b	neg	result1, #2
077a8     28 01 90 CD |  if_b	jmp	#LR__0633
077ac                 | ' 
077ac                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
077ac     20 4E 05 F1 | 	add	fp, #32
077b0     A7 26 02 FB | 	rdlong	local01, fp
077b4     20 4E 85 F1 | 	sub	fp, #32
077b8     FF FF 7F FF 
077bc     FF 27 0E F2 | 	cmp	local01, ##-1 wz
077c0     78 00 90 5D |  if_ne	jmp	#LR__0631
077c4     43 00 00 FF 
077c8     5C E4 05 F1 | 	add	objptr, ##34396
077cc     F2 26 02 FB | 	rdlong	local01, objptr
077d0     07 00 00 FF 
077d4     2C E4 05 F1 | 	add	objptr, ##3628
077d8     F2 26 62 FC | 	wrlong	local01, objptr
077dc     0C 4E 05 F1 | 	add	fp, #12
077e0     A7 12 02 FB | 	rdlong	arg01, fp
077e4     0C 4E 85 F1 | 	sub	fp, #12
077e8     10 12 06 F1 | 	add	arg01, #16
077ec     07 00 00 FF 
077f0     2C E4 85 F1 | 	sub	objptr, ##3628
077f4     F2 14 02 FB | 	rdlong	arg02, objptr
077f8     43 00 00 FF 
077fc     5C E4 85 F1 | 	sub	objptr, ##34396
07800     98 CA B1 FD | 	call	#_pslpoke
07804     47 00 00 FF 
07808     8C E4 05 F1 | 	add	objptr, ##36492
0780c     FF FF FF FF 
07810     F2 FE 6B FC | 	wrlong	##-1, objptr
07814     0C 4E 05 F1 | 	add	fp, #12
07818     A7 26 02 FB | 	rdlong	local01, fp
0781c     0C 4E 85 F1 | 	sub	fp, #12
07820     04 E4 05 F1 | 	add	objptr, #4
07824     F2 26 62 FC | 	wrlong	local01, objptr
07828     47 00 00 FF 
0782c     90 E4 85 F1 | 	sub	objptr, ##36496
07830     84 FD BF FD | 	call	#_save_line
07834                 | '   programstart=programptr
07834                 | '   pslpoke(lineptr2+16,programptr)
07834                 | '   ucompiledline(4)=$FFFF_FFFF
07834                 | '   ucompiledline(5)=lineptr2
07834                 | '   save_line
07834                 | '   return 0
07834     00 FA 05 F6 | 	mov	result1, #0
07838     98 00 90 FD | 	jmp	#LR__0633
0783c                 | LR__0631
0783c                 | ' 
0783c                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
0783c     20 4E 05 F1 | 	add	fp, #32
07840     A7 26 02 FB | 	rdlong	local01, fp
07844     20 4E 85 F1 | 	sub	fp, #32
07848     FF FF 7F FF 
0784c     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07850     7C 00 90 AD |  if_e	jmp	#LR__0632
07854     20 4E 05 F1 | 	add	fp, #32
07858     A7 26 02 FB | 	rdlong	local01, fp
0785c     47 00 00 FF 
07860     8C E4 05 F1 | 	add	objptr, ##36492
07864     F2 26 62 FC | 	wrlong	local01, objptr
07868     14 4E 85 F1 | 	sub	fp, #20
0786c     A7 26 02 FB | 	rdlong	local01, fp
07870     04 E4 05 F1 | 	add	objptr, #4
07874     F2 26 62 FC | 	wrlong	local01, objptr
07878     A7 12 02 FB | 	rdlong	arg01, fp
0787c     0C 4E 85 F1 | 	sub	fp, #12
07880     10 12 06 F1 | 	add	arg01, #16
07884     04 00 00 FF 
07888     34 E4 85 F1 | 	sub	objptr, ##2100
0788c     F2 14 02 FB | 	rdlong	arg02, objptr
07890     43 00 00 FF 
07894     5C E4 85 F1 | 	sub	objptr, ##34396
07898     00 CA B1 FD | 	call	#_pslpoke
0789c     20 4E 05 F1 | 	add	fp, #32
078a0     A7 12 02 FB | 	rdlong	arg01, fp
078a4     20 4E 85 F1 | 	sub	fp, #32
078a8     14 12 06 F1 | 	add	arg01, #20
078ac     43 00 00 FF 
078b0     5C E4 05 F1 | 	add	objptr, ##34396
078b4     F2 14 02 FB | 	rdlong	arg02, objptr
078b8     43 00 00 FF 
078bc     5C E4 85 F1 | 	sub	objptr, ##34396
078c0     D8 C9 B1 FD | 	call	#_pslpoke
078c4     F0 FC BF FD | 	call	#_save_line
078c8                 | '   ucompiledline(4)=header(4)
078c8                 | '   ucompiledline(5)=lineptr2
078c8                 | '   pslpoke(lineptr2+16,programptr)
078c8                 | '   pslpoke(header(4)+20,programptr)
078c8                 | '   save_line
078c8                 | '   return 0
078c8     00 FA 05 F6 | 	mov	result1, #0
078cc     04 00 90 FD | 	jmp	#LR__0633
078d0                 | LR__0632
078d0     00 FA 05 F6 | 	mov	result1, #0
078d4                 | LR__0633
078d4     A7 F0 03 F6 | 	mov	ptra, fp
078d8     B2 00 A0 FD | 	call	#popregs_
078dc                 | _insertline_ret
078dc     2D 00 64 FD | 	ret
078e0                 | 
078e0                 | ' 
078e0                 | ' '----- Adds a new line at the end of the program
078e0                 | ' 
078e0                 | ' sub add_line_at_end(aline) 
078e0                 | _add_line_at_end
078e0     4A 00 00 FF 
078e4     8C E4 05 F1 | 	add	objptr, ##38028
078e8     F2 12 62 FC | 	wrlong	arg01, objptr
078ec     04 E4 05 F1 | 	add	objptr, #4
078f0     F2 14 02 FB | 	rdlong	arg02, objptr
078f4     03 00 00 FF 
078f8     04 E4 85 F1 | 	sub	objptr, ##1540
078fc     F2 14 62 FC | 	wrlong	arg02, objptr
07900     03 00 00 FF 
07904     04 E4 05 F1 | 	add	objptr, ##1540
07908     F2 12 02 FB | 	rdlong	arg01, objptr
0790c     14 12 06 F1 | 	add	arg01, #20
07910     07 00 00 FF 
07914     34 E4 85 F1 | 	sub	objptr, ##3636
07918     F2 14 02 FB | 	rdlong	arg02, objptr
0791c     43 00 00 FF 
07920     5C E4 85 F1 | 	sub	objptr, ##34396
07924     74 C9 B1 FD | 	call	#_pslpoke
07928     43 00 00 FF 
0792c     5C E4 05 F1 | 	add	objptr, ##34396
07930     F2 14 02 FB | 	rdlong	arg02, objptr
07934     07 00 00 FF 
07938     34 E4 05 F1 | 	add	objptr, ##3636
0793c     F2 14 62 FC | 	wrlong	arg02, objptr
07940     03 00 00 FF 
07944     00 E4 85 F1 | 	sub	objptr, ##1536
07948     FF FF BF FF 
0794c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07950                 | ' 
07950                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07950                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07950     04 00 00 FF 
07954     34 E4 85 F1 | 	sub	objptr, ##2100
07958     F2 14 02 FB | 	rdlong	arg02, objptr
0795c     43 00 00 FF 
07960     5C E4 85 F1 | 	sub	objptr, ##34396
07964     00 04 00 FF 
07968     00 14 0E F2 | 	cmp	arg02, ##524288 wz
0796c     47 00 00 AF 
07970     8C E4 05 A1 |  if_e	add	objptr, ##36492
07974     FF FF FF AF 
07978     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
0797c     47 00 00 AF 
07980     8C E4 85 A1 |  if_e	sub	objptr, ##36492
07984     30 FC BF FD | 	call	#_save_line
07988     43 00 00 FF 
0798c     5C E4 05 F1 | 	add	objptr, ##34396
07990     F2 12 02 FB | 	rdlong	arg01, objptr
07994     43 00 00 FF 
07998     5C E4 85 F1 | 	sub	objptr, ##34396
0799c     01 14 66 F6 | 	neg	arg02, #1
079a0     F8 C8 B1 FD | 	call	#_pslpoke
079a4                 | _add_line_at_end_ret
079a4     2D 00 64 FD | 	ret
079a8                 | 
079a8                 | ' 
079a8                 | ' '--------------------------------------------------------------------------------------------------------------------------
079a8                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
079a8                 | ' '--------------------------------------------------------------------------------------------------------------------------
079a8                 | ' 
079a8                 | ' '--------------------------------------------------------------------------------------------------------------------------
079a8                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
079a8                 | ' '--------------------------------------------------------------------------------------------------------------------------
079a8                 | ' 
079a8                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
079a8                 | ' 
079a8                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
079a8                 | _compile_immediate
079a8     0A 4A 05 F6 | 	mov	COUNT_, #10
079ac     A8 00 A0 FD | 	call	#pushregs_
079b0                 | _compile_immediate_enter
079b0     09 2D 02 F6 | 	mov	local04, arg01
079b4     0A 2F 02 F6 | 	mov	local05, arg02
079b8     00 30 06 F6 | 	mov	local06, #0
079bc     00 32 06 F6 | 	mov	local07, #0
079c0     00 34 06 F6 | 	mov	local08, #0
079c4                 | ' 
079c4                 | ' ' linetype=cont+1
079c4                 | ' ' 1 : this is the first part of the line that will continue
079c4                 | ' ' 2 - this is the continuation of the line
079c4                 | ' ' 3 - this is the last continued line
079c4                 | ' ' 4 - this is the one and only part
079c4                 | ' ' 5 - continued after if/else
079c4                 | ' 
079c4                 | ' err=0
079c4                 | ' cmd=0
079c4                 | ' vars=0
079c4                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
079c4     02 2C 0E F2 | 	cmp	local04, #2 wz
079c8     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
079cc     24 00 90 5D |  if_ne	jmp	#LR__0640
079d0     35 00 00 FF 
079d4     10 E4 05 F1 | 	add	objptr, ##27152
079d8     F2 32 02 FB | 	rdlong	local07, objptr
079dc     01 36 06 F6 | 	mov	local09, #1
079e0     02 00 00 FF 
079e4     34 E4 05 F1 | 	add	objptr, ##1076
079e8     F2 02 68 FC | 	wrlong	#1, objptr
079ec     37 00 00 FF 
079f0     44 E4 85 F1 | 	sub	objptr, ##28228
079f4                 | LR__0640
079f4                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
079f4     04 2C 0E F2 | 	cmp	local04, #4 wz
079f8     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
079fc     30 00 90 5D |  if_ne	jmp	#LR__0641
07a00     35 00 00 FF 
07a04     18 E4 05 F1 | 	add	objptr, ##27160
07a08     F2 32 02 FB | 	rdlong	local07, objptr
07a0c     02 36 06 F6 | 	mov	local09, #2
07a10     02 00 00 FF 
07a14     2C E4 05 F1 | 	add	objptr, ##1068
07a18     F2 04 68 FC | 	wrlong	#2, objptr
07a1c     13 00 00 FF 
07a20     38 E4 05 F1 | 	add	objptr, ##9784
07a24     F2 04 68 FC | 	wrlong	#2, objptr
07a28     4A 00 00 FF 
07a2c     7C E4 85 F1 | 	sub	objptr, ##38012
07a30                 | LR__0641
07a30                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07a30     05 2C 0E F2 | 	cmp	local04, #5 wz
07a34     40 00 90 5D |  if_ne	jmp	#LR__0642
07a38     37 00 00 FF 
07a3c     44 E4 05 F1 | 	add	objptr, ##28228
07a40     F2 FC 01 FB | 	rdlong	result2, objptr
07a44     FE 36 02 F6 | 	mov	local09, result2
07a48     03 36 66 F0 | 	shl	local09, #3
07a4c     02 00 00 FF 
07a50     38 E4 85 F1 | 	sub	objptr, ##1080
07a54     F2 36 02 F1 | 	add	local09, objptr
07a58     04 36 06 F1 | 	add	local09, #4
07a5c     1B 33 02 FB | 	rdlong	local07, local09
07a60     01 FC 05 F1 | 	add	result2, #1
07a64     02 00 00 FF 
07a68     38 E4 05 F1 | 	add	objptr, ##1080
07a6c     F2 FC 61 FC | 	wrlong	result2, objptr
07a70     37 00 00 FF 
07a74     44 E4 85 F1 | 	sub	objptr, ##28228
07a78                 | LR__0642
07a78                 | ' 
07a78                 | ' 'print  "In compile_immediate cmd=:", cmd
07a78                 | ' 451 select case cmd
07a78     5C 32 0E F2 | 	cmp	local07, #92 wz
07a7c     E0 02 90 AD |  if_e	jmp	#LR__0643
07a80     B9 32 0E F2 | 	cmp	local07, #185 wz
07a84     E4 02 90 AD |  if_e	jmp	#LR__0644
07a88     47 32 0E F2 | 	cmp	local07, #71 wz
07a8c     EC 02 90 AD |  if_e	jmp	#LR__0645
07a90     59 32 0E F2 | 	cmp	local07, #89 wz
07a94     F4 02 90 AD |  if_e	jmp	#LR__0646
07a98     C3 32 0E F2 | 	cmp	local07, #195 wz
07a9c     FC 02 90 AD |  if_e	jmp	#LR__0647
07aa0     45 32 0E F2 | 	cmp	local07, #69 wz
07aa4     00 03 90 AD |  if_e	jmp	#LR__0648
07aa8     69 32 0E F2 | 	cmp	local07, #105 wz
07aac     08 03 90 AD |  if_e	jmp	#LR__0649
07ab0     40 32 0E F2 | 	cmp	local07, #64 wz
07ab4     04 07 90 AD |  if_e	jmp	#LR__0725
07ab8     B4 32 0E F2 | 	cmp	local07, #180 wz
07abc     04 03 90 AD |  if_e	jmp	#LR__0650
07ac0     49 32 0E F2 | 	cmp	local07, #73 wz
07ac4     08 03 90 AD |  if_e	jmp	#LR__0651
07ac8     C4 32 0E F2 | 	cmp	local07, #196 wz
07acc     0C 03 90 AD |  if_e	jmp	#LR__0652
07ad0     AE 32 0E F2 | 	cmp	local07, #174 wz
07ad4     10 03 90 AD |  if_e	jmp	#LR__0653
07ad8     B0 32 0E F2 | 	cmp	local07, #176 wz
07adc     14 03 90 AD |  if_e	jmp	#LR__0654
07ae0     AF 32 0E F2 | 	cmp	local07, #175 wz
07ae4     18 03 90 AD |  if_e	jmp	#LR__0655
07ae8     B1 32 0E F2 | 	cmp	local07, #177 wz
07aec     1C 03 90 AD |  if_e	jmp	#LR__0656
07af0     CF 32 0E F2 | 	cmp	local07, #207 wz
07af4     20 03 90 AD |  if_e	jmp	#LR__0657
07af8     68 32 0E F2 | 	cmp	local07, #104 wz
07afc     24 03 90 AD |  if_e	jmp	#LR__0658
07b00     B7 32 0E F2 | 	cmp	local07, #183 wz
07b04     B4 06 90 AD |  if_e	jmp	#LR__0725
07b08     D9 32 0E F2 | 	cmp	local07, #217 wz
07b0c     20 03 90 AD |  if_e	jmp	#LR__0659
07b10     74 32 0E F2 | 	cmp	local07, #116 wz
07b14     24 03 90 AD |  if_e	jmp	#LR__0660
07b18     73 32 0E F2 | 	cmp	local07, #115 wz
07b1c     2C 03 90 AD |  if_e	jmp	#LR__0661
07b20     6C 32 0E F2 | 	cmp	local07, #108 wz
07b24     34 03 90 AD |  if_e	jmp	#LR__0662
07b28     89 32 0E F2 | 	cmp	local07, #137 wz
07b2c     8C 06 90 AD |  if_e	jmp	#LR__0725
07b30     C2 32 0E F2 | 	cmp	local07, #194 wz
07b34     34 03 90 AD |  if_e	jmp	#LR__0663
07b38     72 32 0E F2 | 	cmp	local07, #114 wz
07b3c     38 03 90 AD |  if_e	jmp	#LR__0664
07b40     5D 32 0E F2 | 	cmp	local07, #93 wz
07b44     3C 03 90 AD |  if_e	jmp	#LR__0665
07b48     96 32 0E F2 | 	cmp	local07, #150 wz
07b4c     44 03 90 AD |  if_e	jmp	#LR__0666
07b50     43 32 0E F2 | 	cmp	local07, #67 wz
07b54     48 03 90 AD |  if_e	jmp	#LR__0667
07b58     5A 32 0E F2 | 	cmp	local07, #90 wz
07b5c     50 03 90 AD |  if_e	jmp	#LR__0668
07b60     AB 32 0E F2 | 	cmp	local07, #171 wz
07b64     54 06 90 AD |  if_e	jmp	#LR__0725
07b68     BD 32 0E F2 | 	cmp	local07, #189 wz
07b6c     50 03 90 AD |  if_e	jmp	#LR__0669
07b70     BB 32 0E F2 | 	cmp	local07, #187 wz
07b74     58 03 90 AD |  if_e	jmp	#LR__0670
07b78     4E 32 0E F2 | 	cmp	local07, #78 wz
07b7c     60 03 90 AD |  if_e	jmp	#LR__0671
07b80     A9 32 0E F2 | 	cmp	local07, #169 wz
07b84     78 03 90 AD |  if_e	jmp	#LR__0673
07b88     46 32 0E F2 | 	cmp	local07, #70 wz
07b8c     90 03 90 AD |  if_e	jmp	#LR__0675
07b90     71 32 0E F2 | 	cmp	local07, #113 wz
07b94     98 03 90 AD |  if_e	jmp	#LR__0676
07b98     60 32 0E F2 | 	cmp	local07, #96 wz
07b9c     9C 03 90 AD |  if_e	jmp	#LR__0677
07ba0     4A 32 0E F2 | 	cmp	local07, #74 wz
07ba4     A0 03 90 AD |  if_e	jmp	#LR__0678
07ba8     48 32 0E F2 | 	cmp	local07, #72 wz
07bac     A4 03 90 AD |  if_e	jmp	#LR__0679
07bb0     58 32 0E F2 | 	cmp	local07, #88 wz
07bb4     AC 03 90 AD |  if_e	jmp	#LR__0680
07bb8     5F 32 0E F2 | 	cmp	local07, #95 wz
07bbc     B4 03 90 AD |  if_e	jmp	#LR__0681
07bc0     B5 32 0E F2 | 	cmp	local07, #181 wz
07bc4     B8 03 90 AD |  if_e	jmp	#LR__0682
07bc8     8A 32 0E F2 | 	cmp	local07, #138 wz
07bcc     C0 03 90 AD |  if_e	jmp	#LR__0683
07bd0     4C 32 0E F2 | 	cmp	local07, #76 wz
07bd4     C4 03 90 AD |  if_e	jmp	#LR__0684
07bd8     52 32 0E F2 | 	cmp	local07, #82 wz
07bdc     CC 03 90 AD |  if_e	jmp	#LR__0685
07be0     97 32 0E F2 | 	cmp	local07, #151 wz
07be4     D4 03 90 AD |  if_e	jmp	#LR__0686
07be8     C6 32 0E F2 | 	cmp	local07, #198 wz
07bec     D8 03 90 AD |  if_e	jmp	#LR__0687
07bf0     61 32 0E F2 | 	cmp	local07, #97 wz
07bf4     DC 03 90 AD |  if_e	jmp	#LR__0688
07bf8     63 32 0E F2 | 	cmp	local07, #99 wz
07bfc     E0 03 90 AD |  if_e	jmp	#LR__0689
07c00     41 32 0E F2 | 	cmp	local07, #65 wz
07c04     B4 05 90 AD |  if_e	jmp	#LR__0725
07c08     4B 32 0E F2 | 	cmp	local07, #75 wz
07c0c     DC 03 90 AD |  if_e	jmp	#LR__0690
07c10     C1 32 0E F2 | 	cmp	local07, #193 wz
07c14     E0 03 90 AD |  if_e	jmp	#LR__0691
07c18     B3 32 0E F2 | 	cmp	local07, #179 wz
07c1c     E4 03 90 AD |  if_e	jmp	#LR__0692
07c20     5E 32 0E F2 | 	cmp	local07, #94 wz
07c24     E8 03 90 AD |  if_e	jmp	#LR__0693
07c28     7C 32 0E F2 | 	cmp	local07, #124 wz
07c2c     EC 03 90 AD |  if_e	jmp	#LR__0694
07c30     7D 32 0E F2 | 	cmp	local07, #125 wz
07c34     F0 03 90 AD |  if_e	jmp	#LR__0695
07c38     7E 32 0E F2 | 	cmp	local07, #126 wz
07c3c     F4 03 90 AD |  if_e	jmp	#LR__0696
07c40     7F 32 0E F2 | 	cmp	local07, #127 wz
07c44     F8 03 90 AD |  if_e	jmp	#LR__0697
07c48     80 32 0E F2 | 	cmp	local07, #128 wz
07c4c     FC 03 90 AD |  if_e	jmp	#LR__0698
07c50     55 32 0E F2 | 	cmp	local07, #85 wz
07c54     00 04 90 AD |  if_e	jmp	#LR__0699
07c58     75 32 0E F2 | 	cmp	local07, #117 wz
07c5c     04 04 90 AD |  if_e	jmp	#LR__0700
07c60     42 32 0E F2 | 	cmp	local07, #66 wz
07c64     0C 04 90 AD |  if_e	jmp	#LR__0701
07c68     95 32 0E F2 | 	cmp	local07, #149 wz
07c6c     14 04 90 AD |  if_e	jmp	#LR__0702
07c70     AC 32 0E F2 | 	cmp	local07, #172 wz
07c74     44 05 90 AD |  if_e	jmp	#LR__0725
07c78     81 32 0E F2 | 	cmp	local07, #129 wz
07c7c     10 04 90 AD |  if_e	jmp	#LR__0703
07c80     44 32 0E F2 | 	cmp	local07, #68 wz
07c84     14 04 90 AD |  if_e	jmp	#LR__0704
07c88     BC 32 0E F2 | 	cmp	local07, #188 wz
07c8c     18 04 90 AD |  if_e	jmp	#LR__0705
07c90     88 32 0E F2 | 	cmp	local07, #136 wz
07c94     24 05 90 AD |  if_e	jmp	#LR__0725
07c98     B6 32 0E F2 | 	cmp	local07, #182 wz
07c9c     18 04 90 AD |  if_e	jmp	#LR__0706
07ca0     92 32 0E F2 | 	cmp	local07, #146 wz
07ca4     20 04 90 AD |  if_e	jmp	#LR__0707
07ca8     BE 32 0E F2 | 	cmp	local07, #190 wz
07cac     C8 05 90 AD |  if_e	jmp	#LR__0726
07cb0     C7 32 0E F2 | 	cmp	local07, #199 wz
07cb4     D4 32 0E 52 |  if_ne	cmp	local07, #212 wz
07cb8     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07cbc     FC 04 90 AD |  if_e	jmp	#LR__0725
07cc0     4D 32 0E F2 | 	cmp	local07, #77 wz
07cc4     0C 04 90 AD |  if_e	jmp	#LR__0708
07cc8     51 32 0E F2 | 	cmp	local07, #81 wz
07ccc     14 04 90 AD |  if_e	jmp	#LR__0709
07cd0     D2 32 0E F2 | 	cmp	local07, #210 wz
07cd4     1C 04 90 AD |  if_e	jmp	#LR__0710
07cd8     8E 32 0E F2 | 	cmp	local07, #142 wz
07cdc     24 04 90 AD |  if_e	jmp	#LR__0711
07ce0     90 32 0E F2 | 	cmp	local07, #144 wz
07ce4     28 04 90 AD |  if_e	jmp	#LR__0712
07ce8     8D 32 0E F2 | 	cmp	local07, #141 wz
07cec     2C 04 90 AD |  if_e	jmp	#LR__0713
07cf0     8C 32 0E F2 | 	cmp	local07, #140 wz
07cf4     30 04 90 AD |  if_e	jmp	#LR__0714
07cf8     91 32 0E F2 | 	cmp	local07, #145 wz
07cfc     34 04 90 AD |  if_e	jmp	#LR__0715
07d00     8B 32 0E F2 | 	cmp	local07, #139 wz
07d04     38 04 90 AD |  if_e	jmp	#LR__0716
07d08     8F 32 0E F2 | 	cmp	local07, #143 wz
07d0c     3C 04 90 AD |  if_e	jmp	#LR__0717
07d10     B2 32 0E F2 | 	cmp	local07, #178 wz
07d14     40 04 90 AD |  if_e	jmp	#LR__0718
07d18     6D 32 0E F2 | 	cmp	local07, #109 wz
07d1c     48 04 90 AD |  if_e	jmp	#LR__0719
07d20     70 32 0E F2 | 	cmp	local07, #112 wz
07d24     94 04 90 AD |  if_e	jmp	#LR__0725
07d28     56 32 0E F2 | 	cmp	local07, #86 wz
07d2c     44 04 90 AD |  if_e	jmp	#LR__0720
07d30     57 32 0E F2 | 	cmp	local07, #87 wz
07d34     84 04 90 AD |  if_e	jmp	#LR__0725
07d38     79 32 0E F2 | 	cmp	local07, #121 wz
07d3c     40 04 90 AD |  if_e	jmp	#LR__0721
07d40     77 32 0E F2 | 	cmp	local07, #119 wz
07d44     44 04 90 AD |  if_e	jmp	#LR__0722
07d48     78 32 0E F2 | 	cmp	local07, #120 wz
07d4c     48 04 90 AD |  if_e	jmp	#LR__0723
07d50     01 00 00 FF 
07d54     04 32 0E F2 | 	cmp	local07, ##516 wz
07d58     48 04 90 AD |  if_e	jmp	#LR__0724
07d5c     18 05 90 FD | 	jmp	#LR__0726
07d60                 | LR__0643
07d60     64 0B B0 FD | 	call	#_compile_fun_2p
07d64     FD 30 02 F6 | 	mov	local06, result1
07d68     50 04 90 FD | 	jmp	#LR__0725
07d6c                 | LR__0644
07d6c     28 0E B0 FD | 	call	#_compile_fun_varp
07d70     FD 34 02 F6 | 	mov	local08, result1
07d74     FE 30 02 F6 | 	mov	local06, result2
07d78     40 04 90 FD | 	jmp	#LR__0725
07d7c                 | LR__0645
07d7c     18 0E B0 FD | 	call	#_compile_fun_varp
07d80     FD 34 02 F6 | 	mov	local08, result1
07d84     FE 30 02 F6 | 	mov	local06, result2
07d88     30 04 90 FD | 	jmp	#LR__0725
07d8c                 | LR__0646
07d8c     08 0E B0 FD | 	call	#_compile_fun_varp
07d90     FD 34 02 F6 | 	mov	local08, result1
07d94     FE 30 02 F6 | 	mov	local06, result2
07d98     20 04 90 FD | 	jmp	#LR__0725
07d9c                 | LR__0647
07d9c                 | ' return expr()
07d9c     64 42 B0 FD | 	call	#_expr
07da0     FD 30 02 F6 | 	mov	local06, result1
07da4     14 04 90 FD | 	jmp	#LR__0725
07da8                 | LR__0648
07da8     EC 0D B0 FD | 	call	#_compile_fun_varp
07dac     FD 34 02 F6 | 	mov	local08, result1
07db0     FE 30 02 F6 | 	mov	local06, result2
07db4     04 04 90 FD | 	jmp	#LR__0725
07db8                 | LR__0649
07db8                 | ' return expr()
07db8     48 42 B0 FD | 	call	#_expr
07dbc     FD 30 02 F6 | 	mov	local06, result1
07dc0     F8 03 90 FD | 	jmp	#LR__0725
07dc4                 | LR__0650
07dc4                 | ' return expr()
07dc4     3C 42 B0 FD | 	call	#_expr
07dc8     FD 30 02 F6 | 	mov	local06, result1
07dcc     EC 03 90 FD | 	jmp	#LR__0725
07dd0                 | LR__0651
07dd0                 | ' return expr()
07dd0     30 42 B0 FD | 	call	#_expr
07dd4     FD 30 02 F6 | 	mov	local06, result1
07dd8     E0 03 90 FD | 	jmp	#LR__0725
07ddc                 | LR__0652
07ddc     E8 0A B0 FD | 	call	#_compile_fun_2p
07de0     FD 30 02 F6 | 	mov	local06, result1
07de4     D4 03 90 FD | 	jmp	#LR__0725
07de8                 | LR__0653
07de8     DC 0A B0 FD | 	call	#_compile_fun_2p
07dec     FD 30 02 F6 | 	mov	local06, result1
07df0     C8 03 90 FD | 	jmp	#LR__0725
07df4                 | LR__0654
07df4     D0 0A B0 FD | 	call	#_compile_fun_2p
07df8     FD 30 02 F6 | 	mov	local06, result1
07dfc     BC 03 90 FD | 	jmp	#LR__0725
07e00                 | LR__0655
07e00     C4 0A B0 FD | 	call	#_compile_fun_2p
07e04     FD 30 02 F6 | 	mov	local06, result1
07e08     B0 03 90 FD | 	jmp	#LR__0725
07e0c                 | LR__0656
07e0c     B8 0A B0 FD | 	call	#_compile_fun_2p
07e10     FD 30 02 F6 | 	mov	local06, result1
07e14     A4 03 90 FD | 	jmp	#LR__0725
07e18                 | LR__0657
07e18                 | ' return expr()
07e18     E8 41 B0 FD | 	call	#_expr
07e1c     FD 30 02 F6 | 	mov	local06, result1
07e20     98 03 90 FD | 	jmp	#LR__0725
07e24                 | LR__0658
07e24                 | ' return expr()
07e24     DC 41 B0 FD | 	call	#_expr
07e28     FD 30 02 F6 | 	mov	local06, result1
07e2c     8C 03 90 FD | 	jmp	#LR__0725
07e30                 | LR__0659
07e30     94 0A B0 FD | 	call	#_compile_fun_2p
07e34     FD 30 02 F6 | 	mov	local06, result1
07e38     80 03 90 FD | 	jmp	#LR__0725
07e3c                 | LR__0660
07e3c     58 0D B0 FD | 	call	#_compile_fun_varp
07e40     FD 34 02 F6 | 	mov	local08, result1
07e44     FE 30 02 F6 | 	mov	local06, result2
07e48     70 03 90 FD | 	jmp	#LR__0725
07e4c                 | LR__0661
07e4c     48 0D B0 FD | 	call	#_compile_fun_varp
07e50     FD 34 02 F6 | 	mov	local08, result1
07e54     FE 30 02 F6 | 	mov	local06, result2
07e58     60 03 90 FD | 	jmp	#LR__0725
07e5c                 | LR__0662
07e5c     38 0D B0 FD | 	call	#_compile_fun_varp
07e60     FD 34 02 F6 | 	mov	local08, result1
07e64     FE 30 02 F6 | 	mov	local06, result2
07e68     50 03 90 FD | 	jmp	#LR__0725
07e6c                 | LR__0663
07e6c                 | ' return expr()
07e6c     94 41 B0 FD | 	call	#_expr
07e70     FD 30 02 F6 | 	mov	local06, result1
07e74     44 03 90 FD | 	jmp	#LR__0725
07e78                 | LR__0664
07e78     40 22 B0 FD | 	call	#_compile_dim
07e7c     FD 30 02 F6 | 	mov	local06, result1
07e80     F4 03 90 FD | 	jmp	#LR__0726
07e84                 | LR__0665
07e84     10 0D B0 FD | 	call	#_compile_fun_varp
07e88     FD 34 02 F6 | 	mov	local08, result1
07e8c     FE 30 02 F6 | 	mov	local06, result2
07e90     28 03 90 FD | 	jmp	#LR__0725
07e94                 | LR__0666
07e94     30 0A B0 FD | 	call	#_compile_fun_2p
07e98     FD 30 02 F6 | 	mov	local06, result1
07e9c     1C 03 90 FD | 	jmp	#LR__0725
07ea0                 | LR__0667
07ea0     F4 0C B0 FD | 	call	#_compile_fun_varp
07ea4     FD 34 02 F6 | 	mov	local08, result1
07ea8     FE 30 02 F6 | 	mov	local06, result2
07eac     0C 03 90 FD | 	jmp	#LR__0725
07eb0                 | LR__0668
07eb0     17 13 02 F6 | 	mov	arg01, local05
07eb4     CC 20 B0 FD | 	call	#_compile_else
07eb8     FD 30 02 F6 | 	mov	local06, result1
07ebc     B8 03 90 FD | 	jmp	#LR__0726
07ec0                 | LR__0669
07ec0     D4 0C B0 FD | 	call	#_compile_fun_varp
07ec4     FD 34 02 F6 | 	mov	local08, result1
07ec8     FE 30 02 F6 | 	mov	local06, result2
07ecc     EC 02 90 FD | 	jmp	#LR__0725
07ed0                 | LR__0670
07ed0     C4 0C B0 FD | 	call	#_compile_fun_varp
07ed4     FD 34 02 F6 | 	mov	local08, result1
07ed8     FE 30 02 F6 | 	mov	local06, result2
07edc     DC 02 90 FD | 	jmp	#LR__0725
07ee0                 | LR__0671
07ee0     01 2E 16 F2 | 	cmp	local05, #1 wc
07ee4     08 00 90 CD |  if_b	jmp	#LR__0672
07ee8     6C 33 B0 FD | 	call	#_compile_goto
07eec     88 03 90 FD | 	jmp	#LR__0726
07ef0                 | LR__0672
07ef0     19 12 06 F6 | 	mov	arg01, #25
07ef4     00 14 06 F6 | 	mov	arg02, #0
07ef8     00 C2 B1 FD | 	call	#_printerror
07efc     78 03 90 FD | 	jmp	#LR__0726
07f00                 | LR__0673
07f00     01 2E 16 F2 | 	cmp	local05, #1 wc
07f04     08 00 90 CD |  if_b	jmp	#LR__0674
07f08     E8 32 B0 FD | 	call	#_compile_gosub
07f0c     68 03 90 FD | 	jmp	#LR__0726
07f10                 | LR__0674
07f10     19 12 06 F6 | 	mov	arg01, #25
07f14     00 14 06 F6 | 	mov	arg02, #0
07f18     E0 C1 B1 FD | 	call	#_printerror
07f1c     58 03 90 FD | 	jmp	#LR__0726
07f20                 | LR__0675
07f20     74 0C B0 FD | 	call	#_compile_fun_varp
07f24     FD 34 02 F6 | 	mov	local08, result1
07f28     FE 30 02 F6 | 	mov	local06, result2
07f2c     8C 02 90 FD | 	jmp	#LR__0725
07f30                 | LR__0676
07f30     0C 0B B0 FD | 	call	#_compile_fun_4p
07f34     FD 30 02 F6 | 	mov	local06, result1
07f38     80 02 90 FD | 	jmp	#LR__0725
07f3c                 | LR__0677
07f3c                 | ' return expr()
07f3c     C4 40 B0 FD | 	call	#_expr
07f40     FD 30 02 F6 | 	mov	local06, result1
07f44     74 02 90 FD | 	jmp	#LR__0725
07f48                 | LR__0678
07f48     44 28 B0 FD | 	call	#_compile_for
07f4c     FD 30 02 F6 | 	mov	local06, result1
07f50     24 03 90 FD | 	jmp	#LR__0726
07f54                 | LR__0679
07f54     40 0C B0 FD | 	call	#_compile_fun_varp
07f58     FD 34 02 F6 | 	mov	local08, result1
07f5c     FE 30 02 F6 | 	mov	local06, result2
07f60     58 02 90 FD | 	jmp	#LR__0725
07f64                 | LR__0680
07f64     17 13 02 F6 | 	mov	arg01, local05
07f68     90 1E B0 FD | 	call	#_compile_if
07f6c     FD 30 02 F6 | 	mov	local06, result1
07f70     04 03 90 FD | 	jmp	#LR__0726
07f74                 | LR__0681
07f74                 | ' return expr()
07f74     8C 40 B0 FD | 	call	#_expr
07f78     FD 30 02 F6 | 	mov	local06, result1
07f7c     3C 02 90 FD | 	jmp	#LR__0725
07f80                 | LR__0682
07f80     E0 0D B0 FD | 	call	#_compile_input
07f84     FD 34 02 F6 | 	mov	local08, result1
07f88     FE 30 02 F6 | 	mov	local06, result2
07f8c     2C 02 90 FD | 	jmp	#LR__0725
07f90                 | LR__0683
07f90                 | ' return expr()
07f90     70 40 B0 FD | 	call	#_expr
07f94     FD 30 02 F6 | 	mov	local06, result1
07f98     20 02 90 FD | 	jmp	#LR__0725
07f9c                 | LR__0684
07f9c     F8 0B B0 FD | 	call	#_compile_fun_varp
07fa0     FD 34 02 F6 | 	mov	local08, result1
07fa4     FE 30 02 F6 | 	mov	local06, result2
07fa8     10 02 90 FD | 	jmp	#LR__0725
07fac                 | LR__0685
07fac     E8 0B B0 FD | 	call	#_compile_fun_varp
07fb0     FD 34 02 F6 | 	mov	local08, result1
07fb4     FE 30 02 F6 | 	mov	local06, result2
07fb8     00 02 90 FD | 	jmp	#LR__0725
07fbc                 | LR__0686
07fbc     08 09 B0 FD | 	call	#_compile_fun_2p
07fc0     FD 30 02 F6 | 	mov	local06, result1
07fc4     F4 01 90 FD | 	jmp	#LR__0725
07fc8                 | LR__0687
07fc8                 | ' return expr()
07fc8     38 40 B0 FD | 	call	#_expr
07fcc     FD 30 02 F6 | 	mov	local06, result1
07fd0     E8 01 90 FD | 	jmp	#LR__0725
07fd4                 | LR__0688
07fd4                 | ' return expr()
07fd4     2C 40 B0 FD | 	call	#_expr
07fd8     FD 30 02 F6 | 	mov	local06, result1
07fdc     DC 01 90 FD | 	jmp	#LR__0725
07fe0                 | LR__0689
07fe0                 | ' return expr()
07fe0     20 40 B0 FD | 	call	#_expr
07fe4     FD 30 02 F6 | 	mov	local06, result1
07fe8     D0 01 90 FD | 	jmp	#LR__0725
07fec                 | LR__0690
07fec     6C 30 B0 FD | 	call	#_compile_next
07ff0     FD 30 02 F6 | 	mov	local06, result1
07ff4     80 02 90 FD | 	jmp	#LR__0726
07ff8                 | LR__0691
07ff8     4C 36 B0 FD | 	call	#_compile_on
07ffc     FD 30 02 F6 | 	mov	local06, result1
08000     74 02 90 FD | 	jmp	#LR__0726
08004                 | LR__0692
08004     48 09 B0 FD | 	call	#_compile_fun_3p
08008     FD 30 02 F6 | 	mov	local06, result1
0800c     AC 01 90 FD | 	jmp	#LR__0725
08010                 | LR__0693
08010                 | ' return expr()
08010     F0 3F B0 FD | 	call	#_expr
08014     FD 30 02 F6 | 	mov	local06, result1
08018     A0 01 90 FD | 	jmp	#LR__0725
0801c                 | LR__0694
0801c                 | ' return expr()
0801c     E4 3F B0 FD | 	call	#_expr
08020     FD 30 02 F6 | 	mov	local06, result1
08024     94 01 90 FD | 	jmp	#LR__0725
08028                 | LR__0695
08028                 | ' return expr()
08028     D8 3F B0 FD | 	call	#_expr
0802c     FD 30 02 F6 | 	mov	local06, result1
08030     88 01 90 FD | 	jmp	#LR__0725
08034                 | LR__0696
08034                 | ' return expr()
08034     CC 3F B0 FD | 	call	#_expr
08038     FD 30 02 F6 | 	mov	local06, result1
0803c     7C 01 90 FD | 	jmp	#LR__0725
08040                 | LR__0697
08040     FC 09 B0 FD | 	call	#_compile_fun_4p
08044     FD 30 02 F6 | 	mov	local06, result1
08048     70 01 90 FD | 	jmp	#LR__0725
0804c                 | LR__0698
0804c                 | ' return expr()
0804c     B4 3F B0 FD | 	call	#_expr
08050     FD 30 02 F6 | 	mov	local06, result1
08054     64 01 90 FD | 	jmp	#LR__0725
08058                 | LR__0699
08058     6C 08 B0 FD | 	call	#_compile_fun_2p
0805c     FD 30 02 F6 | 	mov	local06, result1
08060     58 01 90 FD | 	jmp	#LR__0725
08064                 | LR__0700
08064     30 0B B0 FD | 	call	#_compile_fun_varp
08068     FD 34 02 F6 | 	mov	local08, result1
0806c     FE 30 02 F6 | 	mov	local06, result2
08070     48 01 90 FD | 	jmp	#LR__0725
08074                 | LR__0701
08074     20 0B B0 FD | 	call	#_compile_fun_varp
08078     FD 34 02 F6 | 	mov	local08, result1
0807c     FE 30 02 F6 | 	mov	local06, result2
08080     38 01 90 FD | 	jmp	#LR__0725
08084                 | LR__0702
08084     40 08 B0 FD | 	call	#_compile_fun_2p
08088     FD 30 02 F6 | 	mov	local06, result1
0808c     2C 01 90 FD | 	jmp	#LR__0725
08090                 | LR__0703
08090     34 08 B0 FD | 	call	#_compile_fun_2p
08094     FD 30 02 F6 | 	mov	local06, result1
08098     20 01 90 FD | 	jmp	#LR__0725
0809c                 | LR__0704
0809c     84 16 B0 FD | 	call	#_compile_print
080a0     FD 30 02 F6 | 	mov	local06, result1
080a4     D0 01 90 FD | 	jmp	#LR__0726
080a8                 | LR__0705
080a8     EC 0A B0 FD | 	call	#_compile_fun_varp
080ac     FD 34 02 F6 | 	mov	local08, result1
080b0     FE 30 02 F6 | 	mov	local06, result2
080b4     04 01 90 FD | 	jmp	#LR__0725
080b8                 | LR__0706
080b8     B8 0B B0 FD | 	call	#_compile_read
080bc     FD 34 02 F6 | 	mov	local08, result1
080c0     FE 30 02 F6 | 	mov	local06, result2
080c4     F4 00 90 FD | 	jmp	#LR__0725
080c8                 | LR__0707
080c8                 | ' return expr()
080c8     38 3F B0 FD | 	call	#_expr
080cc     FD 30 02 F6 | 	mov	local06, result1
080d0     E8 00 90 FD | 	jmp	#LR__0725
080d4                 | LR__0708
080d4     C0 0A B0 FD | 	call	#_compile_fun_varp
080d8     FD 34 02 F6 | 	mov	local08, result1
080dc     FE 30 02 F6 | 	mov	local06, result2
080e0     D8 00 90 FD | 	jmp	#LR__0725
080e4                 | LR__0709
080e4     B0 0A B0 FD | 	call	#_compile_fun_varp
080e8     FD 34 02 F6 | 	mov	local08, result1
080ec     FE 30 02 F6 | 	mov	local06, result2
080f0     C8 00 90 FD | 	jmp	#LR__0725
080f4                 | LR__0710
080f4     A0 0A B0 FD | 	call	#_compile_fun_varp
080f8     FD 34 02 F6 | 	mov	local08, result1
080fc     FE 30 02 F6 | 	mov	local06, result2
08100     B8 00 90 FD | 	jmp	#LR__0725
08104                 | LR__0711
08104     C0 07 B0 FD | 	call	#_compile_fun_2p
08108     FD 30 02 F6 | 	mov	local06, result1
0810c     AC 00 90 FD | 	jmp	#LR__0725
08110                 | LR__0712
08110     B4 07 B0 FD | 	call	#_compile_fun_2p
08114     FD 30 02 F6 | 	mov	local06, result1
08118     A0 00 90 FD | 	jmp	#LR__0725
0811c                 | LR__0713
0811c     A8 07 B0 FD | 	call	#_compile_fun_2p
08120     FD 30 02 F6 | 	mov	local06, result1
08124     94 00 90 FD | 	jmp	#LR__0725
08128                 | LR__0714
08128     9C 07 B0 FD | 	call	#_compile_fun_2p
0812c     FD 30 02 F6 | 	mov	local06, result1
08130     88 00 90 FD | 	jmp	#LR__0725
08134                 | LR__0715
08134     90 07 B0 FD | 	call	#_compile_fun_2p
08138     FD 30 02 F6 | 	mov	local06, result1
0813c     7C 00 90 FD | 	jmp	#LR__0725
08140                 | LR__0716
08140     84 07 B0 FD | 	call	#_compile_fun_2p
08144     FD 30 02 F6 | 	mov	local06, result1
08148     70 00 90 FD | 	jmp	#LR__0725
0814c                 | LR__0717
0814c     78 07 B0 FD | 	call	#_compile_fun_2p
08150     FD 30 02 F6 | 	mov	local06, result1
08154     64 00 90 FD | 	jmp	#LR__0725
08158                 | LR__0718
08158     3C 0A B0 FD | 	call	#_compile_fun_varp
0815c     FD 34 02 F6 | 	mov	local08, result1
08160     FE 30 02 F6 | 	mov	local06, result2
08164     54 00 90 FD | 	jmp	#LR__0725
08168                 | LR__0719
08168     E4 07 B0 FD | 	call	#_compile_fun_3p
0816c     FD 30 02 F6 | 	mov	local06, result1
08170     48 00 90 FD | 	jmp	#LR__0725
08174                 | LR__0720
08174                 | ' return expr()
08174     8C 3E B0 FD | 	call	#_expr
08178     FD 30 02 F6 | 	mov	local06, result1
0817c     3C 00 90 FD | 	jmp	#LR__0725
08180                 | LR__0721
08180     44 07 B0 FD | 	call	#_compile_fun_2p
08184     FD 30 02 F6 | 	mov	local06, result1
08188     30 00 90 FD | 	jmp	#LR__0725
0818c                 | LR__0722
0818c     38 07 B0 FD | 	call	#_compile_fun_2p
08190     FD 30 02 F6 | 	mov	local06, result1
08194     24 00 90 FD | 	jmp	#LR__0725
08198                 | LR__0723
08198     2C 07 B0 FD | 	call	#_compile_fun_2p
0819c     FD 30 02 F6 | 	mov	local06, result1
081a0     18 00 90 FD | 	jmp	#LR__0725
081a4                 | LR__0724
081a4     1C 13 B0 FD | 	call	#_compile_array_assign
081a8     FD 30 02 F6 | 	mov	local06, result1
081ac     0E 30 0E F2 | 	cmp	local06, #14 wz
081b0     C4 00 90 5D |  if_ne	jmp	#LR__0726
081b4                 | ' return 23
081b4     17 30 06 F6 | 	mov	local06, #23
081b8     BC 00 90 FD | 	jmp	#LR__0726
081bc                 | ' return 23
081bc                 | LR__0725
081bc     19 2B 02 F6 | 	mov	local03, local07
081c0     1A 27 02 F6 | 	mov	local01, local08
081c4     13 37 02 F6 | 	mov	local09, local01
081c8     14 39 02 F6 | 	mov	local10, local02
081cc     15 33 02 F6 | 	mov	local07, local03
081d0     4A 00 00 FF 
081d4     7C E4 05 F1 | 	add	objptr, ##38012
081d8     F2 26 02 FB | 	rdlong	local01, objptr
081dc     13 35 02 F6 | 	mov	local08, local01
081e0     01 34 66 F0 | 	shl	local08, #1
081e4     13 35 02 F1 | 	add	local08, local01
081e8     02 34 66 F0 | 	shl	local08, #2
081ec     03 00 00 FF 
081f0     00 E4 85 F1 | 	sub	objptr, ##1536
081f4     F2 34 02 F1 | 	add	local08, objptr
081f8     1A 37 62 FC | 	wrlong	local09, local08
081fc     03 00 00 FF 
08200     00 E4 05 F1 | 	add	objptr, ##1536
08204     F2 26 02 FB | 	rdlong	local01, objptr
08208     13 37 02 F6 | 	mov	local09, local01
0820c     01 36 66 F0 | 	shl	local09, #1
08210     13 37 02 F1 | 	add	local09, local01
08214     02 36 66 F0 | 	shl	local09, #2
08218     03 00 00 FF 
0821c     00 E4 85 F1 | 	sub	objptr, ##1536
08220     F2 36 02 F1 | 	add	local09, objptr
08224     04 36 06 F1 | 	add	local09, #4
08228     1B 39 62 FC | 	wrlong	local10, local09
0822c     03 00 00 FF 
08230     00 E4 05 F1 | 	add	objptr, ##1536
08234     F2 26 02 FB | 	rdlong	local01, objptr
08238     13 39 02 F6 | 	mov	local10, local01
0823c     01 38 66 F0 | 	shl	local10, #1
08240     13 39 02 F1 | 	add	local10, local01
08244     02 38 66 F0 | 	shl	local10, #2
08248     03 00 00 FF 
0824c     00 E4 85 F1 | 	sub	objptr, ##1536
08250     F2 38 02 F1 | 	add	local10, objptr
08254     08 38 06 F1 | 	add	local10, #8
08258     1C 33 62 FC | 	wrlong	local07, local10
0825c     03 00 00 FF 
08260     00 E4 05 F1 | 	add	objptr, ##1536
08264     F2 36 02 FB | 	rdlong	local09, objptr
08268     01 36 06 F1 | 	add	local09, #1
0826c     F2 36 62 FC | 	wrlong	local09, objptr
08270     4A 00 00 FF 
08274     7C E4 85 F1 | 	sub	objptr, ##38012
08278                 | LR__0726
08278                 | ' 
08278                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
08278                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
08278     03 2C 0E F2 | 	cmp	local04, #3 wz
0827c     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08280     38 00 90 5D |  if_ne	jmp	#LR__0727
08284     4A 00 00 FF 
08288     7C E4 05 F1 | 	add	objptr, ##38012
0828c     F2 38 02 FB | 	rdlong	local10, objptr
08290     1C 27 02 F6 | 	mov	local01, local10
08294     01 26 66 F0 | 	shl	local01, #1
08298     1C 27 02 F1 | 	add	local01, local10
0829c     02 26 66 F0 | 	shl	local01, #2
082a0     03 00 00 FF 
082a4     00 E4 85 F1 | 	sub	objptr, ##1536
082a8     F2 26 02 F1 | 	add	local01, objptr
082ac     08 26 06 F1 | 	add	local01, #8
082b0     13 FD 6B FC | 	wrlong	#510, local01
082b4     47 00 00 FF 
082b8     7C E4 85 F1 | 	sub	objptr, ##36476
082bc                 | LR__0727
082bc                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
082bc                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
082bc     4A 00 00 FF 
082c0     7C E4 05 F1 | 	add	objptr, ##38012
082c4     F2 26 02 FB | 	rdlong	local01, objptr
082c8     4A 00 00 FF 
082cc     7C E4 85 F1 | 	sub	objptr, ##38012
082d0     97 58 48 FB | 	callpa	#(@LR__0730-@LR__0728)>>2,fcache_load_ptr_
082d4                 | LR__0728
082d4     13 39 02 F6 | 	mov	local10, local01
082d8     01 38 66 F0 | 	shl	local10, #1
082dc     13 39 02 F1 | 	add	local10, local01
082e0     02 38 66 F0 | 	shl	local10, #2
082e4     47 00 00 FF 
082e8     7C E4 05 F1 | 	add	objptr, ##36476
082ec     F2 38 02 F1 | 	add	local10, objptr
082f0     08 38 06 F1 | 	add	local10, #8
082f4     1C 39 02 FB | 	rdlong	local10, local10
082f8     9B 38 0E F2 | 	cmp	local10, #155 wz
082fc     47 00 00 FF 
08300     7C E4 85 F1 | 	sub	objptr, ##36476
08304     70 00 90 5D |  if_ne	jmp	#LR__0729
08308     13 37 02 F6 | 	mov	local09, local01
0830c     01 36 86 F1 | 	sub	local09, #1
08310     1B 39 02 F6 | 	mov	local10, local09
08314     01 38 66 F0 | 	shl	local10, #1
08318     1B 39 02 F1 | 	add	local10, local09
0831c     02 38 66 F0 | 	shl	local10, #2
08320     47 00 00 FF 
08324     7C E4 05 F1 | 	add	objptr, ##36476
08328     F2 38 02 F1 | 	add	local10, objptr
0832c     08 38 06 F1 | 	add	local10, #8
08330     1C 39 02 FB | 	rdlong	local10, local10
08334     11 38 0E F2 | 	cmp	local10, #17 wz
08338     47 00 00 FF 
0833c     7C E4 85 F1 | 	sub	objptr, ##36476
08340     34 00 90 5D |  if_ne	jmp	#LR__0729
08344     13 37 02 F6 | 	mov	local09, local01
08348     01 36 86 F1 | 	sub	local09, #1
0834c     1B 39 02 F6 | 	mov	local10, local09
08350     01 38 66 F0 | 	shl	local10, #1
08354     1B 39 02 F1 | 	add	local10, local09
08358     02 38 66 F0 | 	shl	local10, #2
0835c     47 00 00 FF 
08360     7C E4 05 F1 | 	add	objptr, ##36476
08364     F2 38 02 F1 | 	add	local10, objptr
08368     08 38 06 F1 | 	add	local10, #8
0836c     1C 25 68 FC | 	wrlong	#18, local10
08370     47 00 00 FF 
08374     7C E4 85 F1 | 	sub	objptr, ##36476
08378                 | LR__0729
08378     01 26 86 F1 | 	sub	local01, #1
0837c     01 26 56 F2 | 	cmps	local01, #1 wc
08380     50 FF 9F 3D |  if_ae	jmp	#LR__0728
08384                 | LR__0730
08384                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
08384                 | ' return err
08384     18 FB 01 F6 | 	mov	result1, local06
08388     A7 F0 03 F6 | 	mov	ptra, fp
0838c     B2 00 A0 FD | 	call	#popregs_
08390                 | _compile_immediate_ret
08390     2D 00 64 FD | 	ret
08394                 | 
08394                 | ' 
08394                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
08394                 | ' 
08394                 | ' function compile_immediate_assign(linetype as ulong) as ulong
08394                 | _compile_immediate_assign
08394     0C 4A 05 F6 | 	mov	COUNT_, #12
08398     A8 00 A0 FD | 	call	#pushregs_
0839c     09 2D 02 F6 | 	mov	local04, arg01
083a0     FF 2A 06 F6 | 	mov	local03, #255
083a4     01 2E 66 F6 | 	neg	local05, #1
083a8     00 30 06 F6 | 	mov	local06, #0
083ac                 | ' 
083ac                 | ' t1.result_type=result_error : t1.result.uresult=0
083ac                 | ' i=-1: j=-1 : err=0
083ac                 | ' 
083ac                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
083ac     02 2C 0E F2 | 	cmp	local04, #2 wz
083b0     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
083b4     35 00 00 AF 
083b8     0C E4 05 A1 |  if_e	add	objptr, ##27148
083bc     F2 32 02 AB |  if_e	rdlong	local07, objptr
083c0     02 00 00 AF 
083c4     38 E4 05 A1 |  if_e	add	objptr, ##1080
083c8     F2 04 68 AC |  if_e	wrlong	#2, objptr
083cc     37 00 00 AF 
083d0     44 E4 85 A1 |  if_e	sub	objptr, ##28228
083d4                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
083d4     04 2C 0E F2 | 	cmp	local04, #4 wz
083d8     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
083dc     2C 00 90 5D |  if_ne	jmp	#LR__0740
083e0     35 00 00 FF 
083e4     14 E4 05 F1 | 	add	objptr, ##27156
083e8     F2 32 02 FB | 	rdlong	local07, objptr
083ec     02 00 00 FF 
083f0     30 E4 05 F1 | 	add	objptr, ##1072
083f4     F2 06 68 FC | 	wrlong	#3, objptr
083f8     13 00 00 FF 
083fc     38 E4 05 F1 | 	add	objptr, ##9784
08400     F2 04 68 FC | 	wrlong	#2, objptr
08404     4A 00 00 FF 
08408     7C E4 85 F1 | 	sub	objptr, ##38012
0840c                 | LR__0740
0840c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
0840c     05 2C 0E F2 | 	cmp	local04, #5 wz
08410     3C 00 90 5D |  if_ne	jmp	#LR__0741
08414     37 00 00 FF 
08418     44 E4 05 F1 | 	add	objptr, ##28228
0841c     F2 FA 01 FB | 	rdlong	result1, objptr
08420     FD 32 02 F6 | 	mov	local07, result1
08424     03 32 66 F0 | 	shl	local07, #3
08428     02 00 00 FF 
0842c     38 E4 85 F1 | 	sub	objptr, ##1080
08430     F2 32 02 F1 | 	add	local07, objptr
08434     19 33 02 FB | 	rdlong	local07, local07
08438     02 FA 05 F1 | 	add	result1, #2
0843c     02 00 00 FF 
08440     38 E4 05 F1 | 	add	objptr, ##1080
08444     F2 FA 61 FC | 	wrlong	result1, objptr
08448     37 00 00 FF 
0844c     44 E4 85 F1 | 	sub	objptr, ##28228
08450                 | LR__0741
08450     19 13 02 F6 | 	mov	arg01, local07
08454     01 14 06 F6 | 	mov	arg02, #1
08458     08 18 B2 FD | 	call	#__system__Right_S
0845c     FD 34 02 F6 | 	mov	local08, result1
08460     A0 3B B0 FD | 	call	#_expr
08464                 | ' 
08464                 | ' suffix2$=right$(varname2$,1)
08464                 | ' expr()
08464                 | ' if varnum>0 then					' try to find a variable
08464     35 00 00 FF 
08468     08 E4 05 F1 | 	add	objptr, ##27144
0846c     F2 36 02 FB | 	rdlong	local09, objptr
08470     35 00 00 FF 
08474     08 E4 85 F1 | 	sub	objptr, ##27144
08478     01 36 56 F2 | 	cmps	local09, #1 wc
0847c     58 00 90 CD |  if_b	jmp	#LR__0744
08480                 | '   for i=0 to varnum-1
08480     00 38 06 F6 | 	mov	local10, #0
08484     35 00 00 FF 
08488     08 E4 05 F1 | 	add	objptr, ##27144
0848c     F2 3A 02 FB | 	rdlong	local11, objptr
08490     35 00 00 FF 
08494     08 E4 85 F1 | 	sub	objptr, ##27144
08498                 | LR__0742
08498     1D 39 52 F2 | 	cmps	local10, local11 wc
0849c     38 00 90 3D |  if_ae	jmp	#LR__0743
084a0                 | '     if variables(i).name=varname2$ then j=i : exit
084a0     1C 37 02 F6 | 	mov	local09, local10
084a4     04 36 66 F0 | 	shl	local09, #4
084a8     14 00 00 FF 
084ac     F8 E5 05 F1 | 	add	objptr, ##10744
084b0     F2 36 02 F1 | 	add	local09, objptr
084b4     1B 13 02 FB | 	rdlong	arg01, local09
084b8     19 15 02 F6 | 	mov	arg02, local07
084bc     14 00 00 FF 
084c0     F8 E5 85 F1 | 	sub	objptr, ##10744
084c4     BC F6 B1 FD | 	call	#__system___string_cmp
084c8     00 FA 0D F2 | 	cmp	result1, #0 wz
084cc     1C 2F 02 A6 |  if_e	mov	local05, local10
084d0     01 38 06 51 |  if_ne	add	local10, #1
084d4     C0 FF 9F 5D |  if_ne	jmp	#LR__0742
084d8                 | LR__0743
084d8                 | LR__0744
084d8                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
084d8     FF FF 7F FF 
084dc     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
084e0     60 00 90 5D |  if_ne	jmp	#LR__0745
084e4     35 00 00 FF 
084e8     08 E4 05 F1 | 	add	objptr, ##27144
084ec     F2 36 02 FB | 	rdlong	local09, objptr
084f0     35 00 00 FF 
084f4     08 E4 85 F1 | 	sub	objptr, ##27144
084f8     02 00 00 FF 
084fc     00 36 56 F2 | 	cmps	local09, ##1024 wc
08500     40 00 90 3D |  if_ae	jmp	#LR__0745
08504     35 00 00 FF 
08508     08 E4 05 F1 | 	add	objptr, ##27144
0850c     F2 3A 02 FB | 	rdlong	local11, objptr
08510     04 3A 66 F0 | 	shl	local11, #4
08514     20 00 00 FF 
08518     10 E4 85 F1 | 	sub	objptr, ##16400
0851c     F2 3A 02 F1 | 	add	local11, objptr
08520     1D 33 62 FC | 	wrlong	local07, local11
08524     20 00 00 FF 
08528     10 E4 05 F1 | 	add	objptr, ##16400
0852c     F2 36 02 FB | 	rdlong	local09, objptr
08530     1B 2F 02 F6 | 	mov	local05, local09
08534     01 36 06 F1 | 	add	local09, #1
08538     F2 36 62 FC | 	wrlong	local09, objptr
0853c     35 00 00 FF 
08540     08 E4 85 F1 | 	sub	objptr, ##27144
08544                 | LR__0745
08544                 | ' if varnum>=maxvars then
08544     35 00 00 FF 
08548     08 E4 05 F1 | 	add	objptr, ##27144
0854c     F2 36 02 FB | 	rdlong	local09, objptr
08550     35 00 00 FF 
08554     08 E4 85 F1 | 	sub	objptr, ##27144
08558     02 00 00 FF 
0855c     00 36 56 F2 | 	cmps	local09, ##1024 wc
08560     2D 30 06 36 |  if_ae	mov	local06, #45
08564     C8 01 90 3D |  if_ae	jmp	#LR__0750
08568     17 27 02 F6 | 	mov	local01, local05
0856c     17 2A 06 F6 | 	mov	local03, #23
08570     13 37 02 F6 | 	mov	local09, local01
08574     14 3D 02 F6 | 	mov	local12, local02
08578     15 27 02 F6 | 	mov	local01, local03
0857c     4A 00 00 FF 
08580     7C E4 05 F1 | 	add	objptr, ##38012
08584     F2 3A 02 FB | 	rdlong	local11, objptr
08588     1D 39 02 F6 | 	mov	local10, local11
0858c     01 38 66 F0 | 	shl	local10, #1
08590     1D 39 02 F1 | 	add	local10, local11
08594     02 38 66 F0 | 	shl	local10, #2
08598     03 00 00 FF 
0859c     00 E4 85 F1 | 	sub	objptr, ##1536
085a0     F2 38 02 F1 | 	add	local10, objptr
085a4     1C 37 62 FC | 	wrlong	local09, local10
085a8     03 00 00 FF 
085ac     00 E4 05 F1 | 	add	objptr, ##1536
085b0     F2 36 02 FB | 	rdlong	local09, objptr
085b4     1B 3B 02 F6 | 	mov	local11, local09
085b8     01 3A 66 F0 | 	shl	local11, #1
085bc     1B 3B 02 F1 | 	add	local11, local09
085c0     02 3A 66 F0 | 	shl	local11, #2
085c4     03 00 00 FF 
085c8     00 E4 85 F1 | 	sub	objptr, ##1536
085cc     F2 3A 02 F1 | 	add	local11, objptr
085d0     04 3A 06 F1 | 	add	local11, #4
085d4     1D 3D 62 FC | 	wrlong	local12, local11
085d8     03 00 00 FF 
085dc     00 E4 05 F1 | 	add	objptr, ##1536
085e0     F2 36 02 FB | 	rdlong	local09, objptr
085e4     1B 3D 02 F6 | 	mov	local12, local09
085e8     01 3C 66 F0 | 	shl	local12, #1
085ec     1B 3D 02 F1 | 	add	local12, local09
085f0     02 3C 66 F0 | 	shl	local12, #2
085f4     03 00 00 FF 
085f8     00 E4 85 F1 | 	sub	objptr, ##1536
085fc     F2 3C 02 F1 | 	add	local12, objptr
08600     08 3C 06 F1 | 	add	local12, #8
08604     1E 27 62 FC | 	wrlong	local01, local12
08608     03 00 00 FF 
0860c     00 E4 05 F1 | 	add	objptr, ##1536
08610     F2 36 02 FB | 	rdlong	local09, objptr
08614     01 36 06 F1 | 	add	local09, #1
08618     F2 36 62 FC | 	wrlong	local09, objptr
0861c     4A 00 00 FF 
08620     7C E4 85 F1 | 	sub	objptr, ##38012
08624                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
08624                 | '   compiledline(lineptr)=t1:  lineptr+=1 
08624                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
08624     03 2C 0E F2 | 	cmp	local04, #3 wz
08628     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
0862c     38 00 90 5D |  if_ne	jmp	#LR__0746
08630     4A 00 00 FF 
08634     7C E4 05 F1 | 	add	objptr, ##38012
08638     F2 3C 02 FB | 	rdlong	local12, objptr
0863c     1E 27 02 F6 | 	mov	local01, local12
08640     01 26 66 F0 | 	shl	local01, #1
08644     1E 27 02 F1 | 	add	local01, local12
08648     02 26 66 F0 | 	shl	local01, #2
0864c     03 00 00 FF 
08650     00 E4 85 F1 | 	sub	objptr, ##1536
08654     F2 26 02 F1 | 	add	local01, objptr
08658     08 26 06 F1 | 	add	local01, #8
0865c     13 FD 6B FC | 	wrlong	#510, local01
08660     47 00 00 FF 
08664     7C E4 85 F1 | 	sub	objptr, ##36476
08668                 | LR__0746
08668                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08668     4A 00 00 FF 
0866c     7C E4 05 F1 | 	add	objptr, ##38012
08670     F2 38 02 FB | 	rdlong	local10, objptr
08674     4A 00 00 FF 
08678     7C E4 85 F1 | 	sub	objptr, ##38012
0867c     97 58 48 FB | 	callpa	#(@LR__0749-@LR__0747)>>2,fcache_load_ptr_
08680                 | LR__0747
08680     1C 3D 02 F6 | 	mov	local12, local10
08684     01 3C 66 F0 | 	shl	local12, #1
08688     1C 3D 02 F1 | 	add	local12, local10
0868c     02 3C 66 F0 | 	shl	local12, #2
08690     47 00 00 FF 
08694     7C E4 05 F1 | 	add	objptr, ##36476
08698     F2 3C 02 F1 | 	add	local12, objptr
0869c     08 3C 06 F1 | 	add	local12, #8
086a0     1E 3D 02 FB | 	rdlong	local12, local12
086a4     9B 3C 0E F2 | 	cmp	local12, #155 wz
086a8     47 00 00 FF 
086ac     7C E4 85 F1 | 	sub	objptr, ##36476
086b0     70 00 90 5D |  if_ne	jmp	#LR__0748
086b4     1C 3D 02 F6 | 	mov	local12, local10
086b8     01 3C 86 F1 | 	sub	local12, #1
086bc     1E 27 02 F6 | 	mov	local01, local12
086c0     01 26 66 F0 | 	shl	local01, #1
086c4     1E 27 02 F1 | 	add	local01, local12
086c8     02 26 66 F0 | 	shl	local01, #2
086cc     47 00 00 FF 
086d0     7C E4 05 F1 | 	add	objptr, ##36476
086d4     F2 26 02 F1 | 	add	local01, objptr
086d8     08 26 06 F1 | 	add	local01, #8
086dc     13 27 02 FB | 	rdlong	local01, local01
086e0     11 26 0E F2 | 	cmp	local01, #17 wz
086e4     47 00 00 FF 
086e8     7C E4 85 F1 | 	sub	objptr, ##36476
086ec     34 00 90 5D |  if_ne	jmp	#LR__0748
086f0     1C 3D 02 F6 | 	mov	local12, local10
086f4     01 3C 86 F1 | 	sub	local12, #1
086f8     1E 27 02 F6 | 	mov	local01, local12
086fc     01 26 66 F0 | 	shl	local01, #1
08700     1E 27 02 F1 | 	add	local01, local12
08704     02 26 66 F0 | 	shl	local01, #2
08708     47 00 00 FF 
0870c     7C E4 05 F1 | 	add	objptr, ##36476
08710     F2 26 02 F1 | 	add	local01, objptr
08714     08 26 06 F1 | 	add	local01, #8
08718     13 25 68 FC | 	wrlong	#18, local01
0871c     47 00 00 FF 
08720     7C E4 85 F1 | 	sub	objptr, ##36476
08724                 | LR__0748
08724     01 38 86 F1 | 	sub	local10, #1
08728     01 38 56 F2 | 	cmps	local10, #1 wc
0872c     50 FF 9F 3D |  if_ae	jmp	#LR__0747
08730                 | LR__0749
08730                 | LR__0750
08730                 | ' return err
08730     18 FB 01 F6 | 	mov	result1, local06
08734     A7 F0 03 F6 | 	mov	ptra, fp
08738     B2 00 A0 FD | 	call	#popregs_
0873c                 | _compile_immediate_assign_ret
0873c     2D 00 64 FD | 	ret
08740                 | 
08740                 | ' 
08740                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08740                 | ' 
08740                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08740                 | _compile
08740     03 4A 05 F6 | 	mov	COUNT_, #3
08744     A8 00 A0 FD | 	call	#pushregs_
08748     09 27 02 F6 | 	mov	local01, arg01
0874c     0B 29 02 F6 | 	mov	local02, arg03
08750     47 00 00 FF 
08754     7C E4 05 F1 | 	add	objptr, ##36476
08758     F2 26 62 FC | 	wrlong	local01, objptr
0875c     04 E4 05 F1 | 	add	objptr, #4
08760     F2 14 62 FC | 	wrlong	arg02, objptr
08764     47 00 00 FF 
08768     80 E4 85 F1 | 	sub	objptr, ##36480
0876c     14 13 02 F6 | 	mov	arg01, local02
08770     01 12 06 F1 | 	add	arg01, #1
08774     13 15 02 F6 | 	mov	arg02, local01
08778     2C F2 BF FD | 	call	#_compile_immediate
0877c     FD 2A 0A F6 | 	mov	local03, result1 wz
08780                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08780                 | ' ucompiledline(0)=alinemajor
08780                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08780                 | ' 
08780                 | ' ' cont: 
08780                 | ' ' 0 - this is the first part of the line that will continue
08780                 | ' ' 1 - this is the continuation of the line
08780                 | ' ' 2 - this is the last continued line
08780                 | ' ' 3 - this is the one and only part
08780                 | ' 
08780                 | ' err=compile_immediate(cont+1,alinemajor) 
08780                 | ' if err=0 andalso alinemajor>0 then
08780     74 00 90 5D |  if_ne	jmp	#LR__0765
08784     01 26 16 F2 | 	cmp	local01, #1 wc
08788     6C 00 90 CD |  if_b	jmp	#LR__0765
0878c                 | '   if cont=3 orelse cont=2 then 
0878c     03 28 0E F2 | 	cmp	local02, #3 wz
08790     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08794     60 00 90 5D |  if_ne	jmp	#LR__0764
08798                 | '     if alinemajor >lastline then 
08798     4A 00 00 FF 
0879c     8C E4 05 F1 | 	add	objptr, ##38028
087a0     F2 14 02 FB | 	rdlong	arg02, objptr
087a4     4A 00 00 FF 
087a8     8C E4 85 F1 | 	sub	objptr, ##38028
087ac     0A 27 1A F2 | 	cmp	local01, arg02 wcz
087b0     0C 00 90 ED |  if_be	jmp	#LR__0760
087b4     13 13 02 F6 | 	mov	arg01, local01
087b8     24 F1 BF FD | 	call	#_add_line_at_end
087bc     38 00 90 FD | 	jmp	#LR__0763
087c0                 | LR__0760
087c0     13 13 02 F6 | 	mov	arg01, local01
087c4     E8 EA BF FD | 	call	#_deleteline
087c8                 | '       deleteline(alinemajor)  
087c8                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
087c8     4A 00 00 FF 
087cc     8C E4 05 F1 | 	add	objptr, ##38028
087d0     F2 14 02 FB | 	rdlong	arg02, objptr
087d4     4A 00 00 FF 
087d8     8C E4 85 F1 | 	sub	objptr, ##38028
087dc     0A 27 1A F2 | 	cmp	local01, arg02 wcz
087e0     0C 00 90 ED |  if_be	jmp	#LR__0761
087e4     13 13 02 F6 | 	mov	arg01, local01
087e8     F4 F0 BF FD | 	call	#_add_line_at_end
087ec     08 00 90 FD | 	jmp	#LR__0762
087f0                 | LR__0761
087f0     13 13 02 F6 | 	mov	arg01, local01
087f4     CC EE BF FD | 	call	#_insertline
087f8                 | LR__0762
087f8                 | LR__0763
087f8                 | LR__0764
087f8                 | LR__0765
087f8                 | ' return err
087f8     15 FB 01 F6 | 	mov	result1, local03
087fc     A7 F0 03 F6 | 	mov	ptra, fp
08800     B2 00 A0 FD | 	call	#popregs_
08804                 | _compile_ret
08804     2D 00 64 FD | 	ret
08808                 | 
08808                 | ' 
08808                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
08808                 | ' 
08808                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
08808                 | _compile_assign
08808     03 4A 05 F6 | 	mov	COUNT_, #3
0880c     A8 00 A0 FD | 	call	#pushregs_
08810     09 27 02 F6 | 	mov	local01, arg01
08814     0B 29 02 F6 | 	mov	local02, arg03
08818     47 00 00 FF 
0881c     7C E4 05 F1 | 	add	objptr, ##36476
08820     F2 26 62 FC | 	wrlong	local01, objptr
08824     04 E4 05 F1 | 	add	objptr, #4
08828     F2 14 62 FC | 	wrlong	arg02, objptr
0882c     47 00 00 FF 
08830     80 E4 85 F1 | 	sub	objptr, ##36480
08834     14 13 02 F6 | 	mov	arg01, local02
08838     01 12 06 F1 | 	add	arg01, #1
0883c     54 FB BF FD | 	call	#_compile_immediate_assign
08840     FD 2A 02 F6 | 	mov	local03, result1
08844                 | ' 
08844                 | ' ucompiledline(0)=alinemajor
08844                 | ' ucompiledline(1)=alineminor
08844                 | ' 
08844                 | ' err=compile_immediate_assign(cont+1) 
08844                 | ' if alinemajor>0 then
08844     01 26 16 F2 | 	cmp	local01, #1 wc
08848     6C 00 90 CD |  if_b	jmp	#LR__0775
0884c                 | '   if cont=3 orelse cont=2 then 
0884c     03 28 0E F2 | 	cmp	local02, #3 wz
08850     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08854     60 00 90 5D |  if_ne	jmp	#LR__0774
08858                 | '     if alinemajor >lastline then 
08858     4A 00 00 FF 
0885c     8C E4 05 F1 | 	add	objptr, ##38028
08860     F2 14 02 FB | 	rdlong	arg02, objptr
08864     4A 00 00 FF 
08868     8C E4 85 F1 | 	sub	objptr, ##38028
0886c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08870     0C 00 90 ED |  if_be	jmp	#LR__0770
08874     13 13 02 F6 | 	mov	arg01, local01
08878     64 F0 BF FD | 	call	#_add_line_at_end
0887c     38 00 90 FD | 	jmp	#LR__0773
08880                 | LR__0770
08880     13 13 02 F6 | 	mov	arg01, local01
08884     28 EA BF FD | 	call	#_deleteline
08888                 | '       deleteline(alinemajor)  
08888                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08888     4A 00 00 FF 
0888c     8C E4 05 F1 | 	add	objptr, ##38028
08890     F2 14 02 FB | 	rdlong	arg02, objptr
08894     4A 00 00 FF 
08898     8C E4 85 F1 | 	sub	objptr, ##38028
0889c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
088a0     0C 00 90 ED |  if_be	jmp	#LR__0771
088a4     13 13 02 F6 | 	mov	arg01, local01
088a8     34 F0 BF FD | 	call	#_add_line_at_end
088ac     08 00 90 FD | 	jmp	#LR__0772
088b0                 | LR__0771
088b0     13 13 02 F6 | 	mov	arg01, local01
088b4     0C EE BF FD | 	call	#_insertline
088b8                 | LR__0772
088b8                 | LR__0773
088b8                 | LR__0774
088b8                 | LR__0775
088b8                 | ' return err
088b8     15 FB 01 F6 | 	mov	result1, local03
088bc     A7 F0 03 F6 | 	mov	ptra, fp
088c0     B2 00 A0 FD | 	call	#popregs_
088c4                 | _compile_assign_ret
088c4     2D 00 64 FD | 	ret
088c8                 | 
088c8                 | ' 
088c8                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
088c8                 | ' 
088c8                 | ' function compile_fun_2p() as ulong
088c8                 | _compile_fun_2p
088c8     01 4A 05 F6 | 	mov	COUNT_, #1
088cc     A8 00 A0 FD | 	call	#pushregs_
088d0     30 37 B0 FD | 	call	#_expr
088d4     FD 26 02 F6 | 	mov	local01, result1
088d8                 | ' err=expr() : if err>0 then return err
088d8     01 26 16 F2 | 	cmp	local01, #1 wc
088dc     13 FB 01 36 |  if_ae	mov	result1, local01
088e0     60 00 90 3D |  if_ae	jmp	#LR__0780
088e4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088e4     37 00 00 FF 
088e8     44 E4 05 F1 | 	add	objptr, ##28228
088ec     F2 26 02 FB | 	rdlong	local01, objptr
088f0     03 26 66 F0 | 	shl	local01, #3
088f4     02 00 00 FF 
088f8     38 E4 85 F1 | 	sub	objptr, ##1080
088fc     F2 26 02 F1 | 	add	local01, objptr
08900     04 26 06 F1 | 	add	local01, #4
08904     13 27 02 FB | 	rdlong	local01, local01
08908     11 26 0E F2 | 	cmp	local01, #17 wz
0890c     35 00 00 FF 
08910     0C E4 85 F1 | 	sub	objptr, ##27148
08914     15 FA 05 56 |  if_ne	mov	result1, #21
08918     28 00 90 5D |  if_ne	jmp	#LR__0780
0891c     37 00 00 FF 
08920     44 E4 05 F1 | 	add	objptr, ##28228
08924     F2 26 02 FB | 	rdlong	local01, objptr
08928     01 26 06 F1 | 	add	local01, #1
0892c     F2 26 62 FC | 	wrlong	local01, objptr
08930     37 00 00 FF 
08934     44 E4 85 F1 | 	sub	objptr, ##28228
08938     C8 36 B0 FD | 	call	#_expr
0893c                 | ' err=expr() : if err>0 then return err
0893c     01 FA 15 F2 | 	cmp	result1, #1 wc
08940                 | ' return 0
08940     00 FA 05 C6 |  if_b	mov	result1, #0
08944                 | LR__0780
08944     A7 F0 03 F6 | 	mov	ptra, fp
08948     B2 00 A0 FD | 	call	#popregs_
0894c                 | _compile_fun_2p_ret
0894c     2D 00 64 FD | 	ret
08950                 | 
08950                 | ' 
08950                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08950                 | ' 
08950                 | ' function compile_fun_3p() as ulong
08950                 | _compile_fun_3p
08950     01 4A 05 F6 | 	mov	COUNT_, #1
08954     A8 00 A0 FD | 	call	#pushregs_
08958     A8 36 B0 FD | 	call	#_expr
0895c     FD 26 02 F6 | 	mov	local01, result1
08960                 | ' err=expr() : if err>0 then return err
08960     01 26 16 F2 | 	cmp	local01, #1 wc
08964     13 FB 01 36 |  if_ae	mov	result1, local01
08968     C8 00 90 3D |  if_ae	jmp	#LR__0790
0896c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0896c     37 00 00 FF 
08970     44 E4 05 F1 | 	add	objptr, ##28228
08974     F2 26 02 FB | 	rdlong	local01, objptr
08978     03 26 66 F0 | 	shl	local01, #3
0897c     02 00 00 FF 
08980     38 E4 85 F1 | 	sub	objptr, ##1080
08984     F2 26 02 F1 | 	add	local01, objptr
08988     04 26 06 F1 | 	add	local01, #4
0898c     13 27 02 FB | 	rdlong	local01, local01
08990     11 26 0E F2 | 	cmp	local01, #17 wz
08994     35 00 00 FF 
08998     0C E4 85 F1 | 	sub	objptr, ##27148
0899c     15 FA 05 56 |  if_ne	mov	result1, #21
089a0     90 00 90 5D |  if_ne	jmp	#LR__0790
089a4     37 00 00 FF 
089a8     44 E4 05 F1 | 	add	objptr, ##28228
089ac     F2 26 02 FB | 	rdlong	local01, objptr
089b0     01 26 06 F1 | 	add	local01, #1
089b4     F2 26 62 FC | 	wrlong	local01, objptr
089b8     37 00 00 FF 
089bc     44 E4 85 F1 | 	sub	objptr, ##28228
089c0     40 36 B0 FD | 	call	#_expr
089c4     FD 26 02 F6 | 	mov	local01, result1
089c8                 | ' err=expr() : if err>0 then return err
089c8     01 26 16 F2 | 	cmp	local01, #1 wc
089cc     13 FB 01 36 |  if_ae	mov	result1, local01
089d0     60 00 90 3D |  if_ae	jmp	#LR__0790
089d4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
089d4     37 00 00 FF 
089d8     44 E4 05 F1 | 	add	objptr, ##28228
089dc     F2 26 02 FB | 	rdlong	local01, objptr
089e0     03 26 66 F0 | 	shl	local01, #3
089e4     02 00 00 FF 
089e8     38 E4 85 F1 | 	sub	objptr, ##1080
089ec     F2 26 02 F1 | 	add	local01, objptr
089f0     04 26 06 F1 | 	add	local01, #4
089f4     13 27 02 FB | 	rdlong	local01, local01
089f8     11 26 0E F2 | 	cmp	local01, #17 wz
089fc     35 00 00 FF 
08a00     0C E4 85 F1 | 	sub	objptr, ##27148
08a04     15 FA 05 56 |  if_ne	mov	result1, #21
08a08     28 00 90 5D |  if_ne	jmp	#LR__0790
08a0c     37 00 00 FF 
08a10     44 E4 05 F1 | 	add	objptr, ##28228
08a14     F2 26 02 FB | 	rdlong	local01, objptr
08a18     01 26 06 F1 | 	add	local01, #1
08a1c     F2 26 62 FC | 	wrlong	local01, objptr
08a20     37 00 00 FF 
08a24     44 E4 85 F1 | 	sub	objptr, ##28228
08a28     D8 35 B0 FD | 	call	#_expr
08a2c                 | ' err=expr() : if err>0 then return err
08a2c     01 FA 15 F2 | 	cmp	result1, #1 wc
08a30                 | ' return 0
08a30     00 FA 05 C6 |  if_b	mov	result1, #0
08a34                 | LR__0790
08a34     A7 F0 03 F6 | 	mov	ptra, fp
08a38     B2 00 A0 FD | 	call	#popregs_
08a3c                 | _compile_fun_3p_ret
08a3c     2D 00 64 FD | 	ret
08a40                 | 
08a40                 | ' 
08a40                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08a40                 | ' 
08a40                 | ' function compile_fun_4p() as ulong
08a40                 | _compile_fun_4p
08a40     01 4A 05 F6 | 	mov	COUNT_, #1
08a44     A8 00 A0 FD | 	call	#pushregs_
08a48     B8 35 B0 FD | 	call	#_expr
08a4c     FD 26 02 F6 | 	mov	local01, result1
08a50                 | ' err=expr() : if err>0 then return err
08a50     01 26 16 F2 | 	cmp	local01, #1 wc
08a54     13 FB 01 36 |  if_ae	mov	result1, local01
08a58     30 01 90 3D |  if_ae	jmp	#LR__0800
08a5c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08a5c     37 00 00 FF 
08a60     44 E4 05 F1 | 	add	objptr, ##28228
08a64     F2 26 02 FB | 	rdlong	local01, objptr
08a68     03 26 66 F0 | 	shl	local01, #3
08a6c     02 00 00 FF 
08a70     38 E4 85 F1 | 	sub	objptr, ##1080
08a74     F2 26 02 F1 | 	add	local01, objptr
08a78     04 26 06 F1 | 	add	local01, #4
08a7c     13 27 02 FB | 	rdlong	local01, local01
08a80     11 26 0E F2 | 	cmp	local01, #17 wz
08a84     35 00 00 FF 
08a88     0C E4 85 F1 | 	sub	objptr, ##27148
08a8c     15 FA 05 56 |  if_ne	mov	result1, #21
08a90     F8 00 90 5D |  if_ne	jmp	#LR__0800
08a94     37 00 00 FF 
08a98     44 E4 05 F1 | 	add	objptr, ##28228
08a9c     F2 26 02 FB | 	rdlong	local01, objptr
08aa0     01 26 06 F1 | 	add	local01, #1
08aa4     F2 26 62 FC | 	wrlong	local01, objptr
08aa8     37 00 00 FF 
08aac     44 E4 85 F1 | 	sub	objptr, ##28228
08ab0     50 35 B0 FD | 	call	#_expr
08ab4     FD 26 02 F6 | 	mov	local01, result1
08ab8                 | ' err=expr() : if err>0 then return err
08ab8     01 26 16 F2 | 	cmp	local01, #1 wc
08abc     13 FB 01 36 |  if_ae	mov	result1, local01
08ac0     C8 00 90 3D |  if_ae	jmp	#LR__0800
08ac4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08ac4     37 00 00 FF 
08ac8     44 E4 05 F1 | 	add	objptr, ##28228
08acc     F2 26 02 FB | 	rdlong	local01, objptr
08ad0     03 26 66 F0 | 	shl	local01, #3
08ad4     02 00 00 FF 
08ad8     38 E4 85 F1 | 	sub	objptr, ##1080
08adc     F2 26 02 F1 | 	add	local01, objptr
08ae0     04 26 06 F1 | 	add	local01, #4
08ae4     13 27 02 FB | 	rdlong	local01, local01
08ae8     11 26 0E F2 | 	cmp	local01, #17 wz
08aec     35 00 00 FF 
08af0     0C E4 85 F1 | 	sub	objptr, ##27148
08af4     15 FA 05 56 |  if_ne	mov	result1, #21
08af8     90 00 90 5D |  if_ne	jmp	#LR__0800
08afc     37 00 00 FF 
08b00     44 E4 05 F1 | 	add	objptr, ##28228
08b04     F2 26 02 FB | 	rdlong	local01, objptr
08b08     01 26 06 F1 | 	add	local01, #1
08b0c     F2 26 62 FC | 	wrlong	local01, objptr
08b10     37 00 00 FF 
08b14     44 E4 85 F1 | 	sub	objptr, ##28228
08b18     E8 34 B0 FD | 	call	#_expr
08b1c     FD 26 02 F6 | 	mov	local01, result1
08b20                 | ' err=expr() : if err>0 then return err
08b20     01 26 16 F2 | 	cmp	local01, #1 wc
08b24     13 FB 01 36 |  if_ae	mov	result1, local01
08b28     60 00 90 3D |  if_ae	jmp	#LR__0800
08b2c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08b2c     37 00 00 FF 
08b30     44 E4 05 F1 | 	add	objptr, ##28228
08b34     F2 26 02 FB | 	rdlong	local01, objptr
08b38     03 26 66 F0 | 	shl	local01, #3
08b3c     02 00 00 FF 
08b40     38 E4 85 F1 | 	sub	objptr, ##1080
08b44     F2 26 02 F1 | 	add	local01, objptr
08b48     04 26 06 F1 | 	add	local01, #4
08b4c     13 27 02 FB | 	rdlong	local01, local01
08b50     11 26 0E F2 | 	cmp	local01, #17 wz
08b54     35 00 00 FF 
08b58     0C E4 85 F1 | 	sub	objptr, ##27148
08b5c     15 FA 05 56 |  if_ne	mov	result1, #21
08b60     28 00 90 5D |  if_ne	jmp	#LR__0800
08b64     37 00 00 FF 
08b68     44 E4 05 F1 | 	add	objptr, ##28228
08b6c     F2 26 02 FB | 	rdlong	local01, objptr
08b70     01 26 06 F1 | 	add	local01, #1
08b74     F2 26 62 FC | 	wrlong	local01, objptr
08b78     37 00 00 FF 
08b7c     44 E4 85 F1 | 	sub	objptr, ##28228
08b80     80 34 B0 FD | 	call	#_expr
08b84                 | ' err=expr() : if err>0 then return err
08b84     01 FA 15 F2 | 	cmp	result1, #1 wc
08b88                 | ' return 0
08b88     00 FA 05 C6 |  if_b	mov	result1, #0
08b8c                 | LR__0800
08b8c     A7 F0 03 F6 | 	mov	ptra, fp
08b90     B2 00 A0 FD | 	call	#popregs_
08b94                 | _compile_fun_4p_ret
08b94     2D 00 64 FD | 	ret
08b98                 | 
08b98                 | ' 
08b98                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08b98                 | ' 
08b98                 | ' function compile_fun_varp() as ulong,ulong 
08b98                 | _compile_fun_varp
08b98     03 4A 05 F6 | 	mov	COUNT_, #3
08b9c     A8 00 A0 FD | 	call	#pushregs_
08ba0     00 26 06 F6 | 	mov	local01, #0
08ba4                 | ' 
08ba4                 | ' i=0 : err=0
08ba4                 | ' if lparts(ct).token<>token_end then
08ba4     37 00 00 FF 
08ba8     44 E4 05 F1 | 	add	objptr, ##28228
08bac     F2 28 02 FB | 	rdlong	local02, objptr
08bb0     03 28 66 F0 | 	shl	local02, #3
08bb4     02 00 00 FF 
08bb8     38 E4 85 F1 | 	sub	objptr, ##1080
08bbc     F2 28 02 F1 | 	add	local02, objptr
08bc0     04 28 06 F1 | 	add	local02, #4
08bc4     14 29 02 FB | 	rdlong	local02, local02
08bc8     FE 29 0E F2 | 	cmp	local02, #510 wz
08bcc     35 00 00 FF 
08bd0     0C E4 85 F1 | 	sub	objptr, ##27148
08bd4     88 00 90 AD |  if_e	jmp	#LR__0811
08bd8                 | '   do
08bd8                 | LR__0810
08bd8     28 34 B0 FD | 	call	#_expr
08bdc     01 26 06 F1 | 	add	local01, #1
08be0                 | '     expr()
08be0                 | '     i+=1
08be0                 | '     if lparts(ct).token=token_comma then ct+=1
08be0     37 00 00 FF 
08be4     44 E4 05 F1 | 	add	objptr, ##28228
08be8     F2 28 02 FB | 	rdlong	local02, objptr
08bec     03 28 66 F0 | 	shl	local02, #3
08bf0     02 00 00 FF 
08bf4     38 E4 85 F1 | 	sub	objptr, ##1080
08bf8     F2 28 02 F1 | 	add	local02, objptr
08bfc     04 28 06 F1 | 	add	local02, #4
08c00     14 29 02 FB | 	rdlong	local02, local02
08c04     11 28 0E F2 | 	cmp	local02, #17 wz
08c08     35 00 00 FF 
08c0c     0C E4 85 F1 | 	sub	objptr, ##27148
08c10     37 00 00 AF 
08c14     44 E4 05 A1 |  if_e	add	objptr, ##28228
08c18     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08c1c     01 2A 06 A1 |  if_e	add	local03, #1
08c20     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08c24     37 00 00 AF 
08c28     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08c2c                 | '     if lparts(ct).token=token_end then exit loop
08c2c     37 00 00 FF 
08c30     44 E4 05 F1 | 	add	objptr, ##28228
08c34     F2 28 02 FB | 	rdlong	local02, objptr
08c38     03 28 66 F0 | 	shl	local02, #3
08c3c     02 00 00 FF 
08c40     38 E4 85 F1 | 	sub	objptr, ##1080
08c44     F2 28 02 F1 | 	add	local02, objptr
08c48     04 28 06 F1 | 	add	local02, #4
08c4c     14 29 02 FB | 	rdlong	local02, local02
08c50     FE 29 0E F2 | 	cmp	local02, #510 wz
08c54     35 00 00 FF 
08c58     0C E4 85 F1 | 	sub	objptr, ##27148
08c5c     78 FF 9F 5D |  if_ne	jmp	#LR__0810
08c60                 | LR__0811
08c60                 | ' return i,err
08c60     13 FB 01 F6 | 	mov	result1, local01
08c64     00 FC 05 F6 | 	mov	result2, #0
08c68     A7 F0 03 F6 | 	mov	ptra, fp
08c6c     B2 00 A0 FD | 	call	#popregs_
08c70                 | _compile_fun_varp_ret
08c70     2D 00 64 FD | 	ret
08c74                 | 
08c74                 | ' 
08c74                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08c74                 | ' 
08c74                 | ' function compile_read() as ulong,ulong 
08c74                 | _compile_read
08c74     04 4A 05 F6 | 	mov	COUNT_, #4
08c78     A8 00 A0 FD | 	call	#pushregs_
08c7c     00 26 06 F6 | 	mov	local01, #0
08c80                 | ' 
08c80                 | ' i=0 : err=0
08c80                 | ' if lparts(ct).token<>token_end then
08c80     37 00 00 FF 
08c84     44 E4 05 F1 | 	add	objptr, ##28228
08c88     F2 28 02 FB | 	rdlong	local02, objptr
08c8c     03 28 66 F0 | 	shl	local02, #3
08c90     02 00 00 FF 
08c94     38 E4 85 F1 | 	sub	objptr, ##1080
08c98     F2 28 02 F1 | 	add	local02, objptr
08c9c     04 28 06 F1 | 	add	local02, #4
08ca0     14 29 02 FB | 	rdlong	local02, local02
08ca4     FE 29 0E F2 | 	cmp	local02, #510 wz
08ca8     35 00 00 FF 
08cac     0C E4 85 F1 | 	sub	objptr, ##27148
08cb0     98 00 90 AD |  if_e	jmp	#LR__0821
08cb4                 | '   do
08cb4                 | LR__0820
08cb4     B8 2F B0 FD | 	call	#_getaddr
08cb8     FD 2A 02 F6 | 	mov	local03, result1
08cbc     37 00 00 FF 
08cc0     44 E4 05 F1 | 	add	objptr, ##28228
08cc4     F2 28 02 FB | 	rdlong	local02, objptr
08cc8     01 28 06 F1 | 	add	local02, #1
08ccc     F2 28 62 FC | 	wrlong	local02, objptr
08cd0     01 26 06 F1 | 	add	local01, #1
08cd4                 | '     err=getaddr() :ct+=1
08cd4                 | '     i+=1 
08cd4                 | '     if lparts(ct).token=token_comma then ct+=1 
08cd4     03 28 66 F0 | 	shl	local02, #3
08cd8     02 00 00 FF 
08cdc     38 E4 85 F1 | 	sub	objptr, ##1080
08ce0     F2 28 02 F1 | 	add	local02, objptr
08ce4     04 28 06 F1 | 	add	local02, #4
08ce8     14 29 02 FB | 	rdlong	local02, local02
08cec     11 28 0E F2 | 	cmp	local02, #17 wz
08cf0     35 00 00 FF 
08cf4     0C E4 85 F1 | 	sub	objptr, ##27148
08cf8     37 00 00 AF 
08cfc     44 E4 05 A1 |  if_e	add	objptr, ##28228
08d00     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08d04     01 2C 06 A1 |  if_e	add	local04, #1
08d08     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08d0c     37 00 00 AF 
08d10     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08d14                 | '     if lparts(ct).token=token_end then exit loop
08d14     37 00 00 FF 
08d18     44 E4 05 F1 | 	add	objptr, ##28228
08d1c     F2 28 02 FB | 	rdlong	local02, objptr
08d20     03 28 66 F0 | 	shl	local02, #3
08d24     02 00 00 FF 
08d28     38 E4 85 F1 | 	sub	objptr, ##1080
08d2c     F2 28 02 F1 | 	add	local02, objptr
08d30     04 28 06 F1 | 	add	local02, #4
08d34     14 29 02 FB | 	rdlong	local02, local02
08d38     FE 29 0E F2 | 	cmp	local02, #510 wz
08d3c     35 00 00 FF 
08d40     0C E4 85 F1 | 	sub	objptr, ##27148
08d44     08 00 90 AD |  if_e	jmp	#LR__0822
08d48     68 FF 9F FD | 	jmp	#LR__0820
08d4c                 | LR__0821
08d4c     36 2A 06 F6 | 	mov	local03, #54
08d50                 | LR__0822
08d50                 | ' return i,err
08d50     13 FB 01 F6 | 	mov	result1, local01
08d54     15 FD 01 F6 | 	mov	result2, local03
08d58     A7 F0 03 F6 | 	mov	ptra, fp
08d5c     B2 00 A0 FD | 	call	#popregs_
08d60                 | _compile_read_ret
08d60     2D 00 64 FD | 	ret
08d64                 | 
08d64                 | ' 
08d64                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08d64                 | ' 
08d64                 | ' function compile_input() as ulong,ulong 
08d64                 | _compile_input
08d64     0F 4A 05 F6 | 	mov	COUNT_, #15
08d68     A8 00 A0 FD | 	call	#pushregs_
08d6c                 | ' 
08d6c                 | ' if lparts(ct).token=token_string then
08d6c     37 00 00 FF 
08d70     44 E4 05 F1 | 	add	objptr, ##28228
08d74     F2 16 02 FB | 	rdlong	arg03, objptr
08d78     03 16 66 F0 | 	shl	arg03, #3
08d7c     02 00 00 FF 
08d80     38 E4 85 F1 | 	sub	objptr, ##1080
08d84     F2 16 02 F1 | 	add	arg03, objptr
08d88     04 16 06 F1 | 	add	arg03, #4
08d8c     0B FD 01 FB | 	rdlong	result2, arg03
08d90     01 00 00 FF 
08d94     03 FC 0D F2 | 	cmp	result2, ##515 wz
08d98     35 00 00 FF 
08d9c     0C E4 85 F1 | 	sub	objptr, ##27148
08da0     38 06 90 5D |  if_ne	jmp	#LR__0837
08da4     37 00 00 FF 
08da8     44 E4 05 F1 | 	add	objptr, ##28228
08dac     F2 14 02 FB | 	rdlong	arg02, objptr
08db0     03 14 66 F0 | 	shl	arg02, #3
08db4     02 00 00 FF 
08db8     38 E4 85 F1 | 	sub	objptr, ##1080
08dbc     F2 14 02 F1 | 	add	arg02, objptr
08dc0     0A 13 02 FB | 	rdlong	arg01, arg02
08dc4     35 00 00 FF 
08dc8     0C E4 85 F1 | 	sub	objptr, ##27148
08dcc     09 2D 02 F6 | 	mov	local04, arg01
08dd0     97 06 48 FB | 	callpa	#(@LR__0831-@LR__0830)>>2,fcache_load_ptr_
08dd4                 | LR__0830
08dd4     16 FB C9 FA | 	rdbyte	result1, local04 wz
08dd8     01 2C 06 51 |  if_ne	add	local04, #1
08ddc     F4 FF 9F 5D |  if_ne	jmp	#LR__0830
08de0                 | LR__0831
08de0     09 2D 82 F1 | 	sub	local04, arg01
08de4     16 FB 01 F6 | 	mov	result1, local04
08de8     52 00 00 FF 
08dec     2C E5 05 F1 | 	add	objptr, ##42284
08df0     F2 FA 61 FC | 	wrlong	result1, objptr
08df4     5C E4 85 F1 | 	sub	objptr, #92
08df8     F2 12 02 FB | 	rdlong	arg01, objptr
08dfc     FD 12 82 F1 | 	sub	arg01, result1
08e00     04 12 86 F1 | 	sub	arg01, #4
08e04     03 12 26 F5 | 	andn	arg01, #3
08e08     F2 12 62 FC | 	wrlong	arg01, objptr
08e0c     5C E4 05 F1 | 	add	objptr, #92
08e10     F2 14 02 FB | 	rdlong	arg02, objptr
08e14     52 00 00 FF 
08e18     2C E5 85 F1 | 	sub	objptr, ##42284
08e1c     7C B4 B1 FD | 	call	#_pslpoke
08e20                 | '   pslpoke memtop,l
08e20                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08e20     01 2E 06 F6 | 	mov	local05, #1
08e24     52 00 00 FF 
08e28     2C E5 05 F1 | 	add	objptr, ##42284
08e2c     F2 30 02 FB | 	rdlong	local06, objptr
08e30     52 00 00 FF 
08e34     2C E5 85 F1 | 	sub	objptr, ##42284
08e38     01 30 06 F1 | 	add	local06, #1
08e3c                 | LR__0832
08e3c     18 2F 52 F2 | 	cmps	local05, local06 wc
08e40     5C 00 90 3D |  if_ae	jmp	#LR__0833
08e44     52 00 00 FF 
08e48     D0 E4 05 F1 | 	add	objptr, ##42192
08e4c     F2 32 02 FB | 	rdlong	local07, objptr
08e50     03 32 06 F1 | 	add	local07, #3
08e54     17 33 02 F1 | 	add	local07, local05
08e58     1B 00 00 FF 
08e5c     8C E4 85 F1 | 	sub	objptr, ##13964
08e60     F2 14 02 FB | 	rdlong	arg02, objptr
08e64     03 14 66 F0 | 	shl	arg02, #3
08e68     02 00 00 FF 
08e6c     38 E4 85 F1 | 	sub	objptr, ##1080
08e70     F2 14 02 F1 | 	add	arg02, objptr
08e74     0A 13 02 FB | 	rdlong	arg01, arg02
08e78     17 15 02 F6 | 	mov	arg02, local05
08e7c     01 16 06 F6 | 	mov	arg03, #1
08e80     35 00 00 FF 
08e84     0C E4 85 F1 | 	sub	objptr, ##27148
08e88     68 0E B2 FD | 	call	#__system__Mid_S
08e8c     FD 14 C2 FA | 	rdbyte	arg02, result1
08e90     19 13 02 F6 | 	mov	arg01, local07
08e94     94 B4 B1 FD | 	call	#_pspoke
08e98     01 2E 06 F1 | 	add	local05, #1
08e9c     9C FF 9F FD | 	jmp	#LR__0832
08ea0                 | LR__0833
08ea0     52 00 00 FF 
08ea4     D0 E4 05 F1 | 	add	objptr, ##42192
08ea8     F2 26 02 FB | 	rdlong	local01, objptr
08eac     2B 2A 06 F6 | 	mov	local03, #43
08eb0     13 35 02 F6 | 	mov	local08, local01
08eb4     14 33 02 F6 | 	mov	local07, local02
08eb8     15 37 02 F6 | 	mov	local09, local03
08ebc     08 00 00 FF 
08ec0     54 E4 85 F1 | 	sub	objptr, ##4180
08ec4     F2 30 02 FB | 	rdlong	local06, objptr
08ec8     18 2F 02 F6 | 	mov	local05, local06
08ecc     01 2E 66 F0 | 	shl	local05, #1
08ed0     18 2F 02 F1 | 	add	local05, local06
08ed4     02 2E 66 F0 | 	shl	local05, #2
08ed8     03 00 00 FF 
08edc     00 E4 85 F1 | 	sub	objptr, ##1536
08ee0     F2 2E 02 F1 | 	add	local05, objptr
08ee4     17 35 62 FC | 	wrlong	local08, local05
08ee8     03 00 00 FF 
08eec     00 E4 05 F1 | 	add	objptr, ##1536
08ef0     F2 34 02 FB | 	rdlong	local08, objptr
08ef4     1A 31 02 F6 | 	mov	local06, local08
08ef8     01 30 66 F0 | 	shl	local06, #1
08efc     1A 31 02 F1 | 	add	local06, local08
08f00     02 30 66 F0 | 	shl	local06, #2
08f04     03 00 00 FF 
08f08     00 E4 85 F1 | 	sub	objptr, ##1536
08f0c     F2 30 02 F1 | 	add	local06, objptr
08f10     04 30 06 F1 | 	add	local06, #4
08f14     18 33 62 FC | 	wrlong	local07, local06
08f18     03 00 00 FF 
08f1c     00 E4 05 F1 | 	add	objptr, ##1536
08f20     F2 34 02 FB | 	rdlong	local08, objptr
08f24     1A 33 02 F6 | 	mov	local07, local08
08f28     01 32 66 F0 | 	shl	local07, #1
08f2c     1A 33 02 F1 | 	add	local07, local08
08f30     02 32 66 F0 | 	shl	local07, #2
08f34     03 00 00 FF 
08f38     00 E4 85 F1 | 	sub	objptr, ##1536
08f3c     F2 32 02 F1 | 	add	local07, objptr
08f40     08 32 06 F1 | 	add	local07, #8
08f44     19 37 62 FC | 	wrlong	local09, local07
08f48     03 00 00 FF 
08f4c     00 E4 05 F1 | 	add	objptr, ##1536
08f50     F2 34 02 FB | 	rdlong	local08, objptr
08f54     01 34 06 F1 | 	add	local08, #1
08f58     F2 34 62 FC | 	wrlong	local08, objptr
08f5c     13 00 00 FF 
08f60     38 E4 85 F1 | 	sub	objptr, ##9784
08f64     F2 34 02 FB | 	rdlong	local08, objptr
08f68     01 34 06 F1 | 	add	local08, #1
08f6c     F2 34 62 FC | 	wrlong	local08, objptr
08f70                 | '   t1.result.uresult=memtop
08f70                 | '   t1.result_type=result_string2  
08f70                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08f70                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08f70     03 34 66 F0 | 	shl	local08, #3
08f74     02 00 00 FF 
08f78     38 E4 85 F1 | 	sub	objptr, ##1080
08f7c     F2 34 02 F1 | 	add	local08, objptr
08f80     04 34 06 F1 | 	add	local08, #4
08f84     1A 35 02 FB | 	rdlong	local08, local08
08f88     11 34 0E F2 | 	cmp	local08, #17 wz
08f8c     35 00 00 FF 
08f90     0C E4 85 F1 | 	sub	objptr, ##27148
08f94     60 01 90 5D |  if_ne	jmp	#LR__0834
08f98     21 2A 06 F6 | 	mov	local03, #33
08f9c     13 35 02 F6 | 	mov	local08, local01
08fa0     14 33 02 F6 | 	mov	local07, local02
08fa4     15 39 02 F6 | 	mov	local10, local03
08fa8     4A 00 00 FF 
08fac     7C E4 05 F1 | 	add	objptr, ##38012
08fb0     F2 3A 02 FB | 	rdlong	local11, objptr
08fb4     1D 3D 02 F6 | 	mov	local12, local11
08fb8     01 3C 66 F0 | 	shl	local12, #1
08fbc     1D 3D 02 F1 | 	add	local12, local11
08fc0     02 3C 66 F0 | 	shl	local12, #2
08fc4     03 00 00 FF 
08fc8     00 E4 85 F1 | 	sub	objptr, ##1536
08fcc     F2 3C 02 F1 | 	add	local12, objptr
08fd0     1E 35 62 FC | 	wrlong	local08, local12
08fd4     03 00 00 FF 
08fd8     00 E4 05 F1 | 	add	objptr, ##1536
08fdc     F2 3E 02 FB | 	rdlong	local13, objptr
08fe0     1F 35 02 F6 | 	mov	local08, local13
08fe4     01 34 66 F0 | 	shl	local08, #1
08fe8     1F 35 02 F1 | 	add	local08, local13
08fec     02 34 66 F0 | 	shl	local08, #2
08ff0     03 00 00 FF 
08ff4     00 E4 85 F1 | 	sub	objptr, ##1536
08ff8     F2 34 02 F1 | 	add	local08, objptr
08ffc     04 34 06 F1 | 	add	local08, #4
09000     1A 33 62 FC | 	wrlong	local07, local08
09004     03 00 00 FF 
09008     00 E4 05 F1 | 	add	objptr, ##1536
0900c     F2 34 02 FB | 	rdlong	local08, objptr
09010     1A 41 02 F6 | 	mov	local14, local08
09014     01 40 66 F0 | 	shl	local14, #1
09018     1A 41 02 F1 | 	add	local14, local08
0901c     02 40 66 F0 | 	shl	local14, #2
09020     03 00 00 FF 
09024     00 E4 85 F1 | 	sub	objptr, ##1536
09028     F2 40 02 F1 | 	add	local14, objptr
0902c     08 40 06 F1 | 	add	local14, #8
09030     20 39 62 FC | 	wrlong	local10, local14
09034     03 00 00 FF 
09038     00 E4 05 F1 | 	add	objptr, ##1536
0903c     F2 34 02 FB | 	rdlong	local08, objptr
09040     01 34 06 F1 | 	add	local08, #1
09044     F2 34 62 FC | 	wrlong	local08, objptr
09048     44 2A 06 F6 | 	mov	local03, #68
0904c     13 35 02 F6 | 	mov	local08, local01
09050     14 33 02 F6 | 	mov	local07, local02
09054     15 39 02 F6 | 	mov	local10, local03
09058     F2 40 02 FB | 	rdlong	local14, objptr
0905c     20 3F 02 F6 | 	mov	local13, local14
09060     01 3E 66 F0 | 	shl	local13, #1
09064     20 3F 02 F1 | 	add	local13, local14
09068     02 3E 66 F0 | 	shl	local13, #2
0906c     03 00 00 FF 
09070     00 E4 85 F1 | 	sub	objptr, ##1536
09074     F2 3E 02 F1 | 	add	local13, objptr
09078     1F 35 62 FC | 	wrlong	local08, local13
0907c     03 00 00 FF 
09080     00 E4 05 F1 | 	add	objptr, ##1536
09084     F2 40 02 FB | 	rdlong	local14, objptr
09088     20 3F 02 F6 | 	mov	local13, local14
0908c     01 3E 66 F0 | 	shl	local13, #1
09090     20 3F 02 F1 | 	add	local13, local14
09094     02 3E 66 F0 | 	shl	local13, #2
09098     03 00 00 FF 
0909c     00 E4 85 F1 | 	sub	objptr, ##1536
090a0     F2 3E 02 F1 | 	add	local13, objptr
090a4     04 3E 06 F1 | 	add	local13, #4
090a8     1F 33 62 FC | 	wrlong	local07, local13
090ac     03 00 00 FF 
090b0     00 E4 05 F1 | 	add	objptr, ##1536
090b4     F2 3E 02 FB | 	rdlong	local13, objptr
090b8     1F 41 02 F6 | 	mov	local14, local13
090bc     01 40 66 F0 | 	shl	local14, #1
090c0     1F 41 02 F1 | 	add	local14, local13
090c4     02 40 66 F0 | 	shl	local14, #2
090c8     03 00 00 FF 
090cc     00 E4 85 F1 | 	sub	objptr, ##1536
090d0     F2 40 02 F1 | 	add	local14, objptr
090d4     08 40 06 F1 | 	add	local14, #8
090d8     20 39 62 FC | 	wrlong	local10, local14
090dc     03 00 00 FF 
090e0     00 E4 05 F1 | 	add	objptr, ##1536
090e4     F2 34 02 FB | 	rdlong	local08, objptr
090e8     01 34 06 F1 | 	add	local08, #1
090ec     F2 34 62 FC | 	wrlong	local08, objptr
090f0     4A 00 00 FF 
090f4     7C E4 85 F1 | 	sub	objptr, ##38012
090f8                 | LR__0834
090f8                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
090f8     37 00 00 FF 
090fc     44 E4 05 F1 | 	add	objptr, ##28228
09100     F2 34 02 FB | 	rdlong	local08, objptr
09104     03 34 66 F0 | 	shl	local08, #3
09108     02 00 00 FF 
0910c     38 E4 85 F1 | 	sub	objptr, ##1080
09110     F2 34 02 F1 | 	add	local08, objptr
09114     04 34 06 F1 | 	add	local08, #4
09118     1A 41 02 FB | 	rdlong	local14, local08
0911c     12 40 0E F2 | 	cmp	local14, #18 wz
09120     35 00 00 FF 
09124     0C E4 85 F1 | 	sub	objptr, ##27148
09128     60 01 90 5D |  if_ne	jmp	#LR__0835
0912c     22 2A 06 F6 | 	mov	local03, #34
09130     13 35 02 F6 | 	mov	local08, local01
09134     14 33 02 F6 | 	mov	local07, local02
09138     15 39 02 F6 | 	mov	local10, local03
0913c     4A 00 00 FF 
09140     7C E4 05 F1 | 	add	objptr, ##38012
09144     F2 40 02 FB | 	rdlong	local14, objptr
09148     20 3F 02 F6 | 	mov	local13, local14
0914c     01 3E 66 F0 | 	shl	local13, #1
09150     20 3F 02 F1 | 	add	local13, local14
09154     02 3E 66 F0 | 	shl	local13, #2
09158     03 00 00 FF 
0915c     00 E4 85 F1 | 	sub	objptr, ##1536
09160     F2 3E 02 F1 | 	add	local13, objptr
09164     1F 35 62 FC | 	wrlong	local08, local13
09168     03 00 00 FF 
0916c     00 E4 05 F1 | 	add	objptr, ##1536
09170     F2 40 02 FB | 	rdlong	local14, objptr
09174     20 35 02 F6 | 	mov	local08, local14
09178     01 34 66 F0 | 	shl	local08, #1
0917c     20 35 02 F1 | 	add	local08, local14
09180     02 34 66 F0 | 	shl	local08, #2
09184     03 00 00 FF 
09188     00 E4 85 F1 | 	sub	objptr, ##1536
0918c     F2 34 02 F1 | 	add	local08, objptr
09190     04 34 06 F1 | 	add	local08, #4
09194     1A 33 62 FC | 	wrlong	local07, local08
09198     03 00 00 FF 
0919c     00 E4 05 F1 | 	add	objptr, ##1536
091a0     F2 34 02 FB | 	rdlong	local08, objptr
091a4     1A 41 02 F6 | 	mov	local14, local08
091a8     01 40 66 F0 | 	shl	local14, #1
091ac     1A 41 02 F1 | 	add	local14, local08
091b0     02 40 66 F0 | 	shl	local14, #2
091b4     03 00 00 FF 
091b8     00 E4 85 F1 | 	sub	objptr, ##1536
091bc     F2 40 02 F1 | 	add	local14, objptr
091c0     08 40 06 F1 | 	add	local14, #8
091c4     20 39 62 FC | 	wrlong	local10, local14
091c8     03 00 00 FF 
091cc     00 E4 05 F1 | 	add	objptr, ##1536
091d0     F2 34 02 FB | 	rdlong	local08, objptr
091d4     01 34 06 F1 | 	add	local08, #1
091d8     F2 34 62 FC | 	wrlong	local08, objptr
091dc     44 2A 06 F6 | 	mov	local03, #68
091e0     13 35 02 F6 | 	mov	local08, local01
091e4     14 33 02 F6 | 	mov	local07, local02
091e8     15 39 02 F6 | 	mov	local10, local03
091ec     F2 40 02 FB | 	rdlong	local14, objptr
091f0     20 3F 02 F6 | 	mov	local13, local14
091f4     01 3E 66 F0 | 	shl	local13, #1
091f8     20 3F 02 F1 | 	add	local13, local14
091fc     02 3E 66 F0 | 	shl	local13, #2
09200     03 00 00 FF 
09204     00 E4 85 F1 | 	sub	objptr, ##1536
09208     F2 3E 02 F1 | 	add	local13, objptr
0920c     1F 35 62 FC | 	wrlong	local08, local13
09210     03 00 00 FF 
09214     00 E4 05 F1 | 	add	objptr, ##1536
09218     F2 40 02 FB | 	rdlong	local14, objptr
0921c     20 3F 02 F6 | 	mov	local13, local14
09220     01 3E 66 F0 | 	shl	local13, #1
09224     20 3F 02 F1 | 	add	local13, local14
09228     02 3E 66 F0 | 	shl	local13, #2
0922c     03 00 00 FF 
09230     00 E4 85 F1 | 	sub	objptr, ##1536
09234     F2 3E 02 F1 | 	add	local13, objptr
09238     04 3E 06 F1 | 	add	local13, #4
0923c     1F 33 62 FC | 	wrlong	local07, local13
09240     03 00 00 FF 
09244     00 E4 05 F1 | 	add	objptr, ##1536
09248     F2 3E 02 FB | 	rdlong	local13, objptr
0924c     1F 41 02 F6 | 	mov	local14, local13
09250     01 40 66 F0 | 	shl	local14, #1
09254     1F 41 02 F1 | 	add	local14, local13
09258     02 40 66 F0 | 	shl	local14, #2
0925c     03 00 00 FF 
09260     00 E4 85 F1 | 	sub	objptr, ##1536
09264     F2 40 02 F1 | 	add	local14, objptr
09268     08 40 06 F1 | 	add	local14, #8
0926c     20 39 62 FC | 	wrlong	local10, local14
09270     03 00 00 FF 
09274     00 E4 05 F1 | 	add	objptr, ##1536
09278     F2 34 02 FB | 	rdlong	local08, objptr
0927c     01 34 06 F1 | 	add	local08, #1
09280     F2 34 62 FC | 	wrlong	local08, objptr
09284     4A 00 00 FF 
09288     7C E4 85 F1 | 	sub	objptr, ##38012
0928c                 | LR__0835
0928c                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
0928c     37 00 00 FF 
09290     44 E4 05 F1 | 	add	objptr, ##28228
09294     F2 34 02 FB | 	rdlong	local08, objptr
09298     03 34 66 F0 | 	shl	local08, #3
0929c     02 00 00 FF 
092a0     38 E4 85 F1 | 	sub	objptr, ##1080
092a4     F2 34 02 F1 | 	add	local08, objptr
092a8     04 34 06 F1 | 	add	local08, #4
092ac     1A 41 02 FB | 	rdlong	local14, local08
092b0     12 40 0E F2 | 	cmp	local14, #18 wz
092b4     35 00 00 FF 
092b8     0C E4 85 F1 | 	sub	objptr, ##27148
092bc     00 01 90 AD |  if_e	jmp	#LR__0836
092c0     37 00 00 FF 
092c4     44 E4 05 F1 | 	add	objptr, ##28228
092c8     F2 34 02 FB | 	rdlong	local08, objptr
092cc     03 34 66 F0 | 	shl	local08, #3
092d0     02 00 00 FF 
092d4     38 E4 85 F1 | 	sub	objptr, ##1080
092d8     F2 34 02 F1 | 	add	local08, objptr
092dc     04 34 06 F1 | 	add	local08, #4
092e0     1A 41 02 FB | 	rdlong	local14, local08
092e4     11 40 0E F2 | 	cmp	local14, #17 wz
092e8     35 00 00 FF 
092ec     0C E4 85 F1 | 	sub	objptr, ##27148
092f0     CC 00 90 AD |  if_e	jmp	#LR__0836
092f4     44 2A 06 F6 | 	mov	local03, #68
092f8     13 35 02 F6 | 	mov	local08, local01
092fc     14 33 02 F6 | 	mov	local07, local02
09300     15 39 02 F6 | 	mov	local10, local03
09304     4A 00 00 FF 
09308     7C E4 05 F1 | 	add	objptr, ##38012
0930c     F2 40 02 FB | 	rdlong	local14, objptr
09310     20 3F 02 F6 | 	mov	local13, local14
09314     01 3E 66 F0 | 	shl	local13, #1
09318     20 3F 02 F1 | 	add	local13, local14
0931c     02 3E 66 F0 | 	shl	local13, #2
09320     03 00 00 FF 
09324     00 E4 85 F1 | 	sub	objptr, ##1536
09328     F2 3E 02 F1 | 	add	local13, objptr
0932c     1F 35 62 FC | 	wrlong	local08, local13
09330     03 00 00 FF 
09334     00 E4 05 F1 | 	add	objptr, ##1536
09338     F2 40 02 FB | 	rdlong	local14, objptr
0933c     20 3F 02 F6 | 	mov	local13, local14
09340     01 3E 66 F0 | 	shl	local13, #1
09344     20 3F 02 F1 | 	add	local13, local14
09348     02 3E 66 F0 | 	shl	local13, #2
0934c     03 00 00 FF 
09350     00 E4 85 F1 | 	sub	objptr, ##1536
09354     F2 3E 02 F1 | 	add	local13, objptr
09358     04 3E 06 F1 | 	add	local13, #4
0935c     1F 33 62 FC | 	wrlong	local07, local13
09360     03 00 00 FF 
09364     00 E4 05 F1 | 	add	objptr, ##1536
09368     F2 3E 02 FB | 	rdlong	local13, objptr
0936c     1F 41 02 F6 | 	mov	local14, local13
09370     01 40 66 F0 | 	shl	local14, #1
09374     1F 41 02 F1 | 	add	local14, local13
09378     02 40 66 F0 | 	shl	local14, #2
0937c     03 00 00 FF 
09380     00 E4 85 F1 | 	sub	objptr, ##1536
09384     F2 40 02 F1 | 	add	local14, objptr
09388     08 40 06 F1 | 	add	local14, #8
0938c     20 39 62 FC | 	wrlong	local10, local14
09390     03 00 00 FF 
09394     00 E4 05 F1 | 	add	objptr, ##1536
09398     F2 34 02 FB | 	rdlong	local08, objptr
0939c     01 34 06 F1 | 	add	local08, #1
093a0     F2 34 62 FC | 	wrlong	local08, objptr
093a4     13 00 00 FF 
093a8     38 E4 85 F1 | 	sub	objptr, ##9784
093ac     F2 34 02 FB | 	rdlong	local08, objptr
093b0     01 34 86 F1 | 	sub	local08, #1
093b4     F2 34 62 FC | 	wrlong	local08, objptr
093b8     37 00 00 FF 
093bc     44 E4 85 F1 | 	sub	objptr, ##28228
093c0                 | LR__0836
093c0     37 00 00 FF 
093c4     44 E4 05 F1 | 	add	objptr, ##28228
093c8     F2 34 02 FB | 	rdlong	local08, objptr
093cc     01 34 06 F1 | 	add	local08, #1
093d0     F2 34 62 FC | 	wrlong	local08, objptr
093d4     37 00 00 FF 
093d8     44 E4 85 F1 | 	sub	objptr, ##28228
093dc                 | LR__0837
093dc     00 2E 06 F6 | 	mov	local05, #0
093e0                 | ' i=0 : err=0
093e0                 | ' if lparts(ct).token<>token_end then
093e0     37 00 00 FF 
093e4     44 E4 05 F1 | 	add	objptr, ##28228
093e8     F2 40 02 FB | 	rdlong	local14, objptr
093ec     03 40 66 F0 | 	shl	local14, #3
093f0     02 00 00 FF 
093f4     38 E4 85 F1 | 	sub	objptr, ##1080
093f8     F2 40 02 F1 | 	add	local14, objptr
093fc     04 40 06 F1 | 	add	local14, #4
09400     20 41 02 FB | 	rdlong	local14, local14
09404     FE 41 0E F2 | 	cmp	local14, #510 wz
09408     35 00 00 FF 
0940c     0C E4 85 F1 | 	sub	objptr, ##27148
09410     98 00 90 AD |  if_e	jmp	#LR__0839
09414                 | '   do
09414                 | LR__0838
09414     58 28 B0 FD | 	call	#_getaddr
09418     FD 42 02 F6 | 	mov	local15, result1
0941c     37 00 00 FF 
09420     44 E4 05 F1 | 	add	objptr, ##28228
09424     F2 40 02 FB | 	rdlong	local14, objptr
09428     01 40 06 F1 | 	add	local14, #1
0942c     F2 40 62 FC | 	wrlong	local14, objptr
09430     01 2E 06 F1 | 	add	local05, #1
09434                 | '     err=getaddr() :ct+=1
09434                 | '     i+=1 
09434                 | '     if lparts(ct).token=token_comma then ct+=1 
09434     03 40 66 F0 | 	shl	local14, #3
09438     02 00 00 FF 
0943c     38 E4 85 F1 | 	sub	objptr, ##1080
09440     F2 40 02 F1 | 	add	local14, objptr
09444     04 40 06 F1 | 	add	local14, #4
09448     20 41 02 FB | 	rdlong	local14, local14
0944c     11 40 0E F2 | 	cmp	local14, #17 wz
09450     35 00 00 FF 
09454     0C E4 85 F1 | 	sub	objptr, ##27148
09458     37 00 00 AF 
0945c     44 E4 05 A1 |  if_e	add	objptr, ##28228
09460     F2 34 02 AB |  if_e	rdlong	local08, objptr
09464     01 34 06 A1 |  if_e	add	local08, #1
09468     F2 34 62 AC |  if_e	wrlong	local08, objptr
0946c     37 00 00 AF 
09470     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09474                 | '     if lparts(ct).token=token_end then exit loop
09474     37 00 00 FF 
09478     44 E4 05 F1 | 	add	objptr, ##28228
0947c     F2 40 02 FB | 	rdlong	local14, objptr
09480     03 40 66 F0 | 	shl	local14, #3
09484     02 00 00 FF 
09488     38 E4 85 F1 | 	sub	objptr, ##1080
0948c     F2 40 02 F1 | 	add	local14, objptr
09490     04 40 06 F1 | 	add	local14, #4
09494     20 41 02 FB | 	rdlong	local14, local14
09498     FE 41 0E F2 | 	cmp	local14, #510 wz
0949c     35 00 00 FF 
094a0     0C E4 85 F1 | 	sub	objptr, ##27148
094a4     08 00 90 AD |  if_e	jmp	#LR__0840
094a8     68 FF 9F FD | 	jmp	#LR__0838
094ac                 | LR__0839
094ac     36 42 06 F6 | 	mov	local15, #54
094b0                 | LR__0840
094b0                 | ' return i,err
094b0     17 FB 01 F6 | 	mov	result1, local05
094b4     21 FD 01 F6 | 	mov	result2, local15
094b8     A7 F0 03 F6 | 	mov	ptra, fp
094bc     B2 00 A0 FD | 	call	#popregs_
094c0                 | _compile_input_ret
094c0     2D 00 64 FD | 	ret
094c4                 | 
094c4                 | ' 
094c4                 | ' '----- compile assign to an array element
094c4                 | ' 
094c4                 | ' function compile_array_assign() as ulong 
094c4                 | _compile_array_assign
094c4     0B 4A 05 F6 | 	mov	COUNT_, #11
094c8     A8 00 A0 FD | 	call	#pushregs_
094cc     00 2C 06 F6 | 	mov	local04, #0
094d0     00 2E 06 F6 | 	mov	local05, #0
094d4     37 00 00 FF 
094d8     44 E4 05 F1 | 	add	objptr, ##28228
094dc     F2 30 02 FB | 	rdlong	local06, objptr
094e0     18 FB 01 F6 | 	mov	result1, local06
094e4     01 FA 85 F1 | 	sub	result1, #1
094e8     03 FA 65 F0 | 	shl	result1, #3
094ec     02 00 00 FF 
094f0     38 E4 85 F1 | 	sub	objptr, ##1080
094f4     F2 FA 01 F1 | 	add	result1, objptr
094f8     FD 32 02 FB | 	rdlong	local07, result1
094fc                 | ' numpar=0 : err=0
094fc                 | ' varname$=lparts(ct-1).part$
094fc                 | ' if lparts(ct).token=token_lpar then
094fc     03 30 66 F0 | 	shl	local06, #3
09500     F2 30 02 F1 | 	add	local06, objptr
09504     04 30 06 F1 | 	add	local06, #4
09508     18 31 02 FB | 	rdlong	local06, local06
0950c     15 30 0E F2 | 	cmp	local06, #21 wz
09510     35 00 00 FF 
09514     0C E4 85 F1 | 	sub	objptr, ##27148
09518     F4 01 90 5D |  if_ne	jmp	#LR__0854
0951c     37 00 00 FF 
09520     44 E4 05 F1 | 	add	objptr, ##28228
09524     F2 34 02 FB | 	rdlong	local08, objptr
09528     01 34 06 F1 | 	add	local08, #1
0952c     F2 34 62 FC | 	wrlong	local08, objptr
09530     37 00 00 FF 
09534     44 E4 85 F1 | 	sub	objptr, ##28228
09538                 | '   ct+=1 											' omit this lpar, this is for expr list
09538                 | '   do
09538                 | LR__0850
09538     C8 2A B0 FD | 	call	#_expr
0953c     37 00 00 FF 
09540     44 E4 05 F1 | 	add	objptr, ##28228
09544     F2 30 02 FB | 	rdlong	local06, objptr
09548     01 30 06 F1 | 	add	local06, #1
0954c     F2 30 62 FC | 	wrlong	local06, objptr
09550     01 2C 06 F1 | 	add	local04, #1
09554     01 30 86 F1 | 	sub	local06, #1
09558     03 30 66 F0 | 	shl	local06, #3
0955c     02 00 00 FF 
09560     38 E4 85 F1 | 	sub	objptr, ##1080
09564     F2 30 02 F1 | 	add	local06, objptr
09568     04 30 06 F1 | 	add	local06, #4
0956c     18 35 02 FB | 	rdlong	local08, local06
09570     14 34 0E F2 | 	cmp	local08, #20 wz
09574     35 00 00 FF 
09578     0C E4 85 F1 | 	sub	objptr, ##27148
0957c     34 00 90 AD |  if_e	jmp	#LR__0851
09580     37 00 00 FF 
09584     44 E4 05 F1 | 	add	objptr, ##28228
09588     F2 34 02 FB | 	rdlong	local08, objptr
0958c     03 34 66 F0 | 	shl	local08, #3
09590     02 00 00 FF 
09594     38 E4 85 F1 | 	sub	objptr, ##1080
09598     F2 34 02 F1 | 	add	local08, objptr
0959c     04 34 06 F1 | 	add	local08, #4
095a0     1A 35 02 FB | 	rdlong	local08, local08
095a4     FE 35 0E F2 | 	cmp	local08, #510 wz
095a8     35 00 00 FF 
095ac     0C E4 85 F1 | 	sub	objptr, ##27148
095b0     84 FF 9F 5D |  if_ne	jmp	#LR__0850
095b4                 | LR__0851
095b4     37 00 00 FF 
095b8     44 E4 05 F1 | 	add	objptr, ##28228
095bc     F2 34 02 FB | 	rdlong	local08, objptr
095c0     01 34 06 F1 | 	add	local08, #1
095c4     F2 34 62 FC | 	wrlong	local08, objptr
095c8     37 00 00 FF 
095cc     44 E4 85 F1 | 	sub	objptr, ##28228
095d0     30 2A B0 FD | 	call	#_expr
095d4     01 36 66 F6 | 	neg	local09, #1
095d8     00 38 06 F6 | 	mov	local10, #0
095dc                 | '   ct+=1 : expr()
095dc                 | '   j=-1 : i=0 
095dc                 | '   do 
095dc                 | LR__0852
095dc                 | '     if variables(i).name=varname$ then j=i: exit loop
095dc     1C 31 02 F6 | 	mov	local06, local10
095e0     04 30 66 F0 | 	shl	local06, #4
095e4     14 00 00 FF 
095e8     F8 E5 05 F1 | 	add	objptr, ##10744
095ec     F2 30 02 F1 | 	add	local06, objptr
095f0     18 13 02 FB | 	rdlong	arg01, local06
095f4     19 15 02 F6 | 	mov	arg02, local07
095f8     14 00 00 FF 
095fc     F8 E5 85 F1 | 	sub	objptr, ##10744
09600     80 E5 B1 FD | 	call	#__system___string_cmp
09604     00 FA 0D F2 | 	cmp	result1, #0 wz
09608     1C 37 02 A6 |  if_e	mov	local09, local10
0960c     20 00 90 AD |  if_e	jmp	#LR__0853
09610     01 38 06 F1 | 	add	local10, #1
09614     35 00 00 FF 
09618     08 E4 05 F1 | 	add	objptr, ##27144
0961c     F2 34 02 FB | 	rdlong	local08, objptr
09620     35 00 00 FF 
09624     08 E4 85 F1 | 	sub	objptr, ##27144
09628     1A 39 5A F2 | 	cmps	local10, local08 wcz
0962c     AC FF 9F ED |  if_be	jmp	#LR__0852
09630                 | LR__0853
09630     1B 27 02 F6 | 	mov	local01, local09
09634     16 29 02 F6 | 	mov	local02, local04
09638     17 2A 06 F6 | 	mov	local03, #23
0963c     13 35 02 F6 | 	mov	local08, local01
09640     14 3B 02 F6 | 	mov	local11, local02
09644     15 33 02 F6 | 	mov	local07, local03
09648     4A 00 00 FF 
0964c     7C E4 05 F1 | 	add	objptr, ##38012
09650     F2 26 02 FB | 	rdlong	local01, objptr
09654     13 37 02 F6 | 	mov	local09, local01
09658     01 36 66 F0 | 	shl	local09, #1
0965c     13 37 02 F1 | 	add	local09, local01
09660     02 36 66 F0 | 	shl	local09, #2
09664     03 00 00 FF 
09668     00 E4 85 F1 | 	sub	objptr, ##1536
0966c     F2 36 02 F1 | 	add	local09, objptr
09670     1B 35 62 FC | 	wrlong	local08, local09
09674     03 00 00 FF 
09678     00 E4 05 F1 | 	add	objptr, ##1536
0967c     F2 26 02 FB | 	rdlong	local01, objptr
09680     13 37 02 F6 | 	mov	local09, local01
09684     01 36 66 F0 | 	shl	local09, #1
09688     13 37 02 F1 | 	add	local09, local01
0968c     02 36 66 F0 | 	shl	local09, #2
09690     03 00 00 FF 
09694     00 E4 85 F1 | 	sub	objptr, ##1536
09698     F2 36 02 F1 | 	add	local09, objptr
0969c     04 36 06 F1 | 	add	local09, #4
096a0     1B 3B 62 FC | 	wrlong	local11, local09
096a4     03 00 00 FF 
096a8     00 E4 05 F1 | 	add	objptr, ##1536
096ac     F2 3A 02 FB | 	rdlong	local11, objptr
096b0     1D 27 02 F6 | 	mov	local01, local11
096b4     01 26 66 F0 | 	shl	local01, #1
096b8     1D 27 02 F1 | 	add	local01, local11
096bc     02 26 66 F0 | 	shl	local01, #2
096c0     03 00 00 FF 
096c4     00 E4 85 F1 | 	sub	objptr, ##1536
096c8     F2 26 02 F1 | 	add	local01, objptr
096cc     08 26 06 F1 | 	add	local01, #8
096d0     13 33 62 FC | 	wrlong	local07, local01
096d4     03 00 00 FF 
096d8     00 E4 05 F1 | 	add	objptr, ##1536
096dc     F2 34 02 FB | 	rdlong	local08, objptr
096e0     01 34 06 F1 | 	add	local08, #1
096e4     F2 34 62 FC | 	wrlong	local08, objptr
096e8                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
096e8                 | '   if numpar>3 then err=45
096e8     04 2C 16 F2 | 	cmp	local04, #4 wc
096ec     2D 2E 06 36 |  if_ae	mov	local05, #45
096f0                 | '   if i>varnum then err=20
096f0     15 00 00 FF 
096f4     74 E4 85 F1 | 	sub	objptr, ##10868
096f8     F2 34 02 FB | 	rdlong	local08, objptr
096fc     35 00 00 FF 
09700     08 E4 85 F1 | 	sub	objptr, ##27144
09704     1A 39 5A F2 | 	cmps	local10, local08 wcz
09708     14 2E 06 16 |  if_a	mov	local05, #20
0970c     04 00 90 FD | 	jmp	#LR__0855
09710                 | LR__0854
09710     0E 2E 06 F6 | 	mov	local05, #14
09714                 | LR__0855
09714                 | ' return err
09714     17 FB 01 F6 | 	mov	result1, local05
09718     A7 F0 03 F6 | 	mov	ptra, fp
0971c     B2 00 A0 FD | 	call	#popregs_
09720                 | _compile_array_assign_ret
09720     2D 00 64 FD | 	ret
09724                 | 
09724                 | ' 
09724                 | ' '----- compile print command with its ";" and "," modifiers
09724                 | ' 
09724                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
09724                 | _compile_print
09724     0B 4A 05 F6 | 	mov	COUNT_, #11
09728     A8 00 A0 FD | 	call	#pushregs_
0972c     00 26 06 F6 | 	mov	local01, #0
09730     1D 2A 06 F6 | 	mov	local03, #29
09734                 | ' t1.result.uresult=0 : t1.result_type=result_uint
09734                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
09734     37 00 00 FF 
09738     44 E4 05 F1 | 	add	objptr, ##28228
0973c     F2 2C 02 FB | 	rdlong	local04, objptr
09740     03 2C 66 F0 | 	shl	local04, #3
09744     02 00 00 FF 
09748     38 E4 85 F1 | 	sub	objptr, ##1080
0974c     F2 2C 02 F1 | 	add	local04, objptr
09750     04 2C 06 F1 | 	add	local04, #4
09754     16 2D 02 FB | 	rdlong	local04, local04
09758     FE 2D 0E F2 | 	cmp	local04, #510 wz
0975c     35 00 00 FF 
09760     0C E4 85 F1 | 	sub	objptr, ##27148
09764     68 01 90 5D |  if_ne	jmp	#LR__0860
09768     20 2A 06 F6 | 	mov	local03, #32
0976c     13 2F 02 F6 | 	mov	local05, local01
09770     14 31 02 F6 | 	mov	local06, local02
09774     15 33 02 F6 | 	mov	local07, local03
09778     4A 00 00 FF 
0977c     7C E4 05 F1 | 	add	objptr, ##38012
09780     F2 34 02 FB | 	rdlong	local08, objptr
09784     1A 37 02 F6 | 	mov	local09, local08
09788     01 36 66 F0 | 	shl	local09, #1
0978c     1A 37 02 F1 | 	add	local09, local08
09790     02 36 66 F0 | 	shl	local09, #2
09794     03 00 00 FF 
09798     00 E4 85 F1 | 	sub	objptr, ##1536
0979c     F2 36 02 F1 | 	add	local09, objptr
097a0     1B 2F 62 FC | 	wrlong	local05, local09
097a4     03 00 00 FF 
097a8     00 E4 05 F1 | 	add	objptr, ##1536
097ac     F2 2E 02 FB | 	rdlong	local05, objptr
097b0     17 39 02 F6 | 	mov	local10, local05
097b4     01 38 66 F0 | 	shl	local10, #1
097b8     17 39 02 F1 | 	add	local10, local05
097bc     02 38 66 F0 | 	shl	local10, #2
097c0     03 00 00 FF 
097c4     00 E4 85 F1 | 	sub	objptr, ##1536
097c8     F2 38 02 F1 | 	add	local10, objptr
097cc     04 38 06 F1 | 	add	local10, #4
097d0     1C 31 62 FC | 	wrlong	local06, local10
097d4     03 00 00 FF 
097d8     00 E4 05 F1 | 	add	objptr, ##1536
097dc     F2 2E 02 FB | 	rdlong	local05, objptr
097e0     17 3B 02 F6 | 	mov	local11, local05
097e4     01 3A 66 F0 | 	shl	local11, #1
097e8     17 3B 02 F1 | 	add	local11, local05
097ec     02 3A 66 F0 | 	shl	local11, #2
097f0     03 00 00 FF 
097f4     00 E4 85 F1 | 	sub	objptr, ##1536
097f8     F2 3A 02 F1 | 	add	local11, objptr
097fc     08 3A 06 F1 | 	add	local11, #8
09800     1D 33 62 FC | 	wrlong	local07, local11
09804     03 00 00 FF 
09808     00 E4 05 F1 | 	add	objptr, ##1536
0980c     F2 2E 02 FB | 	rdlong	local05, objptr
09810     01 2E 06 F1 | 	add	local05, #1
09814     F2 2E 62 FC | 	wrlong	local05, objptr
09818     44 2A 06 F6 | 	mov	local03, #68
0981c     13 2F 02 F6 | 	mov	local05, local01
09820     14 31 02 F6 | 	mov	local06, local02
09824     15 33 02 F6 | 	mov	local07, local03
09828     F2 34 02 FB | 	rdlong	local08, objptr
0982c     1A 37 02 F6 | 	mov	local09, local08
09830     01 36 66 F0 | 	shl	local09, #1
09834     1A 37 02 F1 | 	add	local09, local08
09838     02 36 66 F0 | 	shl	local09, #2
0983c     03 00 00 FF 
09840     00 E4 85 F1 | 	sub	objptr, ##1536
09844     F2 36 02 F1 | 	add	local09, objptr
09848     1B 2F 62 FC | 	wrlong	local05, local09
0984c     03 00 00 FF 
09850     00 E4 05 F1 | 	add	objptr, ##1536
09854     F2 3A 02 FB | 	rdlong	local11, objptr
09858     1D 39 02 F6 | 	mov	local10, local11
0985c     01 38 66 F0 | 	shl	local10, #1
09860     1D 39 02 F1 | 	add	local10, local11
09864     02 38 66 F0 | 	shl	local10, #2
09868     03 00 00 FF 
0986c     00 E4 85 F1 | 	sub	objptr, ##1536
09870     F2 38 02 F1 | 	add	local10, objptr
09874     04 38 06 F1 | 	add	local10, #4
09878     1C 31 62 FC | 	wrlong	local06, local10
0987c     03 00 00 FF 
09880     00 E4 05 F1 | 	add	objptr, ##1536
09884     F2 38 02 FB | 	rdlong	local10, objptr
09888     1C 3B 02 F6 | 	mov	local11, local10
0988c     01 3A 66 F0 | 	shl	local11, #1
09890     1C 3B 02 F1 | 	add	local11, local10
09894     02 3A 66 F0 | 	shl	local11, #2
09898     03 00 00 FF 
0989c     00 E4 85 F1 | 	sub	objptr, ##1536
098a0     F2 3A 02 F1 | 	add	local11, objptr
098a4     08 3A 06 F1 | 	add	local11, #8
098a8     1D 33 62 FC | 	wrlong	local07, local11
098ac     03 00 00 FF 
098b0     00 E4 05 F1 | 	add	objptr, ##1536
098b4     F2 2E 02 FB | 	rdlong	local05, objptr
098b8     01 2E 06 F1 | 	add	local05, #1
098bc     F2 2E 62 FC | 	wrlong	local05, objptr
098c0     4A 00 00 FF 
098c4     7C E4 85 F1 | 	sub	objptr, ##38012
098c8     00 FA 05 F6 | 	mov	result1, #0
098cc     20 05 90 FD | 	jmp	#LR__0867
098d0                 | LR__0860
098d0                 | ' do
098d0                 | LR__0861
098d0     30 27 B0 FD | 	call	#_expr
098d4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
098d4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
098d4     37 00 00 FF 
098d8     44 E4 05 F1 | 	add	objptr, ##28228
098dc     F2 2C 02 FB | 	rdlong	local04, objptr
098e0     03 2C 66 F0 | 	shl	local04, #3
098e4     02 00 00 FF 
098e8     38 E4 85 F1 | 	sub	objptr, ##1080
098ec     F2 2C 02 F1 | 	add	local04, objptr
098f0     04 2C 06 F1 | 	add	local04, #4
098f4     16 35 02 FB | 	rdlong	local08, local04
098f8     11 34 0E F2 | 	cmp	local08, #17 wz
098fc     35 00 00 FF 
09900     0C E4 85 F1 | 	sub	objptr, ##27148
09904     60 01 90 5D |  if_ne	jmp	#LR__0862
09908     21 2A 06 F6 | 	mov	local03, #33
0990c     13 2F 02 F6 | 	mov	local05, local01
09910     14 31 02 F6 | 	mov	local06, local02
09914     15 33 02 F6 | 	mov	local07, local03
09918     4A 00 00 FF 
0991c     7C E4 05 F1 | 	add	objptr, ##38012
09920     F2 34 02 FB | 	rdlong	local08, objptr
09924     1A 37 02 F6 | 	mov	local09, local08
09928     01 36 66 F0 | 	shl	local09, #1
0992c     1A 37 02 F1 | 	add	local09, local08
09930     02 36 66 F0 | 	shl	local09, #2
09934     03 00 00 FF 
09938     00 E4 85 F1 | 	sub	objptr, ##1536
0993c     F2 36 02 F1 | 	add	local09, objptr
09940     1B 2F 62 FC | 	wrlong	local05, local09
09944     03 00 00 FF 
09948     00 E4 05 F1 | 	add	objptr, ##1536
0994c     F2 3A 02 FB | 	rdlong	local11, objptr
09950     1D 39 02 F6 | 	mov	local10, local11
09954     01 38 66 F0 | 	shl	local10, #1
09958     1D 39 02 F1 | 	add	local10, local11
0995c     02 38 66 F0 | 	shl	local10, #2
09960     03 00 00 FF 
09964     00 E4 85 F1 | 	sub	objptr, ##1536
09968     F2 38 02 F1 | 	add	local10, objptr
0996c     04 38 06 F1 | 	add	local10, #4
09970     1C 31 62 FC | 	wrlong	local06, local10
09974     03 00 00 FF 
09978     00 E4 05 F1 | 	add	objptr, ##1536
0997c     F2 2E 02 FB | 	rdlong	local05, objptr
09980     17 3B 02 F6 | 	mov	local11, local05
09984     01 3A 66 F0 | 	shl	local11, #1
09988     17 3B 02 F1 | 	add	local11, local05
0998c     02 3A 66 F0 | 	shl	local11, #2
09990     03 00 00 FF 
09994     00 E4 85 F1 | 	sub	objptr, ##1536
09998     F2 3A 02 F1 | 	add	local11, objptr
0999c     08 3A 06 F1 | 	add	local11, #8
099a0     1D 33 62 FC | 	wrlong	local07, local11
099a4     03 00 00 FF 
099a8     00 E4 05 F1 | 	add	objptr, ##1536
099ac     F2 2E 02 FB | 	rdlong	local05, objptr
099b0     01 2E 06 F1 | 	add	local05, #1
099b4     F2 2E 62 FC | 	wrlong	local05, objptr
099b8     44 2A 06 F6 | 	mov	local03, #68
099bc     13 2F 02 F6 | 	mov	local05, local01
099c0     14 31 02 F6 | 	mov	local06, local02
099c4     15 33 02 F6 | 	mov	local07, local03
099c8     F2 34 02 FB | 	rdlong	local08, objptr
099cc     1A 37 02 F6 | 	mov	local09, local08
099d0     01 36 66 F0 | 	shl	local09, #1
099d4     1A 37 02 F1 | 	add	local09, local08
099d8     02 36 66 F0 | 	shl	local09, #2
099dc     03 00 00 FF 
099e0     00 E4 85 F1 | 	sub	objptr, ##1536
099e4     F2 36 02 F1 | 	add	local09, objptr
099e8     1B 2F 62 FC | 	wrlong	local05, local09
099ec     03 00 00 FF 
099f0     00 E4 05 F1 | 	add	objptr, ##1536
099f4     F2 3A 02 FB | 	rdlong	local11, objptr
099f8     1D 39 02 F6 | 	mov	local10, local11
099fc     01 38 66 F0 | 	shl	local10, #1
09a00     1D 39 02 F1 | 	add	local10, local11
09a04     02 38 66 F0 | 	shl	local10, #2
09a08     03 00 00 FF 
09a0c     00 E4 85 F1 | 	sub	objptr, ##1536
09a10     F2 38 02 F1 | 	add	local10, objptr
09a14     04 38 06 F1 | 	add	local10, #4
09a18     1C 31 62 FC | 	wrlong	local06, local10
09a1c     03 00 00 FF 
09a20     00 E4 05 F1 | 	add	objptr, ##1536
09a24     F2 38 02 FB | 	rdlong	local10, objptr
09a28     1C 3B 02 F6 | 	mov	local11, local10
09a2c     01 3A 66 F0 | 	shl	local11, #1
09a30     1C 3B 02 F1 | 	add	local11, local10
09a34     02 3A 66 F0 | 	shl	local11, #2
09a38     03 00 00 FF 
09a3c     00 E4 85 F1 | 	sub	objptr, ##1536
09a40     F2 3A 02 F1 | 	add	local11, objptr
09a44     08 3A 06 F1 | 	add	local11, #8
09a48     1D 33 62 FC | 	wrlong	local07, local11
09a4c     03 00 00 FF 
09a50     00 E4 05 F1 | 	add	objptr, ##1536
09a54     F2 2E 02 FB | 	rdlong	local05, objptr
09a58     01 2E 06 F1 | 	add	local05, #1
09a5c     F2 2E 62 FC | 	wrlong	local05, objptr
09a60     4A 00 00 FF 
09a64     7C E4 85 F1 | 	sub	objptr, ##38012
09a68                 | LR__0862
09a68                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09a68     37 00 00 FF 
09a6c     44 E4 05 F1 | 	add	objptr, ##28228
09a70     F2 2C 02 FB | 	rdlong	local04, objptr
09a74     03 2C 66 F0 | 	shl	local04, #3
09a78     02 00 00 FF 
09a7c     38 E4 85 F1 | 	sub	objptr, ##1080
09a80     F2 2C 02 F1 | 	add	local04, objptr
09a84     04 2C 06 F1 | 	add	local04, #4
09a88     16 35 02 FB | 	rdlong	local08, local04
09a8c     12 34 0E F2 | 	cmp	local08, #18 wz
09a90     35 00 00 FF 
09a94     0C E4 85 F1 | 	sub	objptr, ##27148
09a98     60 01 90 5D |  if_ne	jmp	#LR__0863
09a9c     22 2A 06 F6 | 	mov	local03, #34
09aa0     13 2F 02 F6 | 	mov	local05, local01
09aa4     14 31 02 F6 | 	mov	local06, local02
09aa8     15 33 02 F6 | 	mov	local07, local03
09aac     4A 00 00 FF 
09ab0     7C E4 05 F1 | 	add	objptr, ##38012
09ab4     F2 34 02 FB | 	rdlong	local08, objptr
09ab8     1A 37 02 F6 | 	mov	local09, local08
09abc     01 36 66 F0 | 	shl	local09, #1
09ac0     1A 37 02 F1 | 	add	local09, local08
09ac4     02 36 66 F0 | 	shl	local09, #2
09ac8     03 00 00 FF 
09acc     00 E4 85 F1 | 	sub	objptr, ##1536
09ad0     F2 36 02 F1 | 	add	local09, objptr
09ad4     1B 2F 62 FC | 	wrlong	local05, local09
09ad8     03 00 00 FF 
09adc     00 E4 05 F1 | 	add	objptr, ##1536
09ae0     F2 3A 02 FB | 	rdlong	local11, objptr
09ae4     1D 39 02 F6 | 	mov	local10, local11
09ae8     01 38 66 F0 | 	shl	local10, #1
09aec     1D 39 02 F1 | 	add	local10, local11
09af0     02 38 66 F0 | 	shl	local10, #2
09af4     03 00 00 FF 
09af8     00 E4 85 F1 | 	sub	objptr, ##1536
09afc     F2 38 02 F1 | 	add	local10, objptr
09b00     04 38 06 F1 | 	add	local10, #4
09b04     1C 31 62 FC | 	wrlong	local06, local10
09b08     03 00 00 FF 
09b0c     00 E4 05 F1 | 	add	objptr, ##1536
09b10     F2 2E 02 FB | 	rdlong	local05, objptr
09b14     17 3B 02 F6 | 	mov	local11, local05
09b18     01 3A 66 F0 | 	shl	local11, #1
09b1c     17 3B 02 F1 | 	add	local11, local05
09b20     02 3A 66 F0 | 	shl	local11, #2
09b24     03 00 00 FF 
09b28     00 E4 85 F1 | 	sub	objptr, ##1536
09b2c     F2 3A 02 F1 | 	add	local11, objptr
09b30     08 3A 06 F1 | 	add	local11, #8
09b34     1D 33 62 FC | 	wrlong	local07, local11
09b38     03 00 00 FF 
09b3c     00 E4 05 F1 | 	add	objptr, ##1536
09b40     F2 2E 02 FB | 	rdlong	local05, objptr
09b44     01 2E 06 F1 | 	add	local05, #1
09b48     F2 2E 62 FC | 	wrlong	local05, objptr
09b4c     44 2A 06 F6 | 	mov	local03, #68
09b50     13 2F 02 F6 | 	mov	local05, local01
09b54     14 31 02 F6 | 	mov	local06, local02
09b58     15 33 02 F6 | 	mov	local07, local03
09b5c     F2 34 02 FB | 	rdlong	local08, objptr
09b60     1A 37 02 F6 | 	mov	local09, local08
09b64     01 36 66 F0 | 	shl	local09, #1
09b68     1A 37 02 F1 | 	add	local09, local08
09b6c     02 36 66 F0 | 	shl	local09, #2
09b70     03 00 00 FF 
09b74     00 E4 85 F1 | 	sub	objptr, ##1536
09b78     F2 36 02 F1 | 	add	local09, objptr
09b7c     1B 2F 62 FC | 	wrlong	local05, local09
09b80     03 00 00 FF 
09b84     00 E4 05 F1 | 	add	objptr, ##1536
09b88     F2 3A 02 FB | 	rdlong	local11, objptr
09b8c     1D 39 02 F6 | 	mov	local10, local11
09b90     01 38 66 F0 | 	shl	local10, #1
09b94     1D 39 02 F1 | 	add	local10, local11
09b98     02 38 66 F0 | 	shl	local10, #2
09b9c     03 00 00 FF 
09ba0     00 E4 85 F1 | 	sub	objptr, ##1536
09ba4     F2 38 02 F1 | 	add	local10, objptr
09ba8     04 38 06 F1 | 	add	local10, #4
09bac     1C 31 62 FC | 	wrlong	local06, local10
09bb0     03 00 00 FF 
09bb4     00 E4 05 F1 | 	add	objptr, ##1536
09bb8     F2 38 02 FB | 	rdlong	local10, objptr
09bbc     1C 3B 02 F6 | 	mov	local11, local10
09bc0     01 3A 66 F0 | 	shl	local11, #1
09bc4     1C 3B 02 F1 | 	add	local11, local10
09bc8     02 3A 66 F0 | 	shl	local11, #2
09bcc     03 00 00 FF 
09bd0     00 E4 85 F1 | 	sub	objptr, ##1536
09bd4     F2 3A 02 F1 | 	add	local11, objptr
09bd8     08 3A 06 F1 | 	add	local11, #8
09bdc     1D 33 62 FC | 	wrlong	local07, local11
09be0     03 00 00 FF 
09be4     00 E4 05 F1 | 	add	objptr, ##1536
09be8     F2 2E 02 FB | 	rdlong	local05, objptr
09bec     01 2E 06 F1 | 	add	local05, #1
09bf0     F2 2E 62 FC | 	wrlong	local05, objptr
09bf4     4A 00 00 FF 
09bf8     7C E4 85 F1 | 	sub	objptr, ##38012
09bfc                 | LR__0863
09bfc                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09bfc     37 00 00 FF 
09c00     44 E4 05 F1 | 	add	objptr, ##28228
09c04     F2 2C 02 FB | 	rdlong	local04, objptr
09c08     03 2C 66 F0 | 	shl	local04, #3
09c0c     02 00 00 FF 
09c10     38 E4 85 F1 | 	sub	objptr, ##1080
09c14     F2 2C 02 F1 | 	add	local04, objptr
09c18     04 2C 06 F1 | 	add	local04, #4
09c1c     16 35 02 FB | 	rdlong	local08, local04
09c20     FE 35 0E F2 | 	cmp	local08, #510 wz
09c24     35 00 00 FF 
09c28     0C E4 85 F1 | 	sub	objptr, ##27148
09c2c     B8 00 90 5D |  if_ne	jmp	#LR__0864
09c30     44 2A 06 F6 | 	mov	local03, #68
09c34     13 2F 02 F6 | 	mov	local05, local01
09c38     14 31 02 F6 | 	mov	local06, local02
09c3c     15 33 02 F6 | 	mov	local07, local03
09c40     4A 00 00 FF 
09c44     7C E4 05 F1 | 	add	objptr, ##38012
09c48     F2 34 02 FB | 	rdlong	local08, objptr
09c4c     1A 37 02 F6 | 	mov	local09, local08
09c50     01 36 66 F0 | 	shl	local09, #1
09c54     1A 37 02 F1 | 	add	local09, local08
09c58     02 36 66 F0 | 	shl	local09, #2
09c5c     03 00 00 FF 
09c60     00 E4 85 F1 | 	sub	objptr, ##1536
09c64     F2 36 02 F1 | 	add	local09, objptr
09c68     1B 2F 62 FC | 	wrlong	local05, local09
09c6c     03 00 00 FF 
09c70     00 E4 05 F1 | 	add	objptr, ##1536
09c74     F2 3A 02 FB | 	rdlong	local11, objptr
09c78     1D 39 02 F6 | 	mov	local10, local11
09c7c     01 38 66 F0 | 	shl	local10, #1
09c80     1D 39 02 F1 | 	add	local10, local11
09c84     02 38 66 F0 | 	shl	local10, #2
09c88     03 00 00 FF 
09c8c     00 E4 85 F1 | 	sub	objptr, ##1536
09c90     F2 38 02 F1 | 	add	local10, objptr
09c94     04 38 06 F1 | 	add	local10, #4
09c98     1C 31 62 FC | 	wrlong	local06, local10
09c9c     03 00 00 FF 
09ca0     00 E4 05 F1 | 	add	objptr, ##1536
09ca4     F2 38 02 FB | 	rdlong	local10, objptr
09ca8     1C 3B 02 F6 | 	mov	local11, local10
09cac     01 3A 66 F0 | 	shl	local11, #1
09cb0     1C 3B 02 F1 | 	add	local11, local10
09cb4     02 3A 66 F0 | 	shl	local11, #2
09cb8     03 00 00 FF 
09cbc     00 E4 85 F1 | 	sub	objptr, ##1536
09cc0     F2 3A 02 F1 | 	add	local11, objptr
09cc4     08 3A 06 F1 | 	add	local11, #8
09cc8     1D 33 62 FC | 	wrlong	local07, local11
09ccc     03 00 00 FF 
09cd0     00 E4 05 F1 | 	add	objptr, ##1536
09cd4     F2 2E 02 FB | 	rdlong	local05, objptr
09cd8     01 2E 06 F1 | 	add	local05, #1
09cdc     F2 2E 62 FC | 	wrlong	local05, objptr
09ce0     4A 00 00 FF 
09ce4     7C E4 85 F1 | 	sub	objptr, ##38012
09ce8                 | LR__0864
09ce8                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09ce8     37 00 00 FF 
09cec     44 E4 05 F1 | 	add	objptr, ##28228
09cf0     F2 2C 02 FB | 	rdlong	local04, objptr
09cf4     03 2C 66 F0 | 	shl	local04, #3
09cf8     02 00 00 FF 
09cfc     38 E4 85 F1 | 	sub	objptr, ##1080
09d00     F2 2C 02 F1 | 	add	local04, objptr
09d04     04 2C 06 F1 | 	add	local04, #4
09d08     16 35 02 FB | 	rdlong	local08, local04
09d0c     11 34 0E F2 | 	cmp	local08, #17 wz
09d10     35 00 00 FF 
09d14     0C E4 85 F1 | 	sub	objptr, ##27148
09d18     6C 00 90 AD |  if_e	jmp	#LR__0865
09d1c     37 00 00 FF 
09d20     44 E4 05 F1 | 	add	objptr, ##28228
09d24     F2 34 02 FB | 	rdlong	local08, objptr
09d28     03 34 66 F0 | 	shl	local08, #3
09d2c     02 00 00 FF 
09d30     38 E4 85 F1 | 	sub	objptr, ##1080
09d34     F2 34 02 F1 | 	add	local08, objptr
09d38     04 34 06 F1 | 	add	local08, #4
09d3c     1A 35 02 FB | 	rdlong	local08, local08
09d40     12 34 0E F2 | 	cmp	local08, #18 wz
09d44     35 00 00 FF 
09d48     0C E4 85 F1 | 	sub	objptr, ##27148
09d4c     38 00 90 AD |  if_e	jmp	#LR__0865
09d50     37 00 00 FF 
09d54     44 E4 05 F1 | 	add	objptr, ##28228
09d58     F2 3A 02 FB | 	rdlong	local11, objptr
09d5c     03 3A 66 F0 | 	shl	local11, #3
09d60     02 00 00 FF 
09d64     38 E4 85 F1 | 	sub	objptr, ##1080
09d68     F2 3A 02 F1 | 	add	local11, objptr
09d6c     04 3A 06 F1 | 	add	local11, #4
09d70     1D 3B 02 FB | 	rdlong	local11, local11
09d74     FE 3B 0E F2 | 	cmp	local11, #510 wz
09d78     35 00 00 FF 
09d7c     0C E4 85 F1 | 	sub	objptr, ##27148
09d80     16 FA 05 56 |  if_ne	mov	result1, #22
09d84     68 00 90 5D |  if_ne	jmp	#LR__0867
09d88                 | LR__0865
09d88     37 00 00 FF 
09d8c     44 E4 05 F1 | 	add	objptr, ##28228
09d90     F2 2C 02 FB | 	rdlong	local04, objptr
09d94     01 2C 06 F1 | 	add	local04, #1
09d98     F2 2C 62 FC | 	wrlong	local04, objptr
09d9c     03 2C 66 F0 | 	shl	local04, #3
09da0     02 00 00 FF 
09da4     38 E4 85 F1 | 	sub	objptr, ##1080
09da8     F2 2C 02 F1 | 	add	local04, objptr
09dac     04 2C 06 F1 | 	add	local04, #4
09db0     16 35 02 FB | 	rdlong	local08, local04
09db4     FE 35 0E F2 | 	cmp	local08, #510 wz
09db8     35 00 00 FF 
09dbc     0C E4 85 F1 | 	sub	objptr, ##27148
09dc0     28 00 90 AD |  if_e	jmp	#LR__0866
09dc4     37 00 00 FF 
09dc8     44 E4 05 F1 | 	add	objptr, ##28228
09dcc     F2 3A 02 FB | 	rdlong	local11, objptr
09dd0     0E 00 00 FF 
09dd4     1C E4 05 F1 | 	add	objptr, ##7196
09dd8     F2 38 02 FB | 	rdlong	local10, objptr
09ddc     45 00 00 FF 
09de0     60 E4 85 F1 | 	sub	objptr, ##35424
09de4     1C 3B 52 F2 | 	cmps	local11, local10 wc
09de8     E4 FA 9F CD |  if_b	jmp	#LR__0861
09dec                 | LR__0866
09dec                 | ' return 0
09dec     00 FA 05 F6 | 	mov	result1, #0
09df0                 | LR__0867
09df0     A7 F0 03 F6 | 	mov	ptra, fp
09df4     B2 00 A0 FD | 	call	#popregs_
09df8                 | _compile_print_ret
09df8     2D 00 64 FD | 	ret
09dfc                 | 
09dfc                 | ' 
09dfc                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09dfc                 | ' 
09dfc                 | ' function compile_if(aline as ulong) as ulong  
09dfc                 | _compile_if
09dfc     09 4A 05 F6 | 	mov	COUNT_, #9
09e00     A8 00 A0 FD | 	call	#pushregs_
09e04                 | _compile_if_enter
09e04     09 2D 02 F6 | 	mov	local04, arg01
09e08                 | ' return expr()
09e08     F8 21 B0 FD | 	call	#_expr
09e0c     37 00 00 FF 
09e10     44 E4 05 F1 | 	add	objptr, ##28228
09e14     F2 14 02 FB | 	rdlong	arg02, objptr
09e18     0A 2F 02 F6 | 	mov	local05, arg02
09e1c     03 2E 66 F0 | 	shl	local05, #3
09e20     02 00 00 FF 
09e24     38 E4 85 F1 | 	sub	objptr, ##1080
09e28     F2 2E 02 F1 | 	add	local05, objptr
09e2c     04 2E 06 F1 | 	add	local05, #4
09e30     17 2F 02 FB | 	rdlong	local05, local05
09e34     01 14 06 F1 | 	add	arg02, #1
09e38     02 00 00 FF 
09e3c     38 E4 05 F1 | 	add	objptr, ##1080
09e40     F2 14 62 FC | 	wrlong	arg02, objptr
09e44     37 00 00 FF 
09e48     44 E4 85 F1 | 	sub	objptr, ##28228
09e4c                 | ' 
09e4c                 | ' err=compile_fun_1p()
09e4c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09e4c     5B 2E 0E F2 | 	cmp	local05, #91 wz
09e50     34 FA 05 56 |  if_ne	mov	result1, #52
09e54     20 01 90 5D |  if_ne	jmp	#LR__0872
09e58     58 2A 06 F6 | 	mov	local03, #88
09e5c     13 31 02 F6 | 	mov	local06, local01
09e60     14 33 02 F6 | 	mov	local07, local02
09e64     15 15 02 F6 | 	mov	arg02, local03
09e68     4A 00 00 FF 
09e6c     7C E4 05 F1 | 	add	objptr, ##38012
09e70     F2 12 02 FB | 	rdlong	arg01, objptr
09e74     09 35 02 F6 | 	mov	local08, arg01
09e78     01 34 66 F0 | 	shl	local08, #1
09e7c     09 35 02 F1 | 	add	local08, arg01
09e80     02 34 66 F0 | 	shl	local08, #2
09e84     03 00 00 FF 
09e88     00 E4 85 F1 | 	sub	objptr, ##1536
09e8c     F2 34 02 F1 | 	add	local08, objptr
09e90     1A 31 62 FC | 	wrlong	local06, local08
09e94     03 00 00 FF 
09e98     00 E4 05 F1 | 	add	objptr, ##1536
09e9c     F2 30 02 FB | 	rdlong	local06, objptr
09ea0     18 13 02 F6 | 	mov	arg01, local06
09ea4     01 12 66 F0 | 	shl	arg01, #1
09ea8     18 13 02 F1 | 	add	arg01, local06
09eac     02 12 66 F0 | 	shl	arg01, #2
09eb0     03 00 00 FF 
09eb4     00 E4 85 F1 | 	sub	objptr, ##1536
09eb8     F2 12 02 F1 | 	add	arg01, objptr
09ebc     04 12 06 F1 | 	add	arg01, #4
09ec0     09 33 62 FC | 	wrlong	local07, arg01
09ec4     03 00 00 FF 
09ec8     00 E4 05 F1 | 	add	objptr, ##1536
09ecc     F2 30 02 FB | 	rdlong	local06, objptr
09ed0     18 13 02 F6 | 	mov	arg01, local06
09ed4     01 12 66 F0 | 	shl	arg01, #1
09ed8     18 13 02 F1 | 	add	arg01, local06
09edc     02 12 66 F0 | 	shl	arg01, #2
09ee0     03 00 00 FF 
09ee4     00 E4 85 F1 | 	sub	objptr, ##1536
09ee8     F2 12 02 F1 | 	add	arg01, objptr
09eec     08 12 06 F1 | 	add	arg01, #8
09ef0     09 15 62 FC | 	wrlong	arg02, arg01
09ef4     03 00 00 FF 
09ef8     00 E4 05 F1 | 	add	objptr, ##1536
09efc     F2 30 02 FB | 	rdlong	local06, objptr
09f00     01 30 06 F1 | 	add	local06, #1
09f04     F2 30 62 FC | 	wrlong	local06, objptr
09f08                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09f08                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f08     13 00 00 FF 
09f0c     38 E4 85 F1 | 	sub	objptr, ##9784
09f10     F2 14 02 FB | 	rdlong	arg02, objptr
09f14     01 14 06 F1 | 	add	arg02, #1
09f18     03 14 66 F0 | 	shl	arg02, #3
09f1c     02 00 00 FF 
09f20     38 E4 85 F1 | 	sub	objptr, ##1080
09f24     F2 14 02 F1 | 	add	arg02, objptr
09f28     0A 13 02 FB | 	rdlong	arg01, arg02
09f2c     35 00 00 FF 
09f30     0C E4 85 F1 | 	sub	objptr, ##27148
09f34                 | ' 
09f34                 | ' select case s
09f34     BC 01 00 FF 
09f38     B6 14 06 F6 | 	mov	arg02, ##@LR__5689
09f3c     44 DC B1 FD | 	call	#__system___string_cmp
09f40     00 FA 0D F2 | 	cmp	result1, #0 wz
09f44     1B FA 05 A6 |  if_e	mov	result1, #27
09f48     00 FA 05 56 |  if_ne	mov	result1, #0
09f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
09f50     10 00 90 AD |  if_e	jmp	#LR__0870
09f54     05 12 06 F6 | 	mov	arg01, #5
09f58     38 E4 BF FD | 	call	#_compile_immediate_assign
09f5c     FD 36 02 F6 | 	mov	local09, result1
09f60     10 00 90 FD | 	jmp	#LR__0871
09f64                 | LR__0870
09f64     05 12 06 F6 | 	mov	arg01, #5
09f68     16 15 02 F6 | 	mov	arg02, local04
09f6c     38 DA BF FD | 	call	#_compile_immediate
09f70     FD 36 02 F6 | 	mov	local09, result1
09f74                 | LR__0871
09f74                 | ' return err
09f74     1B FB 01 F6 | 	mov	result1, local09
09f78                 | LR__0872
09f78     A7 F0 03 F6 | 	mov	ptra, fp
09f7c     B2 00 A0 FD | 	call	#popregs_
09f80                 | _compile_if_ret
09f80     2D 00 64 FD | 	ret
09f84                 | 
09f84                 | ' 
09f84                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09f84                 | ' 
09f84                 | ' function compile_else(aline as ulong) as ulong  
09f84                 | _compile_else
09f84     07 4A 05 F6 | 	mov	COUNT_, #7
09f88     A8 00 A0 FD | 	call	#pushregs_
09f8c                 | _compile_else_enter
09f8c     09 2D 02 F6 | 	mov	local04, arg01
09f90     5A 2A 06 F6 | 	mov	local03, #90
09f94     13 2F 02 F6 | 	mov	local05, local01
09f98     14 31 02 F6 | 	mov	local06, local02
09f9c     15 27 02 F6 | 	mov	local01, local03
09fa0     4A 00 00 FF 
09fa4     7C E4 05 F1 | 	add	objptr, ##38012
09fa8     F2 14 02 FB | 	rdlong	arg02, objptr
09fac     0A 13 02 F6 | 	mov	arg01, arg02
09fb0     01 12 66 F0 | 	shl	arg01, #1
09fb4     0A 13 02 F1 | 	add	arg01, arg02
09fb8     02 12 66 F0 | 	shl	arg01, #2
09fbc     03 00 00 FF 
09fc0     00 E4 85 F1 | 	sub	objptr, ##1536
09fc4     F2 12 02 F1 | 	add	arg01, objptr
09fc8     09 2F 62 FC | 	wrlong	local05, arg01
09fcc     03 00 00 FF 
09fd0     00 E4 05 F1 | 	add	objptr, ##1536
09fd4     F2 2E 02 FB | 	rdlong	local05, objptr
09fd8     17 15 02 F6 | 	mov	arg02, local05
09fdc     01 14 66 F0 | 	shl	arg02, #1
09fe0     17 15 02 F1 | 	add	arg02, local05
09fe4     02 14 66 F0 | 	shl	arg02, #2
09fe8     03 00 00 FF 
09fec     00 E4 85 F1 | 	sub	objptr, ##1536
09ff0     F2 14 02 F1 | 	add	arg02, objptr
09ff4     04 14 06 F1 | 	add	arg02, #4
09ff8     0A 31 62 FC | 	wrlong	local06, arg02
09ffc     03 00 00 FF 
0a000     00 E4 05 F1 | 	add	objptr, ##1536
0a004     F2 30 02 FB | 	rdlong	local06, objptr
0a008     18 2F 02 F6 | 	mov	local05, local06
0a00c     01 2E 66 F0 | 	shl	local05, #1
0a010     18 2F 02 F1 | 	add	local05, local06
0a014     02 2E 66 F0 | 	shl	local05, #2
0a018     03 00 00 FF 
0a01c     00 E4 85 F1 | 	sub	objptr, ##1536
0a020     F2 2E 02 F1 | 	add	local05, objptr
0a024     08 2E 06 F1 | 	add	local05, #8
0a028     17 27 62 FC | 	wrlong	local01, local05
0a02c     03 00 00 FF 
0a030     00 E4 05 F1 | 	add	objptr, ##1536
0a034     F2 2E 02 FB | 	rdlong	local05, objptr
0a038     01 2E 06 F1 | 	add	local05, #1
0a03c     F2 2E 62 FC | 	wrlong	local05, objptr
0a040                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
0a040                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
0a040     13 00 00 FF 
0a044     38 E4 85 F1 | 	sub	objptr, ##9784
0a048     F2 30 02 FB | 	rdlong	local06, objptr
0a04c     01 30 06 F1 | 	add	local06, #1
0a050     03 30 66 F0 | 	shl	local06, #3
0a054     02 00 00 FF 
0a058     38 E4 85 F1 | 	sub	objptr, ##1080
0a05c     F2 30 02 F1 | 	add	local06, objptr
0a060     18 13 02 FB | 	rdlong	arg01, local06
0a064     35 00 00 FF 
0a068     0C E4 85 F1 | 	sub	objptr, ##27148
0a06c                 | ' 
0a06c                 | ' select case s
0a06c     BC 01 00 FF 
0a070     B6 14 06 F6 | 	mov	arg02, ##@LR__5689
0a074     0C DB B1 FD | 	call	#__system___string_cmp
0a078     00 FA 0D F2 | 	cmp	result1, #0 wz
0a07c     1B FA 05 A6 |  if_e	mov	result1, #27
0a080     00 FA 05 56 |  if_ne	mov	result1, #0
0a084     00 FA 0D F2 | 	cmp	result1, #0 wz
0a088     10 00 90 AD |  if_e	jmp	#LR__0880
0a08c     05 12 06 F6 | 	mov	arg01, #5
0a090     00 E3 BF FD | 	call	#_compile_immediate_assign
0a094     FD 32 02 F6 | 	mov	local07, result1
0a098     10 00 90 FD | 	jmp	#LR__0881
0a09c                 | LR__0880
0a09c     05 12 06 F6 | 	mov	arg01, #5
0a0a0     16 15 02 F6 | 	mov	arg02, local04
0a0a4     00 D9 BF FD | 	call	#_compile_immediate
0a0a8     FD 32 02 F6 | 	mov	local07, result1
0a0ac                 | LR__0881
0a0ac                 | ' return err
0a0ac     19 FB 01 F6 | 	mov	result1, local07
0a0b0     A7 F0 03 F6 | 	mov	ptra, fp
0a0b4     B2 00 A0 FD | 	call	#popregs_
0a0b8                 | _compile_else_ret
0a0b8     2D 00 64 FD | 	ret
0a0bc                 | 
0a0bc                 | ' 
0a0bc                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
0a0bc                 | ' 
0a0bc                 | ' function compile_dim() as ulong  
0a0bc                 | _compile_dim
0a0bc     11 4A 05 F6 | 	mov	COUNT_, #17
0a0c0     A8 00 A0 FD | 	call	#pushregs_
0a0c4     01 26 06 F6 | 	mov	local01, #1
0a0c8     01 28 06 F6 | 	mov	local02, #1
0a0cc     01 2A 06 F6 | 	mov	local03, #1
0a0d0                 | ' 
0a0d0                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0a0d0                 | ' if isname(lparts(ct).part$) then 
0a0d0     37 00 00 FF 
0a0d4     44 E4 05 F1 | 	add	objptr, ##28228
0a0d8     F2 18 02 FB | 	rdlong	arg04, objptr
0a0dc     03 18 66 F0 | 	shl	arg04, #3
0a0e0     02 00 00 FF 
0a0e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a0e8     F2 18 02 F1 | 	add	arg04, objptr
0a0ec     0C 13 02 FB | 	rdlong	arg01, arg04
0a0f0     35 00 00 FF 
0a0f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a0f8     04 C7 BF FD | 	call	#_isname
0a0fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a100     78 05 90 AD |  if_e	jmp	#LR__0913
0a104     37 00 00 FF 
0a108     44 E4 05 F1 | 	add	objptr, ##28228
0a10c     F2 2C 02 FB | 	rdlong	local04, objptr
0a110     03 2C 66 F0 | 	shl	local04, #3
0a114     02 00 00 FF 
0a118     38 E4 85 F1 | 	sub	objptr, ##1080
0a11c     F2 2C 02 F1 | 	add	local04, objptr
0a120     16 2F 02 FB | 	rdlong	local05, local04
0a124     01 30 66 F6 | 	neg	local06, #1
0a128                 | '   varname2$=lparts(ct).part$ 
0a128                 | '   j=-1
0a128                 | '   if varnum>0 then
0a128     04 E4 85 F1 | 	sub	objptr, #4
0a12c     F2 32 02 FB | 	rdlong	local07, objptr
0a130     35 00 00 FF 
0a134     08 E4 85 F1 | 	sub	objptr, ##27144
0a138     01 32 56 F2 | 	cmps	local07, #1 wc
0a13c     58 00 90 CD |  if_b	jmp	#LR__0892
0a140                 | '     for i=0 to varnum-1
0a140     00 34 06 F6 | 	mov	local08, #0
0a144     35 00 00 FF 
0a148     08 E4 05 F1 | 	add	objptr, ##27144
0a14c     F2 36 02 FB | 	rdlong	local09, objptr
0a150     35 00 00 FF 
0a154     08 E4 85 F1 | 	sub	objptr, ##27144
0a158                 | LR__0890
0a158     1B 35 52 F2 | 	cmps	local08, local09 wc
0a15c     38 00 90 3D |  if_ae	jmp	#LR__0891
0a160                 | '       if variables(i).name=varname2$ then j=i : exit
0a160     1A 2D 02 F6 | 	mov	local04, local08
0a164     04 2C 66 F0 | 	shl	local04, #4
0a168     14 00 00 FF 
0a16c     F8 E5 05 F1 | 	add	objptr, ##10744
0a170     F2 2C 02 F1 | 	add	local04, objptr
0a174     16 13 02 FB | 	rdlong	arg01, local04
0a178     17 15 02 F6 | 	mov	arg02, local05
0a17c     14 00 00 FF 
0a180     F8 E5 85 F1 | 	sub	objptr, ##10744
0a184     FC D9 B1 FD | 	call	#__system___string_cmp
0a188     00 FA 0D F2 | 	cmp	result1, #0 wz
0a18c     1A 31 02 A6 |  if_e	mov	local06, local08
0a190     01 34 06 51 |  if_ne	add	local08, #1
0a194     C0 FF 9F 5D |  if_ne	jmp	#LR__0890
0a198                 | LR__0891
0a198                 | LR__0892
0a198                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a198     FF FF 7F FF 
0a19c     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0a1a0     35 00 00 AF 
0a1a4     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a1a8     F2 30 02 AB |  if_e	rdlong	local06, objptr
0a1ac     35 00 00 AF 
0a1b0     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a1b4     78 00 90 AD |  if_e	jmp	#LR__0893
0a1b8     00 12 06 F6 | 	mov	arg01, #0
0a1bc     4C 36 B2 FD | 	call	#__system___getiolock_0620
0a1c0     FD 12 02 F6 | 	mov	arg01, result1
0a1c4     94 D9 B1 FD | 	call	#__system___lockmem
0a1c8     BE 01 00 FF 
0a1cc     A7 15 06 F6 | 	mov	arg02, ##@LR__5957
0a1d0     00 12 06 F6 | 	mov	arg01, #0
0a1d4     00 16 06 F6 | 	mov	arg03, #0
0a1d8     78 E6 B1 FD | 	call	#__system___basic_print_string
0a1dc     52 00 00 FF 
0a1e0     E8 E4 05 F1 | 	add	objptr, ##42216
0a1e4     F2 14 02 FB | 	rdlong	arg02, objptr
0a1e8     52 00 00 FF 
0a1ec     E8 E4 85 F1 | 	sub	objptr, ##42216
0a1f0     00 12 06 F6 | 	mov	arg01, #0
0a1f4     00 16 06 F6 | 	mov	arg03, #0
0a1f8     0A 18 06 F6 | 	mov	arg04, #10
0a1fc     D8 E6 B1 FD | 	call	#__system___basic_print_unsigned
0a200     BE 01 00 FF 
0a204     B5 15 06 F6 | 	mov	arg02, ##@LR__5958
0a208     00 12 06 F6 | 	mov	arg01, #0
0a20c     00 16 06 F6 | 	mov	arg03, #0
0a210     40 E6 B1 FD | 	call	#__system___basic_print_string
0a214     00 12 06 F6 | 	mov	arg01, #0
0a218     0A 14 06 F6 | 	mov	arg02, #10
0a21c     00 16 06 F6 | 	mov	arg03, #0
0a220     D8 E5 B1 FD | 	call	#__system___basic_print_char
0a224     00 12 06 F6 | 	mov	arg01, #0
0a228     E0 35 B2 FD | 	call	#__system___getiolock_0620
0a22c     FD 00 68 FC | 	wrlong	#0, result1
0a230                 | LR__0893
0a230                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a230     37 00 00 FF 
0a234     44 E4 05 F1 | 	add	objptr, ##28228
0a238     F2 14 02 FB | 	rdlong	arg02, objptr
0a23c     01 14 06 F1 | 	add	arg02, #1
0a240     03 14 66 F0 | 	shl	arg02, #3
0a244     02 00 00 FF 
0a248     38 E4 85 F1 | 	sub	objptr, ##1080
0a24c     F2 14 02 F1 | 	add	arg02, objptr
0a250     0A 13 02 FB | 	rdlong	arg01, arg02
0a254     BE 01 00 FF 
0a258     D6 15 06 F6 | 	mov	arg02, ##@LR__5959
0a25c     35 00 00 FF 
0a260     0C E4 85 F1 | 	sub	objptr, ##27148
0a264     1C D9 B1 FD | 	call	#__system___string_cmp
0a268     00 FA 0D F2 | 	cmp	result1, #0 wz
0a26c     44 00 90 AD |  if_e	jmp	#LR__0894
0a270     37 00 00 FF 
0a274     44 E4 05 F1 | 	add	objptr, ##28228
0a278     F2 36 02 FB | 	rdlong	local09, objptr
0a27c     01 36 06 F1 | 	add	local09, #1
0a280     03 36 66 F0 | 	shl	local09, #3
0a284     02 00 00 FF 
0a288     38 E4 85 F1 | 	sub	objptr, ##1080
0a28c     F2 36 02 F1 | 	add	local09, objptr
0a290     1B 13 02 FB | 	rdlong	arg01, local09
0a294     BE 01 00 FF 
0a298     D8 15 06 F6 | 	mov	arg02, ##@LR__5960
0a29c     35 00 00 FF 
0a2a0     0C E4 85 F1 | 	sub	objptr, ##27148
0a2a4     DC D8 B1 FD | 	call	#__system___string_cmp
0a2a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2ac     2B FA 05 56 |  if_ne	mov	result1, #43
0a2b0     D0 04 90 5D |  if_ne	jmp	#LR__0915
0a2b4                 | LR__0894
0a2b4                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a2b4     37 00 00 FF 
0a2b8     44 E4 05 F1 | 	add	objptr, ##28228
0a2bc     F2 14 02 FB | 	rdlong	arg02, objptr
0a2c0     01 14 06 F1 | 	add	arg02, #1
0a2c4     03 14 66 F0 | 	shl	arg02, #3
0a2c8     02 00 00 FF 
0a2cc     38 E4 85 F1 | 	sub	objptr, ##1080
0a2d0     F2 14 02 F1 | 	add	arg02, objptr
0a2d4     0A 13 02 FB | 	rdlong	arg01, arg02
0a2d8     BE 01 00 FF 
0a2dc     DB 15 06 F6 | 	mov	arg02, ##@LR__5961
0a2e0     35 00 00 FF 
0a2e4     0C E4 85 F1 | 	sub	objptr, ##27148
0a2e8     98 D8 B1 FD | 	call	#__system___string_cmp
0a2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f0     37 00 00 AF 
0a2f4     44 E4 05 A1 |  if_e	add	objptr, ##28228
0a2f8     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a2fc     37 00 00 AF 
0a300     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0a304     01 38 06 A1 |  if_e	add	local10, #1
0a308     5C 01 90 AD |  if_e	jmp	#LR__0899
0a30c     37 00 00 FF 
0a310     44 E4 05 F1 | 	add	objptr, ##28228
0a314     F2 38 02 FB | 	rdlong	local10, objptr
0a318     37 00 00 FF 
0a31c     44 E4 85 F1 | 	sub	objptr, ##28228
0a320     02 38 06 F1 | 	add	local10, #2
0a324     00 3A 06 F6 | 	mov	local11, #0
0a328                 | '   l=ct+2 : m=0 : do
0a328                 | LR__0895
0a328                 | '   if isdec(lparts(l).part$) then 
0a328     1C 2D 02 F6 | 	mov	local04, local10
0a32c     03 2C 66 F0 | 	shl	local04, #3
0a330     35 00 00 FF 
0a334     0C E4 05 F1 | 	add	objptr, ##27148
0a338     F2 2C 02 F1 | 	add	local04, objptr
0a33c     16 13 02 FB | 	rdlong	arg01, local04
0a340     35 00 00 FF 
0a344     0C E4 85 F1 | 	sub	objptr, ##27148
0a348     B8 CD BF FD | 	call	#_isdec
0a34c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a350     44 00 90 AD |  if_e	jmp	#LR__0896
0a354     1D 3D 02 F6 | 	mov	local12, local11
0a358     13 3D 06 F1 | 	add	local12, #local01
0a35c     1C 37 02 F6 | 	mov	local09, local10
0a360     03 36 66 F0 | 	shl	local09, #3
0a364     35 00 00 FF 
0a368     0C E4 05 F1 | 	add	objptr, ##27148
0a36c     F2 36 02 F1 | 	add	local09, objptr
0a370     1B 13 02 FB | 	rdlong	arg01, local09
0a374     00 14 06 F6 | 	mov	arg02, #0
0a378     35 00 00 FF 
0a37c     0C E4 85 F1 | 	sub	objptr, ##27148
0a380     CC 0C B2 FD | 	call	#__system____builtin_atoi
0a384     FD 3E 02 F6 | 	mov	local13, result1
0a388                 | 	'.live	local13
0a388                 | 	'.live	local12
0a388     00 3C 8E F9 | 	altd	local12, #0
0a38c     1F 3D 02 F6 | 	mov	local12, local13
0a390     01 3A 06 F1 | 	add	local11, #1
0a394     08 00 90 FD | 	jmp	#LR__0897
0a398                 | LR__0896
0a398                 | '     return(17)
0a398     11 FA 05 F6 | 	mov	result1, #17
0a39c     E4 03 90 FD | 	jmp	#LR__0915
0a3a0                 | LR__0897
0a3a0                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a3a0     1C 2D 02 F6 | 	mov	local04, local10
0a3a4     01 2C 06 F1 | 	add	local04, #1
0a3a8     03 2C 66 F0 | 	shl	local04, #3
0a3ac     35 00 00 FF 
0a3b0     0C E4 05 F1 | 	add	objptr, ##27148
0a3b4     F2 2C 02 F1 | 	add	local04, objptr
0a3b8     16 13 02 FB | 	rdlong	arg01, local04
0a3bc     BE 01 00 FF 
0a3c0     DE 15 06 F6 | 	mov	arg02, ##@LR__5962
0a3c4     35 00 00 FF 
0a3c8     0C E4 85 F1 | 	sub	objptr, ##27148
0a3cc     B4 D7 B1 FD | 	call	#__system___string_cmp
0a3d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3d4     3C 00 90 AD |  if_e	jmp	#LR__0898
0a3d8     1C 3F 02 F6 | 	mov	local13, local10
0a3dc     01 3E 06 F1 | 	add	local13, #1
0a3e0     03 3E 66 F0 | 	shl	local13, #3
0a3e4     35 00 00 FF 
0a3e8     0C E4 05 F1 | 	add	objptr, ##27148
0a3ec     F2 3E 02 F1 | 	add	local13, objptr
0a3f0     1F 13 02 FB | 	rdlong	arg01, local13
0a3f4     BE 01 00 FF 
0a3f8     E0 15 06 F6 | 	mov	arg02, ##@LR__5963
0a3fc     35 00 00 FF 
0a400     0C E4 85 F1 | 	sub	objptr, ##27148
0a404     7C D7 B1 FD | 	call	#__system___string_cmp
0a408     00 FA 0D F2 | 	cmp	result1, #0 wz
0a40c     2C FA 05 56 |  if_ne	mov	result1, #44
0a410     70 03 90 5D |  if_ne	jmp	#LR__0915
0a414                 | LR__0898
0a414     02 38 06 F1 | 	add	local10, #2
0a418     1C 2D 02 F6 | 	mov	local04, local10
0a41c     01 2C 86 F1 | 	sub	local04, #1
0a420     03 2C 66 F0 | 	shl	local04, #3
0a424     35 00 00 FF 
0a428     0C E4 05 F1 | 	add	objptr, ##27148
0a42c     F2 2C 02 F1 | 	add	local04, objptr
0a430     16 13 02 FB | 	rdlong	arg01, local04
0a434     BE 01 00 FF 
0a438     E2 15 06 F6 | 	mov	arg02, ##@LR__5964
0a43c     35 00 00 FF 
0a440     0C E4 85 F1 | 	sub	objptr, ##27148
0a444     3C D7 B1 FD | 	call	#__system___string_cmp
0a448     00 FA 0D F2 | 	cmp	result1, #0 wz
0a44c     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a450     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0895
0a454                 | '   if m>3 then return 45
0a454     04 3A 56 F2 | 	cmps	local11, #4 wc
0a458     2D FA 05 36 |  if_ae	mov	result1, #45
0a45c     24 03 90 3D |  if_ae	jmp	#LR__0915
0a460     00 41 06 F6 | 	mov	local14, #256
0a464     0C 42 06 F6 | 	mov	local15, #12
0a468                 | LR__0899
0a468                 | '   arraytype=array_no_type : esize=12
0a468                 | ' 1350 
0a468                 | '   if lparts(l).part$="as" then
0a468     1C 2D 02 F6 | 	mov	local04, local10
0a46c     03 2C 66 F0 | 	shl	local04, #3
0a470     35 00 00 FF 
0a474     0C E4 05 F1 | 	add	objptr, ##27148
0a478     F2 2C 02 F1 | 	add	local04, objptr
0a47c     16 13 02 FB | 	rdlong	arg01, local04
0a480     BE 01 00 FF 
0a484     E4 15 06 F6 | 	mov	arg02, ##@LR__5965
0a488     35 00 00 FF 
0a48c     0C E4 85 F1 | 	sub	objptr, ##27148
0a490     F0 D6 B1 FD | 	call	#__system___string_cmp
0a494     00 FA 0D F2 | 	cmp	result1, #0 wz
0a498     E8 01 90 5D |  if_ne	jmp	#LR__0914
0a49c                 | '     select case lparts(l+1).part$
0a49c     1C 3D 02 F6 | 	mov	local12, local10
0a4a0     01 3C 06 F1 | 	add	local12, #1
0a4a4     03 3C 66 F0 | 	shl	local12, #3
0a4a8     35 00 00 FF 
0a4ac     0C E4 05 F1 | 	add	objptr, ##27148
0a4b0     F2 3C 02 F1 | 	add	local12, objptr
0a4b4     1E 45 02 FB | 	rdlong	local16, local12
0a4b8     BE 01 00 FF 
0a4bc     E7 15 06 F6 | 	mov	arg02, ##@LR__5966
0a4c0     22 13 02 F6 | 	mov	arg01, local16
0a4c4     35 00 00 FF 
0a4c8     0C E4 85 F1 | 	sub	objptr, ##27148
0a4cc     B4 D6 B1 FD | 	call	#__system___string_cmp
0a4d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4d4     0C 01 90 AD |  if_e	jmp	#LR__0900
0a4d8     BE 01 00 FF 
0a4dc     EC 15 06 F6 | 	mov	arg02, ##@LR__5967
0a4e0     22 13 02 F6 | 	mov	arg01, local16
0a4e4     9C D6 B1 FD | 	call	#__system___string_cmp
0a4e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4ec     00 01 90 AD |  if_e	jmp	#LR__0901
0a4f0     BE 01 00 FF 
0a4f4     F2 15 06 F6 | 	mov	arg02, ##@LR__5968
0a4f8     22 13 02 F6 | 	mov	arg01, local16
0a4fc     84 D6 B1 FD | 	call	#__system___string_cmp
0a500     00 FA 0D F2 | 	cmp	result1, #0 wz
0a504     F4 00 90 AD |  if_e	jmp	#LR__0902
0a508     BE 01 00 FF 
0a50c     F8 15 06 F6 | 	mov	arg02, ##@LR__5969
0a510     22 13 02 F6 | 	mov	arg01, local16
0a514     6C D6 B1 FD | 	call	#__system___string_cmp
0a518     00 FA 0D F2 | 	cmp	result1, #0 wz
0a51c     E8 00 90 AD |  if_e	jmp	#LR__0903
0a520     BE 01 00 FF 
0a524     FF 15 06 F6 | 	mov	arg02, ##@LR__5970
0a528     22 13 02 F6 | 	mov	arg01, local16
0a52c     54 D6 B1 FD | 	call	#__system___string_cmp
0a530     00 FA 0D F2 | 	cmp	result1, #0 wz
0a534     DC 00 90 AD |  if_e	jmp	#LR__0904
0a538     BF 01 00 FF 
0a53c     04 14 06 F6 | 	mov	arg02, ##@LR__5971
0a540     22 13 02 F6 | 	mov	arg01, local16
0a544     3C D6 B1 FD | 	call	#__system___string_cmp
0a548     00 FA 0D F2 | 	cmp	result1, #0 wz
0a54c     D0 00 90 AD |  if_e	jmp	#LR__0905
0a550     BF 01 00 FF 
0a554     0C 14 06 F6 | 	mov	arg02, ##@LR__5972
0a558     22 13 02 F6 | 	mov	arg01, local16
0a55c     24 D6 B1 FD | 	call	#__system___string_cmp
0a560     00 FA 0D F2 | 	cmp	result1, #0 wz
0a564     C4 00 90 AD |  if_e	jmp	#LR__0906
0a568     BF 01 00 FF 
0a56c     12 14 06 F6 | 	mov	arg02, ##@LR__5973
0a570     22 13 02 F6 | 	mov	arg01, local16
0a574     0C D6 B1 FD | 	call	#__system___string_cmp
0a578     00 FA 0D F2 | 	cmp	result1, #0 wz
0a57c     B8 00 90 AD |  if_e	jmp	#LR__0907
0a580     BF 01 00 FF 
0a584     18 14 06 F6 | 	mov	arg02, ##@LR__5974
0a588     22 13 02 F6 | 	mov	arg01, local16
0a58c     F4 D5 B1 FD | 	call	#__system___string_cmp
0a590     00 FA 0D F2 | 	cmp	result1, #0 wz
0a594     AC 00 90 AD |  if_e	jmp	#LR__0908
0a598     BF 01 00 FF 
0a59c     1F 14 06 F6 | 	mov	arg02, ##@LR__5975
0a5a0     22 13 02 F6 | 	mov	arg01, local16
0a5a4     DC D5 B1 FD | 	call	#__system___string_cmp
0a5a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5ac     A0 00 90 AD |  if_e	jmp	#LR__0909
0a5b0     BF 01 00 FF 
0a5b4     26 14 06 F6 | 	mov	arg02, ##@LR__5976
0a5b8     22 13 02 F6 | 	mov	arg01, local16
0a5bc     C4 D5 B1 FD | 	call	#__system___string_cmp
0a5c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5c4     94 00 90 AD |  if_e	jmp	#LR__0910
0a5c8     BF 01 00 FF 
0a5cc     2D 14 06 F6 | 	mov	arg02, ##@LR__5977
0a5d0     22 13 02 F6 | 	mov	arg01, local16
0a5d4     AC D5 B1 FD | 	call	#__system___string_cmp
0a5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a5dc     88 00 90 AD |  if_e	jmp	#LR__0911
0a5e0     90 00 90 FD | 	jmp	#LR__0912
0a5e4                 | LR__0900
0a5e4     01 41 06 F6 | 	mov	local14, #257
0a5e8     01 42 06 F6 | 	mov	local15, #1
0a5ec     94 00 90 FD | 	jmp	#LR__0914
0a5f0                 | LR__0901
0a5f0     02 41 06 F6 | 	mov	local14, #258
0a5f4     01 42 06 F6 | 	mov	local15, #1
0a5f8     88 00 90 FD | 	jmp	#LR__0914
0a5fc                 | LR__0902
0a5fc     03 41 06 F6 | 	mov	local14, #259
0a600     02 42 06 F6 | 	mov	local15, #2
0a604     7C 00 90 FD | 	jmp	#LR__0914
0a608                 | LR__0903
0a608     04 41 06 F6 | 	mov	local14, #260
0a60c     02 42 06 F6 | 	mov	local15, #2
0a610     70 00 90 FD | 	jmp	#LR__0914
0a614                 | LR__0904
0a614     05 41 06 F6 | 	mov	local14, #261
0a618     04 42 06 F6 | 	mov	local15, #4
0a61c     64 00 90 FD | 	jmp	#LR__0914
0a620                 | LR__0905
0a620     05 41 06 F6 | 	mov	local14, #261
0a624     04 42 06 F6 | 	mov	local15, #4
0a628     58 00 90 FD | 	jmp	#LR__0914
0a62c                 | LR__0906
0a62c     06 41 06 F6 | 	mov	local14, #262
0a630     04 42 06 F6 | 	mov	local15, #4
0a634     4C 00 90 FD | 	jmp	#LR__0914
0a638                 | LR__0907
0a638     07 41 06 F6 | 	mov	local14, #263
0a63c     08 42 06 F6 | 	mov	local15, #8
0a640     40 00 90 FD | 	jmp	#LR__0914
0a644                 | LR__0908
0a644     08 41 06 F6 | 	mov	local14, #264
0a648     08 42 06 F6 | 	mov	local15, #8
0a64c     34 00 90 FD | 	jmp	#LR__0914
0a650                 | LR__0909
0a650     09 41 06 F6 | 	mov	local14, #265
0a654     04 42 06 F6 | 	mov	local15, #4
0a658     28 00 90 FD | 	jmp	#LR__0914
0a65c                 | LR__0910
0a65c     0A 41 06 F6 | 	mov	local14, #266
0a660     08 42 06 F6 | 	mov	local15, #8
0a664     1C 00 90 FD | 	jmp	#LR__0914
0a668                 | LR__0911
0a668     0B 41 06 F6 | 	mov	local14, #267
0a66c     04 42 06 F6 | 	mov	local15, #4
0a670     10 00 90 FD | 	jmp	#LR__0914
0a674                 | LR__0912
0a674     2F FA 05 F6 | 	mov	result1, #47
0a678     08 01 90 FD | 	jmp	#LR__0915
0a67c                 | LR__0913
0a67c                 | '   return 46
0a67c     2E FA 05 F6 | 	mov	result1, #46
0a680     00 01 90 FD | 	jmp	#LR__0915
0a684                 | LR__0914
0a684     13 43 02 FD | 	qmul	local15, local01
0a688     18 32 62 FD | 	getqx	local07
0a68c     14 33 02 FD | 	qmul	local07, local02
0a690     18 44 62 FD | 	getqx	local16
0a694     15 45 02 FD | 	qmul	local16, local03
0a698     52 00 00 FF 
0a69c     D0 E4 05 F1 | 	add	objptr, ##42192
0a6a0     F2 46 02 FB | 	rdlong	local17, objptr
0a6a4     20 15 02 F6 | 	mov	arg02, local14
0a6a8     18 44 62 FD | 	getqx	local16
0a6ac     22 47 82 F1 | 	sub	local17, local16
0a6b0     10 46 86 F1 | 	sub	local17, #16
0a6b4     0F 46 26 F5 | 	andn	local17, #15
0a6b8     F2 46 62 FC | 	wrlong	local17, objptr
0a6bc     52 00 00 FF 
0a6c0     D0 E4 85 F1 | 	sub	objptr, ##42192
0a6c4     23 13 02 F6 | 	mov	arg01, local17
0a6c8     18 9C B1 FD | 	call	#_psdpoke
0a6cc     23 13 02 F6 | 	mov	arg01, local17
0a6d0     02 12 06 F1 | 	add	arg01, #2
0a6d4     21 15 02 F6 | 	mov	arg02, local15
0a6d8     08 9C B1 FD | 	call	#_psdpoke
0a6dc     23 13 02 F6 | 	mov	arg01, local17
0a6e0     04 12 06 F1 | 	add	arg01, #4
0a6e4     13 15 02 F6 | 	mov	arg02, local01
0a6e8     B0 9B B1 FD | 	call	#_pslpoke
0a6ec     23 13 02 F6 | 	mov	arg01, local17
0a6f0     08 12 06 F1 | 	add	arg01, #8
0a6f4     14 15 02 F6 | 	mov	arg02, local02
0a6f8     A0 9B B1 FD | 	call	#_pslpoke
0a6fc     23 13 02 F6 | 	mov	arg01, local17
0a700     0C 12 06 F1 | 	add	arg01, #12
0a704     15 15 02 F6 | 	mov	arg02, local03
0a708     90 9B B1 FD | 	call	#_pslpoke
0a70c     18 3D 02 F6 | 	mov	local12, local06
0a710     04 3C 66 F0 | 	shl	local12, #4
0a714     14 00 00 FF 
0a718     F8 E5 05 F1 | 	add	objptr, ##10744
0a71c     F2 3C 02 F1 | 	add	local12, objptr
0a720     1E 2F 62 FC | 	wrlong	local05, local12
0a724     18 3D 02 F6 | 	mov	local12, local06
0a728     04 3C 66 F0 | 	shl	local12, #4
0a72c     F2 3C 02 F1 | 	add	local12, objptr
0a730     04 3C 06 F1 | 	add	local12, #4
0a734     1E 47 62 FC | 	wrlong	local17, local12
0a738     18 3D 02 F6 | 	mov	local12, local06
0a73c     04 3C 66 F0 | 	shl	local12, #4
0a740     F2 3C 02 F1 | 	add	local12, objptr
0a744     0C 3C 06 F1 | 	add	local12, #12
0a748     1E 41 62 FC | 	wrlong	local14, local12
0a74c                 | ' memtop=arrayptr
0a74c                 | ' psdpoke arrayptr,arraytype 
0a74c                 | ' psdpoke arrayptr+2,esize 
0a74c                 | ' pslpoke arrayptr+4,dims(0)
0a74c                 | ' pslpoke arrayptr+8,dims(1)
0a74c                 | ' pslpoke arrayptr+12,dims(2)
0a74c                 | ' variables(j).name=varname2$
0a74c                 | ' variables(j).value.uresult=arrayptr
0a74c                 | ' variables(j).vartype=arraytype
0a74c                 | ' if j=varnum then varnum+=1
0a74c     20 00 00 FF 
0a750     10 E4 05 F1 | 	add	objptr, ##16400
0a754     F2 32 02 FB | 	rdlong	local07, objptr
0a758     35 00 00 FF 
0a75c     08 E4 85 F1 | 	sub	objptr, ##27144
0a760     19 31 0A F2 | 	cmp	local06, local07 wz
0a764     35 00 00 AF 
0a768     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a76c     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a770     01 32 06 A1 |  if_e	add	local07, #1
0a774     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a778     35 00 00 AF 
0a77c     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a780                 | ' return 0
0a780     00 FA 05 F6 | 	mov	result1, #0
0a784                 | LR__0915
0a784     A7 F0 03 F6 | 	mov	ptra, fp
0a788     B2 00 A0 FD | 	call	#popregs_
0a78c                 | _compile_dim_ret
0a78c     2D 00 64 FD | 	ret
0a790                 | 
0a790                 | ' 
0a790                 | ' '----- compile 'for' command. 
0a790                 | ' 
0a790                 | ' function compile_for() as ulong  
0a790                 | _compile_for
0a790     0E 4A 05 F6 | 	mov	COUNT_, #14
0a794     A8 00 A0 FD | 	call	#pushregs_
0a798                 | ' 
0a798                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a798     37 00 00 FF 
0a79c     44 E4 05 F1 | 	add	objptr, ##28228
0a7a0     F2 14 02 FB | 	rdlong	arg02, objptr
0a7a4     01 14 06 F1 | 	add	arg02, #1
0a7a8     03 14 66 F0 | 	shl	arg02, #3
0a7ac     02 00 00 FF 
0a7b0     38 E4 85 F1 | 	sub	objptr, ##1080
0a7b4     F2 14 02 F1 | 	add	arg02, objptr
0a7b8     0A 13 02 FB | 	rdlong	arg01, arg02
0a7bc     35 00 00 FF 
0a7c0     0C E4 85 F1 | 	sub	objptr, ##27148
0a7c4                 | ' 
0a7c4                 | ' select case s
0a7c4     BC 01 00 FF 
0a7c8     B6 14 06 F6 | 	mov	arg02, ##@LR__5689
0a7cc     B4 D3 B1 FD | 	call	#__system___string_cmp
0a7d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7d4     1B FA 05 A6 |  if_e	mov	result1, #27
0a7d8     00 FA 05 56 |  if_ne	mov	result1, #0
0a7dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7e0     0C 00 90 AD |  if_e	jmp	#LR__0920
0a7e4     05 12 06 F6 | 	mov	arg01, #5
0a7e8     A8 DB BF FD | 	call	#_compile_immediate_assign
0a7ec     08 00 90 FD | 	jmp	#LR__0921
0a7f0                 | LR__0920
0a7f0     20 FA 05 F6 | 	mov	result1, #32
0a7f4     58 08 90 FD | 	jmp	#LR__0937
0a7f8                 | LR__0921
0a7f8     4A 00 00 FF 
0a7fc     7C E4 05 F1 | 	add	objptr, ##38012
0a800     F2 14 02 FB | 	rdlong	arg02, objptr
0a804     0A 13 02 F6 | 	mov	arg01, arg02
0a808     01 12 86 F1 | 	sub	arg01, #1
0a80c     09 2D 02 F6 | 	mov	local04, arg01
0a810     01 2C 66 F0 | 	shl	local04, #1
0a814     09 2D 02 F1 | 	add	local04, arg01
0a818     02 2C 66 F0 | 	shl	local04, #2
0a81c     03 00 00 FF 
0a820     00 E4 85 F1 | 	sub	objptr, ##1536
0a824     F2 2C 02 F1 | 	add	local04, objptr
0a828     16 27 02 FB | 	rdlong	local01, local04
0a82c     04 2C 06 F1 | 	add	local04, #4
0a830     16 2F 02 FB | 	rdlong	local05, local04
0a834     01 14 86 F1 | 	sub	arg02, #1
0a838     0A 2D 02 F6 | 	mov	local04, arg02
0a83c     01 2C 66 F0 | 	shl	local04, #1
0a840     0A 2D 02 F1 | 	add	local04, arg02
0a844     02 2C 66 F0 | 	shl	local04, #2
0a848     F2 30 02 F6 | 	mov	local06, objptr
0a84c     F2 2C 02 F1 | 	add	local04, objptr
0a850     08 2C 06 F1 | 	add	local04, #8
0a854     16 2D 02 FB | 	rdlong	local04, local04
0a858     17 29 02 F6 | 	mov	local02, local05
0a85c     16 2B 02 F6 | 	mov	local03, local04
0a860                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a860     17 2A 0E F2 | 	cmp	local03, #23 wz
0a864     47 00 00 FF 
0a868     7C E4 85 F1 | 	sub	objptr, ##36476
0a86c     22 FA 05 56 |  if_ne	mov	result1, #34
0a870     DC 07 90 5D |  if_ne	jmp	#LR__0937
0a874     13 33 02 F6 | 	mov	local07, local01
0a878                 | ' varnum=t1.result.uresult
0a878                 | ' if lparts(ct).part$<>"to" then return 33
0a878     37 00 00 FF 
0a87c     44 E4 05 F1 | 	add	objptr, ##28228
0a880     F2 2C 02 FB | 	rdlong	local04, objptr
0a884     03 2C 66 F0 | 	shl	local04, #3
0a888     02 00 00 FF 
0a88c     38 E4 85 F1 | 	sub	objptr, ##1080
0a890     F2 2C 02 F1 | 	add	local04, objptr
0a894     16 13 02 FB | 	rdlong	arg01, local04
0a898     BF 01 00 FF 
0a89c     34 14 06 F6 | 	mov	arg02, ##@LR__5978
0a8a0     35 00 00 FF 
0a8a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a8a8     D8 D2 B1 FD | 	call	#__system___string_cmp
0a8ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0a8b0     21 FA 05 56 |  if_ne	mov	result1, #33
0a8b4     98 07 90 5D |  if_ne	jmp	#LR__0937
0a8b8     37 00 00 FF 
0a8bc     44 E4 05 F1 | 	add	objptr, ##28228
0a8c0     F2 34 02 FB | 	rdlong	local08, objptr
0a8c4     01 34 06 F1 | 	add	local08, #1
0a8c8     F2 34 62 FC | 	wrlong	local08, objptr
0a8cc     37 00 00 FF 
0a8d0     44 E4 85 F1 | 	sub	objptr, ##28228
0a8d4     2C 17 B0 FD | 	call	#_expr
0a8d8                 | ' ct+=1
0a8d8                 | ' expr()  										' there is "to" value pushed on the stack
0a8d8                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a8d8     37 00 00 FF 
0a8dc     44 E4 05 F1 | 	add	objptr, ##28228
0a8e0     F2 2C 02 FB | 	rdlong	local04, objptr
0a8e4     03 2C 66 F0 | 	shl	local04, #3
0a8e8     02 00 00 FF 
0a8ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a8f0     F2 2C 02 F1 | 	add	local04, objptr
0a8f4     16 13 02 FB | 	rdlong	arg01, local04
0a8f8     BF 01 00 FF 
0a8fc     37 14 06 F6 | 	mov	arg02, ##@LR__5979
0a900     35 00 00 FF 
0a904     0C E4 85 F1 | 	sub	objptr, ##27148
0a908     78 D2 B1 FD | 	call	#__system___string_cmp
0a90c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a910     48 00 90 AD |  if_e	jmp	#LR__0922
0a914     37 00 00 FF 
0a918     44 E4 05 F1 | 	add	objptr, ##28228
0a91c     F2 2C 02 FB | 	rdlong	local04, objptr
0a920     03 2C 66 F0 | 	shl	local04, #3
0a924     02 00 00 FF 
0a928     38 E4 85 F1 | 	sub	objptr, ##1080
0a92c     F2 2C 02 F1 | 	add	local04, objptr
0a930     16 13 02 FB | 	rdlong	arg01, local04
0a934     02 14 06 F6 | 	mov	arg02, #2
0a938     35 00 00 FF 
0a93c     0C E4 85 F1 | 	sub	objptr, ##27148
0a940     98 F2 B1 FD | 	call	#__system__Left_S
0a944     FD 12 02 F6 | 	mov	arg01, result1
0a948     BF 01 00 FF 
0a94c     3C 14 06 F6 | 	mov	arg02, ##@LR__5980
0a950     30 D2 B1 FD | 	call	#__system___string_cmp
0a954     00 FA 0D F2 | 	cmp	result1, #0 wz
0a958     9C 05 90 5D |  if_ne	jmp	#LR__0935
0a95c                 | LR__0922
0a95c                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a95c     37 00 00 FF 
0a960     44 E4 05 F1 | 	add	objptr, ##28228
0a964     F2 2C 02 FB | 	rdlong	local04, objptr
0a968     03 2C 66 F0 | 	shl	local04, #3
0a96c     02 00 00 FF 
0a970     38 E4 85 F1 | 	sub	objptr, ##1080
0a974     F2 2C 02 F1 | 	add	local04, objptr
0a978     16 13 02 FB | 	rdlong	arg01, local04
0a97c     02 14 06 F6 | 	mov	arg02, #2
0a980     35 00 00 FF 
0a984     0C E4 85 F1 | 	sub	objptr, ##27148
0a988     50 F2 B1 FD | 	call	#__system__Left_S
0a98c     FD 12 02 F6 | 	mov	arg01, result1
0a990     BF 01 00 FF 
0a994     3F 14 06 F6 | 	mov	arg02, ##@LR__5981
0a998     E8 D1 B1 FD | 	call	#__system___string_cmp
0a99c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a9a0     30 05 90 5D |  if_ne	jmp	#LR__0934
0a9a4     37 00 00 FF 
0a9a8     44 E4 05 F1 | 	add	objptr, ##28228
0a9ac     F2 2C 02 FB | 	rdlong	local04, objptr
0a9b0     03 2C 66 F0 | 	shl	local04, #3
0a9b4     02 00 00 FF 
0a9b8     38 E4 85 F1 | 	sub	objptr, ##1080
0a9bc     F2 2C 02 F1 | 	add	local04, objptr
0a9c0     16 13 02 FB | 	rdlong	arg01, local04
0a9c4     35 00 00 FF 
0a9c8     0C E4 85 F1 | 	sub	objptr, ##27148
0a9cc     09 37 02 F6 | 	mov	local09, arg01
0a9d0     97 06 48 FB | 	callpa	#(@LR__0924-@LR__0923)>>2,fcache_load_ptr_
0a9d4                 | LR__0923
0a9d4     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a9d8     01 36 06 51 |  if_ne	add	local09, #1
0a9dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0923
0a9e0                 | LR__0924
0a9e0     09 37 82 F1 | 	sub	local09, arg01
0a9e4     03 36 56 F2 | 	cmps	local09, #3 wc
0a9e8     E8 04 90 CD |  if_b	jmp	#LR__0934
0a9ec     37 00 00 FF 
0a9f0     44 E4 05 F1 | 	add	objptr, ##28228
0a9f4     F2 2C 02 FB | 	rdlong	local04, objptr
0a9f8     16 39 02 F6 | 	mov	local10, local04
0a9fc     03 38 66 F0 | 	shl	local10, #3
0aa00     02 00 00 FF 
0aa04     38 E4 85 F1 | 	sub	objptr, ##1080
0aa08     F2 38 02 F1 | 	add	local10, objptr
0aa0c     03 2C 66 F0 | 	shl	local04, #3
0aa10     F2 2C 02 F1 | 	add	local04, objptr
0aa14     16 2D 02 FB | 	rdlong	local04, local04
0aa18     02 00 00 FF 
0aa1c     38 E4 05 F1 | 	add	objptr, ##1080
0aa20     F2 12 02 FB | 	rdlong	arg01, objptr
0aa24     03 12 66 F0 | 	shl	arg01, #3
0aa28     02 00 00 FF 
0aa2c     38 E4 85 F1 | 	sub	objptr, ##1080
0aa30     F2 12 02 F1 | 	add	arg01, objptr
0aa34     09 13 02 FB | 	rdlong	arg01, arg01
0aa38     35 00 00 FF 
0aa3c     0C E4 85 F1 | 	sub	objptr, ##27148
0aa40     09 37 02 F6 | 	mov	local09, arg01
0aa44     97 06 48 FB | 	callpa	#(@LR__0926-@LR__0925)>>2,fcache_load_ptr_
0aa48                 | LR__0925
0aa48     1B FB C9 FA | 	rdbyte	result1, local09 wz
0aa4c     01 36 06 51 |  if_ne	add	local09, #1
0aa50     F4 FF 9F 5D |  if_ne	jmp	#LR__0925
0aa54                 | LR__0926
0aa54     09 37 82 F1 | 	sub	local09, arg01
0aa58     1B 15 02 F6 | 	mov	arg02, local09
0aa5c     02 14 86 F1 | 	sub	arg02, #2
0aa60     16 13 02 F6 | 	mov	arg01, local04
0aa64     FC F1 B1 FD | 	call	#__system__Right_S
0aa68     1C FB 61 FC | 	wrlong	result1, local10
0aa6c     37 00 00 FF 
0aa70     44 E4 05 F1 | 	add	objptr, ##28228
0aa74     F2 2C 02 FB | 	rdlong	local04, objptr
0aa78     16 39 02 F6 | 	mov	local10, local04
0aa7c     03 38 66 F0 | 	shl	local10, #3
0aa80     02 00 00 FF 
0aa84     38 E4 85 F1 | 	sub	objptr, ##1080
0aa88     F2 38 02 F1 | 	add	local10, objptr
0aa8c     03 2C 66 F0 | 	shl	local04, #3
0aa90     F2 2C 02 F1 | 	add	local04, objptr
0aa94     16 13 02 FB | 	rdlong	arg01, local04
0aa98     35 00 00 FF 
0aa9c     0C E4 85 F1 | 	sub	objptr, ##27148
0aaa0     5C B5 BF FD | 	call	#_isfunction
0aaa4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0aaa8     04 38 06 F1 | 	add	local10, #4
0aaac     1C FB 61 FC | 	wrlong	result1, local10
0aab0                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0aab0     37 00 00 FF 
0aab4     44 E4 05 F1 | 	add	objptr, ##28228
0aab8     F2 38 02 FB | 	rdlong	local10, objptr
0aabc     03 38 66 F0 | 	shl	local10, #3
0aac0     02 00 00 FF 
0aac4     38 E4 85 F1 | 	sub	objptr, ##1080
0aac8     F2 38 02 F1 | 	add	local10, objptr
0aacc     04 38 06 F1 | 	add	local10, #4
0aad0     1C 2D 02 FB | 	rdlong	local04, local10
0aad4     01 2C 56 F2 | 	cmps	local04, #1 wc
0aad8     35 00 00 FF 
0aadc     0C E4 85 F1 | 	sub	objptr, ##27148
0aae0     D4 03 90 3D |  if_ae	jmp	#LR__0933
0aae4     37 00 00 FF 
0aae8     44 E4 05 F1 | 	add	objptr, ##28228
0aaec     F2 2C 02 FB | 	rdlong	local04, objptr
0aaf0     16 39 02 F6 | 	mov	local10, local04
0aaf4     03 38 66 F0 | 	shl	local10, #3
0aaf8     02 00 00 FF 
0aafc     38 E4 85 F1 | 	sub	objptr, ##1080
0ab00     F2 38 02 F1 | 	add	local10, objptr
0ab04     03 2C 66 F0 | 	shl	local04, #3
0ab08     F2 2C 02 F1 | 	add	local04, objptr
0ab0c     16 13 02 FB | 	rdlong	arg01, local04
0ab10     35 00 00 FF 
0ab14     0C E4 85 F1 | 	sub	objptr, ##27148
0ab18     18 9E BF FD | 	call	#_isnotename
0ab1c     04 38 06 F1 | 	add	local10, #4
0ab20     1C FB 61 FC | 	wrlong	result1, local10
0ab24                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0ab24                 | '     if lparts(ct).token>0 then 
0ab24     37 00 00 FF 
0ab28     44 E4 05 F1 | 	add	objptr, ##28228
0ab2c     F2 38 02 FB | 	rdlong	local10, objptr
0ab30     03 38 66 F0 | 	shl	local10, #3
0ab34     02 00 00 FF 
0ab38     38 E4 85 F1 | 	sub	objptr, ##1080
0ab3c     F2 38 02 F1 | 	add	local10, objptr
0ab40     04 38 06 F1 | 	add	local10, #4
0ab44     1C 2D 02 FB | 	rdlong	local04, local10
0ab48     01 2C 56 F2 | 	cmps	local04, #1 wc
0ab4c     35 00 00 FF 
0ab50     0C E4 85 F1 | 	sub	objptr, ##27148
0ab54     94 00 90 CD |  if_b	jmp	#LR__0927
0ab58     37 00 00 FF 
0ab5c     44 E4 05 F1 | 	add	objptr, ##28228
0ab60     F2 38 02 FB | 	rdlong	local10, objptr
0ab64     03 38 66 F0 | 	shl	local10, #3
0ab68     02 00 00 FF 
0ab6c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab70     F2 38 02 F1 | 	add	local10, objptr
0ab74     04 38 06 F1 | 	add	local10, #4
0ab78     1C 13 02 FB | 	rdlong	arg01, local10
0ab7c     35 00 00 FF 
0ab80     0C E4 85 F1 | 	sub	objptr, ##27148
0ab84     A0 C6 BF FD | 	call	#_getnoteval
0ab88     FD 12 02 F6 | 	mov	arg01, result1
0ab8c     37 00 00 FF 
0ab90     44 E4 05 F1 | 	add	objptr, ##28228
0ab94     F2 38 02 FB | 	rdlong	local10, objptr
0ab98     03 38 66 F0 | 	shl	local10, #3
0ab9c     02 00 00 FF 
0aba0     38 E4 85 F1 | 	sub	objptr, ##1080
0aba4     F2 38 02 F1 | 	add	local10, objptr
0aba8     35 00 00 FF 
0abac     0C E4 85 F1 | 	sub	objptr, ##27148
0abb0     20 F2 B1 FD | 	call	#__system__str_S
0abb4     1C FB 61 FC | 	wrlong	result1, local10
0abb8     37 00 00 FF 
0abbc     44 E4 05 F1 | 	add	objptr, ##28228
0abc0     F2 38 02 FB | 	rdlong	local10, objptr
0abc4     03 38 66 F0 | 	shl	local10, #3
0abc8     02 00 00 FF 
0abcc     38 E4 85 F1 | 	sub	objptr, ##1080
0abd0     F2 38 02 F1 | 	add	local10, objptr
0abd4     04 38 06 F1 | 	add	local10, #4
0abd8     01 00 80 FF 
0abdc     1C 05 68 FC | 	wrlong	##514, local10
0abe0     35 00 00 FF 
0abe4     0C E4 85 F1 | 	sub	objptr, ##27148
0abe8     CC 02 90 FD | 	jmp	#LR__0933
0abec                 | LR__0927
0abec     37 00 00 FF 
0abf0     44 E4 05 F1 | 	add	objptr, ##28228
0abf4     F2 2C 02 FB | 	rdlong	local04, objptr
0abf8     16 39 02 F6 | 	mov	local10, local04
0abfc     03 38 66 F0 | 	shl	local10, #3
0ac00     02 00 00 FF 
0ac04     38 E4 85 F1 | 	sub	objptr, ##1080
0ac08     F2 38 02 F1 | 	add	local10, objptr
0ac0c     03 2C 66 F0 | 	shl	local04, #3
0ac10     F2 2C 02 F1 | 	add	local04, objptr
0ac14     16 13 02 FB | 	rdlong	arg01, local04
0ac18     35 00 00 FF 
0ac1c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac20     90 9C BF FD | 	call	#_isconstant
0ac24     04 38 06 F1 | 	add	local10, #4
0ac28     1C FB 61 FC | 	wrlong	result1, local10
0ac2c                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0ac2c     37 00 00 FF 
0ac30     44 E4 05 F1 | 	add	objptr, ##28228
0ac34     F2 38 02 FB | 	rdlong	local10, objptr
0ac38     03 38 66 F0 | 	shl	local10, #3
0ac3c     02 00 00 FF 
0ac40     38 E4 85 F1 | 	sub	objptr, ##1080
0ac44     F2 38 02 F1 | 	add	local10, objptr
0ac48     04 38 06 F1 | 	add	local10, #4
0ac4c     1C 2D 02 FB | 	rdlong	local04, local10
0ac50     01 2C 56 F2 | 	cmps	local04, #1 wc
0ac54     35 00 00 FF 
0ac58     0C E4 85 F1 | 	sub	objptr, ##27148
0ac5c     8C 00 90 CD |  if_b	jmp	#LR__0928
0ac60     37 00 00 FF 
0ac64     44 E4 05 F1 | 	add	objptr, ##28228
0ac68     F2 34 02 FB | 	rdlong	local08, objptr
0ac6c     1A 39 02 F6 | 	mov	local10, local08
0ac70     03 38 66 F0 | 	shl	local10, #3
0ac74     02 00 00 FF 
0ac78     38 E4 85 F1 | 	sub	objptr, ##1080
0ac7c     F2 38 02 F1 | 	add	local10, objptr
0ac80     03 34 66 F0 | 	shl	local08, #3
0ac84     F2 34 02 F1 | 	add	local08, objptr
0ac88     04 34 06 F1 | 	add	local08, #4
0ac8c     1A 13 02 FB | 	rdlong	arg01, local08
0ac90     35 00 00 FF 
0ac94     0C E4 85 F1 | 	sub	objptr, ##27148
0ac98     09 13 52 F6 | 	abs	arg01, arg01 wc
0ac9c     1F 3A C6 C9 |  if_b	decod	local11, #31
0aca0     00 3A 06 36 |  if_ae	mov	local11, #0
0aca4     2C F9 B1 FD | 	call	#__system___float_fromuns
0aca8     1D FB 61 F5 | 	xor	result1, local11
0acac     FD 12 02 F6 | 	mov	arg01, result1
0acb0     20 F1 B1 FD | 	call	#__system__str_S
0acb4     1C FB 61 FC | 	wrlong	result1, local10
0acb8     37 00 00 FF 
0acbc     44 E4 05 F1 | 	add	objptr, ##28228
0acc0     F2 38 02 FB | 	rdlong	local10, objptr
0acc4     03 38 66 F0 | 	shl	local10, #3
0acc8     02 00 00 FF 
0accc     38 E4 85 F1 | 	sub	objptr, ##1080
0acd0     F2 38 02 F1 | 	add	local10, objptr
0acd4     04 38 06 F1 | 	add	local10, #4
0acd8     01 00 80 FF 
0acdc     1C 03 68 FC | 	wrlong	##513, local10
0ace0     35 00 00 FF 
0ace4     0C E4 85 F1 | 	sub	objptr, ##27148
0ace8     CC 01 90 FD | 	jmp	#LR__0933
0acec                 | LR__0928
0acec     37 00 00 FF 
0acf0     44 E4 05 F1 | 	add	objptr, ##28228
0acf4     F2 38 02 FB | 	rdlong	local10, objptr
0acf8     03 38 66 F0 | 	shl	local10, #3
0acfc     02 00 00 FF 
0ad00     38 E4 85 F1 | 	sub	objptr, ##1080
0ad04     F2 38 02 F1 | 	add	local10, objptr
0ad08     1C 13 02 FB | 	rdlong	arg01, local10
0ad0c     35 00 00 FF 
0ad10     0C E4 85 F1 | 	sub	objptr, ##27148
0ad14     5C BD BF FD | 	call	#_isnum
0ad18     FD 3C 02 F6 | 	mov	local12, result1
0ad1c     37 00 00 FF 
0ad20     44 E4 05 F1 | 	add	objptr, ##28228
0ad24     F2 38 02 FB | 	rdlong	local10, objptr
0ad28     03 38 66 F0 | 	shl	local10, #3
0ad2c     02 00 00 FF 
0ad30     38 E4 85 F1 | 	sub	objptr, ##1080
0ad34     F2 38 02 F1 | 	add	local10, objptr
0ad38     1C 13 02 FB | 	rdlong	arg01, local10
0ad3c     35 00 00 FF 
0ad40     0C E4 85 F1 | 	sub	objptr, ##27148
0ad44     18 C1 BF FD | 	call	#_isint
0ad48     FD 3E 02 F6 | 	mov	local13, result1
0ad4c     37 00 00 FF 
0ad50     44 E4 05 F1 | 	add	objptr, ##28228
0ad54     F2 38 02 FB | 	rdlong	local10, objptr
0ad58     03 38 66 F0 | 	shl	local10, #3
0ad5c     02 00 00 FF 
0ad60     38 E4 85 F1 | 	sub	objptr, ##1080
0ad64     F2 38 02 F1 | 	add	local10, objptr
0ad68     1C 13 02 FB | 	rdlong	arg01, local10
0ad6c     35 00 00 FF 
0ad70     0C E4 85 F1 | 	sub	objptr, ##27148
0ad74     8C C3 BF FD | 	call	#_isdec
0ad78     FD 40 02 F6 | 	mov	local14, result1
0ad7c                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ad7c                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ad7c     00 3C 0E F2 | 	cmp	local12, #0 wz
0ad80     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ad84     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ad88     34 00 90 AD |  if_e	jmp	#LR__0929
0ad8c     37 00 00 FF 
0ad90     44 E4 05 F1 | 	add	objptr, ##28228
0ad94     F2 38 02 FB | 	rdlong	local10, objptr
0ad98     03 38 66 F0 | 	shl	local10, #3
0ad9c     02 00 00 FF 
0ada0     38 E4 85 F1 | 	sub	objptr, ##1080
0ada4     F2 38 02 F1 | 	add	local10, objptr
0ada8     04 38 06 F1 | 	add	local10, #4
0adac     01 00 80 FF 
0adb0     1C 01 68 FC | 	wrlong	##512, local10
0adb4     35 00 00 FF 
0adb8     0C E4 85 F1 | 	sub	objptr, ##27148
0adbc     F8 00 90 FD | 	jmp	#LR__0933
0adc0                 | LR__0929
0adc0                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0adc0     00 3C 0E F2 | 	cmp	local12, #0 wz
0adc4     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0adc8     20 35 22 56 |  if_ne	not	local08, local14
0adcc     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0add0     34 00 90 AD |  if_e	jmp	#LR__0930
0add4     37 00 00 FF 
0add8     44 E4 05 F1 | 	add	objptr, ##28228
0addc     F2 38 02 FB | 	rdlong	local10, objptr
0ade0     03 38 66 F0 | 	shl	local10, #3
0ade4     02 00 00 FF 
0ade8     38 E4 85 F1 | 	sub	objptr, ##1080
0adec     F2 38 02 F1 | 	add	local10, objptr
0adf0     04 38 06 F1 | 	add	local10, #4
0adf4     01 00 80 FF 
0adf8     1C 03 68 FC | 	wrlong	##513, local10
0adfc     35 00 00 FF 
0ae00     0C E4 85 F1 | 	sub	objptr, ##27148
0ae04     B0 00 90 FD | 	jmp	#LR__0933
0ae08                 | LR__0930
0ae08                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ae08     00 3C 0E F2 | 	cmp	local12, #0 wz
0ae0c     1F 3F 22 56 |  if_ne	not	local13, local13
0ae10     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ae14     20 41 22 56 |  if_ne	not	local14, local14
0ae18     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ae1c     34 00 90 AD |  if_e	jmp	#LR__0931
0ae20     37 00 00 FF 
0ae24     44 E4 05 F1 | 	add	objptr, ##28228
0ae28     F2 38 02 FB | 	rdlong	local10, objptr
0ae2c     03 38 66 F0 | 	shl	local10, #3
0ae30     02 00 00 FF 
0ae34     38 E4 85 F1 | 	sub	objptr, ##1080
0ae38     F2 38 02 F1 | 	add	local10, objptr
0ae3c     04 38 06 F1 | 	add	local10, #4
0ae40     01 00 80 FF 
0ae44     1C 05 68 FC | 	wrlong	##514, local10
0ae48     35 00 00 FF 
0ae4c     0C E4 85 F1 | 	sub	objptr, ##27148
0ae50     64 00 90 FD | 	jmp	#LR__0933
0ae54                 | LR__0931
0ae54                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ae54     37 00 00 FF 
0ae58     44 E4 05 F1 | 	add	objptr, ##28228
0ae5c     F2 38 02 FB | 	rdlong	local10, objptr
0ae60     03 38 66 F0 | 	shl	local10, #3
0ae64     02 00 00 FF 
0ae68     38 E4 85 F1 | 	sub	objptr, ##1080
0ae6c     F2 38 02 F1 | 	add	local10, objptr
0ae70     1C 13 02 FB | 	rdlong	arg01, local10
0ae74     35 00 00 FF 
0ae78     0C E4 85 F1 | 	sub	objptr, ##27148
0ae7c     80 B9 BF FD | 	call	#_isname
0ae80     00 FA 0D F2 | 	cmp	result1, #0 wz
0ae84     30 00 90 AD |  if_e	jmp	#LR__0932
0ae88     37 00 00 FF 
0ae8c     44 E4 05 F1 | 	add	objptr, ##28228
0ae90     F2 38 02 FB | 	rdlong	local10, objptr
0ae94     03 38 66 F0 | 	shl	local10, #3
0ae98     02 00 00 FF 
0ae9c     38 E4 85 F1 | 	sub	objptr, ##1080
0aea0     F2 38 02 F1 | 	add	local10, objptr
0aea4     04 38 06 F1 | 	add	local10, #4
0aea8     01 00 80 FF 
0aeac     1C 09 68 FC | 	wrlong	##516, local10
0aeb0     35 00 00 FF 
0aeb4     0C E4 85 F1 | 	sub	objptr, ##27148
0aeb8                 | LR__0932
0aeb8                 | LR__0933
0aeb8     37 00 00 FF 
0aebc     44 E4 05 F1 | 	add	objptr, ##28228
0aec0     F2 34 02 FB | 	rdlong	local08, objptr
0aec4     01 34 86 F1 | 	sub	local08, #1
0aec8     F2 34 62 FC | 	wrlong	local08, objptr
0aecc     37 00 00 FF 
0aed0     44 E4 85 F1 | 	sub	objptr, ##28228
0aed4                 | LR__0934
0aed4     37 00 00 FF 
0aed8     44 E4 05 F1 | 	add	objptr, ##28228
0aedc     F2 34 02 FB | 	rdlong	local08, objptr
0aee0     01 34 06 F1 | 	add	local08, #1
0aee4     F2 34 62 FC | 	wrlong	local08, objptr
0aee8     37 00 00 FF 
0aeec     44 E4 85 F1 | 	sub	objptr, ##28228
0aef0     10 11 B0 FD | 	call	#_expr
0aef4     78 00 90 FD | 	jmp	#LR__0936
0aef8                 | LR__0935
0aef8     4A 00 00 FF 
0aefc     7C E4 05 F1 | 	add	objptr, ##38012
0af00     F2 40 02 FB | 	rdlong	local14, objptr
0af04     20 39 02 F6 | 	mov	local10, local14
0af08     01 38 66 F0 | 	shl	local10, #1
0af0c     20 39 02 F1 | 	add	local10, local14
0af10     02 38 66 F0 | 	shl	local10, #2
0af14     03 00 00 FF 
0af18     00 E4 85 F1 | 	sub	objptr, ##1536
0af1c     F2 38 02 F1 | 	add	local10, objptr
0af20     08 38 06 F1 | 	add	local10, #8
0af24     1C 39 68 FC | 	wrlong	#28, local10
0af28     03 00 00 FF 
0af2c     00 E4 05 F1 | 	add	objptr, ##1536
0af30     F2 40 02 FB | 	rdlong	local14, objptr
0af34     20 39 02 F6 | 	mov	local10, local14
0af38     01 38 66 F0 | 	shl	local10, #1
0af3c     20 39 02 F1 | 	add	local10, local14
0af40     02 38 66 F0 | 	shl	local10, #2
0af44     03 00 00 FF 
0af48     00 E4 85 F1 | 	sub	objptr, ##1536
0af4c     F2 38 02 F1 | 	add	local10, objptr
0af50     1C 03 68 FC | 	wrlong	#1, local10
0af54     03 00 00 FF 
0af58     00 E4 05 F1 | 	add	objptr, ##1536
0af5c     F2 34 02 FB | 	rdlong	local08, objptr
0af60     01 34 06 F1 | 	add	local08, #1
0af64     F2 34 62 FC | 	wrlong	local08, objptr
0af68     4A 00 00 FF 
0af6c     7C E4 85 F1 | 	sub	objptr, ##38012
0af70                 | LR__0936
0af70     4A 00 00 FF 
0af74     7C E4 05 F1 | 	add	objptr, ##38012
0af78     F2 40 02 FB | 	rdlong	local14, objptr
0af7c     20 39 02 F6 | 	mov	local10, local14
0af80     01 38 66 F0 | 	shl	local10, #1
0af84     20 39 02 F1 | 	add	local10, local14
0af88     02 38 66 F0 | 	shl	local10, #2
0af8c     03 00 00 FF 
0af90     00 E4 85 F1 | 	sub	objptr, ##1536
0af94     F2 38 02 F1 | 	add	local10, objptr
0af98     08 38 06 F1 | 	add	local10, #8
0af9c     1C 39 68 FC | 	wrlong	#28, local10
0afa0     03 00 00 FF 
0afa4     00 E4 05 F1 | 	add	objptr, ##1536
0afa8     F2 40 02 FB | 	rdlong	local14, objptr
0afac     20 39 02 F6 | 	mov	local10, local14
0afb0     01 38 66 F0 | 	shl	local10, #1
0afb4     20 39 02 F1 | 	add	local10, local14
0afb8     02 38 66 F0 | 	shl	local10, #2
0afbc     03 00 00 FF 
0afc0     00 E4 85 F1 | 	sub	objptr, ##1536
0afc4     F2 38 02 F1 | 	add	local10, objptr
0afc8     1C 33 62 FC | 	wrlong	local07, local10
0afcc     03 00 00 FF 
0afd0     00 E4 05 F1 | 	add	objptr, ##1536
0afd4     F2 40 02 FB | 	rdlong	local14, objptr
0afd8     01 40 06 F1 | 	add	local14, #1
0afdc     F2 40 62 FC | 	wrlong	local14, objptr
0afe0     20 39 02 F6 | 	mov	local10, local14
0afe4     01 38 66 F0 | 	shl	local10, #1
0afe8     20 39 02 F1 | 	add	local10, local14
0afec     02 38 66 F0 | 	shl	local10, #2
0aff0     03 00 00 FF 
0aff4     00 E4 85 F1 | 	sub	objptr, ##1536
0aff8     F2 38 02 F1 | 	add	local10, objptr
0affc     08 38 06 F1 | 	add	local10, #8
0b000     1C 95 68 FC | 	wrlong	#74, local10
0b004     03 00 00 FF 
0b008     00 E4 05 F1 | 	add	objptr, ##1536
0b00c     F2 40 02 FB | 	rdlong	local14, objptr
0b010     20 39 02 F6 | 	mov	local10, local14
0b014     01 38 66 F0 | 	shl	local10, #1
0b018     20 39 02 F1 | 	add	local10, local14
0b01c     02 38 66 F0 | 	shl	local10, #2
0b020     03 00 00 FF 
0b024     00 E4 85 F1 | 	sub	objptr, ##1536
0b028     F2 38 02 F1 | 	add	local10, objptr
0b02c     1C 01 68 FC | 	wrlong	#0, local10
0b030     03 00 00 FF 
0b034     00 E4 05 F1 | 	add	objptr, ##1536
0b038     F2 34 02 FB | 	rdlong	local08, objptr
0b03c     01 34 06 F1 | 	add	local08, #1
0b040     F2 34 62 FC | 	wrlong	local08, objptr
0b044     4A 00 00 FF 
0b048     7C E4 85 F1 | 	sub	objptr, ##38012
0b04c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0b04c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b04c                 | ' return 0
0b04c     00 FA 05 F6 | 	mov	result1, #0
0b050                 | LR__0937
0b050     A7 F0 03 F6 | 	mov	ptra, fp
0b054     B2 00 A0 FD | 	call	#popregs_
0b058                 | _compile_for_ret
0b058     2D 00 64 FD | 	ret
0b05c                 | 
0b05c                 | ' 
0b05c                 | ' '----- compile 'next' command. 
0b05c                 | ' 
0b05c                 | ' function compile_next() as ulong
0b05c                 | _compile_next
0b05c     04 4A 05 F6 | 	mov	COUNT_, #4
0b060     A8 00 A0 FD | 	call	#pushregs_
0b064     37 00 00 FF 
0b068     44 E4 05 F1 | 	add	objptr, ##28228
0b06c     F2 14 02 FB | 	rdlong	arg02, objptr
0b070     03 14 66 F0 | 	shl	arg02, #3
0b074     02 00 00 FF 
0b078     38 E4 85 F1 | 	sub	objptr, ##1080
0b07c     F2 14 02 F1 | 	add	arg02, objptr
0b080     0A 27 02 FB | 	rdlong	local01, arg02
0b084                 | ' 
0b084                 | ' varname$=lparts(ct).part$ 
0b084                 | ' if varnum=0 then return 35
0b084     04 E4 85 F1 | 	sub	objptr, #4
0b088     F2 14 0A FB | 	rdlong	arg02, objptr wz
0b08c     35 00 00 FF 
0b090     08 E4 85 F1 | 	sub	objptr, ##27144
0b094     23 FA 05 A6 |  if_e	mov	result1, #35
0b098     4C 01 90 AD |  if_e	jmp	#LR__0942
0b09c     01 28 66 F6 | 	neg	local02, #1
0b0a0                 | ' j=-1
0b0a0                 | ' for i=0 to varnum-1
0b0a0     00 2A 06 F6 | 	mov	local03, #0
0b0a4     35 00 00 FF 
0b0a8     08 E4 05 F1 | 	add	objptr, ##27144
0b0ac     F2 2C 02 FB | 	rdlong	local04, objptr
0b0b0     35 00 00 FF 
0b0b4     08 E4 85 F1 | 	sub	objptr, ##27144
0b0b8                 | LR__0940
0b0b8     16 2B 12 F2 | 	cmp	local03, local04 wc
0b0bc     38 00 90 3D |  if_ae	jmp	#LR__0941
0b0c0                 | '   if variables(i).name=varname$ then j=i : exit
0b0c0     15 15 02 F6 | 	mov	arg02, local03
0b0c4     04 14 66 F0 | 	shl	arg02, #4
0b0c8     14 00 00 FF 
0b0cc     F8 E5 05 F1 | 	add	objptr, ##10744
0b0d0     F2 14 02 F1 | 	add	arg02, objptr
0b0d4     0A 13 02 FB | 	rdlong	arg01, arg02
0b0d8     13 15 02 F6 | 	mov	arg02, local01
0b0dc     14 00 00 FF 
0b0e0     F8 E5 85 F1 | 	sub	objptr, ##10744
0b0e4     9C CA B1 FD | 	call	#__system___string_cmp
0b0e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b0ec     15 29 02 A6 |  if_e	mov	local02, local03
0b0f0     01 2A 06 51 |  if_ne	add	local03, #1
0b0f4     C0 FF 9F 5D |  if_ne	jmp	#LR__0940
0b0f8                 | LR__0941
0b0f8                 | ' if j=-1 then return 35
0b0f8     FF FF 7F FF 
0b0fc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0b100     23 FA 05 A6 |  if_e	mov	result1, #35
0b104     E0 00 90 AD |  if_e	jmp	#LR__0942
0b108     4A 00 00 FF 
0b10c     7C E4 05 F1 | 	add	objptr, ##38012
0b110     F2 2C 02 FB | 	rdlong	local04, objptr
0b114     16 2B 02 F6 | 	mov	local03, local04
0b118     01 2A 66 F0 | 	shl	local03, #1
0b11c     16 2B 02 F1 | 	add	local03, local04
0b120     02 2A 66 F0 | 	shl	local03, #2
0b124     03 00 00 FF 
0b128     00 E4 85 F1 | 	sub	objptr, ##1536
0b12c     F2 2A 02 F1 | 	add	local03, objptr
0b130     08 2A 06 F1 | 	add	local03, #8
0b134     15 39 68 FC | 	wrlong	#28, local03
0b138     03 00 00 FF 
0b13c     00 E4 05 F1 | 	add	objptr, ##1536
0b140     F2 2C 02 FB | 	rdlong	local04, objptr
0b144     16 2B 02 F6 | 	mov	local03, local04
0b148     01 2A 66 F0 | 	shl	local03, #1
0b14c     16 2B 02 F1 | 	add	local03, local04
0b150     02 2A 66 F0 | 	shl	local03, #2
0b154     03 00 00 FF 
0b158     00 E4 85 F1 | 	sub	objptr, ##1536
0b15c     F2 2A 02 F1 | 	add	local03, objptr
0b160     15 29 62 FC | 	wrlong	local02, local03
0b164     03 00 00 FF 
0b168     00 E4 05 F1 | 	add	objptr, ##1536
0b16c     F2 2C 02 FB | 	rdlong	local04, objptr
0b170     01 2C 06 F1 | 	add	local04, #1
0b174     F2 2C 62 FC | 	wrlong	local04, objptr
0b178     16 2B 02 F6 | 	mov	local03, local04
0b17c     01 2A 66 F0 | 	shl	local03, #1
0b180     16 2B 02 F1 | 	add	local03, local04
0b184     02 2A 66 F0 | 	shl	local03, #2
0b188     03 00 00 FF 
0b18c     00 E4 85 F1 | 	sub	objptr, ##1536
0b190     F2 2A 02 F1 | 	add	local03, objptr
0b194     08 2A 06 F1 | 	add	local03, #8
0b198     15 97 68 FC | 	wrlong	#75, local03
0b19c     03 00 00 FF 
0b1a0     00 E4 05 F1 | 	add	objptr, ##1536
0b1a4     F2 2C 02 FB | 	rdlong	local04, objptr
0b1a8     16 2B 02 F6 | 	mov	local03, local04
0b1ac     01 2A 66 F0 | 	shl	local03, #1
0b1b0     16 2B 02 F1 | 	add	local03, local04
0b1b4     02 2A 66 F0 | 	shl	local03, #2
0b1b8     03 00 00 FF 
0b1bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b1c0     F2 2A 02 F1 | 	add	local03, objptr
0b1c4     15 01 68 FC | 	wrlong	#0, local03
0b1c8     03 00 00 FF 
0b1cc     00 E4 05 F1 | 	add	objptr, ##1536
0b1d0     F2 2C 02 FB | 	rdlong	local04, objptr
0b1d4     01 2C 06 F1 | 	add	local04, #1
0b1d8     F2 2C 62 FC | 	wrlong	local04, objptr
0b1dc     4A 00 00 FF 
0b1e0     7C E4 85 F1 | 	sub	objptr, ##38012
0b1e4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b1e4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b1e4                 | ' return 0
0b1e4     00 FA 05 F6 | 	mov	result1, #0
0b1e8                 | LR__0942
0b1e8     A7 F0 03 F6 | 	mov	ptra, fp
0b1ec     B2 00 A0 FD | 	call	#popregs_
0b1f0                 | _compile_next_ret
0b1f0     2D 00 64 FD | 	ret
0b1f4                 | 
0b1f4                 | ' 
0b1f4                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b1f4                 | ' 
0b1f4                 | ' function compile_gosub() as ulong
0b1f4                 | _compile_gosub
0b1f4     02 4A 05 F6 | 	mov	COUNT_, #2
0b1f8     A8 00 A0 FD | 	call	#pushregs_
0b1fc     4A 00 00 FF 
0b200     7C E4 05 F1 | 	add	objptr, ##38012
0b204     F2 26 02 FB | 	rdlong	local01, objptr
0b208     13 29 02 F6 | 	mov	local02, local01
0b20c     01 28 66 F0 | 	shl	local02, #1
0b210     13 29 02 F1 | 	add	local02, local01
0b214     02 28 66 F0 | 	shl	local02, #2
0b218     03 00 00 FF 
0b21c     00 E4 85 F1 | 	sub	objptr, ##1536
0b220     F2 28 02 F1 | 	add	local02, objptr
0b224     08 28 06 F1 | 	add	local02, #8
0b228     14 53 69 FC | 	wrlong	#169, local02
0b22c     03 00 00 FF 
0b230     00 E4 05 F1 | 	add	objptr, ##1536
0b234     F2 28 02 FB | 	rdlong	local02, objptr
0b238     01 28 06 F1 | 	add	local02, #1
0b23c     F2 28 62 FC | 	wrlong	local02, objptr
0b240     4A 00 00 FF 
0b244     7C E4 85 F1 | 	sub	objptr, ##38012
0b248     0C 00 B0 FD | 	call	#_compile_goto
0b24c                 | ' compiledline(lineptr).result_type=token_gosub
0b24c                 | ' lineptr+=1
0b24c                 | ' err=compile_goto()
0b24c                 | ' return err
0b24c     A7 F0 03 F6 | 	mov	ptra, fp
0b250     B2 00 A0 FD | 	call	#popregs_
0b254                 | _compile_gosub_ret
0b254     2D 00 64 FD | 	ret
0b258                 | 
0b258                 | ' 
0b258                 | ' '----- compile 'goto' 
0b258                 | ' 
0b258                 | ' function compile_goto() as ulong
0b258                 | _compile_goto
0b258     03 4A 05 F6 | 	mov	COUNT_, #3
0b25c     A8 00 A0 FD | 	call	#pushregs_
0b260     34 F0 07 F1 | 	add	ptra, #52
0b264                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b264     37 00 00 FF 
0b268     44 E4 05 F1 | 	add	objptr, ##28228
0b26c     F2 16 02 FB | 	rdlong	arg03, objptr
0b270     03 16 66 F0 | 	shl	arg03, #3
0b274     02 00 00 FF 
0b278     38 E4 85 F1 | 	sub	objptr, ##1080
0b27c     F2 16 02 F1 | 	add	arg03, objptr
0b280     04 16 06 F1 | 	add	arg03, #4
0b284     0B 17 02 FB | 	rdlong	arg03, arg03
0b288     01 00 00 FF 
0b28c     00 16 0E F2 | 	cmp	arg03, ##512 wz
0b290     35 00 00 FF 
0b294     0C E4 85 F1 | 	sub	objptr, ##27148
0b298     CC 02 90 5D |  if_ne	jmp	#LR__0955
0b29c     37 00 00 FF 
0b2a0     44 E4 05 F1 | 	add	objptr, ##28228
0b2a4     F2 16 02 FB | 	rdlong	arg03, objptr
0b2a8     01 16 06 F1 | 	add	arg03, #1
0b2ac     03 16 66 F0 | 	shl	arg03, #3
0b2b0     02 00 00 FF 
0b2b4     38 E4 85 F1 | 	sub	objptr, ##1080
0b2b8     F2 16 02 F1 | 	add	arg03, objptr
0b2bc     04 16 06 F1 | 	add	arg03, #4
0b2c0     0B 17 02 FB | 	rdlong	arg03, arg03
0b2c4     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b2c8     35 00 00 FF 
0b2cc     0C E4 85 F1 | 	sub	objptr, ##27148
0b2d0     94 02 90 5D |  if_ne	jmp	#LR__0955
0b2d4     37 00 00 FF 
0b2d8     44 E4 05 F1 | 	add	objptr, ##28228
0b2dc     F2 16 02 FB | 	rdlong	arg03, objptr
0b2e0     03 16 66 F0 | 	shl	arg03, #3
0b2e4     02 00 00 FF 
0b2e8     38 E4 85 F1 | 	sub	objptr, ##1080
0b2ec     F2 16 02 F1 | 	add	arg03, objptr
0b2f0     0B 13 02 FB | 	rdlong	arg01, arg03
0b2f4     00 14 06 F6 | 	mov	arg02, #0
0b2f8     35 00 00 FF 
0b2fc     0C E4 85 F1 | 	sub	objptr, ##27148
0b300     4C FD B1 FD | 	call	#__system____builtin_atoi
0b304     04 4E 05 F1 | 	add	fp, #4
0b308     A7 FA 61 FC | 	wrlong	result1, fp
0b30c     4A 00 00 FF 
0b310     7C E4 05 F1 | 	add	objptr, ##38012
0b314     F2 26 02 FB | 	rdlong	local01, objptr
0b318     13 29 02 F6 | 	mov	local02, local01
0b31c     01 28 66 F0 | 	shl	local02, #1
0b320     13 29 02 F1 | 	add	local02, local01
0b324     02 28 66 F0 | 	shl	local02, #2
0b328     03 00 00 FF 
0b32c     00 E4 85 F1 | 	sub	objptr, ##1536
0b330     F2 28 02 F1 | 	add	local02, objptr
0b334     08 28 06 F1 | 	add	local02, #8
0b338     14 9D 68 FC | 	wrlong	#78, local02
0b33c     03 00 00 FF 
0b340     0C E4 05 F1 | 	add	objptr, ##1548
0b344     F2 2A 02 FB | 	rdlong	local03, objptr
0b348     4A 00 00 FF 
0b34c     88 E4 85 F1 | 	sub	objptr, ##38024
0b350     04 4E 05 F1 | 	add	fp, #4
0b354     A7 2A 62 FC | 	wrlong	local03, fp
0b358     08 4E 85 F1 | 	sub	fp, #8
0b35c                 | '   gotoline=val%(lparts(ct).part$) 
0b35c                 | '   compiledline(lineptr).result_type=token_fast_goto
0b35c                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b35c                 | '   do
0b35c                 | LR__0950
0b35c     10 4E 05 F1 | 	add	fp, #16
0b360     A7 12 02 F6 | 	mov	arg01, fp
0b364     08 4E 85 F1 | 	sub	fp, #8
0b368     A7 14 02 FB | 	rdlong	arg02, fp
0b36c     08 4E 85 F1 | 	sub	fp, #8
0b370     18 16 06 F6 | 	mov	arg03, #24
0b374     0B 00 00 FF 
0b378     CC E4 05 F1 | 	add	objptr, ##5836
0b37c     38 BB B1 FD | 	call	#_psram_spin2_read1
0b380     0B 00 00 FF 
0b384     CC E4 85 F1 | 	sub	objptr, ##5836
0b388                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b388                 | '     if gotoheader(0)<>$FFFFFFFF then
0b388     10 4E 05 F1 | 	add	fp, #16
0b38c     A7 2A 02 FB | 	rdlong	local03, fp
0b390     10 4E 85 F1 | 	sub	fp, #16
0b394     FF FF 7F FF 
0b398     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b39c     24 00 90 AD |  if_e	jmp	#LR__0951
0b3a0     08 4E 05 F1 | 	add	fp, #8
0b3a4     A7 2A 02 FB | 	rdlong	local03, fp
0b3a8     04 4E 05 F1 | 	add	fp, #4
0b3ac     A7 2A 62 FC | 	wrlong	local03, fp
0b3b0     18 4E 05 F1 | 	add	fp, #24
0b3b4     A7 2A 02 FB | 	rdlong	local03, fp
0b3b8     1C 4E 85 F1 | 	sub	fp, #28
0b3bc     A7 2A 62 FC | 	wrlong	local03, fp
0b3c0     08 4E 85 F1 | 	sub	fp, #8
0b3c4                 | LR__0951
0b3c4     24 4E 05 F1 | 	add	fp, #36
0b3c8     A7 2A 02 FB | 	rdlong	local03, fp
0b3cc     24 4E 85 F1 | 	sub	fp, #36
0b3d0     FF FF 3F FF 
0b3d4     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b3d8     10 4E 05 51 |  if_ne	add	fp, #16
0b3dc     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b3e0     10 4E 85 51 |  if_ne	sub	fp, #16
0b3e4     FF FF 7F 5F 
0b3e8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b3ec     1C 00 90 AD |  if_e	jmp	#LR__0952
0b3f0     10 4E 05 F1 | 	add	fp, #16
0b3f4     A7 2A 02 FB | 	rdlong	local03, fp
0b3f8     0C 4E 85 F1 | 	sub	fp, #12
0b3fc     A7 28 02 FB | 	rdlong	local02, fp
0b400     04 4E 85 F1 | 	sub	fp, #4
0b404     14 2B 0A F2 | 	cmp	local03, local02 wz
0b408     50 FF 9F 5D |  if_ne	jmp	#LR__0950
0b40c                 | LR__0952
0b40c                 | '   if gotoheader(0)=gotoline then
0b40c     10 4E 05 F1 | 	add	fp, #16
0b410     A7 2A 02 FB | 	rdlong	local03, fp
0b414     0C 4E 85 F1 | 	sub	fp, #12
0b418     A7 26 02 FB | 	rdlong	local01, fp
0b41c     04 4E 85 F1 | 	sub	fp, #4
0b420     13 2B 0A F2 | 	cmp	local03, local01 wz
0b424     7C 00 90 5D |  if_ne	jmp	#LR__0953
0b428     4A 00 00 FF 
0b42c     7C E4 05 F1 | 	add	objptr, ##38012
0b430     F2 26 02 FB | 	rdlong	local01, objptr
0b434     13 29 02 F6 | 	mov	local02, local01
0b438     01 28 66 F0 | 	shl	local02, #1
0b43c     13 29 02 F1 | 	add	local02, local01
0b440     02 28 66 F0 | 	shl	local02, #2
0b444     03 00 00 FF 
0b448     00 E4 85 F1 | 	sub	objptr, ##1536
0b44c     F2 28 02 F1 | 	add	local02, objptr
0b450     0C 4E 05 F1 | 	add	fp, #12
0b454     A7 2A 02 FB | 	rdlong	local03, fp
0b458     14 2B 62 FC | 	wrlong	local03, local02
0b45c     03 00 00 FF 
0b460     00 E4 05 F1 | 	add	objptr, ##1536
0b464     F2 26 02 FB | 	rdlong	local01, objptr
0b468     13 29 02 F6 | 	mov	local02, local01
0b46c     01 28 66 F0 | 	shl	local02, #1
0b470     13 29 02 F1 | 	add	local02, local01
0b474     02 28 66 F0 | 	shl	local02, #2
0b478     03 00 00 FF 
0b47c     00 E4 85 F1 | 	sub	objptr, ##1536
0b480     F2 28 02 F1 | 	add	local02, objptr
0b484     08 4E 85 F1 | 	sub	fp, #8
0b488     A7 2A 02 FB | 	rdlong	local03, fp
0b48c     04 4E 85 F1 | 	sub	fp, #4
0b490     04 28 06 F1 | 	add	local02, #4
0b494     14 2B 62 FC | 	wrlong	local03, local02
0b498     47 00 00 FF 
0b49c     7C E4 85 F1 | 	sub	objptr, ##36476
0b4a0     A4 00 90 FD | 	jmp	#LR__0954
0b4a4                 | LR__0953
0b4a4     4A 00 00 FF 
0b4a8     7C E4 05 F1 | 	add	objptr, ##38012
0b4ac     F2 26 02 FB | 	rdlong	local01, objptr
0b4b0     13 29 02 F6 | 	mov	local02, local01
0b4b4     01 28 66 F0 | 	shl	local02, #1
0b4b8     13 29 02 F1 | 	add	local02, local01
0b4bc     02 28 66 F0 | 	shl	local02, #2
0b4c0     03 00 00 FF 
0b4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c8     F2 28 02 F1 | 	add	local02, objptr
0b4cc     00 00 C0 FF 
0b4d0     14 01 68 FC | 	wrlong	##-2147483648, local02
0b4d4     03 00 00 FF 
0b4d8     00 E4 05 F1 | 	add	objptr, ##1536
0b4dc     F2 26 02 FB | 	rdlong	local01, objptr
0b4e0     13 29 02 F6 | 	mov	local02, local01
0b4e4     01 28 66 F0 | 	shl	local02, #1
0b4e8     13 29 02 F1 | 	add	local02, local01
0b4ec     02 28 66 F0 | 	shl	local02, #2
0b4f0     03 00 00 FF 
0b4f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4f8     F2 28 02 F1 | 	add	local02, objptr
0b4fc     04 4E 05 F1 | 	add	fp, #4
0b500     A7 2A 02 FB | 	rdlong	local03, fp
0b504     04 4E 85 F1 | 	sub	fp, #4
0b508     04 28 06 F1 | 	add	local02, #4
0b50c     14 2B 62 FC | 	wrlong	local03, local02
0b510     03 00 00 FF 
0b514     00 E4 05 F1 | 	add	objptr, ##1536
0b518     F2 26 02 FB | 	rdlong	local01, objptr
0b51c     13 29 02 F6 | 	mov	local02, local01
0b520     01 28 66 F0 | 	shl	local02, #1
0b524     13 29 02 F1 | 	add	local02, local01
0b528     02 28 66 F0 | 	shl	local02, #2
0b52c     03 00 00 FF 
0b530     00 E4 85 F1 | 	sub	objptr, ##1536
0b534     F2 28 02 F1 | 	add	local02, objptr
0b538     08 28 06 F1 | 	add	local02, #8
0b53c     14 A7 68 FC | 	wrlong	#83, local02
0b540     47 00 00 FF 
0b544     7C E4 85 F1 | 	sub	objptr, ##36476
0b548                 | LR__0954
0b548     4A 00 00 FF 
0b54c     7C E4 05 F1 | 	add	objptr, ##38012
0b550     F2 2A 02 FB | 	rdlong	local03, objptr
0b554     01 2A 06 F1 | 	add	local03, #1
0b558     F2 2A 62 FC | 	wrlong	local03, objptr
0b55c     4A 00 00 FF 
0b560     7C E4 85 F1 | 	sub	objptr, ##38012
0b564     D0 00 90 FD | 	jmp	#LR__0956
0b568                 | LR__0955
0b568     98 0A B0 FD | 	call	#_expr
0b56c     30 4E 05 F1 | 	add	fp, #48
0b570     A7 9E 68 FC | 	wrlong	#79, fp
0b574     08 4E 85 F1 | 	sub	fp, #8
0b578     A7 00 68 FC | 	wrlong	#0, fp
0b57c     04 4E 05 F1 | 	add	fp, #4
0b580     A7 2A 02 FB | 	rdlong	local03, fp
0b584     04 4E 05 F1 | 	add	fp, #4
0b588     A7 26 02 FB | 	rdlong	local01, fp
0b58c     30 4E 85 F1 | 	sub	fp, #48
0b590     4A 00 00 FF 
0b594     7C E4 05 F1 | 	add	objptr, ##38012
0b598     F2 28 02 FB | 	rdlong	local02, objptr
0b59c     14 17 02 F6 | 	mov	arg03, local02
0b5a0     01 16 66 F0 | 	shl	arg03, #1
0b5a4     14 17 02 F1 | 	add	arg03, local02
0b5a8     02 16 66 F0 | 	shl	arg03, #2
0b5ac     03 00 00 FF 
0b5b0     00 E4 85 F1 | 	sub	objptr, ##1536
0b5b4     F2 16 02 F1 | 	add	arg03, objptr
0b5b8     0B 01 68 FC | 	wrlong	#0, arg03
0b5bc     03 00 00 FF 
0b5c0     00 E4 05 F1 | 	add	objptr, ##1536
0b5c4     F2 28 02 FB | 	rdlong	local02, objptr
0b5c8     14 17 02 F6 | 	mov	arg03, local02
0b5cc     01 16 66 F0 | 	shl	arg03, #1
0b5d0     14 17 02 F1 | 	add	arg03, local02
0b5d4     02 16 66 F0 | 	shl	arg03, #2
0b5d8     03 00 00 FF 
0b5dc     00 E4 85 F1 | 	sub	objptr, ##1536
0b5e0     F2 16 02 F1 | 	add	arg03, objptr
0b5e4     04 16 06 F1 | 	add	arg03, #4
0b5e8     0B 2B 62 FC | 	wrlong	local03, arg03
0b5ec     03 00 00 FF 
0b5f0     00 E4 05 F1 | 	add	objptr, ##1536
0b5f4     F2 2A 02 FB | 	rdlong	local03, objptr
0b5f8     15 29 02 F6 | 	mov	local02, local03
0b5fc     01 28 66 F0 | 	shl	local02, #1
0b600     15 29 02 F1 | 	add	local02, local03
0b604     02 28 66 F0 | 	shl	local02, #2
0b608     03 00 00 FF 
0b60c     00 E4 85 F1 | 	sub	objptr, ##1536
0b610     F2 28 02 F1 | 	add	local02, objptr
0b614     08 28 06 F1 | 	add	local02, #8
0b618     14 27 62 FC | 	wrlong	local01, local02
0b61c     03 00 00 FF 
0b620     00 E4 05 F1 | 	add	objptr, ##1536
0b624     F2 2A 02 FB | 	rdlong	local03, objptr
0b628     01 2A 06 F1 | 	add	local03, #1
0b62c     F2 2A 62 FC | 	wrlong	local03, objptr
0b630     4A 00 00 FF 
0b634     7C E4 85 F1 | 	sub	objptr, ##38012
0b638                 | LR__0956
0b638                 | ' return 0
0b638     00 FA 05 F6 | 	mov	result1, #0
0b63c     A7 F0 03 F6 | 	mov	ptra, fp
0b640     B2 00 A0 FD | 	call	#popregs_
0b644                 | _compile_goto_ret
0b644     2D 00 64 FD | 	ret
0b648                 | 
0b648                 | ' 
0b648                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b648                 | ' 
0b648                 | ' function compile_on() as ulong
0b648                 | _compile_on
0b648     04 4A 05 F6 | 	mov	COUNT_, #4
0b64c     A8 00 A0 FD | 	call	#pushregs_
0b650     B0 09 B0 FD | 	call	#_expr
0b654     00 26 06 F6 | 	mov	local01, #0
0b658     4A 00 00 FF 
0b65c     7C E4 05 F1 | 	add	objptr, ##38012
0b660     F2 14 02 FB | 	rdlong	arg02, objptr
0b664     0A 13 02 F6 | 	mov	arg01, arg02
0b668     01 12 66 F0 | 	shl	arg01, #1
0b66c     0A 13 02 F1 | 	add	arg01, arg02
0b670     02 12 66 F0 | 	shl	arg01, #2
0b674     03 00 00 FF 
0b678     00 E4 85 F1 | 	sub	objptr, ##1536
0b67c     F2 12 02 F1 | 	add	arg01, objptr
0b680     08 12 06 F1 | 	add	arg01, #8
0b684     09 83 69 FC | 	wrlong	#193, arg01
0b688     03 00 00 FF 
0b68c     00 E4 05 F1 | 	add	objptr, ##1536
0b690     F2 14 02 FB | 	rdlong	arg02, objptr
0b694     0A 29 02 F6 | 	mov	local02, arg02
0b698     01 14 06 F1 | 	add	arg02, #1
0b69c     F2 14 62 FC | 	wrlong	arg02, objptr
0b6a0                 | ' expr()
0b6a0                 | ' 'print lparts(ct).part$ 'ok
0b6a0                 | ' numpar=0
0b6a0                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b6a0                 | ' if lparts(ct).part$="goto" then
0b6a0     13 00 00 FF 
0b6a4     38 E4 85 F1 | 	sub	objptr, ##9784
0b6a8     F2 14 02 FB | 	rdlong	arg02, objptr
0b6ac     03 14 66 F0 | 	shl	arg02, #3
0b6b0     02 00 00 FF 
0b6b4     38 E4 85 F1 | 	sub	objptr, ##1080
0b6b8     F2 14 02 F1 | 	add	arg02, objptr
0b6bc     0A 13 02 FB | 	rdlong	arg01, arg02
0b6c0     BF 01 00 FF 
0b6c4     42 14 06 F6 | 	mov	arg02, ##@LR__5982
0b6c8     35 00 00 FF 
0b6cc     0C E4 85 F1 | 	sub	objptr, ##27148
0b6d0     B0 C4 B1 FD | 	call	#__system___string_cmp
0b6d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b6d8     14 02 90 5D |  if_ne	jmp	#LR__0965
0b6dc     37 00 00 FF 
0b6e0     44 E4 05 F1 | 	add	objptr, ##28228
0b6e4     F2 2A 02 FB | 	rdlong	local03, objptr
0b6e8     37 00 00 FF 
0b6ec     44 E4 85 F1 | 	sub	objptr, ##28228
0b6f0     01 2A 06 F1 | 	add	local03, #1
0b6f4                 | '   i=ct+1
0b6f4                 | '   do
0b6f4                 | LR__0960
0b6f4                 | '     if lparts(i).token=token_decimal then
0b6f4     15 FB 01 F6 | 	mov	result1, local03
0b6f8     03 FA 65 F0 | 	shl	result1, #3
0b6fc     35 00 00 FF 
0b700     0C E4 05 F1 | 	add	objptr, ##27148
0b704     F2 FA 01 F1 | 	add	result1, objptr
0b708     04 FA 05 F1 | 	add	result1, #4
0b70c     FD FA 01 FB | 	rdlong	result1, result1
0b710     01 00 00 FF 
0b714     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b718     35 00 00 FF 
0b71c     0C E4 85 F1 | 	sub	objptr, ##27148
0b720     DC 00 90 5D |  if_ne	jmp	#LR__0961
0b724     4A 00 00 FF 
0b728     7C E4 05 F1 | 	add	objptr, ##38012
0b72c     F2 FA 01 FB | 	rdlong	result1, objptr
0b730     FD 14 02 F6 | 	mov	arg02, result1
0b734     01 14 66 F0 | 	shl	arg02, #1
0b738     FD 14 02 F1 | 	add	arg02, result1
0b73c     02 14 66 F0 | 	shl	arg02, #2
0b740     03 00 00 FF 
0b744     00 E4 85 F1 | 	sub	objptr, ##1536
0b748     F2 14 02 F1 | 	add	arg02, objptr
0b74c     00 00 C0 FF 
0b750     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b754     03 00 00 FF 
0b758     00 E4 05 F1 | 	add	objptr, ##1536
0b75c     F2 14 02 FB | 	rdlong	arg02, objptr
0b760     0A 2D 02 F6 | 	mov	local04, arg02
0b764     01 2C 66 F0 | 	shl	local04, #1
0b768     0A 2D 02 F1 | 	add	local04, arg02
0b76c     02 2C 66 F0 | 	shl	local04, #2
0b770     03 00 00 FF 
0b774     00 E4 85 F1 | 	sub	objptr, ##1536
0b778     F2 2C 02 F1 | 	add	local04, objptr
0b77c     15 15 02 F6 | 	mov	arg02, local03
0b780     03 14 66 F0 | 	shl	arg02, #3
0b784     12 00 00 FF 
0b788     70 E4 85 F1 | 	sub	objptr, ##9328
0b78c     F2 14 02 F1 | 	add	arg02, objptr
0b790     0A 13 02 FB | 	rdlong	arg01, arg02
0b794     00 14 06 F6 | 	mov	arg02, #0
0b798     35 00 00 FF 
0b79c     0C E4 85 F1 | 	sub	objptr, ##27148
0b7a0     AC F8 B1 FD | 	call	#__system____builtin_atoi
0b7a4     04 2C 06 F1 | 	add	local04, #4
0b7a8     16 FB 61 FC | 	wrlong	result1, local04
0b7ac     4A 00 00 FF 
0b7b0     7C E4 05 F1 | 	add	objptr, ##38012
0b7b4     F2 14 02 FB | 	rdlong	arg02, objptr
0b7b8     0A 2D 02 F6 | 	mov	local04, arg02
0b7bc     01 2C 66 F0 | 	shl	local04, #1
0b7c0     0A 2D 02 F1 | 	add	local04, arg02
0b7c4     02 2C 66 F0 | 	shl	local04, #2
0b7c8     03 00 00 FF 
0b7cc     00 E4 85 F1 | 	sub	objptr, ##1536
0b7d0     F2 2C 02 F1 | 	add	local04, objptr
0b7d4     08 2C 06 F1 | 	add	local04, #8
0b7d8     16 A7 68 FC | 	wrlong	#83, local04
0b7dc     03 00 00 FF 
0b7e0     00 E4 05 F1 | 	add	objptr, ##1536
0b7e4     F2 2C 02 FB | 	rdlong	local04, objptr
0b7e8     01 2C 06 F1 | 	add	local04, #1
0b7ec     F2 2C 62 FC | 	wrlong	local04, objptr
0b7f0     4A 00 00 FF 
0b7f4     7C E4 85 F1 | 	sub	objptr, ##38012
0b7f8     01 26 06 F1 | 	add	local01, #1
0b7fc     08 00 90 FD | 	jmp	#LR__0962
0b800                 | LR__0961
0b800                 | '       return 17
0b800     11 FA 05 F6 | 	mov	result1, #17
0b804     5C 04 90 FD | 	jmp	#LR__0975
0b808                 | LR__0962
0b808     01 2A 06 F1 | 	add	local03, #1
0b80c                 | '     i+=1
0b80c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b80c     15 2D 02 F6 | 	mov	local04, local03
0b810     03 2C 66 F0 | 	shl	local04, #3
0b814     35 00 00 FF 
0b818     0C E4 05 F1 | 	add	objptr, ##27148
0b81c     F2 2C 02 F1 | 	add	local04, objptr
0b820     04 2C 06 F1 | 	add	local04, #4
0b824     16 2D 02 FB | 	rdlong	local04, local04
0b828     11 2C 0E F2 | 	cmp	local04, #17 wz
0b82c     35 00 00 FF 
0b830     0C E4 85 F1 | 	sub	objptr, ##27148
0b834     30 00 90 AD |  if_e	jmp	#LR__0963
0b838     15 2D 02 F6 | 	mov	local04, local03
0b83c     03 2C 66 F0 | 	shl	local04, #3
0b840     35 00 00 FF 
0b844     0C E4 05 F1 | 	add	objptr, ##27148
0b848     F2 2C 02 F1 | 	add	local04, objptr
0b84c     04 2C 06 F1 | 	add	local04, #4
0b850     16 2D 02 FB | 	rdlong	local04, local04
0b854     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b858     35 00 00 FF 
0b85c     0C E4 85 F1 | 	sub	objptr, ##27148
0b860     15 FA 05 56 |  if_ne	mov	result1, #21
0b864     FC 03 90 5D |  if_ne	jmp	#LR__0975
0b868                 | LR__0963
0b868                 | '     if lparts(i).token=token_end then exit loop
0b868     15 2D 02 F6 | 	mov	local04, local03
0b86c     03 2C 66 F0 | 	shl	local04, #3
0b870     35 00 00 FF 
0b874     0C E4 05 F1 | 	add	objptr, ##27148
0b878     F2 2C 02 F1 | 	add	local04, objptr
0b87c     04 2C 06 F1 | 	add	local04, #4
0b880     16 2D 02 FB | 	rdlong	local04, local04
0b884     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b888     35 00 00 FF 
0b88c     0C E4 85 F1 | 	sub	objptr, ##27148
0b890     30 00 90 AD |  if_e	jmp	#LR__0964
0b894     01 2A 06 F1 | 	add	local03, #1
0b898     15 2D 02 F6 | 	mov	local04, local03
0b89c     03 2C 66 F0 | 	shl	local04, #3
0b8a0     35 00 00 FF 
0b8a4     0C E4 05 F1 | 	add	objptr, ##27148
0b8a8     F2 2C 02 F1 | 	add	local04, objptr
0b8ac     04 2C 06 F1 | 	add	local04, #4
0b8b0     16 2D 02 FB | 	rdlong	local04, local04
0b8b4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b8b8     35 00 00 FF 
0b8bc     0C E4 85 F1 | 	sub	objptr, ##27148
0b8c0     30 FE 9F 5D |  if_ne	jmp	#LR__0960
0b8c4                 | LR__0964
0b8c4     14 2D 02 F6 | 	mov	local04, local02
0b8c8     01 2C 66 F0 | 	shl	local04, #1
0b8cc     14 2D 02 F1 | 	add	local04, local02
0b8d0     02 2C 66 F0 | 	shl	local04, #2
0b8d4     47 00 00 FF 
0b8d8     7C E4 05 F1 | 	add	objptr, ##36476
0b8dc     F2 2C 02 F1 | 	add	local04, objptr
0b8e0     04 2C 06 F1 | 	add	local04, #4
0b8e4     16 03 68 FC | 	wrlong	#1, local04
0b8e8     47 00 00 FF 
0b8ec     7C E4 85 F1 | 	sub	objptr, ##36476
0b8f0                 | LR__0965
0b8f0                 | ' 
0b8f0                 | ' if lparts(ct).part$="gosub" then
0b8f0     37 00 00 FF 
0b8f4     44 E4 05 F1 | 	add	objptr, ##28228
0b8f8     F2 2A 02 FB | 	rdlong	local03, objptr
0b8fc     03 2A 66 F0 | 	shl	local03, #3
0b900     02 00 00 FF 
0b904     38 E4 85 F1 | 	sub	objptr, ##1080
0b908     F2 2A 02 F1 | 	add	local03, objptr
0b90c     15 13 02 FB | 	rdlong	arg01, local03
0b910     BF 01 00 FF 
0b914     47 14 06 F6 | 	mov	arg02, ##@LR__5983
0b918     35 00 00 FF 
0b91c     0C E4 85 F1 | 	sub	objptr, ##27148
0b920     60 C2 B1 FD | 	call	#__system___string_cmp
0b924     00 FA 0D F2 | 	cmp	result1, #0 wz
0b928     84 02 90 5D |  if_ne	jmp	#LR__0971
0b92c     37 00 00 FF 
0b930     44 E4 05 F1 | 	add	objptr, ##28228
0b934     F2 2A 02 FB | 	rdlong	local03, objptr
0b938     37 00 00 FF 
0b93c     44 E4 85 F1 | 	sub	objptr, ##28228
0b940     01 2A 06 F1 | 	add	local03, #1
0b944                 | '   i=ct+1
0b944                 | '   do
0b944                 | LR__0966
0b944                 | '     if lparts(i).token=token_decimal then
0b944     15 2D 02 F6 | 	mov	local04, local03
0b948     03 2C 66 F0 | 	shl	local04, #3
0b94c     35 00 00 FF 
0b950     0C E4 05 F1 | 	add	objptr, ##27148
0b954     F2 2C 02 F1 | 	add	local04, objptr
0b958     04 2C 06 F1 | 	add	local04, #4
0b95c     16 2D 02 FB | 	rdlong	local04, local04
0b960     01 00 00 FF 
0b964     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b968     35 00 00 FF 
0b96c     0C E4 85 F1 | 	sub	objptr, ##27148
0b970     4C 01 90 5D |  if_ne	jmp	#LR__0967
0b974     4A 00 00 FF 
0b978     7C E4 05 F1 | 	add	objptr, ##38012
0b97c     F2 FA 01 FB | 	rdlong	result1, objptr
0b980     FD 2C 02 F6 | 	mov	local04, result1
0b984     01 2C 66 F0 | 	shl	local04, #1
0b988     FD 2C 02 F1 | 	add	local04, result1
0b98c     02 2C 66 F0 | 	shl	local04, #2
0b990     03 00 00 FF 
0b994     00 E4 85 F1 | 	sub	objptr, ##1536
0b998     F2 2C 02 F1 | 	add	local04, objptr
0b99c     08 2C 06 F1 | 	add	local04, #8
0b9a0     16 53 69 FC | 	wrlong	#169, local04
0b9a4     03 00 00 FF 
0b9a8     00 E4 05 F1 | 	add	objptr, ##1536
0b9ac     F2 FA 01 FB | 	rdlong	result1, objptr
0b9b0     01 FA 05 F1 | 	add	result1, #1
0b9b4     F2 FA 61 FC | 	wrlong	result1, objptr
0b9b8     FD 2C 02 F6 | 	mov	local04, result1
0b9bc     01 2C 66 F0 | 	shl	local04, #1
0b9c0     FD 2C 02 F1 | 	add	local04, result1
0b9c4     02 2C 66 F0 | 	shl	local04, #2
0b9c8     03 00 00 FF 
0b9cc     00 E4 85 F1 | 	sub	objptr, ##1536
0b9d0     F2 2C 02 F1 | 	add	local04, objptr
0b9d4     00 00 C0 FF 
0b9d8     16 01 68 FC | 	wrlong	##-2147483648, local04
0b9dc     03 00 00 FF 
0b9e0     00 E4 05 F1 | 	add	objptr, ##1536
0b9e4     F2 FA 01 FB | 	rdlong	result1, objptr
0b9e8     FD 2C 02 F6 | 	mov	local04, result1
0b9ec     01 2C 66 F0 | 	shl	local04, #1
0b9f0     FD 2C 02 F1 | 	add	local04, result1
0b9f4     02 2C 66 F0 | 	shl	local04, #2
0b9f8     03 00 00 FF 
0b9fc     00 E4 85 F1 | 	sub	objptr, ##1536
0ba00     F2 2C 02 F1 | 	add	local04, objptr
0ba04     15 13 02 F6 | 	mov	arg01, local03
0ba08     03 12 66 F0 | 	shl	arg01, #3
0ba0c     12 00 00 FF 
0ba10     70 E4 85 F1 | 	sub	objptr, ##9328
0ba14     F2 12 02 F1 | 	add	arg01, objptr
0ba18     09 13 02 FB | 	rdlong	arg01, arg01
0ba1c     00 14 06 F6 | 	mov	arg02, #0
0ba20     35 00 00 FF 
0ba24     0C E4 85 F1 | 	sub	objptr, ##27148
0ba28     24 F6 B1 FD | 	call	#__system____builtin_atoi
0ba2c     04 2C 06 F1 | 	add	local04, #4
0ba30     16 FB 61 FC | 	wrlong	result1, local04
0ba34     4A 00 00 FF 
0ba38     7C E4 05 F1 | 	add	objptr, ##38012
0ba3c     F2 12 02 FB | 	rdlong	arg01, objptr
0ba40     09 2D 02 F6 | 	mov	local04, arg01
0ba44     01 2C 66 F0 | 	shl	local04, #1
0ba48     09 2D 02 F1 | 	add	local04, arg01
0ba4c     02 2C 66 F0 | 	shl	local04, #2
0ba50     03 00 00 FF 
0ba54     00 E4 85 F1 | 	sub	objptr, ##1536
0ba58     F2 2C 02 F1 | 	add	local04, objptr
0ba5c     08 2C 06 F1 | 	add	local04, #8
0ba60     16 A7 68 FC | 	wrlong	#83, local04
0ba64     03 00 00 FF 
0ba68     00 E4 05 F1 | 	add	objptr, ##1536
0ba6c     F2 12 02 FB | 	rdlong	arg01, objptr
0ba70     01 12 06 F1 | 	add	arg01, #1
0ba74     F2 12 62 FC | 	wrlong	arg01, objptr
0ba78     01 26 06 F1 | 	add	local01, #1
0ba7c     09 2D 02 F6 | 	mov	local04, arg01
0ba80     01 2C 66 F0 | 	shl	local04, #1
0ba84     09 2D 02 F1 | 	add	local04, arg01
0ba88     02 2C 66 F0 | 	shl	local04, #2
0ba8c     03 00 00 FF 
0ba90     00 E4 85 F1 | 	sub	objptr, ##1536
0ba94     F2 2C 02 F1 | 	add	local04, objptr
0ba98     08 2C 06 F1 | 	add	local04, #8
0ba9c     16 5B 68 FC | 	wrlong	#45, local04
0baa0     03 00 00 FF 
0baa4     00 E4 05 F1 | 	add	objptr, ##1536
0baa8     F2 2C 02 FB | 	rdlong	local04, objptr
0baac     01 2C 06 F1 | 	add	local04, #1
0bab0     F2 2C 62 FC | 	wrlong	local04, objptr
0bab4     4A 00 00 FF 
0bab8     7C E4 85 F1 | 	sub	objptr, ##38012
0babc     08 00 90 FD | 	jmp	#LR__0968
0bac0                 | LR__0967
0bac0                 | '       return 17
0bac0     11 FA 05 F6 | 	mov	result1, #17
0bac4     9C 01 90 FD | 	jmp	#LR__0975
0bac8                 | LR__0968
0bac8     01 2A 06 F1 | 	add	local03, #1
0bacc                 | '     i+=1
0bacc                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0bacc     15 2D 02 F6 | 	mov	local04, local03
0bad0     03 2C 66 F0 | 	shl	local04, #3
0bad4     35 00 00 FF 
0bad8     0C E4 05 F1 | 	add	objptr, ##27148
0badc     F2 2C 02 F1 | 	add	local04, objptr
0bae0     04 2C 06 F1 | 	add	local04, #4
0bae4     16 2D 02 FB | 	rdlong	local04, local04
0bae8     11 2C 0E F2 | 	cmp	local04, #17 wz
0baec     35 00 00 FF 
0baf0     0C E4 85 F1 | 	sub	objptr, ##27148
0baf4     30 00 90 AD |  if_e	jmp	#LR__0969
0baf8     15 2D 02 F6 | 	mov	local04, local03
0bafc     03 2C 66 F0 | 	shl	local04, #3
0bb00     35 00 00 FF 
0bb04     0C E4 05 F1 | 	add	objptr, ##27148
0bb08     F2 2C 02 F1 | 	add	local04, objptr
0bb0c     04 2C 06 F1 | 	add	local04, #4
0bb10     16 2D 02 FB | 	rdlong	local04, local04
0bb14     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bb18     35 00 00 FF 
0bb1c     0C E4 85 F1 | 	sub	objptr, ##27148
0bb20     15 FA 05 56 |  if_ne	mov	result1, #21
0bb24     3C 01 90 5D |  if_ne	jmp	#LR__0975
0bb28                 | LR__0969
0bb28                 | '     if lparts(i).token=token_end then exit loop
0bb28     15 2D 02 F6 | 	mov	local04, local03
0bb2c     03 2C 66 F0 | 	shl	local04, #3
0bb30     35 00 00 FF 
0bb34     0C E4 05 F1 | 	add	objptr, ##27148
0bb38     F2 2C 02 F1 | 	add	local04, objptr
0bb3c     04 2C 06 F1 | 	add	local04, #4
0bb40     16 2D 02 FB | 	rdlong	local04, local04
0bb44     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bb48     35 00 00 FF 
0bb4c     0C E4 85 F1 | 	sub	objptr, ##27148
0bb50     30 00 90 AD |  if_e	jmp	#LR__0970
0bb54     01 2A 06 F1 | 	add	local03, #1
0bb58     15 2D 02 F6 | 	mov	local04, local03
0bb5c     03 2C 66 F0 | 	shl	local04, #3
0bb60     35 00 00 FF 
0bb64     0C E4 05 F1 | 	add	objptr, ##27148
0bb68     F2 2C 02 F1 | 	add	local04, objptr
0bb6c     04 2C 06 F1 | 	add	local04, #4
0bb70     16 2D 02 FB | 	rdlong	local04, local04
0bb74     FE 2D 0E F2 | 	cmp	local04, #510 wz
0bb78     35 00 00 FF 
0bb7c     0C E4 85 F1 | 	sub	objptr, ##27148
0bb80     C0 FD 9F 5D |  if_ne	jmp	#LR__0966
0bb84                 | LR__0970
0bb84     14 2D 02 F6 | 	mov	local04, local02
0bb88     01 2C 66 F0 | 	shl	local04, #1
0bb8c     14 2D 02 F1 | 	add	local04, local02
0bb90     02 2C 66 F0 | 	shl	local04, #2
0bb94     47 00 00 FF 
0bb98     7C E4 05 F1 | 	add	objptr, ##36476
0bb9c     F2 2C 02 F1 | 	add	local04, objptr
0bba0     04 2C 06 F1 | 	add	local04, #4
0bba4     16 07 68 FC | 	wrlong	#3, local04
0bba8     47 00 00 FF 
0bbac     7C E4 85 F1 | 	sub	objptr, ##36476
0bbb0                 | LR__0971
0bbb0     14 2B 02 F6 | 	mov	local03, local02
0bbb4     01 2A 66 F0 | 	shl	local03, #1
0bbb8     14 2B 02 F1 | 	add	local03, local02
0bbbc     02 2A 66 F0 | 	shl	local03, #2
0bbc0     47 00 00 FF 
0bbc4     7C E4 05 F1 | 	add	objptr, ##36476
0bbc8     F2 2A 02 F1 | 	add	local03, objptr
0bbcc     15 27 62 FC | 	wrlong	local01, local03
0bbd0                 | ' compiledline(onlineptr).result.uresult=numpar
0bbd0                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0bbd0     03 00 00 FF 
0bbd4     00 E4 05 F1 | 	add	objptr, ##1536
0bbd8     F2 2A 02 FB | 	rdlong	local03, objptr
0bbdc     4A 00 00 FF 
0bbe0     7C E4 85 F1 | 	sub	objptr, ##38012
0bbe4     97 3C 48 FB | 	callpa	#(@LR__0974-@LR__0972)>>2,fcache_load_ptr_
0bbe8                 | LR__0972
0bbe8     15 2D 02 F6 | 	mov	local04, local03
0bbec     01 2C 66 F0 | 	shl	local04, #1
0bbf0     15 2D 02 F1 | 	add	local04, local03
0bbf4     02 2C 66 F0 | 	shl	local04, #2
0bbf8     47 00 00 FF 
0bbfc     7C E4 05 F1 | 	add	objptr, ##36476
0bc00     F2 2C 02 F1 | 	add	local04, objptr
0bc04     08 2C 06 F1 | 	add	local04, #8
0bc08     16 2D 02 FB | 	rdlong	local04, local04
0bc0c     2D 2C 0E F2 | 	cmp	local04, #45 wz
0bc10     47 00 00 FF 
0bc14     7C E4 85 F1 | 	sub	objptr, ##36476
0bc18     38 00 90 5D |  if_ne	jmp	#LR__0973
0bc1c     15 2D 02 F6 | 	mov	local04, local03
0bc20     01 2C 66 F0 | 	shl	local04, #1
0bc24     15 2D 02 F1 | 	add	local04, local03
0bc28     02 2C 66 F0 | 	shl	local04, #2
0bc2c     47 00 00 FF 
0bc30     7C E4 05 F1 | 	add	objptr, ##36476
0bc34     F2 2C 02 F1 | 	add	local04, objptr
0bc38     03 00 00 FF 
0bc3c     00 E4 05 F1 | 	add	objptr, ##1536
0bc40     F2 26 02 FB | 	rdlong	local01, objptr
0bc44     4A 00 00 FF 
0bc48     7C E4 85 F1 | 	sub	objptr, ##38012
0bc4c     02 26 86 F1 | 	sub	local01, #2
0bc50     16 27 62 FC | 	wrlong	local01, local04
0bc54                 | LR__0973
0bc54     01 2A 86 F1 | 	sub	local03, #1
0bc58     14 2B 52 F2 | 	cmps	local03, local02 wc
0bc5c     88 FF 9F 3D |  if_ae	jmp	#LR__0972
0bc60                 | LR__0974
0bc60                 | ' return 0
0bc60     00 FA 05 F6 | 	mov	result1, #0
0bc64                 | LR__0975
0bc64     A7 F0 03 F6 | 	mov	ptra, fp
0bc68     B2 00 A0 FD | 	call	#popregs_
0bc6c                 | _compile_on_ret
0bc6c     2D 00 64 FD | 	ret
0bc70                 | 
0bc70                 | ' 
0bc70                 | ' '----- A helper for compile_input and compile_read
0bc70                 | '  
0bc70                 | ' function getaddr() as ulong
0bc70                 | _getaddr
0bc70     0B 4A 05 F6 | 	mov	COUNT_, #11
0bc74     A8 00 A0 FD | 	call	#pushregs_
0bc78     37 00 00 FF 
0bc7c     44 E4 05 F1 | 	add	objptr, ##28228
0bc80     F2 2C 02 FB | 	rdlong	local04, objptr
0bc84     03 2C 66 F0 | 	shl	local04, #3
0bc88     02 00 00 FF 
0bc8c     38 E4 85 F1 | 	sub	objptr, ##1080
0bc90     F2 2C 02 F1 | 	add	local04, objptr
0bc94     16 2F 02 FB | 	rdlong	local05, local04
0bc98     01 30 66 F6 | 	neg	local06, #1
0bc9c                 | ' 
0bc9c                 | ' varname$=lparts(ct).part$
0bc9c                 | ' j=-1
0bc9c                 | ' 
0bc9c                 | ' for i=0 to varnum-1
0bc9c     00 32 06 F6 | 	mov	local07, #0
0bca0     04 E4 85 F1 | 	sub	objptr, #4
0bca4     F2 34 02 FB | 	rdlong	local08, objptr
0bca8     35 00 00 FF 
0bcac     08 E4 85 F1 | 	sub	objptr, ##27144
0bcb0                 | LR__0980
0bcb0     1A 33 52 F2 | 	cmps	local07, local08 wc
0bcb4     38 00 90 3D |  if_ae	jmp	#LR__0981
0bcb8                 | '   if variables(i).name=varname$ then j=i : exit
0bcb8     19 2D 02 F6 | 	mov	local04, local07
0bcbc     04 2C 66 F0 | 	shl	local04, #4
0bcc0     14 00 00 FF 
0bcc4     F8 E5 05 F1 | 	add	objptr, ##10744
0bcc8     F2 2C 02 F1 | 	add	local04, objptr
0bccc     16 13 02 FB | 	rdlong	arg01, local04
0bcd0     17 15 02 F6 | 	mov	arg02, local05
0bcd4     14 00 00 FF 
0bcd8     F8 E5 85 F1 | 	sub	objptr, ##10744
0bcdc     A4 BE B1 FD | 	call	#__system___string_cmp
0bce0     00 FA 0D F2 | 	cmp	result1, #0 wz
0bce4     19 31 02 A6 |  if_e	mov	local06, local07
0bce8     01 32 06 51 |  if_ne	add	local07, #1
0bcec     C0 FF 9F 5D |  if_ne	jmp	#LR__0980
0bcf0                 | LR__0981
0bcf0                 | ' if  j=-1 andalso varnum<maxvars then   
0bcf0     FF FF 7F FF 
0bcf4     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0bcf8     A8 00 90 5D |  if_ne	jmp	#LR__0982
0bcfc     35 00 00 FF 
0bd00     08 E4 05 F1 | 	add	objptr, ##27144
0bd04     F2 34 02 FB | 	rdlong	local08, objptr
0bd08     35 00 00 FF 
0bd0c     08 E4 85 F1 | 	sub	objptr, ##27144
0bd10     02 00 00 FF 
0bd14     00 34 56 F2 | 	cmps	local08, ##1024 wc
0bd18     88 00 90 3D |  if_ae	jmp	#LR__0982
0bd1c     35 00 00 FF 
0bd20     08 E4 05 F1 | 	add	objptr, ##27144
0bd24     F2 2C 02 FB | 	rdlong	local04, objptr
0bd28     04 2C 66 F0 | 	shl	local04, #4
0bd2c     20 00 00 FF 
0bd30     10 E4 85 F1 | 	sub	objptr, ##16400
0bd34     F2 2C 02 F1 | 	add	local04, objptr
0bd38     16 2F 62 FC | 	wrlong	local05, local04
0bd3c     20 00 00 FF 
0bd40     10 E4 05 F1 | 	add	objptr, ##16400
0bd44     F2 2C 02 FB | 	rdlong	local04, objptr
0bd48     04 2C 66 F0 | 	shl	local04, #4
0bd4c     20 00 00 FF 
0bd50     10 E4 85 F1 | 	sub	objptr, ##16400
0bd54     F2 2C 02 F1 | 	add	local04, objptr
0bd58     04 2C 06 F1 | 	add	local04, #4
0bd5c     16 01 68 FC | 	wrlong	#0, local04
0bd60     20 00 00 FF 
0bd64     10 E4 05 F1 | 	add	objptr, ##16400
0bd68     F2 2C 02 FB | 	rdlong	local04, objptr
0bd6c     04 2C 66 F0 | 	shl	local04, #4
0bd70     20 00 00 FF 
0bd74     10 E4 85 F1 | 	sub	objptr, ##16400
0bd78     F2 2C 02 F1 | 	add	local04, objptr
0bd7c     0C 2C 06 F1 | 	add	local04, #12
0bd80     16 39 68 FC | 	wrlong	#28, local04
0bd84     20 00 00 FF 
0bd88     10 E4 05 F1 | 	add	objptr, ##16400
0bd8c     F2 34 02 FB | 	rdlong	local08, objptr
0bd90     1A 31 02 F6 | 	mov	local06, local08
0bd94     01 34 06 F1 | 	add	local08, #1
0bd98     F2 34 62 FC | 	wrlong	local08, objptr
0bd9c     35 00 00 FF 
0bda0     08 E4 85 F1 | 	sub	objptr, ##27144
0bda4                 | LR__0982
0bda4     00 34 06 F6 | 	mov	local08, #0
0bda8                 | ' numpar=0
0bda8                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bda8     37 00 00 FF 
0bdac     44 E4 05 F1 | 	add	objptr, ##28228
0bdb0     F2 2C 02 FB | 	rdlong	local04, objptr
0bdb4     01 2C 06 F1 | 	add	local04, #1
0bdb8     03 2C 66 F0 | 	shl	local04, #3
0bdbc     02 00 00 FF 
0bdc0     38 E4 85 F1 | 	sub	objptr, ##1080
0bdc4     F2 2C 02 F1 | 	add	local04, objptr
0bdc8     04 2C 06 F1 | 	add	local04, #4
0bdcc     16 33 02 FB | 	rdlong	local07, local04
0bdd0     15 32 0E F2 | 	cmp	local07, #21 wz
0bdd4     35 00 00 FF 
0bdd8     0C E4 85 F1 | 	sub	objptr, ##27148
0bddc     54 01 90 5D |  if_ne	jmp	#LR__0987
0bde0     37 00 00 FF 
0bde4     44 E4 05 F1 | 	add	objptr, ##28228
0bde8     F2 36 02 FB | 	rdlong	local09, objptr
0bdec     01 36 06 F1 | 	add	local09, #1
0bdf0     F2 36 62 FC | 	wrlong	local09, objptr
0bdf4     37 00 00 FF 
0bdf8     44 E4 85 F1 | 	sub	objptr, ##28228
0bdfc                 | '   ct+=1 											' omit this lpar, this is for expr list
0bdfc                 | '   do
0bdfc                 | LR__0983
0bdfc     37 00 00 FF 
0be00     44 E4 05 F1 | 	add	objptr, ##28228
0be04     F2 2C 02 FB | 	rdlong	local04, objptr
0be08     01 2C 06 F1 | 	add	local04, #1
0be0c     F2 2C 62 FC | 	wrlong	local04, objptr
0be10                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0be10                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0be10     03 2C 66 F0 | 	shl	local04, #3
0be14     02 00 00 FF 
0be18     38 E4 85 F1 | 	sub	objptr, ##1080
0be1c     F2 2C 02 F1 | 	add	local04, objptr
0be20     04 2C 06 F1 | 	add	local04, #4
0be24     16 37 02 FB | 	rdlong	local09, local04
0be28     15 36 0E F2 | 	cmp	local09, #21 wz
0be2c     35 00 00 FF 
0be30     0C E4 85 F1 | 	sub	objptr, ##27148
0be34     44 00 90 5D |  if_ne	jmp	#LR__0984
0be38     37 00 00 FF 
0be3c     44 E4 05 F1 | 	add	objptr, ##28228
0be40     F2 36 02 FB | 	rdlong	local09, objptr
0be44     01 36 06 F1 | 	add	local09, #1
0be48     F2 36 62 FC | 	wrlong	local09, objptr
0be4c     37 00 00 FF 
0be50     44 E4 85 F1 | 	sub	objptr, ##28228
0be54     AC 01 B0 FD | 	call	#_expr
0be58     FD 38 02 F6 | 	mov	local10, result1
0be5c     37 00 00 FF 
0be60     44 E4 05 F1 | 	add	objptr, ##28228
0be64     F2 36 02 FB | 	rdlong	local09, objptr
0be68     01 36 06 F1 | 	add	local09, #1
0be6c     F2 36 62 FC | 	wrlong	local09, objptr
0be70     37 00 00 FF 
0be74     44 E4 85 F1 | 	sub	objptr, ##28228
0be78     08 00 90 FD | 	jmp	#LR__0985
0be7c                 | LR__0984
0be7c     84 01 B0 FD | 	call	#_expr
0be80     FD 38 02 F6 | 	mov	local10, result1
0be84                 | LR__0985
0be84                 | '     if err>0 then return err
0be84     01 38 56 F2 | 	cmps	local10, #1 wc
0be88     1C FB 01 36 |  if_ae	mov	result1, local10
0be8c     68 01 90 3D |  if_ae	jmp	#LR__0988
0be90     01 34 06 F1 | 	add	local08, #1
0be94     37 00 00 FF 
0be98     44 E4 05 F1 | 	add	objptr, ##28228
0be9c     F2 2C 02 FB | 	rdlong	local04, objptr
0bea0     03 2C 66 F0 | 	shl	local04, #3
0bea4     02 00 00 FF 
0bea8     38 E4 85 F1 | 	sub	objptr, ##1080
0beac     F2 2C 02 F1 | 	add	local04, objptr
0beb0     04 2C 06 F1 | 	add	local04, #4
0beb4     16 39 02 FB | 	rdlong	local10, local04
0beb8     14 38 0E F2 | 	cmp	local10, #20 wz
0bebc     35 00 00 FF 
0bec0     0C E4 85 F1 | 	sub	objptr, ##27148
0bec4     34 00 90 AD |  if_e	jmp	#LR__0986
0bec8     37 00 00 FF 
0becc     44 E4 05 F1 | 	add	objptr, ##28228
0bed0     F2 38 02 FB | 	rdlong	local10, objptr
0bed4     03 38 66 F0 | 	shl	local10, #3
0bed8     02 00 00 FF 
0bedc     38 E4 85 F1 | 	sub	objptr, ##1080
0bee0     F2 38 02 F1 | 	add	local10, objptr
0bee4     04 38 06 F1 | 	add	local10, #4
0bee8     1C 39 02 FB | 	rdlong	local10, local10
0beec     FE 39 0E F2 | 	cmp	local10, #510 wz
0bef0     35 00 00 FF 
0bef4     0C E4 85 F1 | 	sub	objptr, ##27148
0bef8     00 FF 9F 5D |  if_ne	jmp	#LR__0983
0befc                 | LR__0986
0befc                 | '     if lparts(ct).token=token_end then return 14
0befc     37 00 00 FF 
0bf00     44 E4 05 F1 | 	add	objptr, ##28228
0bf04     F2 2C 02 FB | 	rdlong	local04, objptr
0bf08     03 2C 66 F0 | 	shl	local04, #3
0bf0c     02 00 00 FF 
0bf10     38 E4 85 F1 | 	sub	objptr, ##1080
0bf14     F2 2C 02 F1 | 	add	local04, objptr
0bf18     04 2C 06 F1 | 	add	local04, #4
0bf1c     16 39 02 FB | 	rdlong	local10, local04
0bf20     FE 39 0E F2 | 	cmp	local10, #510 wz
0bf24     35 00 00 FF 
0bf28     0C E4 85 F1 | 	sub	objptr, ##27148
0bf2c     0E FA 05 A6 |  if_e	mov	result1, #14
0bf30     C4 00 90 AD |  if_e	jmp	#LR__0988
0bf34                 | LR__0987
0bf34     1A 29 02 F6 | 	mov	local02, local08
0bf38     12 2A 06 F6 | 	mov	local03, #18
0bf3c     18 27 02 F6 | 	mov	local01, local06
0bf40     13 37 02 F6 | 	mov	local09, local01
0bf44     14 3B 02 F6 | 	mov	local11, local02
0bf48     15 27 02 F6 | 	mov	local01, local03
0bf4c     4A 00 00 FF 
0bf50     7C E4 05 F1 | 	add	objptr, ##38012
0bf54     F2 38 02 FB | 	rdlong	local10, objptr
0bf58     1C 35 02 F6 | 	mov	local08, local10
0bf5c     01 34 66 F0 | 	shl	local08, #1
0bf60     1C 35 02 F1 | 	add	local08, local10
0bf64     02 34 66 F0 | 	shl	local08, #2
0bf68     03 00 00 FF 
0bf6c     00 E4 85 F1 | 	sub	objptr, ##1536
0bf70     F2 34 02 F1 | 	add	local08, objptr
0bf74     1A 37 62 FC | 	wrlong	local09, local08
0bf78     03 00 00 FF 
0bf7c     00 E4 05 F1 | 	add	objptr, ##1536
0bf80     F2 38 02 FB | 	rdlong	local10, objptr
0bf84     1C 37 02 F6 | 	mov	local09, local10
0bf88     01 36 66 F0 | 	shl	local09, #1
0bf8c     1C 37 02 F1 | 	add	local09, local10
0bf90     02 36 66 F0 | 	shl	local09, #2
0bf94     03 00 00 FF 
0bf98     00 E4 85 F1 | 	sub	objptr, ##1536
0bf9c     F2 36 02 F1 | 	add	local09, objptr
0bfa0     04 36 06 F1 | 	add	local09, #4
0bfa4     1B 3B 62 FC | 	wrlong	local11, local09
0bfa8     03 00 00 FF 
0bfac     00 E4 05 F1 | 	add	objptr, ##1536
0bfb0     F2 3A 02 FB | 	rdlong	local11, objptr
0bfb4     1D 39 02 F6 | 	mov	local10, local11
0bfb8     01 38 66 F0 | 	shl	local10, #1
0bfbc     1D 39 02 F1 | 	add	local10, local11
0bfc0     02 38 66 F0 | 	shl	local10, #2
0bfc4     03 00 00 FF 
0bfc8     00 E4 85 F1 | 	sub	objptr, ##1536
0bfcc     F2 38 02 F1 | 	add	local10, objptr
0bfd0     08 38 06 F1 | 	add	local10, #8
0bfd4     1C 27 62 FC | 	wrlong	local01, local10
0bfd8     03 00 00 FF 
0bfdc     00 E4 05 F1 | 	add	objptr, ##1536
0bfe0     F2 36 02 FB | 	rdlong	local09, objptr
0bfe4     01 36 06 F1 | 	add	local09, #1
0bfe8     F2 36 62 FC | 	wrlong	local09, objptr
0bfec     4A 00 00 FF 
0bff0     7C E4 85 F1 | 	sub	objptr, ##38012
0bff4                 | ' t2.result.twowords(1)=numpar
0bff4                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bff4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bff4                 | ' return 0
0bff4     00 FA 05 F6 | 	mov	result1, #0
0bff8                 | LR__0988
0bff8     A7 F0 03 F6 | 	mov	ptra, fp
0bffc     B2 00 A0 FD | 	call	#popregs_
0c000                 | _getaddr_ret
0c000     2D 00 64 FD | 	ret
0c004                 | 
0c004                 | ' 
0c004                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' '--------------------------------------------- 
0c004                 | ' 
0c004                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0c004                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' 
0c004                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' '
0c004                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0c004                 | ' '
0c004                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c004                 | ' 
0c004                 | ' function expr() as ulong 
0c004                 | _expr
0c004     07 4A 05 F6 | 	mov	COUNT_, #7
0c008     A8 00 A0 FD | 	call	#pushregs_
0c00c                 | _expr_enter
0c00c     37 00 00 FF 
0c010     44 E4 05 F1 | 	add	objptr, ##28228
0c014     F2 2C 02 FB | 	rdlong	local04, objptr
0c018     03 2C 66 F0 | 	shl	local04, #3
0c01c     02 00 00 FF 
0c020     38 E4 85 F1 | 	sub	objptr, ##1080
0c024     F2 2C 02 F1 | 	add	local04, objptr
0c028     04 2C 06 F1 | 	add	local04, #4
0c02c     16 2F 02 FB | 	rdlong	local05, local04
0c030                 | ' 
0c030                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0c030     FE 2F 0E F2 | 	cmp	local05, #510 wz
0c034     35 00 00 FF 
0c038     0C E4 85 F1 | 	sub	objptr, ##27148
0c03c     C4 00 90 5D |  if_ne	jmp	#LR__0990
0c040     1D 26 06 F6 | 	mov	local01, #29
0c044     FF 2A 06 F6 | 	mov	local03, #255
0c048     13 31 02 F6 | 	mov	local06, local01
0c04c     14 33 02 F6 | 	mov	local07, local02
0c050     15 27 02 F6 | 	mov	local01, local03
0c054     4A 00 00 FF 
0c058     7C E4 05 F1 | 	add	objptr, ##38012
0c05c     F2 2E 02 FB | 	rdlong	local05, objptr
0c060     17 2D 02 F6 | 	mov	local04, local05
0c064     01 2C 66 F0 | 	shl	local04, #1
0c068     17 2D 02 F1 | 	add	local04, local05
0c06c     02 2C 66 F0 | 	shl	local04, #2
0c070     03 00 00 FF 
0c074     00 E4 85 F1 | 	sub	objptr, ##1536
0c078     F2 2C 02 F1 | 	add	local04, objptr
0c07c     16 31 62 FC | 	wrlong	local06, local04
0c080     03 00 00 FF 
0c084     00 E4 05 F1 | 	add	objptr, ##1536
0c088     F2 30 02 FB | 	rdlong	local06, objptr
0c08c     18 2F 02 F6 | 	mov	local05, local06
0c090     01 2E 66 F0 | 	shl	local05, #1
0c094     18 2F 02 F1 | 	add	local05, local06
0c098     02 2E 66 F0 | 	shl	local05, #2
0c09c     03 00 00 FF 
0c0a0     00 E4 85 F1 | 	sub	objptr, ##1536
0c0a4     F2 2E 02 F1 | 	add	local05, objptr
0c0a8     04 2E 06 F1 | 	add	local05, #4
0c0ac     17 33 62 FC | 	wrlong	local07, local05
0c0b0     03 00 00 FF 
0c0b4     00 E4 05 F1 | 	add	objptr, ##1536
0c0b8     F2 32 02 FB | 	rdlong	local07, objptr
0c0bc     19 31 02 F6 | 	mov	local06, local07
0c0c0     01 30 66 F0 | 	shl	local06, #1
0c0c4     19 31 02 F1 | 	add	local06, local07
0c0c8     02 30 66 F0 | 	shl	local06, #2
0c0cc     03 00 00 FF 
0c0d0     00 E4 85 F1 | 	sub	objptr, ##1536
0c0d4     F2 30 02 F1 | 	add	local06, objptr
0c0d8     08 30 06 F1 | 	add	local06, #8
0c0dc     18 27 62 FC | 	wrlong	local01, local06
0c0e0     03 00 00 FF 
0c0e4     00 E4 05 F1 | 	add	objptr, ##1536
0c0e8     F2 30 02 FB | 	rdlong	local06, objptr
0c0ec     01 30 06 F1 | 	add	local06, #1
0c0f0     F2 30 62 FC | 	wrlong	local06, objptr
0c0f4     4A 00 00 FF 
0c0f8     7C E4 85 F1 | 	sub	objptr, ##38012
0c0fc     1D FA 05 F6 | 	mov	result1, #29
0c100     64 01 90 FD | 	jmp	#LR__0993
0c104                 | LR__0990
0c104     00 26 06 F6 | 	mov	local01, #0
0c108     68 01 B0 FD | 	call	#_addsub
0c10c                 | ' t3.result.uresult=0
0c10c                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0c10c                 | ' if err>0 then return err
0c10c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c110     54 01 90 3D |  if_ae	jmp	#LR__0993
0c114     37 00 00 FF 
0c118     44 E4 05 F1 | 	add	objptr, ##28228
0c11c     F2 2C 02 FB | 	rdlong	local04, objptr
0c120     03 2C 66 F0 | 	shl	local04, #3
0c124     02 00 00 FF 
0c128     38 E4 85 F1 | 	sub	objptr, ##1080
0c12c     F2 2C 02 F1 | 	add	local04, objptr
0c130     04 2C 06 F1 | 	add	local04, #4
0c134     16 2F 02 FB | 	rdlong	local05, local04
0c138                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0c138                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0c138     35 00 00 FF 
0c13c     0C E4 85 F1 | 	sub	objptr, ##27148
0c140                 | LR__0991
0c140     1B 2E 0E F2 | 	cmp	local05, #27 wz
0c144     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0c148     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0c14c     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0c150     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0c154     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0c158     08 01 90 5D |  if_ne	jmp	#LR__0992
0c15c     37 00 00 FF 
0c160     44 E4 05 F1 | 	add	objptr, ##28228
0c164     F2 30 02 FB | 	rdlong	local06, objptr
0c168     01 30 06 F1 | 	add	local06, #1
0c16c     F2 30 62 FC | 	wrlong	local06, objptr
0c170     37 00 00 FF 
0c174     44 E4 85 F1 | 	sub	objptr, ##28228
0c178     F8 00 B0 FD | 	call	#_addsub
0c17c                 | '   ct+=1
0c17c                 | '   err=addsub() : if err>0 then return err
0c17c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c180     E4 00 90 3D |  if_ae	jmp	#LR__0993
0c184     17 2B 02 F6 | 	mov	local03, local05
0c188     13 31 02 F6 | 	mov	local06, local01
0c18c     14 33 02 F6 | 	mov	local07, local02
0c190     15 2F 02 F6 | 	mov	local05, local03
0c194     4A 00 00 FF 
0c198     7C E4 05 F1 | 	add	objptr, ##38012
0c19c     F2 2C 02 FB | 	rdlong	local04, objptr
0c1a0     16 FB 01 F6 | 	mov	result1, local04
0c1a4     01 FA 65 F0 | 	shl	result1, #1
0c1a8     16 FB 01 F1 | 	add	result1, local04
0c1ac     02 FA 65 F0 | 	shl	result1, #2
0c1b0     03 00 00 FF 
0c1b4     00 E4 85 F1 | 	sub	objptr, ##1536
0c1b8     F2 FA 01 F1 | 	add	result1, objptr
0c1bc     FD 30 62 FC | 	wrlong	local06, result1
0c1c0     03 00 00 FF 
0c1c4     00 E4 05 F1 | 	add	objptr, ##1536
0c1c8     F2 30 02 FB | 	rdlong	local06, objptr
0c1cc     18 2D 02 F6 | 	mov	local04, local06
0c1d0     01 2C 66 F0 | 	shl	local04, #1
0c1d4     18 2D 02 F1 | 	add	local04, local06
0c1d8     02 2C 66 F0 | 	shl	local04, #2
0c1dc     03 00 00 FF 
0c1e0     00 E4 85 F1 | 	sub	objptr, ##1536
0c1e4     F2 2C 02 F1 | 	add	local04, objptr
0c1e8     04 2C 06 F1 | 	add	local04, #4
0c1ec     16 33 62 FC | 	wrlong	local07, local04
0c1f0     03 00 00 FF 
0c1f4     00 E4 05 F1 | 	add	objptr, ##1536
0c1f8     F2 32 02 FB | 	rdlong	local07, objptr
0c1fc     19 31 02 F6 | 	mov	local06, local07
0c200     01 30 66 F0 | 	shl	local06, #1
0c204     19 31 02 F1 | 	add	local06, local07
0c208     02 30 66 F0 | 	shl	local06, #2
0c20c     03 00 00 FF 
0c210     00 E4 85 F1 | 	sub	objptr, ##1536
0c214     F2 30 02 F1 | 	add	local06, objptr
0c218     08 30 06 F1 | 	add	local06, #8
0c21c     18 2F 62 FC | 	wrlong	local05, local06
0c220     03 00 00 FF 
0c224     00 E4 05 F1 | 	add	objptr, ##1536
0c228     F2 30 02 FB | 	rdlong	local06, objptr
0c22c     01 30 06 F1 | 	add	local06, #1
0c230     F2 30 62 FC | 	wrlong	local06, objptr
0c234     13 00 00 FF 
0c238     38 E4 85 F1 | 	sub	objptr, ##9784
0c23c     F2 2C 02 FB | 	rdlong	local04, objptr
0c240     03 2C 66 F0 | 	shl	local04, #3
0c244     02 00 00 FF 
0c248     38 E4 85 F1 | 	sub	objptr, ##1080
0c24c     F2 2C 02 F1 | 	add	local04, objptr
0c250     04 2C 06 F1 | 	add	local04, #4
0c254     16 2F 02 FB | 	rdlong	local05, local04
0c258     35 00 00 FF 
0c25c     0C E4 85 F1 | 	sub	objptr, ##27148
0c260     DC FE 9F FD | 	jmp	#LR__0991
0c264                 | LR__0992
0c264                 | ' return 0  
0c264     00 FA 05 F6 | 	mov	result1, #0
0c268                 | LR__0993
0c268     A7 F0 03 F6 | 	mov	ptra, fp
0c26c     B2 00 A0 FD | 	call	#popregs_
0c270                 | _expr_ret
0c270     2D 00 64 FD | 	ret
0c274                 | 
0c274                 | ' 
0c274                 | ' ' Second level operators : add, sub, logic
0c274                 | ' 
0c274                 | ' function addsub() as ulong
0c274                 | _addsub
0c274     07 4A 05 F6 | 	mov	COUNT_, #7
0c278     A8 00 A0 FD | 	call	#pushregs_
0c27c                 | _addsub_enter
0c27c     00 26 06 F6 | 	mov	local01, #0
0c280     60 01 B0 FD | 	call	#_muldiv
0c284                 | ' 
0c284                 | ' t3.result.uresult=0
0c284                 | ' err=muldiv() : if err>0 then return err           			 
0c284     01 FA 15 F2 | 	cmp	result1, #1 wc
0c288     4C 01 90 3D |  if_ae	jmp	#LR__1002
0c28c     37 00 00 FF 
0c290     44 E4 05 F1 | 	add	objptr, ##28228
0c294     F2 2C 02 FB | 	rdlong	local04, objptr
0c298     03 2C 66 F0 | 	shl	local04, #3
0c29c     02 00 00 FF 
0c2a0     38 E4 85 F1 | 	sub	objptr, ##1080
0c2a4     F2 2C 02 F1 | 	add	local04, objptr
0c2a8     04 2C 06 F1 | 	add	local04, #4
0c2ac     16 2F 02 FB | 	rdlong	local05, local04
0c2b0                 | ' op = lparts(ct).token				 
0c2b0                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c2b0     35 00 00 FF 
0c2b4     0C E4 85 F1 | 	sub	objptr, ##27148
0c2b8                 | LR__1000
0c2b8     01 2E 0E F2 | 	cmp	local05, #1 wz
0c2bc     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0c2c0     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0c2c4     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0c2c8     08 01 90 5D |  if_ne	jmp	#LR__1001
0c2cc     37 00 00 FF 
0c2d0     44 E4 05 F1 | 	add	objptr, ##28228
0c2d4     F2 2C 02 FB | 	rdlong	local04, objptr
0c2d8     01 2C 06 F1 | 	add	local04, #1
0c2dc     F2 2C 62 FC | 	wrlong	local04, objptr
0c2e0     37 00 00 FF 
0c2e4     44 E4 85 F1 | 	sub	objptr, ##28228
0c2e8     F8 00 B0 FD | 	call	#_muldiv
0c2ec                 | '   ct+=1
0c2ec                 | '   err=muldiv() : if err>0 then return err   
0c2ec     01 FA 15 F2 | 	cmp	result1, #1 wc
0c2f0     E4 00 90 3D |  if_ae	jmp	#LR__1002
0c2f4     17 2B 02 F6 | 	mov	local03, local05
0c2f8     13 31 02 F6 | 	mov	local06, local01
0c2fc     14 33 02 F6 | 	mov	local07, local02
0c300     15 2F 02 F6 | 	mov	local05, local03
0c304     4A 00 00 FF 
0c308     7C E4 05 F1 | 	add	objptr, ##38012
0c30c     F2 2C 02 FB | 	rdlong	local04, objptr
0c310     16 FB 01 F6 | 	mov	result1, local04
0c314     01 FA 65 F0 | 	shl	result1, #1
0c318     16 FB 01 F1 | 	add	result1, local04
0c31c     02 FA 65 F0 | 	shl	result1, #2
0c320     03 00 00 FF 
0c324     00 E4 85 F1 | 	sub	objptr, ##1536
0c328     F2 FA 01 F1 | 	add	result1, objptr
0c32c     FD 30 62 FC | 	wrlong	local06, result1
0c330     03 00 00 FF 
0c334     00 E4 05 F1 | 	add	objptr, ##1536
0c338     F2 30 02 FB | 	rdlong	local06, objptr
0c33c     18 2D 02 F6 | 	mov	local04, local06
0c340     01 2C 66 F0 | 	shl	local04, #1
0c344     18 2D 02 F1 | 	add	local04, local06
0c348     02 2C 66 F0 | 	shl	local04, #2
0c34c     03 00 00 FF 
0c350     00 E4 85 F1 | 	sub	objptr, ##1536
0c354     F2 2C 02 F1 | 	add	local04, objptr
0c358     04 2C 06 F1 | 	add	local04, #4
0c35c     16 33 62 FC | 	wrlong	local07, local04
0c360     03 00 00 FF 
0c364     00 E4 05 F1 | 	add	objptr, ##1536
0c368     F2 32 02 FB | 	rdlong	local07, objptr
0c36c     19 31 02 F6 | 	mov	local06, local07
0c370     01 30 66 F0 | 	shl	local06, #1
0c374     19 31 02 F1 | 	add	local06, local07
0c378     02 30 66 F0 | 	shl	local06, #2
0c37c     03 00 00 FF 
0c380     00 E4 85 F1 | 	sub	objptr, ##1536
0c384     F2 30 02 F1 | 	add	local06, objptr
0c388     08 30 06 F1 | 	add	local06, #8
0c38c     18 2F 62 FC | 	wrlong	local05, local06
0c390     03 00 00 FF 
0c394     00 E4 05 F1 | 	add	objptr, ##1536
0c398     F2 30 02 FB | 	rdlong	local06, objptr
0c39c     01 30 06 F1 | 	add	local06, #1
0c3a0     F2 30 62 FC | 	wrlong	local06, objptr
0c3a4     13 00 00 FF 
0c3a8     38 E4 85 F1 | 	sub	objptr, ##9784
0c3ac     F2 2C 02 FB | 	rdlong	local04, objptr
0c3b0     03 2C 66 F0 | 	shl	local04, #3
0c3b4     02 00 00 FF 
0c3b8     38 E4 85 F1 | 	sub	objptr, ##1080
0c3bc     F2 2C 02 F1 | 	add	local04, objptr
0c3c0     04 2C 06 F1 | 	add	local04, #4
0c3c4     16 2F 02 FB | 	rdlong	local05, local04
0c3c8     35 00 00 FF 
0c3cc     0C E4 85 F1 | 	sub	objptr, ##27148
0c3d0     E4 FE 9F FD | 	jmp	#LR__1000
0c3d4                 | LR__1001
0c3d4                 | ' return 0
0c3d4     00 FA 05 F6 | 	mov	result1, #0
0c3d8                 | LR__1002
0c3d8     A7 F0 03 F6 | 	mov	ptra, fp
0c3dc     B2 00 A0 FD | 	call	#popregs_
0c3e0                 | _addsub_ret
0c3e0     2D 00 64 FD | 	ret
0c3e4                 | 
0c3e4                 | ' 
0c3e4                 | ' ' Third level operators : mul,div,shift,power
0c3e4                 | ' 
0c3e4                 | ' function muldiv() as ulong
0c3e4                 | _muldiv
0c3e4     07 4A 05 F6 | 	mov	COUNT_, #7
0c3e8     A8 00 A0 FD | 	call	#pushregs_
0c3ec                 | _muldiv_enter
0c3ec     00 26 06 F6 | 	mov	local01, #0
0c3f0     6C 01 B0 FD | 	call	#_getvalue
0c3f4                 | ' 
0c3f4                 | ' t3.result.uresult=0
0c3f4                 | ' err=getvalue() : if err>0 then return err     
0c3f4     01 FA 15 F2 | 	cmp	result1, #1 wc
0c3f8     58 01 90 3D |  if_ae	jmp	#LR__1012
0c3fc     37 00 00 FF 
0c400     44 E4 05 F1 | 	add	objptr, ##28228
0c404     F2 2C 02 FB | 	rdlong	local04, objptr
0c408     03 2C 66 F0 | 	shl	local04, #3
0c40c     02 00 00 FF 
0c410     38 E4 85 F1 | 	sub	objptr, ##1080
0c414     F2 2C 02 F1 | 	add	local04, objptr
0c418     04 2C 06 F1 | 	add	local04, #4
0c41c     16 2F 02 FB | 	rdlong	local05, local04
0c420                 | ' op = lparts(ct).token
0c420                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c420     35 00 00 FF 
0c424     0C E4 85 F1 | 	sub	objptr, ##27148
0c428                 | LR__1010
0c428     05 2E 0E F2 | 	cmp	local05, #5 wz
0c42c     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c430     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c434     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c438     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c43c     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c440     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c444     08 01 90 5D |  if_ne	jmp	#LR__1011
0c448     37 00 00 FF 
0c44c     44 E4 05 F1 | 	add	objptr, ##28228
0c450     F2 2C 02 FB | 	rdlong	local04, objptr
0c454     01 2C 06 F1 | 	add	local04, #1
0c458     F2 2C 62 FC | 	wrlong	local04, objptr
0c45c     37 00 00 FF 
0c460     44 E4 85 F1 | 	sub	objptr, ##28228
0c464     F8 00 B0 FD | 	call	#_getvalue
0c468                 | '   ct+=1
0c468                 | '   err=getvalue() :if err>0 then return err   
0c468     01 FA 15 F2 | 	cmp	result1, #1 wc
0c46c     E4 00 90 3D |  if_ae	jmp	#LR__1012
0c470     17 2B 02 F6 | 	mov	local03, local05
0c474     13 31 02 F6 | 	mov	local06, local01
0c478     14 33 02 F6 | 	mov	local07, local02
0c47c     15 2F 02 F6 | 	mov	local05, local03
0c480     4A 00 00 FF 
0c484     7C E4 05 F1 | 	add	objptr, ##38012
0c488     F2 2C 02 FB | 	rdlong	local04, objptr
0c48c     16 FB 01 F6 | 	mov	result1, local04
0c490     01 FA 65 F0 | 	shl	result1, #1
0c494     16 FB 01 F1 | 	add	result1, local04
0c498     02 FA 65 F0 | 	shl	result1, #2
0c49c     03 00 00 FF 
0c4a0     00 E4 85 F1 | 	sub	objptr, ##1536
0c4a4     F2 FA 01 F1 | 	add	result1, objptr
0c4a8     FD 30 62 FC | 	wrlong	local06, result1
0c4ac     03 00 00 FF 
0c4b0     00 E4 05 F1 | 	add	objptr, ##1536
0c4b4     F2 30 02 FB | 	rdlong	local06, objptr
0c4b8     18 2D 02 F6 | 	mov	local04, local06
0c4bc     01 2C 66 F0 | 	shl	local04, #1
0c4c0     18 2D 02 F1 | 	add	local04, local06
0c4c4     02 2C 66 F0 | 	shl	local04, #2
0c4c8     03 00 00 FF 
0c4cc     00 E4 85 F1 | 	sub	objptr, ##1536
0c4d0     F2 2C 02 F1 | 	add	local04, objptr
0c4d4     04 2C 06 F1 | 	add	local04, #4
0c4d8     16 33 62 FC | 	wrlong	local07, local04
0c4dc     03 00 00 FF 
0c4e0     00 E4 05 F1 | 	add	objptr, ##1536
0c4e4     F2 32 02 FB | 	rdlong	local07, objptr
0c4e8     19 31 02 F6 | 	mov	local06, local07
0c4ec     01 30 66 F0 | 	shl	local06, #1
0c4f0     19 31 02 F1 | 	add	local06, local07
0c4f4     02 30 66 F0 | 	shl	local06, #2
0c4f8     03 00 00 FF 
0c4fc     00 E4 85 F1 | 	sub	objptr, ##1536
0c500     F2 30 02 F1 | 	add	local06, objptr
0c504     08 30 06 F1 | 	add	local06, #8
0c508     18 2F 62 FC | 	wrlong	local05, local06
0c50c     03 00 00 FF 
0c510     00 E4 05 F1 | 	add	objptr, ##1536
0c514     F2 30 02 FB | 	rdlong	local06, objptr
0c518     01 30 06 F1 | 	add	local06, #1
0c51c     F2 30 62 FC | 	wrlong	local06, objptr
0c520     13 00 00 FF 
0c524     38 E4 85 F1 | 	sub	objptr, ##9784
0c528     F2 2C 02 FB | 	rdlong	local04, objptr
0c52c     03 2C 66 F0 | 	shl	local04, #3
0c530     02 00 00 FF 
0c534     38 E4 85 F1 | 	sub	objptr, ##1080
0c538     F2 2C 02 F1 | 	add	local04, objptr
0c53c     04 2C 06 F1 | 	add	local04, #4
0c540     16 2F 02 FB | 	rdlong	local05, local04
0c544     35 00 00 FF 
0c548     0C E4 85 F1 | 	sub	objptr, ##27148
0c54c     D8 FE 9F FD | 	jmp	#LR__1010
0c550                 | LR__1011
0c550                 | ' return 0
0c550     00 FA 05 F6 | 	mov	result1, #0
0c554                 | LR__1012
0c554     A7 F0 03 F6 | 	mov	ptra, fp
0c558     B2 00 A0 FD | 	call	#popregs_
0c55c                 | _muldiv_ret
0c55c     2D 00 64 FD | 	ret
0c560                 | 
0c560                 | ' 
0c560                 | ' ' Get a value for operations
0c560                 | ' 
0c560                 | ' function getvalue()  as ulong
0c560                 | _getvalue
0c560     0B 4A 05 F6 | 	mov	COUNT_, #11
0c564     A8 00 A0 FD | 	call	#pushregs_
0c568                 | _getvalue_enter
0c568     01 2C 06 F6 | 	mov	local04, #1
0c56c     00 26 06 F6 | 	mov	local01, #0
0c570     1D 2A 06 F6 | 	mov	local03, #29
0c574     37 00 00 FF 
0c578     44 E4 05 F1 | 	add	objptr, ##28228
0c57c     F2 16 02 FB | 	rdlong	arg03, objptr
0c580     03 16 66 F0 | 	shl	arg03, #3
0c584     02 00 00 FF 
0c588     38 E4 85 F1 | 	sub	objptr, ##1080
0c58c     F2 16 02 F1 | 	add	arg03, objptr
0c590     04 16 06 F1 | 	add	arg03, #4
0c594     0B 2F 02 FB | 	rdlong	local05, arg03
0c598                 | ' 
0c598                 | ' m=1											' for negative numbers
0c598                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c598                 | ' op=lparts(ct).token
0c598                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c598     02 2E 0E F2 | 	cmp	local05, #2 wz
0c59c     35 00 00 FF 
0c5a0     0C E4 85 F1 | 	sub	objptr, ##27148
0c5a4     38 00 90 5D |  if_ne	jmp	#LR__1020
0c5a8     01 2C 66 F6 | 	neg	local04, #1
0c5ac     37 00 00 FF 
0c5b0     44 E4 05 F1 | 	add	objptr, ##28228
0c5b4     F2 2E 02 FB | 	rdlong	local05, objptr
0c5b8     01 2E 06 F1 | 	add	local05, #1
0c5bc     F2 2E 62 FC | 	wrlong	local05, objptr
0c5c0     03 2E 66 F0 | 	shl	local05, #3
0c5c4     02 00 00 FF 
0c5c8     38 E4 85 F1 | 	sub	objptr, ##1080
0c5cc     F2 2E 02 F1 | 	add	local05, objptr
0c5d0     04 2E 06 F1 | 	add	local05, #4
0c5d4     17 2F 02 FB | 	rdlong	local05, local05
0c5d8     35 00 00 FF 
0c5dc     0C E4 85 F1 | 	sub	objptr, ##27148
0c5e0                 | LR__1020
0c5e0                 | ' select case op
0c5e0     01 00 00 FF 
0c5e4     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c5e8     44 00 90 AD |  if_e	jmp	#LR__1021
0c5ec     01 00 00 FF 
0c5f0     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c5f4     90 01 90 AD |  if_e	jmp	#LR__1024
0c5f8     01 00 00 FF 
0c5fc     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c600     44 04 90 AD |  if_e	jmp	#LR__1031
0c604     01 00 00 FF 
0c608     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c60c     A8 05 90 AD |  if_e	jmp	#LR__1034
0c610     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c614     78 07 90 AD |  if_e	jmp	#LR__1039
0c618     01 00 00 FF 
0c61c     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c620     70 08 90 AD |  if_e	jmp	#LR__1040
0c624     15 2E 0E F2 | 	cmp	local05, #21 wz
0c628     98 08 90 AD |  if_e	jmp	#LR__1041
0c62c     10 09 90 FD | 	jmp	#LR__1042
0c630                 | LR__1021
0c630                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c630     01 2C 0E F2 | 	cmp	local04, #1 wz
0c634     3C 00 90 5D |  if_ne	jmp	#LR__1022
0c638     37 00 00 FF 
0c63c     44 E4 05 F1 | 	add	objptr, ##28228
0c640     F2 2E 02 FB | 	rdlong	local05, objptr
0c644     03 2E 66 F0 | 	shl	local05, #3
0c648     02 00 00 FF 
0c64c     38 E4 85 F1 | 	sub	objptr, ##1080
0c650     F2 2E 02 F1 | 	add	local05, objptr
0c654     17 13 02 FB | 	rdlong	arg01, local05
0c658     00 14 06 F6 | 	mov	arg02, #0
0c65c     35 00 00 FF 
0c660     0C E4 85 F1 | 	sub	objptr, ##27148
0c664     E8 E9 B1 FD | 	call	#__system____builtin_atoi
0c668     FD 2C 02 FD | 	qmul	local04, result1
0c66c     18 26 62 FD | 	getqx	local01
0c670     1C 2A 06 F6 | 	mov	local03, #28
0c674                 | LR__1022
0c674                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c674     FF FF 7F FF 
0c678     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c67c     3C 00 90 5D |  if_ne	jmp	#LR__1023
0c680     37 00 00 FF 
0c684     44 E4 05 F1 | 	add	objptr, ##28228
0c688     F2 2E 02 FB | 	rdlong	local05, objptr
0c68c     03 2E 66 F0 | 	shl	local05, #3
0c690     02 00 00 FF 
0c694     38 E4 85 F1 | 	sub	objptr, ##1080
0c698     F2 2E 02 F1 | 	add	local05, objptr
0c69c     17 13 02 FB | 	rdlong	arg01, local05
0c6a0     00 14 06 F6 | 	mov	arg02, #0
0c6a4     35 00 00 FF 
0c6a8     0C E4 85 F1 | 	sub	objptr, ##27148
0c6ac     A0 E9 B1 FD | 	call	#__system____builtin_atoi
0c6b0     FD 2C 02 FD | 	qmul	local04, result1
0c6b4     18 26 62 FD | 	getqx	local01
0c6b8     1C 2A 06 F6 | 	mov	local03, #28
0c6bc                 | LR__1023
0c6bc     13 31 02 F6 | 	mov	local06, local01
0c6c0     14 33 02 F6 | 	mov	local07, local02
0c6c4     15 2F 02 F6 | 	mov	local05, local03
0c6c8     4A 00 00 FF 
0c6cc     7C E4 05 F1 | 	add	objptr, ##38012
0c6d0     F2 26 02 FB | 	rdlong	local01, objptr
0c6d4     13 2D 02 F6 | 	mov	local04, local01
0c6d8     01 2C 66 F0 | 	shl	local04, #1
0c6dc     13 2D 02 F1 | 	add	local04, local01
0c6e0     02 2C 66 F0 | 	shl	local04, #2
0c6e4     03 00 00 FF 
0c6e8     00 E4 85 F1 | 	sub	objptr, ##1536
0c6ec     F2 2C 02 F1 | 	add	local04, objptr
0c6f0     16 31 62 FC | 	wrlong	local06, local04
0c6f4     03 00 00 FF 
0c6f8     00 E4 05 F1 | 	add	objptr, ##1536
0c6fc     F2 30 02 FB | 	rdlong	local06, objptr
0c700     18 27 02 F6 | 	mov	local01, local06
0c704     01 26 66 F0 | 	shl	local01, #1
0c708     18 27 02 F1 | 	add	local01, local06
0c70c     02 26 66 F0 | 	shl	local01, #2
0c710     03 00 00 FF 
0c714     00 E4 85 F1 | 	sub	objptr, ##1536
0c718     F2 26 02 F1 | 	add	local01, objptr
0c71c     04 26 06 F1 | 	add	local01, #4
0c720     13 33 62 FC | 	wrlong	local07, local01
0c724     03 00 00 FF 
0c728     00 E4 05 F1 | 	add	objptr, ##1536
0c72c     F2 32 02 FB | 	rdlong	local07, objptr
0c730     19 31 02 F6 | 	mov	local06, local07
0c734     01 30 66 F0 | 	shl	local06, #1
0c738     19 31 02 F1 | 	add	local06, local07
0c73c     02 30 66 F0 | 	shl	local06, #2
0c740     03 00 00 FF 
0c744     00 E4 85 F1 | 	sub	objptr, ##1536
0c748     F2 30 02 F1 | 	add	local06, objptr
0c74c     08 30 06 F1 | 	add	local06, #8
0c750     18 2F 62 FC | 	wrlong	local05, local06
0c754     03 00 00 FF 
0c758     00 E4 05 F1 | 	add	objptr, ##1536
0c75c     F2 30 02 FB | 	rdlong	local06, objptr
0c760     01 30 06 F1 | 	add	local06, #1
0c764     F2 30 62 FC | 	wrlong	local06, objptr
0c768     13 00 00 FF 
0c76c     38 E4 85 F1 | 	sub	objptr, ##9784
0c770     F2 30 02 FB | 	rdlong	local06, objptr
0c774     01 30 06 F1 | 	add	local06, #1
0c778     F2 30 62 FC | 	wrlong	local06, objptr
0c77c     37 00 00 FF 
0c780     44 E4 85 F1 | 	sub	objptr, ##28228
0c784     E4 07 90 FD | 	jmp	#LR__1043
0c788                 | LR__1024
0c788                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c788     37 00 00 FF 
0c78c     44 E4 05 F1 | 	add	objptr, ##28228
0c790     F2 16 02 FB | 	rdlong	arg03, objptr
0c794     03 16 66 F0 | 	shl	arg03, #3
0c798     02 00 00 FF 
0c79c     38 E4 85 F1 | 	sub	objptr, ##1080
0c7a0     F2 16 02 F1 | 	add	arg03, objptr
0c7a4     0B 13 02 FB | 	rdlong	arg01, arg03
0c7a8     01 14 06 F6 | 	mov	arg02, #1
0c7ac     35 00 00 FF 
0c7b0     0C E4 85 F1 | 	sub	objptr, ##27148
0c7b4     24 D4 B1 FD | 	call	#__system__Left_S
0c7b8     FD 12 02 F6 | 	mov	arg01, result1
0c7bc     BF 01 00 FF 
0c7c0     4D 14 06 F6 | 	mov	arg02, ##@LR__5984
0c7c4     BC B3 B1 FD | 	call	#__system___string_cmp
0c7c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0c7cc     94 00 90 5D |  if_ne	jmp	#LR__1027
0c7d0     37 00 00 FF 
0c7d4     44 E4 05 F1 | 	add	objptr, ##28228
0c7d8     F2 32 02 FB | 	rdlong	local07, objptr
0c7dc     19 31 02 F6 | 	mov	local06, local07
0c7e0     03 30 66 F0 | 	shl	local06, #3
0c7e4     02 00 00 FF 
0c7e8     38 E4 85 F1 | 	sub	objptr, ##1080
0c7ec     F2 30 02 F1 | 	add	local06, objptr
0c7f0     BF 01 00 FF 
0c7f4     4F 2E 06 F6 | 	mov	local05, ##@LR__5985
0c7f8     03 32 66 F0 | 	shl	local07, #3
0c7fc     F2 32 02 F1 | 	add	local07, objptr
0c800     19 33 02 FB | 	rdlong	local07, local07
0c804     02 00 00 FF 
0c808     38 E4 05 F1 | 	add	objptr, ##1080
0c80c     F2 26 02 FB | 	rdlong	local01, objptr
0c810     03 26 66 F0 | 	shl	local01, #3
0c814     02 00 00 FF 
0c818     38 E4 85 F1 | 	sub	objptr, ##1080
0c81c     F2 26 02 F1 | 	add	local01, objptr
0c820     13 13 02 FB | 	rdlong	arg01, local01
0c824     35 00 00 FF 
0c828     0C E4 85 F1 | 	sub	objptr, ##27148
0c82c     09 35 02 F6 | 	mov	local08, arg01
0c830     97 06 48 FB | 	callpa	#(@LR__1026-@LR__1025)>>2,fcache_load_ptr_
0c834                 | LR__1025
0c834     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c838     01 34 06 51 |  if_ne	add	local08, #1
0c83c     F4 FF 9F 5D |  if_ne	jmp	#LR__1025
0c840                 | LR__1026
0c840     09 35 82 F1 | 	sub	local08, arg01
0c844     1A 15 02 F6 | 	mov	arg02, local08
0c848     01 14 86 F1 | 	sub	arg02, #1
0c84c     19 13 02 F6 | 	mov	arg01, local07
0c850     10 D4 B1 FD | 	call	#__system__Right_S
0c854     FD 14 02 F6 | 	mov	arg02, result1
0c858     17 13 02 F6 | 	mov	arg01, local05
0c85c     58 B3 B1 FD | 	call	#__system___string_concat
0c860     18 FB 61 FC | 	wrlong	result1, local06
0c864                 | LR__1027
0c864                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c864     37 00 00 FF 
0c868     44 E4 05 F1 | 	add	objptr, ##28228
0c86c     F2 16 02 FB | 	rdlong	arg03, objptr
0c870     03 16 66 F0 | 	shl	arg03, #3
0c874     02 00 00 FF 
0c878     38 E4 85 F1 | 	sub	objptr, ##1080
0c87c     F2 16 02 F1 | 	add	arg03, objptr
0c880     0B 13 02 FB | 	rdlong	arg01, arg03
0c884     01 14 06 F6 | 	mov	arg02, #1
0c888     35 00 00 FF 
0c88c     0C E4 85 F1 | 	sub	objptr, ##27148
0c890     48 D3 B1 FD | 	call	#__system__Left_S
0c894     FD 12 02 F6 | 	mov	arg01, result1
0c898     BF 01 00 FF 
0c89c     52 14 06 F6 | 	mov	arg02, ##@LR__5986
0c8a0     E0 B2 B1 FD | 	call	#__system___string_cmp
0c8a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0c8a8     94 00 90 5D |  if_ne	jmp	#LR__1030
0c8ac     37 00 00 FF 
0c8b0     44 E4 05 F1 | 	add	objptr, ##28228
0c8b4     F2 32 02 FB | 	rdlong	local07, objptr
0c8b8     19 31 02 F6 | 	mov	local06, local07
0c8bc     03 30 66 F0 | 	shl	local06, #3
0c8c0     02 00 00 FF 
0c8c4     38 E4 85 F1 | 	sub	objptr, ##1080
0c8c8     F2 30 02 F1 | 	add	local06, objptr
0c8cc     BF 01 00 FF 
0c8d0     54 2E 06 F6 | 	mov	local05, ##@LR__5987
0c8d4     03 32 66 F0 | 	shl	local07, #3
0c8d8     F2 32 02 F1 | 	add	local07, objptr
0c8dc     19 33 02 FB | 	rdlong	local07, local07
0c8e0     02 00 00 FF 
0c8e4     38 E4 05 F1 | 	add	objptr, ##1080
0c8e8     F2 26 02 FB | 	rdlong	local01, objptr
0c8ec     03 26 66 F0 | 	shl	local01, #3
0c8f0     02 00 00 FF 
0c8f4     38 E4 85 F1 | 	sub	objptr, ##1080
0c8f8     F2 26 02 F1 | 	add	local01, objptr
0c8fc     13 13 02 FB | 	rdlong	arg01, local01
0c900     35 00 00 FF 
0c904     0C E4 85 F1 | 	sub	objptr, ##27148
0c908     09 35 02 F6 | 	mov	local08, arg01
0c90c     97 06 48 FB | 	callpa	#(@LR__1029-@LR__1028)>>2,fcache_load_ptr_
0c910                 | LR__1028
0c910     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c914     01 34 06 51 |  if_ne	add	local08, #1
0c918     F4 FF 9F 5D |  if_ne	jmp	#LR__1028
0c91c                 | LR__1029
0c91c     09 35 82 F1 | 	sub	local08, arg01
0c920     1A 15 02 F6 | 	mov	arg02, local08
0c924     01 14 86 F1 | 	sub	arg02, #1
0c928     19 13 02 F6 | 	mov	arg01, local07
0c92c     34 D3 B1 FD | 	call	#__system__Right_S
0c930     FD 14 02 F6 | 	mov	arg02, result1
0c934     17 13 02 F6 | 	mov	arg01, local05
0c938     7C B2 B1 FD | 	call	#__system___string_concat
0c93c     18 FB 61 FC | 	wrlong	result1, local06
0c940                 | LR__1030
0c940     37 00 00 FF 
0c944     44 E4 05 F1 | 	add	objptr, ##28228
0c948     F2 30 02 FB | 	rdlong	local06, objptr
0c94c     03 30 66 F0 | 	shl	local06, #3
0c950     02 00 00 FF 
0c954     38 E4 85 F1 | 	sub	objptr, ##1080
0c958     F2 30 02 F1 | 	add	local06, objptr
0c95c     18 13 02 FB | 	rdlong	arg01, local06
0c960     00 14 06 F6 | 	mov	arg02, #0
0c964     35 00 00 FF 
0c968     0C E4 85 F1 | 	sub	objptr, ##27148
0c96c     E0 E6 B1 FD | 	call	#__system____builtin_atoi
0c970     FD 2C 02 FD | 	qmul	local04, result1
0c974     4A 00 00 FF 
0c978     7C E4 05 F1 | 	add	objptr, ##38012
0c97c     F2 30 02 FB | 	rdlong	local06, objptr
0c980     18 37 02 F6 | 	mov	local09, local06
0c984     01 36 66 F0 | 	shl	local09, #1
0c988     18 37 02 F1 | 	add	local09, local06
0c98c     02 36 66 F0 | 	shl	local09, #2
0c990     03 00 00 FF 
0c994     00 E4 85 F1 | 	sub	objptr, ##1536
0c998     F2 36 02 F1 | 	add	local09, objptr
0c99c     03 00 00 FF 
0c9a0     00 E4 05 F1 | 	add	objptr, ##1536
0c9a4     18 26 62 FD | 	getqx	local01
0c9a8     1C 2A 06 F6 | 	mov	local03, #28
0c9ac     13 31 02 F6 | 	mov	local06, local01
0c9b0     14 33 02 F6 | 	mov	local07, local02
0c9b4     1B 31 62 FC | 	wrlong	local06, local09
0c9b8     15 37 02 F6 | 	mov	local09, local03
0c9bc     F2 30 02 FB | 	rdlong	local06, objptr
0c9c0     18 2F 02 F6 | 	mov	local05, local06
0c9c4     01 2E 66 F0 | 	shl	local05, #1
0c9c8     18 2F 02 F1 | 	add	local05, local06
0c9cc     02 2E 66 F0 | 	shl	local05, #2
0c9d0     03 00 00 FF 
0c9d4     00 E4 85 F1 | 	sub	objptr, ##1536
0c9d8     F2 2E 02 F1 | 	add	local05, objptr
0c9dc     04 2E 06 F1 | 	add	local05, #4
0c9e0     17 33 62 FC | 	wrlong	local07, local05
0c9e4     03 00 00 FF 
0c9e8     00 E4 05 F1 | 	add	objptr, ##1536
0c9ec     F2 32 02 FB | 	rdlong	local07, objptr
0c9f0     19 31 02 F6 | 	mov	local06, local07
0c9f4     01 30 66 F0 | 	shl	local06, #1
0c9f8     19 31 02 F1 | 	add	local06, local07
0c9fc     02 30 66 F0 | 	shl	local06, #2
0ca00     03 00 00 FF 
0ca04     00 E4 85 F1 | 	sub	objptr, ##1536
0ca08     F2 30 02 F1 | 	add	local06, objptr
0ca0c     08 30 06 F1 | 	add	local06, #8
0ca10     18 37 62 FC | 	wrlong	local09, local06
0ca14     03 00 00 FF 
0ca18     00 E4 05 F1 | 	add	objptr, ##1536
0ca1c     F2 30 02 FB | 	rdlong	local06, objptr
0ca20     01 30 06 F1 | 	add	local06, #1
0ca24     F2 30 62 FC | 	wrlong	local06, objptr
0ca28     13 00 00 FF 
0ca2c     38 E4 85 F1 | 	sub	objptr, ##9784
0ca30     F2 30 02 FB | 	rdlong	local06, objptr
0ca34     01 30 06 F1 | 	add	local06, #1
0ca38     F2 30 62 FC | 	wrlong	local06, objptr
0ca3c     37 00 00 FF 
0ca40     44 E4 85 F1 | 	sub	objptr, ##28228
0ca44     24 05 90 FD | 	jmp	#LR__1043
0ca48                 | LR__1031
0ca48                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0ca48     01 2C 0E F2 | 	cmp	local04, #1 wz
0ca4c     48 00 90 5D |  if_ne	jmp	#LR__1032
0ca50     00 C0 1F FF 
0ca54     00 30 06 F6 | 	mov	local06, ##1065353216
0ca58     37 00 00 FF 
0ca5c     44 E4 05 F1 | 	add	objptr, ##28228
0ca60     F2 36 02 FB | 	rdlong	local09, objptr
0ca64     03 36 66 F0 | 	shl	local09, #3
0ca68     02 00 00 FF 
0ca6c     38 E4 85 F1 | 	sub	objptr, ##1080
0ca70     F2 36 02 F1 | 	add	local09, objptr
0ca74     1B 13 02 FB | 	rdlong	arg01, local09
0ca78     35 00 00 FF 
0ca7c     0C E4 85 F1 | 	sub	objptr, ##27148
0ca80     64 E7 B1 FD | 	call	#__system____builtin_atof
0ca84     FD 14 02 F6 | 	mov	arg02, result1
0ca88     18 13 02 F6 | 	mov	arg01, local06
0ca8c     48 DF B1 FD | 	call	#__system___float_mul
0ca90     FD 26 02 F6 | 	mov	local01, result1
0ca94     1E 2A 06 F6 | 	mov	local03, #30
0ca98                 | LR__1032
0ca98                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0ca98     FF FF 7F FF 
0ca9c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0caa0     48 00 90 5D |  if_ne	jmp	#LR__1033
0caa4     00 C0 5F FF 
0caa8     00 30 06 F6 | 	mov	local06, ##-1082130432
0caac     37 00 00 FF 
0cab0     44 E4 05 F1 | 	add	objptr, ##28228
0cab4     F2 36 02 FB | 	rdlong	local09, objptr
0cab8     03 36 66 F0 | 	shl	local09, #3
0cabc     02 00 00 FF 
0cac0     38 E4 85 F1 | 	sub	objptr, ##1080
0cac4     F2 36 02 F1 | 	add	local09, objptr
0cac8     1B 13 02 FB | 	rdlong	arg01, local09
0cacc     35 00 00 FF 
0cad0     0C E4 85 F1 | 	sub	objptr, ##27148
0cad4     10 E7 B1 FD | 	call	#__system____builtin_atof
0cad8     FD 14 02 F6 | 	mov	arg02, result1
0cadc     18 13 02 F6 | 	mov	arg01, local06
0cae0     F4 DE B1 FD | 	call	#__system___float_mul
0cae4     FD 26 02 F6 | 	mov	local01, result1
0cae8     1E 2A 06 F6 | 	mov	local03, #30
0caec                 | LR__1033
0caec     13 31 02 F6 | 	mov	local06, local01
0caf0     14 33 02 F6 | 	mov	local07, local02
0caf4     15 2F 02 F6 | 	mov	local05, local03
0caf8     4A 00 00 FF 
0cafc     7C E4 05 F1 | 	add	objptr, ##38012
0cb00     F2 26 02 FB | 	rdlong	local01, objptr
0cb04     13 37 02 F6 | 	mov	local09, local01
0cb08     01 36 66 F0 | 	shl	local09, #1
0cb0c     13 37 02 F1 | 	add	local09, local01
0cb10     02 36 66 F0 | 	shl	local09, #2
0cb14     03 00 00 FF 
0cb18     00 E4 85 F1 | 	sub	objptr, ##1536
0cb1c     F2 36 02 F1 | 	add	local09, objptr
0cb20     1B 31 62 FC | 	wrlong	local06, local09
0cb24     03 00 00 FF 
0cb28     00 E4 05 F1 | 	add	objptr, ##1536
0cb2c     F2 36 02 FB | 	rdlong	local09, objptr
0cb30     1B 31 02 F6 | 	mov	local06, local09
0cb34     01 30 66 F0 | 	shl	local06, #1
0cb38     1B 31 02 F1 | 	add	local06, local09
0cb3c     02 30 66 F0 | 	shl	local06, #2
0cb40     03 00 00 FF 
0cb44     00 E4 85 F1 | 	sub	objptr, ##1536
0cb48     F2 30 02 F1 | 	add	local06, objptr
0cb4c     04 30 06 F1 | 	add	local06, #4
0cb50     18 33 62 FC | 	wrlong	local07, local06
0cb54     03 00 00 FF 
0cb58     00 E4 05 F1 | 	add	objptr, ##1536
0cb5c     F2 36 02 FB | 	rdlong	local09, objptr
0cb60     1B 33 02 F6 | 	mov	local07, local09
0cb64     01 32 66 F0 | 	shl	local07, #1
0cb68     1B 33 02 F1 | 	add	local07, local09
0cb6c     02 32 66 F0 | 	shl	local07, #2
0cb70     03 00 00 FF 
0cb74     00 E4 85 F1 | 	sub	objptr, ##1536
0cb78     F2 32 02 F1 | 	add	local07, objptr
0cb7c     08 32 06 F1 | 	add	local07, #8
0cb80     19 2F 62 FC | 	wrlong	local05, local07
0cb84     03 00 00 FF 
0cb88     00 E4 05 F1 | 	add	objptr, ##1536
0cb8c     F2 30 02 FB | 	rdlong	local06, objptr
0cb90     01 30 06 F1 | 	add	local06, #1
0cb94     F2 30 62 FC | 	wrlong	local06, objptr
0cb98     13 00 00 FF 
0cb9c     38 E4 85 F1 | 	sub	objptr, ##9784
0cba0     F2 30 02 FB | 	rdlong	local06, objptr
0cba4     01 30 06 F1 | 	add	local06, #1
0cba8     F2 30 62 FC | 	wrlong	local06, objptr
0cbac     37 00 00 FF 
0cbb0     44 E4 85 F1 | 	sub	objptr, ##28228
0cbb4     B4 03 90 FD | 	jmp	#LR__1043
0cbb8                 | LR__1034
0cbb8     37 00 00 FF 
0cbbc     44 E4 05 F1 | 	add	objptr, ##28228
0cbc0     F2 16 02 FB | 	rdlong	arg03, objptr
0cbc4     03 16 66 F0 | 	shl	arg03, #3
0cbc8     02 00 00 FF 
0cbcc     38 E4 85 F1 | 	sub	objptr, ##1080
0cbd0     F2 16 02 F1 | 	add	arg03, objptr
0cbd4     0B 13 02 FB | 	rdlong	arg01, arg03
0cbd8     35 00 00 FF 
0cbdc     0C E4 85 F1 | 	sub	objptr, ##27148
0cbe0     09 35 02 F6 | 	mov	local08, arg01
0cbe4     97 06 48 FB | 	callpa	#(@LR__1036-@LR__1035)>>2,fcache_load_ptr_
0cbe8                 | LR__1035
0cbe8     1A FB C9 FA | 	rdbyte	result1, local08 wz
0cbec     01 34 06 51 |  if_ne	add	local08, #1
0cbf0     F4 FF 9F 5D |  if_ne	jmp	#LR__1035
0cbf4                 | LR__1036
0cbf4     09 35 82 F1 | 	sub	local08, arg01
0cbf8     1A FB 01 F6 | 	mov	result1, local08
0cbfc     52 00 00 FF 
0cc00     2C E5 05 F1 | 	add	objptr, ##42284
0cc04     F2 FA 61 FC | 	wrlong	result1, objptr
0cc08     5C E4 85 F1 | 	sub	objptr, #92
0cc0c     F2 12 02 FB | 	rdlong	arg01, objptr
0cc10     FD 12 82 F1 | 	sub	arg01, result1
0cc14     04 12 86 F1 | 	sub	arg01, #4
0cc18     03 12 26 F5 | 	andn	arg01, #3
0cc1c     F2 12 62 FC | 	wrlong	arg01, objptr
0cc20     5C E4 05 F1 | 	add	objptr, #92
0cc24     F2 14 02 FB | 	rdlong	arg02, objptr
0cc28     52 00 00 FF 
0cc2c     2C E5 85 F1 | 	sub	objptr, ##42284
0cc30     68 76 B1 FD | 	call	#_pslpoke
0cc34                 | '     pslpoke memtop,l
0cc34                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0cc34     01 38 06 F6 | 	mov	local10, #1
0cc38     52 00 00 FF 
0cc3c     2C E5 05 F1 | 	add	objptr, ##42284
0cc40     F2 3A 02 FB | 	rdlong	local11, objptr
0cc44     52 00 00 FF 
0cc48     2C E5 85 F1 | 	sub	objptr, ##42284
0cc4c     01 3A 06 F1 | 	add	local11, #1
0cc50                 | LR__1037
0cc50     1D 39 52 F2 | 	cmps	local10, local11 wc
0cc54     5C 00 90 3D |  if_ae	jmp	#LR__1038
0cc58     52 00 00 FF 
0cc5c     D0 E4 05 F1 | 	add	objptr, ##42192
0cc60     F2 32 02 FB | 	rdlong	local07, objptr
0cc64     03 32 06 F1 | 	add	local07, #3
0cc68     1C 33 02 F1 | 	add	local07, local10
0cc6c     1B 00 00 FF 
0cc70     8C E4 85 F1 | 	sub	objptr, ##13964
0cc74     F2 36 02 FB | 	rdlong	local09, objptr
0cc78     03 36 66 F0 | 	shl	local09, #3
0cc7c     02 00 00 FF 
0cc80     38 E4 85 F1 | 	sub	objptr, ##1080
0cc84     F2 36 02 F1 | 	add	local09, objptr
0cc88     1B 13 02 FB | 	rdlong	arg01, local09
0cc8c     1C 15 02 F6 | 	mov	arg02, local10
0cc90     01 16 06 F6 | 	mov	arg03, #1
0cc94     35 00 00 FF 
0cc98     0C E4 85 F1 | 	sub	objptr, ##27148
0cc9c     54 D0 B1 FD | 	call	#__system__Mid_S
0cca0     FD 14 C2 FA | 	rdbyte	arg02, result1
0cca4     19 13 02 F6 | 	mov	arg01, local07
0cca8     80 76 B1 FD | 	call	#_pspoke
0ccac     01 38 06 F1 | 	add	local10, #1
0ccb0     9C FF 9F FD | 	jmp	#LR__1037
0ccb4                 | LR__1038
0ccb4     52 00 00 FF 
0ccb8     D0 E4 05 F1 | 	add	objptr, ##42192
0ccbc     F2 26 02 FB | 	rdlong	local01, objptr
0ccc0     2B 2A 06 F6 | 	mov	local03, #43
0ccc4     13 31 02 F6 | 	mov	local06, local01
0ccc8     14 33 02 F6 | 	mov	local07, local02
0cccc     15 3B 02 F6 | 	mov	local11, local03
0ccd0     08 00 00 FF 
0ccd4     54 E4 85 F1 | 	sub	objptr, ##4180
0ccd8     F2 38 02 FB | 	rdlong	local10, objptr
0ccdc     1C 37 02 F6 | 	mov	local09, local10
0cce0     01 36 66 F0 | 	shl	local09, #1
0cce4     1C 37 02 F1 | 	add	local09, local10
0cce8     02 36 66 F0 | 	shl	local09, #2
0ccec     03 00 00 FF 
0ccf0     00 E4 85 F1 | 	sub	objptr, ##1536
0ccf4     F2 36 02 F1 | 	add	local09, objptr
0ccf8     1B 31 62 FC | 	wrlong	local06, local09
0ccfc     03 00 00 FF 
0cd00     00 E4 05 F1 | 	add	objptr, ##1536
0cd04     F2 38 02 FB | 	rdlong	local10, objptr
0cd08     1C 37 02 F6 | 	mov	local09, local10
0cd0c     01 36 66 F0 | 	shl	local09, #1
0cd10     1C 37 02 F1 | 	add	local09, local10
0cd14     02 36 66 F0 | 	shl	local09, #2
0cd18     03 00 00 FF 
0cd1c     00 E4 85 F1 | 	sub	objptr, ##1536
0cd20     F2 36 02 F1 | 	add	local09, objptr
0cd24     04 36 06 F1 | 	add	local09, #4
0cd28     1B 33 62 FC | 	wrlong	local07, local09
0cd2c     03 00 00 FF 
0cd30     00 E4 05 F1 | 	add	objptr, ##1536
0cd34     F2 38 02 FB | 	rdlong	local10, objptr
0cd38     1C 37 02 F6 | 	mov	local09, local10
0cd3c     01 36 66 F0 | 	shl	local09, #1
0cd40     1C 37 02 F1 | 	add	local09, local10
0cd44     02 36 66 F0 | 	shl	local09, #2
0cd48     03 00 00 FF 
0cd4c     00 E4 85 F1 | 	sub	objptr, ##1536
0cd50     F2 36 02 F1 | 	add	local09, objptr
0cd54     08 36 06 F1 | 	add	local09, #8
0cd58     1B 3B 62 FC | 	wrlong	local11, local09
0cd5c     03 00 00 FF 
0cd60     00 E4 05 F1 | 	add	objptr, ##1536
0cd64     F2 30 02 FB | 	rdlong	local06, objptr
0cd68     01 30 06 F1 | 	add	local06, #1
0cd6c     F2 30 62 FC | 	wrlong	local06, objptr
0cd70     13 00 00 FF 
0cd74     38 E4 85 F1 | 	sub	objptr, ##9784
0cd78     F2 30 02 FB | 	rdlong	local06, objptr
0cd7c     01 30 06 F1 | 	add	local06, #1
0cd80     F2 30 62 FC | 	wrlong	local06, objptr
0cd84     37 00 00 FF 
0cd88     44 E4 85 F1 | 	sub	objptr, ##28228
0cd8c     DC 01 90 FD | 	jmp	#LR__1043
0cd90                 | LR__1039
0cd90     2C 2A 06 F6 | 	mov	local03, #44
0cd94     37 00 00 FF 
0cd98     44 E4 05 F1 | 	add	objptr, ##28228
0cd9c     F2 30 02 FB | 	rdlong	local06, objptr
0cda0     03 30 66 F0 | 	shl	local06, #3
0cda4     02 00 00 FF 
0cda8     38 E4 85 F1 | 	sub	objptr, ##1080
0cdac     F2 30 02 F1 | 	add	local06, objptr
0cdb0     18 13 02 FB | 	rdlong	arg01, local06
0cdb4     00 14 06 F6 | 	mov	arg02, #0
0cdb8     35 00 00 FF 
0cdbc     0C E4 85 F1 | 	sub	objptr, ##27148
0cdc0     8C E2 B1 FD | 	call	#__system____builtin_atoi
0cdc4     FD 26 02 F6 | 	mov	local01, result1
0cdc8     13 31 02 F6 | 	mov	local06, local01
0cdcc     14 33 02 F6 | 	mov	local07, local02
0cdd0     15 3B 02 F6 | 	mov	local11, local03
0cdd4     4A 00 00 FF 
0cdd8     7C E4 05 F1 | 	add	objptr, ##38012
0cddc     F2 38 02 FB | 	rdlong	local10, objptr
0cde0     1C 37 02 F6 | 	mov	local09, local10
0cde4     01 36 66 F0 | 	shl	local09, #1
0cde8     1C 37 02 F1 | 	add	local09, local10
0cdec     02 36 66 F0 | 	shl	local09, #2
0cdf0     03 00 00 FF 
0cdf4     00 E4 85 F1 | 	sub	objptr, ##1536
0cdf8     F2 36 02 F1 | 	add	local09, objptr
0cdfc     1B 31 62 FC | 	wrlong	local06, local09
0ce00     03 00 00 FF 
0ce04     00 E4 05 F1 | 	add	objptr, ##1536
0ce08     F2 38 02 FB | 	rdlong	local10, objptr
0ce0c     1C 37 02 F6 | 	mov	local09, local10
0ce10     01 36 66 F0 | 	shl	local09, #1
0ce14     1C 37 02 F1 | 	add	local09, local10
0ce18     02 36 66 F0 | 	shl	local09, #2
0ce1c     03 00 00 FF 
0ce20     00 E4 85 F1 | 	sub	objptr, ##1536
0ce24     F2 36 02 F1 | 	add	local09, objptr
0ce28     04 36 06 F1 | 	add	local09, #4
0ce2c     1B 33 62 FC | 	wrlong	local07, local09
0ce30     03 00 00 FF 
0ce34     00 E4 05 F1 | 	add	objptr, ##1536
0ce38     F2 38 02 FB | 	rdlong	local10, objptr
0ce3c     1C 37 02 F6 | 	mov	local09, local10
0ce40     01 36 66 F0 | 	shl	local09, #1
0ce44     1C 37 02 F1 | 	add	local09, local10
0ce48     02 36 66 F0 | 	shl	local09, #2
0ce4c     03 00 00 FF 
0ce50     00 E4 85 F1 | 	sub	objptr, ##1536
0ce54     F2 36 02 F1 | 	add	local09, objptr
0ce58     08 36 06 F1 | 	add	local09, #8
0ce5c     1B 3B 62 FC | 	wrlong	local11, local09
0ce60     03 00 00 FF 
0ce64     00 E4 05 F1 | 	add	objptr, ##1536
0ce68     F2 30 02 FB | 	rdlong	local06, objptr
0ce6c     01 30 06 F1 | 	add	local06, #1
0ce70     F2 30 62 FC | 	wrlong	local06, objptr
0ce74     13 00 00 FF 
0ce78     38 E4 85 F1 | 	sub	objptr, ##9784
0ce7c     F2 30 02 FB | 	rdlong	local06, objptr
0ce80     01 30 06 F1 | 	add	local06, #1
0ce84     F2 30 62 FC | 	wrlong	local06, objptr
0ce88     37 00 00 FF 
0ce8c     44 E4 85 F1 | 	sub	objptr, ##28228
0ce90     D8 00 90 FD | 	jmp	#LR__1043
0ce94                 | LR__1040
0ce94     16 13 02 F6 | 	mov	arg01, local04
0ce98     24 04 B0 FD | 	call	#_getvar
0ce9c     37 00 00 FF 
0cea0     44 E4 05 F1 | 	add	objptr, ##28228
0cea4     F2 30 02 FB | 	rdlong	local06, objptr
0cea8     01 30 06 F1 | 	add	local06, #1
0ceac     F2 30 62 FC | 	wrlong	local06, objptr
0ceb0     37 00 00 FF 
0ceb4     44 E4 85 F1 | 	sub	objptr, ##28228
0ceb8                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0ceb8     01 FA 55 F2 | 	cmps	result1, #1 wc
0cebc     B0 00 90 3D |  if_ae	jmp	#LR__1044
0cec0     A8 00 90 FD | 	jmp	#LR__1043
0cec4                 | LR__1041
0cec4     37 00 00 FF 
0cec8     44 E4 05 F1 | 	add	objptr, ##28228
0cecc     F2 30 02 FB | 	rdlong	local06, objptr
0ced0     01 30 06 F1 | 	add	local06, #1
0ced4     F2 30 62 FC | 	wrlong	local06, objptr
0ced8     37 00 00 FF 
0cedc     44 E4 85 F1 | 	sub	objptr, ##28228
0cee0     20 F1 BF FD | 	call	#_expr
0cee4                 | '     ct+=1
0cee4                 | '     err=expr() : if err>0 then return err 
0cee4     01 FA 55 F2 | 	cmps	result1, #1 wc
0cee8     84 00 90 3D |  if_ae	jmp	#LR__1044
0ceec                 | '     if lparts(ct).token=token_rpar then ct+=1
0ceec     37 00 00 FF 
0cef0     44 E4 05 F1 | 	add	objptr, ##28228
0cef4     F2 3A 02 FB | 	rdlong	local11, objptr
0cef8     03 3A 66 F0 | 	shl	local11, #3
0cefc     02 00 00 FF 
0cf00     38 E4 85 F1 | 	sub	objptr, ##1080
0cf04     F2 3A 02 F1 | 	add	local11, objptr
0cf08     04 3A 06 F1 | 	add	local11, #4
0cf0c     1D 3B 02 FB | 	rdlong	local11, local11
0cf10     14 3A 0E F2 | 	cmp	local11, #20 wz
0cf14     35 00 00 FF 
0cf18     0C E4 85 F1 | 	sub	objptr, ##27148
0cf1c     4C 00 90 5D |  if_ne	jmp	#LR__1043
0cf20     37 00 00 FF 
0cf24     44 E4 05 F1 | 	add	objptr, ##28228
0cf28     F2 30 02 FB | 	rdlong	local06, objptr
0cf2c     01 30 06 F1 | 	add	local06, #1
0cf30     F2 30 62 FC | 	wrlong	local06, objptr
0cf34     37 00 00 FF 
0cf38     44 E4 85 F1 | 	sub	objptr, ##28228
0cf3c     2C 00 90 FD | 	jmp	#LR__1043
0cf40                 | LR__1042
0cf40     16 13 02 F6 | 	mov	arg01, local04
0cf44     34 00 B0 FD | 	call	#_getfun
0cf48     37 00 00 FF 
0cf4c     44 E4 05 F1 | 	add	objptr, ##28228
0cf50     F2 30 02 FB | 	rdlong	local06, objptr
0cf54     01 30 06 F1 | 	add	local06, #1
0cf58     F2 30 62 FC | 	wrlong	local06, objptr
0cf5c     37 00 00 FF 
0cf60     44 E4 85 F1 | 	sub	objptr, ##28228
0cf64                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cf64     01 FA 55 F2 | 	cmps	result1, #1 wc
0cf68     04 00 90 3D |  if_ae	jmp	#LR__1044
0cf6c                 | LR__1043
0cf6c                 | ' return 0  
0cf6c     00 FA 05 F6 | 	mov	result1, #0
0cf70                 | LR__1044
0cf70     A7 F0 03 F6 | 	mov	ptra, fp
0cf74     B2 00 A0 FD | 	call	#popregs_
0cf78                 | _getvalue_ret
0cf78     2D 00 64 FD | 	ret
0cf7c                 | 
0cf7c                 | ' 
0cf7c                 | ' ' Get a function result 
0cf7c                 | ' 
0cf7c                 | ' function getfun(m as integer) as ulong
0cf7c                 | _getfun
0cf7c     0F 4A 05 F6 | 	mov	COUNT_, #15
0cf80     A8 00 A0 FD | 	call	#pushregs_
0cf84                 | _getfun_enter
0cf84     09 2D 02 F6 | 	mov	local04, arg01
0cf88     37 00 00 FF 
0cf8c     44 E4 05 F1 | 	add	objptr, ##28228
0cf90     F2 2E 02 FB | 	rdlong	local05, objptr
0cf94     17 31 02 F6 | 	mov	local06, local05
0cf98     00 32 06 F6 | 	mov	local07, #0
0cf9c                 | ' oldct=ct
0cf9c                 | ' numpar=0
0cf9c                 | ' if lparts(ct+1).token=token_lpar then
0cf9c     01 2E 06 F1 | 	add	local05, #1
0cfa0     03 2E 66 F0 | 	shl	local05, #3
0cfa4     02 00 00 FF 
0cfa8     38 E4 85 F1 | 	sub	objptr, ##1080
0cfac     F2 2E 02 F1 | 	add	local05, objptr
0cfb0     04 2E 06 F1 | 	add	local05, #4
0cfb4     17 2F 02 FB | 	rdlong	local05, local05
0cfb8     15 2E 0E F2 | 	cmp	local05, #21 wz
0cfbc     35 00 00 FF 
0cfc0     0C E4 85 F1 | 	sub	objptr, ##27148
0cfc4     54 01 90 5D |  if_ne	jmp	#LR__1054
0cfc8     37 00 00 FF 
0cfcc     44 E4 05 F1 | 	add	objptr, ##28228
0cfd0     F2 34 02 FB | 	rdlong	local08, objptr
0cfd4     01 34 06 F1 | 	add	local08, #1
0cfd8     F2 34 62 FC | 	wrlong	local08, objptr
0cfdc     37 00 00 FF 
0cfe0     44 E4 85 F1 | 	sub	objptr, ##28228
0cfe4                 | '   ct+=1 											' omit this lpar, this is for expr list
0cfe4                 | '   do
0cfe4                 | LR__1050
0cfe4     37 00 00 FF 
0cfe8     44 E4 05 F1 | 	add	objptr, ##28228
0cfec     F2 2E 02 FB | 	rdlong	local05, objptr
0cff0     01 2E 06 F1 | 	add	local05, #1
0cff4     F2 2E 62 FC | 	wrlong	local05, objptr
0cff8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cff8                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cff8     03 2E 66 F0 | 	shl	local05, #3
0cffc     02 00 00 FF 
0d000     38 E4 85 F1 | 	sub	objptr, ##1080
0d004     F2 2E 02 F1 | 	add	local05, objptr
0d008     04 2E 06 F1 | 	add	local05, #4
0d00c     17 35 02 FB | 	rdlong	local08, local05
0d010     15 34 0E F2 | 	cmp	local08, #21 wz
0d014     35 00 00 FF 
0d018     0C E4 85 F1 | 	sub	objptr, ##27148
0d01c     44 00 90 5D |  if_ne	jmp	#LR__1051
0d020     37 00 00 FF 
0d024     44 E4 05 F1 | 	add	objptr, ##28228
0d028     F2 34 02 FB | 	rdlong	local08, objptr
0d02c     01 34 06 F1 | 	add	local08, #1
0d030     F2 34 62 FC | 	wrlong	local08, objptr
0d034     37 00 00 FF 
0d038     44 E4 85 F1 | 	sub	objptr, ##28228
0d03c     C4 EF BF FD | 	call	#_expr
0d040     FD 36 02 F6 | 	mov	local09, result1
0d044     37 00 00 FF 
0d048     44 E4 05 F1 | 	add	objptr, ##28228
0d04c     F2 34 02 FB | 	rdlong	local08, objptr
0d050     01 34 06 F1 | 	add	local08, #1
0d054     F2 34 62 FC | 	wrlong	local08, objptr
0d058     37 00 00 FF 
0d05c     44 E4 85 F1 | 	sub	objptr, ##28228
0d060     08 00 90 FD | 	jmp	#LR__1052
0d064                 | LR__1051
0d064     9C EF BF FD | 	call	#_expr
0d068     FD 36 02 F6 | 	mov	local09, result1
0d06c                 | LR__1052
0d06c                 | '     if err>0 then return err
0d06c     01 36 16 F2 | 	cmp	local09, #1 wc
0d070     1B FB 01 36 |  if_ae	mov	result1, local09
0d074     3C 02 90 3D |  if_ae	jmp	#LR__1056
0d078     01 32 06 F1 | 	add	local07, #1
0d07c     37 00 00 FF 
0d080     44 E4 05 F1 | 	add	objptr, ##28228
0d084     F2 2E 02 FB | 	rdlong	local05, objptr
0d088     03 2E 66 F0 | 	shl	local05, #3
0d08c     02 00 00 FF 
0d090     38 E4 85 F1 | 	sub	objptr, ##1080
0d094     F2 2E 02 F1 | 	add	local05, objptr
0d098     04 2E 06 F1 | 	add	local05, #4
0d09c     17 37 02 FB | 	rdlong	local09, local05
0d0a0     14 36 0E F2 | 	cmp	local09, #20 wz
0d0a4     35 00 00 FF 
0d0a8     0C E4 85 F1 | 	sub	objptr, ##27148
0d0ac     34 00 90 AD |  if_e	jmp	#LR__1053
0d0b0     37 00 00 FF 
0d0b4     44 E4 05 F1 | 	add	objptr, ##28228
0d0b8     F2 36 02 FB | 	rdlong	local09, objptr
0d0bc     03 36 66 F0 | 	shl	local09, #3
0d0c0     02 00 00 FF 
0d0c4     38 E4 85 F1 | 	sub	objptr, ##1080
0d0c8     F2 36 02 F1 | 	add	local09, objptr
0d0cc     04 36 06 F1 | 	add	local09, #4
0d0d0     1B 37 02 FB | 	rdlong	local09, local09
0d0d4     FE 37 0E F2 | 	cmp	local09, #510 wz
0d0d8     35 00 00 FF 
0d0dc     0C E4 85 F1 | 	sub	objptr, ##27148
0d0e0     00 FF 9F 5D |  if_ne	jmp	#LR__1050
0d0e4                 | LR__1053
0d0e4                 | '   if lparts(ct).token=token_end then return 14
0d0e4     37 00 00 FF 
0d0e8     44 E4 05 F1 | 	add	objptr, ##28228
0d0ec     F2 2E 02 FB | 	rdlong	local05, objptr
0d0f0     03 2E 66 F0 | 	shl	local05, #3
0d0f4     02 00 00 FF 
0d0f8     38 E4 85 F1 | 	sub	objptr, ##1080
0d0fc     F2 2E 02 F1 | 	add	local05, objptr
0d100     04 2E 06 F1 | 	add	local05, #4
0d104     17 37 02 FB | 	rdlong	local09, local05
0d108     FE 37 0E F2 | 	cmp	local09, #510 wz
0d10c     35 00 00 FF 
0d110     0C E4 85 F1 | 	sub	objptr, ##27148
0d114     0E FA 05 A6 |  if_e	mov	result1, #14
0d118     98 01 90 AD |  if_e	jmp	#LR__1056
0d11c                 | LR__1054
0d11c     19 27 02 F6 | 	mov	local01, local07
0d120     03 30 66 F0 | 	shl	local06, #3
0d124     35 00 00 FF 
0d128     0C E4 05 F1 | 	add	objptr, ##27148
0d12c     F2 30 02 F1 | 	add	local06, objptr
0d130     04 30 06 F1 | 	add	local06, #4
0d134     18 2B 02 FB | 	rdlong	local03, local06
0d138     13 35 02 F6 | 	mov	local08, local01
0d13c     14 39 02 F6 | 	mov	local10, local02
0d140     15 3B 02 F6 | 	mov	local11, local03
0d144     15 00 00 FF 
0d148     70 E4 05 F1 | 	add	objptr, ##10864
0d14c     F2 3C 02 FB | 	rdlong	local12, objptr
0d150     1E 3F 02 F6 | 	mov	local13, local12
0d154     01 3E 66 F0 | 	shl	local13, #1
0d158     1E 3F 02 F1 | 	add	local13, local12
0d15c     02 3E 66 F0 | 	shl	local13, #2
0d160     03 00 00 FF 
0d164     00 E4 85 F1 | 	sub	objptr, ##1536
0d168     F2 3E 02 F1 | 	add	local13, objptr
0d16c     1F 35 62 FC | 	wrlong	local08, local13
0d170     03 00 00 FF 
0d174     00 E4 05 F1 | 	add	objptr, ##1536
0d178     F2 34 02 FB | 	rdlong	local08, objptr
0d17c     1A 41 02 F6 | 	mov	local14, local08
0d180     01 40 66 F0 | 	shl	local14, #1
0d184     1A 41 02 F1 | 	add	local14, local08
0d188     02 40 66 F0 | 	shl	local14, #2
0d18c     03 00 00 FF 
0d190     00 E4 85 F1 | 	sub	objptr, ##1536
0d194     F2 40 02 F1 | 	add	local14, objptr
0d198     04 40 06 F1 | 	add	local14, #4
0d19c     20 39 62 FC | 	wrlong	local10, local14
0d1a0     03 00 00 FF 
0d1a4     00 E4 05 F1 | 	add	objptr, ##1536
0d1a8     F2 34 02 FB | 	rdlong	local08, objptr
0d1ac     1A 43 02 F6 | 	mov	local15, local08
0d1b0     01 42 66 F0 | 	shl	local15, #1
0d1b4     1A 43 02 F1 | 	add	local15, local08
0d1b8     02 42 66 F0 | 	shl	local15, #2
0d1bc     03 00 00 FF 
0d1c0     00 E4 85 F1 | 	sub	objptr, ##1536
0d1c4     F2 42 02 F1 | 	add	local15, objptr
0d1c8     08 42 06 F1 | 	add	local15, #8
0d1cc     21 3B 62 FC | 	wrlong	local11, local15
0d1d0     03 00 00 FF 
0d1d4     00 E4 05 F1 | 	add	objptr, ##1536
0d1d8     F2 34 02 FB | 	rdlong	local08, objptr
0d1dc     01 34 06 F1 | 	add	local08, #1
0d1e0     F2 34 62 FC | 	wrlong	local08, objptr
0d1e4     4A 00 00 FF 
0d1e8     7C E4 85 F1 | 	sub	objptr, ##38012
0d1ec                 | ' t2.result.uresult=numpar
0d1ec                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d1ec                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d1ec                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d1ec     FF FF 7F FF 
0d1f0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d1f4     B8 00 90 5D |  if_ne	jmp	#LR__1055
0d1f8     15 2A 06 F6 | 	mov	local03, #21
0d1fc     13 35 02 F6 | 	mov	local08, local01
0d200     14 39 02 F6 | 	mov	local10, local02
0d204     15 3B 02 F6 | 	mov	local11, local03
0d208     4A 00 00 FF 
0d20c     7C E4 05 F1 | 	add	objptr, ##38012
0d210     F2 3C 02 FB | 	rdlong	local12, objptr
0d214     1E 3F 02 F6 | 	mov	local13, local12
0d218     01 3E 66 F0 | 	shl	local13, #1
0d21c     1E 3F 02 F1 | 	add	local13, local12
0d220     02 3E 66 F0 | 	shl	local13, #2
0d224     03 00 00 FF 
0d228     00 E4 85 F1 | 	sub	objptr, ##1536
0d22c     F2 3E 02 F1 | 	add	local13, objptr
0d230     1F 35 62 FC | 	wrlong	local08, local13
0d234     03 00 00 FF 
0d238     00 E4 05 F1 | 	add	objptr, ##1536
0d23c     F2 42 02 FB | 	rdlong	local15, objptr
0d240     21 41 02 F6 | 	mov	local14, local15
0d244     01 40 66 F0 | 	shl	local14, #1
0d248     21 41 02 F1 | 	add	local14, local15
0d24c     02 40 66 F0 | 	shl	local14, #2
0d250     03 00 00 FF 
0d254     00 E4 85 F1 | 	sub	objptr, ##1536
0d258     F2 40 02 F1 | 	add	local14, objptr
0d25c     04 40 06 F1 | 	add	local14, #4
0d260     20 39 62 FC | 	wrlong	local10, local14
0d264     03 00 00 FF 
0d268     00 E4 05 F1 | 	add	objptr, ##1536
0d26c     F2 40 02 FB | 	rdlong	local14, objptr
0d270     20 43 02 F6 | 	mov	local15, local14
0d274     01 42 66 F0 | 	shl	local15, #1
0d278     20 43 02 F1 | 	add	local15, local14
0d27c     02 42 66 F0 | 	shl	local15, #2
0d280     03 00 00 FF 
0d284     00 E4 85 F1 | 	sub	objptr, ##1536
0d288     F2 42 02 F1 | 	add	local15, objptr
0d28c     08 42 06 F1 | 	add	local15, #8
0d290     21 3B 62 FC | 	wrlong	local11, local15
0d294     03 00 00 FF 
0d298     00 E4 05 F1 | 	add	objptr, ##1536
0d29c     F2 34 02 FB | 	rdlong	local08, objptr
0d2a0     01 34 06 F1 | 	add	local08, #1
0d2a4     F2 34 62 FC | 	wrlong	local08, objptr
0d2a8     4A 00 00 FF 
0d2ac     7C E4 85 F1 | 	sub	objptr, ##38012
0d2b0                 | LR__1055
0d2b0                 | ' return 0
0d2b0     00 FA 05 F6 | 	mov	result1, #0
0d2b4                 | LR__1056
0d2b4     A7 F0 03 F6 | 	mov	ptra, fp
0d2b8     B2 00 A0 FD | 	call	#popregs_
0d2bc                 | _getfun_ret
0d2bc     2D 00 64 FD | 	ret
0d2c0                 | 
0d2c0                 | '   
0d2c0                 | '   
0d2c0                 | ' function getvar(m as integer) as ulong
0d2c0                 | _getvar
0d2c0     11 4A 05 F6 | 	mov	COUNT_, #17
0d2c4     A8 00 A0 FD | 	call	#pushregs_
0d2c8                 | _getvar_enter
0d2c8     09 2D 02 F6 | 	mov	local04, arg01
0d2cc     37 00 00 FF 
0d2d0     44 E4 05 F1 | 	add	objptr, ##28228
0d2d4     F2 2E 02 FB | 	rdlong	local05, objptr
0d2d8     03 2E 66 F0 | 	shl	local05, #3
0d2dc     02 00 00 FF 
0d2e0     38 E4 85 F1 | 	sub	objptr, ##1080
0d2e4     F2 2E 02 F1 | 	add	local05, objptr
0d2e8     17 31 02 FB | 	rdlong	local06, local05
0d2ec     01 32 66 F6 | 	neg	local07, #1
0d2f0                 | ' 
0d2f0                 | ' varname$=lparts(ct).part$
0d2f0                 | ' j=-1
0d2f0                 | ' 
0d2f0                 | ' for i=0 to varnum-1
0d2f0     00 34 06 F6 | 	mov	local08, #0
0d2f4     04 E4 85 F1 | 	sub	objptr, #4
0d2f8     F2 36 02 FB | 	rdlong	local09, objptr
0d2fc     35 00 00 FF 
0d300     08 E4 85 F1 | 	sub	objptr, ##27144
0d304                 | LR__1060
0d304     1B 35 52 F2 | 	cmps	local08, local09 wc
0d308     38 00 90 3D |  if_ae	jmp	#LR__1061
0d30c                 | '   if variables(i).name=varname$ then j=i : exit
0d30c     1A 2F 02 F6 | 	mov	local05, local08
0d310     04 2E 66 F0 | 	shl	local05, #4
0d314     14 00 00 FF 
0d318     F8 E5 05 F1 | 	add	objptr, ##10744
0d31c     F2 2E 02 F1 | 	add	local05, objptr
0d320     17 13 02 FB | 	rdlong	arg01, local05
0d324     18 15 02 F6 | 	mov	arg02, local06
0d328     14 00 00 FF 
0d32c     F8 E5 85 F1 | 	sub	objptr, ##10744
0d330     50 A8 B1 FD | 	call	#__system___string_cmp
0d334     00 FA 0D F2 | 	cmp	result1, #0 wz
0d338     1A 33 02 A6 |  if_e	mov	local07, local08
0d33c     01 34 06 51 |  if_ne	add	local08, #1
0d340     C0 FF 9F 5D |  if_ne	jmp	#LR__1060
0d344                 | LR__1061
0d344                 | ' if  j=-1 andalso varnum<maxvars then   
0d344     FF FF 7F FF 
0d348     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d34c     A8 00 90 5D |  if_ne	jmp	#LR__1062
0d350     35 00 00 FF 
0d354     08 E4 05 F1 | 	add	objptr, ##27144
0d358     F2 36 02 FB | 	rdlong	local09, objptr
0d35c     35 00 00 FF 
0d360     08 E4 85 F1 | 	sub	objptr, ##27144
0d364     02 00 00 FF 
0d368     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d36c     88 00 90 3D |  if_ae	jmp	#LR__1062
0d370     35 00 00 FF 
0d374     08 E4 05 F1 | 	add	objptr, ##27144
0d378     F2 2E 02 FB | 	rdlong	local05, objptr
0d37c     04 2E 66 F0 | 	shl	local05, #4
0d380     20 00 00 FF 
0d384     10 E4 85 F1 | 	sub	objptr, ##16400
0d388     F2 2E 02 F1 | 	add	local05, objptr
0d38c     17 31 62 FC | 	wrlong	local06, local05
0d390     20 00 00 FF 
0d394     10 E4 05 F1 | 	add	objptr, ##16400
0d398     F2 2E 02 FB | 	rdlong	local05, objptr
0d39c     04 2E 66 F0 | 	shl	local05, #4
0d3a0     20 00 00 FF 
0d3a4     10 E4 85 F1 | 	sub	objptr, ##16400
0d3a8     F2 2E 02 F1 | 	add	local05, objptr
0d3ac     04 2E 06 F1 | 	add	local05, #4
0d3b0     17 01 68 FC | 	wrlong	#0, local05
0d3b4     20 00 00 FF 
0d3b8     10 E4 05 F1 | 	add	objptr, ##16400
0d3bc     F2 2E 02 FB | 	rdlong	local05, objptr
0d3c0     04 2E 66 F0 | 	shl	local05, #4
0d3c4     20 00 00 FF 
0d3c8     10 E4 85 F1 | 	sub	objptr, ##16400
0d3cc     F2 2E 02 F1 | 	add	local05, objptr
0d3d0     0C 2E 06 F1 | 	add	local05, #12
0d3d4     17 39 68 FC | 	wrlong	#28, local05
0d3d8     20 00 00 FF 
0d3dc     10 E4 05 F1 | 	add	objptr, ##16400
0d3e0     F2 36 02 FB | 	rdlong	local09, objptr
0d3e4     1B 33 02 F6 | 	mov	local07, local09
0d3e8     01 36 06 F1 | 	add	local09, #1
0d3ec     F2 36 62 FC | 	wrlong	local09, objptr
0d3f0     35 00 00 FF 
0d3f4     08 E4 85 F1 | 	sub	objptr, ##27144
0d3f8                 | LR__1062
0d3f8     00 36 06 F6 | 	mov	local09, #0
0d3fc                 | ' numpar=0
0d3fc                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d3fc     37 00 00 FF 
0d400     44 E4 05 F1 | 	add	objptr, ##28228
0d404     F2 2E 02 FB | 	rdlong	local05, objptr
0d408     01 2E 06 F1 | 	add	local05, #1
0d40c     03 2E 66 F0 | 	shl	local05, #3
0d410     02 00 00 FF 
0d414     38 E4 85 F1 | 	sub	objptr, ##1080
0d418     F2 2E 02 F1 | 	add	local05, objptr
0d41c     04 2E 06 F1 | 	add	local05, #4
0d420     17 35 02 FB | 	rdlong	local08, local05
0d424     15 34 0E F2 | 	cmp	local08, #21 wz
0d428     35 00 00 FF 
0d42c     0C E4 85 F1 | 	sub	objptr, ##27148
0d430     54 01 90 5D |  if_ne	jmp	#LR__1067
0d434     37 00 00 FF 
0d438     44 E4 05 F1 | 	add	objptr, ##28228
0d43c     F2 38 02 FB | 	rdlong	local10, objptr
0d440     01 38 06 F1 | 	add	local10, #1
0d444     F2 38 62 FC | 	wrlong	local10, objptr
0d448     37 00 00 FF 
0d44c     44 E4 85 F1 | 	sub	objptr, ##28228
0d450                 | '   ct+=1 											' omit this lpar, this is for expr list
0d450                 | '   do
0d450                 | LR__1063
0d450     37 00 00 FF 
0d454     44 E4 05 F1 | 	add	objptr, ##28228
0d458     F2 2E 02 FB | 	rdlong	local05, objptr
0d45c     01 2E 06 F1 | 	add	local05, #1
0d460     F2 2E 62 FC | 	wrlong	local05, objptr
0d464                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d464                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d464     03 2E 66 F0 | 	shl	local05, #3
0d468     02 00 00 FF 
0d46c     38 E4 85 F1 | 	sub	objptr, ##1080
0d470     F2 2E 02 F1 | 	add	local05, objptr
0d474     04 2E 06 F1 | 	add	local05, #4
0d478     17 39 02 FB | 	rdlong	local10, local05
0d47c     15 38 0E F2 | 	cmp	local10, #21 wz
0d480     35 00 00 FF 
0d484     0C E4 85 F1 | 	sub	objptr, ##27148
0d488     44 00 90 5D |  if_ne	jmp	#LR__1064
0d48c     37 00 00 FF 
0d490     44 E4 05 F1 | 	add	objptr, ##28228
0d494     F2 38 02 FB | 	rdlong	local10, objptr
0d498     01 38 06 F1 | 	add	local10, #1
0d49c     F2 38 62 FC | 	wrlong	local10, objptr
0d4a0     37 00 00 FF 
0d4a4     44 E4 85 F1 | 	sub	objptr, ##28228
0d4a8     58 EB BF FD | 	call	#_expr
0d4ac     FD 3A 02 F6 | 	mov	local11, result1
0d4b0     37 00 00 FF 
0d4b4     44 E4 05 F1 | 	add	objptr, ##28228
0d4b8     F2 38 02 FB | 	rdlong	local10, objptr
0d4bc     01 38 06 F1 | 	add	local10, #1
0d4c0     F2 38 62 FC | 	wrlong	local10, objptr
0d4c4     37 00 00 FF 
0d4c8     44 E4 85 F1 | 	sub	objptr, ##28228
0d4cc     08 00 90 FD | 	jmp	#LR__1065
0d4d0                 | LR__1064
0d4d0     30 EB BF FD | 	call	#_expr
0d4d4     FD 3A 02 F6 | 	mov	local11, result1
0d4d8                 | LR__1065
0d4d8                 | '     if err>0 then return err
0d4d8     01 3A 56 F2 | 	cmps	local11, #1 wc
0d4dc     1D FB 01 36 |  if_ae	mov	result1, local11
0d4e0     2C 02 90 3D |  if_ae	jmp	#LR__1069
0d4e4     01 36 06 F1 | 	add	local09, #1
0d4e8     37 00 00 FF 
0d4ec     44 E4 05 F1 | 	add	objptr, ##28228
0d4f0     F2 2E 02 FB | 	rdlong	local05, objptr
0d4f4     03 2E 66 F0 | 	shl	local05, #3
0d4f8     02 00 00 FF 
0d4fc     38 E4 85 F1 | 	sub	objptr, ##1080
0d500     F2 2E 02 F1 | 	add	local05, objptr
0d504     04 2E 06 F1 | 	add	local05, #4
0d508     17 3B 02 FB | 	rdlong	local11, local05
0d50c     14 3A 0E F2 | 	cmp	local11, #20 wz
0d510     35 00 00 FF 
0d514     0C E4 85 F1 | 	sub	objptr, ##27148
0d518     34 00 90 AD |  if_e	jmp	#LR__1066
0d51c     37 00 00 FF 
0d520     44 E4 05 F1 | 	add	objptr, ##28228
0d524     F2 3A 02 FB | 	rdlong	local11, objptr
0d528     03 3A 66 F0 | 	shl	local11, #3
0d52c     02 00 00 FF 
0d530     38 E4 85 F1 | 	sub	objptr, ##1080
0d534     F2 3A 02 F1 | 	add	local11, objptr
0d538     04 3A 06 F1 | 	add	local11, #4
0d53c     1D 3B 02 FB | 	rdlong	local11, local11
0d540     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d544     35 00 00 FF 
0d548     0C E4 85 F1 | 	sub	objptr, ##27148
0d54c     00 FF 9F 5D |  if_ne	jmp	#LR__1063
0d550                 | LR__1066
0d550                 | '     if lparts(ct).token=token_end then return 14
0d550     37 00 00 FF 
0d554     44 E4 05 F1 | 	add	objptr, ##28228
0d558     F2 2E 02 FB | 	rdlong	local05, objptr
0d55c     03 2E 66 F0 | 	shl	local05, #3
0d560     02 00 00 FF 
0d564     38 E4 85 F1 | 	sub	objptr, ##1080
0d568     F2 2E 02 F1 | 	add	local05, objptr
0d56c     04 2E 06 F1 | 	add	local05, #4
0d570     17 3B 02 FB | 	rdlong	local11, local05
0d574     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d578     35 00 00 FF 
0d57c     0C E4 85 F1 | 	sub	objptr, ##27148
0d580     0E FA 05 A6 |  if_e	mov	result1, #14
0d584     88 01 90 AD |  if_e	jmp	#LR__1069
0d588                 | LR__1067
0d588     1B 29 02 F6 | 	mov	local02, local09
0d58c     11 2A 06 F6 | 	mov	local03, #17
0d590     19 27 02 F6 | 	mov	local01, local07
0d594     13 39 02 F6 | 	mov	local10, local01
0d598     14 3D 02 F6 | 	mov	local12, local02
0d59c     15 3F 02 F6 | 	mov	local13, local03
0d5a0     4A 00 00 FF 
0d5a4     7C E4 05 F1 | 	add	objptr, ##38012
0d5a8     F2 40 02 FB | 	rdlong	local14, objptr
0d5ac     20 43 02 F6 | 	mov	local15, local14
0d5b0     01 42 66 F0 | 	shl	local15, #1
0d5b4     20 43 02 F1 | 	add	local15, local14
0d5b8     02 42 66 F0 | 	shl	local15, #2
0d5bc     03 00 00 FF 
0d5c0     00 E4 85 F1 | 	sub	objptr, ##1536
0d5c4     F2 42 02 F1 | 	add	local15, objptr
0d5c8     21 39 62 FC | 	wrlong	local10, local15
0d5cc     03 00 00 FF 
0d5d0     00 E4 05 F1 | 	add	objptr, ##1536
0d5d4     F2 38 02 FB | 	rdlong	local10, objptr
0d5d8     1C 45 02 F6 | 	mov	local16, local10
0d5dc     01 44 66 F0 | 	shl	local16, #1
0d5e0     1C 45 02 F1 | 	add	local16, local10
0d5e4     02 44 66 F0 | 	shl	local16, #2
0d5e8     03 00 00 FF 
0d5ec     00 E4 85 F1 | 	sub	objptr, ##1536
0d5f0     F2 44 02 F1 | 	add	local16, objptr
0d5f4     04 44 06 F1 | 	add	local16, #4
0d5f8     22 3D 62 FC | 	wrlong	local12, local16
0d5fc     03 00 00 FF 
0d600     00 E4 05 F1 | 	add	objptr, ##1536
0d604     F2 38 02 FB | 	rdlong	local10, objptr
0d608     1C 47 02 F6 | 	mov	local17, local10
0d60c     01 46 66 F0 | 	shl	local17, #1
0d610     1C 47 02 F1 | 	add	local17, local10
0d614     02 46 66 F0 | 	shl	local17, #2
0d618     03 00 00 FF 
0d61c     00 E4 85 F1 | 	sub	objptr, ##1536
0d620     F2 46 02 F1 | 	add	local17, objptr
0d624     08 46 06 F1 | 	add	local17, #8
0d628     23 3F 62 FC | 	wrlong	local13, local17
0d62c     03 00 00 FF 
0d630     00 E4 05 F1 | 	add	objptr, ##1536
0d634     F2 38 02 FB | 	rdlong	local10, objptr
0d638     01 38 06 F1 | 	add	local10, #1
0d63c     F2 38 62 FC | 	wrlong	local10, objptr
0d640     4A 00 00 FF 
0d644     7C E4 85 F1 | 	sub	objptr, ##38012
0d648                 | ' t2.result.twowords(1)=numpar
0d648                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d648                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d648                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d648     FF FF 7F FF 
0d64c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d650     B8 00 90 5D |  if_ne	jmp	#LR__1068
0d654     15 2A 06 F6 | 	mov	local03, #21
0d658     13 39 02 F6 | 	mov	local10, local01
0d65c     14 3D 02 F6 | 	mov	local12, local02
0d660     15 3F 02 F6 | 	mov	local13, local03
0d664     4A 00 00 FF 
0d668     7C E4 05 F1 | 	add	objptr, ##38012
0d66c     F2 40 02 FB | 	rdlong	local14, objptr
0d670     20 43 02 F6 | 	mov	local15, local14
0d674     01 42 66 F0 | 	shl	local15, #1
0d678     20 43 02 F1 | 	add	local15, local14
0d67c     02 42 66 F0 | 	shl	local15, #2
0d680     03 00 00 FF 
0d684     00 E4 85 F1 | 	sub	objptr, ##1536
0d688     F2 42 02 F1 | 	add	local15, objptr
0d68c     21 39 62 FC | 	wrlong	local10, local15
0d690     03 00 00 FF 
0d694     00 E4 05 F1 | 	add	objptr, ##1536
0d698     F2 46 02 FB | 	rdlong	local17, objptr
0d69c     23 45 02 F6 | 	mov	local16, local17
0d6a0     01 44 66 F0 | 	shl	local16, #1
0d6a4     23 45 02 F1 | 	add	local16, local17
0d6a8     02 44 66 F0 | 	shl	local16, #2
0d6ac     03 00 00 FF 
0d6b0     00 E4 85 F1 | 	sub	objptr, ##1536
0d6b4     F2 44 02 F1 | 	add	local16, objptr
0d6b8     04 44 06 F1 | 	add	local16, #4
0d6bc     22 3D 62 FC | 	wrlong	local12, local16
0d6c0     03 00 00 FF 
0d6c4     00 E4 05 F1 | 	add	objptr, ##1536
0d6c8     F2 44 02 FB | 	rdlong	local16, objptr
0d6cc     22 47 02 F6 | 	mov	local17, local16
0d6d0     01 46 66 F0 | 	shl	local17, #1
0d6d4     22 47 02 F1 | 	add	local17, local16
0d6d8     02 46 66 F0 | 	shl	local17, #2
0d6dc     03 00 00 FF 
0d6e0     00 E4 85 F1 | 	sub	objptr, ##1536
0d6e4     F2 46 02 F1 | 	add	local17, objptr
0d6e8     08 46 06 F1 | 	add	local17, #8
0d6ec     23 3F 62 FC | 	wrlong	local13, local17
0d6f0     03 00 00 FF 
0d6f4     00 E4 05 F1 | 	add	objptr, ##1536
0d6f8     F2 38 02 FB | 	rdlong	local10, objptr
0d6fc     01 38 06 F1 | 	add	local10, #1
0d700     F2 38 62 FC | 	wrlong	local10, objptr
0d704     4A 00 00 FF 
0d708     7C E4 85 F1 | 	sub	objptr, ##38012
0d70c                 | LR__1068
0d70c                 | ' return 0
0d70c     00 FA 05 F6 | 	mov	result1, #0
0d710                 | LR__1069
0d710     A7 F0 03 F6 | 	mov	ptra, fp
0d714     B2 00 A0 FD | 	call	#popregs_
0d718                 | _getvar_ret
0d718     2D 00 64 FD | 	ret
0d71c                 | 
0d71c                 | ' 
0d71c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d71c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' 
0d71c                 | ' 
0d71c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' '                                                                                                                                       -
0d71c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d71c                 | ' '                                                                                                                                       -
0d71c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' 
0d71c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d71c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d71c                 | ' 
0d71c                 | ' function execute_line (astart=0 as integer) as integer
0d71c                 | _execute_line
0d71c     04 4A 05 F6 | 	mov	COUNT_, #4
0d720     A8 00 A0 FD | 	call	#pushregs_
0d724     50 00 00 FF 
0d728     BC E4 05 F1 | 	add	objptr, ##41148
0d72c     F2 00 68 FC | 	wrlong	#0, objptr
0d730                 | ' 
0d730                 | ' runptr2=0
0d730                 | ' for lineptr_e=astart to lineptr-1
0d730     06 00 00 FF 
0d734     3C E4 85 F1 | 	sub	objptr, ##3132
0d738     F2 12 62 FC | 	wrlong	arg01, objptr
0d73c     04 E4 85 F1 | 	sub	objptr, #4
0d740     F2 26 02 FB | 	rdlong	local01, objptr
0d744     4A 00 00 FF 
0d748     7C E4 85 F1 | 	sub	objptr, ##38012
0d74c                 | LR__1070
0d74c     4A 00 00 FF 
0d750     80 E4 05 F1 | 	add	objptr, ##38016
0d754     F2 FA 01 FB | 	rdlong	result1, objptr
0d758     4A 00 00 FF 
0d75c     80 E4 85 F1 | 	sub	objptr, ##38016
0d760     13 FB 51 F2 | 	cmps	result1, local01 wc
0d764     98 00 90 3D |  if_ae	jmp	#LR__1071
0d768     4A 00 00 FF 
0d76c     80 E4 05 F1 | 	add	objptr, ##38016
0d770     F2 FA 01 FB | 	rdlong	result1, objptr
0d774     FD 28 02 F6 | 	mov	local02, result1
0d778     01 28 66 F0 | 	shl	local02, #1
0d77c     FD 28 02 F1 | 	add	local02, result1
0d780     02 28 66 F0 | 	shl	local02, #2
0d784     03 00 00 FF 
0d788     04 E4 85 F1 | 	sub	objptr, ##1540
0d78c     F2 28 02 F1 | 	add	local02, objptr
0d790     08 28 06 F1 | 	add	local02, #8
0d794     14 29 02 FB | 	rdlong	local02, local02
0d798     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d79c     02 28 66 F0 | 	shl	local02, #2
0d7a0     04 00 00 FF 
0d7a4     1C E4 85 F1 | 	sub	objptr, ##2076
0d7a8     F2 28 02 F1 | 	add	local02, objptr
0d7ac     14 29 02 FB | 	rdlong	local02, local02
0d7b0     14 2B 02 F6 | 	mov	local03, local02
0d7b4     13 28 46 F7 | 	zerox	local02, #19
0d7b8     14 2A 46 F0 | 	shr	local03, #20
0d7bc     02 2A 66 F0 | 	shl	local03, #2
0d7c0     ED 2A 02 F1 | 	add	local03, __methods__
0d7c4     15 2B 02 FB | 	rdlong	local03, local03
0d7c8     43 00 00 FF 
0d7cc     60 E4 85 F1 | 	sub	objptr, ##34400
0d7d0     F2 2C 02 F6 | 	mov	local04, objptr
0d7d4     14 E5 01 F6 | 	mov	objptr, local02
0d7d8     2D 2A 62 FD | 	call	local03
0d7dc     16 E5 01 F6 | 	mov	objptr, local04
0d7e0     4A 00 00 FF 
0d7e4     80 E4 05 F1 | 	add	objptr, ##38016
0d7e8     F2 2C 02 FB | 	rdlong	local04, objptr
0d7ec     01 2C 06 F1 | 	add	local04, #1
0d7f0     F2 2C 62 FC | 	wrlong	local04, objptr
0d7f4     4A 00 00 FF 
0d7f8     80 E4 85 F1 | 	sub	objptr, ##38016
0d7fc     4C FF 9F FD | 	jmp	#LR__1070
0d800                 | LR__1071
0d800                 | ' return runptr2
0d800     50 00 00 FF 
0d804     BC E4 05 F1 | 	add	objptr, ##41148
0d808     F2 FA 01 FB | 	rdlong	result1, objptr
0d80c     50 00 00 FF 
0d810     BC E4 85 F1 | 	sub	objptr, ##41148
0d814     A7 F0 03 F6 | 	mov	ptra, fp
0d818     B2 00 A0 FD | 	call	#popregs_
0d81c                 | _execute_line_ret
0d81c     2D 00 64 FD | 	ret
0d820                 | 
0d820                 | ' 
0d820                 | ' 
0d820                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d820                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d820                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d820                 | ' 
0d820                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d820                 | ' 
0d820                 | ' function pop() as expr_result
0d820                 | _pop
0d820                 | ' if stackpointer=0 then
0d820     43 00 00 FF 
0d824     58 E4 05 F1 | 	add	objptr, ##34392
0d828     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d82c     43 00 00 FF 
0d830     58 E4 85 F1 | 	sub	objptr, ##34392
0d834     FF 04 06 A6 |  if_e	mov	_var03, #255
0d838     18 00 06 A6 |  if_e	mov	_var01, #24
0d83c     68 00 90 AD |  if_e	jmp	#LR__1080
0d840     43 00 00 FF 
0d844     58 E4 05 F1 | 	add	objptr, ##34392
0d848     F2 FA 01 FB | 	rdlong	result1, objptr
0d84c     01 FA 85 F1 | 	sub	result1, #1
0d850     F2 FA 61 FC | 	wrlong	result1, objptr
0d854     FD FE 01 F6 | 	mov	result3, result1
0d858     01 FE 65 F0 | 	shl	result3, #1
0d85c     FD FE 01 F1 | 	add	result3, result1
0d860     02 FE 65 F0 | 	shl	result3, #2
0d864     0C 00 00 FF 
0d868     0C E4 85 F1 | 	sub	objptr, ##6156
0d86c     F2 FE 01 F1 | 	add	result3, objptr
0d870     FF 00 02 FB | 	rdlong	_var01, result3
0d874     04 FE 05 F1 | 	add	result3, #4
0d878     FF FE 01 FB | 	rdlong	result3, result3
0d87c     FD FC 01 F6 | 	mov	result2, result1
0d880     01 FC 65 F0 | 	shl	result2, #1
0d884     FD FC 01 F1 | 	add	result2, result1
0d888     02 FC 65 F0 | 	shl	result2, #2
0d88c     F2 FC 01 F1 | 	add	result2, objptr
0d890     08 FC 05 F1 | 	add	result2, #8
0d894     FE FA 01 FB | 	rdlong	result1, result2
0d898     FF 02 02 F6 | 	mov	_var02, result3
0d89c     FD 04 02 F6 | 	mov	_var03, result1
0d8a0     37 00 00 FF 
0d8a4     4C E4 85 F1 | 	sub	objptr, ##28236
0d8a8                 | LR__1080
0d8a8                 | ' return t1
0d8a8     01 FD 01 F6 | 	mov	result2, _var02
0d8ac     02 FF 01 F6 | 	mov	result3, _var03
0d8b0     00 FB 01 F6 | 	mov	result1, _var01
0d8b4                 | _pop_ret
0d8b4     2D 00 64 FD | 	ret
0d8b8                 | 
0d8b8                 | ' 
0d8b8                 | ' sub push(t1 as expr_result )
0d8b8                 | _push
0d8b8                 | ' if stackpointer<maxstack then 
0d8b8     43 00 00 FF 
0d8bc     58 E4 05 F1 | 	add	objptr, ##34392
0d8c0     F2 00 02 FB | 	rdlong	_var01, objptr
0d8c4     43 00 00 FF 
0d8c8     58 E4 85 F1 | 	sub	objptr, ##34392
0d8cc     01 00 00 FF 
0d8d0     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d8d4     BC 00 90 3D |  if_ae	jmp	#LR__1090
0d8d8     09 01 02 FB | 	rdlong	_var01, arg01
0d8dc     04 12 06 F1 | 	add	arg01, #4
0d8e0     09 03 02 FB | 	rdlong	_var02, arg01
0d8e4     04 12 06 F1 | 	add	arg01, #4
0d8e8     09 13 02 FB | 	rdlong	arg01, arg01
0d8ec     43 00 00 FF 
0d8f0     58 E4 05 F1 | 	add	objptr, ##34392
0d8f4     F2 04 02 FB | 	rdlong	_var03, objptr
0d8f8     02 07 02 F6 | 	mov	_var04, _var03
0d8fc     01 06 66 F0 | 	shl	_var04, #1
0d900     02 07 02 F1 | 	add	_var04, _var03
0d904     02 06 66 F0 | 	shl	_var04, #2
0d908     0C 00 00 FF 
0d90c     0C E4 85 F1 | 	sub	objptr, ##6156
0d910     F2 06 02 F1 | 	add	_var04, objptr
0d914     03 01 62 FC | 	wrlong	_var01, _var04
0d918     0C 00 00 FF 
0d91c     0C E4 05 F1 | 	add	objptr, ##6156
0d920     F2 06 02 FB | 	rdlong	_var04, objptr
0d924     03 05 02 F6 | 	mov	_var03, _var04
0d928     01 04 66 F0 | 	shl	_var03, #1
0d92c     03 05 02 F1 | 	add	_var03, _var04
0d930     02 04 66 F0 | 	shl	_var03, #2
0d934     0C 00 00 FF 
0d938     0C E4 85 F1 | 	sub	objptr, ##6156
0d93c     F2 04 02 F1 | 	add	_var03, objptr
0d940     04 04 06 F1 | 	add	_var03, #4
0d944     02 03 62 FC | 	wrlong	_var02, _var03
0d948     0C 00 00 FF 
0d94c     0C E4 05 F1 | 	add	objptr, ##6156
0d950     F2 06 02 FB | 	rdlong	_var04, objptr
0d954     03 05 02 F6 | 	mov	_var03, _var04
0d958     01 04 66 F0 | 	shl	_var03, #1
0d95c     03 05 02 F1 | 	add	_var03, _var04
0d960     02 04 66 F0 | 	shl	_var03, #2
0d964     0C 00 00 FF 
0d968     0C E4 85 F1 | 	sub	objptr, ##6156
0d96c     F2 04 02 F1 | 	add	_var03, objptr
0d970     08 04 06 F1 | 	add	_var03, #8
0d974     02 13 62 FC | 	wrlong	arg01, _var03
0d978     0C 00 00 FF 
0d97c     0C E4 05 F1 | 	add	objptr, ##6156
0d980     F2 00 02 FB | 	rdlong	_var01, objptr
0d984     01 00 06 F1 | 	add	_var01, #1
0d988     F2 00 62 FC | 	wrlong	_var01, objptr
0d98c     43 00 00 FF 
0d990     58 E4 85 F1 | 	sub	objptr, ##34392
0d994                 | LR__1090
0d994                 | _push_ret
0d994     2D 00 64 FD | 	ret
0d998                 | 
0d998                 | ' 
0d998                 | ' ' -------------------------------- Runtime converting functions
0d998                 | ' 
0d998                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d998                 | ' 
0d998                 | ' function  convertstring(psaddr as ulong) as string
0d998                 | _convertstring
0d998     04 4A 05 F6 | 	mov	COUNT_, #4
0d99c     A8 00 A0 FD | 	call	#pushregs_
0d9a0     09 27 02 F6 | 	mov	local01, arg01
0d9a4     24 6A B1 FD | 	call	#_pslpeek
0d9a8     FD 28 02 F6 | 	mov	local02, result1
0d9ac     BF 01 00 FF 
0d9b0     57 2A 06 F6 | 	mov	local03, ##@LR__5988
0d9b4                 | ' l=pslpeek(psaddr) 
0d9b4                 | ' s="" 
0d9b4                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d9b4     01 2C 06 F6 | 	mov	local04, #1
0d9b8     01 28 06 F1 | 	add	local02, #1
0d9bc                 | LR__1100
0d9bc     14 2D 52 F2 | 	cmps	local04, local02 wc
0d9c0     30 00 90 3D |  if_ae	jmp	#LR__1101
0d9c4     13 13 02 F6 | 	mov	arg01, local01
0d9c8     03 12 06 F1 | 	add	arg01, #3
0d9cc     16 13 02 F1 | 	add	arg01, local04
0d9d0     A0 69 B1 FD | 	call	#_pspeek
0d9d4     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d9d8     C4 C3 B1 FD | 	call	#__system__Chr_S
0d9dc     FD 14 02 F6 | 	mov	arg02, result1
0d9e0     15 13 02 F6 | 	mov	arg01, local03
0d9e4     D0 A1 B1 FD | 	call	#__system___string_concat
0d9e8     FD 2A 02 F6 | 	mov	local03, result1
0d9ec     01 2C 06 F1 | 	add	local04, #1
0d9f0     C8 FF 9F FD | 	jmp	#LR__1100
0d9f4                 | LR__1101
0d9f4                 | ' return s
0d9f4     15 FB 01 F6 | 	mov	result1, local03
0d9f8     A7 F0 03 F6 | 	mov	ptra, fp
0d9fc     B2 00 A0 FD | 	call	#popregs_
0da00                 | _convertstring_ret
0da00     2D 00 64 FD | 	ret
0da04                 | 
0da04                 | ' 
0da04                 | ' ' converts a variable to an integer
0da04                 | ' 
0da04                 | ' function converttoint (t1 as expr_result) as integer 
0da04                 | _converttoint
0da04     02 4A 05 F6 | 	mov	COUNT_, #2
0da08     A8 00 A0 FD | 	call	#pushregs_
0da0c     09 27 02 F6 | 	mov	local01, arg01
0da10                 | ' 
0da10                 | ' select case t1.result_type
0da10     08 26 06 F1 | 	add	local01, #8
0da14     13 29 02 FB | 	rdlong	local02, local01
0da18     08 26 86 F1 | 	sub	local01, #8
0da1c     1C 28 0E F2 | 	cmp	local02, #28 wz
0da20     2C 00 90 AD |  if_e	jmp	#LR__1110
0da24     1D 28 0E F2 | 	cmp	local02, #29 wz
0da28     2C 00 90 AD |  if_e	jmp	#LR__1111
0da2c     1E 28 0E F2 | 	cmp	local02, #30 wz
0da30     2C 00 90 AD |  if_e	jmp	#LR__1112
0da34     1F 28 0E F2 | 	cmp	local02, #31 wz
0da38     34 00 90 AD |  if_e	jmp	#LR__1113
0da3c     2B 28 0E F2 | 	cmp	local02, #43 wz
0da40     44 00 90 AD |  if_e	jmp	#LR__1114
0da44     2C 28 0E F2 | 	cmp	local02, #44 wz
0da48     5C 00 90 AD |  if_e	jmp	#LR__1115
0da4c     60 00 90 FD | 	jmp	#LR__1116
0da50                 | LR__1110
0da50     13 FB 01 FB | 	rdlong	result1, local01
0da54     5C 00 90 FD | 	jmp	#LR__1117
0da58                 | LR__1111
0da58     13 FB 01 FB | 	rdlong	result1, local01
0da5c     54 00 90 FD | 	jmp	#LR__1117
0da60                 | LR__1112
0da60     13 13 02 FB | 	rdlong	arg01, local01
0da64     01 14 06 F6 | 	mov	arg02, #1
0da68     34 D4 B1 FD | 	call	#__system___float_tointeger
0da6c     44 00 90 FD | 	jmp	#LR__1117
0da70                 | LR__1113
0da70     13 13 02 FB | 	rdlong	arg01, local01
0da74     70 D7 B1 FD | 	call	#__system____builtin_atof
0da78     FD 12 02 F6 | 	mov	arg01, result1
0da7c     01 14 06 F6 | 	mov	arg02, #1
0da80     1C D4 B1 FD | 	call	#__system___float_tointeger
0da84     2C 00 90 FD | 	jmp	#LR__1117
0da88                 | LR__1114
0da88     13 13 02 FB | 	rdlong	arg01, local01
0da8c     08 FF BF FD | 	call	#_convertstring
0da90     FD 12 02 F6 | 	mov	arg01, result1
0da94     50 D7 B1 FD | 	call	#__system____builtin_atof
0da98     FD 12 02 F6 | 	mov	arg01, result1
0da9c     01 14 06 F6 | 	mov	arg02, #1
0daa0     FC D3 B1 FD | 	call	#__system___float_tointeger
0daa4     0C 00 90 FD | 	jmp	#LR__1117
0daa8                 | LR__1115
0daa8     13 FB 01 FB | 	rdlong	result1, local01
0daac     04 00 90 FD | 	jmp	#LR__1117
0dab0                 | LR__1116
0dab0     00 FA 05 F6 | 	mov	result1, #0
0dab4                 | LR__1117
0dab4     A7 F0 03 F6 | 	mov	ptra, fp
0dab8     B2 00 A0 FD | 	call	#popregs_
0dabc                 | _converttoint_ret
0dabc     2D 00 64 FD | 	ret
0dac0                 | 
0dac0                 | ' 
0dac0                 | ' ' converts a variable to float
0dac0                 | ' 
0dac0                 | ' function converttofloat (t1 as expr_result) as single
0dac0                 | _converttofloat
0dac0     03 4A 05 F6 | 	mov	COUNT_, #3
0dac4     A8 00 A0 FD | 	call	#pushregs_
0dac8     09 27 02 F6 | 	mov	local01, arg01
0dacc                 | ' 
0dacc                 | ' select case t1.result_type
0dacc     08 26 06 F1 | 	add	local01, #8
0dad0     13 29 02 FB | 	rdlong	local02, local01
0dad4     08 26 86 F1 | 	sub	local01, #8
0dad8     1C 28 0E F2 | 	cmp	local02, #28 wz
0dadc     24 00 90 AD |  if_e	jmp	#LR__1120
0dae0     1D 28 0E F2 | 	cmp	local02, #29 wz
0dae4     38 00 90 AD |  if_e	jmp	#LR__1121
0dae8     1E 28 0E F2 | 	cmp	local02, #30 wz
0daec     3C 00 90 AD |  if_e	jmp	#LR__1122
0daf0     1F 28 0E F2 | 	cmp	local02, #31 wz
0daf4     3C 00 90 AD |  if_e	jmp	#LR__1123
0daf8     2B 28 0E F2 | 	cmp	local02, #43 wz
0dafc     40 00 90 AD |  if_e	jmp	#LR__1124
0db00     50 00 90 FD | 	jmp	#LR__1125
0db04                 | LR__1120
0db04     13 13 02 FB | 	rdlong	arg01, local01
0db08     09 13 52 F6 | 	abs	arg01, arg01 wc
0db0c     1F 2A C6 C9 |  if_b	decod	local03, #31
0db10     00 2A 06 36 |  if_ae	mov	local03, #0
0db14     BC CA B1 FD | 	call	#__system___float_fromuns
0db18     15 FB 61 F5 | 	xor	result1, local03
0db1c     38 00 90 FD | 	jmp	#LR__1126
0db20                 | LR__1121
0db20     13 13 02 FB | 	rdlong	arg01, local01
0db24     AC CA B1 FD | 	call	#__system___float_fromuns
0db28     2C 00 90 FD | 	jmp	#LR__1126
0db2c                 | LR__1122
0db2c     13 FB 01 FB | 	rdlong	result1, local01
0db30     24 00 90 FD | 	jmp	#LR__1126
0db34                 | LR__1123
0db34     13 13 02 FB | 	rdlong	arg01, local01
0db38     AC D6 B1 FD | 	call	#__system____builtin_atof
0db3c     18 00 90 FD | 	jmp	#LR__1126
0db40                 | LR__1124
0db40     13 13 02 FB | 	rdlong	arg01, local01
0db44     50 FE BF FD | 	call	#_convertstring
0db48     FD 12 02 F6 | 	mov	arg01, result1
0db4c     98 D6 B1 FD | 	call	#__system____builtin_atof
0db50     04 00 90 FD | 	jmp	#LR__1126
0db54                 | LR__1125
0db54     00 FA 05 F6 | 	mov	result1, #0
0db58                 | LR__1126
0db58     A7 F0 03 F6 | 	mov	ptra, fp
0db5c     B2 00 A0 FD | 	call	#popregs_
0db60                 | _converttofloat_ret
0db60     2D 00 64 FD | 	ret
0db64                 | 
0db64                 | ' 
0db64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0db64                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0db64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0db64                 | ' 
0db64                 | ' 
0db64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0db64                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0db64                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0db64                 | ' 
0db64                 | ' '-------------------- abs
0db64                 | ' 
0db64                 | ' sub do_abs
0db64                 | _do_abs
0db64     01 4A 05 F6 | 	mov	COUNT_, #1
0db68     A8 00 A0 FD | 	call	#pushregs_
0db6c     0C F0 07 F1 | 	add	ptra, #12
0db70     AC FC BF FD | 	call	#_pop
0db74     FF 26 02 F6 | 	mov	local01, result3
0db78     A7 FA 61 FC | 	wrlong	result1, fp
0db7c     04 4E 05 F1 | 	add	fp, #4
0db80     A7 FC 61 FC | 	wrlong	result2, fp
0db84     04 4E 05 F1 | 	add	fp, #4
0db88     A7 26 62 FC | 	wrlong	local01, fp
0db8c                 | ' 
0db8c                 | ' t1=pop()
0db8c                 | ' if t1.result_type=result_int then 
0db8c     08 4E 85 F1 | 	sub	fp, #8
0db90     1C 26 0E F2 | 	cmp	local01, #28 wz
0db94     A7 12 02 AB |  if_e	rdlong	arg01, fp
0db98     09 27 42 A6 |  if_e	abs	local01, arg01
0db9c     A7 26 62 AC |  if_e	wrlong	local01, fp
0dba0     2C 00 90 AD |  if_e	jmp	#LR__1130
0dba4     08 4E 05 F1 | 	add	fp, #8
0dba8     A7 26 02 FB | 	rdlong	local01, fp
0dbac     08 4E 85 F1 | 	sub	fp, #8
0dbb0     1E 26 0E F2 | 	cmp	local01, #30 wz
0dbb4     A7 FA 01 AB |  if_e	rdlong	result1, fp
0dbb8     1F FA 05 A4 |  if_e	bitl	result1, #31
0dbbc     A7 FA 61 AC |  if_e	wrlong	result1, fp
0dbc0     08 4E 05 51 |  if_ne	add	fp, #8
0dbc4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0dbc8     08 4E 85 51 |  if_ne	sub	fp, #8
0dbcc     A7 50 68 5C |  if_ne	wrlong	#40, fp
0dbd0                 | LR__1130
0dbd0     A7 12 02 F6 | 	mov	arg01, fp
0dbd4     E0 FC BF FD | 	call	#_push
0dbd8     A7 F0 03 F6 | 	mov	ptra, fp
0dbdc     B2 00 A0 FD | 	call	#popregs_
0dbe0                 | _do_abs_ret
0dbe0     2D 00 64 FD | 	ret
0dbe4                 | 
0dbe4                 | ' 
0dbe4                 | ' '-------------------- acos
0dbe4                 | ' 
0dbe4                 | ' sub do_acos
0dbe4                 | _do_acos
0dbe4     01 4A 05 F6 | 	mov	COUNT_, #1
0dbe8     A8 00 A0 FD | 	call	#pushregs_
0dbec     10 F0 07 F1 | 	add	ptra, #16
0dbf0     4A 00 00 FF 
0dbf4     80 E4 05 F1 | 	add	objptr, ##38016
0dbf8     F2 26 02 FB | 	rdlong	local01, objptr
0dbfc     13 17 02 F6 | 	mov	arg03, local01
0dc00     01 16 66 F0 | 	shl	arg03, #1
0dc04     13 17 02 F1 | 	add	arg03, local01
0dc08     02 16 66 F0 | 	shl	arg03, #2
0dc0c     03 00 00 FF 
0dc10     04 E4 85 F1 | 	sub	objptr, ##1540
0dc14     F2 16 02 F1 | 	add	arg03, objptr
0dc18     0B 17 02 FB | 	rdlong	arg03, arg03
0dc1c     0C 4E 05 F1 | 	add	fp, #12
0dc20     A7 16 62 FC | 	wrlong	arg03, fp
0dc24                 | ' 
0dc24                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc24                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0dc24     0C 4E 85 F1 | 	sub	fp, #12
0dc28     02 16 16 F2 | 	cmp	arg03, #2 wc
0dc2c     47 00 00 FF 
0dc30     7C E4 85 F1 | 	sub	objptr, ##36476
0dc34     0C 4E 05 C1 |  if_b	add	fp, #12
0dc38     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dc3c     0C 4E 85 C1 |  if_b	sub	fp, #12
0dc40     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dc44     00 12 06 F6 | 	mov	arg01, #0
0dc48     C0 FB B1 FD | 	call	#__system___getiolock_0620
0dc4c     FD 12 02 F6 | 	mov	arg01, result1
0dc50     08 9F B1 FD | 	call	#__system___lockmem
0dc54     BF 01 00 FF 
0dc58     58 14 06 F6 | 	mov	arg02, ##@LR__5989
0dc5c     00 12 06 F6 | 	mov	arg01, #0
0dc60     00 16 06 F6 | 	mov	arg03, #0
0dc64     EC AB B1 FD | 	call	#__system___basic_print_string
0dc68     00 12 06 F6 | 	mov	arg01, #0
0dc6c     9C FB B1 FD | 	call	#__system___getiolock_0620
0dc70     FD 00 68 FC | 	wrlong	#0, result1
0dc74     27 12 06 F6 | 	mov	arg01, #39
0dc78     00 14 06 F6 | 	mov	arg02, #0
0dc7c     7C 64 B1 FD | 	call	#_printerror
0dc80     64 00 90 FD | 	jmp	#LR__1141
0dc84                 | LR__1140
0dc84     98 FB BF FD | 	call	#_pop
0dc88     FF 26 02 F6 | 	mov	local01, result3
0dc8c     A7 FA 61 FC | 	wrlong	result1, fp
0dc90     04 4E 05 F1 | 	add	fp, #4
0dc94     A7 FC 61 FC | 	wrlong	result2, fp
0dc98     04 4E 05 F1 | 	add	fp, #4
0dc9c     A7 26 62 FC | 	wrlong	local01, fp
0dca0     08 4E 85 F1 | 	sub	fp, #8
0dca4     A7 12 02 F6 | 	mov	arg01, fp
0dca8     14 FE BF FD | 	call	#_converttofloat
0dcac     FD 12 02 F6 | 	mov	arg01, result1
0dcb0     68 D8 B1 FD | 	call	#__system____builtin_acosf
0dcb4     FD 12 02 F6 | 	mov	arg01, result1
0dcb8     52 00 00 FF 
0dcbc     E4 E4 05 F1 | 	add	objptr, ##42212
0dcc0     F2 14 02 FB | 	rdlong	arg02, objptr
0dcc4     52 00 00 FF 
0dcc8     E4 E4 85 F1 | 	sub	objptr, ##42212
0dccc     08 CD B1 FD | 	call	#__system___float_mul
0dcd0     A7 FA 61 FC | 	wrlong	result1, fp
0dcd4     08 4E 05 F1 | 	add	fp, #8
0dcd8     A7 3C 68 FC | 	wrlong	#30, fp
0dcdc     08 4E 85 F1 | 	sub	fp, #8
0dce0     A7 12 02 F6 | 	mov	arg01, fp
0dce4     D0 FB BF FD | 	call	#_push
0dce8                 | LR__1141
0dce8     A7 F0 03 F6 | 	mov	ptra, fp
0dcec     B2 00 A0 FD | 	call	#popregs_
0dcf0                 | _do_acos_ret
0dcf0     2D 00 64 FD | 	ret
0dcf4                 | 
0dcf4                 | ' 
0dcf4                 | ' '-------------------- asc
0dcf4                 | ' 
0dcf4                 | ' sub do_asc
0dcf4                 | _do_asc
0dcf4     01 4A 05 F6 | 	mov	COUNT_, #1
0dcf8     A8 00 A0 FD | 	call	#pushregs_
0dcfc     14 F0 07 F1 | 	add	ptra, #20
0dd00     4A 00 00 FF 
0dd04     80 E4 05 F1 | 	add	objptr, ##38016
0dd08     F2 26 02 FB | 	rdlong	local01, objptr
0dd0c     13 17 02 F6 | 	mov	arg03, local01
0dd10     01 16 66 F0 | 	shl	arg03, #1
0dd14     13 17 02 F1 | 	add	arg03, local01
0dd18     02 16 66 F0 | 	shl	arg03, #2
0dd1c     03 00 00 FF 
0dd20     04 E4 85 F1 | 	sub	objptr, ##1540
0dd24     F2 16 02 F1 | 	add	arg03, objptr
0dd28     0B 17 02 FB | 	rdlong	arg03, arg03
0dd2c     0C 4E 05 F1 | 	add	fp, #12
0dd30     A7 16 62 FC | 	wrlong	arg03, fp
0dd34                 | ' 
0dd34                 | ' numpar=compiledline(lineptr_e).result.uresult
0dd34                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0dd34     0C 4E 85 F1 | 	sub	fp, #12
0dd38     02 16 16 F2 | 	cmp	arg03, #2 wc
0dd3c     47 00 00 FF 
0dd40     7C E4 85 F1 | 	sub	objptr, ##36476
0dd44     0C 4E 05 C1 |  if_b	add	fp, #12
0dd48     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dd4c     0C 4E 85 C1 |  if_b	sub	fp, #12
0dd50     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dd54     00 12 06 F6 | 	mov	arg01, #0
0dd58     B0 FA B1 FD | 	call	#__system___getiolock_0620
0dd5c     FD 12 02 F6 | 	mov	arg01, result1
0dd60     F8 9D B1 FD | 	call	#__system___lockmem
0dd64     BF 01 00 FF 
0dd68     5F 14 06 F6 | 	mov	arg02, ##@LR__5990
0dd6c     00 12 06 F6 | 	mov	arg01, #0
0dd70     00 16 06 F6 | 	mov	arg03, #0
0dd74     DC AA B1 FD | 	call	#__system___basic_print_string
0dd78     00 12 06 F6 | 	mov	arg01, #0
0dd7c     8C FA B1 FD | 	call	#__system___getiolock_0620
0dd80     FD 00 68 FC | 	wrlong	#0, result1
0dd84     27 12 06 F6 | 	mov	arg01, #39
0dd88     00 14 06 F6 | 	mov	arg02, #0
0dd8c     6C 63 B1 FD | 	call	#_printerror
0dd90     B4 00 90 FD | 	jmp	#LR__1153
0dd94                 | LR__1150
0dd94     88 FA BF FD | 	call	#_pop
0dd98     FF 16 02 F6 | 	mov	arg03, result3
0dd9c     A7 FA 61 FC | 	wrlong	result1, fp
0dda0     04 4E 05 F1 | 	add	fp, #4
0dda4     A7 FC 61 FC | 	wrlong	result2, fp
0dda8     04 4E 05 F1 | 	add	fp, #4
0ddac     A7 16 62 FC | 	wrlong	arg03, fp
0ddb0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0ddb0     08 4E 85 F1 | 	sub	fp, #8
0ddb4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ddb8     18 00 90 5D |  if_ne	jmp	#LR__1151
0ddbc     A7 12 02 FB | 	rdlong	arg01, fp
0ddc0     D4 FB BF FD | 	call	#_convertstring
0ddc4     A7 FA 61 FC | 	wrlong	result1, fp
0ddc8     08 4E 05 F1 | 	add	fp, #8
0ddcc     A7 3E 68 FC | 	wrlong	#31, fp
0ddd0     08 4E 85 F1 | 	sub	fp, #8
0ddd4                 | LR__1151
0ddd4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0ddd4     08 4E 05 F1 | 	add	fp, #8
0ddd8     A7 16 02 FB | 	rdlong	arg03, fp
0dddc     08 4E 85 F1 | 	sub	fp, #8
0dde0     1F 16 0E F2 | 	cmp	arg03, #31 wz
0dde4     40 00 90 AD |  if_e	jmp	#LR__1152
0dde8     00 12 06 F6 | 	mov	arg01, #0
0ddec     1C FA B1 FD | 	call	#__system___getiolock_0620
0ddf0     FD 12 02 F6 | 	mov	arg01, result1
0ddf4     64 9D B1 FD | 	call	#__system___lockmem
0ddf8     BF 01 00 FF 
0ddfc     65 14 06 F6 | 	mov	arg02, ##@LR__5991
0de00     00 12 06 F6 | 	mov	arg01, #0
0de04     00 16 06 F6 | 	mov	arg03, #0
0de08     48 AA B1 FD | 	call	#__system___basic_print_string
0de0c     00 12 06 F6 | 	mov	arg01, #0
0de10     F8 F9 B1 FD | 	call	#__system___getiolock_0620
0de14     FD 00 68 FC | 	wrlong	#0, result1
0de18     0F 12 06 F6 | 	mov	arg01, #15
0de1c     00 14 06 F6 | 	mov	arg02, #0
0de20     D8 62 B1 FD | 	call	#_printerror
0de24     20 00 90 FD | 	jmp	#LR__1153
0de28                 | LR__1152
0de28     A7 26 02 FB | 	rdlong	local01, fp
0de2c     13 27 C2 FA | 	rdbyte	local01, local01
0de30     A7 26 62 FC | 	wrlong	local01, fp
0de34     08 4E 05 F1 | 	add	fp, #8
0de38     A7 38 68 FC | 	wrlong	#28, fp
0de3c     08 4E 85 F1 | 	sub	fp, #8
0de40     A7 12 02 F6 | 	mov	arg01, fp
0de44     70 FA BF FD | 	call	#_push
0de48                 | LR__1153
0de48     A7 F0 03 F6 | 	mov	ptra, fp
0de4c     B2 00 A0 FD | 	call	#popregs_
0de50                 | _do_asc_ret
0de50     2D 00 64 FD | 	ret
0de54                 | 
0de54                 | ' 
0de54                 | ' '-------------------- asin
0de54                 | ' 
0de54                 | ' sub do_asin
0de54                 | _do_asin
0de54     01 4A 05 F6 | 	mov	COUNT_, #1
0de58     A8 00 A0 FD | 	call	#pushregs_
0de5c     10 F0 07 F1 | 	add	ptra, #16
0de60     4A 00 00 FF 
0de64     80 E4 05 F1 | 	add	objptr, ##38016
0de68     F2 26 02 FB | 	rdlong	local01, objptr
0de6c     13 17 02 F6 | 	mov	arg03, local01
0de70     01 16 66 F0 | 	shl	arg03, #1
0de74     13 17 02 F1 | 	add	arg03, local01
0de78     02 16 66 F0 | 	shl	arg03, #2
0de7c     03 00 00 FF 
0de80     04 E4 85 F1 | 	sub	objptr, ##1540
0de84     F2 16 02 F1 | 	add	arg03, objptr
0de88     0B 17 02 FB | 	rdlong	arg03, arg03
0de8c     0C 4E 05 F1 | 	add	fp, #12
0de90     A7 16 62 FC | 	wrlong	arg03, fp
0de94                 | ' 
0de94                 | ' numpar=compiledline(lineptr_e).result.uresult
0de94                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0de94     0C 4E 85 F1 | 	sub	fp, #12
0de98     02 16 16 F2 | 	cmp	arg03, #2 wc
0de9c     47 00 00 FF 
0dea0     7C E4 85 F1 | 	sub	objptr, ##36476
0dea4     0C 4E 05 C1 |  if_b	add	fp, #12
0dea8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0deac     0C 4E 85 C1 |  if_b	sub	fp, #12
0deb0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0deb4     00 12 06 F6 | 	mov	arg01, #0
0deb8     50 F9 B1 FD | 	call	#__system___getiolock_0620
0debc     FD 12 02 F6 | 	mov	arg01, result1
0dec0     98 9C B1 FD | 	call	#__system___lockmem
0dec4     BF 01 00 FF 
0dec8     6B 14 06 F6 | 	mov	arg02, ##@LR__5992
0decc     00 12 06 F6 | 	mov	arg01, #0
0ded0     00 16 06 F6 | 	mov	arg03, #0
0ded4     7C A9 B1 FD | 	call	#__system___basic_print_string
0ded8     00 12 06 F6 | 	mov	arg01, #0
0dedc     2C F9 B1 FD | 	call	#__system___getiolock_0620
0dee0     FD 00 68 FC | 	wrlong	#0, result1
0dee4     27 12 06 F6 | 	mov	arg01, #39
0dee8     00 14 06 F6 | 	mov	arg02, #0
0deec     0C 62 B1 FD | 	call	#_printerror
0def0     64 00 90 FD | 	jmp	#LR__1161
0def4                 | LR__1160
0def4     28 F9 BF FD | 	call	#_pop
0def8     FF 26 02 F6 | 	mov	local01, result3
0defc     A7 FA 61 FC | 	wrlong	result1, fp
0df00     04 4E 05 F1 | 	add	fp, #4
0df04     A7 FC 61 FC | 	wrlong	result2, fp
0df08     04 4E 05 F1 | 	add	fp, #4
0df0c     A7 26 62 FC | 	wrlong	local01, fp
0df10     08 4E 85 F1 | 	sub	fp, #8
0df14     A7 12 02 F6 | 	mov	arg01, fp
0df18     A4 FB BF FD | 	call	#_converttofloat
0df1c     FD 12 02 F6 | 	mov	arg01, result1
0df20     AC D5 B1 FD | 	call	#__system____builtin_asinf
0df24     FD 12 02 F6 | 	mov	arg01, result1
0df28     52 00 00 FF 
0df2c     E4 E4 05 F1 | 	add	objptr, ##42212
0df30     F2 14 02 FB | 	rdlong	arg02, objptr
0df34     52 00 00 FF 
0df38     E4 E4 85 F1 | 	sub	objptr, ##42212
0df3c     98 CA B1 FD | 	call	#__system___float_mul
0df40     A7 FA 61 FC | 	wrlong	result1, fp
0df44     08 4E 05 F1 | 	add	fp, #8
0df48     A7 3C 68 FC | 	wrlong	#30, fp
0df4c     08 4E 85 F1 | 	sub	fp, #8
0df50     A7 12 02 F6 | 	mov	arg01, fp
0df54     60 F9 BF FD | 	call	#_push
0df58                 | LR__1161
0df58     A7 F0 03 F6 | 	mov	ptra, fp
0df5c     B2 00 A0 FD | 	call	#popregs_
0df60                 | _do_asin_ret
0df60     2D 00 64 FD | 	ret
0df64                 | 
0df64                 | ' 
0df64                 | ' '-------------------- atn
0df64                 | ' 
0df64                 | ' sub do_atn
0df64                 | _do_atn
0df64     01 4A 05 F6 | 	mov	COUNT_, #1
0df68     A8 00 A0 FD | 	call	#pushregs_
0df6c     10 F0 07 F1 | 	add	ptra, #16
0df70     4A 00 00 FF 
0df74     80 E4 05 F1 | 	add	objptr, ##38016
0df78     F2 26 02 FB | 	rdlong	local01, objptr
0df7c     13 17 02 F6 | 	mov	arg03, local01
0df80     01 16 66 F0 | 	shl	arg03, #1
0df84     13 17 02 F1 | 	add	arg03, local01
0df88     02 16 66 F0 | 	shl	arg03, #2
0df8c     03 00 00 FF 
0df90     04 E4 85 F1 | 	sub	objptr, ##1540
0df94     F2 16 02 F1 | 	add	arg03, objptr
0df98     0B 17 02 FB | 	rdlong	arg03, arg03
0df9c     0C 4E 05 F1 | 	add	fp, #12
0dfa0     A7 16 62 FC | 	wrlong	arg03, fp
0dfa4                 | ' 
0dfa4                 | ' numpar=compiledline(lineptr_e).result.uresult
0dfa4                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dfa4     0C 4E 85 F1 | 	sub	fp, #12
0dfa8     02 16 16 F2 | 	cmp	arg03, #2 wc
0dfac     47 00 00 FF 
0dfb0     7C E4 85 F1 | 	sub	objptr, ##36476
0dfb4     0C 4E 05 C1 |  if_b	add	fp, #12
0dfb8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dfbc     0C 4E 85 C1 |  if_b	sub	fp, #12
0dfc0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0dfc4     00 12 06 F6 | 	mov	arg01, #0
0dfc8     40 F8 B1 FD | 	call	#__system___getiolock_0620
0dfcc     FD 12 02 F6 | 	mov	arg01, result1
0dfd0     88 9B B1 FD | 	call	#__system___lockmem
0dfd4     BF 01 00 FF 
0dfd8     72 14 06 F6 | 	mov	arg02, ##@LR__5993
0dfdc     00 12 06 F6 | 	mov	arg01, #0
0dfe0     00 16 06 F6 | 	mov	arg03, #0
0dfe4     6C A8 B1 FD | 	call	#__system___basic_print_string
0dfe8     00 12 06 F6 | 	mov	arg01, #0
0dfec     1C F8 B1 FD | 	call	#__system___getiolock_0620
0dff0     FD 00 68 FC | 	wrlong	#0, result1
0dff4     27 12 06 F6 | 	mov	arg01, #39
0dff8     00 14 06 F6 | 	mov	arg02, #0
0dffc     FC 60 B1 FD | 	call	#_printerror
0e000     6C 00 90 FD | 	jmp	#LR__1171
0e004                 | LR__1170
0e004     18 F8 BF FD | 	call	#_pop
0e008     FF 26 02 F6 | 	mov	local01, result3
0e00c     A7 FA 61 FC | 	wrlong	result1, fp
0e010     04 4E 05 F1 | 	add	fp, #4
0e014     A7 FC 61 FC | 	wrlong	result2, fp
0e018     04 4E 05 F1 | 	add	fp, #4
0e01c     A7 26 62 FC | 	wrlong	local01, fp
0e020     08 4E 85 F1 | 	sub	fp, #8
0e024     A7 12 02 F6 | 	mov	arg01, fp
0e028     94 FA BF FD | 	call	#_converttofloat
0e02c     FD 12 02 F6 | 	mov	arg01, result1
0e030     00 C0 1F FF 
0e034     00 14 06 F6 | 	mov	arg02, ##1065353216
0e038     2C D5 B1 FD | 	call	#__system____builtin_atan2f
0e03c     FD 12 02 F6 | 	mov	arg01, result1
0e040     52 00 00 FF 
0e044     E4 E4 05 F1 | 	add	objptr, ##42212
0e048     F2 14 02 FB | 	rdlong	arg02, objptr
0e04c     52 00 00 FF 
0e050     E4 E4 85 F1 | 	sub	objptr, ##42212
0e054     80 C9 B1 FD | 	call	#__system___float_mul
0e058     A7 FA 61 FC | 	wrlong	result1, fp
0e05c     08 4E 05 F1 | 	add	fp, #8
0e060     A7 3C 68 FC | 	wrlong	#30, fp
0e064     08 4E 85 F1 | 	sub	fp, #8
0e068     A7 12 02 F6 | 	mov	arg01, fp
0e06c     48 F8 BF FD | 	call	#_push
0e070                 | LR__1171
0e070     A7 F0 03 F6 | 	mov	ptra, fp
0e074     B2 00 A0 FD | 	call	#popregs_
0e078                 | _do_atn_ret
0e078     2D 00 64 FD | 	ret
0e07c                 | 
0e07c                 | ' 
0e07c                 | ' '-------------------- beep
0e07c                 | ' 
0e07c                 | ' sub do_beep
0e07c                 | _do_beep
0e07c     02 4A 05 F6 | 	mov	COUNT_, #2
0e080     A8 00 A0 FD | 	call	#pushregs_
0e084     20 F0 07 F1 | 	add	ptra, #32
0e088     94 F7 BF FD | 	call	#_pop
0e08c     FD 26 02 F6 | 	mov	local01, result1
0e090     FE 1C 02 F6 | 	mov	arg06, result2
0e094     FF 28 02 F6 | 	mov	local02, result3
0e098     0C 4E 05 F1 | 	add	fp, #12
0e09c     A7 26 62 FC | 	wrlong	local01, fp
0e0a0     04 4E 05 F1 | 	add	fp, #4
0e0a4     A7 1C 62 FC | 	wrlong	arg06, fp
0e0a8     04 4E 05 F1 | 	add	fp, #4
0e0ac     A7 28 62 FC | 	wrlong	local02, fp
0e0b0     14 4E 85 F1 | 	sub	fp, #20
0e0b4     68 F7 BF FD | 	call	#_pop
0e0b8     A7 FA 61 FC | 	wrlong	result1, fp
0e0bc     04 4E 05 F1 | 	add	fp, #4
0e0c0     A7 FC 61 FC | 	wrlong	result2, fp
0e0c4     04 4E 05 F1 | 	add	fp, #4
0e0c8     A7 FE 61 FC | 	wrlong	result3, fp
0e0cc                 | ' 
0e0cc                 | ' t2=pop()
0e0cc                 | ' t1=pop()
0e0cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0e0cc     08 4E 85 F1 | 	sub	fp, #8
0e0d0     1C FE 0D F2 | 	cmp	result3, #28 wz
0e0d4     08 4E 05 51 |  if_ne	add	fp, #8
0e0d8     A7 28 02 5B |  if_ne	rdlong	local02, fp
0e0dc     08 4E 85 51 |  if_ne	sub	fp, #8
0e0e0     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0e0e4     A7 26 02 AB |  if_e	rdlong	local01, fp
0e0e8     18 4E 05 A1 |  if_e	add	fp, #24
0e0ec     A7 26 62 AC |  if_e	wrlong	local01, fp
0e0f0     18 4E 85 A1 |  if_e	sub	fp, #24
0e0f4     14 00 90 AD |  if_e	jmp	#LR__1180
0e0f8     A7 12 02 F6 | 	mov	arg01, fp
0e0fc     04 F9 BF FD | 	call	#_converttoint
0e100     18 4E 05 F1 | 	add	fp, #24
0e104     A7 FA 61 FC | 	wrlong	result1, fp
0e108     18 4E 85 F1 | 	sub	fp, #24
0e10c                 | LR__1180
0e10c     1C 4E 05 F1 | 	add	fp, #28
0e110     A7 FE 48 FC | 	wrbyte	#127, fp
0e114     01 4E 05 F1 | 	add	fp, #1
0e118     A7 00 49 FC | 	wrbyte	#128, fp
0e11c     01 4E 85 F1 | 	sub	fp, #1
0e120     A7 14 02 F6 | 	mov	arg02, fp
0e124     04 4E 85 F1 | 	sub	fp, #4
0e128     A7 16 02 FB | 	rdlong	arg03, fp
0e12c     18 4E 85 F1 | 	sub	fp, #24
0e130     01 16 66 F0 | 	shl	arg03, #1
0e134     07 12 06 F6 | 	mov	arg01, #7
0e138     0E 18 C6 F9 | 	decod	arg04, #14
0e13c     02 1A 06 F6 | 	mov	arg05, #2
0e140     00 1C 06 F6 | 	mov	arg06, #0
0e144     0B 00 00 FF 
0e148     CC E4 05 F1 | 	add	objptr, ##5836
0e14c     F8 95 B1 FD | 	call	#_audio096_spin2_play8
0e150     0B 00 00 FF 
0e154     CC E4 85 F1 | 	sub	objptr, ##5836
0e158     0C 4E 05 F1 | 	add	fp, #12
0e15c     A7 12 02 F6 | 	mov	arg01, fp
0e160     0C 4E 85 F1 | 	sub	fp, #12
0e164     50 F7 BF FD | 	call	#_push
0e168     E4 F3 B0 FD | 	call	#_do_waitms
0e16c     07 12 06 F6 | 	mov	arg01, #7
0e170     0B 00 00 FF 
0e174     CC E4 05 F1 | 	add	objptr, ##5836
0e178     70 96 B1 FD | 	call	#_audio096_spin2_stop
0e17c     0B 00 00 FF 
0e180     CC E4 85 F1 | 	sub	objptr, ##5836
0e184     A7 F0 03 F6 | 	mov	ptra, fp
0e188     B2 00 A0 FD | 	call	#popregs_
0e18c                 | _do_beep_ret
0e18c     2D 00 64 FD | 	ret
0e190                 | 
0e190                 | ' 
0e190                 | ' '-------------------- blit
0e190                 | ' 
0e190                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0e190                 | ' sub do_blit
0e190                 | _do_blit
0e190     02 4A 05 F6 | 	mov	COUNT_, #2
0e194     A8 00 A0 FD | 	call	#pushregs_
0e198     3C F0 07 F1 | 	add	ptra, #60
0e19c     4A 00 00 FF 
0e1a0     80 E4 05 F1 | 	add	objptr, ##38016
0e1a4     F2 26 02 FB | 	rdlong	local01, objptr
0e1a8     13 25 02 F6 | 	mov	arg10, local01
0e1ac     01 24 66 F0 | 	shl	arg10, #1
0e1b0     13 25 02 F1 | 	add	arg10, local01
0e1b4     02 24 66 F0 | 	shl	arg10, #2
0e1b8     03 00 00 FF 
0e1bc     04 E4 85 F1 | 	sub	objptr, ##1540
0e1c0     F2 24 02 F1 | 	add	arg10, objptr
0e1c4     12 25 02 FB | 	rdlong	arg10, arg10
0e1c8     38 4E 05 F1 | 	add	fp, #56
0e1cc     A7 24 62 FC | 	wrlong	arg10, fp
0e1d0                 | ' 
0e1d0                 | ' numpar=compiledline(lineptr_e).result.uresult
0e1d0                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0e1d0     38 4E 85 F1 | 	sub	fp, #56
0e1d4     0A 24 0E F2 | 	cmp	arg10, #10 wz
0e1d8     47 00 00 FF 
0e1dc     7C E4 85 F1 | 	sub	objptr, ##36476
0e1e0     38 4E 05 51 |  if_ne	add	fp, #56
0e1e4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e1e8     38 4E 85 51 |  if_ne	sub	fp, #56
0e1ec     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0e1f0     50 00 90 AD |  if_e	jmp	#LR__1190
0e1f4     00 12 06 F6 | 	mov	arg01, #0
0e1f8     10 F6 B1 FD | 	call	#__system___getiolock_0620
0e1fc     FD 12 02 F6 | 	mov	arg01, result1
0e200     58 99 B1 FD | 	call	#__system___lockmem
0e204     BF 01 00 FF 
0e208     78 14 06 F6 | 	mov	arg02, ##@LR__5994
0e20c     00 12 06 F6 | 	mov	arg01, #0
0e210     00 16 06 F6 | 	mov	arg03, #0
0e214     3C A6 B1 FD | 	call	#__system___basic_print_string
0e218     00 12 06 F6 | 	mov	arg01, #0
0e21c     EC F5 B1 FD | 	call	#__system___getiolock_0620
0e220     FD 00 68 FC | 	wrlong	#0, result1
0e224     50 00 00 FF 
0e228     F0 E4 05 F1 | 	add	objptr, ##41200
0e22c     F2 14 02 FB | 	rdlong	arg02, objptr
0e230     50 00 00 FF 
0e234     F0 E4 85 F1 | 	sub	objptr, ##41200
0e238     27 12 06 F6 | 	mov	arg01, #39
0e23c     BC 5E B1 FD | 	call	#_printerror
0e240     44 01 90 FD | 	jmp	#LR__1195
0e244                 | LR__1190
0e244                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e244     38 4E 05 F1 | 	add	fp, #56
0e248     A7 28 02 FB | 	rdlong	local02, fp
0e24c     01 28 86 F1 | 	sub	local02, #1
0e250     04 4E 85 F1 | 	sub	fp, #4
0e254     A7 28 62 FC | 	wrlong	local02, fp
0e258     34 4E 85 F1 | 	sub	fp, #52
0e25c                 | LR__1191
0e25c     38 4E 05 F1 | 	add	fp, #56
0e260     A7 26 02 FB | 	rdlong	local01, fp
0e264     01 26 86 F1 | 	sub	local01, #1
0e268     04 4E 85 F1 | 	sub	fp, #4
0e26c     A7 24 02 FB | 	rdlong	arg10, fp
0e270     34 4E 85 F1 | 	sub	fp, #52
0e274     13 25 1A F2 | 	cmp	arg10, local01 wcz
0e278     54 00 90 1D |  if_a	jmp	#LR__1192
0e27c     A0 F5 BF FD | 	call	#_pop
0e280     A7 FA 61 FC | 	wrlong	result1, fp
0e284     04 4E 05 F1 | 	add	fp, #4
0e288     A7 FC 61 FC | 	wrlong	result2, fp
0e28c     04 4E 05 F1 | 	add	fp, #4
0e290     A7 FE 61 FC | 	wrlong	result3, fp
0e294     2C 4E 05 F1 | 	add	fp, #44
0e298     A7 28 02 FB | 	rdlong	local02, fp
0e29c     02 28 66 F0 | 	shl	local02, #2
0e2a0     28 4E 85 F1 | 	sub	fp, #40
0e2a4     A7 28 02 F1 | 	add	local02, fp
0e2a8     0C 4E 85 F1 | 	sub	fp, #12
0e2ac     A7 12 02 F6 | 	mov	arg01, fp
0e2b0     50 F7 BF FD | 	call	#_converttoint
0e2b4     14 FB 61 FC | 	wrlong	result1, local02
0e2b8     34 4E 05 F1 | 	add	fp, #52
0e2bc     A7 28 02 FB | 	rdlong	local02, fp
0e2c0     01 28 86 F1 | 	sub	local02, #1
0e2c4     A7 28 62 FC | 	wrlong	local02, fp
0e2c8     34 4E 85 F1 | 	sub	fp, #52
0e2cc     8C FF 9F FD | 	jmp	#LR__1191
0e2d0                 | LR__1192
0e2d0                 | ' if numpar=10 then 
0e2d0     38 4E 05 F1 | 	add	fp, #56
0e2d4     A7 28 02 FB | 	rdlong	local02, fp
0e2d8     38 4E 85 F1 | 	sub	fp, #56
0e2dc     0A 28 0E F2 | 	cmp	local02, #10 wz
0e2e0     5C 00 90 5D |  if_ne	jmp	#LR__1193
0e2e4     0C 4E 05 F1 | 	add	fp, #12
0e2e8     A7 12 02 FB | 	rdlong	arg01, fp
0e2ec     04 4E 05 F1 | 	add	fp, #4
0e2f0     A7 14 02 FB | 	rdlong	arg02, fp
0e2f4     04 4E 05 F1 | 	add	fp, #4
0e2f8     A7 16 02 FB | 	rdlong	arg03, fp
0e2fc     04 4E 05 F1 | 	add	fp, #4
0e300     A7 18 02 FB | 	rdlong	arg04, fp
0e304     04 4E 05 F1 | 	add	fp, #4
0e308     A7 1A 02 FB | 	rdlong	arg05, fp
0e30c     04 4E 05 F1 | 	add	fp, #4
0e310     A7 1C 02 FB | 	rdlong	arg06, fp
0e314     04 4E 05 F1 | 	add	fp, #4
0e318     A7 1E 02 FB | 	rdlong	arg07, fp
0e31c     04 4E 05 F1 | 	add	fp, #4
0e320     A7 20 02 FB | 	rdlong	arg08, fp
0e324     04 4E 05 F1 | 	add	fp, #4
0e328     A7 22 02 FB | 	rdlong	arg09, fp
0e32c     04 4E 05 F1 | 	add	fp, #4
0e330     A7 24 02 FB | 	rdlong	arg10, fp
0e334     30 4E 85 F1 | 	sub	fp, #48
0e338     D4 85 B1 FD | 	call	#_hg010b_spin2_blit
0e33c     48 00 90 FD | 	jmp	#LR__1194
0e340                 | LR__1193
0e340     F2 1E 02 FB | 	rdlong	arg07, objptr
0e344     0C 4E 05 F1 | 	add	fp, #12
0e348     A7 14 02 FB | 	rdlong	arg02, fp
0e34c     04 4E 05 F1 | 	add	fp, #4
0e350     A7 16 02 FB | 	rdlong	arg03, fp
0e354     04 4E 05 F1 | 	add	fp, #4
0e358     A7 18 02 FB | 	rdlong	arg04, fp
0e35c     04 4E 05 F1 | 	add	fp, #4
0e360     A7 1A 02 FB | 	rdlong	arg05, fp
0e364     04 4E 05 F1 | 	add	fp, #4
0e368     A7 20 02 FB | 	rdlong	arg08, fp
0e36c     04 4E 05 F1 | 	add	fp, #4
0e370     A7 22 02 FB | 	rdlong	arg09, fp
0e374     20 4E 85 F1 | 	sub	fp, #32
0e378     0F 13 02 F6 | 	mov	arg01, arg07
0e37c     0A 1C C6 F9 | 	decod	arg06, #10
0e380     0A 24 C6 F9 | 	decod	arg10, #10
0e384     88 85 B1 FD | 	call	#_hg010b_spin2_blit
0e388                 | LR__1194
0e388                 | LR__1195
0e388     A7 F0 03 F6 | 	mov	ptra, fp
0e38c     B2 00 A0 FD | 	call	#popregs_
0e390                 | _do_blit_ret
0e390     2D 00 64 FD | 	ret
0e394                 | 
0e394                 | ' 
0e394                 | ' 
0e394                 | ' '-------------------- bin$
0e394                 | ' 
0e394                 | ' sub do_bin
0e394                 | _do_bin
0e394     01 4A 05 F6 | 	mov	COUNT_, #1
0e398     A8 00 A0 FD | 	call	#pushregs_
0e39c     18 F0 07 F1 | 	add	ptra, #24
0e3a0     4A 00 00 FF 
0e3a4     80 E4 05 F1 | 	add	objptr, ##38016
0e3a8     F2 26 02 FB | 	rdlong	local01, objptr
0e3ac     13 17 02 F6 | 	mov	arg03, local01
0e3b0     01 16 66 F0 | 	shl	arg03, #1
0e3b4     13 17 02 F1 | 	add	arg03, local01
0e3b8     02 16 66 F0 | 	shl	arg03, #2
0e3bc     03 00 00 FF 
0e3c0     04 E4 85 F1 | 	sub	objptr, ##1540
0e3c4     F2 16 02 F1 | 	add	arg03, objptr
0e3c8     0B 17 02 FB | 	rdlong	arg03, arg03
0e3cc     0C 4E 05 F1 | 	add	fp, #12
0e3d0     A7 16 62 FC | 	wrlong	arg03, fp
0e3d4                 | ' 
0e3d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0e3d4                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e3d4     0C 4E 85 F1 | 	sub	fp, #12
0e3d8     03 16 16 F2 | 	cmp	arg03, #3 wc
0e3dc     47 00 00 FF 
0e3e0     7C E4 85 F1 | 	sub	objptr, ##36476
0e3e4     0C 4E 05 C1 |  if_b	add	fp, #12
0e3e8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e3ec     0C 4E 85 C1 |  if_b	sub	fp, #12
0e3f0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1200
0e3f4     00 12 06 F6 | 	mov	arg01, #0
0e3f8     10 F4 B1 FD | 	call	#__system___getiolock_0620
0e3fc     FD 12 02 F6 | 	mov	arg01, result1
0e400     58 97 B1 FD | 	call	#__system___lockmem
0e404     BF 01 00 FF 
0e408     7F 14 06 F6 | 	mov	arg02, ##@LR__5995
0e40c     00 12 06 F6 | 	mov	arg01, #0
0e410     00 16 06 F6 | 	mov	arg03, #0
0e414     3C A4 B1 FD | 	call	#__system___basic_print_string
0e418     00 12 06 F6 | 	mov	arg01, #0
0e41c     EC F3 B1 FD | 	call	#__system___getiolock_0620
0e420     FD 00 68 FC | 	wrlong	#0, result1
0e424     27 12 06 F6 | 	mov	arg01, #39
0e428     00 14 06 F6 | 	mov	arg02, #0
0e42c     CC 5C B1 FD | 	call	#_printerror
0e430     B8 00 90 FD | 	jmp	#LR__1203
0e434                 | LR__1200
0e434                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e434     0C 4E 05 F1 | 	add	fp, #12
0e438     A7 26 02 FB | 	rdlong	local01, fp
0e43c     0C 4E 85 F1 | 	sub	fp, #12
0e440     02 26 0E F2 | 	cmp	local01, #2 wz
0e444     38 00 90 5D |  if_ne	jmp	#LR__1201
0e448     D4 F3 BF FD | 	call	#_pop
0e44c     FF 26 02 F6 | 	mov	local01, result3
0e450     A7 FA 61 FC | 	wrlong	result1, fp
0e454     04 4E 05 F1 | 	add	fp, #4
0e458     A7 FC 61 FC | 	wrlong	result2, fp
0e45c     04 4E 05 F1 | 	add	fp, #4
0e460     A7 26 62 FC | 	wrlong	local01, fp
0e464     08 4E 85 F1 | 	sub	fp, #8
0e468     A7 12 02 F6 | 	mov	arg01, fp
0e46c     94 F5 BF FD | 	call	#_converttoint
0e470     14 4E 05 F1 | 	add	fp, #20
0e474     A7 FA 61 FC | 	wrlong	result1, fp
0e478     14 4E 85 F1 | 	sub	fp, #20
0e47c     0C 00 90 FD | 	jmp	#LR__1202
0e480                 | LR__1201
0e480     14 4E 05 F1 | 	add	fp, #20
0e484     A7 00 68 FC | 	wrlong	#0, fp
0e488     14 4E 85 F1 | 	sub	fp, #20
0e48c                 | LR__1202
0e48c     90 F3 BF FD | 	call	#_pop
0e490     FF 26 02 F6 | 	mov	local01, result3
0e494     A7 FA 61 FC | 	wrlong	result1, fp
0e498     04 4E 05 F1 | 	add	fp, #4
0e49c     A7 FC 61 FC | 	wrlong	result2, fp
0e4a0     04 4E 05 F1 | 	add	fp, #4
0e4a4     A7 26 62 FC | 	wrlong	local01, fp
0e4a8     08 4E 85 F1 | 	sub	fp, #8
0e4ac     A7 12 02 F6 | 	mov	arg01, fp
0e4b0     50 F5 BF FD | 	call	#_converttoint
0e4b4     10 4E 05 F1 | 	add	fp, #16
0e4b8     A7 FA 61 FC | 	wrlong	result1, fp
0e4bc     FD 12 02 F6 | 	mov	arg01, result1
0e4c0     04 4E 05 F1 | 	add	fp, #4
0e4c4     A7 14 02 FB | 	rdlong	arg02, fp
0e4c8     14 4E 85 F1 | 	sub	fp, #20
0e4cc     02 16 06 F6 | 	mov	arg03, #2
0e4d0     5C B9 B1 FD | 	call	#__system__Number_S
0e4d4     A7 FA 61 FC | 	wrlong	result1, fp
0e4d8     08 4E 05 F1 | 	add	fp, #8
0e4dc     A7 3E 68 FC | 	wrlong	#31, fp
0e4e0     08 4E 85 F1 | 	sub	fp, #8
0e4e4     A7 12 02 F6 | 	mov	arg01, fp
0e4e8     CC F3 BF FD | 	call	#_push
0e4ec                 | LR__1203
0e4ec     A7 F0 03 F6 | 	mov	ptra, fp
0e4f0     B2 00 A0 FD | 	call	#popregs_
0e4f4                 | _do_bin_ret
0e4f4     2D 00 64 FD | 	ret
0e4f8                 | 
0e4f8                 | ' 
0e4f8                 | ' '-------------------- box
0e4f8                 | ' 
0e4f8                 | ' sub do_box
0e4f8                 | _do_box
0e4f8     03 4A 05 F6 | 	mov	COUNT_, #3
0e4fc     A8 00 A0 FD | 	call	#pushregs_
0e500     30 F0 07 F1 | 	add	ptra, #48
0e504     18 F3 BF FD | 	call	#_pop
0e508     FD 1A 02 F6 | 	mov	arg05, result1
0e50c     FE 18 02 F6 | 	mov	arg04, result2
0e510     FF 16 02 F6 | 	mov	arg03, result3
0e514     24 4E 05 F1 | 	add	fp, #36
0e518     A7 1A 62 FC | 	wrlong	arg05, fp
0e51c     04 4E 05 F1 | 	add	fp, #4
0e520     A7 18 62 FC | 	wrlong	arg04, fp
0e524     04 4E 05 F1 | 	add	fp, #4
0e528     A7 16 62 FC | 	wrlong	arg03, fp
0e52c     2C 4E 85 F1 | 	sub	fp, #44
0e530     EC F2 BF FD | 	call	#_pop
0e534     FD 1A 02 F6 | 	mov	arg05, result1
0e538     FE 18 02 F6 | 	mov	arg04, result2
0e53c     FF 16 02 F6 | 	mov	arg03, result3
0e540     18 4E 05 F1 | 	add	fp, #24
0e544     A7 1A 62 FC | 	wrlong	arg05, fp
0e548     04 4E 05 F1 | 	add	fp, #4
0e54c     A7 18 62 FC | 	wrlong	arg04, fp
0e550     04 4E 05 F1 | 	add	fp, #4
0e554     A7 16 62 FC | 	wrlong	arg03, fp
0e558     20 4E 85 F1 | 	sub	fp, #32
0e55c     C0 F2 BF FD | 	call	#_pop
0e560     FD 1A 02 F6 | 	mov	arg05, result1
0e564     FE 18 02 F6 | 	mov	arg04, result2
0e568     FF 26 02 F6 | 	mov	local01, result3
0e56c     0C 4E 05 F1 | 	add	fp, #12
0e570     A7 1A 62 FC | 	wrlong	arg05, fp
0e574     04 4E 05 F1 | 	add	fp, #4
0e578     A7 18 62 FC | 	wrlong	arg04, fp
0e57c     04 4E 05 F1 | 	add	fp, #4
0e580     A7 26 62 FC | 	wrlong	local01, fp
0e584     14 4E 85 F1 | 	sub	fp, #20
0e588     94 F2 BF FD | 	call	#_pop
0e58c     A7 FA 61 FC | 	wrlong	result1, fp
0e590     04 4E 05 F1 | 	add	fp, #4
0e594     A7 FC 61 FC | 	wrlong	result2, fp
0e598     04 4E 05 F1 | 	add	fp, #4
0e59c     A7 FE 61 FC | 	wrlong	result3, fp
0e5a0                 | ' 
0e5a0                 | ' t4=pop()
0e5a0                 | ' t3=pop()
0e5a0                 | ' t2=pop()
0e5a0                 | ' t1=pop()
0e5a0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e5a0     FF 1A 02 F6 | 	mov	arg05, result3
0e5a4     08 4E 85 F1 | 	sub	fp, #8
0e5a8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e5ac     08 4E 05 51 |  if_ne	add	fp, #8
0e5b0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e5b4     08 4E 85 51 |  if_ne	sub	fp, #8
0e5b8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e5bc     A8 00 90 5D |  if_ne	jmp	#LR__1210
0e5c0     14 4E 05 F1 | 	add	fp, #20
0e5c4     A7 26 02 FB | 	rdlong	local01, fp
0e5c8     14 4E 85 F1 | 	sub	fp, #20
0e5cc     1C 26 0E F2 | 	cmp	local01, #28 wz
0e5d0     14 4E 05 51 |  if_ne	add	fp, #20
0e5d4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e5d8     14 4E 85 51 |  if_ne	sub	fp, #20
0e5dc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e5e0     84 00 90 5D |  if_ne	jmp	#LR__1210
0e5e4     20 4E 05 F1 | 	add	fp, #32
0e5e8     A7 26 02 FB | 	rdlong	local01, fp
0e5ec     20 4E 85 F1 | 	sub	fp, #32
0e5f0     1C 26 0E F2 | 	cmp	local01, #28 wz
0e5f4     20 4E 05 51 |  if_ne	add	fp, #32
0e5f8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e5fc     20 4E 85 51 |  if_ne	sub	fp, #32
0e600     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e604     60 00 90 5D |  if_ne	jmp	#LR__1210
0e608     2C 4E 05 F1 | 	add	fp, #44
0e60c     A7 26 02 FB | 	rdlong	local01, fp
0e610     2C 4E 85 F1 | 	sub	fp, #44
0e614     1C 26 0E F2 | 	cmp	local01, #28 wz
0e618     2C 4E 05 51 |  if_ne	add	fp, #44
0e61c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e620     2C 4E 85 51 |  if_ne	sub	fp, #44
0e624     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e628     3C 00 90 5D |  if_ne	jmp	#LR__1210
0e62c     A7 12 02 FB | 	rdlong	arg01, fp
0e630     0C 4E 05 F1 | 	add	fp, #12
0e634     A7 14 02 FB | 	rdlong	arg02, fp
0e638     0C 4E 05 F1 | 	add	fp, #12
0e63c     A7 16 02 FB | 	rdlong	arg03, fp
0e640     0C 4E 05 F1 | 	add	fp, #12
0e644     A7 18 02 FB | 	rdlong	arg04, fp
0e648     24 4E 85 F1 | 	sub	fp, #36
0e64c     37 00 00 FF 
0e650     28 E4 05 F1 | 	add	objptr, ##28200
0e654     F2 1A 02 FB | 	rdlong	arg05, objptr
0e658     37 00 00 FF 
0e65c     28 E4 85 F1 | 	sub	objptr, ##28200
0e660     60 75 B1 FD | 	call	#_hg010b_spin2_box
0e664                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e664     6C 00 90 FD | 	jmp	#LR__1211
0e668                 | LR__1210
0e668     A7 12 02 F6 | 	mov	arg01, fp
0e66c     94 F3 BF FD | 	call	#_converttoint
0e670     FD 28 02 F6 | 	mov	local02, result1
0e674     0C 4E 05 F1 | 	add	fp, #12
0e678     A7 12 02 F6 | 	mov	arg01, fp
0e67c     0C 4E 85 F1 | 	sub	fp, #12
0e680     80 F3 BF FD | 	call	#_converttoint
0e684     FD 2A 02 F6 | 	mov	local03, result1
0e688     18 4E 05 F1 | 	add	fp, #24
0e68c     A7 12 02 F6 | 	mov	arg01, fp
0e690     18 4E 85 F1 | 	sub	fp, #24
0e694     6C F3 BF FD | 	call	#_converttoint
0e698     FD 26 02 F6 | 	mov	local01, result1
0e69c     24 4E 05 F1 | 	add	fp, #36
0e6a0     A7 12 02 F6 | 	mov	arg01, fp
0e6a4     24 4E 85 F1 | 	sub	fp, #36
0e6a8     58 F3 BF FD | 	call	#_converttoint
0e6ac     FD 18 02 F6 | 	mov	arg04, result1
0e6b0     37 00 00 FF 
0e6b4     28 E4 05 F1 | 	add	objptr, ##28200
0e6b8     F2 1A 02 FB | 	rdlong	arg05, objptr
0e6bc     37 00 00 FF 
0e6c0     28 E4 85 F1 | 	sub	objptr, ##28200
0e6c4     14 13 02 F6 | 	mov	arg01, local02
0e6c8     15 15 02 F6 | 	mov	arg02, local03
0e6cc     13 17 02 F6 | 	mov	arg03, local01
0e6d0     F0 74 B1 FD | 	call	#_hg010b_spin2_box
0e6d4                 | LR__1211
0e6d4     A7 F0 03 F6 | 	mov	ptra, fp
0e6d8     B2 00 A0 FD | 	call	#popregs_
0e6dc                 | _do_box_ret
0e6dc     2D 00 64 FD | 	ret
0e6e0                 | 
0e6e0                 | ' 
0e6e0                 | ' '-------------------- brun
0e6e0                 | ' 
0e6e0                 | ' sub do_brun
0e6e0                 | _do_brun
0e6e0     08 4A 05 F6 | 	mov	COUNT_, #8
0e6e4     A8 00 A0 FD | 	call	#pushregs_
0e6e8     34 F1 BF FD | 	call	#_pop
0e6ec     FE 1A 02 F6 | 	mov	arg05, result2
0e6f0     FF 18 02 F6 | 	mov	arg04, result3
0e6f4     FD 26 02 F6 | 	mov	local01, result1
0e6f8     0D 29 02 F6 | 	mov	local02, arg05
0e6fc     0C 2B 02 F6 | 	mov	local03, arg04
0e700                 | ' 
0e700                 | ' t1=pop() 
0e700                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e700     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e704     10 00 90 5D |  if_ne	jmp	#LR__1220
0e708     13 13 02 F6 | 	mov	arg01, local01
0e70c     88 F2 BF FD | 	call	#_convertstring
0e710     FD 26 02 F6 | 	mov	local01, result1
0e714     1F 2A 06 F6 | 	mov	local03, #31
0e718                 | LR__1220
0e718                 | ' if t1.result_type=result_string then
0e718     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e71c     F0 01 90 5D |  if_ne	jmp	#LR__1224
0e720     13 2D 02 F6 | 	mov	local04, local01
0e724                 | '   filename=t1.result.sresult
0e724                 | '   if left$(filename,1)="/" then 
0e724     16 13 02 F6 | 	mov	arg01, local04
0e728     01 14 06 F6 | 	mov	arg02, #1
0e72c     AC B4 B1 FD | 	call	#__system__Left_S
0e730     FD 12 02 F6 | 	mov	arg01, result1
0e734     BF 01 00 FF 
0e738     86 14 06 F6 | 	mov	arg02, ##@LR__5996
0e73c     44 94 B1 FD | 	call	#__system___string_cmp
0e740     00 FA 0D F2 | 	cmp	result1, #0 wz
0e744     16 2F 02 A6 |  if_e	mov	local05, local04
0e748     14 00 90 AD |  if_e	jmp	#LR__1221
0e74c     BF 01 00 FF 
0e750     88 12 06 F6 | 	mov	arg01, ##@LR__5997
0e754     16 15 02 F6 | 	mov	arg02, local04
0e758     5C 94 B1 FD | 	call	#__system___string_concat
0e75c     FD 2E 02 F6 | 	mov	local05, result1
0e760                 | LR__1221
0e760                 | '   open fullfilename for input as #9
0e760     09 12 06 F6 | 	mov	arg01, #9
0e764     17 15 02 F6 | 	mov	arg02, local05
0e768     00 16 06 F6 | 	mov	arg03, #0
0e76c     F0 9F B1 FD | 	call	#__system___basic_open_string
0e770     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e774     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e778     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e77c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e780     FD 30 0A F6 | 	mov	local06, result1 wz
0e784                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e784     8C 00 90 AD |  if_e	jmp	#LR__1222
0e788     00 12 06 F6 | 	mov	arg01, #0
0e78c     7C F0 B1 FD | 	call	#__system___getiolock_0620
0e790     FD 12 02 F6 | 	mov	arg01, result1
0e794     C4 93 B1 FD | 	call	#__system___lockmem
0e798     BF 01 00 FF 
0e79c     91 14 06 F6 | 	mov	arg02, ##@LR__5998
0e7a0     00 12 06 F6 | 	mov	arg01, #0
0e7a4     00 16 06 F6 | 	mov	arg03, #0
0e7a8     A8 A0 B1 FD | 	call	#__system___basic_print_string
0e7ac     00 12 06 F6 | 	mov	arg01, #0
0e7b0     18 15 02 F6 | 	mov	arg02, local06
0e7b4     00 16 06 F6 | 	mov	arg03, #0
0e7b8     0A 18 06 F6 | 	mov	arg04, #10
0e7bc     D8 A0 B1 FD | 	call	#__system___basic_print_integer
0e7c0     BF 01 00 FF 
0e7c4     9F 14 06 F6 | 	mov	arg02, ##@LR__5999
0e7c8     00 12 06 F6 | 	mov	arg01, #0
0e7cc     00 16 06 F6 | 	mov	arg03, #0
0e7d0     80 A0 B1 FD | 	call	#__system___basic_print_string
0e7d4     18 13 02 F6 | 	mov	arg01, local06
0e7d8     10 BD B1 FD | 	call	#__system___strerror
0e7dc     FD 14 02 F6 | 	mov	arg02, result1
0e7e0     00 12 06 F6 | 	mov	arg01, #0
0e7e4     00 16 06 F6 | 	mov	arg03, #0
0e7e8     68 A0 B1 FD | 	call	#__system___basic_print_string
0e7ec     00 12 06 F6 | 	mov	arg01, #0
0e7f0     0A 14 06 F6 | 	mov	arg02, #10
0e7f4     00 16 06 F6 | 	mov	arg03, #0
0e7f8     00 A0 B1 FD | 	call	#__system___basic_print_char
0e7fc     00 12 06 F6 | 	mov	arg01, #0
0e800     08 F0 B1 FD | 	call	#__system___getiolock_0620
0e804     FD 00 68 FC | 	wrlong	#0, result1
0e808     09 12 06 F6 | 	mov	arg01, #9
0e80c     AC E6 B1 FD | 	call	#__system__close
0e810     FC 00 90 FD | 	jmp	#LR__1225
0e814                 | LR__1222
0e814     01 32 06 F6 | 	mov	local07, #1
0e818     00 34 06 F6 | 	mov	local08, #0
0e81c                 | '   do
0e81c                 | LR__1223
0e81c                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e81c     4E 00 00 FF 
0e820     B4 E4 05 F1 | 	add	objptr, ##40116
0e824     F2 16 02 F6 | 	mov	arg03, objptr
0e828     4E 00 00 FF 
0e82c     B4 E4 85 F1 | 	sub	objptr, ##40116
0e830     09 12 06 F6 | 	mov	arg01, #9
0e834     19 15 02 F6 | 	mov	arg02, local07
0e838     0A 18 C6 F9 | 	decod	arg04, #10
0e83c     01 1A 06 F6 | 	mov	arg05, #1
0e840     8C A1 B1 FD | 	call	#__system___basic_get
0e844     FD 30 02 F6 | 	mov	local06, result1
0e848     FD 32 02 F1 | 	add	local07, result1
0e84c     4E 00 00 FF 
0e850     B4 E4 05 F1 | 	add	objptr, ##40116
0e854     F2 12 02 F6 | 	mov	arg01, objptr
0e858     1A 15 02 F6 | 	mov	arg02, local08
0e85c     0A 16 C6 F9 | 	decod	arg03, #10
0e860     42 00 00 FF 
0e864     E8 E5 85 F1 | 	sub	objptr, ##34280
0e868     E8 86 B1 FD | 	call	#_psram_spin2_write
0e86c     0B 00 00 FF 
0e870     CC E4 85 F1 | 	sub	objptr, ##5836
0e874     18 35 02 F1 | 	add	local08, local06
0e878     02 00 00 FF 
0e87c     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e880     E0 03 00 AF 
0e884     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e888     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1223
0e88c     36 00 00 FF 
0e890     FC E5 05 F1 | 	add	objptr, ##28156
0e894     F2 12 02 FB | 	rdlong	arg01, objptr
0e898     03 12 62 FD | 	cogstop	arg01
0e89c     04 E4 05 F1 | 	add	objptr, #4
0e8a0     F2 12 02 FB | 	rdlong	arg01, objptr
0e8a4     03 12 62 FD | 	cogstop	arg01
0e8a8     04 E4 05 F1 | 	add	objptr, #4
0e8ac     F2 12 02 FB | 	rdlong	arg01, objptr
0e8b0     03 12 62 FD | 	cogstop	arg01
0e8b4     19 00 00 FF 
0e8b8     3C E5 05 F1 | 	add	objptr, ##13116
0e8bc     F2 12 02 FB | 	rdlong	arg01, objptr
0e8c0     03 12 62 FD | 	cogstop	arg01
0e8c4     18 00 00 FF 
0e8c8     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e8cc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e8d0     18 00 00 FF 
0e8d4     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e8d8     19 00 00 FF 
0e8dc     34 E5 85 F1 | 	sub	objptr, ##13108
0e8e0     1E 34 06 F6 | 	mov	local08, #30
0e8e4     28 E4 61 FD | 	setq	objptr
0e8e8     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e8ec     01 34 66 C6 |  if_b	neg	local08, #1
0e8f0     1B 00 00 FF 
0e8f4     48 E5 05 F1 | 	add	objptr, ##14152
0e8f8     F2 34 62 FC | 	wrlong	local08, objptr
0e8fc     52 00 00 FF 
0e900     54 E5 85 F1 | 	sub	objptr, ##42324
0e904     00 12 06 F6 | 	mov	arg01, #0
0e908     01 12 62 FD | 	cogid	arg01
0e90c     03 12 62 FD | 	cogstop	arg01
0e910                 | LR__1224
0e910                 | LR__1225
0e910     A7 F0 03 F6 | 	mov	ptra, fp
0e914     B2 00 A0 FD | 	call	#popregs_
0e918                 | _do_brun_ret
0e918     2D 00 64 FD | 	ret
0e91c                 | 
0e91c                 | ' 
0e91c                 | ' '-------------------- cd
0e91c                 | ' 
0e91c                 | ' sub do_cd
0e91c                 | _do_cd
0e91c     06 4A 05 F6 | 	mov	COUNT_, #6
0e920     A8 00 A0 FD | 	call	#pushregs_
0e924     BF 01 00 FF 
0e928     A2 12 06 F6 | 	mov	arg01, ##@LR__6000
0e92c     31 14 06 F6 | 	mov	arg02, #49
0e930     98 F0 B1 FD | 	call	#__system___basic_dir
0e934     E8 EE BF FD | 	call	#_pop
0e938     FE 18 02 F6 | 	mov	arg04, result2
0e93c     FF 16 02 F6 | 	mov	arg03, result3
0e940     FD 26 02 F6 | 	mov	local01, result1
0e944     0C 29 02 F6 | 	mov	local02, arg04
0e948     0B 2B 02 F6 | 	mov	local03, arg03
0e94c                 | ' t1=pop()
0e94c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e94c     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e950     10 00 90 5D |  if_ne	jmp	#LR__1230
0e954     13 13 02 F6 | 	mov	arg01, local01
0e958     3C F0 BF FD | 	call	#_convertstring
0e95c     FD 26 02 F6 | 	mov	local01, result1
0e960     1F 2A 06 F6 | 	mov	local03, #31
0e964                 | LR__1230
0e964                 | ' if t1.result_type<>result_string then printerror(15): return
0e964     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e968     10 00 90 AD |  if_e	jmp	#LR__1231
0e96c     0F 12 06 F6 | 	mov	arg01, #15
0e970     00 14 06 F6 | 	mov	arg02, #0
0e974     84 57 B1 FD | 	call	#_printerror
0e978     54 05 90 FD | 	jmp	#LR__1249
0e97c                 | LR__1231
0e97c     13 2D 02 F6 | 	mov	local04, local01
0e980                 | ' newdir$=t1.result.sresult
0e980                 | ' if newdir$=".." then 
0e980     BF 01 00 FF 
0e984     A4 14 06 F6 | 	mov	arg02, ##@LR__6001
0e988     16 13 02 F6 | 	mov	arg01, local04
0e98c     F4 91 B1 FD | 	call	#__system___string_cmp
0e990     00 FA 0D F2 | 	cmp	result1, #0 wz
0e994     C8 01 90 5D |  if_ne	jmp	#LR__1238
0e998     4A 00 00 FF 
0e99c     94 E4 05 F1 | 	add	objptr, ##38036
0e9a0     F2 12 02 FB | 	rdlong	arg01, objptr
0e9a4     4A 00 00 FF 
0e9a8     94 E4 85 F1 | 	sub	objptr, ##38036
0e9ac     09 2F 02 F6 | 	mov	local05, arg01
0e9b0     97 06 48 FB | 	callpa	#(@LR__1233-@LR__1232)>>2,fcache_load_ptr_
0e9b4                 | LR__1232
0e9b4     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e9b8     01 2E 06 51 |  if_ne	add	local05, #1
0e9bc     F4 FF 9F 5D |  if_ne	jmp	#LR__1232
0e9c0                 | LR__1233
0e9c0     17 13 C2 F2 | 	subr	arg01, local05
0e9c4     4A 00 00 FF 
0e9c8     94 E4 05 F1 | 	add	objptr, ##38036
0e9cc     F2 14 02 FB | 	rdlong	arg02, objptr
0e9d0     4A 00 00 FF 
0e9d4     94 E4 85 F1 | 	sub	objptr, ##38036
0e9d8     BF 01 00 FF 
0e9dc     A7 16 06 F6 | 	mov	arg03, ##@LR__6002
0e9e0     44 B8 B1 FD | 	call	#__system__InstrRev
0e9e4     FD 2C 02 F6 | 	mov	local04, result1
0e9e8                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e9e8     02 2C 56 F2 | 	cmps	local04, #2 wc
0e9ec     28 00 90 CD |  if_b	jmp	#LR__1234
0e9f0     4A 00 00 FF 
0e9f4     94 E4 05 F1 | 	add	objptr, ##38036
0e9f8     F2 12 02 FB | 	rdlong	arg01, objptr
0e9fc     4A 00 00 FF 
0ea00     94 E4 85 F1 | 	sub	objptr, ##38036
0ea04     01 2C 86 F1 | 	sub	local04, #1
0ea08     16 15 02 F6 | 	mov	arg02, local04
0ea0c     CC B1 B1 FD | 	call	#__system__Left_S
0ea10     FD 2C 02 F6 | 	mov	local04, result1
0ea14     08 00 90 FD | 	jmp	#LR__1235
0ea18                 | LR__1234
0ea18     BF 01 00 FF 
0ea1c     A9 2C 06 F6 | 	mov	local04, ##@LR__6003
0ea20                 | LR__1235
0ea20     16 13 02 F6 | 	mov	arg01, local04
0ea24     C0 97 B1 FD | 	call	#__system___chdir
0ea28     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ea2c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ea30     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ea34     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ea38     FD 30 0A F6 | 	mov	local06, result1 wz
0ea3c                 | '   chdir newdir$
0ea3c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ea3c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ea40     A4 00 90 AD |  if_e	jmp	#LR__1236
0ea44     00 12 06 F6 | 	mov	arg01, #0
0ea48     C0 ED B1 FD | 	call	#__system___getiolock_0620
0ea4c     FD 12 02 F6 | 	mov	arg01, result1
0ea50     08 91 B1 FD | 	call	#__system___lockmem
0ea54     BF 01 00 FF 
0ea58     AB 14 06 F6 | 	mov	arg02, ##@LR__6004
0ea5c     00 12 06 F6 | 	mov	arg01, #0
0ea60     00 16 06 F6 | 	mov	arg03, #0
0ea64     EC 9D B1 FD | 	call	#__system___basic_print_string
0ea68     00 12 06 F6 | 	mov	arg01, #0
0ea6c     18 15 02 F6 | 	mov	arg02, local06
0ea70     00 16 06 F6 | 	mov	arg03, #0
0ea74     0A 18 06 F6 | 	mov	arg04, #10
0ea78     1C 9E B1 FD | 	call	#__system___basic_print_integer
0ea7c     BF 01 00 FF 
0ea80     B9 14 06 F6 | 	mov	arg02, ##@LR__6005
0ea84     00 12 06 F6 | 	mov	arg01, #0
0ea88     00 16 06 F6 | 	mov	arg03, #0
0ea8c     C4 9D B1 FD | 	call	#__system___basic_print_string
0ea90     45 00 00 FF 
0ea94     50 E5 05 F1 | 	add	objptr, ##35664
0ea98     F2 14 02 FB | 	rdlong	arg02, objptr
0ea9c     45 00 00 FF 
0eaa0     50 E5 85 F1 | 	sub	objptr, ##35664
0eaa4     00 12 06 F6 | 	mov	arg01, #0
0eaa8     00 16 06 F6 | 	mov	arg03, #0
0eaac     A4 9D B1 FD | 	call	#__system___basic_print_string
0eab0     00 12 06 F6 | 	mov	arg01, #0
0eab4     0A 14 06 F6 | 	mov	arg02, #10
0eab8     00 16 06 F6 | 	mov	arg03, #0
0eabc     3C 9D B1 FD | 	call	#__system___basic_print_char
0eac0     00 12 06 F6 | 	mov	arg01, #0
0eac4     44 ED B1 FD | 	call	#__system___getiolock_0620
0eac8     FD 00 68 FC | 	wrlong	#0, result1
0eacc     4A 00 00 FF 
0ead0     94 E4 05 F1 | 	add	objptr, ##38036
0ead4     F2 12 02 FB | 	rdlong	arg01, objptr
0ead8     4A 00 00 FF 
0eadc     94 E4 85 F1 | 	sub	objptr, ##38036
0eae0     04 97 B1 FD | 	call	#__system___chdir
0eae4     14 00 90 FD | 	jmp	#LR__1237
0eae8                 | LR__1236
0eae8     4A 00 00 FF 
0eaec     94 E4 05 F1 | 	add	objptr, ##38036
0eaf0     F2 2C 62 FC | 	wrlong	local04, objptr
0eaf4     4A 00 00 FF 
0eaf8     94 E4 85 F1 | 	sub	objptr, ##38036
0eafc                 | LR__1237
0eafc                 | '   print "Current directory: ";currentdir$
0eafc     00 12 06 F6 | 	mov	arg01, #0
0eb00     08 ED B1 FD | 	call	#__system___getiolock_0620
0eb04     FD 12 02 F6 | 	mov	arg01, result1
0eb08     50 90 B1 FD | 	call	#__system___lockmem
0eb0c     BF 01 00 FF 
0eb10     BC 14 06 F6 | 	mov	arg02, ##@LR__6006
0eb14     00 12 06 F6 | 	mov	arg01, #0
0eb18     00 16 06 F6 | 	mov	arg03, #0
0eb1c     34 9D B1 FD | 	call	#__system___basic_print_string
0eb20     4A 00 00 FF 
0eb24     94 E4 05 F1 | 	add	objptr, ##38036
0eb28     F2 14 02 FB | 	rdlong	arg02, objptr
0eb2c     4A 00 00 FF 
0eb30     94 E4 85 F1 | 	sub	objptr, ##38036
0eb34     00 12 06 F6 | 	mov	arg01, #0
0eb38     00 16 06 F6 | 	mov	arg03, #0
0eb3c     14 9D B1 FD | 	call	#__system___basic_print_string
0eb40     00 12 06 F6 | 	mov	arg01, #0
0eb44     0A 14 06 F6 | 	mov	arg02, #10
0eb48     00 16 06 F6 | 	mov	arg03, #0
0eb4c     AC 9C B1 FD | 	call	#__system___basic_print_char
0eb50     00 12 06 F6 | 	mov	arg01, #0
0eb54     B4 EC B1 FD | 	call	#__system___getiolock_0620
0eb58     FD 00 68 FC | 	wrlong	#0, result1
0eb5c                 | '   return
0eb5c     70 03 90 FD | 	jmp	#LR__1249
0eb60                 | LR__1238
0eb60                 | ' if left$(newdir$,1)="/" then 
0eb60     16 13 02 F6 | 	mov	arg01, local04
0eb64     01 14 06 F6 | 	mov	arg02, #1
0eb68     70 B0 B1 FD | 	call	#__system__Left_S
0eb6c     FD 12 02 F6 | 	mov	arg01, result1
0eb70     BF 01 00 FF 
0eb74     D0 14 06 F6 | 	mov	arg02, ##@LR__6007
0eb78     08 90 B1 FD | 	call	#__system___string_cmp
0eb7c     00 FA 0D F2 | 	cmp	result1, #0 wz
0eb80     40 01 90 5D |  if_ne	jmp	#LR__1241
0eb84     16 13 02 F6 | 	mov	arg01, local04
0eb88     5C 96 B1 FD | 	call	#__system___chdir
0eb8c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eb90     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eb94     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0eb98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0eb9c     FD 30 0A F6 | 	mov	local06, result1 wz
0eba0                 | '   chdir(newdir$)
0eba0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eba0     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0eba4     A4 00 90 AD |  if_e	jmp	#LR__1239
0eba8     00 12 06 F6 | 	mov	arg01, #0
0ebac     5C EC B1 FD | 	call	#__system___getiolock_0620
0ebb0     FD 12 02 F6 | 	mov	arg01, result1
0ebb4     A4 8F B1 FD | 	call	#__system___lockmem
0ebb8     BF 01 00 FF 
0ebbc     D2 14 06 F6 | 	mov	arg02, ##@LR__6008
0ebc0     00 12 06 F6 | 	mov	arg01, #0
0ebc4     00 16 06 F6 | 	mov	arg03, #0
0ebc8     88 9C B1 FD | 	call	#__system___basic_print_string
0ebcc     00 12 06 F6 | 	mov	arg01, #0
0ebd0     18 15 02 F6 | 	mov	arg02, local06
0ebd4     00 16 06 F6 | 	mov	arg03, #0
0ebd8     0A 18 06 F6 | 	mov	arg04, #10
0ebdc     B8 9C B1 FD | 	call	#__system___basic_print_integer
0ebe0     BF 01 00 FF 
0ebe4     E0 14 06 F6 | 	mov	arg02, ##@LR__6009
0ebe8     00 12 06 F6 | 	mov	arg01, #0
0ebec     00 16 06 F6 | 	mov	arg03, #0
0ebf0     60 9C B1 FD | 	call	#__system___basic_print_string
0ebf4     45 00 00 FF 
0ebf8     50 E5 05 F1 | 	add	objptr, ##35664
0ebfc     F2 14 02 FB | 	rdlong	arg02, objptr
0ec00     45 00 00 FF 
0ec04     50 E5 85 F1 | 	sub	objptr, ##35664
0ec08     00 12 06 F6 | 	mov	arg01, #0
0ec0c     00 16 06 F6 | 	mov	arg03, #0
0ec10     40 9C B1 FD | 	call	#__system___basic_print_string
0ec14     00 12 06 F6 | 	mov	arg01, #0
0ec18     0A 14 06 F6 | 	mov	arg02, #10
0ec1c     00 16 06 F6 | 	mov	arg03, #0
0ec20     D8 9B B1 FD | 	call	#__system___basic_print_char
0ec24     00 12 06 F6 | 	mov	arg01, #0
0ec28     E0 EB B1 FD | 	call	#__system___getiolock_0620
0ec2c     FD 00 68 FC | 	wrlong	#0, result1
0ec30     4A 00 00 FF 
0ec34     94 E4 05 F1 | 	add	objptr, ##38036
0ec38     F2 12 02 FB | 	rdlong	arg01, objptr
0ec3c     4A 00 00 FF 
0ec40     94 E4 85 F1 | 	sub	objptr, ##38036
0ec44     A0 95 B1 FD | 	call	#__system___chdir
0ec48     14 00 90 FD | 	jmp	#LR__1240
0ec4c                 | LR__1239
0ec4c     4A 00 00 FF 
0ec50     94 E4 05 F1 | 	add	objptr, ##38036
0ec54     F2 2C 62 FC | 	wrlong	local04, objptr
0ec58     4A 00 00 FF 
0ec5c     94 E4 85 F1 | 	sub	objptr, ##38036
0ec60                 | LR__1240
0ec60                 | '   print "Current directory: ";currentdir$
0ec60     00 12 06 F6 | 	mov	arg01, #0
0ec64     A4 EB B1 FD | 	call	#__system___getiolock_0620
0ec68     FD 12 02 F6 | 	mov	arg01, result1
0ec6c     EC 8E B1 FD | 	call	#__system___lockmem
0ec70     BF 01 00 FF 
0ec74     E3 14 06 F6 | 	mov	arg02, ##@LR__6010
0ec78     00 12 06 F6 | 	mov	arg01, #0
0ec7c     00 16 06 F6 | 	mov	arg03, #0
0ec80     D0 9B B1 FD | 	call	#__system___basic_print_string
0ec84     4A 00 00 FF 
0ec88     94 E4 05 F1 | 	add	objptr, ##38036
0ec8c     F2 14 02 FB | 	rdlong	arg02, objptr
0ec90     4A 00 00 FF 
0ec94     94 E4 85 F1 | 	sub	objptr, ##38036
0ec98     00 12 06 F6 | 	mov	arg01, #0
0ec9c     00 16 06 F6 | 	mov	arg03, #0
0eca0     B0 9B B1 FD | 	call	#__system___basic_print_string
0eca4     00 12 06 F6 | 	mov	arg01, #0
0eca8     0A 14 06 F6 | 	mov	arg02, #10
0ecac     00 16 06 F6 | 	mov	arg03, #0
0ecb0     48 9B B1 FD | 	call	#__system___basic_print_char
0ecb4     00 12 06 F6 | 	mov	arg01, #0
0ecb8     50 EB B1 FD | 	call	#__system___getiolock_0620
0ecbc     FD 00 68 FC | 	wrlong	#0, result1
0ecc0                 | '   return
0ecc0     0C 02 90 FD | 	jmp	#LR__1249
0ecc4                 | LR__1241
0ecc4                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ecc4     4A 00 00 FF 
0ecc8     94 E4 05 F1 | 	add	objptr, ##38036
0eccc     F2 12 02 FB | 	rdlong	arg01, objptr
0ecd0     4A 00 00 FF 
0ecd4     94 E4 85 F1 | 	sub	objptr, ##38036
0ecd8     BF 01 00 FF 
0ecdc     F7 14 06 F6 | 	mov	arg02, ##@LR__6011
0ece0     A0 8E B1 FD | 	call	#__system___string_cmp
0ece4     00 FA 0D F2 | 	cmp	result1, #0 wz
0ece8     34 00 90 AD |  if_e	jmp	#LR__1242
0ecec     4A 00 00 FF 
0ecf0     94 E4 05 F1 | 	add	objptr, ##38036
0ecf4     F2 12 02 FB | 	rdlong	arg01, objptr
0ecf8     4A 00 00 FF 
0ecfc     94 E4 85 F1 | 	sub	objptr, ##38036
0ed00     BF 01 00 FF 
0ed04     F9 14 06 F6 | 	mov	arg02, ##@LR__6012
0ed08     AC 8E B1 FD | 	call	#__system___string_concat
0ed0c     FD 12 02 F6 | 	mov	arg01, result1
0ed10     16 15 02 F6 | 	mov	arg02, local04
0ed14     A0 8E B1 FD | 	call	#__system___string_concat
0ed18     FD 2C 02 F6 | 	mov	local04, result1
0ed1c     20 00 90 FD | 	jmp	#LR__1243
0ed20                 | LR__1242
0ed20     4A 00 00 FF 
0ed24     94 E4 05 F1 | 	add	objptr, ##38036
0ed28     F2 12 02 FB | 	rdlong	arg01, objptr
0ed2c     4A 00 00 FF 
0ed30     94 E4 85 F1 | 	sub	objptr, ##38036
0ed34     16 15 02 F6 | 	mov	arg02, local04
0ed38     7C 8E B1 FD | 	call	#__system___string_concat
0ed3c     FD 2C 02 F6 | 	mov	local04, result1
0ed40                 | LR__1243
0ed40                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ed40     16 13 02 F6 | 	mov	arg01, local04
0ed44     01 14 06 F6 | 	mov	arg02, #1
0ed48     18 AF B1 FD | 	call	#__system__Right_S
0ed4c     FD 12 02 F6 | 	mov	arg01, result1
0ed50     BF 01 00 FF 
0ed54     FB 14 06 F6 | 	mov	arg02, ##@LR__6013
0ed58     28 8E B1 FD | 	call	#__system___string_cmp
0ed5c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ed60     30 00 90 5D |  if_ne	jmp	#LR__1246
0ed64     16 13 02 F6 | 	mov	arg01, local04
0ed68     09 2F 02 F6 | 	mov	local05, arg01
0ed6c     97 06 48 FB | 	callpa	#(@LR__1245-@LR__1244)>>2,fcache_load_ptr_
0ed70                 | LR__1244
0ed70     17 FB C9 FA | 	rdbyte	result1, local05 wz
0ed74     01 2E 06 51 |  if_ne	add	local05, #1
0ed78     F4 FF 9F 5D |  if_ne	jmp	#LR__1244
0ed7c                 | LR__1245
0ed7c     09 2F 82 F1 | 	sub	local05, arg01
0ed80     17 15 02 F6 | 	mov	arg02, local05
0ed84     01 14 86 F1 | 	sub	arg02, #1
0ed88     16 13 02 F6 | 	mov	arg01, local04
0ed8c     4C AE B1 FD | 	call	#__system__Left_S
0ed90     FD 2C 02 F6 | 	mov	local04, result1
0ed94                 | LR__1246
0ed94     16 13 02 F6 | 	mov	arg01, local04
0ed98     4C 94 B1 FD | 	call	#__system___chdir
0ed9c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eda0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eda4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0eda8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0edac     FD 30 0A F6 | 	mov	local06, result1 wz
0edb0                 | '   chdir(newdir$)
0edb0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0edb0     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0edb4     A4 00 90 AD |  if_e	jmp	#LR__1247
0edb8     00 12 06 F6 | 	mov	arg01, #0
0edbc     4C EA B1 FD | 	call	#__system___getiolock_0620
0edc0     FD 12 02 F6 | 	mov	arg01, result1
0edc4     94 8D B1 FD | 	call	#__system___lockmem
0edc8     BF 01 00 FF 
0edcc     FD 14 06 F6 | 	mov	arg02, ##@LR__6014
0edd0     00 12 06 F6 | 	mov	arg01, #0
0edd4     00 16 06 F6 | 	mov	arg03, #0
0edd8     78 9A B1 FD | 	call	#__system___basic_print_string
0eddc     00 12 06 F6 | 	mov	arg01, #0
0ede0     18 15 02 F6 | 	mov	arg02, local06
0ede4     00 16 06 F6 | 	mov	arg03, #0
0ede8     0A 18 06 F6 | 	mov	arg04, #10
0edec     A8 9A B1 FD | 	call	#__system___basic_print_integer
0edf0     BF 01 00 FF 
0edf4     0B 15 06 F6 | 	mov	arg02, ##@LR__6015
0edf8     00 12 06 F6 | 	mov	arg01, #0
0edfc     00 16 06 F6 | 	mov	arg03, #0
0ee00     50 9A B1 FD | 	call	#__system___basic_print_string
0ee04     45 00 00 FF 
0ee08     50 E5 05 F1 | 	add	objptr, ##35664
0ee0c     F2 14 02 FB | 	rdlong	arg02, objptr
0ee10     45 00 00 FF 
0ee14     50 E5 85 F1 | 	sub	objptr, ##35664
0ee18     00 12 06 F6 | 	mov	arg01, #0
0ee1c     00 16 06 F6 | 	mov	arg03, #0
0ee20     30 9A B1 FD | 	call	#__system___basic_print_string
0ee24     00 12 06 F6 | 	mov	arg01, #0
0ee28     0A 14 06 F6 | 	mov	arg02, #10
0ee2c     00 16 06 F6 | 	mov	arg03, #0
0ee30     C8 99 B1 FD | 	call	#__system___basic_print_char
0ee34     00 12 06 F6 | 	mov	arg01, #0
0ee38     D0 E9 B1 FD | 	call	#__system___getiolock_0620
0ee3c     FD 00 68 FC | 	wrlong	#0, result1
0ee40     4A 00 00 FF 
0ee44     94 E4 05 F1 | 	add	objptr, ##38036
0ee48     F2 12 02 FB | 	rdlong	arg01, objptr
0ee4c     4A 00 00 FF 
0ee50     94 E4 85 F1 | 	sub	objptr, ##38036
0ee54     90 93 B1 FD | 	call	#__system___chdir
0ee58     14 00 90 FD | 	jmp	#LR__1248
0ee5c                 | LR__1247
0ee5c     4A 00 00 FF 
0ee60     94 E4 05 F1 | 	add	objptr, ##38036
0ee64     F2 2C 62 FC | 	wrlong	local04, objptr
0ee68     4A 00 00 FF 
0ee6c     94 E4 85 F1 | 	sub	objptr, ##38036
0ee70                 | LR__1248
0ee70                 | '   print "Current directory: ";currentdir$
0ee70     00 12 06 F6 | 	mov	arg01, #0
0ee74     94 E9 B1 FD | 	call	#__system___getiolock_0620
0ee78     FD 12 02 F6 | 	mov	arg01, result1
0ee7c     DC 8C B1 FD | 	call	#__system___lockmem
0ee80     BF 01 00 FF 
0ee84     0E 15 06 F6 | 	mov	arg02, ##@LR__6016
0ee88     00 12 06 F6 | 	mov	arg01, #0
0ee8c     00 16 06 F6 | 	mov	arg03, #0
0ee90     C0 99 B1 FD | 	call	#__system___basic_print_string
0ee94     4A 00 00 FF 
0ee98     94 E4 05 F1 | 	add	objptr, ##38036
0ee9c     F2 14 02 FB | 	rdlong	arg02, objptr
0eea0     4A 00 00 FF 
0eea4     94 E4 85 F1 | 	sub	objptr, ##38036
0eea8     00 12 06 F6 | 	mov	arg01, #0
0eeac     00 16 06 F6 | 	mov	arg03, #0
0eeb0     A0 99 B1 FD | 	call	#__system___basic_print_string
0eeb4     00 12 06 F6 | 	mov	arg01, #0
0eeb8     0A 14 06 F6 | 	mov	arg02, #10
0eebc     00 16 06 F6 | 	mov	arg03, #0
0eec0     38 99 B1 FD | 	call	#__system___basic_print_char
0eec4     00 12 06 F6 | 	mov	arg01, #0
0eec8     40 E9 B1 FD | 	call	#__system___getiolock_0620
0eecc     FD 00 68 FC | 	wrlong	#0, result1
0eed0                 | LR__1249
0eed0     A7 F0 03 F6 | 	mov	ptra, fp
0eed4     B2 00 A0 FD | 	call	#popregs_
0eed8                 | _do_cd_ret
0eed8     2D 00 64 FD | 	ret
0eedc                 | 
0eedc                 | ' 
0eedc                 | ' '-------------------- changefreq
0eedc                 | ' 
0eedc                 | ' sub do_changefreq
0eedc                 | _do_changefreq
0eedc     04 4A 05 F6 | 	mov	COUNT_, #4
0eee0     A8 00 A0 FD | 	call	#pushregs_
0eee4     28 F0 07 F1 | 	add	ptra, #40
0eee8     34 E9 BF FD | 	call	#_pop
0eeec     FF 14 02 F6 | 	mov	arg02, result3
0eef0     A7 FA 61 FC | 	wrlong	result1, fp
0eef4     04 4E 05 F1 | 	add	fp, #4
0eef8     A7 FC 61 FC | 	wrlong	result2, fp
0eefc     04 4E 05 F1 | 	add	fp, #4
0ef00     A7 14 62 FC | 	wrlong	arg02, fp
0ef04     08 4E 85 F1 | 	sub	fp, #8
0ef08     A7 12 02 F6 | 	mov	arg01, fp
0ef0c     B0 EB BF FD | 	call	#_converttofloat
0ef10     24 4E 05 F1 | 	add	fp, #36
0ef14     A7 FA 61 FC | 	wrlong	result1, fp
0ef18     24 4E 85 F1 | 	sub	fp, #36
0ef1c     FD 14 02 F6 | 	mov	arg02, result1
0ef20     FC 16 20 FF 
0ef24     54 12 06 F6 | 	mov	arg01, ##1076754516
0ef28     80 CA B1 FD | 	call	#__system____builtin_logbase
0ef2c     FD 26 02 F6 | 	mov	local01, result1
0ef30     1E 14 C6 F9 | 	decod	arg02, #30
0ef34     FC 16 20 FF 
0ef38     54 12 06 F6 | 	mov	arg01, ##1076754516
0ef3c     6C CA B1 FD | 	call	#__system____builtin_logbase
0ef40     FD 14 02 F6 | 	mov	arg02, result1
0ef44     13 13 02 F6 | 	mov	arg01, local01
0ef48     90 BC B1 FD | 	call	#__system___float_div
0ef4c     FD 12 02 F6 | 	mov	arg01, result1
0ef50     00 14 06 F6 | 	mov	arg02, #0
0ef54     48 BF B1 FD | 	call	#__system___float_tointeger
0ef58     10 4E 05 F1 | 	add	fp, #16
0ef5c     A7 FA 61 FC | 	wrlong	result1, fp
0ef60     1E 26 C6 F9 | 	decod	local01, #30
0ef64     FD 12 02 F6 | 	mov	arg01, result1
0ef68     10 4E 85 F1 | 	sub	fp, #16
0ef6c     05 12 06 F1 | 	add	arg01, #5
0ef70     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef74     1F 28 C6 C9 |  if_b	decod	local02, #31
0ef78     00 28 06 36 |  if_ae	mov	local02, #0
0ef7c     54 B6 B1 FD | 	call	#__system___float_fromuns
0ef80     14 FB 61 F5 | 	xor	result1, local02
0ef84     FD 14 02 F6 | 	mov	arg02, result1
0ef88     13 13 02 F6 | 	mov	arg01, local01
0ef8c     54 C9 B1 FD | 	call	#__system____builtin_powf
0ef90     FD 12 02 F6 | 	mov	arg01, result1
0ef94     01 14 06 F6 | 	mov	arg02, #1
0ef98     04 BF B1 FD | 	call	#__system___float_tointeger
0ef9c     14 4E 05 F1 | 	add	fp, #20
0efa0     A7 FA 61 FC | 	wrlong	result1, fp
0efa4                 | ' skip=round(2^(lfreq+5))
0efa4                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0efa4     14 4E 85 F1 | 	sub	fp, #20
0efa8     40 00 00 FF 
0efac     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0efb0     30 00 90 CD |  if_b	jmp	#LR__1250
0efb4     14 4E 05 F1 | 	add	fp, #20
0efb8     A7 26 02 FB | 	rdlong	local01, fp
0efbc     13 27 52 F6 | 	abs	local01, local01 wc
0efc0     0F 26 46 F0 | 	shr	local01, #15
0efc4     13 27 82 F6 | 	negc	local01, local01
0efc8     04 4E 05 F1 | 	add	fp, #4
0efcc     A7 26 62 FC | 	wrlong	local01, fp
0efd0     04 4E 85 F1 | 	sub	fp, #4
0efd4     40 00 80 FF 
0efd8     A7 00 68 FC | 	wrlong	##32768, fp
0efdc     14 4E 85 F1 | 	sub	fp, #20
0efe0     0C 00 90 FD | 	jmp	#LR__1251
0efe4                 | LR__1250
0efe4     18 4E 05 F1 | 	add	fp, #24
0efe8     A7 02 68 FC | 	wrlong	#1, fp
0efec     18 4E 85 F1 | 	sub	fp, #24
0eff0                 | LR__1251
0eff0     24 4E 05 F1 | 	add	fp, #36
0eff4     A7 14 02 FB | 	rdlong	arg02, fp
0eff8     24 4E 85 F1 | 	sub	fp, #36
0effc     3E 2C 25 FF 
0f000     3C 12 06 F6 | 	mov	arg01, ##1247312956
0f004     D4 BB B1 FD | 	call	#__system___float_div
0f008     FD 26 02 F6 | 	mov	local01, result1
0f00c     18 4E 05 F1 | 	add	fp, #24
0f010     A7 12 02 FB | 	rdlong	arg01, fp
0f014     18 4E 85 F1 | 	sub	fp, #24
0f018     09 13 52 F6 | 	abs	arg01, arg01 wc
0f01c     1F 28 C6 C9 |  if_b	decod	local02, #31
0f020     00 28 06 36 |  if_ae	mov	local02, #0
0f024     AC B5 B1 FD | 	call	#__system___float_fromuns
0f028     14 FB 61 F5 | 	xor	result1, local02
0f02c     FD 2A 02 F6 | 	mov	local03, result1
0f030     1E 2C C6 F9 | 	decod	local04, #30
0f034     0D 12 06 F6 | 	mov	arg01, #13
0f038     10 4E 05 F1 | 	add	fp, #16
0f03c     A7 14 02 FB | 	rdlong	arg02, fp
0f040     10 4E 85 F1 | 	sub	fp, #16
0f044     0A 13 82 F1 | 	sub	arg01, arg02
0f048     09 13 52 F6 | 	abs	arg01, arg01 wc
0f04c     1F 28 C6 C9 |  if_b	decod	local02, #31
0f050     00 28 06 36 |  if_ae	mov	local02, #0
0f054     7C B5 B1 FD | 	call	#__system___float_fromuns
0f058     14 FB 61 F5 | 	xor	result1, local02
0f05c     FD 14 02 F6 | 	mov	arg02, result1
0f060     16 13 02 F6 | 	mov	arg01, local04
0f064     7C C8 B1 FD | 	call	#__system____builtin_powf
0f068     FD 14 02 F6 | 	mov	arg02, result1
0f06c     15 13 02 F6 | 	mov	arg01, local03
0f070     64 B9 B1 FD | 	call	#__system___float_mul
0f074     FD 14 02 F6 | 	mov	arg02, result1
0f078     13 13 02 F6 | 	mov	arg01, local01
0f07c     5C BB B1 FD | 	call	#__system___float_div
0f080     FD 12 02 F6 | 	mov	arg01, result1
0f084     01 14 06 F6 | 	mov	arg02, #1
0f088     14 BE B1 FD | 	call	#__system___float_tointeger
0f08c     FD 26 02 F6 | 	mov	local01, result1
0f090     1C 4E 05 F1 | 	add	fp, #28
0f094     A7 26 62 FC | 	wrlong	local01, fp
0f098     1C 4E 85 F1 | 	sub	fp, #28
0f09c     80 E7 BF FD | 	call	#_pop
0f0a0     FF 2C 02 F6 | 	mov	local04, result3
0f0a4     A7 FA 61 FC | 	wrlong	result1, fp
0f0a8     04 4E 05 F1 | 	add	fp, #4
0f0ac     A7 FC 61 FC | 	wrlong	result2, fp
0f0b0     04 4E 05 F1 | 	add	fp, #4
0f0b4     A7 2C 62 FC | 	wrlong	local04, fp
0f0b8     08 4E 85 F1 | 	sub	fp, #8
0f0bc     A7 12 02 F6 | 	mov	arg01, fp
0f0c0     40 E9 BF FD | 	call	#_converttoint
0f0c4     FD 2A 52 F6 | 	abs	local03, result1 wc
0f0c8     07 2A 06 F5 | 	and	local03, #7
0f0cc     15 2B 82 F6 | 	negc	local03, local03
0f0d0     0C 4E 05 F1 | 	add	fp, #12
0f0d4     A7 2A 62 FC | 	wrlong	local03, fp
0f0d8     08 4E 05 F1 | 	add	fp, #8
0f0dc     A7 26 02 FB | 	rdlong	local01, fp
0f0e0     10 26 66 F0 | 	shl	local01, #16
0f0e4     08 4E 05 F1 | 	add	fp, #8
0f0e8     A7 2C 02 FB | 	rdlong	local04, fp
0f0ec     16 27 02 F1 | 	add	local01, local04
0f0f0     04 4E 05 F1 | 	add	fp, #4
0f0f4     A7 26 62 FC | 	wrlong	local01, fp
0f0f8                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0f0f8     37 00 00 FF 
0f0fc     10 E4 05 F1 | 	add	objptr, ##28176
0f100     F2 12 02 FB | 	rdlong	arg01, objptr
0f104     37 00 00 FF 
0f108     10 E4 85 F1 | 	sub	objptr, ##28176
0f10c     14 4E 85 F1 | 	sub	fp, #20
0f110     A7 2C 02 FB | 	rdlong	local04, fp
0f114     0C 4E 85 F1 | 	sub	fp, #12
0f118     06 2C 66 F0 | 	shl	local04, #6
0f11c     16 13 02 F1 | 	add	arg01, local04
0f120     08 12 06 F1 | 	add	arg01, #8
0f124     09 FB 01 FB | 	rdlong	result1, arg01
0f128     1B FA 2D F4 | 	testbn	result1, #27 wz
0f12c     3C 00 90 5D |  if_ne	jmp	#LR__1252
0f130     37 00 00 FF 
0f134     10 E4 05 F1 | 	add	objptr, ##28176
0f138     F2 12 02 FB | 	rdlong	arg01, objptr
0f13c     37 00 00 FF 
0f140     10 E4 85 F1 | 	sub	objptr, ##28176
0f144     0C 4E 05 F1 | 	add	fp, #12
0f148     A7 2C 02 FB | 	rdlong	local04, fp
0f14c     06 2C 66 F0 | 	shl	local04, #6
0f150     16 13 02 F1 | 	add	arg01, local04
0f154     18 12 06 F1 | 	add	arg01, #24
0f158     14 4E 05 F1 | 	add	fp, #20
0f15c     A7 14 02 FB | 	rdlong	arg02, fp
0f160     20 4E 85 F1 | 	sub	fp, #32
0f164     09 15 62 FC | 	wrlong	arg02, arg01
0f168     80 00 90 FD | 	jmp	#LR__1253
0f16c                 | LR__1252
0f16c     37 00 00 FF 
0f170     10 E4 05 F1 | 	add	objptr, ##28176
0f174     F2 26 02 FB | 	rdlong	local01, objptr
0f178     37 00 00 FF 
0f17c     10 E4 85 F1 | 	sub	objptr, ##28176
0f180     0C 4E 05 F1 | 	add	fp, #12
0f184     A7 2C 02 FB | 	rdlong	local04, fp
0f188     06 2C 66 F0 | 	shl	local04, #6
0f18c     16 27 02 F1 | 	add	local01, local04
0f190     18 26 06 F1 | 	add	local01, #24
0f194     18 4E 05 F1 | 	add	fp, #24
0f198     A7 14 02 FB | 	rdlong	arg02, fp
0f19c     24 4E 85 F1 | 	sub	fp, #36
0f1a0     3E 2C 25 FF 
0f1a4     3C 12 06 F6 | 	mov	arg01, ##1247312956
0f1a8     30 BA B1 FD | 	call	#__system___float_div
0f1ac     FD 12 02 F6 | 	mov	arg01, result1
0f1b0     01 14 06 F6 | 	mov	arg02, #1
0f1b4     E8 BC B1 FD | 	call	#__system___float_tointeger
0f1b8     13 FB 51 FC | 	wrword	result1, local01
0f1bc     37 00 00 FF 
0f1c0     10 E4 05 F1 | 	add	objptr, ##28176
0f1c4     F2 12 02 FB | 	rdlong	arg01, objptr
0f1c8     37 00 00 FF 
0f1cc     10 E4 85 F1 | 	sub	objptr, ##28176
0f1d0     0C 4E 05 F1 | 	add	fp, #12
0f1d4     A7 2C 02 FB | 	rdlong	local04, fp
0f1d8     0C 4E 85 F1 | 	sub	fp, #12
0f1dc     06 2C 66 F0 | 	shl	local04, #6
0f1e0     16 13 02 F1 | 	add	arg01, local04
0f1e4     1A 12 06 F1 | 	add	arg01, #26
0f1e8     09 01 5A FC | 	wrword	#256, arg01
0f1ec                 | LR__1253
0f1ec     A7 F0 03 F6 | 	mov	ptra, fp
0f1f0     B2 00 A0 FD | 	call	#popregs_
0f1f4                 | _do_changefreq_ret
0f1f4     2D 00 64 FD | 	ret
0f1f8                 | 
0f1f8                 | ' 
0f1f8                 | ' '-------------------- changepan
0f1f8                 | ' 
0f1f8                 | ' sub do_changepan
0f1f8                 | _do_changepan
0f1f8     01 4A 05 F6 | 	mov	COUNT_, #1
0f1fc     A8 00 A0 FD | 	call	#pushregs_
0f200     14 F0 07 F1 | 	add	ptra, #20
0f204     18 E6 BF FD | 	call	#_pop
0f208     A7 FA 61 FC | 	wrlong	result1, fp
0f20c     04 4E 05 F1 | 	add	fp, #4
0f210     A7 FC 61 FC | 	wrlong	result2, fp
0f214     04 4E 05 F1 | 	add	fp, #4
0f218     A7 FE 61 FC | 	wrlong	result3, fp
0f21c     08 4E 85 F1 | 	sub	fp, #8
0f220     00 00 23 FF 
0f224     00 26 06 F6 | 	mov	local01, ##1174405120
0f228     A7 12 02 F6 | 	mov	arg01, fp
0f22c     90 E8 BF FD | 	call	#_converttofloat
0f230     FD 14 02 F6 | 	mov	arg02, result1
0f234     13 13 02 F6 | 	mov	arg01, local01
0f238     9C B7 B1 FD | 	call	#__system___float_mul
0f23c     FD 12 02 F6 | 	mov	arg01, result1
0f240     01 14 06 F6 | 	mov	arg02, #1
0f244     58 BC B1 FD | 	call	#__system___float_tointeger
0f248     0D 26 C6 F9 | 	decod	local01, #13
0f24c     FD 26 02 F1 | 	add	local01, result1
0f250     10 4E 05 F1 | 	add	fp, #16
0f254     A7 26 62 FC | 	wrlong	local01, fp
0f258                 | ' 
0f258                 | ' t1=pop()
0f258                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f258                 | ' if pan<0 then pan=0
0f258     10 4E 85 F1 | 	sub	fp, #16
0f25c     00 26 56 F2 | 	cmps	local01, #0 wc
0f260     10 4E 05 C1 |  if_b	add	fp, #16
0f264     A7 00 68 CC |  if_b	wrlong	#0, fp
0f268     10 4E 85 C1 |  if_b	sub	fp, #16
0f26c                 | ' if pan>16384 then pan=16384
0f26c     10 4E 05 F1 | 	add	fp, #16
0f270     A7 26 02 FB | 	rdlong	local01, fp
0f274     10 4E 85 F1 | 	sub	fp, #16
0f278     20 00 00 FF 
0f27c     01 26 56 F2 | 	cmps	local01, ##16385 wc
0f280     10 4E 05 31 |  if_ae	add	fp, #16
0f284     20 00 80 3F 
0f288     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0f28c     10 4E 85 31 |  if_ae	sub	fp, #16
0f290     8C E5 BF FD | 	call	#_pop
0f294     FF 26 02 F6 | 	mov	local01, result3
0f298     A7 FA 61 FC | 	wrlong	result1, fp
0f29c     04 4E 05 F1 | 	add	fp, #4
0f2a0     A7 FC 61 FC | 	wrlong	result2, fp
0f2a4     04 4E 05 F1 | 	add	fp, #4
0f2a8     A7 26 62 FC | 	wrlong	local01, fp
0f2ac     08 4E 85 F1 | 	sub	fp, #8
0f2b0     A7 12 02 F6 | 	mov	arg01, fp
0f2b4     4C E7 BF FD | 	call	#_converttoint
0f2b8     FD 26 52 F6 | 	abs	local01, result1 wc
0f2bc     07 26 06 F5 | 	and	local01, #7
0f2c0     13 27 82 F6 | 	negc	local01, local01
0f2c4     0C 4E 05 F1 | 	add	fp, #12
0f2c8     A7 26 62 FC | 	wrlong	local01, fp
0f2cc     37 00 00 FF 
0f2d0     10 E4 05 F1 | 	add	objptr, ##28176
0f2d4     F2 12 02 FB | 	rdlong	arg01, objptr
0f2d8     37 00 00 FF 
0f2dc     10 E4 85 F1 | 	sub	objptr, ##28176
0f2e0     06 26 66 F0 | 	shl	local01, #6
0f2e4     13 13 02 F1 | 	add	arg01, local01
0f2e8     16 12 06 F1 | 	add	arg01, #22
0f2ec     04 4E 05 F1 | 	add	fp, #4
0f2f0     A7 14 02 FB | 	rdlong	arg02, fp
0f2f4     10 4E 85 F1 | 	sub	fp, #16
0f2f8     09 15 52 FC | 	wrword	arg02, arg01
0f2fc     A7 F0 03 F6 | 	mov	ptra, fp
0f300     B2 00 A0 FD | 	call	#popregs_
0f304                 | _do_changepan_ret
0f304     2D 00 64 FD | 	ret
0f308                 | 
0f308                 | ' 
0f308                 | ' '-------------------- changevol
0f308                 | ' 
0f308                 | ' sub do_changevol
0f308                 | _do_changevol
0f308     00 4A 05 F6 | 	mov	COUNT_, #0
0f30c     A8 00 A0 FD | 	call	#pushregs_
0f310     14 F0 07 F1 | 	add	ptra, #20
0f314     08 E5 BF FD | 	call	#_pop
0f318     FF 14 02 F6 | 	mov	arg02, result3
0f31c     A7 FA 61 FC | 	wrlong	result1, fp
0f320     04 4E 05 F1 | 	add	fp, #4
0f324     A7 FC 61 FC | 	wrlong	result2, fp
0f328     04 4E 05 F1 | 	add	fp, #4
0f32c     A7 14 62 FC | 	wrlong	arg02, fp
0f330     08 4E 85 F1 | 	sub	fp, #8
0f334     A7 12 02 F6 | 	mov	arg01, fp
0f338     84 E7 BF FD | 	call	#_converttofloat
0f33c     FD 12 02 F6 | 	mov	arg01, result1
0f340     00 3D 22 FF 
0f344     00 14 06 F6 | 	mov	arg02, ##1148846080
0f348     8C B6 B1 FD | 	call	#__system___float_mul
0f34c     FD 12 02 F6 | 	mov	arg01, result1
0f350     01 14 06 F6 | 	mov	arg02, #1
0f354     48 BB B1 FD | 	call	#__system___float_tointeger
0f358     FD 14 52 F6 | 	abs	arg02, result1 wc
0f35c     0D 14 46 F7 | 	zerox	arg02, #13
0f360     0A 15 82 F6 | 	negc	arg02, arg02
0f364     10 4E 05 F1 | 	add	fp, #16
0f368     A7 14 62 FC | 	wrlong	arg02, fp
0f36c     10 4E 85 F1 | 	sub	fp, #16
0f370     AC E4 BF FD | 	call	#_pop
0f374     FF 14 02 F6 | 	mov	arg02, result3
0f378     A7 FA 61 FC | 	wrlong	result1, fp
0f37c     04 4E 05 F1 | 	add	fp, #4
0f380     A7 FC 61 FC | 	wrlong	result2, fp
0f384     04 4E 05 F1 | 	add	fp, #4
0f388     A7 14 62 FC | 	wrlong	arg02, fp
0f38c     08 4E 85 F1 | 	sub	fp, #8
0f390     A7 12 02 F6 | 	mov	arg01, fp
0f394     6C E6 BF FD | 	call	#_converttoint
0f398     FD 14 52 F6 | 	abs	arg02, result1 wc
0f39c     07 14 06 F5 | 	and	arg02, #7
0f3a0     0A 15 82 F6 | 	negc	arg02, arg02
0f3a4     0C 4E 05 F1 | 	add	fp, #12
0f3a8     A7 14 62 FC | 	wrlong	arg02, fp
0f3ac     37 00 00 FF 
0f3b0     10 E4 05 F1 | 	add	objptr, ##28176
0f3b4     F2 12 02 FB | 	rdlong	arg01, objptr
0f3b8     37 00 00 FF 
0f3bc     10 E4 85 F1 | 	sub	objptr, ##28176
0f3c0     06 14 66 F0 | 	shl	arg02, #6
0f3c4     0A 13 02 F1 | 	add	arg01, arg02
0f3c8     14 12 06 F1 | 	add	arg01, #20
0f3cc     04 4E 05 F1 | 	add	fp, #4
0f3d0     A7 14 02 FB | 	rdlong	arg02, fp
0f3d4     10 4E 85 F1 | 	sub	fp, #16
0f3d8     09 15 52 FC | 	wrword	arg02, arg01
0f3dc     A7 F0 03 F6 | 	mov	ptra, fp
0f3e0     B2 00 A0 FD | 	call	#popregs_
0f3e4                 | _do_changevol_ret
0f3e4     2D 00 64 FD | 	ret
0f3e8                 | 
0f3e8                 | ' 
0f3e8                 | ' '-------------------- changewav
0f3e8                 | ' 
0f3e8                 | ' sub do_changewav
0f3e8                 | _do_changewav
0f3e8     00 4A 05 F6 | 	mov	COUNT_, #0
0f3ec     A8 00 A0 FD | 	call	#pushregs_
0f3f0     14 F0 07 F1 | 	add	ptra, #20
0f3f4     28 E4 BF FD | 	call	#_pop
0f3f8     FF 14 02 F6 | 	mov	arg02, result3
0f3fc     A7 FA 61 FC | 	wrlong	result1, fp
0f400     04 4E 05 F1 | 	add	fp, #4
0f404     A7 FC 61 FC | 	wrlong	result2, fp
0f408     04 4E 05 F1 | 	add	fp, #4
0f40c     A7 14 62 FC | 	wrlong	arg02, fp
0f410     08 4E 85 F1 | 	sub	fp, #8
0f414     A7 12 02 F6 | 	mov	arg01, fp
0f418     E8 E5 BF FD | 	call	#_converttoint
0f41c     10 4E 05 F1 | 	add	fp, #16
0f420     A7 FA 61 FC | 	wrlong	result1, fp
0f424                 | ' 
0f424                 | ' t1=pop()
0f424                 | ' wave=converttoint(t1)
0f424                 | ' if wave<0 then wave=0
0f424     FD 14 02 F6 | 	mov	arg02, result1
0f428     10 4E 85 F1 | 	sub	fp, #16
0f42c     00 14 56 F2 | 	cmps	arg02, #0 wc
0f430     10 4E 05 C1 |  if_b	add	fp, #16
0f434     A7 00 68 CC |  if_b	wrlong	#0, fp
0f438     10 4E 85 C1 |  if_b	sub	fp, #16
0f43c     E0 E3 BF FD | 	call	#_pop
0f440     FF 14 02 F6 | 	mov	arg02, result3
0f444     A7 FA 61 FC | 	wrlong	result1, fp
0f448     04 4E 05 F1 | 	add	fp, #4
0f44c     A7 FC 61 FC | 	wrlong	result2, fp
0f450     04 4E 05 F1 | 	add	fp, #4
0f454     A7 14 62 FC | 	wrlong	arg02, fp
0f458     08 4E 85 F1 | 	sub	fp, #8
0f45c     A7 12 02 F6 | 	mov	arg01, fp
0f460     A0 E5 BF FD | 	call	#_converttoint
0f464     FD 14 52 F6 | 	abs	arg02, result1 wc
0f468     07 14 06 F5 | 	and	arg02, #7
0f46c     0A 15 82 F6 | 	negc	arg02, arg02
0f470     0C 4E 05 F1 | 	add	fp, #12
0f474     A7 14 62 FC | 	wrlong	arg02, fp
0f478                 | ' if wave <32 then 
0f478     04 4E 05 F1 | 	add	fp, #4
0f47c     A7 14 02 FB | 	rdlong	arg02, fp
0f480     10 4E 85 F1 | 	sub	fp, #16
0f484     20 14 56 F2 | 	cmps	arg02, #32 wc
0f488     48 00 90 3D |  if_ae	jmp	#LR__1260
0f48c     37 00 00 FF 
0f490     10 E4 05 F1 | 	add	objptr, ##28176
0f494     F2 12 02 FB | 	rdlong	arg01, objptr
0f498     37 00 00 FF 
0f49c     10 E4 85 F1 | 	sub	objptr, ##28176
0f4a0     0C 4E 05 F1 | 	add	fp, #12
0f4a4     A7 14 02 FB | 	rdlong	arg02, fp
0f4a8     06 14 66 F0 | 	shl	arg02, #6
0f4ac     0A 13 02 F1 | 	add	arg01, arg02
0f4b0     08 12 06 F1 | 	add	arg01, #8
0f4b4     04 4E 05 F1 | 	add	fp, #4
0f4b8     A7 14 02 FB | 	rdlong	arg02, fp
0f4bc     10 4E 85 F1 | 	sub	fp, #16
0f4c0     0B 14 66 F0 | 	shl	arg02, #11
0f4c4     00 00 40 FF 
0f4c8     00 14 06 F1 | 	add	arg02, ##-2147483648
0f4cc     09 15 62 FC | 	wrlong	arg02, arg01
0f4d0     34 00 90 FD | 	jmp	#LR__1261
0f4d4                 | LR__1260
0f4d4     37 00 00 FF 
0f4d8     10 E4 05 F1 | 	add	objptr, ##28176
0f4dc     F2 12 02 FB | 	rdlong	arg01, objptr
0f4e0     37 00 00 FF 
0f4e4     10 E4 85 F1 | 	sub	objptr, ##28176
0f4e8     0C 4E 05 F1 | 	add	fp, #12
0f4ec     A7 14 02 FB | 	rdlong	arg02, fp
0f4f0     0C 4E 85 F1 | 	sub	fp, #12
0f4f4     06 14 66 F0 | 	shl	arg02, #6
0f4f8     0A 13 02 F1 | 	add	arg01, arg02
0f4fc     08 12 06 F1 | 	add	arg01, #8
0f500     00 00 C4 FF 
0f504     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f508                 | LR__1261
0f508     A7 F0 03 F6 | 	mov	ptra, fp
0f50c     B2 00 A0 FD | 	call	#popregs_
0f510                 | _do_changewav_ret
0f510     2D 00 64 FD | 	ret
0f514                 | 
0f514                 | ' 
0f514                 | ' '-------------------- chr$
0f514                 | ' 
0f514                 | ' sub do_chr
0f514                 | _do_chr
0f514     01 4A 05 F6 | 	mov	COUNT_, #1
0f518     A8 00 A0 FD | 	call	#pushregs_
0f51c     14 F0 07 F1 | 	add	ptra, #20
0f520     4A 00 00 FF 
0f524     80 E4 05 F1 | 	add	objptr, ##38016
0f528     F2 26 02 FB | 	rdlong	local01, objptr
0f52c     13 17 02 F6 | 	mov	arg03, local01
0f530     01 16 66 F0 | 	shl	arg03, #1
0f534     13 17 02 F1 | 	add	arg03, local01
0f538     02 16 66 F0 | 	shl	arg03, #2
0f53c     03 00 00 FF 
0f540     04 E4 85 F1 | 	sub	objptr, ##1540
0f544     F2 16 02 F1 | 	add	arg03, objptr
0f548     0B 17 02 FB | 	rdlong	arg03, arg03
0f54c     0C 4E 05 F1 | 	add	fp, #12
0f550     A7 16 62 FC | 	wrlong	arg03, fp
0f554                 | ' 
0f554                 | ' numpar=compiledline(lineptr_e).result.uresult
0f554                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f554     0C 4E 85 F1 | 	sub	fp, #12
0f558     02 16 16 F2 | 	cmp	arg03, #2 wc
0f55c     47 00 00 FF 
0f560     7C E4 85 F1 | 	sub	objptr, ##36476
0f564     0C 4E 05 C1 |  if_b	add	fp, #12
0f568     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f56c     0C 4E 85 C1 |  if_b	sub	fp, #12
0f570     40 00 90 4D |  if_c_and_nz	jmp	#LR__1270
0f574     00 12 06 F6 | 	mov	arg01, #0
0f578     90 E2 B1 FD | 	call	#__system___getiolock_0620
0f57c     FD 12 02 F6 | 	mov	arg01, result1
0f580     D8 85 B1 FD | 	call	#__system___lockmem
0f584     BF 01 00 FF 
0f588     22 15 06 F6 | 	mov	arg02, ##@LR__6017
0f58c     00 12 06 F6 | 	mov	arg01, #0
0f590     00 16 06 F6 | 	mov	arg03, #0
0f594     BC 92 B1 FD | 	call	#__system___basic_print_string
0f598     00 12 06 F6 | 	mov	arg01, #0
0f59c     6C E2 B1 FD | 	call	#__system___getiolock_0620
0f5a0     FD 00 68 FC | 	wrlong	#0, result1
0f5a4     27 12 06 F6 | 	mov	arg01, #39
0f5a8     00 14 06 F6 | 	mov	arg02, #0
0f5ac     4C 4B B1 FD | 	call	#_printerror
0f5b0     54 00 90 FD | 	jmp	#LR__1271
0f5b4                 | LR__1270
0f5b4     68 E2 BF FD | 	call	#_pop
0f5b8     FF 26 02 F6 | 	mov	local01, result3
0f5bc     A7 FA 61 FC | 	wrlong	result1, fp
0f5c0     04 4E 05 F1 | 	add	fp, #4
0f5c4     A7 FC 61 FC | 	wrlong	result2, fp
0f5c8     04 4E 05 F1 | 	add	fp, #4
0f5cc     A7 26 62 FC | 	wrlong	local01, fp
0f5d0     08 4E 85 F1 | 	sub	fp, #8
0f5d4     A7 12 02 F6 | 	mov	arg01, fp
0f5d8     28 E4 BF FD | 	call	#_converttoint
0f5dc     10 4E 05 F1 | 	add	fp, #16
0f5e0     A7 FA 61 FC | 	wrlong	result1, fp
0f5e4     FD 12 02 F6 | 	mov	arg01, result1
0f5e8     10 4E 85 F1 | 	sub	fp, #16
0f5ec     B0 A7 B1 FD | 	call	#__system__Chr_S
0f5f0     A7 FA 61 FC | 	wrlong	result1, fp
0f5f4     08 4E 05 F1 | 	add	fp, #8
0f5f8     A7 3E 68 FC | 	wrlong	#31, fp
0f5fc     08 4E 85 F1 | 	sub	fp, #8
0f600     A7 12 02 F6 | 	mov	arg01, fp
0f604     B0 E2 BF FD | 	call	#_push
0f608                 | LR__1271
0f608     A7 F0 03 F6 | 	mov	ptra, fp
0f60c     B2 00 A0 FD | 	call	#popregs_
0f610                 | _do_chr_ret
0f610     2D 00 64 FD | 	ret
0f614                 | 
0f614                 | ' 
0f614                 | ' '-------------------- circle
0f614                 | ' 
0f614                 | ' sub do_circle
0f614                 | _do_circle
0f614     02 4A 05 F6 | 	mov	COUNT_, #2
0f618     A8 00 A0 FD | 	call	#pushregs_
0f61c     24 F0 07 F1 | 	add	ptra, #36
0f620     FC E1 BF FD | 	call	#_pop
0f624     FD 18 02 F6 | 	mov	arg04, result1
0f628     FE 16 02 F6 | 	mov	arg03, result2
0f62c     FF 14 02 F6 | 	mov	arg02, result3
0f630     18 4E 05 F1 | 	add	fp, #24
0f634     A7 18 62 FC | 	wrlong	arg04, fp
0f638     04 4E 05 F1 | 	add	fp, #4
0f63c     A7 16 62 FC | 	wrlong	arg03, fp
0f640     04 4E 05 F1 | 	add	fp, #4
0f644     A7 14 62 FC | 	wrlong	arg02, fp
0f648     20 4E 85 F1 | 	sub	fp, #32
0f64c     D0 E1 BF FD | 	call	#_pop
0f650     FD 18 02 F6 | 	mov	arg04, result1
0f654     FE 16 02 F6 | 	mov	arg03, result2
0f658     FF 26 02 F6 | 	mov	local01, result3
0f65c     0C 4E 05 F1 | 	add	fp, #12
0f660     A7 18 62 FC | 	wrlong	arg04, fp
0f664     04 4E 05 F1 | 	add	fp, #4
0f668     A7 16 62 FC | 	wrlong	arg03, fp
0f66c     04 4E 05 F1 | 	add	fp, #4
0f670     A7 26 62 FC | 	wrlong	local01, fp
0f674     14 4E 85 F1 | 	sub	fp, #20
0f678     A4 E1 BF FD | 	call	#_pop
0f67c     A7 FA 61 FC | 	wrlong	result1, fp
0f680     04 4E 05 F1 | 	add	fp, #4
0f684     A7 FC 61 FC | 	wrlong	result2, fp
0f688     04 4E 05 F1 | 	add	fp, #4
0f68c     A7 FE 61 FC | 	wrlong	result3, fp
0f690                 | ' 
0f690                 | ' t3=pop()
0f690                 | ' t2=pop()
0f690                 | ' t1=pop()
0f690                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f690     FF 18 02 F6 | 	mov	arg04, result3
0f694     08 4E 85 F1 | 	sub	fp, #8
0f698     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f69c     08 4E 05 51 |  if_ne	add	fp, #8
0f6a0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f6a4     08 4E 85 51 |  if_ne	sub	fp, #8
0f6a8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f6ac     7C 00 90 5D |  if_ne	jmp	#LR__1280
0f6b0     14 4E 05 F1 | 	add	fp, #20
0f6b4     A7 26 02 FB | 	rdlong	local01, fp
0f6b8     14 4E 85 F1 | 	sub	fp, #20
0f6bc     1C 26 0E F2 | 	cmp	local01, #28 wz
0f6c0     14 4E 05 51 |  if_ne	add	fp, #20
0f6c4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f6c8     14 4E 85 51 |  if_ne	sub	fp, #20
0f6cc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f6d0     58 00 90 5D |  if_ne	jmp	#LR__1280
0f6d4     20 4E 05 F1 | 	add	fp, #32
0f6d8     A7 26 02 FB | 	rdlong	local01, fp
0f6dc     20 4E 85 F1 | 	sub	fp, #32
0f6e0     1C 26 0E F2 | 	cmp	local01, #28 wz
0f6e4     20 4E 05 51 |  if_ne	add	fp, #32
0f6e8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f6ec     20 4E 85 51 |  if_ne	sub	fp, #32
0f6f0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f6f4     34 00 90 5D |  if_ne	jmp	#LR__1280
0f6f8     A7 12 02 FB | 	rdlong	arg01, fp
0f6fc     0C 4E 05 F1 | 	add	fp, #12
0f700     A7 14 02 FB | 	rdlong	arg02, fp
0f704     0C 4E 05 F1 | 	add	fp, #12
0f708     A7 16 02 FB | 	rdlong	arg03, fp
0f70c     18 4E 85 F1 | 	sub	fp, #24
0f710     37 00 00 FF 
0f714     28 E4 05 F1 | 	add	objptr, ##28200
0f718     F2 18 02 FB | 	rdlong	arg04, objptr
0f71c     37 00 00 FF 
0f720     28 E4 85 F1 | 	sub	objptr, ##28200
0f724     D0 62 B1 FD | 	call	#_hg010b_spin2_circle
0f728                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f728     54 00 90 FD | 	jmp	#LR__1281
0f72c                 | LR__1280
0f72c     A7 12 02 F6 | 	mov	arg01, fp
0f730     D0 E2 BF FD | 	call	#_converttoint
0f734     FD 26 02 F6 | 	mov	local01, result1
0f738     0C 4E 05 F1 | 	add	fp, #12
0f73c     A7 12 02 F6 | 	mov	arg01, fp
0f740     0C 4E 85 F1 | 	sub	fp, #12
0f744     BC E2 BF FD | 	call	#_converttoint
0f748     FD 28 02 F6 | 	mov	local02, result1
0f74c     18 4E 05 F1 | 	add	fp, #24
0f750     A7 12 02 F6 | 	mov	arg01, fp
0f754     18 4E 85 F1 | 	sub	fp, #24
0f758     A8 E2 BF FD | 	call	#_converttoint
0f75c     FD 16 02 F6 | 	mov	arg03, result1
0f760     37 00 00 FF 
0f764     28 E4 05 F1 | 	add	objptr, ##28200
0f768     F2 18 02 FB | 	rdlong	arg04, objptr
0f76c     37 00 00 FF 
0f770     28 E4 85 F1 | 	sub	objptr, ##28200
0f774     13 13 02 F6 | 	mov	arg01, local01
0f778     14 15 02 F6 | 	mov	arg02, local02
0f77c     78 62 B1 FD | 	call	#_hg010b_spin2_circle
0f780                 | LR__1281
0f780     A7 F0 03 F6 | 	mov	ptra, fp
0f784     B2 00 A0 FD | 	call	#popregs_
0f788                 | _do_circle_ret
0f788     2D 00 64 FD | 	ret
0f78c                 | 
0f78c                 | ' 
0f78c                 | ' '-------------------- click
0f78c                 | ' 
0f78c                 | ' sub do_click
0f78c                 | _do_click
0f78c     90 E0 BF FD | 	call	#_pop
0f790     00 FA 4D F2 | 	cmps	result1, #0 wz
0f794                 | ' 
0f794                 | ' t1=pop()
0f794                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f794     50 00 00 AF 
0f798     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f79c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f7a0     50 00 00 FF 
0f7a4     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f7a8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f7ac     50 00 00 5F 
0f7b0     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f7b4                 | _do_click_ret
0f7b4     2D 00 64 FD | 	ret
0f7b8                 | 
0f7b8                 | ' 
0f7b8                 | ' '-------------------- close
0f7b8                 | ' 
0f7b8                 | ' sub do_close
0f7b8                 | _do_close
0f7b8     03 4A 05 F6 | 	mov	COUNT_, #3
0f7bc     A8 00 A0 FD | 	call	#pushregs_
0f7c0     5C E0 BF FD | 	call	#_pop
0f7c4     FD 26 02 F6 | 	mov	local01, result1
0f7c8     FF 16 02 F6 | 	mov	arg03, result3
0f7cc     FE 28 02 F6 | 	mov	local02, result2
0f7d0     0B 2B 02 F6 | 	mov	local03, arg03
0f7d4                 | ' 
0f7d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f7d4                 | ' t1=pop()
0f7d4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f7d4     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f7d8     44 00 90 AD |  if_e	jmp	#LR__1290
0f7dc     00 12 06 F6 | 	mov	arg01, #0
0f7e0     28 E0 B1 FD | 	call	#__system___getiolock_0620
0f7e4     FD 12 02 F6 | 	mov	arg01, result1
0f7e8     70 83 B1 FD | 	call	#__system___lockmem
0f7ec     BF 01 00 FF 
0f7f0     29 15 06 F6 | 	mov	arg02, ##@LR__6018
0f7f4     00 12 06 F6 | 	mov	arg01, #0
0f7f8     00 16 06 F6 | 	mov	arg03, #0
0f7fc     54 90 B1 FD | 	call	#__system___basic_print_string
0f800     00 12 06 F6 | 	mov	arg01, #0
0f804     0A 14 06 F6 | 	mov	arg02, #10
0f808     00 16 06 F6 | 	mov	arg03, #0
0f80c     EC 8F B1 FD | 	call	#__system___basic_print_char
0f810     00 12 06 F6 | 	mov	arg01, #0
0f814     F4 DF B1 FD | 	call	#__system___getiolock_0620
0f818     FD 00 68 FC | 	wrlong	#0, result1
0f81c     08 00 90 FD | 	jmp	#LR__1291
0f820                 | LR__1290
0f820                 | ' channel  = t1.result.iresult
0f820                 | ' close #channel
0f820     13 13 02 F6 | 	mov	arg01, local01
0f824     94 D6 B1 FD | 	call	#__system__close
0f828                 | LR__1291
0f828     A7 F0 03 F6 | 	mov	ptra, fp
0f82c     B2 00 A0 FD | 	call	#popregs_
0f830                 | _do_close_ret
0f830     2D 00 64 FD | 	ret
0f834                 | 
0f834                 | ' 
0f834                 | ' '-------------------- cls
0f834                 | ' 
0f834                 | ' sub do_cls
0f834                 | _do_cls
0f834     37 00 00 FF 
0f838     3C E4 05 F1 | 	add	objptr, ##28220
0f83c     F2 12 02 FB | 	rdlong	arg01, objptr
0f840     04 E4 85 F1 | 	sub	objptr, #4
0f844     F2 14 02 FB | 	rdlong	arg02, objptr
0f848     37 00 00 FF 
0f84c     38 E4 85 F1 | 	sub	objptr, ##28216
0f850     AC 66 B1 FD | 	call	#_hg010b_spin2_cls
0f854     37 00 00 FF 
0f858     3C E4 05 F1 | 	add	objptr, ##28220
0f85c     F2 14 02 FB | 	rdlong	arg02, objptr
0f860     14 E4 85 F1 | 	sub	objptr, #20
0f864     F2 14 62 FC | 	wrlong	arg02, objptr
0f868     37 00 00 FF 
0f86c     28 E4 85 F1 | 	sub	objptr, ##28200
0f870                 | _do_cls_ret
0f870     2D 00 64 FD | 	ret
0f874                 | 
0f874                 | ' 
0f874                 | ' sub do_coginit
0f874                 | _do_coginit
0f874     00 4A 05 F6 | 	mov	COUNT_, #0
0f878     A8 00 A0 FD | 	call	#pushregs_
0f87c     08 00 00 FF 
0f880     1C F0 07 F1 | 	add	ptra, ##4124
0f884     4A 00 00 FF 
0f888     80 E4 05 F1 | 	add	objptr, ##38016
0f88c     F2 FA 01 FB | 	rdlong	result1, objptr
0f890     FD FC 01 F6 | 	mov	result2, result1
0f894     01 FC 65 F0 | 	shl	result2, #1
0f898     FD FC 01 F1 | 	add	result2, result1
0f89c     02 FC 65 F0 | 	shl	result2, #2
0f8a0     03 00 00 FF 
0f8a4     04 E4 85 F1 | 	sub	objptr, ##1540
0f8a8     F2 FC 01 F1 | 	add	result2, objptr
0f8ac     FE FC 01 FB | 	rdlong	result2, result2
0f8b0     A7 FC 61 FC | 	wrlong	result2, fp
0f8b4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f8b4                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f8b4     02 FC 55 F2 | 	cmps	result2, #2 wc
0f8b8     47 00 00 FF 
0f8bc     7C E4 85 F1 | 	sub	objptr, ##36476
0f8c0     0C 00 90 CD |  if_b	jmp	#LR__1300
0f8c4     A7 FA 01 FB | 	rdlong	result1, fp
0f8c8     04 FA 55 F2 | 	cmps	result1, #4 wc
0f8cc     40 00 90 CD |  if_b	jmp	#LR__1301
0f8d0                 | LR__1300
0f8d0     00 12 06 F6 | 	mov	arg01, #0
0f8d4     34 DF B1 FD | 	call	#__system___getiolock_0620
0f8d8     FD 12 02 F6 | 	mov	arg01, result1
0f8dc     7C 82 B1 FD | 	call	#__system___lockmem
0f8e0     BF 01 00 FF 
0f8e4     3B 15 06 F6 | 	mov	arg02, ##@LR__6019
0f8e8     00 12 06 F6 | 	mov	arg01, #0
0f8ec     00 16 06 F6 | 	mov	arg03, #0
0f8f0     60 8F B1 FD | 	call	#__system___basic_print_string
0f8f4     00 12 06 F6 | 	mov	arg01, #0
0f8f8     10 DF B1 FD | 	call	#__system___getiolock_0620
0f8fc     FD 00 68 FC | 	wrlong	#0, result1
0f900     27 12 06 F6 | 	mov	arg01, #39
0f904     00 14 06 F6 | 	mov	arg02, #0
0f908     F0 47 B1 FD | 	call	#_printerror
0f90c     94 01 90 FD | 	jmp	#LR__1305
0f910                 | LR__1301
0f910     0C DF BF FD | 	call	#_pop
0f914     FF 16 02 F6 | 	mov	arg03, result3
0f918     08 00 00 FF 
0f91c     10 4E 05 F1 | 	add	fp, ##4112
0f920     A7 FA 61 FC | 	wrlong	result1, fp
0f924     04 4E 05 F1 | 	add	fp, #4
0f928     A7 FC 61 FC | 	wrlong	result2, fp
0f92c     04 4E 05 F1 | 	add	fp, #4
0f930     A7 16 62 FC | 	wrlong	arg03, fp
0f934     08 4E 85 F1 | 	sub	fp, #8
0f938     A7 12 02 F6 | 	mov	arg01, fp
0f93c     08 00 00 FF 
0f940     10 4E 85 F1 | 	sub	fp, ##4112
0f944     BC E0 BF FD | 	call	#_converttoint
0f948     FD 16 02 F6 | 	mov	arg03, result1
0f94c     04 4E 05 F1 | 	add	fp, #4
0f950     A7 16 62 FC | 	wrlong	arg03, fp
0f954     04 4E 85 F1 | 	sub	fp, #4
0f958     C4 DE BF FD | 	call	#_pop
0f95c     FF 16 02 F6 | 	mov	arg03, result3
0f960     08 00 00 FF 
0f964     10 4E 05 F1 | 	add	fp, ##4112
0f968     A7 FA 61 FC | 	wrlong	result1, fp
0f96c     04 4E 05 F1 | 	add	fp, #4
0f970     A7 FC 61 FC | 	wrlong	result2, fp
0f974     04 4E 05 F1 | 	add	fp, #4
0f978     A7 16 62 FC | 	wrlong	arg03, fp
0f97c     08 4E 85 F1 | 	sub	fp, #8
0f980     A7 12 02 F6 | 	mov	arg01, fp
0f984     08 00 00 FF 
0f988     10 4E 85 F1 | 	sub	fp, ##4112
0f98c     74 E0 BF FD | 	call	#_converttoint
0f990     08 4E 05 F1 | 	add	fp, #8
0f994     A7 FA 61 FC | 	wrlong	result1, fp
0f998     08 4E 85 F1 | 	sub	fp, #8
0f99c                 | ' t1=pop()
0f99c                 | ' ptra_val=converttoint(t1)
0f99c                 | ' t1=pop()
0f99c                 | ' addrval=converttoint(t1)
0f99c                 | ' if numpar=3 then 
0f99c     A7 FA 01 FB | 	rdlong	result1, fp
0f9a0     03 FA 0D F2 | 	cmp	result1, #3 wz
0f9a4     48 00 90 5D |  if_ne	jmp	#LR__1302
0f9a8     74 DE BF FD | 	call	#_pop
0f9ac     FF 16 02 F6 | 	mov	arg03, result3
0f9b0     08 00 00 FF 
0f9b4     10 4E 05 F1 | 	add	fp, ##4112
0f9b8     A7 FA 61 FC | 	wrlong	result1, fp
0f9bc     04 4E 05 F1 | 	add	fp, #4
0f9c0     A7 FC 61 FC | 	wrlong	result2, fp
0f9c4     04 4E 05 F1 | 	add	fp, #4
0f9c8     A7 16 62 FC | 	wrlong	arg03, fp
0f9cc     08 4E 85 F1 | 	sub	fp, #8
0f9d0     A7 12 02 F6 | 	mov	arg01, fp
0f9d4     08 00 00 FF 
0f9d8     10 4E 85 F1 | 	sub	fp, ##4112
0f9dc     24 E0 BF FD | 	call	#_converttoint
0f9e0     0C 4E 05 F1 | 	add	fp, #12
0f9e4     A7 FA 61 FC | 	wrlong	result1, fp
0f9e8     0C 4E 85 F1 | 	sub	fp, #12
0f9ec     0C 00 90 FD | 	jmp	#LR__1303
0f9f0                 | LR__1302
0f9f0     0C 4E 05 F1 | 	add	fp, #12
0f9f4     A7 20 68 FC | 	wrlong	#16, fp
0f9f8     0C 4E 85 F1 | 	sub	fp, #12
0f9fc                 | LR__1303
0f9fc                 | '     
0f9fc                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f9fc     08 4E 05 F1 | 	add	fp, #8
0fa00     A7 16 02 FB | 	rdlong	arg03, fp
0fa04     08 4E 85 F1 | 	sub	fp, #8
0fa08     00 04 00 FF 
0fa0c     01 16 56 F2 | 	cmps	arg03, ##524289 wc
0fa10     40 00 90 CD |  if_b	jmp	#LR__1304
0fa14     10 4E 05 F1 | 	add	fp, #16
0fa18     A7 12 02 F6 | 	mov	arg01, fp
0fa1c     08 4E 85 F1 | 	sub	fp, #8
0fa20     A7 14 02 FB | 	rdlong	arg02, fp
0fa24     08 4E 85 F1 | 	sub	fp, #8
0fa28     0C 16 C6 F9 | 	decod	arg03, #12
0fa2c     0B 00 00 FF 
0fa30     CC E4 05 F1 | 	add	objptr, ##5836
0fa34     80 74 B1 FD | 	call	#_psram_spin2_read1
0fa38     0B 00 00 FF 
0fa3c     CC E4 85 F1 | 	sub	objptr, ##5836
0fa40     10 4E 05 F1 | 	add	fp, #16
0fa44     A7 FA 01 F6 | 	mov	result1, fp
0fa48     08 4E 85 F1 | 	sub	fp, #8
0fa4c     A7 FA 61 FC | 	wrlong	result1, fp
0fa50     08 4E 85 F1 | 	sub	fp, #8
0fa54                 | LR__1304
0fa54     0C 4E 05 F1 | 	add	fp, #12
0fa58     A7 FA 01 FB | 	rdlong	result1, fp
0fa5c     04 4E 85 F1 | 	sub	fp, #4
0fa60     A7 14 02 FB | 	rdlong	arg02, fp
0fa64     04 4E 85 F1 | 	sub	fp, #4
0fa68     A7 16 02 FB | 	rdlong	arg03, fp
0fa6c                 | ' 
0fa6c                 | '  asm
0fa6c     28 16 62 FD | 	setq	arg03
0fa70     0A FB F1 FC | 	coginit	result1, arg02 wc
0fa74                 | '  
0fa74                 | ' return cog 
0fa74     08 4E 05 F1 | 	add	fp, #8
0fa78     A7 FA 61 FC | 	wrlong	result1, fp
0fa7c     08 00 00 FF 
0fa80     04 4E 05 F1 | 	add	fp, ##4100
0fa84     A7 FA 61 FC | 	wrlong	result1, fp
0fa88     08 4E 05 F1 | 	add	fp, #8
0fa8c     A7 38 68 FC | 	wrlong	#28, fp
0fa90     08 4E 85 F1 | 	sub	fp, #8
0fa94     A7 12 02 F6 | 	mov	arg01, fp
0fa98     08 00 00 FF 
0fa9c     10 4E 85 F1 | 	sub	fp, ##4112
0faa0     14 DE BF FD | 	call	#_push
0faa4                 | LR__1305
0faa4     A7 F0 03 F6 | 	mov	ptra, fp
0faa8     B2 00 A0 FD | 	call	#popregs_
0faac                 | _do_coginit_ret
0faac     2D 00 64 FD | 	ret
0fab0                 | 
0fab0                 | ' 
0fab0                 | ' '-------------------- cogstop
0fab0                 | ' 
0fab0                 | ' sub do_cogstop
0fab0                 | _do_cogstop
0fab0     00 4A 05 F6 | 	mov	COUNT_, #0
0fab4     A8 00 A0 FD | 	call	#pushregs_
0fab8     0C F0 07 F1 | 	add	ptra, #12
0fabc     60 DD BF FD | 	call	#_pop
0fac0     A7 FA 61 FC | 	wrlong	result1, fp
0fac4     04 4E 05 F1 | 	add	fp, #4
0fac8     A7 FC 61 FC | 	wrlong	result2, fp
0facc     04 4E 05 F1 | 	add	fp, #4
0fad0     A7 FE 61 FC | 	wrlong	result3, fp
0fad4     08 4E 85 F1 | 	sub	fp, #8
0fad8     A7 12 02 F6 | 	mov	arg01, fp
0fadc     24 DF BF FD | 	call	#_converttoint
0fae0     03 FA 61 FD | 	cogstop	result1
0fae4     A7 F0 03 F6 | 	mov	ptra, fp
0fae8     B2 00 A0 FD | 	call	#popregs_
0faec                 | _do_cogstop_ret
0faec     2D 00 64 FD | 	ret
0faf0                 | 
0faf0                 | ' 
0faf0                 | ' '-------------------- color
0faf0                 | ' 
0faf0                 | ' sub do_color
0faf0                 | _do_color
0faf0     03 4A 05 F6 | 	mov	COUNT_, #3
0faf4     A8 00 A0 FD | 	call	#pushregs_
0faf8     24 DD BF FD | 	call	#_pop
0fafc     FD 26 02 F6 | 	mov	local01, result1
0fb00     FE 28 02 F6 | 	mov	local02, result2
0fb04     FF 2A 02 F6 | 	mov	local03, result3
0fb08     37 00 00 FF 
0fb0c     28 E4 05 F1 | 	add	objptr, ##28200
0fb10     F2 26 62 FC | 	wrlong	local01, objptr
0fb14     37 00 00 FF 
0fb18     28 E4 85 F1 | 	sub	objptr, ##28200
0fb1c     A7 F0 03 F6 | 	mov	ptra, fp
0fb20     B2 00 A0 FD | 	call	#popregs_
0fb24                 | _do_color_ret
0fb24     2D 00 64 FD | 	ret
0fb28                 | 
0fb28                 | ' 
0fb28                 | ' '-------------------- copy
0fb28                 | ' 
0fb28                 | ' sub do_copy
0fb28                 | _do_copy
0fb28     08 4A 05 F6 | 	mov	COUNT_, #8
0fb2c     A8 00 A0 FD | 	call	#pushregs_
0fb30     EC DC BF FD | 	call	#_pop
0fb34     FD 26 02 F6 | 	mov	local01, result1
0fb38     FE 1A 02 F6 | 	mov	arg05, result2
0fb3c     FF 18 02 F6 | 	mov	arg04, result3
0fb40     0D 29 02 F6 | 	mov	local02, arg05
0fb44     0C 2B 02 F6 | 	mov	local03, arg04
0fb48     D4 DC BF FD | 	call	#_pop
0fb4c     FE 1A 02 F6 | 	mov	arg05, result2
0fb50     FF 18 02 F6 | 	mov	arg04, result3
0fb54     FD 2C 02 F6 | 	mov	local04, result1
0fb58     0D 2F 02 F6 | 	mov	local05, arg05
0fb5c     0C 31 02 F6 | 	mov	local06, arg04
0fb60                 | ' 
0fb60                 | ' t1=pop()
0fb60                 | ' t2=pop()
0fb60                 | ' if t2.result_type=result_string2 then 
0fb60     2B 30 0E F2 | 	cmp	local06, #43 wz
0fb64     10 00 90 5D |  if_ne	jmp	#LR__1310
0fb68     16 13 02 F6 | 	mov	arg01, local04
0fb6c     28 DE BF FD | 	call	#_convertstring
0fb70     FD 32 02 F6 | 	mov	local07, result1
0fb74     2C 00 90 FD | 	jmp	#LR__1312
0fb78                 | LR__1310
0fb78     1F 30 0E F2 | 	cmp	local06, #31 wz
0fb7c     16 33 02 A6 |  if_e	mov	local07, local04
0fb80     20 00 90 AD |  if_e	jmp	#LR__1311
0fb84     50 00 00 FF 
0fb88     F0 E4 05 F1 | 	add	objptr, ##41200
0fb8c     F2 14 02 FB | 	rdlong	arg02, objptr
0fb90     50 00 00 FF 
0fb94     F0 E4 85 F1 | 	sub	objptr, ##41200
0fb98     0F 12 06 F6 | 	mov	arg01, #15
0fb9c     5C 45 B1 FD | 	call	#_printerror
0fba0                 | '   printerror(15,runheader(0)) : return
0fba0     58 03 90 FD | 	jmp	#LR__1319
0fba4                 | LR__1311
0fba4                 | LR__1312
0fba4                 | ' if t1.result_type=result_string2 then 
0fba4     2B 2A 0E F2 | 	cmp	local03, #43 wz
0fba8     10 00 90 5D |  if_ne	jmp	#LR__1313
0fbac     13 13 02 F6 | 	mov	arg01, local01
0fbb0     E4 DD BF FD | 	call	#_convertstring
0fbb4     FD 34 02 F6 | 	mov	local08, result1
0fbb8     2C 00 90 FD | 	jmp	#LR__1315
0fbbc                 | LR__1313
0fbbc     1F 2A 0E F2 | 	cmp	local03, #31 wz
0fbc0     13 35 02 A6 |  if_e	mov	local08, local01
0fbc4     20 00 90 AD |  if_e	jmp	#LR__1314
0fbc8     50 00 00 FF 
0fbcc     F0 E4 05 F1 | 	add	objptr, ##41200
0fbd0     F2 14 02 FB | 	rdlong	arg02, objptr
0fbd4     50 00 00 FF 
0fbd8     F0 E4 85 F1 | 	sub	objptr, ##41200
0fbdc     0F 12 06 F6 | 	mov	arg01, #15
0fbe0     18 45 B1 FD | 	call	#_printerror
0fbe4                 | '   printerror(15,runheader(0)) : return
0fbe4     14 03 90 FD | 	jmp	#LR__1319
0fbe8                 | LR__1314
0fbe8                 | LR__1315
0fbe8                 | ' 
0fbe8                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0fbe8     09 12 06 F6 | 	mov	arg01, #9
0fbec     19 15 02 F6 | 	mov	arg02, local07
0fbf0     00 16 06 F6 | 	mov	arg03, #0
0fbf4     68 8B B1 FD | 	call	#__system___basic_open_string
0fbf8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fbfc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fc00     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0fc04     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fc08     52 00 00 FF 
0fc0c     10 E5 05 F1 | 	add	objptr, ##42256
0fc10     F2 FA 61 FC | 	wrlong	result1, objptr
0fc14     52 00 00 FF 
0fc18     10 E5 85 F1 | 	sub	objptr, ##42256
0fc1c     0C 01 90 AD |  if_e	jmp	#LR__1316
0fc20     00 12 06 F6 | 	mov	arg01, #0
0fc24     E4 DB B1 FD | 	call	#__system___getiolock_0620
0fc28     FD 12 02 F6 | 	mov	arg01, result1
0fc2c     2C 7F B1 FD | 	call	#__system___lockmem
0fc30     BF 01 00 FF 
0fc34     45 15 06 F6 | 	mov	arg02, ##@LR__6020
0fc38     00 12 06 F6 | 	mov	arg01, #0
0fc3c     00 16 06 F6 | 	mov	arg03, #0
0fc40     10 8C B1 FD | 	call	#__system___basic_print_string
0fc44     52 00 00 FF 
0fc48     10 E5 05 F1 | 	add	objptr, ##42256
0fc4c     F2 14 02 FB | 	rdlong	arg02, objptr
0fc50     52 00 00 FF 
0fc54     10 E5 85 F1 | 	sub	objptr, ##42256
0fc58     00 12 06 F6 | 	mov	arg01, #0
0fc5c     00 16 06 F6 | 	mov	arg03, #0
0fc60     0A 18 06 F6 | 	mov	arg04, #10
0fc64     30 8C B1 FD | 	call	#__system___basic_print_integer
0fc68     BF 01 00 FF 
0fc6c     55 15 06 F6 | 	mov	arg02, ##@LR__6021
0fc70     00 12 06 F6 | 	mov	arg01, #0
0fc74     00 16 06 F6 | 	mov	arg03, #0
0fc78     D8 8B B1 FD | 	call	#__system___basic_print_string
0fc7c     50 00 00 FF 
0fc80     F0 E4 05 F1 | 	add	objptr, ##41200
0fc84     F2 14 02 FB | 	rdlong	arg02, objptr
0fc88     50 00 00 FF 
0fc8c     F0 E4 85 F1 | 	sub	objptr, ##41200
0fc90     00 12 06 F6 | 	mov	arg01, #0
0fc94     00 16 06 F6 | 	mov	arg03, #0
0fc98     0A 18 06 F6 | 	mov	arg04, #10
0fc9c     38 8C B1 FD | 	call	#__system___basic_print_unsigned
0fca0     BF 01 00 FF 
0fca4     5F 15 06 F6 | 	mov	arg02, ##@LR__6022
0fca8     00 12 06 F6 | 	mov	arg01, #0
0fcac     00 16 06 F6 | 	mov	arg03, #0
0fcb0     A0 8B B1 FD | 	call	#__system___basic_print_string
0fcb4     00 34 06 F6 | 	mov	local08, #0
0fcb8     52 00 00 FF 
0fcbc     10 E5 05 F1 | 	add	objptr, ##42256
0fcc0     F2 12 02 FB | 	rdlong	arg01, objptr
0fcc4     52 00 00 FF 
0fcc8     10 E5 85 F1 | 	sub	objptr, ##42256
0fccc     1C A8 B1 FD | 	call	#__system___strerror
0fcd0     FD 14 02 F6 | 	mov	arg02, result1
0fcd4     1A 13 02 F6 | 	mov	arg01, local08
0fcd8     00 16 06 F6 | 	mov	arg03, #0
0fcdc     74 8B B1 FD | 	call	#__system___basic_print_string
0fce0     BF 01 00 FF 
0fce4     62 15 06 F6 | 	mov	arg02, ##@LR__6023
0fce8     00 12 06 F6 | 	mov	arg01, #0
0fcec     00 16 06 F6 | 	mov	arg03, #0
0fcf0     60 8B B1 FD | 	call	#__system___basic_print_string
0fcf4     00 12 06 F6 | 	mov	arg01, #0
0fcf8     19 15 02 F6 | 	mov	arg02, local07
0fcfc     00 16 06 F6 | 	mov	arg03, #0
0fd00     50 8B B1 FD | 	call	#__system___basic_print_string
0fd04     00 12 06 F6 | 	mov	arg01, #0
0fd08     0A 14 06 F6 | 	mov	arg02, #10
0fd0c     00 16 06 F6 | 	mov	arg03, #0
0fd10     E8 8A B1 FD | 	call	#__system___basic_print_char
0fd14     00 12 06 F6 | 	mov	arg01, #0
0fd18     F0 DA B1 FD | 	call	#__system___getiolock_0620
0fd1c     FD 00 68 FC | 	wrlong	#0, result1
0fd20     09 12 06 F6 | 	mov	arg01, #9
0fd24     94 D1 B1 FD | 	call	#__system__close
0fd28     D0 01 90 FD | 	jmp	#LR__1319
0fd2c                 | LR__1316
0fd2c                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0fd2c     08 12 06 F6 | 	mov	arg01, #8
0fd30     1A 15 02 F6 | 	mov	arg02, local08
0fd34     0D 16 06 F6 | 	mov	arg03, #13
0fd38     24 8A B1 FD | 	call	#__system___basic_open_string
0fd3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fd40     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fd44     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0fd48     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fd4c     52 00 00 FF 
0fd50     10 E5 05 F1 | 	add	objptr, ##42256
0fd54     F2 FA 61 FC | 	wrlong	result1, objptr
0fd58     52 00 00 FF 
0fd5c     10 E5 85 F1 | 	sub	objptr, ##42256
0fd60     0C 01 90 AD |  if_e	jmp	#LR__1317
0fd64     00 12 06 F6 | 	mov	arg01, #0
0fd68     A0 DA B1 FD | 	call	#__system___getiolock_0620
0fd6c     FD 12 02 F6 | 	mov	arg01, result1
0fd70     E8 7D B1 FD | 	call	#__system___lockmem
0fd74     BF 01 00 FF 
0fd78     70 15 06 F6 | 	mov	arg02, ##@LR__6024
0fd7c     00 12 06 F6 | 	mov	arg01, #0
0fd80     00 16 06 F6 | 	mov	arg03, #0
0fd84     CC 8A B1 FD | 	call	#__system___basic_print_string
0fd88     52 00 00 FF 
0fd8c     10 E5 05 F1 | 	add	objptr, ##42256
0fd90     F2 14 02 FB | 	rdlong	arg02, objptr
0fd94     52 00 00 FF 
0fd98     10 E5 85 F1 | 	sub	objptr, ##42256
0fd9c     00 12 06 F6 | 	mov	arg01, #0
0fda0     00 16 06 F6 | 	mov	arg03, #0
0fda4     0A 18 06 F6 | 	mov	arg04, #10
0fda8     EC 8A B1 FD | 	call	#__system___basic_print_integer
0fdac     BF 01 00 FF 
0fdb0     80 15 06 F6 | 	mov	arg02, ##@LR__6025
0fdb4     00 12 06 F6 | 	mov	arg01, #0
0fdb8     00 16 06 F6 | 	mov	arg03, #0
0fdbc     94 8A B1 FD | 	call	#__system___basic_print_string
0fdc0     50 00 00 FF 
0fdc4     F0 E4 05 F1 | 	add	objptr, ##41200
0fdc8     F2 14 02 FB | 	rdlong	arg02, objptr
0fdcc     50 00 00 FF 
0fdd0     F0 E4 85 F1 | 	sub	objptr, ##41200
0fdd4     00 12 06 F6 | 	mov	arg01, #0
0fdd8     00 16 06 F6 | 	mov	arg03, #0
0fddc     0A 18 06 F6 | 	mov	arg04, #10
0fde0     F4 8A B1 FD | 	call	#__system___basic_print_unsigned
0fde4     BF 01 00 FF 
0fde8     8A 15 06 F6 | 	mov	arg02, ##@LR__6026
0fdec     00 12 06 F6 | 	mov	arg01, #0
0fdf0     00 16 06 F6 | 	mov	arg03, #0
0fdf4     5C 8A B1 FD | 	call	#__system___basic_print_string
0fdf8     00 32 06 F6 | 	mov	local07, #0
0fdfc     52 00 00 FF 
0fe00     10 E5 05 F1 | 	add	objptr, ##42256
0fe04     F2 12 02 FB | 	rdlong	arg01, objptr
0fe08     52 00 00 FF 
0fe0c     10 E5 85 F1 | 	sub	objptr, ##42256
0fe10     D8 A6 B1 FD | 	call	#__system___strerror
0fe14     FD 14 02 F6 | 	mov	arg02, result1
0fe18     19 13 02 F6 | 	mov	arg01, local07
0fe1c     00 16 06 F6 | 	mov	arg03, #0
0fe20     30 8A B1 FD | 	call	#__system___basic_print_string
0fe24     BF 01 00 FF 
0fe28     8D 15 06 F6 | 	mov	arg02, ##@LR__6027
0fe2c     00 12 06 F6 | 	mov	arg01, #0
0fe30     00 16 06 F6 | 	mov	arg03, #0
0fe34     1C 8A B1 FD | 	call	#__system___basic_print_string
0fe38     00 12 06 F6 | 	mov	arg01, #0
0fe3c     1A 15 02 F6 | 	mov	arg02, local08
0fe40     00 16 06 F6 | 	mov	arg03, #0
0fe44     0C 8A B1 FD | 	call	#__system___basic_print_string
0fe48     00 12 06 F6 | 	mov	arg01, #0
0fe4c     0A 14 06 F6 | 	mov	arg02, #10
0fe50     00 16 06 F6 | 	mov	arg03, #0
0fe54     A4 89 B1 FD | 	call	#__system___basic_print_char
0fe58     00 12 06 F6 | 	mov	arg01, #0
0fe5c     AC D9 B1 FD | 	call	#__system___getiolock_0620
0fe60     FD 00 68 FC | 	wrlong	#0, result1
0fe64     08 12 06 F6 | 	mov	arg01, #8
0fe68     50 D0 B1 FD | 	call	#__system__close
0fe6c     8C 00 90 FD | 	jmp	#LR__1319
0fe70                 | LR__1317
0fe70                 | ' 
0fe70                 | ' do
0fe70                 | LR__1318
0fe70                 | '   get #9,,block(0),1024,r
0fe70     4E 00 00 FF 
0fe74     B4 E4 05 F1 | 	add	objptr, ##40116
0fe78     F2 16 02 F6 | 	mov	arg03, objptr
0fe7c     4E 00 00 FF 
0fe80     B4 E4 85 F1 | 	sub	objptr, ##40116
0fe84     09 12 06 F6 | 	mov	arg01, #9
0fe88     00 14 06 F6 | 	mov	arg02, #0
0fe8c     0A 18 C6 F9 | 	decod	arg04, #10
0fe90     01 1A 06 F6 | 	mov	arg05, #1
0fe94     38 8B B1 FD | 	call	#__system___basic_get
0fe98     52 00 00 FF 
0fe9c     4C E5 05 F1 | 	add	objptr, ##42316
0fea0     F2 FA 61 FC | 	wrlong	result1, objptr
0fea4                 | '   put #8,,block(0),r
0fea4     04 00 00 FF 
0fea8     98 E4 85 F1 | 	sub	objptr, ##2200
0feac     F2 16 02 F6 | 	mov	arg03, objptr
0feb0     FD 18 02 F6 | 	mov	arg04, result1
0feb4     4E 00 00 FF 
0feb8     B4 E4 85 F1 | 	sub	objptr, ##40116
0febc     08 12 06 F6 | 	mov	arg01, #8
0fec0     00 14 06 F6 | 	mov	arg02, #0
0fec4     01 1A 06 F6 | 	mov	arg05, #1
0fec8     98 8A B1 FD | 	call	#__system___basic_put
0fecc     52 00 00 FF 
0fed0     4C E5 05 F1 | 	add	objptr, ##42316
0fed4     F2 34 02 FB | 	rdlong	local08, objptr
0fed8     52 00 00 FF 
0fedc     4C E5 85 F1 | 	sub	objptr, ##42316
0fee0     02 00 00 FF 
0fee4     00 34 0E F2 | 	cmp	local08, ##1024 wz
0fee8     84 FF 9F AD |  if_e	jmp	#LR__1318
0feec                 | ' close #8
0feec     08 12 06 F6 | 	mov	arg01, #8
0fef0     C8 CF B1 FD | 	call	#__system__close
0fef4                 | ' close #9
0fef4     09 12 06 F6 | 	mov	arg01, #9
0fef8     C0 CF B1 FD | 	call	#__system__close
0fefc                 | LR__1319
0fefc     A7 F0 03 F6 | 	mov	ptra, fp
0ff00     B2 00 A0 FD | 	call	#popregs_
0ff04                 | _do_copy_ret
0ff04     2D 00 64 FD | 	ret
0ff08                 | 
0ff08                 | ' 
0ff08                 | ' '-------------------- cos
0ff08                 | ' 
0ff08                 | ' sub do_cos
0ff08                 | _do_cos
0ff08     01 4A 05 F6 | 	mov	COUNT_, #1
0ff0c     A8 00 A0 FD | 	call	#pushregs_
0ff10     10 F0 07 F1 | 	add	ptra, #16
0ff14     4A 00 00 FF 
0ff18     80 E4 05 F1 | 	add	objptr, ##38016
0ff1c     F2 26 02 FB | 	rdlong	local01, objptr
0ff20     13 17 02 F6 | 	mov	arg03, local01
0ff24     01 16 66 F0 | 	shl	arg03, #1
0ff28     13 17 02 F1 | 	add	arg03, local01
0ff2c     02 16 66 F0 | 	shl	arg03, #2
0ff30     03 00 00 FF 
0ff34     04 E4 85 F1 | 	sub	objptr, ##1540
0ff38     F2 16 02 F1 | 	add	arg03, objptr
0ff3c     0B 17 02 FB | 	rdlong	arg03, arg03
0ff40     0C 4E 05 F1 | 	add	fp, #12
0ff44     A7 16 62 FC | 	wrlong	arg03, fp
0ff48                 | ' 
0ff48                 | ' numpar=compiledline(lineptr_e).result.uresult
0ff48                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0ff48     0C 4E 85 F1 | 	sub	fp, #12
0ff4c     02 16 16 F2 | 	cmp	arg03, #2 wc
0ff50     47 00 00 FF 
0ff54     7C E4 85 F1 | 	sub	objptr, ##36476
0ff58     0C 4E 05 C1 |  if_b	add	fp, #12
0ff5c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0ff60     0C 4E 85 C1 |  if_b	sub	fp, #12
0ff64     40 00 90 4D |  if_c_and_nz	jmp	#LR__1320
0ff68     00 12 06 F6 | 	mov	arg01, #0
0ff6c     9C D8 B1 FD | 	call	#__system___getiolock_0620
0ff70     FD 12 02 F6 | 	mov	arg01, result1
0ff74     E4 7B B1 FD | 	call	#__system___lockmem
0ff78     BF 01 00 FF 
0ff7c     9B 15 06 F6 | 	mov	arg02, ##@LR__6028
0ff80     00 12 06 F6 | 	mov	arg01, #0
0ff84     00 16 06 F6 | 	mov	arg03, #0
0ff88     C8 88 B1 FD | 	call	#__system___basic_print_string
0ff8c     00 12 06 F6 | 	mov	arg01, #0
0ff90     78 D8 B1 FD | 	call	#__system___getiolock_0620
0ff94     FD 00 68 FC | 	wrlong	#0, result1
0ff98     27 12 06 F6 | 	mov	arg01, #39
0ff9c     00 14 06 F6 | 	mov	arg02, #0
0ffa0     58 41 B1 FD | 	call	#_printerror
0ffa4     78 00 90 FD | 	jmp	#LR__1321
0ffa8                 | LR__1320
0ffa8     74 D8 BF FD | 	call	#_pop
0ffac     A7 FA 61 FC | 	wrlong	result1, fp
0ffb0     04 4E 05 F1 | 	add	fp, #4
0ffb4     A7 FC 61 FC | 	wrlong	result2, fp
0ffb8     04 4E 05 F1 | 	add	fp, #4
0ffbc     A7 FE 61 FC | 	wrlong	result3, fp
0ffc0     08 4E 85 F1 | 	sub	fp, #8
0ffc4     52 00 00 FF 
0ffc8     E0 E4 05 F1 | 	add	objptr, ##42208
0ffcc     F2 26 02 FB | 	rdlong	local01, objptr
0ffd0     52 00 00 FF 
0ffd4     E0 E4 85 F1 | 	sub	objptr, ##42208
0ffd8     A7 12 02 F6 | 	mov	arg01, fp
0ffdc     E0 DA BF FD | 	call	#_converttofloat
0ffe0     FD 14 02 F6 | 	mov	arg02, result1
0ffe4     13 13 02 F6 | 	mov	arg01, local01
0ffe8     EC A9 B1 FD | 	call	#__system___float_mul
0ffec     FD 14 02 F6 | 	mov	arg02, result1
0fff0     87 E4 1F FF 
0fff4     DB 13 06 F6 | 	mov	arg01, ##1070141403
0fff8     1F 14 E6 F4 | 	bitnot	arg02, #31
0fffc     08 A6 B1 FD | 	call	#__system___float_add
10000     FD 12 02 F6 | 	mov	arg01, result1
10004     34 B3 B1 FD | 	call	#__system____builtin_sinf
10008     A7 FA 61 FC | 	wrlong	result1, fp
1000c     08 4E 05 F1 | 	add	fp, #8
10010     A7 3C 68 FC | 	wrlong	#30, fp
10014     08 4E 85 F1 | 	sub	fp, #8
10018     A7 12 02 F6 | 	mov	arg01, fp
1001c     98 D8 BF FD | 	call	#_push
10020                 | LR__1321
10020     A7 F0 03 F6 | 	mov	ptra, fp
10024     B2 00 A0 FD | 	call	#popregs_
10028                 | _do_cos_ret
10028     2D 00 64 FD | 	ret
1002c                 | 
1002c                 | ' 
1002c                 | ' '-------------------- cursor
1002c                 | ' 
1002c                 | ' sub do_cursor
1002c                 | _do_cursor
1002c     F0 D7 BF FD | 	call	#_pop
10030     00 FA 4D F2 | 	cmps	result1, #0 wz
10034                 | ' t1=pop()
10034                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
10034     14 00 90 5D |  if_ne	jmp	#LR__1330
10038     11 12 06 F6 | 	mov	arg01, #17
1003c     00 14 06 F6 | 	mov	arg02, #0
10040     00 16 06 F6 | 	mov	arg03, #0
10044     24 51 B1 FD | 	call	#_hg010b_spin2_setspritesize
10048     10 00 90 FD | 	jmp	#LR__1331
1004c                 | LR__1330
1004c     11 12 06 F6 | 	mov	arg01, #17
10050     08 14 06 F6 | 	mov	arg02, #8
10054     10 16 06 F6 | 	mov	arg03, #16
10058     10 51 B1 FD | 	call	#_hg010b_spin2_setspritesize
1005c                 | LR__1331
1005c                 | _do_cursor_ret
1005c     2D 00 64 FD | 	ret
10060                 | 
10060                 | ' 
10060                 | ' '-------------------- defchar
10060                 | ' 
10060                 | ' sub do_defchar
10060                 | _do_defchar
10060     01 4A 05 F6 | 	mov	COUNT_, #1
10064     A8 00 A0 FD | 	call	#pushregs_
10068     28 F0 07 F1 | 	add	ptra, #40
1006c     B0 D7 BF FD | 	call	#_pop
10070     FF 14 02 F6 | 	mov	arg02, result3
10074     A7 FA 61 FC | 	wrlong	result1, fp
10078     04 4E 05 F1 | 	add	fp, #4
1007c     A7 FC 61 FC | 	wrlong	result2, fp
10080     04 4E 05 F1 | 	add	fp, #4
10084     A7 14 62 FC | 	wrlong	arg02, fp
10088     08 4E 85 F1 | 	sub	fp, #8
1008c     A7 12 02 F6 | 	mov	arg01, fp
10090     70 D9 BF FD | 	call	#_converttoint
10094     FD 14 02 F6 | 	mov	arg02, result1
10098     10 4E 05 F1 | 	add	fp, #16
1009c     A7 14 62 FC | 	wrlong	arg02, fp
100a0     10 4E 85 F1 | 	sub	fp, #16
100a4     78 D7 BF FD | 	call	#_pop
100a8     FF 14 02 F6 | 	mov	arg02, result3
100ac     A7 FA 61 FC | 	wrlong	result1, fp
100b0     04 4E 05 F1 | 	add	fp, #4
100b4     A7 FC 61 FC | 	wrlong	result2, fp
100b8     04 4E 05 F1 | 	add	fp, #4
100bc     A7 14 62 FC | 	wrlong	arg02, fp
100c0     08 4E 85 F1 | 	sub	fp, #8
100c4     A7 12 02 F6 | 	mov	arg01, fp
100c8     38 D9 BF FD | 	call	#_converttoint
100cc     0C 4E 05 F1 | 	add	fp, #12
100d0     A7 FA 61 FC | 	wrlong	result1, fp
100d4                 | ' 
100d4                 | ' t1=pop() : cptr=converttoint(t1)
100d4                 | ' t1=pop() : c=converttoint(t1)
100d4                 | ' if cptr<$80000 then 
100d4     04 4E 05 F1 | 	add	fp, #4
100d8     A7 14 02 FB | 	rdlong	arg02, fp
100dc     10 4E 85 F1 | 	sub	fp, #16
100e0     00 04 00 FF 
100e4     00 14 16 F2 | 	cmp	arg02, ##524288 wc
100e8     1C 00 90 3D |  if_ae	jmp	#LR__1340
100ec     0C 4E 05 F1 | 	add	fp, #12
100f0     A7 12 02 FB | 	rdlong	arg01, fp
100f4     04 4E 05 F1 | 	add	fp, #4
100f8     A7 14 02 FB | 	rdlong	arg02, fp
100fc     10 4E 85 F1 | 	sub	fp, #16
10100     78 5C B1 FD | 	call	#_hg010b_spin2_defchar
10104     60 00 90 FD | 	jmp	#LR__1342
10108                 | LR__1340
10108                 | '   for i=0 to 15: buf(i)=pspeek(cptr+i): next i
10108     24 4E 05 F1 | 	add	fp, #36
1010c     A7 00 68 FC | 	wrlong	#0, fp
10110                 | LR__1341
10110     A7 14 02 FB | 	rdlong	arg02, fp
10114     0A 27 02 F6 | 	mov	local01, arg02
10118     10 4E 85 F1 | 	sub	fp, #16
1011c     A7 26 02 F1 | 	add	local01, fp
10120     04 4E 85 F1 | 	sub	fp, #4
10124     A7 12 02 FB | 	rdlong	arg01, fp
10128     10 4E 85 F1 | 	sub	fp, #16
1012c     0A 13 02 F1 | 	add	arg01, arg02
10130     40 42 B1 FD | 	call	#_pspeek
10134     13 FB 41 FC | 	wrbyte	result1, local01
10138     24 4E 05 F1 | 	add	fp, #36
1013c     A7 26 02 FB | 	rdlong	local01, fp
10140     01 26 06 F1 | 	add	local01, #1
10144     A7 26 62 FC | 	wrlong	local01, fp
10148     10 26 56 F2 | 	cmps	local01, #16 wc
1014c     C0 FF 9F CD |  if_b	jmp	#LR__1341
10150     18 4E 85 F1 | 	sub	fp, #24
10154     A7 12 02 FB | 	rdlong	arg01, fp
10158     08 4E 05 F1 | 	add	fp, #8
1015c     A7 14 02 F6 | 	mov	arg02, fp
10160     14 4E 85 F1 | 	sub	fp, #20
10164     14 5C B1 FD | 	call	#_hg010b_spin2_defchar
10168                 | LR__1342
10168     A7 F0 03 F6 | 	mov	ptra, fp
1016c     B2 00 A0 FD | 	call	#popregs_
10170                 | _do_defchar_ret
10170     2D 00 64 FD | 	ret
10174                 | 
10174                 | ' 
10174                 | ' '-------------------- defenv
10174                 | ' 
10174                 | ' sub do_defenv
10174                 | _do_defenv
10174     08 4A 05 F6 | 	mov	COUNT_, #8
10178     A8 00 A0 FD | 	call	#pushregs_
1017c     58 F0 07 F1 | 	add	ptra, #88
10180     4A 00 00 FF 
10184     80 E4 05 F1 | 	add	objptr, ##38016
10188     F2 26 02 FB | 	rdlong	local01, objptr
1018c     13 1B 02 F6 | 	mov	arg05, local01
10190     01 1A 66 F0 | 	shl	arg05, #1
10194     13 1B 02 F1 | 	add	arg05, local01
10198     02 1A 66 F0 | 	shl	arg05, #2
1019c     03 00 00 FF 
101a0     04 E4 85 F1 | 	sub	objptr, ##1540
101a4     F2 1A 02 F1 | 	add	arg05, objptr
101a8     0D 1B 02 FB | 	rdlong	arg05, arg05
101ac     10 4E 05 F1 | 	add	fp, #16
101b0     A7 1A 62 FC | 	wrlong	arg05, fp
101b4                 | ' 
101b4                 | ' numpar=compiledline(lineptr_e).result.uresult
101b4                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
101b4     10 4E 85 F1 | 	sub	fp, #16
101b8     02 1A 0E F2 | 	cmp	arg05, #2 wz
101bc     47 00 00 FF 
101c0     7C E4 85 F1 | 	sub	objptr, ##36476
101c4     10 4E 05 51 |  if_ne	add	fp, #16
101c8     A7 26 02 5B |  if_ne	rdlong	local01, fp
101cc     10 4E 85 51 |  if_ne	sub	fp, #16
101d0     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
101d4     90 0A 90 5D |  if_ne	jmp	#LR__1371
101d8                 | ' 
101d8                 | ' if numpar=2 then						' env from .h2 or from a pointer
101d8     10 4E 05 F1 | 	add	fp, #16
101dc     A7 26 02 FB | 	rdlong	local01, fp
101e0     10 4E 85 F1 | 	sub	fp, #16
101e4     02 26 0E F2 | 	cmp	local01, #2 wz
101e8     28 04 90 5D |  if_ne	jmp	#LR__1363
101ec     30 D6 BF FD | 	call	#_pop
101f0     FF 1A 02 F6 | 	mov	arg05, result3
101f4     40 4E 05 F1 | 	add	fp, #64
101f8     A7 FA 61 FC | 	wrlong	result1, fp
101fc     04 4E 05 F1 | 	add	fp, #4
10200     A7 FC 61 FC | 	wrlong	result2, fp
10204     04 4E 05 F1 | 	add	fp, #4
10208     A7 1A 62 FC | 	wrlong	arg05, fp
1020c                 | '   t1=pop()
1020c                 | '   if t1.result_type=result_string2 then 
1020c     48 4E 85 F1 | 	sub	fp, #72
10210     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10214     20 00 90 5D |  if_ne	jmp	#LR__1350
10218     40 4E 05 F1 | 	add	fp, #64
1021c     A7 12 02 FB | 	rdlong	arg01, fp
10220     40 4E 85 F1 | 	sub	fp, #64
10224     70 D7 BF FD | 	call	#_convertstring
10228     4C 4E 05 F1 | 	add	fp, #76
1022c     A7 FA 61 FC | 	wrlong	result1, fp
10230     4C 4E 85 F1 | 	sub	fp, #76
10234     58 00 90 FD | 	jmp	#LR__1353
10238                 | LR__1350
10238     48 4E 05 F1 | 	add	fp, #72
1023c     A7 26 02 FB | 	rdlong	local01, fp
10240     48 4E 85 F1 | 	sub	fp, #72
10244     1F 26 0E F2 | 	cmp	local01, #31 wz
10248     18 00 90 5D |  if_ne	jmp	#LR__1351
1024c     40 4E 05 F1 | 	add	fp, #64
10250     A7 26 02 FB | 	rdlong	local01, fp
10254     0C 4E 05 F1 | 	add	fp, #12
10258     A7 26 62 FC | 	wrlong	local01, fp
1025c     4C 4E 85 F1 | 	sub	fp, #76
10260     2C 00 90 FD | 	jmp	#LR__1352
10264                 | LR__1351
10264     BF 01 00 FF 
10268     A1 27 06 F6 | 	mov	local01, ##@LR__6029
1026c     4C 4E 05 F1 | 	add	fp, #76
10270     A7 26 62 FC | 	wrlong	local01, fp
10274     0C 4E 85 F1 | 	sub	fp, #12
10278     A7 12 02 F6 | 	mov	arg01, fp
1027c     40 4E 85 F1 | 	sub	fp, #64
10280     80 D7 BF FD | 	call	#_converttoint
10284     1C 4E 05 F1 | 	add	fp, #28
10288     A7 FA 61 FC | 	wrlong	result1, fp
1028c     1C 4E 85 F1 | 	sub	fp, #28
10290                 | LR__1352
10290                 | LR__1353
10290                 | '   if s1<>"" then 
10290     4C 4E 05 F1 | 	add	fp, #76
10294     A7 12 02 FB | 	rdlong	arg01, fp
10298     4C 4E 85 F1 | 	sub	fp, #76
1029c     BF 01 00 FF 
102a0     A2 15 06 F6 | 	mov	arg02, ##@LR__6030
102a4     DC 78 B1 FD | 	call	#__system___string_cmp
102a8     00 FA 0D F2 | 	cmp	result1, #0 wz
102ac     28 02 90 AD |  if_e	jmp	#LR__1357
102b0     6C D5 BF FD | 	call	#_pop
102b4     FF 26 02 F6 | 	mov	local01, result3
102b8     40 4E 05 F1 | 	add	fp, #64
102bc     A7 FA 61 FC | 	wrlong	result1, fp
102c0     04 4E 05 F1 | 	add	fp, #4
102c4     A7 FC 61 FC | 	wrlong	result2, fp
102c8     04 4E 05 F1 | 	add	fp, #4
102cc     A7 26 62 FC | 	wrlong	local01, fp
102d0     08 4E 85 F1 | 	sub	fp, #8
102d4     A7 12 02 F6 | 	mov	arg01, fp
102d8     40 4E 85 F1 | 	sub	fp, #64
102dc     24 D7 BF FD | 	call	#_converttoint
102e0     18 4E 05 F1 | 	add	fp, #24
102e4     A7 FA 61 FC | 	wrlong	result1, fp
102e8     18 4E 85 F1 | 	sub	fp, #24
102ec                 | '     t1=pop()
102ec                 | '     channel=converttoint(t1) 
102ec                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
102ec     09 12 06 F6 | 	mov	arg01, #9
102f0     C8 CB B1 FD | 	call	#__system__close
102f4     09 26 06 F6 | 	mov	local01, #9
102f8     BF 01 00 FF 
102fc     A3 13 06 F6 | 	mov	arg01, ##@LR__6031
10300     4C 4E 05 F1 | 	add	fp, #76
10304     A7 14 02 FB | 	rdlong	arg02, fp
10308     4C 4E 85 F1 | 	sub	fp, #76
1030c     A8 78 B1 FD | 	call	#__system___string_concat
10310     FD 14 02 F6 | 	mov	arg02, result1
10314     13 13 02 F6 | 	mov	arg01, local01
10318     00 16 06 F6 | 	mov	arg03, #0
1031c     40 84 B1 FD | 	call	#__system___basic_open_string
10320     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10324     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10328     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
1032c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10330     0C 4E 05 F1 | 	add	fp, #12
10334     A7 FA 61 FC | 	wrlong	result1, fp
10338                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10338     0C 4E 85 F1 | 	sub	fp, #12
1033c     A0 00 90 AD |  if_e	jmp	#LR__1354
10340     00 12 06 F6 | 	mov	arg01, #0
10344     C4 D4 B1 FD | 	call	#__system___getiolock_0620
10348     FD 12 02 F6 | 	mov	arg01, result1
1034c     0C 78 B1 FD | 	call	#__system___lockmem
10350     BF 01 00 FF 
10354     B0 15 06 F6 | 	mov	arg02, ##@LR__6032
10358     00 12 06 F6 | 	mov	arg01, #0
1035c     00 16 06 F6 | 	mov	arg03, #0
10360     F0 84 B1 FD | 	call	#__system___basic_print_string
10364     0C 4E 05 F1 | 	add	fp, #12
10368     A7 14 02 FB | 	rdlong	arg02, fp
1036c     0C 4E 85 F1 | 	sub	fp, #12
10370     00 12 06 F6 | 	mov	arg01, #0
10374     00 16 06 F6 | 	mov	arg03, #0
10378     0A 18 06 F6 | 	mov	arg04, #10
1037c     18 85 B1 FD | 	call	#__system___basic_print_integer
10380     BF 01 00 FF 
10384     BE 15 06 F6 | 	mov	arg02, ##@LR__6033
10388     00 12 06 F6 | 	mov	arg01, #0
1038c     00 16 06 F6 | 	mov	arg03, #0
10390     C0 84 B1 FD | 	call	#__system___basic_print_string
10394     00 26 06 F6 | 	mov	local01, #0
10398     0C 4E 05 F1 | 	add	fp, #12
1039c     A7 12 02 FB | 	rdlong	arg01, fp
103a0     0C 4E 85 F1 | 	sub	fp, #12
103a4     44 A1 B1 FD | 	call	#__system___strerror
103a8     FD 14 02 F6 | 	mov	arg02, result1
103ac     13 13 02 F6 | 	mov	arg01, local01
103b0     00 16 06 F6 | 	mov	arg03, #0
103b4     9C 84 B1 FD | 	call	#__system___basic_print_string
103b8     00 12 06 F6 | 	mov	arg01, #0
103bc     0A 14 06 F6 | 	mov	arg02, #10
103c0     00 16 06 F6 | 	mov	arg03, #0
103c4     34 84 B1 FD | 	call	#__system___basic_print_char
103c8     00 12 06 F6 | 	mov	arg01, #0
103cc     3C D4 B1 FD | 	call	#__system___getiolock_0620
103d0     FD 00 68 FC | 	wrlong	#0, result1
103d4     09 12 06 F6 | 	mov	arg01, #9
103d8     E0 CA B1 FD | 	call	#__system__close
103dc     88 08 90 FD | 	jmp	#LR__1371
103e0                 | LR__1354
103e0                 | '     get #9,17,envbuf8(channel,0),256
103e0     18 4E 05 F1 | 	add	fp, #24
103e4     A7 1A 02 FB | 	rdlong	arg05, fp
103e8     18 4E 85 F1 | 	sub	fp, #24
103ec     0D 17 02 F6 | 	mov	arg03, arg05
103f0     09 16 66 F0 | 	shl	arg03, #9
103f4     0D 17 02 F1 | 	add	arg03, arg05
103f8     0C 00 00 FF 
103fc     D8 E4 05 F1 | 	add	objptr, ##6360
10400     F2 16 02 F1 | 	add	arg03, objptr
10404     09 12 06 F6 | 	mov	arg01, #9
10408     11 14 06 F6 | 	mov	arg02, #17
1040c     00 19 06 F6 | 	mov	arg04, #256
10410     01 1A 06 F6 | 	mov	arg05, #1
10414     0C 00 00 FF 
10418     D8 E4 85 F1 | 	sub	objptr, ##6360
1041c     B0 85 B1 FD | 	call	#__system___basic_get
10420                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
10420     14 4E 05 F1 | 	add	fp, #20
10424     A7 FE 69 FC | 	wrlong	#255, fp
10428     14 4E 85 F1 | 	sub	fp, #20
1042c     0C 00 00 FF 
10430     D8 E4 05 F1 | 	add	objptr, ##6360
10434     97 30 48 FB | 	callpa	#(@LR__1356-@LR__1355)>>2,fcache_load_ptr_
10438                 | LR__1355
10438     18 4E 05 F1 | 	add	fp, #24
1043c     A7 16 02 FB | 	rdlong	arg03, fp
10440     0B 27 02 F6 | 	mov	local01, arg03
10444     09 26 66 F0 | 	shl	local01, #9
10448     F2 26 02 F1 | 	add	local01, objptr
1044c     04 4E 85 F1 | 	sub	fp, #4
10450     A7 1A 02 FB | 	rdlong	arg05, fp
10454     0D 19 02 F6 | 	mov	arg04, arg05
10458     01 18 66 F0 | 	shl	arg04, #1
1045c     13 19 02 F1 | 	add	arg04, local01
10460     0B 27 02 F6 | 	mov	local01, arg03
10464     09 26 66 F0 | 	shl	local01, #9
10468     0B 27 02 F1 | 	add	local01, arg03
1046c     F2 26 02 F1 | 	add	local01, objptr
10470     13 1B 02 F1 | 	add	arg05, local01
10474     0D 27 C2 FA | 	rdbyte	local01, arg05
10478     00 27 06 FA | 	mul	local01, #256
1047c     0C 27 52 FC | 	wrword	local01, arg04
10480     A7 26 02 FB | 	rdlong	local01, fp
10484     01 26 86 F1 | 	sub	local01, #1
10488     A7 26 62 FC | 	wrlong	local01, fp
1048c     14 4E 85 F1 | 	sub	fp, #20
10490     00 26 56 F2 | 	cmps	local01, #0 wc
10494     A0 FF 9F 3D |  if_ae	jmp	#LR__1355
10498                 | LR__1356
10498     0C 00 00 FF 
1049c     D8 E4 85 F1 | 	sub	objptr, ##6360
104a0                 | '     close #9
104a0     09 12 06 F6 | 	mov	arg01, #9
104a4     14 CA B1 FD | 	call	#__system__close
104a8     18 4E 05 F1 | 	add	fp, #24
104ac     A7 26 02 FB | 	rdlong	local01, fp
104b0     18 4E 85 F1 | 	sub	fp, #24
104b4     09 26 66 F0 | 	shl	local01, #9
104b8     0C 00 00 FF 
104bc     D8 E4 05 F1 | 	add	objptr, ##6360
104c0     F2 26 02 F1 | 	add	local01, objptr
104c4     FE 27 06 F1 | 	add	local01, #510
104c8     13 01 58 FC | 	wrword	#0, local01
104cc                 | '     envbuf(channel,255)=0                                                              
104cc                 | '     return
104cc     0C 00 00 FF 
104d0     D8 E4 85 F1 | 	sub	objptr, ##6360
104d4     90 07 90 FD | 	jmp	#LR__1371
104d8                 | LR__1357
104d8                 | '     if wptr < $80000 then 
104d8     1C 4E 05 F1 | 	add	fp, #28
104dc     A7 28 02 FB | 	rdlong	local02, fp
104e0     1C 4E 85 F1 | 	sub	fp, #28
104e4     00 04 00 FF 
104e8     00 28 56 F2 | 	cmps	local02, ##524288 wc
104ec     7C 00 90 3D |  if_ae	jmp	#LR__1360
104f0                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
104f0     14 4E 05 F1 | 	add	fp, #20
104f4     A7 00 68 FC | 	wrlong	#0, fp
104f8     14 4E 85 F1 | 	sub	fp, #20
104fc     0C 00 00 FF 
10500     D8 E4 05 F1 | 	add	objptr, ##6360
10504     97 2C 48 FB | 	callpa	#(@LR__1359-@LR__1358)>>2,fcache_load_ptr_
10508                 | LR__1358
10508     18 4E 05 F1 | 	add	fp, #24
1050c     A7 28 02 FB | 	rdlong	local02, fp
10510     09 28 66 F0 | 	shl	local02, #9
10514     F2 28 02 F1 | 	add	local02, objptr
10518     04 4E 85 F1 | 	sub	fp, #4
1051c     A7 26 02 FB | 	rdlong	local01, fp
10520     13 1B 02 F6 | 	mov	arg05, local01
10524     01 1A 66 F0 | 	shl	arg05, #1
10528     14 1B 02 F1 | 	add	arg05, local02
1052c     08 4E 05 F1 | 	add	fp, #8
10530     A7 12 02 FB | 	rdlong	arg01, fp
10534     01 26 66 F0 | 	shl	local01, #1
10538     13 13 02 F1 | 	add	arg01, local01
1053c     09 FB E1 FA | 	rdword	result1, arg01
10540     0D FB 51 FC | 	wrword	result1, arg05
10544     08 4E 85 F1 | 	sub	fp, #8
10548     A7 28 02 FB | 	rdlong	local02, fp
1054c     01 28 06 F1 | 	add	local02, #1
10550     A7 28 62 FC | 	wrlong	local02, fp
10554     14 4E 85 F1 | 	sub	fp, #20
10558     00 29 56 F2 | 	cmps	local02, #256 wc
1055c     A8 FF 9F CD |  if_b	jmp	#LR__1358
10560                 | LR__1359
10560     0C 00 00 FF 
10564     D8 E4 85 F1 | 	sub	objptr, ##6360
10568     78 00 90 FD | 	jmp	#LR__1362
1056c                 | LR__1360
1056c                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
1056c     14 4E 05 F1 | 	add	fp, #20
10570     A7 00 68 FC | 	wrlong	#0, fp
10574     14 4E 85 F1 | 	sub	fp, #20
10578                 | LR__1361
10578     18 4E 05 F1 | 	add	fp, #24
1057c     A7 28 02 FB | 	rdlong	local02, fp
10580     09 28 66 F0 | 	shl	local02, #9
10584     0C 00 00 FF 
10588     D8 E4 05 F1 | 	add	objptr, ##6360
1058c     F2 28 02 F1 | 	add	local02, objptr
10590     04 4E 85 F1 | 	sub	fp, #4
10594     A7 26 02 FB | 	rdlong	local01, fp
10598     13 2B 02 F6 | 	mov	local03, local01
1059c     01 2A 66 F0 | 	shl	local03, #1
105a0     14 2B 02 F1 | 	add	local03, local02
105a4     08 4E 05 F1 | 	add	fp, #8
105a8     A7 12 02 FB | 	rdlong	arg01, fp
105ac     1C 4E 85 F1 | 	sub	fp, #28
105b0     01 26 66 F0 | 	shl	local01, #1
105b4     13 13 02 F1 | 	add	arg01, local01
105b8     0C 00 00 FF 
105bc     D8 E4 85 F1 | 	sub	objptr, ##6360
105c0     60 3E B1 FD | 	call	#_psdpeek
105c4     15 FB 51 FC | 	wrword	result1, local03
105c8     14 4E 05 F1 | 	add	fp, #20
105cc     A7 2A 02 FB | 	rdlong	local03, fp
105d0     01 2A 06 F1 | 	add	local03, #1
105d4     A7 2A 62 FC | 	wrlong	local03, fp
105d8     14 4E 85 F1 | 	sub	fp, #20
105dc     00 2B 56 F2 | 	cmps	local03, #256 wc
105e0     94 FF 9F CD |  if_b	jmp	#LR__1361
105e4                 | LR__1362
105e4     18 4E 05 F1 | 	add	fp, #24
105e8     A7 2A 02 FB | 	rdlong	local03, fp
105ec     18 4E 85 F1 | 	sub	fp, #24
105f0     09 2A 66 F0 | 	shl	local03, #9
105f4     0C 00 00 FF 
105f8     D8 E4 05 F1 | 	add	objptr, ##6360
105fc     F2 2A 02 F1 | 	add	local03, objptr
10600     FE 2B 06 F1 | 	add	local03, #510
10604     15 01 58 FC | 	wrword	#0, local03
10608                 | '     envbuf(channel,255)=0
10608                 | '     return   
10608     0C 00 00 FF 
1060c     D8 E4 85 F1 | 	sub	objptr, ##6360
10610     54 06 90 FD | 	jmp	#LR__1371
10614                 | LR__1363
10614                 | ' 
10614                 | ' if numpar=5 then   						 'simple adsr
10614     10 4E 05 F1 | 	add	fp, #16
10618     A7 28 02 FB | 	rdlong	local02, fp
1061c     10 4E 85 F1 | 	sub	fp, #16
10620     05 28 0E F2 | 	cmp	local02, #5 wz
10624     14 06 90 5D |  if_ne	jmp	#LR__1370
10628     F4 D1 BF FD | 	call	#_pop
1062c     FF 26 02 F6 | 	mov	local01, result3
10630     40 4E 05 F1 | 	add	fp, #64
10634     A7 FA 61 FC | 	wrlong	result1, fp
10638     04 4E 05 F1 | 	add	fp, #4
1063c     A7 FC 61 FC | 	wrlong	result2, fp
10640     04 4E 05 F1 | 	add	fp, #4
10644     A7 26 62 FC | 	wrlong	local01, fp
10648     08 4E 85 F1 | 	sub	fp, #8
1064c     A7 12 02 F6 | 	mov	arg01, fp
10650     40 4E 85 F1 | 	sub	fp, #64
10654     68 D4 BF FD | 	call	#_converttofloat
10658     FD 28 02 F6 | 	mov	local02, result1
1065c     2C 4E 05 F1 | 	add	fp, #44
10660     A7 28 62 FC | 	wrlong	local02, fp
10664     2C 4E 85 F1 | 	sub	fp, #44
10668     B4 D1 BF FD | 	call	#_pop
1066c     FF 26 02 F6 | 	mov	local01, result3
10670     40 4E 05 F1 | 	add	fp, #64
10674     A7 FA 61 FC | 	wrlong	result1, fp
10678     04 4E 05 F1 | 	add	fp, #4
1067c     A7 FC 61 FC | 	wrlong	result2, fp
10680     04 4E 05 F1 | 	add	fp, #4
10684     A7 26 62 FC | 	wrlong	local01, fp
10688     08 4E 85 F1 | 	sub	fp, #8
1068c     A7 12 02 F6 | 	mov	arg01, fp
10690     40 4E 85 F1 | 	sub	fp, #64
10694     28 D4 BF FD | 	call	#_converttofloat
10698     FD 28 02 F6 | 	mov	local02, result1
1069c     28 4E 05 F1 | 	add	fp, #40
106a0     A7 28 62 FC | 	wrlong	local02, fp
106a4     28 4E 85 F1 | 	sub	fp, #40
106a8     74 D1 BF FD | 	call	#_pop
106ac     FF 26 02 F6 | 	mov	local01, result3
106b0     40 4E 05 F1 | 	add	fp, #64
106b4     A7 FA 61 FC | 	wrlong	result1, fp
106b8     04 4E 05 F1 | 	add	fp, #4
106bc     A7 FC 61 FC | 	wrlong	result2, fp
106c0     04 4E 05 F1 | 	add	fp, #4
106c4     A7 26 62 FC | 	wrlong	local01, fp
106c8     08 4E 85 F1 | 	sub	fp, #8
106cc     A7 12 02 F6 | 	mov	arg01, fp
106d0     40 4E 85 F1 | 	sub	fp, #64
106d4     E8 D3 BF FD | 	call	#_converttofloat
106d8     FD 28 02 F6 | 	mov	local02, result1
106dc     24 4E 05 F1 | 	add	fp, #36
106e0     A7 28 62 FC | 	wrlong	local02, fp
106e4     24 4E 85 F1 | 	sub	fp, #36
106e8     34 D1 BF FD | 	call	#_pop
106ec     FF 26 02 F6 | 	mov	local01, result3
106f0     40 4E 05 F1 | 	add	fp, #64
106f4     A7 FA 61 FC | 	wrlong	result1, fp
106f8     04 4E 05 F1 | 	add	fp, #4
106fc     A7 FC 61 FC | 	wrlong	result2, fp
10700     04 4E 05 F1 | 	add	fp, #4
10704     A7 26 62 FC | 	wrlong	local01, fp
10708     08 4E 85 F1 | 	sub	fp, #8
1070c     A7 12 02 F6 | 	mov	arg01, fp
10710     40 4E 85 F1 | 	sub	fp, #64
10714     A8 D3 BF FD | 	call	#_converttofloat
10718     FD 28 02 F6 | 	mov	local02, result1
1071c     20 4E 05 F1 | 	add	fp, #32
10720     A7 28 62 FC | 	wrlong	local02, fp
10724     20 4E 85 F1 | 	sub	fp, #32
10728     F4 D0 BF FD | 	call	#_pop
1072c     FF 26 02 F6 | 	mov	local01, result3
10730     40 4E 05 F1 | 	add	fp, #64
10734     A7 FA 61 FC | 	wrlong	result1, fp
10738     04 4E 05 F1 | 	add	fp, #4
1073c     A7 FC 61 FC | 	wrlong	result2, fp
10740     04 4E 05 F1 | 	add	fp, #4
10744     A7 26 62 FC | 	wrlong	local01, fp
10748     08 4E 85 F1 | 	sub	fp, #8
1074c     A7 12 02 F6 | 	mov	arg01, fp
10750     40 4E 85 F1 | 	sub	fp, #64
10754     AC D2 BF FD | 	call	#_converttoint
10758     18 4E 05 F1 | 	add	fp, #24
1075c     A7 FA 61 FC | 	wrlong	result1, fp
10760                 | '   t1=pop() : rr=converttofloat(t1)
10760                 | '   t1=pop() : ss=converttofloat(t1) 
10760                 | '   t1=pop() : dd=converttofloat(t1)
10760                 | '   t1=pop() : aa=converttofloat(t1)
10760                 | '   t1=pop() : channel=converttoint(t1)
10760                 | '   if ss<0.0 then ss=0.0 
10760     10 4E 05 F1 | 	add	fp, #16
10764     A7 12 02 FB | 	rdlong	arg01, fp
10768     28 4E 85 F1 | 	sub	fp, #40
1076c     00 14 06 F6 | 	mov	arg02, #0
10770     01 16 06 F6 | 	mov	arg03, #1
10774     94 A6 B1 FD | 	call	#__system___float_cmp
10778     00 FA 55 F2 | 	cmps	result1, #0 wc
1077c     28 4E 05 C1 |  if_b	add	fp, #40
10780     A7 00 68 CC |  if_b	wrlong	#0, fp
10784     28 4E 85 C1 |  if_b	sub	fp, #40
10788                 | '   if ss>1.0 then ss=1.0
10788     28 4E 05 F1 | 	add	fp, #40
1078c     A7 12 02 FB | 	rdlong	arg01, fp
10790     28 4E 85 F1 | 	sub	fp, #40
10794     00 C0 1F FF 
10798     00 14 06 F6 | 	mov	arg02, ##1065353216
1079c     01 16 66 F6 | 	neg	arg03, #1
107a0     68 A6 B1 FD | 	call	#__system___float_cmp
107a4     01 FA 55 F2 | 	cmps	result1, #1 wc
107a8     28 4E 05 31 |  if_ae	add	fp, #40
107ac     00 C0 9F 3F 
107b0     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
107b4     28 4E 85 31 |  if_ae	sub	fp, #40
107b8     20 4E 05 F1 | 	add	fp, #32
107bc     A7 12 02 FB | 	rdlong	arg01, fp
107c0     04 4E 05 F1 | 	add	fp, #4
107c4     A7 14 02 FB | 	rdlong	arg02, fp
107c8     24 4E 85 F1 | 	sub	fp, #36
107cc     38 9E B1 FD | 	call	#__system___float_add
107d0     FD 12 02 F6 | 	mov	arg01, result1
107d4     2C 4E 05 F1 | 	add	fp, #44
107d8     A7 14 02 FB | 	rdlong	arg02, fp
107dc     2C 4E 85 F1 | 	sub	fp, #44
107e0     24 9E B1 FD | 	call	#__system___float_add
107e4     30 4E 05 F1 | 	add	fp, #48
107e8     A7 FA 61 FC | 	wrlong	result1, fp
107ec     FD 14 02 F6 | 	mov	arg02, result1
107f0     30 4E 85 F1 | 	sub	fp, #48
107f4     00 C0 21 FF 
107f8     00 12 06 F6 | 	mov	arg01, ##1132462080
107fc     DC A3 B1 FD | 	call	#__system___float_div
10800     34 4E 05 F1 | 	add	fp, #52
10804     A7 FA 61 FC | 	wrlong	result1, fp
10808     14 4E 85 F1 | 	sub	fp, #20
1080c     A7 12 02 FB | 	rdlong	arg01, fp
10810     FD 14 02 F6 | 	mov	arg02, result1
10814     20 4E 85 F1 | 	sub	fp, #32
10818     BC A1 B1 FD | 	call	#__system___float_mul
1081c     FD 12 02 F6 | 	mov	arg01, result1
10820     01 14 06 F6 | 	mov	arg02, #1
10824     78 A6 B1 FD | 	call	#__system___float_tointeger
10828     A7 FA 61 FC | 	wrlong	result1, fp
1082c     24 4E 05 F1 | 	add	fp, #36
10830     A7 12 02 FB | 	rdlong	arg01, fp
10834     10 4E 05 F1 | 	add	fp, #16
10838     A7 14 02 FB | 	rdlong	arg02, fp
1083c     34 4E 85 F1 | 	sub	fp, #52
10840     94 A1 B1 FD | 	call	#__system___float_mul
10844     FD 12 02 F6 | 	mov	arg01, result1
10848     01 14 06 F6 | 	mov	arg02, #1
1084c     50 A6 B1 FD | 	call	#__system___float_tointeger
10850     04 4E 05 F1 | 	add	fp, #4
10854     A7 FA 61 FC | 	wrlong	result1, fp
10858     28 4E 05 F1 | 	add	fp, #40
1085c     A7 12 02 FB | 	rdlong	arg01, fp
10860     08 4E 05 F1 | 	add	fp, #8
10864     A7 14 02 FB | 	rdlong	arg02, fp
10868     34 4E 85 F1 | 	sub	fp, #52
1086c     68 A1 B1 FD | 	call	#__system___float_mul
10870     FD 12 02 F6 | 	mov	arg01, result1
10874     01 14 06 F6 | 	mov	arg02, #1
10878     24 A6 B1 FD | 	call	#__system___float_tointeger
1087c     0C 4E 05 F1 | 	add	fp, #12
10880     A7 FA 61 FC | 	wrlong	result1, fp
10884     0C 4E 85 F1 | 	sub	fp, #12
10888     F8 BF 23 FF 
1088c     00 28 06 F6 | 	mov	local02, ##1199566848
10890     A7 12 02 FB | 	rdlong	arg01, fp
10894     09 13 52 F6 | 	abs	arg01, arg01 wc
10898     1F 2C C6 C9 |  if_b	decod	local04, #31
1089c     00 2C 06 36 |  if_ae	mov	local04, #0
108a0     30 9D B1 FD | 	call	#__system___float_fromuns
108a4     16 FB 61 F5 | 	xor	result1, local04
108a8     FD 14 02 F6 | 	mov	arg02, result1
108ac     14 13 02 F6 | 	mov	arg01, local02
108b0     28 A3 B1 FD | 	call	#__system___float_div
108b4     38 4E 05 F1 | 	add	fp, #56
108b8     A7 FA 61 FC | 	wrlong	result1, fp
108bc     F8 BF 23 FF 
108c0     00 28 06 F6 | 	mov	local02, ##1199566848
108c4     10 4E 85 F1 | 	sub	fp, #16
108c8     A7 14 02 FB | 	rdlong	arg02, fp
108cc     28 4E 85 F1 | 	sub	fp, #40
108d0     F8 BF 23 FF 
108d4     00 12 06 F6 | 	mov	arg01, ##1199566848
108d8     FC A0 B1 FD | 	call	#__system___float_mul
108dc     FD 14 02 F6 | 	mov	arg02, result1
108e0     14 13 02 F6 | 	mov	arg01, local02
108e4     1F 14 E6 F4 | 	bitnot	arg02, #31
108e8     1C 9D B1 FD | 	call	#__system___float_add
108ec     FD 28 02 F6 | 	mov	local02, result1
108f0     04 4E 05 F1 | 	add	fp, #4
108f4     A7 12 02 FB | 	rdlong	arg01, fp
108f8     04 4E 85 F1 | 	sub	fp, #4
108fc     09 13 52 F6 | 	abs	arg01, arg01 wc
10900     1F 2C C6 C9 |  if_b	decod	local04, #31
10904     00 2C 06 36 |  if_ae	mov	local04, #0
10908     C8 9C B1 FD | 	call	#__system___float_fromuns
1090c     16 FB 61 F5 | 	xor	result1, local04
10910     FD 14 02 F6 | 	mov	arg02, result1
10914     14 13 02 F6 | 	mov	arg01, local02
10918     C0 A2 B1 FD | 	call	#__system___float_div
1091c     24 4E 05 F1 | 	add	fp, #36
10920     A7 FA 61 FC | 	wrlong	result1, fp
10924     04 4E 05 F1 | 	add	fp, #4
10928     A7 14 02 FB | 	rdlong	arg02, fp
1092c     28 4E 85 F1 | 	sub	fp, #40
10930     F8 BF 23 FF 
10934     00 12 06 F6 | 	mov	arg01, ##1199566848
10938     9C A0 B1 FD | 	call	#__system___float_mul
1093c     FD 28 02 F6 | 	mov	local02, result1
10940     0C 4E 05 F1 | 	add	fp, #12
10944     A7 12 02 FB | 	rdlong	arg01, fp
10948     0C 4E 85 F1 | 	sub	fp, #12
1094c     09 13 52 F6 | 	abs	arg01, arg01 wc
10950     1F 2C C6 C9 |  if_b	decod	local04, #31
10954     00 2C 06 36 |  if_ae	mov	local04, #0
10958     78 9C B1 FD | 	call	#__system___float_fromuns
1095c     16 FB 61 F5 | 	xor	result1, local04
10960     FD 14 02 F6 | 	mov	arg02, result1
10964     14 13 02 F6 | 	mov	arg01, local02
10968     70 A2 B1 FD | 	call	#__system___float_div
1096c     3C 4E 05 F1 | 	add	fp, #60
10970     A7 FA 61 FC | 	wrlong	result1, fp
10974     24 4E 85 F1 | 	sub	fp, #36
10978     A7 2E 02 FB | 	rdlong	local05, fp
1097c     18 4E 85 F1 | 	sub	fp, #24
10980     01 2E 66 F0 | 	shl	local05, #1
10984     52 00 00 FF 
10988     EC E4 05 F1 | 	add	objptr, ##42220
1098c     F2 2E 02 F1 | 	add	local05, objptr
10990     A7 30 02 FB | 	rdlong	local06, fp
10994     04 4E 05 F1 | 	add	fp, #4
10998     A7 2A 02 FB | 	rdlong	local03, fp
1099c     15 31 02 F1 | 	add	local06, local03
109a0     17 31 52 FC | 	wrword	local06, local05
109a4     1C 4E 05 F1 | 	add	fp, #28
109a8     A7 00 68 FC | 	wrlong	#0, fp
109ac                 | '   fulltime=aa+dd+rr
109ac                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
109ac                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
109ac                 | '   suspoints(channel)=a+d
109ac                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
109ac     0C 4E 85 F1 | 	sub	fp, #12
109b0     A7 00 68 FC | 	wrlong	#0, fp
109b4     14 4E 85 F1 | 	sub	fp, #20
109b8     A7 32 02 FB | 	rdlong	local07, fp
109bc     52 00 00 FF 
109c0     EC E4 85 F1 | 	sub	objptr, ##42220
109c4                 | LR__1364
109c4     14 4E 05 F1 | 	add	fp, #20
109c8     A7 28 02 FB | 	rdlong	local02, fp
109cc     14 4E 85 F1 | 	sub	fp, #20
109d0     19 29 52 F2 | 	cmps	local02, local07 wc
109d4     80 00 90 3D |  if_ae	jmp	#LR__1365
109d8     18 4E 05 F1 | 	add	fp, #24
109dc     A7 30 02 FB | 	rdlong	local06, fp
109e0     09 30 66 F0 | 	shl	local06, #9
109e4     0C 00 00 FF 
109e8     D8 E4 05 F1 | 	add	objptr, ##6360
109ec     F2 30 02 F1 | 	add	local06, objptr
109f0     04 4E 85 F1 | 	sub	fp, #4
109f4     A7 2E 02 FB | 	rdlong	local05, fp
109f8     01 2E 66 F0 | 	shl	local05, #1
109fc     18 2F 02 F1 | 	add	local05, local06
10a00     0C 4E 05 F1 | 	add	fp, #12
10a04     A7 12 02 FB | 	rdlong	arg01, fp
10a08     20 4E 85 F1 | 	sub	fp, #32
10a0c     0C 00 00 FF 
10a10     D8 E4 85 F1 | 	sub	objptr, ##6360
10a14     01 14 06 F6 | 	mov	arg02, #1
10a18     84 A4 B1 FD | 	call	#__system___float_tointeger
10a1c     17 FB 51 FC | 	wrword	result1, local05
10a20     20 4E 05 F1 | 	add	fp, #32
10a24     A7 12 02 FB | 	rdlong	arg01, fp
10a28     18 4E 05 F1 | 	add	fp, #24
10a2c     A7 14 02 FB | 	rdlong	arg02, fp
10a30     38 4E 85 F1 | 	sub	fp, #56
10a34     D0 9B B1 FD | 	call	#__system___float_add
10a38     20 4E 05 F1 | 	add	fp, #32
10a3c     A7 FA 61 FC | 	wrlong	result1, fp
10a40     0C 4E 85 F1 | 	sub	fp, #12
10a44     A7 30 02 FB | 	rdlong	local06, fp
10a48     01 30 06 F1 | 	add	local06, #1
10a4c     A7 30 62 FC | 	wrlong	local06, fp
10a50     14 4E 85 F1 | 	sub	fp, #20
10a54     6C FF 9F FD | 	jmp	#LR__1364
10a58                 | LR__1365
10a58                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10a58     A7 28 02 FB | 	rdlong	local02, fp
10a5c     14 4E 05 F1 | 	add	fp, #20
10a60     A7 28 62 FC | 	wrlong	local02, fp
10a64     14 4E 85 F1 | 	sub	fp, #20
10a68     A7 34 02 FB | 	rdlong	local08, fp
10a6c     04 4E 05 F1 | 	add	fp, #4
10a70     A7 28 02 FB | 	rdlong	local02, fp
10a74     04 4E 85 F1 | 	sub	fp, #4
10a78     14 35 02 F1 | 	add	local08, local02
10a7c                 | LR__1366
10a7c     14 4E 05 F1 | 	add	fp, #20
10a80     A7 28 02 FB | 	rdlong	local02, fp
10a84     14 4E 85 F1 | 	sub	fp, #20
10a88     1A 29 52 F2 | 	cmps	local02, local08 wc
10a8c     A8 00 90 3D |  if_ae	jmp	#LR__1367
10a90     18 4E 05 F1 | 	add	fp, #24
10a94     A7 32 02 FB | 	rdlong	local07, fp
10a98     09 32 66 F0 | 	shl	local07, #9
10a9c     0C 00 00 FF 
10aa0     D8 E4 05 F1 | 	add	objptr, ##6360
10aa4     F2 32 02 F1 | 	add	local07, objptr
10aa8     04 4E 85 F1 | 	sub	fp, #4
10aac     A7 30 02 FB | 	rdlong	local06, fp
10ab0     01 30 66 F0 | 	shl	local06, #1
10ab4     19 31 02 F1 | 	add	local06, local07
10ab8     0C 4E 05 F1 | 	add	fp, #12
10abc     A7 12 02 FB | 	rdlong	arg01, fp
10ac0     20 4E 85 F1 | 	sub	fp, #32
10ac4     0C 00 00 FF 
10ac8     D8 E4 85 F1 | 	sub	objptr, ##6360
10acc     01 14 06 F6 | 	mov	arg02, #1
10ad0     CC A3 B1 FD | 	call	#__system___float_tointeger
10ad4     18 FB 51 FC | 	wrword	result1, local06
10ad8     20 4E 05 F1 | 	add	fp, #32
10adc     A7 12 02 FB | 	rdlong	arg01, fp
10ae0     04 4E 05 F1 | 	add	fp, #4
10ae4     A7 14 02 FB | 	rdlong	arg02, fp
10ae8     24 4E 85 F1 | 	sub	fp, #36
10aec     1F 14 E6 F4 | 	bitnot	arg02, #31
10af0     14 9B B1 FD | 	call	#__system___float_add
10af4     20 4E 05 F1 | 	add	fp, #32
10af8     A7 FA 61 FC | 	wrlong	result1, fp
10afc     20 4E 85 F1 | 	sub	fp, #32
10b00     FD 12 02 F6 | 	mov	arg01, result1
10b04     00 14 06 F6 | 	mov	arg02, #0
10b08     01 16 06 F6 | 	mov	arg03, #1
10b0c     FC A2 B1 FD | 	call	#__system___float_cmp
10b10     00 FA 55 F2 | 	cmps	result1, #0 wc
10b14     20 4E 05 C1 |  if_b	add	fp, #32
10b18     A7 00 68 CC |  if_b	wrlong	#0, fp
10b1c     20 4E 85 C1 |  if_b	sub	fp, #32
10b20     14 4E 05 F1 | 	add	fp, #20
10b24     A7 32 02 FB | 	rdlong	local07, fp
10b28     01 32 06 F1 | 	add	local07, #1
10b2c     A7 32 62 FC | 	wrlong	local07, fp
10b30     14 4E 85 F1 | 	sub	fp, #20
10b34     44 FF 9F FD | 	jmp	#LR__1366
10b38                 | LR__1367
10b38                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
10b38     A7 28 02 FB | 	rdlong	local02, fp
10b3c     04 4E 05 F1 | 	add	fp, #4
10b40     A7 34 02 FB | 	rdlong	local08, fp
10b44     1A 29 02 F1 | 	add	local02, local08
10b48     10 4E 05 F1 | 	add	fp, #16
10b4c     A7 28 62 FC | 	wrlong	local02, fp
10b50     14 4E 85 F1 | 	sub	fp, #20
10b54                 | LR__1368
10b54     14 4E 05 F1 | 	add	fp, #20
10b58     A7 2E 02 FB | 	rdlong	local05, fp
10b5c     14 4E 85 F1 | 	sub	fp, #20
10b60     00 2F 56 F2 | 	cmps	local05, #256 wc
10b64     A8 00 90 3D |  if_ae	jmp	#LR__1369
10b68     18 4E 05 F1 | 	add	fp, #24
10b6c     A7 34 02 FB | 	rdlong	local08, fp
10b70     09 34 66 F0 | 	shl	local08, #9
10b74     0C 00 00 FF 
10b78     D8 E4 05 F1 | 	add	objptr, ##6360
10b7c     F2 34 02 F1 | 	add	local08, objptr
10b80     04 4E 85 F1 | 	sub	fp, #4
10b84     A7 32 02 FB | 	rdlong	local07, fp
10b88     01 32 66 F0 | 	shl	local07, #1
10b8c     1A 33 02 F1 | 	add	local07, local08
10b90     0C 4E 05 F1 | 	add	fp, #12
10b94     A7 12 02 FB | 	rdlong	arg01, fp
10b98     20 4E 85 F1 | 	sub	fp, #32
10b9c     0C 00 00 FF 
10ba0     D8 E4 85 F1 | 	sub	objptr, ##6360
10ba4     01 14 06 F6 | 	mov	arg02, #1
10ba8     F4 A2 B1 FD | 	call	#__system___float_tointeger
10bac     19 FB 51 FC | 	wrword	result1, local07
10bb0     20 4E 05 F1 | 	add	fp, #32
10bb4     A7 12 02 FB | 	rdlong	arg01, fp
10bb8     1C 4E 05 F1 | 	add	fp, #28
10bbc     A7 14 02 FB | 	rdlong	arg02, fp
10bc0     3C 4E 85 F1 | 	sub	fp, #60
10bc4     1F 14 E6 F4 | 	bitnot	arg02, #31
10bc8     3C 9A B1 FD | 	call	#__system___float_add
10bcc     20 4E 05 F1 | 	add	fp, #32
10bd0     A7 FA 61 FC | 	wrlong	result1, fp
10bd4     20 4E 85 F1 | 	sub	fp, #32
10bd8     FD 12 02 F6 | 	mov	arg01, result1
10bdc     00 14 06 F6 | 	mov	arg02, #0
10be0     01 16 06 F6 | 	mov	arg03, #1
10be4     24 A2 B1 FD | 	call	#__system___float_cmp
10be8     00 FA 55 F2 | 	cmps	result1, #0 wc
10bec     20 4E 05 C1 |  if_b	add	fp, #32
10bf0     A7 00 68 CC |  if_b	wrlong	#0, fp
10bf4     20 4E 85 C1 |  if_b	sub	fp, #32
10bf8     14 4E 05 F1 | 	add	fp, #20
10bfc     A7 34 02 FB | 	rdlong	local08, fp
10c00     01 34 06 F1 | 	add	local08, #1
10c04     A7 34 62 FC | 	wrlong	local08, fp
10c08     14 4E 85 F1 | 	sub	fp, #20
10c0c     44 FF 9F FD | 	jmp	#LR__1368
10c10                 | LR__1369
10c10     18 4E 05 F1 | 	add	fp, #24
10c14     A7 2E 02 FB | 	rdlong	local05, fp
10c18     18 4E 85 F1 | 	sub	fp, #24
10c1c     09 2E 66 F0 | 	shl	local05, #9
10c20     0C 00 00 FF 
10c24     D8 E4 05 F1 | 	add	objptr, ##6360
10c28     F2 2E 02 F1 | 	add	local05, objptr
10c2c     FE 2F 06 F1 | 	add	local05, #510
10c30     17 01 58 FC | 	wrword	#0, local05
10c34     0C 00 00 FF 
10c38     D8 E4 85 F1 | 	sub	objptr, ##6360
10c3c                 | LR__1370
10c3c     18 4E 05 F1 | 	add	fp, #24
10c40     A7 2E 02 FB | 	rdlong	local05, fp
10c44     18 4E 85 F1 | 	sub	fp, #24
10c48     09 2E 66 F0 | 	shl	local05, #9
10c4c     0C 00 00 FF 
10c50     D8 E4 05 F1 | 	add	objptr, ##6360
10c54     F2 2E 02 F1 | 	add	local05, objptr
10c58     FE 2F 06 F1 | 	add	local05, #510
10c5c     17 01 58 FC | 	wrword	#0, local05
10c60     0C 00 00 FF 
10c64     D8 E4 85 F1 | 	sub	objptr, ##6360
10c68                 | LR__1371
10c68     A7 F0 03 F6 | 	mov	ptra, fp
10c6c     B2 00 A0 FD | 	call	#popregs_
10c70                 | _do_defenv_ret
10c70     2D 00 64 FD | 	ret
10c74                 | 
10c74                 | ' 
10c74                 | ' '-------------------- defsnd
10c74                 | ' 
10c74                 | ' sub do_defsnd
10c74                 | _do_defsnd
10c74     04 4A 05 F6 | 	mov	COUNT_, #4
10c78     A8 00 A0 FD | 	call	#pushregs_
10c7c     88 F0 07 F1 | 	add	ptra, #136
10c80     4A 00 00 FF 
10c84     80 E4 05 F1 | 	add	objptr, ##38016
10c88     F2 1A 02 FB | 	rdlong	arg05, objptr
10c8c     0D 19 02 F6 | 	mov	arg04, arg05
10c90     01 18 66 F0 | 	shl	arg04, #1
10c94     0D 19 02 F1 | 	add	arg04, arg05
10c98     02 18 66 F0 | 	shl	arg04, #2
10c9c     03 00 00 FF 
10ca0     04 E4 85 F1 | 	sub	objptr, ##1540
10ca4     F2 18 02 F1 | 	add	arg04, objptr
10ca8     0C 1B 02 FB | 	rdlong	arg05, arg04
10cac     A7 1A 62 FC | 	wrlong	arg05, fp
10cb0                 | ' 
10cb0                 | ' numpar=compiledline(lineptr_e).result.uresult
10cb0                 | ' 
10cb0                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10cb0                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10cb0                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10cb0                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10cb0                 | ' 
10cb0                 | ' if numpar<2 then return
10cb0     02 1A 56 F2 | 	cmps	arg05, #2 wc
10cb4     47 00 00 FF 
10cb8     7C E4 85 F1 | 	sub	objptr, ##36476
10cbc     98 08 90 CD |  if_b	jmp	#LR__1403
10cc0                 | '  
10cc0                 | ' if numpar=2 then
10cc0     A7 1A 02 FB | 	rdlong	arg05, fp
10cc4     02 1A 0E F2 | 	cmp	arg05, #2 wz
10cc8     A4 03 90 5D |  if_ne	jmp	#LR__1390
10ccc     50 CB BF FD | 	call	#_pop
10cd0     FF 1A 02 F6 | 	mov	arg05, result3
10cd4     2C 4E 05 F1 | 	add	fp, #44
10cd8     A7 FA 61 FC | 	wrlong	result1, fp
10cdc     04 4E 05 F1 | 	add	fp, #4
10ce0     A7 FC 61 FC | 	wrlong	result2, fp
10ce4     04 4E 05 F1 | 	add	fp, #4
10ce8     A7 1A 62 FC | 	wrlong	arg05, fp
10cec                 | '   t1=pop()
10cec                 | '   if t1.result_type=result_string2 then 
10cec     34 4E 85 F1 | 	sub	fp, #52
10cf0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10cf4     20 00 90 5D |  if_ne	jmp	#LR__1380
10cf8     2C 4E 05 F1 | 	add	fp, #44
10cfc     A7 12 02 FB | 	rdlong	arg01, fp
10d00     2C 4E 85 F1 | 	sub	fp, #44
10d04     90 CC BF FD | 	call	#_convertstring
10d08     38 4E 05 F1 | 	add	fp, #56
10d0c     A7 FA 61 FC | 	wrlong	result1, fp
10d10     38 4E 85 F1 | 	sub	fp, #56
10d14     58 00 90 FD | 	jmp	#LR__1383
10d18                 | LR__1380
10d18     34 4E 05 F1 | 	add	fp, #52
10d1c     A7 1A 02 FB | 	rdlong	arg05, fp
10d20     34 4E 85 F1 | 	sub	fp, #52
10d24     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10d28     18 00 90 5D |  if_ne	jmp	#LR__1381
10d2c     2C 4E 05 F1 | 	add	fp, #44
10d30     A7 1A 02 FB | 	rdlong	arg05, fp
10d34     0C 4E 05 F1 | 	add	fp, #12
10d38     A7 1A 62 FC | 	wrlong	arg05, fp
10d3c     38 4E 85 F1 | 	sub	fp, #56
10d40     2C 00 90 FD | 	jmp	#LR__1382
10d44                 | LR__1381
10d44     BF 01 00 FF 
10d48     C1 1B 06 F6 | 	mov	arg05, ##@LR__6034
10d4c     38 4E 05 F1 | 	add	fp, #56
10d50     A7 1A 62 FC | 	wrlong	arg05, fp
10d54     0C 4E 85 F1 | 	sub	fp, #12
10d58     A7 12 02 F6 | 	mov	arg01, fp
10d5c     2C 4E 85 F1 | 	sub	fp, #44
10d60     A0 CC BF FD | 	call	#_converttoint
10d64     14 4E 05 F1 | 	add	fp, #20
10d68     A7 FA 61 FC | 	wrlong	result1, fp
10d6c     14 4E 85 F1 | 	sub	fp, #20
10d70                 | LR__1382
10d70                 | LR__1383
10d70                 | '   if s<>"" then 
10d70     38 4E 05 F1 | 	add	fp, #56
10d74     A7 12 02 FB | 	rdlong	arg01, fp
10d78     38 4E 85 F1 | 	sub	fp, #56
10d7c     BF 01 00 FF 
10d80     C2 15 06 F6 | 	mov	arg02, ##@LR__6035
10d84     FC 6D B1 FD | 	call	#__system___string_cmp
10d88     00 FA 0D F2 | 	cmp	result1, #0 wz
10d8c     E4 01 90 AD |  if_e	jmp	#LR__1386
10d90     8C CA BF FD | 	call	#_pop
10d94     FF 1A 02 F6 | 	mov	arg05, result3
10d98     2C 4E 05 F1 | 	add	fp, #44
10d9c     A7 FA 61 FC | 	wrlong	result1, fp
10da0     04 4E 05 F1 | 	add	fp, #4
10da4     A7 FC 61 FC | 	wrlong	result2, fp
10da8     04 4E 05 F1 | 	add	fp, #4
10dac     A7 1A 62 FC | 	wrlong	arg05, fp
10db0     08 4E 85 F1 | 	sub	fp, #8
10db4     A7 12 02 F6 | 	mov	arg01, fp
10db8     2C 4E 85 F1 | 	sub	fp, #44
10dbc     44 CC BF FD | 	call	#_converttoint
10dc0     10 4E 05 F1 | 	add	fp, #16
10dc4     A7 FA 61 FC | 	wrlong	result1, fp
10dc8                 | '     t1=pop()
10dc8                 | '     channel=converttoint(t1) : if channel>31 then return
10dc8     FD 1A 02 F6 | 	mov	arg05, result1
10dcc     10 4E 85 F1 | 	sub	fp, #16
10dd0     20 1A 56 F2 | 	cmps	arg05, #32 wc
10dd4     80 07 90 3D |  if_ae	jmp	#LR__1403
10dd8                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10dd8     09 12 06 F6 | 	mov	arg01, #9
10ddc     DC C0 B1 FD | 	call	#__system__close
10de0     09 26 06 F6 | 	mov	local01, #9
10de4     BF 01 00 FF 
10de8     C3 13 06 F6 | 	mov	arg01, ##@LR__6036
10dec     38 4E 05 F1 | 	add	fp, #56
10df0     A7 14 02 FB | 	rdlong	arg02, fp
10df4     38 4E 85 F1 | 	sub	fp, #56
10df8     BC 6D B1 FD | 	call	#__system___string_concat
10dfc     FD 14 02 F6 | 	mov	arg02, result1
10e00     13 13 02 F6 | 	mov	arg01, local01
10e04     00 16 06 F6 | 	mov	arg03, #0
10e08     54 79 B1 FD | 	call	#__system___basic_open_string
10e0c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10e10     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10e14     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10e18     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10e1c     52 00 00 FF 
10e20     4C E5 05 F1 | 	add	objptr, ##42316
10e24     F2 FA 61 FC | 	wrlong	result1, objptr
10e28                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10e28     52 00 00 FF 
10e2c     4C E5 85 F1 | 	sub	objptr, ##42316
10e30     B0 00 90 AD |  if_e	jmp	#LR__1384
10e34     00 12 06 F6 | 	mov	arg01, #0
10e38     D0 C9 B1 FD | 	call	#__system___getiolock_0620
10e3c     FD 12 02 F6 | 	mov	arg01, result1
10e40     18 6D B1 FD | 	call	#__system___lockmem
10e44     BF 01 00 FF 
10e48     D0 15 06 F6 | 	mov	arg02, ##@LR__6037
10e4c     00 12 06 F6 | 	mov	arg01, #0
10e50     00 16 06 F6 | 	mov	arg03, #0
10e54     FC 79 B1 FD | 	call	#__system___basic_print_string
10e58     52 00 00 FF 
10e5c     4C E5 05 F1 | 	add	objptr, ##42316
10e60     F2 14 02 FB | 	rdlong	arg02, objptr
10e64     52 00 00 FF 
10e68     4C E5 85 F1 | 	sub	objptr, ##42316
10e6c     00 12 06 F6 | 	mov	arg01, #0
10e70     00 16 06 F6 | 	mov	arg03, #0
10e74     0A 18 06 F6 | 	mov	arg04, #10
10e78     1C 7A B1 FD | 	call	#__system___basic_print_integer
10e7c     BF 01 00 FF 
10e80     DE 15 06 F6 | 	mov	arg02, ##@LR__6038
10e84     00 12 06 F6 | 	mov	arg01, #0
10e88     00 16 06 F6 | 	mov	arg03, #0
10e8c     C4 79 B1 FD | 	call	#__system___basic_print_string
10e90     00 26 06 F6 | 	mov	local01, #0
10e94     52 00 00 FF 
10e98     4C E5 05 F1 | 	add	objptr, ##42316
10e9c     F2 12 02 FB | 	rdlong	arg01, objptr
10ea0     52 00 00 FF 
10ea4     4C E5 85 F1 | 	sub	objptr, ##42316
10ea8     40 96 B1 FD | 	call	#__system___strerror
10eac     FD 14 02 F6 | 	mov	arg02, result1
10eb0     13 13 02 F6 | 	mov	arg01, local01
10eb4     00 16 06 F6 | 	mov	arg03, #0
10eb8     98 79 B1 FD | 	call	#__system___basic_print_string
10ebc     00 12 06 F6 | 	mov	arg01, #0
10ec0     0A 14 06 F6 | 	mov	arg02, #10
10ec4     00 16 06 F6 | 	mov	arg03, #0
10ec8     30 79 B1 FD | 	call	#__system___basic_print_char
10ecc     00 12 06 F6 | 	mov	arg01, #0
10ed0     38 C9 B1 FD | 	call	#__system___getiolock_0620
10ed4     FD 00 68 FC | 	wrlong	#0, result1
10ed8     09 12 06 F6 | 	mov	arg01, #9
10edc     DC BF B1 FD | 	call	#__system__close
10ee0     74 06 90 FD | 	jmp	#LR__1403
10ee4                 | LR__1384
10ee4                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10ee4     04 4E 05 F1 | 	add	fp, #4
10ee8     A7 00 68 FC | 	wrlong	#0, fp
10eec                 | LR__1385
10eec     A7 26 02 FB | 	rdlong	local01, fp
10ef0     01 26 66 F0 | 	shl	local01, #1
10ef4     11 14 06 F6 | 	mov	arg02, #17
10ef8     13 15 02 F1 | 	add	arg02, local01
10efc     78 4E 05 F1 | 	add	fp, #120
10f00     A7 16 02 F6 | 	mov	arg03, fp
10f04     7C 4E 85 F1 | 	sub	fp, #124
10f08     09 12 06 F6 | 	mov	arg01, #9
10f0c     01 18 06 F6 | 	mov	arg04, #1
10f10     02 1A 06 F6 | 	mov	arg05, #2
10f14     B8 7A B1 FD | 	call	#__system___basic_get
10f18     10 4E 05 F1 | 	add	fp, #16
10f1c     A7 12 02 FB | 	rdlong	arg01, fp
10f20     0B 12 66 F0 | 	shl	arg01, #11
10f24     0C 4E 85 F1 | 	sub	fp, #12
10f28     A7 26 02 FB | 	rdlong	local01, fp
10f2c     01 26 66 F0 | 	shl	local01, #1
10f30     13 13 02 F1 | 	add	arg01, local01
10f34     78 4E 05 F1 | 	add	fp, #120
10f38     A7 14 E2 FA | 	rdword	arg02, fp
10f3c     7C 4E 85 F1 | 	sub	fp, #124
10f40     0F 14 66 F7 | 	signx	arg02, #15
10f44     9C 33 B1 FD | 	call	#_psdpoke
10f48     04 4E 05 F1 | 	add	fp, #4
10f4c     A7 26 02 FB | 	rdlong	local01, fp
10f50     01 26 06 F1 | 	add	local01, #1
10f54     A7 26 62 FC | 	wrlong	local01, fp
10f58     02 00 00 FF 
10f5c     01 26 56 F2 | 	cmps	local01, ##1025 wc
10f60     88 FF 9F CD |  if_b	jmp	#LR__1385
10f64     04 4E 85 F1 | 	sub	fp, #4
10f68                 | '     close #9
10f68     09 12 06 F6 | 	mov	arg01, #9
10f6c     4C BF B1 FD | 	call	#__system__close
10f70                 | '     return
10f70     E4 05 90 FD | 	jmp	#LR__1403
10f74                 | LR__1386
10f74                 | '     if wptr < ($80000 - 2048) then 
10f74     14 4E 05 F1 | 	add	fp, #20
10f78     A7 26 02 FB | 	rdlong	local01, fp
10f7c     14 4E 85 F1 | 	sub	fp, #20
10f80     FC 03 00 FF 
10f84     00 26 56 F2 | 	cmps	local01, ##522240 wc
10f88     70 00 90 3D |  if_ae	jmp	#LR__1388
10f8c                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10f8c     04 4E 05 F1 | 	add	fp, #4
10f90     A7 00 68 FC | 	wrlong	#0, fp
10f94     04 4E 85 F1 | 	sub	fp, #4
10f98                 | LR__1387
10f98     10 4E 05 F1 | 	add	fp, #16
10f9c     A7 26 02 FB | 	rdlong	local01, fp
10fa0     0B 26 66 F0 | 	shl	local01, #11
10fa4     0C 4E 85 F1 | 	sub	fp, #12
10fa8     A7 1A 02 FB | 	rdlong	arg05, fp
10fac     0D 19 02 F6 | 	mov	arg04, arg05
10fb0     01 18 66 F0 | 	shl	arg04, #1
10fb4     0C 27 02 F1 | 	add	local01, arg04
10fb8     10 4E 05 F1 | 	add	fp, #16
10fbc     A7 12 02 FB | 	rdlong	arg01, fp
10fc0     14 4E 85 F1 | 	sub	fp, #20
10fc4     01 1A 66 F0 | 	shl	arg05, #1
10fc8     0D 13 02 F1 | 	add	arg01, arg05
10fcc     09 15 E2 FA | 	rdword	arg02, arg01
10fd0     13 13 02 F6 | 	mov	arg01, local01
10fd4     0C 33 B1 FD | 	call	#_psdpoke
10fd8     04 4E 05 F1 | 	add	fp, #4
10fdc     A7 26 02 FB | 	rdlong	local01, fp
10fe0     01 26 06 F1 | 	add	local01, #1
10fe4     A7 26 62 FC | 	wrlong	local01, fp
10fe8     04 4E 85 F1 | 	sub	fp, #4
10fec     02 00 00 FF 
10ff0     00 26 56 F2 | 	cmps	local01, ##1024 wc
10ff4     A0 FF 9F CD |  if_b	jmp	#LR__1387
10ff8     5C 05 90 FD | 	jmp	#LR__1403
10ffc                 | LR__1388
10ffc                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10ffc     04 4E 05 F1 | 	add	fp, #4
11000     A7 00 68 FC | 	wrlong	#0, fp
11004     04 4E 85 F1 | 	sub	fp, #4
11008                 | LR__1389
11008     10 4E 05 F1 | 	add	fp, #16
1100c     A7 26 02 FB | 	rdlong	local01, fp
11010     0B 26 66 F0 | 	shl	local01, #11
11014     0C 4E 85 F1 | 	sub	fp, #12
11018     A7 1A 02 FB | 	rdlong	arg05, fp
1101c     0D 19 02 F6 | 	mov	arg04, arg05
11020     01 18 66 F0 | 	shl	arg04, #1
11024     0C 27 02 F1 | 	add	local01, arg04
11028     10 4E 05 F1 | 	add	fp, #16
1102c     A7 12 02 FB | 	rdlong	arg01, fp
11030     14 4E 85 F1 | 	sub	fp, #20
11034     01 1A 66 F0 | 	shl	arg05, #1
11038     0D 13 02 F1 | 	add	arg01, arg05
1103c     E4 33 B1 FD | 	call	#_psdpeek
11040     FD 14 02 F6 | 	mov	arg02, result1
11044     13 13 02 F6 | 	mov	arg01, local01
11048     98 32 B1 FD | 	call	#_psdpoke
1104c     04 4E 05 F1 | 	add	fp, #4
11050     A7 26 02 FB | 	rdlong	local01, fp
11054     01 26 06 F1 | 	add	local01, #1
11058     A7 26 62 FC | 	wrlong	local01, fp
1105c     04 4E 85 F1 | 	sub	fp, #4
11060     02 00 00 FF 
11064     00 26 56 F2 | 	cmps	local01, ##1024 wc
11068     9C FF 9F CD |  if_b	jmp	#LR__1389
1106c                 | '     return 
1106c     E8 04 90 FD | 	jmp	#LR__1403
11070                 | '   return
11070                 | LR__1390
11070                 | ' for i=0 to 15 : harm(i)=0: next i  
11070     04 4E 05 F1 | 	add	fp, #4
11074     A7 00 68 FC | 	wrlong	#0, fp
11078     97 16 48 FB | 	callpa	#(@LR__1392-@LR__1391)>>2,fcache_load_ptr_
1107c                 | LR__1391
1107c     A7 26 02 FB | 	rdlong	local01, fp
11080     02 26 66 F0 | 	shl	local01, #2
11084     38 4E 05 F1 | 	add	fp, #56
11088     A7 26 02 F1 | 	add	local01, fp
1108c     13 01 68 FC | 	wrlong	#0, local01
11090     38 4E 85 F1 | 	sub	fp, #56
11094     A7 26 02 FB | 	rdlong	local01, fp
11098     01 26 06 F1 | 	add	local01, #1
1109c     A7 26 62 FC | 	wrlong	local01, fp
110a0     10 26 56 F2 | 	cmps	local01, #16 wc
110a4     D4 FF 9F CD |  if_b	jmp	#LR__1391
110a8                 | LR__1392
110a8     04 4E 85 F1 | 	sub	fp, #4
110ac                 | ' for i=numpar to 2 step -1 
110ac     A7 26 02 FB | 	rdlong	local01, fp
110b0     04 4E 05 F1 | 	add	fp, #4
110b4     A7 26 62 FC | 	wrlong	local01, fp
110b8     04 4E 85 F1 | 	sub	fp, #4
110bc                 | LR__1393
110bc     60 C7 BF FD | 	call	#_pop
110c0     2C 4E 05 F1 | 	add	fp, #44
110c4     A7 FA 61 FC | 	wrlong	result1, fp
110c8     04 4E 05 F1 | 	add	fp, #4
110cc     A7 FC 61 FC | 	wrlong	result2, fp
110d0     04 4E 05 F1 | 	add	fp, #4
110d4     A7 FE 61 FC | 	wrlong	result3, fp
110d8     30 4E 85 F1 | 	sub	fp, #48
110dc     A7 26 02 FB | 	rdlong	local01, fp
110e0     02 26 86 F1 | 	sub	local01, #2
110e4     02 26 66 F0 | 	shl	local01, #2
110e8     38 4E 05 F1 | 	add	fp, #56
110ec     A7 26 02 F1 | 	add	local01, fp
110f0     10 4E 85 F1 | 	sub	fp, #16
110f4     A7 12 02 F6 | 	mov	arg01, fp
110f8     2C 4E 85 F1 | 	sub	fp, #44
110fc     C0 C9 BF FD | 	call	#_converttofloat
11100     13 FB 61 FC | 	wrlong	result1, local01
11104     04 4E 05 F1 | 	add	fp, #4
11108     A7 26 02 FB | 	rdlong	local01, fp
1110c     01 26 86 F1 | 	sub	local01, #1
11110     A7 26 62 FC | 	wrlong	local01, fp
11114     04 4E 85 F1 | 	sub	fp, #4
11118     02 26 56 F2 | 	cmps	local01, #2 wc
1111c     9C FF 9F 3D |  if_ae	jmp	#LR__1393
11120     FC C6 BF FD | 	call	#_pop
11124     FF 26 02 F6 | 	mov	local01, result3
11128     2C 4E 05 F1 | 	add	fp, #44
1112c     A7 FA 61 FC | 	wrlong	result1, fp
11130     04 4E 05 F1 | 	add	fp, #4
11134     A7 FC 61 FC | 	wrlong	result2, fp
11138     04 4E 05 F1 | 	add	fp, #4
1113c     A7 26 62 FC | 	wrlong	local01, fp
11140     08 4E 85 F1 | 	sub	fp, #8
11144     A7 12 02 F6 | 	mov	arg01, fp
11148     2C 4E 85 F1 | 	sub	fp, #44
1114c     B4 C8 BF FD | 	call	#_converttoint
11150     10 4E 05 F1 | 	add	fp, #16
11154     A7 FA 61 FC | 	wrlong	result1, fp
11158                 | ' t1=pop()
11158                 | ' channel=converttoint(t1) : : if channel>31 then return
11158     FD 26 02 F6 | 	mov	local01, result1
1115c     10 4E 85 F1 | 	sub	fp, #16
11160     20 26 56 F2 | 	cmps	local01, #32 wc
11164     F0 03 90 3D |  if_ae	jmp	#LR__1403
11168     20 4E 05 F1 | 	add	fp, #32
1116c     A7 00 68 FC | 	wrlong	#0, fp
11170                 | ' max=0
11170                 | ' if harm(0)<0 then
11170     1C 4E 05 F1 | 	add	fp, #28
11174     A7 12 02 FB | 	rdlong	arg01, fp
11178     3C 4E 85 F1 | 	sub	fp, #60
1117c     00 14 06 F6 | 	mov	arg02, #0
11180     01 16 06 F6 | 	mov	arg03, #1
11184     84 9C B1 FD | 	call	#__system___float_cmp
11188     00 FA 55 F2 | 	cmps	result1, #0 wc
1118c     04 01 90 3D |  if_ae	jmp	#LR__1396
11190     3C 4E 05 F1 | 	add	fp, #60
11194     A7 FA 01 FB | 	rdlong	result1, fp
11198     1F FA 05 F4 | 	bitl	result1, #31
1119c     24 4E 85 F1 | 	sub	fp, #36
111a0     A7 FA 61 FC | 	wrlong	result1, fp
111a4     28 4E 05 F1 | 	add	fp, #40
111a8     A7 FA 01 FB | 	rdlong	result1, fp
111ac     1F FA 05 F4 | 	bitl	result1, #31
111b0     24 4E 85 F1 | 	sub	fp, #36
111b4     A7 FA 61 FC | 	wrlong	result1, fp
111b8     20 4E 05 F1 | 	add	fp, #32
111bc     00 C0 9F FF 
111c0     A7 00 68 FC | 	wrlong	##1065353216, fp
111c4     24 4E 85 F1 | 	sub	fp, #36
111c8     A7 26 02 FB | 	rdlong	local01, fp
111cc     28 4E 05 F1 | 	add	fp, #40
111d0     A7 26 62 FC | 	wrlong	local01, fp
111d4     24 4E 85 F1 | 	sub	fp, #36
111d8     A7 26 02 FB | 	rdlong	local01, fp
111dc     28 4E 05 F1 | 	add	fp, #40
111e0     A7 26 62 FC | 	wrlong	local01, fp
111e4                 | '   harm(0)=1
111e4                 | '   harm(1)=even
111e4                 | '   harm(2)=odd
111e4                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
111e4     40 4E 85 F1 | 	sub	fp, #64
111e8     A7 06 68 FC | 	wrlong	#3, fp
111ec                 | LR__1394
111ec     A7 1A 02 FB | 	rdlong	arg05, fp
111f0     0D 29 02 F6 | 	mov	local02, arg05
111f4     02 28 66 F0 | 	shl	local02, #2
111f8     38 4E 05 F1 | 	add	fp, #56
111fc     A7 28 02 F1 | 	add	local02, fp
11200     02 1A 86 F1 | 	sub	arg05, #2
11204     02 1A 66 F0 | 	shl	arg05, #2
11208     A7 1A 02 F1 | 	add	arg05, fp
1120c     0D 13 02 FB | 	rdlong	arg01, arg05
11210     24 4E 85 F1 | 	sub	fp, #36
11214     A7 14 02 FB | 	rdlong	arg02, fp
11218     18 4E 85 F1 | 	sub	fp, #24
1121c     B8 97 B1 FD | 	call	#__system___float_mul
11220     14 FB 61 FC | 	wrlong	result1, local02
11224     04 4E 05 F1 | 	add	fp, #4
11228     A7 2A 02 FB | 	rdlong	local03, fp
1122c     02 2A 06 F1 | 	add	local03, #2
11230     A7 2A 62 FC | 	wrlong	local03, fp
11234     10 2A 56 F2 | 	cmps	local03, #16 wc
11238     B0 FF 9F CD |  if_b	jmp	#LR__1394
1123c                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
1123c     A7 08 68 FC | 	wrlong	#4, fp
11240                 | LR__1395
11240     A7 2A 02 FB | 	rdlong	local03, fp
11244     15 29 02 F6 | 	mov	local02, local03
11248     02 28 66 F0 | 	shl	local02, #2
1124c     38 4E 05 F1 | 	add	fp, #56
11250     A7 28 02 F1 | 	add	local02, fp
11254     02 2A 86 F1 | 	sub	local03, #2
11258     02 2A 66 F0 | 	shl	local03, #2
1125c     A7 2A 02 F1 | 	add	local03, fp
11260     15 13 02 FB | 	rdlong	arg01, local03
11264     20 4E 85 F1 | 	sub	fp, #32
11268     A7 14 02 FB | 	rdlong	arg02, fp
1126c     1C 4E 85 F1 | 	sub	fp, #28
11270     64 97 B1 FD | 	call	#__system___float_mul
11274     14 FB 61 FC | 	wrlong	result1, local02
11278     04 4E 05 F1 | 	add	fp, #4
1127c     A7 2A 02 FB | 	rdlong	local03, fp
11280     02 2A 06 F1 | 	add	local03, #2
11284     A7 2A 62 FC | 	wrlong	local03, fp
11288     0F 2A 56 F2 | 	cmps	local03, #15 wc
1128c     B0 FF 9F CD |  if_b	jmp	#LR__1395
11290     04 4E 85 F1 | 	sub	fp, #4
11294                 | LR__1396
11294                 | ' if harm(0)>=0 then ' synthesize with harmonics
11294     3C 4E 05 F1 | 	add	fp, #60
11298     A7 12 02 FB | 	rdlong	arg01, fp
1129c     3C 4E 85 F1 | 	sub	fp, #60
112a0     00 14 06 F6 | 	mov	arg02, #0
112a4     01 16 66 F6 | 	neg	arg03, #1
112a8     60 9B B1 FD | 	call	#__system___float_cmp
112ac     00 FA 55 F2 | 	cmps	result1, #0 wc
112b0     A4 02 90 CD |  if_b	jmp	#LR__1402
112b4                 | '   for i=0 to 1023
112b4     04 4E 05 F1 | 	add	fp, #4
112b8     A7 00 68 FC | 	wrlong	#0, fp
112bc     04 4E 85 F1 | 	sub	fp, #4
112c0                 | LR__1397
112c0     24 4E 05 F1 | 	add	fp, #36
112c4     A7 00 68 FC | 	wrlong	#0, fp
112c8                 | '     spl=0
112c8                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
112c8     1C 4E 85 F1 | 	sub	fp, #28
112cc     A7 00 68 FC | 	wrlong	#0, fp
112d0                 | LR__1398
112d0     A7 28 02 FB | 	rdlong	local02, fp
112d4     02 28 66 F0 | 	shl	local02, #2
112d8     34 4E 05 F1 | 	add	fp, #52
112dc     A7 28 02 F1 | 	add	local02, fp
112e0     14 2B 02 FB | 	rdlong	local03, local02
112e4     87 E4 1D FF 
112e8     DB 29 06 F6 | 	mov	local02, ##1003032539
112ec     38 4E 85 F1 | 	sub	fp, #56
112f0     A7 12 02 FB | 	rdlong	arg01, fp
112f4     04 4E 85 F1 | 	sub	fp, #4
112f8     09 13 52 F6 | 	abs	arg01, arg01 wc
112fc     1F 2C C6 C9 |  if_b	decod	local04, #31
11300     00 2C 06 36 |  if_ae	mov	local04, #0
11304     CC 92 B1 FD | 	call	#__system___float_fromuns
11308     16 FB 61 F5 | 	xor	result1, local04
1130c     FD 14 02 F6 | 	mov	arg02, result1
11310     14 13 02 F6 | 	mov	arg01, local02
11314     C0 96 B1 FD | 	call	#__system___float_mul
11318     FD 28 02 F6 | 	mov	local02, result1
1131c     08 4E 05 F1 | 	add	fp, #8
11320     A7 12 02 FB | 	rdlong	arg01, fp
11324     08 4E 85 F1 | 	sub	fp, #8
11328     01 12 06 F1 | 	add	arg01, #1
1132c     09 13 52 F6 | 	abs	arg01, arg01 wc
11330     1F 2C C6 C9 |  if_b	decod	local04, #31
11334     00 2C 06 36 |  if_ae	mov	local04, #0
11338     98 92 B1 FD | 	call	#__system___float_fromuns
1133c     16 FB 61 F5 | 	xor	result1, local04
11340     FD 14 02 F6 | 	mov	arg02, result1
11344     14 13 02 F6 | 	mov	arg01, local02
11348     8C 96 B1 FD | 	call	#__system___float_mul
1134c     FD 12 02 F6 | 	mov	arg01, result1
11350     E8 9F B1 FD | 	call	#__system____builtin_sinf
11354     FD 14 02 F6 | 	mov	arg02, result1
11358     15 13 02 F6 | 	mov	arg01, local03
1135c     78 96 B1 FD | 	call	#__system___float_mul
11360     FD 14 02 F6 | 	mov	arg02, result1
11364     24 4E 05 F1 | 	add	fp, #36
11368     A7 12 02 FB | 	rdlong	arg01, fp
1136c     24 4E 85 F1 | 	sub	fp, #36
11370     94 92 B1 FD | 	call	#__system___float_add
11374     24 4E 05 F1 | 	add	fp, #36
11378     A7 FA 61 FC | 	wrlong	result1, fp
1137c     1C 4E 85 F1 | 	sub	fp, #28
11380     A7 16 02 FB | 	rdlong	arg03, fp
11384     01 16 06 F1 | 	add	arg03, #1
11388     A7 16 62 FC | 	wrlong	arg03, fp
1138c     10 16 56 F2 | 	cmps	arg03, #16 wc
11390     3C FF 9F CD |  if_b	jmp	#LR__1398
11394                 | '     if abs(spl)>max then max=abs(spl)  
11394     1C 4E 05 F1 | 	add	fp, #28
11398     A7 12 02 FB | 	rdlong	arg01, fp
1139c     1F 12 06 F4 | 	bitl	arg01, #31
113a0     04 4E 85 F1 | 	sub	fp, #4
113a4     A7 14 02 FB | 	rdlong	arg02, fp
113a8     20 4E 85 F1 | 	sub	fp, #32
113ac     01 16 66 F6 | 	neg	arg03, #1
113b0     58 9A B1 FD | 	call	#__system___float_cmp
113b4     01 FA 55 F2 | 	cmps	result1, #1 wc
113b8     18 00 90 CD |  if_b	jmp	#LR__1399
113bc     24 4E 05 F1 | 	add	fp, #36
113c0     A7 FA 01 FB | 	rdlong	result1, fp
113c4     1F FA 05 F4 | 	bitl	result1, #31
113c8     04 4E 85 F1 | 	sub	fp, #4
113cc     A7 FA 61 FC | 	wrlong	result1, fp
113d0     20 4E 85 F1 | 	sub	fp, #32
113d4                 | LR__1399
113d4     04 4E 05 F1 | 	add	fp, #4
113d8     A7 2A 02 FB | 	rdlong	local03, fp
113dc     01 2A 06 F1 | 	add	local03, #1
113e0     A7 2A 62 FC | 	wrlong	local03, fp
113e4     04 4E 85 F1 | 	sub	fp, #4
113e8     02 00 00 FF 
113ec     00 2A 56 F2 | 	cmps	local03, ##1024 wc
113f0     CC FE 9F CD |  if_b	jmp	#LR__1397
113f4                 | '   for i=0 to 1023
113f4     04 4E 05 F1 | 	add	fp, #4
113f8     A7 00 68 FC | 	wrlong	#0, fp
113fc     04 4E 85 F1 | 	sub	fp, #4
11400                 | LR__1400
11400     24 4E 05 F1 | 	add	fp, #36
11404     A7 00 68 FC | 	wrlong	#0, fp
11408                 | '     spl=0
11408                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
11408     1C 4E 85 F1 | 	sub	fp, #28
1140c     A7 00 68 FC | 	wrlong	#0, fp
11410                 | LR__1401
11410     A7 2A 02 FB | 	rdlong	local03, fp
11414     02 2A 66 F0 | 	shl	local03, #2
11418     34 4E 05 F1 | 	add	fp, #52
1141c     A7 2A 02 F1 | 	add	local03, fp
11420     15 2B 02 FB | 	rdlong	local03, local03
11424     1C 4E 85 F1 | 	sub	fp, #28
11428     A7 14 02 FB | 	rdlong	arg02, fp
1142c     20 4E 85 F1 | 	sub	fp, #32
11430     58 7F 23 FF 
11434     00 12 06 F6 | 	mov	arg01, ##1191096320
11438     A0 97 B1 FD | 	call	#__system___float_div
1143c     FD 14 02 F6 | 	mov	arg02, result1
11440     15 13 02 F6 | 	mov	arg01, local03
11444     90 95 B1 FD | 	call	#__system___float_mul
11448     FD 2A 02 F6 | 	mov	local03, result1
1144c     87 E4 1D FF 
11450     DB 29 06 F6 | 	mov	local02, ##1003032539
11454     04 4E 05 F1 | 	add	fp, #4
11458     A7 12 02 FB | 	rdlong	arg01, fp
1145c     04 4E 85 F1 | 	sub	fp, #4
11460     09 13 52 F6 | 	abs	arg01, arg01 wc
11464     1F 2C C6 C9 |  if_b	decod	local04, #31
11468     00 2C 06 36 |  if_ae	mov	local04, #0
1146c     64 91 B1 FD | 	call	#__system___float_fromuns
11470     16 FB 61 F5 | 	xor	result1, local04
11474     FD 14 02 F6 | 	mov	arg02, result1
11478     14 13 02 F6 | 	mov	arg01, local02
1147c     58 95 B1 FD | 	call	#__system___float_mul
11480     FD 28 02 F6 | 	mov	local02, result1
11484     08 4E 05 F1 | 	add	fp, #8
11488     A7 12 02 FB | 	rdlong	arg01, fp
1148c     08 4E 85 F1 | 	sub	fp, #8
11490     01 12 06 F1 | 	add	arg01, #1
11494     09 13 52 F6 | 	abs	arg01, arg01 wc
11498     1F 2C C6 C9 |  if_b	decod	local04, #31
1149c     00 2C 06 36 |  if_ae	mov	local04, #0
114a0     30 91 B1 FD | 	call	#__system___float_fromuns
114a4     16 FB 61 F5 | 	xor	result1, local04
114a8     FD 14 02 F6 | 	mov	arg02, result1
114ac     14 13 02 F6 | 	mov	arg01, local02
114b0     24 95 B1 FD | 	call	#__system___float_mul
114b4     FD 12 02 F6 | 	mov	arg01, result1
114b8     80 9E B1 FD | 	call	#__system____builtin_sinf
114bc     FD 14 02 F6 | 	mov	arg02, result1
114c0     15 13 02 F6 | 	mov	arg01, local03
114c4     10 95 B1 FD | 	call	#__system___float_mul
114c8     FD 14 02 F6 | 	mov	arg02, result1
114cc     24 4E 05 F1 | 	add	fp, #36
114d0     A7 12 02 FB | 	rdlong	arg01, fp
114d4     24 4E 85 F1 | 	sub	fp, #36
114d8     2C 91 B1 FD | 	call	#__system___float_add
114dc     24 4E 05 F1 | 	add	fp, #36
114e0     A7 FA 61 FC | 	wrlong	result1, fp
114e4     1C 4E 85 F1 | 	sub	fp, #28
114e8     A7 2A 02 FB | 	rdlong	local03, fp
114ec     01 2A 06 F1 | 	add	local03, #1
114f0     A7 2A 62 FC | 	wrlong	local03, fp
114f4     10 2A 56 F2 | 	cmps	local03, #16 wc
114f8     14 FF 9F CD |  if_b	jmp	#LR__1401
114fc     08 4E 05 F1 | 	add	fp, #8
11500     A7 2A 02 FB | 	rdlong	local03, fp
11504     0B 2A 66 F0 | 	shl	local03, #11
11508     0C 4E 85 F1 | 	sub	fp, #12
1150c     A7 28 02 FB | 	rdlong	local02, fp
11510     01 28 66 F0 | 	shl	local02, #1
11514     14 2B 02 F1 | 	add	local03, local02
11518     20 4E 05 F1 | 	add	fp, #32
1151c     A7 12 02 FB | 	rdlong	arg01, fp
11520     24 4E 85 F1 | 	sub	fp, #36
11524     01 14 06 F6 | 	mov	arg02, #1
11528     74 99 B1 FD | 	call	#__system___float_tointeger
1152c     FD 14 02 F6 | 	mov	arg02, result1
11530     15 13 02 F6 | 	mov	arg01, local03
11534     AC 2D B1 FD | 	call	#_psdpoke
11538     04 4E 05 F1 | 	add	fp, #4
1153c     A7 2A 02 FB | 	rdlong	local03, fp
11540     01 2A 06 F1 | 	add	local03, #1
11544     A7 2A 62 FC | 	wrlong	local03, fp
11548     04 4E 85 F1 | 	sub	fp, #4
1154c     02 00 00 FF 
11550     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11554     A8 FE 9F CD |  if_b	jmp	#LR__1400
11558                 | LR__1402
11558                 | LR__1403
11558     A7 F0 03 F6 | 	mov	ptra, fp
1155c     B2 00 A0 FD | 	call	#popregs_
11560                 | _do_defsnd_ret
11560     2D 00 64 FD | 	ret
11564                 | 
11564                 | ' 
11564                 | ' '-------------------- defsprite
11564                 | ' 
11564                 | ' sub do_defsprite
11564                 | _do_defsprite
11564     07 4A 05 F6 | 	mov	COUNT_, #7
11568     A8 00 A0 FD | 	call	#pushregs_
1156c     60 F0 07 F1 | 	add	ptra, #96
11570     AC C2 BF FD | 	call	#_pop
11574     FD 16 02 F6 | 	mov	arg03, result1
11578     FE 14 02 F6 | 	mov	arg02, result2
1157c     FF 12 02 F6 | 	mov	arg01, result3
11580     30 4E 05 F1 | 	add	fp, #48
11584     A7 16 62 FC | 	wrlong	arg03, fp
11588     04 4E 05 F1 | 	add	fp, #4
1158c     A7 14 62 FC | 	wrlong	arg02, fp
11590     04 4E 05 F1 | 	add	fp, #4
11594     A7 12 62 FC | 	wrlong	arg01, fp
11598     38 4E 85 F1 | 	sub	fp, #56
1159c     80 C2 BF FD | 	call	#_pop
115a0     FD 16 02 F6 | 	mov	arg03, result1
115a4     FE 14 02 F6 | 	mov	arg02, result2
115a8     FF 12 02 F6 | 	mov	arg01, result3
115ac     24 4E 05 F1 | 	add	fp, #36
115b0     A7 16 62 FC | 	wrlong	arg03, fp
115b4     04 4E 05 F1 | 	add	fp, #4
115b8     A7 14 62 FC | 	wrlong	arg02, fp
115bc     04 4E 05 F1 | 	add	fp, #4
115c0     A7 12 62 FC | 	wrlong	arg01, fp
115c4     2C 4E 85 F1 | 	sub	fp, #44
115c8     54 C2 BF FD | 	call	#_pop
115cc     FD 16 02 F6 | 	mov	arg03, result1
115d0     FE 14 02 F6 | 	mov	arg02, result2
115d4     FF 12 02 F6 | 	mov	arg01, result3
115d8     18 4E 05 F1 | 	add	fp, #24
115dc     A7 16 62 FC | 	wrlong	arg03, fp
115e0     04 4E 05 F1 | 	add	fp, #4
115e4     A7 14 62 FC | 	wrlong	arg02, fp
115e8     04 4E 05 F1 | 	add	fp, #4
115ec     A7 12 62 FC | 	wrlong	arg01, fp
115f0     20 4E 85 F1 | 	sub	fp, #32
115f4     28 C2 BF FD | 	call	#_pop
115f8     FD 16 02 F6 | 	mov	arg03, result1
115fc     FE 14 02 F6 | 	mov	arg02, result2
11600     FF 12 02 F6 | 	mov	arg01, result3
11604     0C 4E 05 F1 | 	add	fp, #12
11608     A7 16 62 FC | 	wrlong	arg03, fp
1160c     04 4E 05 F1 | 	add	fp, #4
11610     A7 14 62 FC | 	wrlong	arg02, fp
11614     04 4E 05 F1 | 	add	fp, #4
11618     A7 12 62 FC | 	wrlong	arg01, fp
1161c     14 4E 85 F1 | 	sub	fp, #20
11620     FC C1 BF FD | 	call	#_pop
11624     FF 16 02 F6 | 	mov	arg03, result3
11628     A7 FA 61 FC | 	wrlong	result1, fp
1162c     04 4E 05 F1 | 	add	fp, #4
11630     A7 FC 61 FC | 	wrlong	result2, fp
11634     04 4E 05 F1 | 	add	fp, #4
11638     A7 16 62 FC | 	wrlong	arg03, fp
1163c     08 4E 85 F1 | 	sub	fp, #8
11640     A7 12 02 F6 | 	mov	arg01, fp
11644     BC C3 BF FD | 	call	#_converttoint
11648     3C 4E 05 F1 | 	add	fp, #60
1164c     A7 FA 61 FC | 	wrlong	result1, fp
11650     30 4E 85 F1 | 	sub	fp, #48
11654     A7 12 02 F6 | 	mov	arg01, fp
11658     0C 4E 85 F1 | 	sub	fp, #12
1165c     A4 C3 BF FD | 	call	#_converttoint
11660     40 4E 05 F1 | 	add	fp, #64
11664     A7 FA 61 FC | 	wrlong	result1, fp
11668     28 4E 85 F1 | 	sub	fp, #40
1166c     A7 12 02 F6 | 	mov	arg01, fp
11670     18 4E 85 F1 | 	sub	fp, #24
11674     8C C3 BF FD | 	call	#_converttoint
11678     44 4E 05 F1 | 	add	fp, #68
1167c     A7 FA 61 FC | 	wrlong	result1, fp
11680     20 4E 85 F1 | 	sub	fp, #32
11684     A7 12 02 F6 | 	mov	arg01, fp
11688     24 4E 85 F1 | 	sub	fp, #36
1168c     74 C3 BF FD | 	call	#_converttoint
11690     48 4E 05 F1 | 	add	fp, #72
11694     A7 FA 61 FC | 	wrlong	result1, fp
11698     18 4E 85 F1 | 	sub	fp, #24
1169c     A7 12 02 F6 | 	mov	arg01, fp
116a0     30 4E 85 F1 | 	sub	fp, #48
116a4     5C C3 BF FD | 	call	#_converttoint
116a8     4C 4E 05 F1 | 	add	fp, #76
116ac     A7 FA 61 FC | 	wrlong	result1, fp
116b0                 | ' 
116b0                 | ' t5=pop()
116b0                 | ' t4=pop()
116b0                 | ' t3=pop()
116b0                 | ' t2=pop()
116b0                 | ' t1=pop()
116b0                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
116b0                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
116b0     10 4E 85 F1 | 	sub	fp, #16
116b4     A7 16 02 FB | 	rdlong	arg03, fp
116b8     3C 4E 85 F1 | 	sub	fp, #60
116bc     02 16 66 F0 | 	shl	arg03, #2
116c0     52 00 00 FF 
116c4     8C E4 05 F1 | 	add	objptr, ##42124
116c8     F2 16 02 F1 | 	add	arg03, objptr
116cc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
116d0     52 00 00 FF 
116d4     8C E4 85 F1 | 	sub	objptr, ##42124
116d8     2C 00 90 AD |  if_e	jmp	#LR__1410
116dc     3C 4E 05 F1 | 	add	fp, #60
116e0     A7 16 02 FB | 	rdlong	arg03, fp
116e4     3C 4E 85 F1 | 	sub	fp, #60
116e8     02 16 66 F0 | 	shl	arg03, #2
116ec     52 00 00 FF 
116f0     8C E4 05 F1 | 	add	objptr, ##42124
116f4     F2 16 02 F1 | 	add	arg03, objptr
116f8     0B 13 02 FB | 	rdlong	arg01, arg03
116fc     52 00 00 FF 
11700     8C E4 85 F1 | 	sub	objptr, ##42124
11704     38 A7 B1 FD | 	call	#__system___gc_free
11708                 | LR__1410
11708     3C 4E 05 F1 | 	add	fp, #60
1170c     A7 26 02 FB | 	rdlong	local01, fp
11710     0C 4E 05 F1 | 	add	fp, #12
11714     A7 16 02 FB | 	rdlong	arg03, fp
11718     04 4E 05 F1 | 	add	fp, #4
1171c     A7 14 02 FB | 	rdlong	arg02, fp
11720     0A 17 02 FD | 	qmul	arg03, arg02
11724     02 26 66 F0 | 	shl	local01, #2
11728     52 00 00 FF 
1172c     8C E4 05 F1 | 	add	objptr, ##42124
11730     F2 26 02 F1 | 	add	local01, objptr
11734     4C 4E 85 F1 | 	sub	fp, #76
11738     52 00 00 FF 
1173c     8C E4 85 F1 | 	sub	objptr, ##42124
11740     18 12 62 FD | 	getqx	arg01
11744     BC A5 B1 FD | 	call	#__system___gc_alloc_managed
11748     13 FB 61 FC | 	wrlong	result1, local01
1174c                 | ' for y=a3 to a3+a5-1
1174c     44 4E 05 F1 | 	add	fp, #68
11750     A7 28 02 FB | 	rdlong	local02, fp
11754     0C 4E 05 F1 | 	add	fp, #12
11758     A7 28 62 FC | 	wrlong	local02, fp
1175c     0C 4E 85 F1 | 	sub	fp, #12
11760     A7 2A 02 FB | 	rdlong	local03, fp
11764     08 4E 05 F1 | 	add	fp, #8
11768     A7 2C 02 FB | 	rdlong	local04, fp
1176c     4C 4E 85 F1 | 	sub	fp, #76
11770     16 2B 02 F1 | 	add	local03, local04
11774                 | LR__1411
11774     50 4E 05 F1 | 	add	fp, #80
11778     A7 28 02 FB | 	rdlong	local02, fp
1177c     50 4E 85 F1 | 	sub	fp, #80
11780     15 29 52 F2 | 	cmps	local02, local03 wc
11784     F4 00 90 3D |  if_ae	jmp	#LR__1414
11788                 | '   for x=a2 to a4+a2-1
11788     40 4E 05 F1 | 	add	fp, #64
1178c     A7 26 02 FB | 	rdlong	local01, fp
11790     14 4E 05 F1 | 	add	fp, #20
11794     A7 26 62 FC | 	wrlong	local01, fp
11798     0C 4E 85 F1 | 	sub	fp, #12
1179c     A7 2E 02 FB | 	rdlong	local05, fp
117a0     08 4E 85 F1 | 	sub	fp, #8
117a4     A7 30 02 FB | 	rdlong	local06, fp
117a8     40 4E 85 F1 | 	sub	fp, #64
117ac     18 2F 02 F1 | 	add	local05, local06
117b0                 | LR__1412
117b0     54 4E 05 F1 | 	add	fp, #84
117b4     A7 26 02 FB | 	rdlong	local01, fp
117b8     54 4E 85 F1 | 	sub	fp, #84
117bc     17 27 52 F2 | 	cmps	local01, local05 wc
117c0     A0 00 90 3D |  if_ae	jmp	#LR__1413
117c4     3C 4E 05 F1 | 	add	fp, #60
117c8     A7 30 02 FB | 	rdlong	local06, fp
117cc     18 4E 05 F1 | 	add	fp, #24
117d0     A7 2C 02 FB | 	rdlong	local04, fp
117d4     14 4E 85 F1 | 	sub	fp, #20
117d8     A7 28 02 FB | 	rdlong	local02, fp
117dc     10 4E 05 F1 | 	add	fp, #16
117e0     A7 26 02 FB | 	rdlong	local01, fp
117e4     13 17 02 F6 | 	mov	arg03, local01
117e8     0C 4E 85 F1 | 	sub	fp, #12
117ec     A7 14 02 FB | 	rdlong	arg02, fp
117f0     0A 17 82 F1 | 	sub	arg03, arg02
117f4     04 4E 05 F1 | 	add	fp, #4
117f8     A7 14 02 FB | 	rdlong	arg02, fp
117fc     0A 17 02 FD | 	qmul	arg03, arg02
11800     02 30 66 F0 | 	shl	local06, #2
11804     52 00 00 FF 
11808     8C E4 05 F1 | 	add	objptr, ##42124
1180c     F2 30 02 F1 | 	add	local06, objptr
11810     18 31 02 FB | 	rdlong	local06, local06
11814     16 33 02 F6 | 	mov	local07, local04
11818     14 33 82 F1 | 	sub	local07, local02
1181c     52 00 00 FF 
11820     8C E4 85 F1 | 	sub	objptr, ##42124
11824     F2 12 02 FB | 	rdlong	arg01, objptr
11828     16 13 02 F1 | 	add	arg01, local04
1182c     48 4E 85 F1 | 	sub	fp, #72
11830     0A 26 66 F0 | 	shl	local01, #10
11834     13 13 02 F1 | 	add	arg01, local01
11838     18 2C 62 FD | 	getqx	local04
1183c     16 33 02 F1 | 	add	local07, local04
11840     18 33 02 F1 | 	add	local07, local06
11844     2C 2B B1 FD | 	call	#_pspeek
11848     19 FB 41 FC | 	wrbyte	result1, local07
1184c     54 4E 05 F1 | 	add	fp, #84
11850     A7 32 02 FB | 	rdlong	local07, fp
11854     01 32 06 F1 | 	add	local07, #1
11858     A7 32 62 FC | 	wrlong	local07, fp
1185c     54 4E 85 F1 | 	sub	fp, #84
11860     4C FF 9F FD | 	jmp	#LR__1412
11864                 | LR__1413
11864     50 4E 05 F1 | 	add	fp, #80
11868     A7 32 02 FB | 	rdlong	local07, fp
1186c     01 32 06 F1 | 	add	local07, #1
11870     A7 32 62 FC | 	wrlong	local07, fp
11874     50 4E 85 F1 | 	sub	fp, #80
11878     F8 FE 9F FD | 	jmp	#LR__1411
1187c                 | LR__1414
1187c     3C 4E 05 F1 | 	add	fp, #60
11880     A7 32 02 FB | 	rdlong	local07, fp
11884     19 13 02 F6 | 	mov	arg01, local07
11888     3C 4E 85 F1 | 	sub	fp, #60
1188c     02 32 66 F0 | 	shl	local07, #2
11890     52 00 00 FF 
11894     8C E4 05 F1 | 	add	objptr, ##42124
11898     F2 32 02 F1 | 	add	local07, objptr
1189c     19 15 02 FB | 	rdlong	arg02, local07
118a0     52 00 00 FF 
118a4     8C E4 85 F1 | 	sub	objptr, ##42124
118a8     30 38 B1 FD | 	call	#_hg010b_spin2_setspriteptr
118ac     3C 4E 05 F1 | 	add	fp, #60
118b0     A7 12 02 FB | 	rdlong	arg01, fp
118b4     0C 4E 05 F1 | 	add	fp, #12
118b8     A7 14 02 FB | 	rdlong	arg02, fp
118bc     04 4E 05 F1 | 	add	fp, #4
118c0     A7 16 02 FB | 	rdlong	arg03, fp
118c4     4C 4E 85 F1 | 	sub	fp, #76
118c8     A0 38 B1 FD | 	call	#_hg010b_spin2_setspritesize
118cc     A7 F0 03 F6 | 	mov	ptra, fp
118d0     B2 00 A0 FD | 	call	#popregs_
118d4                 | _do_defsprite_ret
118d4     2D 00 64 FD | 	ret
118d8                 | 
118d8                 | ' 
118d8                 | ' '-------------------- deg
118d8                 | ' 
118d8                 | ' sub do_deg
118d8                 | _do_deg
118d8     52 00 00 FF 
118dc     E0 E4 05 F1 | 	add	objptr, ##42208
118e0     7D 47 9E FF 
118e4     F2 6A 68 FC | 	wrlong	##1016003125, objptr
118e8     04 E4 05 F1 | 	add	objptr, #4
118ec     97 32 A1 FF 
118f0     F2 C2 69 FC | 	wrlong	##1113927393, objptr
118f4     52 00 00 FF 
118f8     E4 E4 85 F1 | 	sub	objptr, ##42212
118fc                 | _do_deg_ret
118fc     2D 00 64 FD | 	ret
11900                 | 
11900                 | ' 
11900                 | ' '-------------------- delete
11900                 | ' 
11900                 | ' sub do_delete
11900                 | _do_delete
11900     05 4A 05 F6 | 	mov	COUNT_, #5
11904     A8 00 A0 FD | 	call	#pushregs_
11908     14 BF BF FD | 	call	#_pop
1190c     FE 18 02 F6 | 	mov	arg04, result2
11910     FF 16 02 F6 | 	mov	arg03, result3
11914     FD 26 02 F6 | 	mov	local01, result1
11918     0C 29 02 F6 | 	mov	local02, arg04
1191c     0B 2B 02 F6 | 	mov	local03, arg03
11920                 | ' 
11920                 | ' t1=pop()
11920                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11920     2B 2A 0E F2 | 	cmp	local03, #43 wz
11924     10 00 90 5D |  if_ne	jmp	#LR__1420
11928     13 13 02 F6 | 	mov	arg01, local01
1192c     68 C0 BF FD | 	call	#_convertstring
11930     FD 26 02 F6 | 	mov	local01, result1
11934     1F 2A 06 F6 | 	mov	local03, #31
11938                 | LR__1420
11938                 | ' if t1.result_type<>result_string then printerror(15): return
11938     1F 2A 0E F2 | 	cmp	local03, #31 wz
1193c     10 00 90 AD |  if_e	jmp	#LR__1421
11940     0F 12 06 F6 | 	mov	arg01, #15
11944     00 14 06 F6 | 	mov	arg02, #0
11948     B0 27 B1 FD | 	call	#_printerror
1194c     E4 00 90 FD | 	jmp	#LR__1425
11950                 | LR__1421
11950                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
11950     4A 00 00 FF 
11954     94 E4 05 F1 | 	add	objptr, ##38036
11958     F2 12 02 FB | 	rdlong	arg01, objptr
1195c     4A 00 00 FF 
11960     94 E4 85 F1 | 	sub	objptr, ##38036
11964     BF 01 00 FF 
11968     E1 15 06 F6 | 	mov	arg02, ##@LR__6039
1196c     14 62 B1 FD | 	call	#__system___string_cmp
11970     00 FA 0D F2 | 	cmp	result1, #0 wz
11974     34 00 90 AD |  if_e	jmp	#LR__1422
11978     4A 00 00 FF 
1197c     94 E4 05 F1 | 	add	objptr, ##38036
11980     F2 12 02 FB | 	rdlong	arg01, objptr
11984     4A 00 00 FF 
11988     94 E4 85 F1 | 	sub	objptr, ##38036
1198c     BF 01 00 FF 
11990     E3 15 06 F6 | 	mov	arg02, ##@LR__6040
11994     20 62 B1 FD | 	call	#__system___string_concat
11998     FD 12 02 F6 | 	mov	arg01, result1
1199c     13 15 02 F6 | 	mov	arg02, local01
119a0     14 62 B1 FD | 	call	#__system___string_concat
119a4     FD 2C 02 F6 | 	mov	local04, result1
119a8     14 00 90 FD | 	jmp	#LR__1423
119ac                 | LR__1422
119ac     BF 01 00 FF 
119b0     E5 13 06 F6 | 	mov	arg01, ##@LR__6041
119b4     13 15 02 F6 | 	mov	arg02, local01
119b8     FC 61 B1 FD | 	call	#__system___string_concat
119bc     FD 2C 02 F6 | 	mov	local04, result1
119c0                 | LR__1423
119c0     16 13 02 F6 | 	mov	arg01, local04
119c4     64 89 B1 FD | 	call	#__system___remove
119c8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
119cc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
119d0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
119d4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
119d8     FD 2E 0A F6 | 	mov	local05, result1 wz
119dc                 | ' kill filename$
119dc                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
119dc     54 00 90 AD |  if_e	jmp	#LR__1424
119e0     00 12 06 F6 | 	mov	arg01, #0
119e4     24 BE B1 FD | 	call	#__system___getiolock_0620
119e8     FD 12 02 F6 | 	mov	arg01, result1
119ec     6C 61 B1 FD | 	call	#__system___lockmem
119f0     BF 01 00 FF 
119f4     E7 15 06 F6 | 	mov	arg02, ##@LR__6042
119f8     00 12 06 F6 | 	mov	arg01, #0
119fc     00 16 06 F6 | 	mov	arg03, #0
11a00     50 6E B1 FD | 	call	#__system___basic_print_string
11a04     00 12 06 F6 | 	mov	arg01, #0
11a08     17 15 02 F6 | 	mov	arg02, local05
11a0c     00 16 06 F6 | 	mov	arg03, #0
11a10     0A 18 06 F6 | 	mov	arg04, #10
11a14     80 6E B1 FD | 	call	#__system___basic_print_integer
11a18     00 12 06 F6 | 	mov	arg01, #0
11a1c     0A 14 06 F6 | 	mov	arg02, #10
11a20     00 16 06 F6 | 	mov	arg03, #0
11a24     D4 6D B1 FD | 	call	#__system___basic_print_char
11a28     00 12 06 F6 | 	mov	arg01, #0
11a2c     DC BD B1 FD | 	call	#__system___getiolock_0620
11a30     FD 00 68 FC | 	wrlong	#0, result1
11a34                 | LR__1424
11a34                 | LR__1425
11a34     A7 F0 03 F6 | 	mov	ptra, fp
11a38     B2 00 A0 FD | 	call	#popregs_
11a3c                 | _do_delete_ret
11a3c     2D 00 64 FD | 	ret
11a40                 | 
11a40                 | ' 
11a40                 | ' '-------------------- dir
11a40                 | ' 
11a40                 | ' sub do_dir
11a40                 | _do_dir
11a40     13 4A 05 F6 | 	mov	COUNT_, #19
11a44     A8 00 A0 FD | 	call	#pushregs_
11a48     01 00 00 FF 
11a4c     38 F0 07 F1 | 	add	ptra, ##568
11a50                 | ' 
11a50                 | ' print "Current directory: "; currentdir$ 
11a50     00 12 06 F6 | 	mov	arg01, #0
11a54     B4 BD B1 FD | 	call	#__system___getiolock_0620
11a58     FD 12 02 F6 | 	mov	arg01, result1
11a5c     FC 60 B1 FD | 	call	#__system___lockmem
11a60     C0 01 00 FF 
11a64     1F 14 06 F6 | 	mov	arg02, ##@LR__6043
11a68     00 12 06 F6 | 	mov	arg01, #0
11a6c     00 16 06 F6 | 	mov	arg03, #0
11a70     E0 6D B1 FD | 	call	#__system___basic_print_string
11a74     4A 00 00 FF 
11a78     94 E4 05 F1 | 	add	objptr, ##38036
11a7c     F2 14 02 FB | 	rdlong	arg02, objptr
11a80     4A 00 00 FF 
11a84     94 E4 85 F1 | 	sub	objptr, ##38036
11a88     00 12 06 F6 | 	mov	arg01, #0
11a8c     00 16 06 F6 | 	mov	arg03, #0
11a90     C0 6D B1 FD | 	call	#__system___basic_print_string
11a94     00 12 06 F6 | 	mov	arg01, #0
11a98     0A 14 06 F6 | 	mov	arg02, #10
11a9c     00 16 06 F6 | 	mov	arg03, #0
11aa0     58 6D B1 FD | 	call	#__system___basic_print_char
11aa4     01 26 06 F6 | 	mov	local01, #1
11aa8     00 12 06 F6 | 	mov	arg01, #0
11aac     5C BD B1 FD | 	call	#__system___getiolock_0620
11ab0     FD 00 68 FC | 	wrlong	#0, result1
11ab4     00 28 06 F6 | 	mov	local02, #0
11ab8     00 2A 06 F6 | 	mov	local03, #0
11abc                 | ' px=0
11abc                 | ' for i=0 to 127: filelist(i)="" : next i
11abc     00 2C 06 F6 | 	mov	local04, #0
11ac0     1C 4E 05 F1 | 	add	fp, #28
11ac4     97 12 48 FB | 	callpa	#(@LR__1431-@LR__1430)>>2,fcache_load_ptr_
11ac8                 | LR__1430
11ac8     16 2F 02 F6 | 	mov	local05, local04
11acc     02 2E 66 F0 | 	shl	local05, #2
11ad0     A7 2E 02 F1 | 	add	local05, fp
11ad4     C0 01 00 FF 
11ad8     33 30 06 F6 | 	mov	local06, ##@LR__6044
11adc     17 31 62 FC | 	wrlong	local06, local05
11ae0     01 2C 06 F1 | 	add	local04, #1
11ae4     80 2C 56 F2 | 	cmps	local04, #128 wc
11ae8     DC FF 9F CD |  if_b	jmp	#LR__1430
11aec                 | LR__1431
11aec     1C 4E 85 F1 | 	sub	fp, #28
11af0     C0 01 00 FF 
11af4     34 12 06 F6 | 	mov	arg01, ##@LR__6045
11af8     10 14 06 F6 | 	mov	arg02, #16
11afc     CC BE B1 FD | 	call	#__system___basic_dir
11b00     FD 32 02 F6 | 	mov	local07, result1
11b04     00 34 06 F6 | 	mov	local08, #0
11b08                 | ' filename=dir$("*", fbDirectory)
11b08                 | ' n=0
11b08                 | ' while filename <> "" andalso filename <> nil andalso n<128
11b08                 | LR__1432
11b08     C0 01 00 FF 
11b0c     36 36 06 F6 | 	mov	local09, ##@LR__6046
11b10     19 13 02 F6 | 	mov	arg01, local07
11b14     1B 15 02 F6 | 	mov	arg02, local09
11b18     68 60 B1 FD | 	call	#__system___string_cmp
11b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
11b20     68 00 90 AD |  if_e	jmp	#LR__1433
11b24     00 36 06 F6 | 	mov	local09, #0
11b28     19 13 02 F6 | 	mov	arg01, local07
11b2c     00 14 06 F6 | 	mov	arg02, #0
11b30     50 60 B1 FD | 	call	#__system___string_cmp
11b34     00 FA 0D F2 | 	cmp	result1, #0 wz
11b38     50 00 90 AD |  if_e	jmp	#LR__1433
11b3c     80 34 56 F2 | 	cmps	local08, #128 wc
11b40     48 00 90 3D |  if_ae	jmp	#LR__1433
11b44     C0 01 00 FF 
11b48     37 12 06 F6 | 	mov	arg01, ##@LR__6047
11b4c     19 15 02 F6 | 	mov	arg02, local07
11b50     64 60 B1 FD | 	call	#__system___string_concat
11b54     FD 32 02 F6 | 	mov	local07, result1
11b58     1A 2F 02 F6 | 	mov	local05, local08
11b5c     02 2E 66 F0 | 	shl	local05, #2
11b60     1C 4E 05 F1 | 	add	fp, #28
11b64     A7 2E 02 F1 | 	add	local05, fp
11b68     17 33 62 FC | 	wrlong	local07, local05
11b6c     01 34 06 F1 | 	add	local08, #1
11b70     00 2E 06 F6 | 	mov	local05, #0
11b74     00 12 06 F6 | 	mov	arg01, #0
11b78     00 14 06 F6 | 	mov	arg02, #0
11b7c     1C 4E 85 F1 | 	sub	fp, #28
11b80     48 BE B1 FD | 	call	#__system___basic_dir
11b84     FD 32 02 F6 | 	mov	local07, result1
11b88     7C FF 9F FD | 	jmp	#LR__1432
11b8c                 | LR__1433
11b8c                 | ' for i=0 to n-1			' now sort this
11b8c     00 2C 06 F6 | 	mov	local04, #0
11b90     1A 39 02 F6 | 	mov	local10, local08
11b94                 | LR__1434
11b94     1C 2D 52 F2 | 	cmps	local04, local10 wc
11b98     DC 00 90 3D |  if_ae	jmp	#LR__1438
11b9c     00 3A 06 F6 | 	mov	local11, #0
11ba0                 | '   swapped=false
11ba0                 | '   for j=0 to n-i-2
11ba0     00 3C 06 F6 | 	mov	local12, #0
11ba4     1A 3F 02 F6 | 	mov	local13, local08
11ba8     16 3F 82 F1 | 	sub	local13, local04
11bac     01 3E 86 F1 | 	sub	local13, #1
11bb0                 | LR__1435
11bb0     1F 3D 52 F2 | 	cmps	local12, local13 wc
11bb4     B0 00 90 3D |  if_ae	jmp	#LR__1437
11bb8                 | '     if filelist(j) > filelist(j+1) then
11bb8     1E 37 02 F6 | 	mov	local09, local12
11bbc     02 36 66 F0 | 	shl	local09, #2
11bc0     1C 4E 05 F1 | 	add	fp, #28
11bc4     A7 36 02 F1 | 	add	local09, fp
11bc8     1B 13 02 FB | 	rdlong	arg01, local09
11bcc     1E 37 02 F6 | 	mov	local09, local12
11bd0     01 36 06 F1 | 	add	local09, #1
11bd4     1B 31 02 F6 | 	mov	local06, local09
11bd8     02 30 66 F0 | 	shl	local06, #2
11bdc     A7 26 02 F6 | 	mov	local01, fp
11be0     A7 30 02 F1 | 	add	local06, fp
11be4     18 2F 02 FB | 	rdlong	local05, local06
11be8     17 15 02 F6 | 	mov	arg02, local05
11bec     1C 4E 85 F1 | 	sub	fp, #28
11bf0     90 5F B1 FD | 	call	#__system___string_cmp
11bf4     01 FA 55 F2 | 	cmps	result1, #1 wc
11bf8     64 00 90 CD |  if_b	jmp	#LR__1436
11bfc     1E 37 02 F6 | 	mov	local09, local12
11c00     01 36 06 F1 | 	add	local09, #1
11c04     02 36 66 F0 | 	shl	local09, #2
11c08     1C 4E 05 F1 | 	add	fp, #28
11c0c     A7 36 02 F1 | 	add	local09, fp
11c10     1B 3B 02 FB | 	rdlong	local11, local09
11c14     1E 31 02 F6 | 	mov	local06, local12
11c18     02 30 66 F0 | 	shl	local06, #2
11c1c     A7 30 02 F1 | 	add	local06, fp
11c20     18 2F 02 FB | 	rdlong	local05, local06
11c24     1E 37 02 F6 | 	mov	local09, local12
11c28     1B 31 02 F6 | 	mov	local06, local09
11c2c     02 30 66 F0 | 	shl	local06, #2
11c30     A7 26 02 F6 | 	mov	local01, fp
11c34     A7 30 02 F1 | 	add	local06, fp
11c38     18 3B 62 FC | 	wrlong	local11, local06
11c3c     1E 29 02 F6 | 	mov	local02, local12
11c40     01 28 06 F1 | 	add	local02, #1
11c44     14 41 02 F6 | 	mov	local14, local02
11c48     02 40 66 F0 | 	shl	local14, #2
11c4c     A7 42 02 F6 | 	mov	local15, fp
11c50     A7 40 02 F1 | 	add	local14, fp
11c54     20 2F 62 FC | 	wrlong	local05, local14
11c58     01 3A 66 F6 | 	neg	local11, #1
11c5c     1C 4E 85 F1 | 	sub	fp, #28
11c60                 | LR__1436
11c60     01 3C 06 F1 | 	add	local12, #1
11c64     48 FF 9F FD | 	jmp	#LR__1435
11c68                 | LR__1437
11c68                 | ' if not swapped then exit for
11c68     1D 45 22 F6 | 	not	local16, local11
11c6c     00 44 0E F2 | 	cmp	local16, #0 wz
11c70     01 2C 06 A1 |  if_e	add	local04, #1
11c74     1C FF 9F AD |  if_e	jmp	#LR__1434
11c78                 | LR__1438
11c78                 | ' for i=0 to n-1
11c78     00 2C 06 F6 | 	mov	local04, #0
11c7c     1A 47 02 F6 | 	mov	local17, local08
11c80                 | LR__1439
11c80     23 2D 52 F2 | 	cmps	local04, local17 wc
11c84     94 00 90 3D |  if_ae	jmp	#LR__1441
11c88                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11c88     00 12 06 F6 | 	mov	arg01, #0
11c8c     7C BB B1 FD | 	call	#__system___getiolock_0620
11c90     FD 12 02 F6 | 	mov	arg01, result1
11c94     C4 5E B1 FD | 	call	#__system___lockmem
11c98     16 29 02 F6 | 	mov	local02, local04
11c9c     02 28 66 F0 | 	shl	local02, #2
11ca0     1C 4E 05 F1 | 	add	fp, #28
11ca4     A7 40 02 F6 | 	mov	local14, fp
11ca8     A7 28 02 F1 | 	add	local02, fp
11cac     14 15 02 FB | 	rdlong	arg02, local02
11cb0     00 26 06 F6 | 	mov	local01, #0
11cb4     00 12 06 F6 | 	mov	arg01, #0
11cb8     00 16 06 F6 | 	mov	arg03, #0
11cbc     1C 4E 85 F1 | 	sub	fp, #28
11cc0     90 6B B1 FD | 	call	#__system___basic_print_string
11cc4     00 12 06 F6 | 	mov	arg01, #0
11cc8     40 BB B1 FD | 	call	#__system___getiolock_0620
11ccc     FD 00 68 FC | 	wrlong	#0, result1
11cd0     40 2A 06 F1 | 	add	local03, #64
11cd4     15 13 02 F6 | 	mov	arg01, local03
11cd8     20 41 B1 FD | 	call	#_hg010b_spin2_setcursorx
11cdc     00 2B 56 F2 | 	cmps	local03, #256 wc
11ce0     30 00 90 CD |  if_b	jmp	#LR__1440
11ce4     00 2A 06 F6 | 	mov	local03, #0
11ce8     00 12 06 F6 | 	mov	arg01, #0
11cec     1C BB B1 FD | 	call	#__system___getiolock_0620
11cf0     FD 12 02 F6 | 	mov	arg01, result1
11cf4     64 5E B1 FD | 	call	#__system___lockmem
11cf8     00 12 06 F6 | 	mov	arg01, #0
11cfc     0A 14 06 F6 | 	mov	arg02, #10
11d00     00 16 06 F6 | 	mov	arg03, #0
11d04     F4 6A B1 FD | 	call	#__system___basic_print_char
11d08     00 12 06 F6 | 	mov	arg01, #0
11d0c     FC BA B1 FD | 	call	#__system___getiolock_0620
11d10     FD 00 68 FC | 	wrlong	#0, result1
11d14                 | LR__1440
11d14     01 2C 06 F1 | 	add	local04, #1
11d18     64 FF 9F FD | 	jmp	#LR__1439
11d1c                 | LR__1441
11d1c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11d1c     80 34 56 F2 | 	cmps	local08, #128 wc
11d20     44 00 90 CD |  if_b	jmp	#LR__1442
11d24     00 12 06 F6 | 	mov	arg01, #0
11d28     E0 BA B1 FD | 	call	#__system___getiolock_0620
11d2c     FD 12 02 F6 | 	mov	arg01, result1
11d30     28 5E B1 FD | 	call	#__system___lockmem
11d34     C0 01 00 FF 
11d38     3E 14 06 F6 | 	mov	arg02, ##@LR__6048
11d3c     00 12 06 F6 | 	mov	arg01, #0
11d40     00 16 06 F6 | 	mov	arg03, #0
11d44     0C 6B B1 FD | 	call	#__system___basic_print_string
11d48     00 12 06 F6 | 	mov	arg01, #0
11d4c     0A 14 06 F6 | 	mov	arg02, #10
11d50     00 16 06 F6 | 	mov	arg03, #0
11d54     A4 6A B1 FD | 	call	#__system___basic_print_char
11d58     00 12 06 F6 | 	mov	arg01, #0
11d5c     AC BA B1 FD | 	call	#__system___getiolock_0620
11d60     FD 00 68 FC | 	wrlong	#0, result1
11d64     00 26 06 F6 | 	mov	local01, #0
11d68                 | LR__1442
11d68                 | ' print
11d68     00 12 06 F6 | 	mov	arg01, #0
11d6c     9C BA B1 FD | 	call	#__system___getiolock_0620
11d70     FD 12 02 F6 | 	mov	arg01, result1
11d74     E4 5D B1 FD | 	call	#__system___lockmem
11d78     00 12 06 F6 | 	mov	arg01, #0
11d7c     0A 14 06 F6 | 	mov	arg02, #10
11d80     00 16 06 F6 | 	mov	arg03, #0
11d84     74 6A B1 FD | 	call	#__system___basic_print_char
11d88     00 12 06 F6 | 	mov	arg01, #0
11d8c     7C BA B1 FD | 	call	#__system___getiolock_0620
11d90     FD 00 68 FC | 	wrlong	#0, result1
11d94     00 30 06 F6 | 	mov	local06, #0
11d98     00 34 06 F6 | 	mov	local08, #0
11d9c     00 2A 06 F6 | 	mov	local03, #0
11da0                 | ' return cursor_y
11da0     3E E4 05 F1 | 	add	objptr, #62
11da4     F2 48 C2 FA | 	rdbyte	local18, objptr
11da8     3E E4 85 F1 | 	sub	objptr, #62
11dac     C0 01 00 FF 
11db0     70 12 06 F6 | 	mov	arg01, ##@LR__6049
11db4     21 14 06 F6 | 	mov	arg02, #33
11db8     10 BC B1 FD | 	call	#__system___basic_dir
11dbc     FD 32 02 F6 | 	mov	local07, result1
11dc0                 | ' n=0
11dc0                 | ' px=0: py=v.getcursory()
11dc0                 | ' filename = dir$("*", fbNormal )   
11dc0                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11dc0                 | LR__1443
11dc0     C0 01 00 FF 
11dc4     72 36 06 F6 | 	mov	local09, ##@LR__6050
11dc8     19 13 02 F6 | 	mov	arg01, local07
11dcc     1B 15 02 F6 | 	mov	arg02, local09
11dd0     B0 5D B1 FD | 	call	#__system___string_cmp
11dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
11dd8     54 00 90 AD |  if_e	jmp	#LR__1444
11ddc     00 36 06 F6 | 	mov	local09, #0
11de0     19 13 02 F6 | 	mov	arg01, local07
11de4     00 14 06 F6 | 	mov	arg02, #0
11de8     98 5D B1 FD | 	call	#__system___string_cmp
11dec     00 FA 0D F2 | 	cmp	result1, #0 wz
11df0     3C 00 90 AD |  if_e	jmp	#LR__1444
11df4     80 34 56 F2 | 	cmps	local08, #128 wc
11df8     34 00 90 3D |  if_ae	jmp	#LR__1444
11dfc     1A 2F 02 F6 | 	mov	local05, local08
11e00     02 2E 66 F0 | 	shl	local05, #2
11e04     1C 4E 05 F1 | 	add	fp, #28
11e08     A7 2E 02 F1 | 	add	local05, fp
11e0c     17 33 62 FC | 	wrlong	local07, local05
11e10     01 34 06 F1 | 	add	local08, #1
11e14     00 2E 06 F6 | 	mov	local05, #0
11e18     00 12 06 F6 | 	mov	arg01, #0
11e1c     00 14 06 F6 | 	mov	arg02, #0
11e20     1C 4E 85 F1 | 	sub	fp, #28
11e24     A4 BB B1 FD | 	call	#__system___basic_dir
11e28     FD 32 02 F6 | 	mov	local07, result1
11e2c     90 FF 9F FD | 	jmp	#LR__1443
11e30                 | LR__1444
11e30                 | ' for i =0 to n-1
11e30     00 2C 06 F6 | 	mov	local04, #0
11e34                 | LR__1445
11e34     1A 2D 52 F2 | 	cmps	local04, local08 wc
11e38     D8 00 90 3D |  if_ae	jmp	#LR__1449
11e3c     00 3A 06 F6 | 	mov	local11, #0
11e40                 | '   swapped=false
11e40                 | '   for j=0 to n-i-2
11e40     00 3C 06 F6 | 	mov	local12, #0
11e44     1A 4B 02 F6 | 	mov	local19, local08
11e48     16 4B 82 F1 | 	sub	local19, local04
11e4c     01 4A 86 F1 | 	sub	local19, #1
11e50                 | LR__1446
11e50     25 3D 52 F2 | 	cmps	local12, local19 wc
11e54     AC 00 90 3D |  if_ae	jmp	#LR__1448
11e58                 | '     if filelist(j) > filelist(j+1) then
11e58     1E 37 02 F6 | 	mov	local09, local12
11e5c     02 36 66 F0 | 	shl	local09, #2
11e60     1C 4E 05 F1 | 	add	fp, #28
11e64     A7 36 02 F1 | 	add	local09, fp
11e68     1B 13 02 FB | 	rdlong	arg01, local09
11e6c     1E 37 02 F6 | 	mov	local09, local12
11e70     01 36 06 F1 | 	add	local09, #1
11e74     1B 31 02 F6 | 	mov	local06, local09
11e78     02 30 66 F0 | 	shl	local06, #2
11e7c     A7 26 02 F6 | 	mov	local01, fp
11e80     A7 30 02 F1 | 	add	local06, fp
11e84     18 2F 02 FB | 	rdlong	local05, local06
11e88     17 15 02 F6 | 	mov	arg02, local05
11e8c     1C 4E 85 F1 | 	sub	fp, #28
11e90     F0 5C B1 FD | 	call	#__system___string_cmp
11e94     01 FA 55 F2 | 	cmps	result1, #1 wc
11e98     60 00 90 CD |  if_b	jmp	#LR__1447
11e9c     1E 37 02 F6 | 	mov	local09, local12
11ea0     01 36 06 F1 | 	add	local09, #1
11ea4     02 36 66 F0 | 	shl	local09, #2
11ea8     1C 4E 05 F1 | 	add	fp, #28
11eac     A7 36 02 F1 | 	add	local09, fp
11eb0     1B 45 02 FB | 	rdlong	local16, local09
11eb4     1E 31 02 F6 | 	mov	local06, local12
11eb8     02 30 66 F0 | 	shl	local06, #2
11ebc     A7 30 02 F1 | 	add	local06, fp
11ec0     18 2F 02 FB | 	rdlong	local05, local06
11ec4     1E 37 02 F6 | 	mov	local09, local12
11ec8     1B 31 02 F6 | 	mov	local06, local09
11ecc     02 30 66 F0 | 	shl	local06, #2
11ed0     A7 26 02 F6 | 	mov	local01, fp
11ed4     A7 30 02 F1 | 	add	local06, fp
11ed8     18 45 62 FC | 	wrlong	local16, local06
11edc     1E 41 02 F6 | 	mov	local14, local12
11ee0     01 40 06 F1 | 	add	local14, #1
11ee4     02 40 66 F0 | 	shl	local14, #2
11ee8     A7 42 02 F6 | 	mov	local15, fp
11eec     A7 40 02 F1 | 	add	local14, fp
11ef0     20 2F 62 FC | 	wrlong	local05, local14
11ef4     01 3A 66 F6 | 	neg	local11, #1
11ef8     1C 4E 85 F1 | 	sub	fp, #28
11efc                 | LR__1447
11efc     01 3C 06 F1 | 	add	local12, #1
11f00     4C FF 9F FD | 	jmp	#LR__1446
11f04                 | LR__1448
11f04                 | ' if not swapped then exit for
11f04     1D 45 22 F6 | 	not	local16, local11
11f08     00 44 0E F2 | 	cmp	local16, #0 wz
11f0c     01 2C 06 A1 |  if_e	add	local04, #1
11f10     20 FF 9F AD |  if_e	jmp	#LR__1445
11f14                 | LR__1449
11f14                 | ' for i=0 to n-1
11f14     00 2C 06 F6 | 	mov	local04, #0
11f18                 | LR__1450
11f18     1A 2D 52 F2 | 	cmps	local04, local08 wc
11f1c     8C 00 90 3D |  if_ae	jmp	#LR__1452
11f20                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11f20     00 12 06 F6 | 	mov	arg01, #0
11f24     E4 B8 B1 FD | 	call	#__system___getiolock_0620
11f28     FD 12 02 F6 | 	mov	arg01, result1
11f2c     2C 5C B1 FD | 	call	#__system___lockmem
11f30     16 29 02 F6 | 	mov	local02, local04
11f34     02 28 66 F0 | 	shl	local02, #2
11f38     1C 4E 05 F1 | 	add	fp, #28
11f3c     A7 28 02 F1 | 	add	local02, fp
11f40     14 15 02 FB | 	rdlong	arg02, local02
11f44     00 12 06 F6 | 	mov	arg01, #0
11f48     00 16 06 F6 | 	mov	arg03, #0
11f4c     1C 4E 85 F1 | 	sub	fp, #28
11f50     00 69 B1 FD | 	call	#__system___basic_print_string
11f54     00 12 06 F6 | 	mov	arg01, #0
11f58     B0 B8 B1 FD | 	call	#__system___getiolock_0620
11f5c     FD 00 68 FC | 	wrlong	#0, result1
11f60     40 2A 06 F1 | 	add	local03, #64
11f64     15 13 02 F6 | 	mov	arg01, local03
11f68     90 3E B1 FD | 	call	#_hg010b_spin2_setcursorx
11f6c     00 2B 56 F2 | 	cmps	local03, #256 wc
11f70     30 00 90 CD |  if_b	jmp	#LR__1451
11f74     00 2A 06 F6 | 	mov	local03, #0
11f78     00 12 06 F6 | 	mov	arg01, #0
11f7c     8C B8 B1 FD | 	call	#__system___getiolock_0620
11f80     FD 12 02 F6 | 	mov	arg01, result1
11f84     D4 5B B1 FD | 	call	#__system___lockmem
11f88     00 12 06 F6 | 	mov	arg01, #0
11f8c     0A 14 06 F6 | 	mov	arg02, #10
11f90     00 16 06 F6 | 	mov	arg03, #0
11f94     64 68 B1 FD | 	call	#__system___basic_print_char
11f98     00 12 06 F6 | 	mov	arg01, #0
11f9c     6C B8 B1 FD | 	call	#__system___getiolock_0620
11fa0     FD 00 68 FC | 	wrlong	#0, result1
11fa4                 | LR__1451
11fa4     01 2C 06 F1 | 	add	local04, #1
11fa8     6C FF 9F FD | 	jmp	#LR__1450
11fac                 | LR__1452
11fac                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11fac     80 34 56 F2 | 	cmps	local08, #128 wc
11fb0     40 00 90 CD |  if_b	jmp	#LR__1453
11fb4     00 12 06 F6 | 	mov	arg01, #0
11fb8     50 B8 B1 FD | 	call	#__system___getiolock_0620
11fbc     FD 12 02 F6 | 	mov	arg01, result1
11fc0     98 5B B1 FD | 	call	#__system___lockmem
11fc4     C0 01 00 FF 
11fc8     73 14 06 F6 | 	mov	arg02, ##@LR__6051
11fcc     00 12 06 F6 | 	mov	arg01, #0
11fd0     00 16 06 F6 | 	mov	arg03, #0
11fd4     7C 68 B1 FD | 	call	#__system___basic_print_string
11fd8     00 12 06 F6 | 	mov	arg01, #0
11fdc     0A 14 06 F6 | 	mov	arg02, #10
11fe0     00 16 06 F6 | 	mov	arg03, #0
11fe4     14 68 B1 FD | 	call	#__system___basic_print_char
11fe8     00 12 06 F6 | 	mov	arg01, #0
11fec     1C B8 B1 FD | 	call	#__system___getiolock_0620
11ff0     FD 00 68 FC | 	wrlong	#0, result1
11ff4                 | LR__1453
11ff4                 | ' print
11ff4     00 12 06 F6 | 	mov	arg01, #0
11ff8     10 B8 B1 FD | 	call	#__system___getiolock_0620
11ffc     FD 12 02 F6 | 	mov	arg01, result1
12000     58 5B B1 FD | 	call	#__system___lockmem
12004     00 12 06 F6 | 	mov	arg01, #0
12008     0A 14 06 F6 | 	mov	arg02, #10
1200c     00 16 06 F6 | 	mov	arg03, #0
12010     E8 67 B1 FD | 	call	#__system___basic_print_char
12014     00 12 06 F6 | 	mov	arg01, #0
12018     F0 B7 B1 FD | 	call	#__system___getiolock_0620
1201c     FD 00 68 FC | 	wrlong	#0, result1
12020     A7 F0 03 F6 | 	mov	ptra, fp
12024     B2 00 A0 FD | 	call	#popregs_
12028                 | _do_dir_ret
12028     2D 00 64 FD | 	ret
1202c                 | 
1202c                 | ' 
1202c                 | ' '-------------------- dpeek
1202c                 | ' 
1202c                 | ' sub do_dpeek
1202c                 | _do_dpeek
1202c     00 4A 05 F6 | 	mov	COUNT_, #0
12030     A8 00 A0 FD | 	call	#pushregs_
12034     14 F0 07 F1 | 	add	ptra, #20
12038     E4 B7 BF FD | 	call	#_pop
1203c     A7 FA 61 FC | 	wrlong	result1, fp
12040     04 4E 05 F1 | 	add	fp, #4
12044     A7 FC 61 FC | 	wrlong	result2, fp
12048     04 4E 05 F1 | 	add	fp, #4
1204c     A7 FE 61 FC | 	wrlong	result3, fp
12050     08 4E 85 F1 | 	sub	fp, #8
12054     A7 12 02 F6 | 	mov	arg01, fp
12058     A8 B9 BF FD | 	call	#_converttoint
1205c     0C 4E 05 F1 | 	add	fp, #12
12060     A7 FA 61 FC | 	wrlong	result1, fp
12064                 | ' 
12064                 | ' t1=pop()
12064                 | ' a=converttoint(t1)
12064                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
12064     0C 4E 85 F1 | 	sub	fp, #12
12068     00 04 00 FF 
1206c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
12070     1C 00 90 3D |  if_ae	jmp	#LR__1460
12074     0C 4E 05 F1 | 	add	fp, #12
12078     A7 12 02 FB | 	rdlong	arg01, fp
1207c     09 FB E1 FA | 	rdword	result1, arg01
12080     04 4E 05 F1 | 	add	fp, #4
12084     A7 FA 61 FC | 	wrlong	result1, fp
12088     10 4E 85 F1 | 	sub	fp, #16
1208c     1C 00 90 FD | 	jmp	#LR__1461
12090                 | LR__1460
12090     0C 4E 05 F1 | 	add	fp, #12
12094     A7 12 02 FB | 	rdlong	arg01, fp
12098     0C 4E 85 F1 | 	sub	fp, #12
1209c     84 23 B1 FD | 	call	#_psdpeek
120a0     10 4E 05 F1 | 	add	fp, #16
120a4     A7 FA 61 FC | 	wrlong	result1, fp
120a8     10 4E 85 F1 | 	sub	fp, #16
120ac                 | LR__1461
120ac     08 4E 05 F1 | 	add	fp, #8
120b0     A7 3A 68 FC | 	wrlong	#29, fp
120b4     08 4E 05 F1 | 	add	fp, #8
120b8     A7 12 02 FB | 	rdlong	arg01, fp
120bc     10 4E 85 F1 | 	sub	fp, #16
120c0     A7 12 62 FC | 	wrlong	arg01, fp
120c4     A7 12 02 F6 | 	mov	arg01, fp
120c8     EC B7 BF FD | 	call	#_push
120cc     A7 F0 03 F6 | 	mov	ptra, fp
120d0     B2 00 A0 FD | 	call	#popregs_
120d4                 | _do_dpeek_ret
120d4     2D 00 64 FD | 	ret
120d8                 | 
120d8                 | ' 
120d8                 | ' '-------------------- dpoke
120d8                 | ' 
120d8                 | ' sub do_dpoke
120d8                 | _do_dpoke
120d8     01 4A 05 F6 | 	mov	COUNT_, #1
120dc     A8 00 A0 FD | 	call	#pushregs_
120e0     20 F0 07 F1 | 	add	ptra, #32
120e4     38 B7 BF FD | 	call	#_pop
120e8     FD 14 02 F6 | 	mov	arg02, result1
120ec     FE 12 02 F6 | 	mov	arg01, result2
120f0     FF 26 02 F6 | 	mov	local01, result3
120f4     A7 14 62 FC | 	wrlong	arg02, fp
120f8     04 4E 05 F1 | 	add	fp, #4
120fc     A7 12 62 FC | 	wrlong	arg01, fp
12100     04 4E 05 F1 | 	add	fp, #4
12104     A7 26 62 FC | 	wrlong	local01, fp
12108     08 4E 85 F1 | 	sub	fp, #8
1210c     10 B7 BF FD | 	call	#_pop
12110     FF 26 02 F6 | 	mov	local01, result3
12114     0C 4E 05 F1 | 	add	fp, #12
12118     A7 FA 61 FC | 	wrlong	result1, fp
1211c     04 4E 05 F1 | 	add	fp, #4
12120     A7 FC 61 FC | 	wrlong	result2, fp
12124     04 4E 05 F1 | 	add	fp, #4
12128     A7 26 62 FC | 	wrlong	local01, fp
1212c     08 4E 85 F1 | 	sub	fp, #8
12130     A7 12 02 F6 | 	mov	arg01, fp
12134     0C 4E 85 F1 | 	sub	fp, #12
12138     C8 B8 BF FD | 	call	#_converttoint
1213c     18 4E 05 F1 | 	add	fp, #24
12140     A7 FA 61 FC | 	wrlong	result1, fp
12144     18 4E 85 F1 | 	sub	fp, #24
12148     A7 12 02 F6 | 	mov	arg01, fp
1214c     B4 B8 BF FD | 	call	#_converttoint
12150     1C 4E 05 F1 | 	add	fp, #28
12154     A7 FA 61 FC | 	wrlong	result1, fp
12158                 | ' 
12158                 | ' t1=pop() 'value
12158                 | ' t2=pop() 
12158                 | ' a=converttoint(t2) : v=converttoint(t1)
12158                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
12158     04 4E 85 F1 | 	sub	fp, #4
1215c     A7 26 02 FB | 	rdlong	local01, fp
12160     18 4E 85 F1 | 	sub	fp, #24
12164     00 04 00 FF 
12168     00 26 16 F2 | 	cmp	local01, ##524288 wc
1216c     1C 00 90 3D |  if_ae	jmp	#LR__1470
12170     18 4E 05 F1 | 	add	fp, #24
12174     A7 12 02 FB | 	rdlong	arg01, fp
12178     04 4E 05 F1 | 	add	fp, #4
1217c     A7 14 02 FB | 	rdlong	arg02, fp
12180     1C 4E 85 F1 | 	sub	fp, #28
12184     09 15 52 FC | 	wrword	arg02, arg01
12188     18 00 90 FD | 	jmp	#LR__1471
1218c                 | LR__1470
1218c     18 4E 05 F1 | 	add	fp, #24
12190     A7 12 02 FB | 	rdlong	arg01, fp
12194     04 4E 05 F1 | 	add	fp, #4
12198     A7 14 02 FB | 	rdlong	arg02, fp
1219c     1C 4E 85 F1 | 	sub	fp, #28
121a0     40 21 B1 FD | 	call	#_psdpoke
121a4                 | LR__1471
121a4     A7 F0 03 F6 | 	mov	ptra, fp
121a8     B2 00 A0 FD | 	call	#popregs_
121ac                 | _do_dpoke_ret
121ac     2D 00 64 FD | 	ret
121b0                 | 
121b0                 | ' '-------------------- draw
121b0                 | ' 
121b0                 | ' sub do_draw
121b0                 | _do_draw
121b0     00 4A 05 F6 | 	mov	COUNT_, #0
121b4     A8 00 A0 FD | 	call	#pushregs_
121b8     20 F0 07 F1 | 	add	ptra, #32
121bc     60 B6 BF FD | 	call	#_pop
121c0     FD 1A 02 F6 | 	mov	arg05, result1
121c4     FE 18 02 F6 | 	mov	arg04, result2
121c8     FF 16 02 F6 | 	mov	arg03, result3
121cc     0C 4E 05 F1 | 	add	fp, #12
121d0     A7 1A 62 FC | 	wrlong	arg05, fp
121d4     04 4E 05 F1 | 	add	fp, #4
121d8     A7 18 62 FC | 	wrlong	arg04, fp
121dc     04 4E 05 F1 | 	add	fp, #4
121e0     A7 16 62 FC | 	wrlong	arg03, fp
121e4     14 4E 85 F1 | 	sub	fp, #20
121e8     34 B6 BF FD | 	call	#_pop
121ec     FF 1A 02 F6 | 	mov	arg05, result3
121f0     A7 FA 61 FC | 	wrlong	result1, fp
121f4     04 4E 05 F1 | 	add	fp, #4
121f8     A7 FC 61 FC | 	wrlong	result2, fp
121fc     04 4E 05 F1 | 	add	fp, #4
12200     A7 1A 62 FC | 	wrlong	arg05, fp
12204     08 4E 85 F1 | 	sub	fp, #8
12208     A7 12 02 F6 | 	mov	arg01, fp
1220c     F4 B7 BF FD | 	call	#_converttoint
12210     18 4E 05 F1 | 	add	fp, #24
12214     A7 FA 61 FC | 	wrlong	result1, fp
12218     0C 4E 85 F1 | 	sub	fp, #12
1221c     A7 12 02 F6 | 	mov	arg01, fp
12220     0C 4E 85 F1 | 	sub	fp, #12
12224     DC B7 BF FD | 	call	#_converttoint
12228     1C 4E 05 F1 | 	add	fp, #28
1222c     A7 FA 61 FC | 	wrlong	result1, fp
12230     37 00 00 FF 
12234     2C E4 05 F1 | 	add	objptr, ##28204
12238     F2 12 02 FB | 	rdlong	arg01, objptr
1223c     04 E4 05 F1 | 	add	objptr, #4
12240     F2 14 02 FB | 	rdlong	arg02, objptr
12244     04 4E 85 F1 | 	sub	fp, #4
12248     A7 16 02 FB | 	rdlong	arg03, fp
1224c     FD 18 02 F6 | 	mov	arg04, result1
12250     18 4E 85 F1 | 	sub	fp, #24
12254     08 E4 85 F1 | 	sub	objptr, #8
12258     F2 1A 02 FB | 	rdlong	arg05, objptr
1225c     37 00 00 FF 
12260     28 E4 85 F1 | 	sub	objptr, ##28200
12264     00 32 B1 FD | 	call	#_hg010b_spin2_draw
12268     18 4E 05 F1 | 	add	fp, #24
1226c     A7 1A 02 FB | 	rdlong	arg05, fp
12270     37 00 00 FF 
12274     2C E4 05 F1 | 	add	objptr, ##28204
12278     F2 1A 62 FC | 	wrlong	arg05, objptr
1227c     04 4E 05 F1 | 	add	fp, #4
12280     A7 1A 02 FB | 	rdlong	arg05, fp
12284     1C 4E 85 F1 | 	sub	fp, #28
12288     04 E4 05 F1 | 	add	objptr, #4
1228c     F2 1A 62 FC | 	wrlong	arg05, objptr
12290     37 00 00 FF 
12294     30 E4 85 F1 | 	sub	objptr, ##28208
12298     A7 F0 03 F6 | 	mov	ptra, fp
1229c     B2 00 A0 FD | 	call	#popregs_
122a0                 | _do_draw_ret
122a0     2D 00 64 FD | 	ret
122a4                 | 
122a4                 | ' 
122a4                 | ' '-------------------- else
122a4                 | ' 
122a4                 | ' sub do_else
122a4                 | _do_else
122a4     4A 00 00 FF 
122a8     7C E4 05 F1 | 	add	objptr, ##38012
122ac     F2 00 02 FB | 	rdlong	_var01, objptr
122b0     01 00 86 F1 | 	sub	_var01, #1
122b4     04 E4 05 F1 | 	add	objptr, #4
122b8     F2 00 62 FC | 	wrlong	_var01, objptr
122bc     4A 00 00 FF 
122c0     80 E4 85 F1 | 	sub	objptr, ##38016
122c4                 | _do_else_ret
122c4     2D 00 64 FD | 	ret
122c8                 | 
122c8                 | ' 
122c8                 | ' '-------------------- end
122c8                 | ' 
122c8                 | ' sub do_end
122c8                 | _do_end
122c8     4A 00 00 FF 
122cc     7C E4 05 F1 | 	add	objptr, ##38012
122d0     F2 00 02 FB | 	rdlong	_var01, objptr
122d4     01 00 86 F1 | 	sub	_var01, #1
122d8     04 E4 05 F1 | 	add	objptr, #4
122dc     F2 00 62 FC | 	wrlong	_var01, objptr
122e0     06 00 00 FF 
122e4     38 E4 05 F1 | 	add	objptr, ##3128
122e8     FF FF BF FF 
122ec     F2 FE 6B FC | 	wrlong	##2147483647, objptr
122f0     50 00 00 FF 
122f4     B8 E4 85 F1 | 	sub	objptr, ##41144
122f8                 | _do_end_ret
122f8     2D 00 64 FD | 	ret
122fc                 | 
122fc                 | ' 
122fc                 | ' '-------------------- enter
122fc                 | ' 
122fc                 | ' sub do_enter
122fc                 | _do_enter
122fc     02 00 00 FF 
12300     D2 12 06 F6 | 	mov	arg01, ##1234
12304     00 34 B0 FD | 	call	#_do_load
12308                 | _do_enter_ret
12308     2D 00 64 FD | 	ret
1230c                 | 
1230c                 | ' 
1230c                 | ' '------------------- error processing
1230c                 | ' 
1230c                 | ' sub do_error
1230c                 | _do_error
1230c     01 4A 05 F6 | 	mov	COUNT_, #1
12310     A8 00 A0 FD | 	call	#pushregs_
12314     4A 00 00 FF 
12318     80 E4 05 F1 | 	add	objptr, ##38016
1231c     F2 18 02 FB | 	rdlong	arg04, objptr
12320     0C 17 02 F6 | 	mov	arg03, arg04
12324     01 16 66 F0 | 	shl	arg03, #1
12328     0C 17 02 F1 | 	add	arg03, arg04
1232c     02 16 66 F0 | 	shl	arg03, #2
12330     03 00 00 FF 
12334     04 E4 85 F1 | 	sub	objptr, ##1540
12338     F2 16 02 F1 | 	add	arg03, objptr
1233c     0B 27 02 FB | 	rdlong	local01, arg03
12340                 | ' r=compiledline(lineptr_e).result.uresult
12340                 | ' print "Error ";r;": ";errors$(r)
12340     00 12 06 F6 | 	mov	arg01, #0
12344     47 00 00 FF 
12348     7C E4 85 F1 | 	sub	objptr, ##36476
1234c     BC B4 B1 FD | 	call	#__system___getiolock_0620
12350     FD 12 02 F6 | 	mov	arg01, result1
12354     04 58 B1 FD | 	call	#__system___lockmem
12358     C0 01 00 FF 
1235c     A5 14 06 F6 | 	mov	arg02, ##@LR__6052
12360     00 12 06 F6 | 	mov	arg01, #0
12364     00 16 06 F6 | 	mov	arg03, #0
12368     E8 64 B1 FD | 	call	#__system___basic_print_string
1236c     00 12 06 F6 | 	mov	arg01, #0
12370     13 15 02 F6 | 	mov	arg02, local01
12374     00 16 06 F6 | 	mov	arg03, #0
12378     0A 18 06 F6 | 	mov	arg04, #10
1237c     58 65 B1 FD | 	call	#__system___basic_print_unsigned
12380     C0 01 00 FF 
12384     AC 14 06 F6 | 	mov	arg02, ##@LR__6053
12388     00 12 06 F6 | 	mov	arg01, #0
1238c     00 16 06 F6 | 	mov	arg03, #0
12390     C0 64 B1 FD | 	call	#__system___basic_print_string
12394     02 26 66 F0 | 	shl	local01, #2
12398     45 00 00 FF 
1239c     7C E4 05 F1 | 	add	objptr, ##35452
123a0     F2 26 02 F1 | 	add	local01, objptr
123a4     13 15 02 FB | 	rdlong	arg02, local01
123a8     00 12 06 F6 | 	mov	arg01, #0
123ac     00 16 06 F6 | 	mov	arg03, #0
123b0     45 00 00 FF 
123b4     7C E4 85 F1 | 	sub	objptr, ##35452
123b8     98 64 B1 FD | 	call	#__system___basic_print_string
123bc     00 12 06 F6 | 	mov	arg01, #0
123c0     0A 14 06 F6 | 	mov	arg02, #10
123c4     00 16 06 F6 | 	mov	arg03, #0
123c8     30 64 B1 FD | 	call	#__system___basic_print_char
123cc     00 12 06 F6 | 	mov	arg01, #0
123d0     38 B4 B1 FD | 	call	#__system___getiolock_0620
123d4     FD 00 68 FC | 	wrlong	#0, result1
123d8     A7 F0 03 F6 | 	mov	ptra, fp
123dc     B2 00 A0 FD | 	call	#popregs_
123e0                 | _do_error_ret
123e0     2D 00 64 FD | 	ret
123e4                 | 
123e4                 | ' 
123e4                 | ' '-------------------- fcircle
123e4                 | ' 
123e4                 | ' sub do_fcircle
123e4                 | _do_fcircle
123e4     02 4A 05 F6 | 	mov	COUNT_, #2
123e8     A8 00 A0 FD | 	call	#pushregs_
123ec     24 F0 07 F1 | 	add	ptra, #36
123f0     2C B4 BF FD | 	call	#_pop
123f4     FD 14 02 F6 | 	mov	arg02, result1
123f8     FE 18 02 F6 | 	mov	arg04, result2
123fc     FF 16 02 F6 | 	mov	arg03, result3
12400     18 4E 05 F1 | 	add	fp, #24
12404     A7 14 62 FC | 	wrlong	arg02, fp
12408     04 4E 05 F1 | 	add	fp, #4
1240c     A7 18 62 FC | 	wrlong	arg04, fp
12410     04 4E 05 F1 | 	add	fp, #4
12414     A7 16 62 FC | 	wrlong	arg03, fp
12418     20 4E 85 F1 | 	sub	fp, #32
1241c     00 B4 BF FD | 	call	#_pop
12420     FD 14 02 F6 | 	mov	arg02, result1
12424     FE 18 02 F6 | 	mov	arg04, result2
12428     FF 16 02 F6 | 	mov	arg03, result3
1242c     0C 4E 05 F1 | 	add	fp, #12
12430     A7 14 62 FC | 	wrlong	arg02, fp
12434     04 4E 05 F1 | 	add	fp, #4
12438     A7 18 62 FC | 	wrlong	arg04, fp
1243c     04 4E 05 F1 | 	add	fp, #4
12440     A7 16 62 FC | 	wrlong	arg03, fp
12444     14 4E 85 F1 | 	sub	fp, #20
12448     D4 B3 BF FD | 	call	#_pop
1244c     FF 14 02 F6 | 	mov	arg02, result3
12450     A7 FA 61 FC | 	wrlong	result1, fp
12454     04 4E 05 F1 | 	add	fp, #4
12458     A7 FC 61 FC | 	wrlong	result2, fp
1245c     04 4E 05 F1 | 	add	fp, #4
12460     A7 14 62 FC | 	wrlong	arg02, fp
12464     08 4E 85 F1 | 	sub	fp, #8
12468     A7 12 02 F6 | 	mov	arg01, fp
1246c     94 B5 BF FD | 	call	#_converttoint
12470     FD 26 02 F6 | 	mov	local01, result1
12474     0C 4E 05 F1 | 	add	fp, #12
12478     A7 12 02 F6 | 	mov	arg01, fp
1247c     0C 4E 85 F1 | 	sub	fp, #12
12480     80 B5 BF FD | 	call	#_converttoint
12484     FD 28 02 F6 | 	mov	local02, result1
12488     18 4E 05 F1 | 	add	fp, #24
1248c     A7 12 02 F6 | 	mov	arg01, fp
12490     18 4E 85 F1 | 	sub	fp, #24
12494     6C B5 BF FD | 	call	#_converttoint
12498     FD 16 02 F6 | 	mov	arg03, result1
1249c     37 00 00 FF 
124a0     28 E4 05 F1 | 	add	objptr, ##28200
124a4     F2 18 02 FB | 	rdlong	arg04, objptr
124a8     37 00 00 FF 
124ac     28 E4 85 F1 | 	sub	objptr, ##28200
124b0     13 13 02 F6 | 	mov	arg01, local01
124b4     14 15 02 F6 | 	mov	arg02, local02
124b8     30 34 B1 FD | 	call	#_hg010b_spin2_fcircle
124bc     A7 F0 03 F6 | 	mov	ptra, fp
124c0     B2 00 A0 FD | 	call	#popregs_
124c4                 | _do_fcircle_ret
124c4     2D 00 64 FD | 	ret
124c8                 | 
124c8                 | ' 
124c8                 | ' '-------------------- fill
124c8                 | ' 
124c8                 | ' sub do_fill
124c8                 | _do_fill
124c8     03 4A 05 F6 | 	mov	COUNT_, #3
124cc     A8 00 A0 FD | 	call	#pushregs_
124d0     30 F0 07 F1 | 	add	ptra, #48
124d4     48 B3 BF FD | 	call	#_pop
124d8     FD 16 02 F6 | 	mov	arg03, result1
124dc     FE 14 02 F6 | 	mov	arg02, result2
124e0     FF 18 02 F6 | 	mov	arg04, result3
124e4     24 4E 05 F1 | 	add	fp, #36
124e8     A7 16 62 FC | 	wrlong	arg03, fp
124ec     04 4E 05 F1 | 	add	fp, #4
124f0     A7 14 62 FC | 	wrlong	arg02, fp
124f4     04 4E 05 F1 | 	add	fp, #4
124f8     A7 18 62 FC | 	wrlong	arg04, fp
124fc     2C 4E 85 F1 | 	sub	fp, #44
12500     1C B3 BF FD | 	call	#_pop
12504     FD 16 02 F6 | 	mov	arg03, result1
12508     FE 14 02 F6 | 	mov	arg02, result2
1250c     FF 18 02 F6 | 	mov	arg04, result3
12510     18 4E 05 F1 | 	add	fp, #24
12514     A7 16 62 FC | 	wrlong	arg03, fp
12518     04 4E 05 F1 | 	add	fp, #4
1251c     A7 14 62 FC | 	wrlong	arg02, fp
12520     04 4E 05 F1 | 	add	fp, #4
12524     A7 18 62 FC | 	wrlong	arg04, fp
12528     20 4E 85 F1 | 	sub	fp, #32
1252c     F0 B2 BF FD | 	call	#_pop
12530     FD 16 02 F6 | 	mov	arg03, result1
12534     FE 14 02 F6 | 	mov	arg02, result2
12538     FF 18 02 F6 | 	mov	arg04, result3
1253c     0C 4E 05 F1 | 	add	fp, #12
12540     A7 16 62 FC | 	wrlong	arg03, fp
12544     04 4E 05 F1 | 	add	fp, #4
12548     A7 14 62 FC | 	wrlong	arg02, fp
1254c     04 4E 05 F1 | 	add	fp, #4
12550     A7 18 62 FC | 	wrlong	arg04, fp
12554     14 4E 85 F1 | 	sub	fp, #20
12558     C4 B2 BF FD | 	call	#_pop
1255c     FF 16 02 F6 | 	mov	arg03, result3
12560     A7 FA 61 FC | 	wrlong	result1, fp
12564     04 4E 05 F1 | 	add	fp, #4
12568     A7 FC 61 FC | 	wrlong	result2, fp
1256c     04 4E 05 F1 | 	add	fp, #4
12570     A7 16 62 FC | 	wrlong	arg03, fp
12574     08 4E 85 F1 | 	sub	fp, #8
12578     A7 12 02 F6 | 	mov	arg01, fp
1257c     84 B4 BF FD | 	call	#_converttoint
12580     FD 26 02 F6 | 	mov	local01, result1
12584     0C 4E 05 F1 | 	add	fp, #12
12588     A7 12 02 F6 | 	mov	arg01, fp
1258c     0C 4E 85 F1 | 	sub	fp, #12
12590     70 B4 BF FD | 	call	#_converttoint
12594     FD 28 02 F6 | 	mov	local02, result1
12598     18 4E 05 F1 | 	add	fp, #24
1259c     A7 12 02 F6 | 	mov	arg01, fp
125a0     18 4E 85 F1 | 	sub	fp, #24
125a4     5C B4 BF FD | 	call	#_converttoint
125a8     FD 2A 02 F6 | 	mov	local03, result1
125ac     24 4E 05 F1 | 	add	fp, #36
125b0     A7 12 02 F6 | 	mov	arg01, fp
125b4     24 4E 85 F1 | 	sub	fp, #36
125b8     48 B4 BF FD | 	call	#_converttoint
125bc     FD 18 02 F6 | 	mov	arg04, result1
125c0     13 13 02 F6 | 	mov	arg01, local01
125c4     14 15 02 F6 | 	mov	arg02, local02
125c8     15 17 02 F6 | 	mov	arg03, local03
125cc     88 30 B1 FD | 	call	#_hg010b_spin2_fill
125d0     A7 F0 03 F6 | 	mov	ptra, fp
125d4     B2 00 A0 FD | 	call	#popregs_
125d8                 | _do_fill_ret
125d8     2D 00 64 FD | 	ret
125dc                 | 
125dc                 | ' 
125dc                 | ' '-------------------- findfirst
125dc                 | ' 
125dc                 | ' sub do_findfirst
125dc                 | _do_findfirst
125dc     00 4A 05 F6 | 	mov	COUNT_, #0
125e0     A8 00 A0 FD | 	call	#pushregs_
125e4     1C F0 07 F1 | 	add	ptra, #28
125e8     4A 00 00 FF 
125ec     80 E4 05 F1 | 	add	objptr, ##38016
125f0     F2 16 02 FB | 	rdlong	arg03, objptr
125f4     0B 15 02 F6 | 	mov	arg02, arg03
125f8     01 14 66 F0 | 	shl	arg02, #1
125fc     0B 15 02 F1 | 	add	arg02, arg03
12600     02 14 66 F0 | 	shl	arg02, #2
12604     03 00 00 FF 
12608     04 E4 85 F1 | 	sub	objptr, ##1540
1260c     F2 14 02 F1 | 	add	arg02, objptr
12610     0A 17 02 FB | 	rdlong	arg03, arg02
12614     A7 16 62 FC | 	wrlong	arg03, fp
12618                 | ' 
12618                 | ' numpar=compiledline(lineptr_e).result.uresult
12618                 | ' if numpar=2 then
12618     02 16 0E F2 | 	cmp	arg03, #2 wz
1261c     47 00 00 FF 
12620     7C E4 85 F1 | 	sub	objptr, ##36476
12624     70 01 90 5D |  if_ne	jmp	#LR__1486
12628     F4 B1 BF FD | 	call	#_pop
1262c     FF 16 02 F6 | 	mov	arg03, result3
12630     08 4E 05 F1 | 	add	fp, #8
12634     A7 FA 61 FC | 	wrlong	result1, fp
12638     04 4E 05 F1 | 	add	fp, #4
1263c     A7 FC 61 FC | 	wrlong	result2, fp
12640     04 4E 05 F1 | 	add	fp, #4
12644     A7 16 62 FC | 	wrlong	arg03, fp
12648                 | '   t1=pop()
12648                 | '   if t1.result_type=result_string2 then 
12648     10 4E 85 F1 | 	sub	fp, #16
1264c     2B 16 0E F2 | 	cmp	arg03, #43 wz
12650     20 00 90 5D |  if_ne	jmp	#LR__1480
12654     08 4E 05 F1 | 	add	fp, #8
12658     A7 12 02 FB | 	rdlong	arg01, fp
1265c     08 4E 85 F1 | 	sub	fp, #8
12660     34 B3 BF FD | 	call	#_convertstring
12664     18 4E 05 F1 | 	add	fp, #24
12668     A7 FA 61 FC | 	wrlong	result1, fp
1266c     18 4E 85 F1 | 	sub	fp, #24
12670     6C 00 90 FD | 	jmp	#LR__1483
12674                 | LR__1480
12674     10 4E 05 F1 | 	add	fp, #16
12678     A7 16 02 FB | 	rdlong	arg03, fp
1267c     10 4E 85 F1 | 	sub	fp, #16
12680     1F 16 0E F2 | 	cmp	arg03, #31 wz
12684     18 00 90 5D |  if_ne	jmp	#LR__1481
12688     08 4E 05 F1 | 	add	fp, #8
1268c     A7 16 02 FB | 	rdlong	arg03, fp
12690     10 4E 05 F1 | 	add	fp, #16
12694     A7 16 62 FC | 	wrlong	arg03, fp
12698     18 4E 85 F1 | 	sub	fp, #24
1269c     40 00 90 FD | 	jmp	#LR__1482
126a0                 | LR__1481
126a0                 | '     print "findfirst: "; : printerror(30) : return  
126a0     00 12 06 F6 | 	mov	arg01, #0
126a4     64 B1 B1 FD | 	call	#__system___getiolock_0620
126a8     FD 12 02 F6 | 	mov	arg01, result1
126ac     AC 54 B1 FD | 	call	#__system___lockmem
126b0     C0 01 00 FF 
126b4     AF 14 06 F6 | 	mov	arg02, ##@LR__6054
126b8     00 12 06 F6 | 	mov	arg01, #0
126bc     00 16 06 F6 | 	mov	arg03, #0
126c0     90 61 B1 FD | 	call	#__system___basic_print_string
126c4     00 12 06 F6 | 	mov	arg01, #0
126c8     40 B1 B1 FD | 	call	#__system___getiolock_0620
126cc     FD 00 68 FC | 	wrlong	#0, result1
126d0     1E 12 06 F6 | 	mov	arg01, #30
126d4     00 14 06 F6 | 	mov	arg02, #0
126d8     20 1A B1 FD | 	call	#_printerror
126dc     7C 02 90 FD | 	jmp	#LR__1495
126e0                 | LR__1482
126e0                 | LR__1483
126e0     3C B1 BF FD | 	call	#_pop
126e4     FF 16 02 F6 | 	mov	arg03, result3
126e8     08 4E 05 F1 | 	add	fp, #8
126ec     A7 FA 61 FC | 	wrlong	result1, fp
126f0     04 4E 05 F1 | 	add	fp, #4
126f4     A7 FC 61 FC | 	wrlong	result2, fp
126f8     04 4E 05 F1 | 	add	fp, #4
126fc     A7 16 62 FC | 	wrlong	arg03, fp
12700                 | '   t1=pop()
12700                 | '   if t1.result_type=result_string2 then 
12700     10 4E 85 F1 | 	sub	fp, #16
12704     2B 16 0E F2 | 	cmp	arg03, #43 wz
12708     20 00 90 5D |  if_ne	jmp	#LR__1484
1270c     08 4E 05 F1 | 	add	fp, #8
12710     A7 12 02 FB | 	rdlong	arg01, fp
12714     08 4E 85 F1 | 	sub	fp, #8
12718     7C B2 BF FD | 	call	#_convertstring
1271c     14 4E 05 F1 | 	add	fp, #20
12720     A7 FA 61 FC | 	wrlong	result1, fp
12724     14 4E 85 F1 | 	sub	fp, #20
12728     88 01 90 FD | 	jmp	#LR__1493
1272c                 | LR__1484
1272c     10 4E 05 F1 | 	add	fp, #16
12730     A7 16 02 FB | 	rdlong	arg03, fp
12734     10 4E 85 F1 | 	sub	fp, #16
12738     1F 16 0E F2 | 	cmp	arg03, #31 wz
1273c     18 00 90 5D |  if_ne	jmp	#LR__1485
12740     08 4E 05 F1 | 	add	fp, #8
12744     A7 16 02 FB | 	rdlong	arg03, fp
12748     0C 4E 05 F1 | 	add	fp, #12
1274c     A7 16 62 FC | 	wrlong	arg03, fp
12750     14 4E 85 F1 | 	sub	fp, #20
12754     5C 01 90 FD | 	jmp	#LR__1493
12758                 | LR__1485
12758                 | '     print "findfirst: "; : printerror(30) : return  
12758     00 12 06 F6 | 	mov	arg01, #0
1275c     AC B0 B1 FD | 	call	#__system___getiolock_0620
12760     FD 12 02 F6 | 	mov	arg01, result1
12764     F4 53 B1 FD | 	call	#__system___lockmem
12768     C0 01 00 FF 
1276c     BB 14 06 F6 | 	mov	arg02, ##@LR__6055
12770     00 12 06 F6 | 	mov	arg01, #0
12774     00 16 06 F6 | 	mov	arg03, #0
12778     D8 60 B1 FD | 	call	#__system___basic_print_string
1277c     00 12 06 F6 | 	mov	arg01, #0
12780     88 B0 B1 FD | 	call	#__system___getiolock_0620
12784     FD 00 68 FC | 	wrlong	#0, result1
12788     1E 12 06 F6 | 	mov	arg01, #30
1278c     00 14 06 F6 | 	mov	arg02, #0
12790     68 19 B1 FD | 	call	#_printerror
12794     C4 01 90 FD | 	jmp	#LR__1495
12798                 | LR__1486
12798     A7 16 02 FB | 	rdlong	arg03, fp
1279c     01 16 0E F2 | 	cmp	arg03, #1 wz
127a0     D0 00 90 5D |  if_ne	jmp	#LR__1491
127a4     78 B0 BF FD | 	call	#_pop
127a8     FF 16 02 F6 | 	mov	arg03, result3
127ac     08 4E 05 F1 | 	add	fp, #8
127b0     A7 FA 61 FC | 	wrlong	result1, fp
127b4     04 4E 05 F1 | 	add	fp, #4
127b8     A7 FC 61 FC | 	wrlong	result2, fp
127bc     04 4E 05 F1 | 	add	fp, #4
127c0     A7 16 62 FC | 	wrlong	arg03, fp
127c4                 | '   t1=pop()
127c4                 | '   if t1.result_type=result_string2 then 
127c4     10 4E 85 F1 | 	sub	fp, #16
127c8     2B 16 0E F2 | 	cmp	arg03, #43 wz
127cc     20 00 90 5D |  if_ne	jmp	#LR__1487
127d0     08 4E 05 F1 | 	add	fp, #8
127d4     A7 12 02 FB | 	rdlong	arg01, fp
127d8     08 4E 85 F1 | 	sub	fp, #8
127dc     B8 B1 BF FD | 	call	#_convertstring
127e0     14 4E 05 F1 | 	add	fp, #20
127e4     A7 FA 61 FC | 	wrlong	result1, fp
127e8     14 4E 85 F1 | 	sub	fp, #20
127ec     6C 00 90 FD | 	jmp	#LR__1490
127f0                 | LR__1487
127f0     10 4E 05 F1 | 	add	fp, #16
127f4     A7 16 02 FB | 	rdlong	arg03, fp
127f8     10 4E 85 F1 | 	sub	fp, #16
127fc     1F 16 0E F2 | 	cmp	arg03, #31 wz
12800     18 00 90 5D |  if_ne	jmp	#LR__1488
12804     08 4E 05 F1 | 	add	fp, #8
12808     A7 16 02 FB | 	rdlong	arg03, fp
1280c     0C 4E 05 F1 | 	add	fp, #12
12810     A7 16 62 FC | 	wrlong	arg03, fp
12814     14 4E 85 F1 | 	sub	fp, #20
12818     40 00 90 FD | 	jmp	#LR__1489
1281c                 | LR__1488
1281c                 | '     print "findfirst: "; : printerror(30) : return  
1281c     00 12 06 F6 | 	mov	arg01, #0
12820     E8 AF B1 FD | 	call	#__system___getiolock_0620
12824     FD 12 02 F6 | 	mov	arg01, result1
12828     30 53 B1 FD | 	call	#__system___lockmem
1282c     C0 01 00 FF 
12830     C7 14 06 F6 | 	mov	arg02, ##@LR__6056
12834     00 12 06 F6 | 	mov	arg01, #0
12838     00 16 06 F6 | 	mov	arg03, #0
1283c     14 60 B1 FD | 	call	#__system___basic_print_string
12840     00 12 06 F6 | 	mov	arg01, #0
12844     C4 AF B1 FD | 	call	#__system___getiolock_0620
12848     FD 00 68 FC | 	wrlong	#0, result1
1284c     1E 12 06 F6 | 	mov	arg01, #30
12850     00 14 06 F6 | 	mov	arg02, #0
12854     A4 18 B1 FD | 	call	#_printerror
12858     00 01 90 FD | 	jmp	#LR__1495
1285c                 | LR__1489
1285c                 | LR__1490
1285c     C0 01 00 FF 
12860     D3 16 06 F6 | 	mov	arg03, ##@LR__6057
12864     18 4E 05 F1 | 	add	fp, #24
12868     A7 16 62 FC | 	wrlong	arg03, fp
1286c     18 4E 85 F1 | 	sub	fp, #24
12870     40 00 90 FD | 	jmp	#LR__1492
12874                 | LR__1491
12874                 | '   print "findfirst: "; : printerror(39) : return     
12874     00 12 06 F6 | 	mov	arg01, #0
12878     90 AF B1 FD | 	call	#__system___getiolock_0620
1287c     FD 12 02 F6 | 	mov	arg01, result1
12880     D8 52 B1 FD | 	call	#__system___lockmem
12884     C0 01 00 FF 
12888     D4 14 06 F6 | 	mov	arg02, ##@LR__6058
1288c     00 12 06 F6 | 	mov	arg01, #0
12890     00 16 06 F6 | 	mov	arg03, #0
12894     BC 5F B1 FD | 	call	#__system___basic_print_string
12898     00 12 06 F6 | 	mov	arg01, #0
1289c     6C AF B1 FD | 	call	#__system___getiolock_0620
128a0     FD 00 68 FC | 	wrlong	#0, result1
128a4     27 12 06 F6 | 	mov	arg01, #39
128a8     00 14 06 F6 | 	mov	arg02, #0
128ac     4C 18 B1 FD | 	call	#_printerror
128b0     A8 00 90 FD | 	jmp	#LR__1495
128b4                 | LR__1492
128b4                 | LR__1493
128b4                 | ' 
128b4                 | ' if s2="" then
128b4     18 4E 05 F1 | 	add	fp, #24
128b8     A7 12 02 FB | 	rdlong	arg01, fp
128bc     18 4E 85 F1 | 	sub	fp, #24
128c0     C0 01 00 FF 
128c4     E0 14 06 F6 | 	mov	arg02, ##@LR__6059
128c8     B8 52 B1 FD | 	call	#__system___string_cmp
128cc     00 FA 0D F2 | 	cmp	result1, #0 wz
128d0     04 4E 05 A1 |  if_e	add	fp, #4
128d4     A7 62 68 AC |  if_e	wrlong	#49, fp
128d8     04 4E 85 A1 |  if_e	sub	fp, #4
128dc     38 00 90 AD |  if_e	jmp	#LR__1494
128e0     18 4E 05 F1 | 	add	fp, #24
128e4     A7 12 02 FB | 	rdlong	arg01, fp
128e8     18 4E 85 F1 | 	sub	fp, #24
128ec     FC 75 B1 FD | 	call	#__system__LCase_S
128f0     FD 12 02 F6 | 	mov	arg01, result1
128f4     C0 01 00 FF 
128f8     E1 14 06 F6 | 	mov	arg02, ##@LR__6060
128fc     84 52 B1 FD | 	call	#__system___string_cmp
12900     00 FA 0D F2 | 	cmp	result1, #0 wz
12904     04 4E 05 A1 |  if_e	add	fp, #4
12908     A7 20 68 AC |  if_e	wrlong	#16, fp
1290c     04 4E C5 F3 | 	sumz	fp, #4
12910     A7 42 68 5C |  if_ne	wrlong	#33, fp
12914     04 4E 85 51 |  if_ne	sub	fp, #4
12918                 | LR__1494
12918     14 4E 05 F1 | 	add	fp, #20
1291c     A7 12 02 FB | 	rdlong	arg01, fp
12920     10 4E 85 F1 | 	sub	fp, #16
12924     A7 14 02 FB | 	rdlong	arg02, fp
12928     04 4E 85 F1 | 	sub	fp, #4
1292c     9C B0 B1 FD | 	call	#__system___basic_dir
12930     18 4E 05 F1 | 	add	fp, #24
12934     A7 FA 61 FC | 	wrlong	result1, fp
12938     08 4E 85 F1 | 	sub	fp, #8
1293c     A7 3E 68 FC | 	wrlong	#31, fp
12940     08 4E 05 F1 | 	add	fp, #8
12944     A7 16 02 FB | 	rdlong	arg03, fp
12948     10 4E 85 F1 | 	sub	fp, #16
1294c     A7 16 62 FC | 	wrlong	arg03, fp
12950     A7 12 02 F6 | 	mov	arg01, fp
12954     08 4E 85 F1 | 	sub	fp, #8
12958     5C AF BF FD | 	call	#_push
1295c                 | LR__1495
1295c     A7 F0 03 F6 | 	mov	ptra, fp
12960     B2 00 A0 FD | 	call	#popregs_
12964                 | _do_findfirst_ret
12964     2D 00 64 FD | 	ret
12968                 | 
12968                 | ' 
12968                 | ' '-------------------- findnext
12968                 | ' 
12968                 | ' sub do_findnext
12968                 | _do_findnext
12968     00 4A 05 F6 | 	mov	COUNT_, #0
1296c     A8 00 A0 FD | 	call	#pushregs_
12970     10 F0 07 F1 | 	add	ptra, #16
12974                 | ' 
12974                 | ' if compiledline(lineptr_e).result.uresult>0 then print "findnext: "; : printerror(39) : return    
12974     4A 00 00 FF 
12978     80 E4 05 F1 | 	add	objptr, ##38016
1297c     F2 16 02 FB | 	rdlong	arg03, objptr
12980     0B 15 02 F6 | 	mov	arg02, arg03
12984     01 14 66 F0 | 	shl	arg02, #1
12988     0B 15 02 F1 | 	add	arg02, arg03
1298c     02 14 66 F0 | 	shl	arg02, #2
12990     03 00 00 FF 
12994     04 E4 85 F1 | 	sub	objptr, ##1540
12998     F2 14 02 F1 | 	add	arg02, objptr
1299c     0A FB 01 FB | 	rdlong	result1, arg02
129a0     01 FA 15 F2 | 	cmp	result1, #1 wc
129a4     47 00 00 FF 
129a8     7C E4 85 F1 | 	sub	objptr, ##36476
129ac     40 00 90 CD |  if_b	jmp	#LR__1500
129b0     00 12 06 F6 | 	mov	arg01, #0
129b4     54 AE B1 FD | 	call	#__system___getiolock_0620
129b8     FD 12 02 F6 | 	mov	arg01, result1
129bc     9C 51 B1 FD | 	call	#__system___lockmem
129c0     C0 01 00 FF 
129c4     E5 14 06 F6 | 	mov	arg02, ##@LR__6061
129c8     00 12 06 F6 | 	mov	arg01, #0
129cc     00 16 06 F6 | 	mov	arg03, #0
129d0     80 5E B1 FD | 	call	#__system___basic_print_string
129d4     00 12 06 F6 | 	mov	arg01, #0
129d8     30 AE B1 FD | 	call	#__system___getiolock_0620
129dc     FD 00 68 FC | 	wrlong	#0, result1
129e0     27 12 06 F6 | 	mov	arg01, #39
129e4     00 14 06 F6 | 	mov	arg02, #0
129e8     10 17 B1 FD | 	call	#_printerror
129ec     34 00 90 FD | 	jmp	#LR__1501
129f0                 | LR__1500
129f0     00 12 06 F6 | 	mov	arg01, #0
129f4     00 14 06 F6 | 	mov	arg02, #0
129f8     D0 AF B1 FD | 	call	#__system___basic_dir
129fc     0C 4E 05 F1 | 	add	fp, #12
12a00     A7 FA 61 FC | 	wrlong	result1, fp
12a04     04 4E 85 F1 | 	sub	fp, #4
12a08     A7 3E 68 FC | 	wrlong	#31, fp
12a0c     04 4E 05 F1 | 	add	fp, #4
12a10     A7 16 02 FB | 	rdlong	arg03, fp
12a14     0C 4E 85 F1 | 	sub	fp, #12
12a18     A7 16 62 FC | 	wrlong	arg03, fp
12a1c     A7 12 02 F6 | 	mov	arg01, fp
12a20     94 AE BF FD | 	call	#_push
12a24                 | LR__1501
12a24     A7 F0 03 F6 | 	mov	ptra, fp
12a28     B2 00 A0 FD | 	call	#popregs_
12a2c                 | _do_findnext_ret
12a2c     2D 00 64 FD | 	ret
12a30                 | 
12a30                 | ' 
12a30                 | ' '-------------------- font
12a30                 | ' 
12a30                 | ' sub do_font
12a30                 | _do_font
12a30     03 4A 05 F6 | 	mov	COUNT_, #3
12a34     A8 00 A0 FD | 	call	#pushregs_
12a38     E4 AD BF FD | 	call	#_pop
12a3c     FD 26 02 F6 | 	mov	local01, result1
12a40     FE 28 02 F6 | 	mov	local02, result2
12a44     FF 2A 02 F6 | 	mov	local03, result3
12a48                 | ' 
12a48                 | ' t1=pop() 
12a48                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12a48     1E 2A 0E F2 | 	cmp	local03, #30 wz
12a4c     10 00 90 5D |  if_ne	jmp	#LR__1510
12a50     13 13 02 F6 | 	mov	arg01, local01
12a54     00 14 06 F6 | 	mov	arg02, #0
12a58     44 84 B1 FD | 	call	#__system___float_tointeger
12a5c     FD 26 02 F6 | 	mov	local01, result1
12a60                 | LR__1510
12a60                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12a60     1F 2A 0E F2 | 	cmp	local03, #31 wz
12a64     18 00 90 5D |  if_ne	jmp	#LR__1511
12a68     13 13 02 F6 | 	mov	arg01, local01
12a6c     78 87 B1 FD | 	call	#__system____builtin_atof
12a70     FD 12 02 F6 | 	mov	arg01, result1
12a74     00 14 06 F6 | 	mov	arg02, #0
12a78     24 84 B1 FD | 	call	#__system___float_tointeger
12a7c     FD 26 02 F6 | 	mov	local01, result1
12a80                 | LR__1511
12a80     37 00 00 FF 
12a84     40 E4 05 F1 | 	add	objptr, ##28224
12a88     F2 26 62 FC | 	wrlong	local01, objptr
12a8c     37 00 00 FF 
12a90     40 E4 85 F1 | 	sub	objptr, ##28224
12a94     02 26 66 F0 | 	shl	local01, #2
12a98     13 13 02 F6 | 	mov	arg01, local01
12a9c     9C 32 B1 FD | 	call	#_hg010b_spin2_setfontfamily
12aa0     A7 F0 03 F6 | 	mov	ptra, fp
12aa4     B2 00 A0 FD | 	call	#popregs_
12aa8                 | _do_font_ret
12aa8     2D 00 64 FD | 	ret
12aac                 | 
12aac                 | ' 
12aac                 | ' '-------------------- for
12aac                 | ' 
12aac                 | ' sub do_for()
12aac                 | _do_for
12aac     01 4A 05 F6 | 	mov	COUNT_, #1
12ab0     A8 00 A0 FD | 	call	#pushregs_
12ab4     10 F0 07 F1 | 	add	ptra, #16
12ab8     50 00 00 FF 
12abc     30 E5 05 F1 | 	add	objptr, ##41264
12ac0     F2 12 02 FB | 	rdlong	arg01, objptr
12ac4     01 12 06 F1 | 	add	arg01, #1
12ac8     F2 12 62 FC | 	wrlong	arg01, objptr
12acc     50 00 00 FF 
12ad0     30 E5 85 F1 | 	sub	objptr, ##41264
12ad4     48 AD BF FD | 	call	#_pop
12ad8     A7 FA 61 FC | 	wrlong	result1, fp
12adc     04 4E 05 F1 | 	add	fp, #4
12ae0     A7 FC 61 FC | 	wrlong	result2, fp
12ae4     04 4E 05 F1 | 	add	fp, #4
12ae8     A7 FE 61 FC | 	wrlong	result3, fp
12aec     08 4E 85 F1 | 	sub	fp, #8
12af0     50 00 00 FF 
12af4     30 E5 05 F1 | 	add	objptr, ##41264
12af8     F2 12 02 FB | 	rdlong	arg01, objptr
12afc     09 27 02 F6 | 	mov	local01, arg01
12b00     02 26 66 F0 | 	shl	local01, #2
12b04     09 27 02 F1 | 	add	local01, arg01
12b08     02 26 66 F0 | 	shl	local01, #2
12b0c     06 00 00 FF 
12b10     98 E4 85 F1 | 	sub	objptr, ##3224
12b14     F2 26 02 F1 | 	add	local01, objptr
12b18     A7 12 02 FB | 	rdlong	arg01, fp
12b1c     08 26 06 F1 | 	add	local01, #8
12b20     13 13 62 FC | 	wrlong	arg01, local01
12b24     4A 00 00 FF 
12b28     98 E4 85 F1 | 	sub	objptr, ##38040
12b2c     F0 AC BF FD | 	call	#_pop
12b30     A7 FA 61 FC | 	wrlong	result1, fp
12b34     04 4E 05 F1 | 	add	fp, #4
12b38     A7 FC 61 FC | 	wrlong	result2, fp
12b3c     04 4E 05 F1 | 	add	fp, #4
12b40     A7 FE 61 FC | 	wrlong	result3, fp
12b44     08 4E 85 F1 | 	sub	fp, #8
12b48     50 00 00 FF 
12b4c     30 E5 05 F1 | 	add	objptr, ##41264
12b50     F2 12 02 FB | 	rdlong	arg01, objptr
12b54     09 27 02 F6 | 	mov	local01, arg01
12b58     02 26 66 F0 | 	shl	local01, #2
12b5c     09 27 02 F1 | 	add	local01, arg01
12b60     02 26 66 F0 | 	shl	local01, #2
12b64     06 00 00 FF 
12b68     98 E4 85 F1 | 	sub	objptr, ##3224
12b6c     F2 26 02 F1 | 	add	local01, objptr
12b70     A7 12 02 F6 | 	mov	arg01, fp
12b74     4A 00 00 FF 
12b78     98 E4 85 F1 | 	sub	objptr, ##38040
12b7c     84 AE BF FD | 	call	#_converttoint
12b80     FD 12 02 F6 | 	mov	arg01, result1
12b84     0C 26 06 F1 | 	add	local01, #12
12b88     13 13 62 FC | 	wrlong	arg01, local01
12b8c     90 AC BF FD | 	call	#_pop
12b90     A7 FA 61 FC | 	wrlong	result1, fp
12b94     04 4E 05 F1 | 	add	fp, #4
12b98     A7 FC 61 FC | 	wrlong	result2, fp
12b9c     04 4E 05 F1 | 	add	fp, #4
12ba0     A7 FE 61 FC | 	wrlong	result3, fp
12ba4     08 4E 85 F1 | 	sub	fp, #8
12ba8     50 00 00 FF 
12bac     30 E5 05 F1 | 	add	objptr, ##41264
12bb0     F2 12 02 FB | 	rdlong	arg01, objptr
12bb4     09 27 02 F6 | 	mov	local01, arg01
12bb8     02 26 66 F0 | 	shl	local01, #2
12bbc     09 27 02 F1 | 	add	local01, arg01
12bc0     02 26 66 F0 | 	shl	local01, #2
12bc4     06 00 00 FF 
12bc8     98 E4 85 F1 | 	sub	objptr, ##3224
12bcc     F2 26 02 F1 | 	add	local01, objptr
12bd0     A7 12 02 F6 | 	mov	arg01, fp
12bd4     4A 00 00 FF 
12bd8     98 E4 85 F1 | 	sub	objptr, ##38040
12bdc     24 AE BF FD | 	call	#_converttoint
12be0     10 26 06 F1 | 	add	local01, #16
12be4     13 FB 61 FC | 	wrlong	result1, local01
12be8                 | ' fortop+=1
12be8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12be8                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12be8                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12be8                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12be8     4A 00 00 FF 
12bec     80 E4 05 F1 | 	add	objptr, ##38016
12bf0     F2 12 02 FB | 	rdlong	arg01, objptr
12bf4     09 27 02 F6 | 	mov	local01, arg01
12bf8     01 26 66 F0 | 	shl	local01, #1
12bfc     09 27 02 F1 | 	add	local01, arg01
12c00     02 26 66 F0 | 	shl	local01, #2
12c04     03 00 00 FF 
12c08     04 E4 85 F1 | 	sub	objptr, ##1540
12c0c     F2 26 02 F1 | 	add	local01, objptr
12c10     08 26 06 F1 | 	add	local01, #8
12c14     13 27 02 FB | 	rdlong	local01, local01
12c18     FE 27 0E F2 | 	cmp	local01, #510 wz
12c1c     47 00 00 FF 
12c20     7C E4 85 F1 | 	sub	objptr, ##36476
12c24     70 00 90 5D |  if_ne	jmp	#LR__1520
12c28     50 00 00 FF 
12c2c     30 E5 05 F1 | 	add	objptr, ##41264
12c30     F2 12 02 FB | 	rdlong	arg01, objptr
12c34     09 27 02 F6 | 	mov	local01, arg01
12c38     02 26 66 F0 | 	shl	local01, #2
12c3c     09 27 02 F1 | 	add	local01, arg01
12c40     02 26 66 F0 | 	shl	local01, #2
12c44     06 00 00 FF 
12c48     98 E4 85 F1 | 	sub	objptr, ##3224
12c4c     F2 26 02 F1 | 	add	local01, objptr
12c50     06 00 00 FF 
12c54     20 E4 05 F1 | 	add	objptr, ##3104
12c58     F2 12 02 FB | 	rdlong	arg01, objptr
12c5c     13 13 62 FC | 	wrlong	arg01, local01
12c60     78 E4 05 F1 | 	add	objptr, #120
12c64     F2 12 02 FB | 	rdlong	arg01, objptr
12c68     09 27 02 F6 | 	mov	local01, arg01
12c6c     02 26 66 F0 | 	shl	local01, #2
12c70     09 27 02 F1 | 	add	local01, arg01
12c74     02 26 66 F0 | 	shl	local01, #2
12c78     06 00 00 FF 
12c7c     98 E4 85 F1 | 	sub	objptr, ##3224
12c80     F2 26 02 F1 | 	add	local01, objptr
12c84     04 26 06 F1 | 	add	local01, #4
12c88     13 01 68 FC | 	wrlong	#0, local01
12c8c     4A 00 00 FF 
12c90     98 E4 85 F1 | 	sub	objptr, ##38040
12c94     78 00 90 FD | 	jmp	#LR__1521
12c98                 | LR__1520
12c98     50 00 00 FF 
12c9c     30 E5 05 F1 | 	add	objptr, ##41264
12ca0     F2 12 02 FB | 	rdlong	arg01, objptr
12ca4     09 27 02 F6 | 	mov	local01, arg01
12ca8     02 26 66 F0 | 	shl	local01, #2
12cac     09 27 02 F1 | 	add	local01, arg01
12cb0     02 26 66 F0 | 	shl	local01, #2
12cb4     06 00 00 FF 
12cb8     98 E4 85 F1 | 	sub	objptr, ##3224
12cbc     F2 26 02 F1 | 	add	local01, objptr
12cc0     06 00 00 FF 
12cc4     28 E4 05 F1 | 	add	objptr, ##3112
12cc8     F2 12 02 FB | 	rdlong	arg01, objptr
12ccc     13 13 62 FC | 	wrlong	arg01, local01
12cd0     70 E4 05 F1 | 	add	objptr, #112
12cd4     F2 12 02 FB | 	rdlong	arg01, objptr
12cd8     09 27 02 F6 | 	mov	local01, arg01
12cdc     02 26 66 F0 | 	shl	local01, #2
12ce0     09 27 02 F1 | 	add	local01, arg01
12ce4     02 26 66 F0 | 	shl	local01, #2
12ce8     06 00 00 FF 
12cec     98 E4 85 F1 | 	sub	objptr, ##3224
12cf0     F2 26 02 F1 | 	add	local01, objptr
12cf4     18 E4 85 F1 | 	sub	objptr, #24
12cf8     F2 12 02 FB | 	rdlong	arg01, objptr
12cfc     4A 00 00 FF 
12d00     80 E4 85 F1 | 	sub	objptr, ##38016
12d04     01 12 06 F1 | 	add	arg01, #1
12d08     04 26 06 F1 | 	add	local01, #4
12d0c     13 13 62 FC | 	wrlong	arg01, local01
12d10                 | LR__1521
12d10     A7 F0 03 F6 | 	mov	ptra, fp
12d14     B2 00 A0 FD | 	call	#popregs_
12d18                 | _do_for_ret
12d18     2D 00 64 FD | 	ret
12d1c                 | 
12d1c                 | ' 
12d1c                 | ' '-------------------- frame
12d1c                 | ' 
12d1c                 | ' sub do_frame
12d1c                 | _do_frame
12d1c     03 4A 05 F6 | 	mov	COUNT_, #3
12d20     A8 00 A0 FD | 	call	#pushregs_
12d24     30 F0 07 F1 | 	add	ptra, #48
12d28     F4 AA BF FD | 	call	#_pop
12d2c     FD 16 02 F6 | 	mov	arg03, result1
12d30     FE 14 02 F6 | 	mov	arg02, result2
12d34     FF 1A 02 F6 | 	mov	arg05, result3
12d38     24 4E 05 F1 | 	add	fp, #36
12d3c     A7 16 62 FC | 	wrlong	arg03, fp
12d40     04 4E 05 F1 | 	add	fp, #4
12d44     A7 14 62 FC | 	wrlong	arg02, fp
12d48     04 4E 05 F1 | 	add	fp, #4
12d4c     A7 1A 62 FC | 	wrlong	arg05, fp
12d50     2C 4E 85 F1 | 	sub	fp, #44
12d54     C8 AA BF FD | 	call	#_pop
12d58     FD 16 02 F6 | 	mov	arg03, result1
12d5c     FE 14 02 F6 | 	mov	arg02, result2
12d60     FF 1A 02 F6 | 	mov	arg05, result3
12d64     18 4E 05 F1 | 	add	fp, #24
12d68     A7 16 62 FC | 	wrlong	arg03, fp
12d6c     04 4E 05 F1 | 	add	fp, #4
12d70     A7 14 62 FC | 	wrlong	arg02, fp
12d74     04 4E 05 F1 | 	add	fp, #4
12d78     A7 1A 62 FC | 	wrlong	arg05, fp
12d7c     20 4E 85 F1 | 	sub	fp, #32
12d80     9C AA BF FD | 	call	#_pop
12d84     FD 16 02 F6 | 	mov	arg03, result1
12d88     FE 14 02 F6 | 	mov	arg02, result2
12d8c     FF 1A 02 F6 | 	mov	arg05, result3
12d90     0C 4E 05 F1 | 	add	fp, #12
12d94     A7 16 62 FC | 	wrlong	arg03, fp
12d98     04 4E 05 F1 | 	add	fp, #4
12d9c     A7 14 62 FC | 	wrlong	arg02, fp
12da0     04 4E 05 F1 | 	add	fp, #4
12da4     A7 1A 62 FC | 	wrlong	arg05, fp
12da8     14 4E 85 F1 | 	sub	fp, #20
12dac     70 AA BF FD | 	call	#_pop
12db0     FF 16 02 F6 | 	mov	arg03, result3
12db4     A7 FA 61 FC | 	wrlong	result1, fp
12db8     04 4E 05 F1 | 	add	fp, #4
12dbc     A7 FC 61 FC | 	wrlong	result2, fp
12dc0     04 4E 05 F1 | 	add	fp, #4
12dc4     A7 16 62 FC | 	wrlong	arg03, fp
12dc8     08 4E 85 F1 | 	sub	fp, #8
12dcc     A7 12 02 F6 | 	mov	arg01, fp
12dd0     30 AC BF FD | 	call	#_converttoint
12dd4     FD 26 02 F6 | 	mov	local01, result1
12dd8     0C 4E 05 F1 | 	add	fp, #12
12ddc     A7 12 02 F6 | 	mov	arg01, fp
12de0     0C 4E 85 F1 | 	sub	fp, #12
12de4     1C AC BF FD | 	call	#_converttoint
12de8     FD 28 02 F6 | 	mov	local02, result1
12dec     18 4E 05 F1 | 	add	fp, #24
12df0     A7 12 02 F6 | 	mov	arg01, fp
12df4     18 4E 85 F1 | 	sub	fp, #24
12df8     08 AC BF FD | 	call	#_converttoint
12dfc     FD 2A 02 F6 | 	mov	local03, result1
12e00     24 4E 05 F1 | 	add	fp, #36
12e04     A7 12 02 F6 | 	mov	arg01, fp
12e08     24 4E 85 F1 | 	sub	fp, #36
12e0c     F4 AB BF FD | 	call	#_converttoint
12e10     FD 18 02 F6 | 	mov	arg04, result1
12e14     37 00 00 FF 
12e18     28 E4 05 F1 | 	add	objptr, ##28200
12e1c     F2 1A 02 FB | 	rdlong	arg05, objptr
12e20     37 00 00 FF 
12e24     28 E4 85 F1 | 	sub	objptr, ##28200
12e28     13 13 02 F6 | 	mov	arg01, local01
12e2c     14 15 02 F6 | 	mov	arg02, local02
12e30     15 17 02 F6 | 	mov	arg03, local03
12e34     0C 2D B1 FD | 	call	#_hg010b_spin2_frame
12e38     A7 F0 03 F6 | 	mov	ptra, fp
12e3c     B2 00 A0 FD | 	call	#popregs_
12e40                 | _do_frame_ret
12e40     2D 00 64 FD | 	ret
12e44                 | 
12e44                 | ' 
12e44                 | ' '-------------------- framebuf
12e44                 | ' 
12e44                 | ' sub do_framebuf
12e44                 | _do_framebuf
12e44     00 4A 05 F6 | 	mov	COUNT_, #0
12e48     A8 00 A0 FD | 	call	#pushregs_
12e4c     0C F0 07 F1 | 	add	ptra, #12
12e50     08 4E 05 F1 | 	add	fp, #8
12e54     A7 3A 68 FC | 	wrlong	#29, fp
12e58     F2 12 02 FB | 	rdlong	arg01, objptr
12e5c     08 4E 85 F1 | 	sub	fp, #8
12e60     A7 12 62 FC | 	wrlong	arg01, fp
12e64     A7 12 02 F6 | 	mov	arg01, fp
12e68     4C AA BF FD | 	call	#_push
12e6c     A7 F0 03 F6 | 	mov	ptra, fp
12e70     B2 00 A0 FD | 	call	#popregs_
12e74                 | _do_framebuf_ret
12e74     2D 00 64 FD | 	ret
12e78                 | 
12e78                 | ' '-------------------- fre
12e78                 | ' 
12e78                 | ' sub do_fre
12e78                 | _do_fre
12e78     01 4A 05 F6 | 	mov	COUNT_, #1
12e7c     A8 00 A0 FD | 	call	#pushregs_
12e80     0C F0 07 F1 | 	add	ptra, #12
12e84     52 00 00 FF 
12e88     D0 E4 05 F1 | 	add	objptr, ##42192
12e8c     F2 12 02 FB | 	rdlong	arg01, objptr
12e90     0F 00 00 FF 
12e94     74 E4 85 F1 | 	sub	objptr, ##7796
12e98     F2 26 02 FB | 	rdlong	local01, objptr
12e9c     13 13 82 F1 | 	sub	arg01, local01
12ea0     0F 00 00 FF 
12ea4     F0 E4 05 F1 | 	add	objptr, ##7920
12ea8     F2 12 62 FC | 	wrlong	arg01, objptr
12eac     08 4E 05 F1 | 	add	fp, #8
12eb0     A7 3A 68 FC | 	wrlong	#29, fp
12eb4     08 4E 85 F1 | 	sub	fp, #8
12eb8     F2 26 02 FB | 	rdlong	local01, objptr
12ebc     52 00 00 FF 
12ec0     4C E5 85 F1 | 	sub	objptr, ##42316
12ec4     A7 26 62 FC | 	wrlong	local01, fp
12ec8     A7 12 02 F6 | 	mov	arg01, fp
12ecc     E8 A9 BF FD | 	call	#_push
12ed0     A7 F0 03 F6 | 	mov	ptra, fp
12ed4     B2 00 A0 FD | 	call	#popregs_
12ed8                 | _do_fre_ret
12ed8     2D 00 64 FD | 	ret
12edc                 | 
12edc                 | ' 
12edc                 | ' '-------------------- get
12edc                 | ' 
12edc                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12edc                 | _do_get
12edc     09 4A 05 F6 | 	mov	COUNT_, #9
12ee0     A8 00 A0 FD | 	call	#pushregs_
12ee4     40 F0 07 F1 | 	add	ptra, #64
12ee8     4A 00 00 FF 
12eec     80 E4 05 F1 | 	add	objptr, ##38016
12ef0     F2 1A 02 FB | 	rdlong	arg05, objptr
12ef4     0D 19 02 F6 | 	mov	arg04, arg05
12ef8     01 18 66 F0 | 	shl	arg04, #1
12efc     0D 19 02 F1 | 	add	arg04, arg05
12f00     02 18 66 F0 | 	shl	arg04, #2
12f04     03 00 00 FF 
12f08     04 E4 85 F1 | 	sub	objptr, ##1540
12f0c     F2 18 02 F1 | 	add	arg04, objptr
12f10     0C 1B 02 FB | 	rdlong	arg05, arg04
12f14     A7 1A 62 FC | 	wrlong	arg05, fp
12f18                 | ' 
12f18                 | ' numpar=compiledline(lineptr_e).result.uresult
12f18                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
12f18     04 1A 0E F2 | 	cmp	arg05, #4 wz
12f1c     47 00 00 FF 
12f20     7C E4 85 F1 | 	sub	objptr, ##36476
12f24     48 00 90 5D |  if_ne	jmp	#LR__1530
12f28     F4 A8 BF FD | 	call	#_pop
12f2c     FF 1A 02 F6 | 	mov	arg05, result3
12f30     1C 4E 05 F1 | 	add	fp, #28
12f34     A7 FA 61 FC | 	wrlong	result1, fp
12f38     04 4E 05 F1 | 	add	fp, #4
12f3c     A7 FC 61 FC | 	wrlong	result2, fp
12f40     04 4E 05 F1 | 	add	fp, #4
12f44     A7 1A 62 FC | 	wrlong	arg05, fp
12f48     08 4E 85 F1 | 	sub	fp, #8
12f4c     A7 12 02 F6 | 	mov	arg01, fp
12f50     1C 4E 85 F1 | 	sub	fp, #28
12f54     AC AA BF FD | 	call	#_converttoint
12f58     52 00 00 FF 
12f5c     48 E5 05 F1 | 	add	objptr, ##42312
12f60     F2 FA 61 FC | 	wrlong	result1, objptr
12f64     52 00 00 FF 
12f68     48 E5 85 F1 | 	sub	objptr, ##42312
12f6c     18 00 90 FD | 	jmp	#LR__1531
12f70                 | LR__1530
12f70     52 00 00 FF 
12f74     48 E5 05 F1 | 	add	objptr, ##42312
12f78     FF FF FF FF 
12f7c     F2 FE 6B FC | 	wrlong	##-1, objptr
12f80     52 00 00 FF 
12f84     48 E5 85 F1 | 	sub	objptr, ##42312
12f88                 | LR__1531
12f88                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
12f88     A7 16 02 FB | 	rdlong	arg03, fp
12f8c     03 16 56 F2 | 	cmps	arg03, #3 wc
12f90     40 00 90 CD |  if_b	jmp	#LR__1532
12f94     88 A8 BF FD | 	call	#_pop
12f98     FF 16 02 F6 | 	mov	arg03, result3
12f9c     1C 4E 05 F1 | 	add	fp, #28
12fa0     A7 FA 61 FC | 	wrlong	result1, fp
12fa4     04 4E 05 F1 | 	add	fp, #4
12fa8     A7 FC 61 FC | 	wrlong	result2, fp
12fac     04 4E 05 F1 | 	add	fp, #4
12fb0     A7 16 62 FC | 	wrlong	arg03, fp
12fb4     08 4E 85 F1 | 	sub	fp, #8
12fb8     A7 12 02 F6 | 	mov	arg01, fp
12fbc     1C 4E 85 F1 | 	sub	fp, #28
12fc0     40 AA BF FD | 	call	#_converttoint
12fc4     08 4E 05 F1 | 	add	fp, #8
12fc8     A7 FA 61 FC | 	wrlong	result1, fp
12fcc     08 4E 85 F1 | 	sub	fp, #8
12fd0     0C 00 90 FD | 	jmp	#LR__1533
12fd4                 | LR__1532
12fd4     08 4E 05 F1 | 	add	fp, #8
12fd8     A7 02 68 FC | 	wrlong	#1, fp
12fdc     08 4E 85 F1 | 	sub	fp, #8
12fe0                 | LR__1533
12fe0                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
12fe0     A7 16 02 FB | 	rdlong	arg03, fp
12fe4     02 16 56 F2 | 	cmps	arg03, #2 wc
12fe8     3C 00 90 CD |  if_b	jmp	#LR__1534
12fec     30 A8 BF FD | 	call	#_pop
12ff0     FF 16 02 F6 | 	mov	arg03, result3
12ff4     1C 4E 05 F1 | 	add	fp, #28
12ff8     A7 FA 61 FC | 	wrlong	result1, fp
12ffc     04 4E 05 F1 | 	add	fp, #4
13000     A7 FC 61 FC | 	wrlong	result2, fp
13004     04 4E 05 F1 | 	add	fp, #4
13008     A7 16 62 FC | 	wrlong	arg03, fp
1300c     08 4E 85 F1 | 	sub	fp, #8
13010     A7 12 02 F6 | 	mov	arg01, fp
13014     1C 4E 85 F1 | 	sub	fp, #28
13018     E8 A9 BF FD | 	call	#_converttoint
1301c     0C 4E 05 F1 | 	add	fp, #12
13020     A7 FA 61 FC | 	wrlong	result1, fp
13024     0C 4E 85 F1 | 	sub	fp, #12
13028                 | LR__1534
13028     F4 A7 BF FD | 	call	#_pop
1302c     FF 16 02 F6 | 	mov	arg03, result3
13030     1C 4E 05 F1 | 	add	fp, #28
13034     A7 FA 61 FC | 	wrlong	result1, fp
13038     04 4E 05 F1 | 	add	fp, #4
1303c     A7 FC 61 FC | 	wrlong	result2, fp
13040     04 4E 05 F1 | 	add	fp, #4
13044     A7 16 62 FC | 	wrlong	arg03, fp
13048     08 4E 85 F1 | 	sub	fp, #8
1304c     A7 12 02 F6 | 	mov	arg01, fp
13050     1C 4E 85 F1 | 	sub	fp, #28
13054     AC A9 BF FD | 	call	#_converttoint
13058     04 4E 05 F1 | 	add	fp, #4
1305c     A7 FA 61 FC | 	wrlong	result1, fp
13060     10 4E 05 F1 | 	add	fp, #16
13064     A7 16 02 FB | 	rdlong	arg03, fp
13068     14 4E 85 F1 | 	sub	fp, #20
1306c     02 16 66 F0 | 	shl	arg03, #2
13070     50 00 00 FF 
13074     C4 E4 05 F1 | 	add	objptr, ##41156
13078     F2 26 02 F6 | 	mov	local01, objptr
1307c     F2 16 02 F1 | 	add	arg03, objptr
13080     0B 01 68 FC | 	wrlong	#0, arg03
13084                 | ' t1=pop() : channel=converttoint(t1)
13084                 | ' getres(j)=0
13084                 | ' if pos>=0 then
13084     02 00 00 FF 
13088     84 E4 05 F1 | 	add	objptr, ##1156
1308c     F2 28 02 FB | 	rdlong	local02, objptr
13090     52 00 00 FF 
13094     48 E5 85 F1 | 	sub	objptr, ##42312
13098     00 28 56 F2 | 	cmps	local02, #0 wc
1309c     F0 01 90 CD |  if_b	jmp	#LR__1541
130a0                 | '   for i=0 to  amount/1024
130a0     10 4E 05 F1 | 	add	fp, #16
130a4     A7 00 68 FC | 	wrlong	#0, fp
130a8     08 4E 85 F1 | 	sub	fp, #8
130ac     A7 2A 02 FB | 	rdlong	local03, fp
130b0     08 4E 85 F1 | 	sub	fp, #8
130b4     15 2D 52 F6 | 	abs	local04, local03 wc
130b8     0A 2C 46 F0 | 	shr	local04, #10
130bc     16 2D 82 F6 | 	negc	local04, local04
130c0     01 2C 06 F1 | 	add	local04, #1
130c4                 | LR__1535
130c4     10 4E 05 F1 | 	add	fp, #16
130c8     A7 2A 02 FB | 	rdlong	local03, fp
130cc     10 4E 85 F1 | 	sub	fp, #16
130d0     16 2B 52 F2 | 	cmps	local03, local04 wc
130d4     9C 03 90 3D |  if_ae	jmp	#LR__1549
130d8                 | '     get #channel,pos+1,block(0),amount,r
130d8     04 4E 05 F1 | 	add	fp, #4
130dc     A7 12 02 FB | 	rdlong	arg01, fp
130e0     52 00 00 FF 
130e4     48 E5 05 F1 | 	add	objptr, ##42312
130e8     F2 14 02 FB | 	rdlong	arg02, objptr
130ec     01 14 06 F1 | 	add	arg02, #1
130f0     04 00 00 FF 
130f4     94 E4 85 F1 | 	sub	objptr, ##2196
130f8     F2 16 02 F6 | 	mov	arg03, objptr
130fc     4E 00 00 FF 
13100     B4 E4 85 F1 | 	sub	objptr, ##40116
13104     04 4E 05 F1 | 	add	fp, #4
13108     A7 18 02 FB | 	rdlong	arg04, fp
1310c     08 4E 85 F1 | 	sub	fp, #8
13110     01 1A 06 F6 | 	mov	arg05, #1
13114     B8 58 B1 FD | 	call	#__system___basic_get
13118     18 4E 05 F1 | 	add	fp, #24
1311c     A7 FA 61 FC | 	wrlong	result1, fp
13120                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
13120     0C 4E 85 F1 | 	sub	fp, #12
13124     A7 28 02 FB | 	rdlong	local02, fp
13128     0C 4E 85 F1 | 	sub	fp, #12
1312c     00 04 00 FF 
13130     00 28 56 F2 | 	cmps	local02, ##524288 wc
13134     7C 00 90 3D |  if_ae	jmp	#LR__1537
13138     14 4E 05 F1 | 	add	fp, #20
1313c     A7 00 68 FC | 	wrlong	#0, fp
13140     04 4E 05 F1 | 	add	fp, #4
13144     A7 2E 02 FB | 	rdlong	local05, fp
13148     18 4E 85 F1 | 	sub	fp, #24
1314c                 | LR__1536
1314c     14 4E 05 F1 | 	add	fp, #20
13150     A7 28 02 FB | 	rdlong	local02, fp
13154     14 4E 85 F1 | 	sub	fp, #20
13158     17 29 52 F2 | 	cmps	local02, local05 wc
1315c     D8 00 90 3D |  if_ae	jmp	#LR__1540
13160     0C 4E 05 F1 | 	add	fp, #12
13164     A7 12 02 FB | 	rdlong	arg01, fp
13168     04 4E 05 F1 | 	add	fp, #4
1316c     A7 2A 02 FB | 	rdlong	local03, fp
13170     0A 2A 66 F0 | 	shl	local03, #10
13174     15 13 02 F1 | 	add	arg01, local03
13178     04 4E 05 F1 | 	add	fp, #4
1317c     A7 2A 02 FB | 	rdlong	local03, fp
13180     15 13 02 F1 | 	add	arg01, local03
13184     4E 00 00 FF 
13188     B4 E4 05 F1 | 	add	objptr, ##40116
1318c     F2 2A 02 F1 | 	add	local03, objptr
13190     15 15 C2 FA | 	rdbyte	arg02, local03
13194     09 15 42 FC | 	wrbyte	arg02, arg01
13198     4E 00 00 FF 
1319c     B4 E4 85 F1 | 	sub	objptr, ##40116
131a0     A7 2A 02 FB | 	rdlong	local03, fp
131a4     01 2A 06 F1 | 	add	local03, #1
131a8     A7 2A 62 FC | 	wrlong	local03, fp
131ac     14 4E 85 F1 | 	sub	fp, #20
131b0     98 FF 9F FD | 	jmp	#LR__1536
131b4                 | LR__1537
131b4     14 4E 05 F1 | 	add	fp, #20
131b8     A7 00 68 FC | 	wrlong	#0, fp
131bc     04 4E 05 F1 | 	add	fp, #4
131c0     A7 30 02 FB | 	rdlong	local06, fp
131c4     18 4E 85 F1 | 	sub	fp, #24
131c8                 | LR__1538
131c8     14 4E 05 F1 | 	add	fp, #20
131cc     A7 28 02 FB | 	rdlong	local02, fp
131d0     14 4E 85 F1 | 	sub	fp, #20
131d4     18 29 52 F2 | 	cmps	local02, local06 wc
131d8     5C 00 90 3D |  if_ae	jmp	#LR__1539
131dc     0C 4E 05 F1 | 	add	fp, #12
131e0     A7 12 02 FB | 	rdlong	arg01, fp
131e4     04 4E 05 F1 | 	add	fp, #4
131e8     A7 2E 02 FB | 	rdlong	local05, fp
131ec     0A 2E 66 F0 | 	shl	local05, #10
131f0     17 13 02 F1 | 	add	arg01, local05
131f4     04 4E 05 F1 | 	add	fp, #4
131f8     A7 2E 02 FB | 	rdlong	local05, fp
131fc     17 13 02 F1 | 	add	arg01, local05
13200     14 4E 85 F1 | 	sub	fp, #20
13204     4E 00 00 FF 
13208     B4 E4 05 F1 | 	add	objptr, ##40116
1320c     F2 2E 02 F1 | 	add	local05, objptr
13210     17 15 C2 FA | 	rdbyte	arg02, local05
13214     4E 00 00 FF 
13218     B4 E4 85 F1 | 	sub	objptr, ##40116
1321c     0C 11 B1 FD | 	call	#_pspoke
13220     14 4E 05 F1 | 	add	fp, #20
13224     A7 2E 02 FB | 	rdlong	local05, fp
13228     01 2E 06 F1 | 	add	local05, #1
1322c     A7 2E 62 FC | 	wrlong	local05, fp
13230     14 4E 85 F1 | 	sub	fp, #20
13234     90 FF 9F FD | 	jmp	#LR__1538
13238                 | LR__1539
13238                 | LR__1540
13238     14 4E 05 F1 | 	add	fp, #20
1323c     A7 30 02 FB | 	rdlong	local06, fp
13240     18 2B 02 F6 | 	mov	local03, local06
13244     02 2A 66 F0 | 	shl	local03, #2
13248     50 00 00 FF 
1324c     C4 E4 05 F1 | 	add	objptr, ##41156
13250     F2 2A 02 F1 | 	add	local03, objptr
13254     02 30 66 F0 | 	shl	local06, #2
13258     F2 30 02 F1 | 	add	local06, objptr
1325c     18 31 02 FB | 	rdlong	local06, local06
13260     04 4E 05 F1 | 	add	fp, #4
13264     A7 2E 02 FB | 	rdlong	local05, fp
13268     17 31 02 F1 | 	add	local06, local05
1326c     15 31 62 FC | 	wrlong	local06, local03
13270     08 4E 85 F1 | 	sub	fp, #8
13274     A7 30 02 FB | 	rdlong	local06, fp
13278     01 30 06 F1 | 	add	local06, #1
1327c     A7 30 62 FC | 	wrlong	local06, fp
13280     10 4E 85 F1 | 	sub	fp, #16
13284     50 00 00 FF 
13288     C4 E4 85 F1 | 	sub	objptr, ##41156
1328c     34 FE 9F FD | 	jmp	#LR__1535
13290                 | LR__1541
13290                 | '   for i=0 to  amount/1024
13290     10 4E 05 F1 | 	add	fp, #16
13294     A7 00 68 FC | 	wrlong	#0, fp
13298     08 4E 85 F1 | 	sub	fp, #8
1329c     A7 2A 02 FB | 	rdlong	local03, fp
132a0     08 4E 85 F1 | 	sub	fp, #8
132a4     15 33 52 F6 | 	abs	local07, local03 wc
132a8     0A 32 46 F0 | 	shr	local07, #10
132ac     19 33 82 F6 | 	negc	local07, local07
132b0     01 32 06 F1 | 	add	local07, #1
132b4                 | LR__1542
132b4     10 4E 05 F1 | 	add	fp, #16
132b8     A7 2A 02 FB | 	rdlong	local03, fp
132bc     10 4E 85 F1 | 	sub	fp, #16
132c0     19 2B 52 F2 | 	cmps	local03, local07 wc
132c4     AC 01 90 3D |  if_ae	jmp	#LR__1548
132c8                 | '     get #channel,,block(0),amount,r
132c8     04 4E 05 F1 | 	add	fp, #4
132cc     A7 12 02 FB | 	rdlong	arg01, fp
132d0     4E 00 00 FF 
132d4     B4 E4 05 F1 | 	add	objptr, ##40116
132d8     F2 16 02 F6 | 	mov	arg03, objptr
132dc     4E 00 00 FF 
132e0     B4 E4 85 F1 | 	sub	objptr, ##40116
132e4     04 4E 05 F1 | 	add	fp, #4
132e8     A7 18 02 FB | 	rdlong	arg04, fp
132ec     08 4E 85 F1 | 	sub	fp, #8
132f0     00 14 06 F6 | 	mov	arg02, #0
132f4     01 1A 06 F6 | 	mov	arg05, #1
132f8     D4 56 B1 FD | 	call	#__system___basic_get
132fc     18 4E 05 F1 | 	add	fp, #24
13300     A7 FA 61 FC | 	wrlong	result1, fp
13304                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
13304     0C 4E 85 F1 | 	sub	fp, #12
13308     A7 28 02 FB | 	rdlong	local02, fp
1330c     0C 4E 85 F1 | 	sub	fp, #12
13310     00 04 00 FF 
13314     00 28 56 F2 | 	cmps	local02, ##524288 wc
13318     7C 00 90 3D |  if_ae	jmp	#LR__1544
1331c     14 4E 05 F1 | 	add	fp, #20
13320     A7 00 68 FC | 	wrlong	#0, fp
13324     04 4E 05 F1 | 	add	fp, #4
13328     A7 34 02 FB | 	rdlong	local08, fp
1332c     18 4E 85 F1 | 	sub	fp, #24
13330                 | LR__1543
13330     14 4E 05 F1 | 	add	fp, #20
13334     A7 28 02 FB | 	rdlong	local02, fp
13338     14 4E 85 F1 | 	sub	fp, #20
1333c     1A 29 52 F2 | 	cmps	local02, local08 wc
13340     D8 00 90 3D |  if_ae	jmp	#LR__1547
13344     0C 4E 05 F1 | 	add	fp, #12
13348     A7 12 02 FB | 	rdlong	arg01, fp
1334c     04 4E 05 F1 | 	add	fp, #4
13350     A7 30 02 FB | 	rdlong	local06, fp
13354     0A 30 66 F0 | 	shl	local06, #10
13358     18 13 02 F1 | 	add	arg01, local06
1335c     04 4E 05 F1 | 	add	fp, #4
13360     A7 30 02 FB | 	rdlong	local06, fp
13364     18 13 02 F1 | 	add	arg01, local06
13368     4E 00 00 FF 
1336c     B4 E4 05 F1 | 	add	objptr, ##40116
13370     F2 30 02 F1 | 	add	local06, objptr
13374     18 15 C2 FA | 	rdbyte	arg02, local06
13378     09 15 42 FC | 	wrbyte	arg02, arg01
1337c     4E 00 00 FF 
13380     B4 E4 85 F1 | 	sub	objptr, ##40116
13384     A7 30 02 FB | 	rdlong	local06, fp
13388     01 30 06 F1 | 	add	local06, #1
1338c     A7 30 62 FC | 	wrlong	local06, fp
13390     14 4E 85 F1 | 	sub	fp, #20
13394     98 FF 9F FD | 	jmp	#LR__1543
13398                 | LR__1544
13398     14 4E 05 F1 | 	add	fp, #20
1339c     A7 00 68 FC | 	wrlong	#0, fp
133a0     04 4E 05 F1 | 	add	fp, #4
133a4     A7 36 02 FB | 	rdlong	local09, fp
133a8     18 4E 85 F1 | 	sub	fp, #24
133ac                 | LR__1545
133ac     14 4E 05 F1 | 	add	fp, #20
133b0     A7 28 02 FB | 	rdlong	local02, fp
133b4     14 4E 85 F1 | 	sub	fp, #20
133b8     1B 29 52 F2 | 	cmps	local02, local09 wc
133bc     5C 00 90 3D |  if_ae	jmp	#LR__1546
133c0     0C 4E 05 F1 | 	add	fp, #12
133c4     A7 12 02 FB | 	rdlong	arg01, fp
133c8     04 4E 05 F1 | 	add	fp, #4
133cc     A7 34 02 FB | 	rdlong	local08, fp
133d0     0A 34 66 F0 | 	shl	local08, #10
133d4     1A 13 02 F1 | 	add	arg01, local08
133d8     04 4E 05 F1 | 	add	fp, #4
133dc     A7 34 02 FB | 	rdlong	local08, fp
133e0     1A 13 02 F1 | 	add	arg01, local08
133e4     14 4E 85 F1 | 	sub	fp, #20
133e8     4E 00 00 FF 
133ec     B4 E4 05 F1 | 	add	objptr, ##40116
133f0     F2 34 02 F1 | 	add	local08, objptr
133f4     1A 15 C2 FA | 	rdbyte	arg02, local08
133f8     4E 00 00 FF 
133fc     B4 E4 85 F1 | 	sub	objptr, ##40116
13400     28 0F B1 FD | 	call	#_pspoke
13404     14 4E 05 F1 | 	add	fp, #20
13408     A7 34 02 FB | 	rdlong	local08, fp
1340c     01 34 06 F1 | 	add	local08, #1
13410     A7 34 62 FC | 	wrlong	local08, fp
13414     14 4E 85 F1 | 	sub	fp, #20
13418     90 FF 9F FD | 	jmp	#LR__1545
1341c                 | LR__1546
1341c                 | LR__1547
1341c     14 4E 05 F1 | 	add	fp, #20
13420     A7 36 02 FB | 	rdlong	local09, fp
13424     1B 31 02 F6 | 	mov	local06, local09
13428     02 30 66 F0 | 	shl	local06, #2
1342c     50 00 00 FF 
13430     C4 E4 05 F1 | 	add	objptr, ##41156
13434     F2 30 02 F1 | 	add	local06, objptr
13438     02 36 66 F0 | 	shl	local09, #2
1343c     F2 36 02 F1 | 	add	local09, objptr
13440     1B 37 02 FB | 	rdlong	local09, local09
13444     04 4E 05 F1 | 	add	fp, #4
13448     A7 34 02 FB | 	rdlong	local08, fp
1344c     1A 37 02 F1 | 	add	local09, local08
13450     18 37 62 FC | 	wrlong	local09, local06
13454     08 4E 85 F1 | 	sub	fp, #8
13458     A7 36 02 FB | 	rdlong	local09, fp
1345c     01 36 06 F1 | 	add	local09, #1
13460     A7 36 62 FC | 	wrlong	local09, fp
13464     10 4E 85 F1 | 	sub	fp, #16
13468     50 00 00 FF 
1346c     C4 E4 85 F1 | 	sub	objptr, ##41156
13470     40 FE 9F FD | 	jmp	#LR__1542
13474                 | LR__1548
13474                 | LR__1549
13474     A7 F0 03 F6 | 	mov	ptra, fp
13478     B2 00 A0 FD | 	call	#popregs_
1347c                 | _do_get_ret
1347c     2D 00 64 FD | 	ret
13480                 | 
13480                 | ' 
13480                 | ' '-------------------- getcolor
13480                 | ' 
13480                 | ' sub do_getcolor
13480                 | _do_getcolor
13480     01 4A 05 F6 | 	mov	COUNT_, #1
13484     A8 00 A0 FD | 	call	#pushregs_
13488     10 F0 07 F1 | 	add	ptra, #16
1348c     4A 00 00 FF 
13490     80 E4 05 F1 | 	add	objptr, ##38016
13494     F2 26 02 FB | 	rdlong	local01, objptr
13498     13 17 02 F6 | 	mov	arg03, local01
1349c     01 16 66 F0 | 	shl	arg03, #1
134a0     13 17 02 F1 | 	add	arg03, local01
134a4     02 16 66 F0 | 	shl	arg03, #2
134a8     03 00 00 FF 
134ac     04 E4 85 F1 | 	sub	objptr, ##1540
134b0     F2 16 02 F1 | 	add	arg03, objptr
134b4     0B 17 02 FB | 	rdlong	arg03, arg03
134b8     0C 4E 05 F1 | 	add	fp, #12
134bc     A7 16 62 FC | 	wrlong	arg03, fp
134c0                 | ' 
134c0                 | ' numpar=compiledline(lineptr_e).result.uresult
134c0                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
134c0     0C 4E 85 F1 | 	sub	fp, #12
134c4     02 16 16 F2 | 	cmp	arg03, #2 wc
134c8     47 00 00 FF 
134cc     7C E4 85 F1 | 	sub	objptr, ##36476
134d0     0C 4E 05 C1 |  if_b	add	fp, #12
134d4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
134d8     0C 4E 85 C1 |  if_b	sub	fp, #12
134dc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
134e0     00 12 06 F6 | 	mov	arg01, #0
134e4     24 A3 B1 FD | 	call	#__system___getiolock_0620
134e8     FD 12 02 F6 | 	mov	arg01, result1
134ec     6C 46 B1 FD | 	call	#__system___lockmem
134f0     C0 01 00 FF 
134f4     F0 14 06 F6 | 	mov	arg02, ##@LR__6062
134f8     00 12 06 F6 | 	mov	arg01, #0
134fc     00 16 06 F6 | 	mov	arg03, #0
13500     50 53 B1 FD | 	call	#__system___basic_print_string
13504     00 12 06 F6 | 	mov	arg01, #0
13508     00 A3 B1 FD | 	call	#__system___getiolock_0620
1350c     FD 00 68 FC | 	wrlong	#0, result1
13510     27 12 06 F6 | 	mov	arg01, #39
13514     00 14 06 F6 | 	mov	arg02, #0
13518     E0 0B B1 FD | 	call	#_printerror
1351c     60 00 90 FD | 	jmp	#LR__1551
13520                 | LR__1550
13520     FC A2 BF FD | 	call	#_pop
13524     A7 FA 61 FC | 	wrlong	result1, fp
13528     04 4E 05 F1 | 	add	fp, #4
1352c     A7 FC 61 FC | 	wrlong	result2, fp
13530     04 4E 05 F1 | 	add	fp, #4
13534     A7 FE 61 FC | 	wrlong	result3, fp
13538     08 4E 85 F1 | 	sub	fp, #8
1353c     A7 12 02 F6 | 	mov	arg01, fp
13540     C0 A4 BF FD | 	call	#_converttoint
13544     FD 12 02 F6 | 	mov	arg01, result1
13548                 | ' 
13548                 | ' return long[palette_ptr+4*color]
13548     1C E4 05 F1 | 	add	objptr, #28
1354c     F2 FA 01 FB | 	rdlong	result1, objptr
13550     1C E4 85 F1 | 	sub	objptr, #28
13554     02 12 66 F0 | 	shl	arg01, #2
13558     09 FB 01 F1 | 	add	result1, arg01
1355c     FD FA 01 FB | 	rdlong	result1, result1
13560     08 FA C5 F0 | 	sar	result1, #8
13564     F8 FA 05 F4 | 	bitl	result1, #248
13568     A7 FA 61 FC | 	wrlong	result1, fp
1356c     08 4E 05 F1 | 	add	fp, #8
13570     A7 3A 68 FC | 	wrlong	#29, fp
13574     08 4E 85 F1 | 	sub	fp, #8
13578     A7 12 02 F6 | 	mov	arg01, fp
1357c     38 A3 BF FD | 	call	#_push
13580                 | LR__1551
13580     A7 F0 03 F6 | 	mov	ptra, fp
13584     B2 00 A0 FD | 	call	#popregs_
13588                 | _do_getcolor_ret
13588     2D 00 64 FD | 	ret
1358c                 | 
1358c                 | ' 
1358c                 | ' '-------------------- getenvsustain
1358c                 | ' 
1358c                 | ' sub do_getenvsustain
1358c                 | _do_getenvsustain
1358c     01 4A 05 F6 | 	mov	COUNT_, #1
13590     A8 00 A0 FD | 	call	#pushregs_
13594     10 F0 07 F1 | 	add	ptra, #16
13598     4A 00 00 FF 
1359c     80 E4 05 F1 | 	add	objptr, ##38016
135a0     F2 26 02 FB | 	rdlong	local01, objptr
135a4     13 17 02 F6 | 	mov	arg03, local01
135a8     01 16 66 F0 | 	shl	arg03, #1
135ac     13 17 02 F1 | 	add	arg03, local01
135b0     02 16 66 F0 | 	shl	arg03, #2
135b4     03 00 00 FF 
135b8     04 E4 85 F1 | 	sub	objptr, ##1540
135bc     F2 16 02 F1 | 	add	arg03, objptr
135c0     0B 17 02 FB | 	rdlong	arg03, arg03
135c4     0C 4E 05 F1 | 	add	fp, #12
135c8     A7 16 62 FC | 	wrlong	arg03, fp
135cc                 | ' 
135cc                 | ' numpar=compiledline(lineptr_e).result.uresult
135cc                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
135cc     0C 4E 85 F1 | 	sub	fp, #12
135d0     02 16 16 F2 | 	cmp	arg03, #2 wc
135d4     47 00 00 FF 
135d8     7C E4 85 F1 | 	sub	objptr, ##36476
135dc     0C 4E 05 C1 |  if_b	add	fp, #12
135e0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
135e4     0C 4E 85 C1 |  if_b	sub	fp, #12
135e8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1560
135ec     00 12 06 F6 | 	mov	arg01, #0
135f0     18 A2 B1 FD | 	call	#__system___getiolock_0620
135f4     FD 12 02 F6 | 	mov	arg01, result1
135f8     60 45 B1 FD | 	call	#__system___lockmem
135fc     C0 01 00 FF 
13600     FA 14 06 F6 | 	mov	arg02, ##@LR__6063
13604     00 12 06 F6 | 	mov	arg01, #0
13608     00 16 06 F6 | 	mov	arg03, #0
1360c     44 52 B1 FD | 	call	#__system___basic_print_string
13610     00 12 06 F6 | 	mov	arg01, #0
13614     F4 A1 B1 FD | 	call	#__system___getiolock_0620
13618     FD 00 68 FC | 	wrlong	#0, result1
1361c     27 12 06 F6 | 	mov	arg01, #39
13620     00 14 06 F6 | 	mov	arg02, #0
13624     D4 0A B1 FD | 	call	#_printerror
13628     64 00 90 FD | 	jmp	#LR__1561
1362c                 | LR__1560
1362c     F0 A1 BF FD | 	call	#_pop
13630     FD 26 02 F6 | 	mov	local01, result1
13634     FE 16 02 F6 | 	mov	arg03, result2
13638     A7 26 62 FC | 	wrlong	local01, fp
1363c     04 4E 05 F1 | 	add	fp, #4
13640     A7 16 62 FC | 	wrlong	arg03, fp
13644     04 4E 05 F1 | 	add	fp, #4
13648     A7 FE 61 FC | 	wrlong	result3, fp
1364c     08 4E 85 F1 | 	sub	fp, #8
13650     A7 12 02 F6 | 	mov	arg01, fp
13654     AC A3 BF FD | 	call	#_converttoint
13658     FD 26 02 F6 | 	mov	local01, result1
1365c     01 26 66 F0 | 	shl	local01, #1
13660     52 00 00 FF 
13664     EC E4 05 F1 | 	add	objptr, ##42220
13668     F2 26 02 F1 | 	add	local01, objptr
1366c     13 27 E2 FA | 	rdword	local01, local01
13670     A7 26 62 FC | 	wrlong	local01, fp
13674     08 4E 05 F1 | 	add	fp, #8
13678     A7 38 68 FC | 	wrlong	#28, fp
1367c     08 4E 85 F1 | 	sub	fp, #8
13680     A7 12 02 F6 | 	mov	arg01, fp
13684     52 00 00 FF 
13688     EC E4 85 F1 | 	sub	objptr, ##42220
1368c     28 A2 BF FD | 	call	#_push
13690                 | LR__1561
13690     A7 F0 03 F6 | 	mov	ptra, fp
13694     B2 00 A0 FD | 	call	#popregs_
13698                 | _do_getenvsustain_ret
13698     2D 00 64 FD | 	ret
1369c                 | 
1369c                 | ' 
1369c                 | ' '-------------------- getnotevalue
1369c                 | ' 
1369c                 | ' sub do_getnotevalue
1369c                 | _do_getnotevalue
1369c     01 4A 05 F6 | 	mov	COUNT_, #1
136a0     A8 00 A0 FD | 	call	#pushregs_
136a4     1C F0 07 F1 | 	add	ptra, #28
136a8     74 A1 BF FD | 	call	#_pop
136ac     FF 14 02 F6 | 	mov	arg02, result3
136b0     10 4E 05 F1 | 	add	fp, #16
136b4     A7 FA 61 FC | 	wrlong	result1, fp
136b8     04 4E 05 F1 | 	add	fp, #4
136bc     A7 FC 61 FC | 	wrlong	result2, fp
136c0     04 4E 05 F1 | 	add	fp, #4
136c4     A7 14 62 FC | 	wrlong	arg02, fp
136c8     08 4E 85 F1 | 	sub	fp, #8
136cc     A7 12 02 F6 | 	mov	arg01, fp
136d0     10 4E 85 F1 | 	sub	fp, #16
136d4     2C A3 BF FD | 	call	#_converttoint
136d8     FD 14 52 F6 | 	abs	arg02, result1 wc
136dc     0C 14 16 FD | 	qdiv	arg02, #12
136e0     0C 4E 05 F1 | 	add	fp, #12
136e4     A7 FA 61 FC | 	wrlong	result1, fp
136e8     14 00 00 FF 
136ec     D8 E4 05 F1 | 	add	objptr, ##10456
136f0     08 4E 85 F1 | 	sub	fp, #8
136f4     19 14 62 FD | 	getqy	arg02
136f8     0A 15 82 F6 | 	negc	arg02, arg02
136fc     02 14 66 F0 | 	shl	arg02, #2
13700     F2 14 02 F1 | 	add	arg02, objptr
13704     0A 15 02 FB | 	rdlong	arg02, arg02
13708     A7 14 62 FC | 	wrlong	arg02, fp
1370c     08 4E 05 F1 | 	add	fp, #8
13710     A7 14 02 FB | 	rdlong	arg02, fp
13714     0A 15 52 F6 | 	abs	arg02, arg02 wc
13718     0C 14 16 FD | 	qdiv	arg02, #12
1371c     0C 4E 85 F1 | 	sub	fp, #12
13720     14 00 00 FF 
13724     D8 E4 85 F1 | 	sub	objptr, ##10456
13728     18 14 62 FD | 	getqx	arg02
1372c     0A 13 82 F6 | 	negc	arg01, arg02
13730     09 13 52 F6 | 	abs	arg01, arg01 wc
13734     1F 26 C6 C9 |  if_b	decod	local01, #31
13738     00 26 06 36 |  if_ae	mov	local01, #0
1373c     94 6E B1 FD | 	call	#__system___float_fromuns
13740     13 FB 61 F5 | 	xor	result1, local01
13744     08 4E 05 F1 | 	add	fp, #8
13748     A7 FA 61 FC | 	wrlong	result1, fp
1374c     FD 14 02 F6 | 	mov	arg02, result1
13750     08 4E 85 F1 | 	sub	fp, #8
13754     1E 12 C6 F9 | 	decod	arg01, #30
13758     88 81 B1 FD | 	call	#__system____builtin_powf
1375c     FD 12 02 F6 | 	mov	arg01, result1
13760     04 4E 05 F1 | 	add	fp, #4
13764     A7 14 02 FB | 	rdlong	arg02, fp
13768     04 4E 85 F1 | 	sub	fp, #4
1376c     68 72 B1 FD | 	call	#__system___float_mul
13770     A7 FA 61 FC | 	wrlong	result1, fp
13774     10 4E 05 F1 | 	add	fp, #16
13778     A7 FA 61 FC | 	wrlong	result1, fp
1377c     08 4E 05 F1 | 	add	fp, #8
13780     A7 3C 68 FC | 	wrlong	#30, fp
13784     08 4E 85 F1 | 	sub	fp, #8
13788     A7 12 02 F6 | 	mov	arg01, fp
1378c     10 4E 85 F1 | 	sub	fp, #16
13790     24 A1 BF FD | 	call	#_push
13794     A7 F0 03 F6 | 	mov	ptra, fp
13798     B2 00 A0 FD | 	call	#popregs_
1379c                 | _do_getnotevalue_ret
1379c     2D 00 64 FD | 	ret
137a0                 | 
137a0                 | ' 
137a0                 | ' '-------------------- getpixel
137a0                 | ' 
137a0                 | ' sub do_getpixel
137a0                 | _do_getpixel
137a0     00 4A 05 F6 | 	mov	COUNT_, #0
137a4     A8 00 A0 FD | 	call	#pushregs_
137a8     24 F0 07 F1 | 	add	ptra, #36
137ac     4A 00 00 FF 
137b0     80 E4 05 F1 | 	add	objptr, ##38016
137b4     F2 16 02 FB | 	rdlong	arg03, objptr
137b8     0B 15 02 F6 | 	mov	arg02, arg03
137bc     01 14 66 F0 | 	shl	arg02, #1
137c0     0B 15 02 F1 | 	add	arg02, arg03
137c4     02 14 66 F0 | 	shl	arg02, #2
137c8     03 00 00 FF 
137cc     04 E4 85 F1 | 	sub	objptr, ##1540
137d0     F2 14 02 F1 | 	add	arg02, objptr
137d4     0A 17 02 FB | 	rdlong	arg03, arg02
137d8     18 4E 05 F1 | 	add	fp, #24
137dc     A7 16 62 FC | 	wrlong	arg03, fp
137e0                 | ' 
137e0                 | ' numpar=compiledline(lineptr_e).result.uresult
137e0                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
137e0     18 4E 85 F1 | 	sub	fp, #24
137e4     02 16 0E F2 | 	cmp	arg03, #2 wz
137e8     47 00 00 FF 
137ec     7C E4 85 F1 | 	sub	objptr, ##36476
137f0     40 00 90 AD |  if_e	jmp	#LR__1570
137f4     00 12 06 F6 | 	mov	arg01, #0
137f8     10 A0 B1 FD | 	call	#__system___getiolock_0620
137fc     FD 12 02 F6 | 	mov	arg01, result1
13800     58 43 B1 FD | 	call	#__system___lockmem
13804     C0 01 00 FF 
13808     0A 15 06 F6 | 	mov	arg02, ##@LR__6064
1380c     00 12 06 F6 | 	mov	arg01, #0
13810     00 16 06 F6 | 	mov	arg03, #0
13814     3C 50 B1 FD | 	call	#__system___basic_print_string
13818     00 12 06 F6 | 	mov	arg01, #0
1381c     EC 9F B1 FD | 	call	#__system___getiolock_0620
13820     FD 00 68 FC | 	wrlong	#0, result1
13824     27 12 06 F6 | 	mov	arg01, #39
13828     00 14 06 F6 | 	mov	arg02, #0
1382c     CC 08 B1 FD | 	call	#_printerror
13830     B4 00 90 FD | 	jmp	#LR__1571
13834                 | LR__1570
13834     E8 9F BF FD | 	call	#_pop
13838     FD 16 02 F6 | 	mov	arg03, result1
1383c     FE 14 02 F6 | 	mov	arg02, result2
13840     FF 12 02 F6 | 	mov	arg01, result3
13844     0C 4E 05 F1 | 	add	fp, #12
13848     A7 16 62 FC | 	wrlong	arg03, fp
1384c     04 4E 05 F1 | 	add	fp, #4
13850     A7 14 62 FC | 	wrlong	arg02, fp
13854     04 4E 05 F1 | 	add	fp, #4
13858     A7 12 62 FC | 	wrlong	arg01, fp
1385c     14 4E 85 F1 | 	sub	fp, #20
13860     BC 9F BF FD | 	call	#_pop
13864     FF 16 02 F6 | 	mov	arg03, result3
13868     A7 FA 61 FC | 	wrlong	result1, fp
1386c     04 4E 05 F1 | 	add	fp, #4
13870     A7 FC 61 FC | 	wrlong	result2, fp
13874     04 4E 05 F1 | 	add	fp, #4
13878     A7 16 62 FC | 	wrlong	arg03, fp
1387c     08 4E 85 F1 | 	sub	fp, #8
13880     A7 12 02 F6 | 	mov	arg01, fp
13884     7C A1 BF FD | 	call	#_converttoint
13888     1C 4E 05 F1 | 	add	fp, #28
1388c     A7 FA 61 FC | 	wrlong	result1, fp
13890     10 4E 85 F1 | 	sub	fp, #16
13894     A7 12 02 F6 | 	mov	arg01, fp
13898     0C 4E 85 F1 | 	sub	fp, #12
1389c     64 A1 BF FD | 	call	#_converttoint
138a0     FD 16 02 F6 | 	mov	arg03, result1
138a4     20 4E 05 F1 | 	add	fp, #32
138a8     A7 16 62 FC | 	wrlong	arg03, fp
138ac     F2 12 02 FB | 	rdlong	arg01, objptr
138b0     04 4E 85 F1 | 	sub	fp, #4
138b4     A7 FE 01 FB | 	rdlong	result3, fp
138b8     FF 12 02 F1 | 	add	arg01, result3
138bc     1C 4E 85 F1 | 	sub	fp, #28
138c0     0A 16 66 F0 | 	shl	arg03, #10
138c4     0B 13 02 F1 | 	add	arg01, arg03
138c8     A8 0A B1 FD | 	call	#_pspeek
138cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
138d0     A7 FA 61 FC | 	wrlong	result1, fp
138d4     08 4E 05 F1 | 	add	fp, #8
138d8     A7 3A 68 FC | 	wrlong	#29, fp
138dc     08 4E 85 F1 | 	sub	fp, #8
138e0     A7 12 02 F6 | 	mov	arg01, fp
138e4     D0 9F BF FD | 	call	#_push
138e8                 | LR__1571
138e8     A7 F0 03 F6 | 	mov	ptra, fp
138ec     B2 00 A0 FD | 	call	#popregs_
138f0                 | _do_getpixel_ret
138f0     2D 00 64 FD | 	ret
138f4                 | 
138f4                 | ' 
138f4                 | ' '-------------------- gettime
138f4                 | ' 
138f4                 | ' sub do_gettime
138f4                 | _do_gettime
138f4     02 4A 05 F6 | 	mov	COUNT_, #2
138f8     A8 00 A0 FD | 	call	#pushregs_
138fc     14 F0 07 F1 | 	add	ptra, #20
13900                 | ' 
13900                 | ' const asm 
13900     1A 26 72 FD | 	getct	local01 wc
13904     1A 28 62 FD | 	getct	local02
13908                 | ' return hi1, lo1
13908     14 FD 01 F6 | 	mov	result2, local02
1390c     A7 26 62 FC | 	wrlong	local01, fp
13910     04 4E 05 F1 | 	add	fp, #4
13914     A7 FC 61 FC | 	wrlong	result2, fp
13918     0C 4E 05 F1 | 	add	fp, #12
1391c     A7 3A 68 FC | 	wrlong	#29, fp
13920     0C 4E 85 F1 | 	sub	fp, #12
13924     A7 12 02 FB | 	rdlong	arg01, fp
13928     04 4E 05 F1 | 	add	fp, #4
1392c     A7 12 62 FC | 	wrlong	arg01, fp
13930     08 4E 85 F1 | 	sub	fp, #8
13934     A7 12 02 FB | 	rdlong	arg01, fp
13938     0C 4E 05 F1 | 	add	fp, #12
1393c     A7 12 62 FC | 	wrlong	arg01, fp
13940     04 4E 85 F1 | 	sub	fp, #4
13944     A7 12 02 F6 | 	mov	arg01, fp
13948     08 4E 85 F1 | 	sub	fp, #8
1394c     68 9F BF FD | 	call	#_push
13950     A7 F0 03 F6 | 	mov	ptra, fp
13954     B2 00 A0 FD | 	call	#popregs_
13958                 | _do_gettime_ret
13958     2D 00 64 FD | 	ret
1395c                 | 
1395c                 | ' 
1395c                 | ' '-------------------- gosub
1395c                 | ' 
1395c                 | ' sub do_gosub()
1395c                 | _do_gosub
1395c     50 00 00 FF 
13960     34 E5 05 F1 | 	add	objptr, ##41268
13964     F2 00 02 FB | 	rdlong	_var01, objptr
13968     01 00 06 F1 | 	add	_var01, #1
1396c     F2 00 62 FC | 	wrlong	_var01, objptr
13970                 | ' gosubtop+=1
13970                 | ' if compiledline(lineptr_e+1).result_type=token_end then
13970     06 00 00 FF 
13974     B4 E4 85 F1 | 	sub	objptr, ##3252
13978     F2 00 02 FB | 	rdlong	_var01, objptr
1397c     01 00 06 F1 | 	add	_var01, #1
13980     00 03 02 F6 | 	mov	_var02, _var01
13984     01 02 66 F0 | 	shl	_var02, #1
13988     00 03 02 F1 | 	add	_var02, _var01
1398c     02 02 66 F0 | 	shl	_var02, #2
13990     03 00 00 FF 
13994     04 E4 85 F1 | 	sub	objptr, ##1540
13998     F2 02 02 F1 | 	add	_var02, objptr
1399c     08 02 06 F1 | 	add	_var02, #8
139a0     01 03 02 FB | 	rdlong	_var02, _var02
139a4     FE 03 0E F2 | 	cmp	_var02, #510 wz
139a8     47 00 00 FF 
139ac     7C E4 85 F1 | 	sub	objptr, ##36476
139b0     58 00 90 5D |  if_ne	jmp	#LR__1580
139b4     50 00 00 FF 
139b8     34 E5 05 F1 | 	add	objptr, ##41268
139bc     F2 02 02 FB | 	rdlong	_var02, objptr
139c0     03 02 66 F0 | 	shl	_var02, #3
139c4     03 00 00 FF 
139c8     88 E5 85 F1 | 	sub	objptr, ##1928
139cc     F2 02 02 F1 | 	add	_var02, objptr
139d0     03 00 00 FF 
139d4     0C E5 05 F1 | 	add	objptr, ##1804
139d8     F2 00 02 FB | 	rdlong	_var01, objptr
139dc     01 01 62 FC | 	wrlong	_var01, _var02
139e0     7C E4 05 F1 | 	add	objptr, #124
139e4     F2 02 02 FB | 	rdlong	_var02, objptr
139e8     03 02 66 F0 | 	shl	_var02, #3
139ec     03 00 00 FF 
139f0     88 E5 85 F1 | 	sub	objptr, ##1928
139f4     F2 02 02 F1 | 	add	_var02, objptr
139f8     04 02 06 F1 | 	add	_var02, #4
139fc     01 01 68 FC | 	wrlong	#0, _var02
13a00     4C 00 00 FF 
13a04     AC E5 85 F1 | 	sub	objptr, ##39340
13a08     64 00 90 FD | 	jmp	#LR__1581
13a0c                 | LR__1580
13a0c     50 00 00 FF 
13a10     34 E5 05 F1 | 	add	objptr, ##41268
13a14     F2 02 02 FB | 	rdlong	_var02, objptr
13a18     03 02 66 F0 | 	shl	_var02, #3
13a1c     03 00 00 FF 
13a20     88 E5 85 F1 | 	sub	objptr, ##1928
13a24     F2 02 02 F1 | 	add	_var02, objptr
13a28     03 00 00 FF 
13a2c     14 E5 05 F1 | 	add	objptr, ##1812
13a30     F2 00 02 FB | 	rdlong	_var01, objptr
13a34     01 01 62 FC | 	wrlong	_var01, _var02
13a38     74 E4 05 F1 | 	add	objptr, #116
13a3c     F2 02 02 FB | 	rdlong	_var02, objptr
13a40     03 02 66 F0 | 	shl	_var02, #3
13a44     03 00 00 FF 
13a48     88 E5 85 F1 | 	sub	objptr, ##1928
13a4c     F2 02 02 F1 | 	add	_var02, objptr
13a50     02 00 00 FF 
13a54     2C E5 85 F1 | 	sub	objptr, ##1324
13a58     F2 00 02 FB | 	rdlong	_var01, objptr
13a5c     4A 00 00 FF 
13a60     80 E4 85 F1 | 	sub	objptr, ##38016
13a64     02 00 06 F1 | 	add	_var01, #2
13a68     04 02 06 F1 | 	add	_var02, #4
13a6c     01 01 62 FC | 	wrlong	_var01, _var02
13a70                 | LR__1581
13a70                 | _do_gosub_ret
13a70     2D 00 64 FD | 	ret
13a74                 | 
13a74                 | ' 
13a74                 | ' '--------------------- goto
13a74                 | ' 
13a74                 | ' '------- fast goto
13a74                 | ' 
13a74                 | ' sub do_fast_goto
13a74                 | _do_fast_goto
13a74     02 4A 05 F6 | 	mov	COUNT_, #2
13a78     A8 00 A0 FD | 	call	#pushregs_
13a7c                 | _do_fast_goto_enter
13a7c     4A 00 00 FF 
13a80     80 E4 05 F1 | 	add	objptr, ##38016
13a84     F2 12 02 FB | 	rdlong	arg01, objptr
13a88     09 27 02 F6 | 	mov	local01, arg01
13a8c     01 26 66 F0 | 	shl	local01, #1
13a90     09 27 02 F1 | 	add	local01, arg01
13a94     02 26 66 F0 | 	shl	local01, #2
13a98     03 00 00 FF 
13a9c     04 E4 85 F1 | 	sub	objptr, ##1540
13aa0     F2 26 02 F1 | 	add	local01, objptr
13aa4     13 29 02 FB | 	rdlong	local02, local01
13aa8     14 13 02 F6 | 	mov	arg01, local02
13aac     47 00 00 FF 
13ab0     7C E4 85 F1 | 	sub	objptr, ##36476
13ab4     14 09 B1 FD | 	call	#_pslpeek
13ab8     FD 12 02 F6 | 	mov	arg01, result1
13abc                 | ' 
13abc                 | ' testptr=compiledline(lineptr_e).result.uresult
13abc                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
13abc                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
13abc     4A 00 00 FF 
13ac0     80 E4 05 F1 | 	add	objptr, ##38016
13ac4     F2 FA 01 FB | 	rdlong	result1, objptr
13ac8     FD 26 02 F6 | 	mov	local01, result1
13acc     01 26 66 F0 | 	shl	local01, #1
13ad0     FD 26 02 F1 | 	add	local01, result1
13ad4     02 26 66 F0 | 	shl	local01, #2
13ad8     03 00 00 FF 
13adc     04 E4 85 F1 | 	sub	objptr, ##1540
13ae0     F2 26 02 F1 | 	add	local01, objptr
13ae4     04 26 06 F1 | 	add	local01, #4
13ae8     13 27 02 FB | 	rdlong	local01, local01
13aec     13 13 0A F2 | 	cmp	arg01, local01 wz
13af0     47 00 00 FF 
13af4     7C E4 85 F1 | 	sub	objptr, ##36476
13af8     58 00 90 5D |  if_ne	jmp	#LR__1590
13afc     50 00 00 FF 
13b00     B8 E4 05 F1 | 	add	objptr, ##41144
13b04     F2 28 62 FC | 	wrlong	local02, objptr
13b08     06 00 00 FF 
13b0c     3C E4 85 F1 | 	sub	objptr, ##3132
13b10     F2 28 02 FB | 	rdlong	local02, objptr
13b14     01 28 86 F1 | 	sub	local02, #1
13b18     04 E4 05 F1 | 	add	objptr, #4
13b1c     F2 28 62 FC | 	wrlong	local02, objptr
13b20                 | '   runptr=testptr
13b20                 | '   lineptr_e=lineptr-1
13b20                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
13b20     06 00 00 FF 
13b24     84 E4 05 F1 | 	add	objptr, ##3204
13b28     F2 28 02 FB | 	rdlong	local02, objptr
13b2c     50 00 00 FF 
13b30     04 E5 85 F1 | 	sub	objptr, ##41220
13b34     FF FF 3F FF 
13b38     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13b3c     50 00 00 AF 
13b40     04 E5 05 A1 |  if_e	add	objptr, ##41220
13b44     F2 00 68 AC |  if_e	wrlong	#0, objptr
13b48     50 00 00 AF 
13b4c     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13b50     04 00 90 FD | 	jmp	#LR__1591
13b54                 | LR__1590
13b54     0C 00 B0 FD | 	call	#_do_find_goto
13b58                 | LR__1591
13b58     A7 F0 03 F6 | 	mov	ptra, fp
13b5c     B2 00 A0 FD | 	call	#popregs_
13b60                 | _do_fast_goto_ret
13b60     2D 00 64 FD | 	ret
13b64                 | 
13b64                 | ' 
13b64                 | ' '------- find goto  
13b64                 | ' 
13b64                 | ' sub do_find_goto
13b64                 | _do_find_goto
13b64     03 4A 05 F6 | 	mov	COUNT_, #3
13b68     A8 00 A0 FD | 	call	#pushregs_
13b6c     24 F0 07 F1 | 	add	ptra, #36
13b70                 | _do_find_goto_enter
13b70     4A 00 00 FF 
13b74     80 E4 05 F1 | 	add	objptr, ##38016
13b78     F2 26 02 FB | 	rdlong	local01, objptr
13b7c     13 29 02 F6 | 	mov	local02, local01
13b80     01 28 66 F0 | 	shl	local02, #1
13b84     13 29 02 F1 | 	add	local02, local01
13b88     02 28 66 F0 | 	shl	local02, #2
13b8c     03 00 00 FF 
13b90     04 E4 85 F1 | 	sub	objptr, ##1540
13b94     F2 28 02 F1 | 	add	local02, objptr
13b98     04 28 06 F1 | 	add	local02, #4
13b9c     14 29 02 FB | 	rdlong	local02, local02
13ba0     A7 28 62 FC | 	wrlong	local02, fp
13ba4     03 00 00 FF 
13ba8     0C E4 05 F1 | 	add	objptr, ##1548
13bac     F2 2A 02 FB | 	rdlong	local03, objptr
13bb0     4A 00 00 FF 
13bb4     88 E4 85 F1 | 	sub	objptr, ##38024
13bb8     04 4E 05 F1 | 	add	fp, #4
13bbc     A7 2A 62 FC | 	wrlong	local03, fp
13bc0     04 4E 85 F1 | 	sub	fp, #4
13bc4                 | ' 
13bc4                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
13bc4                 | ' gotoptr=programstart
13bc4                 | ' do
13bc4                 | LR__1600
13bc4     0C 4E 05 F1 | 	add	fp, #12
13bc8     A7 12 02 F6 | 	mov	arg01, fp
13bcc     08 4E 85 F1 | 	sub	fp, #8
13bd0     A7 14 02 FB | 	rdlong	arg02, fp
13bd4     04 4E 85 F1 | 	sub	fp, #4
13bd8     18 16 06 F6 | 	mov	arg03, #24
13bdc     0B 00 00 FF 
13be0     CC E4 05 F1 | 	add	objptr, ##5836
13be4     D0 32 B1 FD | 	call	#_psram_spin2_read1
13be8     0B 00 00 FF 
13bec     CC E4 85 F1 | 	sub	objptr, ##5836
13bf0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13bf0                 | '   if gotoheader(0)<>$FFFFFFFF then
13bf0     0C 4E 05 F1 | 	add	fp, #12
13bf4     A7 2A 02 FB | 	rdlong	local03, fp
13bf8     0C 4E 85 F1 | 	sub	fp, #12
13bfc     FF FF 7F FF 
13c00     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
13c04     24 00 90 AD |  if_e	jmp	#LR__1601
13c08     04 4E 05 F1 | 	add	fp, #4
13c0c     A7 2A 02 FB | 	rdlong	local03, fp
13c10     04 4E 05 F1 | 	add	fp, #4
13c14     A7 2A 62 FC | 	wrlong	local03, fp
13c18     18 4E 05 F1 | 	add	fp, #24
13c1c     A7 2A 02 FB | 	rdlong	local03, fp
13c20     1C 4E 85 F1 | 	sub	fp, #28
13c24     A7 2A 62 FC | 	wrlong	local03, fp
13c28     04 4E 85 F1 | 	sub	fp, #4
13c2c                 | LR__1601
13c2c     20 4E 05 F1 | 	add	fp, #32
13c30     A7 2A 02 FB | 	rdlong	local03, fp
13c34     20 4E 85 F1 | 	sub	fp, #32
13c38     FF FF 3F FF 
13c3c     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
13c40     0C 4E 05 51 |  if_ne	add	fp, #12
13c44     A7 26 02 5B |  if_ne	rdlong	local01, fp
13c48     0C 4E 85 51 |  if_ne	sub	fp, #12
13c4c     FF FF 7F 5F 
13c50     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13c54     18 00 90 AD |  if_e	jmp	#LR__1602
13c58     0C 4E 05 F1 | 	add	fp, #12
13c5c     A7 2A 02 FB | 	rdlong	local03, fp
13c60     0C 4E 85 F1 | 	sub	fp, #12
13c64     A7 28 02 FB | 	rdlong	local02, fp
13c68     14 2B 0A F2 | 	cmp	local03, local02 wz
13c6c     54 FF 9F 5D |  if_ne	jmp	#LR__1600
13c70                 | LR__1602
13c70                 | ' 
13c70                 | ' if gotoheader(0)=gotoline then
13c70     0C 4E 05 F1 | 	add	fp, #12
13c74     A7 2A 02 FB | 	rdlong	local03, fp
13c78     0C 4E 85 F1 | 	sub	fp, #12
13c7c     A7 26 02 FB | 	rdlong	local01, fp
13c80     13 2B 0A F2 | 	cmp	local03, local01 wz
13c84     D8 00 90 5D |  if_ne	jmp	#LR__1603
13c88     4A 00 00 FF 
13c8c     80 E4 05 F1 | 	add	objptr, ##38016
13c90     F2 26 02 FB | 	rdlong	local01, objptr
13c94     13 29 02 F6 | 	mov	local02, local01
13c98     01 28 66 F0 | 	shl	local02, #1
13c9c     13 29 02 F1 | 	add	local02, local01
13ca0     02 28 66 F0 | 	shl	local02, #2
13ca4     03 00 00 FF 
13ca8     04 E4 85 F1 | 	sub	objptr, ##1540
13cac     F2 28 02 F1 | 	add	local02, objptr
13cb0     08 4E 05 F1 | 	add	fp, #8
13cb4     A7 2A 02 FB | 	rdlong	local03, fp
13cb8     14 2B 62 FC | 	wrlong	local03, local02
13cbc     03 00 00 FF 
13cc0     04 E4 05 F1 | 	add	objptr, ##1540
13cc4     F2 26 02 FB | 	rdlong	local01, objptr
13cc8     13 29 02 F6 | 	mov	local02, local01
13ccc     01 28 66 F0 | 	shl	local02, #1
13cd0     13 29 02 F1 | 	add	local02, local01
13cd4     02 28 66 F0 | 	shl	local02, #2
13cd8     03 00 00 FF 
13cdc     04 E4 85 F1 | 	sub	objptr, ##1540
13ce0     F2 28 02 F1 | 	add	local02, objptr
13ce4     08 28 06 F1 | 	add	local02, #8
13ce8     14 9D 68 FC | 	wrlong	#78, local02
13cec     03 00 00 FF 
13cf0     04 E4 05 F1 | 	add	objptr, ##1540
13cf4     F2 28 02 FB | 	rdlong	local02, objptr
13cf8     14 13 02 F6 | 	mov	arg01, local02
13cfc     01 12 66 F0 | 	shl	arg01, #1
13d00     14 13 02 F1 | 	add	arg01, local02
13d04     02 12 66 F0 | 	shl	arg01, #2
13d08     03 00 00 FF 
13d0c     04 E4 85 F1 | 	sub	objptr, ##1540
13d10     F2 12 02 F1 | 	add	arg01, objptr
13d14     09 00 00 FF 
13d18     44 E4 05 F1 | 	add	objptr, ##4676
13d1c     F2 14 02 FB | 	rdlong	arg02, objptr
13d20     02 2A 06 F6 | 	mov	local03, #2
13d24     14 2B 02 F1 | 	add	local03, local02
13d28     0B 00 00 FF 
13d2c     5C E4 85 F1 | 	sub	objptr, ##5724
13d30     F2 16 02 FB | 	rdlong	arg03, objptr
13d34     0B 2B 02 FD | 	qmul	local03, arg03
13d38     08 4E 85 F1 | 	sub	fp, #8
13d3c     39 00 00 FF 
13d40     98 E5 85 F1 | 	sub	objptr, ##29592
13d44     18 2A 62 FD | 	getqx	local03
13d48     15 15 02 F1 | 	add	arg02, local03
13d4c     04 32 B1 FD | 	call	#_psram_spin2_write
13d50     0B 00 00 FF 
13d54     CC E4 85 F1 | 	sub	objptr, ##5836
13d58     18 FD BF FD | 	call	#_do_fast_goto
13d5c     0C 00 90 FD | 	jmp	#LR__1604
13d60                 | LR__1603
13d60     26 12 06 F6 | 	mov	arg01, #38
13d64     00 14 06 F6 | 	mov	arg02, #0
13d68     90 03 B1 FD | 	call	#_printerror
13d6c                 | LR__1604
13d6c     A7 F0 03 F6 | 	mov	ptra, fp
13d70     B2 00 A0 FD | 	call	#popregs_
13d74                 | _do_find_goto_ret
13d74     2D 00 64 FD | 	ret
13d78                 | 
13d78                 | ' 
13d78                 | ' '------- slow goto  
13d78                 | ' 
13d78                 | ' sub do_slow_goto
13d78                 | _do_slow_goto
13d78     02 4A 05 F6 | 	mov	COUNT_, #2
13d7c     A8 00 A0 FD | 	call	#pushregs_
13d80     30 F0 07 F1 | 	add	ptra, #48
13d84     98 9A BF FD | 	call	#_pop
13d88     FF 26 02 F6 | 	mov	local01, result3
13d8c     24 4E 05 F1 | 	add	fp, #36
13d90     A7 FA 61 FC | 	wrlong	result1, fp
13d94     04 4E 05 F1 | 	add	fp, #4
13d98     A7 FC 61 FC | 	wrlong	result2, fp
13d9c     04 4E 05 F1 | 	add	fp, #4
13da0     A7 26 62 FC | 	wrlong	local01, fp
13da4     08 4E 85 F1 | 	sub	fp, #8
13da8     A7 12 02 F6 | 	mov	arg01, fp
13dac     24 4E 85 F1 | 	sub	fp, #36
13db0     50 9C BF FD | 	call	#_converttoint
13db4     A7 FA 61 FC | 	wrlong	result1, fp
13db8     4A 00 00 FF 
13dbc     88 E4 05 F1 | 	add	objptr, ##38024
13dc0     F2 28 02 FB | 	rdlong	local02, objptr
13dc4     4A 00 00 FF 
13dc8     88 E4 85 F1 | 	sub	objptr, ##38024
13dcc     04 4E 05 F1 | 	add	fp, #4
13dd0     A7 28 62 FC | 	wrlong	local02, fp
13dd4     04 4E 85 F1 | 	sub	fp, #4
13dd8                 | ' 
13dd8                 | ' t1=pop() : gotoline=converttoint(t1)
13dd8                 | ' gotoptr=programstart
13dd8                 | ' do
13dd8                 | LR__1610
13dd8     0C 4E 05 F1 | 	add	fp, #12
13ddc     A7 12 02 F6 | 	mov	arg01, fp
13de0     08 4E 85 F1 | 	sub	fp, #8
13de4     A7 14 02 FB | 	rdlong	arg02, fp
13de8     04 4E 85 F1 | 	sub	fp, #4
13dec     18 16 06 F6 | 	mov	arg03, #24
13df0     0B 00 00 FF 
13df4     CC E4 05 F1 | 	add	objptr, ##5836
13df8     BC 30 B1 FD | 	call	#_psram_spin2_read1
13dfc     0B 00 00 FF 
13e00     CC E4 85 F1 | 	sub	objptr, ##5836
13e04                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13e04                 | '   if gotoheader(0)<>$FFFFFFFF then
13e04     0C 4E 05 F1 | 	add	fp, #12
13e08     A7 28 02 FB | 	rdlong	local02, fp
13e0c     0C 4E 85 F1 | 	sub	fp, #12
13e10     FF FF 7F FF 
13e14     FF 29 0E F2 | 	cmp	local02, ##-1 wz
13e18     24 00 90 AD |  if_e	jmp	#LR__1611
13e1c     04 4E 05 F1 | 	add	fp, #4
13e20     A7 28 02 FB | 	rdlong	local02, fp
13e24     04 4E 05 F1 | 	add	fp, #4
13e28     A7 28 62 FC | 	wrlong	local02, fp
13e2c     18 4E 05 F1 | 	add	fp, #24
13e30     A7 28 02 FB | 	rdlong	local02, fp
13e34     1C 4E 85 F1 | 	sub	fp, #28
13e38     A7 28 62 FC | 	wrlong	local02, fp
13e3c     04 4E 85 F1 | 	sub	fp, #4
13e40                 | LR__1611
13e40     20 4E 05 F1 | 	add	fp, #32
13e44     A7 28 02 FB | 	rdlong	local02, fp
13e48     20 4E 85 F1 | 	sub	fp, #32
13e4c     FF FF 3F FF 
13e50     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13e54     0C 4E 05 51 |  if_ne	add	fp, #12
13e58     A7 26 02 5B |  if_ne	rdlong	local01, fp
13e5c     0C 4E 85 51 |  if_ne	sub	fp, #12
13e60     FF FF 7F 5F 
13e64     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13e68     18 00 90 AD |  if_e	jmp	#LR__1612
13e6c     0C 4E 05 F1 | 	add	fp, #12
13e70     A7 28 02 FB | 	rdlong	local02, fp
13e74     0C 4E 85 F1 | 	sub	fp, #12
13e78     A7 16 02 FB | 	rdlong	arg03, fp
13e7c     0B 29 0A F2 | 	cmp	local02, arg03 wz
13e80     54 FF 9F 5D |  if_ne	jmp	#LR__1610
13e84                 | LR__1612
13e84                 | ' if gotoheader(0)=gotoline then  
13e84     0C 4E 05 F1 | 	add	fp, #12
13e88     A7 28 02 FB | 	rdlong	local02, fp
13e8c     0C 4E 85 F1 | 	sub	fp, #12
13e90     A7 26 02 FB | 	rdlong	local01, fp
13e94     13 29 0A F2 | 	cmp	local02, local01 wz
13e98     60 00 90 5D |  if_ne	jmp	#LR__1613
13e9c     08 4E 05 F1 | 	add	fp, #8
13ea0     A7 28 02 FB | 	rdlong	local02, fp
13ea4     08 4E 85 F1 | 	sub	fp, #8
13ea8     50 00 00 FF 
13eac     B8 E4 05 F1 | 	add	objptr, ##41144
13eb0     F2 28 62 FC | 	wrlong	local02, objptr
13eb4     06 00 00 FF 
13eb8     3C E4 85 F1 | 	sub	objptr, ##3132
13ebc     F2 28 02 FB | 	rdlong	local02, objptr
13ec0     01 28 86 F1 | 	sub	local02, #1
13ec4     04 E4 05 F1 | 	add	objptr, #4
13ec8     F2 28 62 FC | 	wrlong	local02, objptr
13ecc                 | '    runptr=oldgotoptr
13ecc                 | '    lineptr_e=lineptr-1
13ecc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
13ecc     06 00 00 FF 
13ed0     84 E4 05 F1 | 	add	objptr, ##3204
13ed4     F2 28 02 FB | 	rdlong	local02, objptr
13ed8     50 00 00 FF 
13edc     04 E5 85 F1 | 	sub	objptr, ##41220
13ee0     FF FF 3F FF 
13ee4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13ee8     50 00 00 AF 
13eec     04 E5 05 A1 |  if_e	add	objptr, ##41220
13ef0     F2 00 68 AC |  if_e	wrlong	#0, objptr
13ef4     50 00 00 AF 
13ef8     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13efc                 | LR__1613
13efc     A7 F0 03 F6 | 	mov	ptra, fp
13f00     B2 00 A0 FD | 	call	#popregs_
13f04                 | _do_slow_goto_ret
13f04     2D 00 64 FD | 	ret
13f08                 | 
13f08                 | ' 
13f08                 | ' ' ----------------  hex$
13f08                 | ' 
13f08                 | ' sub do_hex
13f08                 | _do_hex
13f08     01 4A 05 F6 | 	mov	COUNT_, #1
13f0c     A8 00 A0 FD | 	call	#pushregs_
13f10     18 F0 07 F1 | 	add	ptra, #24
13f14     4A 00 00 FF 
13f18     80 E4 05 F1 | 	add	objptr, ##38016
13f1c     F2 26 02 FB | 	rdlong	local01, objptr
13f20     13 17 02 F6 | 	mov	arg03, local01
13f24     01 16 66 F0 | 	shl	arg03, #1
13f28     13 17 02 F1 | 	add	arg03, local01
13f2c     02 16 66 F0 | 	shl	arg03, #2
13f30     03 00 00 FF 
13f34     04 E4 85 F1 | 	sub	objptr, ##1540
13f38     F2 16 02 F1 | 	add	arg03, objptr
13f3c     0B 17 02 FB | 	rdlong	arg03, arg03
13f40     0C 4E 05 F1 | 	add	fp, #12
13f44     A7 16 62 FC | 	wrlong	arg03, fp
13f48                 | ' 
13f48                 | ' numpar=compiledline(lineptr_e).result.uresult
13f48                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
13f48     0C 4E 85 F1 | 	sub	fp, #12
13f4c     03 16 16 F2 | 	cmp	arg03, #3 wc
13f50     47 00 00 FF 
13f54     7C E4 85 F1 | 	sub	objptr, ##36476
13f58     0C 4E 05 C1 |  if_b	add	fp, #12
13f5c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
13f60     0C 4E 85 C1 |  if_b	sub	fp, #12
13f64     40 00 90 4D |  if_c_and_nz	jmp	#LR__1620
13f68     00 12 06 F6 | 	mov	arg01, #0
13f6c     9C 98 B1 FD | 	call	#__system___getiolock_0620
13f70     FD 12 02 F6 | 	mov	arg01, result1
13f74     E4 3B B1 FD | 	call	#__system___lockmem
13f78     C0 01 00 FF 
13f7c     15 15 06 F6 | 	mov	arg02, ##@LR__6065
13f80     00 12 06 F6 | 	mov	arg01, #0
13f84     00 16 06 F6 | 	mov	arg03, #0
13f88     C8 48 B1 FD | 	call	#__system___basic_print_string
13f8c     00 12 06 F6 | 	mov	arg01, #0
13f90     78 98 B1 FD | 	call	#__system___getiolock_0620
13f94     FD 00 68 FC | 	wrlong	#0, result1
13f98     27 12 06 F6 | 	mov	arg01, #39
13f9c     00 14 06 F6 | 	mov	arg02, #0
13fa0     58 01 B1 FD | 	call	#_printerror
13fa4     B8 00 90 FD | 	jmp	#LR__1623
13fa8                 | LR__1620
13fa8                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
13fa8     0C 4E 05 F1 | 	add	fp, #12
13fac     A7 26 02 FB | 	rdlong	local01, fp
13fb0     0C 4E 85 F1 | 	sub	fp, #12
13fb4     02 26 0E F2 | 	cmp	local01, #2 wz
13fb8     38 00 90 5D |  if_ne	jmp	#LR__1621
13fbc     60 98 BF FD | 	call	#_pop
13fc0     FF 26 02 F6 | 	mov	local01, result3
13fc4     A7 FA 61 FC | 	wrlong	result1, fp
13fc8     04 4E 05 F1 | 	add	fp, #4
13fcc     A7 FC 61 FC | 	wrlong	result2, fp
13fd0     04 4E 05 F1 | 	add	fp, #4
13fd4     A7 26 62 FC | 	wrlong	local01, fp
13fd8     08 4E 85 F1 | 	sub	fp, #8
13fdc     A7 12 02 F6 | 	mov	arg01, fp
13fe0     20 9A BF FD | 	call	#_converttoint
13fe4     14 4E 05 F1 | 	add	fp, #20
13fe8     A7 FA 61 FC | 	wrlong	result1, fp
13fec     14 4E 85 F1 | 	sub	fp, #20
13ff0     0C 00 90 FD | 	jmp	#LR__1622
13ff4                 | LR__1621
13ff4     14 4E 05 F1 | 	add	fp, #20
13ff8     A7 10 68 FC | 	wrlong	#8, fp
13ffc     14 4E 85 F1 | 	sub	fp, #20
14000                 | LR__1622
14000     1C 98 BF FD | 	call	#_pop
14004     FF 26 02 F6 | 	mov	local01, result3
14008     A7 FA 61 FC | 	wrlong	result1, fp
1400c     04 4E 05 F1 | 	add	fp, #4
14010     A7 FC 61 FC | 	wrlong	result2, fp
14014     04 4E 05 F1 | 	add	fp, #4
14018     A7 26 62 FC | 	wrlong	local01, fp
1401c     08 4E 85 F1 | 	sub	fp, #8
14020     A7 12 02 F6 | 	mov	arg01, fp
14024     DC 99 BF FD | 	call	#_converttoint
14028     10 4E 05 F1 | 	add	fp, #16
1402c     A7 FA 61 FC | 	wrlong	result1, fp
14030     FD 12 02 F6 | 	mov	arg01, result1
14034     04 4E 05 F1 | 	add	fp, #4
14038     A7 14 02 FB | 	rdlong	arg02, fp
1403c     14 4E 85 F1 | 	sub	fp, #20
14040     10 16 06 F6 | 	mov	arg03, #16
14044     E8 5D B1 FD | 	call	#__system__Number_S
14048     A7 FA 61 FC | 	wrlong	result1, fp
1404c     08 4E 05 F1 | 	add	fp, #8
14050     A7 3E 68 FC | 	wrlong	#31, fp
14054     08 4E 85 F1 | 	sub	fp, #8
14058     A7 12 02 F6 | 	mov	arg01, fp
1405c     58 98 BF FD | 	call	#_push
14060                 | LR__1623
14060     A7 F0 03 F6 | 	mov	ptra, fp
14064     B2 00 A0 FD | 	call	#popregs_
14068                 | _do_hex_ret
14068     2D 00 64 FD | 	ret
1406c                 | 
1406c                 | ' 
1406c                 | ' ' ----------------  if
1406c                 | ' 
1406c                 | ' sub do_if
1406c                 | _do_if
1406c     05 4A 05 F6 | 	mov	COUNT_, #5
14070     A8 00 A0 FD | 	call	#pushregs_
14074     A8 97 BF FD | 	call	#_pop
14078     FD 26 0A F6 | 	mov	local01, result1 wz
1407c     FE 28 02 F6 | 	mov	local02, result2
14080     FF 2A 02 F6 | 	mov	local03, result3
14084                 | ' t1=pop()
14084                 | ' ' if uresult=0, jump over else
14084                 | ' if t1.result.uresult = 0 then 
14084     BC 00 90 5D |  if_ne	jmp	#LR__1632
14088                 | '   for i=lineptr_e to lineptr-1
14088     4A 00 00 FF 
1408c     80 E4 05 F1 | 	add	objptr, ##38016
14090     F2 2C 02 FB | 	rdlong	local04, objptr
14094     04 E4 85 F1 | 	sub	objptr, #4
14098     F2 2E 02 FB | 	rdlong	local05, objptr
1409c     4A 00 00 FF 
140a0     7C E4 85 F1 | 	sub	objptr, ##38012
140a4                 | LR__1630
140a4     17 2D 52 F2 | 	cmps	local04, local05 wc
140a8     78 00 90 3D |  if_ae	jmp	#LR__1631
140ac     16 FF 01 F6 | 	mov	result3, local04
140b0     01 FE 65 F0 | 	shl	result3, #1
140b4     16 FF 01 F1 | 	add	result3, local04
140b8     02 FE 65 F0 | 	shl	result3, #2
140bc     47 00 00 FF 
140c0     7C E4 05 F1 | 	add	objptr, ##36476
140c4     F2 FE 01 F1 | 	add	result3, objptr
140c8     FF 26 02 FB | 	rdlong	local01, result3
140cc     04 FE 05 F1 | 	add	result3, #4
140d0     FF FC 01 FB | 	rdlong	result2, result3
140d4     16 FF 01 F6 | 	mov	result3, local04
140d8     01 FE 65 F0 | 	shl	result3, #1
140dc     16 FF 01 F1 | 	add	result3, local04
140e0     02 FE 65 F0 | 	shl	result3, #2
140e4     F2 FE 01 F1 | 	add	result3, objptr
140e8     08 FE 05 F1 | 	add	result3, #8
140ec     FF FE 01 FB | 	rdlong	result3, result3
140f0     FE 28 02 F6 | 	mov	local02, result2
140f4     FF 2A 02 F6 | 	mov	local03, result3
140f8                 | '     t1=compiledline(i)
140f8                 | '     if t1.result_type=token_else then lineptr_e=i : return
140f8     5A 2A 0E F2 | 	cmp	local03, #90 wz
140fc     47 00 00 FF 
14100     7C E4 85 F1 | 	sub	objptr, ##36476
14104     4A 00 00 AF 
14108     80 E4 05 A1 |  if_e	add	objptr, ##38016
1410c     F2 2C 62 AC |  if_e	wrlong	local04, objptr
14110     4A 00 00 AF 
14114     80 E4 85 A1 |  if_e	sub	objptr, ##38016
14118     28 00 90 AD |  if_e	jmp	#LR__1633
1411c     01 2C 06 F1 | 	add	local04, #1
14120     80 FF 9F FD | 	jmp	#LR__1630
14124                 | LR__1631
14124     4A 00 00 FF 
14128     7C E4 05 F1 | 	add	objptr, ##38012
1412c     F2 2E 02 FB | 	rdlong	local05, objptr
14130     01 2E 86 F1 | 	sub	local05, #1
14134     04 E4 05 F1 | 	add	objptr, #4
14138     F2 2E 62 FC | 	wrlong	local05, objptr
1413c     4A 00 00 FF 
14140     80 E4 85 F1 | 	sub	objptr, ##38016
14144                 | LR__1632
14144                 | LR__1633
14144     A7 F0 03 F6 | 	mov	ptra, fp
14148     B2 00 A0 FD | 	call	#popregs_
1414c                 | _do_if_ret
1414c     2D 00 64 FD | 	ret
14150                 | 
14150                 | ' 
14150                 | ' ' ----------------  inkey$
14150                 | ' 
14150                 | ' sub do_inkey
14150                 | _do_inkey
14150     02 4A 05 F6 | 	mov	COUNT_, #2
14154     A8 00 A0 FD | 	call	#pushregs_
14158     0C F0 07 F1 | 	add	ptra, #12
1415c     84 31 B1 FD | 	call	#_usbnew_spin2_get_key
14160     45 00 00 FF 
14164     74 E4 05 F1 | 	add	objptr, ##35444
14168     F2 FA 61 FC | 	wrlong	result1, objptr
1416c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
1416c     45 00 00 FF 
14170     74 E4 85 F1 | 	sub	objptr, ##35444
14174     00 FA 0D F2 | 	cmp	result1, #0 wz
14178     94 00 90 AD |  if_e	jmp	#LR__1641
1417c     45 00 00 FF 
14180     74 E4 05 F1 | 	add	objptr, ##35444
14184     F2 1C 02 FB | 	rdlong	arg06, objptr
14188     45 00 00 FF 
1418c     74 E4 85 F1 | 	sub	objptr, ##35444
14190     00 00 40 FF 
14194     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
14198     45 00 00 CF 
1419c     74 E4 05 C1 |  if_b	add	objptr, ##35444
141a0     F2 26 02 CB |  if_b	rdlong	local01, objptr
141a4     45 00 00 CF 
141a8     74 E4 85 C1 |  if_b	sub	objptr, ##35444
141ac     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
141b0     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
141b4     58 00 90 3D |  if_ae	jmp	#LR__1641
141b8                 | '   if keyclick=1 then audio.play(7,keyclick_spl,44100,4096,spl_len) 
141b8     50 00 00 FF 
141bc     3C E5 05 F1 | 	add	objptr, ##41276
141c0     F2 1C 02 FB | 	rdlong	arg06, objptr
141c4     50 00 00 FF 
141c8     3C E5 85 F1 | 	sub	objptr, ##41276
141cc     01 1C 0E F2 | 	cmp	arg06, #1 wz
141d0     3C 00 90 5D |  if_ne	jmp	#LR__1640
141d4     52 00 00 FF 
141d8     DC E4 05 F1 | 	add	objptr, ##42204
141dc     F2 14 02 FB | 	rdlong	arg02, objptr
141e0     04 E4 85 F1 | 	sub	objptr, #4
141e4     F2 1A 02 FB | 	rdlong	arg05, objptr
141e8     07 12 06 F6 | 	mov	arg01, #7
141ec     56 00 00 FF 
141f0     44 16 06 F6 | 	mov	arg03, ##44100
141f4     0C 18 C6 F9 | 	decod	arg04, #12
141f8     01 1C 66 F6 | 	neg	arg06, #1
141fc     47 00 00 FF 
14200     0C E4 85 F1 | 	sub	objptr, ##36364
14204     74 34 B1 FD | 	call	#_audio096_spin2_play
14208     0B 00 00 FF 
1420c     CC E4 85 F1 | 	sub	objptr, ##5836
14210                 | LR__1640
14210                 | LR__1641
14210                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
14210     45 00 00 FF 
14214     74 E4 05 F1 | 	add	objptr, ##35444
14218     F2 1C 0A FB | 	rdlong	arg06, objptr wz
1421c     45 00 00 FF 
14220     74 E4 85 F1 | 	sub	objptr, ##35444
14224     D4 01 90 AD |  if_e	jmp	#LR__1650
14228     45 00 00 FF 
1422c     74 E4 05 F1 | 	add	objptr, ##35444
14230     F2 1C 02 FB | 	rdlong	arg06, objptr
14234     45 00 00 FF 
14238     74 E4 85 F1 | 	sub	objptr, ##35444
1423c     00 00 40 FF 
14240     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
14244     45 00 00 CF 
14248     74 E4 05 C1 |  if_b	add	objptr, ##35444
1424c     F2 26 02 CB |  if_b	rdlong	local01, objptr
14250     45 00 00 CF 
14254     74 E4 85 C1 |  if_b	sub	objptr, ##35444
14258     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
1425c     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
14260     98 01 90 3D |  if_ae	jmp	#LR__1650
14264                 | '   if leds and 2 = 2 then 
14264     52 00 00 FF 
14268     1C E5 05 F1 | 	add	objptr, ##42268
1426c     F2 26 0A FB | 	rdlong	local01, objptr wz
14270     52 00 00 FF 
14274     1C E5 85 F1 | 	sub	objptr, ##42268
14278     58 01 90 AD |  if_e	jmp	#LR__1649
1427c                 | '     if key>96 andalso key<123 then
1427c     45 00 00 FF 
14280     74 E4 05 F1 | 	add	objptr, ##35444
14284     F2 26 02 FB | 	rdlong	local01, objptr
14288     45 00 00 FF 
1428c     74 E4 85 F1 | 	sub	objptr, ##35444
14290     61 26 16 F2 | 	cmp	local01, #97 wc
14294     3C 00 90 CD |  if_b	jmp	#LR__1642
14298     45 00 00 FF 
1429c     74 E4 05 F1 | 	add	objptr, ##35444
142a0     F2 26 02 FB | 	rdlong	local01, objptr
142a4     45 00 00 FF 
142a8     74 E4 85 F1 | 	sub	objptr, ##35444
142ac     7B 26 16 F2 | 	cmp	local01, #123 wc
142b0     20 00 90 3D |  if_ae	jmp	#LR__1642
142b4     45 00 00 FF 
142b8     74 E4 05 F1 | 	add	objptr, ##35444
142bc     F2 26 02 FB | 	rdlong	local01, objptr
142c0     20 26 86 F1 | 	sub	local01, #32
142c4     F2 26 62 FC | 	wrlong	local01, objptr
142c8     45 00 00 FF 
142cc     74 E4 85 F1 | 	sub	objptr, ##35444
142d0     00 01 90 FD | 	jmp	#LR__1648
142d4                 | LR__1642
142d4     45 00 00 FF 
142d8     74 E4 05 F1 | 	add	objptr, ##35444
142dc     F2 26 02 FB | 	rdlong	local01, objptr
142e0     45 00 00 FF 
142e4     74 E4 85 F1 | 	sub	objptr, ##35444
142e8     41 26 16 F2 | 	cmp	local01, #65 wc
142ec     3C 00 90 CD |  if_b	jmp	#LR__1643
142f0     45 00 00 FF 
142f4     74 E4 05 F1 | 	add	objptr, ##35444
142f8     F2 26 02 FB | 	rdlong	local01, objptr
142fc     45 00 00 FF 
14300     74 E4 85 F1 | 	sub	objptr, ##35444
14304     5B 26 16 F2 | 	cmp	local01, #91 wc
14308     20 00 90 3D |  if_ae	jmp	#LR__1643
1430c     45 00 00 FF 
14310     74 E4 05 F1 | 	add	objptr, ##35444
14314     F2 26 02 FB | 	rdlong	local01, objptr
14318     20 26 06 F1 | 	add	local01, #32
1431c     F2 26 62 FC | 	wrlong	local01, objptr
14320     45 00 00 FF 
14324     74 E4 85 F1 | 	sub	objptr, ##35444
14328     A8 00 90 FD | 	jmp	#LR__1647
1432c                 | LR__1643
1432c     45 00 00 FF 
14330     74 E4 05 F1 | 	add	objptr, ##35444
14334     F2 26 02 FB | 	rdlong	local01, objptr
14338     45 00 00 FF 
1433c     74 E4 85 F1 | 	sub	objptr, ##35444
14340     17 26 16 F2 | 	cmp	local01, #23 wc
14344     3C 00 90 CD |  if_b	jmp	#LR__1644
14348     45 00 00 FF 
1434c     74 E4 05 F1 | 	add	objptr, ##35444
14350     F2 26 02 FB | 	rdlong	local01, objptr
14354     45 00 00 FF 
14358     74 E4 85 F1 | 	sub	objptr, ##35444
1435c     20 26 16 F2 | 	cmp	local01, #32 wc
14360     20 00 90 3D |  if_ae	jmp	#LR__1644
14364     45 00 00 FF 
14368     74 E4 05 F1 | 	add	objptr, ##35444
1436c     F2 26 02 FB | 	rdlong	local01, objptr
14370     09 26 86 F1 | 	sub	local01, #9
14374     F2 26 62 FC | 	wrlong	local01, objptr
14378     45 00 00 FF 
1437c     74 E4 85 F1 | 	sub	objptr, ##35444
14380     50 00 90 FD | 	jmp	#LR__1646
14384                 | LR__1644
14384     45 00 00 FF 
14388     74 E4 05 F1 | 	add	objptr, ##35444
1438c     F2 28 02 FB | 	rdlong	local02, objptr
14390     45 00 00 FF 
14394     74 E4 85 F1 | 	sub	objptr, ##35444
14398     0E 28 16 F2 | 	cmp	local02, #14 wc
1439c     34 00 90 CD |  if_b	jmp	#LR__1645
143a0     45 00 00 FF 
143a4     74 E4 05 F1 | 	add	objptr, ##35444
143a8     F2 26 02 FB | 	rdlong	local01, objptr
143ac     45 00 00 FF 
143b0     74 E4 85 F1 | 	sub	objptr, ##35444
143b4     17 26 16 F2 | 	cmp	local01, #23 wc
143b8     52 00 00 CF 
143bc     20 E5 05 C1 |  if_b	add	objptr, ##42272
143c0     F2 28 02 CB |  if_b	rdlong	local02, objptr
143c4     27 28 06 C1 |  if_b	add	local02, #39
143c8     F2 28 62 CC |  if_b	wrlong	local02, objptr
143cc     52 00 00 CF 
143d0     20 E5 85 C1 |  if_b	sub	objptr, ##42272
143d4                 | LR__1645
143d4                 | LR__1646
143d4                 | LR__1647
143d4                 | LR__1648
143d4                 | LR__1649
143d4     45 00 00 FF 
143d8     74 E4 05 F1 | 	add	objptr, ##35444
143dc     F2 12 02 FB | 	rdlong	arg01, objptr
143e0     45 00 00 FF 
143e4     74 E4 85 F1 | 	sub	objptr, ##35444
143e8     90 00 B1 FD | 	call	#_scantochar
143ec     FD 12 02 F6 | 	mov	arg01, result1
143f0     AC 59 B1 FD | 	call	#__system__Chr_S
143f4     A7 FA 61 FC | 	wrlong	result1, fp
143f8     0C 00 90 FD | 	jmp	#LR__1651
143fc                 | LR__1650
143fc     C0 01 00 FF 
14400     1C 29 06 F6 | 	mov	local02, ##@LR__6066
14404     A7 28 62 FC | 	wrlong	local02, fp
14408                 | LR__1651
14408     08 4E 05 F1 | 	add	fp, #8
1440c     A7 3E 68 FC | 	wrlong	#31, fp
14410     08 4E 85 F1 | 	sub	fp, #8
14414     A7 12 02 F6 | 	mov	arg01, fp
14418     9C 94 BF FD | 	call	#_push
1441c     A7 F0 03 F6 | 	mov	ptra, fp
14420     B2 00 A0 FD | 	call	#popregs_
14424                 | _do_inkey_ret
14424     2D 00 64 FD | 	ret
14428                 | 
14428                 | ' 
14428                 | ' ' ----------------  ink
14428                 | ' 
14428                 | ' sub do_ink
14428                 | _do_ink
14428     00 4A 05 F6 | 	mov	COUNT_, #0
1442c     A8 00 A0 FD | 	call	#pushregs_
14430     0C F0 07 F1 | 	add	ptra, #12
14434     E8 93 BF FD | 	call	#_pop
14438     FF 14 02 F6 | 	mov	arg02, result3
1443c     A7 FA 61 FC | 	wrlong	result1, fp
14440     04 4E 05 F1 | 	add	fp, #4
14444     A7 FC 61 FC | 	wrlong	result2, fp
14448     04 4E 05 F1 | 	add	fp, #4
1444c     A7 14 62 FC | 	wrlong	arg02, fp
14450     08 4E 85 F1 | 	sub	fp, #8
14454     A7 12 02 F6 | 	mov	arg01, fp
14458     A8 95 BF FD | 	call	#_converttoint
1445c     37 00 00 FF 
14460     3C E4 05 F1 | 	add	objptr, ##28220
14464     F2 FA 61 FC | 	wrlong	result1, objptr
14468     04 E4 85 F1 | 	sub	objptr, #4
1446c     F2 14 02 FB | 	rdlong	arg02, objptr
14470                 | ' 
14470                 | ' write_color:=ff
14470     36 00 00 FF 
14474     F7 E5 85 F1 | 	sub	objptr, ##28151
14478     F2 FA 61 FC | 	wrlong	result1, objptr
1447c                 | ' write_background:=bb
1447c     04 E4 05 F1 | 	add	objptr, #4
14480     F2 14 62 FC | 	wrlong	arg02, objptr
14484     36 00 00 FF 
14488     F7 E5 05 F1 | 	add	objptr, ##28151
1448c     F2 12 02 FB | 	rdlong	arg01, objptr
14490     37 00 00 FF 
14494     3C E4 85 F1 | 	sub	objptr, ##28220
14498     68 08 B1 FD | 	call	#_hg010b_spin2_setcursorcolor
1449c     A7 F0 03 F6 | 	mov	ptra, fp
144a0     B2 00 A0 FD | 	call	#popregs_
144a4                 | _do_ink_ret
144a4     2D 00 64 FD | 	ret
144a8                 | 
144a8                 | ' 
144a8                 | ' ' ----------------  int
144a8                 | ' 
144a8                 | ' sub do_int
144a8                 | _do_int
144a8     02 4A 05 F6 | 	mov	COUNT_, #2
144ac     A8 00 A0 FD | 	call	#pushregs_
144b0     10 F0 07 F1 | 	add	ptra, #16
144b4     68 93 BF FD | 	call	#_pop
144b8     FE 26 02 F6 | 	mov	local01, result2
144bc     FF 28 02 F6 | 	mov	local02, result3
144c0     A7 FA 61 FC | 	wrlong	result1, fp
144c4     04 4E 05 F1 | 	add	fp, #4
144c8     A7 26 62 FC | 	wrlong	local01, fp
144cc     04 4E 05 F1 | 	add	fp, #4
144d0     A7 28 62 FC | 	wrlong	local02, fp
144d4                 | ' 
144d4                 | ' t1=pop()
144d4                 | ' select case t1.result_type
144d4     08 4E 85 F1 | 	sub	fp, #8
144d8     1E 28 0E F2 | 	cmp	local02, #30 wz
144dc     14 00 90 AD |  if_e	jmp	#LR__1660
144e0     1F 28 0E F2 | 	cmp	local02, #31 wz
144e4     20 00 90 AD |  if_e	jmp	#LR__1661
144e8     2B 28 0E F2 | 	cmp	local02, #43 wz
144ec     34 00 90 AD |  if_e	jmp	#LR__1662
144f0     50 00 90 FD | 	jmp	#LR__1663
144f4                 | LR__1660
144f4     A7 12 02 FB | 	rdlong	arg01, fp
144f8     00 14 06 F6 | 	mov	arg02, #0
144fc     A0 69 B1 FD | 	call	#__system___float_tointeger
14500     A7 FA 61 FC | 	wrlong	result1, fp
14504     3C 00 90 FD | 	jmp	#LR__1663
14508                 | LR__1661
14508     A7 12 02 FB | 	rdlong	arg01, fp
1450c     D8 6C B1 FD | 	call	#__system____builtin_atof
14510     FD 12 02 F6 | 	mov	arg01, result1
14514     00 14 06 F6 | 	mov	arg02, #0
14518     84 69 B1 FD | 	call	#__system___float_tointeger
1451c     A7 FA 61 FC | 	wrlong	result1, fp
14520     20 00 90 FD | 	jmp	#LR__1663
14524                 | LR__1662
14524     A7 12 02 FB | 	rdlong	arg01, fp
14528     6C 94 BF FD | 	call	#_convertstring
1452c     FD 12 02 F6 | 	mov	arg01, result1
14530     B4 6C B1 FD | 	call	#__system____builtin_atof
14534     FD 12 02 F6 | 	mov	arg01, result1
14538     00 14 06 F6 | 	mov	arg02, #0
1453c     60 69 B1 FD | 	call	#__system___float_tointeger
14540     A7 FA 61 FC | 	wrlong	result1, fp
14544                 | LR__1663
14544     08 4E 05 F1 | 	add	fp, #8
14548     A7 38 68 FC | 	wrlong	#28, fp
1454c     08 4E 85 F1 | 	sub	fp, #8
14550     A7 12 02 F6 | 	mov	arg01, fp
14554     60 93 BF FD | 	call	#_push
14558     A7 F0 03 F6 | 	mov	ptra, fp
1455c     B2 00 A0 FD | 	call	#popregs_
14560                 | _do_int_ret
14560     2D 00 64 FD | 	ret
14564                 | 
14564                 | ' 
14564                 | ' ' ----------------  input
14564                 | ' 
14564                 | ' sub do_input
14564                 | _do_input
14564     11 4A 05 F6 | 	mov	COUNT_, #17
14568     A8 00 A0 FD | 	call	#pushregs_
1456c     50 F1 07 F1 | 	add	ptra, #336
14570     4A 00 00 FF 
14574     80 E4 05 F1 | 	add	objptr, ##38016
14578     F2 FE 01 FB | 	rdlong	result3, objptr
1457c     FF FC 01 F6 | 	mov	result2, result3
14580     01 FC 65 F0 | 	shl	result2, #1
14584     FF FC 01 F1 | 	add	result2, result3
14588     02 FC 65 F0 | 	shl	result2, #2
1458c     03 00 00 FF 
14590     04 E4 85 F1 | 	sub	objptr, ##1540
14594     F2 FC 01 F1 | 	add	result2, objptr
14598     FE FC 01 FB | 	rdlong	result2, result2
1459c     08 4E 05 F1 | 	add	fp, #8
145a0     A7 FC 61 FC | 	wrlong	result2, fp
145a4                 | ' 
145a4                 | ' numpar=compiledline(lineptr_e).result.uresult
145a4                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
145a4     08 4E 85 F1 | 	sub	fp, #8
145a8     01 FC 15 F2 | 	cmp	result2, #1 wc
145ac     47 00 00 FF 
145b0     7C E4 85 F1 | 	sub	objptr, ##36476
145b4     14 00 90 CD |  if_b	jmp	#LR__1670
145b8     08 4E 05 F1 | 	add	fp, #8
145bc     A7 FC 01 FB | 	rdlong	result2, fp
145c0     08 4E 85 F1 | 	sub	fp, #8
145c4     41 FC 15 F2 | 	cmp	result2, #65 wc
145c8     50 00 90 CD |  if_b	jmp	#LR__1671
145cc                 | LR__1670
145cc     00 12 06 F6 | 	mov	arg01, #0
145d0     38 92 B1 FD | 	call	#__system___getiolock_0620
145d4     FD 12 02 F6 | 	mov	arg01, result1
145d8     80 35 B1 FD | 	call	#__system___lockmem
145dc     C0 01 00 FF 
145e0     1D 15 06 F6 | 	mov	arg02, ##@LR__6067
145e4     00 12 06 F6 | 	mov	arg01, #0
145e8     00 16 06 F6 | 	mov	arg03, #0
145ec     64 42 B1 FD | 	call	#__system___basic_print_string
145f0     00 12 06 F6 | 	mov	arg01, #0
145f4     14 92 B1 FD | 	call	#__system___getiolock_0620
145f8     FD 00 68 FC | 	wrlong	#0, result1
145fc     50 00 00 FF 
14600     F0 E4 05 F1 | 	add	objptr, ##41200
14604     F2 14 02 FB | 	rdlong	arg02, objptr
14608     50 00 00 FF 
1460c     F0 E4 85 F1 | 	sub	objptr, ##41200
14610     27 12 06 F6 | 	mov	arg01, #39
14614     E4 FA B0 FD | 	call	#_printerror
14618     44 0B 90 FD | 	jmp	#LR__1720
1461c                 | LR__1671
1461c     08 4E 05 F1 | 	add	fp, #8
14620     A7 FC 01 FB | 	rdlong	result2, fp
14624     01 FC 85 F1 | 	sub	result2, #1
14628     28 4F 05 F1 | 	add	fp, #296
1462c     A7 FC 61 FC | 	wrlong	result2, fp
14630     3C E4 05 F1 | 	add	objptr, #60
14634     F2 FC E1 FA | 	rdword	result2, objptr
14638     FE FC 51 F6 | 	abs	result2, result2 wc
1463c     01 FC 45 F0 | 	shr	result2, #1
14640     FE FC 81 F6 | 	negc	result2, result2
14644     0C 4E 05 F1 | 	add	fp, #12
14648     A7 FC 61 FC | 	wrlong	result2, fp
1464c     02 E4 05 F1 | 	add	objptr, #2
14650     F2 26 C2 FA | 	rdbyte	local01, objptr
14654     3E E4 85 F1 | 	sub	objptr, #62
14658     04 4E 05 F1 | 	add	fp, #4
1465c     A7 26 62 FC | 	wrlong	local01, fp
14660     40 4F 85 F1 | 	sub	fp, #320
14664                 | ' i=numpar-1
14664                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
14664                 | ' do
14664                 | LR__1672
14664     9C C1 BE FD | 	call	#_edit
14668     A7 FA 61 FC | 	wrlong	result1, fp
1466c                 | ' 
1466c                 | '   line$=edit()
1466c                 | ' 
1466c                 | '   if v.cursor_y=cpy+1 then
1466c     3E E4 05 F1 | 	add	objptr, #62
14670     F2 26 C2 FA | 	rdbyte	local01, objptr
14674     3E E4 85 F1 | 	sub	objptr, #62
14678     40 4F 05 F1 | 	add	fp, #320
1467c     A7 16 02 FB | 	rdlong	arg03, fp
14680     40 4F 85 F1 | 	sub	fp, #320
14684     01 16 06 F1 | 	add	arg03, #1
14688     0B 27 0A F2 | 	cmp	local01, arg03 wz
1468c     6C 00 90 5D |  if_ne	jmp	#LR__1675
14690     A7 26 02 FB | 	rdlong	local01, fp
14694     13 13 02 F6 | 	mov	arg01, local01
14698     09 29 02 F6 | 	mov	local02, arg01
1469c     97 06 48 FB | 	callpa	#(@LR__1674-@LR__1673)>>2,fcache_load_ptr_
146a0                 | LR__1673
146a0     14 FB C9 FA | 	rdbyte	result1, local02 wz
146a4     01 28 06 51 |  if_ne	add	local02, #1
146a8     F4 FF 9F 5D |  if_ne	jmp	#LR__1673
146ac                 | LR__1674
146ac     09 29 82 F1 | 	sub	local02, arg01
146b0     14 15 02 F6 | 	mov	arg02, local02
146b4     3C 4F 05 F1 | 	add	fp, #316
146b8     A7 16 02 FB | 	rdlong	arg03, fp
146bc     3C 4F 85 F1 | 	sub	fp, #316
146c0     0B 15 82 F1 | 	sub	arg02, arg03
146c4     37 00 00 FF 
146c8     34 E4 05 F1 | 	add	objptr, ##28212
146cc     F2 16 02 FB | 	rdlong	arg03, objptr
146d0     37 00 00 FF 
146d4     34 E4 85 F1 | 	sub	objptr, ##28212
146d8     0B 15 02 F1 | 	add	arg02, arg03
146dc     13 13 02 F6 | 	mov	arg01, local01
146e0     80 55 B1 FD | 	call	#__system__Right_S
146e4     FD 12 02 F6 | 	mov	arg01, result1
146e8     80 59 B1 FD | 	call	#__system__RTrim_S
146ec     FD 12 02 F6 | 	mov	arg01, result1
146f0     B8 58 B1 FD | 	call	#__system__LTrim_S
146f4     A7 FA 61 FC | 	wrlong	result1, fp
146f8     14 00 90 FD | 	jmp	#LR__1676
146fc                 | LR__1675
146fc     A7 12 02 FB | 	rdlong	arg01, fp
14700     68 59 B1 FD | 	call	#__system__RTrim_S
14704     FD 12 02 F6 | 	mov	arg01, result1
14708     A0 58 B1 FD | 	call	#__system__LTrim_S
1470c     A7 FA 61 FC | 	wrlong	result1, fp
14710                 | LR__1676
14710                 | '   do
14710                 | LR__1677
14710     A7 14 02 FB | 	rdlong	arg02, fp
14714     C0 01 00 FF 
14718     28 17 06 F6 | 	mov	arg03, ##@LR__6068
1471c     01 12 06 F6 | 	mov	arg01, #1
14720     00 5A B1 FD | 	call	#__system__Instr
14724     0C 4E 05 F1 | 	add	fp, #12
14728     A7 FA 61 FC | 	wrlong	result1, fp
1472c                 | '    comma=instr(1,line$,",")  
1472c                 | '    if comma>0  then 
1472c     0C 4E 85 F1 | 	sub	fp, #12
14730     01 FA 15 F2 | 	cmp	result1, #1 wc
14734     68 00 90 CD |  if_b	jmp	#LR__1680
14738     A7 12 02 FB | 	rdlong	arg01, fp
1473c     0C 4E 05 F1 | 	add	fp, #12
14740     A7 14 02 FB | 	rdlong	arg02, fp
14744     0C 4E 85 F1 | 	sub	fp, #12
14748     01 14 86 F1 | 	sub	arg02, #1
1474c     8C 54 B1 FD | 	call	#__system__Left_S
14750     04 4E 05 F1 | 	add	fp, #4
14754     A7 FA 61 FC | 	wrlong	result1, fp
14758     04 4E 85 F1 | 	sub	fp, #4
1475c     A7 26 02 FB | 	rdlong	local01, fp
14760     13 13 02 F6 | 	mov	arg01, local01
14764     09 29 02 F6 | 	mov	local02, arg01
14768     97 06 48 FB | 	callpa	#(@LR__1679-@LR__1678)>>2,fcache_load_ptr_
1476c                 | LR__1678
1476c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14770     01 28 06 51 |  if_ne	add	local02, #1
14774     F4 FF 9F 5D |  if_ne	jmp	#LR__1678
14778                 | LR__1679
14778     09 29 82 F1 | 	sub	local02, arg01
1477c     14 15 02 F6 | 	mov	arg02, local02
14780     0C 4E 05 F1 | 	add	fp, #12
14784     A7 16 02 FB | 	rdlong	arg03, fp
14788     0C 4E 85 F1 | 	sub	fp, #12
1478c     0B 15 82 F1 | 	sub	arg02, arg03
14790     13 13 02 F6 | 	mov	arg01, local01
14794     CC 54 B1 FD | 	call	#__system__Right_S
14798     A7 FA 61 FC | 	wrlong	result1, fp
1479c     28 00 90 FD | 	jmp	#LR__1681
147a0                 | LR__1680
147a0     A7 12 02 FB | 	rdlong	arg01, fp
147a4     C4 58 B1 FD | 	call	#__system__RTrim_S
147a8     FD 12 02 F6 | 	mov	arg01, result1
147ac     FC 57 B1 FD | 	call	#__system__LTrim_S
147b0     04 4E 05 F1 | 	add	fp, #4
147b4     A7 FA 61 FC | 	wrlong	result1, fp
147b8     04 4E 85 F1 | 	sub	fp, #4
147bc     C0 01 00 FF 
147c0     2A 27 06 F6 | 	mov	local01, ##@LR__6069
147c4     A7 26 62 FC | 	wrlong	local01, fp
147c8                 | LR__1681
147c8     30 4F 05 F1 | 	add	fp, #304
147cc     A7 26 02 FB | 	rdlong	local01, fp
147d0     02 26 66 F0 | 	shl	local01, #2
147d4     04 4F 85 F1 | 	sub	fp, #260
147d8     A7 26 02 F1 | 	add	local01, fp
147dc     28 4E 85 F1 | 	sub	fp, #40
147e0     A7 FA 01 FB | 	rdlong	result1, fp
147e4     13 FB 61 FC | 	wrlong	result1, local01
147e8     2C 4F 05 F1 | 	add	fp, #300
147ec     A7 26 02 FB | 	rdlong	local01, fp
147f0     01 26 86 F1 | 	sub	local01, #1
147f4     A7 26 62 FC | 	wrlong	local01, fp
147f8     30 4F 85 F1 | 	sub	fp, #304
147fc     00 26 56 F2 | 	cmps	local01, #0 wc
14800     18 00 90 CD |  if_b	jmp	#LR__1682
14804     A7 12 02 FB | 	rdlong	arg01, fp
14808     C0 01 00 FF 
1480c     2B 15 06 F6 | 	mov	arg02, ##@LR__6070
14810     70 33 B1 FD | 	call	#__system___string_cmp
14814     00 FA 0D F2 | 	cmp	result1, #0 wz
14818     F4 FE 9F 5D |  if_ne	jmp	#LR__1677
1481c                 | LR__1682
1481c     30 4F 05 F1 | 	add	fp, #304
14820     A7 26 02 FB | 	rdlong	local01, fp
14824     30 4F 85 F1 | 	sub	fp, #304
14828     00 26 56 F2 | 	cmps	local01, #0 wc
1482c     34 FE 9F 3D |  if_ae	jmp	#LR__1672
14830                 | ' 
14830                 | ' for i=0 to numpar-1
14830     30 4F 05 F1 | 	add	fp, #304
14834     A7 00 68 FC | 	wrlong	#0, fp
14838     28 4F 85 F1 | 	sub	fp, #296
1483c     A7 2A 02 FB | 	rdlong	local03, fp
14840     08 4E 85 F1 | 	sub	fp, #8
14844                 | LR__1683
14844     30 4F 05 F1 | 	add	fp, #304
14848     A7 2C 02 FB | 	rdlong	local04, fp
1484c     30 4F 85 F1 | 	sub	fp, #304
14850     16 27 02 F6 | 	mov	local01, local04
14854     15 27 52 F2 | 	cmps	local01, local03 wc
14858     04 09 90 3D |  if_ae	jmp	#LR__1719
1485c                 | ' 
1485c                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1485c     30 4F 05 F1 | 	add	fp, #304
14860     A7 16 02 FB | 	rdlong	arg03, fp
14864     02 16 66 F0 | 	shl	arg03, #2
14868     04 4F 85 F1 | 	sub	fp, #260
1486c     A7 16 02 F1 | 	add	arg03, fp
14870     0B 13 02 FB | 	rdlong	arg01, arg03
14874     2C 4E 85 F1 | 	sub	fp, #44
14878     F8 21 BF FD | 	call	#_isnum
1487c     FD 2E 02 F6 | 	mov	local05, result1
14880     30 4F 05 F1 | 	add	fp, #304
14884     A7 16 02 FB | 	rdlong	arg03, fp
14888     02 16 66 F0 | 	shl	arg03, #2
1488c     04 4F 85 F1 | 	sub	fp, #260
14890     A7 30 02 F6 | 	mov	local06, fp
14894     A7 16 02 F1 | 	add	arg03, fp
14898     0B 13 02 FB | 	rdlong	arg01, arg03
1489c     2C 4E 85 F1 | 	sub	fp, #44
148a0     BC 25 BF FD | 	call	#_isint
148a4     FD 2E 2A F5 | 	andn	local05, result1 wz
148a8     52 00 00 5F 
148ac     4C E5 05 51 |  if_ne	add	objptr, ##42316
148b0     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
148b4     52 00 00 5F 
148b8     4C E5 85 51 |  if_ne	sub	objptr, ##42316
148bc                 | '   if isint(args(i)) then r=result_int 
148bc     30 4F 05 F1 | 	add	fp, #304
148c0     A7 2E 02 FB | 	rdlong	local05, fp
148c4     02 2E 66 F0 | 	shl	local05, #2
148c8     04 4F 85 F1 | 	sub	fp, #260
148cc     A7 2E 02 F1 | 	add	local05, fp
148d0     17 13 02 FB | 	rdlong	arg01, local05
148d4     2C 4E 85 F1 | 	sub	fp, #44
148d8     84 25 BF FD | 	call	#_isint
148dc     00 FA 0D F2 | 	cmp	result1, #0 wz
148e0     52 00 00 5F 
148e4     4C E5 05 51 |  if_ne	add	objptr, ##42316
148e8     F2 38 68 5C |  if_ne	wrlong	#28, objptr
148ec     52 00 00 5F 
148f0     4C E5 85 51 |  if_ne	sub	objptr, ##42316
148f4                 | '   if isdec(args(i)) then r=result_uint 
148f4     30 4F 05 F1 | 	add	fp, #304
148f8     A7 2E 02 FB | 	rdlong	local05, fp
148fc     02 2E 66 F0 | 	shl	local05, #2
14900     04 4F 85 F1 | 	sub	fp, #260
14904     A7 2E 02 F1 | 	add	local05, fp
14908     17 13 02 FB | 	rdlong	arg01, local05
1490c     2C 4E 85 F1 | 	sub	fp, #44
14910     F0 27 BF FD | 	call	#_isdec
14914     00 FA 0D F2 | 	cmp	result1, #0 wz
14918     52 00 00 5F 
1491c     4C E5 05 51 |  if_ne	add	objptr, ##42316
14920     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
14924     52 00 00 5F 
14928     4C E5 85 51 |  if_ne	sub	objptr, ##42316
1492c                 | '   if not isnum(args(i)) then 
1492c     30 4F 05 F1 | 	add	fp, #304
14930     A7 32 02 FB | 	rdlong	local07, fp
14934     19 35 02 F6 | 	mov	local08, local07
14938     02 34 66 F0 | 	shl	local08, #2
1493c     04 4F 85 F1 | 	sub	fp, #260
14940     A7 36 02 F6 | 	mov	local09, fp
14944     A7 34 02 F1 | 	add	local08, fp
14948     1A 13 02 FB | 	rdlong	arg01, local08
1494c     2C 4E 85 F1 | 	sub	fp, #44
14950     20 21 BF FD | 	call	#_isnum
14954     FD 2E 22 F6 | 	not	local05, result1
14958     00 2E 0E F2 | 	cmp	local05, #0 wz
1495c     44 01 90 AD |  if_e	jmp	#LR__1688
14960     52 00 00 FF 
14964     4C E5 05 F1 | 	add	objptr, ##42316
14968     F2 56 68 FC | 	wrlong	#43, objptr
1496c     52 00 00 FF 
14970     4C E5 85 F1 | 	sub	objptr, ##42316
14974     04 4E 05 F1 | 	add	fp, #4
14978     A7 12 02 FB | 	rdlong	arg01, fp
1497c     04 4E 85 F1 | 	sub	fp, #4
14980     09 29 02 F6 | 	mov	local02, arg01
14984     97 06 48 FB | 	callpa	#(@LR__1685-@LR__1684)>>2,fcache_load_ptr_
14988                 | LR__1684
14988     14 FB C9 FA | 	rdbyte	result1, local02 wz
1498c     01 28 06 51 |  if_ne	add	local02, #1
14990     F4 FF 9F 5D |  if_ne	jmp	#LR__1684
14994                 | LR__1685
14994     09 29 82 F1 | 	sub	local02, arg01
14998     14 33 02 F6 | 	mov	local07, local02
1499c     38 4F 05 F1 | 	add	fp, #312
149a0     A7 32 62 FC | 	wrlong	local07, fp
149a4     52 00 00 FF 
149a8     D0 E4 05 F1 | 	add	objptr, ##42192
149ac     F2 12 02 FB | 	rdlong	arg01, objptr
149b0     19 13 82 F1 | 	sub	arg01, local07
149b4     04 12 86 F1 | 	sub	arg01, #4
149b8     03 12 26 F5 | 	andn	arg01, #3
149bc     F2 12 62 FC | 	wrlong	arg01, objptr
149c0     52 00 00 FF 
149c4     D0 E4 85 F1 | 	sub	objptr, ##42192
149c8     A7 14 02 FB | 	rdlong	arg02, fp
149cc     38 4F 85 F1 | 	sub	fp, #312
149d0     C8 F8 B0 FD | 	call	#_pslpoke
149d4                 | '     pslpoke memtop,l
149d4                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
149d4     34 4F 05 F1 | 	add	fp, #308
149d8     A7 02 68 FC | 	wrlong	#1, fp
149dc     04 4E 05 F1 | 	add	fp, #4
149e0     A7 38 02 FB | 	rdlong	local10, fp
149e4     38 4F 85 F1 | 	sub	fp, #312
149e8     01 38 06 F1 | 	add	local10, #1
149ec                 | LR__1686
149ec     34 4F 05 F1 | 	add	fp, #308
149f0     A7 2E 02 FB | 	rdlong	local05, fp
149f4     34 4F 85 F1 | 	sub	fp, #308
149f8     1C 2F 52 F2 | 	cmps	local05, local10 wc
149fc     84 00 90 3D |  if_ae	jmp	#LR__1687
14a00     52 00 00 FF 
14a04     D0 E4 05 F1 | 	add	objptr, ##42192
14a08     F2 32 02 FB | 	rdlong	local07, objptr
14a0c     52 00 00 FF 
14a10     D0 E4 85 F1 | 	sub	objptr, ##42192
14a14     03 32 06 F1 | 	add	local07, #3
14a18     34 4F 05 F1 | 	add	fp, #308
14a1c     A7 3A 02 FB | 	rdlong	local11, fp
14a20     1D 33 02 F1 | 	add	local07, local11
14a24     04 4E 85 F1 | 	sub	fp, #4
14a28     A7 3C 02 FB | 	rdlong	local12, fp
14a2c     02 3C 66 F0 | 	shl	local12, #2
14a30     04 4F 85 F1 | 	sub	fp, #260
14a34     A7 3E 02 F6 | 	mov	local13, fp
14a38     A7 3C 02 F1 | 	add	local12, fp
14a3c     1E 13 02 FB | 	rdlong	arg01, local12
14a40     2C 4E 85 F1 | 	sub	fp, #44
14a44     01 40 06 F6 | 	mov	local14, #1
14a48     1D 15 02 F6 | 	mov	arg02, local11
14a4c     01 16 06 F6 | 	mov	arg03, #1
14a50     A0 52 B1 FD | 	call	#__system__Mid_S
14a54     FD 14 C2 FA | 	rdbyte	arg02, result1
14a58     19 13 02 F6 | 	mov	arg01, local07
14a5c     CC F8 B0 FD | 	call	#_pspoke
14a60     34 4F 05 F1 | 	add	fp, #308
14a64     A7 34 02 FB | 	rdlong	local08, fp
14a68     1A 33 02 F6 | 	mov	local07, local08
14a6c     1A 31 02 F6 | 	mov	local06, local08
14a70     18 37 02 F6 | 	mov	local09, local06
14a74     01 36 06 F1 | 	add	local09, #1
14a78     A7 36 62 FC | 	wrlong	local09, fp
14a7c     34 4F 85 F1 | 	sub	fp, #308
14a80     68 FF 9F FD | 	jmp	#LR__1686
14a84                 | LR__1687
14a84     52 00 00 FF 
14a88     D0 E4 05 F1 | 	add	objptr, ##42192
14a8c     F2 2E 02 FB | 	rdlong	local05, objptr
14a90     52 00 00 FF 
14a94     D0 E4 85 F1 | 	sub	objptr, ##42192
14a98     10 4E 05 F1 | 	add	fp, #16
14a9c     A7 2E 62 FC | 	wrlong	local05, fp
14aa0     10 4E 85 F1 | 	sub	fp, #16
14aa4                 | LR__1688
14aa4     78 8D BF FD | 	call	#_pop
14aa8     FE 2E 02 F6 | 	mov	local05, result2
14aac     FF 42 02 F6 | 	mov	local15, result3
14ab0     1C 4E 05 F1 | 	add	fp, #28
14ab4     A7 FA 61 FC | 	wrlong	result1, fp
14ab8     04 4E 05 F1 | 	add	fp, #4
14abc     A7 2E 62 FC | 	wrlong	local05, fp
14ac0     04 4E 05 F1 | 	add	fp, #4
14ac4     A7 42 62 FC | 	wrlong	local15, fp
14ac8     04 4E 85 F1 | 	sub	fp, #4
14acc     A7 44 02 FB | 	rdlong	local16, fp
14ad0     0C 4E 85 F1 | 	sub	fp, #12
14ad4     A7 44 62 FC | 	wrlong	local16, fp
14ad8                 | '   t1=pop() : vartype=t1.result.twowords(1)
14ad8                 | '   select case vartype
14ad8     14 4E 85 F1 | 	sub	fp, #20
14adc     22 47 0A F6 | 	mov	local17, local16 wz
14ae0     64 00 90 AD |  if_e	jmp	#LR__1689
14ae4     00 47 0E F2 | 	cmp	local17, #256 wz
14ae8     6C 00 90 AD |  if_e	jmp	#LR__1690
14aec     01 47 0E F2 | 	cmp	local17, #257 wz
14af0     74 00 90 AD |  if_e	jmp	#LR__1691
14af4     02 47 0E F2 | 	cmp	local17, #258 wz
14af8     7C 00 90 AD |  if_e	jmp	#LR__1692
14afc     03 47 0E F2 | 	cmp	local17, #259 wz
14b00     84 00 90 AD |  if_e	jmp	#LR__1693
14b04     04 47 0E F2 | 	cmp	local17, #260 wz
14b08     8C 00 90 AD |  if_e	jmp	#LR__1694
14b0c     05 47 0E F2 | 	cmp	local17, #261 wz
14b10     94 00 90 AD |  if_e	jmp	#LR__1695
14b14     06 47 0E F2 | 	cmp	local17, #262 wz
14b18     9C 00 90 AD |  if_e	jmp	#LR__1696
14b1c     07 47 0E F2 | 	cmp	local17, #263 wz
14b20     A4 00 90 AD |  if_e	jmp	#LR__1697
14b24     08 47 0E F2 | 	cmp	local17, #264 wz
14b28     AC 00 90 AD |  if_e	jmp	#LR__1698
14b2c     09 47 0E F2 | 	cmp	local17, #265 wz
14b30     B4 00 90 AD |  if_e	jmp	#LR__1699
14b34     0A 47 0E F2 | 	cmp	local17, #266 wz
14b38     BC 00 90 AD |  if_e	jmp	#LR__1700
14b3c     0B 47 0E F2 | 	cmp	local17, #267 wz
14b40     C4 00 90 AD |  if_e	jmp	#LR__1701
14b44     D0 00 90 FD | 	jmp	#LR__1702
14b48                 | LR__1689
14b48     18 4E 05 F1 | 	add	fp, #24
14b4c     A7 18 68 FC | 	wrlong	#12, fp
14b50     18 4E 85 F1 | 	sub	fp, #24
14b54     CC 00 90 FD | 	jmp	#LR__1703
14b58                 | LR__1690
14b58     18 4E 05 F1 | 	add	fp, #24
14b5c     A7 18 68 FC | 	wrlong	#12, fp
14b60     18 4E 85 F1 | 	sub	fp, #24
14b64     BC 00 90 FD | 	jmp	#LR__1703
14b68                 | LR__1691
14b68     18 4E 05 F1 | 	add	fp, #24
14b6c     A7 02 68 FC | 	wrlong	#1, fp
14b70     18 4E 85 F1 | 	sub	fp, #24
14b74     AC 00 90 FD | 	jmp	#LR__1703
14b78                 | LR__1692
14b78     18 4E 05 F1 | 	add	fp, #24
14b7c     A7 02 68 FC | 	wrlong	#1, fp
14b80     18 4E 85 F1 | 	sub	fp, #24
14b84     9C 00 90 FD | 	jmp	#LR__1703
14b88                 | LR__1693
14b88     18 4E 05 F1 | 	add	fp, #24
14b8c     A7 04 68 FC | 	wrlong	#2, fp
14b90     18 4E 85 F1 | 	sub	fp, #24
14b94     8C 00 90 FD | 	jmp	#LR__1703
14b98                 | LR__1694
14b98     18 4E 05 F1 | 	add	fp, #24
14b9c     A7 04 68 FC | 	wrlong	#2, fp
14ba0     18 4E 85 F1 | 	sub	fp, #24
14ba4     7C 00 90 FD | 	jmp	#LR__1703
14ba8                 | LR__1695
14ba8     18 4E 05 F1 | 	add	fp, #24
14bac     A7 08 68 FC | 	wrlong	#4, fp
14bb0     18 4E 85 F1 | 	sub	fp, #24
14bb4     6C 00 90 FD | 	jmp	#LR__1703
14bb8                 | LR__1696
14bb8     18 4E 05 F1 | 	add	fp, #24
14bbc     A7 08 68 FC | 	wrlong	#4, fp
14bc0     18 4E 85 F1 | 	sub	fp, #24
14bc4     5C 00 90 FD | 	jmp	#LR__1703
14bc8                 | LR__1697
14bc8     18 4E 05 F1 | 	add	fp, #24
14bcc     A7 10 68 FC | 	wrlong	#8, fp
14bd0     18 4E 85 F1 | 	sub	fp, #24
14bd4     4C 00 90 FD | 	jmp	#LR__1703
14bd8                 | LR__1698
14bd8     18 4E 05 F1 | 	add	fp, #24
14bdc     A7 10 68 FC | 	wrlong	#8, fp
14be0     18 4E 85 F1 | 	sub	fp, #24
14be4     3C 00 90 FD | 	jmp	#LR__1703
14be8                 | LR__1699
14be8     18 4E 05 F1 | 	add	fp, #24
14bec     A7 0C 68 FC | 	wrlong	#6, fp
14bf0     18 4E 85 F1 | 	sub	fp, #24
14bf4     2C 00 90 FD | 	jmp	#LR__1703
14bf8                 | LR__1700
14bf8     18 4E 05 F1 | 	add	fp, #24
14bfc     A7 10 68 FC | 	wrlong	#8, fp
14c00     18 4E 85 F1 | 	sub	fp, #24
14c04     1C 00 90 FD | 	jmp	#LR__1703
14c08                 | LR__1701
14c08     18 4E 05 F1 | 	add	fp, #24
14c0c     A7 0A 68 FC | 	wrlong	#5, fp
14c10     18 4E 85 F1 | 	sub	fp, #24
14c14     0C 00 90 FD | 	jmp	#LR__1703
14c18                 | LR__1702
14c18     18 4E 05 F1 | 	add	fp, #24
14c1c     A7 18 68 FC | 	wrlong	#12, fp
14c20     18 4E 85 F1 | 	sub	fp, #24
14c24                 | LR__1703
14c24                 | '   if esize=12 andalso t1.result.uresult<$80000 then
14c24     18 4E 05 F1 | 	add	fp, #24
14c28     A7 44 02 FB | 	rdlong	local16, fp
14c2c     18 4E 85 F1 | 	sub	fp, #24
14c30     0C 44 0E F2 | 	cmp	local16, #12 wz
14c34     74 01 90 5D |  if_ne	jmp	#LR__1708
14c38     1C 4E 05 F1 | 	add	fp, #28
14c3c     A7 32 02 FB | 	rdlong	local07, fp
14c40     1C 4E 85 F1 | 	sub	fp, #28
14c44     00 04 00 FF 
14c48     00 32 16 F2 | 	cmp	local07, ##524288 wc
14c4c     5C 01 90 3D |  if_ae	jmp	#LR__1708
14c50                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
14c50     52 00 00 FF 
14c54     4C E5 05 F1 | 	add	objptr, ##42316
14c58     F2 44 02 FB | 	rdlong	local16, objptr
14c5c     52 00 00 FF 
14c60     4C E5 85 F1 | 	sub	objptr, ##42316
14c64     1C 44 0E F2 | 	cmp	local16, #28 wz
14c68     38 00 90 5D |  if_ne	jmp	#LR__1704
14c6c     1C 4E 05 F1 | 	add	fp, #28
14c70     A7 44 02 FB | 	rdlong	local16, fp
14c74     14 4F 05 F1 | 	add	fp, #276
14c78     A7 32 02 FB | 	rdlong	local07, fp
14c7c     19 35 02 F6 | 	mov	local08, local07
14c80     02 34 66 F0 | 	shl	local08, #2
14c84     04 4F 85 F1 | 	sub	fp, #260
14c88     A7 36 02 F6 | 	mov	local09, fp
14c8c     A7 34 02 F1 | 	add	local08, fp
14c90     1A 13 02 FB | 	rdlong	arg01, local08
14c94     00 14 06 F6 | 	mov	arg02, #0
14c98     2C 4E 85 F1 | 	sub	fp, #44
14c9c     B0 63 B1 FD | 	call	#__system____builtin_atoi
14ca0     22 FB 61 FC | 	wrlong	result1, local16
14ca4                 | LR__1704
14ca4                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
14ca4     52 00 00 FF 
14ca8     4C E5 05 F1 | 	add	objptr, ##42316
14cac     F2 44 02 FB | 	rdlong	local16, objptr
14cb0     52 00 00 FF 
14cb4     4C E5 85 F1 | 	sub	objptr, ##42316
14cb8     1D 44 0E F2 | 	cmp	local16, #29 wz
14cbc     38 00 90 5D |  if_ne	jmp	#LR__1705
14cc0     1C 4E 05 F1 | 	add	fp, #28
14cc4     A7 44 02 FB | 	rdlong	local16, fp
14cc8     14 4F 05 F1 | 	add	fp, #276
14ccc     A7 32 02 FB | 	rdlong	local07, fp
14cd0     19 35 02 F6 | 	mov	local08, local07
14cd4     02 34 66 F0 | 	shl	local08, #2
14cd8     04 4F 85 F1 | 	sub	fp, #260
14cdc     A7 36 02 F6 | 	mov	local09, fp
14ce0     A7 34 02 F1 | 	add	local08, fp
14ce4     1A 13 02 FB | 	rdlong	arg01, local08
14ce8     00 14 06 F6 | 	mov	arg02, #0
14cec     2C 4E 85 F1 | 	sub	fp, #44
14cf0     5C 63 B1 FD | 	call	#__system____builtin_atoi
14cf4     22 FB 61 FC | 	wrlong	result1, local16
14cf8                 | LR__1705
14cf8                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
14cf8     52 00 00 FF 
14cfc     4C E5 05 F1 | 	add	objptr, ##42316
14d00     F2 44 02 FB | 	rdlong	local16, objptr
14d04     52 00 00 FF 
14d08     4C E5 85 F1 | 	sub	objptr, ##42316
14d0c     1E 44 0E F2 | 	cmp	local16, #30 wz
14d10     3C 00 90 5D |  if_ne	jmp	#LR__1706
14d14     30 4F 05 F1 | 	add	fp, #304
14d18     A7 32 02 FB | 	rdlong	local07, fp
14d1c     02 32 66 F0 | 	shl	local07, #2
14d20     04 4F 85 F1 | 	sub	fp, #260
14d24     A7 34 02 F6 | 	mov	local08, fp
14d28     A7 32 02 F1 | 	add	local07, fp
14d2c     19 13 02 FB | 	rdlong	arg01, local07
14d30     2C 4E 85 F1 | 	sub	fp, #44
14d34     B0 64 B1 FD | 	call	#__system____builtin_atof
14d38     28 4E 05 F1 | 	add	fp, #40
14d3c     A7 FA 61 FC | 	wrlong	result1, fp
14d40     0C 4E 85 F1 | 	sub	fp, #12
14d44     A7 44 02 FB | 	rdlong	local16, fp
14d48     1C 4E 85 F1 | 	sub	fp, #28
14d4c     22 FB 61 FC | 	wrlong	result1, local16
14d50                 | LR__1706
14d50                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
14d50     52 00 00 FF 
14d54     4C E5 05 F1 | 	add	objptr, ##42316
14d58     F2 44 02 FB | 	rdlong	local16, objptr
14d5c     52 00 00 FF 
14d60     4C E5 85 F1 | 	sub	objptr, ##42316
14d64     2B 44 0E F2 | 	cmp	local16, #43 wz
14d68     18 00 90 5D |  if_ne	jmp	#LR__1707
14d6c     1C 4E 05 F1 | 	add	fp, #28
14d70     A7 12 02 FB | 	rdlong	arg01, fp
14d74     0C 4E 85 F1 | 	sub	fp, #12
14d78     A7 14 02 FB | 	rdlong	arg02, fp
14d7c     10 4E 85 F1 | 	sub	fp, #16
14d80     09 15 62 FC | 	wrlong	arg02, arg01
14d84                 | LR__1707
14d84     1C 4E 05 F1 | 	add	fp, #28
14d88     A7 12 02 FB | 	rdlong	arg01, fp
14d8c     1C 4E 85 F1 | 	sub	fp, #28
14d90     08 12 06 F1 | 	add	arg01, #8
14d94     52 00 00 FF 
14d98     4C E5 05 F1 | 	add	objptr, ##42316
14d9c     F2 14 02 FB | 	rdlong	arg02, objptr
14da0     52 00 00 FF 
14da4     4C E5 85 F1 | 	sub	objptr, ##42316
14da8     09 15 62 FC | 	wrlong	arg02, arg01
14dac                 | LR__1708
14dac                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
14dac     18 4E 05 F1 | 	add	fp, #24
14db0     A7 44 02 FB | 	rdlong	local16, fp
14db4     18 4E 85 F1 | 	sub	fp, #24
14db8     0C 44 0E F2 | 	cmp	local16, #12 wz
14dbc     94 01 90 5D |  if_ne	jmp	#LR__1713
14dc0     1C 4E 05 F1 | 	add	fp, #28
14dc4     A7 32 02 FB | 	rdlong	local07, fp
14dc8     1C 4E 85 F1 | 	sub	fp, #28
14dcc     00 04 00 FF 
14dd0     00 32 16 F2 | 	cmp	local07, ##524288 wc
14dd4     7C 01 90 CD |  if_b	jmp	#LR__1713
14dd8                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
14dd8     52 00 00 FF 
14ddc     4C E5 05 F1 | 	add	objptr, ##42316
14de0     F2 44 02 FB | 	rdlong	local16, objptr
14de4     52 00 00 FF 
14de8     4C E5 85 F1 | 	sub	objptr, ##42316
14dec     1C 44 0E F2 | 	cmp	local16, #28 wz
14df0     40 00 90 5D |  if_ne	jmp	#LR__1709
14df4     1C 4E 05 F1 | 	add	fp, #28
14df8     A7 44 02 FB | 	rdlong	local16, fp
14dfc     14 4F 05 F1 | 	add	fp, #276
14e00     A7 32 02 FB | 	rdlong	local07, fp
14e04     19 35 02 F6 | 	mov	local08, local07
14e08     02 34 66 F0 | 	shl	local08, #2
14e0c     04 4F 85 F1 | 	sub	fp, #260
14e10     A7 36 02 F6 | 	mov	local09, fp
14e14     A7 34 02 F1 | 	add	local08, fp
14e18     1A 13 02 FB | 	rdlong	arg01, local08
14e1c     00 14 06 F6 | 	mov	arg02, #0
14e20     2C 4E 85 F1 | 	sub	fp, #44
14e24     28 62 B1 FD | 	call	#__system____builtin_atoi
14e28     FD 14 02 F6 | 	mov	arg02, result1
14e2c     22 13 02 F6 | 	mov	arg01, local16
14e30     68 F4 B0 FD | 	call	#_pslpoke
14e34                 | LR__1709
14e34                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
14e34     52 00 00 FF 
14e38     4C E5 05 F1 | 	add	objptr, ##42316
14e3c     F2 44 02 FB | 	rdlong	local16, objptr
14e40     52 00 00 FF 
14e44     4C E5 85 F1 | 	sub	objptr, ##42316
14e48     1D 44 0E F2 | 	cmp	local16, #29 wz
14e4c     40 00 90 5D |  if_ne	jmp	#LR__1710
14e50     1C 4E 05 F1 | 	add	fp, #28
14e54     A7 44 02 FB | 	rdlong	local16, fp
14e58     14 4F 05 F1 | 	add	fp, #276
14e5c     A7 32 02 FB | 	rdlong	local07, fp
14e60     19 35 02 F6 | 	mov	local08, local07
14e64     02 34 66 F0 | 	shl	local08, #2
14e68     04 4F 85 F1 | 	sub	fp, #260
14e6c     A7 36 02 F6 | 	mov	local09, fp
14e70     A7 34 02 F1 | 	add	local08, fp
14e74     1A 13 02 FB | 	rdlong	arg01, local08
14e78     00 14 06 F6 | 	mov	arg02, #0
14e7c     2C 4E 85 F1 | 	sub	fp, #44
14e80     CC 61 B1 FD | 	call	#__system____builtin_atoi
14e84     FD 14 02 F6 | 	mov	arg02, result1
14e88     22 13 02 F6 | 	mov	arg01, local16
14e8c     0C F4 B0 FD | 	call	#_pslpoke
14e90                 | LR__1710
14e90                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14e90     52 00 00 FF 
14e94     4C E5 05 F1 | 	add	objptr, ##42316
14e98     F2 44 02 FB | 	rdlong	local16, objptr
14e9c     52 00 00 FF 
14ea0     4C E5 85 F1 | 	sub	objptr, ##42316
14ea4     1E 44 0E F2 | 	cmp	local16, #30 wz
14ea8     4C 00 90 5D |  if_ne	jmp	#LR__1711
14eac     30 4F 05 F1 | 	add	fp, #304
14eb0     A7 32 02 FB | 	rdlong	local07, fp
14eb4     02 32 66 F0 | 	shl	local07, #2
14eb8     04 4F 85 F1 | 	sub	fp, #260
14ebc     A7 34 02 F6 | 	mov	local08, fp
14ec0     A7 32 02 F1 | 	add	local07, fp
14ec4     19 13 02 FB | 	rdlong	arg01, local07
14ec8     2C 4E 85 F1 | 	sub	fp, #44
14ecc     18 63 B1 FD | 	call	#__system____builtin_atof
14ed0     28 4E 05 F1 | 	add	fp, #40
14ed4     A7 FA 61 FC | 	wrlong	result1, fp
14ed8     0C 4E 85 F1 | 	sub	fp, #12
14edc     A7 44 02 FB | 	rdlong	local16, fp
14ee0     0C 4E 05 F1 | 	add	fp, #12
14ee4     A7 12 02 F6 | 	mov	arg01, fp
14ee8     28 4E 85 F1 | 	sub	fp, #40
14eec     09 15 02 FB | 	rdlong	arg02, arg01
14ef0     22 13 02 F6 | 	mov	arg01, local16
14ef4     A4 F3 B0 FD | 	call	#_pslpoke
14ef8                 | LR__1711
14ef8                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
14ef8     52 00 00 FF 
14efc     4C E5 05 F1 | 	add	objptr, ##42316
14f00     F2 44 02 FB | 	rdlong	local16, objptr
14f04     52 00 00 FF 
14f08     4C E5 85 F1 | 	sub	objptr, ##42316
14f0c     2B 44 0E F2 | 	cmp	local16, #43 wz
14f10     18 00 90 5D |  if_ne	jmp	#LR__1712
14f14     1C 4E 05 F1 | 	add	fp, #28
14f18     A7 12 02 FB | 	rdlong	arg01, fp
14f1c     0C 4E 85 F1 | 	sub	fp, #12
14f20     A7 14 02 FB | 	rdlong	arg02, fp
14f24     10 4E 85 F1 | 	sub	fp, #16
14f28     70 F3 B0 FD | 	call	#_pslpoke
14f2c                 | LR__1712
14f2c     1C 4E 05 F1 | 	add	fp, #28
14f30     A7 12 02 FB | 	rdlong	arg01, fp
14f34     1C 4E 85 F1 | 	sub	fp, #28
14f38     08 12 06 F1 | 	add	arg01, #8
14f3c     52 00 00 FF 
14f40     4C E5 05 F1 | 	add	objptr, ##42316
14f44     F2 14 02 FB | 	rdlong	arg02, objptr
14f48     52 00 00 FF 
14f4c     4C E5 85 F1 | 	sub	objptr, ##42316
14f50     48 F3 B0 FD | 	call	#_pslpoke
14f54                 | LR__1713
14f54                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
14f54     18 4E 05 F1 | 	add	fp, #24
14f58     A7 44 02 FB | 	rdlong	local16, fp
14f5c     18 4E 85 F1 | 	sub	fp, #24
14f60     05 44 0E F2 | 	cmp	local16, #5 wz
14f64     52 00 00 AF 
14f68     4C E5 05 A1 |  if_e	add	objptr, ##42316
14f6c     F2 42 02 AB |  if_e	rdlong	local15, objptr
14f70     52 00 00 AF 
14f74     4C E5 85 A1 |  if_e	sub	objptr, ##42316
14f78     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
14f7c     18 00 90 5D |  if_ne	jmp	#LR__1714
14f80     1C 4E 05 F1 | 	add	fp, #28
14f84     A7 12 02 FB | 	rdlong	arg01, fp
14f88     0C 4E 85 F1 | 	sub	fp, #12
14f8c     A7 14 02 FB | 	rdlong	arg02, fp
14f90     10 4E 85 F1 | 	sub	fp, #16
14f94     04 F3 B0 FD | 	call	#_pslpoke
14f98                 | LR__1714
14f98                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
14f98     18 4E 05 F1 | 	add	fp, #24
14f9c     A7 44 02 FB | 	rdlong	local16, fp
14fa0     18 4E 85 F1 | 	sub	fp, #24
14fa4     04 44 0E F2 | 	cmp	local16, #4 wz
14fa8     54 00 90 5D |  if_ne	jmp	#LR__1715
14fac     52 00 00 FF 
14fb0     4C E5 05 F1 | 	add	objptr, ##42316
14fb4     F2 42 02 FB | 	rdlong	local15, objptr
14fb8     52 00 00 FF 
14fbc     4C E5 85 F1 | 	sub	objptr, ##42316
14fc0     2B 42 0E F2 | 	cmp	local15, #43 wz
14fc4     38 00 90 AD |  if_e	jmp	#LR__1715
14fc8     1C 4E 05 F1 | 	add	fp, #28
14fcc     A7 44 02 FB | 	rdlong	local16, fp
14fd0     14 4F 05 F1 | 	add	fp, #276
14fd4     A7 34 02 FB | 	rdlong	local08, fp
14fd8     02 34 66 F0 | 	shl	local08, #2
14fdc     04 4F 85 F1 | 	sub	fp, #260
14fe0     A7 34 02 F1 | 	add	local08, fp
14fe4     1A 13 02 FB | 	rdlong	arg01, local08
14fe8     00 14 06 F6 | 	mov	arg02, #0
14fec     2C 4E 85 F1 | 	sub	fp, #44
14ff0     5C 60 B1 FD | 	call	#__system____builtin_atoi
14ff4     FD 14 02 F6 | 	mov	arg02, result1
14ff8     22 13 02 F6 | 	mov	arg01, local16
14ffc     9C F2 B0 FD | 	call	#_pslpoke
15000                 | LR__1715
15000                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
15000     18 4E 05 F1 | 	add	fp, #24
15004     A7 44 02 FB | 	rdlong	local16, fp
15008     18 4E 85 F1 | 	sub	fp, #24
1500c     02 44 0E F2 | 	cmp	local16, #2 wz
15010     54 00 90 5D |  if_ne	jmp	#LR__1716
15014     52 00 00 FF 
15018     4C E5 05 F1 | 	add	objptr, ##42316
1501c     F2 42 02 FB | 	rdlong	local15, objptr
15020     52 00 00 FF 
15024     4C E5 85 F1 | 	sub	objptr, ##42316
15028     2B 42 0E F2 | 	cmp	local15, #43 wz
1502c     38 00 90 AD |  if_e	jmp	#LR__1716
15030     1C 4E 05 F1 | 	add	fp, #28
15034     A7 44 02 FB | 	rdlong	local16, fp
15038     14 4F 05 F1 | 	add	fp, #276
1503c     A7 34 02 FB | 	rdlong	local08, fp
15040     02 34 66 F0 | 	shl	local08, #2
15044     04 4F 85 F1 | 	sub	fp, #260
15048     A7 34 02 F1 | 	add	local08, fp
1504c     1A 13 02 FB | 	rdlong	arg01, local08
15050     00 14 06 F6 | 	mov	arg02, #0
15054     2C 4E 85 F1 | 	sub	fp, #44
15058     F4 5F B1 FD | 	call	#__system____builtin_atoi
1505c     FD 14 02 F6 | 	mov	arg02, result1
15060     22 13 02 F6 | 	mov	arg01, local16
15064     7C F2 B0 FD | 	call	#_psdpoke
15068                 | LR__1716
15068                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
15068     18 4E 05 F1 | 	add	fp, #24
1506c     A7 44 02 FB | 	rdlong	local16, fp
15070     18 4E 85 F1 | 	sub	fp, #24
15074     01 44 0E F2 | 	cmp	local16, #1 wz
15078     54 00 90 5D |  if_ne	jmp	#LR__1717
1507c     52 00 00 FF 
15080     4C E5 05 F1 | 	add	objptr, ##42316
15084     F2 42 02 FB | 	rdlong	local15, objptr
15088     52 00 00 FF 
1508c     4C E5 85 F1 | 	sub	objptr, ##42316
15090     2B 42 0E F2 | 	cmp	local15, #43 wz
15094     38 00 90 AD |  if_e	jmp	#LR__1717
15098     1C 4E 05 F1 | 	add	fp, #28
1509c     A7 44 02 FB | 	rdlong	local16, fp
150a0     14 4F 05 F1 | 	add	fp, #276
150a4     A7 34 02 FB | 	rdlong	local08, fp
150a8     02 34 66 F0 | 	shl	local08, #2
150ac     04 4F 85 F1 | 	sub	fp, #260
150b0     A7 34 02 F1 | 	add	local08, fp
150b4     1A 13 02 FB | 	rdlong	arg01, local08
150b8     00 14 06 F6 | 	mov	arg02, #0
150bc     2C 4E 85 F1 | 	sub	fp, #44
150c0     8C 5F B1 FD | 	call	#__system____builtin_atoi
150c4     FD 14 02 F6 | 	mov	arg02, result1
150c8     22 13 02 F6 | 	mov	arg01, local16
150cc     5C F2 B0 FD | 	call	#_pspoke
150d0                 | LR__1717
150d0                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
150d0     18 4E 05 F1 | 	add	fp, #24
150d4     A7 44 02 FB | 	rdlong	local16, fp
150d8     18 4E 85 F1 | 	sub	fp, #24
150dc     06 44 0E F2 | 	cmp	local16, #6 wz
150e0     64 00 90 5D |  if_ne	jmp	#LR__1718
150e4     52 00 00 FF 
150e8     4C E5 05 F1 | 	add	objptr, ##42316
150ec     F2 42 02 FB | 	rdlong	local15, objptr
150f0     52 00 00 FF 
150f4     4C E5 85 F1 | 	sub	objptr, ##42316
150f8     2B 42 0E F2 | 	cmp	local15, #43 wz
150fc     48 00 90 AD |  if_e	jmp	#LR__1718
15100     30 4F 05 F1 | 	add	fp, #304
15104     A7 32 02 FB | 	rdlong	local07, fp
15108     02 32 66 F0 | 	shl	local07, #2
1510c     04 4F 85 F1 | 	sub	fp, #260
15110     A7 32 02 F1 | 	add	local07, fp
15114     19 13 02 FB | 	rdlong	arg01, local07
15118     2C 4E 85 F1 | 	sub	fp, #44
1511c     C8 60 B1 FD | 	call	#__system____builtin_atof
15120     28 4E 05 F1 | 	add	fp, #40
15124     A7 FA 61 FC | 	wrlong	result1, fp
15128     0C 4E 85 F1 | 	sub	fp, #12
1512c     A7 44 02 FB | 	rdlong	local16, fp
15130     0C 4E 05 F1 | 	add	fp, #12
15134     A7 12 02 F6 | 	mov	arg01, fp
15138     28 4E 85 F1 | 	sub	fp, #40
1513c     09 15 02 FB | 	rdlong	arg02, arg01
15140     22 13 02 F6 | 	mov	arg01, local16
15144     54 F1 B0 FD | 	call	#_pslpoke
15148                 | LR__1718
15148     30 4F 05 F1 | 	add	fp, #304
1514c     A7 42 02 FB | 	rdlong	local15, fp
15150     01 42 06 F1 | 	add	local15, #1
15154     A7 42 62 FC | 	wrlong	local15, fp
15158     30 4F 85 F1 | 	sub	fp, #304
1515c     E4 F6 9F FD | 	jmp	#LR__1683
15160                 | LR__1719
15160                 | LR__1720
15160     A7 F0 03 F6 | 	mov	ptra, fp
15164     B2 00 A0 FD | 	call	#popregs_
15168                 | _do_input_ret
15168     2D 00 64 FD | 	ret
1516c                 | 
1516c                 | ' 
1516c                 | ' ' ----------------  left$
1516c                 | ' 
1516c                 | ' sub do_left
1516c                 | _do_left
1516c     00 4A 05 F6 | 	mov	COUNT_, #0
15170     A8 00 A0 FD | 	call	#pushregs_
15174     14 F0 07 F1 | 	add	ptra, #20
15178     4A 00 00 FF 
1517c     80 E4 05 F1 | 	add	objptr, ##38016
15180     F2 16 02 FB | 	rdlong	arg03, objptr
15184     0B 15 02 F6 | 	mov	arg02, arg03
15188     01 14 66 F0 | 	shl	arg02, #1
1518c     0B 15 02 F1 | 	add	arg02, arg03
15190     02 14 66 F0 | 	shl	arg02, #2
15194     03 00 00 FF 
15198     04 E4 85 F1 | 	sub	objptr, ##1540
1519c     F2 14 02 F1 | 	add	arg02, objptr
151a0     0A 17 02 FB | 	rdlong	arg03, arg02
151a4     0C 4E 05 F1 | 	add	fp, #12
151a8     A7 16 62 FC | 	wrlong	arg03, fp
151ac                 | ' 
151ac                 | ' numpar=compiledline(lineptr_e).result.uresult
151ac                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
151ac     0C 4E 85 F1 | 	sub	fp, #12
151b0     02 16 0E F2 | 	cmp	arg03, #2 wz
151b4     47 00 00 FF 
151b8     7C E4 85 F1 | 	sub	objptr, ##36476
151bc     40 00 90 AD |  if_e	jmp	#LR__1730
151c0     00 12 06 F6 | 	mov	arg01, #0
151c4     44 86 B1 FD | 	call	#__system___getiolock_0620
151c8     FD 12 02 F6 | 	mov	arg01, result1
151cc     8C 29 B1 FD | 	call	#__system___lockmem
151d0     C0 01 00 FF 
151d4     2C 15 06 F6 | 	mov	arg02, ##@LR__6071
151d8     00 12 06 F6 | 	mov	arg01, #0
151dc     00 16 06 F6 | 	mov	arg03, #0
151e0     70 36 B1 FD | 	call	#__system___basic_print_string
151e4     00 12 06 F6 | 	mov	arg01, #0
151e8     20 86 B1 FD | 	call	#__system___getiolock_0620
151ec     FD 00 68 FC | 	wrlong	#0, result1
151f0     27 12 06 F6 | 	mov	arg01, #39
151f4     00 14 06 F6 | 	mov	arg02, #0
151f8     00 EF B0 FD | 	call	#_printerror
151fc     EC 00 90 FD | 	jmp	#LR__1733
15200                 | LR__1730
15200     1C 86 BF FD | 	call	#_pop
15204     FF 16 02 F6 | 	mov	arg03, result3
15208     A7 FA 61 FC | 	wrlong	result1, fp
1520c     04 4E 05 F1 | 	add	fp, #4
15210     A7 FC 61 FC | 	wrlong	result2, fp
15214     04 4E 05 F1 | 	add	fp, #4
15218     A7 16 62 FC | 	wrlong	arg03, fp
1521c     08 4E 85 F1 | 	sub	fp, #8
15220     A7 12 02 F6 | 	mov	arg01, fp
15224     DC 87 BF FD | 	call	#_converttoint
15228     FD 16 02 F6 | 	mov	arg03, result1
1522c     10 4E 05 F1 | 	add	fp, #16
15230     A7 16 62 FC | 	wrlong	arg03, fp
15234     10 4E 85 F1 | 	sub	fp, #16
15238     E4 85 BF FD | 	call	#_pop
1523c     FF 16 02 F6 | 	mov	arg03, result3
15240     A7 FA 61 FC | 	wrlong	result1, fp
15244     04 4E 05 F1 | 	add	fp, #4
15248     A7 FC 61 FC | 	wrlong	result2, fp
1524c     04 4E 05 F1 | 	add	fp, #4
15250     A7 16 62 FC | 	wrlong	arg03, fp
15254                 | ' t1=pop() : arg=converttoint(t1)
15254                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15254     08 4E 85 F1 | 	sub	fp, #8
15258     2B 16 0E F2 | 	cmp	arg03, #43 wz
1525c     18 00 90 5D |  if_ne	jmp	#LR__1731
15260     A7 12 02 FB | 	rdlong	arg01, fp
15264     30 87 BF FD | 	call	#_convertstring
15268     A7 FA 61 FC | 	wrlong	result1, fp
1526c     08 4E 05 F1 | 	add	fp, #8
15270     A7 3E 68 FC | 	wrlong	#31, fp
15274     08 4E 85 F1 | 	sub	fp, #8
15278                 | LR__1731
15278                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
15278     08 4E 05 F1 | 	add	fp, #8
1527c     A7 16 02 FB | 	rdlong	arg03, fp
15280     08 4E 85 F1 | 	sub	fp, #8
15284     1F 16 0E F2 | 	cmp	arg03, #31 wz
15288     40 00 90 AD |  if_e	jmp	#LR__1732
1528c     00 12 06 F6 | 	mov	arg01, #0
15290     78 85 B1 FD | 	call	#__system___getiolock_0620
15294     FD 12 02 F6 | 	mov	arg01, result1
15298     C0 28 B1 FD | 	call	#__system___lockmem
1529c     C0 01 00 FF 
152a0     34 15 06 F6 | 	mov	arg02, ##@LR__6072
152a4     00 12 06 F6 | 	mov	arg01, #0
152a8     00 16 06 F6 | 	mov	arg03, #0
152ac     A4 35 B1 FD | 	call	#__system___basic_print_string
152b0     00 12 06 F6 | 	mov	arg01, #0
152b4     54 85 B1 FD | 	call	#__system___getiolock_0620
152b8     FD 00 68 FC | 	wrlong	#0, result1
152bc     0F 12 06 F6 | 	mov	arg01, #15
152c0     00 14 06 F6 | 	mov	arg02, #0
152c4     34 EE B0 FD | 	call	#_printerror
152c8     20 00 90 FD | 	jmp	#LR__1733
152cc                 | LR__1732
152cc     A7 12 02 FB | 	rdlong	arg01, fp
152d0     10 4E 05 F1 | 	add	fp, #16
152d4     A7 14 02 FB | 	rdlong	arg02, fp
152d8     10 4E 85 F1 | 	sub	fp, #16
152dc     FC 48 B1 FD | 	call	#__system__Left_S
152e0     A7 FA 61 FC | 	wrlong	result1, fp
152e4     A7 12 02 F6 | 	mov	arg01, fp
152e8     CC 85 BF FD | 	call	#_push
152ec                 | LR__1733
152ec     A7 F0 03 F6 | 	mov	ptra, fp
152f0     B2 00 A0 FD | 	call	#popregs_
152f4                 | _do_left_ret
152f4     2D 00 64 FD | 	ret
152f8                 | 
152f8                 | ' 
152f8                 | ' ' ----------------  len
152f8                 | ' 
152f8                 | ' sub do_len
152f8                 | _do_len
152f8     02 4A 05 F6 | 	mov	COUNT_, #2
152fc     A8 00 A0 FD | 	call	#pushregs_
15300     14 F0 07 F1 | 	add	ptra, #20
15304     4A 00 00 FF 
15308     80 E4 05 F1 | 	add	objptr, ##38016
1530c     F2 26 02 FB | 	rdlong	local01, objptr
15310     13 17 02 F6 | 	mov	arg03, local01
15314     01 16 66 F0 | 	shl	arg03, #1
15318     13 17 02 F1 | 	add	arg03, local01
1531c     02 16 66 F0 | 	shl	arg03, #2
15320     03 00 00 FF 
15324     04 E4 85 F1 | 	sub	objptr, ##1540
15328     F2 16 02 F1 | 	add	arg03, objptr
1532c     0B 17 02 FB | 	rdlong	arg03, arg03
15330     0C 4E 05 F1 | 	add	fp, #12
15334     A7 16 62 FC | 	wrlong	arg03, fp
15338                 | ' 
15338                 | ' numpar=compiledline(lineptr_e).result.uresult
15338                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
15338     0C 4E 85 F1 | 	sub	fp, #12
1533c     02 16 16 F2 | 	cmp	arg03, #2 wc
15340     47 00 00 FF 
15344     7C E4 85 F1 | 	sub	objptr, ##36476
15348     0C 4E 05 C1 |  if_b	add	fp, #12
1534c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
15350     0C 4E 85 C1 |  if_b	sub	fp, #12
15354     40 00 90 4D |  if_c_and_nz	jmp	#LR__1740
15358     00 12 06 F6 | 	mov	arg01, #0
1535c     AC 84 B1 FD | 	call	#__system___getiolock_0620
15360     FD 12 02 F6 | 	mov	arg01, result1
15364     F4 27 B1 FD | 	call	#__system___lockmem
15368     C0 01 00 FF 
1536c     3C 15 06 F6 | 	mov	arg02, ##@LR__6073
15370     00 12 06 F6 | 	mov	arg01, #0
15374     00 16 06 F6 | 	mov	arg03, #0
15378     D8 34 B1 FD | 	call	#__system___basic_print_string
1537c     00 12 06 F6 | 	mov	arg01, #0
15380     88 84 B1 FD | 	call	#__system___getiolock_0620
15384     FD 00 68 FC | 	wrlong	#0, result1
15388     27 12 06 F6 | 	mov	arg01, #39
1538c     00 14 06 F6 | 	mov	arg02, #0
15390     68 ED B0 FD | 	call	#_printerror
15394     C8 00 90 FD | 	jmp	#LR__1745
15398                 | LR__1740
15398     84 84 BF FD | 	call	#_pop
1539c     FF 16 02 F6 | 	mov	arg03, result3
153a0     A7 FA 61 FC | 	wrlong	result1, fp
153a4     04 4E 05 F1 | 	add	fp, #4
153a8     A7 FC 61 FC | 	wrlong	result2, fp
153ac     04 4E 05 F1 | 	add	fp, #4
153b0     A7 16 62 FC | 	wrlong	arg03, fp
153b4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
153b4     08 4E 85 F1 | 	sub	fp, #8
153b8     2B 16 0E F2 | 	cmp	arg03, #43 wz
153bc     18 00 90 5D |  if_ne	jmp	#LR__1741
153c0     A7 12 02 FB | 	rdlong	arg01, fp
153c4     D0 85 BF FD | 	call	#_convertstring
153c8     A7 FA 61 FC | 	wrlong	result1, fp
153cc     08 4E 05 F1 | 	add	fp, #8
153d0     A7 3E 68 FC | 	wrlong	#31, fp
153d4     08 4E 85 F1 | 	sub	fp, #8
153d8                 | LR__1741
153d8                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
153d8     08 4E 05 F1 | 	add	fp, #8
153dc     A7 16 02 FB | 	rdlong	arg03, fp
153e0     08 4E 85 F1 | 	sub	fp, #8
153e4     1F 16 0E F2 | 	cmp	arg03, #31 wz
153e8     40 00 90 AD |  if_e	jmp	#LR__1742
153ec     00 12 06 F6 | 	mov	arg01, #0
153f0     18 84 B1 FD | 	call	#__system___getiolock_0620
153f4     FD 12 02 F6 | 	mov	arg01, result1
153f8     60 27 B1 FD | 	call	#__system___lockmem
153fc     C0 01 00 FF 
15400     42 15 06 F6 | 	mov	arg02, ##@LR__6074
15404     00 12 06 F6 | 	mov	arg01, #0
15408     00 16 06 F6 | 	mov	arg03, #0
1540c     44 34 B1 FD | 	call	#__system___basic_print_string
15410     00 12 06 F6 | 	mov	arg01, #0
15414     F4 83 B1 FD | 	call	#__system___getiolock_0620
15418     FD 00 68 FC | 	wrlong	#0, result1
1541c     0F 12 06 F6 | 	mov	arg01, #15
15420     00 14 06 F6 | 	mov	arg02, #0
15424     D4 EC B0 FD | 	call	#_printerror
15428     34 00 90 FD | 	jmp	#LR__1745
1542c                 | LR__1742
1542c     A7 12 02 FB | 	rdlong	arg01, fp
15430     09 29 02 F6 | 	mov	local02, arg01
15434     97 06 48 FB | 	callpa	#(@LR__1744-@LR__1743)>>2,fcache_load_ptr_
15438                 | LR__1743
15438     14 FB C9 FA | 	rdbyte	result1, local02 wz
1543c     01 28 06 51 |  if_ne	add	local02, #1
15440     F4 FF 9F 5D |  if_ne	jmp	#LR__1743
15444                 | LR__1744
15444     09 29 82 F1 | 	sub	local02, arg01
15448     A7 28 62 FC | 	wrlong	local02, fp
1544c     08 4E 05 F1 | 	add	fp, #8
15450     A7 38 68 FC | 	wrlong	#28, fp
15454     08 4E 85 F1 | 	sub	fp, #8
15458     A7 12 02 F6 | 	mov	arg01, fp
1545c     58 84 BF FD | 	call	#_push
15460                 | LR__1745
15460     A7 F0 03 F6 | 	mov	ptra, fp
15464     B2 00 A0 FD | 	call	#popregs_
15468                 | _do_len_ret
15468     2D 00 64 FD | 	ret
1546c                 | 
1546c                 | ' 
1546c                 | ' ' ----------------  list
1546c                 | ' 
1546c                 | ' sub do_list
1546c                 | _do_list
1546c     02 4A 05 F6 | 	mov	COUNT_, #2
15470     A8 00 A0 FD | 	call	#pushregs_
15474     B8 F0 07 F1 | 	add	ptra, #184
15478     04 4E 05 F1 | 	add	fp, #4
1547c     A7 00 68 FC | 	wrlong	#0, fp
15480     04 4E 05 F1 | 	add	fp, #4
15484     FF FF BF FF 
15488     A7 FE 6B FC | 	wrlong	##2147483647, fp
1548c     08 4E 85 F1 | 	sub	fp, #8
15490     4A 00 00 FF 
15494     80 E4 05 F1 | 	add	objptr, ##38016
15498     F2 26 02 FB | 	rdlong	local01, objptr
1549c     13 17 02 F6 | 	mov	arg03, local01
154a0     01 16 66 F0 | 	shl	arg03, #1
154a4     13 17 02 F1 | 	add	arg03, local01
154a8     02 16 66 F0 | 	shl	arg03, #2
154ac     03 00 00 FF 
154b0     04 E4 85 F1 | 	sub	objptr, ##1540
154b4     F2 16 02 F1 | 	add	arg03, objptr
154b8     0B 17 02 FB | 	rdlong	arg03, arg03
154bc     A7 16 62 FC | 	wrlong	arg03, fp
154c0                 | ' 
154c0                 | ' startline=0 : endline=$7FFFFFFF
154c0                 | ' numpar=compiledline(lineptr_e).result.uresult
154c0                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
154c0     01 16 0E F2 | 	cmp	arg03, #1 wz
154c4     47 00 00 FF 
154c8     7C E4 85 F1 | 	sub	objptr, ##36476
154cc     3C 00 90 5D |  if_ne	jmp	#LR__1750
154d0     4C 83 BF FD | 	call	#_pop
154d4     FF 26 02 F6 | 	mov	local01, result3
154d8     0C 4E 05 F1 | 	add	fp, #12
154dc     A7 FA 61 FC | 	wrlong	result1, fp
154e0     04 4E 05 F1 | 	add	fp, #4
154e4     A7 FC 61 FC | 	wrlong	result2, fp
154e8     04 4E 05 F1 | 	add	fp, #4
154ec     A7 26 62 FC | 	wrlong	local01, fp
154f0     08 4E 85 F1 | 	sub	fp, #8
154f4     A7 12 02 F6 | 	mov	arg01, fp
154f8     0C 4E 85 F1 | 	sub	fp, #12
154fc     04 85 BF FD | 	call	#_converttoint
15500     04 4E 05 F1 | 	add	fp, #4
15504     A7 FA 61 FC | 	wrlong	result1, fp
15508     04 4E 85 F1 | 	sub	fp, #4
1550c                 | LR__1750
1550c                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
1550c     A7 16 02 FB | 	rdlong	arg03, fp
15510     02 16 0E F2 | 	cmp	arg03, #2 wz
15514     7C 00 90 5D |  if_ne	jmp	#LR__1751
15518     04 83 BF FD | 	call	#_pop
1551c     FF 26 02 F6 | 	mov	local01, result3
15520     0C 4E 05 F1 | 	add	fp, #12
15524     A7 FA 61 FC | 	wrlong	result1, fp
15528     04 4E 05 F1 | 	add	fp, #4
1552c     A7 FC 61 FC | 	wrlong	result2, fp
15530     04 4E 05 F1 | 	add	fp, #4
15534     A7 26 62 FC | 	wrlong	local01, fp
15538     08 4E 85 F1 | 	sub	fp, #8
1553c     A7 12 02 F6 | 	mov	arg01, fp
15540     0C 4E 85 F1 | 	sub	fp, #12
15544     BC 84 BF FD | 	call	#_converttoint
15548     FD 26 02 F6 | 	mov	local01, result1
1554c     08 4E 05 F1 | 	add	fp, #8
15550     A7 26 62 FC | 	wrlong	local01, fp
15554     08 4E 85 F1 | 	sub	fp, #8
15558     C4 82 BF FD | 	call	#_pop
1555c     FF 26 02 F6 | 	mov	local01, result3
15560     0C 4E 05 F1 | 	add	fp, #12
15564     A7 FA 61 FC | 	wrlong	result1, fp
15568     04 4E 05 F1 | 	add	fp, #4
1556c     A7 FC 61 FC | 	wrlong	result2, fp
15570     04 4E 05 F1 | 	add	fp, #4
15574     A7 26 62 FC | 	wrlong	local01, fp
15578     08 4E 85 F1 | 	sub	fp, #8
1557c     A7 12 02 F6 | 	mov	arg01, fp
15580     0C 4E 85 F1 | 	sub	fp, #12
15584     7C 84 BF FD | 	call	#_converttoint
15588     04 4E 05 F1 | 	add	fp, #4
1558c     A7 FA 61 FC | 	wrlong	result1, fp
15590     04 4E 85 F1 | 	sub	fp, #4
15594                 | LR__1751
15594                 | ' 
15594                 | ' 
15594                 | ' print
15594     00 12 06 F6 | 	mov	arg01, #0
15598     70 82 B1 FD | 	call	#__system___getiolock_0620
1559c     FD 12 02 F6 | 	mov	arg01, result1
155a0     B8 25 B1 FD | 	call	#__system___lockmem
155a4     00 12 06 F6 | 	mov	arg01, #0
155a8     0A 14 06 F6 | 	mov	arg02, #10
155ac     00 16 06 F6 | 	mov	arg03, #0
155b0     48 32 B1 FD | 	call	#__system___basic_print_char
155b4     00 12 06 F6 | 	mov	arg01, #0
155b8     50 82 B1 FD | 	call	#__system___getiolock_0620
155bc     FD 00 68 FC | 	wrlong	#0, result1
155c0     4A 00 00 FF 
155c4     88 E4 05 F1 | 	add	objptr, ##38024
155c8     F2 28 02 FB | 	rdlong	local02, objptr
155cc     08 00 00 FF 
155d0     D0 E4 05 F1 | 	add	objptr, ##4304
155d4     F2 28 62 FC | 	wrlong	local02, objptr
155d8     52 00 00 FF 
155dc     58 E5 85 F1 | 	sub	objptr, ##42328
155e0                 | ' do 
155e0                 | LR__1752
155e0     20 4E 05 F1 | 	add	fp, #32
155e4     A7 12 02 F6 | 	mov	arg01, fp
155e8     20 4E 85 F1 | 	sub	fp, #32
155ec     52 00 00 FF 
155f0     58 E5 05 F1 | 	add	objptr, ##42328
155f4     F2 14 02 FB | 	rdlong	arg02, objptr
155f8     18 16 06 F6 | 	mov	arg03, #24
155fc     47 00 00 FF 
15600     8C E4 85 F1 | 	sub	objptr, ##36492
15604     B0 18 B1 FD | 	call	#_psram_spin2_read1
15608     0B 00 00 FF 
1560c     CC E4 85 F1 | 	sub	objptr, ##5836
15610                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
15610                 | '   
15610                 | '   if header(0)<> $FFFFFFFF then
15610     20 4E 05 F1 | 	add	fp, #32
15614     A7 28 02 FB | 	rdlong	local02, fp
15618     20 4E 85 F1 | 	sub	fp, #32
1561c     FF FF 7F FF 
15620     FF 29 0E F2 | 	cmp	local02, ##-1 wz
15624     A8 00 90 AD |  if_e	jmp	#LR__1754
15628     38 4E 05 F1 | 	add	fp, #56
1562c     3F 16 06 F6 | 	mov	arg03, #63
15630     28 16 62 FD | 	setq	arg03
15634     A7 00 68 FC | 	wrlong	#0, fp
15638     A7 12 02 F6 | 	mov	arg01, fp
1563c     10 4E 85 F1 | 	sub	fp, #16
15640     A7 14 02 FB | 	rdlong	arg02, fp
15644     04 4E 05 F1 | 	add	fp, #4
15648     A7 16 02 FB | 	rdlong	arg03, fp
1564c     2C 4E 85 F1 | 	sub	fp, #44
15650     0B 00 00 FF 
15654     CC E4 05 F1 | 	add	objptr, ##5836
15658     5C 18 B1 FD | 	call	#_psram_spin2_read1
1565c     0B 00 00 FF 
15660     CC E4 85 F1 | 	sub	objptr, ##5836
15664                 | '     longfill(linebuf,0,64)
15664                 | '     psram.read1(varptr(linebuf),header(2),header(3))
15664                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
15664     20 4E 05 F1 | 	add	fp, #32
15668     A7 28 02 FB | 	rdlong	local02, fp
1566c     1C 4E 85 F1 | 	sub	fp, #28
15670     A7 26 02 FB | 	rdlong	local01, fp
15674     04 4E 85 F1 | 	sub	fp, #4
15678     13 29 52 F2 | 	cmps	local02, local01 wc
1567c     30 00 90 CD |  if_b	jmp	#LR__1753
15680     20 4E 05 F1 | 	add	fp, #32
15684     A7 28 02 FB | 	rdlong	local02, fp
15688     18 4E 85 F1 | 	sub	fp, #24
1568c     A7 16 02 FB | 	rdlong	arg03, fp
15690     08 4E 85 F1 | 	sub	fp, #8
15694     0B 29 5A F2 | 	cmps	local02, arg03 wcz
15698     14 00 90 1D |  if_a	jmp	#LR__1753
1569c     38 4E 05 F1 | 	add	fp, #56
156a0     A7 12 02 F6 | 	mov	arg01, fp
156a4     38 4E 85 F1 | 	sub	fp, #56
156a8                 | ' 
156a8                 | ' write(text)
156a8     14 0C B1 FD | 	call	#_hg010b_spin2_write
156ac                 | ' crlf
156ac     B0 10 B1 FD | 	call	#_hg010b_spin2_crlf
156b0                 | LR__1753
156b0     34 4E 05 F1 | 	add	fp, #52
156b4     A7 28 02 FB | 	rdlong	local02, fp
156b8     34 4E 85 F1 | 	sub	fp, #52
156bc     52 00 00 FF 
156c0     58 E5 05 F1 | 	add	objptr, ##42328
156c4     F2 28 62 FC | 	wrlong	local02, objptr
156c8     52 00 00 FF 
156cc     58 E5 85 F1 | 	sub	objptr, ##42328
156d0                 | LR__1754
156d0     34 4E 05 F1 | 	add	fp, #52
156d4     A7 28 02 FB | 	rdlong	local02, fp
156d8     34 4E 85 F1 | 	sub	fp, #52
156dc     FF FF 3F FF 
156e0     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
156e4     20 4E 05 51 |  if_ne	add	fp, #32
156e8     A7 26 02 5B |  if_ne	rdlong	local01, fp
156ec     20 4E 85 51 |  if_ne	sub	fp, #32
156f0     FF FF 7F 5F 
156f4     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
156f8     E4 FE 9F 5D |  if_ne	jmp	#LR__1752
156fc     A7 F0 03 F6 | 	mov	ptra, fp
15700     B2 00 A0 FD | 	call	#popregs_
15704                 | _do_list_ret
15704     2D 00 64 FD | 	ret
15708                 | 
15708                 | ' 
15708                 | ' '-------------------- load
15708                 | ' 
15708                 | ' sub do_load(amode=0 as integer)  
15708                 | _do_load
15708     01 4A 05 F6 | 	mov	COUNT_, #1
1570c     A8 00 A0 FD | 	call	#pushregs_
15710     AC F0 07 F1 | 	add	ptra, #172
15714     A7 12 62 FC | 	wrlong	arg01, fp
15718     52 00 00 FF 
1571c     0C E5 05 F1 | 	add	objptr, ##42252
15720     F2 02 68 FC | 	wrlong	#1, objptr
15724     08 00 00 FF 
15728     8C E4 85 F1 | 	sub	objptr, ##4236
1572c     F2 14 02 FB | 	rdlong	arg02, objptr
15730     0A 13 02 F6 | 	mov	arg01, arg02
15734     01 12 66 F0 | 	shl	arg01, #1
15738     0A 13 02 F1 | 	add	arg01, arg02
1573c     02 12 66 F0 | 	shl	arg01, #2
15740     03 00 00 FF 
15744     04 E4 85 F1 | 	sub	objptr, ##1540
15748     F2 12 02 F1 | 	add	arg01, objptr
1574c     09 15 02 FB | 	rdlong	arg02, arg01
15750     1C 4E 05 F1 | 	add	fp, #28
15754     A7 14 62 FC | 	wrlong	arg02, fp
15758     8C 4E 05 F1 | 	add	fp, #140
1575c     A7 12 02 F6 | 	mov	arg01, fp
15760     47 00 00 FF 
15764     7C E4 85 F1 | 	sub	objptr, ##36476
15768     80 4E 85 F1 | 	sub	fp, #128
1576c     09 4F 61 FC | 	wrlong	fp, arg01
15770                 | ' 
15770                 | ' inload=1
15770                 | ' numpar=compiledline(lineptr_e).result.uresult
15770                 | ' lpoke varptr(line2$),varptr(line2)
15770                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
15770     0C 4E 85 F1 | 	sub	fp, #12
15774     A7 26 02 FB | 	rdlong	local01, fp
15778     1C 4E 85 F1 | 	sub	fp, #28
1577c     01 26 56 F2 | 	cmps	local01, #1 wc
15780     24 00 90 CD |  if_b	jmp	#LR__1760
15784     98 80 BF FD | 	call	#_pop
15788     04 4E 05 F1 | 	add	fp, #4
1578c     A7 FA 61 FC | 	wrlong	result1, fp
15790     04 4E 05 F1 | 	add	fp, #4
15794     A7 FC 61 FC | 	wrlong	result2, fp
15798     04 4E 05 F1 | 	add	fp, #4
1579c     A7 FE 61 FC | 	wrlong	result3, fp
157a0     0C 4E 85 F1 | 	sub	fp, #12
157a4     28 00 90 FD | 	jmp	#LR__1761
157a8                 | LR__1760
157a8     52 00 00 FF 
157ac     FC E4 05 F1 | 	add	objptr, ##42236
157b0     F2 26 02 FB | 	rdlong	local01, objptr
157b4     52 00 00 FF 
157b8     FC E4 85 F1 | 	sub	objptr, ##42236
157bc     04 4E 05 F1 | 	add	fp, #4
157c0     A7 26 62 FC | 	wrlong	local01, fp
157c4     08 4E 05 F1 | 	add	fp, #8
157c8     A7 3E 68 FC | 	wrlong	#31, fp
157cc     0C 4E 85 F1 | 	sub	fp, #12
157d0                 | LR__1761
157d0                 | ' 'print "popped "; t1.result.uresult, t1.result_type
157d0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
157d0     0C 4E 05 F1 | 	add	fp, #12
157d4     A7 26 02 FB | 	rdlong	local01, fp
157d8     0C 4E 85 F1 | 	sub	fp, #12
157dc     2B 26 0E F2 | 	cmp	local01, #43 wz
157e0     24 00 90 5D |  if_ne	jmp	#LR__1762
157e4     04 4E 05 F1 | 	add	fp, #4
157e8     A7 12 02 FB | 	rdlong	arg01, fp
157ec     04 4E 85 F1 | 	sub	fp, #4
157f0     A4 81 BF FD | 	call	#_convertstring
157f4     04 4E 05 F1 | 	add	fp, #4
157f8     A7 FA 61 FC | 	wrlong	result1, fp
157fc     08 4E 05 F1 | 	add	fp, #8
15800     A7 3E 68 FC | 	wrlong	#31, fp
15804     0C 4E 85 F1 | 	sub	fp, #12
15808                 | LR__1762
15808                 | ' if t1.result_type=result_string then
15808     0C 4E 05 F1 | 	add	fp, #12
1580c     A7 26 02 FB | 	rdlong	local01, fp
15810     0C 4E 85 F1 | 	sub	fp, #12
15814     1F 26 0E F2 | 	cmp	local01, #31 wz
15818     E8 02 90 5D |  if_ne	jmp	#LR__1768
1581c                 | '   if amode<>1234 then do_new
1581c     A7 26 02 FB | 	rdlong	local01, fp
15820     02 00 00 FF 
15824     D2 26 0E F2 | 	cmp	local01, ##1234 wz
15828     34 0F B0 5D |  if_ne	call	#_do_new
1582c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1582c     04 4E 05 F1 | 	add	fp, #4
15830     A7 12 02 FB | 	rdlong	arg01, fp
15834     04 4E 85 F1 | 	sub	fp, #4
15838     C0 01 00 FF 
1583c     48 15 06 F6 | 	mov	arg02, ##@LR__6075
15840     40 23 B1 FD | 	call	#__system___string_cmp
15844     00 FA 0D F2 | 	cmp	result1, #0 wz
15848     24 00 90 5D |  if_ne	jmp	#LR__1763
1584c     52 00 00 FF 
15850     FC E4 05 F1 | 	add	objptr, ##42236
15854     F2 26 02 FB | 	rdlong	local01, objptr
15858     52 00 00 FF 
1585c     FC E4 85 F1 | 	sub	objptr, ##42236
15860     04 4E 05 F1 | 	add	fp, #4
15864     A7 26 62 FC | 	wrlong	local01, fp
15868     04 4E 85 F1 | 	sub	fp, #4
1586c     20 00 90 FD | 	jmp	#LR__1764
15870                 | LR__1763
15870     04 4E 05 F1 | 	add	fp, #4
15874     A7 26 02 FB | 	rdlong	local01, fp
15878     04 4E 85 F1 | 	sub	fp, #4
1587c     52 00 00 FF 
15880     FC E4 05 F1 | 	add	objptr, ##42236
15884     F2 26 62 FC | 	wrlong	local01, objptr
15888     52 00 00 FF 
1588c     FC E4 85 F1 | 	sub	objptr, ##42236
15890                 | LR__1764
15890                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
15890     09 12 06 F6 | 	mov	arg01, #9
15894     24 76 B1 FD | 	call	#__system__close
15898     09 26 06 F6 | 	mov	local01, #9
1589c     4A 00 00 FF 
158a0     94 E4 05 F1 | 	add	objptr, ##38036
158a4     F2 12 02 FB | 	rdlong	arg01, objptr
158a8     4A 00 00 FF 
158ac     94 E4 85 F1 | 	sub	objptr, ##38036
158b0     C0 01 00 FF 
158b4     49 15 06 F6 | 	mov	arg02, ##@LR__6076
158b8     FC 22 B1 FD | 	call	#__system___string_concat
158bc     FD 12 02 F6 | 	mov	arg01, result1
158c0     04 4E 05 F1 | 	add	fp, #4
158c4     A7 14 02 FB | 	rdlong	arg02, fp
158c8     04 4E 85 F1 | 	sub	fp, #4
158cc     E8 22 B1 FD | 	call	#__system___string_concat
158d0     FD 14 02 F6 | 	mov	arg02, result1
158d4     13 13 02 F6 | 	mov	arg01, local01
158d8     00 16 06 F6 | 	mov	arg03, #0
158dc     80 2E B1 FD | 	call	#__system___basic_open_string
158e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
158e4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
158e8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
158ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
158f0     14 4E 05 F1 | 	add	fp, #20
158f4     A7 FA 61 FC | 	wrlong	result1, fp
158f8                 | '   r=geterr() 
158f8                 | '   if r then 
158f8     14 4E 85 F1 | 	sub	fp, #20
158fc     54 01 90 AD |  if_e	jmp	#LR__1766
15900                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
15900     09 12 06 F6 | 	mov	arg01, #9
15904     B4 75 B1 FD | 	call	#__system__close
15908     09 26 06 F6 | 	mov	local01, #9
1590c     4A 00 00 FF 
15910     94 E4 05 F1 | 	add	objptr, ##38036
15914     F2 12 02 FB | 	rdlong	arg01, objptr
15918     4A 00 00 FF 
1591c     94 E4 85 F1 | 	sub	objptr, ##38036
15920     C0 01 00 FF 
15924     4B 15 06 F6 | 	mov	arg02, ##@LR__6077
15928     8C 22 B1 FD | 	call	#__system___string_concat
1592c     FD 12 02 F6 | 	mov	arg01, result1
15930     04 4E 05 F1 | 	add	fp, #4
15934     A7 14 02 FB | 	rdlong	arg02, fp
15938     04 4E 85 F1 | 	sub	fp, #4
1593c     78 22 B1 FD | 	call	#__system___string_concat
15940     FD 12 02 F6 | 	mov	arg01, result1
15944     C0 01 00 FF 
15948     4D 15 06 F6 | 	mov	arg02, ##@LR__6078
1594c     68 22 B1 FD | 	call	#__system___string_concat
15950     FD 14 02 F6 | 	mov	arg02, result1
15954     13 13 02 F6 | 	mov	arg01, local01
15958     00 16 06 F6 | 	mov	arg03, #0
1595c     00 2E B1 FD | 	call	#__system___basic_open_string
15960     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15964     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15968     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
1596c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15970     14 4E 05 F1 | 	add	fp, #20
15974     A7 FA 61 FC | 	wrlong	result1, fp
15978                 | '     r=geterr() 
15978                 | '     if r then 
15978     14 4E 85 F1 | 	sub	fp, #20
1597c     A0 00 90 AD |  if_e	jmp	#LR__1765
15980                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
15980     00 12 06 F6 | 	mov	arg01, #0
15984     84 7E B1 FD | 	call	#__system___getiolock_0620
15988     FD 12 02 F6 | 	mov	arg01, result1
1598c     CC 21 B1 FD | 	call	#__system___lockmem
15990     C0 01 00 FF 
15994     52 15 06 F6 | 	mov	arg02, ##@LR__6079
15998     00 12 06 F6 | 	mov	arg01, #0
1599c     00 16 06 F6 | 	mov	arg03, #0
159a0     B0 2E B1 FD | 	call	#__system___basic_print_string
159a4     14 4E 05 F1 | 	add	fp, #20
159a8     A7 14 02 FB | 	rdlong	arg02, fp
159ac     14 4E 85 F1 | 	sub	fp, #20
159b0     00 12 06 F6 | 	mov	arg01, #0
159b4     00 16 06 F6 | 	mov	arg03, #0
159b8     0A 18 06 F6 | 	mov	arg04, #10
159bc     D8 2E B1 FD | 	call	#__system___basic_print_integer
159c0     C0 01 00 FF 
159c4     60 15 06 F6 | 	mov	arg02, ##@LR__6080
159c8     00 12 06 F6 | 	mov	arg01, #0
159cc     00 16 06 F6 | 	mov	arg03, #0
159d0     80 2E B1 FD | 	call	#__system___basic_print_string
159d4     00 26 06 F6 | 	mov	local01, #0
159d8     14 4E 05 F1 | 	add	fp, #20
159dc     A7 12 02 FB | 	rdlong	arg01, fp
159e0     14 4E 85 F1 | 	sub	fp, #20
159e4     04 4B B1 FD | 	call	#__system___strerror
159e8     FD 14 02 F6 | 	mov	arg02, result1
159ec     13 13 02 F6 | 	mov	arg01, local01
159f0     00 16 06 F6 | 	mov	arg03, #0
159f4     5C 2E B1 FD | 	call	#__system___basic_print_string
159f8     00 12 06 F6 | 	mov	arg01, #0
159fc     0A 14 06 F6 | 	mov	arg02, #10
15a00     00 16 06 F6 | 	mov	arg03, #0
15a04     F4 2D B1 FD | 	call	#__system___basic_print_char
15a08     00 12 06 F6 | 	mov	arg01, #0
15a0c     FC 7D B1 FD | 	call	#__system___getiolock_0620
15a10     FD 00 68 FC | 	wrlong	#0, result1
15a14     09 12 06 F6 | 	mov	arg01, #9
15a18     A0 74 B1 FD | 	call	#__system__close
15a1c     94 01 90 FD | 	jmp	#LR__1770
15a20                 | LR__1765
15a20     52 00 00 FF 
15a24     FC E4 05 F1 | 	add	objptr, ##42236
15a28     F2 12 02 FB | 	rdlong	arg01, objptr
15a2c     52 00 00 FF 
15a30     FC E4 85 F1 | 	sub	objptr, ##42236
15a34     C0 01 00 FF 
15a38     63 15 06 F6 | 	mov	arg02, ##@LR__6081
15a3c     78 21 B1 FD | 	call	#__system___string_concat
15a40     52 00 00 FF 
15a44     FC E4 05 F1 | 	add	objptr, ##42236
15a48     F2 FA 61 FC | 	wrlong	result1, objptr
15a4c     52 00 00 FF 
15a50     FC E4 85 F1 | 	sub	objptr, ##42236
15a54                 | LR__1766
15a54                 | '   close #9: open currentdir$+"/"+loadname for input as #9
15a54     09 12 06 F6 | 	mov	arg01, #9
15a58     60 74 B1 FD | 	call	#__system__close
15a5c     09 26 06 F6 | 	mov	local01, #9
15a60     4A 00 00 FF 
15a64     94 E4 05 F1 | 	add	objptr, ##38036
15a68     F2 12 02 FB | 	rdlong	arg01, objptr
15a6c     4A 00 00 FF 
15a70     94 E4 85 F1 | 	sub	objptr, ##38036
15a74     C0 01 00 FF 
15a78     68 15 06 F6 | 	mov	arg02, ##@LR__6082
15a7c     38 21 B1 FD | 	call	#__system___string_concat
15a80     FD 12 02 F6 | 	mov	arg01, result1
15a84     52 00 00 FF 
15a88     FC E4 05 F1 | 	add	objptr, ##42236
15a8c     F2 14 02 FB | 	rdlong	arg02, objptr
15a90     52 00 00 FF 
15a94     FC E4 85 F1 | 	sub	objptr, ##42236
15a98     1C 21 B1 FD | 	call	#__system___string_concat
15a9c     FD 14 02 F6 | 	mov	arg02, result1
15aa0     13 13 02 F6 | 	mov	arg01, local01
15aa4     00 16 06 F6 | 	mov	arg03, #0
15aa8     B4 2C B1 FD | 	call	#__system___basic_open_string
15aac                 | '   do
15aac                 | LR__1767
15aac     09 12 06 F6 | 	mov	arg01, #9
15ab0     B4 22 B1 FD | 	call	#__system___basic_read_line
15ab4     FD 26 02 F6 | 	mov	local01, result1
15ab8     37 00 00 FF 
15abc     1C E4 05 F1 | 	add	objptr, ##28188
15ac0     F2 26 62 FC | 	wrlong	local01, objptr
15ac4     37 00 00 FF 
15ac8     1C E4 85 F1 | 	sub	objptr, ##28188
15acc     BC BD BE FD | 	call	#_interpret
15ad0     37 00 00 FF 
15ad4     1C E4 05 F1 | 	add	objptr, ##28188
15ad8     F2 12 02 FB | 	rdlong	arg01, objptr
15adc     37 00 00 FF 
15ae0     1C E4 85 F1 | 	sub	objptr, ##28188
15ae4     C0 01 00 FF 
15ae8     6A 15 06 F6 | 	mov	arg02, ##@LR__6083
15aec     94 20 B1 FD | 	call	#__system___string_cmp
15af0     00 FA 0D F2 | 	cmp	result1, #0 wz
15af4     B4 FF 9F 5D |  if_ne	jmp	#LR__1767
15af8                 | '   close #9   
15af8     09 12 06 F6 | 	mov	arg01, #9
15afc     BC 73 B1 FD | 	call	#__system__close
15b00     0C 00 90 FD | 	jmp	#LR__1769
15b04                 | LR__1768
15b04     1E 12 06 F6 | 	mov	arg01, #30
15b08     00 14 06 F6 | 	mov	arg02, #0
15b0c     EC E5 B0 FD | 	call	#_printerror
15b10                 | LR__1769
15b10                 | ' print "Loaded ";currentdir$+"/"+loadname
15b10     00 12 06 F6 | 	mov	arg01, #0
15b14     F4 7C B1 FD | 	call	#__system___getiolock_0620
15b18     FD 12 02 F6 | 	mov	arg01, result1
15b1c     3C 20 B1 FD | 	call	#__system___lockmem
15b20     C0 01 00 FF 
15b24     6B 15 06 F6 | 	mov	arg02, ##@LR__6084
15b28     00 12 06 F6 | 	mov	arg01, #0
15b2c     00 16 06 F6 | 	mov	arg03, #0
15b30     20 2D B1 FD | 	call	#__system___basic_print_string
15b34     00 26 06 F6 | 	mov	local01, #0
15b38     4A 00 00 FF 
15b3c     94 E4 05 F1 | 	add	objptr, ##38036
15b40     F2 12 02 FB | 	rdlong	arg01, objptr
15b44     4A 00 00 FF 
15b48     94 E4 85 F1 | 	sub	objptr, ##38036
15b4c     C0 01 00 FF 
15b50     73 15 06 F6 | 	mov	arg02, ##@LR__6085
15b54     60 20 B1 FD | 	call	#__system___string_concat
15b58     FD 12 02 F6 | 	mov	arg01, result1
15b5c     52 00 00 FF 
15b60     FC E4 05 F1 | 	add	objptr, ##42236
15b64     F2 14 02 FB | 	rdlong	arg02, objptr
15b68     52 00 00 FF 
15b6c     FC E4 85 F1 | 	sub	objptr, ##42236
15b70     44 20 B1 FD | 	call	#__system___string_concat
15b74     FD 14 02 F6 | 	mov	arg02, result1
15b78     13 13 02 F6 | 	mov	arg01, local01
15b7c     00 16 06 F6 | 	mov	arg03, #0
15b80     D0 2C B1 FD | 	call	#__system___basic_print_string
15b84     00 12 06 F6 | 	mov	arg01, #0
15b88     0A 14 06 F6 | 	mov	arg02, #10
15b8c     00 16 06 F6 | 	mov	arg03, #0
15b90     68 2C B1 FD | 	call	#__system___basic_print_char
15b94     00 12 06 F6 | 	mov	arg01, #0
15b98     70 7C B1 FD | 	call	#__system___getiolock_0620
15b9c     FD 00 68 FC | 	wrlong	#0, result1
15ba0     52 00 00 FF 
15ba4     0C E5 05 F1 | 	add	objptr, ##42252
15ba8     F2 00 68 FC | 	wrlong	#0, objptr
15bac     52 00 00 FF 
15bb0     0C E5 85 F1 | 	sub	objptr, ##42252
15bb4                 | LR__1770
15bb4     A7 F0 03 F6 | 	mov	ptra, fp
15bb8     B2 00 A0 FD | 	call	#popregs_
15bbc                 | _do_load_ret
15bbc     2D 00 64 FD | 	ret
15bc0                 | 
15bc0                 | ' 
15bc0                 | ' '-------------------- log
15bc0                 | ' 
15bc0                 | ' sub do_log
15bc0                 | _do_log
15bc0     01 4A 05 F6 | 	mov	COUNT_, #1
15bc4     A8 00 A0 FD | 	call	#pushregs_
15bc8     14 F0 07 F1 | 	add	ptra, #20
15bcc     4A 00 00 FF 
15bd0     80 E4 05 F1 | 	add	objptr, ##38016
15bd4     F2 26 02 FB | 	rdlong	local01, objptr
15bd8     13 17 02 F6 | 	mov	arg03, local01
15bdc     01 16 66 F0 | 	shl	arg03, #1
15be0     13 17 02 F1 | 	add	arg03, local01
15be4     02 16 66 F0 | 	shl	arg03, #2
15be8     03 00 00 FF 
15bec     04 E4 85 F1 | 	sub	objptr, ##1540
15bf0     F2 16 02 F1 | 	add	arg03, objptr
15bf4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15bf8     0C 4E 05 F1 | 	add	fp, #12
15bfc     A7 16 62 FC | 	wrlong	arg03, fp
15c00                 | ' 
15c00                 | ' numpar=compiledline(lineptr_e).result.uresult
15c00                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
15c00     0C 4E 85 F1 | 	sub	fp, #12
15c04     47 00 00 FF 
15c08     7C E4 85 F1 | 	sub	objptr, ##36476
15c0c     0C 4E 05 51 |  if_ne	add	fp, #12
15c10     A7 26 02 5B |  if_ne	rdlong	local01, fp
15c14     0C 4E 85 51 |  if_ne	sub	fp, #12
15c18     03 26 16 52 |  if_ne	cmp	local01, #3 wc
15c1c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1780
15c20     00 12 06 F6 | 	mov	arg01, #0
15c24     E4 7B B1 FD | 	call	#__system___getiolock_0620
15c28     FD 12 02 F6 | 	mov	arg01, result1
15c2c     2C 1F B1 FD | 	call	#__system___lockmem
15c30     C0 01 00 FF 
15c34     75 15 06 F6 | 	mov	arg02, ##@LR__6086
15c38     00 12 06 F6 | 	mov	arg01, #0
15c3c     00 16 06 F6 | 	mov	arg03, #0
15c40     10 2C B1 FD | 	call	#__system___basic_print_string
15c44     00 12 06 F6 | 	mov	arg01, #0
15c48     C0 7B B1 FD | 	call	#__system___getiolock_0620
15c4c     FD 00 68 FC | 	wrlong	#0, result1
15c50     27 12 06 F6 | 	mov	arg01, #39
15c54     00 14 06 F6 | 	mov	arg02, #0
15c58     A0 E4 B0 FD | 	call	#_printerror
15c5c     D0 00 90 FD | 	jmp	#LR__1783
15c60                 | LR__1780
15c60                 | ' if numpar=2 then 
15c60     0C 4E 05 F1 | 	add	fp, #12
15c64     A7 26 02 FB | 	rdlong	local01, fp
15c68     0C 4E 85 F1 | 	sub	fp, #12
15c6c     02 26 0E F2 | 	cmp	local01, #2 wz
15c70     48 00 90 5D |  if_ne	jmp	#LR__1781
15c74     A8 7B BF FD | 	call	#_pop
15c78     FF 26 02 F6 | 	mov	local01, result3
15c7c     A7 FA 61 FC | 	wrlong	result1, fp
15c80     04 4E 05 F1 | 	add	fp, #4
15c84     A7 FC 61 FC | 	wrlong	result2, fp
15c88     04 4E 05 F1 | 	add	fp, #4
15c8c     A7 26 62 FC | 	wrlong	local01, fp
15c90     08 4E 85 F1 | 	sub	fp, #8
15c94     A7 12 02 F6 | 	mov	arg01, fp
15c98     24 7E BF FD | 	call	#_converttofloat
15c9c     FD 14 02 F6 | 	mov	arg02, result1
15ca0     FC 16 20 FF 
15ca4     54 12 06 F6 | 	mov	arg01, ##1076754516
15ca8     00 5D B1 FD | 	call	#__system____builtin_logbase
15cac     10 4E 05 F1 | 	add	fp, #16
15cb0     A7 FA 61 FC | 	wrlong	result1, fp
15cb4     10 4E 85 F1 | 	sub	fp, #16
15cb8     10 00 90 FD | 	jmp	#LR__1782
15cbc                 | LR__1781
15cbc     10 4E 05 F1 | 	add	fp, #16
15cc0     00 C0 9F FF 
15cc4     A7 00 68 FC | 	wrlong	##1065353216, fp
15cc8     10 4E 85 F1 | 	sub	fp, #16
15ccc                 | LR__1782
15ccc     50 7B BF FD | 	call	#_pop
15cd0     FF 26 02 F6 | 	mov	local01, result3
15cd4     A7 FA 61 FC | 	wrlong	result1, fp
15cd8     04 4E 05 F1 | 	add	fp, #4
15cdc     A7 FC 61 FC | 	wrlong	result2, fp
15ce0     04 4E 05 F1 | 	add	fp, #4
15ce4     A7 26 62 FC | 	wrlong	local01, fp
15ce8     08 4E 85 F1 | 	sub	fp, #8
15cec     A7 12 02 F6 | 	mov	arg01, fp
15cf0     CC 7D BF FD | 	call	#_converttofloat
15cf4     FD 14 02 F6 | 	mov	arg02, result1
15cf8     FC 16 20 FF 
15cfc     54 12 06 F6 | 	mov	arg01, ##1076754516
15d00     A8 5C B1 FD | 	call	#__system____builtin_logbase
15d04     FD 12 02 F6 | 	mov	arg01, result1
15d08     10 4E 05 F1 | 	add	fp, #16
15d0c     A7 14 02 FB | 	rdlong	arg02, fp
15d10     10 4E 85 F1 | 	sub	fp, #16
15d14     C4 4E B1 FD | 	call	#__system___float_div
15d18     A7 FA 61 FC | 	wrlong	result1, fp
15d1c     08 4E 05 F1 | 	add	fp, #8
15d20     A7 3C 68 FC | 	wrlong	#30, fp
15d24     08 4E 85 F1 | 	sub	fp, #8
15d28     A7 12 02 F6 | 	mov	arg01, fp
15d2c     88 7B BF FD | 	call	#_push
15d30                 | LR__1783
15d30     A7 F0 03 F6 | 	mov	ptra, fp
15d34     B2 00 A0 FD | 	call	#popregs_
15d38                 | _do_log_ret
15d38     2D 00 64 FD | 	ret
15d3c                 | 
15d3c                 | ' 
15d3c                 | ' '-------------------- lpeek
15d3c                 | ' 
15d3c                 | ' sub do_lpeek
15d3c                 | _do_lpeek
15d3c     00 4A 05 F6 | 	mov	COUNT_, #0
15d40     A8 00 A0 FD | 	call	#pushregs_
15d44     14 F0 07 F1 | 	add	ptra, #20
15d48     D4 7A BF FD | 	call	#_pop
15d4c     A7 FA 61 FC | 	wrlong	result1, fp
15d50     04 4E 05 F1 | 	add	fp, #4
15d54     A7 FC 61 FC | 	wrlong	result2, fp
15d58     04 4E 05 F1 | 	add	fp, #4
15d5c     A7 FE 61 FC | 	wrlong	result3, fp
15d60     08 4E 85 F1 | 	sub	fp, #8
15d64     A7 12 02 F6 | 	mov	arg01, fp
15d68     98 7C BF FD | 	call	#_converttoint
15d6c     0C 4E 05 F1 | 	add	fp, #12
15d70     A7 FA 61 FC | 	wrlong	result1, fp
15d74                 | ' 
15d74                 | ' t1=pop()
15d74                 | ' a=converttoint(t1)
15d74                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
15d74     0C 4E 85 F1 | 	sub	fp, #12
15d78     00 04 00 FF 
15d7c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
15d80     1C 00 90 3D |  if_ae	jmp	#LR__1790
15d84     0C 4E 05 F1 | 	add	fp, #12
15d88     A7 12 02 FB | 	rdlong	arg01, fp
15d8c     09 FB 01 FB | 	rdlong	result1, arg01
15d90     04 4E 05 F1 | 	add	fp, #4
15d94     A7 FA 61 FC | 	wrlong	result1, fp
15d98     10 4E 85 F1 | 	sub	fp, #16
15d9c     1C 00 90 FD | 	jmp	#LR__1791
15da0                 | LR__1790
15da0     0C 4E 05 F1 | 	add	fp, #12
15da4     A7 12 02 FB | 	rdlong	arg01, fp
15da8     0C 4E 85 F1 | 	sub	fp, #12
15dac     1C E6 B0 FD | 	call	#_pslpeek
15db0     10 4E 05 F1 | 	add	fp, #16
15db4     A7 FA 61 FC | 	wrlong	result1, fp
15db8     10 4E 85 F1 | 	sub	fp, #16
15dbc                 | LR__1791
15dbc     08 4E 05 F1 | 	add	fp, #8
15dc0     A7 3A 68 FC | 	wrlong	#29, fp
15dc4     08 4E 05 F1 | 	add	fp, #8
15dc8     A7 12 02 FB | 	rdlong	arg01, fp
15dcc     10 4E 85 F1 | 	sub	fp, #16
15dd0     A7 12 62 FC | 	wrlong	arg01, fp
15dd4     A7 12 02 F6 | 	mov	arg01, fp
15dd8     DC 7A BF FD | 	call	#_push
15ddc     A7 F0 03 F6 | 	mov	ptra, fp
15de0     B2 00 A0 FD | 	call	#popregs_
15de4                 | _do_lpeek_ret
15de4     2D 00 64 FD | 	ret
15de8                 | 
15de8                 | ' 
15de8                 | ' '-------------------- lpoke
15de8                 | ' 
15de8                 | ' sub do_lpoke
15de8                 | _do_lpoke
15de8     01 4A 05 F6 | 	mov	COUNT_, #1
15dec     A8 00 A0 FD | 	call	#pushregs_
15df0     20 F0 07 F1 | 	add	ptra, #32
15df4     28 7A BF FD | 	call	#_pop
15df8     FD 14 02 F6 | 	mov	arg02, result1
15dfc     FE 12 02 F6 | 	mov	arg01, result2
15e00     FF 26 02 F6 | 	mov	local01, result3
15e04     A7 14 62 FC | 	wrlong	arg02, fp
15e08     04 4E 05 F1 | 	add	fp, #4
15e0c     A7 12 62 FC | 	wrlong	arg01, fp
15e10     04 4E 05 F1 | 	add	fp, #4
15e14     A7 26 62 FC | 	wrlong	local01, fp
15e18     08 4E 85 F1 | 	sub	fp, #8
15e1c     00 7A BF FD | 	call	#_pop
15e20     FF 26 02 F6 | 	mov	local01, result3
15e24     0C 4E 05 F1 | 	add	fp, #12
15e28     A7 FA 61 FC | 	wrlong	result1, fp
15e2c     04 4E 05 F1 | 	add	fp, #4
15e30     A7 FC 61 FC | 	wrlong	result2, fp
15e34     04 4E 05 F1 | 	add	fp, #4
15e38     A7 26 62 FC | 	wrlong	local01, fp
15e3c     08 4E 85 F1 | 	sub	fp, #8
15e40     A7 12 02 F6 | 	mov	arg01, fp
15e44     0C 4E 85 F1 | 	sub	fp, #12
15e48     B8 7B BF FD | 	call	#_converttoint
15e4c     18 4E 05 F1 | 	add	fp, #24
15e50     A7 FA 61 FC | 	wrlong	result1, fp
15e54     18 4E 85 F1 | 	sub	fp, #24
15e58     A7 12 02 F6 | 	mov	arg01, fp
15e5c     A4 7B BF FD | 	call	#_converttoint
15e60     1C 4E 05 F1 | 	add	fp, #28
15e64     A7 FA 61 FC | 	wrlong	result1, fp
15e68                 | ' 
15e68                 | ' t1=pop() 'value
15e68                 | ' t2=pop() 
15e68                 | ' a=converttoint(t2) : v=converttoint(t1)
15e68                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
15e68     04 4E 85 F1 | 	sub	fp, #4
15e6c     A7 26 02 FB | 	rdlong	local01, fp
15e70     18 4E 85 F1 | 	sub	fp, #24
15e74     00 04 00 FF 
15e78     00 26 16 F2 | 	cmp	local01, ##524288 wc
15e7c     1C 00 90 3D |  if_ae	jmp	#LR__1800
15e80     18 4E 05 F1 | 	add	fp, #24
15e84     A7 12 02 FB | 	rdlong	arg01, fp
15e88     04 4E 05 F1 | 	add	fp, #4
15e8c     A7 14 02 FB | 	rdlong	arg02, fp
15e90     1C 4E 85 F1 | 	sub	fp, #28
15e94     09 15 62 FC | 	wrlong	arg02, arg01
15e98     18 00 90 FD | 	jmp	#LR__1801
15e9c                 | LR__1800
15e9c     18 4E 05 F1 | 	add	fp, #24
15ea0     A7 12 02 FB | 	rdlong	arg01, fp
15ea4     04 4E 05 F1 | 	add	fp, #4
15ea8     A7 14 02 FB | 	rdlong	arg02, fp
15eac     1C 4E 85 F1 | 	sub	fp, #28
15eb0     E8 E3 B0 FD | 	call	#_pslpoke
15eb4                 | LR__1801
15eb4     A7 F0 03 F6 | 	mov	ptra, fp
15eb8     B2 00 A0 FD | 	call	#popregs_
15ebc                 | _do_lpoke_ret
15ebc     2D 00 64 FD | 	ret
15ec0                 | 
15ec0                 | ' 
15ec0                 | ' '-------------------- memlo
15ec0                 | ' 
15ec0                 | ' sub do_memlo
15ec0                 | _do_memlo
15ec0     00 4A 05 F6 | 	mov	COUNT_, #0
15ec4     A8 00 A0 FD | 	call	#pushregs_
15ec8     0C F0 07 F1 | 	add	ptra, #12
15ecc     43 00 00 FF 
15ed0     5C E4 05 F1 | 	add	objptr, ##34396
15ed4     F2 12 02 FB | 	rdlong	arg01, objptr
15ed8     43 00 00 FF 
15edc     5C E4 85 F1 | 	sub	objptr, ##34396
15ee0     A7 12 62 FC | 	wrlong	arg01, fp
15ee4     08 4E 05 F1 | 	add	fp, #8
15ee8     A7 3A 68 FC | 	wrlong	#29, fp
15eec     08 4E 85 F1 | 	sub	fp, #8
15ef0     A7 12 02 F6 | 	mov	arg01, fp
15ef4     C0 79 BF FD | 	call	#_push
15ef8     A7 F0 03 F6 | 	mov	ptra, fp
15efc     B2 00 A0 FD | 	call	#popregs_
15f00                 | _do_memlo_ret
15f00     2D 00 64 FD | 	ret
15f04                 | 
15f04                 | ' 
15f04                 | ' '-------------------- memtop
15f04                 | ' 
15f04                 | ' sub do_memtop
15f04                 | _do_memtop
15f04     00 4A 05 F6 | 	mov	COUNT_, #0
15f08     A8 00 A0 FD | 	call	#pushregs_
15f0c     0C F0 07 F1 | 	add	ptra, #12
15f10     52 00 00 FF 
15f14     D0 E4 05 F1 | 	add	objptr, ##42192
15f18     F2 12 02 FB | 	rdlong	arg01, objptr
15f1c     52 00 00 FF 
15f20     D0 E4 85 F1 | 	sub	objptr, ##42192
15f24     A7 12 62 FC | 	wrlong	arg01, fp
15f28     08 4E 05 F1 | 	add	fp, #8
15f2c     A7 3A 68 FC | 	wrlong	#29, fp
15f30     08 4E 85 F1 | 	sub	fp, #8
15f34     A7 12 02 F6 | 	mov	arg01, fp
15f38     7C 79 BF FD | 	call	#_push
15f3c     A7 F0 03 F6 | 	mov	ptra, fp
15f40     B2 00 A0 FD | 	call	#popregs_
15f44                 | _do_memtop_ret
15f44     2D 00 64 FD | 	ret
15f48                 | 
15f48                 | ' 
15f48                 | ' '-------------------- mid$
15f48                 | ' 
15f48                 | ' sub do_mid
15f48                 | _do_mid
15f48     00 4A 05 F6 | 	mov	COUNT_, #0
15f4c     A8 00 A0 FD | 	call	#pushregs_
15f50     18 F0 07 F1 | 	add	ptra, #24
15f54     4A 00 00 FF 
15f58     80 E4 05 F1 | 	add	objptr, ##38016
15f5c     F2 16 02 FB | 	rdlong	arg03, objptr
15f60     0B 15 02 F6 | 	mov	arg02, arg03
15f64     01 14 66 F0 | 	shl	arg02, #1
15f68     0B 15 02 F1 | 	add	arg02, arg03
15f6c     02 14 66 F0 | 	shl	arg02, #2
15f70     03 00 00 FF 
15f74     04 E4 85 F1 | 	sub	objptr, ##1540
15f78     F2 14 02 F1 | 	add	arg02, objptr
15f7c     0A 17 02 FB | 	rdlong	arg03, arg02
15f80     0C 4E 05 F1 | 	add	fp, #12
15f84     A7 16 62 FC | 	wrlong	arg03, fp
15f88                 | ' 
15f88                 | ' numpar=compiledline(lineptr_e).result.uresult
15f88                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
15f88     0C 4E 85 F1 | 	sub	fp, #12
15f8c     03 16 0E F2 | 	cmp	arg03, #3 wz
15f90     47 00 00 FF 
15f94     7C E4 85 F1 | 	sub	objptr, ##36476
15f98     40 00 90 AD |  if_e	jmp	#LR__1810
15f9c     00 12 06 F6 | 	mov	arg01, #0
15fa0     68 78 B1 FD | 	call	#__system___getiolock_0620
15fa4     FD 12 02 F6 | 	mov	arg01, result1
15fa8     B0 1B B1 FD | 	call	#__system___lockmem
15fac     C0 01 00 FF 
15fb0     7B 15 06 F6 | 	mov	arg02, ##@LR__6087
15fb4     00 12 06 F6 | 	mov	arg01, #0
15fb8     00 16 06 F6 | 	mov	arg03, #0
15fbc     94 28 B1 FD | 	call	#__system___basic_print_string
15fc0     00 12 06 F6 | 	mov	arg01, #0
15fc4     44 78 B1 FD | 	call	#__system___getiolock_0620
15fc8     FD 00 68 FC | 	wrlong	#0, result1
15fcc     27 12 06 F6 | 	mov	arg01, #39
15fd0     00 14 06 F6 | 	mov	arg02, #0
15fd4     24 E1 B0 FD | 	call	#_printerror
15fd8     2C 01 90 FD | 	jmp	#LR__1813
15fdc                 | LR__1810
15fdc     40 78 BF FD | 	call	#_pop
15fe0     FF 16 02 F6 | 	mov	arg03, result3
15fe4     A7 FA 61 FC | 	wrlong	result1, fp
15fe8     04 4E 05 F1 | 	add	fp, #4
15fec     A7 FC 61 FC | 	wrlong	result2, fp
15ff0     04 4E 05 F1 | 	add	fp, #4
15ff4     A7 16 62 FC | 	wrlong	arg03, fp
15ff8     08 4E 85 F1 | 	sub	fp, #8
15ffc     A7 12 02 F6 | 	mov	arg01, fp
16000     00 7A BF FD | 	call	#_converttoint
16004     FD 16 02 F6 | 	mov	arg03, result1
16008     14 4E 05 F1 | 	add	fp, #20
1600c     A7 16 62 FC | 	wrlong	arg03, fp
16010     14 4E 85 F1 | 	sub	fp, #20
16014     08 78 BF FD | 	call	#_pop
16018     FF 16 02 F6 | 	mov	arg03, result3
1601c     A7 FA 61 FC | 	wrlong	result1, fp
16020     04 4E 05 F1 | 	add	fp, #4
16024     A7 FC 61 FC | 	wrlong	result2, fp
16028     04 4E 05 F1 | 	add	fp, #4
1602c     A7 16 62 FC | 	wrlong	arg03, fp
16030     08 4E 85 F1 | 	sub	fp, #8
16034     A7 12 02 F6 | 	mov	arg01, fp
16038     C8 79 BF FD | 	call	#_converttoint
1603c     FD 16 02 F6 | 	mov	arg03, result1
16040     10 4E 05 F1 | 	add	fp, #16
16044     A7 16 62 FC | 	wrlong	arg03, fp
16048     10 4E 85 F1 | 	sub	fp, #16
1604c     D0 77 BF FD | 	call	#_pop
16050     FF 16 02 F6 | 	mov	arg03, result3
16054     A7 FA 61 FC | 	wrlong	result1, fp
16058     04 4E 05 F1 | 	add	fp, #4
1605c     A7 FC 61 FC | 	wrlong	result2, fp
16060     04 4E 05 F1 | 	add	fp, #4
16064     A7 16 62 FC | 	wrlong	arg03, fp
16068                 | ' t1=pop() : arg2=converttoint(t1)
16068                 | ' t1=pop() : arg1=converttoint(t1)
16068                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16068     08 4E 85 F1 | 	sub	fp, #8
1606c     2B 16 0E F2 | 	cmp	arg03, #43 wz
16070     18 00 90 5D |  if_ne	jmp	#LR__1811
16074     A7 12 02 FB | 	rdlong	arg01, fp
16078     1C 79 BF FD | 	call	#_convertstring
1607c     A7 FA 61 FC | 	wrlong	result1, fp
16080     08 4E 05 F1 | 	add	fp, #8
16084     A7 3E 68 FC | 	wrlong	#31, fp
16088     08 4E 85 F1 | 	sub	fp, #8
1608c                 | LR__1811
1608c                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
1608c     08 4E 05 F1 | 	add	fp, #8
16090     A7 16 02 FB | 	rdlong	arg03, fp
16094     08 4E 85 F1 | 	sub	fp, #8
16098     1F 16 0E F2 | 	cmp	arg03, #31 wz
1609c     40 00 90 AD |  if_e	jmp	#LR__1812
160a0     00 12 06 F6 | 	mov	arg01, #0
160a4     64 77 B1 FD | 	call	#__system___getiolock_0620
160a8     FD 12 02 F6 | 	mov	arg01, result1
160ac     AC 1A B1 FD | 	call	#__system___lockmem
160b0     C0 01 00 FF 
160b4     82 15 06 F6 | 	mov	arg02, ##@LR__6088
160b8     00 12 06 F6 | 	mov	arg01, #0
160bc     00 16 06 F6 | 	mov	arg03, #0
160c0     90 27 B1 FD | 	call	#__system___basic_print_string
160c4     00 12 06 F6 | 	mov	arg01, #0
160c8     40 77 B1 FD | 	call	#__system___getiolock_0620
160cc     FD 00 68 FC | 	wrlong	#0, result1
160d0     0F 12 06 F6 | 	mov	arg01, #15
160d4     00 14 06 F6 | 	mov	arg02, #0
160d8     20 E0 B0 FD | 	call	#_printerror
160dc     28 00 90 FD | 	jmp	#LR__1813
160e0                 | LR__1812
160e0     A7 12 02 FB | 	rdlong	arg01, fp
160e4     10 4E 05 F1 | 	add	fp, #16
160e8     A7 14 02 FB | 	rdlong	arg02, fp
160ec     04 4E 05 F1 | 	add	fp, #4
160f0     A7 16 02 FB | 	rdlong	arg03, fp
160f4     14 4E 85 F1 | 	sub	fp, #20
160f8     F8 3B B1 FD | 	call	#__system__Mid_S
160fc     A7 FA 61 FC | 	wrlong	result1, fp
16100     A7 12 02 F6 | 	mov	arg01, fp
16104     B0 77 BF FD | 	call	#_push
16108                 | LR__1813
16108     A7 F0 03 F6 | 	mov	ptra, fp
1610c     B2 00 A0 FD | 	call	#popregs_
16110                 | _do_mid_ret
16110     2D 00 64 FD | 	ret
16114                 | 
16114                 | ' 
16114                 | ' '-------------------- mkdir
16114                 | ' 
16114                 | ' sub do_mkdir
16114                 | _do_mkdir
16114     04 4A 05 F6 | 	mov	COUNT_, #4
16118     A8 00 A0 FD | 	call	#pushregs_
1611c     00 77 BF FD | 	call	#_pop
16120     FE 18 02 F6 | 	mov	arg04, result2
16124     FF 16 02 F6 | 	mov	arg03, result3
16128     FD 26 02 F6 | 	mov	local01, result1
1612c     0C 29 02 F6 | 	mov	local02, arg04
16130     0B 2B 02 F6 | 	mov	local03, arg03
16134                 | ' 
16134                 | ' t1=pop()
16134                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16134     2B 2A 0E F2 | 	cmp	local03, #43 wz
16138     10 00 90 5D |  if_ne	jmp	#LR__1820
1613c     13 13 02 F6 | 	mov	arg01, local01
16140     54 78 BF FD | 	call	#_convertstring
16144     FD 26 02 F6 | 	mov	local01, result1
16148     1F 2A 06 F6 | 	mov	local03, #31
1614c                 | LR__1820
1614c                 | ' if t1.result_type<>result_string then printerror(15): return
1614c     1F 2A 0E F2 | 	cmp	local03, #31 wz
16150     10 00 90 AD |  if_e	jmp	#LR__1821
16154     0F 12 06 F6 | 	mov	arg01, #15
16158     00 14 06 F6 | 	mov	arg02, #0
1615c     9C DF B0 FD | 	call	#_printerror
16160     64 00 90 FD | 	jmp	#LR__1823
16164                 | LR__1821
16164     13 13 02 F6 | 	mov	arg01, local01
16168     C4 42 B1 FD | 	call	#__system___mkdir
1616c     FD 2C 0A F6 | 	mov	local04, result1 wz
16170                 | ' filename$=t1.result.sresult
16170                 | ' err=mkdir(filename$)
16170                 | ' 'err=geterr() : 
16170                 | ' if err<>0 then print "Cannot create a directory: system error "; err
16170     54 00 90 AD |  if_e	jmp	#LR__1822
16174     00 12 06 F6 | 	mov	arg01, #0
16178     90 76 B1 FD | 	call	#__system___getiolock_0620
1617c     FD 12 02 F6 | 	mov	arg01, result1
16180     D8 19 B1 FD | 	call	#__system___lockmem
16184     C0 01 00 FF 
16188     89 15 06 F6 | 	mov	arg02, ##@LR__6089
1618c     00 12 06 F6 | 	mov	arg01, #0
16190     00 16 06 F6 | 	mov	arg03, #0
16194     BC 26 B1 FD | 	call	#__system___basic_print_string
16198     00 12 06 F6 | 	mov	arg01, #0
1619c     16 15 02 F6 | 	mov	arg02, local04
161a0     00 16 06 F6 | 	mov	arg03, #0
161a4     0A 18 06 F6 | 	mov	arg04, #10
161a8     EC 26 B1 FD | 	call	#__system___basic_print_integer
161ac     00 12 06 F6 | 	mov	arg01, #0
161b0     0A 14 06 F6 | 	mov	arg02, #10
161b4     00 16 06 F6 | 	mov	arg03, #0
161b8     40 26 B1 FD | 	call	#__system___basic_print_char
161bc     00 12 06 F6 | 	mov	arg01, #0
161c0     48 76 B1 FD | 	call	#__system___getiolock_0620
161c4     FD 00 68 FC | 	wrlong	#0, result1
161c8                 | LR__1822
161c8                 | LR__1823
161c8     A7 F0 03 F6 | 	mov	ptra, fp
161cc     B2 00 A0 FD | 	call	#popregs_
161d0                 | _do_mkdir_ret
161d0     2D 00 64 FD | 	ret
161d4                 | 
161d4                 | ' 
161d4                 | ' '-------------------- mode
161d4                 | ' 
161d4                 | ' sub do_mode
161d4                 | _do_mode
161d4     05 4A 05 F6 | 	mov	COUNT_, #5
161d8     A8 00 A0 FD | 	call	#pushregs_
161dc     40 76 BF FD | 	call	#_pop
161e0     FD 26 02 F6 | 	mov	local01, result1
161e4     FE 28 02 F6 | 	mov	local02, result2
161e8     FF 2A 02 F6 | 	mov	local03, result3
161ec                 | ' t1=pop() 
161ec                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
161ec     1E 2A 0E F2 | 	cmp	local03, #30 wz
161f0     10 00 90 5D |  if_ne	jmp	#LR__1830
161f4     13 13 02 F6 | 	mov	arg01, local01
161f8     00 14 06 F6 | 	mov	arg02, #0
161fc     A0 4C B1 FD | 	call	#__system___float_tointeger
16200     FD 26 02 F6 | 	mov	local01, result1
16204                 | LR__1830
16204                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16204     1F 2A 0E F2 | 	cmp	local03, #31 wz
16208     18 00 90 5D |  if_ne	jmp	#LR__1831
1620c     13 13 02 F6 | 	mov	arg01, local01
16210     D4 4F B1 FD | 	call	#__system____builtin_atof
16214     FD 12 02 F6 | 	mov	arg01, result1
16218     00 14 06 F6 | 	mov	arg02, #0
1621c     80 4C B1 FD | 	call	#__system___float_tointeger
16220     FD 26 02 F6 | 	mov	local01, result1
16224                 | LR__1831
16224                 | ' select case t1.result.iresult
16224     13 2D 02 F6 | 	mov	local04, local01
16228     06 2C 26 F3 | 	fle	local04, #6
1622c     30 2C 62 FD | 	jmprel	local04
16230                 | LR__1832
16230     18 00 90 FD | 	jmp	#LR__1833
16234     AC 00 90 FD | 	jmp	#LR__1834
16238     14 01 90 FD | 	jmp	#LR__1835
1623c     7C 01 90 FD | 	jmp	#LR__1836
16240     E4 01 90 FD | 	jmp	#LR__1837
16244     78 02 90 FD | 	jmp	#LR__1838
16248     08 03 90 FD | 	jmp	#LR__1839
1624c                 | LR__1833
1624c     37 00 00 FF 
16250     40 E4 05 F1 | 	add	objptr, ##28224
16254     F2 02 68 FC | 	wrlong	#1, objptr
16258     04 E4 85 F1 | 	sub	objptr, #4
1625c     F2 34 69 FC | 	wrlong	#154, objptr
16260     19 00 00 FF 
16264     00 E5 05 F1 | 	add	objptr, ##13056
16268     F2 02 68 FC | 	wrlong	#1, objptr
1626c     19 00 00 FF 
16270     04 E5 85 F1 | 	sub	objptr, ##13060
16274     F2 26 69 FC | 	wrlong	#147, objptr
16278     37 00 00 FF 
1627c     38 E4 85 F1 | 	sub	objptr, ##28216
16280     04 12 06 F6 | 	mov	arg01, #4
16284     B4 FA B0 FD | 	call	#_hg010b_spin2_setfontfamily
16288     37 00 00 FF 
1628c     3C E4 05 F1 | 	add	objptr, ##28220
16290     F2 12 02 FB | 	rdlong	arg01, objptr
16294     04 E4 85 F1 | 	sub	objptr, #4
16298     F2 14 02 FB | 	rdlong	arg02, objptr
1629c                 | ' 
1629c                 | ' write_color:=ff
1629c     36 00 00 FF 
162a0     F7 E5 85 F1 | 	sub	objptr, ##28151
162a4     F2 12 62 FC | 	wrlong	arg01, objptr
162a8                 | ' write_background:=bb
162a8     04 E4 05 F1 | 	add	objptr, #4
162ac     F2 14 62 FC | 	wrlong	arg02, objptr
162b0     01 00 00 FF 
162b4     00 EA 05 F1 | 	add	ptr__dat__, ##512
162b8     52 00 00 FF 
162bc     97 E4 05 F1 | 	add	objptr, ##42135
162c0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
162c4     04 E4 85 F1 | 	sub	objptr, #4
162c8     03 00 80 FF 
162cc     F2 30 69 FC | 	wrlong	##1688, objptr
162d0     52 00 00 FF 
162d4     D8 E4 85 F1 | 	sub	objptr, ##42200
162d8     01 00 00 FF 
162dc     00 EA 85 F1 | 	sub	ptr__dat__, ##512
162e0     70 02 90 FD | 	jmp	#LR__1839
162e4                 | LR__1834
162e4     37 00 00 FF 
162e8     40 E4 05 F1 | 	add	objptr, ##28224
162ec     F2 00 68 FC | 	wrlong	#0, objptr
162f0     04 E4 85 F1 | 	sub	objptr, #4
162f4     F2 2E 68 FC | 	wrlong	#23, objptr
162f8     19 00 00 FF 
162fc     00 E5 05 F1 | 	add	objptr, ##13056
16300     F2 00 68 FC | 	wrlong	#0, objptr
16304     19 00 00 FF 
16308     04 E5 85 F1 | 	sub	objptr, ##13060
1630c     F2 00 68 FC | 	wrlong	#0, objptr
16310     37 00 00 FF 
16314     38 E4 85 F1 | 	sub	objptr, ##28216
16318     00 12 06 F6 | 	mov	arg01, #0
1631c     1C FA B0 FD | 	call	#_hg010b_spin2_setfontfamily
16320     37 00 00 FF 
16324     3C E4 05 F1 | 	add	objptr, ##28220
16328     F2 12 02 FB | 	rdlong	arg01, objptr
1632c     04 E4 85 F1 | 	sub	objptr, #4
16330     F2 14 02 FB | 	rdlong	arg02, objptr
16334                 | ' 
16334                 | ' write_color:=ff
16334     36 00 00 FF 
16338     F7 E5 85 F1 | 	sub	objptr, ##28151
1633c     F2 12 62 FC | 	wrlong	arg01, objptr
16340                 | ' write_background:=bb
16340     04 E4 05 F1 | 	add	objptr, #4
16344     F2 14 62 FC | 	wrlong	arg02, objptr
16348     45 E4 85 F1 | 	sub	objptr, #69
1634c     04 02 90 FD | 	jmp	#LR__1839
16350                 | LR__1835
16350     37 00 00 FF 
16354     40 E4 05 F1 | 	add	objptr, ##28224
16358     F2 00 68 FC | 	wrlong	#0, objptr
1635c     04 E4 85 F1 | 	sub	objptr, #4
16360     F2 6A 69 FC | 	wrlong	#181, objptr
16364     19 00 00 FF 
16368     00 E5 05 F1 | 	add	objptr, ##13056
1636c     F2 00 68 FC | 	wrlong	#0, objptr
16370     19 00 00 FF 
16374     04 E5 85 F1 | 	sub	objptr, ##13060
16378     F2 00 68 FC | 	wrlong	#0, objptr
1637c     37 00 00 FF 
16380     38 E4 85 F1 | 	sub	objptr, ##28216
16384     00 12 06 F6 | 	mov	arg01, #0
16388     B0 F9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1638c     37 00 00 FF 
16390     3C E4 05 F1 | 	add	objptr, ##28220
16394     F2 12 02 FB | 	rdlong	arg01, objptr
16398     04 E4 85 F1 | 	sub	objptr, #4
1639c     F2 14 02 FB | 	rdlong	arg02, objptr
163a0                 | ' 
163a0                 | ' write_color:=ff
163a0     36 00 00 FF 
163a4     F7 E5 85 F1 | 	sub	objptr, ##28151
163a8     F2 12 62 FC | 	wrlong	arg01, objptr
163ac                 | ' write_background:=bb
163ac     04 E4 05 F1 | 	add	objptr, #4
163b0     F2 14 62 FC | 	wrlong	arg02, objptr
163b4     45 E4 85 F1 | 	sub	objptr, #69
163b8     98 01 90 FD | 	jmp	#LR__1839
163bc                 | LR__1836
163bc     37 00 00 FF 
163c0     40 E4 05 F1 | 	add	objptr, ##28224
163c4     F2 00 68 FC | 	wrlong	#0, objptr
163c8     04 E4 85 F1 | 	sub	objptr, #4
163cc     F2 1E 68 FC | 	wrlong	#15, objptr
163d0     19 00 00 FF 
163d4     00 E5 05 F1 | 	add	objptr, ##13056
163d8     F2 00 68 FC | 	wrlong	#0, objptr
163dc     19 00 00 FF 
163e0     04 E5 85 F1 | 	sub	objptr, ##13060
163e4     F2 00 68 FC | 	wrlong	#0, objptr
163e8     37 00 00 FF 
163ec     38 E4 85 F1 | 	sub	objptr, ##28216
163f0     00 12 06 F6 | 	mov	arg01, #0
163f4     44 F9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
163f8     37 00 00 FF 
163fc     3C E4 05 F1 | 	add	objptr, ##28220
16400     F2 12 02 FB | 	rdlong	arg01, objptr
16404     04 E4 85 F1 | 	sub	objptr, #4
16408     F2 14 02 FB | 	rdlong	arg02, objptr
1640c                 | ' 
1640c                 | ' write_color:=ff
1640c     36 00 00 FF 
16410     F7 E5 85 F1 | 	sub	objptr, ##28151
16414     F2 12 62 FC | 	wrlong	arg01, objptr
16418                 | ' write_background:=bb
16418     04 E4 05 F1 | 	add	objptr, #4
1641c     F2 14 62 FC | 	wrlong	arg02, objptr
16420     45 E4 85 F1 | 	sub	objptr, #69
16424     2C 01 90 FD | 	jmp	#LR__1839
16428                 | LR__1837
16428     37 00 00 FF 
1642c     40 E4 05 F1 | 	add	objptr, ##28224
16430     F2 02 68 FC | 	wrlong	#1, objptr
16434     04 E4 85 F1 | 	sub	objptr, #4
16438     F2 02 68 FC | 	wrlong	#1, objptr
1643c     19 00 00 FF 
16440     00 E5 05 F1 | 	add	objptr, ##13056
16444     F2 02 68 FC | 	wrlong	#1, objptr
16448     19 00 00 FF 
1644c     04 E5 85 F1 | 	sub	objptr, ##13060
16450     F2 1C 68 FC | 	wrlong	#14, objptr
16454     37 00 00 FF 
16458     38 E4 85 F1 | 	sub	objptr, ##28216
1645c     04 12 06 F6 | 	mov	arg01, #4
16460     D8 F8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16464     37 00 00 FF 
16468     3C E4 05 F1 | 	add	objptr, ##28220
1646c     F2 12 02 FB | 	rdlong	arg01, objptr
16470     04 E4 85 F1 | 	sub	objptr, #4
16474     F2 14 02 FB | 	rdlong	arg02, objptr
16478                 | ' 
16478                 | ' write_color:=ff
16478     36 00 00 FF 
1647c     F7 E5 85 F1 | 	sub	objptr, ##28151
16480     F2 12 62 FC | 	wrlong	arg01, objptr
16484                 | ' write_background:=bb
16484     04 E4 05 F1 | 	add	objptr, #4
16488     F2 14 62 FC | 	wrlong	arg02, objptr
1648c     07 00 00 FF 
16490     82 EB 05 F1 | 	add	ptr__dat__, ##3970
16494     52 00 00 FF 
16498     97 E4 05 F1 | 	add	objptr, ##42135
1649c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
164a0     04 E4 85 F1 | 	sub	objptr, #4
164a4     03 00 80 FF 
164a8     F2 30 69 FC | 	wrlong	##1688, objptr
164ac     52 00 00 FF 
164b0     D8 E4 85 F1 | 	sub	objptr, ##42200
164b4     07 00 00 FF 
164b8     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
164bc     94 00 90 FD | 	jmp	#LR__1839
164c0                 | LR__1838
164c0     37 00 00 FF 
164c4     40 E4 05 F1 | 	add	objptr, ##28224
164c8     F2 04 68 FC | 	wrlong	#2, objptr
164cc     04 E4 85 F1 | 	sub	objptr, #4
164d0     F2 02 68 FC | 	wrlong	#1, objptr
164d4     19 00 00 FF 
164d8     00 E5 05 F1 | 	add	objptr, ##13056
164dc     F2 02 68 FC | 	wrlong	#1, objptr
164e0     19 00 00 FF 
164e4     04 E5 85 F1 | 	sub	objptr, ##13060
164e8     F2 0E 68 FC | 	wrlong	#7, objptr
164ec     37 00 00 FF 
164f0     38 E4 85 F1 | 	sub	objptr, ##28216
164f4     08 12 06 F6 | 	mov	arg01, #8
164f8     40 F8 B0 FD | 	call	#_hg010b_spin2_setfontfamily
164fc     37 00 00 FF 
16500     3C E4 05 F1 | 	add	objptr, ##28220
16504     F2 12 02 FB | 	rdlong	arg01, objptr
16508     04 E4 85 F1 | 	sub	objptr, #4
1650c     F2 14 02 FB | 	rdlong	arg02, objptr
16510                 | ' 
16510                 | ' write_color:=ff
16510     36 00 00 FF 
16514     F7 E5 85 F1 | 	sub	objptr, ##28151
16518     F2 12 62 FC | 	wrlong	arg01, objptr
1651c                 | ' write_background:=bb
1651c     04 E4 05 F1 | 	add	objptr, #4
16520     F2 14 62 FC | 	wrlong	arg02, objptr
16524     07 00 00 FF 
16528     82 EB 05 F1 | 	add	ptr__dat__, ##3970
1652c     52 00 00 FF 
16530     97 E4 05 F1 | 	add	objptr, ##42135
16534     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16538     04 E4 85 F1 | 	sub	objptr, #4
1653c     03 00 80 FF 
16540     F2 30 69 FC | 	wrlong	##1688, objptr
16544     52 00 00 FF 
16548     D8 E4 85 F1 | 	sub	objptr, ##42200
1654c     07 00 00 FF 
16550     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
16554                 | LR__1839
16554     52 00 00 FF 
16558     D4 E4 05 F1 | 	add	objptr, ##42196
1655c     F2 26 62 FC | 	wrlong	local01, objptr
16560     04 E4 85 F1 | 	sub	objptr, #4
16564     F2 12 02 FB | 	rdlong	arg01, objptr
16568     0F 00 00 FF 
1656c     74 E4 85 F1 | 	sub	objptr, ##7796
16570     F2 2E 02 FB | 	rdlong	local05, objptr
16574     43 00 00 FF 
16578     5C E4 85 F1 | 	sub	objptr, ##34396
1657c     17 13 82 F1 | 	sub	arg01, local05
16580     00 14 06 F6 | 	mov	arg02, #0
16584     0A 16 06 F6 | 	mov	arg03, #10
16588     A4 38 B1 FD | 	call	#__system__Number_S
1658c     FD 12 02 F6 | 	mov	arg01, result1
16590     C0 01 00 FF 
16594     B2 15 06 F6 | 	mov	arg02, ##@LR__6090
16598     1C 16 B1 FD | 	call	#__system___string_concat
1659c     50 00 00 FF 
165a0     38 E5 05 F1 | 	add	objptr, ##41272
165a4     F2 FA 61 FC | 	wrlong	result1, objptr
165a8     19 00 00 FF 
165ac     FC E4 85 F1 | 	sub	objptr, ##13052
165b0     F2 12 02 FB | 	rdlong	arg01, objptr
165b4     04 E4 85 F1 | 	sub	objptr, #4
165b8     F2 14 02 FB | 	rdlong	arg02, objptr
165bc     37 00 00 FF 
165c0     38 E4 85 F1 | 	sub	objptr, ##28216
165c4     38 F9 B0 FD | 	call	#_hg010b_spin2_cls
165c8     C0 01 00 FF 
165cc     C4 13 06 F6 | 	mov	arg01, ##@LR__6091
165d0                 | ' 
165d0                 | ' write(text)
165d0     EC FC B0 FD | 	call	#_hg010b_spin2_write
165d4                 | ' crlf
165d4     88 01 B1 FD | 	call	#_hg010b_spin2_crlf
165d8     18 00 00 FF 
165dc     40 EB 05 F1 | 	add	ptr__dat__, ##12608
165e0     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
165e4     18 00 00 FF 
165e8     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
165ec                 | ' 
165ec                 | ' write(text)
165ec     D0 FC B0 FD | 	call	#_hg010b_spin2_write
165f0                 | ' crlf
165f0     6C 01 B1 FD | 	call	#_hg010b_spin2_crlf
165f4     50 00 00 FF 
165f8     38 E5 05 F1 | 	add	objptr, ##41272
165fc     F2 12 02 FB | 	rdlong	arg01, objptr
16600     50 00 00 FF 
16604     38 E5 85 F1 | 	sub	objptr, ##41272
16608                 | ' 
16608                 | ' write(text)
16608     B4 FC B0 FD | 	call	#_hg010b_spin2_write
1660c                 | ' crlf
1660c     50 01 B1 FD | 	call	#_hg010b_spin2_crlf
16610     A7 F0 03 F6 | 	mov	ptra, fp
16614     B2 00 A0 FD | 	call	#popregs_
16618                 | _do_mode_ret
16618     2D 00 64 FD | 	ret
1661c                 | 
1661c                 | ' 
1661c                 | ' '-------------------- mouse
1661c                 | ' 
1661c                 | ' sub do_mouse
1661c                 | _do_mouse
1661c     00 72 BF FD | 	call	#_pop
16620     00 FA 4D F2 | 	cmps	result1, #0 wz
16624                 | ' 
16624                 | ' t1=pop()
16624                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
16624     14 00 90 5D |  if_ne	jmp	#LR__1840
16628     10 12 06 F6 | 	mov	arg01, #16
1662c     00 14 06 F6 | 	mov	arg02, #0
16630     00 16 06 F6 | 	mov	arg03, #0
16634     34 EB B0 FD | 	call	#_hg010b_spin2_setspritesize
16638     10 00 90 FD | 	jmp	#LR__1841
1663c                 | LR__1840
1663c     10 12 06 F6 | 	mov	arg01, #16
16640     20 14 06 F6 | 	mov	arg02, #32
16644     20 16 06 F6 | 	mov	arg03, #32
16648     20 EB B0 FD | 	call	#_hg010b_spin2_setspritesize
1664c                 | LR__1841
1664c                 | _do_mouse_ret
1664c     2D 00 64 FD | 	ret
16650                 | 
16650                 | ' 
16650                 | ' '-------------------- mousek
16650                 | ' 
16650                 | ' sub do_mousek
16650                 | _do_mousek
16650     00 4A 05 F6 | 	mov	COUNT_, #0
16654     A8 00 A0 FD | 	call	#pushregs_
16658     0C F0 07 F1 | 	add	ptra, #12
1665c     08 4E 05 F1 | 	add	fp, #8
16660     A7 3A 68 FC | 	wrlong	#29, fp
16664     08 4E 85 F1 | 	sub	fp, #8
16668     51 00 00 FF 
1666c     50 E5 05 F1 | 	add	objptr, ##41808
16670     F2 12 02 FB | 	rdlong	arg01, objptr
16674     51 00 00 FF 
16678     50 E5 85 F1 | 	sub	objptr, ##41808
1667c     A7 12 62 FC | 	wrlong	arg01, fp
16680     A7 12 02 F6 | 	mov	arg01, fp
16684     30 72 BF FD | 	call	#_push
16688     A7 F0 03 F6 | 	mov	ptra, fp
1668c     B2 00 A0 FD | 	call	#popregs_
16690                 | _do_mousek_ret
16690     2D 00 64 FD | 	ret
16694                 | 
16694                 | ' 
16694                 | ' '-------------------- mousew
16694                 | ' 
16694                 | ' sub do_mousew
16694                 | _do_mousew
16694     00 4A 05 F6 | 	mov	COUNT_, #0
16698     A8 00 A0 FD | 	call	#pushregs_
1669c     0C F0 07 F1 | 	add	ptra, #12
166a0     08 4E 05 F1 | 	add	fp, #8
166a4     A7 38 68 FC | 	wrlong	#28, fp
166a8     08 4E 85 F1 | 	sub	fp, #8
166ac     51 00 00 FF 
166b0     54 E5 05 F1 | 	add	objptr, ##41812
166b4     F2 12 02 FB | 	rdlong	arg01, objptr
166b8     51 00 00 FF 
166bc     54 E5 85 F1 | 	sub	objptr, ##41812
166c0     A7 12 62 FC | 	wrlong	arg01, fp
166c4     A7 12 02 F6 | 	mov	arg01, fp
166c8     EC 71 BF FD | 	call	#_push
166cc     A7 F0 03 F6 | 	mov	ptra, fp
166d0     B2 00 A0 FD | 	call	#popregs_
166d4                 | _do_mousew_ret
166d4     2D 00 64 FD | 	ret
166d8                 | 
166d8                 | ' 
166d8                 | ' '-------------------- mousex
166d8                 | ' 
166d8                 | ' sub do_mousex
166d8                 | _do_mousex
166d8     00 4A 05 F6 | 	mov	COUNT_, #0
166dc     A8 00 A0 FD | 	call	#pushregs_
166e0     0C F0 07 F1 | 	add	ptra, #12
166e4     08 4E 05 F1 | 	add	fp, #8
166e8     A7 3A 68 FC | 	wrlong	#29, fp
166ec     08 4E 85 F1 | 	sub	fp, #8
166f0     51 00 00 FF 
166f4     48 E5 05 F1 | 	add	objptr, ##41800
166f8     F2 12 02 FB | 	rdlong	arg01, objptr
166fc     51 00 00 FF 
16700     48 E5 85 F1 | 	sub	objptr, ##41800
16704     A7 12 62 FC | 	wrlong	arg01, fp
16708     A7 12 02 F6 | 	mov	arg01, fp
1670c     A8 71 BF FD | 	call	#_push
16710     A7 F0 03 F6 | 	mov	ptra, fp
16714     B2 00 A0 FD | 	call	#popregs_
16718                 | _do_mousex_ret
16718     2D 00 64 FD | 	ret
1671c                 | 
1671c                 | ' 
1671c                 | ' '-------------------- mousey
1671c                 | ' 
1671c                 | ' sub do_mousey
1671c                 | _do_mousey
1671c     00 4A 05 F6 | 	mov	COUNT_, #0
16720     A8 00 A0 FD | 	call	#pushregs_
16724     0C F0 07 F1 | 	add	ptra, #12
16728     08 4E 05 F1 | 	add	fp, #8
1672c     A7 3A 68 FC | 	wrlong	#29, fp
16730     08 4E 85 F1 | 	sub	fp, #8
16734     51 00 00 FF 
16738     4C E5 05 F1 | 	add	objptr, ##41804
1673c     F2 12 02 FB | 	rdlong	arg01, objptr
16740     51 00 00 FF 
16744     4C E5 85 F1 | 	sub	objptr, ##41804
16748     A7 12 62 FC | 	wrlong	arg01, fp
1674c     A7 12 02 F6 | 	mov	arg01, fp
16750     64 71 BF FD | 	call	#_push
16754     A7 F0 03 F6 | 	mov	ptra, fp
16758     B2 00 A0 FD | 	call	#popregs_
1675c                 | _do_mousey_ret
1675c     2D 00 64 FD | 	ret
16760                 | 
16760                 | ' 
16760                 | ' '------------------ new
16760                 | ' 
16760                 | ' sub do_new
16760                 | _do_new
16760     03 4A 05 F6 | 	mov	COUNT_, #3
16764     A8 00 A0 FD | 	call	#pushregs_
16768                 | ' 
16768                 | ' if inrun=1 then inrun=2
16768     50 00 00 FF 
1676c     EC E4 05 F1 | 	add	objptr, ##41196
16770     F2 16 02 FB | 	rdlong	arg03, objptr
16774     50 00 00 FF 
16778     EC E4 85 F1 | 	sub	objptr, ##41196
1677c     01 16 0E F2 | 	cmp	arg03, #1 wz
16780     50 00 00 AF 
16784     EC E4 05 A1 |  if_e	add	objptr, ##41196
16788     F2 04 68 AC |  if_e	wrlong	#2, objptr
1678c     50 00 00 AF 
16790     EC E4 85 A1 |  if_e	sub	objptr, ##41196
16794     13 12 C6 F9 | 	decod	arg01, #19
16798     01 14 66 F6 | 	neg	arg02, #1
1679c     FC DA B0 FD | 	call	#_pslpoke
167a0     35 00 00 FF 
167a4     08 E4 05 F1 | 	add	objptr, ##27144
167a8     F2 00 68 FC | 	wrlong	#0, objptr
167ac                 | ' pslpoke(memlo,$FFFFFFFF)
167ac                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
167ac     00 26 06 F6 | 	mov	local01, #0
167b0     20 00 00 FF 
167b4     10 E4 85 F1 | 	sub	objptr, ##16400
167b8     97 1E 48 FB | 	callpa	#(@LR__1851-@LR__1850)>>2,fcache_load_ptr_
167bc                 | LR__1850
167bc     13 17 02 F6 | 	mov	arg03, local01
167c0     04 16 66 F0 | 	shl	arg03, #4
167c4     F2 16 02 F1 | 	add	arg03, objptr
167c8     C0 01 00 FF 
167cc     C5 15 06 F6 | 	mov	arg02, ##@LR__6092
167d0     0B 15 62 FC | 	wrlong	arg02, arg03
167d4     13 29 02 F6 | 	mov	local02, local01
167d8     04 28 66 F0 | 	shl	local02, #4
167dc     F2 28 02 F1 | 	add	local02, objptr
167e0     0C 28 06 F1 | 	add	local02, #12
167e4     14 01 68 FC | 	wrlong	#0, local02
167e8     01 26 06 F1 | 	add	local01, #1
167ec     02 00 00 FF 
167f0     01 26 56 F2 | 	cmps	local01, ##1025 wc
167f4     C4 FF 9F CD |  if_b	jmp	#LR__1850
167f8                 | LR__1851
167f8     35 00 00 FF 
167fc     90 E4 05 F1 | 	add	objptr, ##27280
16800     00 04 80 FF 
16804     F2 00 68 FC | 	wrlong	##524288, objptr
16808     06 00 00 FF 
1680c     30 E4 05 F1 | 	add	objptr, ##3120
16810     00 04 80 FF 
16814     F2 00 68 FC | 	wrlong	##524288, objptr
16818     04 E4 05 F1 | 	add	objptr, #4
1681c     00 04 80 FF 
16820     F2 00 68 FC | 	wrlong	##524288, objptr
16824     0D 00 00 FF 
16828     64 E4 85 F1 | 	sub	objptr, ##6756
1682c     F2 00 68 FC | 	wrlong	#0, objptr
16830     07 00 00 FF 
16834     24 E4 05 F1 | 	add	objptr, ##3620
16838     F2 00 68 FC | 	wrlong	#0, objptr
1683c     07 00 00 FF 
16840     20 E4 85 F1 | 	sub	objptr, ##3616
16844     00 04 80 FF 
16848     F2 00 68 FC | 	wrlong	##524288, objptr
1684c     0D 00 00 FF 
16850     D0 E4 05 F1 | 	add	objptr, ##6864
16854     F2 00 68 FC | 	wrlong	#0, objptr
16858     C0 01 00 FF 
1685c     C6 2B 06 F6 | 	mov	local03, ##@LR__6093
16860     01 00 00 FF 
16864     E8 E5 05 F1 | 	add	objptr, ##1000
16868     F2 2A 62 FC | 	wrlong	local03, objptr
1686c     08 00 00 FF 
16870     88 E4 85 F1 | 	sub	objptr, ##4232
16874     F2 00 68 FC | 	wrlong	#0, objptr
16878     04 E4 05 F1 | 	add	objptr, #4
1687c     FF FF FF FF 
16880     F2 FE 6B FC | 	wrlong	##-1, objptr
16884     06 00 00 FF 
16888     A0 E4 05 F1 | 	add	objptr, ##3232
1688c     F2 00 68 FC | 	wrlong	#0, objptr
16890     04 E4 05 F1 | 	add	objptr, #4
16894     F2 00 68 FC | 	wrlong	#0, objptr
16898                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
16898                 | ' stackpointer=0
16898                 | ' lineptr=0 
16898                 | ' programptr=memlo ': stringptr=0
16898                 | ' dataptr=0 : readline=""
16898                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
16898                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
16898     00 26 06 F6 | 	mov	local01, #0
1689c     06 00 00 FF 
168a0     9C E4 85 F1 | 	sub	objptr, ##3228
168a4     97 16 48 FB | 	callpa	#(@LR__1853-@LR__1852)>>2,fcache_load_ptr_
168a8                 | LR__1852
168a8     13 29 02 F6 | 	mov	local02, local01
168ac     02 28 66 F0 | 	shl	local02, #2
168b0     13 29 02 F1 | 	add	local02, local01
168b4     02 28 66 F0 | 	shl	local02, #2
168b8     F2 28 02 F1 | 	add	local02, objptr
168bc     08 28 06 F1 | 	add	local02, #8
168c0     FF FF FF FF 
168c4     14 FF 6B FC | 	wrlong	##-1, local02
168c8     01 26 06 F1 | 	add	local01, #1
168cc     41 26 56 F2 | 	cmps	local01, #65 wc
168d0     D4 FF 9F CD |  if_b	jmp	#LR__1852
168d4                 | LR__1853
168d4     4A 00 00 FF 
168d8     98 E4 85 F1 | 	sub	objptr, ##38040
168dc                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
168dc     00 26 06 F6 | 	mov	local01, #0
168e0                 | LR__1854
168e0     13 29 02 F6 | 	mov	local02, local01
168e4     02 28 66 F0 | 	shl	local02, #2
168e8     52 00 00 FF 
168ec     8C E4 05 F1 | 	add	objptr, ##42124
168f0     F2 28 02 F1 | 	add	local02, objptr
168f4     14 2B 0A FB | 	rdlong	local03, local02 wz
168f8     52 00 00 FF 
168fc     8C E4 85 F1 | 	sub	objptr, ##42124
16900     34 00 90 AD |  if_e	jmp	#LR__1855
16904     13 13 02 F6 | 	mov	arg01, local01
16908     00 14 06 F6 | 	mov	arg02, #0
1690c     00 16 06 F6 | 	mov	arg03, #0
16910     58 E8 B0 FD | 	call	#_hg010b_spin2_setspritesize
16914     13 29 02 F6 | 	mov	local02, local01
16918     02 28 66 F0 | 	shl	local02, #2
1691c     52 00 00 FF 
16920     8C E4 05 F1 | 	add	objptr, ##42124
16924     F2 28 02 F1 | 	add	local02, objptr
16928     14 13 02 FB | 	rdlong	arg01, local02
1692c     52 00 00 FF 
16930     8C E4 85 F1 | 	sub	objptr, ##42124
16934     08 55 B1 FD | 	call	#__system___gc_free
16938                 | LR__1855
16938     01 26 06 F1 | 	add	local01, #1
1693c     10 26 56 F2 | 	cmps	local01, #16 wc
16940     9C FF 9F CD |  if_b	jmp	#LR__1854
16944     52 00 00 FF 
16948     E0 E4 05 F1 | 	add	objptr, ##42208
1694c     00 C0 9F FF 
16950     F2 00 68 FC | 	wrlong	##1065353216, objptr
16954     04 E4 05 F1 | 	add	objptr, #4
16958     00 C0 9F FF 
1695c     F2 00 68 FC | 	wrlong	##1065353216, objptr
16960     52 00 00 FF 
16964     E0 E4 85 F1 | 	sub	objptr, ##42208
16968     F2 2A 02 FB | 	rdlong	local03, objptr
1696c     52 00 00 FF 
16970     CC E4 05 F1 | 	add	objptr, ##42188
16974     F2 2A 62 FC | 	wrlong	local03, objptr
16978     52 00 00 FF 
1697c     D0 E4 85 F1 | 	sub	objptr, ##42192
16980     11 12 06 F6 | 	mov	arg01, #17
16984     08 14 06 F6 | 	mov	arg02, #8
16988     10 16 06 F6 | 	mov	arg03, #16
1698c     DC E7 B0 FD | 	call	#_hg010b_spin2_setspritesize
16990     10 12 06 F6 | 	mov	arg01, #16
16994     20 14 06 F6 | 	mov	arg02, #32
16998     20 16 06 F6 | 	mov	arg03, #32
1699c     CC E7 B0 FD | 	call	#_hg010b_spin2_setspritesize
169a0     C0 01 00 FF 
169a4     C7 2B 06 F6 | 	mov	local03, ##@LR__6094
169a8     52 00 00 FF 
169ac     FC E4 05 F1 | 	add	objptr, ##42236
169b0     F2 2A 62 FC | 	wrlong	local03, objptr
169b4     52 00 00 FF 
169b8     FC E4 85 F1 | 	sub	objptr, ##42236
169bc     14 CB B0 FD | 	call	#_init_audio
169c0     A7 F0 03 F6 | 	mov	ptra, fp
169c4     B2 00 A0 FD | 	call	#popregs_
169c8                 | _do_new_ret
169c8     2D 00 64 FD | 	ret
169cc                 | 
169cc                 | ' 
169cc                 | ' '-------------------- next
169cc                 | ' 
169cc                 | ' sub do_next()
169cc                 | _do_next
169cc     04 4A 05 F6 | 	mov	COUNT_, #4
169d0     A8 00 A0 FD | 	call	#pushregs_
169d4     48 6E BF FD | 	call	#_pop
169d8     FD 26 02 F6 | 	mov	local01, result1
169dc     FE 28 02 F6 | 	mov	local02, result2
169e0     FF 2A 02 F6 | 	mov	local03, result3
169e4                 | ' t1=pop() :varnum=t1.result.uresult
169e4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
169e4     50 00 00 FF 
169e8     30 E5 05 F1 | 	add	objptr, ##41264
169ec     F2 14 02 FB | 	rdlong	arg02, objptr
169f0     0A 13 02 F6 | 	mov	arg01, arg02
169f4     02 12 66 F0 | 	shl	arg01, #2
169f8     0A 13 02 F1 | 	add	arg01, arg02
169fc     02 12 66 F0 | 	shl	arg01, #2
16a00     06 00 00 FF 
16a04     98 E4 85 F1 | 	sub	objptr, ##3224
16a08     F2 12 02 F1 | 	add	arg01, objptr
16a0c     08 12 06 F1 | 	add	arg01, #8
16a10     09 15 02 FB | 	rdlong	arg02, arg01
16a14     13 15 0A F2 | 	cmp	arg02, local01 wz
16a18     4A 00 00 FF 
16a1c     98 E4 85 F1 | 	sub	objptr, ##38040
16a20     10 00 90 AD |  if_e	jmp	#LR__1860
16a24     25 12 06 F6 | 	mov	arg01, #37
16a28     00 14 06 F6 | 	mov	arg02, #0
16a2c     CC D6 B0 FD | 	call	#_printerror
16a30     54 03 90 FD | 	jmp	#LR__1867
16a34                 | LR__1860
16a34                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
16a34     13 15 02 F6 | 	mov	arg02, local01
16a38     04 14 66 F0 | 	shl	arg02, #4
16a3c     14 00 00 FF 
16a40     F8 E5 05 F1 | 	add	objptr, ##10744
16a44     F2 14 02 F1 | 	add	arg02, objptr
16a48     0C 14 06 F1 | 	add	arg02, #12
16a4c     0A 15 02 FB | 	rdlong	arg02, arg02
16a50     1E 14 0E F2 | 	cmp	arg02, #30 wz
16a54     14 00 00 FF 
16a58     F8 E5 85 F1 | 	sub	objptr, ##10744
16a5c     54 00 90 5D |  if_ne	jmp	#LR__1861
16a60     13 15 02 F6 | 	mov	arg02, local01
16a64     04 14 66 F0 | 	shl	arg02, #4
16a68     14 00 00 FF 
16a6c     F8 E5 05 F1 | 	add	objptr, ##10744
16a70     F2 14 02 F1 | 	add	arg02, objptr
16a74     0C 14 06 F1 | 	add	arg02, #12
16a78     0A 39 68 FC | 	wrlong	#28, arg02
16a7c     13 2D 02 F6 | 	mov	local04, local01
16a80     04 2C 66 F0 | 	shl	local04, #4
16a84     F2 2C 02 F1 | 	add	local04, objptr
16a88     13 15 02 F6 | 	mov	arg02, local01
16a8c     04 14 66 F0 | 	shl	arg02, #4
16a90     F2 14 02 F1 | 	add	arg02, objptr
16a94     04 14 06 F1 | 	add	arg02, #4
16a98     0A 13 02 FB | 	rdlong	arg01, arg02
16a9c     14 00 00 FF 
16aa0     F8 E5 85 F1 | 	sub	objptr, ##10744
16aa4     01 14 06 F6 | 	mov	arg02, #1
16aa8     F4 43 B1 FD | 	call	#__system___float_tointeger
16aac     04 2C 06 F1 | 	add	local04, #4
16ab0     16 FB 61 FC | 	wrlong	result1, local04
16ab4                 | LR__1861
16ab4     50 00 00 FF 
16ab8     30 E5 05 F1 | 	add	objptr, ##41264
16abc     F2 2C 02 FB | 	rdlong	local04, objptr
16ac0     16 15 02 F6 | 	mov	arg02, local04
16ac4     02 14 66 F0 | 	shl	arg02, #2
16ac8     16 15 02 F1 | 	add	arg02, local04
16acc     02 14 66 F0 | 	shl	arg02, #2
16ad0     06 00 00 FF 
16ad4     98 E4 85 F1 | 	sub	objptr, ##3224
16ad8     F2 14 02 F1 | 	add	arg02, objptr
16adc     0C 14 06 F1 | 	add	arg02, #12
16ae0     0A FF 01 FB | 	rdlong	result3, arg02
16ae4     13 2D 02 F6 | 	mov	local04, local01
16ae8     04 2C 66 F0 | 	shl	local04, #4
16aec     35 00 00 FF 
16af0     A0 E4 85 F1 | 	sub	objptr, ##27296
16af4     F2 2C 02 F1 | 	add	local04, objptr
16af8     13 15 02 F6 | 	mov	arg02, local01
16afc     04 14 66 F0 | 	shl	arg02, #4
16b00     F2 14 02 F1 | 	add	arg02, objptr
16b04     04 14 06 F1 | 	add	arg02, #4
16b08     0A 13 02 FB | 	rdlong	arg01, arg02
16b0c     FF 12 02 F1 | 	add	arg01, result3
16b10     04 2C 06 F1 | 	add	local04, #4
16b14     16 13 62 FC | 	wrlong	arg01, local04
16b18                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
16b18                 | ' if fortable(fortop).stepval>=0 then
16b18     3B 00 00 FF 
16b1c     38 E5 05 F1 | 	add	objptr, ##30520
16b20     F2 2C 02 FB | 	rdlong	local04, objptr
16b24     16 13 02 F6 | 	mov	arg01, local04
16b28     02 12 66 F0 | 	shl	arg01, #2
16b2c     16 13 02 F1 | 	add	arg01, local04
16b30     02 12 66 F0 | 	shl	arg01, #2
16b34     06 00 00 FF 
16b38     98 E4 85 F1 | 	sub	objptr, ##3224
16b3c     F2 12 02 F1 | 	add	arg01, objptr
16b40     0C 12 06 F1 | 	add	arg01, #12
16b44     09 13 02 FB | 	rdlong	arg01, arg01
16b48     00 12 56 F2 | 	cmps	arg01, #0 wc
16b4c     4A 00 00 FF 
16b50     98 E4 85 F1 | 	sub	objptr, ##38040
16b54     78 00 90 CD |  if_b	jmp	#LR__1862
16b58                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
16b58     04 26 66 F0 | 	shl	local01, #4
16b5c     14 00 00 FF 
16b60     F8 E5 05 F1 | 	add	objptr, ##10744
16b64     F2 26 02 F1 | 	add	local01, objptr
16b68     3B 00 00 FF 
16b6c     38 E5 05 F1 | 	add	objptr, ##30520
16b70     F2 12 02 FB | 	rdlong	arg01, objptr
16b74     09 2D 02 F6 | 	mov	local04, arg01
16b78     02 2C 66 F0 | 	shl	local04, #2
16b7c     09 2D 02 F1 | 	add	local04, arg01
16b80     02 2C 66 F0 | 	shl	local04, #2
16b84     06 00 00 FF 
16b88     98 E4 85 F1 | 	sub	objptr, ##3224
16b8c     F2 2C 02 F1 | 	add	local04, objptr
16b90     04 26 06 F1 | 	add	local01, #4
16b94     13 27 02 FB | 	rdlong	local01, local01
16b98     10 2C 06 F1 | 	add	local04, #16
16b9c     16 2D 02 FB | 	rdlong	local04, local04
16ba0     16 27 5A F2 | 	cmps	local01, local04 wcz
16ba4     4A 00 00 FF 
16ba8     98 E4 85 F1 | 	sub	objptr, ##38040
16bac     9C 00 90 ED |  if_be	jmp	#LR__1864
16bb0     50 00 00 FF 
16bb4     30 E5 05 F1 | 	add	objptr, ##41264
16bb8     F2 2C 02 FB | 	rdlong	local04, objptr
16bbc     01 2C 86 F1 | 	sub	local04, #1
16bc0     F2 2C 62 FC | 	wrlong	local04, objptr
16bc4     50 00 00 FF 
16bc8     30 E5 85 F1 | 	sub	objptr, ##41264
16bcc     B8 01 90 FD | 	jmp	#LR__1867
16bd0                 | LR__1862
16bd0                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
16bd0     13 2D 02 F6 | 	mov	local04, local01
16bd4     04 2C 66 F0 | 	shl	local04, #4
16bd8     14 00 00 FF 
16bdc     F8 E5 05 F1 | 	add	objptr, ##10744
16be0     F2 2C 02 F1 | 	add	local04, objptr
16be4     3B 00 00 FF 
16be8     38 E5 05 F1 | 	add	objptr, ##30520
16bec     F2 26 02 FB | 	rdlong	local01, objptr
16bf0     13 13 02 F6 | 	mov	arg01, local01
16bf4     02 12 66 F0 | 	shl	arg01, #2
16bf8     13 13 02 F1 | 	add	arg01, local01
16bfc     02 12 66 F0 | 	shl	arg01, #2
16c00     06 00 00 FF 
16c04     98 E4 85 F1 | 	sub	objptr, ##3224
16c08     F2 12 02 F1 | 	add	arg01, objptr
16c0c     04 2C 06 F1 | 	add	local04, #4
16c10     16 2D 02 FB | 	rdlong	local04, local04
16c14     10 12 06 F1 | 	add	arg01, #16
16c18     09 13 02 FB | 	rdlong	arg01, arg01
16c1c     09 2D 52 F2 | 	cmps	local04, arg01 wc
16c20     4A 00 00 FF 
16c24     98 E4 85 F1 | 	sub	objptr, ##38040
16c28     20 00 90 3D |  if_ae	jmp	#LR__1863
16c2c     50 00 00 FF 
16c30     30 E5 05 F1 | 	add	objptr, ##41264
16c34     F2 2C 02 FB | 	rdlong	local04, objptr
16c38     01 2C 86 F1 | 	sub	local04, #1
16c3c     F2 2C 62 FC | 	wrlong	local04, objptr
16c40     50 00 00 FF 
16c44     30 E5 85 F1 | 	sub	objptr, ##41264
16c48     3C 01 90 FD | 	jmp	#LR__1867
16c4c                 | LR__1863
16c4c                 | LR__1864
16c4c                 | ' ' if not returned, goto pointer 
16c4c                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
16c4c     50 00 00 FF 
16c50     EC E4 05 F1 | 	add	objptr, ##41196
16c54     F2 2C 02 FB | 	rdlong	local04, objptr
16c58     50 00 00 FF 
16c5c     EC E4 85 F1 | 	sub	objptr, ##41196
16c60     01 2C 16 F2 | 	cmp	local04, #1 wc
16c64     DC 00 90 CD |  if_b	jmp	#LR__1865
16c68     50 00 00 FF 
16c6c     30 E5 05 F1 | 	add	objptr, ##41264
16c70     F2 2C 02 FB | 	rdlong	local04, objptr
16c74     16 27 02 F6 | 	mov	local01, local04
16c78     02 26 66 F0 | 	shl	local01, #2
16c7c     16 27 02 F1 | 	add	local01, local04
16c80     02 26 66 F0 | 	shl	local01, #2
16c84     06 00 00 FF 
16c88     98 E4 85 F1 | 	sub	objptr, ##3224
16c8c     F2 26 02 F1 | 	add	local01, objptr
16c90     06 00 00 FF 
16c94     20 E4 05 F1 | 	add	objptr, ##3104
16c98     F2 2C 02 FB | 	rdlong	local04, objptr
16c9c     50 00 00 FF 
16ca0     B8 E4 85 F1 | 	sub	objptr, ##41144
16ca4     13 27 02 FB | 	rdlong	local01, local01
16ca8     13 2D 0A F2 | 	cmp	local04, local01 wz
16cac     94 00 90 AD |  if_e	jmp	#LR__1865
16cb0     50 00 00 FF 
16cb4     30 E5 05 F1 | 	add	objptr, ##41264
16cb8     F2 2C 02 FB | 	rdlong	local04, objptr
16cbc     16 27 02 F6 | 	mov	local01, local04
16cc0     02 26 66 F0 | 	shl	local01, #2
16cc4     16 27 02 F1 | 	add	local01, local04
16cc8     02 26 66 F0 | 	shl	local01, #2
16ccc     06 00 00 FF 
16cd0     98 E4 85 F1 | 	sub	objptr, ##3224
16cd4     F2 26 02 F1 | 	add	local01, objptr
16cd8     13 27 02 FB | 	rdlong	local01, local01
16cdc     06 00 00 FF 
16ce0     20 E4 05 F1 | 	add	objptr, ##3104
16ce4     F2 26 62 FC | 	wrlong	local01, objptr
16ce8     78 E4 05 F1 | 	add	objptr, #120
16cec     F2 2C 02 FB | 	rdlong	local04, objptr
16cf0     16 27 02 F6 | 	mov	local01, local04
16cf4     02 26 66 F0 | 	shl	local01, #2
16cf8     16 27 02 F1 | 	add	local01, local04
16cfc     02 26 66 F0 | 	shl	local01, #2
16d00     06 00 00 FF 
16d04     98 E4 85 F1 | 	sub	objptr, ##3224
16d08     F2 26 02 F1 | 	add	local01, objptr
16d0c     04 26 06 F1 | 	add	local01, #4
16d10     13 27 02 FB | 	rdlong	local01, local01
16d14     06 00 00 FF 
16d18     24 E4 05 F1 | 	add	objptr, ##3108
16d1c     F2 26 62 FC | 	wrlong	local01, objptr
16d20     06 00 00 FF 
16d24     40 E4 85 F1 | 	sub	objptr, ##3136
16d28     F2 2C 02 FB | 	rdlong	local04, objptr
16d2c     01 2C 86 F1 | 	sub	local04, #1
16d30     04 E4 05 F1 | 	add	objptr, #4
16d34     F2 2C 62 FC | 	wrlong	local04, objptr
16d38     4A 00 00 FF 
16d3c     80 E4 85 F1 | 	sub	objptr, ##38016
16d40     44 00 90 FD | 	jmp	#LR__1866
16d44                 | LR__1865
16d44     50 00 00 FF 
16d48     30 E5 05 F1 | 	add	objptr, ##41264
16d4c     F2 2C 02 FB | 	rdlong	local04, objptr
16d50     16 27 02 F6 | 	mov	local01, local04
16d54     02 26 66 F0 | 	shl	local01, #2
16d58     16 27 02 F1 | 	add	local01, local04
16d5c     02 26 66 F0 | 	shl	local01, #2
16d60     06 00 00 FF 
16d64     98 E4 85 F1 | 	sub	objptr, ##3224
16d68     F2 26 02 F1 | 	add	local01, objptr
16d6c     04 26 06 F1 | 	add	local01, #4
16d70     13 27 02 FB | 	rdlong	local01, local01
16d74     01 26 86 F1 | 	sub	local01, #1
16d78     18 E4 85 F1 | 	sub	objptr, #24
16d7c     F2 26 62 FC | 	wrlong	local01, objptr
16d80     4A 00 00 FF 
16d84     80 E4 85 F1 | 	sub	objptr, ##38016
16d88                 | LR__1866
16d88                 | LR__1867
16d88     A7 F0 03 F6 | 	mov	ptra, fp
16d8c     B2 00 A0 FD | 	call	#popregs_
16d90                 | _do_next_ret
16d90     2D 00 64 FD | 	ret
16d94                 | 
16d94                 | ' 
16d94                 | ' '-------------------- no command (print "Unknown command")
16d94                 | ' 
16d94                 | ' sub do_no_command
16d94                 | _do_no_command
16d94     50 00 00 FF 
16d98     F0 E4 05 F1 | 	add	objptr, ##41200
16d9c     F2 14 02 FB | 	rdlong	arg02, objptr
16da0     50 00 00 FF 
16da4     F0 E4 85 F1 | 	sub	objptr, ##41200
16da8     17 12 06 F6 | 	mov	arg01, #23
16dac     4C D3 B0 FD | 	call	#_printerror
16db0                 | _do_no_command_ret
16db0     2D 00 64 FD | 	ret
16db4                 | 
16db4                 | ' 
16db4                 | ' '-------------------- nothing
16db4                 | ' 
16db4                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
16db4                 | _do_nothing
16db4                 | _do_nothing_ret
16db4     2D 00 64 FD | 	ret
16db8                 | 
16db8                 | ' 
16db8                 | ' '-------------------- on
16db8                 | ' 
16db8                 | ' sub do_on
16db8                 | _do_on
16db8     01 4A 05 F6 | 	mov	COUNT_, #1
16dbc     A8 00 A0 FD | 	call	#pushregs_
16dc0     18 F0 07 F1 | 	add	ptra, #24
16dc4     4A 00 00 FF 
16dc8     80 E4 05 F1 | 	add	objptr, ##38016
16dcc     F2 12 02 FB | 	rdlong	arg01, objptr
16dd0     09 FD 01 F6 | 	mov	result2, arg01
16dd4     01 FC 65 F0 | 	shl	result2, #1
16dd8     09 FD 01 F1 | 	add	result2, arg01
16ddc     02 FC 65 F0 | 	shl	result2, #2
16de0     03 00 00 FF 
16de4     04 E4 85 F1 | 	sub	objptr, ##1540
16de8     F2 FC 01 F1 | 	add	result2, objptr
16dec     FE 12 02 FB | 	rdlong	arg01, result2
16df0     14 4E 05 F1 | 	add	fp, #20
16df4     A7 12 62 FC | 	wrlong	arg01, fp
16df8     03 00 00 FF 
16dfc     04 E4 05 F1 | 	add	objptr, ##1540
16e00     F2 12 02 FB | 	rdlong	arg01, objptr
16e04     09 27 02 F6 | 	mov	local01, arg01
16e08     01 26 66 F0 | 	shl	local01, #1
16e0c     09 27 02 F1 | 	add	local01, arg01
16e10     02 26 66 F0 | 	shl	local01, #2
16e14     03 00 00 FF 
16e18     04 E4 85 F1 | 	sub	objptr, ##1540
16e1c     F2 26 02 F1 | 	add	local01, objptr
16e20     04 26 06 F1 | 	add	local01, #4
16e24     13 27 02 FB | 	rdlong	local01, local01
16e28     08 4E 85 F1 | 	sub	fp, #8
16e2c     A7 26 62 FC | 	wrlong	local01, fp
16e30     0C 4E 85 F1 | 	sub	fp, #12
16e34     47 00 00 FF 
16e38     7C E4 85 F1 | 	sub	objptr, ##36476
16e3c     E0 69 BF FD | 	call	#_pop
16e40     FF 26 02 F6 | 	mov	local01, result3
16e44     A7 FA 61 FC | 	wrlong	result1, fp
16e48     04 4E 05 F1 | 	add	fp, #4
16e4c     A7 FC 61 FC | 	wrlong	result2, fp
16e50     04 4E 05 F1 | 	add	fp, #4
16e54     A7 26 62 FC | 	wrlong	local01, fp
16e58     08 4E 85 F1 | 	sub	fp, #8
16e5c     A7 12 02 F6 | 	mov	arg01, fp
16e60     A0 6B BF FD | 	call	#_converttoint
16e64     10 4E 05 F1 | 	add	fp, #16
16e68     A7 FA 61 FC | 	wrlong	result1, fp
16e6c                 | ' 
16e6c                 | ' numpar=compiledline(lineptr_e).result.uresult
16e6c                 | ' skip=compiledline(lineptr_e).result.twowords(1)
16e6c                 | ' t1=pop()
16e6c                 | ' t=converttoint(t1)
16e6c                 | ' if t<1 orelse t>numpar then return
16e6c     10 4E 85 F1 | 	sub	fp, #16
16e70     01 FA 55 F2 | 	cmps	result1, #1 wc
16e74     58 00 90 CD |  if_b	jmp	#LR__1870
16e78     10 4E 05 F1 | 	add	fp, #16
16e7c     A7 26 02 FB | 	rdlong	local01, fp
16e80     04 4E 05 F1 | 	add	fp, #4
16e84     A7 12 02 FB | 	rdlong	arg01, fp
16e88     14 4E 85 F1 | 	sub	fp, #20
16e8c     09 27 5A F2 | 	cmps	local01, arg01 wcz
16e90     3C 00 90 1D |  if_a	jmp	#LR__1870
16e94     10 4E 05 F1 | 	add	fp, #16
16e98     A7 26 02 FB | 	rdlong	local01, fp
16e9c     01 26 86 F1 | 	sub	local01, #1
16ea0     04 4E 85 F1 | 	sub	fp, #4
16ea4     A7 12 02 FB | 	rdlong	arg01, fp
16ea8     13 13 02 FD | 	qmul	arg01, local01
16eac     4A 00 00 FF 
16eb0     80 E4 05 F1 | 	add	objptr, ##38016
16eb4     F2 26 02 FB | 	rdlong	local01, objptr
16eb8     0C 4E 85 F1 | 	sub	fp, #12
16ebc     18 12 62 FD | 	getqx	arg01
16ec0     09 27 02 F1 | 	add	local01, arg01
16ec4     F2 26 62 FC | 	wrlong	local01, objptr
16ec8     4A 00 00 FF 
16ecc     80 E4 85 F1 | 	sub	objptr, ##38016
16ed0                 | LR__1870
16ed0     A7 F0 03 F6 | 	mov	ptra, fp
16ed4     B2 00 A0 FD | 	call	#popregs_
16ed8                 | _do_on_ret
16ed8     2D 00 64 FD | 	ret
16edc                 | 
16edc                 | ' 
16edc                 | ' '-------------------- open
16edc                 | ' 
16edc                 | ' sub do_open
16edc                 | _do_open
16edc     02 4A 05 F6 | 	mov	COUNT_, #2
16ee0     A8 00 A0 FD | 	call	#pushregs_
16ee4     20 F0 07 F1 | 	add	ptra, #32
16ee8     4A 00 00 FF 
16eec     80 E4 05 F1 | 	add	objptr, ##38016
16ef0     F2 16 02 FB | 	rdlong	arg03, objptr
16ef4     0B 15 02 F6 | 	mov	arg02, arg03
16ef8     01 14 66 F0 | 	shl	arg02, #1
16efc     0B 15 02 F1 | 	add	arg02, arg03
16f00     02 14 66 F0 | 	shl	arg02, #2
16f04     03 00 00 FF 
16f08     04 E4 85 F1 | 	sub	objptr, ##1540
16f0c     F2 14 02 F1 | 	add	arg02, objptr
16f10     0A 17 02 FB | 	rdlong	arg03, arg02
16f14     10 4E 05 F1 | 	add	fp, #16
16f18     A7 16 62 FC | 	wrlong	arg03, fp
16f1c     10 4E 85 F1 | 	sub	fp, #16
16f20     47 00 00 FF 
16f24     7C E4 85 F1 | 	sub	objptr, ##36476
16f28     F4 68 BF FD | 	call	#_pop
16f2c     FF 16 02 F6 | 	mov	arg03, result3
16f30     A7 FA 61 FC | 	wrlong	result1, fp
16f34     04 4E 05 F1 | 	add	fp, #4
16f38     A7 FC 61 FC | 	wrlong	result2, fp
16f3c     04 4E 05 F1 | 	add	fp, #4
16f40     A7 16 62 FC | 	wrlong	arg03, fp
16f44                 | ' 
16f44                 | ' numpar=compiledline(lineptr_e).result.uresult
16f44                 | ' 
16f44                 | ' t1=pop()
16f44                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16f44     08 4E 85 F1 | 	sub	fp, #8
16f48     2B 16 0E F2 | 	cmp	arg03, #43 wz
16f4c     18 00 90 5D |  if_ne	jmp	#LR__1880
16f50     A7 12 02 FB | 	rdlong	arg01, fp
16f54     40 6A BF FD | 	call	#_convertstring
16f58     A7 FA 61 FC | 	wrlong	result1, fp
16f5c     08 4E 05 F1 | 	add	fp, #8
16f60     A7 3E 68 FC | 	wrlong	#31, fp
16f64     08 4E 85 F1 | 	sub	fp, #8
16f68                 | LR__1880
16f68                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
16f68     08 4E 05 F1 | 	add	fp, #8
16f6c     A7 16 02 FB | 	rdlong	arg03, fp
16f70     08 4E 85 F1 | 	sub	fp, #8
16f74     1F 16 0E F2 | 	cmp	arg03, #31 wz
16f78     44 00 90 AD |  if_e	jmp	#LR__1881
16f7c     00 12 06 F6 | 	mov	arg01, #0
16f80     88 68 B1 FD | 	call	#__system___getiolock_0620
16f84     FD 12 02 F6 | 	mov	arg01, result1
16f88     D0 0B B1 FD | 	call	#__system___lockmem
16f8c     C0 01 00 FF 
16f90     D2 15 06 F6 | 	mov	arg02, ##@LR__6095
16f94     00 12 06 F6 | 	mov	arg01, #0
16f98     00 16 06 F6 | 	mov	arg03, #0
16f9c     B4 18 B1 FD | 	call	#__system___basic_print_string
16fa0     00 12 06 F6 | 	mov	arg01, #0
16fa4     0A 14 06 F6 | 	mov	arg02, #10
16fa8     00 16 06 F6 | 	mov	arg03, #0
16fac     4C 18 B1 FD | 	call	#__system___basic_print_char
16fb0     00 12 06 F6 | 	mov	arg01, #0
16fb4     54 68 B1 FD | 	call	#__system___getiolock_0620
16fb8     FD 00 68 FC | 	wrlong	#0, result1
16fbc     28 02 90 FD | 	jmp	#LR__1892
16fc0                 | LR__1881
16fc0     A7 16 02 FB | 	rdlong	arg03, fp
16fc4     0C 4E 05 F1 | 	add	fp, #12
16fc8     A7 16 62 FC | 	wrlong	arg03, fp
16fcc     0C 4E 85 F1 | 	sub	fp, #12
16fd0     4C 68 BF FD | 	call	#_pop
16fd4     FF 16 02 F6 | 	mov	arg03, result3
16fd8     A7 FA 61 FC | 	wrlong	result1, fp
16fdc     04 4E 05 F1 | 	add	fp, #4
16fe0     A7 FC 61 FC | 	wrlong	result2, fp
16fe4     04 4E 05 F1 | 	add	fp, #4
16fe8     A7 16 62 FC | 	wrlong	arg03, fp
16fec                 | ' filename=t1.result.sresult
16fec                 | ' t1=pop()
16fec                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16fec     08 4E 85 F1 | 	sub	fp, #8
16ff0     2B 16 0E F2 | 	cmp	arg03, #43 wz
16ff4     18 00 90 5D |  if_ne	jmp	#LR__1882
16ff8     A7 12 02 FB | 	rdlong	arg01, fp
16ffc     98 69 BF FD | 	call	#_convertstring
17000     A7 FA 61 FC | 	wrlong	result1, fp
17004     08 4E 05 F1 | 	add	fp, #8
17008     A7 3E 68 FC | 	wrlong	#31, fp
1700c     08 4E 85 F1 | 	sub	fp, #8
17010                 | LR__1882
17010     14 4E 05 F1 | 	add	fp, #20
17014     A7 00 68 FC | 	wrlong	#0, fp
17018                 | ' mode=0
17018                 | ' if t1.result_type=result_string then
17018     0C 4E 85 F1 | 	sub	fp, #12
1701c     A7 14 02 FB | 	rdlong	arg02, fp
17020     08 4E 85 F1 | 	sub	fp, #8
17024     1F 14 0E F2 | 	cmp	arg02, #31 wz
17028     64 00 90 5D |  if_ne	jmp	#LR__1883
1702c                 | '   if t1.result.sresult="read" then mode=1
1702c     A7 12 02 FB | 	rdlong	arg01, fp
17030     C0 01 00 FF 
17034     E4 15 06 F6 | 	mov	arg02, ##@LR__6096
17038     48 0B B1 FD | 	call	#__system___string_cmp
1703c     00 FA 0D F2 | 	cmp	result1, #0 wz
17040     14 4E 05 A1 |  if_e	add	fp, #20
17044     A7 02 68 AC |  if_e	wrlong	#1, fp
17048     14 4E 85 A1 |  if_e	sub	fp, #20
1704c                 | '   if t1.result.sresult="write" then mode=2
1704c     A7 12 02 FB | 	rdlong	arg01, fp
17050     C0 01 00 FF 
17054     E9 15 06 F6 | 	mov	arg02, ##@LR__6097
17058     28 0B B1 FD | 	call	#__system___string_cmp
1705c     00 FA 0D F2 | 	cmp	result1, #0 wz
17060     14 4E 05 A1 |  if_e	add	fp, #20
17064     A7 04 68 AC |  if_e	wrlong	#2, fp
17068     14 4E 85 A1 |  if_e	sub	fp, #20
1706c                 | '   if t1.result.sresult="append" then mode=4
1706c     A7 12 02 FB | 	rdlong	arg01, fp
17070     C0 01 00 FF 
17074     EF 15 06 F6 | 	mov	arg02, ##@LR__6098
17078     08 0B B1 FD | 	call	#__system___string_cmp
1707c     00 FA 0D F2 | 	cmp	result1, #0 wz
17080     14 4E 05 A1 |  if_e	add	fp, #20
17084     A7 08 68 AC |  if_e	wrlong	#4, fp
17088     14 4E 85 A1 |  if_e	sub	fp, #20
1708c     14 00 90 FD | 	jmp	#LR__1884
17090                 | LR__1883
17090     A7 12 02 F6 | 	mov	arg01, fp
17094     6C 69 BF FD | 	call	#_converttoint
17098     14 4E 05 F1 | 	add	fp, #20
1709c     A7 FA 61 FC | 	wrlong	result1, fp
170a0     14 4E 85 F1 | 	sub	fp, #20
170a4                 | LR__1884
170a4     78 67 BF FD | 	call	#_pop
170a8     FF 16 02 F6 | 	mov	arg03, result3
170ac     A7 FA 61 FC | 	wrlong	result1, fp
170b0     04 4E 05 F1 | 	add	fp, #4
170b4     A7 FC 61 FC | 	wrlong	result2, fp
170b8     04 4E 05 F1 | 	add	fp, #4
170bc     A7 16 62 FC | 	wrlong	arg03, fp
170c0                 | ' t1=pop()
170c0                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
170c0     08 4E 85 F1 | 	sub	fp, #8
170c4     2C 16 0E F2 | 	cmp	arg03, #44 wz
170c8     44 00 90 AD |  if_e	jmp	#LR__1885
170cc     00 12 06 F6 | 	mov	arg01, #0
170d0     38 67 B1 FD | 	call	#__system___getiolock_0620
170d4     FD 12 02 F6 | 	mov	arg01, result1
170d8     80 0A B1 FD | 	call	#__system___lockmem
170dc     C0 01 00 FF 
170e0     F6 15 06 F6 | 	mov	arg02, ##@LR__6099
170e4     00 12 06 F6 | 	mov	arg01, #0
170e8     00 16 06 F6 | 	mov	arg03, #0
170ec     64 17 B1 FD | 	call	#__system___basic_print_string
170f0     00 12 06 F6 | 	mov	arg01, #0
170f4     0A 14 06 F6 | 	mov	arg02, #10
170f8     00 16 06 F6 | 	mov	arg03, #0
170fc     FC 16 B1 FD | 	call	#__system___basic_print_char
17100     00 12 06 F6 | 	mov	arg01, #0
17104     04 67 B1 FD | 	call	#__system___getiolock_0620
17108     FD 00 68 FC | 	wrlong	#0, result1
1710c     D8 00 90 FD | 	jmp	#LR__1892
17110                 | LR__1885
17110     A7 26 02 FB | 	rdlong	local01, fp
17114     18 4E 05 F1 | 	add	fp, #24
17118     A7 26 62 FC | 	wrlong	local01, fp
1711c                 | ' channel  = t1.result.iresult
1711c                 | ' select case  mode
1711c     04 4E 85 F1 | 	sub	fp, #4
17120     A7 28 02 FB | 	rdlong	local02, fp
17124     14 4E 85 F1 | 	sub	fp, #20
17128     01 28 86 F1 | 	sub	local02, #1
1712c     04 28 26 F3 | 	fle	local02, #4
17130     30 28 62 FD | 	jmprel	local02
17134                 | LR__1886
17134     10 00 90 FD | 	jmp	#LR__1887
17138     2C 00 90 FD | 	jmp	#LR__1888
1713c     68 00 90 FD | 	jmp	#LR__1890
17140     44 00 90 FD | 	jmp	#LR__1889
17144     60 00 90 FD | 	jmp	#LR__1890
17148                 | LR__1887
17148     18 4E 05 F1 | 	add	fp, #24
1714c     A7 12 02 FB | 	rdlong	arg01, fp
17150     0C 4E 85 F1 | 	sub	fp, #12
17154     A7 14 02 FB | 	rdlong	arg02, fp
17158     0C 4E 85 F1 | 	sub	fp, #12
1715c     00 16 06 F6 | 	mov	arg03, #0
17160     FC 15 B1 FD | 	call	#__system___basic_open_string
17164     80 00 90 FD | 	jmp	#LR__1891
17168                 | LR__1888
17168     18 4E 05 F1 | 	add	fp, #24
1716c     A7 12 02 FB | 	rdlong	arg01, fp
17170     0C 4E 85 F1 | 	sub	fp, #12
17174     A7 14 02 FB | 	rdlong	arg02, fp
17178     0C 4E 85 F1 | 	sub	fp, #12
1717c     0D 16 06 F6 | 	mov	arg03, #13
17180     DC 15 B1 FD | 	call	#__system___basic_open_string
17184     60 00 90 FD | 	jmp	#LR__1891
17188                 | LR__1889
17188     18 4E 05 F1 | 	add	fp, #24
1718c     A7 12 02 FB | 	rdlong	arg01, fp
17190     0C 4E 85 F1 | 	sub	fp, #12
17194     A7 14 02 FB | 	rdlong	arg02, fp
17198     0C 4E 85 F1 | 	sub	fp, #12
1719c     25 16 06 F6 | 	mov	arg03, #37
171a0     BC 15 B1 FD | 	call	#__system___basic_open_string
171a4     40 00 90 FD | 	jmp	#LR__1891
171a8                 | LR__1890
171a8     00 12 06 F6 | 	mov	arg01, #0
171ac     5C 66 B1 FD | 	call	#__system___getiolock_0620
171b0     FD 12 02 F6 | 	mov	arg01, result1
171b4     A4 09 B1 FD | 	call	#__system___lockmem
171b8     C1 01 00 FF 
171bc     08 14 06 F6 | 	mov	arg02, ##@LR__6100
171c0     00 12 06 F6 | 	mov	arg01, #0
171c4     00 16 06 F6 | 	mov	arg03, #0
171c8     88 16 B1 FD | 	call	#__system___basic_print_string
171cc     00 12 06 F6 | 	mov	arg01, #0
171d0     0A 14 06 F6 | 	mov	arg02, #10
171d4     00 16 06 F6 | 	mov	arg03, #0
171d8     20 16 B1 FD | 	call	#__system___basic_print_char
171dc     00 12 06 F6 | 	mov	arg01, #0
171e0     28 66 B1 FD | 	call	#__system___getiolock_0620
171e4     FD 00 68 FC | 	wrlong	#0, result1
171e8                 | LR__1891
171e8                 | LR__1892
171e8     A7 F0 03 F6 | 	mov	ptra, fp
171ec     B2 00 A0 FD | 	call	#popregs_
171f0                 | _do_open_ret
171f0     2D 00 64 FD | 	ret
171f4                 | 
171f4                 | ' 
171f4                 | ' ' ------------------ padrx
171f4                 | ' 
171f4                 | ' sub do_padrx
171f4                 | _do_padrx
171f4     02 4A 05 F6 | 	mov	COUNT_, #2
171f8     A8 00 A0 FD | 	call	#pushregs_
171fc     14 F0 07 F1 | 	add	ptra, #20
17200     4A 00 00 FF 
17204     80 E4 05 F1 | 	add	objptr, ##38016
17208     F2 26 02 FB | 	rdlong	local01, objptr
1720c     13 17 02 F6 | 	mov	arg03, local01
17210     01 16 66 F0 | 	shl	arg03, #1
17214     13 17 02 F1 | 	add	arg03, local01
17218     02 16 66 F0 | 	shl	arg03, #2
1721c     03 00 00 FF 
17220     04 E4 85 F1 | 	sub	objptr, ##1540
17224     F2 16 02 F1 | 	add	arg03, objptr
17228     0B 17 02 FB | 	rdlong	arg03, arg03
1722c     0C 4E 05 F1 | 	add	fp, #12
17230     A7 16 62 FC | 	wrlong	arg03, fp
17234                 | ' 
17234                 | ' numpar=compiledline(lineptr_e).result.uresult
17234                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
17234     0C 4E 85 F1 | 	sub	fp, #12
17238     02 16 16 F2 | 	cmp	arg03, #2 wc
1723c     47 00 00 FF 
17240     7C E4 85 F1 | 	sub	objptr, ##36476
17244     40 00 90 CD |  if_b	jmp	#LR__1900
17248     00 12 06 F6 | 	mov	arg01, #0
1724c     BC 65 B1 FD | 	call	#__system___getiolock_0620
17250     FD 12 02 F6 | 	mov	arg01, result1
17254     04 09 B1 FD | 	call	#__system___lockmem
17258     C1 01 00 FF 
1725c     1B 14 06 F6 | 	mov	arg02, ##@LR__6101
17260     00 12 06 F6 | 	mov	arg01, #0
17264     00 16 06 F6 | 	mov	arg03, #0
17268     E8 15 B1 FD | 	call	#__system___basic_print_string
1726c     00 12 06 F6 | 	mov	arg01, #0
17270     98 65 B1 FD | 	call	#__system___getiolock_0620
17274     FD 00 68 FC | 	wrlong	#0, result1
17278     27 12 06 F6 | 	mov	arg01, #39
1727c     00 14 06 F6 | 	mov	arg02, #0
17280     78 CE B0 FD | 	call	#_printerror
17284     E0 01 90 FD | 	jmp	#LR__1904
17288                 | LR__1900
17288                 | ' if numpar=0 then 
17288     0C 4E 05 F1 | 	add	fp, #12
1728c     A7 FE 09 FB | 	rdlong	result3, fp wz
17290     0C 4E 85 F1 | 	sub	fp, #12
17294     A8 00 90 5D |  if_ne	jmp	#LR__1901
17298     00 C0 1B FF 
1729c     00 26 06 F6 | 	mov	local01, ##931135488
172a0     51 00 00 FF 
172a4     C8 E5 05 F1 | 	add	objptr, ##41928
172a8     F2 12 02 FB | 	rdlong	arg01, objptr
172ac     51 00 00 FF 
172b0     C8 E5 85 F1 | 	sub	objptr, ##41928
172b4     09 13 52 F6 | 	abs	arg01, arg01 wc
172b8     1F 28 C6 C9 |  if_b	decod	local02, #31
172bc     00 28 06 36 |  if_ae	mov	local02, #0
172c0     10 33 B1 FD | 	call	#__system___float_fromuns
172c4     14 FB 61 F5 | 	xor	result1, local02
172c8     FD 12 02 F6 | 	mov	arg01, result1
172cc     FF 7F 23 FF 
172d0     00 14 06 F6 | 	mov	arg02, ##1191181824
172d4     04 39 B1 FD | 	call	#__system___float_div
172d8     FD 14 02 F6 | 	mov	arg02, result1
172dc     13 13 02 F6 | 	mov	arg01, local01
172e0     24 33 B1 FD | 	call	#__system___float_add
172e4     10 4E 05 F1 | 	add	fp, #16
172e8     A7 FA 61 FC | 	wrlong	result1, fp
172ec                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
172ec     10 4E 85 F1 | 	sub	fp, #16
172f0     1F FA 05 F4 | 	bitl	result1, #31
172f4     FD 12 02 F6 | 	mov	arg01, result1
172f8     89 41 1D FF 
172fc     6F 14 06 F6 | 	mov	arg02, ##981668463
17300     01 16 06 F6 | 	mov	arg03, #1
17304     04 3B B1 FD | 	call	#__system___float_cmp
17308     00 FA 55 F2 | 	cmps	result1, #0 wc
1730c     10 4E 05 C1 |  if_b	add	fp, #16
17310     A7 00 68 CC |  if_b	wrlong	#0, fp
17314     10 4E 85 C1 |  if_b	sub	fp, #16
17318     10 4E 05 F1 | 	add	fp, #16
1731c     A7 26 02 FB | 	rdlong	local01, fp
17320     10 4E 85 F1 | 	sub	fp, #16
17324     A7 26 62 FC | 	wrlong	local01, fp
17328     08 4E 05 F1 | 	add	fp, #8
1732c     A7 3C 68 FC | 	wrlong	#30, fp
17330     08 4E 85 F1 | 	sub	fp, #8
17334     A7 12 02 F6 | 	mov	arg01, fp
17338     7C 65 BF FD | 	call	#_push
1733c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1733c     28 01 90 FD | 	jmp	#LR__1904
17340                 | LR__1901
17340     DC 64 BF FD | 	call	#_pop
17344     A7 FA 61 FC | 	wrlong	result1, fp
17348     04 4E 05 F1 | 	add	fp, #4
1734c     A7 FC 61 FC | 	wrlong	result2, fp
17350     04 4E 05 F1 | 	add	fp, #4
17354     A7 FE 61 FC | 	wrlong	result3, fp
17358                 | ' t1=pop()
17358                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17358     08 4E 85 F1 | 	sub	fp, #8
1735c     1C FE 0D F2 | 	cmp	result3, #28 wz
17360     08 4E 05 51 |  if_ne	add	fp, #8
17364     A7 26 02 5B |  if_ne	rdlong	local01, fp
17368     08 4E 85 51 |  if_ne	sub	fp, #8
1736c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17370     E8 00 90 5D |  if_ne	jmp	#LR__1903
17374     A7 26 02 FB | 	rdlong	local01, fp
17378     52 00 00 FF 
1737c     44 E5 05 F1 | 	add	objptr, ##42308
17380     F2 26 62 FC | 	wrlong	local01, objptr
17384                 | '   q=t1.result.uresult
17384                 | '   if q<7 then 
17384     52 00 00 FF 
17388     44 E5 85 F1 | 	sub	objptr, ##42308
1738c     07 26 56 F2 | 	cmps	local01, #7 wc
17390     B8 00 90 3D |  if_ae	jmp	#LR__1902
17394     00 C0 1B FF 
17398     00 26 06 F6 | 	mov	local01, ##931135488
1739c     52 00 00 FF 
173a0     44 E5 05 F1 | 	add	objptr, ##42308
173a4     F2 16 02 FB | 	rdlong	arg03, objptr
173a8     02 16 66 F0 | 	shl	arg03, #2
173ac     7C E5 85 F1 | 	sub	objptr, #380
173b0     F2 16 02 F1 | 	add	arg03, objptr
173b4     0B 13 02 FB | 	rdlong	arg01, arg03
173b8     51 00 00 FF 
173bc     C8 E5 85 F1 | 	sub	objptr, ##41928
173c0     09 13 52 F6 | 	abs	arg01, arg01 wc
173c4     1F 28 C6 C9 |  if_b	decod	local02, #31
173c8     00 28 06 36 |  if_ae	mov	local02, #0
173cc     04 32 B1 FD | 	call	#__system___float_fromuns
173d0     14 FB 61 F5 | 	xor	result1, local02
173d4     FD 12 02 F6 | 	mov	arg01, result1
173d8     FF 7F 23 FF 
173dc     00 14 06 F6 | 	mov	arg02, ##1191181824
173e0     F8 37 B1 FD | 	call	#__system___float_div
173e4     FD 14 02 F6 | 	mov	arg02, result1
173e8     13 13 02 F6 | 	mov	arg01, local01
173ec     18 32 B1 FD | 	call	#__system___float_add
173f0     10 4E 05 F1 | 	add	fp, #16
173f4     A7 FA 61 FC | 	wrlong	result1, fp
173f8                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
173f8     10 4E 85 F1 | 	sub	fp, #16
173fc     1F FA 05 F4 | 	bitl	result1, #31
17400     FD 12 02 F6 | 	mov	arg01, result1
17404     89 41 1D FF 
17408     6F 14 06 F6 | 	mov	arg02, ##981668463
1740c     01 16 06 F6 | 	mov	arg03, #1
17410     F8 39 B1 FD | 	call	#__system___float_cmp
17414     00 FA 55 F2 | 	cmps	result1, #0 wc
17418     10 4E 05 C1 |  if_b	add	fp, #16
1741c     A7 00 68 CC |  if_b	wrlong	#0, fp
17420     10 4E 85 C1 |  if_b	sub	fp, #16
17424     10 4E 05 F1 | 	add	fp, #16
17428     A7 26 02 FB | 	rdlong	local01, fp
1742c     10 4E 85 F1 | 	sub	fp, #16
17430     A7 26 62 FC | 	wrlong	local01, fp
17434     08 4E 05 F1 | 	add	fp, #8
17438     A7 3C 68 FC | 	wrlong	#30, fp
1743c     08 4E 85 F1 | 	sub	fp, #8
17440     A7 12 02 F6 | 	mov	arg01, fp
17444     70 64 BF FD | 	call	#_push
17448                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17448     1C 00 90 FD | 	jmp	#LR__1904
1744c                 | LR__1902
1744c     29 12 06 F6 | 	mov	arg01, #41
17450     00 14 06 F6 | 	mov	arg02, #0
17454     A4 CC B0 FD | 	call	#_printerror
17458                 | '      printerror(41) : return
17458     0C 00 90 FD | 	jmp	#LR__1904
1745c                 | LR__1903
1745c     29 12 06 F6 | 	mov	arg01, #41
17460     00 14 06 F6 | 	mov	arg02, #0
17464     94 CC B0 FD | 	call	#_printerror
17468                 | LR__1904
17468     A7 F0 03 F6 | 	mov	ptra, fp
1746c     B2 00 A0 FD | 	call	#popregs_
17470                 | _do_padrx_ret
17470     2D 00 64 FD | 	ret
17474                 | 
17474                 | ' 
17474                 | ' ' ------------------ padry
17474                 | ' 
17474                 | ' sub do_padry
17474                 | _do_padry
17474     02 4A 05 F6 | 	mov	COUNT_, #2
17478     A8 00 A0 FD | 	call	#pushregs_
1747c     14 F0 07 F1 | 	add	ptra, #20
17480     4A 00 00 FF 
17484     80 E4 05 F1 | 	add	objptr, ##38016
17488     F2 26 02 FB | 	rdlong	local01, objptr
1748c     13 17 02 F6 | 	mov	arg03, local01
17490     01 16 66 F0 | 	shl	arg03, #1
17494     13 17 02 F1 | 	add	arg03, local01
17498     02 16 66 F0 | 	shl	arg03, #2
1749c     03 00 00 FF 
174a0     04 E4 85 F1 | 	sub	objptr, ##1540
174a4     F2 16 02 F1 | 	add	arg03, objptr
174a8     0B 17 02 FB | 	rdlong	arg03, arg03
174ac     0C 4E 05 F1 | 	add	fp, #12
174b0     A7 16 62 FC | 	wrlong	arg03, fp
174b4                 | ' 
174b4                 | ' numpar=compiledline(lineptr_e).result.uresult
174b4                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
174b4     0C 4E 85 F1 | 	sub	fp, #12
174b8     02 16 16 F2 | 	cmp	arg03, #2 wc
174bc     47 00 00 FF 
174c0     7C E4 85 F1 | 	sub	objptr, ##36476
174c4     40 00 90 CD |  if_b	jmp	#LR__1910
174c8     00 12 06 F6 | 	mov	arg01, #0
174cc     3C 63 B1 FD | 	call	#__system___getiolock_0620
174d0     FD 12 02 F6 | 	mov	arg01, result1
174d4     84 06 B1 FD | 	call	#__system___lockmem
174d8     C1 01 00 FF 
174dc     23 14 06 F6 | 	mov	arg02, ##@LR__6102
174e0     00 12 06 F6 | 	mov	arg01, #0
174e4     00 16 06 F6 | 	mov	arg03, #0
174e8     68 13 B1 FD | 	call	#__system___basic_print_string
174ec     00 12 06 F6 | 	mov	arg01, #0
174f0     18 63 B1 FD | 	call	#__system___getiolock_0620
174f4     FD 00 68 FC | 	wrlong	#0, result1
174f8     27 12 06 F6 | 	mov	arg01, #39
174fc     00 14 06 F6 | 	mov	arg02, #0
17500     F8 CB B0 FD | 	call	#_printerror
17504     E0 01 90 FD | 	jmp	#LR__1914
17508                 | LR__1910
17508                 | ' if numpar=0 then 
17508     0C 4E 05 F1 | 	add	fp, #12
1750c     A7 FE 09 FB | 	rdlong	result3, fp wz
17510     0C 4E 85 F1 | 	sub	fp, #12
17514     A8 00 90 5D |  if_ne	jmp	#LR__1911
17518     00 C0 1B FF 
1751c     00 26 06 F6 | 	mov	local01, ##931135488
17520     51 00 00 FF 
17524     E4 E5 05 F1 | 	add	objptr, ##41956
17528     F2 12 02 FB | 	rdlong	arg01, objptr
1752c     51 00 00 FF 
17530     E4 E5 85 F1 | 	sub	objptr, ##41956
17534     09 13 52 F6 | 	abs	arg01, arg01 wc
17538     1F 28 C6 C9 |  if_b	decod	local02, #31
1753c     00 28 06 36 |  if_ae	mov	local02, #0
17540     90 30 B1 FD | 	call	#__system___float_fromuns
17544     14 FB 61 F5 | 	xor	result1, local02
17548     FD 12 02 F6 | 	mov	arg01, result1
1754c     FF 7F 23 FF 
17550     00 14 06 F6 | 	mov	arg02, ##1191181824
17554     84 36 B1 FD | 	call	#__system___float_div
17558     FD 14 02 F6 | 	mov	arg02, result1
1755c     13 13 02 F6 | 	mov	arg01, local01
17560     A4 30 B1 FD | 	call	#__system___float_add
17564     10 4E 05 F1 | 	add	fp, #16
17568     A7 FA 61 FC | 	wrlong	result1, fp
1756c                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1756c     10 4E 85 F1 | 	sub	fp, #16
17570     1F FA 05 F4 | 	bitl	result1, #31
17574     FD 12 02 F6 | 	mov	arg01, result1
17578     89 41 1D FF 
1757c     6F 14 06 F6 | 	mov	arg02, ##981668463
17580     01 16 06 F6 | 	mov	arg03, #1
17584     84 38 B1 FD | 	call	#__system___float_cmp
17588     00 FA 55 F2 | 	cmps	result1, #0 wc
1758c     10 4E 05 C1 |  if_b	add	fp, #16
17590     A7 00 68 CC |  if_b	wrlong	#0, fp
17594     10 4E 85 C1 |  if_b	sub	fp, #16
17598     10 4E 05 F1 | 	add	fp, #16
1759c     A7 26 02 FB | 	rdlong	local01, fp
175a0     10 4E 85 F1 | 	sub	fp, #16
175a4     A7 26 62 FC | 	wrlong	local01, fp
175a8     08 4E 05 F1 | 	add	fp, #8
175ac     A7 3C 68 FC | 	wrlong	#30, fp
175b0     08 4E 85 F1 | 	sub	fp, #8
175b4     A7 12 02 F6 | 	mov	arg01, fp
175b8     FC 62 BF FD | 	call	#_push
175bc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
175bc     28 01 90 FD | 	jmp	#LR__1914
175c0                 | LR__1911
175c0     5C 62 BF FD | 	call	#_pop
175c4     A7 FA 61 FC | 	wrlong	result1, fp
175c8     04 4E 05 F1 | 	add	fp, #4
175cc     A7 FC 61 FC | 	wrlong	result2, fp
175d0     04 4E 05 F1 | 	add	fp, #4
175d4     A7 FE 61 FC | 	wrlong	result3, fp
175d8                 | ' t1=pop()
175d8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
175d8     08 4E 85 F1 | 	sub	fp, #8
175dc     1C FE 0D F2 | 	cmp	result3, #28 wz
175e0     08 4E 05 51 |  if_ne	add	fp, #8
175e4     A7 26 02 5B |  if_ne	rdlong	local01, fp
175e8     08 4E 85 51 |  if_ne	sub	fp, #8
175ec     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
175f0     E8 00 90 5D |  if_ne	jmp	#LR__1913
175f4     A7 26 02 FB | 	rdlong	local01, fp
175f8     52 00 00 FF 
175fc     44 E5 05 F1 | 	add	objptr, ##42308
17600     F2 26 62 FC | 	wrlong	local01, objptr
17604                 | '   q=t1.result.uresult
17604                 | '   if q<7 then 
17604     52 00 00 FF 
17608     44 E5 85 F1 | 	sub	objptr, ##42308
1760c     07 26 56 F2 | 	cmps	local01, #7 wc
17610     B8 00 90 3D |  if_ae	jmp	#LR__1912
17614     00 C0 1B FF 
17618     00 26 06 F6 | 	mov	local01, ##931135488
1761c     52 00 00 FF 
17620     44 E5 05 F1 | 	add	objptr, ##42308
17624     F2 16 02 FB | 	rdlong	arg03, objptr
17628     02 16 66 F0 | 	shl	arg03, #2
1762c     60 E5 85 F1 | 	sub	objptr, #352
17630     F2 16 02 F1 | 	add	arg03, objptr
17634     0B 13 02 FB | 	rdlong	arg01, arg03
17638     51 00 00 FF 
1763c     E4 E5 85 F1 | 	sub	objptr, ##41956
17640     09 13 52 F6 | 	abs	arg01, arg01 wc
17644     1F 28 C6 C9 |  if_b	decod	local02, #31
17648     00 28 06 36 |  if_ae	mov	local02, #0
1764c     84 2F B1 FD | 	call	#__system___float_fromuns
17650     14 FB 61 F5 | 	xor	result1, local02
17654     FD 12 02 F6 | 	mov	arg01, result1
17658     FF 7F 23 FF 
1765c     00 14 06 F6 | 	mov	arg02, ##1191181824
17660     78 35 B1 FD | 	call	#__system___float_div
17664     FD 14 02 F6 | 	mov	arg02, result1
17668     13 13 02 F6 | 	mov	arg01, local01
1766c     98 2F B1 FD | 	call	#__system___float_add
17670     10 4E 05 F1 | 	add	fp, #16
17674     A7 FA 61 FC | 	wrlong	result1, fp
17678                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17678     10 4E 85 F1 | 	sub	fp, #16
1767c     1F FA 05 F4 | 	bitl	result1, #31
17680     FD 12 02 F6 | 	mov	arg01, result1
17684     89 41 1D FF 
17688     6F 14 06 F6 | 	mov	arg02, ##981668463
1768c     01 16 06 F6 | 	mov	arg03, #1
17690     78 37 B1 FD | 	call	#__system___float_cmp
17694     00 FA 55 F2 | 	cmps	result1, #0 wc
17698     10 4E 05 C1 |  if_b	add	fp, #16
1769c     A7 00 68 CC |  if_b	wrlong	#0, fp
176a0     10 4E 85 C1 |  if_b	sub	fp, #16
176a4     10 4E 05 F1 | 	add	fp, #16
176a8     A7 26 02 FB | 	rdlong	local01, fp
176ac     10 4E 85 F1 | 	sub	fp, #16
176b0     A7 26 62 FC | 	wrlong	local01, fp
176b4     08 4E 05 F1 | 	add	fp, #8
176b8     A7 3C 68 FC | 	wrlong	#30, fp
176bc     08 4E 85 F1 | 	sub	fp, #8
176c0     A7 12 02 F6 | 	mov	arg01, fp
176c4     F0 61 BF FD | 	call	#_push
176c8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
176c8     1C 00 90 FD | 	jmp	#LR__1914
176cc                 | LR__1912
176cc     29 12 06 F6 | 	mov	arg01, #41
176d0     00 14 06 F6 | 	mov	arg02, #0
176d4     24 CA B0 FD | 	call	#_printerror
176d8                 | '      printerror(41) : return
176d8     0C 00 90 FD | 	jmp	#LR__1914
176dc                 | LR__1913
176dc     29 12 06 F6 | 	mov	arg01, #41
176e0     00 14 06 F6 | 	mov	arg02, #0
176e4     14 CA B0 FD | 	call	#_printerror
176e8                 | LR__1914
176e8     A7 F0 03 F6 | 	mov	ptra, fp
176ec     B2 00 A0 FD | 	call	#popregs_
176f0                 | _do_padry_ret
176f0     2D 00 64 FD | 	ret
176f4                 | 
176f4                 | ' 
176f4                 | ' ' ------------------ padrz
176f4                 | ' 
176f4                 | ' sub do_padrz
176f4                 | _do_padrz
176f4     02 4A 05 F6 | 	mov	COUNT_, #2
176f8     A8 00 A0 FD | 	call	#pushregs_
176fc     14 F0 07 F1 | 	add	ptra, #20
17700     4A 00 00 FF 
17704     80 E4 05 F1 | 	add	objptr, ##38016
17708     F2 26 02 FB | 	rdlong	local01, objptr
1770c     13 17 02 F6 | 	mov	arg03, local01
17710     01 16 66 F0 | 	shl	arg03, #1
17714     13 17 02 F1 | 	add	arg03, local01
17718     02 16 66 F0 | 	shl	arg03, #2
1771c     03 00 00 FF 
17720     04 E4 85 F1 | 	sub	objptr, ##1540
17724     F2 16 02 F1 | 	add	arg03, objptr
17728     0B 17 02 FB | 	rdlong	arg03, arg03
1772c     0C 4E 05 F1 | 	add	fp, #12
17730     A7 16 62 FC | 	wrlong	arg03, fp
17734                 | ' 
17734                 | ' numpar=compiledline(lineptr_e).result.uresult
17734                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
17734     0C 4E 85 F1 | 	sub	fp, #12
17738     02 16 16 F2 | 	cmp	arg03, #2 wc
1773c     47 00 00 FF 
17740     7C E4 85 F1 | 	sub	objptr, ##36476
17744     40 00 90 CD |  if_b	jmp	#LR__1920
17748     00 12 06 F6 | 	mov	arg01, #0
1774c     BC 60 B1 FD | 	call	#__system___getiolock_0620
17750     FD 12 02 F6 | 	mov	arg01, result1
17754     04 04 B1 FD | 	call	#__system___lockmem
17758     C1 01 00 FF 
1775c     2B 14 06 F6 | 	mov	arg02, ##@LR__6103
17760     00 12 06 F6 | 	mov	arg01, #0
17764     00 16 06 F6 | 	mov	arg03, #0
17768     E8 10 B1 FD | 	call	#__system___basic_print_string
1776c     00 12 06 F6 | 	mov	arg01, #0
17770     98 60 B1 FD | 	call	#__system___getiolock_0620
17774     FD 00 68 FC | 	wrlong	#0, result1
17778     27 12 06 F6 | 	mov	arg01, #39
1777c     00 14 06 F6 | 	mov	arg02, #0
17780     78 C9 B0 FD | 	call	#_printerror
17784     E0 01 90 FD | 	jmp	#LR__1924
17788                 | LR__1920
17788                 | ' if numpar=0 then 
17788     0C 4E 05 F1 | 	add	fp, #12
1778c     A7 FE 09 FB | 	rdlong	result3, fp wz
17790     0C 4E 85 F1 | 	sub	fp, #12
17794     A8 00 90 5D |  if_ne	jmp	#LR__1921
17798     00 C0 1B FF 
1779c     00 26 06 F6 | 	mov	local01, ##931135488
177a0     52 00 00 FF 
177a4     00 E4 05 F1 | 	add	objptr, ##41984
177a8     F2 12 02 FB | 	rdlong	arg01, objptr
177ac     52 00 00 FF 
177b0     00 E4 85 F1 | 	sub	objptr, ##41984
177b4     09 13 52 F6 | 	abs	arg01, arg01 wc
177b8     1F 28 C6 C9 |  if_b	decod	local02, #31
177bc     00 28 06 36 |  if_ae	mov	local02, #0
177c0     10 2E B1 FD | 	call	#__system___float_fromuns
177c4     14 FB 61 F5 | 	xor	result1, local02
177c8     FD 12 02 F6 | 	mov	arg01, result1
177cc     FF 7F 23 FF 
177d0     00 14 06 F6 | 	mov	arg02, ##1191181824
177d4     04 34 B1 FD | 	call	#__system___float_div
177d8     FD 14 02 F6 | 	mov	arg02, result1
177dc     13 13 02 F6 | 	mov	arg01, local01
177e0     24 2E B1 FD | 	call	#__system___float_add
177e4     10 4E 05 F1 | 	add	fp, #16
177e8     A7 FA 61 FC | 	wrlong	result1, fp
177ec                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
177ec     10 4E 85 F1 | 	sub	fp, #16
177f0     1F FA 05 F4 | 	bitl	result1, #31
177f4     FD 12 02 F6 | 	mov	arg01, result1
177f8     89 41 1D FF 
177fc     6F 14 06 F6 | 	mov	arg02, ##981668463
17800     01 16 06 F6 | 	mov	arg03, #1
17804     04 36 B1 FD | 	call	#__system___float_cmp
17808     00 FA 55 F2 | 	cmps	result1, #0 wc
1780c     10 4E 05 C1 |  if_b	add	fp, #16
17810     A7 00 68 CC |  if_b	wrlong	#0, fp
17814     10 4E 85 C1 |  if_b	sub	fp, #16
17818     10 4E 05 F1 | 	add	fp, #16
1781c     A7 26 02 FB | 	rdlong	local01, fp
17820     10 4E 85 F1 | 	sub	fp, #16
17824     A7 26 62 FC | 	wrlong	local01, fp
17828     08 4E 05 F1 | 	add	fp, #8
1782c     A7 3C 68 FC | 	wrlong	#30, fp
17830     08 4E 85 F1 | 	sub	fp, #8
17834     A7 12 02 F6 | 	mov	arg01, fp
17838     7C 60 BF FD | 	call	#_push
1783c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1783c     28 01 90 FD | 	jmp	#LR__1924
17840                 | LR__1921
17840     DC 5F BF FD | 	call	#_pop
17844     A7 FA 61 FC | 	wrlong	result1, fp
17848     04 4E 05 F1 | 	add	fp, #4
1784c     A7 FC 61 FC | 	wrlong	result2, fp
17850     04 4E 05 F1 | 	add	fp, #4
17854     A7 FE 61 FC | 	wrlong	result3, fp
17858                 | ' t1=pop()
17858                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17858     08 4E 85 F1 | 	sub	fp, #8
1785c     1C FE 0D F2 | 	cmp	result3, #28 wz
17860     08 4E 05 51 |  if_ne	add	fp, #8
17864     A7 26 02 5B |  if_ne	rdlong	local01, fp
17868     08 4E 85 51 |  if_ne	sub	fp, #8
1786c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17870     E8 00 90 5D |  if_ne	jmp	#LR__1923
17874     A7 26 02 FB | 	rdlong	local01, fp
17878     52 00 00 FF 
1787c     44 E5 05 F1 | 	add	objptr, ##42308
17880     F2 26 62 FC | 	wrlong	local01, objptr
17884                 | '   q=t1.result.uresult
17884                 | '   if q<7 then 
17884     52 00 00 FF 
17888     44 E5 85 F1 | 	sub	objptr, ##42308
1788c     07 26 56 F2 | 	cmps	local01, #7 wc
17890     B8 00 90 3D |  if_ae	jmp	#LR__1922
17894     00 C0 1B FF 
17898     00 26 06 F6 | 	mov	local01, ##931135488
1789c     52 00 00 FF 
178a0     44 E5 05 F1 | 	add	objptr, ##42308
178a4     F2 16 02 FB | 	rdlong	arg03, objptr
178a8     02 16 66 F0 | 	shl	arg03, #2
178ac     44 E5 85 F1 | 	sub	objptr, #324
178b0     F2 16 02 F1 | 	add	arg03, objptr
178b4     0B 13 02 FB | 	rdlong	arg01, arg03
178b8     52 00 00 FF 
178bc     00 E4 85 F1 | 	sub	objptr, ##41984
178c0     09 13 52 F6 | 	abs	arg01, arg01 wc
178c4     1F 28 C6 C9 |  if_b	decod	local02, #31
178c8     00 28 06 36 |  if_ae	mov	local02, #0
178cc     04 2D B1 FD | 	call	#__system___float_fromuns
178d0     14 FB 61 F5 | 	xor	result1, local02
178d4     FD 12 02 F6 | 	mov	arg01, result1
178d8     FF 7F 23 FF 
178dc     00 14 06 F6 | 	mov	arg02, ##1191181824
178e0     F8 32 B1 FD | 	call	#__system___float_div
178e4     FD 14 02 F6 | 	mov	arg02, result1
178e8     13 13 02 F6 | 	mov	arg01, local01
178ec     18 2D B1 FD | 	call	#__system___float_add
178f0     10 4E 05 F1 | 	add	fp, #16
178f4     A7 FA 61 FC | 	wrlong	result1, fp
178f8                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
178f8     10 4E 85 F1 | 	sub	fp, #16
178fc     1F FA 05 F4 | 	bitl	result1, #31
17900     FD 12 02 F6 | 	mov	arg01, result1
17904     89 41 1D FF 
17908     6F 14 06 F6 | 	mov	arg02, ##981668463
1790c     01 16 06 F6 | 	mov	arg03, #1
17910     F8 34 B1 FD | 	call	#__system___float_cmp
17914     00 FA 55 F2 | 	cmps	result1, #0 wc
17918     10 4E 05 C1 |  if_b	add	fp, #16
1791c     A7 00 68 CC |  if_b	wrlong	#0, fp
17920     10 4E 85 C1 |  if_b	sub	fp, #16
17924     10 4E 05 F1 | 	add	fp, #16
17928     A7 26 02 FB | 	rdlong	local01, fp
1792c     10 4E 85 F1 | 	sub	fp, #16
17930     A7 26 62 FC | 	wrlong	local01, fp
17934     08 4E 05 F1 | 	add	fp, #8
17938     A7 3C 68 FC | 	wrlong	#30, fp
1793c     08 4E 85 F1 | 	sub	fp, #8
17940     A7 12 02 F6 | 	mov	arg01, fp
17944     70 5F BF FD | 	call	#_push
17948                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17948     1C 00 90 FD | 	jmp	#LR__1924
1794c                 | LR__1922
1794c     29 12 06 F6 | 	mov	arg01, #41
17950     00 14 06 F6 | 	mov	arg02, #0
17954     A4 C7 B0 FD | 	call	#_printerror
17958                 | '      printerror(41) : return
17958     0C 00 90 FD | 	jmp	#LR__1924
1795c                 | LR__1923
1795c     29 12 06 F6 | 	mov	arg01, #41
17960     00 14 06 F6 | 	mov	arg02, #0
17964     94 C7 B0 FD | 	call	#_printerror
17968                 | LR__1924
17968     A7 F0 03 F6 | 	mov	ptra, fp
1796c     B2 00 A0 FD | 	call	#popregs_
17970                 | _do_padrz_ret
17970     2D 00 64 FD | 	ret
17974                 | 
17974                 | ' 
17974                 | ' ' ------------------ pads
17974                 | ' 
17974                 | ' sub do_pads
17974                 | _do_pads
17974     02 4A 05 F6 | 	mov	COUNT_, #2
17978     A8 00 A0 FD | 	call	#pushregs_
1797c     14 F0 07 F1 | 	add	ptra, #20
17980     4A 00 00 FF 
17984     80 E4 05 F1 | 	add	objptr, ##38016
17988     F2 26 02 FB | 	rdlong	local01, objptr
1798c     13 17 02 F6 | 	mov	arg03, local01
17990     01 16 66 F0 | 	shl	arg03, #1
17994     13 17 02 F1 | 	add	arg03, local01
17998     02 16 66 F0 | 	shl	arg03, #2
1799c     03 00 00 FF 
179a0     04 E4 85 F1 | 	sub	objptr, ##1540
179a4     F2 16 02 F1 | 	add	arg03, objptr
179a8     0B 17 02 FB | 	rdlong	arg03, arg03
179ac     0C 4E 05 F1 | 	add	fp, #12
179b0     A7 16 62 FC | 	wrlong	arg03, fp
179b4                 | ' 
179b4                 | ' numpar=compiledline(lineptr_e).result.uresult
179b4                 | ' if numpar>1 then print "pads: "; : printerror(39) : return
179b4     0C 4E 85 F1 | 	sub	fp, #12
179b8     02 16 16 F2 | 	cmp	arg03, #2 wc
179bc     47 00 00 FF 
179c0     7C E4 85 F1 | 	sub	objptr, ##36476
179c4     40 00 90 CD |  if_b	jmp	#LR__1930
179c8     00 12 06 F6 | 	mov	arg01, #0
179cc     3C 5E B1 FD | 	call	#__system___getiolock_0620
179d0     FD 12 02 F6 | 	mov	arg01, result1
179d4     84 01 B1 FD | 	call	#__system___lockmem
179d8     C1 01 00 FF 
179dc     33 14 06 F6 | 	mov	arg02, ##@LR__6104
179e0     00 12 06 F6 | 	mov	arg01, #0
179e4     00 16 06 F6 | 	mov	arg03, #0
179e8     68 0E B1 FD | 	call	#__system___basic_print_string
179ec     00 12 06 F6 | 	mov	arg01, #0
179f0     18 5E B1 FD | 	call	#__system___getiolock_0620
179f4     FD 00 68 FC | 	wrlong	#0, result1
179f8     27 12 06 F6 | 	mov	arg01, #39
179fc     00 14 06 F6 | 	mov	arg02, #0
17a00     F8 C6 B0 FD | 	call	#_printerror
17a04     E0 01 90 FD | 	jmp	#LR__1934
17a08                 | LR__1930
17a08                 | ' if numpar=0 then 
17a08     0C 4E 05 F1 | 	add	fp, #12
17a0c     A7 FE 09 FB | 	rdlong	result3, fp wz
17a10     0C 4E 85 F1 | 	sub	fp, #12
17a14     A8 00 90 5D |  if_ne	jmp	#LR__1931
17a18     00 C0 1B FF 
17a1c     00 26 06 F6 | 	mov	local01, ##931135488
17a20     52 00 00 FF 
17a24     1C E4 05 F1 | 	add	objptr, ##42012
17a28     F2 12 02 FB | 	rdlong	arg01, objptr
17a2c     52 00 00 FF 
17a30     1C E4 85 F1 | 	sub	objptr, ##42012
17a34     09 13 52 F6 | 	abs	arg01, arg01 wc
17a38     1F 28 C6 C9 |  if_b	decod	local02, #31
17a3c     00 28 06 36 |  if_ae	mov	local02, #0
17a40     90 2B B1 FD | 	call	#__system___float_fromuns
17a44     14 FB 61 F5 | 	xor	result1, local02
17a48     FD 12 02 F6 | 	mov	arg01, result1
17a4c     FF 7F 23 FF 
17a50     00 14 06 F6 | 	mov	arg02, ##1191181824
17a54     84 31 B1 FD | 	call	#__system___float_div
17a58     FD 14 02 F6 | 	mov	arg02, result1
17a5c     13 13 02 F6 | 	mov	arg01, local01
17a60     A4 2B B1 FD | 	call	#__system___float_add
17a64     10 4E 05 F1 | 	add	fp, #16
17a68     A7 FA 61 FC | 	wrlong	result1, fp
17a6c                 | '   fpad=(1.0/65536.0)+pads(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17a6c     10 4E 85 F1 | 	sub	fp, #16
17a70     1F FA 05 F4 | 	bitl	result1, #31
17a74     FD 12 02 F6 | 	mov	arg01, result1
17a78     89 41 1D FF 
17a7c     6F 14 06 F6 | 	mov	arg02, ##981668463
17a80     01 16 06 F6 | 	mov	arg03, #1
17a84     84 33 B1 FD | 	call	#__system___float_cmp
17a88     00 FA 55 F2 | 	cmps	result1, #0 wc
17a8c     10 4E 05 C1 |  if_b	add	fp, #16
17a90     A7 00 68 CC |  if_b	wrlong	#0, fp
17a94     10 4E 85 C1 |  if_b	sub	fp, #16
17a98     10 4E 05 F1 | 	add	fp, #16
17a9c     A7 26 02 FB | 	rdlong	local01, fp
17aa0     10 4E 85 F1 | 	sub	fp, #16
17aa4     A7 26 62 FC | 	wrlong	local01, fp
17aa8     08 4E 05 F1 | 	add	fp, #8
17aac     A7 3C 68 FC | 	wrlong	#30, fp
17ab0     08 4E 85 F1 | 	sub	fp, #8
17ab4     A7 12 02 F6 | 	mov	arg01, fp
17ab8     FC 5D BF FD | 	call	#_push
17abc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17abc     28 01 90 FD | 	jmp	#LR__1934
17ac0                 | LR__1931
17ac0     5C 5D BF FD | 	call	#_pop
17ac4     A7 FA 61 FC | 	wrlong	result1, fp
17ac8     04 4E 05 F1 | 	add	fp, #4
17acc     A7 FC 61 FC | 	wrlong	result2, fp
17ad0     04 4E 05 F1 | 	add	fp, #4
17ad4     A7 FE 61 FC | 	wrlong	result3, fp
17ad8                 | ' t1=pop()
17ad8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17ad8     08 4E 85 F1 | 	sub	fp, #8
17adc     1C FE 0D F2 | 	cmp	result3, #28 wz
17ae0     08 4E 05 51 |  if_ne	add	fp, #8
17ae4     A7 26 02 5B |  if_ne	rdlong	local01, fp
17ae8     08 4E 85 51 |  if_ne	sub	fp, #8
17aec     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17af0     E8 00 90 5D |  if_ne	jmp	#LR__1933
17af4     A7 26 02 FB | 	rdlong	local01, fp
17af8     52 00 00 FF 
17afc     44 E5 05 F1 | 	add	objptr, ##42308
17b00     F2 26 62 FC | 	wrlong	local01, objptr
17b04                 | '   q=t1.result.uresult
17b04                 | '   if q<7 then 
17b04     52 00 00 FF 
17b08     44 E5 85 F1 | 	sub	objptr, ##42308
17b0c     07 26 56 F2 | 	cmps	local01, #7 wc
17b10     B8 00 90 3D |  if_ae	jmp	#LR__1932
17b14     00 C0 1B FF 
17b18     00 26 06 F6 | 	mov	local01, ##931135488
17b1c     52 00 00 FF 
17b20     44 E5 05 F1 | 	add	objptr, ##42308
17b24     F2 16 02 FB | 	rdlong	arg03, objptr
17b28     02 16 66 F0 | 	shl	arg03, #2
17b2c     28 E5 85 F1 | 	sub	objptr, #296
17b30     F2 16 02 F1 | 	add	arg03, objptr
17b34     0B 13 02 FB | 	rdlong	arg01, arg03
17b38     52 00 00 FF 
17b3c     1C E4 85 F1 | 	sub	objptr, ##42012
17b40     09 13 52 F6 | 	abs	arg01, arg01 wc
17b44     1F 28 C6 C9 |  if_b	decod	local02, #31
17b48     00 28 06 36 |  if_ae	mov	local02, #0
17b4c     84 2A B1 FD | 	call	#__system___float_fromuns
17b50     14 FB 61 F5 | 	xor	result1, local02
17b54     FD 12 02 F6 | 	mov	arg01, result1
17b58     FF 7F 23 FF 
17b5c     00 14 06 F6 | 	mov	arg02, ##1191181824
17b60     78 30 B1 FD | 	call	#__system___float_div
17b64     FD 14 02 F6 | 	mov	arg02, result1
17b68     13 13 02 F6 | 	mov	arg01, local01
17b6c     98 2A B1 FD | 	call	#__system___float_add
17b70     10 4E 05 F1 | 	add	fp, #16
17b74     A7 FA 61 FC | 	wrlong	result1, fp
17b78                 | '     fpad=(1.0/65536.0)+pads(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17b78     10 4E 85 F1 | 	sub	fp, #16
17b7c     1F FA 05 F4 | 	bitl	result1, #31
17b80     FD 12 02 F6 | 	mov	arg01, result1
17b84     89 41 1D FF 
17b88     6F 14 06 F6 | 	mov	arg02, ##981668463
17b8c     01 16 06 F6 | 	mov	arg03, #1
17b90     78 32 B1 FD | 	call	#__system___float_cmp
17b94     00 FA 55 F2 | 	cmps	result1, #0 wc
17b98     10 4E 05 C1 |  if_b	add	fp, #16
17b9c     A7 00 68 CC |  if_b	wrlong	#0, fp
17ba0     10 4E 85 C1 |  if_b	sub	fp, #16
17ba4     10 4E 05 F1 | 	add	fp, #16
17ba8     A7 26 02 FB | 	rdlong	local01, fp
17bac     10 4E 85 F1 | 	sub	fp, #16
17bb0     A7 26 62 FC | 	wrlong	local01, fp
17bb4     08 4E 05 F1 | 	add	fp, #8
17bb8     A7 3C 68 FC | 	wrlong	#30, fp
17bbc     08 4E 85 F1 | 	sub	fp, #8
17bc0     A7 12 02 F6 | 	mov	arg01, fp
17bc4     F0 5C BF FD | 	call	#_push
17bc8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17bc8     1C 00 90 FD | 	jmp	#LR__1934
17bcc                 | LR__1932
17bcc     29 12 06 F6 | 	mov	arg01, #41
17bd0     00 14 06 F6 | 	mov	arg02, #0
17bd4     24 C5 B0 FD | 	call	#_printerror
17bd8                 | '      printerror(41) : return
17bd8     0C 00 90 FD | 	jmp	#LR__1934
17bdc                 | LR__1933
17bdc     29 12 06 F6 | 	mov	arg01, #41
17be0     00 14 06 F6 | 	mov	arg02, #0
17be4     14 C5 B0 FD | 	call	#_printerror
17be8                 | LR__1934
17be8     A7 F0 03 F6 | 	mov	ptra, fp
17bec     B2 00 A0 FD | 	call	#popregs_
17bf0                 | _do_pads_ret
17bf0     2D 00 64 FD | 	ret
17bf4                 | 
17bf4                 | ' 
17bf4                 | ' ' ------------------ padw
17bf4                 | ' 
17bf4                 | ' sub do_padw
17bf4                 | _do_padw
17bf4     02 4A 05 F6 | 	mov	COUNT_, #2
17bf8     A8 00 A0 FD | 	call	#pushregs_
17bfc     14 F0 07 F1 | 	add	ptra, #20
17c00     4A 00 00 FF 
17c04     80 E4 05 F1 | 	add	objptr, ##38016
17c08     F2 26 02 FB | 	rdlong	local01, objptr
17c0c     13 17 02 F6 | 	mov	arg03, local01
17c10     01 16 66 F0 | 	shl	arg03, #1
17c14     13 17 02 F1 | 	add	arg03, local01
17c18     02 16 66 F0 | 	shl	arg03, #2
17c1c     03 00 00 FF 
17c20     04 E4 85 F1 | 	sub	objptr, ##1540
17c24     F2 16 02 F1 | 	add	arg03, objptr
17c28     0B 17 02 FB | 	rdlong	arg03, arg03
17c2c     0C 4E 05 F1 | 	add	fp, #12
17c30     A7 16 62 FC | 	wrlong	arg03, fp
17c34                 | ' 
17c34                 | ' numpar=compiledline(lineptr_e).result.uresult
17c34                 | ' if numpar>1 then print "padw: "; : printerror(39) : return
17c34     0C 4E 85 F1 | 	sub	fp, #12
17c38     02 16 16 F2 | 	cmp	arg03, #2 wc
17c3c     47 00 00 FF 
17c40     7C E4 85 F1 | 	sub	objptr, ##36476
17c44     40 00 90 CD |  if_b	jmp	#LR__1940
17c48     00 12 06 F6 | 	mov	arg01, #0
17c4c     BC 5B B1 FD | 	call	#__system___getiolock_0620
17c50     FD 12 02 F6 | 	mov	arg01, result1
17c54     04 FF B0 FD | 	call	#__system___lockmem
17c58     C1 01 00 FF 
17c5c     3A 14 06 F6 | 	mov	arg02, ##@LR__6105
17c60     00 12 06 F6 | 	mov	arg01, #0
17c64     00 16 06 F6 | 	mov	arg03, #0
17c68     E8 0B B1 FD | 	call	#__system___basic_print_string
17c6c     00 12 06 F6 | 	mov	arg01, #0
17c70     98 5B B1 FD | 	call	#__system___getiolock_0620
17c74     FD 00 68 FC | 	wrlong	#0, result1
17c78     27 12 06 F6 | 	mov	arg01, #39
17c7c     00 14 06 F6 | 	mov	arg02, #0
17c80     78 C4 B0 FD | 	call	#_printerror
17c84     E0 01 90 FD | 	jmp	#LR__1944
17c88                 | LR__1940
17c88                 | ' if numpar=0 then 
17c88     0C 4E 05 F1 | 	add	fp, #12
17c8c     A7 FE 09 FB | 	rdlong	result3, fp wz
17c90     0C 4E 85 F1 | 	sub	fp, #12
17c94     A8 00 90 5D |  if_ne	jmp	#LR__1941
17c98     00 C0 1B FF 
17c9c     00 26 06 F6 | 	mov	local01, ##931135488
17ca0     52 00 00 FF 
17ca4     38 E4 05 F1 | 	add	objptr, ##42040
17ca8     F2 12 02 FB | 	rdlong	arg01, objptr
17cac     52 00 00 FF 
17cb0     38 E4 85 F1 | 	sub	objptr, ##42040
17cb4     09 13 52 F6 | 	abs	arg01, arg01 wc
17cb8     1F 28 C6 C9 |  if_b	decod	local02, #31
17cbc     00 28 06 36 |  if_ae	mov	local02, #0
17cc0     10 29 B1 FD | 	call	#__system___float_fromuns
17cc4     14 FB 61 F5 | 	xor	result1, local02
17cc8     FD 12 02 F6 | 	mov	arg01, result1
17ccc     FF 7F 23 FF 
17cd0     00 14 06 F6 | 	mov	arg02, ##1191181824
17cd4     04 2F B1 FD | 	call	#__system___float_div
17cd8     FD 14 02 F6 | 	mov	arg02, result1
17cdc     13 13 02 F6 | 	mov	arg01, local01
17ce0     24 29 B1 FD | 	call	#__system___float_add
17ce4     10 4E 05 F1 | 	add	fp, #16
17ce8     A7 FA 61 FC | 	wrlong	result1, fp
17cec                 | '   fpad=(1.0/65536.0)+padw(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17cec     10 4E 85 F1 | 	sub	fp, #16
17cf0     1F FA 05 F4 | 	bitl	result1, #31
17cf4     FD 12 02 F6 | 	mov	arg01, result1
17cf8     89 41 1D FF 
17cfc     6F 14 06 F6 | 	mov	arg02, ##981668463
17d00     01 16 06 F6 | 	mov	arg03, #1
17d04     04 31 B1 FD | 	call	#__system___float_cmp
17d08     00 FA 55 F2 | 	cmps	result1, #0 wc
17d0c     10 4E 05 C1 |  if_b	add	fp, #16
17d10     A7 00 68 CC |  if_b	wrlong	#0, fp
17d14     10 4E 85 C1 |  if_b	sub	fp, #16
17d18     10 4E 05 F1 | 	add	fp, #16
17d1c     A7 26 02 FB | 	rdlong	local01, fp
17d20     10 4E 85 F1 | 	sub	fp, #16
17d24     A7 26 62 FC | 	wrlong	local01, fp
17d28     08 4E 05 F1 | 	add	fp, #8
17d2c     A7 3C 68 FC | 	wrlong	#30, fp
17d30     08 4E 85 F1 | 	sub	fp, #8
17d34     A7 12 02 F6 | 	mov	arg01, fp
17d38     7C 5B BF FD | 	call	#_push
17d3c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17d3c     28 01 90 FD | 	jmp	#LR__1944
17d40                 | LR__1941
17d40     DC 5A BF FD | 	call	#_pop
17d44     A7 FA 61 FC | 	wrlong	result1, fp
17d48     04 4E 05 F1 | 	add	fp, #4
17d4c     A7 FC 61 FC | 	wrlong	result2, fp
17d50     04 4E 05 F1 | 	add	fp, #4
17d54     A7 FE 61 FC | 	wrlong	result3, fp
17d58                 | ' t1=pop()
17d58                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17d58     08 4E 85 F1 | 	sub	fp, #8
17d5c     1C FE 0D F2 | 	cmp	result3, #28 wz
17d60     08 4E 05 51 |  if_ne	add	fp, #8
17d64     A7 26 02 5B |  if_ne	rdlong	local01, fp
17d68     08 4E 85 51 |  if_ne	sub	fp, #8
17d6c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17d70     E8 00 90 5D |  if_ne	jmp	#LR__1943
17d74     A7 26 02 FB | 	rdlong	local01, fp
17d78     52 00 00 FF 
17d7c     44 E5 05 F1 | 	add	objptr, ##42308
17d80     F2 26 62 FC | 	wrlong	local01, objptr
17d84                 | '   q=t1.result.uresult
17d84                 | '   if q<7 then 
17d84     52 00 00 FF 
17d88     44 E5 85 F1 | 	sub	objptr, ##42308
17d8c     07 26 56 F2 | 	cmps	local01, #7 wc
17d90     B8 00 90 3D |  if_ae	jmp	#LR__1942
17d94     00 C0 1B FF 
17d98     00 26 06 F6 | 	mov	local01, ##931135488
17d9c     52 00 00 FF 
17da0     44 E5 05 F1 | 	add	objptr, ##42308
17da4     F2 16 02 FB | 	rdlong	arg03, objptr
17da8     02 16 66 F0 | 	shl	arg03, #2
17dac     0C E5 85 F1 | 	sub	objptr, #268
17db0     F2 16 02 F1 | 	add	arg03, objptr
17db4     0B 13 02 FB | 	rdlong	arg01, arg03
17db8     52 00 00 FF 
17dbc     38 E4 85 F1 | 	sub	objptr, ##42040
17dc0     09 13 52 F6 | 	abs	arg01, arg01 wc
17dc4     1F 28 C6 C9 |  if_b	decod	local02, #31
17dc8     00 28 06 36 |  if_ae	mov	local02, #0
17dcc     04 28 B1 FD | 	call	#__system___float_fromuns
17dd0     14 FB 61 F5 | 	xor	result1, local02
17dd4     FD 12 02 F6 | 	mov	arg01, result1
17dd8     FF 7F 23 FF 
17ddc     00 14 06 F6 | 	mov	arg02, ##1191181824
17de0     F8 2D B1 FD | 	call	#__system___float_div
17de4     FD 14 02 F6 | 	mov	arg02, result1
17de8     13 13 02 F6 | 	mov	arg01, local01
17dec     18 28 B1 FD | 	call	#__system___float_add
17df0     10 4E 05 F1 | 	add	fp, #16
17df4     A7 FA 61 FC | 	wrlong	result1, fp
17df8                 | '     fpad=(1.0/65536.0)+padw(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17df8     10 4E 85 F1 | 	sub	fp, #16
17dfc     1F FA 05 F4 | 	bitl	result1, #31
17e00     FD 12 02 F6 | 	mov	arg01, result1
17e04     89 41 1D FF 
17e08     6F 14 06 F6 | 	mov	arg02, ##981668463
17e0c     01 16 06 F6 | 	mov	arg03, #1
17e10     F8 2F B1 FD | 	call	#__system___float_cmp
17e14     00 FA 55 F2 | 	cmps	result1, #0 wc
17e18     10 4E 05 C1 |  if_b	add	fp, #16
17e1c     A7 00 68 CC |  if_b	wrlong	#0, fp
17e20     10 4E 85 C1 |  if_b	sub	fp, #16
17e24     10 4E 05 F1 | 	add	fp, #16
17e28     A7 26 02 FB | 	rdlong	local01, fp
17e2c     10 4E 85 F1 | 	sub	fp, #16
17e30     A7 26 62 FC | 	wrlong	local01, fp
17e34     08 4E 05 F1 | 	add	fp, #8
17e38     A7 3C 68 FC | 	wrlong	#30, fp
17e3c     08 4E 85 F1 | 	sub	fp, #8
17e40     A7 12 02 F6 | 	mov	arg01, fp
17e44     70 5A BF FD | 	call	#_push
17e48                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17e48     1C 00 90 FD | 	jmp	#LR__1944
17e4c                 | LR__1942
17e4c     29 12 06 F6 | 	mov	arg01, #41
17e50     00 14 06 F6 | 	mov	arg02, #0
17e54     A4 C2 B0 FD | 	call	#_printerror
17e58                 | '      printerror(41) : return
17e58     0C 00 90 FD | 	jmp	#LR__1944
17e5c                 | LR__1943
17e5c     29 12 06 F6 | 	mov	arg01, #41
17e60     00 14 06 F6 | 	mov	arg02, #0
17e64     94 C2 B0 FD | 	call	#_printerror
17e68                 | LR__1944
17e68     A7 F0 03 F6 | 	mov	ptra, fp
17e6c     B2 00 A0 FD | 	call	#popregs_
17e70                 | _do_padw_ret
17e70     2D 00 64 FD | 	ret
17e74                 | 
17e74                 | ' 
17e74                 | ' ' ------------------ padx
17e74                 | ' 
17e74                 | ' sub do_padx
17e74                 | _do_padx
17e74     02 4A 05 F6 | 	mov	COUNT_, #2
17e78     A8 00 A0 FD | 	call	#pushregs_
17e7c     14 F0 07 F1 | 	add	ptra, #20
17e80     4A 00 00 FF 
17e84     80 E4 05 F1 | 	add	objptr, ##38016
17e88     F2 26 02 FB | 	rdlong	local01, objptr
17e8c     13 17 02 F6 | 	mov	arg03, local01
17e90     01 16 66 F0 | 	shl	arg03, #1
17e94     13 17 02 F1 | 	add	arg03, local01
17e98     02 16 66 F0 | 	shl	arg03, #2
17e9c     03 00 00 FF 
17ea0     04 E4 85 F1 | 	sub	objptr, ##1540
17ea4     F2 16 02 F1 | 	add	arg03, objptr
17ea8     0B 17 02 FB | 	rdlong	arg03, arg03
17eac     0C 4E 05 F1 | 	add	fp, #12
17eb0     A7 16 62 FC | 	wrlong	arg03, fp
17eb4                 | ' 
17eb4                 | ' numpar=compiledline(lineptr_e).result.uresult
17eb4                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
17eb4     0C 4E 85 F1 | 	sub	fp, #12
17eb8     02 16 16 F2 | 	cmp	arg03, #2 wc
17ebc     47 00 00 FF 
17ec0     7C E4 85 F1 | 	sub	objptr, ##36476
17ec4     40 00 90 CD |  if_b	jmp	#LR__1950
17ec8     00 12 06 F6 | 	mov	arg01, #0
17ecc     3C 59 B1 FD | 	call	#__system___getiolock_0620
17ed0     FD 12 02 F6 | 	mov	arg01, result1
17ed4     84 FC B0 FD | 	call	#__system___lockmem
17ed8     C1 01 00 FF 
17edc     41 14 06 F6 | 	mov	arg02, ##@LR__6106
17ee0     00 12 06 F6 | 	mov	arg01, #0
17ee4     00 16 06 F6 | 	mov	arg03, #0
17ee8     68 09 B1 FD | 	call	#__system___basic_print_string
17eec     00 12 06 F6 | 	mov	arg01, #0
17ef0     18 59 B1 FD | 	call	#__system___getiolock_0620
17ef4     FD 00 68 FC | 	wrlong	#0, result1
17ef8     27 12 06 F6 | 	mov	arg01, #39
17efc     00 14 06 F6 | 	mov	arg02, #0
17f00     F8 C1 B0 FD | 	call	#_printerror
17f04     E0 01 90 FD | 	jmp	#LR__1954
17f08                 | LR__1950
17f08                 | ' if numpar=0 then 
17f08     0C 4E 05 F1 | 	add	fp, #12
17f0c     A7 FE 09 FB | 	rdlong	result3, fp wz
17f10     0C 4E 85 F1 | 	sub	fp, #12
17f14     A8 00 90 5D |  if_ne	jmp	#LR__1951
17f18     00 C0 1B FF 
17f1c     00 26 06 F6 | 	mov	local01, ##931135488
17f20     51 00 00 FF 
17f24     58 E5 05 F1 | 	add	objptr, ##41816
17f28     F2 12 02 FB | 	rdlong	arg01, objptr
17f2c     51 00 00 FF 
17f30     58 E5 85 F1 | 	sub	objptr, ##41816
17f34     09 13 52 F6 | 	abs	arg01, arg01 wc
17f38     1F 28 C6 C9 |  if_b	decod	local02, #31
17f3c     00 28 06 36 |  if_ae	mov	local02, #0
17f40     90 26 B1 FD | 	call	#__system___float_fromuns
17f44     14 FB 61 F5 | 	xor	result1, local02
17f48     FD 12 02 F6 | 	mov	arg01, result1
17f4c     FF 7F 23 FF 
17f50     00 14 06 F6 | 	mov	arg02, ##1191181824
17f54     84 2C B1 FD | 	call	#__system___float_div
17f58     FD 14 02 F6 | 	mov	arg02, result1
17f5c     13 13 02 F6 | 	mov	arg01, local01
17f60     A4 26 B1 FD | 	call	#__system___float_add
17f64     10 4E 05 F1 | 	add	fp, #16
17f68     A7 FA 61 FC | 	wrlong	result1, fp
17f6c                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17f6c     10 4E 85 F1 | 	sub	fp, #16
17f70     1F FA 05 F4 | 	bitl	result1, #31
17f74     FD 12 02 F6 | 	mov	arg01, result1
17f78     89 41 1D FF 
17f7c     6F 14 06 F6 | 	mov	arg02, ##981668463
17f80     01 16 06 F6 | 	mov	arg03, #1
17f84     84 2E B1 FD | 	call	#__system___float_cmp
17f88     00 FA 55 F2 | 	cmps	result1, #0 wc
17f8c     10 4E 05 C1 |  if_b	add	fp, #16
17f90     A7 00 68 CC |  if_b	wrlong	#0, fp
17f94     10 4E 85 C1 |  if_b	sub	fp, #16
17f98     10 4E 05 F1 | 	add	fp, #16
17f9c     A7 26 02 FB | 	rdlong	local01, fp
17fa0     10 4E 85 F1 | 	sub	fp, #16
17fa4     A7 26 62 FC | 	wrlong	local01, fp
17fa8     08 4E 05 F1 | 	add	fp, #8
17fac     A7 3C 68 FC | 	wrlong	#30, fp
17fb0     08 4E 85 F1 | 	sub	fp, #8
17fb4     A7 12 02 F6 | 	mov	arg01, fp
17fb8     FC 58 BF FD | 	call	#_push
17fbc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17fbc     28 01 90 FD | 	jmp	#LR__1954
17fc0                 | LR__1951
17fc0     5C 58 BF FD | 	call	#_pop
17fc4     A7 FA 61 FC | 	wrlong	result1, fp
17fc8     04 4E 05 F1 | 	add	fp, #4
17fcc     A7 FC 61 FC | 	wrlong	result2, fp
17fd0     04 4E 05 F1 | 	add	fp, #4
17fd4     A7 FE 61 FC | 	wrlong	result3, fp
17fd8                 | ' t1=pop()
17fd8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17fd8     08 4E 85 F1 | 	sub	fp, #8
17fdc     1C FE 0D F2 | 	cmp	result3, #28 wz
17fe0     08 4E 05 51 |  if_ne	add	fp, #8
17fe4     A7 26 02 5B |  if_ne	rdlong	local01, fp
17fe8     08 4E 85 51 |  if_ne	sub	fp, #8
17fec     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17ff0     E8 00 90 5D |  if_ne	jmp	#LR__1953
17ff4     A7 26 02 FB | 	rdlong	local01, fp
17ff8     52 00 00 FF 
17ffc     44 E5 05 F1 | 	add	objptr, ##42308
18000     F2 26 62 FC | 	wrlong	local01, objptr
18004                 | '   q=t1.result.uresult
18004                 | '   if q<7 then 
18004     52 00 00 FF 
18008     44 E5 85 F1 | 	sub	objptr, ##42308
1800c     07 26 56 F2 | 	cmps	local01, #7 wc
18010     B8 00 90 3D |  if_ae	jmp	#LR__1952
18014     00 C0 1B FF 
18018     00 26 06 F6 | 	mov	local01, ##931135488
1801c     52 00 00 FF 
18020     44 E5 05 F1 | 	add	objptr, ##42308
18024     F2 16 02 FB | 	rdlong	arg03, objptr
18028     02 16 66 F0 | 	shl	arg03, #2
1802c     EC E5 85 F1 | 	sub	objptr, #492
18030     F2 16 02 F1 | 	add	arg03, objptr
18034     0B 13 02 FB | 	rdlong	arg01, arg03
18038     51 00 00 FF 
1803c     58 E5 85 F1 | 	sub	objptr, ##41816
18040     09 13 52 F6 | 	abs	arg01, arg01 wc
18044     1F 28 C6 C9 |  if_b	decod	local02, #31
18048     00 28 06 36 |  if_ae	mov	local02, #0
1804c     84 25 B1 FD | 	call	#__system___float_fromuns
18050     14 FB 61 F5 | 	xor	result1, local02
18054     FD 12 02 F6 | 	mov	arg01, result1
18058     FF 7F 23 FF 
1805c     00 14 06 F6 | 	mov	arg02, ##1191181824
18060     78 2B B1 FD | 	call	#__system___float_div
18064     FD 14 02 F6 | 	mov	arg02, result1
18068     13 13 02 F6 | 	mov	arg01, local01
1806c     98 25 B1 FD | 	call	#__system___float_add
18070     10 4E 05 F1 | 	add	fp, #16
18074     A7 FA 61 FC | 	wrlong	result1, fp
18078                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18078     10 4E 85 F1 | 	sub	fp, #16
1807c     1F FA 05 F4 | 	bitl	result1, #31
18080     FD 12 02 F6 | 	mov	arg01, result1
18084     89 41 1D FF 
18088     6F 14 06 F6 | 	mov	arg02, ##981668463
1808c     01 16 06 F6 | 	mov	arg03, #1
18090     78 2D B1 FD | 	call	#__system___float_cmp
18094     00 FA 55 F2 | 	cmps	result1, #0 wc
18098     10 4E 05 C1 |  if_b	add	fp, #16
1809c     A7 00 68 CC |  if_b	wrlong	#0, fp
180a0     10 4E 85 C1 |  if_b	sub	fp, #16
180a4     10 4E 05 F1 | 	add	fp, #16
180a8     A7 26 02 FB | 	rdlong	local01, fp
180ac     10 4E 85 F1 | 	sub	fp, #16
180b0     A7 26 62 FC | 	wrlong	local01, fp
180b4     08 4E 05 F1 | 	add	fp, #8
180b8     A7 3C 68 FC | 	wrlong	#30, fp
180bc     08 4E 85 F1 | 	sub	fp, #8
180c0     A7 12 02 F6 | 	mov	arg01, fp
180c4     F0 57 BF FD | 	call	#_push
180c8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
180c8     1C 00 90 FD | 	jmp	#LR__1954
180cc                 | LR__1952
180cc     29 12 06 F6 | 	mov	arg01, #41
180d0     00 14 06 F6 | 	mov	arg02, #0
180d4     24 C0 B0 FD | 	call	#_printerror
180d8                 | '      printerror(41) : return
180d8     0C 00 90 FD | 	jmp	#LR__1954
180dc                 | LR__1953
180dc     29 12 06 F6 | 	mov	arg01, #41
180e0     00 14 06 F6 | 	mov	arg02, #0
180e4     14 C0 B0 FD | 	call	#_printerror
180e8                 | LR__1954
180e8     A7 F0 03 F6 | 	mov	ptra, fp
180ec     B2 00 A0 FD | 	call	#popregs_
180f0                 | _do_padx_ret
180f0     2D 00 64 FD | 	ret
180f4                 | 
180f4                 | ' 
180f4                 | ' ' ------------------ pady
180f4                 | ' 
180f4                 | ' sub do_pady
180f4                 | _do_pady
180f4     02 4A 05 F6 | 	mov	COUNT_, #2
180f8     A8 00 A0 FD | 	call	#pushregs_
180fc     14 F0 07 F1 | 	add	ptra, #20
18100     4A 00 00 FF 
18104     80 E4 05 F1 | 	add	objptr, ##38016
18108     F2 26 02 FB | 	rdlong	local01, objptr
1810c     13 17 02 F6 | 	mov	arg03, local01
18110     01 16 66 F0 | 	shl	arg03, #1
18114     13 17 02 F1 | 	add	arg03, local01
18118     02 16 66 F0 | 	shl	arg03, #2
1811c     03 00 00 FF 
18120     04 E4 85 F1 | 	sub	objptr, ##1540
18124     F2 16 02 F1 | 	add	arg03, objptr
18128     0B 17 02 FB | 	rdlong	arg03, arg03
1812c     0C 4E 05 F1 | 	add	fp, #12
18130     A7 16 62 FC | 	wrlong	arg03, fp
18134                 | ' 
18134                 | ' numpar=compiledline(lineptr_e).result.uresult
18134                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
18134     0C 4E 85 F1 | 	sub	fp, #12
18138     02 16 16 F2 | 	cmp	arg03, #2 wc
1813c     47 00 00 FF 
18140     7C E4 85 F1 | 	sub	objptr, ##36476
18144     40 00 90 CD |  if_b	jmp	#LR__1960
18148     00 12 06 F6 | 	mov	arg01, #0
1814c     BC 56 B1 FD | 	call	#__system___getiolock_0620
18150     FD 12 02 F6 | 	mov	arg01, result1
18154     04 FA B0 FD | 	call	#__system___lockmem
18158     C1 01 00 FF 
1815c     48 14 06 F6 | 	mov	arg02, ##@LR__6107
18160     00 12 06 F6 | 	mov	arg01, #0
18164     00 16 06 F6 | 	mov	arg03, #0
18168     E8 06 B1 FD | 	call	#__system___basic_print_string
1816c     00 12 06 F6 | 	mov	arg01, #0
18170     98 56 B1 FD | 	call	#__system___getiolock_0620
18174     FD 00 68 FC | 	wrlong	#0, result1
18178     27 12 06 F6 | 	mov	arg01, #39
1817c     00 14 06 F6 | 	mov	arg02, #0
18180     78 BF B0 FD | 	call	#_printerror
18184     E0 01 90 FD | 	jmp	#LR__1964
18188                 | LR__1960
18188                 | ' if numpar=0 then 
18188     0C 4E 05 F1 | 	add	fp, #12
1818c     A7 FE 09 FB | 	rdlong	result3, fp wz
18190     0C 4E 85 F1 | 	sub	fp, #12
18194     A8 00 90 5D |  if_ne	jmp	#LR__1961
18198     00 C0 1B FF 
1819c     00 26 06 F6 | 	mov	local01, ##931135488
181a0     51 00 00 FF 
181a4     74 E5 05 F1 | 	add	objptr, ##41844
181a8     F2 12 02 FB | 	rdlong	arg01, objptr
181ac     51 00 00 FF 
181b0     74 E5 85 F1 | 	sub	objptr, ##41844
181b4     09 13 52 F6 | 	abs	arg01, arg01 wc
181b8     1F 28 C6 C9 |  if_b	decod	local02, #31
181bc     00 28 06 36 |  if_ae	mov	local02, #0
181c0     10 24 B1 FD | 	call	#__system___float_fromuns
181c4     14 FB 61 F5 | 	xor	result1, local02
181c8     FD 12 02 F6 | 	mov	arg01, result1
181cc     FF 7F 23 FF 
181d0     00 14 06 F6 | 	mov	arg02, ##1191181824
181d4     04 2A B1 FD | 	call	#__system___float_div
181d8     FD 14 02 F6 | 	mov	arg02, result1
181dc     13 13 02 F6 | 	mov	arg01, local01
181e0     24 24 B1 FD | 	call	#__system___float_add
181e4     10 4E 05 F1 | 	add	fp, #16
181e8     A7 FA 61 FC | 	wrlong	result1, fp
181ec                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
181ec     10 4E 85 F1 | 	sub	fp, #16
181f0     1F FA 05 F4 | 	bitl	result1, #31
181f4     FD 12 02 F6 | 	mov	arg01, result1
181f8     89 41 1D FF 
181fc     6F 14 06 F6 | 	mov	arg02, ##981668463
18200     01 16 06 F6 | 	mov	arg03, #1
18204     04 2C B1 FD | 	call	#__system___float_cmp
18208     00 FA 55 F2 | 	cmps	result1, #0 wc
1820c     10 4E 05 C1 |  if_b	add	fp, #16
18210     A7 00 68 CC |  if_b	wrlong	#0, fp
18214     10 4E 85 C1 |  if_b	sub	fp, #16
18218     10 4E 05 F1 | 	add	fp, #16
1821c     A7 26 02 FB | 	rdlong	local01, fp
18220     10 4E 85 F1 | 	sub	fp, #16
18224     A7 26 62 FC | 	wrlong	local01, fp
18228     08 4E 05 F1 | 	add	fp, #8
1822c     A7 3C 68 FC | 	wrlong	#30, fp
18230     08 4E 85 F1 | 	sub	fp, #8
18234     A7 12 02 F6 | 	mov	arg01, fp
18238     7C 56 BF FD | 	call	#_push
1823c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1823c     28 01 90 FD | 	jmp	#LR__1964
18240                 | LR__1961
18240     DC 55 BF FD | 	call	#_pop
18244     A7 FA 61 FC | 	wrlong	result1, fp
18248     04 4E 05 F1 | 	add	fp, #4
1824c     A7 FC 61 FC | 	wrlong	result2, fp
18250     04 4E 05 F1 | 	add	fp, #4
18254     A7 FE 61 FC | 	wrlong	result3, fp
18258                 | ' t1=pop()
18258                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
18258     08 4E 85 F1 | 	sub	fp, #8
1825c     1C FE 0D F2 | 	cmp	result3, #28 wz
18260     08 4E 05 51 |  if_ne	add	fp, #8
18264     A7 26 02 5B |  if_ne	rdlong	local01, fp
18268     08 4E 85 51 |  if_ne	sub	fp, #8
1826c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
18270     E8 00 90 5D |  if_ne	jmp	#LR__1963
18274     A7 26 02 FB | 	rdlong	local01, fp
18278     52 00 00 FF 
1827c     44 E5 05 F1 | 	add	objptr, ##42308
18280     F2 26 62 FC | 	wrlong	local01, objptr
18284                 | '   q=t1.result.uresult
18284                 | '   if q<7 then 
18284     52 00 00 FF 
18288     44 E5 85 F1 | 	sub	objptr, ##42308
1828c     07 26 56 F2 | 	cmps	local01, #7 wc
18290     B8 00 90 3D |  if_ae	jmp	#LR__1962
18294     00 C0 1B FF 
18298     00 26 06 F6 | 	mov	local01, ##931135488
1829c     52 00 00 FF 
182a0     44 E5 05 F1 | 	add	objptr, ##42308
182a4     F2 16 02 FB | 	rdlong	arg03, objptr
182a8     02 16 66 F0 | 	shl	arg03, #2
182ac     D0 E5 85 F1 | 	sub	objptr, #464
182b0     F2 16 02 F1 | 	add	arg03, objptr
182b4     0B 13 02 FB | 	rdlong	arg01, arg03
182b8     51 00 00 FF 
182bc     74 E5 85 F1 | 	sub	objptr, ##41844
182c0     09 13 52 F6 | 	abs	arg01, arg01 wc
182c4     1F 28 C6 C9 |  if_b	decod	local02, #31
182c8     00 28 06 36 |  if_ae	mov	local02, #0
182cc     04 23 B1 FD | 	call	#__system___float_fromuns
182d0     14 FB 61 F5 | 	xor	result1, local02
182d4     FD 12 02 F6 | 	mov	arg01, result1
182d8     FF 7F 23 FF 
182dc     00 14 06 F6 | 	mov	arg02, ##1191181824
182e0     F8 28 B1 FD | 	call	#__system___float_div
182e4     FD 14 02 F6 | 	mov	arg02, result1
182e8     13 13 02 F6 | 	mov	arg01, local01
182ec     18 23 B1 FD | 	call	#__system___float_add
182f0     10 4E 05 F1 | 	add	fp, #16
182f4     A7 FA 61 FC | 	wrlong	result1, fp
182f8                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
182f8     10 4E 85 F1 | 	sub	fp, #16
182fc     1F FA 05 F4 | 	bitl	result1, #31
18300     FD 12 02 F6 | 	mov	arg01, result1
18304     89 41 1D FF 
18308     6F 14 06 F6 | 	mov	arg02, ##981668463
1830c     01 16 06 F6 | 	mov	arg03, #1
18310     F8 2A B1 FD | 	call	#__system___float_cmp
18314     00 FA 55 F2 | 	cmps	result1, #0 wc
18318     10 4E 05 C1 |  if_b	add	fp, #16
1831c     A7 00 68 CC |  if_b	wrlong	#0, fp
18320     10 4E 85 C1 |  if_b	sub	fp, #16
18324     10 4E 05 F1 | 	add	fp, #16
18328     A7 26 02 FB | 	rdlong	local01, fp
1832c     10 4E 85 F1 | 	sub	fp, #16
18330     A7 26 62 FC | 	wrlong	local01, fp
18334     08 4E 05 F1 | 	add	fp, #8
18338     A7 3C 68 FC | 	wrlong	#30, fp
1833c     08 4E 85 F1 | 	sub	fp, #8
18340     A7 12 02 F6 | 	mov	arg01, fp
18344     70 55 BF FD | 	call	#_push
18348                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
18348     1C 00 90 FD | 	jmp	#LR__1964
1834c                 | LR__1962
1834c     29 12 06 F6 | 	mov	arg01, #41
18350     00 14 06 F6 | 	mov	arg02, #0
18354     A4 BD B0 FD | 	call	#_printerror
18358                 | '      printerror(41) : return
18358     0C 00 90 FD | 	jmp	#LR__1964
1835c                 | LR__1963
1835c     29 12 06 F6 | 	mov	arg01, #41
18360     00 14 06 F6 | 	mov	arg02, #0
18364     94 BD B0 FD | 	call	#_printerror
18368                 | LR__1964
18368     A7 F0 03 F6 | 	mov	ptra, fp
1836c     B2 00 A0 FD | 	call	#popregs_
18370                 | _do_pady_ret
18370     2D 00 64 FD | 	ret
18374                 | 
18374                 | ' 
18374                 | ' ' ------------------ padz
18374                 | ' 
18374                 | ' sub do_padz
18374                 | _do_padz
18374     02 4A 05 F6 | 	mov	COUNT_, #2
18378     A8 00 A0 FD | 	call	#pushregs_
1837c     14 F0 07 F1 | 	add	ptra, #20
18380     4A 00 00 FF 
18384     80 E4 05 F1 | 	add	objptr, ##38016
18388     F2 26 02 FB | 	rdlong	local01, objptr
1838c     13 17 02 F6 | 	mov	arg03, local01
18390     01 16 66 F0 | 	shl	arg03, #1
18394     13 17 02 F1 | 	add	arg03, local01
18398     02 16 66 F0 | 	shl	arg03, #2
1839c     03 00 00 FF 
183a0     04 E4 85 F1 | 	sub	objptr, ##1540
183a4     F2 16 02 F1 | 	add	arg03, objptr
183a8     0B 17 02 FB | 	rdlong	arg03, arg03
183ac     0C 4E 05 F1 | 	add	fp, #12
183b0     A7 16 62 FC | 	wrlong	arg03, fp
183b4                 | ' 
183b4                 | ' numpar=compiledline(lineptr_e).result.uresult
183b4                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
183b4     0C 4E 85 F1 | 	sub	fp, #12
183b8     02 16 16 F2 | 	cmp	arg03, #2 wc
183bc     47 00 00 FF 
183c0     7C E4 85 F1 | 	sub	objptr, ##36476
183c4     40 00 90 CD |  if_b	jmp	#LR__1970
183c8     00 12 06 F6 | 	mov	arg01, #0
183cc     3C 54 B1 FD | 	call	#__system___getiolock_0620
183d0     FD 12 02 F6 | 	mov	arg01, result1
183d4     84 F7 B0 FD | 	call	#__system___lockmem
183d8     C1 01 00 FF 
183dc     4F 14 06 F6 | 	mov	arg02, ##@LR__6108
183e0     00 12 06 F6 | 	mov	arg01, #0
183e4     00 16 06 F6 | 	mov	arg03, #0
183e8     68 04 B1 FD | 	call	#__system___basic_print_string
183ec     00 12 06 F6 | 	mov	arg01, #0
183f0     18 54 B1 FD | 	call	#__system___getiolock_0620
183f4     FD 00 68 FC | 	wrlong	#0, result1
183f8     27 12 06 F6 | 	mov	arg01, #39
183fc     00 14 06 F6 | 	mov	arg02, #0
18400     F8 BC B0 FD | 	call	#_printerror
18404     E0 01 90 FD | 	jmp	#LR__1974
18408                 | LR__1970
18408                 | ' if numpar=0 then 
18408     0C 4E 05 F1 | 	add	fp, #12
1840c     A7 FE 09 FB | 	rdlong	result3, fp wz
18410     0C 4E 85 F1 | 	sub	fp, #12
18414     A8 00 90 5D |  if_ne	jmp	#LR__1971
18418     00 C0 1B FF 
1841c     00 26 06 F6 | 	mov	local01, ##931135488
18420     51 00 00 FF 
18424     90 E5 05 F1 | 	add	objptr, ##41872
18428     F2 12 02 FB | 	rdlong	arg01, objptr
1842c     51 00 00 FF 
18430     90 E5 85 F1 | 	sub	objptr, ##41872
18434     09 13 52 F6 | 	abs	arg01, arg01 wc
18438     1F 28 C6 C9 |  if_b	decod	local02, #31
1843c     00 28 06 36 |  if_ae	mov	local02, #0
18440     90 21 B1 FD | 	call	#__system___float_fromuns
18444     14 FB 61 F5 | 	xor	result1, local02
18448     FD 12 02 F6 | 	mov	arg01, result1
1844c     FF 7F 23 FF 
18450     00 14 06 F6 | 	mov	arg02, ##1191181824
18454     84 27 B1 FD | 	call	#__system___float_div
18458     FD 14 02 F6 | 	mov	arg02, result1
1845c     13 13 02 F6 | 	mov	arg01, local01
18460     A4 21 B1 FD | 	call	#__system___float_add
18464     10 4E 05 F1 | 	add	fp, #16
18468     A7 FA 61 FC | 	wrlong	result1, fp
1846c                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1846c     10 4E 85 F1 | 	sub	fp, #16
18470     1F FA 05 F4 | 	bitl	result1, #31
18474     FD 12 02 F6 | 	mov	arg01, result1
18478     89 41 1D FF 
1847c     6F 14 06 F6 | 	mov	arg02, ##981668463
18480     01 16 06 F6 | 	mov	arg03, #1
18484     84 29 B1 FD | 	call	#__system___float_cmp
18488     00 FA 55 F2 | 	cmps	result1, #0 wc
1848c     10 4E 05 C1 |  if_b	add	fp, #16
18490     A7 00 68 CC |  if_b	wrlong	#0, fp
18494     10 4E 85 C1 |  if_b	sub	fp, #16
18498     10 4E 05 F1 | 	add	fp, #16
1849c     A7 26 02 FB | 	rdlong	local01, fp
184a0     10 4E 85 F1 | 	sub	fp, #16
184a4     A7 26 62 FC | 	wrlong	local01, fp
184a8     08 4E 05 F1 | 	add	fp, #8
184ac     A7 3C 68 FC | 	wrlong	#30, fp
184b0     08 4E 85 F1 | 	sub	fp, #8
184b4     A7 12 02 F6 | 	mov	arg01, fp
184b8     FC 53 BF FD | 	call	#_push
184bc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
184bc     28 01 90 FD | 	jmp	#LR__1974
184c0                 | LR__1971
184c0     5C 53 BF FD | 	call	#_pop
184c4     A7 FA 61 FC | 	wrlong	result1, fp
184c8     04 4E 05 F1 | 	add	fp, #4
184cc     A7 FC 61 FC | 	wrlong	result2, fp
184d0     04 4E 05 F1 | 	add	fp, #4
184d4     A7 FE 61 FC | 	wrlong	result3, fp
184d8                 | ' t1=pop()
184d8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
184d8     08 4E 85 F1 | 	sub	fp, #8
184dc     1C FE 0D F2 | 	cmp	result3, #28 wz
184e0     08 4E 05 51 |  if_ne	add	fp, #8
184e4     A7 26 02 5B |  if_ne	rdlong	local01, fp
184e8     08 4E 85 51 |  if_ne	sub	fp, #8
184ec     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
184f0     E8 00 90 5D |  if_ne	jmp	#LR__1973
184f4     A7 26 02 FB | 	rdlong	local01, fp
184f8     52 00 00 FF 
184fc     44 E5 05 F1 | 	add	objptr, ##42308
18500     F2 26 62 FC | 	wrlong	local01, objptr
18504                 | '   q=t1.result.uresult
18504                 | '   if q<7 then 
18504     52 00 00 FF 
18508     44 E5 85 F1 | 	sub	objptr, ##42308
1850c     07 26 56 F2 | 	cmps	local01, #7 wc
18510     B8 00 90 3D |  if_ae	jmp	#LR__1972
18514     00 C0 1B FF 
18518     00 26 06 F6 | 	mov	local01, ##931135488
1851c     52 00 00 FF 
18520     44 E5 05 F1 | 	add	objptr, ##42308
18524     F2 16 02 FB | 	rdlong	arg03, objptr
18528     02 16 66 F0 | 	shl	arg03, #2
1852c     B4 E5 85 F1 | 	sub	objptr, #436
18530     F2 16 02 F1 | 	add	arg03, objptr
18534     0B 13 02 FB | 	rdlong	arg01, arg03
18538     51 00 00 FF 
1853c     90 E5 85 F1 | 	sub	objptr, ##41872
18540     09 13 52 F6 | 	abs	arg01, arg01 wc
18544     1F 28 C6 C9 |  if_b	decod	local02, #31
18548     00 28 06 36 |  if_ae	mov	local02, #0
1854c     84 20 B1 FD | 	call	#__system___float_fromuns
18550     14 FB 61 F5 | 	xor	result1, local02
18554     FD 12 02 F6 | 	mov	arg01, result1
18558     FF 7F 23 FF 
1855c     00 14 06 F6 | 	mov	arg02, ##1191181824
18560     78 26 B1 FD | 	call	#__system___float_div
18564     FD 14 02 F6 | 	mov	arg02, result1
18568     13 13 02 F6 | 	mov	arg01, local01
1856c     98 20 B1 FD | 	call	#__system___float_add
18570     10 4E 05 F1 | 	add	fp, #16
18574     A7 FA 61 FC | 	wrlong	result1, fp
18578                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
18578     10 4E 85 F1 | 	sub	fp, #16
1857c     1F FA 05 F4 | 	bitl	result1, #31
18580     FD 12 02 F6 | 	mov	arg01, result1
18584     89 41 1D FF 
18588     6F 14 06 F6 | 	mov	arg02, ##981668463
1858c     01 16 06 F6 | 	mov	arg03, #1
18590     78 28 B1 FD | 	call	#__system___float_cmp
18594     00 FA 55 F2 | 	cmps	result1, #0 wc
18598     10 4E 05 C1 |  if_b	add	fp, #16
1859c     A7 00 68 CC |  if_b	wrlong	#0, fp
185a0     10 4E 85 C1 |  if_b	sub	fp, #16
185a4     10 4E 05 F1 | 	add	fp, #16
185a8     A7 26 02 FB | 	rdlong	local01, fp
185ac     10 4E 85 F1 | 	sub	fp, #16
185b0     A7 26 62 FC | 	wrlong	local01, fp
185b4     08 4E 05 F1 | 	add	fp, #8
185b8     A7 3C 68 FC | 	wrlong	#30, fp
185bc     08 4E 85 F1 | 	sub	fp, #8
185c0     A7 12 02 F6 | 	mov	arg01, fp
185c4     F0 52 BF FD | 	call	#_push
185c8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
185c8     1C 00 90 FD | 	jmp	#LR__1974
185cc                 | LR__1972
185cc     29 12 06 F6 | 	mov	arg01, #41
185d0     00 14 06 F6 | 	mov	arg02, #0
185d4     24 BB B0 FD | 	call	#_printerror
185d8                 | '      printerror(41) : return
185d8     0C 00 90 FD | 	jmp	#LR__1974
185dc                 | LR__1973
185dc     29 12 06 F6 | 	mov	arg01, #41
185e0     00 14 06 F6 | 	mov	arg02, #0
185e4     14 BB B0 FD | 	call	#_printerror
185e8                 | LR__1974
185e8     A7 F0 03 F6 | 	mov	ptra, fp
185ec     B2 00 A0 FD | 	call	#popregs_
185f0                 | _do_padz_ret
185f0     2D 00 64 FD | 	ret
185f4                 | 
185f4                 | ' 
185f4                 | ' '-------------------- paper
185f4                 | ' 
185f4                 | ' sub do_paper
185f4                 | _do_paper
185f4     03 4A 05 F6 | 	mov	COUNT_, #3
185f8     A8 00 A0 FD | 	call	#pushregs_
185fc     20 52 BF FD | 	call	#_pop
18600     FD 26 02 F6 | 	mov	local01, result1
18604     FE 28 02 F6 | 	mov	local02, result2
18608     FF 2A 02 F6 | 	mov	local03, result3
1860c                 | ' t1=pop() 
1860c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1860c     1E 2A 0E F2 | 	cmp	local03, #30 wz
18610     10 00 90 5D |  if_ne	jmp	#LR__1980
18614     13 13 02 F6 | 	mov	arg01, local01
18618     00 14 06 F6 | 	mov	arg02, #0
1861c     80 28 B1 FD | 	call	#__system___float_tointeger
18620     FD 26 02 F6 | 	mov	local01, result1
18624                 | LR__1980
18624                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
18624     1F 2A 0E F2 | 	cmp	local03, #31 wz
18628     18 00 90 5D |  if_ne	jmp	#LR__1981
1862c     13 13 02 F6 | 	mov	arg01, local01
18630     B4 2B B1 FD | 	call	#__system____builtin_atof
18634     FD 12 02 F6 | 	mov	arg01, result1
18638     00 14 06 F6 | 	mov	arg02, #0
1863c     60 28 B1 FD | 	call	#__system___float_tointeger
18640     FD 26 02 F6 | 	mov	local01, result1
18644                 | LR__1981
18644     37 00 00 FF 
18648     38 E4 05 F1 | 	add	objptr, ##28216
1864c     F2 26 62 FC | 	wrlong	local01, objptr
18650     04 E4 05 F1 | 	add	objptr, #4
18654     F2 12 02 FB | 	rdlong	arg01, objptr
18658                 | ' 
18658                 | ' write_color:=ff
18658     36 00 00 FF 
1865c     FB E5 85 F1 | 	sub	objptr, ##28155
18660     F2 12 62 FC | 	wrlong	arg01, objptr
18664                 | ' write_background:=bb
18664     04 E4 05 F1 | 	add	objptr, #4
18668     F2 26 62 FC | 	wrlong	local01, objptr
1866c     45 E4 85 F1 | 	sub	objptr, #69
18670     A7 F0 03 F6 | 	mov	ptra, fp
18674     B2 00 A0 FD | 	call	#popregs_
18678                 | _do_paper_ret
18678     2D 00 64 FD | 	ret
1867c                 | 
1867c                 | ' 
1867c                 | ' '-------------------- peek
1867c                 | ' 
1867c                 | ' sub do_peek
1867c                 | _do_peek
1867c     00 4A 05 F6 | 	mov	COUNT_, #0
18680     A8 00 A0 FD | 	call	#pushregs_
18684     14 F0 07 F1 | 	add	ptra, #20
18688     94 51 BF FD | 	call	#_pop
1868c     A7 FA 61 FC | 	wrlong	result1, fp
18690     04 4E 05 F1 | 	add	fp, #4
18694     A7 FC 61 FC | 	wrlong	result2, fp
18698     04 4E 05 F1 | 	add	fp, #4
1869c     A7 FE 61 FC | 	wrlong	result3, fp
186a0     08 4E 85 F1 | 	sub	fp, #8
186a4     A7 12 02 F6 | 	mov	arg01, fp
186a8     58 53 BF FD | 	call	#_converttoint
186ac     0C 4E 05 F1 | 	add	fp, #12
186b0     A7 FA 61 FC | 	wrlong	result1, fp
186b4                 | ' 
186b4                 | ' t1=pop()
186b4                 | ' a=converttoint(t1)
186b4                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
186b4     0C 4E 85 F1 | 	sub	fp, #12
186b8     00 04 00 FF 
186bc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
186c0     1C 00 90 3D |  if_ae	jmp	#LR__1990
186c4     0C 4E 05 F1 | 	add	fp, #12
186c8     A7 12 02 FB | 	rdlong	arg01, fp
186cc     09 FB C1 FA | 	rdbyte	result1, arg01
186d0     04 4E 05 F1 | 	add	fp, #4
186d4     A7 FA 61 FC | 	wrlong	result1, fp
186d8     10 4E 85 F1 | 	sub	fp, #16
186dc     20 00 90 FD | 	jmp	#LR__1991
186e0                 | LR__1990
186e0     0C 4E 05 F1 | 	add	fp, #12
186e4     A7 12 02 FB | 	rdlong	arg01, fp
186e8     0C 4E 85 F1 | 	sub	fp, #12
186ec     84 BC B0 FD | 	call	#_pspeek
186f0     FD FA E1 F8 | 	getbyte	result1, result1, #0
186f4     10 4E 05 F1 | 	add	fp, #16
186f8     A7 FA 61 FC | 	wrlong	result1, fp
186fc     10 4E 85 F1 | 	sub	fp, #16
18700                 | LR__1991
18700     08 4E 05 F1 | 	add	fp, #8
18704     A7 3A 68 FC | 	wrlong	#29, fp
18708     08 4E 05 F1 | 	add	fp, #8
1870c     A7 12 02 FB | 	rdlong	arg01, fp
18710     10 4E 85 F1 | 	sub	fp, #16
18714     A7 12 62 FC | 	wrlong	arg01, fp
18718     A7 12 02 F6 | 	mov	arg01, fp
1871c     98 51 BF FD | 	call	#_push
18720     A7 F0 03 F6 | 	mov	ptra, fp
18724     B2 00 A0 FD | 	call	#popregs_
18728                 | _do_peek_ret
18728     2D 00 64 FD | 	ret
1872c                 | 
1872c                 | ' 
1872c                 | ' '-------------------- pinfloat
1872c                 | ' 
1872c                 | ' sub do_pinfloat
1872c                 | _do_pinfloat
1872c     00 4A 05 F6 | 	mov	COUNT_, #0
18730     A8 00 A0 FD | 	call	#pushregs_
18734     0C F0 07 F1 | 	add	ptra, #12
18738     E4 50 BF FD | 	call	#_pop
1873c     A7 FA 61 FC | 	wrlong	result1, fp
18740     04 4E 05 F1 | 	add	fp, #4
18744     A7 FC 61 FC | 	wrlong	result2, fp
18748     04 4E 05 F1 | 	add	fp, #4
1874c     A7 FE 61 FC | 	wrlong	result3, fp
18750     08 4E 85 F1 | 	sub	fp, #8
18754     A7 12 02 F6 | 	mov	arg01, fp
18758     A8 52 BF FD | 	call	#_converttoint
1875c     50 FA 61 FD | 	fltl	result1
18760     A7 F0 03 F6 | 	mov	ptra, fp
18764     B2 00 A0 FD | 	call	#popregs_
18768                 | _do_pinfloat_ret
18768     2D 00 64 FD | 	ret
1876c                 | 
1876c                 | ' 
1876c                 | ' '-------------------- pinhi
1876c                 | ' 
1876c                 | ' sub do_pinhi
1876c                 | _do_pinhi
1876c     00 4A 05 F6 | 	mov	COUNT_, #0
18770     A8 00 A0 FD | 	call	#pushregs_
18774     0C F0 07 F1 | 	add	ptra, #12
18778     A4 50 BF FD | 	call	#_pop
1877c     A7 FA 61 FC | 	wrlong	result1, fp
18780     04 4E 05 F1 | 	add	fp, #4
18784     A7 FC 61 FC | 	wrlong	result2, fp
18788     04 4E 05 F1 | 	add	fp, #4
1878c     A7 FE 61 FC | 	wrlong	result3, fp
18790     08 4E 85 F1 | 	sub	fp, #8
18794     A7 12 02 F6 | 	mov	arg01, fp
18798     68 52 BF FD | 	call	#_converttoint
1879c     59 FA 61 FD | 	drvh	result1
187a0     A7 F0 03 F6 | 	mov	ptra, fp
187a4     B2 00 A0 FD | 	call	#popregs_
187a8                 | _do_pinhi_ret
187a8     2D 00 64 FD | 	ret
187ac                 | 
187ac                 | ' 
187ac                 | ' '-------------------- pinlo
187ac                 | ' 
187ac                 | ' sub do_pinlo
187ac                 | _do_pinlo
187ac     00 4A 05 F6 | 	mov	COUNT_, #0
187b0     A8 00 A0 FD | 	call	#pushregs_
187b4     0C F0 07 F1 | 	add	ptra, #12
187b8     64 50 BF FD | 	call	#_pop
187bc     A7 FA 61 FC | 	wrlong	result1, fp
187c0     04 4E 05 F1 | 	add	fp, #4
187c4     A7 FC 61 FC | 	wrlong	result2, fp
187c8     04 4E 05 F1 | 	add	fp, #4
187cc     A7 FE 61 FC | 	wrlong	result3, fp
187d0     08 4E 85 F1 | 	sub	fp, #8
187d4     A7 12 02 F6 | 	mov	arg01, fp
187d8     28 52 BF FD | 	call	#_converttoint
187dc     58 FA 61 FD | 	drvl	result1
187e0     A7 F0 03 F6 | 	mov	ptra, fp
187e4     B2 00 A0 FD | 	call	#popregs_
187e8                 | _do_pinlo_ret
187e8     2D 00 64 FD | 	ret
187ec                 | 
187ec                 | ' 
187ec                 | ' '-------------------- pinread
187ec                 | ' 
187ec                 | ' sub do_pinread
187ec                 | _do_pinread
187ec     00 4A 05 F6 | 	mov	COUNT_, #0
187f0     A8 00 A0 FD | 	call	#pushregs_
187f4     0C F0 07 F1 | 	add	ptra, #12
187f8     24 50 BF FD | 	call	#_pop
187fc     A7 FA 61 FC | 	wrlong	result1, fp
18800     04 4E 05 F1 | 	add	fp, #4
18804     A7 FC 61 FC | 	wrlong	result2, fp
18808     04 4E 05 F1 | 	add	fp, #4
1880c     A7 FE 61 FC | 	wrlong	result3, fp
18810     08 4E 85 F1 | 	sub	fp, #8
18814     A7 12 02 F6 | 	mov	arg01, fp
18818     E8 51 BF FD | 	call	#_converttoint
1881c     FD 12 02 F6 | 	mov	arg01, result1
18820     20 12 CE F7 | 	test	arg01, #32 wz
18824     FF FB 01 56 |  if_ne	mov	result1, inb
18828     FE FB 01 A6 |  if_e	mov	result1, ina
1882c     09 FB 41 F0 | 	shr	result1, arg01
18830     06 12 46 F0 | 	shr	arg01, #6
18834     09 FB 41 F7 | 	zerox	result1, arg01
18838     52 00 00 FF 
1883c     4C E5 05 F1 | 	add	objptr, ##42316
18840     F2 FA 61 FC | 	wrlong	result1, objptr
18844     52 00 00 FF 
18848     4C E5 85 F1 | 	sub	objptr, ##42316
1884c     08 4E 05 F1 | 	add	fp, #8
18850     A7 3A 68 FC | 	wrlong	#29, fp
18854     08 4E 85 F1 | 	sub	fp, #8
18858     A7 08 68 FC | 	wrlong	#4, fp
1885c     A7 12 02 F6 | 	mov	arg01, fp
18860     54 50 BF FD | 	call	#_push
18864     A7 F0 03 F6 | 	mov	ptra, fp
18868     B2 00 A0 FD | 	call	#popregs_
1886c                 | _do_pinread_ret
1886c     2D 00 64 FD | 	ret
18870                 | 
18870                 | ' 
18870                 | ' '-------------------- pinstart
18870                 | ' 
18870                 | ' sub do_pinstart
18870                 | _do_pinstart
18870     03 4A 05 F6 | 	mov	COUNT_, #3
18874     A8 00 A0 FD | 	call	#pushregs_
18878     30 F0 07 F1 | 	add	ptra, #48
1887c     A0 4F BF FD | 	call	#_pop
18880     FD 16 02 F6 | 	mov	arg03, result1
18884     FE 14 02 F6 | 	mov	arg02, result2
18888     FF 18 02 F6 | 	mov	arg04, result3
1888c     A7 16 62 FC | 	wrlong	arg03, fp
18890     04 4E 05 F1 | 	add	fp, #4
18894     A7 14 62 FC | 	wrlong	arg02, fp
18898     04 4E 05 F1 | 	add	fp, #4
1889c     A7 18 62 FC | 	wrlong	arg04, fp
188a0     08 4E 85 F1 | 	sub	fp, #8
188a4     78 4F BF FD | 	call	#_pop
188a8     FD 16 02 F6 | 	mov	arg03, result1
188ac     FE 14 02 F6 | 	mov	arg02, result2
188b0     FF 18 02 F6 | 	mov	arg04, result3
188b4     0C 4E 05 F1 | 	add	fp, #12
188b8     A7 16 62 FC | 	wrlong	arg03, fp
188bc     04 4E 05 F1 | 	add	fp, #4
188c0     A7 14 62 FC | 	wrlong	arg02, fp
188c4     04 4E 05 F1 | 	add	fp, #4
188c8     A7 18 62 FC | 	wrlong	arg04, fp
188cc     14 4E 85 F1 | 	sub	fp, #20
188d0     4C 4F BF FD | 	call	#_pop
188d4     FD 16 02 F6 | 	mov	arg03, result1
188d8     FE 14 02 F6 | 	mov	arg02, result2
188dc     FF 18 02 F6 | 	mov	arg04, result3
188e0     18 4E 05 F1 | 	add	fp, #24
188e4     A7 16 62 FC | 	wrlong	arg03, fp
188e8     04 4E 05 F1 | 	add	fp, #4
188ec     A7 14 62 FC | 	wrlong	arg02, fp
188f0     04 4E 05 F1 | 	add	fp, #4
188f4     A7 18 62 FC | 	wrlong	arg04, fp
188f8     20 4E 85 F1 | 	sub	fp, #32
188fc     20 4F BF FD | 	call	#_pop
18900     FF 16 02 F6 | 	mov	arg03, result3
18904     24 4E 05 F1 | 	add	fp, #36
18908     A7 FA 61 FC | 	wrlong	result1, fp
1890c     04 4E 05 F1 | 	add	fp, #4
18910     A7 FC 61 FC | 	wrlong	result2, fp
18914     04 4E 05 F1 | 	add	fp, #4
18918     A7 16 62 FC | 	wrlong	arg03, fp
1891c     08 4E 85 F1 | 	sub	fp, #8
18920     A7 12 02 F6 | 	mov	arg01, fp
18924     24 4E 85 F1 | 	sub	fp, #36
18928     D8 50 BF FD | 	call	#_converttoint
1892c     FD 26 02 F6 | 	mov	local01, result1
18930     18 4E 05 F1 | 	add	fp, #24
18934     A7 12 02 F6 | 	mov	arg01, fp
18938     18 4E 85 F1 | 	sub	fp, #24
1893c     C4 50 BF FD | 	call	#_converttoint
18940     FD 28 02 F6 | 	mov	local02, result1
18944     0C 4E 05 F1 | 	add	fp, #12
18948     A7 12 02 F6 | 	mov	arg01, fp
1894c     0C 4E 85 F1 | 	sub	fp, #12
18950     B0 50 BF FD | 	call	#_converttoint
18954     FD 2A 02 F6 | 	mov	local03, result1
18958     A7 12 02 F6 | 	mov	arg01, fp
1895c     A4 50 BF FD | 	call	#_converttoint
18960     40 26 62 FD | 	dirl	local01
18964     13 29 02 FC | 	wrpin	local02, local01
18968     13 2B 12 FC | 	wxpin	local03, local01
1896c     13 FB 21 FC | 	wypin	result1, local01
18970     41 26 62 FD | 	dirh	local01
18974     A7 F0 03 F6 | 	mov	ptra, fp
18978     B2 00 A0 FD | 	call	#popregs_
1897c                 | _do_pinstart_ret
1897c     2D 00 64 FD | 	ret
18980                 | 
18980                 | ' 
18980                 | ' '-------------------- pintoggle
18980                 | ' 
18980                 | ' sub do_pintoggle
18980                 | _do_pintoggle
18980     00 4A 05 F6 | 	mov	COUNT_, #0
18984     A8 00 A0 FD | 	call	#pushregs_
18988     0C F0 07 F1 | 	add	ptra, #12
1898c     90 4E BF FD | 	call	#_pop
18990     A7 FA 61 FC | 	wrlong	result1, fp
18994     04 4E 05 F1 | 	add	fp, #4
18998     A7 FC 61 FC | 	wrlong	result2, fp
1899c     04 4E 05 F1 | 	add	fp, #4
189a0     A7 FE 61 FC | 	wrlong	result3, fp
189a4     08 4E 85 F1 | 	sub	fp, #8
189a8     A7 12 02 F6 | 	mov	arg01, fp
189ac     54 50 BF FD | 	call	#_converttoint
189b0     5F FA 61 FD | 	drvnot	result1
189b4     A7 F0 03 F6 | 	mov	ptra, fp
189b8     B2 00 A0 FD | 	call	#popregs_
189bc                 | _do_pintoggle_ret
189bc     2D 00 64 FD | 	ret
189c0                 | 
189c0                 | ' 
189c0                 | ' '-------------------- pinwrite
189c0                 | ' 
189c0                 | ' sub do_pinwrite
189c0                 | _do_pinwrite
189c0     01 4A 05 F6 | 	mov	COUNT_, #1
189c4     A8 00 A0 FD | 	call	#pushregs_
189c8     18 F0 07 F1 | 	add	ptra, #24
189cc     50 4E BF FD | 	call	#_pop
189d0     FD 14 02 F6 | 	mov	arg02, result1
189d4     FE 12 02 F6 | 	mov	arg01, result2
189d8     FF 26 02 F6 | 	mov	local01, result3
189dc     A7 14 62 FC | 	wrlong	arg02, fp
189e0     04 4E 05 F1 | 	add	fp, #4
189e4     A7 12 62 FC | 	wrlong	arg01, fp
189e8     04 4E 05 F1 | 	add	fp, #4
189ec     A7 26 62 FC | 	wrlong	local01, fp
189f0     08 4E 85 F1 | 	sub	fp, #8
189f4     28 4E BF FD | 	call	#_pop
189f8     FF 26 02 F6 | 	mov	local01, result3
189fc     0C 4E 05 F1 | 	add	fp, #12
18a00     A7 FA 61 FC | 	wrlong	result1, fp
18a04     04 4E 05 F1 | 	add	fp, #4
18a08     A7 FC 61 FC | 	wrlong	result2, fp
18a0c     04 4E 05 F1 | 	add	fp, #4
18a10     A7 26 62 FC | 	wrlong	local01, fp
18a14     08 4E 85 F1 | 	sub	fp, #8
18a18     A7 12 02 F6 | 	mov	arg01, fp
18a1c     0C 4E 85 F1 | 	sub	fp, #12
18a20     E0 4F BF FD | 	call	#_converttoint
18a24     FD 26 02 F6 | 	mov	local01, result1
18a28     A7 12 02 F6 | 	mov	arg01, fp
18a2c     D4 4F BF FD | 	call	#_converttoint
18a30     FD 14 02 F6 | 	mov	arg02, result1
18a34     13 13 02 F6 | 	mov	arg01, local01
18a38     D4 F2 B0 FD | 	call	#__system___pinwrite
18a3c     A7 F0 03 F6 | 	mov	ptra, fp
18a40     B2 00 A0 FD | 	call	#popregs_
18a44                 | _do_pinwrite_ret
18a44     2D 00 64 FD | 	ret
18a48                 | 
18a48                 | ' 
18a48                 | ' '-------------------- play
18a48                 | ' 
18a48                 | ' sub do_play
18a48                 | _do_play
18a48     08 4A 05 F6 | 	mov	COUNT_, #8
18a4c     A8 00 A0 FD | 	call	#pushregs_
18a50     7C F0 07 F1 | 	add	ptra, #124
18a54     68 4E 05 F1 | 	add	fp, #104
18a58     77 CC A1 FF 
18a5c     A7 7C 6B FC | 	wrlong	##1134096318, fp
18a60                 | ' speed_coeff=305.873
18a60                 | ' 
18a60                 | ' for i=0 to 8 : params(i)=-2.0 : next i
18a60     64 4E 85 F1 | 	sub	fp, #100
18a64     A7 00 68 FC | 	wrlong	#0, fp
18a68     97 18 48 FB | 	callpa	#(@LR__2001-@LR__2000)>>2,fcache_load_ptr_
18a6c                 | LR__2000
18a6c     A7 16 02 FB | 	rdlong	arg03, fp
18a70     02 16 66 F0 | 	shl	arg03, #2
18a74     34 4E 05 F1 | 	add	fp, #52
18a78     A7 16 02 F1 | 	add	arg03, fp
18a7c     00 00 E0 FF 
18a80     0B 01 68 FC | 	wrlong	##-1073741824, arg03
18a84     34 4E 85 F1 | 	sub	fp, #52
18a88     A7 26 02 FB | 	rdlong	local01, fp
18a8c     01 26 06 F1 | 	add	local01, #1
18a90     A7 26 62 FC | 	wrlong	local01, fp
18a94     09 26 56 F2 | 	cmps	local01, #9 wc
18a98     D0 FF 9F CD |  if_b	jmp	#LR__2000
18a9c                 | LR__2001
18a9c     04 4E 85 F1 | 	sub	fp, #4
18aa0     4A 00 00 FF 
18aa4     80 E4 05 F1 | 	add	objptr, ##38016
18aa8     F2 28 02 FB | 	rdlong	local02, objptr
18aac     14 2B 02 F6 | 	mov	local03, local02
18ab0     01 2A 66 F0 | 	shl	local03, #1
18ab4     14 2B 02 F1 | 	add	local03, local02
18ab8     02 2A 66 F0 | 	shl	local03, #2
18abc     03 00 00 FF 
18ac0     04 E4 85 F1 | 	sub	objptr, ##1540
18ac4     F2 2A 02 F1 | 	add	local03, objptr
18ac8     15 2D 02 FB | 	rdlong	local04, local03
18acc     A7 2C 62 FC | 	wrlong	local04, fp
18ad0                 | ' numpar=compiledline(lineptr_e).result.uresult
18ad0                 | ' for i=numpar to 1 step -1 
18ad0     04 4E 05 F1 | 	add	fp, #4
18ad4     A7 2C 62 FC | 	wrlong	local04, fp
18ad8     04 4E 85 F1 | 	sub	fp, #4
18adc     47 00 00 FF 
18ae0     7C E4 85 F1 | 	sub	objptr, ##36476
18ae4                 | LR__2002
18ae4     38 4D BF FD | 	call	#_pop
18ae8     5C 4E 05 F1 | 	add	fp, #92
18aec     A7 FA 61 FC | 	wrlong	result1, fp
18af0     04 4E 05 F1 | 	add	fp, #4
18af4     A7 FC 61 FC | 	wrlong	result2, fp
18af8     04 4E 05 F1 | 	add	fp, #4
18afc     A7 FE 61 FC | 	wrlong	result3, fp
18b00     60 4E 85 F1 | 	sub	fp, #96
18b04     A7 2A 02 FB | 	rdlong	local03, fp
18b08     01 2A 86 F1 | 	sub	local03, #1
18b0c     02 2A 66 F0 | 	shl	local03, #2
18b10     34 4E 05 F1 | 	add	fp, #52
18b14     A7 2A 02 F1 | 	add	local03, fp
18b18     24 4E 05 F1 | 	add	fp, #36
18b1c     A7 2E 02 F6 | 	mov	local05, fp
18b20     17 13 02 F6 | 	mov	arg01, local05
18b24     5C 4E 85 F1 | 	sub	fp, #92
18b28     94 4F BF FD | 	call	#_converttofloat
18b2c     15 FB 61 FC | 	wrlong	result1, local03
18b30     04 4E 05 F1 | 	add	fp, #4
18b34     A7 26 02 FB | 	rdlong	local01, fp
18b38     01 26 86 F1 | 	sub	local01, #1
18b3c     A7 26 62 FC | 	wrlong	local01, fp
18b40     04 4E 85 F1 | 	sub	fp, #4
18b44     01 26 56 F2 | 	cmps	local01, #1 wc
18b48     98 FF 9F 3D |  if_ae	jmp	#LR__2002
18b4c                 | ' 
18b4c                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
18b4c     38 4E 05 F1 | 	add	fp, #56
18b50     A7 12 02 FB | 	rdlong	arg01, fp
18b54     38 4E 85 F1 | 	sub	fp, #56
18b58     00 14 06 F6 | 	mov	arg02, #0
18b5c     01 16 06 F6 | 	mov	arg03, #1
18b60     A8 22 B1 FD | 	call	#__system___float_cmp
18b64     00 FA 55 F2 | 	cmps	result1, #0 wc
18b68     0C 4E 05 C1 |  if_b	add	fp, #12
18b6c     A7 00 68 CC |  if_b	wrlong	#0, fp
18b70     0C 4E 85 C1 |  if_b	sub	fp, #12
18b74     2C 00 90 CD |  if_b	jmp	#LR__2003
18b78     38 4E 05 F1 | 	add	fp, #56
18b7c     A7 12 02 FB | 	rdlong	arg01, fp
18b80     38 4E 85 F1 | 	sub	fp, #56
18b84     01 14 06 F6 | 	mov	arg02, #1
18b88     14 23 B1 FD | 	call	#__system___float_tointeger
18b8c     FD 26 52 F6 | 	abs	local01, result1 wc
18b90     07 26 06 F5 | 	and	local01, #7
18b94     13 27 82 F6 | 	negc	local01, local01
18b98     0C 4E 05 F1 | 	add	fp, #12
18b9c     A7 26 62 FC | 	wrlong	local01, fp
18ba0     0C 4E 85 F1 | 	sub	fp, #12
18ba4                 | LR__2003
18ba4                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
18ba4     3C 4E 05 F1 | 	add	fp, #60
18ba8     A7 12 02 FB | 	rdlong	arg01, fp
18bac     3C 4E 85 F1 | 	sub	fp, #60
18bb0     00 14 06 F6 | 	mov	arg02, #0
18bb4     01 16 06 F6 | 	mov	arg03, #1
18bb8     50 22 B1 FD | 	call	#__system___float_cmp
18bbc     00 FA 55 F2 | 	cmps	result1, #0 wc
18bc0     40 00 90 3D |  if_ae	jmp	#LR__2004
18bc4     0C 4E 05 F1 | 	add	fp, #12
18bc8     A7 28 02 FB | 	rdlong	local02, fp
18bcc     14 2B 02 F6 | 	mov	local03, local02
18bd0     01 2A 66 F0 | 	shl	local03, #1
18bd4     14 2B 02 F1 | 	add	local03, local02
18bd8     03 2A 66 F0 | 	shl	local03, #3
18bdc     14 00 00 FF 
18be0     38 E5 05 F1 | 	add	objptr, ##10552
18be4     F2 2A 02 F1 | 	add	local03, objptr
18be8     15 31 02 FB | 	rdlong	local06, local03
18bec     60 4E 05 F1 | 	add	fp, #96
18bf0     A7 30 62 FC | 	wrlong	local06, fp
18bf4     6C 4E 85 F1 | 	sub	fp, #108
18bf8     14 00 00 FF 
18bfc     38 E5 85 F1 | 	sub	objptr, ##10552
18c00     44 00 90 FD | 	jmp	#LR__2005
18c04                 | LR__2004
18c04     3C 4E 05 F1 | 	add	fp, #60
18c08     A7 2C 02 FB | 	rdlong	local04, fp
18c0c     30 4E 05 F1 | 	add	fp, #48
18c10     A7 2C 62 FC | 	wrlong	local04, fp
18c14     60 4E 85 F1 | 	sub	fp, #96
18c18     A7 28 02 FB | 	rdlong	local02, fp
18c1c     14 2B 02 F6 | 	mov	local03, local02
18c20     01 2A 66 F0 | 	shl	local03, #1
18c24     14 2B 02 F1 | 	add	local03, local02
18c28     03 2A 66 F0 | 	shl	local03, #3
18c2c     14 00 00 FF 
18c30     38 E5 05 F1 | 	add	objptr, ##10552
18c34     F2 2A 02 F1 | 	add	local03, objptr
18c38     0C 4E 85 F1 | 	sub	fp, #12
18c3c     15 2D 62 FC | 	wrlong	local04, local03
18c40     14 00 00 FF 
18c44     38 E5 85 F1 | 	sub	objptr, ##10552
18c48                 | LR__2005
18c48                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
18c48     40 4E 05 F1 | 	add	fp, #64
18c4c     A7 12 02 FB | 	rdlong	arg01, fp
18c50     40 4E 85 F1 | 	sub	fp, #64
18c54     00 14 06 F6 | 	mov	arg02, #0
18c58     01 16 06 F6 | 	mov	arg03, #1
18c5c     AC 21 B1 FD | 	call	#__system___float_cmp
18c60     00 FA 55 F2 | 	cmps	result1, #0 wc
18c64     24 00 90 CD |  if_b	jmp	#LR__2006
18c68     40 4E 05 F1 | 	add	fp, #64
18c6c     A7 12 02 FB | 	rdlong	arg01, fp
18c70     40 4E 85 F1 | 	sub	fp, #64
18c74     20 0E 23 FF 
18c78     00 14 06 F6 | 	mov	arg02, ##1176256512
18c7c     01 16 66 F6 | 	neg	arg03, #1
18c80     88 21 B1 FD | 	call	#__system___float_cmp
18c84     01 FA 55 F2 | 	cmps	result1, #1 wc
18c88     48 00 90 CD |  if_b	jmp	#LR__2007
18c8c                 | LR__2006
18c8c     0C 4E 05 F1 | 	add	fp, #12
18c90     A7 2A 02 FB | 	rdlong	local03, fp
18c94     15 33 02 F6 | 	mov	local07, local03
18c98     01 32 66 F0 | 	shl	local07, #1
18c9c     15 33 02 F1 | 	add	local07, local03
18ca0     03 32 66 F0 | 	shl	local07, #3
18ca4     14 00 00 FF 
18ca8     38 E5 05 F1 | 	add	objptr, ##10552
18cac     F2 32 02 F1 | 	add	local07, objptr
18cb0     06 32 06 F1 | 	add	local07, #6
18cb4     19 2F E2 FA | 	rdword	local05, local07
18cb8     17 2D 32 F9 | 	getword	local04, local05, #0
18cbc     1C 4E 05 F1 | 	add	fp, #28
18cc0     A7 2C 62 FC | 	wrlong	local04, fp
18cc4     28 4E 85 F1 | 	sub	fp, #40
18cc8     14 00 00 FF 
18ccc     38 E5 85 F1 | 	sub	objptr, ##10552
18cd0     54 00 90 FD | 	jmp	#LR__2008
18cd4                 | LR__2007
18cd4     40 4E 05 F1 | 	add	fp, #64
18cd8     A7 12 02 FB | 	rdlong	arg01, fp
18cdc     40 4E 85 F1 | 	sub	fp, #64
18ce0     01 14 06 F6 | 	mov	arg02, #1
18ce4     B8 21 B1 FD | 	call	#__system___float_tointeger
18ce8     28 4E 05 F1 | 	add	fp, #40
18cec     A7 FA 61 FC | 	wrlong	result1, fp
18cf0     1C 4E 85 F1 | 	sub	fp, #28
18cf4     A7 28 02 FB | 	rdlong	local02, fp
18cf8     14 2B 02 F6 | 	mov	local03, local02
18cfc     01 2A 66 F0 | 	shl	local03, #1
18d00     14 2B 02 F1 | 	add	local03, local02
18d04     03 2A 66 F0 | 	shl	local03, #3
18d08     14 00 00 FF 
18d0c     38 E5 05 F1 | 	add	objptr, ##10552
18d10     F2 2A 02 F1 | 	add	local03, objptr
18d14     0C 4E 85 F1 | 	sub	fp, #12
18d18     06 2A 06 F1 | 	add	local03, #6
18d1c     15 FB 51 FC | 	wrword	result1, local03
18d20     14 00 00 FF 
18d24     38 E5 85 F1 | 	sub	objptr, ##10552
18d28                 | LR__2008
18d28                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
18d28     44 4E 05 F1 | 	add	fp, #68
18d2c     A7 12 02 FB | 	rdlong	arg01, fp
18d30     44 4E 85 F1 | 	sub	fp, #68
18d34     00 14 06 F6 | 	mov	arg02, #0
18d38     01 16 06 F6 | 	mov	arg03, #1
18d3c     CC 20 B1 FD | 	call	#__system___float_cmp
18d40     00 FA 55 F2 | 	cmps	result1, #0 wc
18d44     24 00 90 CD |  if_b	jmp	#LR__2009
18d48     44 4E 05 F1 | 	add	fp, #68
18d4c     A7 12 02 FB | 	rdlong	arg01, fp
18d50     44 4E 85 F1 | 	sub	fp, #68
18d54     89 C1 20 FF 
18d58     6F 14 06 F6 | 	mov	arg02, ##1099108975
18d5c     01 16 66 F6 | 	neg	arg03, #1
18d60     A8 20 B1 FD | 	call	#__system___float_cmp
18d64     01 FA 55 F2 | 	cmps	result1, #1 wc
18d68     44 00 90 CD |  if_b	jmp	#LR__2010
18d6c                 | LR__2009
18d6c     0C 4E 05 F1 | 	add	fp, #12
18d70     A7 28 02 FB | 	rdlong	local02, fp
18d74     14 2B 02 F6 | 	mov	local03, local02
18d78     01 2A 66 F0 | 	shl	local03, #1
18d7c     14 2B 02 F1 | 	add	local03, local02
18d80     03 2A 66 F0 | 	shl	local03, #3
18d84     14 00 00 FF 
18d88     38 E5 05 F1 | 	add	objptr, ##10552
18d8c     F2 2A 02 F1 | 	add	local03, objptr
18d90     0C 2A 06 F1 | 	add	local03, #12
18d94     15 31 02 FB | 	rdlong	local06, local03
18d98     68 4E 05 F1 | 	add	fp, #104
18d9c     A7 30 62 FC | 	wrlong	local06, fp
18da0     74 4E 85 F1 | 	sub	fp, #116
18da4     14 00 00 FF 
18da8     38 E5 85 F1 | 	sub	objptr, ##10552
18dac     48 00 90 FD | 	jmp	#LR__2011
18db0                 | LR__2010
18db0     44 4E 05 F1 | 	add	fp, #68
18db4     A7 2C 02 FB | 	rdlong	local04, fp
18db8     30 4E 05 F1 | 	add	fp, #48
18dbc     A7 2C 62 FC | 	wrlong	local04, fp
18dc0     68 4E 85 F1 | 	sub	fp, #104
18dc4     A7 28 02 FB | 	rdlong	local02, fp
18dc8     14 2B 02 F6 | 	mov	local03, local02
18dcc     01 2A 66 F0 | 	shl	local03, #1
18dd0     14 2B 02 F1 | 	add	local03, local02
18dd4     03 2A 66 F0 | 	shl	local03, #3
18dd8     14 00 00 FF 
18ddc     38 E5 05 F1 | 	add	objptr, ##10552
18de0     F2 2A 02 F1 | 	add	local03, objptr
18de4     0C 4E 85 F1 | 	sub	fp, #12
18de8     0C 2A 06 F1 | 	add	local03, #12
18dec     15 2D 62 FC | 	wrlong	local04, local03
18df0     14 00 00 FF 
18df4     38 E5 85 F1 | 	sub	objptr, ##10552
18df8                 | LR__2011
18df8                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
18df8     48 4E 05 F1 | 	add	fp, #72
18dfc     A7 12 02 FB | 	rdlong	arg01, fp
18e00     48 4E 85 F1 | 	sub	fp, #72
18e04     00 14 06 F6 | 	mov	arg02, #0
18e08     01 16 06 F6 | 	mov	arg03, #1
18e0c     FC 1F B1 FD | 	call	#__system___float_cmp
18e10     00 FA 55 F2 | 	cmps	result1, #0 wc
18e14     24 00 90 CD |  if_b	jmp	#LR__2012
18e18     48 4E 05 F1 | 	add	fp, #72
18e1c     A7 12 02 FB | 	rdlong	arg01, fp
18e20     48 4E 85 F1 | 	sub	fp, #72
18e24     00 00 21 FF 
18e28     00 14 06 F6 | 	mov	arg02, ##1107296256
18e2c     01 16 66 F6 | 	neg	arg03, #1
18e30     D8 1F B1 FD | 	call	#__system___float_cmp
18e34     01 FA 55 F2 | 	cmps	result1, #1 wc
18e38     48 00 90 CD |  if_b	jmp	#LR__2013
18e3c                 | LR__2012
18e3c     0C 4E 05 F1 | 	add	fp, #12
18e40     A7 2A 02 FB | 	rdlong	local03, fp
18e44     15 33 02 F6 | 	mov	local07, local03
18e48     01 32 66 F0 | 	shl	local07, #1
18e4c     15 33 02 F1 | 	add	local07, local03
18e50     03 32 66 F0 | 	shl	local07, #3
18e54     14 00 00 FF 
18e58     38 E5 05 F1 | 	add	objptr, ##10552
18e5c     F2 32 02 F1 | 	add	local07, objptr
18e60     04 32 06 F1 | 	add	local07, #4
18e64     19 2F C2 FA | 	rdbyte	local05, local07
18e68     17 2D E2 F8 | 	getbyte	local04, local05, #0
18e6c     14 4E 05 F1 | 	add	fp, #20
18e70     A7 2C 62 FC | 	wrlong	local04, fp
18e74     20 4E 85 F1 | 	sub	fp, #32
18e78     14 00 00 FF 
18e7c     38 E5 85 F1 | 	sub	objptr, ##10552
18e80     54 00 90 FD | 	jmp	#LR__2014
18e84                 | LR__2013
18e84     48 4E 05 F1 | 	add	fp, #72
18e88     A7 12 02 FB | 	rdlong	arg01, fp
18e8c     48 4E 85 F1 | 	sub	fp, #72
18e90     01 14 06 F6 | 	mov	arg02, #1
18e94     08 20 B1 FD | 	call	#__system___float_tointeger
18e98     20 4E 05 F1 | 	add	fp, #32
18e9c     A7 FA 61 FC | 	wrlong	result1, fp
18ea0     14 4E 85 F1 | 	sub	fp, #20
18ea4     A7 28 02 FB | 	rdlong	local02, fp
18ea8     14 2B 02 F6 | 	mov	local03, local02
18eac     01 2A 66 F0 | 	shl	local03, #1
18eb0     14 2B 02 F1 | 	add	local03, local02
18eb4     03 2A 66 F0 | 	shl	local03, #3
18eb8     14 00 00 FF 
18ebc     38 E5 05 F1 | 	add	objptr, ##10552
18ec0     F2 2A 02 F1 | 	add	local03, objptr
18ec4     0C 4E 85 F1 | 	sub	fp, #12
18ec8     04 2A 06 F1 | 	add	local03, #4
18ecc     15 FB 41 FC | 	wrbyte	result1, local03
18ed0     14 00 00 FF 
18ed4     38 E5 85 F1 | 	sub	objptr, ##10552
18ed8                 | LR__2014
18ed8                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
18ed8     4C 4E 05 F1 | 	add	fp, #76
18edc     A7 12 02 FB | 	rdlong	arg01, fp
18ee0     4C 4E 85 F1 | 	sub	fp, #76
18ee4     00 14 06 F6 | 	mov	arg02, #0
18ee8     01 16 06 F6 | 	mov	arg03, #1
18eec     1C 1F B1 FD | 	call	#__system___float_cmp
18ef0     00 FA 55 F2 | 	cmps	result1, #0 wc
18ef4     24 00 90 CD |  if_b	jmp	#LR__2015
18ef8     4C 4E 05 F1 | 	add	fp, #76
18efc     A7 12 02 FB | 	rdlong	arg01, fp
18f00     4C 4E 85 F1 | 	sub	fp, #76
18f04     00 80 20 FF 
18f08     00 14 06 F6 | 	mov	arg02, ##1090519040
18f0c     01 16 66 F6 | 	neg	arg03, #1
18f10     F8 1E B1 FD | 	call	#__system___float_cmp
18f14     01 FA 55 F2 | 	cmps	result1, #1 wc
18f18     48 00 90 CD |  if_b	jmp	#LR__2016
18f1c                 | LR__2015
18f1c     0C 4E 05 F1 | 	add	fp, #12
18f20     A7 2A 02 FB | 	rdlong	local03, fp
18f24     15 33 02 F6 | 	mov	local07, local03
18f28     01 32 66 F0 | 	shl	local07, #1
18f2c     15 33 02 F1 | 	add	local07, local03
18f30     03 32 66 F0 | 	shl	local07, #3
18f34     14 00 00 FF 
18f38     38 E5 05 F1 | 	add	objptr, ##10552
18f3c     F2 32 02 F1 | 	add	local07, objptr
18f40     05 32 06 F1 | 	add	local07, #5
18f44     19 2F C2 FA | 	rdbyte	local05, local07
18f48     17 2D E2 F8 | 	getbyte	local04, local05, #0
18f4c     18 4E 05 F1 | 	add	fp, #24
18f50     A7 2C 62 FC | 	wrlong	local04, fp
18f54     24 4E 85 F1 | 	sub	fp, #36
18f58     14 00 00 FF 
18f5c     38 E5 85 F1 | 	sub	objptr, ##10552
18f60     54 00 90 FD | 	jmp	#LR__2017
18f64                 | LR__2016
18f64     4C 4E 05 F1 | 	add	fp, #76
18f68     A7 12 02 FB | 	rdlong	arg01, fp
18f6c     4C 4E 85 F1 | 	sub	fp, #76
18f70     01 14 06 F6 | 	mov	arg02, #1
18f74     28 1F B1 FD | 	call	#__system___float_tointeger
18f78     24 4E 05 F1 | 	add	fp, #36
18f7c     A7 FA 61 FC | 	wrlong	result1, fp
18f80     18 4E 85 F1 | 	sub	fp, #24
18f84     A7 28 02 FB | 	rdlong	local02, fp
18f88     14 2B 02 F6 | 	mov	local03, local02
18f8c     01 2A 66 F0 | 	shl	local03, #1
18f90     14 2B 02 F1 | 	add	local03, local02
18f94     03 2A 66 F0 | 	shl	local03, #3
18f98     14 00 00 FF 
18f9c     38 E5 05 F1 | 	add	objptr, ##10552
18fa0     F2 2A 02 F1 | 	add	local03, objptr
18fa4     0C 4E 85 F1 | 	sub	fp, #12
18fa8     05 2A 06 F1 | 	add	local03, #5
18fac     15 FB 41 FC | 	wrbyte	result1, local03
18fb0     14 00 00 FF 
18fb4     38 E5 85 F1 | 	sub	objptr, ##10552
18fb8                 | LR__2017
18fb8                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
18fb8     50 4E 05 F1 | 	add	fp, #80
18fbc     A7 12 02 FB | 	rdlong	arg01, fp
18fc0     50 4E 85 F1 | 	sub	fp, #80
18fc4     00 14 06 F6 | 	mov	arg02, #0
18fc8     01 16 06 F6 | 	mov	arg03, #1
18fcc     3C 1E B1 FD | 	call	#__system___float_cmp
18fd0     00 FA 55 F2 | 	cmps	result1, #0 wc
18fd4     24 00 90 CD |  if_b	jmp	#LR__2018
18fd8     50 4E 05 F1 | 	add	fp, #80
18fdc     A7 12 02 FB | 	rdlong	arg01, fp
18fe0     50 4E 85 F1 | 	sub	fp, #80
18fe4     00 3D 22 FF 
18fe8     00 14 06 F6 | 	mov	arg02, ##1148846080
18fec     01 16 66 F6 | 	neg	arg03, #1
18ff0     18 1E B1 FD | 	call	#__system___float_cmp
18ff4     01 FA 55 F2 | 	cmps	result1, #1 wc
18ff8     44 00 90 CD |  if_b	jmp	#LR__2019
18ffc                 | LR__2018
18ffc     0C 4E 05 F1 | 	add	fp, #12
19000     A7 28 02 FB | 	rdlong	local02, fp
19004     14 2B 02 F6 | 	mov	local03, local02
19008     01 2A 66 F0 | 	shl	local03, #1
1900c     14 2B 02 F1 | 	add	local03, local02
19010     03 2A 66 F0 | 	shl	local03, #3
19014     14 00 00 FF 
19018     38 E5 05 F1 | 	add	objptr, ##10552
1901c     F2 2A 02 F1 | 	add	local03, objptr
19020     08 2A 06 F1 | 	add	local03, #8
19024     15 31 02 FB | 	rdlong	local06, local03
19028     6C 4E 05 F1 | 	add	fp, #108
1902c     A7 30 62 FC | 	wrlong	local06, fp
19030     78 4E 85 F1 | 	sub	fp, #120
19034     14 00 00 FF 
19038     38 E5 85 F1 | 	sub	objptr, ##10552
1903c     48 00 90 FD | 	jmp	#LR__2020
19040                 | LR__2019
19040     50 4E 05 F1 | 	add	fp, #80
19044     A7 30 02 FB | 	rdlong	local06, fp
19048     28 4E 05 F1 | 	add	fp, #40
1904c     A7 30 62 FC | 	wrlong	local06, fp
19050     6C 4E 85 F1 | 	sub	fp, #108
19054     A7 28 02 FB | 	rdlong	local02, fp
19058     14 2B 02 F6 | 	mov	local03, local02
1905c     01 2A 66 F0 | 	shl	local03, #1
19060     14 2B 02 F1 | 	add	local03, local02
19064     03 2A 66 F0 | 	shl	local03, #3
19068     14 00 00 FF 
1906c     38 E5 05 F1 | 	add	objptr, ##10552
19070     F2 2A 02 F1 | 	add	local03, objptr
19074     0C 4E 85 F1 | 	sub	fp, #12
19078     08 2A 06 F1 | 	add	local03, #8
1907c     15 31 62 FC | 	wrlong	local06, local03
19080     14 00 00 FF 
19084     38 E5 85 F1 | 	sub	objptr, ##10552
19088                 | LR__2020
19088                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
19088     54 4E 05 F1 | 	add	fp, #84
1908c     A7 12 02 FB | 	rdlong	arg01, fp
19090     54 4E 85 F1 | 	sub	fp, #84
19094     00 C0 5F FF 
19098     00 14 06 F6 | 	mov	arg02, ##-1082130432
1909c     01 16 06 F6 | 	mov	arg03, #1
190a0     68 1D B1 FD | 	call	#__system___float_cmp
190a4     00 FA 55 F2 | 	cmps	result1, #0 wc
190a8     24 00 90 CD |  if_b	jmp	#LR__2021
190ac     54 4E 05 F1 | 	add	fp, #84
190b0     A7 12 02 FB | 	rdlong	arg01, fp
190b4     54 4E 85 F1 | 	sub	fp, #84
190b8     00 C0 1F FF 
190bc     00 14 06 F6 | 	mov	arg02, ##1065353216
190c0     01 16 66 F6 | 	neg	arg03, #1
190c4     44 1D B1 FD | 	call	#__system___float_cmp
190c8     01 FA 55 F2 | 	cmps	result1, #1 wc
190cc     44 00 90 CD |  if_b	jmp	#LR__2022
190d0                 | LR__2021
190d0     0C 4E 05 F1 | 	add	fp, #12
190d4     A7 28 02 FB | 	rdlong	local02, fp
190d8     14 2B 02 F6 | 	mov	local03, local02
190dc     01 2A 66 F0 | 	shl	local03, #1
190e0     14 2B 02 F1 | 	add	local03, local02
190e4     03 2A 66 F0 | 	shl	local03, #3
190e8     14 00 00 FF 
190ec     38 E5 05 F1 | 	add	objptr, ##10552
190f0     F2 2A 02 F1 | 	add	local03, objptr
190f4     10 2A 06 F1 | 	add	local03, #16
190f8     15 31 02 FB | 	rdlong	local06, local03
190fc     64 4E 05 F1 | 	add	fp, #100
19100     A7 30 62 FC | 	wrlong	local06, fp
19104     70 4E 85 F1 | 	sub	fp, #112
19108     14 00 00 FF 
1910c     38 E5 85 F1 | 	sub	objptr, ##10552
19110     48 00 90 FD | 	jmp	#LR__2023
19114                 | LR__2022
19114     54 4E 05 F1 | 	add	fp, #84
19118     A7 30 02 FB | 	rdlong	local06, fp
1911c     1C 4E 05 F1 | 	add	fp, #28
19120     A7 30 62 FC | 	wrlong	local06, fp
19124     64 4E 85 F1 | 	sub	fp, #100
19128     A7 28 02 FB | 	rdlong	local02, fp
1912c     14 2B 02 F6 | 	mov	local03, local02
19130     01 2A 66 F0 | 	shl	local03, #1
19134     14 2B 02 F1 | 	add	local03, local02
19138     03 2A 66 F0 | 	shl	local03, #3
1913c     14 00 00 FF 
19140     38 E5 05 F1 | 	add	objptr, ##10552
19144     F2 2A 02 F1 | 	add	local03, objptr
19148     0C 4E 85 F1 | 	sub	fp, #12
1914c     10 2A 06 F1 | 	add	local03, #16
19150     15 31 62 FC | 	wrlong	local06, local03
19154     14 00 00 FF 
19158     38 E5 85 F1 | 	sub	objptr, ##10552
1915c                 | LR__2023
1915c                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
1915c     58 4E 05 F1 | 	add	fp, #88
19160     A7 12 02 FB | 	rdlong	arg01, fp
19164     58 4E 85 F1 | 	sub	fp, #88
19168     00 14 06 F6 | 	mov	arg02, #0
1916c     01 16 06 F6 | 	mov	arg03, #1
19170     98 1C B1 FD | 	call	#__system___float_cmp
19174     00 FA 55 F2 | 	cmps	result1, #0 wc
19178     24 00 90 CD |  if_b	jmp	#LR__2024
1917c     58 4E 05 F1 | 	add	fp, #88
19180     A7 12 02 FB | 	rdlong	arg01, fp
19184     58 4E 85 F1 | 	sub	fp, #88
19188     80 BF 21 FF 
1918c     00 14 06 F6 | 	mov	arg02, ##1132396544
19190     01 16 66 F6 | 	neg	arg03, #1
19194     74 1C B1 FD | 	call	#__system___float_cmp
19198     01 FA 55 F2 | 	cmps	result1, #1 wc
1919c     44 00 90 CD |  if_b	jmp	#LR__2025
191a0                 | LR__2024
191a0     0C 4E 05 F1 | 	add	fp, #12
191a4     A7 2A 02 FB | 	rdlong	local03, fp
191a8     15 33 02 F6 | 	mov	local07, local03
191ac     01 32 66 F0 | 	shl	local07, #1
191b0     15 33 02 F1 | 	add	local07, local03
191b4     03 32 66 F0 | 	shl	local07, #3
191b8     14 00 00 FF 
191bc     38 E5 05 F1 | 	add	objptr, ##10552
191c0     F2 32 02 F1 | 	add	local07, objptr
191c4     14 32 06 F1 | 	add	local07, #20
191c8     19 2D E2 FA | 	rdword	local04, local07
191cc     20 4E 05 F1 | 	add	fp, #32
191d0     A7 2C 62 FC | 	wrlong	local04, fp
191d4     2C 4E 85 F1 | 	sub	fp, #44
191d8     14 00 00 FF 
191dc     38 E5 85 F1 | 	sub	objptr, ##10552
191e0     54 00 90 FD | 	jmp	#LR__2026
191e4                 | LR__2025
191e4     58 4E 05 F1 | 	add	fp, #88
191e8     A7 12 02 FB | 	rdlong	arg01, fp
191ec     58 4E 85 F1 | 	sub	fp, #88
191f0     01 14 06 F6 | 	mov	arg02, #1
191f4     A8 1C B1 FD | 	call	#__system___float_tointeger
191f8     2C 4E 05 F1 | 	add	fp, #44
191fc     A7 FA 61 FC | 	wrlong	result1, fp
19200     20 4E 85 F1 | 	sub	fp, #32
19204     A7 28 02 FB | 	rdlong	local02, fp
19208     14 2B 02 F6 | 	mov	local03, local02
1920c     01 2A 66 F0 | 	shl	local03, #1
19210     14 2B 02 F1 | 	add	local03, local02
19214     03 2A 66 F0 | 	shl	local03, #3
19218     14 00 00 FF 
1921c     38 E5 05 F1 | 	add	objptr, ##10552
19220     F2 2A 02 F1 | 	add	local03, objptr
19224     0C 4E 85 F1 | 	sub	fp, #12
19228     14 2A 06 F1 | 	add	local03, #20
1922c     15 FB 51 FC | 	wrword	result1, local03
19230     14 00 00 FF 
19234     38 E5 85 F1 | 	sub	objptr, ##10552
19238                 | LR__2026
19238     6C 4E 05 F1 | 	add	fp, #108
1923c     A7 14 02 FB | 	rdlong	arg02, fp
19240     6C 4E 85 F1 | 	sub	fp, #108
19244     FC 16 20 FF 
19248     54 12 06 F6 | 	mov	arg01, ##1076754516
1924c     5C 27 B1 FD | 	call	#__system____builtin_logbase
19250     FD 2C 02 F6 | 	mov	local04, result1
19254     1E 14 C6 F9 | 	decod	arg02, #30
19258     FC 16 20 FF 
1925c     54 12 06 F6 | 	mov	arg01, ##1076754516
19260     48 27 B1 FD | 	call	#__system____builtin_logbase
19264     FD 14 02 F6 | 	mov	arg02, result1
19268     16 13 02 F6 | 	mov	arg01, local04
1926c     6C 19 B1 FD | 	call	#__system___float_div
19270     FD 12 02 F6 | 	mov	arg01, result1
19274     00 14 06 F6 | 	mov	arg02, #0
19278     24 1C B1 FD | 	call	#__system___float_tointeger
1927c     30 4E 05 F1 | 	add	fp, #48
19280     A7 FA 61 FC | 	wrlong	result1, fp
19284     1E 2C C6 F9 | 	decod	local04, #30
19288     FD 12 02 F6 | 	mov	arg01, result1
1928c     30 4E 85 F1 | 	sub	fp, #48
19290     06 12 06 F1 | 	add	arg01, #6
19294     09 13 52 F6 | 	abs	arg01, arg01 wc
19298     1F 34 C6 C9 |  if_b	decod	local08, #31
1929c     00 34 06 36 |  if_ae	mov	local08, #0
192a0     30 13 B1 FD | 	call	#__system___float_fromuns
192a4     1A FB 61 F5 | 	xor	result1, local08
192a8     FD 14 02 F6 | 	mov	arg02, result1
192ac     16 13 02 F6 | 	mov	arg01, local04
192b0     30 26 B1 FD | 	call	#__system____builtin_powf
192b4     FD 12 02 F6 | 	mov	arg01, result1
192b8     01 14 06 F6 | 	mov	arg02, #1
192bc     E0 1B B1 FD | 	call	#__system___float_tointeger
192c0     10 4E 05 F1 | 	add	fp, #16
192c4     A7 FA 61 FC | 	wrlong	result1, fp
192c8                 | ' skip=round(2^(lfreq+6))
192c8                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
192c8     10 4E 85 F1 | 	sub	fp, #16
192cc     40 00 00 FF 
192d0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
192d4     30 00 90 CD |  if_b	jmp	#LR__2027
192d8     10 4E 05 F1 | 	add	fp, #16
192dc     A7 26 02 FB | 	rdlong	local01, fp
192e0     13 2D 52 F6 | 	abs	local04, local01 wc
192e4     0F 2C 46 F0 | 	shr	local04, #15
192e8     16 2D 82 F6 | 	negc	local04, local04
192ec     0C 4E 85 F1 | 	sub	fp, #12
192f0     A7 2C 62 FC | 	wrlong	local04, fp
192f4     0C 4E 05 F1 | 	add	fp, #12
192f8     40 00 80 FF 
192fc     A7 00 68 FC | 	wrlong	##32768, fp
19300     10 4E 85 F1 | 	sub	fp, #16
19304     0C 00 90 FD | 	jmp	#LR__2028
19308                 | LR__2027
19308     04 4E 05 F1 | 	add	fp, #4
1930c     A7 02 68 FC | 	wrlong	#1, fp
19310     04 4E 85 F1 | 	sub	fp, #4
19314                 | LR__2028
19314     6C 4E 05 F1 | 	add	fp, #108
19318     A7 14 02 FB | 	rdlong	arg02, fp
1931c     6C 4E 85 F1 | 	sub	fp, #108
19320     3E 2C 25 FF 
19324     3C 12 06 F6 | 	mov	arg01, ##1247312956
19328     B0 18 B1 FD | 	call	#__system___float_div
1932c     FD 2C 02 F6 | 	mov	local04, result1
19330     04 4E 05 F1 | 	add	fp, #4
19334     A7 12 02 FB | 	rdlong	arg01, fp
19338     04 4E 85 F1 | 	sub	fp, #4
1933c     09 13 52 F6 | 	abs	arg01, arg01 wc
19340     1F 34 C6 C9 |  if_b	decod	local08, #31
19344     00 34 06 36 |  if_ae	mov	local08, #0
19348     88 12 B1 FD | 	call	#__system___float_fromuns
1934c     1A FB 61 F5 | 	xor	result1, local08
19350     FD 26 02 F6 | 	mov	local01, result1
19354     1E 28 C6 F9 | 	decod	local02, #30
19358     0C 12 06 F6 | 	mov	arg01, #12
1935c     30 4E 05 F1 | 	add	fp, #48
19360     A7 30 02 FB | 	rdlong	local06, fp
19364     30 4E 85 F1 | 	sub	fp, #48
19368     18 13 82 F1 | 	sub	arg01, local06
1936c     09 13 52 F6 | 	abs	arg01, arg01 wc
19370     1F 34 C6 C9 |  if_b	decod	local08, #31
19374     00 34 06 36 |  if_ae	mov	local08, #0
19378     58 12 B1 FD | 	call	#__system___float_fromuns
1937c     1A FB 61 F5 | 	xor	result1, local08
19380     FD 14 02 F6 | 	mov	arg02, result1
19384     14 13 02 F6 | 	mov	arg01, local02
19388     58 25 B1 FD | 	call	#__system____builtin_powf
1938c     FD 14 02 F6 | 	mov	arg02, result1
19390     13 13 02 F6 | 	mov	arg01, local01
19394     40 16 B1 FD | 	call	#__system___float_mul
19398     FD 14 02 F6 | 	mov	arg02, result1
1939c     16 13 02 F6 | 	mov	arg01, local04
193a0     38 18 B1 FD | 	call	#__system___float_div
193a4     FD 12 02 F6 | 	mov	arg01, result1
193a8     01 14 06 F6 | 	mov	arg02, #1
193ac     F0 1A B1 FD | 	call	#__system___float_tointeger
193b0     34 4E 05 F1 | 	add	fp, #52
193b4     A7 FA 61 FC | 	wrlong	result1, fp
193b8     3E 2C 25 FF 
193bc     3C 2C 06 F6 | 	mov	local04, ##1247312956
193c0     34 4E 85 F1 | 	sub	fp, #52
193c4     FD 12 52 F6 | 	abs	arg01, result1 wc
193c8     1F 34 C6 C9 |  if_b	decod	local08, #31
193cc     00 34 06 36 |  if_ae	mov	local08, #0
193d0     00 12 B1 FD | 	call	#__system___float_fromuns
193d4     1A FB 61 F5 | 	xor	result1, local08
193d8     FD 14 02 F6 | 	mov	arg02, result1
193dc     16 13 02 F6 | 	mov	arg01, local04
193e0     F8 17 B1 FD | 	call	#__system___float_div
193e4     FD 2C 02 F6 | 	mov	local04, result1
193e8     10 4E 05 F1 | 	add	fp, #16
193ec     A7 12 02 FB | 	rdlong	arg01, fp
193f0     10 4E 85 F1 | 	sub	fp, #16
193f4     09 13 52 F6 | 	abs	arg01, arg01 wc
193f8     1F 34 C6 C9 |  if_b	decod	local08, #31
193fc     00 34 06 36 |  if_ae	mov	local08, #0
19400     D0 11 B1 FD | 	call	#__system___float_fromuns
19404     1A FB 61 F5 | 	xor	result1, local08
19408     FD 12 02 F6 | 	mov	arg01, result1
1940c     00 40 24 FF 
19410     00 14 06 F6 | 	mov	arg02, ##1216348160
19414     C4 17 B1 FD | 	call	#__system___float_div
19418     FD 14 02 F6 | 	mov	arg02, result1
1941c     16 13 02 F6 | 	mov	arg01, local04
19420     B4 15 B1 FD | 	call	#__system___float_mul
19424     52 00 00 FF 
19428     18 E5 05 F1 | 	add	objptr, ##42264
1942c     F2 FA 61 FC | 	wrlong	result1, objptr
19430     52 00 00 FF 
19434     18 E5 85 F1 | 	sub	objptr, ##42264
19438     68 4E 05 F1 | 	add	fp, #104
1943c     A7 12 02 FB | 	rdlong	arg01, fp
19440     10 4E 05 F1 | 	add	fp, #16
19444     A7 14 02 FB | 	rdlong	arg02, fp
19448     78 4E 85 F1 | 	sub	fp, #120
1944c     8C 17 B1 FD | 	call	#__system___float_div
19450     FD 12 02 F6 | 	mov	arg01, result1
19454     01 14 06 F6 | 	mov	arg02, #1
19458     44 1A B1 FD | 	call	#__system___float_tointeger
1945c     FD 2C 02 F6 | 	mov	local04, result1
19460     14 4E 05 F1 | 	add	fp, #20
19464     A7 2C 62 FC | 	wrlong	local04, fp
19468     5C 4E 05 F1 | 	add	fp, #92
1946c     A7 14 02 FB | 	rdlong	arg02, fp
19470     70 4E 85 F1 | 	sub	fp, #112
19474     00 00 23 FF 
19478     00 12 06 F6 | 	mov	arg01, ##1174405120
1947c     58 15 B1 FD | 	call	#__system___float_mul
19480     FD 12 02 F6 | 	mov	arg01, result1
19484     01 14 06 F6 | 	mov	arg02, #1
19488     14 1A B1 FD | 	call	#__system___float_tointeger
1948c     0D 2C C6 F9 | 	decod	local04, #13
19490     FD 2C 02 F1 | 	add	local04, result1
19494     18 4E 05 F1 | 	add	fp, #24
19498     A7 2C 62 FC | 	wrlong	local04, fp
1949c     5C 4E 05 F1 | 	add	fp, #92
194a0     A7 14 02 FB | 	rdlong	arg02, fp
194a4     74 4E 85 F1 | 	sub	fp, #116
194a8     00 3D 22 FF 
194ac     00 12 06 F6 | 	mov	arg01, ##1148846080
194b0     24 15 B1 FD | 	call	#__system___float_mul
194b4     FD 12 02 F6 | 	mov	arg01, result1
194b8     01 14 06 F6 | 	mov	arg02, #1
194bc     E0 19 B1 FD | 	call	#__system___float_tointeger
194c0     1C 4E 05 F1 | 	add	fp, #28
194c4     A7 FA 61 FC | 	wrlong	result1, fp
194c8     37 00 00 FF 
194cc     10 E4 05 F1 | 	add	objptr, ##28176
194d0     F2 2C 02 FB | 	rdlong	local04, objptr
194d4     37 00 00 FF 
194d8     10 E4 85 F1 | 	sub	objptr, ##28176
194dc     10 4E 85 F1 | 	sub	fp, #16
194e0     A7 28 02 FB | 	rdlong	local02, fp
194e4     06 28 66 F0 | 	shl	local02, #6
194e8     14 2D 02 F1 | 	add	local04, local02
194ec     04 4E 85 F1 | 	sub	fp, #4
194f0     A7 2C 62 FC | 	wrlong	local04, fp
194f4                 | ' period=round((3546895/freq)/(i*(2^(12-lfreq))))
194f4                 | ' realfreq=(3546895.0/period)*(skip/(256.0*1024.0)) 
194f4                 | ' speed=round(speed_coeff/slen)
194f4                 | ' ipan=8192+round(8192*pan)
194f4                 | ' ivol=round(1000.0*vol)
194f4                 | ' base2=base+64*channel
194f4                 | ' if wave <32 then 
194f4     18 4E 05 F1 | 	add	fp, #24
194f8     A7 2C 02 FB | 	rdlong	local04, fp
194fc     20 4E 85 F1 | 	sub	fp, #32
19500     20 2C 56 F2 | 	cmps	local04, #32 wc
19504     2C 00 90 3D |  if_ae	jmp	#LR__2029
19508     08 4E 05 F1 | 	add	fp, #8
1950c     A7 12 02 FB | 	rdlong	arg01, fp
19510     08 12 06 F1 | 	add	arg01, #8
19514     18 4E 05 F1 | 	add	fp, #24
19518     A7 14 02 FB | 	rdlong	arg02, fp
1951c     20 4E 85 F1 | 	sub	fp, #32
19520     0B 14 66 F0 | 	shl	arg02, #11
19524     00 00 60 FF 
19528     00 14 06 F1 | 	add	arg02, ##-1073741824
1952c     09 15 62 FC | 	wrlong	arg02, arg01
19530     18 00 90 FD | 	jmp	#LR__2030
19534                 | LR__2029
19534     08 4E 05 F1 | 	add	fp, #8
19538     A7 12 02 FB | 	rdlong	arg01, fp
1953c     08 4E 85 F1 | 	sub	fp, #8
19540     08 12 06 F1 | 	add	arg01, #8
19544     00 00 E4 FF 
19548     09 01 68 FC | 	wrlong	##-939524096, arg01
1954c                 | LR__2030
1954c     08 4E 05 F1 | 	add	fp, #8
19550     A7 12 02 FB | 	rdlong	arg01, fp
19554     10 12 06 F1 | 	add	arg01, #16
19558     04 00 80 FF 
1955c     09 01 68 FC | 	wrlong	##2048, arg01
19560     A7 12 02 FB | 	rdlong	arg01, fp
19564     0C 12 06 F1 | 	add	arg01, #12
19568     09 01 68 FC | 	wrlong	#0, arg01
1956c     A7 12 02 FB | 	rdlong	arg01, fp
19570     14 12 06 F1 | 	add	arg01, #20
19574     14 4E 05 F1 | 	add	fp, #20
19578     A7 14 02 FB | 	rdlong	arg02, fp
1957c     09 15 52 FC | 	wrword	arg02, arg01
19580     14 4E 85 F1 | 	sub	fp, #20
19584     A7 12 02 FB | 	rdlong	arg01, fp
19588     16 12 06 F1 | 	add	arg01, #22
1958c     10 4E 05 F1 | 	add	fp, #16
19590     A7 14 02 FB | 	rdlong	arg02, fp
19594     09 15 52 FC | 	wrword	arg02, arg01
19598                 | ' lpoke base2+16,2048
19598                 | ' lpoke base2+12,0
19598                 | ' dpoke base2+20,ivol 
19598                 | ' dpoke base2+22,ipan 
19598                 | ' if wave<32 then
19598     08 4E 05 F1 | 	add	fp, #8
1959c     A7 2C 02 FB | 	rdlong	local04, fp
195a0     20 4E 85 F1 | 	sub	fp, #32
195a4     20 2C 56 F2 | 	cmps	local04, #32 wc
195a8     38 00 90 3D |  if_ae	jmp	#LR__2031
195ac     08 4E 05 F1 | 	add	fp, #8
195b0     A7 12 02 FB | 	rdlong	arg01, fp
195b4     18 12 06 F1 | 	add	arg01, #24
195b8     2C 4E 05 F1 | 	add	fp, #44
195bc     A7 14 02 FB | 	rdlong	arg02, fp
195c0     09 15 52 FC | 	wrword	arg02, arg01
195c4     2C 4E 85 F1 | 	sub	fp, #44
195c8     A7 12 02 FB | 	rdlong	arg01, fp
195cc     1A 12 06 F1 | 	add	arg01, #26
195d0     08 4E 05 F1 | 	add	fp, #8
195d4     A7 14 02 FB | 	rdlong	arg02, fp
195d8     10 4E 85 F1 | 	sub	fp, #16
195dc     09 15 52 FC | 	wrword	arg02, arg01
195e0     48 00 90 FD | 	jmp	#LR__2032
195e4                 | LR__2031
195e4     08 4E 05 F1 | 	add	fp, #8
195e8     A7 2C 02 FB | 	rdlong	local04, fp
195ec     18 2C 06 F1 | 	add	local04, #24
195f0     64 4E 05 F1 | 	add	fp, #100
195f4     A7 14 02 FB | 	rdlong	arg02, fp
195f8     6C 4E 85 F1 | 	sub	fp, #108
195fc     3E 2C 25 FF 
19600     3C 12 06 F6 | 	mov	arg01, ##1247312956
19604     D4 15 B1 FD | 	call	#__system___float_div
19608     FD 12 02 F6 | 	mov	arg01, result1
1960c     01 14 06 F6 | 	mov	arg02, #1
19610     8C 18 B1 FD | 	call	#__system___float_tointeger
19614     16 FB 51 FC | 	wrword	result1, local04
19618     08 4E 05 F1 | 	add	fp, #8
1961c     A7 12 02 FB | 	rdlong	arg01, fp
19620     08 4E 85 F1 | 	sub	fp, #8
19624     1A 12 06 F1 | 	add	arg01, #26
19628     09 01 5A FC | 	wrword	#256, arg01
1962c                 | LR__2032
1962c     08 4E 05 F1 | 	add	fp, #8
19630     A7 12 02 FB | 	rdlong	arg01, fp
19634     1C 12 06 F1 | 	add	arg01, #28
19638     09 01 68 FC | 	wrlong	#0, arg01
1963c     A7 12 02 FB | 	rdlong	arg01, fp
19640     20 12 06 F1 | 	add	arg01, #32
19644     09 01 68 FC | 	wrlong	#0, arg01
19648                 | ' lpoke base2+28,$0000_0000
19648                 | ' lpoke base2+32,0 
19648                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
19648     1C 4E 05 F1 | 	add	fp, #28
1964c     A7 2C 02 FB | 	rdlong	local04, fp
19650     24 4E 85 F1 | 	sub	fp, #36
19654     08 2C 0E F2 | 	cmp	local04, #8 wz
19658     18 00 90 5D |  if_ne	jmp	#LR__2033
1965c     08 4E 05 F1 | 	add	fp, #8
19660     A7 12 02 FB | 	rdlong	arg01, fp
19664     08 4E 85 F1 | 	sub	fp, #8
19668     24 12 06 F1 | 	add	arg01, #36
1966c     09 01 68 FC | 	wrlong	#0, arg01
19670     34 00 90 FD | 	jmp	#LR__2034
19674                 | LR__2033
19674     08 4E 05 F1 | 	add	fp, #8
19678     A7 12 02 FB | 	rdlong	arg01, fp
1967c     24 12 06 F1 | 	add	arg01, #36
19680     1C 4E 05 F1 | 	add	fp, #28
19684     A7 14 02 FB | 	rdlong	arg02, fp
19688     24 4E 85 F1 | 	sub	fp, #36
1968c     09 14 66 F0 | 	shl	arg02, #9
19690     0C 00 00 FF 
19694     D8 E4 05 F1 | 	add	objptr, ##6360
19698     F2 14 02 F1 | 	add	arg02, objptr
1969c     0C 00 00 FF 
196a0     D8 E4 85 F1 | 	sub	objptr, ##6360
196a4     09 15 62 FC | 	wrlong	arg02, arg01
196a8                 | LR__2034
196a8     08 4E 05 F1 | 	add	fp, #8
196ac     A7 12 02 FB | 	rdlong	arg01, fp
196b0     28 12 06 F1 | 	add	arg01, #40
196b4     0C 4E 05 F1 | 	add	fp, #12
196b8     A7 14 02 FB | 	rdlong	arg02, fp
196bc     09 15 62 FC | 	wrlong	arg02, arg01
196c0     0C 4E 85 F1 | 	sub	fp, #12
196c4     A7 12 02 FB | 	rdlong	arg01, fp
196c8     2C 12 06 F1 | 	add	arg01, #44
196cc     24 4E 05 F1 | 	add	fp, #36
196d0     A7 14 02 FB | 	rdlong	arg02, fp
196d4     09 15 62 FC | 	wrlong	arg02, arg01
196d8                 | ' lpoke base2+40,speed 
196d8                 | ' lpoke base2+44,sus 
196d8                 | ' if delay>0 then waitms(delay) 
196d8     04 4E 85 F1 | 	sub	fp, #4
196dc     A7 2C 02 FB | 	rdlong	local04, fp
196e0     28 4E 85 F1 | 	sub	fp, #40
196e4     01 2C 56 F2 | 	cmps	local04, #1 wc
196e8     28 4E 05 31 |  if_ae	add	fp, #40
196ec     A7 12 02 3B |  if_ae	rdlong	arg01, fp
196f0     28 4E 85 31 |  if_ae	sub	fp, #40
196f4     58 E7 B0 3D |  if_ae	call	#__system___waitms
196f8     A7 F0 03 F6 | 	mov	ptra, fp
196fc     B2 00 A0 FD | 	call	#popregs_
19700                 | _do_play_ret
19700     2D 00 64 FD | 	ret
19704                 | 
19704                 | ' 
19704                 | ' '-------------------- plot
19704                 | ' 
19704                 | ' sub do_plot
19704                 | _do_plot
19704     00 4A 05 F6 | 	mov	COUNT_, #0
19708     A8 00 A0 FD | 	call	#pushregs_
1970c     20 F0 07 F1 | 	add	ptra, #32
19710     0C 41 BF FD | 	call	#_pop
19714     FD 16 02 F6 | 	mov	arg03, result1
19718     FE 14 02 F6 | 	mov	arg02, result2
1971c     FF 12 02 F6 | 	mov	arg01, result3
19720     0C 4E 05 F1 | 	add	fp, #12
19724     A7 16 62 FC | 	wrlong	arg03, fp
19728     04 4E 05 F1 | 	add	fp, #4
1972c     A7 14 62 FC | 	wrlong	arg02, fp
19730     04 4E 05 F1 | 	add	fp, #4
19734     A7 12 62 FC | 	wrlong	arg01, fp
19738     14 4E 85 F1 | 	sub	fp, #20
1973c     E0 40 BF FD | 	call	#_pop
19740     FF 16 02 F6 | 	mov	arg03, result3
19744     A7 FA 61 FC | 	wrlong	result1, fp
19748     04 4E 05 F1 | 	add	fp, #4
1974c     A7 FC 61 FC | 	wrlong	result2, fp
19750     04 4E 05 F1 | 	add	fp, #4
19754     A7 16 62 FC | 	wrlong	arg03, fp
19758     08 4E 85 F1 | 	sub	fp, #8
1975c     A7 12 02 F6 | 	mov	arg01, fp
19760     A0 42 BF FD | 	call	#_converttoint
19764     18 4E 05 F1 | 	add	fp, #24
19768     A7 FA 61 FC | 	wrlong	result1, fp
1976c     0C 4E 85 F1 | 	sub	fp, #12
19770     A7 12 02 F6 | 	mov	arg01, fp
19774     0C 4E 85 F1 | 	sub	fp, #12
19778     88 42 BF FD | 	call	#_converttoint
1977c     1C 4E 05 F1 | 	add	fp, #28
19780     A7 FA 61 FC | 	wrlong	result1, fp
19784     04 4E 85 F1 | 	sub	fp, #4
19788     A7 16 02 FB | 	rdlong	arg03, fp
1978c     37 00 00 FF 
19790     2C E4 05 F1 | 	add	objptr, ##28204
19794     F2 16 62 FC | 	wrlong	arg03, objptr
19798     04 4E 05 F1 | 	add	fp, #4
1979c     A7 14 02 FB | 	rdlong	arg02, fp
197a0     1C 4E 85 F1 | 	sub	fp, #28
197a4     04 E4 05 F1 | 	add	objptr, #4
197a8     F2 14 62 FC | 	wrlong	arg02, objptr
197ac     04 E4 85 F1 | 	sub	objptr, #4
197b0     F2 12 02 FB | 	rdlong	arg01, objptr
197b4     04 E4 85 F1 | 	sub	objptr, #4
197b8     F2 16 02 FB | 	rdlong	arg03, objptr
197bc     37 00 00 FF 
197c0     28 E4 85 F1 | 	sub	objptr, ##28200
197c4     F0 B9 B0 FD | 	call	#_hg010b_spin2_putpixel
197c8     A7 F0 03 F6 | 	mov	ptra, fp
197cc     B2 00 A0 FD | 	call	#popregs_
197d0                 | _do_plot_ret
197d0     2D 00 64 FD | 	ret
197d4                 | 
197d4                 | ' 
197d4                 | ' '-------------------- poke
197d4                 | ' 
197d4                 | ' sub do_poke
197d4                 | _do_poke
197d4     01 4A 05 F6 | 	mov	COUNT_, #1
197d8     A8 00 A0 FD | 	call	#pushregs_
197dc     20 F0 07 F1 | 	add	ptra, #32
197e0     3C 40 BF FD | 	call	#_pop
197e4     FD 14 02 F6 | 	mov	arg02, result1
197e8     FE 12 02 F6 | 	mov	arg01, result2
197ec     FF 26 02 F6 | 	mov	local01, result3
197f0     A7 14 62 FC | 	wrlong	arg02, fp
197f4     04 4E 05 F1 | 	add	fp, #4
197f8     A7 12 62 FC | 	wrlong	arg01, fp
197fc     04 4E 05 F1 | 	add	fp, #4
19800     A7 26 62 FC | 	wrlong	local01, fp
19804     08 4E 85 F1 | 	sub	fp, #8
19808     14 40 BF FD | 	call	#_pop
1980c     FF 26 02 F6 | 	mov	local01, result3
19810     0C 4E 05 F1 | 	add	fp, #12
19814     A7 FA 61 FC | 	wrlong	result1, fp
19818     04 4E 05 F1 | 	add	fp, #4
1981c     A7 FC 61 FC | 	wrlong	result2, fp
19820     04 4E 05 F1 | 	add	fp, #4
19824     A7 26 62 FC | 	wrlong	local01, fp
19828     08 4E 85 F1 | 	sub	fp, #8
1982c     A7 12 02 F6 | 	mov	arg01, fp
19830     0C 4E 85 F1 | 	sub	fp, #12
19834     CC 41 BF FD | 	call	#_converttoint
19838     18 4E 05 F1 | 	add	fp, #24
1983c     A7 FA 61 FC | 	wrlong	result1, fp
19840     18 4E 85 F1 | 	sub	fp, #24
19844     A7 12 02 F6 | 	mov	arg01, fp
19848     B8 41 BF FD | 	call	#_converttoint
1984c     1C 4E 05 F1 | 	add	fp, #28
19850     A7 FA 61 FC | 	wrlong	result1, fp
19854                 | ' t1=pop() 'value
19854                 | ' t2=pop() 
19854                 | ' a=converttoint(t2) : v=converttoint(t1)
19854                 | ' if a<$80000 then poke a,v else pspoke a,v
19854     04 4E 85 F1 | 	sub	fp, #4
19858     A7 26 02 FB | 	rdlong	local01, fp
1985c     18 4E 85 F1 | 	sub	fp, #24
19860     00 04 00 FF 
19864     00 26 16 F2 | 	cmp	local01, ##524288 wc
19868     1C 00 90 3D |  if_ae	jmp	#LR__2040
1986c     18 4E 05 F1 | 	add	fp, #24
19870     A7 12 02 FB | 	rdlong	arg01, fp
19874     04 4E 05 F1 | 	add	fp, #4
19878     A7 14 02 FB | 	rdlong	arg02, fp
1987c     1C 4E 85 F1 | 	sub	fp, #28
19880     09 15 42 FC | 	wrbyte	arg02, arg01
19884     18 00 90 FD | 	jmp	#LR__2041
19888                 | LR__2040
19888     18 4E 05 F1 | 	add	fp, #24
1988c     A7 12 02 FB | 	rdlong	arg01, fp
19890     04 4E 05 F1 | 	add	fp, #4
19894     A7 14 02 FB | 	rdlong	arg02, fp
19898     1C 4E 85 F1 | 	sub	fp, #28
1989c     8C AA B0 FD | 	call	#_pspoke
198a0                 | LR__2041
198a0     A7 F0 03 F6 | 	mov	ptra, fp
198a4     B2 00 A0 FD | 	call	#popregs_
198a8                 | _do_poke_ret
198a8     2D 00 64 FD | 	ret
198ac                 | 
198ac                 | ' 
198ac                 | ' '-------------------- pop
198ac                 | ' 
198ac                 | ' sub do_pop()
198ac                 | _do_pop
198ac                 | ' if gosubtop>0 then  gosubtop -=1 
198ac     50 00 00 FF 
198b0     34 E5 05 F1 | 	add	objptr, ##41268
198b4     F2 00 02 FB | 	rdlong	_var01, objptr
198b8     50 00 00 FF 
198bc     34 E5 85 F1 | 	sub	objptr, ##41268
198c0     01 00 56 F2 | 	cmps	_var01, #1 wc
198c4     50 00 00 3F 
198c8     34 E5 05 31 |  if_ae	add	objptr, ##41268
198cc     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
198d0     01 00 86 31 |  if_ae	sub	_var01, #1
198d4     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
198d8     50 00 00 3F 
198dc     34 E5 85 31 |  if_ae	sub	objptr, ##41268
198e0                 | _do_pop_ret
198e0     2D 00 64 FD | 	ret
198e4                 | 
198e4                 | ' 
198e4                 | ' '-------------------- position
198e4                 | ' 
198e4                 | ' sub do_position
198e4                 | _do_position
198e4     01 4A 05 F6 | 	mov	COUNT_, #1
198e8     A8 00 A0 FD | 	call	#pushregs_
198ec     18 F0 07 F1 | 	add	ptra, #24
198f0     2C 3F BF FD | 	call	#_pop
198f4     FD 14 02 F6 | 	mov	arg02, result1
198f8     FE 12 02 F6 | 	mov	arg01, result2
198fc     FF 26 02 F6 | 	mov	local01, result3
19900     A7 14 62 FC | 	wrlong	arg02, fp
19904     04 4E 05 F1 | 	add	fp, #4
19908     A7 12 62 FC | 	wrlong	arg01, fp
1990c     04 4E 05 F1 | 	add	fp, #4
19910     A7 26 62 FC | 	wrlong	local01, fp
19914     08 4E 85 F1 | 	sub	fp, #8
19918     04 3F BF FD | 	call	#_pop
1991c     FF 26 02 F6 | 	mov	local01, result3
19920     0C 4E 05 F1 | 	add	fp, #12
19924     A7 FA 61 FC | 	wrlong	result1, fp
19928     04 4E 05 F1 | 	add	fp, #4
1992c     A7 FC 61 FC | 	wrlong	result2, fp
19930     04 4E 05 F1 | 	add	fp, #4
19934     A7 26 62 FC | 	wrlong	local01, fp
19938     08 4E 85 F1 | 	sub	fp, #8
1993c     A7 12 02 F6 | 	mov	arg01, fp
19940     0C 4E 85 F1 | 	sub	fp, #12
19944     BC 40 BF FD | 	call	#_converttoint
19948     FD 26 02 F6 | 	mov	local01, result1
1994c     A7 12 02 F6 | 	mov	arg01, fp
19950     B0 40 BF FD | 	call	#_converttoint
19954     FD 14 02 F6 | 	mov	arg02, result1
19958     13 13 02 F6 | 	mov	arg01, local01
1995c     60 C4 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19960     A7 F0 03 F6 | 	mov	ptra, fp
19964     B2 00 A0 FD | 	call	#popregs_
19968                 | _do_position_ret
19968     2D 00 64 FD | 	ret
1996c                 | 
1996c                 | ' 
1996c                 | ' '-------------------- print
1996c                 | ' 
1996c                 | ' sub do_print  
1996c                 | _do_print
1996c     0B 4A 05 F6 | 	mov	COUNT_, #11
19970     A8 00 A0 FD | 	call	#pushregs_
19974     00 2C 06 F6 | 	mov	local04, #0
19978     A4 3E BF FD | 	call	#_pop
1997c     FD 2E 02 F6 | 	mov	local05, result1
19980     FE 30 02 F6 | 	mov	local06, result2
19984     FF 32 02 F6 | 	mov	local07, result3
19988     17 27 02 F6 | 	mov	local01, local05
1998c     18 29 02 F6 | 	mov	local02, local06
19990     19 2B 02 F6 | 	mov	local03, local07
19994                 | '  
19994                 | ' r=0
19994                 | ' t1=pop() 
19994                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
19994     21 2A 0E F2 | 	cmp	local03, #33 wz
19998     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
1999c     20 00 90 5D |  if_ne	jmp	#LR__2050
199a0     15 2D 02 F6 | 	mov	local04, local03
199a4     78 3E BF FD | 	call	#_pop
199a8     FD 2E 02 F6 | 	mov	local05, result1
199ac     FE 30 02 F6 | 	mov	local06, result2
199b0     FF 32 02 F6 | 	mov	local07, result3
199b4     17 27 02 F6 | 	mov	local01, local05
199b8     18 29 02 F6 | 	mov	local02, local06
199bc     19 2B 02 F6 | 	mov	local03, local07
199c0                 | LR__2050
199c0                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
199c0     20 2A 0E F2 | 	cmp	local03, #32 wz
199c4     15 2D 02 A6 |  if_e	mov	local04, local03
199c8                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
199c8     FF 2A 0E F2 | 	cmp	local03, #255 wz
199cc     10 00 90 5D |  if_ne	jmp	#LR__2051
199d0     13 13 02 F6 | 	mov	arg01, local01
199d4     00 14 06 F6 | 	mov	arg02, #0
199d8     20 A7 B0 FD | 	call	#_printerror
199dc     D4 04 90 FD | 	jmp	#LR__2070
199e0                 | LR__2051
199e0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
199e0     2B 2A 0E F2 | 	cmp	local03, #43 wz
199e4     14 00 90 5D |  if_ne	jmp	#LR__2052
199e8     13 13 02 F6 | 	mov	arg01, local01
199ec     A8 3F BF FD | 	call	#_convertstring
199f0     FD 2E 02 F6 | 	mov	local05, result1
199f4     17 27 02 F6 | 	mov	local01, local05
199f8     1F 2A 06 F6 | 	mov	local03, #31
199fc                 | LR__2052
199fc                 | ' 
199fc                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
199fc     2C 2A 0E F2 | 	cmp	local03, #44 wz
19a00     80 00 90 5D |  if_ne	jmp	#LR__2053
19a04     00 12 06 F6 | 	mov	arg01, #0
19a08     00 3E B1 FD | 	call	#__system___getiolock_0620
19a0c     FD 12 02 F6 | 	mov	arg01, result1
19a10     48 E1 B0 FD | 	call	#__system___lockmem
19a14     C1 01 00 FF 
19a18     56 14 06 F6 | 	mov	arg02, ##@LR__6109
19a1c     00 12 06 F6 | 	mov	arg01, #0
19a20     00 16 06 F6 | 	mov	arg03, #0
19a24     2C EE B0 FD | 	call	#__system___basic_print_string
19a28     0A 34 06 F6 | 	mov	local08, #10
19a2c     00 12 06 F6 | 	mov	arg01, #0
19a30     13 15 02 F6 | 	mov	arg02, local01
19a34     00 16 06 F6 | 	mov	arg03, #0
19a38     0A 18 06 F6 | 	mov	arg04, #10
19a3c     58 EE B0 FD | 	call	#__system___basic_print_integer
19a40     FD 36 02 F6 | 	mov	local09, result1
19a44     00 12 06 F6 | 	mov	arg01, #0
19a48     0A 14 06 F6 | 	mov	arg02, #10
19a4c     00 16 06 F6 | 	mov	arg03, #0
19a50     A8 ED B0 FD | 	call	#__system___basic_print_char
19a54     01 38 06 F6 | 	mov	local10, #1
19a58     00 12 06 F6 | 	mov	arg01, #0
19a5c     AC 3D B1 FD | 	call	#__system___getiolock_0620
19a60     FD 00 68 FC | 	wrlong	#0, result1
19a64     00 3A 06 F6 | 	mov	local11, #0
19a68     B4 3D BF FD | 	call	#_pop
19a6c     FD 2E 02 F6 | 	mov	local05, result1
19a70     FE 30 02 F6 | 	mov	local06, result2
19a74     FF 32 02 F6 | 	mov	local07, result3
19a78     17 27 02 F6 | 	mov	local01, local05
19a7c     18 29 02 F6 | 	mov	local02, local06
19a80     19 2B 02 F6 | 	mov	local03, local07
19a84                 | LR__2053
19a84                 | ' 
19a84                 | ' if r=print_mod_comma  then
19a84     21 2C 0E F2 | 	cmp	local04, #33 wz
19a88     AC 01 90 5D |  if_ne	jmp	#LR__2058
19a8c                 | '   if t1.result_type=result_int then print t1.result.iresult,
19a8c     1C 2A 0E F2 | 	cmp	local03, #28 wz
19a90     64 00 90 5D |  if_ne	jmp	#LR__2054
19a94     00 12 06 F6 | 	mov	arg01, #0
19a98     70 3D B1 FD | 	call	#__system___getiolock_0620
19a9c     FD 12 02 F6 | 	mov	arg01, result1
19aa0     B8 E0 B0 FD | 	call	#__system___lockmem
19aa4     00 30 06 F6 | 	mov	local06, #0
19aa8     00 12 06 F6 | 	mov	arg01, #0
19aac     13 15 02 F6 | 	mov	arg02, local01
19ab0     00 16 06 F6 | 	mov	arg03, #0
19ab4     0A 18 06 F6 | 	mov	arg04, #10
19ab8     DC ED B0 FD | 	call	#__system___basic_print_integer
19abc     FD 32 02 F6 | 	mov	local07, result1
19ac0     18 2F 02 F6 | 	mov	local05, local06
19ac4     19 2F 02 F1 | 	add	local05, local07
19ac8     00 3A 06 F6 | 	mov	local11, #0
19acc     00 12 06 F6 | 	mov	arg01, #0
19ad0     09 14 06 F6 | 	mov	arg02, #9
19ad4     00 16 06 F6 | 	mov	arg03, #0
19ad8     20 ED B0 FD | 	call	#__system___basic_print_char
19adc     FD 36 02 F6 | 	mov	local09, result1
19ae0     FD 2E 02 F1 | 	add	local05, result1
19ae4     00 12 06 F6 | 	mov	arg01, #0
19ae8     20 3D B1 FD | 	call	#__system___getiolock_0620
19aec     FD 00 68 FC | 	wrlong	#0, result1
19af0     00 FA 05 F6 | 	mov	result1, #0
19af4     00 38 06 F6 | 	mov	local10, #0
19af8                 | LR__2054
19af8                 | '   if t1.result_type=result_uint then print t1.result.uresult,
19af8     1D 2A 0E F2 | 	cmp	local03, #29 wz
19afc     64 00 90 5D |  if_ne	jmp	#LR__2055
19b00     00 12 06 F6 | 	mov	arg01, #0
19b04     04 3D B1 FD | 	call	#__system___getiolock_0620
19b08     FD 12 02 F6 | 	mov	arg01, result1
19b0c     4C E0 B0 FD | 	call	#__system___lockmem
19b10     00 30 06 F6 | 	mov	local06, #0
19b14     00 12 06 F6 | 	mov	arg01, #0
19b18     13 15 02 F6 | 	mov	arg02, local01
19b1c     00 16 06 F6 | 	mov	arg03, #0
19b20     0A 18 06 F6 | 	mov	arg04, #10
19b24     B0 ED B0 FD | 	call	#__system___basic_print_unsigned
19b28     FD 32 02 F6 | 	mov	local07, result1
19b2c     18 2F 02 F6 | 	mov	local05, local06
19b30     19 2F 02 F1 | 	add	local05, local07
19b34     00 3A 06 F6 | 	mov	local11, #0
19b38     00 12 06 F6 | 	mov	arg01, #0
19b3c     09 14 06 F6 | 	mov	arg02, #9
19b40     00 16 06 F6 | 	mov	arg03, #0
19b44     B4 EC B0 FD | 	call	#__system___basic_print_char
19b48     FD 36 02 F6 | 	mov	local09, result1
19b4c     FD 2E 02 F1 | 	add	local05, result1
19b50     00 12 06 F6 | 	mov	arg01, #0
19b54     B4 3C B1 FD | 	call	#__system___getiolock_0620
19b58     FD 00 68 FC | 	wrlong	#0, result1
19b5c     00 FA 05 F6 | 	mov	result1, #0
19b60     00 38 06 F6 | 	mov	local10, #0
19b64                 | LR__2055
19b64                 | '   if t1.result_type=result_float then print t1.result.fresult,
19b64     1E 2A 0E F2 | 	cmp	local03, #30 wz
19b68     64 00 90 5D |  if_ne	jmp	#LR__2056
19b6c     00 12 06 F6 | 	mov	arg01, #0
19b70     98 3C B1 FD | 	call	#__system___getiolock_0620
19b74     FD 12 02 F6 | 	mov	arg01, result1
19b78     E0 DF B0 FD | 	call	#__system___lockmem
19b7c     00 30 06 F6 | 	mov	local06, #0
19b80     00 12 06 F6 | 	mov	arg01, #0
19b84     13 15 02 F6 | 	mov	arg02, local01
19b88     00 16 06 F6 | 	mov	arg03, #0
19b8c     23 18 06 F6 | 	mov	arg04, #35
19b90     5C 14 B1 FD | 	call	#__system___basic_print_float
19b94     FD 32 02 F6 | 	mov	local07, result1
19b98     18 2F 02 F6 | 	mov	local05, local06
19b9c     19 2F 02 F1 | 	add	local05, local07
19ba0     00 3A 06 F6 | 	mov	local11, #0
19ba4     00 12 06 F6 | 	mov	arg01, #0
19ba8     09 14 06 F6 | 	mov	arg02, #9
19bac     00 16 06 F6 | 	mov	arg03, #0
19bb0     48 EC B0 FD | 	call	#__system___basic_print_char
19bb4     FD 36 02 F6 | 	mov	local09, result1
19bb8     FD 2E 02 F1 | 	add	local05, result1
19bbc     00 12 06 F6 | 	mov	arg01, #0
19bc0     48 3C B1 FD | 	call	#__system___getiolock_0620
19bc4     FD 00 68 FC | 	wrlong	#0, result1
19bc8     00 FA 05 F6 | 	mov	result1, #0
19bcc     00 38 06 F6 | 	mov	local10, #0
19bd0                 | LR__2056
19bd0                 | '   if t1.result_type=result_string then print t1.result.sresult,
19bd0     1F 2A 0E F2 | 	cmp	local03, #31 wz
19bd4     60 00 90 5D |  if_ne	jmp	#LR__2057
19bd8     00 12 06 F6 | 	mov	arg01, #0
19bdc     2C 3C B1 FD | 	call	#__system___getiolock_0620
19be0     FD 12 02 F6 | 	mov	arg01, result1
19be4     74 DF B0 FD | 	call	#__system___lockmem
19be8     00 30 06 F6 | 	mov	local06, #0
19bec     00 12 06 F6 | 	mov	arg01, #0
19bf0     13 15 02 F6 | 	mov	arg02, local01
19bf4     00 16 06 F6 | 	mov	arg03, #0
19bf8     58 EC B0 FD | 	call	#__system___basic_print_string
19bfc     FD 32 02 F6 | 	mov	local07, result1
19c00     18 2F 02 F6 | 	mov	local05, local06
19c04     19 2F 02 F1 | 	add	local05, local07
19c08     00 3A 06 F6 | 	mov	local11, #0
19c0c     00 12 06 F6 | 	mov	arg01, #0
19c10     09 14 06 F6 | 	mov	arg02, #9
19c14     00 16 06 F6 | 	mov	arg03, #0
19c18     E0 EB B0 FD | 	call	#__system___basic_print_char
19c1c     FD 36 02 F6 | 	mov	local09, result1
19c20     FD 2E 02 F1 | 	add	local05, result1
19c24     00 12 06 F6 | 	mov	arg01, #0
19c28     E0 3B B1 FD | 	call	#__system___getiolock_0620
19c2c     FD 00 68 FC | 	wrlong	#0, result1
19c30     00 FA 05 F6 | 	mov	result1, #0
19c34     00 38 06 F6 | 	mov	local10, #0
19c38                 | LR__2057
19c38                 | LR__2058
19c38                 | ' if r=print_mod_semicolon then 
19c38     22 2C 0E F2 | 	cmp	local04, #34 wz
19c3c     1C 01 90 5D |  if_ne	jmp	#LR__2063
19c40                 | '   if t1.result_type=result_int then print t1.result.iresult;
19c40     1C 2A 0E F2 | 	cmp	local03, #28 wz
19c44     50 00 90 5D |  if_ne	jmp	#LR__2059
19c48     00 12 06 F6 | 	mov	arg01, #0
19c4c     BC 3B B1 FD | 	call	#__system___getiolock_0620
19c50     FD 12 02 F6 | 	mov	arg01, result1
19c54     04 DF B0 FD | 	call	#__system___lockmem
19c58     00 30 06 F6 | 	mov	local06, #0
19c5c     00 38 06 F6 | 	mov	local10, #0
19c60     0A 3A 06 F6 | 	mov	local11, #10
19c64     00 12 06 F6 | 	mov	arg01, #0
19c68     13 15 02 F6 | 	mov	arg02, local01
19c6c     00 16 06 F6 | 	mov	arg03, #0
19c70     0A 18 06 F6 | 	mov	arg04, #10
19c74     20 EC B0 FD | 	call	#__system___basic_print_integer
19c78     FD 32 02 F6 | 	mov	local07, result1
19c7c     18 2F 02 F6 | 	mov	local05, local06
19c80     19 2F 02 F1 | 	add	local05, local07
19c84     00 12 06 F6 | 	mov	arg01, #0
19c88     80 3B B1 FD | 	call	#__system___getiolock_0620
19c8c     FD 00 68 FC | 	wrlong	#0, result1
19c90     00 FA 05 F6 | 	mov	result1, #0
19c94     00 36 06 F6 | 	mov	local09, #0
19c98                 | LR__2059
19c98                 | '   if t1.result_type=result_uint then print t1.result.uresult;
19c98     1D 2A 0E F2 | 	cmp	local03, #29 wz
19c9c     50 00 90 5D |  if_ne	jmp	#LR__2060
19ca0     00 12 06 F6 | 	mov	arg01, #0
19ca4     64 3B B1 FD | 	call	#__system___getiolock_0620
19ca8     FD 12 02 F6 | 	mov	arg01, result1
19cac     AC DE B0 FD | 	call	#__system___lockmem
19cb0     00 30 06 F6 | 	mov	local06, #0
19cb4     00 38 06 F6 | 	mov	local10, #0
19cb8     0A 3A 06 F6 | 	mov	local11, #10
19cbc     00 12 06 F6 | 	mov	arg01, #0
19cc0     13 15 02 F6 | 	mov	arg02, local01
19cc4     00 16 06 F6 | 	mov	arg03, #0
19cc8     0A 18 06 F6 | 	mov	arg04, #10
19ccc     08 EC B0 FD | 	call	#__system___basic_print_unsigned
19cd0     FD 32 02 F6 | 	mov	local07, result1
19cd4     18 2F 02 F6 | 	mov	local05, local06
19cd8     19 2F 02 F1 | 	add	local05, local07
19cdc     00 12 06 F6 | 	mov	arg01, #0
19ce0     28 3B B1 FD | 	call	#__system___getiolock_0620
19ce4     FD 00 68 FC | 	wrlong	#0, result1
19ce8     00 FA 05 F6 | 	mov	result1, #0
19cec     00 36 06 F6 | 	mov	local09, #0
19cf0                 | LR__2060
19cf0                 | '   if t1.result_type=result_float then print t1.result.fresult;
19cf0     1E 2A 0E F2 | 	cmp	local03, #30 wz
19cf4     30 00 90 5D |  if_ne	jmp	#LR__2061
19cf8     00 12 06 F6 | 	mov	arg01, #0
19cfc     0C 3B B1 FD | 	call	#__system___getiolock_0620
19d00     FD 12 02 F6 | 	mov	arg01, result1
19d04     54 DE B0 FD | 	call	#__system___lockmem
19d08     00 12 06 F6 | 	mov	arg01, #0
19d0c     13 15 02 F6 | 	mov	arg02, local01
19d10     00 16 06 F6 | 	mov	arg03, #0
19d14     23 18 06 F6 | 	mov	arg04, #35
19d18     D4 12 B1 FD | 	call	#__system___basic_print_float
19d1c     00 12 06 F6 | 	mov	arg01, #0
19d20     E8 3A B1 FD | 	call	#__system___getiolock_0620
19d24     FD 00 68 FC | 	wrlong	#0, result1
19d28                 | LR__2061
19d28                 | '   if t1.result_type=result_string then print t1.result.sresult;
19d28     1F 2A 0E F2 | 	cmp	local03, #31 wz
19d2c     2C 00 90 5D |  if_ne	jmp	#LR__2062
19d30     00 12 06 F6 | 	mov	arg01, #0
19d34     D4 3A B1 FD | 	call	#__system___getiolock_0620
19d38     FD 12 02 F6 | 	mov	arg01, result1
19d3c     1C DE B0 FD | 	call	#__system___lockmem
19d40     00 12 06 F6 | 	mov	arg01, #0
19d44     13 15 02 F6 | 	mov	arg02, local01
19d48     00 16 06 F6 | 	mov	arg03, #0
19d4c     04 EB B0 FD | 	call	#__system___basic_print_string
19d50     00 12 06 F6 | 	mov	arg01, #0
19d54     B4 3A B1 FD | 	call	#__system___getiolock_0620
19d58     FD 00 68 FC | 	wrlong	#0, result1
19d5c                 | LR__2062
19d5c                 | LR__2063
19d5c                 | ' if r=0 then 
19d5c     00 2C 0E F2 | 	cmp	local04, #0 wz
19d60     1C 01 90 5D |  if_ne	jmp	#LR__2068
19d64                 | '   if t1.result_type=result_int then print t1.result.iresult
19d64     1C 2A 0E F2 | 	cmp	local03, #28 wz
19d68     40 00 90 5D |  if_ne	jmp	#LR__2064
19d6c     00 12 06 F6 | 	mov	arg01, #0
19d70     98 3A B1 FD | 	call	#__system___getiolock_0620
19d74     FD 12 02 F6 | 	mov	arg01, result1
19d78     E0 DD B0 FD | 	call	#__system___lockmem
19d7c     00 12 06 F6 | 	mov	arg01, #0
19d80     13 15 02 F6 | 	mov	arg02, local01
19d84     00 16 06 F6 | 	mov	arg03, #0
19d88     0A 18 06 F6 | 	mov	arg04, #10
19d8c     08 EB B0 FD | 	call	#__system___basic_print_integer
19d90     00 12 06 F6 | 	mov	arg01, #0
19d94     0A 14 06 F6 | 	mov	arg02, #10
19d98     00 16 06 F6 | 	mov	arg03, #0
19d9c     5C EA B0 FD | 	call	#__system___basic_print_char
19da0     00 12 06 F6 | 	mov	arg01, #0
19da4     64 3A B1 FD | 	call	#__system___getiolock_0620
19da8     FD 00 68 FC | 	wrlong	#0, result1
19dac                 | LR__2064
19dac                 | '   if t1.result_type=result_uint then print t1.result.uresult
19dac     1D 2A 0E F2 | 	cmp	local03, #29 wz
19db0     40 00 90 5D |  if_ne	jmp	#LR__2065
19db4     00 12 06 F6 | 	mov	arg01, #0
19db8     50 3A B1 FD | 	call	#__system___getiolock_0620
19dbc     FD 12 02 F6 | 	mov	arg01, result1
19dc0     98 DD B0 FD | 	call	#__system___lockmem
19dc4     00 12 06 F6 | 	mov	arg01, #0
19dc8     13 15 02 F6 | 	mov	arg02, local01
19dcc     00 16 06 F6 | 	mov	arg03, #0
19dd0     0A 18 06 F6 | 	mov	arg04, #10
19dd4     00 EB B0 FD | 	call	#__system___basic_print_unsigned
19dd8     00 12 06 F6 | 	mov	arg01, #0
19ddc     0A 14 06 F6 | 	mov	arg02, #10
19de0     00 16 06 F6 | 	mov	arg03, #0
19de4     14 EA B0 FD | 	call	#__system___basic_print_char
19de8     00 12 06 F6 | 	mov	arg01, #0
19dec     1C 3A B1 FD | 	call	#__system___getiolock_0620
19df0     FD 00 68 FC | 	wrlong	#0, result1
19df4                 | LR__2065
19df4                 | '   if t1.result_type=result_float then print t1.result.fresult
19df4     1E 2A 0E F2 | 	cmp	local03, #30 wz
19df8     40 00 90 5D |  if_ne	jmp	#LR__2066
19dfc     00 12 06 F6 | 	mov	arg01, #0
19e00     08 3A B1 FD | 	call	#__system___getiolock_0620
19e04     FD 12 02 F6 | 	mov	arg01, result1
19e08     50 DD B0 FD | 	call	#__system___lockmem
19e0c     00 12 06 F6 | 	mov	arg01, #0
19e10     13 15 02 F6 | 	mov	arg02, local01
19e14     00 16 06 F6 | 	mov	arg03, #0
19e18     23 18 06 F6 | 	mov	arg04, #35
19e1c     D0 11 B1 FD | 	call	#__system___basic_print_float
19e20     00 12 06 F6 | 	mov	arg01, #0
19e24     0A 14 06 F6 | 	mov	arg02, #10
19e28     00 16 06 F6 | 	mov	arg03, #0
19e2c     CC E9 B0 FD | 	call	#__system___basic_print_char
19e30     00 12 06 F6 | 	mov	arg01, #0
19e34     D4 39 B1 FD | 	call	#__system___getiolock_0620
19e38     FD 00 68 FC | 	wrlong	#0, result1
19e3c                 | LR__2066
19e3c                 | '   if t1.result_type=result_string then print t1.result.sresult
19e3c     1F 2A 0E F2 | 	cmp	local03, #31 wz
19e40     3C 00 90 5D |  if_ne	jmp	#LR__2067
19e44     00 12 06 F6 | 	mov	arg01, #0
19e48     C0 39 B1 FD | 	call	#__system___getiolock_0620
19e4c     FD 12 02 F6 | 	mov	arg01, result1
19e50     08 DD B0 FD | 	call	#__system___lockmem
19e54     00 12 06 F6 | 	mov	arg01, #0
19e58     13 15 02 F6 | 	mov	arg02, local01
19e5c     00 16 06 F6 | 	mov	arg03, #0
19e60     F0 E9 B0 FD | 	call	#__system___basic_print_string
19e64     00 12 06 F6 | 	mov	arg01, #0
19e68     0A 14 06 F6 | 	mov	arg02, #10
19e6c     00 16 06 F6 | 	mov	arg03, #0
19e70     88 E9 B0 FD | 	call	#__system___basic_print_char
19e74     00 12 06 F6 | 	mov	arg01, #0
19e78     90 39 B1 FD | 	call	#__system___getiolock_0620
19e7c     FD 00 68 FC | 	wrlong	#0, result1
19e80                 | LR__2067
19e80                 | LR__2068
19e80                 | ' if r=print_mod_empty then print
19e80     20 2C 0E F2 | 	cmp	local04, #32 wz
19e84     2C 00 90 5D |  if_ne	jmp	#LR__2069
19e88     00 12 06 F6 | 	mov	arg01, #0
19e8c     7C 39 B1 FD | 	call	#__system___getiolock_0620
19e90     FD 12 02 F6 | 	mov	arg01, result1
19e94     C4 DC B0 FD | 	call	#__system___lockmem
19e98     00 12 06 F6 | 	mov	arg01, #0
19e9c     0A 14 06 F6 | 	mov	arg02, #10
19ea0     00 16 06 F6 | 	mov	arg03, #0
19ea4     54 E9 B0 FD | 	call	#__system___basic_print_char
19ea8     00 12 06 F6 | 	mov	arg01, #0
19eac     5C 39 B1 FD | 	call	#__system___getiolock_0620
19eb0     FD 00 68 FC | 	wrlong	#0, result1
19eb4                 | LR__2069
19eb4                 | LR__2070
19eb4     A7 F0 03 F6 | 	mov	ptra, fp
19eb8     B2 00 A0 FD | 	call	#popregs_
19ebc                 | _do_print_ret
19ebc     2D 00 64 FD | 	ret
19ec0                 | 
19ec0                 | ' 
19ec0                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
19ec0                 | ' 
19ec0                 | ' sub do_push
19ec0                 | _do_push
19ec0                 | ' if stackpointer<maxstack then 
19ec0     43 00 00 FF 
19ec4     58 E4 05 F1 | 	add	objptr, ##34392
19ec8     F2 00 02 FB | 	rdlong	_var01, objptr
19ecc     43 00 00 FF 
19ed0     58 E4 85 F1 | 	sub	objptr, ##34392
19ed4     01 00 00 FF 
19ed8     00 00 56 F2 | 	cmps	_var01, ##512 wc
19edc     F8 00 90 3D |  if_ae	jmp	#LR__2080
19ee0     4A 00 00 FF 
19ee4     80 E4 05 F1 | 	add	objptr, ##38016
19ee8     F2 02 02 FB | 	rdlong	_var02, objptr
19eec     01 05 02 F6 | 	mov	_var03, _var02
19ef0     01 04 66 F0 | 	shl	_var03, #1
19ef4     01 05 02 F1 | 	add	_var03, _var02
19ef8     02 04 66 F0 | 	shl	_var03, #2
19efc     03 00 00 FF 
19f00     04 E4 85 F1 | 	sub	objptr, ##1540
19f04     F2 04 02 F1 | 	add	_var03, objptr
19f08     02 01 02 FB | 	rdlong	_var01, _var03
19f0c     04 04 06 F1 | 	add	_var03, #4
19f10     02 07 02 FB | 	rdlong	_var04, _var03
19f14     01 05 02 F6 | 	mov	_var03, _var02
19f18     01 04 66 F0 | 	shl	_var03, #1
19f1c     01 05 02 F1 | 	add	_var03, _var02
19f20     02 04 66 F0 | 	shl	_var03, #2
19f24     F2 04 02 F1 | 	add	_var03, objptr
19f28     08 04 06 F1 | 	add	_var03, #8
19f2c     02 03 02 FB | 	rdlong	_var02, _var03
19f30     04 00 00 FF 
19f34     24 E4 85 F1 | 	sub	objptr, ##2084
19f38     F2 04 02 FB | 	rdlong	_var03, objptr
19f3c     02 09 02 F6 | 	mov	_var05, _var03
19f40     01 08 66 F0 | 	shl	_var05, #1
19f44     02 09 02 F1 | 	add	_var05, _var03
19f48     02 08 66 F0 | 	shl	_var05, #2
19f4c     0C 00 00 FF 
19f50     0C E4 85 F1 | 	sub	objptr, ##6156
19f54     F2 08 02 F1 | 	add	_var05, objptr
19f58     04 01 62 FC | 	wrlong	_var01, _var05
19f5c     0C 00 00 FF 
19f60     0C E4 05 F1 | 	add	objptr, ##6156
19f64     F2 08 02 FB | 	rdlong	_var05, objptr
19f68     04 05 02 F6 | 	mov	_var03, _var05
19f6c     01 04 66 F0 | 	shl	_var03, #1
19f70     04 05 02 F1 | 	add	_var03, _var05
19f74     02 04 66 F0 | 	shl	_var03, #2
19f78     0C 00 00 FF 
19f7c     0C E4 85 F1 | 	sub	objptr, ##6156
19f80     F2 04 02 F1 | 	add	_var03, objptr
19f84     04 04 06 F1 | 	add	_var03, #4
19f88     02 07 62 FC | 	wrlong	_var04, _var03
19f8c     0C 00 00 FF 
19f90     0C E4 05 F1 | 	add	objptr, ##6156
19f94     F2 08 02 FB | 	rdlong	_var05, objptr
19f98     04 07 02 F6 | 	mov	_var04, _var05
19f9c     01 06 66 F0 | 	shl	_var04, #1
19fa0     04 07 02 F1 | 	add	_var04, _var05
19fa4     02 06 66 F0 | 	shl	_var04, #2
19fa8     0C 00 00 FF 
19fac     0C E4 85 F1 | 	sub	objptr, ##6156
19fb0     F2 06 02 F1 | 	add	_var04, objptr
19fb4     08 06 06 F1 | 	add	_var04, #8
19fb8     03 03 62 FC | 	wrlong	_var02, _var04
19fbc     0C 00 00 FF 
19fc0     0C E4 05 F1 | 	add	objptr, ##6156
19fc4     F2 00 02 FB | 	rdlong	_var01, objptr
19fc8     01 00 06 F1 | 	add	_var01, #1
19fcc     F2 00 62 FC | 	wrlong	_var01, objptr
19fd0     43 00 00 FF 
19fd4     58 E4 85 F1 | 	sub	objptr, ##34392
19fd8                 | LR__2080
19fd8                 | _do_push_ret
19fd8     2D 00 64 FD | 	ret
19fdc                 | 
19fdc                 | ' 
19fdc                 | ' '-------------------- put
19fdc                 | ' 
19fdc                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
19fdc                 | _do_put
19fdc     03 4A 05 F6 | 	mov	COUNT_, #3
19fe0     A8 00 A0 FD | 	call	#pushregs_
19fe4     28 F0 07 F1 | 	add	ptra, #40
19fe8     4A 00 00 FF 
19fec     80 E4 05 F1 | 	add	objptr, ##38016
19ff0     F2 1A 02 FB | 	rdlong	arg05, objptr
19ff4     0D 19 02 F6 | 	mov	arg04, arg05
19ff8     01 18 66 F0 | 	shl	arg04, #1
19ffc     0D 19 02 F1 | 	add	arg04, arg05
1a000     02 18 66 F0 | 	shl	arg04, #2
1a004     03 00 00 FF 
1a008     04 E4 85 F1 | 	sub	objptr, ##1540
1a00c     F2 18 02 F1 | 	add	arg04, objptr
1a010     0C 1B 02 FB | 	rdlong	arg05, arg04
1a014     A7 1A 62 FC | 	wrlong	arg05, fp
1a018                 | ' 
1a018                 | ' numpar=compiledline(lineptr_e).result.uresult
1a018                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1a018     04 1A 0E F2 | 	cmp	arg05, #4 wz
1a01c     47 00 00 FF 
1a020     7C E4 85 F1 | 	sub	objptr, ##36476
1a024     48 00 90 5D |  if_ne	jmp	#LR__2090
1a028     F4 37 BF FD | 	call	#_pop
1a02c     FF 1A 02 F6 | 	mov	arg05, result3
1a030     1C 4E 05 F1 | 	add	fp, #28
1a034     A7 FA 61 FC | 	wrlong	result1, fp
1a038     04 4E 05 F1 | 	add	fp, #4
1a03c     A7 FC 61 FC | 	wrlong	result2, fp
1a040     04 4E 05 F1 | 	add	fp, #4
1a044     A7 1A 62 FC | 	wrlong	arg05, fp
1a048     08 4E 85 F1 | 	sub	fp, #8
1a04c     A7 12 02 F6 | 	mov	arg01, fp
1a050     1C 4E 85 F1 | 	sub	fp, #28
1a054     AC 39 BF FD | 	call	#_converttoint
1a058     52 00 00 FF 
1a05c     48 E5 05 F1 | 	add	objptr, ##42312
1a060     F2 FA 61 FC | 	wrlong	result1, objptr
1a064     52 00 00 FF 
1a068     48 E5 85 F1 | 	sub	objptr, ##42312
1a06c     18 00 90 FD | 	jmp	#LR__2091
1a070                 | LR__2090
1a070     52 00 00 FF 
1a074     48 E5 05 F1 | 	add	objptr, ##42312
1a078     FF FF FF FF 
1a07c     F2 FE 6B FC | 	wrlong	##-1, objptr
1a080     52 00 00 FF 
1a084     48 E5 85 F1 | 	sub	objptr, ##42312
1a088                 | LR__2091
1a088                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
1a088     A7 1A 02 FB | 	rdlong	arg05, fp
1a08c     03 1A 56 F2 | 	cmps	arg05, #3 wc
1a090     40 00 90 CD |  if_b	jmp	#LR__2092
1a094     88 37 BF FD | 	call	#_pop
1a098     FF 1A 02 F6 | 	mov	arg05, result3
1a09c     1C 4E 05 F1 | 	add	fp, #28
1a0a0     A7 FA 61 FC | 	wrlong	result1, fp
1a0a4     04 4E 05 F1 | 	add	fp, #4
1a0a8     A7 FC 61 FC | 	wrlong	result2, fp
1a0ac     04 4E 05 F1 | 	add	fp, #4
1a0b0     A7 1A 62 FC | 	wrlong	arg05, fp
1a0b4     08 4E 85 F1 | 	sub	fp, #8
1a0b8     A7 12 02 F6 | 	mov	arg01, fp
1a0bc     1C 4E 85 F1 | 	sub	fp, #28
1a0c0     40 39 BF FD | 	call	#_converttoint
1a0c4     08 4E 05 F1 | 	add	fp, #8
1a0c8     A7 FA 61 FC | 	wrlong	result1, fp
1a0cc     08 4E 85 F1 | 	sub	fp, #8
1a0d0     0C 00 90 FD | 	jmp	#LR__2093
1a0d4                 | LR__2092
1a0d4     08 4E 05 F1 | 	add	fp, #8
1a0d8     A7 02 68 FC | 	wrlong	#1, fp
1a0dc     08 4E 85 F1 | 	sub	fp, #8
1a0e0                 | LR__2093
1a0e0                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
1a0e0     A7 18 02 FB | 	rdlong	arg04, fp
1a0e4     02 18 56 F2 | 	cmps	arg04, #2 wc
1a0e8     3C 00 90 CD |  if_b	jmp	#LR__2094
1a0ec     30 37 BF FD | 	call	#_pop
1a0f0     FF 18 02 F6 | 	mov	arg04, result3
1a0f4     1C 4E 05 F1 | 	add	fp, #28
1a0f8     A7 FA 61 FC | 	wrlong	result1, fp
1a0fc     04 4E 05 F1 | 	add	fp, #4
1a100     A7 FC 61 FC | 	wrlong	result2, fp
1a104     04 4E 05 F1 | 	add	fp, #4
1a108     A7 18 62 FC | 	wrlong	arg04, fp
1a10c     08 4E 85 F1 | 	sub	fp, #8
1a110     A7 12 02 F6 | 	mov	arg01, fp
1a114     1C 4E 85 F1 | 	sub	fp, #28
1a118     E8 38 BF FD | 	call	#_converttoint
1a11c     0C 4E 05 F1 | 	add	fp, #12
1a120     A7 FA 61 FC | 	wrlong	result1, fp
1a124     0C 4E 85 F1 | 	sub	fp, #12
1a128                 | LR__2094
1a128     F4 36 BF FD | 	call	#_pop
1a12c     FF 18 02 F6 | 	mov	arg04, result3
1a130     1C 4E 05 F1 | 	add	fp, #28
1a134     A7 FA 61 FC | 	wrlong	result1, fp
1a138     04 4E 05 F1 | 	add	fp, #4
1a13c     A7 FC 61 FC | 	wrlong	result2, fp
1a140     04 4E 05 F1 | 	add	fp, #4
1a144     A7 18 62 FC | 	wrlong	arg04, fp
1a148     08 4E 85 F1 | 	sub	fp, #8
1a14c     A7 12 02 F6 | 	mov	arg01, fp
1a150     1C 4E 85 F1 | 	sub	fp, #28
1a154     AC 38 BF FD | 	call	#_converttoint
1a158     04 4E 05 F1 | 	add	fp, #4
1a15c     A7 FA 61 FC | 	wrlong	result1, fp
1a160     10 4E 05 F1 | 	add	fp, #16
1a164     A7 26 02 FB | 	rdlong	local01, fp
1a168     14 4E 85 F1 | 	sub	fp, #20
1a16c     02 26 66 F0 | 	shl	local01, #2
1a170     50 00 00 FF 
1a174     C4 E4 05 F1 | 	add	objptr, ##41156
1a178     F2 26 02 F1 | 	add	local01, objptr
1a17c     13 01 68 FC | 	wrlong	#0, local01
1a180                 | ' t1=pop() : channel=converttoint(t1)
1a180                 | ' getres(j)=0
1a180                 | ' if pos>=0 then
1a180     02 00 00 FF 
1a184     84 E4 05 F1 | 	add	objptr, ##1156
1a188     F2 28 02 FB | 	rdlong	local02, objptr
1a18c     52 00 00 FF 
1a190     48 E5 85 F1 | 	sub	objptr, ##42312
1a194     00 28 56 F2 | 	cmps	local02, #0 wc
1a198     C0 01 90 CD |  if_b	jmp	#LR__2100
1a19c     10 4E 05 F1 | 	add	fp, #16
1a1a0     A7 00 68 FC | 	wrlong	#0, fp
1a1a4     10 4E 85 F1 | 	sub	fp, #16
1a1a8                 | '    i=0: do
1a1a8                 | LR__2095
1a1a8     14 4E 05 F1 | 	add	fp, #20
1a1ac     A7 00 68 FC | 	wrlong	#0, fp
1a1b0     14 4E 85 F1 | 	sub	fp, #20
1a1b4                 | '    j=0: do    
1a1b4                 | LR__2096
1a1b4                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1a1b4     0C 4E 05 F1 | 	add	fp, #12
1a1b8     A7 28 02 FB | 	rdlong	local02, fp
1a1bc     0C 4E 85 F1 | 	sub	fp, #12
1a1c0     00 04 00 FF 
1a1c4     00 28 56 F2 | 	cmps	local02, ##524288 wc
1a1c8     4C 00 90 3D |  if_ae	jmp	#LR__2097
1a1cc     14 4E 05 F1 | 	add	fp, #20
1a1d0     A7 28 02 FB | 	rdlong	local02, fp
1a1d4     14 27 02 F6 | 	mov	local01, local02
1a1d8     4E 00 00 FF 
1a1dc     B4 E4 05 F1 | 	add	objptr, ##40116
1a1e0     F2 26 02 F1 | 	add	local01, objptr
1a1e4     08 4E 85 F1 | 	sub	fp, #8
1a1e8     A7 12 02 FB | 	rdlong	arg01, fp
1a1ec     04 4E 05 F1 | 	add	fp, #4
1a1f0     A7 18 02 FB | 	rdlong	arg04, fp
1a1f4     0A 18 66 F0 | 	shl	arg04, #10
1a1f8     0C 13 02 F1 | 	add	arg01, arg04
1a1fc     10 4E 85 F1 | 	sub	fp, #16
1a200     14 13 02 F1 | 	add	arg01, local02
1a204     09 FB C1 FA | 	rdbyte	result1, arg01
1a208     4E 00 00 FF 
1a20c     B4 E4 85 F1 | 	sub	objptr, ##40116
1a210     13 FB 41 FC | 	wrbyte	result1, local01
1a214     48 00 90 FD | 	jmp	#LR__2098
1a218                 | LR__2097
1a218     14 4E 05 F1 | 	add	fp, #20
1a21c     A7 28 02 FB | 	rdlong	local02, fp
1a220     14 27 02 F6 | 	mov	local01, local02
1a224     4E 00 00 FF 
1a228     B4 E4 05 F1 | 	add	objptr, ##40116
1a22c     F2 26 02 F1 | 	add	local01, objptr
1a230     08 4E 85 F1 | 	sub	fp, #8
1a234     A7 12 02 FB | 	rdlong	arg01, fp
1a238     04 4E 05 F1 | 	add	fp, #4
1a23c     A7 18 02 FB | 	rdlong	arg04, fp
1a240     0A 18 66 F0 | 	shl	arg04, #10
1a244     0C 13 02 F1 | 	add	arg01, arg04
1a248     10 4E 85 F1 | 	sub	fp, #16
1a24c     14 13 02 F1 | 	add	arg01, local02
1a250     4E 00 00 FF 
1a254     B4 E4 85 F1 | 	sub	objptr, ##40116
1a258     18 A1 B0 FD | 	call	#_pspeek
1a25c     13 FB 41 FC | 	wrbyte	result1, local01
1a260                 | LR__2098
1a260     14 4E 05 F1 | 	add	fp, #20
1a264     A7 28 02 FB | 	rdlong	local02, fp
1a268     01 28 06 F1 | 	add	local02, #1
1a26c     A7 28 62 FC | 	wrlong	local02, fp
1a270     14 4E 85 F1 | 	sub	fp, #20
1a274     02 00 00 FF 
1a278     00 28 56 F2 | 	cmps	local02, ##1024 wc
1a27c     2C 00 90 3D |  if_ae	jmp	#LR__2099
1a280     10 4E 05 F1 | 	add	fp, #16
1a284     A7 26 02 FB | 	rdlong	local01, fp
1a288     0A 26 66 F0 | 	shl	local01, #10
1a28c     04 4E 05 F1 | 	add	fp, #4
1a290     A7 28 02 FB | 	rdlong	local02, fp
1a294     14 27 02 F1 | 	add	local01, local02
1a298     0C 4E 85 F1 | 	sub	fp, #12
1a29c     A7 28 02 FB | 	rdlong	local02, fp
1a2a0     08 4E 85 F1 | 	sub	fp, #8
1a2a4     14 27 5A F2 | 	cmps	local01, local02 wcz
1a2a8     08 FF 9F ED |  if_be	jmp	#LR__2096
1a2ac                 | LR__2099
1a2ac                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
1a2ac     04 4E 05 F1 | 	add	fp, #4
1a2b0     A7 12 02 FB | 	rdlong	arg01, fp
1a2b4     52 00 00 FF 
1a2b8     48 E5 05 F1 | 	add	objptr, ##42312
1a2bc     F2 14 02 FB | 	rdlong	arg02, objptr
1a2c0     01 14 06 F1 | 	add	arg02, #1
1a2c4     04 00 00 FF 
1a2c8     94 E4 85 F1 | 	sub	objptr, ##2196
1a2cc     F2 16 02 F6 | 	mov	arg03, objptr
1a2d0     4E 00 00 FF 
1a2d4     B4 E4 85 F1 | 	sub	objptr, ##40116
1a2d8     04 4E 05 F1 | 	add	fp, #4
1a2dc     A7 18 02 FB | 	rdlong	arg04, fp
1a2e0     08 4E 85 F1 | 	sub	fp, #8
1a2e4     01 1A 06 F6 | 	mov	arg05, #1
1a2e8     78 E6 B0 FD | 	call	#__system___basic_put
1a2ec     18 4E 05 F1 | 	add	fp, #24
1a2f0     A7 FA 61 FC | 	wrlong	result1, fp
1a2f4     14 4E 85 F1 | 	sub	fp, #20
1a2f8     A7 26 02 FB | 	rdlong	local01, fp
1a2fc     02 26 66 F0 | 	shl	local01, #2
1a300     50 00 00 FF 
1a304     C4 E4 05 F1 | 	add	objptr, ##41156
1a308     F2 26 02 F1 | 	add	local01, objptr
1a30c     13 FB 61 FC | 	wrlong	result1, local01
1a310                 | '    if 1024*i+j>amount then exit loop
1a310     0C 4E 05 F1 | 	add	fp, #12
1a314     A7 28 02 FB | 	rdlong	local02, fp
1a318     0A 28 66 F0 | 	shl	local02, #10
1a31c     04 4E 05 F1 | 	add	fp, #4
1a320     A7 26 02 FB | 	rdlong	local01, fp
1a324     13 29 02 F1 | 	add	local02, local01
1a328     0C 4E 85 F1 | 	sub	fp, #12
1a32c     A7 26 02 FB | 	rdlong	local01, fp
1a330     08 4E 85 F1 | 	sub	fp, #8
1a334     13 29 5A F2 | 	cmps	local02, local01 wcz
1a338     50 00 00 FF 
1a33c     C4 E4 85 F1 | 	sub	objptr, ##41156
1a340     CC 01 90 1D |  if_a	jmp	#LR__2107
1a344     10 4E 05 F1 | 	add	fp, #16
1a348     A7 28 02 FB | 	rdlong	local02, fp
1a34c     01 28 06 F1 | 	add	local02, #1
1a350     A7 28 62 FC | 	wrlong	local02, fp
1a354     10 4E 85 F1 | 	sub	fp, #16
1a358     4C FE 9F FD | 	jmp	#LR__2095
1a35c                 | LR__2100
1a35c     10 4E 05 F1 | 	add	fp, #16
1a360     A7 00 68 FC | 	wrlong	#0, fp
1a364     10 4E 85 F1 | 	sub	fp, #16
1a368                 | '    i=0: do
1a368                 | LR__2101
1a368     14 4E 05 F1 | 	add	fp, #20
1a36c     A7 00 68 FC | 	wrlong	#0, fp
1a370     14 4E 85 F1 | 	sub	fp, #20
1a374                 | '    j=0: do  
1a374                 | LR__2102
1a374                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
1a374     0C 4E 05 F1 | 	add	fp, #12
1a378     A7 28 02 FB | 	rdlong	local02, fp
1a37c     0C 4E 85 F1 | 	sub	fp, #12
1a380     00 04 00 FF 
1a384     00 28 56 F2 | 	cmps	local02, ##524288 wc
1a388     4C 00 90 3D |  if_ae	jmp	#LR__2103
1a38c     14 4E 05 F1 | 	add	fp, #20
1a390     A7 28 02 FB | 	rdlong	local02, fp
1a394     14 27 02 F6 | 	mov	local01, local02
1a398     4E 00 00 FF 
1a39c     B4 E4 05 F1 | 	add	objptr, ##40116
1a3a0     F2 26 02 F1 | 	add	local01, objptr
1a3a4     08 4E 85 F1 | 	sub	fp, #8
1a3a8     A7 12 02 FB | 	rdlong	arg01, fp
1a3ac     04 4E 05 F1 | 	add	fp, #4
1a3b0     A7 18 02 FB | 	rdlong	arg04, fp
1a3b4     0A 18 66 F0 | 	shl	arg04, #10
1a3b8     0C 13 02 F1 | 	add	arg01, arg04
1a3bc     10 4E 85 F1 | 	sub	fp, #16
1a3c0     14 13 02 F1 | 	add	arg01, local02
1a3c4     09 FB C1 FA | 	rdbyte	result1, arg01
1a3c8     4E 00 00 FF 
1a3cc     B4 E4 85 F1 | 	sub	objptr, ##40116
1a3d0     13 FB 41 FC | 	wrbyte	result1, local01
1a3d4     48 00 90 FD | 	jmp	#LR__2104
1a3d8                 | LR__2103
1a3d8     14 4E 05 F1 | 	add	fp, #20
1a3dc     A7 28 02 FB | 	rdlong	local02, fp
1a3e0     14 27 02 F6 | 	mov	local01, local02
1a3e4     4E 00 00 FF 
1a3e8     B4 E4 05 F1 | 	add	objptr, ##40116
1a3ec     F2 26 02 F1 | 	add	local01, objptr
1a3f0     08 4E 85 F1 | 	sub	fp, #8
1a3f4     A7 12 02 FB | 	rdlong	arg01, fp
1a3f8     04 4E 05 F1 | 	add	fp, #4
1a3fc     A7 18 02 FB | 	rdlong	arg04, fp
1a400     0A 18 66 F0 | 	shl	arg04, #10
1a404     0C 13 02 F1 | 	add	arg01, arg04
1a408     10 4E 85 F1 | 	sub	fp, #16
1a40c     14 13 02 F1 | 	add	arg01, local02
1a410     4E 00 00 FF 
1a414     B4 E4 85 F1 | 	sub	objptr, ##40116
1a418     58 9F B0 FD | 	call	#_pspeek
1a41c     13 FB 41 FC | 	wrbyte	result1, local01
1a420                 | LR__2104
1a420     14 4E 05 F1 | 	add	fp, #20
1a424     A7 28 02 FB | 	rdlong	local02, fp
1a428     01 28 06 F1 | 	add	local02, #1
1a42c     A7 28 62 FC | 	wrlong	local02, fp
1a430     14 4E 85 F1 | 	sub	fp, #20
1a434     02 00 00 FF 
1a438     00 28 56 F2 | 	cmps	local02, ##1024 wc
1a43c     2C 00 90 3D |  if_ae	jmp	#LR__2105
1a440     10 4E 05 F1 | 	add	fp, #16
1a444     A7 26 02 FB | 	rdlong	local01, fp
1a448     0A 26 66 F0 | 	shl	local01, #10
1a44c     04 4E 05 F1 | 	add	fp, #4
1a450     A7 28 02 FB | 	rdlong	local02, fp
1a454     14 27 02 F1 | 	add	local01, local02
1a458     0C 4E 85 F1 | 	sub	fp, #12
1a45c     A7 28 02 FB | 	rdlong	local02, fp
1a460     08 4E 85 F1 | 	sub	fp, #8
1a464     14 27 5A F2 | 	cmps	local01, local02 wcz
1a468     08 FF 9F ED |  if_be	jmp	#LR__2102
1a46c                 | LR__2105
1a46c                 | '    put #channel,,block(0),amount, r : getres(channel)=r
1a46c     04 4E 05 F1 | 	add	fp, #4
1a470     A7 12 02 FB | 	rdlong	arg01, fp
1a474     4E 00 00 FF 
1a478     B4 E4 05 F1 | 	add	objptr, ##40116
1a47c     F2 16 02 F6 | 	mov	arg03, objptr
1a480     4E 00 00 FF 
1a484     B4 E4 85 F1 | 	sub	objptr, ##40116
1a488     04 4E 05 F1 | 	add	fp, #4
1a48c     A7 18 02 FB | 	rdlong	arg04, fp
1a490     08 4E 85 F1 | 	sub	fp, #8
1a494     00 14 06 F6 | 	mov	arg02, #0
1a498     01 1A 06 F6 | 	mov	arg05, #1
1a49c     C4 E4 B0 FD | 	call	#__system___basic_put
1a4a0     18 4E 05 F1 | 	add	fp, #24
1a4a4     A7 FA 61 FC | 	wrlong	result1, fp
1a4a8     14 4E 85 F1 | 	sub	fp, #20
1a4ac     A7 26 02 FB | 	rdlong	local01, fp
1a4b0     02 26 66 F0 | 	shl	local01, #2
1a4b4     50 00 00 FF 
1a4b8     C4 E4 05 F1 | 	add	objptr, ##41156
1a4bc     F2 26 02 F1 | 	add	local01, objptr
1a4c0     13 FB 61 FC | 	wrlong	result1, local01
1a4c4                 | '    if 1024*i+j>amount then exit loop
1a4c4     0C 4E 05 F1 | 	add	fp, #12
1a4c8     A7 28 02 FB | 	rdlong	local02, fp
1a4cc     0A 28 66 F0 | 	shl	local02, #10
1a4d0     04 4E 05 F1 | 	add	fp, #4
1a4d4     A7 26 02 FB | 	rdlong	local01, fp
1a4d8     13 29 02 F1 | 	add	local02, local01
1a4dc     0C 4E 85 F1 | 	sub	fp, #12
1a4e0     A7 2A 02 FB | 	rdlong	local03, fp
1a4e4     08 4E 85 F1 | 	sub	fp, #8
1a4e8     15 29 5A F2 | 	cmps	local02, local03 wcz
1a4ec     50 00 00 FF 
1a4f0     C4 E4 85 F1 | 	sub	objptr, ##41156
1a4f4     18 00 90 1D |  if_a	jmp	#LR__2106
1a4f8     10 4E 05 F1 | 	add	fp, #16
1a4fc     A7 28 02 FB | 	rdlong	local02, fp
1a500     01 28 06 F1 | 	add	local02, #1
1a504     A7 28 62 FC | 	wrlong	local02, fp
1a508     10 4E 85 F1 | 	sub	fp, #16
1a50c     58 FE 9F FD | 	jmp	#LR__2101
1a510                 | LR__2106
1a510                 | LR__2107
1a510     A7 F0 03 F6 | 	mov	ptra, fp
1a514     B2 00 A0 FD | 	call	#popregs_
1a518                 | _do_put_ret
1a518     2D 00 64 FD | 	ret
1a51c                 | 
1a51c                 | ' 
1a51c                 | ' '-------------------- rad
1a51c                 | ' 
1a51c                 | ' sub do_rad
1a51c                 | _do_rad
1a51c     52 00 00 FF 
1a520     E0 E4 05 F1 | 	add	objptr, ##42208
1a524     00 C0 9F FF 
1a528     F2 00 68 FC | 	wrlong	##1065353216, objptr
1a52c     04 E4 05 F1 | 	add	objptr, #4
1a530     00 C0 9F FF 
1a534     F2 00 68 FC | 	wrlong	##1065353216, objptr
1a538     52 00 00 FF 
1a53c     E4 E4 85 F1 | 	sub	objptr, ##42212
1a540                 | _do_rad_ret
1a540     2D 00 64 FD | 	ret
1a544                 | 
1a544                 | ' 
1a544                 | ' '-------------------- rdpin
1a544                 | ' 
1a544                 | ' sub do_rdpin
1a544                 | _do_rdpin
1a544     00 4A 05 F6 | 	mov	COUNT_, #0
1a548     A8 00 A0 FD | 	call	#pushregs_
1a54c     0C F0 07 F1 | 	add	ptra, #12
1a550     CC 32 BF FD | 	call	#_pop
1a554     A7 FA 61 FC | 	wrlong	result1, fp
1a558     04 4E 05 F1 | 	add	fp, #4
1a55c     A7 FC 61 FC | 	wrlong	result2, fp
1a560     04 4E 05 F1 | 	add	fp, #4
1a564     A7 FE 61 FC | 	wrlong	result3, fp
1a568     08 4E 85 F1 | 	sub	fp, #8
1a56c     A7 12 02 F6 | 	mov	arg01, fp
1a570     90 34 BF FD | 	call	#_converttoint
1a574     FD FA 89 FA | 	rdpin	result1, result1
1a578     52 00 00 FF 
1a57c     4C E5 05 F1 | 	add	objptr, ##42316
1a580     F2 FA 61 FC | 	wrlong	result1, objptr
1a584     52 00 00 FF 
1a588     4C E5 85 F1 | 	sub	objptr, ##42316
1a58c     08 4E 05 F1 | 	add	fp, #8
1a590     A7 3A 68 FC | 	wrlong	#29, fp
1a594     08 4E 85 F1 | 	sub	fp, #8
1a598     A7 08 68 FC | 	wrlong	#4, fp
1a59c     A7 12 02 F6 | 	mov	arg01, fp
1a5a0     14 33 BF FD | 	call	#_push
1a5a4     A7 F0 03 F6 | 	mov	ptra, fp
1a5a8     B2 00 A0 FD | 	call	#popregs_
1a5ac                 | _do_rdpin_ret
1a5ac     2D 00 64 FD | 	ret
1a5b0                 | 
1a5b0                 | ' 
1a5b0                 | ' ' ----------------  read
1a5b0                 | ' 
1a5b0                 | ' function read_next_line() as string
1a5b0                 | _read_next_line
1a5b0     07 4A 05 F6 | 	mov	COUNT_, #7
1a5b4     A8 00 A0 FD | 	call	#pushregs_
1a5b8                 | ' if dataptr=$7FFFFFFF then return("")
1a5b8     50 00 00 FF 
1a5bc     2C E5 05 F1 | 	add	objptr, ##41260
1a5c0     F2 26 02 FB | 	rdlong	local01, objptr
1a5c4     50 00 00 FF 
1a5c8     2C E5 85 F1 | 	sub	objptr, ##41260
1a5cc     FF FF 3F FF 
1a5d0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
1a5d4     C1 01 00 AF 
1a5d8     7D FA 05 A6 |  if_e	mov	result1, ##@LR__6110
1a5dc     BC 01 90 AD |  if_e	jmp	#LR__2117
1a5e0                 | ' do
1a5e0                 | LR__2110
1a5e0     50 00 00 FF 
1a5e4     08 E5 05 F1 | 	add	objptr, ##41224
1a5e8     F2 12 02 F6 | 	mov	arg01, objptr
1a5ec     24 E4 05 F1 | 	add	objptr, #36
1a5f0     F2 14 02 FB | 	rdlong	arg02, objptr
1a5f4     24 16 06 F6 | 	mov	arg03, #36
1a5f8     45 00 00 FF 
1a5fc     60 E4 85 F1 | 	sub	objptr, ##35424
1a600     B4 C8 B0 FD | 	call	#_psram_spin2_read1
1a604                 | '  ' print dataptr
1a604                 | '   psram.read1(varptr(dataheader),dataptr,36) 
1a604                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
1a604     45 00 00 FF 
1a608     3C E4 05 F1 | 	add	objptr, ##35388
1a60c     F2 26 02 FB | 	rdlong	local01, objptr
1a610     50 00 00 FF 
1a614     08 E5 85 F1 | 	sub	objptr, ##41224
1a618     FF FF 7F FF 
1a61c     FF 27 0E F2 | 	cmp	local01, ##-1 wz
1a620     50 00 00 5F 
1a624     1C E5 05 51 |  if_ne	add	objptr, ##41244
1a628     F2 26 02 5B |  if_ne	rdlong	local01, objptr
1a62c     10 E4 05 51 |  if_ne	add	objptr, #16
1a630     F2 26 62 5C |  if_ne	wrlong	local01, objptr
1a634     50 00 00 5F 
1a638     2C E5 85 51 |  if_ne	sub	objptr, ##41260
1a63c     50 00 00 FF 
1a640     1C E5 05 F1 | 	add	objptr, ##41244
1a644     F2 26 02 FB | 	rdlong	local01, objptr
1a648     50 00 00 FF 
1a64c     1C E5 85 F1 | 	sub	objptr, ##41244
1a650     FF FF 3F FF 
1a654     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
1a658     50 00 00 5F 
1a65c     08 E5 05 51 |  if_ne	add	objptr, ##41224
1a660     F2 28 02 5B |  if_ne	rdlong	local02, objptr
1a664     50 00 00 5F 
1a668     08 E5 85 51 |  if_ne	sub	objptr, ##41224
1a66c     FF FF 7F 5F 
1a670     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
1a674     50 00 00 5F 
1a678     28 E5 05 51 |  if_ne	add	objptr, ##41256
1a67c     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
1a680     50 00 00 5F 
1a684     28 E5 85 51 |  if_ne	sub	objptr, ##41256
1a688     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
1a68c     50 FF 9F 5D |  if_ne	jmp	#LR__2110
1a690                 | ' if dataheader(8)=token_data then 
1a690     50 00 00 FF 
1a694     28 E5 05 F1 | 	add	objptr, ##41256
1a698     F2 26 02 FB | 	rdlong	local01, objptr
1a69c     50 00 00 FF 
1a6a0     28 E5 85 F1 | 	sub	objptr, ##41256
1a6a4     B7 26 0E F2 | 	cmp	local01, #183 wz
1a6a8     E0 00 90 5D |  if_ne	jmp	#LR__2115
1a6ac     50 00 00 FF 
1a6b0     10 E5 05 F1 | 	add	objptr, ##41232
1a6b4     F2 26 02 FB | 	rdlong	local01, objptr
1a6b8     02 00 00 FF 
1a6bc     1C E4 05 F1 | 	add	objptr, ##1052
1a6c0     F2 26 62 FC | 	wrlong	local01, objptr
1a6c4     02 00 00 FF 
1a6c8     18 E4 85 F1 | 	sub	objptr, ##1048
1a6cc     F2 2C 02 FB | 	rdlong	local04, objptr
1a6d0     02 00 00 FF 
1a6d4     10 E4 05 F1 | 	add	objptr, ##1040
1a6d8     F2 2C 62 FC | 	wrlong	local04, objptr
1a6dc                 | '  'print "data found at line "; dataheader(0)
1a6dc                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
1a6dc     00 2E 06 F6 | 	mov	local05, #0
1a6e0     52 00 00 FF 
1a6e4     24 E5 85 F1 | 	sub	objptr, ##42276
1a6e8                 | LR__2111
1a6e8     16 2F 52 F2 | 	cmps	local05, local04 wc
1a6ec     3C 00 90 3D |  if_ae	jmp	#LR__2112
1a6f0     52 00 00 FF 
1a6f4     2C E5 05 F1 | 	add	objptr, ##42284
1a6f8     F2 12 02 FB | 	rdlong	arg01, objptr
1a6fc     52 00 00 FF 
1a700     2C E5 85 F1 | 	sub	objptr, ##42284
1a704     17 13 02 F1 | 	add	arg01, local05
1a708     68 9C B0 FD | 	call	#_pspeek
1a70c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
1a710     8C F6 B0 FD | 	call	#__system__Chr_S
1a714     FD 14 02 F6 | 	mov	arg02, result1
1a718     18 13 02 F6 | 	mov	arg01, local06
1a71c     98 D4 B0 FD | 	call	#__system___string_concat
1a720     FD 30 02 F6 | 	mov	local06, result1
1a724     01 2E 06 F1 | 	add	local05, #1
1a728     BC FF 9F FD | 	jmp	#LR__2111
1a72c                 | LR__2112
1a72c     C1 01 00 FF 
1a730     7E 16 06 F6 | 	mov	arg03, ##@LR__6111
1a734     01 12 06 F6 | 	mov	arg01, #1
1a738     18 15 02 F6 | 	mov	arg02, local06
1a73c     E4 F9 B0 FD | 	call	#__system__Instr
1a740     FD 2E 02 F6 | 	mov	local05, result1
1a744     18 13 02 F6 | 	mov	arg01, local06
1a748     09 33 02 F6 | 	mov	local07, arg01
1a74c     97 06 48 FB | 	callpa	#(@LR__2114-@LR__2113)>>2,fcache_load_ptr_
1a750                 | LR__2113
1a750     19 FB C9 FA | 	rdbyte	result1, local07 wz
1a754     01 32 06 51 |  if_ne	add	local07, #1
1a758     F4 FF 9F 5D |  if_ne	jmp	#LR__2113
1a75c                 | LR__2114
1a75c     09 33 82 F1 | 	sub	local07, arg01
1a760     19 15 02 F6 | 	mov	arg02, local07
1a764     17 15 82 F1 | 	sub	arg02, local05
1a768     04 14 86 F1 | 	sub	arg02, #4
1a76c     18 13 02 F6 | 	mov	arg01, local06
1a770     F0 F4 B0 FD | 	call	#__system__Right_S
1a774     FD 12 02 F6 | 	mov	arg01, result1
1a778     F0 F8 B0 FD | 	call	#__system__RTrim_S
1a77c     FD 12 02 F6 | 	mov	arg01, result1
1a780     28 F8 B0 FD | 	call	#__system__LTrim_S
1a784     FD 30 02 F6 | 	mov	local06, result1
1a788     0C 00 90 FD | 	jmp	#LR__2116
1a78c                 | LR__2115
1a78c                 | '   return ("") 'todo proper err
1a78c     C1 01 00 FF 
1a790     83 FA 05 F6 | 	mov	result1, ##@LR__6112
1a794     04 00 90 FD | 	jmp	#LR__2117
1a798                 | LR__2116
1a798                 | ' return readline
1a798     18 FB 01 F6 | 	mov	result1, local06
1a79c                 | LR__2117
1a79c     A7 F0 03 F6 | 	mov	ptra, fp
1a7a0     B2 00 A0 FD | 	call	#popregs_
1a7a4                 | _read_next_line_ret
1a7a4     2D 00 64 FD | 	ret
1a7a8                 | 
1a7a8                 | ' 
1a7a8                 | ' sub do_read
1a7a8                 | _do_read
1a7a8     11 4A 05 F6 | 	mov	COUNT_, #17
1a7ac     A8 00 A0 FD | 	call	#pushregs_
1a7b0     58 F1 07 F1 | 	add	ptra, #344
1a7b4     4A 00 00 FF 
1a7b8     80 E4 05 F1 | 	add	objptr, ##38016
1a7bc     F2 FE 01 FB | 	rdlong	result3, objptr
1a7c0     FF FC 01 F6 | 	mov	result2, result3
1a7c4     01 FC 65 F0 | 	shl	result2, #1
1a7c8     FF FC 01 F1 | 	add	result2, result3
1a7cc     02 FC 65 F0 | 	shl	result2, #2
1a7d0     03 00 00 FF 
1a7d4     04 E4 85 F1 | 	sub	objptr, ##1540
1a7d8     F2 FC 01 F1 | 	add	result2, objptr
1a7dc     FE FC 01 FB | 	rdlong	result2, result2
1a7e0     08 4E 05 F1 | 	add	fp, #8
1a7e4     A7 FC 61 FC | 	wrlong	result2, fp
1a7e8                 | ' 
1a7e8                 | ' 
1a7e8                 | ' numpar=compiledline(lineptr_e).result.uresult
1a7e8                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
1a7e8     08 4E 85 F1 | 	sub	fp, #8
1a7ec     01 FC 15 F2 | 	cmp	result2, #1 wc
1a7f0     47 00 00 FF 
1a7f4     7C E4 85 F1 | 	sub	objptr, ##36476
1a7f8     14 00 90 CD |  if_b	jmp	#LR__2120
1a7fc     08 4E 05 F1 | 	add	fp, #8
1a800     A7 FC 01 FB | 	rdlong	result2, fp
1a804     08 4E 85 F1 | 	sub	fp, #8
1a808     41 FC 15 F2 | 	cmp	result2, #65 wc
1a80c     50 00 90 CD |  if_b	jmp	#LR__2121
1a810                 | LR__2120
1a810     00 12 06 F6 | 	mov	arg01, #0
1a814     F4 2F B1 FD | 	call	#__system___getiolock_0620
1a818     FD 12 02 F6 | 	mov	arg01, result1
1a81c     3C D3 B0 FD | 	call	#__system___lockmem
1a820     C1 01 00 FF 
1a824     84 14 06 F6 | 	mov	arg02, ##@LR__6113
1a828     00 12 06 F6 | 	mov	arg01, #0
1a82c     00 16 06 F6 | 	mov	arg03, #0
1a830     20 E0 B0 FD | 	call	#__system___basic_print_string
1a834     00 12 06 F6 | 	mov	arg01, #0
1a838     D0 2F B1 FD | 	call	#__system___getiolock_0620
1a83c     FD 00 68 FC | 	wrlong	#0, result1
1a840     50 00 00 FF 
1a844     F0 E4 05 F1 | 	add	objptr, ##41200
1a848     F2 14 02 FB | 	rdlong	arg02, objptr
1a84c     50 00 00 FF 
1a850     F0 E4 85 F1 | 	sub	objptr, ##41200
1a854     27 12 06 F6 | 	mov	arg01, #39
1a858     A0 98 B0 FD | 	call	#_printerror
1a85c     D0 0C 90 FD | 	jmp	#LR__2171
1a860                 | LR__2121
1a860     08 4E 05 F1 | 	add	fp, #8
1a864     A7 16 02 FB | 	rdlong	arg03, fp
1a868     01 16 86 F1 | 	sub	arg03, #1
1a86c     28 4F 05 F1 | 	add	fp, #296
1a870     A7 16 62 FC | 	wrlong	arg03, fp
1a874     30 4F 85 F1 | 	sub	fp, #304
1a878                 | ' i=numpar-1
1a878                 | ' if readline="" then readline=read_next_line() ': print readline
1a878     52 00 00 FF 
1a87c     14 E5 05 F1 | 	add	objptr, ##42260
1a880     F2 12 02 FB | 	rdlong	arg01, objptr
1a884     52 00 00 FF 
1a888     14 E5 85 F1 | 	sub	objptr, ##42260
1a88c     C1 01 00 FF 
1a890     8E 14 06 F6 | 	mov	arg02, ##@LR__6114
1a894     EC D2 B0 FD | 	call	#__system___string_cmp
1a898     00 FA 0D F2 | 	cmp	result1, #0 wz
1a89c     18 00 90 5D |  if_ne	jmp	#LR__2122
1a8a0     0C FD BF FD | 	call	#_read_next_line
1a8a4     52 00 00 FF 
1a8a8     14 E5 05 F1 | 	add	objptr, ##42260
1a8ac     F2 FA 61 FC | 	wrlong	result1, objptr
1a8b0     52 00 00 FF 
1a8b4     14 E5 85 F1 | 	sub	objptr, ##42260
1a8b8                 | LR__2122
1a8b8                 | ' if readline="" then printerror(55,runheader(0)) :return
1a8b8     52 00 00 FF 
1a8bc     14 E5 05 F1 | 	add	objptr, ##42260
1a8c0     F2 12 02 FB | 	rdlong	arg01, objptr
1a8c4     52 00 00 FF 
1a8c8     14 E5 85 F1 | 	sub	objptr, ##42260
1a8cc     C1 01 00 FF 
1a8d0     8F 14 06 F6 | 	mov	arg02, ##@LR__6115
1a8d4     AC D2 B0 FD | 	call	#__system___string_cmp
1a8d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a8dc     20 00 90 5D |  if_ne	jmp	#LR__2123
1a8e0     50 00 00 FF 
1a8e4     F0 E4 05 F1 | 	add	objptr, ##41200
1a8e8     F2 14 02 FB | 	rdlong	arg02, objptr
1a8ec     50 00 00 FF 
1a8f0     F0 E4 85 F1 | 	sub	objptr, ##41200
1a8f4     37 12 06 F6 | 	mov	arg01, #55
1a8f8     00 98 B0 FD | 	call	#_printerror
1a8fc     30 0C 90 FD | 	jmp	#LR__2171
1a900                 | LR__2123
1a900     34 4F 05 F1 | 	add	fp, #308
1a904     A7 00 68 FC | 	wrlong	#0, fp
1a908     2C 4F 85 F1 | 	sub	fp, #300
1a90c     A7 26 02 FB | 	rdlong	local01, fp
1a910     01 26 86 F1 | 	sub	local01, #1
1a914     28 4F 05 F1 | 	add	fp, #296
1a918     A7 26 62 FC | 	wrlong	local01, fp
1a91c     30 4F 85 F1 | 	sub	fp, #304
1a920                 | ' j=0
1a920                 | ' i=numpar-1
1a920                 | ' do
1a920                 | LR__2124
1a920                 | '   do
1a920                 | LR__2125
1a920     52 00 00 FF 
1a924     14 E5 05 F1 | 	add	objptr, ##42260
1a928     F2 14 02 FB | 	rdlong	arg02, objptr
1a92c     52 00 00 FF 
1a930     14 E5 85 F1 | 	sub	objptr, ##42260
1a934     C1 01 00 FF 
1a938     90 16 06 F6 | 	mov	arg03, ##@LR__6116
1a93c     01 12 06 F6 | 	mov	arg01, #1
1a940     E0 F7 B0 FD | 	call	#__system__Instr
1a944     0C 4E 05 F1 | 	add	fp, #12
1a948     A7 FA 61 FC | 	wrlong	result1, fp
1a94c                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
1a94c     0C 4E 85 F1 | 	sub	fp, #12
1a950     01 FA 15 F2 | 	cmp	result1, #1 wc
1a954     3C 00 90 CD |  if_b	jmp	#LR__2126
1a958     52 00 00 FF 
1a95c     14 E5 05 F1 | 	add	objptr, ##42260
1a960     F2 12 02 FB | 	rdlong	arg01, objptr
1a964     52 00 00 FF 
1a968     14 E5 85 F1 | 	sub	objptr, ##42260
1a96c     0C 4E 05 F1 | 	add	fp, #12
1a970     A7 14 02 FB | 	rdlong	arg02, fp
1a974     0C 4E 85 F1 | 	sub	fp, #12
1a978     01 14 86 F1 | 	sub	arg02, #1
1a97c     5C F2 B0 FD | 	call	#__system__Left_S
1a980     52 00 00 FF 
1a984     14 E5 05 F1 | 	add	objptr, ##42260
1a988     F2 FA 61 FC | 	wrlong	result1, objptr
1a98c     52 00 00 FF 
1a990     14 E5 85 F1 | 	sub	objptr, ##42260
1a994                 | LR__2126
1a994     52 00 00 FF 
1a998     14 E5 05 F1 | 	add	objptr, ##42260
1a99c     F2 14 02 FB | 	rdlong	arg02, objptr
1a9a0     52 00 00 FF 
1a9a4     14 E5 85 F1 | 	sub	objptr, ##42260
1a9a8     C1 01 00 FF 
1a9ac     92 16 06 F6 | 	mov	arg03, ##@LR__6117
1a9b0     01 12 06 F6 | 	mov	arg01, #1
1a9b4     6C F7 B0 FD | 	call	#__system__Instr
1a9b8     0C 4E 05 F1 | 	add	fp, #12
1a9bc     A7 FA 61 FC | 	wrlong	result1, fp
1a9c0                 | '     comma=instr(1,readline,",")  
1a9c0                 | '       if comma>0  then 
1a9c0     0C 4E 85 F1 | 	sub	fp, #12
1a9c4     01 FA 15 F2 | 	cmp	result1, #1 wc
1a9c8     98 00 90 CD |  if_b	jmp	#LR__2129
1a9cc     52 00 00 FF 
1a9d0     14 E5 05 F1 | 	add	objptr, ##42260
1a9d4     F2 12 02 FB | 	rdlong	arg01, objptr
1a9d8     52 00 00 FF 
1a9dc     14 E5 85 F1 | 	sub	objptr, ##42260
1a9e0     0C 4E 05 F1 | 	add	fp, #12
1a9e4     A7 14 02 FB | 	rdlong	arg02, fp
1a9e8     0C 4E 85 F1 | 	sub	fp, #12
1a9ec     01 14 86 F1 | 	sub	arg02, #1
1a9f0     E8 F1 B0 FD | 	call	#__system__Left_S
1a9f4     04 4E 05 F1 | 	add	fp, #4
1a9f8     A7 FA 61 FC | 	wrlong	result1, fp
1a9fc     04 4E 85 F1 | 	sub	fp, #4
1aa00     52 00 00 FF 
1aa04     14 E5 05 F1 | 	add	objptr, ##42260
1aa08     F2 12 02 FB | 	rdlong	arg01, objptr
1aa0c     09 27 02 F6 | 	mov	local01, arg01
1aa10     52 00 00 FF 
1aa14     14 E5 85 F1 | 	sub	objptr, ##42260
1aa18     09 29 02 F6 | 	mov	local02, arg01
1aa1c     97 06 48 FB | 	callpa	#(@LR__2128-@LR__2127)>>2,fcache_load_ptr_
1aa20                 | LR__2127
1aa20     14 FB C9 FA | 	rdbyte	result1, local02 wz
1aa24     01 28 06 51 |  if_ne	add	local02, #1
1aa28     F4 FF 9F 5D |  if_ne	jmp	#LR__2127
1aa2c                 | LR__2128
1aa2c     09 29 82 F1 | 	sub	local02, arg01
1aa30     14 15 02 F6 | 	mov	arg02, local02
1aa34     0C 4E 05 F1 | 	add	fp, #12
1aa38     A7 16 02 FB | 	rdlong	arg03, fp
1aa3c     0C 4E 85 F1 | 	sub	fp, #12
1aa40     0B 15 82 F1 | 	sub	arg02, arg03
1aa44     13 13 02 F6 | 	mov	arg01, local01
1aa48     18 F2 B0 FD | 	call	#__system__Right_S
1aa4c     52 00 00 FF 
1aa50     14 E5 05 F1 | 	add	objptr, ##42260
1aa54     F2 FA 61 FC | 	wrlong	result1, objptr
1aa58     52 00 00 FF 
1aa5c     14 E5 85 F1 | 	sub	objptr, ##42260
1aa60     48 00 90 FD | 	jmp	#LR__2130
1aa64                 | LR__2129
1aa64     52 00 00 FF 
1aa68     14 E5 05 F1 | 	add	objptr, ##42260
1aa6c     F2 12 02 FB | 	rdlong	arg01, objptr
1aa70     52 00 00 FF 
1aa74     14 E5 85 F1 | 	sub	objptr, ##42260
1aa78     F0 F5 B0 FD | 	call	#__system__RTrim_S
1aa7c     FD 12 02 F6 | 	mov	arg01, result1
1aa80     28 F5 B0 FD | 	call	#__system__LTrim_S
1aa84     04 4E 05 F1 | 	add	fp, #4
1aa88     A7 FA 61 FC | 	wrlong	result1, fp
1aa8c     04 4E 85 F1 | 	sub	fp, #4
1aa90     C1 01 00 FF 
1aa94     94 26 06 F6 | 	mov	local01, ##@LR__6118
1aa98     52 00 00 FF 
1aa9c     14 E5 05 F1 | 	add	objptr, ##42260
1aaa0     F2 26 62 FC | 	wrlong	local01, objptr
1aaa4     52 00 00 FF 
1aaa8     14 E5 85 F1 | 	sub	objptr, ##42260
1aaac                 | LR__2130
1aaac                 | '      
1aaac                 | '      if part$<>"" then j=j+1
1aaac     04 4E 05 F1 | 	add	fp, #4
1aab0     A7 12 02 FB | 	rdlong	arg01, fp
1aab4     04 4E 85 F1 | 	sub	fp, #4
1aab8     C1 01 00 FF 
1aabc     95 14 06 F6 | 	mov	arg02, ##@LR__6119
1aac0     C0 D0 B0 FD | 	call	#__system___string_cmp
1aac4     00 FA 0D F2 | 	cmp	result1, #0 wz
1aac8     34 4F 05 51 |  if_ne	add	fp, #308
1aacc     A7 26 02 5B |  if_ne	rdlong	local01, fp
1aad0     01 26 06 51 |  if_ne	add	local01, #1
1aad4     A7 26 62 5C |  if_ne	wrlong	local01, fp
1aad8     34 4F 85 51 |  if_ne	sub	fp, #308
1aadc     30 4F 05 F1 | 	add	fp, #304
1aae0     A7 26 02 FB | 	rdlong	local01, fp
1aae4     02 26 66 F0 | 	shl	local01, #2
1aae8     04 4F 85 F1 | 	sub	fp, #260
1aaec     A7 26 02 F1 | 	add	local01, fp
1aaf0     28 4E 85 F1 | 	sub	fp, #40
1aaf4     A7 FA 01 FB | 	rdlong	result1, fp
1aaf8     13 FB 61 FC | 	wrlong	result1, local01
1aafc     2C 4F 05 F1 | 	add	fp, #300
1ab00     A7 26 02 FB | 	rdlong	local01, fp
1ab04     01 26 86 F1 | 	sub	local01, #1
1ab08     A7 26 62 FC | 	wrlong	local01, fp
1ab0c     30 4F 85 F1 | 	sub	fp, #304
1ab10                 | '      args(i)=part$  
1ab10                 | '      i=i-1
1ab10                 | '     if readline="" then readline=read_next_line() 
1ab10     52 00 00 FF 
1ab14     14 E5 05 F1 | 	add	objptr, ##42260
1ab18     F2 12 02 FB | 	rdlong	arg01, objptr
1ab1c     52 00 00 FF 
1ab20     14 E5 85 F1 | 	sub	objptr, ##42260
1ab24     C1 01 00 FF 
1ab28     96 14 06 F6 | 	mov	arg02, ##@LR__6120
1ab2c     54 D0 B0 FD | 	call	#__system___string_cmp
1ab30     00 FA 0D F2 | 	cmp	result1, #0 wz
1ab34     18 00 90 5D |  if_ne	jmp	#LR__2131
1ab38     74 FA BF FD | 	call	#_read_next_line
1ab3c     52 00 00 FF 
1ab40     14 E5 05 F1 | 	add	objptr, ##42260
1ab44     F2 FA 61 FC | 	wrlong	result1, objptr
1ab48     52 00 00 FF 
1ab4c     14 E5 85 F1 | 	sub	objptr, ##42260
1ab50                 | LR__2131
1ab50     30 4F 05 F1 | 	add	fp, #304
1ab54     A7 26 02 FB | 	rdlong	local01, fp
1ab58     30 4F 85 F1 | 	sub	fp, #304
1ab5c     00 26 56 F2 | 	cmps	local01, #0 wc
1ab60     28 00 90 CD |  if_b	jmp	#LR__2132
1ab64     52 00 00 FF 
1ab68     14 E5 05 F1 | 	add	objptr, ##42260
1ab6c     F2 12 02 FB | 	rdlong	arg01, objptr
1ab70     52 00 00 FF 
1ab74     14 E5 85 F1 | 	sub	objptr, ##42260
1ab78     C1 01 00 FF 
1ab7c     97 14 06 F6 | 	mov	arg02, ##@LR__6121
1ab80     00 D0 B0 FD | 	call	#__system___string_cmp
1ab84     00 FA 0D F2 | 	cmp	result1, #0 wz
1ab88     94 FD 9F 5D |  if_ne	jmp	#LR__2125
1ab8c                 | LR__2132
1ab8c     30 4F 05 F1 | 	add	fp, #304
1ab90     A7 26 02 FB | 	rdlong	local01, fp
1ab94     30 4F 85 F1 | 	sub	fp, #304
1ab98     00 26 56 F2 | 	cmps	local01, #0 wc
1ab9c     80 FD 9F 3D |  if_ae	jmp	#LR__2124
1aba0                 | ' if j<numpar then printerror(55,runheader(0))
1aba0     34 4F 05 F1 | 	add	fp, #308
1aba4     A7 26 02 FB | 	rdlong	local01, fp
1aba8     2C 4F 85 F1 | 	sub	fp, #300
1abac     A7 16 02 FB | 	rdlong	arg03, fp
1abb0     08 4E 85 F1 | 	sub	fp, #8
1abb4     0B 27 52 F2 | 	cmps	local01, arg03 wc
1abb8     50 00 00 CF 
1abbc     F0 E4 05 C1 |  if_b	add	objptr, ##41200
1abc0     F2 14 02 CB |  if_b	rdlong	arg02, objptr
1abc4     50 00 00 CF 
1abc8     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
1abcc     37 12 06 C6 |  if_b	mov	arg01, #55
1abd0     28 95 B0 CD |  if_b	call	#_printerror
1abd4                 | ' 
1abd4                 | ' for i=0 to numpar-1
1abd4     30 4F 05 F1 | 	add	fp, #304
1abd8     A7 00 68 FC | 	wrlong	#0, fp
1abdc     28 4F 85 F1 | 	sub	fp, #296
1abe0     A7 2A 02 FB | 	rdlong	local03, fp
1abe4     08 4E 85 F1 | 	sub	fp, #8
1abe8                 | LR__2133
1abe8     30 4F 05 F1 | 	add	fp, #304
1abec     A7 2C 02 FB | 	rdlong	local04, fp
1abf0     30 4F 85 F1 | 	sub	fp, #304
1abf4     16 27 02 F6 | 	mov	local01, local04
1abf8     15 27 52 F2 | 	cmps	local01, local03 wc
1abfc     30 09 90 3D |  if_ae	jmp	#LR__2170
1ac00                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1ac00     30 4F 05 F1 | 	add	fp, #304
1ac04     A7 16 02 FB | 	rdlong	arg03, fp
1ac08     02 16 66 F0 | 	shl	arg03, #2
1ac0c     04 4F 85 F1 | 	sub	fp, #260
1ac10     A7 16 02 F1 | 	add	arg03, fp
1ac14     0B 13 02 FB | 	rdlong	arg01, arg03
1ac18     2C 4E 85 F1 | 	sub	fp, #44
1ac1c     54 BE BE FD | 	call	#_isnum
1ac20     FD 2E 02 F6 | 	mov	local05, result1
1ac24     30 4F 05 F1 | 	add	fp, #304
1ac28     A7 16 02 FB | 	rdlong	arg03, fp
1ac2c     02 16 66 F0 | 	shl	arg03, #2
1ac30     04 4F 85 F1 | 	sub	fp, #260
1ac34     A7 30 02 F6 | 	mov	local06, fp
1ac38     A7 16 02 F1 | 	add	arg03, fp
1ac3c     0B 13 02 FB | 	rdlong	arg01, arg03
1ac40     2C 4E 85 F1 | 	sub	fp, #44
1ac44     18 C2 BE FD | 	call	#_isint
1ac48     FD 2E 2A F5 | 	andn	local05, result1 wz
1ac4c     52 00 00 5F 
1ac50     4C E5 05 51 |  if_ne	add	objptr, ##42316
1ac54     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
1ac58     52 00 00 5F 
1ac5c     4C E5 85 51 |  if_ne	sub	objptr, ##42316
1ac60                 | '   if isint(args(i)) then r=result_int 
1ac60     30 4F 05 F1 | 	add	fp, #304
1ac64     A7 2E 02 FB | 	rdlong	local05, fp
1ac68     02 2E 66 F0 | 	shl	local05, #2
1ac6c     04 4F 85 F1 | 	sub	fp, #260
1ac70     A7 2E 02 F1 | 	add	local05, fp
1ac74     17 13 02 FB | 	rdlong	arg01, local05
1ac78     2C 4E 85 F1 | 	sub	fp, #44
1ac7c     E0 C1 BE FD | 	call	#_isint
1ac80     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac84     52 00 00 5F 
1ac88     4C E5 05 51 |  if_ne	add	objptr, ##42316
1ac8c     F2 38 68 5C |  if_ne	wrlong	#28, objptr
1ac90     52 00 00 5F 
1ac94     4C E5 85 51 |  if_ne	sub	objptr, ##42316
1ac98                 | '   if isdec(args(i)) then r=result_uint 
1ac98     30 4F 05 F1 | 	add	fp, #304
1ac9c     A7 2E 02 FB | 	rdlong	local05, fp
1aca0     02 2E 66 F0 | 	shl	local05, #2
1aca4     04 4F 85 F1 | 	sub	fp, #260
1aca8     A7 2E 02 F1 | 	add	local05, fp
1acac     17 13 02 FB | 	rdlong	arg01, local05
1acb0     2C 4E 85 F1 | 	sub	fp, #44
1acb4     4C C4 BE FD | 	call	#_isdec
1acb8     00 FA 0D F2 | 	cmp	result1, #0 wz
1acbc     52 00 00 5F 
1acc0     4C E5 05 51 |  if_ne	add	objptr, ##42316
1acc4     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
1acc8     52 00 00 5F 
1accc     4C E5 85 51 |  if_ne	sub	objptr, ##42316
1acd0                 | '   if not isnum(args(i)) then 
1acd0     30 4F 05 F1 | 	add	fp, #304
1acd4     A7 2E 02 FB | 	rdlong	local05, fp
1acd8     02 2E 66 F0 | 	shl	local05, #2
1acdc     04 4F 85 F1 | 	sub	fp, #260
1ace0     A7 2E 02 F1 | 	add	local05, fp
1ace4     17 13 02 FB | 	rdlong	arg01, local05
1ace8     2C 4E 85 F1 | 	sub	fp, #44
1acec     84 BD BE FD | 	call	#_isnum
1acf0     FD 2E 22 F6 | 	not	local05, result1
1acf4     00 2E 0E F2 | 	cmp	local05, #0 wz
1acf8     4C 01 90 AD |  if_e	jmp	#LR__2138
1acfc     52 00 00 FF 
1ad00     4C E5 05 F1 | 	add	objptr, ##42316
1ad04     F2 56 68 FC | 	wrlong	#43, objptr
1ad08     52 00 00 FF 
1ad0c     4C E5 85 F1 | 	sub	objptr, ##42316
1ad10     30 4F 05 F1 | 	add	fp, #304
1ad14     A7 16 02 FB | 	rdlong	arg03, fp
1ad18     02 16 66 F0 | 	shl	arg03, #2
1ad1c     04 4F 85 F1 | 	sub	fp, #260
1ad20     A7 16 02 F1 | 	add	arg03, fp
1ad24     0B 13 02 FB | 	rdlong	arg01, arg03
1ad28     2C 4E 85 F1 | 	sub	fp, #44
1ad2c     09 29 02 F6 | 	mov	local02, arg01
1ad30     97 06 48 FB | 	callpa	#(@LR__2135-@LR__2134)>>2,fcache_load_ptr_
1ad34                 | LR__2134
1ad34     14 FB C9 FA | 	rdbyte	result1, local02 wz
1ad38     01 28 06 51 |  if_ne	add	local02, #1
1ad3c     F4 FF 9F 5D |  if_ne	jmp	#LR__2134
1ad40                 | LR__2135
1ad40     09 29 82 F1 | 	sub	local02, arg01
1ad44     14 FB 01 F6 | 	mov	result1, local02
1ad48     38 4F 05 F1 | 	add	fp, #312
1ad4c     A7 FA 61 FC | 	wrlong	result1, fp
1ad50     52 00 00 FF 
1ad54     D0 E4 05 F1 | 	add	objptr, ##42192
1ad58     F2 12 02 FB | 	rdlong	arg01, objptr
1ad5c     FD 12 82 F1 | 	sub	arg01, result1
1ad60     04 12 86 F1 | 	sub	arg01, #4
1ad64     03 12 26 F5 | 	andn	arg01, #3
1ad68     F2 12 62 FC | 	wrlong	arg01, objptr
1ad6c     52 00 00 FF 
1ad70     D0 E4 85 F1 | 	sub	objptr, ##42192
1ad74     A7 14 02 FB | 	rdlong	arg02, fp
1ad78     38 4F 85 F1 | 	sub	fp, #312
1ad7c     1C 95 B0 FD | 	call	#_pslpoke
1ad80                 | '     pslpoke memtop,l
1ad80                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1ad80     34 4F 05 F1 | 	add	fp, #308
1ad84     A7 02 68 FC | 	wrlong	#1, fp
1ad88     04 4E 05 F1 | 	add	fp, #4
1ad8c     A7 32 02 FB | 	rdlong	local07, fp
1ad90     38 4F 85 F1 | 	sub	fp, #312
1ad94     01 32 06 F1 | 	add	local07, #1
1ad98                 | LR__2136
1ad98     34 4F 05 F1 | 	add	fp, #308
1ad9c     A7 2E 02 FB | 	rdlong	local05, fp
1ada0     34 4F 85 F1 | 	sub	fp, #308
1ada4     19 2F 52 F2 | 	cmps	local05, local07 wc
1ada8     7C 00 90 3D |  if_ae	jmp	#LR__2137
1adac     52 00 00 FF 
1adb0     D0 E4 05 F1 | 	add	objptr, ##42192
1adb4     F2 30 02 FB | 	rdlong	local06, objptr
1adb8     52 00 00 FF 
1adbc     D0 E4 85 F1 | 	sub	objptr, ##42192
1adc0     03 30 06 F1 | 	add	local06, #3
1adc4     34 4F 05 F1 | 	add	fp, #308
1adc8     A7 34 02 FB | 	rdlong	local08, fp
1adcc     1A 31 02 F1 | 	add	local06, local08
1add0     04 4E 85 F1 | 	sub	fp, #4
1add4     A7 36 02 FB | 	rdlong	local09, fp
1add8     02 36 66 F0 | 	shl	local09, #2
1addc     04 4F 85 F1 | 	sub	fp, #260
1ade0     A7 38 02 F6 | 	mov	local10, fp
1ade4     A7 36 02 F1 | 	add	local09, fp
1ade8     1B 13 02 FB | 	rdlong	arg01, local09
1adec     2C 4E 85 F1 | 	sub	fp, #44
1adf0     01 3A 06 F6 | 	mov	local11, #1
1adf4     1A 15 02 F6 | 	mov	arg02, local08
1adf8     01 16 06 F6 | 	mov	arg03, #1
1adfc     F4 EE B0 FD | 	call	#__system__Mid_S
1ae00     FD 14 C2 FA | 	rdbyte	arg02, result1
1ae04     18 13 02 F6 | 	mov	arg01, local06
1ae08     20 95 B0 FD | 	call	#_pspoke
1ae0c     34 4F 05 F1 | 	add	fp, #308
1ae10     A7 30 02 FB | 	rdlong	local06, fp
1ae14     18 2F 02 F6 | 	mov	local05, local06
1ae18     01 2E 06 F1 | 	add	local05, #1
1ae1c     A7 2E 62 FC | 	wrlong	local05, fp
1ae20     34 4F 85 F1 | 	sub	fp, #308
1ae24     70 FF 9F FD | 	jmp	#LR__2136
1ae28                 | LR__2137
1ae28     52 00 00 FF 
1ae2c     D0 E4 05 F1 | 	add	objptr, ##42192
1ae30     F2 2E 02 FB | 	rdlong	local05, objptr
1ae34     52 00 00 FF 
1ae38     D0 E4 85 F1 | 	sub	objptr, ##42192
1ae3c     10 4E 05 F1 | 	add	fp, #16
1ae40     A7 2E 62 FC | 	wrlong	local05, fp
1ae44     10 4E 85 F1 | 	sub	fp, #16
1ae48                 | LR__2138
1ae48     D4 29 BF FD | 	call	#_pop
1ae4c     1C 4E 05 F1 | 	add	fp, #28
1ae50     A7 FA 61 FC | 	wrlong	result1, fp
1ae54     04 4E 05 F1 | 	add	fp, #4
1ae58     A7 FC 61 FC | 	wrlong	result2, fp
1ae5c     04 4E 05 F1 | 	add	fp, #4
1ae60     A7 FE 61 FC | 	wrlong	result3, fp
1ae64                 | '   t1=pop() 
1ae64                 | '   if i>=numpar-j then
1ae64     1C 4E 85 F1 | 	sub	fp, #28
1ae68     A7 2E 02 FB | 	rdlong	local05, fp
1ae6c     17 3D 02 F6 | 	mov	local12, local05
1ae70     2C 4F 05 F1 | 	add	fp, #300
1ae74     A7 3E 02 FB | 	rdlong	local13, fp
1ae78     1F 41 02 F6 | 	mov	local14, local13
1ae7c     20 3D 82 F1 | 	sub	local12, local14
1ae80     04 4E 85 F1 | 	sub	fp, #4
1ae84     A7 42 02 FB | 	rdlong	local15, fp
1ae88     30 4F 85 F1 | 	sub	fp, #304
1ae8c     21 45 02 F6 | 	mov	local16, local15
1ae90     1E 45 52 F2 | 	cmps	local16, local12 wc
1ae94     80 06 90 CD |  if_b	jmp	#LR__2169
1ae98     20 4E 05 F1 | 	add	fp, #32
1ae9c     A7 3C 02 FB | 	rdlong	local12, fp
1aea0     0C 4E 85 F1 | 	sub	fp, #12
1aea4     A7 3C 62 FC | 	wrlong	local12, fp
1aea8                 | '     vartype=t1.result.twowords(1)
1aea8                 | '     select case vartype
1aea8     14 4E 85 F1 | 	sub	fp, #20
1aeac     1E 47 0A F6 | 	mov	local17, local12 wz
1aeb0     64 00 90 AD |  if_e	jmp	#LR__2139
1aeb4     00 47 0E F2 | 	cmp	local17, #256 wz
1aeb8     6C 00 90 AD |  if_e	jmp	#LR__2140
1aebc     01 47 0E F2 | 	cmp	local17, #257 wz
1aec0     74 00 90 AD |  if_e	jmp	#LR__2141
1aec4     02 47 0E F2 | 	cmp	local17, #258 wz
1aec8     7C 00 90 AD |  if_e	jmp	#LR__2142
1aecc     03 47 0E F2 | 	cmp	local17, #259 wz
1aed0     84 00 90 AD |  if_e	jmp	#LR__2143
1aed4     04 47 0E F2 | 	cmp	local17, #260 wz
1aed8     8C 00 90 AD |  if_e	jmp	#LR__2144
1aedc     05 47 0E F2 | 	cmp	local17, #261 wz
1aee0     94 00 90 AD |  if_e	jmp	#LR__2145
1aee4     06 47 0E F2 | 	cmp	local17, #262 wz
1aee8     9C 00 90 AD |  if_e	jmp	#LR__2146
1aeec     07 47 0E F2 | 	cmp	local17, #263 wz
1aef0     A4 00 90 AD |  if_e	jmp	#LR__2147
1aef4     08 47 0E F2 | 	cmp	local17, #264 wz
1aef8     AC 00 90 AD |  if_e	jmp	#LR__2148
1aefc     09 47 0E F2 | 	cmp	local17, #265 wz
1af00     B4 00 90 AD |  if_e	jmp	#LR__2149
1af04     0A 47 0E F2 | 	cmp	local17, #266 wz
1af08     BC 00 90 AD |  if_e	jmp	#LR__2150
1af0c     0B 47 0E F2 | 	cmp	local17, #267 wz
1af10     C4 00 90 AD |  if_e	jmp	#LR__2151
1af14     D0 00 90 FD | 	jmp	#LR__2152
1af18                 | LR__2139
1af18     18 4E 05 F1 | 	add	fp, #24
1af1c     A7 18 68 FC | 	wrlong	#12, fp
1af20     18 4E 85 F1 | 	sub	fp, #24
1af24     CC 00 90 FD | 	jmp	#LR__2153
1af28                 | LR__2140
1af28     18 4E 05 F1 | 	add	fp, #24
1af2c     A7 18 68 FC | 	wrlong	#12, fp
1af30     18 4E 85 F1 | 	sub	fp, #24
1af34     BC 00 90 FD | 	jmp	#LR__2153
1af38                 | LR__2141
1af38     18 4E 05 F1 | 	add	fp, #24
1af3c     A7 02 68 FC | 	wrlong	#1, fp
1af40     18 4E 85 F1 | 	sub	fp, #24
1af44     AC 00 90 FD | 	jmp	#LR__2153
1af48                 | LR__2142
1af48     18 4E 05 F1 | 	add	fp, #24
1af4c     A7 02 68 FC | 	wrlong	#1, fp
1af50     18 4E 85 F1 | 	sub	fp, #24
1af54     9C 00 90 FD | 	jmp	#LR__2153
1af58                 | LR__2143
1af58     18 4E 05 F1 | 	add	fp, #24
1af5c     A7 04 68 FC | 	wrlong	#2, fp
1af60     18 4E 85 F1 | 	sub	fp, #24
1af64     8C 00 90 FD | 	jmp	#LR__2153
1af68                 | LR__2144
1af68     18 4E 05 F1 | 	add	fp, #24
1af6c     A7 04 68 FC | 	wrlong	#2, fp
1af70     18 4E 85 F1 | 	sub	fp, #24
1af74     7C 00 90 FD | 	jmp	#LR__2153
1af78                 | LR__2145
1af78     18 4E 05 F1 | 	add	fp, #24
1af7c     A7 08 68 FC | 	wrlong	#4, fp
1af80     18 4E 85 F1 | 	sub	fp, #24
1af84     6C 00 90 FD | 	jmp	#LR__2153
1af88                 | LR__2146
1af88     18 4E 05 F1 | 	add	fp, #24
1af8c     A7 08 68 FC | 	wrlong	#4, fp
1af90     18 4E 85 F1 | 	sub	fp, #24
1af94     5C 00 90 FD | 	jmp	#LR__2153
1af98                 | LR__2147
1af98     18 4E 05 F1 | 	add	fp, #24
1af9c     A7 10 68 FC | 	wrlong	#8, fp
1afa0     18 4E 85 F1 | 	sub	fp, #24
1afa4     4C 00 90 FD | 	jmp	#LR__2153
1afa8                 | LR__2148
1afa8     18 4E 05 F1 | 	add	fp, #24
1afac     A7 10 68 FC | 	wrlong	#8, fp
1afb0     18 4E 85 F1 | 	sub	fp, #24
1afb4     3C 00 90 FD | 	jmp	#LR__2153
1afb8                 | LR__2149
1afb8     18 4E 05 F1 | 	add	fp, #24
1afbc     A7 0C 68 FC | 	wrlong	#6, fp
1afc0     18 4E 85 F1 | 	sub	fp, #24
1afc4     2C 00 90 FD | 	jmp	#LR__2153
1afc8                 | LR__2150
1afc8     18 4E 05 F1 | 	add	fp, #24
1afcc     A7 10 68 FC | 	wrlong	#8, fp
1afd0     18 4E 85 F1 | 	sub	fp, #24
1afd4     1C 00 90 FD | 	jmp	#LR__2153
1afd8                 | LR__2151
1afd8     18 4E 05 F1 | 	add	fp, #24
1afdc     A7 0A 68 FC | 	wrlong	#5, fp
1afe0     18 4E 85 F1 | 	sub	fp, #24
1afe4     0C 00 90 FD | 	jmp	#LR__2153
1afe8                 | LR__2152
1afe8     18 4E 05 F1 | 	add	fp, #24
1afec     A7 18 68 FC | 	wrlong	#12, fp
1aff0     18 4E 85 F1 | 	sub	fp, #24
1aff4                 | LR__2153
1aff4                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1aff4     18 4E 05 F1 | 	add	fp, #24
1aff8     A7 3C 02 FB | 	rdlong	local12, fp
1affc     18 4E 85 F1 | 	sub	fp, #24
1b000     0C 3C 0E F2 | 	cmp	local12, #12 wz
1b004     74 01 90 5D |  if_ne	jmp	#LR__2158
1b008     1C 4E 05 F1 | 	add	fp, #28
1b00c     A7 3E 02 FB | 	rdlong	local13, fp
1b010     1C 4E 85 F1 | 	sub	fp, #28
1b014     00 04 00 FF 
1b018     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1b01c     5C 01 90 3D |  if_ae	jmp	#LR__2158
1b020                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1b020     52 00 00 FF 
1b024     4C E5 05 F1 | 	add	objptr, ##42316
1b028     F2 3C 02 FB | 	rdlong	local12, objptr
1b02c     52 00 00 FF 
1b030     4C E5 85 F1 | 	sub	objptr, ##42316
1b034     1C 3C 0E F2 | 	cmp	local12, #28 wz
1b038     38 00 90 5D |  if_ne	jmp	#LR__2154
1b03c     1C 4E 05 F1 | 	add	fp, #28
1b040     A7 3C 02 FB | 	rdlong	local12, fp
1b044     14 4F 05 F1 | 	add	fp, #276
1b048     A7 3E 02 FB | 	rdlong	local13, fp
1b04c     1F 45 02 F6 | 	mov	local16, local13
1b050     02 44 66 F0 | 	shl	local16, #2
1b054     04 4F 85 F1 | 	sub	fp, #260
1b058     A7 42 02 F6 | 	mov	local15, fp
1b05c     A7 44 02 F1 | 	add	local16, fp
1b060     22 13 02 FB | 	rdlong	arg01, local16
1b064     00 14 06 F6 | 	mov	arg02, #0
1b068     2C 4E 85 F1 | 	sub	fp, #44
1b06c     E0 FF B0 FD | 	call	#__system____builtin_atoi
1b070     1E FB 61 FC | 	wrlong	result1, local12
1b074                 | LR__2154
1b074                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1b074     52 00 00 FF 
1b078     4C E5 05 F1 | 	add	objptr, ##42316
1b07c     F2 3C 02 FB | 	rdlong	local12, objptr
1b080     52 00 00 FF 
1b084     4C E5 85 F1 | 	sub	objptr, ##42316
1b088     1D 3C 0E F2 | 	cmp	local12, #29 wz
1b08c     38 00 90 5D |  if_ne	jmp	#LR__2155
1b090     1C 4E 05 F1 | 	add	fp, #28
1b094     A7 3C 02 FB | 	rdlong	local12, fp
1b098     14 4F 05 F1 | 	add	fp, #276
1b09c     A7 3E 02 FB | 	rdlong	local13, fp
1b0a0     1F 45 02 F6 | 	mov	local16, local13
1b0a4     02 44 66 F0 | 	shl	local16, #2
1b0a8     04 4F 85 F1 | 	sub	fp, #260
1b0ac     A7 42 02 F6 | 	mov	local15, fp
1b0b0     A7 44 02 F1 | 	add	local16, fp
1b0b4     22 13 02 FB | 	rdlong	arg01, local16
1b0b8     00 14 06 F6 | 	mov	arg02, #0
1b0bc     2C 4E 85 F1 | 	sub	fp, #44
1b0c0     8C FF B0 FD | 	call	#__system____builtin_atoi
1b0c4     1E FB 61 FC | 	wrlong	result1, local12
1b0c8                 | LR__2155
1b0c8                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1b0c8     52 00 00 FF 
1b0cc     4C E5 05 F1 | 	add	objptr, ##42316
1b0d0     F2 3C 02 FB | 	rdlong	local12, objptr
1b0d4     52 00 00 FF 
1b0d8     4C E5 85 F1 | 	sub	objptr, ##42316
1b0dc     1E 3C 0E F2 | 	cmp	local12, #30 wz
1b0e0     3C 00 90 5D |  if_ne	jmp	#LR__2156
1b0e4     30 4F 05 F1 | 	add	fp, #304
1b0e8     A7 3E 02 FB | 	rdlong	local13, fp
1b0ec     02 3E 66 F0 | 	shl	local13, #2
1b0f0     04 4F 85 F1 | 	sub	fp, #260
1b0f4     A7 44 02 F6 | 	mov	local16, fp
1b0f8     A7 3E 02 F1 | 	add	local13, fp
1b0fc     1F 13 02 FB | 	rdlong	arg01, local13
1b100     2C 4E 85 F1 | 	sub	fp, #44
1b104     E0 00 B1 FD | 	call	#__system____builtin_atof
1b108     28 4E 05 F1 | 	add	fp, #40
1b10c     A7 FA 61 FC | 	wrlong	result1, fp
1b110     0C 4E 85 F1 | 	sub	fp, #12
1b114     A7 3C 02 FB | 	rdlong	local12, fp
1b118     1C 4E 85 F1 | 	sub	fp, #28
1b11c     1E FB 61 FC | 	wrlong	result1, local12
1b120                 | LR__2156
1b120                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1b120     52 00 00 FF 
1b124     4C E5 05 F1 | 	add	objptr, ##42316
1b128     F2 3C 02 FB | 	rdlong	local12, objptr
1b12c     52 00 00 FF 
1b130     4C E5 85 F1 | 	sub	objptr, ##42316
1b134     2B 3C 0E F2 | 	cmp	local12, #43 wz
1b138     18 00 90 5D |  if_ne	jmp	#LR__2157
1b13c     1C 4E 05 F1 | 	add	fp, #28
1b140     A7 12 02 FB | 	rdlong	arg01, fp
1b144     0C 4E 85 F1 | 	sub	fp, #12
1b148     A7 14 02 FB | 	rdlong	arg02, fp
1b14c     10 4E 85 F1 | 	sub	fp, #16
1b150     09 15 62 FC | 	wrlong	arg02, arg01
1b154                 | LR__2157
1b154     1C 4E 05 F1 | 	add	fp, #28
1b158     A7 12 02 FB | 	rdlong	arg01, fp
1b15c     1C 4E 85 F1 | 	sub	fp, #28
1b160     08 12 06 F1 | 	add	arg01, #8
1b164     52 00 00 FF 
1b168     4C E5 05 F1 | 	add	objptr, ##42316
1b16c     F2 14 02 FB | 	rdlong	arg02, objptr
1b170     52 00 00 FF 
1b174     4C E5 85 F1 | 	sub	objptr, ##42316
1b178     09 15 62 FC | 	wrlong	arg02, arg01
1b17c                 | LR__2158
1b17c                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1b17c     18 4E 05 F1 | 	add	fp, #24
1b180     A7 3C 02 FB | 	rdlong	local12, fp
1b184     18 4E 85 F1 | 	sub	fp, #24
1b188     0C 3C 0E F2 | 	cmp	local12, #12 wz
1b18c     94 01 90 5D |  if_ne	jmp	#LR__2163
1b190     1C 4E 05 F1 | 	add	fp, #28
1b194     A7 3E 02 FB | 	rdlong	local13, fp
1b198     1C 4E 85 F1 | 	sub	fp, #28
1b19c     00 04 00 FF 
1b1a0     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1b1a4     7C 01 90 CD |  if_b	jmp	#LR__2163
1b1a8                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1b1a8     52 00 00 FF 
1b1ac     4C E5 05 F1 | 	add	objptr, ##42316
1b1b0     F2 3C 02 FB | 	rdlong	local12, objptr
1b1b4     52 00 00 FF 
1b1b8     4C E5 85 F1 | 	sub	objptr, ##42316
1b1bc     1C 3C 0E F2 | 	cmp	local12, #28 wz
1b1c0     40 00 90 5D |  if_ne	jmp	#LR__2159
1b1c4     1C 4E 05 F1 | 	add	fp, #28
1b1c8     A7 3C 02 FB | 	rdlong	local12, fp
1b1cc     14 4F 05 F1 | 	add	fp, #276
1b1d0     A7 3E 02 FB | 	rdlong	local13, fp
1b1d4     1F 45 02 F6 | 	mov	local16, local13
1b1d8     02 44 66 F0 | 	shl	local16, #2
1b1dc     04 4F 85 F1 | 	sub	fp, #260
1b1e0     A7 42 02 F6 | 	mov	local15, fp
1b1e4     A7 44 02 F1 | 	add	local16, fp
1b1e8     22 13 02 FB | 	rdlong	arg01, local16
1b1ec     00 14 06 F6 | 	mov	arg02, #0
1b1f0     2C 4E 85 F1 | 	sub	fp, #44
1b1f4     58 FE B0 FD | 	call	#__system____builtin_atoi
1b1f8     FD 14 02 F6 | 	mov	arg02, result1
1b1fc     1E 13 02 F6 | 	mov	arg01, local12
1b200     98 90 B0 FD | 	call	#_pslpoke
1b204                 | LR__2159
1b204                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1b204     52 00 00 FF 
1b208     4C E5 05 F1 | 	add	objptr, ##42316
1b20c     F2 3C 02 FB | 	rdlong	local12, objptr
1b210     52 00 00 FF 
1b214     4C E5 85 F1 | 	sub	objptr, ##42316
1b218     1D 3C 0E F2 | 	cmp	local12, #29 wz
1b21c     40 00 90 5D |  if_ne	jmp	#LR__2160
1b220     1C 4E 05 F1 | 	add	fp, #28
1b224     A7 3C 02 FB | 	rdlong	local12, fp
1b228     14 4F 05 F1 | 	add	fp, #276
1b22c     A7 3E 02 FB | 	rdlong	local13, fp
1b230     1F 45 02 F6 | 	mov	local16, local13
1b234     02 44 66 F0 | 	shl	local16, #2
1b238     04 4F 85 F1 | 	sub	fp, #260
1b23c     A7 42 02 F6 | 	mov	local15, fp
1b240     A7 44 02 F1 | 	add	local16, fp
1b244     22 13 02 FB | 	rdlong	arg01, local16
1b248     00 14 06 F6 | 	mov	arg02, #0
1b24c     2C 4E 85 F1 | 	sub	fp, #44
1b250     FC FD B0 FD | 	call	#__system____builtin_atoi
1b254     FD 14 02 F6 | 	mov	arg02, result1
1b258     1E 13 02 F6 | 	mov	arg01, local12
1b25c     3C 90 B0 FD | 	call	#_pslpoke
1b260                 | LR__2160
1b260                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1b260     52 00 00 FF 
1b264     4C E5 05 F1 | 	add	objptr, ##42316
1b268     F2 3C 02 FB | 	rdlong	local12, objptr
1b26c     52 00 00 FF 
1b270     4C E5 85 F1 | 	sub	objptr, ##42316
1b274     1E 3C 0E F2 | 	cmp	local12, #30 wz
1b278     4C 00 90 5D |  if_ne	jmp	#LR__2161
1b27c     30 4F 05 F1 | 	add	fp, #304
1b280     A7 3E 02 FB | 	rdlong	local13, fp
1b284     02 3E 66 F0 | 	shl	local13, #2
1b288     04 4F 85 F1 | 	sub	fp, #260
1b28c     A7 44 02 F6 | 	mov	local16, fp
1b290     A7 3E 02 F1 | 	add	local13, fp
1b294     1F 13 02 FB | 	rdlong	arg01, local13
1b298     2C 4E 85 F1 | 	sub	fp, #44
1b29c     48 FF B0 FD | 	call	#__system____builtin_atof
1b2a0     28 4E 05 F1 | 	add	fp, #40
1b2a4     A7 FA 61 FC | 	wrlong	result1, fp
1b2a8     0C 4E 85 F1 | 	sub	fp, #12
1b2ac     A7 3C 02 FB | 	rdlong	local12, fp
1b2b0     0C 4E 05 F1 | 	add	fp, #12
1b2b4     A7 12 02 F6 | 	mov	arg01, fp
1b2b8     28 4E 85 F1 | 	sub	fp, #40
1b2bc     09 15 02 FB | 	rdlong	arg02, arg01
1b2c0     1E 13 02 F6 | 	mov	arg01, local12
1b2c4     D4 8F B0 FD | 	call	#_pslpoke
1b2c8                 | LR__2161
1b2c8                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1b2c8     52 00 00 FF 
1b2cc     4C E5 05 F1 | 	add	objptr, ##42316
1b2d0     F2 3C 02 FB | 	rdlong	local12, objptr
1b2d4     52 00 00 FF 
1b2d8     4C E5 85 F1 | 	sub	objptr, ##42316
1b2dc     2B 3C 0E F2 | 	cmp	local12, #43 wz
1b2e0     18 00 90 5D |  if_ne	jmp	#LR__2162
1b2e4     1C 4E 05 F1 | 	add	fp, #28
1b2e8     A7 12 02 FB | 	rdlong	arg01, fp
1b2ec     0C 4E 85 F1 | 	sub	fp, #12
1b2f0     A7 14 02 FB | 	rdlong	arg02, fp
1b2f4     10 4E 85 F1 | 	sub	fp, #16
1b2f8     A0 8F B0 FD | 	call	#_pslpoke
1b2fc                 | LR__2162
1b2fc     1C 4E 05 F1 | 	add	fp, #28
1b300     A7 12 02 FB | 	rdlong	arg01, fp
1b304     1C 4E 85 F1 | 	sub	fp, #28
1b308     08 12 06 F1 | 	add	arg01, #8
1b30c     52 00 00 FF 
1b310     4C E5 05 F1 | 	add	objptr, ##42316
1b314     F2 14 02 FB | 	rdlong	arg02, objptr
1b318     52 00 00 FF 
1b31c     4C E5 85 F1 | 	sub	objptr, ##42316
1b320     78 8F B0 FD | 	call	#_pslpoke
1b324                 | LR__2163
1b324                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1b324     18 4E 05 F1 | 	add	fp, #24
1b328     A7 3C 02 FB | 	rdlong	local12, fp
1b32c     18 4E 85 F1 | 	sub	fp, #24
1b330     05 3C 0E F2 | 	cmp	local12, #5 wz
1b334     52 00 00 AF 
1b338     4C E5 05 A1 |  if_e	add	objptr, ##42316
1b33c     F2 40 02 AB |  if_e	rdlong	local14, objptr
1b340     52 00 00 AF 
1b344     4C E5 85 A1 |  if_e	sub	objptr, ##42316
1b348     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1b34c     18 00 90 5D |  if_ne	jmp	#LR__2164
1b350     1C 4E 05 F1 | 	add	fp, #28
1b354     A7 12 02 FB | 	rdlong	arg01, fp
1b358     0C 4E 85 F1 | 	sub	fp, #12
1b35c     A7 14 02 FB | 	rdlong	arg02, fp
1b360     10 4E 85 F1 | 	sub	fp, #16
1b364     34 8F B0 FD | 	call	#_pslpoke
1b368                 | LR__2164
1b368                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1b368     18 4E 05 F1 | 	add	fp, #24
1b36c     A7 3C 02 FB | 	rdlong	local12, fp
1b370     18 4E 85 F1 | 	sub	fp, #24
1b374     04 3C 0E F2 | 	cmp	local12, #4 wz
1b378     54 00 90 5D |  if_ne	jmp	#LR__2165
1b37c     52 00 00 FF 
1b380     4C E5 05 F1 | 	add	objptr, ##42316
1b384     F2 40 02 FB | 	rdlong	local14, objptr
1b388     52 00 00 FF 
1b38c     4C E5 85 F1 | 	sub	objptr, ##42316
1b390     2B 40 0E F2 | 	cmp	local14, #43 wz
1b394     38 00 90 AD |  if_e	jmp	#LR__2165
1b398     1C 4E 05 F1 | 	add	fp, #28
1b39c     A7 3C 02 FB | 	rdlong	local12, fp
1b3a0     14 4F 05 F1 | 	add	fp, #276
1b3a4     A7 44 02 FB | 	rdlong	local16, fp
1b3a8     02 44 66 F0 | 	shl	local16, #2
1b3ac     04 4F 85 F1 | 	sub	fp, #260
1b3b0     A7 44 02 F1 | 	add	local16, fp
1b3b4     22 13 02 FB | 	rdlong	arg01, local16
1b3b8     00 14 06 F6 | 	mov	arg02, #0
1b3bc     2C 4E 85 F1 | 	sub	fp, #44
1b3c0     8C FC B0 FD | 	call	#__system____builtin_atoi
1b3c4     FD 14 02 F6 | 	mov	arg02, result1
1b3c8     1E 13 02 F6 | 	mov	arg01, local12
1b3cc     CC 8E B0 FD | 	call	#_pslpoke
1b3d0                 | LR__2165
1b3d0                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1b3d0     18 4E 05 F1 | 	add	fp, #24
1b3d4     A7 3C 02 FB | 	rdlong	local12, fp
1b3d8     18 4E 85 F1 | 	sub	fp, #24
1b3dc     02 3C 0E F2 | 	cmp	local12, #2 wz
1b3e0     54 00 90 5D |  if_ne	jmp	#LR__2166
1b3e4     52 00 00 FF 
1b3e8     4C E5 05 F1 | 	add	objptr, ##42316
1b3ec     F2 40 02 FB | 	rdlong	local14, objptr
1b3f0     52 00 00 FF 
1b3f4     4C E5 85 F1 | 	sub	objptr, ##42316
1b3f8     2B 40 0E F2 | 	cmp	local14, #43 wz
1b3fc     38 00 90 AD |  if_e	jmp	#LR__2166
1b400     1C 4E 05 F1 | 	add	fp, #28
1b404     A7 3C 02 FB | 	rdlong	local12, fp
1b408     14 4F 05 F1 | 	add	fp, #276
1b40c     A7 44 02 FB | 	rdlong	local16, fp
1b410     02 44 66 F0 | 	shl	local16, #2
1b414     04 4F 85 F1 | 	sub	fp, #260
1b418     A7 44 02 F1 | 	add	local16, fp
1b41c     22 13 02 FB | 	rdlong	arg01, local16
1b420     00 14 06 F6 | 	mov	arg02, #0
1b424     2C 4E 85 F1 | 	sub	fp, #44
1b428     24 FC B0 FD | 	call	#__system____builtin_atoi
1b42c     FD 14 02 F6 | 	mov	arg02, result1
1b430     1E 13 02 F6 | 	mov	arg01, local12
1b434     AC 8E B0 FD | 	call	#_psdpoke
1b438                 | LR__2166
1b438                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1b438     18 4E 05 F1 | 	add	fp, #24
1b43c     A7 3C 02 FB | 	rdlong	local12, fp
1b440     18 4E 85 F1 | 	sub	fp, #24
1b444     01 3C 0E F2 | 	cmp	local12, #1 wz
1b448     54 00 90 5D |  if_ne	jmp	#LR__2167
1b44c     52 00 00 FF 
1b450     4C E5 05 F1 | 	add	objptr, ##42316
1b454     F2 40 02 FB | 	rdlong	local14, objptr
1b458     52 00 00 FF 
1b45c     4C E5 85 F1 | 	sub	objptr, ##42316
1b460     2B 40 0E F2 | 	cmp	local14, #43 wz
1b464     38 00 90 AD |  if_e	jmp	#LR__2167
1b468     1C 4E 05 F1 | 	add	fp, #28
1b46c     A7 3C 02 FB | 	rdlong	local12, fp
1b470     14 4F 05 F1 | 	add	fp, #276
1b474     A7 44 02 FB | 	rdlong	local16, fp
1b478     02 44 66 F0 | 	shl	local16, #2
1b47c     04 4F 85 F1 | 	sub	fp, #260
1b480     A7 44 02 F1 | 	add	local16, fp
1b484     22 13 02 FB | 	rdlong	arg01, local16
1b488     00 14 06 F6 | 	mov	arg02, #0
1b48c     2C 4E 85 F1 | 	sub	fp, #44
1b490     BC FB B0 FD | 	call	#__system____builtin_atoi
1b494     FD 14 02 F6 | 	mov	arg02, result1
1b498     1E 13 02 F6 | 	mov	arg01, local12
1b49c     8C 8E B0 FD | 	call	#_pspoke
1b4a0                 | LR__2167
1b4a0                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1b4a0     18 4E 05 F1 | 	add	fp, #24
1b4a4     A7 3C 02 FB | 	rdlong	local12, fp
1b4a8     18 4E 85 F1 | 	sub	fp, #24
1b4ac     06 3C 0E F2 | 	cmp	local12, #6 wz
1b4b0     64 00 90 5D |  if_ne	jmp	#LR__2168
1b4b4     52 00 00 FF 
1b4b8     4C E5 05 F1 | 	add	objptr, ##42316
1b4bc     F2 40 02 FB | 	rdlong	local14, objptr
1b4c0     52 00 00 FF 
1b4c4     4C E5 85 F1 | 	sub	objptr, ##42316
1b4c8     2B 40 0E F2 | 	cmp	local14, #43 wz
1b4cc     48 00 90 AD |  if_e	jmp	#LR__2168
1b4d0     30 4F 05 F1 | 	add	fp, #304
1b4d4     A7 3E 02 FB | 	rdlong	local13, fp
1b4d8     02 3E 66 F0 | 	shl	local13, #2
1b4dc     04 4F 85 F1 | 	sub	fp, #260
1b4e0     A7 3E 02 F1 | 	add	local13, fp
1b4e4     1F 13 02 FB | 	rdlong	arg01, local13
1b4e8     2C 4E 85 F1 | 	sub	fp, #44
1b4ec     F8 FC B0 FD | 	call	#__system____builtin_atof
1b4f0     28 4E 05 F1 | 	add	fp, #40
1b4f4     A7 FA 61 FC | 	wrlong	result1, fp
1b4f8     0C 4E 85 F1 | 	sub	fp, #12
1b4fc     A7 3C 02 FB | 	rdlong	local12, fp
1b500     0C 4E 05 F1 | 	add	fp, #12
1b504     A7 12 02 F6 | 	mov	arg01, fp
1b508     28 4E 85 F1 | 	sub	fp, #40
1b50c     09 15 02 FB | 	rdlong	arg02, arg01
1b510     1E 13 02 F6 | 	mov	arg01, local12
1b514     84 8D B0 FD | 	call	#_pslpoke
1b518                 | LR__2168
1b518                 | LR__2169
1b518     30 4F 05 F1 | 	add	fp, #304
1b51c     A7 40 02 FB | 	rdlong	local14, fp
1b520     01 40 06 F1 | 	add	local14, #1
1b524     A7 40 62 FC | 	wrlong	local14, fp
1b528     30 4F 85 F1 | 	sub	fp, #304
1b52c     B8 F6 9F FD | 	jmp	#LR__2133
1b530                 | LR__2170
1b530                 | LR__2171
1b530     A7 F0 03 F6 | 	mov	ptra, fp
1b534     B2 00 A0 FD | 	call	#popregs_
1b538                 | _do_read_ret
1b538     2D 00 64 FD | 	ret
1b53c                 | 
1b53c                 | ' 
1b53c                 | ' '------------------- release
1b53c                 | ' 
1b53c                 | ' sub do_release
1b53c                 | _do_release
1b53c     00 4A 05 F6 | 	mov	COUNT_, #0
1b540     A8 00 A0 FD | 	call	#pushregs_
1b544     10 F0 07 F1 | 	add	ptra, #16
1b548     D4 22 BF FD | 	call	#_pop
1b54c     FF 14 02 F6 | 	mov	arg02, result3
1b550     A7 FA 61 FC | 	wrlong	result1, fp
1b554     04 4E 05 F1 | 	add	fp, #4
1b558     A7 FC 61 FC | 	wrlong	result2, fp
1b55c     04 4E 05 F1 | 	add	fp, #4
1b560     A7 14 62 FC | 	wrlong	arg02, fp
1b564     08 4E 85 F1 | 	sub	fp, #8
1b568     A7 12 02 F6 | 	mov	arg01, fp
1b56c     94 24 BF FD | 	call	#_converttoint
1b570     0C 4E 05 F1 | 	add	fp, #12
1b574     A7 FA 61 FC | 	wrlong	result1, fp
1b578                 | ' 
1b578                 | ' t1=pop()
1b578                 | ' channel=converttoint(t1)
1b578                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1b578     0C 4E 85 F1 | 	sub	fp, #12
1b57c     00 FA 55 F2 | 	cmps	result1, #0 wc
1b580     44 00 90 CD |  if_b	jmp	#LR__2180
1b584     0C 4E 05 F1 | 	add	fp, #12
1b588     A7 14 02 FB | 	rdlong	arg02, fp
1b58c     0C 4E 85 F1 | 	sub	fp, #12
1b590     08 14 56 F2 | 	cmps	arg02, #8 wc
1b594     30 00 90 3D |  if_ae	jmp	#LR__2180
1b598     37 00 00 FF 
1b59c     10 E4 05 F1 | 	add	objptr, ##28176
1b5a0     F2 12 02 FB | 	rdlong	arg01, objptr
1b5a4     37 00 00 FF 
1b5a8     10 E4 85 F1 | 	sub	objptr, ##28176
1b5ac     0C 4E 05 F1 | 	add	fp, #12
1b5b0     A7 14 02 FB | 	rdlong	arg02, fp
1b5b4     0C 4E 85 F1 | 	sub	fp, #12
1b5b8     06 14 66 F0 | 	shl	arg02, #6
1b5bc     0A 13 02 F1 | 	add	arg01, arg02
1b5c0     2C 12 06 F1 | 	add	arg01, #44
1b5c4     09 FF 69 FC | 	wrlong	#255, arg01
1b5c8                 | LR__2180
1b5c8     A7 F0 03 F6 | 	mov	ptra, fp
1b5cc     B2 00 A0 FD | 	call	#popregs_
1b5d0                 | _do_release_ret
1b5d0     2D 00 64 FD | 	ret
1b5d4                 | 
1b5d4                 | ' 
1b5d4                 | ' '------------------- restore
1b5d4                 | ' 
1b5d4                 | ' sub do_restore()
1b5d4                 | _do_restore
1b5d4     4A 00 00 FF 
1b5d8     88 E4 05 F1 | 	add	objptr, ##38024
1b5dc     F2 00 02 FB | 	rdlong	_var01, objptr
1b5e0     06 00 00 FF 
1b5e4     A4 E4 05 F1 | 	add	objptr, ##3236
1b5e8     F2 00 62 FC | 	wrlong	_var01, objptr
1b5ec     C1 01 00 FF 
1b5f0     98 00 06 F6 | 	mov	_var01, ##@LR__6122
1b5f4     01 00 00 FF 
1b5f8     E8 E5 05 F1 | 	add	objptr, ##1000
1b5fc     F2 00 62 FC | 	wrlong	_var01, objptr
1b600     52 00 00 FF 
1b604     14 E5 85 F1 | 	sub	objptr, ##42260
1b608                 | _do_restore_ret
1b608     2D 00 64 FD | 	ret
1b60c                 | 
1b60c                 | ' 
1b60c                 | ' '------------------- restorepalette
1b60c                 | ' 
1b60c                 | ' sub do_restorepalette()
1b60c                 | _do_restorepalette
1b60c     50 95 B0 FD | 	call	#_hg010b_spin2_restorepalette
1b610                 | _do_restorepalette_ret
1b610     2D 00 64 FD | 	ret
1b614                 | 
1b614                 | ' '------------------- return
1b614                 | ' 
1b614                 | ' sub do_return()
1b614                 | _do_return
1b614                 | ' if gosubtop>0 then
1b614     50 00 00 FF 
1b618     34 E5 05 F1 | 	add	objptr, ##41268
1b61c     F2 00 02 FB | 	rdlong	_var01, objptr
1b620     50 00 00 FF 
1b624     34 E5 85 F1 | 	sub	objptr, ##41268
1b628     01 00 56 F2 | 	cmps	_var01, #1 wc
1b62c     8C 00 90 CD |  if_b	jmp	#LR__2190
1b630     50 00 00 FF 
1b634     34 E5 05 F1 | 	add	objptr, ##41268
1b638     F2 00 02 FB | 	rdlong	_var01, objptr
1b63c     03 00 66 F0 | 	shl	_var01, #3
1b640     03 00 00 FF 
1b644     88 E5 85 F1 | 	sub	objptr, ##1928
1b648     F2 00 02 F1 | 	add	_var01, objptr
1b64c     00 01 02 FB | 	rdlong	_var01, _var01
1b650     03 00 00 FF 
1b654     0C E5 05 F1 | 	add	objptr, ##1804
1b658     F2 00 62 FC | 	wrlong	_var01, objptr
1b65c     7C E4 05 F1 | 	add	objptr, #124
1b660     F2 00 02 FB | 	rdlong	_var01, objptr
1b664     03 00 66 F0 | 	shl	_var01, #3
1b668     03 00 00 FF 
1b66c     88 E5 85 F1 | 	sub	objptr, ##1928
1b670     F2 00 02 F1 | 	add	_var01, objptr
1b674     04 00 06 F1 | 	add	_var01, #4
1b678     00 01 02 FB | 	rdlong	_var01, _var01
1b67c     03 00 00 FF 
1b680     10 E5 05 F1 | 	add	objptr, ##1808
1b684     F2 00 62 FC | 	wrlong	_var01, objptr
1b688     06 00 00 FF 
1b68c     40 E4 85 F1 | 	sub	objptr, ##3136
1b690     F2 00 02 FB | 	rdlong	_var01, objptr
1b694     01 00 86 F1 | 	sub	_var01, #1
1b698     04 E4 05 F1 | 	add	objptr, #4
1b69c     F2 00 62 FC | 	wrlong	_var01, objptr
1b6a0     06 00 00 FF 
1b6a4     B4 E4 05 F1 | 	add	objptr, ##3252
1b6a8     F2 00 02 FB | 	rdlong	_var01, objptr
1b6ac     01 00 86 F1 | 	sub	_var01, #1
1b6b0     F2 00 62 FC | 	wrlong	_var01, objptr
1b6b4     50 00 00 FF 
1b6b8     34 E5 85 F1 | 	sub	objptr, ##41268
1b6bc                 | LR__2190
1b6bc                 | _do_return_ret
1b6bc     2D 00 64 FD | 	ret
1b6c0                 | 
1b6c0                 | ' 
1b6c0                 | ' '------------------- right$
1b6c0                 | ' 
1b6c0                 | ' sub do_right
1b6c0                 | _do_right
1b6c0     00 4A 05 F6 | 	mov	COUNT_, #0
1b6c4     A8 00 A0 FD | 	call	#pushregs_
1b6c8     14 F0 07 F1 | 	add	ptra, #20
1b6cc     4A 00 00 FF 
1b6d0     80 E4 05 F1 | 	add	objptr, ##38016
1b6d4     F2 16 02 FB | 	rdlong	arg03, objptr
1b6d8     0B 15 02 F6 | 	mov	arg02, arg03
1b6dc     01 14 66 F0 | 	shl	arg02, #1
1b6e0     0B 15 02 F1 | 	add	arg02, arg03
1b6e4     02 14 66 F0 | 	shl	arg02, #2
1b6e8     03 00 00 FF 
1b6ec     04 E4 85 F1 | 	sub	objptr, ##1540
1b6f0     F2 14 02 F1 | 	add	arg02, objptr
1b6f4     0A 17 02 FB | 	rdlong	arg03, arg02
1b6f8     0C 4E 05 F1 | 	add	fp, #12
1b6fc     A7 16 62 FC | 	wrlong	arg03, fp
1b700                 | ' 
1b700                 | ' numpar=compiledline(lineptr_e).result.uresult
1b700                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1b700     0C 4E 85 F1 | 	sub	fp, #12
1b704     02 16 0E F2 | 	cmp	arg03, #2 wz
1b708     47 00 00 FF 
1b70c     7C E4 85 F1 | 	sub	objptr, ##36476
1b710     40 00 90 AD |  if_e	jmp	#LR__2200
1b714     00 12 06 F6 | 	mov	arg01, #0
1b718     F0 20 B1 FD | 	call	#__system___getiolock_0620
1b71c     FD 12 02 F6 | 	mov	arg01, result1
1b720     38 C4 B0 FD | 	call	#__system___lockmem
1b724     C1 01 00 FF 
1b728     99 14 06 F6 | 	mov	arg02, ##@LR__6123
1b72c     00 12 06 F6 | 	mov	arg01, #0
1b730     00 16 06 F6 | 	mov	arg03, #0
1b734     1C D1 B0 FD | 	call	#__system___basic_print_string
1b738     00 12 06 F6 | 	mov	arg01, #0
1b73c     CC 20 B1 FD | 	call	#__system___getiolock_0620
1b740     FD 00 68 FC | 	wrlong	#0, result1
1b744     27 12 06 F6 | 	mov	arg01, #39
1b748     00 14 06 F6 | 	mov	arg02, #0
1b74c     AC 89 B0 FD | 	call	#_printerror
1b750     EC 00 90 FD | 	jmp	#LR__2203
1b754                 | LR__2200
1b754     C8 20 BF FD | 	call	#_pop
1b758     FF 16 02 F6 | 	mov	arg03, result3
1b75c     A7 FA 61 FC | 	wrlong	result1, fp
1b760     04 4E 05 F1 | 	add	fp, #4
1b764     A7 FC 61 FC | 	wrlong	result2, fp
1b768     04 4E 05 F1 | 	add	fp, #4
1b76c     A7 16 62 FC | 	wrlong	arg03, fp
1b770     08 4E 85 F1 | 	sub	fp, #8
1b774     A7 12 02 F6 | 	mov	arg01, fp
1b778     88 22 BF FD | 	call	#_converttoint
1b77c     FD 16 02 F6 | 	mov	arg03, result1
1b780     10 4E 05 F1 | 	add	fp, #16
1b784     A7 16 62 FC | 	wrlong	arg03, fp
1b788     10 4E 85 F1 | 	sub	fp, #16
1b78c     90 20 BF FD | 	call	#_pop
1b790     FF 16 02 F6 | 	mov	arg03, result3
1b794     A7 FA 61 FC | 	wrlong	result1, fp
1b798     04 4E 05 F1 | 	add	fp, #4
1b79c     A7 FC 61 FC | 	wrlong	result2, fp
1b7a0     04 4E 05 F1 | 	add	fp, #4
1b7a4     A7 16 62 FC | 	wrlong	arg03, fp
1b7a8                 | ' t1=pop() : arg=converttoint(t1)
1b7a8                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1b7a8     08 4E 85 F1 | 	sub	fp, #8
1b7ac     2B 16 0E F2 | 	cmp	arg03, #43 wz
1b7b0     18 00 90 5D |  if_ne	jmp	#LR__2201
1b7b4     A7 12 02 FB | 	rdlong	arg01, fp
1b7b8     DC 21 BF FD | 	call	#_convertstring
1b7bc     A7 FA 61 FC | 	wrlong	result1, fp
1b7c0     08 4E 05 F1 | 	add	fp, #8
1b7c4     A7 3E 68 FC | 	wrlong	#31, fp
1b7c8     08 4E 85 F1 | 	sub	fp, #8
1b7cc                 | LR__2201
1b7cc                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1b7cc     08 4E 05 F1 | 	add	fp, #8
1b7d0     A7 16 02 FB | 	rdlong	arg03, fp
1b7d4     08 4E 85 F1 | 	sub	fp, #8
1b7d8     1F 16 0E F2 | 	cmp	arg03, #31 wz
1b7dc     40 00 90 AD |  if_e	jmp	#LR__2202
1b7e0     00 12 06 F6 | 	mov	arg01, #0
1b7e4     24 20 B1 FD | 	call	#__system___getiolock_0620
1b7e8     FD 12 02 F6 | 	mov	arg01, result1
1b7ec     6C C3 B0 FD | 	call	#__system___lockmem
1b7f0     C1 01 00 FF 
1b7f4     A2 14 06 F6 | 	mov	arg02, ##@LR__6124
1b7f8     00 12 06 F6 | 	mov	arg01, #0
1b7fc     00 16 06 F6 | 	mov	arg03, #0
1b800     50 D0 B0 FD | 	call	#__system___basic_print_string
1b804     00 12 06 F6 | 	mov	arg01, #0
1b808     00 20 B1 FD | 	call	#__system___getiolock_0620
1b80c     FD 00 68 FC | 	wrlong	#0, result1
1b810     0F 12 06 F6 | 	mov	arg01, #15
1b814     00 14 06 F6 | 	mov	arg02, #0
1b818     E0 88 B0 FD | 	call	#_printerror
1b81c     20 00 90 FD | 	jmp	#LR__2203
1b820                 | LR__2202
1b820     A7 12 02 FB | 	rdlong	arg01, fp
1b824     10 4E 05 F1 | 	add	fp, #16
1b828     A7 14 02 FB | 	rdlong	arg02, fp
1b82c     10 4E 85 F1 | 	sub	fp, #16
1b830     30 E4 B0 FD | 	call	#__system__Right_S
1b834     A7 FA 61 FC | 	wrlong	result1, fp
1b838     A7 12 02 F6 | 	mov	arg01, fp
1b83c     78 20 BF FD | 	call	#_push
1b840                 | LR__2203
1b840     A7 F0 03 F6 | 	mov	ptra, fp
1b844     B2 00 A0 FD | 	call	#popregs_
1b848                 | _do_right_ret
1b848     2D 00 64 FD | 	ret
1b84c                 | 
1b84c                 | ' 
1b84c                 | ' '------------------- rnd
1b84c                 | ' 
1b84c                 | ' sub do_rnd
1b84c                 | _do_rnd
1b84c     01 4A 05 F6 | 	mov	COUNT_, #1
1b850     A8 00 A0 FD | 	call	#pushregs_
1b854     10 F0 07 F1 | 	add	ptra, #16
1b858     4A 00 00 FF 
1b85c     80 E4 05 F1 | 	add	objptr, ##38016
1b860     F2 26 02 FB | 	rdlong	local01, objptr
1b864     13 17 02 F6 | 	mov	arg03, local01
1b868     01 16 66 F0 | 	shl	arg03, #1
1b86c     13 17 02 F1 | 	add	arg03, local01
1b870     02 16 66 F0 | 	shl	arg03, #2
1b874     03 00 00 FF 
1b878     04 E4 85 F1 | 	sub	objptr, ##1540
1b87c     F2 16 02 F1 | 	add	arg03, objptr
1b880     0B 17 02 FB | 	rdlong	arg03, arg03
1b884     0C 4E 05 F1 | 	add	fp, #12
1b888     A7 16 62 FC | 	wrlong	arg03, fp
1b88c                 | ' 
1b88c                 | ' numpar=compiledline(lineptr_e).result.uresult
1b88c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1b88c     0C 4E 85 F1 | 	sub	fp, #12
1b890     02 16 16 F2 | 	cmp	arg03, #2 wc
1b894     47 00 00 FF 
1b898     7C E4 85 F1 | 	sub	objptr, ##36476
1b89c     40 00 90 CD |  if_b	jmp	#LR__2210
1b8a0     00 12 06 F6 | 	mov	arg01, #0
1b8a4     64 1F B1 FD | 	call	#__system___getiolock_0620
1b8a8     FD 12 02 F6 | 	mov	arg01, result1
1b8ac     AC C2 B0 FD | 	call	#__system___lockmem
1b8b0     C1 01 00 FF 
1b8b4     AB 14 06 F6 | 	mov	arg02, ##@LR__6125
1b8b8     00 12 06 F6 | 	mov	arg01, #0
1b8bc     00 16 06 F6 | 	mov	arg03, #0
1b8c0     90 CF B0 FD | 	call	#__system___basic_print_string
1b8c4     00 12 06 F6 | 	mov	arg01, #0
1b8c8     40 1F B1 FD | 	call	#__system___getiolock_0620
1b8cc     FD 00 68 FC | 	wrlong	#0, result1
1b8d0     27 12 06 F6 | 	mov	arg01, #39
1b8d4     00 14 06 F6 | 	mov	arg02, #0
1b8d8     20 88 B0 FD | 	call	#_printerror
1b8dc     30 01 90 FD | 	jmp	#LR__2217
1b8e0                 | LR__2210
1b8e0                 | ' if numpar=0 then
1b8e0     0C 4E 05 F1 | 	add	fp, #12
1b8e4     A7 FE 09 FB | 	rdlong	result3, fp wz
1b8e8     0C 4E 85 F1 | 	sub	fp, #12
1b8ec     20 00 90 5D |  if_ne	jmp	#LR__2211
1b8f0     08 4E 05 F1 | 	add	fp, #8
1b8f4     A7 3A 68 FC | 	wrlong	#29, fp
1b8f8     08 4E 85 F1 | 	sub	fp, #8
1b8fc     1B FA 61 FD | 	getrnd	result1
1b900     A7 FA 61 FC | 	wrlong	result1, fp
1b904     A7 12 02 F6 | 	mov	arg01, fp
1b908     AC 1F BF FD | 	call	#_push
1b90c     00 01 90 FD | 	jmp	#LR__2216
1b910                 | LR__2211
1b910     0C 1F BF FD | 	call	#_pop
1b914     A7 FA 61 FC | 	wrlong	result1, fp
1b918     04 4E 05 F1 | 	add	fp, #4
1b91c     A7 FC 61 FC | 	wrlong	result2, fp
1b920     04 4E 05 F1 | 	add	fp, #4
1b924     A7 FE 61 FC | 	wrlong	result3, fp
1b928                 | '   t1=pop()
1b928                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1b928     08 4E 85 F1 | 	sub	fp, #8
1b92c     1C FE 0D F2 | 	cmp	result3, #28 wz
1b930     08 4E 05 51 |  if_ne	add	fp, #8
1b934     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b938     08 4E 85 51 |  if_ne	sub	fp, #8
1b93c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1b940     2C 00 90 5D |  if_ne	jmp	#LR__2212
1b944     1B FA 61 FD | 	getrnd	result1
1b948     A7 26 02 FB | 	rdlong	local01, fp
1b94c     13 FB 11 FD | 	qdiv	result1, local01
1b950     A7 12 02 F6 | 	mov	arg01, fp
1b954     19 26 62 FD | 	getqy	local01
1b958     A7 26 62 FC | 	wrlong	local01, fp
1b95c     08 4E 05 F1 | 	add	fp, #8
1b960     A7 3A 68 FC | 	wrlong	#29, fp
1b964     08 4E 85 F1 | 	sub	fp, #8
1b968     4C 1F BF FD | 	call	#_push
1b96c     A0 00 90 FD | 	jmp	#LR__2215
1b970                 | LR__2212
1b970     08 4E 05 F1 | 	add	fp, #8
1b974     A7 26 02 FB | 	rdlong	local01, fp
1b978     08 4E 85 F1 | 	sub	fp, #8
1b97c     1E 26 0E F2 | 	cmp	local01, #30 wz
1b980     48 00 90 5D |  if_ne	jmp	#LR__2213
1b984     A7 12 02 FB | 	rdlong	arg01, fp
1b988     00 C0 24 FF 
1b98c     00 14 06 F6 | 	mov	arg02, ##1233125376
1b990     48 F2 B0 FD | 	call	#__system___float_div
1b994     FD 26 02 F6 | 	mov	local01, result1
1b998     1B 12 62 FD | 	getrnd	arg01
1b99c     74 13 06 F4 | 	bitl	arg01, #372
1b9a0     30 EC B0 FD | 	call	#__system___float_fromuns
1b9a4     FD 14 02 F6 | 	mov	arg02, result1
1b9a8     13 13 02 F6 | 	mov	arg01, local01
1b9ac     28 F0 B0 FD | 	call	#__system___float_mul
1b9b0     A7 FA 61 FC | 	wrlong	result1, fp
1b9b4     08 4E 05 F1 | 	add	fp, #8
1b9b8     A7 3C 68 FC | 	wrlong	#30, fp
1b9bc     08 4E 85 F1 | 	sub	fp, #8
1b9c0     A7 12 02 F6 | 	mov	arg01, fp
1b9c4     F0 1E BF FD | 	call	#_push
1b9c8     44 00 90 FD | 	jmp	#LR__2214
1b9cc                 | LR__2213
1b9cc                 | '     print "rnd: "; : printerror(40) 
1b9cc     00 12 06 F6 | 	mov	arg01, #0
1b9d0     38 1E B1 FD | 	call	#__system___getiolock_0620
1b9d4     FD 12 02 F6 | 	mov	arg01, result1
1b9d8     80 C1 B0 FD | 	call	#__system___lockmem
1b9dc     C1 01 00 FF 
1b9e0     B1 14 06 F6 | 	mov	arg02, ##@LR__6126
1b9e4     00 12 06 F6 | 	mov	arg01, #0
1b9e8     00 16 06 F6 | 	mov	arg03, #0
1b9ec     64 CE B0 FD | 	call	#__system___basic_print_string
1b9f0     00 12 06 F6 | 	mov	arg01, #0
1b9f4     14 1E B1 FD | 	call	#__system___getiolock_0620
1b9f8     FD 00 68 FC | 	wrlong	#0, result1
1b9fc     28 12 06 F6 | 	mov	arg01, #40
1ba00     00 14 06 F6 | 	mov	arg02, #0
1ba04     F4 86 B0 FD | 	call	#_printerror
1ba08     A7 12 02 F6 | 	mov	arg01, fp
1ba0c     A8 1E BF FD | 	call	#_push
1ba10                 | LR__2214
1ba10                 | LR__2215
1ba10                 | LR__2216
1ba10                 | LR__2217
1ba10     A7 F0 03 F6 | 	mov	ptra, fp
1ba14     B2 00 A0 FD | 	call	#popregs_
1ba18                 | _do_rnd_ret
1ba18     2D 00 64 FD | 	ret
1ba1c                 | 
1ba1c                 | ' 
1ba1c                 | ' '-------------------- round
1ba1c                 | ' 
1ba1c                 | ' sub do_round
1ba1c                 | _do_round
1ba1c     00 4A 05 F6 | 	mov	COUNT_, #0
1ba20     A8 00 A0 FD | 	call	#pushregs_
1ba24     0C F0 07 F1 | 	add	ptra, #12
1ba28     F4 1D BF FD | 	call	#_pop
1ba2c     A7 FA 61 FC | 	wrlong	result1, fp
1ba30     04 4E 05 F1 | 	add	fp, #4
1ba34     A7 FC 61 FC | 	wrlong	result2, fp
1ba38     04 4E 05 F1 | 	add	fp, #4
1ba3c     A7 FE 61 FC | 	wrlong	result3, fp
1ba40     08 4E 85 F1 | 	sub	fp, #8
1ba44     A7 12 02 F6 | 	mov	arg01, fp
1ba48     B8 1F BF FD | 	call	#_converttoint
1ba4c     A7 FA 61 FC | 	wrlong	result1, fp
1ba50     08 4E 05 F1 | 	add	fp, #8
1ba54     A7 38 68 FC | 	wrlong	#28, fp
1ba58     08 4E 85 F1 | 	sub	fp, #8
1ba5c     A7 12 02 F6 | 	mov	arg01, fp
1ba60     54 1E BF FD | 	call	#_push
1ba64     A7 F0 03 F6 | 	mov	ptra, fp
1ba68     B2 00 A0 FD | 	call	#popregs_
1ba6c                 | _do_round_ret
1ba6c     2D 00 64 FD | 	ret
1ba70                 | 
1ba70                 | ' 
1ba70                 | ' '-------------------- rqpin
1ba70                 | ' 
1ba70                 | ' sub do_rqpin
1ba70                 | _do_rqpin
1ba70     00 4A 05 F6 | 	mov	COUNT_, #0
1ba74     A8 00 A0 FD | 	call	#pushregs_
1ba78     0C F0 07 F1 | 	add	ptra, #12
1ba7c     A0 1D BF FD | 	call	#_pop
1ba80     A7 FA 61 FC | 	wrlong	result1, fp
1ba84     04 4E 05 F1 | 	add	fp, #4
1ba88     A7 FC 61 FC | 	wrlong	result2, fp
1ba8c     04 4E 05 F1 | 	add	fp, #4
1ba90     A7 FE 61 FC | 	wrlong	result3, fp
1ba94     08 4E 85 F1 | 	sub	fp, #8
1ba98     A7 12 02 F6 | 	mov	arg01, fp
1ba9c     64 1F BF FD | 	call	#_converttoint
1baa0     FD 12 02 F6 | 	mov	arg01, result1
1baa4     00 FA 05 F6 | 	mov	result1, #0
1baa8     09 FB 81 FA | 	rqpin	result1, arg01
1baac     52 00 00 FF 
1bab0     4C E5 05 F1 | 	add	objptr, ##42316
1bab4     F2 FA 61 FC | 	wrlong	result1, objptr
1bab8     52 00 00 FF 
1babc     4C E5 85 F1 | 	sub	objptr, ##42316
1bac0     08 4E 05 F1 | 	add	fp, #8
1bac4     A7 3A 68 FC | 	wrlong	#29, fp
1bac8     08 4E 85 F1 | 	sub	fp, #8
1bacc     A7 08 68 FC | 	wrlong	#4, fp
1bad0     A7 12 02 F6 | 	mov	arg01, fp
1bad4     E0 1D BF FD | 	call	#_push
1bad8     A7 F0 03 F6 | 	mov	ptra, fp
1badc     B2 00 A0 FD | 	call	#popregs_
1bae0                 | _do_rqpin_ret
1bae0     2D 00 64 FD | 	ret
1bae4                 | 
1bae4                 | ' 
1bae4                 | ' ' ------------------ run
1bae4                 | ' 
1bae4                 | ' sub do_run
1bae4                 | _do_run
1bae4     04 4A 05 F6 | 	mov	COUNT_, #4
1bae8     A8 00 A0 FD | 	call	#pushregs_
1baec     4A 00 00 FF 
1baf0     80 E4 05 F1 | 	add	objptr, ##38016
1baf4     F2 26 02 FB | 	rdlong	local01, objptr
1baf8     06 00 00 FF 
1bafc     38 E4 05 F1 | 	add	objptr, ##3128
1bb00     F2 28 02 FB | 	rdlong	local02, objptr
1bb04     04 E4 05 F1 | 	add	objptr, #4
1bb08     F2 2A 02 FB | 	rdlong	local03, objptr
1bb0c     13 19 02 F6 | 	mov	arg04, local01
1bb10     0C 17 02 F6 | 	mov	arg03, arg04
1bb14     01 16 66 F0 | 	shl	arg03, #1
1bb18     0C 17 02 F1 | 	add	arg03, arg04
1bb1c     02 16 66 F0 | 	shl	arg03, #2
1bb20     09 00 00 FF 
1bb24     40 E4 85 F1 | 	sub	objptr, ##4672
1bb28     F2 16 02 F1 | 	add	arg03, objptr
1bb2c     0B 15 02 FB | 	rdlong	arg02, arg03
1bb30                 | ' 
1bb30                 | ' r_lineptr_e=lineptr_e
1bb30                 | ' r_runptr=runptr
1bb30                 | ' r_runptr2=runptr2
1bb30                 | ' 
1bb30                 | ' numpar=compiledline(lineptr_e).result.uresult
1bb30                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1bb30     01 14 0E F2 | 	cmp	arg02, #1 wz
1bb34     47 00 00 FF 
1bb38     7C E4 85 F1 | 	sub	objptr, ##36476
1bb3c     00 12 06 A6 |  if_e	mov	arg01, #0
1bb40     C4 9B BF AD |  if_e	call	#_do_load
1bb44     4A 00 00 FF 
1bb48     88 E4 05 F1 | 	add	objptr, ##38024
1bb4c     F2 18 02 FB | 	rdlong	arg04, objptr
1bb50     06 00 00 FF 
1bb54     30 E4 05 F1 | 	add	objptr, ##3120
1bb58     F2 18 62 FC | 	wrlong	arg04, objptr
1bb5c     04 E4 05 F1 | 	add	objptr, #4
1bb60     F2 00 68 FC | 	wrlong	#0, objptr
1bb64     04 E4 05 F1 | 	add	objptr, #4
1bb68     FF FF FF FF 
1bb6c     F2 FE 6B FC | 	wrlong	##-1, objptr
1bb70     06 00 00 FF 
1bb74     38 E4 85 F1 | 	sub	objptr, ##3128
1bb78     F2 18 02 FB | 	rdlong	arg04, objptr
1bb7c     06 00 00 FF 
1bb80     A4 E4 05 F1 | 	add	objptr, ##3236
1bb84     F2 18 62 FC | 	wrlong	arg04, objptr
1bb88     C1 01 00 FF 
1bb8c     B7 18 06 F6 | 	mov	arg04, ##@LR__6127
1bb90     01 00 00 FF 
1bb94     E8 E5 05 F1 | 	add	objptr, ##1000
1bb98     F2 18 62 FC | 	wrlong	arg04, objptr
1bb9c                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1bb9c                 | ' dataptr=programstart : readline="" ' reset the data pointer
1bb9c                 | ' if inrun>0 then 
1bb9c     02 00 00 FF 
1bba0     28 E4 85 F1 | 	sub	objptr, ##1064
1bba4     F2 18 02 FB | 	rdlong	arg04, objptr
1bba8     50 00 00 FF 
1bbac     EC E4 85 F1 | 	sub	objptr, ##41196
1bbb0     01 18 16 F2 | 	cmp	arg04, #1 wc
1bbb4     30 00 90 CD |  if_b	jmp	#LR__2220
1bbb8     50 00 00 FF 
1bbbc     F0 E4 05 F1 | 	add	objptr, ##41200
1bbc0     F2 12 02 F6 | 	mov	arg01, objptr
1bbc4     38 E4 85 F1 | 	sub	objptr, #56
1bbc8     F2 14 02 FB | 	rdlong	arg02, objptr
1bbcc     18 16 06 F6 | 	mov	arg03, #24
1bbd0     44 00 00 FF 
1bbd4     EC E5 85 F1 | 	sub	objptr, ##35308
1bbd8     DC B2 B0 FD | 	call	#_psram_spin2_read1
1bbdc     0B 00 00 FF 
1bbe0     CC E4 85 F1 | 	sub	objptr, ##5836
1bbe4                 | '   psram.read1(varptr(runheader),runptr,24)  
1bbe4                 | '   return
1bbe4     0C 03 90 FD | 	jmp	#LR__2227
1bbe8                 | LR__2220
1bbe8     50 00 00 FF 
1bbec     EC E4 05 F1 | 	add	objptr, ##41196
1bbf0     F2 02 68 FC | 	wrlong	#1, objptr
1bbf4     04 E4 05 F1 | 	add	objptr, #4
1bbf8     F2 12 02 F6 | 	mov	arg01, objptr
1bbfc     38 E4 85 F1 | 	sub	objptr, #56
1bc00     F2 14 02 FB | 	rdlong	arg02, objptr
1bc04     18 16 06 F6 | 	mov	arg03, #24
1bc08     44 00 00 FF 
1bc0c     EC E5 85 F1 | 	sub	objptr, ##35308
1bc10     A4 B2 B0 FD | 	call	#_psram_spin2_read1
1bc14                 | ' inrun=1
1bc14                 | ' psram.read1(varptr(runheader),runptr,24) 
1bc14                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1bc14     45 00 00 FF 
1bc18     24 E4 05 F1 | 	add	objptr, ##35364
1bc1c     F2 2C 02 FB | 	rdlong	local04, objptr
1bc20     50 00 00 FF 
1bc24     F0 E4 85 F1 | 	sub	objptr, ##41200
1bc28     FF FF 7F FF 
1bc2c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1bc30     50 00 00 AF 
1bc34     EC E4 05 A1 |  if_e	add	objptr, ##41196
1bc38     F2 00 68 AC |  if_e	wrlong	#0, objptr
1bc3c     50 00 00 AF 
1bc40     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1bc44     AC 02 90 AD |  if_e	jmp	#LR__2227
1bc48                 | ' do 
1bc48                 | LR__2221
1bc48                 | '   if runptr<>oldrunptr then
1bc48     50 00 00 FF 
1bc4c     B8 E4 05 F1 | 	add	objptr, ##41144
1bc50     F2 2C 02 FB | 	rdlong	local04, objptr
1bc54     08 E4 05 F1 | 	add	objptr, #8
1bc58     F2 18 02 FB | 	rdlong	arg04, objptr
1bc5c     50 00 00 FF 
1bc60     C0 E4 85 F1 | 	sub	objptr, ##41152
1bc64     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1bc68     CC 00 90 AD |  if_e	jmp	#LR__2222
1bc6c     50 00 00 FF 
1bc70     F0 E4 05 F1 | 	add	objptr, ##41200
1bc74     F2 12 02 F6 | 	mov	arg01, objptr
1bc78     38 E4 85 F1 | 	sub	objptr, #56
1bc7c     F2 14 02 FB | 	rdlong	arg02, objptr
1bc80     18 16 06 F6 | 	mov	arg03, #24
1bc84     44 00 00 FF 
1bc88     EC E5 85 F1 | 	sub	objptr, ##35308
1bc8c     28 B2 B0 FD | 	call	#_psram_spin2_read1
1bc90     3B 00 00 FF 
1bc94     B0 E5 05 F1 | 	add	objptr, ##30640
1bc98     F2 12 02 F6 | 	mov	arg01, objptr
1bc9c     09 00 00 FF 
1bca0     3C E4 05 F1 | 	add	objptr, ##4668
1bca4     F2 14 02 FB | 	rdlong	arg02, objptr
1bca8     0B 00 00 FF 
1bcac     54 E4 85 F1 | 	sub	objptr, ##5716
1bcb0     F2 2C 02 FB | 	rdlong	local04, objptr
1bcb4     01 2C 66 F0 | 	shl	local04, #1
1bcb8     16 15 02 F1 | 	add	arg02, local04
1bcbc     0B 00 00 FF 
1bcc0     94 E4 05 F1 | 	add	objptr, ##5780
1bcc4     F2 16 02 FB | 	rdlong	arg03, objptr
1bcc8     40 E4 85 F1 | 	sub	objptr, #64
1bccc     F2 2C 02 FB | 	rdlong	local04, objptr
1bcd0     16 17 82 F1 | 	sub	arg03, local04
1bcd4     44 00 00 FF 
1bcd8     EC E5 85 F1 | 	sub	objptr, ##35308
1bcdc     D8 B1 B0 FD | 	call	#_psram_spin2_read1
1bce0     45 00 00 FF 
1bce4     2C E4 05 F1 | 	add	objptr, ##35372
1bce8     F2 2C 02 FB | 	rdlong	local04, objptr
1bcec     40 E4 85 F1 | 	sub	objptr, #64
1bcf0     F2 14 02 FB | 	rdlong	arg02, objptr
1bcf4     0A 2D 82 F1 | 	sub	local04, arg02
1bcf8     0B 00 00 FF 
1bcfc     54 E4 85 F1 | 	sub	objptr, ##5716
1bd00     F2 14 02 FB | 	rdlong	arg02, objptr
1bd04     0A 2D 12 FD | 	qdiv	local04, arg02
1bd08     05 00 00 FF 
1bd0c     18 E4 05 F1 | 	add	objptr, ##2584
1bd10     18 2C 62 FD | 	getqx	local04
1bd14     03 2C 86 F1 | 	sub	local04, #3
1bd18     F2 2C 62 FC | 	wrlong	local04, objptr
1bd1c     06 00 00 FF 
1bd20     3C E4 05 F1 | 	add	objptr, ##3132
1bd24     F2 2C 02 FB | 	rdlong	local04, objptr
1bd28     08 E4 05 F1 | 	add	objptr, #8
1bd2c     F2 2C 62 FC | 	wrlong	local04, objptr
1bd30     50 00 00 FF 
1bd34     C0 E4 85 F1 | 	sub	objptr, ##41152
1bd38                 | LR__2222
1bd38     50 00 00 FF 
1bd3c     04 E5 05 F1 | 	add	objptr, ##41220
1bd40     F2 2C 02 FB | 	rdlong	local04, objptr
1bd44     4C E4 85 F1 | 	sub	objptr, #76
1bd48     F2 2C 62 FC | 	wrlong	local04, objptr
1bd4c     04 E4 05 F1 | 	add	objptr, #4
1bd50     F2 12 02 FB | 	rdlong	arg01, objptr
1bd54     50 00 00 FF 
1bd58     BC E4 85 F1 | 	sub	objptr, ##41148
1bd5c     BC 19 BF FD | 	call	#_execute_line
1bd60     50 00 00 FF 
1bd64     BC E4 05 F1 | 	add	objptr, ##41148
1bd68     F2 FA 61 FC | 	wrlong	result1, objptr
1bd6c     04 E4 85 F1 | 	sub	objptr, #4
1bd70     F2 2C 02 FB | 	rdlong	local04, objptr
1bd74     50 00 00 FF 
1bd78     B8 E4 85 F1 | 	sub	objptr, ##41144
1bd7c     FF FF 3F FF 
1bd80     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1bd84     4C 00 90 AD |  if_e	jmp	#LR__2225
1bd88     E0 12 06 F6 | 	mov	arg01, #224
1bd8c     B8 B4 B0 FD | 	call	#_usbnew_spin2_keystate
1bd90     00 FA 0D F2 | 	cmp	result1, #0 wz
1bd94     10 00 90 5D |  if_ne	jmp	#LR__2223
1bd98     E4 12 06 F6 | 	mov	arg01, #228
1bd9c     A8 B4 B0 FD | 	call	#_usbnew_spin2_keystate
1bda0     00 FA 0D F2 | 	cmp	result1, #0 wz
1bda4     10 00 90 AD |  if_e	jmp	#LR__2224
1bda8                 | LR__2223
1bda8     06 12 06 F6 | 	mov	arg01, #6
1bdac     98 B4 B0 FD | 	call	#_usbnew_spin2_keystate
1bdb0     00 FA 0D F2 | 	cmp	result1, #0 wz
1bdb4     1C 00 90 5D |  if_ne	jmp	#LR__2225
1bdb8                 | LR__2224
1bdb8     50 00 00 FF 
1bdbc     EC E4 05 F1 | 	add	objptr, ##41196
1bdc0     F2 2C 02 FB | 	rdlong	local04, objptr
1bdc4     50 00 00 FF 
1bdc8     EC E4 85 F1 | 	sub	objptr, ##41196
1bdcc     02 2C 0E F2 | 	cmp	local04, #2 wz
1bdd0     74 FE 9F 5D |  if_ne	jmp	#LR__2221
1bdd4                 | LR__2225
1bdd4                 | '   ''do whatever kbm.peek_latest_key()=$106 
1bdd4                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1bdd4     50 00 00 FF 
1bdd8     B8 E4 05 F1 | 	add	objptr, ##41144
1bddc     F2 2C 02 FB | 	rdlong	local04, objptr
1bde0     50 00 00 FF 
1bde4     B8 E4 85 F1 | 	sub	objptr, ##41144
1bde8     FF FF 3F FF 
1bdec     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1bdf0     AC 00 90 AD |  if_e	jmp	#LR__2226
1bdf4     50 00 00 FF 
1bdf8     EC E4 05 F1 | 	add	objptr, ##41196
1bdfc     F2 2C 02 FB | 	rdlong	local04, objptr
1be00     50 00 00 FF 
1be04     EC E4 85 F1 | 	sub	objptr, ##41196
1be08     01 2C 0E F2 | 	cmp	local04, #1 wz
1be0c     90 00 90 5D |  if_ne	jmp	#LR__2226
1be10                 | '   print: print "Stopped at line ";runheader(0) 
1be10     00 12 06 F6 | 	mov	arg01, #0
1be14     F4 19 B1 FD | 	call	#__system___getiolock_0620
1be18     FD 12 02 F6 | 	mov	arg01, result1
1be1c     3C BD B0 FD | 	call	#__system___lockmem
1be20     00 12 06 F6 | 	mov	arg01, #0
1be24     0A 14 06 F6 | 	mov	arg02, #10
1be28     00 16 06 F6 | 	mov	arg03, #0
1be2c     CC C9 B0 FD | 	call	#__system___basic_print_char
1be30     00 12 06 F6 | 	mov	arg01, #0
1be34     D4 19 B1 FD | 	call	#__system___getiolock_0620
1be38     FD 00 68 FC | 	wrlong	#0, result1
1be3c     00 12 06 F6 | 	mov	arg01, #0
1be40     C8 19 B1 FD | 	call	#__system___getiolock_0620
1be44     FD 12 02 F6 | 	mov	arg01, result1
1be48     10 BD B0 FD | 	call	#__system___lockmem
1be4c     C1 01 00 FF 
1be50     B8 14 06 F6 | 	mov	arg02, ##@LR__6128
1be54     00 12 06 F6 | 	mov	arg01, #0
1be58     00 16 06 F6 | 	mov	arg03, #0
1be5c     F4 C9 B0 FD | 	call	#__system___basic_print_string
1be60     50 00 00 FF 
1be64     F0 E4 05 F1 | 	add	objptr, ##41200
1be68     F2 14 02 FB | 	rdlong	arg02, objptr
1be6c     50 00 00 FF 
1be70     F0 E4 85 F1 | 	sub	objptr, ##41200
1be74     00 12 06 F6 | 	mov	arg01, #0
1be78     00 16 06 F6 | 	mov	arg03, #0
1be7c     0A 18 06 F6 | 	mov	arg04, #10
1be80     54 CA B0 FD | 	call	#__system___basic_print_unsigned
1be84     00 12 06 F6 | 	mov	arg01, #0
1be88     0A 14 06 F6 | 	mov	arg02, #10
1be8c     00 16 06 F6 | 	mov	arg03, #0
1be90     68 C9 B0 FD | 	call	#__system___basic_print_char
1be94     00 12 06 F6 | 	mov	arg01, #0
1be98     70 19 B1 FD | 	call	#__system___getiolock_0620
1be9c     FD 00 68 FC | 	wrlong	#0, result1
1bea0                 | LR__2226
1bea0     50 00 00 FF 
1bea4     EC E4 05 F1 | 	add	objptr, ##41196
1bea8     F2 00 68 FC | 	wrlong	#0, objptr
1beac     06 00 00 FF 
1beb0     6C E4 85 F1 | 	sub	objptr, ##3180
1beb4     F2 26 62 FC | 	wrlong	local01, objptr
1beb8     06 00 00 FF 
1bebc     38 E4 05 F1 | 	add	objptr, ##3128
1bec0     F2 28 62 FC | 	wrlong	local02, objptr
1bec4     04 E4 05 F1 | 	add	objptr, #4
1bec8     F2 2A 62 FC | 	wrlong	local03, objptr
1becc     50 00 00 FF 
1bed0     BC E4 85 F1 | 	sub	objptr, ##41148
1bed4     11 12 06 F6 | 	mov	arg01, #17
1bed8     08 14 06 F6 | 	mov	arg02, #8
1bedc     10 16 06 F6 | 	mov	arg03, #16
1bee0     88 92 B0 FD | 	call	#_hg010b_spin2_setspritesize
1bee4     10 12 06 F6 | 	mov	arg01, #16
1bee8     20 14 06 F6 | 	mov	arg02, #32
1beec     20 16 06 F6 | 	mov	arg03, #32
1bef0     78 92 B0 FD | 	call	#_hg010b_spin2_setspritesize
1bef4                 | LR__2227
1bef4     A7 F0 03 F6 | 	mov	ptra, fp
1bef8     B2 00 A0 FD | 	call	#popregs_
1befc                 | _do_run_ret
1befc     2D 00 64 FD | 	ret
1bf00                 | 
1bf00                 | ' 
1bf00                 | ' ' ------------------ save
1bf00                 | ' 
1bf00                 | ' sub do_save                        
1bf00                 | _do_save
1bf00     04 4A 05 F6 | 	mov	COUNT_, #4
1bf04     A8 00 A0 FD | 	call	#pushregs_
1bf08     B8 F0 07 F1 | 	add	ptra, #184
1bf0c     4A 00 00 FF 
1bf10     80 E4 05 F1 | 	add	objptr, ##38016
1bf14     F2 26 02 FB | 	rdlong	local01, objptr
1bf18     13 29 02 F6 | 	mov	local02, local01
1bf1c     01 28 66 F0 | 	shl	local02, #1
1bf20     13 29 02 F1 | 	add	local02, local01
1bf24     02 28 66 F0 | 	shl	local02, #2
1bf28     03 00 00 FF 
1bf2c     04 E4 85 F1 | 	sub	objptr, ##1540
1bf30     F2 28 02 F1 | 	add	local02, objptr
1bf34     14 2B 02 FB | 	rdlong	local03, local02
1bf38     10 4E 05 F1 | 	add	fp, #16
1bf3c     A7 2A 62 FC | 	wrlong	local03, fp
1bf40                 | ' 
1bf40                 | ' numpar=compiledline(lineptr_e).result.uresult
1bf40                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1bf40     10 4E 85 F1 | 	sub	fp, #16
1bf44     01 2A 56 F2 | 	cmps	local03, #1 wc
1bf48     47 00 00 FF 
1bf4c     7C E4 85 F1 | 	sub	objptr, ##36476
1bf50     20 00 90 CD |  if_b	jmp	#LR__2230
1bf54     C8 18 BF FD | 	call	#_pop
1bf58     A7 FA 61 FC | 	wrlong	result1, fp
1bf5c     04 4E 05 F1 | 	add	fp, #4
1bf60     A7 FC 61 FC | 	wrlong	result2, fp
1bf64     04 4E 05 F1 | 	add	fp, #4
1bf68     A7 FE 61 FC | 	wrlong	result3, fp
1bf6c     08 4E 85 F1 | 	sub	fp, #8
1bf70     24 00 90 FD | 	jmp	#LR__2231
1bf74                 | LR__2230
1bf74     52 00 00 FF 
1bf78     FC E4 05 F1 | 	add	objptr, ##42236
1bf7c     F2 2A 02 FB | 	rdlong	local03, objptr
1bf80     52 00 00 FF 
1bf84     FC E4 85 F1 | 	sub	objptr, ##42236
1bf88     A7 2A 62 FC | 	wrlong	local03, fp
1bf8c     08 4E 05 F1 | 	add	fp, #8
1bf90     A7 3E 68 FC | 	wrlong	#31, fp
1bf94     08 4E 85 F1 | 	sub	fp, #8
1bf98                 | LR__2231
1bf98                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1bf98     4A 00 00 FF 
1bf9c     88 E4 05 F1 | 	add	objptr, ##38024
1bfa0     F2 12 02 FB | 	rdlong	arg01, objptr
1bfa4     4A 00 00 FF 
1bfa8     88 E4 85 F1 | 	sub	objptr, ##38024
1bfac     1C 84 B0 FD | 	call	#_pslpeek
1bfb0     FF FF 7F FF 
1bfb4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1bfb8     10 00 90 5D |  if_ne	jmp	#LR__2232
1bfbc     1B 12 06 F6 | 	mov	arg01, #27
1bfc0     00 14 06 F6 | 	mov	arg02, #0
1bfc4     34 81 B0 FD | 	call	#_printerror
1bfc8     CC 02 90 FD | 	jmp	#LR__2238
1bfcc                 | LR__2232
1bfcc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1bfcc     08 4E 05 F1 | 	add	fp, #8
1bfd0     A7 2A 02 FB | 	rdlong	local03, fp
1bfd4     08 4E 85 F1 | 	sub	fp, #8
1bfd8     2B 2A 0E F2 | 	cmp	local03, #43 wz
1bfdc     18 00 90 5D |  if_ne	jmp	#LR__2233
1bfe0     A7 12 02 FB | 	rdlong	arg01, fp
1bfe4     B0 19 BF FD | 	call	#_convertstring
1bfe8     A7 FA 61 FC | 	wrlong	result1, fp
1bfec     08 4E 05 F1 | 	add	fp, #8
1bff0     A7 3E 68 FC | 	wrlong	#31, fp
1bff4     08 4E 85 F1 | 	sub	fp, #8
1bff8                 | LR__2233
1bff8                 | ' if t1.result_type=result_string then
1bff8     08 4E 05 F1 | 	add	fp, #8
1bffc     A7 2A 02 FB | 	rdlong	local03, fp
1c000     08 4E 85 F1 | 	sub	fp, #8
1c004     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c008     8C 02 90 5D |  if_ne	jmp	#LR__2237
1c00c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1c00c     A7 12 02 FB | 	rdlong	arg01, fp
1c010     C1 01 00 FF 
1c014     C9 14 06 F6 | 	mov	arg02, ##@LR__6129
1c018     68 BB B0 FD | 	call	#__system___string_cmp
1c01c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c020     52 00 00 AF 
1c024     FC E4 05 A1 |  if_e	add	objptr, ##42236
1c028     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1c02c     A7 2A 62 AC |  if_e	wrlong	local03, fp
1c030     52 00 00 AF 
1c034     FC E4 85 A1 |  if_e	sub	objptr, ##42236
1c038     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c03c     52 00 00 5F 
1c040     FC E4 05 51 |  if_ne	add	objptr, ##42236
1c044     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1c048     52 00 00 5F 
1c04c     FC E4 85 51 |  if_ne	sub	objptr, ##42236
1c050                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1c050     09 12 06 F6 | 	mov	arg01, #9
1c054     64 0E B1 FD | 	call	#__system__close
1c058     09 2A 06 F6 | 	mov	local03, #9
1c05c     4A 00 00 FF 
1c060     94 E4 05 F1 | 	add	objptr, ##38036
1c064     F2 12 02 FB | 	rdlong	arg01, objptr
1c068     4A 00 00 FF 
1c06c     94 E4 85 F1 | 	sub	objptr, ##38036
1c070     C1 01 00 FF 
1c074     CA 14 06 F6 | 	mov	arg02, ##@LR__6130
1c078     3C BB B0 FD | 	call	#__system___string_concat
1c07c     FD 12 02 F6 | 	mov	arg01, result1
1c080     A7 14 02 FB | 	rdlong	arg02, fp
1c084     30 BB B0 FD | 	call	#__system___string_concat
1c088     FD 14 02 F6 | 	mov	arg02, result1
1c08c     15 13 02 F6 | 	mov	arg01, local03
1c090     0D 16 06 F6 | 	mov	arg03, #13
1c094     C8 C6 B0 FD | 	call	#__system___basic_open_string
1c098     4A 00 00 FF 
1c09c     88 E4 05 F1 | 	add	objptr, ##38024
1c0a0     F2 2A 02 FB | 	rdlong	local03, objptr
1c0a4     4A 00 00 FF 
1c0a8     88 E4 85 F1 | 	sub	objptr, ##38024
1c0ac     B0 4E 05 F1 | 	add	fp, #176
1c0b0     A7 2A 62 FC | 	wrlong	local03, fp
1c0b4     B0 4E 85 F1 | 	sub	fp, #176
1c0b8                 | '   saveptr=programstart
1c0b8                 | '   do
1c0b8                 | LR__2234
1c0b8     14 4E 05 F1 | 	add	fp, #20
1c0bc     A7 12 02 F6 | 	mov	arg01, fp
1c0c0     9C 4E 05 F1 | 	add	fp, #156
1c0c4     A7 14 02 FB | 	rdlong	arg02, fp
1c0c8     B0 4E 85 F1 | 	sub	fp, #176
1c0cc     18 16 06 F6 | 	mov	arg03, #24
1c0d0     0B 00 00 FF 
1c0d4     CC E4 05 F1 | 	add	objptr, ##5836
1c0d8     DC AD B0 FD | 	call	#_psram_spin2_read1
1c0dc     2C 4E 05 F1 | 	add	fp, #44
1c0e0     A7 12 02 F6 | 	mov	arg01, fp
1c0e4     10 4E 85 F1 | 	sub	fp, #16
1c0e8     A7 14 02 FB | 	rdlong	arg02, fp
1c0ec     04 4E 05 F1 | 	add	fp, #4
1c0f0     A7 16 02 FB | 	rdlong	arg03, fp
1c0f4     20 4E 85 F1 | 	sub	fp, #32
1c0f8     BC AD B0 FD | 	call	#_psram_spin2_read1
1c0fc     0B 00 00 FF 
1c100     CC E4 85 F1 | 	sub	objptr, ##5836
1c104     C1 01 00 FF 
1c108     CC 2A 06 F6 | 	mov	local03, ##@LR__6131
1c10c     AC 4E 05 F1 | 	add	fp, #172
1c110     A7 2A 62 FC | 	wrlong	local03, fp
1c114                 | '     psram.read1(varptr(header(0)),saveptr,24)
1c114                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1c114                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1c114     A0 4E 85 F1 | 	sub	fp, #160
1c118     A7 02 68 FC | 	wrlong	#1, fp
1c11c     14 4E 05 F1 | 	add	fp, #20
1c120     A7 2C 02 FB | 	rdlong	local04, fp
1c124     20 4E 85 F1 | 	sub	fp, #32
1c128     01 2C 06 F1 | 	add	local04, #1
1c12c                 | LR__2235
1c12c     0C 4E 05 F1 | 	add	fp, #12
1c130     A7 2A 02 FB | 	rdlong	local03, fp
1c134     0C 4E 85 F1 | 	sub	fp, #12
1c138     16 2B 52 F2 | 	cmps	local03, local04 wc
1c13c     54 00 90 3D |  if_ae	jmp	#LR__2236
1c140     AC 4E 05 F1 | 	add	fp, #172
1c144     A7 26 02 FB | 	rdlong	local01, fp
1c148     A0 4E 85 F1 | 	sub	fp, #160
1c14c     A7 2A 02 FB | 	rdlong	local03, fp
1c150     01 2A 86 F1 | 	sub	local03, #1
1c154     20 4E 05 F1 | 	add	fp, #32
1c158     A7 2A 02 F1 | 	add	local03, fp
1c15c     15 13 C2 FA | 	rdbyte	arg01, local03
1c160     2C 4E 85 F1 | 	sub	fp, #44
1c164     38 DC B0 FD | 	call	#__system__Chr_S
1c168     FD 14 02 F6 | 	mov	arg02, result1
1c16c     13 13 02 F6 | 	mov	arg01, local01
1c170     44 BA B0 FD | 	call	#__system___string_concat
1c174     AC 4E 05 F1 | 	add	fp, #172
1c178     A7 FA 61 FC | 	wrlong	result1, fp
1c17c     A0 4E 85 F1 | 	sub	fp, #160
1c180     A7 2A 02 FB | 	rdlong	local03, fp
1c184     01 2A 06 F1 | 	add	local03, #1
1c188     A7 2A 62 FC | 	wrlong	local03, fp
1c18c     0C 4E 85 F1 | 	sub	fp, #12
1c190     98 FF 9F FD | 	jmp	#LR__2235
1c194                 | LR__2236
1c194                 | '     print #9, saveline$
1c194     09 12 06 F6 | 	mov	arg01, #9
1c198     70 16 B1 FD | 	call	#__system___getiolock_0620
1c19c     FD 12 02 F6 | 	mov	arg01, result1
1c1a0     B8 B9 B0 FD | 	call	#__system___lockmem
1c1a4     AC 4E 05 F1 | 	add	fp, #172
1c1a8     A7 14 02 FB | 	rdlong	arg02, fp
1c1ac     AC 4E 85 F1 | 	sub	fp, #172
1c1b0     09 12 06 F6 | 	mov	arg01, #9
1c1b4     00 16 06 F6 | 	mov	arg03, #0
1c1b8     98 C6 B0 FD | 	call	#__system___basic_print_string
1c1bc     09 12 06 F6 | 	mov	arg01, #9
1c1c0     0A 14 06 F6 | 	mov	arg02, #10
1c1c4     00 16 06 F6 | 	mov	arg03, #0
1c1c8     30 C6 B0 FD | 	call	#__system___basic_print_char
1c1cc     09 12 06 F6 | 	mov	arg01, #9
1c1d0     38 16 B1 FD | 	call	#__system___getiolock_0620
1c1d4     FD 00 68 FC | 	wrlong	#0, result1
1c1d8     28 4E 05 F1 | 	add	fp, #40
1c1dc     A7 2A 02 FB | 	rdlong	local03, fp
1c1e0     88 4E 05 F1 | 	add	fp, #136
1c1e4     A7 2A 62 FC | 	wrlong	local03, fp
1c1e8     88 4E 85 F1 | 	sub	fp, #136
1c1ec     A7 2A 02 FB | 	rdlong	local03, fp
1c1f0     28 4E 85 F1 | 	sub	fp, #40
1c1f4     FF FF 3F FF 
1c1f8     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1c1fc     B8 FE 9F 5D |  if_ne	jmp	#LR__2234
1c200                 | '   close #9  
1c200     09 12 06 F6 | 	mov	arg01, #9
1c204     B4 0C B1 FD | 	call	#__system__close
1c208                 | '   print "Saved as ";currentdir$+"/"+loadname
1c208     00 12 06 F6 | 	mov	arg01, #0
1c20c     FC 15 B1 FD | 	call	#__system___getiolock_0620
1c210     FD 12 02 F6 | 	mov	arg01, result1
1c214     44 B9 B0 FD | 	call	#__system___lockmem
1c218     C1 01 00 FF 
1c21c     CD 14 06 F6 | 	mov	arg02, ##@LR__6132
1c220     00 12 06 F6 | 	mov	arg01, #0
1c224     00 16 06 F6 | 	mov	arg03, #0
1c228     28 C6 B0 FD | 	call	#__system___basic_print_string
1c22c     00 28 06 F6 | 	mov	local02, #0
1c230     4A 00 00 FF 
1c234     94 E4 05 F1 | 	add	objptr, ##38036
1c238     F2 12 02 FB | 	rdlong	arg01, objptr
1c23c     4A 00 00 FF 
1c240     94 E4 85 F1 | 	sub	objptr, ##38036
1c244     C1 01 00 FF 
1c248     D7 14 06 F6 | 	mov	arg02, ##@LR__6133
1c24c     68 B9 B0 FD | 	call	#__system___string_concat
1c250     FD 12 02 F6 | 	mov	arg01, result1
1c254     52 00 00 FF 
1c258     FC E4 05 F1 | 	add	objptr, ##42236
1c25c     F2 14 02 FB | 	rdlong	arg02, objptr
1c260     52 00 00 FF 
1c264     FC E4 85 F1 | 	sub	objptr, ##42236
1c268     4C B9 B0 FD | 	call	#__system___string_concat
1c26c     FD 14 02 F6 | 	mov	arg02, result1
1c270     14 13 02 F6 | 	mov	arg01, local02
1c274     00 16 06 F6 | 	mov	arg03, #0
1c278     D8 C5 B0 FD | 	call	#__system___basic_print_string
1c27c     00 12 06 F6 | 	mov	arg01, #0
1c280     0A 14 06 F6 | 	mov	arg02, #10
1c284     00 16 06 F6 | 	mov	arg03, #0
1c288     70 C5 B0 FD | 	call	#__system___basic_print_char
1c28c     00 12 06 F6 | 	mov	arg01, #0
1c290     78 15 B1 FD | 	call	#__system___getiolock_0620
1c294     FD 00 68 FC | 	wrlong	#0, result1
1c298                 | LR__2237
1c298                 | LR__2238
1c298     A7 F0 03 F6 | 	mov	ptra, fp
1c29c     B2 00 A0 FD | 	call	#popregs_
1c2a0                 | _do_save_ret
1c2a0     2D 00 64 FD | 	ret
1c2a4                 | 
1c2a4                 | ' 
1c2a4                 | ' ' ------------------ setcolor
1c2a4                 | ' 
1c2a4                 | ' sub do_setcolor
1c2a4                 | _do_setcolor
1c2a4     00 4A 05 F6 | 	mov	COUNT_, #0
1c2a8     A8 00 A0 FD | 	call	#pushregs_
1c2ac     20 F0 07 F1 | 	add	ptra, #32
1c2b0     4A 00 00 FF 
1c2b4     80 E4 05 F1 | 	add	objptr, ##38016
1c2b8     F2 18 02 FB | 	rdlong	arg04, objptr
1c2bc     0C 17 02 F6 | 	mov	arg03, arg04
1c2c0     01 16 66 F0 | 	shl	arg03, #1
1c2c4     0C 17 02 F1 | 	add	arg03, arg04
1c2c8     02 16 66 F0 | 	shl	arg03, #2
1c2cc     03 00 00 FF 
1c2d0     04 E4 85 F1 | 	sub	objptr, ##1540
1c2d4     F2 16 02 F1 | 	add	arg03, objptr
1c2d8     0B 19 02 FB | 	rdlong	arg04, arg03
1c2dc     1C 4E 05 F1 | 	add	fp, #28
1c2e0     A7 18 62 FC | 	wrlong	arg04, fp
1c2e4                 | ' 
1c2e4                 | ' numpar=compiledline(lineptr_e).result.uresult
1c2e4                 | ' 
1c2e4                 | ' if numpar=4 then
1c2e4     1C 4E 85 F1 | 	sub	fp, #28
1c2e8     04 18 0E F2 | 	cmp	arg04, #4 wz
1c2ec     47 00 00 FF 
1c2f0     7C E4 85 F1 | 	sub	objptr, ##36476
1c2f4     E0 00 90 5D |  if_ne	jmp	#LR__2240
1c2f8     24 15 BF FD | 	call	#_pop
1c2fc     FF 18 02 F6 | 	mov	arg04, result3
1c300     A7 FA 61 FC | 	wrlong	result1, fp
1c304     04 4E 05 F1 | 	add	fp, #4
1c308     A7 FC 61 FC | 	wrlong	result2, fp
1c30c     04 4E 05 F1 | 	add	fp, #4
1c310     A7 18 62 FC | 	wrlong	arg04, fp
1c314     08 4E 85 F1 | 	sub	fp, #8
1c318     A7 12 02 F6 | 	mov	arg01, fp
1c31c     E4 16 BF FD | 	call	#_converttoint
1c320     FD 18 02 F6 | 	mov	arg04, result1
1c324     14 4E 05 F1 | 	add	fp, #20
1c328     A7 18 62 FC | 	wrlong	arg04, fp
1c32c     14 4E 85 F1 | 	sub	fp, #20
1c330     EC 14 BF FD | 	call	#_pop
1c334     FF 18 02 F6 | 	mov	arg04, result3
1c338     A7 FA 61 FC | 	wrlong	result1, fp
1c33c     04 4E 05 F1 | 	add	fp, #4
1c340     A7 FC 61 FC | 	wrlong	result2, fp
1c344     04 4E 05 F1 | 	add	fp, #4
1c348     A7 18 62 FC | 	wrlong	arg04, fp
1c34c     08 4E 85 F1 | 	sub	fp, #8
1c350     A7 12 02 F6 | 	mov	arg01, fp
1c354     AC 16 BF FD | 	call	#_converttoint
1c358     FD 18 02 F6 | 	mov	arg04, result1
1c35c     10 4E 05 F1 | 	add	fp, #16
1c360     A7 18 62 FC | 	wrlong	arg04, fp
1c364     10 4E 85 F1 | 	sub	fp, #16
1c368     B4 14 BF FD | 	call	#_pop
1c36c     FF 18 02 F6 | 	mov	arg04, result3
1c370     A7 FA 61 FC | 	wrlong	result1, fp
1c374     04 4E 05 F1 | 	add	fp, #4
1c378     A7 FC 61 FC | 	wrlong	result2, fp
1c37c     04 4E 05 F1 | 	add	fp, #4
1c380     A7 18 62 FC | 	wrlong	arg04, fp
1c384     08 4E 85 F1 | 	sub	fp, #8
1c388     A7 12 02 F6 | 	mov	arg01, fp
1c38c     74 16 BF FD | 	call	#_converttoint
1c390     FD 18 02 F6 | 	mov	arg04, result1
1c394     0C 4E 05 F1 | 	add	fp, #12
1c398     A7 18 62 FC | 	wrlong	arg04, fp
1c39c     0C 4E 85 F1 | 	sub	fp, #12
1c3a0     7C 14 BF FD | 	call	#_pop
1c3a4     FF 18 02 F6 | 	mov	arg04, result3
1c3a8     A7 FA 61 FC | 	wrlong	result1, fp
1c3ac     04 4E 05 F1 | 	add	fp, #4
1c3b0     A7 FC 61 FC | 	wrlong	result2, fp
1c3b4     04 4E 05 F1 | 	add	fp, #4
1c3b8     A7 18 62 FC | 	wrlong	arg04, fp
1c3bc     08 4E 85 F1 | 	sub	fp, #8
1c3c0     A7 12 02 F6 | 	mov	arg01, fp
1c3c4     3C 16 BF FD | 	call	#_converttoint
1c3c8     18 4E 05 F1 | 	add	fp, #24
1c3cc     A7 FA 61 FC | 	wrlong	result1, fp
1c3d0     18 4E 85 F1 | 	sub	fp, #24
1c3d4     04 01 90 FD | 	jmp	#LR__2243
1c3d8                 | LR__2240
1c3d8     1C 4E 05 F1 | 	add	fp, #28
1c3dc     A7 18 02 FB | 	rdlong	arg04, fp
1c3e0     1C 4E 85 F1 | 	sub	fp, #28
1c3e4     02 18 0E F2 | 	cmp	arg04, #2 wz
1c3e8     A0 00 90 5D |  if_ne	jmp	#LR__2241
1c3ec     30 14 BF FD | 	call	#_pop
1c3f0     FF 18 02 F6 | 	mov	arg04, result3
1c3f4     A7 FA 61 FC | 	wrlong	result1, fp
1c3f8     04 4E 05 F1 | 	add	fp, #4
1c3fc     A7 FC 61 FC | 	wrlong	result2, fp
1c400     04 4E 05 F1 | 	add	fp, #4
1c404     A7 18 62 FC | 	wrlong	arg04, fp
1c408     08 4E 85 F1 | 	sub	fp, #8
1c40c     A7 12 02 F6 | 	mov	arg01, fp
1c410     F0 15 BF FD | 	call	#_converttoint
1c414     18 4E 05 F1 | 	add	fp, #24
1c418     A7 FA 61 FC | 	wrlong	result1, fp
1c41c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c420     04 4E 85 F1 | 	sub	fp, #4
1c424     A7 FA 61 FC | 	wrlong	result1, fp
1c428     04 4E 05 F1 | 	add	fp, #4
1c42c     A7 18 02 FB | 	rdlong	arg04, fp
1c430     0C 19 EA F8 | 	getbyte	arg04, arg04, #1
1c434     08 4E 85 F1 | 	sub	fp, #8
1c438     A7 18 62 FC | 	wrlong	arg04, fp
1c43c     08 4E 05 F1 | 	add	fp, #8
1c440     A7 18 02 FB | 	rdlong	arg04, fp
1c444     0C 19 F2 F8 | 	getbyte	arg04, arg04, #2
1c448     0C 4E 85 F1 | 	sub	fp, #12
1c44c     A7 18 62 FC | 	wrlong	arg04, fp
1c450     0C 4E 85 F1 | 	sub	fp, #12
1c454     C8 13 BF FD | 	call	#_pop
1c458     FF 18 02 F6 | 	mov	arg04, result3
1c45c     A7 FA 61 FC | 	wrlong	result1, fp
1c460     04 4E 05 F1 | 	add	fp, #4
1c464     A7 FC 61 FC | 	wrlong	result2, fp
1c468     04 4E 05 F1 | 	add	fp, #4
1c46c     A7 18 62 FC | 	wrlong	arg04, fp
1c470     08 4E 85 F1 | 	sub	fp, #8
1c474     A7 12 02 F6 | 	mov	arg01, fp
1c478     88 15 BF FD | 	call	#_converttoint
1c47c     18 4E 05 F1 | 	add	fp, #24
1c480     A7 FA 61 FC | 	wrlong	result1, fp
1c484     18 4E 85 F1 | 	sub	fp, #24
1c488     50 00 90 FD | 	jmp	#LR__2242
1c48c                 | LR__2241
1c48c                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1c48c     00 12 06 F6 | 	mov	arg01, #0
1c490     78 13 B1 FD | 	call	#__system___getiolock_0620
1c494     FD 12 02 F6 | 	mov	arg01, result1
1c498     C0 B6 B0 FD | 	call	#__system___lockmem
1c49c     C1 01 00 FF 
1c4a0     D9 14 06 F6 | 	mov	arg02, ##@LR__6134
1c4a4     00 12 06 F6 | 	mov	arg01, #0
1c4a8     00 16 06 F6 | 	mov	arg03, #0
1c4ac     A4 C3 B0 FD | 	call	#__system___basic_print_string
1c4b0     00 12 06 F6 | 	mov	arg01, #0
1c4b4     54 13 B1 FD | 	call	#__system___getiolock_0620
1c4b8     FD 00 68 FC | 	wrlong	#0, result1
1c4bc     50 00 00 FF 
1c4c0     F0 E4 05 F1 | 	add	objptr, ##41200
1c4c4     F2 14 02 FB | 	rdlong	arg02, objptr
1c4c8     50 00 00 FF 
1c4cc     F0 E4 85 F1 | 	sub	objptr, ##41200
1c4d0     27 12 06 F6 | 	mov	arg01, #39
1c4d4     24 7C B0 FD | 	call	#_printerror
1c4d8     28 00 90 FD | 	jmp	#LR__2244
1c4dc                 | LR__2242
1c4dc                 | LR__2243
1c4dc     18 4E 05 F1 | 	add	fp, #24
1c4e0     A7 12 02 FB | 	rdlong	arg01, fp
1c4e4     0C 4E 85 F1 | 	sub	fp, #12
1c4e8     A7 14 02 FB | 	rdlong	arg02, fp
1c4ec     04 4E 05 F1 | 	add	fp, #4
1c4f0     A7 16 02 FB | 	rdlong	arg03, fp
1c4f4     04 4E 05 F1 | 	add	fp, #4
1c4f8     A7 18 02 FB | 	rdlong	arg04, fp
1c4fc     14 4E 85 F1 | 	sub	fp, #20
1c500     CC 99 B0 FD | 	call	#_hg010b_spin2_setcolor
1c504                 | LR__2244
1c504     A7 F0 03 F6 | 	mov	ptra, fp
1c508     B2 00 A0 FD | 	call	#popregs_
1c50c                 | _do_setcolor_ret
1c50c     2D 00 64 FD | 	ret
1c510                 | 
1c510                 | ' 
1c510                 | ' ' ------------------ setdelay
1c510                 | ' 
1c510                 | ' sub do_setdelay
1c510                 | _do_setdelay
1c510     02 4A 05 F6 | 	mov	COUNT_, #2
1c514     A8 00 A0 FD | 	call	#pushregs_
1c518     18 F0 07 F1 | 	add	ptra, #24
1c51c     00 13 BF FD | 	call	#_pop
1c520     FD 12 02 F6 | 	mov	arg01, result1
1c524     FE 26 02 F6 | 	mov	local01, result2
1c528     FF 28 02 F6 | 	mov	local02, result3
1c52c     A7 12 62 FC | 	wrlong	arg01, fp
1c530     04 4E 05 F1 | 	add	fp, #4
1c534     A7 26 62 FC | 	wrlong	local01, fp
1c538     04 4E 05 F1 | 	add	fp, #4
1c53c     A7 28 62 FC | 	wrlong	local02, fp
1c540     08 4E 85 F1 | 	sub	fp, #8
1c544     D8 12 BF FD | 	call	#_pop
1c548     FD 28 02 F6 | 	mov	local02, result1
1c54c     0C 4E 05 F1 | 	add	fp, #12
1c550     A7 28 62 FC | 	wrlong	local02, fp
1c554     04 4E 05 F1 | 	add	fp, #4
1c558     A7 FC 61 FC | 	wrlong	result2, fp
1c55c     04 4E 05 F1 | 	add	fp, #4
1c560     A7 FE 61 FC | 	wrlong	result3, fp
1c564     08 4E 85 F1 | 	sub	fp, #8
1c568     A7 12 02 F6 | 	mov	arg01, fp
1c56c     0C 4E 85 F1 | 	sub	fp, #12
1c570     90 14 BF FD | 	call	#_converttoint
1c574     FD 28 02 F6 | 	mov	local02, result1
1c578     14 27 02 F6 | 	mov	local01, local02
1c57c     01 26 66 F0 | 	shl	local01, #1
1c580     14 27 02 F1 | 	add	local01, local02
1c584     03 26 66 F0 | 	shl	local01, #3
1c588     14 00 00 FF 
1c58c     38 E5 05 F1 | 	add	objptr, ##10552
1c590     F2 26 02 F1 | 	add	local01, objptr
1c594     A7 12 02 F6 | 	mov	arg01, fp
1c598     14 00 00 FF 
1c59c     38 E5 85 F1 | 	sub	objptr, ##10552
1c5a0     60 14 BF FD | 	call	#_converttoint
1c5a4     06 26 06 F1 | 	add	local01, #6
1c5a8     13 FB 51 FC | 	wrword	result1, local01
1c5ac     A7 F0 03 F6 | 	mov	ptra, fp
1c5b0     B2 00 A0 FD | 	call	#popregs_
1c5b4                 | _do_setdelay_ret
1c5b4     2D 00 64 FD | 	ret
1c5b8                 | 
1c5b8                 | ' 
1c5b8                 | ' ' ------------------ setenv
1c5b8                 | ' 
1c5b8                 | ' sub do_setenv
1c5b8                 | _do_setenv
1c5b8     02 4A 05 F6 | 	mov	COUNT_, #2
1c5bc     A8 00 A0 FD | 	call	#pushregs_
1c5c0     18 F0 07 F1 | 	add	ptra, #24
1c5c4     58 12 BF FD | 	call	#_pop
1c5c8     FD 12 02 F6 | 	mov	arg01, result1
1c5cc     FE 26 02 F6 | 	mov	local01, result2
1c5d0     FF 28 02 F6 | 	mov	local02, result3
1c5d4     A7 12 62 FC | 	wrlong	arg01, fp
1c5d8     04 4E 05 F1 | 	add	fp, #4
1c5dc     A7 26 62 FC | 	wrlong	local01, fp
1c5e0     04 4E 05 F1 | 	add	fp, #4
1c5e4     A7 28 62 FC | 	wrlong	local02, fp
1c5e8     08 4E 85 F1 | 	sub	fp, #8
1c5ec     30 12 BF FD | 	call	#_pop
1c5f0     FD 28 02 F6 | 	mov	local02, result1
1c5f4     0C 4E 05 F1 | 	add	fp, #12
1c5f8     A7 28 62 FC | 	wrlong	local02, fp
1c5fc     04 4E 05 F1 | 	add	fp, #4
1c600     A7 FC 61 FC | 	wrlong	result2, fp
1c604     04 4E 05 F1 | 	add	fp, #4
1c608     A7 FE 61 FC | 	wrlong	result3, fp
1c60c     08 4E 85 F1 | 	sub	fp, #8
1c610     A7 12 02 F6 | 	mov	arg01, fp
1c614     0C 4E 85 F1 | 	sub	fp, #12
1c618     E8 13 BF FD | 	call	#_converttoint
1c61c     FD 28 02 F6 | 	mov	local02, result1
1c620     14 27 02 F6 | 	mov	local01, local02
1c624     01 26 66 F0 | 	shl	local01, #1
1c628     14 27 02 F1 | 	add	local01, local02
1c62c     03 26 66 F0 | 	shl	local01, #3
1c630     14 00 00 FF 
1c634     38 E5 05 F1 | 	add	objptr, ##10552
1c638     F2 26 02 F1 | 	add	local01, objptr
1c63c     A7 12 02 F6 | 	mov	arg01, fp
1c640     14 00 00 FF 
1c644     38 E5 85 F1 | 	sub	objptr, ##10552
1c648     B8 13 BF FD | 	call	#_converttoint
1c64c     05 26 06 F1 | 	add	local01, #5
1c650     13 FB 41 FC | 	wrbyte	result1, local01
1c654     A7 F0 03 F6 | 	mov	ptra, fp
1c658     B2 00 A0 FD | 	call	#popregs_
1c65c                 | _do_setenv_ret
1c65c     2D 00 64 FD | 	ret
1c660                 | 
1c660                 | ' 
1c660                 | ' ' ------------------ setlen
1c660                 | ' 
1c660                 | ' sub do_setlen
1c660                 | _do_setlen
1c660     02 4A 05 F6 | 	mov	COUNT_, #2
1c664     A8 00 A0 FD | 	call	#pushregs_
1c668     18 F0 07 F1 | 	add	ptra, #24
1c66c     B0 11 BF FD | 	call	#_pop
1c670     FD 12 02 F6 | 	mov	arg01, result1
1c674     FE 26 02 F6 | 	mov	local01, result2
1c678     FF 28 02 F6 | 	mov	local02, result3
1c67c     A7 12 62 FC | 	wrlong	arg01, fp
1c680     04 4E 05 F1 | 	add	fp, #4
1c684     A7 26 62 FC | 	wrlong	local01, fp
1c688     04 4E 05 F1 | 	add	fp, #4
1c68c     A7 28 62 FC | 	wrlong	local02, fp
1c690     08 4E 85 F1 | 	sub	fp, #8
1c694     88 11 BF FD | 	call	#_pop
1c698     FD 28 02 F6 | 	mov	local02, result1
1c69c     0C 4E 05 F1 | 	add	fp, #12
1c6a0     A7 28 62 FC | 	wrlong	local02, fp
1c6a4     04 4E 05 F1 | 	add	fp, #4
1c6a8     A7 FC 61 FC | 	wrlong	result2, fp
1c6ac     04 4E 05 F1 | 	add	fp, #4
1c6b0     A7 FE 61 FC | 	wrlong	result3, fp
1c6b4     08 4E 85 F1 | 	sub	fp, #8
1c6b8     A7 12 02 F6 | 	mov	arg01, fp
1c6bc     0C 4E 85 F1 | 	sub	fp, #12
1c6c0     40 13 BF FD | 	call	#_converttoint
1c6c4     FD 28 02 F6 | 	mov	local02, result1
1c6c8     14 27 02 F6 | 	mov	local01, local02
1c6cc     01 26 66 F0 | 	shl	local01, #1
1c6d0     14 27 02 F1 | 	add	local01, local02
1c6d4     03 26 66 F0 | 	shl	local01, #3
1c6d8     14 00 00 FF 
1c6dc     38 E5 05 F1 | 	add	objptr, ##10552
1c6e0     F2 26 02 F1 | 	add	local01, objptr
1c6e4     A7 12 02 F6 | 	mov	arg01, fp
1c6e8     14 00 00 FF 
1c6ec     38 E5 85 F1 | 	sub	objptr, ##10552
1c6f0     CC 13 BF FD | 	call	#_converttofloat
1c6f4     08 26 06 F1 | 	add	local01, #8
1c6f8     13 FB 61 FC | 	wrlong	result1, local01
1c6fc     A7 F0 03 F6 | 	mov	ptra, fp
1c700     B2 00 A0 FD | 	call	#popregs_
1c704                 | _do_setlen_ret
1c704     2D 00 64 FD | 	ret
1c708                 | 
1c708                 | ' 
1c708                 | ' ' ------------------ setpan
1c708                 | ' 
1c708                 | ' sub do_setpan
1c708                 | _do_setpan
1c708     02 4A 05 F6 | 	mov	COUNT_, #2
1c70c     A8 00 A0 FD | 	call	#pushregs_
1c710     18 F0 07 F1 | 	add	ptra, #24
1c714     08 11 BF FD | 	call	#_pop
1c718     FD 12 02 F6 | 	mov	arg01, result1
1c71c     FE 26 02 F6 | 	mov	local01, result2
1c720     FF 28 02 F6 | 	mov	local02, result3
1c724     A7 12 62 FC | 	wrlong	arg01, fp
1c728     04 4E 05 F1 | 	add	fp, #4
1c72c     A7 26 62 FC | 	wrlong	local01, fp
1c730     04 4E 05 F1 | 	add	fp, #4
1c734     A7 28 62 FC | 	wrlong	local02, fp
1c738     08 4E 85 F1 | 	sub	fp, #8
1c73c     E0 10 BF FD | 	call	#_pop
1c740     FD 28 02 F6 | 	mov	local02, result1
1c744     0C 4E 05 F1 | 	add	fp, #12
1c748     A7 28 62 FC | 	wrlong	local02, fp
1c74c     04 4E 05 F1 | 	add	fp, #4
1c750     A7 FC 61 FC | 	wrlong	result2, fp
1c754     04 4E 05 F1 | 	add	fp, #4
1c758     A7 FE 61 FC | 	wrlong	result3, fp
1c75c     08 4E 85 F1 | 	sub	fp, #8
1c760     A7 12 02 F6 | 	mov	arg01, fp
1c764     0C 4E 85 F1 | 	sub	fp, #12
1c768     98 12 BF FD | 	call	#_converttoint
1c76c     FD 28 02 F6 | 	mov	local02, result1
1c770     14 27 02 F6 | 	mov	local01, local02
1c774     01 26 66 F0 | 	shl	local01, #1
1c778     14 27 02 F1 | 	add	local01, local02
1c77c     03 26 66 F0 | 	shl	local01, #3
1c780     14 00 00 FF 
1c784     38 E5 05 F1 | 	add	objptr, ##10552
1c788     F2 26 02 F1 | 	add	local01, objptr
1c78c     A7 12 02 F6 | 	mov	arg01, fp
1c790     14 00 00 FF 
1c794     38 E5 85 F1 | 	sub	objptr, ##10552
1c798     24 13 BF FD | 	call	#_converttofloat
1c79c     10 26 06 F1 | 	add	local01, #16
1c7a0     13 FB 61 FC | 	wrlong	result1, local01
1c7a4     A7 F0 03 F6 | 	mov	ptra, fp
1c7a8     B2 00 A0 FD | 	call	#popregs_
1c7ac                 | _do_setpan_ret
1c7ac     2D 00 64 FD | 	ret
1c7b0                 | 
1c7b0                 | ' 
1c7b0                 | ' ' ------------------ setsustain
1c7b0                 | ' 
1c7b0                 | ' sub do_setsustain
1c7b0                 | _do_setsustain
1c7b0     02 4A 05 F6 | 	mov	COUNT_, #2
1c7b4     A8 00 A0 FD | 	call	#pushregs_
1c7b8     18 F0 07 F1 | 	add	ptra, #24
1c7bc     60 10 BF FD | 	call	#_pop
1c7c0     FD 12 02 F6 | 	mov	arg01, result1
1c7c4     FE 26 02 F6 | 	mov	local01, result2
1c7c8     FF 28 02 F6 | 	mov	local02, result3
1c7cc     A7 12 62 FC | 	wrlong	arg01, fp
1c7d0     04 4E 05 F1 | 	add	fp, #4
1c7d4     A7 26 62 FC | 	wrlong	local01, fp
1c7d8     04 4E 05 F1 | 	add	fp, #4
1c7dc     A7 28 62 FC | 	wrlong	local02, fp
1c7e0     08 4E 85 F1 | 	sub	fp, #8
1c7e4     38 10 BF FD | 	call	#_pop
1c7e8     FD 28 02 F6 | 	mov	local02, result1
1c7ec     0C 4E 05 F1 | 	add	fp, #12
1c7f0     A7 28 62 FC | 	wrlong	local02, fp
1c7f4     04 4E 05 F1 | 	add	fp, #4
1c7f8     A7 FC 61 FC | 	wrlong	result2, fp
1c7fc     04 4E 05 F1 | 	add	fp, #4
1c800     A7 FE 61 FC | 	wrlong	result3, fp
1c804     08 4E 85 F1 | 	sub	fp, #8
1c808     A7 12 02 F6 | 	mov	arg01, fp
1c80c     0C 4E 85 F1 | 	sub	fp, #12
1c810     F0 11 BF FD | 	call	#_converttoint
1c814     FD 28 02 F6 | 	mov	local02, result1
1c818     14 27 02 F6 | 	mov	local01, local02
1c81c     01 26 66 F0 | 	shl	local01, #1
1c820     14 27 02 F1 | 	add	local01, local02
1c824     03 26 66 F0 | 	shl	local01, #3
1c828     14 00 00 FF 
1c82c     38 E5 05 F1 | 	add	objptr, ##10552
1c830     F2 26 02 F1 | 	add	local01, objptr
1c834     A7 12 02 F6 | 	mov	arg01, fp
1c838     14 00 00 FF 
1c83c     38 E5 85 F1 | 	sub	objptr, ##10552
1c840     C0 11 BF FD | 	call	#_converttoint
1c844     14 26 06 F1 | 	add	local01, #20
1c848     13 FB 51 FC | 	wrword	result1, local01
1c84c     A7 F0 03 F6 | 	mov	ptra, fp
1c850     B2 00 A0 FD | 	call	#popregs_
1c854                 | _do_setsustain_ret
1c854     2D 00 64 FD | 	ret
1c858                 | 
1c858                 | ' 
1c858                 | ' ' ------------------ setvol
1c858                 | ' 
1c858                 | ' sub do_setvol
1c858                 | _do_setvol
1c858     02 4A 05 F6 | 	mov	COUNT_, #2
1c85c     A8 00 A0 FD | 	call	#pushregs_
1c860     18 F0 07 F1 | 	add	ptra, #24
1c864     B8 0F BF FD | 	call	#_pop
1c868     FD 12 02 F6 | 	mov	arg01, result1
1c86c     FE 26 02 F6 | 	mov	local01, result2
1c870     FF 28 02 F6 | 	mov	local02, result3
1c874     A7 12 62 FC | 	wrlong	arg01, fp
1c878     04 4E 05 F1 | 	add	fp, #4
1c87c     A7 26 62 FC | 	wrlong	local01, fp
1c880     04 4E 05 F1 | 	add	fp, #4
1c884     A7 28 62 FC | 	wrlong	local02, fp
1c888     08 4E 85 F1 | 	sub	fp, #8
1c88c     90 0F BF FD | 	call	#_pop
1c890     FD 28 02 F6 | 	mov	local02, result1
1c894     0C 4E 05 F1 | 	add	fp, #12
1c898     A7 28 62 FC | 	wrlong	local02, fp
1c89c     04 4E 05 F1 | 	add	fp, #4
1c8a0     A7 FC 61 FC | 	wrlong	result2, fp
1c8a4     04 4E 05 F1 | 	add	fp, #4
1c8a8     A7 FE 61 FC | 	wrlong	result3, fp
1c8ac     08 4E 85 F1 | 	sub	fp, #8
1c8b0     A7 12 02 F6 | 	mov	arg01, fp
1c8b4     0C 4E 85 F1 | 	sub	fp, #12
1c8b8     48 11 BF FD | 	call	#_converttoint
1c8bc     FD 28 02 F6 | 	mov	local02, result1
1c8c0     14 27 02 F6 | 	mov	local01, local02
1c8c4     01 26 66 F0 | 	shl	local01, #1
1c8c8     14 27 02 F1 | 	add	local01, local02
1c8cc     03 26 66 F0 | 	shl	local01, #3
1c8d0     14 00 00 FF 
1c8d4     38 E5 05 F1 | 	add	objptr, ##10552
1c8d8     F2 26 02 F1 | 	add	local01, objptr
1c8dc     A7 12 02 F6 | 	mov	arg01, fp
1c8e0     14 00 00 FF 
1c8e4     38 E5 85 F1 | 	sub	objptr, ##10552
1c8e8     D4 11 BF FD | 	call	#_converttofloat
1c8ec     0C 26 06 F1 | 	add	local01, #12
1c8f0     13 FB 61 FC | 	wrlong	result1, local01
1c8f4     A7 F0 03 F6 | 	mov	ptra, fp
1c8f8     B2 00 A0 FD | 	call	#popregs_
1c8fc                 | _do_setvol_ret
1c8fc     2D 00 64 FD | 	ret
1c900                 | 
1c900                 | ' 
1c900                 | ' ' ------------------ setwave
1c900                 | ' 
1c900                 | ' sub do_setwave
1c900                 | _do_setwave
1c900     02 4A 05 F6 | 	mov	COUNT_, #2
1c904     A8 00 A0 FD | 	call	#pushregs_
1c908     18 F0 07 F1 | 	add	ptra, #24
1c90c     10 0F BF FD | 	call	#_pop
1c910     FD 12 02 F6 | 	mov	arg01, result1
1c914     FE 26 02 F6 | 	mov	local01, result2
1c918     FF 28 02 F6 | 	mov	local02, result3
1c91c     A7 12 62 FC | 	wrlong	arg01, fp
1c920     04 4E 05 F1 | 	add	fp, #4
1c924     A7 26 62 FC | 	wrlong	local01, fp
1c928     04 4E 05 F1 | 	add	fp, #4
1c92c     A7 28 62 FC | 	wrlong	local02, fp
1c930     08 4E 85 F1 | 	sub	fp, #8
1c934     E8 0E BF FD | 	call	#_pop
1c938     FD 28 02 F6 | 	mov	local02, result1
1c93c     0C 4E 05 F1 | 	add	fp, #12
1c940     A7 28 62 FC | 	wrlong	local02, fp
1c944     04 4E 05 F1 | 	add	fp, #4
1c948     A7 FC 61 FC | 	wrlong	result2, fp
1c94c     04 4E 05 F1 | 	add	fp, #4
1c950     A7 FE 61 FC | 	wrlong	result3, fp
1c954     08 4E 85 F1 | 	sub	fp, #8
1c958     A7 12 02 F6 | 	mov	arg01, fp
1c95c     0C 4E 85 F1 | 	sub	fp, #12
1c960     A0 10 BF FD | 	call	#_converttoint
1c964     FD 28 02 F6 | 	mov	local02, result1
1c968     14 27 02 F6 | 	mov	local01, local02
1c96c     01 26 66 F0 | 	shl	local01, #1
1c970     14 27 02 F1 | 	add	local01, local02
1c974     03 26 66 F0 | 	shl	local01, #3
1c978     14 00 00 FF 
1c97c     38 E5 05 F1 | 	add	objptr, ##10552
1c980     F2 26 02 F1 | 	add	local01, objptr
1c984     A7 12 02 F6 | 	mov	arg01, fp
1c988     14 00 00 FF 
1c98c     38 E5 85 F1 | 	sub	objptr, ##10552
1c990     70 10 BF FD | 	call	#_converttoint
1c994     04 26 06 F1 | 	add	local01, #4
1c998     13 FB 41 FC | 	wrbyte	result1, local01
1c99c     A7 F0 03 F6 | 	mov	ptra, fp
1c9a0     B2 00 A0 FD | 	call	#popregs_
1c9a4                 | _do_setwave_ret
1c9a4     2D 00 64 FD | 	ret
1c9a8                 | 
1c9a8                 | ' 
1c9a8                 | ' ' ------------------ shutup
1c9a8                 | ' 
1c9a8                 | ' sub do_shutup
1c9a8                 | _do_shutup
1c9a8     03 4A 05 F6 | 	mov	COUNT_, #3
1c9ac     A8 00 A0 FD | 	call	#pushregs_
1c9b0     18 F0 07 F1 | 	add	ptra, #24
1c9b4     4A 00 00 FF 
1c9b8     80 E4 05 F1 | 	add	objptr, ##38016
1c9bc     F2 26 02 FB | 	rdlong	local01, objptr
1c9c0     13 29 02 F6 | 	mov	local02, local01
1c9c4     01 28 66 F0 | 	shl	local02, #1
1c9c8     13 29 02 F1 | 	add	local02, local01
1c9cc     02 28 66 F0 | 	shl	local02, #2
1c9d0     03 00 00 FF 
1c9d4     04 E4 85 F1 | 	sub	objptr, ##1540
1c9d8     F2 28 02 F1 | 	add	local02, objptr
1c9dc     14 2B 0A FB | 	rdlong	local03, local02 wz
1c9e0     14 4E 05 F1 | 	add	fp, #20
1c9e4     A7 2A 62 FC | 	wrlong	local03, fp
1c9e8                 | ' 
1c9e8                 | ' numpar=compiledline(lineptr_e).result.uresult
1c9e8                 | ' if numpar=0 then
1c9e8     14 4E 85 F1 | 	sub	fp, #20
1c9ec     47 00 00 FF 
1c9f0     7C E4 85 F1 | 	sub	objptr, ##36476
1c9f4     50 00 90 5D |  if_ne	jmp	#LR__2252
1c9f8                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1c9f8     10 4E 05 F1 | 	add	fp, #16
1c9fc     A7 00 68 FC | 	wrlong	#0, fp
1ca00     37 00 00 FF 
1ca04     10 E4 05 F1 | 	add	objptr, ##28176
1ca08     97 16 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
1ca0c                 | LR__2250
1ca0c     F2 12 02 FB | 	rdlong	arg01, objptr
1ca10     A7 2A 02 FB | 	rdlong	local03, fp
1ca14     06 2A 66 F0 | 	shl	local03, #6
1ca18     15 13 02 F1 | 	add	arg01, local03
1ca1c     14 12 06 F1 | 	add	arg01, #20
1ca20     09 01 58 FC | 	wrword	#0, arg01
1ca24     A7 2A 02 FB | 	rdlong	local03, fp
1ca28     01 2A 06 F1 | 	add	local03, #1
1ca2c     A7 2A 62 FC | 	wrlong	local03, fp
1ca30     08 2A 56 F2 | 	cmps	local03, #8 wc
1ca34     D4 FF 9F CD |  if_b	jmp	#LR__2250
1ca38                 | LR__2251
1ca38     37 00 00 FF 
1ca3c     10 E4 85 F1 | 	sub	objptr, ##28176
1ca40     10 4E 85 F1 | 	sub	fp, #16
1ca44     64 00 90 FD | 	jmp	#LR__2253
1ca48                 | LR__2252
1ca48     D4 0D BF FD | 	call	#_pop
1ca4c     FF 26 02 F6 | 	mov	local01, result3
1ca50     A7 FA 61 FC | 	wrlong	result1, fp
1ca54     04 4E 05 F1 | 	add	fp, #4
1ca58     A7 FC 61 FC | 	wrlong	result2, fp
1ca5c     04 4E 05 F1 | 	add	fp, #4
1ca60     A7 26 62 FC | 	wrlong	local01, fp
1ca64     08 4E 85 F1 | 	sub	fp, #8
1ca68     A7 12 02 F6 | 	mov	arg01, fp
1ca6c     94 0F BF FD | 	call	#_converttoint
1ca70     FD 2A 52 F6 | 	abs	local03, result1 wc
1ca74     07 2A 06 F5 | 	and	local03, #7
1ca78     15 29 82 F6 | 	negc	local02, local03
1ca7c     0C 4E 05 F1 | 	add	fp, #12
1ca80     A7 28 62 FC | 	wrlong	local02, fp
1ca84     37 00 00 FF 
1ca88     10 E4 05 F1 | 	add	objptr, ##28176
1ca8c     F2 12 02 FB | 	rdlong	arg01, objptr
1ca90     37 00 00 FF 
1ca94     10 E4 85 F1 | 	sub	objptr, ##28176
1ca98     0C 4E 85 F1 | 	sub	fp, #12
1ca9c     06 28 66 F0 | 	shl	local02, #6
1caa0     14 13 02 F1 | 	add	arg01, local02
1caa4     14 12 06 F1 | 	add	arg01, #20
1caa8     09 01 58 FC | 	wrword	#0, arg01
1caac                 | LR__2253
1caac     A7 F0 03 F6 | 	mov	ptra, fp
1cab0     B2 00 A0 FD | 	call	#popregs_
1cab4                 | _do_shutup_ret
1cab4     2D 00 64 FD | 	ret
1cab8                 | 
1cab8                 | ' 
1cab8                 | ' ' ------------------ sin
1cab8                 | ' 
1cab8                 | ' sub do_sin
1cab8                 | _do_sin
1cab8     01 4A 05 F6 | 	mov	COUNT_, #1
1cabc     A8 00 A0 FD | 	call	#pushregs_
1cac0     10 F0 07 F1 | 	add	ptra, #16
1cac4     4A 00 00 FF 
1cac8     80 E4 05 F1 | 	add	objptr, ##38016
1cacc     F2 26 02 FB | 	rdlong	local01, objptr
1cad0     13 17 02 F6 | 	mov	arg03, local01
1cad4     01 16 66 F0 | 	shl	arg03, #1
1cad8     13 17 02 F1 | 	add	arg03, local01
1cadc     02 16 66 F0 | 	shl	arg03, #2
1cae0     03 00 00 FF 
1cae4     04 E4 85 F1 | 	sub	objptr, ##1540
1cae8     F2 16 02 F1 | 	add	arg03, objptr
1caec     0B 17 02 FB | 	rdlong	arg03, arg03
1caf0     0C 4E 05 F1 | 	add	fp, #12
1caf4     A7 16 62 FC | 	wrlong	arg03, fp
1caf8                 | ' 
1caf8                 | ' numpar=compiledline(lineptr_e).result.uresult
1caf8                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1caf8     0C 4E 85 F1 | 	sub	fp, #12
1cafc     02 16 16 F2 | 	cmp	arg03, #2 wc
1cb00     47 00 00 FF 
1cb04     7C E4 85 F1 | 	sub	objptr, ##36476
1cb08     0C 4E 05 C1 |  if_b	add	fp, #12
1cb0c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1cb10     0C 4E 85 C1 |  if_b	sub	fp, #12
1cb14     40 00 90 4D |  if_c_and_nz	jmp	#LR__2260
1cb18     00 12 06 F6 | 	mov	arg01, #0
1cb1c     EC 0C B1 FD | 	call	#__system___getiolock_0620
1cb20     FD 12 02 F6 | 	mov	arg01, result1
1cb24     34 B0 B0 FD | 	call	#__system___lockmem
1cb28     C1 01 00 FF 
1cb2c     E4 14 06 F6 | 	mov	arg02, ##@LR__6135
1cb30     00 12 06 F6 | 	mov	arg01, #0
1cb34     00 16 06 F6 | 	mov	arg03, #0
1cb38     18 BD B0 FD | 	call	#__system___basic_print_string
1cb3c     00 12 06 F6 | 	mov	arg01, #0
1cb40     C8 0C B1 FD | 	call	#__system___getiolock_0620
1cb44     FD 00 68 FC | 	wrlong	#0, result1
1cb48     27 12 06 F6 | 	mov	arg01, #39
1cb4c     00 14 06 F6 | 	mov	arg02, #0
1cb50     A8 75 B0 FD | 	call	#_printerror
1cb54     64 00 90 FD | 	jmp	#LR__2261
1cb58                 | LR__2260
1cb58     C4 0C BF FD | 	call	#_pop
1cb5c     A7 FA 61 FC | 	wrlong	result1, fp
1cb60     04 4E 05 F1 | 	add	fp, #4
1cb64     A7 FC 61 FC | 	wrlong	result2, fp
1cb68     04 4E 05 F1 | 	add	fp, #4
1cb6c     A7 FE 61 FC | 	wrlong	result3, fp
1cb70     08 4E 85 F1 | 	sub	fp, #8
1cb74     52 00 00 FF 
1cb78     E0 E4 05 F1 | 	add	objptr, ##42208
1cb7c     F2 26 02 FB | 	rdlong	local01, objptr
1cb80     52 00 00 FF 
1cb84     E0 E4 85 F1 | 	sub	objptr, ##42208
1cb88     A7 12 02 F6 | 	mov	arg01, fp
1cb8c     30 0F BF FD | 	call	#_converttofloat
1cb90     FD 14 02 F6 | 	mov	arg02, result1
1cb94     13 13 02 F6 | 	mov	arg01, local01
1cb98     3C DE B0 FD | 	call	#__system___float_mul
1cb9c     FD 12 02 F6 | 	mov	arg01, result1
1cba0     98 E7 B0 FD | 	call	#__system____builtin_sinf
1cba4     A7 FA 61 FC | 	wrlong	result1, fp
1cba8     08 4E 05 F1 | 	add	fp, #8
1cbac     A7 3C 68 FC | 	wrlong	#30, fp
1cbb0     08 4E 85 F1 | 	sub	fp, #8
1cbb4     A7 12 02 F6 | 	mov	arg01, fp
1cbb8     FC 0C BF FD | 	call	#_push
1cbbc                 | LR__2261
1cbbc     A7 F0 03 F6 | 	mov	ptra, fp
1cbc0     B2 00 A0 FD | 	call	#popregs_
1cbc4                 | _do_sin_ret
1cbc4     2D 00 64 FD | 	ret
1cbc8                 | 
1cbc8                 | ' 
1cbc8                 | ' ' ------------------ skip
1cbc8                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1cbc8                 | ' 
1cbc8                 | ' sub do_skip
1cbc8                 | _do_skip
1cbc8     4A 00 00 FF 
1cbcc     80 E4 05 F1 | 	add	objptr, ##38016
1cbd0     F2 00 02 FB | 	rdlong	_var01, objptr
1cbd4     00 03 02 F6 | 	mov	_var02, _var01
1cbd8     01 02 66 F0 | 	shl	_var02, #1
1cbdc     00 03 02 F1 | 	add	_var02, _var01
1cbe0     02 02 66 F0 | 	shl	_var02, #2
1cbe4     03 00 00 FF 
1cbe8     04 E4 85 F1 | 	sub	objptr, ##1540
1cbec     F2 02 02 F1 | 	add	_var02, objptr
1cbf0     01 03 02 FB | 	rdlong	_var02, _var02
1cbf4     01 02 86 F1 | 	sub	_var02, #1
1cbf8     03 00 00 FF 
1cbfc     04 E4 05 F1 | 	add	objptr, ##1540
1cc00     F2 02 62 FC | 	wrlong	_var02, objptr
1cc04     4A 00 00 FF 
1cc08     80 E4 85 F1 | 	sub	objptr, ##38016
1cc0c                 | _do_skip_ret
1cc0c     2D 00 64 FD | 	ret
1cc10                 | 
1cc10                 | ' 
1cc10                 | ' ' ------------------ sprite
1cc10                 | ' 
1cc10                 | ' sub do_sprite
1cc10                 | _do_sprite
1cc10     00 4A 05 F6 | 	mov	COUNT_, #0
1cc14     A8 00 A0 FD | 	call	#pushregs_
1cc18     30 F0 07 F1 | 	add	ptra, #48
1cc1c     00 0C BF FD | 	call	#_pop
1cc20     FD 16 02 F6 | 	mov	arg03, result1
1cc24     FE 14 02 F6 | 	mov	arg02, result2
1cc28     FF 12 02 F6 | 	mov	arg01, result3
1cc2c     18 4E 05 F1 | 	add	fp, #24
1cc30     A7 16 62 FC | 	wrlong	arg03, fp
1cc34     04 4E 05 F1 | 	add	fp, #4
1cc38     A7 14 62 FC | 	wrlong	arg02, fp
1cc3c     04 4E 05 F1 | 	add	fp, #4
1cc40     A7 12 62 FC | 	wrlong	arg01, fp
1cc44     20 4E 85 F1 | 	sub	fp, #32
1cc48     D4 0B BF FD | 	call	#_pop
1cc4c     FD 16 02 F6 | 	mov	arg03, result1
1cc50     FE 14 02 F6 | 	mov	arg02, result2
1cc54     FF 12 02 F6 | 	mov	arg01, result3
1cc58     0C 4E 05 F1 | 	add	fp, #12
1cc5c     A7 16 62 FC | 	wrlong	arg03, fp
1cc60     04 4E 05 F1 | 	add	fp, #4
1cc64     A7 14 62 FC | 	wrlong	arg02, fp
1cc68     04 4E 05 F1 | 	add	fp, #4
1cc6c     A7 12 62 FC | 	wrlong	arg01, fp
1cc70     14 4E 85 F1 | 	sub	fp, #20
1cc74     A8 0B BF FD | 	call	#_pop
1cc78     FF 16 02 F6 | 	mov	arg03, result3
1cc7c     A7 FA 61 FC | 	wrlong	result1, fp
1cc80     04 4E 05 F1 | 	add	fp, #4
1cc84     A7 FC 61 FC | 	wrlong	result2, fp
1cc88     04 4E 05 F1 | 	add	fp, #4
1cc8c     A7 16 62 FC | 	wrlong	arg03, fp
1cc90     08 4E 85 F1 | 	sub	fp, #8
1cc94     A7 12 02 F6 | 	mov	arg01, fp
1cc98     68 0D BF FD | 	call	#_converttoint
1cc9c     24 4E 05 F1 | 	add	fp, #36
1cca0     A7 FA 61 FC | 	wrlong	result1, fp
1cca4     18 4E 85 F1 | 	sub	fp, #24
1cca8     A7 12 02 F6 | 	mov	arg01, fp
1ccac     0C 4E 85 F1 | 	sub	fp, #12
1ccb0     50 0D BF FD | 	call	#_converttoint
1ccb4     28 4E 05 F1 | 	add	fp, #40
1ccb8     A7 FA 61 FC | 	wrlong	result1, fp
1ccbc     10 4E 85 F1 | 	sub	fp, #16
1ccc0     A7 12 02 F6 | 	mov	arg01, fp
1ccc4     18 4E 85 F1 | 	sub	fp, #24
1ccc8     38 0D BF FD | 	call	#_converttoint
1cccc     2C 4E 05 F1 | 	add	fp, #44
1ccd0     A7 FA 61 FC | 	wrlong	result1, fp
1ccd4     08 4E 85 F1 | 	sub	fp, #8
1ccd8     A7 12 02 FB | 	rdlong	arg01, fp
1ccdc     04 4E 05 F1 | 	add	fp, #4
1cce0     A7 14 02 FB | 	rdlong	arg02, fp
1cce4     FD 16 02 F6 | 	mov	arg03, result1
1cce8     28 4E 85 F1 | 	sub	fp, #40
1ccec     14 84 B0 FD | 	call	#_hg010b_spin2_setspritepos
1ccf0     A7 F0 03 F6 | 	mov	ptra, fp
1ccf4     B2 00 A0 FD | 	call	#popregs_
1ccf8                 | _do_sprite_ret
1ccf8     2D 00 64 FD | 	ret
1ccfc                 | 
1ccfc                 | ' 
1ccfc                 | ' ' ------------------ sqr
1ccfc                 | ' 
1ccfc                 | ' sub do_sqr
1ccfc                 | _do_sqr
1ccfc     01 4A 05 F6 | 	mov	COUNT_, #1
1cd00     A8 00 A0 FD | 	call	#pushregs_
1cd04     10 F0 07 F1 | 	add	ptra, #16
1cd08     4A 00 00 FF 
1cd0c     80 E4 05 F1 | 	add	objptr, ##38016
1cd10     F2 26 02 FB | 	rdlong	local01, objptr
1cd14     13 17 02 F6 | 	mov	arg03, local01
1cd18     01 16 66 F0 | 	shl	arg03, #1
1cd1c     13 17 02 F1 | 	add	arg03, local01
1cd20     02 16 66 F0 | 	shl	arg03, #2
1cd24     03 00 00 FF 
1cd28     04 E4 85 F1 | 	sub	objptr, ##1540
1cd2c     F2 16 02 F1 | 	add	arg03, objptr
1cd30     0B 17 02 FB | 	rdlong	arg03, arg03
1cd34     0C 4E 05 F1 | 	add	fp, #12
1cd38     A7 16 62 FC | 	wrlong	arg03, fp
1cd3c                 | ' 
1cd3c                 | ' numpar=compiledline(lineptr_e).result.uresult
1cd3c                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1cd3c     0C 4E 85 F1 | 	sub	fp, #12
1cd40     02 16 16 F2 | 	cmp	arg03, #2 wc
1cd44     47 00 00 FF 
1cd48     7C E4 85 F1 | 	sub	objptr, ##36476
1cd4c     0C 4E 05 C1 |  if_b	add	fp, #12
1cd50     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1cd54     0C 4E 85 C1 |  if_b	sub	fp, #12
1cd58     40 00 90 4D |  if_c_and_nz	jmp	#LR__2270
1cd5c     00 12 06 F6 | 	mov	arg01, #0
1cd60     A8 0A B1 FD | 	call	#__system___getiolock_0620
1cd64     FD 12 02 F6 | 	mov	arg01, result1
1cd68     F0 AD B0 FD | 	call	#__system___lockmem
1cd6c     C1 01 00 FF 
1cd70     EA 14 06 F6 | 	mov	arg02, ##@LR__6136
1cd74     00 12 06 F6 | 	mov	arg01, #0
1cd78     00 16 06 F6 | 	mov	arg03, #0
1cd7c     D4 BA B0 FD | 	call	#__system___basic_print_string
1cd80     00 12 06 F6 | 	mov	arg01, #0
1cd84     84 0A B1 FD | 	call	#__system___getiolock_0620
1cd88     FD 00 68 FC | 	wrlong	#0, result1
1cd8c     27 12 06 F6 | 	mov	arg01, #39
1cd90     00 14 06 F6 | 	mov	arg02, #0
1cd94     64 73 B0 FD | 	call	#_printerror
1cd98     48 00 90 FD | 	jmp	#LR__2271
1cd9c                 | LR__2270
1cd9c     80 0A BF FD | 	call	#_pop
1cda0     FF 26 02 F6 | 	mov	local01, result3
1cda4     A7 FA 61 FC | 	wrlong	result1, fp
1cda8     04 4E 05 F1 | 	add	fp, #4
1cdac     A7 FC 61 FC | 	wrlong	result2, fp
1cdb0     04 4E 05 F1 | 	add	fp, #4
1cdb4     A7 26 62 FC | 	wrlong	local01, fp
1cdb8     08 4E 85 F1 | 	sub	fp, #8
1cdbc     A7 12 02 F6 | 	mov	arg01, fp
1cdc0     FC 0C BF FD | 	call	#_converttofloat
1cdc4     FD 12 02 F6 | 	mov	arg01, result1
1cdc8     34 DB B0 FD | 	call	#__system___float_sqrt
1cdcc     A7 FA 61 FC | 	wrlong	result1, fp
1cdd0     08 4E 05 F1 | 	add	fp, #8
1cdd4     A7 3C 68 FC | 	wrlong	#30, fp
1cdd8     08 4E 85 F1 | 	sub	fp, #8
1cddc     A7 12 02 F6 | 	mov	arg01, fp
1cde0     D4 0A BF FD | 	call	#_push
1cde4                 | LR__2271
1cde4     A7 F0 03 F6 | 	mov	ptra, fp
1cde8     B2 00 A0 FD | 	call	#popregs_
1cdec                 | _do_sqr_ret
1cdec     2D 00 64 FD | 	ret
1cdf0                 | 
1cdf0                 | ' 
1cdf0                 | ' ' ------------------ stick
1cdf0                 | ' 
1cdf0                 | ' sub do_stick
1cdf0                 | _do_stick
1cdf0     01 4A 05 F6 | 	mov	COUNT_, #1
1cdf4     A8 00 A0 FD | 	call	#pushregs_
1cdf8     10 F0 07 F1 | 	add	ptra, #16
1cdfc     4A 00 00 FF 
1ce00     80 E4 05 F1 | 	add	objptr, ##38016
1ce04     F2 26 02 FB | 	rdlong	local01, objptr
1ce08     13 17 02 F6 | 	mov	arg03, local01
1ce0c     01 16 66 F0 | 	shl	arg03, #1
1ce10     13 17 02 F1 | 	add	arg03, local01
1ce14     02 16 66 F0 | 	shl	arg03, #2
1ce18     03 00 00 FF 
1ce1c     04 E4 85 F1 | 	sub	objptr, ##1540
1ce20     F2 16 02 F1 | 	add	arg03, objptr
1ce24     0B 17 02 FB | 	rdlong	arg03, arg03
1ce28     0C 4E 05 F1 | 	add	fp, #12
1ce2c     A7 16 62 FC | 	wrlong	arg03, fp
1ce30                 | ' 
1ce30                 | ' numpar=compiledline(lineptr_e).result.uresult
1ce30                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1ce30     0C 4E 85 F1 | 	sub	fp, #12
1ce34     02 16 16 F2 | 	cmp	arg03, #2 wc
1ce38     47 00 00 FF 
1ce3c     7C E4 85 F1 | 	sub	objptr, ##36476
1ce40     40 00 90 CD |  if_b	jmp	#LR__2280
1ce44     00 12 06 F6 | 	mov	arg01, #0
1ce48     C0 09 B1 FD | 	call	#__system___getiolock_0620
1ce4c     FD 12 02 F6 | 	mov	arg01, result1
1ce50     08 AD B0 FD | 	call	#__system___lockmem
1ce54     C1 01 00 FF 
1ce58     F0 14 06 F6 | 	mov	arg02, ##@LR__6137
1ce5c     00 12 06 F6 | 	mov	arg01, #0
1ce60     00 16 06 F6 | 	mov	arg03, #0
1ce64     EC B9 B0 FD | 	call	#__system___basic_print_string
1ce68     00 12 06 F6 | 	mov	arg01, #0
1ce6c     9C 09 B1 FD | 	call	#__system___getiolock_0620
1ce70     FD 00 68 FC | 	wrlong	#0, result1
1ce74     27 12 06 F6 | 	mov	arg01, #39
1ce78     00 14 06 F6 | 	mov	arg02, #0
1ce7c     7C 72 B0 FD | 	call	#_printerror
1ce80     F0 00 90 FD | 	jmp	#LR__2284
1ce84                 | LR__2280
1ce84                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1ce84     0C 4E 05 F1 | 	add	fp, #12
1ce88     A7 FE 09 FB | 	rdlong	result3, fp wz
1ce8c     0C 4E 85 F1 | 	sub	fp, #12
1ce90     30 00 90 5D |  if_ne	jmp	#LR__2281
1ce94     52 00 00 FF 
1ce98     54 E4 05 F1 | 	add	objptr, ##42068
1ce9c     F2 26 02 FB | 	rdlong	local01, objptr
1cea0     52 00 00 FF 
1cea4     54 E4 85 F1 | 	sub	objptr, ##42068
1cea8     A7 26 62 FC | 	wrlong	local01, fp
1ceac     08 4E 05 F1 | 	add	fp, #8
1ceb0     A7 3A 68 FC | 	wrlong	#29, fp
1ceb4     08 4E 85 F1 | 	sub	fp, #8
1ceb8     A7 12 02 F6 | 	mov	arg01, fp
1cebc     F8 09 BF FD | 	call	#_push
1cec0     B0 00 90 FD | 	jmp	#LR__2284
1cec4                 | LR__2281
1cec4     58 09 BF FD | 	call	#_pop
1cec8     A7 FA 61 FC | 	wrlong	result1, fp
1cecc     04 4E 05 F1 | 	add	fp, #4
1ced0     A7 FC 61 FC | 	wrlong	result2, fp
1ced4     04 4E 05 F1 | 	add	fp, #4
1ced8     A7 FE 61 FC | 	wrlong	result3, fp
1cedc                 | ' t1=pop()
1cedc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1cedc     08 4E 85 F1 | 	sub	fp, #8
1cee0     1C FE 0D F2 | 	cmp	result3, #28 wz
1cee4     08 4E 05 51 |  if_ne	add	fp, #8
1cee8     A7 26 02 5B |  if_ne	rdlong	local01, fp
1ceec     08 4E 85 51 |  if_ne	sub	fp, #8
1cef0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1cef4     70 00 90 5D |  if_ne	jmp	#LR__2283
1cef8     A7 26 02 FB | 	rdlong	local01, fp
1cefc     52 00 00 FF 
1cf00     44 E5 05 F1 | 	add	objptr, ##42308
1cf04     F2 26 62 FC | 	wrlong	local01, objptr
1cf08                 | '   q=t1.result.uresult
1cf08                 | '   if q<7 then 
1cf08     52 00 00 FF 
1cf0c     44 E5 85 F1 | 	sub	objptr, ##42308
1cf10     07 26 56 F2 | 	cmps	local01, #7 wc
1cf14     40 00 90 3D |  if_ae	jmp	#LR__2282
1cf18     52 00 00 FF 
1cf1c     44 E5 05 F1 | 	add	objptr, ##42308
1cf20     F2 26 02 FB | 	rdlong	local01, objptr
1cf24     02 26 66 F0 | 	shl	local01, #2
1cf28     F0 E4 85 F1 | 	sub	objptr, #240
1cf2c     F2 26 02 F1 | 	add	local01, objptr
1cf30     13 27 02 FB | 	rdlong	local01, local01
1cf34     A7 26 62 FC | 	wrlong	local01, fp
1cf38     08 4E 05 F1 | 	add	fp, #8
1cf3c     A7 3A 68 FC | 	wrlong	#29, fp
1cf40     08 4E 85 F1 | 	sub	fp, #8
1cf44     A7 12 02 F6 | 	mov	arg01, fp
1cf48     52 00 00 FF 
1cf4c     54 E4 85 F1 | 	sub	objptr, ##42068
1cf50     64 09 BF FD | 	call	#_push
1cf54                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1cf54     1C 00 90 FD | 	jmp	#LR__2284
1cf58                 | LR__2282
1cf58     29 12 06 F6 | 	mov	arg01, #41
1cf5c     00 14 06 F6 | 	mov	arg02, #0
1cf60     98 71 B0 FD | 	call	#_printerror
1cf64                 | '      printerror(41) : return
1cf64     0C 00 90 FD | 	jmp	#LR__2284
1cf68                 | LR__2283
1cf68     29 12 06 F6 | 	mov	arg01, #41
1cf6c     00 14 06 F6 | 	mov	arg02, #0
1cf70     88 71 B0 FD | 	call	#_printerror
1cf74                 | LR__2284
1cf74     A7 F0 03 F6 | 	mov	ptra, fp
1cf78     B2 00 A0 FD | 	call	#popregs_
1cf7c                 | _do_stick_ret
1cf7c     2D 00 64 FD | 	ret
1cf80                 | 
1cf80                 | ' 
1cf80                 | ' ' ------------------ strig
1cf80                 | ' 
1cf80                 | ' sub do_strig
1cf80                 | _do_strig
1cf80     01 4A 05 F6 | 	mov	COUNT_, #1
1cf84     A8 00 A0 FD | 	call	#pushregs_
1cf88     10 F0 07 F1 | 	add	ptra, #16
1cf8c     4A 00 00 FF 
1cf90     80 E4 05 F1 | 	add	objptr, ##38016
1cf94     F2 26 02 FB | 	rdlong	local01, objptr
1cf98     13 17 02 F6 | 	mov	arg03, local01
1cf9c     01 16 66 F0 | 	shl	arg03, #1
1cfa0     13 17 02 F1 | 	add	arg03, local01
1cfa4     02 16 66 F0 | 	shl	arg03, #2
1cfa8     03 00 00 FF 
1cfac     04 E4 85 F1 | 	sub	objptr, ##1540
1cfb0     F2 16 02 F1 | 	add	arg03, objptr
1cfb4     0B 17 02 FB | 	rdlong	arg03, arg03
1cfb8     0C 4E 05 F1 | 	add	fp, #12
1cfbc     A7 16 62 FC | 	wrlong	arg03, fp
1cfc0                 | ' 
1cfc0                 | ' numpar=compiledline(lineptr_e).result.uresult
1cfc0                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1cfc0     0C 4E 85 F1 | 	sub	fp, #12
1cfc4     02 16 16 F2 | 	cmp	arg03, #2 wc
1cfc8     47 00 00 FF 
1cfcc     7C E4 85 F1 | 	sub	objptr, ##36476
1cfd0     40 00 90 CD |  if_b	jmp	#LR__2290
1cfd4     00 12 06 F6 | 	mov	arg01, #0
1cfd8     30 08 B1 FD | 	call	#__system___getiolock_0620
1cfdc     FD 12 02 F6 | 	mov	arg01, result1
1cfe0     78 AB B0 FD | 	call	#__system___lockmem
1cfe4     C1 01 00 FF 
1cfe8     F8 14 06 F6 | 	mov	arg02, ##@LR__6138
1cfec     00 12 06 F6 | 	mov	arg01, #0
1cff0     00 16 06 F6 | 	mov	arg03, #0
1cff4     5C B8 B0 FD | 	call	#__system___basic_print_string
1cff8     00 12 06 F6 | 	mov	arg01, #0
1cffc     0C 08 B1 FD | 	call	#__system___getiolock_0620
1d000     FD 00 68 FC | 	wrlong	#0, result1
1d004     27 12 06 F6 | 	mov	arg01, #39
1d008     00 14 06 F6 | 	mov	arg02, #0
1d00c     EC 70 B0 FD | 	call	#_printerror
1d010     F0 00 90 FD | 	jmp	#LR__2294
1d014                 | LR__2290
1d014                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1d014     0C 4E 05 F1 | 	add	fp, #12
1d018     A7 FE 09 FB | 	rdlong	result3, fp wz
1d01c     0C 4E 85 F1 | 	sub	fp, #12
1d020     30 00 90 5D |  if_ne	jmp	#LR__2291
1d024     52 00 00 FF 
1d028     70 E4 05 F1 | 	add	objptr, ##42096
1d02c     F2 26 02 FB | 	rdlong	local01, objptr
1d030     52 00 00 FF 
1d034     70 E4 85 F1 | 	sub	objptr, ##42096
1d038     A7 26 62 FC | 	wrlong	local01, fp
1d03c     08 4E 05 F1 | 	add	fp, #8
1d040     A7 3A 68 FC | 	wrlong	#29, fp
1d044     08 4E 85 F1 | 	sub	fp, #8
1d048     A7 12 02 F6 | 	mov	arg01, fp
1d04c     68 08 BF FD | 	call	#_push
1d050     B0 00 90 FD | 	jmp	#LR__2294
1d054                 | LR__2291
1d054     C8 07 BF FD | 	call	#_pop
1d058     A7 FA 61 FC | 	wrlong	result1, fp
1d05c     04 4E 05 F1 | 	add	fp, #4
1d060     A7 FC 61 FC | 	wrlong	result2, fp
1d064     04 4E 05 F1 | 	add	fp, #4
1d068     A7 FE 61 FC | 	wrlong	result3, fp
1d06c                 | ' t1=pop()
1d06c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1d06c     08 4E 85 F1 | 	sub	fp, #8
1d070     1C FE 0D F2 | 	cmp	result3, #28 wz
1d074     08 4E 05 51 |  if_ne	add	fp, #8
1d078     A7 26 02 5B |  if_ne	rdlong	local01, fp
1d07c     08 4E 85 51 |  if_ne	sub	fp, #8
1d080     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1d084     70 00 90 5D |  if_ne	jmp	#LR__2293
1d088     A7 26 02 FB | 	rdlong	local01, fp
1d08c     52 00 00 FF 
1d090     44 E5 05 F1 | 	add	objptr, ##42308
1d094     F2 26 62 FC | 	wrlong	local01, objptr
1d098                 | '   q=t1.result.uresult
1d098                 | '   if q<7 then 
1d098     52 00 00 FF 
1d09c     44 E5 85 F1 | 	sub	objptr, ##42308
1d0a0     07 26 56 F2 | 	cmps	local01, #7 wc
1d0a4     40 00 90 3D |  if_ae	jmp	#LR__2292
1d0a8     52 00 00 FF 
1d0ac     44 E5 05 F1 | 	add	objptr, ##42308
1d0b0     F2 26 02 FB | 	rdlong	local01, objptr
1d0b4     02 26 66 F0 | 	shl	local01, #2
1d0b8     D4 E4 85 F1 | 	sub	objptr, #212
1d0bc     F2 26 02 F1 | 	add	local01, objptr
1d0c0     13 27 02 FB | 	rdlong	local01, local01
1d0c4     A7 26 62 FC | 	wrlong	local01, fp
1d0c8     08 4E 05 F1 | 	add	fp, #8
1d0cc     A7 3A 68 FC | 	wrlong	#29, fp
1d0d0     08 4E 85 F1 | 	sub	fp, #8
1d0d4     A7 12 02 F6 | 	mov	arg01, fp
1d0d8     52 00 00 FF 
1d0dc     70 E4 85 F1 | 	sub	objptr, ##42096
1d0e0     D4 07 BF FD | 	call	#_push
1d0e4                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1d0e4     1C 00 90 FD | 	jmp	#LR__2294
1d0e8                 | LR__2292
1d0e8     29 12 06 F6 | 	mov	arg01, #41
1d0ec     00 14 06 F6 | 	mov	arg02, #0
1d0f0     08 70 B0 FD | 	call	#_printerror
1d0f4                 | '      printerror(41) : return
1d0f4     0C 00 90 FD | 	jmp	#LR__2294
1d0f8                 | LR__2293
1d0f8     29 12 06 F6 | 	mov	arg01, #41
1d0fc     00 14 06 F6 | 	mov	arg02, #0
1d100     F8 6F B0 FD | 	call	#_printerror
1d104                 | LR__2294
1d104     A7 F0 03 F6 | 	mov	ptra, fp
1d108     B2 00 A0 FD | 	call	#popregs_
1d10c                 | _do_strig_ret
1d10c     2D 00 64 FD | 	ret
1d110                 | 
1d110                 | ' 
1d110                 | ' ' ------------------ tan
1d110                 | ' 
1d110                 | ' sub do_tan
1d110                 | _do_tan
1d110     01 4A 05 F6 | 	mov	COUNT_, #1
1d114     A8 00 A0 FD | 	call	#pushregs_
1d118     10 F0 07 F1 | 	add	ptra, #16
1d11c     4A 00 00 FF 
1d120     80 E4 05 F1 | 	add	objptr, ##38016
1d124     F2 26 02 FB | 	rdlong	local01, objptr
1d128     13 17 02 F6 | 	mov	arg03, local01
1d12c     01 16 66 F0 | 	shl	arg03, #1
1d130     13 17 02 F1 | 	add	arg03, local01
1d134     02 16 66 F0 | 	shl	arg03, #2
1d138     03 00 00 FF 
1d13c     04 E4 85 F1 | 	sub	objptr, ##1540
1d140     F2 16 02 F1 | 	add	arg03, objptr
1d144     0B 17 02 FB | 	rdlong	arg03, arg03
1d148     0C 4E 05 F1 | 	add	fp, #12
1d14c     A7 16 62 FC | 	wrlong	arg03, fp
1d150                 | ' 
1d150                 | ' numpar=compiledline(lineptr_e).result.uresult
1d150                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1d150     0C 4E 85 F1 | 	sub	fp, #12
1d154     02 16 16 F2 | 	cmp	arg03, #2 wc
1d158     47 00 00 FF 
1d15c     7C E4 85 F1 | 	sub	objptr, ##36476
1d160     0C 4E 05 C1 |  if_b	add	fp, #12
1d164     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d168     0C 4E 85 C1 |  if_b	sub	fp, #12
1d16c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2300
1d170     00 12 06 F6 | 	mov	arg01, #0
1d174     94 06 B1 FD | 	call	#__system___getiolock_0620
1d178     FD 12 02 F6 | 	mov	arg01, result1
1d17c     DC A9 B0 FD | 	call	#__system___lockmem
1d180     C1 01 00 FF 
1d184     00 15 06 F6 | 	mov	arg02, ##@LR__6139
1d188     00 12 06 F6 | 	mov	arg01, #0
1d18c     00 16 06 F6 | 	mov	arg03, #0
1d190     C0 B6 B0 FD | 	call	#__system___basic_print_string
1d194     00 12 06 F6 | 	mov	arg01, #0
1d198     70 06 B1 FD | 	call	#__system___getiolock_0620
1d19c     FD 00 68 FC | 	wrlong	#0, result1
1d1a0     27 12 06 F6 | 	mov	arg01, #39
1d1a4     00 14 06 F6 | 	mov	arg02, #0
1d1a8     50 6F B0 FD | 	call	#_printerror
1d1ac     64 00 90 FD | 	jmp	#LR__2301
1d1b0                 | LR__2300
1d1b0     6C 06 BF FD | 	call	#_pop
1d1b4     A7 FA 61 FC | 	wrlong	result1, fp
1d1b8     04 4E 05 F1 | 	add	fp, #4
1d1bc     A7 FC 61 FC | 	wrlong	result2, fp
1d1c0     04 4E 05 F1 | 	add	fp, #4
1d1c4     A7 FE 61 FC | 	wrlong	result3, fp
1d1c8     08 4E 85 F1 | 	sub	fp, #8
1d1cc     52 00 00 FF 
1d1d0     E0 E4 05 F1 | 	add	objptr, ##42208
1d1d4     F2 26 02 FB | 	rdlong	local01, objptr
1d1d8     52 00 00 FF 
1d1dc     E0 E4 85 F1 | 	sub	objptr, ##42208
1d1e0     A7 12 02 F6 | 	mov	arg01, fp
1d1e4     D8 08 BF FD | 	call	#_converttofloat
1d1e8     FD 14 02 F6 | 	mov	arg02, result1
1d1ec     13 13 02 F6 | 	mov	arg01, local01
1d1f0     E4 D7 B0 FD | 	call	#__system___float_mul
1d1f4     FD 12 02 F6 | 	mov	arg01, result1
1d1f8     8C E2 B0 FD | 	call	#__system____builtin_tanf
1d1fc     A7 FA 61 FC | 	wrlong	result1, fp
1d200     08 4E 05 F1 | 	add	fp, #8
1d204     A7 3C 68 FC | 	wrlong	#30, fp
1d208     08 4E 85 F1 | 	sub	fp, #8
1d20c     A7 12 02 F6 | 	mov	arg01, fp
1d210     A4 06 BF FD | 	call	#_push
1d214                 | LR__2301
1d214     A7 F0 03 F6 | 	mov	ptra, fp
1d218     B2 00 A0 FD | 	call	#popregs_
1d21c                 | _do_tan_ret
1d21c     2D 00 64 FD | 	ret
1d220                 | 
1d220                 | ' 
1d220                 | ' ' ------------------ val
1d220                 | ' 
1d220                 | ' sub do_val
1d220                 | _do_val
1d220     03 4A 05 F6 | 	mov	COUNT_, #3
1d224     A8 00 A0 FD | 	call	#pushregs_
1d228     20 F0 07 F1 | 	add	ptra, #32
1d22c     4A 00 00 FF 
1d230     80 E4 05 F1 | 	add	objptr, ##38016
1d234     F2 16 02 FB | 	rdlong	arg03, objptr
1d238     0B 27 02 F6 | 	mov	local01, arg03
1d23c     01 26 66 F0 | 	shl	local01, #1
1d240     0B 27 02 F1 | 	add	local01, arg03
1d244     02 26 66 F0 | 	shl	local01, #2
1d248     03 00 00 FF 
1d24c     04 E4 85 F1 | 	sub	objptr, ##1540
1d250     F2 26 02 F1 | 	add	local01, objptr
1d254     13 17 02 FB | 	rdlong	arg03, local01
1d258     0C 4E 05 F1 | 	add	fp, #12
1d25c     A7 16 62 FC | 	wrlong	arg03, fp
1d260                 | ' 
1d260                 | ' numpar=compiledline(lineptr_e).result.uresult
1d260                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1d260     0C 4E 85 F1 | 	sub	fp, #12
1d264     02 16 16 F2 | 	cmp	arg03, #2 wc
1d268     47 00 00 FF 
1d26c     7C E4 85 F1 | 	sub	objptr, ##36476
1d270     0C 4E 05 C1 |  if_b	add	fp, #12
1d274     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1d278     0C 4E 85 C1 |  if_b	sub	fp, #12
1d27c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2310
1d280     00 12 06 F6 | 	mov	arg01, #0
1d284     84 05 B1 FD | 	call	#__system___getiolock_0620
1d288     FD 12 02 F6 | 	mov	arg01, result1
1d28c     CC A8 B0 FD | 	call	#__system___lockmem
1d290     C1 01 00 FF 
1d294     06 15 06 F6 | 	mov	arg02, ##@LR__6140
1d298     00 12 06 F6 | 	mov	arg01, #0
1d29c     00 16 06 F6 | 	mov	arg03, #0
1d2a0     B0 B5 B0 FD | 	call	#__system___basic_print_string
1d2a4     00 12 06 F6 | 	mov	arg01, #0
1d2a8     60 05 B1 FD | 	call	#__system___getiolock_0620
1d2ac     FD 00 68 FC | 	wrlong	#0, result1
1d2b0     27 12 06 F6 | 	mov	arg01, #39
1d2b4     00 14 06 F6 | 	mov	arg02, #0
1d2b8     40 6E B0 FD | 	call	#_printerror
1d2bc     60 02 90 FD | 	jmp	#LR__2323
1d2c0                 | LR__2310
1d2c0     5C 05 BF FD | 	call	#_pop
1d2c4     FF 16 02 F6 | 	mov	arg03, result3
1d2c8     A7 FA 61 FC | 	wrlong	result1, fp
1d2cc     04 4E 05 F1 | 	add	fp, #4
1d2d0     A7 FC 61 FC | 	wrlong	result2, fp
1d2d4     04 4E 05 F1 | 	add	fp, #4
1d2d8     A7 16 62 FC | 	wrlong	arg03, fp
1d2dc                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1d2dc     08 4E 85 F1 | 	sub	fp, #8
1d2e0     2B 16 0E F2 | 	cmp	arg03, #43 wz
1d2e4     18 00 90 5D |  if_ne	jmp	#LR__2311
1d2e8     A7 12 02 FB | 	rdlong	arg01, fp
1d2ec     A8 06 BF FD | 	call	#_convertstring
1d2f0     A7 FA 61 FC | 	wrlong	result1, fp
1d2f4     08 4E 05 F1 | 	add	fp, #8
1d2f8     A7 3E 68 FC | 	wrlong	#31, fp
1d2fc     08 4E 85 F1 | 	sub	fp, #8
1d300                 | LR__2311
1d300                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1d300     08 4E 05 F1 | 	add	fp, #8
1d304     A7 16 02 FB | 	rdlong	arg03, fp
1d308     08 4E 85 F1 | 	sub	fp, #8
1d30c     1F 16 0E F2 | 	cmp	arg03, #31 wz
1d310     40 00 90 AD |  if_e	jmp	#LR__2312
1d314     00 12 06 F6 | 	mov	arg01, #0
1d318     F0 04 B1 FD | 	call	#__system___getiolock_0620
1d31c     FD 12 02 F6 | 	mov	arg01, result1
1d320     38 A8 B0 FD | 	call	#__system___lockmem
1d324     C1 01 00 FF 
1d328     0C 15 06 F6 | 	mov	arg02, ##@LR__6141
1d32c     00 12 06 F6 | 	mov	arg01, #0
1d330     00 16 06 F6 | 	mov	arg03, #0
1d334     1C B5 B0 FD | 	call	#__system___basic_print_string
1d338     00 12 06 F6 | 	mov	arg01, #0
1d33c     CC 04 B1 FD | 	call	#__system___getiolock_0620
1d340     FD 00 68 FC | 	wrlong	#0, result1
1d344     0F 12 06 F6 | 	mov	arg01, #15
1d348     00 14 06 F6 | 	mov	arg02, #0
1d34c     AC 6D B0 FD | 	call	#_printerror
1d350     CC 01 90 FD | 	jmp	#LR__2323
1d354                 | LR__2312
1d354                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1d354     A7 12 02 FB | 	rdlong	arg01, fp
1d358     01 14 06 F6 | 	mov	arg02, #1
1d35c     7C C8 B0 FD | 	call	#__system__Left_S
1d360     FD 12 02 F6 | 	mov	arg01, result1
1d364     C1 01 00 FF 
1d368     12 15 06 F6 | 	mov	arg02, ##@LR__6142
1d36c     14 A8 B0 FD | 	call	#__system___string_cmp
1d370     00 FA 0D F2 | 	cmp	result1, #0 wz
1d374     48 00 90 5D |  if_ne	jmp	#LR__2315
1d378     C1 01 00 FF 
1d37c     14 27 06 F6 | 	mov	local01, ##@LR__6143
1d380     A7 16 02 FB | 	rdlong	arg03, fp
1d384     0B 13 02 F6 | 	mov	arg01, arg03
1d388     09 29 02 F6 | 	mov	local02, arg01
1d38c     97 06 48 FB | 	callpa	#(@LR__2314-@LR__2313)>>2,fcache_load_ptr_
1d390                 | LR__2313
1d390     14 FB C9 FA | 	rdbyte	result1, local02 wz
1d394     01 28 06 51 |  if_ne	add	local02, #1
1d398     F4 FF 9F 5D |  if_ne	jmp	#LR__2313
1d39c                 | LR__2314
1d39c     09 29 82 F1 | 	sub	local02, arg01
1d3a0     14 15 02 F6 | 	mov	arg02, local02
1d3a4     01 14 86 F1 | 	sub	arg02, #1
1d3a8     0B 13 02 F6 | 	mov	arg01, arg03
1d3ac     B4 C8 B0 FD | 	call	#__system__Right_S
1d3b0     FD 14 02 F6 | 	mov	arg02, result1
1d3b4     13 13 02 F6 | 	mov	arg01, local01
1d3b8     FC A7 B0 FD | 	call	#__system___string_concat
1d3bc     A7 FA 61 FC | 	wrlong	result1, fp
1d3c0                 | LR__2315
1d3c0                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1d3c0     A7 12 02 FB | 	rdlong	arg01, fp
1d3c4     01 14 06 F6 | 	mov	arg02, #1
1d3c8     10 C8 B0 FD | 	call	#__system__Left_S
1d3cc     FD 12 02 F6 | 	mov	arg01, result1
1d3d0     C1 01 00 FF 
1d3d4     17 15 06 F6 | 	mov	arg02, ##@LR__6144
1d3d8     A8 A7 B0 FD | 	call	#__system___string_cmp
1d3dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1d3e0     48 00 90 5D |  if_ne	jmp	#LR__2318
1d3e4     C1 01 00 FF 
1d3e8     19 27 06 F6 | 	mov	local01, ##@LR__6145
1d3ec     A7 16 02 FB | 	rdlong	arg03, fp
1d3f0     0B 13 02 F6 | 	mov	arg01, arg03
1d3f4     09 29 02 F6 | 	mov	local02, arg01
1d3f8     97 06 48 FB | 	callpa	#(@LR__2317-@LR__2316)>>2,fcache_load_ptr_
1d3fc                 | LR__2316
1d3fc     14 FB C9 FA | 	rdbyte	result1, local02 wz
1d400     01 28 06 51 |  if_ne	add	local02, #1
1d404     F4 FF 9F 5D |  if_ne	jmp	#LR__2316
1d408                 | LR__2317
1d408     09 29 82 F1 | 	sub	local02, arg01
1d40c     14 15 02 F6 | 	mov	arg02, local02
1d410     01 14 86 F1 | 	sub	arg02, #1
1d414     0B 13 02 F6 | 	mov	arg01, arg03
1d418     48 C8 B0 FD | 	call	#__system__Right_S
1d41c     FD 14 02 F6 | 	mov	arg02, result1
1d420     13 13 02 F6 | 	mov	arg01, local01
1d424     90 A7 B0 FD | 	call	#__system___string_concat
1d428     A7 FA 61 FC | 	wrlong	result1, fp
1d42c                 | LR__2318
1d42c     A7 12 02 FB | 	rdlong	arg01, fp
1d430     B4 DD B0 FD | 	call	#__system____builtin_atof
1d434     1C 4E 05 F1 | 	add	fp, #28
1d438     A7 FA 61 FC | 	wrlong	result1, fp
1d43c     1C 4E 85 F1 | 	sub	fp, #28
1d440     A7 12 02 FB | 	rdlong	arg01, fp
1d444     00 14 06 F6 | 	mov	arg02, #0
1d448     04 DC B0 FD | 	call	#__system____builtin_atoi
1d44c     18 4E 05 F1 | 	add	fp, #24
1d450     A7 FA 61 FC | 	wrlong	result1, fp
1d454                 | ' fval=val(t1.result.sresult)
1d454                 | ' ival=val%(t1.result.sresult)
1d454                 | ' if fval=ival then
1d454     04 4E 05 F1 | 	add	fp, #4
1d458     A7 26 02 FB | 	rdlong	local01, fp
1d45c     1C 4E 85 F1 | 	sub	fp, #28
1d460     FD 12 52 F6 | 	abs	arg01, result1 wc
1d464     1F 2A C6 C9 |  if_b	decod	local03, #31
1d468     00 2A 06 36 |  if_ae	mov	local03, #0
1d46c     64 D1 B0 FD | 	call	#__system___float_fromuns
1d470     15 FB 61 F5 | 	xor	result1, local03
1d474     FD 14 02 F6 | 	mov	arg02, result1
1d478     13 13 02 F6 | 	mov	arg01, local01
1d47c     01 16 06 F6 | 	mov	arg03, #1
1d480     88 D9 B0 FD | 	call	#__system___float_cmp
1d484     00 FA 0D F2 | 	cmp	result1, #0 wz
1d488     20 00 90 5D |  if_ne	jmp	#LR__2319
1d48c     18 4E 05 F1 | 	add	fp, #24
1d490     A7 26 02 FB | 	rdlong	local01, fp
1d494     18 4E 85 F1 | 	sub	fp, #24
1d498     A7 26 62 FC | 	wrlong	local01, fp
1d49c     08 4E 05 F1 | 	add	fp, #8
1d4a0     A7 38 68 FC | 	wrlong	#28, fp
1d4a4     08 4E 85 F1 | 	sub	fp, #8
1d4a8     6C 00 90 FD | 	jmp	#LR__2322
1d4ac                 | LR__2319
1d4ac                 | '   if fval=0 andalso ival<>0 then
1d4ac     1C 4E 05 F1 | 	add	fp, #28
1d4b0     A7 12 02 FB | 	rdlong	arg01, fp
1d4b4     1C 4E 85 F1 | 	sub	fp, #28
1d4b8     00 14 06 F6 | 	mov	arg02, #0
1d4bc     01 16 06 F6 | 	mov	arg03, #1
1d4c0     48 D9 B0 FD | 	call	#__system___float_cmp
1d4c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d4c8     30 00 90 5D |  if_ne	jmp	#LR__2320
1d4cc     18 4E 05 F1 | 	add	fp, #24
1d4d0     A7 26 0A FB | 	rdlong	local01, fp wz
1d4d4     18 4E 85 F1 | 	sub	fp, #24
1d4d8     20 00 90 AD |  if_e	jmp	#LR__2320
1d4dc     18 4E 05 F1 | 	add	fp, #24
1d4e0     A7 26 02 FB | 	rdlong	local01, fp
1d4e4     18 4E 85 F1 | 	sub	fp, #24
1d4e8     A7 26 62 FC | 	wrlong	local01, fp
1d4ec     08 4E 05 F1 | 	add	fp, #8
1d4f0     A7 38 68 FC | 	wrlong	#28, fp
1d4f4     08 4E 85 F1 | 	sub	fp, #8
1d4f8     1C 00 90 FD | 	jmp	#LR__2321
1d4fc                 | LR__2320
1d4fc     1C 4E 05 F1 | 	add	fp, #28
1d500     A7 26 02 FB | 	rdlong	local01, fp
1d504     1C 4E 85 F1 | 	sub	fp, #28
1d508     A7 26 62 FC | 	wrlong	local01, fp
1d50c     08 4E 05 F1 | 	add	fp, #8
1d510     A7 3C 68 FC | 	wrlong	#30, fp
1d514     08 4E 85 F1 | 	sub	fp, #8
1d518                 | LR__2321
1d518                 | LR__2322
1d518     A7 12 02 F6 | 	mov	arg01, fp
1d51c     98 03 BF FD | 	call	#_push
1d520                 | LR__2323
1d520     A7 F0 03 F6 | 	mov	ptra, fp
1d524     B2 00 A0 FD | 	call	#popregs_
1d528                 | _do_val_ret
1d528     2D 00 64 FD | 	ret
1d52c                 | 
1d52c                 | ' 
1d52c                 | ' ' ------------------ waitclock
1d52c                 | ' 
1d52c                 | ' sub do_waitclock
1d52c                 | _do_waitclock
1d52c     52 00 00 FF 
1d530     CC E4 05 F1 | 	add	objptr, ##42188
1d534     F2 00 02 FB | 	rdlong	_var01, objptr
1d538                 | ' c=hkcnt
1d538                 | ' do: loop until hkcnt<>c
1d538                 | LR__2330
1d538     F2 02 02 FB | 	rdlong	_var02, objptr
1d53c     00 03 0A F2 | 	cmp	_var02, _var01 wz
1d540     F4 FF 9F AD |  if_e	jmp	#LR__2330
1d544     52 00 00 FF 
1d548     CC E4 85 F1 | 	sub	objptr, ##42188
1d54c                 | _do_waitclock_ret
1d54c     2D 00 64 FD | 	ret
1d550                 | 
1d550                 | ' 
1d550                 | ' ' ------------------ waitms
1d550                 | ' 
1d550                 | ' sub do_waitms
1d550                 | _do_waitms
1d550     01 4A 05 F6 | 	mov	COUNT_, #1
1d554     A8 00 A0 FD | 	call	#pushregs_
1d558     18 F0 07 F1 | 	add	ptra, #24
1d55c     C0 02 BF FD | 	call	#_pop
1d560     A7 FA 61 FC | 	wrlong	result1, fp
1d564     04 4E 05 F1 | 	add	fp, #4
1d568     A7 FC 61 FC | 	wrlong	result2, fp
1d56c     04 4E 05 F1 | 	add	fp, #4
1d570     A7 FE 61 FC | 	wrlong	result3, fp
1d574     08 4E 85 F1 | 	sub	fp, #8
1d578     A7 12 02 F6 | 	mov	arg01, fp
1d57c     84 04 BF FD | 	call	#_converttoint
1d580     0C 4E 05 F1 | 	add	fp, #12
1d584     A7 FA 61 FC | 	wrlong	result1, fp
1d588                 | ' 
1d588                 | ' t1=pop()  
1d588                 | ' t=converttoint(t1)
1d588                 | ' if t<0 then return
1d588     0C 4E 85 F1 | 	sub	fp, #12
1d58c     00 FA 55 F2 | 	cmps	result1, #0 wc
1d590     E4 00 90 CD |  if_b	jmp	#LR__2346
1d594                 | ' if t < 1000 then 
1d594     0C 4E 05 F1 | 	add	fp, #12
1d598     A7 12 02 FB | 	rdlong	arg01, fp
1d59c     0C 4E 85 F1 | 	sub	fp, #12
1d5a0     01 00 00 FF 
1d5a4     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1d5a8     14 00 90 3D |  if_ae	jmp	#LR__2340
1d5ac     0C 4E 05 F1 | 	add	fp, #12
1d5b0     A7 12 02 FB | 	rdlong	arg01, fp
1d5b4     0C 4E 85 F1 | 	sub	fp, #12
1d5b8     94 A8 B0 FD | 	call	#__system___waitms
1d5bc     B8 00 90 FD | 	jmp	#LR__2345
1d5c0                 | LR__2340
1d5c0     10 4E 05 F1 | 	add	fp, #16
1d5c4     A7 02 68 FC | 	wrlong	#1, fp
1d5c8     04 4E 85 F1 | 	sub	fp, #4
1d5cc     A7 12 02 FB | 	rdlong	arg01, fp
1d5d0     09 13 52 F6 | 	abs	arg01, arg01 wc
1d5d4     01 00 00 FF 
1d5d8     E8 13 16 FD | 	qdiv	arg01, ##1000
1d5dc                 | '   for i=1 to t/1000
1d5dc     0C 4E 85 F1 | 	sub	fp, #12
1d5e0     18 26 62 FD | 	getqx	local01
1d5e4     13 27 82 F6 | 	negc	local01, local01
1d5e8     01 26 06 F1 | 	add	local01, #1
1d5ec                 | LR__2341
1d5ec     10 4E 05 F1 | 	add	fp, #16
1d5f0     A7 12 02 FB | 	rdlong	arg01, fp
1d5f4     10 4E 85 F1 | 	sub	fp, #16
1d5f8     13 13 52 F2 | 	cmps	arg01, local01 wc
1d5fc     54 00 90 3D |  if_ae	jmp	#LR__2344
1d600     01 00 00 FF 
1d604     E8 13 06 F6 | 	mov	arg01, ##1000
1d608     44 A8 B0 FD | 	call	#__system___waitms
1d60c                 | '     waitms(1000)
1d60c                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1d60c     E0 12 06 F6 | 	mov	arg01, #224
1d610     34 9C B0 FD | 	call	#_usbnew_spin2_keystate
1d614     00 FA 0D F2 | 	cmp	result1, #0 wz
1d618     10 00 90 5D |  if_ne	jmp	#LR__2342
1d61c     E4 12 06 F6 | 	mov	arg01, #228
1d620     24 9C B0 FD | 	call	#_usbnew_spin2_keystate
1d624     00 FA 0D F2 | 	cmp	result1, #0 wz
1d628     10 00 90 AD |  if_e	jmp	#LR__2343
1d62c                 | LR__2342
1d62c     06 12 06 F6 | 	mov	arg01, #6
1d630     14 9C B0 FD | 	call	#_usbnew_spin2_keystate
1d634     00 FA 0D F2 | 	cmp	result1, #0 wz
1d638     3C 00 90 5D |  if_ne	jmp	#LR__2346
1d63c                 | LR__2343
1d63c     10 4E 05 F1 | 	add	fp, #16
1d640     A7 12 02 FB | 	rdlong	arg01, fp
1d644     01 12 06 F1 | 	add	arg01, #1
1d648     A7 12 62 FC | 	wrlong	arg01, fp
1d64c     10 4E 85 F1 | 	sub	fp, #16
1d650     98 FF 9F FD | 	jmp	#LR__2341
1d654                 | LR__2344
1d654     0C 4E 05 F1 | 	add	fp, #12
1d658     A7 26 02 FB | 	rdlong	local01, fp
1d65c     13 27 52 F6 | 	abs	local01, local01 wc
1d660     01 00 00 FF 
1d664     E8 27 16 FD | 	qdiv	local01, ##1000
1d668     0C 4E 85 F1 | 	sub	fp, #12
1d66c     19 26 62 FD | 	getqy	local01
1d670     13 13 82 F6 | 	negc	arg01, local01
1d674     D8 A7 B0 FD | 	call	#__system___waitms
1d678                 | LR__2345
1d678                 | LR__2346
1d678     A7 F0 03 F6 | 	mov	ptra, fp
1d67c     B2 00 A0 FD | 	call	#popregs_
1d680                 | _do_waitms_ret
1d680     2D 00 64 FD | 	ret
1d684                 | 
1d684                 | ' 
1d684                 | ' ' ------------------ waitvbl
1d684                 | ' 
1d684                 | ' sub do_waitvbl
1d684                 | _do_waitvbl
1d684     01 12 06 F6 | 	mov	arg01, #1
1d688     D4 87 B0 FD | 	call	#_hg010b_spin2_waitvbl
1d68c                 | _do_waitvbl_ret
1d68c     2D 00 64 FD | 	ret
1d690                 | 
1d690                 | ' 
1d690                 | ' ' ------------------ wrpin
1d690                 | ' 
1d690                 | ' sub do_wrpin
1d690                 | _do_wrpin
1d690     01 4A 05 F6 | 	mov	COUNT_, #1
1d694     A8 00 A0 FD | 	call	#pushregs_
1d698     18 F0 07 F1 | 	add	ptra, #24
1d69c     80 01 BF FD | 	call	#_pop
1d6a0     FD 14 02 F6 | 	mov	arg02, result1
1d6a4     FE 12 02 F6 | 	mov	arg01, result2
1d6a8     FF 26 02 F6 | 	mov	local01, result3
1d6ac     A7 14 62 FC | 	wrlong	arg02, fp
1d6b0     04 4E 05 F1 | 	add	fp, #4
1d6b4     A7 12 62 FC | 	wrlong	arg01, fp
1d6b8     04 4E 05 F1 | 	add	fp, #4
1d6bc     A7 26 62 FC | 	wrlong	local01, fp
1d6c0     08 4E 85 F1 | 	sub	fp, #8
1d6c4     58 01 BF FD | 	call	#_pop
1d6c8     FF 26 02 F6 | 	mov	local01, result3
1d6cc     0C 4E 05 F1 | 	add	fp, #12
1d6d0     A7 FA 61 FC | 	wrlong	result1, fp
1d6d4     04 4E 05 F1 | 	add	fp, #4
1d6d8     A7 FC 61 FC | 	wrlong	result2, fp
1d6dc     04 4E 05 F1 | 	add	fp, #4
1d6e0     A7 26 62 FC | 	wrlong	local01, fp
1d6e4     08 4E 85 F1 | 	sub	fp, #8
1d6e8     A7 12 02 F6 | 	mov	arg01, fp
1d6ec     0C 4E 85 F1 | 	sub	fp, #12
1d6f0     10 03 BF FD | 	call	#_converttoint
1d6f4     FD 26 02 F6 | 	mov	local01, result1
1d6f8     A7 12 02 F6 | 	mov	arg01, fp
1d6fc     04 03 BF FD | 	call	#_converttoint
1d700     13 FB 01 FC | 	wrpin	result1, local01
1d704     A7 F0 03 F6 | 	mov	ptra, fp
1d708     B2 00 A0 FD | 	call	#popregs_
1d70c                 | _do_wrpin_ret
1d70c     2D 00 64 FD | 	ret
1d710                 | 
1d710                 | ' 
1d710                 | ' ' ------------------ wxpin
1d710                 | ' 
1d710                 | ' sub do_wxpin
1d710                 | _do_wxpin
1d710     01 4A 05 F6 | 	mov	COUNT_, #1
1d714     A8 00 A0 FD | 	call	#pushregs_
1d718     18 F0 07 F1 | 	add	ptra, #24
1d71c     00 01 BF FD | 	call	#_pop
1d720     FD 14 02 F6 | 	mov	arg02, result1
1d724     FE 12 02 F6 | 	mov	arg01, result2
1d728     FF 26 02 F6 | 	mov	local01, result3
1d72c     A7 14 62 FC | 	wrlong	arg02, fp
1d730     04 4E 05 F1 | 	add	fp, #4
1d734     A7 12 62 FC | 	wrlong	arg01, fp
1d738     04 4E 05 F1 | 	add	fp, #4
1d73c     A7 26 62 FC | 	wrlong	local01, fp
1d740     08 4E 85 F1 | 	sub	fp, #8
1d744     D8 00 BF FD | 	call	#_pop
1d748     FF 26 02 F6 | 	mov	local01, result3
1d74c     0C 4E 05 F1 | 	add	fp, #12
1d750     A7 FA 61 FC | 	wrlong	result1, fp
1d754     04 4E 05 F1 | 	add	fp, #4
1d758     A7 FC 61 FC | 	wrlong	result2, fp
1d75c     04 4E 05 F1 | 	add	fp, #4
1d760     A7 26 62 FC | 	wrlong	local01, fp
1d764     08 4E 85 F1 | 	sub	fp, #8
1d768     A7 12 02 F6 | 	mov	arg01, fp
1d76c     0C 4E 85 F1 | 	sub	fp, #12
1d770     90 02 BF FD | 	call	#_converttoint
1d774     FD 26 02 F6 | 	mov	local01, result1
1d778     A7 12 02 F6 | 	mov	arg01, fp
1d77c     84 02 BF FD | 	call	#_converttoint
1d780     13 FB 11 FC | 	wxpin	result1, local01
1d784     A7 F0 03 F6 | 	mov	ptra, fp
1d788     B2 00 A0 FD | 	call	#popregs_
1d78c                 | _do_wxpin_ret
1d78c     2D 00 64 FD | 	ret
1d790                 | 
1d790                 | ' 
1d790                 | ' ' ------------------ wypin
1d790                 | ' 
1d790                 | ' sub do_wypin
1d790                 | _do_wypin
1d790     01 4A 05 F6 | 	mov	COUNT_, #1
1d794     A8 00 A0 FD | 	call	#pushregs_
1d798     18 F0 07 F1 | 	add	ptra, #24
1d79c     80 00 BF FD | 	call	#_pop
1d7a0     FD 14 02 F6 | 	mov	arg02, result1
1d7a4     FE 12 02 F6 | 	mov	arg01, result2
1d7a8     FF 26 02 F6 | 	mov	local01, result3
1d7ac     A7 14 62 FC | 	wrlong	arg02, fp
1d7b0     04 4E 05 F1 | 	add	fp, #4
1d7b4     A7 12 62 FC | 	wrlong	arg01, fp
1d7b8     04 4E 05 F1 | 	add	fp, #4
1d7bc     A7 26 62 FC | 	wrlong	local01, fp
1d7c0     08 4E 85 F1 | 	sub	fp, #8
1d7c4     58 00 BF FD | 	call	#_pop
1d7c8     FF 26 02 F6 | 	mov	local01, result3
1d7cc     0C 4E 05 F1 | 	add	fp, #12
1d7d0     A7 FA 61 FC | 	wrlong	result1, fp
1d7d4     04 4E 05 F1 | 	add	fp, #4
1d7d8     A7 FC 61 FC | 	wrlong	result2, fp
1d7dc     04 4E 05 F1 | 	add	fp, #4
1d7e0     A7 26 62 FC | 	wrlong	local01, fp
1d7e4     08 4E 85 F1 | 	sub	fp, #8
1d7e8     A7 12 02 F6 | 	mov	arg01, fp
1d7ec     0C 4E 85 F1 | 	sub	fp, #12
1d7f0     10 02 BF FD | 	call	#_converttoint
1d7f4     FD 26 02 F6 | 	mov	local01, result1
1d7f8     A7 12 02 F6 | 	mov	arg01, fp
1d7fc     04 02 BF FD | 	call	#_converttoint
1d800     13 FB 21 FC | 	wypin	result1, local01
1d804     A7 F0 03 F6 | 	mov	ptra, fp
1d808     B2 00 A0 FD | 	call	#popregs_
1d80c                 | _do_wypin_ret
1d80c     2D 00 64 FD | 	ret
1d810                 | 
1d810                 | ' 
1d810                 | ' 
1d810                 | ' 
1d810                 | ' 
1d810                 | ' 
1d810                 | ' 
1d810                 | ' 
1d810                 | ' 
1d810                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1d810                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1d810                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1d810                 | ' 
1d810                 | ' 
1d810                 | ' '------------------ Assign
1d810                 | ' 
1d810                 | ' sub do_assign
1d810                 | _do_assign
1d810     05 4A 05 F6 | 	mov	COUNT_, #5
1d814     A8 00 A0 FD | 	call	#pushregs_
1d818     44 F0 07 F1 | 	add	ptra, #68
1d81c     4A 00 00 FF 
1d820     80 E4 05 F1 | 	add	objptr, ##38016
1d824     F2 16 02 FB | 	rdlong	arg03, objptr
1d828     0B 15 02 F6 | 	mov	arg02, arg03
1d82c     01 14 66 F0 | 	shl	arg02, #1
1d830     0B 15 02 F1 | 	add	arg02, arg03
1d834     02 14 66 F0 | 	shl	arg02, #2
1d838     03 00 00 FF 
1d83c     04 E4 85 F1 | 	sub	objptr, ##1540
1d840     F2 14 02 F1 | 	add	arg02, objptr
1d844     0A 15 02 FB | 	rdlong	arg02, arg02
1d848     18 4E 05 F1 | 	add	fp, #24
1d84c     A7 14 62 FC | 	wrlong	arg02, fp
1d850                 | ' 
1d850                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1d850                 | ' if variables(varnum).vartype<array_no_type then 
1d850     18 4E 85 F1 | 	sub	fp, #24
1d854     04 14 66 F0 | 	shl	arg02, #4
1d858     32 00 00 FF 
1d85c     84 E4 85 F1 | 	sub	objptr, ##25732
1d860     F2 14 02 F1 | 	add	arg02, objptr
1d864     0C 14 06 F1 | 	add	arg02, #12
1d868     0A 17 02 FB | 	rdlong	arg03, arg02
1d86c     00 17 16 F2 | 	cmp	arg03, #256 wc
1d870     14 00 00 FF 
1d874     F8 E5 85 F1 | 	sub	objptr, ##10744
1d878     18 01 90 3D |  if_ae	jmp	#LR__2350
1d87c     A0 FF BE FD | 	call	#_pop
1d880     A7 FA 61 FC | 	wrlong	result1, fp
1d884     04 4E 05 F1 | 	add	fp, #4
1d888     A7 FC 61 FC | 	wrlong	result2, fp
1d88c     04 4E 05 F1 | 	add	fp, #4
1d890     A7 FE 61 FC | 	wrlong	result3, fp
1d894     08 4E 85 F1 | 	sub	fp, #8
1d898     A7 16 02 FB | 	rdlong	arg03, fp
1d89c     04 4E 05 F1 | 	add	fp, #4
1d8a0     A7 14 02 FB | 	rdlong	arg02, fp
1d8a4     14 4E 05 F1 | 	add	fp, #20
1d8a8     A7 12 02 FB | 	rdlong	arg01, fp
1d8ac     04 12 66 F0 | 	shl	arg01, #4
1d8b0     14 00 00 FF 
1d8b4     F8 E5 05 F1 | 	add	objptr, ##10744
1d8b8     F2 12 02 F1 | 	add	arg01, objptr
1d8bc     04 12 06 F1 | 	add	arg01, #4
1d8c0     09 17 62 FC | 	wrlong	arg03, arg01
1d8c4     A7 16 02 FB | 	rdlong	arg03, fp
1d8c8     04 16 66 F0 | 	shl	arg03, #4
1d8cc     F2 16 02 F1 | 	add	arg03, objptr
1d8d0     08 16 06 F1 | 	add	arg03, #8
1d8d4     0B 15 62 FC | 	wrlong	arg02, arg03
1d8d8     A7 16 02 FB | 	rdlong	arg03, fp
1d8dc     04 16 66 F0 | 	shl	arg03, #4
1d8e0     F2 16 02 F1 | 	add	arg03, objptr
1d8e4     10 4E 85 F1 | 	sub	fp, #16
1d8e8     A7 14 02 FB | 	rdlong	arg02, fp
1d8ec     0C 16 06 F1 | 	add	arg03, #12
1d8f0     0B 15 62 FC | 	wrlong	arg02, arg03
1d8f4                 | '   t1=pop() 
1d8f4                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1d8f4                 | '   if variables(varnum).vartype<>result_string2 then return
1d8f4     10 4E 05 F1 | 	add	fp, #16
1d8f8     A7 16 02 FB | 	rdlong	arg03, fp
1d8fc     18 4E 85 F1 | 	sub	fp, #24
1d900     04 16 66 F0 | 	shl	arg03, #4
1d904     F2 16 02 F1 | 	add	arg03, objptr
1d908     0C 16 06 F1 | 	add	arg03, #12
1d90c     0B 17 02 FB | 	rdlong	arg03, arg03
1d910     2B 16 0E F2 | 	cmp	arg03, #43 wz
1d914     14 00 00 FF 
1d918     F8 E5 85 F1 | 	sub	objptr, ##10744
1d91c     EC 04 90 5D |  if_ne	jmp	#LR__2373
1d920     18 4E 05 F1 | 	add	fp, #24
1d924     A7 16 02 FB | 	rdlong	arg03, fp
1d928     0B 27 02 F6 | 	mov	local01, arg03
1d92c     04 26 66 F0 | 	shl	local01, #4
1d930     14 00 00 FF 
1d934     F8 E5 05 F1 | 	add	objptr, ##10744
1d938     F2 26 02 F1 | 	add	local01, objptr
1d93c     18 4E 85 F1 | 	sub	fp, #24
1d940     04 16 66 F0 | 	shl	arg03, #4
1d944     F2 16 02 F1 | 	add	arg03, objptr
1d948     04 16 06 F1 | 	add	arg03, #4
1d94c     0B 13 02 FB | 	rdlong	arg01, arg03
1d950     14 00 00 FF 
1d954     F8 E5 85 F1 | 	sub	objptr, ##10744
1d958     3C 00 BF FD | 	call	#_convertstring
1d95c     04 26 06 F1 | 	add	local01, #4
1d960     13 FB 61 FC | 	wrlong	result1, local01
1d964     18 4E 05 F1 | 	add	fp, #24
1d968     A7 26 02 FB | 	rdlong	local01, fp
1d96c     18 4E 85 F1 | 	sub	fp, #24
1d970     04 26 66 F0 | 	shl	local01, #4
1d974     14 00 00 FF 
1d978     F8 E5 05 F1 | 	add	objptr, ##10744
1d97c     F2 26 02 F1 | 	add	local01, objptr
1d980     0C 26 06 F1 | 	add	local01, #12
1d984     13 3F 68 FC | 	wrlong	#31, local01
1d988                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1d988                 | '   variables(varnum).vartype=result_string
1d988                 | '   return
1d988     14 00 00 FF 
1d98c     F8 E5 85 F1 | 	sub	objptr, ##10744
1d990     78 04 90 FD | 	jmp	#LR__2373
1d994                 | LR__2350
1d994                 | ' for i=0 to 2 : arrid(i)=0 : next i
1d994     1C 4E 05 F1 | 	add	fp, #28
1d998     A7 00 68 FC | 	wrlong	#0, fp
1d99c     97 16 48 FB | 	callpa	#(@LR__2352-@LR__2351)>>2,fcache_load_ptr_
1d9a0                 | LR__2351
1d9a0     A7 26 02 FB | 	rdlong	local01, fp
1d9a4     02 26 66 F0 | 	shl	local01, #2
1d9a8     18 4E 05 F1 | 	add	fp, #24
1d9ac     A7 26 02 F1 | 	add	local01, fp
1d9b0     13 01 68 FC | 	wrlong	#0, local01
1d9b4     18 4E 85 F1 | 	sub	fp, #24
1d9b8     A7 26 02 FB | 	rdlong	local01, fp
1d9bc     01 26 06 F1 | 	add	local01, #1
1d9c0     A7 26 62 FC | 	wrlong	local01, fp
1d9c4     03 26 16 F2 | 	cmp	local01, #3 wc
1d9c8     D4 FF 9F CD |  if_b	jmp	#LR__2351
1d9cc                 | LR__2352
1d9cc     4A 00 00 FF 
1d9d0     80 E4 05 F1 | 	add	objptr, ##38016
1d9d4     F2 16 02 FB | 	rdlong	arg03, objptr
1d9d8     0B 27 02 F6 | 	mov	local01, arg03
1d9dc     01 26 66 F0 | 	shl	local01, #1
1d9e0     0B 27 02 F1 | 	add	local01, arg03
1d9e4     02 26 66 F0 | 	shl	local01, #2
1d9e8     03 00 00 FF 
1d9ec     04 E4 85 F1 | 	sub	objptr, ##1540
1d9f0     F2 26 02 F1 | 	add	local01, objptr
1d9f4     04 26 06 F1 | 	add	local01, #4
1d9f8     13 29 02 FB | 	rdlong	local02, local01
1d9fc     04 4E 05 F1 | 	add	fp, #4
1da00     A7 28 62 FC | 	wrlong	local02, fp
1da04     20 4E 85 F1 | 	sub	fp, #32
1da08     47 00 00 FF 
1da0c     7C E4 85 F1 | 	sub	objptr, ##36476
1da10     0C FE BE FD | 	call	#_pop
1da14     A7 FA 61 FC | 	wrlong	result1, fp
1da18     04 4E 05 F1 | 	add	fp, #4
1da1c     A7 FC 61 FC | 	wrlong	result2, fp
1da20     04 4E 05 F1 | 	add	fp, #4
1da24     A7 FE 61 FC | 	wrlong	result3, fp
1da28                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1da28                 | ' t1=pop() ' var value
1da28                 | ' if numpar>0 then
1da28     18 4E 05 F1 | 	add	fp, #24
1da2c     A7 2A 02 FB | 	rdlong	local03, fp
1da30     20 4E 85 F1 | 	sub	fp, #32
1da34     01 2A 16 F2 | 	cmp	local03, #1 wc
1da38     78 00 90 CD |  if_b	jmp	#LR__2355
1da3c                 | '   for i=numpar to 1 step -1
1da3c     20 4E 05 F1 | 	add	fp, #32
1da40     A7 2C 0A FB | 	rdlong	local04, fp wz
1da44     04 4E 85 F1 | 	sub	fp, #4
1da48     A7 2C 62 FC | 	wrlong	local04, fp
1da4c     1C 4E 85 F1 | 	sub	fp, #28
1da50     60 00 90 AD |  if_e	jmp	#LR__2354
1da54                 | LR__2353
1da54     C8 FD BE FD | 	call	#_pop
1da58     0C 4E 05 F1 | 	add	fp, #12
1da5c     A7 FA 61 FC | 	wrlong	result1, fp
1da60     04 4E 05 F1 | 	add	fp, #4
1da64     A7 FC 61 FC | 	wrlong	result2, fp
1da68     04 4E 05 F1 | 	add	fp, #4
1da6c     A7 FE 61 FC | 	wrlong	result3, fp
1da70     08 4E 05 F1 | 	add	fp, #8
1da74     A7 2A 02 FB | 	rdlong	local03, fp
1da78     01 2A 86 F1 | 	sub	local03, #1
1da7c     02 2A 66 F0 | 	shl	local03, #2
1da80     18 4E 05 F1 | 	add	fp, #24
1da84     A7 2A 02 F1 | 	add	local03, fp
1da88     28 4E 85 F1 | 	sub	fp, #40
1da8c     A7 12 02 F6 | 	mov	arg01, fp
1da90     0C 4E 85 F1 | 	sub	fp, #12
1da94     6C FF BE FD | 	call	#_converttoint
1da98     15 FB 61 FC | 	wrlong	result1, local03
1da9c     1C 4E 05 F1 | 	add	fp, #28
1daa0     A7 2C 02 FB | 	rdlong	local04, fp
1daa4     01 2C 8E F1 | 	sub	local04, #1 wz
1daa8     A7 2C 62 FC | 	wrlong	local04, fp
1daac     1C 4E 85 F1 | 	sub	fp, #28
1dab0     A0 FF 9F 5D |  if_ne	jmp	#LR__2353
1dab4                 | LR__2354
1dab4                 | LR__2355
1dab4     18 4E 05 F1 | 	add	fp, #24
1dab8     A7 26 02 FB | 	rdlong	local01, fp
1dabc     04 26 66 F0 | 	shl	local01, #4
1dac0     14 00 00 FF 
1dac4     F8 E5 05 F1 | 	add	objptr, ##10744
1dac8     F2 26 02 F1 | 	add	local01, objptr
1dacc     04 26 06 F1 | 	add	local01, #4
1dad0     13 13 02 FB | 	rdlong	arg01, local01
1dad4     0C 4E 05 F1 | 	add	fp, #12
1dad8     A7 12 62 FC | 	wrlong	arg01, fp
1dadc     24 4E 85 F1 | 	sub	fp, #36
1dae0     14 00 00 FF 
1dae4     F8 E5 85 F1 | 	sub	objptr, ##10744
1dae8     E0 68 B0 FD | 	call	#_pslpeek
1daec     FD 2C 32 F9 | 	getword	local04, result1, #0
1daf0     28 4E 05 F1 | 	add	fp, #40
1daf4     A7 2C 62 FC | 	wrlong	local04, fp
1daf8     04 4E 85 F1 | 	sub	fp, #4
1dafc     A7 12 02 FB | 	rdlong	arg01, fp
1db00     24 4E 85 F1 | 	sub	fp, #36
1db04     02 12 06 F1 | 	add	arg01, #2
1db08     68 68 B0 FD | 	call	#_pspeek
1db0c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1db10     2C 4E 05 F1 | 	add	fp, #44
1db14     A7 FA 61 FC | 	wrlong	result1, fp
1db18                 | ' esize=pspeek(arrptr+2)
1db18                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1db18     08 4E 85 F1 | 	sub	fp, #8
1db1c     A7 12 02 FB | 	rdlong	arg01, fp
1db20     24 4E 85 F1 | 	sub	fp, #36
1db24     04 12 06 F1 | 	add	arg01, #4
1db28     A0 68 B0 FD | 	call	#_pslpeek
1db2c     FD 2C 02 F6 | 	mov	local04, result1
1db30     34 4E 05 F1 | 	add	fp, #52
1db34     A7 26 02 FB | 	rdlong	local01, fp
1db38     34 4E 85 F1 | 	sub	fp, #52
1db3c     16 27 12 F2 | 	cmp	local01, local04 wc
1db40     54 00 90 3D |  if_ae	jmp	#LR__2356
1db44     24 4E 05 F1 | 	add	fp, #36
1db48     A7 12 02 FB | 	rdlong	arg01, fp
1db4c     24 4E 85 F1 | 	sub	fp, #36
1db50     08 12 06 F1 | 	add	arg01, #8
1db54     74 68 B0 FD | 	call	#_pslpeek
1db58     FD 26 02 F6 | 	mov	local01, result1
1db5c     38 4E 05 F1 | 	add	fp, #56
1db60     A7 2C 02 FB | 	rdlong	local04, fp
1db64     38 4E 85 F1 | 	sub	fp, #56
1db68     13 2D 12 F2 | 	cmp	local04, local01 wc
1db6c     28 00 90 3D |  if_ae	jmp	#LR__2356
1db70     24 4E 05 F1 | 	add	fp, #36
1db74     A7 12 02 FB | 	rdlong	arg01, fp
1db78     24 4E 85 F1 | 	sub	fp, #36
1db7c     0C 12 06 F1 | 	add	arg01, #12
1db80     48 68 B0 FD | 	call	#_pslpeek
1db84     3C 4E 05 F1 | 	add	fp, #60
1db88     A7 2C 02 FB | 	rdlong	local04, fp
1db8c     3C 4E 85 F1 | 	sub	fp, #60
1db90     FD 2C 12 F2 | 	cmp	local04, result1 wc
1db94     10 00 90 CD |  if_b	jmp	#LR__2357
1db98                 | LR__2356
1db98     31 12 06 F6 | 	mov	arg01, #49
1db9c     00 14 06 F6 | 	mov	arg02, #0
1dba0     58 65 B0 FD | 	call	#_printerror
1dba4     64 02 90 FD | 	jmp	#LR__2373
1dba8                 | LR__2357
1dba8     24 4E 05 F1 | 	add	fp, #36
1dbac     A7 12 02 FB | 	rdlong	arg01, fp
1dbb0     09 2D 02 F6 | 	mov	local04, arg01
1dbb4     10 2C 06 F1 | 	add	local04, #16
1dbb8     24 4E 85 F1 | 	sub	fp, #36
1dbbc     04 12 06 F1 | 	add	arg01, #4
1dbc0     08 68 B0 FD | 	call	#_pslpeek
1dbc4     FD 26 02 F6 | 	mov	local01, result1
1dbc8     38 4E 05 F1 | 	add	fp, #56
1dbcc     A7 28 02 FB | 	rdlong	local02, fp
1dbd0     14 27 02 FD | 	qmul	local01, local02
1dbd4     04 4E 85 F1 | 	sub	fp, #4
1dbd8     A7 2A 02 FB | 	rdlong	local03, fp
1dbdc     10 4E 85 F1 | 	sub	fp, #16
1dbe0     A7 12 02 FB | 	rdlong	arg01, fp
1dbe4     24 4E 85 F1 | 	sub	fp, #36
1dbe8     08 12 06 F1 | 	add	arg01, #8
1dbec     18 28 62 FD | 	getqx	local02
1dbf0     14 2B 02 F1 | 	add	local03, local02
1dbf4     D4 67 B0 FD | 	call	#_pslpeek
1dbf8     FD 28 02 F6 | 	mov	local02, result1
1dbfc     24 4E 05 F1 | 	add	fp, #36
1dc00     A7 12 02 FB | 	rdlong	arg01, fp
1dc04     24 4E 85 F1 | 	sub	fp, #36
1dc08     04 12 06 F1 | 	add	arg01, #4
1dc0c     BC 67 B0 FD | 	call	#_pslpeek
1dc10     FD 28 02 FD | 	qmul	local02, result1
1dc14     3C 4E 05 F1 | 	add	fp, #60
1dc18     A7 28 02 FB | 	rdlong	local02, fp
1dc1c     18 26 62 FD | 	getqx	local01
1dc20     14 27 02 FD | 	qmul	local01, local02
1dc24     10 4E 85 F1 | 	sub	fp, #16
1dc28     A7 28 02 FB | 	rdlong	local02, fp
1dc2c     18 26 62 FD | 	getqx	local01
1dc30     13 2B 02 F1 | 	add	local03, local01
1dc34     15 29 02 FD | 	qmul	local02, local03
1dc38     04 4E 05 F1 | 	add	fp, #4
1dc3c                 | ' 
1dc3c                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1dc3c                 | ' select case arrtype
1dc3c     18 2A 62 FD | 	getqx	local03
1dc40     15 2D 02 F1 | 	add	local04, local03
1dc44     A7 2C 62 FC | 	wrlong	local04, fp
1dc48     08 4E 85 F1 | 	sub	fp, #8
1dc4c     A7 2E 02 FB | 	rdlong	local05, fp
1dc50     28 4E 85 F1 | 	sub	fp, #40
1dc54     00 2F 86 F1 | 	sub	local05, #256
1dc58     0C 2E 26 F3 | 	fle	local05, #12
1dc5c     30 2E 62 FD | 	jmprel	local05
1dc60                 | LR__2358
1dc60     30 00 90 FD | 	jmp	#LR__2359
1dc64     58 00 90 FD | 	jmp	#LR__2360
1dc68     6C 00 90 FD | 	jmp	#LR__2361
1dc6c     80 00 90 FD | 	jmp	#LR__2362
1dc70     B0 00 90 FD | 	jmp	#LR__2363
1dc74     E0 00 90 FD | 	jmp	#LR__2364
1dc78     F4 00 90 FD | 	jmp	#LR__2365
1dc7c     08 01 90 FD | 	jmp	#LR__2366
1dc80     1C 01 90 FD | 	jmp	#LR__2367
1dc84     30 01 90 FD | 	jmp	#LR__2368
1dc88     44 01 90 FD | 	jmp	#LR__2369
1dc8c     58 01 90 FD | 	jmp	#LR__2370
1dc90     6C 01 90 FD | 	jmp	#LR__2371
1dc94                 | LR__2359
1dc94     A7 12 02 F6 | 	mov	arg01, fp
1dc98     30 4E 05 F1 | 	add	fp, #48
1dc9c     A7 14 02 FB | 	rdlong	arg02, fp
1dca0     30 4E 85 F1 | 	sub	fp, #48
1dca4     0C 16 06 F6 | 	mov	arg03, #12
1dca8     0B 00 00 FF 
1dcac     CC E4 05 F1 | 	add	objptr, ##5836
1dcb0     A0 92 B0 FD | 	call	#_psram_spin2_write
1dcb4     0B 00 00 FF 
1dcb8     CC E4 85 F1 | 	sub	objptr, ##5836
1dcbc     4C 01 90 FD | 	jmp	#LR__2372
1dcc0                 | LR__2360
1dcc0     30 4E 05 F1 | 	add	fp, #48
1dcc4     A7 12 02 FB | 	rdlong	arg01, fp
1dcc8     30 4E 85 F1 | 	sub	fp, #48
1dccc     A7 14 02 FB | 	rdlong	arg02, fp
1dcd0     58 66 B0 FD | 	call	#_pspoke
1dcd4     34 01 90 FD | 	jmp	#LR__2372
1dcd8                 | LR__2361
1dcd8     30 4E 05 F1 | 	add	fp, #48
1dcdc     A7 12 02 FB | 	rdlong	arg01, fp
1dce0     30 4E 85 F1 | 	sub	fp, #48
1dce4     A7 14 02 FB | 	rdlong	arg02, fp
1dce8     40 66 B0 FD | 	call	#_pspoke
1dcec     1C 01 90 FD | 	jmp	#LR__2372
1dcf0                 | LR__2362
1dcf0     30 4E 05 F1 | 	add	fp, #48
1dcf4     A7 12 02 FB | 	rdlong	arg01, fp
1dcf8     30 4E 85 F1 | 	sub	fp, #48
1dcfc     A7 14 02 FB | 	rdlong	arg02, fp
1dd00     28 66 B0 FD | 	call	#_pspoke
1dd04     30 4E 05 F1 | 	add	fp, #48
1dd08     A7 12 02 FB | 	rdlong	arg01, fp
1dd0c     30 4E 85 F1 | 	sub	fp, #48
1dd10     01 12 06 F1 | 	add	arg01, #1
1dd14     A7 14 02 FB | 	rdlong	arg02, fp
1dd18     08 14 46 F0 | 	shr	arg02, #8
1dd1c     0C 66 B0 FD | 	call	#_pspoke
1dd20     E8 00 90 FD | 	jmp	#LR__2372
1dd24                 | LR__2363
1dd24     30 4E 05 F1 | 	add	fp, #48
1dd28     A7 12 02 FB | 	rdlong	arg01, fp
1dd2c     30 4E 85 F1 | 	sub	fp, #48
1dd30     A7 14 02 FB | 	rdlong	arg02, fp
1dd34     F4 65 B0 FD | 	call	#_pspoke
1dd38     30 4E 05 F1 | 	add	fp, #48
1dd3c     A7 12 02 FB | 	rdlong	arg01, fp
1dd40     30 4E 85 F1 | 	sub	fp, #48
1dd44     01 12 06 F1 | 	add	arg01, #1
1dd48     A7 14 02 FB | 	rdlong	arg02, fp
1dd4c     08 14 46 F0 | 	shr	arg02, #8
1dd50     D8 65 B0 FD | 	call	#_pspoke
1dd54     B4 00 90 FD | 	jmp	#LR__2372
1dd58                 | LR__2364
1dd58     30 4E 05 F1 | 	add	fp, #48
1dd5c     A7 12 02 FB | 	rdlong	arg01, fp
1dd60     30 4E 85 F1 | 	sub	fp, #48
1dd64     A7 14 02 FB | 	rdlong	arg02, fp
1dd68     30 65 B0 FD | 	call	#_pslpoke
1dd6c     9C 00 90 FD | 	jmp	#LR__2372
1dd70                 | LR__2365
1dd70     30 4E 05 F1 | 	add	fp, #48
1dd74     A7 12 02 FB | 	rdlong	arg01, fp
1dd78     30 4E 85 F1 | 	sub	fp, #48
1dd7c     A7 14 02 FB | 	rdlong	arg02, fp
1dd80     18 65 B0 FD | 	call	#_pslpoke
1dd84     84 00 90 FD | 	jmp	#LR__2372
1dd88                 | LR__2366
1dd88     30 4E 05 F1 | 	add	fp, #48
1dd8c     A7 12 02 FB | 	rdlong	arg01, fp
1dd90     30 4E 85 F1 | 	sub	fp, #48
1dd94     A7 14 02 FB | 	rdlong	arg02, fp
1dd98     00 65 B0 FD | 	call	#_pslpoke
1dd9c     6C 00 90 FD | 	jmp	#LR__2372
1dda0                 | LR__2367
1dda0     30 4E 05 F1 | 	add	fp, #48
1dda4     A7 12 02 FB | 	rdlong	arg01, fp
1dda8     30 4E 85 F1 | 	sub	fp, #48
1ddac     A7 14 02 FB | 	rdlong	arg02, fp
1ddb0     E8 64 B0 FD | 	call	#_pslpoke
1ddb4     54 00 90 FD | 	jmp	#LR__2372
1ddb8                 | LR__2368
1ddb8     30 4E 05 F1 | 	add	fp, #48
1ddbc     A7 12 02 FB | 	rdlong	arg01, fp
1ddc0     30 4E 85 F1 | 	sub	fp, #48
1ddc4     A7 14 02 FB | 	rdlong	arg02, fp
1ddc8     D0 64 B0 FD | 	call	#_pslpoke
1ddcc     3C 00 90 FD | 	jmp	#LR__2372
1ddd0                 | LR__2369
1ddd0     30 4E 05 F1 | 	add	fp, #48
1ddd4     A7 12 02 FB | 	rdlong	arg01, fp
1ddd8     30 4E 85 F1 | 	sub	fp, #48
1dddc     A7 14 02 FB | 	rdlong	arg02, fp
1dde0     B8 64 B0 FD | 	call	#_pslpoke
1dde4     24 00 90 FD | 	jmp	#LR__2372
1dde8                 | LR__2370
1dde8     30 4E 05 F1 | 	add	fp, #48
1ddec     A7 12 02 FB | 	rdlong	arg01, fp
1ddf0     30 4E 85 F1 | 	sub	fp, #48
1ddf4     A7 14 02 FB | 	rdlong	arg02, fp
1ddf8     A0 64 B0 FD | 	call	#_pslpoke
1ddfc     0C 00 90 FD | 	jmp	#LR__2372
1de00                 | LR__2371
1de00     32 12 06 F6 | 	mov	arg01, #50
1de04     00 14 06 F6 | 	mov	arg02, #0
1de08     F0 62 B0 FD | 	call	#_printerror
1de0c                 | LR__2372
1de0c                 | LR__2373
1de0c     A7 F0 03 F6 | 	mov	ptra, fp
1de10     B2 00 A0 FD | 	call	#popregs_
1de14                 | _do_assign_ret
1de14     2D 00 64 FD | 	ret
1de18                 | 
1de18                 | ' 
1de18                 | ' 
1de18                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1de18                 | ' 
1de18                 | ' sub do_getvar
1de18                 | _do_getvar
1de18     04 4A 05 F6 | 	mov	COUNT_, #4
1de1c     A8 00 A0 FD | 	call	#pushregs_
1de20     3C F0 07 F1 | 	add	ptra, #60
1de24                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1de24     4A 00 00 FF 
1de28     80 E4 05 F1 | 	add	objptr, ##38016
1de2c     F2 26 02 FB | 	rdlong	local01, objptr
1de30     13 17 02 F6 | 	mov	arg03, local01
1de34     01 16 66 F0 | 	shl	arg03, #1
1de38     13 17 02 F1 | 	add	arg03, local01
1de3c     02 16 66 F0 | 	shl	arg03, #2
1de40     03 00 00 FF 
1de44     04 E4 85 F1 | 	sub	objptr, ##1540
1de48     F2 16 02 F1 | 	add	arg03, objptr
1de4c     04 16 06 F1 | 	add	arg03, #4
1de50     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1de54     47 00 00 FF 
1de58     7C E4 85 F1 | 	sub	objptr, ##36476
1de5c     C4 00 90 5D |  if_ne	jmp	#LR__2381
1de60     4A 00 00 FF 
1de64     80 E4 05 F1 | 	add	objptr, ##38016
1de68     F2 26 02 FB | 	rdlong	local01, objptr
1de6c     13 13 02 F6 | 	mov	arg01, local01
1de70     01 12 66 F0 | 	shl	arg01, #1
1de74     13 13 02 F1 | 	add	arg01, local01
1de78     02 12 66 F0 | 	shl	arg01, #2
1de7c     03 00 00 FF 
1de80     04 E4 85 F1 | 	sub	objptr, ##1540
1de84     F2 12 02 F1 | 	add	arg01, objptr
1de88     09 27 02 FB | 	rdlong	local01, arg01
1de8c     04 26 66 F0 | 	shl	local01, #4
1de90     32 00 00 FF 
1de94     84 E4 85 F1 | 	sub	objptr, ##25732
1de98     F2 26 02 F1 | 	add	local01, objptr
1de9c     04 26 06 F1 | 	add	local01, #4
1dea0     13 13 02 FB | 	rdlong	arg01, local01
1dea4     04 26 06 F1 | 	add	local01, #4
1dea8     13 27 02 FB | 	rdlong	local01, local01
1deac     A7 12 62 FC | 	wrlong	arg01, fp
1deb0     04 4E 05 F1 | 	add	fp, #4
1deb4     A7 26 62 FC | 	wrlong	local01, fp
1deb8     35 00 00 FF 
1debc     88 E4 05 F1 | 	add	objptr, ##27272
1dec0     F2 26 02 FB | 	rdlong	local01, objptr
1dec4     13 13 02 F6 | 	mov	arg01, local01
1dec8     01 12 66 F0 | 	shl	arg01, #1
1decc     13 13 02 F1 | 	add	arg01, local01
1ded0     02 12 66 F0 | 	shl	arg01, #2
1ded4     03 00 00 FF 
1ded8     04 E4 85 F1 | 	sub	objptr, ##1540
1dedc     F2 12 02 F1 | 	add	arg01, objptr
1dee0     09 27 02 FB | 	rdlong	local01, arg01
1dee4     04 26 66 F0 | 	shl	local01, #4
1dee8     32 00 00 FF 
1deec     84 E4 85 F1 | 	sub	objptr, ##25732
1def0     F2 26 02 F1 | 	add	local01, objptr
1def4     0C 26 06 F1 | 	add	local01, #12
1def8     13 27 02 FB | 	rdlong	local01, local01
1defc     04 4E 05 F1 | 	add	fp, #4
1df00     A7 26 62 FC | 	wrlong	local01, fp
1df04                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1df04                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1df04                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1df04     08 4E 85 F1 | 	sub	fp, #8
1df08     00 27 16 F2 | 	cmp	local01, #256 wc
1df0c     14 00 00 FF 
1df10     F8 E5 85 F1 | 	sub	objptr, ##10744
1df14     0C 00 90 3D |  if_ae	jmp	#LR__2380
1df18     A7 12 02 F6 | 	mov	arg01, fp
1df1c     98 F9 BE FD | 	call	#_push
1df20     A0 04 90 FD | 	jmp	#LR__2402
1df24                 | LR__2380
1df24                 | LR__2381
1df24     4A 00 00 FF 
1df28     80 E4 05 F1 | 	add	objptr, ##38016
1df2c     F2 16 02 FB | 	rdlong	arg03, objptr
1df30     0B 15 02 F6 | 	mov	arg02, arg03
1df34     01 14 66 F0 | 	shl	arg02, #1
1df38     0B 15 02 F1 | 	add	arg02, arg03
1df3c     02 14 66 F0 | 	shl	arg02, #2
1df40     03 00 00 FF 
1df44     04 E4 85 F1 | 	sub	objptr, ##1540
1df48     F2 14 02 F1 | 	add	arg02, objptr
1df4c     0A 17 02 FB | 	rdlong	arg03, arg02
1df50     04 16 66 F0 | 	shl	arg03, #4
1df54     32 00 00 FF 
1df58     84 E4 85 F1 | 	sub	objptr, ##25732
1df5c     F2 16 02 F1 | 	add	arg03, objptr
1df60     04 16 06 F1 | 	add	arg03, #4
1df64     0B 13 02 FB | 	rdlong	arg01, arg03
1df68     0C 4E 05 F1 | 	add	fp, #12
1df6c     A7 12 62 FC | 	wrlong	arg01, fp
1df70     0C 4E 85 F1 | 	sub	fp, #12
1df74     14 00 00 FF 
1df78     F8 E5 85 F1 | 	sub	objptr, ##10744
1df7c     4C 64 B0 FD | 	call	#_pslpeek
1df80     FD FA 31 F9 | 	getword	result1, result1, #0
1df84     10 4E 05 F1 | 	add	fp, #16
1df88     A7 FA 61 FC | 	wrlong	result1, fp
1df8c     4A 00 00 FF 
1df90     80 E4 05 F1 | 	add	objptr, ##38016
1df94     F2 16 02 FB | 	rdlong	arg03, objptr
1df98     0B 15 02 F6 | 	mov	arg02, arg03
1df9c     01 14 66 F0 | 	shl	arg02, #1
1dfa0     0B 15 02 F1 | 	add	arg02, arg03
1dfa4     02 14 66 F0 | 	shl	arg02, #2
1dfa8     03 00 00 FF 
1dfac     04 E4 85 F1 | 	sub	objptr, ##1540
1dfb0     F2 14 02 F1 | 	add	arg02, objptr
1dfb4     04 14 06 F1 | 	add	arg02, #4
1dfb8     0A 17 02 FB | 	rdlong	arg03, arg02
1dfbc     04 4E 05 F1 | 	add	fp, #4
1dfc0     A7 16 62 FC | 	wrlong	arg03, fp
1dfc4     08 4E 85 F1 | 	sub	fp, #8
1dfc8     A7 12 02 FB | 	rdlong	arg01, fp
1dfcc     0C 4E 85 F1 | 	sub	fp, #12
1dfd0     02 12 06 F1 | 	add	arg01, #2
1dfd4     47 00 00 FF 
1dfd8     7C E4 85 F1 | 	sub	objptr, ##36476
1dfdc     94 63 B0 FD | 	call	#_pspeek
1dfe0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1dfe4     18 4E 05 F1 | 	add	fp, #24
1dfe8     A7 FA 61 FC | 	wrlong	result1, fp
1dfec     0C 4E 85 F1 | 	sub	fp, #12
1dff0     A7 12 02 FB | 	rdlong	arg01, fp
1dff4     0C 4E 85 F1 | 	sub	fp, #12
1dff8     04 12 06 F1 | 	add	arg01, #4
1dffc     CC 63 B0 FD | 	call	#_pslpeek
1e000     1C 4E 05 F1 | 	add	fp, #28
1e004     A7 FA 61 FC | 	wrlong	result1, fp
1e008     10 4E 85 F1 | 	sub	fp, #16
1e00c     A7 12 02 FB | 	rdlong	arg01, fp
1e010     0C 4E 85 F1 | 	sub	fp, #12
1e014     08 12 06 F1 | 	add	arg01, #8
1e018     B0 63 B0 FD | 	call	#_pslpeek
1e01c     20 4E 05 F1 | 	add	fp, #32
1e020     A7 FA 61 FC | 	wrlong	result1, fp
1e024     14 4E 85 F1 | 	sub	fp, #20
1e028     A7 12 02 FB | 	rdlong	arg01, fp
1e02c     0C 4E 85 F1 | 	sub	fp, #12
1e030     0C 12 06 F1 | 	add	arg01, #12
1e034     94 63 B0 FD | 	call	#_pslpeek
1e038     24 4E 05 F1 | 	add	fp, #36
1e03c     A7 FA 61 FC | 	wrlong	result1, fp
1e040                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1e040                 | ' esize=pspeek(arrptr+2)
1e040                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1e040                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1e040                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1e040                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1e040     10 4E 85 F1 | 	sub	fp, #16
1e044     A7 16 02 FB | 	rdlong	arg03, fp
1e048     14 4E 85 F1 | 	sub	fp, #20
1e04c     03 16 16 F2 | 	cmp	arg03, #3 wc
1e050     38 00 90 CD |  if_b	jmp	#LR__2382
1e054     C8 F7 BE FD | 	call	#_pop
1e058     FF 16 02 F6 | 	mov	arg03, result3
1e05c     A7 FA 61 FC | 	wrlong	result1, fp
1e060     04 4E 05 F1 | 	add	fp, #4
1e064     A7 FC 61 FC | 	wrlong	result2, fp
1e068     04 4E 05 F1 | 	add	fp, #4
1e06c     A7 16 62 FC | 	wrlong	arg03, fp
1e070     08 4E 85 F1 | 	sub	fp, #8
1e074     A7 12 02 F6 | 	mov	arg01, fp
1e078     88 F9 BE FD | 	call	#_converttoint
1e07c     30 4E 05 F1 | 	add	fp, #48
1e080     A7 FA 61 FC | 	wrlong	result1, fp
1e084     30 4E 85 F1 | 	sub	fp, #48
1e088     0C 00 90 FD | 	jmp	#LR__2383
1e08c                 | LR__2382
1e08c     30 4E 05 F1 | 	add	fp, #48
1e090     A7 00 68 FC | 	wrlong	#0, fp
1e094     30 4E 85 F1 | 	sub	fp, #48
1e098                 | LR__2383
1e098                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1e098     14 4E 05 F1 | 	add	fp, #20
1e09c     A7 16 02 FB | 	rdlong	arg03, fp
1e0a0     14 4E 85 F1 | 	sub	fp, #20
1e0a4     02 16 16 F2 | 	cmp	arg03, #2 wc
1e0a8     38 00 90 CD |  if_b	jmp	#LR__2384
1e0ac     70 F7 BE FD | 	call	#_pop
1e0b0     FF 16 02 F6 | 	mov	arg03, result3
1e0b4     A7 FA 61 FC | 	wrlong	result1, fp
1e0b8     04 4E 05 F1 | 	add	fp, #4
1e0bc     A7 FC 61 FC | 	wrlong	result2, fp
1e0c0     04 4E 05 F1 | 	add	fp, #4
1e0c4     A7 16 62 FC | 	wrlong	arg03, fp
1e0c8     08 4E 85 F1 | 	sub	fp, #8
1e0cc     A7 12 02 F6 | 	mov	arg01, fp
1e0d0     30 F9 BE FD | 	call	#_converttoint
1e0d4     2C 4E 05 F1 | 	add	fp, #44
1e0d8     A7 FA 61 FC | 	wrlong	result1, fp
1e0dc     2C 4E 85 F1 | 	sub	fp, #44
1e0e0     0C 00 90 FD | 	jmp	#LR__2385
1e0e4                 | LR__2384
1e0e4     2C 4E 05 F1 | 	add	fp, #44
1e0e8     A7 00 68 FC | 	wrlong	#0, fp
1e0ec     2C 4E 85 F1 | 	sub	fp, #44
1e0f0                 | LR__2385
1e0f0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1e0f0     14 4E 05 F1 | 	add	fp, #20
1e0f4     A7 16 02 FB | 	rdlong	arg03, fp
1e0f8     14 4E 85 F1 | 	sub	fp, #20
1e0fc     01 16 16 F2 | 	cmp	arg03, #1 wc
1e100     38 00 90 CD |  if_b	jmp	#LR__2386
1e104     18 F7 BE FD | 	call	#_pop
1e108     FF 16 02 F6 | 	mov	arg03, result3
1e10c     A7 FA 61 FC | 	wrlong	result1, fp
1e110     04 4E 05 F1 | 	add	fp, #4
1e114     A7 FC 61 FC | 	wrlong	result2, fp
1e118     04 4E 05 F1 | 	add	fp, #4
1e11c     A7 16 62 FC | 	wrlong	arg03, fp
1e120     08 4E 85 F1 | 	sub	fp, #8
1e124     A7 12 02 F6 | 	mov	arg01, fp
1e128     D8 F8 BE FD | 	call	#_converttoint
1e12c     28 4E 05 F1 | 	add	fp, #40
1e130     A7 FA 61 FC | 	wrlong	result1, fp
1e134     28 4E 85 F1 | 	sub	fp, #40
1e138     0C 00 90 FD | 	jmp	#LR__2387
1e13c                 | LR__2386
1e13c     28 4E 05 F1 | 	add	fp, #40
1e140     A7 00 68 FC | 	wrlong	#0, fp
1e144     28 4E 85 F1 | 	sub	fp, #40
1e148                 | LR__2387
1e148     0C 4E 05 F1 | 	add	fp, #12
1e14c     A7 28 02 FB | 	rdlong	local02, fp
1e150     1C 4E 05 F1 | 	add	fp, #28
1e154     A7 2A 02 FB | 	rdlong	local03, fp
1e158     04 4E 05 F1 | 	add	fp, #4
1e15c     A7 FC 01 FB | 	rdlong	result2, fp
1e160     10 4E 85 F1 | 	sub	fp, #16
1e164     A7 FE 01 FB | 	rdlong	result3, fp
1e168     FF FC 01 FD | 	qmul	result2, result3
1e16c     10 28 06 F1 | 	add	local02, #16
1e170     14 4E 05 F1 | 	add	fp, #20
1e174     A7 FC 01 FB | 	rdlong	result2, fp
1e178     18 FA 61 FD | 	getqx	result1
1e17c     FF FC 01 FD | 	qmul	result2, result3
1e180     FD 2A 02 F1 | 	add	local03, result1
1e184     10 4E 85 F1 | 	sub	fp, #16
1e188     A7 FE 01 FB | 	rdlong	result3, fp
1e18c     18 FC 61 FD | 	getqx	result2
1e190     FF FC 01 FD | 	qmul	result2, result3
1e194     08 4E 85 F1 | 	sub	fp, #8
1e198     A7 FE 01 FB | 	rdlong	result3, fp
1e19c     18 FC 61 FD | 	getqx	result2
1e1a0     FE 2A 02 F1 | 	add	local03, result2
1e1a4     FF 2A 02 FD | 	qmul	local03, result3
1e1a8     1C 4E 05 F1 | 	add	fp, #28
1e1ac                 | ' 
1e1ac                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1e1ac                 | ' 
1e1ac                 | ' select case vartype
1e1ac     18 FC 61 FD | 	getqx	result2
1e1b0     FE 28 02 F1 | 	add	local02, result2
1e1b4     A7 28 62 FC | 	wrlong	local02, fp
1e1b8     24 4E 85 F1 | 	sub	fp, #36
1e1bc     A7 2C 02 FB | 	rdlong	local04, fp
1e1c0     10 4E 85 F1 | 	sub	fp, #16
1e1c4     00 2D 86 F1 | 	sub	local04, #256
1e1c8     0C 2C 26 F3 | 	fle	local04, #12
1e1cc     30 2C 62 FD | 	jmprel	local04
1e1d0                 | LR__2388
1e1d0     30 00 90 FD | 	jmp	#LR__2389
1e1d4     58 00 90 FD | 	jmp	#LR__2390
1e1d8     8C 00 90 FD | 	jmp	#LR__2391
1e1dc     AC 00 90 FD | 	jmp	#LR__2392
1e1e0     E8 00 90 FD | 	jmp	#LR__2393
1e1e4     08 01 90 FD | 	jmp	#LR__2394
1e1e8     24 01 90 FD | 	jmp	#LR__2395
1e1ec     40 01 90 FD | 	jmp	#LR__2396
1e1f0     50 01 90 FD | 	jmp	#LR__2397
1e1f4     60 01 90 FD | 	jmp	#LR__2398
1e1f8     7C 01 90 FD | 	jmp	#LR__2399
1e1fc     8C 01 90 FD | 	jmp	#LR__2400
1e200     B8 01 90 FD | 	jmp	#LR__2401
1e204                 | LR__2389
1e204     A7 12 02 F6 | 	mov	arg01, fp
1e208     34 4E 05 F1 | 	add	fp, #52
1e20c     A7 14 02 FB | 	rdlong	arg02, fp
1e210     34 4E 85 F1 | 	sub	fp, #52
1e214     0C 16 06 F6 | 	mov	arg03, #12
1e218     0B 00 00 FF 
1e21c     CC E4 05 F1 | 	add	objptr, ##5836
1e220     94 8C B0 FD | 	call	#_psram_spin2_read1
1e224     0B 00 00 FF 
1e228     CC E4 85 F1 | 	sub	objptr, ##5836
1e22c     8C 01 90 FD | 	jmp	#LR__2401
1e230                 | LR__2390
1e230     08 4E 05 F1 | 	add	fp, #8
1e234     A7 38 68 FC | 	wrlong	#28, fp
1e238     2C 4E 05 F1 | 	add	fp, #44
1e23c     A7 12 02 FB | 	rdlong	arg01, fp
1e240     34 4E 85 F1 | 	sub	fp, #52
1e244     2C 61 B0 FD | 	call	#_pspeek
1e248     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e24c     A7 FA 61 FC | 	wrlong	result1, fp
1e250     80 FA 15 F2 | 	cmp	result1, #128 wc
1e254     00 27 66 36 |  if_ae	neg	local01, #256
1e258     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1e25c     15 27 42 35 |  if_ae	or	local01, local03
1e260     A7 26 62 3C |  if_ae	wrlong	local01, fp
1e264     54 01 90 FD | 	jmp	#LR__2401
1e268                 | LR__2391
1e268     08 4E 05 F1 | 	add	fp, #8
1e26c     A7 3A 68 FC | 	wrlong	#29, fp
1e270     2C 4E 05 F1 | 	add	fp, #44
1e274     A7 12 02 FB | 	rdlong	arg01, fp
1e278     34 4E 85 F1 | 	sub	fp, #52
1e27c     F4 60 B0 FD | 	call	#_pspeek
1e280     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e284     A7 FA 61 FC | 	wrlong	result1, fp
1e288     30 01 90 FD | 	jmp	#LR__2401
1e28c                 | LR__2392
1e28c     08 4E 05 F1 | 	add	fp, #8
1e290     A7 38 68 FC | 	wrlong	#28, fp
1e294     2C 4E 05 F1 | 	add	fp, #44
1e298     A7 12 02 FB | 	rdlong	arg01, fp
1e29c     34 4E 85 F1 | 	sub	fp, #52
1e2a0     28 61 B0 FD | 	call	#_pslpeek
1e2a4     FD FA 31 F9 | 	getword	result1, result1, #0
1e2a8     A7 FA 61 FC | 	wrlong	result1, fp
1e2ac     40 00 00 FF 
1e2b0     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1e2b4     FF 7F 00 3F 
1e2b8     00 27 06 36 |  if_ae	mov	local01, ##16776960
1e2bc     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1e2c0     15 27 42 35 |  if_ae	or	local01, local03
1e2c4     A7 26 62 3C |  if_ae	wrlong	local01, fp
1e2c8     F0 00 90 FD | 	jmp	#LR__2401
1e2cc                 | LR__2393
1e2cc     08 4E 05 F1 | 	add	fp, #8
1e2d0     A7 3A 68 FC | 	wrlong	#29, fp
1e2d4     2C 4E 05 F1 | 	add	fp, #44
1e2d8     A7 12 02 FB | 	rdlong	arg01, fp
1e2dc     34 4E 85 F1 | 	sub	fp, #52
1e2e0     E8 60 B0 FD | 	call	#_pslpeek
1e2e4     FD FA 31 F9 | 	getword	result1, result1, #0
1e2e8     A7 FA 61 FC | 	wrlong	result1, fp
1e2ec     CC 00 90 FD | 	jmp	#LR__2401
1e2f0                 | LR__2394
1e2f0     08 4E 05 F1 | 	add	fp, #8
1e2f4     A7 38 68 FC | 	wrlong	#28, fp
1e2f8     2C 4E 05 F1 | 	add	fp, #44
1e2fc     A7 12 02 FB | 	rdlong	arg01, fp
1e300     34 4E 85 F1 | 	sub	fp, #52
1e304     C4 60 B0 FD | 	call	#_pslpeek
1e308     A7 FA 61 FC | 	wrlong	result1, fp
1e30c     AC 00 90 FD | 	jmp	#LR__2401
1e310                 | LR__2395
1e310     08 4E 05 F1 | 	add	fp, #8
1e314     A7 3A 68 FC | 	wrlong	#29, fp
1e318     2C 4E 05 F1 | 	add	fp, #44
1e31c     A7 12 02 FB | 	rdlong	arg01, fp
1e320     34 4E 85 F1 | 	sub	fp, #52
1e324     A4 60 B0 FD | 	call	#_pslpeek
1e328     A7 FA 61 FC | 	wrlong	result1, fp
1e32c     8C 00 90 FD | 	jmp	#LR__2401
1e330                 | LR__2396
1e330     08 4E 05 F1 | 	add	fp, #8
1e334     A7 FE 69 FC | 	wrlong	#255, fp
1e338     08 4E 85 F1 | 	sub	fp, #8
1e33c     A7 60 68 FC | 	wrlong	#48, fp
1e340     78 00 90 FD | 	jmp	#LR__2401
1e344                 | LR__2397
1e344     08 4E 05 F1 | 	add	fp, #8
1e348     A7 FE 69 FC | 	wrlong	#255, fp
1e34c     08 4E 85 F1 | 	sub	fp, #8
1e350     A7 60 68 FC | 	wrlong	#48, fp
1e354     64 00 90 FD | 	jmp	#LR__2401
1e358                 | LR__2398
1e358     08 4E 05 F1 | 	add	fp, #8
1e35c     A7 3C 68 FC | 	wrlong	#30, fp
1e360     2C 4E 05 F1 | 	add	fp, #44
1e364     A7 12 02 FB | 	rdlong	arg01, fp
1e368     34 4E 85 F1 | 	sub	fp, #52
1e36c     5C 60 B0 FD | 	call	#_pslpeek
1e370     A7 FA 61 FC | 	wrlong	result1, fp
1e374     44 00 90 FD | 	jmp	#LR__2401
1e378                 | LR__2399
1e378     08 4E 05 F1 | 	add	fp, #8
1e37c     A7 FE 69 FC | 	wrlong	#255, fp
1e380     08 4E 85 F1 | 	sub	fp, #8
1e384     A7 60 68 FC | 	wrlong	#48, fp
1e388     30 00 90 FD | 	jmp	#LR__2401
1e38c                 | LR__2400
1e38c     08 4E 05 F1 | 	add	fp, #8
1e390     A7 3E 68 FC | 	wrlong	#31, fp
1e394     2C 4E 05 F1 | 	add	fp, #44
1e398     A7 12 02 FB | 	rdlong	arg01, fp
1e39c     34 4E 85 F1 | 	sub	fp, #52
1e3a0     28 60 B0 FD | 	call	#_pslpeek
1e3a4     A7 FA 61 FC | 	wrlong	result1, fp
1e3a8     00 04 00 FF 
1e3ac     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1e3b0     08 4E 05 31 |  if_ae	add	fp, #8
1e3b4     A7 56 68 3C |  if_ae	wrlong	#43, fp
1e3b8     08 4E 85 31 |  if_ae	sub	fp, #8
1e3bc                 | LR__2401
1e3bc     A7 12 02 F6 | 	mov	arg01, fp
1e3c0     F4 F4 BE FD | 	call	#_push
1e3c4                 | LR__2402
1e3c4     A7 F0 03 F6 | 	mov	ptra, fp
1e3c8     B2 00 A0 FD | 	call	#popregs_
1e3cc                 | _do_getvar_ret
1e3cc     2D 00 64 FD | 	ret
1e3d0                 | 
1e3d0                 | ' 
1e3d0                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1e3d0                 | ' 
1e3d0                 | ' sub do_getaddr
1e3d0                 | _do_getaddr
1e3d0     01 4A 05 F6 | 	mov	COUNT_, #1
1e3d4     A8 00 A0 FD | 	call	#pushregs_
1e3d8     38 F0 07 F1 | 	add	ptra, #56
1e3dc                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1e3dc                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1e3dc     4A 00 00 FF 
1e3e0     80 E4 05 F1 | 	add	objptr, ##38016
1e3e4     F2 12 02 FB | 	rdlong	arg01, objptr
1e3e8     09 FD 01 F6 | 	mov	result2, arg01
1e3ec     01 FC 65 F0 | 	shl	result2, #1
1e3f0     09 FD 01 F1 | 	add	result2, arg01
1e3f4     02 FC 65 F0 | 	shl	result2, #2
1e3f8     03 00 00 FF 
1e3fc     04 E4 85 F1 | 	sub	objptr, ##1540
1e400     F2 FC 01 F1 | 	add	result2, objptr
1e404     04 FC 05 F1 | 	add	result2, #4
1e408     FE FC 09 FB | 	rdlong	result2, result2 wz
1e40c     47 00 00 FF 
1e410     7C E4 85 F1 | 	sub	objptr, ##36476
1e414     10 01 90 5D |  if_ne	jmp	#LR__2410
1e418     4A 00 00 FF 
1e41c     80 E4 05 F1 | 	add	objptr, ##38016
1e420     F2 12 02 FB | 	rdlong	arg01, objptr
1e424     09 FD 01 F6 | 	mov	result2, arg01
1e428     01 FC 65 F0 | 	shl	result2, #1
1e42c     09 FD 01 F1 | 	add	result2, arg01
1e430     02 FC 65 F0 | 	shl	result2, #2
1e434     03 00 00 FF 
1e438     04 E4 85 F1 | 	sub	objptr, ##1540
1e43c     F2 FC 01 F1 | 	add	result2, objptr
1e440     FE 12 02 FB | 	rdlong	arg01, result2
1e444     04 12 66 F0 | 	shl	arg01, #4
1e448     32 00 00 FF 
1e44c     84 E4 85 F1 | 	sub	objptr, ##25732
1e450     F2 12 02 F1 | 	add	arg01, objptr
1e454     0C 12 06 F1 | 	add	arg01, #12
1e458     09 13 02 FB | 	rdlong	arg01, arg01
1e45c     08 4E 05 F1 | 	add	fp, #8
1e460     A7 12 62 FC | 	wrlong	arg01, fp
1e464                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1e464                 | '    if t1.result_type>=array_no_type then goto 2200
1e464     08 4E 85 F1 | 	sub	fp, #8
1e468     00 13 16 F2 | 	cmp	arg01, #256 wc
1e46c     14 00 00 FF 
1e470     F8 E5 85 F1 | 	sub	objptr, ##10744
1e474     B0 00 90 3D |  if_ae	jmp	#LR__2411
1e478     4A 00 00 FF 
1e47c     80 E4 05 F1 | 	add	objptr, ##38016
1e480     F2 12 02 FB | 	rdlong	arg01, objptr
1e484     09 FF 01 F6 | 	mov	result3, arg01
1e488     01 FE 65 F0 | 	shl	result3, #1
1e48c     09 FF 01 F1 | 	add	result3, arg01
1e490     02 FE 65 F0 | 	shl	result3, #2
1e494     03 00 00 FF 
1e498     04 E4 85 F1 | 	sub	objptr, ##1540
1e49c     F2 FE 01 F1 | 	add	result3, objptr
1e4a0     FF FA 01 FB | 	rdlong	result1, result3
1e4a4     04 FA 65 F0 | 	shl	result1, #4
1e4a8     32 00 00 FF 
1e4ac     84 E4 85 F1 | 	sub	objptr, ##25732
1e4b0     F2 FA 01 F1 | 	add	result1, objptr
1e4b4     04 FA 05 F1 | 	add	result1, #4
1e4b8     A7 FA 61 FC | 	wrlong	result1, fp
1e4bc     35 00 00 FF 
1e4c0     88 E4 05 F1 | 	add	objptr, ##27272
1e4c4     F2 FE 01 FB | 	rdlong	result3, objptr
1e4c8     FF 12 02 F6 | 	mov	arg01, result3
1e4cc     01 12 66 F0 | 	shl	arg01, #1
1e4d0     FF 12 02 F1 | 	add	arg01, result3
1e4d4     02 12 66 F0 | 	shl	arg01, #2
1e4d8     03 00 00 FF 
1e4dc     04 E4 85 F1 | 	sub	objptr, ##1540
1e4e0     F2 12 02 F1 | 	add	arg01, objptr
1e4e4     09 13 02 FB | 	rdlong	arg01, arg01
1e4e8     04 12 66 F0 | 	shl	arg01, #4
1e4ec     32 00 00 FF 
1e4f0     84 E4 85 F1 | 	sub	objptr, ##25732
1e4f4     F2 12 02 F1 | 	add	arg01, objptr
1e4f8     0C 12 06 F1 | 	add	arg01, #12
1e4fc     09 13 02 FB | 	rdlong	arg01, arg01
1e500     04 4E 05 F1 | 	add	fp, #4
1e504     A7 12 62 FC | 	wrlong	arg01, fp
1e508     04 4E 05 F1 | 	add	fp, #4
1e50c     A7 3A 68 FC | 	wrlong	#29, fp
1e510     08 4E 85 F1 | 	sub	fp, #8
1e514     A7 12 02 F6 | 	mov	arg01, fp
1e518     14 00 00 FF 
1e51c     F8 E5 85 F1 | 	sub	objptr, ##10744
1e520     94 F3 BE FD | 	call	#_push
1e524                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1e524                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1e524                 | '   t1.result_type=result_uint
1e524                 | '   push t1 : return
1e524     2C 03 90 FD | 	jmp	#LR__2420
1e528                 | LR__2410
1e528                 | LR__2411
1e528     4A 00 00 FF 
1e52c     80 E4 05 F1 | 	add	objptr, ##38016
1e530     F2 FE 01 FB | 	rdlong	result3, objptr
1e534     FF FC 01 F6 | 	mov	result2, result3
1e538     01 FC 65 F0 | 	shl	result2, #1
1e53c     FF FC 01 F1 | 	add	result2, result3
1e540     02 FC 65 F0 | 	shl	result2, #2
1e544     03 00 00 FF 
1e548     04 E4 85 F1 | 	sub	objptr, ##1540
1e54c     F2 FC 01 F1 | 	add	result2, objptr
1e550     FE FE 01 FB | 	rdlong	result3, result2
1e554     04 FE 65 F0 | 	shl	result3, #4
1e558     32 00 00 FF 
1e55c     84 E4 85 F1 | 	sub	objptr, ##25732
1e560     F2 FE 01 F1 | 	add	result3, objptr
1e564     04 FE 05 F1 | 	add	result3, #4
1e568     FF FE 01 FB | 	rdlong	result3, result3
1e56c     0C 4E 05 F1 | 	add	fp, #12
1e570     A7 FE 61 FC | 	wrlong	result3, fp
1e574     35 00 00 FF 
1e578     88 E4 05 F1 | 	add	objptr, ##27272
1e57c     F2 FE 01 FB | 	rdlong	result3, objptr
1e580     FF 12 02 F6 | 	mov	arg01, result3
1e584     01 12 66 F0 | 	shl	arg01, #1
1e588     FF 12 02 F1 | 	add	arg01, result3
1e58c     02 12 66 F0 | 	shl	arg01, #2
1e590     03 00 00 FF 
1e594     04 E4 85 F1 | 	sub	objptr, ##1540
1e598     F2 12 02 F1 | 	add	arg01, objptr
1e59c     09 13 02 FB | 	rdlong	arg01, arg01
1e5a0     04 12 66 F0 | 	shl	arg01, #4
1e5a4     32 00 00 FF 
1e5a8     84 E4 85 F1 | 	sub	objptr, ##25732
1e5ac     F2 12 02 F1 | 	add	arg01, objptr
1e5b0     0C 12 06 F1 | 	add	arg01, #12
1e5b4     09 13 02 FB | 	rdlong	arg01, arg01
1e5b8     08 4E 85 F1 | 	sub	fp, #8
1e5bc     A7 12 62 FC | 	wrlong	arg01, fp
1e5c0     08 4E 05 F1 | 	add	fp, #8
1e5c4     A7 12 02 FB | 	rdlong	arg01, fp
1e5c8     0C 4E 85 F1 | 	sub	fp, #12
1e5cc     14 00 00 FF 
1e5d0     F8 E5 85 F1 | 	sub	objptr, ##10744
1e5d4     F4 5D B0 FD | 	call	#_pslpeek
1e5d8     FD FA 31 F9 | 	getword	result1, result1, #0
1e5dc     10 4E 05 F1 | 	add	fp, #16
1e5e0     A7 FA 61 FC | 	wrlong	result1, fp
1e5e4     4A 00 00 FF 
1e5e8     80 E4 05 F1 | 	add	objptr, ##38016
1e5ec     F2 FE 01 FB | 	rdlong	result3, objptr
1e5f0     FF 12 02 F6 | 	mov	arg01, result3
1e5f4     01 12 66 F0 | 	shl	arg01, #1
1e5f8     FF 12 02 F1 | 	add	arg01, result3
1e5fc     02 12 66 F0 | 	shl	arg01, #2
1e600     03 00 00 FF 
1e604     04 E4 85 F1 | 	sub	objptr, ##1540
1e608     F2 12 02 F1 | 	add	arg01, objptr
1e60c     04 12 06 F1 | 	add	arg01, #4
1e610     09 13 02 FB | 	rdlong	arg01, arg01
1e614     04 4E 05 F1 | 	add	fp, #4
1e618     A7 12 62 FC | 	wrlong	arg01, fp
1e61c     08 4E 85 F1 | 	sub	fp, #8
1e620     A7 12 02 FB | 	rdlong	arg01, fp
1e624     0C 4E 85 F1 | 	sub	fp, #12
1e628     02 12 06 F1 | 	add	arg01, #2
1e62c     47 00 00 FF 
1e630     7C E4 85 F1 | 	sub	objptr, ##36476
1e634     3C 5D B0 FD | 	call	#_pspeek
1e638     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e63c     18 4E 05 F1 | 	add	fp, #24
1e640     A7 FA 61 FC | 	wrlong	result1, fp
1e644     0C 4E 85 F1 | 	sub	fp, #12
1e648     A7 12 02 FB | 	rdlong	arg01, fp
1e64c     0C 4E 85 F1 | 	sub	fp, #12
1e650     04 12 06 F1 | 	add	arg01, #4
1e654     74 5D B0 FD | 	call	#_pslpeek
1e658     1C 4E 05 F1 | 	add	fp, #28
1e65c     A7 FA 61 FC | 	wrlong	result1, fp
1e660     10 4E 85 F1 | 	sub	fp, #16
1e664     A7 12 02 FB | 	rdlong	arg01, fp
1e668     0C 4E 85 F1 | 	sub	fp, #12
1e66c     08 12 06 F1 | 	add	arg01, #8
1e670     58 5D B0 FD | 	call	#_pslpeek
1e674     20 4E 05 F1 | 	add	fp, #32
1e678     A7 FA 61 FC | 	wrlong	result1, fp
1e67c     14 4E 85 F1 | 	sub	fp, #20
1e680     A7 12 02 FB | 	rdlong	arg01, fp
1e684     0C 4E 85 F1 | 	sub	fp, #12
1e688     0C 12 06 F1 | 	add	arg01, #12
1e68c     3C 5D B0 FD | 	call	#_pslpeek
1e690     24 4E 05 F1 | 	add	fp, #36
1e694     A7 FA 61 FC | 	wrlong	result1, fp
1e698                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1e698                 | ' esize=pspeek(arrptr+2)
1e698                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1e698                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1e698                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1e698                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1e698     10 4E 85 F1 | 	sub	fp, #16
1e69c     A7 12 02 FB | 	rdlong	arg01, fp
1e6a0     14 4E 85 F1 | 	sub	fp, #20
1e6a4     03 12 16 F2 | 	cmp	arg01, #3 wc
1e6a8     34 00 90 CD |  if_b	jmp	#LR__2412
1e6ac     70 F1 BE FD | 	call	#_pop
1e6b0     A7 FA 61 FC | 	wrlong	result1, fp
1e6b4     04 4E 05 F1 | 	add	fp, #4
1e6b8     A7 FC 61 FC | 	wrlong	result2, fp
1e6bc     04 4E 05 F1 | 	add	fp, #4
1e6c0     A7 FE 61 FC | 	wrlong	result3, fp
1e6c4     08 4E 85 F1 | 	sub	fp, #8
1e6c8     A7 12 02 F6 | 	mov	arg01, fp
1e6cc     34 F3 BE FD | 	call	#_converttoint
1e6d0     30 4E 05 F1 | 	add	fp, #48
1e6d4     A7 FA 61 FC | 	wrlong	result1, fp
1e6d8     30 4E 85 F1 | 	sub	fp, #48
1e6dc     0C 00 90 FD | 	jmp	#LR__2413
1e6e0                 | LR__2412
1e6e0     30 4E 05 F1 | 	add	fp, #48
1e6e4     A7 00 68 FC | 	wrlong	#0, fp
1e6e8     30 4E 85 F1 | 	sub	fp, #48
1e6ec                 | LR__2413
1e6ec                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1e6ec     14 4E 05 F1 | 	add	fp, #20
1e6f0     A7 12 02 FB | 	rdlong	arg01, fp
1e6f4     14 4E 85 F1 | 	sub	fp, #20
1e6f8     02 12 16 F2 | 	cmp	arg01, #2 wc
1e6fc     34 00 90 CD |  if_b	jmp	#LR__2414
1e700     1C F1 BE FD | 	call	#_pop
1e704     A7 FA 61 FC | 	wrlong	result1, fp
1e708     04 4E 05 F1 | 	add	fp, #4
1e70c     A7 FC 61 FC | 	wrlong	result2, fp
1e710     04 4E 05 F1 | 	add	fp, #4
1e714     A7 FE 61 FC | 	wrlong	result3, fp
1e718     08 4E 85 F1 | 	sub	fp, #8
1e71c     A7 12 02 F6 | 	mov	arg01, fp
1e720     E0 F2 BE FD | 	call	#_converttoint
1e724     2C 4E 05 F1 | 	add	fp, #44
1e728     A7 FA 61 FC | 	wrlong	result1, fp
1e72c     2C 4E 85 F1 | 	sub	fp, #44
1e730     0C 00 90 FD | 	jmp	#LR__2415
1e734                 | LR__2414
1e734     2C 4E 05 F1 | 	add	fp, #44
1e738     A7 00 68 FC | 	wrlong	#0, fp
1e73c     2C 4E 85 F1 | 	sub	fp, #44
1e740                 | LR__2415
1e740                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1e740     14 4E 05 F1 | 	add	fp, #20
1e744     A7 12 02 FB | 	rdlong	arg01, fp
1e748     14 4E 85 F1 | 	sub	fp, #20
1e74c     01 12 16 F2 | 	cmp	arg01, #1 wc
1e750     34 00 90 CD |  if_b	jmp	#LR__2416
1e754     C8 F0 BE FD | 	call	#_pop
1e758     A7 FA 61 FC | 	wrlong	result1, fp
1e75c     04 4E 05 F1 | 	add	fp, #4
1e760     A7 FC 61 FC | 	wrlong	result2, fp
1e764     04 4E 05 F1 | 	add	fp, #4
1e768     A7 FE 61 FC | 	wrlong	result3, fp
1e76c     08 4E 85 F1 | 	sub	fp, #8
1e770     A7 12 02 F6 | 	mov	arg01, fp
1e774     8C F2 BE FD | 	call	#_converttoint
1e778     28 4E 05 F1 | 	add	fp, #40
1e77c     A7 FA 61 FC | 	wrlong	result1, fp
1e780     28 4E 85 F1 | 	sub	fp, #40
1e784     0C 00 90 FD | 	jmp	#LR__2417
1e788                 | LR__2416
1e788     28 4E 05 F1 | 	add	fp, #40
1e78c     A7 00 68 FC | 	wrlong	#0, fp
1e790     28 4E 85 F1 | 	sub	fp, #40
1e794                 | LR__2417
1e794                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1e794                 | ' if numpar>0 then
1e794     14 4E 05 F1 | 	add	fp, #20
1e798     A7 FE 01 FB | 	rdlong	result3, fp
1e79c     14 4E 85 F1 | 	sub	fp, #20
1e7a0     01 FE 15 F2 | 	cmp	result3, #1 wc
1e7a4     8C 00 90 CD |  if_b	jmp	#LR__2418
1e7a8     0C 4E 05 F1 | 	add	fp, #12
1e7ac     A7 FC 01 FB | 	rdlong	result2, fp
1e7b0     1C 4E 05 F1 | 	add	fp, #28
1e7b4     A7 FE 01 FB | 	rdlong	result3, fp
1e7b8     04 4E 05 F1 | 	add	fp, #4
1e7bc     A7 12 02 FB | 	rdlong	arg01, fp
1e7c0     10 4E 85 F1 | 	sub	fp, #16
1e7c4     A7 FA 01 FB | 	rdlong	result1, fp
1e7c8     FD 12 02 FD | 	qmul	arg01, result1
1e7cc     10 FC 05 F1 | 	add	result2, #16
1e7d0     14 4E 05 F1 | 	add	fp, #20
1e7d4     A7 26 02 FB | 	rdlong	local01, fp
1e7d8     18 12 62 FD | 	getqx	arg01
1e7dc     FD 26 02 FD | 	qmul	local01, result1
1e7e0     09 FF 01 F1 | 	add	result3, arg01
1e7e4     10 4E 85 F1 | 	sub	fp, #16
1e7e8     A7 26 02 FB | 	rdlong	local01, fp
1e7ec     18 FA 61 FD | 	getqx	result1
1e7f0     13 FB 01 FD | 	qmul	result1, local01
1e7f4     08 4E 85 F1 | 	sub	fp, #8
1e7f8     A7 26 02 FB | 	rdlong	local01, fp
1e7fc     18 FA 61 FD | 	getqx	result1
1e800     FD FE 01 F1 | 	add	result3, result1
1e804     13 FF 01 FD | 	qmul	result3, local01
1e808     1C 4E 05 F1 | 	add	fp, #28
1e80c     18 26 62 FD | 	getqx	local01
1e810     13 FD 01 F1 | 	add	result2, local01
1e814     A7 FC 61 FC | 	wrlong	result2, fp
1e818     2C 4E 85 F1 | 	sub	fp, #44
1e81c     A7 3A 68 FC | 	wrlong	#29, fp
1e820     2C 4E 05 F1 | 	add	fp, #44
1e824     A7 26 02 FB | 	rdlong	local01, fp
1e828     34 4E 85 F1 | 	sub	fp, #52
1e82c     A7 26 62 FC | 	wrlong	local01, fp
1e830     18 00 90 FD | 	jmp	#LR__2419
1e834                 | LR__2418
1e834     08 4E 05 F1 | 	add	fp, #8
1e838     A7 3A 68 FC | 	wrlong	#29, fp
1e83c     04 4E 05 F1 | 	add	fp, #4
1e840     A7 26 02 FB | 	rdlong	local01, fp
1e844     0C 4E 85 F1 | 	sub	fp, #12
1e848     A7 26 62 FC | 	wrlong	local01, fp
1e84c                 | LR__2419
1e84c     A7 12 02 F6 | 	mov	arg01, fp
1e850     64 F0 BE FD | 	call	#_push
1e854                 | LR__2420
1e854     A7 F0 03 F6 | 	mov	ptra, fp
1e858     B2 00 A0 FD | 	call	#popregs_
1e85c                 | _do_getaddr_ret
1e85c     2D 00 64 FD | 	ret
1e860                 | 
1e860                 | ' 
1e860                 | ' 
1e860                 | ' 
1e860                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1e860                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1e860                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1e860                 | ' 
1e860                 | ' '--------------------------------- AND 
1e860                 | ' 
1e860                 | ' sub do_and 
1e860                 | _do_and
1e860     03 4A 05 F6 | 	mov	COUNT_, #3
1e864     A8 00 A0 FD | 	call	#pushregs_
1e868     18 F0 07 F1 | 	add	ptra, #24
1e86c     B0 EF BE FD | 	call	#_pop
1e870     FD 12 02 F6 | 	mov	arg01, result1
1e874     FE 26 02 F6 | 	mov	local01, result2
1e878     FF 28 02 F6 | 	mov	local02, result3
1e87c     0C 4E 05 F1 | 	add	fp, #12
1e880     A7 12 62 FC | 	wrlong	arg01, fp
1e884     04 4E 05 F1 | 	add	fp, #4
1e888     A7 26 62 FC | 	wrlong	local01, fp
1e88c     04 4E 05 F1 | 	add	fp, #4
1e890     A7 28 62 FC | 	wrlong	local02, fp
1e894     14 4E 85 F1 | 	sub	fp, #20
1e898     84 EF BE FD | 	call	#_pop
1e89c     FF 2A 02 F6 | 	mov	local03, result3
1e8a0     A7 FA 61 FC | 	wrlong	result1, fp
1e8a4     04 4E 05 F1 | 	add	fp, #4
1e8a8     A7 FC 61 FC | 	wrlong	result2, fp
1e8ac     04 4E 05 F1 | 	add	fp, #4
1e8b0     A7 2A 62 FC | 	wrlong	local03, fp
1e8b4                 | ' 
1e8b4                 | ' t2=pop()
1e8b4                 | ' t1=pop()
1e8b4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1e8b4     08 4E 85 F1 | 	sub	fp, #8
1e8b8     1C 2A 0E F2 | 	cmp	local03, #28 wz
1e8bc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e8c0     A7 2A 62 AC |  if_e	wrlong	local03, fp
1e8c4     08 4E 05 A1 |  if_e	add	fp, #8
1e8c8     A7 3A 68 AC |  if_e	wrlong	#29, fp
1e8cc     08 4E 85 A1 |  if_e	sub	fp, #8
1e8d0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1e8d0     14 4E 05 F1 | 	add	fp, #20
1e8d4     A7 2A 02 FB | 	rdlong	local03, fp
1e8d8     14 4E 85 F1 | 	sub	fp, #20
1e8dc     1C 2A 0E F2 | 	cmp	local03, #28 wz
1e8e0     18 00 90 5D |  if_ne	jmp	#LR__2430
1e8e4     0C 4E 05 F1 | 	add	fp, #12
1e8e8     A7 2A 02 FB | 	rdlong	local03, fp
1e8ec     A7 2A 62 FC | 	wrlong	local03, fp
1e8f0     08 4E 05 F1 | 	add	fp, #8
1e8f4     A7 3A 68 FC | 	wrlong	#29, fp
1e8f8     14 4E 85 F1 | 	sub	fp, #20
1e8fc                 | LR__2430
1e8fc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1e8fc     08 4E 05 F1 | 	add	fp, #8
1e900     A7 2A 02 FB | 	rdlong	local03, fp
1e904     08 4E 85 F1 | 	sub	fp, #8
1e908     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e90c     14 4E 05 51 |  if_ne	add	fp, #20
1e910     A7 28 02 5B |  if_ne	rdlong	local02, fp
1e914     14 4E 85 51 |  if_ne	sub	fp, #20
1e918     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1e91c     08 4E 05 51 |  if_ne	add	fp, #8
1e920     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1e924     08 4E 85 51 |  if_ne	sub	fp, #8
1e928     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1e92c     14 4E 05 51 |  if_ne	add	fp, #20
1e930     14 4E 85 51 |  if_ne	sub	fp, #20
1e934     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1e938     A7 0C 68 AC |  if_e	wrlong	#6, fp
1e93c     08 4E 05 A1 |  if_e	add	fp, #8
1e940     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e944     08 4E 85 A1 |  if_e	sub	fp, #8
1e948     18 00 90 AD |  if_e	jmp	#LR__2431
1e94c     A7 2A 02 FB | 	rdlong	local03, fp
1e950     0C 4E 05 F1 | 	add	fp, #12
1e954     A7 26 02 FB | 	rdlong	local01, fp
1e958     0C 4E 85 F1 | 	sub	fp, #12
1e95c     13 2B 02 F5 | 	and	local03, local01
1e960     A7 2A 62 FC | 	wrlong	local03, fp
1e964                 | LR__2431
1e964     A7 12 02 F6 | 	mov	arg01, fp
1e968     4C EF BE FD | 	call	#_push
1e96c     A7 F0 03 F6 | 	mov	ptra, fp
1e970     B2 00 A0 FD | 	call	#popregs_
1e974                 | _do_and_ret
1e974     2D 00 64 FD | 	ret
1e978                 | 
1e978                 | ' 
1e978                 | ' '--------------------------------- DIV (integer divide)
1e978                 | ' 
1e978                 | ' sub do_div 
1e978                 | _do_div
1e978     01 4A 05 F6 | 	mov	COUNT_, #1
1e97c     A8 00 A0 FD | 	call	#pushregs_
1e980     18 F0 07 F1 | 	add	ptra, #24
1e984     98 EE BE FD | 	call	#_pop
1e988     FD 92 02 F6 | 	mov	muldivb_, result1
1e98c     FE 90 02 F6 | 	mov	muldiva_, result2
1e990     FF 26 02 F6 | 	mov	local01, result3
1e994     0C 4E 05 F1 | 	add	fp, #12
1e998     A7 92 62 FC | 	wrlong	muldivb_, fp
1e99c     04 4E 05 F1 | 	add	fp, #4
1e9a0     A7 90 62 FC | 	wrlong	muldiva_, fp
1e9a4     04 4E 05 F1 | 	add	fp, #4
1e9a8     A7 26 62 FC | 	wrlong	local01, fp
1e9ac     14 4E 85 F1 | 	sub	fp, #20
1e9b0     6C EE BE FD | 	call	#_pop
1e9b4     A7 FA 61 FC | 	wrlong	result1, fp
1e9b8     04 4E 05 F1 | 	add	fp, #4
1e9bc     A7 FC 61 FC | 	wrlong	result2, fp
1e9c0     04 4E 05 F1 | 	add	fp, #4
1e9c4     A7 FE 61 FC | 	wrlong	result3, fp
1e9c8                 | ' 
1e9c8                 | ' t2=pop()
1e9c8                 | ' t1=pop()
1e9c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1e9c8     08 4E 85 F1 | 	sub	fp, #8
1e9cc     1F FE 0D F2 | 	cmp	result3, #31 wz
1e9d0     14 4E 05 51 |  if_ne	add	fp, #20
1e9d4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1e9d8     14 4E 85 51 |  if_ne	sub	fp, #20
1e9dc     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1e9e0     A7 14 68 AC |  if_e	wrlong	#10, fp
1e9e4     08 4E 05 A1 |  if_e	add	fp, #8
1e9e8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e9ec     08 4E 85 A1 |  if_e	sub	fp, #8
1e9f0     90 01 90 AD |  if_e	jmp	#LR__2446
1e9f4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1e9f4     08 4E 05 F1 | 	add	fp, #8
1e9f8     A7 92 02 FB | 	rdlong	muldivb_, fp
1e9fc     08 4E 85 F1 | 	sub	fp, #8
1ea00     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1ea04     1C 00 90 5D |  if_ne	jmp	#LR__2440
1ea08     08 4E 05 F1 | 	add	fp, #8
1ea0c     A7 38 68 FC | 	wrlong	#28, fp
1ea10     08 4E 85 F1 | 	sub	fp, #8
1ea14     A7 12 02 FB | 	rdlong	arg01, fp
1ea18     00 14 06 F6 | 	mov	arg02, #0
1ea1c     80 C4 B0 FD | 	call	#__system___float_tointeger
1ea20     A7 FA 61 FC | 	wrlong	result1, fp
1ea24                 | LR__2440
1ea24                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1ea24     14 4E 05 F1 | 	add	fp, #20
1ea28     A7 92 02 FB | 	rdlong	muldivb_, fp
1ea2c     14 4E 85 F1 | 	sub	fp, #20
1ea30     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1ea34     28 00 90 5D |  if_ne	jmp	#LR__2441
1ea38     14 4E 05 F1 | 	add	fp, #20
1ea3c     A7 38 68 FC | 	wrlong	#28, fp
1ea40     08 4E 85 F1 | 	sub	fp, #8
1ea44     A7 12 02 FB | 	rdlong	arg01, fp
1ea48     0C 4E 85 F1 | 	sub	fp, #12
1ea4c     00 14 06 F6 | 	mov	arg02, #0
1ea50     4C C4 B0 FD | 	call	#__system___float_tointeger
1ea54     0C 4E 05 F1 | 	add	fp, #12
1ea58     A7 FA 61 FC | 	wrlong	result1, fp
1ea5c     0C 4E 85 F1 | 	sub	fp, #12
1ea60                 | LR__2441
1ea60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1ea60     08 4E 05 F1 | 	add	fp, #8
1ea64     A7 92 02 FB | 	rdlong	muldivb_, fp
1ea68     08 4E 85 F1 | 	sub	fp, #8
1ea6c     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1ea70     14 4E 05 A1 |  if_e	add	fp, #20
1ea74     A7 26 02 AB |  if_e	rdlong	local01, fp
1ea78     14 4E 85 A1 |  if_e	sub	fp, #20
1ea7c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1ea80     20 00 90 5D |  if_ne	jmp	#LR__2442
1ea84     0C 4E 05 F1 | 	add	fp, #12
1ea88     A7 26 02 FB | 	rdlong	local01, fp
1ea8c     0C 4E 85 F1 | 	sub	fp, #12
1ea90     A7 92 02 FB | 	rdlong	muldivb_, fp
1ea94     13 93 12 FD | 	qdiv	muldivb_, local01
1ea98     18 26 62 FD | 	getqx	local01
1ea9c     A7 26 62 FC | 	wrlong	local01, fp
1eaa0     E0 00 90 FD | 	jmp	#LR__2446
1eaa4                 | LR__2442
1eaa4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1eaa4     08 4E 05 F1 | 	add	fp, #8
1eaa8     A7 92 02 FB | 	rdlong	muldivb_, fp
1eaac     08 4E 85 F1 | 	sub	fp, #8
1eab0     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1eab4     14 4E 05 A1 |  if_e	add	fp, #20
1eab8     A7 26 02 AB |  if_e	rdlong	local01, fp
1eabc     14 4E 85 A1 |  if_e	sub	fp, #20
1eac0     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1eac4     2C 00 90 5D |  if_ne	jmp	#LR__2443
1eac8     0C 4E 05 F1 | 	add	fp, #12
1eacc     A7 26 02 FB | 	rdlong	local01, fp
1ead0     0C 4E 85 F1 | 	sub	fp, #12
1ead4     A7 92 02 FB | 	rdlong	muldivb_, fp
1ead8     13 93 12 FD | 	qdiv	muldivb_, local01
1eadc     18 26 62 FD | 	getqx	local01
1eae0     A7 26 62 FC | 	wrlong	local01, fp
1eae4     08 4E 05 F1 | 	add	fp, #8
1eae8     A7 38 68 FC | 	wrlong	#28, fp
1eaec     08 4E 85 F1 | 	sub	fp, #8
1eaf0     90 00 90 FD | 	jmp	#LR__2446
1eaf4                 | LR__2443
1eaf4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1eaf4     08 4E 05 F1 | 	add	fp, #8
1eaf8     A7 92 02 FB | 	rdlong	muldivb_, fp
1eafc     08 4E 85 F1 | 	sub	fp, #8
1eb00     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1eb04     14 4E 05 A1 |  if_e	add	fp, #20
1eb08     A7 26 02 AB |  if_e	rdlong	local01, fp
1eb0c     14 4E 85 A1 |  if_e	sub	fp, #20
1eb10     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1eb14     1C 00 90 5D |  if_ne	jmp	#LR__2444
1eb18     A7 90 02 FB | 	rdlong	muldiva_, fp
1eb1c     0C 4E 05 F1 | 	add	fp, #12
1eb20     A7 92 02 FB | 	rdlong	muldivb_, fp
1eb24     0C 4E 85 F1 | 	sub	fp, #12
1eb28     BA 00 A0 FD | 	call	#divide_
1eb2c     A7 92 62 FC | 	wrlong	muldivb_, fp
1eb30     50 00 90 FD | 	jmp	#LR__2446
1eb34                 | LR__2444
1eb34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1eb34     08 4E 05 F1 | 	add	fp, #8
1eb38     A7 92 02 FB | 	rdlong	muldivb_, fp
1eb3c     08 4E 85 F1 | 	sub	fp, #8
1eb40     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1eb44     14 4E 05 A1 |  if_e	add	fp, #20
1eb48     A7 26 02 AB |  if_e	rdlong	local01, fp
1eb4c     14 4E 85 A1 |  if_e	sub	fp, #20
1eb50     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1eb54     1C 00 90 5D |  if_ne	jmp	#LR__2445
1eb58     A7 90 02 FB | 	rdlong	muldiva_, fp
1eb5c     0C 4E 05 F1 | 	add	fp, #12
1eb60     A7 92 02 FB | 	rdlong	muldivb_, fp
1eb64     0C 4E 85 F1 | 	sub	fp, #12
1eb68     BA 00 A0 FD | 	call	#divide_
1eb6c     A7 92 62 FC | 	wrlong	muldivb_, fp
1eb70     10 00 90 FD | 	jmp	#LR__2446
1eb74                 | LR__2445
1eb74     A7 16 68 FC | 	wrlong	#11, fp
1eb78     08 4E 05 F1 | 	add	fp, #8
1eb7c     A7 FE 69 FC | 	wrlong	#255, fp
1eb80     08 4E 85 F1 | 	sub	fp, #8
1eb84                 | LR__2446
1eb84     A7 12 02 F6 | 	mov	arg01, fp
1eb88     2C ED BE FD | 	call	#_push
1eb8c     A7 F0 03 F6 | 	mov	ptra, fp
1eb90     B2 00 A0 FD | 	call	#popregs_
1eb94                 | _do_div_ret
1eb94     2D 00 64 FD | 	ret
1eb98                 | 
1eb98                 | ' 
1eb98                 | ' '--------------------------------- equal (=)
1eb98                 | ' 
1eb98                 | ' sub do_eq
1eb98                 | _do_eq
1eb98     05 4A 05 F6 | 	mov	COUNT_, #5
1eb9c     A8 00 A0 FD | 	call	#pushregs_
1eba0     18 F0 07 F1 | 	add	ptra, #24
1eba4     78 EC BE FD | 	call	#_pop
1eba8     FD 26 02 F6 | 	mov	local01, result1
1ebac     FE 28 02 F6 | 	mov	local02, result2
1ebb0     FF 2A 02 F6 | 	mov	local03, result3
1ebb4     0C 4E 05 F1 | 	add	fp, #12
1ebb8     A7 26 62 FC | 	wrlong	local01, fp
1ebbc     04 4E 05 F1 | 	add	fp, #4
1ebc0     A7 28 62 FC | 	wrlong	local02, fp
1ebc4     04 4E 05 F1 | 	add	fp, #4
1ebc8     A7 2A 62 FC | 	wrlong	local03, fp
1ebcc     14 4E 85 F1 | 	sub	fp, #20
1ebd0     4C EC BE FD | 	call	#_pop
1ebd4     FF 2A 02 F6 | 	mov	local03, result3
1ebd8     A7 FA 61 FC | 	wrlong	result1, fp
1ebdc     04 4E 05 F1 | 	add	fp, #4
1ebe0     A7 FC 61 FC | 	wrlong	result2, fp
1ebe4     04 4E 05 F1 | 	add	fp, #4
1ebe8     A7 2A 62 FC | 	wrlong	local03, fp
1ebec                 | ' 
1ebec                 | ' t2=pop()
1ebec                 | ' t1=pop()
1ebec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1ebec     08 4E 85 F1 | 	sub	fp, #8
1ebf0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ebf4     14 4E 05 A1 |  if_e	add	fp, #20
1ebf8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ebfc     14 4E 85 A1 |  if_e	sub	fp, #20
1ec00     16 2B 02 A6 |  if_e	mov	local03, local04
1ec04     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ec08     28 00 90 5D |  if_ne	jmp	#LR__2450
1ec0c     00 26 06 F6 | 	mov	local01, #0
1ec10     A7 12 02 FB | 	rdlong	arg01, fp
1ec14     0C 4E 05 F1 | 	add	fp, #12
1ec18     A7 14 02 FB | 	rdlong	arg02, fp
1ec1c     0C 4E 85 F1 | 	sub	fp, #12
1ec20     60 8F B0 FD | 	call	#__system___string_cmp
1ec24     00 FA 0D F2 | 	cmp	result1, #0 wz
1ec28     00 26 26 A6 |  if_e	not	local01, #0
1ec2c     A7 26 62 FC | 	wrlong	local01, fp
1ec30     20 04 90 FD | 	jmp	#LR__2463
1ec34                 | LR__2450
1ec34                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1ec34     08 4E 05 F1 | 	add	fp, #8
1ec38     A7 26 02 FB | 	rdlong	local01, fp
1ec3c     08 4E 85 F1 | 	sub	fp, #8
1ec40     1E 26 0E F2 | 	cmp	local01, #30 wz
1ec44     14 4E 05 A1 |  if_e	add	fp, #20
1ec48     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec4c     14 4E 85 A1 |  if_e	sub	fp, #20
1ec50     16 2B 02 A6 |  if_e	mov	local03, local04
1ec54     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ec58     2C 00 90 5D |  if_ne	jmp	#LR__2451
1ec5c     00 26 06 F6 | 	mov	local01, #0
1ec60     A7 12 02 FB | 	rdlong	arg01, fp
1ec64     0C 4E 05 F1 | 	add	fp, #12
1ec68     A7 14 02 FB | 	rdlong	arg02, fp
1ec6c     0C 4E 85 F1 | 	sub	fp, #12
1ec70     01 16 06 F6 | 	mov	arg03, #1
1ec74     94 C1 B0 FD | 	call	#__system___float_cmp
1ec78     00 FA 0D F2 | 	cmp	result1, #0 wz
1ec7c     00 26 26 A6 |  if_e	not	local01, #0
1ec80     A7 26 62 FC | 	wrlong	local01, fp
1ec84     CC 03 90 FD | 	jmp	#LR__2463
1ec88                 | LR__2451
1ec88                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1ec88     08 4E 05 F1 | 	add	fp, #8
1ec8c     A7 26 02 FB | 	rdlong	local01, fp
1ec90     08 4E 85 F1 | 	sub	fp, #8
1ec94     1E 26 0E F2 | 	cmp	local01, #30 wz
1ec98     14 4E 05 A1 |  if_e	add	fp, #20
1ec9c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eca0     14 4E 85 A1 |  if_e	sub	fp, #20
1eca4     16 2B 02 A6 |  if_e	mov	local03, local04
1eca8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ecac     48 00 90 5D |  if_ne	jmp	#LR__2452
1ecb0     00 26 06 F6 | 	mov	local01, #0
1ecb4     A7 28 02 FB | 	rdlong	local02, fp
1ecb8     0C 4E 05 F1 | 	add	fp, #12
1ecbc     A7 12 02 FB | 	rdlong	arg01, fp
1ecc0     0C 4E 85 F1 | 	sub	fp, #12
1ecc4     09 13 52 F6 | 	abs	arg01, arg01 wc
1ecc8     1F 2E C6 C9 |  if_b	decod	local05, #31
1eccc     00 2E 06 36 |  if_ae	mov	local05, #0
1ecd0     00 B9 B0 FD | 	call	#__system___float_fromuns
1ecd4     17 FB 61 F5 | 	xor	result1, local05
1ecd8     FD 14 02 F6 | 	mov	arg02, result1
1ecdc     14 13 02 F6 | 	mov	arg01, local02
1ece0     01 16 06 F6 | 	mov	arg03, #1
1ece4     24 C1 B0 FD | 	call	#__system___float_cmp
1ece8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ecec     00 26 26 A6 |  if_e	not	local01, #0
1ecf0     A7 26 62 FC | 	wrlong	local01, fp
1ecf4     5C 03 90 FD | 	jmp	#LR__2463
1ecf8                 | LR__2452
1ecf8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1ecf8     08 4E 05 F1 | 	add	fp, #8
1ecfc     A7 26 02 FB | 	rdlong	local01, fp
1ed00     08 4E 85 F1 | 	sub	fp, #8
1ed04     1E 26 0E F2 | 	cmp	local01, #30 wz
1ed08     14 4E 05 A1 |  if_e	add	fp, #20
1ed0c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed10     14 4E 85 A1 |  if_e	sub	fp, #20
1ed14     16 2B 02 A6 |  if_e	mov	local03, local04
1ed18     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ed1c     38 00 90 5D |  if_ne	jmp	#LR__2453
1ed20     00 26 06 F6 | 	mov	local01, #0
1ed24     A7 28 02 FB | 	rdlong	local02, fp
1ed28     0C 4E 05 F1 | 	add	fp, #12
1ed2c     A7 12 02 FB | 	rdlong	arg01, fp
1ed30     0C 4E 85 F1 | 	sub	fp, #12
1ed34     9C B8 B0 FD | 	call	#__system___float_fromuns
1ed38     FD 14 02 F6 | 	mov	arg02, result1
1ed3c     14 13 02 F6 | 	mov	arg01, local02
1ed40     01 16 06 F6 | 	mov	arg03, #1
1ed44     C4 C0 B0 FD | 	call	#__system___float_cmp
1ed48     00 FA 0D F2 | 	cmp	result1, #0 wz
1ed4c     00 26 26 A6 |  if_e	not	local01, #0
1ed50     A7 26 62 FC | 	wrlong	local01, fp
1ed54     FC 02 90 FD | 	jmp	#LR__2463
1ed58                 | LR__2453
1ed58                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1ed58     08 4E 05 F1 | 	add	fp, #8
1ed5c     A7 26 02 FB | 	rdlong	local01, fp
1ed60     08 4E 85 F1 | 	sub	fp, #8
1ed64     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed68     14 4E 05 A1 |  if_e	add	fp, #20
1ed6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed70     14 4E 85 A1 |  if_e	sub	fp, #20
1ed74     16 2B 02 A6 |  if_e	mov	local03, local04
1ed78     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ed7c     44 00 90 5D |  if_ne	jmp	#LR__2454
1ed80     00 26 06 F6 | 	mov	local01, #0
1ed84     A7 12 02 FB | 	rdlong	arg01, fp
1ed88     09 13 52 F6 | 	abs	arg01, arg01 wc
1ed8c     1F 2E C6 C9 |  if_b	decod	local05, #31
1ed90     00 2E 06 36 |  if_ae	mov	local05, #0
1ed94     3C B8 B0 FD | 	call	#__system___float_fromuns
1ed98     17 FB 61 F5 | 	xor	result1, local05
1ed9c     FD 12 02 F6 | 	mov	arg01, result1
1eda0     0C 4E 05 F1 | 	add	fp, #12
1eda4     A7 14 02 FB | 	rdlong	arg02, fp
1eda8     0C 4E 85 F1 | 	sub	fp, #12
1edac     01 16 06 F6 | 	mov	arg03, #1
1edb0     58 C0 B0 FD | 	call	#__system___float_cmp
1edb4     00 FA 0D F2 | 	cmp	result1, #0 wz
1edb8     00 26 26 A6 |  if_e	not	local01, #0
1edbc     A7 26 62 FC | 	wrlong	local01, fp
1edc0     90 02 90 FD | 	jmp	#LR__2463
1edc4                 | LR__2454
1edc4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1edc4     08 4E 05 F1 | 	add	fp, #8
1edc8     A7 26 02 FB | 	rdlong	local01, fp
1edcc     08 4E 85 F1 | 	sub	fp, #8
1edd0     1C 26 0E F2 | 	cmp	local01, #28 wz
1edd4     14 4E 05 A1 |  if_e	add	fp, #20
1edd8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eddc     14 4E 85 A1 |  if_e	sub	fp, #20
1ede0     16 2B 02 A6 |  if_e	mov	local03, local04
1ede4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ede8     24 00 90 5D |  if_ne	jmp	#LR__2455
1edec     00 26 06 F6 | 	mov	local01, #0
1edf0     A7 28 02 FB | 	rdlong	local02, fp
1edf4     0C 4E 05 F1 | 	add	fp, #12
1edf8     A7 2A 02 FB | 	rdlong	local03, fp
1edfc     0C 4E 85 F1 | 	sub	fp, #12
1ee00     15 29 0A F2 | 	cmp	local02, local03 wz
1ee04     01 26 66 A6 |  if_e	neg	local01, #1
1ee08     A7 26 62 FC | 	wrlong	local01, fp
1ee0c     44 02 90 FD | 	jmp	#LR__2463
1ee10                 | LR__2455
1ee10                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1ee10     08 4E 05 F1 | 	add	fp, #8
1ee14     A7 26 02 FB | 	rdlong	local01, fp
1ee18     08 4E 85 F1 | 	sub	fp, #8
1ee1c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee20     14 4E 05 A1 |  if_e	add	fp, #20
1ee24     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee28     14 4E 85 A1 |  if_e	sub	fp, #20
1ee2c     16 2B 02 A6 |  if_e	mov	local03, local04
1ee30     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ee34     24 00 90 5D |  if_ne	jmp	#LR__2456
1ee38     00 26 06 F6 | 	mov	local01, #0
1ee3c     A7 28 02 FB | 	rdlong	local02, fp
1ee40     0C 4E 05 F1 | 	add	fp, #12
1ee44     A7 2A 02 FB | 	rdlong	local03, fp
1ee48     0C 4E 85 F1 | 	sub	fp, #12
1ee4c     15 29 0A F2 | 	cmp	local02, local03 wz
1ee50     01 26 66 A6 |  if_e	neg	local01, #1
1ee54     A7 26 62 FC | 	wrlong	local01, fp
1ee58     F8 01 90 FD | 	jmp	#LR__2463
1ee5c                 | LR__2456
1ee5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1ee5c     08 4E 05 F1 | 	add	fp, #8
1ee60     A7 26 02 FB | 	rdlong	local01, fp
1ee64     08 4E 85 F1 | 	sub	fp, #8
1ee68     1D 26 0E F2 | 	cmp	local01, #29 wz
1ee6c     14 4E 05 A1 |  if_e	add	fp, #20
1ee70     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee74     14 4E 85 A1 |  if_e	sub	fp, #20
1ee78     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ee7c     34 00 90 5D |  if_ne	jmp	#LR__2457
1ee80     00 26 06 F6 | 	mov	local01, #0
1ee84     A7 12 02 FB | 	rdlong	arg01, fp
1ee88     48 B7 B0 FD | 	call	#__system___float_fromuns
1ee8c     FD 12 02 F6 | 	mov	arg01, result1
1ee90     0C 4E 05 F1 | 	add	fp, #12
1ee94     A7 14 02 FB | 	rdlong	arg02, fp
1ee98     0C 4E 85 F1 | 	sub	fp, #12
1ee9c     01 16 06 F6 | 	mov	arg03, #1
1eea0     68 BF B0 FD | 	call	#__system___float_cmp
1eea4     00 FA 0D F2 | 	cmp	result1, #0 wz
1eea8     00 26 26 A6 |  if_e	not	local01, #0
1eeac     A7 26 62 FC | 	wrlong	local01, fp
1eeb0     A0 01 90 FD | 	jmp	#LR__2463
1eeb4                 | LR__2457
1eeb4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1eeb4     08 4E 05 F1 | 	add	fp, #8
1eeb8     A7 26 02 FB | 	rdlong	local01, fp
1eebc     08 4E 85 F1 | 	sub	fp, #8
1eec0     1D 26 0E F2 | 	cmp	local01, #29 wz
1eec4     14 4E 05 A1 |  if_e	add	fp, #20
1eec8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eecc     14 4E 85 A1 |  if_e	sub	fp, #20
1eed0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1eed4     24 00 90 5D |  if_ne	jmp	#LR__2458
1eed8     00 26 06 F6 | 	mov	local01, #0
1eedc     A7 28 02 FB | 	rdlong	local02, fp
1eee0     0C 4E 05 F1 | 	add	fp, #12
1eee4     A7 2A 02 FB | 	rdlong	local03, fp
1eee8     0C 4E 85 F1 | 	sub	fp, #12
1eeec     15 29 0A F2 | 	cmp	local02, local03 wz
1eef0     01 26 66 A6 |  if_e	neg	local01, #1
1eef4     A7 26 62 FC | 	wrlong	local01, fp
1eef8     58 01 90 FD | 	jmp	#LR__2463
1eefc                 | LR__2458
1eefc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1eefc     08 4E 05 F1 | 	add	fp, #8
1ef00     A7 26 02 FB | 	rdlong	local01, fp
1ef04     08 4E 85 F1 | 	sub	fp, #8
1ef08     1D 26 0E F2 | 	cmp	local01, #29 wz
1ef0c     14 4E 05 A1 |  if_e	add	fp, #20
1ef10     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef14     14 4E 85 A1 |  if_e	sub	fp, #20
1ef18     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ef1c     24 00 90 5D |  if_ne	jmp	#LR__2459
1ef20     00 26 06 F6 | 	mov	local01, #0
1ef24     A7 28 02 FB | 	rdlong	local02, fp
1ef28     0C 4E 05 F1 | 	add	fp, #12
1ef2c     A7 2A 02 FB | 	rdlong	local03, fp
1ef30     0C 4E 85 F1 | 	sub	fp, #12
1ef34     15 29 0A F2 | 	cmp	local02, local03 wz
1ef38     01 26 66 A6 |  if_e	neg	local01, #1
1ef3c     A7 26 62 FC | 	wrlong	local01, fp
1ef40     10 01 90 FD | 	jmp	#LR__2463
1ef44                 | LR__2459
1ef44                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1ef44     08 4E 05 F1 | 	add	fp, #8
1ef48     A7 26 02 FB | 	rdlong	local01, fp
1ef4c     08 4E 85 F1 | 	sub	fp, #8
1ef50     2B 26 0E F2 | 	cmp	local01, #43 wz
1ef54     14 4E 05 A1 |  if_e	add	fp, #20
1ef58     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef5c     14 4E 85 A1 |  if_e	sub	fp, #20
1ef60     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ef64     30 00 90 5D |  if_ne	jmp	#LR__2460
1ef68     00 26 06 F6 | 	mov	local01, #0
1ef6c     A7 12 02 FB | 	rdlong	arg01, fp
1ef70     24 EA BE FD | 	call	#_convertstring
1ef74     FD 12 02 F6 | 	mov	arg01, result1
1ef78     0C 4E 05 F1 | 	add	fp, #12
1ef7c     A7 14 02 FB | 	rdlong	arg02, fp
1ef80     0C 4E 85 F1 | 	sub	fp, #12
1ef84     FC 8B B0 FD | 	call	#__system___string_cmp
1ef88     00 FA 0D F2 | 	cmp	result1, #0 wz
1ef8c     00 26 26 A6 |  if_e	not	local01, #0
1ef90     A7 26 62 FC | 	wrlong	local01, fp
1ef94     BC 00 90 FD | 	jmp	#LR__2463
1ef98                 | LR__2460
1ef98                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1ef98     08 4E 05 F1 | 	add	fp, #8
1ef9c     A7 26 02 FB | 	rdlong	local01, fp
1efa0     08 4E 85 F1 | 	sub	fp, #8
1efa4     1F 26 0E F2 | 	cmp	local01, #31 wz
1efa8     14 4E 05 A1 |  if_e	add	fp, #20
1efac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1efb0     14 4E 85 A1 |  if_e	sub	fp, #20
1efb4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1efb8     34 00 90 5D |  if_ne	jmp	#LR__2461
1efbc     00 26 06 F6 | 	mov	local01, #0
1efc0     A7 28 02 FB | 	rdlong	local02, fp
1efc4     0C 4E 05 F1 | 	add	fp, #12
1efc8     A7 12 02 FB | 	rdlong	arg01, fp
1efcc     0C 4E 85 F1 | 	sub	fp, #12
1efd0     C4 E9 BE FD | 	call	#_convertstring
1efd4     FD 14 02 F6 | 	mov	arg02, result1
1efd8     14 13 02 F6 | 	mov	arg01, local02
1efdc     A4 8B B0 FD | 	call	#__system___string_cmp
1efe0     00 FA 0D F2 | 	cmp	result1, #0 wz
1efe4     00 26 26 A6 |  if_e	not	local01, #0
1efe8     A7 26 62 FC | 	wrlong	local01, fp
1efec     64 00 90 FD | 	jmp	#LR__2463
1eff0                 | LR__2461
1eff0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1eff0     08 4E 05 F1 | 	add	fp, #8
1eff4     A7 26 02 FB | 	rdlong	local01, fp
1eff8     08 4E 85 F1 | 	sub	fp, #8
1effc     2B 26 0E F2 | 	cmp	local01, #43 wz
1f000     14 4E 05 A1 |  if_e	add	fp, #20
1f004     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f008     14 4E 85 A1 |  if_e	sub	fp, #20
1f00c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f010     3C 00 90 5D |  if_ne	jmp	#LR__2462
1f014     00 26 06 F6 | 	mov	local01, #0
1f018     A7 12 02 FB | 	rdlong	arg01, fp
1f01c     78 E9 BE FD | 	call	#_convertstring
1f020     FD 28 02 F6 | 	mov	local02, result1
1f024     0C 4E 05 F1 | 	add	fp, #12
1f028     A7 12 02 FB | 	rdlong	arg01, fp
1f02c     0C 4E 85 F1 | 	sub	fp, #12
1f030     64 E9 BE FD | 	call	#_convertstring
1f034     FD 14 02 F6 | 	mov	arg02, result1
1f038     14 13 02 F6 | 	mov	arg01, local02
1f03c     44 8B B0 FD | 	call	#__system___string_cmp
1f040     00 FA 0D F2 | 	cmp	result1, #0 wz
1f044     00 26 26 A6 |  if_e	not	local01, #0
1f048     A7 26 62 FC | 	wrlong	local01, fp
1f04c     04 00 90 FD | 	jmp	#LR__2463
1f050                 | LR__2462
1f050     A7 00 68 FC | 	wrlong	#0, fp
1f054                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f054                 | LR__2463
1f054     08 4E 05 F1 | 	add	fp, #8
1f058     A7 38 68 FC | 	wrlong	#28, fp
1f05c     08 4E 85 F1 | 	sub	fp, #8
1f060     A7 12 02 F6 | 	mov	arg01, fp
1f064     50 E8 BE FD | 	call	#_push
1f068     A7 F0 03 F6 | 	mov	ptra, fp
1f06c     B2 00 A0 FD | 	call	#popregs_
1f070                 | _do_eq_ret
1f070     2D 00 64 FD | 	ret
1f074                 | 
1f074                 | ' 
1f074                 | ' '--------------------------------- fdiv (/) - float divide
1f074                 | ' 
1f074                 | ' sub do_fdiv 
1f074                 | _do_fdiv
1f074     02 4A 05 F6 | 	mov	COUNT_, #2
1f078     A8 00 A0 FD | 	call	#pushregs_
1f07c     18 F0 07 F1 | 	add	ptra, #24
1f080     9C E7 BE FD | 	call	#_pop
1f084     FD 14 02 F6 | 	mov	arg02, result1
1f088     FE 12 02 F6 | 	mov	arg01, result2
1f08c     FF 26 02 F6 | 	mov	local01, result3
1f090     0C 4E 05 F1 | 	add	fp, #12
1f094     A7 14 62 FC | 	wrlong	arg02, fp
1f098     04 4E 05 F1 | 	add	fp, #4
1f09c     A7 12 62 FC | 	wrlong	arg01, fp
1f0a0     04 4E 05 F1 | 	add	fp, #4
1f0a4     A7 26 62 FC | 	wrlong	local01, fp
1f0a8     14 4E 85 F1 | 	sub	fp, #20
1f0ac     70 E7 BE FD | 	call	#_pop
1f0b0     A7 FA 61 FC | 	wrlong	result1, fp
1f0b4     04 4E 05 F1 | 	add	fp, #4
1f0b8     A7 FC 61 FC | 	wrlong	result2, fp
1f0bc     04 4E 05 F1 | 	add	fp, #4
1f0c0     A7 FE 61 FC | 	wrlong	result3, fp
1f0c4                 | ' 
1f0c4                 | ' t2=pop()
1f0c4                 | ' t1=pop()
1f0c4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1f0c4     08 4E 85 F1 | 	sub	fp, #8
1f0c8     1F FE 0D F2 | 	cmp	result3, #31 wz
1f0cc     14 4E 05 51 |  if_ne	add	fp, #20
1f0d0     A7 26 02 5B |  if_ne	rdlong	local01, fp
1f0d4     14 4E 85 51 |  if_ne	sub	fp, #20
1f0d8     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1f0dc     A7 14 68 AC |  if_e	wrlong	#10, fp
1f0e0     08 4E 05 A1 |  if_e	add	fp, #8
1f0e4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f0e8     08 4E 85 A1 |  if_e	sub	fp, #8
1f0ec     38 01 90 AD |  if_e	jmp	#LR__2475
1f0f0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1f0f0     08 4E 05 F1 | 	add	fp, #8
1f0f4     A7 14 02 FB | 	rdlong	arg02, fp
1f0f8     08 4E 85 F1 | 	sub	fp, #8
1f0fc     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f100     28 00 90 5D |  if_ne	jmp	#LR__2470
1f104     08 4E 05 F1 | 	add	fp, #8
1f108     A7 3C 68 FC | 	wrlong	#30, fp
1f10c     08 4E 85 F1 | 	sub	fp, #8
1f110     A7 12 02 FB | 	rdlong	arg01, fp
1f114     09 13 52 F6 | 	abs	arg01, arg01 wc
1f118     1F 28 C6 C9 |  if_b	decod	local02, #31
1f11c     00 28 06 36 |  if_ae	mov	local02, #0
1f120     B0 B4 B0 FD | 	call	#__system___float_fromuns
1f124     14 FB 61 F5 | 	xor	result1, local02
1f128     A7 FA 61 FC | 	wrlong	result1, fp
1f12c                 | LR__2470
1f12c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1f12c     08 4E 05 F1 | 	add	fp, #8
1f130     A7 14 02 FB | 	rdlong	arg02, fp
1f134     08 4E 85 F1 | 	sub	fp, #8
1f138     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f13c     18 00 90 5D |  if_ne	jmp	#LR__2471
1f140     08 4E 05 F1 | 	add	fp, #8
1f144     A7 3C 68 FC | 	wrlong	#30, fp
1f148     08 4E 85 F1 | 	sub	fp, #8
1f14c     A7 12 02 FB | 	rdlong	arg01, fp
1f150     80 B4 B0 FD | 	call	#__system___float_fromuns
1f154     A7 FA 61 FC | 	wrlong	result1, fp
1f158                 | LR__2471
1f158                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1f158     14 4E 05 F1 | 	add	fp, #20
1f15c     A7 14 02 FB | 	rdlong	arg02, fp
1f160     14 4E 85 F1 | 	sub	fp, #20
1f164     1C 14 0E F2 | 	cmp	arg02, #28 wz
1f168     34 00 90 5D |  if_ne	jmp	#LR__2472
1f16c     14 4E 05 F1 | 	add	fp, #20
1f170     A7 3C 68 FC | 	wrlong	#30, fp
1f174     08 4E 85 F1 | 	sub	fp, #8
1f178     A7 12 02 FB | 	rdlong	arg01, fp
1f17c     0C 4E 85 F1 | 	sub	fp, #12
1f180     09 13 52 F6 | 	abs	arg01, arg01 wc
1f184     1F 28 C6 C9 |  if_b	decod	local02, #31
1f188     00 28 06 36 |  if_ae	mov	local02, #0
1f18c     44 B4 B0 FD | 	call	#__system___float_fromuns
1f190     14 FB 61 F5 | 	xor	result1, local02
1f194     0C 4E 05 F1 | 	add	fp, #12
1f198     A7 FA 61 FC | 	wrlong	result1, fp
1f19c     0C 4E 85 F1 | 	sub	fp, #12
1f1a0                 | LR__2472
1f1a0                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1f1a0     14 4E 05 F1 | 	add	fp, #20
1f1a4     A7 14 02 FB | 	rdlong	arg02, fp
1f1a8     14 4E 85 F1 | 	sub	fp, #20
1f1ac     1D 14 0E F2 | 	cmp	arg02, #29 wz
1f1b0     24 00 90 5D |  if_ne	jmp	#LR__2473
1f1b4     14 4E 05 F1 | 	add	fp, #20
1f1b8     A7 3C 68 FC | 	wrlong	#30, fp
1f1bc     08 4E 85 F1 | 	sub	fp, #8
1f1c0     A7 12 02 FB | 	rdlong	arg01, fp
1f1c4     0C 4E 85 F1 | 	sub	fp, #12
1f1c8     08 B4 B0 FD | 	call	#__system___float_fromuns
1f1cc     0C 4E 05 F1 | 	add	fp, #12
1f1d0     A7 FA 61 FC | 	wrlong	result1, fp
1f1d4     0C 4E 85 F1 | 	sub	fp, #12
1f1d8                 | LR__2473
1f1d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1f1d8     08 4E 05 F1 | 	add	fp, #8
1f1dc     A7 14 02 FB | 	rdlong	arg02, fp
1f1e0     08 4E 85 F1 | 	sub	fp, #8
1f1e4     1E 14 0E F2 | 	cmp	arg02, #30 wz
1f1e8     14 4E 05 A1 |  if_e	add	fp, #20
1f1ec     A7 26 02 AB |  if_e	rdlong	local01, fp
1f1f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f1f4     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1f1f8     1C 00 90 5D |  if_ne	jmp	#LR__2474
1f1fc     A7 12 02 FB | 	rdlong	arg01, fp
1f200     0C 4E 05 F1 | 	add	fp, #12
1f204     A7 14 02 FB | 	rdlong	arg02, fp
1f208     0C 4E 85 F1 | 	sub	fp, #12
1f20c     CC B9 B0 FD | 	call	#__system___float_div
1f210     A7 FA 61 FC | 	wrlong	result1, fp
1f214     10 00 90 FD | 	jmp	#LR__2475
1f218                 | LR__2474
1f218     A7 16 68 FC | 	wrlong	#11, fp
1f21c     08 4E 05 F1 | 	add	fp, #8
1f220     A7 FE 69 FC | 	wrlong	#255, fp
1f224     08 4E 85 F1 | 	sub	fp, #8
1f228                 | LR__2475
1f228     A7 12 02 F6 | 	mov	arg01, fp
1f22c     88 E6 BE FD | 	call	#_push
1f230     A7 F0 03 F6 | 	mov	ptra, fp
1f234     B2 00 A0 FD | 	call	#popregs_
1f238                 | _do_fdiv_ret
1f238     2D 00 64 FD | 	ret
1f23c                 | 
1f23c                 | ' 
1f23c                 | ' '--------------------------------- greater or equal (>=)
1f23c                 | ' 
1f23c                 | ' sub do_ge
1f23c                 | _do_ge
1f23c     05 4A 05 F6 | 	mov	COUNT_, #5
1f240     A8 00 A0 FD | 	call	#pushregs_
1f244     18 F0 07 F1 | 	add	ptra, #24
1f248     D4 E5 BE FD | 	call	#_pop
1f24c     FD 26 02 F6 | 	mov	local01, result1
1f250     FE 28 02 F6 | 	mov	local02, result2
1f254     FF 2A 02 F6 | 	mov	local03, result3
1f258     0C 4E 05 F1 | 	add	fp, #12
1f25c     A7 26 62 FC | 	wrlong	local01, fp
1f260     04 4E 05 F1 | 	add	fp, #4
1f264     A7 28 62 FC | 	wrlong	local02, fp
1f268     04 4E 05 F1 | 	add	fp, #4
1f26c     A7 2A 62 FC | 	wrlong	local03, fp
1f270     14 4E 85 F1 | 	sub	fp, #20
1f274     A8 E5 BE FD | 	call	#_pop
1f278     FF 2A 02 F6 | 	mov	local03, result3
1f27c     A7 FA 61 FC | 	wrlong	result1, fp
1f280     04 4E 05 F1 | 	add	fp, #4
1f284     A7 FC 61 FC | 	wrlong	result2, fp
1f288     04 4E 05 F1 | 	add	fp, #4
1f28c     A7 2A 62 FC | 	wrlong	local03, fp
1f290                 | ' 
1f290                 | ' t2=pop()
1f290                 | ' t1=pop()
1f290                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1f290     08 4E 85 F1 | 	sub	fp, #8
1f294     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f298     14 4E 05 A1 |  if_e	add	fp, #20
1f29c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f2a4     16 2B 02 A6 |  if_e	mov	local03, local04
1f2a8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f2ac     28 00 90 5D |  if_ne	jmp	#LR__2480
1f2b0     00 26 06 F6 | 	mov	local01, #0
1f2b4     A7 12 02 FB | 	rdlong	arg01, fp
1f2b8     0C 4E 05 F1 | 	add	fp, #12
1f2bc     A7 14 02 FB | 	rdlong	arg02, fp
1f2c0     0C 4E 85 F1 | 	sub	fp, #12
1f2c4     BC 88 B0 FD | 	call	#__system___string_cmp
1f2c8     00 FA 55 F2 | 	cmps	result1, #0 wc
1f2cc     00 26 26 36 |  if_ae	not	local01, #0
1f2d0     A7 26 62 FC | 	wrlong	local01, fp
1f2d4     24 04 90 FD | 	jmp	#LR__2493
1f2d8                 | LR__2480
1f2d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1f2d8     08 4E 05 F1 | 	add	fp, #8
1f2dc     A7 26 02 FB | 	rdlong	local01, fp
1f2e0     08 4E 85 F1 | 	sub	fp, #8
1f2e4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f2e8     14 4E 05 A1 |  if_e	add	fp, #20
1f2ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f2f4     16 2B 02 A6 |  if_e	mov	local03, local04
1f2f8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f2fc     2C 00 90 5D |  if_ne	jmp	#LR__2481
1f300     00 26 06 F6 | 	mov	local01, #0
1f304     A7 12 02 FB | 	rdlong	arg01, fp
1f308     0C 4E 05 F1 | 	add	fp, #12
1f30c     A7 14 02 FB | 	rdlong	arg02, fp
1f310     0C 4E 85 F1 | 	sub	fp, #12
1f314     01 16 66 F6 | 	neg	arg03, #1
1f318     F0 BA B0 FD | 	call	#__system___float_cmp
1f31c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f320     00 26 26 36 |  if_ae	not	local01, #0
1f324     A7 26 62 FC | 	wrlong	local01, fp
1f328     D0 03 90 FD | 	jmp	#LR__2493
1f32c                 | LR__2481
1f32c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1f32c     08 4E 05 F1 | 	add	fp, #8
1f330     A7 26 02 FB | 	rdlong	local01, fp
1f334     08 4E 85 F1 | 	sub	fp, #8
1f338     1E 26 0E F2 | 	cmp	local01, #30 wz
1f33c     14 4E 05 A1 |  if_e	add	fp, #20
1f340     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f344     14 4E 85 A1 |  if_e	sub	fp, #20
1f348     16 2B 02 A6 |  if_e	mov	local03, local04
1f34c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f350     48 00 90 5D |  if_ne	jmp	#LR__2482
1f354     00 26 06 F6 | 	mov	local01, #0
1f358     A7 28 02 FB | 	rdlong	local02, fp
1f35c     0C 4E 05 F1 | 	add	fp, #12
1f360     A7 12 02 FB | 	rdlong	arg01, fp
1f364     0C 4E 85 F1 | 	sub	fp, #12
1f368     09 13 52 F6 | 	abs	arg01, arg01 wc
1f36c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f370     00 2E 06 36 |  if_ae	mov	local05, #0
1f374     5C B2 B0 FD | 	call	#__system___float_fromuns
1f378     17 FB 61 F5 | 	xor	result1, local05
1f37c     FD 14 02 F6 | 	mov	arg02, result1
1f380     14 13 02 F6 | 	mov	arg01, local02
1f384     01 16 66 F6 | 	neg	arg03, #1
1f388     80 BA B0 FD | 	call	#__system___float_cmp
1f38c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f390     00 26 26 36 |  if_ae	not	local01, #0
1f394     A7 26 62 FC | 	wrlong	local01, fp
1f398     60 03 90 FD | 	jmp	#LR__2493
1f39c                 | LR__2482
1f39c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1f39c     08 4E 05 F1 | 	add	fp, #8
1f3a0     A7 26 02 FB | 	rdlong	local01, fp
1f3a4     08 4E 85 F1 | 	sub	fp, #8
1f3a8     1E 26 0E F2 | 	cmp	local01, #30 wz
1f3ac     14 4E 05 A1 |  if_e	add	fp, #20
1f3b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f3b4     14 4E 85 A1 |  if_e	sub	fp, #20
1f3b8     16 2B 02 A6 |  if_e	mov	local03, local04
1f3bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f3c0     38 00 90 5D |  if_ne	jmp	#LR__2483
1f3c4     00 26 06 F6 | 	mov	local01, #0
1f3c8     A7 28 02 FB | 	rdlong	local02, fp
1f3cc     0C 4E 05 F1 | 	add	fp, #12
1f3d0     A7 12 02 FB | 	rdlong	arg01, fp
1f3d4     0C 4E 85 F1 | 	sub	fp, #12
1f3d8     F8 B1 B0 FD | 	call	#__system___float_fromuns
1f3dc     FD 14 02 F6 | 	mov	arg02, result1
1f3e0     14 13 02 F6 | 	mov	arg01, local02
1f3e4     01 16 66 F6 | 	neg	arg03, #1
1f3e8     20 BA B0 FD | 	call	#__system___float_cmp
1f3ec     00 FA 55 F2 | 	cmps	result1, #0 wc
1f3f0     00 26 26 36 |  if_ae	not	local01, #0
1f3f4     A7 26 62 FC | 	wrlong	local01, fp
1f3f8     00 03 90 FD | 	jmp	#LR__2493
1f3fc                 | LR__2483
1f3fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1f3fc     08 4E 05 F1 | 	add	fp, #8
1f400     A7 26 02 FB | 	rdlong	local01, fp
1f404     08 4E 85 F1 | 	sub	fp, #8
1f408     1C 26 0E F2 | 	cmp	local01, #28 wz
1f40c     14 4E 05 A1 |  if_e	add	fp, #20
1f410     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f414     14 4E 85 A1 |  if_e	sub	fp, #20
1f418     16 2B 02 A6 |  if_e	mov	local03, local04
1f41c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f420     44 00 90 5D |  if_ne	jmp	#LR__2484
1f424     00 26 06 F6 | 	mov	local01, #0
1f428     A7 12 02 FB | 	rdlong	arg01, fp
1f42c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f430     1F 2E C6 C9 |  if_b	decod	local05, #31
1f434     00 2E 06 36 |  if_ae	mov	local05, #0
1f438     98 B1 B0 FD | 	call	#__system___float_fromuns
1f43c     17 FB 61 F5 | 	xor	result1, local05
1f440     FD 12 02 F6 | 	mov	arg01, result1
1f444     0C 4E 05 F1 | 	add	fp, #12
1f448     A7 14 02 FB | 	rdlong	arg02, fp
1f44c     0C 4E 85 F1 | 	sub	fp, #12
1f450     01 16 66 F6 | 	neg	arg03, #1
1f454     B4 B9 B0 FD | 	call	#__system___float_cmp
1f458     00 FA 55 F2 | 	cmps	result1, #0 wc
1f45c     00 26 26 36 |  if_ae	not	local01, #0
1f460     A7 26 62 FC | 	wrlong	local01, fp
1f464     94 02 90 FD | 	jmp	#LR__2493
1f468                 | LR__2484
1f468                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1f468     08 4E 05 F1 | 	add	fp, #8
1f46c     A7 26 02 FB | 	rdlong	local01, fp
1f470     08 4E 85 F1 | 	sub	fp, #8
1f474     1C 26 0E F2 | 	cmp	local01, #28 wz
1f478     14 4E 05 A1 |  if_e	add	fp, #20
1f47c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f480     14 4E 85 A1 |  if_e	sub	fp, #20
1f484     16 2B 02 A6 |  if_e	mov	local03, local04
1f488     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f48c     24 00 90 5D |  if_ne	jmp	#LR__2485
1f490     00 26 06 F6 | 	mov	local01, #0
1f494     A7 28 02 FB | 	rdlong	local02, fp
1f498     0C 4E 05 F1 | 	add	fp, #12
1f49c     A7 2A 02 FB | 	rdlong	local03, fp
1f4a0     0C 4E 85 F1 | 	sub	fp, #12
1f4a4     15 29 52 F2 | 	cmps	local02, local03 wc
1f4a8     01 26 66 36 |  if_ae	neg	local01, #1
1f4ac     A7 26 62 FC | 	wrlong	local01, fp
1f4b0     48 02 90 FD | 	jmp	#LR__2493
1f4b4                 | LR__2485
1f4b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1f4b4     08 4E 05 F1 | 	add	fp, #8
1f4b8     A7 26 02 FB | 	rdlong	local01, fp
1f4bc     08 4E 85 F1 | 	sub	fp, #8
1f4c0     1C 26 0E F2 | 	cmp	local01, #28 wz
1f4c4     14 4E 05 A1 |  if_e	add	fp, #20
1f4c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f4cc     14 4E 85 A1 |  if_e	sub	fp, #20
1f4d0     16 2B 02 A6 |  if_e	mov	local03, local04
1f4d4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f4d8     24 00 90 5D |  if_ne	jmp	#LR__2486
1f4dc     00 26 06 F6 | 	mov	local01, #0
1f4e0     A7 28 02 FB | 	rdlong	local02, fp
1f4e4     0C 4E 05 F1 | 	add	fp, #12
1f4e8     A7 2A 02 FB | 	rdlong	local03, fp
1f4ec     0C 4E 85 F1 | 	sub	fp, #12
1f4f0     15 29 52 F2 | 	cmps	local02, local03 wc
1f4f4     01 26 66 36 |  if_ae	neg	local01, #1
1f4f8     A7 26 62 FC | 	wrlong	local01, fp
1f4fc     FC 01 90 FD | 	jmp	#LR__2493
1f500                 | LR__2486
1f500                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1f500     08 4E 05 F1 | 	add	fp, #8
1f504     A7 26 02 FB | 	rdlong	local01, fp
1f508     08 4E 85 F1 | 	sub	fp, #8
1f50c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f510     14 4E 05 A1 |  if_e	add	fp, #20
1f514     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f518     14 4E 85 A1 |  if_e	sub	fp, #20
1f51c     16 2B 02 A6 |  if_e	mov	local03, local04
1f520     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f524     34 00 90 5D |  if_ne	jmp	#LR__2487
1f528     00 26 06 F6 | 	mov	local01, #0
1f52c     A7 12 02 FB | 	rdlong	arg01, fp
1f530     A0 B0 B0 FD | 	call	#__system___float_fromuns
1f534     FD 12 02 F6 | 	mov	arg01, result1
1f538     0C 4E 05 F1 | 	add	fp, #12
1f53c     A7 14 02 FB | 	rdlong	arg02, fp
1f540     0C 4E 85 F1 | 	sub	fp, #12
1f544     01 16 66 F6 | 	neg	arg03, #1
1f548     C0 B8 B0 FD | 	call	#__system___float_cmp
1f54c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f550     00 26 26 36 |  if_ae	not	local01, #0
1f554     A7 26 62 FC | 	wrlong	local01, fp
1f558     A0 01 90 FD | 	jmp	#LR__2493
1f55c                 | LR__2487
1f55c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1f55c     08 4E 05 F1 | 	add	fp, #8
1f560     A7 26 02 FB | 	rdlong	local01, fp
1f564     08 4E 85 F1 | 	sub	fp, #8
1f568     1D 26 0E F2 | 	cmp	local01, #29 wz
1f56c     14 4E 05 A1 |  if_e	add	fp, #20
1f570     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f574     14 4E 85 A1 |  if_e	sub	fp, #20
1f578     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1f57c     24 00 90 5D |  if_ne	jmp	#LR__2488
1f580     00 26 06 F6 | 	mov	local01, #0
1f584     A7 28 02 FB | 	rdlong	local02, fp
1f588     0C 4E 05 F1 | 	add	fp, #12
1f58c     A7 2A 02 FB | 	rdlong	local03, fp
1f590     0C 4E 85 F1 | 	sub	fp, #12
1f594     15 29 52 F2 | 	cmps	local02, local03 wc
1f598     01 26 66 36 |  if_ae	neg	local01, #1
1f59c     A7 26 62 FC | 	wrlong	local01, fp
1f5a0     58 01 90 FD | 	jmp	#LR__2493
1f5a4                 | LR__2488
1f5a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1f5a4     08 4E 05 F1 | 	add	fp, #8
1f5a8     A7 26 02 FB | 	rdlong	local01, fp
1f5ac     08 4E 85 F1 | 	sub	fp, #8
1f5b0     1D 26 0E F2 | 	cmp	local01, #29 wz
1f5b4     14 4E 05 A1 |  if_e	add	fp, #20
1f5b8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f5bc     14 4E 85 A1 |  if_e	sub	fp, #20
1f5c0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f5c4     24 00 90 5D |  if_ne	jmp	#LR__2489
1f5c8     00 26 06 F6 | 	mov	local01, #0
1f5cc     A7 28 02 FB | 	rdlong	local02, fp
1f5d0     0C 4E 05 F1 | 	add	fp, #12
1f5d4     A7 2A 02 FB | 	rdlong	local03, fp
1f5d8     0C 4E 85 F1 | 	sub	fp, #12
1f5dc     15 29 12 F2 | 	cmp	local02, local03 wc
1f5e0     01 26 66 36 |  if_ae	neg	local01, #1
1f5e4     A7 26 62 FC | 	wrlong	local01, fp
1f5e8     10 01 90 FD | 	jmp	#LR__2493
1f5ec                 | LR__2489
1f5ec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1f5ec     08 4E 05 F1 | 	add	fp, #8
1f5f0     A7 26 02 FB | 	rdlong	local01, fp
1f5f4     08 4E 85 F1 | 	sub	fp, #8
1f5f8     2B 26 0E F2 | 	cmp	local01, #43 wz
1f5fc     14 4E 05 A1 |  if_e	add	fp, #20
1f600     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f604     14 4E 85 A1 |  if_e	sub	fp, #20
1f608     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f60c     30 00 90 5D |  if_ne	jmp	#LR__2490
1f610     00 26 06 F6 | 	mov	local01, #0
1f614     A7 12 02 FB | 	rdlong	arg01, fp
1f618     7C E3 BE FD | 	call	#_convertstring
1f61c     FD 12 02 F6 | 	mov	arg01, result1
1f620     0C 4E 05 F1 | 	add	fp, #12
1f624     A7 14 02 FB | 	rdlong	arg02, fp
1f628     0C 4E 85 F1 | 	sub	fp, #12
1f62c     54 85 B0 FD | 	call	#__system___string_cmp
1f630     00 FA 55 F2 | 	cmps	result1, #0 wc
1f634     00 26 26 36 |  if_ae	not	local01, #0
1f638     A7 26 62 FC | 	wrlong	local01, fp
1f63c     BC 00 90 FD | 	jmp	#LR__2493
1f640                 | LR__2490
1f640                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1f640     08 4E 05 F1 | 	add	fp, #8
1f644     A7 26 02 FB | 	rdlong	local01, fp
1f648     08 4E 85 F1 | 	sub	fp, #8
1f64c     1F 26 0E F2 | 	cmp	local01, #31 wz
1f650     14 4E 05 A1 |  if_e	add	fp, #20
1f654     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f658     14 4E 85 A1 |  if_e	sub	fp, #20
1f65c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f660     34 00 90 5D |  if_ne	jmp	#LR__2491
1f664     00 26 06 F6 | 	mov	local01, #0
1f668     A7 28 02 FB | 	rdlong	local02, fp
1f66c     0C 4E 05 F1 | 	add	fp, #12
1f670     A7 12 02 FB | 	rdlong	arg01, fp
1f674     0C 4E 85 F1 | 	sub	fp, #12
1f678     1C E3 BE FD | 	call	#_convertstring
1f67c     FD 14 02 F6 | 	mov	arg02, result1
1f680     14 13 02 F6 | 	mov	arg01, local02
1f684     FC 84 B0 FD | 	call	#__system___string_cmp
1f688     00 FA 55 F2 | 	cmps	result1, #0 wc
1f68c     00 26 26 36 |  if_ae	not	local01, #0
1f690     A7 26 62 FC | 	wrlong	local01, fp
1f694     64 00 90 FD | 	jmp	#LR__2493
1f698                 | LR__2491
1f698                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1f698     08 4E 05 F1 | 	add	fp, #8
1f69c     A7 26 02 FB | 	rdlong	local01, fp
1f6a0     08 4E 85 F1 | 	sub	fp, #8
1f6a4     2B 26 0E F2 | 	cmp	local01, #43 wz
1f6a8     14 4E 05 A1 |  if_e	add	fp, #20
1f6ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f6b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f6b4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f6b8     3C 00 90 5D |  if_ne	jmp	#LR__2492
1f6bc     00 26 06 F6 | 	mov	local01, #0
1f6c0     A7 12 02 FB | 	rdlong	arg01, fp
1f6c4     D0 E2 BE FD | 	call	#_convertstring
1f6c8     FD 28 02 F6 | 	mov	local02, result1
1f6cc     0C 4E 05 F1 | 	add	fp, #12
1f6d0     A7 12 02 FB | 	rdlong	arg01, fp
1f6d4     0C 4E 85 F1 | 	sub	fp, #12
1f6d8     BC E2 BE FD | 	call	#_convertstring
1f6dc     FD 14 02 F6 | 	mov	arg02, result1
1f6e0     14 13 02 F6 | 	mov	arg01, local02
1f6e4     9C 84 B0 FD | 	call	#__system___string_cmp
1f6e8     00 FA 55 F2 | 	cmps	result1, #0 wc
1f6ec     00 26 26 36 |  if_ae	not	local01, #0
1f6f0     A7 26 62 FC | 	wrlong	local01, fp
1f6f4     04 00 90 FD | 	jmp	#LR__2493
1f6f8                 | LR__2492
1f6f8     A7 00 68 FC | 	wrlong	#0, fp
1f6fc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f6fc                 | LR__2493
1f6fc     08 4E 05 F1 | 	add	fp, #8
1f700     A7 38 68 FC | 	wrlong	#28, fp
1f704     08 4E 85 F1 | 	sub	fp, #8
1f708                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f708     A7 26 0A FB | 	rdlong	local01, fp wz
1f70c     A7 02 68 5C |  if_ne	wrlong	#1, fp
1f710     A7 12 02 F6 | 	mov	arg01, fp
1f714     A0 E1 BE FD | 	call	#_push
1f718     A7 F0 03 F6 | 	mov	ptra, fp
1f71c     B2 00 A0 FD | 	call	#popregs_
1f720                 | _do_ge_ret
1f720     2D 00 64 FD | 	ret
1f724                 | 
1f724                 | ' 
1f724                 | ' '--------------------------------- greater than (>)
1f724                 | ' 
1f724                 | ' sub do_gt
1f724                 | _do_gt
1f724     05 4A 05 F6 | 	mov	COUNT_, #5
1f728     A8 00 A0 FD | 	call	#pushregs_
1f72c     18 F0 07 F1 | 	add	ptra, #24
1f730     EC E0 BE FD | 	call	#_pop
1f734     FD 26 02 F6 | 	mov	local01, result1
1f738     FE 28 02 F6 | 	mov	local02, result2
1f73c     FF 2A 02 F6 | 	mov	local03, result3
1f740     0C 4E 05 F1 | 	add	fp, #12
1f744     A7 26 62 FC | 	wrlong	local01, fp
1f748     04 4E 05 F1 | 	add	fp, #4
1f74c     A7 28 62 FC | 	wrlong	local02, fp
1f750     04 4E 05 F1 | 	add	fp, #4
1f754     A7 2A 62 FC | 	wrlong	local03, fp
1f758     14 4E 85 F1 | 	sub	fp, #20
1f75c     C0 E0 BE FD | 	call	#_pop
1f760     FF 2A 02 F6 | 	mov	local03, result3
1f764     A7 FA 61 FC | 	wrlong	result1, fp
1f768     04 4E 05 F1 | 	add	fp, #4
1f76c     A7 FC 61 FC | 	wrlong	result2, fp
1f770     04 4E 05 F1 | 	add	fp, #4
1f774     A7 2A 62 FC | 	wrlong	local03, fp
1f778                 | ' 
1f778                 | ' t2=pop()
1f778                 | ' t1=pop()
1f778                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1f778     08 4E 85 F1 | 	sub	fp, #8
1f77c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f780     14 4E 05 A1 |  if_e	add	fp, #20
1f784     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f788     14 4E 85 A1 |  if_e	sub	fp, #20
1f78c     16 2B 02 A6 |  if_e	mov	local03, local04
1f790     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f794     28 00 90 5D |  if_ne	jmp	#LR__2500
1f798     00 26 06 F6 | 	mov	local01, #0
1f79c     A7 12 02 FB | 	rdlong	arg01, fp
1f7a0     0C 4E 05 F1 | 	add	fp, #12
1f7a4     A7 14 02 FB | 	rdlong	arg02, fp
1f7a8     0C 4E 85 F1 | 	sub	fp, #12
1f7ac     D4 83 B0 FD | 	call	#__system___string_cmp
1f7b0     01 FA 55 F2 | 	cmps	result1, #1 wc
1f7b4     00 26 26 36 |  if_ae	not	local01, #0
1f7b8     A7 26 62 FC | 	wrlong	local01, fp
1f7bc     20 04 90 FD | 	jmp	#LR__2513
1f7c0                 | LR__2500
1f7c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1f7c0     08 4E 05 F1 | 	add	fp, #8
1f7c4     A7 26 02 FB | 	rdlong	local01, fp
1f7c8     08 4E 85 F1 | 	sub	fp, #8
1f7cc     1E 26 0E F2 | 	cmp	local01, #30 wz
1f7d0     14 4E 05 A1 |  if_e	add	fp, #20
1f7d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f7d8     14 4E 85 A1 |  if_e	sub	fp, #20
1f7dc     16 2B 02 A6 |  if_e	mov	local03, local04
1f7e0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f7e4     2C 00 90 5D |  if_ne	jmp	#LR__2501
1f7e8     00 26 06 F6 | 	mov	local01, #0
1f7ec     A7 12 02 FB | 	rdlong	arg01, fp
1f7f0     0C 4E 05 F1 | 	add	fp, #12
1f7f4     A7 14 02 FB | 	rdlong	arg02, fp
1f7f8     0C 4E 85 F1 | 	sub	fp, #12
1f7fc     01 16 66 F6 | 	neg	arg03, #1
1f800     08 B6 B0 FD | 	call	#__system___float_cmp
1f804     01 FA 55 F2 | 	cmps	result1, #1 wc
1f808     00 26 26 36 |  if_ae	not	local01, #0
1f80c     A7 26 62 FC | 	wrlong	local01, fp
1f810     CC 03 90 FD | 	jmp	#LR__2513
1f814                 | LR__2501
1f814                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1f814     08 4E 05 F1 | 	add	fp, #8
1f818     A7 26 02 FB | 	rdlong	local01, fp
1f81c     08 4E 85 F1 | 	sub	fp, #8
1f820     1E 26 0E F2 | 	cmp	local01, #30 wz
1f824     14 4E 05 A1 |  if_e	add	fp, #20
1f828     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f82c     14 4E 85 A1 |  if_e	sub	fp, #20
1f830     16 2B 02 A6 |  if_e	mov	local03, local04
1f834     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f838     48 00 90 5D |  if_ne	jmp	#LR__2502
1f83c     00 26 06 F6 | 	mov	local01, #0
1f840     A7 28 02 FB | 	rdlong	local02, fp
1f844     0C 4E 05 F1 | 	add	fp, #12
1f848     A7 12 02 FB | 	rdlong	arg01, fp
1f84c     0C 4E 85 F1 | 	sub	fp, #12
1f850     09 13 52 F6 | 	abs	arg01, arg01 wc
1f854     1F 2E C6 C9 |  if_b	decod	local05, #31
1f858     00 2E 06 36 |  if_ae	mov	local05, #0
1f85c     74 AD B0 FD | 	call	#__system___float_fromuns
1f860     17 FB 61 F5 | 	xor	result1, local05
1f864     FD 14 02 F6 | 	mov	arg02, result1
1f868     14 13 02 F6 | 	mov	arg01, local02
1f86c     01 16 66 F6 | 	neg	arg03, #1
1f870     98 B5 B0 FD | 	call	#__system___float_cmp
1f874     01 FA 55 F2 | 	cmps	result1, #1 wc
1f878     00 26 26 36 |  if_ae	not	local01, #0
1f87c     A7 26 62 FC | 	wrlong	local01, fp
1f880     5C 03 90 FD | 	jmp	#LR__2513
1f884                 | LR__2502
1f884                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1f884     08 4E 05 F1 | 	add	fp, #8
1f888     A7 26 02 FB | 	rdlong	local01, fp
1f88c     08 4E 85 F1 | 	sub	fp, #8
1f890     1E 26 0E F2 | 	cmp	local01, #30 wz
1f894     14 4E 05 A1 |  if_e	add	fp, #20
1f898     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f89c     14 4E 85 A1 |  if_e	sub	fp, #20
1f8a0     16 2B 02 A6 |  if_e	mov	local03, local04
1f8a4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f8a8     38 00 90 5D |  if_ne	jmp	#LR__2503
1f8ac     00 26 06 F6 | 	mov	local01, #0
1f8b0     A7 28 02 FB | 	rdlong	local02, fp
1f8b4     0C 4E 05 F1 | 	add	fp, #12
1f8b8     A7 12 02 FB | 	rdlong	arg01, fp
1f8bc     0C 4E 85 F1 | 	sub	fp, #12
1f8c0     10 AD B0 FD | 	call	#__system___float_fromuns
1f8c4     FD 14 02 F6 | 	mov	arg02, result1
1f8c8     14 13 02 F6 | 	mov	arg01, local02
1f8cc     01 16 66 F6 | 	neg	arg03, #1
1f8d0     38 B5 B0 FD | 	call	#__system___float_cmp
1f8d4     01 FA 55 F2 | 	cmps	result1, #1 wc
1f8d8     00 26 26 36 |  if_ae	not	local01, #0
1f8dc     A7 26 62 FC | 	wrlong	local01, fp
1f8e0     FC 02 90 FD | 	jmp	#LR__2513
1f8e4                 | LR__2503
1f8e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1f8e4     08 4E 05 F1 | 	add	fp, #8
1f8e8     A7 26 02 FB | 	rdlong	local01, fp
1f8ec     08 4E 85 F1 | 	sub	fp, #8
1f8f0     1C 26 0E F2 | 	cmp	local01, #28 wz
1f8f4     14 4E 05 A1 |  if_e	add	fp, #20
1f8f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f8fc     14 4E 85 A1 |  if_e	sub	fp, #20
1f900     16 2B 02 A6 |  if_e	mov	local03, local04
1f904     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f908     44 00 90 5D |  if_ne	jmp	#LR__2504
1f90c     00 26 06 F6 | 	mov	local01, #0
1f910     A7 12 02 FB | 	rdlong	arg01, fp
1f914     09 13 52 F6 | 	abs	arg01, arg01 wc
1f918     1F 2E C6 C9 |  if_b	decod	local05, #31
1f91c     00 2E 06 36 |  if_ae	mov	local05, #0
1f920     B0 AC B0 FD | 	call	#__system___float_fromuns
1f924     17 FB 61 F5 | 	xor	result1, local05
1f928     FD 12 02 F6 | 	mov	arg01, result1
1f92c     0C 4E 05 F1 | 	add	fp, #12
1f930     A7 14 02 FB | 	rdlong	arg02, fp
1f934     0C 4E 85 F1 | 	sub	fp, #12
1f938     01 16 66 F6 | 	neg	arg03, #1
1f93c     CC B4 B0 FD | 	call	#__system___float_cmp
1f940     01 FA 55 F2 | 	cmps	result1, #1 wc
1f944     00 26 26 36 |  if_ae	not	local01, #0
1f948     A7 26 62 FC | 	wrlong	local01, fp
1f94c     90 02 90 FD | 	jmp	#LR__2513
1f950                 | LR__2504
1f950                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1f950     08 4E 05 F1 | 	add	fp, #8
1f954     A7 26 02 FB | 	rdlong	local01, fp
1f958     08 4E 85 F1 | 	sub	fp, #8
1f95c     1C 26 0E F2 | 	cmp	local01, #28 wz
1f960     14 4E 05 A1 |  if_e	add	fp, #20
1f964     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f968     14 4E 85 A1 |  if_e	sub	fp, #20
1f96c     16 2B 02 A6 |  if_e	mov	local03, local04
1f970     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f974     24 00 90 5D |  if_ne	jmp	#LR__2505
1f978     00 26 06 F6 | 	mov	local01, #0
1f97c     A7 28 02 FB | 	rdlong	local02, fp
1f980     0C 4E 05 F1 | 	add	fp, #12
1f984     A7 2A 02 FB | 	rdlong	local03, fp
1f988     0C 4E 85 F1 | 	sub	fp, #12
1f98c     15 29 5A F2 | 	cmps	local02, local03 wcz
1f990     01 26 66 16 |  if_a	neg	local01, #1
1f994     A7 26 62 FC | 	wrlong	local01, fp
1f998     44 02 90 FD | 	jmp	#LR__2513
1f99c                 | LR__2505
1f99c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1f99c     08 4E 05 F1 | 	add	fp, #8
1f9a0     A7 26 02 FB | 	rdlong	local01, fp
1f9a4     08 4E 85 F1 | 	sub	fp, #8
1f9a8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f9ac     14 4E 05 A1 |  if_e	add	fp, #20
1f9b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f9b4     14 4E 85 A1 |  if_e	sub	fp, #20
1f9b8     16 2B 02 A6 |  if_e	mov	local03, local04
1f9bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f9c0     24 00 90 5D |  if_ne	jmp	#LR__2506
1f9c4     00 26 06 F6 | 	mov	local01, #0
1f9c8     A7 28 02 FB | 	rdlong	local02, fp
1f9cc     0C 4E 05 F1 | 	add	fp, #12
1f9d0     A7 2A 02 FB | 	rdlong	local03, fp
1f9d4     0C 4E 85 F1 | 	sub	fp, #12
1f9d8     15 29 5A F2 | 	cmps	local02, local03 wcz
1f9dc     01 26 66 16 |  if_a	neg	local01, #1
1f9e0     A7 26 62 FC | 	wrlong	local01, fp
1f9e4     F8 01 90 FD | 	jmp	#LR__2513
1f9e8                 | LR__2506
1f9e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1f9e8     08 4E 05 F1 | 	add	fp, #8
1f9ec     A7 26 02 FB | 	rdlong	local01, fp
1f9f0     08 4E 85 F1 | 	sub	fp, #8
1f9f4     1D 26 0E F2 | 	cmp	local01, #29 wz
1f9f8     14 4E 05 A1 |  if_e	add	fp, #20
1f9fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fa00     14 4E 85 A1 |  if_e	sub	fp, #20
1fa04     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1fa08     34 00 90 5D |  if_ne	jmp	#LR__2507
1fa0c     00 26 06 F6 | 	mov	local01, #0
1fa10     A7 12 02 FB | 	rdlong	arg01, fp
1fa14     BC AB B0 FD | 	call	#__system___float_fromuns
1fa18     FD 12 02 F6 | 	mov	arg01, result1
1fa1c     0C 4E 05 F1 | 	add	fp, #12
1fa20     A7 14 02 FB | 	rdlong	arg02, fp
1fa24     0C 4E 85 F1 | 	sub	fp, #12
1fa28     01 16 66 F6 | 	neg	arg03, #1
1fa2c     DC B3 B0 FD | 	call	#__system___float_cmp
1fa30     01 FA 55 F2 | 	cmps	result1, #1 wc
1fa34     00 26 26 36 |  if_ae	not	local01, #0
1fa38     A7 26 62 FC | 	wrlong	local01, fp
1fa3c     A0 01 90 FD | 	jmp	#LR__2513
1fa40                 | LR__2507
1fa40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1fa40     08 4E 05 F1 | 	add	fp, #8
1fa44     A7 26 02 FB | 	rdlong	local01, fp
1fa48     08 4E 85 F1 | 	sub	fp, #8
1fa4c     1D 26 0E F2 | 	cmp	local01, #29 wz
1fa50     14 4E 05 A1 |  if_e	add	fp, #20
1fa54     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa58     14 4E 85 A1 |  if_e	sub	fp, #20
1fa5c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fa60     24 00 90 5D |  if_ne	jmp	#LR__2508
1fa64     00 26 06 F6 | 	mov	local01, #0
1fa68     A7 28 02 FB | 	rdlong	local02, fp
1fa6c     0C 4E 05 F1 | 	add	fp, #12
1fa70     A7 2A 02 FB | 	rdlong	local03, fp
1fa74     0C 4E 85 F1 | 	sub	fp, #12
1fa78     15 29 5A F2 | 	cmps	local02, local03 wcz
1fa7c     01 26 66 16 |  if_a	neg	local01, #1
1fa80     A7 26 62 FC | 	wrlong	local01, fp
1fa84     58 01 90 FD | 	jmp	#LR__2513
1fa88                 | LR__2508
1fa88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1fa88     08 4E 05 F1 | 	add	fp, #8
1fa8c     A7 26 02 FB | 	rdlong	local01, fp
1fa90     08 4E 85 F1 | 	sub	fp, #8
1fa94     1D 26 0E F2 | 	cmp	local01, #29 wz
1fa98     14 4E 05 A1 |  if_e	add	fp, #20
1fa9c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1faa0     14 4E 85 A1 |  if_e	sub	fp, #20
1faa4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1faa8     24 00 90 5D |  if_ne	jmp	#LR__2509
1faac     00 26 06 F6 | 	mov	local01, #0
1fab0     A7 28 02 FB | 	rdlong	local02, fp
1fab4     0C 4E 05 F1 | 	add	fp, #12
1fab8     A7 2A 02 FB | 	rdlong	local03, fp
1fabc     0C 4E 85 F1 | 	sub	fp, #12
1fac0     15 29 1A F2 | 	cmp	local02, local03 wcz
1fac4     01 26 66 16 |  if_a	neg	local01, #1
1fac8     A7 26 62 FC | 	wrlong	local01, fp
1facc     10 01 90 FD | 	jmp	#LR__2513
1fad0                 | LR__2509
1fad0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1fad0     08 4E 05 F1 | 	add	fp, #8
1fad4     A7 26 02 FB | 	rdlong	local01, fp
1fad8     08 4E 85 F1 | 	sub	fp, #8
1fadc     2B 26 0E F2 | 	cmp	local01, #43 wz
1fae0     14 4E 05 A1 |  if_e	add	fp, #20
1fae4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fae8     14 4E 85 A1 |  if_e	sub	fp, #20
1faec     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1faf0     30 00 90 5D |  if_ne	jmp	#LR__2510
1faf4     00 26 06 F6 | 	mov	local01, #0
1faf8     A7 12 02 FB | 	rdlong	arg01, fp
1fafc     98 DE BE FD | 	call	#_convertstring
1fb00     FD 12 02 F6 | 	mov	arg01, result1
1fb04     0C 4E 05 F1 | 	add	fp, #12
1fb08     A7 14 02 FB | 	rdlong	arg02, fp
1fb0c     0C 4E 85 F1 | 	sub	fp, #12
1fb10     70 80 B0 FD | 	call	#__system___string_cmp
1fb14     01 FA 55 F2 | 	cmps	result1, #1 wc
1fb18     00 26 26 36 |  if_ae	not	local01, #0
1fb1c     A7 26 62 FC | 	wrlong	local01, fp
1fb20     BC 00 90 FD | 	jmp	#LR__2513
1fb24                 | LR__2510
1fb24                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1fb24     08 4E 05 F1 | 	add	fp, #8
1fb28     A7 26 02 FB | 	rdlong	local01, fp
1fb2c     08 4E 85 F1 | 	sub	fp, #8
1fb30     1F 26 0E F2 | 	cmp	local01, #31 wz
1fb34     14 4E 05 A1 |  if_e	add	fp, #20
1fb38     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fb3c     14 4E 85 A1 |  if_e	sub	fp, #20
1fb40     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fb44     34 00 90 5D |  if_ne	jmp	#LR__2511
1fb48     00 26 06 F6 | 	mov	local01, #0
1fb4c     A7 28 02 FB | 	rdlong	local02, fp
1fb50     0C 4E 05 F1 | 	add	fp, #12
1fb54     A7 12 02 FB | 	rdlong	arg01, fp
1fb58     0C 4E 85 F1 | 	sub	fp, #12
1fb5c     38 DE BE FD | 	call	#_convertstring
1fb60     FD 14 02 F6 | 	mov	arg02, result1
1fb64     14 13 02 F6 | 	mov	arg01, local02
1fb68     18 80 B0 FD | 	call	#__system___string_cmp
1fb6c     01 FA 55 F2 | 	cmps	result1, #1 wc
1fb70     00 26 26 36 |  if_ae	not	local01, #0
1fb74     A7 26 62 FC | 	wrlong	local01, fp
1fb78     64 00 90 FD | 	jmp	#LR__2513
1fb7c                 | LR__2511
1fb7c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1fb7c     08 4E 05 F1 | 	add	fp, #8
1fb80     A7 26 02 FB | 	rdlong	local01, fp
1fb84     08 4E 85 F1 | 	sub	fp, #8
1fb88     2B 26 0E F2 | 	cmp	local01, #43 wz
1fb8c     14 4E 05 A1 |  if_e	add	fp, #20
1fb90     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fb94     14 4E 85 A1 |  if_e	sub	fp, #20
1fb98     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fb9c     3C 00 90 5D |  if_ne	jmp	#LR__2512
1fba0     00 26 06 F6 | 	mov	local01, #0
1fba4     A7 12 02 FB | 	rdlong	arg01, fp
1fba8     EC DD BE FD | 	call	#_convertstring
1fbac     FD 28 02 F6 | 	mov	local02, result1
1fbb0     0C 4E 05 F1 | 	add	fp, #12
1fbb4     A7 12 02 FB | 	rdlong	arg01, fp
1fbb8     0C 4E 85 F1 | 	sub	fp, #12
1fbbc     D8 DD BE FD | 	call	#_convertstring
1fbc0     FD 14 02 F6 | 	mov	arg02, result1
1fbc4     14 13 02 F6 | 	mov	arg01, local02
1fbc8     B8 7F B0 FD | 	call	#__system___string_cmp
1fbcc     01 FA 55 F2 | 	cmps	result1, #1 wc
1fbd0     00 26 26 36 |  if_ae	not	local01, #0
1fbd4     A7 26 62 FC | 	wrlong	local01, fp
1fbd8     04 00 90 FD | 	jmp	#LR__2513
1fbdc                 | LR__2512
1fbdc     A7 00 68 FC | 	wrlong	#0, fp
1fbe0                 | LR__2513
1fbe0     08 4E 05 F1 | 	add	fp, #8
1fbe4     A7 38 68 FC | 	wrlong	#28, fp
1fbe8     08 4E 85 F1 | 	sub	fp, #8
1fbec                 | ' t1.result.uresult=0
1fbec                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1fbec     A7 26 0A FB | 	rdlong	local01, fp wz
1fbf0     A7 02 68 5C |  if_ne	wrlong	#1, fp
1fbf4     A7 12 02 F6 | 	mov	arg01, fp
1fbf8     BC DC BE FD | 	call	#_push
1fbfc     A7 F0 03 F6 | 	mov	ptra, fp
1fc00     B2 00 A0 FD | 	call	#popregs_
1fc04                 | _do_gt_ret
1fc04     2D 00 64 FD | 	ret
1fc08                 | 
1fc08                 | ' 
1fc08                 | ' '--------------------------------- less or equal (<=)
1fc08                 | ' 
1fc08                 | ' sub do_le
1fc08                 | _do_le
1fc08     05 4A 05 F6 | 	mov	COUNT_, #5
1fc0c     A8 00 A0 FD | 	call	#pushregs_
1fc10     18 F0 07 F1 | 	add	ptra, #24
1fc14     08 DC BE FD | 	call	#_pop
1fc18     FD 26 02 F6 | 	mov	local01, result1
1fc1c     FE 28 02 F6 | 	mov	local02, result2
1fc20     FF 2A 02 F6 | 	mov	local03, result3
1fc24     0C 4E 05 F1 | 	add	fp, #12
1fc28     A7 26 62 FC | 	wrlong	local01, fp
1fc2c     04 4E 05 F1 | 	add	fp, #4
1fc30     A7 28 62 FC | 	wrlong	local02, fp
1fc34     04 4E 05 F1 | 	add	fp, #4
1fc38     A7 2A 62 FC | 	wrlong	local03, fp
1fc3c     14 4E 85 F1 | 	sub	fp, #20
1fc40     DC DB BE FD | 	call	#_pop
1fc44     FF 2A 02 F6 | 	mov	local03, result3
1fc48     A7 FA 61 FC | 	wrlong	result1, fp
1fc4c     04 4E 05 F1 | 	add	fp, #4
1fc50     A7 FC 61 FC | 	wrlong	result2, fp
1fc54     04 4E 05 F1 | 	add	fp, #4
1fc58     A7 2A 62 FC | 	wrlong	local03, fp
1fc5c                 | ' 
1fc5c                 | ' t2=pop()
1fc5c                 | ' t1=pop()
1fc5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1fc5c     08 4E 85 F1 | 	sub	fp, #8
1fc60     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fc64     14 4E 05 A1 |  if_e	add	fp, #20
1fc68     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc6c     14 4E 85 A1 |  if_e	sub	fp, #20
1fc70     16 2B 02 A6 |  if_e	mov	local03, local04
1fc74     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1fc78     28 00 90 5D |  if_ne	jmp	#LR__2520
1fc7c     00 26 06 F6 | 	mov	local01, #0
1fc80     A7 12 02 FB | 	rdlong	arg01, fp
1fc84     0C 4E 05 F1 | 	add	fp, #12
1fc88     A7 14 02 FB | 	rdlong	arg02, fp
1fc8c     0C 4E 85 F1 | 	sub	fp, #12
1fc90     F0 7E B0 FD | 	call	#__system___string_cmp
1fc94     01 FA 55 F2 | 	cmps	result1, #1 wc
1fc98     00 26 26 C6 |  if_b	not	local01, #0
1fc9c     A7 26 62 FC | 	wrlong	local01, fp
1fca0     20 04 90 FD | 	jmp	#LR__2533
1fca4                 | LR__2520
1fca4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1fca4     08 4E 05 F1 | 	add	fp, #8
1fca8     A7 26 02 FB | 	rdlong	local01, fp
1fcac     08 4E 85 F1 | 	sub	fp, #8
1fcb0     1E 26 0E F2 | 	cmp	local01, #30 wz
1fcb4     14 4E 05 A1 |  if_e	add	fp, #20
1fcb8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fcbc     14 4E 85 A1 |  if_e	sub	fp, #20
1fcc0     16 2B 02 A6 |  if_e	mov	local03, local04
1fcc4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fcc8     2C 00 90 5D |  if_ne	jmp	#LR__2521
1fccc     00 26 06 F6 | 	mov	local01, #0
1fcd0     A7 12 02 FB | 	rdlong	arg01, fp
1fcd4     0C 4E 05 F1 | 	add	fp, #12
1fcd8     A7 14 02 FB | 	rdlong	arg02, fp
1fcdc     0C 4E 85 F1 | 	sub	fp, #12
1fce0     01 16 06 F6 | 	mov	arg03, #1
1fce4     24 B1 B0 FD | 	call	#__system___float_cmp
1fce8     01 FA 55 F2 | 	cmps	result1, #1 wc
1fcec     00 26 26 C6 |  if_b	not	local01, #0
1fcf0     A7 26 62 FC | 	wrlong	local01, fp
1fcf4     CC 03 90 FD | 	jmp	#LR__2533
1fcf8                 | LR__2521
1fcf8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1fcf8     08 4E 05 F1 | 	add	fp, #8
1fcfc     A7 26 02 FB | 	rdlong	local01, fp
1fd00     08 4E 85 F1 | 	sub	fp, #8
1fd04     1E 26 0E F2 | 	cmp	local01, #30 wz
1fd08     14 4E 05 A1 |  if_e	add	fp, #20
1fd0c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd10     14 4E 85 A1 |  if_e	sub	fp, #20
1fd14     16 2B 02 A6 |  if_e	mov	local03, local04
1fd18     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fd1c     48 00 90 5D |  if_ne	jmp	#LR__2522
1fd20     00 26 06 F6 | 	mov	local01, #0
1fd24     A7 28 02 FB | 	rdlong	local02, fp
1fd28     0C 4E 05 F1 | 	add	fp, #12
1fd2c     A7 12 02 FB | 	rdlong	arg01, fp
1fd30     0C 4E 85 F1 | 	sub	fp, #12
1fd34     09 13 52 F6 | 	abs	arg01, arg01 wc
1fd38     1F 2E C6 C9 |  if_b	decod	local05, #31
1fd3c     00 2E 06 36 |  if_ae	mov	local05, #0
1fd40     90 A8 B0 FD | 	call	#__system___float_fromuns
1fd44     17 FB 61 F5 | 	xor	result1, local05
1fd48     FD 14 02 F6 | 	mov	arg02, result1
1fd4c     14 13 02 F6 | 	mov	arg01, local02
1fd50     01 16 06 F6 | 	mov	arg03, #1
1fd54     B4 B0 B0 FD | 	call	#__system___float_cmp
1fd58     01 FA 55 F2 | 	cmps	result1, #1 wc
1fd5c     00 26 26 C6 |  if_b	not	local01, #0
1fd60     A7 26 62 FC | 	wrlong	local01, fp
1fd64     5C 03 90 FD | 	jmp	#LR__2533
1fd68                 | LR__2522
1fd68                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1fd68     08 4E 05 F1 | 	add	fp, #8
1fd6c     A7 26 02 FB | 	rdlong	local01, fp
1fd70     08 4E 85 F1 | 	sub	fp, #8
1fd74     1E 26 0E F2 | 	cmp	local01, #30 wz
1fd78     14 4E 05 A1 |  if_e	add	fp, #20
1fd7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd80     14 4E 85 A1 |  if_e	sub	fp, #20
1fd84     16 2B 02 A6 |  if_e	mov	local03, local04
1fd88     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fd8c     38 00 90 5D |  if_ne	jmp	#LR__2523
1fd90     00 26 06 F6 | 	mov	local01, #0
1fd94     A7 28 02 FB | 	rdlong	local02, fp
1fd98     0C 4E 05 F1 | 	add	fp, #12
1fd9c     A7 12 02 FB | 	rdlong	arg01, fp
1fda0     0C 4E 85 F1 | 	sub	fp, #12
1fda4     2C A8 B0 FD | 	call	#__system___float_fromuns
1fda8     FD 14 02 F6 | 	mov	arg02, result1
1fdac     14 13 02 F6 | 	mov	arg01, local02
1fdb0     01 16 06 F6 | 	mov	arg03, #1
1fdb4     54 B0 B0 FD | 	call	#__system___float_cmp
1fdb8     01 FA 55 F2 | 	cmps	result1, #1 wc
1fdbc     00 26 26 C6 |  if_b	not	local01, #0
1fdc0     A7 26 62 FC | 	wrlong	local01, fp
1fdc4     FC 02 90 FD | 	jmp	#LR__2533
1fdc8                 | LR__2523
1fdc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1fdc8     08 4E 05 F1 | 	add	fp, #8
1fdcc     A7 26 02 FB | 	rdlong	local01, fp
1fdd0     08 4E 85 F1 | 	sub	fp, #8
1fdd4     1C 26 0E F2 | 	cmp	local01, #28 wz
1fdd8     14 4E 05 A1 |  if_e	add	fp, #20
1fddc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fde0     14 4E 85 A1 |  if_e	sub	fp, #20
1fde4     16 2B 02 A6 |  if_e	mov	local03, local04
1fde8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fdec     44 00 90 5D |  if_ne	jmp	#LR__2524
1fdf0     00 26 06 F6 | 	mov	local01, #0
1fdf4     A7 12 02 FB | 	rdlong	arg01, fp
1fdf8     09 13 52 F6 | 	abs	arg01, arg01 wc
1fdfc     1F 2E C6 C9 |  if_b	decod	local05, #31
1fe00     00 2E 06 36 |  if_ae	mov	local05, #0
1fe04     CC A7 B0 FD | 	call	#__system___float_fromuns
1fe08     17 FB 61 F5 | 	xor	result1, local05
1fe0c     FD 12 02 F6 | 	mov	arg01, result1
1fe10     0C 4E 05 F1 | 	add	fp, #12
1fe14     A7 14 02 FB | 	rdlong	arg02, fp
1fe18     0C 4E 85 F1 | 	sub	fp, #12
1fe1c     01 16 06 F6 | 	mov	arg03, #1
1fe20     E8 AF B0 FD | 	call	#__system___float_cmp
1fe24     01 FA 55 F2 | 	cmps	result1, #1 wc
1fe28     00 26 26 C6 |  if_b	not	local01, #0
1fe2c     A7 26 62 FC | 	wrlong	local01, fp
1fe30     90 02 90 FD | 	jmp	#LR__2533
1fe34                 | LR__2524
1fe34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1fe34     08 4E 05 F1 | 	add	fp, #8
1fe38     A7 26 02 FB | 	rdlong	local01, fp
1fe3c     08 4E 85 F1 | 	sub	fp, #8
1fe40     1C 26 0E F2 | 	cmp	local01, #28 wz
1fe44     14 4E 05 A1 |  if_e	add	fp, #20
1fe48     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fe4c     14 4E 85 A1 |  if_e	sub	fp, #20
1fe50     16 2B 02 A6 |  if_e	mov	local03, local04
1fe54     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fe58     24 00 90 5D |  if_ne	jmp	#LR__2525
1fe5c     00 26 06 F6 | 	mov	local01, #0
1fe60     A7 28 02 FB | 	rdlong	local02, fp
1fe64     0C 4E 05 F1 | 	add	fp, #12
1fe68     A7 2A 02 FB | 	rdlong	local03, fp
1fe6c     0C 4E 85 F1 | 	sub	fp, #12
1fe70     15 29 5A F2 | 	cmps	local02, local03 wcz
1fe74     01 26 66 E6 |  if_be	neg	local01, #1
1fe78     A7 26 62 FC | 	wrlong	local01, fp
1fe7c     44 02 90 FD | 	jmp	#LR__2533
1fe80                 | LR__2525
1fe80                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1fe80     08 4E 05 F1 | 	add	fp, #8
1fe84     A7 26 02 FB | 	rdlong	local01, fp
1fe88     08 4E 85 F1 | 	sub	fp, #8
1fe8c     1C 26 0E F2 | 	cmp	local01, #28 wz
1fe90     14 4E 05 A1 |  if_e	add	fp, #20
1fe94     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fe98     14 4E 85 A1 |  if_e	sub	fp, #20
1fe9c     16 2B 02 A6 |  if_e	mov	local03, local04
1fea0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fea4     24 00 90 5D |  if_ne	jmp	#LR__2526
1fea8     00 26 06 F6 | 	mov	local01, #0
1feac     A7 28 02 FB | 	rdlong	local02, fp
1feb0     0C 4E 05 F1 | 	add	fp, #12
1feb4     A7 2A 02 FB | 	rdlong	local03, fp
1feb8     0C 4E 85 F1 | 	sub	fp, #12
1febc     15 29 5A F2 | 	cmps	local02, local03 wcz
1fec0     01 26 66 E6 |  if_be	neg	local01, #1
1fec4     A7 26 62 FC | 	wrlong	local01, fp
1fec8     F8 01 90 FD | 	jmp	#LR__2533
1fecc                 | LR__2526
1fecc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1fecc     08 4E 05 F1 | 	add	fp, #8
1fed0     A7 26 02 FB | 	rdlong	local01, fp
1fed4     08 4E 85 F1 | 	sub	fp, #8
1fed8     1D 26 0E F2 | 	cmp	local01, #29 wz
1fedc     14 4E 05 A1 |  if_e	add	fp, #20
1fee0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fee4     14 4E 85 A1 |  if_e	sub	fp, #20
1fee8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1feec     34 00 90 5D |  if_ne	jmp	#LR__2527
1fef0     00 26 06 F6 | 	mov	local01, #0
1fef4     A7 12 02 FB | 	rdlong	arg01, fp
1fef8     D8 A6 B0 FD | 	call	#__system___float_fromuns
1fefc     FD 12 02 F6 | 	mov	arg01, result1
1ff00     0C 4E 05 F1 | 	add	fp, #12
1ff04     A7 14 02 FB | 	rdlong	arg02, fp
1ff08     0C 4E 85 F1 | 	sub	fp, #12
1ff0c     01 16 06 F6 | 	mov	arg03, #1
1ff10     F8 AE B0 FD | 	call	#__system___float_cmp
1ff14     01 FA 55 F2 | 	cmps	result1, #1 wc
1ff18     00 26 26 C6 |  if_b	not	local01, #0
1ff1c     A7 26 62 FC | 	wrlong	local01, fp
1ff20     A0 01 90 FD | 	jmp	#LR__2533
1ff24                 | LR__2527
1ff24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1ff24     08 4E 05 F1 | 	add	fp, #8
1ff28     A7 26 02 FB | 	rdlong	local01, fp
1ff2c     08 4E 85 F1 | 	sub	fp, #8
1ff30     1D 26 0E F2 | 	cmp	local01, #29 wz
1ff34     14 4E 05 A1 |  if_e	add	fp, #20
1ff38     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ff3c     14 4E 85 A1 |  if_e	sub	fp, #20
1ff40     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ff44     24 00 90 5D |  if_ne	jmp	#LR__2528
1ff48     00 26 06 F6 | 	mov	local01, #0
1ff4c     A7 28 02 FB | 	rdlong	local02, fp
1ff50     0C 4E 05 F1 | 	add	fp, #12
1ff54     A7 2A 02 FB | 	rdlong	local03, fp
1ff58     0C 4E 85 F1 | 	sub	fp, #12
1ff5c     15 29 5A F2 | 	cmps	local02, local03 wcz
1ff60     01 26 66 E6 |  if_be	neg	local01, #1
1ff64     A7 26 62 FC | 	wrlong	local01, fp
1ff68     58 01 90 FD | 	jmp	#LR__2533
1ff6c                 | LR__2528
1ff6c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1ff6c     08 4E 05 F1 | 	add	fp, #8
1ff70     A7 26 02 FB | 	rdlong	local01, fp
1ff74     08 4E 85 F1 | 	sub	fp, #8
1ff78     1D 26 0E F2 | 	cmp	local01, #29 wz
1ff7c     14 4E 05 A1 |  if_e	add	fp, #20
1ff80     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ff84     14 4E 85 A1 |  if_e	sub	fp, #20
1ff88     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ff8c     24 00 90 5D |  if_ne	jmp	#LR__2529
1ff90     00 26 06 F6 | 	mov	local01, #0
1ff94     A7 28 02 FB | 	rdlong	local02, fp
1ff98     0C 4E 05 F1 | 	add	fp, #12
1ff9c     A7 2A 02 FB | 	rdlong	local03, fp
1ffa0     0C 4E 85 F1 | 	sub	fp, #12
1ffa4     15 29 1A F2 | 	cmp	local02, local03 wcz
1ffa8     01 26 66 E6 |  if_be	neg	local01, #1
1ffac     A7 26 62 FC | 	wrlong	local01, fp
1ffb0     10 01 90 FD | 	jmp	#LR__2533
1ffb4                 | LR__2529
1ffb4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1ffb4     08 4E 05 F1 | 	add	fp, #8
1ffb8     A7 26 02 FB | 	rdlong	local01, fp
1ffbc     08 4E 85 F1 | 	sub	fp, #8
1ffc0     2B 26 0E F2 | 	cmp	local01, #43 wz
1ffc4     14 4E 05 A1 |  if_e	add	fp, #20
1ffc8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ffcc     14 4E 85 A1 |  if_e	sub	fp, #20
1ffd0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ffd4     30 00 90 5D |  if_ne	jmp	#LR__2530
1ffd8     00 26 06 F6 | 	mov	local01, #0
1ffdc     A7 12 02 FB | 	rdlong	arg01, fp
1ffe0     B4 D9 BE FD | 	call	#_convertstring
1ffe4     FD 12 02 F6 | 	mov	arg01, result1
1ffe8     0C 4E 05 F1 | 	add	fp, #12
1ffec     A7 14 02 FB | 	rdlong	arg02, fp
1fff0     0C 4E 85 F1 | 	sub	fp, #12
1fff4     8C 7B B0 FD | 	call	#__system___string_cmp
1fff8     01 FA 55 F2 | 	cmps	result1, #1 wc
1fffc     00 26 26 C6 |  if_b	not	local01, #0
20000     A7 26 62 FC | 	wrlong	local01, fp
20004     BC 00 90 FD | 	jmp	#LR__2533
20008                 | LR__2530
20008                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
20008     08 4E 05 F1 | 	add	fp, #8
2000c     A7 26 02 FB | 	rdlong	local01, fp
20010     08 4E 85 F1 | 	sub	fp, #8
20014     1F 26 0E F2 | 	cmp	local01, #31 wz
20018     14 4E 05 A1 |  if_e	add	fp, #20
2001c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20020     14 4E 85 A1 |  if_e	sub	fp, #20
20024     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20028     34 00 90 5D |  if_ne	jmp	#LR__2531
2002c     00 26 06 F6 | 	mov	local01, #0
20030     A7 28 02 FB | 	rdlong	local02, fp
20034     0C 4E 05 F1 | 	add	fp, #12
20038     A7 12 02 FB | 	rdlong	arg01, fp
2003c     0C 4E 85 F1 | 	sub	fp, #12
20040     54 D9 BE FD | 	call	#_convertstring
20044     FD 14 02 F6 | 	mov	arg02, result1
20048     14 13 02 F6 | 	mov	arg01, local02
2004c     34 7B B0 FD | 	call	#__system___string_cmp
20050     01 FA 55 F2 | 	cmps	result1, #1 wc
20054     00 26 26 C6 |  if_b	not	local01, #0
20058     A7 26 62 FC | 	wrlong	local01, fp
2005c     64 00 90 FD | 	jmp	#LR__2533
20060                 | LR__2531
20060                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
20060     08 4E 05 F1 | 	add	fp, #8
20064     A7 26 02 FB | 	rdlong	local01, fp
20068     08 4E 85 F1 | 	sub	fp, #8
2006c     2B 26 0E F2 | 	cmp	local01, #43 wz
20070     14 4E 05 A1 |  if_e	add	fp, #20
20074     A7 2A 02 AB |  if_e	rdlong	local03, fp
20078     14 4E 85 A1 |  if_e	sub	fp, #20
2007c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20080     3C 00 90 5D |  if_ne	jmp	#LR__2532
20084     00 26 06 F6 | 	mov	local01, #0
20088     A7 12 02 FB | 	rdlong	arg01, fp
2008c     08 D9 BE FD | 	call	#_convertstring
20090     FD 28 02 F6 | 	mov	local02, result1
20094     0C 4E 05 F1 | 	add	fp, #12
20098     A7 12 02 FB | 	rdlong	arg01, fp
2009c     0C 4E 85 F1 | 	sub	fp, #12
200a0     F4 D8 BE FD | 	call	#_convertstring
200a4     FD 14 02 F6 | 	mov	arg02, result1
200a8     14 13 02 F6 | 	mov	arg01, local02
200ac     D4 7A B0 FD | 	call	#__system___string_cmp
200b0     01 FA 55 F2 | 	cmps	result1, #1 wc
200b4     00 26 26 C6 |  if_b	not	local01, #0
200b8     A7 26 62 FC | 	wrlong	local01, fp
200bc     04 00 90 FD | 	jmp	#LR__2533
200c0                 | LR__2532
200c0     A7 00 68 FC | 	wrlong	#0, fp
200c4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
200c4                 | LR__2533
200c4     08 4E 05 F1 | 	add	fp, #8
200c8     A7 38 68 FC | 	wrlong	#28, fp
200cc     08 4E 85 F1 | 	sub	fp, #8
200d0     A7 12 02 F6 | 	mov	arg01, fp
200d4     E0 D7 BE FD | 	call	#_push
200d8     A7 F0 03 F6 | 	mov	ptra, fp
200dc     B2 00 A0 FD | 	call	#popregs_
200e0                 | _do_le_ret
200e0     2D 00 64 FD | 	ret
200e4                 | 
200e4                 | ' 
200e4                 | ' '--------------------------------- less than (<)
200e4                 | ' 
200e4                 | ' sub do_lt
200e4                 | _do_lt
200e4     05 4A 05 F6 | 	mov	COUNT_, #5
200e8     A8 00 A0 FD | 	call	#pushregs_
200ec     18 F0 07 F1 | 	add	ptra, #24
200f0     2C D7 BE FD | 	call	#_pop
200f4     FD 26 02 F6 | 	mov	local01, result1
200f8     FE 28 02 F6 | 	mov	local02, result2
200fc     FF 2A 02 F6 | 	mov	local03, result3
20100     0C 4E 05 F1 | 	add	fp, #12
20104     A7 26 62 FC | 	wrlong	local01, fp
20108     04 4E 05 F1 | 	add	fp, #4
2010c     A7 28 62 FC | 	wrlong	local02, fp
20110     04 4E 05 F1 | 	add	fp, #4
20114     A7 2A 62 FC | 	wrlong	local03, fp
20118     14 4E 85 F1 | 	sub	fp, #20
2011c     00 D7 BE FD | 	call	#_pop
20120     FF 2A 02 F6 | 	mov	local03, result3
20124     A7 FA 61 FC | 	wrlong	result1, fp
20128     04 4E 05 F1 | 	add	fp, #4
2012c     A7 FC 61 FC | 	wrlong	result2, fp
20130     04 4E 05 F1 | 	add	fp, #4
20134     A7 2A 62 FC | 	wrlong	local03, fp
20138                 | ' 
20138                 | ' t2=pop()
20138                 | ' t1=pop()
20138                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
20138     08 4E 85 F1 | 	sub	fp, #8
2013c     1F 2A 0E F2 | 	cmp	local03, #31 wz
20140     14 4E 05 A1 |  if_e	add	fp, #20
20144     A7 2C 02 AB |  if_e	rdlong	local04, fp
20148     14 4E 85 A1 |  if_e	sub	fp, #20
2014c     16 2B 02 A6 |  if_e	mov	local03, local04
20150     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20154     28 00 90 5D |  if_ne	jmp	#LR__2540
20158     00 26 06 F6 | 	mov	local01, #0
2015c     A7 12 02 FB | 	rdlong	arg01, fp
20160     0C 4E 05 F1 | 	add	fp, #12
20164     A7 14 02 FB | 	rdlong	arg02, fp
20168     0C 4E 85 F1 | 	sub	fp, #12
2016c     14 7A B0 FD | 	call	#__system___string_cmp
20170     00 FA 55 F2 | 	cmps	result1, #0 wc
20174     00 26 26 C6 |  if_b	not	local01, #0
20178     A7 26 62 FC | 	wrlong	local01, fp
2017c     10 04 90 FD | 	jmp	#LR__2553
20180                 | LR__2540
20180                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
20180     08 4E 05 F1 | 	add	fp, #8
20184     A7 26 02 FB | 	rdlong	local01, fp
20188     08 4E 85 F1 | 	sub	fp, #8
2018c     1E 26 0E F2 | 	cmp	local01, #30 wz
20190     14 4E 05 A1 |  if_e	add	fp, #20
20194     A7 2C 02 AB |  if_e	rdlong	local04, fp
20198     14 4E 85 A1 |  if_e	sub	fp, #20
2019c     16 2B 02 A6 |  if_e	mov	local03, local04
201a0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
201a4     2C 00 90 5D |  if_ne	jmp	#LR__2541
201a8     00 26 06 F6 | 	mov	local01, #0
201ac     A7 12 02 FB | 	rdlong	arg01, fp
201b0     0C 4E 05 F1 | 	add	fp, #12
201b4     A7 14 02 FB | 	rdlong	arg02, fp
201b8     0C 4E 85 F1 | 	sub	fp, #12
201bc     01 16 06 F6 | 	mov	arg03, #1
201c0     48 AC B0 FD | 	call	#__system___float_cmp
201c4     00 FA 55 F2 | 	cmps	result1, #0 wc
201c8     00 26 26 C6 |  if_b	not	local01, #0
201cc     A7 26 62 FC | 	wrlong	local01, fp
201d0     BC 03 90 FD | 	jmp	#LR__2553
201d4                 | LR__2541
201d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
201d4     08 4E 05 F1 | 	add	fp, #8
201d8     A7 26 02 FB | 	rdlong	local01, fp
201dc     08 4E 85 F1 | 	sub	fp, #8
201e0     1E 26 0E F2 | 	cmp	local01, #30 wz
201e4     14 4E 05 A1 |  if_e	add	fp, #20
201e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
201ec     14 4E 85 A1 |  if_e	sub	fp, #20
201f0     16 2B 02 A6 |  if_e	mov	local03, local04
201f4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
201f8     48 00 90 5D |  if_ne	jmp	#LR__2542
201fc     00 26 06 F6 | 	mov	local01, #0
20200     A7 28 02 FB | 	rdlong	local02, fp
20204     0C 4E 05 F1 | 	add	fp, #12
20208     A7 12 02 FB | 	rdlong	arg01, fp
2020c     0C 4E 85 F1 | 	sub	fp, #12
20210     09 13 52 F6 | 	abs	arg01, arg01 wc
20214     1F 2E C6 C9 |  if_b	decod	local05, #31
20218     00 2E 06 36 |  if_ae	mov	local05, #0
2021c     B4 A3 B0 FD | 	call	#__system___float_fromuns
20220     17 FB 61 F5 | 	xor	result1, local05
20224     FD 14 02 F6 | 	mov	arg02, result1
20228     14 13 02 F6 | 	mov	arg01, local02
2022c     01 16 06 F6 | 	mov	arg03, #1
20230     D8 AB B0 FD | 	call	#__system___float_cmp
20234     00 FA 55 F2 | 	cmps	result1, #0 wc
20238     00 26 26 C6 |  if_b	not	local01, #0
2023c     A7 26 62 FC | 	wrlong	local01, fp
20240     4C 03 90 FD | 	jmp	#LR__2553
20244                 | LR__2542
20244                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
20244     08 4E 05 F1 | 	add	fp, #8
20248     A7 26 02 FB | 	rdlong	local01, fp
2024c     08 4E 85 F1 | 	sub	fp, #8
20250     1E 26 0E F2 | 	cmp	local01, #30 wz
20254     14 4E 05 A1 |  if_e	add	fp, #20
20258     A7 2C 02 AB |  if_e	rdlong	local04, fp
2025c     14 4E 85 A1 |  if_e	sub	fp, #20
20260     16 2B 02 A6 |  if_e	mov	local03, local04
20264     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20268     38 00 90 5D |  if_ne	jmp	#LR__2543
2026c     00 26 06 F6 | 	mov	local01, #0
20270     A7 28 02 FB | 	rdlong	local02, fp
20274     0C 4E 05 F1 | 	add	fp, #12
20278     A7 12 02 FB | 	rdlong	arg01, fp
2027c     0C 4E 85 F1 | 	sub	fp, #12
20280     50 A3 B0 FD | 	call	#__system___float_fromuns
20284     FD 14 02 F6 | 	mov	arg02, result1
20288     14 13 02 F6 | 	mov	arg01, local02
2028c     01 16 06 F6 | 	mov	arg03, #1
20290     78 AB B0 FD | 	call	#__system___float_cmp
20294     00 FA 55 F2 | 	cmps	result1, #0 wc
20298     00 26 26 C6 |  if_b	not	local01, #0
2029c     A7 26 62 FC | 	wrlong	local01, fp
202a0     EC 02 90 FD | 	jmp	#LR__2553
202a4                 | LR__2543
202a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
202a4     08 4E 05 F1 | 	add	fp, #8
202a8     A7 26 02 FB | 	rdlong	local01, fp
202ac     08 4E 85 F1 | 	sub	fp, #8
202b0     1C 26 0E F2 | 	cmp	local01, #28 wz
202b4     14 4E 05 A1 |  if_e	add	fp, #20
202b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
202bc     14 4E 85 A1 |  if_e	sub	fp, #20
202c0     16 2B 02 A6 |  if_e	mov	local03, local04
202c4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
202c8     44 00 90 5D |  if_ne	jmp	#LR__2544
202cc     00 26 06 F6 | 	mov	local01, #0
202d0     A7 12 02 FB | 	rdlong	arg01, fp
202d4     09 13 52 F6 | 	abs	arg01, arg01 wc
202d8     1F 2E C6 C9 |  if_b	decod	local05, #31
202dc     00 2E 06 36 |  if_ae	mov	local05, #0
202e0     F0 A2 B0 FD | 	call	#__system___float_fromuns
202e4     17 FB 61 F5 | 	xor	result1, local05
202e8     FD 12 02 F6 | 	mov	arg01, result1
202ec     0C 4E 05 F1 | 	add	fp, #12
202f0     A7 14 02 FB | 	rdlong	arg02, fp
202f4     0C 4E 85 F1 | 	sub	fp, #12
202f8     01 16 06 F6 | 	mov	arg03, #1
202fc     0C AB B0 FD | 	call	#__system___float_cmp
20300     00 FA 55 F2 | 	cmps	result1, #0 wc
20304     00 26 26 C6 |  if_b	not	local01, #0
20308     A7 26 62 FC | 	wrlong	local01, fp
2030c     80 02 90 FD | 	jmp	#LR__2553
20310                 | LR__2544
20310                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
20310     08 4E 05 F1 | 	add	fp, #8
20314     A7 26 02 FB | 	rdlong	local01, fp
20318     08 4E 85 F1 | 	sub	fp, #8
2031c     1C 26 0E F2 | 	cmp	local01, #28 wz
20320     14 4E 05 A1 |  if_e	add	fp, #20
20324     A7 2C 02 AB |  if_e	rdlong	local04, fp
20328     14 4E 85 A1 |  if_e	sub	fp, #20
2032c     16 2B 02 A6 |  if_e	mov	local03, local04
20330     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20334     20 00 90 5D |  if_ne	jmp	#LR__2545
20338     A7 28 02 FB | 	rdlong	local02, fp
2033c     0C 4E 05 F1 | 	add	fp, #12
20340     A7 2A 02 FB | 	rdlong	local03, fp
20344     0C 4E 85 F1 | 	sub	fp, #12
20348     15 29 52 F2 | 	cmps	local02, local03 wc
2034c     13 27 A2 F1 | 	subx	local01, local01
20350     A7 26 62 FC | 	wrlong	local01, fp
20354     38 02 90 FD | 	jmp	#LR__2553
20358                 | LR__2545
20358                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
20358     08 4E 05 F1 | 	add	fp, #8
2035c     A7 26 02 FB | 	rdlong	local01, fp
20360     08 4E 85 F1 | 	sub	fp, #8
20364     1C 26 0E F2 | 	cmp	local01, #28 wz
20368     14 4E 05 A1 |  if_e	add	fp, #20
2036c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20370     14 4E 85 A1 |  if_e	sub	fp, #20
20374     16 2B 02 A6 |  if_e	mov	local03, local04
20378     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2037c     20 00 90 5D |  if_ne	jmp	#LR__2546
20380     A7 28 02 FB | 	rdlong	local02, fp
20384     0C 4E 05 F1 | 	add	fp, #12
20388     A7 2A 02 FB | 	rdlong	local03, fp
2038c     0C 4E 85 F1 | 	sub	fp, #12
20390     15 29 52 F2 | 	cmps	local02, local03 wc
20394     13 27 A2 F1 | 	subx	local01, local01
20398     A7 26 62 FC | 	wrlong	local01, fp
2039c     F0 01 90 FD | 	jmp	#LR__2553
203a0                 | LR__2546
203a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
203a0     08 4E 05 F1 | 	add	fp, #8
203a4     A7 26 02 FB | 	rdlong	local01, fp
203a8     08 4E 85 F1 | 	sub	fp, #8
203ac     1D 26 0E F2 | 	cmp	local01, #29 wz
203b0     14 4E 05 A1 |  if_e	add	fp, #20
203b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
203b8     14 4E 85 A1 |  if_e	sub	fp, #20
203bc     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
203c0     34 00 90 5D |  if_ne	jmp	#LR__2547
203c4     00 26 06 F6 | 	mov	local01, #0
203c8     A7 12 02 FB | 	rdlong	arg01, fp
203cc     04 A2 B0 FD | 	call	#__system___float_fromuns
203d0     FD 12 02 F6 | 	mov	arg01, result1
203d4     0C 4E 05 F1 | 	add	fp, #12
203d8     A7 14 02 FB | 	rdlong	arg02, fp
203dc     0C 4E 85 F1 | 	sub	fp, #12
203e0     01 16 06 F6 | 	mov	arg03, #1
203e4     24 AA B0 FD | 	call	#__system___float_cmp
203e8     00 FA 55 F2 | 	cmps	result1, #0 wc
203ec     00 26 26 C6 |  if_b	not	local01, #0
203f0     A7 26 62 FC | 	wrlong	local01, fp
203f4     98 01 90 FD | 	jmp	#LR__2553
203f8                 | LR__2547
203f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
203f8     08 4E 05 F1 | 	add	fp, #8
203fc     A7 26 02 FB | 	rdlong	local01, fp
20400     08 4E 85 F1 | 	sub	fp, #8
20404     1D 26 0E F2 | 	cmp	local01, #29 wz
20408     14 4E 05 A1 |  if_e	add	fp, #20
2040c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20410     14 4E 85 A1 |  if_e	sub	fp, #20
20414     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20418     20 00 90 5D |  if_ne	jmp	#LR__2548
2041c     A7 28 02 FB | 	rdlong	local02, fp
20420     0C 4E 05 F1 | 	add	fp, #12
20424     A7 2A 02 FB | 	rdlong	local03, fp
20428     0C 4E 85 F1 | 	sub	fp, #12
2042c     15 29 52 F2 | 	cmps	local02, local03 wc
20430     13 27 A2 F1 | 	subx	local01, local01
20434     A7 26 62 FC | 	wrlong	local01, fp
20438     54 01 90 FD | 	jmp	#LR__2553
2043c                 | LR__2548
2043c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
2043c     08 4E 05 F1 | 	add	fp, #8
20440     A7 26 02 FB | 	rdlong	local01, fp
20444     08 4E 85 F1 | 	sub	fp, #8
20448     1D 26 0E F2 | 	cmp	local01, #29 wz
2044c     14 4E 05 A1 |  if_e	add	fp, #20
20450     A7 2A 02 AB |  if_e	rdlong	local03, fp
20454     14 4E 85 A1 |  if_e	sub	fp, #20
20458     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2045c     20 00 90 5D |  if_ne	jmp	#LR__2549
20460     A7 28 02 FB | 	rdlong	local02, fp
20464     0C 4E 05 F1 | 	add	fp, #12
20468     A7 2A 02 FB | 	rdlong	local03, fp
2046c     0C 4E 85 F1 | 	sub	fp, #12
20470     15 29 12 F2 | 	cmp	local02, local03 wc
20474     13 27 A2 F1 | 	subx	local01, local01
20478     A7 26 62 FC | 	wrlong	local01, fp
2047c     10 01 90 FD | 	jmp	#LR__2553
20480                 | LR__2549
20480                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
20480     08 4E 05 F1 | 	add	fp, #8
20484     A7 26 02 FB | 	rdlong	local01, fp
20488     08 4E 85 F1 | 	sub	fp, #8
2048c     2B 26 0E F2 | 	cmp	local01, #43 wz
20490     14 4E 05 A1 |  if_e	add	fp, #20
20494     A7 2A 02 AB |  if_e	rdlong	local03, fp
20498     14 4E 85 A1 |  if_e	sub	fp, #20
2049c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
204a0     30 00 90 5D |  if_ne	jmp	#LR__2550
204a4     00 26 06 F6 | 	mov	local01, #0
204a8     A7 12 02 FB | 	rdlong	arg01, fp
204ac     E8 D4 BE FD | 	call	#_convertstring
204b0     FD 12 02 F6 | 	mov	arg01, result1
204b4     0C 4E 05 F1 | 	add	fp, #12
204b8     A7 14 02 FB | 	rdlong	arg02, fp
204bc     0C 4E 85 F1 | 	sub	fp, #12
204c0     C0 76 B0 FD | 	call	#__system___string_cmp
204c4     00 FA 55 F2 | 	cmps	result1, #0 wc
204c8     00 26 26 C6 |  if_b	not	local01, #0
204cc     A7 26 62 FC | 	wrlong	local01, fp
204d0     BC 00 90 FD | 	jmp	#LR__2553
204d4                 | LR__2550
204d4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
204d4     08 4E 05 F1 | 	add	fp, #8
204d8     A7 26 02 FB | 	rdlong	local01, fp
204dc     08 4E 85 F1 | 	sub	fp, #8
204e0     1F 26 0E F2 | 	cmp	local01, #31 wz
204e4     14 4E 05 A1 |  if_e	add	fp, #20
204e8     A7 2A 02 AB |  if_e	rdlong	local03, fp
204ec     14 4E 85 A1 |  if_e	sub	fp, #20
204f0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
204f4     34 00 90 5D |  if_ne	jmp	#LR__2551
204f8     00 26 06 F6 | 	mov	local01, #0
204fc     A7 28 02 FB | 	rdlong	local02, fp
20500     0C 4E 05 F1 | 	add	fp, #12
20504     A7 12 02 FB | 	rdlong	arg01, fp
20508     0C 4E 85 F1 | 	sub	fp, #12
2050c     88 D4 BE FD | 	call	#_convertstring
20510     FD 14 02 F6 | 	mov	arg02, result1
20514     14 13 02 F6 | 	mov	arg01, local02
20518     68 76 B0 FD | 	call	#__system___string_cmp
2051c     00 FA 55 F2 | 	cmps	result1, #0 wc
20520     00 26 26 C6 |  if_b	not	local01, #0
20524     A7 26 62 FC | 	wrlong	local01, fp
20528     64 00 90 FD | 	jmp	#LR__2553
2052c                 | LR__2551
2052c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
2052c     08 4E 05 F1 | 	add	fp, #8
20530     A7 26 02 FB | 	rdlong	local01, fp
20534     08 4E 85 F1 | 	sub	fp, #8
20538     2B 26 0E F2 | 	cmp	local01, #43 wz
2053c     14 4E 05 A1 |  if_e	add	fp, #20
20540     A7 2A 02 AB |  if_e	rdlong	local03, fp
20544     14 4E 85 A1 |  if_e	sub	fp, #20
20548     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
2054c     3C 00 90 5D |  if_ne	jmp	#LR__2552
20550     00 26 06 F6 | 	mov	local01, #0
20554     A7 12 02 FB | 	rdlong	arg01, fp
20558     3C D4 BE FD | 	call	#_convertstring
2055c     FD 28 02 F6 | 	mov	local02, result1
20560     0C 4E 05 F1 | 	add	fp, #12
20564     A7 12 02 FB | 	rdlong	arg01, fp
20568     0C 4E 85 F1 | 	sub	fp, #12
2056c     28 D4 BE FD | 	call	#_convertstring
20570     FD 14 02 F6 | 	mov	arg02, result1
20574     14 13 02 F6 | 	mov	arg01, local02
20578     08 76 B0 FD | 	call	#__system___string_cmp
2057c     00 FA 55 F2 | 	cmps	result1, #0 wc
20580     00 26 26 C6 |  if_b	not	local01, #0
20584     A7 26 62 FC | 	wrlong	local01, fp
20588     04 00 90 FD | 	jmp	#LR__2553
2058c                 | LR__2552
2058c     A7 00 68 FC | 	wrlong	#0, fp
20590                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20590                 | LR__2553
20590     08 4E 05 F1 | 	add	fp, #8
20594     A7 38 68 FC | 	wrlong	#28, fp
20598     08 4E 85 F1 | 	sub	fp, #8
2059c     A7 12 02 F6 | 	mov	arg01, fp
205a0     14 D3 BE FD | 	call	#_push
205a4     A7 F0 03 F6 | 	mov	ptra, fp
205a8     B2 00 A0 FD | 	call	#popregs_
205ac                 | _do_lt_ret
205ac     2D 00 64 FD | 	ret
205b0                 | 
205b0                 | ' 
205b0                 | ' '--------------------------------- minus (-)
205b0                 | ' 
205b0                 | ' sub do_minus
205b0                 | _do_minus
205b0     05 4A 05 F6 | 	mov	COUNT_, #5
205b4     A8 00 A0 FD | 	call	#pushregs_
205b8     18 F0 07 F1 | 	add	ptra, #24
205bc     60 D2 BE FD | 	call	#_pop
205c0     FD 26 02 F6 | 	mov	local01, result1
205c4     FE 28 02 F6 | 	mov	local02, result2
205c8     FF 2A 02 F6 | 	mov	local03, result3
205cc     0C 4E 05 F1 | 	add	fp, #12
205d0     A7 26 62 FC | 	wrlong	local01, fp
205d4     04 4E 05 F1 | 	add	fp, #4
205d8     A7 28 62 FC | 	wrlong	local02, fp
205dc     04 4E 05 F1 | 	add	fp, #4
205e0     A7 2A 62 FC | 	wrlong	local03, fp
205e4     14 4E 85 F1 | 	sub	fp, #20
205e8     34 D2 BE FD | 	call	#_pop
205ec     FF 2A 02 F6 | 	mov	local03, result3
205f0     A7 FA 61 FC | 	wrlong	result1, fp
205f4     04 4E 05 F1 | 	add	fp, #4
205f8     A7 FC 61 FC | 	wrlong	result2, fp
205fc     04 4E 05 F1 | 	add	fp, #4
20600     A7 2A 62 FC | 	wrlong	local03, fp
20604                 | ' 
20604                 | ' t2=pop()
20604                 | ' t1=pop()
20604                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
20604     08 4E 85 F1 | 	sub	fp, #8
20608     1D 2A 0E F2 | 	cmp	local03, #29 wz
2060c     14 4E 05 A1 |  if_e	add	fp, #20
20610     A7 2C 02 AB |  if_e	rdlong	local04, fp
20614     14 4E 85 A1 |  if_e	sub	fp, #20
20618     16 2B 02 A6 |  if_e	mov	local03, local04
2061c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20620     5C 00 90 5D |  if_ne	jmp	#LR__2561
20624                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
20624     0C 4E 05 F1 | 	add	fp, #12
20628     A7 26 02 FB | 	rdlong	local01, fp
2062c     0C 4E 85 F1 | 	sub	fp, #12
20630     A7 2A 02 FB | 	rdlong	local03, fp
20634     15 27 12 F2 | 	cmp	local01, local03 wc
20638     1C 00 90 3D |  if_ae	jmp	#LR__2560
2063c     A7 26 02 FB | 	rdlong	local01, fp
20640     0C 4E 05 F1 | 	add	fp, #12
20644     A7 28 02 FB | 	rdlong	local02, fp
20648     0C 4E 85 F1 | 	sub	fp, #12
2064c     14 27 82 F1 | 	sub	local01, local02
20650     A7 26 62 FC | 	wrlong	local01, fp
20654     F4 02 90 FD | 	jmp	#LR__2570
20658                 | LR__2560
20658     A7 26 02 FB | 	rdlong	local01, fp
2065c     0C 4E 05 F1 | 	add	fp, #12
20660     A7 28 02 FB | 	rdlong	local02, fp
20664     0C 4E 85 F1 | 	sub	fp, #12
20668     14 27 82 F1 | 	sub	local01, local02
2066c     A7 26 62 FC | 	wrlong	local01, fp
20670     08 4E 05 F1 | 	add	fp, #8
20674     A7 38 68 FC | 	wrlong	#28, fp
20678     08 4E 85 F1 | 	sub	fp, #8
2067c     CC 02 90 FD | 	jmp	#LR__2570
20680                 | LR__2561
20680                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
20680     08 4E 05 F1 | 	add	fp, #8
20684     A7 26 02 FB | 	rdlong	local01, fp
20688     08 4E 85 F1 | 	sub	fp, #8
2068c     1D 26 0E F2 | 	cmp	local01, #29 wz
20690     14 4E 05 A1 |  if_e	add	fp, #20
20694     A7 2C 02 AB |  if_e	rdlong	local04, fp
20698     14 4E 85 A1 |  if_e	sub	fp, #20
2069c     16 2B 02 A6 |  if_e	mov	local03, local04
206a0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
206a4     28 00 90 5D |  if_ne	jmp	#LR__2562
206a8     A7 26 02 FB | 	rdlong	local01, fp
206ac     0C 4E 05 F1 | 	add	fp, #12
206b0     A7 28 02 FB | 	rdlong	local02, fp
206b4     0C 4E 85 F1 | 	sub	fp, #12
206b8     14 27 82 F1 | 	sub	local01, local02
206bc     A7 26 62 FC | 	wrlong	local01, fp
206c0     08 4E 05 F1 | 	add	fp, #8
206c4     A7 38 68 FC | 	wrlong	#28, fp
206c8     08 4E 85 F1 | 	sub	fp, #8
206cc     7C 02 90 FD | 	jmp	#LR__2570
206d0                 | LR__2562
206d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
206d0     08 4E 05 F1 | 	add	fp, #8
206d4     A7 26 02 FB | 	rdlong	local01, fp
206d8     08 4E 85 F1 | 	sub	fp, #8
206dc     1D 26 0E F2 | 	cmp	local01, #29 wz
206e0     14 4E 05 A1 |  if_e	add	fp, #20
206e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
206e8     14 4E 85 A1 |  if_e	sub	fp, #20
206ec     16 2B 02 A6 |  if_e	mov	local03, local04
206f0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
206f4     34 00 90 5D |  if_ne	jmp	#LR__2563
206f8     A7 12 02 FB | 	rdlong	arg01, fp
206fc     D4 9E B0 FD | 	call	#__system___float_fromuns
20700     FD 12 02 F6 | 	mov	arg01, result1
20704     0C 4E 05 F1 | 	add	fp, #12
20708     A7 14 02 FB | 	rdlong	arg02, fp
2070c     0C 4E 85 F1 | 	sub	fp, #12
20710     1F 14 E6 F4 | 	bitnot	arg02, #31
20714     F0 9E B0 FD | 	call	#__system___float_add
20718     A7 FA 61 FC | 	wrlong	result1, fp
2071c     08 4E 05 F1 | 	add	fp, #8
20720     A7 3C 68 FC | 	wrlong	#30, fp
20724     08 4E 85 F1 | 	sub	fp, #8
20728     20 02 90 FD | 	jmp	#LR__2570
2072c                 | LR__2563
2072c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
2072c     08 4E 05 F1 | 	add	fp, #8
20730     A7 26 02 FB | 	rdlong	local01, fp
20734     08 4E 85 F1 | 	sub	fp, #8
20738     1C 26 0E F2 | 	cmp	local01, #28 wz
2073c     14 4E 05 A1 |  if_e	add	fp, #20
20740     A7 2C 02 AB |  if_e	rdlong	local04, fp
20744     14 4E 85 A1 |  if_e	sub	fp, #20
20748     16 2B 02 A6 |  if_e	mov	local03, local04
2074c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20750     1C 00 90 5D |  if_ne	jmp	#LR__2564
20754     A7 26 02 FB | 	rdlong	local01, fp
20758     0C 4E 05 F1 | 	add	fp, #12
2075c     A7 28 02 FB | 	rdlong	local02, fp
20760     0C 4E 85 F1 | 	sub	fp, #12
20764     14 27 82 F1 | 	sub	local01, local02
20768     A7 26 62 FC | 	wrlong	local01, fp
2076c     DC 01 90 FD | 	jmp	#LR__2570
20770                 | LR__2564
20770                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
20770     08 4E 05 F1 | 	add	fp, #8
20774     A7 26 02 FB | 	rdlong	local01, fp
20778     08 4E 85 F1 | 	sub	fp, #8
2077c     1C 26 0E F2 | 	cmp	local01, #28 wz
20780     14 4E 05 A1 |  if_e	add	fp, #20
20784     A7 2C 02 AB |  if_e	rdlong	local04, fp
20788     14 4E 85 A1 |  if_e	sub	fp, #20
2078c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
20790     1C 00 90 5D |  if_ne	jmp	#LR__2565
20794     A7 26 02 FB | 	rdlong	local01, fp
20798     0C 4E 05 F1 | 	add	fp, #12
2079c     A7 28 02 FB | 	rdlong	local02, fp
207a0     0C 4E 85 F1 | 	sub	fp, #12
207a4     14 27 82 F1 | 	sub	local01, local02
207a8     A7 26 62 FC | 	wrlong	local01, fp
207ac     9C 01 90 FD | 	jmp	#LR__2570
207b0                 | LR__2565
207b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
207b0     08 4E 05 F1 | 	add	fp, #8
207b4     A7 26 02 FB | 	rdlong	local01, fp
207b8     08 4E 85 F1 | 	sub	fp, #8
207bc     1C 26 0E F2 | 	cmp	local01, #28 wz
207c0     14 4E 05 A1 |  if_e	add	fp, #20
207c4     A7 2A 02 AB |  if_e	rdlong	local03, fp
207c8     14 4E 85 A1 |  if_e	sub	fp, #20
207cc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
207d0     44 00 90 5D |  if_ne	jmp	#LR__2566
207d4     A7 12 02 FB | 	rdlong	arg01, fp
207d8     09 13 52 F6 | 	abs	arg01, arg01 wc
207dc     1F 2E C6 C9 |  if_b	decod	local05, #31
207e0     00 2E 06 36 |  if_ae	mov	local05, #0
207e4     EC 9D B0 FD | 	call	#__system___float_fromuns
207e8     17 FB 61 F5 | 	xor	result1, local05
207ec     FD 12 02 F6 | 	mov	arg01, result1
207f0     0C 4E 05 F1 | 	add	fp, #12
207f4     A7 14 02 FB | 	rdlong	arg02, fp
207f8     0C 4E 85 F1 | 	sub	fp, #12
207fc     1F 14 E6 F4 | 	bitnot	arg02, #31
20800     04 9E B0 FD | 	call	#__system___float_add
20804     A7 FA 61 FC | 	wrlong	result1, fp
20808     08 4E 05 F1 | 	add	fp, #8
2080c     A7 3C 68 FC | 	wrlong	#30, fp
20810     08 4E 85 F1 | 	sub	fp, #8
20814     34 01 90 FD | 	jmp	#LR__2570
20818                 | LR__2566
20818                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
20818     08 4E 05 F1 | 	add	fp, #8
2081c     A7 26 02 FB | 	rdlong	local01, fp
20820     08 4E 85 F1 | 	sub	fp, #8
20824     1E 26 0E F2 | 	cmp	local01, #30 wz
20828     14 4E 05 A1 |  if_e	add	fp, #20
2082c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20830     14 4E 85 A1 |  if_e	sub	fp, #20
20834     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20838     2C 00 90 5D |  if_ne	jmp	#LR__2567
2083c     A7 26 02 FB | 	rdlong	local01, fp
20840     0C 4E 05 F1 | 	add	fp, #12
20844     A7 12 02 FB | 	rdlong	arg01, fp
20848     0C 4E 85 F1 | 	sub	fp, #12
2084c     84 9D B0 FD | 	call	#__system___float_fromuns
20850     FD 14 02 F6 | 	mov	arg02, result1
20854     13 13 02 F6 | 	mov	arg01, local01
20858     1F 14 E6 F4 | 	bitnot	arg02, #31
2085c     A8 9D B0 FD | 	call	#__system___float_add
20860     A7 FA 61 FC | 	wrlong	result1, fp
20864     E4 00 90 FD | 	jmp	#LR__2570
20868                 | LR__2567
20868                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
20868     08 4E 05 F1 | 	add	fp, #8
2086c     A7 26 02 FB | 	rdlong	local01, fp
20870     08 4E 85 F1 | 	sub	fp, #8
20874     1E 26 0E F2 | 	cmp	local01, #30 wz
20878     14 4E 05 A1 |  if_e	add	fp, #20
2087c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20880     14 4E 85 A1 |  if_e	sub	fp, #20
20884     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20888     3C 00 90 5D |  if_ne	jmp	#LR__2568
2088c     A7 26 02 FB | 	rdlong	local01, fp
20890     0C 4E 05 F1 | 	add	fp, #12
20894     A7 12 02 FB | 	rdlong	arg01, fp
20898     0C 4E 85 F1 | 	sub	fp, #12
2089c     09 13 52 F6 | 	abs	arg01, arg01 wc
208a0     1F 2E C6 C9 |  if_b	decod	local05, #31
208a4     00 2E 06 36 |  if_ae	mov	local05, #0
208a8     28 9D B0 FD | 	call	#__system___float_fromuns
208ac     17 FB 61 F5 | 	xor	result1, local05
208b0     FD 14 02 F6 | 	mov	arg02, result1
208b4     13 13 02 F6 | 	mov	arg01, local01
208b8     1F 14 E6 F4 | 	bitnot	arg02, #31
208bc     48 9D B0 FD | 	call	#__system___float_add
208c0     A7 FA 61 FC | 	wrlong	result1, fp
208c4     84 00 90 FD | 	jmp	#LR__2570
208c8                 | LR__2568
208c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
208c8     08 4E 05 F1 | 	add	fp, #8
208cc     A7 26 02 FB | 	rdlong	local01, fp
208d0     08 4E 85 F1 | 	sub	fp, #8
208d4     1E 26 0E F2 | 	cmp	local01, #30 wz
208d8     14 4E 05 A1 |  if_e	add	fp, #20
208dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
208e0     14 4E 85 A1 |  if_e	sub	fp, #20
208e4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
208e8     20 00 90 5D |  if_ne	jmp	#LR__2569
208ec     A7 12 02 FB | 	rdlong	arg01, fp
208f0     0C 4E 05 F1 | 	add	fp, #12
208f4     A7 14 02 FB | 	rdlong	arg02, fp
208f8     0C 4E 85 F1 | 	sub	fp, #12
208fc     1F 14 E6 F4 | 	bitnot	arg02, #31
20900     04 9D B0 FD | 	call	#__system___float_add
20904     A7 FA 61 FC | 	wrlong	result1, fp
20908     40 00 90 FD | 	jmp	#LR__2570
2090c                 | LR__2569
2090c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
2090c     08 4E 05 F1 | 	add	fp, #8
20910     A7 26 02 FB | 	rdlong	local01, fp
20914     08 4E 85 F1 | 	sub	fp, #8
20918     1F 26 0E F2 | 	cmp	local01, #31 wz
2091c     14 4E 05 51 |  if_ne	add	fp, #20
20920     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20924     14 4E 85 51 |  if_ne	sub	fp, #20
20928     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
2092c     A7 06 68 AC |  if_e	wrlong	#3, fp
20930     08 4E 05 A1 |  if_e	add	fp, #8
20934     A7 FE 69 AC |  if_e	wrlong	#255, fp
20938     08 4E 85 A1 |  if_e	sub	fp, #8
2093c     A7 0A 68 5C |  if_ne	wrlong	#5, fp
20940     08 4E 05 51 |  if_ne	add	fp, #8
20944     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20948     08 4E 85 51 |  if_ne	sub	fp, #8
2094c                 | LR__2570
2094c     A7 12 02 F6 | 	mov	arg01, fp
20950     64 CF BE FD | 	call	#_push
20954     A7 F0 03 F6 | 	mov	ptra, fp
20958     B2 00 A0 FD | 	call	#popregs_
2095c                 | _do_minus_ret
2095c     2D 00 64 FD | 	ret
20960                 | 
20960                 | ' 
20960                 | ' '--------------------------------- negative (-), one argument negative
20960                 | ' 
20960                 | ' sub do_negative
20960                 | _do_negative
20960     02 4A 05 F6 | 	mov	COUNT_, #2
20964     A8 00 A0 FD | 	call	#pushregs_
20968     0C F0 07 F1 | 	add	ptra, #12
2096c     B0 CE BE FD | 	call	#_pop
20970     FF 26 02 F6 | 	mov	local01, result3
20974     A7 FA 61 FC | 	wrlong	result1, fp
20978     04 4E 05 F1 | 	add	fp, #4
2097c     A7 FC 61 FC | 	wrlong	result2, fp
20980     04 4E 05 F1 | 	add	fp, #4
20984     A7 26 62 FC | 	wrlong	local01, fp
20988                 | ' 
20988                 | ' t1=pop()
20988                 | ' if t1.result_type=result_int then 
20988     08 4E 85 F1 | 	sub	fp, #8
2098c     1C 26 0E F2 | 	cmp	local01, #28 wz
20990     A7 28 02 AB |  if_e	rdlong	local02, fp
20994     14 27 62 A6 |  if_e	neg	local01, local02
20998     A7 26 62 AC |  if_e	wrlong	local01, fp
2099c     5C 00 90 AD |  if_e	jmp	#LR__2582
209a0     08 4E 05 F1 | 	add	fp, #8
209a4     A7 26 02 FB | 	rdlong	local01, fp
209a8     08 4E 85 F1 | 	sub	fp, #8
209ac     1D 26 0E F2 | 	cmp	local01, #29 wz
209b0     1C 00 90 5D |  if_ne	jmp	#LR__2580
209b4     A7 28 02 FB | 	rdlong	local02, fp
209b8     14 27 62 F6 | 	neg	local01, local02
209bc     A7 26 62 FC | 	wrlong	local01, fp
209c0     08 4E 05 F1 | 	add	fp, #8
209c4     A7 38 68 FC | 	wrlong	#28, fp
209c8     08 4E 85 F1 | 	sub	fp, #8
209cc     2C 00 90 FD | 	jmp	#LR__2581
209d0                 | LR__2580
209d0     08 4E 05 F1 | 	add	fp, #8
209d4     A7 26 02 FB | 	rdlong	local01, fp
209d8     08 4E 85 F1 | 	sub	fp, #8
209dc     1E 26 0E F2 | 	cmp	local01, #30 wz
209e0     A7 FA 01 AB |  if_e	rdlong	result1, fp
209e4     1F FA E5 A4 |  if_e	bitnot	result1, #31
209e8     A7 FA 61 AC |  if_e	wrlong	result1, fp
209ec     08 4E 05 51 |  if_ne	add	fp, #8
209f0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
209f4     08 4E 85 51 |  if_ne	sub	fp, #8
209f8     A7 50 68 5C |  if_ne	wrlong	#40, fp
209fc                 | LR__2581
209fc                 | LR__2582
209fc     A7 12 02 F6 | 	mov	arg01, fp
20a00     B4 CE BE FD | 	call	#_push
20a04     A7 F0 03 F6 | 	mov	ptra, fp
20a08     B2 00 A0 FD | 	call	#popregs_
20a0c                 | _do_negative_ret
20a0c     2D 00 64 FD | 	ret
20a10                 | 
20a10                 | ' 
20a10                 | ' '--------------------------------- MOD (modulo)
20a10                 | ' 
20a10                 | ' sub do_mod 
20a10                 | _do_mod
20a10     01 4A 05 F6 | 	mov	COUNT_, #1
20a14     A8 00 A0 FD | 	call	#pushregs_
20a18     18 F0 07 F1 | 	add	ptra, #24
20a1c     00 CE BE FD | 	call	#_pop
20a20     FD 92 02 F6 | 	mov	muldivb_, result1
20a24     FE 90 02 F6 | 	mov	muldiva_, result2
20a28     FF 26 02 F6 | 	mov	local01, result3
20a2c     0C 4E 05 F1 | 	add	fp, #12
20a30     A7 92 62 FC | 	wrlong	muldivb_, fp
20a34     04 4E 05 F1 | 	add	fp, #4
20a38     A7 90 62 FC | 	wrlong	muldiva_, fp
20a3c     04 4E 05 F1 | 	add	fp, #4
20a40     A7 26 62 FC | 	wrlong	local01, fp
20a44     14 4E 85 F1 | 	sub	fp, #20
20a48     D4 CD BE FD | 	call	#_pop
20a4c     A7 FA 61 FC | 	wrlong	result1, fp
20a50     04 4E 05 F1 | 	add	fp, #4
20a54     A7 FC 61 FC | 	wrlong	result2, fp
20a58     04 4E 05 F1 | 	add	fp, #4
20a5c     A7 FE 61 FC | 	wrlong	result3, fp
20a60                 | ' 
20a60                 | ' t2=pop()
20a60                 | ' t1=pop()
20a60                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
20a60     08 4E 85 F1 | 	sub	fp, #8
20a64     1F FE 0D F2 | 	cmp	result3, #31 wz
20a68     14 4E 05 51 |  if_ne	add	fp, #20
20a6c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
20a70     14 4E 85 51 |  if_ne	sub	fp, #20
20a74     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
20a78     A7 14 68 AC |  if_e	wrlong	#10, fp
20a7c     08 4E 05 A1 |  if_e	add	fp, #8
20a80     A7 FE 69 AC |  if_e	wrlong	#255, fp
20a84     08 4E 85 A1 |  if_e	sub	fp, #8
20a88     90 01 90 AD |  if_e	jmp	#LR__2596
20a8c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
20a8c     08 4E 05 F1 | 	add	fp, #8
20a90     A7 92 02 FB | 	rdlong	muldivb_, fp
20a94     08 4E 85 F1 | 	sub	fp, #8
20a98     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
20a9c     1C 00 90 5D |  if_ne	jmp	#LR__2590
20aa0     08 4E 05 F1 | 	add	fp, #8
20aa4     A7 38 68 FC | 	wrlong	#28, fp
20aa8     08 4E 85 F1 | 	sub	fp, #8
20aac     A7 12 02 FB | 	rdlong	arg01, fp
20ab0     00 14 06 F6 | 	mov	arg02, #0
20ab4     E8 A3 B0 FD | 	call	#__system___float_tointeger
20ab8     A7 FA 61 FC | 	wrlong	result1, fp
20abc                 | LR__2590
20abc                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
20abc     14 4E 05 F1 | 	add	fp, #20
20ac0     A7 92 02 FB | 	rdlong	muldivb_, fp
20ac4     14 4E 85 F1 | 	sub	fp, #20
20ac8     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
20acc     28 00 90 5D |  if_ne	jmp	#LR__2591
20ad0     14 4E 05 F1 | 	add	fp, #20
20ad4     A7 38 68 FC | 	wrlong	#28, fp
20ad8     08 4E 85 F1 | 	sub	fp, #8
20adc     A7 12 02 FB | 	rdlong	arg01, fp
20ae0     0C 4E 85 F1 | 	sub	fp, #12
20ae4     00 14 06 F6 | 	mov	arg02, #0
20ae8     B4 A3 B0 FD | 	call	#__system___float_tointeger
20aec     0C 4E 05 F1 | 	add	fp, #12
20af0     A7 FA 61 FC | 	wrlong	result1, fp
20af4     0C 4E 85 F1 | 	sub	fp, #12
20af8                 | LR__2591
20af8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
20af8     08 4E 05 F1 | 	add	fp, #8
20afc     A7 92 02 FB | 	rdlong	muldivb_, fp
20b00     08 4E 85 F1 | 	sub	fp, #8
20b04     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
20b08     14 4E 05 A1 |  if_e	add	fp, #20
20b0c     A7 26 02 AB |  if_e	rdlong	local01, fp
20b10     14 4E 85 A1 |  if_e	sub	fp, #20
20b14     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
20b18     20 00 90 5D |  if_ne	jmp	#LR__2592
20b1c     0C 4E 05 F1 | 	add	fp, #12
20b20     A7 26 02 FB | 	rdlong	local01, fp
20b24     0C 4E 85 F1 | 	sub	fp, #12
20b28     A7 92 02 FB | 	rdlong	muldivb_, fp
20b2c     13 93 12 FD | 	qdiv	muldivb_, local01
20b30     19 26 62 FD | 	getqy	local01
20b34     A7 26 62 FC | 	wrlong	local01, fp
20b38     E0 00 90 FD | 	jmp	#LR__2596
20b3c                 | LR__2592
20b3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
20b3c     08 4E 05 F1 | 	add	fp, #8
20b40     A7 92 02 FB | 	rdlong	muldivb_, fp
20b44     08 4E 85 F1 | 	sub	fp, #8
20b48     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
20b4c     14 4E 05 A1 |  if_e	add	fp, #20
20b50     A7 26 02 AB |  if_e	rdlong	local01, fp
20b54     14 4E 85 A1 |  if_e	sub	fp, #20
20b58     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
20b5c     2C 00 90 5D |  if_ne	jmp	#LR__2593
20b60     0C 4E 05 F1 | 	add	fp, #12
20b64     A7 26 02 FB | 	rdlong	local01, fp
20b68     0C 4E 85 F1 | 	sub	fp, #12
20b6c     A7 92 02 FB | 	rdlong	muldivb_, fp
20b70     13 93 12 FD | 	qdiv	muldivb_, local01
20b74     19 26 62 FD | 	getqy	local01
20b78     A7 26 62 FC | 	wrlong	local01, fp
20b7c     08 4E 05 F1 | 	add	fp, #8
20b80     A7 38 68 FC | 	wrlong	#28, fp
20b84     08 4E 85 F1 | 	sub	fp, #8
20b88     90 00 90 FD | 	jmp	#LR__2596
20b8c                 | LR__2593
20b8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
20b8c     08 4E 05 F1 | 	add	fp, #8
20b90     A7 92 02 FB | 	rdlong	muldivb_, fp
20b94     08 4E 85 F1 | 	sub	fp, #8
20b98     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
20b9c     14 4E 05 A1 |  if_e	add	fp, #20
20ba0     A7 26 02 AB |  if_e	rdlong	local01, fp
20ba4     14 4E 85 A1 |  if_e	sub	fp, #20
20ba8     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
20bac     1C 00 90 5D |  if_ne	jmp	#LR__2594
20bb0     A7 90 02 FB | 	rdlong	muldiva_, fp
20bb4     0C 4E 05 F1 | 	add	fp, #12
20bb8     A7 92 02 FB | 	rdlong	muldivb_, fp
20bbc     0C 4E 85 F1 | 	sub	fp, #12
20bc0     BA 00 A0 FD | 	call	#divide_
20bc4     A7 90 62 FC | 	wrlong	muldiva_, fp
20bc8     50 00 90 FD | 	jmp	#LR__2596
20bcc                 | LR__2594
20bcc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
20bcc     08 4E 05 F1 | 	add	fp, #8
20bd0     A7 92 02 FB | 	rdlong	muldivb_, fp
20bd4     08 4E 85 F1 | 	sub	fp, #8
20bd8     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
20bdc     14 4E 05 A1 |  if_e	add	fp, #20
20be0     A7 26 02 AB |  if_e	rdlong	local01, fp
20be4     14 4E 85 A1 |  if_e	sub	fp, #20
20be8     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
20bec     1C 00 90 5D |  if_ne	jmp	#LR__2595
20bf0     A7 90 02 FB | 	rdlong	muldiva_, fp
20bf4     0C 4E 05 F1 | 	add	fp, #12
20bf8     A7 92 02 FB | 	rdlong	muldivb_, fp
20bfc     0C 4E 85 F1 | 	sub	fp, #12
20c00     BA 00 A0 FD | 	call	#divide_
20c04     A7 90 62 FC | 	wrlong	muldiva_, fp
20c08     10 00 90 FD | 	jmp	#LR__2596
20c0c                 | LR__2595
20c0c     A7 16 68 FC | 	wrlong	#11, fp
20c10     08 4E 05 F1 | 	add	fp, #8
20c14     A7 FE 69 FC | 	wrlong	#255, fp
20c18     08 4E 85 F1 | 	sub	fp, #8
20c1c                 | LR__2596
20c1c     A7 12 02 F6 | 	mov	arg01, fp
20c20     94 CC BE FD | 	call	#_push
20c24     A7 F0 03 F6 | 	mov	ptra, fp
20c28     B2 00 A0 FD | 	call	#popregs_
20c2c                 | _do_mod_ret
20c2c     2D 00 64 FD | 	ret
20c30                 | 
20c30                 | ' 
20c30                 | ' '--------------------------------- mul (*)
20c30                 | ' 
20c30                 | ' sub do_mul
20c30                 | _do_mul
20c30     05 4A 05 F6 | 	mov	COUNT_, #5
20c34     A8 00 A0 FD | 	call	#pushregs_
20c38     18 F0 07 F1 | 	add	ptra, #24
20c3c     E0 CB BE FD | 	call	#_pop
20c40     FD 26 02 F6 | 	mov	local01, result1
20c44     FE 28 02 F6 | 	mov	local02, result2
20c48     FF 2A 02 F6 | 	mov	local03, result3
20c4c     0C 4E 05 F1 | 	add	fp, #12
20c50     A7 26 62 FC | 	wrlong	local01, fp
20c54     04 4E 05 F1 | 	add	fp, #4
20c58     A7 28 62 FC | 	wrlong	local02, fp
20c5c     04 4E 05 F1 | 	add	fp, #4
20c60     A7 2A 62 FC | 	wrlong	local03, fp
20c64     14 4E 85 F1 | 	sub	fp, #20
20c68     B4 CB BE FD | 	call	#_pop
20c6c     FF 2A 02 F6 | 	mov	local03, result3
20c70     A7 FA 61 FC | 	wrlong	result1, fp
20c74     04 4E 05 F1 | 	add	fp, #4
20c78     A7 FC 61 FC | 	wrlong	result2, fp
20c7c     04 4E 05 F1 | 	add	fp, #4
20c80     A7 2A 62 FC | 	wrlong	local03, fp
20c84                 | ' 
20c84                 | ' t2=pop()
20c84                 | ' t1=pop()
20c84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
20c84     08 4E 85 F1 | 	sub	fp, #8
20c88     1D 2A 0E F2 | 	cmp	local03, #29 wz
20c8c     14 4E 05 A1 |  if_e	add	fp, #20
20c90     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c94     14 4E 85 A1 |  if_e	sub	fp, #20
20c98     16 2B 02 A6 |  if_e	mov	local03, local04
20c9c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20ca0     20 00 90 5D |  if_ne	jmp	#LR__2600
20ca4     A7 28 02 FB | 	rdlong	local02, fp
20ca8     0C 4E 05 F1 | 	add	fp, #12
20cac     A7 2A 02 FB | 	rdlong	local03, fp
20cb0     15 29 02 FD | 	qmul	local02, local03
20cb4     0C 4E 85 F1 | 	sub	fp, #12
20cb8     18 26 62 FD | 	getqx	local01
20cbc     A7 26 62 FC | 	wrlong	local01, fp
20cc0     C4 02 90 FD | 	jmp	#LR__2609
20cc4                 | LR__2600
20cc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
20cc4     08 4E 05 F1 | 	add	fp, #8
20cc8     A7 26 02 FB | 	rdlong	local01, fp
20ccc     08 4E 85 F1 | 	sub	fp, #8
20cd0     1D 26 0E F2 | 	cmp	local01, #29 wz
20cd4     14 4E 05 A1 |  if_e	add	fp, #20
20cd8     A7 2C 02 AB |  if_e	rdlong	local04, fp
20cdc     14 4E 85 A1 |  if_e	sub	fp, #20
20ce0     16 2B 02 A6 |  if_e	mov	local03, local04
20ce4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20ce8     2C 00 90 5D |  if_ne	jmp	#LR__2601
20cec     A7 28 02 FB | 	rdlong	local02, fp
20cf0     0C 4E 05 F1 | 	add	fp, #12
20cf4     A7 2A 02 FB | 	rdlong	local03, fp
20cf8     15 29 02 FD | 	qmul	local02, local03
20cfc     0C 4E 85 F1 | 	sub	fp, #12
20d00     18 26 62 FD | 	getqx	local01
20d04     A7 26 62 FC | 	wrlong	local01, fp
20d08     08 4E 05 F1 | 	add	fp, #8
20d0c     A7 38 68 FC | 	wrlong	#28, fp
20d10     08 4E 85 F1 | 	sub	fp, #8
20d14     70 02 90 FD | 	jmp	#LR__2609
20d18                 | LR__2601
20d18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
20d18     08 4E 05 F1 | 	add	fp, #8
20d1c     A7 26 02 FB | 	rdlong	local01, fp
20d20     08 4E 85 F1 | 	sub	fp, #8
20d24     1D 26 0E F2 | 	cmp	local01, #29 wz
20d28     14 4E 05 A1 |  if_e	add	fp, #20
20d2c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20d30     14 4E 85 A1 |  if_e	sub	fp, #20
20d34     16 2B 02 A6 |  if_e	mov	local03, local04
20d38     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20d3c     30 00 90 5D |  if_ne	jmp	#LR__2602
20d40     A7 12 02 FB | 	rdlong	arg01, fp
20d44     8C 98 B0 FD | 	call	#__system___float_fromuns
20d48     FD 12 02 F6 | 	mov	arg01, result1
20d4c     0C 4E 05 F1 | 	add	fp, #12
20d50     A7 14 02 FB | 	rdlong	arg02, fp
20d54     0C 4E 85 F1 | 	sub	fp, #12
20d58     7C 9C B0 FD | 	call	#__system___float_mul
20d5c     A7 FA 61 FC | 	wrlong	result1, fp
20d60     08 4E 05 F1 | 	add	fp, #8
20d64     A7 3C 68 FC | 	wrlong	#30, fp
20d68     08 4E 85 F1 | 	sub	fp, #8
20d6c     18 02 90 FD | 	jmp	#LR__2609
20d70                 | LR__2602
20d70                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
20d70     08 4E 05 F1 | 	add	fp, #8
20d74     A7 26 02 FB | 	rdlong	local01, fp
20d78     08 4E 85 F1 | 	sub	fp, #8
20d7c     1C 26 0E F2 | 	cmp	local01, #28 wz
20d80     14 4E 05 A1 |  if_e	add	fp, #20
20d84     A7 2C 02 AB |  if_e	rdlong	local04, fp
20d88     14 4E 85 A1 |  if_e	sub	fp, #20
20d8c     16 2B 02 A6 |  if_e	mov	local03, local04
20d90     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20d94     20 00 90 5D |  if_ne	jmp	#LR__2603
20d98     A7 28 02 FB | 	rdlong	local02, fp
20d9c     0C 4E 05 F1 | 	add	fp, #12
20da0     A7 2A 02 FB | 	rdlong	local03, fp
20da4     15 29 02 FD | 	qmul	local02, local03
20da8     0C 4E 85 F1 | 	sub	fp, #12
20dac     18 26 62 FD | 	getqx	local01
20db0     A7 26 62 FC | 	wrlong	local01, fp
20db4     D0 01 90 FD | 	jmp	#LR__2609
20db8                 | LR__2603
20db8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
20db8     08 4E 05 F1 | 	add	fp, #8
20dbc     A7 26 02 FB | 	rdlong	local01, fp
20dc0     08 4E 85 F1 | 	sub	fp, #8
20dc4     1C 26 0E F2 | 	cmp	local01, #28 wz
20dc8     14 4E 05 A1 |  if_e	add	fp, #20
20dcc     A7 2C 02 AB |  if_e	rdlong	local04, fp
20dd0     14 4E 85 A1 |  if_e	sub	fp, #20
20dd4     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
20dd8     20 00 90 5D |  if_ne	jmp	#LR__2604
20ddc     A7 28 02 FB | 	rdlong	local02, fp
20de0     0C 4E 05 F1 | 	add	fp, #12
20de4     A7 2A 02 FB | 	rdlong	local03, fp
20de8     15 29 02 FD | 	qmul	local02, local03
20dec     0C 4E 85 F1 | 	sub	fp, #12
20df0     18 26 62 FD | 	getqx	local01
20df4     A7 26 62 FC | 	wrlong	local01, fp
20df8     8C 01 90 FD | 	jmp	#LR__2609
20dfc                 | LR__2604
20dfc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
20dfc     08 4E 05 F1 | 	add	fp, #8
20e00     A7 26 02 FB | 	rdlong	local01, fp
20e04     08 4E 85 F1 | 	sub	fp, #8
20e08     1C 26 0E F2 | 	cmp	local01, #28 wz
20e0c     14 4E 05 A1 |  if_e	add	fp, #20
20e10     A7 2A 02 AB |  if_e	rdlong	local03, fp
20e14     14 4E 85 A1 |  if_e	sub	fp, #20
20e18     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20e1c     40 00 90 5D |  if_ne	jmp	#LR__2605
20e20     A7 12 02 FB | 	rdlong	arg01, fp
20e24     09 13 52 F6 | 	abs	arg01, arg01 wc
20e28     1F 2E C6 C9 |  if_b	decod	local05, #31
20e2c     00 2E 06 36 |  if_ae	mov	local05, #0
20e30     A0 97 B0 FD | 	call	#__system___float_fromuns
20e34     17 FB 61 F5 | 	xor	result1, local05
20e38     FD 12 02 F6 | 	mov	arg01, result1
20e3c     0C 4E 05 F1 | 	add	fp, #12
20e40     A7 14 02 FB | 	rdlong	arg02, fp
20e44     0C 4E 85 F1 | 	sub	fp, #12
20e48     8C 9B B0 FD | 	call	#__system___float_mul
20e4c     A7 FA 61 FC | 	wrlong	result1, fp
20e50     08 4E 05 F1 | 	add	fp, #8
20e54     A7 3C 68 FC | 	wrlong	#30, fp
20e58     08 4E 85 F1 | 	sub	fp, #8
20e5c     28 01 90 FD | 	jmp	#LR__2609
20e60                 | LR__2605
20e60                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
20e60     08 4E 05 F1 | 	add	fp, #8
20e64     A7 26 02 FB | 	rdlong	local01, fp
20e68     08 4E 85 F1 | 	sub	fp, #8
20e6c     1E 26 0E F2 | 	cmp	local01, #30 wz
20e70     14 4E 05 A1 |  if_e	add	fp, #20
20e74     A7 2A 02 AB |  if_e	rdlong	local03, fp
20e78     14 4E 85 A1 |  if_e	sub	fp, #20
20e7c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20e80     28 00 90 5D |  if_ne	jmp	#LR__2606
20e84     A7 26 02 FB | 	rdlong	local01, fp
20e88     0C 4E 05 F1 | 	add	fp, #12
20e8c     A7 12 02 FB | 	rdlong	arg01, fp
20e90     0C 4E 85 F1 | 	sub	fp, #12
20e94     3C 97 B0 FD | 	call	#__system___float_fromuns
20e98     FD 14 02 F6 | 	mov	arg02, result1
20e9c     13 13 02 F6 | 	mov	arg01, local01
20ea0     34 9B B0 FD | 	call	#__system___float_mul
20ea4     A7 FA 61 FC | 	wrlong	result1, fp
20ea8     DC 00 90 FD | 	jmp	#LR__2609
20eac                 | LR__2606
20eac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
20eac     08 4E 05 F1 | 	add	fp, #8
20eb0     A7 26 02 FB | 	rdlong	local01, fp
20eb4     08 4E 85 F1 | 	sub	fp, #8
20eb8     1E 26 0E F2 | 	cmp	local01, #30 wz
20ebc     14 4E 05 A1 |  if_e	add	fp, #20
20ec0     A7 2A 02 AB |  if_e	rdlong	local03, fp
20ec4     14 4E 85 A1 |  if_e	sub	fp, #20
20ec8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20ecc     38 00 90 5D |  if_ne	jmp	#LR__2607
20ed0     A7 26 02 FB | 	rdlong	local01, fp
20ed4     0C 4E 05 F1 | 	add	fp, #12
20ed8     A7 12 02 FB | 	rdlong	arg01, fp
20edc     0C 4E 85 F1 | 	sub	fp, #12
20ee0     09 13 52 F6 | 	abs	arg01, arg01 wc
20ee4     1F 2E C6 C9 |  if_b	decod	local05, #31
20ee8     00 2E 06 36 |  if_ae	mov	local05, #0
20eec     E4 96 B0 FD | 	call	#__system___float_fromuns
20ef0     17 FB 61 F5 | 	xor	result1, local05
20ef4     FD 14 02 F6 | 	mov	arg02, result1
20ef8     13 13 02 F6 | 	mov	arg01, local01
20efc     D8 9A B0 FD | 	call	#__system___float_mul
20f00     A7 FA 61 FC | 	wrlong	result1, fp
20f04     80 00 90 FD | 	jmp	#LR__2609
20f08                 | LR__2607
20f08                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
20f08     08 4E 05 F1 | 	add	fp, #8
20f0c     A7 26 02 FB | 	rdlong	local01, fp
20f10     08 4E 85 F1 | 	sub	fp, #8
20f14     1E 26 0E F2 | 	cmp	local01, #30 wz
20f18     14 4E 05 A1 |  if_e	add	fp, #20
20f1c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20f20     14 4E 85 A1 |  if_e	sub	fp, #20
20f24     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20f28     1C 00 90 5D |  if_ne	jmp	#LR__2608
20f2c     A7 12 02 FB | 	rdlong	arg01, fp
20f30     0C 4E 05 F1 | 	add	fp, #12
20f34     A7 14 02 FB | 	rdlong	arg02, fp
20f38     0C 4E 85 F1 | 	sub	fp, #12
20f3c     98 9A B0 FD | 	call	#__system___float_mul
20f40     A7 FA 61 FC | 	wrlong	result1, fp
20f44     40 00 90 FD | 	jmp	#LR__2609
20f48                 | LR__2608
20f48                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
20f48     08 4E 05 F1 | 	add	fp, #8
20f4c     A7 26 02 FB | 	rdlong	local01, fp
20f50     08 4E 85 F1 | 	sub	fp, #8
20f54     1F 26 0E F2 | 	cmp	local01, #31 wz
20f58     14 4E 05 51 |  if_ne	add	fp, #20
20f5c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20f60     14 4E 85 51 |  if_ne	sub	fp, #20
20f64     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
20f68     A7 10 68 AC |  if_e	wrlong	#8, fp
20f6c     08 4E 05 A1 |  if_e	add	fp, #8
20f70     A7 FE 69 AC |  if_e	wrlong	#255, fp
20f74     08 4E 85 A1 |  if_e	sub	fp, #8
20f78     A7 12 68 5C |  if_ne	wrlong	#9, fp
20f7c     08 4E 05 51 |  if_ne	add	fp, #8
20f80     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20f84     08 4E 85 51 |  if_ne	sub	fp, #8
20f88                 | LR__2609
20f88     A7 12 02 F6 | 	mov	arg01, fp
20f8c     28 C9 BE FD | 	call	#_push
20f90     A7 F0 03 F6 | 	mov	ptra, fp
20f94     B2 00 A0 FD | 	call	#popregs_
20f98                 | _do_mul_ret
20f98     2D 00 64 FD | 	ret
20f9c                 | 
20f9c                 | ' 
20f9c                 | ' '--------------------------------- not equal (<>)
20f9c                 | ' 
20f9c                 | ' sub do_ne
20f9c                 | _do_ne
20f9c     05 4A 05 F6 | 	mov	COUNT_, #5
20fa0     A8 00 A0 FD | 	call	#pushregs_
20fa4     18 F0 07 F1 | 	add	ptra, #24
20fa8     74 C8 BE FD | 	call	#_pop
20fac     FD 26 02 F6 | 	mov	local01, result1
20fb0     FE 28 02 F6 | 	mov	local02, result2
20fb4     FF 2A 02 F6 | 	mov	local03, result3
20fb8     0C 4E 05 F1 | 	add	fp, #12
20fbc     A7 26 62 FC | 	wrlong	local01, fp
20fc0     04 4E 05 F1 | 	add	fp, #4
20fc4     A7 28 62 FC | 	wrlong	local02, fp
20fc8     04 4E 05 F1 | 	add	fp, #4
20fcc     A7 2A 62 FC | 	wrlong	local03, fp
20fd0     14 4E 85 F1 | 	sub	fp, #20
20fd4     48 C8 BE FD | 	call	#_pop
20fd8     FF 2A 02 F6 | 	mov	local03, result3
20fdc     A7 FA 61 FC | 	wrlong	result1, fp
20fe0     04 4E 05 F1 | 	add	fp, #4
20fe4     A7 FC 61 FC | 	wrlong	result2, fp
20fe8     04 4E 05 F1 | 	add	fp, #4
20fec     A7 2A 62 FC | 	wrlong	local03, fp
20ff0                 | ' 
20ff0                 | ' t2=pop()
20ff0                 | ' t1=pop()
20ff0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
20ff0     08 4E 85 F1 | 	sub	fp, #8
20ff4     1F 2A 0E F2 | 	cmp	local03, #31 wz
20ff8     14 4E 05 A1 |  if_e	add	fp, #20
20ffc     A7 2C 02 AB |  if_e	rdlong	local04, fp
21000     14 4E 85 A1 |  if_e	sub	fp, #20
21004     16 2B 02 A6 |  if_e	mov	local03, local04
21008     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
2100c     28 00 90 5D |  if_ne	jmp	#LR__2610
21010     00 26 06 F6 | 	mov	local01, #0
21014     A7 12 02 FB | 	rdlong	arg01, fp
21018     0C 4E 05 F1 | 	add	fp, #12
2101c     A7 14 02 FB | 	rdlong	arg02, fp
21020     0C 4E 85 F1 | 	sub	fp, #12
21024     5C 6B B0 FD | 	call	#__system___string_cmp
21028     00 FA 0D F2 | 	cmp	result1, #0 wz
2102c     00 26 26 56 |  if_ne	not	local01, #0
21030     A7 26 62 FC | 	wrlong	local01, fp
21034     20 04 90 FD | 	jmp	#LR__2623
21038                 | LR__2610
21038                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
21038     08 4E 05 F1 | 	add	fp, #8
2103c     A7 26 02 FB | 	rdlong	local01, fp
21040     08 4E 85 F1 | 	sub	fp, #8
21044     1E 26 0E F2 | 	cmp	local01, #30 wz
21048     14 4E 05 A1 |  if_e	add	fp, #20
2104c     A7 2C 02 AB |  if_e	rdlong	local04, fp
21050     14 4E 85 A1 |  if_e	sub	fp, #20
21054     16 2B 02 A6 |  if_e	mov	local03, local04
21058     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
2105c     2C 00 90 5D |  if_ne	jmp	#LR__2611
21060     00 26 06 F6 | 	mov	local01, #0
21064     A7 12 02 FB | 	rdlong	arg01, fp
21068     0C 4E 05 F1 | 	add	fp, #12
2106c     A7 14 02 FB | 	rdlong	arg02, fp
21070     0C 4E 85 F1 | 	sub	fp, #12
21074     01 16 06 F6 | 	mov	arg03, #1
21078     90 9D B0 FD | 	call	#__system___float_cmp
2107c     00 FA 0D F2 | 	cmp	result1, #0 wz
21080     00 26 26 56 |  if_ne	not	local01, #0
21084     A7 26 62 FC | 	wrlong	local01, fp
21088     CC 03 90 FD | 	jmp	#LR__2623
2108c                 | LR__2611
2108c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
2108c     08 4E 05 F1 | 	add	fp, #8
21090     A7 26 02 FB | 	rdlong	local01, fp
21094     08 4E 85 F1 | 	sub	fp, #8
21098     1E 26 0E F2 | 	cmp	local01, #30 wz
2109c     14 4E 05 A1 |  if_e	add	fp, #20
210a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
210a4     14 4E 85 A1 |  if_e	sub	fp, #20
210a8     16 2B 02 A6 |  if_e	mov	local03, local04
210ac     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
210b0     48 00 90 5D |  if_ne	jmp	#LR__2612
210b4     00 26 06 F6 | 	mov	local01, #0
210b8     A7 28 02 FB | 	rdlong	local02, fp
210bc     0C 4E 05 F1 | 	add	fp, #12
210c0     A7 12 02 FB | 	rdlong	arg01, fp
210c4     0C 4E 85 F1 | 	sub	fp, #12
210c8     09 13 52 F6 | 	abs	arg01, arg01 wc
210cc     1F 2E C6 C9 |  if_b	decod	local05, #31
210d0     00 2E 06 36 |  if_ae	mov	local05, #0
210d4     FC 94 B0 FD | 	call	#__system___float_fromuns
210d8     17 FB 61 F5 | 	xor	result1, local05
210dc     FD 14 02 F6 | 	mov	arg02, result1
210e0     14 13 02 F6 | 	mov	arg01, local02
210e4     01 16 06 F6 | 	mov	arg03, #1
210e8     20 9D B0 FD | 	call	#__system___float_cmp
210ec     00 FA 0D F2 | 	cmp	result1, #0 wz
210f0     00 26 26 56 |  if_ne	not	local01, #0
210f4     A7 26 62 FC | 	wrlong	local01, fp
210f8     5C 03 90 FD | 	jmp	#LR__2623
210fc                 | LR__2612
210fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
210fc     08 4E 05 F1 | 	add	fp, #8
21100     A7 26 02 FB | 	rdlong	local01, fp
21104     08 4E 85 F1 | 	sub	fp, #8
21108     1E 26 0E F2 | 	cmp	local01, #30 wz
2110c     14 4E 05 A1 |  if_e	add	fp, #20
21110     A7 2C 02 AB |  if_e	rdlong	local04, fp
21114     14 4E 85 A1 |  if_e	sub	fp, #20
21118     16 2B 02 A6 |  if_e	mov	local03, local04
2111c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21120     38 00 90 5D |  if_ne	jmp	#LR__2613
21124     00 26 06 F6 | 	mov	local01, #0
21128     A7 28 02 FB | 	rdlong	local02, fp
2112c     0C 4E 05 F1 | 	add	fp, #12
21130     A7 12 02 FB | 	rdlong	arg01, fp
21134     0C 4E 85 F1 | 	sub	fp, #12
21138     98 94 B0 FD | 	call	#__system___float_fromuns
2113c     FD 14 02 F6 | 	mov	arg02, result1
21140     14 13 02 F6 | 	mov	arg01, local02
21144     01 16 06 F6 | 	mov	arg03, #1
21148     C0 9C B0 FD | 	call	#__system___float_cmp
2114c     00 FA 0D F2 | 	cmp	result1, #0 wz
21150     00 26 26 56 |  if_ne	not	local01, #0
21154     A7 26 62 FC | 	wrlong	local01, fp
21158     FC 02 90 FD | 	jmp	#LR__2623
2115c                 | LR__2613
2115c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
2115c     08 4E 05 F1 | 	add	fp, #8
21160     A7 26 02 FB | 	rdlong	local01, fp
21164     08 4E 85 F1 | 	sub	fp, #8
21168     1C 26 0E F2 | 	cmp	local01, #28 wz
2116c     14 4E 05 A1 |  if_e	add	fp, #20
21170     A7 2C 02 AB |  if_e	rdlong	local04, fp
21174     14 4E 85 A1 |  if_e	sub	fp, #20
21178     16 2B 02 A6 |  if_e	mov	local03, local04
2117c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21180     44 00 90 5D |  if_ne	jmp	#LR__2614
21184     00 26 06 F6 | 	mov	local01, #0
21188     A7 12 02 FB | 	rdlong	arg01, fp
2118c     09 13 52 F6 | 	abs	arg01, arg01 wc
21190     1F 2E C6 C9 |  if_b	decod	local05, #31
21194     00 2E 06 36 |  if_ae	mov	local05, #0
21198     38 94 B0 FD | 	call	#__system___float_fromuns
2119c     17 FB 61 F5 | 	xor	result1, local05
211a0     FD 12 02 F6 | 	mov	arg01, result1
211a4     0C 4E 05 F1 | 	add	fp, #12
211a8     A7 14 02 FB | 	rdlong	arg02, fp
211ac     0C 4E 85 F1 | 	sub	fp, #12
211b0     01 16 06 F6 | 	mov	arg03, #1
211b4     54 9C B0 FD | 	call	#__system___float_cmp
211b8     00 FA 0D F2 | 	cmp	result1, #0 wz
211bc     00 26 26 56 |  if_ne	not	local01, #0
211c0     A7 26 62 FC | 	wrlong	local01, fp
211c4     90 02 90 FD | 	jmp	#LR__2623
211c8                 | LR__2614
211c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
211c8     08 4E 05 F1 | 	add	fp, #8
211cc     A7 26 02 FB | 	rdlong	local01, fp
211d0     08 4E 85 F1 | 	sub	fp, #8
211d4     1C 26 0E F2 | 	cmp	local01, #28 wz
211d8     14 4E 05 A1 |  if_e	add	fp, #20
211dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
211e0     14 4E 85 A1 |  if_e	sub	fp, #20
211e4     16 2B 02 A6 |  if_e	mov	local03, local04
211e8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
211ec     24 00 90 5D |  if_ne	jmp	#LR__2615
211f0     00 26 06 F6 | 	mov	local01, #0
211f4     A7 28 02 FB | 	rdlong	local02, fp
211f8     0C 4E 05 F1 | 	add	fp, #12
211fc     A7 2A 02 FB | 	rdlong	local03, fp
21200     0C 4E 85 F1 | 	sub	fp, #12
21204     15 29 0A F2 | 	cmp	local02, local03 wz
21208     01 26 66 56 |  if_ne	neg	local01, #1
2120c     A7 26 62 FC | 	wrlong	local01, fp
21210     44 02 90 FD | 	jmp	#LR__2623
21214                 | LR__2615
21214                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
21214     08 4E 05 F1 | 	add	fp, #8
21218     A7 26 02 FB | 	rdlong	local01, fp
2121c     08 4E 85 F1 | 	sub	fp, #8
21220     1C 26 0E F2 | 	cmp	local01, #28 wz
21224     14 4E 05 A1 |  if_e	add	fp, #20
21228     A7 2C 02 AB |  if_e	rdlong	local04, fp
2122c     14 4E 85 A1 |  if_e	sub	fp, #20
21230     16 2B 02 A6 |  if_e	mov	local03, local04
21234     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21238     24 00 90 5D |  if_ne	jmp	#LR__2616
2123c     00 26 06 F6 | 	mov	local01, #0
21240     A7 28 02 FB | 	rdlong	local02, fp
21244     0C 4E 05 F1 | 	add	fp, #12
21248     A7 2A 02 FB | 	rdlong	local03, fp
2124c     0C 4E 85 F1 | 	sub	fp, #12
21250     15 29 0A F2 | 	cmp	local02, local03 wz
21254     01 26 66 56 |  if_ne	neg	local01, #1
21258     A7 26 62 FC | 	wrlong	local01, fp
2125c     F8 01 90 FD | 	jmp	#LR__2623
21260                 | LR__2616
21260                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
21260     08 4E 05 F1 | 	add	fp, #8
21264     A7 26 02 FB | 	rdlong	local01, fp
21268     08 4E 85 F1 | 	sub	fp, #8
2126c     1D 26 0E F2 | 	cmp	local01, #29 wz
21270     14 4E 05 A1 |  if_e	add	fp, #20
21274     A7 2C 02 AB |  if_e	rdlong	local04, fp
21278     14 4E 85 A1 |  if_e	sub	fp, #20
2127c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
21280     34 00 90 5D |  if_ne	jmp	#LR__2617
21284     00 26 06 F6 | 	mov	local01, #0
21288     A7 12 02 FB | 	rdlong	arg01, fp
2128c     44 93 B0 FD | 	call	#__system___float_fromuns
21290     FD 12 02 F6 | 	mov	arg01, result1
21294     0C 4E 05 F1 | 	add	fp, #12
21298     A7 14 02 FB | 	rdlong	arg02, fp
2129c     0C 4E 85 F1 | 	sub	fp, #12
212a0     01 16 06 F6 | 	mov	arg03, #1
212a4     64 9B B0 FD | 	call	#__system___float_cmp
212a8     00 FA 0D F2 | 	cmp	result1, #0 wz
212ac     00 26 26 56 |  if_ne	not	local01, #0
212b0     A7 26 62 FC | 	wrlong	local01, fp
212b4     A0 01 90 FD | 	jmp	#LR__2623
212b8                 | LR__2617
212b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
212b8     08 4E 05 F1 | 	add	fp, #8
212bc     A7 26 02 FB | 	rdlong	local01, fp
212c0     08 4E 85 F1 | 	sub	fp, #8
212c4     1D 26 0E F2 | 	cmp	local01, #29 wz
212c8     14 4E 05 A1 |  if_e	add	fp, #20
212cc     A7 2A 02 AB |  if_e	rdlong	local03, fp
212d0     14 4E 85 A1 |  if_e	sub	fp, #20
212d4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
212d8     24 00 90 5D |  if_ne	jmp	#LR__2618
212dc     00 26 06 F6 | 	mov	local01, #0
212e0     A7 28 02 FB | 	rdlong	local02, fp
212e4     0C 4E 05 F1 | 	add	fp, #12
212e8     A7 2A 02 FB | 	rdlong	local03, fp
212ec     0C 4E 85 F1 | 	sub	fp, #12
212f0     15 29 0A F2 | 	cmp	local02, local03 wz
212f4     01 26 66 56 |  if_ne	neg	local01, #1
212f8     A7 26 62 FC | 	wrlong	local01, fp
212fc     58 01 90 FD | 	jmp	#LR__2623
21300                 | LR__2618
21300                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
21300     08 4E 05 F1 | 	add	fp, #8
21304     A7 26 02 FB | 	rdlong	local01, fp
21308     08 4E 85 F1 | 	sub	fp, #8
2130c     1D 26 0E F2 | 	cmp	local01, #29 wz
21310     14 4E 05 A1 |  if_e	add	fp, #20
21314     A7 2A 02 AB |  if_e	rdlong	local03, fp
21318     14 4E 85 A1 |  if_e	sub	fp, #20
2131c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21320     24 00 90 5D |  if_ne	jmp	#LR__2619
21324     00 26 06 F6 | 	mov	local01, #0
21328     A7 28 02 FB | 	rdlong	local02, fp
2132c     0C 4E 05 F1 | 	add	fp, #12
21330     A7 2A 02 FB | 	rdlong	local03, fp
21334     0C 4E 85 F1 | 	sub	fp, #12
21338     15 29 0A F2 | 	cmp	local02, local03 wz
2133c     01 26 66 56 |  if_ne	neg	local01, #1
21340     A7 26 62 FC | 	wrlong	local01, fp
21344     10 01 90 FD | 	jmp	#LR__2623
21348                 | LR__2619
21348                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
21348     08 4E 05 F1 | 	add	fp, #8
2134c     A7 26 02 FB | 	rdlong	local01, fp
21350     08 4E 85 F1 | 	sub	fp, #8
21354     2B 26 0E F2 | 	cmp	local01, #43 wz
21358     14 4E 05 A1 |  if_e	add	fp, #20
2135c     A7 2A 02 AB |  if_e	rdlong	local03, fp
21360     14 4E 85 A1 |  if_e	sub	fp, #20
21364     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
21368     30 00 90 5D |  if_ne	jmp	#LR__2620
2136c     00 26 06 F6 | 	mov	local01, #0
21370     A7 12 02 FB | 	rdlong	arg01, fp
21374     20 C6 BE FD | 	call	#_convertstring
21378     FD 12 02 F6 | 	mov	arg01, result1
2137c     0C 4E 05 F1 | 	add	fp, #12
21380     A7 14 02 FB | 	rdlong	arg02, fp
21384     0C 4E 85 F1 | 	sub	fp, #12
21388     F8 67 B0 FD | 	call	#__system___string_cmp
2138c     00 FA 0D F2 | 	cmp	result1, #0 wz
21390     00 26 26 56 |  if_ne	not	local01, #0
21394     A7 26 62 FC | 	wrlong	local01, fp
21398     BC 00 90 FD | 	jmp	#LR__2623
2139c                 | LR__2620
2139c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
2139c     08 4E 05 F1 | 	add	fp, #8
213a0     A7 26 02 FB | 	rdlong	local01, fp
213a4     08 4E 85 F1 | 	sub	fp, #8
213a8     1F 26 0E F2 | 	cmp	local01, #31 wz
213ac     14 4E 05 A1 |  if_e	add	fp, #20
213b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
213b4     14 4E 85 A1 |  if_e	sub	fp, #20
213b8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
213bc     34 00 90 5D |  if_ne	jmp	#LR__2621
213c0     00 26 06 F6 | 	mov	local01, #0
213c4     A7 28 02 FB | 	rdlong	local02, fp
213c8     0C 4E 05 F1 | 	add	fp, #12
213cc     A7 12 02 FB | 	rdlong	arg01, fp
213d0     0C 4E 85 F1 | 	sub	fp, #12
213d4     C0 C5 BE FD | 	call	#_convertstring
213d8     FD 14 02 F6 | 	mov	arg02, result1
213dc     14 13 02 F6 | 	mov	arg01, local02
213e0     A0 67 B0 FD | 	call	#__system___string_cmp
213e4     00 FA 0D F2 | 	cmp	result1, #0 wz
213e8     00 26 26 56 |  if_ne	not	local01, #0
213ec     A7 26 62 FC | 	wrlong	local01, fp
213f0     64 00 90 FD | 	jmp	#LR__2623
213f4                 | LR__2621
213f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
213f4     08 4E 05 F1 | 	add	fp, #8
213f8     A7 26 02 FB | 	rdlong	local01, fp
213fc     08 4E 85 F1 | 	sub	fp, #8
21400     2B 26 0E F2 | 	cmp	local01, #43 wz
21404     14 4E 05 A1 |  if_e	add	fp, #20
21408     A7 2A 02 AB |  if_e	rdlong	local03, fp
2140c     14 4E 85 A1 |  if_e	sub	fp, #20
21410     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
21414     3C 00 90 5D |  if_ne	jmp	#LR__2622
21418     00 26 06 F6 | 	mov	local01, #0
2141c     A7 12 02 FB | 	rdlong	arg01, fp
21420     74 C5 BE FD | 	call	#_convertstring
21424     FD 28 02 F6 | 	mov	local02, result1
21428     0C 4E 05 F1 | 	add	fp, #12
2142c     A7 12 02 FB | 	rdlong	arg01, fp
21430     0C 4E 85 F1 | 	sub	fp, #12
21434     60 C5 BE FD | 	call	#_convertstring
21438     FD 14 02 F6 | 	mov	arg02, result1
2143c     14 13 02 F6 | 	mov	arg01, local02
21440     40 67 B0 FD | 	call	#__system___string_cmp
21444     00 FA 0D F2 | 	cmp	result1, #0 wz
21448     00 26 26 56 |  if_ne	not	local01, #0
2144c     A7 26 62 FC | 	wrlong	local01, fp
21450     04 00 90 FD | 	jmp	#LR__2623
21454                 | LR__2622
21454     A7 00 68 FC | 	wrlong	#0, fp
21458                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
21458                 | LR__2623
21458     08 4E 05 F1 | 	add	fp, #8
2145c     A7 38 68 FC | 	wrlong	#28, fp
21460     08 4E 85 F1 | 	sub	fp, #8
21464     A7 12 02 F6 | 	mov	arg01, fp
21468     4C C4 BE FD | 	call	#_push
2146c     A7 F0 03 F6 | 	mov	ptra, fp
21470     B2 00 A0 FD | 	call	#popregs_
21474                 | _do_ne_ret
21474     2D 00 64 FD | 	ret
21478                 | 
21478                 | ' 
21478                 | ' '--------------------------------- OR
21478                 | ' 
21478                 | ' sub do_or 
21478                 | _do_or
21478     03 4A 05 F6 | 	mov	COUNT_, #3
2147c     A8 00 A0 FD | 	call	#pushregs_
21480     18 F0 07 F1 | 	add	ptra, #24
21484     98 C3 BE FD | 	call	#_pop
21488     FD 12 02 F6 | 	mov	arg01, result1
2148c     FE 26 02 F6 | 	mov	local01, result2
21490     FF 28 02 F6 | 	mov	local02, result3
21494     0C 4E 05 F1 | 	add	fp, #12
21498     A7 12 62 FC | 	wrlong	arg01, fp
2149c     04 4E 05 F1 | 	add	fp, #4
214a0     A7 26 62 FC | 	wrlong	local01, fp
214a4     04 4E 05 F1 | 	add	fp, #4
214a8     A7 28 62 FC | 	wrlong	local02, fp
214ac     14 4E 85 F1 | 	sub	fp, #20
214b0     6C C3 BE FD | 	call	#_pop
214b4     FF 2A 02 F6 | 	mov	local03, result3
214b8     A7 FA 61 FC | 	wrlong	result1, fp
214bc     04 4E 05 F1 | 	add	fp, #4
214c0     A7 FC 61 FC | 	wrlong	result2, fp
214c4     04 4E 05 F1 | 	add	fp, #4
214c8     A7 2A 62 FC | 	wrlong	local03, fp
214cc                 | ' 
214cc                 | ' t2=pop()
214cc                 | ' t1=pop()
214cc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
214cc     08 4E 85 F1 | 	sub	fp, #8
214d0     1C 2A 0E F2 | 	cmp	local03, #28 wz
214d4     A7 2A 02 AB |  if_e	rdlong	local03, fp
214d8     A7 2A 62 AC |  if_e	wrlong	local03, fp
214dc     08 4E 05 A1 |  if_e	add	fp, #8
214e0     A7 3A 68 AC |  if_e	wrlong	#29, fp
214e4     08 4E 85 A1 |  if_e	sub	fp, #8
214e8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
214e8     14 4E 05 F1 | 	add	fp, #20
214ec     A7 2A 02 FB | 	rdlong	local03, fp
214f0     14 4E 85 F1 | 	sub	fp, #20
214f4     1C 2A 0E F2 | 	cmp	local03, #28 wz
214f8     18 00 90 5D |  if_ne	jmp	#LR__2630
214fc     0C 4E 05 F1 | 	add	fp, #12
21500     A7 2A 02 FB | 	rdlong	local03, fp
21504     A7 2A 62 FC | 	wrlong	local03, fp
21508     08 4E 05 F1 | 	add	fp, #8
2150c     A7 3A 68 FC | 	wrlong	#29, fp
21510     14 4E 85 F1 | 	sub	fp, #20
21514                 | LR__2630
21514                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
21514     08 4E 05 F1 | 	add	fp, #8
21518     A7 2A 02 FB | 	rdlong	local03, fp
2151c     08 4E 85 F1 | 	sub	fp, #8
21520     1F 2A 0E F2 | 	cmp	local03, #31 wz
21524     14 4E 05 51 |  if_ne	add	fp, #20
21528     A7 28 02 5B |  if_ne	rdlong	local02, fp
2152c     14 4E 85 51 |  if_ne	sub	fp, #20
21530     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
21534     08 4E 05 51 |  if_ne	add	fp, #8
21538     A7 2A 02 5B |  if_ne	rdlong	local03, fp
2153c     08 4E 85 51 |  if_ne	sub	fp, #8
21540     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
21544     14 4E 05 51 |  if_ne	add	fp, #20
21548     14 4E 85 51 |  if_ne	sub	fp, #20
2154c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
21550     A7 0C 68 AC |  if_e	wrlong	#6, fp
21554     08 4E 05 A1 |  if_e	add	fp, #8
21558     A7 FE 69 AC |  if_e	wrlong	#255, fp
2155c     08 4E 85 A1 |  if_e	sub	fp, #8
21560     18 00 90 AD |  if_e	jmp	#LR__2631
21564     A7 2A 02 FB | 	rdlong	local03, fp
21568     0C 4E 05 F1 | 	add	fp, #12
2156c     A7 26 02 FB | 	rdlong	local01, fp
21570     0C 4E 85 F1 | 	sub	fp, #12
21574     13 2B 42 F5 | 	or	local03, local01
21578     A7 2A 62 FC | 	wrlong	local03, fp
2157c                 | LR__2631
2157c     A7 12 02 F6 | 	mov	arg01, fp
21580     34 C3 BE FD | 	call	#_push
21584     A7 F0 03 F6 | 	mov	ptra, fp
21588     B2 00 A0 FD | 	call	#popregs_
2158c                 | _do_or_ret
2158c     2D 00 64 FD | 	ret
21590                 | 
21590                 | ' 
21590                 | ' '--------------------------------- plus (+)
21590                 | ' 
21590                 | ' sub do_plus 
21590                 | _do_plus
21590     05 4A 05 F6 | 	mov	COUNT_, #5
21594     A8 00 A0 FD | 	call	#pushregs_
21598     18 F0 07 F1 | 	add	ptra, #24
2159c     80 C2 BE FD | 	call	#_pop
215a0     FD 26 02 F6 | 	mov	local01, result1
215a4     FE 28 02 F6 | 	mov	local02, result2
215a8     FF 2A 02 F6 | 	mov	local03, result3
215ac     0C 4E 05 F1 | 	add	fp, #12
215b0     A7 26 62 FC | 	wrlong	local01, fp
215b4     04 4E 05 F1 | 	add	fp, #4
215b8     A7 28 62 FC | 	wrlong	local02, fp
215bc     04 4E 05 F1 | 	add	fp, #4
215c0     A7 2A 62 FC | 	wrlong	local03, fp
215c4     14 4E 85 F1 | 	sub	fp, #20
215c8     54 C2 BE FD | 	call	#_pop
215cc     FF 2A 02 F6 | 	mov	local03, result3
215d0     A7 FA 61 FC | 	wrlong	result1, fp
215d4     04 4E 05 F1 | 	add	fp, #4
215d8     A7 FC 61 FC | 	wrlong	result2, fp
215dc     04 4E 05 F1 | 	add	fp, #4
215e0     A7 2A 62 FC | 	wrlong	local03, fp
215e4                 | ' 
215e4                 | ' t2=pop()
215e4                 | ' t1=pop()
215e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
215e4     08 4E 85 F1 | 	sub	fp, #8
215e8     1D 2A 0E F2 | 	cmp	local03, #29 wz
215ec     14 4E 05 A1 |  if_e	add	fp, #20
215f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
215f4     14 4E 85 A1 |  if_e	sub	fp, #20
215f8     16 2B 02 A6 |  if_e	mov	local03, local04
215fc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
21600     1C 00 90 5D |  if_ne	jmp	#LR__2640
21604     A7 26 02 FB | 	rdlong	local01, fp
21608     0C 4E 05 F1 | 	add	fp, #12
2160c     A7 28 02 FB | 	rdlong	local02, fp
21610     0C 4E 85 F1 | 	sub	fp, #12
21614     14 27 02 F1 | 	add	local01, local02
21618     A7 26 62 FC | 	wrlong	local01, fp
2161c     48 04 90 FD | 	jmp	#LR__2655
21620                 | LR__2640
21620                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
21620     08 4E 05 F1 | 	add	fp, #8
21624     A7 26 02 FB | 	rdlong	local01, fp
21628     08 4E 85 F1 | 	sub	fp, #8
2162c     1D 26 0E F2 | 	cmp	local01, #29 wz
21630     14 4E 05 A1 |  if_e	add	fp, #20
21634     A7 2C 02 AB |  if_e	rdlong	local04, fp
21638     14 4E 85 A1 |  if_e	sub	fp, #20
2163c     16 2B 02 A6 |  if_e	mov	local03, local04
21640     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21644     28 00 90 5D |  if_ne	jmp	#LR__2641
21648     A7 26 02 FB | 	rdlong	local01, fp
2164c     0C 4E 05 F1 | 	add	fp, #12
21650     A7 28 02 FB | 	rdlong	local02, fp
21654     0C 4E 85 F1 | 	sub	fp, #12
21658     14 27 02 F1 | 	add	local01, local02
2165c     A7 26 62 FC | 	wrlong	local01, fp
21660     08 4E 05 F1 | 	add	fp, #8
21664     A7 38 68 FC | 	wrlong	#28, fp
21668     08 4E 85 F1 | 	sub	fp, #8
2166c     F8 03 90 FD | 	jmp	#LR__2655
21670                 | LR__2641
21670                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
21670     08 4E 05 F1 | 	add	fp, #8
21674     A7 26 02 FB | 	rdlong	local01, fp
21678     08 4E 85 F1 | 	sub	fp, #8
2167c     1D 26 0E F2 | 	cmp	local01, #29 wz
21680     14 4E 05 A1 |  if_e	add	fp, #20
21684     A7 2C 02 AB |  if_e	rdlong	local04, fp
21688     14 4E 85 A1 |  if_e	sub	fp, #20
2168c     16 2B 02 A6 |  if_e	mov	local03, local04
21690     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21694     30 00 90 5D |  if_ne	jmp	#LR__2642
21698     A7 12 02 FB | 	rdlong	arg01, fp
2169c     34 8F B0 FD | 	call	#__system___float_fromuns
216a0     FD 12 02 F6 | 	mov	arg01, result1
216a4     0C 4E 05 F1 | 	add	fp, #12
216a8     A7 14 02 FB | 	rdlong	arg02, fp
216ac     0C 4E 85 F1 | 	sub	fp, #12
216b0     54 8F B0 FD | 	call	#__system___float_add
216b4     A7 FA 61 FC | 	wrlong	result1, fp
216b8     08 4E 05 F1 | 	add	fp, #8
216bc     A7 3C 68 FC | 	wrlong	#30, fp
216c0     08 4E 85 F1 | 	sub	fp, #8
216c4     A0 03 90 FD | 	jmp	#LR__2655
216c8                 | LR__2642
216c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
216c8     08 4E 05 F1 | 	add	fp, #8
216cc     A7 26 02 FB | 	rdlong	local01, fp
216d0     08 4E 85 F1 | 	sub	fp, #8
216d4     1C 26 0E F2 | 	cmp	local01, #28 wz
216d8     14 4E 05 A1 |  if_e	add	fp, #20
216dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
216e0     14 4E 85 A1 |  if_e	sub	fp, #20
216e4     16 2B 02 A6 |  if_e	mov	local03, local04
216e8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
216ec     1C 00 90 5D |  if_ne	jmp	#LR__2643
216f0     A7 26 02 FB | 	rdlong	local01, fp
216f4     0C 4E 05 F1 | 	add	fp, #12
216f8     A7 28 02 FB | 	rdlong	local02, fp
216fc     0C 4E 85 F1 | 	sub	fp, #12
21700     14 27 02 F1 | 	add	local01, local02
21704     A7 26 62 FC | 	wrlong	local01, fp
21708     5C 03 90 FD | 	jmp	#LR__2655
2170c                 | LR__2643
2170c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
2170c     08 4E 05 F1 | 	add	fp, #8
21710     A7 26 02 FB | 	rdlong	local01, fp
21714     08 4E 85 F1 | 	sub	fp, #8
21718     1C 26 0E F2 | 	cmp	local01, #28 wz
2171c     14 4E 05 A1 |  if_e	add	fp, #20
21720     A7 2C 02 AB |  if_e	rdlong	local04, fp
21724     14 4E 85 A1 |  if_e	sub	fp, #20
21728     16 2B 02 A6 |  if_e	mov	local03, local04
2172c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
21730     1C 00 90 5D |  if_ne	jmp	#LR__2644
21734     A7 26 02 FB | 	rdlong	local01, fp
21738     0C 4E 05 F1 | 	add	fp, #12
2173c     A7 28 02 FB | 	rdlong	local02, fp
21740     0C 4E 85 F1 | 	sub	fp, #12
21744     14 27 02 F1 | 	add	local01, local02
21748     A7 26 62 FC | 	wrlong	local01, fp
2174c     18 03 90 FD | 	jmp	#LR__2655
21750                 | LR__2644
21750                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
21750     08 4E 05 F1 | 	add	fp, #8
21754     A7 26 02 FB | 	rdlong	local01, fp
21758     08 4E 85 F1 | 	sub	fp, #8
2175c     1C 26 0E F2 | 	cmp	local01, #28 wz
21760     14 4E 05 A1 |  if_e	add	fp, #20
21764     A7 2C 02 AB |  if_e	rdlong	local04, fp
21768     14 4E 85 A1 |  if_e	sub	fp, #20
2176c     16 2B 02 A6 |  if_e	mov	local03, local04
21770     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
21774     40 00 90 5D |  if_ne	jmp	#LR__2645
21778     A7 12 02 FB | 	rdlong	arg01, fp
2177c     09 13 52 F6 | 	abs	arg01, arg01 wc
21780     1F 2E C6 C9 |  if_b	decod	local05, #31
21784     00 2E 06 36 |  if_ae	mov	local05, #0
21788     48 8E B0 FD | 	call	#__system___float_fromuns
2178c     17 FB 61 F5 | 	xor	result1, local05
21790     FD 12 02 F6 | 	mov	arg01, result1
21794     0C 4E 05 F1 | 	add	fp, #12
21798     A7 14 02 FB | 	rdlong	arg02, fp
2179c     0C 4E 85 F1 | 	sub	fp, #12
217a0     64 8E B0 FD | 	call	#__system___float_add
217a4     A7 FA 61 FC | 	wrlong	result1, fp
217a8     08 4E 05 F1 | 	add	fp, #8
217ac     A7 3C 68 FC | 	wrlong	#30, fp
217b0     08 4E 85 F1 | 	sub	fp, #8
217b4     B0 02 90 FD | 	jmp	#LR__2655
217b8                 | LR__2645
217b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
217b8     08 4E 05 F1 | 	add	fp, #8
217bc     A7 26 02 FB | 	rdlong	local01, fp
217c0     08 4E 85 F1 | 	sub	fp, #8
217c4     1E 26 0E F2 | 	cmp	local01, #30 wz
217c8     14 4E 05 A1 |  if_e	add	fp, #20
217cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
217d0     14 4E 85 A1 |  if_e	sub	fp, #20
217d4     16 2B 02 A6 |  if_e	mov	local03, local04
217d8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
217dc     28 00 90 5D |  if_ne	jmp	#LR__2646
217e0     A7 26 02 FB | 	rdlong	local01, fp
217e4     0C 4E 05 F1 | 	add	fp, #12
217e8     A7 12 02 FB | 	rdlong	arg01, fp
217ec     0C 4E 85 F1 | 	sub	fp, #12
217f0     E0 8D B0 FD | 	call	#__system___float_fromuns
217f4     FD 14 02 F6 | 	mov	arg02, result1
217f8     13 13 02 F6 | 	mov	arg01, local01
217fc     08 8E B0 FD | 	call	#__system___float_add
21800     A7 FA 61 FC | 	wrlong	result1, fp
21804     60 02 90 FD | 	jmp	#LR__2655
21808                 | LR__2646
21808                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
21808     08 4E 05 F1 | 	add	fp, #8
2180c     A7 26 02 FB | 	rdlong	local01, fp
21810     08 4E 85 F1 | 	sub	fp, #8
21814     1E 26 0E F2 | 	cmp	local01, #30 wz
21818     14 4E 05 A1 |  if_e	add	fp, #20
2181c     A7 2C 02 AB |  if_e	rdlong	local04, fp
21820     14 4E 85 A1 |  if_e	sub	fp, #20
21824     16 2B 02 A6 |  if_e	mov	local03, local04
21828     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2182c     38 00 90 5D |  if_ne	jmp	#LR__2647
21830     A7 26 02 FB | 	rdlong	local01, fp
21834     0C 4E 05 F1 | 	add	fp, #12
21838     A7 12 02 FB | 	rdlong	arg01, fp
2183c     0C 4E 85 F1 | 	sub	fp, #12
21840     09 13 52 F6 | 	abs	arg01, arg01 wc
21844     1F 2E C6 C9 |  if_b	decod	local05, #31
21848     00 2E 06 36 |  if_ae	mov	local05, #0
2184c     84 8D B0 FD | 	call	#__system___float_fromuns
21850     17 FB 61 F5 | 	xor	result1, local05
21854     FD 14 02 F6 | 	mov	arg02, result1
21858     13 13 02 F6 | 	mov	arg01, local01
2185c     A8 8D B0 FD | 	call	#__system___float_add
21860     A7 FA 61 FC | 	wrlong	result1, fp
21864     00 02 90 FD | 	jmp	#LR__2655
21868                 | LR__2647
21868                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
21868     08 4E 05 F1 | 	add	fp, #8
2186c     A7 26 02 FB | 	rdlong	local01, fp
21870     08 4E 85 F1 | 	sub	fp, #8
21874     1E 26 0E F2 | 	cmp	local01, #30 wz
21878     14 4E 05 A1 |  if_e	add	fp, #20
2187c     A7 2C 02 AB |  if_e	rdlong	local04, fp
21880     14 4E 85 A1 |  if_e	sub	fp, #20
21884     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
21888     1C 00 90 5D |  if_ne	jmp	#LR__2648
2188c     A7 12 02 FB | 	rdlong	arg01, fp
21890     0C 4E 05 F1 | 	add	fp, #12
21894     A7 14 02 FB | 	rdlong	arg02, fp
21898     0C 4E 85 F1 | 	sub	fp, #12
2189c     68 8D B0 FD | 	call	#__system___float_add
218a0     A7 FA 61 FC | 	wrlong	result1, fp
218a4     C0 01 90 FD | 	jmp	#LR__2655
218a8                 | LR__2648
218a8                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
218a8     08 4E 05 F1 | 	add	fp, #8
218ac     A7 26 02 FB | 	rdlong	local01, fp
218b0     08 4E 85 F1 | 	sub	fp, #8
218b4     1F 26 0E F2 | 	cmp	local01, #31 wz
218b8     24 00 90 5D |  if_ne	jmp	#LR__2649
218bc     14 4E 05 F1 | 	add	fp, #20
218c0     A7 2A 02 FB | 	rdlong	local03, fp
218c4     14 4E 85 F1 | 	sub	fp, #20
218c8     1F 2A 0E F2 | 	cmp	local03, #31 wz
218cc     A7 04 68 5C |  if_ne	wrlong	#2, fp
218d0     08 4E 05 51 |  if_ne	add	fp, #8
218d4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
218d8     08 4E 85 51 |  if_ne	sub	fp, #8
218dc     88 01 90 5D |  if_ne	jmp	#LR__2655
218e0                 | LR__2649
218e0                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
218e0     14 4E 05 F1 | 	add	fp, #20
218e4     A7 26 02 FB | 	rdlong	local01, fp
218e8     14 4E 85 F1 | 	sub	fp, #20
218ec     1F 26 0E F2 | 	cmp	local01, #31 wz
218f0     24 00 90 5D |  if_ne	jmp	#LR__2650
218f4     08 4E 05 F1 | 	add	fp, #8
218f8     A7 2A 02 FB | 	rdlong	local03, fp
218fc     08 4E 85 F1 | 	sub	fp, #8
21900     1F 2A 0E F2 | 	cmp	local03, #31 wz
21904     A7 04 68 5C |  if_ne	wrlong	#2, fp
21908     08 4E 05 51 |  if_ne	add	fp, #8
2190c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
21910     08 4E 85 51 |  if_ne	sub	fp, #8
21914     50 01 90 5D |  if_ne	jmp	#LR__2655
21918                 | LR__2650
21918                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
21918     08 4E 05 F1 | 	add	fp, #8
2191c     A7 26 02 FB | 	rdlong	local01, fp
21920     08 4E 85 F1 | 	sub	fp, #8
21924     1F 26 0E F2 | 	cmp	local01, #31 wz
21928     14 4E 05 A1 |  if_e	add	fp, #20
2192c     A7 2A 02 AB |  if_e	rdlong	local03, fp
21930     14 4E 85 A1 |  if_e	sub	fp, #20
21934     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
21938     1C 00 90 5D |  if_ne	jmp	#LR__2651
2193c     A7 12 02 FB | 	rdlong	arg01, fp
21940     0C 4E 05 F1 | 	add	fp, #12
21944     A7 14 02 FB | 	rdlong	arg02, fp
21948     0C 4E 85 F1 | 	sub	fp, #12
2194c     68 62 B0 FD | 	call	#__system___string_concat
21950     A7 FA 61 FC | 	wrlong	result1, fp
21954     10 01 90 FD | 	jmp	#LR__2655
21958                 | LR__2651
21958                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
21958     08 4E 05 F1 | 	add	fp, #8
2195c     A7 26 02 FB | 	rdlong	local01, fp
21960     08 4E 85 F1 | 	sub	fp, #8
21964     2B 26 0E F2 | 	cmp	local01, #43 wz
21968     14 4E 05 A1 |  if_e	add	fp, #20
2196c     A7 2A 02 AB |  if_e	rdlong	local03, fp
21970     14 4E 85 A1 |  if_e	sub	fp, #20
21974     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
21978     30 00 90 5D |  if_ne	jmp	#LR__2652
2197c     A7 12 02 FB | 	rdlong	arg01, fp
21980     14 C0 BE FD | 	call	#_convertstring
21984     FD 12 02 F6 | 	mov	arg01, result1
21988     0C 4E 05 F1 | 	add	fp, #12
2198c     A7 14 02 FB | 	rdlong	arg02, fp
21990     0C 4E 85 F1 | 	sub	fp, #12
21994     20 62 B0 FD | 	call	#__system___string_concat
21998     A7 FA 61 FC | 	wrlong	result1, fp
2199c     08 4E 05 F1 | 	add	fp, #8
219a0     A7 3E 68 FC | 	wrlong	#31, fp
219a4     08 4E 85 F1 | 	sub	fp, #8
219a8     BC 00 90 FD | 	jmp	#LR__2655
219ac                 | LR__2652
219ac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
219ac     08 4E 05 F1 | 	add	fp, #8
219b0     A7 26 02 FB | 	rdlong	local01, fp
219b4     08 4E 85 F1 | 	sub	fp, #8
219b8     1F 26 0E F2 | 	cmp	local01, #31 wz
219bc     14 4E 05 A1 |  if_e	add	fp, #20
219c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
219c4     14 4E 85 A1 |  if_e	sub	fp, #20
219c8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
219cc     28 00 90 5D |  if_ne	jmp	#LR__2653
219d0     A7 26 02 FB | 	rdlong	local01, fp
219d4     0C 4E 05 F1 | 	add	fp, #12
219d8     A7 12 02 FB | 	rdlong	arg01, fp
219dc     0C 4E 85 F1 | 	sub	fp, #12
219e0     B4 BF BE FD | 	call	#_convertstring
219e4     FD 14 02 F6 | 	mov	arg02, result1
219e8     13 13 02 F6 | 	mov	arg01, local01
219ec     C8 61 B0 FD | 	call	#__system___string_concat
219f0     A7 FA 61 FC | 	wrlong	result1, fp
219f4     70 00 90 FD | 	jmp	#LR__2655
219f8                 | LR__2653
219f8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
219f8     08 4E 05 F1 | 	add	fp, #8
219fc     A7 26 02 FB | 	rdlong	local01, fp
21a00     08 4E 85 F1 | 	sub	fp, #8
21a04     2B 26 0E F2 | 	cmp	local01, #43 wz
21a08     14 4E 05 A1 |  if_e	add	fp, #20
21a0c     A7 2A 02 AB |  if_e	rdlong	local03, fp
21a10     14 4E 85 A1 |  if_e	sub	fp, #20
21a14     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
21a18     3C 00 90 5D |  if_ne	jmp	#LR__2654
21a1c     A7 12 02 FB | 	rdlong	arg01, fp
21a20     74 BF BE FD | 	call	#_convertstring
21a24     FD 26 02 F6 | 	mov	local01, result1
21a28     0C 4E 05 F1 | 	add	fp, #12
21a2c     A7 12 02 FB | 	rdlong	arg01, fp
21a30     0C 4E 85 F1 | 	sub	fp, #12
21a34     60 BF BE FD | 	call	#_convertstring
21a38     FD 14 02 F6 | 	mov	arg02, result1
21a3c     13 13 02 F6 | 	mov	arg01, local01
21a40     74 61 B0 FD | 	call	#__system___string_concat
21a44     A7 FA 61 FC | 	wrlong	result1, fp
21a48     08 4E 05 F1 | 	add	fp, #8
21a4c     A7 3E 68 FC | 	wrlong	#31, fp
21a50     08 4E 85 F1 | 	sub	fp, #8
21a54     10 00 90 FD | 	jmp	#LR__2655
21a58                 | LR__2654
21a58     A7 08 68 FC | 	wrlong	#4, fp
21a5c     08 4E 05 F1 | 	add	fp, #8
21a60     A7 FE 69 FC | 	wrlong	#255, fp
21a64     08 4E 85 F1 | 	sub	fp, #8
21a68                 | LR__2655
21a68     A7 12 02 F6 | 	mov	arg01, fp
21a6c     48 BE BE FD | 	call	#_push
21a70     A7 F0 03 F6 | 	mov	ptra, fp
21a74     B2 00 A0 FD | 	call	#popregs_
21a78                 | _do_plus_ret
21a78     2D 00 64 FD | 	ret
21a7c                 | 
21a7c                 | ' 
21a7c                 | ' '--------------------------------- power (^)
21a7c                 | ' 
21a7c                 | ' sub do_power 
21a7c                 | _do_power
21a7c     02 4A 05 F6 | 	mov	COUNT_, #2
21a80     A8 00 A0 FD | 	call	#pushregs_
21a84     18 F0 07 F1 | 	add	ptra, #24
21a88     94 BD BE FD | 	call	#_pop
21a8c     FD 14 02 F6 | 	mov	arg02, result1
21a90     FE 12 02 F6 | 	mov	arg01, result2
21a94     FF 26 02 F6 | 	mov	local01, result3
21a98     0C 4E 05 F1 | 	add	fp, #12
21a9c     A7 14 62 FC | 	wrlong	arg02, fp
21aa0     04 4E 05 F1 | 	add	fp, #4
21aa4     A7 12 62 FC | 	wrlong	arg01, fp
21aa8     04 4E 05 F1 | 	add	fp, #4
21aac     A7 26 62 FC | 	wrlong	local01, fp
21ab0     14 4E 85 F1 | 	sub	fp, #20
21ab4     68 BD BE FD | 	call	#_pop
21ab8     A7 FA 61 FC | 	wrlong	result1, fp
21abc     04 4E 05 F1 | 	add	fp, #4
21ac0     A7 FC 61 FC | 	wrlong	result2, fp
21ac4     04 4E 05 F1 | 	add	fp, #4
21ac8     A7 FE 61 FC | 	wrlong	result3, fp
21acc                 | ' 
21acc                 | ' t2=pop()
21acc                 | ' t1=pop()
21acc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
21acc     08 4E 85 F1 | 	sub	fp, #8
21ad0     1F FE 0D F2 | 	cmp	result3, #31 wz
21ad4     14 4E 05 51 |  if_ne	add	fp, #20
21ad8     A7 26 02 5B |  if_ne	rdlong	local01, fp
21adc     14 4E 85 51 |  if_ne	sub	fp, #20
21ae0     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
21ae4     A7 18 68 AC |  if_e	wrlong	#12, fp
21ae8     08 4E 05 A1 |  if_e	add	fp, #8
21aec     A7 FE 69 AC |  if_e	wrlong	#255, fp
21af0     08 4E 85 A1 |  if_e	sub	fp, #8
21af4     38 01 90 AD |  if_e	jmp	#LR__2665
21af8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
21af8     08 4E 05 F1 | 	add	fp, #8
21afc     A7 14 02 FB | 	rdlong	arg02, fp
21b00     08 4E 85 F1 | 	sub	fp, #8
21b04     1C 14 0E F2 | 	cmp	arg02, #28 wz
21b08     28 00 90 5D |  if_ne	jmp	#LR__2660
21b0c     08 4E 05 F1 | 	add	fp, #8
21b10     A7 3C 68 FC | 	wrlong	#30, fp
21b14     08 4E 85 F1 | 	sub	fp, #8
21b18     A7 12 02 FB | 	rdlong	arg01, fp
21b1c     09 13 52 F6 | 	abs	arg01, arg01 wc
21b20     1F 28 C6 C9 |  if_b	decod	local02, #31
21b24     00 28 06 36 |  if_ae	mov	local02, #0
21b28     A8 8A B0 FD | 	call	#__system___float_fromuns
21b2c     14 FB 61 F5 | 	xor	result1, local02
21b30     A7 FA 61 FC | 	wrlong	result1, fp
21b34                 | LR__2660
21b34                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
21b34     08 4E 05 F1 | 	add	fp, #8
21b38     A7 14 02 FB | 	rdlong	arg02, fp
21b3c     08 4E 85 F1 | 	sub	fp, #8
21b40     1D 14 0E F2 | 	cmp	arg02, #29 wz
21b44     18 00 90 5D |  if_ne	jmp	#LR__2661
21b48     08 4E 05 F1 | 	add	fp, #8
21b4c     A7 3C 68 FC | 	wrlong	#30, fp
21b50     08 4E 85 F1 | 	sub	fp, #8
21b54     A7 12 02 FB | 	rdlong	arg01, fp
21b58     78 8A B0 FD | 	call	#__system___float_fromuns
21b5c     A7 FA 61 FC | 	wrlong	result1, fp
21b60                 | LR__2661
21b60                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
21b60     14 4E 05 F1 | 	add	fp, #20
21b64     A7 14 02 FB | 	rdlong	arg02, fp
21b68     14 4E 85 F1 | 	sub	fp, #20
21b6c     1C 14 0E F2 | 	cmp	arg02, #28 wz
21b70     34 00 90 5D |  if_ne	jmp	#LR__2662
21b74     14 4E 05 F1 | 	add	fp, #20
21b78     A7 3C 68 FC | 	wrlong	#30, fp
21b7c     08 4E 85 F1 | 	sub	fp, #8
21b80     A7 12 02 FB | 	rdlong	arg01, fp
21b84     0C 4E 85 F1 | 	sub	fp, #12
21b88     09 13 52 F6 | 	abs	arg01, arg01 wc
21b8c     1F 28 C6 C9 |  if_b	decod	local02, #31
21b90     00 28 06 36 |  if_ae	mov	local02, #0
21b94     3C 8A B0 FD | 	call	#__system___float_fromuns
21b98     14 FB 61 F5 | 	xor	result1, local02
21b9c     0C 4E 05 F1 | 	add	fp, #12
21ba0     A7 FA 61 FC | 	wrlong	result1, fp
21ba4     0C 4E 85 F1 | 	sub	fp, #12
21ba8                 | LR__2662
21ba8                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
21ba8     14 4E 05 F1 | 	add	fp, #20
21bac     A7 14 02 FB | 	rdlong	arg02, fp
21bb0     14 4E 85 F1 | 	sub	fp, #20
21bb4     1D 14 0E F2 | 	cmp	arg02, #29 wz
21bb8     24 00 90 5D |  if_ne	jmp	#LR__2663
21bbc     14 4E 05 F1 | 	add	fp, #20
21bc0     A7 3C 68 FC | 	wrlong	#30, fp
21bc4     08 4E 85 F1 | 	sub	fp, #8
21bc8     A7 12 02 FB | 	rdlong	arg01, fp
21bcc     0C 4E 85 F1 | 	sub	fp, #12
21bd0     00 8A B0 FD | 	call	#__system___float_fromuns
21bd4     0C 4E 05 F1 | 	add	fp, #12
21bd8     A7 FA 61 FC | 	wrlong	result1, fp
21bdc     0C 4E 85 F1 | 	sub	fp, #12
21be0                 | LR__2663
21be0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
21be0     08 4E 05 F1 | 	add	fp, #8
21be4     A7 14 02 FB | 	rdlong	arg02, fp
21be8     08 4E 85 F1 | 	sub	fp, #8
21bec     1E 14 0E F2 | 	cmp	arg02, #30 wz
21bf0     14 4E 05 A1 |  if_e	add	fp, #20
21bf4     A7 26 02 AB |  if_e	rdlong	local01, fp
21bf8     14 4E 85 A1 |  if_e	sub	fp, #20
21bfc     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
21c00     1C 00 90 5D |  if_ne	jmp	#LR__2664
21c04     A7 12 02 FB | 	rdlong	arg01, fp
21c08     0C 4E 05 F1 | 	add	fp, #12
21c0c     A7 14 02 FB | 	rdlong	arg02, fp
21c10     0C 4E 85 F1 | 	sub	fp, #12
21c14     CC 9C B0 FD | 	call	#__system____builtin_powf
21c18     A7 FA 61 FC | 	wrlong	result1, fp
21c1c     10 00 90 FD | 	jmp	#LR__2665
21c20                 | LR__2664
21c20     A7 1A 68 FC | 	wrlong	#13, fp
21c24     08 4E 05 F1 | 	add	fp, #8
21c28     A7 FE 69 FC | 	wrlong	#255, fp
21c2c     08 4E 85 F1 | 	sub	fp, #8
21c30                 | LR__2665
21c30     A7 12 02 F6 | 	mov	arg01, fp
21c34     80 BC BE FD | 	call	#_push
21c38     A7 F0 03 F6 | 	mov	ptra, fp
21c3c     B2 00 A0 FD | 	call	#popregs_
21c40                 | _do_power_ret
21c40     2D 00 64 FD | 	ret
21c44                 | 
21c44                 | ' 
21c44                 | ' '--------------------------------- SHL
21c44                 | ' 
21c44                 | ' sub do_shl 
21c44                 | _do_shl
21c44     03 4A 05 F6 | 	mov	COUNT_, #3
21c48     A8 00 A0 FD | 	call	#pushregs_
21c4c     18 F0 07 F1 | 	add	ptra, #24
21c50     CC BB BE FD | 	call	#_pop
21c54     FD 12 02 F6 | 	mov	arg01, result1
21c58     FE 26 02 F6 | 	mov	local01, result2
21c5c     FF 28 02 F6 | 	mov	local02, result3
21c60     0C 4E 05 F1 | 	add	fp, #12
21c64     A7 12 62 FC | 	wrlong	arg01, fp
21c68     04 4E 05 F1 | 	add	fp, #4
21c6c     A7 26 62 FC | 	wrlong	local01, fp
21c70     04 4E 05 F1 | 	add	fp, #4
21c74     A7 28 62 FC | 	wrlong	local02, fp
21c78     14 4E 85 F1 | 	sub	fp, #20
21c7c     A0 BB BE FD | 	call	#_pop
21c80     FF 2A 02 F6 | 	mov	local03, result3
21c84     A7 FA 61 FC | 	wrlong	result1, fp
21c88     04 4E 05 F1 | 	add	fp, #4
21c8c     A7 FC 61 FC | 	wrlong	result2, fp
21c90     04 4E 05 F1 | 	add	fp, #4
21c94     A7 2A 62 FC | 	wrlong	local03, fp
21c98                 | ' 
21c98                 | ' t2=pop()
21c98                 | ' t1=pop()
21c98                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
21c98     08 4E 85 F1 | 	sub	fp, #8
21c9c     1C 2A 0E F2 | 	cmp	local03, #28 wz
21ca0     A7 2A 02 AB |  if_e	rdlong	local03, fp
21ca4     A7 2A 62 AC |  if_e	wrlong	local03, fp
21ca8     08 4E 05 A1 |  if_e	add	fp, #8
21cac     A7 3A 68 AC |  if_e	wrlong	#29, fp
21cb0     08 4E 85 A1 |  if_e	sub	fp, #8
21cb4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
21cb4     14 4E 05 F1 | 	add	fp, #20
21cb8     A7 2A 02 FB | 	rdlong	local03, fp
21cbc     14 4E 85 F1 | 	sub	fp, #20
21cc0     1C 2A 0E F2 | 	cmp	local03, #28 wz
21cc4     18 00 90 5D |  if_ne	jmp	#LR__2670
21cc8     0C 4E 05 F1 | 	add	fp, #12
21ccc     A7 2A 02 FB | 	rdlong	local03, fp
21cd0     A7 2A 62 FC | 	wrlong	local03, fp
21cd4     08 4E 05 F1 | 	add	fp, #8
21cd8     A7 3A 68 FC | 	wrlong	#29, fp
21cdc     14 4E 85 F1 | 	sub	fp, #20
21ce0                 | LR__2670
21ce0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
21ce0     08 4E 05 F1 | 	add	fp, #8
21ce4     A7 2A 02 FB | 	rdlong	local03, fp
21ce8     08 4E 85 F1 | 	sub	fp, #8
21cec     1F 2A 0E F2 | 	cmp	local03, #31 wz
21cf0     14 4E 05 51 |  if_ne	add	fp, #20
21cf4     A7 28 02 5B |  if_ne	rdlong	local02, fp
21cf8     14 4E 85 51 |  if_ne	sub	fp, #20
21cfc     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
21d00     08 4E 05 51 |  if_ne	add	fp, #8
21d04     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21d08     08 4E 85 51 |  if_ne	sub	fp, #8
21d0c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
21d10     14 4E 05 51 |  if_ne	add	fp, #20
21d14     14 4E 85 51 |  if_ne	sub	fp, #20
21d18     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
21d1c     A7 0C 68 AC |  if_e	wrlong	#6, fp
21d20     08 4E 05 A1 |  if_e	add	fp, #8
21d24     A7 FE 69 AC |  if_e	wrlong	#255, fp
21d28     08 4E 85 A1 |  if_e	sub	fp, #8
21d2c     18 00 90 AD |  if_e	jmp	#LR__2671
21d30     A7 2A 02 FB | 	rdlong	local03, fp
21d34     0C 4E 05 F1 | 	add	fp, #12
21d38     A7 26 02 FB | 	rdlong	local01, fp
21d3c     0C 4E 85 F1 | 	sub	fp, #12
21d40     13 2B 62 F0 | 	shl	local03, local01
21d44     A7 2A 62 FC | 	wrlong	local03, fp
21d48                 | LR__2671
21d48     A7 12 02 F6 | 	mov	arg01, fp
21d4c     68 BB BE FD | 	call	#_push
21d50     A7 F0 03 F6 | 	mov	ptra, fp
21d54     B2 00 A0 FD | 	call	#popregs_
21d58                 | _do_shl_ret
21d58     2D 00 64 FD | 	ret
21d5c                 | 
21d5c                 | ' 
21d5c                 | ' '--------------------------------- SHR
21d5c                 | ' 
21d5c                 | ' sub do_shr 
21d5c                 | _do_shr
21d5c     03 4A 05 F6 | 	mov	COUNT_, #3
21d60     A8 00 A0 FD | 	call	#pushregs_
21d64     18 F0 07 F1 | 	add	ptra, #24
21d68     B4 BA BE FD | 	call	#_pop
21d6c     FD 12 02 F6 | 	mov	arg01, result1
21d70     FE 26 02 F6 | 	mov	local01, result2
21d74     FF 28 02 F6 | 	mov	local02, result3
21d78     0C 4E 05 F1 | 	add	fp, #12
21d7c     A7 12 62 FC | 	wrlong	arg01, fp
21d80     04 4E 05 F1 | 	add	fp, #4
21d84     A7 26 62 FC | 	wrlong	local01, fp
21d88     04 4E 05 F1 | 	add	fp, #4
21d8c     A7 28 62 FC | 	wrlong	local02, fp
21d90     14 4E 85 F1 | 	sub	fp, #20
21d94     88 BA BE FD | 	call	#_pop
21d98     FF 2A 02 F6 | 	mov	local03, result3
21d9c     A7 FA 61 FC | 	wrlong	result1, fp
21da0     04 4E 05 F1 | 	add	fp, #4
21da4     A7 FC 61 FC | 	wrlong	result2, fp
21da8     04 4E 05 F1 | 	add	fp, #4
21dac     A7 2A 62 FC | 	wrlong	local03, fp
21db0                 | ' 
21db0                 | ' t2=pop()
21db0                 | ' t1=pop()
21db0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
21db0     08 4E 85 F1 | 	sub	fp, #8
21db4     1C 2A 0E F2 | 	cmp	local03, #28 wz
21db8     A7 2A 02 AB |  if_e	rdlong	local03, fp
21dbc     A7 2A 62 AC |  if_e	wrlong	local03, fp
21dc0     08 4E 05 A1 |  if_e	add	fp, #8
21dc4     A7 3A 68 AC |  if_e	wrlong	#29, fp
21dc8     08 4E 85 A1 |  if_e	sub	fp, #8
21dcc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
21dcc     14 4E 05 F1 | 	add	fp, #20
21dd0     A7 2A 02 FB | 	rdlong	local03, fp
21dd4     14 4E 85 F1 | 	sub	fp, #20
21dd8     1C 2A 0E F2 | 	cmp	local03, #28 wz
21ddc     18 00 90 5D |  if_ne	jmp	#LR__2680
21de0     0C 4E 05 F1 | 	add	fp, #12
21de4     A7 2A 02 FB | 	rdlong	local03, fp
21de8     A7 2A 62 FC | 	wrlong	local03, fp
21dec     08 4E 05 F1 | 	add	fp, #8
21df0     A7 3A 68 FC | 	wrlong	#29, fp
21df4     14 4E 85 F1 | 	sub	fp, #20
21df8                 | LR__2680
21df8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
21df8     08 4E 05 F1 | 	add	fp, #8
21dfc     A7 2A 02 FB | 	rdlong	local03, fp
21e00     08 4E 85 F1 | 	sub	fp, #8
21e04     1F 2A 0E F2 | 	cmp	local03, #31 wz
21e08     14 4E 05 51 |  if_ne	add	fp, #20
21e0c     A7 28 02 5B |  if_ne	rdlong	local02, fp
21e10     14 4E 85 51 |  if_ne	sub	fp, #20
21e14     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
21e18     08 4E 05 51 |  if_ne	add	fp, #8
21e1c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21e20     08 4E 85 51 |  if_ne	sub	fp, #8
21e24     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
21e28     14 4E 05 51 |  if_ne	add	fp, #20
21e2c     14 4E 85 51 |  if_ne	sub	fp, #20
21e30     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
21e34     A7 0C 68 AC |  if_e	wrlong	#6, fp
21e38     08 4E 05 A1 |  if_e	add	fp, #8
21e3c     A7 FE 69 AC |  if_e	wrlong	#255, fp
21e40     08 4E 85 A1 |  if_e	sub	fp, #8
21e44     18 00 90 AD |  if_e	jmp	#LR__2681
21e48     A7 2A 02 FB | 	rdlong	local03, fp
21e4c     0C 4E 05 F1 | 	add	fp, #12
21e50     A7 26 02 FB | 	rdlong	local01, fp
21e54     0C 4E 85 F1 | 	sub	fp, #12
21e58     13 2B 42 F0 | 	shr	local03, local01
21e5c     A7 2A 62 FC | 	wrlong	local03, fp
21e60                 | LR__2681
21e60     A7 12 02 F6 | 	mov	arg01, fp
21e64     50 BA BE FD | 	call	#_push
21e68     A7 F0 03 F6 | 	mov	ptra, fp
21e6c     B2 00 A0 FD | 	call	#popregs_
21e70                 | _do_shr_ret
21e70     2D 00 64 FD | 	ret
21e74                 | 
21e74                 | ' 
21e74                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
21e74                 | ' 
21e74                 | ' ''----------------------------------------------------------------------------------------------------
21e74                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
21e74                 | ' ''----------------------------------------------------------------------------------------------------
21e74                 | ' 
21e74                 | ' ''--------------------------- Command function pointers
21e74                 | ' 
21e74                 | ' sub init_commands
21e74                 | _init_commands
21e74                 | ' 
21e74                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
21e74     00 00 06 F6 | 	mov	_var01, #0
21e78     97 16 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
21e7c                 | LR__2690
21e7c     00 FB 01 F6 | 	mov	result1, _var01
21e80     02 FA 65 F0 | 	shl	result1, #2
21e84     43 00 00 FF 
21e88     60 E4 05 F1 | 	add	objptr, ##34400
21e8c     F2 FA 01 F1 | 	add	result1, objptr
21e90     43 00 00 FF 
21e94     60 E4 85 F1 | 	sub	objptr, ##34400
21e98     FD E4 61 FC | 	wrlong	objptr, result1
21e9c     01 00 06 F1 | 	add	_var01, #1
21ea0     00 01 56 F2 | 	cmps	_var01, #256 wc
21ea4     D4 FF 9F CD |  if_b	jmp	#LR__2690
21ea8                 | LR__2691
21ea8     F2 FA 01 F6 | 	mov	result1, objptr
21eac     14 FA 25 F4 | 	bith	result1, #20
21eb0     43 00 00 FF 
21eb4     64 E4 05 F1 | 	add	objptr, ##34404
21eb8     F2 FA 61 FC | 	wrlong	result1, objptr
21ebc     43 00 00 FF 
21ec0     64 E4 85 F1 | 	sub	objptr, ##34404
21ec4     F2 FA 01 F6 | 	mov	result1, objptr
21ec8     15 FA 25 F4 | 	bith	result1, #21
21ecc     43 00 00 FF 
21ed0     68 E4 05 F1 | 	add	objptr, ##34408
21ed4     F2 FA 61 FC | 	wrlong	result1, objptr
21ed8     43 00 00 FF 
21edc     68 E4 85 F1 | 	sub	objptr, ##34408
21ee0     F2 FA 01 F6 | 	mov	result1, objptr
21ee4     34 FA 25 F4 | 	bith	result1, #52
21ee8     43 00 00 FF 
21eec     6C E4 05 F1 | 	add	objptr, ##34412
21ef0     F2 FA 61 FC | 	wrlong	result1, objptr
21ef4     43 00 00 FF 
21ef8     6C E4 85 F1 | 	sub	objptr, ##34412
21efc     F2 FA 01 F6 | 	mov	result1, objptr
21f00     16 FA 25 F4 | 	bith	result1, #22
21f04     43 00 00 FF 
21f08     74 E4 05 F1 | 	add	objptr, ##34420
21f0c     F2 FA 61 FC | 	wrlong	result1, objptr
21f10     43 00 00 FF 
21f14     74 E4 85 F1 | 	sub	objptr, ##34420
21f18     F2 FA 01 F6 | 	mov	result1, objptr
21f1c     00 28 00 FF 
21f20     00 FA 45 F5 | 	or	result1, ##5242880
21f24     43 00 00 FF 
21f28     78 E4 05 F1 | 	add	objptr, ##34424
21f2c     F2 FA 61 FC | 	wrlong	result1, objptr
21f30     43 00 00 FF 
21f34     78 E4 85 F1 | 	sub	objptr, ##34424
21f38     F2 FA 01 F6 | 	mov	result1, objptr
21f3c     35 FA 25 F4 | 	bith	result1, #53
21f40     43 00 00 FF 
21f44     7C E4 05 F1 | 	add	objptr, ##34428
21f48     F2 FA 61 FC | 	wrlong	result1, objptr
21f4c     43 00 00 FF 
21f50     7C E4 85 F1 | 	sub	objptr, ##34428
21f54     F2 FA 01 F6 | 	mov	result1, objptr
21f58     54 FA 25 F4 | 	bith	result1, #84
21f5c     43 00 00 FF 
21f60     80 E4 05 F1 | 	add	objptr, ##34432
21f64     F2 FA 61 FC | 	wrlong	result1, objptr
21f68     43 00 00 FF 
21f6c     80 E4 85 F1 | 	sub	objptr, ##34432
21f70     F2 FA 01 F6 | 	mov	result1, objptr
21f74     17 FA 25 F4 | 	bith	result1, #23
21f78     43 00 00 FF 
21f7c     84 E4 05 F1 | 	add	objptr, ##34436
21f80     F2 FA 61 FC | 	wrlong	result1, objptr
21f84     43 00 00 FF 
21f88     84 E4 85 F1 | 	sub	objptr, ##34436
21f8c     F2 FA 01 F6 | 	mov	result1, objptr
21f90     00 48 00 FF 
21f94     00 FA 45 F5 | 	or	result1, ##9437184
21f98     43 00 00 FF 
21f9c     88 E4 05 F1 | 	add	objptr, ##34440
21fa0     F2 FA 61 FC | 	wrlong	result1, objptr
21fa4     43 00 00 FF 
21fa8     88 E4 85 F1 | 	sub	objptr, ##34440
21fac     F2 FA 01 F6 | 	mov	result1, objptr
21fb0     00 50 00 FF 
21fb4     00 FA 45 F5 | 	or	result1, ##10485760
21fb8     43 00 00 FF 
21fbc     8C E4 05 F1 | 	add	objptr, ##34444
21fc0     F2 FA 61 FC | 	wrlong	result1, objptr
21fc4     43 00 00 FF 
21fc8     8C E4 85 F1 | 	sub	objptr, ##34444
21fcc     F2 FA 01 F6 | 	mov	result1, objptr
21fd0     00 58 00 FF 
21fd4     00 FA 45 F5 | 	or	result1, ##11534336
21fd8     43 00 00 FF 
21fdc     90 E4 05 F1 | 	add	objptr, ##34448
21fe0     F2 FA 61 FC | 	wrlong	result1, objptr
21fe4     43 00 00 FF 
21fe8     90 E4 85 F1 | 	sub	objptr, ##34448
21fec     F2 FA 01 F6 | 	mov	result1, objptr
21ff0     36 FA 25 F4 | 	bith	result1, #54
21ff4     43 00 00 FF 
21ff8     A4 E4 05 F1 | 	add	objptr, ##34468
21ffc     F2 FA 61 FC | 	wrlong	result1, objptr
22000     43 00 00 FF 
22004     A4 E4 85 F1 | 	sub	objptr, ##34468
22008     F2 FA 01 F6 | 	mov	result1, objptr
2200c     00 68 00 FF 
22010     00 FA 45 F5 | 	or	result1, ##13631488
22014     43 00 00 FF 
22018     D4 E4 05 F1 | 	add	objptr, ##34516
2201c     F2 FA 61 FC | 	wrlong	result1, objptr
22020     43 00 00 FF 
22024     D4 E4 85 F1 | 	sub	objptr, ##34516
22028     F2 FA 01 F6 | 	mov	result1, objptr
2202c     00 68 00 FF 
22030     00 FA 45 F5 | 	or	result1, ##13631488
22034     43 00 00 FF 
22038     D0 E4 05 F1 | 	add	objptr, ##34512
2203c     F2 FA 61 FC | 	wrlong	result1, objptr
22040     43 00 00 FF 
22044     D0 E4 85 F1 | 	sub	objptr, ##34512
22048     F2 FA 01 F6 | 	mov	result1, objptr
2204c     00 68 00 FF 
22050     00 FA 45 F5 | 	or	result1, ##13631488
22054     43 00 00 FF 
22058     D8 E4 05 F1 | 	add	objptr, ##34520
2205c     F2 FA 61 FC | 	wrlong	result1, objptr
22060     43 00 00 FF 
22064     D8 E4 85 F1 | 	sub	objptr, ##34520
22068     F2 FA 01 F6 | 	mov	result1, objptr
2206c     00 68 00 FF 
22070     00 FA 45 F5 | 	or	result1, ##13631488
22074     43 00 00 FF 
22078     DC E4 05 F1 | 	add	objptr, ##34524
2207c     F2 FA 61 FC | 	wrlong	result1, objptr
22080     43 00 00 FF 
22084     DC E4 85 F1 | 	sub	objptr, ##34524
22088     F2 FA 01 F6 | 	mov	result1, objptr
2208c     00 68 00 FF 
22090     00 FA 45 F5 | 	or	result1, ##13631488
22094     43 00 00 FF 
22098     0C E5 05 F1 | 	add	objptr, ##34572
2209c     F2 FA 61 FC | 	wrlong	result1, objptr
220a0     43 00 00 FF 
220a4     0C E5 85 F1 | 	sub	objptr, ##34572
220a8     F2 FA 01 F6 | 	mov	result1, objptr
220ac     55 FA 25 F4 | 	bith	result1, #85
220b0     43 00 00 FF 
220b4     BC E4 05 F1 | 	add	objptr, ##34492
220b8     F2 FA 61 FC | 	wrlong	result1, objptr
220bc     43 00 00 FF 
220c0     BC E4 85 F1 | 	sub	objptr, ##34492
220c4     F2 FA 01 F6 | 	mov	result1, objptr
220c8     00 68 00 FF 
220cc     00 FA 45 F5 | 	or	result1, ##13631488
220d0     43 00 00 FF 
220d4     10 E5 05 F1 | 	add	objptr, ##34576
220d8     F2 FA 61 FC | 	wrlong	result1, objptr
220dc     43 00 00 FF 
220e0     10 E5 85 F1 | 	sub	objptr, ##34576
220e4     F2 FA 01 F6 | 	mov	result1, objptr
220e8     00 68 00 FF 
220ec     00 FA 45 F5 | 	or	result1, ##13631488
220f0     43 00 00 FF 
220f4     E0 E4 05 F1 | 	add	objptr, ##34528
220f8     F2 FA 61 FC | 	wrlong	result1, objptr
220fc     43 00 00 FF 
22100     E0 E4 85 F1 | 	sub	objptr, ##34528
22104     F2 FA 01 F6 | 	mov	result1, objptr
22108     00 68 00 FF 
2210c     00 FA 45 F5 | 	or	result1, ##13631488
22110     43 00 00 FF 
22114     E4 E4 05 F1 | 	add	objptr, ##34532
22118     F2 FA 61 FC | 	wrlong	result1, objptr
2211c     43 00 00 FF 
22120     E4 E4 85 F1 | 	sub	objptr, ##34532
22124     F2 FA 01 F6 | 	mov	result1, objptr
22128     00 68 00 FF 
2212c     00 FA 45 F5 | 	or	result1, ##13631488
22130     43 00 00 FF 
22134     E8 E4 05 F1 | 	add	objptr, ##34536
22138     F2 FA 61 FC | 	wrlong	result1, objptr
2213c     43 00 00 FF 
22140     E8 E4 85 F1 | 	sub	objptr, ##34536
22144     F2 FA 01 F6 | 	mov	result1, objptr
22148     74 FA 25 F4 | 	bith	result1, #116
2214c     43 00 00 FF 
22150     60 E5 05 F1 | 	add	objptr, ##34656
22154     F2 FA 61 FC | 	wrlong	result1, objptr
22158     43 00 00 FF 
2215c     60 E5 85 F1 | 	sub	objptr, ##34656
22160     F2 FA 01 F6 | 	mov	result1, objptr
22164     18 FA 25 F4 | 	bith	result1, #24
22168     43 00 00 FF 
2216c     64 E5 05 F1 | 	add	objptr, ##34660
22170     F2 FA 61 FC | 	wrlong	result1, objptr
22174     43 00 00 FF 
22178     64 E5 85 F1 | 	sub	objptr, ##34660
2217c     F2 FA 01 F6 | 	mov	result1, objptr
22180     00 88 00 FF 
22184     00 FA 45 F5 | 	or	result1, ##17825792
22188     43 00 00 FF 
2218c     68 E5 05 F1 | 	add	objptr, ##34664
22190     F2 FA 61 FC | 	wrlong	result1, objptr
22194     43 00 00 FF 
22198     68 E5 85 F1 | 	sub	objptr, ##34664
2219c     F2 FA 01 F6 | 	mov	result1, objptr
221a0     00 90 00 FF 
221a4     00 FA 45 F5 | 	or	result1, ##18874368
221a8     43 00 00 FF 
221ac     6C E5 05 F1 | 	add	objptr, ##34668
221b0     F2 FA 61 FC | 	wrlong	result1, objptr
221b4     43 00 00 FF 
221b8     6C E5 85 F1 | 	sub	objptr, ##34668
221bc     F2 FA 01 F6 | 	mov	result1, objptr
221c0     00 98 00 FF 
221c4     00 FA 45 F5 | 	or	result1, ##19922944
221c8     43 00 00 FF 
221cc     70 E5 05 F1 | 	add	objptr, ##34672
221d0     F2 FA 61 FC | 	wrlong	result1, objptr
221d4     43 00 00 FF 
221d8     70 E5 85 F1 | 	sub	objptr, ##34672
221dc     F2 FA 01 F6 | 	mov	result1, objptr
221e0     00 A0 00 FF 
221e4     00 FA 45 F5 | 	or	result1, ##20971520
221e8     43 00 00 FF 
221ec     74 E5 05 F1 | 	add	objptr, ##34676
221f0     F2 FA 61 FC | 	wrlong	result1, objptr
221f4     43 00 00 FF 
221f8     74 E5 85 F1 | 	sub	objptr, ##34676
221fc     F2 FA 01 F6 | 	mov	result1, objptr
22200     00 A8 00 FF 
22204     00 FA 45 F5 | 	or	result1, ##22020096
22208     43 00 00 FF 
2220c     78 E5 05 F1 | 	add	objptr, ##34680
22210     F2 FA 61 FC | 	wrlong	result1, objptr
22214     43 00 00 FF 
22218     78 E5 85 F1 | 	sub	objptr, ##34680
2221c     F2 FA 01 F6 | 	mov	result1, objptr
22220     00 B0 00 FF 
22224     00 FA 45 F5 | 	or	result1, ##23068672
22228     43 00 00 FF 
2222c     7C E5 05 F1 | 	add	objptr, ##34684
22230     F2 FA 61 FC | 	wrlong	result1, objptr
22234     43 00 00 FF 
22238     7C E5 85 F1 | 	sub	objptr, ##34684
2223c     F2 FA 01 F6 | 	mov	result1, objptr
22240     00 B8 00 FF 
22244     00 FA 45 F5 | 	or	result1, ##24117248
22248     43 00 00 FF 
2224c     80 E5 05 F1 | 	add	objptr, ##34688
22250     F2 FA 61 FC | 	wrlong	result1, objptr
22254     43 00 00 FF 
22258     80 E5 85 F1 | 	sub	objptr, ##34688
2225c     F2 FA 01 F6 | 	mov	result1, objptr
22260     37 FA 25 F4 | 	bith	result1, #55
22264     43 00 00 FF 
22268     84 E5 05 F1 | 	add	objptr, ##34692
2226c     F2 FA 61 FC | 	wrlong	result1, objptr
22270     43 00 00 FF 
22274     84 E5 85 F1 | 	sub	objptr, ##34692
22278     F2 FA 01 F6 | 	mov	result1, objptr
2227c     00 C8 00 FF 
22280     00 FA 45 F5 | 	or	result1, ##26214400
22284     43 00 00 FF 
22288     88 E5 05 F1 | 	add	objptr, ##34696
2228c     F2 FA 61 FC | 	wrlong	result1, objptr
22290     43 00 00 FF 
22294     88 E5 85 F1 | 	sub	objptr, ##34696
22298     F2 FA 01 F6 | 	mov	result1, objptr
2229c     00 D0 00 FF 
222a0     00 FA 45 F5 | 	or	result1, ##27262976
222a4     43 00 00 FF 
222a8     8C E5 05 F1 | 	add	objptr, ##34700
222ac     F2 FA 61 FC | 	wrlong	result1, objptr
222b0     43 00 00 FF 
222b4     8C E5 85 F1 | 	sub	objptr, ##34700
222b8     F2 FA 01 F6 | 	mov	result1, objptr
222bc     00 D8 00 FF 
222c0     00 FA 45 F5 | 	or	result1, ##28311552
222c4     43 00 00 FF 
222c8     90 E5 05 F1 | 	add	objptr, ##34704
222cc     F2 FA 61 FC | 	wrlong	result1, objptr
222d0     43 00 00 FF 
222d4     90 E5 85 F1 | 	sub	objptr, ##34704
222d8     F2 FA 01 F6 | 	mov	result1, objptr
222dc     56 FA 25 F4 | 	bith	result1, #86
222e0     43 00 00 FF 
222e4     94 E5 05 F1 | 	add	objptr, ##34708
222e8     F2 FA 61 FC | 	wrlong	result1, objptr
222ec     43 00 00 FF 
222f0     94 E5 85 F1 | 	sub	objptr, ##34708
222f4     F2 FA 01 F6 | 	mov	result1, objptr
222f8     00 E8 00 FF 
222fc     00 FA 45 F5 | 	or	result1, ##30408704
22300     45 00 00 FF 
22304     5C E4 05 F1 | 	add	objptr, ##35420
22308     F2 FA 61 FC | 	wrlong	result1, objptr
2230c     45 00 00 FF 
22310     5C E4 85 F1 | 	sub	objptr, ##35420
22314     F2 FA 01 F6 | 	mov	result1, objptr
22318     75 FA 25 F4 | 	bith	result1, #117
2231c     43 00 00 FF 
22320     98 E5 05 F1 | 	add	objptr, ##34712
22324     F2 FA 61 FC | 	wrlong	result1, objptr
22328     43 00 00 FF 
2232c     98 E5 85 F1 | 	sub	objptr, ##34712
22330     F2 FA 01 F6 | 	mov	result1, objptr
22334     94 FA 25 F4 | 	bith	result1, #148
22338     43 00 00 FF 
2233c     AC E5 05 F1 | 	add	objptr, ##34732
22340     F2 FA 61 FC | 	wrlong	result1, objptr
22344     43 00 00 FF 
22348     AC E5 85 F1 | 	sub	objptr, ##34732
2234c     F2 FA 01 F6 | 	mov	result1, objptr
22350     19 FA 25 F4 | 	bith	result1, #25
22354     43 00 00 FF 
22358     9C E5 05 F1 | 	add	objptr, ##34716
2235c     F2 FA 61 FC | 	wrlong	result1, objptr
22360     43 00 00 FF 
22364     9C E5 85 F1 | 	sub	objptr, ##34716
22368     F2 FA 01 F6 | 	mov	result1, objptr
2236c     00 08 01 FF 
22370     00 FA 45 F5 | 	or	result1, ##34603008
22374     43 00 00 FF 
22378     B8 E4 05 F1 | 	add	objptr, ##34488
2237c     F2 FA 61 FC | 	wrlong	result1, objptr
22380     43 00 00 FF 
22384     B8 E4 85 F1 | 	sub	objptr, ##34488
22388     F2 FA 01 F6 | 	mov	result1, objptr
2238c     00 10 01 FF 
22390     00 FA 45 F5 | 	or	result1, ##35651584
22394     43 00 00 FF 
22398     A4 E5 05 F1 | 	add	objptr, ##34724
2239c     F2 FA 61 FC | 	wrlong	result1, objptr
223a0     43 00 00 FF 
223a4     A4 E5 85 F1 | 	sub	objptr, ##34724
223a8     F2 FA 01 F6 | 	mov	result1, objptr
223ac     00 18 01 FF 
223b0     00 FA 45 F5 | 	or	result1, ##36700160
223b4     43 00 00 FF 
223b8     A8 E5 05 F1 | 	add	objptr, ##34728
223bc     F2 FA 61 FC | 	wrlong	result1, objptr
223c0     43 00 00 FF 
223c4     A8 E5 85 F1 | 	sub	objptr, ##34728
223c8     F2 FA 01 F6 | 	mov	result1, objptr
223cc     00 20 01 FF 
223d0     00 FA 45 F5 | 	or	result1, ##37748736
223d4     43 00 00 FF 
223d8     B4 E5 05 F1 | 	add	objptr, ##34740
223dc     F2 FA 61 FC | 	wrlong	result1, objptr
223e0     43 00 00 FF 
223e4     B4 E5 85 F1 | 	sub	objptr, ##34740
223e8     F2 FA 01 F6 | 	mov	result1, objptr
223ec     00 28 01 FF 
223f0     00 FA 45 F5 | 	or	result1, ##38797312
223f4     43 00 00 FF 
223f8     B8 E5 05 F1 | 	add	objptr, ##34744
223fc     F2 FA 61 FC | 	wrlong	result1, objptr
22400     43 00 00 FF 
22404     B8 E5 85 F1 | 	sub	objptr, ##34744
22408     F2 FA 01 F6 | 	mov	result1, objptr
2240c     00 30 01 FF 
22410     00 FA 45 F5 | 	or	result1, ##39845888
22414     43 00 00 FF 
22418     BC E5 05 F1 | 	add	objptr, ##34748
2241c     F2 FA 61 FC | 	wrlong	result1, objptr
22420     43 00 00 FF 
22424     BC E5 85 F1 | 	sub	objptr, ##34748
22428     F2 FA 01 F6 | 	mov	result1, objptr
2242c     00 38 01 FF 
22430     00 FA 45 F5 | 	or	result1, ##40894464
22434     43 00 00 FF 
22438     C0 E5 05 F1 | 	add	objptr, ##34752
2243c     F2 FA 61 FC | 	wrlong	result1, objptr
22440     43 00 00 FF 
22444     C0 E5 85 F1 | 	sub	objptr, ##34752
22448     F2 FA 01 F6 | 	mov	result1, objptr
2244c     00 40 01 FF 
22450     00 FA 45 F5 | 	or	result1, ##41943040
22454     43 00 00 FF 
22458     C8 E5 05 F1 | 	add	objptr, ##34760
2245c     F2 FA 61 FC | 	wrlong	result1, objptr
22460     43 00 00 FF 
22464     C8 E5 85 F1 | 	sub	objptr, ##34760
22468     F2 FA 01 F6 | 	mov	result1, objptr
2246c     00 08 01 FF 
22470     00 FA 45 F5 | 	or	result1, ##34603008
22474     43 00 00 FF 
22478     CC E5 05 F1 | 	add	objptr, ##34764
2247c     F2 FA 61 FC | 	wrlong	result1, objptr
22480     43 00 00 FF 
22484     CC E5 85 F1 | 	sub	objptr, ##34764
22488     F2 FA 01 F6 | 	mov	result1, objptr
2248c     00 48 01 FF 
22490     00 FA 45 F5 | 	or	result1, ##42991616
22494     43 00 00 FF 
22498     CC E4 05 F1 | 	add	objptr, ##34508
2249c     F2 FA 61 FC | 	wrlong	result1, objptr
224a0     43 00 00 FF 
224a4     CC E4 85 F1 | 	sub	objptr, ##34508
224a8     F2 FA 01 F6 | 	mov	result1, objptr
224ac     00 50 01 FF 
224b0     00 FA 45 F5 | 	or	result1, ##44040192
224b4     43 00 00 FF 
224b8     FC E4 05 F1 | 	add	objptr, ##34556
224bc     F2 FA 61 FC | 	wrlong	result1, objptr
224c0     43 00 00 FF 
224c4     FC E4 85 F1 | 	sub	objptr, ##34556
224c8     F2 FA 01 F6 | 	mov	result1, objptr
224cc     00 58 01 FF 
224d0     00 FA 45 F5 | 	or	result1, ##45088768
224d4     43 00 00 FF 
224d8     F8 E4 05 F1 | 	add	objptr, ##34552
224dc     F2 FA 61 FC | 	wrlong	result1, objptr
224e0     43 00 00 FF 
224e4     F8 E4 85 F1 | 	sub	objptr, ##34552
224e8     F2 FA 01 F6 | 	mov	result1, objptr
224ec     00 60 01 FF 
224f0     00 FA 45 F5 | 	or	result1, ##46137344
224f4     43 00 00 FF 
224f8     9C E4 05 F1 | 	add	objptr, ##34460
224fc     F2 FA 61 FC | 	wrlong	result1, objptr
22500     43 00 00 FF 
22504     9C E4 85 F1 | 	sub	objptr, ##34460
22508     F2 FA 01 F6 | 	mov	result1, objptr
2250c     00 68 01 FF 
22510     00 FA 45 F5 | 	or	result1, ##47185920
22514     43 00 00 FF 
22518     A0 E4 05 F1 | 	add	objptr, ##34464
2251c     F2 FA 61 FC | 	wrlong	result1, objptr
22520     43 00 00 FF 
22524     A0 E4 85 F1 | 	sub	objptr, ##34464
22528     F2 FA 01 F6 | 	mov	result1, objptr
2252c     00 70 01 FF 
22530     00 FA 45 F5 | 	or	result1, ##48234496
22534     43 00 00 FF 
22538     08 E5 05 F1 | 	add	objptr, ##34568
2253c     F2 FA 61 FC | 	wrlong	result1, objptr
22540     43 00 00 FF 
22544     08 E5 85 F1 | 	sub	objptr, ##34568
22548     F2 FA 01 F6 | 	mov	result1, objptr
2254c     00 78 01 FF 
22550     00 FA 45 F5 | 	or	result1, ##49283072
22554     43 00 00 FF 
22558     B0 E5 05 F1 | 	add	objptr, ##34736
2255c     F2 FA 61 FC | 	wrlong	result1, objptr
22560     43 00 00 FF 
22564     B0 E5 85 F1 | 	sub	objptr, ##34736
22568     F2 FA 01 F6 | 	mov	result1, objptr
2256c     38 FA 25 F4 | 	bith	result1, #56
22570     43 00 00 FF 
22574     C4 E5 05 F1 | 	add	objptr, ##34756
22578     F2 FA 61 FC | 	wrlong	result1, objptr
2257c     43 00 00 FF 
22580     C4 E5 85 F1 | 	sub	objptr, ##34756
22584     F2 FA 01 F6 | 	mov	result1, objptr
22588     00 88 01 FF 
2258c     00 FA 45 F5 | 	or	result1, ##51380224
22590     43 00 00 FF 
22594     D0 E5 05 F1 | 	add	objptr, ##34768
22598     F2 FA 61 FC | 	wrlong	result1, objptr
2259c     43 00 00 FF 
225a0     D0 E5 85 F1 | 	sub	objptr, ##34768
225a4     F2 FA 01 F6 | 	mov	result1, objptr
225a8     00 90 01 FF 
225ac     00 FA 45 F5 | 	or	result1, ##52428800
225b0     43 00 00 FF 
225b4     D4 E5 05 F1 | 	add	objptr, ##34772
225b8     F2 FA 61 FC | 	wrlong	result1, objptr
225bc     43 00 00 FF 
225c0     D4 E5 85 F1 | 	sub	objptr, ##34772
225c4     F2 FA 01 F6 | 	mov	result1, objptr
225c8     00 98 01 FF 
225cc     00 FA 45 F5 | 	or	result1, ##53477376
225d0     43 00 00 FF 
225d4     D8 E5 05 F1 | 	add	objptr, ##34776
225d8     F2 FA 61 FC | 	wrlong	result1, objptr
225dc     43 00 00 FF 
225e0     D8 E5 85 F1 | 	sub	objptr, ##34776
225e4     F2 FA 01 F6 | 	mov	result1, objptr
225e8     00 A0 01 FF 
225ec     00 FA 45 F5 | 	or	result1, ##54525952
225f0     43 00 00 FF 
225f4     DC E5 05 F1 | 	add	objptr, ##34780
225f8     F2 FA 61 FC | 	wrlong	result1, objptr
225fc     43 00 00 FF 
22600     DC E5 85 F1 | 	sub	objptr, ##34780
22604     F2 FA 01 F6 | 	mov	result1, objptr
22608     00 A8 01 FF 
2260c     00 FA 45 F5 | 	or	result1, ##55574528
22610     43 00 00 FF 
22614     E0 E5 05 F1 | 	add	objptr, ##34784
22618     F2 FA 61 FC | 	wrlong	result1, objptr
2261c     43 00 00 FF 
22620     E0 E5 85 F1 | 	sub	objptr, ##34784
22624     F2 FA 01 F6 | 	mov	result1, objptr
22628     00 B0 01 FF 
2262c     00 FA 45 F5 | 	or	result1, ##56623104
22630     43 00 00 FF 
22634     E4 E5 05 F1 | 	add	objptr, ##34788
22638     F2 FA 61 FC | 	wrlong	result1, objptr
2263c     43 00 00 FF 
22640     E4 E5 85 F1 | 	sub	objptr, ##34788
22644     F2 FA 01 F6 | 	mov	result1, objptr
22648     94 FA 25 F4 | 	bith	result1, #148
2264c     43 00 00 FF 
22650     AC E5 05 F1 | 	add	objptr, ##34732
22654     F2 FA 61 FC | 	wrlong	result1, objptr
22658     43 00 00 FF 
2265c     AC E5 85 F1 | 	sub	objptr, ##34732
22660     F2 FA 01 F6 | 	mov	result1, objptr
22664     00 B8 01 FF 
22668     00 FA 45 F5 | 	or	result1, ##57671680
2266c     43 00 00 FF 
22670     EC E5 05 F1 | 	add	objptr, ##34796
22674     F2 FA 61 FC | 	wrlong	result1, objptr
22678     43 00 00 FF 
2267c     EC E5 85 F1 | 	sub	objptr, ##34796
22680     F2 FA 01 F6 | 	mov	result1, objptr
22684     57 FA 25 F4 | 	bith	result1, #87
22688     43 00 00 FF 
2268c     E8 E5 05 F1 | 	add	objptr, ##34792
22690     F2 FA 61 FC | 	wrlong	result1, objptr
22694     43 00 00 FF 
22698     E8 E5 85 F1 | 	sub	objptr, ##34792
2269c     F2 FA 01 F6 | 	mov	result1, objptr
226a0     00 C8 01 FF 
226a4     00 FA 45 F5 | 	or	result1, ##59768832
226a8     44 00 00 FF 
226ac     00 E4 05 F1 | 	add	objptr, ##34816
226b0     F2 FA 61 FC | 	wrlong	result1, objptr
226b4     44 00 00 FF 
226b8     00 E4 85 F1 | 	sub	objptr, ##34816
226bc     F2 FA 01 F6 | 	mov	result1, objptr
226c0     00 D0 01 FF 
226c4     00 FA 45 F5 | 	or	result1, ##60817408
226c8     44 00 00 FF 
226cc     04 E4 05 F1 | 	add	objptr, ##34820
226d0     F2 FA 61 FC | 	wrlong	result1, objptr
226d4     44 00 00 FF 
226d8     04 E4 85 F1 | 	sub	objptr, ##34820
226dc     F2 FA 01 F6 | 	mov	result1, objptr
226e0     00 D8 01 FF 
226e4     00 FA 45 F5 | 	or	result1, ##61865984
226e8     43 00 00 FF 
226ec     F0 E5 05 F1 | 	add	objptr, ##34800
226f0     F2 FA 61 FC | 	wrlong	result1, objptr
226f4     43 00 00 FF 
226f8     F0 E5 85 F1 | 	sub	objptr, ##34800
226fc     F2 FA 01 F6 | 	mov	result1, objptr
22700     76 FA 25 F4 | 	bith	result1, #118
22704     43 00 00 FF 
22708     F4 E5 05 F1 | 	add	objptr, ##34804
2270c     F2 FA 61 FC | 	wrlong	result1, objptr
22710     43 00 00 FF 
22714     F4 E5 85 F1 | 	sub	objptr, ##34804
22718     F2 FA 01 F6 | 	mov	result1, objptr
2271c     00 E8 01 FF 
22720     00 FA 45 F5 | 	or	result1, ##63963136
22724     43 00 00 FF 
22728     F8 E5 05 F1 | 	add	objptr, ##34808
2272c     F2 FA 61 FC | 	wrlong	result1, objptr
22730     43 00 00 FF 
22734     F8 E5 85 F1 | 	sub	objptr, ##34808
22738     F2 FA 01 F6 | 	mov	result1, objptr
2273c     95 FA 25 F4 | 	bith	result1, #149
22740     43 00 00 FF 
22744     FC E5 05 F1 | 	add	objptr, ##34812
22748     F2 FA 61 FC | 	wrlong	result1, objptr
2274c     43 00 00 FF 
22750     FC E5 85 F1 | 	sub	objptr, ##34812
22754     F2 FA 01 F6 | 	mov	result1, objptr
22758     B4 FA 25 F4 | 	bith	result1, #180
2275c     44 00 00 FF 
22760     0C E4 05 F1 | 	add	objptr, ##34828
22764     F2 FA 61 FC | 	wrlong	result1, objptr
22768     44 00 00 FF 
2276c     0C E4 85 F1 | 	sub	objptr, ##34828
22770     F2 FA 01 F6 | 	mov	result1, objptr
22774     1A FA 25 F4 | 	bith	result1, #26
22778     44 00 00 FF 
2277c     08 E4 05 F1 | 	add	objptr, ##34824
22780     F2 FA 61 FC | 	wrlong	result1, objptr
22784     44 00 00 FF 
22788     08 E4 85 F1 | 	sub	objptr, ##34824
2278c     F2 FA 01 F6 | 	mov	result1, objptr
22790     00 08 02 FF 
22794     00 FA 45 F5 | 	or	result1, ##68157440
22798     44 00 00 FF 
2279c     18 E4 05 F1 | 	add	objptr, ##34840
227a0     F2 FA 61 FC | 	wrlong	result1, objptr
227a4     44 00 00 FF 
227a8     18 E4 85 F1 | 	sub	objptr, ##34840
227ac     F2 FA 01 F6 | 	mov	result1, objptr
227b0     00 10 02 FF 
227b4     00 FA 45 F5 | 	or	result1, ##69206016
227b8     44 00 00 FF 
227bc     14 E4 05 F1 | 	add	objptr, ##34836
227c0     F2 FA 61 FC | 	wrlong	result1, objptr
227c4     44 00 00 FF 
227c8     14 E4 85 F1 | 	sub	objptr, ##34836
227cc     F2 FA 01 F6 | 	mov	result1, objptr
227d0     00 18 02 FF 
227d4     00 FA 45 F5 | 	or	result1, ##70254592
227d8     44 00 00 FF 
227dc     10 E4 05 F1 | 	add	objptr, ##34832
227e0     F2 FA 61 FC | 	wrlong	result1, objptr
227e4     44 00 00 FF 
227e8     10 E4 85 F1 | 	sub	objptr, ##34832
227ec     F2 FA 01 F6 | 	mov	result1, objptr
227f0     00 20 02 FF 
227f4     00 FA 45 F5 | 	or	result1, ##71303168
227f8     44 00 00 FF 
227fc     1C E4 05 F1 | 	add	objptr, ##34844
22800     F2 FA 61 FC | 	wrlong	result1, objptr
22804     44 00 00 FF 
22808     1C E4 85 F1 | 	sub	objptr, ##34844
2280c     F2 FA 01 F6 | 	mov	result1, objptr
22810     00 28 02 FF 
22814     00 FA 45 F5 | 	or	result1, ##72351744
22818     44 00 00 FF 
2281c     20 E4 05 F1 | 	add	objptr, ##34848
22820     F2 FA 61 FC | 	wrlong	result1, objptr
22824     44 00 00 FF 
22828     20 E4 85 F1 | 	sub	objptr, ##34848
2282c     F2 FA 01 F6 | 	mov	result1, objptr
22830     00 30 02 FF 
22834     00 FA 45 F5 | 	or	result1, ##73400320
22838     43 00 00 FF 
2283c     B4 E4 05 F1 | 	add	objptr, ##34484
22840     F2 FA 61 FC | 	wrlong	result1, objptr
22844     43 00 00 FF 
22848     B4 E4 85 F1 | 	sub	objptr, ##34484
2284c     F2 FA 01 F6 | 	mov	result1, objptr
22850     00 38 02 FF 
22854     00 FA 45 F5 | 	or	result1, ##74448896
22858     44 00 00 FF 
2285c     38 E4 05 F1 | 	add	objptr, ##34872
22860     F2 FA 61 FC | 	wrlong	result1, objptr
22864     44 00 00 FF 
22868     38 E4 85 F1 | 	sub	objptr, ##34872
2286c     F2 FA 01 F6 | 	mov	result1, objptr
22870     00 40 02 FF 
22874     00 FA 45 F5 | 	or	result1, ##75497472
22878     44 00 00 FF 
2287c     48 E4 05 F1 | 	add	objptr, ##34888
22880     F2 FA 61 FC | 	wrlong	result1, objptr
22884     44 00 00 FF 
22888     48 E4 85 F1 | 	sub	objptr, ##34888
2288c     F2 FA 01 F6 | 	mov	result1, objptr
22890     00 48 02 FF 
22894     00 FA 45 F5 | 	or	result1, ##76546048
22898     44 00 00 FF 
2289c     4C E4 05 F1 | 	add	objptr, ##34892
228a0     F2 FA 61 FC | 	wrlong	result1, objptr
228a4     44 00 00 FF 
228a8     4C E4 85 F1 | 	sub	objptr, ##34892
228ac     F2 FA 01 F6 | 	mov	result1, objptr
228b0     00 50 02 FF 
228b4     00 FA 45 F5 | 	or	result1, ##77594624
228b8     44 00 00 FF 
228bc     44 E4 05 F1 | 	add	objptr, ##34884
228c0     F2 FA 61 FC | 	wrlong	result1, objptr
228c4     44 00 00 FF 
228c8     44 E4 85 F1 | 	sub	objptr, ##34884
228cc     F2 FA 01 F6 | 	mov	result1, objptr
228d0     00 58 02 FF 
228d4     00 FA 45 F5 | 	or	result1, ##78643200
228d8     44 00 00 FF 
228dc     3C E4 05 F1 | 	add	objptr, ##34876
228e0     F2 FA 61 FC | 	wrlong	result1, objptr
228e4     44 00 00 FF 
228e8     3C E4 85 F1 | 	sub	objptr, ##34876
228ec     F2 FA 01 F6 | 	mov	result1, objptr
228f0     00 60 02 FF 
228f4     00 FA 45 F5 | 	or	result1, ##79691776
228f8     44 00 00 FF 
228fc     40 E4 05 F1 | 	add	objptr, ##34880
22900     F2 FA 61 FC | 	wrlong	result1, objptr
22904     44 00 00 FF 
22908     40 E4 85 F1 | 	sub	objptr, ##34880
2290c     F2 FA 01 F6 | 	mov	result1, objptr
22910     00 68 02 FF 
22914     00 FA 45 F5 | 	or	result1, ##80740352
22918     44 00 00 FF 
2291c     50 E4 05 F1 | 	add	objptr, ##34896
22920     F2 FA 61 FC | 	wrlong	result1, objptr
22924     44 00 00 FF 
22928     50 E4 85 F1 | 	sub	objptr, ##34896
2292c     F2 FA 01 F6 | 	mov	result1, objptr
22930     00 70 02 FF 
22934     00 FA 45 F5 | 	or	result1, ##81788928
22938     44 00 00 FF 
2293c     54 E4 05 F1 | 	add	objptr, ##34900
22940     F2 FA 61 FC | 	wrlong	result1, objptr
22944     44 00 00 FF 
22948     54 E4 85 F1 | 	sub	objptr, ##34900
2294c     F2 FA 01 F6 | 	mov	result1, objptr
22950     00 78 02 FF 
22954     00 FA 45 F5 | 	or	result1, ##82837504
22958     44 00 00 FF 
2295c     58 E4 05 F1 | 	add	objptr, ##34904
22960     F2 FA 61 FC | 	wrlong	result1, objptr
22964     44 00 00 FF 
22968     58 E4 85 F1 | 	sub	objptr, ##34904
2296c     F2 FA 01 F6 | 	mov	result1, objptr
22970     00 80 02 FF 
22974     00 FA 45 F5 | 	or	result1, ##83886080
22978     44 00 00 FF 
2297c     5C E4 05 F1 | 	add	objptr, ##34908
22980     F2 FA 61 FC | 	wrlong	result1, objptr
22984     44 00 00 FF 
22988     5C E4 85 F1 | 	sub	objptr, ##34908
2298c     F2 FA 01 F6 | 	mov	result1, objptr
22990     00 88 02 FF 
22994     00 FA 45 F5 | 	or	result1, ##84934656
22998     44 00 00 FF 
2299c     60 E4 05 F1 | 	add	objptr, ##34912
229a0     F2 FA 61 FC | 	wrlong	result1, objptr
229a4     44 00 00 FF 
229a8     60 E4 85 F1 | 	sub	objptr, ##34912
229ac     F2 FA 01 F6 | 	mov	result1, objptr
229b0     00 90 02 FF 
229b4     00 FA 45 F5 | 	or	result1, ##85983232
229b8     44 00 00 FF 
229bc     64 E4 05 F1 | 	add	objptr, ##34916
229c0     F2 FA 61 FC | 	wrlong	result1, objptr
229c4     44 00 00 FF 
229c8     64 E4 85 F1 | 	sub	objptr, ##34916
229cc     F2 FA 01 F6 | 	mov	result1, objptr
229d0     00 98 02 FF 
229d4     00 FA 45 F5 | 	or	result1, ##87031808
229d8     44 00 00 FF 
229dc     68 E4 05 F1 | 	add	objptr, ##34920
229e0     F2 FA 61 FC | 	wrlong	result1, objptr
229e4     44 00 00 FF 
229e8     68 E4 85 F1 | 	sub	objptr, ##34920
229ec     F2 FA 01 F6 | 	mov	result1, objptr
229f0     00 A0 02 FF 
229f4     00 FA 45 F5 | 	or	result1, ##88080384
229f8     44 00 00 FF 
229fc     6C E4 05 F1 | 	add	objptr, ##34924
22a00     F2 FA 61 FC | 	wrlong	result1, objptr
22a04     44 00 00 FF 
22a08     6C E4 85 F1 | 	sub	objptr, ##34924
22a0c     F2 FA 01 F6 | 	mov	result1, objptr
22a10     00 A8 02 FF 
22a14     00 FA 45 F5 | 	or	result1, ##89128960
22a18     44 00 00 FF 
22a1c     78 E4 05 F1 | 	add	objptr, ##34936
22a20     F2 FA 61 FC | 	wrlong	result1, objptr
22a24     44 00 00 FF 
22a28     78 E4 85 F1 | 	sub	objptr, ##34936
22a2c     F2 FA 01 F6 | 	mov	result1, objptr
22a30     00 B0 02 FF 
22a34     00 FA 45 F5 | 	or	result1, ##90177536
22a38     44 00 00 FF 
22a3c     70 E4 05 F1 | 	add	objptr, ##34928
22a40     F2 FA 61 FC | 	wrlong	result1, objptr
22a44     44 00 00 FF 
22a48     70 E4 85 F1 | 	sub	objptr, ##34928
22a4c     F2 FA 01 F6 | 	mov	result1, objptr
22a50     00 B8 02 FF 
22a54     00 FA 45 F5 | 	or	result1, ##91226112
22a58     44 00 00 FF 
22a5c     74 E4 05 F1 | 	add	objptr, ##34932
22a60     F2 FA 61 FC | 	wrlong	result1, objptr
22a64     44 00 00 FF 
22a68     74 E4 85 F1 | 	sub	objptr, ##34932
22a6c     F2 FA 01 F6 | 	mov	result1, objptr
22a70     00 C0 02 FF 
22a74     00 FA 45 F5 | 	or	result1, ##92274688
22a78     44 00 00 FF 
22a7c     7C E4 05 F1 | 	add	objptr, ##34940
22a80     F2 FA 61 FC | 	wrlong	result1, objptr
22a84     44 00 00 FF 
22a88     7C E4 85 F1 | 	sub	objptr, ##34940
22a8c     F2 FA 01 F6 | 	mov	result1, objptr
22a90     00 C8 02 FF 
22a94     00 FA 45 F5 | 	or	result1, ##93323264
22a98     44 00 00 FF 
22a9c     24 E4 05 F1 | 	add	objptr, ##34852
22aa0     F2 FA 61 FC | 	wrlong	result1, objptr
22aa4     44 00 00 FF 
22aa8     24 E4 85 F1 | 	sub	objptr, ##34852
22aac     F2 FA 01 F6 | 	mov	result1, objptr
22ab0     00 D0 02 FF 
22ab4     00 FA 45 F5 | 	or	result1, ##94371840
22ab8     44 00 00 FF 
22abc     2C E4 05 F1 | 	add	objptr, ##34860
22ac0     F2 FA 61 FC | 	wrlong	result1, objptr
22ac4     44 00 00 FF 
22ac8     2C E4 85 F1 | 	sub	objptr, ##34860
22acc     F2 FA 01 F6 | 	mov	result1, objptr
22ad0     00 D8 02 FF 
22ad4     00 FA 45 F5 | 	or	result1, ##95420416
22ad8     44 00 00 FF 
22adc     30 E4 05 F1 | 	add	objptr, ##34864
22ae0     F2 FA 61 FC | 	wrlong	result1, objptr
22ae4     44 00 00 FF 
22ae8     30 E4 85 F1 | 	sub	objptr, ##34864
22aec     F2 FA 01 F6 | 	mov	result1, objptr
22af0     00 E0 02 FF 
22af4     00 FA 45 F5 | 	or	result1, ##96468992
22af8     44 00 00 FF 
22afc     80 E4 05 F1 | 	add	objptr, ##34944
22b00     F2 FA 61 FC | 	wrlong	result1, objptr
22b04     44 00 00 FF 
22b08     80 E4 85 F1 | 	sub	objptr, ##34944
22b0c     F2 FA 01 F6 | 	mov	result1, objptr
22b10     00 E8 02 FF 
22b14     00 FA 45 F5 | 	or	result1, ##97517568
22b18     44 00 00 FF 
22b1c     84 E4 05 F1 | 	add	objptr, ##34948
22b20     F2 FA 61 FC | 	wrlong	result1, objptr
22b24     44 00 00 FF 
22b28     84 E4 85 F1 | 	sub	objptr, ##34948
22b2c     F2 FA 01 F6 | 	mov	result1, objptr
22b30     00 F0 02 FF 
22b34     00 FA 45 F5 | 	or	result1, ##98566144
22b38     44 00 00 FF 
22b3c     88 E4 05 F1 | 	add	objptr, ##34952
22b40     F2 FA 61 FC | 	wrlong	result1, objptr
22b44     44 00 00 FF 
22b48     88 E4 85 F1 | 	sub	objptr, ##34952
22b4c     F2 FA 01 F6 | 	mov	result1, objptr
22b50     00 F8 02 FF 
22b54     00 FA 45 F5 | 	or	result1, ##99614720
22b58     44 00 00 FF 
22b5c     34 E4 05 F1 | 	add	objptr, ##34868
22b60     F2 FA 61 FC | 	wrlong	result1, objptr
22b64     44 00 00 FF 
22b68     34 E4 85 F1 | 	sub	objptr, ##34868
22b6c     F2 FA 01 F6 | 	mov	result1, objptr
22b70     39 FA 25 F4 | 	bith	result1, #57
22b74     44 00 00 FF 
22b78     98 E4 05 F1 | 	add	objptr, ##34968
22b7c     F2 FA 61 FC | 	wrlong	result1, objptr
22b80     44 00 00 FF 
22b84     98 E4 85 F1 | 	sub	objptr, ##34968
22b88     F2 FA 01 F6 | 	mov	result1, objptr
22b8c     00 08 03 FF 
22b90     00 FA 45 F5 | 	or	result1, ##101711872
22b94     44 00 00 FF 
22b98     A0 E4 05 F1 | 	add	objptr, ##34976
22b9c     F2 FA 61 FC | 	wrlong	result1, objptr
22ba0     44 00 00 FF 
22ba4     A0 E4 85 F1 | 	sub	objptr, ##34976
22ba8     F2 FA 01 F6 | 	mov	result1, objptr
22bac     00 10 03 FF 
22bb0     00 FA 45 F5 | 	or	result1, ##102760448
22bb4     44 00 00 FF 
22bb8     94 E4 05 F1 | 	add	objptr, ##34964
22bbc     F2 FA 61 FC | 	wrlong	result1, objptr
22bc0     44 00 00 FF 
22bc4     94 E4 85 F1 | 	sub	objptr, ##34964
22bc8     F2 FA 01 F6 | 	mov	result1, objptr
22bcc     00 18 03 FF 
22bd0     00 FA 45 F5 | 	or	result1, ##103809024
22bd4     44 00 00 FF 
22bd8     90 E4 05 F1 | 	add	objptr, ##34960
22bdc     F2 FA 61 FC | 	wrlong	result1, objptr
22be0     44 00 00 FF 
22be4     90 E4 85 F1 | 	sub	objptr, ##34960
22be8     F2 FA 01 F6 | 	mov	result1, objptr
22bec     00 20 03 FF 
22bf0     00 FA 45 F5 | 	or	result1, ##104857600
22bf4     44 00 00 FF 
22bf8     8C E4 05 F1 | 	add	objptr, ##34956
22bfc     F2 FA 61 FC | 	wrlong	result1, objptr
22c00     44 00 00 FF 
22c04     8C E4 85 F1 | 	sub	objptr, ##34956
22c08     F2 FA 01 F6 | 	mov	result1, objptr
22c0c     00 28 03 FF 
22c10     00 FA 45 F5 | 	or	result1, ##105906176
22c14     44 00 00 FF 
22c18     9C E4 05 F1 | 	add	objptr, ##34972
22c1c     F2 FA 61 FC | 	wrlong	result1, objptr
22c20     44 00 00 FF 
22c24     9C E4 85 F1 | 	sub	objptr, ##34972
22c28     F2 FA 01 F6 | 	mov	result1, objptr
22c2c     00 30 03 FF 
22c30     00 FA 45 F5 | 	or	result1, ##106954752
22c34     44 00 00 FF 
22c38     A4 E4 05 F1 | 	add	objptr, ##34980
22c3c     F2 FA 61 FC | 	wrlong	result1, objptr
22c40     44 00 00 FF 
22c44     A4 E4 85 F1 | 	sub	objptr, ##34980
22c48     F2 FA 01 F6 | 	mov	result1, objptr
22c4c     00 38 03 FF 
22c50     00 FA 45 F5 | 	or	result1, ##108003328
22c54     44 00 00 FF 
22c58     A8 E4 05 F1 | 	add	objptr, ##34984
22c5c     F2 FA 61 FC | 	wrlong	result1, objptr
22c60     44 00 00 FF 
22c64     A8 E4 85 F1 | 	sub	objptr, ##34984
22c68     F2 FA 01 F6 | 	mov	result1, objptr
22c6c     00 40 03 FF 
22c70     00 FA 45 F5 | 	or	result1, ##109051904
22c74     44 00 00 FF 
22c78     AC E4 05 F1 | 	add	objptr, ##34988
22c7c     F2 FA 61 FC | 	wrlong	result1, objptr
22c80     44 00 00 FF 
22c84     AC E4 85 F1 | 	sub	objptr, ##34988
22c88     F2 FA 01 F6 | 	mov	result1, objptr
22c8c     00 48 03 FF 
22c90     00 FA 45 F5 | 	or	result1, ##110100480
22c94     44 00 00 FF 
22c98     B4 E4 05 F1 | 	add	objptr, ##34996
22c9c     F2 FA 61 FC | 	wrlong	result1, objptr
22ca0     44 00 00 FF 
22ca4     B4 E4 85 F1 | 	sub	objptr, ##34996
22ca8     F2 FA 01 F6 | 	mov	result1, objptr
22cac     00 50 03 FF 
22cb0     00 FA 45 F5 | 	or	result1, ##111149056
22cb4     44 00 00 FF 
22cb8     B8 E4 05 F1 | 	add	objptr, ##35000
22cbc     F2 FA 61 FC | 	wrlong	result1, objptr
22cc0     44 00 00 FF 
22cc4     B8 E4 85 F1 | 	sub	objptr, ##35000
22cc8     F2 FA 01 F6 | 	mov	result1, objptr
22ccc     00 58 03 FF 
22cd0     00 FA 45 F5 | 	or	result1, ##112197632
22cd4     44 00 00 FF 
22cd8     BC E4 05 F1 | 	add	objptr, ##35004
22cdc     F2 FA 61 FC | 	wrlong	result1, objptr
22ce0     44 00 00 FF 
22ce4     BC E4 85 F1 | 	sub	objptr, ##35004
22ce8     F2 FA 01 F6 | 	mov	result1, objptr
22cec     00 60 03 FF 
22cf0     00 FA 45 F5 | 	or	result1, ##113246208
22cf4     44 00 00 FF 
22cf8     C0 E4 05 F1 | 	add	objptr, ##35008
22cfc     F2 FA 61 FC | 	wrlong	result1, objptr
22d00     44 00 00 FF 
22d04     C0 E4 85 F1 | 	sub	objptr, ##35008
22d08     F2 FA 01 F6 | 	mov	result1, objptr
22d0c     00 68 03 FF 
22d10     00 FA 45 F5 | 	or	result1, ##114294784
22d14     44 00 00 FF 
22d18     C4 E4 05 F1 | 	add	objptr, ##35012
22d1c     F2 FA 61 FC | 	wrlong	result1, objptr
22d20     44 00 00 FF 
22d24     C4 E4 85 F1 | 	sub	objptr, ##35012
22d28     F2 FA 01 F6 | 	mov	result1, objptr
22d2c     00 70 03 FF 
22d30     00 FA 45 F5 | 	or	result1, ##115343360
22d34     44 00 00 FF 
22d38     C8 E4 05 F1 | 	add	objptr, ##35016
22d3c     F2 FA 61 FC | 	wrlong	result1, objptr
22d40     44 00 00 FF 
22d44     C8 E4 85 F1 | 	sub	objptr, ##35016
22d48     F2 FA 01 F6 | 	mov	result1, objptr
22d4c     00 08 01 FF 
22d50     00 FA 45 F5 | 	or	result1, ##34603008
22d54     44 00 00 FF 
22d58     CC E4 05 F1 | 	add	objptr, ##35020
22d5c     F2 FA 61 FC | 	wrlong	result1, objptr
22d60     44 00 00 FF 
22d64     CC E4 85 F1 | 	sub	objptr, ##35020
22d68     F2 FA 01 F6 | 	mov	result1, objptr
22d6c     00 78 03 FF 
22d70     00 FA 45 F5 | 	or	result1, ##116391936
22d74     44 00 00 FF 
22d78     D0 E4 05 F1 | 	add	objptr, ##35024
22d7c     F2 FA 61 FC | 	wrlong	result1, objptr
22d80     44 00 00 FF 
22d84     D0 E4 85 F1 | 	sub	objptr, ##35024
22d88     F2 FA 01 F6 | 	mov	result1, objptr
22d8c     58 FA 25 F4 | 	bith	result1, #88
22d90     44 00 00 FF 
22d94     B0 E4 05 F1 | 	add	objptr, ##34992
22d98     F2 FA 61 FC | 	wrlong	result1, objptr
22d9c     44 00 00 FF 
22da0     B0 E4 85 F1 | 	sub	objptr, ##34992
22da4     F2 FA 01 F6 | 	mov	result1, objptr
22da8     00 88 03 FF 
22dac     00 FA 45 F5 | 	or	result1, ##118489088
22db0     43 00 00 FF 
22db4     A8 E4 05 F1 | 	add	objptr, ##34472
22db8     F2 FA 61 FC | 	wrlong	result1, objptr
22dbc     43 00 00 FF 
22dc0     A8 E4 85 F1 | 	sub	objptr, ##34472
22dc4     F2 FA 01 F6 | 	mov	result1, objptr
22dc8     00 90 03 FF 
22dcc     00 FA 45 F5 | 	or	result1, ##119537664
22dd0     44 00 00 FF 
22dd4     D4 E4 05 F1 | 	add	objptr, ##35028
22dd8     F2 FA 61 FC | 	wrlong	result1, objptr
22ddc     44 00 00 FF 
22de0     D4 E4 85 F1 | 	sub	objptr, ##35028
22de4     F2 FA 01 F6 | 	mov	result1, objptr
22de8     00 98 03 FF 
22dec     00 FA 45 F5 | 	or	result1, ##120586240
22df0     44 00 00 FF 
22df4     D8 E4 05 F1 | 	add	objptr, ##35032
22df8     F2 FA 61 FC | 	wrlong	result1, objptr
22dfc     44 00 00 FF 
22e00     D8 E4 85 F1 | 	sub	objptr, ##35032
22e04     F2 FA 01 F6 | 	mov	result1, objptr
22e08     00 A0 03 FF 
22e0c     00 FA 45 F5 | 	or	result1, ##121634816
22e10     44 00 00 FF 
22e14     EC E4 05 F1 | 	add	objptr, ##35052
22e18     F2 FA 61 FC | 	wrlong	result1, objptr
22e1c     44 00 00 FF 
22e20     EC E4 85 F1 | 	sub	objptr, ##35052
22e24     F2 FA 01 F6 | 	mov	result1, objptr
22e28     00 A8 03 FF 
22e2c     00 FA 45 F5 | 	or	result1, ##122683392
22e30     44 00 00 FF 
22e34     E8 E4 05 F1 | 	add	objptr, ##35048
22e38     F2 FA 61 FC | 	wrlong	result1, objptr
22e3c     44 00 00 FF 
22e40     E8 E4 85 F1 | 	sub	objptr, ##35048
22e44     F2 FA 01 F6 | 	mov	result1, objptr
22e48     00 B0 03 FF 
22e4c     00 FA 45 F5 | 	or	result1, ##123731968
22e50     44 00 00 FF 
22e54     E0 E4 05 F1 | 	add	objptr, ##35040
22e58     F2 FA 61 FC | 	wrlong	result1, objptr
22e5c     44 00 00 FF 
22e60     E0 E4 85 F1 | 	sub	objptr, ##35040
22e64     F2 FA 01 F6 | 	mov	result1, objptr
22e68     00 B8 03 FF 
22e6c     00 FA 45 F5 | 	or	result1, ##124780544
22e70     44 00 00 FF 
22e74     DC E4 05 F1 | 	add	objptr, ##35036
22e78     F2 FA 61 FC | 	wrlong	result1, objptr
22e7c     44 00 00 FF 
22e80     DC E4 85 F1 | 	sub	objptr, ##35036
22e84     F2 FA 01 F6 | 	mov	result1, objptr
22e88     77 FA 25 F4 | 	bith	result1, #119
22e8c     44 00 00 FF 
22e90     FC E4 05 F1 | 	add	objptr, ##35068
22e94     F2 FA 61 FC | 	wrlong	result1, objptr
22e98     44 00 00 FF 
22e9c     FC E4 85 F1 | 	sub	objptr, ##35068
22ea0     F2 FA 01 F6 | 	mov	result1, objptr
22ea4     00 C8 03 FF 
22ea8     00 FA 45 F5 | 	or	result1, ##126877696
22eac     44 00 00 FF 
22eb0     F0 E4 05 F1 | 	add	objptr, ##35056
22eb4     F2 FA 61 FC | 	wrlong	result1, objptr
22eb8     44 00 00 FF 
22ebc     F0 E4 85 F1 | 	sub	objptr, ##35056
22ec0     F2 FA 01 F6 | 	mov	result1, objptr
22ec4     00 D0 03 FF 
22ec8     00 FA 45 F5 | 	or	result1, ##127926272
22ecc     44 00 00 FF 
22ed0     F4 E4 05 F1 | 	add	objptr, ##35060
22ed4     F2 FA 61 FC | 	wrlong	result1, objptr
22ed8     44 00 00 FF 
22edc     F4 E4 85 F1 | 	sub	objptr, ##35060
22ee0     F2 FA 01 F6 | 	mov	result1, objptr
22ee4     00 D8 03 FF 
22ee8     00 FA 45 F5 | 	or	result1, ##128974848
22eec     44 00 00 FF 
22ef0     F8 E4 05 F1 | 	add	objptr, ##35064
22ef4     F2 FA 61 FC | 	wrlong	result1, objptr
22ef8     44 00 00 FF 
22efc     F8 E4 85 F1 | 	sub	objptr, ##35064
22f00     F2 FA 01 F6 | 	mov	result1, objptr
22f04     96 FA 25 F4 | 	bith	result1, #150
22f08     44 00 00 FF 
22f0c     00 E5 05 F1 | 	add	objptr, ##35072
22f10     F2 FA 61 FC | 	wrlong	result1, objptr
22f14     44 00 00 FF 
22f18     00 E5 85 F1 | 	sub	objptr, ##35072
22f1c     F2 FA 01 F6 | 	mov	result1, objptr
22f20     00 E8 03 FF 
22f24     00 FA 45 F5 | 	or	result1, ##131072000
22f28     44 00 00 FF 
22f2c     04 E5 05 F1 | 	add	objptr, ##35076
22f30     F2 FA 61 FC | 	wrlong	result1, objptr
22f34     44 00 00 FF 
22f38     04 E5 85 F1 | 	sub	objptr, ##35076
22f3c     F2 FA 01 F6 | 	mov	result1, objptr
22f40     B5 FA 25 F4 | 	bith	result1, #181
22f44     44 00 00 FF 
22f48     08 E5 05 F1 | 	add	objptr, ##35080
22f4c     F2 FA 61 FC | 	wrlong	result1, objptr
22f50     44 00 00 FF 
22f54     08 E5 85 F1 | 	sub	objptr, ##35080
22f58     F2 FA 01 F6 | 	mov	result1, objptr
22f5c     D4 FA 25 F4 | 	bith	result1, #212
22f60     44 00 00 FF 
22f64     0C E5 05 F1 | 	add	objptr, ##35084
22f68     F2 FA 61 FC | 	wrlong	result1, objptr
22f6c     44 00 00 FF 
22f70     0C E5 85 F1 | 	sub	objptr, ##35084
22f74     F2 FA 01 F6 | 	mov	result1, objptr
22f78     1B FA 25 F4 | 	bith	result1, #27
22f7c     44 00 00 FF 
22f80     10 E5 05 F1 | 	add	objptr, ##35088
22f84     F2 FA 61 FC | 	wrlong	result1, objptr
22f88     44 00 00 FF 
22f8c     10 E5 85 F1 | 	sub	objptr, ##35088
22f90     F2 FA 01 F6 | 	mov	result1, objptr
22f94     00 08 04 FF 
22f98     00 FA 45 F5 | 	or	result1, ##135266304
22f9c     44 00 00 FF 
22fa0     14 E5 05 F1 | 	add	objptr, ##35092
22fa4     F2 FA 61 FC | 	wrlong	result1, objptr
22fa8     44 00 00 FF 
22fac     14 E5 85 F1 | 	sub	objptr, ##35092
22fb0     F2 FA 01 F6 | 	mov	result1, objptr
22fb4     00 10 04 FF 
22fb8     00 FA 45 F5 | 	or	result1, ##136314880
22fbc     44 00 00 FF 
22fc0     1C E5 05 F1 | 	add	objptr, ##35100
22fc4     F2 FA 61 FC | 	wrlong	result1, objptr
22fc8     44 00 00 FF 
22fcc     1C E5 85 F1 | 	sub	objptr, ##35100
22fd0     F2 FA 01 F6 | 	mov	result1, objptr
22fd4     00 18 04 FF 
22fd8     00 FA 45 F5 | 	or	result1, ##137363456
22fdc     44 00 00 FF 
22fe0     20 E5 05 F1 | 	add	objptr, ##35104
22fe4     F2 FA 61 FC | 	wrlong	result1, objptr
22fe8     44 00 00 FF 
22fec     20 E5 85 F1 | 	sub	objptr, ##35104
22ff0     F2 FA 01 F6 | 	mov	result1, objptr
22ff4     00 20 04 FF 
22ff8     00 FA 45 F5 | 	or	result1, ##138412032
22ffc     44 00 00 FF 
23000     24 E5 05 F1 | 	add	objptr, ##35108
23004     F2 FA 61 FC | 	wrlong	result1, objptr
23008     44 00 00 FF 
2300c     24 E5 85 F1 | 	sub	objptr, ##35108
23010     F2 FA 01 F6 | 	mov	result1, objptr
23014     00 28 04 FF 
23018     00 FA 45 F5 | 	or	result1, ##139460608
2301c     44 00 00 FF 
23020     18 E5 05 F1 | 	add	objptr, ##35096
23024     F2 FA 61 FC | 	wrlong	result1, objptr
23028     44 00 00 FF 
2302c     18 E5 85 F1 | 	sub	objptr, ##35096
23030     F2 FA 01 F6 | 	mov	result1, objptr
23034     00 30 04 FF 
23038     00 FA 45 F5 | 	or	result1, ##140509184
2303c     44 00 00 FF 
23040     28 E5 05 F1 | 	add	objptr, ##35112
23044     F2 FA 61 FC | 	wrlong	result1, objptr
23048     44 00 00 FF 
2304c     28 E5 85 F1 | 	sub	objptr, ##35112
23050     F2 FA 01 F6 | 	mov	result1, objptr
23054     00 38 04 FF 
23058     00 FA 45 F5 | 	or	result1, ##141557760
2305c     44 00 00 FF 
23060     5C E5 05 F1 | 	add	objptr, ##35164
23064     F2 FA 61 FC | 	wrlong	result1, objptr
23068     44 00 00 FF 
2306c     5C E5 85 F1 | 	sub	objptr, ##35164
23070     F2 FA 01 F6 | 	mov	result1, objptr
23074     00 40 04 FF 
23078     00 FA 45 F5 | 	or	result1, ##142606336
2307c     44 00 00 FF 
23080     54 E5 05 F1 | 	add	objptr, ##35156
23084     F2 FA 61 FC | 	wrlong	result1, objptr
23088     44 00 00 FF 
2308c     54 E5 85 F1 | 	sub	objptr, ##35156
23090     F2 FA 01 F6 | 	mov	result1, objptr
23094     00 48 04 FF 
23098     00 FA 45 F5 | 	or	result1, ##143654912
2309c     44 00 00 FF 
230a0     2C E5 05 F1 | 	add	objptr, ##35116
230a4     F2 FA 61 FC | 	wrlong	result1, objptr
230a8     44 00 00 FF 
230ac     2C E5 85 F1 | 	sub	objptr, ##35116
230b0     F2 FA 01 F6 | 	mov	result1, objptr
230b4     00 50 04 FF 
230b8     00 FA 45 F5 | 	or	result1, ##144703488
230bc     44 00 00 FF 
230c0     30 E5 05 F1 | 	add	objptr, ##35120
230c4     F2 FA 61 FC | 	wrlong	result1, objptr
230c8     44 00 00 FF 
230cc     30 E5 85 F1 | 	sub	objptr, ##35120
230d0     F2 FA 01 F6 | 	mov	result1, objptr
230d4     00 58 04 FF 
230d8     00 FA 45 F5 | 	or	result1, ##145752064
230dc     44 00 00 FF 
230e0     4C E5 05 F1 | 	add	objptr, ##35148
230e4     F2 FA 61 FC | 	wrlong	result1, objptr
230e8     44 00 00 FF 
230ec     4C E5 85 F1 | 	sub	objptr, ##35148
230f0     F2 FA 01 F6 | 	mov	result1, objptr
230f4     00 60 04 FF 
230f8     00 FA 45 F5 | 	or	result1, ##146800640
230fc     44 00 00 FF 
23100     50 E5 05 F1 | 	add	objptr, ##35152
23104     F2 FA 61 FC | 	wrlong	result1, objptr
23108     44 00 00 FF 
2310c     50 E5 85 F1 | 	sub	objptr, ##35152
23110     F2 FA 01 F6 | 	mov	result1, objptr
23114     00 68 04 FF 
23118     00 FA 45 F5 | 	or	result1, ##147849216
2311c     44 00 00 FF 
23120     6C E5 05 F1 | 	add	objptr, ##35180
23124     F2 FA 61 FC | 	wrlong	result1, objptr
23128     44 00 00 FF 
2312c     6C E5 85 F1 | 	sub	objptr, ##35180
23130     F2 FA 01 F6 | 	mov	result1, objptr
23134     00 70 04 FF 
23138     00 FA 45 F5 | 	or	result1, ##148897792
2313c     44 00 00 FF 
23140     68 E5 05 F1 | 	add	objptr, ##35176
23144     F2 FA 61 FC | 	wrlong	result1, objptr
23148     44 00 00 FF 
2314c     68 E5 85 F1 | 	sub	objptr, ##35176
23150     F2 FA 01 F6 | 	mov	result1, objptr
23154     00 78 04 FF 
23158     00 FA 45 F5 | 	or	result1, ##149946368
2315c     44 00 00 FF 
23160     78 E5 05 F1 | 	add	objptr, ##35192
23164     F2 FA 61 FC | 	wrlong	result1, objptr
23168     44 00 00 FF 
2316c     78 E5 85 F1 | 	sub	objptr, ##35192
23170     F2 FA 01 F6 | 	mov	result1, objptr
23174     00 80 04 FF 
23178     00 FA 45 F5 | 	or	result1, ##150994944
2317c     44 00 00 FF 
23180     44 E5 05 F1 | 	add	objptr, ##35140
23184     F2 FA 61 FC | 	wrlong	result1, objptr
23188     44 00 00 FF 
2318c     44 E5 85 F1 | 	sub	objptr, ##35140
23190     F2 FA 01 F6 | 	mov	result1, objptr
23194     00 88 04 FF 
23198     00 FA 45 F5 | 	or	result1, ##152043520
2319c     44 00 00 FF 
231a0     74 E5 05 F1 | 	add	objptr, ##35188
231a4     F2 FA 61 FC | 	wrlong	result1, objptr
231a8     44 00 00 FF 
231ac     74 E5 85 F1 | 	sub	objptr, ##35188
231b0     F2 FA 01 F6 | 	mov	result1, objptr
231b4     00 90 04 FF 
231b8     00 FA 45 F5 | 	or	result1, ##153092096
231bc     44 00 00 FF 
231c0     64 E5 05 F1 | 	add	objptr, ##35172
231c4     F2 FA 61 FC | 	wrlong	result1, objptr
231c8     44 00 00 FF 
231cc     64 E5 85 F1 | 	sub	objptr, ##35172
231d0     F2 FA 01 F6 | 	mov	result1, objptr
231d4     00 98 04 FF 
231d8     00 FA 45 F5 | 	or	result1, ##154140672
231dc     43 00 00 FF 
231e0     14 E5 05 F1 | 	add	objptr, ##34580
231e4     F2 FA 61 FC | 	wrlong	result1, objptr
231e8     43 00 00 FF 
231ec     14 E5 85 F1 | 	sub	objptr, ##34580
231f0     F2 FA 01 F6 | 	mov	result1, objptr
231f4     00 A0 04 FF 
231f8     00 FA 45 F5 | 	or	result1, ##155189248
231fc     44 00 00 FF 
23200     34 E5 05 F1 | 	add	objptr, ##35124
23204     F2 FA 61 FC | 	wrlong	result1, objptr
23208     44 00 00 FF 
2320c     34 E5 85 F1 | 	sub	objptr, ##35124
23210     F2 FA 01 F6 | 	mov	result1, objptr
23214     00 08 01 FF 
23218     00 FA 45 F5 | 	or	result1, ##34603008
2321c     44 00 00 FF 
23220     3C E5 05 F1 | 	add	objptr, ##35132
23224     F2 FA 61 FC | 	wrlong	result1, objptr
23228     44 00 00 FF 
2322c     3C E5 85 F1 | 	sub	objptr, ##35132
23230     F2 FA 01 F6 | 	mov	result1, objptr
23234     00 A8 04 FF 
23238     00 FA 45 F5 | 	or	result1, ##156237824
2323c     44 00 00 FF 
23240     38 E5 05 F1 | 	add	objptr, ##35128
23244     F2 FA 61 FC | 	wrlong	result1, objptr
23248     44 00 00 FF 
2324c     38 E5 85 F1 | 	sub	objptr, ##35128
23250     F2 FA 01 F6 | 	mov	result1, objptr
23254     00 B0 04 FF 
23258     00 FA 45 F5 | 	or	result1, ##157286400
2325c     44 00 00 FF 
23260     7C E5 05 F1 | 	add	objptr, ##35196
23264     F2 FA 61 FC | 	wrlong	result1, objptr
23268     44 00 00 FF 
2326c     7C E5 85 F1 | 	sub	objptr, ##35196
23270     F2 FA 01 F6 | 	mov	result1, objptr
23274     00 B8 04 FF 
23278     00 FA 45 F5 | 	or	result1, ##158334976
2327c     44 00 00 FF 
23280     80 E5 05 F1 | 	add	objptr, ##35200
23284     F2 FA 61 FC | 	wrlong	result1, objptr
23288     44 00 00 FF 
2328c     80 E5 85 F1 | 	sub	objptr, ##35200
23290     F2 FA 01 F6 | 	mov	result1, objptr
23294     00 C0 04 FF 
23298     00 FA 45 F5 | 	or	result1, ##159383552
2329c     44 00 00 FF 
232a0     84 E5 05 F1 | 	add	objptr, ##35204
232a4     F2 FA 61 FC | 	wrlong	result1, objptr
232a8     44 00 00 FF 
232ac     84 E5 85 F1 | 	sub	objptr, ##35204
232b0     F2 FA 01 F6 | 	mov	result1, objptr
232b4     00 C8 04 FF 
232b8     00 FA 45 F5 | 	or	result1, ##160432128
232bc     44 00 00 FF 
232c0     88 E5 05 F1 | 	add	objptr, ##35208
232c4     F2 FA 61 FC | 	wrlong	result1, objptr
232c8     44 00 00 FF 
232cc     88 E5 85 F1 | 	sub	objptr, ##35208
232d0     F2 FA 01 F6 | 	mov	result1, objptr
232d4     00 D0 04 FF 
232d8     00 FA 45 F5 | 	or	result1, ##161480704
232dc     44 00 00 FF 
232e0     90 E5 05 F1 | 	add	objptr, ##35216
232e4     F2 FA 61 FC | 	wrlong	result1, objptr
232e8     44 00 00 FF 
232ec     90 E5 85 F1 | 	sub	objptr, ##35216
232f0     F2 FA 01 F6 | 	mov	result1, objptr
232f4     00 D8 04 FF 
232f8     00 FA 45 F5 | 	or	result1, ##162529280
232fc     44 00 00 FF 
23300     94 E5 05 F1 | 	add	objptr, ##35220
23304     F2 FA 61 FC | 	wrlong	result1, objptr
23308     44 00 00 FF 
2330c     94 E5 85 F1 | 	sub	objptr, ##35220
23310     F2 FA 01 F6 | 	mov	result1, objptr
23314     00 E0 04 FF 
23318     00 FA 45 F5 | 	or	result1, ##163577856
2331c     44 00 00 FF 
23320     98 E5 05 F1 | 	add	objptr, ##35224
23324     F2 FA 61 FC | 	wrlong	result1, objptr
23328     44 00 00 FF 
2332c     98 E5 85 F1 | 	sub	objptr, ##35224
23330     F2 FA 01 F6 | 	mov	result1, objptr
23334     00 E8 04 FF 
23338     00 FA 45 F5 | 	or	result1, ##164626432
2333c     44 00 00 FF 
23340     B8 E5 05 F1 | 	add	objptr, ##35256
23344     F2 FA 61 FC | 	wrlong	result1, objptr
23348     44 00 00 FF 
2334c     B8 E5 85 F1 | 	sub	objptr, ##35256
23350     F2 FA 01 F6 | 	mov	result1, objptr
23354     00 F0 04 FF 
23358     00 FA 45 F5 | 	or	result1, ##165675008
2335c     44 00 00 FF 
23360     B4 E5 05 F1 | 	add	objptr, ##35252
23364     F2 FA 61 FC | 	wrlong	result1, objptr
23368     44 00 00 FF 
2336c     B4 E5 85 F1 | 	sub	objptr, ##35252
23370     F2 FA 01 F6 | 	mov	result1, objptr
23374     00 F8 04 FF 
23378     00 FA 45 F5 | 	or	result1, ##166723584
2337c     44 00 00 FF 
23380     70 E5 05 F1 | 	add	objptr, ##35184
23384     F2 FA 61 FC | 	wrlong	result1, objptr
23388     44 00 00 FF 
2338c     70 E5 85 F1 | 	sub	objptr, ##35184
23390     F2 FA 01 F6 | 	mov	result1, objptr
23394     00 00 05 FF 
23398     00 FA 45 F5 | 	or	result1, ##167772160
2339c     44 00 00 FF 
233a0     60 E5 05 F1 | 	add	objptr, ##35168
233a4     F2 FA 61 FC | 	wrlong	result1, objptr
233a8     44 00 00 FF 
233ac     60 E5 85 F1 | 	sub	objptr, ##35168
233b0     F2 FA 01 F6 | 	mov	result1, objptr
233b4     00 08 05 FF 
233b8     00 FA 45 F5 | 	or	result1, ##168820736
233bc     44 00 00 FF 
233c0     9C E5 05 F1 | 	add	objptr, ##35228
233c4     F2 FA 61 FC | 	wrlong	result1, objptr
233c8     44 00 00 FF 
233cc     9C E5 85 F1 | 	sub	objptr, ##35228
233d0     F2 FA 01 F6 | 	mov	result1, objptr
233d4     00 10 05 FF 
233d8     00 FA 45 F5 | 	or	result1, ##169869312
233dc     44 00 00 FF 
233e0     A0 E5 05 F1 | 	add	objptr, ##35232
233e4     F2 FA 61 FC | 	wrlong	result1, objptr
233e8     44 00 00 FF 
233ec     A0 E5 85 F1 | 	sub	objptr, ##35232
233f0     F2 FA 01 F6 | 	mov	result1, objptr
233f4     00 18 05 FF 
233f8     00 FA 45 F5 | 	or	result1, ##170917888
233fc     44 00 00 FF 
23400     A4 E5 05 F1 | 	add	objptr, ##35236
23404     F2 FA 61 FC | 	wrlong	result1, objptr
23408     44 00 00 FF 
2340c     A4 E5 85 F1 | 	sub	objptr, ##35236
23410     F2 FA 01 F6 | 	mov	result1, objptr
23414     00 20 05 FF 
23418     00 FA 45 F5 | 	or	result1, ##171966464
2341c     44 00 00 FF 
23420     A8 E5 05 F1 | 	add	objptr, ##35240
23424     F2 FA 61 FC | 	wrlong	result1, objptr
23428     44 00 00 FF 
2342c     A8 E5 85 F1 | 	sub	objptr, ##35240
23430     F2 FA 01 F6 | 	mov	result1, objptr
23434     00 28 05 FF 
23438     00 FA 45 F5 | 	or	result1, ##173015040
2343c     44 00 00 FF 
23440     AC E5 05 F1 | 	add	objptr, ##35244
23444     F2 FA 61 FC | 	wrlong	result1, objptr
23448     44 00 00 FF 
2344c     AC E5 85 F1 | 	sub	objptr, ##35244
23450     F2 FA 01 F6 | 	mov	result1, objptr
23454     00 30 05 FF 
23458     00 FA 45 F5 | 	or	result1, ##174063616
2345c     44 00 00 FF 
23460     C4 E5 05 F1 | 	add	objptr, ##35268
23464     F2 FA 61 FC | 	wrlong	result1, objptr
23468     44 00 00 FF 
2346c     C4 E5 85 F1 | 	sub	objptr, ##35268
23470     F2 FA 01 F6 | 	mov	result1, objptr
23474     00 38 05 FF 
23478     00 FA 45 F5 | 	or	result1, ##175112192
2347c     44 00 00 FF 
23480     B0 E5 05 F1 | 	add	objptr, ##35248
23484     F2 FA 61 FC | 	wrlong	result1, objptr
23488     44 00 00 FF 
2348c     B0 E5 85 F1 | 	sub	objptr, ##35248
23490     F2 FA 01 F6 | 	mov	result1, objptr
23494     00 40 05 FF 
23498     00 FA 45 F5 | 	or	result1, ##176160768
2349c     44 00 00 FF 
234a0     BC E5 05 F1 | 	add	objptr, ##35260
234a4     F2 FA 61 FC | 	wrlong	result1, objptr
234a8     44 00 00 FF 
234ac     BC E5 85 F1 | 	sub	objptr, ##35260
234b0     F2 FA 01 F6 | 	mov	result1, objptr
234b4     00 48 05 FF 
234b8     00 FA 45 F5 | 	or	result1, ##177209344
234bc     44 00 00 FF 
234c0     C0 E5 05 F1 | 	add	objptr, ##35264
234c4     F2 FA 61 FC | 	wrlong	result1, objptr
234c8     44 00 00 FF 
234cc     C0 E5 85 F1 | 	sub	objptr, ##35264
234d0                 | _init_commands_ret
234d0     2D 00 64 FD | 	ret
234d4                 | 
234d4                 | ' 
234d4                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
234d4                 | ' 
234d4                 | ' sub init_audio
234d4                 | _init_audio
234d4     06 4A 05 F6 | 	mov	COUNT_, #6
234d8     A8 00 A0 FD | 	call	#pushregs_
234dc     00 C0 1F FF 
234e0     00 26 06 F6 | 	mov	local01, ##1065353216
234e4                 | ' 
234e4                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
234e4     00 28 06 F6 | 	mov	local02, #0
234e8                 | LR__2700
234e8     14 2B 02 F6 | 	mov	local03, local02
234ec     01 2A 66 F0 | 	shl	local03, #1
234f0     58 7F 23 FF 
234f4     00 2C 06 F6 | 	mov	local04, ##1191096320
234f8     14 13 52 F6 | 	abs	arg01, local02 wc
234fc     1F 2E C6 C9 |  if_b	decod	local05, #31
23500     00 2E 06 36 |  if_ae	mov	local05, #0
23504     CC 70 B0 FD | 	call	#__system___float_fromuns
23508     17 FB 61 F5 | 	xor	result1, local05
2350c     FD 12 02 F6 | 	mov	arg01, result1
23510     87 24 20 FF 
23514     DB 15 06 F6 | 	mov	arg02, ##1078530011
23518     BC 74 B0 FD | 	call	#__system___float_mul
2351c     FD 12 02 F6 | 	mov	arg01, result1
23520     00 00 22 FF 
23524     00 14 06 F6 | 	mov	arg02, ##1140850688
23528     B0 76 B0 FD | 	call	#__system___float_div
2352c     FD 12 02 F6 | 	mov	arg01, result1
23530     08 7E B0 FD | 	call	#__system____builtin_sinf
23534     FD 14 02 F6 | 	mov	arg02, result1
23538     16 13 02 F6 | 	mov	arg01, local04
2353c     98 74 B0 FD | 	call	#__system___float_mul
23540     FD 12 02 F6 | 	mov	arg01, result1
23544     01 14 06 F6 | 	mov	arg02, #1
23548     54 79 B0 FD | 	call	#__system___float_tointeger
2354c     FD 14 02 F6 | 	mov	arg02, result1
23550     15 13 02 F6 | 	mov	arg01, local03
23554     8C 0D B0 FD | 	call	#_psdpoke
23558     01 28 06 F1 | 	add	local02, #1
2355c     02 00 00 FF 
23560     00 28 56 F2 | 	cmps	local02, ##1024 wc
23564     80 FF 9F CD |  if_b	jmp	#LR__2700
23568                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
23568     00 28 06 F6 | 	mov	local02, #0
2356c                 | LR__2701
2356c     14 15 02 F6 | 	mov	arg02, local02
23570     01 14 66 F0 | 	shl	arg02, #1
23574     0B 12 C6 F9 | 	decod	arg01, #11
23578     0A 13 02 F1 | 	add	arg01, arg02
2357c     14 2D 02 F6 | 	mov	local04, local02
23580     07 2C 66 F0 | 	shl	local04, #7
23584     14 2D 82 F1 | 	sub	local04, local02
23588     C0 FF 7F FF 
2358c     00 15 06 F6 | 	mov	arg02, ##-32512
23590     16 15 02 F1 | 	add	arg02, local04
23594     4C 0D B0 FD | 	call	#_psdpoke
23598     09 2C C6 F9 | 	decod	local04, #9
2359c     14 2D 02 F1 | 	add	local04, local02
235a0     01 2C 66 F0 | 	shl	local04, #1
235a4     0B 12 C6 F9 | 	decod	arg01, #11
235a8     16 13 02 F1 | 	add	arg01, local04
235ac     14 2F 02 F6 | 	mov	local05, local02
235b0     07 2E 66 F0 | 	shl	local05, #7
235b4     14 2F 82 F1 | 	sub	local05, local02
235b8     3F 00 00 FF 
235bc     00 15 06 F6 | 	mov	arg02, ##32512
235c0     17 15 82 F1 | 	sub	arg02, local05
235c4     1C 0D B0 FD | 	call	#_psdpoke
235c8     01 28 06 F1 | 	add	local02, #1
235cc     01 00 00 FF 
235d0     00 28 56 F2 | 	cmps	local02, ##512 wc
235d4     94 FF 9F CD |  if_b	jmp	#LR__2701
235d8                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
235d8     00 28 06 F6 | 	mov	local02, #0
235dc                 | LR__2702
235dc     14 2F 02 F6 | 	mov	local05, local02
235e0     01 2E 66 F0 | 	shl	local05, #1
235e4     0C 12 C6 F9 | 	decod	arg01, #12
235e8     17 13 02 F1 | 	add	arg01, local05
235ec     14 2F 02 F6 | 	mov	local05, local02
235f0     06 2E 66 F0 | 	shl	local05, #6
235f4     14 2F 82 F1 | 	sub	local05, local02
235f8     C1 FF 7F FF 
235fc     00 14 06 F6 | 	mov	arg02, ##-32256
23600     17 15 02 F1 | 	add	arg02, local05
23604     DC 0C B0 FD | 	call	#_psdpoke
23608     01 28 06 F1 | 	add	local02, #1
2360c     02 00 00 FF 
23610     00 28 56 F2 | 	cmps	local02, ##1024 wc
23614     C4 FF 9F CD |  if_b	jmp	#LR__2702
23618                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
23618     00 28 06 F6 | 	mov	local02, #0
2361c                 | LR__2703
2361c     14 2F 02 F6 | 	mov	local05, local02
23620     01 2E 66 F0 | 	shl	local05, #1
23624     0C 00 00 FF 
23628     00 12 06 F6 | 	mov	arg01, ##6144
2362c     17 13 02 F1 | 	add	arg01, local05
23630     C0 FF 7F FF 
23634     A8 14 06 F6 | 	mov	arg02, ##-32600
23638     A8 0C B0 FD | 	call	#_psdpoke
2363c     01 28 06 F1 | 	add	local02, #1
23640     80 28 56 F2 | 	cmps	local02, #128 wc
23644     D4 FF 9F CD |  if_b	jmp	#LR__2703
23648     80 28 06 F6 | 	mov	local02, #128
2364c                 | LR__2704
2364c     14 2F 02 F6 | 	mov	local05, local02
23650     01 2E 66 F0 | 	shl	local05, #1
23654     0C 00 00 FF 
23658     00 12 06 F6 | 	mov	arg01, ##6144
2365c     17 13 02 F1 | 	add	arg01, local05
23660     3F 00 00 FF 
23664     58 15 06 F6 | 	mov	arg02, ##32600
23668     78 0C B0 FD | 	call	#_psdpoke
2366c     01 28 06 F1 | 	add	local02, #1
23670     02 00 00 FF 
23674     00 28 16 F2 | 	cmp	local02, ##1024 wc
23678     D0 FF 9F CD |  if_b	jmp	#LR__2704
2367c                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
2367c     00 28 06 F6 | 	mov	local02, #0
23680                 | LR__2705
23680     14 2F 02 F6 | 	mov	local05, local02
23684     01 2E 66 F0 | 	shl	local05, #1
23688     0D 12 C6 F9 | 	decod	arg01, #13
2368c     17 13 02 F1 | 	add	arg01, local05
23690     C0 FF 7F FF 
23694     A8 14 06 F6 | 	mov	arg02, ##-32600
23698     48 0C B0 FD | 	call	#_psdpoke
2369c     01 28 06 F1 | 	add	local02, #1
236a0     01 00 00 FF 
236a4     00 28 56 F2 | 	cmps	local02, ##512 wc
236a8     D4 FF 9F CD |  if_b	jmp	#LR__2705
236ac     09 28 C6 F9 | 	decod	local02, #9
236b0                 | LR__2706
236b0     14 2F 02 F6 | 	mov	local05, local02
236b4     01 2E 66 F0 | 	shl	local05, #1
236b8     0D 12 C6 F9 | 	decod	arg01, #13
236bc     17 13 02 F1 | 	add	arg01, local05
236c0     3F 00 00 FF 
236c4     58 15 06 F6 | 	mov	arg02, ##32600
236c8     18 0C B0 FD | 	call	#_psdpoke
236cc     01 28 06 F1 | 	add	local02, #1
236d0     02 00 00 FF 
236d4     00 28 16 F2 | 	cmp	local02, ##1024 wc
236d8     D4 FF 9F CD |  if_b	jmp	#LR__2706
236dc                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
236dc     00 28 06 F6 | 	mov	local02, #0
236e0                 | LR__2707
236e0     14 2F 02 F6 | 	mov	local05, local02
236e4     01 2E 66 F0 | 	shl	local05, #1
236e8     14 00 00 FF 
236ec     00 12 06 F6 | 	mov	arg01, ##10240
236f0     17 13 02 F1 | 	add	arg01, local05
236f4     C0 FF 7F FF 
236f8     A8 14 06 F6 | 	mov	arg02, ##-32600
236fc     E4 0B B0 FD | 	call	#_psdpoke
23700     01 28 06 F1 | 	add	local02, #1
23704     00 29 56 F2 | 	cmps	local02, #256 wc
23708     D4 FF 9F CD |  if_b	jmp	#LR__2707
2370c     00 29 06 F6 | 	mov	local02, #256
23710                 | LR__2708
23710     14 2F 02 F6 | 	mov	local05, local02
23714     01 2E 66 F0 | 	shl	local05, #1
23718     14 00 00 FF 
2371c     00 12 06 F6 | 	mov	arg01, ##10240
23720     17 13 02 F1 | 	add	arg01, local05
23724     3F 00 00 FF 
23728     58 15 06 F6 | 	mov	arg02, ##32600
2372c     B4 0B B0 FD | 	call	#_psdpoke
23730     01 28 06 F1 | 	add	local02, #1
23734     02 00 00 FF 
23738     00 28 16 F2 | 	cmp	local02, ##1024 wc
2373c     D0 FF 9F CD |  if_b	jmp	#LR__2708
23740                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
23740     18 00 00 FF 
23744     00 28 06 F6 | 	mov	local02, ##12288
23748                 | LR__2709
23748     14 13 02 F6 | 	mov	arg01, local02
2374c     00 14 06 F6 | 	mov	arg02, #0
23750     48 0B B0 FD | 	call	#_pslpoke
23754     04 28 06 F1 | 	add	local02, #4
23758     77 00 00 FF 
2375c     FD 29 56 F2 | 	cmps	local02, ##61437 wc
23760     E4 FF 9F CD |  if_b	jmp	#LR__2709
23764                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
23764     00 28 06 F6 | 	mov	local02, #0
23768                 | LR__2710
23768     14 2F 02 F6 | 	mov	local05, local02
2376c     01 2E 66 F0 | 	shl	local05, #1
23770     78 00 00 FF 
23774     00 2A 06 F6 | 	mov	local03, ##61440
23778     17 2B 02 F1 | 	add	local03, local05
2377c     12 00 00 FF 
23780     BA EA 05 F1 | 	add	ptr__dat__, ##9402
23784     F5 12 02 F6 | 	mov	arg01, ptr__dat__
23788     12 00 00 FF 
2378c     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
23790     10 12 06 F1 | 	add	arg01, #16
23794     14 15 02 F6 | 	mov	arg02, local02
23798     01 14 66 F0 | 	shl	arg02, #1
2379c     0A 13 02 F1 | 	add	arg01, arg02
237a0     09 15 E2 FA | 	rdword	arg02, arg01
237a4     15 13 02 F6 | 	mov	arg01, local03
237a8     38 0B B0 FD | 	call	#_psdpoke
237ac     01 28 06 F1 | 	add	local02, #1
237b0     02 00 00 FF 
237b4     00 28 56 F2 | 	cmps	local02, ##1024 wc
237b8     AC FF 9F CD |  if_b	jmp	#LR__2710
237bc                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
237bc     00 28 06 F6 | 	mov	local02, #0
237c0                 | LR__2711
237c0     14 2F 02 F6 | 	mov	local05, local02
237c4     01 2E 66 F0 | 	shl	local05, #1
237c8     7C 00 00 FF 
237cc     00 2A 06 F6 | 	mov	local03, ##63488
237d0     17 2B 02 F1 | 	add	local03, local05
237d4     0E 00 00 FF 
237d8     AA EA 05 F1 | 	add	ptr__dat__, ##7338
237dc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
237e0     0E 00 00 FF 
237e4     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
237e8     10 12 06 F1 | 	add	arg01, #16
237ec     14 15 02 F6 | 	mov	arg02, local02
237f0     01 14 66 F0 | 	shl	arg02, #1
237f4     0A 13 02 F1 | 	add	arg01, arg02
237f8     09 15 E2 FA | 	rdword	arg02, arg01
237fc     15 13 02 F6 | 	mov	arg01, local03
23800     E0 0A B0 FD | 	call	#_psdpoke
23804     01 28 06 F1 | 	add	local02, #1
23808     02 00 00 FF 
2380c     00 28 56 F2 | 	cmps	local02, ##1024 wc
23810     AC FF 9F CD |  if_b	jmp	#LR__2711
23814                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
23814     00 28 06 F6 | 	mov	local02, #0
23818     0C 00 00 FF 
2381c     D8 E4 05 F1 | 	add	objptr, ##6360
23820     97 18 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
23824                 | LR__2712
23824     14 2F 02 F6 | 	mov	local05, local02
23828     01 2E 66 F0 | 	shl	local05, #1
2382c     F2 2E 02 F1 | 	add	local05, objptr
23830     14 2B 02 F6 | 	mov	local03, local02
23834     08 2A 66 F0 | 	shl	local03, #8
23838     7F 00 00 FF 
2383c     00 31 06 F6 | 	mov	local06, ##65280
23840     15 31 82 F1 | 	sub	local06, local03
23844     17 31 52 FC | 	wrword	local06, local05
23848     01 28 06 F1 | 	add	local02, #1
2384c     00 29 56 F2 | 	cmps	local02, #256 wc
23850     D0 FF 9F CD |  if_b	jmp	#LR__2712
23854                 | LR__2713
23854     0C 00 00 FF 
23858     D8 E4 85 F1 | 	sub	objptr, ##6360
2385c                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
2385c     00 28 06 F6 | 	mov	local02, #0
23860                 | LR__2714
23860     14 2F 02 F6 | 	mov	local05, local02
23864     01 2E 66 F0 | 	shl	local05, #1
23868     0D 00 00 FF 
2386c     D8 E4 05 F1 | 	add	objptr, ##6872
23870     F2 2E 02 F1 | 	add	local05, objptr
23874     80 BF 23 FF 
23878     00 12 06 F6 | 	mov	arg01, ##1199505408
2387c     13 15 02 F6 | 	mov	arg02, local01
23880     0D 00 00 FF 
23884     D8 E4 85 F1 | 	sub	objptr, ##6872
23888     4C 71 B0 FD | 	call	#__system___float_mul
2388c     FD 12 02 F6 | 	mov	arg01, result1
23890     01 14 06 F6 | 	mov	arg02, #1
23894     08 76 B0 FD | 	call	#__system___float_tointeger
23898     17 FB 51 FC | 	wrword	result1, local05
2389c     13 13 02 F6 | 	mov	arg01, local01
238a0     CC BC 1F FF 
238a4     9A 15 06 F6 | 	mov	arg02, ##1064933786
238a8     2C 71 B0 FD | 	call	#__system___float_mul
238ac     FD 26 02 F6 | 	mov	local01, result1
238b0     01 28 06 F1 | 	add	local02, #1
238b4     00 29 56 F2 | 	cmps	local02, #256 wc
238b8     A4 FF 9F CD |  if_b	jmp	#LR__2714
238bc     0E 00 00 FF 
238c0     D6 E4 05 F1 | 	add	objptr, ##7382
238c4     F2 00 58 FC | 	wrword	#0, objptr
238c8                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
238c8     00 28 06 F6 | 	mov	local02, #0
238cc     02 E4 05 F1 | 	add	objptr, #2
238d0     97 10 48 FB | 	callpa	#(@LR__2716-@LR__2715)>>2,fcache_load_ptr_
238d4                 | LR__2715
238d4     14 2F 02 F6 | 	mov	local05, local02
238d8     01 2E 66 F0 | 	shl	local05, #1
238dc     F2 2E 02 F1 | 	add	local05, objptr
238e0     7F 00 80 FF 
238e4     17 01 5A FC | 	wrword	##65280, local05
238e8     01 28 06 F1 | 	add	local02, #1
238ec     FF 28 56 F2 | 	cmps	local02, #255 wc
238f0     E0 FF 9F CD |  if_b	jmp	#LR__2715
238f4                 | LR__2716
238f4     FE E5 05 F1 | 	add	objptr, #510
238f8     F2 00 58 FC | 	wrword	#0, objptr
238fc                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
238fc     00 28 06 F6 | 	mov	local02, #0
23900     02 E4 05 F1 | 	add	objptr, #2
23904     97 12 48 FB | 	callpa	#(@LR__2718-@LR__2717)>>2,fcache_load_ptr_
23908                 | LR__2717
23908     14 2F 02 F6 | 	mov	local05, local02
2390c     01 2E 66 F0 | 	shl	local05, #1
23910     F2 2E 02 F1 | 	add	local05, objptr
23914     14 31 02 F6 | 	mov	local06, local02
23918     0C 30 66 F0 | 	shl	local06, #12
2391c     17 31 52 FC | 	wrword	local06, local05
23920     01 28 06 F1 | 	add	local02, #1
23924     10 28 56 F2 | 	cmps	local02, #16 wc
23928     DC FF 9F CD |  if_b	jmp	#LR__2717
2392c                 | LR__2718
2392c                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
2392c     10 28 06 F6 | 	mov	local02, #16
23930     97 10 48 FB | 	callpa	#(@LR__2720-@LR__2719)>>2,fcache_load_ptr_
23934                 | LR__2719
23934     14 2F 02 F6 | 	mov	local05, local02
23938     01 2E 66 F0 | 	shl	local05, #1
2393c     F2 2E 02 F1 | 	add	local05, objptr
23940     7F 00 80 FF 
23944     17 01 5A FC | 	wrword	##65280, local05
23948     01 28 06 F1 | 	add	local02, #1
2394c     F0 28 16 F2 | 	cmp	local02, #240 wc
23950     E0 FF 9F CD |  if_b	jmp	#LR__2719
23954                 | LR__2720
23954                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
23954     F0 28 06 F6 | 	mov	local02, #240
23958     97 14 48 FB | 	callpa	#(@LR__2722-@LR__2721)>>2,fcache_load_ptr_
2395c                 | LR__2721
2395c     14 2F 02 F6 | 	mov	local05, local02
23960     01 2E 66 F0 | 	shl	local05, #1
23964     F2 2E 02 F1 | 	add	local05, objptr
23968     FF 2A 06 F6 | 	mov	local03, #255
2396c     14 2B 82 F1 | 	sub	local03, local02
23970     0C 2A 66 F0 | 	shl	local03, #12
23974     17 2B 52 FC | 	wrword	local03, local05
23978     01 28 06 F1 | 	add	local02, #1
2397c     00 29 16 F2 | 	cmp	local02, #256 wc
23980     D8 FF 9F CD |  if_b	jmp	#LR__2721
23984                 | LR__2722
23984                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
23984     00 28 06 F6 | 	mov	local02, #0
23988     01 00 00 FF 
2398c     00 E4 05 F1 | 	add	objptr, ##512
23990     97 12 48 FB | 	callpa	#(@LR__2724-@LR__2723)>>2,fcache_load_ptr_
23994                 | LR__2723
23994     14 2F 02 F6 | 	mov	local05, local02
23998     01 2E 66 F0 | 	shl	local05, #1
2399c     F2 2E 02 F1 | 	add	local05, objptr
239a0     14 31 02 F6 | 	mov	local06, local02
239a4     08 30 66 F0 | 	shl	local06, #8
239a8     17 31 52 FC | 	wrword	local06, local05
239ac     01 28 06 F1 | 	add	local02, #1
239b0     00 29 56 F2 | 	cmps	local02, #256 wc
239b4     DC FF 9F CD |  if_b	jmp	#LR__2723
239b8                 | LR__2724
239b8     FE E5 05 F1 | 	add	objptr, #510
239bc     F2 00 58 FC | 	wrword	#0, objptr
239c0                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
239c0     00 28 06 F6 | 	mov	local02, #0
239c4     02 E4 05 F1 | 	add	objptr, #2
239c8     97 16 48 FB | 	callpa	#(@LR__2726-@LR__2725)>>2,fcache_load_ptr_
239cc                 | LR__2725
239cc     14 2F 02 F6 | 	mov	local05, local02
239d0     01 2E 66 F0 | 	shl	local05, #1
239d4     F2 2E 02 F1 | 	add	local05, objptr
239d8     14 31 02 F6 | 	mov	local06, local02
239dc     04 30 66 F0 | 	shl	local06, #4
239e0     14 31 02 F1 | 	add	local06, local02
239e4     04 30 66 F0 | 	shl	local06, #4
239e8     17 31 52 FC | 	wrword	local06, local05
239ec     01 28 06 F1 | 	add	local02, #1
239f0     F0 28 56 F2 | 	cmps	local02, #240 wc
239f4     D4 FF 9F CD |  if_b	jmp	#LR__2725
239f8                 | LR__2726
239f8     F0 28 06 F6 | 	mov	local02, #240
239fc     97 14 48 FB | 	callpa	#(@LR__2728-@LR__2727)>>2,fcache_load_ptr_
23a00                 | LR__2727
23a00     14 2F 02 F6 | 	mov	local05, local02
23a04     01 2E 66 F0 | 	shl	local05, #1
23a08     F2 2E 02 F1 | 	add	local05, objptr
23a0c     FF 2A 06 F6 | 	mov	local03, #255
23a10     14 2B 82 F1 | 	sub	local03, local02
23a14     0C 2A 66 F0 | 	shl	local03, #12
23a18     17 2B 52 FC | 	wrword	local03, local05
23a1c     01 28 06 F1 | 	add	local02, #1
23a20     00 29 16 F2 | 	cmp	local02, #256 wc
23a24     D8 FF 9F CD |  if_b	jmp	#LR__2727
23a28                 | LR__2728
23a28                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
23a28     00 28 06 F6 | 	mov	local02, #0
23a2c     01 00 00 FF 
23a30     00 E4 05 F1 | 	add	objptr, ##512
23a34     97 20 48 FB | 	callpa	#(@LR__2730-@LR__2729)>>2,fcache_load_ptr_
23a38                 | LR__2729
23a38     14 2F 02 F6 | 	mov	local05, local02
23a3c     01 2E 66 F0 | 	shl	local05, #1
23a40     F2 2E 02 F1 | 	add	local05, objptr
23a44     14 31 02 F6 | 	mov	local06, local02
23a48     09 30 66 F0 | 	shl	local06, #9
23a4c     17 31 52 FC | 	wrword	local06, local05
23a50     FF 2E 06 F6 | 	mov	local05, #255
23a54     14 2F 82 F1 | 	sub	local05, local02
23a58     01 2E 66 F0 | 	shl	local05, #1
23a5c     F2 2E 02 F1 | 	add	local05, objptr
23a60     14 31 02 F6 | 	mov	local06, local02
23a64     09 30 66 F0 | 	shl	local06, #9
23a68     17 31 52 FC | 	wrword	local06, local05
23a6c     01 28 06 F1 | 	add	local02, #1
23a70     80 28 56 F2 | 	cmps	local02, #128 wc
23a74     C0 FF 9F CD |  if_b	jmp	#LR__2729
23a78                 | LR__2730
23a78                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
23a78     00 28 06 F6 | 	mov	local02, #0
23a7c     01 00 00 FF 
23a80     00 E4 05 F1 | 	add	objptr, ##512
23a84     97 12 48 FB | 	callpa	#(@LR__2732-@LR__2731)>>2,fcache_load_ptr_
23a88                 | LR__2731
23a88     14 2F 02 F6 | 	mov	local05, local02
23a8c     01 2E 66 F0 | 	shl	local05, #1
23a90     F2 2E 02 F1 | 	add	local05, objptr
23a94     14 31 02 F6 | 	mov	local06, local02
23a98     0D 30 66 F0 | 	shl	local06, #13
23a9c     17 31 52 FC | 	wrword	local06, local05
23aa0     01 28 06 F1 | 	add	local02, #1
23aa4     08 28 56 F2 | 	cmps	local02, #8 wc
23aa8     DC FF 9F CD |  if_b	jmp	#LR__2731
23aac                 | LR__2732
23aac                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
23aac     08 28 06 F6 | 	mov	local02, #8
23ab0     97 1A 48 FB | 	callpa	#(@LR__2734-@LR__2733)>>2,fcache_load_ptr_
23ab4                 | LR__2733
23ab4     14 2F 02 F6 | 	mov	local05, local02
23ab8     01 2E 66 F0 | 	shl	local05, #1
23abc     F2 2E 02 F1 | 	add	local05, objptr
23ac0     14 27 02 F6 | 	mov	local01, local02
23ac4     08 26 86 F1 | 	sub	local01, #8
23ac8     0B 26 66 F0 | 	shl	local01, #11
23acc     7F 00 00 FF 
23ad0     00 31 06 F6 | 	mov	local06, ##65280
23ad4     13 31 82 F1 | 	sub	local06, local01
23ad8     17 31 52 FC | 	wrword	local06, local05
23adc     01 28 06 F1 | 	add	local02, #1
23ae0     18 28 16 F2 | 	cmp	local02, #24 wc
23ae4     CC FF 9F CD |  if_b	jmp	#LR__2733
23ae8                 | LR__2734
23ae8                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
23ae8     18 28 06 F6 | 	mov	local02, #24
23aec     97 10 48 FB | 	callpa	#(@LR__2736-@LR__2735)>>2,fcache_load_ptr_
23af0                 | LR__2735
23af0     14 2F 02 F6 | 	mov	local05, local02
23af4     01 2E 66 F0 | 	shl	local05, #1
23af8     F2 2E 02 F1 | 	add	local05, objptr
23afc     40 00 80 FF 
23b00     17 01 58 FC | 	wrword	##32768, local05
23b04     01 28 06 F1 | 	add	local02, #1
23b08     81 28 16 F2 | 	cmp	local02, #129 wc
23b0c     E0 FF 9F CD |  if_b	jmp	#LR__2735
23b10                 | LR__2736
23b10                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
23b10     81 28 06 F6 | 	mov	local02, #129
23b14     97 14 48 FB | 	callpa	#(@LR__2738-@LR__2737)>>2,fcache_load_ptr_
23b18                 | LR__2737
23b18     14 2F 02 F6 | 	mov	local05, local02
23b1c     01 2E 66 F0 | 	shl	local05, #1
23b20     F2 2E 02 F1 | 	add	local05, objptr
23b24     FF 2A 06 F6 | 	mov	local03, #255
23b28     14 2B 82 F1 | 	sub	local03, local02
23b2c     08 2A 66 F0 | 	shl	local03, #8
23b30     17 2B 52 FC | 	wrword	local03, local05
23b34     01 28 06 F1 | 	add	local02, #1
23b38     00 29 16 F2 | 	cmp	local02, #256 wc
23b3c     D8 FF 9F CD |  if_b	jmp	#LR__2737
23b40                 | LR__2738
23b40     3F 00 00 FF 
23b44     22 E4 05 F1 | 	add	objptr, ##32290
23b48     F2 00 59 FC | 	wrword	#128, objptr
23b4c     52 00 00 FF 
23b50     FA E4 85 F1 | 	sub	objptr, ##42234
23b54                 | ' for i=0 to 7
23b54     00 28 06 F6 | 	mov	local02, #0
23b58     97 8E 48 FB | 	callpa	#(@LR__2740-@LR__2739)>>2,fcache_load_ptr_
23b5c                 | LR__2739
23b5c     14 2F 02 F6 | 	mov	local05, local02
23b60     01 2E 66 F0 | 	shl	local05, #1
23b64     14 2F 02 F1 | 	add	local05, local02
23b68     03 2E 66 F0 | 	shl	local05, #3
23b6c     14 00 00 FF 
23b70     38 E5 05 F1 | 	add	objptr, ##10552
23b74     F2 2E 02 F1 | 	add	local05, objptr
23b78     00 EE A1 FF 
23b7c     17 01 68 FC | 	wrlong	##1138491392, local05
23b80     14 2F 02 F6 | 	mov	local05, local02
23b84     01 2E 66 F0 | 	shl	local05, #1
23b88     14 2F 02 F1 | 	add	local05, local02
23b8c     03 2E 66 F0 | 	shl	local05, #3
23b90     F2 2E 02 F1 | 	add	local05, objptr
23b94     04 2E 06 F1 | 	add	local05, #4
23b98     17 29 42 FC | 	wrbyte	local02, local05
23b9c     14 2F 02 F6 | 	mov	local05, local02
23ba0     01 2E 66 F0 | 	shl	local05, #1
23ba4     14 2F 02 F1 | 	add	local05, local02
23ba8     03 2E 66 F0 | 	shl	local05, #3
23bac     F2 2E 02 F1 | 	add	local05, objptr
23bb0     05 2E 06 F1 | 	add	local05, #5
23bb4     17 29 42 FC | 	wrbyte	local02, local05
23bb8     14 2F 02 F6 | 	mov	local05, local02
23bbc     01 2E 66 F0 | 	shl	local05, #1
23bc0     14 2F 02 F1 | 	add	local05, local02
23bc4     03 2E 66 F0 | 	shl	local05, #3
23bc8     F2 2E 02 F1 | 	add	local05, objptr
23bcc     06 2E 06 F1 | 	add	local05, #6
23bd0     17 01 58 FC | 	wrword	#0, local05
23bd4     14 2F 02 F6 | 	mov	local05, local02
23bd8     01 2E 66 F0 | 	shl	local05, #1
23bdc     14 2F 02 F1 | 	add	local05, local02
23be0     03 2E 66 F0 | 	shl	local05, #3
23be4     F2 2E 02 F1 | 	add	local05, objptr
23be8     08 2E 06 F1 | 	add	local05, #8
23bec     00 C0 9F FF 
23bf0     17 01 68 FC | 	wrlong	##1065353216, local05
23bf4     14 2F 02 F6 | 	mov	local05, local02
23bf8     01 2E 66 F0 | 	shl	local05, #1
23bfc     14 2F 02 F1 | 	add	local05, local02
23c00     03 2E 66 F0 | 	shl	local05, #3
23c04     F2 2E 02 F1 | 	add	local05, objptr
23c08     0C 2E 06 F1 | 	add	local05, #12
23c0c     00 40 A0 FF 
23c10     17 01 68 FC | 	wrlong	##1082130432, local05
23c14     14 2F 02 F6 | 	mov	local05, local02
23c18     01 2E 66 F0 | 	shl	local05, #1
23c1c     14 2F 02 F1 | 	add	local05, local02
23c20     03 2E 66 F0 | 	shl	local05, #3
23c24     F2 2E 02 F1 | 	add	local05, objptr
23c28     10 2E 06 F1 | 	add	local05, #16
23c2c     17 01 68 FC | 	wrlong	#0, local05
23c30     14 2F 02 F6 | 	mov	local05, local02
23c34     01 2E 66 F0 | 	shl	local05, #1
23c38     14 2F 02 F1 | 	add	local05, local02
23c3c     03 2E 66 F0 | 	shl	local05, #3
23c40     F2 2E 02 F1 | 	add	local05, objptr
23c44     14 2E 06 F1 | 	add	local05, #20
23c48     17 FF 59 FC | 	wrword	#255, local05
23c4c     14 2F 02 F6 | 	mov	local05, local02
23c50     01 2E 66 F0 | 	shl	local05, #1
23c54     3D 00 00 FF 
23c58     B4 E5 05 F1 | 	add	objptr, ##31668
23c5c     F2 2E 02 F1 | 	add	local05, objptr
23c60     17 FF 59 FC | 	wrword	#255, local05
23c64     01 28 06 F1 | 	add	local02, #1
23c68     08 28 56 F2 | 	cmps	local02, #8 wc
23c6c     52 00 00 FF 
23c70     EC E4 85 F1 | 	sub	objptr, ##42220
23c74     E4 FE 9F CD |  if_b	jmp	#LR__2739
23c78                 | LR__2740
23c78     00 6E 20 FF 
23c7c     00 30 06 F6 | 	mov	local06, ##1088159744
23c80                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
23c80     03 2E 06 F6 | 	mov	local05, #3
23c84                 | LR__2741
23c84     18 13 02 F6 | 	mov	arg01, local06
23c88     CE C3 1F FF 
23c8c     7D 14 06 F6 | 	mov	arg02, ##1065852029
23c90     44 6D B0 FD | 	call	#__system___float_mul
23c94     FD 30 02 F6 | 	mov	local06, result1
23c98     FA 2F 6E FB | 	djnz	local05, #LR__2741
23c9c     00 28 06 F6 | 	mov	local02, #0
23ca0                 | LR__2742
23ca0     14 2D 02 F6 | 	mov	local04, local02
23ca4     02 2C 66 F0 | 	shl	local04, #2
23ca8     14 00 00 FF 
23cac     D8 E4 05 F1 | 	add	objptr, ##10456
23cb0     F2 2C 02 F1 | 	add	local04, objptr
23cb4     16 31 62 FC | 	wrlong	local06, local04
23cb8     18 13 02 F6 | 	mov	arg01, local06
23cbc     CE C3 1F FF 
23cc0     7D 14 06 F6 | 	mov	arg02, ##1065852029
23cc4     14 00 00 FF 
23cc8     D8 E4 85 F1 | 	sub	objptr, ##10456
23ccc     08 6D B0 FD | 	call	#__system___float_mul
23cd0     FD 30 02 F6 | 	mov	local06, result1
23cd4     01 28 06 F1 | 	add	local02, #1
23cd8     0C 28 56 F2 | 	cmps	local02, #12 wc
23cdc     C0 FF 9F CD |  if_b	jmp	#LR__2742
23ce0     14 00 00 FF 
23ce4     08 E5 05 F1 | 	add	objptr, ##10504
23ce8     F2 50 6B FC | 	wrlong	#424, objptr
23cec     04 E4 05 F1 | 	add	objptr, #4
23cf0     F2 20 6B FC | 	wrlong	#400, objptr
23cf4     04 E4 05 F1 | 	add	objptr, #4
23cf8     F2 F2 6A FC | 	wrlong	#377, objptr
23cfc     04 E4 05 F1 | 	add	objptr, #4
23d00     F2 C8 6A FC | 	wrlong	#356, objptr
23d04     04 E4 05 F1 | 	add	objptr, #4
23d08     F2 A0 6A FC | 	wrlong	#336, objptr
23d0c     04 E4 05 F1 | 	add	objptr, #4
23d10     F2 7A 6A FC | 	wrlong	#317, objptr
23d14     04 E4 05 F1 | 	add	objptr, #4
23d18     F2 58 6A FC | 	wrlong	#300, objptr
23d1c     04 E4 05 F1 | 	add	objptr, #4
23d20     F2 36 6A FC | 	wrlong	#283, objptr
23d24     04 E4 05 F1 | 	add	objptr, #4
23d28     F2 16 6A FC | 	wrlong	#267, objptr
23d2c     04 E4 05 F1 | 	add	objptr, #4
23d30     F2 F8 69 FC | 	wrlong	#252, objptr
23d34     04 E4 05 F1 | 	add	objptr, #4
23d38     F2 DC 69 FC | 	wrlong	#238, objptr
23d3c     04 E4 05 F1 | 	add	objptr, #4
23d40     F2 C0 69 FC | 	wrlong	#224, objptr
23d44     3D 00 00 FF 
23d48     C6 E5 05 F1 | 	add	objptr, ##31686
23d4c     F2 00 59 FC | 	wrword	#128, objptr
23d50     02 E4 85 F1 | 	sub	objptr, #2
23d54     F2 00 59 FC | 	wrword	#128, objptr
23d58     52 00 00 FF 
23d5c     F8 E4 85 F1 | 	sub	objptr, ##42232
23d60     A7 F0 03 F6 | 	mov	ptra, fp
23d64     B2 00 A0 FD | 	call	#popregs_
23d68                 | _init_audio_ret
23d68     2D 00 64 FD | 	ret
23d6c                 | 
23d6c                 | ' 
23d6c                 | ' '------------------- Error messages
23d6c                 | ' 
23d6c                 | ' sub init_error_strings
23d6c                 | _init_error_strings
23d6c     C1 01 00 FF 
23d70     1C 01 06 F6 | 	mov	_var01, ##@LR__6146
23d74     45 00 00 FF 
23d78     7C E4 05 F1 | 	add	objptr, ##35452
23d7c     F2 00 62 FC | 	wrlong	_var01, objptr
23d80     C1 01 00 FF 
23d84     1D 01 06 F6 | 	mov	_var01, ##@LR__6147
23d88     04 E4 05 F1 | 	add	objptr, #4
23d8c     F2 00 62 FC | 	wrlong	_var01, objptr
23d90     C1 01 00 FF 
23d94     41 01 06 F6 | 	mov	_var01, ##@LR__6148
23d98     04 E4 05 F1 | 	add	objptr, #4
23d9c     F2 00 62 FC | 	wrlong	_var01, objptr
23da0     C1 01 00 FF 
23da4     61 01 06 F6 | 	mov	_var01, ##@LR__6149
23da8     04 E4 05 F1 | 	add	objptr, #4
23dac     F2 00 62 FC | 	wrlong	_var01, objptr
23db0     C1 01 00 FF 
23db4     7A 01 06 F6 | 	mov	_var01, ##@LR__6150
23db8     04 E4 05 F1 | 	add	objptr, #4
23dbc     F2 00 62 FC | 	wrlong	_var01, objptr
23dc0     C1 01 00 FF 
23dc4     95 01 06 F6 | 	mov	_var01, ##@LR__6151
23dc8     04 E4 05 F1 | 	add	objptr, #4
23dcc     F2 00 62 FC | 	wrlong	_var01, objptr
23dd0     C1 01 00 FF 
23dd4     B6 01 06 F6 | 	mov	_var01, ##@LR__6152
23dd8     04 E4 05 F1 | 	add	objptr, #4
23ddc     F2 00 62 FC | 	wrlong	_var01, objptr
23de0     C1 01 00 FF 
23de4     E3 01 06 F6 | 	mov	_var01, ##@LR__6153
23de8     04 E4 05 F1 | 	add	objptr, #4
23dec     F2 00 62 FC | 	wrlong	_var01, objptr
23df0     C2 01 00 FF 
23df4     0D 00 06 F6 | 	mov	_var01, ##@LR__6154
23df8     04 E4 05 F1 | 	add	objptr, #4
23dfc     F2 00 62 FC | 	wrlong	_var01, objptr
23e00     C2 01 00 FF 
23e04     25 00 06 F6 | 	mov	_var01, ##@LR__6155
23e08     04 E4 05 F1 | 	add	objptr, #4
23e0c     F2 00 62 FC | 	wrlong	_var01, objptr
23e10     C2 01 00 FF 
23e14     45 00 06 F6 | 	mov	_var01, ##@LR__6156
23e18     04 E4 05 F1 | 	add	objptr, #4
23e1c     F2 00 62 FC | 	wrlong	_var01, objptr
23e20     C2 01 00 FF 
23e24     5B 00 06 F6 | 	mov	_var01, ##@LR__6157
23e28     04 E4 05 F1 | 	add	objptr, #4
23e2c     F2 00 62 FC | 	wrlong	_var01, objptr
23e30     C2 01 00 FF 
23e34     78 00 06 F6 | 	mov	_var01, ##@LR__6158
23e38     04 E4 05 F1 | 	add	objptr, #4
23e3c     F2 00 62 FC | 	wrlong	_var01, objptr
23e40     C2 01 00 FF 
23e44     9B 00 06 F6 | 	mov	_var01, ##@LR__6159
23e48     04 E4 05 F1 | 	add	objptr, #4
23e4c     F2 00 62 FC | 	wrlong	_var01, objptr
23e50     C2 01 00 FF 
23e54     C1 00 06 F6 | 	mov	_var01, ##@LR__6160
23e58     04 E4 05 F1 | 	add	objptr, #4
23e5c     F2 00 62 FC | 	wrlong	_var01, objptr
23e60     C2 01 00 FF 
23e64     DC 00 06 F6 | 	mov	_var01, ##@LR__6161
23e68     04 E4 05 F1 | 	add	objptr, #4
23e6c     F2 00 62 FC | 	wrlong	_var01, objptr
23e70     C2 01 00 FF 
23e74     EC 00 06 F6 | 	mov	_var01, ##@LR__6162
23e78     04 E4 05 F1 | 	add	objptr, #4
23e7c     F2 00 62 FC | 	wrlong	_var01, objptr
23e80     C2 01 00 FF 
23e84     FB 00 06 F6 | 	mov	_var01, ##@LR__6163
23e88     04 E4 05 F1 | 	add	objptr, #4
23e8c     F2 00 62 FC | 	wrlong	_var01, objptr
23e90     C2 01 00 FF 
23e94     15 01 06 F6 | 	mov	_var01, ##@LR__6164
23e98     04 E4 05 F1 | 	add	objptr, #4
23e9c     F2 00 62 FC | 	wrlong	_var01, objptr
23ea0     C2 01 00 FF 
23ea4     26 01 06 F6 | 	mov	_var01, ##@LR__6165
23ea8     04 E4 05 F1 | 	add	objptr, #4
23eac     F2 00 62 FC | 	wrlong	_var01, objptr
23eb0     C2 01 00 FF 
23eb4     3D 01 06 F6 | 	mov	_var01, ##@LR__6166
23eb8     04 E4 05 F1 | 	add	objptr, #4
23ebc     F2 00 62 FC | 	wrlong	_var01, objptr
23ec0     C2 01 00 FF 
23ec4     50 01 06 F6 | 	mov	_var01, ##@LR__6167
23ec8     04 E4 05 F1 | 	add	objptr, #4
23ecc     F2 00 62 FC | 	wrlong	_var01, objptr
23ed0     C2 01 00 FF 
23ed4     5F 01 06 F6 | 	mov	_var01, ##@LR__6168
23ed8     04 E4 05 F1 | 	add	objptr, #4
23edc     F2 00 62 FC | 	wrlong	_var01, objptr
23ee0     C2 01 00 FF 
23ee4     7B 01 06 F6 | 	mov	_var01, ##@LR__6169
23ee8     04 E4 05 F1 | 	add	objptr, #4
23eec     F2 00 62 FC | 	wrlong	_var01, objptr
23ef0     C2 01 00 FF 
23ef4     8B 01 06 F6 | 	mov	_var01, ##@LR__6170
23ef8     04 E4 05 F1 | 	add	objptr, #4
23efc     F2 00 62 FC | 	wrlong	_var01, objptr
23f00     C2 01 00 FF 
23f04     9B 01 06 F6 | 	mov	_var01, ##@LR__6171
23f08     04 E4 05 F1 | 	add	objptr, #4
23f0c     F2 00 62 FC | 	wrlong	_var01, objptr
23f10     C2 01 00 FF 
23f14     CE 01 06 F6 | 	mov	_var01, ##@LR__6172
23f18     04 E4 05 F1 | 	add	objptr, #4
23f1c     F2 00 62 FC | 	wrlong	_var01, objptr
23f20     C2 01 00 FF 
23f24     E9 01 06 F6 | 	mov	_var01, ##@LR__6173
23f28     04 E4 05 F1 | 	add	objptr, #4
23f2c     F2 00 62 FC | 	wrlong	_var01, objptr
23f30     C2 01 00 FF 
23f34     FE 01 06 F6 | 	mov	_var01, ##@LR__6174
23f38     04 E4 05 F1 | 	add	objptr, #4
23f3c     F2 00 62 FC | 	wrlong	_var01, objptr
23f40     C3 01 00 FF 
23f44     0A 00 06 F6 | 	mov	_var01, ##@LR__6175
23f48     04 E4 05 F1 | 	add	objptr, #4
23f4c     F2 00 62 FC | 	wrlong	_var01, objptr
23f50     C3 01 00 FF 
23f54     1B 00 06 F6 | 	mov	_var01, ##@LR__6176
23f58     04 E4 05 F1 | 	add	objptr, #4
23f5c     F2 00 62 FC | 	wrlong	_var01, objptr
23f60     C3 01 00 FF 
23f64     2B 00 06 F6 | 	mov	_var01, ##@LR__6177
23f68     04 E4 05 F1 | 	add	objptr, #4
23f6c     F2 00 62 FC | 	wrlong	_var01, objptr
23f70     C3 01 00 FF 
23f74     46 00 06 F6 | 	mov	_var01, ##@LR__6178
23f78     04 E4 05 F1 | 	add	objptr, #4
23f7c     F2 00 62 FC | 	wrlong	_var01, objptr
23f80     C3 01 00 FF 
23f84     56 00 06 F6 | 	mov	_var01, ##@LR__6179
23f88     04 E4 05 F1 | 	add	objptr, #4
23f8c     F2 00 62 FC | 	wrlong	_var01, objptr
23f90     C3 01 00 FF 
23f94     64 00 06 F6 | 	mov	_var01, ##@LR__6180
23f98     04 E4 05 F1 | 	add	objptr, #4
23f9c     F2 00 62 FC | 	wrlong	_var01, objptr
23fa0     C3 01 00 FF 
23fa4     7E 00 06 F6 | 	mov	_var01, ##@LR__6181
23fa8     04 E4 05 F1 | 	add	objptr, #4
23fac     F2 00 62 FC | 	wrlong	_var01, objptr
23fb0     C3 01 00 FF 
23fb4     B1 00 06 F6 | 	mov	_var01, ##@LR__6182
23fb8     04 E4 05 F1 | 	add	objptr, #4
23fbc     F2 00 62 FC | 	wrlong	_var01, objptr
23fc0     C3 01 00 FF 
23fc4     C9 00 06 F6 | 	mov	_var01, ##@LR__6183
23fc8     04 E4 05 F1 | 	add	objptr, #4
23fcc     F2 00 62 FC | 	wrlong	_var01, objptr
23fd0     C3 01 00 FF 
23fd4     E4 00 06 F6 | 	mov	_var01, ##@LR__6184
23fd8     04 E4 05 F1 | 	add	objptr, #4
23fdc     F2 00 62 FC | 	wrlong	_var01, objptr
23fe0     C3 01 00 FF 
23fe4     01 01 06 F6 | 	mov	_var01, ##@LR__6185
23fe8     04 E4 05 F1 | 	add	objptr, #4
23fec     F2 00 62 FC | 	wrlong	_var01, objptr
23ff0     C3 01 00 FF 
23ff4     1A 01 06 F6 | 	mov	_var01, ##@LR__6186
23ff8     04 E4 05 F1 | 	add	objptr, #4
23ffc     F2 00 62 FC | 	wrlong	_var01, objptr
24000     C3 01 00 FF 
24004     39 01 06 F6 | 	mov	_var01, ##@LR__6187
24008     04 E4 05 F1 | 	add	objptr, #4
2400c     F2 00 62 FC | 	wrlong	_var01, objptr
24010     C3 01 00 FF 
24014     47 01 06 F6 | 	mov	_var01, ##@LR__6188
24018     04 E4 05 F1 | 	add	objptr, #4
2401c     F2 00 62 FC | 	wrlong	_var01, objptr
24020     C3 01 00 FF 
24024     74 01 06 F6 | 	mov	_var01, ##@LR__6189
24028     04 E4 05 F1 | 	add	objptr, #4
2402c     F2 00 62 FC | 	wrlong	_var01, objptr
24030     C3 01 00 FF 
24034     81 01 06 F6 | 	mov	_var01, ##@LR__6190
24038     04 E4 05 F1 | 	add	objptr, #4
2403c     F2 00 62 FC | 	wrlong	_var01, objptr
24040     C3 01 00 FF 
24044     95 01 06 F6 | 	mov	_var01, ##@LR__6191
24048     04 E4 05 F1 | 	add	objptr, #4
2404c     F2 00 62 FC | 	wrlong	_var01, objptr
24050     C3 01 00 FF 
24054     B9 01 06 F6 | 	mov	_var01, ##@LR__6192
24058     04 E4 05 F1 | 	add	objptr, #4
2405c     F2 00 62 FC | 	wrlong	_var01, objptr
24060     C3 01 00 FF 
24064     D0 01 06 F6 | 	mov	_var01, ##@LR__6193
24068     04 E4 05 F1 | 	add	objptr, #4
2406c     F2 00 62 FC | 	wrlong	_var01, objptr
24070     C3 01 00 FF 
24074     E3 01 06 F6 | 	mov	_var01, ##@LR__6194
24078     04 E4 05 F1 | 	add	objptr, #4
2407c     F2 00 62 FC | 	wrlong	_var01, objptr
24080     C3 01 00 FF 
24084     FA 01 06 F6 | 	mov	_var01, ##@LR__6195
24088     04 E4 05 F1 | 	add	objptr, #4
2408c     F2 00 62 FC | 	wrlong	_var01, objptr
24090     C4 01 00 FF 
24094     13 00 06 F6 | 	mov	_var01, ##@LR__6196
24098     04 E4 05 F1 | 	add	objptr, #4
2409c     F2 00 62 FC | 	wrlong	_var01, objptr
240a0     C4 01 00 FF 
240a4     35 00 06 F6 | 	mov	_var01, ##@LR__6197
240a8     04 E4 05 F1 | 	add	objptr, #4
240ac     F2 00 62 FC | 	wrlong	_var01, objptr
240b0     C4 01 00 FF 
240b4     48 00 06 F6 | 	mov	_var01, ##@LR__6198
240b8     04 E4 05 F1 | 	add	objptr, #4
240bc     F2 00 62 FC | 	wrlong	_var01, objptr
240c0     C4 01 00 FF 
240c4     58 00 06 F6 | 	mov	_var01, ##@LR__6199
240c8     04 E4 05 F1 | 	add	objptr, #4
240cc     F2 00 62 FC | 	wrlong	_var01, objptr
240d0     C4 01 00 FF 
240d4     70 00 06 F6 | 	mov	_var01, ##@LR__6200
240d8     04 E4 05 F1 | 	add	objptr, #4
240dc     F2 00 62 FC | 	wrlong	_var01, objptr
240e0     C4 01 00 FF 
240e4     87 00 06 F6 | 	mov	_var01, ##@LR__6201
240e8     04 E4 05 F1 | 	add	objptr, #4
240ec     F2 00 62 FC | 	wrlong	_var01, objptr
240f0     45 00 00 FF 
240f4     58 E5 85 F1 | 	sub	objptr, ##35672
240f8                 | _init_error_strings_ret
240f8     2D 00 64 FD | 	ret
240fc                 | 
240fc                 | '         
240fc                 | ' sub printerror(err as integer, linenum=0 as integer)
240fc                 | _printerror
240fc     02 4A 05 F6 | 	mov	COUNT_, #2
24100     A8 00 A0 FD | 	call	#pushregs_
24104     09 27 02 F6 | 	mov	local01, arg01
24108     0A 29 02 F6 | 	mov	local02, arg02
2410c     C4 01 00 FF 
24110     94 12 06 F6 | 	mov	arg01, ##@LR__6202
24114     A8 21 B0 FD | 	call	#_hg010b_spin2_write
24118     13 13 02 F6 | 	mov	arg01, local01
2411c     E4 26 B0 FD | 	call	#_hg010b_spin2_inttostr
24120     FD 12 02 F6 | 	mov	arg01, result1
24124     98 21 B0 FD | 	call	#_hg010b_spin2_write
24128     C4 01 00 FF 
2412c     9B 12 06 F6 | 	mov	arg01, ##@LR__6203
24130     8C 21 B0 FD | 	call	#_hg010b_spin2_write
24134     02 26 66 F0 | 	shl	local01, #2
24138     45 00 00 FF 
2413c     7C E4 05 F1 | 	add	objptr, ##35452
24140     F2 26 02 F1 | 	add	local01, objptr
24144     13 13 02 FB | 	rdlong	arg01, local01
24148     45 00 00 FF 
2414c     7C E4 85 F1 | 	sub	objptr, ##35452
24150     6C 21 B0 FD | 	call	#_hg010b_spin2_write
24154                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
24154                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
24154     01 28 56 F2 | 	cmps	local02, #1 wc
24158     24 00 90 CD |  if_b	jmp	#LR__2750
2415c     C4 01 00 FF 
24160     9F 12 06 F6 | 	mov	arg01, ##@LR__6204
24164     58 21 B0 FD | 	call	#_hg010b_spin2_write
24168     14 13 02 F6 | 	mov	arg01, local02
2416c     94 26 B0 FD | 	call	#_hg010b_spin2_inttostr
24170     FD 12 02 F6 | 	mov	arg01, result1
24174                 | ' 
24174                 | ' write(text)
24174     48 21 B0 FD | 	call	#_hg010b_spin2_write
24178                 | ' crlf
24178     E4 25 B0 FD | 	call	#_hg010b_spin2_crlf
2417c     10 00 90 FD | 	jmp	#LR__2751
24180                 | LR__2750
24180     C4 01 00 FF 
24184     A9 12 06 F6 | 	mov	arg01, ##@LR__6205
24188                 | ' 
24188                 | ' write(text)
24188     34 21 B0 FD | 	call	#_hg010b_spin2_write
2418c                 | ' crlf
2418c     D0 25 B0 FD | 	call	#_hg010b_spin2_crlf
24190                 | LR__2751
24190     A7 F0 03 F6 | 	mov	ptra, fp
24194     B2 00 A0 FD | 	call	#popregs_
24198                 | _printerror_ret
24198     2D 00 64 FD | 	ret
2419c                 | 
2419c                 | ' 
2419c                 | ' '' ------------------------------- Hardware start/stop/initialization 
2419c                 | ' 
2419c                 | ' sub startpsram
2419c                 | _startpsram
2419c     00 12 06 F6 | 	mov	arg01, #0
241a0     0A 14 C6 F9 | 	decod	arg02, #10
241a4     0B 16 06 F6 | 	mov	arg03, #11
241a8     07 18 06 F6 | 	mov	arg04, #7
241ac     0B 00 00 FF 
241b0     CC E4 05 F1 | 	add	objptr, ##5836
241b4     D4 2A B0 FD | 	call	#_psram_spin2_startx
241b8     2B 00 00 FF 
241bc     3C E5 05 F1 | 	add	objptr, ##22332
241c0     F2 FA 61 FC | 	wrlong	result1, objptr
241c4                 | '     return $7FF00 + cog*12
241c4     0C E4 05 F1 | 	add	objptr, #12
241c8     FF 03 80 FF 
241cc     F2 00 6A FC | 	wrlong	##524032, objptr
241d0     37 00 00 FF 
241d4     14 E4 85 F1 | 	sub	objptr, ##28180
241d8                 | _startpsram_ret
241d8     2D 00 64 FD | 	ret
241dc                 | 
241dc                 | ' 
241dc                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
241dc                 | _startvideo
241dc     01 4A 05 F6 | 	mov	COUNT_, #1
241e0     A8 00 A0 FD | 	call	#pushregs_
241e4     37 00 00 FF 
241e8     14 E4 05 F1 | 	add	objptr, ##28180
241ec     F2 18 02 FB | 	rdlong	arg04, objptr
241f0     37 00 00 FF 
241f4     14 E4 85 F1 | 	sub	objptr, ##28180
241f8     0A 13 02 F6 | 	mov	arg01, arg02
241fc     0C 15 02 F6 | 	mov	arg02, arg04
24200     1C 08 B0 FD | 	call	#_hg010b_spin2_start
24204     37 00 00 FF 
24208     00 E4 05 F1 | 	add	objptr, ##28160
2420c     F2 FA 61 FC | 	wrlong	result1, objptr
24210                 | ' 
24210                 | ' videocog=v.start(pin,mbox)
24210                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
24210     00 26 06 F6 | 	mov	local01, #0
24214     2B 00 00 FF 
24218     34 E5 85 F1 | 	sub	objptr, ##22324
2421c                 | LR__2760
2421c     13 13 02 F6 | 	mov	arg01, local01
24220     00 28 00 FF 
24224     00 14 06 F6 | 	mov	arg02, ##5242880
24228     B8 2E B0 FD | 	call	#_psram_spin2_setQos
2422c     01 26 06 F1 | 	add	local01, #1
24230     08 26 56 F2 | 	cmps	local01, #8 wc
24234     E4 FF 9F CD |  if_b	jmp	#LR__2760
24238     2B 00 00 FF 
2423c     34 E5 05 F1 | 	add	objptr, ##22324
24240     F2 12 02 FB | 	rdlong	arg01, objptr
24244     7A 00 02 FF 
24248     00 14 06 F6 | 	mov	arg02, ##67171328
2424c     2B 00 00 FF 
24250     34 E5 85 F1 | 	sub	objptr, ##22324
24254     8C 2E B0 FD | 	call	#_psram_spin2_setQos
24258     0B 00 00 FF 
2425c     CC E4 85 F1 | 	sub	objptr, ##5836
24260                 | ' psram.setQoS(videocog, $0400f400) 
24260                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
24260     F2 14 02 F6 | 	mov	arg02, objptr
24264     00 50 05 FF 
24268     00 14 46 F5 | 	or	arg02, ##178257920
2426c     00 16 06 F6 | 	mov	arg03, #0
24270     00 18 06 F6 | 	mov	arg04, #0
24274     00 12 06 F6 | 	mov	arg01, #0
24278     88 43 B0 FD | 	call	#__system___basic_open
2427c                 | ' return videocog
2427c     37 00 00 FF 
24280     00 E4 05 F1 | 	add	objptr, ##28160
24284     F2 FA 01 FB | 	rdlong	result1, objptr
24288     37 00 00 FF 
2428c     00 E4 85 F1 | 	sub	objptr, ##28160
24290     A7 F0 03 F6 | 	mov	ptra, fp
24294     B2 00 A0 FD | 	call	#popregs_
24298                 | _startvideo_ret
24298     2D 00 64 FD | 	ret
2429c                 | 
2429c                 | ' 
2429c                 | ' 
2429c                 | ' 
2429c                 | ' '' ------------------------------- Convenient psram peek/poke
2429c                 | ' 
2429c                 | ' sub pslpoke(addr as ulong,value as ulong)
2429c                 | _pslpoke
2429c     00 4A 05 F6 | 	mov	COUNT_, #0
242a0     A8 00 A0 FD | 	call	#pushregs_
242a4     08 F0 07 F1 | 	add	ptra, #8
242a8     A7 12 62 FC | 	wrlong	arg01, fp
242ac     04 4E 05 F1 | 	add	fp, #4
242b0     A7 14 62 FC | 	wrlong	arg02, fp
242b4     A7 12 02 F6 | 	mov	arg01, fp
242b8     04 4E 85 F1 | 	sub	fp, #4
242bc     A7 14 02 FB | 	rdlong	arg02, fp
242c0     04 16 06 F6 | 	mov	arg03, #4
242c4     0B 00 00 FF 
242c8     CC E4 05 F1 | 	add	objptr, ##5836
242cc     84 2C B0 FD | 	call	#_psram_spin2_write
242d0     0B 00 00 FF 
242d4     CC E4 85 F1 | 	sub	objptr, ##5836
242d8     A7 F0 03 F6 | 	mov	ptra, fp
242dc     B2 00 A0 FD | 	call	#popregs_
242e0                 | _pslpoke_ret
242e0     2D 00 64 FD | 	ret
242e4                 | 
242e4                 | ' 
242e4                 | ' sub psdpoke(addr as ulong,value as ulong)
242e4                 | _psdpoke
242e4     00 4A 05 F6 | 	mov	COUNT_, #0
242e8     A8 00 A0 FD | 	call	#pushregs_
242ec     08 F0 07 F1 | 	add	ptra, #8
242f0     A7 12 62 FC | 	wrlong	arg01, fp
242f4     04 4E 05 F1 | 	add	fp, #4
242f8     A7 14 62 FC | 	wrlong	arg02, fp
242fc     A7 12 02 F6 | 	mov	arg01, fp
24300     04 4E 85 F1 | 	sub	fp, #4
24304     A7 14 02 FB | 	rdlong	arg02, fp
24308     02 16 06 F6 | 	mov	arg03, #2
2430c     0B 00 00 FF 
24310     CC E4 05 F1 | 	add	objptr, ##5836
24314     3C 2C B0 FD | 	call	#_psram_spin2_write
24318     0B 00 00 FF 
2431c     CC E4 85 F1 | 	sub	objptr, ##5836
24320     A7 F0 03 F6 | 	mov	ptra, fp
24324     B2 00 A0 FD | 	call	#popregs_
24328                 | _psdpoke_ret
24328     2D 00 64 FD | 	ret
2432c                 | 
2432c                 | ' 
2432c                 | ' sub pspoke(addr as ulong,value as ulong)
2432c                 | _pspoke
2432c     00 4A 05 F6 | 	mov	COUNT_, #0
24330     A8 00 A0 FD | 	call	#pushregs_
24334     08 F0 07 F1 | 	add	ptra, #8
24338     A7 12 62 FC | 	wrlong	arg01, fp
2433c     04 4E 05 F1 | 	add	fp, #4
24340     A7 14 62 FC | 	wrlong	arg02, fp
24344     A7 12 02 F6 | 	mov	arg01, fp
24348     04 4E 85 F1 | 	sub	fp, #4
2434c     A7 14 02 FB | 	rdlong	arg02, fp
24350     01 16 06 F6 | 	mov	arg03, #1
24354     0B 00 00 FF 
24358     CC E4 05 F1 | 	add	objptr, ##5836
2435c     F4 2B B0 FD | 	call	#_psram_spin2_write
24360     0B 00 00 FF 
24364     CC E4 85 F1 | 	sub	objptr, ##5836
24368     A7 F0 03 F6 | 	mov	ptra, fp
2436c     B2 00 A0 FD | 	call	#popregs_
24370                 | _pspoke_ret
24370     2D 00 64 FD | 	ret
24374                 | 
24374                 | ' 
24374                 | ' function pspeek(adr as ulong) as ubyte
24374                 | _pspeek
24374     00 4A 05 F6 | 	mov	COUNT_, #0
24378     A8 00 A0 FD | 	call	#pushregs_
2437c     0C F0 07 F1 | 	add	ptra, #12
24380     04 4E 05 F1 | 	add	fp, #4
24384     A7 12 62 FC | 	wrlong	arg01, fp
24388     04 4E 05 F1 | 	add	fp, #4
2438c     A7 12 02 F6 | 	mov	arg01, fp
24390     04 4E 85 F1 | 	sub	fp, #4
24394     A7 14 02 FB | 	rdlong	arg02, fp
24398     04 4E 85 F1 | 	sub	fp, #4
2439c     01 16 06 F6 | 	mov	arg03, #1
243a0     0B 00 00 FF 
243a4     CC E4 05 F1 | 	add	objptr, ##5836
243a8     0C 2B B0 FD | 	call	#_psram_spin2_read1
243ac     0B 00 00 FF 
243b0     CC E4 85 F1 | 	sub	objptr, ##5836
243b4                 | ' psram.read1(varptr(res),adr,1)
243b4                 | ' return res
243b4     08 4E 05 F1 | 	add	fp, #8
243b8     A7 FA C1 FA | 	rdbyte	result1, fp
243bc     08 4E 85 F1 | 	sub	fp, #8
243c0     A7 F0 03 F6 | 	mov	ptra, fp
243c4     B2 00 A0 FD | 	call	#popregs_
243c8                 | _pspeek_ret
243c8     2D 00 64 FD | 	ret
243cc                 | 
243cc                 | ' 
243cc                 | ' function pslpeek(adr as ulong) as ulong
243cc                 | _pslpeek
243cc     00 4A 05 F6 | 	mov	COUNT_, #0
243d0     A8 00 A0 FD | 	call	#pushregs_
243d4     0C F0 07 F1 | 	add	ptra, #12
243d8     04 4E 05 F1 | 	add	fp, #4
243dc     A7 12 62 FC | 	wrlong	arg01, fp
243e0     04 4E 05 F1 | 	add	fp, #4
243e4     A7 12 02 F6 | 	mov	arg01, fp
243e8     04 4E 85 F1 | 	sub	fp, #4
243ec     A7 14 02 FB | 	rdlong	arg02, fp
243f0     04 4E 85 F1 | 	sub	fp, #4
243f4     04 16 06 F6 | 	mov	arg03, #4
243f8     0B 00 00 FF 
243fc     CC E4 05 F1 | 	add	objptr, ##5836
24400     B4 2A B0 FD | 	call	#_psram_spin2_read1
24404     0B 00 00 FF 
24408     CC E4 85 F1 | 	sub	objptr, ##5836
2440c                 | ' psram.read1(varptr(res),adr,4)
2440c                 | ' return res
2440c     08 4E 05 F1 | 	add	fp, #8
24410     A7 FA 01 FB | 	rdlong	result1, fp
24414     08 4E 85 F1 | 	sub	fp, #8
24418     A7 F0 03 F6 | 	mov	ptra, fp
2441c     B2 00 A0 FD | 	call	#popregs_
24420                 | _pslpeek_ret
24420     2D 00 64 FD | 	ret
24424                 | 
24424                 | ' 
24424                 | ' function psdpeek(adr as ulong) as ulong
24424                 | _psdpeek
24424     00 4A 05 F6 | 	mov	COUNT_, #0
24428     A8 00 A0 FD | 	call	#pushregs_
2442c     0C F0 07 F1 | 	add	ptra, #12
24430     04 4E 05 F1 | 	add	fp, #4
24434     A7 12 62 FC | 	wrlong	arg01, fp
24438     04 4E 05 F1 | 	add	fp, #4
2443c     A7 12 02 F6 | 	mov	arg01, fp
24440     04 4E 85 F1 | 	sub	fp, #4
24444     A7 14 02 FB | 	rdlong	arg02, fp
24448     04 4E 85 F1 | 	sub	fp, #4
2444c     02 16 06 F6 | 	mov	arg03, #2
24450     0B 00 00 FF 
24454     CC E4 05 F1 | 	add	objptr, ##5836
24458     5C 2A B0 FD | 	call	#_psram_spin2_read1
2445c     0B 00 00 FF 
24460     CC E4 85 F1 | 	sub	objptr, ##5836
24464                 | ' psram.read1(varptr(res),adr,2)
24464                 | ' return res
24464     08 4E 05 F1 | 	add	fp, #8
24468     A7 FA E1 FA | 	rdword	result1, fp
2446c     08 4E 85 F1 | 	sub	fp, #8
24470     A7 F0 03 F6 | 	mov	ptra, fp
24474     B2 00 A0 FD | 	call	#popregs_
24478                 | _psdpeek_ret
24478     2D 00 64 FD | 	ret
2447c                 | 
2447c                 | ' 
2447c                 | ' '' ------------------------------- USB keyboard scan to char translator
2447c                 | ' 
2447c                 | ' function scantochar(key)
2447c                 | _scantochar
2447c                 | ' 
2447c                 | ' select case (key shr 8) and 255
2447c     09 01 02 F6 | 	mov	_var01, arg01
24480     08 00 C6 F0 | 	sar	_var01, #8
24484     FF 00 0E F5 | 	and	_var01, #255 wz
24488     24 00 90 AD |  if_e	jmp	#LR__2770
2448c     02 00 0E F2 | 	cmp	_var01, #2 wz
24490     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
24494     30 00 90 AD |  if_e	jmp	#LR__2771
24498     40 00 0E F2 | 	cmp	_var01, #64 wz
2449c     44 00 90 AD |  if_e	jmp	#LR__2772
244a0     42 00 0E F2 | 	cmp	_var01, #66 wz
244a4     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
244a8     70 00 90 5D |  if_ne	jmp	#LR__2774
244ac     50 00 90 FD | 	jmp	#LR__2773
244b0                 | LR__2770
244b0     09 FB 01 F6 | 	mov	result1, arg01
244b4     7F FA 05 F5 | 	and	result1, #127
244b8     02 FA 65 F0 | 	shl	result1, #2
244bc     F5 FA 01 F1 | 	add	result1, ptr__dat__
244c0     FD FA C1 FA | 	rdbyte	result1, result1
244c4     54 00 90 FD | 	jmp	#_scantochar_ret
244c8                 | LR__2771
244c8     09 FB 01 F6 | 	mov	result1, arg01
244cc     7F FA 05 F5 | 	and	result1, #127
244d0     02 FA 65 F0 | 	shl	result1, #2
244d4     01 FA 05 F1 | 	add	result1, #1
244d8     F5 FA 01 F1 | 	add	result1, ptr__dat__
244dc     FD FA C1 FA | 	rdbyte	result1, result1
244e0     38 00 90 FD | 	jmp	#_scantochar_ret
244e4                 | LR__2772
244e4     09 FB 01 F6 | 	mov	result1, arg01
244e8     7F FA 05 F5 | 	and	result1, #127
244ec     02 FA 65 F0 | 	shl	result1, #2
244f0     02 FA 05 F1 | 	add	result1, #2
244f4     F5 FA 01 F1 | 	add	result1, ptr__dat__
244f8     FD FA C1 FA | 	rdbyte	result1, result1
244fc     1C 00 90 FD | 	jmp	#_scantochar_ret
24500                 | LR__2773
24500     09 FB 01 F6 | 	mov	result1, arg01
24504     7F FA 05 F5 | 	and	result1, #127
24508     02 FA 65 F0 | 	shl	result1, #2
2450c     03 FA 05 F1 | 	add	result1, #3
24510     F5 FA 01 F1 | 	add	result1, ptr__dat__
24514     FD FA C1 FA | 	rdbyte	result1, result1
24518     00 00 90 FD | 	jmp	#_scantochar_ret
2451c                 | LR__2774
2451c                 | _scantochar_ret
2451c     2D 00 64 FD | 	ret
24520                 | 
24520                 | _program
24520     01 4A 05 F6 | 	mov	COUNT_, #1
24524     A8 00 A0 FD | 	call	#pushregs_
24528     70 FC BF FD | 	call	#_startpsram
2452c     40 12 06 F6 | 	mov	arg01, #64
24530     00 14 06 F6 | 	mov	arg02, #0
24534     00 16 06 F6 | 	mov	arg03, #0
24538     A0 FC BF FD | 	call	#_startvideo
2453c     37 00 00 FF 
24540     14 E4 05 F1 | 	add	objptr, ##28180
24544     F2 12 02 FB | 	rdlong	arg01, objptr
24548     00 14 06 F6 | 	mov	arg02, #0
2454c     F0 03 00 FF 
24550     00 16 06 F6 | 	mov	arg03, ##516096
24554     2B 00 00 FF 
24558     48 E5 85 F1 | 	sub	objptr, ##22344
2455c     28 2F B0 FD | 	call	#_audio096_spin2_start
24560     FE 16 02 F6 | 	mov	arg03, result2
24564     2B 00 00 FF 
24568     30 E5 05 F1 | 	add	objptr, ##22320
2456c     F2 FA 61 FC | 	wrlong	result1, objptr
24570     14 E4 05 F1 | 	add	objptr, #20
24574     F2 16 62 FC | 	wrlong	arg03, objptr
24578     37 00 00 FF 
2457c     10 E4 85 F1 | 	sub	objptr, ##28176
24580     32 12 06 F6 | 	mov	arg01, #50
24584     C8 38 B0 FD | 	call	#__system___waitms
24588     37 00 00 FF 
2458c     10 E4 05 F1 | 	add	objptr, ##28176
24590     F2 12 02 FB | 	rdlong	arg01, objptr
24594     37 00 00 FF 
24598     10 E4 85 F1 | 	sub	objptr, ##28176
2459c     14 12 06 F1 | 	add	arg01, #20
245a0     20 00 80 FF 
245a4     09 01 58 FC | 	wrword	##16384, arg01
245a8     40 2C B0 FD | 	call	#_usbnew_spin2_start
245ac     37 00 00 FF 
245b0     04 E4 05 F1 | 	add	objptr, ##28164
245b4     F2 FA 61 FC | 	wrlong	result1, objptr
245b8                 | '   mouse_limits[0] := xlim
245b8     0F 00 00 FF 
245bc     C8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7880
245c0     01 00 80 FF 
245c4     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
245c8                 | '   mouse_limits[1] := ylim
245c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
245cc     01 00 80 FF 
245d0     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
245d4     36 00 00 FF 
245d8     F3 E4 85 F1 | 	sub	objptr, ##27891
245dc     F2 12 02 F6 | 	mov	arg01, objptr
245e0     11 E5 85 F1 | 	sub	objptr, #273
245e4     C4 12 06 F1 | 	add	arg01, #196
245e8                 | '   mouse_outptr := ptr
245e8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
245ec     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
245f0     0F 00 00 FF 
245f4     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
245f8     16 00 00 FF 
245fc     CA EA 05 F1 | 	add	ptr__dat__, ##11466
24600     F5 14 02 F6 | 	mov	arg02, ptr__dat__
24604     16 00 00 FF 
24608     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
2460c     10 12 06 F6 | 	mov	arg01, #16
24610     C8 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
24614     10 12 06 F6 | 	mov	arg01, #16
24618     20 14 06 F6 | 	mov	arg02, #32
2461c     20 16 06 F6 | 	mov	arg03, #32
24620     48 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
24624     09 12 C6 F9 | 	decod	arg01, #9
24628     2C 15 06 F6 | 	mov	arg02, #300
2462c     14 2D B0 FD | 	call	#_usbnew_spin2_mouse_move
24630     F2 16 02 F6 | 	mov	arg03, objptr
24634     50 00 00 FF 
24638     44 E5 05 F1 | 	add	objptr, ##41284
2463c     F2 14 02 F6 | 	mov	arg02, objptr
24640     0A 17 62 FC | 	wrlong	arg03, arg02
24644     04 14 06 F1 | 	add	arg02, #4
24648     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
2464c     EF 14 02 F6 | 	mov	arg02, entryptr__
24650     1E FA 05 F6 | 	mov	result1, #30
24654     28 E4 61 FD | 	setq	objptr
24658     0A FB F1 FC | 	coginit	result1, arg02 wc
2465c     01 FA 65 C6 |  if_b	neg	result1, #1
24660     04 E4 85 F1 | 	sub	objptr, #4
24664     F2 FA 61 FC | 	wrlong	result1, objptr
24668     01 00 00 FF 
2466c     8C E5 05 F1 | 	add	objptr, ##908
24670     F2 00 68 FC | 	wrlong	#0, objptr
24674     1B 00 00 FF 
24678     98 E4 85 F1 | 	sub	objptr, ##13976
2467c     F2 04 68 FC | 	wrlong	#2, objptr
24680     04 E4 05 F1 | 	add	objptr, #4
24684     F2 26 69 FC | 	wrlong	#147, objptr
24688     04 E4 05 F1 | 	add	objptr, #4
2468c     F2 34 69 FC | 	wrlong	#154, objptr
24690     04 E4 05 F1 | 	add	objptr, #4
24694     F2 08 68 FC | 	wrlong	#4, objptr
24698     04 E4 85 F1 | 	sub	objptr, #4
2469c     F2 16 02 FB | 	rdlong	arg03, objptr
246a0     14 E4 85 F1 | 	sub	objptr, #20
246a4     F2 16 62 FC | 	wrlong	arg03, objptr
246a8     04 E4 05 F1 | 	add	objptr, #4
246ac     F2 00 68 FC | 	wrlong	#0, objptr
246b0     04 E4 05 F1 | 	add	objptr, #4
246b4     F2 00 68 FC | 	wrlong	#0, objptr
246b8     19 00 00 FF 
246bc     0C E5 05 F1 | 	add	objptr, ##13068
246c0     F2 02 68 FC | 	wrlong	#1, objptr
246c4     01 00 00 FF 
246c8     98 E5 05 F1 | 	add	objptr, ##920
246cc     F2 00 68 FC | 	wrlong	#0, objptr
246d0     01 00 00 FF 
246d4     00 EA 05 F1 | 	add	ptr__dat__, ##512
246d8     08 E4 05 F1 | 	add	objptr, #8
246dc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
246e0     04 E4 85 F1 | 	sub	objptr, #4
246e4     03 00 80 FF 
246e8     F2 3C 69 FC | 	wrlong	##1694, objptr
246ec     0D 00 00 FF 
246f0     74 E4 85 F1 | 	sub	objptr, ##6772
246f4     F2 18 68 FC | 	wrlong	#12, objptr
246f8     45 00 00 FF 
246fc     64 E4 85 F1 | 	sub	objptr, ##35428
24700     01 00 00 FF 
24704     00 EA 85 F1 | 	sub	ptr__dat__, ##512
24708     68 D7 BF FD | 	call	#_init_commands
2470c     5C F6 BF FD | 	call	#_init_error_strings
24710     C0 ED BF FD | 	call	#_init_audio
24714     48 20 BF FD | 	call	#_do_new
24718     37 00 00 FF 
2471c     3C E4 05 F1 | 	add	objptr, ##28220
24720     F2 12 02 FB | 	rdlong	arg01, objptr
24724     04 E4 85 F1 | 	sub	objptr, #4
24728     F2 14 02 FB | 	rdlong	arg02, objptr
2472c     37 00 00 FF 
24730     38 E4 85 F1 | 	sub	objptr, ##28216
24734     C8 17 B0 FD | 	call	#_hg010b_spin2_cls
24738     37 00 00 FF 
2473c     40 E4 05 F1 | 	add	objptr, ##28224
24740     F2 12 02 FB | 	rdlong	arg01, objptr
24744     37 00 00 FF 
24748     40 E4 85 F1 | 	sub	objptr, ##28224
2474c     EC 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
24750                 | ' 
24750                 | ' leading_spaces:=amount
24750     01 00 00 FF 
24754     B6 E4 05 F1 | 	add	objptr, ##694
24758     F2 04 68 FC | 	wrlong	#2, objptr
2475c     01 00 00 FF 
24760     B6 E4 85 F1 | 	sub	objptr, ##694
24764     C4 01 00 FF 
24768     AA 26 06 F6 | 	mov	local01, ##@LR__6206
2476c     3D 12 06 F6 | 	mov	arg01, #61
24770     3C 14 06 F6 | 	mov	arg02, #60
24774     3B 16 06 F6 | 	mov	arg03, #59
24778     3A 18 06 F6 | 	mov	arg04, #58
2477c     68 81 B0 FD | 	call	#__system___vfs_open_sdcardx
24780     FD 14 02 F6 | 	mov	arg02, result1
24784     13 13 02 F6 | 	mov	arg01, local01
24788     9C 37 B0 FD | 	call	#__system___mount
2478c     C4 01 00 FF 
24790     AE 12 06 F6 | 	mov	arg01, ##@LR__6207
24794     50 3A B0 FD | 	call	#__system___chdir
24798     C4 01 00 FF 
2479c     B6 26 06 F6 | 	mov	local01, ##@LR__6208
247a0     4A 00 00 FF 
247a4     94 E4 05 F1 | 	add	objptr, ##38036
247a8     F2 26 62 FC | 	wrlong	local01, objptr
247ac     13 00 00 FF 
247b0     60 E4 85 F1 | 	sub	objptr, ##9824
247b4     F2 12 02 FB | 	rdlong	arg01, objptr
247b8     37 00 00 FF 
247bc     34 E4 85 F1 | 	sub	objptr, ##28212
247c0     01 12 66 F0 | 	shl	arg01, #1
247c4     01 14 06 F6 | 	mov	arg02, #1
247c8     F4 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
247cc                 | ' init_commands
247cc                 | ' init_error_strings
247cc                 | ' init_audio
247cc                 | ' do_new
247cc                 | ' cls(ink, paper)
247cc                 | ' v.setfontfamily(font) 				' use ST Mono font
247cc                 | ' v.setleadingspaces(2)
247cc                 | ' mount "/sd", _vfs_open_sdcard()
247cc                 | ' chdir "/sd/bas"
247cc                 | ' currentdir$="/sd/bas"
247cc                 | ' position 2*editor_spaces,1 : print ver$
247cc     00 12 06 F6 | 	mov	arg01, #0
247d0     38 90 B0 FD | 	call	#__system___getiolock_0620
247d4     FD 12 02 F6 | 	mov	arg01, result1
247d8     80 33 B0 FD | 	call	#__system___lockmem
247dc     18 00 00 FF 
247e0     40 EB 05 F1 | 	add	ptr__dat__, ##12608
247e4     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
247e8     18 00 00 FF 
247ec     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
247f0     00 12 06 F6 | 	mov	arg01, #0
247f4     00 16 06 F6 | 	mov	arg03, #0
247f8     58 40 B0 FD | 	call	#__system___basic_print_string
247fc     00 12 06 F6 | 	mov	arg01, #0
24800     0A 14 06 F6 | 	mov	arg02, #10
24804     00 16 06 F6 | 	mov	arg03, #0
24808     F0 3F B0 FD | 	call	#__system___basic_print_char
2480c     00 12 06 F6 | 	mov	arg01, #0
24810     F8 8F B0 FD | 	call	#__system___getiolock_0620
24814     FD 00 68 FC | 	wrlong	#0, result1
24818     52 00 00 FF 
2481c     D0 E4 05 F1 | 	add	objptr, ##42192
24820     F2 12 02 FB | 	rdlong	arg01, objptr
24824     0F 00 00 FF 
24828     74 E4 85 F1 | 	sub	objptr, ##7796
2482c     F2 26 02 FB | 	rdlong	local01, objptr
24830     43 00 00 FF 
24834     5C E4 85 F1 | 	sub	objptr, ##34396
24838     13 13 82 F1 | 	sub	arg01, local01
2483c     00 14 06 F6 | 	mov	arg02, #0
24840     0A 16 06 F6 | 	mov	arg03, #10
24844     E8 55 B0 FD | 	call	#__system__Number_S
24848     FD 12 02 F6 | 	mov	arg01, result1
2484c     C4 01 00 FF 
24850     BE 14 06 F6 | 	mov	arg02, ##@LR__6209
24854     60 33 B0 FD | 	call	#__system___string_concat
24858     FD 26 02 F6 | 	mov	local01, result1
2485c     50 00 00 FF 
24860     38 E5 05 F1 | 	add	objptr, ##41272
24864     F2 26 62 FC | 	wrlong	local01, objptr
24868     50 00 00 FF 
2486c     38 E5 85 F1 | 	sub	objptr, ##41272
24870                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
24870     00 12 06 F6 | 	mov	arg01, #0
24874     94 8F B0 FD | 	call	#__system___getiolock_0620
24878     FD 12 02 F6 | 	mov	arg01, result1
2487c     DC 32 B0 FD | 	call	#__system___lockmem
24880     50 00 00 FF 
24884     38 E5 05 F1 | 	add	objptr, ##41272
24888     F2 14 02 FB | 	rdlong	arg02, objptr
2488c     50 00 00 FF 
24890     38 E5 85 F1 | 	sub	objptr, ##41272
24894     00 12 06 F6 | 	mov	arg01, #0
24898     00 16 06 F6 | 	mov	arg03, #0
2489c     B4 3F B0 FD | 	call	#__system___basic_print_string
248a0     00 12 06 F6 | 	mov	arg01, #0
248a4     0A 14 06 F6 | 	mov	arg02, #10
248a8     00 16 06 F6 | 	mov	arg03, #0
248ac     4C 3F B0 FD | 	call	#__system___basic_print_char
248b0     00 12 06 F6 | 	mov	arg01, #0
248b4     54 8F B0 FD | 	call	#__system___getiolock_0620
248b8     FD 00 68 FC | 	wrlong	#0, result1
248bc     37 00 00 FF 
248c0     34 E4 05 F1 | 	add	objptr, ##28212
248c4     F2 12 02 FB | 	rdlong	arg01, objptr
248c8     37 00 00 FF 
248cc     34 E4 85 F1 | 	sub	objptr, ##28212
248d0     01 12 66 F0 | 	shl	arg01, #1
248d4     04 14 06 F6 | 	mov	arg02, #4
248d8     E4 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
248dc                 | ' position 2*editor_spaces,4 : print "Ready"
248dc     00 12 06 F6 | 	mov	arg01, #0
248e0     28 8F B0 FD | 	call	#__system___getiolock_0620
248e4     FD 12 02 F6 | 	mov	arg01, result1
248e8     70 32 B0 FD | 	call	#__system___lockmem
248ec     C4 01 00 FF 
248f0     D0 14 06 F6 | 	mov	arg02, ##@LR__6210
248f4     00 12 06 F6 | 	mov	arg01, #0
248f8     00 16 06 F6 | 	mov	arg03, #0
248fc     54 3F B0 FD | 	call	#__system___basic_print_string
24900     00 12 06 F6 | 	mov	arg01, #0
24904     0A 14 06 F6 | 	mov	arg02, #10
24908     00 16 06 F6 | 	mov	arg03, #0
2490c     EC 3E B0 FD | 	call	#__system___basic_print_char
24910     00 12 06 F6 | 	mov	arg01, #0
24914     F4 8E B0 FD | 	call	#__system___getiolock_0620
24918     FD 00 68 FC | 	wrlong	#0, result1
2491c     00 14 06 F6 | 	mov	arg02, #0
24920     01 14 D6 F7 | 	test	arg02, #1 wc
24924     5A 4C 64 FD | 	drvc	#38
24928     01 14 D6 F7 | 	test	arg02, #1 wc
2492c     5A 4E 64 FD | 	drvc	#39
24930     C4 01 00 FF 
24934     D6 26 06 F6 | 	mov	local01, ##@LR__6211
24938     52 00 00 FF 
2493c     FC E4 05 F1 | 	add	objptr, ##42236
24940     F2 26 62 FC | 	wrlong	local01, objptr
24944     04 E4 05 F1 | 	add	objptr, #4
24948     FF FF FF FF 
2494c     F2 FE 6B FC | 	wrlong	##-1, objptr
24950     0C E4 05 F1 | 	add	objptr, #12
24954     F2 00 68 FC | 	wrlong	#0, objptr
24958     52 00 00 FF 
2495c     0C E5 85 F1 | 	sub	objptr, ##42252
24960                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
24960                 | ' loadname="noname.bas"
24960                 | ' do_insert=-1
24960                 | ' inload=0
24960                 | ' 
24960                 | ' open "/sd/bas/autorun.bas" for input as #9
24960     C4 01 00 FF 
24964     E1 14 06 F6 | 	mov	arg02, ##@LR__6212
24968     09 12 06 F6 | 	mov	arg01, #9
2496c     00 16 06 F6 | 	mov	arg03, #0
24970     EC 3D B0 FD | 	call	#__system___basic_open_string
24974     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24978     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2497c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
24980     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24984     52 00 00 FF 
24988     10 E5 05 F1 | 	add	objptr, ##42256
2498c     F2 FA 61 FC | 	wrlong	result1, objptr
24990     52 00 00 FF 
24994     10 E5 85 F1 | 	sub	objptr, ##42256
24998                 | ' err=geterr()
24998                 | ' close #9
24998     09 12 06 F6 | 	mov	arg01, #9
2499c     1C 85 B0 FD | 	call	#__system__close
249a0                 | ' if err=0 then line$="run autorun.bas" : interpret
249a0     52 00 00 FF 
249a4     10 E5 05 F1 | 	add	objptr, ##42256
249a8     F2 26 0A FB | 	rdlong	local01, objptr wz
249ac     52 00 00 FF 
249b0     10 E5 85 F1 | 	sub	objptr, ##42256
249b4     C4 01 00 AF 
249b8     F5 26 06 A6 |  if_e	mov	local01, ##@LR__6213
249bc     37 00 00 AF 
249c0     1C E4 05 A1 |  if_e	add	objptr, ##28188
249c4     F2 26 62 AC |  if_e	wrlong	local01, objptr
249c8     37 00 00 AF 
249cc     1C E4 85 A1 |  if_e	sub	objptr, ##28188
249d0     B8 CE BD AD |  if_e	call	#_interpret
249d4                 | ' 
249d4                 | ' 
249d4                 | ' '-------------------------------------------------------------------------------------------------------- 
249d4                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
249d4                 | ' '--------------------------------------------------------------------------------------------------------
249d4                 | ' 
249d4                 | ' do
249d4                 | LR__2780
249d4     2C BE BD FD | 	call	#_edit
249d8     FD 26 02 F6 | 	mov	local01, result1
249dc     37 00 00 FF 
249e0     1C E4 05 F1 | 	add	objptr, ##28188
249e4     F2 26 62 FC | 	wrlong	local01, objptr
249e8     37 00 00 FF 
249ec     1C E4 85 F1 | 	sub	objptr, ##28188
249f0     98 CE BD FD | 	call	#_interpret
249f4     C4 01 00 FF 
249f8     05 27 06 F6 | 	mov	local01, ##@LR__6214
249fc     37 00 00 FF 
24a00     1C E4 05 F1 | 	add	objptr, ##28188
24a04     F2 26 62 FC | 	wrlong	local01, objptr
24a08     37 00 00 FF 
24a0c     1C E4 85 F1 | 	sub	objptr, ##28188
24a10     C0 FF 9F FD | 	jmp	#LR__2780
24a14     A7 F0 03 F6 | 	mov	ptra, fp
24a18     B2 00 A0 FD | 	call	#popregs_
24a1c                 | _program_ret
24a1c     2D 00 64 FD | 	ret
24a20                 | 
24a20                 | ' '' this is not a main program.
24a20                 | ' 
24a20                 | ' '****************************************************************************************************************
24a20                 | ' '                                                                                                             	*
24a20                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
24a20                 | ' '                                                                                                            	*
24a20                 | ' ' base - HDMI base pin												*
24a20                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
24a20                 | ' '														*
24a20                 | ' '														*
24a20                 | ' '****************************************************************************************************************
24a20                 | ' 
24a20                 | ' pub start(base,mb):result |i
24a20                 | _hg010b_spin2_start
24a20                 | ' 
24a20                 | ' '--------------------------- initialize pointers and variables
24a20                 | ' 
24a20                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
24a20     34 E4 05 F1 | 	add	objptr, #52
24a24     F2 FA 01 F6 | 	mov	result1, objptr
24a28     28 E4 85 F1 | 	sub	objptr, #40
24a2c     F2 FA 61 FC | 	wrlong	result1, objptr
24a30                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
24a30                 | ' hdmibase:=base							' HDMI base pin, 8*n
24a30     18 E4 05 F1 | 	add	objptr, #24
24a34     F2 12 62 FC | 	wrlong	arg01, objptr
24a38                 | ' mailbox_ptr:=mb		
24a38     04 E4 05 F1 | 	add	objptr, #4
24a3c     F2 14 62 FC | 	wrlong	arg02, objptr
24a40                 | ' mailbox0:=mb				' PSRAM mailbox pointer
24a40     C1 E5 05 F1 | 	add	objptr, #449
24a44     F2 14 62 FC | 	wrlong	arg02, objptr
24a48                 | ' sprite_ptr:=@spr1ptr
24a48     D8 E4 85 F1 | 	sub	objptr, #216
24a4c     F2 FA 01 F6 | 	mov	result1, objptr
24a50     E5 E4 85 F1 | 	sub	objptr, #229
24a54     F2 FA 61 FC | 	wrlong	result1, objptr
24a58                 | ' 
24a58                 | ' 		'
24a58                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
24a58     E5 E4 05 F1 | 	add	objptr, #229
24a5c     F2 FA 01 FB | 	rdlong	result1, objptr
24a60     D0 FA 05 F1 | 	add	result1, #208
24a64     FD 10 58 FC | 	wrword	#8, result1
24a68                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
24a68     F2 16 02 FB | 	rdlong	arg03, objptr
24a6c     D2 16 06 F1 | 	add	arg03, #210
24a70     0B 21 58 FC | 	wrword	#16, arg03
24a74                 | ' leading_spaces:=0				'
24a74     A5 E5 05 F1 | 	add	objptr, #421
24a78     F2 00 68 FC | 	wrlong	#0, objptr
24a7c                 | ' 
24a7c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
24a7c     99 E4 85 F1 | 	sub	objptr, #153
24a80     00 00 A0 FF 
24a84     F2 0E 68 FC | 	wrlong	##1073741831, objptr
24a88                 | ' emptydl[1]:=0
24a88     04 E4 05 F1 | 	add	objptr, #4
24a8c     F2 00 68 FC | 	wrlong	#0, objptr
24a90                 | ' 
24a90                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
24a90                 | ' 
24a90                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
24a90     28 E5 85 F1 | 	sub	objptr, #296
24a94     F2 02 68 FC | 	wrlong	#1, objptr
24a98                 | ' if s_debug<>0
24a98                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
24a98     20 00 80 FF 
24a9c     F2 00 68 FC | 	wrlong	##16384, objptr
24aa0     F9 E4 85 F1 | 	sub	objptr, #249
24aa4                 | ' setmode()							' set the mode, see below
24aa4     1C 03 B0 FD | 	call	#_hg010b_spin2_setmode
24aa8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
24aa8     49 E4 05 F1 | 	add	objptr, #73
24aac     F2 FA 01 F6 | 	mov	result1, objptr
24ab0     35 E4 85 F1 | 	sub	objptr, #53
24ab4     F2 FA 61 FC | 	wrlong	result1, objptr
24ab8                 | ' cursor_ptr:=@cursor_x						
24ab8     28 E4 05 F1 | 	add	objptr, #40
24abc     F2 16 02 F6 | 	mov	arg03, objptr
24ac0     2C E4 85 F1 | 	sub	objptr, #44
24ac4     F2 16 62 FC | 	wrlong	arg03, objptr
24ac8                 | ' fontnum:=0  							' start with a PC type font 
24ac8     55 E4 05 F1 | 	add	objptr, #85
24acc     F2 00 68 FC | 	wrlong	#0, objptr
24ad0                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
24ad0     1C E4 05 F1 | 	add	objptr, #28
24ad4     F2 12 02 F6 | 	mov	arg01, objptr
24ad8     81 E4 85 F1 | 	sub	objptr, #129
24adc     1C 00 00 FF 
24ae0     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14464
24ae4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
24ae8     1C 00 00 FF 
24aec     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14464
24af0     10 16 06 F6 | 	mov	arg03, #16
24af4     14 2F B0 FD | 	call	#__system____builtin_memmove
24af8                 | ' leading_spaces:=0
24af8     01 00 00 FF 
24afc     B6 E4 05 F1 | 	add	objptr, ##694
24b00     F2 00 68 FC | 	wrlong	#0, objptr
24b04     01 00 00 FF 
24b08     B6 E4 85 F1 | 	sub	objptr, ##694
24b0c                 | ' '---------------------------- initialize a cursor (MSDOS type)
24b0c                 | ' 
24b0c                 | ' initcursor(154)
24b0c     9A 12 06 F6 | 	mov	arg01, #154
24b10     78 00 B0 FD | 	call	#_hg010b_spin2_initcursor
24b14                 | ' 
24b14                 | ' '---------------------------- start the cog
24b14                 | ' 
24b14                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
24b14     1C 00 00 FF 
24b18     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14480
24b1c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
24b20     1C 00 00 FF 
24b24     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14480
24b28     14 E4 05 F1 | 	add	objptr, #20
24b2c     10 FA 05 F6 | 	mov	result1, #16
24b30     28 E4 61 FD | 	setq	objptr
24b34     0A FB F1 FC | 	coginit	result1, arg02 wc
24b38     01 FA 65 C6 |  if_b	neg	result1, #1
24b3c     1C E4 05 F1 | 	add	objptr, #28
24b40     F2 FA 61 FC | 	wrlong	result1, objptr
24b44     30 E4 85 F1 | 	sub	objptr, #48
24b48                 | ' waitms(40)							' wait for stabilize
24b48     28 12 06 F6 | 	mov	arg01, #40
24b4c     00 33 B0 FD | 	call	#__system___waitms
24b50                 | ' return cog							' return the driver's cog #
24b50     30 E4 05 F1 | 	add	objptr, #48
24b54     F2 FA 01 FB | 	rdlong	result1, objptr
24b58     30 E4 85 F1 | 	sub	objptr, #48
24b5c                 | _hg010b_spin2_start_ret
24b5c     2D 00 64 FD | 	ret
24b60                 | 
24b60                 | ' 
24b60                 | ' 
24b60                 | ' '**************************************************************************************************************** 
24b60                 | ' '                                                                                                             	*
24b60                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
24b60                 | ' '  Mode number - see start() above or bits below								*
24b60                 | ' '                                                                                                             	*
24b60                 | ' '****************************************************************************************************************
24b60                 | ' 
24b60                 | ' 
24b60                 | ' pub restorepalette()
24b60                 | _hg010b_spin2_restorepalette
24b60                 | ' 
24b60                 | ' longmove(@ataripalette,@ataripalette2,256)
24b60     18 00 00 FF 
24b64     40 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
24b68     F7 12 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
24b6c     02 00 00 FF 
24b70     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
24b74     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
24b78     1A 00 00 FF 
24b7c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
24b80     00 17 06 F6 | 	mov	arg03, #256
24b84     18 2F B0 FD | 	call	#__system__longmove
24b88                 | _hg010b_spin2_restorepalette_ret
24b88     2D 00 64 FD | 	ret
24b8c                 | 
24b8c                 | ' 
24b8c                 | ' '---------------------------- initialize a cursor (MSDOS type)
24b8c                 | ' pub initcursor(color) |i
24b8c                 | _hg010b_spin2_initcursor
24b8c     03 4A 05 F6 | 	mov	COUNT_, #3
24b90     A8 00 A0 FD | 	call	#pushregs_
24b94     09 27 02 F6 | 	mov	local01, arg01
24b98                 | ' 
24b98                 | ' cursor_x:=0							' place the cursor at 0:0
24b98     3C E4 05 F1 | 	add	objptr, #60
24b9c     F2 00 58 FC | 	wrword	#0, objptr
24ba0                 | ' cursor_y:=0
24ba0     02 E4 05 F1 | 	add	objptr, #2
24ba4     F2 00 48 FC | 	wrbyte	#0, objptr
24ba8                 | ' repeat i from 0 to 111
24ba8     00 28 06 F6 | 	mov	local02, #0
24bac     F8 E5 05 F1 | 	add	objptr, #504
24bb0     97 0C 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
24bb4                 | LR__2790
24bb4                 | '   cursor[i]:=0
24bb4     14 2B 02 F6 | 	mov	local03, local02
24bb8     F2 2A 02 F1 | 	add	local03, objptr
24bbc     15 01 48 FC | 	wrbyte	#0, local03
24bc0     01 28 06 F1 | 	add	local02, #1
24bc4     70 28 56 F2 | 	cmps	local02, #112 wc
24bc8     E8 FF 9F CD |  if_b	jmp	#LR__2790
24bcc                 | LR__2791
24bcc                 | ' repeat i from 112 to 127
24bcc     70 28 06 F6 | 	mov	local02, #112
24bd0     97 0C 48 FB | 	callpa	#(@LR__2793-@LR__2792)>>2,fcache_load_ptr_
24bd4                 | LR__2792
24bd4                 | '   cursor[i]:=color  
24bd4     14 2B 02 F6 | 	mov	local03, local02
24bd8     F2 2A 02 F1 | 	add	local03, objptr
24bdc     15 27 42 FC | 	wrbyte	local01, local03
24be0     01 28 06 F1 | 	add	local02, #1
24be4     80 28 16 F2 | 	cmp	local02, #128 wc
24be8     E8 FF 9F CD |  if_b	jmp	#LR__2792
24bec                 | LR__2793
24bec                 | ' 'repeat i from 0 to 127
24bec                 | ' '  if ((i/8)//2)
24bec                 | ' '    cursor[i]:=15
24bec                 | ' '  else
24bec                 | ' '    cursor[i]:=0
24bec                 | ' '  if i>=120    
24bec                 | ' '    cursor[i]:=40
24bec                 | ' setspriteptr(17,@cursor)
24bec     F2 14 02 F6 | 	mov	arg02, objptr
24bf0     01 00 00 FF 
24bf4     36 E4 85 F1 | 	sub	objptr, ##566
24bf8     11 12 06 F6 | 	mov	arg01, #17
24bfc     DC 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
24c00                 | ' setspritesize(17,8,16)
24c00     11 12 06 F6 | 	mov	arg01, #17
24c04     08 14 06 F6 | 	mov	arg02, #8
24c08     10 16 06 F6 | 	mov	arg03, #16
24c0c     5C 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
24c10                 | ' setspritepos(17,0,0)
24c10     11 12 06 F6 | 	mov	arg01, #17
24c14     00 14 06 F6 | 	mov	arg02, #0
24c18     00 16 06 F6 | 	mov	arg03, #0
24c1c     E4 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
24c20                 | ' cursorshape:=14
24c20     0B 00 00 FF 
24c24     C6 E4 05 F1 | 	add	objptr, ##5830
24c28     F2 1C 68 FC | 	wrlong	#14, objptr
24c2c                 | ' cursorcolor:=color
24c2c     04 E4 85 F1 | 	sub	objptr, #4
24c30     F2 26 62 FC | 	wrlong	local01, objptr
24c34     0B 00 00 FF 
24c38     C2 E4 85 F1 | 	sub	objptr, ##5826
24c3c     A7 F0 03 F6 | 	mov	ptra, fp
24c40     B2 00 A0 FD | 	call	#popregs_
24c44                 | _hg010b_spin2_initcursor_ret
24c44     2D 00 64 FD | 	ret
24c48                 | 
24c48                 | ' 
24c48                 | ' pub setcursorshape(shape) | i
24c48                 | _hg010b_spin2_setcursorshape
24c48                 | ' 
24c48                 | ' cursorshape:=shape
24c48     0B 00 00 FF 
24c4c     C6 E4 05 F1 | 	add	objptr, ##5830
24c50     F2 12 62 FC | 	wrlong	arg01, objptr
24c54                 | ' repeat i from 0 to (8*cursorshape)-1
24c54     00 00 06 F6 | 	mov	_var01, #0
24c58     09 03 02 F6 | 	mov	_var02, arg01
24c5c     03 02 66 F0 | 	shl	_var02, #3
24c60     01 02 86 F1 | 	sub	_var02, #1
24c64     00 02 56 F2 | 	cmps	_var02, #0 wc
24c68     01 04 86 F6 | 	negc	_var03, #1
24c6c     02 07 02 F6 | 	mov	_var04, _var03
24c70     02 03 02 F1 | 	add	_var02, _var03
24c74     0A 00 00 FF 
24c78     90 E4 85 F1 | 	sub	objptr, ##5264
24c7c     97 0C 48 FB | 	callpa	#(@LR__2801-@LR__2800)>>2,fcache_load_ptr_
24c80                 | LR__2800
24c80                 | '   cursor[i]:=0
24c80     00 05 02 F6 | 	mov	_var03, _var01
24c84     F2 04 02 F1 | 	add	_var03, objptr
24c88     02 01 48 FC | 	wrbyte	#0, _var03
24c8c     03 01 02 F1 | 	add	_var01, _var04
24c90     01 01 0A F2 | 	cmp	_var01, _var02 wz
24c94     E8 FF 9F 5D |  if_ne	jmp	#LR__2800
24c98                 | LR__2801
24c98                 | ' repeat i from 8*cursorshape to 127
24c98     0A 00 00 FF 
24c9c     90 E4 05 F1 | 	add	objptr, ##5264
24ca0     F2 06 02 FB | 	rdlong	_var04, objptr
24ca4     03 01 02 F6 | 	mov	_var01, _var04
24ca8     03 00 66 F0 | 	shl	_var01, #3
24cac     0B 00 00 FF 
24cb0     C6 E4 85 F1 | 	sub	objptr, ##5830
24cb4     03 06 66 F0 | 	shl	_var04, #3
24cb8     80 06 56 F2 | 	cmps	_var04, #128 wc
24cbc     01 04 A6 F6 | 	negnc	_var03, #1
24cc0     7F 02 06 F6 | 	mov	_var02, #127
24cc4     02 03 02 F1 | 	add	_var02, _var03
24cc8     97 1A 48 FB | 	callpa	#(@LR__2803-@LR__2802)>>2,fcache_load_ptr_
24ccc                 | LR__2802
24ccc                 | '   cursor[i]:=cursorcolor
24ccc     00 07 02 F6 | 	mov	_var04, _var01
24cd0     01 00 00 FF 
24cd4     36 E4 05 F1 | 	add	objptr, ##566
24cd8     F2 06 02 F1 | 	add	_var04, objptr
24cdc     0A 00 00 FF 
24ce0     8C E4 05 F1 | 	add	objptr, ##5260
24ce4     F2 12 02 FB | 	rdlong	arg01, objptr
24ce8     0B 00 00 FF 
24cec     C2 E4 85 F1 | 	sub	objptr, ##5826
24cf0     03 13 42 FC | 	wrbyte	arg01, _var04
24cf4     02 01 02 F1 | 	add	_var01, _var03
24cf8     01 01 0A F2 | 	cmp	_var01, _var02 wz
24cfc     CC FF 9F 5D |  if_ne	jmp	#LR__2802
24d00                 | LR__2803
24d00                 | _hg010b_spin2_setcursorshape_ret
24d00     2D 00 64 FD | 	ret
24d04                 | 
24d04                 | ' 
24d04                 | ' pub setcursorcolor(color) | i
24d04                 | _hg010b_spin2_setcursorcolor
24d04                 | ' 
24d04                 | ' cursorcolor:=color
24d04     0B 00 00 FF 
24d08     C2 E4 05 F1 | 	add	objptr, ##5826
24d0c     F2 12 62 FC | 	wrlong	arg01, objptr
24d10                 | ' repeat i from 0 to (8*cursorshape)-1
24d10     00 12 06 F6 | 	mov	arg01, #0
24d14     04 E4 05 F1 | 	add	objptr, #4
24d18     F2 00 02 FB | 	rdlong	_var01, objptr
24d1c     03 00 66 F0 | 	shl	_var01, #3
24d20     01 00 86 F1 | 	sub	_var01, #1
24d24     00 00 56 F2 | 	cmps	_var01, #0 wc
24d28     01 02 86 F6 | 	negc	_var02, #1
24d2c     01 05 02 F6 | 	mov	_var03, _var02
24d30     01 01 02 F1 | 	add	_var01, _var02
24d34     0A 00 00 FF 
24d38     90 E4 85 F1 | 	sub	objptr, ##5264
24d3c     97 0C 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
24d40                 | LR__2810
24d40                 | '   cursor[i]:=0
24d40     09 03 02 F6 | 	mov	_var02, arg01
24d44     F2 02 02 F1 | 	add	_var02, objptr
24d48     01 01 48 FC | 	wrbyte	#0, _var02
24d4c     02 13 02 F1 | 	add	arg01, _var03
24d50     00 13 0A F2 | 	cmp	arg01, _var01 wz
24d54     E8 FF 9F 5D |  if_ne	jmp	#LR__2810
24d58                 | LR__2811
24d58                 | ' repeat i from 8*cursorshape to 127
24d58     0A 00 00 FF 
24d5c     90 E4 05 F1 | 	add	objptr, ##5264
24d60     F2 04 02 FB | 	rdlong	_var03, objptr
24d64     02 13 02 F6 | 	mov	arg01, _var03
24d68     03 12 66 F0 | 	shl	arg01, #3
24d6c     0B 00 00 FF 
24d70     C6 E4 85 F1 | 	sub	objptr, ##5830
24d74     03 04 66 F0 | 	shl	_var03, #3
24d78     80 04 56 F2 | 	cmps	_var03, #128 wc
24d7c     01 02 A6 F6 | 	negnc	_var02, #1
24d80     7F 00 06 F6 | 	mov	_var01, #127
24d84     01 01 02 F1 | 	add	_var01, _var02
24d88     97 1A 48 FB | 	callpa	#(@LR__2813-@LR__2812)>>2,fcache_load_ptr_
24d8c                 | LR__2812
24d8c                 | '   cursor[i]:=cursorcolor
24d8c     09 05 02 F6 | 	mov	_var03, arg01
24d90     01 00 00 FF 
24d94     36 E4 05 F1 | 	add	objptr, ##566
24d98     F2 04 02 F1 | 	add	_var03, objptr
24d9c     0A 00 00 FF 
24da0     8C E4 05 F1 | 	add	objptr, ##5260
24da4     F2 06 02 FB | 	rdlong	_var04, objptr
24da8     0B 00 00 FF 
24dac     C2 E4 85 F1 | 	sub	objptr, ##5826
24db0     02 07 42 FC | 	wrbyte	_var04, _var03
24db4     01 13 02 F1 | 	add	arg01, _var02
24db8     00 13 0A F2 | 	cmp	arg01, _var01 wz
24dbc     CC FF 9F 5D |  if_ne	jmp	#LR__2812
24dc0                 | LR__2813
24dc0                 | _hg010b_spin2_setcursorcolor_ret
24dc0     2D 00 64 FD | 	ret
24dc4                 | 
24dc4                 | '   
24dc4                 | '   
24dc4                 | '   
24dc4                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
24dc4                 | _hg010b_spin2_setmode
24dc4     02 4A 05 F6 | 	mov	COUNT_, #2
24dc8     A8 00 A0 FD | 	call	#pushregs_
24dcc                 | ' 
24dcc                 | ' 
24dcc                 | ' dl_ptr:=@emptydl[0]
24dcc     01 00 00 FF 
24dd0     1D E4 05 F1 | 	add	objptr, ##541
24dd4     F2 1A 02 F6 | 	mov	arg05, objptr
24dd8     FD E5 85 F1 | 	sub	objptr, #509
24ddc     F2 1A 62 FC | 	wrlong	arg05, objptr
24de0                 | ' 
24de0                 | ' if cog>0 
24de0     10 E4 05 F1 | 	add	objptr, #16
24de4     F2 1A 02 FB | 	rdlong	arg05, objptr
24de8     30 E4 85 F1 | 	sub	objptr, #48
24dec     01 1A 56 F2 | 	cmps	arg05, #1 wc
24df0                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
24df0     01 12 06 36 |  if_ae	mov	arg01, #1
24df4     68 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
24df8                 | ' xres:=1024
24df8     01 00 00 FF 
24dfc     26 E4 05 F1 | 	add	objptr, ##550
24e00     02 00 80 FF 
24e04     F2 00 68 FC | 	wrlong	##1024, objptr
24e08                 | ' yres:=600
24e08     04 E4 05 F1 | 	add	objptr, #4
24e0c     01 00 80 FF 
24e10     F2 B0 68 FC | 	wrlong	##600, objptr
24e14                 | ' ppl:=(timings[3])
24e14     1C 00 00 FF 
24e18     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
24e1c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
24e20     51 E5 85 F1 | 	sub	objptr, #337
24e24     F2 1A 62 FC | 	wrlong	arg05, objptr
24e28                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
24e28     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
24e2c     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
24e30     01 26 66 F0 | 	shl	local01, #1
24e34     80 E4 85 F1 | 	sub	objptr, #128
24e38     F2 26 62 FC | 	wrlong	local01, objptr
24e3c                 | ' cpl1:=cpl '' todo remove
24e3c     04 E4 05 F1 | 	add	objptr, #4
24e40     F2 26 62 FC | 	wrlong	local01, objptr
24e44                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
24e44     04 00 00 FF 
24e48     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
24e4c     41 E4 85 F1 | 	sub	objptr, #65
24e50     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
24e54                 | ' repeat i from 0 to 3
24e54     00 28 06 F6 | 	mov	local02, #0
24e58     04 00 00 FF 
24e5c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
24e60     08 E4 05 F1 | 	add	objptr, #8
24e64     97 20 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
24e68                 | LR__2820
24e68                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
24e68     14 27 02 F6 | 	mov	local01, local02
24e6c     02 26 66 F0 | 	shl	local01, #2
24e70     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
24e74     F2 1A 02 FB | 	rdlong	arg05, objptr
24e78     11 1A 66 F0 | 	shl	arg05, #17
24e7c     13 27 02 FB | 	rdlong	local01, local01
24e80     0D 27 02 F1 | 	add	local01, arg05
24e84     80 40 38 FF 
24e88     00 26 06 F1 | 	add	local01, ##1887502336
24e8c     14 1B 02 F6 | 	mov	arg05, local02
24e90     02 1A 66 F0 | 	shl	arg05, #2
24e94     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
24e98     0D 27 62 FC | 	wrlong	local01, arg05
24e9c     01 28 06 F1 | 	add	local02, #1
24ea0     04 28 56 F2 | 	cmps	local02, #4 wc
24ea4     C0 FF 9F CD |  if_b	jmp	#LR__2820
24ea8                 | LR__2821
24ea8     24 E4 85 F1 | 	sub	objptr, #36
24eac                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
24eac     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
24eb0     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
24eb4     1C 00 00 FF 
24eb8     64 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14436
24ebc     14 26 66 FC | 	wrlong	local01, #20
24ec0                 | ' 'hubset(timings[10])
24ec0                 | ' waitms(1)                                                   	' wait for stabilization
24ec0     01 12 06 F6 | 	mov	arg01, #1
24ec4     88 2F B0 FD | 	call	#__system___waitms
24ec8     1C 00 00 FF 
24ecc     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
24ed0     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
24ed4     61 E4 05 F1 | 	add	objptr, #97
24ed8     F2 28 62 FC | 	wrlong	local02, objptr
24edc     14 27 52 F6 | 	abs	local01, local02 wc
24ee0     04 26 46 F0 | 	shr	local01, #4
24ee4     13 27 82 F6 | 	negc	local01, local01
24ee8     9C E4 05 F1 | 	add	objptr, #156
24eec     F2 26 62 FC | 	wrlong	local01, objptr
24ef0     A4 E4 85 F1 | 	sub	objptr, #164
24ef4     F2 28 02 FB | 	rdlong	local02, objptr
24ef8     08 E4 05 F1 | 	add	objptr, #8
24efc     F2 26 02 FB | 	rdlong	local01, objptr
24f00     13 29 02 FD | 	qmul	local02, local01
24f04                 | ' lines:=timings[11]
24f04                 | ' t_lines:=lines/16
24f04                 | ' buflen:=cpl*lines						' framebuffer length in longs
24f04     29 E4 85 F1 | 	sub	objptr, #41
24f08     19 26 C6 F9 | 	decod	local01, #25
24f0c     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
24f10     18 28 62 FD | 	getqx	local02
24f14     F2 28 62 FC | 	wrlong	local02, objptr
24f18     38 E4 85 F1 | 	sub	objptr, #56
24f1c     02 28 66 F0 | 	shl	local02, #2
24f20     14 27 82 F1 | 	sub	local01, local02
24f24     F2 26 62 FC | 	wrlong	local01, objptr
24f28     FD E4 05 F1 | 	add	objptr, #253
24f2c     F2 28 02 FB | 	rdlong	local02, objptr
24f30     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
24f34     0D 29 02 FD | 	qmul	local02, arg05
24f38                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
24f38                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
24f38     F9 E4 85 F1 | 	sub	objptr, #249
24f3c                 | ' mode_ptr:=@timings						' set pointers to timings
24f3c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
24f40                 | ' graphmode:=1024+512+192+48							' det global variable
24f40                 | ' makedl(graphmode)							' make a DL for the mode
24f40     03 00 00 FF 
24f44     F0 12 06 F6 | 	mov	arg01, ##1776
24f48     18 28 62 FD | 	getqx	local02
24f4c     14 27 82 F1 | 	sub	local01, local02
24f50     F2 26 62 FC | 	wrlong	local01, objptr
24f54     14 E4 05 F1 | 	add	objptr, #20
24f58     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
24f5c     79 E4 05 F1 | 	add	objptr, #121
24f60     03 00 80 FF 
24f64     F2 E0 69 FC | 	wrlong	##1776, objptr
24f68     91 E4 85 F1 | 	sub	objptr, #145
24f6c     1C 00 00 FF 
24f70     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
24f74     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
24f78                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
24f78     F2 26 02 FB | 	rdlong	local01, objptr
24f7c     DD E4 05 F1 | 	add	objptr, #221
24f80     F2 26 62 FC | 	wrlong	local01, objptr
24f84                 | ' s_font_ptr:=font_ptr
24f84     D5 E4 85 F1 | 	sub	objptr, #213
24f88     F2 26 02 FB | 	rdlong	local01, objptr
24f8c     D9 E4 05 F1 | 	add	objptr, #217
24f90     F2 26 62 FC | 	wrlong	local01, objptr
24f94                 | ' s_lines:=lines
24f94     80 E4 85 F1 | 	sub	objptr, #128
24f98     F2 26 02 FB | 	rdlong	local01, objptr
24f9c     84 E4 05 F1 | 	add	objptr, #132
24fa0     F2 26 62 FC | 	wrlong	local01, objptr
24fa4                 | ' s_buflen:=buflen
24fa4     AD E4 85 F1 | 	sub	objptr, #173
24fa8     F2 26 02 FB | 	rdlong	local01, objptr
24fac     B5 E4 05 F1 | 	add	objptr, #181
24fb0     F2 26 62 FC | 	wrlong	local01, objptr
24fb4                 | ' s_cpl:=cpl
24fb4     94 E4 85 F1 | 	sub	objptr, #148
24fb8     F2 26 02 FB | 	rdlong	local01, objptr
24fbc     90 E4 05 F1 | 	add	objptr, #144
24fc0     F2 26 62 FC | 	wrlong	local01, objptr
24fc4                 | ' s_cpl1:=cpl
24fc4     90 E4 85 F1 | 	sub	objptr, #144
24fc8     F2 26 02 FB | 	rdlong	local01, objptr
24fcc     98 E4 05 F1 | 	add	objptr, #152
24fd0     F2 26 62 FC | 	wrlong	local01, objptr
24fd4                 | ' st_lines:=t_lines
24fd4     0C E4 05 F1 | 	add	objptr, #12
24fd8     F2 26 02 FB | 	rdlong	local01, objptr
24fdc     04 E4 05 F1 | 	add	objptr, #4
24fe0     F2 26 62 FC | 	wrlong	local01, objptr
24fe4                 | ' ppl:=ppl/xzoom  
24fe4     28 E4 85 F1 | 	sub	objptr, #40
24fe8     F2 90 02 FB | 	rdlong	muldiva_, objptr
24fec     2C E4 05 F1 | 	add	objptr, #44
24ff0     F2 92 02 FB | 	rdlong	muldivb_, objptr
24ff4     05 E5 85 F1 | 	sub	objptr, #261
24ff8     BA 00 A0 FD | 	call	#divide_
24ffc     D9 E4 05 F1 | 	add	objptr, #217
25000     F2 92 62 FC | 	wrlong	muldivb_, objptr
25004                 | ' s_ppl:=ppl
25004     1C E4 05 F1 | 	add	objptr, #28
25008     F2 92 62 FC | 	wrlong	muldivb_, objptr
2500c     F5 E4 85 F1 | 	sub	objptr, #245
25010                 | ' waitms(20)							' wait 
25010     14 12 06 F6 | 	mov	arg01, #20
25014     38 2E B0 FD | 	call	#__system___waitms
25018                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
25018     04 E4 05 F1 | 	add	objptr, #4
2501c     F2 12 02 FB | 	rdlong	arg01, objptr
25020     04 E4 85 F1 | 	sub	objptr, #4
25024     F2 16 02 FB | 	rdlong	arg03, objptr
25028     09 17 82 F1 | 	sub	arg03, arg01
2502c     20 14 06 F6 | 	mov	arg02, #32
25030     00 18 06 F6 | 	mov	arg04, #0
25034     01 1A 06 F6 | 	mov	arg05, #1
25038     0B 00 00 FF 
2503c     CC E4 05 F1 | 	add	objptr, ##5836
25040     AC 1F B0 FD | 	call	#_psram_spin2_fill
25044     0B 00 00 FF 
25048     CC E4 85 F1 | 	sub	objptr, ##5836
2504c     A7 F0 03 F6 | 	mov	ptra, fp
25050     B2 00 A0 FD | 	call	#popregs_
25054                 | _hg010b_spin2_setmode_ret
25054     2D 00 64 FD | 	ret
25058                 | 
25058                 | ' 
25058                 | ' '****************************************************************************************************************
25058                 | ' '                                                                                                             	*
25058                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
25058                 | ' '                                                                                                             	*
25058                 | ' '****************************************************************************************************************
25058                 | ' 
25058                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
25058                 | _hg010b_spin2_makedl
25058                 | ' 
25058                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
25058                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
25058                 | ' repeat i from 0 to 11                                                           ' clear DL
25058     00 00 06 F6 | 	mov	_var01, #0
2505c     ED E5 05 F1 | 	add	objptr, #493
25060     97 0E 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
25064                 | LR__2830
25064                 | '   displaylist[i]:=0 
25064     00 03 02 F6 | 	mov	_var02, _var01
25068     02 02 66 F0 | 	shl	_var02, #2
2506c     F2 02 02 F1 | 	add	_var02, objptr
25070     01 01 68 FC | 	wrlong	#0, _var02
25074     01 00 06 F1 | 	add	_var01, #1
25078     0C 00 56 F2 | 	cmps	_var01, #12 wc
2507c     E4 FF 9F CD |  if_b	jmp	#LR__2830
25080                 | LR__2831
25080                 | '                         ' 
25080                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
25080     8C E5 85 F1 | 	sub	objptr, #396
25084     F2 02 02 FB | 	rdlong	_var02, objptr
25088     14 02 66 F0 | 	shl	_var02, #20
2508c     01 02 06 F1 | 	add	_var02, #1
25090     04 E4 85 F1 | 	sub	objptr, #4
25094     F2 00 02 FB | 	rdlong	_var01, objptr
25098     02 00 66 F0 | 	shl	_var01, #2
2509c     04 00 66 F0 | 	shl	_var01, #4
250a0     00 03 02 F1 | 	add	_var02, _var01
250a4     90 E5 05 F1 | 	add	objptr, #400
250a8     F2 02 62 FC | 	wrlong	_var02, objptr
250ac     ED E5 85 F1 | 	sub	objptr, #493
250b0                 | ' displaylist[1]:=buf_ptr<<4+%10  
250b0     F2 02 02 FB | 	rdlong	_var02, objptr
250b4     04 02 66 F0 | 	shl	_var02, #4
250b8     02 02 06 F1 | 	add	_var02, #2
250bc     F1 E5 05 F1 | 	add	objptr, #497
250c0     F2 02 62 FC | 	wrlong	_var02, objptr
250c4                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
250c4     04 E4 85 F1 | 	sub	objptr, #4
250c8     F2 02 02 F6 | 	mov	_var02, objptr
250cc     CD E5 85 F1 | 	sub	objptr, #461
250d0     F2 02 62 FC | 	wrlong	_var02, objptr
250d4     20 E4 85 F1 | 	sub	objptr, #32
250d8                 | _hg010b_spin2_makedl_ret
250d8     2D 00 64 FD | 	ret
250dc                 | 
250dc                 | ' 
250dc                 | ' 
250dc                 | ' '****************************************************************************************************************
250dc                 | ' '                                                                        					*
250dc                 | ' '  Graphic primitives                                                    					*
250dc                 | ' '                                                                        					*
250dc                 | ' '****************************************************************************************************************
250dc                 | ' 
250dc                 | ' pub setspriteptr(num,ptr)
250dc                 | _hg010b_spin2_setspriteptr
250dc                 | ' long[@spr1ptr+12*num]:=ptr
250dc     11 E5 05 F1 | 	add	objptr, #273
250e0     F2 00 02 F6 | 	mov	_var01, objptr
250e4     09 03 02 F6 | 	mov	_var02, arg01
250e8     01 02 66 F0 | 	shl	_var02, #1
250ec     09 03 02 F1 | 	add	_var02, arg01
250f0     02 02 66 F0 | 	shl	_var02, #2
250f4     01 01 02 F1 | 	add	_var01, _var02
250f8     00 15 62 FC | 	wrlong	arg02, _var01
250fc     11 E5 85 F1 | 	sub	objptr, #273
25100                 | _hg010b_spin2_setspriteptr_ret
25100     2D 00 64 FD | 	ret
25104                 | 
25104                 | ' 
25104                 | ' pub setspritepos(num,x,y)
25104                 | _hg010b_spin2_setspritepos
25104                 | ' if y>601
25104     01 00 00 FF 
25108     5A 16 56 F2 | 	cmps	arg03, ##602 wc
2510c                 | '   y:=601
2510c     01 00 00 3F 
25110     59 16 06 36 |  if_ae	mov	arg03, ##601
25114                 | ' if x>1024
25114     02 00 00 FF 
25118     01 14 56 F2 | 	cmps	arg02, ##1025 wc
2511c                 | '   x:=1024
2511c     0A 14 C6 39 |  if_ae	decod	arg02, #10
25120                 | ' word[@spr1ptr+12*num+4]:=x
25120     11 E5 05 F1 | 	add	objptr, #273
25124     F2 00 02 F6 | 	mov	_var01, objptr
25128     09 03 02 F6 | 	mov	_var02, arg01
2512c     01 02 66 F0 | 	shl	_var02, #1
25130     09 03 02 F1 | 	add	_var02, arg01
25134     02 02 66 F0 | 	shl	_var02, #2
25138     01 01 02 F1 | 	add	_var01, _var02
2513c     04 00 06 F1 | 	add	_var01, #4
25140     00 15 52 FC | 	wrword	arg02, _var01
25144                 | ' word[@spr1ptr+12*num+6]:=y
25144     F2 00 02 F6 | 	mov	_var01, objptr
25148     09 03 02 F6 | 	mov	_var02, arg01
2514c     01 02 66 F0 | 	shl	_var02, #1
25150     09 03 02 F1 | 	add	_var02, arg01
25154     02 02 66 F0 | 	shl	_var02, #2
25158     01 01 02 F1 | 	add	_var01, _var02
2515c     06 00 06 F1 | 	add	_var01, #6
25160     00 17 52 FC | 	wrword	arg03, _var01
25164     11 E5 85 F1 | 	sub	objptr, #273
25168                 | _hg010b_spin2_setspritepos_ret
25168     2D 00 64 FD | 	ret
2516c                 | 
2516c                 | ' 
2516c                 | ' pub setspritesize(num,w,h)
2516c                 | _hg010b_spin2_setspritesize
2516c                 | ' word[@spr1ptr+12*num+8]:=w
2516c     11 E5 05 F1 | 	add	objptr, #273
25170     F2 00 02 F6 | 	mov	_var01, objptr
25174     09 03 02 F6 | 	mov	_var02, arg01
25178     01 02 66 F0 | 	shl	_var02, #1
2517c     09 03 02 F1 | 	add	_var02, arg01
25180     02 02 66 F0 | 	shl	_var02, #2
25184     01 01 02 F1 | 	add	_var01, _var02
25188     08 00 06 F1 | 	add	_var01, #8
2518c     00 15 52 FC | 	wrword	arg02, _var01
25190                 | ' word[@spr1ptr+12*num+10]:=h
25190     F2 00 02 F6 | 	mov	_var01, objptr
25194     09 03 02 F6 | 	mov	_var02, arg01
25198     01 02 66 F0 | 	shl	_var02, #1
2519c     09 03 02 F1 | 	add	_var02, arg01
251a0     02 02 66 F0 | 	shl	_var02, #2
251a4     01 01 02 F1 | 	add	_var01, _var02
251a8     0A 00 06 F1 | 	add	_var01, #10
251ac     00 17 52 FC | 	wrword	arg03, _var01
251b0     11 E5 85 F1 | 	sub	objptr, #273
251b4                 | _hg010b_spin2_setspritesize_ret
251b4     2D 00 64 FD | 	ret
251b8                 | 
251b8                 | ' 
251b8                 | ' 
251b8                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
251b8                 | ' 
251b8                 | ' 
251b8                 | ' pub putpixel(x,y,c)
251b8                 | _hg010b_spin2_putpixel
251b8     04 4A 05 F6 | 	mov	COUNT_, #4
251bc     A8 00 A0 FD | 	call	#pushregs_
251c0     09 27 02 F6 | 	mov	local01, arg01
251c4                 | ' 
251c4                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
251c4     00 28 06 F6 | 	mov	local02, #0
251c8     00 26 56 F2 | 	cmps	local01, #0 wc
251cc     01 28 66 36 |  if_ae	neg	local02, #1
251d0     E9 E4 05 F1 | 	add	objptr, #233
251d4     F2 1A 02 FB | 	rdlong	arg05, objptr
251d8     02 1A 66 F0 | 	shl	arg05, #2
251dc     0D 27 52 F2 | 	cmps	local01, arg05 wc
251e0     15 2B A2 F1 | 	subx	local03, local03
251e4     15 29 02 F5 | 	and	local02, local03
251e8     00 2A 06 F6 | 	mov	local03, #0
251ec     00 14 56 F2 | 	cmps	arg02, #0 wc
251f0     01 2A 66 36 |  if_ae	neg	local03, #1
251f4     15 29 02 F5 | 	and	local02, local03
251f8     04 E4 85 F1 | 	sub	objptr, #4
251fc     F2 2A 02 FB | 	rdlong	local03, objptr
25200     E5 E4 85 F1 | 	sub	objptr, #229
25204     15 15 52 F2 | 	cmps	arg02, local03 wc
25208     16 2D A2 F1 | 	subx	local04, local04
2520c     16 29 CA F7 | 	test	local02, local04 wz
25210     48 00 90 AD |  if_e	jmp	#LR__2840
25214     DD E4 05 F1 | 	add	objptr, #221
25218     F2 12 02 FB | 	rdlong	arg01, objptr
2521c     14 E4 05 F1 | 	add	objptr, #20
25220     F2 2C 02 FB | 	rdlong	local04, objptr
25224     02 2C 66 F0 | 	shl	local04, #2
25228     0A 2D 02 FD | 	qmul	local04, arg02
2522c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
2522c     0B 15 02 F6 | 	mov	arg02, arg03
25230     01 16 06 F6 | 	mov	arg03, #1
25234     00 18 06 F6 | 	mov	arg04, #0
25238     01 1A 06 F6 | 	mov	arg05, #1
2523c     0A 00 00 FF 
25240     DB E5 05 F1 | 	add	objptr, ##5595
25244     18 2C 62 FD | 	getqx	local04
25248     13 2D 02 F1 | 	add	local04, local01
2524c     16 13 02 F1 | 	add	arg01, local04
25250     9C 1D B0 FD | 	call	#_psram_spin2_fill
25254     0B 00 00 FF 
25258     CC E4 85 F1 | 	sub	objptr, ##5836
2525c                 | LR__2840
2525c     A7 F0 03 F6 | 	mov	ptra, fp
25260     B2 00 A0 FD | 	call	#popregs_
25264                 | _hg010b_spin2_putpixel_ret
25264     2D 00 64 FD | 	ret
25268                 | 
25268                 | ' 
25268                 | ' pub putpixel2(x,y,c)
25268                 | _hg010b_spin2_putpixel2
25268     02 4A 05 F6 | 	mov	COUNT_, #2
2526c     A8 00 A0 FD | 	call	#pushregs_
25270     DD E4 05 F1 | 	add	objptr, #221
25274     F2 26 02 FB | 	rdlong	local01, objptr
25278     14 E4 05 F1 | 	add	objptr, #20
2527c     F2 1A 02 FB | 	rdlong	arg05, objptr
25280     02 1A 66 F0 | 	shl	arg05, #2
25284     0A 1B 02 FD | 	qmul	arg05, arg02
25288                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
25288     0B 15 02 F6 | 	mov	arg02, arg03
2528c     01 16 06 F6 | 	mov	arg03, #1
25290     00 18 06 F6 | 	mov	arg04, #0
25294     01 1A 06 F6 | 	mov	arg05, #1
25298     0A 00 00 FF 
2529c     DB E5 05 F1 | 	add	objptr, ##5595
252a0     18 28 62 FD | 	getqx	local02
252a4     09 29 02 F1 | 	add	local02, arg01
252a8     14 27 02 F1 | 	add	local01, local02
252ac     13 13 02 F6 | 	mov	arg01, local01
252b0     3C 1D B0 FD | 	call	#_psram_spin2_fill
252b4     0B 00 00 FF 
252b8     CC E4 85 F1 | 	sub	objptr, ##5836
252bc     A7 F0 03 F6 | 	mov	ptra, fp
252c0     B2 00 A0 FD | 	call	#popregs_
252c4                 | _hg010b_spin2_putpixel2_ret
252c4     2D 00 64 FD | 	ret
252c8                 | 
252c8                 | ' 
252c8                 | ' pub getpixel2(x,y): c 
252c8                 | _hg010b_spin2_getpixel2
252c8     02 4A 05 F6 | 	mov	COUNT_, #2
252cc     A8 00 A0 FD | 	call	#pushregs_
252d0     0C F0 07 F1 | 	add	ptra, #12
252d4     04 4E 05 F1 | 	add	fp, #4
252d8     A7 12 62 FC | 	wrlong	arg01, fp
252dc     04 4E 05 F1 | 	add	fp, #4
252e0     A7 14 62 FC | 	wrlong	arg02, fp
252e4     08 4E 85 F1 | 	sub	fp, #8
252e8     A7 00 68 FC | 	wrlong	#0, fp
252ec     A7 12 02 F6 | 	mov	arg01, fp
252f0     DD E4 05 F1 | 	add	objptr, #221
252f4     F2 14 02 FB | 	rdlong	arg02, objptr
252f8     14 E4 05 F1 | 	add	objptr, #20
252fc     F2 16 02 FB | 	rdlong	arg03, objptr
25300     02 16 66 F0 | 	shl	arg03, #2
25304     08 4E 05 F1 | 	add	fp, #8
25308     A7 FA 01 FB | 	rdlong	result1, fp
2530c     FD 16 02 FD | 	qmul	arg03, result1
25310                 | ' 
25310                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
25310     04 4E 85 F1 | 	sub	fp, #4
25314     A7 26 02 FB | 	rdlong	local01, fp
25318     04 4E 85 F1 | 	sub	fp, #4
2531c     01 16 06 F6 | 	mov	arg03, #1
25320     0A 00 00 FF 
25324     DB E5 05 F1 | 	add	objptr, ##5595
25328     18 28 62 FD | 	getqx	local02
2532c     13 29 02 F1 | 	add	local02, local01
25330     14 15 02 F1 | 	add	arg02, local02
25334     80 1B B0 FD | 	call	#_psram_spin2_read1
25338     0B 00 00 FF 
2533c     CC E4 85 F1 | 	sub	objptr, ##5836
25340                 | ' return c
25340     A7 FA 01 FB | 	rdlong	result1, fp
25344     A7 F0 03 F6 | 	mov	ptra, fp
25348     B2 00 A0 FD | 	call	#popregs_
2534c                 | _hg010b_spin2_getpixel2_ret
2534c     2D 00 64 FD | 	ret
25350                 | 
25350                 | '   
25350                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
25350                 | ' 
25350                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
25350                 | _hg010b_spin2_fastline
25350     02 4A 05 F6 | 	mov	COUNT_, #2
25354     A8 00 A0 FD | 	call	#pushregs_
25358     09 27 02 F6 | 	mov	local01, arg01
2535c     0A 29 02 F6 | 	mov	local02, arg02
25360                 | ' 
25360                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
25360     00 16 56 F2 | 	cmps	arg03, #0 wc
25364     F4 00 90 CD |  if_b	jmp	#LR__2850
25368     01 00 00 FF 
2536c     2A E4 05 F1 | 	add	objptr, ##554
25370     F2 1A 02 FB | 	rdlong	arg05, objptr
25374     01 00 00 FF 
25378     2A E4 85 F1 | 	sub	objptr, ##554
2537c     0D 17 52 F2 | 	cmps	arg03, arg05 wc
25380     D8 00 90 3D |  if_ae	jmp	#LR__2850
25384     00 26 56 F2 | 	cmps	local01, #0 wc
25388     00 28 56 C2 |  if_b	cmps	local02, #0 wc
2538c     CC 00 90 CD |  if_b	jmp	#LR__2850
25390     01 00 00 FF 
25394     26 E4 05 F1 | 	add	objptr, ##550
25398     F2 1A 02 FB | 	rdlong	arg05, objptr
2539c     01 00 00 FF 
253a0     26 E4 85 F1 | 	sub	objptr, ##550
253a4     0D 27 5A F2 | 	cmps	local01, arg05 wcz
253a8     01 00 00 1F 
253ac     26 E4 05 11 |  if_a	add	objptr, ##550
253b0     F2 12 02 1B |  if_a	rdlong	arg01, objptr
253b4     01 00 00 1F 
253b8     26 E4 85 11 |  if_a	sub	objptr, ##550
253bc     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
253c0                 | '   return
253c0     98 00 90 1D |  if_a	jmp	#LR__2850
253c4     14 27 5A F2 | 	cmps	local01, local02 wcz
253c8     13 1B 02 16 |  if_a	mov	arg05, local01
253cc     14 27 02 16 |  if_a	mov	local01, local02
253d0     0D 29 02 16 |  if_a	mov	local02, arg05
253d4     00 26 56 F2 | 	cmps	local01, #0 wc
253d8     00 26 06 C6 |  if_b	mov	local01, #0
253dc     01 00 00 FF 
253e0     26 E4 05 F1 | 	add	objptr, ##550
253e4     F2 1A 02 FB | 	rdlong	arg05, objptr
253e8     01 00 00 FF 
253ec     26 E4 85 F1 | 	sub	objptr, ##550
253f0     0D 29 52 F2 | 	cmps	local02, arg05 wc
253f4     01 00 00 3F 
253f8     26 E4 05 31 |  if_ae	add	objptr, ##550
253fc     F2 28 02 3B |  if_ae	rdlong	local02, objptr
25400     01 00 00 3F 
25404     26 E4 85 31 |  if_ae	sub	objptr, ##550
25408     DD E4 05 F1 | 	add	objptr, #221
2540c     F2 12 02 FB | 	rdlong	arg01, objptr
25410     14 E4 05 F1 | 	add	objptr, #20
25414     F2 1A 02 FB | 	rdlong	arg05, objptr
25418     02 1A 66 F0 | 	shl	arg05, #2
2541c     0B 1B 02 FD | 	qmul	arg05, arg03
25420                 | ' if x1>x2
25420                 | '   x1,x2:=x2,x1
25420                 | ' if x1<0 
25420                 | '   x1:=0
25420                 | ' if x2>=xres
25420                 | '   x2:=xres-1  
25420     01 28 86 31 |  if_ae	sub	local02, #1
25424                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
25424     01 16 06 F6 | 	mov	arg03, #1
25428     14 17 02 F1 | 	add	arg03, local02
2542c     13 17 82 F1 | 	sub	arg03, local01
25430     0C 15 02 F6 | 	mov	arg02, arg04
25434     00 18 06 F6 | 	mov	arg04, #0
25438     01 1A 06 F6 | 	mov	arg05, #1
2543c     0A 00 00 FF 
25440     DB E5 05 F1 | 	add	objptr, ##5595
25444     18 28 62 FD | 	getqx	local02
25448     13 29 02 F1 | 	add	local02, local01
2544c     14 13 02 F1 | 	add	arg01, local02
25450     9C 1B B0 FD | 	call	#_psram_spin2_fill
25454     0B 00 00 FF 
25458     CC E4 85 F1 | 	sub	objptr, ##5836
2545c                 | LR__2850
2545c     A7 F0 03 F6 | 	mov	ptra, fp
25460     B2 00 A0 FD | 	call	#popregs_
25464                 | _hg010b_spin2_fastline_ret
25464     2D 00 64 FD | 	ret
25468                 | 
25468                 | ' 
25468                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
25468                 | _hg010b_spin2_draw
25468     0E 4A 05 F6 | 	mov	COUNT_, #14
2546c     A8 00 A0 FD | 	call	#pushregs_
25470     09 27 02 F6 | 	mov	local01, arg01
25474     0A 29 02 F6 | 	mov	local02, arg02
25478     0B 2B 02 F6 | 	mov	local03, arg03
2547c     0C 2D 02 F6 | 	mov	local04, arg04
25480     0D 2F 02 F6 | 	mov	local05, arg05
25484                 | ' 
25484                 | ' if (y1==y2)
25484     16 29 0A F2 | 	cmp	local02, local04 wz
25488     18 00 90 5D |  if_ne	jmp	#LR__2860
2548c                 | '   fastline(x1,x2,y1,c)
2548c     13 13 02 F6 | 	mov	arg01, local01
25490     15 15 02 F6 | 	mov	arg02, local03
25494     14 17 02 F6 | 	mov	arg03, local02
25498     17 19 02 F6 | 	mov	arg04, local05
2549c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
254a0     F8 00 90 FD | 	jmp	#LR__2866
254a4                 | LR__2860
254a4                 | ' else  
254a4                 | '   x:=x1
254a4     13 31 02 F6 | 	mov	local06, local01
254a8                 | '   y:=y1
254a8     14 33 02 F6 | 	mov	local07, local02
254ac                 | ' 
254ac                 | '   if (x1<x2) 
254ac     15 27 52 F2 | 	cmps	local01, local03 wc
254b0                 | '     xi:=1
254b0     01 34 06 C6 |  if_b	mov	local08, #1
254b4                 | '     dx:=x2-x1
254b4     15 37 02 C6 |  if_b	mov	local09, local03
254b8     13 37 82 C1 |  if_b	sub	local09, local01
254bc                 | '   else
254bc                 | '     xi:=-1
254bc     01 34 66 36 |  if_ae	neg	local08, #1
254c0                 | '     dx:=x1-x2
254c0     15 27 82 31 |  if_ae	sub	local01, local03
254c4     13 37 02 36 |  if_ae	mov	local09, local01
254c8                 | '   
254c8                 | '   if (y1<y2) 
254c8     16 29 52 F2 | 	cmps	local02, local04 wc
254cc                 | '     yi:=1
254cc     01 38 06 C6 |  if_b	mov	local10, #1
254d0                 | '     dy:=y2-y1
254d0     16 3B 02 C6 |  if_b	mov	local11, local04
254d4     14 3B 82 C1 |  if_b	sub	local11, local02
254d8                 | '   else
254d8                 | '     yi:=-1
254d8     01 38 66 36 |  if_ae	neg	local10, #1
254dc                 | '     dy:=y1-y2
254dc     16 29 82 31 |  if_ae	sub	local02, local04
254e0     14 3B 02 36 |  if_ae	mov	local11, local02
254e4                 | ' 
254e4                 | '   putpixel(x,y,c)
254e4     17 17 02 F6 | 	mov	arg03, local05
254e8     18 13 02 F6 | 	mov	arg01, local06
254ec     19 15 02 F6 | 	mov	arg02, local07
254f0     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
254f4                 | ' 
254f4                 | '   if (dx>dy)
254f4     1D 37 5A F2 | 	cmps	local09, local11 wcz
254f8     50 00 90 ED |  if_be	jmp	#LR__2862
254fc                 | '     ai:=(dy-dx)*2
254fc     1D 3D 02 F6 | 	mov	local12, local11
25500     1B 3D 82 F1 | 	sub	local12, local09
25504     01 3C 66 F0 | 	shl	local12, #1
25508                 | '     bi:=dy*2
25508     01 3A 66 F0 | 	shl	local11, #1
2550c     1D 3F 02 F6 | 	mov	local13, local11
25510                 | '     d:= bi-dx
25510     1F 41 02 F6 | 	mov	local14, local13
25514     1B 41 82 F1 | 	sub	local14, local09
25518                 | '     repeat while (x<>x2) 
25518                 | LR__2861
25518     15 31 0A F2 | 	cmp	local06, local03 wz
2551c     7C 00 90 AD |  if_e	jmp	#LR__2865
25520                 | '       if (d>=0) 
25520     00 40 56 F2 | 	cmps	local14, #0 wc
25524                 | '         x+=xi
25524     1A 31 02 31 |  if_ae	add	local06, local08
25528                 | '         y+=yi
25528     1C 33 02 31 |  if_ae	add	local07, local10
2552c                 | '         d+=ai
2552c     1E 41 02 31 |  if_ae	add	local14, local12
25530                 | '       else
25530                 | '         d+=bi
25530     1F 41 02 C1 |  if_b	add	local14, local13
25534                 | '         x+=xi
25534     1A 31 02 C1 |  if_b	add	local06, local08
25538                 | '       putpixel(x,y,c)
25538     18 13 02 F6 | 	mov	arg01, local06
2553c     19 15 02 F6 | 	mov	arg02, local07
25540     17 17 02 F6 | 	mov	arg03, local05
25544     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
25548     CC FF 9F FD | 	jmp	#LR__2861
2554c                 | LR__2862
2554c                 | '   else
2554c                 | '     ai:=(dx-dy)*2
2554c     1B 3D 02 F6 | 	mov	local12, local09
25550     1D 3D 82 F1 | 	sub	local12, local11
25554     01 3C 66 F0 | 	shl	local12, #1
25558                 | '     bi:=dx*2
25558     01 36 66 F0 | 	shl	local09, #1
2555c     1B 3F 02 F6 | 	mov	local13, local09
25560                 | '     d:=bi-dy
25560     1F 41 02 F6 | 	mov	local14, local13
25564     1D 41 82 F1 | 	sub	local14, local11
25568                 | '     repeat while (y<>y2)
25568                 | LR__2863
25568     16 33 0A F2 | 	cmp	local07, local04 wz
2556c     2C 00 90 AD |  if_e	jmp	#LR__2864
25570                 | '       if (d>=0)
25570     00 40 56 F2 | 	cmps	local14, #0 wc
25574                 | '         x+=xi
25574     1A 31 02 31 |  if_ae	add	local06, local08
25578                 | '         y+=yi
25578     1C 33 02 31 |  if_ae	add	local07, local10
2557c                 | '         d+=ai
2557c     1E 41 02 31 |  if_ae	add	local14, local12
25580                 | '       else
25580                 | '         d+=bi
25580     1F 41 02 C1 |  if_b	add	local14, local13
25584                 | '         y+=yi
25584     1C 33 02 C1 |  if_b	add	local07, local10
25588                 | '       putpixel(x, y,c)
25588     18 13 02 F6 | 	mov	arg01, local06
2558c     19 15 02 F6 | 	mov	arg02, local07
25590     17 17 02 F6 | 	mov	arg03, local05
25594     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
25598     CC FF 9F FD | 	jmp	#LR__2863
2559c                 | LR__2864
2559c                 | LR__2865
2559c                 | LR__2866
2559c     A7 F0 03 F6 | 	mov	ptra, fp
255a0     B2 00 A0 FD | 	call	#popregs_
255a4                 | _hg010b_spin2_draw_ret
255a4     2D 00 64 FD | 	ret
255a8                 | 
255a8                 | '  
255a8                 | ' pub fillpush(val) 
255a8                 | _hg010b_spin2_fillpush
255a8                 | ' fillstack[fillptr]:=val
255a8     0B 00 00 FF 
255ac     BA E4 05 F1 | 	add	objptr, ##5818
255b0     F2 00 02 FB | 	rdlong	_var01, objptr
255b4     02 00 66 F0 | 	shl	_var01, #2
255b8     0A 00 00 FF 
255bc     00 E4 85 F1 | 	sub	objptr, ##5120
255c0     F2 00 02 F1 | 	add	_var01, objptr
255c4     00 13 62 FC | 	wrlong	arg01, _var01
255c8                 | ' fillptr+=1   
255c8     0A 00 00 FF 
255cc     00 E4 05 F1 | 	add	objptr, ##5120
255d0     F2 00 02 FB | 	rdlong	_var01, objptr
255d4     01 00 06 F1 | 	add	_var01, #1
255d8     F2 00 62 FC | 	wrlong	_var01, objptr
255dc     0B 00 00 FF 
255e0     BA E4 85 F1 | 	sub	objptr, ##5818
255e4                 | _hg010b_spin2_fillpush_ret
255e4     2D 00 64 FD | 	ret
255e8                 | 
255e8                 | ' 
255e8                 | '     
255e8                 | ' pub fillpop() : val
255e8                 | _hg010b_spin2_fillpop
255e8                 | ' 
255e8                 | ' fillptr-=1
255e8     0B 00 00 FF 
255ec     BA E4 05 F1 | 	add	objptr, ##5818
255f0     F2 FA 01 FB | 	rdlong	result1, objptr
255f4     01 FA 85 F1 | 	sub	result1, #1
255f8     F2 FA 61 FC | 	wrlong	result1, objptr
255fc                 | ' if fillptr<0
255fc     0B 00 00 FF 
25600     BA E4 85 F1 | 	sub	objptr, ##5818
25604     00 FA 55 F2 | 	cmps	result1, #0 wc
25608                 | '   fillptr:=0
25608     0B 00 00 CF 
2560c     BA E4 05 C1 |  if_b	add	objptr, ##5818
25610     F2 00 68 CC |  if_b	wrlong	#0, objptr
25614     0B 00 00 CF 
25618     BA E4 85 C1 |  if_b	sub	objptr, ##5818
2561c                 | '   val:=-12345
2561c     E7 FF 7F CF 
25620     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
25624     28 00 90 CD |  if_b	jmp	#LR__2870
25628                 | ' else 
25628                 | '   val:=fillstack[fillptr]
25628     0B 00 00 FF 
2562c     BA E4 05 F1 | 	add	objptr, ##5818
25630     F2 00 02 FB | 	rdlong	_var01, objptr
25634     02 00 66 F0 | 	shl	_var01, #2
25638     0A 00 00 FF 
2563c     00 E4 85 F1 | 	sub	objptr, ##5120
25640     F2 00 02 F1 | 	add	_var01, objptr
25644     00 01 02 FB | 	rdlong	_var01, _var01
25648     01 00 00 FF 
2564c     BA E4 85 F1 | 	sub	objptr, ##698
25650                 | LR__2870
25650                 | ' return val
25650     00 FB 01 F6 | 	mov	result1, _var01
25654                 | _hg010b_spin2_fillpop_ret
25654     2D 00 64 FD | 	ret
25658                 | 
25658                 | ' 
25658                 | '       
25658                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
25658                 | _hg010b_spin2_fill
25658     0B 4A 05 F6 | 	mov	COUNT_, #11
2565c     A8 00 A0 FD | 	call	#pushregs_
25660                 | ' 
25660                 | ' newcolor:=newcolor & 255
25660     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
25664                 | ' oldcolor:=oldcolor & 255
25664     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
25668                 | ' 
25668                 | ' if (oldcolor == newcolor) 
25668     13 29 0A F2 | 	cmp	local02, local01 wz
2566c                 | '   return
2566c     70 02 90 AD |  if_e	jmp	#LR__2889
25670                 | ' 
25670                 | ' fillptr:=0
25670     0B 00 00 FF 
25674     BA E4 05 F1 | 	add	objptr, ##5818
25678     F2 00 68 FC | 	wrlong	#0, objptr
2567c                 | ' fillmax:=0
2567c     04 E4 05 F1 | 	add	objptr, #4
25680     F2 00 68 FC | 	wrlong	#0, objptr
25684     0B 00 00 FF 
25688     BE E4 85 F1 | 	sub	objptr, ##5822
2568c                 | ' fillpush(x)
2568c     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
25690                 | ' fillpush(y)
25690     0A 13 02 F6 | 	mov	arg01, arg02
25694     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
25698                 | ' y:=fillpop()
25698     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
2569c     FD 2A 02 F6 | 	mov	local03, result1
256a0                 | ' x:=fillpop()
256a0     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
256a4     FD 2C 02 F6 | 	mov	local04, result1
256a8                 | ' 'pinhigh(38)
256a8                 | ' repeat while (x>-1)       
256a8                 | LR__2880
256a8     00 2C 56 F2 | 	cmps	local04, #0 wc
256ac     30 02 90 CD |  if_b	jmp	#LR__2888
256b0                 | '  ' pintoggle(39)
256b0                 | '   x1 := x
256b0     16 2F 02 F6 | 	mov	local05, local04
256b4                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
256b4                 | LR__2881
256b4     00 30 06 F6 | 	mov	local06, #0
256b8     00 32 06 F6 | 	mov	local07, #0
256bc     00 2E 56 F2 | 	cmps	local05, #0 wc
256c0     01 32 66 36 |  if_ae	neg	local07, #1
256c4     00 32 0E F2 | 	cmp	local07, #0 wz
256c8     00 30 26 56 |  if_ne	not	local06, #0
256cc     00 34 06 F6 | 	mov	local08, #0
256d0     00 36 06 F6 | 	mov	local09, #0
256d4     15 15 02 F6 | 	mov	arg02, local03
256d8     17 13 02 F6 | 	mov	arg01, local05
256dc     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
256e0     14 FB 09 F2 | 	cmp	result1, local02 wz
256e4     00 36 26 A6 |  if_e	not	local09, #0
256e8     00 36 0E F2 | 	cmp	local09, #0 wz
256ec     00 34 26 56 |  if_ne	not	local08, #0
256f0     1A 31 CA F7 | 	test	local06, local08 wz
256f4                 | '     x1--
256f4     01 2E 86 51 |  if_ne	sub	local05, #1
256f8     B8 FF 9F 5D |  if_ne	jmp	#LR__2881
256fc                 | '   x1++
256fc     01 2E 06 F1 | 	add	local05, #1
25700                 | '   spanabove := 0
25700     00 38 06 F6 | 	mov	local10, #0
25704                 | '   spanbelow := 0
25704     00 3A 06 F6 | 	mov	local11, #0
25708                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
25708                 | LR__2882
25708     00 30 06 F6 | 	mov	local06, #0
2570c     02 00 00 FF 
25710     00 2E 56 F2 | 	cmps	local05, ##1024 wc
25714     00 30 26 C6 |  if_b	not	local06, #0
25718     00 34 06 F6 | 	mov	local08, #0
2571c     00 36 06 F6 | 	mov	local09, #0
25720     15 15 02 F6 | 	mov	arg02, local03
25724     17 13 02 F6 | 	mov	arg01, local05
25728     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
2572c     14 FB 09 F2 | 	cmp	result1, local02 wz
25730     00 36 26 A6 |  if_e	not	local09, #0
25734     00 36 0E F2 | 	cmp	local09, #0 wz
25738     00 34 26 56 |  if_ne	not	local08, #0
2573c     1A 31 CA F7 | 	test	local06, local08 wz
25740     88 01 90 AD |  if_e	jmp	#LR__2887
25744                 | '     putpixel2 (x1,y, newcolor & 255)
25744     13 17 E2 F8 | 	getbyte	arg03, local01, #0
25748     17 13 02 F6 | 	mov	arg01, local05
2574c     15 15 02 F6 | 	mov	arg02, local03
25750     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
25754                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
25754     00 30 06 F6 | 	mov	local06, #0
25758     00 32 06 F6 | 	mov	local07, #0
2575c     00 38 0E F2 | 	cmp	local10, #0 wz
25760     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
25764     01 32 66 26 |  if_nc_and_z	neg	local07, #1
25768     00 32 0E F2 | 	cmp	local07, #0 wz
2576c     00 30 26 56 |  if_ne	not	local06, #0
25770     00 34 06 F6 | 	mov	local08, #0
25774     00 36 06 F6 | 	mov	local09, #0
25778     15 15 02 F6 | 	mov	arg02, local03
2577c     01 14 86 F1 | 	sub	arg02, #1
25780     17 13 02 F6 | 	mov	arg01, local05
25784     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
25788     14 FB 09 F2 | 	cmp	result1, local02 wz
2578c     00 36 26 A6 |  if_e	not	local09, #0
25790     00 36 0E F2 | 	cmp	local09, #0 wz
25794     00 34 26 56 |  if_ne	not	local08, #0
25798     1A 31 CA F7 | 	test	local06, local08 wz
2579c     1C 00 90 AD |  if_e	jmp	#LR__2883
257a0                 | '       fillpush(x1)
257a0     17 13 02 F6 | 	mov	arg01, local05
257a4     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
257a8                 | '       fillpush(y-1)
257a8     15 13 02 F6 | 	mov	arg01, local03
257ac     01 12 86 F1 | 	sub	arg01, #1
257b0     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
257b4                 | '       spanabove := 1 
257b4     01 38 06 F6 | 	mov	local10, #1
257b8     4C 00 90 FD | 	jmp	#LR__2884
257bc                 | LR__2883
257bc                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
257bc     00 30 06 F6 | 	mov	local06, #0
257c0     00 32 06 F6 | 	mov	local07, #0
257c4     00 38 0E F2 | 	cmp	local10, #0 wz
257c8     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
257cc     01 32 66 16 |  if_a	neg	local07, #1
257d0     00 32 0E F2 | 	cmp	local07, #0 wz
257d4     00 30 26 56 |  if_ne	not	local06, #0
257d8     00 34 06 F6 | 	mov	local08, #0
257dc     00 36 06 F6 | 	mov	local09, #0
257e0     15 15 02 F6 | 	mov	arg02, local03
257e4     01 14 86 F1 | 	sub	arg02, #1
257e8     17 13 02 F6 | 	mov	arg01, local05
257ec     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
257f0     14 FB 09 F2 | 	cmp	result1, local02 wz
257f4     00 36 26 56 |  if_ne	not	local09, #0
257f8     00 36 0E F2 | 	cmp	local09, #0 wz
257fc     00 34 26 56 |  if_ne	not	local08, #0
25800     1A 31 CA F7 | 	test	local06, local08 wz
25804                 | '       spanabove := 0 
25804     00 38 06 56 |  if_ne	mov	local10, #0
25808                 | LR__2884
25808                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
25808     00 30 06 F6 | 	mov	local06, #0
2580c     00 32 06 F6 | 	mov	local07, #0
25810     00 3A 0E F2 | 	cmp	local11, #0 wz
25814     01 00 00 AF 
25818     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
2581c     01 32 66 86 |  if_c_and_z	neg	local07, #1
25820     00 32 0E F2 | 	cmp	local07, #0 wz
25824     00 30 26 56 |  if_ne	not	local06, #0
25828     00 34 06 F6 | 	mov	local08, #0
2582c     00 36 06 F6 | 	mov	local09, #0
25830     15 15 02 F6 | 	mov	arg02, local03
25834     01 14 06 F1 | 	add	arg02, #1
25838     17 13 02 F6 | 	mov	arg01, local05
2583c     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
25840     14 FB 09 F2 | 	cmp	result1, local02 wz
25844     00 36 26 A6 |  if_e	not	local09, #0
25848     00 36 0E F2 | 	cmp	local09, #0 wz
2584c     00 34 26 56 |  if_ne	not	local08, #0
25850     1A 31 CA F7 | 	test	local06, local08 wz
25854     1C 00 90 AD |  if_e	jmp	#LR__2885
25858                 | '       fillpush(x1)
25858     17 13 02 F6 | 	mov	arg01, local05
2585c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
25860                 | '       fillpush(y + 1)
25860     15 13 02 F6 | 	mov	arg01, local03
25864     01 12 06 F1 | 	add	arg01, #1
25868     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
2586c                 | '       spanBelow := 1
2586c     01 3A 06 F6 | 	mov	local11, #1
25870     50 00 90 FD | 	jmp	#LR__2886
25874                 | LR__2885
25874                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
25874     00 30 06 F6 | 	mov	local06, #0
25878     00 32 06 F6 | 	mov	local07, #0
2587c     00 3A 0E F2 | 	cmp	local11, #0 wz
25880     01 00 00 5F 
25884     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
25888     01 32 66 46 |  if_c_and_nz	neg	local07, #1
2588c     00 32 0E F2 | 	cmp	local07, #0 wz
25890     00 30 26 56 |  if_ne	not	local06, #0
25894     00 34 06 F6 | 	mov	local08, #0
25898     00 36 06 F6 | 	mov	local09, #0
2589c     15 15 02 F6 | 	mov	arg02, local03
258a0     01 14 06 F1 | 	add	arg02, #1
258a4     17 13 02 F6 | 	mov	arg01, local05
258a8     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
258ac     14 FB 09 F2 | 	cmp	result1, local02 wz
258b0     00 36 26 56 |  if_ne	not	local09, #0
258b4     00 36 0E F2 | 	cmp	local09, #0 wz
258b8     00 34 26 56 |  if_ne	not	local08, #0
258bc     1A 31 CA F7 | 	test	local06, local08 wz
258c0                 | '       spanbelow := 0
258c0     00 3A 06 56 |  if_ne	mov	local11, #0
258c4                 | LR__2886
258c4                 | '     x1++
258c4     01 2E 06 F1 | 	add	local05, #1
258c8     3C FE 9F FD | 	jmp	#LR__2882
258cc                 | LR__2887
258cc                 | '   y:=fillpop()
258cc     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
258d0     FD 2A 02 F6 | 	mov	local03, result1
258d4                 | '   x:=fillpop()
258d4     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
258d8     FD 2C 02 F6 | 	mov	local04, result1
258dc     C8 FD 9F FD | 	jmp	#LR__2880
258e0                 | LR__2888
258e0                 | LR__2889
258e0     A7 F0 03 F6 | 	mov	ptra, fp
258e4     B2 00 A0 FD | 	call	#popregs_
258e8                 | _hg010b_spin2_fill_ret
258e8     2D 00 64 FD | 	ret
258ec                 | 
258ec                 | ' 'pinlow(38)    
258ec                 | ' 
258ec                 | ' '-- A filled circle -----------------------------------------------------
258ec                 | ' 
258ec                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
258ec                 | _hg010b_spin2_fcircle
258ec     08 4A 05 F6 | 	mov	COUNT_, #8
258f0     A8 00 A0 FD | 	call	#pushregs_
258f4     0B 27 02 F6 | 	mov	local01, arg03
258f8     FF FF 7F FF 
258fc     FE 27 06 FD | 	qmul	local01, ##-2
25900     09 29 02 F6 | 	mov	local02, arg01
25904     0A 2B 02 F6 | 	mov	local03, arg02
25908     0C 2D 02 F6 | 	mov	local04, arg04
2590c                 | ' 
2590c                 | ' d:=5-4*r
2590c     13 19 02 F6 | 	mov	arg04, local01
25910     02 18 66 F0 | 	shl	arg04, #2
25914     05 2E 06 F6 | 	mov	local05, #5
25918     0C 2F 82 F1 | 	sub	local05, arg04
2591c                 | ' x:=0
2591c     00 30 06 F6 | 	mov	local06, #0
25920                 | ' y:=r
25920                 | ' da:=(-2*r+5)*4
25920                 | ' db:=3*4
25920     0C 32 06 F6 | 	mov	local07, #12
25924                 | ' repeat while (x<=y) 
25924     18 34 62 FD | 	getqx	local08
25928     05 34 06 F1 | 	add	local08, #5
2592c     02 34 66 F0 | 	shl	local08, #2
25930                 | LR__2890
25930     13 31 5A F2 | 	cmps	local06, local01 wcz
25934     B4 00 90 1D |  if_a	jmp	#LR__2892
25938                 | '   fastline(x0-x,x0+x,y0-y,c)
25938     14 13 02 F6 | 	mov	arg01, local02
2593c     18 13 82 F1 | 	sub	arg01, local06
25940     14 15 02 F6 | 	mov	arg02, local02
25944     18 15 02 F1 | 	add	arg02, local06
25948     15 17 02 F6 | 	mov	arg03, local03
2594c     13 17 82 F1 | 	sub	arg03, local01
25950     16 19 02 F6 | 	mov	arg04, local04
25954     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
25958                 | '   fastline(x0-x,x0+x,y0+y,c)
25958     14 13 02 F6 | 	mov	arg01, local02
2595c     18 13 82 F1 | 	sub	arg01, local06
25960     14 15 02 F6 | 	mov	arg02, local02
25964     18 15 02 F1 | 	add	arg02, local06
25968     15 17 02 F6 | 	mov	arg03, local03
2596c     13 17 02 F1 | 	add	arg03, local01
25970     16 19 02 F6 | 	mov	arg04, local04
25974     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
25978                 | '   fastline(x0-y,x0+y,y0-x,c)
25978     14 13 02 F6 | 	mov	arg01, local02
2597c     13 13 82 F1 | 	sub	arg01, local01
25980     14 15 02 F6 | 	mov	arg02, local02
25984     13 15 02 F1 | 	add	arg02, local01
25988     15 17 02 F6 | 	mov	arg03, local03
2598c     18 17 82 F1 | 	sub	arg03, local06
25990     16 19 02 F6 | 	mov	arg04, local04
25994     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
25998                 | '   fastline(x0-y,x0+y,y0+x,c)
25998     14 13 02 F6 | 	mov	arg01, local02
2599c     13 13 82 F1 | 	sub	arg01, local01
259a0     14 15 02 F6 | 	mov	arg02, local02
259a4     13 15 02 F1 | 	add	arg02, local01
259a8     15 17 02 F6 | 	mov	arg03, local03
259ac     18 17 02 F1 | 	add	arg03, local06
259b0     16 19 02 F6 | 	mov	arg04, local04
259b4     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
259b8                 | '   if d>0 
259b8     01 2E 56 F2 | 	cmps	local05, #1 wc
259bc     18 00 90 CD |  if_b	jmp	#LR__2891
259c0                 | '     d+=da
259c0     1A 2F 02 F1 | 	add	local05, local08
259c4                 | '     y-=1
259c4     01 26 86 F1 | 	sub	local01, #1
259c8                 | '     x+=1
259c8     01 30 06 F1 | 	add	local06, #1
259cc                 | '     da+=4*4
259cc     10 34 06 F1 | 	add	local08, #16
259d0                 | '     db+=2*4
259d0     08 32 06 F1 | 	add	local07, #8
259d4     58 FF 9F FD | 	jmp	#LR__2890
259d8                 | LR__2891
259d8                 | '   else
259d8                 | '     d+=db
259d8     19 2F 02 F1 | 	add	local05, local07
259dc                 | '     x+=1
259dc     01 30 06 F1 | 	add	local06, #1
259e0                 | '     da+=2*4
259e0     08 34 06 F1 | 	add	local08, #8
259e4                 | '     db+=2*4
259e4     08 32 06 F1 | 	add	local07, #8
259e8     44 FF 9F FD | 	jmp	#LR__2890
259ec                 | LR__2892
259ec     A7 F0 03 F6 | 	mov	ptra, fp
259f0     B2 00 A0 FD | 	call	#popregs_
259f4                 | _hg010b_spin2_fcircle_ret
259f4     2D 00 64 FD | 	ret
259f8                 | 
259f8                 | '  
259f8                 | ' '-- A circle ------------------------------------------------------------ 
259f8                 | '  
259f8                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
259f8                 | _hg010b_spin2_circle
259f8     08 4A 05 F6 | 	mov	COUNT_, #8
259fc     A8 00 A0 FD | 	call	#pushregs_
25a00     0B 27 02 F6 | 	mov	local01, arg03
25a04     FF FF 7F FF 
25a08     FE 27 06 FD | 	qmul	local01, ##-2
25a0c     09 29 02 F6 | 	mov	local02, arg01
25a10     0A 2B 02 F6 | 	mov	local03, arg02
25a14     0C 2D 02 F6 | 	mov	local04, arg04
25a18                 | ' 
25a18                 | '  
25a18                 | ' d:=5-4*r
25a18     13 19 02 F6 | 	mov	arg04, local01
25a1c     02 18 66 F0 | 	shl	arg04, #2
25a20     05 2E 06 F6 | 	mov	local05, #5
25a24     0C 2F 82 F1 | 	sub	local05, arg04
25a28                 | ' x:=0
25a28     00 30 06 F6 | 	mov	local06, #0
25a2c                 | ' y:=r
25a2c                 | ' da:=(-2*r+5)*4
25a2c                 | ' db:=3*4
25a2c     0C 32 06 F6 | 	mov	local07, #12
25a30                 | ' repeat while (x<=y) 
25a30     18 34 62 FD | 	getqx	local08
25a34     05 34 06 F1 | 	add	local08, #5
25a38     02 34 66 F0 | 	shl	local08, #2
25a3c                 | LR__2900
25a3c     13 31 5A F2 | 	cmps	local06, local01 wcz
25a40     F4 00 90 1D |  if_a	jmp	#LR__2902
25a44                 | '   putpixel(x0-x,y0-y,c)
25a44     14 13 02 F6 | 	mov	arg01, local02
25a48     18 13 82 F1 | 	sub	arg01, local06
25a4c     15 15 02 F6 | 	mov	arg02, local03
25a50     13 15 82 F1 | 	sub	arg02, local01
25a54     16 17 02 F6 | 	mov	arg03, local04
25a58     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
25a5c                 | '   putpixel(x0-x,y0+y,c)
25a5c     14 13 02 F6 | 	mov	arg01, local02
25a60     18 13 82 F1 | 	sub	arg01, local06
25a64     15 15 02 F6 | 	mov	arg02, local03
25a68     13 15 02 F1 | 	add	arg02, local01
25a6c     16 17 02 F6 | 	mov	arg03, local04
25a70     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
25a74                 | '   putpixel(x0+x,y0-y,c)
25a74     14 13 02 F6 | 	mov	arg01, local02
25a78     18 13 02 F1 | 	add	arg01, local06
25a7c     15 15 02 F6 | 	mov	arg02, local03
25a80     13 15 82 F1 | 	sub	arg02, local01
25a84     16 17 02 F6 | 	mov	arg03, local04
25a88     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
25a8c                 | '   putpixel(x0+x,y0+y,c)
25a8c     14 13 02 F6 | 	mov	arg01, local02
25a90     18 13 02 F1 | 	add	arg01, local06
25a94     15 15 02 F6 | 	mov	arg02, local03
25a98     13 15 02 F1 | 	add	arg02, local01
25a9c     16 17 02 F6 | 	mov	arg03, local04
25aa0     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
25aa4                 | '   putpixel(x0-y,y0-x,c)
25aa4     14 13 02 F6 | 	mov	arg01, local02
25aa8     13 13 82 F1 | 	sub	arg01, local01
25aac     15 15 02 F6 | 	mov	arg02, local03
25ab0     18 15 82 F1 | 	sub	arg02, local06
25ab4     16 17 02 F6 | 	mov	arg03, local04
25ab8     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
25abc                 | '   putpixel(x0-y,y0+x,c)
25abc     14 13 02 F6 | 	mov	arg01, local02
25ac0     13 13 82 F1 | 	sub	arg01, local01
25ac4     15 15 02 F6 | 	mov	arg02, local03
25ac8     18 15 02 F1 | 	add	arg02, local06
25acc     16 17 02 F6 | 	mov	arg03, local04
25ad0     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
25ad4                 | '   putpixel(x0+y,y0-x,c)
25ad4     14 13 02 F6 | 	mov	arg01, local02
25ad8     13 13 02 F1 | 	add	arg01, local01
25adc     15 15 02 F6 | 	mov	arg02, local03
25ae0     18 15 82 F1 | 	sub	arg02, local06
25ae4     16 17 02 F6 | 	mov	arg03, local04
25ae8     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
25aec                 | '   putpixel(x0+y,y0+x,c)
25aec     14 13 02 F6 | 	mov	arg01, local02
25af0     13 13 02 F1 | 	add	arg01, local01
25af4     15 15 02 F6 | 	mov	arg02, local03
25af8     18 15 02 F1 | 	add	arg02, local06
25afc     16 17 02 F6 | 	mov	arg03, local04
25b00     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
25b04                 | '   if d>0 
25b04     01 2E 56 F2 | 	cmps	local05, #1 wc
25b08     18 00 90 CD |  if_b	jmp	#LR__2901
25b0c                 | '     d+=da
25b0c     1A 2F 02 F1 | 	add	local05, local08
25b10                 | '     y-=1
25b10     01 26 86 F1 | 	sub	local01, #1
25b14                 | '     x+=1
25b14     01 30 06 F1 | 	add	local06, #1
25b18                 | '     da+=4*4
25b18     10 34 06 F1 | 	add	local08, #16
25b1c                 | '     db+=2*4
25b1c     08 32 06 F1 | 	add	local07, #8
25b20     18 FF 9F FD | 	jmp	#LR__2900
25b24                 | LR__2901
25b24                 | '   else
25b24                 | '     d+=db
25b24     19 2F 02 F1 | 	add	local05, local07
25b28                 | '     x+=1
25b28     01 30 06 F1 | 	add	local06, #1
25b2c                 | '     da+=2*4
25b2c     08 34 06 F1 | 	add	local08, #8
25b30                 | '     db+=2*4
25b30     08 32 06 F1 | 	add	local07, #8
25b34     04 FF 9F FD | 	jmp	#LR__2900
25b38                 | LR__2902
25b38     A7 F0 03 F6 | 	mov	ptra, fp
25b3c     B2 00 A0 FD | 	call	#popregs_
25b40                 | _hg010b_spin2_circle_ret
25b40     2D 00 64 FD | 	ret
25b44                 | 
25b44                 | '     
25b44                 | ' '-- A frame (an empty rectangle) ---------------------------------------
25b44                 | ' 
25b44                 | ' pub frame(x1,y1,x2,y2,c)
25b44                 | _hg010b_spin2_frame
25b44     05 4A 05 F6 | 	mov	COUNT_, #5
25b48     A8 00 A0 FD | 	call	#pushregs_
25b4c     09 27 02 F6 | 	mov	local01, arg01
25b50     0A 29 02 F6 | 	mov	local02, arg02
25b54     0B 2B 02 F6 | 	mov	local03, arg03
25b58     0C 2D 02 F6 | 	mov	local04, arg04
25b5c     0D 2F 02 F6 | 	mov	local05, arg05
25b60                 | ' 
25b60                 | ' fastline(x1,x2,y1,c)
25b60     13 13 02 F6 | 	mov	arg01, local01
25b64     15 15 02 F6 | 	mov	arg02, local03
25b68     14 17 02 F6 | 	mov	arg03, local02
25b6c     17 19 02 F6 | 	mov	arg04, local05
25b70     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
25b74                 | ' fastline(x1,x2,y2,c)
25b74     13 13 02 F6 | 	mov	arg01, local01
25b78     15 15 02 F6 | 	mov	arg02, local03
25b7c     16 17 02 F6 | 	mov	arg03, local04
25b80     17 19 02 F6 | 	mov	arg04, local05
25b84     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
25b88                 | ' line(x1,y1,x1,y2,c)
25b88     13 13 02 F6 | 	mov	arg01, local01
25b8c     14 15 02 F6 | 	mov	arg02, local02
25b90     13 17 02 F6 | 	mov	arg03, local01
25b94     16 19 02 F6 | 	mov	arg04, local04
25b98     17 1B 02 F6 | 	mov	arg05, local05
25b9c                 | ' draw(x1,y1,x2,y2,c)
25b9c     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
25ba0                 | ' line(x2,y1,x2,y2,c)
25ba0     15 13 02 F6 | 	mov	arg01, local03
25ba4     14 15 02 F6 | 	mov	arg02, local02
25ba8     15 17 02 F6 | 	mov	arg03, local03
25bac     16 19 02 F6 | 	mov	arg04, local04
25bb0     17 1B 02 F6 | 	mov	arg05, local05
25bb4                 | ' draw(x1,y1,x2,y2,c)
25bb4     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
25bb8     A7 F0 03 F6 | 	mov	ptra, fp
25bbc     B2 00 A0 FD | 	call	#popregs_
25bc0                 | _hg010b_spin2_frame_ret
25bc0     2D 00 64 FD | 	ret
25bc4                 | 
25bc4                 | ' 
25bc4                 | ' '-- A box (a filled rectangle) ----------------------------------------
25bc4                 | ' 
25bc4                 | ' pub box(x1,y1,x2,y2,c) |yy
25bc4                 | _hg010b_spin2_box
25bc4     06 4A 05 F6 | 	mov	COUNT_, #6
25bc8     A8 00 A0 FD | 	call	#pushregs_
25bcc     09 27 02 F6 | 	mov	local01, arg01
25bd0     0A 29 02 F6 | 	mov	local02, arg02
25bd4     0B 2B 02 F6 | 	mov	local03, arg03
25bd8     0C 2D 02 F6 | 	mov	local04, arg04
25bdc     0D 2F 02 F6 | 	mov	local05, arg05
25be0                 | ' 
25be0                 | ' repeat yy from y1 to y2
25be0     14 2D 52 F2 | 	cmps	local04, local02 wc
25be4     01 30 86 F6 | 	negc	local06, #1
25be8     18 2D 02 F1 | 	add	local04, local06
25bec                 | LR__2910
25bec                 | '   fastline(x1,x2,yy,c)
25bec     13 13 02 F6 | 	mov	arg01, local01
25bf0     15 15 02 F6 | 	mov	arg02, local03
25bf4     17 19 02 F6 | 	mov	arg04, local05
25bf8     14 17 02 F6 | 	mov	arg03, local02
25bfc     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
25c00     18 29 02 F1 | 	add	local02, local06
25c04     16 29 0A F2 | 	cmp	local02, local04 wz
25c08     E0 FF 9F 5D |  if_ne	jmp	#LR__2910
25c0c     A7 F0 03 F6 | 	mov	ptra, fp
25c10     B2 00 A0 FD | 	call	#popregs_
25c14                 | _hg010b_spin2_box_ret
25c14     2D 00 64 FD | 	ret
25c18                 | 
25c18                 | '       
25c18                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
25c18                 | _hg010b_spin2_putcharxycgf
25c18                 | ' 
25c18                 | '  
25c18                 | ' repeat yy from 0 to 15
25c18     00 00 06 F6 | 	mov	_var01, #0
25c1c     97 8C 48 FB | 	callpa	#(@LR__2922-@LR__2920)>>2,fcache_load_ptr_
25c20                 | LR__2920
25c20                 | ' 
25c20                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
25c20     95 E4 05 F1 | 	add	objptr, #149
25c24     F2 02 02 FB | 	rdlong	_var02, objptr
25c28     0A 02 66 F0 | 	shl	_var02, #10
25c2c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
25c30     01 05 02 F1 | 	add	_var03, _var02
25c34     0B 03 02 F6 | 	mov	_var02, arg03
25c38     04 02 66 F0 | 	shl	_var02, #4
25c3c     01 05 02 F1 | 	add	_var03, _var02
25c40     00 05 02 F1 | 	add	_var03, _var01
25c44     02 05 C2 FA | 	rdbyte	_var03, _var03
25c48                 | '   asm
25c48     00 04 0E F4 | 	testb	_var03, #0 wz
25c4c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
25c50     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
25c54     01 04 0E F4 | 	testb	_var03, #1 wz
25c58     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
25c5c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
25c60     02 04 0E F4 | 	testb	_var03, #2 wz
25c64     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
25c68     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
25c6c     03 04 0E F4 | 	testb	_var03, #3 wz
25c70     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
25c74     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
25c78     04 04 0E F4 | 	testb	_var03, #4 wz
25c7c     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
25c80     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
25c84     05 04 0E F4 | 	testb	_var03, #5 wz
25c88     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
25c8c     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
25c90     06 04 0E F4 | 	testb	_var03, #6 wz
25c94     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
25c98     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
25c9c     07 04 0E F4 | 	testb	_var03, #7 wz
25ca0     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
25ca4     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
25ca8                 | '   
25ca8                 | '   ccc[0]:=c1
25ca8     99 E5 05 F1 | 	add	objptr, #409
25cac     F2 06 62 FC | 	wrlong	_var04, objptr
25cb0                 | '   ccc[1]:=c2 
25cb0     04 E4 05 F1 | 	add	objptr, #4
25cb4     F2 08 62 FC | 	wrlong	_var05, objptr
25cb8                 | '   long[mailbox0][2]:=8
25cb8     49 E4 85 F1 | 	sub	objptr, #73
25cbc     F2 04 02 FB | 	rdlong	_var03, objptr
25cc0     08 04 06 F1 | 	add	_var03, #8
25cc4     02 11 68 FC | 	wrlong	#8, _var03
25cc8                 | '   long[mailbox0][1]:=@ccc
25cc8     45 E4 05 F1 | 	add	objptr, #69
25ccc     F2 04 02 F6 | 	mov	_var03, objptr
25cd0     45 E4 85 F1 | 	sub	objptr, #69
25cd4     F2 02 02 FB | 	rdlong	_var02, objptr
25cd8     04 02 06 F1 | 	add	_var02, #4
25cdc     01 05 62 FC | 	wrlong	_var03, _var02
25ce0                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
25ce0     0C E5 85 F1 | 	sub	objptr, #268
25ce4     F2 04 02 FB | 	rdlong	_var03, objptr
25ce8     0A 03 02 F6 | 	mov	_var02, arg02
25cec     00 03 02 F1 | 	add	_var02, _var01
25cf0     0A 02 66 F0 | 	shl	_var02, #10
25cf4     09 0B 02 F6 | 	mov	_var06, arg01
25cf8     02 0A 66 F0 | 	shl	_var06, #2
25cfc     05 03 02 F1 | 	add	_var02, _var06
25d00     01 05 02 F1 | 	add	_var03, _var02
25d04     00 00 78 FF 
25d08     00 04 06 F1 | 	add	_var03, ##-268435456
25d0c     0C E5 05 F1 | 	add	objptr, #268
25d10     F2 0A 02 FB | 	rdlong	_var06, objptr
25d14     05 05 62 FC | 	wrlong	_var03, _var06
25d18                 | '   repeat
25d18                 | LR__2921
25d18     F2 04 02 FB | 	rdlong	_var03, objptr
25d1c     02 03 02 FB | 	rdlong	_var02, _var03
25d20     00 02 56 F2 | 	cmps	_var02, #0 wc
25d24     F0 FF 9F CD |  if_b	jmp	#LR__2921
25d28     E9 E5 85 F1 | 	sub	objptr, #489
25d2c     01 00 06 F1 | 	add	_var01, #1
25d30     10 00 56 F2 | 	cmps	_var01, #16 wc
25d34     E8 FE 9F CD |  if_b	jmp	#LR__2920
25d38                 | LR__2922
25d38                 | _hg010b_spin2_putcharxycgf_ret
25d38     2D 00 64 FD | 	ret
25d3c                 | 
25d3c                 | ' 
25d3c                 | ' 
25d3c                 | ' '**********************************************************************r***
25d3c                 | ' '                                                                        *
25d3c                 | ' ' Font related functions                                                 *
25d3c                 | ' '                                                                        *
25d3c                 | ' '*************************************************************************
25d3c                 | ' 
25d3c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
25d3c                 | ' 
25d3c                 | ' pub setfontfamily(afontnum)
25d3c                 | _hg010b_spin2_setfontfamily
25d3c                 | ' 
25d3c                 | ' font_family:=afontnum
25d3c     95 E4 05 F1 | 	add	objptr, #149
25d40     F2 12 62 FC | 	wrlong	arg01, objptr
25d44     95 E4 85 F1 | 	sub	objptr, #149
25d48                 | ' 'if afontnum==8
25d48                 | ' '  font_ptr:=@amiga_font
25d48                 | ' 
25d48                 | ' if afontnum==4
25d48     04 12 0E F2 | 	cmp	arg01, #4 wz
25d4c                 | '   font_ptr:=@st_font
25d4c     08 00 00 AF 
25d50     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
25d54     08 E4 05 A1 |  if_e	add	objptr, #8
25d58     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
25d5c     08 E4 85 A1 |  if_e	sub	objptr, #8
25d60     08 00 00 AF 
25d64     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
25d68                 | ' if afontnum==0
25d68     00 12 0E F2 | 	cmp	arg01, #0 wz
25d6c                 | '   font_ptr:=@vga_font
25d6c     08 E4 05 A1 |  if_e	add	objptr, #8
25d70     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
25d74     08 E4 85 A1 |  if_e	sub	objptr, #8
25d78                 | _hg010b_spin2_setfontfamily_ret
25d78     2D 00 64 FD | 	ret
25d7c                 | 
25d7c                 | ' 
25d7c                 | ' ''--------- Redefine a character
25d7c                 | ' 
25d7c                 | ' pub defchar(ch,ptr) | s,i ' 
25d7c                 | _hg010b_spin2_defchar
25d7c                 | ' 
25d7c                 | ' s:=font_ptr+ch*16
25d7c     08 E4 05 F1 | 	add	objptr, #8
25d80     F2 00 02 FB | 	rdlong	_var01, objptr
25d84     08 E4 85 F1 | 	sub	objptr, #8
25d88     04 12 66 F0 | 	shl	arg01, #4
25d8c     09 01 02 F1 | 	add	_var01, arg01
25d90                 | ' repeat i from 0 to 15
25d90     00 02 06 F6 | 	mov	_var02, #0
25d94     97 12 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
25d98                 | LR__2930
25d98                 | '   byte[s+i]:=byte[ptr+i]
25d98     0A 13 02 F6 | 	mov	arg01, arg02
25d9c     01 13 02 F1 | 	add	arg01, _var02
25da0     00 05 02 F6 | 	mov	_var03, _var01
25da4     09 13 C2 FA | 	rdbyte	arg01, arg01
25da8     01 05 02 F1 | 	add	_var03, _var02
25dac     02 13 42 FC | 	wrbyte	arg01, _var03
25db0     01 02 06 F1 | 	add	_var02, #1
25db4     10 02 56 F2 | 	cmps	_var02, #16 wc
25db8     DC FF 9F CD |  if_b	jmp	#LR__2930
25dbc                 | LR__2931
25dbc                 | _hg010b_spin2_defchar_ret
25dbc     2D 00 64 FD | 	ret
25dc0                 | 
25dc0                 | ' 
25dc0                 | ' 
25dc0                 | ' '*************************************************************************
25dc0                 | ' '                                                                        *
25dc0                 | ' '  Cursor functions                                                      *
25dc0                 | ' '                                                                        *
25dc0                 | ' '*************************************************************************
25dc0                 | ' 
25dc0                 | ' 
25dc0                 | ' pub setcursorpos(x,y)
25dc0                 | _hg010b_spin2_setcursorpos
25dc0                 | ' 
25dc0                 | ' ''---------- Set the (x,y) position of cursor
25dc0                 | ' 
25dc0                 | ' cursor_x:=x
25dc0     3C E4 05 F1 | 	add	objptr, #60
25dc4     F2 12 52 FC | 	wrword	arg01, objptr
25dc8                 | ' cursor_y:=y
25dc8     02 E4 05 F1 | 	add	objptr, #2
25dcc     F2 14 42 FC | 	wrbyte	arg02, objptr
25dd0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
25dd0     02 E4 85 F1 | 	sub	objptr, #2
25dd4     F2 14 E2 FA | 	rdword	arg02, objptr
25dd8     02 14 66 F0 | 	shl	arg02, #2
25ddc     02 E4 05 F1 | 	add	objptr, #2
25de0     F2 16 C2 FA | 	rdbyte	arg03, objptr
25de4     3E E4 85 F1 | 	sub	objptr, #62
25de8     04 16 66 F0 | 	shl	arg03, #4
25dec     04 16 06 F1 | 	add	arg03, #4
25df0     11 12 06 F6 | 	mov	arg01, #17
25df4     0C F3 BF FD | 	call	#_hg010b_spin2_setspritepos
25df8                 | _hg010b_spin2_setcursorpos_ret
25df8     2D 00 64 FD | 	ret
25dfc                 | 
25dfc                 | ' 
25dfc                 | ' pub setcursorx(x)
25dfc                 | _hg010b_spin2_setcursorx
25dfc                 | ' cursor_x:=x
25dfc     3C E4 05 F1 | 	add	objptr, #60
25e00     F2 12 52 FC | 	wrword	arg01, objptr
25e04                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
25e04     F2 14 E2 FA | 	rdword	arg02, objptr
25e08     02 14 66 F0 | 	shl	arg02, #2
25e0c     02 E4 05 F1 | 	add	objptr, #2
25e10     F2 16 C2 FA | 	rdbyte	arg03, objptr
25e14     3E E4 85 F1 | 	sub	objptr, #62
25e18     04 16 66 F0 | 	shl	arg03, #4
25e1c     04 16 06 F1 | 	add	arg03, #4
25e20     11 12 06 F6 | 	mov	arg01, #17
25e24     DC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
25e28                 | _hg010b_spin2_setcursorx_ret
25e28     2D 00 64 FD | 	ret
25e2c                 | 
25e2c                 | ' 
25e2c                 | ' pub setcursory(y) 
25e2c                 | _hg010b_spin2_setcursory
25e2c                 | ' cursor_y:=y
25e2c     3E E4 05 F1 | 	add	objptr, #62
25e30     F2 12 42 FC | 	wrbyte	arg01, objptr
25e34                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
25e34     02 E4 85 F1 | 	sub	objptr, #2
25e38     F2 14 E2 FA | 	rdword	arg02, objptr
25e3c     02 14 66 F0 | 	shl	arg02, #2
25e40     02 E4 05 F1 | 	add	objptr, #2
25e44     F2 16 C2 FA | 	rdbyte	arg03, objptr
25e48     3E E4 85 F1 | 	sub	objptr, #62
25e4c     04 16 66 F0 | 	shl	arg03, #4
25e50     04 16 06 F1 | 	add	arg03, #4
25e54     11 12 06 F6 | 	mov	arg01, #17
25e58     A8 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
25e5c                 | _hg010b_spin2_setcursory_ret
25e5c     2D 00 64 FD | 	ret
25e60                 | 
25e60                 | ' 
25e60                 | ' '*************************************************************************
25e60                 | ' '                                                                        *
25e60                 | ' '  VBlank functions                                                      *
25e60                 | ' '                                                                        *
25e60                 | ' '*************************************************************************
25e60                 | ' 
25e60                 | ' pub waitvbl(amount) | i
25e60                 | _hg010b_spin2_waitvbl
25e60     03 4A 05 F6 | 	mov	COUNT_, #3
25e64     A8 00 A0 FD | 	call	#pushregs_
25e68     09 27 02 F6 | 	mov	local01, arg01
25e6c                 | ' 
25e6c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
25e6c                 | ' 
25e6c                 | ' repeat i from 1 to amount
25e6c     01 28 06 F6 | 	mov	local02, #1
25e70     01 26 56 F2 | 	cmps	local01, #1 wc
25e74     01 2A 86 F6 | 	negc	local03, #1
25e78     15 27 02 F1 | 	add	local01, local03
25e7c                 | LR__2940
25e7c                 | '   repeat until vblank==0
25e7c                 | LR__2941
25e7c     49 E4 05 F1 | 	add	objptr, #73
25e80     F2 12 0A FB | 	rdlong	arg01, objptr wz
25e84     49 E4 85 F1 | 	sub	objptr, #73
25e88     0C 00 90 AD |  if_e	jmp	#LR__2942
25e8c                 | '     waitus(100)
25e8c     64 12 06 F6 | 	mov	arg01, #100
25e90     28 20 B0 FD | 	call	#__system___waitus
25e94     E4 FF 9F FD | 	jmp	#LR__2941
25e98                 | LR__2942
25e98                 | '   repeat until vblank==1
25e98                 | LR__2943
25e98     49 E4 05 F1 | 	add	objptr, #73
25e9c     F2 12 02 FB | 	rdlong	arg01, objptr
25ea0     49 E4 85 F1 | 	sub	objptr, #73
25ea4     01 12 0E F2 | 	cmp	arg01, #1 wz
25ea8     0C 00 90 AD |  if_e	jmp	#LR__2944
25eac                 | '     waitus(100)
25eac     64 12 06 F6 | 	mov	arg01, #100
25eb0     08 20 B0 FD | 	call	#__system___waitus
25eb4     E0 FF 9F FD | 	jmp	#LR__2943
25eb8                 | LR__2944
25eb8     15 29 02 F1 | 	add	local02, local03
25ebc     13 29 0A F2 | 	cmp	local02, local01 wz
25ec0     B8 FF 9F 5D |  if_ne	jmp	#LR__2940
25ec4     A7 F0 03 F6 | 	mov	ptra, fp
25ec8     B2 00 A0 FD | 	call	#popregs_
25ecc                 | _hg010b_spin2_waitvbl_ret
25ecc     2D 00 64 FD | 	ret
25ed0                 | 
25ed0                 | ' 
25ed0                 | ' ''---------- Set color #c in palette to r,g,b
25ed0                 | ' 
25ed0                 | ' pub setcolor(c,r,g,b)  |cc
25ed0                 | _hg010b_spin2_setcolor
25ed0                 | ' 
25ed0                 | ' cc:=r<<24+g<<16+b<<8
25ed0     18 14 66 F0 | 	shl	arg02, #24
25ed4     10 16 66 F0 | 	shl	arg03, #16
25ed8     0B 15 02 F1 | 	add	arg02, arg03
25edc     08 18 66 F0 | 	shl	arg04, #8
25ee0     0C 15 02 F1 | 	add	arg02, arg04
25ee4                 | ' long[palette_ptr+4*c]:=cc
25ee4     1C E4 05 F1 | 	add	objptr, #28
25ee8     F2 18 02 FB | 	rdlong	arg04, objptr
25eec     1C E4 85 F1 | 	sub	objptr, #28
25ef0     02 12 66 F0 | 	shl	arg01, #2
25ef4     09 19 02 F1 | 	add	arg04, arg01
25ef8     0C 15 62 FC | 	wrlong	arg02, arg04
25efc                 | _hg010b_spin2_setcolor_ret
25efc     2D 00 64 FD | 	ret
25f00                 | 
25f00                 | ' 
25f00                 | ' 
25f00                 | ' pub cls(fc,bc)   :c,i
25f00                 | _hg010b_spin2_cls
25f00     02 4A 05 F6 | 	mov	COUNT_, #2
25f04     A8 00 A0 FD | 	call	#pushregs_
25f08     09 27 02 F6 | 	mov	local01, arg01
25f0c     0A 29 02 F6 | 	mov	local02, arg02
25f10                 | ' 
25f10                 | ' c:=bc
25f10                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
25f10     DD E4 05 F1 | 	add	objptr, #221
25f14     F2 12 02 FB | 	rdlong	arg01, objptr
25f18     A5 E4 85 F1 | 	sub	objptr, #165
25f1c     F2 16 02 FB | 	rdlong	arg03, objptr
25f20     02 16 66 F0 | 	shl	arg03, #2
25f24     14 15 02 F6 | 	mov	arg02, local02
25f28     00 18 06 F6 | 	mov	arg04, #0
25f2c     01 1A 06 F6 | 	mov	arg05, #1
25f30     0B 00 00 FF 
25f34     94 E4 05 F1 | 	add	objptr, ##5780
25f38     B4 10 B0 FD | 	call	#_psram_spin2_fill
25f3c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
25f3c     0B 00 00 FF 
25f40     C8 E4 85 F1 | 	sub	objptr, ##5832
25f44     F2 12 02 FB | 	rdlong	arg01, objptr
25f48     04 E4 85 F1 | 	sub	objptr, #4
25f4c     F2 16 02 FB | 	rdlong	arg03, objptr
25f50     09 17 82 F1 | 	sub	arg03, arg01
25f54     20 14 06 F6 | 	mov	arg02, #32
25f58     00 18 06 F6 | 	mov	arg04, #0
25f5c     01 1A 06 F6 | 	mov	arg05, #1
25f60     0B 00 00 FF 
25f64     CC E4 05 F1 | 	add	objptr, ##5836
25f68     84 10 B0 FD | 	call	#_psram_spin2_fill
25f6c                 | ' setwritecolors(fc,bc)
25f6c                 | ' 
25f6c                 | ' write_color:=ff
25f6c     0B 00 00 FF 
25f70     8B E4 85 F1 | 	sub	objptr, ##5771
25f74     F2 26 62 FC | 	wrlong	local01, objptr
25f78                 | ' write_background:=bb
25f78     04 E4 05 F1 | 	add	objptr, #4
25f7c     F2 28 62 FC | 	wrlong	local02, objptr
25f80                 | ' cursor_x:=0
25f80     09 E4 85 F1 | 	sub	objptr, #9
25f84     F2 00 58 FC | 	wrword	#0, objptr
25f88                 | ' cursor_y:=0
25f88     02 E4 05 F1 | 	add	objptr, #2
25f8c     F2 00 48 FC | 	wrbyte	#0, objptr
25f90                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
25f90     02 E4 85 F1 | 	sub	objptr, #2
25f94     F2 14 E2 FA | 	rdword	arg02, objptr
25f98     02 14 66 F0 | 	shl	arg02, #2
25f9c     02 E4 05 F1 | 	add	objptr, #2
25fa0     F2 16 C2 FA | 	rdbyte	arg03, objptr
25fa4     3E E4 85 F1 | 	sub	objptr, #62
25fa8     04 16 66 F0 | 	shl	arg03, #4
25fac     04 16 06 F1 | 	add	arg03, #4
25fb0     11 12 06 F6 | 	mov	arg01, #17
25fb4     4C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
25fb8                 | ' setcursorcolor(fc)
25fb8     13 13 02 F6 | 	mov	arg01, local01
25fbc     44 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
25fc0     14 FB 01 F6 | 	mov	result1, local02
25fc4     00 FC 05 F6 | 	mov	result2, #0
25fc8     A7 F0 03 F6 | 	mov	ptra, fp
25fcc     B2 00 A0 FD | 	call	#popregs_
25fd0                 | _hg010b_spin2_cls_ret
25fd0     2D 00 64 FD | 	ret
25fd4                 | 
25fd4                 | ' 
25fd4                 | ' ''---------- Output a char at the cursor position, move the cursor 
25fd4                 | ' 
25fd4                 | ' pub putchar(achar) | c,x,y,l,newcpl
25fd4                 | _hg010b_spin2_putchar
25fd4     02 4A 05 F6 | 	mov	COUNT_, #2
25fd8     A8 00 A0 FD | 	call	#pushregs_
25fdc     09 27 02 F6 | 	mov	local01, arg01
25fe0                 | ' 
25fe0                 | ' if achar==10
25fe0     0A 26 0E F2 | 	cmp	local01, #10 wz
25fe4                 | '   crlf()
25fe4     78 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
25fe8                 | ' if achar==9
25fe8     09 26 0E F2 | 	cmp	local01, #9 wz
25fec     18 00 90 5D |  if_ne	jmp	#LR__2950
25ff0                 | '   cursor_x:=(cursor_x& %11110000)+16
25ff0     3C E4 05 F1 | 	add	objptr, #60
25ff4     F2 16 E2 FA | 	rdword	arg03, objptr
25ff8     F0 16 06 F5 | 	and	arg03, #240
25ffc     10 16 06 F1 | 	add	arg03, #16
26000     F2 16 52 FC | 	wrword	arg03, objptr
26004     3C E4 85 F1 | 	sub	objptr, #60
26008                 | LR__2950
26008                 | '   
26008                 | ' if (achar<>9) && (achar<>10) 
26008     09 26 0E F2 | 	cmp	local01, #9 wz
2600c     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
26010     A8 00 90 AD |  if_e	jmp	#LR__2951
26014                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
26014     3C E4 05 F1 | 	add	objptr, #60
26018     F2 12 E2 FA | 	rdword	arg01, objptr
2601c     02 E4 05 F1 | 	add	objptr, #2
26020     F2 14 C2 FA | 	rdbyte	arg02, objptr
26024     04 14 66 F0 | 	shl	arg02, #4
26028     04 14 06 F1 | 	add	arg02, #4
2602c     03 E4 05 F1 | 	add	objptr, #3
26030     F2 18 02 FB | 	rdlong	arg04, objptr
26034     04 E4 05 F1 | 	add	objptr, #4
26038     F2 1A 02 FB | 	rdlong	arg05, objptr
2603c     45 E4 85 F1 | 	sub	objptr, #69
26040     13 17 02 F6 | 	mov	arg03, local01
26044     D0 FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
26048     04 E4 05 F1 | 	add	objptr, #4
2604c     F2 12 02 FB | 	rdlong	arg01, objptr
26050     1C 00 00 FF 
26054     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26058     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
2605c     3A E4 05 F1 | 	add	objptr, #58
26060     F2 1A C2 FA | 	rdbyte	arg05, objptr
26064     0D 17 02 FD | 	qmul	arg03, arg05
26068                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
26068     1C 00 00 FF 
2606c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26070     02 E4 85 F1 | 	sub	objptr, #2
26074     F2 28 E2 FA | 	rdword	local02, objptr
26078     01 28 46 F0 | 	shr	local02, #1
2607c     13 15 02 F6 | 	mov	arg02, local01
26080     01 16 06 F6 | 	mov	arg03, #1
26084     00 18 06 F6 | 	mov	arg04, #0
26088     01 1A 06 F6 | 	mov	arg05, #1
2608c     0B 00 00 FF 
26090     90 E4 05 F1 | 	add	objptr, ##5776
26094     18 26 62 FD | 	getqx	local01
26098     14 27 02 F1 | 	add	local01, local02
2609c     13 13 02 F1 | 	add	arg01, local01
260a0     4C 0F B0 FD | 	call	#_psram_spin2_fill
260a4                 | '   cursor_x+=2
260a4     0B 00 00 FF 
260a8     90 E4 85 F1 | 	sub	objptr, ##5776
260ac     F2 28 E2 FA | 	rdword	local02, objptr
260b0     02 28 06 F1 | 	add	local02, #2
260b4     F2 28 52 FC | 	wrword	local02, objptr
260b8     3C E4 85 F1 | 	sub	objptr, #60
260bc                 | LR__2951
260bc                 | ' 
260bc                 | ' if cursor_x>=256
260bc     3C E4 05 F1 | 	add	objptr, #60
260c0     F2 28 E2 FA | 	rdword	local02, objptr
260c4     3C E4 85 F1 | 	sub	objptr, #60
260c8     00 29 56 F2 | 	cmps	local02, #256 wc
260cc     64 00 90 CD |  if_b	jmp	#LR__2953
260d0                 | '   cursor_x:=0
260d0     3C E4 05 F1 | 	add	objptr, #60
260d4     F2 00 58 FC | 	wrword	#0, objptr
260d8                 | '   cursor_y+=1
260d8     02 E4 05 F1 | 	add	objptr, #2
260dc     F2 28 C2 FA | 	rdbyte	local02, objptr
260e0     01 28 06 F1 | 	add	local02, #1
260e4     F2 28 42 FC | 	wrbyte	local02, objptr
260e8                 | '   if cursor_y>st_lines-1
260e8     C3 E4 05 F1 | 	add	objptr, #195
260ec     F2 28 02 FB | 	rdlong	local02, objptr
260f0     01 28 86 F1 | 	sub	local02, #1
260f4     C3 E4 85 F1 | 	sub	objptr, #195
260f8     F2 16 C2 FA | 	rdbyte	arg03, objptr
260fc     3E E4 85 F1 | 	sub	objptr, #62
26100     14 17 5A F2 | 	cmps	arg03, local02 wcz
26104     2C 00 90 ED |  if_be	jmp	#LR__2952
26108                 | '     scrollup2()
26108     00 12 06 F6 | 	mov	arg01, #0
2610c     01 00 00 FF 
26110     58 14 06 F6 | 	mov	arg02, ##600
26114     10 16 06 F6 | 	mov	arg03, #16
26118     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
2611c                 | '     cursor_y:=st_lines-1
2611c     01 E5 05 F1 | 	add	objptr, #257
26120     F2 28 02 FB | 	rdlong	local02, objptr
26124     01 28 86 F1 | 	sub	local02, #1
26128     C3 E4 85 F1 | 	sub	objptr, #195
2612c     F2 28 42 FC | 	wrbyte	local02, objptr
26130     3E E4 85 F1 | 	sub	objptr, #62
26134                 | LR__2952
26134                 | LR__2953
26134                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
26134     3C E4 05 F1 | 	add	objptr, #60
26138     F2 14 E2 FA | 	rdword	arg02, objptr
2613c     02 14 66 F0 | 	shl	arg02, #2
26140     02 E4 05 F1 | 	add	objptr, #2
26144     F2 16 C2 FA | 	rdbyte	arg03, objptr
26148     3E E4 85 F1 | 	sub	objptr, #62
2614c     04 16 66 F0 | 	shl	arg03, #4
26150     04 16 06 F1 | 	add	arg03, #4
26154     11 12 06 F6 | 	mov	arg01, #17
26158     A8 EF BF FD | 	call	#_hg010b_spin2_setspritepos
2615c     A7 F0 03 F6 | 	mov	ptra, fp
26160     B2 00 A0 FD | 	call	#popregs_
26164                 | _hg010b_spin2_putchar_ret
26164     2D 00 64 FD | 	ret
26168                 | 
26168                 | '     
26168                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
26168                 | ' 
26168                 | ' pub putchar2(achar) | c,x,y,l,newcpl
26168                 | _hg010b_spin2_putchar2
26168     02 4A 05 F6 | 	mov	COUNT_, #2
2616c     A8 00 A0 FD | 	call	#pushregs_
26170     09 27 02 F6 | 	mov	local01, arg01
26174                 | ' 
26174                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
26174     3C E4 05 F1 | 	add	objptr, #60
26178     F2 12 E2 FA | 	rdword	arg01, objptr
2617c     02 E4 05 F1 | 	add	objptr, #2
26180     F2 14 C2 FA | 	rdbyte	arg02, objptr
26184     04 14 66 F0 | 	shl	arg02, #4
26188     04 14 06 F1 | 	add	arg02, #4
2618c     03 E4 05 F1 | 	add	objptr, #3
26190     F2 18 02 FB | 	rdlong	arg04, objptr
26194     04 E4 05 F1 | 	add	objptr, #4
26198     F2 1A 02 FB | 	rdlong	arg05, objptr
2619c     45 E4 85 F1 | 	sub	objptr, #69
261a0     13 17 02 F6 | 	mov	arg03, local01
261a4     70 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
261a8     04 E4 05 F1 | 	add	objptr, #4
261ac     F2 12 02 FB | 	rdlong	arg01, objptr
261b0     1C 00 00 FF 
261b4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
261b8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
261bc     3A E4 05 F1 | 	add	objptr, #58
261c0     F2 1A C2 FA | 	rdbyte	arg05, objptr
261c4     0D 17 02 FD | 	qmul	arg03, arg05
261c8                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
261c8     1C 00 00 FF 
261cc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
261d0     02 E4 85 F1 | 	sub	objptr, #2
261d4     F2 28 E2 FA | 	rdword	local02, objptr
261d8     01 28 46 F0 | 	shr	local02, #1
261dc     13 15 02 F6 | 	mov	arg02, local01
261e0     01 16 06 F6 | 	mov	arg03, #1
261e4     00 18 06 F6 | 	mov	arg04, #0
261e8     01 1A 06 F6 | 	mov	arg05, #1
261ec     0B 00 00 FF 
261f0     90 E4 05 F1 | 	add	objptr, ##5776
261f4     18 26 62 FD | 	getqx	local01
261f8     14 27 02 F1 | 	add	local01, local02
261fc     13 13 02 F1 | 	add	arg01, local01
26200     EC 0D B0 FD | 	call	#_psram_spin2_fill
26204                 | ' 
26204                 | ' cursor_x+=2
26204     0B 00 00 FF 
26208     90 E4 85 F1 | 	sub	objptr, ##5776
2620c     F2 28 E2 FA | 	rdword	local02, objptr
26210     02 28 06 F1 | 	add	local02, #2
26214     F2 28 52 FC | 	wrword	local02, objptr
26218                 | ' if cursor_x>=256
26218     F2 28 E2 FA | 	rdword	local02, objptr
2621c     3C E4 85 F1 | 	sub	objptr, #60
26220     00 29 56 F2 | 	cmps	local02, #256 wc
26224     64 00 90 CD |  if_b	jmp	#LR__2961
26228                 | '   cursor_x:=0
26228     3C E4 05 F1 | 	add	objptr, #60
2622c     F2 00 58 FC | 	wrword	#0, objptr
26230                 | '   cursor_y+=1
26230     02 E4 05 F1 | 	add	objptr, #2
26234     F2 28 C2 FA | 	rdbyte	local02, objptr
26238     01 28 06 F1 | 	add	local02, #1
2623c     F2 28 42 FC | 	wrbyte	local02, objptr
26240                 | '   if cursor_y>st_lines-1
26240     C3 E4 05 F1 | 	add	objptr, #195
26244     F2 28 02 FB | 	rdlong	local02, objptr
26248     01 28 86 F1 | 	sub	local02, #1
2624c     C3 E4 85 F1 | 	sub	objptr, #195
26250     F2 16 C2 FA | 	rdbyte	arg03, objptr
26254     3E E4 85 F1 | 	sub	objptr, #62
26258     14 17 5A F2 | 	cmps	arg03, local02 wcz
2625c     2C 00 90 ED |  if_be	jmp	#LR__2960
26260                 | '     scrollup2()
26260     00 12 06 F6 | 	mov	arg01, #0
26264     01 00 00 FF 
26268     58 14 06 F6 | 	mov	arg02, ##600
2626c     10 16 06 F6 | 	mov	arg03, #16
26270     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
26274                 | '     cursor_y:=st_lines-1
26274     01 E5 05 F1 | 	add	objptr, #257
26278     F2 28 02 FB | 	rdlong	local02, objptr
2627c     01 28 86 F1 | 	sub	local02, #1
26280     C3 E4 85 F1 | 	sub	objptr, #195
26284     F2 28 42 FC | 	wrbyte	local02, objptr
26288     3E E4 85 F1 | 	sub	objptr, #62
2628c                 | LR__2960
2628c                 | LR__2961
2628c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
2628c     3C E4 05 F1 | 	add	objptr, #60
26290     F2 14 E2 FA | 	rdword	arg02, objptr
26294     02 14 66 F0 | 	shl	arg02, #2
26298     02 E4 05 F1 | 	add	objptr, #2
2629c     F2 16 C2 FA | 	rdbyte	arg03, objptr
262a0     3E E4 85 F1 | 	sub	objptr, #62
262a4     04 16 66 F0 | 	shl	arg03, #4
262a8     04 16 06 F1 | 	add	arg03, #4
262ac     11 12 06 F6 | 	mov	arg01, #17
262b0     50 EE BF FD | 	call	#_hg010b_spin2_setspritepos
262b4     A7 F0 03 F6 | 	mov	ptra, fp
262b8     B2 00 A0 FD | 	call	#popregs_
262bc                 | _hg010b_spin2_putchar2_ret
262bc     2D 00 64 FD | 	ret
262c0                 | 
262c0                 | ' ''--------- Output a string at the cursor position, move the cursor  
262c0                 | ' 
262c0                 | ' pub write(text) | iii,c,ncx,ncy
262c0                 | _hg010b_spin2_write
262c0     04 4A 05 F6 | 	mov	COUNT_, #4
262c4     A8 00 A0 FD | 	call	#pushregs_
262c8     09 27 02 F6 | 	mov	local01, arg01
262cc                 | ' 
262cc                 | ' repeat iii from 0 to strsize(text)-1
262cc     00 28 06 F6 | 	mov	local02, #0
262d0     13 13 02 F6 | 	mov	arg01, local01
262d4     09 2B 02 F6 | 	mov	local03, arg01
262d8     97 06 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
262dc                 | LR__2970
262dc     15 FB C9 FA | 	rdbyte	result1, local03 wz
262e0     01 2A 06 51 |  if_ne	add	local03, #1
262e4     F4 FF 9F 5D |  if_ne	jmp	#LR__2970
262e8                 | LR__2971
262e8     09 2B 82 F1 | 	sub	local03, arg01
262ec     01 2A 86 F1 | 	sub	local03, #1
262f0     00 2A 56 F2 | 	cmps	local03, #0 wc
262f4     01 2C 86 F6 | 	negc	local04, #1
262f8     16 2B 02 F1 | 	add	local03, local04
262fc                 | LR__2972
262fc                 | '   putchar2(byte[text+iii])
262fc     13 13 02 F6 | 	mov	arg01, local01
26300     14 13 02 F1 | 	add	arg01, local02
26304     09 13 C2 FA | 	rdbyte	arg01, arg01
26308     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
2630c     16 29 02 F1 | 	add	local02, local04
26310     15 29 0A F2 | 	cmp	local02, local03 wz
26314     E4 FF 9F 5D |  if_ne	jmp	#LR__2972
26318     A7 F0 03 F6 | 	mov	ptra, fp
2631c     B2 00 A0 FD | 	call	#popregs_
26320                 | _hg010b_spin2_write_ret
26320     2D 00 64 FD | 	ret
26324                 | 
26324                 | '    
26324                 | ' ' a version for text scrolling in Basic shifted 4 lines down
26324                 | ' 
26324                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
26324                 | _hg010b_spin2_scrollup2
26324     03 4A 05 F6 | 	mov	COUNT_, #3
26328     A8 00 A0 FD | 	call	#pushregs_
2632c                 | ' 	
2632c                 | ' repeat i from 4 to 579 
2632c     04 26 06 F6 | 	mov	local01, #4
26330                 | LR__2980
26330     DD E4 05 F1 | 	add	objptr, #221
26334     F2 14 02 FB | 	rdlong	arg02, objptr
26338     13 1B 02 F6 | 	mov	arg05, local01
2633c     10 1A 06 F1 | 	add	arg05, #16
26340     02 1A 66 F0 | 	shl	arg05, #2
26344     14 E4 05 F1 | 	add	objptr, #20
26348     F2 16 02 FB | 	rdlong	arg03, objptr
2634c     0B 1B 02 FD | 	qmul	arg05, arg03
26350                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
26350     02 16 66 F0 | 	shl	arg03, #2
26354     F4 03 00 FF 
26358     00 12 06 F6 | 	mov	arg01, ##518144
2635c     0A 00 00 FF 
26360     DB E5 05 F1 | 	add	objptr, ##5595
26364     18 1A 62 FD | 	getqx	arg05
26368     0D 15 02 F1 | 	add	arg02, arg05
2636c     48 0B B0 FD | 	call	#_psram_spin2_read1
26370     0A 00 00 FF 
26374     EF E5 85 F1 | 	sub	objptr, ##5615
26378     F2 14 02 FB | 	rdlong	arg02, objptr
2637c     13 1B 02 F6 | 	mov	arg05, local01
26380     02 1A 66 F0 | 	shl	arg05, #2
26384     14 E4 05 F1 | 	add	objptr, #20
26388     F2 16 02 FB | 	rdlong	arg03, objptr
2638c     0B 1B 02 FD | 	qmul	arg05, arg03
26390                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
26390     02 16 66 F0 | 	shl	arg03, #2
26394     F4 03 00 FF 
26398     00 12 06 F6 | 	mov	arg01, ##518144
2639c     0A 00 00 FF 
263a0     DB E5 05 F1 | 	add	objptr, ##5595
263a4     18 1A 62 FD | 	getqx	arg05
263a8     0D 15 02 F1 | 	add	arg02, arg05
263ac     A4 0B B0 FD | 	call	#_psram_spin2_write
263b0     0B 00 00 FF 
263b4     CC E4 85 F1 | 	sub	objptr, ##5836
263b8     01 26 06 F1 | 	add	local01, #1
263bc     01 00 00 FF 
263c0     44 26 16 F2 | 	cmp	local01, ##580 wc
263c4     68 FF 9F CD |  if_b	jmp	#LR__2980
263c8                 | ' 
263c8                 | ' repeat i from 580 to 599
263c8     01 00 00 FF 
263cc     44 26 06 F6 | 	mov	local01, ##580
263d0                 | LR__2981
263d0                 | '    fastline(0,1023,i,write_background)   
263d0     45 E4 05 F1 | 	add	objptr, #69
263d4     F2 18 02 FB | 	rdlong	arg04, objptr
263d8     45 E4 85 F1 | 	sub	objptr, #69
263dc     00 12 06 F6 | 	mov	arg01, #0
263e0     09 14 CE F9 | 	bmask	arg02, #9
263e4     13 17 02 F6 | 	mov	arg03, local01
263e8     64 EF BF FD | 	call	#_hg010b_spin2_fastline
263ec     01 26 06 F1 | 	add	local01, #1
263f0     01 00 00 FF 
263f4     58 26 16 F2 | 	cmp	local01, ##600 wc
263f8     D4 FF 9F CD |  if_b	jmp	#LR__2981
263fc                 | ' repeat i from 0 to 3
263fc     00 26 06 F6 | 	mov	local01, #0
26400                 | LR__2982
26400                 | '    fastline(0,1023,i,write_background)      
26400     45 E4 05 F1 | 	add	objptr, #69
26404     F2 18 02 FB | 	rdlong	arg04, objptr
26408     45 E4 85 F1 | 	sub	objptr, #69
2640c     00 12 06 F6 | 	mov	arg01, #0
26410     09 14 CE F9 | 	bmask	arg02, #9
26414     13 17 02 F6 | 	mov	arg03, local01
26418     34 EF BF FD | 	call	#_hg010b_spin2_fastline
2641c     01 26 06 F1 | 	add	local01, #1
26420     04 26 56 F2 | 	cmps	local01, #4 wc
26424     D8 FF 9F CD |  if_b	jmp	#LR__2982
26428                 | ' 
26428                 | ' repeat i from 0 to 35
26428     00 26 06 F6 | 	mov	local01, #0
2642c                 | LR__2983
2642c     13 1B 02 F6 | 	mov	arg05, local01
26430     01 1A 06 F1 | 	add	arg05, #1
26434     1C 00 00 FF 
26438     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
2643c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
26440     0B 1B 02 FD | 	qmul	arg05, arg03
26444                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
26444     04 E4 05 F1 | 	add	objptr, #4
26448     F2 14 02 FB | 	rdlong	arg02, objptr
2644c     1C 00 00 FF 
26450     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26454     F4 03 00 FF 
26458     00 12 06 F6 | 	mov	arg01, ##518144
2645c     0B 00 00 FF 
26460     C8 E4 05 F1 | 	add	objptr, ##5832
26464     18 1A 62 FD | 	getqx	arg05
26468     0D 15 02 F1 | 	add	arg02, arg05
2646c     48 0A B0 FD | 	call	#_psram_spin2_read1
26470     1C 00 00 FF 
26474     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
26478     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
2647c     0B 27 02 FD | 	qmul	local01, arg03
26480                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
26480     0B 00 00 FF 
26484     C8 E4 85 F1 | 	sub	objptr, ##5832
26488     F2 14 02 FB | 	rdlong	arg02, objptr
2648c     1C 00 00 FF 
26490     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26494     F4 03 00 FF 
26498     00 12 06 F6 | 	mov	arg01, ##518144
2649c     0B 00 00 FF 
264a0     C8 E4 05 F1 | 	add	objptr, ##5832
264a4     18 1A 62 FD | 	getqx	arg05
264a8     0D 15 02 F1 | 	add	arg02, arg05
264ac     A4 0A B0 FD | 	call	#_psram_spin2_write
264b0     0B 00 00 FF 
264b4     CC E4 85 F1 | 	sub	objptr, ##5836
264b8     01 26 06 F1 | 	add	local01, #1
264bc     24 26 56 F2 | 	cmps	local01, #36 wc
264c0     68 FF 9F CD |  if_b	jmp	#LR__2983
264c4                 | ' repeat i from 0 to timings[7]-1
264c4     00 26 06 F6 | 	mov	local01, #0
264c8     1C 00 00 FF 
264cc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
264d0     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
264d4     1C 00 00 FF 
264d8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
264dc     01 28 86 F1 | 	sub	local02, #1
264e0     00 28 56 F2 | 	cmps	local02, #0 wc
264e4     01 2A 86 F6 | 	negc	local03, #1
264e8     15 29 02 F1 | 	add	local02, local03
264ec                 | LR__2984
264ec                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
264ec     04 E4 05 F1 | 	add	objptr, #4
264f0     F2 12 02 FB | 	rdlong	arg01, objptr
264f4     1C 00 00 FF 
264f8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
264fc     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
26500     1C 00 00 FF 
26504     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
26508     0D 19 02 F6 | 	mov	arg04, arg05
2650c     03 18 66 F0 | 	shl	arg04, #3
26510     0D 19 02 F1 | 	add	arg04, arg05
26514     02 18 66 F0 | 	shl	arg04, #2
26518     13 19 02 F1 | 	add	arg04, local01
2651c     0C 13 02 F1 | 	add	arg01, arg04
26520     20 14 06 F6 | 	mov	arg02, #32
26524     01 16 06 F6 | 	mov	arg03, #1
26528     00 18 06 F6 | 	mov	arg04, #0
2652c     01 1A 06 F6 | 	mov	arg05, #1
26530     0B 00 00 FF 
26534     C8 E4 05 F1 | 	add	objptr, ##5832
26538     B4 0A B0 FD | 	call	#_psram_spin2_fill
2653c     0B 00 00 FF 
26540     CC E4 85 F1 | 	sub	objptr, ##5836
26544     15 27 02 F1 | 	add	local01, local03
26548     14 27 0A F2 | 	cmp	local01, local02 wz
2654c     9C FF 9F 5D |  if_ne	jmp	#LR__2984
26550     A7 F0 03 F6 | 	mov	ptra, fp
26554     B2 00 A0 FD | 	call	#popregs_
26558                 | _hg010b_spin2_scrollup2_ret
26558     2D 00 64 FD | 	ret
2655c                 | 
2655c                 | '  
2655c                 | ' ''----------- Scroll the screen one line down 
2655c                 | ' 
2655c                 | ' pub scrolldown(start=0) | i
2655c                 | _hg010b_spin2_scrolldown
2655c     05 4A 05 F6 | 	mov	COUNT_, #5
26560     A8 00 A0 FD | 	call	#pushregs_
26564     09 27 02 F6 | 	mov	local01, arg01
26568                 | ' 
26568                 | ' repeat i from 579 to (start*16)+4
26568     01 00 00 FF 
2656c     43 28 06 F6 | 	mov	local02, ##579
26570     13 2B 02 F6 | 	mov	local03, local01
26574     04 2A 66 F0 | 	shl	local03, #4
26578     04 2A 06 F1 | 	add	local03, #4
2657c     01 00 00 FF 
26580     43 2A 56 F2 | 	cmps	local03, ##579 wc
26584     01 2C 86 F6 | 	negc	local04, #1
26588     16 2F 02 F6 | 	mov	local05, local04
2658c     16 2B 02 F1 | 	add	local03, local04
26590                 | LR__2990
26590     DD E4 05 F1 | 	add	objptr, #221
26594     F2 14 02 FB | 	rdlong	arg02, objptr
26598     14 2D 02 F6 | 	mov	local04, local02
2659c     02 2C 66 F0 | 	shl	local04, #2
265a0     14 E4 05 F1 | 	add	objptr, #20
265a4     F2 16 02 FB | 	rdlong	arg03, objptr
265a8     0B 2D 02 FD | 	qmul	local04, arg03
265ac                 | '   ram.read1($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
265ac     02 16 66 F0 | 	shl	arg03, #2
265b0     F4 03 00 FF 
265b4     00 12 06 F6 | 	mov	arg01, ##518144
265b8     0A 00 00 FF 
265bc     DB E5 05 F1 | 	add	objptr, ##5595
265c0     18 2C 62 FD | 	getqx	local04
265c4     16 15 02 F1 | 	add	arg02, local04
265c8     EC 08 B0 FD | 	call	#_psram_spin2_read1
265cc     0A 00 00 FF 
265d0     EF E5 85 F1 | 	sub	objptr, ##5615
265d4     F2 14 02 FB | 	rdlong	arg02, objptr
265d8     14 2D 02 F6 | 	mov	local04, local02
265dc     10 2C 06 F1 | 	add	local04, #16
265e0     02 2C 66 F0 | 	shl	local04, #2
265e4     14 E4 05 F1 | 	add	objptr, #20
265e8     F2 16 02 FB | 	rdlong	arg03, objptr
265ec     0B 2D 02 FD | 	qmul	local04, arg03
265f0                 | '   ram.write($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
265f0     02 16 66 F0 | 	shl	arg03, #2
265f4     F4 03 00 FF 
265f8     00 12 06 F6 | 	mov	arg01, ##518144
265fc     0A 00 00 FF 
26600     DB E5 05 F1 | 	add	objptr, ##5595
26604     18 2C 62 FD | 	getqx	local04
26608     16 15 02 F1 | 	add	arg02, local04
2660c     44 09 B0 FD | 	call	#_psram_spin2_write
26610     0B 00 00 FF 
26614     CC E4 85 F1 | 	sub	objptr, ##5836
26618     17 29 02 F1 | 	add	local02, local05
2661c     15 29 0A F2 | 	cmp	local02, local03 wz
26620     6C FF 9F 5D |  if_ne	jmp	#LR__2990
26624                 | ' 
26624                 | ' repeat i from (start*16)+4 to (start*16)+19
26624     13 29 02 F6 | 	mov	local02, local01
26628     04 28 66 F0 | 	shl	local02, #4
2662c     04 28 06 F1 | 	add	local02, #4
26630     13 2F 02 F6 | 	mov	local05, local01
26634     04 2E 66 F0 | 	shl	local05, #4
26638     13 2E 06 F1 | 	add	local05, #19
2663c     13 2D 02 F6 | 	mov	local04, local01
26640     04 2C 66 F0 | 	shl	local04, #4
26644     04 2C 06 F1 | 	add	local04, #4
26648     16 2F 52 F2 | 	cmps	local05, local04 wc
2664c     01 2C 86 F6 | 	negc	local04, #1
26650     16 2B 02 F6 | 	mov	local03, local04
26654     16 2F 02 F1 | 	add	local05, local04
26658                 | LR__2991
26658                 | '    fastline(0,1023,i,write_background)    
26658     45 E4 05 F1 | 	add	objptr, #69
2665c     F2 18 02 FB | 	rdlong	arg04, objptr
26660     45 E4 85 F1 | 	sub	objptr, #69
26664     00 12 06 F6 | 	mov	arg01, #0
26668     09 14 CE F9 | 	bmask	arg02, #9
2666c     14 17 02 F6 | 	mov	arg03, local02
26670     DC EC BF FD | 	call	#_hg010b_spin2_fastline
26674     15 29 02 F1 | 	add	local02, local03
26678     17 29 0A F2 | 	cmp	local02, local05 wz
2667c     D8 FF 9F 5D |  if_ne	jmp	#LR__2991
26680                 | '    
26680                 | ' repeat i from 35 to start
26680     23 28 06 F6 | 	mov	local02, #35
26684     23 26 56 F2 | 	cmps	local01, #35 wc
26688     01 2C 86 F6 | 	negc	local04, #1
2668c     13 2F 02 F6 | 	mov	local05, local01
26690     16 2F 02 F1 | 	add	local05, local04
26694                 | LR__2992
26694                 | '   ram.read1($7E800, textbuf_ptr+(i*128), 128)
26694     04 E4 05 F1 | 	add	objptr, #4
26698     F2 14 02 FB | 	rdlong	arg02, objptr
2669c     14 2B 02 F6 | 	mov	local03, local02
266a0     07 2A 66 F0 | 	shl	local03, #7
266a4     15 15 02 F1 | 	add	arg02, local03
266a8     F4 03 00 FF 
266ac     00 12 06 F6 | 	mov	arg01, ##518144
266b0     80 16 06 F6 | 	mov	arg03, #128
266b4     0B 00 00 FF 
266b8     C8 E4 05 F1 | 	add	objptr, ##5832
266bc     F8 07 B0 FD | 	call	#_psram_spin2_read1
266c0                 | '   ram.write($7E800, textbuf_ptr+(i+1)*128,128)
266c0     0B 00 00 FF 
266c4     C8 E4 85 F1 | 	sub	objptr, ##5832
266c8     F2 14 02 FB | 	rdlong	arg02, objptr
266cc     14 2B 02 F6 | 	mov	local03, local02
266d0     01 2A 06 F1 | 	add	local03, #1
266d4     07 2A 66 F0 | 	shl	local03, #7
266d8     15 15 02 F1 | 	add	arg02, local03
266dc     F4 03 00 FF 
266e0     00 12 06 F6 | 	mov	arg01, ##518144
266e4     80 16 06 F6 | 	mov	arg03, #128
266e8     0B 00 00 FF 
266ec     C8 E4 05 F1 | 	add	objptr, ##5832
266f0     60 08 B0 FD | 	call	#_psram_spin2_write
266f4     0B 00 00 FF 
266f8     CC E4 85 F1 | 	sub	objptr, ##5836
266fc     16 29 02 F1 | 	add	local02, local04
26700     17 29 0A F2 | 	cmp	local02, local05 wz
26704     8C FF 9F 5D |  if_ne	jmp	#LR__2992
26708                 | ' repeat i from 0 to 127
26708     00 28 06 F6 | 	mov	local02, #0
2670c                 | LR__2993
2670c                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
2670c     04 E4 05 F1 | 	add	objptr, #4
26710     F2 12 02 FB | 	rdlong	arg01, objptr
26714     13 2F 02 F6 | 	mov	local05, local01
26718     07 2E 66 F0 | 	shl	local05, #7
2671c     17 13 02 F1 | 	add	arg01, local05
26720     14 13 02 F1 | 	add	arg01, local02
26724     20 14 06 F6 | 	mov	arg02, #32
26728     01 16 06 F6 | 	mov	arg03, #1
2672c     00 18 06 F6 | 	mov	arg04, #0
26730     01 1A 06 F6 | 	mov	arg05, #1
26734     0B 00 00 FF 
26738     C8 E4 05 F1 | 	add	objptr, ##5832
2673c     B0 08 B0 FD | 	call	#_psram_spin2_fill
26740     0B 00 00 FF 
26744     CC E4 85 F1 | 	sub	objptr, ##5836
26748     01 28 06 F1 | 	add	local02, #1
2674c     80 28 56 F2 | 	cmps	local02, #128 wc
26750     B8 FF 9F CD |  if_b	jmp	#LR__2993
26754     A7 F0 03 F6 | 	mov	ptra, fp
26758     B2 00 A0 FD | 	call	#popregs_
2675c                 | _hg010b_spin2_scrolldown_ret
2675c     2D 00 64 FD | 	ret
26760                 | 
26760                 | ' 
26760                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
26760                 | ' 
26760                 | ' pub crlf()
26760                 | _hg010b_spin2_crlf
26760                 | ' 
26760                 | ' cursor_x:=leading_spaces*2
26760     01 00 00 FF 
26764     B6 E4 05 F1 | 	add	objptr, ##694
26768     F2 16 02 FB | 	rdlong	arg03, objptr
2676c     01 16 66 F0 | 	shl	arg03, #1
26770     01 00 00 FF 
26774     7A E4 85 F1 | 	sub	objptr, ##634
26778     F2 16 52 FC | 	wrword	arg03, objptr
2677c                 | ' cursor_y+=1
2677c     02 E4 05 F1 | 	add	objptr, #2
26780     F2 16 C2 FA | 	rdbyte	arg03, objptr
26784     01 16 06 F1 | 	add	arg03, #1
26788     F2 16 42 FC | 	wrbyte	arg03, objptr
2678c                 | ' if cursor_y>st_lines-1
2678c     C3 E4 05 F1 | 	add	objptr, #195
26790     F2 16 02 FB | 	rdlong	arg03, objptr
26794     01 16 86 F1 | 	sub	arg03, #1
26798     C3 E4 85 F1 | 	sub	objptr, #195
2679c     F2 14 C2 FA | 	rdbyte	arg02, objptr
267a0     3E E4 85 F1 | 	sub	objptr, #62
267a4     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
267a8     2C 00 90 ED |  if_be	jmp	#LR__3000
267ac                 | '   scrollup2()
267ac     00 12 06 F6 | 	mov	arg01, #0
267b0     01 00 00 FF 
267b4     58 14 06 F6 | 	mov	arg02, ##600
267b8     10 16 06 F6 | 	mov	arg03, #16
267bc     64 FB BF FD | 	call	#_hg010b_spin2_scrollup2
267c0                 | '   cursor_y:=st_lines-1
267c0     01 E5 05 F1 | 	add	objptr, #257
267c4     F2 16 02 FB | 	rdlong	arg03, objptr
267c8     01 16 86 F1 | 	sub	arg03, #1
267cc     C3 E4 85 F1 | 	sub	objptr, #195
267d0     F2 16 42 FC | 	wrbyte	arg03, objptr
267d4     3E E4 85 F1 | 	sub	objptr, #62
267d8                 | LR__3000
267d8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
267d8     3C E4 05 F1 | 	add	objptr, #60
267dc     F2 14 E2 FA | 	rdword	arg02, objptr
267e0     02 14 66 F0 | 	shl	arg02, #2
267e4     02 E4 05 F1 | 	add	objptr, #2
267e8     F2 16 C2 FA | 	rdbyte	arg03, objptr
267ec     3E E4 85 F1 | 	sub	objptr, #62
267f0     04 16 66 F0 | 	shl	arg03, #4
267f4     04 16 06 F1 | 	add	arg03, #4
267f8     11 12 06 F6 | 	mov	arg01, #17
267fc     04 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
26800                 | _hg010b_spin2_crlf_ret
26800     2D 00 64 FD | 	ret
26804                 | 
26804                 | ' 
26804                 | ' 
26804                 | ' '*************************************************************************
26804                 | ' '                                                                        *
26804                 | ' '  Conversions                                                           *
26804                 | ' '                                                                        *
26804                 | ' '*************************************************************************
26804                 | ' 
26804                 | ' ''---------- Convert a integer to dec string, return a pointer
26804                 | ' 
26804                 | ' pub inttostr(i):result |q,pos,k,j
26804                 | _hg010b_spin2_inttostr
26804     03 4A 05 F6 | 	mov	COUNT_, #3
26808     A8 00 A0 FD | 	call	#pushregs_
2680c     09 27 0A F6 | 	mov	local01, arg01 wz
26810                 | ' 
26810                 | ' j:=i
26810                 | ' pos:=10
26810     0A 28 06 F6 | 	mov	local02, #10
26814                 | ' k:=0
26814     00 2A 06 F6 | 	mov	local03, #0
26818                 | ' 
26818                 | ' if (j==0)
26818     18 00 90 5D |  if_ne	jmp	#LR__3010
2681c                 | '   n_string[0]:=48
2681c     4D E4 05 F1 | 	add	objptr, #77
26820     F2 60 48 FC | 	wrbyte	#48, objptr
26824                 | '   n_string[1]:=0
26824     01 E4 05 F1 | 	add	objptr, #1
26828     F2 00 48 FC | 	wrbyte	#0, objptr
2682c     4E E4 85 F1 | 	sub	objptr, #78
26830     C4 00 90 FD | 	jmp	#LR__3017
26834                 | LR__3010
26834                 | ' 
26834                 | ' else
26834                 | '   if (j<0)
26834     13 27 52 F6 | 	abs	local01, local01 wc
26838                 | '     j:=0-j
26838                 | '     k:=45
26838     2D 2A 06 C6 |  if_b	mov	local03, #45
2683c                 | ' 
2683c                 | '   n_string[11]:=0
2683c     58 E4 05 F1 | 	add	objptr, #88
26840     F2 00 48 FC | 	wrbyte	#0, objptr
26844     58 E4 85 F1 | 	sub	objptr, #88
26848     97 24 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
2684c                 | '   repeat while (pos>-1)
2684c                 | LR__3011
2684c     00 28 56 F2 | 	cmps	local02, #0 wc
26850     40 00 90 CD |  if_b	jmp	#LR__3013
26854     13 FB 51 F6 | 	abs	result1, local01 wc
26858     0A FA 15 FD | 	qdiv	result1, #10
2685c                 | '     q:=j//10
2685c     19 FA 61 FD | 	getqy	result1
26860     FD FA 81 F6 | 	negc	result1, result1
26864     13 27 52 F6 | 	abs	local01, local01 wc
26868     0A 26 16 FD | 	qdiv	local01, #10
2686c                 | '     q:=48+q
2686c     30 FA 05 F1 | 	add	result1, #48
26870                 | '     n_string[pos]:=q
26870     14 27 02 F6 | 	mov	local01, local02
26874     4D E4 05 F1 | 	add	objptr, #77
26878     F2 26 02 F1 | 	add	local01, objptr
2687c     13 FB 41 FC | 	wrbyte	result1, local01
26880                 | '     j:=j/10
26880     4D E4 85 F1 | 	sub	objptr, #77
26884                 | '     pos-=1
26884     01 28 86 F1 | 	sub	local02, #1
26888     18 26 62 FD | 	getqx	local01
2688c     13 27 82 F6 | 	negc	local01, local01
26890     B8 FF 9F FD | 	jmp	#LR__3011
26894                 | LR__3012
26894                 | LR__3013
26894                 | '   repeat while n_string[0]==48
26894                 | LR__3014
26894     4D E4 05 F1 | 	add	objptr, #77
26898     F2 16 C2 FA | 	rdbyte	arg03, objptr
2689c     4D E4 85 F1 | 	sub	objptr, #77
268a0     30 16 0E F2 | 	cmp	arg03, #48 wz
268a4     20 00 90 5D |  if_ne	jmp	#LR__3015
268a8                 | '     bytemove(@n_string,@n_string+1,12)
268a8     4D E4 05 F1 | 	add	objptr, #77
268ac     F2 12 02 F6 | 	mov	arg01, objptr
268b0     F2 14 02 F6 | 	mov	arg02, objptr
268b4     4D E4 85 F1 | 	sub	objptr, #77
268b8     01 14 06 F1 | 	add	arg02, #1
268bc     0C 16 06 F6 | 	mov	arg03, #12
268c0     48 11 B0 FD | 	call	#__system____builtin_memmove
268c4     CC FF 9F FD | 	jmp	#LR__3014
268c8                 | LR__3015
268c8                 | ' 
268c8                 | '   if k==45
268c8     2D 2A 0E F2 | 	cmp	local03, #45 wz
268cc     28 00 90 5D |  if_ne	jmp	#LR__3016
268d0                 | '      bytemove(@n_string+1,@n_string,12)
268d0     4D E4 05 F1 | 	add	objptr, #77
268d4     F2 12 02 F6 | 	mov	arg01, objptr
268d8     01 12 06 F1 | 	add	arg01, #1
268dc     F2 14 02 F6 | 	mov	arg02, objptr
268e0     4D E4 85 F1 | 	sub	objptr, #77
268e4     0C 16 06 F6 | 	mov	arg03, #12
268e8     20 11 B0 FD | 	call	#__system____builtin_memmove
268ec                 | '      n_string[0]:=k
268ec     4D E4 05 F1 | 	add	objptr, #77
268f0     F2 2A 42 FC | 	wrbyte	local03, objptr
268f4     4D E4 85 F1 | 	sub	objptr, #77
268f8                 | LR__3016
268f8                 | LR__3017
268f8                 | ' 
268f8                 | ' q:=@n_string
268f8     4D E4 05 F1 | 	add	objptr, #77
268fc     F2 FA 01 F6 | 	mov	result1, objptr
26900     4D E4 85 F1 | 	sub	objptr, #77
26904                 | ' return q
26904     A7 F0 03 F6 | 	mov	ptra, fp
26908     B2 00 A0 FD | 	call	#popregs_
2690c                 | _hg010b_spin2_inttostr_ret
2690c     2D 00 64 FD | 	ret
26910                 | 
26910                 | ' 
26910                 | ' '**********************************************************************************
26910                 | ' '
26910                 | ' '        Blitting
26910                 | ' '
26910                 | ' '**********************************************************************************
26910                 | ' 
26910                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
26910                 | _hg010b_spin2_blit
26910     18 4A 05 F6 | 	mov	COUNT_, #24
26914     A8 00 A0 FD | 	call	#pushregs_
26918     09 27 02 F6 | 	mov	local01, arg01
2691c     0A 29 02 F6 | 	mov	local02, arg02
26920     0B 2B 02 F6 | 	mov	local03, arg03
26924     0C 2D 02 F6 | 	mov	local04, arg04
26928     0D 2F 02 F6 | 	mov	local05, arg05
2692c     0E 31 02 F6 | 	mov	local06, arg06
26930     0F 33 02 F6 | 	mov	local07, arg07
26934     10 35 02 F6 | 	mov	local08, arg08
26938     11 37 02 F6 | 	mov	local09, arg09
2693c     12 39 02 F6 | 	mov	local10, arg10
26940                 | ' 
26940                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
26940     00 04 00 FF 
26944     00 26 56 F2 | 	cmps	local01, ##524288 wc
26948     00 04 00 3F 
2694c     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
26950     98 01 90 CD |  if_b	jmp	#LR__3024
26954     16 29 5A F2 | 	cmps	local02, local04 wcz
26958     14 3B 02 16 |  if_a	mov	local11, local02
2695c     16 29 02 16 |  if_a	mov	local02, local04
26960     1D 2D 02 16 |  if_a	mov	local04, local11
26964     17 2B 5A F2 | 	cmps	local03, local05 wcz
26968     15 3B 02 16 |  if_a	mov	local11, local03
2696c     17 2B 02 16 |  if_a	mov	local03, local05
26970     18 2B 02 FD | 	qmul	local03, local06
26974                 | '   if x1a>x2a
26974                 | '     x1a,x2a:=x2a,x1a
26974                 | '   if y1a>y2a
26974                 | '     y1a,y2a:=y2a,y1a  
26974     1D 2F 02 16 |  if_a	mov	local05, local11
26978                 | '   if x2a-x1a>1023 
26978     16 3B 02 F6 | 	mov	local11, local04
2697c     14 3B 82 F1 | 	sub	local11, local02
26980     02 00 00 FF 
26984     00 3A 56 F2 | 	cmps	local11, ##1024 wc
26988                 | '     x2a:=x1a+1023 ' limit the line to 1024
26988     14 2D 02 36 |  if_ae	mov	local04, local02
2698c     01 00 00 3F 
26990     FF 2D 06 31 |  if_ae	add	local04, ##1023
26994                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
26994     19 3D 02 F6 | 	mov	local12, local07
26998     14 3D 02 F1 | 	add	local12, local02
2699c     18 3A 62 FD | 	getqx	local11
269a0     1C 37 02 FD | 	qmul	local09, local10
269a4     1D 3D 02 F1 | 	add	local12, local11
269a8     13 3F 02 F6 | 	mov	local13, local01
269ac     1A 3F 02 F1 | 	add	local13, local08
269b0     18 3A 62 FD | 	getqx	local11
269b4     1D 3F 02 F1 | 	add	local13, local11
269b8     1F 3D 5A F2 | 	cmps	local12, local13 wcz
269bc     98 00 90 ED |  if_be	jmp	#LR__3021
269c0                 | '     repeat y from y1a to y2a
269c0     15 41 02 F6 | 	mov	local14, local03
269c4     15 2F 52 F2 | 	cmps	local05, local03 wc
269c8     01 42 86 F6 | 	negc	local15, #1
269cc     17 45 02 F6 | 	mov	local16, local05
269d0     21 45 02 F1 | 	add	local16, local15
269d4     0B 00 00 FF 
269d8     CC E4 05 F1 | 	add	objptr, ##5836
269dc                 | LR__3020
269dc     18 41 02 FD | 	qmul	local14, local06
269e0                 | '   '    writeln(string("I am here"))
269e0                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
269e0     13 15 02 F6 | 	mov	arg02, local01
269e4     16 17 02 F6 | 	mov	arg03, local04
269e8     14 17 82 F1 | 	sub	arg03, local02
269ec     01 16 06 F1 | 	add	arg03, #1
269f0     F4 03 00 FF 
269f4     00 12 06 F6 | 	mov	arg01, ##518144
269f8     18 3E 62 FD | 	getqx	local13
269fc     1F 15 02 F1 | 	add	arg02, local13
26a00     14 15 02 F1 | 	add	arg02, local02
26a04     B0 04 B0 FD | 	call	#_psram_spin2_read1
26a08     1B 3F 02 F6 | 	mov	local13, local09
26a0c     15 3F 82 F1 | 	sub	local13, local03
26a10     20 3F 02 F1 | 	add	local13, local14
26a14     1C 3F 02 FD | 	qmul	local13, local10
26a18                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
26a18     19 15 02 F6 | 	mov	arg02, local07
26a1c     16 17 02 F6 | 	mov	arg03, local04
26a20     14 17 82 F1 | 	sub	arg03, local02
26a24     01 16 06 F1 | 	add	arg03, #1
26a28     F4 03 00 FF 
26a2c     00 12 06 F6 | 	mov	arg01, ##518144
26a30     18 3E 62 FD | 	getqx	local13
26a34     1F 15 02 F1 | 	add	arg02, local13
26a38     1A 15 02 F1 | 	add	arg02, local08
26a3c     14 05 B0 FD | 	call	#_psram_spin2_write
26a40     21 41 02 F1 | 	add	local14, local15
26a44     22 41 0A F2 | 	cmp	local14, local16 wz
26a48     90 FF 9F 5D |  if_ne	jmp	#LR__3020
26a4c     0B 00 00 FF 
26a50     CC E4 85 F1 | 	sub	objptr, ##5836
26a54     94 00 90 FD | 	jmp	#LR__3023
26a58                 | LR__3021
26a58                 | '   else
26a58                 | '     repeat y from y2a to y1a
26a58     17 41 02 F6 | 	mov	local14, local05
26a5c     17 2B 52 F2 | 	cmps	local03, local05 wc
26a60     01 46 86 F6 | 	negc	local17, #1
26a64     15 49 02 F6 | 	mov	local18, local03
26a68     23 49 02 F1 | 	add	local18, local17
26a6c     0B 00 00 FF 
26a70     CC E4 05 F1 | 	add	objptr, ##5836
26a74                 | LR__3022
26a74     18 41 02 FD | 	qmul	local14, local06
26a78                 | '  '     writeln(string("I am there"))
26a78                 | '       ram.read1($7E800, f+(y)*s1+x1a, x2a-x1a+1)
26a78     13 15 02 F6 | 	mov	arg02, local01
26a7c     16 17 02 F6 | 	mov	arg03, local04
26a80     14 17 82 F1 | 	sub	arg03, local02
26a84     01 16 06 F1 | 	add	arg03, #1
26a88     F4 03 00 FF 
26a8c     00 12 06 F6 | 	mov	arg01, ##518144
26a90     18 44 62 FD | 	getqx	local16
26a94     22 15 02 F1 | 	add	arg02, local16
26a98     14 15 02 F1 | 	add	arg02, local02
26a9c     18 04 B0 FD | 	call	#_psram_spin2_read1
26aa0     1B 45 02 F6 | 	mov	local16, local09
26aa4     15 45 82 F1 | 	sub	local16, local03
26aa8     20 45 02 F1 | 	add	local16, local14
26aac     1C 45 02 FD | 	qmul	local16, local10
26ab0                 | '       ram.write($7E800, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
26ab0     19 15 02 F6 | 	mov	arg02, local07
26ab4     16 17 02 F6 | 	mov	arg03, local04
26ab8     14 17 82 F1 | 	sub	arg03, local02
26abc     01 16 06 F1 | 	add	arg03, #1
26ac0     F4 03 00 FF 
26ac4     00 12 06 F6 | 	mov	arg01, ##518144
26ac8     18 44 62 FD | 	getqx	local16
26acc     22 15 02 F1 | 	add	arg02, local16
26ad0     1A 15 02 F1 | 	add	arg02, local08
26ad4     7C 04 B0 FD | 	call	#_psram_spin2_write
26ad8     23 41 02 F1 | 	add	local14, local17
26adc     24 41 0A F2 | 	cmp	local14, local18 wz
26ae0     90 FF 9F 5D |  if_ne	jmp	#LR__3022
26ae4     0B 00 00 FF 
26ae8     CC E4 85 F1 | 	sub	objptr, ##5836
26aec                 | LR__3023
26aec                 | LR__3024
26aec                 | '     
26aec                 | ' if ((f>=$80000) && (t<$80000)) 
26aec     00 04 00 FF 
26af0     00 26 56 F2 | 	cmps	local01, ##524288 wc
26af4     80 00 90 CD |  if_b	jmp	#LR__3026
26af8     00 04 00 FF 
26afc     00 32 56 F2 | 	cmps	local07, ##524288 wc
26b00     74 00 90 3D |  if_ae	jmp	#LR__3026
26b04                 | '   repeat y from y1a to y2a
26b04     15 41 02 F6 | 	mov	local14, local03
26b08     15 2F 52 F2 | 	cmps	local05, local03 wc
26b0c     01 4A 86 F6 | 	negc	local19, #1
26b10     17 4D 02 F6 | 	mov	local20, local05
26b14     25 4D 02 F1 | 	add	local20, local19
26b18     0B 00 00 FF 
26b1c     CC E4 05 F1 | 	add	objptr, ##5836
26b20                 | LR__3025
26b20     1B 49 02 F6 | 	mov	local18, local09
26b24     15 49 82 F1 | 	sub	local18, local03
26b28     20 49 02 F1 | 	add	local18, local14
26b2c     1C 49 02 FD | 	qmul	local18, local10
26b30                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
26b30     19 13 02 F6 | 	mov	arg01, local07
26b34     18 48 62 FD | 	getqx	local18
26b38     18 41 02 FD | 	qmul	local14, local06
26b3c     24 13 02 F1 | 	add	arg01, local18
26b40     1A 13 02 F1 | 	add	arg01, local08
26b44     13 15 02 F6 | 	mov	arg02, local01
26b48     16 17 02 F6 | 	mov	arg03, local04
26b4c     14 17 82 F1 | 	sub	arg03, local02
26b50     01 16 06 F1 | 	add	arg03, #1
26b54     18 48 62 FD | 	getqx	local18
26b58     24 15 02 F1 | 	add	arg02, local18
26b5c     14 15 02 F1 | 	add	arg02, local02
26b60     54 03 B0 FD | 	call	#_psram_spin2_read1
26b64     25 41 02 F1 | 	add	local14, local19
26b68     26 41 0A F2 | 	cmp	local14, local20 wz
26b6c     B0 FF 9F 5D |  if_ne	jmp	#LR__3025
26b70     0B 00 00 FF 
26b74     CC E4 85 F1 | 	sub	objptr, ##5836
26b78                 | LR__3026
26b78                 | '     
26b78                 | ' if ((f<$80000) && (t>=$80000)) 
26b78     00 04 00 FF 
26b7c     00 26 56 F2 | 	cmps	local01, ##524288 wc
26b80     84 00 90 3D |  if_ae	jmp	#LR__3028
26b84     00 04 00 FF 
26b88     00 32 56 F2 | 	cmps	local07, ##524288 wc
26b8c     78 00 90 CD |  if_b	jmp	#LR__3028
26b90                 | '   t:=t & $FFFFFFF
26b90     7C 32 06 F4 | 	bitl	local07, #124
26b94                 | '   repeat y from y1a to y2a
26b94     15 41 02 F6 | 	mov	local14, local03
26b98     15 2F 52 F2 | 	cmps	local05, local03 wc
26b9c     01 4E 86 F6 | 	negc	local21, #1
26ba0     17 51 02 F6 | 	mov	local22, local05
26ba4     27 51 02 F1 | 	add	local22, local21
26ba8     0B 00 00 FF 
26bac     CC E4 05 F1 | 	add	objptr, ##5836
26bb0                 | LR__3027
26bb0     18 41 02 FD | 	qmul	local14, local06
26bb4                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
26bb4     13 13 02 F6 | 	mov	arg01, local01
26bb8     1B 4D 02 F6 | 	mov	local20, local09
26bbc     15 4D 82 F1 | 	sub	local20, local03
26bc0     20 4D 02 F1 | 	add	local20, local14
26bc4     18 4A 62 FD | 	getqx	local19
26bc8     1C 4D 02 FD | 	qmul	local20, local10
26bcc     25 13 02 F1 | 	add	arg01, local19
26bd0     14 13 02 F1 | 	add	arg01, local02
26bd4     19 15 02 F6 | 	mov	arg02, local07
26bd8     16 17 02 F6 | 	mov	arg03, local04
26bdc     14 17 82 F1 | 	sub	arg03, local02
26be0     01 16 06 F1 | 	add	arg03, #1
26be4     18 4C 62 FD | 	getqx	local20
26be8     26 15 02 F1 | 	add	arg02, local20
26bec     1A 15 02 F1 | 	add	arg02, local08
26bf0     60 03 B0 FD | 	call	#_psram_spin2_write
26bf4     27 41 02 F1 | 	add	local14, local21
26bf8     28 41 0A F2 | 	cmp	local14, local22 wz
26bfc     B0 FF 9F 5D |  if_ne	jmp	#LR__3027
26c00     0B 00 00 FF 
26c04     CC E4 85 F1 | 	sub	objptr, ##5836
26c08                 | LR__3028
26c08                 | '     
26c08                 | ' if ((f<$80000) && (t<$80000)) 
26c08     00 04 00 FF 
26c0c     00 26 56 F2 | 	cmps	local01, ##524288 wc
26c10     00 04 00 CF 
26c14     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
26c18     64 00 90 3D |  if_ae	jmp	#LR__3030
26c1c                 | '   repeat y from y1a to y2a
26c1c     15 41 02 F6 | 	mov	local14, local03
26c20     15 2F 52 F2 | 	cmps	local05, local03 wc
26c24     01 52 86 F6 | 	negc	local23, #1
26c28     17 55 02 F6 | 	mov	local24, local05
26c2c     29 55 02 F1 | 	add	local24, local23
26c30                 | LR__3029
26c30     18 41 02 FD | 	qmul	local14, local06
26c34                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
26c34     13 13 02 F6 | 	mov	arg01, local01
26c38     1B 51 02 F6 | 	mov	local22, local09
26c3c     15 51 82 F1 | 	sub	local22, local03
26c40     20 51 02 F1 | 	add	local22, local14
26c44     18 4E 62 FD | 	getqx	local21
26c48     1C 51 02 FD | 	qmul	local22, local10
26c4c     27 13 02 F1 | 	add	arg01, local21
26c50     14 13 02 F1 | 	add	arg01, local02
26c54     19 15 02 F6 | 	mov	arg02, local07
26c58     16 17 02 F6 | 	mov	arg03, local04
26c5c     14 17 82 F1 | 	sub	arg03, local02
26c60     01 16 06 F1 | 	add	arg03, #1
26c64     18 50 62 FD | 	getqx	local22
26c68     28 15 02 F1 | 	add	arg02, local22
26c6c     1A 15 02 F1 | 	add	arg02, local08
26c70     98 0D B0 FD | 	call	#__system____builtin_memmove
26c74     29 41 02 F1 | 	add	local14, local23
26c78     2A 41 0A F2 | 	cmp	local14, local24 wz
26c7c     B0 FF 9F 5D |  if_ne	jmp	#LR__3029
26c80                 | LR__3030
26c80     A7 F0 03 F6 | 	mov	ptra, fp
26c84     B2 00 A0 FD | 	call	#popregs_
26c88                 | _hg010b_spin2_blit_ret
26c88     2D 00 64 FD | 	ret
26c8c                 | 
26c8c                 | ' 
26c8c                 | ' '..............................................................................
26c8c                 | ' 
26c8c                 | ' {{
26c8c                 | ' }}
26c8c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
26c8c                 | _psram_spin2_startx
26c8c     04 4A 05 F6 | 	mov	COUNT_, #4
26c90     A8 00 A0 FD | 	call	#pushregs_
26c94     09 27 02 F6 | 	mov	local01, arg01
26c98     0B 29 02 F6 | 	mov	local02, arg03
26c9c     0C 2B 02 F6 | 	mov	local03, arg04
26ca0                 | '     stop() ' restart driver if required
26ca0     54 01 B0 FD | 	call	#_psram_spin2_stop
26ca4     00 26 0E F2 | 	cmp	local01, #0 wz
26ca8     14 26 06 AB |  if_e	rdlong	local01, #20
26cac     13 15 52 F6 | 	abs	arg02, local01 wc
26cb0     A1 07 00 FF 
26cb4     40 14 16 FD | 	qdiv	arg02, ##1000000
26cb8                 | ' 
26cb8                 | '     ' use current frequency if none specified
26cb8                 | ' 
26cb8                 | '     if freq == 0 
26cb8                 | '         freq := clkfreq 
26cb8                 | ' 
26cb8                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
26cb8                 | ' 
26cb8                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
26cb8                 | '     if burst < 0
26cb8                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
26cb8     18 14 62 FD | 	getqx	arg02
26cbc     0A 19 82 F6 | 	negc	arg04, arg02
26cc0     03 18 66 F0 | 	shl	arg04, #3
26cc4     84 18 86 F1 | 	sub	arg04, #132
26cc8     04 18 46 F0 | 	shr	arg04, #4
26ccc     04 18 66 F0 | 	shl	arg04, #4
26cd0     00 18 56 F2 | 	cmps	arg04, #0 wc
26cd4     0E FA 65 C6 |  if_b	neg	result1, #14
26cd8     10 01 90 CD |  if_b	jmp	#LR__3043
26cdc                 | ' 
26cdc                 | '     ' compute the input delay
26cdc                 | ' 
26cdc                 | '     if delay <= 0
26cdc     01 28 56 F2 | 	cmps	local02, #1 wc
26ce0     10 00 90 3D |  if_ae	jmp	#LR__3040
26ce4                 | '         delay := lookupDelay(freq)
26ce4     13 13 02 F6 | 	mov	arg01, local01
26ce8     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
26cec     FD 28 02 F6 | 	mov	local02, result1
26cf0     04 00 90 FD | 	jmp	#LR__3041
26cf4                 | LR__3040
26cf4                 | '     else
26cf4                 | '         delay <#= $f ' limit to 15
26cf4     0F 28 66 F3 | 	fles	local02, #15
26cf8                 | LR__3041
26cf8                 | ' 
26cf8                 | '     ' create our lock
26cf8                 | ' 
26cf8                 | '     driverlock := LOCKNEW()  
26cf8     00 FA 05 F6 | 	mov	result1, #0
26cfc     04 FA 61 FD | 	locknew	result1
26d00     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
26d04     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
26d08                 | '     if driverlock == -1
26d08     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
26d0c     FF FF 7F FF 
26d10     FF FB 0D F2 | 	cmp	result1, ##-1 wz
26d14                 | '         return ERR_NO_LOCK
26d14     1A FA 65 A6 |  if_e	neg	result1, #26
26d18     D0 00 90 AD |  if_e	jmp	#LR__3043
26d1c                 | ' 
26d1c                 | '     ' patch in the proper data and HUB addresses to the startup structure
26d1c                 | ' 
26d1c                 | '     long[@startupData][0]:=clkfreq
26d1c     14 26 06 FB | 	rdlong	local01, #20
26d20     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
26d24     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
26d28                 | ' '    long[@startupData][1]:=$1000_0000
26d28                 | '     long[@startupData][5]:=@deviceData
26d28     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
26d2c     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
26d30     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
26d34     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
26d38     14 14 06 F1 | 	add	arg02, #20
26d3c     0A 27 62 FC | 	wrlong	local01, arg02
26d40                 | '     long[@startupData][6]:=@qosData
26d40     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
26d44     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
26d48     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
26d4c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
26d50     18 14 06 F1 | 	add	arg02, #24
26d54     0A 27 62 FC | 	wrlong	local01, arg02
26d58                 | '     long[@startupData][7]:=$7FF00
26d58     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
26d5c     1C 26 06 F1 | 	add	local01, #28
26d60     FF 03 80 FF 
26d64     13 01 6A FC | 	wrlong	##524032, local01
26d68                 | ' 
26d68                 | '     ' setup some default bank and QoS parameter values
26d68                 | ' 
26d68                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
26d68     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
26d6c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
26d70     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
26d74     10 18 66 F0 | 	shl	arg04, #16
26d78     0C 28 66 F0 | 	shl	local02, #12
26d7c     14 19 42 F5 | 	or	arg04, local02
26d80     18 18 46 F5 | 	or	arg04, #24
26d84     0C 15 02 F6 | 	mov	arg02, arg04
26d88     02 16 06 F6 | 	mov	arg03, #2
26d8c     A0 00 A0 FD | 	call	#\builtin_longfill_
26d90                 | '     longfill(@qosData, $FFFF0000, 8)
26d90     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
26d94     07 16 06 F6 | 	mov	arg03, #7
26d98     28 16 62 FD | 	setq	arg03
26d9c     80 FF FF FF 
26da0     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
26da4                 | ' 
26da4                 | '     ' get the address of the PSRAM memory driver so we can start it
26da4                 | ' 
26da4                 | '     driverAddr:= driver.getDriverAddr()
26da4                 | '     return @driver_start
26da4     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
26da8     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
26dac     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
26db0                 | ' 
26db0                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
26db0                 | ' 
26db0                 | '     if desiredcog < 0
26db0     00 2A 56 F2 | 	cmps	local03, #0 wc
26db4                 | '         desiredcog := NEWCOG
26db4     10 2A 06 C6 |  if_b	mov	local03, #16
26db8                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
26db8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
26dbc     15 2D 02 F6 | 	mov	local04, local03
26dc0     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
26dc4     0A 2D F2 FC | 	coginit	local04, arg02 wc
26dc8     01 2C 66 C6 |  if_b	neg	local04, #1
26dcc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
26dd0     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
26dd4                 | '     repeat until long[@startupData] == 0 
26dd4     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
26dd8                 | LR__3042
26dd8     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
26ddc     F8 FF 9F 5D |  if_ne	jmp	#LR__3042
26de0                 | ' 
26de0                 | '     return drivercog
26de0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
26de4     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
26de8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26dec                 | LR__3043
26dec     A7 F0 03 F6 | 	mov	ptra, fp
26df0     B2 00 A0 FD | 	call	#popregs_
26df4                 | _psram_spin2_startx_ret
26df4     2D 00 64 FD | 	ret
26df8                 | 
26df8                 | ' 
26df8                 | ' '..............................................................................
26df8                 | ' 
26df8                 | ' {{
26df8                 | ' }}
26df8                 | ' PUB stop() : i
26df8                 | _psram_spin2_stop
26df8     00 00 06 F6 | 	mov	_var01, #0
26dfc                 | '     if drivercog <> -1
26dfc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26e00     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26e04     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26e08     FF FF 7F FF 
26e0c     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
26e10     70 00 90 AD |  if_e	jmp	#LR__3053
26e14                 | '         cogstop(drivercog) ' a rather brutal stop
26e14     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26e18     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26e1c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26e20     03 12 62 FD | 	cogstop	arg01
26e24     97 26 48 FB | 	callpa	#(@LR__3052-@LR__3050)>>2,fcache_load_ptr_
26e28                 | '         repeat i from 0 to 7
26e28                 | LR__3050
26e28                 | '             if long[$7FF00][i*3] < 0
26e28     00 FB 01 F6 | 	mov	result1, _var01
26e2c     01 FA 65 F0 | 	shl	result1, #1
26e30     00 FB 01 F1 | 	add	result1, _var01
26e34     02 FA 65 F0 | 	shl	result1, #2
26e38     FF 03 00 FF 
26e3c     00 FB 05 F1 | 	add	result1, ##524032
26e40     FD FA 01 FB | 	rdlong	result1, result1
26e44     00 FA 55 F2 | 	cmps	result1, #0 wc
26e48     1C 00 90 3D |  if_ae	jmp	#LR__3051
26e4c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
26e4c     00 FB 01 F6 | 	mov	result1, _var01
26e50     01 FA 65 F0 | 	shl	result1, #1
26e54     00 FB 01 F1 | 	add	result1, _var01
26e58     02 FA 65 F0 | 	shl	result1, #2
26e5c     FF 03 00 FF 
26e60     00 FB 05 F1 | 	add	result1, ##524032
26e64     FD 20 68 FC | 	wrlong	#16, result1
26e68                 | LR__3051
26e68     01 00 06 F1 | 	add	_var01, #1
26e6c     08 00 56 F2 | 	cmps	_var01, #8 wc
26e70     B4 FF 9F CD |  if_b	jmp	#LR__3050
26e74                 | LR__3052
26e74                 | '         drivercog := -1
26e74     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26e78     FF FF FF FF 
26e7c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
26e80     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26e84                 | LR__3053
26e84                 | '     if driverlock <> -1
26e84     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
26e88     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
26e8c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
26e90     FF FF 7F FF 
26e94     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
26e98                 | '         LOCKRET(driverlock)
26e98     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
26e9c     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
26ea0     05 12 62 5D |  if_ne	lockret	arg01
26ea4                 | '         driverlock := -1
26ea4     FF FF FF 5F 
26ea8     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
26eac     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
26eb0     00 FB 01 F6 | 	mov	result1, _var01
26eb4                 | _psram_spin2_stop_ret
26eb4     2D 00 64 FD | 	ret
26eb8                 | 
26eb8                 | ' 
26eb8                 | ' '..............................................................................
26eb8                 | ' 
26eb8                 | ' {{
26eb8                 | ' }}
26eb8                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
26eb8                 | _psram_spin2_read1
26eb8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
26eb8                 | '     if drivercog == -1 ' driver must be running
26eb8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26ebc     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
26ec0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26ec4     FF FF 7F FF 
26ec8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
26ecc                 | '         return ERR_INACTIVE
26ecc     0F FA 65 A6 |  if_e	neg	result1, #15
26ed0     7C 00 90 AD |  if_e	jmp	#LR__3061
26ed4                 | '     if count == 0 ' don't even bother reading
26ed4     00 16 0E F2 | 	cmp	arg03, #0 wz
26ed8                 | '         return 0
26ed8     00 FA 05 A6 |  if_e	mov	result1, #0
26edc     70 00 90 AD |  if_e	jmp	#LR__3061
26ee0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
26ee0     00 FA 05 F6 | 	mov	result1, #0
26ee4     01 FA 61 FD | 	cogid	result1
26ee8     FD 00 02 F6 | 	mov	_var01, result1
26eec     01 00 66 F0 | 	shl	_var01, #1
26ef0     FD 00 02 F1 | 	add	_var01, result1
26ef4     02 00 66 F0 | 	shl	_var01, #2
26ef8     FF 03 00 FF 
26efc     00 03 06 F6 | 	mov	_var02, ##524032
26f00     00 03 02 F1 | 	add	_var02, _var01
26f04                 | '     if long[mailbox] < 0
26f04     01 01 02 FB | 	rdlong	_var01, _var02
26f08     00 00 56 F2 | 	cmps	_var01, #0 wc
26f0c                 | '         return ERR_MAILBOX_BUSY
26f0c     1C FA 65 C6 |  if_b	neg	result1, #28
26f10     3C 00 90 CD |  if_b	jmp	#LR__3061
26f14                 | '     long[mailbox][2] := count
26f14     08 02 06 F1 | 	add	_var02, #8
26f18     01 17 62 FC | 	wrlong	arg03, _var02
26f1c                 | '     long[mailbox][1] := dstHubAddr
26f1c     04 02 86 F1 | 	sub	_var02, #4
26f20     01 13 62 FC | 	wrlong	arg01, _var02
26f24     04 02 86 F1 | 	sub	_var02, #4
26f28                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
26f28     0A 05 02 F6 | 	mov	_var03, arg02
26f2c     D9 04 06 F4 | 	bitl	_var03, #217
26f30     00 00 58 FF 
26f34     00 00 06 F6 | 	mov	_var01, ##-1342177280
26f38     02 01 02 F1 | 	add	_var01, _var03
26f3c     01 01 62 FC | 	wrlong	_var01, _var02
26f40                 | '     repeat
26f40                 | LR__3060
26f40                 | '         result := long[mailbox]    
26f40     01 05 02 FB | 	rdlong	_var03, _var02
26f44     00 04 56 F2 | 	cmps	_var03, #0 wc
26f48     F4 FF 9F CD |  if_b	jmp	#LR__3060
26f4c                 | '     while result < 0   
26f4c                 | '     return -result                       'return success or error
26f4c     02 FB 61 F6 | 	neg	result1, _var03
26f50                 | LR__3061
26f50                 | _psram_spin2_read1_ret
26f50     2D 00 64 FD | 	ret
26f54                 | 
26f54                 | ' 
26f54                 | ' '..............................................................................
26f54                 | ' 
26f54                 | ' {{
26f54                 | ' }}
26f54                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
26f54                 | _psram_spin2_write
26f54                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
26f54                 | '     if drivercog == -1 ' driver must be running
26f54     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26f58     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
26f5c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26f60     FF FF 7F FF 
26f64     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
26f68                 | '         return ERR_INACTIVE
26f68     0F FA 65 A6 |  if_e	neg	result1, #15
26f6c     7C 00 90 AD |  if_e	jmp	#LR__3071
26f70                 | '     if count == 0 ' don't even bother writing
26f70     00 16 0E F2 | 	cmp	arg03, #0 wz
26f74                 | '         return 0
26f74     00 FA 05 A6 |  if_e	mov	result1, #0
26f78     70 00 90 AD |  if_e	jmp	#LR__3071
26f7c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
26f7c     00 FA 05 F6 | 	mov	result1, #0
26f80     01 FA 61 FD | 	cogid	result1
26f84     FD 00 02 F6 | 	mov	_var01, result1
26f88     01 00 66 F0 | 	shl	_var01, #1
26f8c     FD 00 02 F1 | 	add	_var01, result1
26f90     02 00 66 F0 | 	shl	_var01, #2
26f94     FF 03 00 FF 
26f98     00 03 06 F6 | 	mov	_var02, ##524032
26f9c     00 03 02 F1 | 	add	_var02, _var01
26fa0                 | '     if long[mailbox] < 0
26fa0     01 01 02 FB | 	rdlong	_var01, _var02
26fa4     00 00 56 F2 | 	cmps	_var01, #0 wc
26fa8                 | '         return ERR_MAILBOX_BUSY
26fa8     1C FA 65 C6 |  if_b	neg	result1, #28
26fac     3C 00 90 CD |  if_b	jmp	#LR__3071
26fb0                 | '     long[mailbox][2] := count
26fb0     08 02 06 F1 | 	add	_var02, #8
26fb4     01 17 62 FC | 	wrlong	arg03, _var02
26fb8                 | '     long[mailbox][1] := srcHubAddr
26fb8     04 02 86 F1 | 	sub	_var02, #4
26fbc     01 13 62 FC | 	wrlong	arg01, _var02
26fc0     04 02 86 F1 | 	sub	_var02, #4
26fc4                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
26fc4     0A 05 02 F6 | 	mov	_var03, arg02
26fc8     D9 04 06 F4 | 	bitl	_var03, #217
26fcc     00 00 78 FF 
26fd0     00 00 06 F6 | 	mov	_var01, ##-268435456
26fd4     02 01 02 F1 | 	add	_var01, _var03
26fd8     01 01 62 FC | 	wrlong	_var01, _var02
26fdc                 | '     repeat
26fdc                 | LR__3070
26fdc                 | '         result := long[mailbox]    
26fdc     01 05 02 FB | 	rdlong	_var03, _var02
26fe0     00 04 56 F2 | 	cmps	_var03, #0 wc
26fe4     F4 FF 9F CD |  if_b	jmp	#LR__3070
26fe8                 | '     while result < 0   
26fe8                 | '     return -result                       'return success or error
26fe8     02 FB 61 F6 | 	neg	result1, _var03
26fec                 | LR__3071
26fec                 | _psram_spin2_write_ret
26fec     2D 00 64 FD | 	ret
26ff0                 | 
26ff0                 | ' 
26ff0                 | ' ' generalized fill
26ff0                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
26ff0                 | _psram_spin2_fill
26ff0     09 01 02 F6 | 	mov	_var01, arg01
26ff4     0A 03 02 F6 | 	mov	_var02, arg02
26ff8     0B 05 02 F6 | 	mov	_var03, arg03
26ffc     0D 07 02 F6 | 	mov	_var04, arg05
27000                 | '     case datasize 
27000     01 06 86 F1 | 	sub	_var04, #1
27004     04 06 26 F3 | 	fle	_var04, #4
27008     30 06 62 FD | 	jmprel	_var04
2700c                 | LR__3080
2700c     10 00 90 FD | 	jmp	#LR__3081
27010     18 00 90 FD | 	jmp	#LR__3082
27014     2C 00 90 FD | 	jmp	#LR__3084
27018     1C 00 90 FD | 	jmp	#LR__3083
2701c     24 00 90 FD | 	jmp	#LR__3084
27020                 | LR__3081
27020                 | '         1: req := driver.R_WRITEBYTE
27020     00 00 60 FF 
27024     00 08 06 F6 | 	mov	_var05, ##-1073741824
27028     20 00 90 FD | 	jmp	#LR__3085
2702c                 | LR__3082
2702c                 | '         2: req := driver.R_WRITEWORD
2702c     00 00 68 FF 
27030     00 08 06 F6 | 	mov	_var05, ##-805306368
27034     14 00 90 FD | 	jmp	#LR__3085
27038                 | LR__3083
27038                 | '         4: req := driver.R_WRITELONG
27038     00 00 70 FF 
2703c     00 08 06 F6 | 	mov	_var05, ##-536870912
27040     08 00 90 FD | 	jmp	#LR__3085
27044                 | LR__3084
27044                 | '         other : return ERR_INVALID
27044     06 FA 65 F6 | 	neg	result1, #6
27048     94 00 90 FD | 	jmp	#LR__3087
2704c                 | LR__3085
2704c                 | '     if count == 0   ' nothing to do
2704c     00 04 0E F2 | 	cmp	_var03, #0 wz
27050                 | '         return 0
27050     00 FA 05 A6 |  if_e	mov	result1, #0
27054     88 00 90 AD |  if_e	jmp	#LR__3087
27058                 | '     if drivercog == -1
27058     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2705c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
27060     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
27064     FF FF 7F FF 
27068     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
2706c                 | '         return ERR_INACTIVE
2706c     0F FA 65 A6 |  if_e	neg	result1, #15
27070     6C 00 90 AD |  if_e	jmp	#LR__3087
27074                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
27074     00 FA 05 F6 | 	mov	result1, #0
27078     01 FA 61 FD | 	cogid	result1
2707c     FD 06 02 F6 | 	mov	_var04, result1
27080     01 06 66 F0 | 	shl	_var04, #1
27084     FD 06 02 F1 | 	add	_var04, result1
27088     02 06 66 F0 | 	shl	_var04, #2
2708c     FF 03 00 FF 
27090     00 0B 06 F6 | 	mov	_var06, ##524032
27094     03 0B 02 F1 | 	add	_var06, _var04
27098                 | '     if long[mailbox] < 0
27098     05 07 02 FB | 	rdlong	_var04, _var06
2709c     00 06 56 F2 | 	cmps	_var04, #0 wc
270a0                 | '         return ERR_MAILBOX_BUSY
270a0     1C FA 65 C6 |  if_b	neg	result1, #28
270a4     38 00 90 CD |  if_b	jmp	#LR__3087
270a8                 | '     long[mailbox][2] := count
270a8     08 0A 06 F1 | 	add	_var06, #8
270ac     05 05 62 FC | 	wrlong	_var03, _var06
270b0                 | '     long[mailbox][1] := pattern
270b0     04 0A 86 F1 | 	sub	_var06, #4
270b4     05 03 62 FC | 	wrlong	_var02, _var06
270b8     04 0A 86 F1 | 	sub	_var06, #4
270bc                 | '     long[mailbox] := req + (addr & $1ffffff)
270bc     04 0D 02 F6 | 	mov	_var07, _var05
270c0     00 0F 02 F6 | 	mov	_var08, _var01
270c4     D9 0E 06 F4 | 	bitl	_var08, #217
270c8     07 0D 02 F1 | 	add	_var07, _var08
270cc     05 0D 62 FC | 	wrlong	_var07, _var06
270d0                 | '     repeat
270d0                 | LR__3086
270d0                 | '         r := long[mailbox]
270d0     05 0F 02 FB | 	rdlong	_var08, _var06
270d4     00 0E 56 F2 | 	cmps	_var08, #0 wc
270d8     F4 FF 9F CD |  if_b	jmp	#LR__3086
270dc                 | '     while r < 0
270dc                 | '     return -r                  ' return 0 for success or negated error code
270dc     07 FB 61 F6 | 	neg	result1, _var08
270e0                 | LR__3087
270e0                 | _psram_spin2_fill_ret
270e0     2D 00 64 FD | 	ret
270e4                 | 
270e4                 | ' 
270e4                 | ' '..............................................................................
270e4                 | ' 
270e4                 | ' {{
270e4                 | ' }}
270e4                 | ' PUB setQos(cog, qos) : result | mailbox
270e4                 | _psram_spin2_setQos
270e4     09 01 02 F6 | 	mov	_var01, arg01
270e8                 | '     if drivercog == -1 ' driver must be running
270e8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
270ec     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
270f0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
270f4     FF FF 7F FF 
270f8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
270fc                 | '         return ERR_INACTIVE
270fc     0F FA 65 A6 |  if_e	neg	result1, #15
27100     9C 00 90 AD |  if_e	jmp	#LR__3094
27104                 | '     if cog < 0 or cog > 7 ' enforce cog id range
27104     00 00 56 F2 | 	cmps	_var01, #0 wc
27108     08 00 90 CD |  if_b	jmp	#LR__3090
2710c     08 00 56 F2 | 	cmps	_var01, #8 wc
27110     08 00 90 CD |  if_b	jmp	#LR__3091
27114                 | LR__3090
27114                 | '         return ERR_INVALID
27114     06 FA 65 F6 | 	neg	result1, #6
27118     84 00 90 FD | 	jmp	#LR__3094
2711c                 | LR__3091
2711c                 | '     long[@qosData][cog] := qos & !$1ff
2711c     FF 15 26 F5 | 	andn	arg02, #511
27120     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
27124     02 00 66 F0 | 	shl	_var01, #2
27128     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
2712c     00 15 62 FC | 	wrlong	arg02, _var01
27130                 | '     mailbox := $7FF00 + drivercog*12
27130     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
27134     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
27138     02 07 02 F6 | 	mov	_var04, _var03
2713c     01 06 66 F0 | 	shl	_var04, #1
27140     02 07 02 F1 | 	add	_var04, _var03
27144     02 06 66 F0 | 	shl	_var04, #2
27148     FF 03 00 FF 
2714c     00 09 06 F6 | 	mov	_var05, ##524032
27150     03 09 02 F1 | 	add	_var05, _var04
27154                 | '     repeat until LOCKTRY(driverlock)
27154     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
27158                 | LR__3092
27158     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2715c     06 12 72 FD | 	locktry	arg01 wc
27160     F4 FF 9F 3D |  if_ae	jmp	#LR__3092
27164     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
27168                 | '     long[mailbox] := driver.R_CONFIG + cogid()
27168     00 06 06 F6 | 	mov	_var04, #0
2716c     01 06 62 FD | 	cogid	_var04
27170     00 00 78 FF 
27174     00 02 06 F6 | 	mov	_var02, ##-268435456
27178     03 03 02 F1 | 	add	_var02, _var04
2717c     04 03 62 FC | 	wrlong	_var02, _var05
27180                 | '     repeat while long[mailbox] < 0
27180                 | LR__3093
27180     04 03 02 FB | 	rdlong	_var02, _var05
27184     00 02 56 F2 | 	cmps	_var02, #0 wc
27188     F4 FF 9F CD |  if_b	jmp	#LR__3093
2718c                 | '     LOCKREL(driverlock)
2718c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
27190     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
27194     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
27198     07 12 72 FD | 	lockrel	arg01 wc
2719c     00 FA 05 F6 | 	mov	result1, #0
271a0                 | LR__3094
271a0                 | _psram_spin2_setQos_ret
271a0     2D 00 64 FD | 	ret
271a4                 | 
271a4                 | ' 
271a4                 | ' '..............................................................................
271a4                 | ' 
271a4                 | ' {{
271a4                 | ' }}
271a4                 | ' PRI lookupDelay(freq) : delay | profile
271a4                 | _psram_spin2_lookupDelay
271a4                 | '     profile := @delayTable
271a4     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
271a8     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
271ac                 | '     delay := long[profile][0]
271ac     00 03 02 FB | 	rdlong	_var02, _var01
271b0                 | '     repeat while long[profile][1] 
271b0     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
271b4     97 16 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
271b8                 | LR__3100
271b8     04 00 06 F1 | 	add	_var01, #4
271bc     00 FB 09 FB | 	rdlong	result1, _var01 wz
271c0     04 00 86 F1 | 	sub	_var01, #4
271c4     1C 00 90 AD |  if_e	jmp	#LR__3102
271c8                 | '         if freq +< long[profile][1] 
271c8     04 00 06 F1 | 	add	_var01, #4
271cc     00 FB 01 FB | 	rdlong	result1, _var01
271d0     04 00 86 F1 | 	sub	_var01, #4
271d4     FD 12 12 F2 | 	cmp	arg01, result1 wc
271d8                 | '             quit
271d8                 | '         profile += 4
271d8     04 00 06 31 |  if_ae	add	_var01, #4
271dc                 | '         delay++
271dc     01 02 06 31 |  if_ae	add	_var02, #1
271e0     D4 FF 9F 3D |  if_ae	jmp	#LR__3100
271e4                 | LR__3101
271e4                 | LR__3102
271e4     01 FB 01 F6 | 	mov	result1, _var02
271e8                 | _psram_spin2_lookupDelay_ret
271e8     2D 00 64 FD | 	ret
271ec                 | 
271ec                 | ' 
271ec                 | ' PUB start() : r
271ec                 | _usbnew_spin2_start
271ec     00 00 06 F6 | 	mov	_var01, #0
271f0                 | '   ifnot driver_cog
271f0     15 00 00 FF 
271f4     87 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
271f8     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
271fc     15 00 00 FF 
27200     87 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
27204     38 00 90 5D |  if_ne	jmp	#LR__3110
27208                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
27208     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
2720c     10 00 06 F6 | 	mov	_var01, #16
27210     00 16 06 F6 | 	mov	arg03, #0
27214     28 16 62 FD | 	setq	arg03
27218     0A 01 F2 FC | 	coginit	_var01, arg02 wc
2721c     01 00 66 C6 |  if_b	neg	_var01, #1
27220                 | '     if r >= 0
27220     00 00 56 F2 | 	cmps	_var01, #0 wc
27224                 | '       driver_cog := r+1
27224     00 03 02 36 |  if_ae	mov	_var02, _var01
27228     01 02 06 31 |  if_ae	add	_var02, #1
2722c     15 00 00 3F 
27230     87 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
27234     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
27238     15 00 00 3F 
2723c     87 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
27240                 | LR__3110
27240     00 FB 01 F6 | 	mov	result1, _var01
27244                 | _usbnew_spin2_start_ret
27244     2D 00 64 FD | 	ret
27248                 | 
27248                 | '     '' (Always enabled)
27248                 | ' 
27248                 | ' '' Get current pressed state of a keyboard key
27248                 | ' PUB keystate(key) : r | buf[2],tmp
27248                 | _usbnew_spin2_keystate
27248     00 04 06 F6 | 	mov	_var03, #0
2724c                 | '   if key >= $E0 && key < $E8
2724c     E0 12 56 F2 | 	cmps	arg01, #224 wc
27250     34 00 90 CD |  if_b	jmp	#LR__3120
27254     E8 12 56 F2 | 	cmps	arg01, #232 wc
27258     2C 00 90 3D |  if_ae	jmp	#LR__3120
2725c                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
2725c     00 FA 05 F6 | 	mov	result1, #0
27260     13 00 00 FF 
27264     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
27268     09 07 02 F6 | 	mov	_var04, arg01
2726c     E0 06 86 F1 | 	sub	_var04, #224
27270     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
27274     03 09 4A F0 | 	shr	_var05, _var04 wz
27278     13 00 00 FF 
2727c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
27280     01 FA 65 56 |  if_ne	neg	result1, #1
27284     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
27288                 | LR__3120
27288                 | '   else
27288                 | '     '' Do this in inline ASM to ensure atomicity
27288                 | '     tmp := @hkbd_report
27288     13 00 00 FF 
2728c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
27290     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
27294                 | '     org
27294     13 00 00 FF 
27298     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2729c     97 1E 48 FB | 	callpa	#(@LR__3122-@LR__3121)>>2,fcache_load_ptr_
272a0                 | LR__3121
272a0 000             | 	org	0
272a0 000 28 02 64 FD | 	setq	#1
272a4 001 04 01 02 FB | 	rdlong	_var01, _var05
272a8 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
272ac 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
272b0 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
272b4 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
272b8 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
272bc 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
272c0 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
272c4 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
272c8 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
272cc 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
272d0 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
272d4 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
272d8 00e 01 04 66 A6 |  if_e	neg	_var03, #1
272dc 00f             | LR__3122
272dc                 | 	orgh
272dc     02 FB 01 F6 | 	mov	result1, _var03
272e0                 | _usbnew_spin2_keystate_ret
272e0     2D 00 64 FD | 	ret
272e4                 | 
272e4                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
272e4                 | ' 
272e4                 | ' '' Return key event from buffer if there is one
272e4                 | ' PUB get_key() : r | tail
272e4                 | _usbnew_spin2_get_key
272e4                 | '   tail := keyq_tail
272e4     0F 00 00 FF 
272e8     D5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
272ec     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
272f0                 | '   if keyq_head == tail
272f0     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
272f4     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
272f8     0F 00 00 FF 
272fc     D4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
27300     00 03 0A F2 | 	cmp	_var02, _var01 wz
27304                 | '     return 0 ' No event
27304     00 FA 05 A6 |  if_e	mov	result1, #0
27308     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
2730c                 | '   r := keyq_data[tail]
2730c     00 03 02 F6 | 	mov	_var02, _var01
27310     02 02 66 F0 | 	shl	_var02, #2
27314     0F 00 00 FF 
27318     D6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7894
2731c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
27320     01 FB 01 FB | 	rdlong	result1, _var02
27324                 | '   if ++tail == KEYQUEUE_SIZE
27324     01 00 06 F1 | 	add	_var01, #1
27328     80 00 0E F2 | 	cmp	_var01, #128 wz
2732c                 | '     tail := 0
2732c     00 00 06 A6 |  if_e	mov	_var01, #0
27330                 | '   keyq_tail := tail
27330     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
27334     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
27338     0F 00 00 FF 
2733c     D5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
27340                 | _usbnew_spin2_get_key_ret
27340     2D 00 64 FD | 	ret
27344                 | 
27344                 | ' 
27344                 | ' '' Emulate mouse movement
27344                 | ' PUB mouse_move(x,y)
27344                 | _usbnew_spin2_mouse_move
27344     02 4A 05 F6 | 	mov	COUNT_, #2
27348     A8 00 A0 FD | 	call	#pushregs_
2734c     09 27 02 F6 | 	mov	local01, arg01
27350     0A 29 02 F6 | 	mov	local02, arg02
27354                 | '   mouse_lock := 1
27354     14 00 00 FF 
27358     F1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
2735c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
27360     14 00 00 FF 
27364     F1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
27368                 | '   waitus(2) ' hope driver is now done
27368     02 12 06 F6 | 	mov	arg01, #2
2736c     4C 0B B0 FD | 	call	#__system___waitus
27370                 | '   mouse_xacc := x
27370     14 00 00 FF 
27374     E1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10465
27378     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
2737c                 | '   mouse_yacc := y
2737c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
27380     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
27384                 | '   if mouse_outptr
27384     05 00 00 FF 
27388     15 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2581
2738c     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
27390     0F 00 00 FF 
27394     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
27398     24 00 90 AD |  if_e	jmp	#LR__3130
2739c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
2739c     10 28 66 F0 | 	shl	local02, #16
273a0     13 27 32 F9 | 	getword	local01, local01, #0
273a4     13 29 42 F5 | 	or	local02, local01
273a8     0F 00 00 FF 
273ac     D0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7888
273b0     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
273b4     0F 00 00 FF 
273b8     D0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7888
273bc     13 29 62 FC | 	wrlong	local02, local01
273c0                 | LR__3130
273c0                 | '   mouse_lock := 0
273c0     14 00 00 FF 
273c4     F1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10481
273c8     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
273cc     14 00 00 FF 
273d0     F1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10481
273d4     A7 F0 03 F6 | 	mov	ptra, fp
273d8     B2 00 A0 FD | 	call	#popregs_
273dc                 | _usbnew_spin2_mouse_move_ret
273dc     2D 00 64 FD | 	ret
273e0                 | 
273e0                 | ' 
273e0                 | ' '' Get all button states for a device
273e0                 | ' PUB hidpad_buttons(dev) : r 
273e0                 | _usbnew_spin2_hidpad_buttons
273e0                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6]
273e0     13 00 00 FF 
273e4     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
273e8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
273ec     05 12 66 F0 | 	shl	arg01, #5
273f0     09 FB 01 F1 | 	add	result1, arg01
273f4     18 FA 05 F1 | 	add	result1, #24
273f8     FD FA 01 FB | 	rdlong	result1, result1
273fc     13 00 00 FF 
27400     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
27404                 | _usbnew_spin2_hidpad_buttons_ret
27404     2D 00 64 FD | 	ret
27408                 | 
27408                 | ' 
27408                 | ' '' Get state of an axis (normalized between -32768 and 32767)
27408                 | ' PUB hidpad_axis(dev,axnum) : r
27408                 | _usbnew_spin2_hidpad_axis
27408                 | '   if axnum +>= 8
27408     08 14 16 F2 | 	cmp	arg02, #8 wc
2740c                 | '     return 0
2740c     00 FA 05 36 |  if_ae	mov	result1, #0
27410     34 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
27414                 | '   else 
27414                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
27414     13 00 00 FF 
27418     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
2741c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
27420     05 12 66 F0 | 	shl	arg01, #5
27424     09 FB 01 F1 | 	add	result1, arg01
27428     04 12 06 F6 | 	mov	arg01, #4
2742c     0A 13 02 F1 | 	add	arg01, arg02
27430     01 12 66 F0 | 	shl	arg01, #1
27434     FD 12 02 F1 | 	add	arg01, result1
27438     09 FB E1 FA | 	rdword	result1, arg01
2743c     0F FA 65 F7 | 	signx	result1, #15
27440     13 00 00 FF 
27444     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
27448                 | _usbnew_spin2_hidpad_axis_ret
27448     2D 00 64 FD | 	ret
2744c                 | 
2744c                 | ' 
2744c                 | ' '' Get state of a hat
2744c                 | ' PUB hidpad_hat(dev,hatnum) : r
2744c                 | _usbnew_spin2_hidpad_hat
2744c                 | '   if hatnum +>= 4
2744c     04 14 16 F2 | 	cmp	arg02, #4 wc
27450                 | '     return 0
27450     00 FA 05 36 |  if_ae	mov	result1, #0
27454     2C 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
27458                 | '   else 
27458                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][7*4+hatnum]
27458     13 00 00 FF 
2745c     F8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10232
27460     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
27464     05 12 66 F0 | 	shl	arg01, #5
27468     09 FB 01 F1 | 	add	result1, arg01
2746c     1C 12 06 F6 | 	mov	arg01, #28
27470     0A 13 02 F1 | 	add	arg01, arg02
27474     FD 12 02 F1 | 	add	arg01, result1
27478     09 FB C1 FA | 	rdbyte	result1, arg01
2747c     13 00 00 FF 
27480     F8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10232
27484                 | _usbnew_spin2_hidpad_hat_ret
27484     2D 00 64 FD | 	ret
27488                 | 
27488                 | ' 
27488                 | ' 
27488                 | ' '--------------------------------------------------------------
27488                 | ' '---------- Init the variables, start the cog. ----------------
27488                 | ' '--------------------------------------------------------------
27488                 | ' 
27488                 | ' pub start(mbox,scope,cache) :cog,base | iii
27488                 | _audio096_spin2_start
27488     04 4A 05 F6 | 	mov	COUNT_, #4
2748c     A8 00 A0 FD | 	call	#pushregs_
27490     09 27 02 F6 | 	mov	local01, arg01
27494                 | ' 
27494                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
27494                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
27494                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
27494                 | ' 
27494                 | ' mailboxaddr:=mbox 
27494     F2 26 62 FC | 	wrlong	local01, objptr
27498                 | ' scope_ptr:=scope
27498     04 E4 05 F1 | 	add	objptr, #4
2749c     F2 14 62 FC | 	wrlong	arg02, objptr
274a0                 | ' cache_ptr:=cache
274a0     04 E4 05 F1 | 	add	objptr, #4
274a4     F2 16 62 FC | 	wrlong	arg03, objptr
274a8                 | ' base:=@channel1[0]
274a8     04 E4 05 F1 | 	add	objptr, #4
274ac     F2 28 02 F6 | 	mov	local02, objptr
274b0                 | ' long[$40]:=mbox
274b0     40 26 66 FC | 	wrlong	local01, #64
274b4                 | ' repeat iii from 0 to 7
274b4     00 2A 06 F6 | 	mov	local03, #0
274b8     02 00 00 FF 
274bc     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
274c0     0C E4 85 F1 | 	sub	objptr, #12
274c4     97 BC 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
274c8                 | LR__3140
274c8                 | '   long[base+64*iii]:=0
274c8     14 27 02 F6 | 	mov	local01, local02
274cc     15 FD 01 F6 | 	mov	result2, local03
274d0     06 FC 65 F0 | 	shl	result2, #6
274d4     FE 26 02 F1 | 	add	local01, result2
274d8     13 01 68 FC | 	wrlong	#0, local01
274dc                 | '   long[base+64*iii+4]:=0
274dc     14 27 02 F6 | 	mov	local01, local02
274e0     15 FD 01 F6 | 	mov	result2, local03
274e4     06 FC 65 F0 | 	shl	result2, #6
274e8     FE 26 02 F1 | 	add	local01, result2
274ec     04 26 06 F1 | 	add	local01, #4
274f0     13 01 68 FC | 	wrlong	#0, local01
274f4                 | '   long[base+64*iii+12]:=0
274f4     14 2D 02 F6 | 	mov	local04, local02
274f8     15 27 02 F6 | 	mov	local01, local03
274fc     06 26 66 F0 | 	shl	local01, #6
27500     13 2D 02 F1 | 	add	local04, local01
27504     0C 2C 06 F1 | 	add	local04, #12
27508     16 01 68 FC | 	wrlong	#0, local04
2750c                 | '   long[base+64*iii+16]:=2 
2750c     14 2D 02 F6 | 	mov	local04, local02
27510     15 27 02 F6 | 	mov	local01, local03
27514     06 26 66 F0 | 	shl	local01, #6
27518     13 2D 02 F1 | 	add	local04, local01
2751c     10 2C 06 F1 | 	add	local04, #16
27520     16 05 68 FC | 	wrlong	#2, local04
27524                 | '   word[base+64*iii+20]:=0
27524     14 2D 02 F6 | 	mov	local04, local02
27528     15 27 02 F6 | 	mov	local01, local03
2752c     06 26 66 F0 | 	shl	local01, #6
27530     13 2D 02 F1 | 	add	local04, local01
27534     14 2C 06 F1 | 	add	local04, #20
27538     16 01 58 FC | 	wrword	#0, local04
2753c                 | '   word[base+64*iii+22]:=8192
2753c     14 2D 02 F6 | 	mov	local04, local02
27540     15 27 02 F6 | 	mov	local01, local03
27544     06 26 66 F0 | 	shl	local01, #6
27548     13 2D 02 F1 | 	add	local04, local01
2754c     16 2C 06 F1 | 	add	local04, #22
27550     10 00 80 FF 
27554     16 01 58 FC | 	wrword	##8192, local04
27558                 | '   word[base+64*iii+24]:=4000+2*iii
27558     15 2D 02 F6 | 	mov	local04, local03
2755c     01 2C 66 F0 | 	shl	local04, #1
27560     07 00 00 FF 
27564     A0 27 06 F6 | 	mov	local01, ##4000
27568     16 27 02 F1 | 	add	local01, local04
2756c     14 2D 02 F6 | 	mov	local04, local02
27570     15 FD 01 F6 | 	mov	result2, local03
27574     06 FC 65 F0 | 	shl	result2, #6
27578     FE 2C 02 F1 | 	add	local04, result2
2757c     18 2C 06 F1 | 	add	local04, #24
27580     16 27 52 FC | 	wrword	local01, local04
27584                 | '   word[base+64*iii+26]:=2
27584     14 2D 02 F6 | 	mov	local04, local02
27588     15 27 02 F6 | 	mov	local01, local03
2758c     06 26 66 F0 | 	shl	local01, #6
27590     13 2D 02 F1 | 	add	local04, local01
27594     1A 2C 06 F1 | 	add	local04, #26
27598     16 05 58 FC | 	wrword	#2, local04
2759c                 | '   long [base+64*iii+8]:=@null | $C0000000
2759c     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
275a0     3E 26 26 F4 | 	bith	local01, #62
275a4     14 2D 02 F6 | 	mov	local04, local02
275a8     15 17 02 F6 | 	mov	arg03, local03
275ac     06 16 66 F0 | 	shl	arg03, #6
275b0     0B 2D 02 F1 | 	add	local04, arg03
275b4     08 2C 06 F1 | 	add	local04, #8
275b8     16 27 62 FC | 	wrlong	local01, local04
275bc                 | '   long[base+64*iii+32]:=0
275bc     14 2D 02 F6 | 	mov	local04, local02
275c0     15 27 02 F6 | 	mov	local01, local03
275c4     06 26 66 F0 | 	shl	local01, #6
275c8     13 2D 02 F1 | 	add	local04, local01
275cc     20 2C 06 F1 | 	add	local04, #32
275d0     16 01 68 FC | 	wrlong	#0, local04
275d4                 | '   long[base+64*iii+36]:=0
275d4     14 2D 02 F6 | 	mov	local04, local02
275d8     15 27 02 F6 | 	mov	local01, local03
275dc     06 26 66 F0 | 	shl	local01, #6
275e0     13 2D 02 F1 | 	add	local04, local01
275e4     24 2C 06 F1 | 	add	local04, #36
275e8     16 01 68 FC | 	wrlong	#0, local04
275ec                 | '   long[base+64*iii+40]:=0
275ec     14 2D 02 F6 | 	mov	local04, local02
275f0     15 27 02 F6 | 	mov	local01, local03
275f4     06 26 66 F0 | 	shl	local01, #6
275f8     13 2D 02 F1 | 	add	local04, local01
275fc     28 2C 06 F1 | 	add	local04, #40
27600     16 01 68 FC | 	wrlong	#0, local04
27604                 | '   long[base+64*iii+44]:=0
27604     14 2D 02 F6 | 	mov	local04, local02
27608     15 27 02 F6 | 	mov	local01, local03
2760c     06 26 66 F0 | 	shl	local01, #6
27610     13 2D 02 F1 | 	add	local04, local01
27614     2C 2C 06 F1 | 	add	local04, #44
27618     16 01 68 FC | 	wrlong	#0, local04
2761c                 | '   long[base+64*iii+28]:=0
2761c     14 2D 02 F6 | 	mov	local04, local02
27620     15 27 02 F6 | 	mov	local01, local03
27624     06 26 66 F0 | 	shl	local01, #6
27628     13 2D 02 F1 | 	add	local04, local01
2762c     1C 2C 06 F1 | 	add	local04, #28
27630     16 01 68 FC | 	wrlong	#0, local04
27634     01 2A 06 F1 | 	add	local03, #1
27638     08 2A 56 F2 | 	cmps	local03, #8 wc
2763c     88 FE 9F CD |  if_b	jmp	#LR__3140
27640                 | LR__3141
27640     02 00 00 FF 
27644     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
27648                 | '   
27648                 | ' cog:=coginit(16,@audio,@mailboxaddr)
27648     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
2764c     F2 16 02 F6 | 	mov	arg03, objptr
27650     10 2C 06 F6 | 	mov	local04, #16
27654     28 16 62 FD | 	setq	arg03
27658     0A 2D F2 FC | 	coginit	local04, arg02 wc
2765c     01 2C 66 C6 |  if_b	neg	local04, #1
27660                 | ' waitms(100)
27660     64 12 06 F6 | 	mov	arg01, #100
27664     E8 07 B0 FD | 	call	#__system___waitms
27668                 | ' return cog,base
27668     14 FD 01 F6 | 	mov	result2, local02
2766c     16 FB 01 F6 | 	mov	result1, local04
27670     A7 F0 03 F6 | 	mov	ptra, fp
27674     B2 00 A0 FD | 	call	#popregs_
27678                 | _audio096_spin2_start_ret
27678     2D 00 64 FD | 	ret
2767c                 | 
2767c                 | ' 
2767c                 | ' ' a simple play procedure to not poke everything. 
2767c                 | ' 
2767c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
2767c                 | _audio096_spin2_play
2767c     0C E4 05 F1 | 	add	objptr, #12
27680     F2 00 02 F6 | 	mov	_var01, objptr
27684     06 12 66 F0 | 	shl	arg01, #6
27688     09 01 02 F1 | 	add	_var01, arg01
2768c     00 13 02 F6 | 	mov	arg01, _var01
27690     0C 12 06 F1 | 	add	arg01, #12
27694     09 1B 62 FC | 	wrlong	arg05, arg01
27698     00 1C 56 F2 | 	cmps	arg06, #0 wc
2769c     00 13 02 36 |  if_ae	mov	arg01, _var01
276a0     10 12 06 31 |  if_ae	add	arg01, #16
276a4     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
276a8     02 1A 06 C1 |  if_b	add	arg05, #2
276ac     00 13 02 C6 |  if_b	mov	arg01, _var01
276b0     10 12 06 C1 |  if_b	add	arg01, #16
276b4     09 1B 62 CC |  if_b	wrlong	arg05, arg01
276b8     0B 13 52 F6 | 	abs	arg01, arg03 wc
276bc     0F 1B 80 FF 
276c0     09 1F 1A FD | 	qdiv	##3546895, arg01
276c4                 | ' 
276c4                 | ' base2:=@channel1[0]+64*channel
276c4                 | ' 
276c4                 | ' 
276c4                 | ' long[base2+12]:= len
276c4                 | ' if loop >=0 
276c4                 | '   long[base2+16]:= loop
276c4     0C E4 85 F1 | 	sub	objptr, #12
276c8                 | ' else
276c8                 | '   long[base2+16]:= len+2
276c8                 | ' word[base2+20]:=vol
276c8     00 13 02 F6 | 	mov	arg01, _var01
276cc     14 12 06 F1 | 	add	arg01, #20
276d0     09 19 52 FC | 	wrword	arg04, arg01
276d4                 | ' word[base2+24]:= 3546895/splfreq 
276d4     00 19 02 F6 | 	mov	arg04, _var01
276d8     18 18 06 F1 | 	add	arg04, #24
276dc                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
276dc                 | ' long[base2+28]:=$40000000    
276dc                 | ' long[base2+32]:=0    
276dc                 | ' long[base2+36]:=0    
276dc                 | ' long[base2+40]:=0    
276dc                 | ' long[base2+44]:=0    
276dc                 | ' long[base2+8]:=sample+$C0000000     
276dc     00 00 60 FF 
276e0     00 14 06 F1 | 	add	arg02, ##-1073741824
276e4     18 12 62 FD | 	getqx	arg01
276e8     09 13 82 F6 | 	negc	arg01, arg01
276ec     0C 13 52 FC | 	wrword	arg01, arg04
276f0     00 13 02 F6 | 	mov	arg01, _var01
276f4     1A 12 06 F1 | 	add	arg01, #26
276f8     09 01 5A FC | 	wrword	#256, arg01
276fc     00 13 02 F6 | 	mov	arg01, _var01
27700     1C 12 06 F1 | 	add	arg01, #28
27704     00 00 A0 FF 
27708     09 01 68 FC | 	wrlong	##1073741824, arg01
2770c     00 13 02 F6 | 	mov	arg01, _var01
27710     20 12 06 F1 | 	add	arg01, #32
27714     09 01 68 FC | 	wrlong	#0, arg01
27718     00 13 02 F6 | 	mov	arg01, _var01
2771c     24 12 06 F1 | 	add	arg01, #36
27720     09 01 68 FC | 	wrlong	#0, arg01
27724     00 13 02 F6 | 	mov	arg01, _var01
27728     28 12 06 F1 | 	add	arg01, #40
2772c     09 01 68 FC | 	wrlong	#0, arg01
27730     00 13 02 F6 | 	mov	arg01, _var01
27734     2C 12 06 F1 | 	add	arg01, #44
27738     09 01 68 FC | 	wrlong	#0, arg01
2773c     08 00 06 F1 | 	add	_var01, #8
27740     00 15 62 FC | 	wrlong	arg02, _var01
27744                 | _audio096_spin2_play_ret
27744     2D 00 64 FD | 	ret
27748                 | 
27748                 | ' 
27748                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
27748                 | _audio096_spin2_play8
27748                 | ' 
27748                 | ' base2:=@channel1[0]+64*channel
27748     0C E4 05 F1 | 	add	objptr, #12
2774c     F2 00 02 F6 | 	mov	_var01, objptr
27750     06 12 66 F0 | 	shl	arg01, #6
27754     09 01 02 F1 | 	add	_var01, arg01
27758                 | ' long[base2]:=0
27758     00 01 68 FC | 	wrlong	#0, _var01
2775c                 | ' long[base2+8]:=sample+$40000000 
2775c     00 00 20 FF 
27760     00 14 06 F1 | 	add	arg02, ##1073741824
27764     00 13 02 F6 | 	mov	arg01, _var01
27768     08 12 06 F1 | 	add	arg01, #8
2776c     09 15 62 FC | 	wrlong	arg02, arg01
27770                 | ' if loop>=0
27770     00 1C 56 F2 | 	cmps	arg06, #0 wc
27774     0C E4 85 F1 | 	sub	objptr, #12
27778     1C 00 90 CD |  if_b	jmp	#LR__3150
2777c                 | '   long[base2+12]:=loop
2777c     00 15 02 F6 | 	mov	arg02, _var01
27780     0C 14 06 F1 | 	add	arg02, #12
27784     0A 1D 62 FC | 	wrlong	arg06, arg02
27788                 | '   long[base2+16]:= len
27788     00 1D 02 F6 | 	mov	arg06, _var01
2778c     10 1C 06 F1 | 	add	arg06, #16
27790     0E 1B 62 FC | 	wrlong	arg05, arg06
27794     1C 00 90 FD | 	jmp	#LR__3151
27798                 | LR__3150
27798                 | ' else
27798                 | '   long[base2+12]:= len
27798     00 1D 02 F6 | 	mov	arg06, _var01
2779c     0C 1C 06 F1 | 	add	arg06, #12
277a0     0E 1B 62 FC | 	wrlong	arg05, arg06
277a4                 | '   long[base2+16]:= len+1
277a4     01 1A 06 F1 | 	add	arg05, #1
277a8     00 13 02 F6 | 	mov	arg01, _var01
277ac     10 12 06 F1 | 	add	arg01, #16
277b0     09 1B 62 FC | 	wrlong	arg05, arg01
277b4                 | LR__3151
277b4     0B 17 52 F6 | 	abs	arg03, arg03 wc
277b8     0F 1B 80 FF 
277bc     0B 1F 1A FD | 	qdiv	##3546895, arg03
277c0                 | ' word[base2+20]:=vol
277c0     00 17 02 F6 | 	mov	arg03, _var01
277c4     14 16 06 F1 | 	add	arg03, #20
277c8     0B 19 52 FC | 	wrword	arg04, arg03
277cc                 | ' word[base2+24]:= 3546895 /splfreq 
277cc     00 13 02 F6 | 	mov	arg01, _var01
277d0     18 12 06 F1 | 	add	arg01, #24
277d4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
277d4     1A 00 06 F1 | 	add	_var01, #26
277d8     18 18 62 FD | 	getqx	arg04
277dc     0C 19 82 F6 | 	negc	arg04, arg04
277e0     09 19 52 FC | 	wrword	arg04, arg01
277e4     00 01 5A FC | 	wrword	#256, _var01
277e8                 | _audio096_spin2_play8_ret
277e8     2D 00 64 FD | 	ret
277ec                 | 
277ec                 | ' 'long[base2+28]:=$40000000
277ec                 | ' 
277ec                 | '     
277ec                 | ' pub stop(channel) 'silence it
277ec                 | _audio096_spin2_stop
277ec                 | ' 
277ec                 | ' word[@channel1[0]+64*channel+20]:=0
277ec     0C E4 05 F1 | 	add	objptr, #12
277f0     F2 00 02 F6 | 	mov	_var01, objptr
277f4     09 03 02 F6 | 	mov	_var02, arg01
277f8     06 02 66 F0 | 	shl	_var02, #6
277fc     01 01 02 F1 | 	add	_var01, _var02
27800     14 00 06 F1 | 	add	_var01, #20
27804     00 01 58 FC | 	wrword	#0, _var01
27808                 | ' word[@channel1[0]+64*channel+20]:=0
27808     F2 00 02 F6 | 	mov	_var01, objptr
2780c     06 12 66 F0 | 	shl	arg01, #6
27810     09 01 02 F1 | 	add	_var01, arg01
27814     14 00 06 F1 | 	add	_var01, #20
27818     00 01 58 FC | 	wrword	#0, _var01
2781c     0C E4 85 F1 | 	sub	objptr, #12
27820                 | _audio096_spin2_stop_ret
27820     2D 00 64 FD | 	ret
27824                 | hubexit
27824     81 00 80 FD | 	jmp	#cogexit
27828                 | 
27828                 | __system___setbaud
27828     14 90 06 FB | 	rdlong	muldiva_, #20
2782c     09 93 02 F6 | 	mov	muldivb_, arg01
27830     BA 00 A0 FD | 	call	#divide_
27834     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
27838                 | LR__3160
27838     3E FA 9D FA | 	rdpin	result1, #62 wc
2783c     FE FC A1 F1 | 	subx	result2, result2
27840     F4 FF 9F CD |  if_b	jmp	#LR__3160
27844                 | LR__3161
27844     40 7C 64 FD | 	dirl	#62
27848     40 7E 64 FD | 	dirl	#63
2784c     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
27850     10 92 66 F0 | 	shl	muldivb_, #16
27854     07 14 06 F6 | 	mov	arg02, #7
27858     49 15 02 F1 | 	add	arg02, muldivb_
2785c     3E F8 0C FC | 	wrpin	#124, #62
27860     3E 14 16 FC | 	wxpin	arg02, #62
27864     3F 7C 0C FC | 	wrpin	#62, #63
27868     14 14 06 F1 | 	add	arg02, #20
2786c     3F 14 16 FC | 	wxpin	arg02, #63
27870     41 7C 64 FD | 	dirh	#62
27874     41 7E 64 FD | 	dirh	#63
27878                 | __system___setbaud_ret
27878     2D 00 64 FD | 	ret
2787c                 | 
2787c                 | __system___txraw
2787c     01 4A 05 F6 | 	mov	COUNT_, #1
27880     A8 00 A0 FD | 	call	#pushregs_
27884     09 27 02 F6 | 	mov	local01, arg01
27888     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
2788c                 | LR__3170
2788c     3E FA 9D FA | 	rdpin	result1, #62 wc
27890     FE FC A1 F1 | 	subx	result2, result2
27894     F4 FF 9F CD |  if_b	jmp	#LR__3170
27898                 | LR__3171
27898     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
2789c     C2 01 00 AF 
278a0     00 12 06 A6 |  if_e	mov	arg01, ##230400
278a4     80 FF BF AD |  if_e	call	#__system___setbaud
278a8     58 7C 64 FD | 	drvl	#62
278ac     3E 26 26 FC | 	wypin	local01, #62
278b0     01 FA 05 F6 | 	mov	result1, #1
278b4     A7 F0 03 F6 | 	mov	ptra, fp
278b8     B2 00 A0 FD | 	call	#popregs_
278bc                 | __system___txraw_ret
278bc     2D 00 64 FD | 	ret
278c0                 | 
278c0                 | __system___rxraw
278c0     0D 4A 05 F6 | 	mov	COUNT_, #13
278c4     A8 00 A0 FD | 	call	#pushregs_
278c8     09 27 02 F6 | 	mov	local01, arg01
278cc     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
278d0     C2 01 00 AF 
278d4     00 12 06 A6 |  if_e	mov	arg01, ##230400
278d8     4C FF BF AD |  if_e	call	#__system___setbaud
278dc     00 26 0E F2 | 	cmp	local01, #0 wz
278e0     20 00 90 AD |  if_e	jmp	#LR__3180
278e4     14 2A 06 FB | 	rdlong	local03, #20
278e8     0A 2A 46 F0 | 	shr	local03, #10
278ec     15 27 02 FD | 	qmul	local01, local03
278f0     1A FA 61 FD | 	getct	result1
278f4     18 2C 62 FD | 	getqx	local04
278f8     16 FB 01 F1 | 	add	result1, local04
278fc     FD 2E 02 F6 | 	mov	local05, result1
27900     04 00 90 FD | 	jmp	#LR__3181
27904                 | LR__3180
27904     00 2E 06 F6 | 	mov	local05, #0
27908                 | LR__3181
27908     01 30 66 F6 | 	neg	local06, #1
2790c     3F 32 06 F6 | 	mov	local07, #63
27910     00 34 06 F6 | 	mov	local08, #0
27914     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27918     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
2791c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
27920                 | LR__3182
27920     08 36 16 F4 | 	testb	local09, #8 wc
27924     09 36 76 F4 | 	testbn	local09, #9 andc
27928     0A 36 46 F0 | 	shr	local09, #10
2792c     01 34 06 C6 |  if_b	mov	local08, #1
27930     40 7E 6C 3D |  if_ae	testp	#63 wz
27934     01 34 06 26 |  if_nc_and_z	mov	local08, #1
27938     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
2793c     04 36 46 20 |  if_nc_and_z	shr	local09, #4
27940                 | LR__3183
27940     00 28 06 F6 | 	mov	local02, #0
27944     00 34 0E F2 | 	cmp	local08, #0 wz
27948     01 28 66 56 |  if_ne	neg	local02, #1
2794c     00 38 06 F6 | 	mov	local10, #0
27950     00 2A 06 F6 | 	mov	local03, #0
27954     00 26 0E F2 | 	cmp	local01, #0 wz
27958     01 2A 66 56 |  if_ne	neg	local03, #1
2795c     00 2C 06 F6 | 	mov	local04, #0
27960     00 3A 06 F6 | 	mov	local11, #0
27964     17 3D 02 F6 | 	mov	local12, local05
27968     1A FA 61 FD | 	getct	result1
2796c     FD 3E 02 F6 | 	mov	local13, result1
27970     1F 3D 82 F1 | 	sub	local12, local13
27974     00 3C 56 F2 | 	cmps	local12, #0 wc
27978     00 3A 26 C6 |  if_b	not	local11, #0
2797c     00 3A 0E F2 | 	cmp	local11, #0 wz
27980     00 2C 26 56 |  if_ne	not	local04, #0
27984     16 2B CA F7 | 	test	local03, local04 wz
27988     00 38 26 56 |  if_ne	not	local10, #0
2798c     1C 29 4A F5 | 	or	local02, local10 wz
27990     8C FF 9F AD |  if_e	jmp	#LR__3182
27994     00 34 0E F2 | 	cmp	local08, #0 wz
27998     1B 31 02 56 |  if_ne	mov	local06, local09
2799c     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
279a0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
279a4     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
279a8     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
279ac     18 FB 01 F6 | 	mov	result1, local06
279b0     A7 F0 03 F6 | 	mov	ptra, fp
279b4     B2 00 A0 FD | 	call	#popregs_
279b8                 | __system___rxraw_ret
279b8     2D 00 64 FD | 	ret
279bc                 | 
279bc                 | __system___getus
279bc     1A FC 71 FD | 	getct	result2 wc
279c0     1A 00 62 FD | 	getct	_var01
279c4     10 E6 05 F1 | 	add	ptr___system__dat__, #16
279c8     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
279cc     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
279d0     20 00 90 5D |  if_ne	jmp	#LR__3190
279d4     14 02 06 FB | 	rdlong	_var02, #20
279d8     A1 07 00 FF 
279dc     40 02 16 FD | 	qdiv	_var02, ##1000000
279e0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
279e4     18 FA 61 FD | 	getqx	result1
279e8     FD 02 02 F6 | 	mov	_var02, result1
279ec     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
279f0     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
279f4                 | LR__3190
279f4     01 FD 11 FD | 	qdiv	result2, _var02
279f8     19 FC 61 FD | 	getqy	result2
279fc     28 FC 61 FD | 	setq	result2
27a00     01 01 12 FD | 	qdiv	_var01, _var02
27a04     18 FA 61 FD | 	getqx	result1
27a08                 | __system___getus_ret
27a08     2D 00 64 FD | 	ret
27a0c                 | 
27a0c                 | __system____builtin_memmove
27a0c     09 01 02 F6 | 	mov	_var01, arg01
27a10     0A 13 52 F2 | 	cmps	arg01, arg02 wc
27a14     10 00 90 CD |  if_b	jmp	#LR__3200
27a18     0A 03 02 F6 | 	mov	_var02, arg02
27a1c     0B 03 02 F1 | 	add	_var02, arg03
27a20     01 13 52 F2 | 	cmps	arg01, _var02 wc
27a24     48 00 90 CD |  if_b	jmp	#LR__3206
27a28                 | LR__3200
27a28     0B 05 02 F6 | 	mov	_var03, arg03
27a2c     02 04 4E F0 | 	shr	_var03, #2 wz
27a30     18 00 90 AD |  if_e	jmp	#LR__3205
27a34     97 0A 48 FB | 	callpa	#(@LR__3203-@LR__3201)>>2,fcache_load_ptr_
27a38                 | LR__3201
27a38     02 09 D8 FC | 	rep	@LR__3204, _var03
27a3c                 | LR__3202
27a3c     0A 05 02 FB | 	rdlong	_var03, arg02
27a40     09 05 62 FC | 	wrlong	_var03, arg01
27a44     04 12 06 F1 | 	add	arg01, #4
27a48     04 14 06 F1 | 	add	arg02, #4
27a4c                 | LR__3203
27a4c                 | LR__3204
27a4c                 | LR__3205
27a4c     02 16 CE F7 | 	test	arg03, #2 wz
27a50     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
27a54     09 03 52 5C |  if_ne	wrword	_var02, arg01
27a58     02 12 06 51 |  if_ne	add	arg01, #2
27a5c     02 14 06 51 |  if_ne	add	arg02, #2
27a60     01 16 CE F7 | 	test	arg03, #1 wz
27a64     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
27a68     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
27a6c     28 00 90 FD | 	jmp	#LR__3212
27a70                 | LR__3206
27a70     0B 13 02 F1 | 	add	arg01, arg03
27a74     0B 15 02 F1 | 	add	arg02, arg03
27a78     0B 07 0A F6 | 	mov	_var04, arg03 wz
27a7c     18 00 90 AD |  if_e	jmp	#LR__3211
27a80     97 0A 48 FB | 	callpa	#(@LR__3209-@LR__3207)>>2,fcache_load_ptr_
27a84                 | LR__3207
27a84     03 09 D8 FC | 	rep	@LR__3210, _var04
27a88                 | LR__3208
27a88     01 12 86 F1 | 	sub	arg01, #1
27a8c     01 14 86 F1 | 	sub	arg02, #1
27a90     0A 03 C2 FA | 	rdbyte	_var02, arg02
27a94     09 03 42 FC | 	wrbyte	_var02, arg01
27a98                 | LR__3209
27a98                 | LR__3210
27a98                 | LR__3211
27a98                 | LR__3212
27a98     00 FB 01 F6 | 	mov	result1, _var01
27a9c                 | __system____builtin_memmove_ret
27a9c     2D 00 64 FD | 	ret
27aa0                 | 
27aa0                 | __system__longmove
27aa0     09 01 02 F6 | 	mov	_var01, arg01
27aa4     0A 13 52 F2 | 	cmps	arg01, arg02 wc
27aa8     24 00 90 3D |  if_ae	jmp	#LR__3224
27aac     0B 03 0A F6 | 	mov	_var02, arg03 wz
27ab0     54 00 90 AD |  if_e	jmp	#LR__3230
27ab4     97 0A 48 FB | 	callpa	#(@LR__3222-@LR__3220)>>2,fcache_load_ptr_
27ab8                 | LR__3220
27ab8     01 09 D8 FC | 	rep	@LR__3223, _var02
27abc                 | LR__3221
27abc     0A 03 02 FB | 	rdlong	_var02, arg02
27ac0     09 03 62 FC | 	wrlong	_var02, arg01
27ac4     04 12 06 F1 | 	add	arg01, #4
27ac8     04 14 06 F1 | 	add	arg02, #4
27acc                 | LR__3222
27acc                 | LR__3223
27acc     38 00 90 FD | 	jmp	#LR__3230
27ad0                 | LR__3224
27ad0     0B 03 02 F6 | 	mov	_var02, arg03
27ad4     02 02 66 F0 | 	shl	_var02, #2
27ad8     01 13 02 F1 | 	add	arg01, _var02
27adc     0B 05 02 F6 | 	mov	_var03, arg03
27ae0     02 04 66 F0 | 	shl	_var03, #2
27ae4     02 15 02 F1 | 	add	arg02, _var03
27ae8     0B 07 0A F6 | 	mov	_var04, arg03 wz
27aec     18 00 90 AD |  if_e	jmp	#LR__3229
27af0     97 0A 48 FB | 	callpa	#(@LR__3227-@LR__3225)>>2,fcache_load_ptr_
27af4                 | LR__3225
27af4     03 09 D8 FC | 	rep	@LR__3228, _var04
27af8                 | LR__3226
27af8     04 12 86 F1 | 	sub	arg01, #4
27afc     04 14 86 F1 | 	sub	arg02, #4
27b00     0A 07 02 FB | 	rdlong	_var04, arg02
27b04     09 07 62 FC | 	wrlong	_var04, arg01
27b08                 | LR__3227
27b08                 | LR__3228
27b08                 | LR__3229
27b08                 | LR__3230
27b08     00 FB 01 F6 | 	mov	result1, _var01
27b0c                 | __system__longmove_ret
27b0c     2D 00 64 FD | 	ret
27b10                 | 
27b10                 | __system____builtin_strcpy
27b10     09 01 02 F6 | 	mov	_var01, arg01
27b14     97 0A 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
27b18                 | LR__3240
27b18     0A FB C9 FA | 	rdbyte	result1, arg02 wz
27b1c     09 FB 41 FC | 	wrbyte	result1, arg01
27b20     01 14 06 F1 | 	add	arg02, #1
27b24     01 12 06 F1 | 	add	arg01, #1
27b28     EC FF 9F 5D |  if_ne	jmp	#LR__3240
27b2c                 | LR__3241
27b2c     00 FB 01 F6 | 	mov	result1, _var01
27b30                 | __system____builtin_strcpy_ret
27b30     2D 00 64 FD | 	ret
27b34                 | 
27b34                 | __system____topofstack
27b34     00 4A 05 F6 | 	mov	COUNT_, #0
27b38     A8 00 A0 FD | 	call	#pushregs_
27b3c     08 F0 07 F1 | 	add	ptra, #8
27b40     04 4E 05 F1 | 	add	fp, #4
27b44     A7 12 62 FC | 	wrlong	arg01, fp
27b48     A7 FA 01 F6 | 	mov	result1, fp
27b4c     04 4E 85 F1 | 	sub	fp, #4
27b50     A7 F0 03 F6 | 	mov	ptra, fp
27b54     B2 00 A0 FD | 	call	#popregs_
27b58                 | __system____topofstack_ret
27b58     2D 00 64 FD | 	ret
27b5c                 | 
27b5c                 | __system___lockmem
27b5c     00 FA 05 F6 | 	mov	result1, #0
27b60     01 FA 61 FD | 	cogid	result1
27b64     00 FB 05 F1 | 	add	result1, #256
27b68                 | LR__3250
27b68     09 01 0A FB | 	rdlong	_var01, arg01 wz
27b6c     09 FB 61 AC |  if_e	wrlong	result1, arg01
27b70     09 01 02 AB |  if_e	rdlong	_var01, arg01
27b74     09 01 02 AB |  if_e	rdlong	_var01, arg01
27b78     FD 00 0A F2 | 	cmp	_var01, result1 wz
27b7c     E8 FF 9F 5D |  if_ne	jmp	#LR__3250
27b80                 | __system___lockmem_ret
27b80     2D 00 64 FD | 	ret
27b84                 | 
27b84                 | __system___string_cmp
27b84     97 14 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
27b88                 | LR__3260
27b88     09 01 C2 FA | 	rdbyte	_var01, arg01
27b8c     0A 03 C2 FA | 	rdbyte	_var02, arg02
27b90     00 05 02 F6 | 	mov	_var03, _var01
27b94     01 05 8A F1 | 	sub	_var03, _var02 wz
27b98     01 12 06 F1 | 	add	arg01, #1
27b9c     01 14 06 F1 | 	add	arg02, #1
27ba0     0C 00 90 5D |  if_ne	jmp	#LR__3262
27ba4     00 00 0E F2 | 	cmp	_var01, #0 wz
27ba8     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
27bac     D8 FF 9F 5D |  if_ne	jmp	#LR__3260
27bb0                 | LR__3261
27bb0                 | LR__3262
27bb0     02 FB 01 F6 | 	mov	result1, _var03
27bb4                 | __system___string_cmp_ret
27bb4     2D 00 64 FD | 	ret
27bb8                 | 
27bb8                 | __system___string_concat
27bb8     05 4A 05 F6 | 	mov	COUNT_, #5
27bbc     A8 00 A0 FD | 	call	#pushregs_
27bc0     09 27 02 F6 | 	mov	local01, arg01
27bc4     0A 29 02 F6 | 	mov	local02, arg02
27bc8     13 13 02 F6 | 	mov	arg01, local01
27bcc     09 2B 02 F6 | 	mov	local03, arg01
27bd0     97 06 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
27bd4                 | LR__3270
27bd4     15 FB C9 FA | 	rdbyte	result1, local03 wz
27bd8     01 2A 06 51 |  if_ne	add	local03, #1
27bdc     F4 FF 9F 5D |  if_ne	jmp	#LR__3270
27be0                 | LR__3271
27be0     09 2B 82 F1 | 	sub	local03, arg01
27be4     15 2D 02 F6 | 	mov	local04, local03
27be8     14 13 02 F6 | 	mov	arg01, local02
27bec     09 2B 02 F6 | 	mov	local03, arg01
27bf0     97 06 48 FB | 	callpa	#(@LR__3273-@LR__3272)>>2,fcache_load_ptr_
27bf4                 | LR__3272
27bf4     15 FB C9 FA | 	rdbyte	result1, local03 wz
27bf8     01 2A 06 51 |  if_ne	add	local03, #1
27bfc     F4 FF 9F 5D |  if_ne	jmp	#LR__3272
27c00                 | LR__3273
27c00     09 2B 82 F1 | 	sub	local03, arg01
27c04     16 13 02 F6 | 	mov	arg01, local04
27c08     15 13 02 F1 | 	add	arg01, local03
27c0c     01 12 06 F1 | 	add	arg01, #1
27c10     F0 40 B0 FD | 	call	#__system___gc_alloc_managed
27c14     FD 2E 0A F6 | 	mov	local05, result1 wz
27c18     28 00 90 AD |  if_e	jmp	#LR__3274
27c1c     17 13 02 F6 | 	mov	arg01, local05
27c20     13 15 02 F6 | 	mov	arg02, local01
27c24     16 17 02 F6 | 	mov	arg03, local04
27c28     E0 FD BF FD | 	call	#__system____builtin_memmove
27c2c     17 13 02 F6 | 	mov	arg01, local05
27c30     16 13 02 F1 | 	add	arg01, local04
27c34     01 2A 06 F1 | 	add	local03, #1
27c38     14 15 02 F6 | 	mov	arg02, local02
27c3c     15 17 02 F6 | 	mov	arg03, local03
27c40     C8 FD BF FD | 	call	#__system____builtin_memmove
27c44                 | LR__3274
27c44     17 FB 01 F6 | 	mov	result1, local05
27c48     A7 F0 03 F6 | 	mov	ptra, fp
27c4c     B2 00 A0 FD | 	call	#popregs_
27c50                 | __system___string_concat_ret
27c50     2D 00 64 FD | 	ret
27c54                 | 
27c54                 | __system___tx
27c54     02 4A 05 F6 | 	mov	COUNT_, #2
27c58     A8 00 A0 FD | 	call	#pushregs_
27c5c     09 27 02 F6 | 	mov	local01, arg01
27c60     0A 26 0E F2 | 	cmp	local01, #10 wz
27c64     18 00 90 5D |  if_ne	jmp	#LR__3280
27c68     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27c6c     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
27c70     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27c74     02 28 CE F7 | 	test	local02, #2 wz
27c78     0D 12 06 56 |  if_ne	mov	arg01, #13
27c7c     FC FB BF 5D |  if_ne	call	#__system___txraw
27c80                 | LR__3280
27c80     13 13 02 F6 | 	mov	arg01, local01
27c84     F4 FB BF FD | 	call	#__system___txraw
27c88     A7 F0 03 F6 | 	mov	ptra, fp
27c8c     B2 00 A0 FD | 	call	#popregs_
27c90                 | __system___tx_ret
27c90     2D 00 64 FD | 	ret
27c94                 | 
27c94                 | __system___rx
27c94     01 4A 05 F6 | 	mov	COUNT_, #1
27c98     A8 00 A0 FD | 	call	#pushregs_
27c9c                 | LR__3290
27c9c     00 12 06 F6 | 	mov	arg01, #0
27ca0     1C FC BF FD | 	call	#__system___rxraw
27ca4     FD 26 02 F6 | 	mov	local01, result1
27ca8     FF FF 7F FF 
27cac     FF 27 0E F2 | 	cmp	local01, ##-1 wz
27cb0     E8 FF 9F AD |  if_e	jmp	#LR__3290
27cb4     0D 26 0E F2 | 	cmp	local01, #13 wz
27cb8     14 00 90 5D |  if_ne	jmp	#LR__3291
27cbc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27cc0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
27cc4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27cc8     02 FA CD F7 | 	test	result1, #2 wz
27ccc     0A 26 06 56 |  if_ne	mov	local01, #10
27cd0                 | LR__3291
27cd0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27cd4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
27cd8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27cdc     01 12 CE F7 | 	test	arg01, #1 wz
27ce0     1C 00 90 AD |  if_e	jmp	#LR__3294
27ce4     7F 26 0E F2 | 	cmp	local01, #127 wz
27ce8     0C 00 90 5D |  if_ne	jmp	#LR__3292
27cec     08 12 06 F6 | 	mov	arg01, #8
27cf0     60 FF BF FD | 	call	#__system___tx
27cf4     08 00 90 FD | 	jmp	#LR__3293
27cf8                 | LR__3292
27cf8     13 13 02 F6 | 	mov	arg01, local01
27cfc     54 FF BF FD | 	call	#__system___tx
27d00                 | LR__3293
27d00                 | LR__3294
27d00     13 FB 01 F6 | 	mov	result1, local01
27d04     A7 F0 03 F6 | 	mov	ptra, fp
27d08     B2 00 A0 FD | 	call	#popregs_
27d0c                 | __system___rx_ret
27d0c     2D 00 64 FD | 	ret
27d10                 | 
27d10                 | __system___pinwrite
27d10     09 01 02 F6 | 	mov	_var01, arg01
27d14     1F 00 06 F5 | 	and	_var01, #31
27d18     20 12 CE F7 | 	test	arg01, #32 wz
27d1c     06 12 46 F0 | 	shr	arg01, #6
27d20     09 13 CA F9 | 	bmask	arg01, arg01
27d24     00 13 62 F0 | 	shl	arg01, _var01
27d28     00 15 62 F0 | 	shl	arg02, _var01
27d2c     1C 00 90 AD |  if_e	jmp	#LR__3300
27d30     09 F7 43 F5 | 	or	dirb, arg01
27d34     FD 01 02 F6 | 	mov	_var01, outb
27d38     09 01 22 F5 | 	andn	_var01, arg01
27d3c     09 15 02 F5 | 	and	arg02, arg01
27d40     0A 01 42 F5 | 	or	_var01, arg02
27d44     00 FB 03 F6 | 	mov	outb, _var01
27d48     18 00 90 FD | 	jmp	#LR__3301
27d4c                 | LR__3300
27d4c     09 F5 43 F5 | 	or	dira, arg01
27d50     FC 01 02 F6 | 	mov	_var01, outa
27d54     09 01 22 F5 | 	andn	_var01, arg01
27d58     09 15 02 F5 | 	and	arg02, arg01
27d5c     0A 01 42 F5 | 	or	_var01, arg02
27d60     00 F9 03 F6 | 	mov	outa, _var01
27d64                 | LR__3301
27d64                 | __system___pinwrite_ret
27d64     2D 00 64 FD | 	ret
27d68                 | 
27d68                 | __system___basic_read_line
27d68     06 4A 05 F6 | 	mov	COUNT_, #6
27d6c     A8 00 A0 FD | 	call	#pushregs_
27d70     09 27 02 F6 | 	mov	local01, arg01
27d74     00 28 06 F6 | 	mov	local02, #0
27d78     18 2A 06 F6 | 	mov	local03, #24
27d7c     00 2C 06 F6 | 	mov	local04, #0
27d80     18 12 06 F6 | 	mov	arg01, #24
27d84     7C 3F B0 FD | 	call	#__system___gc_alloc_managed
27d88     FD 2E 0A F6 | 	mov	local05, result1 wz
27d8c     17 FB 01 A6 |  if_e	mov	result1, local05
27d90     B0 00 90 AD |  if_e	jmp	#LR__3313
27d94                 | LR__3310
27d94     13 13 02 F6 | 	mov	arg01, local01
27d98     7C 0B B0 FD | 	call	#__system___basic_get_char
27d9c     FD 30 02 F6 | 	mov	local06, result1
27da0     01 30 56 F2 | 	cmps	local06, #1 wc
27da4     8C 00 90 CD |  if_b	jmp	#LR__3312
27da8     0A 30 0E F2 | 	cmp	local06, #10 wz
27dac     10 00 90 5D |  if_ne	jmp	#LR__3311
27db0     00 2C 0E F2 | 	cmp	local04, #0 wz
27db4     01 28 56 52 |  if_ne	cmps	local02, #1 wc
27db8     01 28 86 11 |  if_a	sub	local02, #1
27dbc     74 00 90 FD | 	jmp	#LR__3312
27dc0                 | LR__3311
27dc0     0D 30 0E F2 | 	cmp	local06, #13 wz
27dc4     01 2C 06 A6 |  if_e	mov	local04, #1
27dc8     00 2C 06 56 |  if_ne	mov	local04, #0
27dcc     08 30 0E F2 | 	cmp	local06, #8 wz
27dd0     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
27dd4     01 28 56 A2 |  if_e	cmps	local02, #1 wc
27dd8     01 28 86 21 |  if_nc_and_z	sub	local02, #1
27ddc     B4 FF 9F AD |  if_e	jmp	#LR__3310
27de0     17 17 02 F6 | 	mov	arg03, local05
27de4     14 17 02 F1 | 	add	arg03, local02
27de8     0B 31 42 FC | 	wrbyte	local06, arg03
27dec     01 28 06 F1 | 	add	local02, #1
27df0     15 29 0A F2 | 	cmp	local02, local03 wz
27df4     9C FF 9F 5D |  if_ne	jmp	#LR__3310
27df8     15 13 02 F6 | 	mov	arg01, local03
27dfc     20 12 06 F1 | 	add	arg01, #32
27e00     00 3F B0 FD | 	call	#__system___gc_alloc_managed
27e04     FD 30 0A F6 | 	mov	local06, result1 wz
27e08     18 FB 01 A6 |  if_e	mov	result1, local06
27e0c     34 00 90 AD |  if_e	jmp	#LR__3313
27e10     18 13 02 F6 | 	mov	arg01, local06
27e14     17 15 02 F6 | 	mov	arg02, local05
27e18     15 17 02 F6 | 	mov	arg03, local03
27e1c     EC FB BF FD | 	call	#__system____builtin_memmove
27e20     20 2A 06 F1 | 	add	local03, #32
27e24     17 13 02 F6 | 	mov	arg01, local05
27e28     14 40 B0 FD | 	call	#__system___gc_free
27e2c     18 2F 02 F6 | 	mov	local05, local06
27e30     60 FF 9F FD | 	jmp	#LR__3310
27e34                 | LR__3312
27e34     17 31 02 F6 | 	mov	local06, local05
27e38     14 31 02 F1 | 	add	local06, local02
27e3c     18 01 48 FC | 	wrbyte	#0, local06
27e40     17 FB 01 F6 | 	mov	result1, local05
27e44                 | LR__3313
27e44     A7 F0 03 F6 | 	mov	ptra, fp
27e48     B2 00 A0 FD | 	call	#popregs_
27e4c                 | __system___basic_read_line_ret
27e4c     2D 00 64 FD | 	ret
27e50                 | 
27e50                 | __system___waitms
27e50     09 01 02 F6 | 	mov	_var01, arg01
27e54     1A 02 62 FD | 	getct	_var02
27e58     14 04 06 FB | 	rdlong	_var03, #20
27e5c     97 14 48 FB | 	callpa	#(@LR__3321-@LR__3320)>>2,fcache_load_ptr_
27e60                 | LR__3320
27e60     01 00 00 FF 
27e64     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
27e68     1C 00 90 CD |  if_b	jmp	#LR__3322
27e6c     02 03 02 F1 | 	add	_var02, _var03
27e70     01 13 02 F6 | 	mov	arg01, _var02
27e74     00 12 66 FA | 	addct1	arg01, #0
27e78     24 22 60 FD | 	waitct1
27e7c     01 00 00 FF 
27e80     E8 01 86 F1 | 	sub	_var01, ##1000
27e84     D8 FF 9F FD | 	jmp	#LR__3320
27e88                 | LR__3321
27e88                 | LR__3322
27e88     01 00 56 F2 | 	cmps	_var01, #1 wc
27e8c     28 00 90 CD |  if_b	jmp	#LR__3323
27e90     02 01 02 FD | 	qmul	_var01, _var03
27e94     01 00 00 FF 
27e98     E8 17 06 F6 | 	mov	arg03, ##1000
27e9c     19 FA 61 FD | 	getqy	result1
27ea0     18 12 62 FD | 	getqx	arg01
27ea4     28 FA 61 FD | 	setq	result1
27ea8     0B 13 12 FD | 	qdiv	arg01, arg03
27eac     18 12 62 FD | 	getqx	arg01
27eb0     01 13 62 FA | 	addct1	arg01, _var02
27eb4     24 22 60 FD | 	waitct1
27eb8                 | LR__3323
27eb8                 | __system___waitms_ret
27eb8     2D 00 64 FD | 	ret
27ebc                 | 
27ebc                 | __system___waitus
27ebc     09 01 02 F6 | 	mov	_var01, arg01
27ec0     1A 02 62 FD | 	getct	_var02
27ec4     14 04 06 FB | 	rdlong	_var03, #20
27ec8     97 14 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
27ecc                 | LR__3330
27ecc     A1 07 00 FF 
27ed0     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
27ed4     1C 00 90 CD |  if_b	jmp	#LR__3332
27ed8     02 03 02 F1 | 	add	_var02, _var03
27edc     01 13 02 F6 | 	mov	arg01, _var02
27ee0     00 12 66 FA | 	addct1	arg01, #0
27ee4     24 22 60 FD | 	waitct1
27ee8     A1 07 00 FF 
27eec     40 00 86 F1 | 	sub	_var01, ##1000000
27ef0     D8 FF 9F FD | 	jmp	#LR__3330
27ef4                 | LR__3331
27ef4                 | LR__3332
27ef4     01 00 56 F2 | 	cmps	_var01, #1 wc
27ef8     28 00 90 CD |  if_b	jmp	#LR__3333
27efc     02 01 02 FD | 	qmul	_var01, _var03
27f00     A1 07 00 FF 
27f04     40 16 06 F6 | 	mov	arg03, ##1000000
27f08     19 FA 61 FD | 	getqy	result1
27f0c     18 12 62 FD | 	getqx	arg01
27f10     28 FA 61 FD | 	setq	result1
27f14     0B 13 12 FD | 	qdiv	arg01, arg03
27f18     18 FA 61 FD | 	getqx	result1
27f1c     FD 02 62 FA | 	addct1	_var02, result1
27f20     24 22 60 FD | 	waitct1
27f24                 | LR__3333
27f24                 | __system___waitus_ret
27f24     2D 00 64 FD | 	ret
27f28                 | 
27f28                 | __system___mount
27f28     0B 4A 05 F6 | 	mov	COUNT_, #11
27f2c     A8 00 A0 FD | 	call	#pushregs_
27f30     09 27 02 F6 | 	mov	local01, arg01
27f34     0A 29 0A F6 | 	mov	local02, arg02 wz
27f38     01 2A 66 F6 | 	neg	local03, #1
27f3c     01 FA 65 A6 |  if_e	neg	result1, #1
27f40     98 02 90 AD |  if_e	jmp	#LR__3355
27f44     13 FB C1 FA | 	rdbyte	result1, local01
27f48     2F FA 0D F2 | 	cmp	result1, #47 wz
27f4c     28 00 90 5D |  if_ne	jmp	#LR__3342
27f50     13 13 02 F6 | 	mov	arg01, local01
27f54     09 2D 02 F6 | 	mov	local04, arg01
27f58     97 06 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
27f5c                 | LR__3340
27f5c     16 FB C9 FA | 	rdbyte	result1, local04 wz
27f60     01 2C 06 51 |  if_ne	add	local04, #1
27f64     F4 FF 9F 5D |  if_ne	jmp	#LR__3340
27f68                 | LR__3341
27f68     09 2D 82 F1 | 	sub	local04, arg01
27f6c     16 FB 01 F6 | 	mov	result1, local04
27f70     10 FA 55 F2 | 	cmps	result1, #16 wc
27f74     14 00 90 CD |  if_b	jmp	#LR__3343
27f78                 | LR__3342
27f78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27f7c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
27f80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27f84     01 FA 65 F6 | 	neg	result1, #1
27f88     50 02 90 FD | 	jmp	#LR__3355
27f8c                 | LR__3343
27f8c     00 2E 06 F6 | 	mov	local05, #0
27f90                 | LR__3344
27f90     04 2E 56 F2 | 	cmps	local05, #4 wc
27f94     B0 00 90 3D |  if_ae	jmp	#LR__3349
27f98     17 13 02 F6 | 	mov	arg01, local05
27f9c     02 12 66 F0 | 	shl	arg01, #2
27fa0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27fa4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
27fa8     09 FB 09 FB | 	rdlong	result1, arg01 wz
27fac     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27fb0     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
27fb4     17 2B 02 86 |  if_c_and_z	mov	local03, local05
27fb8     84 00 90 8D |  if_c_and_z	jmp	#LR__3348
27fbc     17 13 02 F6 | 	mov	arg01, local05
27fc0     02 12 66 F0 | 	shl	arg01, #2
27fc4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27fc8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
27fcc     09 13 02 FB | 	rdlong	arg01, arg01
27fd0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27fd4     09 2D 02 F6 | 	mov	local04, arg01
27fd8     97 06 48 FB | 	callpa	#(@LR__3346-@LR__3345)>>2,fcache_load_ptr_
27fdc                 | LR__3345
27fdc     16 FB C9 FA | 	rdbyte	result1, local04 wz
27fe0     01 2C 06 51 |  if_ne	add	local04, #1
27fe4     F4 FF 9F 5D |  if_ne	jmp	#LR__3345
27fe8                 | LR__3346
27fe8     09 2D 82 F1 | 	sub	local04, arg01
27fec     16 31 02 F6 | 	mov	local06, local04
27ff0     18 13 02 F6 | 	mov	arg01, local06
27ff4     13 13 02 F1 | 	add	arg01, local01
27ff8     09 FB C1 FA | 	rdbyte	result1, arg01
27ffc     2F FA 0D F2 | 	cmp	result1, #47 wz
28000     18 33 02 56 |  if_ne	mov	local07, local06
28004     13 33 02 51 |  if_ne	add	local07, local01
28008     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
2800c     30 00 90 5D |  if_ne	jmp	#LR__3347
28010     17 17 02 F6 | 	mov	arg03, local05
28014     02 16 66 F0 | 	shl	arg03, #2
28018     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2801c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
28020     0B 15 02 FB | 	rdlong	arg02, arg03
28024     13 13 02 F6 | 	mov	arg01, local01
28028     18 17 02 F6 | 	mov	arg03, local06
2802c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28030     54 51 B0 FD | 	call	#__system__strncmp
28034     00 FA 0D F2 | 	cmp	result1, #0 wz
28038     17 2B 02 A6 |  if_e	mov	local03, local05
2803c     08 00 90 AD |  if_e	jmp	#LR__3349
28040                 | LR__3347
28040                 | LR__3348
28040     01 2E 06 F1 | 	add	local05, #1
28044     48 FF 9F FD | 	jmp	#LR__3344
28048                 | LR__3349
28048     FF FF 7F FF 
2804c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
28050     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28054     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
28058     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2805c     01 FA 65 A6 |  if_e	neg	result1, #1
28060     78 01 90 AD |  if_e	jmp	#LR__3355
28064     15 2F 02 F6 | 	mov	local05, local03
28068     17 33 02 F6 | 	mov	local07, local05
2806c     02 32 66 F0 | 	shl	local07, #2
28070     74 E6 05 F1 | 	add	ptr___system__dat__, #116
28074     F3 32 02 F1 | 	add	local07, ptr___system__dat__
28078     19 31 0A FB | 	rdlong	local06, local07 wz
2807c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
28080     58 00 90 AD |  if_e	jmp	#LR__3350
28084     4C 30 06 F1 | 	add	local06, #76
28088     18 33 0A FB | 	rdlong	local07, local06 wz
2808c     4C 30 86 F1 | 	sub	local06, #76
28090     48 00 90 AD |  if_e	jmp	#LR__3350
28094     4C 30 06 F1 | 	add	local06, #76
28098     18 33 02 FB | 	rdlong	local07, local06
2809c     19 2B 02 F6 | 	mov	local03, local07
280a0     13 32 46 F7 | 	zerox	local07, #19
280a4     14 2A 46 F0 | 	shr	local03, #20
280a8     02 2A 66 F0 | 	shl	local03, #2
280ac     ED 2A 02 F1 | 	add	local03, __methods__
280b0     15 2B 02 FB | 	rdlong	local03, local03
280b4     17 31 02 F6 | 	mov	local06, local05
280b8     02 30 66 F0 | 	shl	local06, #2
280bc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
280c0     F3 30 02 F1 | 	add	local06, ptr___system__dat__
280c4     18 13 02 FB | 	rdlong	arg01, local06
280c8     F2 30 02 F6 | 	mov	local06, objptr
280cc     19 E5 01 F6 | 	mov	objptr, local07
280d0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
280d4     2D 2A 62 FD | 	call	local03
280d8     18 E5 01 F6 | 	mov	objptr, local06
280dc                 | LR__3350
280dc     17 35 02 F6 | 	mov	local08, local05
280e0     02 34 66 F0 | 	shl	local08, #2
280e4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
280e8     F3 34 02 F1 | 	add	local08, ptr___system__dat__
280ec     1A 29 62 FC | 	wrlong	local02, local08
280f0     00 28 0E F2 | 	cmp	local02, #0 wz
280f4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
280f8     18 00 90 5D |  if_ne	jmp	#LR__3351
280fc     02 2E 66 F0 | 	shl	local05, #2
28100     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28104     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
28108     17 01 68 FC | 	wrlong	#0, local05
2810c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28110     C4 00 90 FD | 	jmp	#LR__3354
28114                 | LR__3351
28114     17 37 02 F6 | 	mov	local09, local05
28118     04 36 66 F0 | 	shl	local09, #4
2811c     24 E6 05 F1 | 	add	ptr___system__dat__, #36
28120     F3 36 02 F1 | 	add	local09, ptr___system__dat__
28124     1B 13 02 F6 | 	mov	arg01, local09
28128     13 15 02 F6 | 	mov	arg02, local01
2812c     10 16 06 F6 | 	mov	arg03, #16
28130     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
28134     A0 4F B0 FD | 	call	#__system__strncpy
28138     48 28 06 F1 | 	add	local02, #72
2813c     14 35 0A FB | 	rdlong	local08, local02 wz
28140     48 28 86 F1 | 	sub	local02, #72
28144     7C 00 90 AD |  if_e	jmp	#LR__3353
28148     48 28 06 F1 | 	add	local02, #72
2814c     14 35 02 FB | 	rdlong	local08, local02
28150     1A 39 02 F6 | 	mov	local10, local08
28154     13 34 46 F7 | 	zerox	local08, #19
28158     14 38 46 F0 | 	shr	local10, #20
2815c     02 38 66 F0 | 	shl	local10, #2
28160     ED 38 02 F1 | 	add	local10, __methods__
28164     1C 39 02 FB | 	rdlong	local10, local10
28168     1B 13 02 F6 | 	mov	arg01, local09
2816c     F2 3A 02 F6 | 	mov	local11, objptr
28170     1A E5 01 F6 | 	mov	objptr, local08
28174     2D 38 62 FD | 	call	local10
28178     1D E5 01 F6 | 	mov	objptr, local11
2817c     FD 12 0A F6 | 	mov	arg01, result1 wz
28180     40 00 90 AD |  if_e	jmp	#LR__3352
28184     17 35 02 F6 | 	mov	local08, local05
28188     02 34 66 F0 | 	shl	local08, #2
2818c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
28190     F3 34 02 F1 | 	add	local08, ptr___system__dat__
28194     1A 01 68 FC | 	wrlong	#0, local08
28198     02 2E 66 F0 | 	shl	local05, #2
2819c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
281a0     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
281a4     17 01 68 FC | 	wrlong	#0, local05
281a8     09 13 6A F6 | 	neg	arg01, arg01 wz
281ac     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
281b0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
281b4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
281b8     01 FA 65 56 |  if_ne	neg	result1, #1
281bc     00 FA 05 A6 |  if_e	mov	result1, #0
281c0     18 00 90 FD | 	jmp	#LR__3355
281c4                 | LR__3352
281c4                 | LR__3353
281c4     02 2E 66 F0 | 	shl	local05, #2
281c8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
281cc     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
281d0     17 37 62 FC | 	wrlong	local09, local05
281d4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
281d8                 | LR__3354
281d8     00 FA 05 F6 | 	mov	result1, #0
281dc                 | LR__3355
281dc     A7 F0 03 F6 | 	mov	ptra, fp
281e0     B2 00 A0 FD | 	call	#popregs_
281e4                 | __system___mount_ret
281e4     2D 00 64 FD | 	ret
281e8                 | 
281e8                 | __system___chdir
281e8     00 4A 05 F6 | 	mov	COUNT_, #0
281ec     A8 00 A0 FD | 	call	#pushregs_
281f0     40 F0 07 F1 | 	add	ptra, #64
281f4     04 4E 05 F1 | 	add	fp, #4
281f8     A7 12 62 FC | 	wrlong	arg01, fp
281fc     04 4E 05 F1 | 	add	fp, #4
28200     A7 14 02 F6 | 	mov	arg02, fp
28204     08 4E 85 F1 | 	sub	fp, #8
28208     70 4B B0 FD | 	call	#__system__stat
2820c     3C 4E 05 F1 | 	add	fp, #60
28210     A7 FA 61 FC | 	wrlong	result1, fp
28214     3C 4E 85 F1 | 	sub	fp, #60
28218     00 FA 0D F2 | 	cmp	result1, #0 wz
2821c     3C 4E 05 51 |  if_ne	add	fp, #60
28220     A7 FA 01 5B |  if_ne	rdlong	result1, fp
28224     3C 4E 85 51 |  if_ne	sub	fp, #60
28228     BC 00 90 5D |  if_ne	jmp	#LR__3362
2822c     10 4E 05 F1 | 	add	fp, #16
28230     A7 12 02 FB | 	rdlong	arg01, fp
28234     10 4E 85 F1 | 	sub	fp, #16
28238     78 00 00 FF 
2823c     00 12 06 F5 | 	and	arg01, ##61440
28240     08 00 00 FF 
28244     00 12 0E F2 | 	cmp	arg01, ##4096 wz
28248     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
2824c     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
28250     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
28254     01 FA 65 56 |  if_ne	neg	result1, #1
28258     8C 00 90 5D |  if_ne	jmp	#LR__3362
2825c     04 4E 05 F1 | 	add	fp, #4
28260     A7 16 02 FB | 	rdlong	arg03, fp
28264     04 4E 85 F1 | 	sub	fp, #4
28268     0B 17 C2 FA | 	rdbyte	arg03, arg03
2826c     2F 16 0E F2 | 	cmp	arg03, #47 wz
28270     24 00 90 5D |  if_ne	jmp	#LR__3360
28274     84 E6 05 F1 | 	add	ptr___system__dat__, #132
28278     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2827c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
28280     04 4E 05 F1 | 	add	fp, #4
28284     A7 14 02 FB | 	rdlong	arg02, fp
28288     04 4E 85 F1 | 	sub	fp, #4
2828c     00 17 06 F6 | 	mov	arg03, #256
28290     44 4E B0 FD | 	call	#__system__strncpy
28294     4C 00 90 FD | 	jmp	#LR__3361
28298                 | LR__3360
28298     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2829c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
282a0     38 4E 05 F1 | 	add	fp, #56
282a4     A7 12 62 FC | 	wrlong	arg01, fp
282a8     38 4E 85 F1 | 	sub	fp, #56
282ac     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
282b0     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
282b4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
282b8     00 17 06 F6 | 	mov	arg03, #256
282bc     18 4E B0 FD | 	call	#__system__strncpy
282c0     38 4E 05 F1 | 	add	fp, #56
282c4     A7 12 02 FB | 	rdlong	arg01, fp
282c8     34 4E 85 F1 | 	sub	fp, #52
282cc     A7 14 02 FB | 	rdlong	arg02, fp
282d0     04 4E 85 F1 | 	sub	fp, #4
282d4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
282d8     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
282dc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
282e0     10 00 B0 FD | 	call	#__system____getvfsforfile
282e4                 | LR__3361
282e4     00 FA 05 F6 | 	mov	result1, #0
282e8                 | LR__3362
282e8     A7 F0 03 F6 | 	mov	ptra, fp
282ec     B2 00 A0 FD | 	call	#popregs_
282f0                 | __system___chdir_ret
282f0     2D 00 64 FD | 	ret
282f4                 | 
282f4                 | __system____getvfsforfile
282f4     0E 4A 05 F6 | 	mov	COUNT_, #14
282f8     A8 00 A0 FD | 	call	#pushregs_
282fc     09 27 02 F6 | 	mov	local01, arg01
28300     0A 29 02 F6 | 	mov	local02, arg02
28304     0B 2B 02 F6 | 	mov	local03, arg03
28308     97 10 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
2830c                 | LR__3370
2830c     14 FB C1 FA | 	rdbyte	result1, local02
28310     2F FA 0D F2 | 	cmp	result1, #47 wz
28314     01 28 06 A1 |  if_e	add	local02, #1
28318     14 2D C2 AA |  if_e	rdbyte	local04, local02
2831c     01 28 86 A1 |  if_e	sub	local02, #1
28320     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
28324     01 28 06 A1 |  if_e	add	local02, #1
28328     E0 FF 9F AD |  if_e	jmp	#LR__3370
2832c                 | LR__3371
2832c     14 2D C2 FA | 	rdbyte	local04, local02
28330     2F 2C 0E F2 | 	cmp	local04, #47 wz
28334     14 00 90 5D |  if_ne	jmp	#LR__3372
28338     13 13 02 F6 | 	mov	arg01, local01
2833c     14 15 02 F6 | 	mov	arg02, local02
28340     00 17 06 F6 | 	mov	arg03, #256
28344     90 4D B0 FD | 	call	#__system__strncpy
28348     7C 00 90 FD | 	jmp	#LR__3374
2834c                 | LR__3372
2834c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
28350     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
28354     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
28358     13 13 02 F6 | 	mov	arg01, local01
2835c     00 17 06 F6 | 	mov	arg03, #256
28360     74 4D B0 FD | 	call	#__system__strncpy
28364     14 2D CA FA | 	rdbyte	local04, local02 wz
28368     5C 00 90 AD |  if_e	jmp	#LR__3373
2836c     14 2D C2 FA | 	rdbyte	local04, local02
28370     2E 2C 0E F2 | 	cmp	local04, #46 wz
28374     01 28 06 A1 |  if_e	add	local02, #1
28378     14 2F C2 AA |  if_e	rdbyte	local05, local02
2837c     01 28 86 A1 |  if_e	sub	local02, #1
28380     17 31 02 A6 |  if_e	mov	local06, local05
28384     07 30 4E A7 |  if_e	zerox	local06, #7 wz
28388     3C 00 90 AD |  if_e	jmp	#LR__3373
2838c     13 2F C2 FA | 	rdbyte	local05, local01
28390     2F 2E 0E F2 | 	cmp	local05, #47 wz
28394     01 26 06 A1 |  if_e	add	local01, #1
28398     13 2D C2 AA |  if_e	rdbyte	local04, local01
2839c     01 26 86 A1 |  if_e	sub	local01, #1
283a0     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
283a4     BB 01 00 5F 
283a8     78 14 06 56 |  if_ne	mov	arg02, ##@LR__5510
283ac     13 13 02 56 |  if_ne	mov	arg01, local01
283b0     00 17 06 56 |  if_ne	mov	arg03, #256
283b4     6C 4D B0 5D |  if_ne	call	#__system__strncat
283b8     13 13 02 F6 | 	mov	arg01, local01
283bc     14 15 02 F6 | 	mov	arg02, local02
283c0     00 17 06 F6 | 	mov	arg03, #256
283c4     5C 4D B0 FD | 	call	#__system__strncat
283c8                 | LR__3373
283c8                 | LR__3374
283c8     13 13 02 F6 | 	mov	arg01, local01
283cc     18 4F B0 FD | 	call	#__system___normalizeName
283d0     13 2D CA FA | 	rdbyte	local04, local01 wz
283d4     1C 00 90 AD |  if_e	jmp	#LR__3375
283d8     13 2D C2 FA | 	rdbyte	local04, local01
283dc     2F 2C 0E F2 | 	cmp	local04, #47 wz
283e0     01 26 06 A1 |  if_e	add	local01, #1
283e4     13 31 C2 AA |  if_e	rdbyte	local06, local01
283e8     01 26 86 A1 |  if_e	sub	local01, #1
283ec     00 30 4E A2 |  if_e	cmps	local06, #0 wz
283f0     18 00 90 5D |  if_ne	jmp	#LR__3376
283f4                 | LR__3375
283f4     01 00 00 FF 
283f8     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
283fc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
28400     01 00 00 FF 
28404     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
28408     EC 01 90 FD | 	jmp	#LR__3390
2840c                 | LR__3376
2840c     00 32 06 F6 | 	mov	local07, #0
28410                 | LR__3377
28410     04 32 56 F2 | 	cmps	local07, #4 wc
28414     CC 01 90 3D |  if_ae	jmp	#LR__3389
28418     19 31 02 F6 | 	mov	local06, local07
2841c     02 30 66 F0 | 	shl	local06, #2
28420     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28424     F3 30 02 F1 | 	add	local06, ptr___system__dat__
28428     18 31 0A FB | 	rdlong	local06, local06 wz
2842c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
28430     A8 01 90 AD |  if_e	jmp	#LR__3388
28434     19 2D 02 F6 | 	mov	local04, local07
28438     02 2C 66 F0 | 	shl	local04, #2
2843c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28440     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
28444     16 13 02 FB | 	rdlong	arg01, local04
28448     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2844c     09 35 02 F6 | 	mov	local08, arg01
28450     97 06 48 FB | 	callpa	#(@LR__3379-@LR__3378)>>2,fcache_load_ptr_
28454                 | LR__3378
28454     1A FB C9 FA | 	rdbyte	result1, local08 wz
28458     01 34 06 51 |  if_ne	add	local08, #1
2845c     F4 FF 9F 5D |  if_ne	jmp	#LR__3378
28460                 | LR__3379
28460     09 35 82 F1 | 	sub	local08, arg01
28464     1A 37 02 F6 | 	mov	local09, local08
28468     1B 2D 02 F6 | 	mov	local04, local09
2846c     13 2D 02 F1 | 	add	local04, local01
28470     16 31 C2 FA | 	rdbyte	local06, local04
28474     2F 30 0E F2 | 	cmp	local06, #47 wz
28478     1B 39 02 56 |  if_ne	mov	local10, local09
2847c     13 39 02 51 |  if_ne	add	local10, local01
28480     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
28484     54 01 90 5D |  if_ne	jmp	#LR__3387
28488     19 17 02 F6 | 	mov	arg03, local07
2848c     02 16 66 F0 | 	shl	arg03, #2
28490     64 E6 05 F1 | 	add	ptr___system__dat__, #100
28494     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
28498     0B 15 02 FB | 	rdlong	arg02, arg03
2849c     1B 17 02 F6 | 	mov	arg03, local09
284a0     13 13 02 F6 | 	mov	arg01, local01
284a4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
284a8     DC 4C B0 FD | 	call	#__system__strncmp
284ac     00 FA 4D F2 | 	cmps	result1, #0 wz
284b0     28 01 90 5D |  if_ne	jmp	#LR__3387
284b4     19 3B 02 F6 | 	mov	local11, local07
284b8     02 3A 66 F0 | 	shl	local11, #2
284bc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
284c0     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
284c4     1D 3D 02 FB | 	rdlong	local12, local11
284c8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
284cc     97 22 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
284d0                 | LR__3380
284d0     1B 31 02 F6 | 	mov	local06, local09
284d4     01 30 06 F1 | 	add	local06, #1
284d8     13 31 02 F1 | 	add	local06, local01
284dc     18 3B C2 FA | 	rdbyte	local11, local06
284e0     2E 3A 0E F2 | 	cmp	local11, #46 wz
284e4     2C 00 90 5D |  if_ne	jmp	#LR__3382
284e8     1B 3B 02 F6 | 	mov	local11, local09
284ec     02 3A 06 F1 | 	add	local11, #2
284f0     13 3B 02 F1 | 	add	local11, local01
284f4     1D 39 C2 FA | 	rdbyte	local10, local11
284f8     2F 38 0E F2 | 	cmp	local10, #47 wz
284fc     1B 3F 02 56 |  if_ne	mov	local13, local09
28500     02 3E 06 51 |  if_ne	add	local13, #2
28504     13 3F 02 51 |  if_ne	add	local13, local01
28508     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
2850c     01 36 06 A1 |  if_e	add	local09, #1
28510     BC FF 9F AD |  if_e	jmp	#LR__3380
28514                 | LR__3381
28514                 | LR__3382
28514     00 2A 0E F2 | 	cmp	local03, #0 wz
28518     15 13 02 56 |  if_ne	mov	arg01, local03
2851c     13 15 02 56 |  if_ne	mov	arg02, local01
28520     00 17 06 56 |  if_ne	mov	arg03, #256
28524     B0 4B B0 5D |  if_ne	call	#__system__strncpy
28528     13 15 02 F6 | 	mov	arg02, local01
2852c     1B 15 02 F1 | 	add	arg02, local09
28530     01 14 06 F1 | 	add	arg02, #1
28534     13 13 02 F6 | 	mov	arg01, local01
28538     D4 F5 BF FD | 	call	#__system____builtin_strcpy
2853c     13 13 02 F6 | 	mov	arg01, local01
28540     09 35 02 F6 | 	mov	local08, arg01
28544     97 06 48 FB | 	callpa	#(@LR__3384-@LR__3383)>>2,fcache_load_ptr_
28548                 | LR__3383
28548     1A FB C9 FA | 	rdbyte	result1, local08 wz
2854c     01 34 06 51 |  if_ne	add	local08, #1
28550     F4 FF 9F 5D |  if_ne	jmp	#LR__3383
28554                 | LR__3384
28554     09 35 82 F1 | 	sub	local08, arg01
28558     1A 37 02 F6 | 	mov	local09, local08
2855c                 | LR__3385
2855c     01 36 56 F2 | 	cmps	local09, #1 wc
28560     70 00 90 CD |  if_b	jmp	#LR__3386
28564     1B 2D 02 F6 | 	mov	local04, local09
28568     13 2D 02 F1 | 	add	local04, local01
2856c     16 3B C2 FA | 	rdbyte	local11, local04
28570     2F 3A 0E F2 | 	cmp	local11, #47 wz
28574     1B 3B 02 A6 |  if_e	mov	local11, local09
28578     13 3B 02 A1 |  if_e	add	local11, local01
2857c     1D 01 48 AC |  if_e	wrbyte	#0, local11
28580     01 36 86 A1 |  if_e	sub	local09, #1
28584     D4 FF 9F AD |  if_e	jmp	#LR__3385
28588     1B 2D 02 F6 | 	mov	local04, local09
2858c     13 2D 02 F1 | 	add	local04, local01
28590     16 3B C2 FA | 	rdbyte	local11, local04
28594     2E 3A 0E F2 | 	cmp	local11, #46 wz
28598     38 00 90 5D |  if_ne	jmp	#LR__3386
2859c     02 36 56 F2 | 	cmps	local09, #2 wc
285a0     30 00 90 CD |  if_b	jmp	#LR__3386
285a4     1B 41 02 F6 | 	mov	local14, local09
285a8     01 40 86 F1 | 	sub	local14, #1
285ac     13 41 02 F1 | 	add	local14, local01
285b0     20 2F C2 FA | 	rdbyte	local05, local14
285b4     2F 2E 0E F2 | 	cmp	local05, #47 wz
285b8     18 00 90 5D |  if_ne	jmp	#LR__3386
285bc     1B 2D 02 F6 | 	mov	local04, local09
285c0     01 2C 86 F1 | 	sub	local04, #1
285c4     13 2D 02 F1 | 	add	local04, local01
285c8     16 01 48 FC | 	wrbyte	#0, local04
285cc     02 36 86 F1 | 	sub	local09, #2
285d0     88 FF 9F FD | 	jmp	#LR__3385
285d4                 | LR__3386
285d4     1E FB 01 F6 | 	mov	result1, local12
285d8     1C 00 90 FD | 	jmp	#LR__3390
285dc                 | LR__3387
285dc                 | LR__3388
285dc     01 32 06 F1 | 	add	local07, #1
285e0     2C FE 9F FD | 	jmp	#LR__3377
285e4                 | LR__3389
285e4     02 00 00 FF 
285e8     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
285ec     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
285f0     02 00 00 FF 
285f4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
285f8                 | LR__3390
285f8     A7 F0 03 F6 | 	mov	ptra, fp
285fc     B2 00 A0 FD | 	call	#popregs_
28600                 | __system____getvfsforfile_ret
28600     2D 00 64 FD | 	ret
28604                 | 
28604                 | __system___basic_open
28604     05 4A 05 F6 | 	mov	COUNT_, #5
28608     A8 00 A0 FD | 	call	#pushregs_
2860c     0A 27 02 F6 | 	mov	local01, arg02
28610     0B 29 02 F6 | 	mov	local02, arg03
28614     0C 2B 02 F6 | 	mov	local03, arg04
28618     00 2C 06 F6 | 	mov	local04, #0
2861c     90 4A B0 FD | 	call	#__system____getftab
28620     FD 2E 0A F6 | 	mov	local05, result1 wz
28624     18 00 90 5D |  if_ne	jmp	#LR__3400
28628     EE 12 02 F6 | 	mov	arg01, abortchain
2862c     0C 14 06 F6 | 	mov	arg02, #12
28630     01 16 06 F6 | 	mov	arg03, #1
28634     DA 00 A0 FD | 	call	#__longjmp
28638     01 FA 65 F6 | 	neg	result1, #1
2863c     14 01 90 FD | 	jmp	#LR__3409
28640                 | LR__3400
28640     08 2E 06 F1 | 	add	local05, #8
28644     17 FB 09 FB | 	rdlong	result1, local05 wz
28648     08 2E 86 F1 | 	sub	local05, #8
2864c     17 13 02 56 |  if_ne	mov	arg01, local05
28650     B0 41 B0 5D |  if_ne	call	#__system___closeraw
28654     00 26 0E F2 | 	cmp	local01, #0 wz
28658     00 28 0E A2 |  if_e	cmp	local02, #0 wz
2865c     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
28660     3C 00 90 AD |  if_e	jmp	#LR__3402
28664     0C 12 06 F6 | 	mov	arg01, #12
28668     98 36 B0 FD | 	call	#__system___gc_alloc_managed
2866c     FD 2C 0A F6 | 	mov	local04, result1 wz
28670     18 00 90 5D |  if_ne	jmp	#LR__3401
28674     EE 12 02 F6 | 	mov	arg01, abortchain
28678     07 14 06 F6 | 	mov	arg02, #7
2867c     01 16 06 F6 | 	mov	arg03, #1
28680     DA 00 A0 FD | 	call	#__longjmp
28684     01 FA 65 F6 | 	neg	result1, #1
28688     C8 00 90 FD | 	jmp	#LR__3409
2868c                 | LR__3401
2868c     16 01 68 FC | 	wrlong	#0, local04
28690     04 2C 06 F1 | 	add	local04, #4
28694     16 01 68 FC | 	wrlong	#0, local04
28698     04 2C 86 F1 | 	sub	local04, #4
2869c     17 2D 62 FC | 	wrlong	local04, local05
286a0                 | LR__3402
286a0     00 26 0E F2 | 	cmp	local01, #0 wz
286a4     20 00 90 AD |  if_e	jmp	#LR__3403
286a8     16 27 62 FC | 	wrlong	local01, local04
286ac     16 FB 01 F6 | 	mov	result1, local04
286b0     00 58 05 FF 
286b4     00 FA 45 F5 | 	or	result1, ##179306496
286b8     1C 2E 06 F1 | 	add	local05, #28
286bc     17 FB 61 FC | 	wrlong	result1, local05
286c0     1C 2E 86 F1 | 	sub	local05, #28
286c4     0C 00 90 FD | 	jmp	#LR__3404
286c8                 | LR__3403
286c8     1C 2E 06 F1 | 	add	local05, #28
286cc     17 01 68 FC | 	wrlong	#0, local05
286d0     1C 2E 86 F1 | 	sub	local05, #28
286d4                 | LR__3404
286d4     00 28 0E F2 | 	cmp	local02, #0 wz
286d8     28 00 90 AD |  if_e	jmp	#LR__3405
286dc     04 2C 06 F1 | 	add	local04, #4
286e0     16 29 62 FC | 	wrlong	local02, local04
286e4     04 2C 86 F1 | 	sub	local04, #4
286e8     16 FB 01 F6 | 	mov	result1, local04
286ec     00 60 05 FF 
286f0     00 FA 45 F5 | 	or	result1, ##180355072
286f4     20 2E 06 F1 | 	add	local05, #32
286f8     17 FB 61 FC | 	wrlong	result1, local05
286fc     20 2E 86 F1 | 	sub	local05, #32
28700     0C 00 90 FD | 	jmp	#LR__3406
28704                 | LR__3405
28704     20 2E 06 F1 | 	add	local05, #32
28708     17 01 68 FC | 	wrlong	#0, local05
2870c     20 2E 86 F1 | 	sub	local05, #32
28710                 | LR__3406
28710     00 2A 0E F2 | 	cmp	local03, #0 wz
28714     24 00 90 AD |  if_e	jmp	#LR__3407
28718     08 2C 06 F1 | 	add	local04, #8
2871c     16 2B 62 FC | 	wrlong	local03, local04
28720     08 2C 86 F1 | 	sub	local04, #8
28724     00 68 05 FF 
28728     00 2C 46 F5 | 	or	local04, ##181403648
2872c     24 2E 06 F1 | 	add	local05, #36
28730     17 2D 62 FC | 	wrlong	local04, local05
28734     24 2E 86 F1 | 	sub	local05, #36
28738     0C 00 90 FD | 	jmp	#LR__3408
2873c                 | LR__3407
2873c     24 2E 06 F1 | 	add	local05, #36
28740     17 01 68 FC | 	wrlong	#0, local05
28744     24 2E 86 F1 | 	sub	local05, #36
28748                 | LR__3408
28748     08 2E 06 F1 | 	add	local05, #8
2874c     17 0F 68 FC | 	wrlong	#7, local05
28750     00 FA 05 F6 | 	mov	result1, #0
28754                 | LR__3409
28754     A7 F0 03 F6 | 	mov	ptra, fp
28758     B2 00 A0 FD | 	call	#popregs_
2875c                 | __system___basic_open_ret
2875c     2D 00 64 FD | 	ret
28760                 | 
28760                 | __system___basic_open_string
28760     04 4A 05 F6 | 	mov	COUNT_, #4
28764     A8 00 A0 FD | 	call	#pushregs_
28768     0A 27 02 F6 | 	mov	local01, arg02
2876c     0B 29 02 F6 | 	mov	local02, arg03
28770     3C 49 B0 FD | 	call	#__system____getftab
28774     FD 2A 0A F6 | 	mov	local03, result1 wz
28778     18 00 90 5D |  if_ne	jmp	#LR__3410
2877c     EE 12 02 F6 | 	mov	arg01, abortchain
28780     0C 14 06 F6 | 	mov	arg02, #12
28784     01 16 06 F6 | 	mov	arg03, #1
28788     DA 00 A0 FD | 	call	#__longjmp
2878c     01 FA 65 F6 | 	neg	result1, #1
28790     5C 00 90 FD | 	jmp	#LR__3412
28794                 | LR__3410
28794     08 2A 06 F1 | 	add	local03, #8
28798     15 19 0A FB | 	rdlong	arg04, local03 wz
2879c     08 2A 86 F1 | 	sub	local03, #8
287a0     15 13 02 56 |  if_ne	mov	arg01, local03
287a4     5C 40 B0 5D |  if_ne	call	#__system___closeraw
287a8     13 15 02 F6 | 	mov	arg02, local01
287ac     14 17 02 F6 | 	mov	arg03, local02
287b0     15 13 02 F6 | 	mov	arg01, local03
287b4     B6 19 06 F6 | 	mov	arg04, #438
287b8     44 3D B0 FD | 	call	#__system___openraw
287bc     FD 2C 02 F6 | 	mov	local04, result1
287c0     00 2C 56 F2 | 	cmps	local04, #0 wc
287c4     24 00 90 3D |  if_ae	jmp	#LR__3411
287c8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
287cc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
287d0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
287d4     EE 12 02 F6 | 	mov	arg01, abortchain
287d8     FD 14 02 FB | 	rdlong	arg02, result1
287dc     01 16 06 F6 | 	mov	arg03, #1
287e0     DA 00 A0 FD | 	call	#__longjmp
287e4     01 FA 65 F6 | 	neg	result1, #1
287e8     04 00 90 FD | 	jmp	#LR__3412
287ec                 | LR__3411
287ec     16 FB 01 F6 | 	mov	result1, local04
287f0                 | LR__3412
287f0     A7 F0 03 F6 | 	mov	ptra, fp
287f4     B2 00 A0 FD | 	call	#popregs_
287f8                 | __system___basic_open_string_ret
287f8     2D 00 64 FD | 	ret
287fc                 | 
287fc                 | __system___basic_print_char
287fc     03 4A 05 F6 | 	mov	COUNT_, #3
28800     A8 00 A0 FD | 	call	#pushregs_
28804     0A 27 02 F6 | 	mov	local01, arg02
28808     50 50 B0 FD | 	call	#__system___gettxfunc
2880c     FD 28 0A F6 | 	mov	local02, result1 wz
28810     00 FA 05 A6 |  if_e	mov	result1, #0
28814     30 00 90 AD |  if_e	jmp	#LR__3420
28818     14 2B 02 F6 | 	mov	local03, local02
2881c     13 28 46 F7 | 	zerox	local02, #19
28820     14 2A 46 F0 | 	shr	local03, #20
28824     02 2A 66 F0 | 	shl	local03, #2
28828     ED 2A 02 F1 | 	add	local03, __methods__
2882c     15 2B 02 FB | 	rdlong	local03, local03
28830     13 13 02 F6 | 	mov	arg01, local01
28834     F2 26 02 F6 | 	mov	local01, objptr
28838     14 E5 01 F6 | 	mov	objptr, local02
2883c     2D 2A 62 FD | 	call	local03
28840     13 E5 01 F6 | 	mov	objptr, local01
28844     01 FA 05 F6 | 	mov	result1, #1
28848                 | LR__3420
28848     A7 F0 03 F6 | 	mov	ptra, fp
2884c     B2 00 A0 FD | 	call	#popregs_
28850                 | __system___basic_print_char_ret
28850     2D 00 64 FD | 	ret
28854                 | 
28854                 | __system___basic_print_string
28854     03 4A 05 F6 | 	mov	COUNT_, #3
28858     A8 00 A0 FD | 	call	#pushregs_
2885c     0A 27 02 F6 | 	mov	local01, arg02
28860     0B 29 02 F6 | 	mov	local02, arg03
28864     F4 4F B0 FD | 	call	#__system___gettxfunc
28868     FD 2A 0A F6 | 	mov	local03, result1 wz
2886c     00 FA 05 A6 |  if_e	mov	result1, #0
28870     18 00 90 AD |  if_e	jmp	#LR__3430
28874     00 26 0E F2 | 	cmp	local01, #0 wz
28878     00 FA 05 A6 |  if_e	mov	result1, #0
2887c     15 13 02 56 |  if_ne	mov	arg01, local03
28880     14 15 02 56 |  if_ne	mov	arg02, local02
28884     13 17 02 56 |  if_ne	mov	arg03, local01
28888     08 02 B0 5D |  if_ne	call	#__system___fmtstr
2888c                 | LR__3430
2888c     A7 F0 03 F6 | 	mov	ptra, fp
28890     B2 00 A0 FD | 	call	#popregs_
28894                 | __system___basic_print_string_ret
28894     2D 00 64 FD | 	ret
28898                 | 
28898                 | __system___basic_print_integer
28898     04 4A 05 F6 | 	mov	COUNT_, #4
2889c     A8 00 A0 FD | 	call	#pushregs_
288a0     0A 27 02 F6 | 	mov	local01, arg02
288a4     0B 29 02 F6 | 	mov	local02, arg03
288a8     0C 2B 02 F6 | 	mov	local03, arg04
288ac     AC 4F B0 FD | 	call	#__system___gettxfunc
288b0     FD 2C 0A F6 | 	mov	local04, result1 wz
288b4     00 FA 05 A6 |  if_e	mov	result1, #0
288b8     16 13 02 56 |  if_ne	mov	arg01, local04
288bc     14 15 02 56 |  if_ne	mov	arg02, local02
288c0     13 17 02 56 |  if_ne	mov	arg03, local01
288c4     15 19 02 56 |  if_ne	mov	arg04, local03
288c8     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
288cc     A7 F0 03 F6 | 	mov	ptra, fp
288d0     B2 00 A0 FD | 	call	#popregs_
288d4                 | __system___basic_print_integer_ret
288d4     2D 00 64 FD | 	ret
288d8                 | 
288d8                 | __system___basic_print_unsigned
288d8     03 4A 05 F6 | 	mov	COUNT_, #3
288dc     A8 00 A0 FD | 	call	#pushregs_
288e0     0A 27 02 F6 | 	mov	local01, arg02
288e4     0B 29 02 F6 | 	mov	local02, arg03
288e8     0C 2B 02 F6 | 	mov	local03, arg04
288ec     6C 4F B0 FD | 	call	#__system___gettxfunc
288f0     FD 12 0A F6 | 	mov	arg01, result1 wz
288f4     00 FA 05 A6 |  if_e	mov	result1, #0
288f8     3A 28 26 54 |  if_ne	bith	local02, #58
288fc     14 15 02 56 |  if_ne	mov	arg02, local02
28900     13 17 02 56 |  if_ne	mov	arg03, local01
28904     15 19 02 56 |  if_ne	mov	arg04, local03
28908     74 02 B0 5D |  if_ne	call	#__system___fmtnum
2890c     A7 F0 03 F6 | 	mov	ptra, fp
28910     B2 00 A0 FD | 	call	#popregs_
28914                 | __system___basic_print_unsigned_ret
28914     2D 00 64 FD | 	ret
28918                 | 
28918                 | __system___basic_get_char
28918     03 4A 05 F6 | 	mov	COUNT_, #3
2891c     A8 00 A0 FD | 	call	#pushregs_
28920     7C 4F B0 FD | 	call	#__system___getrxfunc
28924     FD 26 0A F6 | 	mov	local01, result1 wz
28928     01 FA 65 A6 |  if_e	neg	result1, #1
2892c     28 00 90 AD |  if_e	jmp	#LR__3440
28930     13 29 02 F6 | 	mov	local02, local01
28934     13 26 46 F7 | 	zerox	local01, #19
28938     14 28 46 F0 | 	shr	local02, #20
2893c     02 28 66 F0 | 	shl	local02, #2
28940     ED 28 02 F1 | 	add	local02, __methods__
28944     14 29 02 FB | 	rdlong	local02, local02
28948     F2 2A 02 F6 | 	mov	local03, objptr
2894c     13 E5 01 F6 | 	mov	objptr, local01
28950     2D 28 62 FD | 	call	local02
28954     15 E5 01 F6 | 	mov	objptr, local03
28958                 | LR__3440
28958     A7 F0 03 F6 | 	mov	ptra, fp
2895c     B2 00 A0 FD | 	call	#popregs_
28960                 | __system___basic_get_char_ret
28960     2D 00 64 FD | 	ret
28964                 | 
28964                 | __system___basic_put
28964     04 4A 05 F6 | 	mov	COUNT_, #4
28968     A8 00 A0 FD | 	call	#pushregs_
2896c     0D 27 02 F6 | 	mov	local01, arg05
28970     13 19 02 FD | 	qmul	arg04, local01
28974     09 29 02 F6 | 	mov	local02, arg01
28978     0B 2B 02 F6 | 	mov	local03, arg03
2897c     00 14 0E F2 | 	cmp	arg02, #0 wz
28980     01 14 86 51 |  if_ne	sub	arg02, #1
28984     14 13 02 56 |  if_ne	mov	arg01, local02
28988     00 16 06 56 |  if_ne	mov	arg03, #0
2898c     18 2C 62 FD | 	getqx	local04
28990     64 45 B0 5D |  if_ne	call	#__system__lseek
28994     15 15 02 F6 | 	mov	arg02, local03
28998     16 17 02 F6 | 	mov	arg03, local04
2899c     14 13 02 F6 | 	mov	arg01, local02
289a0     A0 44 B0 FD | 	call	#__system__write
289a4     FD 2C 02 F6 | 	mov	local04, result1
289a8     01 2C 56 F2 | 	cmps	local04, #1 wc
289ac     10 00 90 CD |  if_b	jmp	#LR__3450
289b0     16 91 02 F6 | 	mov	muldiva_, local04
289b4     13 93 02 F6 | 	mov	muldivb_, local01
289b8     BA 00 A0 FD | 	call	#divide_
289bc     49 2D 02 F6 | 	mov	local04, muldivb_
289c0                 | LR__3450
289c0     16 FB 01 F6 | 	mov	result1, local04
289c4     A7 F0 03 F6 | 	mov	ptra, fp
289c8     B2 00 A0 FD | 	call	#popregs_
289cc                 | __system___basic_put_ret
289cc     2D 00 64 FD | 	ret
289d0                 | 
289d0                 | __system___basic_get
289d0     04 4A 05 F6 | 	mov	COUNT_, #4
289d4     A8 00 A0 FD | 	call	#pushregs_
289d8     0D 27 02 F6 | 	mov	local01, arg05
289dc     13 19 02 FD | 	qmul	arg04, local01
289e0     09 29 02 F6 | 	mov	local02, arg01
289e4     0B 2B 02 F6 | 	mov	local03, arg03
289e8     00 14 0E F2 | 	cmp	arg02, #0 wz
289ec     01 14 86 51 |  if_ne	sub	arg02, #1
289f0     14 13 02 56 |  if_ne	mov	arg01, local02
289f4     00 16 06 56 |  if_ne	mov	arg03, #0
289f8     18 2C 62 FD | 	getqx	local04
289fc     F8 44 B0 5D |  if_ne	call	#__system__lseek
28a00     15 15 02 F6 | 	mov	arg02, local03
28a04     16 17 02 F6 | 	mov	arg03, local04
28a08     14 13 02 F6 | 	mov	arg01, local02
28a0c     70 44 B0 FD | 	call	#__system__read
28a10     FD 2C 02 F6 | 	mov	local04, result1
28a14     01 2C 56 F2 | 	cmps	local04, #1 wc
28a18     10 00 90 CD |  if_b	jmp	#LR__3460
28a1c     16 91 02 F6 | 	mov	muldiva_, local04
28a20     13 93 02 F6 | 	mov	muldivb_, local01
28a24     BA 00 A0 FD | 	call	#divide_
28a28     49 2D 02 F6 | 	mov	local04, muldivb_
28a2c                 | LR__3460
28a2c     16 FB 01 F6 | 	mov	result1, local04
28a30     A7 F0 03 F6 | 	mov	ptra, fp
28a34     B2 00 A0 FD | 	call	#popregs_
28a38                 | __system___basic_get_ret
28a38     2D 00 64 FD | 	ret
28a3c                 | 
28a3c                 | __system___fmtchar
28a3c     00 4A 05 F6 | 	mov	COUNT_, #0
28a40     A8 00 A0 FD | 	call	#pushregs_
28a44     10 F0 07 F1 | 	add	ptra, #16
28a48     04 4E 05 F1 | 	add	fp, #4
28a4c     A7 12 62 FC | 	wrlong	arg01, fp
28a50     04 4E 05 F1 | 	add	fp, #4
28a54     A7 14 62 FC | 	wrlong	arg02, fp
28a58     04 4E 05 F1 | 	add	fp, #4
28a5c     A7 16 62 FC | 	wrlong	arg03, fp
28a60     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
28a64     A7 16 62 FC | 	wrlong	arg03, fp
28a68     08 4E 85 F1 | 	sub	fp, #8
28a6c     A7 12 02 FB | 	rdlong	arg01, fp
28a70     04 4E 05 F1 | 	add	fp, #4
28a74     A7 14 02 FB | 	rdlong	arg02, fp
28a78     04 4E 05 F1 | 	add	fp, #4
28a7c     A7 16 02 F6 | 	mov	arg03, fp
28a80     0C 4E 85 F1 | 	sub	fp, #12
28a84     0C 00 B0 FD | 	call	#__system___fmtstr
28a88     A7 F0 03 F6 | 	mov	ptra, fp
28a8c     B2 00 A0 FD | 	call	#popregs_
28a90                 | __system___fmtchar_ret
28a90     2D 00 64 FD | 	ret
28a94                 | 
28a94                 | __system___fmtstr
28a94     09 4A 05 F6 | 	mov	COUNT_, #9
28a98     A8 00 A0 FD | 	call	#pushregs_
28a9c     09 27 02 F6 | 	mov	local01, arg01
28aa0     0A 29 02 F6 | 	mov	local02, arg02
28aa4     0B 2B 02 F6 | 	mov	local03, arg03
28aa8     14 19 E2 F8 | 	getbyte	arg04, local02, #0
28aac     15 13 02 F6 | 	mov	arg01, local03
28ab0     09 2D 02 F6 | 	mov	local04, arg01
28ab4     97 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
28ab8                 | LR__3470
28ab8     16 FB C9 FA | 	rdbyte	result1, local04 wz
28abc     01 2C 06 51 |  if_ne	add	local04, #1
28ac0     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
28ac4                 | LR__3471
28ac4     09 2D 82 F1 | 	sub	local04, arg01
28ac8     00 18 0E F2 | 	cmp	arg04, #0 wz
28acc     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
28ad0     14 15 02 F6 | 	mov	arg02, local02
28ad4     16 17 02 F6 | 	mov	arg03, local04
28ad8     13 13 02 F6 | 	mov	arg01, local01
28adc     02 18 06 F6 | 	mov	arg04, #2
28ae0     C8 49 B0 FD | 	call	#__system___fmtpad
28ae4     FD 2E 02 F6 | 	mov	local05, result1
28ae8     00 2E 56 F2 | 	cmps	local05, #0 wc
28aec     17 FB 01 C6 |  if_b	mov	result1, local05
28af0     80 00 90 CD |  if_b	jmp	#LR__3474
28af4     01 2C 56 F2 | 	cmps	local04, #1 wc
28af8     50 00 90 CD |  if_b	jmp	#LR__3473
28afc     16 31 02 F6 | 	mov	local06, local04
28b00                 | LR__3472
28b00     13 33 02 F6 | 	mov	local07, local01
28b04     13 35 02 F6 | 	mov	local08, local01
28b08     13 32 46 F7 | 	zerox	local07, #19
28b0c     14 34 46 F0 | 	shr	local08, #20
28b10     02 34 66 F0 | 	shl	local08, #2
28b14     ED 34 02 F1 | 	add	local08, __methods__
28b18     1A 35 02 FB | 	rdlong	local08, local08
28b1c     15 13 C2 FA | 	rdbyte	arg01, local03
28b20     F2 36 02 F6 | 	mov	local09, objptr
28b24     19 E5 01 F6 | 	mov	objptr, local07
28b28     01 2A 06 F1 | 	add	local03, #1
28b2c     2D 34 62 FD | 	call	local08
28b30     1B E5 01 F6 | 	mov	objptr, local09
28b34     FD 36 02 F6 | 	mov	local09, result1
28b38     00 36 56 F2 | 	cmps	local09, #0 wc
28b3c     1B FB 01 C6 |  if_b	mov	result1, local09
28b40     30 00 90 CD |  if_b	jmp	#LR__3474
28b44     1B 2F 02 F1 | 	add	local05, local09
28b48     ED 31 6E FB | 	djnz	local06, #LR__3472
28b4c                 | LR__3473
28b4c     14 15 02 F6 | 	mov	arg02, local02
28b50     16 17 02 F6 | 	mov	arg03, local04
28b54     13 13 02 F6 | 	mov	arg01, local01
28b58     01 18 06 F6 | 	mov	arg04, #1
28b5c     4C 49 B0 FD | 	call	#__system___fmtpad
28b60     FD 36 02 F6 | 	mov	local09, result1
28b64     00 36 56 F2 | 	cmps	local09, #0 wc
28b68     1B FB 01 C6 |  if_b	mov	result1, local09
28b6c     1B 2F 02 31 |  if_ae	add	local05, local09
28b70     17 FB 01 36 |  if_ae	mov	result1, local05
28b74                 | LR__3474
28b74     A7 F0 03 F6 | 	mov	ptra, fp
28b78     B2 00 A0 FD | 	call	#popregs_
28b7c                 | __system___fmtstr_ret
28b7c     2D 00 64 FD | 	ret
28b80                 | 
28b80                 | __system___fmtnum
28b80     0B 4A 05 F6 | 	mov	COUNT_, #11
28b84     A8 00 A0 FD | 	call	#pushregs_
28b88     09 27 02 F6 | 	mov	local01, arg01
28b8c     0A 29 02 F6 | 	mov	local02, arg02
28b90     0B 2B 02 F6 | 	mov	local03, arg03
28b94     0C 2D 02 F6 | 	mov	local04, arg04
28b98     F8 2F 02 F6 | 	mov	local05, ptra
28b9c     17 31 02 F6 | 	mov	local06, local05
28ba0     00 32 06 F6 | 	mov	local07, #0
28ba4     14 35 02 F6 | 	mov	local08, local02
28ba8     10 34 46 F0 | 	shr	local08, #16
28bac     3F 34 06 F5 | 	and	local08, #63
28bb0     14 37 E2 F8 | 	getbyte	local09, local02, #0
28bb4     14 39 02 F6 | 	mov	local10, local02
28bb8     1A 38 46 F0 | 	shr	local10, #26
28bbc     03 38 06 F5 | 	and	local10, #3
28bc0     1C 3B 02 F6 | 	mov	local11, local10
28bc4     01 34 56 F2 | 	cmps	local08, #1 wc
28bc8     44 F0 07 F1 | 	add	ptra, #68
28bcc     01 34 86 31 |  if_ae	sub	local08, #1
28bd0     41 36 56 F2 | 	cmps	local09, #65 wc
28bd4     00 36 0E C2 |  if_b	cmp	local09, #0 wz
28bd8     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
28bdc     03 3A 0E F2 | 	cmp	local11, #3 wz
28be0     00 3A 06 A6 |  if_e	mov	local11, #0
28be4     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
28be8     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
28bec     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
28bf0     00 3A 0E F2 | 	cmp	local11, #0 wz
28bf4     4C 00 90 AD |  if_e	jmp	#LR__3483
28bf8     01 32 06 F6 | 	mov	local07, #1
28bfc     1B 35 0A F2 | 	cmp	local08, local09 wz
28c00     18 00 90 5D |  if_ne	jmp	#LR__3481
28c04     05 34 6E FB | 	djnz	local08, #LR__3480
28c08     13 13 02 F6 | 	mov	arg01, local01
28c0c     14 15 02 F6 | 	mov	arg02, local02
28c10     23 16 06 F6 | 	mov	arg03, #35
28c14     24 FE BF FD | 	call	#__system___fmtchar
28c18     88 00 90 FD | 	jmp	#LR__3487
28c1c                 | LR__3480
28c1c                 | LR__3481
28c1c     02 3A 0E F2 | 	cmp	local11, #2 wz
28c20     18 39 02 A6 |  if_e	mov	local10, local06
28c24     01 30 06 A1 |  if_e	add	local06, #1
28c28     1C 41 48 AC |  if_e	wrbyte	#32, local10
28c2c     14 00 90 AD |  if_e	jmp	#LR__3482
28c30     04 3A 0E F2 | 	cmp	local11, #4 wz
28c34     18 5B 48 AC |  if_e	wrbyte	#45, local06
28c38     01 30 06 A1 |  if_e	add	local06, #1
28c3c     18 57 48 5C |  if_ne	wrbyte	#43, local06
28c40     01 30 06 51 |  if_ne	add	local06, #1
28c44                 | LR__3482
28c44                 | LR__3483
28c44     18 13 02 F6 | 	mov	arg01, local06
28c48     15 15 02 F6 | 	mov	arg02, local03
28c4c     16 17 02 F6 | 	mov	arg03, local04
28c50     1A 19 02 F6 | 	mov	arg04, local08
28c54     00 1A 06 F6 | 	mov	arg05, #0
28c58     1D 28 2E F4 | 	testbn	local02, #29 wz
28c5c     01 1A 06 56 |  if_ne	mov	arg05, #1
28c60     10 49 B0 FD | 	call	#__system___uitoa
28c64     FD 32 02 F1 | 	add	local07, result1
28c68     1B 33 5A F2 | 	cmps	local07, local09 wcz
28c6c     24 00 90 ED |  if_be	jmp	#LR__3486
28c70     97 0E 48 FB | 	callpa	#(@LR__3485-@LR__3484)>>2,fcache_load_ptr_
28c74                 | LR__3484
28c74     1B 39 02 F6 | 	mov	local10, local09
28c78     01 38 56 F2 | 	cmps	local10, #1 wc
28c7c     01 36 86 F1 | 	sub	local09, #1
28c80     18 39 02 36 |  if_ae	mov	local10, local06
28c84     01 30 06 31 |  if_ae	add	local06, #1
28c88     1C 47 48 3C |  if_ae	wrbyte	#35, local10
28c8c     E4 FF 9F 3D |  if_ae	jmp	#LR__3484
28c90                 | LR__3485
28c90     18 01 48 FC | 	wrbyte	#0, local06
28c94                 | LR__3486
28c94     13 13 02 F6 | 	mov	arg01, local01
28c98     14 15 02 F6 | 	mov	arg02, local02
28c9c     17 17 02 F6 | 	mov	arg03, local05
28ca0     F0 FD BF FD | 	call	#__system___fmtstr
28ca4                 | LR__3487
28ca4     A7 F0 03 F6 | 	mov	ptra, fp
28ca8     B2 00 A0 FD | 	call	#popregs_
28cac                 | __system___fmtnum_ret
28cac     2D 00 64 FD | 	ret
28cb0                 | 
28cb0                 | __system___fmtfloat
28cb0     10 4A 05 F6 | 	mov	COUNT_, #16
28cb4     A8 00 A0 FD | 	call	#pushregs_
28cb8     24 F1 07 F1 | 	add	ptra, #292
28cbc     04 4E 05 F1 | 	add	fp, #4
28cc0     A7 12 62 FC | 	wrlong	arg01, fp
28cc4     04 4E 05 F1 | 	add	fp, #4
28cc8     A7 14 62 FC | 	wrlong	arg02, fp
28ccc     04 4E 05 F1 | 	add	fp, #4
28cd0     A7 16 62 FC | 	wrlong	arg03, fp
28cd4     04 4E 05 F1 | 	add	fp, #4
28cd8     A7 18 62 FC | 	wrlong	arg04, fp
28cdc     0C 4E 05 F1 | 	add	fp, #12
28ce0     A7 14 68 FC | 	wrlong	#10, fp
28ce4     08 4E 05 F1 | 	add	fp, #8
28ce8     A7 00 68 FC | 	wrlong	#0, fp
28cec     08 4E 05 F1 | 	add	fp, #8
28cf0     A7 00 68 FC | 	wrlong	#0, fp
28cf4     08 4E 05 F1 | 	add	fp, #8
28cf8     A7 00 68 FC | 	wrlong	#0, fp
28cfc     04 4E 05 F1 | 	add	fp, #4
28d00     A7 04 68 FC | 	wrlong	#2, fp
28d04     04 4E 05 F1 | 	add	fp, #4
28d08     A7 00 68 FC | 	wrlong	#0, fp
28d0c     04 4E 05 F1 | 	add	fp, #4
28d10     A7 00 68 FC | 	wrlong	#0, fp
28d14     04 4E 05 F1 | 	add	fp, #4
28d18     A7 00 68 FC | 	wrlong	#0, fp
28d1c     04 4E 05 F1 | 	add	fp, #4
28d20     A7 00 68 FC | 	wrlong	#0, fp
28d24     18 4E 05 F1 | 	add	fp, #24
28d28     A7 00 68 FC | 	wrlong	#0, fp
28d2c     68 4E 05 F1 | 	add	fp, #104
28d30     A7 26 02 F6 | 	mov	local01, fp
28d34     08 4E 85 F1 | 	sub	fp, #8
28d38     A7 26 62 FC | 	wrlong	local01, fp
28d3c     04 4E 05 F1 | 	add	fp, #4
28d40     A7 26 62 FC | 	wrlong	local01, fp
28d44     BC 4E 85 F1 | 	sub	fp, #188
28d48     A7 26 02 FB | 	rdlong	local01, fp
28d4c     10 26 46 F0 | 	shr	local01, #16
28d50     3F 26 06 F5 | 	and	local01, #63
28d54     B0 4E 05 F1 | 	add	fp, #176
28d58     A7 26 62 FC | 	wrlong	local01, fp
28d5c     B0 4E 85 F1 | 	sub	fp, #176
28d60     A7 26 02 FB | 	rdlong	local01, fp
28d64     1C 26 46 F0 | 	shr	local01, #28
28d68     01 26 06 F5 | 	and	local01, #1
28d6c     08 4F 05 F1 | 	add	fp, #264
28d70     A7 26 62 FC | 	wrlong	local01, fp
28d74     58 4E 85 F1 | 	sub	fp, #88
28d78     A7 26 0A FB | 	rdlong	local01, fp wz
28d7c     B8 4E 85 F1 | 	sub	fp, #184
28d80     3C 00 90 5D |  if_ne	jmp	#LR__3491
28d84     10 4E 05 F1 | 	add	fp, #16
28d88     A7 26 02 FB | 	rdlong	local01, fp
28d8c     10 4E 85 F1 | 	sub	fp, #16
28d90     61 26 0E F2 | 	cmp	local01, #97 wz
28d94     18 00 90 5D |  if_ne	jmp	#LR__3490
28d98     B8 4E 05 F1 | 	add	fp, #184
28d9c     A7 1A 68 FC | 	wrlong	#13, fp
28da0     84 4E 85 F1 | 	sub	fp, #132
28da4     A7 02 68 FC | 	wrlong	#1, fp
28da8     34 4E 85 F1 | 	sub	fp, #52
28dac     24 00 90 FD | 	jmp	#LR__3492
28db0                 | LR__3490
28db0     B8 4E 05 F1 | 	add	fp, #184
28db4     A7 0C 68 FC | 	wrlong	#6, fp
28db8     B8 4E 85 F1 | 	sub	fp, #184
28dbc     14 00 90 FD | 	jmp	#LR__3492
28dc0                 | LR__3491
28dc0     B8 4E 05 F1 | 	add	fp, #184
28dc4     A7 26 02 FB | 	rdlong	local01, fp
28dc8     01 26 86 F1 | 	sub	local01, #1
28dcc     A7 26 62 FC | 	wrlong	local01, fp
28dd0     B8 4E 85 F1 | 	sub	fp, #184
28dd4                 | LR__3492
28dd4     08 4E 05 F1 | 	add	fp, #8
28dd8     A7 26 02 FB | 	rdlong	local01, fp
28ddc     16 26 46 F0 | 	shr	local01, #22
28de0     03 26 06 F5 | 	and	local01, #3
28de4     04 4F 05 F1 | 	add	fp, #260
28de8     A7 26 62 FC | 	wrlong	local01, fp
28dec     04 4F 85 F1 | 	sub	fp, #260
28df0     A7 26 02 FB | 	rdlong	local01, fp
28df4     1D 26 46 F0 | 	shr	local01, #29
28df8     01 26 06 F5 | 	and	local01, #1
28dfc     B4 4E 05 F1 | 	add	fp, #180
28e00     A7 26 62 FC | 	wrlong	local01, fp
28e04     B4 4E 85 F1 | 	sub	fp, #180
28e08     A7 26 02 FB | 	rdlong	local01, fp
28e0c     13 27 EA F8 | 	getbyte	local01, local01, #1
28e10     60 4E 05 F1 | 	add	fp, #96
28e14     A7 26 62 FC | 	wrlong	local01, fp
28e18     60 4E 85 F1 | 	sub	fp, #96
28e1c     A7 26 02 FB | 	rdlong	local01, fp
28e20     13 27 E2 F8 | 	getbyte	local01, local01, #0
28e24     64 4E 05 F1 | 	add	fp, #100
28e28     A7 26 62 FC | 	wrlong	local01, fp
28e2c     00 26 06 F6 | 	mov	local01, #0
28e30     5C 4E 85 F1 | 	sub	fp, #92
28e34     A7 1A 02 FB | 	rdlong	arg05, fp
28e38     65 1A 0E F2 | 	cmp	arg05, #101 wz
28e3c     01 26 06 A6 |  if_e	mov	local01, #1
28e40     14 4E 05 F1 | 	add	fp, #20
28e44     A7 26 62 FC | 	wrlong	local01, fp
28e48     98 4E 05 F1 | 	add	fp, #152
28e4c     A7 28 0A FB | 	rdlong	local02, fp wz
28e50     45 26 06 56 |  if_ne	mov	local01, #69
28e54     65 26 06 A6 |  if_e	mov	local01, #101
28e58     8C 4E 85 F1 | 	sub	fp, #140
28e5c     A7 26 62 FC | 	wrlong	local01, fp
28e60     20 4E 85 F1 | 	sub	fp, #32
28e64     A7 26 02 FB | 	rdlong	local01, fp
28e68     10 4E 85 F1 | 	sub	fp, #16
28e6c     61 26 0E F2 | 	cmp	local01, #97 wz
28e70     4C 00 90 5D |  if_ne	jmp	#LR__3493
28e74     24 4E 05 F1 | 	add	fp, #36
28e78     A7 02 68 FC | 	wrlong	#1, fp
28e7c     98 4E 05 F1 | 	add	fp, #152
28e80     A7 28 0A FB | 	rdlong	local02, fp wz
28e84     50 26 06 56 |  if_ne	mov	local01, #80
28e88     70 26 06 A6 |  if_e	mov	local01, #112
28e8c     8C 4E 85 F1 | 	sub	fp, #140
28e90     A7 26 62 FC | 	wrlong	local01, fp
28e94     14 4E 85 F1 | 	sub	fp, #20
28e98     A7 04 68 FC | 	wrlong	#2, fp
28e9c     1C 4E 05 F1 | 	add	fp, #28
28ea0     A7 02 68 FC | 	wrlong	#1, fp
28ea4     84 4E 05 F1 | 	add	fp, #132
28ea8     A7 28 0A FB | 	rdlong	local02, fp wz
28eac     58 26 06 56 |  if_ne	mov	local01, #88
28eb0     78 26 06 A6 |  if_e	mov	local01, #120
28eb4     7C 4E 85 F1 | 	sub	fp, #124
28eb8     A7 26 62 FC | 	wrlong	local01, fp
28ebc     40 4E 85 F1 | 	sub	fp, #64
28ec0                 | LR__3493
28ec0     10 4E 05 F1 | 	add	fp, #16
28ec4     A7 26 02 FB | 	rdlong	local01, fp
28ec8     10 4E 85 F1 | 	sub	fp, #16
28ecc     23 26 0E F2 | 	cmp	local01, #35 wz
28ed0     3C 00 90 5D |  if_ne	jmp	#LR__3496
28ed4     48 4E 05 F1 | 	add	fp, #72
28ed8     A7 02 68 FC | 	wrlong	#1, fp
28edc     C8 4E 05 F1 | 	add	fp, #200
28ee0     A7 26 0A FB | 	rdlong	local01, fp wz
28ee4     10 4F 85 F1 | 	sub	fp, #272
28ee8     18 00 90 AD |  if_e	jmp	#LR__3494
28eec     10 4E 05 F1 | 	add	fp, #16
28ef0     A7 CC 68 FC | 	wrlong	#102, fp
28ef4     00 4F 05 F1 | 	add	fp, #256
28ef8     A7 00 68 FC | 	wrlong	#0, fp
28efc     10 4F 85 F1 | 	sub	fp, #272
28f00     0C 00 90 FD | 	jmp	#LR__3495
28f04                 | LR__3494
28f04     10 4F 05 F1 | 	add	fp, #272
28f08     A7 02 68 FC | 	wrlong	#1, fp
28f0c     10 4F 85 F1 | 	sub	fp, #272
28f10                 | LR__3495
28f10                 | LR__3496
28f10     08 4E 05 F1 | 	add	fp, #8
28f14     A7 26 02 FB | 	rdlong	local01, fp
28f18     1A 26 46 F0 | 	shr	local01, #26
28f1c     03 26 06 F5 | 	and	local01, #3
28f20     5C 4E 05 F1 | 	add	fp, #92
28f24     A7 26 62 FC | 	wrlong	local01, fp
28f28     58 4E 85 F1 | 	sub	fp, #88
28f2c     A7 FA 01 FB | 	rdlong	result1, fp
28f30     0C 4E 85 F1 | 	sub	fp, #12
28f34     1F FA 4D F0 | 	shr	result1, #31 wz
28f38     20 00 90 AD |  if_e	jmp	#LR__3497
28f3c     2C 4E 05 F1 | 	add	fp, #44
28f40     A7 5A 68 FC | 	wrlong	#45, fp
28f44     20 4E 85 F1 | 	sub	fp, #32
28f48     A7 FA 01 FB | 	rdlong	result1, fp
28f4c     1F FA E5 F4 | 	bitnot	result1, #31
28f50     A7 FA 61 FC | 	wrlong	result1, fp
28f54     0C 4E 85 F1 | 	sub	fp, #12
28f58     3C 00 90 FD | 	jmp	#LR__3499
28f5c                 | LR__3497
28f5c     64 4E 05 F1 | 	add	fp, #100
28f60     A7 26 02 FB | 	rdlong	local01, fp
28f64     64 4E 85 F1 | 	sub	fp, #100
28f68     01 26 0E F2 | 	cmp	local01, #1 wz
28f6c     2C 4E 05 A1 |  if_e	add	fp, #44
28f70     A7 56 68 AC |  if_e	wrlong	#43, fp
28f74     2C 4E 85 A1 |  if_e	sub	fp, #44
28f78     1C 00 90 AD |  if_e	jmp	#LR__3498
28f7c     64 4E 05 F1 | 	add	fp, #100
28f80     A7 26 02 FB | 	rdlong	local01, fp
28f84     64 4E 85 F1 | 	sub	fp, #100
28f88     02 26 0E F2 | 	cmp	local01, #2 wz
28f8c     2C 4E 05 A1 |  if_e	add	fp, #44
28f90     A7 40 68 AC |  if_e	wrlong	#32, fp
28f94     2C 4E 85 A1 |  if_e	sub	fp, #44
28f98                 | LR__3498
28f98                 | LR__3499
28f98     08 4E 05 F1 | 	add	fp, #8
28f9c     A7 26 02 FB | 	rdlong	local01, fp
28fa0     18 26 46 F0 | 	shr	local01, #24
28fa4     03 26 06 F5 | 	and	local01, #3
28fa8     3C 4E 05 F1 | 	add	fp, #60
28fac     A7 26 62 FC | 	wrlong	local01, fp
28fb0     00 26 06 F6 | 	mov	local01, #0
28fb4     18 4E 85 F1 | 	sub	fp, #24
28fb8     A7 2A 0A FB | 	rdlong	local03, fp wz
28fbc     2C 4E 85 F1 | 	sub	fp, #44
28fc0     18 00 90 5D |  if_ne	jmp	#LR__3500
28fc4     1C 4E 05 F1 | 	add	fp, #28
28fc8     A7 2C 02 FB | 	rdlong	local04, fp
28fcc     1C 4E 85 F1 | 	sub	fp, #28
28fd0     16 2F 02 F6 | 	mov	local05, local04
28fd4     0A 2E 0E F2 | 	cmp	local05, #10 wz
28fd8     04 00 90 AD |  if_e	jmp	#LR__3501
28fdc                 | LR__3500
28fdc     01 26 66 F5 | 	xor	local01, #1
28fe0                 | LR__3501
28fe0     3C 4E 05 F1 | 	add	fp, #60
28fe4     A7 26 62 FC | 	wrlong	local01, fp
28fe8     3C 4E 85 F1 | 	sub	fp, #60
28fec     00 26 0E F2 | 	cmp	local01, #0 wz
28ff0     0C 01 90 AD |  if_e	jmp	#LR__3503
28ff4     44 4E 05 F1 | 	add	fp, #68
28ff8     A7 2E 02 FB | 	rdlong	local05, fp
28ffc     44 4E 85 F1 | 	sub	fp, #68
29000     17 2B 02 F6 | 	mov	local03, local05
29004     02 2A 0E F2 | 	cmp	local03, #2 wz
29008     F4 00 90 5D |  if_ne	jmp	#LR__3503
2900c     0C 4F 05 F1 | 	add	fp, #268
29010     A7 30 02 FB | 	rdlong	local06, fp
29014     0C 4F 85 F1 | 	sub	fp, #268
29018     18 2D 02 F6 | 	mov	local04, local06
2901c     02 2C 0E F2 | 	cmp	local04, #2 wz
29020     DC 00 90 AD |  if_e	jmp	#LR__3503
29024     C0 4E 05 F1 | 	add	fp, #192
29028     A7 12 02 FB | 	rdlong	arg01, fp
2902c     94 4E 85 F1 | 	sub	fp, #148
29030     A7 14 02 FB | 	rdlong	arg02, fp
29034     14 4E 05 F1 | 	add	fp, #20
29038     A7 16 02 FB | 	rdlong	arg03, fp
2903c     40 4E 85 F1 | 	sub	fp, #64
29040     98 47 B0 FD | 	call	#__system__emitsign_0582
29044     14 4F 05 F1 | 	add	fp, #276
29048     A7 FA 61 FC | 	wrlong	result1, fp
2904c     14 4F 85 F1 | 	sub	fp, #276
29050     00 FA 55 F2 | 	cmps	result1, #0 wc
29054     14 4F 05 C1 |  if_b	add	fp, #276
29058     A7 FA 01 CB |  if_b	rdlong	result1, fp
2905c     14 4F 85 C1 |  if_b	sub	fp, #276
29060     6C 0B 90 CD |  if_b	jmp	#LR__3553
29064     C0 4E 05 F1 | 	add	fp, #192
29068     A7 26 02 FB | 	rdlong	local01, fp
2906c     54 4E 05 F1 | 	add	fp, #84
29070     A7 2E 02 FB | 	rdlong	local05, fp
29074     17 2B 02 F6 | 	mov	local03, local05
29078     17 27 02 F1 | 	add	local01, local05
2907c     54 4E 85 F1 | 	sub	fp, #84
29080     A7 26 62 FC | 	wrlong	local01, fp
29084     58 4E 85 F1 | 	sub	fp, #88
29088     A7 26 0A FB | 	rdlong	local01, fp wz
2908c     68 4E 85 F1 | 	sub	fp, #104
29090     60 00 90 AD |  if_e	jmp	#LR__3502
29094     68 4E 05 F1 | 	add	fp, #104
29098     A7 26 02 FB | 	rdlong	local01, fp
2909c     AC 4E 05 F1 | 	add	fp, #172
290a0     A7 2A 02 FB | 	rdlong	local03, fp
290a4     15 27 82 F1 | 	sub	local01, local03
290a8     AC 4E 85 F1 | 	sub	fp, #172
290ac     A7 26 62 FC | 	wrlong	local01, fp
290b0     68 4E 85 F1 | 	sub	fp, #104
290b4     00 26 56 F2 | 	cmps	local01, #0 wc
290b8     68 4E 05 C1 |  if_b	add	fp, #104
290bc     A7 00 68 CC |  if_b	wrlong	#0, fp
290c0     68 4E 85 C1 |  if_b	sub	fp, #104
290c4     08 4E 05 F1 | 	add	fp, #8
290c8     A7 26 02 FB | 	rdlong	local01, fp
290cc     E8 26 06 F4 | 	bitl	local01, #232
290d0     A7 26 62 FC | 	wrlong	local01, fp
290d4     60 4E 05 F1 | 	add	fp, #96
290d8     A7 2E 02 FB | 	rdlong	local05, fp
290dc     17 2B 02 F6 | 	mov	local03, local05
290e0     08 2A 66 F0 | 	shl	local03, #8
290e4     15 27 42 F5 | 	or	local01, local03
290e8     60 4E 85 F1 | 	sub	fp, #96
290ec     A7 26 62 FC | 	wrlong	local01, fp
290f0     08 4E 85 F1 | 	sub	fp, #8
290f4                 | LR__3502
290f4     3C 4E 05 F1 | 	add	fp, #60
290f8     A7 00 68 FC | 	wrlong	#0, fp
290fc     3C 4E 85 F1 | 	sub	fp, #60
29100                 | LR__3503
29100     0C 4E 05 F1 | 	add	fp, #12
29104     A7 12 02 FB | 	rdlong	arg01, fp
29108     0C 4E 85 F1 | 	sub	fp, #12
2910c     F0 21 B0 FD | 	call	#__system____builtin_ilogb
29110     FF FF 3F FF 
29114     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
29118     50 00 90 5D |  if_ne	jmp	#LR__3505
2911c     2C 4E 05 F1 | 	add	fp, #44
29120     A7 26 0A FB | 	rdlong	local01, fp wz
29124     2C 4E 85 F1 | 	sub	fp, #44
29128     24 00 90 AD |  if_e	jmp	#LR__3504
2912c     C0 4E 05 F1 | 	add	fp, #192
29130     A7 28 02 FB | 	rdlong	local02, fp
29134     14 2B 02 F6 | 	mov	local03, local02
29138     01 2A 06 F1 | 	add	local03, #1
2913c     A7 2A 62 FC | 	wrlong	local03, fp
29140     94 4E 85 F1 | 	sub	fp, #148
29144     A7 2C 02 FB | 	rdlong	local04, fp
29148     2C 4E 85 F1 | 	sub	fp, #44
2914c     14 2D 42 FC | 	wrbyte	local04, local02
29150                 | LR__3504
29150     C0 4E 05 F1 | 	add	fp, #192
29154     A7 12 02 FB | 	rdlong	arg01, fp
29158     C0 4E 85 F1 | 	sub	fp, #192
2915c     BB 01 00 FF 
29160     7A 14 06 F6 | 	mov	arg02, ##@LR__5511
29164     A8 E9 BF FD | 	call	#__system____builtin_strcpy
29168     A4 08 90 FD | 	jmp	#LR__3541
2916c                 | LR__3505
2916c     0C 4E 05 F1 | 	add	fp, #12
29170     A7 28 02 FB | 	rdlong	local02, fp
29174     0C 4E 85 F1 | 	sub	fp, #12
29178     14 13 02 F6 | 	mov	arg01, local02
2917c     80 21 B0 FD | 	call	#__system____builtin_ilogb
29180     00 00 40 FF 
29184     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
29188     50 00 90 5D |  if_ne	jmp	#LR__3507
2918c     2C 4E 05 F1 | 	add	fp, #44
29190     A7 26 0A FB | 	rdlong	local01, fp wz
29194     2C 4E 85 F1 | 	sub	fp, #44
29198     24 00 90 AD |  if_e	jmp	#LR__3506
2919c     C0 4E 05 F1 | 	add	fp, #192
291a0     A7 28 02 FB | 	rdlong	local02, fp
291a4     14 2B 02 F6 | 	mov	local03, local02
291a8     01 2A 06 F1 | 	add	local03, #1
291ac     A7 2A 62 FC | 	wrlong	local03, fp
291b0     94 4E 85 F1 | 	sub	fp, #148
291b4     A7 2C 02 FB | 	rdlong	local04, fp
291b8     2C 4E 85 F1 | 	sub	fp, #44
291bc     14 2D 42 FC | 	wrbyte	local04, local02
291c0                 | LR__3506
291c0     C0 4E 05 F1 | 	add	fp, #192
291c4     A7 12 02 FB | 	rdlong	arg01, fp
291c8     C0 4E 85 F1 | 	sub	fp, #192
291cc     BB 01 00 FF 
291d0     7E 14 06 F6 | 	mov	arg02, ##@LR__5512
291d4     38 E9 BF FD | 	call	#__system____builtin_strcpy
291d8     34 08 90 FD | 	jmp	#LR__3541
291dc                 | LR__3507
291dc     10 4E 05 F1 | 	add	fp, #16
291e0     A7 26 02 FB | 	rdlong	local01, fp
291e4     10 4E 85 F1 | 	sub	fp, #16
291e8     67 26 0E F2 | 	cmp	local01, #103 wz
291ec     10 4E 05 51 |  if_ne	add	fp, #16
291f0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
291f4     10 4E 85 51 |  if_ne	sub	fp, #16
291f8     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
291fc     94 01 90 5D |  if_ne	jmp	#LR__3512
29200     0C 4E 05 F1 | 	add	fp, #12
29204     A7 12 02 FB | 	rdlong	arg01, fp
29208     08 4E 05 F1 | 	add	fp, #8
2920c     A7 14 02 F6 | 	mov	arg02, fp
29210     0C 4E 05 F1 | 	add	fp, #12
29214     A7 16 02 F6 | 	mov	arg03, fp
29218     98 4E 05 F1 | 	add	fp, #152
2921c     A7 18 02 FB | 	rdlong	arg04, fp
29220     9C 4E 85 F1 | 	sub	fp, #156
29224     A7 1A 02 FB | 	rdlong	arg05, fp
29228     1C 4E 85 F1 | 	sub	fp, #28
2922c     B8 43 B0 FD | 	call	#__system__disassemble_0580
29230     10 4E 05 F1 | 	add	fp, #16
29234     A7 26 02 FB | 	rdlong	local01, fp
29238     10 4E 85 F1 | 	sub	fp, #16
2923c     23 26 0E F2 | 	cmp	local01, #35 wz
29240     A0 00 90 5D |  if_ne	jmp	#LR__3509
29244     20 4E 05 F1 | 	add	fp, #32
29248     A7 26 02 FB | 	rdlong	local01, fp
2924c     98 4E 05 F1 | 	add	fp, #152
29250     A7 2A 02 FB | 	rdlong	local03, fp
29254     B8 4E 85 F1 | 	sub	fp, #184
29258     15 27 5A F2 | 	cmps	local01, local03 wcz
2925c     24 4E 05 11 |  if_a	add	fp, #36
29260     A7 02 68 1C |  if_a	wrlong	#1, fp
29264     24 4E 85 11 |  if_a	sub	fp, #36
29268     A4 01 90 1D |  if_a	jmp	#LR__3515
2926c     20 4E 05 F1 | 	add	fp, #32
29270     A7 26 02 FB | 	rdlong	local01, fp
29274     20 4E 85 F1 | 	sub	fp, #32
29278     00 26 56 F2 | 	cmps	local01, #0 wc
2927c     2C 00 90 3D |  if_ae	jmp	#LR__3508
29280     B8 4E 05 F1 | 	add	fp, #184
29284     A7 26 02 FB | 	rdlong	local01, fp
29288     13 27 62 F6 | 	neg	local01, local01
2928c     98 4E 85 F1 | 	sub	fp, #152
29290     A7 2A 02 FB | 	rdlong	local03, fp
29294     20 4E 85 F1 | 	sub	fp, #32
29298     13 2B 5A F2 | 	cmps	local03, local01 wcz
2929c     24 4E 05 E1 |  if_be	add	fp, #36
292a0     A7 02 68 EC |  if_be	wrlong	#1, fp
292a4     24 4E 85 E1 |  if_be	sub	fp, #36
292a8     64 01 90 FD | 	jmp	#LR__3515
292ac                 | LR__3508
292ac     20 4E 05 F1 | 	add	fp, #32
292b0     A7 26 02 FB | 	rdlong	local01, fp
292b4     20 4E 85 F1 | 	sub	fp, #32
292b8     01 26 56 F2 | 	cmps	local01, #1 wc
292bc     50 01 90 CD |  if_b	jmp	#LR__3515
292c0     B8 4E 05 F1 | 	add	fp, #184
292c4     A7 26 02 FB | 	rdlong	local01, fp
292c8     98 4E 85 F1 | 	sub	fp, #152
292cc     A7 2A 02 FB | 	rdlong	local03, fp
292d0     15 27 82 F1 | 	sub	local01, local03
292d4     98 4E 05 F1 | 	add	fp, #152
292d8     A7 26 62 FC | 	wrlong	local01, fp
292dc     B8 4E 85 F1 | 	sub	fp, #184
292e0     2C 01 90 FD | 	jmp	#LR__3515
292e4                 | LR__3509
292e4     00 26 06 F6 | 	mov	local01, #0
292e8     08 4E 05 F1 | 	add	fp, #8
292ec     A7 28 02 FB | 	rdlong	local02, fp
292f0     1C 28 46 F0 | 	shr	local02, #28
292f4     01 28 0E F5 | 	and	local02, #1 wz
292f8     01 26 06 A6 |  if_e	mov	local01, #1
292fc     2C 4E 05 F1 | 	add	fp, #44
29300     A7 26 62 FC | 	wrlong	local01, fp
29304     14 4E 85 F1 | 	sub	fp, #20
29308     A7 26 02 FB | 	rdlong	local01, fp
2930c     98 4E 05 F1 | 	add	fp, #152
29310     A7 2A 02 FB | 	rdlong	local03, fp
29314     B8 4E 85 F1 | 	sub	fp, #184
29318     15 27 52 F2 | 	cmps	local01, local03 wc
2931c     18 00 90 3D |  if_ae	jmp	#LR__3510
29320     20 4E 05 F1 | 	add	fp, #32
29324     A7 2C 02 FB | 	rdlong	local04, fp
29328     20 4E 85 F1 | 	sub	fp, #32
2932c     FF FF 7F FF 
29330     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
29334     10 00 90 3D |  if_ae	jmp	#LR__3511
29338                 | LR__3510
29338     24 4E 05 F1 | 	add	fp, #36
2933c     A7 02 68 FC | 	wrlong	#1, fp
29340     24 4E 85 F1 | 	sub	fp, #36
29344     C8 00 90 FD | 	jmp	#LR__3515
29348                 | LR__3511
29348     B8 4E 05 F1 | 	add	fp, #184
2934c     A7 2C 02 FB | 	rdlong	local04, fp
29350     98 4E 85 F1 | 	sub	fp, #152
29354     A7 2A 02 FB | 	rdlong	local03, fp
29358     15 2D 82 F1 | 	sub	local04, local03
2935c     98 4E 05 F1 | 	add	fp, #152
29360     A7 2C 62 FC | 	wrlong	local04, fp
29364     AC 4E 85 F1 | 	sub	fp, #172
29368     A7 12 02 FB | 	rdlong	arg01, fp
2936c     08 4E 05 F1 | 	add	fp, #8
29370     A7 14 02 F6 | 	mov	arg02, fp
29374     0C 4E 05 F1 | 	add	fp, #12
29378     A7 16 02 F6 | 	mov	arg03, fp
2937c     16 19 62 F6 | 	neg	arg04, local04
29380     04 4E 85 F1 | 	sub	fp, #4
29384     A7 1A 02 FB | 	rdlong	arg05, fp
29388     1C 4E 85 F1 | 	sub	fp, #28
2938c     58 42 B0 FD | 	call	#__system__disassemble_0580
29390     7C 00 90 FD | 	jmp	#LR__3515
29394                 | LR__3512
29394     24 4E 05 F1 | 	add	fp, #36
29398     A7 26 0A FB | 	rdlong	local01, fp wz
2939c     24 4E 85 F1 | 	sub	fp, #36
293a0     34 00 90 AD |  if_e	jmp	#LR__3513
293a4     0C 4E 05 F1 | 	add	fp, #12
293a8     A7 12 02 FB | 	rdlong	arg01, fp
293ac     08 4E 05 F1 | 	add	fp, #8
293b0     A7 14 02 F6 | 	mov	arg02, fp
293b4     0C 4E 05 F1 | 	add	fp, #12
293b8     A7 16 02 F6 | 	mov	arg03, fp
293bc     98 4E 05 F1 | 	add	fp, #152
293c0     A7 18 02 FB | 	rdlong	arg04, fp
293c4     9C 4E 85 F1 | 	sub	fp, #156
293c8     A7 1A 02 FB | 	rdlong	arg05, fp
293cc     1C 4E 85 F1 | 	sub	fp, #28
293d0     14 42 B0 FD | 	call	#__system__disassemble_0580
293d4     38 00 90 FD | 	jmp	#LR__3514
293d8                 | LR__3513
293d8     0C 4E 05 F1 | 	add	fp, #12
293dc     A7 12 02 FB | 	rdlong	arg01, fp
293e0     08 4E 05 F1 | 	add	fp, #8
293e4     A7 14 02 F6 | 	mov	arg02, fp
293e8     0C 4E 05 F1 | 	add	fp, #12
293ec     A7 16 02 F6 | 	mov	arg03, fp
293f0     98 4E 05 F1 | 	add	fp, #152
293f4     A7 2C 02 FB | 	rdlong	local04, fp
293f8     01 2C 06 F1 | 	add	local04, #1
293fc     16 19 62 F6 | 	neg	arg04, local04
29400     9C 4E 85 F1 | 	sub	fp, #156
29404     A7 1A 02 FB | 	rdlong	arg05, fp
29408     1C 4E 85 F1 | 	sub	fp, #28
2940c     D8 41 B0 FD | 	call	#__system__disassemble_0580
29410                 | LR__3514
29410                 | LR__3515
29410     1C 4E 05 F1 | 	add	fp, #28
29414     A7 26 02 FB | 	rdlong	local01, fp
29418     1C 4E 85 F1 | 	sub	fp, #28
2941c     02 26 0E F2 | 	cmp	local01, #2 wz
29420     4C 00 90 5D |  if_ne	jmp	#LR__3518
29424     1C 4E 05 F1 | 	add	fp, #28
29428     A7 20 68 FC | 	wrlong	#16, fp
2942c     1C 4E 85 F1 | 	sub	fp, #28
29430                 | LR__3516
29430     14 4E 05 F1 | 	add	fp, #20
29434     A7 26 0A FB | 	rdlong	local01, fp wz
29438     14 4E 85 F1 | 	sub	fp, #20
2943c     30 00 90 AD |  if_e	jmp	#LR__3517
29440     14 4E 05 F1 | 	add	fp, #20
29444     A7 2A 02 FB | 	rdlong	local03, fp
29448     14 4E 85 F1 | 	sub	fp, #20
2944c     00 80 00 FF 
29450     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
29454     18 00 90 3D |  if_ae	jmp	#LR__3517
29458     14 4E 05 F1 | 	add	fp, #20
2945c     A7 26 02 FB | 	rdlong	local01, fp
29460     01 26 66 F0 | 	shl	local01, #1
29464     A7 26 62 FC | 	wrlong	local01, fp
29468     14 4E 85 F1 | 	sub	fp, #20
2946c     C0 FF 9F FD | 	jmp	#LR__3516
29470                 | LR__3517
29470                 | LR__3518
29470     70 4E 05 F1 | 	add	fp, #112
29474     A7 12 02 F6 | 	mov	arg01, fp
29478     5C 4E 85 F1 | 	sub	fp, #92
2947c     A7 14 02 FB | 	rdlong	arg02, fp
29480     08 4E 05 F1 | 	add	fp, #8
29484     A7 16 02 FB | 	rdlong	arg03, fp
29488     A0 4E 05 F1 | 	add	fp, #160
2948c     A7 1A 02 FB | 	rdlong	arg05, fp
29490     BC 4E 85 F1 | 	sub	fp, #188
29494     01 18 06 F6 | 	mov	arg04, #1
29498     D8 40 B0 FD | 	call	#__system___uitoa
2949c     58 4E 05 F1 | 	add	fp, #88
294a0     A7 FA 61 FC | 	wrlong	result1, fp
294a4     38 4E 85 F1 | 	sub	fp, #56
294a8     A7 26 02 FB | 	rdlong	local01, fp
294ac     20 4E 85 F1 | 	sub	fp, #32
294b0     00 26 56 F2 | 	cmps	local01, #0 wc
294b4     50 00 90 3D |  if_ae	jmp	#LR__3519
294b8     60 4E 05 F1 | 	add	fp, #96
294bc     A7 5A 68 FC | 	wrlong	#45, fp
294c0     50 4E 05 F1 | 	add	fp, #80
294c4     A7 12 02 F6 | 	mov	arg01, fp
294c8     90 4E 85 F1 | 	sub	fp, #144
294cc     A7 2A 02 FB | 	rdlong	local03, fp
294d0     15 15 62 F6 | 	neg	arg02, local03
294d4     18 4E 05 F1 | 	add	fp, #24
294d8     A7 18 02 FB | 	rdlong	arg04, fp
294dc     84 4E 05 F1 | 	add	fp, #132
294e0     A7 30 02 FB | 	rdlong	local06, fp
294e4     BC 4E 85 F1 | 	sub	fp, #188
294e8     18 2D 02 F6 | 	mov	local04, local06
294ec     0A 16 06 F6 | 	mov	arg03, #10
294f0     16 1B 02 F6 | 	mov	arg05, local04
294f4     7C 40 B0 FD | 	call	#__system___uitoa
294f8     5C 4E 05 F1 | 	add	fp, #92
294fc     A7 FA 61 FC | 	wrlong	result1, fp
29500     5C 4E 85 F1 | 	sub	fp, #92
29504     48 00 90 FD | 	jmp	#LR__3520
29508                 | LR__3519
29508     60 4E 05 F1 | 	add	fp, #96
2950c     A7 56 68 FC | 	wrlong	#43, fp
29510     50 4E 05 F1 | 	add	fp, #80
29514     A7 12 02 F6 | 	mov	arg01, fp
29518     90 4E 85 F1 | 	sub	fp, #144
2951c     A7 14 02 FB | 	rdlong	arg02, fp
29520     18 4E 05 F1 | 	add	fp, #24
29524     A7 18 02 FB | 	rdlong	arg04, fp
29528     84 4E 05 F1 | 	add	fp, #132
2952c     A7 30 02 FB | 	rdlong	local06, fp
29530     BC 4E 85 F1 | 	sub	fp, #188
29534     18 2D 02 F6 | 	mov	local04, local06
29538     0A 16 06 F6 | 	mov	arg03, #10
2953c     16 1B 02 F6 | 	mov	arg05, local04
29540     30 40 B0 FD | 	call	#__system___uitoa
29544     5C 4E 05 F1 | 	add	fp, #92
29548     A7 FA 61 FC | 	wrlong	result1, fp
2954c     5C 4E 85 F1 | 	sub	fp, #92
29550                 | LR__3520
29550     24 4E 05 F1 | 	add	fp, #36
29554     A7 26 0A FB | 	rdlong	local01, fp wz
29558     24 4E 85 F1 | 	sub	fp, #36
2955c     2C 00 90 AD |  if_e	jmp	#LR__3521
29560     50 4E 05 F1 | 	add	fp, #80
29564     A7 00 68 FC | 	wrlong	#0, fp
29568     04 4E 85 F1 | 	sub	fp, #4
2956c     A7 00 68 FC | 	wrlong	#0, fp
29570     6C 4E 05 F1 | 	add	fp, #108
29574     A7 26 02 FB | 	rdlong	local01, fp
29578     01 26 06 F1 | 	add	local01, #1
2957c     64 4E 85 F1 | 	sub	fp, #100
29580     A7 26 62 FC | 	wrlong	local01, fp
29584     54 4E 85 F1 | 	sub	fp, #84
29588     88 00 90 FD | 	jmp	#LR__3524
2958c                 | LR__3521
2958c     20 4E 05 F1 | 	add	fp, #32
29590     A7 26 02 FB | 	rdlong	local01, fp
29594     20 4E 85 F1 | 	sub	fp, #32
29598     00 26 56 F2 | 	cmps	local01, #0 wc
2959c     40 00 90 3D |  if_ae	jmp	#LR__3522
295a0     20 4E 05 F1 | 	add	fp, #32
295a4     A7 28 02 FB | 	rdlong	local02, fp
295a8     30 4E 05 F1 | 	add	fp, #48
295ac     A7 28 62 FC | 	wrlong	local02, fp
295b0     04 4E 85 F1 | 	sub	fp, #4
295b4     A7 28 62 FC | 	wrlong	local02, fp
295b8     2C 4E 85 F1 | 	sub	fp, #44
295bc     A7 26 02 FB | 	rdlong	local01, fp
295c0     98 4E 05 F1 | 	add	fp, #152
295c4     A7 2A 02 FB | 	rdlong	local03, fp
295c8     15 27 02 F1 | 	add	local01, local03
295cc     01 26 06 F1 | 	add	local01, #1
295d0     64 4E 85 F1 | 	sub	fp, #100
295d4     A7 26 62 FC | 	wrlong	local01, fp
295d8     54 4E 85 F1 | 	sub	fp, #84
295dc     34 00 90 FD | 	jmp	#LR__3523
295e0                 | LR__3522
295e0     4C 4E 05 F1 | 	add	fp, #76
295e4     A7 00 68 FC | 	wrlong	#0, fp
295e8     2C 4E 85 F1 | 	sub	fp, #44
295ec     A7 26 02 FB | 	rdlong	local01, fp
295f0     30 4E 05 F1 | 	add	fp, #48
295f4     A7 26 62 FC | 	wrlong	local01, fp
295f8     68 4E 05 F1 | 	add	fp, #104
295fc     A7 2A 02 FB | 	rdlong	local03, fp
29600     15 27 02 F1 | 	add	local01, local03
29604     01 26 06 F1 | 	add	local01, #1
29608     64 4E 85 F1 | 	sub	fp, #100
2960c     A7 26 62 FC | 	wrlong	local01, fp
29610     54 4E 85 F1 | 	sub	fp, #84
29614                 | LR__3523
29614                 | LR__3524
29614     54 4E 05 F1 | 	add	fp, #84
29618     A7 26 02 FB | 	rdlong	local01, fp
2961c     08 4E 85 F1 | 	sub	fp, #8
29620     A7 2A 02 FB | 	rdlong	local03, fp
29624     15 27 82 F1 | 	sub	local01, local03
29628     01 26 06 F1 | 	add	local01, #1
2962c     24 4E 85 F1 | 	sub	fp, #36
29630     A7 26 62 FC | 	wrlong	local01, fp
29634     04 4E 05 F1 | 	add	fp, #4
29638     A7 26 0A FB | 	rdlong	local01, fp wz
2963c     2C 4E 85 F1 | 	sub	fp, #44
29640     28 4E 05 51 |  if_ne	add	fp, #40
29644     A7 2A 02 5B |  if_ne	rdlong	local03, fp
29648     01 2A 06 51 |  if_ne	add	local03, #1
2964c     A7 2A 62 5C |  if_ne	wrlong	local03, fp
29650     28 4E 85 51 |  if_ne	sub	fp, #40
29654     1C 4E 05 F1 | 	add	fp, #28
29658     A7 26 02 FB | 	rdlong	local01, fp
2965c     1C 4E 85 F1 | 	sub	fp, #28
29660     10 26 0E F2 | 	cmp	local01, #16 wz
29664     28 4E 05 A1 |  if_e	add	fp, #40
29668     A7 26 02 AB |  if_e	rdlong	local01, fp
2966c     02 26 06 A1 |  if_e	add	local01, #2
29670     A7 26 62 AC |  if_e	wrlong	local01, fp
29674     28 4E 85 A1 |  if_e	sub	fp, #40
29678     24 4E 05 F1 | 	add	fp, #36
2967c     A7 26 0A FB | 	rdlong	local01, fp wz
29680     24 4E 85 F1 | 	sub	fp, #36
29684     28 00 90 AD |  if_e	jmp	#LR__3525
29688     28 4E 05 F1 | 	add	fp, #40
2968c     A7 26 02 FB | 	rdlong	local01, fp
29690     02 2A 06 F6 | 	mov	local03, #2
29694     34 4E 05 F1 | 	add	fp, #52
29698     A7 2E 02 FB | 	rdlong	local05, fp
2969c     17 2B 02 F1 | 	add	local03, local05
296a0     15 27 02 F1 | 	add	local01, local03
296a4     34 4E 85 F1 | 	sub	fp, #52
296a8     A7 26 62 FC | 	wrlong	local01, fp
296ac     28 4E 85 F1 | 	sub	fp, #40
296b0                 | LR__3525
296b0     28 4E 05 F1 | 	add	fp, #40
296b4     A7 26 02 FB | 	rdlong	local01, fp
296b8     28 4E 85 F1 | 	sub	fp, #40
296bc     41 26 56 F2 | 	cmps	local01, #65 wc
296c0     01 FA 65 36 |  if_ae	neg	result1, #1
296c4     08 05 90 3D |  if_ae	jmp	#LR__3553
296c8     3C 4E 05 F1 | 	add	fp, #60
296cc     A7 26 0A FB | 	rdlong	local01, fp wz
296d0     3C 4E 85 F1 | 	sub	fp, #60
296d4     60 00 90 AD |  if_e	jmp	#LR__3526
296d8     C0 4E 05 F1 | 	add	fp, #192
296dc     A7 12 02 FB | 	rdlong	arg01, fp
296e0     94 4E 85 F1 | 	sub	fp, #148
296e4     A7 14 02 FB | 	rdlong	arg02, fp
296e8     14 4E 05 F1 | 	add	fp, #20
296ec     A7 16 02 FB | 	rdlong	arg03, fp
296f0     40 4E 85 F1 | 	sub	fp, #64
296f4     E4 40 B0 FD | 	call	#__system__emitsign_0582
296f8     18 4F 05 F1 | 	add	fp, #280
296fc     A7 FA 61 FC | 	wrlong	result1, fp
29700     18 4F 85 F1 | 	sub	fp, #280
29704     00 FA 55 F2 | 	cmps	result1, #0 wc
29708     18 4F 05 C1 |  if_b	add	fp, #280
2970c     A7 FA 01 CB |  if_b	rdlong	result1, fp
29710     18 4F 85 C1 |  if_b	sub	fp, #280
29714     B8 04 90 CD |  if_b	jmp	#LR__3553
29718     C0 4E 05 F1 | 	add	fp, #192
2971c     A7 26 02 FB | 	rdlong	local01, fp
29720     58 4E 05 F1 | 	add	fp, #88
29724     A7 2A 02 FB | 	rdlong	local03, fp
29728     15 27 02 F1 | 	add	local01, local03
2972c     58 4E 85 F1 | 	sub	fp, #88
29730     A7 26 62 FC | 	wrlong	local01, fp
29734     C0 4E 85 F1 | 	sub	fp, #192
29738                 | LR__3526
29738     4C 4E 05 F1 | 	add	fp, #76
2973c     A7 26 02 FB | 	rdlong	local01, fp
29740     34 4E 85 F1 | 	sub	fp, #52
29744     A7 26 62 FC | 	wrlong	local01, fp
29748     18 4E 85 F1 | 	sub	fp, #24
2974c     97 9E 48 FB | 	callpa	#(@LR__3532-@LR__3527)>>2,fcache_load_ptr_
29750                 | LR__3527
29750     18 4E 05 F1 | 	add	fp, #24
29754     A7 28 02 FB | 	rdlong	local02, fp
29758     3C 4E 05 F1 | 	add	fp, #60
2975c     A7 2E 02 FB | 	rdlong	local05, fp
29760     54 4E 85 F1 | 	sub	fp, #84
29764     17 29 52 F2 | 	cmps	local02, local05 wc
29768     20 01 90 3D |  if_ae	jmp	#LR__3533
2976c     18 4E 05 F1 | 	add	fp, #24
29770     A7 30 02 FB | 	rdlong	local06, fp
29774     18 4E 85 F1 | 	sub	fp, #24
29778     00 30 56 F2 | 	cmps	local06, #0 wc
2977c     58 00 90 CD |  if_b	jmp	#LR__3528
29780     18 4E 05 F1 | 	add	fp, #24
29784     A7 30 02 FB | 	rdlong	local06, fp
29788     40 4E 05 F1 | 	add	fp, #64
2978c     A7 32 02 FB | 	rdlong	local07, fp
29790     58 4E 85 F1 | 	sub	fp, #88
29794     19 31 52 F2 | 	cmps	local06, local07 wc
29798     3C 00 90 3D |  if_ae	jmp	#LR__3528
2979c     C0 4E 05 F1 | 	add	fp, #192
297a0     A7 34 02 FB | 	rdlong	local08, fp
297a4     1A 33 02 F6 | 	mov	local07, local08
297a8     01 32 06 F1 | 	add	local07, #1
297ac     A7 32 62 FC | 	wrlong	local07, fp
297b0     A8 4E 85 F1 | 	sub	fp, #168
297b4     A7 32 02 FB | 	rdlong	local07, fp
297b8     19 37 02 F6 | 	mov	local09, local07
297bc     58 4E 05 F1 | 	add	fp, #88
297c0     A7 38 02 F6 | 	mov	local10, fp
297c4     A7 36 02 F1 | 	add	local09, fp
297c8     1B 3B C2 FA | 	rdbyte	local11, local09
297cc     1A 3B 42 FC | 	wrbyte	local11, local08
297d0     70 4E 85 F1 | 	sub	fp, #112
297d4     20 00 90 FD | 	jmp	#LR__3529
297d8                 | LR__3528
297d8     C0 4E 05 F1 | 	add	fp, #192
297dc     A7 34 02 FB | 	rdlong	local08, fp
297e0     1A 37 02 F6 | 	mov	local09, local08
297e4     01 36 06 F1 | 	add	local09, #1
297e8     A7 36 62 FC | 	wrlong	local09, fp
297ec     C0 4E 85 F1 | 	sub	fp, #192
297f0     30 36 06 F6 | 	mov	local09, #48
297f4     1A 61 48 FC | 	wrbyte	#48, local08
297f8                 | LR__3529
297f8     18 4E 05 F1 | 	add	fp, #24
297fc     A7 30 02 FB | 	rdlong	local06, fp
29800     38 4E 05 F1 | 	add	fp, #56
29804     A7 3C 02 FB | 	rdlong	local12, fp
29808     50 4E 85 F1 | 	sub	fp, #80
2980c     1E 31 0A F2 | 	cmp	local06, local12 wz
29810     5C 00 90 5D |  if_ne	jmp	#LR__3531
29814     10 4F 05 F1 | 	add	fp, #272
29818     A7 32 02 FB | 	rdlong	local07, fp
2981c     10 4F 85 F1 | 	sub	fp, #272
29820     19 37 0A F6 | 	mov	local09, local07 wz
29824     28 00 90 5D |  if_ne	jmp	#LR__3530
29828     54 4E 05 F1 | 	add	fp, #84
2982c     A7 3A 02 FB | 	rdlong	local11, fp
29830     1D 39 02 F6 | 	mov	local10, local11
29834     01 38 86 F1 | 	sub	local10, #1
29838     3C 4E 85 F1 | 	sub	fp, #60
2983c     A7 3E 02 FB | 	rdlong	local13, fp
29840     18 4E 85 F1 | 	sub	fp, #24
29844     1F 41 02 F6 | 	mov	local14, local13
29848     1C 41 52 F2 | 	cmps	local14, local10 wc
2984c     20 00 90 3D |  if_ae	jmp	#LR__3531
29850                 | LR__3530
29850     C0 4E 05 F1 | 	add	fp, #192
29854     A7 34 02 FB | 	rdlong	local08, fp
29858     1A 3D 02 F6 | 	mov	local12, local08
2985c     01 3C 06 F1 | 	add	local12, #1
29860     A7 3C 62 FC | 	wrlong	local12, fp
29864     C0 4E 85 F1 | 	sub	fp, #192
29868     2E 36 06 F6 | 	mov	local09, #46
2986c     1A 5D 48 FC | 	wrbyte	#46, local08
29870                 | LR__3531
29870     18 4E 05 F1 | 	add	fp, #24
29874     A7 42 02 FB | 	rdlong	local15, fp
29878     21 3D 02 F6 | 	mov	local12, local15
2987c     01 3C 06 F1 | 	add	local12, #1
29880     A7 3C 62 FC | 	wrlong	local12, fp
29884     18 4E 85 F1 | 	sub	fp, #24
29888     C4 FE 9F FD | 	jmp	#LR__3527
2988c                 | LR__3532
2988c                 | LR__3533
2988c     34 4E 05 F1 | 	add	fp, #52
29890     A7 26 0A FB | 	rdlong	local01, fp wz
29894     34 4E 85 F1 | 	sub	fp, #52
29898     A0 00 90 AD |  if_e	jmp	#LR__3537
2989c     C0 4E 05 F1 | 	add	fp, #192
298a0     A7 26 02 FB | 	rdlong	local01, fp
298a4     01 26 86 F1 | 	sub	local01, #1
298a8     A7 26 62 FC | 	wrlong	local01, fp
298ac     C0 4E 85 F1 | 	sub	fp, #192
298b0     97 26 48 FB | 	callpa	#(@LR__3535-@LR__3534)>>2,fcache_load_ptr_
298b4                 | LR__3534
298b4     C0 4E 05 F1 | 	add	fp, #192
298b8     A7 26 02 FB | 	rdlong	local01, fp
298bc     04 4E 05 F1 | 	add	fp, #4
298c0     A7 2A 02 FB | 	rdlong	local03, fp
298c4     C4 4E 85 F1 | 	sub	fp, #196
298c8     15 27 5A F2 | 	cmps	local01, local03 wcz
298cc     30 00 90 ED |  if_be	jmp	#LR__3536
298d0     C0 4E 05 F1 | 	add	fp, #192
298d4     A7 30 02 FB | 	rdlong	local06, fp
298d8     C0 4E 85 F1 | 	sub	fp, #192
298dc     18 2D C2 FA | 	rdbyte	local04, local06
298e0     30 2C 0E F2 | 	cmp	local04, #48 wz
298e4     18 00 90 5D |  if_ne	jmp	#LR__3536
298e8     C0 4E 05 F1 | 	add	fp, #192
298ec     A7 26 02 FB | 	rdlong	local01, fp
298f0     01 26 86 F1 | 	sub	local01, #1
298f4     A7 26 62 FC | 	wrlong	local01, fp
298f8     C0 4E 85 F1 | 	sub	fp, #192
298fc     B4 FF 9F FD | 	jmp	#LR__3534
29900                 | LR__3535
29900                 | LR__3536
29900     C0 4E 05 F1 | 	add	fp, #192
29904     A7 28 02 FB | 	rdlong	local02, fp
29908     C0 4E 85 F1 | 	sub	fp, #192
2990c     14 27 C2 FA | 	rdbyte	local01, local02
29910     2E 26 0E F2 | 	cmp	local01, #46 wz
29914     C0 4E 05 A1 |  if_e	add	fp, #192
29918     A7 26 02 AB |  if_e	rdlong	local01, fp
2991c     01 26 86 A1 |  if_e	sub	local01, #1
29920     A7 26 62 AC |  if_e	wrlong	local01, fp
29924     C0 4E 85 A1 |  if_e	sub	fp, #192
29928     C0 4E 05 F1 | 	add	fp, #192
2992c     A7 2A 02 FB | 	rdlong	local03, fp
29930     01 2A 06 F1 | 	add	local03, #1
29934     A7 2A 62 FC | 	wrlong	local03, fp
29938     C0 4E 85 F1 | 	sub	fp, #192
2993c                 | LR__3537
2993c     24 4E 05 F1 | 	add	fp, #36
29940     A7 26 0A FB | 	rdlong	local01, fp wz
29944     24 4E 85 F1 | 	sub	fp, #36
29948     B4 00 90 AD |  if_e	jmp	#LR__3540
2994c     C0 4E 05 F1 | 	add	fp, #192
29950     A7 28 02 FB | 	rdlong	local02, fp
29954     14 2B 02 F6 | 	mov	local03, local02
29958     01 2A 06 F1 | 	add	local03, #1
2995c     A7 2A 62 FC | 	wrlong	local03, fp
29960     90 4E 85 F1 | 	sub	fp, #144
29964     A7 2C 02 FB | 	rdlong	local04, fp
29968     14 2D 42 FC | 	wrbyte	local04, local02
2996c     90 4E 05 F1 | 	add	fp, #144
29970     A7 28 02 FB | 	rdlong	local02, fp
29974     14 2B 02 F6 | 	mov	local03, local02
29978     01 2A 06 F1 | 	add	local03, #1
2997c     A7 2A 62 FC | 	wrlong	local03, fp
29980     60 4E 85 F1 | 	sub	fp, #96
29984     A7 2C 02 FB | 	rdlong	local04, fp
29988     14 2D 42 FC | 	wrbyte	local04, local02
2998c     48 4E 85 F1 | 	sub	fp, #72
29990     A7 00 68 FC | 	wrlong	#0, fp
29994     18 4E 85 F1 | 	sub	fp, #24
29998                 | LR__3538
29998     18 4E 05 F1 | 	add	fp, #24
2999c     A7 28 02 FB | 	rdlong	local02, fp
299a0     44 4E 05 F1 | 	add	fp, #68
299a4     A7 2E 02 FB | 	rdlong	local05, fp
299a8     5C 4E 85 F1 | 	sub	fp, #92
299ac     17 29 52 F2 | 	cmps	local02, local05 wc
299b0     4C 00 90 3D |  if_ae	jmp	#LR__3539
299b4     C0 4E 05 F1 | 	add	fp, #192
299b8     A7 34 02 FB | 	rdlong	local08, fp
299bc     1A 3D 02 F6 | 	mov	local12, local08
299c0     01 3C 06 F1 | 	add	local12, #1
299c4     A7 3C 62 FC | 	wrlong	local12, fp
299c8     A8 4E 85 F1 | 	sub	fp, #168
299cc     A7 32 02 FB | 	rdlong	local07, fp
299d0     19 37 02 F6 | 	mov	local09, local07
299d4     98 4E 05 F1 | 	add	fp, #152
299d8     A7 38 02 F6 | 	mov	local10, fp
299dc     A7 36 02 F1 | 	add	local09, fp
299e0     1B 3B C2 FA | 	rdbyte	local11, local09
299e4     1A 3B 42 FC | 	wrbyte	local11, local08
299e8     98 4E 85 F1 | 	sub	fp, #152
299ec     A7 3C 02 FB | 	rdlong	local12, fp
299f0     01 3C 06 F1 | 	add	local12, #1
299f4     A7 3C 62 FC | 	wrlong	local12, fp
299f8     18 4E 85 F1 | 	sub	fp, #24
299fc     98 FF 9F FD | 	jmp	#LR__3538
29a00                 | LR__3539
29a00                 | LR__3540
29a00     C0 4E 05 F1 | 	add	fp, #192
29a04     A7 26 02 FB | 	rdlong	local01, fp
29a08     C0 4E 85 F1 | 	sub	fp, #192
29a0c     13 01 48 FC | 	wrbyte	#0, local01
29a10                 | LR__3541
29a10     6C 4E 05 F1 | 	add	fp, #108
29a14     A7 26 0A FB | 	rdlong	local01, fp wz
29a18     6C 4E 85 F1 | 	sub	fp, #108
29a1c     90 01 90 AD |  if_e	jmp	#LR__3552
29a20     48 4E 05 F1 | 	add	fp, #72
29a24     A7 2A 0A FB | 	rdlong	local03, fp wz
29a28     48 4E 85 F1 | 	sub	fp, #72
29a2c     80 01 90 AD |  if_e	jmp	#LR__3552
29a30     C4 4E 05 F1 | 	add	fp, #196
29a34     A7 12 02 FB | 	rdlong	arg01, fp
29a38     C4 4E 85 F1 | 	sub	fp, #196
29a3c     09 45 02 F6 | 	mov	local16, arg01
29a40     97 06 48 FB | 	callpa	#(@LR__3543-@LR__3542)>>2,fcache_load_ptr_
29a44                 | LR__3542
29a44     22 FB C9 FA | 	rdbyte	result1, local16 wz
29a48     01 44 06 51 |  if_ne	add	local16, #1
29a4c     F4 FF 9F 5D |  if_ne	jmp	#LR__3542
29a50                 | LR__3543
29a50     09 45 82 F1 | 	sub	local16, arg01
29a54     22 2D 02 F6 | 	mov	local04, local16
29a58     6C 4E 05 F1 | 	add	fp, #108
29a5c     A7 30 02 FB | 	rdlong	local06, fp
29a60     6C 4E 85 F1 | 	sub	fp, #108
29a64     18 2D 5A F2 | 	cmps	local04, local06 wcz
29a68     44 01 90 ED |  if_be	jmp	#LR__3552
29a6c     C4 4E 05 F1 | 	add	fp, #196
29a70     A7 26 02 FB | 	rdlong	local01, fp
29a74     5C 4E 05 F1 | 	add	fp, #92
29a78     A7 26 62 FC | 	wrlong	local01, fp
29a7c     FC 4E 85 F1 | 	sub	fp, #252
29a80     A7 26 0A FB | 	rdlong	local01, fp wz
29a84     24 4E 85 F1 | 	sub	fp, #36
29a88     20 00 90 AD |  if_e	jmp	#LR__3544
29a8c     B8 4E 05 F1 | 	add	fp, #184
29a90     A7 00 68 FC | 	wrlong	#0, fp
29a94     4C 4E 85 F1 | 	sub	fp, #76
29a98     A7 26 02 FB | 	rdlong	local01, fp
29a9c     B0 4E 05 F1 | 	add	fp, #176
29aa0     A7 26 62 FC | 	wrlong	local01, fp
29aa4     1C 4F 85 F1 | 	sub	fp, #284
29aa8     24 00 90 FD | 	jmp	#LR__3545
29aac                 | LR__3544
29aac     6C 4E 05 F1 | 	add	fp, #108
29ab0     A7 26 02 FB | 	rdlong	local01, fp
29ab4     01 26 86 F1 | 	sub	local01, #1
29ab8     4C 4E 05 F1 | 	add	fp, #76
29abc     A7 2A 02 FB | 	rdlong	local03, fp
29ac0     15 27 82 F1 | 	sub	local01, local03
29ac4     64 4E 05 F1 | 	add	fp, #100
29ac8     A7 26 62 FC | 	wrlong	local01, fp
29acc     1C 4F 85 F1 | 	sub	fp, #284
29ad0                 | LR__3545
29ad0     97 20 48 FB | 	callpa	#(@LR__3547-@LR__3546)>>2,fcache_load_ptr_
29ad4                 | LR__3546
29ad4     1C 4F 05 F1 | 	add	fp, #284
29ad8     A7 26 0A FB | 	rdlong	local01, fp wz
29adc     1C 4F 85 F1 | 	sub	fp, #284
29ae0     30 00 90 AD |  if_e	jmp	#LR__3548
29ae4     20 4F 05 F1 | 	add	fp, #288
29ae8     A7 28 02 FB | 	rdlong	local02, fp
29aec     14 2B 02 F6 | 	mov	local03, local02
29af0     01 2A 06 F1 | 	add	local03, #1
29af4     A7 2A 62 FC | 	wrlong	local03, fp
29af8     14 55 48 FC | 	wrbyte	#42, local02
29afc     04 4E 85 F1 | 	sub	fp, #4
29b00     A7 26 02 FB | 	rdlong	local01, fp
29b04     01 26 86 F1 | 	sub	local01, #1
29b08     A7 26 62 FC | 	wrlong	local01, fp
29b0c     1C 4F 85 F1 | 	sub	fp, #284
29b10     C0 FF 9F FD | 	jmp	#LR__3546
29b14                 | LR__3547
29b14                 | LR__3548
29b14     B8 4E 05 F1 | 	add	fp, #184
29b18     A7 26 0A FB | 	rdlong	local01, fp wz
29b1c     B8 4E 85 F1 | 	sub	fp, #184
29b20     70 00 90 AD |  if_e	jmp	#LR__3551
29b24     20 4F 05 F1 | 	add	fp, #288
29b28     A7 28 02 FB | 	rdlong	local02, fp
29b2c     14 2B 02 F6 | 	mov	local03, local02
29b30     01 2A 06 F1 | 	add	local03, #1
29b34     A7 2A 62 FC | 	wrlong	local03, fp
29b38     14 5D 48 FC | 	wrbyte	#46, local02
29b3c     04 4E 85 F1 | 	sub	fp, #4
29b40     A7 00 68 FC | 	wrlong	#0, fp
29b44     1C 4F 85 F1 | 	sub	fp, #284
29b48                 | LR__3549
29b48     1C 4F 05 F1 | 	add	fp, #284
29b4c     A7 28 02 FB | 	rdlong	local02, fp
29b50     64 4E 85 F1 | 	sub	fp, #100
29b54     A7 2E 02 FB | 	rdlong	local05, fp
29b58     B8 4E 85 F1 | 	sub	fp, #184
29b5c     17 29 52 F2 | 	cmps	local02, local05 wc
29b60     30 00 90 3D |  if_ae	jmp	#LR__3550
29b64     20 4F 05 F1 | 	add	fp, #288
29b68     A7 34 02 FB | 	rdlong	local08, fp
29b6c     1A 3D 02 F6 | 	mov	local12, local08
29b70     01 3C 06 F1 | 	add	local12, #1
29b74     A7 3C 62 FC | 	wrlong	local12, fp
29b78     1A 55 48 FC | 	wrbyte	#42, local08
29b7c     04 4E 85 F1 | 	sub	fp, #4
29b80     A7 3C 02 FB | 	rdlong	local12, fp
29b84     01 3C 06 F1 | 	add	local12, #1
29b88     A7 3C 62 FC | 	wrlong	local12, fp
29b8c     1C 4F 85 F1 | 	sub	fp, #284
29b90     B4 FF 9F FD | 	jmp	#LR__3549
29b94                 | LR__3550
29b94                 | LR__3551
29b94     20 4F 05 F1 | 	add	fp, #288
29b98     A7 28 02 FB | 	rdlong	local02, fp
29b9c     14 2B 02 F6 | 	mov	local03, local02
29ba0     01 2A 06 F1 | 	add	local03, #1
29ba4     A7 2A 62 FC | 	wrlong	local03, fp
29ba8     20 4F 85 F1 | 	sub	fp, #288
29bac     14 01 48 FC | 	wrbyte	#0, local02
29bb0                 | LR__3552
29bb0     04 4E 05 F1 | 	add	fp, #4
29bb4     A7 12 02 FB | 	rdlong	arg01, fp
29bb8     04 4E 05 F1 | 	add	fp, #4
29bbc     A7 14 02 FB | 	rdlong	arg02, fp
29bc0     BC 4E 05 F1 | 	add	fp, #188
29bc4     A7 16 02 FB | 	rdlong	arg03, fp
29bc8     C4 4E 85 F1 | 	sub	fp, #196
29bcc     C4 EE BF FD | 	call	#__system___fmtstr
29bd0                 | LR__3553
29bd0     A7 F0 03 F6 | 	mov	ptra, fp
29bd4     B2 00 A0 FD | 	call	#popregs_
29bd8                 | __system___fmtfloat_ret
29bd8     2D 00 64 FD | 	ret
29bdc                 | 
29bdc                 | __system__Left_S
29bdc     04 4A 05 F6 | 	mov	COUNT_, #4
29be0     A8 00 A0 FD | 	call	#pushregs_
29be4     09 27 02 F6 | 	mov	local01, arg01
29be8     0A 29 02 F6 | 	mov	local02, arg02
29bec     01 28 56 F2 | 	cmps	local02, #1 wc
29bf0     BB 01 00 CF 
29bf4     82 FA 05 C6 |  if_b	mov	result1, ##@LR__5513
29bf8     5C 00 90 CD |  if_b	jmp	#LR__3563
29bfc     13 13 02 F6 | 	mov	arg01, local01
29c00     09 2B 02 F6 | 	mov	local03, arg01
29c04     97 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
29c08                 | LR__3560
29c08     15 FB C9 FA | 	rdbyte	result1, local03 wz
29c0c     01 2A 06 51 |  if_ne	add	local03, #1
29c10     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
29c14                 | LR__3561
29c14     09 2B 82 F1 | 	sub	local03, arg01
29c18     15 FB 01 F6 | 	mov	result1, local03
29c1c     14 FB 59 F2 | 	cmps	result1, local02 wcz
29c20     13 FB 01 E6 |  if_be	mov	result1, local01
29c24     30 00 90 ED |  if_be	jmp	#LR__3563
29c28     14 13 02 F6 | 	mov	arg01, local02
29c2c     02 12 06 F1 | 	add	arg01, #2
29c30     D0 20 B0 FD | 	call	#__system___gc_alloc_managed
29c34     FD 2C 0A F6 | 	mov	local04, result1 wz
29c38     18 00 90 AD |  if_e	jmp	#LR__3562
29c3c     16 13 02 F6 | 	mov	arg01, local04
29c40     13 15 02 F6 | 	mov	arg02, local01
29c44     14 17 02 F6 | 	mov	arg03, local02
29c48     C0 DD BF FD | 	call	#__system____builtin_memmove
29c4c     16 29 02 F1 | 	add	local02, local04
29c50     14 01 48 FC | 	wrbyte	#0, local02
29c54                 | LR__3562
29c54     16 FB 01 F6 | 	mov	result1, local04
29c58                 | LR__3563
29c58     A7 F0 03 F6 | 	mov	ptra, fp
29c5c     B2 00 A0 FD | 	call	#popregs_
29c60                 | __system__Left_S_ret
29c60     2D 00 64 FD | 	ret
29c64                 | 
29c64                 | __system__Right_S
29c64     05 4A 05 F6 | 	mov	COUNT_, #5
29c68     A8 00 A0 FD | 	call	#pushregs_
29c6c     09 27 02 F6 | 	mov	local01, arg01
29c70     0A 29 02 F6 | 	mov	local02, arg02
29c74     01 28 56 F2 | 	cmps	local02, #1 wc
29c78     BB 01 00 CF 
29c7c     83 FA 05 C6 |  if_b	mov	result1, ##@LR__5514
29c80     64 00 90 CD |  if_b	jmp	#LR__3573
29c84     13 13 02 F6 | 	mov	arg01, local01
29c88     09 2B 02 F6 | 	mov	local03, arg01
29c8c     97 06 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
29c90                 | LR__3570
29c90     15 FB C9 FA | 	rdbyte	result1, local03 wz
29c94     01 2A 06 51 |  if_ne	add	local03, #1
29c98     F4 FF 9F 5D |  if_ne	jmp	#LR__3570
29c9c                 | LR__3571
29c9c     09 2B 82 F1 | 	sub	local03, arg01
29ca0     15 FB 01 F6 | 	mov	result1, local03
29ca4     FD 2C 02 F6 | 	mov	local04, result1
29ca8     14 2D 5A F2 | 	cmps	local04, local02 wcz
29cac     13 FB 01 E6 |  if_be	mov	result1, local01
29cb0     34 00 90 ED |  if_be	jmp	#LR__3573
29cb4     14 13 02 F6 | 	mov	arg01, local02
29cb8     02 12 06 F1 | 	add	arg01, #2
29cbc     44 20 B0 FD | 	call	#__system___gc_alloc_managed
29cc0     FD 2E 0A F6 | 	mov	local05, result1 wz
29cc4     1C 00 90 AD |  if_e	jmp	#LR__3572
29cc8     14 2D 82 F1 | 	sub	local04, local02
29ccc     13 2D 02 F1 | 	add	local04, local01
29cd0     01 28 06 F1 | 	add	local02, #1
29cd4     17 13 02 F6 | 	mov	arg01, local05
29cd8     16 15 02 F6 | 	mov	arg02, local04
29cdc     14 17 02 F6 | 	mov	arg03, local02
29ce0     28 DD BF FD | 	call	#__system____builtin_memmove
29ce4                 | LR__3572
29ce4     17 FB 01 F6 | 	mov	result1, local05
29ce8                 | LR__3573
29ce8     A7 F0 03 F6 | 	mov	ptra, fp
29cec     B2 00 A0 FD | 	call	#popregs_
29cf0                 | __system__Right_S_ret
29cf0     2D 00 64 FD | 	ret
29cf4                 | 
29cf4                 | __system__Mid_S
29cf4     05 4A 05 F6 | 	mov	COUNT_, #5
29cf8     A8 00 A0 FD | 	call	#pushregs_
29cfc     09 27 02 F6 | 	mov	local01, arg01
29d00     0A 29 02 F6 | 	mov	local02, arg02
29d04     01 16 56 F2 | 	cmps	arg03, #1 wc
29d08     BB 01 00 CF 
29d0c     84 FA 05 C6 |  if_b	mov	result1, ##@LR__5515
29d10     80 00 90 CD |  if_b	jmp	#LR__3583
29d14     01 28 86 F1 | 	sub	local02, #1
29d18     00 28 56 F3 | 	fges	local02, #0 wc
29d1c     13 13 02 F6 | 	mov	arg01, local01
29d20     09 2B 02 F6 | 	mov	local03, arg01
29d24     97 06 48 FB | 	callpa	#(@LR__3581-@LR__3580)>>2,fcache_load_ptr_
29d28                 | LR__3580
29d28     15 FB C9 FA | 	rdbyte	result1, local03 wz
29d2c     01 2A 06 51 |  if_ne	add	local03, #1
29d30     F4 FF 9F 5D |  if_ne	jmp	#LR__3580
29d34                 | LR__3581
29d34     09 2B 82 F1 | 	sub	local03, arg01
29d38     15 FB 01 F6 | 	mov	result1, local03
29d3c     FD 14 02 F6 | 	mov	arg02, result1
29d40     14 15 52 F2 | 	cmps	arg02, local02 wc
29d44     BB 01 00 CF 
29d48     85 FA 05 C6 |  if_b	mov	result1, ##@LR__5516
29d4c     44 00 90 CD |  if_b	jmp	#LR__3583
29d50     0A 2D 02 F6 | 	mov	local04, arg02
29d54     14 2D 82 F1 | 	sub	local04, local02
29d58     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
29d5c     0B 2D 02 16 |  if_a	mov	local04, arg03
29d60     16 13 02 F6 | 	mov	arg01, local04
29d64     02 12 06 F1 | 	add	arg01, #2
29d68     98 1F B0 FD | 	call	#__system___gc_alloc_managed
29d6c     FD 2E 0A F6 | 	mov	local05, result1 wz
29d70     1C 00 90 AD |  if_e	jmp	#LR__3582
29d74     13 29 02 F1 | 	add	local02, local01
29d78     17 13 02 F6 | 	mov	arg01, local05
29d7c     14 15 02 F6 | 	mov	arg02, local02
29d80     16 17 02 F6 | 	mov	arg03, local04
29d84     84 DC BF FD | 	call	#__system____builtin_memmove
29d88     17 2D 02 F1 | 	add	local04, local05
29d8c     16 01 48 FC | 	wrbyte	#0, local04
29d90                 | LR__3582
29d90     17 FB 01 F6 | 	mov	result1, local05
29d94                 | LR__3583
29d94     A7 F0 03 F6 | 	mov	ptra, fp
29d98     B2 00 A0 FD | 	call	#popregs_
29d9c                 | __system__Mid_S_ret
29d9c     2D 00 64 FD | 	ret
29da0                 | 
29da0                 | __system__Chr_S
29da0     01 4A 05 F6 | 	mov	COUNT_, #1
29da4     A8 00 A0 FD | 	call	#pushregs_
29da8     09 27 02 F6 | 	mov	local01, arg01
29dac     03 12 06 F6 | 	mov	arg01, #3
29db0     50 1F B0 FD | 	call	#__system___gc_alloc_managed
29db4     00 FA 4D F2 | 	cmps	result1, #0 wz
29db8     FD 26 42 5C |  if_ne	wrbyte	local01, result1
29dbc     01 FA 05 51 |  if_ne	add	result1, #1
29dc0     FD 00 48 5C |  if_ne	wrbyte	#0, result1
29dc4     01 FA 85 51 |  if_ne	sub	result1, #1
29dc8     A7 F0 03 F6 | 	mov	ptra, fp
29dcc     B2 00 A0 FD | 	call	#popregs_
29dd0                 | __system__Chr_S_ret
29dd0     2D 00 64 FD | 	ret
29dd4                 | 
29dd4                 | __system__str_S
29dd4     02 4A 05 F6 | 	mov	COUNT_, #2
29dd8     A8 00 A0 FD | 	call	#pushregs_
29ddc     09 27 02 F6 | 	mov	local01, arg01
29de0     10 12 06 F6 | 	mov	arg01, #16
29de4     1C 1F B0 FD | 	call	#__system___gc_alloc_managed
29de8     FD 28 0A F6 | 	mov	local02, result1 wz
29dec     30 00 90 AD |  if_e	jmp	#LR__3590
29df0     F8 13 02 F6 | 	mov	arg01, ptra
29df4     08 F0 07 F1 | 	add	ptra, #8
29df8     09 29 62 FC | 	wrlong	local02, arg01
29dfc     04 12 06 F1 | 	add	arg01, #4
29e00     09 01 68 FC | 	wrlong	#0, arg01
29e04     04 12 86 F1 | 	sub	arg01, #4
29e08     00 80 05 FF 
29e0c     00 12 46 F5 | 	or	arg01, ##184549376
29e10     00 14 06 F6 | 	mov	arg02, #0
29e14     13 17 02 F6 | 	mov	arg03, local01
29e18     67 18 06 F6 | 	mov	arg04, #103
29e1c     90 EE BF FD | 	call	#__system___fmtfloat
29e20                 | LR__3590
29e20     14 FB 01 F6 | 	mov	result1, local02
29e24     A7 F0 03 F6 | 	mov	ptra, fp
29e28     B2 00 A0 FD | 	call	#popregs_
29e2c                 | __system__str_S_ret
29e2c     2D 00 64 FD | 	ret
29e30                 | 
29e30                 | __system__Number_S
29e30     08 4A 05 F6 | 	mov	COUNT_, #8
29e34     A8 00 A0 FD | 	call	#pushregs_
29e38     09 27 02 F6 | 	mov	local01, arg01
29e3c     0A 29 0A F6 | 	mov	local02, arg02 wz
29e40     0B 2B 02 F6 | 	mov	local03, arg03
29e44     3C 00 90 5D |  if_ne	jmp	#LR__3602
29e48     01 28 06 F6 | 	mov	local02, #1
29e4c     15 2D 02 F6 | 	mov	local04, local03
29e50     01 2E 06 F6 | 	mov	local05, #1
29e54     97 16 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
29e58                 | LR__3600
29e58     00 30 06 F6 | 	mov	local06, #0
29e5c     13 2D 1A F2 | 	cmp	local04, local01 wcz
29e60     01 30 66 E6 |  if_be	neg	local06, #1
29e64     16 2F 12 F2 | 	cmp	local05, local04 wc
29e68     19 33 A2 F1 | 	subx	local07, local07
29e6c     19 31 CA F7 | 	test	local06, local07 wz
29e70     15 2D 02 5D |  if_ne	qmul	local04, local03
29e74     16 2F 02 56 |  if_ne	mov	local05, local04
29e78     01 28 06 51 |  if_ne	add	local02, #1
29e7c     18 2C 62 5D |  if_ne	getqx	local04
29e80     D4 FF 9F 5D |  if_ne	jmp	#LR__3600
29e84                 | LR__3601
29e84                 | LR__3602
29e84     20 28 36 F3 | 	fle	local02, #32 wc
29e88     14 13 02 F6 | 	mov	arg01, local02
29e8c     02 12 06 F1 | 	add	arg01, #2
29e90     70 1E B0 FD | 	call	#__system___gc_alloc_managed
29e94     FD 30 02 F6 | 	mov	local06, result1
29e98     14 33 02 F6 | 	mov	local07, local02
29e9c     18 33 02 F1 | 	add	local07, local06
29ea0     19 01 48 FC | 	wrbyte	#0, local07
29ea4     97 1A 48 FB | 	callpa	#(@LR__3604-@LR__3603)>>2,fcache_load_ptr_
29ea8                 | LR__3603
29ea8     01 28 16 F2 | 	cmp	local02, #1 wc
29eac     2C 00 90 CD |  if_b	jmp	#LR__3605
29eb0     15 27 12 FD | 	qdiv	local01, local03
29eb4     01 28 86 F1 | 	sub	local02, #1
29eb8     14 33 02 F6 | 	mov	local07, local02
29ebc     18 33 02 F1 | 	add	local07, local06
29ec0     19 34 62 FD | 	getqy	local08
29ec4     0A 34 16 F2 | 	cmp	local08, #10 wc
29ec8     30 34 06 C1 |  if_b	add	local08, #48
29ecc     37 34 06 31 |  if_ae	add	local08, #55
29ed0     19 35 42 FC | 	wrbyte	local08, local07
29ed4     18 26 62 FD | 	getqx	local01
29ed8     CC FF 9F FD | 	jmp	#LR__3603
29edc                 | LR__3604
29edc                 | LR__3605
29edc     18 FB 01 F6 | 	mov	result1, local06
29ee0     A7 F0 03 F6 | 	mov	ptra, fp
29ee4     B2 00 A0 FD | 	call	#popregs_
29ee8                 | __system__Number_S_ret
29ee8     2D 00 64 FD | 	ret
29eec                 | 
29eec                 | __system__LCase_S
29eec     07 4A 05 F6 | 	mov	COUNT_, #7
29ef0     A8 00 A0 FD | 	call	#pushregs_
29ef4     09 27 02 F6 | 	mov	local01, arg01
29ef8     09 29 02 F6 | 	mov	local02, arg01
29efc     97 06 48 FB | 	callpa	#(@LR__3611-@LR__3610)>>2,fcache_load_ptr_
29f00                 | LR__3610
29f00     14 FB C9 FA | 	rdbyte	result1, local02 wz
29f04     01 28 06 51 |  if_ne	add	local02, #1
29f08     F4 FF 9F 5D |  if_ne	jmp	#LR__3610
29f0c                 | LR__3611
29f0c     09 29 82 F1 | 	sub	local02, arg01
29f10     14 FB 01 F6 | 	mov	result1, local02
29f14     FD 28 0A F6 | 	mov	local02, result1 wz
29f18     BB 01 00 AF 
29f1c     86 FA 05 A6 |  if_e	mov	result1, ##@LR__5517
29f20     7C 00 90 AD |  if_e	jmp	#LR__3617
29f24     14 13 02 F6 | 	mov	arg01, local02
29f28     02 12 06 F1 | 	add	arg01, #2
29f2c     D4 1D B0 FD | 	call	#__system___gc_alloc_managed
29f30     FD 2A 0A F6 | 	mov	local03, result1 wz
29f34     64 00 90 AD |  if_e	jmp	#LR__3616
29f38     01 2C 66 F6 | 	neg	local04, #1
29f3c     97 26 48 FB | 	callpa	#(@LR__3615-@LR__3612)>>2,fcache_load_ptr_
29f40                 | LR__3612
29f40     01 2C 06 F1 | 	add	local04, #1
29f44     16 2F 02 F6 | 	mov	local05, local04
29f48     13 2F 02 F1 | 	add	local05, local01
29f4c     17 31 C2 FA | 	rdbyte	local06, local05
29f50     41 30 56 F2 | 	cmps	local06, #65 wc
29f54     18 00 90 CD |  if_b	jmp	#LR__3613
29f58     5B 30 56 F2 | 	cmps	local06, #91 wc
29f5c     16 33 02 C6 |  if_b	mov	local07, local04
29f60     15 33 02 C1 |  if_b	add	local07, local03
29f64     20 30 06 C1 |  if_b	add	local06, #32
29f68     19 31 42 CC |  if_b	wrbyte	local06, local07
29f6c     0C 00 90 CD |  if_b	jmp	#LR__3614
29f70                 | LR__3613
29f70     16 33 02 F6 | 	mov	local07, local04
29f74     15 33 02 F1 | 	add	local07, local03
29f78     19 31 42 FC | 	wrbyte	local06, local07
29f7c                 | LR__3614
29f7c     14 31 02 F6 | 	mov	local06, local02
29f80     01 30 86 F1 | 	sub	local06, #1
29f84     18 2D 0A F2 | 	cmp	local04, local06 wz
29f88     B4 FF 9F 5D |  if_ne	jmp	#LR__3612
29f8c                 | LR__3615
29f8c     15 29 02 F1 | 	add	local02, local03
29f90     14 01 48 FC | 	wrbyte	#0, local02
29f94     15 FB 01 F6 | 	mov	result1, local03
29f98     04 00 90 FD | 	jmp	#LR__3617
29f9c                 | LR__3616
29f9c     15 FB 01 F6 | 	mov	result1, local03
29fa0                 | LR__3617
29fa0     A7 F0 03 F6 | 	mov	ptra, fp
29fa4     B2 00 A0 FD | 	call	#popregs_
29fa8                 | __system__LCase_S_ret
29fa8     2D 00 64 FD | 	ret
29fac                 | 
29fac                 | __system__LTrim_S
29fac     05 4A 05 F6 | 	mov	COUNT_, #5
29fb0     A8 00 A0 FD | 	call	#pushregs_
29fb4     09 27 02 F6 | 	mov	local01, arg01
29fb8     09 29 02 F6 | 	mov	local02, arg01
29fbc     97 06 48 FB | 	callpa	#(@LR__3621-@LR__3620)>>2,fcache_load_ptr_
29fc0                 | LR__3620
29fc0     14 FB C9 FA | 	rdbyte	result1, local02 wz
29fc4     01 28 06 51 |  if_ne	add	local02, #1
29fc8     F4 FF 9F 5D |  if_ne	jmp	#LR__3620
29fcc                 | LR__3621
29fcc     09 29 82 F1 | 	sub	local02, arg01
29fd0     14 FB 01 F6 | 	mov	result1, local02
29fd4     FD 28 0A F6 | 	mov	local02, result1 wz
29fd8     BB 01 00 AF 
29fdc     87 FA 05 A6 |  if_e	mov	result1, ##@LR__5518
29fe0     7C 00 90 AD |  if_e	jmp	#LR__3626
29fe4     00 2A 06 F6 | 	mov	local03, #0
29fe8     14 2D 02 F6 | 	mov	local04, local02
29fec                 | LR__3622
29fec     16 2B 52 F2 | 	cmps	local03, local04 wc
29ff0     68 00 90 3D |  if_ae	jmp	#LR__3625
29ff4     15 17 02 F6 | 	mov	arg03, local03
29ff8     13 17 02 F1 | 	add	arg03, local01
29ffc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2a000     20 16 0E F2 | 	cmp	arg03, #32 wz
2a004     4C 00 90 AD |  if_e	jmp	#LR__3624
2a008     14 13 02 F6 | 	mov	arg01, local02
2a00c     15 13 82 F1 | 	sub	arg01, local03
2a010     02 12 06 F1 | 	add	arg01, #2
2a014     EC 1C B0 FD | 	call	#__system___gc_alloc_managed
2a018     FD 2E 0A F6 | 	mov	local05, result1 wz
2a01c     2C 00 90 AD |  if_e	jmp	#LR__3623
2a020     15 15 02 F6 | 	mov	arg02, local03
2a024     13 15 02 F1 | 	add	arg02, local01
2a028     14 17 02 F6 | 	mov	arg03, local02
2a02c     15 17 82 F1 | 	sub	arg03, local03
2a030     17 13 02 F6 | 	mov	arg01, local05
2a034     D4 D9 BF FD | 	call	#__system____builtin_memmove
2a038     15 29 82 F1 | 	sub	local02, local03
2a03c     17 29 02 F1 | 	add	local02, local05
2a040     14 01 48 FC | 	wrbyte	#0, local02
2a044     17 FB 01 F6 | 	mov	result1, local05
2a048     14 00 90 FD | 	jmp	#LR__3626
2a04c                 | LR__3623
2a04c     17 FB 01 F6 | 	mov	result1, local05
2a050     0C 00 90 FD | 	jmp	#LR__3626
2a054                 | LR__3624
2a054     01 2A 06 F1 | 	add	local03, #1
2a058     90 FF 9F FD | 	jmp	#LR__3622
2a05c                 | LR__3625
2a05c     13 FB 01 F6 | 	mov	result1, local01
2a060                 | LR__3626
2a060     A7 F0 03 F6 | 	mov	ptra, fp
2a064     B2 00 A0 FD | 	call	#popregs_
2a068                 | __system__LTrim_S_ret
2a068     2D 00 64 FD | 	ret
2a06c                 | 
2a06c                 | __system__RTrim_S
2a06c     04 4A 05 F6 | 	mov	COUNT_, #4
2a070     A8 00 A0 FD | 	call	#pushregs_
2a074     09 27 02 F6 | 	mov	local01, arg01
2a078     09 29 02 F6 | 	mov	local02, arg01
2a07c     97 06 48 FB | 	callpa	#(@LR__3631-@LR__3630)>>2,fcache_load_ptr_
2a080                 | LR__3630
2a080     14 FB C9 FA | 	rdbyte	result1, local02 wz
2a084     01 28 06 51 |  if_ne	add	local02, #1
2a088     F4 FF 9F 5D |  if_ne	jmp	#LR__3630
2a08c                 | LR__3631
2a08c     09 29 82 F1 | 	sub	local02, arg01
2a090     14 FB 01 F6 | 	mov	result1, local02
2a094     FD 28 0A F6 | 	mov	local02, result1 wz
2a098     BB 01 00 AF 
2a09c     88 FA 05 A6 |  if_e	mov	result1, ##@LR__5519
2a0a0     74 00 90 AD |  if_e	jmp	#LR__3635
2a0a4     14 2B 02 F6 | 	mov	local03, local02
2a0a8     01 2A 86 F1 | 	sub	local03, #1
2a0ac                 | LR__3632
2a0ac     15 15 02 F6 | 	mov	arg02, local03
2a0b0     13 15 02 F1 | 	add	arg02, local01
2a0b4     0A 29 C2 FA | 	rdbyte	local02, arg02
2a0b8     20 28 0E F2 | 	cmp	local02, #32 wz
2a0bc     44 00 90 AD |  if_e	jmp	#LR__3634
2a0c0     15 13 02 F6 | 	mov	arg01, local03
2a0c4     02 12 06 F1 | 	add	arg01, #2
2a0c8     38 1C B0 FD | 	call	#__system___gc_alloc_managed
2a0cc     FD 2C 0A F6 | 	mov	local04, result1 wz
2a0d0     28 00 90 AD |  if_e	jmp	#LR__3633
2a0d4     15 17 02 F6 | 	mov	arg03, local03
2a0d8     01 16 06 F1 | 	add	arg03, #1
2a0dc     16 13 02 F6 | 	mov	arg01, local04
2a0e0     13 15 02 F6 | 	mov	arg02, local01
2a0e4     24 D9 BF FD | 	call	#__system____builtin_memmove
2a0e8     01 2A 06 F1 | 	add	local03, #1
2a0ec     16 2B 02 F1 | 	add	local03, local04
2a0f0     15 01 48 FC | 	wrbyte	#0, local03
2a0f4     16 FB 01 F6 | 	mov	result1, local04
2a0f8     1C 00 90 FD | 	jmp	#LR__3635
2a0fc                 | LR__3633
2a0fc     16 FB 01 F6 | 	mov	result1, local04
2a100     14 00 90 FD | 	jmp	#LR__3635
2a104                 | LR__3634
2a104     01 2A 86 F1 | 	sub	local03, #1
2a108     00 2A 56 F2 | 	cmps	local03, #0 wc
2a10c     9C FF 9F 3D |  if_ae	jmp	#LR__3632
2a110     BB 01 00 FF 
2a114     89 FA 05 F6 | 	mov	result1, ##@LR__5520
2a118                 | LR__3635
2a118     A7 F0 03 F6 | 	mov	ptra, fp
2a11c     B2 00 A0 FD | 	call	#popregs_
2a120                 | __system__RTrim_S_ret
2a120     2D 00 64 FD | 	ret
2a124                 | 
2a124                 | __system__Instr
2a124     07 4A 05 F6 | 	mov	COUNT_, #7
2a128     A8 00 A0 FD | 	call	#pushregs_
2a12c     09 27 02 F6 | 	mov	local01, arg01
2a130     0A 29 02 F6 | 	mov	local02, arg02
2a134     0B 2B 02 F6 | 	mov	local03, arg03
2a138     15 13 02 F6 | 	mov	arg01, local03
2a13c     09 2D 02 F6 | 	mov	local04, arg01
2a140     97 06 48 FB | 	callpa	#(@LR__3641-@LR__3640)>>2,fcache_load_ptr_
2a144                 | LR__3640
2a144     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a148     01 2C 06 51 |  if_ne	add	local04, #1
2a14c     F4 FF 9F 5D |  if_ne	jmp	#LR__3640
2a150                 | LR__3641
2a150     09 2D 82 F1 | 	sub	local04, arg01
2a154     16 2F 02 F6 | 	mov	local05, local04
2a158     14 13 02 F6 | 	mov	arg01, local02
2a15c     09 2D 02 F6 | 	mov	local04, arg01
2a160     97 06 48 FB | 	callpa	#(@LR__3643-@LR__3642)>>2,fcache_load_ptr_
2a164                 | LR__3642
2a164     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a168     01 2C 06 51 |  if_ne	add	local04, #1
2a16c     F4 FF 9F 5D |  if_ne	jmp	#LR__3642
2a170                 | LR__3643
2a170     09 2D 82 F1 | 	sub	local04, arg01
2a174     16 FB 01 F6 | 	mov	result1, local04
2a178     FD 18 0A F6 | 	mov	arg04, result1 wz
2a17c     00 FA 05 A6 |  if_e	mov	result1, #0
2a180     98 00 90 AD |  if_e	jmp	#LR__3647
2a184     00 2E 0E F2 | 	cmp	local05, #0 wz
2a188     00 FA 05 A6 |  if_e	mov	result1, #0
2a18c     8C 00 90 AD |  if_e	jmp	#LR__3647
2a190     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2a194     00 FA 05 16 |  if_a	mov	result1, #0
2a198     80 00 90 1D |  if_a	jmp	#LR__3647
2a19c     01 26 56 F2 | 	cmps	local01, #1 wc
2a1a0     01 26 06 C6 |  if_b	mov	local01, #1
2a1a4     15 31 C2 FA | 	rdbyte	local06, local03
2a1a8     01 2E 0E F2 | 	cmp	local05, #1 wz
2a1ac     18 00 90 5D |  if_ne	jmp	#LR__3644
2a1b0     14 13 02 F6 | 	mov	arg01, local02
2a1b4     18 15 02 F6 | 	mov	arg02, local06
2a1b8     13 17 02 F6 | 	mov	arg03, local01
2a1bc     00 18 06 F6 | 	mov	arg04, #0
2a1c0     20 37 B0 FD | 	call	#__system____ScanForChar
2a1c4     54 00 90 FD | 	jmp	#LR__3647
2a1c8                 | LR__3644
2a1c8     13 33 02 F6 | 	mov	local07, local01
2a1cc                 | LR__3645
2a1cc     14 13 02 F6 | 	mov	arg01, local02
2a1d0     18 15 02 F6 | 	mov	arg02, local06
2a1d4     19 17 02 F6 | 	mov	arg03, local07
2a1d8     00 18 06 F6 | 	mov	arg04, #0
2a1dc     04 37 B0 FD | 	call	#__system____ScanForChar
2a1e0     FD 32 0A F6 | 	mov	local07, result1 wz
2a1e4     30 00 90 AD |  if_e	jmp	#LR__3646
2a1e8     17 17 02 F6 | 	mov	arg03, local05
2a1ec     14 13 02 F6 | 	mov	arg01, local02
2a1f0     19 15 02 F6 | 	mov	arg02, local07
2a1f4     FC FA BF FD | 	call	#__system__Mid_S
2a1f8     FD 12 02 F6 | 	mov	arg01, result1
2a1fc     15 15 02 F6 | 	mov	arg02, local03
2a200     80 D9 BF FD | 	call	#__system___string_cmp
2a204     00 FA 0D F2 | 	cmp	result1, #0 wz
2a208     19 FB 01 A6 |  if_e	mov	result1, local07
2a20c     0C 00 90 AD |  if_e	jmp	#LR__3647
2a210     17 33 02 F1 | 	add	local07, local05
2a214     B4 FF 9F FD | 	jmp	#LR__3645
2a218                 | LR__3646
2a218     00 FA 05 F6 | 	mov	result1, #0
2a21c                 | LR__3647
2a21c     A7 F0 03 F6 | 	mov	ptra, fp
2a220     B2 00 A0 FD | 	call	#popregs_
2a224                 | __system__Instr_ret
2a224     2D 00 64 FD | 	ret
2a228                 | 
2a228                 | __system__InstrRev
2a228     07 4A 05 F6 | 	mov	COUNT_, #7
2a22c     A8 00 A0 FD | 	call	#pushregs_
2a230     09 27 02 F6 | 	mov	local01, arg01
2a234     0A 29 02 F6 | 	mov	local02, arg02
2a238     0B 2B 02 F6 | 	mov	local03, arg03
2a23c     15 13 02 F6 | 	mov	arg01, local03
2a240     09 2D 02 F6 | 	mov	local04, arg01
2a244     97 06 48 FB | 	callpa	#(@LR__3651-@LR__3650)>>2,fcache_load_ptr_
2a248                 | LR__3650
2a248     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a24c     01 2C 06 51 |  if_ne	add	local04, #1
2a250     F4 FF 9F 5D |  if_ne	jmp	#LR__3650
2a254                 | LR__3651
2a254     09 2D 82 F1 | 	sub	local04, arg01
2a258     16 2F 02 F6 | 	mov	local05, local04
2a25c     14 13 02 F6 | 	mov	arg01, local02
2a260     09 2D 02 F6 | 	mov	local04, arg01
2a264     97 06 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
2a268                 | LR__3652
2a268     16 FB C9 FA | 	rdbyte	result1, local04 wz
2a26c     01 2C 06 51 |  if_ne	add	local04, #1
2a270     F4 FF 9F 5D |  if_ne	jmp	#LR__3652
2a274                 | LR__3653
2a274     09 2D 82 F1 | 	sub	local04, arg01
2a278     16 FB 01 F6 | 	mov	result1, local04
2a27c     FD 18 0A F6 | 	mov	arg04, result1 wz
2a280     00 FA 05 A6 |  if_e	mov	result1, #0
2a284     98 00 90 AD |  if_e	jmp	#LR__3657
2a288     00 2E 0E F2 | 	cmp	local05, #0 wz
2a28c     00 FA 05 A6 |  if_e	mov	result1, #0
2a290     8C 00 90 AD |  if_e	jmp	#LR__3657
2a294     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2a298     0C 27 02 16 |  if_a	mov	local01, arg04
2a29c     01 26 56 F2 | 	cmps	local01, #1 wc
2a2a0     01 26 06 C6 |  if_b	mov	local01, #1
2a2a4     15 31 C2 FA | 	rdbyte	local06, local03
2a2a8     01 2E 0E F2 | 	cmp	local05, #1 wz
2a2ac     18 00 90 5D |  if_ne	jmp	#LR__3654
2a2b0     14 13 02 F6 | 	mov	arg01, local02
2a2b4     18 15 02 F6 | 	mov	arg02, local06
2a2b8     13 17 02 F6 | 	mov	arg03, local01
2a2bc     01 18 06 F6 | 	mov	arg04, #1
2a2c0     20 36 B0 FD | 	call	#__system____ScanForChar
2a2c4     58 00 90 FD | 	jmp	#LR__3657
2a2c8                 | LR__3654
2a2c8     17 33 02 F6 | 	mov	local07, local05
2a2cc     01 32 86 F1 | 	sub	local07, #1
2a2d0                 | LR__3655
2a2d0     14 13 02 F6 | 	mov	arg01, local02
2a2d4     18 15 02 F6 | 	mov	arg02, local06
2a2d8     19 17 02 F6 | 	mov	arg03, local07
2a2dc     01 18 06 F6 | 	mov	arg04, #1
2a2e0     00 36 B0 FD | 	call	#__system____ScanForChar
2a2e4     FD 32 0A F6 | 	mov	local07, result1 wz
2a2e8     30 00 90 AD |  if_e	jmp	#LR__3656
2a2ec     17 17 02 F6 | 	mov	arg03, local05
2a2f0     14 13 02 F6 | 	mov	arg01, local02
2a2f4     19 15 02 F6 | 	mov	arg02, local07
2a2f8     F8 F9 BF FD | 	call	#__system__Mid_S
2a2fc     FD 12 02 F6 | 	mov	arg01, result1
2a300     15 15 02 F6 | 	mov	arg02, local03
2a304     7C D8 BF FD | 	call	#__system___string_cmp
2a308     00 FA 0D F2 | 	cmp	result1, #0 wz
2a30c     19 FB 01 A6 |  if_e	mov	result1, local07
2a310     0C 00 90 AD |  if_e	jmp	#LR__3657
2a314     17 33 82 F1 | 	sub	local07, local05
2a318     B4 FF 9F FD | 	jmp	#LR__3655
2a31c                 | LR__3656
2a31c     00 FA 05 F6 | 	mov	result1, #0
2a320                 | LR__3657
2a320     A7 F0 03 F6 | 	mov	ptra, fp
2a324     B2 00 A0 FD | 	call	#popregs_
2a328                 | __system__InstrRev_ret
2a328     2D 00 64 FD | 	ret
2a32c                 | 
2a32c                 | __system___remove
2a32c     06 4A 05 F6 | 	mov	COUNT_, #6
2a330     A8 00 A0 FD | 	call	#pushregs_
2a334     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a338     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2a33c     09 15 02 F6 | 	mov	arg02, arg01
2a340     13 13 02 F6 | 	mov	arg01, local01
2a344     00 16 06 F6 | 	mov	arg03, #0
2a348     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a34c     A4 DF BF FD | 	call	#__system____getvfsforfile
2a350     FD 28 0A F6 | 	mov	local02, result1 wz
2a354     10 00 90 AD |  if_e	jmp	#LR__3660
2a358     20 28 06 F1 | 	add	local02, #32
2a35c     14 13 0A FB | 	rdlong	arg01, local02 wz
2a360     20 28 86 F1 | 	sub	local02, #32
2a364     14 00 90 5D |  if_ne	jmp	#LR__3661
2a368                 | LR__3660
2a368     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a36c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a370     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a374     01 FA 65 F6 | 	neg	result1, #1
2a378     A8 00 90 FD | 	jmp	#LR__3664
2a37c                 | LR__3661
2a37c     40 28 06 F1 | 	add	local02, #64
2a380     14 2B 02 FB | 	rdlong	local03, local02
2a384     15 2D 02 F6 | 	mov	local04, local03
2a388     40 28 86 F1 | 	sub	local02, #64
2a38c     13 2C 46 F7 | 	zerox	local04, #19
2a390     14 2A 46 F0 | 	shr	local03, #20
2a394     02 2A 66 F0 | 	shl	local03, #2
2a398     ED 2A 02 F1 | 	add	local03, __methods__
2a39c     15 2B 02 FB | 	rdlong	local03, local03
2a3a0     13 13 02 F6 | 	mov	arg01, local01
2a3a4     F2 2E 02 F6 | 	mov	local05, objptr
2a3a8     16 E5 01 F6 | 	mov	objptr, local04
2a3ac     2D 2A 62 FD | 	call	local03
2a3b0     17 E5 01 F6 | 	mov	objptr, local05
2a3b4     FD 30 02 F6 | 	mov	local06, result1
2a3b8     FF FF 7F FF 
2a3bc     F2 31 0E F2 | 	cmp	local06, ##-14 wz
2a3c0     38 00 90 5D |  if_ne	jmp	#LR__3662
2a3c4     3C 28 06 F1 | 	add	local02, #60
2a3c8     14 31 02 FB | 	rdlong	local06, local02
2a3cc     18 2B 02 F6 | 	mov	local03, local06
2a3d0     13 30 46 F7 | 	zerox	local06, #19
2a3d4     14 2A 46 F0 | 	shr	local03, #20
2a3d8     02 2A 66 F0 | 	shl	local03, #2
2a3dc     ED 2A 02 F1 | 	add	local03, __methods__
2a3e0     15 2B 02 FB | 	rdlong	local03, local03
2a3e4     13 13 02 F6 | 	mov	arg01, local01
2a3e8     F2 2E 02 F6 | 	mov	local05, objptr
2a3ec     18 E5 01 F6 | 	mov	objptr, local06
2a3f0     2D 2A 62 FD | 	call	local03
2a3f4     17 E5 01 F6 | 	mov	objptr, local05
2a3f8     FD 30 02 F6 | 	mov	local06, result1
2a3fc                 | LR__3662
2a3fc     00 30 0E F2 | 	cmp	local06, #0 wz
2a400     1C 00 90 AD |  if_e	jmp	#LR__3663
2a404     18 13 6A F6 | 	neg	arg01, local06 wz
2a408     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a40c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a410     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a414     01 FA 65 56 |  if_ne	neg	result1, #1
2a418     00 FA 05 A6 |  if_e	mov	result1, #0
2a41c     04 00 90 FD | 	jmp	#LR__3664
2a420                 | LR__3663
2a420     00 FA 05 F6 | 	mov	result1, #0
2a424                 | LR__3664
2a424     A7 F0 03 F6 | 	mov	ptra, fp
2a428     B2 00 A0 FD | 	call	#popregs_
2a42c                 | __system___remove_ret
2a42c     2D 00 64 FD | 	ret
2a430                 | 
2a430                 | __system___mkdir
2a430     05 4A 05 F6 | 	mov	COUNT_, #5
2a434     A8 00 A0 FD | 	call	#pushregs_
2a438     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a43c     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2a440     09 15 02 F6 | 	mov	arg02, arg01
2a444     13 13 02 F6 | 	mov	arg01, local01
2a448     00 16 06 F6 | 	mov	arg03, #0
2a44c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a450     A0 DE BF FD | 	call	#__system____getvfsforfile
2a454     FD 28 0A F6 | 	mov	local02, result1 wz
2a458     10 00 90 AD |  if_e	jmp	#LR__3670
2a45c     20 28 06 F1 | 	add	local02, #32
2a460     14 15 0A FB | 	rdlong	arg02, local02 wz
2a464     20 28 86 F1 | 	sub	local02, #32
2a468     14 00 90 5D |  if_ne	jmp	#LR__3671
2a46c                 | LR__3670
2a46c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a470     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a474     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a478     01 FA 65 F6 | 	neg	result1, #1
2a47c     60 00 90 FD | 	jmp	#LR__3673
2a480                 | LR__3671
2a480     38 28 06 F1 | 	add	local02, #56
2a484     14 2B 02 FB | 	rdlong	local03, local02
2a488     15 2D 02 F6 | 	mov	local04, local03
2a48c     13 2A 46 F7 | 	zerox	local03, #19
2a490     14 2C 46 F0 | 	shr	local04, #20
2a494     02 2C 66 F0 | 	shl	local04, #2
2a498     ED 2C 02 F1 | 	add	local04, __methods__
2a49c     16 2D 02 FB | 	rdlong	local04, local04
2a4a0     13 13 02 F6 | 	mov	arg01, local01
2a4a4     FF 15 06 F6 | 	mov	arg02, #511
2a4a8     F2 2E 02 F6 | 	mov	local05, objptr
2a4ac     15 E5 01 F6 | 	mov	objptr, local03
2a4b0     2D 2C 62 FD | 	call	local04
2a4b4     17 E5 01 F6 | 	mov	objptr, local05
2a4b8     FD 12 0A F6 | 	mov	arg01, result1 wz
2a4bc     1C 00 90 AD |  if_e	jmp	#LR__3672
2a4c0     09 13 6A F6 | 	neg	arg01, arg01 wz
2a4c4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a4c8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2a4cc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a4d0     01 FA 65 56 |  if_ne	neg	result1, #1
2a4d4     00 FA 05 A6 |  if_e	mov	result1, #0
2a4d8     04 00 90 FD | 	jmp	#LR__3673
2a4dc                 | LR__3672
2a4dc     00 FA 05 F6 | 	mov	result1, #0
2a4e0                 | LR__3673
2a4e0     A7 F0 03 F6 | 	mov	ptra, fp
2a4e4     B2 00 A0 FD | 	call	#popregs_
2a4e8                 | __system___mkdir_ret
2a4e8     2D 00 64 FD | 	ret
2a4ec                 | 
2a4ec                 | __system___strerror
2a4ec     00 12 56 F2 | 	cmps	arg01, #0 wc
2a4f0     08 00 90 CD |  if_b	jmp	#LR__3680
2a4f4     1A 12 56 F2 | 	cmps	arg01, #26 wc
2a4f8     04 00 90 CD |  if_b	jmp	#LR__3681
2a4fc                 | LR__3680
2a4fc     19 12 06 F6 | 	mov	arg01, #25
2a500                 | LR__3681
2a500     02 12 66 F0 | 	shl	arg01, #2
2a504     01 00 00 FF 
2a508     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
2a50c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2a510     09 FB 01 FB | 	rdlong	result1, arg01
2a514     01 00 00 FF 
2a518     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
2a51c                 | __system___strerror_ret
2a51c     2D 00 64 FD | 	ret
2a520                 | 
2a520                 | __system___int64_shl
2a520     20 16 CE F7 | 	test	arg03, #32 wz
2a524     09 15 02 56 |  if_ne	mov	arg02, arg01
2a528     00 12 06 56 |  if_ne	mov	arg01, #0
2a52c     1F 16 CE F7 | 	test	arg03, #31 wz
2a530     18 00 90 AD |  if_e	jmp	#LR__3690
2a534     0B 15 62 F0 | 	shl	arg02, arg03
2a538     09 FB 01 F6 | 	mov	result1, arg01
2a53c     0B FD 61 F6 | 	neg	result2, arg03
2a540     FE FA 41 F0 | 	shr	result1, result2
2a544     FD 14 42 F5 | 	or	arg02, result1
2a548     0B 13 62 F0 | 	shl	arg01, arg03
2a54c                 | LR__3690
2a54c     0A FD 01 F6 | 	mov	result2, arg02
2a550     09 FB 01 F6 | 	mov	result1, arg01
2a554                 | __system___int64_shl_ret
2a554     2D 00 64 FD | 	ret
2a558                 | 
2a558                 | __system___usepins
2a558     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2a55c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2a560     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
2a564     00 13 CA F7 | 	test	arg01, _var01 wz
2a568     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
2a56c     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
2a570     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
2a574     01 15 CA A7 |  if_e	test	arg02, _var02 wz
2a578     00 FA 05 56 |  if_ne	mov	result1, #0
2a57c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
2a580     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2a584     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2a588     09 03 42 F5 | 	or	_var02, arg01
2a58c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2a590     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2a594     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2a598     0A 03 42 F5 | 	or	_var02, arg02
2a59c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2a5a0     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2a5a4     01 FA 65 F6 | 	neg	result1, #1
2a5a8                 | __system___usepins_ret
2a5a8     2D 00 64 FD | 	ret
2a5ac                 | 
2a5ac                 | __system___freepins
2a5ac     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2a5b0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2a5b4     09 01 22 F5 | 	andn	_var01, arg01
2a5b8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2a5bc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2a5c0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2a5c4     0A 01 22 F5 | 	andn	_var01, arg02
2a5c8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
2a5cc     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2a5d0                 | __system___freepins_ret
2a5d0     2D 00 64 FD | 	ret
2a5d4                 | 
2a5d4                 | __system___float_fromuns
2a5d4     09 17 0A F6 | 	mov	arg03, arg01 wz
2a5d8     0B FB 01 A6 |  if_e	mov	result1, arg03
2a5dc     24 00 90 AD |  if_e	jmp	#LR__3700
2a5e0     0B 15 92 F7 | 	encod	arg02, arg03 wc
2a5e4     01 14 06 C1 |  if_b	add	arg02, #1
2a5e8     01 14 86 F1 | 	sub	arg02, #1
2a5ec     1F 12 06 F6 | 	mov	arg01, #31
2a5f0     0A 13 82 F1 | 	sub	arg01, arg02
2a5f4     09 17 62 F0 | 	shl	arg03, arg01
2a5f8     02 16 46 F0 | 	shr	arg03, #2
2a5fc     00 12 06 F6 | 	mov	arg01, #0
2a600     4C 09 B0 FD | 	call	#__system___float_Pack
2a604                 | LR__3700
2a604                 | __system___float_fromuns_ret
2a604     2D 00 64 FD | 	ret
2a608                 | 
2a608                 | __system___float_add
2a608     0F 4A 05 F6 | 	mov	COUNT_, #15
2a60c     A8 00 A0 FD | 	call	#pushregs_
2a610     09 27 02 F6 | 	mov	local01, arg01
2a614     0A 29 02 F6 | 	mov	local02, arg02
2a618     00 2A 06 F6 | 	mov	local03, #0
2a61c     13 2D 02 F6 | 	mov	local04, local01
2a620     16 2F 02 F6 | 	mov	local05, local04
2a624     16 2E 46 F7 | 	zerox	local05, #22
2a628     16 31 02 F6 | 	mov	local06, local04
2a62c     01 30 66 F0 | 	shl	local06, #1
2a630     18 30 46 F0 | 	shr	local06, #24
2a634     1F 2C 46 F0 | 	shr	local04, #31
2a638     14 13 02 F6 | 	mov	arg01, local02
2a63c     09 FB 01 F6 | 	mov	result1, arg01
2a640     FD 32 02 F6 | 	mov	local07, result1
2a644     19 35 02 F6 | 	mov	local08, local07
2a648     16 34 46 F7 | 	zerox	local08, #22
2a64c     19 37 02 F6 | 	mov	local09, local07
2a650     01 36 66 F0 | 	shl	local09, #1
2a654     18 36 46 F0 | 	shr	local09, #24
2a658     1B 39 02 F6 | 	mov	local10, local09
2a65c     1F 32 46 F0 | 	shr	local07, #31
2a660     00 3A 06 F6 | 	mov	local11, #0
2a664     00 3C 06 F6 | 	mov	local12, #0
2a668     1C 31 12 F2 | 	cmp	local06, local10 wc
2a66c     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
2a670     2C 00 90 1D |  if_a	jmp	#LR__3710
2a674     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
2a678     24 00 90 3D |  if_ae	jmp	#LR__3710
2a67c     17 3F 02 F6 | 	mov	local13, local05
2a680     1A 2F 02 F6 | 	mov	local05, local08
2a684     1F 35 02 F6 | 	mov	local08, local13
2a688     18 3F 02 F6 | 	mov	local13, local06
2a68c     1C 31 02 F6 | 	mov	local06, local10
2a690     1F 39 02 F6 | 	mov	local10, local13
2a694     16 3F 02 F6 | 	mov	local13, local04
2a698     19 2D 02 F6 | 	mov	local04, local07
2a69c     1F 33 02 F6 | 	mov	local07, local13
2a6a0                 | LR__3710
2a6a0     FF 30 0E F2 | 	cmp	local06, #255 wz
2a6a4     70 01 90 AD |  if_e	jmp	#LR__3725
2a6a8     00 30 0E F2 | 	cmp	local06, #0 wz
2a6ac     AC 01 90 AD |  if_e	jmp	#LR__3727
2a6b0     17 2E 26 F4 | 	bith	local05, #23
2a6b4                 | LR__3711
2a6b4     00 38 0E F2 | 	cmp	local10, #0 wz
2a6b8     F0 01 90 AD |  if_e	jmp	#LR__3731
2a6bc     17 34 26 F4 | 	bith	local08, #23
2a6c0                 | LR__3712
2a6c0     7F 30 86 F1 | 	sub	local06, #127
2a6c4     7F 38 86 F1 | 	sub	local10, #127
2a6c8     18 41 02 F6 | 	mov	local14, local06
2a6cc     1C 41 82 F1 | 	sub	local14, local10
2a6d0     97 14 48 FB | 	callpa	#(@LR__3714-@LR__3713)>>2,fcache_load_ptr_
2a6d4                 | LR__3713
2a6d4     20 40 56 F2 | 	cmps	local14, #32 wc
2a6d8     20 00 90 CD |  if_b	jmp	#LR__3715
2a6dc     1A 37 02 F6 | 	mov	local09, local08
2a6e0     00 3A 0E F2 | 	cmp	local11, #0 wz
2a6e4     6F 3A 62 FD | 	wrnz	local11
2a6e8     1D 37 42 F5 | 	or	local09, local11
2a6ec     1B 3B 02 F6 | 	mov	local11, local09
2a6f0     00 34 06 F6 | 	mov	local08, #0
2a6f4     20 40 86 F1 | 	sub	local14, #32
2a6f8     D8 FF 9F FD | 	jmp	#LR__3713
2a6fc                 | LR__3714
2a6fc                 | LR__3715
2a6fc     00 40 0E F2 | 	cmp	local14, #0 wz
2a700     38 00 90 AD |  if_e	jmp	#LR__3716
2a704     1A 3F 02 F6 | 	mov	local13, local08
2a708     20 38 06 F6 | 	mov	local10, #32
2a70c     20 39 82 F1 | 	sub	local10, local14
2a710     1C 3F 62 F0 | 	shl	local13, local10
2a714     1D 39 02 F6 | 	mov	local10, local11
2a718     20 36 06 F6 | 	mov	local09, #32
2a71c     20 37 82 F1 | 	sub	local09, local14
2a720     1B 39 6A F0 | 	shl	local10, local09 wz
2a724     20 3B 42 F0 | 	shr	local11, local14
2a728     20 35 42 F0 | 	shr	local08, local14
2a72c     1F 3B 42 F5 | 	or	local11, local13
2a730     00 42 06 F6 | 	mov	local15, #0
2a734     01 42 06 56 |  if_ne	mov	local15, #1
2a738     21 3B 42 F5 | 	or	local11, local15
2a73c                 | LR__3716
2a73c     16 43 02 F6 | 	mov	local15, local04
2a740     19 43 62 F5 | 	xor	local15, local07
2a744     01 42 CE F7 | 	test	local15, #1 wz
2a748     18 00 90 AD |  if_e	jmp	#LR__3717
2a74c     1A 35 22 F6 | 	not	local08, local08
2a750     1D 3B 22 F6 | 	not	local11, local11
2a754     01 3A 0E F1 | 	add	local11, #1 wz
2a758     00 42 06 F6 | 	mov	local15, #0
2a75c     01 42 06 A6 |  if_e	mov	local15, #1
2a760     21 35 02 F1 | 	add	local08, local15
2a764                 | LR__3717
2a764     1D 3D 12 F1 | 	add	local12, local11 wc
2a768     1A 2F 22 F1 | 	addx	local05, local08
2a76c     00 2E 56 F2 | 	cmps	local05, #0 wc
2a770     1C 00 90 3D |  if_ae	jmp	#LR__3718
2a774     01 2C 66 F5 | 	xor	local04, #1
2a778     17 2F 22 F6 | 	not	local05, local05
2a77c     1E 3D 22 F6 | 	not	local12, local12
2a780     01 3C 0E F1 | 	add	local12, #1 wz
2a784     00 42 06 F6 | 	mov	local15, #0
2a788     01 42 06 A6 |  if_e	mov	local15, #1
2a78c     21 2F 02 F1 | 	add	local05, local15
2a790                 | LR__3718
2a790     00 80 00 FF 
2a794     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
2a798     28 00 90 CD |  if_b	jmp	#LR__3719
2a79c     01 30 06 F1 | 	add	local06, #1
2a7a0     1E 41 02 F6 | 	mov	local14, local12
2a7a4     01 40 06 F5 | 	and	local14, #1
2a7a8     01 3C 46 F0 | 	shr	local12, #1
2a7ac     17 43 02 F6 | 	mov	local15, local05
2a7b0     1F 42 66 F0 | 	shl	local15, #31
2a7b4     21 3D 42 F5 | 	or	local12, local15
2a7b8     20 3D 42 F5 | 	or	local12, local14
2a7bc     01 2E 46 F0 | 	shr	local05, #1
2a7c0     3C 00 90 FD | 	jmp	#LR__3724
2a7c4                 | LR__3719
2a7c4     00 40 00 FF 
2a7c8     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2a7cc     30 00 90 3D |  if_ae	jmp	#LR__3723
2a7d0     00 2E 0E F2 | 	cmp	local05, #0 wz
2a7d4     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
2a7d8     08 2C 46 A5 |  if_e	or	local04, #8
2a7dc     01 2C 26 A5 |  if_e	andn	local04, #1
2a7e0     1C 00 90 AD |  if_e	jmp	#LR__3722
2a7e4                 | LR__3720
2a7e4     00 40 00 FF 
2a7e8     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2a7ec     10 00 90 3D |  if_ae	jmp	#LR__3721
2a7f0     1E 3D 12 F1 | 	add	local12, local12 wc
2a7f4     17 2F 22 F1 | 	addx	local05, local05
2a7f8     01 30 86 F1 | 	sub	local06, #1
2a7fc     E4 FF 9F FD | 	jmp	#LR__3720
2a800                 | LR__3721
2a800                 | LR__3722
2a800                 | LR__3723
2a800                 | LR__3724
2a800     17 13 02 F6 | 	mov	arg01, local05
2a804     1E 15 02 F6 | 	mov	arg02, local12
2a808     18 17 02 F6 | 	mov	arg03, local06
2a80c     16 19 02 F6 | 	mov	arg04, local04
2a810     14 35 B0 FD | 	call	#__system__pack_0695
2a814     DC 00 90 FD | 	jmp	#LR__3735
2a818                 | LR__3725
2a818     FF 38 0E F2 | 	cmp	local10, #255 wz
2a81c     10 00 90 5D |  if_ne	jmp	#LR__3726
2a820     16 33 0A F2 | 	cmp	local07, local04 wz
2a824     00 F8 3F 5F 
2a828     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2a82c     C4 00 90 5D |  if_ne	jmp	#LR__3735
2a830                 | LR__3726
2a830     00 2E 0E F2 | 	cmp	local05, #0 wz
2a834     00 F8 3F 5F 
2a838     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2a83c     B4 00 90 5D |  if_ne	jmp	#LR__3735
2a840     1E 15 02 F6 | 	mov	arg02, local12
2a844     18 17 02 F6 | 	mov	arg03, local06
2a848     16 19 02 F6 | 	mov	arg04, local04
2a84c     02 18 46 F5 | 	or	arg04, #2
2a850     17 13 02 F6 | 	mov	arg01, local05
2a854     D0 34 B0 FD | 	call	#__system__pack_0695
2a858     98 00 90 FD | 	jmp	#LR__3735
2a85c                 | LR__3727
2a85c     00 2E 0E F2 | 	cmp	local05, #0 wz
2a860     28 00 90 AD |  if_e	jmp	#LR__3730
2a864     01 2E 66 F0 | 	shl	local05, #1
2a868     97 0E 48 FB | 	callpa	#(@LR__3729-@LR__3728)>>2,fcache_load_ptr_
2a86c                 | LR__3728
2a86c     00 40 00 FF 
2a870     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2a874     18 43 02 C6 |  if_b	mov	local15, local06
2a878     01 42 86 C1 |  if_b	sub	local15, #1
2a87c     21 31 02 C6 |  if_b	mov	local06, local15
2a880     01 2E 66 C0 |  if_b	shl	local05, #1
2a884     E4 FF 9F CD |  if_b	jmp	#LR__3728
2a888                 | LR__3729
2a888     28 FE 9F FD | 	jmp	#LR__3711
2a88c                 | LR__3730
2a88c     19 2D 02 F5 | 	and	local04, local07
2a890     16 19 02 F6 | 	mov	arg04, local04
2a894     08 18 46 F5 | 	or	arg04, #8
2a898     00 12 06 F6 | 	mov	arg01, #0
2a89c     00 14 06 F6 | 	mov	arg02, #0
2a8a0     00 16 06 F6 | 	mov	arg03, #0
2a8a4     80 34 B0 FD | 	call	#__system__pack_0695
2a8a8     48 00 90 FD | 	jmp	#LR__3735
2a8ac                 | LR__3731
2a8ac     00 34 0E F2 | 	cmp	local08, #0 wz
2a8b0     28 00 90 AD |  if_e	jmp	#LR__3734
2a8b4     01 34 66 F0 | 	shl	local08, #1
2a8b8     97 0E 48 FB | 	callpa	#(@LR__3733-@LR__3732)>>2,fcache_load_ptr_
2a8bc                 | LR__3732
2a8bc     00 40 00 FF 
2a8c0     00 34 16 F2 | 	cmp	local08, ##8388608 wc
2a8c4     1C 43 02 C6 |  if_b	mov	local15, local10
2a8c8     01 42 86 C1 |  if_b	sub	local15, #1
2a8cc     21 39 02 C6 |  if_b	mov	local10, local15
2a8d0     01 34 66 C0 |  if_b	shl	local08, #1
2a8d4     E4 FF 9F CD |  if_b	jmp	#LR__3732
2a8d8                 | LR__3733
2a8d8     E4 FD 9F FD | 	jmp	#LR__3712
2a8dc                 | LR__3734
2a8dc     7F 30 86 F1 | 	sub	local06, #127
2a8e0     17 13 02 F6 | 	mov	arg01, local05
2a8e4     1E 15 02 F6 | 	mov	arg02, local12
2a8e8     18 17 02 F6 | 	mov	arg03, local06
2a8ec     16 19 02 F6 | 	mov	arg04, local04
2a8f0     34 34 B0 FD | 	call	#__system__pack_0695
2a8f4                 | LR__3735
2a8f4     A7 F0 03 F6 | 	mov	ptra, fp
2a8f8     B2 00 A0 FD | 	call	#popregs_
2a8fc                 | __system___float_add_ret
2a8fc     2D 00 64 FD | 	ret
2a900                 | 
2a900                 | __system___float_sqrt
2a900     04 4A 05 F6 | 	mov	COUNT_, #4
2a904     A8 00 A0 FD | 	call	#pushregs_
2a908     09 27 02 F6 | 	mov	local01, arg01
2a90c     09 FB 01 F6 | 	mov	result1, arg01
2a910     FD 28 02 F6 | 	mov	local02, result1
2a914     14 2B 02 F6 | 	mov	local03, local02
2a918     16 2A 46 F7 | 	zerox	local03, #22
2a91c     14 2D 02 F6 | 	mov	local04, local02
2a920     01 2C 66 F0 | 	shl	local04, #1
2a924     18 2C 4E F0 | 	shr	local04, #24 wz
2a928     1F 28 46 F0 | 	shr	local02, #31
2a92c     70 00 90 AD |  if_e	jmp	#LR__3741
2a930     17 2A 26 F4 | 	bith	local03, #23
2a934                 | LR__3740
2a934     00 28 0E F2 | 	cmp	local02, #0 wz
2a938     00 F8 3F 5F 
2a93c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2a940     88 00 90 5D |  if_ne	jmp	#LR__3744
2a944     FF 2C 0E F2 | 	cmp	local04, #255 wz
2a948     13 FB 01 A6 |  if_e	mov	result1, local01
2a94c     7C 00 90 AD |  if_e	jmp	#LR__3744
2a950     7F 2C 86 F1 | 	sub	local04, #127
2a954     01 2C CE F7 | 	test	local04, #1 wz
2a958     01 2A 66 50 |  if_ne	shl	local03, #1
2a95c     05 2A 66 F0 | 	shl	local03, #5
2a960     15 01 38 FD | 	qsqrt	#0, local03
2a964     01 2C 86 51 |  if_ne	sub	local04, #1
2a968     16 2D 52 F6 | 	abs	local04, local04 wc
2a96c     01 2C 46 F0 | 	shr	local04, #1
2a970     16 17 82 F6 | 	negc	arg03, local04
2a974     14 19 02 F6 | 	mov	arg04, local02
2a978     18 12 62 FD | 	getqx	arg01
2a97c     09 15 02 F6 | 	mov	arg02, arg01
2a980     19 14 66 F0 | 	shl	arg02, #25
2a984     07 12 46 F0 | 	shr	arg01, #7
2a988     00 80 00 FF 
2a98c     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
2a990     01 16 06 31 |  if_ae	add	arg03, #1
2a994     01 12 46 30 |  if_ae	shr	arg01, #1
2a998     8C 33 B0 FD | 	call	#__system__pack_0695
2a99c     2C 00 90 FD | 	jmp	#LR__3744
2a9a0                 | LR__3741
2a9a0     00 2A 0E F2 | 	cmp	local03, #0 wz
2a9a4     13 FB 01 A6 |  if_e	mov	result1, local01
2a9a8     20 00 90 AD |  if_e	jmp	#LR__3744
2a9ac     01 2A 66 F0 | 	shl	local03, #1
2a9b0     97 0A 48 FB | 	callpa	#(@LR__3743-@LR__3742)>>2,fcache_load_ptr_
2a9b4                 | LR__3742
2a9b4     00 40 00 FF 
2a9b8     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
2a9bc     01 2C 86 C1 |  if_b	sub	local04, #1
2a9c0     01 2A 66 C0 |  if_b	shl	local03, #1
2a9c4     EC FF 9F CD |  if_b	jmp	#LR__3742
2a9c8                 | LR__3743
2a9c8     68 FF 9F FD | 	jmp	#LR__3740
2a9cc                 | LR__3744
2a9cc     A7 F0 03 F6 | 	mov	ptra, fp
2a9d0     B2 00 A0 FD | 	call	#popregs_
2a9d4                 | __system___float_sqrt_ret
2a9d4     2D 00 64 FD | 	ret
2a9d8                 | 
2a9d8                 | __system___float_mul
2a9d8     0B 4A 05 F6 | 	mov	COUNT_, #11
2a9dc     A8 00 A0 FD | 	call	#pushregs_
2a9e0     09 27 02 F6 | 	mov	local01, arg01
2a9e4     0A 29 02 F6 | 	mov	local02, arg02
2a9e8     13 2B 02 F6 | 	mov	local03, local01
2a9ec     15 2D 02 F6 | 	mov	local04, local03
2a9f0     16 2C 46 F7 | 	zerox	local04, #22
2a9f4     15 2F 02 F6 | 	mov	local05, local03
2a9f8     01 2E 66 F0 | 	shl	local05, #1
2a9fc     18 2E 46 F0 | 	shr	local05, #24
2aa00     1F 2A 46 F0 | 	shr	local03, #31
2aa04     14 FB 01 F6 | 	mov	result1, local02
2aa08     FD 30 02 F6 | 	mov	local06, result1
2aa0c     18 33 02 F6 | 	mov	local07, local06
2aa10     16 32 46 F7 | 	zerox	local07, #22
2aa14     18 35 02 F6 | 	mov	local08, local06
2aa18     01 34 66 F0 | 	shl	local08, #1
2aa1c     18 34 46 F0 | 	shr	local08, #24
2aa20     1F 30 46 F0 | 	shr	local06, #31
2aa24     18 2B 62 F5 | 	xor	local03, local06
2aa28     FF 2E 0E F2 | 	cmp	local05, #255 wz
2aa2c     90 00 90 AD |  if_e	jmp	#LR__3753
2aa30     FF 34 0E F2 | 	cmp	local08, #255 wz
2aa34     D8 00 90 AD |  if_e	jmp	#LR__3755
2aa38     00 2E 0E F2 | 	cmp	local05, #0 wz
2aa3c     0C 01 90 AD |  if_e	jmp	#LR__3756
2aa40     17 2C 26 F4 | 	bith	local04, #23
2aa44                 | LR__3750
2aa44     00 34 0E F2 | 	cmp	local08, #0 wz
2aa48     44 01 90 AD |  if_e	jmp	#LR__3760
2aa4c     17 32 26 F4 | 	bith	local07, #23
2aa50                 | LR__3751
2aa50     16 29 02 F6 | 	mov	local02, local04
2aa54     04 28 66 F0 | 	shl	local02, #4
2aa58     19 31 02 F6 | 	mov	local06, local07
2aa5c     05 30 66 F0 | 	shl	local06, #5
2aa60     18 29 02 FD | 	qmul	local02, local06
2aa64     1A 2F 02 F1 | 	add	local05, local08
2aa68     FE 2E 86 F1 | 	sub	local05, #254
2aa6c     17 37 02 F6 | 	mov	local09, local05
2aa70     04 2C 66 F0 | 	shl	local04, #4
2aa74     05 32 66 F0 | 	shl	local07, #5
2aa78     18 38 62 FD | 	getqx	local10
2aa7c     19 2D 02 FD | 	qmul	local04, local07
2aa80     19 3A 62 FD | 	getqy	local11
2aa84     00 80 00 FF 
2aa88     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
2aa8c     18 00 90 CD |  if_b	jmp	#LR__3752
2aa90     01 36 06 F1 | 	add	local09, #1
2aa94     01 38 46 F0 | 	shr	local10, #1
2aa98     1D 35 02 F6 | 	mov	local08, local11
2aa9c     1F 34 66 F0 | 	shl	local08, #31
2aaa0     1A 39 42 F5 | 	or	local10, local08
2aaa4     01 3A 46 F0 | 	shr	local11, #1
2aaa8                 | LR__3752
2aaa8     1D 13 02 F6 | 	mov	arg01, local11
2aaac     1C 15 02 F6 | 	mov	arg02, local10
2aab0     1B 17 02 F6 | 	mov	arg03, local09
2aab4     15 19 02 F6 | 	mov	arg04, local03
2aab8     6C 32 B0 FD | 	call	#__system__pack_0695
2aabc     10 01 90 FD | 	jmp	#LR__3764
2aac0                 | LR__3753
2aac0     00 2C 0E F2 | 	cmp	local04, #0 wz
2aac4     13 FB 01 56 |  if_ne	mov	result1, local01
2aac8     04 01 90 5D |  if_ne	jmp	#LR__3764
2aacc     FF 34 56 F2 | 	cmps	local08, #255 wc
2aad0     00 34 0E C2 |  if_b	cmp	local08, #0 wz
2aad4     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
2aad8     18 00 90 4D |  if_c_and_nz	jmp	#LR__3754
2aadc     00 F8 3F CF 
2aae0     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
2aae4     E8 00 90 CD |  if_b	jmp	#LR__3764
2aae8     00 32 0E F2 | 	cmp	local07, #0 wz
2aaec     14 FB 01 56 |  if_ne	mov	result1, local02
2aaf0     DC 00 90 5D |  if_ne	jmp	#LR__3764
2aaf4                 | LR__3754
2aaf4     02 2A 46 F5 | 	or	local03, #2
2aaf8     00 12 06 F6 | 	mov	arg01, #0
2aafc     00 14 06 F6 | 	mov	arg02, #0
2ab00     17 17 02 F6 | 	mov	arg03, local05
2ab04     15 19 02 F6 | 	mov	arg04, local03
2ab08     1C 32 B0 FD | 	call	#__system__pack_0695
2ab0c     C0 00 90 FD | 	jmp	#LR__3764
2ab10                 | LR__3755
2ab10     00 2E 0E F2 | 	cmp	local05, #0 wz
2ab14     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
2ab18     00 F8 3F AF 
2ab1c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2ab20     AC 00 90 AD |  if_e	jmp	#LR__3764
2ab24     00 32 0E F2 | 	cmp	local07, #0 wz
2ab28     14 FB 01 56 |  if_ne	mov	result1, local02
2ab2c     A0 00 90 5D |  if_ne	jmp	#LR__3764
2ab30     1A 17 02 F6 | 	mov	arg03, local08
2ab34     15 19 02 F6 | 	mov	arg04, local03
2ab38     02 18 46 F5 | 	or	arg04, #2
2ab3c     00 12 06 F6 | 	mov	arg01, #0
2ab40     00 14 06 F6 | 	mov	arg02, #0
2ab44     E0 31 B0 FD | 	call	#__system__pack_0695
2ab48     84 00 90 FD | 	jmp	#LR__3764
2ab4c                 | LR__3756
2ab4c     00 2C 0E F2 | 	cmp	local04, #0 wz
2ab50     20 00 90 AD |  if_e	jmp	#LR__3759
2ab54     01 2C 66 F0 | 	shl	local04, #1
2ab58     97 0A 48 FB | 	callpa	#(@LR__3758-@LR__3757)>>2,fcache_load_ptr_
2ab5c                 | LR__3757
2ab5c     00 40 00 FF 
2ab60     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
2ab64     01 2E 86 C1 |  if_b	sub	local05, #1
2ab68     01 2C 66 C0 |  if_b	shl	local04, #1
2ab6c     EC FF 9F CD |  if_b	jmp	#LR__3757
2ab70                 | LR__3758
2ab70     D0 FE 9F FD | 	jmp	#LR__3750
2ab74                 | LR__3759
2ab74     08 2A 46 F5 | 	or	local03, #8
2ab78     00 12 06 F6 | 	mov	arg01, #0
2ab7c     00 14 06 F6 | 	mov	arg02, #0
2ab80     00 16 06 F6 | 	mov	arg03, #0
2ab84     15 19 02 F6 | 	mov	arg04, local03
2ab88     9C 31 B0 FD | 	call	#__system__pack_0695
2ab8c     40 00 90 FD | 	jmp	#LR__3764
2ab90                 | LR__3760
2ab90     00 32 0E F2 | 	cmp	local07, #0 wz
2ab94     20 00 90 AD |  if_e	jmp	#LR__3763
2ab98     01 32 66 F0 | 	shl	local07, #1
2ab9c     97 0A 48 FB | 	callpa	#(@LR__3762-@LR__3761)>>2,fcache_load_ptr_
2aba0                 | LR__3761
2aba0     00 40 00 FF 
2aba4     00 32 16 F2 | 	cmp	local07, ##8388608 wc
2aba8     01 34 86 C1 |  if_b	sub	local08, #1
2abac     01 32 66 C0 |  if_b	shl	local07, #1
2abb0     EC FF 9F CD |  if_b	jmp	#LR__3761
2abb4                 | LR__3762
2abb4     98 FE 9F FD | 	jmp	#LR__3751
2abb8                 | LR__3763
2abb8     08 2A 46 F5 | 	or	local03, #8
2abbc     00 12 06 F6 | 	mov	arg01, #0
2abc0     00 14 06 F6 | 	mov	arg02, #0
2abc4     00 16 06 F6 | 	mov	arg03, #0
2abc8     15 19 02 F6 | 	mov	arg04, local03
2abcc     58 31 B0 FD | 	call	#__system__pack_0695
2abd0                 | LR__3764
2abd0     A7 F0 03 F6 | 	mov	ptra, fp
2abd4     B2 00 A0 FD | 	call	#popregs_
2abd8                 | __system___float_mul_ret
2abd8     2D 00 64 FD | 	ret
2abdc                 | 
2abdc                 | __system___float_div
2abdc     0E 4A 05 F6 | 	mov	COUNT_, #14
2abe0     A8 00 A0 FD | 	call	#pushregs_
2abe4     09 2B 02 F6 | 	mov	local03, arg01
2abe8     0A 2D 02 F6 | 	mov	local04, arg02
2abec     15 2F 02 F6 | 	mov	local05, local03
2abf0     17 31 02 F6 | 	mov	local06, local05
2abf4     16 30 46 F7 | 	zerox	local06, #22
2abf8     17 33 02 F6 | 	mov	local07, local05
2abfc     01 32 66 F0 | 	shl	local07, #1
2ac00     18 32 46 F0 | 	shr	local07, #24
2ac04     1F 2E 46 F0 | 	shr	local05, #31
2ac08     16 FB 01 F6 | 	mov	result1, local04
2ac0c     FD 34 02 F6 | 	mov	local08, result1
2ac10     1A 37 02 F6 | 	mov	local09, local08
2ac14     16 36 46 F7 | 	zerox	local09, #22
2ac18     1A 39 02 F6 | 	mov	local10, local08
2ac1c     01 38 66 F0 | 	shl	local10, #1
2ac20     18 38 46 F0 | 	shr	local10, #24
2ac24     1F 34 46 F0 | 	shr	local08, #31
2ac28     1A 2F 62 F5 | 	xor	local05, local08
2ac2c     FF 32 0E F2 | 	cmp	local07, #255 wz
2ac30     D4 00 90 AD |  if_e	jmp	#LR__3775
2ac34     FF 38 0E F2 | 	cmp	local10, #255 wz
2ac38     04 01 90 AD |  if_e	jmp	#LR__3776
2ac3c     00 32 0E F2 | 	cmp	local07, #0 wz
2ac40     24 01 90 AD |  if_e	jmp	#LR__3777
2ac44     17 30 26 F4 | 	bith	local06, #23
2ac48                 | LR__3770
2ac48     00 38 0E F2 | 	cmp	local10, #0 wz
2ac4c     70 01 90 AD |  if_e	jmp	#LR__3781
2ac50     17 36 26 F4 | 	bith	local09, #23
2ac54                 | LR__3771
2ac54     1C 33 82 F1 | 	sub	local07, local10
2ac58     19 3B 02 F6 | 	mov	local11, local07
2ac5c     18 13 02 F6 | 	mov	arg01, local06
2ac60     02 12 46 F0 | 	shr	arg01, #2
2ac64     1E 30 66 F0 | 	shl	local06, #30
2ac68     18 15 02 F6 | 	mov	arg02, local06
2ac6c     1B 17 02 F6 | 	mov	arg03, local09
2ac70     28 12 62 FD | 	setq	arg01
2ac74     0B 15 12 FD | 	qdiv	arg02, arg03
2ac78     00 3C 06 F6 | 	mov	local12, #0
2ac7c     18 26 62 FD | 	getqx	local01
2ac80     19 FC 61 FD | 	getqy	result2
2ac84     FE 28 02 F6 | 	mov	local02, result2
2ac88     13 3F 02 F6 | 	mov	local13, local01
2ac8c     00 28 4E F2 | 	cmps	local02, #0 wz
2ac90     1F 41 02 F6 | 	mov	local14, local13
2ac94     19 40 66 F0 | 	shl	local14, #25
2ac98     01 3C 06 56 |  if_ne	mov	local12, #1
2ac9c     1E 41 42 F5 | 	or	local14, local12
2aca0     07 3E 46 F0 | 	shr	local13, #7
2aca4     00 80 00 FF 
2aca8     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
2acac     1C 00 90 CD |  if_b	jmp	#LR__3772
2acb0     01 3A 06 F1 | 	add	local11, #1
2acb4     01 40 46 F0 | 	shr	local14, #1
2acb8     1F 3D 02 F6 | 	mov	local12, local13
2acbc     1F 3C 66 F0 | 	shl	local12, #31
2acc0     1E 41 42 F5 | 	or	local14, local12
2acc4     01 3E 46 F0 | 	shr	local13, #1
2acc8     24 00 90 FD | 	jmp	#LR__3774
2accc                 | LR__3772
2accc     00 40 00 FF 
2acd0     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
2acd4     18 00 90 3D |  if_ae	jmp	#LR__3773
2acd8     01 3A 86 F1 | 	sub	local11, #1
2acdc     01 3E 66 F0 | 	shl	local13, #1
2ace0     20 3D 02 F6 | 	mov	local12, local14
2ace4     1F 3C 46 F0 | 	shr	local12, #31
2ace8     1E 3F 42 F5 | 	or	local13, local12
2acec     01 40 66 F0 | 	shl	local14, #1
2acf0                 | LR__3773
2acf0                 | LR__3774
2acf0     1F 13 02 F6 | 	mov	arg01, local13
2acf4     20 15 02 F6 | 	mov	arg02, local14
2acf8     1D 17 02 F6 | 	mov	arg03, local11
2acfc     17 19 02 F6 | 	mov	arg04, local05
2ad00     24 30 B0 FD | 	call	#__system__pack_0695
2ad04     F8 00 90 FD | 	jmp	#LR__3785
2ad08                 | LR__3775
2ad08     00 30 0E F2 | 	cmp	local06, #0 wz
2ad0c     15 FB 01 56 |  if_ne	mov	result1, local03
2ad10     EC 00 90 5D |  if_ne	jmp	#LR__3785
2ad14     FF 38 0E F2 | 	cmp	local10, #255 wz
2ad18     00 F8 3F AF 
2ad1c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2ad20     DC 00 90 AD |  if_e	jmp	#LR__3785
2ad24     02 2E 46 F5 | 	or	local05, #2
2ad28     00 12 06 F6 | 	mov	arg01, #0
2ad2c     00 14 06 F6 | 	mov	arg02, #0
2ad30     19 17 02 F6 | 	mov	arg03, local07
2ad34     17 19 02 F6 | 	mov	arg04, local05
2ad38     EC 2F B0 FD | 	call	#__system__pack_0695
2ad3c     C0 00 90 FD | 	jmp	#LR__3785
2ad40                 | LR__3776
2ad40     00 36 0E F2 | 	cmp	local09, #0 wz
2ad44     16 FB 01 56 |  if_ne	mov	result1, local04
2ad48     B4 00 90 5D |  if_ne	jmp	#LR__3785
2ad4c     17 19 02 F6 | 	mov	arg04, local05
2ad50     08 18 46 F5 | 	or	arg04, #8
2ad54     00 12 06 F6 | 	mov	arg01, #0
2ad58     00 14 06 F6 | 	mov	arg02, #0
2ad5c     00 16 06 F6 | 	mov	arg03, #0
2ad60     C4 2F B0 FD | 	call	#__system__pack_0695
2ad64     98 00 90 FD | 	jmp	#LR__3785
2ad68                 | LR__3777
2ad68     00 30 0E F2 | 	cmp	local06, #0 wz
2ad6c     20 00 90 AD |  if_e	jmp	#LR__3780
2ad70     01 30 66 F0 | 	shl	local06, #1
2ad74     97 0A 48 FB | 	callpa	#(@LR__3779-@LR__3778)>>2,fcache_load_ptr_
2ad78                 | LR__3778
2ad78     00 40 00 FF 
2ad7c     00 30 16 F2 | 	cmp	local06, ##8388608 wc
2ad80     01 32 86 C1 |  if_b	sub	local07, #1
2ad84     01 30 66 C0 |  if_b	shl	local06, #1
2ad88     EC FF 9F CD |  if_b	jmp	#LR__3778
2ad8c                 | LR__3779
2ad8c     B8 FE 9F FD | 	jmp	#LR__3770
2ad90                 | LR__3780
2ad90     00 38 0E F2 | 	cmp	local10, #0 wz
2ad94     00 36 0E A2 |  if_e	cmp	local09, #0 wz
2ad98     00 F8 3F AF 
2ad9c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2ada0     5C 00 90 AD |  if_e	jmp	#LR__3785
2ada4     17 19 02 F6 | 	mov	arg04, local05
2ada8     08 18 46 F5 | 	or	arg04, #8
2adac     00 12 06 F6 | 	mov	arg01, #0
2adb0     00 14 06 F6 | 	mov	arg02, #0
2adb4     00 16 06 F6 | 	mov	arg03, #0
2adb8     6C 2F B0 FD | 	call	#__system__pack_0695
2adbc     40 00 90 FD | 	jmp	#LR__3785
2adc0                 | LR__3781
2adc0     00 36 0E F2 | 	cmp	local09, #0 wz
2adc4     20 00 90 AD |  if_e	jmp	#LR__3784
2adc8     01 36 66 F0 | 	shl	local09, #1
2adcc     97 0A 48 FB | 	callpa	#(@LR__3783-@LR__3782)>>2,fcache_load_ptr_
2add0                 | LR__3782
2add0     00 40 00 FF 
2add4     00 36 16 F2 | 	cmp	local09, ##8388608 wc
2add8     01 38 86 C1 |  if_b	sub	local10, #1
2addc     01 36 66 C0 |  if_b	shl	local09, #1
2ade0     EC FF 9F CD |  if_b	jmp	#LR__3782
2ade4                 | LR__3783
2ade4     6C FE 9F FD | 	jmp	#LR__3771
2ade8                 | LR__3784
2ade8     02 2E 46 F5 | 	or	local05, #2
2adec     00 12 06 F6 | 	mov	arg01, #0
2adf0     00 14 06 F6 | 	mov	arg02, #0
2adf4     00 16 06 F6 | 	mov	arg03, #0
2adf8     17 19 02 F6 | 	mov	arg04, local05
2adfc     28 2F B0 FD | 	call	#__system__pack_0695
2ae00                 | LR__3785
2ae00     A7 F0 03 F6 | 	mov	ptra, fp
2ae04     B2 00 A0 FD | 	call	#popregs_
2ae08                 | __system___float_div_ret
2ae08     2D 00 64 FD | 	ret
2ae0c                 | 
2ae0c                 | __system___float_cmp
2ae0c     00 C0 3F FF 
2ae10     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2ae14     00 C0 3F CF 
2ae18     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2ae1c     0B FB 01 36 |  if_ae	mov	result1, arg03
2ae20     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2ae24     00 C0 7F FF 
2ae28     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
2ae2c     00 C0 7F CF 
2ae30     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2ae34     0B FB 01 36 |  if_ae	mov	result1, arg03
2ae38     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2ae3c     00 12 56 F2 | 	cmps	arg01, #0 wc
2ae40     2C 00 90 3D |  if_ae	jmp	#LR__3790
2ae44     00 14 56 F2 | 	cmps	arg02, #0 wc
2ae48     0A FB 01 C6 |  if_b	mov	result1, arg02
2ae4c     09 FB 81 C1 |  if_b	sub	result1, arg01
2ae50     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2ae54     00 14 0E F2 | 	cmp	arg02, #0 wz
2ae58     00 00 40 AF 
2ae5c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
2ae60     00 FA 05 A6 |  if_e	mov	result1, #0
2ae64     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2ae68     01 FA 65 F6 | 	neg	result1, #1
2ae6c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
2ae70                 | LR__3790
2ae70     00 14 56 F2 | 	cmps	arg02, #0 wc
2ae74     1C 00 90 3D |  if_ae	jmp	#LR__3791
2ae78     00 12 0E F2 | 	cmp	arg01, #0 wz
2ae7c     00 00 40 AF 
2ae80     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2ae84     00 FA 05 A6 |  if_e	mov	result1, #0
2ae88     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2ae8c     01 FA 05 F6 | 	mov	result1, #1
2ae90     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2ae94                 | LR__3791
2ae94     0A 13 82 F1 | 	sub	arg01, arg02
2ae98     09 FB 01 F6 | 	mov	result1, arg01
2ae9c                 | __system___float_cmp_ret
2ae9c     2D 00 64 FD | 	ret
2aea0                 | 
2aea0                 | __system___float_tointeger
2aea0     02 4A 05 F6 | 	mov	COUNT_, #2
2aea4     A8 00 A0 FD | 	call	#pushregs_
2aea8     50 00 B0 FD | 	call	#__system___float_Unpack
2aeac     FF FF 7F FF 
2aeb0     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2aeb4     34 00 90 CD |  if_b	jmp	#LR__3800
2aeb8     1F FC 55 F2 | 	cmps	result2, #31 wc
2aebc     2C 00 90 3D |  if_ae	jmp	#LR__3800
2aec0     02 FE 65 F0 | 	shl	result3, #2
2aec4     1E 26 06 F6 | 	mov	local01, #30
2aec8     FE 26 82 F1 | 	sub	local01, result2
2aecc     13 FF 41 F0 | 	shr	result3, local01
2aed0     FF 28 02 F6 | 	mov	local02, result3
2aed4     0A 29 02 F1 | 	add	local02, arg02
2aed8     01 28 46 F0 | 	shr	local02, #1
2aedc     00 FA 0D F2 | 	cmp	result1, #0 wz
2aee0     14 29 62 56 |  if_ne	neg	local02, local02
2aee4     14 FB 01 F6 | 	mov	result1, local02
2aee8     04 00 90 FD | 	jmp	#LR__3801
2aeec                 | LR__3800
2aeec     00 FA 05 F6 | 	mov	result1, #0
2aef0                 | LR__3801
2aef0     A7 F0 03 F6 | 	mov	ptra, fp
2aef4     B2 00 A0 FD | 	call	#popregs_
2aef8                 | __system___float_tointeger_ret
2aef8     2D 00 64 FD | 	ret
2aefc                 | 
2aefc                 | __system___float_Unpack
2aefc     09 01 02 F6 | 	mov	_var01, arg01
2af00     1F 00 46 F0 | 	shr	_var01, #31
2af04     09 03 02 F6 | 	mov	_var02, arg01
2af08     01 02 66 F0 | 	shl	_var02, #1
2af0c     18 02 4E F0 | 	shr	_var02, #24 wz
2af10     17 13 06 F4 | 	bitl	arg01, #279
2af14     06 12 66 50 |  if_ne	shl	arg01, #6
2af18     1D 12 26 54 |  if_ne	bith	arg01, #29
2af1c     1C 00 90 5D |  if_ne	jmp	#LR__3810
2af20     09 05 92 F7 | 	encod	_var03, arg01 wc
2af24     01 04 06 C1 |  if_b	add	_var03, #1
2af28     17 04 86 F1 | 	sub	_var03, #23
2af2c     02 03 02 F6 | 	mov	_var02, _var03
2af30     07 FC 05 F6 | 	mov	result2, #7
2af34     02 FD 81 F1 | 	sub	result2, _var03
2af38     FE 12 62 F0 | 	shl	arg01, result2
2af3c                 | LR__3810
2af3c     7F 02 86 F1 | 	sub	_var02, #127
2af40     09 FF 01 F6 | 	mov	result3, arg01
2af44     00 FB 01 F6 | 	mov	result1, _var01
2af48     01 FD 01 F6 | 	mov	result2, _var02
2af4c                 | __system___float_Unpack_ret
2af4c     2D 00 64 FD | 	ret
2af50                 | 
2af50                 | __system___float_Pack
2af50     00 00 06 F6 | 	mov	_var01, #0
2af54     00 16 0E F2 | 	cmp	arg03, #0 wz
2af58     8C 00 90 AD |  if_e	jmp	#LR__3821
2af5c     0B 03 92 F7 | 	encod	_var02, arg03 wc
2af60     01 02 06 C1 |  if_b	add	_var02, #1
2af64     21 00 06 F6 | 	mov	_var01, #33
2af68     01 01 82 F1 | 	sub	_var01, _var02
2af6c     00 17 62 F0 | 	shl	arg03, _var01
2af70     03 02 06 F6 | 	mov	_var02, #3
2af74     00 03 82 F1 | 	sub	_var02, _var01
2af78     01 15 02 F1 | 	add	arg02, _var02
2af7c     0A 05 02 F6 | 	mov	_var03, arg02
2af80     00 17 06 F1 | 	add	arg03, #256
2af84     0B 03 02 F6 | 	mov	_var02, arg03
2af88     FF 02 2E F5 | 	andn	_var02, #255 wz
2af8c     01 04 06 A1 |  if_e	add	_var03, #1
2af90     7F 04 06 F1 | 	add	_var03, #127
2af94     FF FF 7F FF 
2af98     E9 05 46 F3 | 	fges	_var03, ##-23
2af9c     FF 04 66 F3 | 	fles	_var03, #255
2afa0     01 04 56 F2 | 	cmps	_var03, #1 wc
2afa4     1C 00 90 3D |  if_ae	jmp	#LR__3820
2afa8     01 16 46 F0 | 	shr	arg03, #1
2afac     1F 02 C6 F9 | 	decod	_var02, #31
2afb0     0B 03 02 F1 | 	add	_var02, arg03
2afb4     02 05 62 F6 | 	neg	_var03, _var03
2afb8     02 03 42 F0 | 	shr	_var02, _var03
2afbc     01 17 02 F6 | 	mov	arg03, _var02
2afc0     00 04 06 F6 | 	mov	_var03, #0
2afc4                 | LR__3820
2afc4     09 FB 01 F6 | 	mov	result1, arg01
2afc8     1F FA 65 F0 | 	shl	result1, #31
2afcc     02 03 02 F6 | 	mov	_var02, _var03
2afd0     17 02 66 F0 | 	shl	_var02, #23
2afd4     01 FB 41 F5 | 	or	result1, _var02
2afd8     0B 07 02 F6 | 	mov	_var04, arg03
2afdc     09 06 46 F0 | 	shr	_var04, #9
2afe0     03 FB 41 F5 | 	or	result1, _var04
2afe4     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2afe8                 | LR__3821
2afe8     00 FB 01 F6 | 	mov	result1, _var01
2afec                 | __system___float_Pack_ret
2afec     2D 00 64 FD | 	ret
2aff0                 | 
2aff0                 | __system___basic_print_float
2aff0     05 4A 05 F6 | 	mov	COUNT_, #5
2aff4     A8 00 A0 FD | 	call	#pushregs_
2aff8     09 27 02 F6 | 	mov	local01, arg01
2affc     0A 29 02 F6 | 	mov	local02, arg02
2b000     0B 2B 0A F6 | 	mov	local03, arg03 wz
2b004     0C 2D 02 F6 | 	mov	local04, arg04
2b008     14 00 90 5D |  if_ne	jmp	#LR__3830
2b00c     23 2C 0E F2 | 	cmp	local04, #35 wz
2b010     80 02 10 AF 
2b014     00 2E 06 A6 |  if_e	mov	local05, ##537198592
2b018     1D 2E C6 59 |  if_ne	decod	local05, #29
2b01c     17 2B 02 F6 | 	mov	local03, local05
2b020                 | LR__3830
2b020     13 13 02 F6 | 	mov	arg01, local01
2b024     34 28 B0 FD | 	call	#__system___gettxfunc
2b028     FD 2E 0A F6 | 	mov	local05, result1 wz
2b02c     00 FA 05 A6 |  if_e	mov	result1, #0
2b030     17 13 02 56 |  if_ne	mov	arg01, local05
2b034     15 15 02 56 |  if_ne	mov	arg02, local03
2b038     14 17 02 56 |  if_ne	mov	arg03, local02
2b03c     16 19 02 56 |  if_ne	mov	arg04, local04
2b040     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
2b044     A7 F0 03 F6 | 	mov	ptra, fp
2b048     B2 00 A0 FD | 	call	#popregs_
2b04c                 | __system___basic_print_float_ret
2b04c     2D 00 64 FD | 	ret
2b050                 | 
2b050                 | __system____builtin_atoi
2b050     07 4A 05 F6 | 	mov	COUNT_, #7
2b054     A8 00 A0 FD | 	call	#pushregs_
2b058                 | __system____builtin_atoi_enter
2b058     09 27 02 F6 | 	mov	local01, arg01
2b05c     0A 29 02 F6 | 	mov	local02, arg02
2b060     00 2A 06 F6 | 	mov	local03, #0
2b064     00 2C 06 F6 | 	mov	local04, #0
2b068     00 2E 06 F6 | 	mov	local05, #0
2b06c     97 08 48 FB | 	callpa	#(@LR__3841-@LR__3840)>>2,fcache_load_ptr_
2b070                 | LR__3840
2b070     13 31 C2 FA | 	rdbyte	local06, local01
2b074     20 30 0E F2 | 	cmp	local06, #32 wz
2b078     01 26 06 A1 |  if_e	add	local01, #1
2b07c     F0 FF 9F AD |  if_e	jmp	#LR__3840
2b080                 | LR__3841
2b080     13 33 C2 FA | 	rdbyte	local07, local01
2b084     97 12 48 FB | 	callpa	#(@LR__3843-@LR__3842)>>2,fcache_load_ptr_
2b088                 | LR__3842
2b088     2D 32 0E F2 | 	cmp	local07, #45 wz
2b08c     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
2b090     18 00 90 5D |  if_ne	jmp	#LR__3844
2b094     01 26 06 F1 | 	add	local01, #1
2b098     2D 32 0E F2 | 	cmp	local07, #45 wz
2b09c     01 30 06 A6 |  if_e	mov	local06, #1
2b0a0     18 2F C2 A2 |  if_e	subr	local05, local06
2b0a4     13 33 C2 FA | 	rdbyte	local07, local01
2b0a8     DC FF 9F FD | 	jmp	#LR__3842
2b0ac                 | LR__3843
2b0ac                 | LR__3844
2b0ac     00 28 0E F2 | 	cmp	local02, #0 wz
2b0b0     1C 00 90 5D |  if_ne	jmp	#LR__3846
2b0b4     24 32 0E F2 | 	cmp	local07, #36 wz
2b0b8     10 28 06 A6 |  if_e	mov	local02, #16
2b0bc     01 26 06 A1 |  if_e	add	local01, #1
2b0c0     0C 00 90 AD |  if_e	jmp	#LR__3845
2b0c4     25 32 0E F2 | 	cmp	local07, #37 wz
2b0c8     02 28 06 A6 |  if_e	mov	local02, #2
2b0cc     01 26 06 A1 |  if_e	add	local01, #1
2b0d0                 | LR__3845
2b0d0                 | LR__3846
2b0d0     97 48 48 FB | 	callpa	#(@LR__3854-@LR__3847)>>2,fcache_load_ptr_
2b0d4                 | LR__3847
2b0d4                 | LR__3848
2b0d4     13 33 C2 FA | 	rdbyte	local07, local01
2b0d8     5F 32 0E F2 | 	cmp	local07, #95 wz
2b0dc     01 26 06 F1 | 	add	local01, #1
2b0e0     F0 FF 9F AD |  if_e	jmp	#LR__3848
2b0e4     30 32 0E F2 | 	cmp	local07, #48 wz
2b0e8     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2b0ec     00 2C 06 A6 |  if_e	mov	local04, #0
2b0f0     60 00 90 AD |  if_e	jmp	#LR__3853
2b0f4     31 32 56 F2 | 	cmps	local07, #49 wc
2b0f8     18 00 90 CD |  if_b	jmp	#LR__3849
2b0fc     3A 32 56 F2 | 	cmps	local07, #58 wc
2b100     19 2D 02 C6 |  if_b	mov	local04, local07
2b104     30 2C 86 C1 |  if_b	sub	local04, #48
2b108     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2b10c     0A 28 06 86 |  if_c_and_z	mov	local02, #10
2b110     40 00 90 CD |  if_b	jmp	#LR__3852
2b114                 | LR__3849
2b114     0B 28 56 F2 | 	cmps	local02, #11 wc
2b118     61 32 56 32 |  if_ae	cmps	local07, #97 wc
2b11c     14 00 90 CD |  if_b	jmp	#LR__3850
2b120     67 32 56 F2 | 	cmps	local07, #103 wc
2b124     61 32 86 C1 |  if_b	sub	local07, #97
2b128     0A 2C 06 C6 |  if_b	mov	local04, #10
2b12c     19 2D 02 C1 |  if_b	add	local04, local07
2b130     20 00 90 CD |  if_b	jmp	#LR__3851
2b134                 | LR__3850
2b134     0B 28 56 F2 | 	cmps	local02, #11 wc
2b138     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2b13c     24 00 90 CD |  if_b	jmp	#LR__3855
2b140     47 32 56 F2 | 	cmps	local07, #71 wc
2b144     41 32 86 C1 |  if_b	sub	local07, #65
2b148     0A 2C 06 C6 |  if_b	mov	local04, #10
2b14c     19 2D 02 C1 |  if_b	add	local04, local07
2b150     10 00 90 3D |  if_ae	jmp	#LR__3855
2b154                 | LR__3851
2b154                 | LR__3852
2b154                 | LR__3853
2b154     15 29 02 FD | 	qmul	local02, local03
2b158     18 2A 62 FD | 	getqx	local03
2b15c     16 2B 02 F1 | 	add	local03, local04
2b160     70 FF 9F FD | 	jmp	#LR__3847
2b164                 | LR__3854
2b164                 | LR__3855
2b164     00 28 0E F2 | 	cmp	local02, #0 wz
2b168     64 00 90 5D |  if_ne	jmp	#LR__3861
2b16c     78 32 0E F2 | 	cmp	local07, #120 wz
2b170     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
2b174     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
2b178     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2b17c     14 00 90 5D |  if_ne	jmp	#LR__3856
2b180     13 13 02 F6 | 	mov	arg01, local01
2b184     10 14 06 F6 | 	mov	arg02, #16
2b188     C4 FE BF FD | 	call	#__system____builtin_atoi
2b18c     FD 2A 02 F6 | 	mov	local03, result1
2b190     3C 00 90 FD | 	jmp	#LR__3860
2b194                 | LR__3856
2b194     62 32 0E F2 | 	cmp	local07, #98 wz
2b198     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
2b19c     14 00 90 5D |  if_ne	jmp	#LR__3857
2b1a0     13 13 02 F6 | 	mov	arg01, local01
2b1a4     02 14 06 F6 | 	mov	arg02, #2
2b1a8     A4 FE BF FD | 	call	#__system____builtin_atoi
2b1ac     FD 2A 02 F6 | 	mov	local03, result1
2b1b0     1C 00 90 FD | 	jmp	#LR__3859
2b1b4                 | LR__3857
2b1b4     6F 32 0E F2 | 	cmp	local07, #111 wz
2b1b8     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2b1bc     10 00 90 5D |  if_ne	jmp	#LR__3858
2b1c0     13 13 02 F6 | 	mov	arg01, local01
2b1c4     08 14 06 F6 | 	mov	arg02, #8
2b1c8     84 FE BF FD | 	call	#__system____builtin_atoi
2b1cc     FD 2A 02 F6 | 	mov	local03, result1
2b1d0                 | LR__3858
2b1d0                 | LR__3859
2b1d0                 | LR__3860
2b1d0                 | LR__3861
2b1d0     00 2E 0E F2 | 	cmp	local05, #0 wz
2b1d4     15 2B 62 56 |  if_ne	neg	local03, local03
2b1d8     15 FB 01 F6 | 	mov	result1, local03
2b1dc     A7 F0 03 F6 | 	mov	ptra, fp
2b1e0     B2 00 A0 FD | 	call	#popregs_
2b1e4                 | __system____builtin_atoi_ret
2b1e4     2D 00 64 FD | 	ret
2b1e8                 | 
2b1e8                 | __system____builtin_atof
2b1e8     07 4A 05 F6 | 	mov	COUNT_, #7
2b1ec     A8 00 A0 FD | 	call	#pushregs_
2b1f0     09 27 02 F6 | 	mov	local01, arg01
2b1f4     00 28 06 F6 | 	mov	local02, #0
2b1f8     00 2A 06 F6 | 	mov	local03, #0
2b1fc     00 2C 06 F6 | 	mov	local04, #0
2b200     00 2E 06 F6 | 	mov	local05, #0
2b204     97 08 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
2b208                 | LR__3870
2b208     13 17 C2 FA | 	rdbyte	arg03, local01
2b20c     20 16 0E F2 | 	cmp	arg03, #32 wz
2b210     01 26 06 A1 |  if_e	add	local01, #1
2b214     F0 FF 9F AD |  if_e	jmp	#LR__3870
2b218                 | LR__3871
2b218     13 31 C2 FA | 	rdbyte	local06, local01
2b21c                 | LR__3872
2b21c     2B 30 0E F2 | 	cmp	local06, #43 wz
2b220     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
2b224     14 00 90 5D |  if_ne	jmp	#LR__3873
2b228     2D 30 0E F2 | 	cmp	local06, #45 wz
2b22c     1F 2C E6 A4 |  if_e	bitnot	local04, #31
2b230     01 26 06 F1 | 	add	local01, #1
2b234     13 31 C2 FA | 	rdbyte	local06, local01
2b238     E0 FF 9F FD | 	jmp	#LR__3872
2b23c                 | LR__3873
2b23c                 | LR__3874
2b23c     97 08 48 FB | 	callpa	#(@LR__3876-@LR__3875)>>2,fcache_load_ptr_
2b240                 | LR__3875
2b240     13 31 C2 FA | 	rdbyte	local06, local01
2b244     5F 30 0E F2 | 	cmp	local06, #95 wz
2b248     01 26 06 F1 | 	add	local01, #1
2b24c     F0 FF 9F AD |  if_e	jmp	#LR__3875
2b250                 | LR__3876
2b250     00 30 0E F2 | 	cmp	local06, #0 wz
2b254     5C 00 90 AD |  if_e	jmp	#LR__3878
2b258     30 30 56 F2 | 	cmps	local06, #48 wc
2b25c     44 00 90 CD |  if_b	jmp	#LR__3877
2b260     3A 30 56 F2 | 	cmps	local06, #58 wc
2b264     3C 00 90 3D |  if_ae	jmp	#LR__3877
2b268     14 13 02 F6 | 	mov	arg01, local02
2b26c     00 90 20 FF 
2b270     00 14 06 F6 | 	mov	arg02, ##1092616192
2b274     60 F7 BF FD | 	call	#__system___float_mul
2b278     FD 28 02 F6 | 	mov	local02, result1
2b27c     30 30 86 F1 | 	sub	local06, #48
2b280     18 13 02 F6 | 	mov	arg01, local06
2b284     4C F3 BF FD | 	call	#__system___float_fromuns
2b288     FD 14 02 F6 | 	mov	arg02, result1
2b28c     14 13 02 F6 | 	mov	arg01, local02
2b290     74 F3 BF FD | 	call	#__system___float_add
2b294     FD 28 02 F6 | 	mov	local02, result1
2b298     00 2E 0E F2 | 	cmp	local05, #0 wz
2b29c     01 2A 86 51 |  if_ne	sub	local03, #1
2b2a0     98 FF 9F FD | 	jmp	#LR__3874
2b2a4                 | LR__3877
2b2a4     2E 30 0E F2 | 	cmp	local06, #46 wz
2b2a8     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2b2ac     01 2E 06 A6 |  if_e	mov	local05, #1
2b2b0     88 FF 9F AD |  if_e	jmp	#LR__3874
2b2b4                 | LR__3878
2b2b4     45 30 0E F2 | 	cmp	local06, #69 wz
2b2b8     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2b2bc     18 00 90 5D |  if_ne	jmp	#LR__3879
2b2c0     13 13 02 F6 | 	mov	arg01, local01
2b2c4     00 14 06 F6 | 	mov	arg02, #0
2b2c8     84 FD BF FD | 	call	#__system____builtin_atoi
2b2cc     15 FB 01 F1 | 	add	result1, local03
2b2d0     FD 32 02 F6 | 	mov	local07, result1
2b2d4     04 00 90 FD | 	jmp	#LR__3880
2b2d8                 | LR__3879
2b2d8     15 33 02 F6 | 	mov	local07, local03
2b2dc                 | LR__3880
2b2dc     19 17 02 F6 | 	mov	arg03, local07
2b2e0     14 13 02 F6 | 	mov	arg01, local02
2b2e4     00 90 20 FF 
2b2e8     00 14 06 F6 | 	mov	arg02, ##1092616192
2b2ec     F4 06 B0 FD | 	call	#__system___float_pow_n
2b2f0     16 FB 61 F5 | 	xor	result1, local04
2b2f4     A7 F0 03 F6 | 	mov	ptra, fp
2b2f8     B2 00 A0 FD | 	call	#popregs_
2b2fc                 | __system____builtin_atof_ret
2b2fc     2D 00 64 FD | 	ret
2b300                 | 
2b300                 | __system____builtin_ilogb
2b300     F8 FB BF FD | 	call	#__system___float_Unpack
2b304     00 FE 0D F2 | 	cmp	result3, #0 wz
2b308     00 00 40 AF 
2b30c     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
2b310     24 00 90 AD |  if_e	jmp	#LR__3891
2b314     80 FC 0D F2 | 	cmp	result2, #128 wz
2b318     18 00 90 5D |  if_ne	jmp	#LR__3890
2b31c     00 00 10 FF 
2b320     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
2b324     1E FA CD A9 |  if_e	bmask	result1, #30
2b328     0C 00 90 AD |  if_e	jmp	#LR__3891
2b32c     1F FA C5 F9 | 	decod	result1, #31
2b330     04 00 90 FD | 	jmp	#LR__3891
2b334                 | LR__3890
2b334     FE FA 01 F6 | 	mov	result1, result2
2b338                 | LR__3891
2b338                 | __system____builtin_ilogb_ret
2b338     2D 00 64 FD | 	ret
2b33c                 | 
2b33c                 | __system____builtin_sinf
2b33c     03 4A 05 F6 | 	mov	COUNT_, #3
2b340     A8 00 A0 FD | 	call	#pushregs_
2b344     09 27 02 F6 | 	mov	local01, arg01
2b348     87 64 20 FF 
2b34c     DB 15 06 F6 | 	mov	arg02, ##1086918619
2b350     88 F8 BF FD | 	call	#__system___float_div
2b354     FD 12 02 F6 | 	mov	arg01, result1
2b358     00 14 06 F6 | 	mov	arg02, #0
2b35c     40 FB BF FD | 	call	#__system___float_tointeger
2b360     FD 16 0A F6 | 	mov	arg03, result1 wz
2b364     44 00 90 AD |  if_e	jmp	#LR__3900
2b368     0B 13 52 F6 | 	abs	arg01, arg03 wc
2b36c     1F 28 C6 C9 |  if_b	decod	local02, #31
2b370     00 28 06 36 |  if_ae	mov	local02, #0
2b374     5C F2 BF FD | 	call	#__system___float_fromuns
2b378     14 FB 61 F5 | 	xor	result1, local02
2b37c     FD 12 02 F6 | 	mov	arg01, result1
2b380     1E 14 C6 F9 | 	decod	arg02, #30
2b384     50 F6 BF FD | 	call	#__system___float_mul
2b388     FD 12 02 F6 | 	mov	arg01, result1
2b38c     87 24 20 FF 
2b390     DB 15 06 F6 | 	mov	arg02, ##1078530011
2b394     40 F6 BF FD | 	call	#__system___float_mul
2b398     FD 14 02 F6 | 	mov	arg02, result1
2b39c     13 13 02 F6 | 	mov	arg01, local01
2b3a0     1F 14 E6 F4 | 	bitnot	arg02, #31
2b3a4     60 F2 BF FD | 	call	#__system___float_add
2b3a8     FD 26 02 F6 | 	mov	local01, result1
2b3ac                 | LR__3900
2b3ac     13 13 02 F6 | 	mov	arg01, local01
2b3b0     66 E6 1E FF 
2b3b4     CD 14 06 F6 | 	mov	arg02, ##1036831949
2b3b8     01 16 06 F6 | 	mov	arg03, #1
2b3bc     4C FA BF FD | 	call	#__system___float_cmp
2b3c0     00 FA 55 F2 | 	cmps	result1, #0 wc
2b3c4     5C 00 90 3D |  if_ae	jmp	#LR__3901
2b3c8     13 13 02 F6 | 	mov	arg01, local01
2b3cc     66 E6 5E FF 
2b3d0     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2b3d4     01 16 66 F6 | 	neg	arg03, #1
2b3d8     30 FA BF FD | 	call	#__system___float_cmp
2b3dc     01 FA 55 F2 | 	cmps	result1, #1 wc
2b3e0     40 00 90 CD |  if_b	jmp	#LR__3901
2b3e4     13 13 02 F6 | 	mov	arg01, local01
2b3e8     13 15 02 F6 | 	mov	arg02, local01
2b3ec     E8 F5 BF FD | 	call	#__system___float_mul
2b3f0     FD 12 02 F6 | 	mov	arg01, result1
2b3f4     13 15 02 F6 | 	mov	arg02, local01
2b3f8     DC F5 BF FD | 	call	#__system___float_mul
2b3fc     FD 12 02 F6 | 	mov	arg01, result1
2b400     00 60 20 FF 
2b404     00 14 06 F6 | 	mov	arg02, ##1086324736
2b408     D0 F7 BF FD | 	call	#__system___float_div
2b40c     FD 14 02 F6 | 	mov	arg02, result1
2b410     13 13 02 F6 | 	mov	arg01, local01
2b414     1F 14 E6 F4 | 	bitnot	arg02, #31
2b418     EC F1 BF FD | 	call	#__system___float_add
2b41c     FD 2A 02 F6 | 	mov	local03, result1
2b420     54 00 90 FD | 	jmp	#LR__3902
2b424                 | LR__3901
2b424     13 13 02 F6 | 	mov	arg01, local01
2b428     7C 91 26 FF 
2b42c     83 15 06 F6 | 	mov	arg02, ##1294137731
2b430     A4 F5 BF FD | 	call	#__system___float_mul
2b434     FD 12 02 F6 | 	mov	arg01, result1
2b438     00 14 06 F6 | 	mov	arg02, #0
2b43c     60 FA BF FD | 	call	#__system___float_tointeger
2b440     02 FA 65 F0 | 	shl	result1, #2
2b444     00 00 A0 FF 
2b448     FD 00 48 FD | 	qrotate	##1073741824, result1
2b44c     19 12 62 FD | 	getqy	arg01
2b450     09 13 52 F6 | 	abs	arg01, arg01 wc
2b454     1F 28 C6 C9 |  if_b	decod	local02, #31
2b458     00 28 06 36 |  if_ae	mov	local02, #0
2b45c     74 F1 BF FD | 	call	#__system___float_fromuns
2b460     14 FB 61 F5 | 	xor	result1, local02
2b464     FD 12 02 F6 | 	mov	arg01, result1
2b468     00 40 27 FF 
2b46c     00 14 06 F6 | 	mov	arg02, ##1317011456
2b470     68 F7 BF FD | 	call	#__system___float_div
2b474     FD 2A 02 F6 | 	mov	local03, result1
2b478                 | LR__3902
2b478     15 FB 01 F6 | 	mov	result1, local03
2b47c     A7 F0 03 F6 | 	mov	ptra, fp
2b480     B2 00 A0 FD | 	call	#popregs_
2b484                 | __system____builtin_sinf_ret
2b484     2D 00 64 FD | 	ret
2b488                 | 
2b488                 | __system____builtin_tanf
2b488     02 4A 05 F6 | 	mov	COUNT_, #2
2b48c     A8 00 A0 FD | 	call	#pushregs_
2b490     09 27 02 F6 | 	mov	local01, arg01
2b494     A4 FE BF FD | 	call	#__system____builtin_sinf
2b498     FD 28 02 F6 | 	mov	local02, result1
2b49c     13 15 02 F6 | 	mov	arg02, local01
2b4a0     87 E4 1F FF 
2b4a4     DB 13 06 F6 | 	mov	arg01, ##1070141403
2b4a8     1F 14 E6 F4 | 	bitnot	arg02, #31
2b4ac     58 F1 BF FD | 	call	#__system___float_add
2b4b0     FD 12 02 F6 | 	mov	arg01, result1
2b4b4     84 FE BF FD | 	call	#__system____builtin_sinf
2b4b8     FD 14 02 F6 | 	mov	arg02, result1
2b4bc     14 13 02 F6 | 	mov	arg01, local02
2b4c0     18 F7 BF FD | 	call	#__system___float_div
2b4c4     A7 F0 03 F6 | 	mov	ptra, fp
2b4c8     B2 00 A0 FD | 	call	#popregs_
2b4cc                 | __system____builtin_tanf_ret
2b4cc     2D 00 64 FD | 	ret
2b4d0                 | 
2b4d0                 | __system____builtin_asinf
2b4d0     01 4A 05 F6 | 	mov	COUNT_, #1
2b4d4     A8 00 A0 FD | 	call	#pushregs_
2b4d8     09 27 02 F6 | 	mov	local01, arg01
2b4dc     13 15 02 F6 | 	mov	arg02, local01
2b4e0     13 13 02 F6 | 	mov	arg01, local01
2b4e4     F0 F4 BF FD | 	call	#__system___float_mul
2b4e8     FD 14 02 F6 | 	mov	arg02, result1
2b4ec     00 C0 1F FF 
2b4f0     00 12 06 F6 | 	mov	arg01, ##1065353216
2b4f4     1F 14 E6 F4 | 	bitnot	arg02, #31
2b4f8     0C F1 BF FD | 	call	#__system___float_add
2b4fc     FD 12 02 F6 | 	mov	arg01, result1
2b500     FC F3 BF FD | 	call	#__system___float_sqrt
2b504     FD 14 02 F6 | 	mov	arg02, result1
2b508     13 13 02 F6 | 	mov	arg01, local01
2b50c     58 00 B0 FD | 	call	#__system____builtin_atan2f
2b510     A7 F0 03 F6 | 	mov	ptra, fp
2b514     B2 00 A0 FD | 	call	#popregs_
2b518                 | __system____builtin_asinf_ret
2b518     2D 00 64 FD | 	ret
2b51c                 | 
2b51c                 | __system____builtin_acosf
2b51c     01 4A 05 F6 | 	mov	COUNT_, #1
2b520     A8 00 A0 FD | 	call	#pushregs_
2b524     09 27 02 F6 | 	mov	local01, arg01
2b528     13 15 02 F6 | 	mov	arg02, local01
2b52c     13 13 02 F6 | 	mov	arg01, local01
2b530     A4 F4 BF FD | 	call	#__system___float_mul
2b534     FD 14 02 F6 | 	mov	arg02, result1
2b538     00 C0 1F FF 
2b53c     00 12 06 F6 | 	mov	arg01, ##1065353216
2b540     1F 14 E6 F4 | 	bitnot	arg02, #31
2b544     C0 F0 BF FD | 	call	#__system___float_add
2b548     FD 12 02 F6 | 	mov	arg01, result1
2b54c     B0 F3 BF FD | 	call	#__system___float_sqrt
2b550     FD 12 02 F6 | 	mov	arg01, result1
2b554     13 15 02 F6 | 	mov	arg02, local01
2b558     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2b55c     A7 F0 03 F6 | 	mov	ptra, fp
2b560     B2 00 A0 FD | 	call	#popregs_
2b564                 | __system____builtin_acosf_ret
2b564     2D 00 64 FD | 	ret
2b568                 | 
2b568                 | __system____builtin_atan2f
2b568     04 4A 05 F6 | 	mov	COUNT_, #4
2b56c     A8 00 A0 FD | 	call	#pushregs_
2b570     09 27 02 F6 | 	mov	local01, arg01
2b574     0A 29 02 F6 | 	mov	local02, arg02
2b578     13 13 02 F6 | 	mov	arg01, local01
2b57c     00 14 06 F6 | 	mov	arg02, #0
2b580     01 16 06 F6 | 	mov	arg03, #1
2b584     84 F8 BF FD | 	call	#__system___float_cmp
2b588     00 FA 0D F2 | 	cmp	result1, #0 wz
2b58c     28 00 90 5D |  if_ne	jmp	#LR__3910
2b590     14 13 02 F6 | 	mov	arg01, local02
2b594     00 14 06 F6 | 	mov	arg02, #0
2b598     01 16 06 F6 | 	mov	arg03, #1
2b59c     6C F8 BF FD | 	call	#__system___float_cmp
2b5a0     00 FA 55 F2 | 	cmps	result1, #0 wc
2b5a4     87 24 60 CF 
2b5a8     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2b5ac     DC 00 90 CD |  if_b	jmp	#LR__3911
2b5b0     00 FA 05 F6 | 	mov	result1, #0
2b5b4     D4 00 90 FD | 	jmp	#LR__3911
2b5b8                 | LR__3910
2b5b8     14 13 02 F6 | 	mov	arg01, local02
2b5bc     14 15 02 F6 | 	mov	arg02, local02
2b5c0     14 F4 BF FD | 	call	#__system___float_mul
2b5c4     FD 2A 02 F6 | 	mov	local03, result1
2b5c8     13 13 02 F6 | 	mov	arg01, local01
2b5cc     13 15 02 F6 | 	mov	arg02, local01
2b5d0     04 F4 BF FD | 	call	#__system___float_mul
2b5d4     FD 14 02 F6 | 	mov	arg02, result1
2b5d8     15 13 02 F6 | 	mov	arg01, local03
2b5dc     28 F0 BF FD | 	call	#__system___float_add
2b5e0     FD 12 02 F6 | 	mov	arg01, result1
2b5e4     18 F3 BF FD | 	call	#__system___float_sqrt
2b5e8     FD 2A 02 F6 | 	mov	local03, result1
2b5ec     14 13 02 F6 | 	mov	arg01, local02
2b5f0     15 15 02 F6 | 	mov	arg02, local03
2b5f4     E4 F5 BF FD | 	call	#__system___float_div
2b5f8     FD 28 02 F6 | 	mov	local02, result1
2b5fc     13 13 02 F6 | 	mov	arg01, local01
2b600     15 15 02 F6 | 	mov	arg02, local03
2b604     D4 F5 BF FD | 	call	#__system___float_div
2b608     FD 26 02 F6 | 	mov	local01, result1
2b60c     00 40 27 FF 
2b610     00 12 06 F6 | 	mov	arg01, ##1317011456
2b614     14 15 02 F6 | 	mov	arg02, local02
2b618     BC F3 BF FD | 	call	#__system___float_mul
2b61c     FD 12 02 F6 | 	mov	arg01, result1
2b620     00 14 06 F6 | 	mov	arg02, #0
2b624     78 F8 BF FD | 	call	#__system___float_tointeger
2b628     FD 2A 02 F6 | 	mov	local03, result1
2b62c     00 40 27 FF 
2b630     00 12 06 F6 | 	mov	arg01, ##1317011456
2b634     13 15 02 F6 | 	mov	arg02, local01
2b638     9C F3 BF FD | 	call	#__system___float_mul
2b63c     FD 12 02 F6 | 	mov	arg01, result1
2b640     00 14 06 F6 | 	mov	arg02, #0
2b644     58 F8 BF FD | 	call	#__system___float_tointeger
2b648     FD 2A 52 FD | 	qvector	local03, result1
2b64c     87 24 20 FF 
2b650     DB 2B 06 F6 | 	mov	local03, ##1078530011
2b654     19 12 62 FD | 	getqy	arg01
2b658     01 12 C6 F0 | 	sar	arg01, #1
2b65c     09 13 52 F6 | 	abs	arg01, arg01 wc
2b660     1F 2C C6 C9 |  if_b	decod	local04, #31
2b664     00 2C 06 36 |  if_ae	mov	local04, #0
2b668     68 EF BF FD | 	call	#__system___float_fromuns
2b66c     16 FB 61 F5 | 	xor	result1, local04
2b670     FD 12 02 F6 | 	mov	arg01, result1
2b674     00 40 27 FF 
2b678     00 14 06 F6 | 	mov	arg02, ##1317011456
2b67c     5C F5 BF FD | 	call	#__system___float_div
2b680     FD 14 02 F6 | 	mov	arg02, result1
2b684     15 13 02 F6 | 	mov	arg01, local03
2b688     4C F3 BF FD | 	call	#__system___float_mul
2b68c                 | LR__3911
2b68c     A7 F0 03 F6 | 	mov	ptra, fp
2b690     B2 00 A0 FD | 	call	#popregs_
2b694                 | __system____builtin_atan2f_ret
2b694     2D 00 64 FD | 	ret
2b698                 | 
2b698                 | __system____builtin_exp2f
2b698     04 4A 05 F6 | 	mov	COUNT_, #4
2b69c     A8 00 A0 FD | 	call	#pushregs_
2b6a0     09 27 02 F6 | 	mov	local01, arg01
2b6a4     00 7F 21 FF 
2b6a8     00 14 06 F6 | 	mov	arg02, ##1123942400
2b6ac     01 16 66 F6 | 	neg	arg03, #1
2b6b0     58 F7 BF FD | 	call	#__system___float_cmp
2b6b4     00 FA 55 F2 | 	cmps	result1, #0 wc
2b6b8     00 C0 3F 3F 
2b6bc     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2b6c0     DC 00 90 3D |  if_ae	jmp	#LR__3921
2b6c4     13 13 02 F6 | 	mov	arg01, local01
2b6c8     00 7F 61 FF 
2b6cc     00 14 06 F6 | 	mov	arg02, ##-1023541248
2b6d0     01 16 06 F6 | 	mov	arg03, #1
2b6d4     34 F7 BF FD | 	call	#__system___float_cmp
2b6d8     00 FA 55 F2 | 	cmps	result1, #0 wc
2b6dc     00 FA 05 C6 |  if_b	mov	result1, #0
2b6e0     BC 00 90 CD |  if_b	jmp	#LR__3921
2b6e4     13 13 02 F6 | 	mov	arg01, local01
2b6e8     00 14 06 F6 | 	mov	arg02, #0
2b6ec     B0 F7 BF FD | 	call	#__system___float_tointeger
2b6f0     FD 28 02 F6 | 	mov	local02, result1
2b6f4     14 13 52 F6 | 	abs	arg01, local02 wc
2b6f8     1F 2A C6 C9 |  if_b	decod	local03, #31
2b6fc     00 2A 06 36 |  if_ae	mov	local03, #0
2b700     D0 EE BF FD | 	call	#__system___float_fromuns
2b704     15 FB 61 F5 | 	xor	result1, local03
2b708     FD 14 02 F6 | 	mov	arg02, result1
2b70c     13 13 02 F6 | 	mov	arg01, local01
2b710     1F 14 E6 F4 | 	bitnot	arg02, #31
2b714     F0 EE BF FD | 	call	#__system___float_add
2b718     FD 2C 02 F6 | 	mov	local04, result1
2b71c     16 13 02 F6 | 	mov	arg01, local04
2b720     00 14 06 F6 | 	mov	arg02, #0
2b724     01 16 06 F6 | 	mov	arg03, #1
2b728     E0 F6 BF FD | 	call	#__system___float_cmp
2b72c     00 FA 55 F2 | 	cmps	result1, #0 wc
2b730     18 00 90 3D |  if_ae	jmp	#LR__3920
2b734     16 13 02 F6 | 	mov	arg01, local04
2b738     00 C0 1F FF 
2b73c     00 14 06 F6 | 	mov	arg02, ##1065353216
2b740     C4 EE BF FD | 	call	#__system___float_add
2b744     FD 2C 02 F6 | 	mov	local04, result1
2b748     01 28 86 F1 | 	sub	local02, #1
2b74c                 | LR__3920
2b74c     7F 28 06 F1 | 	add	local02, #127
2b750     17 28 66 F0 | 	shl	local02, #23
2b754     16 13 02 F6 | 	mov	arg01, local04
2b758     00 80 26 FF 
2b75c     00 14 06 F6 | 	mov	arg02, ##1291845632
2b760     74 F2 BF FD | 	call	#__system___float_mul
2b764     FD 12 02 F6 | 	mov	arg01, result1
2b768     00 14 06 F6 | 	mov	arg02, #0
2b76c     30 F7 BF FD | 	call	#__system___float_tointeger
2b770     FD 2C 0A F6 | 	mov	local04, result1 wz
2b774     14 FB 01 A6 |  if_e	mov	result1, local02
2b778     24 00 90 AD |  if_e	jmp	#LR__3921
2b77c     3E 2C 26 F4 | 	bith	local04, #62
2b780     0F 2C 62 FD | 	qexp	local04
2b784     14 13 02 F6 | 	mov	arg01, local02
2b788     18 14 62 FD | 	getqx	arg02
2b78c     01 14 06 F1 | 	add	arg02, #1
2b790     01 14 46 F0 | 	shr	arg02, #1
2b794     00 80 1F FF 
2b798     00 14 06 F1 | 	add	arg02, ##1056964608
2b79c     38 F2 BF FD | 	call	#__system___float_mul
2b7a0                 | LR__3921
2b7a0     A7 F0 03 F6 | 	mov	ptra, fp
2b7a4     B2 00 A0 FD | 	call	#popregs_
2b7a8                 | __system____builtin_exp2f_ret
2b7a8     2D 00 64 FD | 	ret
2b7ac                 | 
2b7ac                 | __system____builtin_log2f
2b7ac     06 4A 05 F6 | 	mov	COUNT_, #6
2b7b0     A8 00 A0 FD | 	call	#pushregs_
2b7b4     09 27 02 F6 | 	mov	local01, arg01
2b7b8     09 29 0A F6 | 	mov	local02, arg01 wz
2b7bc     00 00 40 5F 
2b7c0     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2b7c4     00 40 00 AF 
2b7c8     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2b7cc     08 01 90 AD |  if_e	jmp	#LR__3934
2b7d0     00 28 56 F2 | 	cmps	local02, #0 wc
2b7d4     00 E0 3F CF 
2b7d8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2b7dc     F8 00 90 CD |  if_b	jmp	#LR__3934
2b7e0     13 13 02 F6 | 	mov	arg01, local01
2b7e4     00 90 20 FF 
2b7e8     00 14 06 F6 | 	mov	arg02, ##1092616192
2b7ec     01 16 06 F6 | 	mov	arg03, #1
2b7f0     18 F6 BF FD | 	call	#__system___float_cmp
2b7f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b7f8     4D 2A 20 AF 
2b7fc     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2b800     D4 00 90 AD |  if_e	jmp	#LR__3934
2b804     13 13 02 F6 | 	mov	arg01, local01
2b808     FC 16 20 FF 
2b80c     54 14 06 F6 | 	mov	arg02, ##1076754516
2b810     01 16 06 F6 | 	mov	arg03, #1
2b814     F4 F5 BF FD | 	call	#__system___float_cmp
2b818     00 FA 0D F2 | 	cmp	result1, #0 wz
2b81c     55 DC 1F AF 
2b820     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2b824     B0 00 90 AD |  if_e	jmp	#LR__3934
2b828     14 2B 02 F6 | 	mov	local03, local02
2b82c     17 2A 46 F0 | 	shr	local03, #23
2b830     15 2B E2 F8 | 	getbyte	local03, local03, #0
2b834     17 29 06 F4 | 	bitl	local02, #279
2b838     14 2D 02 F6 | 	mov	local04, local02
2b83c     FF 2A 0E F2 | 	cmp	local03, #255 wz
2b840     1C 00 90 5D |  if_ne	jmp	#LR__3930
2b844     00 2C 0E F2 | 	cmp	local04, #0 wz
2b848     00 C0 3F 5F 
2b84c     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2b850     00 E0 3F AF 
2b854     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2b858     17 FB 01 F6 | 	mov	result1, local05
2b85c     78 00 90 FD | 	jmp	#LR__3934
2b860                 | LR__3930
2b860     00 2A 0E F2 | 	cmp	local03, #0 wz
2b864     17 2C 26 54 |  if_ne	bith	local04, #23
2b868     7F 2A 86 51 |  if_ne	sub	local03, #127
2b86c     28 00 90 5D |  if_ne	jmp	#LR__3933
2b870     00 2C 0E F2 | 	cmp	local04, #0 wz
2b874     00 40 00 AF 
2b878     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2b87c     58 00 90 AD |  if_e	jmp	#LR__3934
2b880     7E 2A 66 F6 | 	neg	local03, #126
2b884     97 08 48 FB | 	callpa	#(@LR__3932-@LR__3931)>>2,fcache_load_ptr_
2b888                 | LR__3931
2b888     17 2C 2E F4 | 	testbn	local04, #23 wz
2b88c     01 2C 66 A0 |  if_e	shl	local04, #1
2b890     01 2A 06 A1 |  if_e	add	local03, #1
2b894     F0 FF 9F AD |  if_e	jmp	#LR__3931
2b898                 | LR__3932
2b898                 | LR__3933
2b898     0E 2C 62 FD | 	qlog	local04
2b89c     01 2A 86 F1 | 	sub	local03, #1
2b8a0     15 13 52 F6 | 	abs	arg01, local03 wc
2b8a4     1F 30 C6 C9 |  if_b	decod	local06, #31
2b8a8     00 30 06 36 |  if_ae	mov	local06, #0
2b8ac     18 2E 62 FD | 	getqx	local05
2b8b0     9B 2E 06 F4 | 	bitl	local05, #155
2b8b4     08 2E 06 F1 | 	add	local05, #8
2b8b8     04 2E 46 F0 | 	shr	local05, #4
2b8bc     00 C0 1F FF 
2b8c0     00 2E 06 F1 | 	add	local05, ##1065353216
2b8c4     0C ED BF FD | 	call	#__system___float_fromuns
2b8c8     18 FB 61 F5 | 	xor	result1, local06
2b8cc     FD 14 02 F6 | 	mov	arg02, result1
2b8d0     17 13 02 F6 | 	mov	arg01, local05
2b8d4     30 ED BF FD | 	call	#__system___float_add
2b8d8                 | LR__3934
2b8d8     A7 F0 03 F6 | 	mov	ptra, fp
2b8dc     B2 00 A0 FD | 	call	#popregs_
2b8e0                 | __system____builtin_log2f_ret
2b8e0     2D 00 64 FD | 	ret
2b8e4                 | 
2b8e4                 | __system____builtin_powf
2b8e4     04 4A 05 F6 | 	mov	COUNT_, #4
2b8e8     A8 00 A0 FD | 	call	#pushregs_
2b8ec     09 27 02 F6 | 	mov	local01, arg01
2b8f0     0A 29 02 F6 | 	mov	local02, arg02
2b8f4     14 13 02 F6 | 	mov	arg01, local02
2b8f8     00 14 06 F6 | 	mov	arg02, #0
2b8fc     A0 F5 BF FD | 	call	#__system___float_tointeger
2b900     FD 2A 02 F6 | 	mov	local03, result1
2b904     15 13 52 F6 | 	abs	arg01, local03 wc
2b908     1F 2C C6 C9 |  if_b	decod	local04, #31
2b90c     00 2C 06 36 |  if_ae	mov	local04, #0
2b910     C0 EC BF FD | 	call	#__system___float_fromuns
2b914     16 FB 61 F5 | 	xor	result1, local04
2b918     FD 12 02 F6 | 	mov	arg01, result1
2b91c     14 15 02 F6 | 	mov	arg02, local02
2b920     01 16 06 F6 | 	mov	arg03, #1
2b924     E4 F4 BF FD | 	call	#__system___float_cmp
2b928     00 FA 0D F2 | 	cmp	result1, #0 wz
2b92c     18 00 90 5D |  if_ne	jmp	#LR__3940
2b930     00 C0 1F FF 
2b934     00 12 06 F6 | 	mov	arg01, ##1065353216
2b938     13 15 02 F6 | 	mov	arg02, local01
2b93c     15 17 02 F6 | 	mov	arg03, local03
2b940     A0 00 B0 FD | 	call	#__system___float_pow_n
2b944     58 00 90 FD | 	jmp	#LR__3941
2b948                 | LR__3940
2b948     13 13 02 F6 | 	mov	arg01, local01
2b94c     00 14 06 F6 | 	mov	arg02, #0
2b950     01 16 06 F6 | 	mov	arg03, #1
2b954     B4 F4 BF FD | 	call	#__system___float_cmp
2b958     00 FA 55 F2 | 	cmps	result1, #0 wc
2b95c     00 E0 3F CF 
2b960     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2b964     38 00 90 CD |  if_b	jmp	#LR__3941
2b968     13 13 02 F6 | 	mov	arg01, local01
2b96c     00 14 06 F6 | 	mov	arg02, #0
2b970     01 16 06 F6 | 	mov	arg03, #1
2b974     94 F4 BF FD | 	call	#__system___float_cmp
2b978     00 FA 0D F2 | 	cmp	result1, #0 wz
2b97c     00 FA 05 A6 |  if_e	mov	result1, #0
2b980     1C 00 90 AD |  if_e	jmp	#LR__3941
2b984     13 13 02 F6 | 	mov	arg01, local01
2b988     20 FE BF FD | 	call	#__system____builtin_log2f
2b98c     FD 12 02 F6 | 	mov	arg01, result1
2b990     14 15 02 F6 | 	mov	arg02, local02
2b994     40 F0 BF FD | 	call	#__system___float_mul
2b998     FD 12 02 F6 | 	mov	arg01, result1
2b99c     F8 FC BF FD | 	call	#__system____builtin_exp2f
2b9a0                 | LR__3941
2b9a0     A7 F0 03 F6 | 	mov	ptra, fp
2b9a4     B2 00 A0 FD | 	call	#popregs_
2b9a8                 | __system____builtin_powf_ret
2b9a8     2D 00 64 FD | 	ret
2b9ac                 | 
2b9ac                 | __system____builtin_logbase
2b9ac     02 4A 05 F6 | 	mov	COUNT_, #2
2b9b0     A8 00 A0 FD | 	call	#pushregs_
2b9b4     09 27 02 F6 | 	mov	local01, arg01
2b9b8     0A 13 02 F6 | 	mov	arg01, arg02
2b9bc     EC FD BF FD | 	call	#__system____builtin_log2f
2b9c0     FD 28 02 F6 | 	mov	local02, result1
2b9c4     13 13 02 F6 | 	mov	arg01, local01
2b9c8     E0 FD BF FD | 	call	#__system____builtin_log2f
2b9cc     FD 14 02 F6 | 	mov	arg02, result1
2b9d0     14 13 02 F6 | 	mov	arg01, local02
2b9d4     04 F2 BF FD | 	call	#__system___float_div
2b9d8     A7 F0 03 F6 | 	mov	ptra, fp
2b9dc     B2 00 A0 FD | 	call	#popregs_
2b9e0                 | __system____builtin_logbase_ret
2b9e0     2D 00 64 FD | 	ret
2b9e4                 | 
2b9e4                 | __system___float_pow_n
2b9e4     05 4A 05 F6 | 	mov	COUNT_, #5
2b9e8     A8 00 A0 FD | 	call	#pushregs_
2b9ec     09 27 02 F6 | 	mov	local01, arg01
2b9f0     0A 29 02 F6 | 	mov	local02, arg02
2b9f4     0B 2B 02 F6 | 	mov	local03, arg03
2b9f8     00 2A 56 F2 | 	cmps	local03, #0 wc
2b9fc     18 00 90 3D |  if_ae	jmp	#LR__3950
2ba00     01 2C 06 F6 | 	mov	local04, #1
2ba04     15 2B 62 F6 | 	neg	local03, local03
2ba08     00 2A 56 F2 | 	cmps	local03, #0 wc
2ba0c     00 FA 05 C6 |  if_b	mov	result1, #0
2ba10     94 00 90 CD |  if_b	jmp	#LR__3958
2ba14     04 00 90 FD | 	jmp	#LR__3951
2ba18                 | LR__3950
2ba18     00 2C 06 F6 | 	mov	local04, #0
2ba1c                 | LR__3951
2ba1c     00 C0 1F FF 
2ba20     00 2E 06 F6 | 	mov	local05, ##1065353216
2ba24                 | LR__3952
2ba24     01 2A 56 F2 | 	cmps	local03, #1 wc
2ba28     30 00 90 CD |  if_b	jmp	#LR__3954
2ba2c     01 2A CE F7 | 	test	local03, #1 wz
2ba30     10 00 90 AD |  if_e	jmp	#LR__3953
2ba34     17 13 02 F6 | 	mov	arg01, local05
2ba38     14 15 02 F6 | 	mov	arg02, local02
2ba3c     98 EF BF FD | 	call	#__system___float_mul
2ba40     FD 2E 02 F6 | 	mov	local05, result1
2ba44                 | LR__3953
2ba44     01 2A C6 F0 | 	sar	local03, #1
2ba48     14 13 02 F6 | 	mov	arg01, local02
2ba4c     14 15 02 F6 | 	mov	arg02, local02
2ba50     84 EF BF FD | 	call	#__system___float_mul
2ba54     FD 28 02 F6 | 	mov	local02, result1
2ba58     C8 FF 9F FD | 	jmp	#LR__3952
2ba5c                 | LR__3954
2ba5c     00 2C 0E F2 | 	cmp	local04, #0 wz
2ba60     14 00 90 AD |  if_e	jmp	#LR__3955
2ba64     13 13 02 F6 | 	mov	arg01, local01
2ba68     17 15 02 F6 | 	mov	arg02, local05
2ba6c     6C F1 BF FD | 	call	#__system___float_div
2ba70     FD 2E 02 F6 | 	mov	local05, result1
2ba74     2C 00 90 FD | 	jmp	#LR__3957
2ba78                 | LR__3955
2ba78     13 13 02 F6 | 	mov	arg01, local01
2ba7c     00 C0 1F FF 
2ba80     00 14 06 F6 | 	mov	arg02, ##1065353216
2ba84     01 16 06 F6 | 	mov	arg03, #1
2ba88     80 F3 BF FD | 	call	#__system___float_cmp
2ba8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ba90     10 00 90 AD |  if_e	jmp	#LR__3956
2ba94     13 13 02 F6 | 	mov	arg01, local01
2ba98     17 15 02 F6 | 	mov	arg02, local05
2ba9c     38 EF BF FD | 	call	#__system___float_mul
2baa0     FD 2E 02 F6 | 	mov	local05, result1
2baa4                 | LR__3956
2baa4                 | LR__3957
2baa4     17 FB 01 F6 | 	mov	result1, local05
2baa8                 | LR__3958
2baa8     A7 F0 03 F6 | 	mov	ptra, fp
2baac     B2 00 A0 FD | 	call	#popregs_
2bab0                 | __system___float_pow_n_ret
2bab0     2D 00 64 FD | 	ret
2bab4                 | 
2bab4                 | __system___gc_ptrs
2bab4     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2bab8     00 03 02 F6 | 	mov	_var02, _var01
2babc     BB 00 00 FF 
2bac0     F8 02 06 F1 | 	add	_var02, ##95992
2bac4     00 FD 09 FB | 	rdlong	result2, _var01 wz
2bac8     74 00 90 5D |  if_ne	jmp	#LR__3960
2bacc     01 FD 01 F6 | 	mov	result2, _var02
2bad0     00 FD 81 F1 | 	sub	result2, _var01
2bad4     00 03 58 FC | 	wrword	#1, _var01
2bad8     00 FB 01 F6 | 	mov	result1, _var01
2badc     02 FA 05 F1 | 	add	result1, #2
2bae0     36 00 80 FF 
2bae4     FD 20 59 FC | 	wrword	##27792, result1
2bae8     00 FB 01 F6 | 	mov	result1, _var01
2baec     04 FA 05 F1 | 	add	result1, #4
2baf0     FD 00 58 FC | 	wrword	#0, result1
2baf4     00 FB 01 F6 | 	mov	result1, _var01
2baf8     06 FA 05 F1 | 	add	result1, #6
2bafc     FD 02 58 FC | 	wrword	#1, result1
2bb00     10 00 06 F1 | 	add	_var01, #16
2bb04     FE FC 51 F6 | 	abs	result2, result2 wc
2bb08     04 FC 45 F0 | 	shr	result2, #4
2bb0c     FE FC 81 F6 | 	negc	result2, result2
2bb10     00 FD 51 FC | 	wrword	result2, _var01
2bb14     00 FD 01 F6 | 	mov	result2, _var01
2bb18     02 FC 05 F1 | 	add	result2, #2
2bb1c     36 00 80 FF 
2bb20     FE 1E 59 FC | 	wrword	##27791, result2
2bb24     00 FD 01 F6 | 	mov	result2, _var01
2bb28     04 FC 05 F1 | 	add	result2, #4
2bb2c     FE 00 58 FC | 	wrword	#0, result2
2bb30     00 FD 01 F6 | 	mov	result2, _var01
2bb34     06 FC 05 F1 | 	add	result2, #6
2bb38     FE 00 58 FC | 	wrword	#0, result2
2bb3c     10 00 86 F1 | 	sub	_var01, #16
2bb40                 | LR__3960
2bb40     00 FB 01 F6 | 	mov	result1, _var01
2bb44     01 FD 01 F6 | 	mov	result2, _var02
2bb48                 | __system___gc_ptrs_ret
2bb48     2D 00 64 FD | 	ret
2bb4c                 | 
2bb4c                 | __system___gc_tryalloc
2bb4c     0B 4A 05 F6 | 	mov	COUNT_, #11
2bb50     A8 00 A0 FD | 	call	#pushregs_
2bb54     09 27 02 F6 | 	mov	local01, arg01
2bb58     0A 29 02 F6 | 	mov	local02, arg02
2bb5c     54 FF BF FD | 	call	#__system___gc_ptrs
2bb60     FD 2A 02 F6 | 	mov	local03, result1
2bb64     FE 2C 02 F6 | 	mov	local04, result2
2bb68     15 2F 02 F6 | 	mov	local05, local03
2bb6c     00 30 06 F6 | 	mov	local06, #0
2bb70     97 1E 48 FB | 	callpa	#(@LR__3971-@LR__3970)>>2,fcache_load_ptr_
2bb74                 | LR__3970
2bb74     17 33 02 F6 | 	mov	local07, local05
2bb78     06 2E 06 F1 | 	add	local05, #6
2bb7c     17 15 EA FA | 	rdword	arg02, local05 wz
2bb80     15 13 02 F6 | 	mov	arg01, local03
2bb84     00 FA 05 A6 |  if_e	mov	result1, #0
2bb88     04 14 66 50 |  if_ne	shl	arg02, #4
2bb8c     0A 13 02 51 |  if_ne	add	arg01, arg02
2bb90     09 FB 01 56 |  if_ne	mov	result1, arg01
2bb94     FD 2E 0A F6 | 	mov	local05, result1 wz
2bb98     17 31 E2 5A |  if_ne	rdword	local06, local05
2bb9c     00 2E 0E F2 | 	cmp	local05, #0 wz
2bba0     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2bba4     08 00 90 1D |  if_a	jmp	#LR__3972
2bba8     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2bbac     C4 FF 9F 1D |  if_a	jmp	#LR__3970
2bbb0                 | LR__3971
2bbb0                 | LR__3972
2bbb0     00 2E 0E F2 | 	cmp	local05, #0 wz
2bbb4     17 FB 01 A6 |  if_e	mov	result1, local05
2bbb8     3C 01 90 AD |  if_e	jmp	#LR__3975
2bbbc     17 FD 01 F6 | 	mov	result2, local05
2bbc0     06 FC 05 F1 | 	add	result2, #6
2bbc4     FE 34 E2 FA | 	rdword	local08, result2
2bbc8     18 27 52 F2 | 	cmps	local01, local06 wc
2bbcc     C0 00 90 3D |  if_ae	jmp	#LR__3974
2bbd0     17 27 52 FC | 	wrword	local01, local05
2bbd4     17 13 02 F6 | 	mov	arg01, local05
2bbd8     13 35 02 F6 | 	mov	local08, local01
2bbdc     04 34 66 F0 | 	shl	local08, #4
2bbe0     1A 13 02 F1 | 	add	arg01, local08
2bbe4     13 31 82 F1 | 	sub	local06, local01
2bbe8     09 31 52 FC | 	wrword	local06, arg01
2bbec     09 35 02 F6 | 	mov	local08, arg01
2bbf0     02 34 06 F1 | 	add	local08, #2
2bbf4     36 00 80 FF 
2bbf8     1A 1F 59 FC | 	wrword	##27791, local08
2bbfc     17 15 0A F6 | 	mov	arg02, local05 wz
2bc00     00 FA 05 A6 |  if_e	mov	result1, #0
2bc04     15 15 82 51 |  if_ne	sub	arg02, local03
2bc08     04 14 46 50 |  if_ne	shr	arg02, #4
2bc0c     0A FB 01 56 |  if_ne	mov	result1, arg02
2bc10     09 35 02 F6 | 	mov	local08, arg01
2bc14     04 34 06 F1 | 	add	local08, #4
2bc18     1A FB 51 FC | 	wrword	result1, local08
2bc1c     17 35 02 F6 | 	mov	local08, local05
2bc20     06 34 06 F1 | 	add	local08, #6
2bc24     09 15 02 F6 | 	mov	arg02, arg01
2bc28     1A 35 E2 FA | 	rdword	local08, local08
2bc2c     06 14 06 F1 | 	add	arg02, #6
2bc30     0A 35 52 FC | 	wrword	local08, arg02
2bc34     09 37 02 F6 | 	mov	local09, arg01
2bc38     1B 15 0A F6 | 	mov	arg02, local09 wz
2bc3c     00 FA 05 A6 |  if_e	mov	result1, #0
2bc40     15 15 82 51 |  if_ne	sub	arg02, local03
2bc44     04 14 46 50 |  if_ne	shr	arg02, #4
2bc48     0A FB 01 56 |  if_ne	mov	result1, arg02
2bc4c     FD 34 02 F6 | 	mov	local08, result1
2bc50     09 39 EA FA | 	rdword	local10, arg01 wz
2bc54     00 FA 05 A6 |  if_e	mov	result1, #0
2bc58     04 38 66 50 |  if_ne	shl	local10, #4
2bc5c     1C 13 02 51 |  if_ne	add	arg01, local10
2bc60     09 FB 01 56 |  if_ne	mov	result1, arg01
2bc64     FD 3A 0A F6 | 	mov	local11, result1 wz
2bc68     24 00 90 AD |  if_e	jmp	#LR__3973
2bc6c     16 3B 52 F2 | 	cmps	local11, local04 wc
2bc70     1C 00 90 3D |  if_ae	jmp	#LR__3973
2bc74     1B 15 0A F6 | 	mov	arg02, local09 wz
2bc78     00 FA 05 A6 |  if_e	mov	result1, #0
2bc7c     15 15 82 51 |  if_ne	sub	arg02, local03
2bc80     04 14 46 50 |  if_ne	shr	arg02, #4
2bc84     0A FB 01 56 |  if_ne	mov	result1, arg02
2bc88     04 3A 06 F1 | 	add	local11, #4
2bc8c     1D FB 51 FC | 	wrword	result1, local11
2bc90                 | LR__3973
2bc90                 | LR__3974
2bc90     06 32 06 F1 | 	add	local07, #6
2bc94     19 35 52 FC | 	wrword	local08, local07
2bc98     36 00 00 FF 
2bc9c     80 36 06 F6 | 	mov	local09, ##27776
2bca0     14 37 42 F5 | 	or	local09, local02
2bca4     00 FA 05 F6 | 	mov	result1, #0
2bca8     01 FA 61 FD | 	cogid	result1
2bcac     FD 36 42 F5 | 	or	local09, result1
2bcb0     17 3B 02 F6 | 	mov	local11, local05
2bcb4     02 3A 06 F1 | 	add	local11, #2
2bcb8     1D 37 52 FC | 	wrword	local09, local11
2bcbc     15 37 02 F6 | 	mov	local09, local03
2bcc0     08 36 06 F1 | 	add	local09, #8
2bcc4     17 3B 02 F6 | 	mov	local11, local05
2bcc8     1B 37 E2 FA | 	rdword	local09, local09
2bccc     06 3A 06 F1 | 	add	local11, #6
2bcd0     1D 37 52 FC | 	wrword	local09, local11
2bcd4     17 15 0A F6 | 	mov	arg02, local05 wz
2bcd8     00 FA 05 A6 |  if_e	mov	result1, #0
2bcdc     15 15 82 51 |  if_ne	sub	arg02, local03
2bce0     04 14 46 50 |  if_ne	shr	arg02, #4
2bce4     0A FB 01 56 |  if_ne	mov	result1, arg02
2bce8     08 2A 06 F1 | 	add	local03, #8
2bcec     15 FB 51 FC | 	wrword	result1, local03
2bcf0     08 2E 06 F1 | 	add	local05, #8
2bcf4     17 FB 01 F6 | 	mov	result1, local05
2bcf8                 | LR__3975
2bcf8     A7 F0 03 F6 | 	mov	ptra, fp
2bcfc     B2 00 A0 FD | 	call	#popregs_
2bd00                 | __system___gc_tryalloc_ret
2bd00     2D 00 64 FD | 	ret
2bd04                 | 
2bd04                 | __system___gc_alloc_managed
2bd04     01 4A 05 F6 | 	mov	COUNT_, #1
2bd08     A8 00 A0 FD | 	call	#pushregs_
2bd0c     09 27 02 F6 | 	mov	local01, arg01
2bd10     00 14 06 F6 | 	mov	arg02, #0
2bd14     1C 00 B0 FD | 	call	#__system___gc_doalloc
2bd18     FD 14 0A F6 | 	mov	arg02, result1 wz
2bd1c     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2bd20     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2bd24     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2bd28     A7 F0 03 F6 | 	mov	ptra, fp
2bd2c     B2 00 A0 FD | 	call	#popregs_
2bd30                 | __system___gc_alloc_managed_ret
2bd30     2D 00 64 FD | 	ret
2bd34                 | 
2bd34                 | __system___gc_doalloc
2bd34     06 4A 05 F6 | 	mov	COUNT_, #6
2bd38     A8 00 A0 FD | 	call	#pushregs_
2bd3c     09 27 0A F6 | 	mov	local01, arg01 wz
2bd40     0A 29 02 F6 | 	mov	local02, arg02
2bd44     00 FA 05 A6 |  if_e	mov	result1, #0
2bd48     8C 00 90 AD |  if_e	jmp	#LR__3987
2bd4c     17 26 06 F1 | 	add	local01, #23
2bd50     0F 26 26 F5 | 	andn	local01, #15
2bd54     04 26 46 F0 | 	shr	local01, #4
2bd58     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2bd5c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2bd60     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2bd64     F4 BD BF FD | 	call	#__system___lockmem
2bd68     13 13 02 F6 | 	mov	arg01, local01
2bd6c     14 15 02 F6 | 	mov	arg02, local02
2bd70     D8 FD BF FD | 	call	#__system___gc_tryalloc
2bd74     FD 2A 0A F6 | 	mov	local03, result1 wz
2bd78     14 00 90 5D |  if_ne	jmp	#LR__3980
2bd7c     70 03 B0 FD | 	call	#__system___gc_docollect
2bd80     13 13 02 F6 | 	mov	arg01, local01
2bd84     14 15 02 F6 | 	mov	arg02, local02
2bd88     C0 FD BF FD | 	call	#__system___gc_tryalloc
2bd8c     FD 2A 02 F6 | 	mov	local03, result1
2bd90                 | LR__3980
2bd90     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2bd94     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2bd98     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2bd9c     09 01 68 FC | 	wrlong	#0, arg01
2bda0     00 2A 0E F2 | 	cmp	local03, #0 wz
2bda4     2C 00 90 AD |  if_e	jmp	#LR__3986
2bda8     04 26 66 F0 | 	shl	local01, #4
2bdac     08 26 86 F1 | 	sub	local01, #8
2bdb0     13 2D 52 F6 | 	abs	local04, local01 wc
2bdb4     02 2C 46 F0 | 	shr	local04, #2
2bdb8     16 2F 8A F6 | 	negc	local05, local04 wz
2bdbc     15 31 02 F6 | 	mov	local06, local03
2bdc0     10 00 90 AD |  if_e	jmp	#LR__3985
2bdc4     97 06 48 FB | 	callpa	#(@LR__3983-@LR__3981)>>2,fcache_load_ptr_
2bdc8                 | LR__3981
2bdc8     17 05 D8 FC | 	rep	@LR__3984, local05
2bdcc                 | LR__3982
2bdcc     18 01 68 FC | 	wrlong	#0, local06
2bdd0     04 30 06 F1 | 	add	local06, #4
2bdd4                 | LR__3983
2bdd4                 | LR__3984
2bdd4                 | LR__3985
2bdd4                 | LR__3986
2bdd4     15 FB 01 F6 | 	mov	result1, local03
2bdd8                 | LR__3987
2bdd8     A7 F0 03 F6 | 	mov	ptra, fp
2bddc     B2 00 A0 FD | 	call	#popregs_
2bde0                 | __system___gc_doalloc_ret
2bde0     2D 00 64 FD | 	ret
2bde4                 | 
2bde4                 | __system___gc_isvalidptr
2bde4     F8 16 06 F4 | 	bitl	arg03, #248
2bde8     08 16 86 F1 | 	sub	arg03, #8
2bdec     09 17 52 F2 | 	cmps	arg03, arg01 wc
2bdf0     08 00 90 CD |  if_b	jmp	#LR__3990
2bdf4     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2bdf8     08 00 90 CD |  if_b	jmp	#LR__3991
2bdfc                 | LR__3990
2bdfc     00 FA 05 F6 | 	mov	result1, #0
2be00     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2be04                 | LR__3991
2be04     0B 01 02 F6 | 	mov	_var01, arg03
2be08     09 01 62 F5 | 	xor	_var01, arg01
2be0c     0F 00 CE F7 | 	test	_var01, #15 wz
2be10     00 FA 05 56 |  if_ne	mov	result1, #0
2be14     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2be18     0B 01 02 F6 | 	mov	_var01, arg03
2be1c     02 00 06 F1 | 	add	_var01, #2
2be20     00 01 E2 FA | 	rdword	_var01, _var01
2be24     7F 00 00 FF 
2be28     C0 01 06 F5 | 	and	_var01, ##65472
2be2c     36 00 00 FF 
2be30     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2be34     00 FA 05 56 |  if_ne	mov	result1, #0
2be38     0B FB 01 A6 |  if_e	mov	result1, arg03
2be3c                 | __system___gc_isvalidptr_ret
2be3c     2D 00 64 FD | 	ret
2be40                 | 
2be40                 | __system___gc_free
2be40     09 17 02 F6 | 	mov	arg03, arg01
2be44     6C FC BF FD | 	call	#__system___gc_ptrs
2be48     FD 12 02 F6 | 	mov	arg01, result1
2be4c     FE 14 02 F6 | 	mov	arg02, result2
2be50     90 FF BF FD | 	call	#__system___gc_isvalidptr
2be54     FD 14 0A F6 | 	mov	arg02, result1 wz
2be58     28 00 90 AD |  if_e	jmp	#LR__4000
2be5c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2be60     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2be64     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2be68     F0 BC BF FD | 	call	#__system___lockmem
2be6c     0A 13 02 F6 | 	mov	arg01, arg02
2be70     14 00 B0 FD | 	call	#__system___gc_dofree
2be74     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2be78     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2be7c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2be80     09 01 68 FC | 	wrlong	#0, arg01
2be84                 | LR__4000
2be84                 | __system___gc_free_ret
2be84     2D 00 64 FD | 	ret
2be88                 | 
2be88                 | __system___gc_dofree
2be88     06 4A 05 F6 | 	mov	COUNT_, #6
2be8c     A8 00 A0 FD | 	call	#pushregs_
2be90     09 27 02 F6 | 	mov	local01, arg01
2be94     1C FC BF FD | 	call	#__system___gc_ptrs
2be98     FD 28 02 F6 | 	mov	local02, result1
2be9c     FE 2A 02 F6 | 	mov	local03, result2
2bea0     13 15 02 F6 | 	mov	arg02, local01
2bea4     02 14 06 F1 | 	add	arg02, #2
2bea8     36 00 80 FF 
2beac     0A 1F 59 FC | 	wrword	##27791, arg02
2beb0     13 2D 02 F6 | 	mov	local04, local01
2beb4     13 13 02 F6 | 	mov	arg01, local01
2beb8     09 2F EA FA | 	rdword	local05, arg01 wz
2bebc     00 FA 05 A6 |  if_e	mov	result1, #0
2bec0     04 2E 66 50 |  if_ne	shl	local05, #4
2bec4     17 13 02 51 |  if_ne	add	arg01, local05
2bec8     09 FB 01 56 |  if_ne	mov	result1, arg01
2becc     FD 30 02 F6 | 	mov	local06, result1
2bed0     97 24 48 FB | 	callpa	#(@LR__4011-@LR__4010)>>2,fcache_load_ptr_
2bed4                 | LR__4010
2bed4     04 2C 06 F1 | 	add	local04, #4
2bed8     16 15 EA FA | 	rdword	arg02, local04 wz
2bedc     14 13 02 F6 | 	mov	arg01, local02
2bee0     00 FA 05 A6 |  if_e	mov	result1, #0
2bee4     04 14 66 50 |  if_ne	shl	arg02, #4
2bee8     0A 13 02 51 |  if_ne	add	arg01, arg02
2beec     09 FB 01 56 |  if_ne	mov	result1, arg01
2bef0     FD 2C 0A F6 | 	mov	local04, result1 wz
2bef4     24 00 90 AD |  if_e	jmp	#LR__4012
2bef8     16 13 02 F6 | 	mov	arg01, local04
2befc     00 FA 05 F6 | 	mov	result1, #0
2bf00     02 12 06 F1 | 	add	arg01, #2
2bf04     09 13 E2 FA | 	rdword	arg01, arg01
2bf08     36 00 00 FF 
2bf0c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2bf10     01 FA 65 A6 |  if_e	neg	result1, #1
2bf14     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf18     B8 FF 9F AD |  if_e	jmp	#LR__4010
2bf1c                 | LR__4011
2bf1c                 | LR__4012
2bf1c     00 2C 0E F2 | 	cmp	local04, #0 wz
2bf20     14 2D 02 A6 |  if_e	mov	local04, local02
2bf24     16 15 02 F6 | 	mov	arg02, local04
2bf28     06 14 06 F1 | 	add	arg02, #6
2bf2c     13 13 02 F6 | 	mov	arg01, local01
2bf30     0A 15 E2 FA | 	rdword	arg02, arg02
2bf34     06 12 06 F1 | 	add	arg01, #6
2bf38     09 15 52 FC | 	wrword	arg02, arg01
2bf3c     13 15 0A F6 | 	mov	arg02, local01 wz
2bf40     00 FA 05 A6 |  if_e	mov	result1, #0
2bf44     14 15 82 51 |  if_ne	sub	arg02, local02
2bf48     04 14 46 50 |  if_ne	shr	arg02, #4
2bf4c     0A FB 01 56 |  if_ne	mov	result1, arg02
2bf50     16 15 02 F6 | 	mov	arg02, local04
2bf54     06 14 06 F1 | 	add	arg02, #6
2bf58     0A FB 51 FC | 	wrword	result1, arg02
2bf5c     14 2D 0A F2 | 	cmp	local04, local02 wz
2bf60     A4 00 90 AD |  if_e	jmp	#LR__4015
2bf64     16 13 02 F6 | 	mov	arg01, local04
2bf68     09 2F EA FA | 	rdword	local05, arg01 wz
2bf6c     00 FA 05 A6 |  if_e	mov	result1, #0
2bf70     04 2E 66 50 |  if_ne	shl	local05, #4
2bf74     17 13 02 51 |  if_ne	add	arg01, local05
2bf78     09 FB 01 56 |  if_ne	mov	result1, arg01
2bf7c     13 FB 09 F2 | 	cmp	result1, local01 wz
2bf80     84 00 90 5D |  if_ne	jmp	#LR__4014
2bf84     16 31 E2 FA | 	rdword	local06, local04
2bf88     13 15 E2 FA | 	rdword	arg02, local01
2bf8c     0A 31 02 F1 | 	add	local06, arg02
2bf90     16 31 52 FC | 	wrword	local06, local04
2bf94     13 31 02 F6 | 	mov	local06, local01
2bf98     02 30 06 F1 | 	add	local06, #2
2bf9c     18 01 58 FC | 	wrword	#0, local06
2bfa0     13 13 02 F6 | 	mov	arg01, local01
2bfa4     09 2F EA FA | 	rdword	local05, arg01 wz
2bfa8     00 FA 05 A6 |  if_e	mov	result1, #0
2bfac     04 2E 66 50 |  if_ne	shl	local05, #4
2bfb0     17 13 02 51 |  if_ne	add	arg01, local05
2bfb4     09 FB 01 56 |  if_ne	mov	result1, arg01
2bfb8     FD 30 02 F6 | 	mov	local06, result1
2bfbc     15 31 52 F2 | 	cmps	local06, local03 wc
2bfc0     20 00 90 3D |  if_ae	jmp	#LR__4013
2bfc4     16 15 0A F6 | 	mov	arg02, local04 wz
2bfc8     00 FA 05 A6 |  if_e	mov	result1, #0
2bfcc     14 15 82 51 |  if_ne	sub	arg02, local02
2bfd0     04 14 46 50 |  if_ne	shr	arg02, #4
2bfd4     0A FB 01 56 |  if_ne	mov	result1, arg02
2bfd8     18 15 02 F6 | 	mov	arg02, local06
2bfdc     04 14 06 F1 | 	add	arg02, #4
2bfe0     0A FB 51 FC | 	wrword	result1, arg02
2bfe4                 | LR__4013
2bfe4     13 15 02 F6 | 	mov	arg02, local01
2bfe8     06 14 06 F1 | 	add	arg02, #6
2bfec     16 FD 01 F6 | 	mov	result2, local04
2bff0     0A 15 E2 FA | 	rdword	arg02, arg02
2bff4     06 FC 05 F1 | 	add	result2, #6
2bff8     FE 14 52 FC | 	wrword	arg02, result2
2bffc     06 26 06 F1 | 	add	local01, #6
2c000     13 01 58 FC | 	wrword	#0, local01
2c004     16 27 02 F6 | 	mov	local01, local04
2c008                 | LR__4014
2c008                 | LR__4015
2c008     13 13 02 F6 | 	mov	arg01, local01
2c00c     09 2F EA FA | 	rdword	local05, arg01 wz
2c010     00 FA 05 A6 |  if_e	mov	result1, #0
2c014     04 2E 66 50 |  if_ne	shl	local05, #4
2c018     17 13 02 51 |  if_ne	add	arg01, local05
2c01c     09 FB 01 56 |  if_ne	mov	result1, arg01
2c020     FD 14 0A F6 | 	mov	arg02, result1 wz
2c024     B8 00 90 AD |  if_e	jmp	#LR__4017
2c028     15 15 52 F2 | 	cmps	arg02, local03 wc
2c02c     B0 00 90 3D |  if_ae	jmp	#LR__4017
2c030     0A 13 02 F6 | 	mov	arg01, arg02
2c034     00 FA 05 F6 | 	mov	result1, #0
2c038     02 12 06 F1 | 	add	arg01, #2
2c03c     09 13 E2 FA | 	rdword	arg01, arg01
2c040     36 00 00 FF 
2c044     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2c048     01 FA 65 A6 |  if_e	neg	result1, #1
2c04c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c050     8C 00 90 AD |  if_e	jmp	#LR__4017
2c054     13 2D 02 F6 | 	mov	local04, local01
2c058     16 31 E2 FA | 	rdword	local06, local04
2c05c     0A 13 02 F6 | 	mov	arg01, arg02
2c060     09 27 E2 FA | 	rdword	local01, arg01
2c064     13 31 02 F1 | 	add	local06, local01
2c068     16 31 52 FC | 	wrword	local06, local04
2c06c     09 31 02 F6 | 	mov	local06, arg01
2c070     06 30 06 F1 | 	add	local06, #6
2c074     16 27 02 F6 | 	mov	local01, local04
2c078     18 31 E2 FA | 	rdword	local06, local06
2c07c     06 26 06 F1 | 	add	local01, #6
2c080     13 31 52 FC | 	wrword	local06, local01
2c084     09 31 02 F6 | 	mov	local06, arg01
2c088     02 30 06 F1 | 	add	local06, #2
2c08c     18 55 59 FC | 	wrword	#170, local06
2c090     09 31 02 F6 | 	mov	local06, arg01
2c094     06 30 06 F1 | 	add	local06, #6
2c098     18 01 58 FC | 	wrword	#0, local06
2c09c     09 2F EA FA | 	rdword	local05, arg01 wz
2c0a0     00 FA 05 A6 |  if_e	mov	result1, #0
2c0a4     04 2E 66 50 |  if_ne	shl	local05, #4
2c0a8     17 13 02 51 |  if_ne	add	arg01, local05
2c0ac     09 FB 01 56 |  if_ne	mov	result1, arg01
2c0b0     FD 30 0A F6 | 	mov	local06, result1 wz
2c0b4     28 00 90 AD |  if_e	jmp	#LR__4016
2c0b8     15 31 52 F2 | 	cmps	local06, local03 wc
2c0bc     20 00 90 3D |  if_ae	jmp	#LR__4016
2c0c0     16 15 0A F6 | 	mov	arg02, local04 wz
2c0c4     00 FA 05 A6 |  if_e	mov	result1, #0
2c0c8     14 15 82 51 |  if_ne	sub	arg02, local02
2c0cc     04 14 46 50 |  if_ne	shr	arg02, #4
2c0d0     0A FB 01 56 |  if_ne	mov	result1, arg02
2c0d4     18 2D 02 F6 | 	mov	local04, local06
2c0d8     04 2C 06 F1 | 	add	local04, #4
2c0dc     16 FB 51 FC | 	wrword	result1, local04
2c0e0                 | LR__4016
2c0e0                 | LR__4017
2c0e0     18 FB 01 F6 | 	mov	result1, local06
2c0e4     A7 F0 03 F6 | 	mov	ptra, fp
2c0e8     B2 00 A0 FD | 	call	#popregs_
2c0ec                 | __system___gc_dofree_ret
2c0ec     2D 00 64 FD | 	ret
2c0f0                 | 
2c0f0                 | __system___gc_docollect
2c0f0     05 4A 05 F6 | 	mov	COUNT_, #5
2c0f4     A8 00 A0 FD | 	call	#pushregs_
2c0f8     B8 F9 BF FD | 	call	#__system___gc_ptrs
2c0fc     FE 26 02 F6 | 	mov	local01, result2
2c100     FD 28 02 F6 | 	mov	local02, result1
2c104     14 13 02 F6 | 	mov	arg01, local02
2c108     09 2B EA FA | 	rdword	local03, arg01 wz
2c10c     00 FA 05 A6 |  if_e	mov	result1, #0
2c110     04 2A 66 50 |  if_ne	shl	local03, #4
2c114     15 13 02 51 |  if_ne	add	arg01, local03
2c118     09 FB 01 56 |  if_ne	mov	result1, arg01
2c11c     FD 2C 0A F6 | 	mov	local04, result1 wz
2c120     00 FA 05 F6 | 	mov	result1, #0
2c124     01 FA 61 FD | 	cogid	result1
2c128     FD 2E 02 F6 | 	mov	local05, result1
2c12c     48 00 90 AD |  if_e	jmp	#LR__4022
2c130     97 22 48 FB | 	callpa	#(@LR__4021-@LR__4020)>>2,fcache_load_ptr_
2c134                 | LR__4020
2c134     13 2D 52 F2 | 	cmps	local04, local01 wc
2c138     3C 00 90 3D |  if_ae	jmp	#LR__4022
2c13c     16 15 02 F6 | 	mov	arg02, local04
2c140     02 14 06 F1 | 	add	arg02, #2
2c144     0A 15 E2 FA | 	rdword	arg02, arg02
2c148     20 14 26 F5 | 	andn	arg02, #32
2c14c     16 13 02 F6 | 	mov	arg01, local04
2c150     02 12 06 F1 | 	add	arg01, #2
2c154     09 15 52 FC | 	wrword	arg02, arg01
2c158     16 13 02 F6 | 	mov	arg01, local04
2c15c     09 2B EA FA | 	rdword	local03, arg01 wz
2c160     00 FA 05 A6 |  if_e	mov	result1, #0
2c164     04 2A 66 50 |  if_ne	shl	local03, #4
2c168     15 13 02 51 |  if_ne	add	arg01, local03
2c16c     09 FB 01 56 |  if_ne	mov	result1, arg01
2c170     FD 2C 0A F6 | 	mov	local04, result1 wz
2c174     BC FF 9F 5D |  if_ne	jmp	#LR__4020
2c178                 | LR__4021
2c178                 | LR__4022
2c178     00 2A 06 F6 | 	mov	local03, #0
2c17c     00 12 06 F6 | 	mov	arg01, #0
2c180     B0 B9 BF FD | 	call	#__system____topofstack
2c184     FD 14 02 F6 | 	mov	arg02, result1
2c188     15 13 02 F6 | 	mov	arg01, local03
2c18c     90 00 B0 FD | 	call	#__system___gc_markhub
2c190     1C 01 B0 FD | 	call	#__system___gc_markcog
2c194     14 13 02 F6 | 	mov	arg01, local02
2c198     09 2B EA FA | 	rdword	local03, arg01 wz
2c19c     00 FA 05 A6 |  if_e	mov	result1, #0
2c1a0     04 2A 66 50 |  if_ne	shl	local03, #4
2c1a4     15 13 02 51 |  if_ne	add	arg01, local03
2c1a8     09 FB 01 56 |  if_ne	mov	result1, arg01
2c1ac     FD 28 0A F6 | 	mov	local02, result1 wz
2c1b0     60 00 90 AD |  if_e	jmp	#LR__4026
2c1b4                 | LR__4023
2c1b4     14 2D 02 F6 | 	mov	local04, local02
2c1b8     16 13 02 F6 | 	mov	arg01, local04
2c1bc     09 2B EA FA | 	rdword	local03, arg01 wz
2c1c0     00 FA 05 A6 |  if_e	mov	result1, #0
2c1c4     04 2A 66 50 |  if_ne	shl	local03, #4
2c1c8     15 13 02 51 |  if_ne	add	arg01, local03
2c1cc     09 FB 01 56 |  if_ne	mov	result1, arg01
2c1d0     FD 28 02 F6 | 	mov	local02, result1
2c1d4     16 15 02 F6 | 	mov	arg02, local04
2c1d8     02 14 06 F1 | 	add	arg02, #2
2c1dc     0A 15 E2 FA | 	rdword	arg02, arg02
2c1e0     20 14 CE F7 | 	test	arg02, #32 wz
2c1e4     10 14 CE A7 |  if_e	test	arg02, #16 wz
2c1e8     1C 00 90 5D |  if_ne	jmp	#LR__4025
2c1ec     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2c1f0     17 15 0A F2 | 	cmp	arg02, local05 wz
2c1f4     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2c1f8     0C 00 90 5D |  if_ne	jmp	#LR__4024
2c1fc     16 13 02 F6 | 	mov	arg01, local04
2c200     84 FC BF FD | 	call	#__system___gc_dofree
2c204     FD 28 02 F6 | 	mov	local02, result1
2c208                 | LR__4024
2c208                 | LR__4025
2c208     00 28 0E F2 | 	cmp	local02, #0 wz
2c20c     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2c210     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__4023
2c214                 | LR__4026
2c214     A7 F0 03 F6 | 	mov	ptra, fp
2c218     B2 00 A0 FD | 	call	#popregs_
2c21c                 | __system___gc_docollect_ret
2c21c     2D 00 64 FD | 	ret
2c220                 | 
2c220                 | __system___gc_markhub
2c220     04 4A 05 F6 | 	mov	COUNT_, #4
2c224     A8 00 A0 FD | 	call	#pushregs_
2c228     09 27 02 F6 | 	mov	local01, arg01
2c22c     0A 29 02 F6 | 	mov	local02, arg02
2c230     80 F8 BF FD | 	call	#__system___gc_ptrs
2c234     FD 2A 02 F6 | 	mov	local03, result1
2c238     FE 2C 02 F6 | 	mov	local04, result2
2c23c                 | LR__4030
2c23c     14 27 52 F2 | 	cmps	local01, local02 wc
2c240     60 00 90 3D |  if_ae	jmp	#LR__4031
2c244     13 17 02 FB | 	rdlong	arg03, local01
2c248     04 26 06 F1 | 	add	local01, #4
2c24c     16 15 02 F6 | 	mov	arg02, local04
2c250     15 13 02 F6 | 	mov	arg01, local03
2c254     8C FB BF FD | 	call	#__system___gc_isvalidptr
2c258     FD 16 0A F6 | 	mov	arg03, result1 wz
2c25c     DC FF 9F AD |  if_e	jmp	#LR__4030
2c260     0B 13 02 F6 | 	mov	arg01, arg03
2c264     00 FA 05 F6 | 	mov	result1, #0
2c268     02 12 06 F1 | 	add	arg01, #2
2c26c     09 13 E2 FA | 	rdword	arg01, arg01
2c270     36 00 00 FF 
2c274     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2c278     01 FA 65 A6 |  if_e	neg	result1, #1
2c27c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c280     B8 FF 9F 5D |  if_ne	jmp	#LR__4030
2c284     0B FD 01 F6 | 	mov	result2, arg03
2c288     02 FC 05 F1 | 	add	result2, #2
2c28c     FE FC E1 FA | 	rdword	result2, result2
2c290     0F FC 25 F5 | 	andn	result2, #15
2c294     2E FC 45 F5 | 	or	result2, #46
2c298     02 16 06 F1 | 	add	arg03, #2
2c29c     0B FD 51 FC | 	wrword	result2, arg03
2c2a0     98 FF 9F FD | 	jmp	#LR__4030
2c2a4                 | LR__4031
2c2a4     A7 F0 03 F6 | 	mov	ptra, fp
2c2a8     B2 00 A0 FD | 	call	#popregs_
2c2ac                 | __system___gc_markhub_ret
2c2ac     2D 00 64 FD | 	ret
2c2b0                 | 
2c2b0                 | __system___gc_markcog
2c2b0     04 4A 05 F6 | 	mov	COUNT_, #4
2c2b4     A8 00 A0 FD | 	call	#pushregs_
2c2b8     F8 F7 BF FD | 	call	#__system___gc_ptrs
2c2bc     FD 26 02 F6 | 	mov	local01, result1
2c2c0     FE 28 02 F6 | 	mov	local02, result2
2c2c4     EF 2B 06 F6 | 	mov	local03, #495
2c2c8                 | LR__4040
2c2c8                 | 	'.live	local03
2c2c8     00 2A 96 F9 | 	alts	local03, #0
2c2cc     15 2D 02 F6 | 	mov	local04, local03
2c2d0     13 13 02 F6 | 	mov	arg01, local01
2c2d4     14 15 02 F6 | 	mov	arg02, local02
2c2d8     16 17 02 F6 | 	mov	arg03, local04
2c2dc     04 FB BF FD | 	call	#__system___gc_isvalidptr
2c2e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c2e4     18 00 90 AD |  if_e	jmp	#LR__4041
2c2e8     FD 2C 02 F6 | 	mov	local04, result1
2c2ec     02 2C 06 F1 | 	add	local04, #2
2c2f0     16 2D E2 FA | 	rdword	local04, local04
2c2f4     20 2C 46 F5 | 	or	local04, #32
2c2f8     02 FA 05 F1 | 	add	result1, #2
2c2fc     FD 2C 52 FC | 	wrword	local04, result1
2c300                 | LR__4041
2c300     01 2A 86 F1 | 	sub	local03, #1
2c304     00 2A 56 F2 | 	cmps	local03, #0 wc
2c308     BC FF 9F 3D |  if_ae	jmp	#LR__4040
2c30c     A7 F0 03 F6 | 	mov	ptra, fp
2c310     B2 00 A0 FD | 	call	#popregs_
2c314                 | __system___gc_markcog_ret
2c314     2D 00 64 FD | 	ret
2c318                 | 
2c318                 | __system__opendir
2c318     06 4A 05 F6 | 	mov	COUNT_, #6
2c31c     A8 00 A0 FD | 	call	#pushregs_
2c320     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2c324     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2c328     09 15 02 F6 | 	mov	arg02, arg01
2c32c     13 13 02 F6 | 	mov	arg01, local01
2c330     00 16 06 F6 | 	mov	arg03, #0
2c334     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2c338     B8 BF BF FD | 	call	#__system____getvfsforfile
2c33c     FD 28 0A F6 | 	mov	local02, result1 wz
2c340     10 00 90 AD |  if_e	jmp	#LR__4050
2c344     28 28 06 F1 | 	add	local02, #40
2c348     14 17 0A FB | 	rdlong	arg03, local02 wz
2c34c     28 28 86 F1 | 	sub	local02, #40
2c350     14 00 90 5D |  if_ne	jmp	#LR__4051
2c354                 | LR__4050
2c354     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c358     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2c35c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c360     00 FA 05 F6 | 	mov	result1, #0
2c364     90 00 90 FD | 	jmp	#LR__4053
2c368                 | LR__4051
2c368     5C 12 06 F6 | 	mov	arg01, #92
2c36c     10 14 06 F6 | 	mov	arg02, #16
2c370     C0 F9 BF FD | 	call	#__system___gc_doalloc
2c374     FD 2A 0A F6 | 	mov	local03, result1 wz
2c378     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c37c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2c380     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c384     00 FA 05 A6 |  if_e	mov	result1, #0
2c388     6C 00 90 AD |  if_e	jmp	#LR__4053
2c38c     28 28 06 F1 | 	add	local02, #40
2c390     14 2D 02 FB | 	rdlong	local04, local02
2c394     16 2F 02 F6 | 	mov	local05, local04
2c398     28 28 86 F1 | 	sub	local02, #40
2c39c     13 2E 46 F7 | 	zerox	local05, #19
2c3a0     14 2C 46 F0 | 	shr	local04, #20
2c3a4     02 2C 66 F0 | 	shl	local04, #2
2c3a8     ED 2C 02 F1 | 	add	local04, __methods__
2c3ac     16 2D 02 FB | 	rdlong	local04, local04
2c3b0     15 13 02 F6 | 	mov	arg01, local03
2c3b4     13 15 02 F6 | 	mov	arg02, local01
2c3b8     F2 30 02 F6 | 	mov	local06, objptr
2c3bc     17 E5 01 F6 | 	mov	objptr, local05
2c3c0     2D 2C 62 FD | 	call	local04
2c3c4     18 E5 01 F6 | 	mov	objptr, local06
2c3c8     FD 16 0A F6 | 	mov	arg03, result1 wz
2c3cc     20 00 90 AD |  if_e	jmp	#LR__4052
2c3d0     00 16 4E F2 | 	cmps	arg03, #0 wz
2c3d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c3d8     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2c3dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c3e0     15 13 02 F6 | 	mov	arg01, local03
2c3e4     58 FA BF FD | 	call	#__system___gc_free
2c3e8     00 FA 05 F6 | 	mov	result1, #0
2c3ec     08 00 90 FD | 	jmp	#LR__4053
2c3f0                 | LR__4052
2c3f0     15 29 62 FC | 	wrlong	local02, local03
2c3f4     15 FB 01 F6 | 	mov	result1, local03
2c3f8                 | LR__4053
2c3f8     A7 F0 03 F6 | 	mov	ptra, fp
2c3fc     B2 00 A0 FD | 	call	#popregs_
2c400                 | __system__opendir_ret
2c400     2D 00 64 FD | 	ret
2c404                 | 
2c404                 | __system__closedir
2c404     04 4A 05 F6 | 	mov	COUNT_, #4
2c408     A8 00 A0 FD | 	call	#pushregs_
2c40c     09 27 02 F6 | 	mov	local01, arg01
2c410     13 13 02 FB | 	rdlong	arg01, local01
2c414     2C 12 06 F1 | 	add	arg01, #44
2c418     09 29 02 FB | 	rdlong	local02, arg01
2c41c     14 2B 02 F6 | 	mov	local03, local02
2c420     13 2A 46 F7 | 	zerox	local03, #19
2c424     14 28 46 F0 | 	shr	local02, #20
2c428     02 28 66 F0 | 	shl	local02, #2
2c42c     ED 28 02 F1 | 	add	local02, __methods__
2c430     14 29 02 FB | 	rdlong	local02, local02
2c434     13 13 02 F6 | 	mov	arg01, local01
2c438     F2 2C 02 F6 | 	mov	local04, objptr
2c43c     15 E5 01 F6 | 	mov	objptr, local03
2c440     2D 28 62 FD | 	call	local02
2c444     16 E5 01 F6 | 	mov	objptr, local04
2c448     FD 2C 02 F6 | 	mov	local04, result1
2c44c     13 13 02 F6 | 	mov	arg01, local01
2c450     EC F9 BF FD | 	call	#__system___gc_free
2c454     00 2C 4E F2 | 	cmps	local04, #0 wz
2c458     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c45c     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2c460     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c464     01 FA 65 56 |  if_ne	neg	result1, #1
2c468     00 FA 05 A6 |  if_e	mov	result1, #0
2c46c     A7 F0 03 F6 | 	mov	ptra, fp
2c470     B2 00 A0 FD | 	call	#popregs_
2c474                 | __system__closedir_ret
2c474     2D 00 64 FD | 	ret
2c478                 | 
2c478                 | __system__readdir
2c478     04 4A 05 F6 | 	mov	COUNT_, #4
2c47c     A8 00 A0 FD | 	call	#pushregs_
2c480     09 15 0A FB | 	rdlong	arg02, arg01 wz
2c484     08 12 06 F1 | 	add	arg01, #8
2c488     09 27 02 F6 | 	mov	local01, arg01
2c48c     08 12 86 F1 | 	sub	arg01, #8
2c490     00 FA 05 A6 |  if_e	mov	result1, #0
2c494     5C 00 90 AD |  if_e	jmp	#LR__4061
2c498     30 14 06 F1 | 	add	arg02, #48
2c49c     0A 29 02 FB | 	rdlong	local02, arg02
2c4a0     14 2B 02 F6 | 	mov	local03, local02
2c4a4     13 2A 46 F7 | 	zerox	local03, #19
2c4a8     14 28 46 F0 | 	shr	local02, #20
2c4ac     02 28 66 F0 | 	shl	local02, #2
2c4b0     ED 28 02 F1 | 	add	local02, __methods__
2c4b4     14 29 02 FB | 	rdlong	local02, local02
2c4b8     13 15 02 F6 | 	mov	arg02, local01
2c4bc     F2 2C 02 F6 | 	mov	local04, objptr
2c4c0     15 E5 01 F6 | 	mov	objptr, local03
2c4c4     2D 28 62 FD | 	call	local02
2c4c8     16 E5 01 F6 | 	mov	objptr, local04
2c4cc     00 FA 4D F2 | 	cmps	result1, #0 wz
2c4d0     1C 00 90 AD |  if_e	jmp	#LR__4060
2c4d4     01 FA 55 F2 | 	cmps	result1, #1 wc
2c4d8     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2c4dc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c4e0     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2c4e4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c4e8     00 FA 05 F6 | 	mov	result1, #0
2c4ec     04 00 90 FD | 	jmp	#LR__4061
2c4f0                 | LR__4060
2c4f0     13 FB 01 F6 | 	mov	result1, local01
2c4f4                 | LR__4061
2c4f4     A7 F0 03 F6 | 	mov	ptra, fp
2c4f8     B2 00 A0 FD | 	call	#popregs_
2c4fc                 | __system__readdir_ret
2c4fc     2D 00 64 FD | 	ret
2c500                 | 
2c500                 | __system___openraw
2c500     15 4A 05 F6 | 	mov	COUNT_, #21
2c504     A8 00 A0 FD | 	call	#pushregs_
2c508     09 27 02 F6 | 	mov	local01, arg01
2c50c     0A 29 02 F6 | 	mov	local02, arg02
2c510     0B 2B 02 F6 | 	mov	local03, arg03
2c514     0C 2D 02 F6 | 	mov	local04, arg04
2c518     04 2E 06 F6 | 	mov	local05, #4
2c51c     13 31 02 F6 | 	mov	local06, local01
2c520     00 32 06 F6 | 	mov	local07, #0
2c524     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2c528     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2c52c     1A 13 02 F6 | 	mov	arg01, local08
2c530     14 15 02 F6 | 	mov	arg02, local02
2c534     00 16 06 F6 | 	mov	arg03, #0
2c538     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2c53c     B4 BD BF FD | 	call	#__system____getvfsforfile
2c540     FD 36 0A F6 | 	mov	local09, result1 wz
2c544     10 00 90 AD |  if_e	jmp	#LR__4070
2c548     20 36 06 F1 | 	add	local09, #32
2c54c     1B FB 09 FB | 	rdlong	result1, local09 wz
2c550     20 36 86 F1 | 	sub	local09, #32
2c554     14 00 90 5D |  if_ne	jmp	#LR__4071
2c558                 | LR__4070
2c558     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c55c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2c560     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c564     01 FA 65 F6 | 	neg	result1, #1
2c568     8C 02 90 FD | 	jmp	#LR__4084
2c56c                 | LR__4071
2c56c     18 13 02 F6 | 	mov	arg01, local06
2c570     00 14 06 F6 | 	mov	arg02, #0
2c574     34 16 06 F6 | 	mov	arg03, #52
2c578     09 39 02 F6 | 	mov	local10, arg01
2c57c     98 00 A0 FD | 	call	#\builtin_bytefill_
2c580     20 36 06 F1 | 	add	local09, #32
2c584     1B 3B 02 FB | 	rdlong	local11, local09
2c588     1D 3D 02 F6 | 	mov	local12, local11
2c58c     1D 3F 02 F6 | 	mov	local13, local11
2c590     20 36 86 F1 | 	sub	local09, #32
2c594     1F 41 02 F6 | 	mov	local14, local13
2c598     13 3C 46 F7 | 	zerox	local12, #19
2c59c     14 40 46 F0 | 	shr	local14, #20
2c5a0     02 40 66 F0 | 	shl	local14, #2
2c5a4     ED 40 02 F1 | 	add	local14, __methods__
2c5a8     20 41 02 FB | 	rdlong	local14, local14
2c5ac     18 43 02 F6 | 	mov	local15, local06
2c5b0     1A 45 02 F6 | 	mov	local16, local08
2c5b4     15 47 02 F6 | 	mov	local17, local03
2c5b8     21 13 02 F6 | 	mov	arg01, local15
2c5bc     22 15 02 F6 | 	mov	arg02, local16
2c5c0     23 17 02 F6 | 	mov	arg03, local17
2c5c4     F2 48 02 F6 | 	mov	local18, objptr
2c5c8     1E E5 01 F6 | 	mov	objptr, local12
2c5cc     2D 40 62 FD | 	call	local14
2c5d0     24 E5 01 F6 | 	mov	objptr, local18
2c5d4     FD 4A 0A F6 | 	mov	local19, result1 wz
2c5d8     04 2A CE 57 |  if_ne	test	local03, #4 wz
2c5dc     58 00 90 AD |  if_e	jmp	#LR__4072
2c5e0     24 36 06 F1 | 	add	local09, #36
2c5e4     1B 3B 02 FB | 	rdlong	local11, local09
2c5e8     1D 3D 02 F6 | 	mov	local12, local11
2c5ec     1D 3F 02 F6 | 	mov	local13, local11
2c5f0     24 36 86 F1 | 	sub	local09, #36
2c5f4     1F 41 02 F6 | 	mov	local14, local13
2c5f8     13 3C 46 F7 | 	zerox	local12, #19
2c5fc     14 40 46 F0 | 	shr	local14, #20
2c600     02 40 66 F0 | 	shl	local14, #2
2c604     ED 40 02 F1 | 	add	local14, __methods__
2c608     20 41 02 FB | 	rdlong	local14, local14
2c60c     18 43 02 F6 | 	mov	local15, local06
2c610     1A 45 02 F6 | 	mov	local16, local08
2c614     16 47 02 F6 | 	mov	local17, local04
2c618     21 13 02 F6 | 	mov	arg01, local15
2c61c     22 15 02 F6 | 	mov	arg02, local16
2c620     23 17 02 F6 | 	mov	arg03, local17
2c624     F2 48 02 F6 | 	mov	local18, objptr
2c628     1E E5 01 F6 | 	mov	objptr, local12
2c62c     2D 40 62 FD | 	call	local14
2c630     24 E5 01 F6 | 	mov	objptr, local18
2c634     FD 4A 02 F6 | 	mov	local19, result1
2c638                 | LR__4072
2c638     00 4A 0E F2 | 	cmp	local19, #0 wz
2c63c     8C 01 90 5D |  if_ne	jmp	#LR__4082
2c640     15 4D 02 F6 | 	mov	local20, local03
2c644     03 4C 0E F5 | 	and	local20, #3 wz
2c648     02 2E 46 55 |  if_ne	or	local05, #2
2c64c     01 4C 0E F2 | 	cmp	local20, #1 wz
2c650     01 2E 46 55 |  if_ne	or	local05, #1
2c654     20 2A CE F7 | 	test	local03, #32 wz
2c658     C0 2E 46 55 |  if_ne	or	local05, #192
2c65c     08 30 06 F1 | 	add	local06, #8
2c660     18 2F 62 FC | 	wrlong	local05, local06
2c664     0C 30 06 F1 | 	add	local06, #12
2c668     18 4F 0A FB | 	rdlong	local21, local06 wz
2c66c     14 30 86 F1 | 	sub	local06, #20
2c670     18 00 90 5D |  if_ne	jmp	#LR__4073
2c674     04 36 06 F1 | 	add	local09, #4
2c678     1B 4F 02 FB | 	rdlong	local21, local09
2c67c     04 36 86 F1 | 	sub	local09, #4
2c680     14 30 06 F1 | 	add	local06, #20
2c684     18 4F 62 FC | 	wrlong	local21, local06
2c688     14 30 86 F1 | 	sub	local06, #20
2c68c                 | LR__4073
2c68c     18 30 06 F1 | 	add	local06, #24
2c690     18 4F 0A FB | 	rdlong	local21, local06 wz
2c694     18 30 86 F1 | 	sub	local06, #24
2c698     18 00 90 5D |  if_ne	jmp	#LR__4074
2c69c     08 36 06 F1 | 	add	local09, #8
2c6a0     1B 4F 02 FB | 	rdlong	local21, local09
2c6a4     08 36 86 F1 | 	sub	local09, #8
2c6a8     18 30 06 F1 | 	add	local06, #24
2c6ac     18 4F 62 FC | 	wrlong	local21, local06
2c6b0     18 30 86 F1 | 	sub	local06, #24
2c6b4                 | LR__4074
2c6b4     24 30 06 F1 | 	add	local06, #36
2c6b8     18 4F 0A FB | 	rdlong	local21, local06 wz
2c6bc     24 30 86 F1 | 	sub	local06, #36
2c6c0     1B 4F 02 AB |  if_e	rdlong	local21, local09
2c6c4     24 30 06 A1 |  if_e	add	local06, #36
2c6c8     18 4F 62 AC |  if_e	wrlong	local21, local06
2c6cc     24 30 86 A1 |  if_e	sub	local06, #36
2c6d0     28 30 06 F1 | 	add	local06, #40
2c6d4     18 4F 0A FB | 	rdlong	local21, local06 wz
2c6d8     28 30 86 F1 | 	sub	local06, #40
2c6dc     18 00 90 5D |  if_ne	jmp	#LR__4075
2c6e0     10 36 06 F1 | 	add	local09, #16
2c6e4     1B 4F 02 FB | 	rdlong	local21, local09
2c6e8     10 36 86 F1 | 	sub	local09, #16
2c6ec     28 30 06 F1 | 	add	local06, #40
2c6f0     18 4F 62 FC | 	wrlong	local21, local06
2c6f4     28 30 86 F1 | 	sub	local06, #40
2c6f8                 | LR__4075
2c6f8     30 30 06 F1 | 	add	local06, #48
2c6fc     18 4F 0A FB | 	rdlong	local21, local06 wz
2c700     30 30 86 F1 | 	sub	local06, #48
2c704     18 00 90 5D |  if_ne	jmp	#LR__4076
2c708     0C 36 06 F1 | 	add	local09, #12
2c70c     1B 4F 02 FB | 	rdlong	local21, local09
2c710     0C 36 86 F1 | 	sub	local09, #12
2c714     30 30 06 F1 | 	add	local06, #48
2c718     18 4F 62 FC | 	wrlong	local21, local06
2c71c     30 30 86 F1 | 	sub	local06, #48
2c720                 | LR__4076
2c720     1C 30 06 F1 | 	add	local06, #28
2c724     18 4F 0A FB | 	rdlong	local21, local06 wz
2c728     1C 30 86 F1 | 	sub	local06, #28
2c72c     1C 00 90 5D |  if_ne	jmp	#LR__4077
2c730     01 32 06 F6 | 	mov	local07, #1
2c734     F2 12 02 F6 | 	mov	arg01, objptr
2c738     00 A8 05 FF 
2c73c     00 12 46 F5 | 	or	arg01, ##189792256
2c740     1C 30 06 F1 | 	add	local06, #28
2c744     18 13 62 FC | 	wrlong	arg01, local06
2c748     1C 30 86 F1 | 	sub	local06, #28
2c74c                 | LR__4077
2c74c     20 30 06 F1 | 	add	local06, #32
2c750     18 4F 0A FB | 	rdlong	local21, local06 wz
2c754     20 30 86 F1 | 	sub	local06, #32
2c758     1C 00 90 5D |  if_ne	jmp	#LR__4078
2c75c     01 32 06 F6 | 	mov	local07, #1
2c760     F2 12 02 F6 | 	mov	arg01, objptr
2c764     00 B0 05 FF 
2c768     00 12 46 F5 | 	or	arg01, ##190840832
2c76c     20 30 06 F1 | 	add	local06, #32
2c770     18 13 62 FC | 	wrlong	arg01, local06
2c774     20 30 86 F1 | 	sub	local06, #32
2c778                 | LR__4078
2c778     2C 30 06 F1 | 	add	local06, #44
2c77c     18 4F 0A FB | 	rdlong	local21, local06 wz
2c780     2C 30 86 F1 | 	sub	local06, #44
2c784     44 00 90 5D |  if_ne	jmp	#LR__4081
2c788     14 36 06 F1 | 	add	local09, #20
2c78c     1B 4F 0A FB | 	rdlong	local21, local09 wz
2c790     14 36 86 F1 | 	sub	local09, #20
2c794     18 00 90 AD |  if_e	jmp	#LR__4079
2c798     14 36 06 F1 | 	add	local09, #20
2c79c     1B 4F 02 FB | 	rdlong	local21, local09
2c7a0     2C 30 06 F1 | 	add	local06, #44
2c7a4     18 4F 62 FC | 	wrlong	local21, local06
2c7a8     2C 30 86 F1 | 	sub	local06, #44
2c7ac     1C 00 90 FD | 	jmp	#LR__4080
2c7b0                 | LR__4079
2c7b0     01 32 06 F6 | 	mov	local07, #1
2c7b4     F2 12 02 F6 | 	mov	arg01, objptr
2c7b8     00 B8 05 FF 
2c7bc     00 12 46 F5 | 	or	arg01, ##191889408
2c7c0     2C 30 06 F1 | 	add	local06, #44
2c7c4     18 13 62 FC | 	wrlong	arg01, local06
2c7c8     2C 30 86 F1 | 	sub	local06, #44
2c7cc                 | LR__4080
2c7cc                 | LR__4081
2c7cc                 | LR__4082
2c7cc     00 32 0E F2 | 	cmp	local07, #0 wz
2c7d0     18 13 02 56 |  if_ne	mov	arg01, local06
2c7d4     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2c7d8     00 4A 0E F2 | 	cmp	local19, #0 wz
2c7dc     00 12 06 A6 |  if_e	mov	arg01, #0
2c7e0     10 00 90 5D |  if_ne	jmp	#LR__4083
2c7e4     00 12 4E F2 | 	cmps	arg01, #0 wz
2c7e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c7ec     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c7f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c7f4                 | LR__4083
2c7f4     25 FB 01 F6 | 	mov	result1, local19
2c7f8                 | LR__4084
2c7f8     A7 F0 03 F6 | 	mov	ptra, fp
2c7fc     B2 00 A0 FD | 	call	#popregs_
2c800                 | __system___openraw_ret
2c800     2D 00 64 FD | 	ret
2c804                 | 
2c804                 | __system___closeraw
2c804     05 4A 05 F6 | 	mov	COUNT_, #5
2c808     A8 00 A0 FD | 	call	#pushregs_
2c80c     09 27 02 F6 | 	mov	local01, arg01
2c810     00 28 06 F6 | 	mov	local02, #0
2c814     08 26 06 F1 | 	add	local01, #8
2c818     13 FB 09 FB | 	rdlong	result1, local01 wz
2c81c     08 26 86 F1 | 	sub	local01, #8
2c820     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c824     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2c828     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c82c     01 FA 65 A6 |  if_e	neg	result1, #1
2c830     A8 00 90 AD |  if_e	jmp	#LR__4092
2c834     2C 26 06 F1 | 	add	local01, #44
2c838     13 FB 09 FB | 	rdlong	result1, local01 wz
2c83c     2C 26 86 F1 | 	sub	local01, #44
2c840     38 00 90 AD |  if_e	jmp	#LR__4090
2c844     2C 26 06 F1 | 	add	local01, #44
2c848     13 2B 02 FB | 	rdlong	local03, local01
2c84c     15 2D 02 F6 | 	mov	local04, local03
2c850     2C 26 86 F1 | 	sub	local01, #44
2c854     13 2C 46 F7 | 	zerox	local04, #19
2c858     14 2A 46 F0 | 	shr	local03, #20
2c85c     02 2A 66 F0 | 	shl	local03, #2
2c860     ED 2A 02 F1 | 	add	local03, __methods__
2c864     15 2B 02 FB | 	rdlong	local03, local03
2c868     13 13 02 F6 | 	mov	arg01, local01
2c86c     F2 2E 02 F6 | 	mov	local05, objptr
2c870     16 E5 01 F6 | 	mov	objptr, local04
2c874     2D 2A 62 FD | 	call	local03
2c878     17 E5 01 F6 | 	mov	objptr, local05
2c87c                 | LR__4090
2c87c     24 26 06 F1 | 	add	local01, #36
2c880     13 2F 0A FB | 	rdlong	local05, local01 wz
2c884     24 26 86 F1 | 	sub	local01, #36
2c888     3C 00 90 AD |  if_e	jmp	#LR__4091
2c88c     24 26 06 F1 | 	add	local01, #36
2c890     13 2B 02 FB | 	rdlong	local03, local01
2c894     15 2D 02 F6 | 	mov	local04, local03
2c898     24 26 86 F1 | 	sub	local01, #36
2c89c     13 2C 46 F7 | 	zerox	local04, #19
2c8a0     14 2A 46 F0 | 	shr	local03, #20
2c8a4     02 2A 66 F0 | 	shl	local03, #2
2c8a8     ED 2A 02 F1 | 	add	local03, __methods__
2c8ac     15 2B 02 FB | 	rdlong	local03, local03
2c8b0     13 13 02 F6 | 	mov	arg01, local01
2c8b4     F2 2E 02 F6 | 	mov	local05, objptr
2c8b8     16 E5 01 F6 | 	mov	objptr, local04
2c8bc     2D 2A 62 FD | 	call	local03
2c8c0     17 E5 01 F6 | 	mov	objptr, local05
2c8c4     FD 28 02 F6 | 	mov	local02, result1
2c8c8                 | LR__4091
2c8c8     13 13 02 F6 | 	mov	arg01, local01
2c8cc     00 14 06 F6 | 	mov	arg02, #0
2c8d0     34 16 06 F6 | 	mov	arg03, #52
2c8d4     98 00 A0 FD | 	call	#\builtin_bytefill_
2c8d8     14 FB 01 F6 | 	mov	result1, local02
2c8dc                 | LR__4092
2c8dc     A7 F0 03 F6 | 	mov	ptra, fp
2c8e0     B2 00 A0 FD | 	call	#popregs_
2c8e4                 | __system___closeraw_ret
2c8e4     2D 00 64 FD | 	ret
2c8e8                 | 
2c8e8                 | __system___vfs_open_sdcardx
2c8e8     0B 4A 05 F6 | 	mov	COUNT_, #11
2c8ec     A8 00 A0 FD | 	call	#pushregs_
2c8f0     09 2B 02 F6 | 	mov	local03, arg01
2c8f4     0A 2D 02 F6 | 	mov	local04, arg02
2c8f8     0B 2F 02 F6 | 	mov	local05, arg03
2c8fc     0C 31 02 F6 | 	mov	local06, arg04
2c900     01 00 00 FF 
2c904     24 12 06 F6 | 	mov	arg01, ##548
2c908     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2c90c     FD 32 02 F6 | 	mov	local07, result1
2c910     01 00 00 FF 
2c914     34 12 06 F6 | 	mov	arg01, ##564
2c918     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2c91c     FD 34 02 F6 | 	mov	local08, result1
2c920     15 19 02 F6 | 	mov	arg04, local03
2c924     1F 18 C6 F0 | 	sar	arg04, #31
2c928     15 17 02 F6 | 	mov	arg03, local03
2c92c     01 12 06 F6 | 	mov	arg01, #1
2c930     00 14 06 F6 | 	mov	arg02, #0
2c934     E8 DB BF FD | 	call	#__system___int64_shl
2c938     FD 26 02 F6 | 	mov	local01, result1
2c93c     FE 36 02 F6 | 	mov	local09, result2
2c940     16 19 02 F6 | 	mov	arg04, local04
2c944     1F 18 C6 F0 | 	sar	arg04, #31
2c948     16 17 02 F6 | 	mov	arg03, local04
2c94c     01 12 06 F6 | 	mov	arg01, #1
2c950     00 14 06 F6 | 	mov	arg02, #0
2c954     C8 DB BF FD | 	call	#__system___int64_shl
2c958     FD 26 42 F5 | 	or	local01, result1
2c95c     FE 36 42 F5 | 	or	local09, result2
2c960     17 19 02 F6 | 	mov	arg04, local05
2c964     1F 18 C6 F0 | 	sar	arg04, #31
2c968     17 17 02 F6 | 	mov	arg03, local05
2c96c     01 12 06 F6 | 	mov	arg01, #1
2c970     00 14 06 F6 | 	mov	arg02, #0
2c974     A8 DB BF FD | 	call	#__system___int64_shl
2c978     FD 26 42 F5 | 	or	local01, result1
2c97c     FE 36 42 F5 | 	or	local09, result2
2c980     18 19 02 F6 | 	mov	arg04, local06
2c984     1F 18 C6 F0 | 	sar	arg04, #31
2c988     18 17 02 F6 | 	mov	arg03, local06
2c98c     01 12 06 F6 | 	mov	arg01, #1
2c990     00 14 06 F6 | 	mov	arg02, #0
2c994     88 DB BF FD | 	call	#__system___int64_shl
2c998     1B 15 02 F6 | 	mov	arg02, local09
2c99c     FD 26 42 F5 | 	or	local01, result1
2c9a0     0A FD 41 F5 | 	or	result2, arg02
2c9a4     FE 28 02 F6 | 	mov	local02, result2
2c9a8     13 13 02 F6 | 	mov	arg01, local01
2c9ac     14 15 02 F6 | 	mov	arg02, local02
2c9b0     A4 DB BF FD | 	call	#__system___usepins
2c9b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c9b8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c9bc     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2c9c0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c9c4     00 FA 05 A6 |  if_e	mov	result1, #0
2c9c8     B4 00 90 AD |  if_e	jmp	#LR__4102
2c9cc     13 39 02 F6 | 	mov	local10, local01
2c9d0     14 37 02 F6 | 	mov	local09, local02
2c9d4     01 00 00 FF 
2c9d8     08 32 06 F1 | 	add	local07, ##520
2c9dc     19 39 62 FC | 	wrlong	local10, local07
2c9e0     04 32 06 F1 | 	add	local07, #4
2c9e4     19 37 62 FC | 	wrlong	local09, local07
2c9e8     01 00 00 FF 
2c9ec     0C 32 86 F1 | 	sub	local07, ##524
2c9f0     18 1B 02 F6 | 	mov	arg05, local06
2c9f4     00 12 06 F6 | 	mov	arg01, #0
2c9f8     15 15 02 F6 | 	mov	arg02, local03
2c9fc     16 17 02 F6 | 	mov	arg03, local04
2ca00     17 19 02 F6 | 	mov	arg04, local05
2ca04     F2 38 02 F6 | 	mov	local10, objptr
2ca08     19 E5 01 F6 | 	mov	objptr, local07
2ca0c     8C 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2ca10     1C E5 01 F6 | 	mov	objptr, local10
2ca14     FD 3A 0A F6 | 	mov	local11, result1 wz
2ca18     24 00 90 5D |  if_ne	jmp	#LR__4100
2ca1c     BB 01 00 FF 
2ca20     E2 14 06 F6 | 	mov	arg02, ##@LR__5527
2ca24     1A 13 02 F6 | 	mov	arg01, local08
2ca28     00 16 06 F6 | 	mov	arg03, #0
2ca2c     F2 3A 02 F6 | 	mov	local11, objptr
2ca30     19 E5 01 F6 | 	mov	objptr, local07
2ca34     BC 60 B0 FD | 	call	#_fatfs_cc_f_mount
2ca38     1D E5 01 F6 | 	mov	objptr, local11
2ca3c     FD 3A 02 F6 | 	mov	local11, result1
2ca40                 | LR__4100
2ca40     00 3A 0E F2 | 	cmp	local11, #0 wz
2ca44     24 00 90 AD |  if_e	jmp	#LR__4101
2ca48     13 13 02 F6 | 	mov	arg01, local01
2ca4c     14 15 02 F6 | 	mov	arg02, local02
2ca50     58 DB BF FD | 	call	#__system___freepins
2ca54     1D 13 6A F6 | 	neg	arg01, local11 wz
2ca58     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ca5c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2ca60     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ca64     00 FA 05 F6 | 	mov	result1, #0
2ca68     14 00 90 FD | 	jmp	#LR__4102
2ca6c                 | LR__4101
2ca6c     19 13 02 F6 | 	mov	arg01, local07
2ca70     F2 3A 02 F6 | 	mov	local11, objptr
2ca74     19 E5 01 F6 | 	mov	objptr, local07
2ca78     58 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2ca7c     1D E5 01 F6 | 	mov	objptr, local11
2ca80                 | LR__4102
2ca80     A7 F0 03 F6 | 	mov	ptra, fp
2ca84     B2 00 A0 FD | 	call	#popregs_
2ca88                 | __system___vfs_open_sdcardx_ret
2ca88     2D 00 64 FD | 	ret
2ca8c                 | 
2ca8c                 | __system____default_getc
2ca8c     03 4A 05 F6 | 	mov	COUNT_, #3
2ca90     A8 00 A0 FD | 	call	#pushregs_
2ca94     09 27 02 F6 | 	mov	local01, arg01
2ca98     13 29 02 FB | 	rdlong	local02, local01
2ca9c     08 28 06 F1 | 	add	local02, #8
2caa0     14 2B 02 FB | 	rdlong	local03, local02
2caa4     02 2A CE F7 | 	test	local03, #2 wz
2caa8     13 13 02 56 |  if_ne	mov	arg01, local01
2caac     00 01 B0 5D |  if_ne	call	#__system____default_flush
2cab0     14 2B 02 FB | 	rdlong	local03, local02
2cab4     01 2A 46 F5 | 	or	local03, #1
2cab8     14 2B 62 FC | 	wrlong	local03, local02
2cabc     08 28 86 F1 | 	sub	local02, #8
2cac0     14 2B 0A FB | 	rdlong	local03, local02 wz
2cac4     0C 00 90 5D |  if_ne	jmp	#LR__4110
2cac8     13 13 02 F6 | 	mov	arg01, local01
2cacc     70 18 B0 FD | 	call	#__system____default_filbuf
2cad0     FD 2A 02 F6 | 	mov	local03, result1
2cad4                 | LR__4110
2cad4     01 2A 56 F2 | 	cmps	local03, #1 wc
2cad8     01 FA 65 C6 |  if_b	neg	result1, #1
2cadc     1C 00 90 CD |  if_b	jmp	#LR__4111
2cae0     01 2A 86 F1 | 	sub	local03, #1
2cae4     14 2B 62 FC | 	wrlong	local03, local02
2cae8     04 28 06 F1 | 	add	local02, #4
2caec     14 2B 02 FB | 	rdlong	local03, local02
2caf0     15 FB C1 FA | 	rdbyte	result1, local03
2caf4     01 2A 06 F1 | 	add	local03, #1
2caf8     14 2B 62 FC | 	wrlong	local03, local02
2cafc                 | LR__4111
2cafc     A7 F0 03 F6 | 	mov	ptra, fp
2cb00     B2 00 A0 FD | 	call	#popregs_
2cb04                 | __system____default_getc_ret
2cb04     2D 00 64 FD | 	ret
2cb08                 | 
2cb08                 | __system____default_putc
2cb08     06 4A 05 F6 | 	mov	COUNT_, #6
2cb0c     A8 00 A0 FD | 	call	#pushregs_
2cb10     09 27 02 F6 | 	mov	local01, arg01
2cb14     0A 29 02 F6 | 	mov	local02, arg02
2cb18     14 2B 02 FB | 	rdlong	local03, local02
2cb1c     08 2A 06 F1 | 	add	local03, #8
2cb20     15 FB 01 FB | 	rdlong	result1, local03
2cb24     01 FA CD F7 | 	test	result1, #1 wz
2cb28     14 13 02 56 |  if_ne	mov	arg01, local02
2cb2c     80 00 B0 5D |  if_ne	call	#__system____default_flush
2cb30     15 2D 02 FB | 	rdlong	local04, local03
2cb34     02 2C 46 F5 | 	or	local04, #2
2cb38     15 2D 62 FC | 	wrlong	local04, local03
2cb3c     08 2A 86 F1 | 	sub	local03, #8
2cb40     15 2F 02 FB | 	rdlong	local05, local03
2cb44     10 2A 06 F1 | 	add	local03, #16
2cb48     15 15 02 FB | 	rdlong	arg02, local03
2cb4c     10 2A 86 F1 | 	sub	local03, #16
2cb50     17 FB 01 F6 | 	mov	result1, local05
2cb54     0A FB 01 F1 | 	add	result1, arg02
2cb58     FD 26 42 FC | 	wrbyte	local01, result1
2cb5c     13 27 E2 F8 | 	getbyte	local01, local01, #0
2cb60     01 2E 06 F1 | 	add	local05, #1
2cb64     15 2F 62 FC | 	wrlong	local05, local03
2cb68     06 28 06 F1 | 	add	local02, #6
2cb6c     14 31 EA FA | 	rdword	local06, local02 wz
2cb70     06 28 86 F1 | 	sub	local02, #6
2cb74     0C 2A 06 51 |  if_ne	add	local03, #12
2cb78     15 2D 02 5B |  if_ne	rdlong	local04, local03
2cb7c     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2cb80     0C 00 90 AD |  if_e	jmp	#LR__4120
2cb84     0A 26 0E F2 | 	cmp	local01, #10 wz
2cb88     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2cb8c     10 00 90 5D |  if_ne	jmp	#LR__4121
2cb90                 | LR__4120
2cb90     14 13 02 F6 | 	mov	arg01, local02
2cb94     18 00 B0 FD | 	call	#__system____default_flush
2cb98     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb9c     01 26 66 56 |  if_ne	neg	local01, #1
2cba0                 | LR__4121
2cba0     13 FB 01 F6 | 	mov	result1, local01
2cba4     A7 F0 03 F6 | 	mov	ptra, fp
2cba8     B2 00 A0 FD | 	call	#popregs_
2cbac                 | __system____default_putc_ret
2cbac     2D 00 64 FD | 	ret
2cbb0                 | 
2cbb0                 | __system____default_flush
2cbb0     06 4A 05 F6 | 	mov	COUNT_, #6
2cbb4     A8 00 A0 FD | 	call	#pushregs_
2cbb8     09 27 02 F6 | 	mov	local01, arg01
2cbbc     13 29 02 FB | 	rdlong	local02, local01
2cbc0     14 2B 02 FB | 	rdlong	local03, local02
2cbc4     08 28 06 F1 | 	add	local02, #8
2cbc8     14 FB 01 FB | 	rdlong	result1, local02
2cbcc     08 28 86 F1 | 	sub	local02, #8
2cbd0     02 FA CD F7 | 	test	result1, #2 wz
2cbd4     D0 00 90 AD |  if_e	jmp	#LR__4132
2cbd8     01 2A 56 F2 | 	cmps	local03, #1 wc
2cbdc     20 01 90 CD |  if_b	jmp	#LR__4134
2cbe0     08 26 06 F1 | 	add	local01, #8
2cbe4     13 FB 01 FB | 	rdlong	result1, local01
2cbe8     08 26 86 F1 | 	sub	local01, #8
2cbec     40 FA CD F7 | 	test	result1, #64 wz
2cbf0     68 00 90 AD |  if_e	jmp	#LR__4131
2cbf4     08 26 06 F1 | 	add	local01, #8
2cbf8     13 17 02 FB | 	rdlong	arg03, local01
2cbfc     08 26 86 F1 | 	sub	local01, #8
2cc00     80 16 CE F7 | 	test	arg03, #128 wz
2cc04     54 00 90 AD |  if_e	jmp	#LR__4130
2cc08     30 26 06 F1 | 	add	local01, #48
2cc0c     13 2D 02 FB | 	rdlong	local04, local01
2cc10     16 2F 02 F6 | 	mov	local05, local04
2cc14     30 26 86 F1 | 	sub	local01, #48
2cc18     13 2E 46 F7 | 	zerox	local05, #19
2cc1c     14 2C 46 F0 | 	shr	local04, #20
2cc20     02 2C 66 F0 | 	shl	local04, #2
2cc24     ED 2C 02 F1 | 	add	local04, __methods__
2cc28     16 2D 02 FB | 	rdlong	local04, local04
2cc2c     13 13 02 F6 | 	mov	arg01, local01
2cc30     00 14 06 F6 | 	mov	arg02, #0
2cc34     02 16 06 F6 | 	mov	arg03, #2
2cc38     F2 30 02 F6 | 	mov	local06, objptr
2cc3c     17 E5 01 F6 | 	mov	objptr, local05
2cc40     2D 2C 62 FD | 	call	local04
2cc44     18 E5 01 F6 | 	mov	objptr, local06
2cc48     08 26 06 F1 | 	add	local01, #8
2cc4c     13 31 02 FB | 	rdlong	local06, local01
2cc50     80 30 26 F5 | 	andn	local06, #128
2cc54     13 31 62 FC | 	wrlong	local06, local01
2cc58     08 26 86 F1 | 	sub	local01, #8
2cc5c                 | LR__4130
2cc5c                 | LR__4131
2cc5c     18 26 06 F1 | 	add	local01, #24
2cc60     13 2D 02 FB | 	rdlong	local04, local01
2cc64     16 2F 02 F6 | 	mov	local05, local04
2cc68     18 26 86 F1 | 	sub	local01, #24
2cc6c     13 2E 46 F7 | 	zerox	local05, #19
2cc70     14 2C 46 F0 | 	shr	local04, #20
2cc74     02 2C 66 F0 | 	shl	local04, #2
2cc78     ED 2C 02 F1 | 	add	local04, __methods__
2cc7c     16 2D 02 FB | 	rdlong	local04, local04
2cc80     10 28 06 F1 | 	add	local02, #16
2cc84     14 15 02 FB | 	rdlong	arg02, local02
2cc88     10 28 86 F1 | 	sub	local02, #16
2cc8c     13 13 02 F6 | 	mov	arg01, local01
2cc90     15 17 02 F6 | 	mov	arg03, local03
2cc94     F2 30 02 F6 | 	mov	local06, objptr
2cc98     17 E5 01 F6 | 	mov	objptr, local05
2cc9c     2D 2C 62 FD | 	call	local04
2cca0     18 E5 01 F6 | 	mov	objptr, local06
2cca4     58 00 90 FD | 	jmp	#LR__4134
2cca8                 | LR__4132
2cca8     08 28 06 F1 | 	add	local02, #8
2ccac     14 31 02 FB | 	rdlong	local06, local02
2ccb0     08 28 86 F1 | 	sub	local02, #8
2ccb4     01 30 CE F7 | 	test	local06, #1 wz
2ccb8     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2ccbc     40 00 90 AD |  if_e	jmp	#LR__4133
2ccc0     30 26 06 F1 | 	add	local01, #48
2ccc4     13 2D 02 FB | 	rdlong	local04, local01
2ccc8     16 2F 02 F6 | 	mov	local05, local04
2cccc     30 26 86 F1 | 	sub	local01, #48
2ccd0     13 2E 46 F7 | 	zerox	local05, #19
2ccd4     14 2C 46 F0 | 	shr	local04, #20
2ccd8     02 2C 66 F0 | 	shl	local04, #2
2ccdc     ED 2C 02 F1 | 	add	local04, __methods__
2cce0     16 2D 02 FB | 	rdlong	local04, local04
2cce4     13 13 02 F6 | 	mov	arg01, local01
2cce8     15 15 62 F6 | 	neg	arg02, local03
2ccec     01 16 06 F6 | 	mov	arg03, #1
2ccf0     F2 30 02 F6 | 	mov	local06, objptr
2ccf4     17 E5 01 F6 | 	mov	objptr, local05
2ccf8     2D 2C 62 FD | 	call	local04
2ccfc     18 E5 01 F6 | 	mov	objptr, local06
2cd00                 | LR__4133
2cd00                 | LR__4134
2cd00     14 01 68 FC | 	wrlong	#0, local02
2cd04     04 28 06 F1 | 	add	local02, #4
2cd08     14 01 68 FC | 	wrlong	#0, local02
2cd0c     04 28 06 F1 | 	add	local02, #4
2cd10     14 01 68 FC | 	wrlong	#0, local02
2cd14     00 FA 05 F6 | 	mov	result1, #0
2cd18     A7 F0 03 F6 | 	mov	ptra, fp
2cd1c     B2 00 A0 FD | 	call	#popregs_
2cd20                 | __system____default_flush_ret
2cd20     2D 00 64 FD | 	ret
2cd24                 | 
2cd24                 | __system____default_buffer_init
2cd24     02 4A 05 F6 | 	mov	COUNT_, #2
2cd28     A8 00 A0 FD | 	call	#pushregs_
2cd2c     09 27 02 F6 | 	mov	local01, arg01
2cd30     13 29 02 FB | 	rdlong	local02, local01
2cd34     13 13 02 F6 | 	mov	arg01, local01
2cd38     34 03 B0 FD | 	call	#__system___isatty
2cd3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd40     06 26 06 51 |  if_ne	add	local01, #6
2cd44     13 0B 58 5C |  if_ne	wrword	#5, local01
2cd48     06 26 06 A1 |  if_e	add	local01, #6
2cd4c     13 0D 58 AC |  if_e	wrword	#6, local01
2cd50     14 28 06 F1 | 	add	local02, #20
2cd54     14 27 02 F6 | 	mov	local01, local02
2cd58     04 28 86 F1 | 	sub	local02, #4
2cd5c     14 27 62 FC | 	wrlong	local01, local02
2cd60     04 28 86 F1 | 	sub	local02, #4
2cd64     02 00 80 FF 
2cd68     14 01 68 FC | 	wrlong	##1024, local02
2cd6c     00 FA 05 F6 | 	mov	result1, #0
2cd70     A7 F0 03 F6 | 	mov	ptra, fp
2cd74     B2 00 A0 FD | 	call	#popregs_
2cd78                 | __system____default_buffer_init_ret
2cd78     2D 00 64 FD | 	ret
2cd7c                 | 
2cd7c                 | __system__stat
2cd7c     04 4A 05 F6 | 	mov	COUNT_, #4
2cd80     A8 00 A0 FD | 	call	#pushregs_
2cd84     0A 27 02 F6 | 	mov	local01, arg02
2cd88     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2cd8c     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2cd90     09 15 02 F6 | 	mov	arg02, arg01
2cd94     14 13 02 F6 | 	mov	arg01, local02
2cd98     00 16 06 F6 | 	mov	arg03, #0
2cd9c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2cda0     50 B5 BF FD | 	call	#__system____getvfsforfile
2cda4     FD 2A 0A F6 | 	mov	local03, result1 wz
2cda8     10 00 90 AD |  if_e	jmp	#LR__4140
2cdac     34 2A 06 F1 | 	add	local03, #52
2cdb0     15 17 0A FB | 	rdlong	arg03, local03 wz
2cdb4     34 2A 86 F1 | 	sub	local03, #52
2cdb8     14 00 90 5D |  if_ne	jmp	#LR__4141
2cdbc                 | LR__4140
2cdbc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cdc0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2cdc4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cdc8     01 FA 65 F6 | 	neg	result1, #1
2cdcc     68 00 90 FD | 	jmp	#LR__4142
2cdd0                 | LR__4141
2cdd0     13 13 02 F6 | 	mov	arg01, local01
2cdd4     00 14 06 F6 | 	mov	arg02, #0
2cdd8     30 16 06 F6 | 	mov	arg03, #48
2cddc     09 2D 02 F6 | 	mov	local04, arg01
2cde0     98 00 A0 FD | 	call	#\builtin_bytefill_
2cde4     16 FB 01 F6 | 	mov	result1, local04
2cde8     14 13 CA FA | 	rdbyte	arg01, local02 wz
2cdec     08 26 06 A1 |  if_e	add	local01, #8
2cdf0     08 00 80 AF 
2cdf4     13 FF 6B AC |  if_e	wrlong	##4607, local01
2cdf8     00 FA 05 A6 |  if_e	mov	result1, #0
2cdfc     38 00 90 AD |  if_e	jmp	#LR__4142
2ce00     34 2A 06 F1 | 	add	local03, #52
2ce04     15 2B 02 FB | 	rdlong	local03, local03
2ce08     15 2D 02 F6 | 	mov	local04, local03
2ce0c     13 2A 46 F7 | 	zerox	local03, #19
2ce10     14 2C 46 F0 | 	shr	local04, #20
2ce14     02 2C 66 F0 | 	shl	local04, #2
2ce18     ED 2C 02 F1 | 	add	local04, __methods__
2ce1c     16 2D 02 FB | 	rdlong	local04, local04
2ce20     14 13 02 F6 | 	mov	arg01, local02
2ce24     13 15 02 F6 | 	mov	arg02, local01
2ce28     F2 28 02 F6 | 	mov	local02, objptr
2ce2c     15 E5 01 F6 | 	mov	objptr, local03
2ce30     2D 2C 62 FD | 	call	local04
2ce34     14 E5 01 F6 | 	mov	objptr, local02
2ce38                 | LR__4142
2ce38     A7 F0 03 F6 | 	mov	ptra, fp
2ce3c     B2 00 A0 FD | 	call	#popregs_
2ce40                 | __system__stat_ret
2ce40     2D 00 64 FD | 	ret
2ce44                 | 
2ce44                 | __system__write
2ce44     0A 12 16 F2 | 	cmp	arg01, #10 wc
2ce48     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ce4c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2ce50     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2ce54     01 FA 65 36 |  if_ae	neg	result1, #1
2ce58     20 00 90 3D |  if_ae	jmp	#LR__4150
2ce5c     34 12 06 FD | 	qmul	arg01, #52
2ce60     02 00 00 FF 
2ce64     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2ce68     18 12 62 FD | 	getqx	arg01
2ce6c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2ce70     02 00 00 FF 
2ce74     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2ce78     14 10 B0 FD | 	call	#__system___vfswrite
2ce7c                 | LR__4150
2ce7c                 | __system__write_ret
2ce7c     2D 00 64 FD | 	ret
2ce80                 | 
2ce80                 | __system__read
2ce80     0A 12 16 F2 | 	cmp	arg01, #10 wc
2ce84     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ce88     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2ce8c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2ce90     01 FA 65 36 |  if_ae	neg	result1, #1
2ce94     20 00 90 3D |  if_ae	jmp	#LR__4160
2ce98     34 12 06 FD | 	qmul	arg01, #52
2ce9c     02 00 00 FF 
2cea0     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2cea4     18 12 62 FD | 	getqx	arg01
2cea8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2ceac     02 00 00 FF 
2ceb0     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2ceb4     A0 11 B0 FD | 	call	#__system___vfsread
2ceb8                 | LR__4160
2ceb8                 | __system__read_ret
2ceb8     2D 00 64 FD | 	ret
2cebc                 | 
2cebc                 | __system__close
2cebc     0A 12 16 F2 | 	cmp	arg01, #10 wc
2cec0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2cec4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2cec8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2cecc     01 FA 65 36 |  if_ae	neg	result1, #1
2ced0     20 00 90 3D |  if_ae	jmp	#LR__4170
2ced4     34 12 06 FD | 	qmul	arg01, #52
2ced8     02 00 00 FF 
2cedc     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2cee0     18 12 62 FD | 	getqx	arg01
2cee4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2cee8     02 00 00 FF 
2ceec     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2cef0     10 F9 BF FD | 	call	#__system___closeraw
2cef4                 | LR__4170
2cef4                 | __system__close_ret
2cef4     2D 00 64 FD | 	ret
2cef8                 | 
2cef8                 | __system__lseek
2cef8     06 4A 05 F6 | 	mov	COUNT_, #6
2cefc     A8 00 A0 FD | 	call	#pushregs_
2cf00     0A 12 16 F2 | 	cmp	arg01, #10 wc
2cf04     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2cf08     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2cf0c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2cf10     01 FA 65 36 |  if_ae	neg	result1, #1
2cf14     C4 00 90 3D |  if_ae	jmp	#LR__4181
2cf18     34 12 06 FD | 	qmul	arg01, #52
2cf1c     02 00 00 FF 
2cf20     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2cf24     18 26 62 FD | 	getqx	local01
2cf28     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2cf2c     30 26 06 F1 | 	add	local01, #48
2cf30     13 13 0A FB | 	rdlong	arg01, local01 wz
2cf34     30 26 86 F1 | 	sub	local01, #48
2cf38     02 00 00 FF 
2cf3c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2cf40     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cf44     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2cf48     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cf4c     01 FA 65 A6 |  if_e	neg	result1, #1
2cf50     88 00 90 AD |  if_e	jmp	#LR__4181
2cf54     08 26 06 F1 | 	add	local01, #8
2cf58     13 29 02 FB | 	rdlong	local02, local01
2cf5c     08 26 86 F1 | 	sub	local01, #8
2cf60     40 28 CE F7 | 	test	local02, #64 wz
2cf64     08 26 06 51 |  if_ne	add	local01, #8
2cf68     13 29 02 5B |  if_ne	rdlong	local02, local01
2cf6c     80 28 46 55 |  if_ne	or	local02, #128
2cf70     13 29 62 5C |  if_ne	wrlong	local02, local01
2cf74     08 26 86 51 |  if_ne	sub	local01, #8
2cf78     30 26 06 F1 | 	add	local01, #48
2cf7c     13 2B 02 FB | 	rdlong	local03, local01
2cf80     15 2D 02 F6 | 	mov	local04, local03
2cf84     30 26 86 F1 | 	sub	local01, #48
2cf88     13 2C 46 F7 | 	zerox	local04, #19
2cf8c     14 2A 46 F0 | 	shr	local03, #20
2cf90     02 2A 66 F0 | 	shl	local03, #2
2cf94     ED 2A 02 F1 | 	add	local03, __methods__
2cf98     15 2B 02 FB | 	rdlong	local03, local03
2cf9c     13 13 02 F6 | 	mov	arg01, local01
2cfa0     F2 2E 02 F6 | 	mov	local05, objptr
2cfa4     16 E5 01 F6 | 	mov	objptr, local04
2cfa8     2D 2A 62 FD | 	call	local03
2cfac     17 E5 01 F6 | 	mov	objptr, local05
2cfb0     FD 30 02 F6 | 	mov	local06, result1
2cfb4     00 30 56 F2 | 	cmps	local06, #0 wc
2cfb8     1C 00 90 3D |  if_ae	jmp	#LR__4180
2cfbc     18 13 6A F6 | 	neg	arg01, local06 wz
2cfc0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cfc4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2cfc8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cfcc     01 FA 65 56 |  if_ne	neg	result1, #1
2cfd0     00 FA 05 A6 |  if_e	mov	result1, #0
2cfd4     04 00 90 FD | 	jmp	#LR__4181
2cfd8                 | LR__4180
2cfd8     18 FB 01 F6 | 	mov	result1, local06
2cfdc                 | LR__4181
2cfdc     A7 F0 03 F6 | 	mov	ptra, fp
2cfe0     B2 00 A0 FD | 	call	#popregs_
2cfe4                 | __system__lseek_ret
2cfe4     2D 00 64 FD | 	ret
2cfe8                 | 
2cfe8                 | __system___ioctl
2cfe8     03 4A 05 F6 | 	mov	COUNT_, #3
2cfec     A8 00 A0 FD | 	call	#pushregs_
2cff0     00 12 4E F2 | 	cmps	arg01, #0 wz
2cff4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cff8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2cffc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d000     01 FA 65 A6 |  if_e	neg	result1, #1
2d004     5C 00 90 AD |  if_e	jmp	#LR__4191
2d008     28 12 06 F1 | 	add	arg01, #40
2d00c     09 27 02 FB | 	rdlong	local01, arg01
2d010     13 29 02 F6 | 	mov	local02, local01
2d014     28 12 86 F1 | 	sub	arg01, #40
2d018     13 28 46 F7 | 	zerox	local02, #19
2d01c     14 26 46 F0 | 	shr	local01, #20
2d020     02 26 66 F0 | 	shl	local01, #2
2d024     ED 26 02 F1 | 	add	local01, __methods__
2d028     13 27 02 FB | 	rdlong	local01, local01
2d02c     F2 2A 02 F6 | 	mov	local03, objptr
2d030     14 E5 01 F6 | 	mov	objptr, local02
2d034     2D 26 62 FD | 	call	local01
2d038     15 E5 01 F6 | 	mov	objptr, local03
2d03c     FD 12 0A F6 | 	mov	arg01, result1 wz
2d040     1C 00 90 AD |  if_e	jmp	#LR__4190
2d044     00 12 4E F2 | 	cmps	arg01, #0 wz
2d048     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d04c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d050     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d054     01 FA 65 56 |  if_ne	neg	result1, #1
2d058     00 FA 05 A6 |  if_e	mov	result1, #0
2d05c     04 00 90 FD | 	jmp	#LR__4191
2d060                 | LR__4190
2d060     00 FA 05 F6 | 	mov	result1, #0
2d064                 | LR__4191
2d064     A7 F0 03 F6 | 	mov	ptra, fp
2d068     B2 00 A0 FD | 	call	#popregs_
2d06c                 | __system___ioctl_ret
2d06c     2D 00 64 FD | 	ret
2d070                 | 
2d070                 | __system___isatty
2d070     00 4A 05 F6 | 	mov	COUNT_, #0
2d074     A8 00 A0 FD | 	call	#pushregs_
2d078     0C F0 07 F1 | 	add	ptra, #12
2d07c     04 4E 05 F1 | 	add	fp, #4
2d080     A7 12 62 FC | 	wrlong	arg01, fp
2d084     04 4E 05 F1 | 	add	fp, #4
2d088     A7 16 02 F6 | 	mov	arg03, fp
2d08c     08 4E 85 F1 | 	sub	fp, #8
2d090     00 15 06 F6 | 	mov	arg02, #256
2d094     50 FF BF FD | 	call	#__system___ioctl
2d098     00 FA 0D F2 | 	cmp	result1, #0 wz
2d09c     01 FA 05 A6 |  if_e	mov	result1, #1
2d0a0     00 FA 05 56 |  if_ne	mov	result1, #0
2d0a4     A7 F0 03 F6 | 	mov	ptra, fp
2d0a8     B2 00 A0 FD | 	call	#popregs_
2d0ac                 | __system___isatty_ret
2d0ac     2D 00 64 FD | 	ret
2d0b0                 | 
2d0b0                 | __system____getftab
2d0b0     0A 12 16 F2 | 	cmp	arg01, #10 wc
2d0b4     34 12 06 CD |  if_b	qmul	arg01, #52
2d0b8     00 FA 05 36 |  if_ae	mov	result1, #0
2d0bc     02 00 00 CF 
2d0c0     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2d0c4     18 FA 61 CD |  if_b	getqx	result1
2d0c8     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2d0cc     02 00 00 CF 
2d0d0     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2d0d4                 | __system____getftab_ret
2d0d4     2D 00 64 FD | 	ret
2d0d8                 | 
2d0d8                 | __system__strncpy
2d0d8     09 01 02 F6 | 	mov	_var01, arg01
2d0dc                 | LR__4200
2d0dc     01 16 86 F1 | 	sub	arg03, #1
2d0e0     00 16 56 F2 | 	cmps	arg03, #0 wc
2d0e4     18 00 90 CD |  if_b	jmp	#LR__4201
2d0e8     0A FB C1 FA | 	rdbyte	result1, arg02
2d0ec     00 FB 41 FC | 	wrbyte	result1, _var01
2d0f0     01 14 06 F1 | 	add	arg02, #1
2d0f4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2d0f8     01 00 06 F1 | 	add	_var01, #1
2d0fc     DC FF 9F 5D |  if_ne	jmp	#LR__4200
2d100                 | LR__4201
2d100     97 0C 48 FB | 	callpa	#(@LR__4203-@LR__4202)>>2,fcache_load_ptr_
2d104                 | LR__4202
2d104     01 16 86 F1 | 	sub	arg03, #1
2d108     00 16 56 F2 | 	cmps	arg03, #0 wc
2d10c     00 03 02 36 |  if_ae	mov	_var02, _var01
2d110     01 00 06 31 |  if_ae	add	_var01, #1
2d114     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2d118     E8 FF 9F 3D |  if_ae	jmp	#LR__4202
2d11c                 | LR__4203
2d11c     09 FB 01 F6 | 	mov	result1, arg01
2d120                 | __system__strncpy_ret
2d120     2D 00 64 FD | 	ret
2d124                 | 
2d124                 | __system__strncat
2d124     00 14 4E F2 | 	cmps	arg02, #0 wz
2d128     54 00 90 AD |  if_e	jmp	#LR__4215
2d12c     01 16 16 F2 | 	cmp	arg03, #1 wc
2d130     4C 00 90 CD |  if_b	jmp	#LR__4215
2d134     09 01 02 F6 | 	mov	_var01, arg01
2d138     97 06 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
2d13c                 | LR__4210
2d13c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2d140     01 00 06 51 |  if_ne	add	_var01, #1
2d144     F4 FF 9F 5D |  if_ne	jmp	#LR__4210
2d148                 | LR__4211
2d148     0B 03 02 F6 | 	mov	_var02, arg03
2d14c     97 16 48 FB | 	callpa	#(@LR__4213-@LR__4212)>>2,fcache_load_ptr_
2d150                 | LR__4212
2d150     0A 05 C2 FA | 	rdbyte	_var03, arg02
2d154     02 07 02 F6 | 	mov	_var04, _var03
2d158     07 06 4E F7 | 	zerox	_var04, #7 wz
2d15c     01 14 06 F1 | 	add	arg02, #1
2d160     18 00 90 AD |  if_e	jmp	#LR__4214
2d164     01 02 86 F1 | 	sub	_var02, #1
2d168     00 02 56 F2 | 	cmps	_var02, #0 wc
2d16c     00 07 02 36 |  if_ae	mov	_var04, _var01
2d170     01 00 06 31 |  if_ae	add	_var01, #1
2d174     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2d178     D4 FF 9F 3D |  if_ae	jmp	#LR__4212
2d17c                 | LR__4213
2d17c                 | LR__4214
2d17c     00 01 48 FC | 	wrbyte	#0, _var01
2d180                 | LR__4215
2d180     09 FB 01 F6 | 	mov	result1, arg01
2d184                 | __system__strncat_ret
2d184     2D 00 64 FD | 	ret
2d188                 | 
2d188                 | __system__strncmp
2d188     09 01 0A F6 | 	mov	_var01, arg01 wz
2d18c     14 00 90 5D |  if_ne	jmp	#LR__4220
2d190     00 14 0E F2 | 	cmp	arg02, #0 wz
2d194     01 02 66 56 |  if_ne	neg	_var02, #1
2d198     00 02 06 A6 |  if_e	mov	_var02, #0
2d19c     01 FB 01 F6 | 	mov	result1, _var02
2d1a0     74 00 90 FD | 	jmp	#__system__strncmp_ret
2d1a4                 | LR__4220
2d1a4     00 14 0E F2 | 	cmp	arg02, #0 wz
2d1a8     01 FA 05 A6 |  if_e	mov	result1, #1
2d1ac     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2d1b0     0B 05 02 F6 | 	mov	_var03, arg03
2d1b4     97 16 48 FB | 	callpa	#(@LR__4222-@LR__4221)>>2,fcache_load_ptr_
2d1b8                 | LR__4221
2d1b8     00 07 C2 FA | 	rdbyte	_var04, _var01
2d1bc     0A 09 02 F6 | 	mov	_var05, arg02
2d1c0     04 0B C2 FA | 	rdbyte	_var06, _var05
2d1c4     01 04 86 F1 | 	sub	_var03, #1
2d1c8     00 04 56 F2 | 	cmps	_var03, #0 wc
2d1cc     01 00 06 F1 | 	add	_var01, #1
2d1d0     01 14 06 F1 | 	add	arg02, #1
2d1d4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2d1d8     08 00 90 2D |  if_nc_and_z	jmp	#LR__4223
2d1dc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2d1e0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4221
2d1e4                 | LR__4222
2d1e4                 | LR__4223
2d1e4     00 04 56 F2 | 	cmps	_var03, #0 wc
2d1e8     00 FA 05 C6 |  if_b	mov	result1, #0
2d1ec     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2d1f0     05 07 0A F2 | 	cmp	_var04, _var06 wz
2d1f4     00 FA 05 A6 |  if_e	mov	result1, #0
2d1f8     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2d1fc     00 06 0E F2 | 	cmp	_var04, #0 wz
2d200     01 FA 65 A6 |  if_e	neg	result1, #1
2d204     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2d208     00 0A 0E F2 | 	cmp	_var06, #0 wz
2d20c     01 FA 05 A6 |  if_e	mov	result1, #1
2d210     03 FB 01 56 |  if_ne	mov	result1, _var04
2d214     05 FB 81 51 |  if_ne	sub	result1, _var06
2d218                 | __system__strncmp_ret
2d218     2D 00 64 FD | 	ret
2d21c                 | 
2d21c                 | __system____root_opendir
2d21c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2d220     04 12 06 F1 | 	add	arg01, #4
2d224     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2d228     00 FA 05 F6 | 	mov	result1, #0
2d22c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2d230                 | __system____root_opendir_ret
2d230     2D 00 64 FD | 	ret
2d234                 | 
2d234                 | __system____root_readdir
2d234     03 4A 05 F6 | 	mov	COUNT_, #3
2d238     A8 00 A0 FD | 	call	#pushregs_
2d23c     09 27 02 F6 | 	mov	local01, arg01
2d240     0A 29 02 F6 | 	mov	local02, arg02
2d244     04 26 06 F1 | 	add	local01, #4
2d248     13 2B 02 FB | 	rdlong	local03, local01
2d24c     04 26 86 F1 | 	sub	local01, #4
2d250                 | LR__4230
2d250     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2d254     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2d258     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2d25c     01 FA 65 A6 |  if_e	neg	result1, #1
2d260     48 00 90 AD |  if_e	jmp	#LR__4231
2d264     15 17 0A FB | 	rdlong	arg03, local03 wz
2d268     04 2A 06 A1 |  if_e	add	local03, #4
2d26c     E0 FF 9F AD |  if_e	jmp	#LR__4230
2d270     15 15 02 FB | 	rdlong	arg02, local03
2d274     01 14 06 F1 | 	add	arg02, #1
2d278     14 13 02 F6 | 	mov	arg01, local02
2d27c     40 16 06 F6 | 	mov	arg03, #64
2d280     54 FE BF FD | 	call	#__system__strncpy
2d284     50 28 06 F1 | 	add	local02, #80
2d288     14 03 48 FC | 	wrbyte	#1, local02
2d28c     08 28 86 F1 | 	sub	local02, #8
2d290     14 01 68 FC | 	wrlong	#0, local02
2d294     04 28 06 F1 | 	add	local02, #4
2d298     14 01 68 FC | 	wrlong	#0, local02
2d29c     04 2A 06 F1 | 	add	local03, #4
2d2a0     04 26 06 F1 | 	add	local01, #4
2d2a4     13 2B 62 FC | 	wrlong	local03, local01
2d2a8     00 FA 05 F6 | 	mov	result1, #0
2d2ac                 | LR__4231
2d2ac     A7 F0 03 F6 | 	mov	ptra, fp
2d2b0     B2 00 A0 FD | 	call	#popregs_
2d2b4                 | __system____root_readdir_ret
2d2b4     2D 00 64 FD | 	ret
2d2b8                 | 
2d2b8                 | __system____root_closedir
2d2b8     00 FA 05 F6 | 	mov	result1, #0
2d2bc                 | __system____root_closedir_ret
2d2bc     2D 00 64 FD | 	ret
2d2c0                 | 
2d2c0                 | __system____root_stat
2d2c0     0A 01 02 F6 | 	mov	_var01, arg02
2d2c4     00 13 02 F6 | 	mov	arg01, _var01
2d2c8     00 14 06 F6 | 	mov	arg02, #0
2d2cc     30 16 06 F6 | 	mov	arg03, #48
2d2d0     98 00 A0 FD | 	call	#\builtin_bytefill_
2d2d4     08 00 06 F1 | 	add	_var01, #8
2d2d8     08 00 80 FF 
2d2dc     00 FF 6B FC | 	wrlong	##4607, _var01
2d2e0     00 FA 05 F6 | 	mov	result1, #0
2d2e4                 | __system____root_stat_ret
2d2e4     2D 00 64 FD | 	ret
2d2e8                 | 
2d2e8                 | __system___normalizeName
2d2e8     00 00 06 F6 | 	mov	_var01, #0
2d2ec     09 03 02 F6 | 	mov	_var02, arg01
2d2f0     01 05 02 F6 | 	mov	_var03, _var02
2d2f4                 | LR__4240
2d2f4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2d2f8     5C 01 90 AD |  if_e	jmp	#LR__4259
2d2fc     00 00 0E F2 | 	cmp	_var01, #0 wz
2d300     02 07 02 56 |  if_ne	mov	_var04, _var03
2d304     01 04 06 51 |  if_ne	add	_var03, #1
2d308     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2d30c     00 00 06 56 |  if_ne	mov	_var01, #0
2d310     01 07 C2 FA | 	rdbyte	_var04, _var02
2d314     2E 06 0E F2 | 	cmp	_var04, #46 wz
2d318     D8 00 90 5D |  if_ne	jmp	#LR__4252
2d31c     01 02 06 F1 | 	add	_var02, #1
2d320     01 07 C2 FA | 	rdbyte	_var04, _var02
2d324     01 02 86 F1 | 	sub	_var02, #1
2d328     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d32c     18 00 90 AD |  if_e	jmp	#LR__4241
2d330     01 02 06 F1 | 	add	_var02, #1
2d334     01 09 C2 FA | 	rdbyte	_var05, _var02
2d338     01 02 86 F1 | 	sub	_var02, #1
2d33c     04 0B 02 F6 | 	mov	_var06, _var05
2d340     07 0A 4E F7 | 	zerox	_var06, #7 wz
2d344     10 00 90 5D |  if_ne	jmp	#LR__4242
2d348                 | LR__4241
2d348     01 0D 02 F6 | 	mov	_var07, _var02
2d34c     01 0C 06 F1 | 	add	_var07, #1
2d350     06 03 02 F6 | 	mov	_var02, _var07
2d354     E0 00 90 FD | 	jmp	#LR__4256
2d358                 | LR__4242
2d358     01 02 06 F1 | 	add	_var02, #1
2d35c     01 0D C2 FA | 	rdbyte	_var07, _var02
2d360     01 02 86 F1 | 	sub	_var02, #1
2d364     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2d368     2E 06 0E F2 | 	cmp	_var04, #46 wz
2d36c     84 00 90 5D |  if_ne	jmp	#LR__4251
2d370     02 02 06 F1 | 	add	_var02, #2
2d374     01 0D C2 FA | 	rdbyte	_var07, _var02
2d378     02 02 86 F1 | 	sub	_var02, #2
2d37c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2d380     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d384     18 00 90 AD |  if_e	jmp	#LR__4243
2d388     02 02 06 F1 | 	add	_var02, #2
2d38c     01 09 C2 FA | 	rdbyte	_var05, _var02
2d390     02 02 86 F1 | 	sub	_var02, #2
2d394     04 0B 02 F6 | 	mov	_var06, _var05
2d398     07 0A 4E F7 | 	zerox	_var06, #7 wz
2d39c     54 00 90 5D |  if_ne	jmp	#LR__4250
2d3a0                 | LR__4243
2d3a0     02 02 06 F1 | 	add	_var02, #2
2d3a4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2d3a8     40 00 90 ED |  if_be	jmp	#LR__4249
2d3ac     02 0F 02 F6 | 	mov	_var08, _var03
2d3b0     01 0E 86 F1 | 	sub	_var08, #1
2d3b4                 | LR__4244
2d3b4     07 07 C2 FA | 	rdbyte	_var04, _var08
2d3b8     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d3bc     0C 00 90 5D |  if_ne	jmp	#LR__4245
2d3c0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2d3c4     01 0E 86 11 |  if_a	sub	_var08, #1
2d3c8     E8 FF 9F 1D |  if_a	jmp	#LR__4244
2d3cc                 | LR__4245
2d3cc     97 0C 48 FB | 	callpa	#(@LR__4247-@LR__4246)>>2,fcache_load_ptr_
2d3d0                 | LR__4246
2d3d0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2d3d4     10 00 90 ED |  if_be	jmp	#LR__4248
2d3d8     07 07 C2 FA | 	rdbyte	_var04, _var08
2d3dc     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d3e0     01 0E 86 51 |  if_ne	sub	_var08, #1
2d3e4     E8 FF 9F 5D |  if_ne	jmp	#LR__4246
2d3e8                 | LR__4247
2d3e8                 | LR__4248
2d3e8     07 05 02 F6 | 	mov	_var03, _var08
2d3ec                 | LR__4249
2d3ec     01 00 06 F6 | 	mov	_var01, #1
2d3f0     44 00 90 FD | 	jmp	#LR__4256
2d3f4                 | LR__4250
2d3f4                 | LR__4251
2d3f4                 | LR__4252
2d3f4     97 18 48 FB | 	callpa	#(@LR__4254-@LR__4253)>>2,fcache_load_ptr_
2d3f8                 | LR__4253
2d3f8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2d3fc     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2d400     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2d404     20 00 90 AD |  if_e	jmp	#LR__4255
2d408     01 0B 02 F6 | 	mov	_var06, _var02
2d40c     01 09 02 F6 | 	mov	_var05, _var02
2d410     01 08 06 F1 | 	add	_var05, #1
2d414     05 11 C2 FA | 	rdbyte	_var09, _var06
2d418     04 03 02 F6 | 	mov	_var02, _var05
2d41c     02 11 42 FC | 	wrbyte	_var09, _var03
2d420     01 04 06 F1 | 	add	_var03, #1
2d424     D0 FF 9F FD | 	jmp	#LR__4253
2d428                 | LR__4254
2d428                 | LR__4255
2d428     01 07 C2 FA | 	rdbyte	_var04, _var02
2d42c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d430     C0 FE 9F 5D |  if_ne	jmp	#LR__4240
2d434     01 00 06 F6 | 	mov	_var01, #1
2d438                 | LR__4256
2d438     97 0C 48 FB | 	callpa	#(@LR__4258-@LR__4257)>>2,fcache_load_ptr_
2d43c                 | LR__4257
2d43c     01 07 C2 FA | 	rdbyte	_var04, _var02
2d440     2F 06 0E F2 | 	cmp	_var04, #47 wz
2d444     01 0D 02 A6 |  if_e	mov	_var07, _var02
2d448     01 0C 06 A1 |  if_e	add	_var07, #1
2d44c     06 03 02 A6 |  if_e	mov	_var02, _var07
2d450     E8 FF 9F AD |  if_e	jmp	#LR__4257
2d454                 | LR__4258
2d454     9C FE 9F FD | 	jmp	#LR__4240
2d458                 | LR__4259
2d458     02 01 48 FC | 	wrbyte	#0, _var03
2d45c                 | __system___normalizeName_ret
2d45c     2D 00 64 FD | 	ret
2d460                 | 
2d460                 | __system___strrev
2d460     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2d464     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
2d468     09 03 02 F6 | 	mov	_var02, arg01
2d46c     97 06 48 FB | 	callpa	#(@LR__4261-@LR__4260)>>2,fcache_load_ptr_
2d470                 | LR__4260
2d470     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2d474     01 02 06 51 |  if_ne	add	_var02, #1
2d478     F4 FF 9F 5D |  if_ne	jmp	#LR__4260
2d47c                 | LR__4261
2d47c     01 02 86 F1 | 	sub	_var02, #1
2d480     97 12 48 FB | 	callpa	#(@LR__4263-@LR__4262)>>2,fcache_load_ptr_
2d484                 | LR__4262
2d484     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2d488     1C 00 90 ED |  if_be	jmp	#LR__4264
2d48c     09 01 C2 FA | 	rdbyte	_var01, arg01
2d490     01 05 C2 FA | 	rdbyte	_var03, _var02
2d494     09 05 42 FC | 	wrbyte	_var03, arg01
2d498     01 01 42 FC | 	wrbyte	_var01, _var02
2d49c     01 12 06 F1 | 	add	arg01, #1
2d4a0     01 02 86 F1 | 	sub	_var02, #1
2d4a4     DC FF 9F FD | 	jmp	#LR__4262
2d4a8                 | LR__4263
2d4a8                 | LR__4264
2d4a8                 | __system___strrev_ret
2d4a8     2D 00 64 FD | 	ret
2d4ac                 | 
2d4ac                 | __system___fmtpad
2d4ac     06 4A 05 F6 | 	mov	COUNT_, #6
2d4b0     A8 00 A0 FD | 	call	#pushregs_
2d4b4     09 27 02 F6 | 	mov	local01, arg01
2d4b8     0A 29 02 F6 | 	mov	local02, arg02
2d4bc     0B 2B 02 F6 | 	mov	local03, arg03
2d4c0     14 13 EA F8 | 	getbyte	arg01, local02, #1
2d4c4     16 28 46 F0 | 	shr	local02, #22
2d4c8     03 28 0E F5 | 	and	local02, #3 wz
2d4cc     00 2C 06 F6 | 	mov	local04, #0
2d4d0     01 28 06 A6 |  if_e	mov	local02, #1
2d4d4     0C 29 CA F7 | 	test	local02, arg04 wz
2d4d8     00 FA 05 A6 |  if_e	mov	result1, #0
2d4dc     88 00 90 AD |  if_e	jmp	#LR__4273
2d4e0     09 2B C2 F2 | 	subr	local03, arg01
2d4e4     01 2A 56 F2 | 	cmps	local03, #1 wc
2d4e8     00 FA 05 C6 |  if_b	mov	result1, #0
2d4ec     78 00 90 CD |  if_b	jmp	#LR__4273
2d4f0     03 28 0E F2 | 	cmp	local02, #3 wz
2d4f4     18 00 90 5D |  if_ne	jmp	#LR__4270
2d4f8     01 18 0E F2 | 	cmp	arg04, #1 wz
2d4fc     6E 28 62 FD | 	wrz	local02
2d500     14 2B 02 F1 | 	add	local03, local02
2d504     15 2B 52 F6 | 	abs	local03, local03 wc
2d508     01 2A 46 F0 | 	shr	local03, #1
2d50c     15 2B 82 F6 | 	negc	local03, local03
2d510                 | LR__4270
2d510     01 2A 56 F2 | 	cmps	local03, #1 wc
2d514     4C 00 90 CD |  if_b	jmp	#LR__4272
2d518     15 2F 02 F6 | 	mov	local05, local03
2d51c                 | LR__4271
2d51c     13 29 02 F6 | 	mov	local02, local01
2d520     13 31 02 F6 | 	mov	local06, local01
2d524     13 28 46 F7 | 	zerox	local02, #19
2d528     14 30 46 F0 | 	shr	local06, #20
2d52c     02 30 66 F0 | 	shl	local06, #2
2d530     ED 30 02 F1 | 	add	local06, __methods__
2d534     18 31 02 FB | 	rdlong	local06, local06
2d538     20 12 06 F6 | 	mov	arg01, #32
2d53c     F2 2A 02 F6 | 	mov	local03, objptr
2d540     14 E5 01 F6 | 	mov	objptr, local02
2d544     2D 30 62 FD | 	call	local06
2d548     15 E5 01 F6 | 	mov	objptr, local03
2d54c     FD 30 02 F6 | 	mov	local06, result1
2d550     00 30 56 F2 | 	cmps	local06, #0 wc
2d554     18 FB 01 C6 |  if_b	mov	result1, local06
2d558     0C 00 90 CD |  if_b	jmp	#LR__4273
2d55c     18 2D 02 F1 | 	add	local04, local06
2d560     EE 2F 6E FB | 	djnz	local05, #LR__4271
2d564                 | LR__4272
2d564     16 FB 01 F6 | 	mov	result1, local04
2d568                 | LR__4273
2d568     A7 F0 03 F6 | 	mov	ptra, fp
2d56c     B2 00 A0 FD | 	call	#popregs_
2d570                 | __system___fmtpad_ret
2d570     2D 00 64 FD | 	ret
2d574                 | 
2d574                 | __system___uitoa
2d574     04 4A 05 F6 | 	mov	COUNT_, #4
2d578     A8 00 A0 FD | 	call	#pushregs_
2d57c     09 27 02 F6 | 	mov	local01, arg01
2d580     00 1A 4E F2 | 	cmps	arg05, #0 wz
2d584     13 1B 02 F6 | 	mov	arg05, local01
2d588     00 28 06 F6 | 	mov	local02, #0
2d58c     37 2A 06 56 |  if_ne	mov	local03, #55
2d590     57 2A 06 A6 |  if_e	mov	local03, #87
2d594                 | LR__4280
2d594     0B 15 12 FD | 	qdiv	arg02, arg03
2d598     19 2C 62 FD | 	getqy	local04
2d59c     0B 15 12 FD | 	qdiv	arg02, arg03
2d5a0     0A 2C 16 F2 | 	cmp	local04, #10 wc
2d5a4     30 2C 06 C1 |  if_b	add	local04, #48
2d5a8     15 2D 02 31 |  if_ae	add	local04, local03
2d5ac     0D 2D 42 FC | 	wrbyte	local04, arg05
2d5b0     01 1A 06 F1 | 	add	arg05, #1
2d5b4     01 28 06 F1 | 	add	local02, #1
2d5b8     18 14 62 FD | 	getqx	arg02
2d5bc     00 14 0E F2 | 	cmp	arg02, #0 wz
2d5c0     D0 FF 9F 5D |  if_ne	jmp	#LR__4280
2d5c4     0C 29 12 F2 | 	cmp	local02, arg04 wc
2d5c8     C8 FF 9F CD |  if_b	jmp	#LR__4280
2d5cc     0D 01 48 FC | 	wrbyte	#0, arg05
2d5d0     13 13 02 F6 | 	mov	arg01, local01
2d5d4     88 FE BF FD | 	call	#__system___strrev
2d5d8     14 FB 01 F6 | 	mov	result1, local02
2d5dc     A7 F0 03 F6 | 	mov	ptra, fp
2d5e0     B2 00 A0 FD | 	call	#popregs_
2d5e4                 | __system___uitoa_ret
2d5e4     2D 00 64 FD | 	ret
2d5e8                 | 
2d5e8                 | __system__disassemble_0580
2d5e8     10 4A 05 F6 | 	mov	COUNT_, #16
2d5ec     A8 00 A0 FD | 	call	#pushregs_
2d5f0     09 27 02 F6 | 	mov	local01, arg01
2d5f4     0A 29 02 F6 | 	mov	local02, arg02
2d5f8     0B 2B 02 F6 | 	mov	local03, arg03
2d5fc     0C 2D 02 F6 | 	mov	local04, arg04
2d600     0D 2F 02 F6 | 	mov	local05, arg05
2d604     17 13 52 F6 | 	abs	arg01, local05 wc
2d608     1F 30 C6 C9 |  if_b	decod	local06, #31
2d60c     00 30 06 36 |  if_ae	mov	local06, #0
2d610     C0 CF BF FD | 	call	#__system___float_fromuns
2d614     18 FB 61 F5 | 	xor	result1, local06
2d618     FD 32 02 F6 | 	mov	local07, result1
2d61c     00 34 06 F6 | 	mov	local08, #0
2d620     13 13 02 F6 | 	mov	arg01, local01
2d624     00 14 06 F6 | 	mov	arg02, #0
2d628     01 16 06 F6 | 	mov	arg03, #1
2d62c     DC D7 BF FD | 	call	#__system___float_cmp
2d630     00 FA 0D F2 | 	cmp	result1, #0 wz
2d634     00 36 06 A6 |  if_e	mov	local09, #0
2d638     14 01 68 AC |  if_e	wrlong	#0, local02
2d63c     15 37 62 AC |  if_e	wrlong	local09, local03
2d640     8C 01 90 AD |  if_e	jmp	#LR__4302
2d644     13 13 02 F6 | 	mov	arg01, local01
2d648     B4 DC BF FD | 	call	#__system____builtin_ilogb
2d64c     FD 38 02 F6 | 	mov	local10, result1
2d650     0A 2E 0E F2 | 	cmp	local05, #10 wz
2d654     24 00 90 5D |  if_ne	jmp	#LR__4290
2d658     1C 37 02 F6 | 	mov	local09, local10
2d65c     01 36 66 F0 | 	shl	local09, #1
2d660     1C 37 02 F1 | 	add	local09, local10
2d664     1B 39 52 F6 | 	abs	local10, local09 wc
2d668     0A 38 16 FD | 	qdiv	local10, #10
2d66c     09 3A 06 F6 | 	mov	local11, #9
2d670     18 38 62 FD | 	getqx	local10
2d674     1C 39 82 F6 | 	negc	local10, local10
2d678     04 00 90 FD | 	jmp	#LR__4291
2d67c                 | LR__4290
2d67c     18 3A 06 F6 | 	mov	local11, #24
2d680                 | LR__4291
2d680                 | LR__4292
2d680     08 34 56 F2 | 	cmps	local08, #8 wc
2d684     01 34 06 F1 | 	add	local08, #1
2d688     60 00 90 3D |  if_ae	jmp	#LR__4293
2d68c     00 C0 1F FF 
2d690     00 12 06 F6 | 	mov	arg01, ##1065353216
2d694     19 15 02 F6 | 	mov	arg02, local07
2d698     1C 17 02 F6 | 	mov	arg03, local10
2d69c     44 E3 BF FD | 	call	#__system___float_pow_n
2d6a0     FD 14 02 F6 | 	mov	arg02, result1
2d6a4     13 13 02 F6 | 	mov	arg01, local01
2d6a8     30 D5 BF FD | 	call	#__system___float_div
2d6ac     FD 3C 02 F6 | 	mov	local12, result1
2d6b0     1E 13 02 F6 | 	mov	arg01, local12
2d6b4     00 C0 1F FF 
2d6b8     00 14 06 F6 | 	mov	arg02, ##1065353216
2d6bc     01 16 06 F6 | 	mov	arg03, #1
2d6c0     48 D7 BF FD | 	call	#__system___float_cmp
2d6c4     00 FA 55 F2 | 	cmps	result1, #0 wc
2d6c8     01 38 86 C1 |  if_b	sub	local10, #1
2d6cc     B0 FF 9F CD |  if_b	jmp	#LR__4292
2d6d0     19 15 02 F6 | 	mov	arg02, local07
2d6d4     1E 13 02 F6 | 	mov	arg01, local12
2d6d8     01 16 66 F6 | 	neg	arg03, #1
2d6dc     2C D7 BF FD | 	call	#__system___float_cmp
2d6e0     00 FA 55 F2 | 	cmps	result1, #0 wc
2d6e4     01 38 06 31 |  if_ae	add	local10, #1
2d6e8     94 FF 9F 3D |  if_ae	jmp	#LR__4292
2d6ec                 | LR__4293
2d6ec     1E 13 02 F6 | 	mov	arg01, local12
2d6f0     0C DC BF FD | 	call	#__system____builtin_ilogb
2d6f4     FD 3E 02 F6 | 	mov	local13, result1
2d6f8     1E 41 02 F6 | 	mov	local14, local12
2d6fc     17 41 06 F4 | 	bitl	local14, #279
2d700     17 40 26 F4 | 	bith	local14, #23
2d704     1F 41 62 F0 | 	shl	local14, local13
2d708     02 2E 0E F2 | 	cmp	local05, #2 wz
2d70c     02 2C 66 A0 |  if_e	shl	local04, #2
2d710     00 42 06 F6 | 	mov	local15, #0
2d714     00 2C 56 F2 | 	cmps	local04, #0 wc
2d718     10 00 90 3D |  if_ae	jmp	#LR__4294
2d71c     1C 2D C2 F2 | 	subr	local04, local10
2d720     00 2C 56 F2 | 	cmps	local04, #0 wc
2d724     A0 00 90 CD |  if_b	jmp	#LR__4301
2d728     04 00 90 FD | 	jmp	#LR__4295
2d72c                 | LR__4294
2d72c     01 2C 06 F1 | 	add	local04, #1
2d730                 | LR__4295
2d730     1D 2D 7A F3 | 	fles	local04, local11 wcz
2d734     01 44 06 F6 | 	mov	local16, #1
2d738     97 22 48 FB | 	callpa	#(@LR__4297-@LR__4296)>>2,fcache_load_ptr_
2d73c                 | LR__4296
2d73c     00 40 00 FF 
2d740     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2d744     38 00 90 3D |  if_ae	jmp	#LR__4298
2d748     01 2C 56 F2 | 	cmps	local04, #1 wc
2d74c     01 2C 86 F1 | 	sub	local04, #1
2d750     2C 00 90 CD |  if_b	jmp	#LR__4298
2d754     17 43 02 FD | 	qmul	local15, local05
2d758     20 3F 02 F6 | 	mov	local13, local14
2d75c     17 3E 46 F0 | 	shr	local13, #23
2d760     17 41 06 F4 | 	bitl	local14, #279
2d764     18 42 62 FD | 	getqx	local15
2d768     17 45 02 FD | 	qmul	local16, local05
2d76c     18 44 62 FD | 	getqx	local16
2d770     17 41 02 FD | 	qmul	local14, local05
2d774     1F 43 02 F1 | 	add	local15, local13
2d778     18 40 62 FD | 	getqx	local14
2d77c     BC FF 9F FD | 	jmp	#LR__4296
2d780                 | LR__4297
2d780                 | LR__4298
2d780     17 37 02 F6 | 	mov	local09, local05
2d784     17 36 66 F0 | 	shl	local09, #23
2d788     1B 3F 52 F6 | 	abs	local13, local09 wc
2d78c     01 3E 46 F0 | 	shr	local13, #1
2d790     1F 3F 82 F6 | 	negc	local13, local13
2d794     1F 41 1A F2 | 	cmp	local14, local13 wcz
2d798     20 00 90 1D |  if_a	jmp	#LR__4299
2d79c     17 2E 66 F0 | 	shl	local05, #23
2d7a0     17 3F 52 F6 | 	abs	local13, local05 wc
2d7a4     01 3E 46 F0 | 	shr	local13, #1
2d7a8     1F 3F 82 F6 | 	negc	local13, local13
2d7ac     1F 41 0A F2 | 	cmp	local14, local13 wz
2d7b0     14 00 90 5D |  if_ne	jmp	#LR__4300
2d7b4     01 42 CE F7 | 	test	local15, #1 wz
2d7b8     0C 00 90 AD |  if_e	jmp	#LR__4300
2d7bc                 | LR__4299
2d7bc     01 42 06 F1 | 	add	local15, #1
2d7c0     22 43 0A F2 | 	cmp	local15, local16 wz
2d7c4     01 38 06 A1 |  if_e	add	local10, #1
2d7c8                 | LR__4300
2d7c8                 | LR__4301
2d7c8     14 43 62 FC | 	wrlong	local15, local02
2d7cc     15 39 62 FC | 	wrlong	local10, local03
2d7d0                 | LR__4302
2d7d0     A7 F0 03 F6 | 	mov	ptra, fp
2d7d4     B2 00 A0 FD | 	call	#popregs_
2d7d8                 | __system__disassemble_0580_ret
2d7d8     2D 00 64 FD | 	ret
2d7dc                 | 
2d7dc                 | __system__emitsign_0582
2d7dc     00 FA 05 F6 | 	mov	result1, #0
2d7e0     00 14 0E F2 | 	cmp	arg02, #0 wz
2d7e4     09 01 02 56 |  if_ne	mov	_var01, arg01
2d7e8     01 12 06 51 |  if_ne	add	arg01, #1
2d7ec     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2d7f0     01 FA 05 56 |  if_ne	mov	result1, #1
2d7f4     00 16 0E F2 | 	cmp	arg03, #0 wz
2d7f8     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2d7fc     01 12 06 51 |  if_ne	add	arg01, #1
2d800     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2d804     02 FA 05 51 |  if_ne	add	result1, #2
2d808                 | __system__emitsign_0582_ret
2d808     2D 00 64 FD | 	ret
2d80c                 | 
2d80c                 | __system___getiolock_0620
2d80c     01 4A 05 F6 | 	mov	COUNT_, #1
2d810     A8 00 A0 FD | 	call	#pushregs_
2d814     98 F8 BF FD | 	call	#__system____getftab
2d818     FD 26 0A F6 | 	mov	local01, result1 wz
2d81c     10 00 90 AD |  if_e	jmp	#LR__4310
2d820     08 26 06 F1 | 	add	local01, #8
2d824     13 FB 09 FB | 	rdlong	result1, local01 wz
2d828     08 26 86 F1 | 	sub	local01, #8
2d82c     18 00 90 5D |  if_ne	jmp	#LR__4311
2d830                 | LR__4310
2d830     01 00 00 FF 
2d834     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2d838     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2d83c     01 00 00 FF 
2d840     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2d844     08 00 90 FD | 	jmp	#LR__4312
2d848                 | LR__4311
2d848     0C 26 06 F1 | 	add	local01, #12
2d84c     13 FB 01 F6 | 	mov	result1, local01
2d850                 | LR__4312
2d850     A7 F0 03 F6 | 	mov	ptra, fp
2d854     B2 00 A0 FD | 	call	#popregs_
2d858                 | __system___getiolock_0620_ret
2d858     2D 00 64 FD | 	ret
2d85c                 | 
2d85c                 | __system___gettxfunc
2d85c     01 4A 05 F6 | 	mov	COUNT_, #1
2d860     A8 00 A0 FD | 	call	#pushregs_
2d864     48 F8 BF FD | 	call	#__system____getftab
2d868     FD 26 0A F6 | 	mov	local01, result1 wz
2d86c     10 00 90 AD |  if_e	jmp	#LR__4320
2d870     08 26 06 F1 | 	add	local01, #8
2d874     13 15 0A FB | 	rdlong	arg02, local01 wz
2d878     08 26 86 F1 | 	sub	local01, #8
2d87c     08 00 90 5D |  if_ne	jmp	#LR__4321
2d880                 | LR__4320
2d880     00 FA 05 F6 | 	mov	result1, #0
2d884     0C 00 90 FD | 	jmp	#LR__4322
2d888                 | LR__4321
2d888     00 70 05 FF 
2d88c     00 26 46 F5 | 	or	local01, ##182452224
2d890     13 FB 01 F6 | 	mov	result1, local01
2d894                 | LR__4322
2d894     A7 F0 03 F6 | 	mov	ptra, fp
2d898     B2 00 A0 FD | 	call	#popregs_
2d89c                 | __system___gettxfunc_ret
2d89c     2D 00 64 FD | 	ret
2d8a0                 | 
2d8a0                 | __system___getrxfunc
2d8a0     01 4A 05 F6 | 	mov	COUNT_, #1
2d8a4     A8 00 A0 FD | 	call	#pushregs_
2d8a8     04 F8 BF FD | 	call	#__system____getftab
2d8ac     FD 26 0A F6 | 	mov	local01, result1 wz
2d8b0     10 00 90 AD |  if_e	jmp	#LR__4330
2d8b4     08 26 06 F1 | 	add	local01, #8
2d8b8     13 15 0A FB | 	rdlong	arg02, local01 wz
2d8bc     08 26 86 F1 | 	sub	local01, #8
2d8c0     08 00 90 5D |  if_ne	jmp	#LR__4331
2d8c4                 | LR__4330
2d8c4     00 FA 05 F6 | 	mov	result1, #0
2d8c8     0C 00 90 FD | 	jmp	#LR__4332
2d8cc                 | LR__4331
2d8cc     00 78 05 FF 
2d8d0     00 26 46 F5 | 	or	local01, ##183500800
2d8d4     13 FB 01 F6 | 	mov	result1, local01
2d8d8                 | LR__4332
2d8d8     A7 F0 03 F6 | 	mov	ptra, fp
2d8dc     B2 00 A0 FD | 	call	#popregs_
2d8e0                 | __system___getrxfunc_ret
2d8e0     2D 00 64 FD | 	ret
2d8e4                 | 
2d8e4                 | __system____ScanForChar
2d8e4     09 01 02 F6 | 	mov	_var01, arg01
2d8e8     09 03 02 F6 | 	mov	_var02, arg01
2d8ec     97 06 48 FB | 	callpa	#(@LR__4341-@LR__4340)>>2,fcache_load_ptr_
2d8f0                 | LR__4340
2d8f0     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2d8f4     01 02 06 51 |  if_ne	add	_var02, #1
2d8f8     F4 FF 9F 5D |  if_ne	jmp	#LR__4340
2d8fc                 | LR__4341
2d8fc     09 03 82 F1 | 	sub	_var02, arg01
2d900     01 FB 01 F6 | 	mov	result1, _var02
2d904     FD 12 0A F6 | 	mov	arg01, result1 wz
2d908     00 FA 05 A6 |  if_e	mov	result1, #0
2d90c     B8 00 90 AD |  if_e	jmp	#LR__4348
2d910     0A 05 02 F6 | 	mov	_var03, arg02
2d914     07 04 4E F7 | 	zerox	_var03, #7 wz
2d918     00 FA 05 A6 |  if_e	mov	result1, #0
2d91c     A8 00 90 AD |  if_e	jmp	#LR__4348
2d920     01 16 16 F2 | 	cmp	arg03, #1 wc
2d924     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2d928     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2d92c     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2d930     94 00 90 4D |  if_c_and_nz	jmp	#LR__4348
2d934     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2d938     10 00 90 ED |  if_be	jmp	#LR__4342
2d93c     00 18 0E F2 | 	cmp	arg04, #0 wz
2d940     00 FA 05 A6 |  if_e	mov	result1, #0
2d944     80 00 90 AD |  if_e	jmp	#LR__4348
2d948     09 17 02 F6 | 	mov	arg03, arg01
2d94c                 | LR__4342
2d94c     01 16 86 F1 | 	sub	arg03, #1
2d950     00 18 0E F2 | 	cmp	arg04, #0 wz
2d954     38 00 90 5D |  if_ne	jmp	#LR__4344
2d958     0B 07 02 F6 | 	mov	_var04, arg03
2d95c     09 09 02 F6 | 	mov	_var05, arg01
2d960                 | LR__4343
2d960     04 07 12 F2 | 	cmp	_var04, _var05 wc
2d964     5C 00 90 3D |  if_ae	jmp	#LR__4347
2d968     03 05 02 F6 | 	mov	_var03, _var04
2d96c     00 05 02 F1 | 	add	_var03, _var01
2d970     02 05 C2 FA | 	rdbyte	_var03, _var03
2d974     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2d978     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2d97c     01 06 06 A1 |  if_e	add	_var04, #1
2d980     03 FB 01 A6 |  if_e	mov	result1, _var04
2d984     40 00 90 AD |  if_e	jmp	#LR__4348
2d988     01 06 06 F1 | 	add	_var04, #1
2d98c     D0 FF 9F FD | 	jmp	#LR__4343
2d990                 | LR__4344
2d990     0B 07 02 F6 | 	mov	_var04, arg03
2d994                 | LR__4345
2d994     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2d998     28 00 90 1D |  if_a	jmp	#LR__4346
2d99c     03 09 02 F6 | 	mov	_var05, _var04
2d9a0     00 09 02 F1 | 	add	_var05, _var01
2d9a4     04 05 C2 FA | 	rdbyte	_var03, _var05
2d9a8     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2d9ac     04 05 0A F2 | 	cmp	_var03, _var05 wz
2d9b0     01 06 06 A1 |  if_e	add	_var04, #1
2d9b4     03 FB 01 A6 |  if_e	mov	result1, _var04
2d9b8     0C 00 90 AD |  if_e	jmp	#LR__4348
2d9bc     01 06 86 F1 | 	sub	_var04, #1
2d9c0     D0 FF 9F FD | 	jmp	#LR__4345
2d9c4                 | LR__4346
2d9c4                 | LR__4347
2d9c4     00 FA 05 F6 | 	mov	result1, #0
2d9c8                 | LR__4348
2d9c8                 | __system____ScanForChar_ret
2d9c8     2D 00 64 FD | 	ret
2d9cc                 | 
2d9cc                 | __system___basic_dir
2d9cc     05 4A 05 F6 | 	mov	COUNT_, #5
2d9d0     A8 00 A0 FD | 	call	#pushregs_
2d9d4     4C F0 07 F1 | 	add	ptra, #76
2d9d8     04 4E 05 F1 | 	add	fp, #4
2d9dc     A7 12 62 FC | 	wrlong	arg01, fp
2d9e0     04 4E 05 F1 | 	add	fp, #4
2d9e4     A7 14 62 FC | 	wrlong	arg02, fp
2d9e8     04 4E 85 F1 | 	sub	fp, #4
2d9ec     A7 14 0A FB | 	rdlong	arg02, fp wz
2d9f0     04 4E 85 F1 | 	sub	fp, #4
2d9f4     04 4E 05 51 |  if_ne	add	fp, #4
2d9f8     A7 26 02 5B |  if_ne	rdlong	local01, fp
2d9fc     04 4E 85 51 |  if_ne	sub	fp, #4
2da00     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2da04     70 00 90 AD |  if_e	jmp	#LR__4350
2da08     03 00 00 FF 
2da0c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2da10     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2da14     03 00 00 FF 
2da18     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2da1c     03 00 00 5F 
2da20     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2da24     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2da28     03 00 00 5F 
2da2c     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2da30     D0 E9 BF 5D |  if_ne	call	#__system__closedir
2da34     BB 01 00 FF 
2da38     E4 12 06 F6 | 	mov	arg01, ##@LR__5528
2da3c     D8 E8 BF FD | 	call	#__system__opendir
2da40     03 00 00 FF 
2da44     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2da48     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2da4c     08 4E 05 F1 | 	add	fp, #8
2da50     A7 28 02 FB | 	rdlong	local02, fp
2da54     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2da58     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2da5c     04 4E 85 F1 | 	sub	fp, #4
2da60     A7 28 02 FB | 	rdlong	local02, fp
2da64     04 4E 85 F1 | 	sub	fp, #4
2da68     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2da6c     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2da70     03 00 00 FF 
2da74     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2da78                 | LR__4350
2da78     03 00 00 FF 
2da7c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2da80     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2da84     03 00 00 FF 
2da88     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2da8c     BB 01 00 AF 
2da90     E6 FA 05 A6 |  if_e	mov	result1, ##@LR__5529
2da94     84 02 90 AD |  if_e	jmp	#LR__4363
2da98                 | LR__4351
2da98     03 00 00 FF 
2da9c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2daa0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2daa4     03 00 00 FF 
2daa8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2daac     C8 E9 BF FD | 	call	#__system__readdir
2dab0     0C 4E 05 F1 | 	add	fp, #12
2dab4     A7 FA 61 FC | 	wrlong	result1, fp
2dab8     0C 4E 85 F1 | 	sub	fp, #12
2dabc     00 FA 0D F2 | 	cmp	result1, #0 wz
2dac0     38 00 90 5D |  if_ne	jmp	#LR__4352
2dac4     03 00 00 FF 
2dac8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2dacc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2dad0     03 00 00 FF 
2dad4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2dad8     28 E9 BF FD | 	call	#__system__closedir
2dadc     03 00 00 FF 
2dae0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2dae4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2dae8     03 00 00 FF 
2daec     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2daf0     BB 01 00 FF 
2daf4     E8 FA 05 F6 | 	mov	result1, ##@LR__5530
2daf8     20 02 90 FD | 	jmp	#LR__4363
2dafc                 | LR__4352
2dafc     0C 4E 05 F1 | 	add	fp, #12
2db00     A7 12 02 FB | 	rdlong	arg01, fp
2db04     0C 4E 85 F1 | 	sub	fp, #12
2db08     03 00 00 FF 
2db0c     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2db10     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2db14     03 00 00 FF 
2db18     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2db1c     10 09 B0 FD | 	call	#__system___pat_match
2db20     00 FA 0D F2 | 	cmp	result1, #0 wz
2db24     70 FF 9F AD |  if_e	jmp	#LR__4351
2db28     03 00 00 FF 
2db2c     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2db30     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2db34     03 00 00 FF 
2db38     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2db3c     78 01 90 AD |  if_e	jmp	#LR__4359
2db40     0C 4E 05 F1 | 	add	fp, #12
2db44     A7 12 02 FB | 	rdlong	arg01, fp
2db48     04 4E 05 F1 | 	add	fp, #4
2db4c     A7 14 02 F6 | 	mov	arg02, fp
2db50     10 4E 85 F1 | 	sub	fp, #16
2db54     24 F2 BF FD | 	call	#__system__stat
2db58     40 4E 05 F1 | 	add	fp, #64
2db5c     A7 FA 61 FC | 	wrlong	result1, fp
2db60     40 4E 85 F1 | 	sub	fp, #64
2db64     00 FA 0D F2 | 	cmp	result1, #0 wz
2db68     BB 01 00 5F 
2db6c     EA FA 05 56 |  if_ne	mov	result1, ##@LR__5531
2db70     A8 01 90 5D |  if_ne	jmp	#LR__4363
2db74     18 4E 05 F1 | 	add	fp, #24
2db78     A7 28 02 FB | 	rdlong	local02, fp
2db7c     78 00 00 FF 
2db80     00 28 06 F5 | 	and	local02, ##61440
2db84     2C 4E 05 F1 | 	add	fp, #44
2db88     A7 28 62 FC | 	wrlong	local02, fp
2db8c     38 4E 85 F1 | 	sub	fp, #56
2db90     A7 28 02 FB | 	rdlong	local02, fp
2db94     0C 4E 85 F1 | 	sub	fp, #12
2db98     14 29 C2 FA | 	rdbyte	local02, local02
2db9c     2E 28 0E F2 | 	cmp	local02, #46 wz
2dba0     08 4E 05 A1 |  if_e	add	fp, #8
2dba4     A7 04 68 AC |  if_e	wrlong	#2, fp
2dba8     08 4E C5 F3 | 	sumz	fp, #8
2dbac     A7 00 68 5C |  if_ne	wrlong	#0, fp
2dbb0     08 4E 85 51 |  if_ne	sub	fp, #8
2dbb4     44 4E 05 F1 | 	add	fp, #68
2dbb8     A7 28 02 FB | 	rdlong	local02, fp
2dbbc     44 4E 85 F1 | 	sub	fp, #68
2dbc0     08 00 00 FF 
2dbc4     00 28 0E F2 | 	cmp	local02, ##4096 wz
2dbc8     18 00 90 5D |  if_ne	jmp	#LR__4353
2dbcc     08 4E 05 F1 | 	add	fp, #8
2dbd0     A7 28 02 FB | 	rdlong	local02, fp
2dbd4     10 28 46 F5 | 	or	local02, #16
2dbd8     A7 28 62 FC | 	wrlong	local02, fp
2dbdc     08 4E 85 F1 | 	sub	fp, #8
2dbe0     AC 00 90 FD | 	jmp	#LR__4358
2dbe4                 | LR__4353
2dbe4     44 4E 05 F1 | 	add	fp, #68
2dbe8     A7 28 02 FB | 	rdlong	local02, fp
2dbec     44 4E 85 F1 | 	sub	fp, #68
2dbf0     10 00 00 FF 
2dbf4     00 28 0E F2 | 	cmp	local02, ##8192 wz
2dbf8     44 4E 05 51 |  if_ne	add	fp, #68
2dbfc     A7 26 02 5B |  if_ne	rdlong	local01, fp
2dc00     44 4E 85 51 |  if_ne	sub	fp, #68
2dc04     18 00 00 5F 
2dc08     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2dc0c     44 4E 05 51 |  if_ne	add	fp, #68
2dc10     13 2B 02 56 |  if_ne	mov	local03, local01
2dc14     44 4E 85 51 |  if_ne	sub	fp, #68
2dc18     20 00 00 5F 
2dc1c     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2dc20     18 00 90 5D |  if_ne	jmp	#LR__4354
2dc24     08 4E 05 F1 | 	add	fp, #8
2dc28     A7 28 02 FB | 	rdlong	local02, fp
2dc2c     04 28 46 F5 | 	or	local02, #4
2dc30     A7 28 62 FC | 	wrlong	local02, fp
2dc34     08 4E 85 F1 | 	sub	fp, #8
2dc38     54 00 90 FD | 	jmp	#LR__4357
2dc3c                 | LR__4354
2dc3c     18 4E 05 F1 | 	add	fp, #24
2dc40     A7 28 02 FB | 	rdlong	local02, fp
2dc44     18 4E 85 F1 | 	sub	fp, #24
2dc48     92 28 CE F7 | 	test	local02, #146 wz
2dc4c     18 00 90 5D |  if_ne	jmp	#LR__4355
2dc50     08 4E 05 F1 | 	add	fp, #8
2dc54     A7 28 02 FB | 	rdlong	local02, fp
2dc58     01 28 46 F5 | 	or	local02, #1
2dc5c     A7 28 62 FC | 	wrlong	local02, fp
2dc60     08 4E 85 F1 | 	sub	fp, #8
2dc64     28 00 90 FD | 	jmp	#LR__4356
2dc68                 | LR__4355
2dc68     44 4E 05 F1 | 	add	fp, #68
2dc6c     A7 2C 02 FB | 	rdlong	local04, fp
2dc70     44 4E 85 F1 | 	sub	fp, #68
2dc74     08 00 00 FF 
2dc78     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2dc7c     08 4E 05 51 |  if_ne	add	fp, #8
2dc80     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2dc84     20 2C 46 55 |  if_ne	or	local04, #32
2dc88     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2dc8c     08 4E 85 51 |  if_ne	sub	fp, #8
2dc90                 | LR__4356
2dc90                 | LR__4357
2dc90                 | LR__4358
2dc90     08 4E 05 F1 | 	add	fp, #8
2dc94     A7 2C 02 FB | 	rdlong	local04, fp
2dc98     08 4E 85 F1 | 	sub	fp, #8
2dc9c     03 00 00 FF 
2dca0     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2dca4     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2dca8     03 00 00 FF 
2dcac     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2dcb0     13 2D CA F7 | 	test	local04, local01 wz
2dcb4     E0 FD 9F AD |  if_e	jmp	#LR__4351
2dcb8                 | LR__4359
2dcb8     0C 4E 05 F1 | 	add	fp, #12
2dcbc     A7 12 02 FB | 	rdlong	arg01, fp
2dcc0     0C 4E 85 F1 | 	sub	fp, #12
2dcc4     09 2F 02 F6 | 	mov	local05, arg01
2dcc8     97 06 48 FB | 	callpa	#(@LR__4361-@LR__4360)>>2,fcache_load_ptr_
2dccc                 | LR__4360
2dccc     17 FB C9 FA | 	rdbyte	result1, local05 wz
2dcd0     01 2E 06 51 |  if_ne	add	local05, #1
2dcd4     F4 FF 9F 5D |  if_ne	jmp	#LR__4360
2dcd8                 | LR__4361
2dcd8     17 13 C2 F2 | 	subr	arg01, local05
2dcdc     01 12 06 F1 | 	add	arg01, #1
2dce0     20 E0 BF FD | 	call	#__system___gc_alloc_managed
2dce4     48 4E 05 F1 | 	add	fp, #72
2dce8     A7 FA 61 FC | 	wrlong	result1, fp
2dcec     48 4E 85 F1 | 	sub	fp, #72
2dcf0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dcf4     18 00 90 AD |  if_e	jmp	#LR__4362
2dcf8     48 4E 05 F1 | 	add	fp, #72
2dcfc     A7 12 02 FB | 	rdlong	arg01, fp
2dd00     3C 4E 85 F1 | 	sub	fp, #60
2dd04     A7 14 02 FB | 	rdlong	arg02, fp
2dd08     0C 4E 85 F1 | 	sub	fp, #12
2dd0c     00 9E BF FD | 	call	#__system____builtin_strcpy
2dd10                 | LR__4362
2dd10     48 4E 05 F1 | 	add	fp, #72
2dd14     A7 FA 01 FB | 	rdlong	result1, fp
2dd18     48 4E 85 F1 | 	sub	fp, #72
2dd1c                 | LR__4363
2dd1c     A7 F0 03 F6 | 	mov	ptra, fp
2dd20     B2 00 A0 FD | 	call	#popregs_
2dd24                 | __system___basic_dir_ret
2dd24     2D 00 64 FD | 	ret
2dd28                 | 
2dd28                 | __system__pack_0695
2dd28     09 01 02 F6 | 	mov	_var01, arg01
2dd2c     7F 16 06 F1 | 	add	arg03, #127
2dd30     04 18 CE F7 | 	test	arg04, #4 wz
2dd34     10 00 90 AD |  if_e	jmp	#LR__4370
2dd38     00 00 0E F2 | 	cmp	_var01, #0 wz
2dd3c     16 00 C6 A9 |  if_e	decod	_var01, #22
2dd40     F7 00 26 F4 | 	bith	_var01, #247
2dd44     B4 00 90 FD | 	jmp	#LR__4379
2dd48                 | LR__4370
2dd48     02 18 CE F7 | 	test	arg04, #2 wz
2dd4c     00 C0 3F 5F 
2dd50     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2dd54     00 14 06 56 |  if_ne	mov	arg02, #0
2dd58     A0 00 90 5D |  if_ne	jmp	#LR__4378
2dd5c     08 18 CE F7 | 	test	arg04, #8 wz
2dd60     00 00 06 56 |  if_ne	mov	_var01, #0
2dd64     94 00 90 5D |  if_ne	jmp	#LR__4377
2dd68     FF 16 56 F2 | 	cmps	arg03, #255 wc
2dd6c     00 C0 3F 3F 
2dd70     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2dd74     00 14 06 36 |  if_ae	mov	arg02, #0
2dd78     80 00 90 3D |  if_ae	jmp	#LR__4376
2dd7c     01 16 56 F2 | 	cmps	arg03, #1 wc
2dd80     6C 00 90 3D |  if_ae	jmp	#LR__4374
2dd84     01 14 46 F0 | 	shr	arg02, #1
2dd88     00 03 02 F6 | 	mov	_var02, _var01
2dd8c     01 02 06 F5 | 	and	_var02, #1
2dd90     1F 02 66 F0 | 	shl	_var02, #31
2dd94     01 15 42 F5 | 	or	arg02, _var02
2dd98     01 00 46 F0 | 	shr	_var01, #1
2dd9c     97 1E 48 FB | 	callpa	#(@LR__4372-@LR__4371)>>2,fcache_load_ptr_
2dda0                 | LR__4371
2dda0     00 16 56 F2 | 	cmps	arg03, #0 wc
2dda4     34 00 90 3D |  if_ae	jmp	#LR__4373
2dda8     00 00 0E F2 | 	cmp	_var01, #0 wz
2ddac     2C 00 90 AD |  if_e	jmp	#LR__4373
2ddb0     0A 13 02 F6 | 	mov	arg01, arg02
2ddb4     01 12 06 F5 | 	and	arg01, #1
2ddb8     01 16 06 F1 | 	add	arg03, #1
2ddbc     01 14 46 F0 | 	shr	arg02, #1
2ddc0     00 03 02 F6 | 	mov	_var02, _var01
2ddc4     01 02 06 F5 | 	and	_var02, #1
2ddc8     1F 02 66 F0 | 	shl	_var02, #31
2ddcc     01 15 42 F5 | 	or	arg02, _var02
2ddd0     09 15 42 F5 | 	or	arg02, arg01
2ddd4     01 00 46 F0 | 	shr	_var01, #1
2ddd8     C4 FF 9F FD | 	jmp	#LR__4371
2dddc                 | LR__4372
2dddc                 | LR__4373
2dddc     00 16 56 F2 | 	cmps	arg03, #0 wc
2dde0     18 00 90 3D |  if_ae	jmp	#LR__4375
2dde4     00 14 0E F2 | 	cmp	arg02, #0 wz
2dde8     6F 14 62 FD | 	wrnz	arg02
2ddec     0C 00 90 FD | 	jmp	#LR__4375
2ddf0                 | LR__4374
2ddf0     17 01 06 F4 | 	bitl	_var01, #279
2ddf4     17 16 66 F0 | 	shl	arg03, #23
2ddf8     0B 01 42 F5 | 	or	_var01, arg03
2ddfc                 | LR__4375
2ddfc                 | LR__4376
2ddfc                 | LR__4377
2ddfc                 | LR__4378
2ddfc                 | LR__4379
2ddfc     01 00 CE F7 | 	test	_var01, #1 wz
2de00     01 14 46 55 |  if_ne	or	arg02, #1
2de04     0A 17 02 F6 | 	mov	arg03, arg02
2de08     00 02 06 F6 | 	mov	_var02, #0
2de0c     FF FF 3F FF 
2de10     FF 15 06 F1 | 	add	arg02, ##2147483647
2de14     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2de18     01 02 06 C6 |  if_b	mov	_var02, #1
2de1c     01 01 02 F1 | 	add	_var01, _var02
2de20     01 18 CE F7 | 	test	arg04, #1 wz
2de24     1F 00 26 54 |  if_ne	bith	_var01, #31
2de28     00 FB 01 F6 | 	mov	result1, _var01
2de2c                 | __system__pack_0695_ret
2de2c     2D 00 64 FD | 	ret
2de30                 | 
2de30                 | __system___rxtxioctl_0785
2de30     00 15 0E F2 | 	cmp	arg02, #256 wz
2de34     0C 00 90 AD |  if_e	jmp	#LR__4380
2de38     01 15 0E F2 | 	cmp	arg02, #257 wz
2de3c     1C 00 90 AD |  if_e	jmp	#LR__4381
2de40     30 00 90 FD | 	jmp	#LR__4382
2de44                 | LR__4380
2de44     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2de48     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2de4c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2de50     0B FB 61 FC | 	wrlong	result1, arg03
2de54     00 FA 05 F6 | 	mov	result1, #0
2de58     28 00 90 FD | 	jmp	#LR__4383
2de5c                 | LR__4381
2de5c     0B 13 02 FB | 	rdlong	arg01, arg03
2de60     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2de64     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2de68     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2de6c     00 FA 05 F6 | 	mov	result1, #0
2de70     10 00 90 FD | 	jmp	#LR__4383
2de74                 | LR__4382
2de74     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2de78     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2de7c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2de80     01 FA 65 F6 | 	neg	result1, #1
2de84                 | LR__4383
2de84                 | __system___rxtxioctl_0785_ret
2de84     2D 00 64 FD | 	ret
2de88                 | 
2de88                 | __system____dummy_flush_0786
2de88     00 FA 05 F6 | 	mov	result1, #0
2de8c                 | __system____dummy_flush_0786_ret
2de8c     2D 00 64 FD | 	ret
2de90                 | 
2de90                 | __system___vfswrite
2de90     09 4A 05 F6 | 	mov	COUNT_, #9
2de94     A8 00 A0 FD | 	call	#pushregs_
2de98     09 27 02 F6 | 	mov	local01, arg01
2de9c     0A 29 02 F6 | 	mov	local02, arg02
2dea0     0B 2B 02 F6 | 	mov	local03, arg03
2dea4     14 2D 02 F6 | 	mov	local04, local02
2dea8     08 26 06 F1 | 	add	local01, #8
2deac     13 13 02 FB | 	rdlong	arg01, local01
2deb0     08 26 86 F1 | 	sub	local01, #8
2deb4     02 12 CE F7 | 	test	arg01, #2 wz
2deb8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2debc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2dec0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2dec4     01 FA 65 A6 |  if_e	neg	result1, #1
2dec8     80 01 90 AD |  if_e	jmp	#LR__4396
2decc     08 26 06 F1 | 	add	local01, #8
2ded0     13 FB 01 FB | 	rdlong	result1, local01
2ded4     08 26 86 F1 | 	sub	local01, #8
2ded8     40 FA CD F7 | 	test	result1, #64 wz
2dedc     68 00 90 AD |  if_e	jmp	#LR__4391
2dee0     08 26 06 F1 | 	add	local01, #8
2dee4     13 15 02 FB | 	rdlong	arg02, local01
2dee8     08 26 86 F1 | 	sub	local01, #8
2deec     80 14 CE F7 | 	test	arg02, #128 wz
2def0     54 00 90 AD |  if_e	jmp	#LR__4390
2def4     30 26 06 F1 | 	add	local01, #48
2def8     13 2F 02 FB | 	rdlong	local05, local01
2defc     17 31 02 F6 | 	mov	local06, local05
2df00     30 26 86 F1 | 	sub	local01, #48
2df04     13 30 46 F7 | 	zerox	local06, #19
2df08     14 2E 46 F0 | 	shr	local05, #20
2df0c     02 2E 66 F0 | 	shl	local05, #2
2df10     ED 2E 02 F1 | 	add	local05, __methods__
2df14     17 2F 02 FB | 	rdlong	local05, local05
2df18     13 13 02 F6 | 	mov	arg01, local01
2df1c     00 14 06 F6 | 	mov	arg02, #0
2df20     02 16 06 F6 | 	mov	arg03, #2
2df24     F2 32 02 F6 | 	mov	local07, objptr
2df28     18 E5 01 F6 | 	mov	objptr, local06
2df2c     2D 2E 62 FD | 	call	local05
2df30     19 E5 01 F6 | 	mov	objptr, local07
2df34     08 26 06 F1 | 	add	local01, #8
2df38     13 33 02 FB | 	rdlong	local07, local01
2df3c     80 32 26 F5 | 	andn	local07, #128
2df40     13 33 62 FC | 	wrlong	local07, local01
2df44     08 26 86 F1 | 	sub	local01, #8
2df48                 | LR__4390
2df48                 | LR__4391
2df48     18 26 06 F1 | 	add	local01, #24
2df4c     13 33 0A FB | 	rdlong	local07, local01 wz
2df50     18 26 86 F1 | 	sub	local01, #24
2df54     80 00 90 AD |  if_e	jmp	#LR__4393
2df58     18 26 06 F1 | 	add	local01, #24
2df5c     13 2F 02 FB | 	rdlong	local05, local01
2df60     17 31 02 F6 | 	mov	local06, local05
2df64     18 26 86 F1 | 	sub	local01, #24
2df68     13 30 46 F7 | 	zerox	local06, #19
2df6c     14 2E 46 F0 | 	shr	local05, #20
2df70     02 2E 66 F0 | 	shl	local05, #2
2df74     ED 2E 02 F1 | 	add	local05, __methods__
2df78     17 2F 02 FB | 	rdlong	local05, local05
2df7c     14 15 02 F6 | 	mov	arg02, local02
2df80     15 17 02 F6 | 	mov	arg03, local03
2df84     13 13 02 F6 | 	mov	arg01, local01
2df88     F2 32 02 F6 | 	mov	local07, objptr
2df8c     18 E5 01 F6 | 	mov	objptr, local06
2df90     2D 2E 62 FD | 	call	local05
2df94     19 E5 01 F6 | 	mov	objptr, local07
2df98     FD 34 02 F6 | 	mov	local08, result1
2df9c     00 34 56 F2 | 	cmps	local08, #0 wc
2dfa0     2C 00 90 3D |  if_ae	jmp	#LR__4392
2dfa4     08 26 06 F1 | 	add	local01, #8
2dfa8     13 33 02 FB | 	rdlong	local07, local01
2dfac     20 32 46 F5 | 	or	local07, #32
2dfb0     13 33 62 FC | 	wrlong	local07, local01
2dfb4     00 34 4E F2 | 	cmps	local08, #0 wz
2dfb8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2dfbc     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2dfc0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2dfc4     01 FA 65 56 |  if_ne	neg	result1, #1
2dfc8     00 FA 05 A6 |  if_e	mov	result1, #0
2dfcc     7C 00 90 FD | 	jmp	#LR__4396
2dfd0                 | LR__4392
2dfd0     1A FB 01 F6 | 	mov	result1, local08
2dfd4     74 00 90 FD | 	jmp	#LR__4396
2dfd8                 | LR__4393
2dfd8     1C 26 06 F1 | 	add	local01, #28
2dfdc     13 37 0A FB | 	rdlong	local09, local01 wz
2dfe0     1C 26 86 F1 | 	sub	local01, #28
2dfe4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2dfe8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2dfec     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2dff0     01 FA 65 A6 |  if_e	neg	result1, #1
2dff4     54 00 90 AD |  if_e	jmp	#LR__4396
2dff8     00 34 06 F6 | 	mov	local08, #0
2dffc                 | LR__4394
2dffc     01 2A 16 F2 | 	cmp	local03, #1 wc
2e000     44 00 90 CD |  if_b	jmp	#LR__4395
2e004     1B 31 02 F6 | 	mov	local06, local09
2e008     1B 2F 02 F6 | 	mov	local05, local09
2e00c     13 30 46 F7 | 	zerox	local06, #19
2e010     14 2E 46 F0 | 	shr	local05, #20
2e014     02 2E 66 F0 | 	shl	local05, #2
2e018     ED 2E 02 F1 | 	add	local05, __methods__
2e01c     17 2F 02 FB | 	rdlong	local05, local05
2e020     16 13 C2 FA | 	rdbyte	arg01, local04
2e024     13 15 02 F6 | 	mov	arg02, local01
2e028     F2 32 02 F6 | 	mov	local07, objptr
2e02c     18 E5 01 F6 | 	mov	objptr, local06
2e030     01 2C 06 F1 | 	add	local04, #1
2e034     2D 2E 62 FD | 	call	local05
2e038     19 E5 01 F6 | 	mov	objptr, local07
2e03c     FD 34 02 F1 | 	add	local08, result1
2e040     01 2A 86 F1 | 	sub	local03, #1
2e044     B4 FF 9F FD | 	jmp	#LR__4394
2e048                 | LR__4395
2e048     1A FB 01 F6 | 	mov	result1, local08
2e04c                 | LR__4396
2e04c     A7 F0 03 F6 | 	mov	ptra, fp
2e050     B2 00 A0 FD | 	call	#popregs_
2e054                 | __system___vfswrite_ret
2e054     2D 00 64 FD | 	ret
2e058                 | 
2e058                 | __system___vfsread
2e058     03 4A 05 F6 | 	mov	COUNT_, #3
2e05c     A8 00 A0 FD | 	call	#pushregs_
2e060     28 F0 07 F1 | 	add	ptra, #40
2e064     04 4E 05 F1 | 	add	fp, #4
2e068     A7 12 62 FC | 	wrlong	arg01, fp
2e06c     04 4E 05 F1 | 	add	fp, #4
2e070     A7 14 62 FC | 	wrlong	arg02, fp
2e074     04 4E 05 F1 | 	add	fp, #4
2e078     A7 16 62 FC | 	wrlong	arg03, fp
2e07c     04 4E 85 F1 | 	sub	fp, #4
2e080     A7 FA 01 FB | 	rdlong	result1, fp
2e084     14 4E 05 F1 | 	add	fp, #20
2e088     A7 FA 61 FC | 	wrlong	result1, fp
2e08c     04 4E 05 F1 | 	add	fp, #4
2e090     A7 00 68 FC | 	wrlong	#0, fp
2e094     1C 4E 85 F1 | 	sub	fp, #28
2e098     A7 12 02 FB | 	rdlong	arg01, fp
2e09c     04 4E 85 F1 | 	sub	fp, #4
2e0a0     08 12 06 F1 | 	add	arg01, #8
2e0a4     09 FB 01 FB | 	rdlong	result1, arg01
2e0a8     01 FA CD F7 | 	test	result1, #1 wz
2e0ac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e0b0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e0b4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e0b8     01 FA 65 A6 |  if_e	neg	result1, #1
2e0bc     74 02 90 AD |  if_e	jmp	#LR__4406
2e0c0     04 4E 05 F1 | 	add	fp, #4
2e0c4     A7 12 02 FB | 	rdlong	arg01, fp
2e0c8     04 4E 85 F1 | 	sub	fp, #4
2e0cc     14 12 06 F1 | 	add	arg01, #20
2e0d0     09 FB 09 FB | 	rdlong	result1, arg01 wz
2e0d4     B8 00 90 AD |  if_e	jmp	#LR__4401
2e0d8     04 4E 05 F1 | 	add	fp, #4
2e0dc     A7 12 02 FB | 	rdlong	arg01, fp
2e0e0     09 17 02 F6 | 	mov	arg03, arg01
2e0e4     14 16 06 F1 | 	add	arg03, #20
2e0e8     0B 27 02 FB | 	rdlong	local01, arg03
2e0ec     13 29 02 F6 | 	mov	local02, local01
2e0f0     13 26 46 F7 | 	zerox	local01, #19
2e0f4     14 28 46 F0 | 	shr	local02, #20
2e0f8     02 28 66 F0 | 	shl	local02, #2
2e0fc     ED 28 02 F1 | 	add	local02, __methods__
2e100     14 29 02 FB | 	rdlong	local02, local02
2e104     04 4E 05 F1 | 	add	fp, #4
2e108     A7 14 02 FB | 	rdlong	arg02, fp
2e10c     04 4E 05 F1 | 	add	fp, #4
2e110     A7 16 02 FB | 	rdlong	arg03, fp
2e114     0C 4E 85 F1 | 	sub	fp, #12
2e118     F2 2A 02 F6 | 	mov	local03, objptr
2e11c     13 E5 01 F6 | 	mov	objptr, local01
2e120     2D 28 62 FD | 	call	local02
2e124     15 E5 01 F6 | 	mov	objptr, local03
2e128     10 4E 05 F1 | 	add	fp, #16
2e12c     A7 FA 61 FC | 	wrlong	result1, fp
2e130     10 4E 85 F1 | 	sub	fp, #16
2e134     00 FA 55 F2 | 	cmps	result1, #0 wc
2e138     44 00 90 3D |  if_ae	jmp	#LR__4400
2e13c     04 4E 05 F1 | 	add	fp, #4
2e140     A7 2A 02 FB | 	rdlong	local03, fp
2e144     15 27 02 F6 | 	mov	local01, local03
2e148     08 2A 06 F1 | 	add	local03, #8
2e14c     15 29 02 FB | 	rdlong	local02, local03
2e150     20 28 46 F5 | 	or	local02, #32
2e154     08 26 06 F1 | 	add	local01, #8
2e158     13 29 62 FC | 	wrlong	local02, local01
2e15c     0C 4E 05 F1 | 	add	fp, #12
2e160     A7 12 0A FB | 	rdlong	arg01, fp wz
2e164     10 4E 85 F1 | 	sub	fp, #16
2e168     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e16c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2e170     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e174     01 FA 65 56 |  if_ne	neg	result1, #1
2e178     00 FA 05 A6 |  if_e	mov	result1, #0
2e17c     B4 01 90 FD | 	jmp	#LR__4406
2e180                 | LR__4400
2e180     10 4E 05 F1 | 	add	fp, #16
2e184     A7 FA 01 FB | 	rdlong	result1, fp
2e188     10 4E 85 F1 | 	sub	fp, #16
2e18c     A4 01 90 FD | 	jmp	#LR__4406
2e190                 | LR__4401
2e190     04 4E 05 F1 | 	add	fp, #4
2e194     A7 12 02 FB | 	rdlong	arg01, fp
2e198     20 12 06 F1 | 	add	arg01, #32
2e19c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2e1a0     14 4E 05 F1 | 	add	fp, #20
2e1a4     A7 12 62 FC | 	wrlong	arg01, fp
2e1a8     18 4E 85 F1 | 	sub	fp, #24
2e1ac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e1b0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2e1b4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e1b8     01 FA 65 A6 |  if_e	neg	result1, #1
2e1bc     74 01 90 AD |  if_e	jmp	#LR__4406
2e1c0     04 4E 05 F1 | 	add	fp, #4
2e1c4     A7 2A 02 FB | 	rdlong	local03, fp
2e1c8     04 4E 85 F1 | 	sub	fp, #4
2e1cc     28 2A 06 F1 | 	add	local03, #40
2e1d0     15 29 0A FB | 	rdlong	local02, local03 wz
2e1d4     7C 00 90 AD |  if_e	jmp	#LR__4403
2e1d8     04 4E 05 F1 | 	add	fp, #4
2e1dc     A7 12 02 FB | 	rdlong	arg01, fp
2e1e0     09 2B 02 F6 | 	mov	local03, arg01
2e1e4     28 2A 06 F1 | 	add	local03, #40
2e1e8     15 27 02 FB | 	rdlong	local01, local03
2e1ec     13 29 02 F6 | 	mov	local02, local01
2e1f0     13 26 46 F7 | 	zerox	local01, #19
2e1f4     14 28 46 F0 | 	shr	local02, #20
2e1f8     02 28 66 F0 | 	shl	local02, #2
2e1fc     ED 28 02 F1 | 	add	local02, __methods__
2e200     14 29 02 FB | 	rdlong	local02, local02
2e204     20 4E 05 F1 | 	add	fp, #32
2e208     A7 16 02 F6 | 	mov	arg03, fp
2e20c     24 4E 85 F1 | 	sub	fp, #36
2e210     00 15 06 F6 | 	mov	arg02, #256
2e214     F2 2A 02 F6 | 	mov	local03, objptr
2e218     13 E5 01 F6 | 	mov	objptr, local01
2e21c     2D 28 62 FD | 	call	local02
2e220     15 E5 01 F6 | 	mov	objptr, local03
2e224     10 4E 05 F1 | 	add	fp, #16
2e228     A7 FA 61 FC | 	wrlong	result1, fp
2e22c     00 FA 4D F2 | 	cmps	result1, #0 wz
2e230     10 4E 85 F1 | 	sub	fp, #16
2e234     1C 00 90 5D |  if_ne	jmp	#LR__4402
2e238     24 4E 05 F1 | 	add	fp, #36
2e23c     A7 28 02 FB | 	rdlong	local02, fp
2e240     24 4E 85 F1 | 	sub	fp, #36
2e244     02 28 CE F7 | 	test	local02, #2 wz
2e248     20 4E 05 51 |  if_ne	add	fp, #32
2e24c     A7 02 68 5C |  if_ne	wrlong	#1, fp
2e250     20 4E 85 51 |  if_ne	sub	fp, #32
2e254                 | LR__4402
2e254                 | LR__4403
2e254     10 4E 05 F1 | 	add	fp, #16
2e258     A7 00 68 FC | 	wrlong	#0, fp
2e25c     10 4E 85 F1 | 	sub	fp, #16
2e260                 | LR__4404
2e260     0C 4E 05 F1 | 	add	fp, #12
2e264     A7 2A 02 FB | 	rdlong	local03, fp
2e268     0C 4E 85 F1 | 	sub	fp, #12
2e26c     01 2A 16 F2 | 	cmp	local03, #1 wc
2e270     B4 00 90 CD |  if_b	jmp	#LR__4405
2e274     18 4E 05 F1 | 	add	fp, #24
2e278     A7 28 02 FB | 	rdlong	local02, fp
2e27c     14 2B 02 F6 | 	mov	local03, local02
2e280     13 2A 46 F7 | 	zerox	local03, #19
2e284     14 28 46 F0 | 	shr	local02, #20
2e288     02 28 66 F0 | 	shl	local02, #2
2e28c     ED 28 02 F1 | 	add	local02, __methods__
2e290     14 29 02 FB | 	rdlong	local02, local02
2e294     14 4E 85 F1 | 	sub	fp, #20
2e298     A7 12 02 FB | 	rdlong	arg01, fp
2e29c     04 4E 85 F1 | 	sub	fp, #4
2e2a0     F2 26 02 F6 | 	mov	local01, objptr
2e2a4     15 E5 01 F6 | 	mov	objptr, local03
2e2a8     2D 28 62 FD | 	call	local02
2e2ac     13 E5 01 F6 | 	mov	objptr, local01
2e2b0     14 4E 05 F1 | 	add	fp, #20
2e2b4     A7 FA 61 FC | 	wrlong	result1, fp
2e2b8     14 4E 85 F1 | 	sub	fp, #20
2e2bc     00 FA 55 F2 | 	cmps	result1, #0 wc
2e2c0     64 00 90 CD |  if_b	jmp	#LR__4405
2e2c4     1C 4E 05 F1 | 	add	fp, #28
2e2c8     A7 2A 02 FB | 	rdlong	local03, fp
2e2cc     15 29 02 F6 | 	mov	local02, local03
2e2d0     01 28 06 F1 | 	add	local02, #1
2e2d4     A7 28 62 FC | 	wrlong	local02, fp
2e2d8     08 4E 85 F1 | 	sub	fp, #8
2e2dc     A7 28 02 FB | 	rdlong	local02, fp
2e2e0     15 29 42 FC | 	wrbyte	local02, local03
2e2e4     04 4E 85 F1 | 	sub	fp, #4
2e2e8     A7 2A 02 FB | 	rdlong	local03, fp
2e2ec     01 2A 06 F1 | 	add	local03, #1
2e2f0     A7 2A 62 FC | 	wrlong	local03, fp
2e2f4     04 4E 85 F1 | 	sub	fp, #4
2e2f8     A7 2A 02 FB | 	rdlong	local03, fp
2e2fc     01 2A 86 F1 | 	sub	local03, #1
2e300     A7 2A 62 FC | 	wrlong	local03, fp
2e304     14 4E 05 F1 | 	add	fp, #20
2e308     A7 2A 0A FB | 	rdlong	local03, fp wz
2e30c     20 4E 85 F1 | 	sub	fp, #32
2e310     4C FF 9F AD |  if_e	jmp	#LR__4404
2e314     14 4E 05 F1 | 	add	fp, #20
2e318     A7 28 02 FB | 	rdlong	local02, fp
2e31c     14 4E 85 F1 | 	sub	fp, #20
2e320     0A 28 0E F2 | 	cmp	local02, #10 wz
2e324     38 FF 9F 5D |  if_ne	jmp	#LR__4404
2e328                 | LR__4405
2e328     10 4E 05 F1 | 	add	fp, #16
2e32c     A7 FA 01 FB | 	rdlong	result1, fp
2e330     10 4E 85 F1 | 	sub	fp, #16
2e334                 | LR__4406
2e334     A7 F0 03 F6 | 	mov	ptra, fp
2e338     B2 00 A0 FD | 	call	#popregs_
2e33c                 | __system___vfsread_ret
2e33c     2D 00 64 FD | 	ret
2e340                 | 
2e340                 | __system____default_filbuf
2e340     04 4A 05 F6 | 	mov	COUNT_, #4
2e344     A8 00 A0 FD | 	call	#pushregs_
2e348     09 27 02 F6 | 	mov	local01, arg01
2e34c     13 29 02 FB | 	rdlong	local02, local01
2e350     0C 28 06 F1 | 	add	local02, #12
2e354     14 FB 09 FB | 	rdlong	result1, local02 wz
2e358     0C 28 86 F1 | 	sub	local02, #12
2e35c     20 00 90 5D |  if_ne	jmp	#LR__4410
2e360     14 28 06 F1 | 	add	local02, #20
2e364     14 FB 01 F6 | 	mov	result1, local02
2e368     04 28 86 F1 | 	sub	local02, #4
2e36c     14 FB 61 FC | 	wrlong	result1, local02
2e370     04 28 86 F1 | 	sub	local02, #4
2e374     02 00 80 FF 
2e378     14 01 68 FC | 	wrlong	##1024, local02
2e37c     0C 28 86 F1 | 	sub	local02, #12
2e380                 | LR__4410
2e380     14 26 06 F1 | 	add	local01, #20
2e384     13 2B 02 FB | 	rdlong	local03, local01
2e388     15 2D 02 F6 | 	mov	local04, local03
2e38c     14 26 86 F1 | 	sub	local01, #20
2e390     13 2C 46 F7 | 	zerox	local04, #19
2e394     14 2A 46 F0 | 	shr	local03, #20
2e398     02 2A 66 F0 | 	shl	local03, #2
2e39c     ED 2A 02 F1 | 	add	local03, __methods__
2e3a0     15 2B 02 FB | 	rdlong	local03, local03
2e3a4     10 28 06 F1 | 	add	local02, #16
2e3a8     14 15 02 FB | 	rdlong	arg02, local02
2e3ac     04 28 86 F1 | 	sub	local02, #4
2e3b0     14 17 02 FB | 	rdlong	arg03, local02
2e3b4     0C 28 86 F1 | 	sub	local02, #12
2e3b8     13 13 02 F6 | 	mov	arg01, local01
2e3bc     F2 26 02 F6 | 	mov	local01, objptr
2e3c0     16 E5 01 F6 | 	mov	objptr, local04
2e3c4     2D 2A 62 FD | 	call	local03
2e3c8     13 E5 01 F6 | 	mov	objptr, local01
2e3cc     FD 2C 02 F6 | 	mov	local04, result1
2e3d0     00 2C 56 F2 | 	cmps	local04, #0 wc
2e3d4     01 FA 65 C6 |  if_b	neg	result1, #1
2e3d8     28 00 90 CD |  if_b	jmp	#LR__4411
2e3dc     14 2D 62 FC | 	wrlong	local04, local02
2e3e0     10 28 06 F1 | 	add	local02, #16
2e3e4     14 2B 02 FB | 	rdlong	local03, local02
2e3e8     0C 28 86 F1 | 	sub	local02, #12
2e3ec     14 2B 62 FC | 	wrlong	local03, local02
2e3f0     04 28 06 F1 | 	add	local02, #4
2e3f4     14 2B 02 FB | 	rdlong	local03, local02
2e3f8     01 2A 46 F5 | 	or	local03, #1
2e3fc     14 2B 62 FC | 	wrlong	local03, local02
2e400     16 FB 01 F6 | 	mov	result1, local04
2e404                 | LR__4411
2e404     A7 F0 03 F6 | 	mov	ptra, fp
2e408     B2 00 A0 FD | 	call	#popregs_
2e40c                 | __system____default_filbuf_ret
2e40c     2D 00 64 FD | 	ret
2e410                 | 
2e410                 | __system__getlower_1175
2e410     41 12 56 F2 | 	cmps	arg01, #65 wc
2e414     10 00 90 CD |  if_b	jmp	#LR__4420
2e418     5B 12 56 F2 | 	cmps	arg01, #91 wc
2e41c     09 FB 01 C6 |  if_b	mov	result1, arg01
2e420     20 FA 05 C1 |  if_b	add	result1, #32
2e424     04 00 90 CD |  if_b	jmp	#__system__getlower_1175_ret
2e428                 | LR__4420
2e428     09 FB 01 F6 | 	mov	result1, arg01
2e42c                 | __system__getlower_1175_ret
2e42c     2D 00 64 FD | 	ret
2e430                 | 
2e430                 | __system___pat_match
2e430     08 4A 05 F6 | 	mov	COUNT_, #8
2e434     A8 00 A0 FD | 	call	#pushregs_
2e438     09 27 02 F6 | 	mov	local01, arg01
2e43c                 | LR__4430
2e43c     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2e440     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2e444     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2e448     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2e44c     2C 00 90 AD |  if_e	jmp	#LR__4431
2e450     0A 13 C2 FA | 	rdbyte	arg01, arg02
2e454     B8 FF BF FD | 	call	#__system__getlower_1175
2e458     FD 2A 02 F6 | 	mov	local03, result1
2e45c     13 13 C2 FA | 	rdbyte	arg01, local01
2e460     AC FF BF FD | 	call	#__system__getlower_1175
2e464     15 FB 09 F2 | 	cmp	result1, local03 wz
2e468     00 FA 05 56 |  if_ne	mov	result1, #0
2e46c     00 01 90 5D |  if_ne	jmp	#LR__4440
2e470     01 26 06 F1 | 	add	local01, #1
2e474     01 14 06 F1 | 	add	arg02, #1
2e478     C0 FF 9F FD | 	jmp	#LR__4430
2e47c                 | LR__4431
2e47c     0A 2B C2 FA | 	rdbyte	local03, arg02
2e480     2A 2A 0E F2 | 	cmp	local03, #42 wz
2e484     D8 00 90 5D |  if_ne	jmp	#LR__4439
2e488     01 14 06 F1 | 	add	arg02, #1
2e48c     0A 29 C2 FA | 	rdbyte	local02, arg02
2e490     01 14 86 F1 | 	sub	arg02, #1
2e494     2E 28 0E F2 | 	cmp	local02, #46 wz
2e498     28 00 90 5D |  if_ne	jmp	#LR__4432
2e49c     02 14 06 F1 | 	add	arg02, #2
2e4a0     0A 29 C2 FA | 	rdbyte	local02, arg02
2e4a4     02 14 86 F1 | 	sub	arg02, #2
2e4a8     2A 28 0E F2 | 	cmp	local02, #42 wz
2e4ac     03 14 06 A1 |  if_e	add	arg02, #3
2e4b0     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2e4b4     03 14 86 A1 |  if_e	sub	arg02, #3
2e4b8     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2e4bc     01 FA 05 A6 |  if_e	mov	result1, #1
2e4c0     AC 00 90 AD |  if_e	jmp	#LR__4440
2e4c4                 | LR__4432
2e4c4     01 14 06 F1 | 	add	arg02, #1
2e4c8     00 30 06 F6 | 	mov	local06, #0
2e4cc     97 0E 48 FB | 	callpa	#(@LR__4434-@LR__4433)>>2,fcache_load_ptr_
2e4d0                 | LR__4433
2e4d0     18 33 02 F6 | 	mov	local07, local06
2e4d4     0A 33 02 F1 | 	add	local07, arg02
2e4d8     19 33 CA FA | 	rdbyte	local07, local07 wz
2e4dc     18 2F 02 56 |  if_ne	mov	local05, local06
2e4e0     01 2E 06 51 |  if_ne	add	local05, #1
2e4e4     17 31 02 56 |  if_ne	mov	local06, local05
2e4e8     E4 FF 9F 5D |  if_ne	jmp	#LR__4433
2e4ec                 | LR__4434
2e4ec     00 34 06 F6 | 	mov	local08, #0
2e4f0     97 0E 48 FB | 	callpa	#(@LR__4436-@LR__4435)>>2,fcache_load_ptr_
2e4f4                 | LR__4435
2e4f4     1A 33 02 F6 | 	mov	local07, local08
2e4f8     13 33 02 F1 | 	add	local07, local01
2e4fc     19 33 CA FA | 	rdbyte	local07, local07 wz
2e500     1A 2F 02 56 |  if_ne	mov	local05, local08
2e504     01 2E 06 51 |  if_ne	add	local05, #1
2e508     17 35 02 56 |  if_ne	mov	local08, local05
2e50c     E4 FF 9F 5D |  if_ne	jmp	#LR__4435
2e510                 | LR__4436
2e510     18 35 52 F2 | 	cmps	local08, local06 wc
2e514     00 FA 05 C6 |  if_b	mov	result1, #0
2e518     54 00 90 CD |  if_b	jmp	#LR__4440
2e51c     1A 29 02 F6 | 	mov	local02, local08
2e520     18 29 82 F1 | 	sub	local02, local06
2e524     14 27 02 F1 | 	add	local01, local02
2e528                 | LR__4437
2e528     01 30 56 F2 | 	cmps	local06, #1 wc
2e52c     30 00 90 CD |  if_b	jmp	#LR__4438
2e530     13 13 C2 FA | 	rdbyte	arg01, local01
2e534     D8 FE BF FD | 	call	#__system__getlower_1175
2e538     FD 34 02 F6 | 	mov	local08, result1
2e53c     0A 13 C2 FA | 	rdbyte	arg01, arg02
2e540     CC FE BF FD | 	call	#__system__getlower_1175
2e544     FD 34 0A F2 | 	cmp	local08, result1 wz
2e548     00 FA 05 56 |  if_ne	mov	result1, #0
2e54c     20 00 90 5D |  if_ne	jmp	#LR__4440
2e550     01 26 06 F1 | 	add	local01, #1
2e554     01 14 06 F1 | 	add	arg02, #1
2e558     01 30 86 F1 | 	sub	local06, #1
2e55c     C8 FF 9F FD | 	jmp	#LR__4437
2e560                 | LR__4438
2e560                 | LR__4439
2e560     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2e564     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2e568     01 FA 05 A6 |  if_e	mov	result1, #1
2e56c     00 FA 05 56 |  if_ne	mov	result1, #0
2e570                 | LR__4440
2e570     A7 F0 03 F6 | 	mov	ptra, fp
2e574     B2 00 A0 FD | 	call	#popregs_
2e578                 | __system___pat_match_ret
2e578     2D 00 64 FD | 	ret
2e57c                 | 
2e57c                 | _fatfs_cc_ff_uni2oem
2e57c     00 00 06 F6 | 	mov	_var01, #0
2e580     80 12 16 F2 | 	cmp	arg01, #128 wc
2e584     09 01 02 C6 |  if_b	mov	_var01, arg01
2e588     58 00 90 CD |  if_b	jmp	#LR__4454
2e58c     80 00 00 FF 
2e590     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2e594     4C 00 90 3D |  if_ae	jmp	#LR__4453
2e598     0A FB 31 F9 | 	getword	result1, arg02, #0
2e59c     01 00 00 FF 
2e5a0     52 FB 0D F2 | 	cmp	result1, ##850 wz
2e5a4     3C 00 90 5D |  if_ne	jmp	#LR__4453
2e5a8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2e5a8     00 00 06 F6 | 	mov	_var01, #0
2e5ac     97 14 48 FB | 	callpa	#(@LR__4451-@LR__4450)>>2,fcache_load_ptr_
2e5b0                 | LR__4450
2e5b0     00 FB 31 F9 | 	getword	result1, _var01, #0
2e5b4     80 FA 15 F2 | 	cmp	result1, #128 wc
2e5b8     1C 00 90 3D |  if_ae	jmp	#LR__4452
2e5bc     00 FB 31 F9 | 	getword	result1, _var01, #0
2e5c0     01 FA 65 F0 | 	shl	result1, #1
2e5c4     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2e5c8     FD FA E1 FA | 	rdword	result1, result1
2e5cc     FD 12 0A F2 | 	cmp	arg01, result1 wz
2e5d0     01 00 06 51 |  if_ne	add	_var01, #1
2e5d4     D8 FF 9F 5D |  if_ne	jmp	#LR__4450
2e5d8                 | LR__4451
2e5d8                 | LR__4452
2e5d8     00 01 32 F9 | 	getword	_var01, _var01, #0
2e5dc     80 00 06 F1 | 	add	_var01, #128
2e5e0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2e5e4                 | LR__4453
2e5e4                 | LR__4454
2e5e4                 | ' 			c = (c + 0x80) & 0xFF;
2e5e4                 | ' 		}
2e5e4                 | ' 	}
2e5e4                 | ' 
2e5e4                 | ' 	return c;
2e5e4     00 FB 01 F6 | 	mov	result1, _var01
2e5e8                 | _fatfs_cc_ff_uni2oem_ret
2e5e8     2D 00 64 FD | 	ret
2e5ec                 | 
2e5ec                 | _fatfs_cc_ff_oem2uni
2e5ec     00 00 06 F6 | 	mov	_var01, #0
2e5f0     09 FB 31 F9 | 	getword	result1, arg01, #0
2e5f4     80 FA 15 F2 | 	cmp	result1, #128 wc
2e5f8     09 01 02 C6 |  if_b	mov	_var01, arg01
2e5fc     2C 00 90 CD |  if_b	jmp	#LR__4461
2e600     0A 15 32 F9 | 	getword	arg02, arg02, #0
2e604     01 00 00 FF 
2e608     52 15 0E F2 | 	cmp	arg02, ##850 wz
2e60c     1C 00 90 5D |  if_ne	jmp	#LR__4460
2e610     09 FB 31 F9 | 	getword	result1, arg01, #0
2e614     00 FB 15 F2 | 	cmp	result1, #256 wc
2e618     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2e61c     80 12 86 C1 |  if_b	sub	arg01, #128
2e620     01 12 66 C0 |  if_b	shl	arg01, #1
2e624     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2e628     09 01 E2 CA |  if_b	rdword	_var01, arg01
2e62c                 | LR__4460
2e62c                 | LR__4461
2e62c                 | ' 		}
2e62c                 | ' 	}
2e62c                 | ' 
2e62c                 | ' 	return c;
2e62c     00 FB 01 F6 | 	mov	result1, _var01
2e630                 | _fatfs_cc_ff_oem2uni_ret
2e630     2D 00 64 FD | 	ret
2e634                 | 
2e634                 | _fatfs_cc_ff_wtoupper
2e634     09 01 02 F6 | 	mov	_var01, arg01
2e638     80 00 00 FF 
2e63c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2e640     60 01 90 3D |  if_ae	jmp	#LR__4483
2e644     00 03 02 F6 | 	mov	_var02, _var01
2e648     01 01 32 F9 | 	getword	_var01, _var02, #0
2e64c     08 00 00 FF 
2e650     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2e654     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2e658     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2e65c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2e660     01 00 00 3F 
2e664     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2e668     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2e66c     01 00 00 3F 
2e670     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2e674     02 07 02 F6 | 	mov	_var04, _var03
2e678                 | ' 		uc = (WORD)uni;
2e678                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2e678                 | ' 		for (;;) {
2e678                 | LR__4470
2e678     03 09 E2 FA | 	rdword	_var05, _var04
2e67c     04 05 02 F6 | 	mov	_var03, _var05
2e680     0F 04 4E F7 | 	zerox	_var03, #15 wz
2e684     02 06 06 F1 | 	add	_var04, #2
2e688     14 01 90 AD |  if_e	jmp	#LR__4482
2e68c     01 05 32 F9 | 	getword	_var03, _var02, #0
2e690     04 01 32 F9 | 	getword	_var01, _var05, #0
2e694     00 05 12 F2 | 	cmp	_var03, _var01 wc
2e698     04 01 90 CD |  if_b	jmp	#LR__4482
2e69c     03 0B E2 FA | 	rdword	_var06, _var04
2e6a0     05 0D 32 F9 | 	getword	_var07, _var06, #0
2e6a4     08 0C 46 F0 | 	shr	_var07, #8
2e6a8     05 0B 32 F9 | 	getword	_var06, _var06, #0
2e6ac     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2e6b0     01 05 32 F9 | 	getword	_var03, _var02, #0
2e6b4     04 0F 32 F9 | 	getword	_var08, _var05, #0
2e6b8     05 01 32 F9 | 	getword	_var01, _var06, #0
2e6bc     00 0F 02 F1 | 	add	_var08, _var01
2e6c0     07 05 52 F2 | 	cmps	_var03, _var08 wc
2e6c4     02 06 06 F1 | 	add	_var04, #2
2e6c8     C4 00 90 3D |  if_ae	jmp	#LR__4481
2e6cc                 | ' 				switch (cmd) {
2e6cc     06 11 32 F9 | 	getword	_var09, _var07, #0
2e6d0     09 10 26 F3 | 	fle	_var09, #9
2e6d4     30 10 62 FD | 	jmprel	_var09
2e6d8                 | LR__4471
2e6d8     24 00 90 FD | 	jmp	#LR__4472
2e6dc     3C 00 90 FD | 	jmp	#LR__4473
2e6e0     54 00 90 FD | 	jmp	#LR__4474
2e6e4     5C 00 90 FD | 	jmp	#LR__4475
2e6e8     64 00 90 FD | 	jmp	#LR__4476
2e6ec     6C 00 90 FD | 	jmp	#LR__4477
2e6f0     74 00 90 FD | 	jmp	#LR__4478
2e6f4     7C 00 90 FD | 	jmp	#LR__4479
2e6f8     84 00 90 FD | 	jmp	#LR__4480
2e6fc     A0 00 90 FD | 	jmp	#LR__4482
2e700                 | LR__4472
2e700     01 03 32 F9 | 	getword	_var02, _var02, #0
2e704     04 09 32 F9 | 	getword	_var05, _var05, #0
2e708     04 03 82 F1 | 	sub	_var02, _var05
2e70c     01 02 66 F0 | 	shl	_var02, #1
2e710     03 03 02 F1 | 	add	_var02, _var04
2e714     01 03 E2 FA | 	rdword	_var02, _var02
2e718     84 00 90 FD | 	jmp	#LR__4482
2e71c                 | LR__4473
2e71c     01 05 32 F9 | 	getword	_var03, _var02, #0
2e720     01 03 32 F9 | 	getword	_var02, _var02, #0
2e724     04 09 32 F9 | 	getword	_var05, _var05, #0
2e728     04 03 82 F1 | 	sub	_var02, _var05
2e72c     01 02 06 F5 | 	and	_var02, #1
2e730     02 03 C2 F2 | 	subr	_var02, _var03
2e734     68 00 90 FD | 	jmp	#LR__4482
2e738                 | LR__4474
2e738     01 03 32 F9 | 	getword	_var02, _var02, #0
2e73c     10 02 86 F1 | 	sub	_var02, #16
2e740     5C 00 90 FD | 	jmp	#LR__4482
2e744                 | LR__4475
2e744     01 03 32 F9 | 	getword	_var02, _var02, #0
2e748     20 02 86 F1 | 	sub	_var02, #32
2e74c     50 00 90 FD | 	jmp	#LR__4482
2e750                 | LR__4476
2e750     01 03 32 F9 | 	getword	_var02, _var02, #0
2e754     30 02 86 F1 | 	sub	_var02, #48
2e758     44 00 90 FD | 	jmp	#LR__4482
2e75c                 | LR__4477
2e75c     01 03 32 F9 | 	getword	_var02, _var02, #0
2e760     1A 02 86 F1 | 	sub	_var02, #26
2e764     38 00 90 FD | 	jmp	#LR__4482
2e768                 | LR__4478
2e768     01 03 32 F9 | 	getword	_var02, _var02, #0
2e76c     08 02 06 F1 | 	add	_var02, #8
2e770     2C 00 90 FD | 	jmp	#LR__4482
2e774                 | LR__4479
2e774     01 03 32 F9 | 	getword	_var02, _var02, #0
2e778     50 02 86 F1 | 	sub	_var02, #80
2e77c     20 00 90 FD | 	jmp	#LR__4482
2e780                 | LR__4480
2e780     01 03 32 F9 | 	getword	_var02, _var02, #0
2e784     0E 00 00 FF 
2e788     60 02 86 F1 | 	sub	_var02, ##7264
2e78c                 | ' 				}
2e78c                 | ' 				break;
2e78c     10 00 90 FD | 	jmp	#LR__4482
2e790                 | LR__4481
2e790     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2e794     02 0A 06 AA |  if_e	mul	_var06, #2
2e798     05 07 02 A1 |  if_e	add	_var04, _var06
2e79c     D8 FE 9F FD | 	jmp	#LR__4470
2e7a0                 | LR__4482
2e7a0     01 01 32 F9 | 	getword	_var01, _var02, #0
2e7a4                 | LR__4483
2e7a4                 | ' 		}
2e7a4                 | ' 		uni = uc;
2e7a4                 | ' 	}
2e7a4                 | ' 
2e7a4                 | ' 	return uni;
2e7a4     00 FB 01 F6 | 	mov	result1, _var01
2e7a8                 | _fatfs_cc_ff_wtoupper_ret
2e7a8     2D 00 64 FD | 	ret
2e7ac                 | 
2e7ac                 | _fatfs_cc_strncpy
2e7ac     09 01 02 F6 | 	mov	_var01, arg01
2e7b0     97 12 48 FB | 	callpa	#(@LR__4491-@LR__4490)>>2,fcache_load_ptr_
2e7b4                 | ' 
2e7b4                 | ' 	dscan = dst;
2e7b4                 | ' 	sscan = src;
2e7b4                 | ' 	count = n;
2e7b4                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2e7b4                 | LR__4490
2e7b4     01 16 86 F1 | 	sub	arg03, #1
2e7b8     00 16 56 F2 | 	cmps	arg03, #0 wc
2e7bc     18 00 90 CD |  if_b	jmp	#LR__4492
2e7c0     0A FB C1 FA | 	rdbyte	result1, arg02
2e7c4     00 FB 41 FC | 	wrbyte	result1, _var01
2e7c8     01 14 06 F1 | 	add	arg02, #1
2e7cc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2e7d0                 | ' 		continue;
2e7d0     01 00 06 F1 | 	add	_var01, #1
2e7d4     DC FF 9F 5D |  if_ne	jmp	#LR__4490
2e7d8                 | LR__4491
2e7d8                 | LR__4492
2e7d8     97 0C 48 FB | 	callpa	#(@LR__4494-@LR__4493)>>2,fcache_load_ptr_
2e7dc                 | ' 	while (--count >= 0)
2e7dc                 | LR__4493
2e7dc     01 16 86 F1 | 	sub	arg03, #1
2e7e0     00 16 56 F2 | 	cmps	arg03, #0 wc
2e7e4     00 03 02 36 |  if_ae	mov	_var02, _var01
2e7e8     01 00 06 31 |  if_ae	add	_var01, #1
2e7ec     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2e7f0     E8 FF 9F 3D |  if_ae	jmp	#LR__4493
2e7f4                 | LR__4494
2e7f4                 | ' 		*dscan++ = '\0';
2e7f4                 | ' 	return(dst);
2e7f4     09 FB 01 F6 | 	mov	result1, arg01
2e7f8                 | _fatfs_cc_strncpy_ret
2e7f8     2D 00 64 FD | 	ret
2e7fc                 | 
2e7fc                 | _fatfs_cc_memcmp
2e7fc                 | ' 	for (n = size; n > 0; n--)
2e7fc     00 16 0E F2 | 	cmp	arg03, #0 wz
2e800     28 00 90 AD |  if_e	jmp	#LR__4501
2e804                 | LR__4500
2e804     09 01 C2 FA | 	rdbyte	_var01, arg01
2e808     0A 03 C2 FA | 	rdbyte	_var02, arg02
2e80c     01 01 0A F2 | 	cmp	_var01, _var02 wz
2e810     01 12 06 A1 |  if_e	add	arg01, #1
2e814     01 14 06 A1 |  if_e	add	arg02, #1
2e818                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2e818     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2e81c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2e820     01 FB 81 51 |  if_ne	sub	result1, _var02
2e824     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2e828     F6 17 6E FB | 	djnz	arg03, #LR__4500
2e82c                 | LR__4501
2e82c                 | ' 
2e82c                 | ' 	return(0);
2e82c     00 FA 05 F6 | 	mov	result1, #0
2e830                 | _fatfs_cc_memcmp_ret
2e830     2D 00 64 FD | 	ret
2e834                 | 
2e834                 | _fatfs_cc_strncmp
2e834     09 01 0A F6 | 	mov	_var01, arg01 wz
2e838     14 00 90 5D |  if_ne	jmp	#LR__4510
2e83c                 | ' 		return scan2 ? -1 : 0;
2e83c     00 14 0E F2 | 	cmp	arg02, #0 wz
2e840     01 02 66 56 |  if_ne	neg	_var02, #1
2e844     00 02 06 A6 |  if_e	mov	_var02, #0
2e848     01 FB 01 F6 | 	mov	result1, _var02
2e84c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2e850                 | LR__4510
2e850     00 14 0E F2 | 	cmp	arg02, #0 wz
2e854     01 FA 05 A6 |  if_e	mov	result1, #1
2e858     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2e85c     0B 05 02 F6 | 	mov	_var03, arg03
2e860     97 16 48 FB | 	callpa	#(@LR__4512-@LR__4511)>>2,fcache_load_ptr_
2e864                 | ' 	count = n;
2e864                 | ' 	do {
2e864                 | LR__4511
2e864     00 07 C2 FA | 	rdbyte	_var04, _var01
2e868     0A 09 02 F6 | 	mov	_var05, arg02
2e86c     04 0B C2 FA | 	rdbyte	_var06, _var05
2e870     01 04 86 F1 | 	sub	_var03, #1
2e874     00 04 56 F2 | 	cmps	_var03, #0 wc
2e878     01 00 06 F1 | 	add	_var01, #1
2e87c     01 14 06 F1 | 	add	arg02, #1
2e880     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2e884     08 00 90 2D |  if_nc_and_z	jmp	#LR__4513
2e888     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2e88c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4511
2e890                 | LR__4512
2e890                 | LR__4513
2e890     00 04 56 F2 | 	cmps	_var03, #0 wc
2e894                 | ' 		return(0);
2e894     00 FA 05 C6 |  if_b	mov	result1, #0
2e898     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2e89c     05 07 0A F2 | 	cmp	_var04, _var06 wz
2e8a0                 | ' 		return(0);
2e8a0     00 FA 05 A6 |  if_e	mov	result1, #0
2e8a4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2e8a8     00 06 0E F2 | 	cmp	_var04, #0 wz
2e8ac                 | ' 		return(-1);
2e8ac     01 FA 65 A6 |  if_e	neg	result1, #1
2e8b0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2e8b4     00 0A 0E F2 | 	cmp	_var06, #0 wz
2e8b8                 | ' 		return(1);
2e8b8     01 FA 05 A6 |  if_e	mov	result1, #1
2e8bc                 | ' 		return(c1 - c2);
2e8bc     03 FB 01 56 |  if_ne	mov	result1, _var04
2e8c0     05 FB 81 51 |  if_ne	sub	result1, _var06
2e8c4                 | _fatfs_cc_strncmp_ret
2e8c4     2D 00 64 FD | 	ret
2e8c8                 | 
2e8c8                 | _fatfs_cc_strchr
2e8c8                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/libc/string/strchr.c"
2e8c8                 | ' 	while ((c = *s++) != (char) charwanted)
2e8c8                 | LR__4520
2e8c8     09 01 02 F6 | 	mov	_var01, arg01
2e8cc     00 03 C2 FA | 	rdbyte	_var02, _var01
2e8d0     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2e8d4     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2e8d8     03 05 0A F2 | 	cmp	_var03, _var04 wz
2e8dc     01 12 06 F1 | 	add	arg01, #1
2e8e0     14 00 90 AD |  if_e	jmp	#LR__4521
2e8e4     01 05 02 F6 | 	mov	_var03, _var02
2e8e8     07 04 4E F7 | 	zerox	_var03, #7 wz
2e8ec     00 FA 05 A6 |  if_e	mov	result1, #0
2e8f0     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2e8f4     D0 FF 9F FD | 	jmp	#LR__4520
2e8f8                 | LR__4521
2e8f8                 | ' 	return((char *)--s);
2e8f8     01 12 86 F1 | 	sub	arg01, #1
2e8fc     09 FB 01 F6 | 	mov	result1, arg01
2e900                 | _fatfs_cc_strchr_ret
2e900     2D 00 64 FD | 	ret
2e904                 | 
2e904                 | _fatfs_cc_disk_initialize
2e904     04 4A 05 F6 | 	mov	COUNT_, #4
2e908     A8 00 A0 FD | 	call	#pushregs_
2e90c     40 F0 07 F1 | 	add	ptra, #64
2e910     04 4E 05 F1 | 	add	fp, #4
2e914     A7 12 42 FC | 	wrbyte	arg01, fp
2e918     01 00 00 FF 
2e91c     14 E4 05 F1 | 	add	objptr, ##532
2e920     F2 18 02 FB | 	rdlong	arg04, objptr
2e924     2C 4E 05 F1 | 	add	fp, #44
2e928     A7 18 62 FC | 	wrlong	arg04, fp
2e92c     04 E4 85 F1 | 	sub	objptr, #4
2e930     F2 18 02 FB | 	rdlong	arg04, objptr
2e934     04 4E 05 F1 | 	add	fp, #4
2e938     A7 18 62 FC | 	wrlong	arg04, fp
2e93c     08 E4 05 F1 | 	add	objptr, #8
2e940     F2 18 02 FB | 	rdlong	arg04, objptr
2e944     04 4E 05 F1 | 	add	fp, #4
2e948     A7 18 62 FC | 	wrlong	arg04, fp
2e94c     04 E4 05 F1 | 	add	objptr, #4
2e950     F2 18 02 FB | 	rdlong	arg04, objptr
2e954     04 4E 05 F1 | 	add	fp, #4
2e958     A7 18 62 FC | 	wrlong	arg04, fp
2e95c     04 E4 05 F1 | 	add	objptr, #4
2e960     F2 02 48 FC | 	wrbyte	#1, objptr
2e964     01 00 00 FF 
2e968     20 E4 85 F1 | 	sub	objptr, ##544
2e96c     38 4E 85 F1 | 	sub	fp, #56
2e970     A7 18 CA FA | 	rdbyte	arg04, fp wz
2e974     04 4E 85 F1 | 	sub	fp, #4
2e978                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e978                 | '             return RES_NOTRDY;
2e978     03 FA 05 56 |  if_ne	mov	result1, #3
2e97c     D8 05 90 5D |  if_ne	jmp	#LR__4548
2e980     13 00 00 FF 
2e984     10 13 06 F6 | 	mov	arg01, ##10000
2e988     30 95 BF FD | 	call	#__system___waitus
2e98c     30 4E 05 F1 | 	add	fp, #48
2e990     A7 12 02 FB | 	rdlong	arg01, fp
2e994     09 01 08 FC | 	wrpin	#0, arg01
2e998     04 4E 05 F1 | 	add	fp, #4
2e99c     A7 12 02 FB | 	rdlong	arg01, fp
2e9a0     09 01 08 FC | 	wrpin	#0, arg01
2e9a4     04 4E 05 F1 | 	add	fp, #4
2e9a8     A7 12 02 FB | 	rdlong	arg01, fp
2e9ac     09 01 08 FC | 	wrpin	#0, arg01
2e9b0     04 4E 05 F1 | 	add	fp, #4
2e9b4     A7 12 02 FB | 	rdlong	arg01, fp
2e9b8     09 00 80 FF 
2e9bc     09 01 08 FC | 	wrpin	##4608, arg01
2e9c0     0C 4E 85 F1 | 	sub	fp, #12
2e9c4     A7 12 02 FB | 	rdlong	arg01, fp
2e9c8     59 12 62 FD | 	drvh	arg01
2e9cc     04 4E 05 F1 | 	add	fp, #4
2e9d0     A7 12 02 FB | 	rdlong	arg01, fp
2e9d4     59 12 62 FD | 	drvh	arg01
2e9d8     04 4E 05 F1 | 	add	fp, #4
2e9dc     A7 12 02 FB | 	rdlong	arg01, fp
2e9e0     59 12 62 FD | 	drvh	arg01
2e9e4     04 4E 05 F1 | 	add	fp, #4
2e9e8     A7 12 02 FB | 	rdlong	arg01, fp
2e9ec     59 12 62 FD | 	drvh	arg01
2e9f0     20 4E 85 F1 | 	sub	fp, #32
2e9f4     00 04 80 FF 
2e9f8     A7 20 68 FC | 	wrlong	##524304, fp
2e9fc     04 4E 05 F1 | 	add	fp, #4
2ea00     20 03 80 FF 
2ea04     A7 90 68 FC | 	wrlong	##409672, fp
2ea08     14 4E 05 F1 | 	add	fp, #20
2ea0c     A7 26 02 FB | 	rdlong	local01, fp
2ea10     18 4E 85 F1 | 	sub	fp, #24
2ea14     A7 16 02 FB | 	rdlong	arg03, fp
2ea18     40 26 62 FD | 	dirl	local01
2ea1c     A0 03 80 FF 
2ea20     13 91 08 FC | 	wrpin	##475208, local01
2ea24     13 17 12 FC | 	wxpin	arg03, local01
2ea28     13 01 28 FC | 	wypin	#0, local01
2ea2c     41 26 62 FD | 	dirh	local01
2ea30     1C 4E 05 F1 | 	add	fp, #28
2ea34     A7 28 02 FB | 	rdlong	local02, fp
2ea38     14 27 82 F1 | 	sub	local01, local02
2ea3c     07 26 06 F5 | 	and	local01, #7
2ea40     18 26 66 F0 | 	shl	local01, #24
2ea44     78 14 06 F6 | 	mov	arg02, #120
2ea48     13 15 42 F5 | 	or	arg02, local01
2ea4c     14 4E 85 F1 | 	sub	fp, #20
2ea50     A7 14 62 FC | 	wrlong	arg02, fp
2ea54     14 4E 05 F1 | 	add	fp, #20
2ea58     A7 12 02 FB | 	rdlong	arg01, fp
2ea5c     10 14 26 F4 | 	bith	arg02, #16
2ea60     40 12 62 FD | 	dirl	arg01
2ea64     09 15 02 FC | 	wrpin	arg02, arg01
2ea68     09 3F 18 FC | 	wxpin	#31, arg01
2ea6c     FF FF FF FF 
2ea70     09 FF 2B FC | 	wypin	##-1, arg01
2ea74     41 12 62 FD | 	dirh	arg01
2ea78     04 4E 85 F1 | 	sub	fp, #4
2ea7c     A7 14 02 FB | 	rdlong	arg02, fp
2ea80     08 4E 05 F1 | 	add	fp, #8
2ea84     A7 2A 02 FB | 	rdlong	local03, fp
2ea88     15 15 82 F1 | 	sub	arg02, local03
2ea8c     07 14 06 F5 | 	and	arg02, #7
2ea90     18 14 66 F0 | 	shl	arg02, #24
2ea94     14 4E 85 F1 | 	sub	fp, #20
2ea98     A7 14 62 FC | 	wrlong	arg02, fp
2ea9c     29 00 00 FF 
2eaa0     7A 14 46 F5 | 	or	arg02, ##21114
2eaa4     A7 14 62 FC | 	wrlong	arg02, fp
2eaa8     14 4E 05 F1 | 	add	fp, #20
2eaac     A7 12 02 FB | 	rdlong	arg01, fp
2eab0     40 12 62 FD | 	dirl	arg01
2eab4     09 15 02 FC | 	wrpin	arg02, arg01
2eab8     09 4F 18 FC | 	wxpin	#39, arg01
2eabc     09 01 28 FC | 	wypin	#0, arg01
2eac0     41 12 62 FD | 	dirh	arg01
2eac4     28 4E 85 F1 | 	sub	fp, #40
2eac8     A7 12 02 F6 | 	mov	arg01, fp
2eacc     14 4E 85 F1 | 	sub	fp, #20
2ead0     0A 14 06 F6 | 	mov	arg02, #10
2ead4     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1209
2ead8     00 12 06 F6 | 	mov	arg01, #0
2eadc     00 14 06 F6 | 	mov	arg02, #0
2eae0     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1233
2eae4     24 80 B0 FD | 	call	#_fatfs_cc_deselect_1219
2eae8     64 12 06 F6 | 	mov	arg01, #100
2eaec     CC 93 BF FD | 	call	#__system___waitus
2eaf0     14 4E 05 F1 | 	add	fp, #20
2eaf4     A7 12 02 F6 | 	mov	arg01, fp
2eaf8     14 4E 85 F1 | 	sub	fp, #20
2eafc     0A 14 06 F6 | 	mov	arg02, #10
2eb00     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1209
2eb04     0C 4E 05 F1 | 	add	fp, #12
2eb08     A7 00 48 FC | 	wrbyte	#0, fp
2eb0c     0C 4E 85 F1 | 	sub	fp, #12
2eb10     00 12 06 F6 | 	mov	arg01, #0
2eb14     00 14 06 F6 | 	mov	arg02, #0
2eb18     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1233
2eb1c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2eb20     01 18 0E F2 | 	cmp	arg04, #1 wz
2eb24     B8 03 90 5D |  if_ne	jmp	#LR__4547
2eb28     08 12 06 F6 | 	mov	arg01, #8
2eb2c     AA 15 06 F6 | 	mov	arg02, #426
2eb30     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1233
2eb34     FD FA E1 F8 | 	getbyte	result1, result1, #0
2eb38     01 FA 0D F2 | 	cmp	result1, #1 wz
2eb3c     98 01 90 5D |  if_ne	jmp	#LR__4533
2eb40     14 4E 05 F1 | 	add	fp, #20
2eb44     A7 12 02 F6 | 	mov	arg01, fp
2eb48     14 4E 85 F1 | 	sub	fp, #20
2eb4c     04 14 06 F6 | 	mov	arg02, #4
2eb50     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1209
2eb54     16 4E 05 F1 | 	add	fp, #22
2eb58     A7 2C C2 FA | 	rdbyte	local04, fp
2eb5c     16 4E 85 F1 | 	sub	fp, #22
2eb60     01 2C 0E F2 | 	cmp	local04, #1 wz
2eb64     17 4E 05 A1 |  if_e	add	fp, #23
2eb68     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2eb6c     17 4E 85 A1 |  if_e	sub	fp, #23
2eb70     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2eb74     68 03 90 5D |  if_ne	jmp	#LR__4546
2eb78                 | ' 				for (tmr = 1000; tmr; tmr--) {
2eb78     18 4E 05 F1 | 	add	fp, #24
2eb7c     01 00 80 FF 
2eb80     A7 D0 6B FC | 	wrlong	##1000, fp
2eb84     18 4E 85 F1 | 	sub	fp, #24
2eb88                 | LR__4530
2eb88     18 4E 05 F1 | 	add	fp, #24
2eb8c     A7 26 0A FB | 	rdlong	local01, fp wz
2eb90     18 4E 85 F1 | 	sub	fp, #24
2eb94     3C 00 90 AD |  if_e	jmp	#LR__4531
2eb98     A9 12 06 F6 | 	mov	arg01, #169
2eb9c     1E 14 C6 F9 | 	decod	arg02, #30
2eba0     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1233
2eba4     FD 2C 02 F6 | 	mov	local04, result1
2eba8     07 2C 4E F7 | 	zerox	local04, #7 wz
2ebac     24 00 90 AD |  if_e	jmp	#LR__4531
2ebb0     01 00 00 FF 
2ebb4     E8 13 06 F6 | 	mov	arg01, ##1000
2ebb8     00 93 BF FD | 	call	#__system___waitus
2ebbc     18 4E 05 F1 | 	add	fp, #24
2ebc0     A7 2C 02 FB | 	rdlong	local04, fp
2ebc4     01 2C 86 F1 | 	sub	local04, #1
2ebc8     A7 2C 62 FC | 	wrlong	local04, fp
2ebcc     18 4E 85 F1 | 	sub	fp, #24
2ebd0     B4 FF 9F FD | 	jmp	#LR__4530
2ebd4                 | LR__4531
2ebd4     18 4E 05 F1 | 	add	fp, #24
2ebd8     A7 2C 0A FB | 	rdlong	local04, fp wz
2ebdc     18 4E 85 F1 | 	sub	fp, #24
2ebe0     4C 00 90 AD |  if_e	jmp	#LR__4532
2ebe4     3A 12 06 F6 | 	mov	arg01, #58
2ebe8     00 14 06 F6 | 	mov	arg02, #0
2ebec     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1233
2ebf0     FD 2A 02 F6 | 	mov	local03, result1
2ebf4     07 2A 4E F7 | 	zerox	local03, #7 wz
2ebf8     34 00 90 5D |  if_ne	jmp	#LR__4532
2ebfc     14 4E 05 F1 | 	add	fp, #20
2ec00     A7 12 02 F6 | 	mov	arg01, fp
2ec04     14 4E 85 F1 | 	sub	fp, #20
2ec08     04 14 06 F6 | 	mov	arg02, #4
2ec0c     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1209
2ec10     14 4E 05 F1 | 	add	fp, #20
2ec14     A7 26 C2 FA | 	rdbyte	local01, fp
2ec18     40 26 CE F7 | 	test	local01, #64 wz
2ec1c     0C 2C 06 56 |  if_ne	mov	local04, #12
2ec20     04 2C 06 A6 |  if_e	mov	local04, #4
2ec24     08 4E 85 F1 | 	sub	fp, #8
2ec28     A7 2C 42 FC | 	wrbyte	local04, fp
2ec2c     0C 4E 85 F1 | 	sub	fp, #12
2ec30                 | LR__4532
2ec30     14 2C 06 FB | 	rdlong	local04, #20
2ec34     18 4E 05 F1 | 	add	fp, #24
2ec38     A7 2C 62 FC | 	wrlong	local04, fp
2ec3c     0C 4E 05 F1 | 	add	fp, #12
2ec40     A7 2C 02 FB | 	rdlong	local04, fp
2ec44     1B 2C 26 F4 | 	bith	local04, #27
2ec48     A7 2C 62 FC | 	wrlong	local04, fp
2ec4c     0C 4E 85 F1 | 	sub	fp, #12
2ec50     A7 2C 02 FB | 	rdlong	local04, fp
2ec54     18 4E 85 F1 | 	sub	fp, #24
2ec58     68 78 04 FF 
2ec5c     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2ec60     1C 4E 05 C1 |  if_b	add	fp, #28
2ec64     00 01 80 CF 
2ec68     A7 08 68 CC |  if_b	wrlong	##131076, fp
2ec6c     1C 4E 85 C1 |  if_b	sub	fp, #28
2ec70     6C 02 90 CD |  if_b	jmp	#LR__4546
2ec74     18 4E 05 F1 | 	add	fp, #24
2ec78     A7 2C 02 FB | 	rdlong	local04, fp
2ec7c     18 4E 85 F1 | 	sub	fp, #24
2ec80     E1 F5 05 FF 
2ec84     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2ec88     1C 4E 05 C1 |  if_b	add	fp, #28
2ec8c     00 01 80 CF 
2ec90     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2ec94     1C 4E 85 C1 |  if_b	sub	fp, #28
2ec98     44 02 90 CD |  if_b	jmp	#LR__4546
2ec9c     18 4E 05 F1 | 	add	fp, #24
2eca0     A7 2C 02 FB | 	rdlong	local04, fp
2eca4     18 4E 85 F1 | 	sub	fp, #24
2eca8     3B 58 08 FF 
2ecac     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2ecb0     1C 4E 05 C1 |  if_b	add	fp, #28
2ecb4     00 01 80 CF 
2ecb8     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2ecbc     1C 4E 85 C1 |  if_b	sub	fp, #28
2ecc0     1C 02 90 CD |  if_b	jmp	#LR__4546
2ecc4     1C 4E 05 F1 | 	add	fp, #28
2ecc8     80 01 80 FF 
2eccc     A7 10 68 FC | 	wrlong	##196616, fp
2ecd0     1C 4E 85 F1 | 	sub	fp, #28
2ecd4     08 02 90 FD | 	jmp	#LR__4546
2ecd8                 | LR__4533
2ecd8     A9 12 06 F6 | 	mov	arg01, #169
2ecdc     00 14 06 F6 | 	mov	arg02, #0
2ece0     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1233
2ece4     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2ece8     02 2C 16 F2 | 	cmp	local04, #2 wc
2ecec     18 00 90 3D |  if_ae	jmp	#LR__4534
2ecf0     0C 4E 05 F1 | 	add	fp, #12
2ecf4     A7 04 48 FC | 	wrbyte	#2, fp
2ecf8     04 4E 05 F1 | 	add	fp, #4
2ecfc     A7 52 49 FC | 	wrbyte	#169, fp
2ed00     10 4E 85 F1 | 	sub	fp, #16
2ed04     14 00 90 FD | 	jmp	#LR__4535
2ed08                 | LR__4534
2ed08     0C 4E 05 F1 | 	add	fp, #12
2ed0c     A7 02 48 FC | 	wrbyte	#1, fp
2ed10     04 4E 05 F1 | 	add	fp, #4
2ed14     A7 02 48 FC | 	wrbyte	#1, fp
2ed18     10 4E 85 F1 | 	sub	fp, #16
2ed1c                 | LR__4535
2ed1c                 | ' 				ty =  0x01 ; cmd =  (1) ;
2ed1c                 | ' 			}
2ed1c                 | ' 			for (tmr = 1000; tmr; tmr--) {
2ed1c     18 4E 05 F1 | 	add	fp, #24
2ed20     01 00 80 FF 
2ed24     A7 D0 6B FC | 	wrlong	##1000, fp
2ed28     18 4E 85 F1 | 	sub	fp, #24
2ed2c                 | LR__4536
2ed2c     18 4E 05 F1 | 	add	fp, #24
2ed30     A7 2A 0A FB | 	rdlong	local03, fp wz
2ed34     18 4E 85 F1 | 	sub	fp, #24
2ed38     44 00 90 AD |  if_e	jmp	#LR__4537
2ed3c     10 4E 05 F1 | 	add	fp, #16
2ed40     A7 12 C2 FA | 	rdbyte	arg01, fp
2ed44     10 4E 85 F1 | 	sub	fp, #16
2ed48     00 14 06 F6 | 	mov	arg02, #0
2ed4c     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1233
2ed50     FD 2C 02 F6 | 	mov	local04, result1
2ed54     07 2C 4E F7 | 	zerox	local04, #7 wz
2ed58     24 00 90 AD |  if_e	jmp	#LR__4537
2ed5c     01 00 00 FF 
2ed60     E8 13 06 F6 | 	mov	arg01, ##1000
2ed64     54 91 BF FD | 	call	#__system___waitus
2ed68     18 4E 05 F1 | 	add	fp, #24
2ed6c     A7 2C 02 FB | 	rdlong	local04, fp
2ed70     01 2C 86 F1 | 	sub	local04, #1
2ed74     A7 2C 62 FC | 	wrlong	local04, fp
2ed78     18 4E 85 F1 | 	sub	fp, #24
2ed7c     AC FF 9F FD | 	jmp	#LR__4536
2ed80                 | LR__4537
2ed80     18 4E 05 F1 | 	add	fp, #24
2ed84     A7 2C 0A FB | 	rdlong	local04, fp wz
2ed88     18 4E 85 F1 | 	sub	fp, #24
2ed8c     14 00 90 AD |  if_e	jmp	#LR__4538
2ed90     10 12 06 F6 | 	mov	arg01, #16
2ed94     09 14 C6 F9 | 	decod	arg02, #9
2ed98     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1233
2ed9c     07 FA 4D F7 | 	zerox	result1, #7 wz
2eda0     0C 00 90 AD |  if_e	jmp	#LR__4539
2eda4                 | LR__4538
2eda4     0C 4E 05 F1 | 	add	fp, #12
2eda8     A7 00 48 FC | 	wrbyte	#0, fp
2edac     0C 4E 85 F1 | 	sub	fp, #12
2edb0                 | LR__4539
2edb0     14 2C 06 FB | 	rdlong	local04, #20
2edb4     18 4E 05 F1 | 	add	fp, #24
2edb8     A7 2C 62 FC | 	wrlong	local04, fp
2edbc     18 4E 85 F1 | 	sub	fp, #24
2edc0     F0 FA 02 FF 
2edc4     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2edc8     18 00 90 3D |  if_ae	jmp	#LR__4540
2edcc     24 4E 05 F1 | 	add	fp, #36
2edd0     A7 2C 02 FB | 	rdlong	local04, fp
2edd4     1B 2C 26 F4 | 	bith	local04, #27
2edd8     A7 2C 62 FC | 	wrlong	local04, fp
2eddc     24 4E 85 F1 | 	sub	fp, #36
2ede0     2C 00 90 FD | 	jmp	#LR__4541
2ede4                 | LR__4540
2ede4     18 4E 05 F1 | 	add	fp, #24
2ede8     A7 2C 02 FB | 	rdlong	local04, fp
2edec     18 4E 85 F1 | 	sub	fp, #24
2edf0     E1 F5 05 FF 
2edf4     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2edf8     24 4E 05 C1 |  if_b	add	fp, #36
2edfc     A7 2C 02 CB |  if_b	rdlong	local04, fp
2ee00     80 00 04 CF 
2ee04     00 2C 46 C5 |  if_b	or	local04, ##134283264
2ee08     A7 2C 62 CC |  if_b	wrlong	local04, fp
2ee0c     24 4E 85 C1 |  if_b	sub	fp, #36
2ee10                 | LR__4541
2ee10     18 4E 05 F1 | 	add	fp, #24
2ee14     A7 2C 02 FB | 	rdlong	local04, fp
2ee18     18 4E 85 F1 | 	sub	fp, #24
2ee1c     F0 FA 02 FF 
2ee20     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2ee24     1C 4E 05 C1 |  if_b	add	fp, #28
2ee28     00 01 80 CF 
2ee2c     A7 08 68 CC |  if_b	wrlong	##131076, fp
2ee30     1C 4E 85 C1 |  if_b	sub	fp, #28
2ee34     A8 00 90 CD |  if_b	jmp	#LR__4545
2ee38     18 4E 05 F1 | 	add	fp, #24
2ee3c     A7 2C 02 FB | 	rdlong	local04, fp
2ee40     18 4E 85 F1 | 	sub	fp, #24
2ee44     68 78 04 FF 
2ee48     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2ee4c     1C 4E 05 C1 |  if_b	add	fp, #28
2ee50     80 01 80 CF 
2ee54     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2ee58     1C 4E 85 C1 |  if_b	sub	fp, #28
2ee5c     80 00 90 CD |  if_b	jmp	#LR__4544
2ee60     18 4E 05 F1 | 	add	fp, #24
2ee64     A7 2C 02 FB | 	rdlong	local04, fp
2ee68     18 4E 85 F1 | 	sub	fp, #24
2ee6c     E1 F5 05 FF 
2ee70     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2ee74     1C 4E 05 C1 |  if_b	add	fp, #28
2ee78     00 02 80 CF 
2ee7c     A7 10 68 CC |  if_b	wrlong	##262152, fp
2ee80     1C 4E 85 C1 |  if_b	sub	fp, #28
2ee84     58 00 90 CD |  if_b	jmp	#LR__4543
2ee88     18 4E 05 F1 | 	add	fp, #24
2ee8c     A7 2C 02 FB | 	rdlong	local04, fp
2ee90     18 4E 85 F1 | 	sub	fp, #24
2ee94     59 73 07 FF 
2ee98     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2ee9c     1C 4E 05 C1 |  if_b	add	fp, #28
2eea0     80 02 80 CF 
2eea4     A7 14 68 CC |  if_b	wrlong	##327690, fp
2eea8     1C 4E 85 C1 |  if_b	sub	fp, #28
2eeac     30 00 90 CD |  if_b	jmp	#LR__4542
2eeb0     18 4E 05 F1 | 	add	fp, #24
2eeb4     A7 2C 02 FB | 	rdlong	local04, fp
2eeb8     18 4E 85 F1 | 	sub	fp, #24
2eebc     D1 F0 08 FF 
2eec0     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2eec4     1C 4E 05 C1 |  if_b	add	fp, #28
2eec8     00 03 80 CF 
2eecc     A7 18 68 CC |  if_b	wrlong	##393228, fp
2eed0     1C 4E 85 F3 | 	sumc	fp, #28
2eed4     80 03 80 3F 
2eed8     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2eedc     1C 4E 85 31 |  if_ae	sub	fp, #28
2eee0                 | LR__4542
2eee0                 | LR__4543
2eee0                 | LR__4544
2eee0                 | LR__4545
2eee0                 | LR__4546
2eee0                 | LR__4547
2eee0     0C 4E 05 F1 | 	add	fp, #12
2eee4     A7 2C C2 FA | 	rdbyte	local04, fp
2eee8     01 00 00 FF 
2eeec     21 E4 05 F1 | 	add	objptr, ##545
2eef0     F2 2C 42 FC | 	wrbyte	local04, objptr
2eef4     A7 26 CA FA | 	rdbyte	local01, fp wz
2eef8     00 2C 06 56 |  if_ne	mov	local04, #0
2eefc     01 2C 06 A6 |  if_e	mov	local04, #1
2ef00     20 4E 05 F1 | 	add	fp, #32
2ef04     A7 2C 42 FC | 	wrbyte	local04, fp
2ef08     A7 2C C2 FA | 	rdbyte	local04, fp
2ef0c     2C 4E 85 F1 | 	sub	fp, #44
2ef10     01 E4 85 F1 | 	sub	objptr, #1
2ef14     F2 2C 42 FC | 	wrbyte	local04, objptr
2ef18     01 00 00 FF 
2ef1c     20 E4 85 F1 | 	sub	objptr, ##544
2ef20     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_1219
2ef24     34 4E 05 F1 | 	add	fp, #52
2ef28     A7 12 02 FB | 	rdlong	arg01, fp
2ef2c     18 4E 85 F1 | 	sub	fp, #24
2ef30     A7 14 02 FB | 	rdlong	arg02, fp
2ef34     09 15 12 FC | 	wxpin	arg02, arg01
2ef38     1C 4E 05 F1 | 	add	fp, #28
2ef3c     A7 12 02 FB | 	rdlong	arg01, fp
2ef40     14 4E 85 F1 | 	sub	fp, #20
2ef44     A7 14 02 FB | 	rdlong	arg02, fp
2ef48     09 15 02 FC | 	wrpin	arg02, arg01
2ef4c                 | ' 
2ef4c                 | ' 		}
2ef4c                 | ' 	}
2ef4c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
2ef4c                 | ' 	CardType = ty;
2ef4c                 | ' 	s = ty ? 0 :  0x01 ;
2ef4c                 | ' 	Stat = s;
2ef4c                 | ' 
2ef4c                 | ' 	deselect();
2ef4c                 | ' 
2ef4c                 | ' 
2ef4c                 | ' 	_wxpin( PIN_CLK, ck_div );
2ef4c                 | ' 	_wrpin( PIN_DI, spm_tx );
2ef4c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
2ef4c                 | ' 	return s;
2ef4c     08 4E 05 F1 | 	add	fp, #8
2ef50     A7 FA C1 FA | 	rdbyte	result1, fp
2ef54     2C 4E 85 F1 | 	sub	fp, #44
2ef58                 | LR__4548
2ef58     A7 F0 03 F6 | 	mov	ptra, fp
2ef5c     B2 00 A0 FD | 	call	#popregs_
2ef60                 | _fatfs_cc_disk_initialize_ret
2ef60     2D 00 64 FD | 	ret
2ef64                 | 
2ef64                 | _fatfs_cc_disk_read
2ef64     05 4A 05 F6 | 	mov	COUNT_, #5
2ef68     A8 00 A0 FD | 	call	#pushregs_
2ef6c     0A 27 02 F6 | 	mov	local01, arg02
2ef70     0B 29 02 F6 | 	mov	local02, arg03
2ef74     0C 2B 02 F6 | 	mov	local03, arg04
2ef78     00 12 0E F2 | 	cmp	arg01, #0 wz
2ef7c     01 FA 05 56 |  if_ne	mov	result1, #1
2ef80                 | ' 
2ef80                 | ' 	return Stat;
2ef80     01 00 00 AF 
2ef84     20 E4 05 A1 |  if_e	add	objptr, ##544
2ef88     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2ef8c     01 00 00 AF 
2ef90     20 E4 85 A1 |  if_e	sub	objptr, ##544
2ef94     FD FA E1 F8 | 	getbyte	result1, result1, #0
2ef98     01 FA CD F7 | 	test	result1, #1 wz
2ef9c     03 FA 05 56 |  if_ne	mov	result1, #3
2efa0     84 00 90 5D |  if_ne	jmp	#LR__4552
2efa4     01 00 00 FF 
2efa8     21 E4 05 F1 | 	add	objptr, ##545
2efac     F2 2C C2 FA | 	rdbyte	local04, objptr
2efb0     01 00 00 FF 
2efb4     21 E4 85 F1 | 	sub	objptr, ##545
2efb8     08 2C CE F7 | 	test	local04, #8 wz
2efbc     09 28 66 A0 |  if_e	shl	local02, #9
2efc0     02 2A 16 F2 | 	cmp	local03, #2 wc
2efc4     12 2C 06 36 |  if_ae	mov	local04, #18
2efc8     11 2C 06 C6 |  if_b	mov	local04, #17
2efcc     14 15 02 F6 | 	mov	arg02, local02
2efd0     16 13 02 F6 | 	mov	arg01, local04
2efd4     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1233
2efd8     FD 2E 02 F6 | 	mov	local05, result1
2efdc     07 2E 4E F7 | 	zerox	local05, #7 wz
2efe0     30 00 90 5D |  if_ne	jmp	#LR__4551
2efe4                 | ' 		do {
2efe4                 | LR__4550
2efe4     13 13 02 F6 | 	mov	arg01, local01
2efe8     09 14 C6 F9 | 	decod	arg02, #9
2efec     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1227
2eff0     00 FA 0D F2 | 	cmp	result1, #0 wz
2eff4     01 00 00 5F 
2eff8     00 26 06 51 |  if_ne	add	local01, ##512
2effc     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4550
2f000     16 2D E2 F8 | 	getbyte	local04, local04, #0
2f004     12 2C 0E F2 | 	cmp	local04, #18 wz
2f008     0C 12 06 A6 |  if_e	mov	arg01, #12
2f00c     00 14 06 A6 |  if_e	mov	arg02, #0
2f010     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1233
2f014                 | LR__4551
2f014     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_1219
2f018                 | ' 	}
2f018                 | ' 	deselect();
2f018                 | ' 
2f018                 | ' 	return count ? RES_ERROR : RES_OK;
2f018     00 2A 0E F2 | 	cmp	local03, #0 wz
2f01c     01 2E 06 56 |  if_ne	mov	local05, #1
2f020     00 2E 06 A6 |  if_e	mov	local05, #0
2f024     17 FB 01 F6 | 	mov	result1, local05
2f028                 | LR__4552
2f028     A7 F0 03 F6 | 	mov	ptra, fp
2f02c     B2 00 A0 FD | 	call	#popregs_
2f030                 | _fatfs_cc_disk_read_ret
2f030     2D 00 64 FD | 	ret
2f034                 | 
2f034                 | _fatfs_cc_disk_write
2f034     04 4A 05 F6 | 	mov	COUNT_, #4
2f038     A8 00 A0 FD | 	call	#pushregs_
2f03c     0A 27 02 F6 | 	mov	local01, arg02
2f040     0C 29 02 F6 | 	mov	local02, arg04
2f044     0B 2B 02 F6 | 	mov	local03, arg03
2f048     00 12 0E F2 | 	cmp	arg01, #0 wz
2f04c     01 FA 05 56 |  if_ne	mov	result1, #1
2f050                 | ' 
2f050                 | ' 	return Stat;
2f050     01 00 00 AF 
2f054     20 E4 05 A1 |  if_e	add	objptr, ##544
2f058     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2f05c     01 00 00 AF 
2f060     20 E4 85 A1 |  if_e	sub	objptr, ##544
2f064     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f068     01 FA CD F7 | 	test	result1, #1 wz
2f06c     03 FA 05 56 |  if_ne	mov	result1, #3
2f070     D4 00 90 5D |  if_ne	jmp	#LR__4564
2f074     01 00 00 FF 
2f078     21 E4 05 F1 | 	add	objptr, ##545
2f07c     F2 16 C2 FA | 	rdbyte	arg03, objptr
2f080     01 00 00 FF 
2f084     21 E4 85 F1 | 	sub	objptr, ##545
2f088     08 16 CE F7 | 	test	arg03, #8 wz
2f08c     09 2A 66 A0 |  if_e	shl	local03, #9
2f090     01 28 0E F2 | 	cmp	local02, #1 wz
2f094     30 00 90 5D |  if_ne	jmp	#LR__4560
2f098     18 12 06 F6 | 	mov	arg01, #24
2f09c     15 15 02 F6 | 	mov	arg02, local03
2f0a0     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1233
2f0a4     FD 2C 02 F6 | 	mov	local04, result1
2f0a8     07 2C 4E F7 | 	zerox	local04, #7 wz
2f0ac     84 00 90 5D |  if_ne	jmp	#LR__4563
2f0b0     13 13 02 F6 | 	mov	arg01, local01
2f0b4     FE 14 06 F6 | 	mov	arg02, #254
2f0b8     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1229
2f0bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2f0c0     00 28 06 56 |  if_ne	mov	local02, #0
2f0c4     6C 00 90 FD | 	jmp	#LR__4563
2f0c8                 | LR__4560
2f0c8     01 00 00 FF 
2f0cc     21 E4 05 F1 | 	add	objptr, ##545
2f0d0     F2 2C C2 FA | 	rdbyte	local04, objptr
2f0d4     01 00 00 FF 
2f0d8     21 E4 85 F1 | 	sub	objptr, ##545
2f0dc     06 2C CE F7 | 	test	local04, #6 wz
2f0e0     97 12 06 56 |  if_ne	mov	arg01, #151
2f0e4     14 15 02 56 |  if_ne	mov	arg02, local02
2f0e8     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1233
2f0ec     15 15 02 F6 | 	mov	arg02, local03
2f0f0     19 12 06 F6 | 	mov	arg01, #25
2f0f4     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1233
2f0f8     FD 2C 02 F6 | 	mov	local04, result1
2f0fc     07 2C 4E F7 | 	zerox	local04, #7 wz
2f100     30 00 90 5D |  if_ne	jmp	#LR__4562
2f104                 | ' 			do {
2f104                 | LR__4561
2f104     13 13 02 F6 | 	mov	arg01, local01
2f108     FC 14 06 F6 | 	mov	arg02, #252
2f10c     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1229
2f110     00 FA 0D F2 | 	cmp	result1, #0 wz
2f114     01 00 00 5F 
2f118     00 26 06 51 |  if_ne	add	local01, ##512
2f11c     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4561
2f120     00 12 06 F6 | 	mov	arg01, #0
2f124     FD 14 06 F6 | 	mov	arg02, #253
2f128     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1229
2f12c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f130     01 28 06 A6 |  if_e	mov	local02, #1
2f134                 | LR__4562
2f134                 | LR__4563
2f134     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_1219
2f138                 | ' 				count = 1;
2f138                 | ' 		}
2f138                 | ' 	}
2f138                 | ' 	deselect();
2f138                 | ' 
2f138                 | ' 	return count ? RES_ERROR : RES_OK;
2f138     00 28 0E F2 | 	cmp	local02, #0 wz
2f13c     01 2C 06 56 |  if_ne	mov	local04, #1
2f140     00 2C 06 A6 |  if_e	mov	local04, #0
2f144     16 FB 01 F6 | 	mov	result1, local04
2f148                 | LR__4564
2f148     A7 F0 03 F6 | 	mov	ptra, fp
2f14c     B2 00 A0 FD | 	call	#popregs_
2f150                 | _fatfs_cc_disk_write_ret
2f150     2D 00 64 FD | 	ret
2f154                 | 
2f154                 | _fatfs_cc_disk_ioctl
2f154     01 4A 05 F6 | 	mov	COUNT_, #1
2f158     A8 00 A0 FD | 	call	#pushregs_
2f15c     30 F0 07 F1 | 	add	ptra, #48
2f160     04 4E 05 F1 | 	add	fp, #4
2f164     A7 12 42 FC | 	wrbyte	arg01, fp
2f168     04 4E 05 F1 | 	add	fp, #4
2f16c     A7 14 42 FC | 	wrbyte	arg02, fp
2f170     04 4E 05 F1 | 	add	fp, #4
2f174     A7 16 62 FC | 	wrlong	arg03, fp
2f178     08 4E 85 F1 | 	sub	fp, #8
2f17c     A7 12 CA FA | 	rdbyte	arg01, fp wz
2f180     04 4E 85 F1 | 	sub	fp, #4
2f184     01 FA 05 56 |  if_ne	mov	result1, #1
2f188                 | ' 
2f188                 | ' 	return Stat;
2f188     01 00 00 AF 
2f18c     20 E4 05 A1 |  if_e	add	objptr, ##544
2f190     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2f194     01 00 00 AF 
2f198     20 E4 85 A1 |  if_e	sub	objptr, ##544
2f19c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f1a0     01 FA CD F7 | 	test	result1, #1 wz
2f1a4     03 FA 05 56 |  if_ne	mov	result1, #3
2f1a8     E4 01 90 5D |  if_ne	jmp	#LR__4578
2f1ac     10 4E 05 F1 | 	add	fp, #16
2f1b0     A7 02 68 FC | 	wrlong	#1, fp
2f1b4                 | ' 
2f1b4                 | ' 	res = RES_ERROR;
2f1b4                 | ' 	switch (ctrl) {
2f1b4     08 4E 85 F1 | 	sub	fp, #8
2f1b8     A7 26 C2 FA | 	rdbyte	local01, fp
2f1bc     08 4E 85 F1 | 	sub	fp, #8
2f1c0     04 26 26 F3 | 	fle	local01, #4
2f1c4     30 26 62 FD | 	jmprel	local01
2f1c8                 | LR__4570
2f1c8     10 00 90 FD | 	jmp	#LR__4571
2f1cc     24 00 90 FD | 	jmp	#LR__4572
2f1d0     A0 01 90 FD | 	jmp	#LR__4576
2f1d4     80 01 90 FD | 	jmp	#LR__4575
2f1d8     98 01 90 FD | 	jmp	#LR__4576
2f1dc                 | LR__4571
2f1dc     B0 79 B0 FD | 	call	#_fatfs_cc_select_1223
2f1e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f1e4     10 4E 05 51 |  if_ne	add	fp, #16
2f1e8     A7 00 68 5C |  if_ne	wrlong	#0, fp
2f1ec     10 4E 85 51 |  if_ne	sub	fp, #16
2f1f0                 | ' 			break;
2f1f0     8C 01 90 FD | 	jmp	#LR__4577
2f1f4                 | LR__4572
2f1f4     09 12 06 F6 | 	mov	arg01, #9
2f1f8     00 14 06 F6 | 	mov	arg02, #0
2f1fc     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1233
2f200     FD 26 02 F6 | 	mov	local01, result1
2f204     07 26 4E F7 | 	zerox	local01, #7 wz
2f208     74 01 90 5D |  if_ne	jmp	#LR__4577
2f20c     18 4E 05 F1 | 	add	fp, #24
2f210     A7 12 02 F6 | 	mov	arg01, fp
2f214     18 4E 85 F1 | 	sub	fp, #24
2f218     10 14 06 F6 | 	mov	arg02, #16
2f21c     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1227
2f220     00 FA 0D F2 | 	cmp	result1, #0 wz
2f224     58 01 90 AD |  if_e	jmp	#LR__4577
2f228     18 4E 05 F1 | 	add	fp, #24
2f22c     A7 26 C2 FA | 	rdbyte	local01, fp
2f230     18 4E 85 F1 | 	sub	fp, #24
2f234     06 26 46 F0 | 	shr	local01, #6
2f238     01 26 0E F2 | 	cmp	local01, #1 wz
2f23c     5C 00 90 5D |  if_ne	jmp	#LR__4573
2f240     21 4E 05 F1 | 	add	fp, #33
2f244     A7 26 C2 FA | 	rdbyte	local01, fp
2f248     01 4E 85 F1 | 	sub	fp, #1
2f24c     A7 FA C1 FA | 	rdbyte	result1, fp
2f250     FD FA 31 F9 | 	getword	result1, result1, #0
2f254     08 FA 65 F0 | 	shl	result1, #8
2f258     FD 26 02 F1 | 	add	local01, result1
2f25c     01 4E 85 F1 | 	sub	fp, #1
2f260     A7 FA C1 FA | 	rdbyte	result1, fp
2f264     3F FA 05 F5 | 	and	result1, #63
2f268     10 FA 65 F0 | 	shl	result1, #16
2f26c     FD 26 02 F1 | 	add	local01, result1
2f270     01 26 06 F1 | 	add	local01, #1
2f274     09 4E 05 F1 | 	add	fp, #9
2f278     A7 26 62 FC | 	wrlong	local01, fp
2f27c     1C 4E 85 F1 | 	sub	fp, #28
2f280     A7 26 02 FB | 	rdlong	local01, fp
2f284     1C 4E 05 F1 | 	add	fp, #28
2f288     A7 FA 01 FB | 	rdlong	result1, fp
2f28c     28 4E 85 F1 | 	sub	fp, #40
2f290     0A FA 65 F0 | 	shl	result1, #10
2f294     13 FB 61 FC | 	wrlong	result1, local01
2f298     AC 00 90 FD | 	jmp	#LR__4574
2f29c                 | LR__4573
2f29c     1D 4E 05 F1 | 	add	fp, #29
2f2a0     A7 26 C2 FA | 	rdbyte	local01, fp
2f2a4     13 27 42 F8 | 	getnib	local01, local01, #0
2f2a8     05 4E 05 F1 | 	add	fp, #5
2f2ac     A7 FA C1 FA | 	rdbyte	result1, fp
2f2b0     80 FA 05 F5 | 	and	result1, #128
2f2b4     07 FA C5 F0 | 	sar	result1, #7
2f2b8     FD 26 02 F1 | 	add	local01, result1
2f2bc     01 4E 85 F1 | 	sub	fp, #1
2f2c0     A7 FA C1 FA | 	rdbyte	result1, fp
2f2c4     03 FA 05 F5 | 	and	result1, #3
2f2c8     01 FA 65 F0 | 	shl	result1, #1
2f2cc     FD 26 02 F1 | 	add	local01, result1
2f2d0     02 26 06 F1 | 	add	local01, #2
2f2d4     0D 4E 85 F1 | 	sub	fp, #13
2f2d8     A7 26 42 FC | 	wrbyte	local01, fp
2f2dc     0C 4E 05 F1 | 	add	fp, #12
2f2e0     A7 26 C2 FA | 	rdbyte	local01, fp
2f2e4     06 26 46 F0 | 	shr	local01, #6
2f2e8     01 4E 85 F1 | 	sub	fp, #1
2f2ec     A7 FA C1 FA | 	rdbyte	result1, fp
2f2f0     FD FA 31 F9 | 	getword	result1, result1, #0
2f2f4     02 FA 65 F0 | 	shl	result1, #2
2f2f8     FD 26 02 F1 | 	add	local01, result1
2f2fc     01 4E 85 F1 | 	sub	fp, #1
2f300     A7 FA C1 FA | 	rdbyte	result1, fp
2f304     03 FA 05 F5 | 	and	result1, #3
2f308     FD FA 31 F9 | 	getword	result1, result1, #0
2f30c     0A FA 65 F0 | 	shl	result1, #10
2f310     FD 26 02 F1 | 	add	local01, result1
2f314     01 26 06 F1 | 	add	local01, #1
2f318     0A 4E 05 F1 | 	add	fp, #10
2f31c     A7 26 62 FC | 	wrlong	local01, fp
2f320     1C 4E 85 F1 | 	sub	fp, #28
2f324     A7 26 02 FB | 	rdlong	local01, fp
2f328     1C 4E 05 F1 | 	add	fp, #28
2f32c     A7 FA 01 FB | 	rdlong	result1, fp
2f330     14 4E 85 F1 | 	sub	fp, #20
2f334     A7 16 C2 FA | 	rdbyte	arg03, fp
2f338     14 4E 85 F1 | 	sub	fp, #20
2f33c     09 16 86 F1 | 	sub	arg03, #9
2f340     0B FB 61 F0 | 	shl	result1, arg03
2f344     13 FB 61 FC | 	wrlong	result1, local01
2f348                 | LR__4574
2f348     10 4E 05 F1 | 	add	fp, #16
2f34c     A7 00 68 FC | 	wrlong	#0, fp
2f350     10 4E 85 F1 | 	sub	fp, #16
2f354                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2f354                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2f354                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2f354                 | ' 				}
2f354                 | ' 				res = RES_OK;
2f354                 | ' 			}
2f354                 | ' 			break;
2f354     28 00 90 FD | 	jmp	#LR__4577
2f358                 | LR__4575
2f358     0C 4E 05 F1 | 	add	fp, #12
2f35c     A7 26 02 FB | 	rdlong	local01, fp
2f360     13 01 69 FC | 	wrlong	#128, local01
2f364     04 4E 05 F1 | 	add	fp, #4
2f368     A7 00 68 FC | 	wrlong	#0, fp
2f36c     10 4E 85 F1 | 	sub	fp, #16
2f370                 | ' 			*(DWORD*)buff = 128;
2f370                 | ' 			res = RES_OK;
2f370                 | ' 			break;
2f370     0C 00 90 FD | 	jmp	#LR__4577
2f374                 | LR__4576
2f374     10 4E 05 F1 | 	add	fp, #16
2f378     A7 08 68 FC | 	wrlong	#4, fp
2f37c     10 4E 85 F1 | 	sub	fp, #16
2f380                 | LR__4577
2f380     88 77 B0 FD | 	call	#_fatfs_cc_deselect_1219
2f384                 | ' 			res = RES_PARERR;
2f384                 | ' 	}
2f384                 | ' 
2f384                 | ' 	deselect();
2f384                 | ' 
2f384                 | ' 	return res;
2f384     10 4E 05 F1 | 	add	fp, #16
2f388     A7 FA 01 FB | 	rdlong	result1, fp
2f38c     10 4E 85 F1 | 	sub	fp, #16
2f390                 | LR__4578
2f390     A7 F0 03 F6 | 	mov	ptra, fp
2f394     B2 00 A0 FD | 	call	#popregs_
2f398                 | _fatfs_cc_disk_ioctl_ret
2f398     2D 00 64 FD | 	ret
2f39c                 | 
2f39c                 | _fatfs_cc_disk_setpins
2f39c     00 12 0E F2 | 	cmp	arg01, #0 wz
2f3a0     01 FA 65 56 |  if_ne	neg	result1, #1
2f3a4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2f3a8     01 00 00 FF 
2f3ac     10 E4 05 F1 | 	add	objptr, ##528
2f3b0     F2 14 62 FC | 	wrlong	arg02, objptr
2f3b4     04 E4 05 F1 | 	add	objptr, #4
2f3b8     F2 16 62 FC | 	wrlong	arg03, objptr
2f3bc     04 E4 05 F1 | 	add	objptr, #4
2f3c0     F2 18 62 FC | 	wrlong	arg04, objptr
2f3c4     04 E4 05 F1 | 	add	objptr, #4
2f3c8     F2 1A 62 FC | 	wrlong	arg05, objptr
2f3cc     01 00 00 FF 
2f3d0     1C E4 85 F1 | 	sub	objptr, ##540
2f3d4     00 FA 05 F6 | 	mov	result1, #0
2f3d8                 | _fatfs_cc_disk_setpins_ret
2f3d8     2D 00 64 FD | 	ret
2f3dc                 | 
2f3dc                 | _fatfs_cc_tchar2uni
2f3dc     09 01 02 FB | 	rdlong	_var01, arg01
2f3e0     00 03 02 F6 | 	mov	_var02, _var01
2f3e4     01 00 06 F1 | 	add	_var01, #1
2f3e8     00 05 02 F6 | 	mov	_var03, _var01
2f3ec     01 07 C2 FA | 	rdbyte	_var04, _var02
2f3f0     80 06 CE F7 | 	test	_var04, #128 wz
2f3f4     E8 00 90 AD |  if_e	jmp	#LR__4587
2f3f8     03 09 02 F6 | 	mov	_var05, _var04
2f3fc     E0 08 06 F5 | 	and	_var05, #224
2f400     C0 08 0E F2 | 	cmp	_var05, #192 wz
2f404     1F 06 06 A5 |  if_e	and	_var04, #31
2f408     01 0A 06 A6 |  if_e	mov	_var06, #1
2f40c     34 00 90 AD |  if_e	jmp	#LR__4581
2f410     03 09 02 F6 | 	mov	_var05, _var04
2f414     F0 08 06 F5 | 	and	_var05, #240
2f418     E0 08 0E F2 | 	cmp	_var05, #224 wz
2f41c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2f420     02 0A 06 A6 |  if_e	mov	_var06, #2
2f424     1C 00 90 AD |  if_e	jmp	#LR__4580
2f428     03 09 02 F6 | 	mov	_var05, _var04
2f42c     F8 08 06 F5 | 	and	_var05, #248
2f430     F0 08 0E F2 | 	cmp	_var05, #240 wz
2f434     07 06 06 A5 |  if_e	and	_var04, #7
2f438     03 0A 06 A6 |  if_e	mov	_var06, #3
2f43c                 | ' 			return 0xFFFFFFFF;
2f43c     01 FA 65 56 |  if_ne	neg	result1, #1
2f440     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2f444                 | LR__4580
2f444                 | LR__4581
2f444                 | ' 		}
2f444                 | ' 		do {
2f444                 | LR__4582
2f444     02 0D C2 FA | 	rdbyte	_var07, _var03
2f448     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2f44c     C0 08 06 F5 | 	and	_var05, #192
2f450     80 08 0E F2 | 	cmp	_var05, #128 wz
2f454     01 04 06 F1 | 	add	_var03, #1
2f458     01 FA 65 56 |  if_ne	neg	result1, #1
2f45c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2f460     06 06 66 F0 | 	shl	_var04, #6
2f464     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2f468     3F 02 06 F5 | 	and	_var02, #63
2f46c     01 07 42 F5 | 	or	_var04, _var02
2f470     F4 0B 6E FB | 	djnz	_var06, #LR__4582
2f474     80 06 16 F2 | 	cmp	_var04, #128 wc
2f478     24 00 90 CD |  if_b	jmp	#LR__4584
2f47c     6C 00 00 FF 
2f480     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2f484     0C 00 90 CD |  if_b	jmp	#LR__4583
2f488     70 00 00 FF 
2f48c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2f490     0C 00 90 CD |  if_b	jmp	#LR__4584
2f494                 | LR__4583
2f494     80 08 00 FF 
2f498     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2f49c     08 00 90 CD |  if_b	jmp	#LR__4585
2f4a0                 | LR__4584
2f4a0     01 FA 65 F6 | 	neg	result1, #1
2f4a4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2f4a8                 | LR__4585
2f4a8     80 00 00 FF 
2f4ac     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2f4b0     2C 00 90 CD |  if_b	jmp	#LR__4586
2f4b4     03 03 02 F6 | 	mov	_var02, _var04
2f4b8     80 00 00 FF 
2f4bc     00 02 86 F1 | 	sub	_var02, ##65536
2f4c0     06 02 66 F0 | 	shl	_var02, #6
2f4c4     80 FF 01 FF 
2f4c8     00 02 06 F5 | 	and	_var02, ##67043328
2f4cc     6E 00 6C FF 
2f4d0     00 08 06 F6 | 	mov	_var05, ##-671032320
2f4d4     01 09 42 F5 | 	or	_var05, _var02
2f4d8     09 06 46 F7 | 	zerox	_var04, #9
2f4dc     04 07 42 F5 | 	or	_var04, _var05
2f4e0                 | LR__4586
2f4e0                 | LR__4587
2f4e0     09 05 62 FC | 	wrlong	_var03, arg01
2f4e4                 | ' 	}
2f4e4                 | ' #line 811 "ff.c"
2f4e4                 | ' 	*str = p;
2f4e4                 | ' 	return uc;
2f4e4     03 FB 01 F6 | 	mov	result1, _var04
2f4e8                 | _fatfs_cc_tchar2uni_ret
2f4e8     2D 00 64 FD | 	ret
2f4ec                 | 
2f4ec                 | _fatfs_cc_put_utf
2f4ec     80 12 16 F2 | 	cmp	arg01, #128 wc
2f4f0     18 00 90 3D |  if_ae	jmp	#LR__4590
2f4f4     01 16 16 F2 | 	cmp	arg03, #1 wc
2f4f8     00 FA 05 C6 |  if_b	mov	result1, #0
2f4fc     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2f500     0A 13 42 FC | 	wrbyte	arg01, arg02
2f504                 | ' 		*buf = (TCHAR)chr;
2f504                 | ' 		return 1;
2f504     01 FA 05 F6 | 	mov	result1, #1
2f508     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2f50c                 | LR__4590
2f50c     04 00 00 FF 
2f510     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2f514     40 00 90 3D |  if_ae	jmp	#LR__4591
2f518     02 16 16 F2 | 	cmp	arg03, #2 wc
2f51c     00 FA 05 C6 |  if_b	mov	result1, #0
2f520     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2f524     09 FB 01 F6 | 	mov	result1, arg01
2f528     06 FA 45 F0 | 	shr	result1, #6
2f52c     1F FA 05 F5 | 	and	result1, #31
2f530     C0 16 06 F6 | 	mov	arg03, #192
2f534     FD 16 42 F5 | 	or	arg03, result1
2f538     0A 17 42 FC | 	wrbyte	arg03, arg02
2f53c     01 14 06 F1 | 	add	arg02, #1
2f540     3F 12 06 F5 | 	and	arg01, #63
2f544     80 FA 05 F6 | 	mov	result1, #128
2f548     09 FB 41 F5 | 	or	result1, arg01
2f54c     0A FB 41 FC | 	wrbyte	result1, arg02
2f550                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2f550                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2f550                 | ' 		return 2;
2f550     02 FA 05 F6 | 	mov	result1, #2
2f554     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2f558                 | LR__4591
2f558     80 00 00 FF 
2f55c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2f560     70 00 90 3D |  if_ae	jmp	#LR__4594
2f564     03 16 16 F2 | 	cmp	arg03, #3 wc
2f568     18 00 90 CD |  if_b	jmp	#LR__4592
2f56c     6C 00 00 FF 
2f570     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2f574     14 00 90 CD |  if_b	jmp	#LR__4593
2f578     70 00 00 FF 
2f57c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2f580     08 00 90 3D |  if_ae	jmp	#LR__4593
2f584                 | LR__4592
2f584     00 FA 05 F6 | 	mov	result1, #0
2f588     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2f58c                 | LR__4593
2f58c     09 FB 59 F8 | 	getnib	result1, arg01, #3
2f590     E0 16 06 F6 | 	mov	arg03, #224
2f594     FD 16 42 F5 | 	or	arg03, result1
2f598     0A 17 42 FC | 	wrbyte	arg03, arg02
2f59c     01 14 06 F1 | 	add	arg02, #1
2f5a0     09 FB 01 F6 | 	mov	result1, arg01
2f5a4     06 FA 45 F0 | 	shr	result1, #6
2f5a8     3F FA 05 F5 | 	and	result1, #63
2f5ac     80 16 06 F6 | 	mov	arg03, #128
2f5b0     FD 16 42 F5 | 	or	arg03, result1
2f5b4     0A 17 42 FC | 	wrbyte	arg03, arg02
2f5b8     01 14 06 F1 | 	add	arg02, #1
2f5bc     3F 12 06 F5 | 	and	arg01, #63
2f5c0     80 FA 05 F6 | 	mov	result1, #128
2f5c4     09 FB 41 F5 | 	or	result1, arg01
2f5c8     0A FB 41 FC | 	wrbyte	result1, arg02
2f5cc                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2f5cc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2f5cc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2f5cc                 | ' 		return 3;
2f5cc     03 FA 05 F6 | 	mov	result1, #3
2f5d0     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2f5d4                 | LR__4594
2f5d4     04 16 16 F2 | 	cmp	arg03, #4 wc
2f5d8     00 FA 05 C6 |  if_b	mov	result1, #0
2f5dc     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2f5e0     09 01 02 F6 | 	mov	_var01, arg01
2f5e4     E0 01 06 F4 | 	bitl	_var01, #480
2f5e8     00 00 6C FF 
2f5ec     00 00 86 F1 | 	sub	_var01, ##-671088640
2f5f0     06 00 46 F0 | 	shr	_var01, #6
2f5f4     09 13 32 F9 | 	getword	arg01, arg01, #0
2f5f8     6E 00 00 FF 
2f5fc     00 12 86 F1 | 	sub	arg01, ##56320
2f600     00 08 00 FF 
2f604     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2f608     02 00 00 CF 
2f60c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2f610     00 FA 05 36 |  if_ae	mov	result1, #0
2f614     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2f618     09 01 42 F5 | 	or	_var01, arg01
2f61c     80 00 00 FF 
2f620     00 00 06 F1 | 	add	_var01, ##65536
2f624     00 FB 01 F6 | 	mov	result1, _var01
2f628     12 FA 45 F0 | 	shr	result1, #18
2f62c     07 FA 05 F5 | 	and	result1, #7
2f630     F0 16 06 F6 | 	mov	arg03, #240
2f634     FD 16 42 F5 | 	or	arg03, result1
2f638     0A 17 42 FC | 	wrbyte	arg03, arg02
2f63c     01 14 06 F1 | 	add	arg02, #1
2f640     00 FB 01 F6 | 	mov	result1, _var01
2f644     0C FA 45 F0 | 	shr	result1, #12
2f648     3F FA 05 F5 | 	and	result1, #63
2f64c     80 16 06 F6 | 	mov	arg03, #128
2f650     FD 16 42 F5 | 	or	arg03, result1
2f654     0A 17 42 FC | 	wrbyte	arg03, arg02
2f658     01 14 06 F1 | 	add	arg02, #1
2f65c     00 FB 01 F6 | 	mov	result1, _var01
2f660     06 FA 45 F0 | 	shr	result1, #6
2f664     3F FA 05 F5 | 	and	result1, #63
2f668     80 16 06 F6 | 	mov	arg03, #128
2f66c     FD 16 42 F5 | 	or	arg03, result1
2f670     0A 17 42 FC | 	wrbyte	arg03, arg02
2f674     01 14 06 F1 | 	add	arg02, #1
2f678     3F 00 06 F5 | 	and	_var01, #63
2f67c     80 FA 05 F6 | 	mov	result1, #128
2f680     00 FB 41 F5 | 	or	result1, _var01
2f684     0A FB 41 FC | 	wrbyte	result1, arg02
2f688                 | ' 	chr = (hc | chr) + 0x10000;
2f688                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2f688                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2f688                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2f688                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2f688                 | ' 	return 4;
2f688     04 FA 05 F6 | 	mov	result1, #4
2f68c                 | _fatfs_cc_put_utf_ret
2f68c     2D 00 64 FD | 	ret
2f690                 | 
2f690                 | _fatfs_cc_sync_window
2f690     02 4A 05 F6 | 	mov	COUNT_, #2
2f694     A8 00 A0 FD | 	call	#pushregs_
2f698     09 27 02 F6 | 	mov	local01, arg01
2f69c     00 28 06 F6 | 	mov	local02, #0
2f6a0     03 26 06 F1 | 	add	local01, #3
2f6a4     13 FB C9 FA | 	rdbyte	result1, local01 wz
2f6a8     03 26 86 F1 | 	sub	local01, #3
2f6ac     A4 00 90 AD |  if_e	jmp	#LR__4602
2f6b0     01 26 06 F1 | 	add	local01, #1
2f6b4     13 13 C2 FA | 	rdbyte	arg01, local01
2f6b8     33 26 06 F1 | 	add	local01, #51
2f6bc     13 15 02 F6 | 	mov	arg02, local01
2f6c0     04 26 86 F1 | 	sub	local01, #4
2f6c4     13 17 02 FB | 	rdlong	arg03, local01
2f6c8     30 26 86 F1 | 	sub	local01, #48
2f6cc     01 18 06 F6 | 	mov	arg04, #1
2f6d0     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2f6d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f6d8     74 00 90 5D |  if_ne	jmp	#LR__4600
2f6dc     03 26 06 F1 | 	add	local01, #3
2f6e0     13 01 48 FC | 	wrbyte	#0, local01
2f6e4     2D 26 06 F1 | 	add	local01, #45
2f6e8     13 FB 01 FB | 	rdlong	result1, local01
2f6ec     0C 26 86 F1 | 	sub	local01, #12
2f6f0     13 19 02 FB | 	rdlong	arg04, local01
2f6f4     0C FB 81 F1 | 	sub	result1, arg04
2f6f8     08 26 86 F1 | 	sub	local01, #8
2f6fc     13 19 02 FB | 	rdlong	arg04, local01
2f700     1C 26 86 F1 | 	sub	local01, #28
2f704     0C FB 11 F2 | 	cmp	result1, arg04 wc
2f708     48 00 90 3D |  if_ae	jmp	#LR__4601
2f70c     02 26 06 F1 | 	add	local01, #2
2f710     13 19 C2 FA | 	rdbyte	arg04, local01
2f714     02 26 86 F1 | 	sub	local01, #2
2f718     02 18 0E F2 | 	cmp	arg04, #2 wz
2f71c     34 00 90 5D |  if_ne	jmp	#LR__4601
2f720     01 26 06 F1 | 	add	local01, #1
2f724     13 13 C2 FA | 	rdbyte	arg01, local01
2f728     33 26 06 F1 | 	add	local01, #51
2f72c     13 15 02 F6 | 	mov	arg02, local01
2f730     04 26 86 F1 | 	sub	local01, #4
2f734     13 17 02 FB | 	rdlong	arg03, local01
2f738     14 26 86 F1 | 	sub	local01, #20
2f73c     13 27 02 FB | 	rdlong	local01, local01
2f740     13 17 02 F1 | 	add	arg03, local01
2f744     01 18 06 F6 | 	mov	arg04, #1
2f748     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2f74c     04 00 90 FD | 	jmp	#LR__4601
2f750                 | LR__4600
2f750     01 28 06 F6 | 	mov	local02, #1
2f754                 | LR__4601
2f754                 | LR__4602
2f754                 | ' 			res = FR_DISK_ERR;
2f754                 | ' 		}
2f754                 | ' 	}
2f754                 | ' 	return res;
2f754     14 FB 01 F6 | 	mov	result1, local02
2f758     A7 F0 03 F6 | 	mov	ptra, fp
2f75c     B2 00 A0 FD | 	call	#popregs_
2f760                 | _fatfs_cc_sync_window_ret
2f760     2D 00 64 FD | 	ret
2f764                 | 
2f764                 | _fatfs_cc_move_window
2f764     03 4A 05 F6 | 	mov	COUNT_, #3
2f768     A8 00 A0 FD | 	call	#pushregs_
2f76c     09 27 02 F6 | 	mov	local01, arg01
2f770     0A 29 02 F6 | 	mov	local02, arg02
2f774     00 2A 06 F6 | 	mov	local03, #0
2f778     30 26 06 F1 | 	add	local01, #48
2f77c     13 19 02 FB | 	rdlong	arg04, local01
2f780     30 26 86 F1 | 	sub	local01, #48
2f784     0C 29 0A F2 | 	cmp	local02, arg04 wz
2f788     40 00 90 AD |  if_e	jmp	#LR__4611
2f78c     13 13 02 F6 | 	mov	arg01, local01
2f790     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2f794     FD 2A 0A F6 | 	mov	local03, result1 wz
2f798     30 00 90 5D |  if_ne	jmp	#LR__4610
2f79c     01 26 06 F1 | 	add	local01, #1
2f7a0     13 13 C2 FA | 	rdbyte	arg01, local01
2f7a4     33 26 06 F1 | 	add	local01, #51
2f7a8     13 15 02 F6 | 	mov	arg02, local01
2f7ac     14 17 02 F6 | 	mov	arg03, local02
2f7b0     01 18 06 F6 | 	mov	arg04, #1
2f7b4     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2f7b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f7bc     01 28 66 56 |  if_ne	neg	local02, #1
2f7c0     01 2A 06 56 |  if_ne	mov	local03, #1
2f7c4     04 26 86 F1 | 	sub	local01, #4
2f7c8     13 29 62 FC | 	wrlong	local02, local01
2f7cc                 | LR__4610
2f7cc                 | LR__4611
2f7cc                 | ' 				sect = (LBA_t)0 - 1;
2f7cc                 | ' 				res = FR_DISK_ERR;
2f7cc                 | ' 			}
2f7cc                 | ' 			fs->winsect = sect;
2f7cc                 | ' 		}
2f7cc                 | ' 	}
2f7cc                 | ' 	return res;
2f7cc     15 FB 01 F6 | 	mov	result1, local03
2f7d0     A7 F0 03 F6 | 	mov	ptra, fp
2f7d4     B2 00 A0 FD | 	call	#popregs_
2f7d8                 | _fatfs_cc_move_window_ret
2f7d8     2D 00 64 FD | 	ret
2f7dc                 | 
2f7dc                 | _fatfs_cc_sync_fs
2f7dc     02 4A 05 F6 | 	mov	COUNT_, #2
2f7e0     A8 00 A0 FD | 	call	#pushregs_
2f7e4     09 27 02 F6 | 	mov	local01, arg01
2f7e8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2f7ec     FD 28 0A F6 | 	mov	local02, result1 wz
2f7f0     D8 00 90 5D |  if_ne	jmp	#LR__4621
2f7f4     13 19 C2 FA | 	rdbyte	arg04, local01
2f7f8     03 18 0E F2 | 	cmp	arg04, #3 wz
2f7fc     04 26 06 A1 |  if_e	add	local01, #4
2f800     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2f804     04 26 86 A1 |  if_e	sub	local01, #4
2f808     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2f80c     A0 00 90 5D |  if_ne	jmp	#LR__4620
2f810     34 26 06 F1 | 	add	local01, #52
2f814     13 13 02 F6 | 	mov	arg01, local01
2f818     00 14 06 F6 | 	mov	arg02, #0
2f81c     09 16 C6 F9 | 	decod	arg03, #9
2f820     98 00 A0 FD | 	call	#\builtin_bytefill_
2f824     13 13 02 F6 | 	mov	arg01, local01
2f828     FE 13 06 F1 | 	add	arg01, #510
2f82c     55 00 80 FF 
2f830     09 AB 58 FC | 	wrword	##43605, arg01
2f834     A9 B0 A0 FF 
2f838     13 A5 68 FC | 	wrlong	##1096897106, local01
2f83c     13 13 02 F6 | 	mov	arg01, local01
2f840     E4 13 06 F1 | 	add	arg01, #484
2f844     B9 A0 B0 FF 
2f848     09 E5 68 FC | 	wrlong	##1631679090, arg01
2f84c     13 13 02 F6 | 	mov	arg01, local01
2f850     E8 13 06 F1 | 	add	arg01, #488
2f854     20 26 86 F1 | 	sub	local01, #32
2f858     13 15 02 FB | 	rdlong	arg02, local01
2f85c     09 15 62 FC | 	wrlong	arg02, arg01
2f860     20 26 06 F1 | 	add	local01, #32
2f864     13 13 02 F6 | 	mov	arg01, local01
2f868     EC 13 06 F1 | 	add	arg01, #492
2f86c     24 26 86 F1 | 	sub	local01, #36
2f870     13 15 02 FB | 	rdlong	arg02, local01
2f874     09 15 62 FC | 	wrlong	arg02, arg01
2f878     10 26 06 F1 | 	add	local01, #16
2f87c     13 17 02 FB | 	rdlong	arg03, local01
2f880     01 16 06 F1 | 	add	arg03, #1
2f884     10 26 06 F1 | 	add	local01, #16
2f888     13 17 62 FC | 	wrlong	arg03, local01
2f88c     2F 26 86 F1 | 	sub	local01, #47
2f890     13 13 C2 FA | 	rdbyte	arg01, local01
2f894     33 26 06 F1 | 	add	local01, #51
2f898     13 15 02 F6 | 	mov	arg02, local01
2f89c     01 18 06 F6 | 	mov	arg04, #1
2f8a0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2f8a4     30 26 86 F1 | 	sub	local01, #48
2f8a8     13 01 48 FC | 	wrbyte	#0, local01
2f8ac     04 26 86 F1 | 	sub	local01, #4
2f8b0                 | LR__4620
2f8b0     01 26 06 F1 | 	add	local01, #1
2f8b4     13 13 C2 FA | 	rdbyte	arg01, local01
2f8b8     00 14 06 F6 | 	mov	arg02, #0
2f8bc     00 16 06 F6 | 	mov	arg03, #0
2f8c0     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2f8c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f8c8     01 28 06 56 |  if_ne	mov	local02, #1
2f8cc                 | LR__4621
2f8cc                 | ' 	}
2f8cc                 | ' 
2f8cc                 | ' 	return res;
2f8cc     14 FB 01 F6 | 	mov	result1, local02
2f8d0     A7 F0 03 F6 | 	mov	ptra, fp
2f8d4     B2 00 A0 FD | 	call	#popregs_
2f8d8                 | _fatfs_cc_sync_fs_ret
2f8d8     2D 00 64 FD | 	ret
2f8dc                 | 
2f8dc                 | _fatfs_cc_clst2sect
2f8dc     02 14 86 F1 | 	sub	arg02, #2
2f8e0     18 12 06 F1 | 	add	arg01, #24
2f8e4     09 01 02 FB | 	rdlong	_var01, arg01
2f8e8     18 12 86 F1 | 	sub	arg01, #24
2f8ec     02 00 86 F1 | 	sub	_var01, #2
2f8f0     00 15 12 F2 | 	cmp	arg02, _var01 wc
2f8f4     00 FA 05 36 |  if_ae	mov	result1, #0
2f8f8     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2f8fc     0A 12 06 F1 | 	add	arg01, #10
2f900     09 01 E2 FA | 	rdword	_var01, arg01
2f904     0A 01 02 FD | 	qmul	_var01, arg02
2f908                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2f908     22 12 06 F1 | 	add	arg01, #34
2f90c     09 FB 01 FB | 	rdlong	result1, arg01
2f910     18 00 62 FD | 	getqx	_var01
2f914     00 FB 01 F1 | 	add	result1, _var01
2f918                 | _fatfs_cc_clst2sect_ret
2f918     2D 00 64 FD | 	ret
2f91c                 | 
2f91c                 | _fatfs_cc_get_fat
2f91c     07 4A 05 F6 | 	mov	COUNT_, #7
2f920     A8 00 A0 FD | 	call	#pushregs_
2f924     0A 27 02 F6 | 	mov	local01, arg02
2f928     09 29 02 FB | 	rdlong	local02, arg01
2f92c     02 26 16 F2 | 	cmp	local01, #2 wc
2f930     14 00 90 CD |  if_b	jmp	#LR__4630
2f934     18 28 06 F1 | 	add	local02, #24
2f938     14 2B 02 FB | 	rdlong	local03, local02
2f93c     18 28 86 F1 | 	sub	local02, #24
2f940     15 27 12 F2 | 	cmp	local01, local03 wc
2f944     08 00 90 CD |  if_b	jmp	#LR__4631
2f948                 | LR__4630
2f948     01 2C 06 F6 | 	mov	local04, #1
2f94c     60 01 90 FD | 	jmp	#LR__4638
2f950                 | LR__4631
2f950     01 2C 66 F6 | 	neg	local04, #1
2f954                 | ' 		val = 0xFFFFFFFF;
2f954                 | ' 
2f954                 | ' 		switch (fs->fs_type) {
2f954     14 2F C2 FA | 	rdbyte	local05, local02
2f958     01 2E 86 F1 | 	sub	local05, #1
2f95c     03 2E 26 F3 | 	fle	local05, #3
2f960     30 2E 62 FD | 	jmprel	local05
2f964                 | LR__4632
2f964     0C 00 90 FD | 	jmp	#LR__4633
2f968     B8 00 90 FD | 	jmp	#LR__4634
2f96c     F8 00 90 FD | 	jmp	#LR__4635
2f970     38 01 90 FD | 	jmp	#LR__4636
2f974                 | LR__4633
2f974     13 2F 02 F6 | 	mov	local05, local01
2f978     13 13 02 F6 | 	mov	arg01, local01
2f97c     01 12 46 F0 | 	shr	arg01, #1
2f980     09 2F 02 F1 | 	add	local05, arg01
2f984     14 13 02 F6 | 	mov	arg01, local02
2f988     17 31 02 F6 | 	mov	local06, local05
2f98c     09 30 46 F0 | 	shr	local06, #9
2f990     24 28 06 F1 | 	add	local02, #36
2f994     14 15 02 FB | 	rdlong	arg02, local02
2f998     24 28 86 F1 | 	sub	local02, #36
2f99c     18 15 02 F1 | 	add	arg02, local06
2f9a0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2f9a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f9a8     04 01 90 5D |  if_ne	jmp	#LR__4637
2f9ac     17 31 02 F6 | 	mov	local06, local05
2f9b0     FF 31 06 F5 | 	and	local06, #511
2f9b4     34 28 06 F1 | 	add	local02, #52
2f9b8     14 31 02 F1 | 	add	local06, local02
2f9bc     18 33 C2 FA | 	rdbyte	local07, local06
2f9c0     34 28 86 F1 | 	sub	local02, #52
2f9c4     14 13 02 F6 | 	mov	arg01, local02
2f9c8     01 2E 06 F1 | 	add	local05, #1
2f9cc     17 31 02 F6 | 	mov	local06, local05
2f9d0     09 30 46 F0 | 	shr	local06, #9
2f9d4     24 28 06 F1 | 	add	local02, #36
2f9d8     14 15 02 FB | 	rdlong	arg02, local02
2f9dc     24 28 86 F1 | 	sub	local02, #36
2f9e0     18 15 02 F1 | 	add	arg02, local06
2f9e4     7C FD BF FD | 	call	#_fatfs_cc_move_window
2f9e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f9ec     C0 00 90 5D |  if_ne	jmp	#LR__4637
2f9f0     FF 2F 06 F5 | 	and	local05, #511
2f9f4     34 28 06 F1 | 	add	local02, #52
2f9f8     14 2F 02 F1 | 	add	local05, local02
2f9fc     17 31 C2 FA | 	rdbyte	local06, local05
2fa00     08 30 66 F0 | 	shl	local06, #8
2fa04     18 33 42 F5 | 	or	local07, local06
2fa08     01 26 CE F7 | 	test	local01, #1 wz
2fa0c     04 32 46 50 |  if_ne	shr	local07, #4
2fa10     19 2B 02 56 |  if_ne	mov	local03, local07
2fa14     0B 32 46 A7 |  if_e	zerox	local07, #11
2fa18     19 2B 02 A6 |  if_e	mov	local03, local07
2fa1c     15 2D 02 F6 | 	mov	local04, local03
2fa20                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2fa20                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2fa20                 | ' 			break;
2fa20     8C 00 90 FD | 	jmp	#LR__4637
2fa24                 | LR__4634
2fa24     14 13 02 F6 | 	mov	arg01, local02
2fa28     13 31 02 F6 | 	mov	local06, local01
2fa2c     08 30 46 F0 | 	shr	local06, #8
2fa30     24 28 06 F1 | 	add	local02, #36
2fa34     14 15 02 FB | 	rdlong	arg02, local02
2fa38     24 28 86 F1 | 	sub	local02, #36
2fa3c     18 15 02 F1 | 	add	arg02, local06
2fa40     20 FD BF FD | 	call	#_fatfs_cc_move_window
2fa44     00 FA 0D F2 | 	cmp	result1, #0 wz
2fa48     64 00 90 5D |  if_ne	jmp	#LR__4637
2fa4c     34 28 06 F1 | 	add	local02, #52
2fa50     01 26 66 F0 | 	shl	local01, #1
2fa54     FF 27 06 F5 | 	and	local01, #511
2fa58     13 29 02 F1 | 	add	local02, local01
2fa5c                 | ' {
2fa5c                 | ' 
2fa5c                 | ' 	return *((WORD*)ptr);
2fa5c     14 FB E1 FA | 	rdword	result1, local02
2fa60     FD 2C 32 F9 | 	getword	local04, result1, #0
2fa64                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2fa64                 | ' 			break;
2fa64     48 00 90 FD | 	jmp	#LR__4637
2fa68                 | LR__4635
2fa68     14 13 02 F6 | 	mov	arg01, local02
2fa6c     13 31 02 F6 | 	mov	local06, local01
2fa70     07 30 46 F0 | 	shr	local06, #7
2fa74     24 28 06 F1 | 	add	local02, #36
2fa78     14 15 02 FB | 	rdlong	arg02, local02
2fa7c     24 28 86 F1 | 	sub	local02, #36
2fa80     18 15 02 F1 | 	add	arg02, local06
2fa84     DC FC BF FD | 	call	#_fatfs_cc_move_window
2fa88     00 FA 0D F2 | 	cmp	result1, #0 wz
2fa8c     20 00 90 5D |  if_ne	jmp	#LR__4637
2fa90     34 28 06 F1 | 	add	local02, #52
2fa94     02 26 66 F0 | 	shl	local01, #2
2fa98     FF 27 06 F5 | 	and	local01, #511
2fa9c     13 29 02 F1 | 	add	local02, local01
2faa0                 | ' {
2faa0                 | ' 
2faa0                 | ' 	return *((DWORD*)ptr);
2faa0     14 2D 02 FB | 	rdlong	local04, local02
2faa4     7C 2C 06 F4 | 	bitl	local04, #124
2faa8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2faa8                 | ' 			break;
2faa8     04 00 90 FD | 	jmp	#LR__4637
2faac                 | LR__4636
2faac     01 2C 06 F6 | 	mov	local04, #1
2fab0                 | LR__4637
2fab0                 | LR__4638
2fab0                 | ' 			val = 1;
2fab0                 | ' 		}
2fab0                 | ' 	}
2fab0                 | ' 
2fab0                 | ' 	return val;
2fab0     16 FB 01 F6 | 	mov	result1, local04
2fab4     A7 F0 03 F6 | 	mov	ptra, fp
2fab8     B2 00 A0 FD | 	call	#popregs_
2fabc                 | _fatfs_cc_get_fat_ret
2fabc     2D 00 64 FD | 	ret
2fac0                 | 
2fac0                 | _fatfs_cc_put_fat
2fac0     08 4A 05 F6 | 	mov	COUNT_, #8
2fac4     A8 00 A0 FD | 	call	#pushregs_
2fac8     09 27 02 F6 | 	mov	local01, arg01
2facc     0A 29 02 F6 | 	mov	local02, arg02
2fad0     0B 2B 02 F6 | 	mov	local03, arg03
2fad4     02 2C 06 F6 | 	mov	local04, #2
2fad8     02 28 16 F2 | 	cmp	local02, #2 wc
2fadc     E0 01 90 CD |  if_b	jmp	#LR__4647
2fae0     18 26 06 F1 | 	add	local01, #24
2fae4     13 2F 02 FB | 	rdlong	local05, local01
2fae8     18 26 86 F1 | 	sub	local01, #24
2faec     17 29 12 F2 | 	cmp	local02, local05 wc
2faf0     CC 01 90 3D |  if_ae	jmp	#LR__4647
2faf4                 | ' 		switch (fs->fs_type) {
2faf4     13 31 C2 FA | 	rdbyte	local06, local01
2faf8     01 30 86 F1 | 	sub	local06, #1
2fafc     03 30 26 F3 | 	fle	local06, #3
2fb00     30 30 62 FD | 	jmprel	local06
2fb04                 | LR__4640
2fb04     0C 00 90 FD | 	jmp	#LR__4641
2fb08     F8 00 90 FD | 	jmp	#LR__4644
2fb0c     40 01 90 FD | 	jmp	#LR__4645
2fb10     AC 01 90 FD | 	jmp	#LR__4646
2fb14                 | LR__4641
2fb14     14 33 02 F6 | 	mov	local07, local02
2fb18     14 2F 02 F6 | 	mov	local05, local02
2fb1c     01 2E 46 F0 | 	shr	local05, #1
2fb20     17 33 02 F1 | 	add	local07, local05
2fb24     13 13 02 F6 | 	mov	arg01, local01
2fb28     19 31 02 F6 | 	mov	local06, local07
2fb2c     09 30 46 F0 | 	shr	local06, #9
2fb30     24 26 06 F1 | 	add	local01, #36
2fb34     13 15 02 FB | 	rdlong	arg02, local01
2fb38     24 26 86 F1 | 	sub	local01, #36
2fb3c     18 15 02 F1 | 	add	arg02, local06
2fb40     20 FC BF FD | 	call	#_fatfs_cc_move_window
2fb44     FD 2C 0A F6 | 	mov	local04, result1 wz
2fb48     74 01 90 5D |  if_ne	jmp	#LR__4646
2fb4c     34 26 06 F1 | 	add	local01, #52
2fb50     13 35 02 F6 | 	mov	local08, local01
2fb54     19 2F 02 F6 | 	mov	local05, local07
2fb58     FF 2F 06 F5 | 	and	local05, #511
2fb5c     17 35 02 F1 | 	add	local08, local05
2fb60     01 28 CE F7 | 	test	local02, #1 wz
2fb64     34 26 86 F1 | 	sub	local01, #52
2fb68     01 32 06 F1 | 	add	local07, #1
2fb6c     18 00 90 AD |  if_e	jmp	#LR__4642
2fb70     1A 2F C2 FA | 	rdbyte	local05, local08
2fb74     17 2F 42 F8 | 	getnib	local05, local05, #0
2fb78     15 31 E2 F8 | 	getbyte	local06, local03, #0
2fb7c     04 30 66 F0 | 	shl	local06, #4
2fb80     18 2F 42 F5 | 	or	local05, local06
2fb84     04 00 90 FD | 	jmp	#LR__4643
2fb88                 | LR__4642
2fb88     15 2F 02 F6 | 	mov	local05, local03
2fb8c                 | LR__4643
2fb8c     1A 2F 42 FC | 	wrbyte	local05, local08
2fb90     03 26 06 F1 | 	add	local01, #3
2fb94     13 03 48 FC | 	wrbyte	#1, local01
2fb98     03 26 86 F1 | 	sub	local01, #3
2fb9c     13 13 02 F6 | 	mov	arg01, local01
2fba0     19 35 02 F6 | 	mov	local08, local07
2fba4     09 34 46 F0 | 	shr	local08, #9
2fba8     24 26 06 F1 | 	add	local01, #36
2fbac     13 15 02 FB | 	rdlong	arg02, local01
2fbb0     24 26 86 F1 | 	sub	local01, #36
2fbb4     1A 15 02 F1 | 	add	arg02, local08
2fbb8     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2fbbc     FD 2C 0A F6 | 	mov	local04, result1 wz
2fbc0     FC 00 90 5D |  if_ne	jmp	#LR__4646
2fbc4     34 26 06 F1 | 	add	local01, #52
2fbc8     13 35 02 F6 | 	mov	local08, local01
2fbcc     FF 33 06 F5 | 	and	local07, #511
2fbd0     19 35 02 F1 | 	add	local08, local07
2fbd4     01 28 CE F7 | 	test	local02, #1 wz
2fbd8     04 2A 46 50 |  if_ne	shr	local03, #4
2fbdc     15 2F 02 56 |  if_ne	mov	local05, local03
2fbe0     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2fbe4     F0 2E 06 A5 |  if_e	and	local05, #240
2fbe8     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2fbec     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2fbf0     15 2F 42 A5 |  if_e	or	local05, local03
2fbf4     1A 2F 42 FC | 	wrbyte	local05, local08
2fbf8     31 26 86 F1 | 	sub	local01, #49
2fbfc     13 03 48 FC | 	wrbyte	#1, local01
2fc00                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2fc00                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2fc00                 | ' 			fs->wflag = 1;
2fc00                 | ' 			break;
2fc00     BC 00 90 FD | 	jmp	#LR__4646
2fc04                 | LR__4644
2fc04     13 13 02 F6 | 	mov	arg01, local01
2fc08     14 35 02 F6 | 	mov	local08, local02
2fc0c     08 34 46 F0 | 	shr	local08, #8
2fc10     24 26 06 F1 | 	add	local01, #36
2fc14     13 15 02 FB | 	rdlong	arg02, local01
2fc18     24 26 86 F1 | 	sub	local01, #36
2fc1c     1A 15 02 F1 | 	add	arg02, local08
2fc20     40 FB BF FD | 	call	#_fatfs_cc_move_window
2fc24     FD 2C 0A F6 | 	mov	local04, result1 wz
2fc28     94 00 90 5D |  if_ne	jmp	#LR__4646
2fc2c     34 26 06 F1 | 	add	local01, #52
2fc30     13 13 02 F6 | 	mov	arg01, local01
2fc34     01 28 66 F0 | 	shl	local02, #1
2fc38     FF 29 06 F5 | 	and	local02, #511
2fc3c     14 13 02 F1 | 	add	arg01, local02
2fc40     09 2B 52 FC | 	wrword	local03, arg01
2fc44     31 26 86 F1 | 	sub	local01, #49
2fc48     13 03 48 FC | 	wrbyte	#1, local01
2fc4c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2fc4c                 | ' 			fs->wflag = 1;
2fc4c                 | ' 			break;
2fc4c     70 00 90 FD | 	jmp	#LR__4646
2fc50                 | LR__4645
2fc50     13 13 02 F6 | 	mov	arg01, local01
2fc54     14 35 02 F6 | 	mov	local08, local02
2fc58     07 34 46 F0 | 	shr	local08, #7
2fc5c     24 26 06 F1 | 	add	local01, #36
2fc60     13 15 02 FB | 	rdlong	arg02, local01
2fc64     24 26 86 F1 | 	sub	local01, #36
2fc68     1A 15 02 F1 | 	add	arg02, local08
2fc6c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2fc70     FD 2C 0A F6 | 	mov	local04, result1 wz
2fc74     48 00 90 5D |  if_ne	jmp	#LR__4646
2fc78     7C 2A 06 F4 | 	bitl	local03, #124
2fc7c     34 26 06 F1 | 	add	local01, #52
2fc80     14 35 02 F6 | 	mov	local08, local02
2fc84     02 34 66 F0 | 	shl	local08, #2
2fc88     FF 35 06 F5 | 	and	local08, #511
2fc8c     13 13 02 F6 | 	mov	arg01, local01
2fc90     1A 13 02 F1 | 	add	arg01, local08
2fc94                 | ' {
2fc94                 | ' 
2fc94                 | ' 	return *((DWORD*)ptr);
2fc94     09 35 02 FB | 	rdlong	local08, arg01
2fc98     00 00 78 FF 
2fc9c     00 34 06 F5 | 	and	local08, ##-268435456
2fca0     1A 2B 42 F5 | 	or	local03, local08
2fca4     13 13 02 F6 | 	mov	arg01, local01
2fca8     02 28 66 F0 | 	shl	local02, #2
2fcac     FF 29 06 F5 | 	and	local02, #511
2fcb0     14 13 02 F1 | 	add	arg01, local02
2fcb4     09 2B 62 FC | 	wrlong	local03, arg01
2fcb8     31 26 86 F1 | 	sub	local01, #49
2fcbc     13 03 48 FC | 	wrbyte	#1, local01
2fcc0                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2fcc0                 | ' 			}
2fcc0                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2fcc0                 | ' 			fs->wflag = 1;
2fcc0                 | ' 			break;
2fcc0                 | LR__4646
2fcc0                 | LR__4647
2fcc0                 | ' 		}
2fcc0                 | ' 	}
2fcc0                 | ' 	return res;
2fcc0     16 FB 01 F6 | 	mov	result1, local04
2fcc4     A7 F0 03 F6 | 	mov	ptra, fp
2fcc8     B2 00 A0 FD | 	call	#popregs_
2fccc                 | _fatfs_cc_put_fat_ret
2fccc     2D 00 64 FD | 	ret
2fcd0                 | 
2fcd0                 | _fatfs_cc_remove_chain
2fcd0     05 4A 05 F6 | 	mov	COUNT_, #5
2fcd4     A8 00 A0 FD | 	call	#pushregs_
2fcd8     09 27 02 F6 | 	mov	local01, arg01
2fcdc     0A 29 02 F6 | 	mov	local02, arg02
2fce0     0B 2B 02 F6 | 	mov	local03, arg03
2fce4     13 2D 02 FB | 	rdlong	local04, local01
2fce8     02 28 16 F2 | 	cmp	local02, #2 wc
2fcec     14 00 90 CD |  if_b	jmp	#LR__4650
2fcf0     18 2C 06 F1 | 	add	local04, #24
2fcf4     16 FB 01 FB | 	rdlong	result1, local04
2fcf8     18 2C 86 F1 | 	sub	local04, #24
2fcfc     FD 28 12 F2 | 	cmp	local02, result1 wc
2fd00     08 00 90 CD |  if_b	jmp	#LR__4651
2fd04                 | LR__4650
2fd04     02 FA 05 F6 | 	mov	result1, #2
2fd08     CC 00 90 FD | 	jmp	#LR__4656
2fd0c                 | LR__4651
2fd0c     00 2A 0E F2 | 	cmp	local03, #0 wz
2fd10     18 00 90 AD |  if_e	jmp	#LR__4652
2fd14     15 15 02 F6 | 	mov	arg02, local03
2fd18     16 13 02 F6 | 	mov	arg01, local04
2fd1c     01 16 66 F6 | 	neg	arg03, #1
2fd20     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2fd24     00 FA 0D F2 | 	cmp	result1, #0 wz
2fd28     AC 00 90 5D |  if_ne	jmp	#LR__4656
2fd2c                 | LR__4652
2fd2c                 | ' 	}
2fd2c                 | ' 
2fd2c                 | ' 
2fd2c                 | ' 	do {
2fd2c                 | LR__4653
2fd2c     14 15 02 F6 | 	mov	arg02, local02
2fd30     13 13 02 F6 | 	mov	arg01, local01
2fd34     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2fd38     FD 2E 0A F6 | 	mov	local05, result1 wz
2fd3c     94 00 90 AD |  if_e	jmp	#LR__4655
2fd40     01 2E 0E F2 | 	cmp	local05, #1 wz
2fd44     02 FA 05 A6 |  if_e	mov	result1, #2
2fd48     8C 00 90 AD |  if_e	jmp	#LR__4656
2fd4c     FF FF 7F FF 
2fd50     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2fd54     01 FA 05 A6 |  if_e	mov	result1, #1
2fd58     7C 00 90 AD |  if_e	jmp	#LR__4656
2fd5c     14 15 02 F6 | 	mov	arg02, local02
2fd60     16 13 02 F6 | 	mov	arg01, local04
2fd64     00 16 06 F6 | 	mov	arg03, #0
2fd68     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2fd6c     FD 2A 0A F6 | 	mov	local03, result1 wz
2fd70     15 FB 01 56 |  if_ne	mov	result1, local03
2fd74     60 00 90 5D |  if_ne	jmp	#LR__4656
2fd78     18 2C 06 F1 | 	add	local04, #24
2fd7c     16 2B 02 FB | 	rdlong	local03, local04
2fd80     02 2A 86 F1 | 	sub	local03, #2
2fd84     04 2C 86 F1 | 	sub	local04, #4
2fd88     16 29 02 FB | 	rdlong	local02, local04
2fd8c     14 2C 86 F1 | 	sub	local04, #20
2fd90     15 29 12 F2 | 	cmp	local02, local03 wc
2fd94     24 00 90 3D |  if_ae	jmp	#LR__4654
2fd98     14 2C 06 F1 | 	add	local04, #20
2fd9c     16 2B 02 FB | 	rdlong	local03, local04
2fda0     01 2A 06 F1 | 	add	local03, #1
2fda4     16 2B 62 FC | 	wrlong	local03, local04
2fda8     10 2C 86 F1 | 	sub	local04, #16
2fdac     16 2B C2 FA | 	rdbyte	local03, local04
2fdb0     01 2A 46 F5 | 	or	local03, #1
2fdb4     16 2B 42 FC | 	wrbyte	local03, local04
2fdb8     04 2C 86 F1 | 	sub	local04, #4
2fdbc                 | LR__4654
2fdbc     17 29 02 F6 | 	mov	local02, local05
2fdc0     18 2C 06 F1 | 	add	local04, #24
2fdc4     16 2F 02 FB | 	rdlong	local05, local04
2fdc8     18 2C 86 F1 | 	sub	local04, #24
2fdcc     17 29 12 F2 | 	cmp	local02, local05 wc
2fdd0     58 FF 9F CD |  if_b	jmp	#LR__4653
2fdd4                 | LR__4655
2fdd4                 | ' #line 1500 "ff.c"
2fdd4                 | ' 	return FR_OK;
2fdd4     00 FA 05 F6 | 	mov	result1, #0
2fdd8                 | LR__4656
2fdd8     A7 F0 03 F6 | 	mov	ptra, fp
2fddc     B2 00 A0 FD | 	call	#popregs_
2fde0                 | _fatfs_cc_remove_chain_ret
2fde0     2D 00 64 FD | 	ret
2fde4                 | 
2fde4                 | _fatfs_cc_create_chain
2fde4     09 4A 05 F6 | 	mov	COUNT_, #9
2fde8     A8 00 A0 FD | 	call	#pushregs_
2fdec     09 27 02 F6 | 	mov	local01, arg01
2fdf0     0A 29 0A F6 | 	mov	local02, arg02 wz
2fdf4     13 2B 02 FB | 	rdlong	local03, local01
2fdf8     28 00 90 5D |  if_ne	jmp	#LR__4660
2fdfc     10 2A 06 F1 | 	add	local03, #16
2fe00     15 2D 0A FB | 	rdlong	local04, local03 wz
2fe04     10 2A 86 F1 | 	sub	local03, #16
2fe08     18 2A 06 51 |  if_ne	add	local03, #24
2fe0c     15 2F 02 5B |  if_ne	rdlong	local05, local03
2fe10     18 2A 86 51 |  if_ne	sub	local03, #24
2fe14     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2fe18     50 00 90 4D |  if_c_and_nz	jmp	#LR__4661
2fe1c     01 2C 06 F6 | 	mov	local04, #1
2fe20     48 00 90 FD | 	jmp	#LR__4661
2fe24                 | LR__4660
2fe24     14 15 02 F6 | 	mov	arg02, local02
2fe28     13 13 02 F6 | 	mov	arg01, local01
2fe2c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2fe30     FD 2C 02 F6 | 	mov	local04, result1
2fe34     02 2C 16 F2 | 	cmp	local04, #2 wc
2fe38     01 FA 05 C6 |  if_b	mov	result1, #1
2fe3c     BC 01 90 CD |  if_b	jmp	#LR__4671
2fe40     FF FF 7F FF 
2fe44     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2fe48     16 FB 01 A6 |  if_e	mov	result1, local04
2fe4c     AC 01 90 AD |  if_e	jmp	#LR__4671
2fe50     18 2A 06 F1 | 	add	local03, #24
2fe54     15 2F 02 FB | 	rdlong	local05, local03
2fe58     18 2A 86 F1 | 	sub	local03, #24
2fe5c     17 2D 12 F2 | 	cmp	local04, local05 wc
2fe60     16 FB 01 C6 |  if_b	mov	result1, local04
2fe64     94 01 90 CD |  if_b	jmp	#LR__4671
2fe68     14 2D 02 F6 | 	mov	local04, local02
2fe6c                 | LR__4661
2fe6c     14 2A 06 F1 | 	add	local03, #20
2fe70     15 2F 0A FB | 	rdlong	local05, local03 wz
2fe74     14 2A 86 F1 | 	sub	local03, #20
2fe78     00 FA 05 A6 |  if_e	mov	result1, #0
2fe7c     7C 01 90 AD |  if_e	jmp	#LR__4671
2fe80     00 30 06 F6 | 	mov	local06, #0
2fe84     14 2D 0A F2 | 	cmp	local04, local02 wz
2fe88     74 00 90 5D |  if_ne	jmp	#LR__4664
2fe8c     16 31 02 F6 | 	mov	local06, local04
2fe90     01 30 06 F1 | 	add	local06, #1
2fe94     18 2A 06 F1 | 	add	local03, #24
2fe98     15 2F 02 FB | 	rdlong	local05, local03
2fe9c     18 2A 86 F1 | 	sub	local03, #24
2fea0     17 31 12 F2 | 	cmp	local06, local05 wc
2fea4     02 30 06 36 |  if_ae	mov	local06, #2
2fea8     18 15 02 F6 | 	mov	arg02, local06
2feac     13 13 02 F6 | 	mov	arg01, local01
2feb0     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2feb4     FD 2E 02 F6 | 	mov	local05, result1
2feb8     01 2E 0E F2 | 	cmp	local05, #1 wz
2febc     FF FF 7F 5F 
2fec0     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2fec4     17 FB 01 A6 |  if_e	mov	result1, local05
2fec8     30 01 90 AD |  if_e	jmp	#LR__4671
2fecc     00 2E 0E F2 | 	cmp	local05, #0 wz
2fed0     2C 00 90 AD |  if_e	jmp	#LR__4663
2fed4     10 2A 06 F1 | 	add	local03, #16
2fed8     15 33 02 FB | 	rdlong	local07, local03
2fedc     10 2A 86 F1 | 	sub	local03, #16
2fee0     02 32 16 F2 | 	cmp	local07, #2 wc
2fee4     14 00 90 CD |  if_b	jmp	#LR__4662
2fee8     18 2A 06 F1 | 	add	local03, #24
2feec     15 2F 02 FB | 	rdlong	local05, local03
2fef0     18 2A 86 F1 | 	sub	local03, #24
2fef4     17 33 12 F2 | 	cmp	local07, local05 wc
2fef8     19 2D 02 C6 |  if_b	mov	local04, local07
2fefc                 | LR__4662
2fefc     00 30 06 F6 | 	mov	local06, #0
2ff00                 | LR__4663
2ff00                 | LR__4664
2ff00     00 30 0E F2 | 	cmp	local06, #0 wz
2ff04     60 00 90 5D |  if_ne	jmp	#LR__4667
2ff08     16 31 02 F6 | 	mov	local06, local04
2ff0c                 | ' 			ncl = scl;
2ff0c                 | ' 			for (;;) {
2ff0c                 | LR__4665
2ff0c     01 30 06 F1 | 	add	local06, #1
2ff10     18 2A 06 F1 | 	add	local03, #24
2ff14     15 2F 02 FB | 	rdlong	local05, local03
2ff18     18 2A 86 F1 | 	sub	local03, #24
2ff1c     17 31 12 F2 | 	cmp	local06, local05 wc
2ff20     02 30 06 36 |  if_ae	mov	local06, #2
2ff24     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2ff28     00 FA 05 16 |  if_a	mov	result1, #0
2ff2c     CC 00 90 1D |  if_a	jmp	#LR__4671
2ff30     18 15 02 F6 | 	mov	arg02, local06
2ff34     13 13 02 F6 | 	mov	arg01, local01
2ff38     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2ff3c     FD 32 0A F6 | 	mov	local07, result1 wz
2ff40     24 00 90 AD |  if_e	jmp	#LR__4666
2ff44     01 32 0E F2 | 	cmp	local07, #1 wz
2ff48     FF FF 7F 5F 
2ff4c     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2ff50     19 FB 01 A6 |  if_e	mov	result1, local07
2ff54     A4 00 90 AD |  if_e	jmp	#LR__4671
2ff58     16 31 0A F2 | 	cmp	local06, local04 wz
2ff5c     00 FA 05 A6 |  if_e	mov	result1, #0
2ff60     98 00 90 AD |  if_e	jmp	#LR__4671
2ff64     A4 FF 9F FD | 	jmp	#LR__4665
2ff68                 | LR__4666
2ff68                 | LR__4667
2ff68     15 13 02 F6 | 	mov	arg01, local03
2ff6c     18 15 02 F6 | 	mov	arg02, local06
2ff70     01 16 66 F6 | 	neg	arg03, #1
2ff74     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2ff78     FD 34 0A F6 | 	mov	local08, result1 wz
2ff7c     1C 00 90 5D |  if_ne	jmp	#LR__4668
2ff80     00 28 0E F2 | 	cmp	local02, #0 wz
2ff84     14 00 90 AD |  if_e	jmp	#LR__4668
2ff88     15 13 02 F6 | 	mov	arg01, local03
2ff8c     14 15 02 F6 | 	mov	arg02, local02
2ff90     18 17 02 F6 | 	mov	arg03, local06
2ff94     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2ff98     FD 34 02 F6 | 	mov	local08, result1
2ff9c                 | LR__4668
2ff9c     00 34 0E F2 | 	cmp	local08, #0 wz
2ffa0     4C 00 90 5D |  if_ne	jmp	#LR__4669
2ffa4     10 2A 06 F1 | 	add	local03, #16
2ffa8     15 31 62 FC | 	wrlong	local06, local03
2ffac     08 2A 06 F1 | 	add	local03, #8
2ffb0     15 2F 02 FB | 	rdlong	local05, local03
2ffb4     02 2E 86 F1 | 	sub	local05, #2
2ffb8     04 2A 86 F1 | 	sub	local03, #4
2ffbc     15 37 02 FB | 	rdlong	local09, local03
2ffc0     14 2A 86 F1 | 	sub	local03, #20
2ffc4     17 37 1A F2 | 	cmp	local09, local05 wcz
2ffc8     14 2A 06 E1 |  if_be	add	local03, #20
2ffcc     15 37 02 EB |  if_be	rdlong	local09, local03
2ffd0     01 36 86 E1 |  if_be	sub	local09, #1
2ffd4     15 37 62 EC |  if_be	wrlong	local09, local03
2ffd8     14 2A 86 E1 |  if_be	sub	local03, #20
2ffdc     04 2A 06 F1 | 	add	local03, #4
2ffe0     15 2F C2 FA | 	rdbyte	local05, local03
2ffe4     01 2E 46 F5 | 	or	local05, #1
2ffe8     15 2F 42 FC | 	wrbyte	local05, local03
2ffec     08 00 90 FD | 	jmp	#LR__4670
2fff0                 | LR__4669
2fff0     01 34 0E F2 | 	cmp	local08, #1 wz
2fff4     01 30 C6 F6 | 	negz	local06, #1
2fff8                 | LR__4670
2fff8                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2fff8                 | ' 	}
2fff8                 | ' 
2fff8                 | ' 	return ncl;
2fff8     18 FB 01 F6 | 	mov	result1, local06
2fffc                 | LR__4671
2fffc     A7 F0 03 F6 | 	mov	ptra, fp
30000     B2 00 A0 FD | 	call	#popregs_
30004                 | _fatfs_cc_create_chain_ret
30004     2D 00 64 FD | 	ret
30008                 | 
30008                 | _fatfs_cc_dir_clear
30008     06 4A 05 F6 | 	mov	COUNT_, #6
3000c     A8 00 A0 FD | 	call	#pushregs_
30010     09 27 02 F6 | 	mov	local01, arg01
30014     0A 29 02 F6 | 	mov	local02, arg02
30018     13 13 02 F6 | 	mov	arg01, local01
3001c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
30020     00 FA 0D F2 | 	cmp	result1, #0 wz
30024     01 FA 05 56 |  if_ne	mov	result1, #1
30028     90 00 90 5D |  if_ne	jmp	#LR__4682
3002c     13 13 02 F6 | 	mov	arg01, local01
30030     14 15 02 F6 | 	mov	arg02, local02
30034     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
30038     FD 2A 02 F6 | 	mov	local03, result1
3003c     30 26 06 F1 | 	add	local01, #48
30040     13 2B 62 FC | 	wrlong	local03, local01
30044     04 26 06 F1 | 	add	local01, #4
30048     13 13 02 F6 | 	mov	arg01, local01
3004c     00 14 06 F6 | 	mov	arg02, #0
30050     09 16 C6 F9 | 	decod	arg03, #9
30054     98 00 A0 FD | 	call	#\builtin_bytefill_
30058     13 2D 02 F6 | 	mov	local04, local01
3005c                 | ' #line 1667 "ff.c"
3005c                 | ' 	{
3005c                 | ' 		ibuf = fs->win; szb = 1;
3005c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
3005c     00 2E 06 F6 | 	mov	local05, #0
30060     34 26 86 F1 | 	sub	local01, #52
30064                 | LR__4680
30064     0A 26 06 F1 | 	add	local01, #10
30068     13 31 E2 FA | 	rdword	local06, local01
3006c     0A 26 86 F1 | 	sub	local01, #10
30070     18 2F 12 F2 | 	cmp	local05, local06 wc
30074     2C 00 90 3D |  if_ae	jmp	#LR__4681
30078     01 26 06 F1 | 	add	local01, #1
3007c     13 13 C2 FA | 	rdbyte	arg01, local01
30080     01 26 86 F1 | 	sub	local01, #1
30084     16 15 02 F6 | 	mov	arg02, local04
30088     15 17 02 F6 | 	mov	arg03, local03
3008c     17 17 02 F1 | 	add	arg03, local05
30090     01 18 06 F6 | 	mov	arg04, #1
30094     9C EF BF FD | 	call	#_fatfs_cc_disk_write
30098     00 FA 0D F2 | 	cmp	result1, #0 wz
3009c     01 2E 06 A1 |  if_e	add	local05, #1
300a0     C0 FF 9F AD |  if_e	jmp	#LR__4680
300a4                 | LR__4681
300a4                 | ' 	}
300a4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
300a4     0A 26 06 F1 | 	add	local01, #10
300a8     13 2D E2 FA | 	rdword	local04, local01
300ac     16 2F 0A F2 | 	cmp	local05, local04 wz
300b0     00 30 06 A6 |  if_e	mov	local06, #0
300b4     01 30 06 56 |  if_ne	mov	local06, #1
300b8     18 FB 01 F6 | 	mov	result1, local06
300bc                 | LR__4682
300bc     A7 F0 03 F6 | 	mov	ptra, fp
300c0     B2 00 A0 FD | 	call	#popregs_
300c4                 | _fatfs_cc_dir_clear_ret
300c4     2D 00 64 FD | 	ret
300c8                 | 
300c8                 | _fatfs_cc_dir_sdi
300c8     06 4A 05 F6 | 	mov	COUNT_, #6
300cc     A8 00 A0 FD | 	call	#pushregs_
300d0     09 27 02 F6 | 	mov	local01, arg01
300d4     0A 29 02 F6 | 	mov	local02, arg02
300d8     13 2B 02 FB | 	rdlong	local03, local01
300dc     00 10 00 FF 
300e0     00 28 16 F2 | 	cmp	local02, ##2097152 wc
300e4     1F 28 CE C7 |  if_b	test	local02, #31 wz
300e8                 | ' 		return FR_INT_ERR;
300e8     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
300ec     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4696
300f0     10 26 06 F1 | 	add	local01, #16
300f4     13 29 62 FC | 	wrlong	local02, local01
300f8     08 26 86 F1 | 	sub	local01, #8
300fc     13 2D 0A FB | 	rdlong	local04, local01 wz
30100     08 26 86 F1 | 	sub	local01, #8
30104     15 2F C2 AA |  if_e	rdbyte	local05, local03
30108     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
3010c     28 2A 06 21 |  if_nc_and_z	add	local03, #40
30110     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
30114     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
30118     00 2C 0E F2 | 	cmp	local04, #0 wz
3011c     3C 00 90 5D |  if_ne	jmp	#LR__4690
30120     14 2F 02 F6 | 	mov	local05, local02
30124     05 2E 46 F0 | 	shr	local05, #5
30128     08 2A 06 F1 | 	add	local03, #8
3012c     15 15 E2 FA | 	rdword	arg02, local03
30130     08 2A 86 F1 | 	sub	local03, #8
30134     0A 2F 12 F2 | 	cmp	local05, arg02 wc
30138     02 FA 05 36 |  if_ae	mov	result1, #2
3013c     E4 00 90 3D |  if_ae	jmp	#LR__4696
30140     28 2A 06 F1 | 	add	local03, #40
30144     15 2F 02 FB | 	rdlong	local05, local03
30148     28 2A 86 F1 | 	sub	local03, #40
3014c     18 26 06 F1 | 	add	local01, #24
30150     13 2F 62 FC | 	wrlong	local05, local01
30154     18 26 86 F1 | 	sub	local01, #24
30158     7C 00 90 FD | 	jmp	#LR__4695
3015c                 | LR__4690
3015c     0A 2A 06 F1 | 	add	local03, #10
30160     15 31 E2 FA | 	rdword	local06, local03
30164     0A 2A 86 F1 | 	sub	local03, #10
30168     09 30 66 F0 | 	shl	local06, #9
3016c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
3016c                 | ' 		while (ofs >= csz) {
3016c                 | LR__4691
3016c     18 29 12 F2 | 	cmp	local02, local06 wc
30170     4C 00 90 CD |  if_b	jmp	#LR__4694
30174     13 13 02 F6 | 	mov	arg01, local01
30178     16 15 02 F6 | 	mov	arg02, local04
3017c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
30180     FD 2C 02 F6 | 	mov	local04, result1
30184     FF FF 7F FF 
30188     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
3018c     01 FA 05 A6 |  if_e	mov	result1, #1
30190     90 00 90 AD |  if_e	jmp	#LR__4696
30194     02 2C 16 F2 | 	cmp	local04, #2 wc
30198     14 00 90 CD |  if_b	jmp	#LR__4692
3019c     18 2A 06 F1 | 	add	local03, #24
301a0     15 2F 02 FB | 	rdlong	local05, local03
301a4     18 2A 86 F1 | 	sub	local03, #24
301a8     17 2D 12 F2 | 	cmp	local04, local05 wc
301ac     08 00 90 CD |  if_b	jmp	#LR__4693
301b0                 | LR__4692
301b0     02 FA 05 F6 | 	mov	result1, #2
301b4     6C 00 90 FD | 	jmp	#LR__4696
301b8                 | LR__4693
301b8     18 29 82 F1 | 	sub	local02, local06
301bc     AC FF 9F FD | 	jmp	#LR__4691
301c0                 | LR__4694
301c0     15 13 02 F6 | 	mov	arg01, local03
301c4     16 15 02 F6 | 	mov	arg02, local04
301c8     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
301cc     18 26 06 F1 | 	add	local01, #24
301d0     13 FB 61 FC | 	wrlong	result1, local01
301d4     18 26 86 F1 | 	sub	local01, #24
301d8                 | LR__4695
301d8     14 26 06 F1 | 	add	local01, #20
301dc     13 2D 62 FC | 	wrlong	local04, local01
301e0     04 26 06 F1 | 	add	local01, #4
301e4     13 2F 0A FB | 	rdlong	local05, local01 wz
301e8     18 26 86 F1 | 	sub	local01, #24
301ec     02 FA 05 A6 |  if_e	mov	result1, #2
301f0     30 00 90 AD |  if_e	jmp	#LR__4696
301f4     14 31 02 F6 | 	mov	local06, local02
301f8     09 30 46 F0 | 	shr	local06, #9
301fc     18 26 06 F1 | 	add	local01, #24
30200     13 2F 02 FB | 	rdlong	local05, local01
30204     18 2F 02 F1 | 	add	local05, local06
30208     13 2F 62 FC | 	wrlong	local05, local01
3020c     34 2A 06 F1 | 	add	local03, #52
30210     FF 29 06 F5 | 	and	local02, #511
30214     14 2B 02 F1 | 	add	local03, local02
30218     04 26 06 F1 | 	add	local01, #4
3021c     13 2B 62 FC | 	wrlong	local03, local01
30220                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
30220                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
30220                 | ' 
30220                 | ' 	return FR_OK;
30220     00 FA 05 F6 | 	mov	result1, #0
30224                 | LR__4696
30224     A7 F0 03 F6 | 	mov	ptra, fp
30228     B2 00 A0 FD | 	call	#popregs_
3022c                 | _fatfs_cc_dir_sdi_ret
3022c     2D 00 64 FD | 	ret
30230                 | 
30230                 | _fatfs_cc_dir_next
30230     05 4A 05 F6 | 	mov	COUNT_, #5
30234     A8 00 A0 FD | 	call	#pushregs_
30238     09 27 02 F6 | 	mov	local01, arg01
3023c     0A 29 02 F6 | 	mov	local02, arg02
30240     13 2B 02 FB | 	rdlong	local03, local01
30244     10 26 06 F1 | 	add	local01, #16
30248     13 2D 02 FB | 	rdlong	local04, local01
3024c     10 26 86 F1 | 	sub	local01, #16
30250     20 2C 06 F1 | 	add	local04, #32
30254     00 10 00 FF 
30258     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
3025c     18 26 06 31 |  if_ae	add	local01, #24
30260     13 01 68 3C |  if_ae	wrlong	#0, local01
30264     18 26 86 31 |  if_ae	sub	local01, #24
30268     18 26 06 F1 | 	add	local01, #24
3026c     13 15 0A FB | 	rdlong	arg02, local01 wz
30270     18 26 86 F1 | 	sub	local01, #24
30274     04 FA 05 A6 |  if_e	mov	result1, #4
30278     64 01 90 AD |  if_e	jmp	#LR__4705
3027c     FF 2D CE F7 | 	test	local04, #511 wz
30280     3C 01 90 5D |  if_ne	jmp	#LR__4704
30284     18 26 06 F1 | 	add	local01, #24
30288     13 15 02 FB | 	rdlong	arg02, local01
3028c     01 14 06 F1 | 	add	arg02, #1
30290     13 15 62 FC | 	wrlong	arg02, local01
30294     04 26 86 F1 | 	sub	local01, #4
30298     13 15 0A FB | 	rdlong	arg02, local01 wz
3029c     14 26 86 F1 | 	sub	local01, #20
302a0     2C 00 90 5D |  if_ne	jmp	#LR__4700
302a4     16 15 02 F6 | 	mov	arg02, local04
302a8     05 14 46 F0 | 	shr	arg02, #5
302ac     08 2A 06 F1 | 	add	local03, #8
302b0     15 29 E2 FA | 	rdword	local02, local03
302b4     08 2A 86 F1 | 	sub	local03, #8
302b8     14 15 12 F2 | 	cmp	arg02, local02 wc
302bc     18 26 06 31 |  if_ae	add	local01, #24
302c0     13 01 68 3C |  if_ae	wrlong	#0, local01
302c4                 | ' 				dp->sect = 0; return FR_NO_FILE;
302c4     04 FA 05 36 |  if_ae	mov	result1, #4
302c8     14 01 90 3D |  if_ae	jmp	#LR__4705
302cc     F0 00 90 FD | 	jmp	#LR__4703
302d0                 | LR__4700
302d0     16 13 02 F6 | 	mov	arg01, local04
302d4     09 12 46 F0 | 	shr	arg01, #9
302d8     0A 2A 06 F1 | 	add	local03, #10
302dc     15 15 E2 FA | 	rdword	arg02, local03
302e0     0A 2A 86 F1 | 	sub	local03, #10
302e4     01 14 86 F1 | 	sub	arg02, #1
302e8     0A 13 CA F7 | 	test	arg01, arg02 wz
302ec     D0 00 90 5D |  if_ne	jmp	#LR__4702
302f0     13 13 02 F6 | 	mov	arg01, local01
302f4     14 26 06 F1 | 	add	local01, #20
302f8     13 15 02 FB | 	rdlong	arg02, local01
302fc     14 26 86 F1 | 	sub	local01, #20
30300     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
30304     FD 2E 02 F6 | 	mov	local05, result1
30308     02 2E 16 F2 | 	cmp	local05, #2 wc
3030c     02 FA 05 C6 |  if_b	mov	result1, #2
30310     CC 00 90 CD |  if_b	jmp	#LR__4705
30314     FF FF 7F FF 
30318     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
3031c     01 FA 05 A6 |  if_e	mov	result1, #1
30320     BC 00 90 AD |  if_e	jmp	#LR__4705
30324     18 2A 06 F1 | 	add	local03, #24
30328     15 15 02 FB | 	rdlong	arg02, local03
3032c     18 2A 86 F1 | 	sub	local03, #24
30330     0A 2F 12 F2 | 	cmp	local05, arg02 wc
30334     68 00 90 CD |  if_b	jmp	#LR__4701
30338     00 28 0E F2 | 	cmp	local02, #0 wz
3033c     18 26 06 A1 |  if_e	add	local01, #24
30340     13 01 68 AC |  if_e	wrlong	#0, local01
30344                 | ' 						dp->sect = 0; return FR_NO_FILE;
30344     04 FA 05 A6 |  if_e	mov	result1, #4
30348     94 00 90 AD |  if_e	jmp	#LR__4705
3034c     13 13 02 F6 | 	mov	arg01, local01
30350     14 26 06 F1 | 	add	local01, #20
30354     13 15 02 FB | 	rdlong	arg02, local01
30358     14 26 86 F1 | 	sub	local01, #20
3035c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
30360     FD 2E 0A F6 | 	mov	local05, result1 wz
30364     07 FA 05 A6 |  if_e	mov	result1, #7
30368     74 00 90 AD |  if_e	jmp	#LR__4705
3036c     01 2E 0E F2 | 	cmp	local05, #1 wz
30370     02 FA 05 A6 |  if_e	mov	result1, #2
30374     68 00 90 AD |  if_e	jmp	#LR__4705
30378     FF FF 7F FF 
3037c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
30380     01 FA 05 A6 |  if_e	mov	result1, #1
30384     58 00 90 AD |  if_e	jmp	#LR__4705
30388     17 15 02 F6 | 	mov	arg02, local05
3038c     15 13 02 F6 | 	mov	arg01, local03
30390     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
30394     00 FA 0D F2 | 	cmp	result1, #0 wz
30398     01 FA 05 56 |  if_ne	mov	result1, #1
3039c     40 00 90 5D |  if_ne	jmp	#LR__4705
303a0                 | LR__4701
303a0     14 26 06 F1 | 	add	local01, #20
303a4     13 2F 62 FC | 	wrlong	local05, local01
303a8     15 13 02 F6 | 	mov	arg01, local03
303ac     17 15 02 F6 | 	mov	arg02, local05
303b0     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
303b4     04 26 06 F1 | 	add	local01, #4
303b8     13 FB 61 FC | 	wrlong	result1, local01
303bc     18 26 86 F1 | 	sub	local01, #24
303c0                 | LR__4702
303c0                 | LR__4703
303c0                 | LR__4704
303c0     10 26 06 F1 | 	add	local01, #16
303c4     13 2D 62 FC | 	wrlong	local04, local01
303c8     34 2A 06 F1 | 	add	local03, #52
303cc     FF 2D 06 F5 | 	and	local04, #511
303d0     16 2B 02 F1 | 	add	local03, local04
303d4     0C 26 06 F1 | 	add	local01, #12
303d8     13 2B 62 FC | 	wrlong	local03, local01
303dc                 | ' #line 1771 "ff.c"
303dc                 | ' 				}
303dc                 | ' 				dp->clust = clst;
303dc                 | ' 				dp->sect = clst2sect(fs, clst);
303dc                 | ' 			}
303dc                 | ' 		}
303dc                 | ' 	}
303dc                 | ' 	dp->dptr = ofs;
303dc                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
303dc                 | ' 
303dc                 | ' 	return FR_OK;
303dc     00 FA 05 F6 | 	mov	result1, #0
303e0                 | LR__4705
303e0     A7 F0 03 F6 | 	mov	ptra, fp
303e4     B2 00 A0 FD | 	call	#popregs_
303e8                 | _fatfs_cc_dir_next_ret
303e8     2D 00 64 FD | 	ret
303ec                 | 
303ec                 | _fatfs_cc_dir_alloc
303ec     08 4A 05 F6 | 	mov	COUNT_, #8
303f0     A8 00 A0 FD | 	call	#pushregs_
303f4     09 27 02 F6 | 	mov	local01, arg01
303f8     0A 29 02 F6 | 	mov	local02, arg02
303fc     13 2B 02 FB | 	rdlong	local03, local01
30400     13 13 02 F6 | 	mov	arg01, local01
30404     00 14 06 F6 | 	mov	arg02, #0
30408     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
3040c     FD 2C 0A F6 | 	mov	local04, result1 wz
30410     70 00 90 5D |  if_ne	jmp	#LR__4714
30414     00 2E 06 F6 | 	mov	local05, #0
30418                 | ' 		n = 0;
30418                 | ' 		do {
30418                 | LR__4710
30418     18 26 06 F1 | 	add	local01, #24
3041c     13 15 02 FB | 	rdlong	arg02, local01
30420     18 26 86 F1 | 	sub	local01, #24
30424     15 13 02 F6 | 	mov	arg01, local03
30428     38 F3 BF FD | 	call	#_fatfs_cc_move_window
3042c     FD 2C 0A F6 | 	mov	local04, result1 wz
30430     50 00 90 5D |  if_ne	jmp	#LR__4713
30434     1C 26 06 F1 | 	add	local01, #28
30438     13 31 02 FB | 	rdlong	local06, local01
3043c     1C 26 86 F1 | 	sub	local01, #28
30440     18 31 C2 FA | 	rdbyte	local06, local06
30444     E5 30 0E F2 | 	cmp	local06, #229 wz
30448     1C 26 06 51 |  if_ne	add	local01, #28
3044c     13 33 02 5B |  if_ne	rdlong	local07, local01
30450     1C 26 86 51 |  if_ne	sub	local01, #28
30454     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
30458     10 00 90 5D |  if_ne	jmp	#LR__4711
3045c     01 2E 06 F1 | 	add	local05, #1
30460     14 2F 0A F2 | 	cmp	local05, local02 wz
30464     1C 00 90 AD |  if_e	jmp	#LR__4713
30468     04 00 90 FD | 	jmp	#LR__4712
3046c                 | LR__4711
3046c     00 2E 06 F6 | 	mov	local05, #0
30470                 | LR__4712
30470     13 13 02 F6 | 	mov	arg01, local01
30474     01 14 06 F6 | 	mov	arg02, #1
30478     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
3047c     FD 2C 0A F6 | 	mov	local04, result1 wz
30480     94 FF 9F AD |  if_e	jmp	#LR__4710
30484                 | LR__4713
30484                 | LR__4714
30484     04 2C 0E F2 | 	cmp	local04, #4 wz
30488     07 2C 06 A6 |  if_e	mov	local04, #7
3048c                 | ' 	return res;
3048c     16 FB 01 F6 | 	mov	result1, local04
30490     A7 F0 03 F6 | 	mov	ptra, fp
30494     B2 00 A0 FD | 	call	#popregs_
30498                 | _fatfs_cc_dir_alloc_ret
30498     2D 00 64 FD | 	ret
3049c                 | 
3049c                 | _fatfs_cc_ld_clust
3049c     09 01 02 F6 | 	mov	_var01, arg01
304a0     0A 13 02 F6 | 	mov	arg01, arg02
304a4     1A 12 06 F1 | 	add	arg01, #26
304a8                 | ' {
304a8                 | ' 
304a8                 | ' 	return *((WORD*)ptr);
304a8     09 FB E1 FA | 	rdword	result1, arg01
304ac     FD 12 32 F9 | 	getword	arg01, result1, #0
304b0     00 01 C2 FA | 	rdbyte	_var01, _var01
304b4     03 00 0E F2 | 	cmp	_var01, #3 wz
304b8     14 14 06 A1 |  if_e	add	arg02, #20
304bc                 | ' {
304bc                 | ' 
304bc                 | ' 	return *((WORD*)ptr);
304bc     0A FB E1 AA |  if_e	rdword	result1, arg02
304c0     10 FA 65 A0 |  if_e	shl	result1, #16
304c4     FD 12 42 A5 |  if_e	or	arg01, result1
304c8                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
304c8                 | ' 	}
304c8                 | ' 
304c8                 | ' 	return cl;
304c8     09 FB 01 F6 | 	mov	result1, arg01
304cc                 | _fatfs_cc_ld_clust_ret
304cc     2D 00 64 FD | 	ret
304d0                 | 
304d0                 | _fatfs_cc_st_clust
304d0     09 01 02 F6 | 	mov	_var01, arg01
304d4     0A 13 02 F6 | 	mov	arg01, arg02
304d8     1A 12 06 F1 | 	add	arg01, #26
304dc     09 17 52 FC | 	wrword	arg03, arg01
304e0     00 01 C2 FA | 	rdbyte	_var01, _var01
304e4     03 00 0E F2 | 	cmp	_var01, #3 wz
304e8     14 14 06 A1 |  if_e	add	arg02, #20
304ec     10 16 46 A0 |  if_e	shr	arg03, #16
304f0     0A 17 52 AC |  if_e	wrword	arg03, arg02
304f4                 | _fatfs_cc_st_clust_ret
304f4     2D 00 64 FD | 	ret
304f8                 | 
304f8                 | _fatfs_cc_cmp_lfn
304f8     07 4A 05 F6 | 	mov	COUNT_, #7
304fc     A8 00 A0 FD | 	call	#pushregs_
30500     09 27 02 F6 | 	mov	local01, arg01
30504     0A 13 02 F6 | 	mov	arg01, arg02
30508     1A 12 06 F1 | 	add	arg01, #26
3050c                 | ' {
3050c                 | ' 
3050c                 | ' 	return *((WORD*)ptr);
3050c     09 FB E9 FA | 	rdword	result1, arg01 wz
30510     00 FA 05 56 |  if_ne	mov	result1, #0
30514     E0 00 90 5D |  if_ne	jmp	#LR__4726
30518     0A 29 C2 FA | 	rdbyte	local02, arg02
3051c     3F 28 06 F5 | 	and	local02, #63
30520     01 28 86 F1 | 	sub	local02, #1
30524     0D 28 06 FD | 	qmul	local02, #13
30528                 | ' 
30528                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
30528                 | ' 
30528                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
30528     01 2A 06 F6 | 	mov	local03, #1
3052c     00 2C 06 F6 | 	mov	local04, #0
30530     18 2E 62 FD | 	getqx	local05
30534                 | LR__4720
30534     0D 2C 16 F2 | 	cmp	local04, #13 wc
30538     9C 00 90 3D |  if_ae	jmp	#LR__4725
3053c     0A 13 02 F6 | 	mov	arg01, arg02
30540     16 29 02 F6 | 	mov	local02, local04
30544     01 00 00 FF 
30548     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
3054c     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
30550     14 29 C2 FA | 	rdbyte	local02, local02
30554     01 28 06 FA | 	mul	local02, #1
30558     14 13 02 F1 | 	add	arg01, local02
3055c     01 00 00 FF 
30560     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
30564                 | ' {
30564                 | ' 
30564                 | ' 	return *((WORD*)ptr);
30564     09 FB E1 FA | 	rdword	result1, arg01
30568     FD 30 02 F6 | 	mov	local06, result1
3056c     15 29 02 F6 | 	mov	local02, local03
30570     0F 28 4E F7 | 	zerox	local02, #15 wz
30574     44 00 90 AD |  if_e	jmp	#LR__4723
30578     00 2F 16 F2 | 	cmp	local05, #256 wc
3057c     2C 00 90 3D |  if_ae	jmp	#LR__4721
30580     18 13 32 F9 | 	getword	arg01, local06, #0
30584     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
30588     FD 28 02 F6 | 	mov	local02, result1
3058c     17 2B 02 F6 | 	mov	local03, local05
30590     01 2A 66 F0 | 	shl	local03, #1
30594     13 2B 02 F1 | 	add	local03, local01
30598     15 13 E2 FA | 	rdword	arg01, local03
3059c     01 2E 06 F1 | 	add	local05, #1
305a0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
305a4     FD 28 0A F2 | 	cmp	local02, result1 wz
305a8     08 00 90 AD |  if_e	jmp	#LR__4722
305ac                 | LR__4721
305ac                 | ' 				return 0;
305ac     00 FA 05 F6 | 	mov	result1, #0
305b0     44 00 90 FD | 	jmp	#LR__4726
305b4                 | LR__4722
305b4     18 2B 02 F6 | 	mov	local03, local06
305b8     14 00 90 FD | 	jmp	#LR__4724
305bc                 | LR__4723
305bc     18 31 32 F9 | 	getword	local06, local06, #0
305c0     7F 00 00 FF 
305c4     FF 31 0E F2 | 	cmp	local06, ##65535 wz
305c8     00 FA 05 56 |  if_ne	mov	result1, #0
305cc     28 00 90 5D |  if_ne	jmp	#LR__4726
305d0                 | LR__4724
305d0     01 2C 06 F1 | 	add	local04, #1
305d4     5C FF 9F FD | 	jmp	#LR__4720
305d8                 | LR__4725
305d8     0A 29 C2 FA | 	rdbyte	local02, arg02
305dc     40 28 CE F7 | 	test	local02, #64 wz
305e0     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
305e4     01 2E 66 50 |  if_ne	shl	local05, #1
305e8     13 2F 02 51 |  if_ne	add	local05, local01
305ec     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
305f0     00 FA 05 56 |  if_ne	mov	result1, #0
305f4                 | ' 
305f4                 | ' 	return 1;
305f4     01 FA 05 A6 |  if_e	mov	result1, #1
305f8                 | LR__4726
305f8     A7 F0 03 F6 | 	mov	ptra, fp
305fc     B2 00 A0 FD | 	call	#popregs_
30600                 | _fatfs_cc_cmp_lfn_ret
30600     2D 00 64 FD | 	ret
30604                 | 
30604                 | _fatfs_cc_pick_lfn
30604     09 01 02 F6 | 	mov	_var01, arg01
30608     0A 13 02 F6 | 	mov	arg01, arg02
3060c     1A 12 06 F1 | 	add	arg01, #26
30610                 | ' {
30610                 | ' 
30610                 | ' 	return *((WORD*)ptr);
30610     09 FB E9 FA | 	rdword	result1, arg01 wz
30614     00 FA 05 56 |  if_ne	mov	result1, #0
30618     D4 00 90 5D |  if_ne	jmp	#LR__4735
3061c     0A 03 C2 FA | 	rdbyte	_var02, arg02
30620     40 02 26 F5 | 	andn	_var02, #64
30624     01 02 86 F1 | 	sub	_var02, #1
30628     0D 02 06 FD | 	qmul	_var02, #13
3062c                 | ' 
3062c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
3062c                 | ' 
3062c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
3062c     01 04 06 F6 | 	mov	_var03, #1
30630     00 06 06 F6 | 	mov	_var04, #0
30634     18 08 62 FD | 	getqx	_var05
30638                 | LR__4730
30638     0D 06 16 F2 | 	cmp	_var04, #13 wc
3063c     80 00 90 3D |  if_ae	jmp	#LR__4733
30640     0A 13 02 F6 | 	mov	arg01, arg02
30644     03 03 02 F6 | 	mov	_var02, _var04
30648     01 00 00 FF 
3064c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
30650     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
30654     01 03 C2 FA | 	rdbyte	_var02, _var02
30658     01 02 06 FA | 	mul	_var02, #1
3065c     01 13 02 F1 | 	add	arg01, _var02
30660     01 00 00 FF 
30664     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
30668                 | ' {
30668                 | ' 
30668                 | ' 	return *((WORD*)ptr);
30668     09 FB E1 FA | 	rdword	result1, arg01
3066c     FD 0A 02 F6 | 	mov	_var06, result1
30670     02 03 02 F6 | 	mov	_var02, _var03
30674     0F 02 4E F7 | 	zerox	_var02, #15 wz
30678     28 00 90 AD |  if_e	jmp	#LR__4731
3067c     00 09 16 F2 | 	cmp	_var05, #256 wc
30680     00 FA 05 36 |  if_ae	mov	result1, #0
30684     68 00 90 3D |  if_ae	jmp	#LR__4735
30688     04 03 02 F6 | 	mov	_var02, _var05
3068c     01 02 66 F0 | 	shl	_var02, #1
30690     00 03 02 F1 | 	add	_var02, _var01
30694     05 05 02 F6 | 	mov	_var03, _var06
30698     01 05 52 FC | 	wrword	_var03, _var02
3069c     01 08 06 F1 | 	add	_var05, #1
306a0     14 00 90 FD | 	jmp	#LR__4732
306a4                 | LR__4731
306a4     05 0B 32 F9 | 	getword	_var06, _var06, #0
306a8     7F 00 00 FF 
306ac     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
306b0     00 FA 05 56 |  if_ne	mov	result1, #0
306b4     38 00 90 5D |  if_ne	jmp	#LR__4735
306b8                 | LR__4732
306b8     01 06 06 F1 | 	add	_var04, #1
306bc     78 FF 9F FD | 	jmp	#LR__4730
306c0                 | LR__4733
306c0     0A 03 C2 FA | 	rdbyte	_var02, arg02
306c4     40 02 CE F7 | 	test	_var02, #64 wz
306c8     02 0D 02 56 |  if_ne	mov	_var07, _var03
306cc     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
306d0     18 00 90 AD |  if_e	jmp	#LR__4734
306d4     00 09 16 F2 | 	cmp	_var05, #256 wc
306d8     00 FA 05 36 |  if_ae	mov	result1, #0
306dc     10 00 90 3D |  if_ae	jmp	#LR__4735
306e0     01 08 66 F0 | 	shl	_var05, #1
306e4     00 09 02 F1 | 	add	_var05, _var01
306e8     04 01 58 FC | 	wrword	#0, _var05
306ec                 | LR__4734
306ec                 | ' 		lfnbuf[i] = 0;
306ec                 | ' 	}
306ec                 | ' 
306ec                 | ' 	return 1;
306ec     01 FA 05 F6 | 	mov	result1, #1
306f0                 | LR__4735
306f0                 | _fatfs_cc_pick_lfn_ret
306f0     2D 00 64 FD | 	ret
306f4                 | 
306f4                 | _fatfs_cc_put_lfn
306f4     0D 14 06 F1 | 	add	arg02, #13
306f8     0A 19 42 FC | 	wrbyte	arg04, arg02
306fc     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
30700     01 18 86 F1 | 	sub	arg04, #1
30704     0D 18 06 FD | 	qmul	arg04, #13
30708     09 01 02 F6 | 	mov	_var01, arg01
3070c     02 14 86 F1 | 	sub	arg02, #2
30710     0A 1F 48 FC | 	wrbyte	#15, arg02
30714     01 14 06 F1 | 	add	arg02, #1
30718     0A 01 48 FC | 	wrbyte	#0, arg02
3071c     0C 14 86 F1 | 	sub	arg02, #12
30720     0A 13 02 F6 | 	mov	arg01, arg02
30724     1A 12 06 F1 | 	add	arg01, #26
30728     09 01 58 FC | 	wrword	#0, arg01
3072c     00 02 06 F6 | 	mov	_var02, #0
30730     00 04 06 F6 | 	mov	_var03, #0
30734                 | ' 	BYTE* dir,
30734                 | ' 	BYTE ord,
30734                 | ' 	BYTE sum
30734                 | ' )
30734                 | ' {
30734                 | ' 	UINT i, s;
30734                 | ' 	WCHAR wc;
30734                 | ' 
30734                 | ' 
30734                 | ' 	dir[ 13 ] = sum;
30734                 | ' 	dir[ 11 ] =  0x0F ;
30734                 | ' 	dir[ 12 ] = 0;
30734                 | ' 	st_word(dir +  26 , 0);
30734                 | ' 
30734                 | ' 	i = (ord - 1) * 13;
30734                 | ' 	s = wc = 0;
30734                 | ' 	do {
30734     01 00 00 FF 
30738     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
3073c     18 06 62 FD | 	getqx	_var04
30740     97 2A 48 FB | 	callpa	#(@LR__4741-@LR__4740)>>2,fcache_load_ptr_
30744                 | LR__4740
30744     01 19 32 F9 | 	getword	arg04, _var02, #0
30748     7F 00 00 FF 
3074c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
30750     03 13 02 56 |  if_ne	mov	arg01, _var04
30754     01 06 06 51 |  if_ne	add	_var04, #1
30758     01 12 66 50 |  if_ne	shl	arg01, #1
3075c     00 13 02 51 |  if_ne	add	arg01, _var01
30760     09 03 E2 5A |  if_ne	rdword	_var02, arg01
30764     0A 13 02 F6 | 	mov	arg01, arg02
30768     02 19 02 F6 | 	mov	arg04, _var03
3076c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
30770     0C 19 C2 FA | 	rdbyte	arg04, arg04
30774     01 18 06 FA | 	mul	arg04, #1
30778     0C 13 02 F1 | 	add	arg01, arg04
3077c     09 03 52 FC | 	wrword	_var02, arg01
30780     01 19 02 F6 | 	mov	arg04, _var02
30784     0F 18 4E F7 | 	zerox	arg04, #15 wz
30788     0F 02 CE A9 |  if_e	bmask	_var02, #15
3078c     01 04 06 F1 | 	add	_var03, #1
30790     0D 04 16 F2 | 	cmp	_var03, #13 wc
30794     AC FF 9F CD |  if_b	jmp	#LR__4740
30798                 | LR__4741
30798     01 00 00 FF 
3079c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
307a0     01 03 32 F9 | 	getword	_var02, _var02, #0
307a4     7F 00 00 FF 
307a8     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
307ac     01 06 66 50 |  if_ne	shl	_var04, #1
307b0     00 07 02 51 |  if_ne	add	_var04, _var01
307b4     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
307b8     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
307bc     40 16 46 A5 |  if_e	or	arg03, #64
307c0     0A 17 42 FC | 	wrbyte	arg03, arg02
307c4                 | _fatfs_cc_put_lfn_ret
307c4     2D 00 64 FD | 	ret
307c8                 | 
307c8                 | _fatfs_cc_gen_numname
307c8     08 4A 05 F6 | 	mov	COUNT_, #8
307cc     A8 00 A0 FD | 	call	#pushregs_
307d0     2C F0 07 F1 | 	add	ptra, #44
307d4     09 27 02 F6 | 	mov	local01, arg01
307d8     0A 29 02 F6 | 	mov	local02, arg02
307dc     0B 2B 02 F6 | 	mov	local03, arg03
307e0     0C 2D 02 F6 | 	mov	local04, arg04
307e4     13 13 02 F6 | 	mov	arg01, local01
307e8     14 15 02 F6 | 	mov	arg02, local02
307ec     0B 16 06 F6 | 	mov	arg03, #11
307f0     18 72 BF FD | 	call	#__system____builtin_memmove
307f4     06 2C 16 F2 | 	cmp	local04, #6 wc
307f8     48 00 90 CD |  if_b	jmp	#LR__4755
307fc     16 2F 02 F6 | 	mov	local05, local04
30800     97 1E 48 FB | 	callpa	#(@LR__4753-@LR__4750)>>2,fcache_load_ptr_
30804                 | ' 		sreg = seq;
30804                 | ' 		while (*lfn) {
30804                 | LR__4750
30804     15 31 EA FA | 	rdword	local06, local03 wz
30808     34 00 90 AD |  if_e	jmp	#LR__4754
3080c     15 33 E2 FA | 	rdword	local07, local03
30810                 | ' 			wc = *lfn++;
30810                 | ' 			for (i = 0; i < 16; i++) {
30810     02 2A 06 F1 | 	add	local03, #2
30814     10 12 DC FC | 	rep	@LR__4752, #16
30818                 | LR__4751
30818     01 2E 66 F0 | 	shl	local05, #1
3081c     19 31 32 F9 | 	getword	local06, local07, #0
30820     01 30 06 F5 | 	and	local06, #1
30824     18 2F 02 F1 | 	add	local05, local06
30828     19 33 32 F9 | 	getword	local07, local07, #0
3082c     01 32 46 F0 | 	shr	local07, #1
30830     10 2E 2E F4 | 	testbn	local05, #16 wz
30834     88 00 00 5F 
30838     21 2E 66 55 |  if_ne	xor	local05, ##69665
3083c                 | LR__4752
3083c     C4 FF 9F FD | 	jmp	#LR__4750
30840                 | LR__4753
30840                 | LR__4754
30840     17 2D 02 F6 | 	mov	local04, local05
30844                 | LR__4755
30844     07 32 06 F6 | 	mov	local07, #7
30848                 | ' 			}
30848                 | ' 		}
30848                 | ' 		seq = (UINT)sreg;
30848                 | ' 	}
30848                 | ' 
30848                 | ' 
30848                 | ' 	i = 7;
30848                 | ' 	do {
30848     10 4E 05 F1 | 	add	fp, #16
3084c     97 1A 48 FB | 	callpa	#(@LR__4757-@LR__4756)>>2,fcache_load_ptr_
30850                 | LR__4756
30850     16 2F 42 F8 | 	getnib	local05, local04, #0
30854     30 2E 06 F1 | 	add	local05, #48
30858     04 2C 46 F0 | 	shr	local04, #4
3085c     17 31 E2 F8 | 	getbyte	local06, local05, #0
30860     3A 30 16 F2 | 	cmp	local06, #58 wc
30864     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
30868     07 2E 06 31 |  if_ae	add	local05, #7
3086c     19 31 02 F6 | 	mov	local06, local07
30870     01 32 8E F1 | 	sub	local07, #1 wz
30874     A7 30 02 F1 | 	add	local06, fp
30878     18 2F 42 FC | 	wrbyte	local05, local06
3087c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
30880     CC FF 9F 5D |  if_ne	jmp	#LR__4756
30884                 | LR__4757
30884     19 31 02 F6 | 	mov	local06, local07
30888     A7 30 02 F1 | 	add	local06, fp
3088c     18 FD 48 FC | 	wrbyte	#126, local06
30890                 | ' 	ns[i] = '~';
30890                 | ' 
30890                 | ' 
30890                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
30890     00 2E 06 F6 | 	mov	local05, #0
30894     10 4E 85 F1 | 	sub	fp, #16
30898     97 2A 48 FB | 	callpa	#(@LR__4760-@LR__4758)>>2,fcache_load_ptr_
3089c                 | LR__4758
3089c     19 2F 12 F2 | 	cmp	local05, local07 wc
308a0     4C 00 90 3D |  if_ae	jmp	#LR__4761
308a4     17 31 02 F6 | 	mov	local06, local05
308a8     13 31 02 F1 | 	add	local06, local01
308ac     18 31 C2 FA | 	rdbyte	local06, local06
308b0     20 30 0E F2 | 	cmp	local06, #32 wz
308b4     38 00 90 AD |  if_e	jmp	#LR__4761
308b8     17 13 02 F6 | 	mov	arg01, local05
308bc     13 13 02 F1 | 	add	arg01, local01
308c0     09 13 CA FA | 	rdbyte	arg01, arg01 wz
308c4     00 FA 05 56 |  if_ne	mov	result1, #0
308c8                 | ' 
308c8                 | ' 	return 0;
308c8     00 FA 05 A6 |  if_e	mov	result1, #0
308cc     00 FA 0D F2 | 	cmp	result1, #0 wz
308d0     14 00 90 AD |  if_e	jmp	#LR__4759
308d4     19 31 02 F6 | 	mov	local06, local07
308d8     01 30 86 F1 | 	sub	local06, #1
308dc     18 2F 0A F2 | 	cmp	local05, local06 wz
308e0     0C 00 90 AD |  if_e	jmp	#LR__4761
308e4     01 2E 06 F1 | 	add	local05, #1
308e8                 | LR__4759
308e8     01 2E 06 F1 | 	add	local05, #1
308ec     AC FF 9F FD | 	jmp	#LR__4758
308f0                 | LR__4760
308f0                 | LR__4761
308f0     97 20 48 FB | 	callpa	#(@LR__4765-@LR__4762)>>2,fcache_load_ptr_
308f4                 | ' 			j++;
308f4                 | ' 		}
308f4                 | ' 	}
308f4                 | ' 	do {
308f4                 | LR__4762
308f4     17 31 02 F6 | 	mov	local06, local05
308f8     13 31 02 F1 | 	add	local06, local01
308fc     08 32 16 F2 | 	cmp	local07, #8 wc
30900     01 2E 06 F1 | 	add	local05, #1
30904     1C 00 90 3D |  if_ae	jmp	#LR__4763
30908     19 2D 02 F6 | 	mov	local04, local07
3090c     10 4E 05 F1 | 	add	fp, #16
30910     A7 2C 02 F1 | 	add	local04, fp
30914     16 35 C2 FA | 	rdbyte	local08, local04
30918     01 32 06 F1 | 	add	local07, #1
3091c     10 4E 85 F1 | 	sub	fp, #16
30920     04 00 90 FD | 	jmp	#LR__4764
30924                 | LR__4763
30924     20 34 06 F6 | 	mov	local08, #32
30928                 | LR__4764
30928     18 35 42 FC | 	wrbyte	local08, local06
3092c     08 2E 16 F2 | 	cmp	local05, #8 wc
30930     C0 FF 9F CD |  if_b	jmp	#LR__4762
30934                 | LR__4765
30934     A7 F0 03 F6 | 	mov	ptra, fp
30938     B2 00 A0 FD | 	call	#popregs_
3093c                 | _fatfs_cc_gen_numname_ret
3093c     2D 00 64 FD | 	ret
30940                 | 
30940                 | _fatfs_cc_sum_sfn
30940     00 00 06 F6 | 	mov	_var01, #0
30944                 | ' )
30944                 | ' {
30944                 | ' 	BYTE sum = 0;
30944                 | ' 	UINT n = 11;
30944                 | ' 
30944                 | ' 	do {
30944     97 12 48 FB | 	callpa	#(@LR__4772-@LR__4770)>>2,fcache_load_ptr_
30948                 | LR__4770
30948     0B 10 DC FC | 	rep	@LR__4773, #11
3094c                 | LR__4771
3094c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
30950     01 FA 45 F0 | 	shr	result1, #1
30954     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
30958     07 00 66 F0 | 	shl	_var01, #7
3095c     00 FB 01 F1 | 	add	result1, _var01
30960     09 01 C2 FA | 	rdbyte	_var01, arg01
30964     FD 00 02 F1 | 	add	_var01, result1
30968     01 12 06 F1 | 	add	arg01, #1
3096c                 | LR__4772
3096c                 | LR__4773
3096c                 | ' 	return sum;
3096c     00 FB 01 F6 | 	mov	result1, _var01
30970                 | _fatfs_cc_sum_sfn_ret
30970     2D 00 64 FD | 	ret
30974                 | 
30974                 | _fatfs_cc_dir_read
30974     0C 4A 05 F6 | 	mov	COUNT_, #12
30978     A8 00 A0 FD | 	call	#pushregs_
3097c     09 27 02 F6 | 	mov	local01, arg01
30980     0A 29 02 F6 | 	mov	local02, arg02
30984     04 2A 06 F6 | 	mov	local03, #4
30988     13 2D 02 FB | 	rdlong	local04, local01
3098c     FF 2E 06 F6 | 	mov	local05, #255
30990     FF 30 06 F6 | 	mov	local06, #255
30994                 | ' )
30994                 | ' {
30994                 | ' 	FRESULT res = FR_NO_FILE;
30994                 | ' 	FATFS *fs = dp->obj.fs;
30994                 | ' 	BYTE attr, b;
30994                 | ' 
30994                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
30994                 | ' 
30994                 | ' 
30994                 | ' 	while (dp->sect) {
30994                 | LR__4780
30994     18 26 06 F1 | 	add	local01, #24
30998     13 FB 09 FB | 	rdlong	result1, local01 wz
3099c     18 26 86 F1 | 	sub	local01, #24
309a0     AC 01 90 AD |  if_e	jmp	#LR__4790
309a4     18 26 06 F1 | 	add	local01, #24
309a8     13 15 02 FB | 	rdlong	arg02, local01
309ac     18 26 86 F1 | 	sub	local01, #24
309b0     16 13 02 F6 | 	mov	arg01, local04
309b4     AC ED BF FD | 	call	#_fatfs_cc_move_window
309b8     FD 2A 0A F6 | 	mov	local03, result1 wz
309bc     90 01 90 5D |  if_ne	jmp	#LR__4790
309c0     1C 26 06 F1 | 	add	local01, #28
309c4     13 FB 01 FB | 	rdlong	result1, local01
309c8     1C 26 86 F1 | 	sub	local01, #28
309cc     FD 32 C2 FA | 	rdbyte	local07, result1
309d0     19 FB 01 F6 | 	mov	result1, local07
309d4     07 FA 4D F7 | 	zerox	result1, #7 wz
309d8     04 2A 06 A6 |  if_e	mov	local03, #4
309dc                 | ' 			res = FR_NO_FILE; break;
309dc     70 01 90 AD |  if_e	jmp	#LR__4790
309e0     1C 26 06 F1 | 	add	local01, #28
309e4     13 35 02 FB | 	rdlong	local08, local01
309e8     0B 34 06 F1 | 	add	local08, #11
309ec     1A 37 C2 FA | 	rdbyte	local09, local08
309f0     3F 36 06 F5 | 	and	local09, #63
309f4     16 26 86 F1 | 	sub	local01, #22
309f8     13 37 42 FC | 	wrbyte	local09, local01
309fc     06 26 86 F1 | 	sub	local01, #6
30a00     19 FB E1 F8 | 	getbyte	result1, local07, #0
30a04     E5 FA 0D F2 | 	cmp	result1, #229 wz
30a08     19 35 02 56 |  if_ne	mov	local08, local07
30a0c     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
30a10     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
30a14     1C 00 90 AD |  if_e	jmp	#LR__4781
30a18     00 38 06 F6 | 	mov	local10, #0
30a1c     1B 35 E2 F8 | 	getbyte	local08, local09, #0
30a20     20 34 26 F5 | 	andn	local08, #32
30a24     08 34 0E F2 | 	cmp	local08, #8 wz
30a28     01 38 06 A6 |  if_e	mov	local10, #1
30a2c     14 39 0A F2 | 	cmp	local10, local02 wz
30a30     08 00 90 AD |  if_e	jmp	#LR__4782
30a34                 | LR__4781
30a34     FF 2E 06 F6 | 	mov	local05, #255
30a38     00 01 90 FD | 	jmp	#LR__4789
30a3c                 | LR__4782
30a3c     1B 37 E2 F8 | 	getbyte	local09, local09, #0
30a40     0F 36 0E F2 | 	cmp	local09, #15 wz
30a44     B4 00 90 5D |  if_ne	jmp	#LR__4786
30a48     19 3B E2 F8 | 	getbyte	local11, local07, #0
30a4c     40 3A CE F7 | 	test	local11, #64 wz
30a50     30 00 90 AD |  if_e	jmp	#LR__4783
30a54     1C 26 06 F1 | 	add	local01, #28
30a58     13 3B 02 FB | 	rdlong	local11, local01
30a5c     0D 3A 06 F1 | 	add	local11, #13
30a60     1D 31 C2 FA | 	rdbyte	local06, local11
30a64     19 33 E2 F8 | 	getbyte	local07, local07, #0
30a68     BF 32 06 F5 | 	and	local07, #191
30a6c     19 2F 02 F6 | 	mov	local05, local07
30a70     0C 26 86 F1 | 	sub	local01, #12
30a74     13 3B 02 FB | 	rdlong	local11, local01
30a78     1C 26 06 F1 | 	add	local01, #28
30a7c     13 3B 62 FC | 	wrlong	local11, local01
30a80     2C 26 86 F1 | 	sub	local01, #44
30a84                 | LR__4783
30a84     19 35 E2 F8 | 	getbyte	local08, local07, #0
30a88     17 39 E2 F8 | 	getbyte	local10, local05, #0
30a8c     1C 35 0A F2 | 	cmp	local08, local10 wz
30a90     5C 00 90 5D |  if_ne	jmp	#LR__4784
30a94     18 39 E2 F8 | 	getbyte	local10, local06, #0
30a98     1C 26 06 F1 | 	add	local01, #28
30a9c     13 37 02 FB | 	rdlong	local09, local01
30aa0     1C 26 86 F1 | 	sub	local01, #28
30aa4     0D 36 06 F1 | 	add	local09, #13
30aa8     1B 35 C2 FA | 	rdbyte	local08, local09
30aac     1A 37 E2 F8 | 	getbyte	local09, local08, #0
30ab0     1B 39 0A F2 | 	cmp	local10, local09 wz
30ab4     38 00 90 5D |  if_ne	jmp	#LR__4784
30ab8     0C 2C 06 F1 | 	add	local04, #12
30abc     16 13 02 FB | 	rdlong	arg01, local04
30ac0     0C 2C 86 F1 | 	sub	local04, #12
30ac4     1C 26 06 F1 | 	add	local01, #28
30ac8     13 3D 02 FB | 	rdlong	local12, local01
30acc     1C 26 86 F1 | 	sub	local01, #28
30ad0     1E 15 02 F6 | 	mov	arg02, local12
30ad4     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
30ad8     00 FA 4D F2 | 	cmps	result1, #0 wz
30adc     17 3D 02 56 |  if_ne	mov	local12, local05
30ae0     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
30ae4     01 3C 86 51 |  if_ne	sub	local12, #1
30ae8     1E 3B 02 56 |  if_ne	mov	local11, local12
30aec     04 00 90 5D |  if_ne	jmp	#LR__4785
30af0                 | LR__4784
30af0     FF 3A 06 F6 | 	mov	local11, #255
30af4                 | LR__4785
30af4     1D 2F 02 F6 | 	mov	local05, local11
30af8     40 00 90 FD | 	jmp	#LR__4788
30afc                 | LR__4786
30afc     17 3B 02 F6 | 	mov	local11, local05
30b00     07 3A 4E F7 | 	zerox	local11, #7 wz
30b04     20 00 90 5D |  if_ne	jmp	#LR__4787
30b08     18 31 E2 F8 | 	getbyte	local06, local06, #0
30b0c     1C 26 06 F1 | 	add	local01, #28
30b10     13 13 02 FB | 	rdlong	arg01, local01
30b14     1C 26 86 F1 | 	sub	local01, #28
30b18     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
30b1c     FD FA E1 F8 | 	getbyte	result1, result1, #0
30b20     FD 30 0A F2 | 	cmp	local06, result1 wz
30b24     28 00 90 AD |  if_e	jmp	#LR__4790
30b28                 | LR__4787
30b28     2C 26 06 F1 | 	add	local01, #44
30b2c     FF FF FF FF 
30b30     13 FF 6B FC | 	wrlong	##-1, local01
30b34     2C 26 86 F1 | 	sub	local01, #44
30b38                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
30b38                 | ' 					}
30b38                 | ' 					break;
30b38     14 00 90 FD | 	jmp	#LR__4790
30b3c                 | LR__4788
30b3c                 | LR__4789
30b3c     13 13 02 F6 | 	mov	arg01, local01
30b40     00 14 06 F6 | 	mov	arg02, #0
30b44     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
30b48     FD 2A 0A F6 | 	mov	local03, result1 wz
30b4c     44 FE 9F AD |  if_e	jmp	#LR__4780
30b50                 | LR__4790
30b50     00 2A 0E F2 | 	cmp	local03, #0 wz
30b54     18 26 06 51 |  if_ne	add	local01, #24
30b58     13 01 68 5C |  if_ne	wrlong	#0, local01
30b5c                 | ' 	return res;
30b5c     15 FB 01 F6 | 	mov	result1, local03
30b60     A7 F0 03 F6 | 	mov	ptra, fp
30b64     B2 00 A0 FD | 	call	#popregs_
30b68                 | _fatfs_cc_dir_read_ret
30b68     2D 00 64 FD | 	ret
30b6c                 | 
30b6c                 | _fatfs_cc_dir_find
30b6c     0B 4A 05 F6 | 	mov	COUNT_, #11
30b70     A8 00 A0 FD | 	call	#pushregs_
30b74     09 27 02 F6 | 	mov	local01, arg01
30b78     13 29 02 FB | 	rdlong	local02, local01
30b7c     13 13 02 F6 | 	mov	arg01, local01
30b80     00 14 06 F6 | 	mov	arg02, #0
30b84     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
30b88     00 FA 0D F2 | 	cmp	result1, #0 wz
30b8c     18 02 90 5D |  if_ne	jmp	#LR__4812
30b90     FF 2A 06 F6 | 	mov	local03, #255
30b94     FF 2C 06 F6 | 	mov	local04, #255
30b98     2C 26 06 F1 | 	add	local01, #44
30b9c     FF FF FF FF 
30ba0     13 FF 6B FC | 	wrlong	##-1, local01
30ba4     2C 26 86 F1 | 	sub	local01, #44
30ba8                 | ' #line 2404 "ff.c"
30ba8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
30ba8                 | ' 
30ba8                 | ' 	do {
30ba8                 | LR__4800
30ba8     18 26 06 F1 | 	add	local01, #24
30bac     13 15 02 FB | 	rdlong	arg02, local01
30bb0     18 26 86 F1 | 	sub	local01, #24
30bb4     14 13 02 F6 | 	mov	arg01, local02
30bb8     A8 EB BF FD | 	call	#_fatfs_cc_move_window
30bbc     FD 2E 0A F6 | 	mov	local05, result1 wz
30bc0     E0 01 90 5D |  if_ne	jmp	#LR__4811
30bc4     1C 26 06 F1 | 	add	local01, #28
30bc8     13 17 02 FB | 	rdlong	arg03, local01
30bcc     1C 26 86 F1 | 	sub	local01, #28
30bd0     0B 31 C2 FA | 	rdbyte	local06, arg03
30bd4     18 17 02 F6 | 	mov	arg03, local06
30bd8     07 16 4E F7 | 	zerox	arg03, #7 wz
30bdc     04 2E 06 A6 |  if_e	mov	local05, #4
30be0     C0 01 90 AD |  if_e	jmp	#LR__4811
30be4     1C 26 06 F1 | 	add	local01, #28
30be8     13 33 02 FB | 	rdlong	local07, local01
30bec     19 17 02 F6 | 	mov	arg03, local07
30bf0     0B 16 06 F1 | 	add	arg03, #11
30bf4     0B 35 C2 FA | 	rdbyte	local08, arg03
30bf8     3F 34 06 F5 | 	and	local08, #63
30bfc     16 26 86 F1 | 	sub	local01, #22
30c00     13 35 42 FC | 	wrbyte	local08, local01
30c04     06 26 86 F1 | 	sub	local01, #6
30c08     18 17 E2 F8 | 	getbyte	arg03, local06, #0
30c0c     E5 16 0E F2 | 	cmp	arg03, #229 wz
30c10     18 00 90 AD |  if_e	jmp	#LR__4801
30c14     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
30c18     08 16 CE F7 | 	test	arg03, #8 wz
30c1c     1A 33 02 56 |  if_ne	mov	local07, local08
30c20     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
30c24     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
30c28     18 00 90 AD |  if_e	jmp	#LR__4802
30c2c                 | LR__4801
30c2c     FF 2C 06 F6 | 	mov	local04, #255
30c30     2C 26 06 F1 | 	add	local01, #44
30c34     FF FF FF FF 
30c38     13 FF 6B FC | 	wrlong	##-1, local01
30c3c     2C 26 86 F1 | 	sub	local01, #44
30c40     4C 01 90 FD | 	jmp	#LR__4810
30c44                 | LR__4802
30c44     1A 35 E2 F8 | 	getbyte	local08, local08, #0
30c48     0F 34 0E F2 | 	cmp	local08, #15 wz
30c4c     C8 00 90 5D |  if_ne	jmp	#LR__4806
30c50     2B 26 06 F1 | 	add	local01, #43
30c54     13 35 C2 FA | 	rdbyte	local08, local01
30c58     2B 26 86 F1 | 	sub	local01, #43
30c5c     40 34 CE F7 | 	test	local08, #64 wz
30c60     2C 01 90 5D |  if_ne	jmp	#LR__4809
30c64     18 37 E2 F8 | 	getbyte	local09, local06, #0
30c68     40 36 CE F7 | 	test	local09, #64 wz
30c6c     30 00 90 AD |  if_e	jmp	#LR__4803
30c70     1C 26 06 F1 | 	add	local01, #28
30c74     13 37 02 FB | 	rdlong	local09, local01
30c78     0D 36 06 F1 | 	add	local09, #13
30c7c     1B 2B C2 FA | 	rdbyte	local03, local09
30c80     18 31 E2 F8 | 	getbyte	local06, local06, #0
30c84     BF 30 06 F5 | 	and	local06, #191
30c88     18 2D 02 F6 | 	mov	local04, local06
30c8c     0C 26 86 F1 | 	sub	local01, #12
30c90     13 37 02 FB | 	rdlong	local09, local01
30c94     1C 26 06 F1 | 	add	local01, #28
30c98     13 37 62 FC | 	wrlong	local09, local01
30c9c     2C 26 86 F1 | 	sub	local01, #44
30ca0                 | LR__4803
30ca0     18 39 E2 F8 | 	getbyte	local10, local06, #0
30ca4     16 33 E2 F8 | 	getbyte	local07, local04, #0
30ca8     19 39 0A F2 | 	cmp	local10, local07 wz
30cac     5C 00 90 5D |  if_ne	jmp	#LR__4804
30cb0     15 35 E2 F8 | 	getbyte	local08, local03, #0
30cb4     1C 26 06 F1 | 	add	local01, #28
30cb8     13 33 02 FB | 	rdlong	local07, local01
30cbc     1C 26 86 F1 | 	sub	local01, #28
30cc0     0D 32 06 F1 | 	add	local07, #13
30cc4     19 31 C2 FA | 	rdbyte	local06, local07
30cc8     18 33 E2 F8 | 	getbyte	local07, local06, #0
30ccc     19 35 0A F2 | 	cmp	local08, local07 wz
30cd0     38 00 90 5D |  if_ne	jmp	#LR__4804
30cd4     0C 28 06 F1 | 	add	local02, #12
30cd8     14 13 02 FB | 	rdlong	arg01, local02
30cdc     0C 28 86 F1 | 	sub	local02, #12
30ce0     1C 26 06 F1 | 	add	local01, #28
30ce4     13 3B 02 FB | 	rdlong	local11, local01
30ce8     1C 26 86 F1 | 	sub	local01, #28
30cec     1D 15 02 F6 | 	mov	arg02, local11
30cf0     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
30cf4     00 FA 4D F2 | 	cmps	result1, #0 wz
30cf8     16 3B 02 56 |  if_ne	mov	local11, local04
30cfc     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
30d00     01 3A 86 51 |  if_ne	sub	local11, #1
30d04     1D 37 02 56 |  if_ne	mov	local09, local11
30d08     04 00 90 5D |  if_ne	jmp	#LR__4805
30d0c                 | LR__4804
30d0c     FF 36 06 F6 | 	mov	local09, #255
30d10                 | LR__4805
30d10     1B 2D 02 F6 | 	mov	local04, local09
30d14     78 00 90 FD | 	jmp	#LR__4809
30d18                 | LR__4806
30d18     16 37 02 F6 | 	mov	local09, local04
30d1c     07 36 4E F7 | 	zerox	local09, #7 wz
30d20     20 00 90 5D |  if_ne	jmp	#LR__4807
30d24     15 39 E2 F8 | 	getbyte	local10, local03, #0
30d28     1C 26 06 F1 | 	add	local01, #28
30d2c     13 13 02 FB | 	rdlong	arg01, local01
30d30     1C 26 86 F1 | 	sub	local01, #28
30d34     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
30d38     FD FA E1 F8 | 	getbyte	result1, result1, #0
30d3c     FD 38 0A F2 | 	cmp	local10, result1 wz
30d40     60 00 90 AD |  if_e	jmp	#LR__4811
30d44                 | LR__4807
30d44     2B 26 06 F1 | 	add	local01, #43
30d48     13 37 C2 FA | 	rdbyte	local09, local01
30d4c     2B 26 86 F1 | 	sub	local01, #43
30d50     01 36 CE F7 | 	test	local09, #1 wz
30d54     24 00 90 5D |  if_ne	jmp	#LR__4808
30d58     1C 26 06 F1 | 	add	local01, #28
30d5c     13 13 02 FB | 	rdlong	arg01, local01
30d60     04 26 06 F1 | 	add	local01, #4
30d64     13 15 02 F6 | 	mov	arg02, local01
30d68     20 26 86 F1 | 	sub	local01, #32
30d6c     0B 16 06 F6 | 	mov	arg03, #11
30d70     88 DA BF FD | 	call	#_fatfs_cc_memcmp
30d74     00 FA 0D F2 | 	cmp	result1, #0 wz
30d78     28 00 90 AD |  if_e	jmp	#LR__4811
30d7c                 | LR__4808
30d7c     FF 2C 06 F6 | 	mov	local04, #255
30d80     2C 26 06 F1 | 	add	local01, #44
30d84     FF FF FF FF 
30d88     13 FF 6B FC | 	wrlong	##-1, local01
30d8c     2C 26 86 F1 | 	sub	local01, #44
30d90                 | LR__4809
30d90                 | LR__4810
30d90     13 13 02 F6 | 	mov	arg01, local01
30d94     00 14 06 F6 | 	mov	arg02, #0
30d98     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
30d9c     FD 2E 0A F6 | 	mov	local05, result1 wz
30da0     04 FE 9F AD |  if_e	jmp	#LR__4800
30da4                 | LR__4811
30da4                 | ' 
30da4                 | ' 	return res;
30da4     17 FB 01 F6 | 	mov	result1, local05
30da8                 | LR__4812
30da8     A7 F0 03 F6 | 	mov	ptra, fp
30dac     B2 00 A0 FD | 	call	#popregs_
30db0                 | _fatfs_cc_dir_find_ret
30db0     2D 00 64 FD | 	ret
30db4                 | 
30db4                 | _fatfs_cc_dir_register
30db4     0A 4A 05 F6 | 	mov	COUNT_, #10
30db8     A8 00 A0 FD | 	call	#pushregs_
30dbc     2C F0 07 F1 | 	add	ptra, #44
30dc0     04 4E 05 F1 | 	add	fp, #4
30dc4     A7 12 62 FC | 	wrlong	arg01, fp
30dc8     09 27 02 FB | 	rdlong	local01, arg01
30dcc     08 4E 05 F1 | 	add	fp, #8
30dd0     A7 26 62 FC | 	wrlong	local01, fp
30dd4     08 4E 85 F1 | 	sub	fp, #8
30dd8     A7 28 02 FB | 	rdlong	local02, fp
30ddc     04 4E 85 F1 | 	sub	fp, #4
30de0     2B 28 06 F1 | 	add	local02, #43
30de4     14 29 C2 FA | 	rdbyte	local02, local02
30de8     A0 28 CE F7 | 	test	local02, #160 wz
30dec     06 FA 05 56 |  if_ne	mov	result1, #6
30df0     F8 03 90 5D |  if_ne	jmp	#LR__4835
30df4                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
30df4     14 4E 05 F1 | 	add	fp, #20
30df8     A7 00 68 FC | 	wrlong	#0, fp
30dfc     14 4E 85 F1 | 	sub	fp, #20
30e00     97 28 48 FB | 	callpa	#(@LR__4821-@LR__4820)>>2,fcache_load_ptr_
30e04                 | LR__4820
30e04     0C 4E 05 F1 | 	add	fp, #12
30e08     A7 28 02 FB | 	rdlong	local02, fp
30e0c     0C 28 06 F1 | 	add	local02, #12
30e10     14 2B 02 FB | 	rdlong	local03, local02
30e14     08 4E 05 F1 | 	add	fp, #8
30e18     A7 2C 02 FB | 	rdlong	local04, fp
30e1c     14 4E 85 F1 | 	sub	fp, #20
30e20     01 2C 66 F0 | 	shl	local04, #1
30e24     15 2D 02 F1 | 	add	local04, local03
30e28     16 29 EA FA | 	rdword	local02, local04 wz
30e2c     24 00 90 AD |  if_e	jmp	#LR__4822
30e30     14 4E 05 F1 | 	add	fp, #20
30e34     A7 2E 02 FB | 	rdlong	local05, fp
30e38     17 31 02 F6 | 	mov	local06, local05
30e3c     17 33 02 F6 | 	mov	local07, local05
30e40     19 35 02 F6 | 	mov	local08, local07
30e44     01 34 06 F1 | 	add	local08, #1
30e48     A7 34 62 FC | 	wrlong	local08, fp
30e4c     14 4E 85 F1 | 	sub	fp, #20
30e50     B0 FF 9F FD | 	jmp	#LR__4820
30e54                 | LR__4821
30e54                 | LR__4822
30e54     1C 4E 05 F1 | 	add	fp, #28
30e58     A7 12 02 F6 | 	mov	arg01, fp
30e5c     18 4E 85 F1 | 	sub	fp, #24
30e60     A7 14 02 FB | 	rdlong	arg02, fp
30e64     04 4E 85 F1 | 	sub	fp, #4
30e68     20 14 06 F1 | 	add	arg02, #32
30e6c     0C 16 06 F6 | 	mov	arg03, #12
30e70     98 6B BF FD | 	call	#__system____builtin_memmove
30e74     27 4E 05 F1 | 	add	fp, #39
30e78     A7 36 C2 FA | 	rdbyte	local09, fp
30e7c     27 4E 85 F1 | 	sub	fp, #39
30e80     01 36 CE F7 | 	test	local09, #1 wz
30e84     F4 00 90 AD |  if_e	jmp	#LR__4825
30e88     04 4E 05 F1 | 	add	fp, #4
30e8c     A7 38 02 FB | 	rdlong	local10, fp
30e90     2B 38 06 F1 | 	add	local10, #43
30e94     1C 81 48 FC | 	wrbyte	#64, local10
30e98                 | ' 		dp->fn[ 11 ] =  0x40 ;
30e98                 | ' 		for (n = 1; n < 100; n++) {
30e98     0C 4E 05 F1 | 	add	fp, #12
30e9c     A7 02 68 FC | 	wrlong	#1, fp
30ea0     10 4E 85 F1 | 	sub	fp, #16
30ea4                 | LR__4823
30ea4     10 4E 05 F1 | 	add	fp, #16
30ea8     A7 28 02 FB | 	rdlong	local02, fp
30eac     10 4E 85 F1 | 	sub	fp, #16
30eb0     64 28 16 F2 | 	cmp	local02, #100 wc
30eb4     70 00 90 3D |  if_ae	jmp	#LR__4824
30eb8     04 4E 05 F1 | 	add	fp, #4
30ebc     A7 12 02 FB | 	rdlong	arg01, fp
30ec0     20 12 06 F1 | 	add	arg01, #32
30ec4     18 4E 05 F1 | 	add	fp, #24
30ec8     A7 14 02 F6 | 	mov	arg02, fp
30ecc     10 4E 85 F1 | 	sub	fp, #16
30ed0     A7 38 02 FB | 	rdlong	local10, fp
30ed4     0C 38 06 F1 | 	add	local10, #12
30ed8     1C 17 02 FB | 	rdlong	arg03, local10
30edc     04 4E 05 F1 | 	add	fp, #4
30ee0     A7 18 02 FB | 	rdlong	arg04, fp
30ee4     10 4E 85 F1 | 	sub	fp, #16
30ee8     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
30eec     04 4E 05 F1 | 	add	fp, #4
30ef0     A7 12 02 FB | 	rdlong	arg01, fp
30ef4     04 4E 85 F1 | 	sub	fp, #4
30ef8     70 FC BF FD | 	call	#_fatfs_cc_dir_find
30efc     08 4E 05 F1 | 	add	fp, #8
30f00     A7 FA 61 FC | 	wrlong	result1, fp
30f04     00 FA 4D F2 | 	cmps	result1, #0 wz
30f08     08 4E 85 F1 | 	sub	fp, #8
30f0c     18 00 90 5D |  if_ne	jmp	#LR__4824
30f10     10 4E 05 F1 | 	add	fp, #16
30f14     A7 38 02 FB | 	rdlong	local10, fp
30f18     01 38 06 F1 | 	add	local10, #1
30f1c     A7 38 62 FC | 	wrlong	local10, fp
30f20     10 4E 85 F1 | 	sub	fp, #16
30f24     7C FF 9F FD | 	jmp	#LR__4823
30f28                 | LR__4824
30f28     10 4E 05 F1 | 	add	fp, #16
30f2c     A7 38 02 FB | 	rdlong	local10, fp
30f30     10 4E 85 F1 | 	sub	fp, #16
30f34     64 38 0E F2 | 	cmp	local10, #100 wz
30f38     07 FA 05 A6 |  if_e	mov	result1, #7
30f3c     AC 02 90 AD |  if_e	jmp	#LR__4835
30f40     08 4E 05 F1 | 	add	fp, #8
30f44     A7 38 02 FB | 	rdlong	local10, fp
30f48     08 4E 85 F1 | 	sub	fp, #8
30f4c     04 38 0E F2 | 	cmp	local10, #4 wz
30f50     08 4E 05 51 |  if_ne	add	fp, #8
30f54     A7 FA 01 5B |  if_ne	rdlong	result1, fp
30f58     08 4E 85 51 |  if_ne	sub	fp, #8
30f5c     8C 02 90 5D |  if_ne	jmp	#LR__4835
30f60     04 4E 05 F1 | 	add	fp, #4
30f64     A7 38 02 FB | 	rdlong	local10, fp
30f68     23 4E 05 F1 | 	add	fp, #35
30f6c     A7 26 C2 FA | 	rdbyte	local01, fp
30f70     27 4E 85 F1 | 	sub	fp, #39
30f74     2B 38 06 F1 | 	add	local10, #43
30f78     1C 27 42 FC | 	wrbyte	local01, local10
30f7c                 | LR__4825
30f7c     27 4E 05 F1 | 	add	fp, #39
30f80     A7 28 C2 FA | 	rdbyte	local02, fp
30f84     27 4E 85 F1 | 	sub	fp, #39
30f88     02 28 CE F7 | 	test	local02, #2 wz
30f8c     20 00 90 AD |  if_e	jmp	#LR__4826
30f90     14 4E 05 F1 | 	add	fp, #20
30f94     A7 38 02 FB | 	rdlong	local10, fp
30f98     0C 38 06 F1 | 	add	local10, #12
30f9c     0D 38 16 FD | 	qdiv	local10, #13
30fa0     14 4E 85 F1 | 	sub	fp, #20
30fa4     18 38 62 FD | 	getqx	local10
30fa8     01 38 06 F1 | 	add	local10, #1
30fac     04 00 90 FD | 	jmp	#LR__4827
30fb0                 | LR__4826
30fb0     01 38 06 F6 | 	mov	local10, #1
30fb4                 | LR__4827
30fb4     18 4E 05 F1 | 	add	fp, #24
30fb8     A7 38 62 FC | 	wrlong	local10, fp
30fbc     14 4E 85 F1 | 	sub	fp, #20
30fc0     A7 12 02 FB | 	rdlong	arg01, fp
30fc4     1C 15 02 F6 | 	mov	arg02, local10
30fc8     04 4E 85 F1 | 	sub	fp, #4
30fcc     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
30fd0     08 4E 05 F1 | 	add	fp, #8
30fd4     A7 FA 61 FC | 	wrlong	result1, fp
30fd8     08 4E 85 F1 | 	sub	fp, #8
30fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
30fe0     38 01 90 5D |  if_ne	jmp	#LR__4832
30fe4     18 4E 05 F1 | 	add	fp, #24
30fe8     A7 38 02 FB | 	rdlong	local10, fp
30fec     01 38 8E F1 | 	sub	local10, #1 wz
30ff0     A7 38 62 FC | 	wrlong	local10, fp
30ff4     18 4E 85 F1 | 	sub	fp, #24
30ff8     20 01 90 AD |  if_e	jmp	#LR__4832
30ffc     04 4E 05 F1 | 	add	fp, #4
31000     A7 38 02 FB | 	rdlong	local10, fp
31004     1C 13 02 F6 | 	mov	arg01, local10
31008     14 4E 05 F1 | 	add	fp, #20
3100c     A7 18 02 FB | 	rdlong	arg04, fp
31010     18 4E 85 F1 | 	sub	fp, #24
31014     05 18 66 F0 | 	shl	arg04, #5
31018     10 38 06 F1 | 	add	local10, #16
3101c     1C 15 02 FB | 	rdlong	arg02, local10
31020     0C 15 82 F1 | 	sub	arg02, arg04
31024     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
31028     08 4E 05 F1 | 	add	fp, #8
3102c     A7 FA 61 FC | 	wrlong	result1, fp
31030     08 4E 85 F1 | 	sub	fp, #8
31034     00 FA 0D F2 | 	cmp	result1, #0 wz
31038     E0 00 90 5D |  if_ne	jmp	#LR__4831
3103c     04 4E 05 F1 | 	add	fp, #4
31040     A7 12 02 FB | 	rdlong	arg01, fp
31044     04 4E 85 F1 | 	sub	fp, #4
31048     20 12 06 F1 | 	add	arg01, #32
3104c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
31050     FD 38 02 F6 | 	mov	local10, result1
31054     28 4E 05 F1 | 	add	fp, #40
31058     A7 38 42 FC | 	wrbyte	local10, fp
3105c     28 4E 85 F1 | 	sub	fp, #40
31060                 | ' 			sum = sum_sfn(dp->fn);
31060                 | ' 			do {
31060                 | LR__4828
31060     0C 4E 05 F1 | 	add	fp, #12
31064     A7 12 02 FB | 	rdlong	arg01, fp
31068     08 4E 85 F1 | 	sub	fp, #8
3106c     A7 26 02 FB | 	rdlong	local01, fp
31070     04 4E 85 F1 | 	sub	fp, #4
31074     18 26 06 F1 | 	add	local01, #24
31078     13 15 02 FB | 	rdlong	arg02, local01
3107c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
31080     08 4E 05 F1 | 	add	fp, #8
31084     A7 FA 61 FC | 	wrlong	result1, fp
31088     00 FA 4D F2 | 	cmps	result1, #0 wz
3108c     08 4E 85 F1 | 	sub	fp, #8
31090     88 00 90 5D |  if_ne	jmp	#LR__4830
31094     0C 4E 05 F1 | 	add	fp, #12
31098     A7 28 02 FB | 	rdlong	local02, fp
3109c     0C 28 06 F1 | 	add	local02, #12
310a0     14 13 02 FB | 	rdlong	arg01, local02
310a4     08 4E 85 F1 | 	sub	fp, #8
310a8     A7 26 02 FB | 	rdlong	local01, fp
310ac     1C 26 06 F1 | 	add	local01, #28
310b0     13 15 02 FB | 	rdlong	arg02, local01
310b4     14 4E 05 F1 | 	add	fp, #20
310b8     A7 16 02 FB | 	rdlong	arg03, fp
310bc     10 4E 05 F1 | 	add	fp, #16
310c0     A7 18 C2 FA | 	rdbyte	arg04, fp
310c4     28 4E 85 F1 | 	sub	fp, #40
310c8     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
310cc     0C 4E 05 F1 | 	add	fp, #12
310d0     A7 38 02 FB | 	rdlong	local10, fp
310d4     03 38 06 F1 | 	add	local10, #3
310d8     1C 03 48 FC | 	wrbyte	#1, local10
310dc     08 4E 85 F1 | 	sub	fp, #8
310e0     A7 12 02 FB | 	rdlong	arg01, fp
310e4     04 4E 85 F1 | 	sub	fp, #4
310e8     00 14 06 F6 | 	mov	arg02, #0
310ec     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
310f0     08 4E 05 F1 | 	add	fp, #8
310f4     A7 FA 61 FC | 	wrlong	result1, fp
310f8     00 FA 4D F2 | 	cmps	result1, #0 wz
310fc     08 4E 85 F1 | 	sub	fp, #8
31100     18 00 90 5D |  if_ne	jmp	#LR__4829
31104     18 4E 05 F1 | 	add	fp, #24
31108     A7 38 02 FB | 	rdlong	local10, fp
3110c     01 38 8E F1 | 	sub	local10, #1 wz
31110     A7 38 62 FC | 	wrlong	local10, fp
31114     18 4E 85 F1 | 	sub	fp, #24
31118     44 FF 9F 5D |  if_ne	jmp	#LR__4828
3111c                 | LR__4829
3111c                 | LR__4830
3111c                 | LR__4831
3111c                 | LR__4832
3111c     08 4E 05 F1 | 	add	fp, #8
31120     A7 38 0A FB | 	rdlong	local10, fp wz
31124     08 4E 85 F1 | 	sub	fp, #8
31128     B4 00 90 5D |  if_ne	jmp	#LR__4834
3112c     0C 4E 05 F1 | 	add	fp, #12
31130     A7 12 02 FB | 	rdlong	arg01, fp
31134     08 4E 85 F1 | 	sub	fp, #8
31138     A7 26 02 FB | 	rdlong	local01, fp
3113c     04 4E 85 F1 | 	sub	fp, #4
31140     18 26 06 F1 | 	add	local01, #24
31144     13 15 02 FB | 	rdlong	arg02, local01
31148     18 E6 BF FD | 	call	#_fatfs_cc_move_window
3114c     08 4E 05 F1 | 	add	fp, #8
31150     A7 FA 61 FC | 	wrlong	result1, fp
31154     08 4E 85 F1 | 	sub	fp, #8
31158     00 FA 0D F2 | 	cmp	result1, #0 wz
3115c     80 00 90 5D |  if_ne	jmp	#LR__4833
31160     04 4E 05 F1 | 	add	fp, #4
31164     A7 28 02 FB | 	rdlong	local02, fp
31168     04 4E 85 F1 | 	sub	fp, #4
3116c     1C 28 06 F1 | 	add	local02, #28
31170     14 13 02 FB | 	rdlong	arg01, local02
31174     00 14 06 F6 | 	mov	arg02, #0
31178     20 16 06 F6 | 	mov	arg03, #32
3117c     98 00 A0 FD | 	call	#\builtin_bytefill_
31180     04 4E 05 F1 | 	add	fp, #4
31184     A7 14 02 FB | 	rdlong	arg02, fp
31188     0A 27 02 F6 | 	mov	local01, arg02
3118c     1C 26 06 F1 | 	add	local01, #28
31190     13 13 02 FB | 	rdlong	arg01, local01
31194     04 4E 85 F1 | 	sub	fp, #4
31198     20 14 06 F1 | 	add	arg02, #32
3119c     0B 16 06 F6 | 	mov	arg03, #11
311a0     68 68 BF FD | 	call	#__system____builtin_memmove
311a4     04 4E 05 F1 | 	add	fp, #4
311a8     A7 36 02 FB | 	rdlong	local09, fp
311ac     1B 39 02 F6 | 	mov	local10, local09
311b0     1C 38 06 F1 | 	add	local10, #28
311b4     1C 27 02 FB | 	rdlong	local01, local10
311b8     2B 36 06 F1 | 	add	local09, #43
311bc     1B 39 C2 FA | 	rdbyte	local10, local09
311c0     18 38 06 F5 | 	and	local10, #24
311c4     0C 26 06 F1 | 	add	local01, #12
311c8     13 39 42 FC | 	wrbyte	local10, local01
311cc     08 4E 05 F1 | 	add	fp, #8
311d0     A7 38 02 FB | 	rdlong	local10, fp
311d4     0C 4E 85 F1 | 	sub	fp, #12
311d8     03 38 06 F1 | 	add	local10, #3
311dc     1C 03 48 FC | 	wrbyte	#1, local10
311e0                 | LR__4833
311e0                 | LR__4834
311e0                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
311e0                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
311e0                 | ' 
311e0                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
311e0                 | ' 
311e0                 | ' 			fs->wflag = 1;
311e0                 | ' 		}
311e0                 | ' 	}
311e0                 | ' 
311e0                 | ' 	return res;
311e0     08 4E 05 F1 | 	add	fp, #8
311e4     A7 FA 01 FB | 	rdlong	result1, fp
311e8     08 4E 85 F1 | 	sub	fp, #8
311ec                 | LR__4835
311ec     A7 F0 03 F6 | 	mov	ptra, fp
311f0     B2 00 A0 FD | 	call	#popregs_
311f4                 | _fatfs_cc_dir_register_ret
311f4     2D 00 64 FD | 	ret
311f8                 | 
311f8                 | _fatfs_cc_dir_remove
311f8     05 4A 05 F6 | 	mov	COUNT_, #5
311fc     A8 00 A0 FD | 	call	#pushregs_
31200     09 27 02 F6 | 	mov	local01, arg01
31204     13 29 02 FB | 	rdlong	local02, local01
31208     10 26 06 F1 | 	add	local01, #16
3120c     13 2B 02 FB | 	rdlong	local03, local01
31210     1C 26 06 F1 | 	add	local01, #28
31214     13 15 02 FB | 	rdlong	arg02, local01
31218     2C 26 86 F1 | 	sub	local01, #44
3121c     FF FF 7F FF 
31220     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
31224     00 2C 06 A6 |  if_e	mov	local04, #0
31228     18 00 90 AD |  if_e	jmp	#LR__4840
3122c     13 13 02 F6 | 	mov	arg01, local01
31230     2C 26 06 F1 | 	add	local01, #44
31234     13 15 02 FB | 	rdlong	arg02, local01
31238     2C 26 86 F1 | 	sub	local01, #44
3123c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
31240     FD 2C 02 F6 | 	mov	local04, result1
31244                 | LR__4840
31244     16 2F 0A F6 | 	mov	local05, local04 wz
31248     64 00 90 5D |  if_ne	jmp	#LR__4843
3124c                 | ' 		do {
3124c                 | LR__4841
3124c     18 26 06 F1 | 	add	local01, #24
31250     13 15 02 FB | 	rdlong	arg02, local01
31254     18 26 86 F1 | 	sub	local01, #24
31258     14 13 02 F6 | 	mov	arg01, local02
3125c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
31260     FD 2E 0A F6 | 	mov	local05, result1 wz
31264     40 00 90 5D |  if_ne	jmp	#LR__4842
31268     1C 26 06 F1 | 	add	local01, #28
3126c     13 2D 02 FB | 	rdlong	local04, local01
31270     16 CB 49 FC | 	wrbyte	#229, local04
31274     03 28 06 F1 | 	add	local02, #3
31278     14 03 48 FC | 	wrbyte	#1, local02
3127c     03 28 86 F1 | 	sub	local02, #3
31280     0C 26 86 F1 | 	sub	local01, #12
31284     13 2D 02 FB | 	rdlong	local04, local01
31288     10 26 86 F1 | 	sub	local01, #16
3128c     15 2D 12 F2 | 	cmp	local04, local03 wc
31290     14 00 90 3D |  if_ae	jmp	#LR__4842
31294     13 13 02 F6 | 	mov	arg01, local01
31298     00 14 06 F6 | 	mov	arg02, #0
3129c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
312a0     FD 2E 0A F6 | 	mov	local05, result1 wz
312a4     A4 FF 9F AD |  if_e	jmp	#LR__4841
312a8                 | LR__4842
312a8     04 2E 0E F2 | 	cmp	local05, #4 wz
312ac     02 2E 06 A6 |  if_e	mov	local05, #2
312b0                 | LR__4843
312b0                 | ' 	}
312b0                 | ' #line 2590 "ff.c"
312b0                 | ' 	return res;
312b0     17 FB 01 F6 | 	mov	result1, local05
312b4     A7 F0 03 F6 | 	mov	ptra, fp
312b8     B2 00 A0 FD | 	call	#popregs_
312bc                 | _fatfs_cc_dir_remove_ret
312bc     2D 00 64 FD | 	ret
312c0                 | 
312c0                 | _fatfs_cc_get_fileinfo
312c0     0F 4A 05 F6 | 	mov	COUNT_, #15
312c4     A8 00 A0 FD | 	call	#pushregs_
312c8     09 27 02 F6 | 	mov	local01, arg01
312cc     0A 29 02 F6 | 	mov	local02, arg02
312d0     13 2B 02 FB | 	rdlong	local03, local01
312d4     1C 28 06 F1 | 	add	local02, #28
312d8     14 01 48 FC | 	wrbyte	#0, local02
312dc     1C 28 86 F1 | 	sub	local02, #28
312e0     18 26 06 F1 | 	add	local01, #24
312e4     13 2D 0A FB | 	rdlong	local04, local01 wz
312e8     18 26 86 F1 | 	sub	local01, #24
312ec     90 03 90 AD |  if_e	jmp	#LR__4864
312f0     2C 26 06 F1 | 	add	local01, #44
312f4     13 2D 02 FB | 	rdlong	local04, local01
312f8     2C 26 86 F1 | 	sub	local01, #44
312fc     FF FF 7F FF 
31300     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
31304     D8 00 90 AD |  if_e	jmp	#LR__4853
31308     00 2E 06 F6 | 	mov	local05, #0
3130c     00 30 06 F6 | 	mov	local06, #0
31310     00 32 06 F6 | 	mov	local07, #0
31314                 | ' 			si = di = 0;
31314                 | ' 			hs = 0;
31314                 | ' 			while (fs->lfnbuf[si] != 0) {
31314                 | LR__4850
31314     0C 2A 06 F1 | 	add	local03, #12
31318     15 2D 02 FB | 	rdlong	local04, local03
3131c     0C 2A 86 F1 | 	sub	local03, #12
31320     18 35 02 F6 | 	mov	local08, local06
31324     01 34 66 F0 | 	shl	local08, #1
31328     16 35 02 F1 | 	add	local08, local04
3132c     1A 2D EA FA | 	rdword	local04, local08 wz
31330     90 00 90 AD |  if_e	jmp	#LR__4852
31334     0C 2A 06 F1 | 	add	local03, #12
31338     15 37 02 FB | 	rdlong	local09, local03
3133c     0C 2A 86 F1 | 	sub	local03, #12
31340     18 39 02 F6 | 	mov	local10, local06
31344     01 38 66 F0 | 	shl	local10, #1
31348     1B 39 02 F1 | 	add	local10, local09
3134c     1C 3B E2 FA | 	rdword	local11, local10
31350     19 2D 02 F6 | 	mov	local04, local07
31354     0F 2C 4E F7 | 	zerox	local04, #15 wz
31358     01 30 06 F1 | 	add	local06, #1
3135c     24 00 90 5D |  if_ne	jmp	#LR__4851
31360     1D 3D 32 F9 | 	getword	local12, local11, #0
31364     6C 00 00 FF 
31368     00 3C 16 F2 | 	cmp	local12, ##55296 wc
3136c     14 00 90 CD |  if_b	jmp	#LR__4851
31370     1D 3F 32 F9 | 	getword	local13, local11, #0
31374     70 00 00 FF 
31378     00 3E 16 F2 | 	cmp	local13, ##57344 wc
3137c     1D 33 02 C6 |  if_b	mov	local07, local11
31380                 | ' 					hs = wc; continue;
31380     90 FF 9F CD |  if_b	jmp	#LR__4850
31384                 | LR__4851
31384     19 13 32 F9 | 	getword	arg01, local07, #0
31388     10 12 66 F0 | 	shl	arg01, #16
3138c     1D 3B 32 F9 | 	getword	local11, local11, #0
31390     1D 13 42 F5 | 	or	arg01, local11
31394     17 15 02 F6 | 	mov	arg02, local05
31398     1C 28 06 F1 | 	add	local02, #28
3139c     14 15 02 F1 | 	add	arg02, local02
313a0     FF 16 06 F6 | 	mov	arg03, #255
313a4     17 17 82 F1 | 	sub	arg03, local05
313a8     1C 28 86 F1 | 	sub	local02, #28
313ac     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
313b0     FD 40 0A F6 | 	mov	local14, result1 wz
313b4     00 2E 06 A6 |  if_e	mov	local05, #0
313b8     20 2F 02 51 |  if_ne	add	local05, local14
313bc     00 32 06 56 |  if_ne	mov	local07, #0
313c0     50 FF 9F 5D |  if_ne	jmp	#LR__4850
313c4                 | LR__4852
313c4     19 2D 02 F6 | 	mov	local04, local07
313c8     0F 2C 4E F7 | 	zerox	local04, #15 wz
313cc     00 2E 06 56 |  if_ne	mov	local05, #0
313d0     1C 28 06 F1 | 	add	local02, #28
313d4     14 2F 02 F1 | 	add	local05, local02
313d8     17 01 48 FC | 	wrbyte	#0, local05
313dc     1C 28 86 F1 | 	sub	local02, #28
313e0                 | LR__4853
313e0     00 2E 06 F6 | 	mov	local05, #0
313e4     00 30 06 F6 | 	mov	local06, #0
313e8                 | ' 			fno->fname[di] = 0;
313e8                 | ' 		}
313e8                 | ' 	}
313e8                 | ' 
313e8                 | ' 	si = di = 0;
313e8                 | ' 	while (si < 11) {
313e8                 | LR__4854
313e8     0B 30 16 F2 | 	cmp	local06, #11 wc
313ec     20 01 90 3D |  if_ae	jmp	#LR__4857
313f0     1C 26 06 F1 | 	add	local01, #28
313f4     13 37 02 FB | 	rdlong	local09, local01
313f8     1C 26 86 F1 | 	sub	local01, #28
313fc     18 39 02 F6 | 	mov	local10, local06
31400     1B 39 02 F1 | 	add	local10, local09
31404     1C 3B C2 FA | 	rdbyte	local11, local10
31408     1D 2D 32 F9 | 	getword	local04, local11, #0
3140c     20 2C 0E F2 | 	cmp	local04, #32 wz
31410     01 30 06 F1 | 	add	local06, #1
31414     D0 FF 9F AD |  if_e	jmp	#LR__4854
31418     1D 2D 32 F9 | 	getword	local04, local11, #0
3141c     05 2C 0E F2 | 	cmp	local04, #5 wz
31420     E5 3A 06 A6 |  if_e	mov	local11, #229
31424     09 30 0E F2 | 	cmp	local06, #9 wz
31428     20 00 90 5D |  if_ne	jmp	#LR__4855
3142c     0C 2E 16 F2 | 	cmp	local05, #12 wc
31430     18 00 90 3D |  if_ae	jmp	#LR__4855
31434     17 3F 02 F6 | 	mov	local13, local05
31438     0C 28 06 F1 | 	add	local02, #12
3143c     14 3F 02 F1 | 	add	local13, local02
31440     1F 5D 48 FC | 	wrbyte	#46, local13
31444     01 2E 06 F1 | 	add	local05, #1
31448     0C 28 86 F1 | 	sub	local02, #12
3144c                 | LR__4855
3144c     1D 13 32 F9 | 	getword	arg01, local11, #0
31450     07 12 4E F7 | 	zerox	arg01, #7 wz
31454     00 FA 05 56 |  if_ne	mov	result1, #0
31458                 | ' 
31458                 | ' 	return 0;
31458     00 FA 05 A6 |  if_e	mov	result1, #0
3145c     00 FA 0D F2 | 	cmp	result1, #0 wz
31460     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
31464     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
31468     50 00 90 AD |  if_e	jmp	#LR__4856
3146c     1C 26 06 F1 | 	add	local01, #28
31470     13 39 02 FB | 	rdlong	local10, local01
31474     1C 26 86 F1 | 	sub	local01, #28
31478     18 35 02 F6 | 	mov	local08, local06
3147c     1C 35 02 F1 | 	add	local08, local10
31480     1A 13 CA FA | 	rdbyte	arg01, local08 wz
31484     00 FA 05 56 |  if_ne	mov	result1, #0
31488                 | ' 
31488                 | ' 	return 0;
31488     00 FA 05 A6 |  if_e	mov	result1, #0
3148c     00 FA 0D F2 | 	cmp	result1, #0 wz
31490     28 00 90 AD |  if_e	jmp	#LR__4856
31494     1D 3B 32 F9 | 	getword	local11, local11, #0
31498     08 3A 66 F0 | 	shl	local11, #8
3149c     1C 26 06 F1 | 	add	local01, #28
314a0     13 41 02 FB | 	rdlong	local14, local01
314a4     1C 26 86 F1 | 	sub	local01, #28
314a8     18 37 02 F6 | 	mov	local09, local06
314ac     20 37 02 F1 | 	add	local09, local14
314b0     1B 3D C2 FA | 	rdbyte	local12, local09
314b4     1E 3B 42 F5 | 	or	local11, local12
314b8     01 30 06 F1 | 	add	local06, #1
314bc                 | LR__4856
314bc     1D 13 02 F6 | 	mov	arg01, local11
314c0     01 00 00 FF 
314c4     52 15 06 F6 | 	mov	arg02, ##850
314c8     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
314cc     FD 3A 02 F6 | 	mov	local11, result1
314d0     1D 2D 02 F6 | 	mov	local04, local11
314d4     0F 2C 4E F7 | 	zerox	local04, #15 wz
314d8     00 2E 06 A6 |  if_e	mov	local05, #0
314dc     30 00 90 AD |  if_e	jmp	#LR__4857
314e0     1D 13 32 F9 | 	getword	arg01, local11, #0
314e4     17 15 02 F6 | 	mov	arg02, local05
314e8     0C 28 06 F1 | 	add	local02, #12
314ec     14 15 02 F1 | 	add	arg02, local02
314f0     0C 16 06 F6 | 	mov	arg03, #12
314f4     17 17 82 F1 | 	sub	arg03, local05
314f8     0C 28 86 F1 | 	sub	local02, #12
314fc     EC DF BF FD | 	call	#_fatfs_cc_put_utf
31500     FD 40 0A F6 | 	mov	local14, result1 wz
31504     00 2E 06 A6 |  if_e	mov	local05, #0
31508     20 2F 02 51 |  if_ne	add	local05, local14
3150c     D8 FE 9F 5D |  if_ne	jmp	#LR__4854
31510                 | LR__4857
31510     17 2D 02 F6 | 	mov	local04, local05
31514     0C 28 06 F1 | 	add	local02, #12
31518     14 2D 02 F1 | 	add	local04, local02
3151c     16 01 48 FC | 	wrbyte	#0, local04
31520     10 28 06 F1 | 	add	local02, #16
31524     14 2D CA FA | 	rdbyte	local04, local02 wz
31528     1C 28 86 F1 | 	sub	local02, #28
3152c     F8 00 90 5D |  if_ne	jmp	#LR__4863
31530     00 2E 0E F2 | 	cmp	local05, #0 wz
31534     1C 00 90 5D |  if_ne	jmp	#LR__4858
31538     17 3F 02 F6 | 	mov	local13, local05
3153c     1C 28 06 F1 | 	add	local02, #28
31540     14 3F 02 F1 | 	add	local13, local02
31544     1F 7F 48 FC | 	wrbyte	#63, local13
31548     01 2E 06 F1 | 	add	local05, #1
3154c     1C 28 86 F1 | 	sub	local02, #28
31550     A4 00 90 FD | 	jmp	#LR__4862
31554                 | LR__4858
31554                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
31554     00 2E 06 F6 | 	mov	local05, #0
31558     00 30 06 F6 | 	mov	local06, #0
3155c     08 42 06 F6 | 	mov	local15, #8
31560                 | LR__4859
31560     18 2D 02 F6 | 	mov	local04, local06
31564     0C 28 06 F1 | 	add	local02, #12
31568     14 2D 02 F1 | 	add	local04, local02
3156c     16 3F CA FA | 	rdbyte	local13, local04 wz
31570     0C 28 86 F1 | 	sub	local02, #12
31574     80 00 90 AD |  if_e	jmp	#LR__4861
31578     18 35 02 F6 | 	mov	local08, local06
3157c     0C 28 06 F1 | 	add	local02, #12
31580     14 35 02 F1 | 	add	local08, local02
31584     1A 3B C2 FA | 	rdbyte	local11, local08
31588     1D 41 32 F9 | 	getword	local14, local11, #0
3158c     2E 40 0E F2 | 	cmp	local14, #46 wz
31590     0C 28 86 F1 | 	sub	local02, #12
31594     10 42 06 A6 |  if_e	mov	local15, #16
31598     1D 41 32 F9 | 	getword	local14, local11, #0
3159c     41 40 16 F2 | 	cmp	local14, #65 wc
315a0     30 00 90 CD |  if_b	jmp	#LR__4860
315a4     1D 35 32 F9 | 	getword	local08, local11, #0
315a8     5B 34 16 F2 | 	cmp	local08, #91 wc
315ac     24 00 90 3D |  if_ae	jmp	#LR__4860
315b0     1C 26 06 F1 | 	add	local01, #28
315b4     13 37 02 FB | 	rdlong	local09, local01
315b8     1C 26 86 F1 | 	sub	local01, #28
315bc     0C 36 06 F1 | 	add	local09, #12
315c0     1B 39 C2 FA | 	rdbyte	local10, local09
315c4     21 41 E2 F8 | 	getbyte	local14, local15, #0
315c8     20 39 CA F7 | 	test	local10, local14 wz
315cc     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
315d0     20 3A 06 51 |  if_ne	add	local11, #32
315d4                 | LR__4860
315d4     17 41 02 F6 | 	mov	local14, local05
315d8     1C 28 06 F1 | 	add	local02, #28
315dc     14 41 02 F1 | 	add	local14, local02
315e0     1D 3B 32 F9 | 	getword	local11, local11, #0
315e4     20 3B 42 FC | 	wrbyte	local11, local14
315e8     01 30 06 F1 | 	add	local06, #1
315ec     01 2E 06 F1 | 	add	local05, #1
315f0     1C 28 86 F1 | 	sub	local02, #28
315f4     68 FF 9F FD | 	jmp	#LR__4859
315f8                 | LR__4861
315f8                 | LR__4862
315f8     1C 28 06 F1 | 	add	local02, #28
315fc     14 2F 02 F1 | 	add	local05, local02
31600     17 01 48 FC | 	wrbyte	#0, local05
31604     1C 26 06 F1 | 	add	local01, #28
31608     13 2D 02 FB | 	rdlong	local04, local01
3160c     1C 26 86 F1 | 	sub	local01, #28
31610     0C 2C 06 F1 | 	add	local04, #12
31614     16 3F CA FA | 	rdbyte	local13, local04 wz
31618     1C 28 86 F1 | 	sub	local02, #28
3161c     0C 28 06 A1 |  if_e	add	local02, #12
31620     14 01 48 AC |  if_e	wrbyte	#0, local02
31624     0C 28 86 A1 |  if_e	sub	local02, #12
31628                 | LR__4863
31628     1C 26 06 F1 | 	add	local01, #28
3162c     13 3D 02 FB | 	rdlong	local12, local01
31630     0B 3C 06 F1 | 	add	local12, #11
31634     1E 2D C2 FA | 	rdbyte	local04, local12
31638     3F 2C 06 F5 | 	and	local04, #63
3163c     08 28 06 F1 | 	add	local02, #8
31640     14 2D 42 FC | 	wrbyte	local04, local02
31644     08 28 86 F1 | 	sub	local02, #8
31648     13 13 02 FB | 	rdlong	arg01, local01
3164c     1C 12 06 F1 | 	add	arg01, #28
31650                 | ' {
31650                 | ' 
31650                 | ' 	return *((DWORD*)ptr);
31650     09 FB 01 FB | 	rdlong	result1, arg01
31654     14 FB 61 FC | 	wrlong	result1, local02
31658     13 13 02 FB | 	rdlong	arg01, local01
3165c     16 12 06 F1 | 	add	arg01, #22
31660                 | ' {
31660                 | ' 
31660                 | ' 	return *((WORD*)ptr);
31660     09 FB E1 FA | 	rdword	result1, arg01
31664     06 28 06 F1 | 	add	local02, #6
31668     14 FB 51 FC | 	wrword	result1, local02
3166c     13 13 02 FB | 	rdlong	arg01, local01
31670     18 12 06 F1 | 	add	arg01, #24
31674                 | ' {
31674                 | ' 
31674                 | ' 	return *((WORD*)ptr);
31674     09 FB E1 FA | 	rdword	result1, arg01
31678     02 28 86 F1 | 	sub	local02, #2
3167c     14 FB 51 FC | 	wrword	result1, local02
31680                 | LR__4864
31680     A7 F0 03 F6 | 	mov	ptra, fp
31684     B2 00 A0 FD | 	call	#popregs_
31688                 | _fatfs_cc_get_fileinfo_ret
31688     2D 00 64 FD | 	ret
3168c                 | 
3168c                 | _fatfs_cc_create_name
3168c     0D 4A 05 F6 | 	mov	COUNT_, #13
31690     A8 00 A0 FD | 	call	#pushregs_
31694     34 F0 07 F1 | 	add	ptra, #52
31698     04 4E 05 F1 | 	add	fp, #4
3169c     A7 12 62 FC | 	wrlong	arg01, fp
316a0     04 4E 05 F1 | 	add	fp, #4
316a4     A7 14 62 FC | 	wrlong	arg02, fp
316a8     0A FB 01 FB | 	rdlong	result1, arg02
316ac     28 4E 05 F1 | 	add	fp, #40
316b0     A7 FA 61 FC | 	wrlong	result1, fp
316b4     2C 4E 85 F1 | 	sub	fp, #44
316b8     A7 FA 01 FB | 	rdlong	result1, fp
316bc     FD 26 02 FB | 	rdlong	local01, result1
316c0     0C 26 06 F1 | 	add	local01, #12
316c4     13 29 02 FB | 	rdlong	local02, local01
316c8     14 4E 05 F1 | 	add	fp, #20
316cc     A7 28 62 FC | 	wrlong	local02, fp
316d0     14 4E 05 F1 | 	add	fp, #20
316d4     A7 00 68 FC | 	wrlong	#0, fp
316d8     2C 4E 85 F1 | 	sub	fp, #44
316dc                 | ' 
316dc                 | ' 
316dc                 | ' 
316dc                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
316dc                 | ' 	for (;;) {
316dc                 | LR__4870
316dc     30 4E 05 F1 | 	add	fp, #48
316e0     A7 12 02 F6 | 	mov	arg01, fp
316e4     30 4E 85 F1 | 	sub	fp, #48
316e8     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
316ec     1C 4E 05 F1 | 	add	fp, #28
316f0     A7 FA 61 FC | 	wrlong	result1, fp
316f4     1C 4E 85 F1 | 	sub	fp, #28
316f8     FF FF 7F FF 
316fc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
31700     06 FA 05 A6 |  if_e	mov	result1, #6
31704     74 08 90 AD |  if_e	jmp	#LR__4910
31708     1C 4E 05 F1 | 	add	fp, #28
3170c     A7 26 02 FB | 	rdlong	local01, fp
31710     1C 4E 85 F1 | 	sub	fp, #28
31714     80 00 00 FF 
31718     00 26 16 F2 | 	cmp	local01, ##65536 wc
3171c     3C 00 90 CD |  if_b	jmp	#LR__4871
31720     18 4E 05 F1 | 	add	fp, #24
31724     A7 2A 02 FB | 	rdlong	local03, fp
31728     14 4E 05 F1 | 	add	fp, #20
3172c     A7 26 02 FB | 	rdlong	local01, fp
31730     13 2D 02 F6 | 	mov	local04, local01
31734     01 2C 06 F1 | 	add	local04, #1
31738     A7 2C 62 FC | 	wrlong	local04, fp
3173c     01 26 66 F0 | 	shl	local01, #1
31740     15 27 02 F1 | 	add	local01, local03
31744     10 4E 85 F1 | 	sub	fp, #16
31748     A7 2E 02 FB | 	rdlong	local05, fp
3174c     1C 4E 85 F1 | 	sub	fp, #28
31750     17 31 02 F6 | 	mov	local06, local05
31754     10 30 46 F0 | 	shr	local06, #16
31758     13 31 52 FC | 	wrword	local06, local01
3175c                 | LR__4871
3175c     1C 4E 05 F1 | 	add	fp, #28
31760     A7 26 02 FB | 	rdlong	local01, fp
31764     08 4E 85 F1 | 	sub	fp, #8
31768     A7 26 52 FC | 	wrword	local01, fp
3176c     A7 26 E2 FA | 	rdword	local01, fp
31770     14 4E 85 F1 | 	sub	fp, #20
31774     20 26 16 F2 | 	cmp	local01, #32 wc
31778     B0 00 90 CD |  if_b	jmp	#LR__4873
3177c     14 4E 05 F1 | 	add	fp, #20
31780     A7 26 E2 FA | 	rdword	local01, fp
31784     14 4E 85 F1 | 	sub	fp, #20
31788     2F 26 0E F2 | 	cmp	local01, #47 wz
3178c     14 4E 05 51 |  if_ne	add	fp, #20
31790     A7 2C E2 5A |  if_ne	rdword	local04, fp
31794     14 4E 85 51 |  if_ne	sub	fp, #20
31798     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
3179c     8C 00 90 AD |  if_e	jmp	#LR__4873
317a0     14 4E 05 F1 | 	add	fp, #20
317a4     A7 12 E2 FA | 	rdword	arg01, fp
317a8     14 4E 85 F1 | 	sub	fp, #20
317ac     80 12 16 F2 | 	cmp	arg01, #128 wc
317b0     24 00 90 3D |  if_ae	jmp	#LR__4872
317b4     BB 01 00 FF 
317b8     EC 12 06 F6 | 	mov	arg01, ##@LR__5532
317bc     14 4E 05 F1 | 	add	fp, #20
317c0     A7 14 E2 FA | 	rdword	arg02, fp
317c4     14 4E 85 F1 | 	sub	fp, #20
317c8     FC D0 BF FD | 	call	#_fatfs_cc_strchr
317cc     00 FA 0D F2 | 	cmp	result1, #0 wz
317d0     06 FA 05 56 |  if_ne	mov	result1, #6
317d4     A4 07 90 5D |  if_ne	jmp	#LR__4910
317d8                 | LR__4872
317d8     2C 4E 05 F1 | 	add	fp, #44
317dc     A7 30 02 FB | 	rdlong	local06, fp
317e0     2C 4E 85 F1 | 	sub	fp, #44
317e4     FF 30 16 F2 | 	cmp	local06, #255 wc
317e8     06 FA 05 36 |  if_ae	mov	result1, #6
317ec     8C 07 90 3D |  if_ae	jmp	#LR__4910
317f0     18 4E 05 F1 | 	add	fp, #24
317f4     A7 2A 02 FB | 	rdlong	local03, fp
317f8     14 4E 05 F1 | 	add	fp, #20
317fc     A7 28 02 FB | 	rdlong	local02, fp
31800     14 2D 02 F6 | 	mov	local04, local02
31804     01 2C 06 F1 | 	add	local04, #1
31808     A7 2C 62 FC | 	wrlong	local04, fp
3180c     14 27 02 F6 | 	mov	local01, local02
31810     01 26 66 F0 | 	shl	local01, #1
31814     15 27 02 F1 | 	add	local01, local03
31818     18 4E 85 F1 | 	sub	fp, #24
3181c     A7 30 E2 FA | 	rdword	local06, fp
31820     14 4E 85 F1 | 	sub	fp, #20
31824     13 31 52 FC | 	wrword	local06, local01
31828     B0 FE 9F FD | 	jmp	#LR__4870
3182c                 | LR__4873
3182c     14 4E 05 F1 | 	add	fp, #20
31830     A7 32 E2 FA | 	rdword	local07, fp
31834     14 4E 85 F1 | 	sub	fp, #20
31838     20 32 16 F2 | 	cmp	local07, #32 wc
3183c     10 4E 05 C1 |  if_b	add	fp, #16
31840     A7 08 48 CC |  if_b	wrbyte	#4, fp
31844     10 4E 85 C1 |  if_b	sub	fp, #16
31848     74 00 90 CD |  if_b	jmp	#LR__4878
3184c     97 24 48 FB | 	callpa	#(@LR__4876-@LR__4874)>>2,fcache_load_ptr_
31850                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
31850                 | LR__4874
31850     30 4E 05 F1 | 	add	fp, #48
31854     A7 2C 02 FB | 	rdlong	local04, fp
31858     30 4E 85 F1 | 	sub	fp, #48
3185c     16 33 C2 FA | 	rdbyte	local07, local04
31860     2F 32 0E F2 | 	cmp	local07, #47 wz
31864     18 00 90 AD |  if_e	jmp	#LR__4875
31868     30 4E 05 F1 | 	add	fp, #48
3186c     A7 2C 02 FB | 	rdlong	local04, fp
31870     30 4E 85 F1 | 	sub	fp, #48
31874     16 29 C2 FA | 	rdbyte	local02, local04
31878     5C 28 0E F2 | 	cmp	local02, #92 wz
3187c     18 00 90 5D |  if_ne	jmp	#LR__4877
31880                 | LR__4875
31880     30 4E 05 F1 | 	add	fp, #48
31884     A7 26 02 FB | 	rdlong	local01, fp
31888     01 26 06 F1 | 	add	local01, #1
3188c     A7 26 62 FC | 	wrlong	local01, fp
31890     30 4E 85 F1 | 	sub	fp, #48
31894     B8 FF 9F FD | 	jmp	#LR__4874
31898                 | LR__4876
31898                 | LR__4877
31898     10 4E 05 F1 | 	add	fp, #16
3189c     A7 00 48 FC | 	wrbyte	#0, fp
318a0     20 4E 05 F1 | 	add	fp, #32
318a4     A7 30 02 FB | 	rdlong	local06, fp
318a8     30 4E 85 F1 | 	sub	fp, #48
318ac     18 33 C2 FA | 	rdbyte	local07, local06
318b0     20 32 16 F2 | 	cmp	local07, #32 wc
318b4     10 4E 05 C1 |  if_b	add	fp, #16
318b8     A7 08 48 CC |  if_b	wrbyte	#4, fp
318bc     10 4E 85 C1 |  if_b	sub	fp, #16
318c0                 | LR__4878
318c0     08 4E 05 F1 | 	add	fp, #8
318c4     A7 32 02 FB | 	rdlong	local07, fp
318c8     28 4E 05 F1 | 	add	fp, #40
318cc     A7 26 02 FB | 	rdlong	local01, fp
318d0     30 4E 85 F1 | 	sub	fp, #48
318d4     19 27 62 FC | 	wrlong	local01, local07
318d8     97 38 48 FB | 	callpa	#(@LR__4880-@LR__4879)>>2,fcache_load_ptr_
318dc                 | ' 	}
318dc                 | ' 	*path = p;
318dc                 | ' #line 2862 "ff.c"
318dc                 | ' 	while (di) {
318dc                 | LR__4879
318dc     2C 4E 05 F1 | 	add	fp, #44
318e0     A7 32 0A FB | 	rdlong	local07, fp wz
318e4     2C 4E 85 F1 | 	sub	fp, #44
318e8     60 00 90 AD |  if_e	jmp	#LR__4881
318ec     18 4E 05 F1 | 	add	fp, #24
318f0     A7 30 02 FB | 	rdlong	local06, fp
318f4     14 4E 05 F1 | 	add	fp, #20
318f8     A7 2C 02 FB | 	rdlong	local04, fp
318fc     01 2C 86 F1 | 	sub	local04, #1
31900     01 2C 66 F0 | 	shl	local04, #1
31904     18 2D 02 F1 | 	add	local04, local06
31908     16 31 E2 FA | 	rdword	local06, local04
3190c     18 4E 85 F1 | 	sub	fp, #24
31910     A7 30 52 FC | 	wrword	local06, fp
31914     A7 32 E2 FA | 	rdword	local07, fp
31918     14 4E 85 F1 | 	sub	fp, #20
3191c     20 32 0E F2 | 	cmp	local07, #32 wz
31920     14 4E 05 51 |  if_ne	add	fp, #20
31924     A7 26 E2 5A |  if_ne	rdword	local01, fp
31928     14 4E 85 51 |  if_ne	sub	fp, #20
3192c     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
31930     18 00 90 5D |  if_ne	jmp	#LR__4881
31934     2C 4E 05 F1 | 	add	fp, #44
31938     A7 26 02 FB | 	rdlong	local01, fp
3193c     01 26 86 F1 | 	sub	local01, #1
31940     A7 26 62 FC | 	wrlong	local01, fp
31944     2C 4E 85 F1 | 	sub	fp, #44
31948     90 FF 9F FD | 	jmp	#LR__4879
3194c                 | LR__4880
3194c                 | LR__4881
3194c     18 4E 05 F1 | 	add	fp, #24
31950     A7 34 02 FB | 	rdlong	local08, fp
31954     14 4E 05 F1 | 	add	fp, #20
31958     A7 2C 02 FB | 	rdlong	local04, fp
3195c     01 2C 66 F0 | 	shl	local04, #1
31960     1A 2D 02 F1 | 	add	local04, local08
31964     16 01 58 FC | 	wrword	#0, local04
31968     A7 32 0A FB | 	rdlong	local07, fp wz
3196c     2C 4E 85 F1 | 	sub	fp, #44
31970     06 FA 05 A6 |  if_e	mov	result1, #6
31974     04 06 90 AD |  if_e	jmp	#LR__4910
31978                 | ' 
31978                 | ' 
31978                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
31978     28 4E 05 F1 | 	add	fp, #40
3197c     A7 00 68 FC | 	wrlong	#0, fp
31980     28 4E 85 F1 | 	sub	fp, #40
31984     97 22 48 FB | 	callpa	#(@LR__4883-@LR__4882)>>2,fcache_load_ptr_
31988                 | LR__4882
31988     18 4E 05 F1 | 	add	fp, #24
3198c     A7 36 02 FB | 	rdlong	local09, fp
31990     10 4E 05 F1 | 	add	fp, #16
31994     A7 38 02 FB | 	rdlong	local10, fp
31998     28 4E 85 F1 | 	sub	fp, #40
3199c     01 38 66 F0 | 	shl	local10, #1
319a0     1B 39 02 F1 | 	add	local10, local09
319a4     1C 3B E2 FA | 	rdword	local11, local10
319a8     20 3A 0E F2 | 	cmp	local11, #32 wz
319ac     1C 00 90 5D |  if_ne	jmp	#LR__4884
319b0     28 4E 05 F1 | 	add	fp, #40
319b4     A7 3C 02 FB | 	rdlong	local12, fp
319b8     1E 2F 02 F6 | 	mov	local05, local12
319bc     01 2E 06 F1 | 	add	local05, #1
319c0     A7 2E 62 FC | 	wrlong	local05, fp
319c4     28 4E 85 F1 | 	sub	fp, #40
319c8     BC FF 9F FD | 	jmp	#LR__4882
319cc                 | LR__4883
319cc                 | LR__4884
319cc     28 4E 05 F1 | 	add	fp, #40
319d0     A7 32 02 FB | 	rdlong	local07, fp
319d4     28 4E 85 F1 | 	sub	fp, #40
319d8     01 32 16 F2 | 	cmp	local07, #1 wc
319dc     28 00 90 3D |  if_ae	jmp	#LR__4885
319e0     18 4E 05 F1 | 	add	fp, #24
319e4     A7 2A 02 FB | 	rdlong	local03, fp
319e8     10 4E 05 F1 | 	add	fp, #16
319ec     A7 36 02 FB | 	rdlong	local09, fp
319f0     28 4E 85 F1 | 	sub	fp, #40
319f4     01 36 66 F0 | 	shl	local09, #1
319f8     15 37 02 F1 | 	add	local09, local03
319fc     1B 27 E2 FA | 	rdword	local01, local09
31a00     2E 26 0E F2 | 	cmp	local01, #46 wz
31a04     14 00 90 5D |  if_ne	jmp	#LR__4886
31a08                 | LR__4885
31a08     10 4E 05 F1 | 	add	fp, #16
31a0c     A7 32 C2 FA | 	rdbyte	local07, fp
31a10     03 32 46 F5 | 	or	local07, #3
31a14     A7 32 42 FC | 	wrbyte	local07, fp
31a18     10 4E 85 F1 | 	sub	fp, #16
31a1c                 | LR__4886
31a1c     97 2C 48 FB | 	callpa	#(@LR__4888-@LR__4887)>>2,fcache_load_ptr_
31a20                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
31a20                 | LR__4887
31a20     2C 4E 05 F1 | 	add	fp, #44
31a24     A7 32 02 FB | 	rdlong	local07, fp
31a28     2C 4E 85 F1 | 	sub	fp, #44
31a2c     01 32 16 F2 | 	cmp	local07, #1 wc
31a30     44 00 90 CD |  if_b	jmp	#LR__4889
31a34     18 4E 05 F1 | 	add	fp, #24
31a38     A7 30 02 FB | 	rdlong	local06, fp
31a3c     14 4E 05 F1 | 	add	fp, #20
31a40     A7 2A 02 FB | 	rdlong	local03, fp
31a44     2C 4E 85 F1 | 	sub	fp, #44
31a48     01 2A 86 F1 | 	sub	local03, #1
31a4c     01 2A 66 F0 | 	shl	local03, #1
31a50     18 2B 02 F1 | 	add	local03, local06
31a54     15 27 E2 FA | 	rdword	local01, local03
31a58     2E 26 0E F2 | 	cmp	local01, #46 wz
31a5c     18 00 90 AD |  if_e	jmp	#LR__4889
31a60     2C 4E 05 F1 | 	add	fp, #44
31a64     A7 26 02 FB | 	rdlong	local01, fp
31a68     01 26 86 F1 | 	sub	local01, #1
31a6c     A7 26 62 FC | 	wrlong	local01, fp
31a70     2C 4E 85 F1 | 	sub	fp, #44
31a74     A8 FF 9F FD | 	jmp	#LR__4887
31a78                 | LR__4888
31a78                 | LR__4889
31a78     04 4E 05 F1 | 	add	fp, #4
31a7c     A7 12 02 FB | 	rdlong	arg01, fp
31a80     04 4E 85 F1 | 	sub	fp, #4
31a84     20 12 06 F1 | 	add	arg01, #32
31a88     20 14 06 F6 | 	mov	arg02, #32
31a8c     0B 16 06 F6 | 	mov	arg03, #11
31a90     09 3F 02 F6 | 	mov	local13, arg01
31a94     98 00 A0 FD | 	call	#\builtin_bytefill_
31a98     1F FB 01 F6 | 	mov	result1, local13
31a9c     0C 4E 05 F1 | 	add	fp, #12
31aa0     A7 00 48 FC | 	wrbyte	#0, fp
31aa4     A7 32 C2 FA | 	rdbyte	local07, fp
31aa8     14 4E 05 F1 | 	add	fp, #20
31aac     A7 32 62 FC | 	wrlong	local07, fp
31ab0     04 4E 05 F1 | 	add	fp, #4
31ab4     A7 10 68 FC | 	wrlong	#8, fp
31ab8     24 4E 85 F1 | 	sub	fp, #36
31abc                 | ' 
31abc                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
31abc                 | ' 	i = b = 0; ni = 8;
31abc                 | ' 	for (;;) {
31abc                 | LR__4890
31abc     18 4E 05 F1 | 	add	fp, #24
31ac0     A7 2A 02 FB | 	rdlong	local03, fp
31ac4     10 4E 05 F1 | 	add	fp, #16
31ac8     A7 36 02 FB | 	rdlong	local09, fp
31acc     1B 2D 02 F6 | 	mov	local04, local09
31ad0     01 2C 06 F1 | 	add	local04, #1
31ad4     A7 2C 62 FC | 	wrlong	local04, fp
31ad8     01 36 66 F0 | 	shl	local09, #1
31adc     15 37 02 F1 | 	add	local09, local03
31ae0     1B 31 E2 FA | 	rdword	local06, local09
31ae4     14 4E 85 F1 | 	sub	fp, #20
31ae8     A7 30 52 FC | 	wrword	local06, fp
31aec     A7 32 EA FA | 	rdword	local07, fp wz
31af0     14 4E 85 F1 | 	sub	fp, #20
31af4     74 03 90 AD |  if_e	jmp	#LR__4906
31af8     14 4E 05 F1 | 	add	fp, #20
31afc     A7 32 E2 FA | 	rdword	local07, fp
31b00     14 4E 85 F1 | 	sub	fp, #20
31b04     20 32 0E F2 | 	cmp	local07, #32 wz
31b08     30 00 90 AD |  if_e	jmp	#LR__4891
31b0c     14 4E 05 F1 | 	add	fp, #20
31b10     A7 26 E2 FA | 	rdword	local01, fp
31b14     14 4E 85 F1 | 	sub	fp, #20
31b18     2E 26 0E F2 | 	cmp	local01, #46 wz
31b1c     34 00 90 5D |  if_ne	jmp	#LR__4892
31b20     28 4E 05 F1 | 	add	fp, #40
31b24     A7 2C 02 FB | 	rdlong	local04, fp
31b28     04 4E 05 F1 | 	add	fp, #4
31b2c     A7 38 02 FB | 	rdlong	local10, fp
31b30     2C 4E 85 F1 | 	sub	fp, #44
31b34     1C 2D 0A F2 | 	cmp	local04, local10 wz
31b38     18 00 90 AD |  if_e	jmp	#LR__4892
31b3c                 | LR__4891
31b3c     10 4E 05 F1 | 	add	fp, #16
31b40     A7 32 C2 FA | 	rdbyte	local07, fp
31b44     03 32 46 F5 | 	or	local07, #3
31b48     A7 32 42 FC | 	wrbyte	local07, fp
31b4c     10 4E 85 F1 | 	sub	fp, #16
31b50                 | ' 			cf |=  0x01  |  0x02 ;
31b50                 | ' 			continue;
31b50     68 FF 9F FD | 	jmp	#LR__4890
31b54                 | LR__4892
31b54     20 4E 05 F1 | 	add	fp, #32
31b58     A7 32 02 FB | 	rdlong	local07, fp
31b5c     04 4E 05 F1 | 	add	fp, #4
31b60     A7 26 02 FB | 	rdlong	local01, fp
31b64     24 4E 85 F1 | 	sub	fp, #36
31b68     13 33 12 F2 | 	cmp	local07, local01 wc
31b6c     1C 00 90 3D |  if_ae	jmp	#LR__4893
31b70     28 4E 05 F1 | 	add	fp, #40
31b74     A7 34 02 FB | 	rdlong	local08, fp
31b78     04 4E 05 F1 | 	add	fp, #4
31b7c     A7 38 02 FB | 	rdlong	local10, fp
31b80     2C 4E 85 F1 | 	sub	fp, #44
31b84     1C 35 0A F2 | 	cmp	local08, local10 wz
31b88     B0 00 90 5D |  if_ne	jmp	#LR__4895
31b8c                 | LR__4893
31b8c     24 4E 05 F1 | 	add	fp, #36
31b90     A7 32 02 FB | 	rdlong	local07, fp
31b94     24 4E 85 F1 | 	sub	fp, #36
31b98     0B 32 0E F2 | 	cmp	local07, #11 wz
31b9c     18 00 90 5D |  if_ne	jmp	#LR__4894
31ba0     10 4E 05 F1 | 	add	fp, #16
31ba4     A7 32 C2 FA | 	rdbyte	local07, fp
31ba8     03 32 46 F5 | 	or	local07, #3
31bac     A7 32 42 FC | 	wrbyte	local07, fp
31bb0     10 4E 85 F1 | 	sub	fp, #16
31bb4                 | ' 				cf |=  0x01  |  0x02 ;
31bb4                 | ' 				break;
31bb4     B4 02 90 FD | 	jmp	#LR__4906
31bb8                 | LR__4894
31bb8     28 4E 05 F1 | 	add	fp, #40
31bbc     A7 32 02 FB | 	rdlong	local07, fp
31bc0     04 4E 05 F1 | 	add	fp, #4
31bc4     A7 26 02 FB | 	rdlong	local01, fp
31bc8     2C 4E 85 F1 | 	sub	fp, #44
31bcc     13 33 0A F2 | 	cmp	local07, local01 wz
31bd0     10 4E 05 51 |  if_ne	add	fp, #16
31bd4     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
31bd8     03 32 46 55 |  if_ne	or	local07, #3
31bdc     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31be0     10 4E 85 51 |  if_ne	sub	fp, #16
31be4     28 4E 05 F1 | 	add	fp, #40
31be8     A7 32 02 FB | 	rdlong	local07, fp
31bec     04 4E 05 F1 | 	add	fp, #4
31bf0     A7 28 02 FB | 	rdlong	local02, fp
31bf4     2C 4E 85 F1 | 	sub	fp, #44
31bf8     14 33 1A F2 | 	cmp	local07, local02 wcz
31bfc     6C 02 90 1D |  if_a	jmp	#LR__4906
31c00     2C 4E 05 F1 | 	add	fp, #44
31c04     A7 32 02 FB | 	rdlong	local07, fp
31c08     04 4E 85 F1 | 	sub	fp, #4
31c0c     A7 32 62 FC | 	wrlong	local07, fp
31c10     08 4E 85 F1 | 	sub	fp, #8
31c14     A7 10 68 FC | 	wrlong	#8, fp
31c18     04 4E 05 F1 | 	add	fp, #4
31c1c     A7 16 68 FC | 	wrlong	#11, fp
31c20     18 4E 85 F1 | 	sub	fp, #24
31c24     A7 3A C2 FA | 	rdbyte	local11, fp
31c28     1D 33 E2 F8 | 	getbyte	local07, local11, #0
31c2c     02 32 66 F0 | 	shl	local07, #2
31c30     A7 32 42 FC | 	wrbyte	local07, fp
31c34     0C 4E 85 F1 | 	sub	fp, #12
31c38                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
31c38                 | ' 			continue;
31c38     80 FE 9F FD | 	jmp	#LR__4890
31c3c                 | LR__4895
31c3c     14 4E 05 F1 | 	add	fp, #20
31c40     A7 32 E2 FA | 	rdword	local07, fp
31c44     14 4E 85 F1 | 	sub	fp, #20
31c48     80 32 16 F2 | 	cmp	local07, #128 wc
31c4c     6C 00 90 CD |  if_b	jmp	#LR__4897
31c50     10 4E 05 F1 | 	add	fp, #16
31c54     A7 32 C2 FA | 	rdbyte	local07, fp
31c58     02 32 46 F5 | 	or	local07, #2
31c5c     A7 32 42 FC | 	wrbyte	local07, fp
31c60     04 4E 05 F1 | 	add	fp, #4
31c64     A7 12 E2 FA | 	rdword	arg01, fp
31c68     14 4E 85 F1 | 	sub	fp, #20
31c6c     01 00 00 FF 
31c70     52 15 06 F6 | 	mov	arg02, ##850
31c74     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
31c78     14 4E 05 F1 | 	add	fp, #20
31c7c     A7 FA 51 FC | 	wrword	result1, fp
31c80     A7 32 E2 FA | 	rdword	local07, fp
31c84     14 4E 85 F1 | 	sub	fp, #20
31c88     80 32 CE F7 | 	test	local07, #128 wz
31c8c     2C 00 90 AD |  if_e	jmp	#LR__4896
31c90     14 4E 05 F1 | 	add	fp, #20
31c94     A7 28 E2 FA | 	rdword	local02, fp
31c98     7F 28 06 F5 | 	and	local02, #127
31c9c     01 00 00 FF 
31ca0     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
31ca4     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
31ca8     14 33 C2 FA | 	rdbyte	local07, local02
31cac     A7 32 52 FC | 	wrword	local07, fp
31cb0     14 4E 85 F1 | 	sub	fp, #20
31cb4     01 00 00 FF 
31cb8     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
31cbc                 | LR__4896
31cbc                 | LR__4897
31cbc     14 4E 05 F1 | 	add	fp, #20
31cc0     A7 32 E2 FA | 	rdword	local07, fp
31cc4     14 4E 85 F1 | 	sub	fp, #20
31cc8     00 33 16 F2 | 	cmp	local07, #256 wc
31ccc     88 00 90 CD |  if_b	jmp	#LR__4899
31cd0     24 4E 05 F1 | 	add	fp, #36
31cd4     A7 32 02 FB | 	rdlong	local07, fp
31cd8     01 32 86 F1 | 	sub	local07, #1
31cdc     04 4E 85 F1 | 	sub	fp, #4
31ce0     A7 28 02 FB | 	rdlong	local02, fp
31ce4     20 4E 85 F1 | 	sub	fp, #32
31ce8     19 29 12 F2 | 	cmp	local02, local07 wc
31cec     2C 00 90 CD |  if_b	jmp	#LR__4898
31cf0     10 4E 05 F1 | 	add	fp, #16
31cf4     A7 3A C2 FA | 	rdbyte	local11, fp
31cf8     1D 33 E2 F8 | 	getbyte	local07, local11, #0
31cfc     03 32 46 F5 | 	or	local07, #3
31d00     A7 32 42 FC | 	wrbyte	local07, fp
31d04     14 4E 05 F1 | 	add	fp, #20
31d08     A7 32 02 FB | 	rdlong	local07, fp
31d0c     04 4E 85 F1 | 	sub	fp, #4
31d10     A7 32 62 FC | 	wrlong	local07, fp
31d14     20 4E 85 F1 | 	sub	fp, #32
31d18                 | ' 				cf |=  0x01  |  0x02 ;
31d18                 | ' 				i = ni; continue;
31d18     A0 FD 9F FD | 	jmp	#LR__4890
31d1c                 | LR__4898
31d1c     04 4E 05 F1 | 	add	fp, #4
31d20     A7 36 02 FB | 	rdlong	local09, fp
31d24     1C 4E 05 F1 | 	add	fp, #28
31d28     A7 38 02 FB | 	rdlong	local10, fp
31d2c     1C 2D 02 F6 | 	mov	local04, local10
31d30     01 2C 06 F1 | 	add	local04, #1
31d34     A7 2C 62 FC | 	wrlong	local04, fp
31d38     20 36 06 F1 | 	add	local09, #32
31d3c     1B 39 02 F1 | 	add	local10, local09
31d40     0C 4E 85 F1 | 	sub	fp, #12
31d44     A7 2A E2 FA | 	rdword	local03, fp
31d48     14 4E 85 F1 | 	sub	fp, #20
31d4c     08 2A 46 F0 | 	shr	local03, #8
31d50     1C 2B 42 FC | 	wrbyte	local03, local10
31d54     D4 00 90 FD | 	jmp	#LR__4905
31d58                 | LR__4899
31d58     14 4E 05 F1 | 	add	fp, #20
31d5c     A7 32 EA FA | 	rdword	local07, fp wz
31d60     14 4E 85 F1 | 	sub	fp, #20
31d64     20 00 90 AD |  if_e	jmp	#LR__4900
31d68     BB 01 00 FF 
31d6c     F5 12 06 F6 | 	mov	arg01, ##@LR__5533
31d70     14 4E 05 F1 | 	add	fp, #20
31d74     A7 14 E2 FA | 	rdword	arg02, fp
31d78     14 4E 85 F1 | 	sub	fp, #20
31d7c     48 CB BF FD | 	call	#_fatfs_cc_strchr
31d80     00 FA 0D F2 | 	cmp	result1, #0 wz
31d84     20 00 90 AD |  if_e	jmp	#LR__4901
31d88                 | LR__4900
31d88     14 4E 05 F1 | 	add	fp, #20
31d8c     A7 BE 58 FC | 	wrword	#95, fp
31d90     04 4E 85 F1 | 	sub	fp, #4
31d94     A7 32 C2 FA | 	rdbyte	local07, fp
31d98     03 32 46 F5 | 	or	local07, #3
31d9c     A7 32 42 FC | 	wrbyte	local07, fp
31da0     10 4E 85 F1 | 	sub	fp, #16
31da4     84 00 90 FD | 	jmp	#LR__4904
31da8                 | LR__4901
31da8     14 4E 05 F1 | 	add	fp, #20
31dac     A7 32 E2 FA | 	rdword	local07, fp
31db0     14 4E 85 F1 | 	sub	fp, #20
31db4     41 32 16 F2 | 	cmp	local07, #65 wc
31db8     24 00 90 CD |  if_b	jmp	#LR__4902
31dbc     14 4E 05 F1 | 	add	fp, #20
31dc0     A7 26 E2 FA | 	rdword	local01, fp
31dc4     14 4E 85 F1 | 	sub	fp, #20
31dc8     5B 26 16 F2 | 	cmp	local01, #91 wc
31dcc     0C 4E 05 C1 |  if_b	add	fp, #12
31dd0     A7 32 C2 CA |  if_b	rdbyte	local07, fp
31dd4     02 32 46 C5 |  if_b	or	local07, #2
31dd8     A7 32 42 CC |  if_b	wrbyte	local07, fp
31ddc     0C 4E 85 C1 |  if_b	sub	fp, #12
31de0                 | LR__4902
31de0     14 4E 05 F1 | 	add	fp, #20
31de4     A7 32 E2 FA | 	rdword	local07, fp
31de8     14 4E 85 F1 | 	sub	fp, #20
31dec     61 32 16 F2 | 	cmp	local07, #97 wc
31df0     38 00 90 CD |  if_b	jmp	#LR__4903
31df4     14 4E 05 F1 | 	add	fp, #20
31df8     A7 26 E2 FA | 	rdword	local01, fp
31dfc     14 4E 85 F1 | 	sub	fp, #20
31e00     7B 26 16 F2 | 	cmp	local01, #123 wc
31e04     24 00 90 3D |  if_ae	jmp	#LR__4903
31e08     0C 4E 05 F1 | 	add	fp, #12
31e0c     A7 32 C2 FA | 	rdbyte	local07, fp
31e10     01 32 46 F5 | 	or	local07, #1
31e14     A7 32 42 FC | 	wrbyte	local07, fp
31e18     08 4E 05 F1 | 	add	fp, #8
31e1c     A7 32 E2 FA | 	rdword	local07, fp
31e20     20 32 86 F1 | 	sub	local07, #32
31e24     A7 32 52 FC | 	wrword	local07, fp
31e28     14 4E 85 F1 | 	sub	fp, #20
31e2c                 | LR__4903
31e2c                 | LR__4904
31e2c                 | LR__4905
31e2c     04 4E 05 F1 | 	add	fp, #4
31e30     A7 3A 02 FB | 	rdlong	local11, fp
31e34     1D 37 02 F6 | 	mov	local09, local11
31e38     1C 4E 05 F1 | 	add	fp, #28
31e3c     A7 28 02 FB | 	rdlong	local02, fp
31e40     14 2D 02 F6 | 	mov	local04, local02
31e44     01 2C 06 F1 | 	add	local04, #1
31e48     A7 2C 62 FC | 	wrlong	local04, fp
31e4c     14 39 02 F6 | 	mov	local10, local02
31e50     20 36 06 F1 | 	add	local09, #32
31e54     1B 39 02 F1 | 	add	local10, local09
31e58     0C 4E 85 F1 | 	sub	fp, #12
31e5c     A7 2A E2 FA | 	rdword	local03, fp
31e60     14 4E 85 F1 | 	sub	fp, #20
31e64     1C 2B 42 FC | 	wrbyte	local03, local10
31e68     50 FC 9F FD | 	jmp	#LR__4890
31e6c                 | LR__4906
31e6c     04 4E 05 F1 | 	add	fp, #4
31e70     A7 3A 02 FB | 	rdlong	local11, fp
31e74     04 4E 85 F1 | 	sub	fp, #4
31e78     20 3A 06 F1 | 	add	local11, #32
31e7c     1D 33 C2 FA | 	rdbyte	local07, local11
31e80     E5 32 0E F2 | 	cmp	local07, #229 wz
31e84     04 4E 05 A1 |  if_e	add	fp, #4
31e88     A7 32 02 AB |  if_e	rdlong	local07, fp
31e8c     04 4E 85 A1 |  if_e	sub	fp, #4
31e90     20 32 06 A1 |  if_e	add	local07, #32
31e94     19 0B 48 AC |  if_e	wrbyte	#5, local07
31e98     24 4E 05 F1 | 	add	fp, #36
31e9c     A7 32 02 FB | 	rdlong	local07, fp
31ea0     24 4E 85 F1 | 	sub	fp, #36
31ea4     08 32 0E F2 | 	cmp	local07, #8 wz
31ea8     0C 4E 05 A1 |  if_e	add	fp, #12
31eac     A7 32 C2 AA |  if_e	rdbyte	local07, fp
31eb0     02 32 66 A0 |  if_e	shl	local07, #2
31eb4     A7 32 42 AC |  if_e	wrbyte	local07, fp
31eb8     0C 4E 85 A1 |  if_e	sub	fp, #12
31ebc     0C 4E 05 F1 | 	add	fp, #12
31ec0     A7 32 C2 FA | 	rdbyte	local07, fp
31ec4     0C 4E 85 F1 | 	sub	fp, #12
31ec8     0C 32 06 F5 | 	and	local07, #12
31ecc     0C 32 0E F2 | 	cmp	local07, #12 wz
31ed0     18 00 90 AD |  if_e	jmp	#LR__4907
31ed4     0C 4E 05 F1 | 	add	fp, #12
31ed8     A7 26 C2 FA | 	rdbyte	local01, fp
31edc     0C 4E 85 F1 | 	sub	fp, #12
31ee0     03 26 06 F5 | 	and	local01, #3
31ee4     03 26 0E F2 | 	cmp	local01, #3 wz
31ee8     14 00 90 5D |  if_ne	jmp	#LR__4908
31eec                 | LR__4907
31eec     10 4E 05 F1 | 	add	fp, #16
31ef0     A7 32 C2 FA | 	rdbyte	local07, fp
31ef4     02 32 46 F5 | 	or	local07, #2
31ef8     A7 32 42 FC | 	wrbyte	local07, fp
31efc     10 4E 85 F1 | 	sub	fp, #16
31f00                 | LR__4908
31f00     10 4E 05 F1 | 	add	fp, #16
31f04     A7 32 C2 FA | 	rdbyte	local07, fp
31f08     10 4E 85 F1 | 	sub	fp, #16
31f0c     02 32 CE F7 | 	test	local07, #2 wz
31f10     48 00 90 5D |  if_ne	jmp	#LR__4909
31f14     0C 4E 05 F1 | 	add	fp, #12
31f18     A7 32 C2 FA | 	rdbyte	local07, fp
31f1c     0C 4E 85 F1 | 	sub	fp, #12
31f20     01 32 CE F7 | 	test	local07, #1 wz
31f24     10 4E 05 51 |  if_ne	add	fp, #16
31f28     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
31f2c     10 32 46 55 |  if_ne	or	local07, #16
31f30     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31f34     10 4E 85 51 |  if_ne	sub	fp, #16
31f38     0C 4E 05 F1 | 	add	fp, #12
31f3c     A7 32 C2 FA | 	rdbyte	local07, fp
31f40     0C 4E 85 F1 | 	sub	fp, #12
31f44     04 32 CE F7 | 	test	local07, #4 wz
31f48     10 4E 05 51 |  if_ne	add	fp, #16
31f4c     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
31f50     08 32 46 55 |  if_ne	or	local07, #8
31f54     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31f58     10 4E 85 51 |  if_ne	sub	fp, #16
31f5c                 | LR__4909
31f5c     04 4E 05 F1 | 	add	fp, #4
31f60     A7 32 02 FB | 	rdlong	local07, fp
31f64     0C 4E 05 F1 | 	add	fp, #12
31f68     A7 26 C2 FA | 	rdbyte	local01, fp
31f6c     10 4E 85 F1 | 	sub	fp, #16
31f70     2B 32 06 F1 | 	add	local07, #43
31f74     19 27 42 FC | 	wrbyte	local01, local07
31f78                 | ' 	}
31f78                 | ' 
31f78                 | ' 	dp->fn[ 11 ] = cf;
31f78                 | ' 
31f78                 | ' 	return FR_OK;
31f78     00 FA 05 F6 | 	mov	result1, #0
31f7c                 | LR__4910
31f7c     A7 F0 03 F6 | 	mov	ptra, fp
31f80     B2 00 A0 FD | 	call	#popregs_
31f84                 | _fatfs_cc_create_name_ret
31f84     2D 00 64 FD | 	ret
31f88                 | 
31f88                 | _fatfs_cc_follow_path
31f88     02 4A 05 F6 | 	mov	COUNT_, #2
31f8c     A8 00 A0 FD | 	call	#pushregs_
31f90     18 F0 07 F1 | 	add	ptra, #24
31f94     04 4E 05 F1 | 	add	fp, #4
31f98     A7 12 62 FC | 	wrlong	arg01, fp
31f9c     04 4E 05 F1 | 	add	fp, #4
31fa0     A7 14 62 FC | 	wrlong	arg02, fp
31fa4     04 4E 85 F1 | 	sub	fp, #4
31fa8     A7 FA 01 FB | 	rdlong	result1, fp
31fac     FD 26 02 FB | 	rdlong	local01, result1
31fb0     10 4E 05 F1 | 	add	fp, #16
31fb4     A7 26 62 FC | 	wrlong	local01, fp
31fb8     14 4E 85 F1 | 	sub	fp, #20
31fbc     97 24 48 FB | 	callpa	#(@LR__4922-@LR__4920)>>2,fcache_load_ptr_
31fc0                 | ' )
31fc0                 | ' {
31fc0                 | ' 	FRESULT res;
31fc0                 | ' 	BYTE ns;
31fc0                 | ' 	FATFS *fs = dp->obj.fs;
31fc0                 | ' #line 3034 "ff.c"
31fc0                 | ' 	{
31fc0                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
31fc0                 | LR__4920
31fc0     08 4E 05 F1 | 	add	fp, #8
31fc4     A7 26 02 FB | 	rdlong	local01, fp
31fc8     08 4E 85 F1 | 	sub	fp, #8
31fcc     13 27 C2 FA | 	rdbyte	local01, local01
31fd0     2F 26 0E F2 | 	cmp	local01, #47 wz
31fd4     18 00 90 AD |  if_e	jmp	#LR__4921
31fd8     08 4E 05 F1 | 	add	fp, #8
31fdc     A7 26 02 FB | 	rdlong	local01, fp
31fe0     08 4E 85 F1 | 	sub	fp, #8
31fe4     13 27 C2 FA | 	rdbyte	local01, local01
31fe8     5C 26 0E F2 | 	cmp	local01, #92 wz
31fec     18 00 90 5D |  if_ne	jmp	#LR__4923
31ff0                 | LR__4921
31ff0     08 4E 05 F1 | 	add	fp, #8
31ff4     A7 26 02 FB | 	rdlong	local01, fp
31ff8     01 26 06 F1 | 	add	local01, #1
31ffc     A7 26 62 FC | 	wrlong	local01, fp
32000     08 4E 85 F1 | 	sub	fp, #8
32004     B8 FF 9F FD | 	jmp	#LR__4920
32008                 | LR__4922
32008                 | LR__4923
32008     04 4E 05 F1 | 	add	fp, #4
3200c     A7 26 02 FB | 	rdlong	local01, fp
32010     08 26 06 F1 | 	add	local01, #8
32014     13 01 68 FC | 	wrlong	#0, local01
32018     04 4E 05 F1 | 	add	fp, #4
3201c     A7 26 02 FB | 	rdlong	local01, fp
32020     08 4E 85 F1 | 	sub	fp, #8
32024     13 27 C2 FA | 	rdbyte	local01, local01
32028     20 26 16 F2 | 	cmp	local01, #32 wc
3202c     30 00 90 3D |  if_ae	jmp	#LR__4924
32030     04 4E 05 F1 | 	add	fp, #4
32034     A7 26 02 FB | 	rdlong	local01, fp
32038     2B 26 06 F1 | 	add	local01, #43
3203c     13 01 49 FC | 	wrbyte	#128, local01
32040     A7 12 02 FB | 	rdlong	arg01, fp
32044     04 4E 85 F1 | 	sub	fp, #4
32048     00 14 06 F6 | 	mov	arg02, #0
3204c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
32050     0C 4E 05 F1 | 	add	fp, #12
32054     A7 FA 61 FC | 	wrlong	result1, fp
32058     0C 4E 85 F1 | 	sub	fp, #12
3205c     1C 01 90 FD | 	jmp	#LR__4928
32060                 | LR__4924
32060                 | ' 		for (;;) {
32060                 | LR__4925
32060     04 4E 05 F1 | 	add	fp, #4
32064     A7 12 02 FB | 	rdlong	arg01, fp
32068     04 4E 05 F1 | 	add	fp, #4
3206c     A7 14 02 F6 | 	mov	arg02, fp
32070     08 4E 85 F1 | 	sub	fp, #8
32074     14 F6 BF FD | 	call	#_fatfs_cc_create_name
32078     0C 4E 05 F1 | 	add	fp, #12
3207c     A7 FA 61 FC | 	wrlong	result1, fp
32080     00 FA 4D F2 | 	cmps	result1, #0 wz
32084     0C 4E 85 F1 | 	sub	fp, #12
32088     F0 00 90 5D |  if_ne	jmp	#LR__4927
3208c     04 4E 05 F1 | 	add	fp, #4
32090     A7 12 02 FB | 	rdlong	arg01, fp
32094     04 4E 85 F1 | 	sub	fp, #4
32098     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
3209c     0C 4E 05 F1 | 	add	fp, #12
320a0     A7 FA 61 FC | 	wrlong	result1, fp
320a4     08 4E 85 F1 | 	sub	fp, #8
320a8     A7 26 02 FB | 	rdlong	local01, fp
320ac     2B 26 06 F1 | 	add	local01, #43
320b0     13 27 C2 FA | 	rdbyte	local01, local01
320b4     0C 4E 05 F1 | 	add	fp, #12
320b8     A7 26 42 FC | 	wrbyte	local01, fp
320bc     04 4E 85 F1 | 	sub	fp, #4
320c0     A7 26 0A FB | 	rdlong	local01, fp wz
320c4     0C 4E 85 F1 | 	sub	fp, #12
320c8     34 00 90 AD |  if_e	jmp	#LR__4926
320cc     0C 4E 05 F1 | 	add	fp, #12
320d0     A7 26 02 FB | 	rdlong	local01, fp
320d4     0C 4E 85 F1 | 	sub	fp, #12
320d8     04 26 0E F2 | 	cmp	local01, #4 wz
320dc     9C 00 90 5D |  if_ne	jmp	#LR__4927
320e0     10 4E 05 F1 | 	add	fp, #16
320e4     A7 26 C2 FA | 	rdbyte	local01, fp
320e8     10 4E 85 F1 | 	sub	fp, #16
320ec     04 26 CE F7 | 	test	local01, #4 wz
320f0     0C 4E 05 A1 |  if_e	add	fp, #12
320f4     A7 0A 68 AC |  if_e	wrlong	#5, fp
320f8     0C 4E 85 A1 |  if_e	sub	fp, #12
320fc                 | ' 					}
320fc                 | ' 				}
320fc                 | ' 				break;
320fc     7C 00 90 FD | 	jmp	#LR__4927
32100                 | LR__4926
32100     10 4E 05 F1 | 	add	fp, #16
32104     A7 26 C2 FA | 	rdbyte	local01, fp
32108     10 4E 85 F1 | 	sub	fp, #16
3210c     04 26 CE F7 | 	test	local01, #4 wz
32110     68 00 90 5D |  if_ne	jmp	#LR__4927
32114     04 4E 05 F1 | 	add	fp, #4
32118     A7 26 02 FB | 	rdlong	local01, fp
3211c     04 4E 85 F1 | 	sub	fp, #4
32120     06 26 06 F1 | 	add	local01, #6
32124     13 27 C2 FA | 	rdbyte	local01, local01
32128     10 26 CE F7 | 	test	local01, #16 wz
3212c     0C 4E 05 A1 |  if_e	add	fp, #12
32130     A7 0A 68 AC |  if_e	wrlong	#5, fp
32134     0C 4E 85 A1 |  if_e	sub	fp, #12
32138                 | ' 				res = FR_NO_PATH; break;
32138     40 00 90 AD |  if_e	jmp	#LR__4927
3213c     04 4E 05 F1 | 	add	fp, #4
32140     A7 28 02 FB | 	rdlong	local02, fp
32144     14 27 02 F6 | 	mov	local01, local02
32148     10 4E 05 F1 | 	add	fp, #16
3214c     A7 14 02 FB | 	rdlong	arg02, fp
32150     0A 13 02 F6 | 	mov	arg01, arg02
32154     34 14 06 F1 | 	add	arg02, #52
32158     14 4E 85 F1 | 	sub	fp, #20
3215c     10 28 06 F1 | 	add	local02, #16
32160     14 29 02 FB | 	rdlong	local02, local02
32164     FF 29 06 F5 | 	and	local02, #511
32168     14 15 02 F1 | 	add	arg02, local02
3216c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
32170     08 26 06 F1 | 	add	local01, #8
32174     13 FB 61 FC | 	wrlong	result1, local01
32178     E4 FE 9F FD | 	jmp	#LR__4925
3217c                 | LR__4927
3217c                 | LR__4928
3217c                 | ' 			}
3217c                 | ' #line 3090 "ff.c"
3217c                 | ' 			{
3217c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
3217c                 | ' 			}
3217c                 | ' 		}
3217c                 | ' 	}
3217c                 | ' 
3217c                 | ' 	return res;
3217c     0C 4E 05 F1 | 	add	fp, #12
32180     A7 FA 01 FB | 	rdlong	result1, fp
32184     0C 4E 85 F1 | 	sub	fp, #12
32188     A7 F0 03 F6 | 	mov	ptra, fp
3218c     B2 00 A0 FD | 	call	#popregs_
32190                 | _fatfs_cc_follow_path_ret
32190     2D 00 64 FD | 	ret
32194                 | 
32194                 | _fatfs_cc_get_ldnumber
32194     01 00 66 F6 | 	neg	_var01, #1
32198     09 03 0A FB | 	rdlong	_var02, arg01 wz
3219c     01 05 02 F6 | 	mov	_var03, _var02
321a0     01 FA 65 A6 |  if_e	neg	result1, #1
321a4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
321a8     97 10 48 FB | 	callpa	#(@LR__4931-@LR__4930)>>2,fcache_load_ptr_
321ac                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
321ac                 | LR__4930
321ac     02 07 C2 FA | 	rdbyte	_var04, _var03
321b0     03 FB E1 F8 | 	getbyte	result1, _var04, #0
321b4     20 FA 15 F2 | 	cmp	result1, #32 wc
321b8     01 04 06 F1 | 	add	_var03, #1
321bc     03 09 02 36 |  if_ae	mov	_var05, _var04
321c0     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
321c4     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
321c8     E0 FF 9F 1D |  if_a	jmp	#LR__4930
321cc                 | LR__4931
321cc     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
321d0     3A 06 0E F2 | 	cmp	_var04, #58 wz
321d4     40 00 90 5D |  if_ne	jmp	#LR__4933
321d8     01 0A 06 F6 | 	mov	_var06, #1
321dc     01 09 C2 FA | 	rdbyte	_var05, _var02
321e0     30 08 16 F2 | 	cmp	_var05, #48 wc
321e4     1C 00 90 CD |  if_b	jmp	#LR__4932
321e8     01 09 C2 FA | 	rdbyte	_var05, _var02
321ec     3A 08 16 F2 | 	cmp	_var05, #58 wc
321f0     01 0D 02 C6 |  if_b	mov	_var07, _var02
321f4     02 0C 06 C1 |  if_b	add	_var07, #2
321f8     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
321fc     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
32200     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
32204                 | LR__4932
32204     01 0A 56 F2 | 	cmps	_var06, #1 wc
32208     05 01 02 C6 |  if_b	mov	_var01, _var06
3220c     09 05 62 CC |  if_b	wrlong	_var03, arg01
32210                 | ' 			vol = i;
32210                 | ' 			*path = tt;
32210                 | ' 		}
32210                 | ' 		return vol;
32210     00 FB 01 F6 | 	mov	result1, _var01
32214     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
32218                 | LR__4933
32218                 | ' 	}
32218                 | ' #line 3170 "ff.c"
32218                 | ' 	vol = 0;
32218                 | ' 
32218                 | ' 	return vol;
32218     00 FA 05 F6 | 	mov	result1, #0
3221c                 | _fatfs_cc_get_ldnumber_ret
3221c     2D 00 64 FD | 	ret
32220                 | 
32220                 | _fatfs_cc_check_fs
32220     04 4A 05 F6 | 	mov	COUNT_, #4
32224     A8 00 A0 FD | 	call	#pushregs_
32228     09 27 02 F6 | 	mov	local01, arg01
3222c     03 26 06 F1 | 	add	local01, #3
32230     13 01 48 FC | 	wrbyte	#0, local01
32234     2D 26 06 F1 | 	add	local01, #45
32238     FF FF FF FF 
3223c     13 FF 6B FC | 	wrlong	##-1, local01
32240     30 26 86 F1 | 	sub	local01, #48
32244     13 13 02 F6 | 	mov	arg01, local01
32248     18 D5 BF FD | 	call	#_fatfs_cc_move_window
3224c     00 FA 0D F2 | 	cmp	result1, #0 wz
32250     04 FA 05 56 |  if_ne	mov	result1, #4
32254     94 01 90 5D |  if_ne	jmp	#LR__4944
32258     34 26 06 F1 | 	add	local01, #52
3225c     13 13 02 F6 | 	mov	arg01, local01
32260     FE 13 06 F1 | 	add	arg01, #510
32264                 | ' {
32264                 | ' 
32264                 | ' 	return *((WORD*)ptr);
32264     09 29 E2 FA | 	rdword	local02, arg01
32268     13 2B C2 FA | 	rdbyte	local03, local01
3226c     34 26 86 F1 | 	sub	local01, #52
32270     15 2D E2 F8 | 	getbyte	local04, local03, #0
32274     EB 2C 0E F2 | 	cmp	local04, #235 wz
32278     15 17 02 56 |  if_ne	mov	arg03, local03
3227c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
32280     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
32284     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
32288     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
3228c     44 01 90 5D |  if_ne	jmp	#LR__4943
32290     14 2D 32 F9 | 	getword	local04, local02, #0
32294     55 00 00 FF 
32298     55 2C 0E F2 | 	cmp	local04, ##43605 wz
3229c     2C 00 90 5D |  if_ne	jmp	#LR__4940
322a0     34 26 06 F1 | 	add	local01, #52
322a4     13 13 02 F6 | 	mov	arg01, local01
322a8     34 26 86 F1 | 	sub	local01, #52
322ac     52 12 06 F1 | 	add	arg01, #82
322b0     BB 01 00 FF 
322b4     FC 14 06 F6 | 	mov	arg02, ##@LR__5534
322b8     08 16 06 F6 | 	mov	arg03, #8
322bc     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
322c0     00 FA 0D F2 | 	cmp	result1, #0 wz
322c4                 | ' 			return 0;
322c4     00 FA 05 A6 |  if_e	mov	result1, #0
322c8     20 01 90 AD |  if_e	jmp	#LR__4944
322cc                 | LR__4940
322cc     34 26 06 F1 | 	add	local01, #52
322d0     13 13 02 F6 | 	mov	arg01, local01
322d4     0B 12 06 F1 | 	add	arg01, #11
322d8                 | ' {
322d8                 | ' 
322d8                 | ' 	return *((WORD*)ptr);
322d8     09 FB E1 FA | 	rdword	result1, arg01
322dc     0D 26 06 F1 | 	add	local01, #13
322e0     13 2B C2 FA | 	rdbyte	local03, local01
322e4     41 26 86 F1 | 	sub	local01, #65
322e8     FD 2C 32 F9 | 	getword	local04, result1, #0
322ec     FD 14 32 F9 | 	getword	arg02, result1, #0
322f0     01 14 86 F1 | 	sub	arg02, #1
322f4     0A 2D CA F7 | 	test	local04, arg02 wz
322f8     D8 00 90 5D |  if_ne	jmp	#LR__4942
322fc     FD 14 32 F9 | 	getword	arg02, result1, #0
32300     01 00 00 FF 
32304     00 14 16 F2 | 	cmp	arg02, ##512 wc
32308     C8 00 90 CD |  if_b	jmp	#LR__4942
3230c     FD 14 32 F9 | 	getword	arg02, result1, #0
32310     01 00 00 FF 
32314     01 14 16 F2 | 	cmp	arg02, ##513 wc
32318     B8 00 90 3D |  if_ae	jmp	#LR__4942
3231c     15 13 02 F6 | 	mov	arg01, local03
32320     07 12 4E F7 | 	zerox	arg01, #7 wz
32324     AC 00 90 AD |  if_e	jmp	#LR__4942
32328     15 13 E2 F8 | 	getbyte	arg01, local03, #0
3232c     15 2B E2 F8 | 	getbyte	local03, local03, #0
32330     01 2A 86 F1 | 	sub	local03, #1
32334     15 13 CA F7 | 	test	arg01, local03 wz
32338     98 00 90 5D |  if_ne	jmp	#LR__4942
3233c     34 26 06 F1 | 	add	local01, #52
32340     13 13 02 F6 | 	mov	arg01, local01
32344     34 26 86 F1 | 	sub	local01, #52
32348     0E 12 06 F1 | 	add	arg01, #14
3234c                 | ' {
3234c                 | ' 
3234c                 | ' 	return *((WORD*)ptr);
3234c     09 FB E9 FA | 	rdword	result1, arg01 wz
32350     80 00 90 AD |  if_e	jmp	#LR__4942
32354     44 26 06 F1 | 	add	local01, #68
32358     13 13 C2 FA | 	rdbyte	arg01, local01
3235c     44 26 86 F1 | 	sub	local01, #68
32360     01 12 86 F1 | 	sub	arg01, #1
32364     02 12 16 F2 | 	cmp	arg01, #2 wc
32368     68 00 90 3D |  if_ae	jmp	#LR__4942
3236c     34 26 06 F1 | 	add	local01, #52
32370     13 13 02 F6 | 	mov	arg01, local01
32374     34 26 86 F1 | 	sub	local01, #52
32378     11 12 06 F1 | 	add	arg01, #17
3237c                 | ' {
3237c                 | ' 
3237c                 | ' 	return *((WORD*)ptr);
3237c     09 FB E9 FA | 	rdword	result1, arg01 wz
32380     50 00 90 AD |  if_e	jmp	#LR__4942
32384     34 26 06 F1 | 	add	local01, #52
32388     13 13 02 F6 | 	mov	arg01, local01
3238c     34 26 86 F1 | 	sub	local01, #52
32390     13 12 06 F1 | 	add	arg01, #19
32394                 | ' {
32394                 | ' 
32394                 | ' 	return *((WORD*)ptr);
32394     09 FB E1 FA | 	rdword	result1, arg01
32398     FD 2A 32 F9 | 	getword	local03, result1, #0
3239c     80 2A 16 F2 | 	cmp	local03, #128 wc
323a0     20 00 90 3D |  if_ae	jmp	#LR__4941
323a4     34 26 06 F1 | 	add	local01, #52
323a8     13 13 02 F6 | 	mov	arg01, local01
323ac     34 26 86 F1 | 	sub	local01, #52
323b0     20 12 06 F1 | 	add	arg01, #32
323b4                 | ' {
323b4                 | ' 
323b4                 | ' 	return *((DWORD*)ptr);
323b4     09 FB 01 FB | 	rdlong	result1, arg01
323b8     80 00 00 FF 
323bc     00 FA 15 F2 | 	cmp	result1, ##65536 wc
323c0     10 00 90 CD |  if_b	jmp	#LR__4942
323c4                 | LR__4941
323c4     4A 26 06 F1 | 	add	local01, #74
323c8                 | ' {
323c8                 | ' 
323c8                 | ' 	return *((WORD*)ptr);
323c8     13 FB E9 FA | 	rdword	result1, local01 wz
323cc                 | ' 			&& b != 0 && (b & (b - 1)) == 0
323cc                 | ' 			&& ld_word(fs->win +  14 ) != 0
323cc                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
323cc                 | ' 			&& ld_word(fs->win +  17 ) != 0
323cc                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
323cc                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
323cc                 | ' 				return 0;
323cc     00 FA 05 56 |  if_ne	mov	result1, #0
323d0     18 00 90 5D |  if_ne	jmp	#LR__4944
323d4                 | LR__4942
323d4                 | LR__4943
323d4                 | ' 		}
323d4                 | ' 	}
323d4                 | ' 	return sign == 0xAA55 ? 2 : 3;
323d4     14 2B 32 F9 | 	getword	local03, local02, #0
323d8     55 00 00 FF 
323dc     55 2A 0E F2 | 	cmp	local03, ##43605 wz
323e0     02 2C 06 A6 |  if_e	mov	local04, #2
323e4     03 2C 06 56 |  if_ne	mov	local04, #3
323e8     16 FB 01 F6 | 	mov	result1, local04
323ec                 | LR__4944
323ec     A7 F0 03 F6 | 	mov	ptra, fp
323f0     B2 00 A0 FD | 	call	#popregs_
323f4                 | _fatfs_cc_check_fs_ret
323f4     2D 00 64 FD | 	ret
323f8                 | 
323f8                 | _fatfs_cc_find_volume
323f8     05 4A 05 F6 | 	mov	COUNT_, #5
323fc     A8 00 A0 FD | 	call	#pushregs_
32400     24 F0 07 F1 | 	add	ptra, #36
32404     09 27 02 F6 | 	mov	local01, arg01
32408     0A 29 02 F6 | 	mov	local02, arg02
3240c     13 13 02 F6 | 	mov	arg01, local01
32410     00 14 06 F6 | 	mov	arg02, #0
32414     08 FE BF FD | 	call	#_fatfs_cc_check_fs
32418     02 FA 0D F2 | 	cmp	result1, #2 wz
3241c     0C 00 90 AD |  if_e	jmp	#LR__4950
32420     03 FA 15 F2 | 	cmp	result1, #3 wc
32424     00 28 0E C2 |  if_b	cmp	local02, #0 wz
32428     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4958
3242c                 | LR__4950
3242c                 | ' 	for (i = 0; i < 4; i++) {
3242c     00 2A 06 F6 | 	mov	local03, #0
32430     97 26 48 FB | 	callpa	#(@LR__4952-@LR__4951)>>2,fcache_load_ptr_
32434                 | LR__4951
32434     04 2A 16 F2 | 	cmp	local03, #4 wc
32438     44 00 90 3D |  if_ae	jmp	#LR__4953
3243c     15 2D 02 F6 | 	mov	local04, local03
32440     02 2C 66 F0 | 	shl	local04, #2
32444     14 4E 05 F1 | 	add	fp, #20
32448     A7 2C 02 F1 | 	add	local04, fp
3244c     34 26 06 F1 | 	add	local01, #52
32450     13 13 02 F6 | 	mov	arg01, local01
32454     34 26 86 F1 | 	sub	local01, #52
32458     BE 13 06 F1 | 	add	arg01, #446
3245c     15 15 02 F6 | 	mov	arg02, local03
32460     04 14 66 F0 | 	shl	arg02, #4
32464     0A 13 02 F1 | 	add	arg01, arg02
32468     08 12 06 F1 | 	add	arg01, #8
3246c                 | ' {
3246c                 | ' 
3246c                 | ' 	return *((DWORD*)ptr);
3246c     09 FB 01 FB | 	rdlong	result1, arg01
32470     14 4E 85 F1 | 	sub	fp, #20
32474     16 FB 61 FC | 	wrlong	result1, local04
32478     01 2A 06 F1 | 	add	local03, #1
3247c     B4 FF 9F FD | 	jmp	#LR__4951
32480                 | LR__4952
32480                 | LR__4953
32480     00 28 0E F2 | 	cmp	local02, #0 wz
32484     14 2D 02 56 |  if_ne	mov	local04, local02
32488     01 2C 86 51 |  if_ne	sub	local04, #1
3248c     00 2C 06 A6 |  if_e	mov	local04, #0
32490     16 2B 02 F6 | 	mov	local03, local04
32494                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
32494                 | ' 	}
32494                 | ' 	i = part ? part - 1 : 0;
32494                 | ' 	do {
32494                 | LR__4954
32494     15 2D 02 F6 | 	mov	local04, local03
32498     02 2C 66 F0 | 	shl	local04, #2
3249c     14 4E 05 F1 | 	add	fp, #20
324a0     A7 2C 02 F1 | 	add	local04, fp
324a4     16 2D 0A FB | 	rdlong	local04, local04 wz
324a8     14 4E 85 F1 | 	sub	fp, #20
324ac     28 00 90 AD |  if_e	jmp	#LR__4955
324b0     15 2D 02 F6 | 	mov	local04, local03
324b4     02 2C 66 F0 | 	shl	local04, #2
324b8     14 4E 05 F1 | 	add	fp, #20
324bc     A7 2C 02 F1 | 	add	local04, fp
324c0     16 15 02 FB | 	rdlong	arg02, local04
324c4     13 13 02 F6 | 	mov	arg01, local01
324c8     14 4E 85 F1 | 	sub	fp, #20
324cc     50 FD BF FD | 	call	#_fatfs_cc_check_fs
324d0     FD 2C 02 F6 | 	mov	local04, result1
324d4     04 00 90 FD | 	jmp	#LR__4956
324d8                 | LR__4955
324d8     03 2C 06 F6 | 	mov	local04, #3
324dc                 | LR__4956
324dc     16 2F 02 F6 | 	mov	local05, local04
324e0     00 28 0E F2 | 	cmp	local02, #0 wz
324e4     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
324e8     0C 00 90 8D |  if_c_and_z	jmp	#LR__4957
324ec     01 2A 06 A1 |  if_e	add	local03, #1
324f0     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
324f4     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4954
324f8                 | LR__4957
324f8                 | ' 	return fmt;
324f8     17 FB 01 F6 | 	mov	result1, local05
324fc                 | LR__4958
324fc     A7 F0 03 F6 | 	mov	ptra, fp
32500     B2 00 A0 FD | 	call	#popregs_
32504                 | _fatfs_cc_find_volume_ret
32504     2D 00 64 FD | 	ret
32508                 | 
32508                 | _fatfs_cc_mount_volume
32508     0B 4A 05 F6 | 	mov	COUNT_, #11
3250c     A8 00 A0 FD | 	call	#pushregs_
32510     0A 27 02 F6 | 	mov	local01, arg02
32514     0B 29 02 F6 | 	mov	local02, arg03
32518     13 01 68 FC | 	wrlong	#0, local01
3251c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
32520     FD 2A 02 F6 | 	mov	local03, result1
32524     00 2A 56 F2 | 	cmps	local03, #0 wc
32528     0B FA 05 C6 |  if_b	mov	result1, #11
3252c     3C 05 90 CD |  if_b	jmp	#LR__4970
32530     15 17 02 F6 | 	mov	arg03, local03
32534     02 16 66 F0 | 	shl	arg03, #2
32538     F2 16 02 F1 | 	add	arg03, objptr
3253c     0B 2D 0A FB | 	rdlong	local04, arg03 wz
32540     0C FA 05 A6 |  if_e	mov	result1, #12
32544     24 05 90 AD |  if_e	jmp	#LR__4970
32548     13 2D 62 FC | 	wrlong	local04, local01
3254c     14 29 E2 F8 | 	getbyte	local02, local02, #0
32550     FE 28 06 F5 | 	and	local02, #254
32554     16 17 CA FA | 	rdbyte	arg03, local04 wz
32558     4C 00 90 AD |  if_e	jmp	#LR__4961
3255c     01 2C 06 F1 | 	add	local04, #1
32560     16 13 CA FA | 	rdbyte	arg01, local04 wz
32564     01 2C 86 F1 | 	sub	local04, #1
32568     01 FA 05 56 |  if_ne	mov	result1, #1
3256c                 | ' 
3256c                 | ' 	return Stat;
3256c     01 00 00 AF 
32570     20 E4 05 A1 |  if_e	add	objptr, ##544
32574     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
32578     01 00 00 AF 
3257c     20 E4 85 A1 |  if_e	sub	objptr, ##544
32580     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
32584     01 16 CE F7 | 	test	arg03, #1 wz
32588     1C 00 90 5D |  if_ne	jmp	#LR__4960
3258c     00 28 0E F2 | 	cmp	local02, #0 wz
32590     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
32594     04 FA CD 57 |  if_ne	test	result1, #4 wz
32598                 | ' 				return FR_WRITE_PROTECTED;
32598     0A FA 05 56 |  if_ne	mov	result1, #10
3259c     CC 04 90 5D |  if_ne	jmp	#LR__4970
325a0                 | ' 			}
325a0                 | ' 			return FR_OK;
325a0     00 FA 05 F6 | 	mov	result1, #0
325a4     C4 04 90 FD | 	jmp	#LR__4970
325a8                 | LR__4960
325a8                 | LR__4961
325a8     16 01 48 FC | 	wrbyte	#0, local04
325ac     01 2C 06 F1 | 	add	local04, #1
325b0     16 2B 42 FC | 	wrbyte	local03, local04
325b4     16 13 C2 FA | 	rdbyte	arg01, local04
325b8     01 2C 86 F1 | 	sub	local04, #1
325bc     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
325c0     FD 16 02 F6 | 	mov	arg03, result1
325c4     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
325c8     01 2E CE F7 | 	test	local05, #1 wz
325cc                 | ' 		return FR_NOT_READY;
325cc     03 FA 05 56 |  if_ne	mov	result1, #3
325d0     98 04 90 5D |  if_ne	jmp	#LR__4970
325d4     00 28 0E F2 | 	cmp	local02, #0 wz
325d8     0B 2F 02 56 |  if_ne	mov	local05, arg03
325dc     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
325e0     04 2E CE 57 |  if_ne	test	local05, #4 wz
325e4                 | ' 		return FR_WRITE_PROTECTED;
325e4     0A FA 05 56 |  if_ne	mov	result1, #10
325e8     80 04 90 5D |  if_ne	jmp	#LR__4970
325ec     16 13 02 F6 | 	mov	arg01, local04
325f0     00 14 06 F6 | 	mov	arg02, #0
325f4     00 FE BF FD | 	call	#_fatfs_cc_find_volume
325f8     FD 12 02 F6 | 	mov	arg01, result1
325fc     04 12 0E F2 | 	cmp	arg01, #4 wz
32600     01 FA 05 A6 |  if_e	mov	result1, #1
32604     64 04 90 AD |  if_e	jmp	#LR__4970
32608     02 12 16 F2 | 	cmp	arg01, #2 wc
3260c     0D FA 05 36 |  if_ae	mov	result1, #13
32610     58 04 90 3D |  if_ae	jmp	#LR__4970
32614     30 2C 06 F1 | 	add	local04, #48
32618     16 31 02 FB | 	rdlong	local06, local04
3261c     04 2C 06 F1 | 	add	local04, #4
32620     16 13 02 F6 | 	mov	arg01, local04
32624     34 2C 86 F1 | 	sub	local04, #52
32628     0B 12 06 F1 | 	add	arg01, #11
3262c                 | ' {
3262c                 | ' 
3262c                 | ' 	return *((WORD*)ptr);
3262c     09 FB E1 FA | 	rdword	result1, arg01
32630     01 00 00 FF 
32634     00 FA 0D F2 | 	cmp	result1, ##512 wz
32638     0D FA 05 56 |  if_ne	mov	result1, #13
3263c     2C 04 90 5D |  if_ne	jmp	#LR__4970
32640     34 2C 06 F1 | 	add	local04, #52
32644     16 13 02 F6 | 	mov	arg01, local04
32648     34 2C 86 F1 | 	sub	local04, #52
3264c     16 12 06 F1 | 	add	arg01, #22
32650                 | ' {
32650                 | ' 
32650                 | ' 	return *((WORD*)ptr);
32650     09 FB E1 FA | 	rdword	result1, arg01
32654     FD 32 0A F6 | 	mov	local07, result1 wz
32658     18 00 90 5D |  if_ne	jmp	#LR__4962
3265c     34 2C 06 F1 | 	add	local04, #52
32660     16 13 02 F6 | 	mov	arg01, local04
32664     34 2C 86 F1 | 	sub	local04, #52
32668     24 12 06 F1 | 	add	arg01, #36
3266c                 | ' {
3266c                 | ' 
3266c                 | ' 	return *((DWORD*)ptr);
3266c     09 FB 01 FB | 	rdlong	result1, arg01
32670     FD 32 02 F6 | 	mov	local07, result1
32674                 | LR__4962
32674     1C 2C 06 F1 | 	add	local04, #28
32678     16 33 62 FC | 	wrlong	local07, local04
3267c     28 2C 06 F1 | 	add	local04, #40
32680     16 2F C2 FA | 	rdbyte	local05, local04
32684     42 2C 86 F1 | 	sub	local04, #66
32688     16 2F 42 FC | 	wrbyte	local05, local04
3268c     16 2F C2 FA | 	rdbyte	local05, local04
32690     02 2C 86 F1 | 	sub	local04, #2
32694     01 2E 0E F2 | 	cmp	local05, #1 wz
32698     02 2C 06 51 |  if_ne	add	local04, #2
3269c     16 2F C2 5A |  if_ne	rdbyte	local05, local04
326a0     02 2C 86 51 |  if_ne	sub	local04, #2
326a4     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
326a8     0D FA 05 56 |  if_ne	mov	result1, #13
326ac     BC 03 90 5D |  if_ne	jmp	#LR__4970
326b0     02 2C 06 F1 | 	add	local04, #2
326b4     16 2F C2 FA | 	rdbyte	local05, local04
326b8     17 33 02 FD | 	qmul	local07, local05
326bc     3F 2C 06 F1 | 	add	local04, #63
326c0     16 2F C2 FA | 	rdbyte	local05, local04
326c4     37 2C 86 F1 | 	sub	local04, #55
326c8     16 2F 52 FC | 	wrword	local05, local04
326cc     16 2F EA FA | 	rdword	local05, local04 wz
326d0     0A 2C 86 F1 | 	sub	local04, #10
326d4     18 32 62 FD | 	getqx	local07
326d8     20 00 90 AD |  if_e	jmp	#LR__4963
326dc     0A 2C 06 F1 | 	add	local04, #10
326e0     16 2F E2 FA | 	rdword	local05, local04
326e4     17 2B 32 F9 | 	getword	local03, local05, #0
326e8     0A 2C 86 F1 | 	sub	local04, #10
326ec     17 2F 32 F9 | 	getword	local05, local05, #0
326f0     01 2E 86 F1 | 	sub	local05, #1
326f4     17 2B CA F7 | 	test	local03, local05 wz
326f8     08 00 90 AD |  if_e	jmp	#LR__4964
326fc                 | LR__4963
326fc     0D FA 05 F6 | 	mov	result1, #13
32700     68 03 90 FD | 	jmp	#LR__4970
32704                 | LR__4964
32704     34 2C 06 F1 | 	add	local04, #52
32708     16 13 02 F6 | 	mov	arg01, local04
3270c     11 12 06 F1 | 	add	arg01, #17
32710                 | ' {
32710                 | ' 
32710                 | ' 	return *((WORD*)ptr);
32710     09 FB E1 FA | 	rdword	result1, arg01
32714     2C 2C 86 F1 | 	sub	local04, #44
32718     16 FB 51 FC | 	wrword	result1, local04
3271c     16 2F E2 FA | 	rdword	local05, local04
32720     08 2C 86 F1 | 	sub	local04, #8
32724     17 13 52 F6 | 	abs	arg01, local05 wc
32728     09 13 42 F8 | 	getnib	arg01, arg01, #0
3272c     09 13 8A F6 | 	negc	arg01, arg01 wz
32730     0D FA 05 56 |  if_ne	mov	result1, #13
32734     34 03 90 5D |  if_ne	jmp	#LR__4970
32738     34 2C 06 F1 | 	add	local04, #52
3273c     16 13 02 F6 | 	mov	arg01, local04
32740     34 2C 86 F1 | 	sub	local04, #52
32744     13 12 06 F1 | 	add	arg01, #19
32748                 | ' {
32748                 | ' 
32748                 | ' 	return *((WORD*)ptr);
32748     09 FB E1 FA | 	rdword	result1, arg01
3274c     FD 34 0A F6 | 	mov	local08, result1 wz
32750     34 2C 06 A1 |  if_e	add	local04, #52
32754     16 13 02 A6 |  if_e	mov	arg01, local04
32758     34 2C 86 A1 |  if_e	sub	local04, #52
3275c     20 12 06 A1 |  if_e	add	arg01, #32
32760                 | ' {
32760                 | ' 
32760                 | ' 	return *((DWORD*)ptr);
32760     09 35 02 AB |  if_e	rdlong	local08, arg01
32764     34 2C 06 F1 | 	add	local04, #52
32768     16 13 02 F6 | 	mov	arg01, local04
3276c     34 2C 86 F1 | 	sub	local04, #52
32770     0E 12 06 F1 | 	add	arg01, #14
32774                 | ' {
32774                 | ' 
32774                 | ' 	return *((WORD*)ptr);
32774     09 FB E1 FA | 	rdword	result1, arg01
32778     FD 12 02 F6 | 	mov	arg01, result1
3277c     09 2F 02 F6 | 	mov	local05, arg01
32780     0F 2E 4E F7 | 	zerox	local05, #15 wz
32784     0D FA 05 A6 |  if_e	mov	result1, #13
32788     E0 02 90 AD |  if_e	jmp	#LR__4970
3278c     09 37 32 F9 | 	getword	local09, arg01, #0
32790     19 37 02 F1 | 	add	local09, local07
32794     08 2C 06 F1 | 	add	local04, #8
32798     16 2F E2 FA | 	rdword	local05, local04
3279c     08 2C 86 F1 | 	sub	local04, #8
327a0     17 2F 52 F6 | 	abs	local05, local05 wc
327a4     04 2E 46 F0 | 	shr	local05, #4
327a8     17 37 82 F3 | 	sumc	local09, local05
327ac     1B 35 12 F2 | 	cmp	local08, local09 wc
327b0     0D FA 05 C6 |  if_b	mov	result1, #13
327b4     B4 02 90 CD |  if_b	jmp	#LR__4970
327b8     1B 35 82 F1 | 	sub	local08, local09
327bc     0A 2C 06 F1 | 	add	local04, #10
327c0     16 2F E2 FA | 	rdword	local05, local04
327c4     17 35 12 FD | 	qdiv	local08, local05
327c8     0A 2C 86 F1 | 	sub	local04, #10
327cc     18 2E 62 FD | 	getqx	local05
327d0     00 2E 0E F2 | 	cmp	local05, #0 wz
327d4     0D FA 05 A6 |  if_e	mov	result1, #13
327d8     90 02 90 AD |  if_e	jmp	#LR__4970
327dc     00 38 06 F6 | 	mov	local10, #0
327e0     FF FF 07 FF 
327e4     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
327e8     03 38 06 C6 |  if_b	mov	local10, #3
327ec     7F 00 00 FF 
327f0     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
327f4     02 38 06 C6 |  if_b	mov	local10, #2
327f8     07 00 00 FF 
327fc     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
32800     01 38 06 C6 |  if_b	mov	local10, #1
32804     00 38 0E F2 | 	cmp	local10, #0 wz
32808     0D FA 05 A6 |  if_e	mov	result1, #13
3280c     5C 02 90 AD |  if_e	jmp	#LR__4970
32810     02 2E 06 F1 | 	add	local05, #2
32814     18 2C 06 F1 | 	add	local04, #24
32818     16 2F 62 FC | 	wrlong	local05, local04
3281c     08 2C 06 F1 | 	add	local04, #8
32820     16 31 62 FC | 	wrlong	local06, local04
32824     18 2F 02 F6 | 	mov	local05, local06
32828     09 13 32 F9 | 	getword	arg01, arg01, #0
3282c     09 2F 02 F1 | 	add	local05, arg01
32830     04 2C 06 F1 | 	add	local04, #4
32834     16 2F 62 FC | 	wrlong	local05, local04
32838     18 2F 02 F6 | 	mov	local05, local06
3283c     1B 2F 02 F1 | 	add	local05, local09
32840     08 2C 06 F1 | 	add	local04, #8
32844     16 2F 62 FC | 	wrlong	local05, local04
32848     2C 2C 86 F1 | 	sub	local04, #44
3284c     03 38 0E F2 | 	cmp	local10, #3 wz
32850     5C 00 90 5D |  if_ne	jmp	#LR__4965
32854     34 2C 06 F1 | 	add	local04, #52
32858     16 13 02 F6 | 	mov	arg01, local04
3285c     34 2C 86 F1 | 	sub	local04, #52
32860     2A 12 06 F1 | 	add	arg01, #42
32864                 | ' {
32864                 | ' 
32864                 | ' 	return *((WORD*)ptr);
32864     09 FB E9 FA | 	rdword	result1, arg01 wz
32868     0D FA 05 56 |  if_ne	mov	result1, #13
3286c     FC 01 90 5D |  if_ne	jmp	#LR__4970
32870     08 2C 06 F1 | 	add	local04, #8
32874     16 2F EA FA | 	rdword	local05, local04 wz
32878     08 2C 86 F1 | 	sub	local04, #8
3287c     0D FA 05 56 |  if_ne	mov	result1, #13
32880     E8 01 90 5D |  if_ne	jmp	#LR__4970
32884     34 2C 06 F1 | 	add	local04, #52
32888     16 13 02 F6 | 	mov	arg01, local04
3288c     2C 12 06 F1 | 	add	arg01, #44
32890                 | ' {
32890                 | ' 
32890                 | ' 	return *((DWORD*)ptr);
32890     09 FB 01 FB | 	rdlong	result1, arg01
32894     0C 2C 86 F1 | 	sub	local04, #12
32898     16 FB 61 FC | 	wrlong	result1, local04
3289c     10 2C 86 F1 | 	sub	local04, #16
328a0     16 3B 02 FB | 	rdlong	local11, local04
328a4     18 2C 86 F1 | 	sub	local04, #24
328a8     02 3A 66 F0 | 	shl	local11, #2
328ac     6C 00 90 FD | 	jmp	#LR__4967
328b0                 | LR__4965
328b0     08 2C 06 F1 | 	add	local04, #8
328b4     16 2F EA FA | 	rdword	local05, local04 wz
328b8     08 2C 86 F1 | 	sub	local04, #8
328bc     0D FA 05 A6 |  if_e	mov	result1, #13
328c0     A8 01 90 AD |  if_e	jmp	#LR__4970
328c4     24 2C 06 F1 | 	add	local04, #36
328c8     16 2F 02 FB | 	rdlong	local05, local04
328cc     19 2F 02 F1 | 	add	local05, local07
328d0     04 2C 06 F1 | 	add	local04, #4
328d4     16 2F 62 FC | 	wrlong	local05, local04
328d8     28 2C 86 F1 | 	sub	local04, #40
328dc     02 38 0E F2 | 	cmp	local10, #2 wz
328e0     18 2C 06 A1 |  if_e	add	local04, #24
328e4     16 2F 02 AB |  if_e	rdlong	local05, local04
328e8     18 2C 86 A1 |  if_e	sub	local04, #24
328ec     01 2E 66 A0 |  if_e	shl	local05, #1
328f0     24 00 90 AD |  if_e	jmp	#LR__4966
328f4     18 2C 06 F1 | 	add	local04, #24
328f8     16 3B 02 FB | 	rdlong	local11, local04
328fc     1D 2F 02 F6 | 	mov	local05, local11
32900     01 2E 66 F0 | 	shl	local05, #1
32904     1D 2F 02 F1 | 	add	local05, local11
32908     01 2E 46 F0 | 	shr	local05, #1
3290c     18 2C 86 F1 | 	sub	local04, #24
32910     01 3A 06 F5 | 	and	local11, #1
32914     1D 2F 02 F1 | 	add	local05, local11
32918                 | LR__4966
32918     17 3B 02 F6 | 	mov	local11, local05
3291c                 | LR__4967
3291c     FF 3B 06 F1 | 	add	local11, #511
32920     09 3A 46 F0 | 	shr	local11, #9
32924     1C 2C 06 F1 | 	add	local04, #28
32928     16 17 02 FB | 	rdlong	arg03, local04
3292c     1C 2C 86 F1 | 	sub	local04, #28
32930     1D 17 12 F2 | 	cmp	arg03, local11 wc
32934     0D FA 05 C6 |  if_b	mov	result1, #13
32938     30 01 90 CD |  if_b	jmp	#LR__4970
3293c     14 2C 06 F1 | 	add	local04, #20
32940     FF FF FF FF 
32944     16 FF 6B FC | 	wrlong	##-1, local04
32948     04 2C 86 F1 | 	sub	local04, #4
3294c     FF FF FF FF 
32950     16 FF 6B FC | 	wrlong	##-1, local04
32954     0C 2C 86 F1 | 	sub	local04, #12
32958     16 01 49 FC | 	wrbyte	#128, local04
3295c     04 2C 86 F1 | 	sub	local04, #4
32960     03 38 0E F2 | 	cmp	local10, #3 wz
32964     D0 00 90 5D |  if_ne	jmp	#LR__4969
32968     34 2C 06 F1 | 	add	local04, #52
3296c     16 13 02 F6 | 	mov	arg01, local04
32970     34 2C 86 F1 | 	sub	local04, #52
32974     30 12 06 F1 | 	add	arg01, #48
32978                 | ' {
32978                 | ' 
32978                 | ' 	return *((WORD*)ptr);
32978     09 FB E1 FA | 	rdword	result1, arg01
3297c     FD 2E 32 F9 | 	getword	local05, result1, #0
32980     01 2E 0E F2 | 	cmp	local05, #1 wz
32984     B0 00 90 5D |  if_ne	jmp	#LR__4969
32988     01 30 06 F1 | 	add	local06, #1
3298c     16 13 02 F6 | 	mov	arg01, local04
32990     18 15 02 F6 | 	mov	arg02, local06
32994     CC CD BF FD | 	call	#_fatfs_cc_move_window
32998     00 FA 0D F2 | 	cmp	result1, #0 wz
3299c     98 00 90 5D |  if_ne	jmp	#LR__4969
329a0     04 2C 06 F1 | 	add	local04, #4
329a4     16 01 48 FC | 	wrbyte	#0, local04
329a8     30 2C 06 F1 | 	add	local04, #48
329ac     16 13 02 F6 | 	mov	arg01, local04
329b0     34 2C 86 F1 | 	sub	local04, #52
329b4     FE 13 06 F1 | 	add	arg01, #510
329b8                 | ' {
329b8                 | ' 
329b8                 | ' 	return *((WORD*)ptr);
329b8     09 FB E1 FA | 	rdword	result1, arg01
329bc     FD 2E 32 F9 | 	getword	local05, result1, #0
329c0     55 00 00 FF 
329c4     55 2E 0E F2 | 	cmp	local05, ##43605 wz
329c8     34 2C 06 A1 |  if_e	add	local04, #52
329cc     16 13 02 A6 |  if_e	mov	arg01, local04
329d0     34 2C 86 A1 |  if_e	sub	local04, #52
329d4                 | ' {
329d4                 | ' 
329d4                 | ' 	return *((DWORD*)ptr);
329d4     09 FB 01 AB |  if_e	rdlong	result1, arg01
329d8     A9 B0 20 AF 
329dc     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
329e0     54 00 90 5D |  if_ne	jmp	#LR__4968
329e4     34 2C 06 F1 | 	add	local04, #52
329e8     16 13 02 F6 | 	mov	arg01, local04
329ec     34 2C 86 F1 | 	sub	local04, #52
329f0     E4 13 06 F1 | 	add	arg01, #484
329f4                 | ' {
329f4                 | ' 
329f4                 | ' 	return *((DWORD*)ptr);
329f4     09 FB 01 FB | 	rdlong	result1, arg01
329f8     B9 A0 30 FF 
329fc     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
32a00     34 00 90 5D |  if_ne	jmp	#LR__4968
32a04     34 2C 06 F1 | 	add	local04, #52
32a08     16 13 02 F6 | 	mov	arg01, local04
32a0c     E8 13 06 F1 | 	add	arg01, #488
32a10                 | ' {
32a10                 | ' 
32a10                 | ' 	return *((DWORD*)ptr);
32a10     09 FB 01 FB | 	rdlong	result1, arg01
32a14     20 2C 86 F1 | 	sub	local04, #32
32a18     16 FB 61 FC | 	wrlong	result1, local04
32a1c     20 2C 06 F1 | 	add	local04, #32
32a20     16 13 02 F6 | 	mov	arg01, local04
32a24     EC 13 06 F1 | 	add	arg01, #492
32a28                 | ' {
32a28                 | ' 
32a28                 | ' 	return *((DWORD*)ptr);
32a28     09 FB 01 FB | 	rdlong	result1, arg01
32a2c     24 2C 86 F1 | 	sub	local04, #36
32a30     16 FB 61 FC | 	wrlong	result1, local04
32a34     10 2C 86 F1 | 	sub	local04, #16
32a38                 | LR__4968
32a38                 | LR__4969
32a38     16 39 42 FC | 	wrbyte	local10, local04
32a3c     04 E4 05 F1 | 	add	objptr, #4
32a40     F2 2E E2 FA | 	rdword	local05, objptr
32a44     01 2E 06 F1 | 	add	local05, #1
32a48     F2 2E 52 FC | 	wrword	local05, objptr
32a4c     F2 3A E2 FA | 	rdword	local11, objptr
32a50     06 2C 06 F1 | 	add	local04, #6
32a54     16 3B 52 FC | 	wrword	local11, local04
32a58     04 E4 05 F1 | 	add	objptr, #4
32a5c     06 2C 06 F1 | 	add	local04, #6
32a60     16 E5 61 FC | 	wrlong	objptr, local04
32a64                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
32a64                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
32a64                 | ' 			{
32a64                 | ' 
32a64                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
32a64                 | ' 
32a64                 | ' 
32a64                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
32a64                 | ' 
32a64                 | ' 			}
32a64                 | ' 		}
32a64                 | ' 
32a64                 | ' 
32a64                 | ' 	}
32a64                 | ' 
32a64                 | ' 	fs->fs_type = (BYTE)fmt;
32a64                 | ' 	fs->id = ++Fsid;
32a64                 | ' 
32a64                 | ' 	fs->lfnbuf = LfnBuf;
32a64                 | ' #line 3567 "ff.c"
32a64                 | ' 	return FR_OK;
32a64     00 FA 05 F6 | 	mov	result1, #0
32a68     08 E4 85 F1 | 	sub	objptr, #8
32a6c                 | LR__4970
32a6c     A7 F0 03 F6 | 	mov	ptra, fp
32a70     B2 00 A0 FD | 	call	#popregs_
32a74                 | _fatfs_cc_mount_volume_ret
32a74     2D 00 64 FD | 	ret
32a78                 | 
32a78                 | _fatfs_cc_validate
32a78     09 01 0A F6 | 	mov	_var01, arg01 wz
32a7c     09 02 06 F6 | 	mov	_var02, #9
32a80     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
32a84     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
32a88     50 00 90 AD |  if_e	jmp	#LR__4980
32a8c     04 00 06 F1 | 	add	_var01, #4
32a90     00 07 E2 FA | 	rdword	_var04, _var01
32a94     04 00 86 F1 | 	sub	_var01, #4
32a98     00 13 02 FB | 	rdlong	arg01, _var01
32a9c     06 12 06 F1 | 	add	arg01, #6
32aa0     09 FB E1 FA | 	rdword	result1, arg01
32aa4     FD 06 0A F2 | 	cmp	_var04, result1 wz
32aa8     30 00 90 5D |  if_ne	jmp	#LR__4980
32aac     00 07 02 FB | 	rdlong	_var04, _var01
32ab0     01 06 06 F1 | 	add	_var04, #1
32ab4     03 13 CA FA | 	rdbyte	arg01, _var04 wz
32ab8     01 FA 05 56 |  if_ne	mov	result1, #1
32abc                 | ' 
32abc                 | ' 	return Stat;
32abc     01 00 00 AF 
32ac0     20 E4 05 A1 |  if_e	add	objptr, ##544
32ac4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
32ac8     01 00 00 AF 
32acc     20 E4 85 A1 |  if_e	sub	objptr, ##544
32ad0     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
32ad4     01 04 CE F7 | 	test	_var03, #1 wz
32ad8     00 02 06 A6 |  if_e	mov	_var02, #0
32adc                 | LR__4980
32adc     00 02 0E F2 | 	cmp	_var02, #0 wz
32ae0     00 05 02 AB |  if_e	rdlong	_var03, _var01
32ae4     00 04 06 56 |  if_ne	mov	_var03, #0
32ae8     0A 05 62 FC | 	wrlong	_var03, arg02
32aec                 | ' 			res = FR_OK;
32aec                 | ' 		}
32aec                 | ' 
32aec                 | ' 	}
32aec                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
32aec                 | ' 	return res;
32aec     01 FB 01 F6 | 	mov	result1, _var02
32af0                 | _fatfs_cc_validate_ret
32af0     2D 00 64 FD | 	ret
32af4                 | 
32af4                 | _fatfs_cc_f_mount
32af4     01 4A 05 F6 | 	mov	COUNT_, #1
32af8     A8 00 A0 FD | 	call	#pushregs_
32afc     20 F0 07 F1 | 	add	ptra, #32
32b00     04 4E 05 F1 | 	add	fp, #4
32b04     A7 12 62 FC | 	wrlong	arg01, fp
32b08     04 4E 05 F1 | 	add	fp, #4
32b0c     A7 14 62 FC | 	wrlong	arg02, fp
32b10     04 4E 05 F1 | 	add	fp, #4
32b14     A7 16 42 FC | 	wrbyte	arg03, fp
32b18     04 4E 85 F1 | 	sub	fp, #4
32b1c     A7 16 02 FB | 	rdlong	arg03, fp
32b20     14 4E 05 F1 | 	add	fp, #20
32b24     A7 16 62 FC | 	wrlong	arg03, fp
32b28     A7 12 02 F6 | 	mov	arg01, fp
32b2c     1C 4E 85 F1 | 	sub	fp, #28
32b30     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
32b34     14 4E 05 F1 | 	add	fp, #20
32b38     A7 FA 61 FC | 	wrlong	result1, fp
32b3c     14 4E 85 F1 | 	sub	fp, #20
32b40     00 FA 55 F2 | 	cmps	result1, #0 wc
32b44     0B FA 05 C6 |  if_b	mov	result1, #11
32b48     C0 00 90 CD |  if_b	jmp	#LR__4991
32b4c     14 4E 05 F1 | 	add	fp, #20
32b50     A7 16 02 FB | 	rdlong	arg03, fp
32b54     02 16 66 F0 | 	shl	arg03, #2
32b58     F2 16 02 F1 | 	add	arg03, objptr
32b5c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
32b60     04 4E 85 F1 | 	sub	fp, #4
32b64     A7 16 62 FC | 	wrlong	arg03, fp
32b68     10 4E 85 F1 | 	sub	fp, #16
32b6c     28 00 90 AD |  if_e	jmp	#LR__4990
32b70     10 4E 05 F1 | 	add	fp, #16
32b74     A7 16 02 FB | 	rdlong	arg03, fp
32b78     10 4E 85 F1 | 	sub	fp, #16
32b7c     01 16 06 F1 | 	add	arg03, #1
32b80     0B 13 C2 FA | 	rdbyte	arg01, arg03
32b84     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
32b88     10 4E 05 F1 | 	add	fp, #16
32b8c     A7 16 02 FB | 	rdlong	arg03, fp
32b90     10 4E 85 F1 | 	sub	fp, #16
32b94     0B 01 48 FC | 	wrbyte	#0, arg03
32b98                 | LR__4990
32b98     04 4E 05 F1 | 	add	fp, #4
32b9c     A7 26 0A FB | 	rdlong	local01, fp wz
32ba0     04 4E 85 F1 | 	sub	fp, #4
32ba4     04 4E 05 51 |  if_ne	add	fp, #4
32ba8     A7 26 02 5B |  if_ne	rdlong	local01, fp
32bac     04 4E 85 51 |  if_ne	sub	fp, #4
32bb0     13 01 48 5C |  if_ne	wrbyte	#0, local01
32bb4     14 4E 05 F1 | 	add	fp, #20
32bb8     A7 26 02 FB | 	rdlong	local01, fp
32bbc     02 26 66 F0 | 	shl	local01, #2
32bc0     F2 26 02 F1 | 	add	local01, objptr
32bc4     10 4E 85 F1 | 	sub	fp, #16
32bc8     A7 16 02 FB | 	rdlong	arg03, fp
32bcc     13 17 62 FC | 	wrlong	arg03, local01
32bd0     08 4E 05 F1 | 	add	fp, #8
32bd4     A7 26 CA FA | 	rdbyte	local01, fp wz
32bd8     0C 4E 85 F1 | 	sub	fp, #12
32bdc     00 FA 05 A6 |  if_e	mov	result1, #0
32be0     28 00 90 AD |  if_e	jmp	#LR__4991
32be4     08 4E 05 F1 | 	add	fp, #8
32be8     A7 12 02 F6 | 	mov	arg01, fp
32bec     04 4E 85 F1 | 	sub	fp, #4
32bf0     A7 14 02 F6 | 	mov	arg02, fp
32bf4     04 4E 85 F1 | 	sub	fp, #4
32bf8     00 16 06 F6 | 	mov	arg03, #0
32bfc     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
32c00     18 4E 05 F1 | 	add	fp, #24
32c04     A7 FA 61 FC | 	wrlong	result1, fp
32c08                 | ' 
32c08                 | ' 	res = mount_volume(&path, &fs, 0);
32c08                 | ' 	return res ;
32c08     18 4E 85 F1 | 	sub	fp, #24
32c0c                 | LR__4991
32c0c     A7 F0 03 F6 | 	mov	ptra, fp
32c10     B2 00 A0 FD | 	call	#popregs_
32c14                 | _fatfs_cc_f_mount_ret
32c14     2D 00 64 FD | 	ret
32c18                 | 
32c18                 | _fatfs_cc_f_open
32c18     02 4A 05 F6 | 	mov	COUNT_, #2
32c1c     A8 00 A0 FD | 	call	#pushregs_
32c20     60 F0 07 F1 | 	add	ptra, #96
32c24     04 4E 05 F1 | 	add	fp, #4
32c28     A7 12 62 FC | 	wrlong	arg01, fp
32c2c     04 4E 05 F1 | 	add	fp, #4
32c30     A7 14 62 FC | 	wrlong	arg02, fp
32c34     04 4E 05 F1 | 	add	fp, #4
32c38     A7 16 42 FC | 	wrbyte	arg03, fp
32c3c     08 4E 85 F1 | 	sub	fp, #8
32c40     A7 18 0A FB | 	rdlong	arg04, fp wz
32c44     04 4E 85 F1 | 	sub	fp, #4
32c48     09 FA 05 A6 |  if_e	mov	result1, #9
32c4c     98 06 90 AD |  if_e	jmp	#LR__5017
32c50     0C 4E 05 F1 | 	add	fp, #12
32c54     A7 18 C2 FA | 	rdbyte	arg04, fp
32c58     3F 18 06 F5 | 	and	arg04, #63
32c5c     A7 18 42 FC | 	wrbyte	arg04, fp
32c60     04 4E 85 F1 | 	sub	fp, #4
32c64     A7 12 02 F6 | 	mov	arg01, fp
32c68     3C 4E 05 F1 | 	add	fp, #60
32c6c     A7 14 02 F6 | 	mov	arg02, fp
32c70     38 4E 85 F1 | 	sub	fp, #56
32c74     A7 16 C2 FA | 	rdbyte	arg03, fp
32c78     0C 4E 85 F1 | 	sub	fp, #12
32c7c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
32c80     10 4E 05 F1 | 	add	fp, #16
32c84     A7 FA 61 FC | 	wrlong	result1, fp
32c88     10 4E 85 F1 | 	sub	fp, #16
32c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
32c90     2C 06 90 5D |  if_ne	jmp	#LR__5016
32c94     44 4E 05 F1 | 	add	fp, #68
32c98     A7 18 02 FB | 	rdlong	arg04, fp
32c9c     30 4E 85 F1 | 	sub	fp, #48
32ca0     A7 18 62 FC | 	wrlong	arg04, fp
32ca4     A7 12 02 F6 | 	mov	arg01, fp
32ca8     0C 4E 85 F1 | 	sub	fp, #12
32cac     A7 26 02 FB | 	rdlong	local01, fp
32cb0     08 4E 85 F1 | 	sub	fp, #8
32cb4     13 15 02 F6 | 	mov	arg02, local01
32cb8     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
32cbc     10 4E 05 F1 | 	add	fp, #16
32cc0     A7 FA 61 FC | 	wrlong	result1, fp
32cc4     10 4E 85 F1 | 	sub	fp, #16
32cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
32ccc     1C 00 90 5D |  if_ne	jmp	#LR__5000
32cd0     3F 4E 05 F1 | 	add	fp, #63
32cd4     A7 18 C2 FA | 	rdbyte	arg04, fp
32cd8     3F 4E 85 F1 | 	sub	fp, #63
32cdc     80 18 CE F7 | 	test	arg04, #128 wz
32ce0     10 4E 05 51 |  if_ne	add	fp, #16
32ce4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
32ce8     10 4E 85 51 |  if_ne	sub	fp, #16
32cec                 | LR__5000
32cec     0C 4E 05 F1 | 	add	fp, #12
32cf0     A7 18 C2 FA | 	rdbyte	arg04, fp
32cf4     0C 4E 85 F1 | 	sub	fp, #12
32cf8     1C 18 CE F7 | 	test	arg04, #28 wz
32cfc     F0 01 90 AD |  if_e	jmp	#LR__5005
32d00     10 4E 05 F1 | 	add	fp, #16
32d04     A7 26 0A FB | 	rdlong	local01, fp wz
32d08     10 4E 85 F1 | 	sub	fp, #16
32d0c     48 00 90 AD |  if_e	jmp	#LR__5002
32d10     10 4E 05 F1 | 	add	fp, #16
32d14     A7 18 02 FB | 	rdlong	arg04, fp
32d18     10 4E 85 F1 | 	sub	fp, #16
32d1c     04 18 0E F2 | 	cmp	arg04, #4 wz
32d20     1C 00 90 5D |  if_ne	jmp	#LR__5001
32d24     14 4E 05 F1 | 	add	fp, #20
32d28     A7 12 02 F6 | 	mov	arg01, fp
32d2c     14 4E 85 F1 | 	sub	fp, #20
32d30     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
32d34     10 4E 05 F1 | 	add	fp, #16
32d38     A7 FA 61 FC | 	wrlong	result1, fp
32d3c     10 4E 85 F1 | 	sub	fp, #16
32d40                 | LR__5001
32d40     0C 4E 05 F1 | 	add	fp, #12
32d44     A7 26 C2 FA | 	rdbyte	local01, fp
32d48     08 26 46 F5 | 	or	local01, #8
32d4c     A7 26 42 FC | 	wrbyte	local01, fp
32d50     0C 4E 85 F1 | 	sub	fp, #12
32d54     3C 00 90 FD | 	jmp	#LR__5004
32d58                 | LR__5002
32d58     1A 4E 05 F1 | 	add	fp, #26
32d5c     A7 26 C2 FA | 	rdbyte	local01, fp
32d60     1A 4E 85 F1 | 	sub	fp, #26
32d64     11 26 CE F7 | 	test	local01, #17 wz
32d68     10 4E 05 51 |  if_ne	add	fp, #16
32d6c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
32d70     10 4E 85 51 |  if_ne	sub	fp, #16
32d74     1C 00 90 5D |  if_ne	jmp	#LR__5003
32d78     0C 4E 05 F1 | 	add	fp, #12
32d7c     A7 26 C2 FA | 	rdbyte	local01, fp
32d80     0C 4E 85 F1 | 	sub	fp, #12
32d84     04 26 CE F7 | 	test	local01, #4 wz
32d88     10 4E 05 51 |  if_ne	add	fp, #16
32d8c     A7 10 68 5C |  if_ne	wrlong	#8, fp
32d90     10 4E 85 51 |  if_ne	sub	fp, #16
32d94                 | LR__5003
32d94                 | LR__5004
32d94     10 4E 05 F1 | 	add	fp, #16
32d98     A7 26 0A FB | 	rdlong	local01, fp wz
32d9c     10 4E 85 F1 | 	sub	fp, #16
32da0     A8 01 90 5D |  if_ne	jmp	#LR__5008
32da4     0C 4E 05 F1 | 	add	fp, #12
32da8     A7 26 C2 FA | 	rdbyte	local01, fp
32dac     0C 4E 85 F1 | 	sub	fp, #12
32db0     08 26 CE F7 | 	test	local01, #8 wz
32db4     94 01 90 AD |  if_e	jmp	#LR__5008
32db8     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
32dbc     54 4E 05 F1 | 	add	fp, #84
32dc0     A7 FA 61 FC | 	wrlong	result1, fp
32dc4     24 4E 85 F1 | 	sub	fp, #36
32dc8     A7 12 02 FB | 	rdlong	arg01, fp
32dcc     0E 12 06 F1 | 	add	arg01, #14
32dd0     09 FB 61 FC | 	wrlong	result1, arg01
32dd4     A7 12 02 FB | 	rdlong	arg01, fp
32dd8     16 12 06 F1 | 	add	arg01, #22
32ddc     24 4E 05 F1 | 	add	fp, #36
32de0     A7 14 02 FB | 	rdlong	arg02, fp
32de4     09 15 62 FC | 	wrlong	arg02, arg01
32de8     10 4E 85 F1 | 	sub	fp, #16
32dec     A7 12 02 FB | 	rdlong	arg01, fp
32df0     14 4E 85 F1 | 	sub	fp, #20
32df4     A7 14 02 FB | 	rdlong	arg02, fp
32df8     30 4E 85 F1 | 	sub	fp, #48
32dfc     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
32e00     48 4E 05 F1 | 	add	fp, #72
32e04     A7 FA 61 FC | 	wrlong	result1, fp
32e08     18 4E 85 F1 | 	sub	fp, #24
32e0c     A7 26 02 FB | 	rdlong	local01, fp
32e10     0B 26 06 F1 | 	add	local01, #11
32e14     13 41 48 FC | 	wrbyte	#32, local01
32e18     14 4E 05 F1 | 	add	fp, #20
32e1c     A7 12 02 FB | 	rdlong	arg01, fp
32e20     14 4E 85 F1 | 	sub	fp, #20
32e24     A7 14 02 FB | 	rdlong	arg02, fp
32e28     30 4E 85 F1 | 	sub	fp, #48
32e2c     00 16 06 F6 | 	mov	arg03, #0
32e30     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
32e34     30 4E 05 F1 | 	add	fp, #48
32e38     A7 12 02 FB | 	rdlong	arg01, fp
32e3c     1C 12 06 F1 | 	add	arg01, #28
32e40     09 01 68 FC | 	wrlong	#0, arg01
32e44     14 4E 05 F1 | 	add	fp, #20
32e48     A7 26 02 FB | 	rdlong	local01, fp
32e4c     03 26 06 F1 | 	add	local01, #3
32e50     13 03 48 FC | 	wrbyte	#1, local01
32e54     04 4E 05 F1 | 	add	fp, #4
32e58     A7 26 0A FB | 	rdlong	local01, fp wz
32e5c     48 4E 85 F1 | 	sub	fp, #72
32e60     E8 00 90 AD |  if_e	jmp	#LR__5008
32e64     44 4E 05 F1 | 	add	fp, #68
32e68     A7 26 02 FB | 	rdlong	local01, fp
32e6c     30 26 06 F1 | 	add	local01, #48
32e70     13 27 02 FB | 	rdlong	local01, local01
32e74     14 4E 05 F1 | 	add	fp, #20
32e78     A7 26 62 FC | 	wrlong	local01, fp
32e7c     44 4E 85 F1 | 	sub	fp, #68
32e80     A7 12 02 F6 | 	mov	arg01, fp
32e84     34 4E 05 F1 | 	add	fp, #52
32e88     A7 14 02 FB | 	rdlong	arg02, fp
32e8c     48 4E 85 F1 | 	sub	fp, #72
32e90     00 16 06 F6 | 	mov	arg03, #0
32e94     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
32e98     10 4E 05 F1 | 	add	fp, #16
32e9c     A7 FA 61 FC | 	wrlong	result1, fp
32ea0     10 4E 85 F1 | 	sub	fp, #16
32ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
32ea8     A0 00 90 5D |  if_ne	jmp	#LR__5008
32eac     44 4E 05 F1 | 	add	fp, #68
32eb0     A7 12 02 FB | 	rdlong	arg01, fp
32eb4     14 4E 05 F1 | 	add	fp, #20
32eb8     A7 14 02 FB | 	rdlong	arg02, fp
32ebc     58 4E 85 F1 | 	sub	fp, #88
32ec0     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
32ec4     10 4E 05 F1 | 	add	fp, #16
32ec8     A7 FA 61 FC | 	wrlong	result1, fp
32ecc     34 4E 05 F1 | 	add	fp, #52
32ed0     A7 18 02 FB | 	rdlong	arg04, fp
32ed4     04 4E 05 F1 | 	add	fp, #4
32ed8     A7 26 02 FB | 	rdlong	local01, fp
32edc     48 4E 85 F1 | 	sub	fp, #72
32ee0     01 26 86 F1 | 	sub	local01, #1
32ee4     10 18 06 F1 | 	add	arg04, #16
32ee8     0C 27 62 FC | 	wrlong	local01, arg04
32eec     5C 00 90 FD | 	jmp	#LR__5008
32ef0                 | LR__5005
32ef0     10 4E 05 F1 | 	add	fp, #16
32ef4     A7 18 0A FB | 	rdlong	arg04, fp wz
32ef8     10 4E 85 F1 | 	sub	fp, #16
32efc     4C 00 90 5D |  if_ne	jmp	#LR__5007
32f00     1A 4E 05 F1 | 	add	fp, #26
32f04     A7 18 C2 FA | 	rdbyte	arg04, fp
32f08     1A 4E 85 F1 | 	sub	fp, #26
32f0c     10 18 CE F7 | 	test	arg04, #16 wz
32f10     10 4E 05 51 |  if_ne	add	fp, #16
32f14     A7 08 68 5C |  if_ne	wrlong	#4, fp
32f18     10 4E 85 51 |  if_ne	sub	fp, #16
32f1c     2C 00 90 5D |  if_ne	jmp	#LR__5006
32f20     0C 4E 05 F1 | 	add	fp, #12
32f24     A7 18 C2 FA | 	rdbyte	arg04, fp
32f28     0C 4E 85 F1 | 	sub	fp, #12
32f2c     02 18 CE F7 | 	test	arg04, #2 wz
32f30     1A 4E 05 51 |  if_ne	add	fp, #26
32f34     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
32f38     1A 4E 85 51 |  if_ne	sub	fp, #26
32f3c     01 26 CE 57 |  if_ne	test	local01, #1 wz
32f40     10 4E 05 51 |  if_ne	add	fp, #16
32f44     A7 0E 68 5C |  if_ne	wrlong	#7, fp
32f48     10 4E 85 51 |  if_ne	sub	fp, #16
32f4c                 | LR__5006
32f4c                 | LR__5007
32f4c                 | LR__5008
32f4c     10 4E 05 F1 | 	add	fp, #16
32f50     A7 26 0A FB | 	rdlong	local01, fp wz
32f54     10 4E 85 F1 | 	sub	fp, #16
32f58     60 00 90 5D |  if_ne	jmp	#LR__5009
32f5c     0C 4E 05 F1 | 	add	fp, #12
32f60     A7 28 C2 FA | 	rdbyte	local02, fp
32f64     0C 4E 85 F1 | 	sub	fp, #12
32f68     08 28 CE F7 | 	test	local02, #8 wz
32f6c     0C 4E 05 51 |  if_ne	add	fp, #12
32f70     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
32f74     40 28 46 55 |  if_ne	or	local02, #64
32f78     A7 28 42 5C |  if_ne	wrbyte	local02, fp
32f7c     0C 4E 85 51 |  if_ne	sub	fp, #12
32f80     04 4E 05 F1 | 	add	fp, #4
32f84     A7 28 02 FB | 	rdlong	local02, fp
32f88     40 4E 05 F1 | 	add	fp, #64
32f8c     A7 26 02 FB | 	rdlong	local01, fp
32f90     30 26 06 F1 | 	add	local01, #48
32f94     13 27 02 FB | 	rdlong	local01, local01
32f98     20 28 06 F1 | 	add	local02, #32
32f9c     14 27 62 FC | 	wrlong	local01, local02
32fa0     40 4E 85 F1 | 	sub	fp, #64
32fa4     A7 28 02 FB | 	rdlong	local02, fp
32fa8     2C 4E 05 F1 | 	add	fp, #44
32fac     A7 26 02 FB | 	rdlong	local01, fp
32fb0     30 4E 85 F1 | 	sub	fp, #48
32fb4     24 28 06 F1 | 	add	local02, #36
32fb8     14 27 62 FC | 	wrlong	local01, local02
32fbc                 | LR__5009
32fbc     10 4E 05 F1 | 	add	fp, #16
32fc0     A7 28 0A FB | 	rdlong	local02, fp wz
32fc4     10 4E 85 F1 | 	sub	fp, #16
32fc8     F4 02 90 5D |  if_ne	jmp	#LR__5015
32fcc     04 4E 05 F1 | 	add	fp, #4
32fd0     A7 28 02 FB | 	rdlong	local02, fp
32fd4     40 4E 05 F1 | 	add	fp, #64
32fd8     A7 12 02 FB | 	rdlong	arg01, fp
32fdc     14 4E 85 F1 | 	sub	fp, #20
32fe0     A7 14 02 FB | 	rdlong	arg02, fp
32fe4     30 4E 85 F1 | 	sub	fp, #48
32fe8     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
32fec     08 28 06 F1 | 	add	local02, #8
32ff0     14 FB 61 FC | 	wrlong	result1, local02
32ff4     04 4E 05 F1 | 	add	fp, #4
32ff8     A7 28 02 FB | 	rdlong	local02, fp
32ffc     2C 4E 05 F1 | 	add	fp, #44
33000     A7 12 02 FB | 	rdlong	arg01, fp
33004     1C 12 06 F1 | 	add	arg01, #28
33008                 | ' {
33008                 | ' 
33008                 | ' 	return *((DWORD*)ptr);
33008     09 FB 01 FB | 	rdlong	result1, arg01
3300c     0C 28 06 F1 | 	add	local02, #12
33010     14 FB 61 FC | 	wrlong	result1, local02
33014     2C 4E 85 F1 | 	sub	fp, #44
33018     A7 28 02 FB | 	rdlong	local02, fp
3301c     40 4E 05 F1 | 	add	fp, #64
33020     A7 26 02 FB | 	rdlong	local01, fp
33024     14 27 62 FC | 	wrlong	local01, local02
33028     40 4E 85 F1 | 	sub	fp, #64
3302c     A7 28 02 FB | 	rdlong	local02, fp
33030     40 4E 05 F1 | 	add	fp, #64
33034     A7 26 02 FB | 	rdlong	local01, fp
33038     06 26 06 F1 | 	add	local01, #6
3303c     13 27 E2 FA | 	rdword	local01, local01
33040     04 28 06 F1 | 	add	local02, #4
33044     14 27 52 FC | 	wrword	local01, local02
33048     40 4E 85 F1 | 	sub	fp, #64
3304c     A7 28 02 FB | 	rdlong	local02, fp
33050     08 4E 05 F1 | 	add	fp, #8
33054     A7 26 C2 FA | 	rdbyte	local01, fp
33058     10 28 06 F1 | 	add	local02, #16
3305c     14 27 42 FC | 	wrbyte	local01, local02
33060     08 4E 85 F1 | 	sub	fp, #8
33064     A7 28 02 FB | 	rdlong	local02, fp
33068     11 28 06 F1 | 	add	local02, #17
3306c     14 01 48 FC | 	wrbyte	#0, local02
33070     A7 28 02 FB | 	rdlong	local02, fp
33074     1C 28 06 F1 | 	add	local02, #28
33078     14 01 68 FC | 	wrlong	#0, local02
3307c     A7 28 02 FB | 	rdlong	local02, fp
33080     14 28 06 F1 | 	add	local02, #20
33084     14 01 68 FC | 	wrlong	#0, local02
33088     A7 12 02 FB | 	rdlong	arg01, fp
3308c     04 4E 85 F1 | 	sub	fp, #4
33090     28 12 06 F1 | 	add	arg01, #40
33094     00 14 06 F6 | 	mov	arg02, #0
33098     09 16 C6 F9 | 	decod	arg03, #9
3309c     98 00 A0 FD | 	call	#\builtin_bytefill_
330a0     0C 4E 05 F1 | 	add	fp, #12
330a4     A7 28 C2 FA | 	rdbyte	local02, fp
330a8     0C 4E 85 F1 | 	sub	fp, #12
330ac     20 28 CE F7 | 	test	local02, #32 wz
330b0     0C 02 90 AD |  if_e	jmp	#LR__5014
330b4     04 4E 05 F1 | 	add	fp, #4
330b8     A7 26 02 FB | 	rdlong	local01, fp
330bc     04 4E 85 F1 | 	sub	fp, #4
330c0     0C 26 06 F1 | 	add	local01, #12
330c4     13 29 02 FB | 	rdlong	local02, local01
330c8     01 28 16 F2 | 	cmp	local02, #1 wc
330cc     F0 01 90 CD |  if_b	jmp	#LR__5014
330d0     04 4E 05 F1 | 	add	fp, #4
330d4     A7 26 02 FB | 	rdlong	local01, fp
330d8     13 29 02 F6 | 	mov	local02, local01
330dc     0C 26 06 F1 | 	add	local01, #12
330e0     13 27 02 FB | 	rdlong	local01, local01
330e4     14 28 06 F1 | 	add	local02, #20
330e8     14 27 62 FC | 	wrlong	local01, local02
330ec     40 4E 05 F1 | 	add	fp, #64
330f0     A7 28 02 FB | 	rdlong	local02, fp
330f4     0A 28 06 F1 | 	add	local02, #10
330f8     14 29 E2 FA | 	rdword	local02, local02
330fc     09 28 66 F0 | 	shl	local02, #9
33100     08 4E 05 F1 | 	add	fp, #8
33104     A7 28 62 FC | 	wrlong	local02, fp
33108     48 4E 85 F1 | 	sub	fp, #72
3310c     A7 28 02 FB | 	rdlong	local02, fp
33110     08 28 06 F1 | 	add	local02, #8
33114     14 27 02 FB | 	rdlong	local01, local02
33118     4C 4E 05 F1 | 	add	fp, #76
3311c     A7 26 62 FC | 	wrlong	local01, fp
33120                 | ' 				fp->fptr = fp->obj.objsize;
33120                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
33120                 | ' 				clst = fp->obj.sclust;
33120                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
33120     4C 4E 85 F1 | 	sub	fp, #76
33124     A7 28 02 FB | 	rdlong	local02, fp
33128     0C 28 06 F1 | 	add	local02, #12
3312c     14 27 02 FB | 	rdlong	local01, local02
33130     58 4E 05 F1 | 	add	fp, #88
33134     A7 26 62 FC | 	wrlong	local01, fp
33138     5C 4E 85 F1 | 	sub	fp, #92
3313c                 | LR__5010
3313c     10 4E 05 F1 | 	add	fp, #16
33140     A7 28 0A FB | 	rdlong	local02, fp wz
33144     10 4E 85 F1 | 	sub	fp, #16
33148     94 00 90 5D |  if_ne	jmp	#LR__5011
3314c     5C 4E 05 F1 | 	add	fp, #92
33150     A7 28 02 FB | 	rdlong	local02, fp
33154     10 4E 85 F1 | 	sub	fp, #16
33158     A7 26 02 FB | 	rdlong	local01, fp
3315c     4C 4E 85 F1 | 	sub	fp, #76
33160     13 29 1A F2 | 	cmp	local02, local01 wcz
33164     78 00 90 ED |  if_be	jmp	#LR__5011
33168     04 4E 05 F1 | 	add	fp, #4
3316c     A7 12 02 FB | 	rdlong	arg01, fp
33170     4C 4E 05 F1 | 	add	fp, #76
33174     A7 14 02 FB | 	rdlong	arg02, fp
33178     50 4E 85 F1 | 	sub	fp, #80
3317c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
33180     50 4E 05 F1 | 	add	fp, #80
33184     A7 FA 61 FC | 	wrlong	result1, fp
33188     50 4E 85 F1 | 	sub	fp, #80
3318c     02 FA 15 F2 | 	cmp	result1, #2 wc
33190     10 4E 05 C1 |  if_b	add	fp, #16
33194     A7 04 68 CC |  if_b	wrlong	#2, fp
33198     10 4E 85 C1 |  if_b	sub	fp, #16
3319c     50 4E 05 F1 | 	add	fp, #80
331a0     A7 28 02 FB | 	rdlong	local02, fp
331a4     50 4E 85 F1 | 	sub	fp, #80
331a8     FF FF 7F FF 
331ac     FF 29 0E F2 | 	cmp	local02, ##-1 wz
331b0     10 4E 05 A1 |  if_e	add	fp, #16
331b4     A7 02 68 AC |  if_e	wrlong	#1, fp
331b8     10 4E 85 A1 |  if_e	sub	fp, #16
331bc     5C 4E 05 F1 | 	add	fp, #92
331c0     A7 28 02 FB | 	rdlong	local02, fp
331c4     10 4E 85 F1 | 	sub	fp, #16
331c8     A7 26 02 FB | 	rdlong	local01, fp
331cc     13 29 82 F1 | 	sub	local02, local01
331d0     10 4E 05 F1 | 	add	fp, #16
331d4     A7 28 62 FC | 	wrlong	local02, fp
331d8     5C 4E 85 F1 | 	sub	fp, #92
331dc     5C FF 9F FD | 	jmp	#LR__5010
331e0                 | LR__5011
331e0     04 4E 05 F1 | 	add	fp, #4
331e4     A7 28 02 FB | 	rdlong	local02, fp
331e8     4C 4E 05 F1 | 	add	fp, #76
331ec     A7 26 02 FB | 	rdlong	local01, fp
331f0     18 28 06 F1 | 	add	local02, #24
331f4     14 27 62 FC | 	wrlong	local01, local02
331f8     40 4E 85 F1 | 	sub	fp, #64
331fc     A7 28 0A FB | 	rdlong	local02, fp wz
33200     10 4E 85 F1 | 	sub	fp, #16
33204     B8 00 90 5D |  if_ne	jmp	#LR__5013
33208     5C 4E 05 F1 | 	add	fp, #92
3320c     A7 26 02 FB | 	rdlong	local01, fp
33210     5C 4E 85 F1 | 	sub	fp, #92
33214     FF 27 CE F7 | 	test	local01, #511 wz
33218     A4 00 90 AD |  if_e	jmp	#LR__5013
3321c     44 4E 05 F1 | 	add	fp, #68
33220     A7 12 02 FB | 	rdlong	arg01, fp
33224     0C 4E 05 F1 | 	add	fp, #12
33228     A7 14 02 FB | 	rdlong	arg02, fp
3322c     50 4E 85 F1 | 	sub	fp, #80
33230     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
33234     58 4E 05 F1 | 	add	fp, #88
33238     A7 FA 61 FC | 	wrlong	result1, fp
3323c     00 FA 4D F2 | 	cmps	result1, #0 wz
33240     58 4E 85 F1 | 	sub	fp, #88
33244     10 4E 05 A1 |  if_e	add	fp, #16
33248     A7 04 68 AC |  if_e	wrlong	#2, fp
3324c     10 4E 85 A1 |  if_e	sub	fp, #16
33250     6C 00 90 AD |  if_e	jmp	#LR__5012
33254     04 4E 05 F1 | 	add	fp, #4
33258     A7 28 02 FB | 	rdlong	local02, fp
3325c     54 4E 05 F1 | 	add	fp, #84
33260     A7 26 02 FB | 	rdlong	local01, fp
33264     04 4E 05 F1 | 	add	fp, #4
33268     A7 18 02 FB | 	rdlong	arg04, fp
3326c     09 18 46 F0 | 	shr	arg04, #9
33270     0C 27 02 F1 | 	add	local01, arg04
33274     1C 28 06 F1 | 	add	local02, #28
33278     14 27 62 FC | 	wrlong	local01, local02
3327c     18 4E 85 F1 | 	sub	fp, #24
33280     A7 28 02 FB | 	rdlong	local02, fp
33284     01 28 06 F1 | 	add	local02, #1
33288     14 13 C2 FA | 	rdbyte	arg01, local02
3328c     40 4E 85 F1 | 	sub	fp, #64
33290     A7 28 02 FB | 	rdlong	local02, fp
33294     14 15 02 F6 | 	mov	arg02, local02
33298     28 14 06 F1 | 	add	arg02, #40
3329c     04 4E 85 F1 | 	sub	fp, #4
332a0     1C 28 06 F1 | 	add	local02, #28
332a4     14 17 02 FB | 	rdlong	arg03, local02
332a8     01 18 06 F6 | 	mov	arg04, #1
332ac     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
332b0     00 FA 0D F2 | 	cmp	result1, #0 wz
332b4     10 4E 05 51 |  if_ne	add	fp, #16
332b8     A7 02 68 5C |  if_ne	wrlong	#1, fp
332bc     10 4E 85 51 |  if_ne	sub	fp, #16
332c0                 | LR__5012
332c0                 | LR__5013
332c0                 | LR__5014
332c0                 | LR__5015
332c0                 | LR__5016
332c0     10 4E 05 F1 | 	add	fp, #16
332c4     A7 28 0A FB | 	rdlong	local02, fp wz
332c8     10 4E 85 F1 | 	sub	fp, #16
332cc     04 4E 05 51 |  if_ne	add	fp, #4
332d0     A7 28 02 5B |  if_ne	rdlong	local02, fp
332d4     04 4E 85 51 |  if_ne	sub	fp, #4
332d8     14 01 68 5C |  if_ne	wrlong	#0, local02
332dc                 | ' 
332dc                 | ' 	return res ;
332dc     10 4E 05 F1 | 	add	fp, #16
332e0     A7 FA 01 FB | 	rdlong	result1, fp
332e4     10 4E 85 F1 | 	sub	fp, #16
332e8                 | LR__5017
332e8     A7 F0 03 F6 | 	mov	ptra, fp
332ec     B2 00 A0 FD | 	call	#popregs_
332f0                 | _fatfs_cc_f_open_ret
332f0     2D 00 64 FD | 	ret
332f4                 | 
332f4                 | _fatfs_cc_f_read
332f4     0E 4A 05 F6 | 	mov	COUNT_, #14
332f8     A8 00 A0 FD | 	call	#pushregs_
332fc     38 F0 07 F1 | 	add	ptra, #56
33300     04 4E 05 F1 | 	add	fp, #4
33304     A7 12 62 FC | 	wrlong	arg01, fp
33308     04 4E 05 F1 | 	add	fp, #4
3330c     A7 14 62 FC | 	wrlong	arg02, fp
33310     04 4E 05 F1 | 	add	fp, #4
33314     A7 16 62 FC | 	wrlong	arg03, fp
33318     04 4E 05 F1 | 	add	fp, #4
3331c     A7 18 62 FC | 	wrlong	arg04, fp
33320     08 4E 85 F1 | 	sub	fp, #8
33324     A7 FA 01 FB | 	rdlong	result1, fp
33328     2C 4E 05 F1 | 	add	fp, #44
3332c     A7 FA 61 FC | 	wrlong	result1, fp
33330     24 4E 85 F1 | 	sub	fp, #36
33334     A7 FA 01 FB | 	rdlong	result1, fp
33338     FD 00 68 FC | 	wrlong	#0, result1
3333c     0C 4E 85 F1 | 	sub	fp, #12
33340     A7 12 02 FB | 	rdlong	arg01, fp
33344     14 4E 05 F1 | 	add	fp, #20
33348     A7 14 02 F6 | 	mov	arg02, fp
3334c     18 4E 85 F1 | 	sub	fp, #24
33350     24 F7 BF FD | 	call	#_fatfs_cc_validate
33354     14 4E 05 F1 | 	add	fp, #20
33358     A7 FA 61 FC | 	wrlong	result1, fp
3335c     00 FA 4D F2 | 	cmps	result1, #0 wz
33360     14 4E 85 F1 | 	sub	fp, #20
33364     20 00 90 5D |  if_ne	jmp	#LR__5020
33368     04 4E 05 F1 | 	add	fp, #4
3336c     A7 14 02 FB | 	rdlong	arg02, fp
33370     11 14 06 F1 | 	add	arg02, #17
33374     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
33378     10 4E 05 F1 | 	add	fp, #16
3337c     A7 14 62 FC | 	wrlong	arg02, fp
33380     14 4E 85 F1 | 	sub	fp, #20
33384     10 00 90 AD |  if_e	jmp	#LR__5021
33388                 | LR__5020
33388     14 4E 05 F1 | 	add	fp, #20
3338c     A7 FA 01 FB | 	rdlong	result1, fp
33390     14 4E 85 F1 | 	sub	fp, #20
33394     EC 05 90 FD | 	jmp	#LR__5040
33398                 | LR__5021
33398     04 4E 05 F1 | 	add	fp, #4
3339c     A7 18 02 FB | 	rdlong	arg04, fp
333a0     04 4E 85 F1 | 	sub	fp, #4
333a4     10 18 06 F1 | 	add	arg04, #16
333a8     0C 19 C2 FA | 	rdbyte	arg04, arg04
333ac     01 18 CE F7 | 	test	arg04, #1 wz
333b0     07 FA 05 A6 |  if_e	mov	result1, #7
333b4     CC 05 90 AD |  if_e	jmp	#LR__5040
333b8     04 4E 05 F1 | 	add	fp, #4
333bc     A7 26 02 FB | 	rdlong	local01, fp
333c0     13 29 02 F6 | 	mov	local02, local01
333c4     0C 28 06 F1 | 	add	local02, #12
333c8     14 2B 02 FB | 	rdlong	local03, local02
333cc     14 26 06 F1 | 	add	local01, #20
333d0     13 27 02 FB | 	rdlong	local01, local01
333d4     13 2B 82 F1 | 	sub	local03, local01
333d8     20 4E 05 F1 | 	add	fp, #32
333dc     A7 2A 62 FC | 	wrlong	local03, fp
333e0     18 4E 85 F1 | 	sub	fp, #24
333e4     A7 2C 02 FB | 	rdlong	local04, fp
333e8     0C 4E 85 F1 | 	sub	fp, #12
333ec     15 2D 1A F2 | 	cmp	local04, local03 wcz
333f0     24 4E 05 11 |  if_a	add	fp, #36
333f4     A7 2C 02 1B |  if_a	rdlong	local04, fp
333f8     18 4E 85 11 |  if_a	sub	fp, #24
333fc     A7 2C 62 1C |  if_a	wrlong	local04, fp
33400     0C 4E 85 11 |  if_a	sub	fp, #12
33404                 | ' 
33404                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
33404                 | LR__5022
33404     0C 4E 05 F1 | 	add	fp, #12
33408     A7 28 02 FB | 	rdlong	local02, fp
3340c     0C 4E 85 F1 | 	sub	fp, #12
33410     14 2D 02 F6 | 	mov	local04, local02
33414     01 2C 16 F2 | 	cmp	local04, #1 wc
33418     64 05 90 CD |  if_b	jmp	#LR__5039
3341c     04 4E 05 F1 | 	add	fp, #4
33420     A7 2A 02 FB | 	rdlong	local03, fp
33424     04 4E 85 F1 | 	sub	fp, #4
33428     14 2A 06 F1 | 	add	local03, #20
3342c     15 2B 02 FB | 	rdlong	local03, local03
33430     FF 2B CE F7 | 	test	local03, #511 wz
33434     3C 04 90 5D |  if_ne	jmp	#LR__5037
33438     04 4E 05 F1 | 	add	fp, #4
3343c     A7 26 02 FB | 	rdlong	local01, fp
33440     14 26 06 F1 | 	add	local01, #20
33444     13 2B 02 FB | 	rdlong	local03, local01
33448     09 2A 46 F0 | 	shr	local03, #9
3344c     14 4E 05 F1 | 	add	fp, #20
33450     A7 2E 02 FB | 	rdlong	local05, fp
33454     17 31 02 F6 | 	mov	local06, local05
33458     0A 30 06 F1 | 	add	local06, #10
3345c     18 33 E2 FA | 	rdword	local07, local06
33460     0A 30 86 F1 | 	sub	local06, #10
33464     19 35 32 F9 | 	getword	local08, local07, #0
33468     01 34 86 F1 | 	sub	local08, #1
3346c     1A 2B 0A F5 | 	and	local03, local08 wz
33470     18 4E 05 F1 | 	add	fp, #24
33474     A7 2A 62 FC | 	wrlong	local03, fp
33478     30 4E 85 F1 | 	sub	fp, #48
3347c     E0 00 90 5D |  if_ne	jmp	#LR__5027
33480     04 4E 05 F1 | 	add	fp, #4
33484     A7 2A 02 FB | 	rdlong	local03, fp
33488     04 4E 85 F1 | 	sub	fp, #4
3348c     14 2A 06 F1 | 	add	local03, #20
33490     15 2B 0A FB | 	rdlong	local03, local03 wz
33494     20 00 90 5D |  if_ne	jmp	#LR__5023
33498     04 4E 05 F1 | 	add	fp, #4
3349c     A7 2A 02 FB | 	rdlong	local03, fp
334a0     08 2A 06 F1 | 	add	local03, #8
334a4     15 2B 02 FB | 	rdlong	local03, local03
334a8     18 4E 05 F1 | 	add	fp, #24
334ac     A7 2A 62 FC | 	wrlong	local03, fp
334b0     1C 4E 85 F1 | 	sub	fp, #28
334b4     28 00 90 FD | 	jmp	#LR__5024
334b8                 | LR__5023
334b8     04 4E 05 F1 | 	add	fp, #4
334bc     A7 34 02 FB | 	rdlong	local08, fp
334c0     1A 13 02 F6 | 	mov	arg01, local08
334c4     04 4E 85 F1 | 	sub	fp, #4
334c8     18 34 06 F1 | 	add	local08, #24
334cc     1A 15 02 FB | 	rdlong	arg02, local08
334d0     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
334d4     1C 4E 05 F1 | 	add	fp, #28
334d8     A7 FA 61 FC | 	wrlong	result1, fp
334dc     1C 4E 85 F1 | 	sub	fp, #28
334e0                 | LR__5024
334e0     1C 4E 05 F1 | 	add	fp, #28
334e4     A7 2A 02 FB | 	rdlong	local03, fp
334e8     1C 4E 85 F1 | 	sub	fp, #28
334ec     02 2A 16 F2 | 	cmp	local03, #2 wc
334f0     1C 00 90 3D |  if_ae	jmp	#LR__5025
334f4     04 4E 05 F1 | 	add	fp, #4
334f8     A7 2A 02 FB | 	rdlong	local03, fp
334fc     04 4E 85 F1 | 	sub	fp, #4
33500     11 2A 06 F1 | 	add	local03, #17
33504     15 05 48 FC | 	wrbyte	#2, local03
33508     02 FA 05 F6 | 	mov	result1, #2
3350c     74 04 90 FD | 	jmp	#LR__5040
33510                 | LR__5025
33510     1C 4E 05 F1 | 	add	fp, #28
33514     A7 2A 02 FB | 	rdlong	local03, fp
33518     1C 4E 85 F1 | 	sub	fp, #28
3351c     FF FF 7F FF 
33520     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
33524     1C 00 90 5D |  if_ne	jmp	#LR__5026
33528     04 4E 05 F1 | 	add	fp, #4
3352c     A7 2A 02 FB | 	rdlong	local03, fp
33530     04 4E 85 F1 | 	sub	fp, #4
33534     11 2A 06 F1 | 	add	local03, #17
33538     15 03 48 FC | 	wrbyte	#1, local03
3353c     01 FA 05 F6 | 	mov	result1, #1
33540     40 04 90 FD | 	jmp	#LR__5040
33544                 | LR__5026
33544     04 4E 05 F1 | 	add	fp, #4
33548     A7 2A 02 FB | 	rdlong	local03, fp
3354c     18 4E 05 F1 | 	add	fp, #24
33550     A7 34 02 FB | 	rdlong	local08, fp
33554     1C 4E 85 F1 | 	sub	fp, #28
33558     18 2A 06 F1 | 	add	local03, #24
3355c     15 35 62 FC | 	wrlong	local08, local03
33560                 | LR__5027
33560     18 4E 05 F1 | 	add	fp, #24
33564     A7 12 02 FB | 	rdlong	arg01, fp
33568     14 4E 85 F1 | 	sub	fp, #20
3356c     A7 2A 02 FB | 	rdlong	local03, fp
33570     04 4E 85 F1 | 	sub	fp, #4
33574     18 2A 06 F1 | 	add	local03, #24
33578     15 15 02 FB | 	rdlong	arg02, local03
3357c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
33580     20 4E 05 F1 | 	add	fp, #32
33584     A7 FA 61 FC | 	wrlong	result1, fp
33588     20 4E 85 F1 | 	sub	fp, #32
3358c     00 FA 0D F2 | 	cmp	result1, #0 wz
33590     1C 00 90 5D |  if_ne	jmp	#LR__5028
33594     04 4E 05 F1 | 	add	fp, #4
33598     A7 2A 02 FB | 	rdlong	local03, fp
3359c     04 4E 85 F1 | 	sub	fp, #4
335a0     11 2A 06 F1 | 	add	local03, #17
335a4     15 05 48 FC | 	wrbyte	#2, local03
335a8     02 FA 05 F6 | 	mov	result1, #2
335ac     D4 03 90 FD | 	jmp	#LR__5040
335b0                 | LR__5028
335b0     20 4E 05 F1 | 	add	fp, #32
335b4     A7 2A 02 FB | 	rdlong	local03, fp
335b8     10 4E 05 F1 | 	add	fp, #16
335bc     A7 34 02 FB | 	rdlong	local08, fp
335c0     1A 2B 02 F1 | 	add	local03, local08
335c4     10 4E 85 F1 | 	sub	fp, #16
335c8     A7 2A 62 FC | 	wrlong	local03, fp
335cc     14 4E 85 F1 | 	sub	fp, #20
335d0     A7 2A 02 FB | 	rdlong	local03, fp
335d4     09 2A 46 F0 | 	shr	local03, #9
335d8     20 4E 05 F1 | 	add	fp, #32
335dc     A7 2A 62 FC | 	wrlong	local03, fp
335e0     2C 4E 85 F1 | 	sub	fp, #44
335e4     01 2A 16 F2 | 	cmp	local03, #1 wc
335e8     5C 01 90 CD |  if_b	jmp	#LR__5032
335ec     30 4E 05 F1 | 	add	fp, #48
335f0     A7 2A 02 FB | 	rdlong	local03, fp
335f4     04 4E 85 F1 | 	sub	fp, #4
335f8     A7 34 02 FB | 	rdlong	local08, fp
335fc     1A 2B 02 F1 | 	add	local03, local08
33600     14 4E 85 F1 | 	sub	fp, #20
33604     A7 34 02 FB | 	rdlong	local08, fp
33608     18 4E 85 F1 | 	sub	fp, #24
3360c     0A 34 06 F1 | 	add	local08, #10
33610     1A 35 E2 FA | 	rdword	local08, local08
33614     1A 2B 1A F2 | 	cmp	local03, local08 wcz
33618     28 00 90 ED |  if_be	jmp	#LR__5029
3361c     18 4E 05 F1 | 	add	fp, #24
33620     A7 26 02 FB | 	rdlong	local01, fp
33624     0A 26 06 F1 | 	add	local01, #10
33628     13 2B E2 FA | 	rdword	local03, local01
3362c     18 4E 05 F1 | 	add	fp, #24
33630     A7 34 02 FB | 	rdlong	local08, fp
33634     1A 2B 82 F1 | 	sub	local03, local08
33638     04 4E 85 F1 | 	sub	fp, #4
3363c     A7 2A 62 FC | 	wrlong	local03, fp
33640     2C 4E 85 F1 | 	sub	fp, #44
33644                 | LR__5029
33644     18 4E 05 F1 | 	add	fp, #24
33648     A7 26 02 FB | 	rdlong	local01, fp
3364c     01 26 06 F1 | 	add	local01, #1
33650     13 13 C2 FA | 	rdbyte	arg01, local01
33654     1C 4E 05 F1 | 	add	fp, #28
33658     A7 14 02 FB | 	rdlong	arg02, fp
3365c     14 4E 85 F1 | 	sub	fp, #20
33660     A7 16 02 FB | 	rdlong	arg03, fp
33664     0C 4E 05 F1 | 	add	fp, #12
33668     A7 18 02 FB | 	rdlong	arg04, fp
3366c     2C 4E 85 F1 | 	sub	fp, #44
33670     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
33674     00 FA 0D F2 | 	cmp	result1, #0 wz
33678     1C 00 90 AD |  if_e	jmp	#LR__5030
3367c     04 4E 05 F1 | 	add	fp, #4
33680     A7 2A 02 FB | 	rdlong	local03, fp
33684     04 4E 85 F1 | 	sub	fp, #4
33688     11 2A 06 F1 | 	add	local03, #17
3368c     15 03 48 FC | 	wrbyte	#1, local03
33690     01 FA 05 F6 | 	mov	result1, #1
33694     EC 02 90 FD | 	jmp	#LR__5040
33698                 | LR__5030
33698     04 4E 05 F1 | 	add	fp, #4
3369c     A7 26 02 FB | 	rdlong	local01, fp
336a0     04 4E 85 F1 | 	sub	fp, #4
336a4     10 26 06 F1 | 	add	local01, #16
336a8     13 2B C2 FA | 	rdbyte	local03, local01
336ac     80 2A CE F7 | 	test	local03, #128 wz
336b0     78 00 90 AD |  if_e	jmp	#LR__5031
336b4     04 4E 05 F1 | 	add	fp, #4
336b8     A7 34 02 FB | 	rdlong	local08, fp
336bc     1C 34 06 F1 | 	add	local08, #28
336c0     1A 35 02 FB | 	rdlong	local08, local08
336c4     1C 4E 05 F1 | 	add	fp, #28
336c8     A7 36 02 FB | 	rdlong	local09, fp
336cc     1B 35 82 F1 | 	sub	local08, local09
336d0     0C 4E 05 F1 | 	add	fp, #12
336d4     A7 38 02 FB | 	rdlong	local10, fp
336d8     2C 4E 85 F1 | 	sub	fp, #44
336dc     1C 3B 02 F6 | 	mov	local11, local10
336e0     1D 35 12 F2 | 	cmp	local08, local11 wc
336e4     44 00 90 3D |  if_ae	jmp	#LR__5031
336e8     34 4E 05 F1 | 	add	fp, #52
336ec     A7 12 02 FB | 	rdlong	arg01, fp
336f0     30 4E 85 F1 | 	sub	fp, #48
336f4     A7 14 02 FB | 	rdlong	arg02, fp
336f8     0A 3B 02 F6 | 	mov	local11, arg02
336fc     1C 3A 06 F1 | 	add	local11, #28
33700     1D 37 02 FB | 	rdlong	local09, local11
33704     1C 4E 05 F1 | 	add	fp, #28
33708     A7 2E 02 FB | 	rdlong	local05, fp
3370c     17 37 82 F1 | 	sub	local09, local05
33710     09 36 66 F0 | 	shl	local09, #9
33714     1B 3B 02 F6 | 	mov	local11, local09
33718     1B 13 02 F1 | 	add	arg01, local09
3371c     20 4E 85 F1 | 	sub	fp, #32
33720     28 14 06 F1 | 	add	arg02, #40
33724     09 16 C6 F9 | 	decod	arg03, #9
33728     E0 42 BF FD | 	call	#__system____builtin_memmove
3372c                 | LR__5031
3372c     2C 4E 05 F1 | 	add	fp, #44
33730     A7 2A 02 FB | 	rdlong	local03, fp
33734     09 2A 66 F0 | 	shl	local03, #9
33738     04 4E 85 F1 | 	sub	fp, #4
3373c     A7 2A 62 FC | 	wrlong	local03, fp
33740     28 4E 85 F1 | 	sub	fp, #40
33744                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
33744                 | ' 				}
33744                 | ' 
33744                 | ' 
33744                 | ' 				rcnt =  ((UINT) 512 )  * cc;
33744                 | ' 				continue;
33744     B4 01 90 FD | 	jmp	#LR__5038
33748                 | LR__5032
33748     04 4E 05 F1 | 	add	fp, #4
3374c     A7 2A 02 FB | 	rdlong	local03, fp
33750     1C 2A 06 F1 | 	add	local03, #28
33754     15 2B 02 FB | 	rdlong	local03, local03
33758     1C 4E 05 F1 | 	add	fp, #28
3375c     A7 26 02 FB | 	rdlong	local01, fp
33760     20 4E 85 F1 | 	sub	fp, #32
33764     13 2B 0A F2 | 	cmp	local03, local01 wz
33768     EC 00 90 AD |  if_e	jmp	#LR__5036
3376c     04 4E 05 F1 | 	add	fp, #4
33770     A7 26 02 FB | 	rdlong	local01, fp
33774     04 4E 85 F1 | 	sub	fp, #4
33778     10 26 06 F1 | 	add	local01, #16
3377c     13 2B C2 FA | 	rdbyte	local03, local01
33780     80 2A CE F7 | 	test	local03, #128 wz
33784     7C 00 90 AD |  if_e	jmp	#LR__5034
33788     18 4E 05 F1 | 	add	fp, #24
3378c     A7 26 02 FB | 	rdlong	local01, fp
33790     01 26 06 F1 | 	add	local01, #1
33794     13 13 C2 FA | 	rdbyte	arg01, local01
33798     14 4E 85 F1 | 	sub	fp, #20
3379c     A7 2A 02 FB | 	rdlong	local03, fp
337a0     15 15 02 F6 | 	mov	arg02, local03
337a4     28 14 06 F1 | 	add	arg02, #40
337a8     04 4E 85 F1 | 	sub	fp, #4
337ac     1C 2A 06 F1 | 	add	local03, #28
337b0     15 17 02 FB | 	rdlong	arg03, local03
337b4     01 18 06 F6 | 	mov	arg04, #1
337b8     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
337bc     00 FA 0D F2 | 	cmp	result1, #0 wz
337c0     1C 00 90 AD |  if_e	jmp	#LR__5033
337c4     04 4E 05 F1 | 	add	fp, #4
337c8     A7 2A 02 FB | 	rdlong	local03, fp
337cc     04 4E 85 F1 | 	sub	fp, #4
337d0     11 2A 06 F1 | 	add	local03, #17
337d4     15 03 48 FC | 	wrbyte	#1, local03
337d8     01 FA 05 F6 | 	mov	result1, #1
337dc     A4 01 90 FD | 	jmp	#LR__5040
337e0                 | LR__5033
337e0     04 4E 05 F1 | 	add	fp, #4
337e4     A7 3A 02 FB | 	rdlong	local11, fp
337e8     1D 2B 02 F6 | 	mov	local03, local11
337ec     04 4E 85 F1 | 	sub	fp, #4
337f0     10 3A 06 F1 | 	add	local11, #16
337f4     1D 3B C2 FA | 	rdbyte	local11, local11
337f8     7F 3A 06 F5 | 	and	local11, #127
337fc     10 2A 06 F1 | 	add	local03, #16
33800     15 3B 42 FC | 	wrbyte	local11, local03
33804                 | LR__5034
33804     18 4E 05 F1 | 	add	fp, #24
33808     A7 26 02 FB | 	rdlong	local01, fp
3380c     01 26 06 F1 | 	add	local01, #1
33810     13 13 C2 FA | 	rdbyte	arg01, local01
33814     14 4E 85 F1 | 	sub	fp, #20
33818     A7 14 02 FB | 	rdlong	arg02, fp
3381c     28 14 06 F1 | 	add	arg02, #40
33820     1C 4E 05 F1 | 	add	fp, #28
33824     A7 16 02 FB | 	rdlong	arg03, fp
33828     20 4E 85 F1 | 	sub	fp, #32
3382c     01 18 06 F6 | 	mov	arg04, #1
33830     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
33834     00 FA 0D F2 | 	cmp	result1, #0 wz
33838     1C 00 90 AD |  if_e	jmp	#LR__5035
3383c     04 4E 05 F1 | 	add	fp, #4
33840     A7 2A 02 FB | 	rdlong	local03, fp
33844     04 4E 85 F1 | 	sub	fp, #4
33848     11 2A 06 F1 | 	add	local03, #17
3384c     15 03 48 FC | 	wrbyte	#1, local03
33850     01 FA 05 F6 | 	mov	result1, #1
33854     2C 01 90 FD | 	jmp	#LR__5040
33858                 | LR__5035
33858                 | LR__5036
33858     04 4E 05 F1 | 	add	fp, #4
3385c     A7 2A 02 FB | 	rdlong	local03, fp
33860     1C 4E 05 F1 | 	add	fp, #28
33864     A7 3A 02 FB | 	rdlong	local11, fp
33868     20 4E 85 F1 | 	sub	fp, #32
3386c     1C 2A 06 F1 | 	add	local03, #28
33870     15 3B 62 FC | 	wrlong	local11, local03
33874                 | LR__5037
33874     04 4E 05 F1 | 	add	fp, #4
33878     A7 26 02 FB | 	rdlong	local01, fp
3387c     14 26 06 F1 | 	add	local01, #20
33880     13 3B 02 FB | 	rdlong	local11, local01
33884     FF 3B 06 F5 | 	and	local11, #511
33888     09 2A C6 F9 | 	decod	local03, #9
3388c     1D 2B 82 F1 | 	sub	local03, local11
33890     24 4E 05 F1 | 	add	fp, #36
33894     A7 2A 62 FC | 	wrlong	local03, fp
33898     1C 4E 85 F1 | 	sub	fp, #28
3389c     A7 3A 02 FB | 	rdlong	local11, fp
338a0     0C 4E 85 F1 | 	sub	fp, #12
338a4     1D 2B 1A F2 | 	cmp	local03, local11 wcz
338a8     0C 4E 05 11 |  if_a	add	fp, #12
338ac     A7 2A 02 1B |  if_a	rdlong	local03, fp
338b0     1C 4E 05 11 |  if_a	add	fp, #28
338b4     A7 2A 62 1C |  if_a	wrlong	local03, fp
338b8     28 4E 85 11 |  if_a	sub	fp, #40
338bc     34 4E 05 F1 | 	add	fp, #52
338c0     A7 12 02 FB | 	rdlong	arg01, fp
338c4     30 4E 85 F1 | 	sub	fp, #48
338c8     A7 30 02 FB | 	rdlong	local06, fp
338cc     18 15 02 F6 | 	mov	arg02, local06
338d0     28 14 06 F1 | 	add	arg02, #40
338d4     14 30 06 F1 | 	add	local06, #20
338d8     18 3B 02 FB | 	rdlong	local11, local06
338dc     1D 37 02 F6 | 	mov	local09, local11
338e0     1B 39 02 F6 | 	mov	local10, local09
338e4     FF 39 06 F5 | 	and	local10, #511
338e8     1C 15 02 F1 | 	add	arg02, local10
338ec     24 4E 05 F1 | 	add	fp, #36
338f0     A7 16 02 FB | 	rdlong	arg03, fp
338f4     28 4E 85 F1 | 	sub	fp, #40
338f8     10 41 BF FD | 	call	#__system____builtin_memmove
338fc                 | LR__5038
338fc     0C 4E 05 F1 | 	add	fp, #12
33900     A7 2A 02 FB | 	rdlong	local03, fp
33904     1C 4E 05 F1 | 	add	fp, #28
33908     A7 34 02 FB | 	rdlong	local08, fp
3390c     1A 2B 82 F1 | 	sub	local03, local08
33910     1C 4E 85 F1 | 	sub	fp, #28
33914     A7 2A 62 FC | 	wrlong	local03, fp
33918     04 4E 05 F1 | 	add	fp, #4
3391c     A7 26 02 FB | 	rdlong	local01, fp
33920     13 33 02 FB | 	rdlong	local07, local01
33924     18 4E 05 F1 | 	add	fp, #24
33928     A7 34 02 FB | 	rdlong	local08, fp
3392c     1A 33 02 F1 | 	add	local07, local08
33930     13 33 62 FC | 	wrlong	local07, local01
33934     0C 4E 05 F1 | 	add	fp, #12
33938     A7 2A 02 FB | 	rdlong	local03, fp
3393c     0C 4E 85 F1 | 	sub	fp, #12
33940     A7 3C 02 FB | 	rdlong	local12, fp
33944     1E 2B 02 F1 | 	add	local03, local12
33948     0C 4E 05 F1 | 	add	fp, #12
3394c     A7 2A 62 FC | 	wrlong	local03, fp
33950     30 4E 85 F1 | 	sub	fp, #48
33954     A7 3E 02 FB | 	rdlong	local13, fp
33958     1F 2B 02 F6 | 	mov	local03, local13
3395c     14 3E 06 F1 | 	add	local13, #20
33960     1F 41 02 FB | 	rdlong	local14, local13
33964     24 4E 05 F1 | 	add	fp, #36
33968     A7 30 02 FB | 	rdlong	local06, fp
3396c     28 4E 85 F1 | 	sub	fp, #40
33970     18 41 02 F1 | 	add	local14, local06
33974     14 2A 06 F1 | 	add	local03, #20
33978     15 41 62 FC | 	wrlong	local14, local03
3397c     84 FA 9F FD | 	jmp	#LR__5022
33980                 | LR__5039
33980                 | ' 
33980                 | ' 
33980                 | ' 
33980                 | ' 
33980                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
33980                 | ' 
33980                 | ' 	}
33980                 | ' 
33980                 | ' 	return FR_OK ;
33980     00 FA 05 F6 | 	mov	result1, #0
33984                 | LR__5040
33984     A7 F0 03 F6 | 	mov	ptra, fp
33988     B2 00 A0 FD | 	call	#popregs_
3398c                 | _fatfs_cc_f_read_ret
3398c     2D 00 64 FD | 	ret
33990                 | 
33990                 | _fatfs_cc_f_write
33990     15 4A 05 F6 | 	mov	COUNT_, #21
33994     A8 00 A0 FD | 	call	#pushregs_
33998     34 F0 07 F1 | 	add	ptra, #52
3399c     04 4E 05 F1 | 	add	fp, #4
339a0     A7 12 62 FC | 	wrlong	arg01, fp
339a4     04 4E 05 F1 | 	add	fp, #4
339a8     A7 14 62 FC | 	wrlong	arg02, fp
339ac     04 4E 05 F1 | 	add	fp, #4
339b0     A7 16 62 FC | 	wrlong	arg03, fp
339b4     04 4E 05 F1 | 	add	fp, #4
339b8     A7 18 62 FC | 	wrlong	arg04, fp
339bc     08 4E 85 F1 | 	sub	fp, #8
339c0     A7 FA 01 FB | 	rdlong	result1, fp
339c4     28 4E 05 F1 | 	add	fp, #40
339c8     A7 FA 61 FC | 	wrlong	result1, fp
339cc     20 4E 85 F1 | 	sub	fp, #32
339d0     A7 FA 01 FB | 	rdlong	result1, fp
339d4     FD 00 68 FC | 	wrlong	#0, result1
339d8     0C 4E 85 F1 | 	sub	fp, #12
339dc     A7 12 02 FB | 	rdlong	arg01, fp
339e0     14 4E 05 F1 | 	add	fp, #20
339e4     A7 14 02 F6 | 	mov	arg02, fp
339e8     18 4E 85 F1 | 	sub	fp, #24
339ec     88 F0 BF FD | 	call	#_fatfs_cc_validate
339f0     14 4E 05 F1 | 	add	fp, #20
339f4     A7 FA 61 FC | 	wrlong	result1, fp
339f8     00 FA 4D F2 | 	cmps	result1, #0 wz
339fc     14 4E 85 F1 | 	sub	fp, #20
33a00     20 00 90 5D |  if_ne	jmp	#LR__5050
33a04     04 4E 05 F1 | 	add	fp, #4
33a08     A7 14 02 FB | 	rdlong	arg02, fp
33a0c     11 14 06 F1 | 	add	arg02, #17
33a10     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
33a14     10 4E 05 F1 | 	add	fp, #16
33a18     A7 14 62 FC | 	wrlong	arg02, fp
33a1c     14 4E 85 F1 | 	sub	fp, #20
33a20     10 00 90 AD |  if_e	jmp	#LR__5051
33a24                 | LR__5050
33a24     14 4E 05 F1 | 	add	fp, #20
33a28     A7 FA 01 FB | 	rdlong	result1, fp
33a2c     14 4E 85 F1 | 	sub	fp, #20
33a30     44 07 90 FD | 	jmp	#LR__5073
33a34                 | LR__5051
33a34     04 4E 05 F1 | 	add	fp, #4
33a38     A7 14 02 FB | 	rdlong	arg02, fp
33a3c     04 4E 85 F1 | 	sub	fp, #4
33a40     10 14 06 F1 | 	add	arg02, #16
33a44     0A 15 C2 FA | 	rdbyte	arg02, arg02
33a48     02 14 CE F7 | 	test	arg02, #2 wz
33a4c     07 FA 05 A6 |  if_e	mov	result1, #7
33a50     24 07 90 AD |  if_e	jmp	#LR__5073
33a54     04 4E 05 F1 | 	add	fp, #4
33a58     A7 14 02 FB | 	rdlong	arg02, fp
33a5c     0A 13 02 F6 | 	mov	arg01, arg02
33a60     14 12 06 F1 | 	add	arg01, #20
33a64     09 13 02 FB | 	rdlong	arg01, arg01
33a68     08 4E 05 F1 | 	add	fp, #8
33a6c     A7 FA 01 FB | 	rdlong	result1, fp
33a70     FD 12 02 F1 | 	add	arg01, result1
33a74     0C 4E 85 F1 | 	sub	fp, #12
33a78     14 14 06 F1 | 	add	arg02, #20
33a7c     0A FB 01 FB | 	rdlong	result1, arg02
33a80     FD 12 12 F2 | 	cmp	arg01, result1 wc
33a84     24 00 90 3D |  if_ae	jmp	#LR__5052
33a88     04 4E 05 F1 | 	add	fp, #4
33a8c     A7 14 02 FB | 	rdlong	arg02, fp
33a90     01 FA 65 F6 | 	neg	result1, #1
33a94     14 14 06 F1 | 	add	arg02, #20
33a98     0A 15 02 FB | 	rdlong	arg02, arg02
33a9c     0A FB 81 F1 | 	sub	result1, arg02
33aa0     08 4E 05 F1 | 	add	fp, #8
33aa4     A7 FA 61 FC | 	wrlong	result1, fp
33aa8     0C 4E 85 F1 | 	sub	fp, #12
33aac                 | LR__5052
33aac                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
33aac                 | ' 	}
33aac                 | ' 
33aac                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
33aac                 | LR__5053
33aac     0C 4E 05 F1 | 	add	fp, #12
33ab0     A7 FA 01 FB | 	rdlong	result1, fp
33ab4     0C 4E 85 F1 | 	sub	fp, #12
33ab8     01 FA 15 F2 | 	cmp	result1, #1 wc
33abc     90 06 90 CD |  if_b	jmp	#LR__5072
33ac0     04 4E 05 F1 | 	add	fp, #4
33ac4     A7 FA 01 FB | 	rdlong	result1, fp
33ac8     04 4E 85 F1 | 	sub	fp, #4
33acc     14 FA 05 F1 | 	add	result1, #20
33ad0     FD FA 01 FB | 	rdlong	result1, result1
33ad4     FF FB CD F7 | 	test	result1, #511 wz
33ad8     D8 04 90 5D |  if_ne	jmp	#LR__5068
33adc     04 4E 05 F1 | 	add	fp, #4
33ae0     A7 FA 01 FB | 	rdlong	result1, fp
33ae4     14 FA 05 F1 | 	add	result1, #20
33ae8     FD FA 01 FB | 	rdlong	result1, result1
33aec     09 FA 45 F0 | 	shr	result1, #9
33af0     14 4E 05 F1 | 	add	fp, #20
33af4     A7 14 02 FB | 	rdlong	arg02, fp
33af8     0A 14 06 F1 | 	add	arg02, #10
33afc     0A 19 E2 FA | 	rdword	arg04, arg02
33b00     0C 15 32 F9 | 	getword	arg02, arg04, #0
33b04     01 14 86 F1 | 	sub	arg02, #1
33b08     0A FB 09 F5 | 	and	result1, arg02 wz
33b0c     14 4E 05 F1 | 	add	fp, #20
33b10     A7 FA 61 FC | 	wrlong	result1, fp
33b14     2C 4E 85 F1 | 	sub	fp, #44
33b18     44 01 90 5D |  if_ne	jmp	#LR__5059
33b1c     04 4E 05 F1 | 	add	fp, #4
33b20     A7 FA 01 FB | 	rdlong	result1, fp
33b24     04 4E 85 F1 | 	sub	fp, #4
33b28     14 FA 05 F1 | 	add	result1, #20
33b2c     FD 14 0A FB | 	rdlong	arg02, result1 wz
33b30     44 00 90 5D |  if_ne	jmp	#LR__5054
33b34     04 4E 05 F1 | 	add	fp, #4
33b38     A7 14 02 FB | 	rdlong	arg02, fp
33b3c     08 14 06 F1 | 	add	arg02, #8
33b40     0A 15 0A FB | 	rdlong	arg02, arg02 wz
33b44     18 4E 05 F1 | 	add	fp, #24
33b48     A7 14 62 FC | 	wrlong	arg02, fp
33b4c     1C 4E 85 F1 | 	sub	fp, #28
33b50     4C 00 90 5D |  if_ne	jmp	#LR__5055
33b54     04 4E 05 F1 | 	add	fp, #4
33b58     A7 12 02 FB | 	rdlong	arg01, fp
33b5c     04 4E 85 F1 | 	sub	fp, #4
33b60     00 14 06 F6 | 	mov	arg02, #0
33b64     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
33b68     1C 4E 05 F1 | 	add	fp, #28
33b6c     A7 FA 61 FC | 	wrlong	result1, fp
33b70     1C 4E 85 F1 | 	sub	fp, #28
33b74     28 00 90 FD | 	jmp	#LR__5055
33b78                 | LR__5054
33b78     04 4E 05 F1 | 	add	fp, #4
33b7c     A7 18 02 FB | 	rdlong	arg04, fp
33b80     0C 13 02 F6 | 	mov	arg01, arg04
33b84     04 4E 85 F1 | 	sub	fp, #4
33b88     18 18 06 F1 | 	add	arg04, #24
33b8c     0C 15 02 FB | 	rdlong	arg02, arg04
33b90     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
33b94     1C 4E 05 F1 | 	add	fp, #28
33b98     A7 FA 61 FC | 	wrlong	result1, fp
33b9c     1C 4E 85 F1 | 	sub	fp, #28
33ba0                 | LR__5055
33ba0     1C 4E 05 F1 | 	add	fp, #28
33ba4     A7 FA 09 FB | 	rdlong	result1, fp wz
33ba8     1C 4E 85 F1 | 	sub	fp, #28
33bac     A0 05 90 AD |  if_e	jmp	#LR__5072
33bb0     1C 4E 05 F1 | 	add	fp, #28
33bb4     A7 FA 01 FB | 	rdlong	result1, fp
33bb8     1C 4E 85 F1 | 	sub	fp, #28
33bbc     01 FA 0D F2 | 	cmp	result1, #1 wz
33bc0     1C 00 90 5D |  if_ne	jmp	#LR__5056
33bc4     04 4E 05 F1 | 	add	fp, #4
33bc8     A7 FA 01 FB | 	rdlong	result1, fp
33bcc     04 4E 85 F1 | 	sub	fp, #4
33bd0     11 FA 05 F1 | 	add	result1, #17
33bd4     FD 04 48 FC | 	wrbyte	#2, result1
33bd8     02 FA 05 F6 | 	mov	result1, #2
33bdc     98 05 90 FD | 	jmp	#LR__5073
33be0                 | LR__5056
33be0     1C 4E 05 F1 | 	add	fp, #28
33be4     A7 FA 01 FB | 	rdlong	result1, fp
33be8     1C 4E 85 F1 | 	sub	fp, #28
33bec     FF FF 7F FF 
33bf0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
33bf4     1C 00 90 5D |  if_ne	jmp	#LR__5057
33bf8     04 4E 05 F1 | 	add	fp, #4
33bfc     A7 FA 01 FB | 	rdlong	result1, fp
33c00     04 4E 85 F1 | 	sub	fp, #4
33c04     11 FA 05 F1 | 	add	result1, #17
33c08     FD 02 48 FC | 	wrbyte	#1, result1
33c0c     01 FA 05 F6 | 	mov	result1, #1
33c10     64 05 90 FD | 	jmp	#LR__5073
33c14                 | LR__5057
33c14     04 4E 05 F1 | 	add	fp, #4
33c18     A7 FA 01 FB | 	rdlong	result1, fp
33c1c     18 4E 05 F1 | 	add	fp, #24
33c20     A7 18 02 FB | 	rdlong	arg04, fp
33c24     18 FA 05 F1 | 	add	result1, #24
33c28     FD 18 62 FC | 	wrlong	arg04, result1
33c2c     18 4E 85 F1 | 	sub	fp, #24
33c30     A7 FA 01 FB | 	rdlong	result1, fp
33c34     04 4E 85 F1 | 	sub	fp, #4
33c38     08 FA 05 F1 | 	add	result1, #8
33c3c     FD FA 09 FB | 	rdlong	result1, result1 wz
33c40     1C 00 90 5D |  if_ne	jmp	#LR__5058
33c44     04 4E 05 F1 | 	add	fp, #4
33c48     A7 18 02 FB | 	rdlong	arg04, fp
33c4c     18 4E 05 F1 | 	add	fp, #24
33c50     A7 FA 01 FB | 	rdlong	result1, fp
33c54     1C 4E 85 F1 | 	sub	fp, #28
33c58     08 18 06 F1 | 	add	arg04, #8
33c5c     0C FB 61 FC | 	wrlong	result1, arg04
33c60                 | LR__5058
33c60                 | LR__5059
33c60     04 4E 05 F1 | 	add	fp, #4
33c64     A7 18 02 FB | 	rdlong	arg04, fp
33c68     04 4E 85 F1 | 	sub	fp, #4
33c6c     10 18 06 F1 | 	add	arg04, #16
33c70     0C 19 C2 FA | 	rdbyte	arg04, arg04
33c74     80 18 CE F7 | 	test	arg04, #128 wz
33c78     7C 00 90 AD |  if_e	jmp	#LR__5061
33c7c     18 4E 05 F1 | 	add	fp, #24
33c80     A7 18 02 FB | 	rdlong	arg04, fp
33c84     01 18 06 F1 | 	add	arg04, #1
33c88     0C 13 C2 FA | 	rdbyte	arg01, arg04
33c8c     14 4E 85 F1 | 	sub	fp, #20
33c90     A7 18 02 FB | 	rdlong	arg04, fp
33c94     0C 15 02 F6 | 	mov	arg02, arg04
33c98     28 14 06 F1 | 	add	arg02, #40
33c9c     04 4E 85 F1 | 	sub	fp, #4
33ca0     1C 18 06 F1 | 	add	arg04, #28
33ca4     0C 17 02 FB | 	rdlong	arg03, arg04
33ca8     01 18 06 F6 | 	mov	arg04, #1
33cac     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
33cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
33cb4     1C 00 90 AD |  if_e	jmp	#LR__5060
33cb8     04 4E 05 F1 | 	add	fp, #4
33cbc     A7 FA 01 FB | 	rdlong	result1, fp
33cc0     04 4E 85 F1 | 	sub	fp, #4
33cc4     11 FA 05 F1 | 	add	result1, #17
33cc8     FD 02 48 FC | 	wrbyte	#1, result1
33ccc     01 FA 05 F6 | 	mov	result1, #1
33cd0     A4 04 90 FD | 	jmp	#LR__5073
33cd4                 | LR__5060
33cd4     04 4E 05 F1 | 	add	fp, #4
33cd8     A7 18 02 FB | 	rdlong	arg04, fp
33cdc     0C FB 01 F6 | 	mov	result1, arg04
33ce0     04 4E 85 F1 | 	sub	fp, #4
33ce4     10 18 06 F1 | 	add	arg04, #16
33ce8     0C 19 C2 FA | 	rdbyte	arg04, arg04
33cec     7F 18 06 F5 | 	and	arg04, #127
33cf0     10 FA 05 F1 | 	add	result1, #16
33cf4     FD 18 42 FC | 	wrbyte	arg04, result1
33cf8                 | LR__5061
33cf8     18 4E 05 F1 | 	add	fp, #24
33cfc     A7 12 02 FB | 	rdlong	arg01, fp
33d00     14 4E 85 F1 | 	sub	fp, #20
33d04     A7 14 02 FB | 	rdlong	arg02, fp
33d08     04 4E 85 F1 | 	sub	fp, #4
33d0c     18 14 06 F1 | 	add	arg02, #24
33d10     0A 15 02 FB | 	rdlong	arg02, arg02
33d14     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
33d18     20 4E 05 F1 | 	add	fp, #32
33d1c     A7 FA 61 FC | 	wrlong	result1, fp
33d20     20 4E 85 F1 | 	sub	fp, #32
33d24     00 FA 0D F2 | 	cmp	result1, #0 wz
33d28     1C 00 90 5D |  if_ne	jmp	#LR__5062
33d2c     04 4E 05 F1 | 	add	fp, #4
33d30     A7 FA 01 FB | 	rdlong	result1, fp
33d34     04 4E 85 F1 | 	sub	fp, #4
33d38     11 FA 05 F1 | 	add	result1, #17
33d3c     FD 04 48 FC | 	wrbyte	#2, result1
33d40     02 FA 05 F6 | 	mov	result1, #2
33d44     30 04 90 FD | 	jmp	#LR__5073
33d48                 | LR__5062
33d48     20 4E 05 F1 | 	add	fp, #32
33d4c     A7 FA 01 FB | 	rdlong	result1, fp
33d50     0C 4E 05 F1 | 	add	fp, #12
33d54     A7 26 02 FB | 	rdlong	local01, fp
33d58     13 FB 01 F1 | 	add	result1, local01
33d5c     0C 4E 85 F1 | 	sub	fp, #12
33d60     A7 FA 61 FC | 	wrlong	result1, fp
33d64     14 4E 85 F1 | 	sub	fp, #20
33d68     A7 FA 01 FB | 	rdlong	result1, fp
33d6c     09 FA 45 F0 | 	shr	result1, #9
33d70     1C 4E 05 F1 | 	add	fp, #28
33d74     A7 FA 61 FC | 	wrlong	result1, fp
33d78     28 4E 85 F1 | 	sub	fp, #40
33d7c     01 FA 15 F2 | 	cmp	result1, #1 wc
33d80     60 01 90 CD |  if_b	jmp	#LR__5066
33d84     2C 4E 05 F1 | 	add	fp, #44
33d88     A7 FA 01 FB | 	rdlong	result1, fp
33d8c     04 4E 85 F1 | 	sub	fp, #4
33d90     A7 18 02 FB | 	rdlong	arg04, fp
33d94     0C FB 01 F1 | 	add	result1, arg04
33d98     10 4E 85 F1 | 	sub	fp, #16
33d9c     A7 18 02 FB | 	rdlong	arg04, fp
33da0     18 4E 85 F1 | 	sub	fp, #24
33da4     0A 18 06 F1 | 	add	arg04, #10
33da8     0C 19 E2 FA | 	rdword	arg04, arg04
33dac     0C FB 19 F2 | 	cmp	result1, arg04 wcz
33db0     28 00 90 ED |  if_be	jmp	#LR__5063
33db4     18 4E 05 F1 | 	add	fp, #24
33db8     A7 FA 01 FB | 	rdlong	result1, fp
33dbc     0A FA 05 F1 | 	add	result1, #10
33dc0     FD FA E1 FA | 	rdword	result1, result1
33dc4     14 4E 05 F1 | 	add	fp, #20
33dc8     A7 18 02 FB | 	rdlong	arg04, fp
33dcc     0C FB 81 F1 | 	sub	result1, arg04
33dd0     04 4E 85 F1 | 	sub	fp, #4
33dd4     A7 FA 61 FC | 	wrlong	result1, fp
33dd8     28 4E 85 F1 | 	sub	fp, #40
33ddc                 | LR__5063
33ddc     18 4E 05 F1 | 	add	fp, #24
33de0     A7 18 02 FB | 	rdlong	arg04, fp
33de4     01 18 06 F1 | 	add	arg04, #1
33de8     0C 13 C2 FA | 	rdbyte	arg01, arg04
33dec     18 4E 05 F1 | 	add	fp, #24
33df0     A7 14 02 FB | 	rdlong	arg02, fp
33df4     10 4E 85 F1 | 	sub	fp, #16
33df8     A7 16 02 FB | 	rdlong	arg03, fp
33dfc     08 4E 05 F1 | 	add	fp, #8
33e00     A7 18 02 FB | 	rdlong	arg04, fp
33e04     28 4E 85 F1 | 	sub	fp, #40
33e08     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
33e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
33e10     1C 00 90 AD |  if_e	jmp	#LR__5064
33e14     04 4E 05 F1 | 	add	fp, #4
33e18     A7 26 02 FB | 	rdlong	local01, fp
33e1c     04 4E 85 F1 | 	sub	fp, #4
33e20     11 26 06 F1 | 	add	local01, #17
33e24     13 03 48 FC | 	wrbyte	#1, local01
33e28     01 FA 05 F6 | 	mov	result1, #1
33e2c     48 03 90 FD | 	jmp	#LR__5073
33e30                 | LR__5064
33e30     04 4E 05 F1 | 	add	fp, #4
33e34     A7 FA 01 FB | 	rdlong	result1, fp
33e38     1C FA 05 F1 | 	add	result1, #28
33e3c     FD FA 01 FB | 	rdlong	result1, result1
33e40     1C 4E 05 F1 | 	add	fp, #28
33e44     A7 28 02 FB | 	rdlong	local02, fp
33e48     14 FB 81 F1 | 	sub	result1, local02
33e4c     08 4E 05 F1 | 	add	fp, #8
33e50     A7 18 02 FB | 	rdlong	arg04, fp
33e54     28 4E 85 F1 | 	sub	fp, #40
33e58     0C FB 11 F2 | 	cmp	result1, arg04 wc
33e5c     68 00 90 3D |  if_ae	jmp	#LR__5065
33e60     04 4E 05 F1 | 	add	fp, #4
33e64     A7 12 02 FB | 	rdlong	arg01, fp
33e68     28 12 06 F1 | 	add	arg01, #40
33e6c     2C 4E 05 F1 | 	add	fp, #44
33e70     A7 14 02 FB | 	rdlong	arg02, fp
33e74     2C 4E 85 F1 | 	sub	fp, #44
33e78     A7 FA 01 FB | 	rdlong	result1, fp
33e7c     1C FA 05 F1 | 	add	result1, #28
33e80     FD 2A 02 FB | 	rdlong	local03, result1
33e84     1C 4E 05 F1 | 	add	fp, #28
33e88     A7 18 02 FB | 	rdlong	arg04, fp
33e8c     20 4E 85 F1 | 	sub	fp, #32
33e90     0C 2B 82 F1 | 	sub	local03, arg04
33e94     09 2A 66 F0 | 	shl	local03, #9
33e98     15 15 02 F1 | 	add	arg02, local03
33e9c     09 16 C6 F9 | 	decod	arg03, #9
33ea0     68 3B BF FD | 	call	#__system____builtin_memmove
33ea4     04 4E 05 F1 | 	add	fp, #4
33ea8     A7 18 02 FB | 	rdlong	arg04, fp
33eac     0C FB 01 F6 | 	mov	result1, arg04
33eb0     04 4E 85 F1 | 	sub	fp, #4
33eb4     10 18 06 F1 | 	add	arg04, #16
33eb8     0C 19 C2 FA | 	rdbyte	arg04, arg04
33ebc     7F 18 06 F5 | 	and	arg04, #127
33ec0     10 FA 05 F1 | 	add	result1, #16
33ec4     FD 18 42 FC | 	wrbyte	arg04, result1
33ec8                 | LR__5065
33ec8     28 4E 05 F1 | 	add	fp, #40
33ecc     A7 FA 01 FB | 	rdlong	result1, fp
33ed0     09 FA 65 F0 | 	shl	result1, #9
33ed4     04 4E 85 F1 | 	sub	fp, #4
33ed8     A7 FA 61 FC | 	wrlong	result1, fp
33edc     24 4E 85 F1 | 	sub	fp, #36
33ee0                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
33ee0                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
33ee0                 | ' 				}
33ee0                 | ' 
33ee0                 | ' 
33ee0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
33ee0                 | ' 				continue;
33ee0     74 01 90 FD | 	jmp	#LR__5069
33ee4                 | LR__5066
33ee4     04 4E 05 F1 | 	add	fp, #4
33ee8     A7 28 02 FB | 	rdlong	local02, fp
33eec     1C 28 06 F1 | 	add	local02, #28
33ef0     14 FB 01 FB | 	rdlong	result1, local02
33ef4     1C 4E 05 F1 | 	add	fp, #28
33ef8     A7 28 02 FB | 	rdlong	local02, fp
33efc     20 4E 85 F1 | 	sub	fp, #32
33f00     14 FB 09 F2 | 	cmp	result1, local02 wz
33f04     90 00 90 AD |  if_e	jmp	#LR__5067
33f08     04 4E 05 F1 | 	add	fp, #4
33f0c     A7 FA 01 FB | 	rdlong	result1, fp
33f10     FD 2A 02 F6 | 	mov	local03, result1
33f14     04 4E 85 F1 | 	sub	fp, #4
33f18     14 2A 06 F1 | 	add	local03, #20
33f1c     15 2B 02 FB | 	rdlong	local03, local03
33f20     0C FA 05 F1 | 	add	result1, #12
33f24     FD 2C 02 FB | 	rdlong	local04, result1
33f28     16 2F 02 F6 | 	mov	local05, local04
33f2c     17 2B 12 F2 | 	cmp	local03, local05 wc
33f30     64 00 90 3D |  if_ae	jmp	#LR__5067
33f34     18 4E 05 F1 | 	add	fp, #24
33f38     A7 18 02 FB | 	rdlong	arg04, fp
33f3c     01 18 06 F1 | 	add	arg04, #1
33f40     0C 13 C2 FA | 	rdbyte	arg01, arg04
33f44     14 4E 85 F1 | 	sub	fp, #20
33f48     A7 30 02 FB | 	rdlong	local06, fp
33f4c     28 30 06 F1 | 	add	local06, #40
33f50     18 33 02 F6 | 	mov	local07, local06
33f54     1C 4E 05 F1 | 	add	fp, #28
33f58     A7 34 02 FB | 	rdlong	local08, fp
33f5c     20 4E 85 F1 | 	sub	fp, #32
33f60     01 36 06 F6 | 	mov	local09, #1
33f64     19 15 02 F6 | 	mov	arg02, local07
33f68     1A 17 02 F6 | 	mov	arg03, local08
33f6c     01 18 06 F6 | 	mov	arg04, #1
33f70     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
33f74     FD 38 0A F6 | 	mov	local10, result1 wz
33f78     1C 00 90 AD |  if_e	jmp	#LR__5067
33f7c     04 4E 05 F1 | 	add	fp, #4
33f80     A7 38 02 FB | 	rdlong	local10, fp
33f84     04 4E 85 F1 | 	sub	fp, #4
33f88     11 38 06 F1 | 	add	local10, #17
33f8c     1C 03 48 FC | 	wrbyte	#1, local10
33f90                 | ' 				fp->fptr < fp->obj.objsize &&
33f90                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
33f90                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
33f90     01 FA 05 F6 | 	mov	result1, #1
33f94     E0 01 90 FD | 	jmp	#LR__5073
33f98                 | LR__5067
33f98     04 4E 05 F1 | 	add	fp, #4
33f9c     A7 18 02 FB | 	rdlong	arg04, fp
33fa0     1C 4E 05 F1 | 	add	fp, #28
33fa4     A7 FA 01 FB | 	rdlong	result1, fp
33fa8     20 4E 85 F1 | 	sub	fp, #32
33fac     1C 18 06 F1 | 	add	arg04, #28
33fb0     0C FB 61 FC | 	wrlong	result1, arg04
33fb4                 | LR__5068
33fb4     04 4E 05 F1 | 	add	fp, #4
33fb8     A7 FA 01 FB | 	rdlong	result1, fp
33fbc     14 FA 05 F1 | 	add	result1, #20
33fc0     FD FA 01 FB | 	rdlong	result1, result1
33fc4     FF FB 05 F5 | 	and	result1, #511
33fc8     09 3A C6 F9 | 	decod	local11, #9
33fcc     FD 3A 82 F1 | 	sub	local11, result1
33fd0     20 4E 05 F1 | 	add	fp, #32
33fd4     A7 3A 62 FC | 	wrlong	local11, fp
33fd8     18 4E 85 F1 | 	sub	fp, #24
33fdc     A7 FA 01 FB | 	rdlong	result1, fp
33fe0     0C 4E 85 F1 | 	sub	fp, #12
33fe4     FD 3A 1A F2 | 	cmp	local11, result1 wcz
33fe8     0C 4E 05 11 |  if_a	add	fp, #12
33fec     A7 3A 02 1B |  if_a	rdlong	local11, fp
33ff0     18 4E 05 11 |  if_a	add	fp, #24
33ff4     A7 3A 62 1C |  if_a	wrlong	local11, fp
33ff8     24 4E 85 11 |  if_a	sub	fp, #36
33ffc     04 4E 05 F1 | 	add	fp, #4
34000     A7 3A 02 FB | 	rdlong	local11, fp
34004     1D 13 02 F6 | 	mov	arg01, local11
34008     28 12 06 F1 | 	add	arg01, #40
3400c     14 3A 06 F1 | 	add	local11, #20
34010     1D 3B 02 FB | 	rdlong	local11, local11
34014     FF 3B 06 F5 | 	and	local11, #511
34018     1D 13 02 F1 | 	add	arg01, local11
3401c     2C 4E 05 F1 | 	add	fp, #44
34020     A7 14 02 FB | 	rdlong	arg02, fp
34024     0C 4E 85 F1 | 	sub	fp, #12
34028     A7 16 02 FB | 	rdlong	arg03, fp
3402c     24 4E 85 F1 | 	sub	fp, #36
34030     D8 39 BF FD | 	call	#__system____builtin_memmove
34034     04 4E 05 F1 | 	add	fp, #4
34038     A7 FA 01 FB | 	rdlong	result1, fp
3403c     FD 3A 02 F6 | 	mov	local11, result1
34040     04 4E 85 F1 | 	sub	fp, #4
34044     10 FA 05 F1 | 	add	result1, #16
34048     FD FA C1 FA | 	rdbyte	result1, result1
3404c     80 FA 45 F5 | 	or	result1, #128
34050     10 3A 06 F1 | 	add	local11, #16
34054     1D FB 41 FC | 	wrbyte	result1, local11
34058                 | LR__5069
34058     0C 4E 05 F1 | 	add	fp, #12
3405c     A7 3A 02 FB | 	rdlong	local11, fp
34060     18 4E 05 F1 | 	add	fp, #24
34064     A7 FA 01 FB | 	rdlong	result1, fp
34068     FD 3A 82 F1 | 	sub	local11, result1
3406c     18 4E 85 F1 | 	sub	fp, #24
34070     A7 3A 62 FC | 	wrlong	local11, fp
34074     04 4E 05 F1 | 	add	fp, #4
34078     A7 3C 02 FB | 	rdlong	local12, fp
3407c     1E 3B 02 FB | 	rdlong	local11, local12
34080     14 4E 05 F1 | 	add	fp, #20
34084     A7 3E 02 FB | 	rdlong	local13, fp
34088     1F 3B 02 F1 | 	add	local11, local13
3408c     1E 3B 62 FC | 	wrlong	local11, local12
34090     0C 4E 05 F1 | 	add	fp, #12
34094     A7 3A 02 FB | 	rdlong	local11, fp
34098     0C 4E 85 F1 | 	sub	fp, #12
3409c     A7 40 02 FB | 	rdlong	local14, fp
340a0     20 3B 02 F1 | 	add	local11, local14
340a4     0C 4E 05 F1 | 	add	fp, #12
340a8     A7 3A 62 FC | 	wrlong	local11, fp
340ac     2C 4E 85 F1 | 	sub	fp, #44
340b0     A7 42 02 FB | 	rdlong	local15, fp
340b4     21 3B 02 F6 | 	mov	local11, local15
340b8     14 42 06 F1 | 	add	local15, #20
340bc     21 43 02 FB | 	rdlong	local15, local15
340c0     20 4E 05 F1 | 	add	fp, #32
340c4     A7 44 02 FB | 	rdlong	local16, fp
340c8     22 43 02 F1 | 	add	local15, local16
340cc     14 3A 06 F1 | 	add	local11, #20
340d0     1D 43 62 FC | 	wrlong	local15, local11
340d4     20 4E 85 F1 | 	sub	fp, #32
340d8     A7 46 02 FB | 	rdlong	local17, fp
340dc     23 3B 02 F6 | 	mov	local11, local17
340e0     23 49 02 F6 | 	mov	local18, local17
340e4     04 4E 85 F1 | 	sub	fp, #4
340e8     14 46 06 F1 | 	add	local17, #20
340ec     23 4B 02 FB | 	rdlong	local19, local17
340f0     0C 48 06 F1 | 	add	local18, #12
340f4     24 4D 02 FB | 	rdlong	local20, local18
340f8     26 4B 1A F2 | 	cmp	local19, local20 wcz
340fc     24 00 90 ED |  if_be	jmp	#LR__5070
34100     04 4E 05 F1 | 	add	fp, #4
34104     A7 2E 02 FB | 	rdlong	local05, fp
34108     04 4E 85 F1 | 	sub	fp, #4
3410c     17 2B 02 F6 | 	mov	local03, local05
34110     14 2A 06 F1 | 	add	local03, #20
34114     15 2D 02 FB | 	rdlong	local04, local03
34118     14 2A 86 F1 | 	sub	local03, #20
3411c     16 4F 02 F6 | 	mov	local21, local04
34120     20 00 90 FD | 	jmp	#LR__5071
34124                 | LR__5070
34124     04 4E 05 F1 | 	add	fp, #4
34128     A7 32 02 FB | 	rdlong	local07, fp
3412c     04 4E 85 F1 | 	sub	fp, #4
34130     19 39 02 F6 | 	mov	local10, local07
34134     0C 38 06 F1 | 	add	local10, #12
34138     1C 35 02 FB | 	rdlong	local08, local10
3413c     0C 38 86 F1 | 	sub	local10, #12
34140     1A 4F 02 F6 | 	mov	local21, local08
34144                 | LR__5071
34144     0C 3A 06 F1 | 	add	local11, #12
34148     1D 4F 62 FC | 	wrlong	local21, local11
3414c     5C F9 9F FD | 	jmp	#LR__5053
34150                 | LR__5072
34150     04 4E 05 F1 | 	add	fp, #4
34154     A7 3C 02 FB | 	rdlong	local12, fp
34158     1E 27 02 F6 | 	mov	local01, local12
3415c     04 4E 85 F1 | 	sub	fp, #4
34160     10 3C 06 F1 | 	add	local12, #16
34164     1E 3B C2 FA | 	rdbyte	local11, local12
34168     40 3A 46 F5 | 	or	local11, #64
3416c     10 26 06 F1 | 	add	local01, #16
34170     13 3B 42 FC | 	wrbyte	local11, local01
34174                 | ' 
34174                 | ' 
34174                 | ' 
34174                 | ' 
34174                 | ' 
34174                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
34174                 | ' 		fp->flag |=  0x80 ;
34174                 | ' 
34174                 | ' 	}
34174                 | ' 
34174                 | ' 	fp->flag |=  0x40 ;
34174                 | ' 
34174                 | ' 	return FR_OK ;
34174     00 FA 05 F6 | 	mov	result1, #0
34178                 | LR__5073
34178     A7 F0 03 F6 | 	mov	ptra, fp
3417c     B2 00 A0 FD | 	call	#popregs_
34180                 | _fatfs_cc_f_write_ret
34180     2D 00 64 FD | 	ret
34184                 | 
34184                 | _fatfs_cc_f_sync
34184     00 4A 05 F6 | 	mov	COUNT_, #0
34188     A8 00 A0 FD | 	call	#pushregs_
3418c     18 F0 07 F1 | 	add	ptra, #24
34190     04 4E 05 F1 | 	add	fp, #4
34194     A7 12 62 FC | 	wrlong	arg01, fp
34198     08 4E 05 F1 | 	add	fp, #8
3419c     A7 14 02 F6 | 	mov	arg02, fp
341a0     0C 4E 85 F1 | 	sub	fp, #12
341a4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
341a8     08 4E 05 F1 | 	add	fp, #8
341ac     A7 FA 61 FC | 	wrlong	result1, fp
341b0     08 4E 85 F1 | 	sub	fp, #8
341b4     00 FA 0D F2 | 	cmp	result1, #0 wz
341b8     C0 01 90 5D |  if_ne	jmp	#LR__5083
341bc     04 4E 05 F1 | 	add	fp, #4
341c0     A7 18 02 FB | 	rdlong	arg04, fp
341c4     04 4E 85 F1 | 	sub	fp, #4
341c8     10 18 06 F1 | 	add	arg04, #16
341cc     0C 19 C2 FA | 	rdbyte	arg04, arg04
341d0     40 18 CE F7 | 	test	arg04, #64 wz
341d4     A4 01 90 AD |  if_e	jmp	#LR__5082
341d8     04 4E 05 F1 | 	add	fp, #4
341dc     A7 18 02 FB | 	rdlong	arg04, fp
341e0     04 4E 85 F1 | 	sub	fp, #4
341e4     10 18 06 F1 | 	add	arg04, #16
341e8     0C 19 C2 FA | 	rdbyte	arg04, arg04
341ec     80 18 CE F7 | 	test	arg04, #128 wz
341f0     64 00 90 AD |  if_e	jmp	#LR__5080
341f4     0C 4E 05 F1 | 	add	fp, #12
341f8     A7 18 02 FB | 	rdlong	arg04, fp
341fc     01 18 06 F1 | 	add	arg04, #1
34200     0C 13 C2 FA | 	rdbyte	arg01, arg04
34204     08 4E 85 F1 | 	sub	fp, #8
34208     A7 18 02 FB | 	rdlong	arg04, fp
3420c     0C 15 02 F6 | 	mov	arg02, arg04
34210     28 14 06 F1 | 	add	arg02, #40
34214     04 4E 85 F1 | 	sub	fp, #4
34218     1C 18 06 F1 | 	add	arg04, #28
3421c     0C 17 02 FB | 	rdlong	arg03, arg04
34220     01 18 06 F6 | 	mov	arg04, #1
34224     0C AE BF FD | 	call	#_fatfs_cc_disk_write
34228     00 FA 0D F2 | 	cmp	result1, #0 wz
3422c     01 FA 05 56 |  if_ne	mov	result1, #1
34230     54 01 90 5D |  if_ne	jmp	#LR__5084
34234     04 4E 05 F1 | 	add	fp, #4
34238     A7 18 02 FB | 	rdlong	arg04, fp
3423c     0C 17 02 F6 | 	mov	arg03, arg04
34240     04 4E 85 F1 | 	sub	fp, #4
34244     10 18 06 F1 | 	add	arg04, #16
34248     0C 19 C2 FA | 	rdbyte	arg04, arg04
3424c     7F 18 06 F5 | 	and	arg04, #127
34250     10 16 06 F1 | 	add	arg03, #16
34254     0B 19 42 FC | 	wrbyte	arg04, arg03
34258                 | LR__5080
34258     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
3425c     10 4E 05 F1 | 	add	fp, #16
34260     A7 FA 61 FC | 	wrlong	result1, fp
34264     04 4E 85 F1 | 	sub	fp, #4
34268     A7 12 02 FB | 	rdlong	arg01, fp
3426c     08 4E 85 F1 | 	sub	fp, #8
34270     A7 18 02 FB | 	rdlong	arg04, fp
34274     04 4E 85 F1 | 	sub	fp, #4
34278     20 18 06 F1 | 	add	arg04, #32
3427c     0C 15 02 FB | 	rdlong	arg02, arg04
34280     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
34284     08 4E 05 F1 | 	add	fp, #8
34288     A7 FA 61 FC | 	wrlong	result1, fp
3428c     08 4E 85 F1 | 	sub	fp, #8
34290     00 FA 0D F2 | 	cmp	result1, #0 wz
34294     E4 00 90 5D |  if_ne	jmp	#LR__5081
34298     04 4E 05 F1 | 	add	fp, #4
3429c     A7 18 02 FB | 	rdlong	arg04, fp
342a0     24 18 06 F1 | 	add	arg04, #36
342a4     0C 19 02 FB | 	rdlong	arg04, arg04
342a8     10 4E 05 F1 | 	add	fp, #16
342ac     A7 18 62 FC | 	wrlong	arg04, fp
342b0     0C 17 02 F6 | 	mov	arg03, arg04
342b4     0B 16 06 F1 | 	add	arg03, #11
342b8     0B 17 C2 FA | 	rdbyte	arg03, arg03
342bc     20 16 46 F5 | 	or	arg03, #32
342c0     0B 18 06 F1 | 	add	arg04, #11
342c4     0C 17 42 FC | 	wrbyte	arg03, arg04
342c8     10 4E 85 F1 | 	sub	fp, #16
342cc     A7 18 02 FB | 	rdlong	arg04, fp
342d0     0C 13 02 FB | 	rdlong	arg01, arg04
342d4     10 4E 05 F1 | 	add	fp, #16
342d8     A7 14 02 FB | 	rdlong	arg02, fp
342dc     14 4E 85 F1 | 	sub	fp, #20
342e0     08 18 06 F1 | 	add	arg04, #8
342e4     0C 17 02 FB | 	rdlong	arg03, arg04
342e8     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
342ec     14 4E 05 F1 | 	add	fp, #20
342f0     A7 12 02 FB | 	rdlong	arg01, fp
342f4     1C 12 06 F1 | 	add	arg01, #28
342f8     10 4E 85 F1 | 	sub	fp, #16
342fc     A7 18 02 FB | 	rdlong	arg04, fp
34300     0C 18 06 F1 | 	add	arg04, #12
34304     0C 15 02 FB | 	rdlong	arg02, arg04
34308     09 15 62 FC | 	wrlong	arg02, arg01
3430c     10 4E 05 F1 | 	add	fp, #16
34310     A7 12 02 FB | 	rdlong	arg01, fp
34314     16 12 06 F1 | 	add	arg01, #22
34318     04 4E 85 F1 | 	sub	fp, #4
3431c     A7 14 02 FB | 	rdlong	arg02, fp
34320     09 15 62 FC | 	wrlong	arg02, arg01
34324     04 4E 05 F1 | 	add	fp, #4
34328     A7 12 02 FB | 	rdlong	arg01, fp
3432c     12 12 06 F1 | 	add	arg01, #18
34330     09 01 58 FC | 	wrword	#0, arg01
34334     08 4E 85 F1 | 	sub	fp, #8
34338     A7 18 02 FB | 	rdlong	arg04, fp
3433c     03 18 06 F1 | 	add	arg04, #3
34340     0C 03 48 FC | 	wrbyte	#1, arg04
34344     A7 12 02 FB | 	rdlong	arg01, fp
34348     0C 4E 85 F1 | 	sub	fp, #12
3434c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
34350     08 4E 05 F1 | 	add	fp, #8
34354     A7 FA 61 FC | 	wrlong	result1, fp
34358     04 4E 85 F1 | 	sub	fp, #4
3435c     A7 18 02 FB | 	rdlong	arg04, fp
34360     0C 17 02 F6 | 	mov	arg03, arg04
34364     04 4E 85 F1 | 	sub	fp, #4
34368     10 18 06 F1 | 	add	arg04, #16
3436c     0C 19 C2 FA | 	rdbyte	arg04, arg04
34370     BF 18 06 F5 | 	and	arg04, #191
34374     10 16 06 F1 | 	add	arg03, #16
34378     0B 19 42 FC | 	wrbyte	arg04, arg03
3437c                 | LR__5081
3437c                 | LR__5082
3437c                 | LR__5083
3437c                 | ' 					dir = fp->dir_ptr;
3437c                 | ' 					dir[ 11 ] |=  0x20 ;
3437c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
3437c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
3437c                 | ' 					st_dword(dir +  22 , tm);
3437c                 | ' 					st_word(dir +  18 , 0);
3437c                 | ' 					fs->wflag = 1;
3437c                 | ' 					res = sync_fs(fs);
3437c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
3437c                 | ' 				}
3437c                 | ' 			}
3437c                 | ' 		}
3437c                 | ' 	}
3437c                 | ' 
3437c                 | ' 	return res ;
3437c     08 4E 05 F1 | 	add	fp, #8
34380     A7 FA 01 FB | 	rdlong	result1, fp
34384     08 4E 85 F1 | 	sub	fp, #8
34388                 | LR__5084
34388     A7 F0 03 F6 | 	mov	ptra, fp
3438c     B2 00 A0 FD | 	call	#popregs_
34390                 | _fatfs_cc_f_sync_ret
34390     2D 00 64 FD | 	ret
34394                 | 
34394                 | _fatfs_cc_f_close
34394     01 4A 05 F6 | 	mov	COUNT_, #1
34398     A8 00 A0 FD | 	call	#pushregs_
3439c     10 F0 07 F1 | 	add	ptra, #16
343a0     04 4E 05 F1 | 	add	fp, #4
343a4     A7 12 62 FC | 	wrlong	arg01, fp
343a8     04 4E 85 F1 | 	sub	fp, #4
343ac     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
343b0     08 4E 05 F1 | 	add	fp, #8
343b4     A7 FA 61 FC | 	wrlong	result1, fp
343b8     08 4E 85 F1 | 	sub	fp, #8
343bc     00 FA 0D F2 | 	cmp	result1, #0 wz
343c0     38 00 90 5D |  if_ne	jmp	#LR__5090
343c4     04 4E 05 F1 | 	add	fp, #4
343c8     A7 12 02 FB | 	rdlong	arg01, fp
343cc     08 4E 05 F1 | 	add	fp, #8
343d0     A7 14 02 F6 | 	mov	arg02, fp
343d4     0C 4E 85 F1 | 	sub	fp, #12
343d8     9C E6 BF FD | 	call	#_fatfs_cc_validate
343dc     08 4E 05 F1 | 	add	fp, #8
343e0     A7 FA 61 FC | 	wrlong	result1, fp
343e4     08 4E 85 F1 | 	sub	fp, #8
343e8     00 FA 0D F2 | 	cmp	result1, #0 wz
343ec     04 4E 05 A1 |  if_e	add	fp, #4
343f0     A7 26 02 AB |  if_e	rdlong	local01, fp
343f4     04 4E 85 A1 |  if_e	sub	fp, #4
343f8     13 01 68 AC |  if_e	wrlong	#0, local01
343fc                 | LR__5090
343fc                 | ' 
343fc                 | ' 
343fc                 | ' 
343fc                 | ' 
343fc                 | ' 			fp->obj.fs = 0;
343fc                 | ' #line 4192 "ff.c"
343fc                 | ' 		}
343fc                 | ' 	}
343fc                 | ' 	return res;
343fc     08 4E 05 F1 | 	add	fp, #8
34400     A7 FA 01 FB | 	rdlong	result1, fp
34404     08 4E 85 F1 | 	sub	fp, #8
34408     A7 F0 03 F6 | 	mov	ptra, fp
3440c     B2 00 A0 FD | 	call	#popregs_
34410                 | _fatfs_cc_f_close_ret
34410     2D 00 64 FD | 	ret
34414                 | 
34414                 | _fatfs_cc_f_lseek
34414     00 4A 05 F6 | 	mov	COUNT_, #0
34418     A8 00 A0 FD | 	call	#pushregs_
3441c     24 F0 07 F1 | 	add	ptra, #36
34420     04 4E 05 F1 | 	add	fp, #4
34424     A7 12 62 FC | 	wrlong	arg01, fp
34428     04 4E 05 F1 | 	add	fp, #4
3442c     A7 14 62 FC | 	wrlong	arg02, fp
34430     04 4E 85 F1 | 	sub	fp, #4
34434     A7 12 02 FB | 	rdlong	arg01, fp
34438     0C 4E 05 F1 | 	add	fp, #12
3443c     A7 14 02 F6 | 	mov	arg02, fp
34440     10 4E 85 F1 | 	sub	fp, #16
34444     30 E6 BF FD | 	call	#_fatfs_cc_validate
34448     0C 4E 05 F1 | 	add	fp, #12
3444c     A7 FA 61 FC | 	wrlong	result1, fp
34450     0C 4E 85 F1 | 	sub	fp, #12
34454     00 FA 0D F2 | 	cmp	result1, #0 wz
34458     1C 00 90 5D |  if_ne	jmp	#LR__5100
3445c     04 4E 05 F1 | 	add	fp, #4
34460     A7 18 02 FB | 	rdlong	arg04, fp
34464     11 18 06 F1 | 	add	arg04, #17
34468     0C 19 C2 FA | 	rdbyte	arg04, arg04
3446c     08 4E 05 F1 | 	add	fp, #8
34470     A7 18 62 FC | 	wrlong	arg04, fp
34474     0C 4E 85 F1 | 	sub	fp, #12
34478                 | LR__5100
34478     0C 4E 05 F1 | 	add	fp, #12
3447c     A7 18 0A FB | 	rdlong	arg04, fp wz
34480     0C 4E 85 F1 | 	sub	fp, #12
34484     0C 4E 05 51 |  if_ne	add	fp, #12
34488     A7 FA 01 5B |  if_ne	rdlong	result1, fp
3448c     0C 4E 85 51 |  if_ne	sub	fp, #12
34490     40 06 90 5D |  if_ne	jmp	#LR__5123
34494     04 4E 05 F1 | 	add	fp, #4
34498     A7 18 02 FB | 	rdlong	arg04, fp
3449c     04 4E 05 F1 | 	add	fp, #4
344a0     A7 16 02 FB | 	rdlong	arg03, fp
344a4     08 4E 85 F1 | 	sub	fp, #8
344a8     0C 18 06 F1 | 	add	arg04, #12
344ac     0C 19 02 FB | 	rdlong	arg04, arg04
344b0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
344b4     3C 00 90 ED |  if_be	jmp	#LR__5101
344b8     04 4E 05 F1 | 	add	fp, #4
344bc     A7 16 02 FB | 	rdlong	arg03, fp
344c0     04 4E 85 F1 | 	sub	fp, #4
344c4     10 16 06 F1 | 	add	arg03, #16
344c8     0B 17 C2 FA | 	rdbyte	arg03, arg03
344cc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
344d0     02 16 CE F7 | 	test	arg03, #2 wz
344d4     1C 00 90 5D |  if_ne	jmp	#LR__5101
344d8     04 4E 05 F1 | 	add	fp, #4
344dc     A7 16 02 FB | 	rdlong	arg03, fp
344e0     0C 16 06 F1 | 	add	arg03, #12
344e4     0B 17 02 FB | 	rdlong	arg03, arg03
344e8     04 4E 05 F1 | 	add	fp, #4
344ec     A7 16 62 FC | 	wrlong	arg03, fp
344f0     08 4E 85 F1 | 	sub	fp, #8
344f4                 | LR__5101
344f4     04 4E 05 F1 | 	add	fp, #4
344f8     A7 16 02 FB | 	rdlong	arg03, fp
344fc     14 16 06 F1 | 	add	arg03, #20
34500     0B 17 02 FB | 	rdlong	arg03, arg03
34504     1C 4E 05 F1 | 	add	fp, #28
34508     A7 16 62 FC | 	wrlong	arg03, fp
3450c     1C 4E 85 F1 | 	sub	fp, #28
34510     A7 16 02 FB | 	rdlong	arg03, fp
34514     18 4E 05 F1 | 	add	fp, #24
34518     A7 00 68 FC | 	wrlong	#0, fp
3451c     14 16 06 F1 | 	add	arg03, #20
34520     0B 01 68 FC | 	wrlong	#0, arg03
34524     14 4E 85 F1 | 	sub	fp, #20
34528     A7 16 02 FB | 	rdlong	arg03, fp
3452c     08 4E 85 F1 | 	sub	fp, #8
34530     01 16 16 F2 | 	cmp	arg03, #1 wc
34534     E4 03 90 CD |  if_b	jmp	#LR__5117
34538     10 4E 05 F1 | 	add	fp, #16
3453c     A7 16 02 FB | 	rdlong	arg03, fp
34540     0A 16 06 F1 | 	add	arg03, #10
34544     0B 19 E2 FA | 	rdword	arg04, arg03
34548     09 18 66 F0 | 	shl	arg04, #9
3454c     08 4E 05 F1 | 	add	fp, #8
34550     A7 18 62 FC | 	wrlong	arg04, fp
34554     08 4E 05 F1 | 	add	fp, #8
34558     A7 18 02 FB | 	rdlong	arg04, fp
3455c     20 4E 85 F1 | 	sub	fp, #32
34560     01 18 16 F2 | 	cmp	arg04, #1 wc
34564     AC 00 90 CD |  if_b	jmp	#LR__5102
34568     08 4E 05 F1 | 	add	fp, #8
3456c     A7 18 02 FB | 	rdlong	arg04, fp
34570     01 18 86 F1 | 	sub	arg04, #1
34574     10 4E 05 F1 | 	add	fp, #16
34578     A7 16 02 FB | 	rdlong	arg03, fp
3457c     0B 19 12 FD | 	qdiv	arg04, arg03
34580     08 4E 05 F1 | 	add	fp, #8
34584     A7 FA 01 FB | 	rdlong	result1, fp
34588     01 FA 85 F1 | 	sub	result1, #1
3458c     18 18 62 FD | 	getqx	arg04
34590     0B FB 11 FD | 	qdiv	result1, arg03
34594     20 4E 85 F1 | 	sub	fp, #32
34598     18 16 62 FD | 	getqx	arg03
3459c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
345a0     70 00 90 CD |  if_b	jmp	#LR__5102
345a4     04 4E 05 F1 | 	add	fp, #4
345a8     A7 16 02 FB | 	rdlong	arg03, fp
345ac     1C 4E 05 F1 | 	add	fp, #28
345b0     A7 FA 01 FB | 	rdlong	result1, fp
345b4     01 FA 85 F1 | 	sub	result1, #1
345b8     08 4E 85 F1 | 	sub	fp, #8
345bc     A7 18 02 FB | 	rdlong	arg04, fp
345c0     01 18 86 F1 | 	sub	arg04, #1
345c4     0C FB 21 F5 | 	andn	result1, arg04
345c8     14 16 06 F1 | 	add	arg03, #20
345cc     0B FB 61 FC | 	wrlong	result1, arg03
345d0     10 4E 85 F1 | 	sub	fp, #16
345d4     A7 16 02 FB | 	rdlong	arg03, fp
345d8     04 4E 85 F1 | 	sub	fp, #4
345dc     A7 18 02 FB | 	rdlong	arg04, fp
345e0     14 18 06 F1 | 	add	arg04, #20
345e4     0C 19 02 FB | 	rdlong	arg04, arg04
345e8     0C 17 82 F1 | 	sub	arg03, arg04
345ec     04 4E 05 F1 | 	add	fp, #4
345f0     A7 16 62 FC | 	wrlong	arg03, fp
345f4     04 4E 85 F1 | 	sub	fp, #4
345f8     A7 16 02 FB | 	rdlong	arg03, fp
345fc     18 16 06 F1 | 	add	arg03, #24
34600     0B 17 02 FB | 	rdlong	arg03, arg03
34604     10 4E 05 F1 | 	add	fp, #16
34608     A7 16 62 FC | 	wrlong	arg03, fp
3460c     14 4E 85 F1 | 	sub	fp, #20
34610     D0 00 90 FD | 	jmp	#LR__5106
34614                 | LR__5102
34614     04 4E 05 F1 | 	add	fp, #4
34618     A7 16 02 FB | 	rdlong	arg03, fp
3461c     08 16 06 F1 | 	add	arg03, #8
34620     0B 17 0A FB | 	rdlong	arg03, arg03 wz
34624     10 4E 05 F1 | 	add	fp, #16
34628     A7 16 62 FC | 	wrlong	arg03, fp
3462c     14 4E 85 F1 | 	sub	fp, #20
34630     94 00 90 5D |  if_ne	jmp	#LR__5105
34634     04 4E 05 F1 | 	add	fp, #4
34638     A7 12 02 FB | 	rdlong	arg01, fp
3463c     04 4E 85 F1 | 	sub	fp, #4
34640     00 14 06 F6 | 	mov	arg02, #0
34644     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
34648     14 4E 05 F1 | 	add	fp, #20
3464c     A7 FA 61 FC | 	wrlong	result1, fp
34650     14 4E 85 F1 | 	sub	fp, #20
34654     01 FA 0D F2 | 	cmp	result1, #1 wz
34658     1C 00 90 5D |  if_ne	jmp	#LR__5103
3465c     04 4E 05 F1 | 	add	fp, #4
34660     A7 16 02 FB | 	rdlong	arg03, fp
34664     04 4E 85 F1 | 	sub	fp, #4
34668     11 16 06 F1 | 	add	arg03, #17
3466c     0B 05 48 FC | 	wrbyte	#2, arg03
34670     02 FA 05 F6 | 	mov	result1, #2
34674     5C 04 90 FD | 	jmp	#LR__5123
34678                 | LR__5103
34678     14 4E 05 F1 | 	add	fp, #20
3467c     A7 FA 01 FB | 	rdlong	result1, fp
34680     14 4E 85 F1 | 	sub	fp, #20
34684     FF FF 7F FF 
34688     FF FB 0D F2 | 	cmp	result1, ##-1 wz
3468c     1C 00 90 5D |  if_ne	jmp	#LR__5104
34690     04 4E 05 F1 | 	add	fp, #4
34694     A7 16 02 FB | 	rdlong	arg03, fp
34698     04 4E 85 F1 | 	sub	fp, #4
3469c     11 16 06 F1 | 	add	arg03, #17
346a0     0B 03 48 FC | 	wrbyte	#1, arg03
346a4     01 FA 05 F6 | 	mov	result1, #1
346a8     28 04 90 FD | 	jmp	#LR__5123
346ac                 | LR__5104
346ac     04 4E 05 F1 | 	add	fp, #4
346b0     A7 16 02 FB | 	rdlong	arg03, fp
346b4     10 4E 05 F1 | 	add	fp, #16
346b8     A7 18 02 FB | 	rdlong	arg04, fp
346bc     14 4E 85 F1 | 	sub	fp, #20
346c0     08 16 06 F1 | 	add	arg03, #8
346c4     0B 19 62 FC | 	wrlong	arg04, arg03
346c8                 | LR__5105
346c8     04 4E 05 F1 | 	add	fp, #4
346cc     A7 16 02 FB | 	rdlong	arg03, fp
346d0     10 4E 05 F1 | 	add	fp, #16
346d4     A7 18 02 FB | 	rdlong	arg04, fp
346d8     14 4E 85 F1 | 	sub	fp, #20
346dc     18 16 06 F1 | 	add	arg03, #24
346e0     0B 19 62 FC | 	wrlong	arg04, arg03
346e4                 | LR__5106
346e4     14 4E 05 F1 | 	add	fp, #20
346e8     A7 16 0A FB | 	rdlong	arg03, fp wz
346ec     14 4E 85 F1 | 	sub	fp, #20
346f0     28 02 90 AD |  if_e	jmp	#LR__5116
346f4                 | ' 				while (ofs > bcs) {
346f4                 | LR__5107
346f4     08 4E 05 F1 | 	add	fp, #8
346f8     A7 18 02 FB | 	rdlong	arg04, fp
346fc     10 4E 05 F1 | 	add	fp, #16
34700     A7 16 02 FB | 	rdlong	arg03, fp
34704     18 4E 85 F1 | 	sub	fp, #24
34708     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
3470c     68 01 90 ED |  if_be	jmp	#LR__5113
34710     08 4E 05 F1 | 	add	fp, #8
34714     A7 18 02 FB | 	rdlong	arg04, fp
34718     10 4E 05 F1 | 	add	fp, #16
3471c     A7 16 02 FB | 	rdlong	arg03, fp
34720     0B 19 82 F1 | 	sub	arg04, arg03
34724     10 4E 85 F1 | 	sub	fp, #16
34728     A7 18 62 FC | 	wrlong	arg04, fp
3472c     04 4E 85 F1 | 	sub	fp, #4
34730     A7 18 02 FB | 	rdlong	arg04, fp
34734     0C FB 01 F6 | 	mov	result1, arg04
34738     14 18 06 F1 | 	add	arg04, #20
3473c     0C 19 02 FB | 	rdlong	arg04, arg04
34740     14 4E 05 F1 | 	add	fp, #20
34744     A7 16 02 FB | 	rdlong	arg03, fp
34748     0B 19 02 F1 | 	add	arg04, arg03
3474c     14 FA 05 F1 | 	add	result1, #20
34750     FD 18 62 FC | 	wrlong	arg04, result1
34754     14 4E 85 F1 | 	sub	fp, #20
34758     A7 16 02 FB | 	rdlong	arg03, fp
3475c     04 4E 85 F1 | 	sub	fp, #4
34760     10 16 06 F1 | 	add	arg03, #16
34764     0B 17 C2 FA | 	rdbyte	arg03, arg03
34768     02 16 CE F7 | 	test	arg03, #2 wz
3476c     3C 00 90 AD |  if_e	jmp	#LR__5108
34770     04 4E 05 F1 | 	add	fp, #4
34774     A7 12 02 FB | 	rdlong	arg01, fp
34778     10 4E 05 F1 | 	add	fp, #16
3477c     A7 14 02 FB | 	rdlong	arg02, fp
34780     14 4E 85 F1 | 	sub	fp, #20
34784     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
34788     14 4E 05 F1 | 	add	fp, #20
3478c     A7 FA 61 FC | 	wrlong	result1, fp
34790     00 FA 4D F2 | 	cmps	result1, #0 wz
34794     14 4E 85 F1 | 	sub	fp, #20
34798     08 4E 05 A1 |  if_e	add	fp, #8
3479c     A7 00 68 AC |  if_e	wrlong	#0, fp
347a0     08 4E 85 A1 |  if_e	sub	fp, #8
347a4                 | ' 							ofs = 0; break;
347a4     D0 00 90 AD |  if_e	jmp	#LR__5113
347a8     24 00 90 FD | 	jmp	#LR__5109
347ac                 | LR__5108
347ac     04 4E 05 F1 | 	add	fp, #4
347b0     A7 12 02 FB | 	rdlong	arg01, fp
347b4     10 4E 05 F1 | 	add	fp, #16
347b8     A7 14 02 FB | 	rdlong	arg02, fp
347bc     14 4E 85 F1 | 	sub	fp, #20
347c0     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
347c4     14 4E 05 F1 | 	add	fp, #20
347c8     A7 FA 61 FC | 	wrlong	result1, fp
347cc     14 4E 85 F1 | 	sub	fp, #20
347d0                 | LR__5109
347d0     14 4E 05 F1 | 	add	fp, #20
347d4     A7 16 02 FB | 	rdlong	arg03, fp
347d8     14 4E 85 F1 | 	sub	fp, #20
347dc     FF FF 7F FF 
347e0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
347e4     1C 00 90 5D |  if_ne	jmp	#LR__5110
347e8     04 4E 05 F1 | 	add	fp, #4
347ec     A7 16 02 FB | 	rdlong	arg03, fp
347f0     04 4E 85 F1 | 	sub	fp, #4
347f4     11 16 06 F1 | 	add	arg03, #17
347f8     0B 03 48 FC | 	wrbyte	#1, arg03
347fc     01 FA 05 F6 | 	mov	result1, #1
34800     D0 02 90 FD | 	jmp	#LR__5123
34804                 | LR__5110
34804     14 4E 05 F1 | 	add	fp, #20
34808     A7 16 02 FB | 	rdlong	arg03, fp
3480c     14 4E 85 F1 | 	sub	fp, #20
34810     02 16 16 F2 | 	cmp	arg03, #2 wc
34814     24 00 90 CD |  if_b	jmp	#LR__5111
34818     10 4E 05 F1 | 	add	fp, #16
3481c     A7 18 02 FB | 	rdlong	arg04, fp
34820     04 4E 05 F1 | 	add	fp, #4
34824     A7 16 02 FB | 	rdlong	arg03, fp
34828     14 4E 85 F1 | 	sub	fp, #20
3482c     18 18 06 F1 | 	add	arg04, #24
34830     0C 19 02 FB | 	rdlong	arg04, arg04
34834     0C 17 12 F2 | 	cmp	arg03, arg04 wc
34838     1C 00 90 CD |  if_b	jmp	#LR__5112
3483c                 | LR__5111
3483c     04 4E 05 F1 | 	add	fp, #4
34840     A7 16 02 FB | 	rdlong	arg03, fp
34844     04 4E 85 F1 | 	sub	fp, #4
34848     11 16 06 F1 | 	add	arg03, #17
3484c     0B 05 48 FC | 	wrbyte	#2, arg03
34850     02 FA 05 F6 | 	mov	result1, #2
34854     7C 02 90 FD | 	jmp	#LR__5123
34858                 | LR__5112
34858     04 4E 05 F1 | 	add	fp, #4
3485c     A7 18 02 FB | 	rdlong	arg04, fp
34860     10 4E 05 F1 | 	add	fp, #16
34864     A7 16 02 FB | 	rdlong	arg03, fp
34868     14 4E 85 F1 | 	sub	fp, #20
3486c     18 18 06 F1 | 	add	arg04, #24
34870     0C 17 62 FC | 	wrlong	arg03, arg04
34874     7C FE 9F FD | 	jmp	#LR__5107
34878                 | LR__5113
34878     04 4E 05 F1 | 	add	fp, #4
3487c     A7 16 02 FB | 	rdlong	arg03, fp
34880     0B 13 02 F6 | 	mov	arg01, arg03
34884     14 16 06 F1 | 	add	arg03, #20
34888     0B 15 02 FB | 	rdlong	arg02, arg03
3488c     04 4E 05 F1 | 	add	fp, #4
34890     A7 16 02 FB | 	rdlong	arg03, fp
34894     0B 15 02 F1 | 	add	arg02, arg03
34898     14 12 06 F1 | 	add	arg01, #20
3489c     09 15 62 FC | 	wrlong	arg02, arg01
348a0     A7 16 02 FB | 	rdlong	arg03, fp
348a4     08 4E 85 F1 | 	sub	fp, #8
348a8     FF 17 CE F7 | 	test	arg03, #511 wz
348ac     6C 00 90 AD |  if_e	jmp	#LR__5115
348b0     10 4E 05 F1 | 	add	fp, #16
348b4     A7 12 02 FB | 	rdlong	arg01, fp
348b8     04 4E 05 F1 | 	add	fp, #4
348bc     A7 14 02 FB | 	rdlong	arg02, fp
348c0     14 4E 85 F1 | 	sub	fp, #20
348c4     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
348c8     1C 4E 05 F1 | 	add	fp, #28
348cc     A7 FA 61 FC | 	wrlong	result1, fp
348d0     1C 4E 85 F1 | 	sub	fp, #28
348d4     00 FA 0D F2 | 	cmp	result1, #0 wz
348d8     1C 00 90 5D |  if_ne	jmp	#LR__5114
348dc     04 4E 05 F1 | 	add	fp, #4
348e0     A7 16 02 FB | 	rdlong	arg03, fp
348e4     04 4E 85 F1 | 	sub	fp, #4
348e8     11 16 06 F1 | 	add	arg03, #17
348ec     0B 05 48 FC | 	wrbyte	#2, arg03
348f0     02 FA 05 F6 | 	mov	result1, #2
348f4     DC 01 90 FD | 	jmp	#LR__5123
348f8                 | LR__5114
348f8     1C 4E 05 F1 | 	add	fp, #28
348fc     A7 18 02 FB | 	rdlong	arg04, fp
34900     14 4E 85 F1 | 	sub	fp, #20
34904     A7 16 02 FB | 	rdlong	arg03, fp
34908     09 16 46 F0 | 	shr	arg03, #9
3490c     0B 19 02 F1 | 	add	arg04, arg03
34910     14 4E 05 F1 | 	add	fp, #20
34914     A7 18 62 FC | 	wrlong	arg04, fp
34918     1C 4E 85 F1 | 	sub	fp, #28
3491c                 | LR__5115
3491c                 | LR__5116
3491c                 | LR__5117
3491c     04 4E 05 F1 | 	add	fp, #4
34920     A7 18 02 FB | 	rdlong	arg04, fp
34924     0C 17 02 F6 | 	mov	arg03, arg04
34928     04 4E 85 F1 | 	sub	fp, #4
3492c     14 16 06 F1 | 	add	arg03, #20
34930     0B 17 02 FB | 	rdlong	arg03, arg03
34934     0C 18 06 F1 | 	add	arg04, #12
34938     0C 19 02 FB | 	rdlong	arg04, arg04
3493c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
34940     3C 00 90 ED |  if_be	jmp	#LR__5118
34944     04 4E 05 F1 | 	add	fp, #4
34948     A7 18 02 FB | 	rdlong	arg04, fp
3494c     0C 17 02 F6 | 	mov	arg03, arg04
34950     14 18 06 F1 | 	add	arg04, #20
34954     0C 19 02 FB | 	rdlong	arg04, arg04
34958     0C 16 06 F1 | 	add	arg03, #12
3495c     0B 19 62 FC | 	wrlong	arg04, arg03
34960     A7 18 02 FB | 	rdlong	arg04, fp
34964     0C 17 02 F6 | 	mov	arg03, arg04
34968     04 4E 85 F1 | 	sub	fp, #4
3496c     10 18 06 F1 | 	add	arg04, #16
34970     0C 19 C2 FA | 	rdbyte	arg04, arg04
34974     40 18 46 F5 | 	or	arg04, #64
34978     10 16 06 F1 | 	add	arg03, #16
3497c     0B 19 42 FC | 	wrbyte	arg04, arg03
34980                 | LR__5118
34980     04 4E 05 F1 | 	add	fp, #4
34984     A7 16 02 FB | 	rdlong	arg03, fp
34988     04 4E 85 F1 | 	sub	fp, #4
3498c     14 16 06 F1 | 	add	arg03, #20
34990     0B 17 02 FB | 	rdlong	arg03, arg03
34994     FF 17 CE F7 | 	test	arg03, #511 wz
34998     2C 01 90 AD |  if_e	jmp	#LR__5122
3499c     04 4E 05 F1 | 	add	fp, #4
349a0     A7 18 02 FB | 	rdlong	arg04, fp
349a4     18 4E 05 F1 | 	add	fp, #24
349a8     A7 16 02 FB | 	rdlong	arg03, fp
349ac     1C 4E 85 F1 | 	sub	fp, #28
349b0     1C 18 06 F1 | 	add	arg04, #28
349b4     0C 19 02 FB | 	rdlong	arg04, arg04
349b8     0C 17 0A F2 | 	cmp	arg03, arg04 wz
349bc     08 01 90 AD |  if_e	jmp	#LR__5122
349c0     04 4E 05 F1 | 	add	fp, #4
349c4     A7 16 02 FB | 	rdlong	arg03, fp
349c8     04 4E 85 F1 | 	sub	fp, #4
349cc     10 16 06 F1 | 	add	arg03, #16
349d0     0B 17 C2 FA | 	rdbyte	arg03, arg03
349d4     80 16 CE F7 | 	test	arg03, #128 wz
349d8     7C 00 90 AD |  if_e	jmp	#LR__5120
349dc     10 4E 05 F1 | 	add	fp, #16
349e0     A7 16 02 FB | 	rdlong	arg03, fp
349e4     01 16 06 F1 | 	add	arg03, #1
349e8     0B 13 C2 FA | 	rdbyte	arg01, arg03
349ec     0C 4E 85 F1 | 	sub	fp, #12
349f0     A7 16 02 FB | 	rdlong	arg03, fp
349f4     0B 15 02 F6 | 	mov	arg02, arg03
349f8     28 14 06 F1 | 	add	arg02, #40
349fc     04 4E 85 F1 | 	sub	fp, #4
34a00     1C 16 06 F1 | 	add	arg03, #28
34a04     0B 17 02 FB | 	rdlong	arg03, arg03
34a08     01 18 06 F6 | 	mov	arg04, #1
34a0c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
34a10     00 FA 0D F2 | 	cmp	result1, #0 wz
34a14     1C 00 90 AD |  if_e	jmp	#LR__5119
34a18     04 4E 05 F1 | 	add	fp, #4
34a1c     A7 16 02 FB | 	rdlong	arg03, fp
34a20     04 4E 85 F1 | 	sub	fp, #4
34a24     11 16 06 F1 | 	add	arg03, #17
34a28     0B 03 48 FC | 	wrbyte	#1, arg03
34a2c     01 FA 05 F6 | 	mov	result1, #1
34a30     A0 00 90 FD | 	jmp	#LR__5123
34a34                 | LR__5119
34a34     04 4E 05 F1 | 	add	fp, #4
34a38     A7 18 02 FB | 	rdlong	arg04, fp
34a3c     0C 17 02 F6 | 	mov	arg03, arg04
34a40     04 4E 85 F1 | 	sub	fp, #4
34a44     10 18 06 F1 | 	add	arg04, #16
34a48     0C 19 C2 FA | 	rdbyte	arg04, arg04
34a4c     7F 18 06 F5 | 	and	arg04, #127
34a50     10 16 06 F1 | 	add	arg03, #16
34a54     0B 19 42 FC | 	wrbyte	arg04, arg03
34a58                 | LR__5120
34a58     10 4E 05 F1 | 	add	fp, #16
34a5c     A7 16 02 FB | 	rdlong	arg03, fp
34a60     01 16 06 F1 | 	add	arg03, #1
34a64     0B 13 C2 FA | 	rdbyte	arg01, arg03
34a68     0C 4E 85 F1 | 	sub	fp, #12
34a6c     A7 14 02 FB | 	rdlong	arg02, fp
34a70     28 14 06 F1 | 	add	arg02, #40
34a74     18 4E 05 F1 | 	add	fp, #24
34a78     A7 16 02 FB | 	rdlong	arg03, fp
34a7c     1C 4E 85 F1 | 	sub	fp, #28
34a80     01 18 06 F6 | 	mov	arg04, #1
34a84     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
34a88     00 FA 0D F2 | 	cmp	result1, #0 wz
34a8c     1C 00 90 AD |  if_e	jmp	#LR__5121
34a90     04 4E 05 F1 | 	add	fp, #4
34a94     A7 16 02 FB | 	rdlong	arg03, fp
34a98     04 4E 85 F1 | 	sub	fp, #4
34a9c     11 16 06 F1 | 	add	arg03, #17
34aa0     0B 03 48 FC | 	wrbyte	#1, arg03
34aa4     01 FA 05 F6 | 	mov	result1, #1
34aa8     28 00 90 FD | 	jmp	#LR__5123
34aac                 | LR__5121
34aac     04 4E 05 F1 | 	add	fp, #4
34ab0     A7 18 02 FB | 	rdlong	arg04, fp
34ab4     18 4E 05 F1 | 	add	fp, #24
34ab8     A7 16 02 FB | 	rdlong	arg03, fp
34abc     1C 4E 85 F1 | 	sub	fp, #28
34ac0     1C 18 06 F1 | 	add	arg04, #28
34ac4     0C 17 62 FC | 	wrlong	arg03, arg04
34ac8                 | LR__5122
34ac8                 | ' 
34ac8                 | ' 			fp->sect = nsect;
34ac8                 | ' 		}
34ac8                 | ' 	}
34ac8                 | ' 
34ac8                 | ' 	return res ;
34ac8     0C 4E 05 F1 | 	add	fp, #12
34acc     A7 FA 01 FB | 	rdlong	result1, fp
34ad0     0C 4E 85 F1 | 	sub	fp, #12
34ad4                 | LR__5123
34ad4     A7 F0 03 F6 | 	mov	ptra, fp
34ad8     B2 00 A0 FD | 	call	#popregs_
34adc                 | _fatfs_cc_f_lseek_ret
34adc     2D 00 64 FD | 	ret
34ae0                 | 
34ae0                 | _fatfs_cc_f_opendir
34ae0     01 4A 05 F6 | 	mov	COUNT_, #1
34ae4     A8 00 A0 FD | 	call	#pushregs_
34ae8     14 F0 07 F1 | 	add	ptra, #20
34aec     04 4E 05 F1 | 	add	fp, #4
34af0     A7 12 62 FC | 	wrlong	arg01, fp
34af4     04 4E 05 F1 | 	add	fp, #4
34af8     A7 14 62 FC | 	wrlong	arg02, fp
34afc     04 4E 85 F1 | 	sub	fp, #4
34b00     A7 16 0A FB | 	rdlong	arg03, fp wz
34b04     04 4E 85 F1 | 	sub	fp, #4
34b08     09 FA 05 A6 |  if_e	mov	result1, #9
34b0c     78 01 90 AD |  if_e	jmp	#LR__5136
34b10     08 4E 05 F1 | 	add	fp, #8
34b14     A7 12 02 F6 | 	mov	arg01, fp
34b18     08 4E 05 F1 | 	add	fp, #8
34b1c     A7 14 02 F6 | 	mov	arg02, fp
34b20     10 4E 85 F1 | 	sub	fp, #16
34b24     00 16 06 F6 | 	mov	arg03, #0
34b28     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
34b2c     0C 4E 05 F1 | 	add	fp, #12
34b30     A7 FA 61 FC | 	wrlong	result1, fp
34b34     0C 4E 85 F1 | 	sub	fp, #12
34b38     00 FA 0D F2 | 	cmp	result1, #0 wz
34b3c     20 01 90 5D |  if_ne	jmp	#LR__5135
34b40     04 4E 05 F1 | 	add	fp, #4
34b44     A7 16 02 FB | 	rdlong	arg03, fp
34b48     0C 4E 05 F1 | 	add	fp, #12
34b4c     A7 FA 01 FB | 	rdlong	result1, fp
34b50     0B FB 61 FC | 	wrlong	result1, arg03
34b54     0C 4E 85 F1 | 	sub	fp, #12
34b58     A7 12 02 FB | 	rdlong	arg01, fp
34b5c     04 4E 05 F1 | 	add	fp, #4
34b60     A7 14 02 FB | 	rdlong	arg02, fp
34b64     08 4E 85 F1 | 	sub	fp, #8
34b68     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
34b6c     0C 4E 05 F1 | 	add	fp, #12
34b70     A7 FA 61 FC | 	wrlong	result1, fp
34b74     0C 4E 85 F1 | 	sub	fp, #12
34b78     00 FA 0D F2 | 	cmp	result1, #0 wz
34b7c     C4 00 90 5D |  if_ne	jmp	#LR__5134
34b80     04 4E 05 F1 | 	add	fp, #4
34b84     A7 16 02 FB | 	rdlong	arg03, fp
34b88     04 4E 85 F1 | 	sub	fp, #4
34b8c     2B 16 06 F1 | 	add	arg03, #43
34b90     0B 17 C2 FA | 	rdbyte	arg03, arg03
34b94     80 16 CE F7 | 	test	arg03, #128 wz
34b98     58 00 90 5D |  if_ne	jmp	#LR__5132
34b9c     04 4E 05 F1 | 	add	fp, #4
34ba0     A7 16 02 FB | 	rdlong	arg03, fp
34ba4     04 4E 85 F1 | 	sub	fp, #4
34ba8     06 16 06 F1 | 	add	arg03, #6
34bac     0B 17 C2 FA | 	rdbyte	arg03, arg03
34bb0     10 16 CE F7 | 	test	arg03, #16 wz
34bb4     30 00 90 AD |  if_e	jmp	#LR__5130
34bb8     04 4E 05 F1 | 	add	fp, #4
34bbc     A7 16 02 FB | 	rdlong	arg03, fp
34bc0     0B 27 02 F6 | 	mov	local01, arg03
34bc4     0C 4E 05 F1 | 	add	fp, #12
34bc8     A7 12 02 FB | 	rdlong	arg01, fp
34bcc     10 4E 85 F1 | 	sub	fp, #16
34bd0     1C 16 06 F1 | 	add	arg03, #28
34bd4     0B 15 02 FB | 	rdlong	arg02, arg03
34bd8     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
34bdc     08 26 06 F1 | 	add	local01, #8
34be0     13 FB 61 FC | 	wrlong	result1, local01
34be4     0C 00 90 FD | 	jmp	#LR__5131
34be8                 | LR__5130
34be8     0C 4E 05 F1 | 	add	fp, #12
34bec     A7 0A 68 FC | 	wrlong	#5, fp
34bf0     0C 4E 85 F1 | 	sub	fp, #12
34bf4                 | LR__5131
34bf4                 | LR__5132
34bf4     0C 4E 05 F1 | 	add	fp, #12
34bf8     A7 26 0A FB | 	rdlong	local01, fp wz
34bfc     0C 4E 85 F1 | 	sub	fp, #12
34c00     40 00 90 5D |  if_ne	jmp	#LR__5133
34c04     04 4E 05 F1 | 	add	fp, #4
34c08     A7 26 02 FB | 	rdlong	local01, fp
34c0c     0C 4E 05 F1 | 	add	fp, #12
34c10     A7 16 02 FB | 	rdlong	arg03, fp
34c14     06 16 06 F1 | 	add	arg03, #6
34c18     0B 17 E2 FA | 	rdword	arg03, arg03
34c1c     04 26 06 F1 | 	add	local01, #4
34c20     13 17 52 FC | 	wrword	arg03, local01
34c24     0C 4E 85 F1 | 	sub	fp, #12
34c28     A7 12 02 FB | 	rdlong	arg01, fp
34c2c     04 4E 85 F1 | 	sub	fp, #4
34c30     00 14 06 F6 | 	mov	arg02, #0
34c34     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
34c38     0C 4E 05 F1 | 	add	fp, #12
34c3c     A7 FA 61 FC | 	wrlong	result1, fp
34c40     0C 4E 85 F1 | 	sub	fp, #12
34c44                 | LR__5133
34c44                 | LR__5134
34c44     0C 4E 05 F1 | 	add	fp, #12
34c48     A7 26 02 FB | 	rdlong	local01, fp
34c4c     0C 4E 85 F1 | 	sub	fp, #12
34c50     04 26 0E F2 | 	cmp	local01, #4 wz
34c54     0C 4E 05 A1 |  if_e	add	fp, #12
34c58     A7 0A 68 AC |  if_e	wrlong	#5, fp
34c5c     0C 4E 85 A1 |  if_e	sub	fp, #12
34c60                 | LR__5135
34c60     0C 4E 05 F1 | 	add	fp, #12
34c64     A7 26 0A FB | 	rdlong	local01, fp wz
34c68     0C 4E 85 F1 | 	sub	fp, #12
34c6c     04 4E 05 51 |  if_ne	add	fp, #4
34c70     A7 26 02 5B |  if_ne	rdlong	local01, fp
34c74     04 4E 85 51 |  if_ne	sub	fp, #4
34c78     13 01 68 5C |  if_ne	wrlong	#0, local01
34c7c                 | ' 
34c7c                 | ' 	return res ;
34c7c     0C 4E 05 F1 | 	add	fp, #12
34c80     A7 FA 01 FB | 	rdlong	result1, fp
34c84     0C 4E 85 F1 | 	sub	fp, #12
34c88                 | LR__5136
34c88     A7 F0 03 F6 | 	mov	ptra, fp
34c8c     B2 00 A0 FD | 	call	#popregs_
34c90                 | _fatfs_cc_f_opendir_ret
34c90     2D 00 64 FD | 	ret
34c94                 | 
34c94                 | _fatfs_cc_f_closedir
34c94     00 4A 05 F6 | 	mov	COUNT_, #0
34c98     A8 00 A0 FD | 	call	#pushregs_
34c9c     10 F0 07 F1 | 	add	ptra, #16
34ca0     04 4E 05 F1 | 	add	fp, #4
34ca4     A7 12 62 FC | 	wrlong	arg01, fp
34ca8     08 4E 05 F1 | 	add	fp, #8
34cac     A7 14 02 F6 | 	mov	arg02, fp
34cb0     0C 4E 85 F1 | 	sub	fp, #12
34cb4     C0 DD BF FD | 	call	#_fatfs_cc_validate
34cb8     08 4E 05 F1 | 	add	fp, #8
34cbc     A7 FA 61 FC | 	wrlong	result1, fp
34cc0     08 4E 85 F1 | 	sub	fp, #8
34cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
34cc8     04 4E 05 A1 |  if_e	add	fp, #4
34ccc     A7 FA 01 AB |  if_e	rdlong	result1, fp
34cd0     04 4E 85 A1 |  if_e	sub	fp, #4
34cd4     FD 00 68 AC |  if_e	wrlong	#0, result1
34cd8                 | ' 
34cd8                 | ' 
34cd8                 | ' 
34cd8                 | ' 
34cd8                 | ' 		dp->obj.fs = 0;
34cd8                 | ' #line 4633 "ff.c"
34cd8                 | ' 	}
34cd8                 | ' 	return res;
34cd8     08 4E 05 F1 | 	add	fp, #8
34cdc     A7 FA 01 FB | 	rdlong	result1, fp
34ce0     08 4E 85 F1 | 	sub	fp, #8
34ce4     A7 F0 03 F6 | 	mov	ptra, fp
34ce8     B2 00 A0 FD | 	call	#popregs_
34cec                 | _fatfs_cc_f_closedir_ret
34cec     2D 00 64 FD | 	ret
34cf0                 | 
34cf0                 | _fatfs_cc_f_readdir
34cf0     00 4A 05 F6 | 	mov	COUNT_, #0
34cf4     A8 00 A0 FD | 	call	#pushregs_
34cf8     14 F0 07 F1 | 	add	ptra, #20
34cfc     04 4E 05 F1 | 	add	fp, #4
34d00     A7 12 62 FC | 	wrlong	arg01, fp
34d04     04 4E 05 F1 | 	add	fp, #4
34d08     A7 14 62 FC | 	wrlong	arg02, fp
34d0c     04 4E 85 F1 | 	sub	fp, #4
34d10     A7 12 02 FB | 	rdlong	arg01, fp
34d14     0C 4E 05 F1 | 	add	fp, #12
34d18     A7 14 02 F6 | 	mov	arg02, fp
34d1c     10 4E 85 F1 | 	sub	fp, #16
34d20     54 DD BF FD | 	call	#_fatfs_cc_validate
34d24     0C 4E 05 F1 | 	add	fp, #12
34d28     A7 FA 61 FC | 	wrlong	result1, fp
34d2c     0C 4E 85 F1 | 	sub	fp, #12
34d30     00 FA 0D F2 | 	cmp	result1, #0 wz
34d34     BC 00 90 5D |  if_ne	jmp	#LR__5143
34d38     08 4E 05 F1 | 	add	fp, #8
34d3c     A7 FA 09 FB | 	rdlong	result1, fp wz
34d40     08 4E 85 F1 | 	sub	fp, #8
34d44     24 00 90 5D |  if_ne	jmp	#LR__5140
34d48     04 4E 05 F1 | 	add	fp, #4
34d4c     A7 12 02 FB | 	rdlong	arg01, fp
34d50     04 4E 85 F1 | 	sub	fp, #4
34d54     00 14 06 F6 | 	mov	arg02, #0
34d58     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
34d5c     0C 4E 05 F1 | 	add	fp, #12
34d60     A7 FA 61 FC | 	wrlong	result1, fp
34d64     0C 4E 85 F1 | 	sub	fp, #12
34d68     88 00 90 FD | 	jmp	#LR__5142
34d6c                 | LR__5140
34d6c     04 4E 05 F1 | 	add	fp, #4
34d70     A7 12 02 FB | 	rdlong	arg01, fp
34d74     04 4E 85 F1 | 	sub	fp, #4
34d78     00 14 06 F6 | 	mov	arg02, #0
34d7c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
34d80     0C 4E 05 F1 | 	add	fp, #12
34d84     A7 FA 61 FC | 	wrlong	result1, fp
34d88     0C 4E 85 F1 | 	sub	fp, #12
34d8c     04 FA 0D F2 | 	cmp	result1, #4 wz
34d90     0C 4E 05 A1 |  if_e	add	fp, #12
34d94     A7 00 68 AC |  if_e	wrlong	#0, fp
34d98     0C 4E 85 A1 |  if_e	sub	fp, #12
34d9c     0C 4E 05 F1 | 	add	fp, #12
34da0     A7 FA 09 FB | 	rdlong	result1, fp wz
34da4     0C 4E 85 F1 | 	sub	fp, #12
34da8     48 00 90 5D |  if_ne	jmp	#LR__5141
34dac     04 4E 05 F1 | 	add	fp, #4
34db0     A7 12 02 FB | 	rdlong	arg01, fp
34db4     04 4E 05 F1 | 	add	fp, #4
34db8     A7 14 02 FB | 	rdlong	arg02, fp
34dbc     08 4E 85 F1 | 	sub	fp, #8
34dc0     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
34dc4     04 4E 05 F1 | 	add	fp, #4
34dc8     A7 12 02 FB | 	rdlong	arg01, fp
34dcc     04 4E 85 F1 | 	sub	fp, #4
34dd0     00 14 06 F6 | 	mov	arg02, #0
34dd4     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
34dd8     0C 4E 05 F1 | 	add	fp, #12
34ddc     A7 FA 61 FC | 	wrlong	result1, fp
34de0     0C 4E 85 F1 | 	sub	fp, #12
34de4     04 FA 0D F2 | 	cmp	result1, #4 wz
34de8     0C 4E 05 A1 |  if_e	add	fp, #12
34dec     A7 00 68 AC |  if_e	wrlong	#0, fp
34df0     0C 4E 85 A1 |  if_e	sub	fp, #12
34df4                 | LR__5141
34df4                 | LR__5142
34df4                 | LR__5143
34df4                 | ' 			}
34df4                 | ' 			;
34df4                 | ' 		}
34df4                 | ' 	}
34df4                 | ' 	return res ;
34df4     0C 4E 05 F1 | 	add	fp, #12
34df8     A7 FA 01 FB | 	rdlong	result1, fp
34dfc     0C 4E 85 F1 | 	sub	fp, #12
34e00     A7 F0 03 F6 | 	mov	ptra, fp
34e04     B2 00 A0 FD | 	call	#popregs_
34e08                 | _fatfs_cc_f_readdir_ret
34e08     2D 00 64 FD | 	ret
34e0c                 | 
34e0c                 | _fatfs_cc_f_stat
34e0c     00 4A 05 F6 | 	mov	COUNT_, #0
34e10     A8 00 A0 FD | 	call	#pushregs_
34e14     40 F0 07 F1 | 	add	ptra, #64
34e18     04 4E 05 F1 | 	add	fp, #4
34e1c     A7 12 62 FC | 	wrlong	arg01, fp
34e20     04 4E 05 F1 | 	add	fp, #4
34e24     A7 14 62 FC | 	wrlong	arg02, fp
34e28     04 4E 85 F1 | 	sub	fp, #4
34e2c     A7 12 02 F6 | 	mov	arg01, fp
34e30     0C 4E 05 F1 | 	add	fp, #12
34e34     A7 14 02 F6 | 	mov	arg02, fp
34e38     10 4E 85 F1 | 	sub	fp, #16
34e3c     00 16 06 F6 | 	mov	arg03, #0
34e40     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
34e44     0C 4E 05 F1 | 	add	fp, #12
34e48     A7 FA 61 FC | 	wrlong	result1, fp
34e4c     0C 4E 85 F1 | 	sub	fp, #12
34e50     00 FA 0D F2 | 	cmp	result1, #0 wz
34e54     74 00 90 5D |  if_ne	jmp	#LR__5153
34e58     10 4E 05 F1 | 	add	fp, #16
34e5c     A7 12 02 F6 | 	mov	arg01, fp
34e60     0C 4E 85 F1 | 	sub	fp, #12
34e64     A7 14 02 FB | 	rdlong	arg02, fp
34e68     04 4E 85 F1 | 	sub	fp, #4
34e6c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
34e70     0C 4E 05 F1 | 	add	fp, #12
34e74     A7 FA 61 FC | 	wrlong	result1, fp
34e78     0C 4E 85 F1 | 	sub	fp, #12
34e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
34e80     48 00 90 5D |  if_ne	jmp	#LR__5152
34e84     3B 4E 05 F1 | 	add	fp, #59
34e88     A7 FA C1 FA | 	rdbyte	result1, fp
34e8c     3B 4E 85 F1 | 	sub	fp, #59
34e90     80 FA CD F7 | 	test	result1, #128 wz
34e94     0C 4E 05 51 |  if_ne	add	fp, #12
34e98     A7 0C 68 5C |  if_ne	wrlong	#6, fp
34e9c     0C 4E 85 51 |  if_ne	sub	fp, #12
34ea0     28 00 90 5D |  if_ne	jmp	#LR__5151
34ea4     08 4E 05 F1 | 	add	fp, #8
34ea8     A7 FA 09 FB | 	rdlong	result1, fp wz
34eac     08 4E 85 F1 | 	sub	fp, #8
34eb0     18 00 90 AD |  if_e	jmp	#LR__5150
34eb4     10 4E 05 F1 | 	add	fp, #16
34eb8     A7 12 02 F6 | 	mov	arg01, fp
34ebc     08 4E 85 F1 | 	sub	fp, #8
34ec0     A7 14 02 FB | 	rdlong	arg02, fp
34ec4     08 4E 85 F1 | 	sub	fp, #8
34ec8     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
34ecc                 | LR__5150
34ecc                 | LR__5151
34ecc                 | LR__5152
34ecc                 | LR__5153
34ecc                 | ' 			}
34ecc                 | ' 		}
34ecc                 | ' 		;
34ecc                 | ' 	}
34ecc                 | ' 
34ecc                 | ' 	return res ;
34ecc     0C 4E 05 F1 | 	add	fp, #12
34ed0     A7 FA 01 FB | 	rdlong	result1, fp
34ed4     0C 4E 85 F1 | 	sub	fp, #12
34ed8     A7 F0 03 F6 | 	mov	ptra, fp
34edc     B2 00 A0 FD | 	call	#popregs_
34ee0                 | _fatfs_cc_f_stat_ret
34ee0     2D 00 64 FD | 	ret
34ee4                 | 
34ee4                 | _fatfs_cc_f_unlink
34ee4     00 4A 05 F6 | 	mov	COUNT_, #0
34ee8     A8 00 A0 FD | 	call	#pushregs_
34eec     74 F0 07 F1 | 	add	ptra, #116
34ef0     04 4E 05 F1 | 	add	fp, #4
34ef4     A7 12 62 FC | 	wrlong	arg01, fp
34ef8     68 4E 05 F1 | 	add	fp, #104
34efc     A7 00 68 FC | 	wrlong	#0, fp
34f00     68 4E 85 F1 | 	sub	fp, #104
34f04     A7 12 02 F6 | 	mov	arg01, fp
34f08     6C 4E 05 F1 | 	add	fp, #108
34f0c     A7 14 02 F6 | 	mov	arg02, fp
34f10     70 4E 85 F1 | 	sub	fp, #112
34f14     02 16 06 F6 | 	mov	arg03, #2
34f18     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
34f1c     08 4E 05 F1 | 	add	fp, #8
34f20     A7 FA 61 FC | 	wrlong	result1, fp
34f24     08 4E 85 F1 | 	sub	fp, #8
34f28     00 FA 0D F2 | 	cmp	result1, #0 wz
34f2c     E4 01 90 5D |  if_ne	jmp	#LR__5168
34f30     70 4E 05 F1 | 	add	fp, #112
34f34     A7 16 02 FB | 	rdlong	arg03, fp
34f38     64 4E 85 F1 | 	sub	fp, #100
34f3c     A7 16 62 FC | 	wrlong	arg03, fp
34f40     A7 12 02 F6 | 	mov	arg01, fp
34f44     08 4E 85 F1 | 	sub	fp, #8
34f48     A7 14 02 FB | 	rdlong	arg02, fp
34f4c     04 4E 85 F1 | 	sub	fp, #4
34f50     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
34f54     08 4E 05 F1 | 	add	fp, #8
34f58     A7 FA 61 FC | 	wrlong	result1, fp
34f5c     00 FA 4D F2 | 	cmps	result1, #0 wz
34f60     08 4E 85 F1 | 	sub	fp, #8
34f64     AC 01 90 5D |  if_ne	jmp	#LR__5167
34f68     37 4E 05 F1 | 	add	fp, #55
34f6c     A7 FA C1 FA | 	rdbyte	result1, fp
34f70     37 4E 85 F1 | 	sub	fp, #55
34f74     80 FA CD F7 | 	test	result1, #128 wz
34f78     08 4E 05 51 |  if_ne	add	fp, #8
34f7c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
34f80     08 4E 85 51 |  if_ne	sub	fp, #8
34f84     1C 00 90 5D |  if_ne	jmp	#LR__5160
34f88     12 4E 05 F1 | 	add	fp, #18
34f8c     A7 FA C1 FA | 	rdbyte	result1, fp
34f90     12 4E 85 F1 | 	sub	fp, #18
34f94     01 FA CD F7 | 	test	result1, #1 wz
34f98     08 4E 05 51 |  if_ne	add	fp, #8
34f9c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
34fa0     08 4E 85 51 |  if_ne	sub	fp, #8
34fa4                 | LR__5160
34fa4     08 4E 05 F1 | 	add	fp, #8
34fa8     A7 FA 09 FB | 	rdlong	result1, fp wz
34fac     08 4E 85 F1 | 	sub	fp, #8
34fb0     C8 00 90 5D |  if_ne	jmp	#LR__5163
34fb4     70 4E 05 F1 | 	add	fp, #112
34fb8     A7 12 02 FB | 	rdlong	arg01, fp
34fbc     48 4E 85 F1 | 	sub	fp, #72
34fc0     A7 14 02 FB | 	rdlong	arg02, fp
34fc4     28 4E 85 F1 | 	sub	fp, #40
34fc8     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
34fcc     6C 4E 05 F1 | 	add	fp, #108
34fd0     A7 FA 61 FC | 	wrlong	result1, fp
34fd4     5A 4E 85 F1 | 	sub	fp, #90
34fd8     A7 FA C1 FA | 	rdbyte	result1, fp
34fdc     12 4E 85 F1 | 	sub	fp, #18
34fe0     10 FA CD F7 | 	test	result1, #16 wz
34fe4     94 00 90 AD |  if_e	jmp	#LR__5162
34fe8     70 4E 05 F1 | 	add	fp, #112
34fec     A7 FA 01 FB | 	rdlong	result1, fp
34ff0     34 4E 85 F1 | 	sub	fp, #52
34ff4     A7 FA 61 FC | 	wrlong	result1, fp
34ff8     30 4E 05 F1 | 	add	fp, #48
34ffc     A7 16 02 FB | 	rdlong	arg03, fp
35000     28 4E 85 F1 | 	sub	fp, #40
35004     A7 16 62 FC | 	wrlong	arg03, fp
35008     08 4E 85 F1 | 	sub	fp, #8
3500c     A7 12 02 F6 | 	mov	arg01, fp
35010     3C 4E 85 F1 | 	sub	fp, #60
35014     00 14 06 F6 | 	mov	arg02, #0
35018     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
3501c     08 4E 05 F1 | 	add	fp, #8
35020     A7 FA 61 FC | 	wrlong	result1, fp
35024     08 4E 85 F1 | 	sub	fp, #8
35028     00 FA 0D F2 | 	cmp	result1, #0 wz
3502c     4C 00 90 5D |  if_ne	jmp	#LR__5161
35030     3C 4E 05 F1 | 	add	fp, #60
35034     A7 12 02 F6 | 	mov	arg01, fp
35038     3C 4E 85 F1 | 	sub	fp, #60
3503c     00 14 06 F6 | 	mov	arg02, #0
35040     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
35044     08 4E 05 F1 | 	add	fp, #8
35048     A7 FA 61 FC | 	wrlong	result1, fp
3504c     00 FA 4D F2 | 	cmps	result1, #0 wz
35050     08 4E 85 F1 | 	sub	fp, #8
35054     08 4E 05 A1 |  if_e	add	fp, #8
35058     A7 0E 68 AC |  if_e	wrlong	#7, fp
3505c     08 4E 85 A1 |  if_e	sub	fp, #8
35060     08 4E 05 F1 | 	add	fp, #8
35064     A7 FA 01 FB | 	rdlong	result1, fp
35068     08 4E 85 F1 | 	sub	fp, #8
3506c     04 FA 0D F2 | 	cmp	result1, #4 wz
35070     08 4E 05 A1 |  if_e	add	fp, #8
35074     A7 00 68 AC |  if_e	wrlong	#0, fp
35078     08 4E 85 A1 |  if_e	sub	fp, #8
3507c                 | LR__5161
3507c                 | LR__5162
3507c                 | LR__5163
3507c     08 4E 05 F1 | 	add	fp, #8
35080     A7 FA 09 FB | 	rdlong	result1, fp wz
35084     08 4E 85 F1 | 	sub	fp, #8
35088     88 00 90 5D |  if_ne	jmp	#LR__5166
3508c     0C 4E 05 F1 | 	add	fp, #12
35090     A7 12 02 F6 | 	mov	arg01, fp
35094     0C 4E 85 F1 | 	sub	fp, #12
35098     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
3509c     08 4E 05 F1 | 	add	fp, #8
350a0     A7 FA 61 FC | 	wrlong	result1, fp
350a4     08 4E 85 F1 | 	sub	fp, #8
350a8     00 FA 0D F2 | 	cmp	result1, #0 wz
350ac     38 00 90 5D |  if_ne	jmp	#LR__5164
350b0     6C 4E 05 F1 | 	add	fp, #108
350b4     A7 FA 09 FB | 	rdlong	result1, fp wz
350b8     6C 4E 85 F1 | 	sub	fp, #108
350bc     28 00 90 AD |  if_e	jmp	#LR__5164
350c0     0C 4E 05 F1 | 	add	fp, #12
350c4     A7 12 02 F6 | 	mov	arg01, fp
350c8     60 4E 05 F1 | 	add	fp, #96
350cc     A7 14 02 FB | 	rdlong	arg02, fp
350d0     6C 4E 85 F1 | 	sub	fp, #108
350d4     00 16 06 F6 | 	mov	arg03, #0
350d8     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
350dc     08 4E 05 F1 | 	add	fp, #8
350e0     A7 FA 61 FC | 	wrlong	result1, fp
350e4     08 4E 85 F1 | 	sub	fp, #8
350e8                 | LR__5164
350e8     08 4E 05 F1 | 	add	fp, #8
350ec     A7 FA 09 FB | 	rdlong	result1, fp wz
350f0     08 4E 85 F1 | 	sub	fp, #8
350f4     1C 00 90 5D |  if_ne	jmp	#LR__5165
350f8     70 4E 05 F1 | 	add	fp, #112
350fc     A7 12 02 FB | 	rdlong	arg01, fp
35100     70 4E 85 F1 | 	sub	fp, #112
35104     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
35108     08 4E 05 F1 | 	add	fp, #8
3510c     A7 FA 61 FC | 	wrlong	result1, fp
35110     08 4E 85 F1 | 	sub	fp, #8
35114                 | LR__5165
35114                 | LR__5166
35114                 | LR__5167
35114                 | LR__5168
35114                 | ' 			}
35114                 | ' 		}
35114                 | ' 		;
35114                 | ' 	}
35114                 | ' 
35114                 | ' 	return res ;
35114     08 4E 05 F1 | 	add	fp, #8
35118     A7 FA 01 FB | 	rdlong	result1, fp
3511c     08 4E 85 F1 | 	sub	fp, #8
35120     A7 F0 03 F6 | 	mov	ptra, fp
35124     B2 00 A0 FD | 	call	#popregs_
35128                 | _fatfs_cc_f_unlink_ret
35128     2D 00 64 FD | 	ret
3512c                 | 
3512c                 | _fatfs_cc_f_mkdir
3512c     00 4A 05 F6 | 	mov	COUNT_, #0
35130     A8 00 A0 FD | 	call	#pushregs_
35134     5C F0 07 F1 | 	add	ptra, #92
35138     04 4E 05 F1 | 	add	fp, #4
3513c     A7 12 62 FC | 	wrlong	arg01, fp
35140     A7 12 02 F6 | 	mov	arg01, fp
35144     48 4E 05 F1 | 	add	fp, #72
35148     A7 14 02 F6 | 	mov	arg02, fp
3514c     4C 4E 85 F1 | 	sub	fp, #76
35150     02 16 06 F6 | 	mov	arg03, #2
35154     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
35158     08 4E 05 F1 | 	add	fp, #8
3515c     A7 FA 61 FC | 	wrlong	result1, fp
35160     08 4E 85 F1 | 	sub	fp, #8
35164     00 FA 0D F2 | 	cmp	result1, #0 wz
35168     C4 02 90 5D |  if_ne	jmp	#LR__5175
3516c     4C 4E 05 F1 | 	add	fp, #76
35170     A7 16 02 FB | 	rdlong	arg03, fp
35174     40 4E 85 F1 | 	sub	fp, #64
35178     A7 16 62 FC | 	wrlong	arg03, fp
3517c     A7 12 02 F6 | 	mov	arg01, fp
35180     08 4E 85 F1 | 	sub	fp, #8
35184     A7 14 02 FB | 	rdlong	arg02, fp
35188     04 4E 85 F1 | 	sub	fp, #4
3518c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
35190     08 4E 05 F1 | 	add	fp, #8
35194     A7 FA 61 FC | 	wrlong	result1, fp
35198     00 FA 4D F2 | 	cmps	result1, #0 wz
3519c     08 4E 85 F1 | 	sub	fp, #8
351a0     08 4E 05 A1 |  if_e	add	fp, #8
351a4     A7 10 68 AC |  if_e	wrlong	#8, fp
351a8     08 4E 85 A1 |  if_e	sub	fp, #8
351ac     08 4E 05 F1 | 	add	fp, #8
351b0     A7 FA 01 FB | 	rdlong	result1, fp
351b4     08 4E 85 F1 | 	sub	fp, #8
351b8     04 FA 0D F2 | 	cmp	result1, #4 wz
351bc     70 02 90 5D |  if_ne	jmp	#LR__5174
351c0     4C 4E 05 F1 | 	add	fp, #76
351c4     A7 16 02 FB | 	rdlong	arg03, fp
351c8     10 4E 85 F1 | 	sub	fp, #16
351cc     A7 16 62 FC | 	wrlong	arg03, fp
351d0     A7 12 02 F6 | 	mov	arg01, fp
351d4     3C 4E 85 F1 | 	sub	fp, #60
351d8     00 14 06 F6 | 	mov	arg02, #0
351dc     04 AC BF FD | 	call	#_fatfs_cc_create_chain
351e0     50 4E 05 F1 | 	add	fp, #80
351e4     A7 FA 61 FC | 	wrlong	result1, fp
351e8     48 4E 85 F1 | 	sub	fp, #72
351ec     A7 00 68 FC | 	wrlong	#0, fp
351f0     48 4E 05 F1 | 	add	fp, #72
351f4     A7 FA 09 FB | 	rdlong	result1, fp wz
351f8     50 4E 85 F1 | 	sub	fp, #80
351fc     08 4E 05 A1 |  if_e	add	fp, #8
35200     A7 0E 68 AC |  if_e	wrlong	#7, fp
35204     08 4E 85 A1 |  if_e	sub	fp, #8
35208     50 4E 05 F1 | 	add	fp, #80
3520c     A7 FA 01 FB | 	rdlong	result1, fp
35210     50 4E 85 F1 | 	sub	fp, #80
35214     01 FA 0D F2 | 	cmp	result1, #1 wz
35218     08 4E 05 A1 |  if_e	add	fp, #8
3521c     A7 04 68 AC |  if_e	wrlong	#2, fp
35220     08 4E 85 A1 |  if_e	sub	fp, #8
35224     50 4E 05 F1 | 	add	fp, #80
35228     A7 16 02 FB | 	rdlong	arg03, fp
3522c     50 4E 85 F1 | 	sub	fp, #80
35230     FF FF 7F FF 
35234     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
35238     08 4E 05 A1 |  if_e	add	fp, #8
3523c     A7 02 68 AC |  if_e	wrlong	#1, fp
35240     08 4E 85 A1 |  if_e	sub	fp, #8
35244     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
35248     58 4E 05 F1 | 	add	fp, #88
3524c     A7 FA 61 FC | 	wrlong	result1, fp
35250     50 4E 85 F1 | 	sub	fp, #80
35254     A7 FA 09 FB | 	rdlong	result1, fp wz
35258     08 4E 85 F1 | 	sub	fp, #8
3525c     1C 01 90 5D |  if_ne	jmp	#LR__5171
35260     4C 4E 05 F1 | 	add	fp, #76
35264     A7 12 02 FB | 	rdlong	arg01, fp
35268     04 4E 05 F1 | 	add	fp, #4
3526c     A7 14 02 FB | 	rdlong	arg02, fp
35270     50 4E 85 F1 | 	sub	fp, #80
35274     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
35278     08 4E 05 F1 | 	add	fp, #8
3527c     A7 FA 61 FC | 	wrlong	result1, fp
35280     00 FA 4D F2 | 	cmps	result1, #0 wz
35284     08 4E 85 F1 | 	sub	fp, #8
35288     F0 00 90 5D |  if_ne	jmp	#LR__5170
3528c     4C 4E 05 F1 | 	add	fp, #76
35290     A7 12 02 FB | 	rdlong	arg01, fp
35294     4C 4E 85 F1 | 	sub	fp, #76
35298     34 12 06 F1 | 	add	arg01, #52
3529c     20 14 06 F6 | 	mov	arg02, #32
352a0     0B 16 06 F6 | 	mov	arg03, #11
352a4     98 00 A0 FD | 	call	#\builtin_bytefill_
352a8     4C 4E 05 F1 | 	add	fp, #76
352ac     A7 FA 01 FB | 	rdlong	result1, fp
352b0     34 FA 05 F1 | 	add	result1, #52
352b4     FD 5C 48 FC | 	wrbyte	#46, result1
352b8     A7 16 02 FB | 	rdlong	arg03, fp
352bc     3F 16 06 F1 | 	add	arg03, #63
352c0     0B 21 48 FC | 	wrbyte	#16, arg03
352c4     A7 12 02 FB | 	rdlong	arg01, fp
352c8     4A 12 06 F1 | 	add	arg01, #74
352cc     0C 4E 05 F1 | 	add	fp, #12
352d0     A7 14 02 FB | 	rdlong	arg02, fp
352d4     09 15 62 FC | 	wrlong	arg02, arg01
352d8     0C 4E 85 F1 | 	sub	fp, #12
352dc     A7 14 02 FB | 	rdlong	arg02, fp
352e0     0A 13 02 F6 | 	mov	arg01, arg02
352e4     34 14 06 F1 | 	add	arg02, #52
352e8     04 4E 05 F1 | 	add	fp, #4
352ec     A7 16 02 FB | 	rdlong	arg03, fp
352f0     50 4E 85 F1 | 	sub	fp, #80
352f4     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
352f8     4C 4E 05 F1 | 	add	fp, #76
352fc     A7 14 02 FB | 	rdlong	arg02, fp
35300     0A 13 02 F6 | 	mov	arg01, arg02
35304     54 12 06 F1 | 	add	arg01, #84
35308     4C 4E 85 F1 | 	sub	fp, #76
3530c     34 14 06 F1 | 	add	arg02, #52
35310     20 16 06 F6 | 	mov	arg03, #32
35314     F4 26 BF FD | 	call	#__system____builtin_memmove
35318     4C 4E 05 F1 | 	add	fp, #76
3531c     A7 16 02 FB | 	rdlong	arg03, fp
35320     55 16 06 F1 | 	add	arg03, #85
35324     0B 5D 48 FC | 	wrbyte	#46, arg03
35328     38 4E 85 F1 | 	sub	fp, #56
3532c     A7 16 02 FB | 	rdlong	arg03, fp
35330     40 4E 05 F1 | 	add	fp, #64
35334     A7 16 62 FC | 	wrlong	arg03, fp
35338     08 4E 85 F1 | 	sub	fp, #8
3533c     A7 14 02 FB | 	rdlong	arg02, fp
35340     0A 13 02 F6 | 	mov	arg01, arg02
35344     54 14 06 F1 | 	add	arg02, #84
35348     4C 4E 85 F1 | 	sub	fp, #76
3534c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
35350     4C 4E 05 F1 | 	add	fp, #76
35354     A7 16 02 FB | 	rdlong	arg03, fp
35358     03 16 06 F1 | 	add	arg03, #3
3535c     0B 03 48 FC | 	wrbyte	#1, arg03
35360     40 4E 85 F1 | 	sub	fp, #64
35364     A7 12 02 F6 | 	mov	arg01, fp
35368     0C 4E 85 F1 | 	sub	fp, #12
3536c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
35370     08 4E 05 F1 | 	add	fp, #8
35374     A7 FA 61 FC | 	wrlong	result1, fp
35378     08 4E 85 F1 | 	sub	fp, #8
3537c                 | LR__5170
3537c                 | LR__5171
3537c     08 4E 05 F1 | 	add	fp, #8
35380     A7 FA 09 FB | 	rdlong	result1, fp wz
35384     08 4E 85 F1 | 	sub	fp, #8
35388     88 00 90 5D |  if_ne	jmp	#LR__5172
3538c     28 4E 05 F1 | 	add	fp, #40
35390     A7 12 02 FB | 	rdlong	arg01, fp
35394     16 12 06 F1 | 	add	arg01, #22
35398     30 4E 05 F1 | 	add	fp, #48
3539c     A7 14 02 FB | 	rdlong	arg02, fp
353a0     09 15 62 FC | 	wrlong	arg02, arg01
353a4     0C 4E 85 F1 | 	sub	fp, #12
353a8     A7 12 02 FB | 	rdlong	arg01, fp
353ac     24 4E 85 F1 | 	sub	fp, #36
353b0     A7 14 02 FB | 	rdlong	arg02, fp
353b4     28 4E 05 F1 | 	add	fp, #40
353b8     A7 16 02 FB | 	rdlong	arg03, fp
353bc     50 4E 85 F1 | 	sub	fp, #80
353c0     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
353c4     28 4E 05 F1 | 	add	fp, #40
353c8     A7 FA 01 FB | 	rdlong	result1, fp
353cc     0B FA 05 F1 | 	add	result1, #11
353d0     FD 20 48 FC | 	wrbyte	#16, result1
353d4     24 4E 05 F1 | 	add	fp, #36
353d8     A7 FA 01 FB | 	rdlong	result1, fp
353dc     03 FA 05 F1 | 	add	result1, #3
353e0     FD 02 48 FC | 	wrbyte	#1, result1
353e4     44 4E 85 F1 | 	sub	fp, #68
353e8     A7 FA 09 FB | 	rdlong	result1, fp wz
353ec     08 4E 85 F1 | 	sub	fp, #8
353f0     3C 00 90 5D |  if_ne	jmp	#LR__5173
353f4     4C 4E 05 F1 | 	add	fp, #76
353f8     A7 12 02 FB | 	rdlong	arg01, fp
353fc     4C 4E 85 F1 | 	sub	fp, #76
35400     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
35404     08 4E 05 F1 | 	add	fp, #8
35408     A7 FA 61 FC | 	wrlong	result1, fp
3540c     08 4E 85 F1 | 	sub	fp, #8
35410     1C 00 90 FD | 	jmp	#LR__5173
35414                 | LR__5172
35414     3C 4E 05 F1 | 	add	fp, #60
35418     A7 12 02 F6 | 	mov	arg01, fp
3541c     14 4E 05 F1 | 	add	fp, #20
35420     A7 14 02 FB | 	rdlong	arg02, fp
35424     50 4E 85 F1 | 	sub	fp, #80
35428     00 16 06 F6 | 	mov	arg03, #0
3542c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
35430                 | LR__5173
35430                 | LR__5174
35430                 | LR__5175
35430                 | ' 				remove_chain(&sobj, dcl, 0);
35430                 | ' 			}
35430                 | ' 		}
35430                 | ' 		;
35430                 | ' 	}
35430                 | ' 
35430                 | ' 	return res ;
35430     08 4E 05 F1 | 	add	fp, #8
35434     A7 FA 01 FB | 	rdlong	result1, fp
35438     08 4E 85 F1 | 	sub	fp, #8
3543c     A7 F0 03 F6 | 	mov	ptra, fp
35440     B2 00 A0 FD | 	call	#popregs_
35444                 | _fatfs_cc_f_mkdir_ret
35444     2D 00 64 FD | 	ret
35448                 | 
35448                 | _fatfs_cc_f_rename
35448     01 4A 05 F6 | 	mov	COUNT_, #1
3544c     A8 00 A0 FD | 	call	#pushregs_
35450     9C F0 07 F1 | 	add	ptra, #156
35454     04 4E 05 F1 | 	add	fp, #4
35458     A7 12 62 FC | 	wrlong	arg01, fp
3545c     04 4E 05 F1 | 	add	fp, #4
35460     A7 14 62 FC | 	wrlong	arg02, fp
35464     A7 12 02 F6 | 	mov	arg01, fp
35468     08 4E 85 F1 | 	sub	fp, #8
3546c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
35470     04 4E 05 F1 | 	add	fp, #4
35474     A7 12 02 F6 | 	mov	arg01, fp
35478     6C 4E 05 F1 | 	add	fp, #108
3547c     A7 14 02 F6 | 	mov	arg02, fp
35480     70 4E 85 F1 | 	sub	fp, #112
35484     02 16 06 F6 | 	mov	arg03, #2
35488     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
3548c     0C 4E 05 F1 | 	add	fp, #12
35490     A7 FA 61 FC | 	wrlong	result1, fp
35494     0C 4E 85 F1 | 	sub	fp, #12
35498     00 FA 0D F2 | 	cmp	result1, #0 wz
3549c     44 03 90 5D |  if_ne	jmp	#LR__5193
354a0     70 4E 05 F1 | 	add	fp, #112
354a4     A7 16 02 FB | 	rdlong	arg03, fp
354a8     60 4E 85 F1 | 	sub	fp, #96
354ac     A7 16 62 FC | 	wrlong	arg03, fp
354b0     A7 12 02 F6 | 	mov	arg01, fp
354b4     0C 4E 85 F1 | 	sub	fp, #12
354b8     A7 14 02 FB | 	rdlong	arg02, fp
354bc     04 4E 85 F1 | 	sub	fp, #4
354c0     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
354c4     0C 4E 05 F1 | 	add	fp, #12
354c8     A7 FA 61 FC | 	wrlong	result1, fp
354cc     00 FA 4D F2 | 	cmps	result1, #0 wz
354d0     0C 4E 85 F1 | 	sub	fp, #12
354d4     1C 00 90 5D |  if_ne	jmp	#LR__5180
354d8     3B 4E 05 F1 | 	add	fp, #59
354dc     A7 FA C1 FA | 	rdbyte	result1, fp
354e0     3B 4E 85 F1 | 	sub	fp, #59
354e4     A0 FA CD F7 | 	test	result1, #160 wz
354e8     0C 4E 05 51 |  if_ne	add	fp, #12
354ec     A7 0C 68 5C |  if_ne	wrlong	#6, fp
354f0     0C 4E 85 51 |  if_ne	sub	fp, #12
354f4                 | LR__5180
354f4     0C 4E 05 F1 | 	add	fp, #12
354f8     A7 26 0A FB | 	rdlong	local01, fp wz
354fc     0C 4E 85 F1 | 	sub	fp, #12
35500     E0 02 90 5D |  if_ne	jmp	#LR__5192
35504     74 4E 05 F1 | 	add	fp, #116
35508     A7 12 02 F6 | 	mov	arg01, fp
3550c     48 4E 85 F1 | 	sub	fp, #72
35510     A7 14 02 FB | 	rdlong	arg02, fp
35514     2C 4E 85 F1 | 	sub	fp, #44
35518     20 16 06 F6 | 	mov	arg03, #32
3551c     EC 24 BF FD | 	call	#__system____builtin_memmove
35520     40 4E 05 F1 | 	add	fp, #64
35524     A7 12 02 F6 | 	mov	arg01, fp
35528     30 4E 85 F1 | 	sub	fp, #48
3552c     A7 14 02 F6 | 	mov	arg02, fp
35530     10 4E 85 F1 | 	sub	fp, #16
35534     30 16 06 F6 | 	mov	arg03, #48
35538     D0 24 BF FD | 	call	#__system____builtin_memmove
3553c     40 4E 05 F1 | 	add	fp, #64
35540     A7 12 02 F6 | 	mov	arg01, fp
35544     38 4E 85 F1 | 	sub	fp, #56
35548     A7 14 02 FB | 	rdlong	arg02, fp
3554c     08 4E 85 F1 | 	sub	fp, #8
35550     34 CA BF FD | 	call	#_fatfs_cc_follow_path
35554     0C 4E 05 F1 | 	add	fp, #12
35558     A7 FA 61 FC | 	wrlong	result1, fp
3555c     0C 4E 85 F1 | 	sub	fp, #12
35560     00 FA 0D F2 | 	cmp	result1, #0 wz
35564     4C 00 90 5D |  if_ne	jmp	#LR__5183
35568     48 4E 05 F1 | 	add	fp, #72
3556c     A7 FA 01 FB | 	rdlong	result1, fp
35570     30 4E 85 F1 | 	sub	fp, #48
35574     A7 16 02 FB | 	rdlong	arg03, fp
35578     18 4E 85 F1 | 	sub	fp, #24
3557c     0B FB 09 F2 | 	cmp	result1, arg03 wz
35580     20 00 90 5D |  if_ne	jmp	#LR__5181
35584     50 4E 05 F1 | 	add	fp, #80
35588     A7 FA 01 FB | 	rdlong	result1, fp
3558c     30 4E 85 F1 | 	sub	fp, #48
35590     A7 16 02 FB | 	rdlong	arg03, fp
35594     20 4E 85 F1 | 	sub	fp, #32
35598     0B FB 09 F2 | 	cmp	result1, arg03 wz
3559c     04 26 06 A6 |  if_e	mov	local01, #4
355a0     04 00 90 AD |  if_e	jmp	#LR__5182
355a4                 | LR__5181
355a4     08 26 06 F6 | 	mov	local01, #8
355a8                 | LR__5182
355a8     0C 4E 05 F1 | 	add	fp, #12
355ac     A7 26 62 FC | 	wrlong	local01, fp
355b0     0C 4E 85 F1 | 	sub	fp, #12
355b4                 | LR__5183
355b4     0C 4E 05 F1 | 	add	fp, #12
355b8     A7 26 02 FB | 	rdlong	local01, fp
355bc     0C 4E 85 F1 | 	sub	fp, #12
355c0     04 26 0E F2 | 	cmp	local01, #4 wz
355c4     CC 01 90 5D |  if_ne	jmp	#LR__5189
355c8     40 4E 05 F1 | 	add	fp, #64
355cc     A7 12 02 F6 | 	mov	arg01, fp
355d0     40 4E 85 F1 | 	sub	fp, #64
355d4     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
355d8     0C 4E 05 F1 | 	add	fp, #12
355dc     A7 FA 61 FC | 	wrlong	result1, fp
355e0     0C 4E 85 F1 | 	sub	fp, #12
355e4     00 FA 0D F2 | 	cmp	result1, #0 wz
355e8     A8 01 90 5D |  if_ne	jmp	#LR__5188
355ec     5C 4E 05 F1 | 	add	fp, #92
355f0     A7 12 02 FB | 	rdlong	arg01, fp
355f4     38 4E 05 F1 | 	add	fp, #56
355f8     A7 12 62 FC | 	wrlong	arg01, fp
355fc     0D 12 06 F1 | 	add	arg01, #13
35600     20 4E 85 F1 | 	sub	fp, #32
35604     A7 14 02 F6 | 	mov	arg02, fp
35608     74 4E 85 F1 | 	sub	fp, #116
3560c     0D 14 06 F1 | 	add	arg02, #13
35610     13 16 06 F6 | 	mov	arg03, #19
35614     F4 23 BF FD | 	call	#__system____builtin_memmove
35618     94 4E 05 F1 | 	add	fp, #148
3561c     A7 26 02 FB | 	rdlong	local01, fp
35620     15 4E 85 F1 | 	sub	fp, #21
35624     A7 FA C1 FA | 	rdbyte	result1, fp
35628     0B 26 06 F1 | 	add	local01, #11
3562c     13 FB 41 FC | 	wrbyte	result1, local01
35630     15 4E 05 F1 | 	add	fp, #21
35634     A7 26 02 FB | 	rdlong	local01, fp
35638     94 4E 85 F1 | 	sub	fp, #148
3563c     0B 26 06 F1 | 	add	local01, #11
35640     13 27 C2 FA | 	rdbyte	local01, local01
35644     10 26 CE F7 | 	test	local01, #16 wz
35648     24 00 90 5D |  if_ne	jmp	#LR__5184
3564c     94 4E 05 F1 | 	add	fp, #148
35650     A7 FA 01 FB | 	rdlong	result1, fp
35654     FD 26 02 F6 | 	mov	local01, result1
35658     94 4E 85 F1 | 	sub	fp, #148
3565c     0B FA 05 F1 | 	add	result1, #11
35660     FD FA C1 FA | 	rdbyte	result1, result1
35664     20 FA 45 F5 | 	or	result1, #32
35668     0B 26 06 F1 | 	add	local01, #11
3566c     13 FB 41 FC | 	wrbyte	result1, local01
35670                 | LR__5184
35670     70 4E 05 F1 | 	add	fp, #112
35674     A7 26 02 FB | 	rdlong	local01, fp
35678     03 26 06 F1 | 	add	local01, #3
3567c     13 03 48 FC | 	wrbyte	#1, local01
35680     24 4E 05 F1 | 	add	fp, #36
35684     A7 26 02 FB | 	rdlong	local01, fp
35688     94 4E 85 F1 | 	sub	fp, #148
3568c     0B 26 06 F1 | 	add	local01, #11
35690     13 27 C2 FA | 	rdbyte	local01, local01
35694     10 26 CE F7 | 	test	local01, #16 wz
35698     F8 00 90 AD |  if_e	jmp	#LR__5187
3569c     18 4E 05 F1 | 	add	fp, #24
356a0     A7 16 02 FB | 	rdlong	arg03, fp
356a4     30 4E 05 F1 | 	add	fp, #48
356a8     A7 26 02 FB | 	rdlong	local01, fp
356ac     48 4E 85 F1 | 	sub	fp, #72
356b0     13 17 0A F2 | 	cmp	arg03, local01 wz
356b4     DC 00 90 AD |  if_e	jmp	#LR__5187
356b8     70 4E 05 F1 | 	add	fp, #112
356bc     A7 12 02 FB | 	rdlong	arg01, fp
356c0     09 27 02 F6 | 	mov	local01, arg01
356c4     24 4E 05 F1 | 	add	fp, #36
356c8     A7 14 02 FB | 	rdlong	arg02, fp
356cc     94 4E 85 F1 | 	sub	fp, #148
356d0     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
356d4     FD 14 02 F6 | 	mov	arg02, result1
356d8     13 13 02 F6 | 	mov	arg01, local01
356dc     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
356e0     98 4E 05 F1 | 	add	fp, #152
356e4     A7 FA 61 FC | 	wrlong	result1, fp
356e8     00 FA 4D F2 | 	cmps	result1, #0 wz
356ec     98 4E 85 F1 | 	sub	fp, #152
356f0     0C 4E 05 A1 |  if_e	add	fp, #12
356f4     A7 04 68 AC |  if_e	wrlong	#2, fp
356f8     0C 4E 85 A1 |  if_e	sub	fp, #12
356fc     94 00 90 AD |  if_e	jmp	#LR__5186
35700     70 4E 05 F1 | 	add	fp, #112
35704     A7 12 02 FB | 	rdlong	arg01, fp
35708     28 4E 05 F1 | 	add	fp, #40
3570c     A7 14 02 FB | 	rdlong	arg02, fp
35710     98 4E 85 F1 | 	sub	fp, #152
35714     4C A0 BF FD | 	call	#_fatfs_cc_move_window
35718     0C 4E 05 F1 | 	add	fp, #12
3571c     A7 FA 61 FC | 	wrlong	result1, fp
35720     64 4E 05 F1 | 	add	fp, #100
35724     A7 26 02 FB | 	rdlong	local01, fp
35728     54 26 06 F1 | 	add	local01, #84
3572c     24 4E 05 F1 | 	add	fp, #36
35730     A7 26 62 FC | 	wrlong	local01, fp
35734     88 4E 85 F1 | 	sub	fp, #136
35738     A7 26 0A FB | 	rdlong	local01, fp wz
3573c     0C 4E 85 F1 | 	sub	fp, #12
35740     50 00 90 5D |  if_ne	jmp	#LR__5185
35744     94 4E 05 F1 | 	add	fp, #148
35748     A7 26 02 FB | 	rdlong	local01, fp
3574c     94 4E 85 F1 | 	sub	fp, #148
35750     01 26 06 F1 | 	add	local01, #1
35754     13 27 C2 FA | 	rdbyte	local01, local01
35758     2E 26 0E F2 | 	cmp	local01, #46 wz
3575c     34 00 90 5D |  if_ne	jmp	#LR__5185
35760     70 4E 05 F1 | 	add	fp, #112
35764     A7 12 02 FB | 	rdlong	arg01, fp
35768     24 4E 05 F1 | 	add	fp, #36
3576c     A7 14 02 FB | 	rdlong	arg02, fp
35770     4C 4E 85 F1 | 	sub	fp, #76
35774     A7 16 02 FB | 	rdlong	arg03, fp
35778     48 4E 85 F1 | 	sub	fp, #72
3577c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
35780     70 4E 05 F1 | 	add	fp, #112
35784     A7 26 02 FB | 	rdlong	local01, fp
35788     70 4E 85 F1 | 	sub	fp, #112
3578c     03 26 06 F1 | 	add	local01, #3
35790     13 03 48 FC | 	wrbyte	#1, local01
35794                 | LR__5185
35794                 | LR__5186
35794                 | LR__5187
35794                 | LR__5188
35794                 | LR__5189
35794     0C 4E 05 F1 | 	add	fp, #12
35798     A7 26 0A FB | 	rdlong	local01, fp wz
3579c     0C 4E 85 F1 | 	sub	fp, #12
357a0     40 00 90 5D |  if_ne	jmp	#LR__5191
357a4     10 4E 05 F1 | 	add	fp, #16
357a8     A7 12 02 F6 | 	mov	arg01, fp
357ac     10 4E 85 F1 | 	sub	fp, #16
357b0     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
357b4     0C 4E 05 F1 | 	add	fp, #12
357b8     A7 FA 61 FC | 	wrlong	result1, fp
357bc     0C 4E 85 F1 | 	sub	fp, #12
357c0     00 FA 0D F2 | 	cmp	result1, #0 wz
357c4     1C 00 90 5D |  if_ne	jmp	#LR__5190
357c8     70 4E 05 F1 | 	add	fp, #112
357cc     A7 12 02 FB | 	rdlong	arg01, fp
357d0     70 4E 85 F1 | 	sub	fp, #112
357d4     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
357d8     0C 4E 05 F1 | 	add	fp, #12
357dc     A7 FA 61 FC | 	wrlong	result1, fp
357e0     0C 4E 85 F1 | 	sub	fp, #12
357e4                 | LR__5190
357e4                 | LR__5191
357e4                 | LR__5192
357e4                 | LR__5193
357e4                 | ' 					res = sync_fs(fs);
357e4                 | ' 				}
357e4                 | ' 			}
357e4                 | ' 
357e4                 | ' 		}
357e4                 | ' 		;
357e4                 | ' 	}
357e4                 | ' 
357e4                 | ' 	return res ;
357e4     0C 4E 05 F1 | 	add	fp, #12
357e8     A7 FA 01 FB | 	rdlong	result1, fp
357ec     0C 4E 85 F1 | 	sub	fp, #12
357f0     A7 F0 03 F6 | 	mov	ptra, fp
357f4     B2 00 A0 FD | 	call	#popregs_
357f8                 | _fatfs_cc_f_rename_ret
357f8     2D 00 64 FD | 	ret
357fc                 | 
357fc                 | _fatfs_cc_time
357fc     00 4A 05 F6 | 	mov	COUNT_, #0
35800     A8 00 A0 FD | 	call	#pushregs_
35804     14 F0 07 F1 | 	add	ptra, #20
35808     04 4E 05 F1 | 	add	fp, #4
3580c     A7 12 62 FC | 	wrlong	arg01, fp
35810     04 4E 05 F1 | 	add	fp, #4
35814     A7 12 02 F6 | 	mov	arg01, fp
35818     08 4E 85 F1 | 	sub	fp, #8
3581c     00 14 06 F6 | 	mov	arg02, #0
35820     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
35824     08 4E 05 F1 | 	add	fp, #8
35828     A7 FA 01 FB | 	rdlong	result1, fp
3582c     08 4E 05 F1 | 	add	fp, #8
35830     A7 FA 61 FC | 	wrlong	result1, fp
35834     0C 4E 85 F1 | 	sub	fp, #12
35838     A7 FA 09 FB | 	rdlong	result1, fp wz
3583c     04 4E 85 F1 | 	sub	fp, #4
35840     18 00 90 AD |  if_e	jmp	#LR__5200
35844     04 4E 05 F1 | 	add	fp, #4
35848     A7 FA 01 FB | 	rdlong	result1, fp
3584c     0C 4E 05 F1 | 	add	fp, #12
35850     A7 14 02 FB | 	rdlong	arg02, fp
35854     10 4E 85 F1 | 	sub	fp, #16
35858     FD 14 62 FC | 	wrlong	arg02, result1
3585c                 | LR__5200
3585c                 | '         *tp = now;
3585c                 | '     return now;
3585c     10 4E 05 F1 | 	add	fp, #16
35860     A7 FA 01 FB | 	rdlong	result1, fp
35864     10 4E 85 F1 | 	sub	fp, #16
35868     A7 F0 03 F6 | 	mov	ptra, fp
3586c     B2 00 A0 FD | 	call	#popregs_
35870                 | _fatfs_cc_time_ret
35870     2D 00 64 FD | 	ret
35874                 | 
35874                 | _fatfs_cc_mktime
35874     06 4A 05 F6 | 	mov	COUNT_, #6
35878     A8 00 A0 FD | 	call	#pushregs_
3587c     09 27 02 F6 | 	mov	local01, arg01
35880     14 26 06 F1 | 	add	local01, #20
35884     13 13 02 FB | 	rdlong	arg01, local01
35888     14 26 86 F1 | 	sub	local01, #20
3588c     46 12 56 F2 | 	cmps	arg01, #70 wc
35890                 | '                 return (time_t) -1;
35890     01 FA 65 C6 |  if_b	neg	result1, #1
35894     7C 01 90 CD |  if_b	jmp	#LR__5214
35898     03 00 00 FF 
3589c     6C 29 06 F6 | 	mov	local02, ##1900
358a0     14 26 06 F1 | 	add	local01, #20
358a4     13 FB 01 FB | 	rdlong	result1, local01
358a8     FD 28 02 F1 | 	add	local02, result1
358ac     08 26 86 F1 | 	sub	local01, #8
358b0     13 2B 02 FB | 	rdlong	local03, local01
358b4     01 2A 86 F1 | 	sub	local03, #1
358b8     04 26 06 F1 | 	add	local01, #4
358bc     13 13 02 FB | 	rdlong	arg01, local01
358c0     10 26 86 F1 | 	sub	local01, #16
358c4     02 12 66 F0 | 	shl	arg01, #2
358c8     02 00 00 FF 
358cc     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
358d0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
358d4     09 FB 01 FB | 	rdlong	result1, arg01
358d8     FD 2A 02 F1 | 	add	local03, result1
358dc     14 13 02 F6 | 	mov	arg01, local02
358e0     02 00 00 FF 
358e4     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
358e8     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
358ec     00 FA 0D F2 | 	cmp	result1, #0 wz
358f0     1C 00 90 AD |  if_e	jmp	#LR__5210
358f4     00 2C 06 F6 | 	mov	local04, #0
358f8     10 26 06 F1 | 	add	local01, #16
358fc     13 FB 01 FB | 	rdlong	result1, local01
35900     10 26 86 F1 | 	sub	local01, #16
35904     02 FA 55 F2 | 	cmps	result1, #2 wc
35908     01 2C 06 36 |  if_ae	mov	local04, #1
3590c     04 00 90 FD | 	jmp	#LR__5211
35910                 | LR__5210
35910     00 2C 06 F6 | 	mov	local04, #0
35914                 | LR__5211
35914     04 26 06 F1 | 	add	local01, #4
35918     13 FB 01 FB | 	rdlong	result1, local01
3591c     04 26 86 F1 | 	sub	local01, #4
35920     13 2F 02 FB | 	rdlong	local05, local01
35924     08 26 06 F1 | 	add	local01, #8
35928     13 13 02 FB | 	rdlong	arg01, local01
3592c     07 00 00 FF 
35930     10 12 06 FD | 	qmul	arg01, ##3600
35934     16 2B 02 F1 | 	add	local03, local04
35938     FD 2C 02 F6 | 	mov	local04, result1
3593c     04 2C 66 F0 | 	shl	local04, #4
35940     FD 2C 82 F1 | 	sub	local04, result1
35944     02 2C 66 F0 | 	shl	local04, #2
35948     16 2F 02 F1 | 	add	local05, local04
3594c     08 26 86 F1 | 	sub	local01, #8
35950     18 2C 62 FD | 	getqx	local04
35954     A8 00 00 FF 
35958     80 2B 06 FD | 	qmul	local03, ##86400
3595c     16 2F 02 F1 | 	add	local05, local04
35960     14 2B 02 F6 | 	mov	local03, local02
35964     03 00 00 FF 
35968     B2 2B 86 F1 | 	sub	local03, ##1970
3596c     18 2C 62 FD | 	getqx	local04
35970     99 F0 00 FF 
35974     80 2B 06 FD | 	qmul	local03, ##31536000
35978     16 2F 02 F1 | 	add	local05, local04
3597c     14 2B 02 F6 | 	mov	local03, local02
35980     03 00 00 FF 
35984     B1 2B 86 F1 | 	sub	local03, ##1969
35988     15 31 52 F6 | 	abs	local06, local03 wc
3598c     02 30 46 F0 | 	shr	local06, #2
35990     18 31 82 F6 | 	negc	local06, local06
35994     03 00 00 FF 
35998     D1 29 56 F2 | 	cmps	local02, ##2001 wc
3599c     18 2C 62 FD | 	getqx	local04
359a0     16 2F 02 F1 | 	add	local05, local04
359a4     18 00 90 CD |  if_b	jmp	#LR__5212
359a8     03 00 00 FF 
359ac     D0 29 86 F1 | 	sub	local02, ##2000
359b0     14 2D 52 F6 | 	abs	local04, local02 wc
359b4     64 2C 16 FD | 	qdiv	local04, #100
359b8     18 2C 62 FD | 	getqx	local04
359bc     16 31 A2 F3 | 	sumnc	local06, local04
359c0                 | LR__5212
359c0     A8 00 00 FF 
359c4     80 31 06 FD | 	qmul	local06, ##86400
359c8     18 30 62 FD | 	getqx	local06
359cc     18 2F 02 F1 | 	add	local05, local06
359d0     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
359d4     02 00 00 FF 
359d8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
359dc     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
359e0     18 2F 02 F1 | 	add	local05, local06
359e4     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
359e8     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
359ec     02 00 00 FF 
359f0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
359f4     01 2A 0E F2 | 	cmp	local03, #1 wz
359f8     14 00 90 5D |  if_ne	jmp	#LR__5213
359fc     13 13 02 F6 | 	mov	arg01, local01
35a00     D8 19 B0 FD | 	call	#_fatfs_cc___indst
35a04     00 FA 0D F2 | 	cmp	result1, #0 wz
35a08     07 00 00 5F 
35a0c     10 2E 86 51 |  if_ne	sub	local05, ##3600
35a10                 | LR__5213
35a10                 | '                 s -=  (3600L) ;
35a10                 | ' 
35a10                 | '         return s;
35a10     17 FB 01 F6 | 	mov	result1, local05
35a14                 | LR__5214
35a14     A7 F0 03 F6 | 	mov	ptra, fp
35a18     B2 00 A0 FD | 	call	#popregs_
35a1c                 | _fatfs_cc_mktime_ret
35a1c     2D 00 64 FD | 	ret
35a20                 | 
35a20                 | _fatfs_cc__gmtime_r
35a20     03 4A 05 F6 | 	mov	COUNT_, #3
35a24     A8 00 A0 FD | 	call	#pushregs_
35a28     09 27 02 FB | 	rdlong	local01, arg01
35a2c     A8 00 00 FF 
35a30     80 27 16 FD | 	qdiv	local01, ##86400
35a34     18 FA 61 FD | 	getqx	result1
35a38     04 FA 05 F1 | 	add	result1, #4
35a3c     07 FA 15 FD | 	qdiv	result1, #7
35a40     18 14 06 F1 | 	add	arg02, #24
35a44     D1 7F 27 FF 
35a48     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
35a4c     D1 7F 27 3F 
35a50     00 26 86 31 |  if_ae	sub	local01, ##1325376000
35a54     03 00 00 3F 
35a58     DC 29 06 36 |  if_ae	mov	local02, ##2012
35a5c     03 00 00 CF 
35a60     B2 29 06 C6 |  if_b	mov	local02, ##1970
35a64                 | ' 	  year = 1970;
35a64                 | ' 	}
35a64                 | ' 
35a64                 | ' 	for(;;) {
35a64     19 FA 61 FD | 	getqy	result1
35a68     0A FB 61 FC | 	wrlong	result1, arg02
35a6c     18 14 86 F1 | 	sub	arg02, #24
35a70                 | LR__5220
35a70     14 13 02 F6 | 	mov	arg01, local02
35a74     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
35a78     00 FA 0D F2 | 	cmp	result1, #0 wz
35a7c     42 F1 00 5F 
35a80     00 2B 06 56 |  if_ne	mov	local03, ##31622400
35a84     99 F0 00 AF 
35a88     80 2B 06 A6 |  if_e	mov	local03, ##31536000
35a8c     15 27 12 F2 | 	cmp	local01, local03 wc
35a90                 | ' 	    break;
35a90     01 28 06 31 |  if_ae	add	local02, #1
35a94     15 27 82 31 |  if_ae	sub	local01, local03
35a98     D4 FF 9F 3D |  if_ae	jmp	#LR__5220
35a9c     A8 00 00 FF 
35aa0     80 27 16 FD | 	qdiv	local01, ##86400
35aa4     14 2B 02 F6 | 	mov	local03, local02
35aa8     03 00 00 FF 
35aac     6C 2B 86 F1 | 	sub	local03, ##1900
35ab0     14 14 06 F1 | 	add	arg02, #20
35ab4     0A 2B 62 FC | 	wrlong	local03, arg02
35ab8     08 14 06 F1 | 	add	arg02, #8
35abc     14 13 02 F6 | 	mov	arg01, local02
35ac0     18 28 62 FD | 	getqx	local02
35ac4     0A 29 62 FC | 	wrlong	local02, arg02
35ac8     1C 14 86 F1 | 	sub	arg02, #28
35acc     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
35ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
35ad4     1D 2A 06 56 |  if_ne	mov	local03, #29
35ad8     1C 2A 06 A6 |  if_e	mov	local03, #28
35adc     02 00 00 FF 
35ae0     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
35ae4     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
35ae8     02 00 00 FF 
35aec     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
35af0                 | ' 
35af0                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
35af0                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
35af0     00 12 06 F6 | 	mov	arg01, #0
35af4     97 2A 48 FB | 	callpa	#(@LR__5222-@LR__5221)>>2,fcache_load_ptr_
35af8                 | LR__5221
35af8     09 2B 02 F6 | 	mov	local03, arg01
35afc     02 2A 66 F0 | 	shl	local03, #2
35b00     02 00 00 FF 
35b04     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
35b08     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
35b0c     15 2B 02 FB | 	rdlong	local03, local03
35b10     15 29 52 F2 | 	cmps	local02, local03 wc
35b14     02 00 00 FF 
35b18     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
35b1c     2C 00 90 CD |  if_b	jmp	#LR__5223
35b20     09 2B 02 F6 | 	mov	local03, arg01
35b24     02 2A 66 F0 | 	shl	local03, #2
35b28     02 00 00 FF 
35b2c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
35b30     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
35b34     15 2B 02 FB | 	rdlong	local03, local03
35b38     15 29 82 F1 | 	sub	local02, local03
35b3c     01 12 06 F1 | 	add	arg01, #1
35b40     02 00 00 FF 
35b44     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
35b48     AC FF 9F FD | 	jmp	#LR__5221
35b4c                 | LR__5222
35b4c                 | LR__5223
35b4c     A8 00 00 FF 
35b50     80 27 16 FD | 	qdiv	local01, ##86400
35b54     10 14 06 F1 | 	add	arg02, #16
35b58     0A 13 62 FC | 	wrlong	arg01, arg02
35b5c     01 28 06 F1 | 	add	local02, #1
35b60     04 14 86 F1 | 	sub	arg02, #4
35b64     0A 29 62 FC | 	wrlong	local02, arg02
35b68     19 26 62 FD | 	getqy	local01
35b6c     07 00 00 FF 
35b70     10 26 16 FD | 	qdiv	local01, ##3600
35b74     18 2A 62 FD | 	getqx	local03
35b78     07 00 00 FF 
35b7c     10 26 16 FD | 	qdiv	local01, ##3600
35b80     04 14 86 F1 | 	sub	arg02, #4
35b84     0A 2B 62 FC | 	wrlong	local03, arg02
35b88     19 26 62 FD | 	getqy	local01
35b8c     3C 26 16 FD | 	qdiv	local01, #60
35b90     18 2A 62 FD | 	getqx	local03
35b94     3C 26 16 FD | 	qdiv	local01, #60
35b98     04 14 86 F1 | 	sub	arg02, #4
35b9c     0A 2B 62 FC | 	wrlong	local03, arg02
35ba0     04 14 86 F1 | 	sub	arg02, #4
35ba4                 | '         stm->tm_isdst = 0;
35ba4                 | ' 
35ba4                 | ' ;
35ba4                 | '         return stm;
35ba4     0A FB 01 F6 | 	mov	result1, arg02
35ba8     19 2A 62 FD | 	getqy	local03
35bac     0A 2B 62 FC | 	wrlong	local03, arg02
35bb0     20 14 06 F1 | 	add	arg02, #32
35bb4     0A 01 68 FC | 	wrlong	#0, arg02
35bb8     A7 F0 03 F6 | 	mov	ptra, fp
35bbc     B2 00 A0 FD | 	call	#popregs_
35bc0                 | _fatfs_cc__gmtime_r_ret
35bc0     2D 00 64 FD | 	ret
35bc4                 | 
35bc4                 | _fatfs_cc__tzset
35bc4     BB 01 00 FF 
35bc8     05 13 06 F6 | 	mov	arg01, ##@LR__5535
35bcc     34 00 B0 FD | 	call	#_fatfs_cc_getenv
35bd0     FD 12 02 F6 | 	mov	arg01, result1
35bd4     02 00 00 FF 
35bd8     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
35bdc     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
35be0     02 00 00 FF 
35be4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
35be8     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
35bec     02 00 00 FF 
35bf0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
35bf4     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
35bf8     02 00 00 FF 
35bfc     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
35c00                 | _fatfs_cc__tzset_ret
35c00     2D 00 64 FD | 	ret
35c04                 | 
35c04                 | _fatfs_cc_getenv
35c04     06 4A 05 F6 | 	mov	COUNT_, #6
35c08     A8 00 A0 FD | 	call	#pushregs_
35c0c     09 27 02 F6 | 	mov	local01, arg01
35c10     09 29 02 F6 | 	mov	local02, arg01
35c14     97 06 48 FB | 	callpa	#(@LR__5231-@LR__5230)>>2,fcache_load_ptr_
35c18                 | LR__5230
35c18     14 FB C9 FA | 	rdbyte	result1, local02 wz
35c1c     01 28 06 51 |  if_ne	add	local02, #1
35c20     F4 FF 9F 5D |  if_ne	jmp	#LR__5230
35c24                 | LR__5231
35c24     09 29 82 F1 | 	sub	local02, arg01
35c28     14 FB 01 F6 | 	mov	result1, local02
35c2c     02 00 00 FF 
35c30     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
35c34     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
35c38     02 00 00 FF 
35c3c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
35c40                 | '             return 0;
35c40     00 FA 05 A6 |  if_e	mov	result1, #0
35c44     5C 00 90 AD |  if_e	jmp	#LR__5234
35c48                 | ' 
35c48                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
35c48     02 00 00 FF 
35c4c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
35c50     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
35c54     02 00 00 FF 
35c58     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
35c5c                 | LR__5232
35c5c     15 2D 0A FB | 	rdlong	local04, local03 wz
35c60     3C 00 90 AD |  if_e	jmp	#LR__5233
35c64     16 13 02 F6 | 	mov	arg01, local04
35c68     13 15 02 F6 | 	mov	arg02, local01
35c6c     14 17 02 F6 | 	mov	arg03, local02
35c70     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
35c74     00 FA 0D F2 | 	cmp	result1, #0 wz
35c78     14 2F 02 A6 |  if_e	mov	local05, local02
35c7c     16 2F 02 A1 |  if_e	add	local05, local04
35c80     17 31 C2 AA |  if_e	rdbyte	local06, local05
35c84     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
35c88                 | ' 			return name+len+1;
35c88     14 2D 02 A1 |  if_e	add	local04, local02
35c8c     01 2C 06 A1 |  if_e	add	local04, #1
35c90     16 FB 01 A6 |  if_e	mov	result1, local04
35c94     0C 00 90 AD |  if_e	jmp	#LR__5234
35c98     04 2A 06 F1 | 	add	local03, #4
35c9c     BC FF 9F FD | 	jmp	#LR__5232
35ca0                 | LR__5233
35ca0                 | ' 	}
35ca0                 | ' 	return 0;
35ca0     00 FA 05 F6 | 	mov	result1, #0
35ca4                 | LR__5234
35ca4     A7 F0 03 F6 | 	mov	ptra, fp
35ca8     B2 00 A0 FD | 	call	#popregs_
35cac                 | _fatfs_cc_getenv_ret
35cac     2D 00 64 FD | 	ret
35cb0                 | 
35cb0                 | _fatfs_cc__get_fattime
35cb0     00 4A 05 F6 | 	mov	COUNT_, #0
35cb4     A8 00 A0 FD | 	call	#pushregs_
35cb8     34 F0 07 F1 | 	add	ptra, #52
35cbc     00 12 06 F6 | 	mov	arg01, #0
35cc0     38 FB BF FD | 	call	#_fatfs_cc_time
35cc4     04 4E 05 F1 | 	add	fp, #4
35cc8     A7 FA 61 FC | 	wrlong	result1, fp
35ccc     A7 12 02 F6 | 	mov	arg01, fp
35cd0     0C 4E 05 F1 | 	add	fp, #12
35cd4     A7 14 02 F6 | 	mov	arg02, fp
35cd8     10 4E 85 F1 | 	sub	fp, #16
35cdc     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
35ce0     24 4E 05 F1 | 	add	fp, #36
35ce4     A7 14 02 FB | 	rdlong	arg02, fp
35ce8     50 14 86 F1 | 	sub	arg02, #80
35cec     09 14 66 F0 | 	shl	arg02, #9
35cf0     04 4E 85 F1 | 	sub	fp, #4
35cf4     A7 FA 01 FB | 	rdlong	result1, fp
35cf8     01 FA 05 F1 | 	add	result1, #1
35cfc     05 FA 65 F0 | 	shl	result1, #5
35d00     FD 14 42 F5 | 	or	arg02, result1
35d04     04 4E 85 F1 | 	sub	fp, #4
35d08     A7 FA 01 FB | 	rdlong	result1, fp
35d0c     FD 14 42 F5 | 	or	arg02, result1
35d10     14 4E 85 F1 | 	sub	fp, #20
35d14     A7 14 62 FC | 	wrlong	arg02, fp
35d18     10 4E 05 F1 | 	add	fp, #16
35d1c     A7 14 02 FB | 	rdlong	arg02, fp
35d20     0B 14 66 F0 | 	shl	arg02, #11
35d24     04 4E 85 F1 | 	sub	fp, #4
35d28     A7 FA 01 FB | 	rdlong	result1, fp
35d2c     05 FA 65 F0 | 	shl	result1, #5
35d30     FD 14 42 F5 | 	or	arg02, result1
35d34     04 4E 85 F1 | 	sub	fp, #4
35d38     A7 FA 01 FB | 	rdlong	result1, fp
35d3c     FD 14 42 F5 | 	or	arg02, result1
35d40     04 4E 85 F1 | 	sub	fp, #4
35d44     A7 14 62 FC | 	wrlong	arg02, fp
35d48                 | ' 
35d48                 | '     now = time(0);
35d48                 | '     _gmtime_r (&now, &date);
35d48                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
35d48                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
35d48                 | '     return (ffdate << 16) | fftime;
35d48     04 4E 85 F1 | 	sub	fp, #4
35d4c     A7 FA 01 FB | 	rdlong	result1, fp
35d50     10 FA 65 F0 | 	shl	result1, #16
35d54     08 4E 85 F1 | 	sub	fp, #8
35d58     0A FB 41 F5 | 	or	result1, arg02
35d5c     A7 F0 03 F6 | 	mov	ptra, fp
35d60     B2 00 A0 FD | 	call	#popregs_
35d64                 | _fatfs_cc__get_fattime_ret
35d64     2D 00 64 FD | 	ret
35d68                 | 
35d68                 | _fatfs_cc_unixtime_1049
35d68     00 4A 05 F6 | 	mov	COUNT_, #0
35d6c     A8 00 A0 FD | 	call	#pushregs_
35d70     34 F0 07 F1 | 	add	ptra, #52
35d74     04 4E 05 F1 | 	add	fp, #4
35d78     A7 12 62 FC | 	wrlong	arg01, fp
35d7c     04 4E 05 F1 | 	add	fp, #4
35d80     A7 14 62 FC | 	wrlong	arg02, fp
35d84     04 4E 85 F1 | 	sub	fp, #4
35d88     A7 14 02 FB | 	rdlong	arg02, fp
35d8c     09 14 46 F0 | 	shr	arg02, #9
35d90     7F 14 06 F5 | 	and	arg02, #127
35d94     50 FA 05 F6 | 	mov	result1, #80
35d98     0A FB 01 F1 | 	add	result1, arg02
35d9c     20 4E 05 F1 | 	add	fp, #32
35da0     A7 FA 61 FC | 	wrlong	result1, fp
35da4     20 4E 85 F1 | 	sub	fp, #32
35da8     A7 FA 01 FB | 	rdlong	result1, fp
35dac     05 FA 45 F0 | 	shr	result1, #5
35db0     FD FA 41 F8 | 	getnib	result1, result1, #0
35db4     01 FA 85 F1 | 	sub	result1, #1
35db8     1C 4E 05 F1 | 	add	fp, #28
35dbc     A7 FA 61 FC | 	wrlong	result1, fp
35dc0     1C 4E 85 F1 | 	sub	fp, #28
35dc4     A7 FA 01 FB | 	rdlong	result1, fp
35dc8     1F FA 05 F5 | 	and	result1, #31
35dcc     18 4E 05 F1 | 	add	fp, #24
35dd0     A7 FA 61 FC | 	wrlong	result1, fp
35dd4     14 4E 85 F1 | 	sub	fp, #20
35dd8     A7 FA 01 FB | 	rdlong	result1, fp
35ddc     0B FA 45 F0 | 	shr	result1, #11
35de0     1F FA 05 F5 | 	and	result1, #31
35de4     10 4E 05 F1 | 	add	fp, #16
35de8     A7 FA 61 FC | 	wrlong	result1, fp
35dec     10 4E 85 F1 | 	sub	fp, #16
35df0     A7 FA 01 FB | 	rdlong	result1, fp
35df4     05 FA 45 F0 | 	shr	result1, #5
35df8     3F FA 05 F5 | 	and	result1, #63
35dfc     0C 4E 05 F1 | 	add	fp, #12
35e00     A7 FA 61 FC | 	wrlong	result1, fp
35e04     0C 4E 85 F1 | 	sub	fp, #12
35e08     A7 14 02 FB | 	rdlong	arg02, fp
35e0c     1F 14 06 F5 | 	and	arg02, #31
35e10     01 14 66 F0 | 	shl	arg02, #1
35e14     08 4E 05 F1 | 	add	fp, #8
35e18     A7 14 62 FC | 	wrlong	arg02, fp
35e1c     A7 12 02 F6 | 	mov	arg01, fp
35e20     10 4E 85 F1 | 	sub	fp, #16
35e24     4C FA BF FD | 	call	#_fatfs_cc_mktime
35e28     0C 4E 05 F1 | 	add	fp, #12
35e2c     A7 FA 61 FC | 	wrlong	result1, fp
35e30                 | ' 
35e30                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
35e30                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
35e30                 | '     date.tm_mday = (dosdate & 0x1f);
35e30                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
35e30                 | '     date.tm_min = (dostime >> 5) & 0x3f;
35e30                 | '     date.tm_sec = (dostime & 0x1f) << 1;
35e30                 | ' 
35e30                 | '     t = mktime(&date);
35e30                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
35e30                 | '     return t;
35e30     0C 4E 85 F1 | 	sub	fp, #12
35e34     A7 F0 03 F6 | 	mov	ptra, fp
35e38     B2 00 A0 FD | 	call	#popregs_
35e3c                 | _fatfs_cc_unixtime_1049_ret
35e3c     2D 00 64 FD | 	ret
35e40                 | 
35e40                 | _fatfs_cc__set_dos_error_1051
35e40     09 01 02 F6 | 	mov	_var01, arg01
35e44                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
35e44                 | '     switch (derr) {
35e44     14 00 26 F3 | 	fle	_var01, #20
35e48     30 00 62 FD | 	jmprel	_var01
35e4c                 | LR__5240
35e4c     50 00 90 FD | 	jmp	#LR__5241
35e50     84 00 90 FD | 	jmp	#LR__5255
35e54     80 00 90 FD | 	jmp	#LR__5256
35e58     7C 00 90 FD | 	jmp	#LR__5257
35e5c     48 00 90 FD | 	jmp	#LR__5242
35e60     44 00 90 FD | 	jmp	#LR__5243
35e64     40 00 90 FD | 	jmp	#LR__5244
35e68     44 00 90 FD | 	jmp	#LR__5245
35e6c     48 00 90 FD | 	jmp	#LR__5247
35e70     54 00 90 FD | 	jmp	#LR__5250
35e74     38 00 90 FD | 	jmp	#LR__5246
35e78     4C 00 90 FD | 	jmp	#LR__5251
35e7c     48 00 90 FD | 	jmp	#LR__5252
35e80     44 00 90 FD | 	jmp	#LR__5253
35e84     50 00 90 FD | 	jmp	#LR__5258
35e88     4C 00 90 FD | 	jmp	#LR__5258
35e8c     48 00 90 FD | 	jmp	#LR__5258
35e90     2C 00 90 FD | 	jmp	#LR__5248
35e94     38 00 90 FD | 	jmp	#LR__5254
35e98     2C 00 90 FD | 	jmp	#LR__5249
35e9c     38 00 90 FD | 	jmp	#LR__5258
35ea0                 | LR__5241
35ea0     00 02 06 F6 | 	mov	_var02, #0
35ea4                 | '         r = 0;
35ea4                 | '         break;
35ea4     34 00 90 FD | 	jmp	#LR__5259
35ea8                 | LR__5242
35ea8                 | LR__5243
35ea8                 | LR__5244
35ea8     04 02 06 F6 | 	mov	_var02, #4
35eac                 | '         r =  4 ;
35eac                 | '         break;
35eac     2C 00 90 FD | 	jmp	#LR__5259
35eb0                 | LR__5245
35eb0                 | LR__5246
35eb0     06 02 06 F6 | 	mov	_var02, #6
35eb4                 | '         r =  6 ;
35eb4                 | '         break;
35eb4     24 00 90 FD | 	jmp	#LR__5259
35eb8                 | LR__5247
35eb8     09 02 06 F6 | 	mov	_var02, #9
35ebc                 | '         r =  9 ;
35ebc                 | '         break;
35ebc     1C 00 90 FD | 	jmp	#LR__5259
35ec0                 | LR__5248
35ec0     07 02 06 F6 | 	mov	_var02, #7
35ec4                 | '         r =  7 ;
35ec4                 | '         break;
35ec4     14 00 90 FD | 	jmp	#LR__5259
35ec8                 | LR__5249
35ec8                 | LR__5250
35ec8                 | LR__5251
35ec8                 | LR__5252
35ec8                 | LR__5253
35ec8     0A 02 06 F6 | 	mov	_var02, #10
35ecc                 | '         r =  10 ;
35ecc                 | '         break;
35ecc     0C 00 90 FD | 	jmp	#LR__5259
35ed0                 | LR__5254
35ed0     0B 02 06 F6 | 	mov	_var02, #11
35ed4                 | '         r =  11 ;
35ed4                 | '         break;
35ed4     04 00 90 FD | 	jmp	#LR__5259
35ed8                 | LR__5255
35ed8                 | LR__5256
35ed8                 | LR__5257
35ed8                 | LR__5258
35ed8     0C 02 06 F6 | 	mov	_var02, #12
35edc                 | '         r =  12 ;
35edc                 | '         break;
35edc                 | LR__5259
35edc                 | '     }
35edc                 | '     return _seterror(r);
35edc     00 02 4E F2 | 	cmps	_var02, #0 wz
35ee0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
35ee4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
35ee8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
35eec     01 FA 65 56 |  if_ne	neg	result1, #1
35ef0     00 FA 05 A6 |  if_e	mov	result1, #0
35ef4                 | _fatfs_cc__set_dos_error_1051_ret
35ef4     2D 00 64 FD | 	ret
35ef8                 | 
35ef8                 | _fatfs_cc_v_creat
35ef8     04 4A 05 F6 | 	mov	COUNT_, #4
35efc     A8 00 A0 FD | 	call	#pushregs_
35f00     09 27 02 F6 | 	mov	local01, arg01
35f04     0A 29 02 F6 | 	mov	local02, arg02
35f08     03 00 00 FF 
35f0c     3C 12 06 F6 | 	mov	arg01, ##1596
35f10                 | '     return _gc_alloc(size);
35f10     10 14 06 F6 | 	mov	arg02, #16
35f14     1C 5E BF FD | 	call	#__system___gc_doalloc
35f18     FD 2A 0A F6 | 	mov	local03, result1 wz
35f1c                 | '       return _seterror( 7 );
35f1c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35f20     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35f24     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35f28     01 FA 65 A6 |  if_e	neg	result1, #1
35f2c     58 00 90 AD |  if_e	jmp	#LR__5261
35f30     15 13 02 F6 | 	mov	arg01, local03
35f34     00 14 06 F6 | 	mov	arg02, #0
35f38     03 00 00 FF 
35f3c     3C 16 06 F6 | 	mov	arg03, ##1596
35f40     98 00 A0 FD | 	call	#\builtin_bytefill_
35f44     02 00 00 FF 
35f48     14 2A 06 F1 | 	add	local03, ##1044
35f4c     15 13 02 F6 | 	mov	arg01, local03
35f50     02 00 00 FF 
35f54     14 2A 86 F1 | 	sub	local03, ##1044
35f58     14 15 02 F6 | 	mov	arg02, local02
35f5c     07 16 06 F6 | 	mov	arg03, #7
35f60     B4 CC BF FD | 	call	#_fatfs_cc_f_open
35f64     FD 2C 0A F6 | 	mov	local04, result1 wz
35f68     14 00 90 AD |  if_e	jmp	#LR__5260
35f6c     15 13 02 F6 | 	mov	arg01, local03
35f70                 | '     return _gc_free(ptr);
35f70     CC 5E BF FD | 	call	#__system___gc_free
35f74                 | '     free(f);
35f74                 | '     return _set_dos_error(r);
35f74     16 13 02 F6 | 	mov	arg01, local04
35f78     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1051
35f7c     08 00 90 FD | 	jmp	#LR__5261
35f80                 | LR__5260
35f80     13 2B 62 FC | 	wrlong	local03, local01
35f84                 | '   }
35f84                 | '   fil->vfsdata = f;
35f84                 | '   return 0;
35f84     00 FA 05 F6 | 	mov	result1, #0
35f88                 | LR__5261
35f88     A7 F0 03 F6 | 	mov	ptra, fp
35f8c     B2 00 A0 FD | 	call	#popregs_
35f90                 | _fatfs_cc_v_creat_ret
35f90     2D 00 64 FD | 	ret
35f94                 | 
35f94                 | _fatfs_cc_v_close
35f94     02 4A 05 F6 | 	mov	COUNT_, #2
35f98     A8 00 A0 FD | 	call	#pushregs_
35f9c     09 27 02 FB | 	rdlong	local01, arg01
35fa0     02 00 00 FF 
35fa4     14 26 06 F1 | 	add	local01, ##1044
35fa8     13 13 02 F6 | 	mov	arg01, local01
35fac     02 00 00 FF 
35fb0     14 26 86 F1 | 	sub	local01, ##1044
35fb4     DC E3 BF FD | 	call	#_fatfs_cc_f_close
35fb8     FD 28 02 F6 | 	mov	local02, result1
35fbc     13 13 02 F6 | 	mov	arg01, local01
35fc0                 | '     return _gc_free(ptr);
35fc0     7C 5E BF FD | 	call	#__system___gc_free
35fc4                 | '     FAT_FIL *f = fil->vfsdata;
35fc4                 | '     r=f_close(&f->fil);
35fc4                 | '     free(f);
35fc4                 | '     return _set_dos_error(r);
35fc4     14 13 02 F6 | 	mov	arg01, local02
35fc8     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1051
35fcc     A7 F0 03 F6 | 	mov	ptra, fp
35fd0     B2 00 A0 FD | 	call	#popregs_
35fd4                 | _fatfs_cc_v_close_ret
35fd4     2D 00 64 FD | 	ret
35fd8                 | 
35fd8                 | _fatfs_cc_v_opendir
35fd8     04 4A 05 F6 | 	mov	COUNT_, #4
35fdc     A8 00 A0 FD | 	call	#pushregs_
35fe0     09 27 02 F6 | 	mov	local01, arg01
35fe4     0A 29 02 F6 | 	mov	local02, arg02
35fe8     30 12 06 F6 | 	mov	arg01, #48
35fec                 | '     return _gc_alloc(size);
35fec     10 14 06 F6 | 	mov	arg02, #16
35ff0     40 5D BF FD | 	call	#__system___gc_doalloc
35ff4     FD 2A 0A F6 | 	mov	local03, result1 wz
35ff8                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
35ff8                 | '       return _seterror( 7 );
35ff8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35ffc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
36000     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
36004     01 FA 65 A6 |  if_e	neg	result1, #1
36008     34 00 90 AD |  if_e	jmp	#LR__5271
3600c     14 15 02 F6 | 	mov	arg02, local02
36010     15 13 02 F6 | 	mov	arg01, local03
36014     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
36018     FD 2C 0A F6 | 	mov	local04, result1 wz
3601c     14 00 90 AD |  if_e	jmp	#LR__5270
36020     15 13 02 F6 | 	mov	arg01, local03
36024                 | '     return _gc_free(ptr);
36024     18 5E BF FD | 	call	#__system___gc_free
36028                 | '         free(f);
36028                 | '         return _set_dos_error(r);
36028     16 13 02 F6 | 	mov	arg01, local04
3602c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1051
36030     0C 00 90 FD | 	jmp	#LR__5271
36034                 | LR__5270
36034     04 26 06 F1 | 	add	local01, #4
36038     13 2B 62 FC | 	wrlong	local03, local01
3603c                 | '     }
3603c                 | '     dir->vfsdata = f;
3603c                 | '     return 0;
3603c     00 FA 05 F6 | 	mov	result1, #0
36040                 | LR__5271
36040     A7 F0 03 F6 | 	mov	ptra, fp
36044     B2 00 A0 FD | 	call	#popregs_
36048                 | _fatfs_cc_v_opendir_ret
36048     2D 00 64 FD | 	ret
3604c                 | 
3604c                 | _fatfs_cc_v_closedir
3604c     02 4A 05 F6 | 	mov	COUNT_, #2
36050     A8 00 A0 FD | 	call	#pushregs_
36054     04 12 06 F1 | 	add	arg01, #4
36058     09 27 02 FB | 	rdlong	local01, arg01
3605c     13 13 02 F6 | 	mov	arg01, local01
36060     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
36064     FD 28 02 F6 | 	mov	local02, result1
36068     13 13 02 F6 | 	mov	arg01, local01
3606c                 | '     return _gc_free(ptr);
3606c     D0 5D BF FD | 	call	#__system___gc_free
36070     00 28 0E F2 | 	cmp	local02, #0 wz
36074     14 13 02 56 |  if_ne	mov	arg01, local02
36078     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1051
3607c                 | '     return r;
3607c     14 FB 01 F6 | 	mov	result1, local02
36080     A7 F0 03 F6 | 	mov	ptra, fp
36084     B2 00 A0 FD | 	call	#popregs_
36088                 | _fatfs_cc_v_closedir_ret
36088     2D 00 64 FD | 	ret
3608c                 | 
3608c                 | _fatfs_cc_v_readdir
3608c     01 4A 05 F6 | 	mov	COUNT_, #1
36090     A8 00 A0 FD | 	call	#pushregs_
36094     2C F1 07 F1 | 	add	ptra, #300
36098     04 4E 05 F1 | 	add	fp, #4
3609c     A7 12 62 FC | 	wrlong	arg01, fp
360a0     04 4E 05 F1 | 	add	fp, #4
360a4     A7 14 62 FC | 	wrlong	arg02, fp
360a8     04 4E 85 F1 | 	sub	fp, #4
360ac     A7 16 02 FB | 	rdlong	arg03, fp
360b0     04 16 06 F1 | 	add	arg03, #4
360b4     0B 13 02 FB | 	rdlong	arg01, arg03
360b8     08 4E 05 F1 | 	add	fp, #8
360bc     A7 14 02 F6 | 	mov	arg02, fp
360c0     0C 4E 85 F1 | 	sub	fp, #12
360c4     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
360c8     28 4F 05 F1 | 	add	fp, #296
360cc     A7 FA 61 FC | 	wrlong	result1, fp
360d0     28 4F 85 F1 | 	sub	fp, #296
360d4     00 FA 0D F2 | 	cmp	result1, #0 wz
360d8     14 00 90 AD |  if_e	jmp	#LR__5280
360dc                 | '         return _set_dos_error(r);
360dc     28 4F 05 F1 | 	add	fp, #296
360e0     A7 12 02 FB | 	rdlong	arg01, fp
360e4     28 4F 85 F1 | 	sub	fp, #296
360e8     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1051
360ec     C4 00 90 FD | 	jmp	#LR__5283
360f0                 | LR__5280
360f0     28 4E 05 F1 | 	add	fp, #40
360f4     A7 16 CA FA | 	rdbyte	arg03, fp wz
360f8     28 4E 85 F1 | 	sub	fp, #40
360fc                 | '         return -1;
360fc     01 FA 65 A6 |  if_e	neg	result1, #1
36100     B0 00 90 AD |  if_e	jmp	#LR__5283
36104     08 4E 05 F1 | 	add	fp, #8
36108     A7 12 02 FB | 	rdlong	arg01, fp
3610c     20 4E 05 F1 | 	add	fp, #32
36110     A7 14 02 F6 | 	mov	arg02, fp
36114     28 4E 85 F1 | 	sub	fp, #40
36118     3F 16 06 F6 | 	mov	arg03, #63
3611c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
36120     08 4E 05 F1 | 	add	fp, #8
36124     A7 16 02 FB | 	rdlong	arg03, fp
36128     3F 16 06 F1 | 	add	arg03, #63
3612c     0B 01 48 FC | 	wrbyte	#0, arg03
36130     0C 4E 05 F1 | 	add	fp, #12
36134     A7 16 C2 FA | 	rdbyte	arg03, fp
36138     14 4E 85 F1 | 	sub	fp, #20
3613c     10 16 CE F7 | 	test	arg03, #16 wz
36140     18 00 90 AD |  if_e	jmp	#LR__5281
36144     08 4E 05 F1 | 	add	fp, #8
36148     A7 16 02 FB | 	rdlong	arg03, fp
3614c     08 4E 85 F1 | 	sub	fp, #8
36150     50 16 06 F1 | 	add	arg03, #80
36154     0B 03 48 FC | 	wrbyte	#1, arg03
36158     14 00 90 FD | 	jmp	#LR__5282
3615c                 | LR__5281
3615c     08 4E 05 F1 | 	add	fp, #8
36160     A7 16 02 FB | 	rdlong	arg03, fp
36164     08 4E 85 F1 | 	sub	fp, #8
36168     50 16 06 F1 | 	add	arg03, #80
3616c     0B 01 48 FC | 	wrbyte	#0, arg03
36170                 | LR__5282
36170     08 4E 05 F1 | 	add	fp, #8
36174     A7 16 02 FB | 	rdlong	arg03, fp
36178     04 4E 05 F1 | 	add	fp, #4
3617c     A7 14 02 FB | 	rdlong	arg02, fp
36180     48 16 06 F1 | 	add	arg03, #72
36184     0B 15 62 FC | 	wrlong	arg02, arg03
36188     04 4E 85 F1 | 	sub	fp, #4
3618c     A7 26 02 FB | 	rdlong	local01, fp
36190     08 4E 05 F1 | 	add	fp, #8
36194     A7 12 E2 FA | 	rdword	arg01, fp
36198     02 4E 05 F1 | 	add	fp, #2
3619c     A7 14 E2 FA | 	rdword	arg02, fp
361a0     12 4E 85 F1 | 	sub	fp, #18
361a4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1049
361a8     4C 26 06 F1 | 	add	local01, #76
361ac     13 FB 61 FC | 	wrlong	result1, local01
361b0                 | '         ent->d_type =  (0) ;
361b0                 | '     }
361b0                 | '     ent->d_size = finfo.fsize;
361b0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
361b0                 | '     return 0;
361b0     00 FA 05 F6 | 	mov	result1, #0
361b4                 | LR__5283
361b4     A7 F0 03 F6 | 	mov	ptra, fp
361b8     B2 00 A0 FD | 	call	#popregs_
361bc                 | _fatfs_cc_v_readdir_ret
361bc     2D 00 64 FD | 	ret
361c0                 | 
361c0                 | _fatfs_cc_v_stat
361c0     03 4A 05 F6 | 	mov	COUNT_, #3
361c4     A8 00 A0 FD | 	call	#pushregs_
361c8     30 F1 07 F1 | 	add	ptra, #304
361cc     04 4E 05 F1 | 	add	fp, #4
361d0     A7 12 62 FC | 	wrlong	arg01, fp
361d4     04 4E 05 F1 | 	add	fp, #4
361d8     A7 14 62 FC | 	wrlong	arg02, fp
361dc     08 4E 85 F1 | 	sub	fp, #8
361e0     0A 13 02 F6 | 	mov	arg01, arg02
361e4     00 14 06 F6 | 	mov	arg02, #0
361e8     30 16 06 F6 | 	mov	arg03, #48
361ec     98 00 A0 FD | 	call	#\builtin_bytefill_
361f0     04 4E 05 F1 | 	add	fp, #4
361f4     A7 FA 01 FB | 	rdlong	result1, fp
361f8     04 4E 85 F1 | 	sub	fp, #4
361fc     FD FA C9 FA | 	rdbyte	result1, result1 wz
36200     2C 00 90 AD |  if_e	jmp	#LR__5290
36204     04 4E 05 F1 | 	add	fp, #4
36208     A7 FA 01 FB | 	rdlong	result1, fp
3620c     04 4E 85 F1 | 	sub	fp, #4
36210     FD FA C1 FA | 	rdbyte	result1, result1
36214     2E FA 0D F2 | 	cmp	result1, #46 wz
36218     04 4E 05 A1 |  if_e	add	fp, #4
3621c     A7 26 02 AB |  if_e	rdlong	local01, fp
36220     04 4E 85 A1 |  if_e	sub	fp, #4
36224     01 26 06 A1 |  if_e	add	local01, #1
36228     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
3622c     18 00 90 5D |  if_ne	jmp	#LR__5291
36230                 | LR__5290
36230     18 4E 05 F1 | 	add	fp, #24
36234     A7 20 48 FC | 	wrbyte	#16, fp
36238     0C 4E 85 F1 | 	sub	fp, #12
3623c     A7 00 68 FC | 	wrlong	#0, fp
36240     0C 4E 85 F1 | 	sub	fp, #12
36244     24 00 90 FD | 	jmp	#LR__5292
36248                 | LR__5291
36248     04 4E 05 F1 | 	add	fp, #4
3624c     A7 12 02 FB | 	rdlong	arg01, fp
36250     0C 4E 05 F1 | 	add	fp, #12
36254     A7 14 02 F6 | 	mov	arg02, fp
36258     10 4E 85 F1 | 	sub	fp, #16
3625c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
36260     0C 4E 05 F1 | 	add	fp, #12
36264     A7 FA 61 FC | 	wrlong	result1, fp
36268     0C 4E 85 F1 | 	sub	fp, #12
3626c                 | LR__5292
3626c     0C 4E 05 F1 | 	add	fp, #12
36270     A7 28 0A FB | 	rdlong	local02, fp wz
36274     0C 4E 85 F1 | 	sub	fp, #12
36278     14 00 90 AD |  if_e	jmp	#LR__5293
3627c                 | '         return _set_dos_error(r);
3627c     0C 4E 05 F1 | 	add	fp, #12
36280     A7 12 02 FB | 	rdlong	arg01, fp
36284     0C 4E 85 F1 | 	sub	fp, #12
36288     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1051
3628c     14 01 90 FD | 	jmp	#LR__5294
36290                 | LR__5293
36290     2C 4F 05 F1 | 	add	fp, #300
36294     A7 48 6A FC | 	wrlong	#292, fp
36298     14 4F 85 F1 | 	sub	fp, #276
3629c     A7 2A C2 FA | 	rdbyte	local03, fp
362a0     18 4E 85 F1 | 	sub	fp, #24
362a4     01 2A CE F7 | 	test	local03, #1 wz
362a8     2C 4F 05 A1 |  if_e	add	fp, #300
362ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
362b0     92 2A 46 A5 |  if_e	or	local03, #146
362b4     A7 2A 62 AC |  if_e	wrlong	local03, fp
362b8     2C 4F 85 A1 |  if_e	sub	fp, #300
362bc     18 4E 05 F1 | 	add	fp, #24
362c0     A7 2A C2 FA | 	rdbyte	local03, fp
362c4     18 4E 85 F1 | 	sub	fp, #24
362c8     10 2A CE F7 | 	test	local03, #16 wz
362cc     2C 4F 05 51 |  if_ne	add	fp, #300
362d0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
362d4     08 00 00 5F 
362d8     49 2A 46 55 |  if_ne	or	local03, ##4169
362dc     A7 2A 62 5C |  if_ne	wrlong	local03, fp
362e0     2C 4F 85 51 |  if_ne	sub	fp, #300
362e4     08 4E 05 F1 | 	add	fp, #8
362e8     A7 2A 02 FB | 	rdlong	local03, fp
362ec     24 4F 05 F1 | 	add	fp, #292
362f0     A7 28 02 FB | 	rdlong	local02, fp
362f4     08 2A 06 F1 | 	add	local03, #8
362f8     15 29 62 FC | 	wrlong	local02, local03
362fc     24 4F 85 F1 | 	sub	fp, #292
36300     A7 2A 02 FB | 	rdlong	local03, fp
36304     0C 2A 06 F1 | 	add	local03, #12
36308     15 03 68 FC | 	wrlong	#1, local03
3630c     A7 2A 02 FB | 	rdlong	local03, fp
36310     08 4E 05 F1 | 	add	fp, #8
36314     A7 28 02 FB | 	rdlong	local02, fp
36318     18 2A 06 F1 | 	add	local03, #24
3631c     15 29 62 FC | 	wrlong	local02, local03
36320     08 4E 85 F1 | 	sub	fp, #8
36324     A7 2A 02 FB | 	rdlong	local03, fp
36328     1C 2A 06 F1 | 	add	local03, #28
3632c     01 00 80 FF 
36330     15 01 68 FC | 	wrlong	##512, local03
36334     A7 28 02 FB | 	rdlong	local02, fp
36338     14 2B 02 F6 | 	mov	local03, local02
3633c     18 28 06 F1 | 	add	local02, #24
36340     14 29 02 FB | 	rdlong	local02, local02
36344     FF 29 06 F1 | 	add	local02, #511
36348     14 29 52 F6 | 	abs	local02, local02 wc
3634c     09 28 46 F0 | 	shr	local02, #9
36350     14 29 82 F6 | 	negc	local02, local02
36354     20 2A 06 F1 | 	add	local03, #32
36358     15 29 62 FC | 	wrlong	local02, local03
3635c     A7 28 02 FB | 	rdlong	local02, fp
36360     14 2B 02 F6 | 	mov	local03, local02
36364     14 27 02 F6 | 	mov	local01, local02
36368     0C 4E 05 F1 | 	add	fp, #12
3636c     A7 12 E2 FA | 	rdword	arg01, fp
36370     02 4E 05 F1 | 	add	fp, #2
36374     A7 14 E2 FA | 	rdword	arg02, fp
36378     16 4E 85 F1 | 	sub	fp, #22
3637c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1049
36380     2C 26 06 F1 | 	add	local01, #44
36384     13 FB 61 FC | 	wrlong	result1, local01
36388     28 28 06 F1 | 	add	local02, #40
3638c     14 FB 61 FC | 	wrlong	result1, local02
36390     24 2A 06 F1 | 	add	local03, #36
36394     15 FB 61 FC | 	wrlong	result1, local03
36398                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
36398                 | '     }
36398                 | '     buf->st_mode = mode;
36398                 | '     buf->st_nlink = 1;
36398                 | '     buf->st_size = finfo.fsize;
36398                 | '     buf->st_blksize = 512;
36398                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
36398                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
36398                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36398                 | '     return r;
36398     0C 4E 05 F1 | 	add	fp, #12
3639c     A7 FA 01 FB | 	rdlong	result1, fp
363a0     0C 4E 85 F1 | 	sub	fp, #12
363a4                 | LR__5294
363a4     A7 F0 03 F6 | 	mov	ptra, fp
363a8     B2 00 A0 FD | 	call	#popregs_
363ac                 | _fatfs_cc_v_stat_ret
363ac     2D 00 64 FD | 	ret
363b0                 | 
363b0                 | _fatfs_cc_v_read
363b0     00 4A 05 F6 | 	mov	COUNT_, #0
363b4     A8 00 A0 FD | 	call	#pushregs_
363b8     1C F0 07 F1 | 	add	ptra, #28
363bc     04 4E 05 F1 | 	add	fp, #4
363c0     A7 12 62 FC | 	wrlong	arg01, fp
363c4     04 4E 05 F1 | 	add	fp, #4
363c8     A7 14 62 FC | 	wrlong	arg02, fp
363cc     04 4E 05 F1 | 	add	fp, #4
363d0     A7 16 62 FC | 	wrlong	arg03, fp
363d4     08 4E 85 F1 | 	sub	fp, #8
363d8     A7 12 02 FB | 	rdlong	arg01, fp
363dc     09 13 0A FB | 	rdlong	arg01, arg01 wz
363e0     0C 4E 05 F1 | 	add	fp, #12
363e4     A7 12 62 FC | 	wrlong	arg01, fp
363e8     10 4E 85 F1 | 	sub	fp, #16
363ec                 | '         return _seterror( 5 );
363ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
363f0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
363f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
363f8     01 FA 65 A6 |  if_e	neg	result1, #1
363fc     B8 00 90 AD |  if_e	jmp	#LR__5302
36400     10 4E 05 F1 | 	add	fp, #16
36404     A7 12 02 FB | 	rdlong	arg01, fp
36408     02 00 00 FF 
3640c     14 12 06 F1 | 	add	arg01, ##1044
36410     08 4E 85 F1 | 	sub	fp, #8
36414     A7 14 02 FB | 	rdlong	arg02, fp
36418     04 4E 05 F1 | 	add	fp, #4
3641c     A7 16 02 FB | 	rdlong	arg03, fp
36420     0C 4E 05 F1 | 	add	fp, #12
36424     A7 18 02 F6 | 	mov	arg04, fp
36428     18 4E 85 F1 | 	sub	fp, #24
3642c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
36430     14 4E 05 F1 | 	add	fp, #20
36434     A7 FA 61 FC | 	wrlong	result1, fp
36438     14 4E 85 F1 | 	sub	fp, #20
3643c     00 FA 0D F2 | 	cmp	result1, #0 wz
36440     34 00 90 AD |  if_e	jmp	#LR__5300
36444     04 4E 05 F1 | 	add	fp, #4
36448     A7 18 02 FB | 	rdlong	arg04, fp
3644c     0C 17 02 F6 | 	mov	arg03, arg04
36450     08 18 06 F1 | 	add	arg04, #8
36454     0C 19 02 FB | 	rdlong	arg04, arg04
36458     20 18 46 F5 | 	or	arg04, #32
3645c     08 16 06 F1 | 	add	arg03, #8
36460     0B 19 62 FC | 	wrlong	arg04, arg03
36464                 | '         fil->state |=  (0x20) ;
36464                 | '         return _set_dos_error(r);
36464     10 4E 05 F1 | 	add	fp, #16
36468     A7 12 02 FB | 	rdlong	arg01, fp
3646c     14 4E 85 F1 | 	sub	fp, #20
36470     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1051
36474     40 00 90 FD | 	jmp	#LR__5302
36478                 | LR__5300
36478     18 4E 05 F1 | 	add	fp, #24
3647c     A7 FA 09 FB | 	rdlong	result1, fp wz
36480     18 4E 85 F1 | 	sub	fp, #24
36484     24 00 90 5D |  if_ne	jmp	#LR__5301
36488     04 4E 05 F1 | 	add	fp, #4
3648c     A7 FA 01 FB | 	rdlong	result1, fp
36490     FD 18 02 F6 | 	mov	arg04, result1
36494     04 4E 85 F1 | 	sub	fp, #4
36498     08 FA 05 F1 | 	add	result1, #8
3649c     FD FA 01 FB | 	rdlong	result1, result1
364a0     10 FA 45 F5 | 	or	result1, #16
364a4     08 18 06 F1 | 	add	arg04, #8
364a8     0C FB 61 FC | 	wrlong	result1, arg04
364ac                 | LR__5301
364ac                 | '         fil->state |=  (0x10) ;
364ac                 | '     }
364ac                 | '     return x;
364ac     18 4E 05 F1 | 	add	fp, #24
364b0     A7 FA 01 FB | 	rdlong	result1, fp
364b4     18 4E 85 F1 | 	sub	fp, #24
364b8                 | LR__5302
364b8     A7 F0 03 F6 | 	mov	ptra, fp
364bc     B2 00 A0 FD | 	call	#popregs_
364c0                 | _fatfs_cc_v_read_ret
364c0     2D 00 64 FD | 	ret
364c4                 | 
364c4                 | _fatfs_cc_v_write
364c4     00 4A 05 F6 | 	mov	COUNT_, #0
364c8     A8 00 A0 FD | 	call	#pushregs_
364cc     1C F0 07 F1 | 	add	ptra, #28
364d0     04 4E 05 F1 | 	add	fp, #4
364d4     A7 12 62 FC | 	wrlong	arg01, fp
364d8     04 4E 05 F1 | 	add	fp, #4
364dc     A7 14 62 FC | 	wrlong	arg02, fp
364e0     04 4E 05 F1 | 	add	fp, #4
364e4     A7 16 62 FC | 	wrlong	arg03, fp
364e8     08 4E 85 F1 | 	sub	fp, #8
364ec     A7 12 02 FB | 	rdlong	arg01, fp
364f0     09 13 0A FB | 	rdlong	arg01, arg01 wz
364f4     0C 4E 05 F1 | 	add	fp, #12
364f8     A7 12 62 FC | 	wrlong	arg01, fp
364fc     10 4E 85 F1 | 	sub	fp, #16
36500                 | '         return _seterror( 5 );
36500     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
36504     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
36508     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3650c     01 FA 65 A6 |  if_e	neg	result1, #1
36510     84 00 90 AD |  if_e	jmp	#LR__5311
36514     10 4E 05 F1 | 	add	fp, #16
36518     A7 12 02 FB | 	rdlong	arg01, fp
3651c     02 00 00 FF 
36520     14 12 06 F1 | 	add	arg01, ##1044
36524     08 4E 85 F1 | 	sub	fp, #8
36528     A7 14 02 FB | 	rdlong	arg02, fp
3652c     04 4E 05 F1 | 	add	fp, #4
36530     A7 16 02 FB | 	rdlong	arg03, fp
36534     0C 4E 05 F1 | 	add	fp, #12
36538     A7 18 02 F6 | 	mov	arg04, fp
3653c     18 4E 85 F1 | 	sub	fp, #24
36540     4C D4 BF FD | 	call	#_fatfs_cc_f_write
36544     14 4E 05 F1 | 	add	fp, #20
36548     A7 FA 61 FC | 	wrlong	result1, fp
3654c     14 4E 85 F1 | 	sub	fp, #20
36550     00 FA 0D F2 | 	cmp	result1, #0 wz
36554     34 00 90 AD |  if_e	jmp	#LR__5310
36558     04 4E 05 F1 | 	add	fp, #4
3655c     A7 18 02 FB | 	rdlong	arg04, fp
36560     0C 17 02 F6 | 	mov	arg03, arg04
36564     08 18 06 F1 | 	add	arg04, #8
36568     0C 19 02 FB | 	rdlong	arg04, arg04
3656c     20 18 46 F5 | 	or	arg04, #32
36570     08 16 06 F1 | 	add	arg03, #8
36574     0B 19 62 FC | 	wrlong	arg04, arg03
36578                 | '         fil->state |=  (0x20) ;
36578                 | '         return _set_dos_error(r);
36578     10 4E 05 F1 | 	add	fp, #16
3657c     A7 12 02 FB | 	rdlong	arg01, fp
36580     14 4E 85 F1 | 	sub	fp, #20
36584     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1051
36588     0C 00 90 FD | 	jmp	#LR__5311
3658c                 | LR__5310
3658c                 | '     }
3658c                 | '     return x;
3658c     18 4E 05 F1 | 	add	fp, #24
36590     A7 FA 01 FB | 	rdlong	result1, fp
36594     18 4E 85 F1 | 	sub	fp, #24
36598                 | LR__5311
36598     A7 F0 03 F6 | 	mov	ptra, fp
3659c     B2 00 A0 FD | 	call	#popregs_
365a0                 | _fatfs_cc_v_write_ret
365a0     2D 00 64 FD | 	ret
365a4                 | 
365a4                 | _fatfs_cc_v_lseek
365a4     04 4A 05 F6 | 	mov	COUNT_, #4
365a8     A8 00 A0 FD | 	call	#pushregs_
365ac     0A 27 02 F6 | 	mov	local01, arg02
365b0     0B 29 02 F6 | 	mov	local02, arg03
365b4     09 2B 02 FB | 	rdlong	local03, arg01
365b8     02 00 00 FF 
365bc     14 2A 0E F1 | 	add	local03, ##1044 wz
365c0                 | '         return _seterror( 5 );
365c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
365c4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
365c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
365cc     01 FA 65 A6 |  if_e	neg	result1, #1
365d0     4C 00 90 AD |  if_e	jmp	#LR__5322
365d4     00 28 0E F2 | 	cmp	local02, #0 wz
365d8     24 00 90 AD |  if_e	jmp	#LR__5320
365dc     01 28 0E F2 | 	cmp	local02, #1 wz
365e0     14 2A 06 A1 |  if_e	add	local03, #20
365e4     15 2D 02 AB |  if_e	rdlong	local04, local03
365e8     14 2A 86 A1 |  if_e	sub	local03, #20
365ec     16 27 02 A1 |  if_e	add	local01, local04
365f0     0C 2A 06 51 |  if_ne	add	local03, #12
365f4     15 2D 02 5B |  if_ne	rdlong	local04, local03
365f8     0C 2A 86 51 |  if_ne	sub	local03, #12
365fc     16 27 02 51 |  if_ne	add	local01, local04
36600                 | LR__5320
36600     13 15 02 F6 | 	mov	arg02, local01
36604     15 13 02 F6 | 	mov	arg01, local03
36608     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
3660c     FD 12 0A F6 | 	mov	arg01, result1 wz
36610     08 00 90 AD |  if_e	jmp	#LR__5321
36614                 | '         return _set_dos_error(result);
36614     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1051
36618     04 00 90 FD | 	jmp	#LR__5322
3661c                 | LR__5321
3661c                 | '     }
3661c                 | '     return offset;
3661c     13 FB 01 F6 | 	mov	result1, local01
36620                 | LR__5322
36620     A7 F0 03 F6 | 	mov	ptra, fp
36624     B2 00 A0 FD | 	call	#popregs_
36628                 | _fatfs_cc_v_lseek_ret
36628     2D 00 64 FD | 	ret
3662c                 | 
3662c                 | _fatfs_cc_v_ioctl
3662c                 | ' {
3662c                 | '     return _seterror( 10 );
3662c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
36630     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
36634     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
36638     01 FA 65 F6 | 	neg	result1, #1
3663c                 | _fatfs_cc_v_ioctl_ret
3663c     2D 00 64 FD | 	ret
36640                 | 
36640                 | _fatfs_cc_v_mkdir
36640     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
36644     FD 12 02 F6 | 	mov	arg01, result1
36648                 | ' 
36648                 | '     r = f_mkdir(name);
36648                 | '     return _set_dos_error(r);
36648     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1051
3664c                 | _fatfs_cc_v_mkdir_ret
3664c     2D 00 64 FD | 	ret
36650                 | 
36650                 | _fatfs_cc_v_remove
36650     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
36654     FD 12 02 F6 | 	mov	arg01, result1
36658                 | ' 
36658                 | '     r = f_unlink(name);
36658                 | '     return _set_dos_error(r);
36658     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1051
3665c                 | _fatfs_cc_v_remove_ret
3665c     2D 00 64 FD | 	ret
36660                 | 
36660                 | _fatfs_cc_v_rmdir
36660     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
36664     FD 12 02 F6 | 	mov	arg01, result1
36668                 | ' 
36668                 | '     r = f_unlink(name);
36668                 | '     return _set_dos_error(r);
36668     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1051
3666c                 | _fatfs_cc_v_rmdir_ret
3666c     2D 00 64 FD | 	ret
36670                 | 
36670                 | _fatfs_cc_v_rename
36670     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
36674     FD 12 02 F6 | 	mov	arg01, result1
36678                 | '     return _set_dos_error(r);
36678     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1051
3667c                 | _fatfs_cc_v_rename_ret
3667c     2D 00 64 FD | 	ret
36680                 | 
36680                 | _fatfs_cc_v_open
36680     07 4A 05 F6 | 	mov	COUNT_, #7
36684     A8 00 A0 FD | 	call	#pushregs_
36688     09 27 02 F6 | 	mov	local01, arg01
3668c     0A 29 02 F6 | 	mov	local02, arg02
36690     0B 2B 02 F6 | 	mov	local03, arg03
36694     03 00 00 FF 
36698     3C 12 06 F6 | 	mov	arg01, ##1596
3669c                 | '     return _gc_alloc(size);
3669c     10 14 06 F6 | 	mov	arg02, #16
366a0     90 56 BF FD | 	call	#__system___gc_doalloc
366a4     FD 2C 0A F6 | 	mov	local04, result1 wz
366a8                 | '       return _seterror( 7 );
366a8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
366ac     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
366b0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
366b4     01 FA 65 A6 |  if_e	neg	result1, #1
366b8     98 00 90 AD |  if_e	jmp	#LR__5336
366bc     16 13 02 F6 | 	mov	arg01, local04
366c0     00 14 06 F6 | 	mov	arg02, #0
366c4     03 00 00 FF 
366c8     3C 16 06 F6 | 	mov	arg03, ##1596
366cc     98 00 A0 FD | 	call	#\builtin_bytefill_
366d0                 | '   switch (flags & 3) {
366d0     15 2F 02 F6 | 	mov	local05, local03
366d4     03 2E 0E F5 | 	and	local05, #3 wz
366d8     0C 00 90 AD |  if_e	jmp	#LR__5330
366dc     01 2E 0E F2 | 	cmp	local05, #1 wz
366e0     0C 00 90 AD |  if_e	jmp	#LR__5331
366e4     10 00 90 FD | 	jmp	#LR__5332
366e8                 | LR__5330
366e8     01 30 06 F6 | 	mov	local06, #1
366ec                 | '       fs_flags =  0x01 ;
366ec                 | '       break;
366ec     0C 00 90 FD | 	jmp	#LR__5333
366f0                 | LR__5331
366f0     02 30 06 F6 | 	mov	local06, #2
366f4                 | '       fs_flags =  0x02 ;
366f4                 | '       break;
366f4     04 00 90 FD | 	jmp	#LR__5333
366f8                 | LR__5332
366f8     03 30 06 F6 | 	mov	local06, #3
366fc                 | '       fs_flags =  0x01  |  0x02 ;
366fc                 | '       break;
366fc                 | LR__5333
366fc     08 2A CE F7 | 	test	local03, #8 wz
36700     18 30 46 55 |  if_ne	or	local06, #24
36704     08 00 90 5D |  if_ne	jmp	#LR__5334
36708     20 2A CE F7 | 	test	local03, #32 wz
3670c     30 30 46 55 |  if_ne	or	local06, #48
36710                 | LR__5334
36710     02 00 00 FF 
36714     14 2C 06 F1 | 	add	local04, ##1044
36718     16 13 02 F6 | 	mov	arg01, local04
3671c     02 00 00 FF 
36720     14 2C 86 F1 | 	sub	local04, ##1044
36724     14 15 02 F6 | 	mov	arg02, local02
36728     18 17 02 F6 | 	mov	arg03, local06
3672c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
36730     FD 32 0A F6 | 	mov	local07, result1 wz
36734     14 00 90 AD |  if_e	jmp	#LR__5335
36738     16 13 02 F6 | 	mov	arg01, local04
3673c                 | '     return _gc_free(ptr);
3673c     00 57 BF FD | 	call	#__system___gc_free
36740                 | '     free(f);
36740                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36740                 | '     return _set_dos_error(r);
36740     19 13 02 F6 | 	mov	arg01, local07
36744     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1051
36748     08 00 90 FD | 	jmp	#LR__5336
3674c                 | LR__5335
3674c     13 2D 62 FC | 	wrlong	local04, local01
36750                 | '   }
36750                 | '   fil->vfsdata = f;
36750                 | '   return 0;
36750     00 FA 05 F6 | 	mov	result1, #0
36754                 | LR__5336
36754     A7 F0 03 F6 | 	mov	ptra, fp
36758     B2 00 A0 FD | 	call	#popregs_
3675c                 | _fatfs_cc_v_open_ret
3675c     2D 00 64 FD | 	ret
36760                 | 
36760                 | _fatfs_cc_v_flush
36760     09 13 02 FB | 	rdlong	arg01, arg01
36764     02 00 00 FF 
36768     14 12 0E F1 | 	add	arg01, ##1044 wz
3676c                 | '         return _seterror( 5 );
3676c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
36770     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
36774     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
36778     01 FA 65 A6 |  if_e	neg	result1, #1
3677c     0C 00 90 AD |  if_e	jmp	#LR__5340
36780     00 DA BF FD | 	call	#_fatfs_cc_f_sync
36784     FD 12 02 F6 | 	mov	arg01, result1
36788                 | '     }
36788                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36788                 | '     result = f_sync(f);
36788                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
36788                 | '     return _set_dos_error(result);
36788     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1051
3678c                 | LR__5340
3678c                 | _fatfs_cc_v_flush_ret
3678c     2D 00 64 FD | 	ret
36790                 | 
36790                 | _fatfs_cc_v_init
36790                 | ' {
36790                 | '     return 0;
36790     00 FA 05 F6 | 	mov	result1, #0
36794                 | _fatfs_cc_v_init_ret
36794     2D 00 64 FD | 	ret
36798                 | 
36798                 | _fatfs_cc_v_deinit
36798     BB 01 00 FF 
3679c     08 15 06 F6 | 	mov	arg02, ##@LR__5536
367a0     00 12 06 F6 | 	mov	arg01, #0
367a4     00 16 06 F6 | 	mov	arg03, #0
367a8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
367ac     01 00 00 FF 
367b0     08 E4 05 F1 | 	add	objptr, ##520
367b4     F2 12 02 FB | 	rdlong	arg01, objptr
367b8     04 E4 05 F1 | 	add	objptr, #4
367bc     F2 14 02 FB | 	rdlong	arg02, objptr
367c0     01 00 00 FF 
367c4     0C E4 85 F1 | 	sub	objptr, ##524
367c8     E0 3D BF FD | 	call	#__system___freepins
367cc                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/fatfs.cc"
367cc                 | '     _freepins(f_pinmask);
367cc                 | '     return 0;
367cc     00 FA 05 F6 | 	mov	result1, #0
367d0                 | _fatfs_cc_v_deinit_ret
367d0     2D 00 64 FD | 	ret
367d4                 | 
367d4                 | _fatfs_cc_get_vfs
367d4     01 4A 05 F6 | 	mov	COUNT_, #1
367d8     A8 00 A0 FD | 	call	#pushregs_
367dc     09 27 02 F6 | 	mov	local01, arg01
367e0     50 12 06 F6 | 	mov	arg01, #80
367e4     1C 55 BF FD | 	call	#__system___gc_alloc_managed
367e8     FD 12 02 F6 | 	mov	arg01, result1
367ec     F2 FA 01 F6 | 	mov	result1, objptr
367f0     00 C0 05 FF 
367f4     00 FA 45 F5 | 	or	result1, ##192937984
367f8     09 FB 61 FC | 	wrlong	result1, arg01
367fc     F2 FA 01 F6 | 	mov	result1, objptr
36800     00 C8 05 FF 
36804     00 FA 45 F5 | 	or	result1, ##193986560
36808     04 12 06 F1 | 	add	arg01, #4
3680c     09 FB 61 FC | 	wrlong	result1, arg01
36810     F2 FA 01 F6 | 	mov	result1, objptr
36814     00 D0 05 FF 
36818     00 FA 45 F5 | 	or	result1, ##195035136
3681c     04 12 06 F1 | 	add	arg01, #4
36820     09 FB 61 FC | 	wrlong	result1, arg01
36824     F2 FA 01 F6 | 	mov	result1, objptr
36828     00 D8 05 FF 
3682c     00 FA 45 F5 | 	or	result1, ##196083712
36830     04 12 06 F1 | 	add	arg01, #4
36834     09 FB 61 FC | 	wrlong	result1, arg01
36838     F2 FA 01 F6 | 	mov	result1, objptr
3683c     00 E0 05 FF 
36840     00 FA 45 F5 | 	or	result1, ##197132288
36844     04 12 06 F1 | 	add	arg01, #4
36848     09 FB 61 FC | 	wrlong	result1, arg01
3684c     04 12 06 F1 | 	add	arg01, #4
36850     09 01 68 FC | 	wrlong	#0, arg01
36854     04 12 06 F1 | 	add	arg01, #4
36858     09 27 62 FC | 	wrlong	local01, arg01
3685c     04 12 06 F1 | 	add	arg01, #4
36860     09 01 68 FC | 	wrlong	#0, arg01
36864     F2 FA 01 F6 | 	mov	result1, objptr
36868     00 E8 05 FF 
3686c     00 FA 45 F5 | 	or	result1, ##198180864
36870     04 12 06 F1 | 	add	arg01, #4
36874     09 FB 61 FC | 	wrlong	result1, arg01
36878     F2 FA 01 F6 | 	mov	result1, objptr
3687c     00 F0 05 FF 
36880     00 FA 45 F5 | 	or	result1, ##199229440
36884     04 12 06 F1 | 	add	arg01, #4
36888     09 FB 61 FC | 	wrlong	result1, arg01
3688c     F2 FA 01 F6 | 	mov	result1, objptr
36890     00 F8 05 FF 
36894     00 FA 45 F5 | 	or	result1, ##200278016
36898     04 12 06 F1 | 	add	arg01, #4
3689c     09 FB 61 FC | 	wrlong	result1, arg01
368a0     F2 FA 01 F6 | 	mov	result1, objptr
368a4     3A FA 25 F4 | 	bith	result1, #58
368a8     04 12 06 F1 | 	add	arg01, #4
368ac     09 FB 61 FC | 	wrlong	result1, arg01
368b0     F2 FA 01 F6 | 	mov	result1, objptr
368b4     00 08 06 FF 
368b8     00 FA 45 F5 | 	or	result1, ##202375168
368bc     04 12 06 F1 | 	add	arg01, #4
368c0     09 FB 61 FC | 	wrlong	result1, arg01
368c4     F2 FA 01 F6 | 	mov	result1, objptr
368c8     00 10 06 FF 
368cc     00 FA 45 F5 | 	or	result1, ##203423744
368d0     04 12 06 F1 | 	add	arg01, #4
368d4     09 FB 61 FC | 	wrlong	result1, arg01
368d8     F2 FA 01 F6 | 	mov	result1, objptr
368dc     00 18 06 FF 
368e0     00 FA 45 F5 | 	or	result1, ##204472320
368e4     04 12 06 F1 | 	add	arg01, #4
368e8     09 FB 61 FC | 	wrlong	result1, arg01
368ec     F2 FA 01 F6 | 	mov	result1, objptr
368f0     00 20 06 FF 
368f4     00 FA 45 F5 | 	or	result1, ##205520896
368f8     04 12 06 F1 | 	add	arg01, #4
368fc     09 FB 61 FC | 	wrlong	result1, arg01
36900     F2 FA 01 F6 | 	mov	result1, objptr
36904     00 28 06 FF 
36908     00 FA 45 F5 | 	or	result1, ##206569472
3690c     04 12 06 F1 | 	add	arg01, #4
36910     09 FB 61 FC | 	wrlong	result1, arg01
36914     F2 FA 01 F6 | 	mov	result1, objptr
36918     00 30 06 FF 
3691c     00 FA 45 F5 | 	or	result1, ##207618048
36920     04 12 06 F1 | 	add	arg01, #4
36924     09 FB 61 FC | 	wrlong	result1, arg01
36928     F2 FA 01 F6 | 	mov	result1, objptr
3692c     00 38 06 FF 
36930     00 FA 45 F5 | 	or	result1, ##208666624
36934     04 12 06 F1 | 	add	arg01, #4
36938     09 FB 61 FC | 	wrlong	result1, arg01
3693c     F2 FA 01 F6 | 	mov	result1, objptr
36940     00 40 06 FF 
36944     00 FA 45 F5 | 	or	result1, ##209715200
36948     04 12 06 F1 | 	add	arg01, #4
3694c     09 FB 61 FC | 	wrlong	result1, arg01
36950     4C 12 86 F1 | 	sub	arg01, #76
36954                 | ' 
36954                 | '     v->close = &v_close;
36954                 | '     v->read = &v_read;
36954                 | '     v->write = &v_write;
36954                 | '     v->lseek = &v_lseek;
36954                 | '     v->ioctl = &v_ioctl;
36954                 | '     v->flush = 0;
36954                 | '     v->vfs_data = ptr;
36954                 | '     v->reserved = 0;
36954                 | ' 
36954                 | '     v->open = &v_open;
36954                 | '     v->creat = &v_creat;
36954                 | '     v->opendir = &v_opendir;
36954                 | '     v->closedir = &v_closedir;
36954                 | '     v->readdir = &v_readdir;
36954                 | '     v->stat = &v_stat;
36954                 | ' 
36954                 | '     v->mkdir = &v_mkdir;
36954                 | '     v->rmdir = &v_rmdir;
36954                 | ' 
36954                 | '     v->remove = &v_remove;
36954                 | '     v->rename = &v_rename;
36954                 | ' 
36954                 | '     v->init = &v_init;
36954                 | '     v->deinit = &v_deinit;
36954                 | ' 
36954                 | '     return v;
36954     09 FB 01 F6 | 	mov	result1, arg01
36958     A7 F0 03 F6 | 	mov	ptra, fp
3695c     B2 00 A0 FD | 	call	#popregs_
36960                 | _fatfs_cc_get_vfs_ret
36960     2D 00 64 FD | 	ret
36964                 | 
36964                 | _fatfs_cc_xmit_mmc_1202
36964     01 00 00 FF 
36968     10 E4 05 F1 | 	add	objptr, ##528
3696c     F2 00 02 FB | 	rdlong	_var01, objptr
36970     08 E4 05 F1 | 	add	objptr, #8
36974     F2 02 02 FB | 	rdlong	_var02, objptr
36978     01 00 00 FF 
3697c     18 E4 85 F1 | 	sub	objptr, ##536
36980     40 02 62 FD | 	dirl	_var02
36984     28 02 64 FD | 	setq	#1
36988     09 05 02 FB | 	rdlong	_var03, arg01
3698c     69 04 62 FD | 	rev	_var03
36990     1B 04 FE F9 | 	movbyts	_var03, #27
36994     01 05 22 FC | 	wypin	_var03, _var02
36998     0A 05 02 F6 | 	mov	_var03, arg02
3699c     02 14 4E F0 | 	shr	arg02, #2 wz
369a0     03 04 66 F0 | 	shl	_var03, #3
369a4     00 05 22 FC | 	wypin	_var03, _var01
369a8     41 02 62 FD | 	dirh	_var02
369ac     08 12 06 F1 | 	add	arg01, #8
369b0     69 06 62 FD | 	rev	_var04
369b4     1B 06 FE F9 | 	movbyts	_var04, #27
369b8                 | LR__5350
369b8     01 07 22 5C |  if_ne	wypin	_var04, _var02
369bc     09 07 02 5B |  if_ne	rdlong	_var04, arg01
369c0     04 12 06 51 |  if_ne	add	arg01, #4
369c4     69 06 62 5D |  if_ne	rev	_var04
369c8     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
369cc                 | LR__5351
369cc     40 02 72 5D |  if_ne	testp	_var02 wc
369d0     F8 FF 9F 1D |  if_a	jmp	#LR__5351
369d4     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5350
369d8                 | LR__5352
369d8     40 00 72 FD | 	testp	_var01 wc
369dc     F8 FF 9F 3D |  if_ae	jmp	#LR__5352
369e0     40 02 62 FD | 	dirl	_var02
369e4     FF FF FF FF 
369e8     01 FF 2B FC | 	wypin	##-1, _var02
369ec     41 02 62 FD | 	dirh	_var02
369f0                 | _fatfs_cc_xmit_mmc_1202_ret
369f0     2D 00 64 FD | 	ret
369f4                 | 
369f4                 | _fatfs_cc_rcvr_mmc_1209
369f4     01 00 00 FF 
369f8     10 E4 05 F1 | 	add	objptr, ##528
369fc     F2 00 02 FB | 	rdlong	_var01, objptr
36a00     0C E4 05 F1 | 	add	objptr, #12
36a04     F2 02 02 FB | 	rdlong	_var02, objptr
36a08     01 00 00 FF 
36a0c     1C E4 85 F1 | 	sub	objptr, ##540
36a10     01 03 08 FC | 	akpin	_var02
36a14     0A 05 0A F6 | 	mov	_var03, arg02 wz
36a18     02 04 4E F0 | 	shr	_var03, #2 wz
36a1c     30 00 90 AD |  if_e	jmp	#LR__5362
36a20     02 07 02 F6 | 	mov	_var04, _var03
36a24     05 06 66 F0 | 	shl	_var04, #5
36a28     00 07 22 FC | 	wypin	_var04, _var01
36a2c     01 7F 18 FC | 	wxpin	#63, _var02
36a30                 | LR__5360
36a30                 | LR__5361
36a30     40 02 72 FD | 	testp	_var02 wc
36a34     F8 FF 9F 3D |  if_ae	jmp	#LR__5361
36a38     01 07 8A FA | 	rdpin	_var04, _var02
36a3c     69 06 62 FD | 	rev	_var04
36a40     1B 06 FE F9 | 	movbyts	_var04, #27
36a44     09 07 62 FC | 	wrlong	_var04, arg01
36a48     04 12 06 F1 | 	add	arg01, #4
36a4c     F8 05 6E FB | 	djnz	_var03, #LR__5360
36a50                 | LR__5362
36a50     03 14 0E F5 | 	and	arg02, #3 wz
36a54     24 00 90 AD |  if_e	jmp	#LR__5365
36a58     01 4F 18 FC | 	wxpin	#39, _var02
36a5c                 | LR__5363
36a5c     00 11 28 FC | 	wypin	#8, _var01
36a60                 | LR__5364
36a60     40 02 72 FD | 	testp	_var02 wc
36a64     F8 FF 9F 3D |  if_ae	jmp	#LR__5364
36a68     01 07 8A FA | 	rdpin	_var04, _var02
36a6c     69 06 62 FD | 	rev	_var04
36a70     09 07 42 FC | 	wrbyte	_var04, arg01
36a74     01 12 06 F1 | 	add	arg01, #1
36a78     F8 15 6E FB | 	djnz	arg02, #LR__5363
36a7c                 | LR__5365
36a7c                 | _fatfs_cc_rcvr_mmc_1209_ret
36a7c     2D 00 64 FD | 	ret
36a80                 | 
36a80                 | _fatfs_cc_wait_ready_1213
36a80     01 4A 05 F6 | 	mov	COUNT_, #1
36a84     A8 00 A0 FD | 	call	#pushregs_
36a88     10 F0 07 F1 | 	add	ptra, #16
36a8c     1A FA 61 FD | 	getct	result1
36a90     08 4E 05 F1 | 	add	fp, #8
36a94     A7 FA 61 FC | 	wrlong	result1, fp
36a98     14 26 06 FB | 	rdlong	local01, #20
36a9c     01 26 46 F0 | 	shr	local01, #1
36aa0     04 4E 05 F1 | 	add	fp, #4
36aa4     A7 26 62 FC | 	wrlong	local01, fp
36aa8     0C 4E 85 F1 | 	sub	fp, #12
36aac                 | ' {
36aac                 | ' 	BYTE d;
36aac                 | ' 	UINT tmr, tmout;
36aac                 | ' 
36aac                 | ' 	tmr = _cnt();
36aac                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
36aac                 | ' 	for(;;) {
36aac                 | LR__5370
36aac     04 4E 05 F1 | 	add	fp, #4
36ab0     A7 12 02 F6 | 	mov	arg01, fp
36ab4     04 4E 85 F1 | 	sub	fp, #4
36ab8     01 14 06 F6 | 	mov	arg02, #1
36abc     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1209
36ac0     04 4E 05 F1 | 	add	fp, #4
36ac4     A7 26 C2 FA | 	rdbyte	local01, fp
36ac8     04 4E 85 F1 | 	sub	fp, #4
36acc     FF 26 0E F2 | 	cmp	local01, #255 wz
36ad0     01 FA 05 A6 |  if_e	mov	result1, #1
36ad4     28 00 90 AD |  if_e	jmp	#LR__5371
36ad8     1A FA 61 FD | 	getct	result1
36adc     08 4E 05 F1 | 	add	fp, #8
36ae0     A7 26 02 FB | 	rdlong	local01, fp
36ae4     13 FB 81 F1 | 	sub	result1, local01
36ae8     04 4E 05 F1 | 	add	fp, #4
36aec     A7 26 02 FB | 	rdlong	local01, fp
36af0     0C 4E 85 F1 | 	sub	fp, #12
36af4     13 FB 11 F2 | 	cmp	result1, local01 wc
36af8     00 FA 05 36 |  if_ae	mov	result1, #0
36afc     AC FF 9F CD |  if_b	jmp	#LR__5370
36b00                 | LR__5371
36b00     A7 F0 03 F6 | 	mov	ptra, fp
36b04     B2 00 A0 FD | 	call	#popregs_
36b08                 | _fatfs_cc_wait_ready_1213_ret
36b08     2D 00 64 FD | 	ret
36b0c                 | 
36b0c                 | _fatfs_cc_deselect_1219
36b0c     00 4A 05 F6 | 	mov	COUNT_, #0
36b10     A8 00 A0 FD | 	call	#pushregs_
36b14     14 F0 07 F1 | 	add	ptra, #20
36b18     01 00 00 FF 
36b1c     14 E4 05 F1 | 	add	objptr, ##532
36b20     F2 14 02 FB | 	rdlong	arg02, objptr
36b24     04 4E 05 F1 | 	add	fp, #4
36b28     A7 14 62 FC | 	wrlong	arg02, fp
36b2c     04 E4 85 F1 | 	sub	objptr, #4
36b30     F2 14 02 FB | 	rdlong	arg02, objptr
36b34     04 4E 05 F1 | 	add	fp, #4
36b38     A7 14 62 FC | 	wrlong	arg02, fp
36b3c     08 E4 05 F1 | 	add	objptr, #8
36b40     F2 14 02 FB | 	rdlong	arg02, objptr
36b44     04 4E 05 F1 | 	add	fp, #4
36b48     A7 14 62 FC | 	wrlong	arg02, fp
36b4c     04 E4 05 F1 | 	add	objptr, #4
36b50     F2 14 02 FB | 	rdlong	arg02, objptr
36b54     01 00 00 FF 
36b58     1C E4 85 F1 | 	sub	objptr, ##540
36b5c     04 4E 05 F1 | 	add	fp, #4
36b60     A7 14 62 FC | 	wrlong	arg02, fp
36b64     0C 4E 85 F1 | 	sub	fp, #12
36b68     A7 12 02 FB | 	rdlong	arg01, fp
36b6c     04 4E 85 F1 | 	sub	fp, #4
36b70     59 12 62 FD | 	drvh	arg01
36b74     1F 20 64 FD | 	waitx	#16
36b78     A7 12 02 F6 | 	mov	arg01, fp
36b7c     01 14 06 F6 | 	mov	arg02, #1
36b80     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1209
36b84     A7 F0 03 F6 | 	mov	ptra, fp
36b88     B2 00 A0 FD | 	call	#popregs_
36b8c                 | _fatfs_cc_deselect_1219_ret
36b8c     2D 00 64 FD | 	ret
36b90                 | 
36b90                 | _fatfs_cc_select_1223
36b90     00 4A 05 F6 | 	mov	COUNT_, #0
36b94     A8 00 A0 FD | 	call	#pushregs_
36b98     10 F0 07 F1 | 	add	ptra, #16
36b9c     01 00 00 FF 
36ba0     14 E4 05 F1 | 	add	objptr, ##532
36ba4     F2 14 02 FB | 	rdlong	arg02, objptr
36ba8     08 4E 05 F1 | 	add	fp, #8
36bac     A7 14 62 FC | 	wrlong	arg02, fp
36bb0     08 E4 05 F1 | 	add	objptr, #8
36bb4     F2 12 02 FB | 	rdlong	arg01, objptr
36bb8     01 00 00 FF 
36bbc     1C E4 85 F1 | 	sub	objptr, ##540
36bc0     04 4E 05 F1 | 	add	fp, #4
36bc4     A7 12 62 FC | 	wrlong	arg01, fp
36bc8     50 12 62 FD | 	fltl	arg01
36bcc     04 4E 85 F1 | 	sub	fp, #4
36bd0     A7 12 02 FB | 	rdlong	arg01, fp
36bd4     58 12 62 FD | 	drvl	arg01
36bd8     1F 20 64 FD | 	waitx	#16
36bdc     04 4E 05 F1 | 	add	fp, #4
36be0     A7 12 02 FB | 	rdlong	arg01, fp
36be4     41 12 62 FD | 	dirh	arg01
36be8     08 4E 85 F1 | 	sub	fp, #8
36bec     A7 12 02 F6 | 	mov	arg01, fp
36bf0     04 4E 85 F1 | 	sub	fp, #4
36bf4     01 14 06 F6 | 	mov	arg02, #1
36bf8     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1209
36bfc     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1213
36c00     00 FA 0D F2 | 	cmp	result1, #0 wz
36c04     01 FA 05 56 |  if_ne	mov	result1, #1
36c08     08 00 90 5D |  if_ne	jmp	#LR__5380
36c0c     FC FE BF FD | 	call	#_fatfs_cc_deselect_1219
36c10                 | ' 
36c10                 | ' 	deselect();
36c10                 | ' 	return 0;
36c10     00 FA 05 F6 | 	mov	result1, #0
36c14                 | LR__5380
36c14     A7 F0 03 F6 | 	mov	ptra, fp
36c18     B2 00 A0 FD | 	call	#popregs_
36c1c                 | _fatfs_cc_select_1223_ret
36c1c     2D 00 64 FD | 	ret
36c20                 | 
36c20                 | _fatfs_cc_rcvr_datablock_1227
36c20     01 4A 05 F6 | 	mov	COUNT_, #1
36c24     A8 00 A0 FD | 	call	#pushregs_
36c28     18 F0 07 F1 | 	add	ptra, #24
36c2c     04 4E 05 F1 | 	add	fp, #4
36c30     A7 12 62 FC | 	wrlong	arg01, fp
36c34     04 4E 05 F1 | 	add	fp, #4
36c38     A7 14 62 FC | 	wrlong	arg02, fp
36c3c     1A FA 61 FD | 	getct	result1
36c40     08 4E 05 F1 | 	add	fp, #8
36c44     A7 FA 61 FC | 	wrlong	result1, fp
36c48     14 26 06 FB | 	rdlong	local01, #20
36c4c     03 26 46 F0 | 	shr	local01, #3
36c50     04 4E 05 F1 | 	add	fp, #4
36c54     A7 26 62 FC | 	wrlong	local01, fp
36c58     14 4E 85 F1 | 	sub	fp, #20
36c5c                 | ' 	BYTE *buff,
36c5c                 | ' 	UINT btr
36c5c                 | ' )
36c5c                 | ' {
36c5c                 | ' 	BYTE d[2];
36c5c                 | ' 	UINT tmr, tmout;
36c5c                 | ' 
36c5c                 | ' 	tmr = _cnt();
36c5c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
36c5c                 | ' 	for(;;) {
36c5c                 | LR__5390
36c5c     0C 4E 05 F1 | 	add	fp, #12
36c60     A7 12 02 F6 | 	mov	arg01, fp
36c64     0C 4E 85 F1 | 	sub	fp, #12
36c68     01 14 06 F6 | 	mov	arg02, #1
36c6c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1209
36c70     0C 4E 05 F1 | 	add	fp, #12
36c74     A7 26 C2 FA | 	rdbyte	local01, fp
36c78     0C 4E 85 F1 | 	sub	fp, #12
36c7c     FF 26 0E F2 | 	cmp	local01, #255 wz
36c80     28 00 90 5D |  if_ne	jmp	#LR__5391
36c84     1A FA 61 FD | 	getct	result1
36c88     FD 26 02 F6 | 	mov	local01, result1
36c8c     10 4E 05 F1 | 	add	fp, #16
36c90     A7 14 02 FB | 	rdlong	arg02, fp
36c94     0A 27 82 F1 | 	sub	local01, arg02
36c98     04 4E 05 F1 | 	add	fp, #4
36c9c     A7 14 02 FB | 	rdlong	arg02, fp
36ca0     14 4E 85 F1 | 	sub	fp, #20
36ca4     0A 27 12 F2 | 	cmp	local01, arg02 wc
36ca8     B0 FF 9F CD |  if_b	jmp	#LR__5390
36cac                 | LR__5391
36cac     0C 4E 05 F1 | 	add	fp, #12
36cb0     A7 26 C2 FA | 	rdbyte	local01, fp
36cb4     0C 4E 85 F1 | 	sub	fp, #12
36cb8     FE 26 0E F2 | 	cmp	local01, #254 wz
36cbc     00 FA 05 56 |  if_ne	mov	result1, #0
36cc0     30 00 90 5D |  if_ne	jmp	#LR__5392
36cc4     04 4E 05 F1 | 	add	fp, #4
36cc8     A7 12 02 FB | 	rdlong	arg01, fp
36ccc     04 4E 05 F1 | 	add	fp, #4
36cd0     A7 14 02 FB | 	rdlong	arg02, fp
36cd4     08 4E 85 F1 | 	sub	fp, #8
36cd8     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1209
36cdc     0C 4E 05 F1 | 	add	fp, #12
36ce0     A7 12 02 F6 | 	mov	arg01, fp
36ce4     0C 4E 85 F1 | 	sub	fp, #12
36ce8     02 14 06 F6 | 	mov	arg02, #2
36cec     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1209
36cf0                 | ' 
36cf0                 | ' 	rcvr_mmc(buff, btr);
36cf0                 | ' 	rcvr_mmc(d, 2);
36cf0                 | ' 
36cf0                 | ' 	return 1;
36cf0     01 FA 05 F6 | 	mov	result1, #1
36cf4                 | LR__5392
36cf4     A7 F0 03 F6 | 	mov	ptra, fp
36cf8     B2 00 A0 FD | 	call	#popregs_
36cfc                 | _fatfs_cc_rcvr_datablock_1227_ret
36cfc     2D 00 64 FD | 	ret
36d00                 | 
36d00                 | _fatfs_cc_xmit_datablock_1229
36d00     00 4A 05 F6 | 	mov	COUNT_, #0
36d04     A8 00 A0 FD | 	call	#pushregs_
36d08     10 F0 07 F1 | 	add	ptra, #16
36d0c     04 4E 05 F1 | 	add	fp, #4
36d10     A7 12 62 FC | 	wrlong	arg01, fp
36d14     04 4E 05 F1 | 	add	fp, #4
36d18     A7 14 42 FC | 	wrbyte	arg02, fp
36d1c     08 4E 85 F1 | 	sub	fp, #8
36d20     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1213
36d24     00 FA 0D F2 | 	cmp	result1, #0 wz
36d28     00 FA 05 A6 |  if_e	mov	result1, #0
36d2c     90 00 90 AD |  if_e	jmp	#LR__5401
36d30     08 4E 05 F1 | 	add	fp, #8
36d34     A7 14 C2 FA | 	rdbyte	arg02, fp
36d38     04 4E 05 F1 | 	add	fp, #4
36d3c     A7 14 42 FC | 	wrbyte	arg02, fp
36d40     A7 12 02 F6 | 	mov	arg01, fp
36d44     0C 4E 85 F1 | 	sub	fp, #12
36d48     01 14 06 F6 | 	mov	arg02, #1
36d4c     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1202
36d50     08 4E 05 F1 | 	add	fp, #8
36d54     A7 14 C2 FA | 	rdbyte	arg02, fp
36d58     08 4E 85 F1 | 	sub	fp, #8
36d5c     FD 14 0E F2 | 	cmp	arg02, #253 wz
36d60     58 00 90 AD |  if_e	jmp	#LR__5400
36d64     04 4E 05 F1 | 	add	fp, #4
36d68     A7 12 02 FB | 	rdlong	arg01, fp
36d6c     04 4E 85 F1 | 	sub	fp, #4
36d70     09 14 C6 F9 | 	decod	arg02, #9
36d74     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1202
36d78     0C 4E 05 F1 | 	add	fp, #12
36d7c     A7 12 02 F6 | 	mov	arg01, fp
36d80     0C 4E 85 F1 | 	sub	fp, #12
36d84     02 14 06 F6 | 	mov	arg02, #2
36d88     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1209
36d8c     0C 4E 05 F1 | 	add	fp, #12
36d90     A7 12 02 F6 | 	mov	arg01, fp
36d94     0C 4E 85 F1 | 	sub	fp, #12
36d98     01 14 06 F6 | 	mov	arg02, #1
36d9c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1209
36da0     0C 4E 05 F1 | 	add	fp, #12
36da4     A7 14 C2 FA | 	rdbyte	arg02, fp
36da8     0C 4E 85 F1 | 	sub	fp, #12
36dac     1F 14 06 F5 | 	and	arg02, #31
36db0     05 14 0E F2 | 	cmp	arg02, #5 wz
36db4                 | ' 			return 0;
36db4     00 FA 05 56 |  if_ne	mov	result1, #0
36db8     04 00 90 5D |  if_ne	jmp	#LR__5401
36dbc                 | LR__5400
36dbc                 | ' 	}
36dbc                 | ' 
36dbc                 | ' 	return 1;
36dbc     01 FA 05 F6 | 	mov	result1, #1
36dc0                 | LR__5401
36dc0     A7 F0 03 F6 | 	mov	ptra, fp
36dc4     B2 00 A0 FD | 	call	#popregs_
36dc8                 | _fatfs_cc_xmit_datablock_1229_ret
36dc8     2D 00 64 FD | 	ret
36dcc                 | 
36dcc                 | _fatfs_cc_send_cmd_1233
36dcc     01 4A 05 F6 | 	mov	COUNT_, #1
36dd0     A8 00 A0 FD | 	call	#pushregs_
36dd4     1C F0 07 F1 | 	add	ptra, #28
36dd8                 | _fatfs_cc_send_cmd_1233_enter
36dd8     04 4E 05 F1 | 	add	fp, #4
36ddc     A7 12 42 FC | 	wrbyte	arg01, fp
36de0     04 4E 05 F1 | 	add	fp, #4
36de4     A7 14 62 FC | 	wrlong	arg02, fp
36de8     04 4E 85 F1 | 	sub	fp, #4
36dec     A7 FA C1 FA | 	rdbyte	result1, fp
36df0     04 4E 85 F1 | 	sub	fp, #4
36df4     80 FA CD F7 | 	test	result1, #128 wz
36df8     44 00 90 AD |  if_e	jmp	#LR__5410
36dfc     04 4E 05 F1 | 	add	fp, #4
36e00     A7 14 C2 FA | 	rdbyte	arg02, fp
36e04     7F 14 06 F5 | 	and	arg02, #127
36e08     A7 14 42 FC | 	wrbyte	arg02, fp
36e0c     04 4E 85 F1 | 	sub	fp, #4
36e10     37 12 06 F6 | 	mov	arg01, #55
36e14     00 14 06 F6 | 	mov	arg02, #0
36e18     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1233
36e1c     0C 4E 05 F1 | 	add	fp, #12
36e20     A7 FA 41 FC | 	wrbyte	result1, fp
36e24     A7 14 C2 FA | 	rdbyte	arg02, fp
36e28     0C 4E 85 F1 | 	sub	fp, #12
36e2c     02 14 16 F2 | 	cmp	arg02, #2 wc
36e30     0C 4E 05 31 |  if_ae	add	fp, #12
36e34     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
36e38     0C 4E 85 31 |  if_ae	sub	fp, #12
36e3c     6C 01 90 3D |  if_ae	jmp	#LR__5414
36e40                 | LR__5410
36e40     04 4E 05 F1 | 	add	fp, #4
36e44     A7 14 C2 FA | 	rdbyte	arg02, fp
36e48     04 4E 85 F1 | 	sub	fp, #4
36e4c     0C 14 0E F2 | 	cmp	arg02, #12 wz
36e50     14 00 90 AD |  if_e	jmp	#LR__5411
36e54     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1219
36e58     34 FD BF FD | 	call	#_fatfs_cc_select_1223
36e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
36e60     FF FA 05 A6 |  if_e	mov	result1, #255
36e64     44 01 90 AD |  if_e	jmp	#LR__5414
36e68                 | LR__5411
36e68     04 4E 05 F1 | 	add	fp, #4
36e6c     A7 14 C2 FA | 	rdbyte	arg02, fp
36e70     40 FA 05 F6 | 	mov	result1, #64
36e74     0A FB 41 F5 | 	or	result1, arg02
36e78     10 4E 05 F1 | 	add	fp, #16
36e7c     A7 FA 41 FC | 	wrbyte	result1, fp
36e80     0C 4E 85 F1 | 	sub	fp, #12
36e84     A7 FA 01 FB | 	rdlong	result1, fp
36e88     18 FA 45 F0 | 	shr	result1, #24
36e8c     0D 4E 05 F1 | 	add	fp, #13
36e90     A7 FA 41 FC | 	wrbyte	result1, fp
36e94     0D 4E 85 F1 | 	sub	fp, #13
36e98     A7 FA 01 FB | 	rdlong	result1, fp
36e9c     10 FA 45 F0 | 	shr	result1, #16
36ea0     0E 4E 05 F1 | 	add	fp, #14
36ea4     A7 FA 41 FC | 	wrbyte	result1, fp
36ea8     0E 4E 85 F1 | 	sub	fp, #14
36eac     A7 FA 01 FB | 	rdlong	result1, fp
36eb0     08 FA 45 F0 | 	shr	result1, #8
36eb4     0F 4E 05 F1 | 	add	fp, #15
36eb8     A7 FA 41 FC | 	wrbyte	result1, fp
36ebc     0F 4E 85 F1 | 	sub	fp, #15
36ec0     A7 FA 01 FB | 	rdlong	result1, fp
36ec4     10 4E 05 F1 | 	add	fp, #16
36ec8     A7 FA 41 FC | 	wrbyte	result1, fp
36ecc     0C 4E 85 F1 | 	sub	fp, #12
36ed0     A7 02 48 FC | 	wrbyte	#1, fp
36ed4     08 4E 85 F1 | 	sub	fp, #8
36ed8     A7 FA C9 FA | 	rdbyte	result1, fp wz
36edc     04 4E 85 F1 | 	sub	fp, #4
36ee0     0C 4E 05 A1 |  if_e	add	fp, #12
36ee4     A7 2A 49 AC |  if_e	wrbyte	#149, fp
36ee8     0C 4E 85 A1 |  if_e	sub	fp, #12
36eec     04 4E 05 F1 | 	add	fp, #4
36ef0     A7 FA C1 FA | 	rdbyte	result1, fp
36ef4     04 4E 85 F1 | 	sub	fp, #4
36ef8     08 FA 0D F2 | 	cmp	result1, #8 wz
36efc     0C 4E 05 A1 |  if_e	add	fp, #12
36f00     A7 0E 49 AC |  if_e	wrbyte	#135, fp
36f04     0C 4E 85 A1 |  if_e	sub	fp, #12
36f08     0C 4E 05 F1 | 	add	fp, #12
36f0c     A7 14 C2 FA | 	rdbyte	arg02, fp
36f10     0D 4E 05 F1 | 	add	fp, #13
36f14     A7 14 42 FC | 	wrbyte	arg02, fp
36f18     05 4E 85 F1 | 	sub	fp, #5
36f1c     A7 12 02 F6 | 	mov	arg01, fp
36f20     14 4E 85 F1 | 	sub	fp, #20
36f24     06 14 06 F6 | 	mov	arg02, #6
36f28     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1202
36f2c     04 4E 05 F1 | 	add	fp, #4
36f30     A7 26 C2 FA | 	rdbyte	local01, fp
36f34     04 4E 85 F1 | 	sub	fp, #4
36f38     0C 26 0E F2 | 	cmp	local01, #12 wz
36f3c     10 4E 05 A1 |  if_e	add	fp, #16
36f40     A7 12 02 A6 |  if_e	mov	arg01, fp
36f44     10 4E 85 A1 |  if_e	sub	fp, #16
36f48     01 14 06 A6 |  if_e	mov	arg02, #1
36f4c     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1209
36f50     0C 4E 05 F1 | 	add	fp, #12
36f54     A7 14 48 FC | 	wrbyte	#10, fp
36f58     0C 4E 85 F1 | 	sub	fp, #12
36f5c                 | ' 	n = 10;
36f5c                 | ' 	do
36f5c                 | LR__5412
36f5c     10 4E 05 F1 | 	add	fp, #16
36f60     A7 12 02 F6 | 	mov	arg01, fp
36f64     10 4E 85 F1 | 	sub	fp, #16
36f68     01 14 06 F6 | 	mov	arg02, #1
36f6c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1209
36f70     10 4E 05 F1 | 	add	fp, #16
36f74     A7 26 C2 FA | 	rdbyte	local01, fp
36f78     10 4E 85 F1 | 	sub	fp, #16
36f7c     80 26 CE F7 | 	test	local01, #128 wz
36f80     1C 00 90 AD |  if_e	jmp	#LR__5413
36f84     0C 4E 05 F1 | 	add	fp, #12
36f88     A7 26 C2 FA | 	rdbyte	local01, fp
36f8c     01 26 86 F1 | 	sub	local01, #1
36f90     A7 26 42 FC | 	wrbyte	local01, fp
36f94     A7 26 CA FA | 	rdbyte	local01, fp wz
36f98     0C 4E 85 F1 | 	sub	fp, #12
36f9c     BC FF 9F 5D |  if_ne	jmp	#LR__5412
36fa0                 | LR__5413
36fa0                 | ' 
36fa0                 | ' 	return d;
36fa0     10 4E 05 F1 | 	add	fp, #16
36fa4     A7 FA C1 FA | 	rdbyte	result1, fp
36fa8     10 4E 85 F1 | 	sub	fp, #16
36fac                 | LR__5414
36fac     A7 F0 03 F6 | 	mov	ptra, fp
36fb0     B2 00 A0 FD | 	call	#popregs_
36fb4                 | _fatfs_cc_send_cmd_1233_ret
36fb4     2D 00 64 FD | 	ret
36fb8                 | 
36fb8                 | _fatfs_cc_disk_deinitialize
36fb8     03 4A 05 F6 | 	mov	COUNT_, #3
36fbc     A8 00 A0 FD | 	call	#pushregs_
36fc0     00 12 4E F2 | 	cmps	arg01, #0 wz
36fc4     01 00 00 FF 
36fc8     14 E4 05 F1 | 	add	objptr, ##532
36fcc     F2 12 02 FB | 	rdlong	arg01, objptr
36fd0     04 E4 85 F1 | 	sub	objptr, #4
36fd4     F2 26 02 FB | 	rdlong	local01, objptr
36fd8     08 E4 05 F1 | 	add	objptr, #8
36fdc     F2 28 02 FB | 	rdlong	local02, objptr
36fe0     04 E4 05 F1 | 	add	objptr, #4
36fe4     F2 2A 02 FB | 	rdlong	local03, objptr
36fe8     01 00 00 FF 
36fec     1C E4 85 F1 | 	sub	objptr, ##540
36ff0                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
36ff0                 | '         return RES_NOTRDY;
36ff0     03 FA 05 56 |  if_ne	mov	result1, #3
36ff4     2C 00 90 5D |  if_ne	jmp	#LR__5420
36ff8     50 12 62 FD | 	fltl	arg01
36ffc     09 01 08 FC | 	wrpin	#0, arg01
37000     50 26 62 FD | 	fltl	local01
37004     13 01 08 FC | 	wrpin	#0, local01
37008     50 28 62 FD | 	fltl	local02
3700c     14 01 08 FC | 	wrpin	#0, local02
37010     50 2A 62 FD | 	fltl	local03
37014     15 01 08 FC | 	wrpin	#0, local03
37018     0A 12 06 F6 | 	mov	arg01, #10
3701c     30 0E BF FD | 	call	#__system___waitms
37020                 | '     }
37020                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.5.0/flexprop/include/filesys/fatfs/sdmm.cc"
37020                 | '     _pinclear(PIN_SS);
37020                 | '     _pinclear(PIN_CLK);
37020                 | '     _pinclear(PIN_DI);
37020                 | '     _pinclear(PIN_DO);
37020                 | ' 
37020                 | '     _waitms(10);
37020                 | ' 
37020                 | '     return 0;
37020     00 FA 05 F6 | 	mov	result1, #0
37024                 | LR__5420
37024     A7 F0 03 F6 | 	mov	ptra, fp
37028     B2 00 A0 FD | 	call	#popregs_
3702c                 | _fatfs_cc_disk_deinitialize_ret
3702c     2D 00 64 FD | 	ret
37030                 | 
37030                 | _fatfs_cc_gettimeofday
37030     04 4A 05 F6 | 	mov	COUNT_, #4
37034     A8 00 A0 FD | 	call	#pushregs_
37038     09 27 02 F6 | 	mov	local01, arg01
3703c     7C 09 BF FD | 	call	#__system___getus
37040     FD 12 02 F6 | 	mov	arg01, result1
37044     02 00 00 FF 
37048     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
3704c     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
37050     09 FB 01 F6 | 	mov	result1, arg01
37054     14 FB 81 F1 | 	sub	result1, local02
37058     A1 07 00 FF 
3705c     40 FA 15 FD | 	qdiv	result1, ##1000000
37060     02 00 00 FF 
37064     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
37068     18 28 62 FD | 	getqx	local02
3706c     A1 07 00 FF 
37070     40 FA 15 FD | 	qdiv	result1, ##1000000
37074     00 28 0E F2 | 	cmp	local02, #0 wz
37078     19 2A 62 FD | 	getqy	local03
3707c     28 00 90 AD |  if_e	jmp	#LR__5430
37080     02 00 00 FF 
37084     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
37088     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
3708c     14 2D 02 F1 | 	add	local04, local02
37090     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
37094     15 13 82 F1 | 	sub	arg01, local03
37098     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
3709c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
370a0     02 00 00 FF 
370a4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
370a8                 | LR__5430
370a8     02 00 00 FF 
370ac     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
370b0     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
370b4     02 00 00 FF 
370b8     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
370bc     13 2D 62 FC | 	wrlong	local04, local01
370c0     04 26 06 F1 | 	add	local01, #4
370c4     13 2B 62 FC | 	wrlong	local03, local01
370c8                 | '         lastsec += secs;
370c8                 | '         lastus = now - leftover;
370c8                 | '     }
370c8                 | '     tv->tv_sec = lastsec;
370c8                 | '     tv->tv_usec = leftover;
370c8                 | '     return 0;
370c8     00 FA 05 F6 | 	mov	result1, #0
370cc     A7 F0 03 F6 | 	mov	ptra, fp
370d0     B2 00 A0 FD | 	call	#popregs_
370d4                 | _fatfs_cc_gettimeofday_ret
370d4     2D 00 64 FD | 	ret
370d8                 | 
370d8                 | _fatfs_cc__is_leap_year
370d8     09 FB 51 F6 | 	abs	result1, arg01 wc
370dc     03 FA 05 F5 | 	and	result1, #3
370e0     FD FA 89 F6 | 	negc	result1, result1 wz
370e4     38 00 90 5D |  if_ne	jmp	#LR__5441
370e8     09 FB 51 F6 | 	abs	result1, arg01 wc
370ec     64 FA 15 FD | 	qdiv	result1, #100
370f0     19 FA 61 FD | 	getqy	result1
370f4     FD FA 89 F6 | 	negc	result1, result1 wz
370f8     1C 00 90 5D |  if_ne	jmp	#LR__5440
370fc     09 FB 51 F6 | 	abs	result1, arg01 wc
37100     90 FB 15 FD | 	qdiv	result1, #400
37104                 | '       return (0 == y % 400);
37104     00 FA 05 F6 | 	mov	result1, #0
37108     19 00 62 FD | 	getqy	_var01
3710c     00 01 8A F6 | 	negc	_var01, _var01 wz
37110     01 FA 05 A6 |  if_e	mov	result1, #1
37114     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
37118                 | LR__5440
37118                 | '     return 1;
37118     01 FA 05 F6 | 	mov	result1, #1
3711c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
37120                 | LR__5441
37120                 | '   }
37120                 | '   return 0;
37120     00 FA 05 F6 | 	mov	result1, #0
37124                 | _fatfs_cc__is_leap_year_ret
37124     2D 00 64 FD | 	ret
37128                 | 
37128                 | _fatfs_cc___tzoffset
37128     09 01 0A F6 | 	mov	_var01, arg01 wz
3712c     FF FF FF FF 
37130     0A FF 6B FC | 	wrlong	##-1, arg02
37134     01 02 06 F6 | 	mov	_var02, #1
37138     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
3713c                 | '                 return 0;
3713c     00 FA 05 A6 |  if_e	mov	result1, #0
37140     94 02 90 AD |  if_e	jmp	#LR__5467
37144     0A 01 68 FC | 	wrlong	#0, arg02
37148     02 00 00 FF 
3714c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
37150     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
37154                 | ' 
37154                 | '        *hasdst = 0;
37154                 | ' 
37154                 | ' 	n = stdname;
37154                 | '         while (*s && isalpha(*s)) {
37154     02 00 00 FF 
37158     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
3715c     97 28 48 FB | 	callpa	#(@LR__5451-@LR__5450)>>2,fcache_load_ptr_
37160                 | LR__5450
37160     00 05 CA FA | 	rdbyte	_var03, _var01 wz
37164     48 00 90 AD |  if_e	jmp	#LR__5452
37168     00 13 C2 FA | 	rdbyte	arg01, _var01
3716c                 | ' {
3716c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
3716c     80 12 36 F3 | 	fle	arg01, #128 wc
37170                 | '     return __ctype[c];
37170     02 00 00 FF 
37174     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
37178     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3717c     09 FB C1 FA | 	rdbyte	result1, arg01
37180     02 00 00 FF 
37184     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
37188     0C FA CD F7 | 	test	result1, #12 wz
3718c     20 00 90 AD |  if_e	jmp	#LR__5452
37190     00 09 02 F6 | 	mov	_var05, _var01
37194     00 0B 02 F6 | 	mov	_var06, _var01
37198     01 0A 06 F1 | 	add	_var06, #1
3719c     04 0D C2 FA | 	rdbyte	_var07, _var05
371a0     05 01 02 F6 | 	mov	_var01, _var06
371a4     03 0D 42 FC | 	wrbyte	_var07, _var04
371a8     01 06 06 F1 | 	add	_var04, #1
371ac     B0 FF 9F FD | 	jmp	#LR__5450
371b0                 | LR__5451
371b0                 | LR__5452
371b0     03 01 48 FC | 	wrbyte	#0, _var04
371b4     00 0E 06 F6 | 	mov	_var08, #0
371b8     00 05 C2 FA | 	rdbyte	_var03, _var01
371bc     2D 04 0E F2 | 	cmp	_var03, #45 wz
371c0     01 02 66 A6 |  if_e	neg	_var02, #1
371c4     01 00 06 A1 |  if_e	add	_var01, #1
371c8     97 28 48 FB | 	callpa	#(@LR__5454-@LR__5453)>>2,fcache_load_ptr_
371cc                 | '                 sgn = -1;
371cc                 | '                 s++;
371cc                 | '         }
371cc                 | '         while (isdigit(*s)) {
371cc                 | LR__5453
371cc     00 13 C2 FA | 	rdbyte	arg01, _var01
371d0                 | ' {
371d0                 | '   return  (__ctype_get(c) & 0x02 ) ;
371d0     80 12 36 F3 | 	fle	arg01, #128 wc
371d4                 | '     return __ctype[c];
371d4     02 00 00 FF 
371d8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
371dc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
371e0     09 FB C1 FA | 	rdbyte	result1, arg01
371e4     02 00 00 FF 
371e8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
371ec     02 FA CD F7 | 	test	result1, #2 wz
371f0     28 00 90 AD |  if_e	jmp	#LR__5455
371f4     07 05 02 F6 | 	mov	_var03, _var08
371f8     02 04 66 F0 | 	shl	_var03, #2
371fc     07 05 02 F1 | 	add	_var03, _var08
37200     01 04 66 F0 | 	shl	_var03, #1
37204     00 09 C2 FA | 	rdbyte	_var05, _var01
37208     30 08 86 F1 | 	sub	_var05, #48
3720c     04 05 02 F1 | 	add	_var03, _var05
37210     02 0F 02 F6 | 	mov	_var08, _var03
37214     01 00 06 F1 | 	add	_var01, #1
37218     B0 FF 9F FD | 	jmp	#LR__5453
3721c                 | LR__5454
3721c                 | LR__5455
3721c     07 00 00 FF 
37220     10 0E 06 FD | 	qmul	_var08, ##3600
37224     00 05 C2 FA | 	rdbyte	_var03, _var01
37228     3A 04 0E F2 | 	cmp	_var03, #58 wz
3722c     18 10 62 FD | 	getqx	_var09
37230     70 00 90 5D |  if_ne	jmp	#LR__5459
37234     00 0E 06 F6 | 	mov	_var08, #0
37238     01 00 06 F1 | 	add	_var01, #1
3723c     97 28 48 FB | 	callpa	#(@LR__5457-@LR__5456)>>2,fcache_load_ptr_
37240                 | '                 x = 0;
37240                 | '                 s++;
37240                 | '                 while (isdigit(*s)) {
37240                 | LR__5456
37240     00 13 C2 FA | 	rdbyte	arg01, _var01
37244                 | ' {
37244                 | '   return  (__ctype_get(c) & 0x02 ) ;
37244     80 12 36 F3 | 	fle	arg01, #128 wc
37248                 | '     return __ctype[c];
37248     02 00 00 FF 
3724c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
37250     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
37254     09 FB C1 FA | 	rdbyte	result1, arg01
37258     02 00 00 FF 
3725c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
37260     02 FA CD F7 | 	test	result1, #2 wz
37264     28 00 90 AD |  if_e	jmp	#LR__5458
37268     07 05 02 F6 | 	mov	_var03, _var08
3726c     02 04 66 F0 | 	shl	_var03, #2
37270     07 05 02 F1 | 	add	_var03, _var08
37274     01 04 66 F0 | 	shl	_var03, #1
37278     00 09 C2 FA | 	rdbyte	_var05, _var01
3727c     30 08 86 F1 | 	sub	_var05, #48
37280     04 05 02 F1 | 	add	_var03, _var05
37284     02 0F 02 F6 | 	mov	_var08, _var03
37288     01 00 06 F1 | 	add	_var01, #1
3728c     B0 FF 9F FD | 	jmp	#LR__5456
37290                 | LR__5457
37290                 | LR__5458
37290     07 0D 02 F6 | 	mov	_var07, _var08
37294     04 0C 66 F0 | 	shl	_var07, #4
37298     07 0D 82 F1 | 	sub	_var07, _var08
3729c     02 0C 66 F0 | 	shl	_var07, #2
372a0     06 11 02 F1 | 	add	_var09, _var07
372a4                 | LR__5459
372a4     02 00 00 FF 
372a8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
372ac     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
372b0     00 13 C2 FA | 	rdbyte	arg01, _var01
372b4                 | ' {
372b4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
372b4     80 12 36 F3 | 	fle	arg01, #128 wc
372b8                 | '     return __ctype[c];
372b8     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
372bc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
372c0     09 FB C1 FA | 	rdbyte	result1, arg01
372c4     02 00 00 FF 
372c8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
372cc     0C FA CD F7 | 	test	result1, #12 wz
372d0     50 00 90 AD |  if_e	jmp	#LR__5462
372d4     0A 03 68 FC | 	wrlong	#1, arg02
372d8                 | '                 *hasdst = 1;
372d8                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
372d8                 | LR__5460
372d8     00 05 CA FA | 	rdbyte	_var03, _var01 wz
372dc     44 00 90 AD |  if_e	jmp	#LR__5461
372e0     00 13 C2 FA | 	rdbyte	arg01, _var01
372e4                 | ' {
372e4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
372e4     80 12 36 F3 | 	fle	arg01, #128 wc
372e8                 | '     return __ctype[c];
372e8     02 00 00 FF 
372ec     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
372f0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
372f4     09 FB C1 FA | 	rdbyte	result1, arg01
372f8     02 00 00 FF 
372fc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
37300     0C FA CD F7 | 	test	result1, #12 wz
37304     1C 00 90 AD |  if_e	jmp	#LR__5461
37308     00 0B 02 F6 | 	mov	_var06, _var01
3730c     01 0A 06 F1 | 	add	_var06, #1
37310     00 0D C2 FA | 	rdbyte	_var07, _var01
37314     05 01 02 F6 | 	mov	_var01, _var06
37318     03 0D 42 FC | 	wrbyte	_var07, _var04
3731c     01 06 06 F1 | 	add	_var04, #1
37320     B4 FF 9F FD | 	jmp	#LR__5460
37324                 | LR__5461
37324                 | LR__5462
37324     03 01 48 FC | 	wrbyte	#0, _var04
37328     02 00 00 FF 
3732c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
37330     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
37334     02 00 00 FF 
37338     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
3733c     20 00 90 AD |  if_e	jmp	#LR__5463
37340     02 00 00 FF 
37344     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
37348     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3734c     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
37350     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
37354     02 00 00 FF 
37358     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
3735c     1C 00 90 FD | 	jmp	#LR__5464
37360                 | LR__5463
37360     02 00 00 FF 
37364     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
37368     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3736c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
37370     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
37374     02 00 00 FF 
37378     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
3737c                 | LR__5464
3737c     02 00 00 FF 
37380     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
37384     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
37388     02 00 00 FF 
3738c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
37390     20 00 90 AD |  if_e	jmp	#LR__5465
37394     02 00 00 FF 
37398     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3739c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
373a0     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
373a4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
373a8     02 00 00 FF 
373ac     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
373b0     1C 00 90 FD | 	jmp	#LR__5466
373b4                 | LR__5465
373b4     02 00 00 FF 
373b8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
373bc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
373c0     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
373c4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
373c8     02 00 00 FF 
373cc     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
373d0                 | LR__5466
373d0     08 03 02 FD | 	qmul	_var02, _var09
373d4                 | ' 		_tzname[1] = stdname;
373d4                 | ' 
373d4                 | '         return sgn * off;
373d4     18 FA 61 FD | 	getqx	result1
373d8                 | LR__5467
373d8                 | _fatfs_cc___tzoffset_ret
373d8     2D 00 64 FD | 	ret
373dc                 | 
373dc                 | _fatfs_cc___indst
373dc     10 12 06 F1 | 	add	arg01, #16
373e0     09 01 02 FB | 	rdlong	_var01, arg01
373e4     10 12 86 F1 | 	sub	arg01, #16
373e8     02 00 0E F2 | 	cmp	_var01, #2 wz
373ec     30 00 90 5D |  if_ne	jmp	#LR__5470
373f0     07 00 06 F6 | 	mov	_var01, #7
373f4     18 12 06 F1 | 	add	arg01, #24
373f8     09 03 02 FB | 	rdlong	_var02, arg01
373fc     01 01 02 F1 | 	add	_var01, _var02
37400     0C 12 86 F1 | 	sub	arg01, #12
37404     09 05 02 FB | 	rdlong	_var03, arg01
37408     02 01 82 F1 | 	sub	_var01, _var03
3740c     00 00 56 F2 | 	cmps	_var01, #0 wc
37410                 | '                         return 1;
37410     01 FA 05 C6 |  if_b	mov	result1, #1
37414     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
37418                 | '                 return 0;
37418     00 FA 05 F6 | 	mov	result1, #0
3741c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
37420                 | LR__5470
37420     10 12 06 F1 | 	add	arg01, #16
37424     09 01 02 FB | 	rdlong	_var01, arg01
37428     10 12 86 F1 | 	sub	arg01, #16
3742c     0A 00 0E F2 | 	cmp	_var01, #10 wz
37430     28 00 90 5D |  if_ne	jmp	#LR__5471
37434     18 12 06 F1 | 	add	arg01, #24
37438     09 01 02 FB | 	rdlong	_var01, arg01
3743c     0C 12 86 F1 | 	sub	arg01, #12
37440     09 07 02 FB | 	rdlong	_var04, arg01
37444     03 01 82 F1 | 	sub	_var01, _var04
37448     00 00 56 F2 | 	cmps	_var01, #0 wc
3744c                 | '                         return 0;
3744c     00 FA 05 C6 |  if_b	mov	result1, #0
37450     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
37454                 | '                 return 1;
37454     01 FA 05 F6 | 	mov	result1, #1
37458     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3745c                 | LR__5471
3745c                 | '         }
3745c                 | ' 
3745c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
3745c     00 00 06 F6 | 	mov	_var01, #0
37460     10 12 06 F1 | 	add	arg01, #16
37464     09 03 02 FB | 	rdlong	_var02, arg01
37468     10 12 86 F1 | 	sub	arg01, #16
3746c     03 02 56 F2 | 	cmps	_var02, #3 wc
37470     10 00 90 CD |  if_b	jmp	#LR__5472
37474     10 12 06 F1 | 	add	arg01, #16
37478     09 05 02 FB | 	rdlong	_var03, arg01
3747c     0A 04 56 F2 | 	cmps	_var03, #10 wc
37480     01 00 06 C6 |  if_b	mov	_var01, #1
37484                 | LR__5472
37484     00 FB 01 F6 | 	mov	result1, _var01
37488                 | _fatfs_cc___indst_ret
37488     2D 00 64 FD | 	ret
3748c                 | 
3748c                 | ' 	
3748c                 | ' 	FUNCTION pfunc(c as integer) as integer
3748c                 | __system____strs_cl_pfunc_
3748c                 | ' 		if (i < 16) then
3748c     04 E4 05 F1 | 	add	objptr, #4
37490     F2 FA 01 FB | 	rdlong	result1, objptr
37494     04 E4 85 F1 | 	sub	objptr, #4
37498     10 FA 55 F2 | 	cmps	result1, #16 wc
3749c     2C 00 90 3D |  if_ae	jmp	#LR__5480
374a0     F2 FA 01 FB | 	rdlong	result1, objptr
374a4     04 E4 05 F1 | 	add	objptr, #4
374a8     F2 00 02 FB | 	rdlong	_var01, objptr
374ac     FD 00 02 F1 | 	add	_var01, result1
374b0     00 13 42 FC | 	wrbyte	arg01, _var01
374b4     F2 FA 01 FB | 	rdlong	result1, objptr
374b8     01 FA 05 F1 | 	add	result1, #1
374bc     F2 FA 61 FC | 	wrlong	result1, objptr
374c0     04 E4 85 F1 | 	sub	objptr, #4
374c4                 | ' 			p(i) = c
374c4                 | ' 			i = i+1
374c4                 | ' 			return 1
374c4     01 FA 05 F6 | 	mov	result1, #1
374c8     04 00 90 FD | 	jmp	#__system____strs_cl_pfunc__ret
374cc                 | LR__5480
374cc                 | ' 			return -1
374cc     01 FA 65 F6 | 	neg	result1, #1
374d0                 | __system____strs_cl_pfunc__ret
374d0     2D 00 64 FD | 	ret
374d4                 | 
374d4                 | __system___struct__s_vfs_file_t_putchar_
374d4     04 4A 05 F6 | 	mov	COUNT_, #4
374d8     A8 00 A0 FD | 	call	#pushregs_
374dc     1C E4 05 F1 | 	add	objptr, #28
374e0     F2 26 0A FB | 	rdlong	local01, objptr wz
374e4     1C E4 85 F1 | 	sub	objptr, #28
374e8     00 FA 05 A6 |  if_e	mov	result1, #0
374ec     48 00 90 AD |  if_e	jmp	#LR__5490
374f0     1C E4 05 F1 | 	add	objptr, #28
374f4     F2 28 02 FB | 	rdlong	local02, objptr
374f8     14 2B 02 F6 | 	mov	local03, local02
374fc     1C E4 85 F1 | 	sub	objptr, #28
37500     13 2A 46 F7 | 	zerox	local03, #19
37504     14 28 46 F0 | 	shr	local02, #20
37508     02 28 66 F0 | 	shl	local02, #2
3750c     ED 28 02 F1 | 	add	local02, __methods__
37510     14 29 02 FB | 	rdlong	local02, local02
37514     F2 14 02 F6 | 	mov	arg02, objptr
37518     F2 2C 02 F6 | 	mov	local04, objptr
3751c     15 E5 01 F6 | 	mov	objptr, local03
37520     2D 28 62 FD | 	call	local02
37524     16 E5 01 F6 | 	mov	objptr, local04
37528                 | '     return (i < 0) ? 0 : 1;
37528     00 FA 55 F2 | 	cmps	result1, #0 wc
3752c     00 26 06 C6 |  if_b	mov	local01, #0
37530     01 26 06 36 |  if_ae	mov	local01, #1
37534     13 FB 01 F6 | 	mov	result1, local01
37538                 | LR__5490
37538     A7 F0 03 F6 | 	mov	ptra, fp
3753c     B2 00 A0 FD | 	call	#popregs_
37540                 | __system___struct__s_vfs_file_t_putchar__ret
37540     2D 00 64 FD | 	ret
37544                 | 
37544                 | __system___struct__s_vfs_file_t_getchar_
37544     03 4A 05 F6 | 	mov	COUNT_, #3
37548     A8 00 A0 FD | 	call	#pushregs_
3754c     20 E4 05 F1 | 	add	objptr, #32
37550     F2 12 0A FB | 	rdlong	arg01, objptr wz
37554     20 E4 85 F1 | 	sub	objptr, #32
37558     01 FA 65 A6 |  if_e	neg	result1, #1
3755c     38 00 90 AD |  if_e	jmp	#LR__5500
37560                 | '     return getcf(__this);
37560     20 E4 05 F1 | 	add	objptr, #32
37564     F2 26 02 FB | 	rdlong	local01, objptr
37568     13 29 02 F6 | 	mov	local02, local01
3756c     20 E4 85 F1 | 	sub	objptr, #32
37570     13 28 46 F7 | 	zerox	local02, #19
37574     14 26 46 F0 | 	shr	local01, #20
37578     02 26 66 F0 | 	shl	local01, #2
3757c     ED 26 02 F1 | 	add	local01, __methods__
37580     13 27 02 FB | 	rdlong	local01, local01
37584     F2 12 02 F6 | 	mov	arg01, objptr
37588     F2 2A 02 F6 | 	mov	local03, objptr
3758c     14 E5 01 F6 | 	mov	objptr, local02
37590     2D 26 62 FD | 	call	local01
37594     15 E5 01 F6 | 	mov	objptr, local03
37598                 | LR__5500
37598     A7 F0 03 F6 | 	mov	ptra, fp
3759c     B2 00 A0 FD | 	call	#popregs_
375a0                 | __system___struct__s_vfs_file_t_getchar__ret
375a0     2D 00 64 FD | 	ret
375a4                 | 
375a4                 | __system___struct___bas_wrap_sender_tx_
375a4     03 4A 05 F6 | 	mov	COUNT_, #3
375a8     A8 00 A0 FD | 	call	#pushregs_
375ac     F2 26 02 FB | 	rdlong	local01, objptr
375b0     13 29 02 F6 | 	mov	local02, local01
375b4     13 26 46 F7 | 	zerox	local01, #19
375b8     14 28 46 F0 | 	shr	local02, #20
375bc     02 28 66 F0 | 	shl	local02, #2
375c0     ED 28 02 F1 | 	add	local02, __methods__
375c4     14 29 02 FB | 	rdlong	local02, local02
375c8     F2 2A 02 F6 | 	mov	local03, objptr
375cc     13 E5 01 F6 | 	mov	objptr, local01
375d0     2D 28 62 FD | 	call	local02
375d4     15 E5 01 F6 | 	mov	objptr, local03
375d8     01 FA 05 F6 | 	mov	result1, #1
375dc     A7 F0 03 F6 | 	mov	ptra, fp
375e0     B2 00 A0 FD | 	call	#popregs_
375e4                 | __system___struct___bas_wrap_sender_tx__ret
375e4     2D 00 64 FD | 	ret
375e8                 | 
375e8                 | __system___struct___bas_wrap_sender_rx_
375e8     03 4A 05 F6 | 	mov	COUNT_, #3
375ec     A8 00 A0 FD | 	call	#pushregs_
375f0     04 E4 05 F1 | 	add	objptr, #4
375f4     F2 26 02 FB | 	rdlong	local01, objptr
375f8     13 29 02 F6 | 	mov	local02, local01
375fc     04 E4 85 F1 | 	sub	objptr, #4
37600     13 28 46 F7 | 	zerox	local02, #19
37604     14 26 46 F0 | 	shr	local01, #20
37608     02 26 66 F0 | 	shl	local01, #2
3760c     ED 26 02 F1 | 	add	local01, __methods__
37610     13 27 02 FB | 	rdlong	local01, local01
37614     F2 2A 02 F6 | 	mov	local03, objptr
37618     14 E5 01 F6 | 	mov	objptr, local02
3761c     2D 26 62 FD | 	call	local01
37620     15 E5 01 F6 | 	mov	objptr, local03
37624     A7 F0 03 F6 | 	mov	ptra, fp
37628     B2 00 A0 FD | 	call	#popregs_
3762c                 | __system___struct___bas_wrap_sender_rx__ret
3762c     2D 00 64 FD | 	ret
37630                 | 
37630                 | __system___struct___bas_wrap_sender_close_
37630     03 4A 05 F6 | 	mov	COUNT_, #3
37634     A8 00 A0 FD | 	call	#pushregs_
37638     08 E4 05 F1 | 	add	objptr, #8
3763c     F2 26 02 FB | 	rdlong	local01, objptr
37640     13 29 02 F6 | 	mov	local02, local01
37644     08 E4 85 F1 | 	sub	objptr, #8
37648     13 28 46 F7 | 	zerox	local02, #19
3764c     14 26 46 F0 | 	shr	local01, #20
37650     02 26 66 F0 | 	shl	local01, #2
37654     ED 26 02 F1 | 	add	local01, __methods__
37658     13 27 02 FB | 	rdlong	local01, local01
3765c     F2 2A 02 F6 | 	mov	local03, objptr
37660     14 E5 01 F6 | 	mov	objptr, local02
37664     2D 26 62 FD | 	call	local01
37668     15 E5 01 F6 | 	mov	objptr, local03
3766c     A7 F0 03 F6 | 	mov	ptra, fp
37670     B2 00 A0 FD | 	call	#popregs_
37674                 | __system___struct___bas_wrap_sender_close__ret
37674     2D 00 64 FD | 	ret
37678                 | 
37678                 | LR__5510
37678     2F          | 	byte	"/"
37679     00          | 	byte	0
3767a                 | LR__5511
3767a     69 6E 66    | 	byte	"inf"
3767d     00          | 	byte	0
3767e                 | LR__5512
3767e     6E 61 6E    | 	byte	"nan"
37681     00          | 	byte	0
37682                 | LR__5513
37682                 | 	byte	
37682     00          | 	byte	0
37683                 | LR__5514
37683                 | 	byte	
37683     00          | 	byte	0
37684                 | LR__5515
37684                 | 	byte	
37684     00          | 	byte	0
37685                 | LR__5516
37685                 | 	byte	
37685     00          | 	byte	0
37686                 | LR__5517
37686                 | 	byte	
37686     00          | 	byte	0
37687                 | LR__5518
37687                 | 	byte	
37687     00          | 	byte	0
37688                 | LR__5519
37688                 | 	byte	
37688     00          | 	byte	0
37689                 | LR__5520
37689                 | 	byte	
37689     00          | 	byte	0
3768a                 | LR__5521
3768a     00          | 	byte	0
3768b     00          | 	byte	0
3768c                 | LR__5522
3768c     00          | 	byte	0
3768d     00          | 	byte	0
3768e                 | LR__5523
3768e     00          | 	byte	0
3768f     00          | 	byte	0
37690                 | LR__5524
37690     20 21 21 21 
37694     20 63 6F 72 
37698     72 75 70 74 
3769c     65 64 20 68 
376a0     65 61 70 3F 
376a4     3F 3F 20 21 
376a8     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
376ab     00          | 	byte	0
376ac                 | LR__5525
376ac     20 21 21 21 
376b0     20 6F 75 74 
376b4     20 6F 66 20 
376b8     68 65 61 70 
376bc     20 6D 65 6D 
376c0     6F 72 79 20 
376c4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
376c8     00          | 	byte	0
376c9                 | LR__5526
376c9     20 21 21 21 
376cd     20 63 6F 72 
376d1     72 75 70 74 
376d5     65 64 20 68 
376d9     65 61 70 20 
376dd     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
376e1     00          | 	byte	0
376e2                 | LR__5527
376e2     00          | 	byte	0
376e3     00          | 	byte	0
376e4                 | LR__5528
376e4     2E          | 	byte	"."
376e5     00          | 	byte	0
376e6                 | LR__5529
376e6     00          | 	byte	0
376e7     00          | 	byte	0
376e8                 | LR__5530
376e8     00          | 	byte	0
376e9     00          | 	byte	0
376ea                 | LR__5531
376ea     00          | 	byte	0
376eb     00          | 	byte	0
376ec                 | LR__5532
376ec     2A 3A 3C 3E 
376f0     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
376f4     00          | 	byte	0
376f5                 | LR__5533
376f5     2B 2C 3B 3D 
376f9     5B 5D       | 	byte	"+,;=[]"
376fb     00          | 	byte	0
376fc                 | LR__5534
376fc     46 41 54 33 
37700     32 20 20 20 | 	byte	"FAT32   "
37704     00          | 	byte	0
37705                 | LR__5535
37705     54 5A       | 	byte	"TZ"
37707     00          | 	byte	0
37708                 | LR__5536
37708     00          | 	byte	0
37709     00          | 	byte	0
3770a                 | LR__5537
3770a                 | 	byte	
3770a     00          | 	byte	0
3770b                 | LR__5538
3770b                 | 	byte	
3770b     00          | 	byte	0
3770c                 | LR__5539
3770c                 | 	byte	
3770c     00          | 	byte	0
3770d                 | LR__5540
3770d                 | 	byte	
3770d     00          | 	byte	0
3770e                 | LR__5541
3770e     22          | 	byte	34
3770f     00          | 	byte	0
37710                 | LR__5542
37710     22          | 	byte	34
37711     00          | 	byte	0
37712                 | LR__5543
37712     3A          | 	byte	":"
37713     00          | 	byte	0
37714                 | LR__5544
37714                 | 	byte	
37714     00          | 	byte	0
37715                 | LR__5545
37715                 | 	byte	
37715     00          | 	byte	0
37716                 | LR__5546
37716                 | 	byte	
37716     00          | 	byte	0
37717                 | LR__5547
37717                 | 	byte	
37717     00          | 	byte	0
37718                 | LR__5548
37718                 | 	byte	
37718     00          | 	byte	0
37719                 | LR__5549
37719                 | 	byte	
37719     00          | 	byte	0
3771a                 | LR__5550
3771a                 | 	byte	
3771a     00          | 	byte	0
3771b                 | LR__5551
3771b     30          | 	byte	"0"
3771c     00          | 	byte	0
3771d                 | LR__5552
3771d     22          | 	byte	34
3771e     00          | 	byte	0
3771f                 | LR__5553
3771f     22          | 	byte	34
37720     00          | 	byte	0
37721                 | LR__5554
37721     22          | 	byte	34
37722     00          | 	byte	0
37723                 | LR__5555
37723     22          | 	byte	34
37724     00          | 	byte	0
37725                 | LR__5556
37725     22          | 	byte	34
37726     00          | 	byte	0
37727                 | LR__5557
37727     3E          | 	byte	">"
37728     00          | 	byte	0
37729                 | LR__5558
37729     3C          | 	byte	"<"
3772a     00          | 	byte	0
3772b                 | LR__5559
3772b     2B          | 	byte	"+"
3772c     00          | 	byte	0
3772d                 | LR__5560
3772d     2D          | 	byte	"-"
3772e     00          | 	byte	0
3772f                 | LR__5561
3772f     2A          | 	byte	"*"
37730     00          | 	byte	0
37731                 | LR__5562
37731     2F          | 	byte	"/"
37732     00          | 	byte	0
37733                 | LR__5563
37733     5E          | 	byte	"^"
37734     00          | 	byte	0
37735                 | LR__5564
37735     3D          | 	byte	"="
37736     00          | 	byte	0
37737                 | LR__5565
37737     2B          | 	byte	"+"
37738     00          | 	byte	0
37739                 | LR__5566
37739     2B          | 	byte	"+"
3773a     00          | 	byte	0
3773b                 | LR__5567
3773b     2D          | 	byte	"-"
3773c     00          | 	byte	0
3773d                 | LR__5568
3773d     2D          | 	byte	"-"
3773e     00          | 	byte	0
3773f                 | LR__5569
3773f     3C          | 	byte	"<"
37740     00          | 	byte	0
37741                 | LR__5570
37741     3E          | 	byte	">"
37742     00          | 	byte	0
37743                 | LR__5571
37743     22          | 	byte	34
37744     00          | 	byte	0
37745                 | LR__5572
37745     22          | 	byte	34
37746     00          | 	byte	0
37747                 | LR__5573
37747     65 6C 73 65 | 	byte	"else"
3774b     00          | 	byte	0
3774c                 | LR__5574
3774c     74 68 65 6E | 	byte	"then"
37750     00          | 	byte	0
37751                 | LR__5575
37751     3F          | 	byte	"?"
37752     00          | 	byte	0
37753                 | LR__5576
37753     3F          | 	byte	"?"
37754     00          | 	byte	0
37755                 | LR__5577
37755     2E          | 	byte	"."
37756     00          | 	byte	0
37757                 | LR__5578
37757     6D 6F 75 73 
3775b     65          | 	byte	"mouse"
3775c     00          | 	byte	0
3775d                 | LR__5579
3775d     63 75 72 73 
37761     6F 72       | 	byte	"cursor"
37763     00          | 	byte	0
37764                 | LR__5580
37764     63 6C 69 63 
37768     6B          | 	byte	"click"
37769     00          | 	byte	0
3776a                 | LR__5581
3776a     6F 6E       | 	byte	"on"
3776c     00          | 	byte	0
3776d                 | LR__5582
3776d     31          | 	byte	"1"
3776e     00          | 	byte	0
3776f                 | LR__5583
3776f     6F 66 66    | 	byte	"off"
37772     00          | 	byte	0
37773                 | LR__5584
37773     30          | 	byte	"0"
37774     00          | 	byte	0
37775                 | LR__5585
37775     6D 6F 64 65 | 	byte	"mode"
37779     00          | 	byte	0
3777a                 | LR__5586
3777a     6D 2E       | 	byte	"m."
3777c     00          | 	byte	0
3777d                 | LR__5587
3777d     61 74 61 72 
37781     69          | 	byte	"atari"
37782     00          | 	byte	0
37783                 | LR__5588
37783     30          | 	byte	"0"
37784     00          | 	byte	0
37785                 | LR__5589
37785     70 63 5F 61 
37789     6D 62 65 72 | 	byte	"pc_amber"
3778d     00          | 	byte	0
3778e                 | LR__5590
3778e     31          | 	byte	"1"
3778f     00          | 	byte	0
37790                 | LR__5591
37790     70 63 5F 67 
37794     72 65 65 6E | 	byte	"pc_green"
37798     00          | 	byte	0
37799                 | LR__5592
37799     32          | 	byte	"2"
3779a     00          | 	byte	0
3779b                 | LR__5593
3779b     70 63 5F 77 
3779f     68 69 74 65 | 	byte	"pc_white"
377a3     00          | 	byte	0
377a4                 | LR__5594
377a4     33          | 	byte	"3"
377a5     00          | 	byte	0
377a6                 | LR__5595
377a6     73 74       | 	byte	"st"
377a8     00          | 	byte	0
377a9                 | LR__5596
377a9     34          | 	byte	"4"
377aa     00          | 	byte	0
377ab                 | LR__5597
377ab     61 6D 69 67 
377af     61          | 	byte	"amiga"
377b0     00          | 	byte	0
377b1                 | LR__5598
377b1     35          | 	byte	"5"
377b2     00          | 	byte	0
377b3                 | LR__5599
377b3                 | 	byte	
377b3     00          | 	byte	0
377b4                 | LR__5600
377b4     6C 6F 61 64 | 	byte	"load"
377b8     00          | 	byte	0
377b9                 | LR__5601
377b9     73 61 76 65 | 	byte	"save"
377bd     00          | 	byte	0
377be                 | LR__5602
377be     62 72 75 6E | 	byte	"brun"
377c2     00          | 	byte	0
377c3                 | LR__5603
377c3     72 75 6E    | 	byte	"run"
377c6     00          | 	byte	0
377c7                 | LR__5604
377c7     6C 6F 2E    | 	byte	"lo."
377ca     00          | 	byte	0
377cb                 | LR__5605
377cb     73 2E       | 	byte	"s."
377cd     00          | 	byte	0
377ce                 | LR__5606
377ce     62 72 2E    | 	byte	"br."
377d1     00          | 	byte	0
377d2                 | LR__5607
377d2     65 6E 74 65 
377d6     72          | 	byte	"enter"
377d7     00          | 	byte	0
377d8                 | LR__5608
377d8     65 2E       | 	byte	"e."
377da     00          | 	byte	0
377db                 | LR__5609
377db     24          | 	byte	"$"
377dc     00          | 	byte	0
377dd                 | LR__5610
377dd     64 65 6C 65 
377e1     74 65       | 	byte	"delete"
377e3     00          | 	byte	0
377e4                 | LR__5611
377e4     6D 6B 64 69 
377e8     72          | 	byte	"mkdir"
377e9     00          | 	byte	0
377ea                 | LR__5612
377ea     24          | 	byte	"$"
377eb     00          | 	byte	0
377ec                 | LR__5613
377ec     63 6F 70 79 | 	byte	"copy"
377f0     00          | 	byte	0
377f1                 | LR__5614
377f1     24          | 	byte	"$"
377f2     00          | 	byte	0
377f3                 | LR__5615
377f3     63 6F 70 79 | 	byte	"copy"
377f7     00          | 	byte	0
377f8                 | LR__5616
377f8     24          | 	byte	"$"
377f9     00          | 	byte	0
377fa                 | LR__5617
377fa     63 64       | 	byte	"cd"
377fc     00          | 	byte	0
377fd                 | LR__5618
377fd     63 64 2E    | 	byte	"cd."
37800     00          | 	byte	0
37801                 | LR__5619
37801     2E          | 	byte	"."
37802     00          | 	byte	0
37803                 | LR__5620
37803     2E 2E       | 	byte	".."
37805     00          | 	byte	0
37806                 | LR__5621
37806     63 64       | 	byte	"cd"
37808     00          | 	byte	0
37809                 | LR__5622
37809     2F          | 	byte	"/"
3780a     00          | 	byte	0
3780b                 | LR__5623
3780b                 | 	byte	
3780b     00          | 	byte	0
3780c                 | LR__5624
3780c                 | 	byte	
3780c     00          | 	byte	0
3780d                 | LR__5625
3780d                 | 	byte	
3780d     00          | 	byte	0
3780e                 | LR__5626
3780e                 | 	byte	
3780e     00          | 	byte	0
3780f                 | LR__5627
3780f                 | 	byte	
3780f     00          | 	byte	0
37810                 | LR__5628
37810     52 65 61 64 
37814     79          | 	byte	"Ready"
37815     00          | 	byte	0
37816                 | LR__5629
37816     2B          | 	byte	"+"
37817     00          | 	byte	0
37818                 | LR__5630
37818     2D          | 	byte	"-"
37819     00          | 	byte	0
3781a                 | LR__5631
3781a     6F 72       | 	byte	"or"
3781c     00          | 	byte	0
3781d                 | LR__5632
3781d     78 6F 72    | 	byte	"xor"
37820     00          | 	byte	0
37821                 | LR__5633
37821     2A          | 	byte	"*"
37822     00          | 	byte	0
37823                 | LR__5634
37823     2F          | 	byte	"/"
37824     00          | 	byte	0
37825                 | LR__5635
37825     61 6E 64    | 	byte	"and"
37828     00          | 	byte	0
37829                 | LR__5636
37829     64 69 76    | 	byte	"div"
3782c     00          | 	byte	0
3782d                 | LR__5637
3782d     6D 6F 64    | 	byte	"mod"
37830     00          | 	byte	0
37831                 | LR__5638
37831     73 68 6C    | 	byte	"shl"
37834     00          | 	byte	0
37835                 | LR__5639
37835     73 68 72    | 	byte	"shr"
37838     00          | 	byte	0
37839                 | LR__5640
37839     5E          | 	byte	"^"
3783a     00          | 	byte	0
3783b                 | LR__5641
3783b     6E 6F 74    | 	byte	"not"
3783e     00          | 	byte	0
3783f                 | LR__5642
3783f     40          | 	byte	"@"
37840     00          | 	byte	0
37841                 | LR__5643
37841     3D          | 	byte	"="
37842     00          | 	byte	0
37843                 | LR__5644
37843     3E 3D       | 	byte	">="
37845     00          | 	byte	0
37846                 | LR__5645
37846     3C 3D       | 	byte	"<="
37848     00          | 	byte	0
37849                 | LR__5646
37849     3C          | 	byte	"<"
3784a     00          | 	byte	0
3784b                 | LR__5647
3784b     3E          | 	byte	">"
3784c     00          | 	byte	0
3784d                 | LR__5648
3784d     3C 3E       | 	byte	"<>"
3784f     00          | 	byte	0
37850                 | LR__5649
37850     2B 2B       | 	byte	"++"
37852     00          | 	byte	0
37853                 | LR__5650
37853     2D 2D       | 	byte	"--"
37855     00          | 	byte	0
37856                 | LR__5651
37856     23          | 	byte	"#"
37857     00          | 	byte	0
37858                 | LR__5652
37858     30          | 	byte	"0"
37859     00          | 	byte	0
3785a                 | LR__5653
3785a     39          | 	byte	"9"
3785b     00          | 	byte	0
3785c                 | LR__5654
3785c     23 72 65 61 
37860     64          | 	byte	"#read"
37861     00          | 	byte	0
37862                 | LR__5655
37862     23 77 72 69 
37866     74 65       | 	byte	"#write"
37868     00          | 	byte	0
37869                 | LR__5656
37869     23 61 70 70 
3786d     65 6E 64    | 	byte	"#append"
37870     00          | 	byte	0
37871                 | LR__5657
37871     23          | 	byte	"#"
37872     00          | 	byte	0
37873                 | LR__5658
37873     23          | 	byte	"#"
37874     00          | 	byte	0
37875                 | LR__5659
37875     2D          | 	byte	"-"
37876     00          | 	byte	0
37877                 | LR__5660
37877     30          | 	byte	"0"
37878     00          | 	byte	0
37879                 | LR__5661
37879     63          | 	byte	"c"
3787a     00          | 	byte	0
3787b                 | LR__5662
3787b     63 23       | 	byte	"c#"
3787d     00          | 	byte	0
3787e                 | LR__5663
3787e     64          | 	byte	"d"
3787f     00          | 	byte	0
37880                 | LR__5664
37880     64 23       | 	byte	"d#"
37882     00          | 	byte	0
37883                 | LR__5665
37883     65          | 	byte	"e"
37884     00          | 	byte	0
37885                 | LR__5666
37885     66          | 	byte	"f"
37886     00          | 	byte	0
37887                 | LR__5667
37887     66 23       | 	byte	"f#"
37889     00          | 	byte	0
3788a                 | LR__5668
3788a     67          | 	byte	"g"
3788b     00          | 	byte	0
3788c                 | LR__5669
3788c     67 23       | 	byte	"g#"
3788e     00          | 	byte	0
3788f                 | LR__5670
3788f     61          | 	byte	"a"
37890     00          | 	byte	0
37891                 | LR__5671
37891     61 23       | 	byte	"a#"
37893     00          | 	byte	0
37894                 | LR__5672
37894     68          | 	byte	"h"
37895     00          | 	byte	0
37896                 | LR__5673
37896     62          | 	byte	"b"
37897     00          | 	byte	0
37898                 | LR__5674
37898     2B          | 	byte	"+"
37899     00          | 	byte	0
3789a                 | LR__5675
3789a     2D          | 	byte	"-"
3789b     00          | 	byte	0
3789c                 | LR__5676
3789c     3D          | 	byte	"="
3789d     00          | 	byte	0
3789e                 | LR__5677
3789e     2C          | 	byte	","
3789f     00          | 	byte	0
378a0                 | LR__5678
378a0     2A          | 	byte	"*"
378a1     00          | 	byte	0
378a2                 | LR__5679
378a2     2F          | 	byte	"/"
378a3     00          | 	byte	0
378a4                 | LR__5680
378a4     3B          | 	byte	";"
378a5     00          | 	byte	0
378a6                 | LR__5681
378a6     22          | 	byte	34
378a7     00          | 	byte	0
378a8                 | LR__5682
378a8     5E          | 	byte	"^"
378a9     00          | 	byte	0
378aa                 | LR__5683
378aa     29          | 	byte	")"
378ab     00          | 	byte	0
378ac                 | LR__5684
378ac     28          | 	byte	"("
378ad     00          | 	byte	0
378ae                 | LR__5685
378ae     3A          | 	byte	":"
378af     00          | 	byte	0
378b0                 | LR__5686
378b0     20          | 	byte	" "
378b1     00          | 	byte	0
378b2                 | LR__5687
378b2     3E          | 	byte	">"
378b3     00          | 	byte	0
378b4                 | LR__5688
378b4     3C          | 	byte	"<"
378b5     00          | 	byte	0
378b6                 | LR__5689
378b6     3D          | 	byte	"="
378b7     00          | 	byte	0
378b8                 | LR__5690
378b8     62 65 65 70 | 	byte	"beep"
378bc     00          | 	byte	0
378bd                 | LR__5691
378bd     62 2E       | 	byte	"b."
378bf     00          | 	byte	0
378c0                 | LR__5692
378c0     62 6C 69 74 | 	byte	"blit"
378c4     00          | 	byte	0
378c5                 | LR__5693
378c5     62 6F 78    | 	byte	"box"
378c8     00          | 	byte	0
378c9                 | LR__5694
378c9     62 72 75 6E | 	byte	"brun"
378cd     00          | 	byte	0
378ce                 | LR__5695
378ce     62 72 2E    | 	byte	"br."
378d1     00          | 	byte	0
378d2                 | LR__5696
378d2     63 64       | 	byte	"cd"
378d4     00          | 	byte	0
378d5                 | LR__5697
378d5     63 68 61 6E 
378d9     67 65 66 72 
378dd     65 71       | 	byte	"changefreq"
378df     00          | 	byte	0
378e0                 | LR__5698
378e0     63 66 2E    | 	byte	"cf."
378e3     00          | 	byte	0
378e4                 | LR__5699
378e4     63 68 61 6E 
378e8     67 65 70 61 
378ec     6E          | 	byte	"changepan"
378ed     00          | 	byte	0
378ee                 | LR__5700
378ee     63 70 2E    | 	byte	"cp."
378f1     00          | 	byte	0
378f2                 | LR__5701
378f2     63 68 61 6E 
378f6     67 65 76 6F 
378fa     6C          | 	byte	"changevol"
378fb     00          | 	byte	0
378fc                 | LR__5702
378fc     63 76 2E    | 	byte	"cv."
378ff     00          | 	byte	0
37900                 | LR__5703
37900     63 68 61 6E 
37904     67 65 77 61 
37908     76 65       | 	byte	"changewave"
3790a     00          | 	byte	0
3790b                 | LR__5704
3790b     63 77 2E    | 	byte	"cw."
3790e     00          | 	byte	0
3790f                 | LR__5705
3790f     63 69 72 63 
37913     6C 65       | 	byte	"circle"
37915     00          | 	byte	0
37916                 | LR__5706
37916     63 69 2E    | 	byte	"ci."
37919     00          | 	byte	0
3791a                 | LR__5707
3791a     63 6C 69 63 
3791e     6B          | 	byte	"click"
3791f     00          | 	byte	0
37920                 | LR__5708
37920     63 6C 6F 73 
37924     65          | 	byte	"close"
37925     00          | 	byte	0
37926                 | LR__5709
37926     63 6C 73    | 	byte	"cls"
37929     00          | 	byte	0
3792a                 | LR__5710
3792a     63 6F 67 73 
3792e     74 6F 70    | 	byte	"cogstop"
37931     00          | 	byte	0
37932                 | LR__5711
37932     63 6F 6C 6F 
37936     72          | 	byte	"color"
37937     00          | 	byte	0
37938                 | LR__5712
37938     63 2E       | 	byte	"c."
3793a     00          | 	byte	0
3793b                 | LR__5713
3793b     63 6F 70 79 | 	byte	"copy"
3793f     00          | 	byte	0
37940                 | LR__5714
37940     63 75 72 73 
37944     6F 72       | 	byte	"cursor"
37946     00          | 	byte	0
37947                 | LR__5715
37947     64 61 74 61 | 	byte	"data"
3794b     00          | 	byte	0
3794c                 | LR__5716
3794c     64 65 66 63 
37950     68 61 72    | 	byte	"defchar"
37953     00          | 	byte	0
37954                 | LR__5717
37954     64 65 66 73 
37958     6E 64       | 	byte	"defsnd"
3795a     00          | 	byte	0
3795b                 | LR__5718
3795b     64 65 66 65 
3795f     6E 76       | 	byte	"defenv"
37961     00          | 	byte	0
37962                 | LR__5719
37962     64 65 66 73 
37966     70 72 69 74 
3796a     65          | 	byte	"defsprite"
3796b     00          | 	byte	0
3796c                 | LR__5720
3796c     64 73 2E    | 	byte	"ds."
3796f     00          | 	byte	0
37970                 | LR__5721
37970     64 65 67    | 	byte	"deg"
37973     00          | 	byte	0
37974                 | LR__5722
37974     64 65 6C 65 
37978     74 65       | 	byte	"delete"
3797a     00          | 	byte	0
3797b                 | LR__5723
3797b     64 69 6D    | 	byte	"dim"
3797e     00          | 	byte	0
3797f                 | LR__5724
3797f     64 69 72    | 	byte	"dir"
37982     00          | 	byte	0
37983                 | LR__5725
37983     64 70 6F 6B 
37987     65          | 	byte	"dpoke"
37988     00          | 	byte	0
37989                 | LR__5726
37989     64 72 61 77 | 	byte	"draw"
3798d     00          | 	byte	0
3798e                 | LR__5727
3798e     64 72 61 77 
37992     74 6F       | 	byte	"drawto"
37994     00          | 	byte	0
37995                 | LR__5728
37995     64 72 2E    | 	byte	"dr."
37998     00          | 	byte	0
37999                 | LR__5729
37999     65 6C 73 65 | 	byte	"else"
3799d     00          | 	byte	0
3799e                 | LR__5730
3799e     65 6E 64    | 	byte	"end"
379a1     00          | 	byte	0
379a2                 | LR__5731
379a2     65 6E 74 65 
379a6     72          | 	byte	"enter"
379a7     00          | 	byte	0
379a8                 | LR__5732
379a8     65 2E       | 	byte	"e."
379aa     00          | 	byte	0
379ab                 | LR__5733
379ab     66 63 69 72 
379af     63 6C 65    | 	byte	"fcircle"
379b2     00          | 	byte	0
379b3                 | LR__5734
379b3     66 63 2E    | 	byte	"fc."
379b6     00          | 	byte	0
379b7                 | LR__5735
379b7     66 69 6C 6C | 	byte	"fill"
379bb     00          | 	byte	0
379bc                 | LR__5736
379bc     66 69 2E    | 	byte	"fi."
379bf     00          | 	byte	0
379c0                 | LR__5737
379c0     66 6F 6E 74 | 	byte	"font"
379c4     00          | 	byte	0
379c5                 | LR__5738
379c5     66 6F 72    | 	byte	"for"
379c8     00          | 	byte	0
379c9                 | LR__5739
379c9     66 2E       | 	byte	"f."
379cb     00          | 	byte	0
379cc                 | LR__5740
379cc     66 72 61 6D 
379d0     65          | 	byte	"frame"
379d1     00          | 	byte	0
379d2                 | LR__5741
379d2     66 72 2E    | 	byte	"fr."
379d5     00          | 	byte	0
379d6                 | LR__5742
379d6     67 65 74    | 	byte	"get"
379d9     00          | 	byte	0
379da                 | LR__5743
379da     67 6F 73 75 
379de     62          | 	byte	"gosub"
379df     00          | 	byte	0
379e0                 | LR__5744
379e0     67 6F 74 6F | 	byte	"goto"
379e4     00          | 	byte	0
379e5                 | LR__5745
379e5     67 2E       | 	byte	"g."
379e7     00          | 	byte	0
379e8                 | LR__5746
379e8     69 66       | 	byte	"if"
379ea     00          | 	byte	0
379eb                 | LR__5747
379eb     69 6E 6B    | 	byte	"ink"
379ee     00          | 	byte	0
379ef                 | LR__5748
379ef     69 2E       | 	byte	"i."
379f1     00          | 	byte	0
379f2                 | LR__5749
379f2     69 6E 70 75 
379f6     74          | 	byte	"input"
379f7     00          | 	byte	0
379f8                 | LR__5750
379f8     6C 69 73 74 | 	byte	"list"
379fc     00          | 	byte	0
379fd                 | LR__5751
379fd     6C 2E       | 	byte	"l."
379ff     00          | 	byte	0
37a00                 | LR__5752
37a00     6C 6F 61 64 | 	byte	"load"
37a04     00          | 	byte	0
37a05                 | LR__5753
37a05     6C 6F 2E    | 	byte	"lo."
37a08     00          | 	byte	0
37a09                 | LR__5754
37a09     6C 70 6F 6B 
37a0d     65          | 	byte	"lpoke"
37a0e     00          | 	byte	0
37a0f                 | LR__5755
37a0f     6D 6B 64 69 
37a13     72          | 	byte	"mkdir"
37a14     00          | 	byte	0
37a15                 | LR__5756
37a15     6D 6F 64 65 | 	byte	"mode"
37a19     00          | 	byte	0
37a1a                 | LR__5757
37a1a     6D 2E       | 	byte	"m."
37a1c     00          | 	byte	0
37a1d                 | LR__5758
37a1d     6D 6F 75 73 
37a21     65          | 	byte	"mouse"
37a22     00          | 	byte	0
37a23                 | LR__5759
37a23     6E 65 77    | 	byte	"new"
37a26     00          | 	byte	0
37a27                 | LR__5760
37a27     6E 65 78 74 | 	byte	"next"
37a2b     00          | 	byte	0
37a2c                 | LR__5761
37a2c     6E 2E       | 	byte	"n."
37a2e     00          | 	byte	0
37a2f                 | LR__5762
37a2f     6F 6E       | 	byte	"on"
37a31     00          | 	byte	0
37a32                 | LR__5763
37a32     6F 70 65 6E | 	byte	"open"
37a36     00          | 	byte	0
37a37                 | LR__5764
37a37     70 61 70 65 
37a3b     72          | 	byte	"paper"
37a3c     00          | 	byte	0
37a3d                 | LR__5765
37a3d     70 61 2E    | 	byte	"pa."
37a40     00          | 	byte	0
37a41                 | LR__5766
37a41     70 69 6E 66 
37a45     6C 6F 61 74 | 	byte	"pinfloat"
37a49     00          | 	byte	0
37a4a                 | LR__5767
37a4a     70 69 6E 68 
37a4e     69          | 	byte	"pinhi"
37a4f     00          | 	byte	0
37a50                 | LR__5768
37a50     70 69 6E 6C 
37a54     6F          | 	byte	"pinlo"
37a55     00          | 	byte	0
37a56                 | LR__5769
37a56     70 69 6E 73 
37a5a     74 61 72 74 | 	byte	"pinstart"
37a5e     00          | 	byte	0
37a5f                 | LR__5770
37a5f     70 69 6E 74 
37a63     6F 67 67 6C 
37a67     65          | 	byte	"pintoggle"
37a68     00          | 	byte	0
37a69                 | LR__5771
37a69     70 69 6E 77 
37a6d     72 69 74 65 | 	byte	"pinwrite"
37a71     00          | 	byte	0
37a72                 | LR__5772
37a72     70 6C 61 79 | 	byte	"play"
37a76     00          | 	byte	0
37a77                 | LR__5773
37a77     70 2E       | 	byte	"p."
37a79     00          | 	byte	0
37a7a                 | LR__5774
37a7a     70 6C 6F 74 | 	byte	"plot"
37a7e     00          | 	byte	0
37a7f                 | LR__5775
37a7f     70 6C 2E    | 	byte	"pl."
37a82     00          | 	byte	0
37a83                 | LR__5776
37a83     70 6F 6B 65 | 	byte	"poke"
37a87     00          | 	byte	0
37a88                 | LR__5777
37a88     70 6F 70    | 	byte	"pop"
37a8b     00          | 	byte	0
37a8c                 | LR__5778
37a8c     70 6F 73 69 
37a90     74 69 6F 6E | 	byte	"position"
37a94     00          | 	byte	0
37a95                 | LR__5779
37a95     70 6F 73 2E | 	byte	"pos."
37a99     00          | 	byte	0
37a9a                 | LR__5780
37a9a     70 72 69 6E 
37a9e     74          | 	byte	"print"
37a9f     00          | 	byte	0
37aa0                 | LR__5781
37aa0     3F          | 	byte	"?"
37aa1     00          | 	byte	0
37aa2                 | LR__5782
37aa2     70 75 74    | 	byte	"put"
37aa5     00          | 	byte	0
37aa6                 | LR__5783
37aa6     72 61 64    | 	byte	"rad"
37aa9     00          | 	byte	0
37aaa                 | LR__5784
37aaa     72 65 61 64 | 	byte	"read"
37aae     00          | 	byte	0
37aaf                 | LR__5785
37aaf     72 65 6C 65 
37ab3     61 73 65    | 	byte	"release"
37ab6     00          | 	byte	0
37ab7                 | LR__5786
37ab7     72 65 6D    | 	byte	"rem"
37aba     00          | 	byte	0
37abb                 | LR__5787
37abb     27          | 	byte	"'"
37abc     00          | 	byte	0
37abd                 | LR__5788
37abd     72 65 73 74 
37ac1     6F 72 65    | 	byte	"restore"
37ac4     00          | 	byte	0
37ac5                 | LR__5789
37ac5     72 65 73 74 
37ac9     6F 72 65 70 
37acd     61 6C 65 74 
37ad1     74 65       | 	byte	"restorepalette"
37ad3     00          | 	byte	0
37ad4                 | LR__5790
37ad4     72 70 2E    | 	byte	"rp."
37ad7     00          | 	byte	0
37ad8                 | LR__5791
37ad8     72 65 74 75 
37adc     72 6E       | 	byte	"return"
37ade     00          | 	byte	0
37adf                 | LR__5792
37adf     72 75 6E    | 	byte	"run"
37ae2     00          | 	byte	0
37ae3                 | LR__5793
37ae3     73 61 76 65 | 	byte	"save"
37ae7     00          | 	byte	0
37ae8                 | LR__5794
37ae8     73 2E       | 	byte	"s."
37aea     00          | 	byte	0
37aeb                 | LR__5795
37aeb     73 65 74 63 
37aef     6F 6C 6F 72 | 	byte	"setcolor"
37af3     00          | 	byte	0
37af4                 | LR__5796
37af4     73 63 2E    | 	byte	"sc."
37af7     00          | 	byte	0
37af8                 | LR__5797
37af8     73 65 74 64 
37afc     65 6C 61 79 | 	byte	"setdelay"
37b00     00          | 	byte	0
37b01                 | LR__5798
37b01     73 64 2E    | 	byte	"sd."
37b04     00          | 	byte	0
37b05                 | LR__5799
37b05     73 65 74 65 
37b09     6E 76       | 	byte	"setenv"
37b0b     00          | 	byte	0
37b0c                 | LR__5800
37b0c     73 65 2E    | 	byte	"se."
37b0f     00          | 	byte	0
37b10                 | LR__5801
37b10     73 65 74 6C 
37b14     65 6E       | 	byte	"setlen"
37b16     00          | 	byte	0
37b17                 | LR__5802
37b17     73 6C 2E    | 	byte	"sl."
37b1a     00          | 	byte	0
37b1b                 | LR__5803
37b1b     73 65 74 70 
37b1f     61 6E       | 	byte	"setpan"
37b21     00          | 	byte	0
37b22                 | LR__5804
37b22     73 70 2E    | 	byte	"sp."
37b25     00          | 	byte	0
37b26                 | LR__5805
37b26     73 65 74 73 
37b2a     75 73 74 61 
37b2e     69 6E       | 	byte	"setsustain"
37b30     00          | 	byte	0
37b31                 | LR__5806
37b31     73 73 2E    | 	byte	"ss."
37b34     00          | 	byte	0
37b35                 | LR__5807
37b35     73 65 74 76 
37b39     6F 6C       | 	byte	"setvol"
37b3b     00          | 	byte	0
37b3c                 | LR__5808
37b3c     73 76 2E    | 	byte	"sv."
37b3f     00          | 	byte	0
37b40                 | LR__5809
37b40     73 65 74 77 
37b44     61 76 65    | 	byte	"setwave"
37b47     00          | 	byte	0
37b48                 | LR__5810
37b48     73 77 2E    | 	byte	"sw."
37b4b     00          | 	byte	0
37b4c                 | LR__5811
37b4c     73 65 74 77 
37b50     61 76       | 	byte	"setwav"
37b52     00          | 	byte	0
37b53                 | LR__5812
37b53     73 68 75 74 
37b57     75 70       | 	byte	"shutup"
37b59     00          | 	byte	0
37b5a                 | LR__5813
37b5a     73 68 2E    | 	byte	"sh."
37b5d     00          | 	byte	0
37b5e                 | LR__5814
37b5e     73 6F 75 6E 
37b62     64          | 	byte	"sound"
37b63     00          | 	byte	0
37b64                 | LR__5815
37b64     73 6F 2E    | 	byte	"so."
37b67     00          | 	byte	0
37b68                 | LR__5816
37b68     73 70 72 69 
37b6c     74 65       | 	byte	"sprite"
37b6e     00          | 	byte	0
37b6f                 | LR__5817
37b6f     73 70 72 2E | 	byte	"spr."
37b73     00          | 	byte	0
37b74                 | LR__5818
37b74     74 68 65 6E | 	byte	"then"
37b78     00          | 	byte	0
37b79                 | LR__5819
37b79     77 61 69 74 
37b7d     6D 73       | 	byte	"waitms"
37b7f     00          | 	byte	0
37b80                 | LR__5820
37b80     77 2E       | 	byte	"w."
37b82     00          | 	byte	0
37b83                 | LR__5821
37b83     77 61 69 74 
37b87     63 6C 6F 63 
37b8b     6B          | 	byte	"waitclock"
37b8c     00          | 	byte	0
37b8d                 | LR__5822
37b8d     77 63 2E    | 	byte	"wc."
37b90     00          | 	byte	0
37b91                 | LR__5823
37b91     77 61 69 74 
37b95     76 62 6C    | 	byte	"waitvbl"
37b98     00          | 	byte	0
37b99                 | LR__5824
37b99     77 76 2E    | 	byte	"wv."
37b9c     00          | 	byte	0
37b9d                 | LR__5825
37b9d     77 72 70 69 
37ba1     6E          | 	byte	"wrpin"
37ba2     00          | 	byte	0
37ba3                 | LR__5826
37ba3     77 78 70 69 
37ba7     6E          | 	byte	"wxpin"
37ba8     00          | 	byte	0
37ba9                 | LR__5827
37ba9     77 79 70 69 
37bad     6E          | 	byte	"wypin"
37bae     00          | 	byte	0
37baf                 | LR__5828
37baf     61 62 73    | 	byte	"abs"
37bb2     00          | 	byte	0
37bb3                 | LR__5829
37bb3     61 63 6F 73 | 	byte	"acos"
37bb7     00          | 	byte	0
37bb8                 | LR__5830
37bb8     61 64 72    | 	byte	"adr"
37bbb     00          | 	byte	0
37bbc                 | LR__5831
37bbc     61 64 64 72 | 	byte	"addr"
37bc0     00          | 	byte	0
37bc1                 | LR__5832
37bc1     61 73 63    | 	byte	"asc"
37bc4     00          | 	byte	0
37bc5                 | LR__5833
37bc5     61 73 69 6E | 	byte	"asin"
37bc9     00          | 	byte	0
37bca                 | LR__5834
37bca     61 74 6E    | 	byte	"atn"
37bcd     00          | 	byte	0
37bce                 | LR__5835
37bce     62 69 6E 24 | 	byte	"bin$"
37bd2     00          | 	byte	0
37bd3                 | LR__5836
37bd3     63 68 72 24 | 	byte	"chr$"
37bd7     00          | 	byte	0
37bd8                 | LR__5837
37bd8     63 6F 67 69 
37bdc     6E 69 74    | 	byte	"coginit"
37bdf     00          | 	byte	0
37be0                 | LR__5838
37be0     63 6F 73    | 	byte	"cos"
37be3     00          | 	byte	0
37be4                 | LR__5839
37be4     64 70 65 65 
37be8     6B          | 	byte	"dpeek"
37be9     00          | 	byte	0
37bea                 | LR__5840
37bea     66 69 6E 64 
37bee     66 69 72 73 
37bf2     74          | 	byte	"findfirst"
37bf3     00          | 	byte	0
37bf4                 | LR__5841
37bf4     66 69 6E 64 
37bf8     6E 65 78 74 | 	byte	"findnext"
37bfc     00          | 	byte	0
37bfd                 | LR__5842
37bfd     66 72 61 6D 
37c01     65 62 75 66 | 	byte	"framebuf"
37c05     00          | 	byte	0
37c06                 | LR__5843
37c06     66 62 2E    | 	byte	"fb."
37c09     00          | 	byte	0
37c0a                 | LR__5844
37c0a     66 72 65    | 	byte	"fre"
37c0d     00          | 	byte	0
37c0e                 | LR__5845
37c0e     67 63 2E    | 	byte	"gc."
37c11     00          | 	byte	0
37c12                 | LR__5846
37c12     67 65 74 63 
37c16     6F 6C 6F 72 | 	byte	"getcolor"
37c1a     00          | 	byte	0
37c1b                 | LR__5847
37c1b     67 65 74 70 
37c1f     69 78 65 6C | 	byte	"getpixel"
37c23     00          | 	byte	0
37c24                 | LR__5848
37c24     67 65 2E    | 	byte	"ge."
37c27     00          | 	byte	0
37c28                 | LR__5849
37c28     67 65 74 65 
37c2c     6E 76 73 75 
37c30     73 74 61 69 
37c34     6E          | 	byte	"getenvsustain"
37c35     00          | 	byte	0
37c36                 | LR__5850
37c36     67 65 74 6E 
37c3a     6F 74 65 76 
37c3e     61 6C 75 65 | 	byte	"getnotevalue"
37c42     00          | 	byte	0
37c43                 | LR__5851
37c43     67 65 74 74 
37c47     69 6D 65    | 	byte	"gettime"
37c4a     00          | 	byte	0
37c4b                 | LR__5852
37c4b     67 74 2E    | 	byte	"gt."
37c4e     00          | 	byte	0
37c4f                 | LR__5853
37c4f     68 65 78 24 | 	byte	"hex$"
37c53     00          | 	byte	0
37c54                 | LR__5854
37c54     69 6E 6B 65 
37c58     79 24       | 	byte	"inkey$"
37c5a     00          | 	byte	0
37c5b                 | LR__5855
37c5b     69 6E 74    | 	byte	"int"
37c5e     00          | 	byte	0
37c5f                 | LR__5856
37c5f     6C 65 66 74 
37c63     24          | 	byte	"left$"
37c64     00          | 	byte	0
37c65                 | LR__5857
37c65     6C 65 6E    | 	byte	"len"
37c68     00          | 	byte	0
37c69                 | LR__5858
37c69     6C 6F 67    | 	byte	"log"
37c6c     00          | 	byte	0
37c6d                 | LR__5859
37c6d     6C 70 65 65 
37c71     6B          | 	byte	"lpeek"
37c72     00          | 	byte	0
37c73                 | LR__5860
37c73     6D 65 6D 74 
37c77     6F 70       | 	byte	"memtop"
37c79     00          | 	byte	0
37c7a                 | LR__5861
37c7a     6D 65 6D 6C 
37c7e     6F          | 	byte	"memlo"
37c7f     00          | 	byte	0
37c80                 | LR__5862
37c80     6D 69 64 24 | 	byte	"mid$"
37c84     00          | 	byte	0
37c85                 | LR__5863
37c85     6D 6F 75 73 
37c89     65 6B       | 	byte	"mousek"
37c8b     00          | 	byte	0
37c8c                 | LR__5864
37c8c     6D 6F 75 73 
37c90     65 77       | 	byte	"mousew"
37c92     00          | 	byte	0
37c93                 | LR__5865
37c93     6D 6F 75 73 
37c97     65 78       | 	byte	"mousex"
37c99     00          | 	byte	0
37c9a                 | LR__5866
37c9a     6D 6F 75 73 
37c9e     65 79       | 	byte	"mousey"
37ca0     00          | 	byte	0
37ca1                 | LR__5867
37ca1     70 61 64 73 | 	byte	"pads"
37ca5     00          | 	byte	0
37ca6                 | LR__5868
37ca6     70 61 64 77 | 	byte	"padw"
37caa     00          | 	byte	0
37cab                 | LR__5869
37cab     70 61 64 78 | 	byte	"padx"
37caf     00          | 	byte	0
37cb0                 | LR__5870
37cb0     70 61 64 79 | 	byte	"pady"
37cb4     00          | 	byte	0
37cb5                 | LR__5871
37cb5     70 61 64 7A | 	byte	"padz"
37cb9     00          | 	byte	0
37cba                 | LR__5872
37cba     70 61 64 72 
37cbe     78          | 	byte	"padrx"
37cbf     00          | 	byte	0
37cc0                 | LR__5873
37cc0     70 61 64 72 
37cc4     79          | 	byte	"padry"
37cc5     00          | 	byte	0
37cc6                 | LR__5874
37cc6     70 61 64 72 
37cca     7A          | 	byte	"padrz"
37ccb     00          | 	byte	0
37ccc                 | LR__5875
37ccc     70 61 64 68 | 	byte	"padh"
37cd0     00          | 	byte	0
37cd1                 | LR__5876
37cd1     70 65 65 6B | 	byte	"peek"
37cd5     00          | 	byte	0
37cd6                 | LR__5877
37cd6     70 69 6E 72 
37cda     65 61 64    | 	byte	"pinread"
37cdd     00          | 	byte	0
37cde                 | LR__5878
37cde     72 64 70 69 
37ce2     6E          | 	byte	"rdpin"
37ce3     00          | 	byte	0
37ce4                 | LR__5879
37ce4     72 69 67 68 
37ce8     74 24       | 	byte	"right$"
37cea     00          | 	byte	0
37ceb                 | LR__5880
37ceb     72 71 70 69 
37cef     6E          | 	byte	"rqpin"
37cf0     00          | 	byte	0
37cf1                 | LR__5881
37cf1     72 6F 75 6E 
37cf5     64          | 	byte	"round"
37cf6     00          | 	byte	0
37cf7                 | LR__5882
37cf7     72 6E 64    | 	byte	"rnd"
37cfa     00          | 	byte	0
37cfb                 | LR__5883
37cfb     73 69 6E    | 	byte	"sin"
37cfe     00          | 	byte	0
37cff                 | LR__5884
37cff     73 71 72    | 	byte	"sqr"
37d02     00          | 	byte	0
37d03                 | LR__5885
37d03     73 74 69 63 
37d07     6B          | 	byte	"stick"
37d08     00          | 	byte	0
37d09                 | LR__5886
37d09     73 74 72 69 
37d0d     67          | 	byte	"strig"
37d0e     00          | 	byte	0
37d0f                 | LR__5887
37d0f     73 74 72 24 | 	byte	"str$"
37d13     00          | 	byte	0
37d14                 | LR__5888
37d14     74 61 6E    | 	byte	"tan"
37d17     00          | 	byte	0
37d18                 | LR__5889
37d18     76 61 6C    | 	byte	"val"
37d1b     00          | 	byte	0
37d1c                 | LR__5890
37d1c     76 61 72 70 
37d20     74 72       | 	byte	"varptr"
37d22     00          | 	byte	0
37d23                 | LR__5891
37d23     61          | 	byte	"a"
37d24     00          | 	byte	0
37d25                 | LR__5892
37d25     7A          | 	byte	"z"
37d26     00          | 	byte	0
37d27                 | LR__5893
37d27     5F          | 	byte	"_"
37d28     00          | 	byte	0
37d29                 | LR__5894
37d29     61          | 	byte	"a"
37d2a     00          | 	byte	0
37d2b                 | LR__5895
37d2b     7A          | 	byte	"z"
37d2c     00          | 	byte	0
37d2d                 | LR__5896
37d2d     30          | 	byte	"0"
37d2e     00          | 	byte	0
37d2f                 | LR__5897
37d2f     39          | 	byte	"9"
37d30     00          | 	byte	0
37d31                 | LR__5898
37d31     5F          | 	byte	"_"
37d32     00          | 	byte	0
37d33                 | LR__5899
37d33     2E          | 	byte	"."
37d34     00          | 	byte	0
37d35                 | LR__5900
37d35     61          | 	byte	"a"
37d36     00          | 	byte	0
37d37                 | LR__5901
37d37     7A          | 	byte	"z"
37d38     00          | 	byte	0
37d39                 | LR__5902
37d39     30          | 	byte	"0"
37d3a     00          | 	byte	0
37d3b                 | LR__5903
37d3b     39          | 	byte	"9"
37d3c     00          | 	byte	0
37d3d                 | LR__5904
37d3d     5F          | 	byte	"_"
37d3e     00          | 	byte	0
37d3f                 | LR__5905
37d3f     24          | 	byte	"$"
37d40     00          | 	byte	0
37d41                 | LR__5906
37d41     25          | 	byte	"%"
37d42     00          | 	byte	0
37d43                 | LR__5907
37d43     21          | 	byte	"!"
37d44     00          | 	byte	0
37d45                 | LR__5908
37d45     30          | 	byte	"0"
37d46     00          | 	byte	0
37d47                 | LR__5909
37d47     39          | 	byte	"9"
37d48     00          | 	byte	0
37d49                 | LR__5910
37d49     2E          | 	byte	"."
37d4a     00          | 	byte	0
37d4b                 | LR__5911
37d4b     24          | 	byte	"$"
37d4c     00          | 	byte	0
37d4d                 | LR__5912
37d4d     25          | 	byte	"%"
37d4e     00          | 	byte	0
37d4f                 | LR__5913
37d4f     2D          | 	byte	"-"
37d50     00          | 	byte	0
37d51                 | LR__5914
37d51     2E          | 	byte	"."
37d52     00          | 	byte	0
37d53                 | LR__5915
37d53     24          | 	byte	"$"
37d54     00          | 	byte	0
37d55                 | LR__5916
37d55     25          | 	byte	"%"
37d56     00          | 	byte	0
37d57                 | LR__5917
37d57     30          | 	byte	"0"
37d58     00          | 	byte	0
37d59                 | LR__5918
37d59     39          | 	byte	"9"
37d5a     00          | 	byte	0
37d5b                 | LR__5919
37d5b     5F          | 	byte	"_"
37d5c     00          | 	byte	0
37d5d                 | LR__5920
37d5d     2E          | 	byte	"."
37d5e     00          | 	byte	0
37d5f                 | LR__5921
37d5f     45          | 	byte	"E"
37d60     00          | 	byte	0
37d61                 | LR__5922
37d61     65          | 	byte	"e"
37d62     00          | 	byte	0
37d63                 | LR__5923
37d63     2D          | 	byte	"-"
37d64     00          | 	byte	0
37d65                 | LR__5924
37d65     61          | 	byte	"a"
37d66     00          | 	byte	0
37d67                 | LR__5925
37d67     66          | 	byte	"f"
37d68     00          | 	byte	0
37d69                 | LR__5926
37d69     30          | 	byte	"0"
37d6a     00          | 	byte	0
37d6b                 | LR__5927
37d6b     31          | 	byte	"1"
37d6c     00          | 	byte	0
37d6d                 | LR__5928
37d6d     5F          | 	byte	"_"
37d6e     00          | 	byte	0
37d6f                 | LR__5929
37d6f     2D          | 	byte	"-"
37d70     00          | 	byte	0
37d71                 | LR__5930
37d71     65          | 	byte	"e"
37d72     00          | 	byte	0
37d73                 | LR__5931
37d73     2E          | 	byte	"."
37d74     00          | 	byte	0
37d75                 | LR__5932
37d75     45          | 	byte	"E"
37d76     00          | 	byte	0
37d77                 | LR__5933
37d77     65          | 	byte	"e"
37d78     00          | 	byte	0
37d79                 | LR__5934
37d79     30          | 	byte	"0"
37d7a     00          | 	byte	0
37d7b                 | LR__5935
37d7b     39          | 	byte	"9"
37d7c     00          | 	byte	0
37d7d                 | LR__5936
37d7d     24          | 	byte	"$"
37d7e     00          | 	byte	0
37d7f                 | LR__5937
37d7f     25          | 	byte	"%"
37d80     00          | 	byte	0
37d81                 | LR__5938
37d81     2D          | 	byte	"-"
37d82     00          | 	byte	0
37d83                 | LR__5939
37d83     24          | 	byte	"$"
37d84     00          | 	byte	0
37d85                 | LR__5940
37d85     25          | 	byte	"%"
37d86     00          | 	byte	0
37d87                 | LR__5941
37d87     30          | 	byte	"0"
37d88     00          | 	byte	0
37d89                 | LR__5942
37d89     39          | 	byte	"9"
37d8a     00          | 	byte	0
37d8b                 | LR__5943
37d8b     5F          | 	byte	"_"
37d8c     00          | 	byte	0
37d8d                 | LR__5944
37d8d     30          | 	byte	"0"
37d8e     00          | 	byte	0
37d8f                 | LR__5945
37d8f     39          | 	byte	"9"
37d90     00          | 	byte	0
37d91                 | LR__5946
37d91     61          | 	byte	"a"
37d92     00          | 	byte	0
37d93                 | LR__5947
37d93     66          | 	byte	"f"
37d94     00          | 	byte	0
37d95                 | LR__5948
37d95     5F          | 	byte	"_"
37d96     00          | 	byte	0
37d97                 | LR__5949
37d97     30          | 	byte	"0"
37d98     00          | 	byte	0
37d99                 | LR__5950
37d99     31          | 	byte	"1"
37d9a     00          | 	byte	0
37d9b                 | LR__5951
37d9b     5F          | 	byte	"_"
37d9c     00          | 	byte	0
37d9d                 | LR__5952
37d9d     30          | 	byte	"0"
37d9e     00          | 	byte	0
37d9f                 | LR__5953
37d9f     39          | 	byte	"9"
37da0     00          | 	byte	0
37da1                 | LR__5954
37da1     5F          | 	byte	"_"
37da2     00          | 	byte	0
37da3                 | LR__5955
37da3     22          | 	byte	34
37da4     00          | 	byte	0
37da5                 | LR__5956
37da5     22          | 	byte	34
37da6     00          | 	byte	0
37da7                 | LR__5957
37da7     44 69 6D 3A 
37dab     20 61 74 20 
37daf     6C 69 6E 65 
37db3     20          | 	byte	"Dim: at line "
37db4     00          | 	byte	0
37db5                 | LR__5958
37db5     3A 20 77 61 
37db9     72 6E 69 6E 
37dbd     67 3A 20 74 
37dc1     68 65 20 76 
37dc5     61 72 69 61 
37dc9     62 6C 65 20 
37dcd     65 78 69 73 
37dd1     74 65 64 2E | 	byte	": warning: the variable existed."
37dd5     00          | 	byte	0
37dd6                 | LR__5959
37dd6     28          | 	byte	"("
37dd7     00          | 	byte	0
37dd8                 | LR__5960
37dd8     61 73       | 	byte	"as"
37dda     00          | 	byte	0
37ddb                 | LR__5961
37ddb     61 73       | 	byte	"as"
37ddd     00          | 	byte	0
37dde                 | LR__5962
37dde     2C          | 	byte	","
37ddf     00          | 	byte	0
37de0                 | LR__5963
37de0     29          | 	byte	")"
37de1     00          | 	byte	0
37de2                 | LR__5964
37de2     29          | 	byte	")"
37de3     00          | 	byte	0
37de4                 | LR__5965
37de4     61 73       | 	byte	"as"
37de6     00          | 	byte	0
37de7                 | LR__5966
37de7     62 79 74 65 | 	byte	"byte"
37deb     00          | 	byte	0
37dec                 | LR__5967
37dec     75 62 79 74 
37df0     65          | 	byte	"ubyte"
37df1     00          | 	byte	0
37df2                 | LR__5968
37df2     73 68 6F 72 
37df6     74          | 	byte	"short"
37df7     00          | 	byte	0
37df8                 | LR__5969
37df8     75 73 68 6F 
37dfc     72 74       | 	byte	"ushort"
37dfe     00          | 	byte	0
37dff                 | LR__5970
37dff     6C 6F 6E 67 | 	byte	"long"
37e03     00          | 	byte	0
37e04                 | LR__5971
37e04     69 6E 74 65 
37e08     67 65 72    | 	byte	"integer"
37e0b     00          | 	byte	0
37e0c                 | LR__5972
37e0c     75 6C 6F 6E 
37e10     67          | 	byte	"ulong"
37e11     00          | 	byte	0
37e12                 | LR__5973
37e12     69 6E 74 36 
37e16     34          | 	byte	"int64"
37e17     00          | 	byte	0
37e18                 | LR__5974
37e18     75 69 6E 74 
37e1c     36 34       | 	byte	"uint64"
37e1e     00          | 	byte	0
37e1f                 | LR__5975
37e1f     73 69 6E 67 
37e23     6C 65       | 	byte	"single"
37e25     00          | 	byte	0
37e26                 | LR__5976
37e26     64 6F 75 62 
37e2a     6C 65       | 	byte	"double"
37e2c     00          | 	byte	0
37e2d                 | LR__5977
37e2d     73 74 72 69 
37e31     6E 67       | 	byte	"string"
37e33     00          | 	byte	0
37e34                 | LR__5978
37e34     74 6F       | 	byte	"to"
37e36     00          | 	byte	0
37e37                 | LR__5979
37e37     73 74 65 70 | 	byte	"step"
37e3b     00          | 	byte	0
37e3c                 | LR__5980
37e3c     73 2E       | 	byte	"s."
37e3e     00          | 	byte	0
37e3f                 | LR__5981
37e3f     73 2E       | 	byte	"s."
37e41     00          | 	byte	0
37e42                 | LR__5982
37e42     67 6F 74 6F | 	byte	"goto"
37e46     00          | 	byte	0
37e47                 | LR__5983
37e47     67 6F 73 75 
37e4b     62          | 	byte	"gosub"
37e4c     00          | 	byte	0
37e4d                 | LR__5984
37e4d     24          | 	byte	"$"
37e4e     00          | 	byte	0
37e4f                 | LR__5985
37e4f     26 68       | 	byte	"&h"
37e51     00          | 	byte	0
37e52                 | LR__5986
37e52     25          | 	byte	"%"
37e53     00          | 	byte	0
37e54                 | LR__5987
37e54     26 62       | 	byte	"&b"
37e56     00          | 	byte	0
37e57                 | LR__5988
37e57                 | 	byte	
37e57     00          | 	byte	0
37e58                 | LR__5989
37e58     61 63 6F 73 
37e5c     3A 20       | 	byte	"acos: "
37e5e     00          | 	byte	0
37e5f                 | LR__5990
37e5f     61 73 63 3A 
37e63     20          | 	byte	"asc: "
37e64     00          | 	byte	0
37e65                 | LR__5991
37e65     61 73 63 3A 
37e69     20          | 	byte	"asc: "
37e6a     00          | 	byte	0
37e6b                 | LR__5992
37e6b     61 73 69 6E 
37e6f     3A 20       | 	byte	"asin: "
37e71     00          | 	byte	0
37e72                 | LR__5993
37e72     61 74 6E 3A 
37e76     20          | 	byte	"atn: "
37e77     00          | 	byte	0
37e78                 | LR__5994
37e78     62 6C 69 74 
37e7c     3A 20       | 	byte	"blit: "
37e7e     00          | 	byte	0
37e7f                 | LR__5995
37e7f     62 69 6E 24 
37e83     3A 20       | 	byte	"bin$: "
37e85     00          | 	byte	0
37e86                 | LR__5996
37e86     2F          | 	byte	"/"
37e87     00          | 	byte	0
37e88                 | LR__5997
37e88     2F 73 64 2F 
37e8c     62 69 6E 2F | 	byte	"/sd/bin/"
37e90     00          | 	byte	0
37e91                 | LR__5998
37e91     53 79 73 74 
37e95     65 6D 20 65 
37e99     72 72 6F 72 
37e9d     20          | 	byte	"System error "
37e9e     00          | 	byte	0
37e9f                 | LR__5999
37e9f     3A 20       | 	byte	": "
37ea1     00          | 	byte	0
37ea2                 | LR__6000
37ea2     2A          | 	byte	"*"
37ea3     00          | 	byte	0
37ea4                 | LR__6001
37ea4     2E 2E       | 	byte	".."
37ea6     00          | 	byte	0
37ea7                 | LR__6002
37ea7     2F          | 	byte	"/"
37ea8     00          | 	byte	0
37ea9                 | LR__6003
37ea9     2F          | 	byte	"/"
37eaa     00          | 	byte	0
37eab                 | LR__6004
37eab     53 79 73 74 
37eaf     65 6D 20 65 
37eb3     72 72 6F 72 
37eb7     20          | 	byte	"System error "
37eb8     00          | 	byte	0
37eb9                 | LR__6005
37eb9     3A 20       | 	byte	": "
37ebb     00          | 	byte	0
37ebc                 | LR__6006
37ebc     43 75 72 72 
37ec0     65 6E 74 20 
37ec4     64 69 72 65 
37ec8     63 74 6F 72 
37ecc     79 3A 20    | 	byte	"Current directory: "
37ecf     00          | 	byte	0
37ed0                 | LR__6007
37ed0     2F          | 	byte	"/"
37ed1     00          | 	byte	0
37ed2                 | LR__6008
37ed2     53 79 73 74 
37ed6     65 6D 20 65 
37eda     72 72 6F 72 
37ede     20          | 	byte	"System error "
37edf     00          | 	byte	0
37ee0                 | LR__6009
37ee0     3A 20       | 	byte	": "
37ee2     00          | 	byte	0
37ee3                 | LR__6010
37ee3     43 75 72 72 
37ee7     65 6E 74 20 
37eeb     64 69 72 65 
37eef     63 74 6F 72 
37ef3     79 3A 20    | 	byte	"Current directory: "
37ef6     00          | 	byte	0
37ef7                 | LR__6011
37ef7     2F          | 	byte	"/"
37ef8     00          | 	byte	0
37ef9                 | LR__6012
37ef9     2F          | 	byte	"/"
37efa     00          | 	byte	0
37efb                 | LR__6013
37efb     2F          | 	byte	"/"
37efc     00          | 	byte	0
37efd                 | LR__6014
37efd     53 79 73 74 
37f01     65 6D 20 65 
37f05     72 72 6F 72 
37f09     20          | 	byte	"System error "
37f0a     00          | 	byte	0
37f0b                 | LR__6015
37f0b     3A 20       | 	byte	": "
37f0d     00          | 	byte	0
37f0e                 | LR__6016
37f0e     43 75 72 72 
37f12     65 6E 74 20 
37f16     64 69 72 65 
37f1a     63 74 6F 72 
37f1e     79 3A 20    | 	byte	"Current directory: "
37f21     00          | 	byte	0
37f22                 | LR__6017
37f22     63 68 72 24 
37f26     3A 20       | 	byte	"chr$: "
37f28     00          | 	byte	0
37f29                 | LR__6018
37f29     63 68 61 6E 
37f2d     6E 65 6C 23 
37f31     20 65 78 70 
37f35     65 63 74 65 
37f39     64          | 	byte	"channel# expected"
37f3a     00          | 	byte	0
37f3b                 | LR__6019
37f3b     63 6F 67 69 
37f3f     6E 69 74 3A 
37f43     20          | 	byte	"coginit: "
37f44     00          | 	byte	0
37f45                 | LR__6020
37f45     53 79 73 74 
37f49     65 6D 20 65 
37f4d     72 72 6F 72 
37f51     20 2D 20    | 	byte	"System error - "
37f54     00          | 	byte	0
37f55                 | LR__6021
37f55     20 69 6E 20 
37f59     6C 69 6E 65 
37f5d     20          | 	byte	" in line "
37f5e     00          | 	byte	0
37f5f                 | LR__6022
37f5f     3A 20       | 	byte	": "
37f61     00          | 	byte	0
37f62                 | LR__6023
37f62     2C 20 66 69 
37f66     6C 65 20 6E 
37f6a     61 6D 65 3A 
37f6e     20          | 	byte	", file name: "
37f6f     00          | 	byte	0
37f70                 | LR__6024
37f70     53 79 73 74 
37f74     65 6D 20 65 
37f78     72 72 6F 72 
37f7c     20 2D 20    | 	byte	"System error - "
37f7f     00          | 	byte	0
37f80                 | LR__6025
37f80     20 69 6E 20 
37f84     6C 69 6E 65 
37f88     20          | 	byte	" in line "
37f89     00          | 	byte	0
37f8a                 | LR__6026
37f8a     3A 20       | 	byte	": "
37f8c     00          | 	byte	0
37f8d                 | LR__6027
37f8d     2C 20 66 69 
37f91     6C 65 20 6E 
37f95     61 6D 65 3A 
37f99     20          | 	byte	", file name: "
37f9a     00          | 	byte	0
37f9b                 | LR__6028
37f9b     63 6F 73 3A 
37f9f     20          | 	byte	"cos: "
37fa0     00          | 	byte	0
37fa1                 | LR__6029
37fa1                 | 	byte	
37fa1     00          | 	byte	0
37fa2                 | LR__6030
37fa2                 | 	byte	
37fa2     00          | 	byte	0
37fa3                 | LR__6031
37fa3     2F 73 64 2F 
37fa7     6D 65 64 69 
37fab     61 2F 68 2F | 	byte	"/sd/media/h/"
37faf     00          | 	byte	0
37fb0                 | LR__6032
37fb0     53 79 73 74 
37fb4     65 6D 20 65 
37fb8     72 72 6F 72 
37fbc     20          | 	byte	"System error "
37fbd     00          | 	byte	0
37fbe                 | LR__6033
37fbe     3A 20       | 	byte	": "
37fc0     00          | 	byte	0
37fc1                 | LR__6034
37fc1                 | 	byte	
37fc1     00          | 	byte	0
37fc2                 | LR__6035
37fc2                 | 	byte	
37fc2     00          | 	byte	0
37fc3                 | LR__6036
37fc3     2F 73 64 2F 
37fc7     6D 65 64 69 
37fcb     61 2F 73 2F | 	byte	"/sd/media/s/"
37fcf     00          | 	byte	0
37fd0                 | LR__6037
37fd0     53 79 73 74 
37fd4     65 6D 20 65 
37fd8     72 72 6F 72 
37fdc     20          | 	byte	"System error "
37fdd     00          | 	byte	0
37fde                 | LR__6038
37fde     3A 20       | 	byte	": "
37fe0     00          | 	byte	0
37fe1                 | LR__6039
37fe1     2F          | 	byte	"/"
37fe2     00          | 	byte	0
37fe3                 | LR__6040
37fe3     2F          | 	byte	"/"
37fe4     00          | 	byte	0
37fe5                 | LR__6041
37fe5     2F          | 	byte	"/"
37fe6     00          | 	byte	0
37fe7                 | LR__6042
37fe7     43 61 6E 6E 
37feb     6F 74 20 64 
37fef     65 6C 65 74 
37ff3     65 20 66 69 
37ff7     6C 65 20 6F 
37ffb     72 20 66 69 
37fff     6C 65 20 64 
38003     6F 65 73 6E 
38007     27 74 20 65 
3800b     78 69 73 74 
3800f     3A 20 73 79 
38013     73 74 65 6D 
38017     20 65 72 72 
3801b     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
3801e     00          | 	byte	0
3801f                 | LR__6043
3801f     43 75 72 72 
38023     65 6E 74 20 
38027     64 69 72 65 
3802b     63 74 6F 72 
3802f     79 3A 20    | 	byte	"Current directory: "
38032     00          | 	byte	0
38033                 | LR__6044
38033                 | 	byte	
38033     00          | 	byte	0
38034                 | LR__6045
38034     2A          | 	byte	"*"
38035     00          | 	byte	0
38036                 | LR__6046
38036                 | 	byte	
38036     00          | 	byte	0
38037                 | LR__6047
38037     5B 64 69 72 
3803b     5D 20       | 	byte	"[dir] "
3803d     00          | 	byte	0
3803e                 | LR__6048
3803e     4D 6F 72 65 
38042     20 74 68 61 
38046     6E 20 31 32 
3804a     38 20 65 6E 
3804e     74 72 69 65 
38052     73 20 66 6F 
38056     75 6E 64 3A 
3805a     20 63 6C 65 
3805e     61 6E 20 79 
38062     6F 75 72 20 
38066     64 69 72 65 
3806a     63 74 6F 72 
3806e     79          | 	byte	"More than 128 entries found: clean your directory"
3806f     00          | 	byte	0
38070                 | LR__6049
38070     2A          | 	byte	"*"
38071     00          | 	byte	0
38072                 | LR__6050
38072                 | 	byte	
38072     00          | 	byte	0
38073                 | LR__6051
38073     4D 6F 72 65 
38077     20 74 68 61 
3807b     6E 20 31 32 
3807f     38 20 65 6E 
38083     74 72 69 65 
38087     73 20 66 6F 
3808b     75 6E 64 3A 
3808f     20 63 6C 65 
38093     61 6E 20 79 
38097     6F 75 72 20 
3809b     64 69 72 65 
3809f     63 74 6F 72 
380a3     79          | 	byte	"More than 128 entries found: clean your directory"
380a4     00          | 	byte	0
380a5                 | LR__6052
380a5     45 72 72 6F 
380a9     72 20       | 	byte	"Error "
380ab     00          | 	byte	0
380ac                 | LR__6053
380ac     3A 20       | 	byte	": "
380ae     00          | 	byte	0
380af                 | LR__6054
380af     66 69 6E 64 
380b3     66 69 72 73 
380b7     74 3A 20    | 	byte	"findfirst: "
380ba     00          | 	byte	0
380bb                 | LR__6055
380bb     66 69 6E 64 
380bf     66 69 72 73 
380c3     74 3A 20    | 	byte	"findfirst: "
380c6     00          | 	byte	0
380c7                 | LR__6056
380c7     66 69 6E 64 
380cb     66 69 72 73 
380cf     74 3A 20    | 	byte	"findfirst: "
380d2     00          | 	byte	0
380d3                 | LR__6057
380d3                 | 	byte	
380d3     00          | 	byte	0
380d4                 | LR__6058
380d4     66 69 6E 64 
380d8     66 69 72 73 
380dc     74 3A 20    | 	byte	"findfirst: "
380df     00          | 	byte	0
380e0                 | LR__6059
380e0                 | 	byte	
380e0     00          | 	byte	0
380e1                 | LR__6060
380e1     64 69 72    | 	byte	"dir"
380e4     00          | 	byte	0
380e5                 | LR__6061
380e5     66 69 6E 64 
380e9     6E 65 78 74 
380ed     3A 20       | 	byte	"findnext: "
380ef     00          | 	byte	0
380f0                 | LR__6062
380f0     67 65 74 63 
380f4     6F 6C 6F 72 
380f8     20          | 	byte	"getcolor "
380f9     00          | 	byte	0
380fa                 | LR__6063
380fa     67 65 74 65 
380fe     6E 76 73 75 
38102     73 74 61 69 
38106     6E 3A 20    | 	byte	"getenvsustain: "
38109     00          | 	byte	0
3810a                 | LR__6064
3810a     67 65 74 70 
3810e     69 78 65 6C 
38112     3A 20       | 	byte	"getpixel: "
38114     00          | 	byte	0
38115                 | LR__6065
38115     68 65 78 24 
38119     3A 20       | 	byte	"hex$: "
3811b     00          | 	byte	0
3811c                 | LR__6066
3811c                 | 	byte	
3811c     00          | 	byte	0
3811d                 | LR__6067
3811d     49 6E 20 69 
38121     6E 70 75 74 
38125     3A 20       | 	byte	"In input: "
38127     00          | 	byte	0
38128                 | LR__6068
38128     2C          | 	byte	","
38129     00          | 	byte	0
3812a                 | LR__6069
3812a                 | 	byte	
3812a     00          | 	byte	0
3812b                 | LR__6070
3812b                 | 	byte	
3812b     00          | 	byte	0
3812c                 | LR__6071
3812c     6C 65 66 74 
38130     24 3A 20    | 	byte	"left$: "
38133     00          | 	byte	0
38134                 | LR__6072
38134     6C 65 66 74 
38138     24 3A 20    | 	byte	"left$: "
3813b     00          | 	byte	0
3813c                 | LR__6073
3813c     6C 65 6E 3A 
38140     20          | 	byte	"len: "
38141     00          | 	byte	0
38142                 | LR__6074
38142     6C 65 6E 3A 
38146     20          | 	byte	"len: "
38147     00          | 	byte	0
38148                 | LR__6075
38148                 | 	byte	
38148     00          | 	byte	0
38149                 | LR__6076
38149     2F          | 	byte	"/"
3814a     00          | 	byte	0
3814b                 | LR__6077
3814b     2F          | 	byte	"/"
3814c     00          | 	byte	0
3814d                 | LR__6078
3814d     2E 62 61 73 | 	byte	".bas"
38151     00          | 	byte	0
38152                 | LR__6079
38152     53 79 73 74 
38156     65 6D 20 65 
3815a     72 72 6F 72 
3815e     20          | 	byte	"System error "
3815f     00          | 	byte	0
38160                 | LR__6080
38160     3A 20       | 	byte	": "
38162     00          | 	byte	0
38163                 | LR__6081
38163     2E 62 61 73 | 	byte	".bas"
38167     00          | 	byte	0
38168                 | LR__6082
38168     2F          | 	byte	"/"
38169     00          | 	byte	0
3816a                 | LR__6083
3816a                 | 	byte	
3816a     00          | 	byte	0
3816b                 | LR__6084
3816b     4C 6F 61 64 
3816f     65 64 20    | 	byte	"Loaded "
38172     00          | 	byte	0
38173                 | LR__6085
38173     2F          | 	byte	"/"
38174     00          | 	byte	0
38175                 | LR__6086
38175     6C 6F 67 3A 
38179     20          | 	byte	"log: "
3817a     00          | 	byte	0
3817b                 | LR__6087
3817b     6D 69 64 24 
3817f     3A 20       | 	byte	"mid$: "
38181     00          | 	byte	0
38182                 | LR__6088
38182     6D 69 64 24 
38186     3A 20       | 	byte	"mid$: "
38188     00          | 	byte	0
38189                 | LR__6089
38189     43 61 6E 6E 
3818d     6F 74 20 63 
38191     72 65 61 74 
38195     65 20 61 20 
38199     64 69 72 65 
3819d     63 74 6F 72 
381a1     79 3A 20 73 
381a5     79 73 74 65 
381a9     6D 20 65 72 
381ad     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
381b1     00          | 	byte	0
381b2                 | LR__6090
381b2     20 42 41 53 
381b6     49 43 20 62 
381ba     79 74 65 73 
381be     20 66 72 65 
381c2     65          | 	byte	" BASIC bytes free"
381c3     00          | 	byte	0
381c4                 | LR__6091
381c4                 | 	byte	
381c4     00          | 	byte	0
381c5                 | LR__6092
381c5                 | 	byte	
381c5     00          | 	byte	0
381c6                 | LR__6093
381c6                 | 	byte	
381c6     00          | 	byte	0
381c7                 | LR__6094
381c7     6E 6F 6E 61 
381cb     6D 65 2E 62 
381cf     61 73       | 	byte	"noname.bas"
381d1     00          | 	byte	0
381d2                 | LR__6095
381d2     66 69 6C 65 
381d6     6E 61 6D 65 
381da     20 65 78 70 
381de     65 63 74 65 
381e2     64          | 	byte	"filename expected"
381e3     00          | 	byte	0
381e4                 | LR__6096
381e4     72 65 61 64 | 	byte	"read"
381e8     00          | 	byte	0
381e9                 | LR__6097
381e9     77 72 69 74 
381ed     65          | 	byte	"write"
381ee     00          | 	byte	0
381ef                 | LR__6098
381ef     61 70 70 65 
381f3     6E 64       | 	byte	"append"
381f5     00          | 	byte	0
381f6                 | LR__6099
381f6     63 68 61 6E 
381fa     6E 65 6C 23 
381fe     20 65 78 70 
38202     65 63 74 65 
38206     64          | 	byte	"channel# expected"
38207     00          | 	byte	0
38208                 | LR__6100
38208     4F 70 65 6E 
3820c     3A 20 69 6E 
38210     76 61 6C 69 
38214     64 20 6D 6F 
38218     64 65       | 	byte	"Open: invalid mode"
3821a     00          | 	byte	0
3821b                 | LR__6101
3821b     70 61 64 72 
3821f     78 3A 20    | 	byte	"padrx: "
38222     00          | 	byte	0
38223                 | LR__6102
38223     70 61 64 72 
38227     79 3A 20    | 	byte	"padry: "
3822a     00          | 	byte	0
3822b                 | LR__6103
3822b     70 61 64 72 
3822f     7A 3A 20    | 	byte	"padrz: "
38232     00          | 	byte	0
38233                 | LR__6104
38233     70 61 64 73 
38237     3A 20       | 	byte	"pads: "
38239     00          | 	byte	0
3823a                 | LR__6105
3823a     70 61 64 77 
3823e     3A 20       | 	byte	"padw: "
38240     00          | 	byte	0
38241                 | LR__6106
38241     70 61 64 78 
38245     3A 20       | 	byte	"padx: "
38247     00          | 	byte	0
38248                 | LR__6107
38248     70 61 64 79 
3824c     3A 20       | 	byte	"pady: "
3824e     00          | 	byte	0
3824f                 | LR__6108
3824f     70 61 64 7A 
38253     3A 20       | 	byte	"padz: "
38255     00          | 	byte	0
38256                 | LR__6109
38256     50 72 69 6E 
3825a     74 20 74 6F 
3825e     20 63 68 61 
38262     6E 6E 65 6C 
38266     20 28 6E 6F 
3826a     74 20 79 65 
3826e     74 20 69 6D 
38272     70 6C 65 6D 
38276     65 6E 74 65 
3827a     64 29       | 	byte	"Print to channel (not yet implemented)"
3827c     00          | 	byte	0
3827d                 | LR__6110
3827d                 | 	byte	
3827d     00          | 	byte	0
3827e                 | LR__6111
3827e     64 61 74 61 | 	byte	"data"
38282     00          | 	byte	0
38283                 | LR__6112
38283                 | 	byte	
38283     00          | 	byte	0
38284                 | LR__6113
38284     49 6E 20 72 
38288     65 61 64 3A 
3828c     20          | 	byte	"In read: "
3828d     00          | 	byte	0
3828e                 | LR__6114
3828e                 | 	byte	
3828e     00          | 	byte	0
3828f                 | LR__6115
3828f                 | 	byte	
3828f     00          | 	byte	0
38290                 | LR__6116
38290     27          | 	byte	"'"
38291     00          | 	byte	0
38292                 | LR__6117
38292     2C          | 	byte	","
38293     00          | 	byte	0
38294                 | LR__6118
38294                 | 	byte	
38294     00          | 	byte	0
38295                 | LR__6119
38295                 | 	byte	
38295     00          | 	byte	0
38296                 | LR__6120
38296                 | 	byte	
38296     00          | 	byte	0
38297                 | LR__6121
38297                 | 	byte	
38297     00          | 	byte	0
38298                 | LR__6122
38298                 | 	byte	
38298     00          | 	byte	0
38299                 | LR__6123
38299     72 69 67 68 
3829d     74 24 3A 20 | 	byte	"right$: "
382a1     00          | 	byte	0
382a2                 | LR__6124
382a2     72 69 67 68 
382a6     74 24 3A 20 | 	byte	"right$: "
382aa     00          | 	byte	0
382ab                 | LR__6125
382ab     72 6E 64 3A 
382af     20          | 	byte	"rnd: "
382b0     00          | 	byte	0
382b1                 | LR__6126
382b1     72 6E 64 3A 
382b5     20          | 	byte	"rnd: "
382b6     00          | 	byte	0
382b7                 | LR__6127
382b7                 | 	byte	
382b7     00          | 	byte	0
382b8                 | LR__6128
382b8     53 74 6F 70 
382bc     70 65 64 20 
382c0     61 74 20 6C 
382c4     69 6E 65 20 | 	byte	"Stopped at line "
382c8     00          | 	byte	0
382c9                 | LR__6129
382c9                 | 	byte	
382c9     00          | 	byte	0
382ca                 | LR__6130
382ca     2F          | 	byte	"/"
382cb     00          | 	byte	0
382cc                 | LR__6131
382cc                 | 	byte	
382cc     00          | 	byte	0
382cd                 | LR__6132
382cd     53 61 76 65 
382d1     64 20 61 73 
382d5     20          | 	byte	"Saved as "
382d6     00          | 	byte	0
382d7                 | LR__6133
382d7     2F          | 	byte	"/"
382d8     00          | 	byte	0
382d9                 | LR__6134
382d9     73 65 74 63 
382dd     6F 6C 6F 72 
382e1     3A 20       | 	byte	"setcolor: "
382e3     00          | 	byte	0
382e4                 | LR__6135
382e4     73 69 6E 3A 
382e8     20          | 	byte	"sin: "
382e9     00          | 	byte	0
382ea                 | LR__6136
382ea     73 71 72 3A 
382ee     20          | 	byte	"sqr: "
382ef     00          | 	byte	0
382f0                 | LR__6137
382f0     73 74 69 63 
382f4     6B 3A 20    | 	byte	"stick: "
382f7     00          | 	byte	0
382f8                 | LR__6138
382f8     73 74 72 69 
382fc     67 3A 20    | 	byte	"strig: "
382ff     00          | 	byte	0
38300                 | LR__6139
38300     74 61 6E 3A 
38304     20          | 	byte	"tan: "
38305     00          | 	byte	0
38306                 | LR__6140
38306     76 61 6C 3A 
3830a     20          | 	byte	"val: "
3830b     00          | 	byte	0
3830c                 | LR__6141
3830c     76 61 6C 3A 
38310     20          | 	byte	"val: "
38311     00          | 	byte	0
38312                 | LR__6142
38312     24          | 	byte	"$"
38313     00          | 	byte	0
38314                 | LR__6143
38314     26 68       | 	byte	"&h"
38316     00          | 	byte	0
38317                 | LR__6144
38317     25          | 	byte	"%"
38318     00          | 	byte	0
38319                 | LR__6145
38319     26 62       | 	byte	"&b"
3831b     00          | 	byte	0
3831c                 | LR__6146
3831c                 | 	byte	
3831c     00          | 	byte	0
3831d                 | LR__6147
3831d     45 78 70 65 
38321     63 74 65 64 
38325     20 6E 75 6D 
38329     62 65 72 2C 
3832d     20 67 6F 74 
38331     20 73 6F 6D 
38335     65 74 68 69 
38339     6E 67 20 65 
3833d     6C 73 65    | 	byte	"Expected number, got something else"
38340     00          | 	byte	0
38341                 | LR__6148
38341     43 61 6E 6E 
38345     6F 74 20 61 
38349     64 64 20 61 
3834d     20 6E 75 6D 
38351     62 65 72 20 
38355     74 6F 20 61 
38359     20 73 74 72 
3835d     69 6E 67    | 	byte	"Cannot add a number to a string"
38360     00          | 	byte	0
38361                 | LR__6149
38361     43 61 6E 6E 
38365     6F 74 20 73 
38369     75 62 73 74 
3836d     72 61 63 74 
38371     20 73 74 72 
38375     69 6E 67 73 | 	byte	"Cannot substract strings"
38379     00          | 	byte	0
3837a                 | LR__6150
3837a     55 6E 6B 6E 
3837e     6F 77 6E 20 
38382     65 72 72 6F 
38386     72 20 77 68 
3838a     69 6C 65 20 
3838e     61 64 64 69 
38392     6E 67       | 	byte	"Unknown error while adding"
38394     00          | 	byte	0
38395                 | LR__6151
38395     55 6E 6B 6E 
38399     6F 77 6E 20 
3839d     65 72 72 6F 
383a1     72 20 77 68 
383a5     69 6C 65 20 
383a9     73 75 62 73 
383ad     74 72 61 63 
383b1     74 69 6E 67 | 	byte	"Unknown error while substracting"
383b5     00          | 	byte	0
383b6                 | LR__6152
383b6     43 61 6E 6E 
383ba     6F 74 20 64 
383be     6F 20 6C 6F 
383c2     67 69 63 20 
383c6     6F 70 65 72 
383ca     61 74 69 6F 
383ce     6E 20 6F 6E 
383d2     20 73 74 72 
383d6     69 6E 67 20 
383da     6F 72 20 66 
383de     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
383e2     00          | 	byte	0
383e3                 | LR__6153
383e3     55 6E 6B 6E 
383e7     6F 77 6E 20 
383eb     65 72 72 6F 
383ef     72 20 77 68 
383f3     69 6C 65 20 
383f7     64 6F 69 6E 
383fb     67 20 6C 6F 
383ff     67 69 63 20 
38403     6F 70 65 72 
38407     61 74 69 6F 
3840b     6E          | 	byte	"Unknown error while doing logic operation"
3840c     00          | 	byte	0
3840d                 | LR__6154
3840d     43 61 6E 6E 
38411     6F 74 20 6D 
38415     75 6C 74 69 
38419     70 6C 79 20 
3841d     73 74 72 69 
38421     6E 67 73    | 	byte	"Cannot multiply strings"
38424     00          | 	byte	0
38425                 | LR__6155
38425     55 6E 6B 6E 
38429     6F 77 6E 20 
3842d     65 72 72 6F 
38431     72 20 77 68 
38435     69 6C 65 20 
38439     6D 75 6C 74 
3843d     69 70 6C 79 
38441     69 6E 67    | 	byte	"Unknown error while multiplying"
38444     00          | 	byte	0
38445                 | LR__6156
38445     43 61 6E 6E 
38449     6F 74 20 64 
3844d     69 76 69 64 
38451     65 20 73 74 
38455     72 69 6E 67 
38459     73          | 	byte	"Cannot divide strings"
3845a     00          | 	byte	0
3845b                 | LR__6157
3845b     55 6E 6B 6E 
3845f     6F 77 6E 20 
38463     65 72 72 6F 
38467     72 20 77 68 
3846b     69 6C 65 20 
3846f     64 69 76 69 
38473     64 69 6E 67 | 	byte	"Unknown error while dividing"
38477     00          | 	byte	0
38478                 | LR__6158
38478     43 61 6E 6E 
3847c     6F 74 20 63 
38480     6F 6D 70 75 
38484     74 65 20 61 
38488     20 70 6F 77 
3848c     65 72 20 6F 
38490     66 20 61 20 
38494     73 74 72 69 
38498     6E 67       | 	byte	"Cannot compute a power of a string"
3849a     00          | 	byte	0
3849b                 | LR__6159
3849b     55 6E 6B 6E 
3849f     6F 77 6E 20 
384a3     65 72 72 6F 
384a7     72 20 77 68 
384ab     69 6C 65 20 
384af     63 6F 6D 70 
384b3     75 74 69 6E 
384b7     67 20 61 20 
384bb     70 6F 77 65 
384bf     72          | 	byte	"Unknown error while computing a power"
384c0     00          | 	byte	0
384c1                 | LR__6160
384c1     52 69 67 68 
384c5     74 20 70 61 
384c9     72 65 6E 74 
384cd     68 65 73 69 
384d1     73 20 65 78 
384d5     70 65 63 74 
384d9     65 64       | 	byte	"Right parenthesis expected"
384db     00          | 	byte	0
384dc                 | LR__6161
384dc     45 78 70 65 
384e0     63 74 65 64 
384e4     20 73 74 72 
384e8     69 6E 67    | 	byte	"Expected string"
384eb     00          | 	byte	0
384ec                 | LR__6162
384ec     45 78 70 65 
384f0     63 74 65 64 
384f4     20 66 6C 6F 
384f8     61 74       | 	byte	"Expected float"
384fa     00          | 	byte	0
384fb                 | LR__6163
384fb     45 78 70 65 
384ff     63 74 65 64 
38503     20 75 6E 73 
38507     69 67 6E 65 
3850b     64 20 69 6E 
3850f     74 65 67 65 
38513     72          | 	byte	"Expected unsigned integer"
38514     00          | 	byte	0
38515                 | LR__6164
38515     45 78 70 65 
38519     63 74 65 64 
3851d     20 69 6E 74 
38521     65 67 65 72 | 	byte	"Expected integer"
38525     00          | 	byte	0
38526                 | LR__6165
38526     4E 6F 20 6D 
3852a     6F 72 65 20 
3852e     76 61 72 69 
38532     61 62 6C 65 
38536     20 73 6C 6F 
3853a     74 73       | 	byte	"No more variable slots"
3853c     00          | 	byte	0
3853d                 | LR__6166
3853d     56 61 72 69 
38541     61 62 6C 65 
38545     20 6E 6F 74 
38549     20 66 6F 75 
3854d     6E 64       | 	byte	"Variable not found"
3854f     00          | 	byte	0
38550                 | LR__6167
38550     43 6F 6D 6D 
38554     61 20 65 78 
38558     70 65 63 74 
3855c     65 64       | 	byte	"Comma expected"
3855e     00          | 	byte	0
3855f                 | LR__6168
3855f     43 6F 6D 6D 
38563     61 20 6F 72 
38567     20 73 65 6D 
3856b     69 63 6F 6C 
3856f     6F 6E 20 65 
38573     78 70 65 63 
38577     74 65 64    | 	byte	"Comma or semicolon expected"
3857a     00          | 	byte	0
3857b                 | LR__6169
3857b     55 6E 6B 6E 
3857f     6F 77 6E 20 
38583     63 6F 6D 6D 
38587     61 6E 64    | 	byte	"Unknown command"
3858a     00          | 	byte	0
3858b                 | LR__6170
3858b     53 74 61 63 
3858f     6B 20 75 6E 
38593     64 65 72 66 
38597     6C 6F 77    | 	byte	"Stack underflow"
3859a     00          | 	byte	0
3859b                 | LR__6171
3859b     43 61 6E 6E 
3859f     6F 74 20 65 
385a3     78 65 63 75 
385a7     74 65 20 67 
385ab     6F 74 6F 20 
385af     6F 72 20 67 
385b3     6F 73 75 62 
385b7     20 69 6E 20 
385bb     74 68 65 20 
385bf     69 6D 6D 65 
385c3     64 69 61 74 
385c7     65 20 6D 6F 
385cb     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
385cd     00          | 	byte	0
385ce                 | LR__6172
385ce     43 61 6E 6E 
385d2     6F 74 20 6C 
385d6     6F 61 64 20 
385da     66 72 6F 6D 
385de     20 74 68 69 
385e2     73 20 66 69 
385e6     6C 65       | 	byte	"Cannot load from this file"
385e8     00          | 	byte	0
385e9                 | LR__6173
385e9     54 68 65 20 
385ed     70 72 6F 67 
385f1     72 61 6D 20 
385f5     69 73 20 65 
385f9     6D 70 74 79 | 	byte	"The program is empty"
385fd     00          | 	byte	0
385fe                 | LR__6174
385fe     49 66 20 61 
38602     66 74 65 72 
38606     20 69 66    | 	byte	"If after if"
38609     00          | 	byte	0
3860a                 | LR__6175
3860a     45 6D 70 74 
3860e     79 20 65 78 
38612     70 72 65 73 
38616     73 69 6F 6E | 	byte	"Empty expression"
3861a     00          | 	byte	0
3861b                 | LR__6176
3861b     53 74 72 69 
3861f     6E 67 20 65 
38623     78 70 65 63 
38627     74 65 64    | 	byte	"String expected"
3862a     00          | 	byte	0
3862b                 | LR__6177
3862b     49 6E 74 65 
3862f     72 70 72 65 
38633     74 65 72 20 
38637     69 6E 74 65 
3863b     72 6E 61 6C 
3863f     20 65 72 72 
38643     6F 72       | 	byte	"Interpreter internal error"
38645     00          | 	byte	0
38646                 | LR__6178
38646     45 78 70 65 
3864a     63 74 65 64 
3864e     20 61 73 73 
38652     69 67 6E    | 	byte	"Expected assign"
38655     00          | 	byte	0
38656                 | LR__6179
38656     45 78 70 65 
3865a     63 74 65 64 
3865e     20 27 74 6F 
38662     27          | 	byte	"Expected 'to'"
38663     00          | 	byte	0
38664                 | LR__6180
38664     45 78 70 65 
38668     63 74 65 64 
3866c     20 69 6E 74 
38670     65 67 65 72 
38674     20 76 61 72 
38678     69 61 62 6C 
3867c     65          | 	byte	"Expected integer variable"
3867d     00          | 	byte	0
3867e                 | LR__6181
3867e     55 6E 69 6E 
38682     69 74 69 61 
38686     6C 69 7A 65 
3868a     64 20 76 61 
3868e     72 69 61 62 
38692     6C 65 20 69 
38696     6E 20 27 6E 
3869a     65 78 74 27 
3869e     2C 20 75 73 
386a2     65 20 27 66 
386a6     6F 72 27 20 
386aa     62 65 66 6F 
386ae     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
386b0     00          | 	byte	0
386b1                 | LR__6182
386b1     4E 6F 20 6D 
386b5     6F 72 65 20 
386b9     73 6C 6F 74 
386bd     73 20 66 6F 
386c1     72 20 27 66 
386c5     6F 72 27    | 	byte	"No more slots for 'for'"
386c8     00          | 	byte	0
386c9                 | LR__6183
386c9     27 4E 65 78 
386cd     74 27 20 64 
386d1     6F 65 73 6E 
386d5     27 74 20 6D 
386d9     61 74 63 68 
386dd     20 27 66 6F 
386e1     72 27       | 	byte	"'Next' doesn't match 'for'"
386e3     00          | 	byte	0
386e4                 | LR__6184
386e4     27 47 6F 74 
386e8     6F 27 20 74 
386ec     61 72 67 65 
386f0     74 20 6C 69 
386f4     6E 65 20 6E 
386f8     6F 74 20 66 
386fc     6F 75 6E 64 | 	byte	"'Goto' target line not found"
38700     00          | 	byte	0
38701                 | LR__6185
38701     42 61 64 20 
38705     6E 75 6D 62 
38709     65 72 20 6F 
3870d     66 20 70 61 
38711     72 61 6D 65 
38715     74 65 72 73 | 	byte	"Bad number of parameters"
38719     00          | 	byte	0
3871a                 | LR__6186
3871a     46 75 6E 63 
3871e     74 69 6F 6E 
38722     20 75 6E 64 
38726     65 66 69 6E 
3872a     65 64 20 66 
3872e     6F 72 20 73 
38732     74 72 69 6E 
38736     67 73       | 	byte	"Function undefined for strings"
38738     00          | 	byte	0
38739                 | LR__6187
38739     42 61 64 20 
3873d     70 61 72 61 
38741     6D 65 74 65 
38745     72          | 	byte	"Bad parameter"
38746     00          | 	byte	0
38747                 | LR__6188
38747     43 61 6E 6E 
3874b     6F 74 20 64 
3874f     65 63 6C 61 
38753     72 65 20 61 
38757     6E 20 61 72 
3875b     72 61 79 3A 
3875f     20 74 68 65 
38763     20 76 61 72 
38767     69 61 62 6C 
3876b     65 20 65 78 
3876f     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
38773     00          | 	byte	0
38774                 | LR__6189
38774     45 78 70 65 
38778     63 74 65 64 
3877c     20 27 28 27 | 	byte	"Expected '('"
38780     00          | 	byte	0
38781                 | LR__6190
38781     45 78 70 65 
38785     63 74 65 64 
38789     20 27 29 27 
3878d     20 6F 72 20 
38791     27 2C 27    | 	byte	"Expected ')' or ','"
38794     00          | 	byte	0
38795                 | LR__6191
38795     4E 6F 20 6D 
38799     6F 72 65 20 
3879d     74 68 61 6E 
387a1     20 33 20 64 
387a5     69 6D 65 6E 
387a9     73 69 6F 6E 
387ad     73 20 73 75 
387b1     70 70 6F 72 
387b5     74 65 64    | 	byte	"No more than 3 dimensions supported"
387b8     00          | 	byte	0
387b9                 | LR__6192
387b9     56 61 72 69 
387bd     61 62 6C 65 
387c1     20 6E 61 6D 
387c5     65 20 65 78 
387c9     70 65 63 74 
387cd     65 64       | 	byte	"Variable name expected"
387cf     00          | 	byte	0
387d0                 | LR__6193
387d0     54 79 70 65 
387d4     20 6E 61 6D 
387d8     65 20 65 78 
387dc     70 65 63 74 
387e0     65 64       | 	byte	"Type name expected"
387e2     00          | 	byte	0
387e3                 | LR__6194
387e3     54 79 70 65 
387e7     20 6E 6F 74 
387eb     20 73 75 70 
387ef     70 6F 72 74 
387f3     65 64 20 79 
387f7     65 74       | 	byte	"Type not supported yet"
387f9     00          | 	byte	0
387fa                 | LR__6195
387fa     41 72 72 61 
387fe     79 20 69 6E 
38802     64 65 78 20 
38806     6F 75 74 20 
3880a     6F 66 20 72 
3880e     61 6E 67 65 | 	byte	"Array index out of range"
38812     00          | 	byte	0
38813                 | LR__6196
38813     42 61 64 20 
38817     74 79 70 65 
3881b     20 77 68 69 
3881f     6C 65 20 61 
38823     73 73 69 67 
38827     6E 69 6E 67 
3882b     20 74 6F 20 
3882f     61 72 72 61 
38833     79          | 	byte	"Bad type while assigning to array"
38834     00          | 	byte	0
38835                 | LR__6197
38835     54 6F 6F 20 
38839     6D 61 6E 79 
3883d     20 76 61 72 
38841     69 61 62 6C 
38845     65 73       | 	byte	"Too many variables"
38847     00          | 	byte	0
38848                 | LR__6198
38848     27 54 68 65 
3884c     6E 27 20 65 
38850     78 70 65 63 
38854     74 65 64    | 	byte	"'Then' expected"
38857     00          | 	byte	0
38858                 | LR__6199
38858     44 69 72 65 
3885c     63 74 6F 72 
38860     79 20 64 6F 
38864     65 73 6E 27 
38868     74 20 65 78 
3886c     69 73 74    | 	byte	"Directory doesn't exist"
3886f     00          | 	byte	0
38870                 | LR__6200
38870     55 6E 65 78 
38874     70 65 63 74 
38878     65 64 20 65 
3887c     6E 64 20 6F 
38880     66 20 6C 69 
38884     6E 65       | 	byte	"Unexpected end of line"
38886     00          | 	byte	0
38887                 | LR__6201
38887     4E 6F 20 6D 
3888b     6F 72 65 20 
3888f     64 61 74 61 | 	byte	"No more data"
38893     00          | 	byte	0
38894                 | LR__6202
38894     45 72 72 6F 
38898     72 20       | 	byte	"Error "
3889a     00          | 	byte	0
3889b                 | LR__6203
3889b     20 2D 20    | 	byte	" - "
3889e     00          | 	byte	0
3889f                 | LR__6204
3889f     20 69 6E 20 
388a3     6C 69 6E 65 
388a7     20          | 	byte	" in line "
388a8     00          | 	byte	0
388a9                 | LR__6205
388a9                 | 	byte	
388a9     00          | 	byte	0
388aa                 | LR__6206
388aa     2F 73 64    | 	byte	"/sd"
388ad     00          | 	byte	0
388ae                 | LR__6207
388ae     2F 73 64 2F 
388b2     62 61 73    | 	byte	"/sd/bas"
388b5     00          | 	byte	0
388b6                 | LR__6208
388b6     2F 73 64 2F 
388ba     62 61 73    | 	byte	"/sd/bas"
388bd     00          | 	byte	0
388be                 | LR__6209
388be     20 42 41 53 
388c2     49 43 20 62 
388c6     79 74 65 73 
388ca     20 66 72 65 
388ce     65          | 	byte	" BASIC bytes free"
388cf     00          | 	byte	0
388d0                 | LR__6210
388d0     52 65 61 64 
388d4     79          | 	byte	"Ready"
388d5     00          | 	byte	0
388d6                 | LR__6211
388d6     6E 6F 6E 61 
388da     6D 65 2E 62 
388de     61 73       | 	byte	"noname.bas"
388e0     00          | 	byte	0
388e1                 | LR__6212
388e1     2F 73 64 2F 
388e5     62 61 73 2F 
388e9     61 75 74 6F 
388ed     72 75 6E 2E 
388f1     62 61 73    | 	byte	"/sd/bas/autorun.bas"
388f4     00          | 	byte	0
388f5                 | LR__6213
388f5     72 75 6E 20 
388f9     61 75 74 6F 
388fd     72 75 6E 2E 
38901     62 61 73    | 	byte	"run autorun.bas"
38904     00          | 	byte	0
38905                 | LR__6214
38905                 | 	byte	
38905     00          | 	byte	0
38906     00 00       | 	alignl
38908                 | _dat_
38908     00 00 00 00 
3890c     00 00 00 00 
38910     00 00 00 00 
38914     00 00 00 00 | 	byte	$00[16]
38918     61 41 17 0E 
3891c     62 42 00 00 
38920     63 43 19 10 
38924     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
38928     65 45 18 0F 
3892c     66 46 00 00 
38930     67 47 00 00 
38934     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
38938     69 49 00 00 
3893c     6A 4A 00 00 
38940     6B 4B 00 00 
38944     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
38948     6D 4D 00 00 
3894c     6E 4E 1A 11 
38950     6F 4F 1E 15 
38954     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
38958     71 51 00 00 
3895c     72 52 00 00 
38960     73 53 1B 12 
38964     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
38968     75 55 00 00 
3896c     76 56 00 00 
38970     77 57 00 00 
38974     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
38978     79 59 00 00 
3897c     7A 5A 1D 14 
38980     31 21 04 00 
38984     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
38988     33 23 06 00 
3898c     34 24 07 00 
38990     35 25 08 00 
38994     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
38998     37 26 0A 00 
3899c     38 2A 0B 00 
389a0     39 28 0C 00 
389a4     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
389a8     8D 8D 00 00 
389ac     9B 9B 00 00 
389b0     88 88 00 00 
389b4     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
389b8     20 20 00 00 
389bc     2D 5F 00 00 
389c0     3D 2B 00 00 
389c4     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
389c8     5D 7D 00 00 
389cc     5C 7C 00 00 
389d0     23 7E 00 00 
389d4     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
389d8     27 22 00 00 
389dc     60 7E 03 00 
389e0     2C 3C 00 00 
389e4     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
389e8     2F 3F 00 00 
389ec     B9 B9 00 00 
389f0     BA 00 00 00 
389f4     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
389f8     BC 00 00 00 
389fc     BD 00 00 00 
38a00     BE 00 00 00 
38a04     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
38a08     C0 00 00 00 
38a0c     C1 00 00 00 
38a10     C2 00 00 00 
38a14     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
38a18     C4 00 00 00 
38a1c     C5 00 00 00 
38a20     C6 00 00 00 
38a24     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
38a28     C8 00 00 00 
38a2c     C9 00 00 00 
38a30     CA 00 00 00 
38a34     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
38a38     7F 7F 00 00 
38a3c     CC 00 00 00 
38a40     CD 00 00 00 
38a44     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
38a48     CF 00 00 00 
38a4c     D0 00 00 00 
38a50     D1 00 00 00 
38a54     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
38a58     2F 2F 00 00 
38a5c     2A 2A 00 00 
38a60     2D 2D 00 00 
38a64     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
38a68     8D 8D 00 00 
38a6c     31 31 00 00 
38a70     32 32 00 00 
38a74     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
38a78     34 34 00 00 
38a7c     35 35 00 00 
38a80     36 36 00 00 
38a84     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
38a88     38 38 00 00 
38a8c     39 39 00 00 
38a90     30 30 00 00 
38a94     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
38a98     5C 7C 00 00 
38a9c     00 00 00 00 
38aa0     00 00 00 00 
38aa4     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
38aa8     00 00 00 00 
      ...             
38b00     00 00 00 00 
38b04     00 00 00 00 | 	byte	$00[96]
38b08     2B 00 A6 F2 
38b0c     24 A7 09 80 
38b10     5B 88 4D 89 
38b14     80 88 A5 88 | atari_spl file "atari.spl"
38b18     6D 88 B8 88 
38b1c     80 88 CB 88 
38b20     92 88 A5 88 
38b24     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
38b28     A5 88 CA 88 
38b2c     A6 88 DD 88 
38b30     B8 88 AB 89 
38b34     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
38b38     C8 AD C6 F1 
38b3c     91 06 B6 FF 
38b40     13 00 4A 00 
38b44     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
38b48     5D 00 5E 00 
38b4c     5D 00 5E 00 
38b50     5E 00 5D 00 
38b54     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
38b58     38 00 83 00 
38b5c     25 00 83 00 
38b60     C3 FE D1 04 
38b64     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
38b68     48 88 38 85 
38b6c     41 8A CB 88 
38b70     28 89 B8 88 
38b74     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
38b78     15 89 03 89 
38b7c     02 89 15 89 
38b80     16 89 15 89 
38b84     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
38b88     15 89 3A 89 
38b8c     72 89 E3 89 
38b90     52 83 AD 97 
38b94     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
38b98     0C 02 B6 FF 
38b9c     E1 00 A8 00 
38ba0     F3 00 A8 00 
38ba4     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
38ba8     CE 00 CD 00 
38bac     CD 00 BA 00 
38bb0     E1 00 BB 00 
38bb4     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
38bb8     DF 00 C9 FF 
38bbc     E6 01 B6 06 
38bc0     EE DD 8D 98 
38bc4     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
38bc8     97 89 73 89 
38bcc     3B 89 60 89 
38bd0     60 89 60 89 
38bd4     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
38bd8     73 89 72 89 
38bdc     85 89 73 89 
38be0     AA 89 60 89 
38be4     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
38be8     E8 8A 18 86 
38bec     92 88 A5 C2 
38bf0     E0 00 C3 05 
38bf4     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
38bf8     F2 00 64 01 
38bfc     06 01 3E 01 
38c00     2B 01 2B 01 
38c04     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
38c08     2B 01 2A 01 
38c0c     2B 01 2B 01 
38c10     2B 01 18 01 
38c14     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
38c18     39 07 61 F3 
38c1c     C0 AF 37 85 
38c20     0F 88 8B 8A 
38c24     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
38c28     AB 89 D0 89 
38c2c     AB 89 D0 89 
38c30     D0 89 CF 89 
38c34     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
38c38     D0 89 F5 89 
38c3c     BD 89 08 8A 
38c40     CF 89 E8 8A 
38c44     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
38c48     53 B3 0D F8 
38c4c     F4 07 38 00 
38c50     63 01 63 01 
38c54     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
38c58     88 01 88 01 
38c5c     76 01 88 01 
38c60     88 01 89 01 
38c64     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
38c68     75 01 AE 01 
38c6c     76 01 88 01 
38c70     4A 00 46 06 
38c74     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
38c78     08 8A 9A 86 
38c7c     33 8B 08 8A 
38c80     2D 8A F5 89 
38c84     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
38c88     2D 8A 2D 8A 
38c8c     2E 8A 1B 8A 
38c90     40 8A 2D 8A 
38c94     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
38c98     2E 8A 79 8A 
38c9c     66 8A C8 8B 
38ca0     72 82 2B 97 
38ca4     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
38ca8     1D 02 05 01 
38cac     F8 01 C0 01 
38cb0     0B 02 C0 01 
38cb4     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
38cb8     F9 01 D3 01 
38cbc     F8 01 D3 01 
38cc0     F8 01 D2 01 
38cc4     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
38cc8     E6 01 2B 01 
38ccc     8E 02 5F 07 
38cd0     F7 E2 ED 9C 
38cd4     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
38cd8     E8 8A 78 8A 
38cdc     78 8A 65 8A 
38ce0     8B 8A 78 8A 
38ce4     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
38ce8     8B 8A 9D 8A 
38cec     9D 8A 8B 8A 
38cf0     C2 8A 78 8A 
38cf4     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
38cf8     70 8C 18 86 
38cfc     8B 8A 23 C9 
38d00     CB 03 C4 05 
38d04     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
38d08     0B 02 7B 02 
38d0c     1E 02 55 02 
38d10     30 02 43 02 
38d14     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
38d18     43 02 44 02 
38d1c     43 02 30 02 
38d20     68 02 31 02 
38d24     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
38d28     07 08 3F F7 
38d2c     73 B2 13 85 
38d30     15 89 ED 8B 
38d34     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
38d38     B0 8A FB 8A 
38d3c     D5 8A FA 8A 
38d40     E8 8A FB 8A 
38d44     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
38d48     E8 8A 21 8B 
38d4c     E7 8A 33 8B 
38d50     E8 8A 26 8C 
38d54     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
38d58     8D B0 27 F6 
38d5c     9C 08 AD 01 
38d60     7B 02 8D 02 
38d64     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
38d68     A1 02 A0 02 
38d6c     A1 02 A0 02 
38d70     A0 02 A0 02 
38d74     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
38d78     7B 02 D8 02 
38d7c     7B 02 C6 02 
38d80     3E 01 C3 05 
38d84     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
38d88     00 8C 2A 86 
38d8c     E0 8C FA 8A 
38d90     6A 8B FB 8A 
38d94     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
38d98     45 8B 45 8B 
38d9c     45 8B 6B 8B 
38da0     46 8B 59 8B 
38da4     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
38da8     6B 8B 6B 8B 
38dac     6B 8B 6B 8B 
38db0     7D 8B 7D 8B 
38db4     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
38db8     90 8B 91 8B 
38dbc     90 8B 90 8B 
38dc0     A3 8B A3 8B 
38dc4     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
38dc8     B5 8B B6 8B 
38dcc     B5 8B B5 8B 
38dd0     B6 8B C8 8B 
38dd4     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
38dd8     C8 8B DA 8B 
38ddc     DB 8B DB 8B 
38de0     DB 8B DC 8B 
38de4     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
38de8     EE 8B EE 8B 
38dec     00 8C 01 8C 
38df0     00 8C 01 8C 
38df4     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
38df8     12 8C 13 8C 
38dfc     13 8C 26 8C 
38e00     26 8C 26 8C 
38e04     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
38e08     38 8C 38 8C 
38e0c     38 8C 38 8C 
38e10     4B 8C 4B 8C 
38e14     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
38e18     5E 8C 5E 8C 
38e1c     5E 8C 5E 8C 
38e20     70 8C 70 8C 
38e24     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
38e28     70 8C 83 8C 
38e2c     83 8C 83 8C 
38e30     83 8C 96 8C 
38e34     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
38e38     95 8C A9 8C 
38e3c     A9 8C A8 8C 
38e40     A8 8C A8 8C 
38e44     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
38e48     BB 8C BB 8C 
38e4c     BB 8C CE 8C 
38e50     CE 8C CE 8C 
38e54     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
38e58     E0 8C E1 8C 
38e5c     E1 8C E0 8C 
38e60     F4 8C F2 8C 
38e64     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
38e68     05 8D 05 8D 
38e6c     06 8D 06 8D 
38e70     19 8D 19 8D 
38e74     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
38e78     18 8D 2B 8D 
38e7c     2B 8D 2B 8D 
38e80     2A 8D 3E 8D 
38e84     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
38e88     3E 8D 51 8D 
38e8c     50 8D 50 8D 
38e90     50 8D 51 8D 
38e94     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
38e98     63 8D 64 8D 
38e9c     76 8D 75 8D 
38ea0     75 8D 76 8D 
38ea4     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
38ea8     88 8D 88 8D 
38eac     89 8D 9B 8D 
38eb0     9A 8D 9B 8D 
38eb4     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
38eb8     AD 8D AE 8D 
38ebc     AD 8D AE 8D 
38ec0     C1 8D C1 8D 
38ec4     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
38ec8     D3 8D D3 8D 
38ecc     D3 8D D3 8D 
38ed0     D3 8D E6 8D 
38ed4     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
38ed8     E6 8D E6 8D 
38edc     F9 8D F9 8D 
38ee0     F9 8D F8 8D 
38ee4     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
38ee8     0B 8E 0B 8E 
38eec     1D 8E 1D 8E 
38ef0     1E 8E 1E 8E 
38ef4     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
38ef8     31 8E 31 8E 
38efc     31 8E 42 8E 
38f00     43 8E 43 8E 
38f04     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
38f08     56 8E 56 8E 
38f0c     55 8E 56 8E 
38f10     68 8E 69 8E 
38f14     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
38f18     69 8E 7B 8E 
38f1c     7C 8E 7B 8E 
38f20     7B 8E 8D 8E 
38f24     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
38f28     8D 8E A1 8E 
38f2c     A0 8E A1 8E 
38f30     A1 8E A0 8E 
38f34     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
38f38     B3 8E B3 8E 
38f3c     C6 8E C5 8E 
38f40     C6 8E C6 8E 
38f44     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
38f48     D8 8E D9 8E 
38f4c     D8 8E EC 8E 
38f50     EB 8E EC 8E 
38f54     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
38f58     FE 8E FE 8E 
38f5c     FE 8E FE 8E 
38f60     10 8F 10 8F 
38f64     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
38f68     11 8F 23 8F 
38f6c     24 8F 23 8F 
38f70     24 8F 37 8F 
38f74     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
38f78     36 8F 36 8F 
38f7c     48 8F 49 8F 
38f80     49 8F 49 8F 
38f84     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
38f88     5B 8F 5C 8F 
38f8c     5B 8F 6E 8F 
38f90     6E 8F 6E 8F 
38f94     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
38f98     81 8F 81 8F 
38f9c     81 8F 81 8F 
38fa0     93 8F 93 8F 
38fa4     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
38fa8     93 8F A6 8F 
38fac     A6 8F A6 8F 
38fb0     A6 8F B9 8F 
38fb4     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
38fb8     B9 8F B9 8F 
38fbc     CC 8F CB 8F 
38fc0     CB 8F CC 8F 
38fc4     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
38fc8     DF 8F DE 8F 
38fcc     DE 8F F1 8F 
38fd0     F1 8F F1 8F 
38fd4     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
38fd8     03 90 04 90 
38fdc     04 90 04 90 
38fe0     16 90 17 90 
38fe4     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
38fe8     29 90 28 90 
38fec     29 90 28 90 
38ff0     29 90 3C 90 
38ff4     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
38ff8     3C 90 4F 90 
38ffc     4E 90 4E 90 
39000     4E 90 4E 90 
39004     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
39008     61 90 61 90 
3900c     73 90 74 90 
39010     74 90 74 90 
39014     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
39018     87 90 86 90 
3901c     87 90 86 90 
39020     99 90 99 90 
39024     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
39028     AB 90 AB 90 
3902c     AC 90 AB 90 
39030     AB 90 BF 90 
39034     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
39038     BE 90 D1 90 
3903c     D0 90 D1 90 
39040     D1 90 D1 90 
39044     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
39048     E3 90 E4 90 
3904c     F6 90 F6 90 
39050     F6 90 F6 90 
39054     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
39058     09 91 0A 91 
3905c     0A 91 1C 91 
39060     1C 91 1C 91 
39064     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
39068     2F 91 2E 91 
3906c     2F 91 2F 91 
39070     2E 91 41 91 
39074     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
39078     41 91 53 91 
3907c     54 91 54 91 
39080     53 91 54 91 
39084     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
39088     67 91 67 91 
3908c     79 91 7A 91 
39090     79 91 78 91 
39094     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
39098     8C 91 8B 91 
3909c     8C 91 8C 91 
390a0     9E 91 9E 91 
390a4     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
390a8     B1 91 B1 91 
390ac     B2 91 B1 91 
390b0     B1 91 C4 91 
390b4     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
390b8     C4 91 D6 91 
390bc     D7 91 D7 91 
390c0     D7 91 D6 91 
390c4     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
390c8     EA 91 EA 91 
390cc     EA 91 FC 91 
390d0     FC 91 FB 91 
390d4     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
390d8     0E 92 0F 92 
390dc     0F 92 0E 92 
390e0     21 92 21 92 
390e4     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
390e8     21 92 34 92 
390ec     33 92 34 92 
390f0     34 92 47 92 
390f4     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
390f8     46 92 47 92 
390fc     59 92 59 92 
39100     59 92 59 92 
39104     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
39108     6C 92 6C 92 
3910c     6B 92 7E 92 
39110     7E 92 7E 92 
39114     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
39118     92 92 91 92 
3911c     91 92 90 92 
39120     91 92 A4 92 
39124     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
39128     A3 92 B6 92 
3912c     B6 92 B7 92 
39130     B7 92 B6 92 
39134     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
39138     CA 92 C9 92 
3913c     CA 92 DC 92 
39140     DC 92 DC 92 
39144     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
39148     EF 92 EF 92 
3914c     EF 92 EF 92 
39150     01 93 01 93 
39154     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
39158     15 93 14 93 
3915c     14 93 14 93 
39160     14 93 27 93 
39164     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
39168     27 93 39 93 
3916c     3A 93 39 93 
39170     39 93 39 93 
39174     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
39178     4B 93 4C 93 
3917c     5F 93 5F 93 
39180     5F 93 5E 93 
39184     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
39188     5F 93 84 93 
3918c     4C 93 96 93 
39190     5F 93 AE 94 
39194     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
39198     7B C1 00 00 
3919c     00 00 00 00 
391a0     00 00 00 00 
391a4     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
391a8     00 00 00 00 | 	byte	$00, $00, $00, $00
391ac     7A D7 00 80 
391b0     87 8A 48 8F 
391b4     EC 8C 76 8D 
391b8     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
391bc     3C 8D 82 8D 
391c0     42 8D 88 8D 
391c4     8C 8D 8E 8D 
391c8     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
391cc     97 8D DE 8D 
391d0     E1 8D F1 8E 
391d4     D8 8C A3 83 
391d8     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
391dc     65 71 C9 65 
391e0     FC 64 C4 65 
391e4     C1 65 BF 65 
391e8     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
391ec     B6 65 B4 65 
391f0     B2 65 AE 65 
391f4     AC 65 ED 65 
391f8     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
391fc     5E 65 25 66 
39200     FA 62 23 6B 
39204     B5 6C 61 0A 
39208     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
3920c     5D 90 BE 8D 
39210     47 8E C3 8D 
39214     09 8E C9 8D 
39218     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
3921c     15 8E 19 8E 
39220     1B 8E 62 8E 
39224     64 8E 68 8E 
39228     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
3922c     B5 8E 4C 90 
39230     FA 84 3C 9D 
39234     98 13 79 6D 
39238     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
3923c     D9 66 50 66 
39240     D4 66 4B 66 
39244     8C 66 46 66 
39248     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
3924c     81 66 3A 66 
39250     7C 66 36 66 
39254     76 66 30 66 
39258     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
3925c     6B 66 88 72 
39260     BF 37 E7 B7 
39264     75 83 8B 8E 
39268     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
3926c     94 8E 96 8E 
39270     DD 8E 9C 8E 
39274     E2 8E A2 8E 
39278     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
3927c     EE 8E AE 8E 
39280     38 8F B5 8E 
39284     3F 8F FD 8E 
39288     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
3928c     A5 87 1E E3 
39290     6D 5D FA 71 
39294     41 64 25 67 
39298     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
3929c     D9 66 1A 67 
392a0     18 67 15 67 
392a4     12 67 0F 67 
392a8     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
392ac     07 67 C0 66 
392b0     01 67 BC 66 
392b4     B8 66 DE 64 
392b8     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
392bc     43 E5 1F 8B 
392c0     14 8A F1 90 
392c4     1C 8F 63 8F 
392c8     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
392cc     29 8F 6E 8F 
392d0     72 8F 75 8F 
392d4     34 8F BE 8F 
392d8     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
392dc     84 8F 87 8F 
392e0     CC 8F 56 90 
392e4     67 91 49 80 
392e8     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
392ec     46 77 A6 66 
392f0     E8 66 B0 67 
392f4     AD 67 ED 67 
392f8     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
392fc     A2 67 E3 67 
39300     9D 67 9A 67 
39304     98 67 94 67 
39308     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
3930c     49 67 CD 67 
39310     28 65 5F 6E 
39314     82 67 3A 01 
39318     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
3931c     C2 91 A9 8F 
39320     EF 8F AE 8F 
39324     F4 8F B5 8F 
39328     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
3932c     01 90 03 90 
39330     07 90 09 90 
39334     0C 90 53 90 
39338     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
3933c     18 90 44 93 
39340     85 84 D6 9D 
39344     87 1F 2F 75 
39348     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
3934c     C4 68 F6 67 
39350     BE 68 F1 67 
39354     76 68 2E 68 
39358     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
3935c     27 68 24 68 
39360     64 68 1E 68 
39364     5F 68 19 68 
39368     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
3936c     DC 68 56 72 
39370     7E 36 C2 B8 
39374     D7 84 73 90 
39378     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
3937c     7B 90 7F 90 
39380     82 90 84 90 
39384     CB 90 8B 90 
39388     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
3938c     D7 90 96 90 
39390     20 91 59 90 
39394     25 91 A2 90 
39398     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
3939c     D0 89 40 EE 
393a0     12 64 C4 71 
393a4     29 66 0C 69 
393a8     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
393ac     C0 68 02 69 
393b0     FE 68 FB 68 
393b4     F9 68 F6 68 
393b8     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
393bc     EE 68 A8 68 
393c0     2C 69 5F 68 
393c4     E2 68 81 66 
393c8     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
393cc     1E EB A6 8A 
393d0     73 8B 5E 93 
393d4     7B 90 48 91 
393d8     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
393dc     0D 91 11 91 
393e0     14 91 16 91 
393e4     5C 91 1C 91 
393e8     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
393ec     68 91 AF 91 
393f0     2A 91 B5 91 
393f4     75 91 1A 94 
393f8     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
393fc     70 0E CB 6C 
39400     5D 6E C4 67 
39404     99 69 54 69 
39408     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
3940c     D2 69 49 69 
39410     89 69 86 69 
39414     40 69 C4 69 
39418     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
3941c     35 69 76 69 
39420     58 67 EB 6D 
39424     E9 6D 89 0F 
39428     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
3942c     33 94 94 91 
39430     D9 91 56 91 
39434     E0 91 9F 91 
39438     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
3943c     EC 91 EE 91 
39440     F1 91 F4 91 
39444     F7 91 3D 92 
39448     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
3944c     46 92 21 94 
39450     11 89 A4 9D 
39454     FD 0E 8F 6C 
39458     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
3945c     28 6A E1 69 
39460     65 6A 1F 6A 
39464     5F 6A 1A 6A 
39468     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
3946c     54 6A 0F 6A 
39470     4F 6A 09 6A 
39474     06 6A 03 6A 
39478     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
3947c     23 68 69 77 
39480     3A 4D 38 CA 
39484     38 86 4E 91 
39488     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
3948c     64 92 24 92 
39490     6A 92 2A 92 
39494     70 92 30 92 
39498     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
3949c     7B 92 7E 92 
394a0     C5 92 84 92 
394a4     CB 92 8A 92 
394a8     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
394ac     4D 8D F9 E2 
394b0     97 59 FE 74 
394b4     DB 68 6D 6A 
394b8     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
394bc     A8 6A A5 6A 
394c0     A3 6A 9F 6A 
394c4     9D 6A 9B 6A 
394c8     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
394cc     D6 6A 8F 6A 
394d0     CF 6A 46 6A 
394d4     CA 6A E1 67 
394d8     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
394dc     D3 F7 15 92 
394e0     90 8C BF 94 
394e4     A6 92 EB 92 
394e8     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
394ec     B1 92 F7 92 
394f0     FA 92 FD 92 
394f4     00 93 02 93 
394f8     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
394fc     4F 93 52 93 
39500     54 93 22 94 
39504     5A 93 8F 88 
39508     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
3950c     1C 77 07 6C 
39510     E8 69 7A 6B 
39514     34 6B 75 6B 
39518     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
3951c     29 6B 26 6B 
39520     24 6B 21 6B 
39524     1D 6B 5E 6B 
39528     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
3952c     12 6B 52 6B 
39530     34 69 34 6E 
39534     BA 73 A4 24 
39538     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
3953c     7A 94 B3 93 
39540     72 93 31 93 
39544     78 93 7A 93 
39548     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
3954c     83 93 86 93 
39550     89 93 D0 93 
39554     D2 93 D5 93 
39558     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
3955c     DD 93 40 96 
39560     30 8B 99 9C 
39564     52 10 94 71 
39568     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
3956c     46 6C 79 6B 
39570     40 6C B7 6B 
39574     F7 6B B1 6B 
39578     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
3957c     EC 6B A5 6B 
39580     A2 6B 9F 6B 
39584     9D 6B 9A 6B 
39588     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
3958c     C8 6A E4 76 
39590     20 4B F9 CE 
39594     2E 8A 1A 92 
39598     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
3959c     FB 93 BA 93 
395a0     01 94 03 94 
395a4     4A 94 09 94 
395a8     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
395ac     55 94 14 94 
395b0     9E 94 1A 94 
395b4     61 94 20 94 
395b8     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
395bc     3E 87 E5 CD 
395c0     5F 50 6C 78 
395c4     B5 6A 04 6C 
395c8     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
395cc     83 6C 7F 6C 
395d0     7C 6C 36 6C 
395d4     76 6C 74 6C 
395d8     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
395dc     6B 6C 25 6C 
395e0     66 6C 1F 6C 
395e4     1D 6C 41 6A 
395e8     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
395ec     BA FA FC 94 
395f0     5B 8D 97 96 
395f4     3B 94 C5 94 
395f8     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
395fc     89 94 8C 94 
39600     8F 94 92 94 
39604     94 94 DB 94 
39608     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
3960c     E4 94 E7 94 
39610     2D 95 74 95 
39614     C8 96 15 89 
39618     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
3961c     CB 75 31 6F 
39620     7E 6B 10 6D 
39624     C9 6C 0A 6D 
39628     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
3962c     BD 6C FF 6C 
39630     FB 6C F9 6C 
39634     B2 6C F3 6C 
39638     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
3963c     A7 6C E8 6C 
39640     0D 6B 85 6F 
39644     C7 74 10 28 
39648     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
3964c     96 96 47 95 
39650     06 95 0A 95 
39654     0C 95 0F 95 
39658     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
3965c     17 95 5E 95 
39660     61 95 63 95 
39664     22 95 AC 95 
39668     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
3966c     72 95 17 98 
39670     59 8E 01 96 
39674     CF FC 5A 68 
39678     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
3967c     96 6D 50 6D 
39680     D5 6D 4A 6D 
39684     8C 6D 89 6D 
39688     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
3968c     80 6D 3A 6D 
39690     7A 6D 77 6D 
39694     75 6D 71 6D 
39698     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
3969c     18 6C BC 78 
396a0     9A 4F 7E CF 
396a4     1F 89 F1 93 
396a8     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
396ac     D2 95 4E 95 
396b0     D7 95 53 95 
396b4     DD 95 E0 95 
396b8     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
396bc     A5 95 EB 95 
396c0     EE 95 F0 95 
396c4     37 96 B3 95 
396c8     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
396cc     1A 98 D5 8D 
396d0     C5 9F CD 0F 
396d4     0F 71 F3 73 
396d8     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
396dc     D9 6D 5E 6E 
396e0     D3 6D 58 6E 
396e4     12 6E 0F 6E 
396e8     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
396ec     49 6E BF 6D 
396f0     87 6E 76 6D 
396f4     81 6E 11 6B 
396f8     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
396fc     3F 09 44 95 
39700     E5 8D 3F 99 
39704     D4 95 A2 96 
39708     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
3970c     23 96 69 96 
39710     6B 96 6E 96 
39714     71 96 74 96 
39718     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
3971c     BF 96 3C 96 
39720     C6 96 C8 96 
39724     A3 98 51 8D 
39728     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
3972c     CF 75 29 73 
39730     90 6C EC 6E 
39734     62 6E E7 6E 
39738     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
3973c     9A 6E 98 6E 
39740     95 6E 91 6E 
39744     8E 6E CF 6E 
39748     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
3974c     40 6E C3 6E 
39750     E8 6C 45 6F 
39754     A5 7B C9 35 
39758     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
3975c     2D 98 23 97 
39760     E1 96 A0 96 
39764     A4 96 EA 96 
39768     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
3976c     AF 96 F4 96 
39770     F8 96 3E 97 
39774     FD 96 43 97 
39778     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
3977c     08 97 6B 99 
39780     D6 92 88 91 
39784     D8 EE 84 66 
39788     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
3978c     2E 6F E7 6E 
39790     6C 6F 24 6F 
39794     21 6F 1F 6F 
39798     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
3979c     17 6F 13 6F 
397a0     54 6F 0E 6F 
397a4     0B 6F 4B 6F 
397a8     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
397ac     27 6D 1C 7B 
397b0     19 59 9F DB 
397b4     66 8E BC 94 
397b8     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
397bc     67 97 26 97 
397c0     6D 97 2B 97 
397c4     72 97 32 97 
397c8     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
397cc     C1 97 7F 97 
397d0     C6 97 85 97 
397d4     CB 97 CE 97 
397d8     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
397dc     EC 8A C4 C6 
397e0     68 4C F4 7D 
397e4     63 6E E8 6E 
397e8     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
397ec     ED 6F A7 6F 
397f0     E7 6F A0 6F 
397f4     E1 6F 9B 6F 
397f8     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
397fc     D5 6F 8F 6F 
39800     CE 6F 45 6F 
39804     86 6F 68 6D 
39808     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
3980c     C0 13 AD A2 
39810     A7 8E 79 99 
39814     E6 97 E8 97 
39818     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
3981c     F1 97 F3 97 
39820     F6 97 F9 97 
39824     FB 97 FE 97 
39828     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
3982c     4A 98 0A 98 
39830     93 98 0F 98 
39834     7F 9B BF 8C 
39838     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
3983c     91 7B 62 73 
39840     1A 6E B9 70 
39844     EB 6F B3 70 
39848     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
3984c     25 70 20 70 
39850     1E 70 1B 70 
39854     18 70 15 70 
39858     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
3985c     0D 70 09 70 
39860     07 70 03 70 
39864     01 70 FD 6F 
39868     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
3986c     F6 6F F2 6F 
39870     EF 6F EC 6F 
39874     2C 70 E6 6F 
39878     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
3987c     DD 6F 97 6F 
39880     D7 6F 84 6E 
39884     8F 6F 3F 7D 
39888     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
3988a     FF FF FF FF 
3988e     FF FF       | atarist_spl file "atarist.spl" '512
39890     00 00 00 00 
39894     00 00 00 00 
39898     00 00       | 	byte	$00[10]
3989a     17 7F F2 7F 
3989e     B2 7F 72 7F 
398a2     33 7F F4 7E 
398a6     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
398aa     36 7E F5 7D 
398ae     E9 51 F2 0D 
398b2     8E 00 F3 FD 
398b6     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
398ba     57 FD 58 FD 
398be     5B FD 5C FD 
398c2     5C FD 60 7D 
398c6     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
398ca     D6 7C 98 7C 
398ce     59 7C 1A 7C 
398d2     DC 7B 9E 7B 
398d6     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
398da     F3 05 00 FD 
398de     41 FB EA FA 
398e2     D9 FA DB FA 
398e6     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
398ea     E4 FA 9B 36 
398ee     F8 7A C0 7A 
398f2     84 7A 45 7A 
398f6     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
398fa     8E 79 51 79 
398fe     15 79 D7 78 
39902     3C 1F EB FF 
39906     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
3990a     6D F8 65 F8 
3990e     68 F8 6D F8 
39912     70 F8 74 F8 
39916     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3991a     AB 60 79 60 
3991e     4B 60 1A 60 
39922     E9 5F B9 5F 
39926     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3992a     FB 59 B2 0B 
3992e     92 FA 3A F7 
39932     96 F6 79 F6 
39936     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3993a     82 F6 86 F6 
3993e     8C F6 DB 5D 
39942     F1 5E C1 5E 
39946     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
3994a     34 5E 04 5E 
3994e     D6 5D A6 5D 
39952     78 5D D4 3E 
39956     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3995a     27 F5 BA F4 
3995e     AB F4 AD F4 
39962     B2 F4 B8 F4 
39966     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3996a     26 5D 2B 5D 
3996e     FC 5C CD 5C 
39972     9F 5C 70 5C 
39976     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3997a     E5 5B B8 5B 
3997e     DB 24 A7 FC 
39982     D1 F4 4D F3 
39986     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3998a     04 F3 0B F3 
3998e     11 F3 16 F3 
39992     DE 18 98 5B 
39996     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3999a     4E 4A 29 48 
3999e     A0 47 6A 47 
399a2     43 47 20 47 
399a6     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
399aa     E2 F6 98 F2 
399ae     C5 F1 A3 F1 
399b2     A3 F1 A8 F1 
399b6     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
399ba     BF F1 00 3D 
399be     EF 46 CD 46 
399c2     AA 46 86 46 
399c6     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
399ca     1C 46 F9 45 
399ce     D7 45 EE 43 
399d2     DE 02 E8 F3 
399d6     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
399da     61 F0 65 F0 
399de     6D F0 74 F0 
399e2     7C F0 84 F0 
399e6     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
399ea     8E 45 6D 45 
399ee     49 45 27 45 
399f2     05 45 E1 44 
399f6     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
399fa     F1 2F A9 FB 
399fe     8B F1 9B EF 
39a02     40 EF 36 EF 
39a06     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
39a0a     4D EF 56 EF 
39a0e     5E EF 7B 44 
39a12     8C 44 69 44 
39a16     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
39a1a     03 44 E1 43 
39a1e     C0 43 F5 37 
39a22     69 33 0F 11 
39a26     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
39a2a     66 EE 37 EE 
39a2e     38 EE 40 EE 
39a32     48 EE 51 EE 
39a36     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
39a3a     7D 32 6A 32 
39a3e     51 32 37 32 
39a42     1F 32 05 32 
39a46     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
39a4a     B9 31 A1 31 
39a4e     F1 04 F4 F1 
39a52     50 EE A0 ED 
39a56     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
39a5a     93 ED 9A ED 
39a5e     A4 ED AD ED 
39a62     F4 27 C1 31 
39a66     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
39a6a     78 31 5F 31 
39a6e     46 31 2E 31 
39a72     15 31 FC 30 
39a76     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
39a7a     C4 EF 4A ED 
39a7e     DC EC CB EC 
39a82     D2 EC DA EC 
39a86     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
39a8a     F9 EC 64 2F 
39a8e     0A 31 F1 30 
39a92     D9 30 C0 30 
39a96     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
39a9a     78 30 5F 30 
39a9e     46 30 38 23 
39aa2     A6 F6 19 EE 
39aa6     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
39aaa     20 EC 28 EC 
39aae     32 EC 3C EC 
39ab2     47 EC 51 EC 
39ab6     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
39aba     A3 22 93 22 
39abe     7F 22 6E 22 
39ac2     5D 22 4C 22 
39ac6     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
39aca     77 09 76 F1 
39ace     CC EC F0 EB 
39ad2     CD EB CE EB 
39ad6     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
39ada     ED EB F5 EB 
39ade     3E F6 6B 22 
39ae2     5F 22 4E 22 
39ae6     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
39aea     1B 22 0B 22 
39aee     FA 21 E9 21 
39af2     D8 21 4D FF 
39af6     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
39afa     92 EB 7B EB 
39afe     82 EB 8C EB 
39b02     97 EB A1 EB 
39b06     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
39b0a     15 22 04 22 
39b0e     F3 21 E3 21 
39b12     D2 21 C0 21 
39b16     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
39b1a     8E 21 7D 21 
39b1e     9A F8 A4 ED 
39b22     8E EB 2F EB 
39b26     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
39b2a     37 EB 42 EB 
39b2e     4C EB 57 EB 
39b32     B2 17 22 19 
39b36     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
39b3a     FD 18 EF 18 
39b3e     E3 18 D6 18 
39b42     CA 18 BD 18 
39b46     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
39b4a     60 EC 35 EB 
39b4e     01 EB 01 EB 
39b52     0C EB 16 EB 
39b56     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
39b5a     34 EB D0 18 
39b5e     00 19 F4 18 
39b62     E8 18 DA 18 
39b66     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
39b6a     B6 18 A9 18 
39b6e     9D 18 91 05 
39b72     F0 EF CA EB 
39b76     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
39b7a     E8 EA F2 EA 
39b7e     FE EA 07 EB 
39b82     12 EB C2 EF 
39b86     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
39b8a     D9 18 CD 18 
39b8e     C0 18 B3 18 
39b92     A7 18 9B 18 
39b96     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
39b9a     B8 FC 30 EE 
39b9e     61 EB DC EA 
39ba2     CD EA D2 EA 
39ba6     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
39baa     F3 EA FE EA 
39bae     D2 09 D1 18 
39bb2     C3 18 17 18 
39bb6     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
39bba     66 11 52 11 
39bbe     49 11 41 11 
39bc2     38 11 E0 F4 
39bc6     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
39bca     C9 EA C5 EA 
39bce     CF EA DB EA 
39bd2     E6 EA EF EA 
39bd6     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
39bda     89 11 80 11 
39bde     78 11 6E 11 
39be2     67 11 5D 11 
39be6     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
39bea     43 11 32 0D 
39bee     9C F1 07 EC 
39bf2     F8 EA CD EA 
39bf6     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
39bfa     E4 EA ED EA 
39bfe     F8 EA 02 EB 
39c02     55 11 91 11 
39c06     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
39c0a     75 11 6E 11 
39c0e     64 11 5E 11 
39c12     54 11 4A 11 
39c16     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
39c1a     A8 EB F1 EA 
39c1e     D9 EA DC EA 
39c22     E8 EA F1 EA 
39c26     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
39c2a     A6 EB 9E 11 
39c2e     A0 11 96 11 
39c32     8D 11 85 11 
39c36     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
39c3a     6A 11 CA 0D 
39c3e     36 0B 57 F8 
39c42     6C ED 57 EB 
39c46     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
39c4a     F4 EA FF EA 
39c4e     09 EB 15 EB 
39c52     1E EB 1A FD 
39c56     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
39c5a     ED 0A E8 0A 
39c5e     E2 0A DC 0A 
39c62     D6 0A D1 0A 
39c66     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
39c6a     F8 F3 BC EC 
39c6e     57 EB 1E EB 
39c72     18 EB 24 EB 
39c76     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
39c7a     42 EB 4D EB 
39c7e     08 09 20 0B 
39c82     1A 0B 14 0B 
39c86     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
39c8a     04 0B FE 0A 
39c8e     F9 0A F2 0A 
39c92     84 08 3A F1 
39c96     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
39c9a     42 EB 42 EB 
39c9e     4E EB 57 EB 
39ca2     62 EB 6B EB 
39ca6     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
39caa     48 0B 43 0B 
39cae     3C 0B 36 0B 
39cb2     31 0B 2C 0B 
39cb6     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
39cba     1B 0B 5C 00 
39cbe     6A EF 1B EC 
39cc2     81 EB 6A EB 
39cc6     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
39cca     85 EB 8E EB 
39cce     99 EB A3 EB 
39cd2     DD 05 E5 05 
39cd6     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
39cda     DB 05 D8 05 
39cde     D5 05 D1 05 
39ce2     D0 05 CB 05 
39ce6     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
39cea     0C EC BB EB 
39cee     B3 EB BB EB 
39cf2     C5 EB D0 EB 
39cf6     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
39cfa     E4 F7 2C 06 
39cfe     28 06 24 06 
39d02     22 06 1F 06 
39d06     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
39d0a     16 06 14 06 
39d0e     0F 06 D0 F3 
39d12     65 ED 2D EC 
39d16     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
39d1a     01 EC 0A EC 
39d1e     14 EC 1E EC 
39d22     29 EC FB 03 
39d26     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
39d2a     63 06 60 06 
39d2e     5E 06 59 06 
39d32     58 06 54 06 
39d36     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
39d3a     69 F1 21 ED 
39d3e     55 EC 33 EC 
39d42     36 EC 40 EC 
39d46     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
39d4a     5C EC 68 EC 
39d4e     92 02 D9 02 
39d52     D7 02 D7 02 
39d56     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
39d5a     D1 02 D1 02 
39d5e     CE 02 CD 02 
39d62     5D FC 80 EF 
39d66     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
39d6a     83 EC 8A EC 
39d6e     93 EC 9C EC 
39d72     A5 EC B1 EC 
39d76     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
39d7a     2B 03 2A 03 
39d7e     29 03 26 03 
39d82     25 03 24 03 
39d86     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
39d8a     1F 03 70 F7 
39d8e     D0 EE 27 ED 
39d92     DB EC D4 EC 
39d96     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
39d9a     F0 EC FA EC 
39d9e     02 ED F9 F4 
39da2     7B 03 7C 03 
39da6     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
39daa     75 03 73 03 
39dae     72 03 70 03 
39db2     6D 03 6C 03 
39db6     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
39dba     54 ED 22 ED 
39dbe     22 ED 2C ED 
39dc2     35 ED 3F ED 
39dc6     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
39dca     14 01 C3 03 
39dce     C1 03 C0 03 
39dd2     5F 01 A5 00 
39dd6     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
39dda     7B 00 7C 00 
39dde     20 00 85 F1 
39de2     2A EE 89 ED 
39de6     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
39dea     80 ED 87 ED 
39dee     90 ED 9A ED 
39df2     A3 ED 73 00 
39df6     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
39dfa     D0 00 D0 00 
39dfe     D0 00 D0 00 
39e02     D0 00 CF 00 
39e06     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
39e0a     80 F0 3D EE 
39e0e     D5 ED C7 ED 
39e12     CD ED D6 ED 
39e16     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
39e1a     F2 ED FA ED 
39e1e     1D 01 29 01 
39e22     27 01 27 01 
39e26     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
39e2a     25 01 26 01 
39e2e     26 01 23 01 
39e32     D0 F7 EC EF 
39e36     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
39e3a     1C EE 24 EE 
39e3e     2D EE 37 EE 
39e42     40 EE 47 EE 
39e46     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
39e4a     7D 01 7B 01 
39e4e     7A 01 7A 01 
39e52     79 01 78 01 
39e56     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
39e5a     84 FE DE F3 
39e5e     6C EF 93 EE 
39e62     72 EE 72 EE 
39e66     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
39e6a     8B EE 95 EE 
39e6e     9E EE 15 FC 
39e72     67 FE 67 FE 
39e76     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
39e7a     6B FE 6B FE 
39e7e     6D FE 6D FE 
39e82     6D FE 6F FE 
39e86     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
39e8a     DF EE CC EE 
39e8e     CF EE D9 EE 
39e92     E1 EE EA EE 
39e96     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
39e9a     5A FE C4 FE 
39e9e     C3 FE C5 FE 
39ea2     C6 FE C6 FE 
39ea6     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
39eaa     C8 FE C7 FE 
39eae     DA FB 85 F1 
39eb2     8D EF 31 EF 
39eb6     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
39eba     34 EF 3E EF 
39ebe     46 EF 4F EF 
39ec2     57 EF 0D FF 
39ec6     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
39eca     1F FF 1F FF 
39ece     21 FF 21 FF 
39ed2     21 FF 21 FF 
39ed6     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
39eda     15 F1 BE EF 
39ede     84 EF 7E EF 
39ee2     88 EF 8F EF 
39ee6     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
39eea     A9 EF 06 F2 
39eee     A6 FC AB FC 
39ef2     AD FC AE FC 
39ef6     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
39efa     B2 FC B4 FC 
39efe     B6 FC B7 FC 
39f02     8B F4 BD F0 
39f06     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
39f0a     E4 EF EE EF 
39f0e     F6 EF FD EF 
39f12     04 F0 0E F0 
39f16     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
39f1a     0B FD 0D FD 
39f1e     0F FD 11 FD 
39f22     11 FD 13 FD 
39f26     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
39f2a     17 FD 64 F3 
39f2e     CD F0 52 F0 
39f32     41 F0 45 F0 
39f36     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
39f3a     5B F0 64 F0 
39f3e     6D F0 FB FC 
39f42     65 FD 68 FD 
39f46     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
39f4a     6C FD 6D FD 
39f4e     6F FD 70 FD 
39f52     72 FD B3 FB 
39f56     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
39f5a     A4 F0 99 F0 
39f5e     A0 F0 A8 F0 
39f62     AE F0 B9 F0 
39f66     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
39f6a     CB FB DD FB 
39f6e     DE FB E0 FB 
39f72     E3 FB E3 FB 
39f76     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
39f7a     E9 FB EC FB 
39f7e     62 F7 27 F2 
39f82     2A F1 FF F0 
39f86     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
39f8a     0C F1 13 F1 
39f8e     1B F1 23 F1 
39f92     33 F2 3C FC 
39f96     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
39f9a     42 FC 45 FC 
39f9e     47 FC 48 FC 
39fa2     4A FC 4C FC 
39fa6     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
39faa     20 F2 77 F1 
39fae     5C F1 5F F1 
39fb2     64 F1 6C F1 
39fb6     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
39fba     83 F1 DC F8 
39fbe     9A FC 9A FC 
39fc2     9B FC 9E FC 
39fc6     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
39fca     A3 FC A4 FC 
39fce     A6 FC A9 FC 
39fd2     90 F4 33 F2 
39fd6     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
39fda     BA F1 BF F1 
39fde     C7 F1 CE F1 
39fe2     D6 F1 DC F1 
39fe6     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
39fea     F3 FC F5 FC 
39fee     FE FB 79 FB 
39ff2     62 FB 5F FB 
39ff6     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
39ffa     6F FA AF F3 
39ffe     53 F2 12 F2 
3a002     0F F2 15 F2 
3a006     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3a00a     2A F2 32 F2 
3a00e     38 F2 9A FB 
3a012     AF FB B1 FB 
3a016     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3a01a     B7 FB B8 FB 
3a01e     BA FB BC FB 
3a022     C1 FB 3B F8 
3a026     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
3a02a     6E F2 6C F2 
3a02e     74 F2 7A F2 
3a032     81 F2 87 F2 
3a036     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
3a03a     06 FC 09 FC 
3a03e     0C FC 0E FC 
3a042     0F FC 12 FC 
3a046     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
3a04a     17 FC 1A FC 
3a04e     B2 F6 7B F3 
3a052     DD F2 C5 F2 
3a056     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3a05a     D4 F2 DB F2 
3a05e     E0 F2 E8 F2 
3a062     28 F8 60 FC 
3a066     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3a06a     64 FC 66 FC 
3a06e     68 FC 6A FC 
3a072     6D FC 52 FC 
3a076     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3a07a     78 F3 24 F3 
3a07e     1A F3 1E F3 
3a082     24 F3 2A F3 
3a086     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3a08a     3D F3 80 FA 
3a08e     0C FB 0F FB 
3a092     10 FB 14 FB 
3a096     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3a09a     1B FB 1D FB 
3a09e     1F FB 92 FA 
3a0a2     DE F4 AE F3 
3a0a6     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3a0aa     79 F3 7E F3 
3a0ae     84 F3 8C F3 
3a0b2     92 F3 97 F3 
3a0b6     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3a0ba     67 FB 69 FB 
3a0be     6B FB 6F FB 
3a0c2     71 FB 72 FB 
3a0c6     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3a0ca     E3 F8 BA F4 
3a0ce     EE F3 CC F3 
3a0d2     CA F3 CF F3 
3a0d6     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3a0da     E2 F3 E8 F3 
3a0de     ED F3 B7 FB 
3a0e2     BC FB BE FB 
3a0e6     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3a0ea     C4 FB C6 FB 
3a0ee     C8 FB C9 FB 
3a0f2     CC FB 8F F7 
3a0f6     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3a0fa     1E F4 1E F4 
3a0fe     24 F4 2A F4 
3a102     30 F4 38 F4 
3a106     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3a10a     AD FA B1 FA 
3a10e     B4 FA B6 FA 
3a112     BA FA BB FA 
3a116     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3a11a     C2 FA C6 FA 
3a11e     55 F6 C6 F4 
3a122     7D F4 72 F4 
3a126     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3a12a     83 F4 89 F4 
3a12e     8F F4 94 F4 
3a132     66 FA 03 FB 
3a136     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3a13a     0A FB 0E FB 
3a13e     10 FB 11 FB 
3a142     16 FB 18 FB 
3a146     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
3a14a     F9 F4 CA F4 
3a14e     C5 F4 CB F4 
3a152     D1 F4 D7 F4 
3a156     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3a15a     E8 F4 3F FB 
3a15e     56 FB 58 FB 
3a162     5A FB 5E FB 
3a166     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3a16a     64 FB 64 FB 
3a16e     69 FB 99 F9 
3a172     E9 F5 33 F5 
3a176     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3a17a     1D F5 22 F5 
3a17e     27 F5 2E F5 
3a182     32 F5 37 F5 
3a186     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3a18a     BC FA BC FA 
3a18e     C1 FA C2 FA 
3a192     C4 FA C8 FA 
3a196     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3a19a     F9 F7 DB F5 
3a19e     78 F5 69 F5 
3a1a2     6A F5 70 F5 
3a1a6     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3a1aa     7F F5 85 F5 
3a1ae     6E F7 06 FB 
3a1b2     0A FB 0B FB 
3a1b6     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3a1ba     14 FB 15 FB 
3a1be     18 FB 1B FB 
3a1c2     1D FB 70 F7 
3a1c6     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3a1ca     B6 F5 BB F5 
3a1ce     C0 F5 C6 F5 
3a1d2     CA F5 CF F5 
3a1d6     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3a1da     54 FB 56 FB 
3a1de     5A FB 5B FB 
3a1e2     5E FB 5F FB 
3a1e6     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3a1ea     67 FB 52 FB 
3a1ee     29 F7 33 F6 
3a1f2     06 F6 02 F6 
3a1f6     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3a1fa     10 F6 16 F6 
3a1fe     1A F6 1F F6 
3a202     81 FB 9F FB 
3a206     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3a20a     51 FB F2 FA 
3a20e     E3 FA E3 FA 
3a212     E5 FA E9 FA 
3a216     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
3a21a     64 F6 4D F6 
3a21e     4D F6 53 F6 
3a222     57 F6 5C F6 
3a226     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
3a22a     6A F6 19 FB 
3a22e     1E FB 22 FB 
3a232     23 FB 24 FB 
3a236     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
3a23a     2C FB 2E FB 
3a23e     32 FB F0 F8 
3a242     01 F7 A5 F6 
3a246     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
3a24a     9F F6 A3 F6 
3a24e     A6 F6 AC F6 
3a252     B0 F6 EB F7 
3a256     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
3a25a     68 FB 6C FB 
3a25e     6E FB 71 FB 
3a262     72 FB 74 FB 
3a266     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
3a26a     71 F8 21 F7 
3a26e     E5 F6 DD F6 
3a272     E1 F6 E6 F6 
3a276     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3a27a     F5 F6 F7 F6 
3a27e     F7 FA AB FB 
3a282     AD FB AF FB 
3a286     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3a28a     B6 FB B9 FB 
3a28e     BB FB BC FB 
3a292     21 FB 07 F8 
3a296     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3a29a     22 F7 26 F7 
3a29e     2B F7 2E F7 
3a2a2     34 F7 38 F7 
3a2a6     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3a2aa     13 FB 16 FB 
3a2ae     17 FB 1B FB 
3a2b2     1E FB 20 FB 
3a2b6     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3a2ba     26 FB 77 FA 
3a2be     F3 F7 7C F7 
3a2c2     67 F7 6A F7 
3a2c6     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3a2ca     74 F7 7A F7 
3a2ce     7E F7 82 F7 
3a2d2     53 FB 5A FB 
3a2d6     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3a2da     5F FB 63 FB 
3a2de     65 FB 67 FB 
3a2e2     69 FB 6A FB 
3a2e6     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3a2ea     B5 F7 A9 F7 
3a2ee     AD F7 B0 F7 
3a2f2     B5 F7 B8 F7 
3a2f6     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3a2fa     6E F8 99 FB 
3a2fe     9C FB 9D FB 
3a302     9F FB A4 FB 
3a306     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3a30a     A9 FB AB FB 
3a30e     AD FB 46 F9 
3a312     26 F8 F0 F7 
3a316     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3a31a     F4 F7 F8 F7 
3a31e     FB F7 FF F7 
3a322     03 F8 65 FA 
3a326     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
3a32a     2B FB 2F FB 
3a32e     30 FB 32 FB 
3a332     34 FB 38 FB 
3a336     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
3a33a     E9 F8 4A F8 
3a33e     2E F8 2C F8 
3a342     2F F8 36 F8 
3a346     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
3a34a     41 F8 44 F8 
3a34e     4A FB 67 FB 
3a352     68 FB 6B FB 
3a356     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
3a35a     73 FB 74 FB 
3a35e     78 FB 7A FB 
3a362     14 FB E7 F8 
3a366     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
3a36a     6D F8 70 F8 
3a36e     73 F8 78 F8 
3a372     7C F8 80 F8 
3a376     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
3a37a     A6 FB A7 FB 
3a37e     A9 FB AC FB 
3a382     AF FB B1 FB 
3a386     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3a38a     B7 FB 73 FA 
3a38e     F8 F8 B4 F8 
3a392     A9 F8 AB F8 
3a396     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
3a39a     B4 F8 B8 F8 
3a39e     BB F8 FA F8 
3a3a2     64 FB 65 FB 
3a3a6     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3a3aa     6D FB 6F FB 
3a3ae     70 FB 74 FB 
3a3b2     77 FB 77 FB 
3a3b6     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3a3ba     E9 F8 E4 F8 
3a3be     E8 F8 EB F8 
3a3c2     EE F8 F2 F8 
3a3c6     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3a3ca     B5 FA 9F FB 
3a3ce     A1 FB A4 FB 
3a3d2     A5 FB A9 FB 
3a3d6     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3a3da     AE FB B1 FB 
3a3de     B2 FB C7 F9 
3a3e2     39 F9 22 F9 
3a3e6     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3a3ea     26 F9 2A F9 
3a3ee     2E F9 32 F9 
3a3f2     33 F9 BA FB 
3a3f6     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3a3fa     DE FB E1 FB 
3a3fe     E2 FB E4 FB 
3a402     E5 FB E7 FB 
3a406     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3a40a     C5 F9 67 F9 
3a40e     57 F9 56 F9 
3a412     5B F9 5F F9 
3a416     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3a41a     68 F9 6C F9 
3a41e     0B FC 11 FC 
3a422     14 FC 15 FC 
3a426     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3a42a     B5 FB B5 FB 
3a42e     B6 FB B8 FB 
3a432     E9 FA C8 F9 
3a436     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3a43a     90 F9 94 F9 
3a43e     95 F9 99 F9 
3a442     9D F9 9F F9 
3a446     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
3a44a     DE FB DF FB 
3a44e     E2 FB E4 FB 
3a452     E6 FB E8 FB 
3a456     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
3a45a     EF FB AC FA 
3a45e     E9 F9 C7 F9 
3a462     C3 F9 C8 F9 
3a466     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
3a46a     D0 F9 D4 F9 
3a46e     D6 F9 0E FB 
3a472     11 FC 13 FC 
3a476     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
3a47a     19 FC 1B FC 
3a47e     1D FC 1E FC 
3a482     21 FC 22 FC 
3a486     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
3a48a     F7 F9 F7 F9 
3a48e     FB F9 FE F9 
3a492     00 FA 03 FA 
3a496     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
3a49a     1B FC 45 FC 
3a49e     46 FC 48 FC 
3a4a2     4A FC 4B FC 
3a4a6     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3a4aa     52 FC 54 FC 
3a4ae     F3 FB 82 FA 
3a4b2     35 FA 28 FA 
3a4b6     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3a4ba     31 FA 32 FA 
3a4be     37 FA 37 FA 
3a4c2     3C FA 00 FC 
3a4c6     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3a4ca     09 FC 0B FC 
3a4ce     0F FC 12 FC 
3a4d2     12 FC 15 FC 
3a4d6     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3a4da     8D FA 60 FA 
3a4de     5B FA 5C FA 
3a4e2     60 FA 61 FA 
3a4e6     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3a4ea     6C FA 6D FA 
3a4ee     37 FC 3A FC 
3a4f2     3B FC 3D FC 
3a4f6     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3a4fa     43 FC 44 FC 
3a4fe     45 FC 47 FC 
3a502     51 FB AB FA 
3a506     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3a50a     8E FA 91 FA 
3a50e     93 FA 95 FA 
3a512     98 FA 9B FA 
3a516     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3a51a     68 FC 6A FC 
3a51e     6C FC 6E FC 
3a522     70 FC 72 FC 
3a526     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3a52a     76 FC 3B FB 
3a52e     D0 FA BB FA 
3a532     B9 FA BD FA 
3a536     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3a53a     C4 FA C6 FA 
3a53e     CA FA 13 FC 
3a542     3A FC 3A FC 
3a546     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
3a54a     41 FC 43 FC 
3a54e     44 FC 47 FC 
3a552     48 FC 3C FC 
3a556     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
3a55a     E6 FA E8 FA 
3a55e     EB FA EE FA 
3a562     F0 FA F2 FA 
3a566     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
3a56a     61 FC 66 FC 
3a56e     68 FC 6B FC 
3a572     6C FC 6E FC 
3a576     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
3a57a     73 FC 75 FC 
3a57e     13 FC 3F FB 
3a582     17 FB 12 FB 
3a586     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
3a58a     1A FB 1D FB 
3a58e     1F FB 20 FB 
3a592     23 FB 92 FC 
3a596     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
3a59a     96 FC 97 FC 
3a59e     9A FC 9C FC 
3a5a2     9E FC 9F FC 
3a5a6     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
3a5aa     5A FB 41 FB 
3a5ae     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3a5b2     73 32 00 04 
3a5b6     00 00 10 00 
3a5ba     00 00 00 00 
3a5be     00 00 00 00 | atari2 file "atari2.s2"
3a5c2     43 87 43 87 
3a5c6     43 87 44 87 
3a5ca     43 87 44 87 
3a5ce     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a5d2     43 87 43 87 
3a5d6     43 87 44 87 
3a5da     43 87 43 87 
3a5de     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3a5e2     44 87 43 87 
3a5e6     44 87 43 87 
3a5ea     43 87 43 87 
3a5ee     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3a5f2     43 87 43 87 
3a5f6     44 87 43 87 
3a5fa     44 87 44 87 
3a5fe     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3a602     43 87 43 87 
3a606     44 87 43 87 
3a60a     43 87 42 87 
3a60e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3a612     43 87 43 87 
3a616     43 87 43 87 
3a61a     44 87 43 87 
3a61e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3a622     44 87 44 87 
3a626     43 87 44 87 
3a62a     43 87 44 87 
3a62e     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3a632     44 87 43 87 
3a636     44 87 44 87 
3a63a     43 87 43 87 
3a63e     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3a642     43 87 44 87 
3a646     44 87 43 87 
3a64a     43 87 44 87 
3a64e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3a652     43 87 43 87 
3a656     43 87 43 87 
3a65a     43 87 43 87 
3a65e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
3a662     42 87 43 87 
3a666     44 87 42 87 
3a66a     43 87 43 87 
3a66e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3a672     43 87 44 87 
3a676     44 87 43 87 
3a67a     43 87 43 87 
3a67e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3a682     43 87 5C 87 
3a686     EE 86 AC 87 
3a68a     4C 7C A3 78 
3a68e     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3a692     BC 78 BB 78 
3a696     BD 78 BC 78 
3a69a     BB 78 BD 78 
3a69e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3a6a2     BB 78 BB 78 
3a6a6     BC 78 BC 78 
3a6aa     BC 78 BB 78 
3a6ae     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a6b2     BC 78 BC 78 
3a6b6     BC 78 BC 78 
3a6ba     BC 78 BC 78 
3a6be     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3a6c2     BB 78 BC 78 
3a6c6     A0 78 4C 7C 
3a6ca     11 7A 29 89 
3a6ce     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3a6d2     44 87 43 87 
3a6d6     44 87 43 87 
3a6da     43 87 42 87 
3a6de     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3a6e2     43 87 43 87 
3a6e6     44 87 ED 85 
3a6ea     71 85 52 79 
3a6ee     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3a6f2     BC 78 BC 78 
3a6f6     BC 78 BC 78 
3a6fa     BC 78 BC 78 
3a6fe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a702     BC 78 BC 78 
3a706     BC 78 A0 78 
3a70a     CF 7A B9 81 
3a70e     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3a712     44 87 43 87 
3a716     43 87 44 87 
3a71a     43 87 44 87 
3a71e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a722     43 87 43 87 
3a726     43 87 43 87 
3a72a     44 87 43 87 
3a72e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3a732     43 87 43 87 
3a736     44 87 43 87 
3a73a     44 87 43 87 
3a73e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3a742     44 87 43 87 
3a746     43 87 43 87 
3a74a     5A 87 39 81 
3a74e     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3a752     A5 78 BC 78 
3a756     BB 78 BC 78 
3a75a     BB 78 BC 78 
3a75e     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3a762     BC 78 BC 78 
3a766     BC 78 BC 78 
3a76a     BC 78 8F 79 
3a76e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3a772     09 85 47 87 
3a776     43 87 43 87 
3a77a     42 87 42 87 
3a77e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3a782     43 87 43 87 
3a786     43 87 43 87 
3a78a     43 87 44 87 
3a78e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a792     43 87 43 87 
3a796     44 87 43 87 
3a79a     42 87 43 87 
3a79e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3a7a2     44 87 43 87 
3a7a6     43 87 43 87 
3a7aa     44 87 44 87 
3a7ae     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3a7b2     94 78 55 7A 
3a7b6     B9 78 BC 78 
3a7ba     BC 78 BC 78 
3a7be     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3a7c2     BC 78 BB 78 
3a7c6     BC 78 BC 78 
3a7ca     BC 78 BC 78 
3a7ce     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a7d2     BB 78 BC 78 
3a7d6     BC 78 BC 78 
3a7da     BB 78 BC 78 
3a7de     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a7e2     BC 78 BC 78 
3a7e6     BD 78 BC 78 
3a7ea     BC 78 BB 78 
3a7ee     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3a7f2     94 78 B3 84 
3a7f6     36 84 4A 87 
3a7fa     43 87 43 87 
3a7fe     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3a802     43 87 44 87 
3a806     43 87 43 87 
3a80a     43 87 43 87 
3a80e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3a812     43 87 44 87 
3a816     43 87 44 87 
3a81a     43 87 43 87 
3a81e     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3a822     43 87 43 87 
3a826     43 87 45 87 
3a82a     43 87 43 87 
3a82e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3a832     43 87 44 87 
3a836     44 87 44 87 
3a83a     43 87 43 87 
3a83e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3a842     43 87 42 87 
3a846     43 87 43 87 
3a84a     44 87 43 87 
3a84e     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3a852     54 87 3C 82 
3a856     36 83 52 79 
3a85a     C6 78 BC 78 
3a85e     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
3a862     BB 78 BB 78 
3a866     BC 78 BC 78 
3a86a     BC 78 BC 78 
3a86e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3a872     BD 78 ED 78 
3a876     1B 79 F4 83 
3a87a     4D 83 4E 87 
3a87e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3a882     44 87 43 87 
3a886     42 87 44 87 
3a88a     43 87 42 87 
3a88e     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3a892     43 87 54 87 
3a896     26 82 B3 84 
3a89a     D6 77 BB 78 
3a89e     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3a8a2     BC 78 BB 78 
3a8a6     BB 78 BB 78 
3a8aa     BB 78 BB 78 
3a8ae     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3a8b2     BC 78 BC 78 
3a8b6     26 79 18 75 
3a8ba     36 83 1F 84 
3a8be     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3a8c2     43 87 43 87 
3a8c6     43 87 43 87 
3a8ca     43 87 44 87 
3a8ce     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a8d2     43 87 44 87 
3a8d6     44 87 43 87 
3a8da     43 87 43 87 
3a8de     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3a8e2     43 87 43 87 
3a8e6     43 87 43 87 
3a8ea     44 87 44 87 
3a8ee     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3a8f2     44 87 43 87 
3a8f6     43 87 43 87 
3a8fa     43 87 44 87 
3a8fe     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3a902     44 87 44 87 
3a906     44 87 43 87 
3a90a     44 87 43 87 
3a90e     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a912     43 87 43 87 
3a916     43 87 44 87 
3a91a     44 87 43 87 
3a91e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a922     43 87 43 87 
3a926     43 87 43 87 
3a92a     43 87 44 87 
3a92e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a932     43 87 44 87 
3a936     43 87 44 87 
3a93a     19 87 7D 86 
3a93e     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3a942     B1 78 BC 78 
3a946     BC 78 BC 78 
3a94a     BC 78 BC 78 
3a94e     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3a952     BC 78 BC 78 
3a956     BD 78 BC 78 
3a95a     B7 78 3B 7B 
3a95e     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
3a962     96 86 44 87 
3a966     43 87 43 87 
3a96a     43 87 43 87 
3a96e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3a972     44 87 44 87 
3a976     43 87 44 87 
3a97a     43 87 44 87 
3a97e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3a982     43 87 44 87 
3a986     43 87 44 87 
3a98a     43 87 44 87 
3a98e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a992     43 87 44 87 
3a996     43 87 43 87 
3a99a     44 87 43 87 
3a99e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a9a2     44 87 44 87 
3a9a6     43 87 43 87 
3a9aa     43 87 44 87 
3a9ae     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3a9b2     43 87 43 87 
3a9b6     43 87 43 87 
3a9ba     44 87 44 87 
3a9be     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3a9c2     36 83 CF 7A 
3a9c6     AB 78 BB 78 
3a9ca     BC 78 BC 78 
3a9ce     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3a9d2     BB 78 BC 78 
3a9d6     BC 78 BC 78 
3a9da     BC 78 BC 78 
3a9de     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3a9e2     BC 78 BC 78 
3a9e6     BC 78 BB 78 
3a9ea     BC 78 BC 78 
3a9ee     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3a9f2     BB 78 BC 78 
3a9f6     BB 78 BC 78 
3a9fa     BC 78 BD 78 
3a9fe     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3aa02     BC 78 BC 78 
3aa06     BC 78 BC 78 
3aa0a     BC 78 BD 78 
3aa0e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3aa12     BC 78 BB 78 
3aa16     BC 78 BB 78 
3aa1a     BB 78 BC 78 
3aa1e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3aa22     BC 78 BC 78 
3aa26     BC 78 BC 78 
3aa2a     BC 78 BB 78 
3aa2e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3aa32     BC 78 BC 78 
3aa36     BC 78 BD 78 
3aa3a     BB 78 BC 78 
3aa3e     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3aa42     BC 78 BC 78 
3aa46     BC 78 BB 78 
3aa4a     BC 78 BB 78 
3aa4e     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3aa52     BB 78 BC 78 
3aa56     BC 78 BC 78 
3aa5a     BC 78 BB 78 
3aa5e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3aa62     BC 78 BC 78 
3aa66     BC 78 BB 78 
3aa6a     BC 78 BB 78 
3aa6e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3aa72     BC 78 BC 78 
3aa76     BC 78 BC 78 
3aa7a     BB 78 BC 78 
3aa7e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3aa82     BC 78 9F 78 
3aa86     52 79 B3 84 
3aa8a     2F 86 60 87 
3aa8e     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
3aa92     44 87 43 87 
3aa96     43 87 43 87 
3aa9a     43 87 43 87 
3aa9e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3aaa2     43 87 43 87 
3aaa6     43 87 44 87 
3aaaa     43 87 43 87 
3aaae     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3aab2     43 87 43 87 
3aab6     43 87 43 87 
3aaba     43 87 44 87 
3aabe     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3aac2     44 87 44 87 
3aac6     5E 87 BC 80 
3aaca     FB 80 94 78 
3aace     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3aad2     BD 78 BC 78 
3aad6     BB 78 BC 78 
3aada     BB 78 BB 78 
3aade     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3aae2     BC 78 BB 78 
3aae6     BB 78 6B 79 
3aaea     D6 77 AC 87 
3aaee     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3aaf2     43 87 44 87 
3aaf6     43 87 43 87 
3aafa     44 87 43 87 
3aafe     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3ab02     43 87 44 87 
3ab06     43 87 5C 87 
3ab0a     E7 80 00 80 
3ab0e     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3ab12     BC 78 BD 78 
3ab16     BC 78 BC 78 
3ab1a     BC 78 BB 78 
3ab1e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3ab22     BC 78 BC 78 
3ab26     BB 78 BC 78 
3ab2a     BB 78 BC 78 
3ab2e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3ab32     BB 78 BC 78 
3ab36     BC 78 BC 78 
3ab3a     BC 78 BC 78 
3ab3e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3ab42     BC 78 BC 78 
3ab46     BC 78 BC 78 
3ab4a     A0 78 8D 7B 
3ab4e     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
3ab52     60 87 43 87 
3ab56     44 87 44 87 
3ab5a     43 87 43 87 
3ab5e     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
3ab62     44 87 43 87 
3ab66     43 87 43 87 
3ab6a     44 87 73 86 
3ab6e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3ab72     51 7B B6 78 
3ab76     BC 78 BD 78 
3ab7a     BC 78 BC 78 
3ab7e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3ab82     BB 78 BC 78 
3ab86     BD 78 BB 78 
3ab8a     BC 78 BB 78 
3ab8e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3ab92     BC 78 BC 78 
3ab96     BC 78 BC 78 
3ab9a     BB 78 BC 78 
3ab9e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3aba2     BC 78 BB 78 
3aba6     BB 78 BC 78 
3abaa     BC 78 BB 78 
3abae     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3abb2     22 8C AF 84 
3abb6     48 87 43 87 
3abba     44 87 43 87 
3abbe     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3abc2     43 87 42 87 
3abc6     43 87 43 87 
3abca     44 87 43 87 
3abce     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3abd2     43 87 43 87 
3abd6     44 87 44 87 
3abda     43 87 43 87 
3abde     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3abe2     43 87 43 87 
3abe6     43 87 43 87 
3abea     44 87 43 87 
3abee     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3abf2     9F 8B D6 77 
3abf6     16 7C B3 78 
3abfa     BC 78 BB 78 
3abfe     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3ac02     BB 78 BC 78 
3ac06     BB 78 BC 78 
3ac0a     BC 78 BC 78 
3ac0e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3ac12     BC 78 BB 78 
3ac16     BB 78 BC 78 
3ac1a     BB 78 BC 78 
3ac1e     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3ac22     BB 78 BB 78 
3ac26     BC 78 BC 78 
3ac2a     BC 78 BB 78 
3ac2e     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3ac32     BC 78 BC 78 
3ac36     BC 78 BD 78 
3ac3a     BB 78 BC 78 
3ac3e     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
3ac42     BC 78 BC 78 
3ac46     BC 78 BB 78 
3ac4a     BC 78 BC 78 
3ac4e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3ac52     A8 78 54 7E 
3ac56     F4 83 17 82 
3ac5a     50 87 43 87 
3ac5e     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
3ac62     44 87 43 87 
3ac66     44 87 43 87 
3ac6a     43 87 44 87 
3ac6e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3ac72     43 87 28 87 
3ac76     20 85 CF 7A 
3ac7a     70 7D AD 78 
3ac7e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3ac82     BB 78 BC 78 
3ac86     BC 78 BC 78 
3ac8a     BB 78 BB 78 
3ac8e     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3ac92     BB 78 B2 78 
3ac96     9A 7C CF 7A 
3ac9a     4A 87 0D 87 
3ac9e     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3aca2     43 87 44 87 
3aca6     43 87 44 87 
3acaa     43 87 43 87 
3acae     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3acb2     44 87 43 87 
3acb6     28 87 51 85 
3acba     11 7A 1E 7D 
3acbe     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3acc2     BC 78 BB 78 
3acc6     BC 78 BC 78 
3acca     BC 78 BC 78 
3acce     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3acd2     BB 78 BC 78 
3acd6     BB 78 BC 78 
3acda     BC 78 BC 78 
3acde     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3ace2     BB 78 BC 78 
3ace6     BC 78 BC 78 
3acea     BD 78 BB 78 
3acee     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3acf2     BC 78 BB 78 
3acf6     BC 78 BC 78 
3acfa     BC 78 BB 78 
3acfe     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3ad02     BC 78 BC 78 
3ad06     BC 78 BC 78 
3ad0a     BB 78 BC 78 
3ad0e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3ad12     BC 78 BD 78 
3ad16     BC 78 BC 78 
3ad1a     BC 78 BB 78 
3ad1e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3ad22     BC 78 BB 78 
3ad26     BB 78 BC 78 
3ad2a     BC 78 BB 78 
3ad2e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3ad32     BB 78 BB 78 
3ad36     BB 78 BC 78 
3ad3a     B6 78 48 7D 
3ad3e     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
3ad42     56 87 43 87 
3ad46     42 87 44 87 
3ad4a     44 87 43 87 
3ad4e     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3ad52     43 87 44 87 
3ad56     43 87 44 87 
3ad5a     4C 87 7E 83 
3ad5e     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
3ad62     F7 78 BC 78 
3ad66     BC 78 BB 78 
3ad6a     BB 78 BC 78 
3ad6e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3ad72     BC 78 BB 78 
3ad76     BC 78 BC 78 
3ad7a     BB 78 BC 78 
3ad7e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3ad82     BB 78 BC 78 
3ad86     BC 78 BC 78 
3ad8a     BC 78 BB 78 
3ad8e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3ad92     BC 78 BC 78 
3ad96     BC 78 BC 78 
3ad9a     BC 78 BB 78 
3ad9e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3ada2     BC 78 BB 78 
3ada6     BB 78 BC 78 
3adaa     BC 78 BB 78 
3adae     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3adb2     BC 78 BC 78 
3adb6     BB 78 BC 78 
3adba     BC 78 BC 78 
3adbe     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3adc2     73 32 00 04 
3adc6     00 00 10 00 
3adca     00 00 00 00 
3adce     00 00 00 00 | atari12 file "atari12.s2"
3add2     00 6D 00 6D 
3add6     00 6D 00 6D 
3adda     00 6D 00 6D 
3adde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ade2     00 6D 00 6D 
3ade6     00 6D 00 6D 
3adea     00 6D 00 6D 
3adee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3adf2     00 6D 00 6D 
3adf6     00 6D 00 6D 
3adfa     00 6D 00 6D 
3adfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ae02     00 6D 00 6D 
3ae06     00 6D 00 6D 
3ae0a     00 6D 00 6D 
3ae0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3ae12     00 6D 00 6D 
3ae16     00 6D 00 6D 
3ae1a     00 6D 00 6D 
3ae1e     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
3ae22     00 6C 00 6C 
3ae26     00 6C 00 6C 
3ae2a     00 6C 00 6C 
3ae2e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3ae32     00 6C 00 6C 
3ae36     00 6C 00 6C 
3ae3a     00 6C 00 6C 
3ae3e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3ae42     00 6C 00 6C 
3ae46     00 6C 00 6C 
3ae4a     00 6C 00 6C 
3ae4e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3ae52     00 6C 00 6C 
3ae56     00 6C 00 6C 
3ae5a     00 6C 00 6C 
3ae5e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3ae62     00 6C 00 6C 
3ae66     00 6C 00 6C 
3ae6a     00 6C 00 6C 
3ae6e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3ae72     00 6C 00 6C 
3ae76     00 6C 00 6C 
3ae7a     00 6C 00 6C 
3ae7e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3ae82     00 6C 00 6C 
3ae86     00 6C 00 6C 
3ae8a     00 6C 00 6C 
3ae8e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3ae92     00 6C 00 6C 
3ae96     00 6C 00 6C 
3ae9a     00 6C 00 6C 
3ae9e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3aea2     00 6C 00 6C 
3aea6     00 6C 00 6C 
3aeaa     00 6C 00 6C 
3aeae     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3aeb2     00 6C 00 6C 
3aeb6     00 6C 00 6C 
3aeba     00 6C 00 6C 
3aebe     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3aec2     00 6C 00 6C 
3aec6     00 6C 00 6C 
3aeca     00 6C 00 6C 
3aece     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3aed2     00 6C 00 6B 
3aed6     00 6B 00 6B 
3aeda     00 6B 00 6B 
3aede     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3aee2     00 6B 00 6B 
3aee6     00 6B 00 6B 
3aeea     00 6B 00 6B 
3aeee     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3aef2     00 6B 00 6B 
3aef6     00 6B 00 6B 
3aefa     00 6B 00 6B 
3aefe     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3af02     00 6B 00 6B 
3af06     00 6B 00 6B 
3af0a     00 6B 00 6B 
3af0e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3af12     00 6B 00 6B 
3af16     00 6B 00 6B 
3af1a     00 6B 00 6B 
3af1e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3af22     00 6B 00 6B 
3af26     00 6B 00 6B 
3af2a     00 6B 00 6B 
3af2e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3af32     00 6B 00 6B 
3af36     00 6B 00 6B 
3af3a     00 6B 00 6B 
3af3e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3af42     00 6B 00 6B 
3af46     00 6B 00 6B 
3af4a     00 6B 00 6B 
3af4e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3af52     00 6B 00 6B 
3af56     00 6B 00 6B 
3af5a     00 6B 00 6B 
3af5e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3af62     00 6B 00 6B 
3af66     00 6B 00 6B 
3af6a     00 6A 00 9D 
3af6e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3af72     00 9E 00 9E 
3af76     00 9E 00 9E 
3af7a     00 9E 00 9E 
3af7e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3af82     00 9E 00 9E 
3af86     00 9E 00 9E 
3af8a     00 9E 00 9E 
3af8e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3af92     00 9E 00 9E 
3af96     00 9E 00 9E 
3af9a     00 9E 00 9E 
3af9e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3afa2     00 9E 00 9E 
3afa6     00 9E 00 9E 
3afaa     00 9E 00 9E 
3afae     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3afb2     00 9E 00 9E 
3afb6     00 9E 00 9E 
3afba     00 9E 00 9E 
3afbe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3afc2     00 9E 00 9E 
3afc6     00 9E 00 9E 
3afca     00 9E 00 9E 
3afce     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3afd2     00 9E 00 9E 
3afd6     00 9E 00 9E 
3afda     00 9E 00 9E 
3afde     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3afe2     00 9E 00 9E 
3afe6     00 9E 00 9E 
3afea     00 9E 00 9E 
3afee     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3aff2     00 9E 00 9E 
3aff6     00 9E 00 9E 
3affa     00 9E 00 9E 
3affe     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3b002     00 9F 00 9F 
3b006     00 9F 00 9F 
3b00a     00 9F 00 9F 
3b00e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b012     00 9F 00 9F 
3b016     00 9F 00 9F 
3b01a     00 9F 00 9F 
3b01e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b022     00 9F 00 9F 
3b026     00 9F 00 9F 
3b02a     00 9F 00 9F 
3b02e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b032     00 9F 00 9F 
3b036     00 9F 00 9F 
3b03a     00 9F 00 9F 
3b03e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b042     00 9F 00 9F 
3b046     00 9F 00 9F 
3b04a     00 9F 00 9F 
3b04e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b052     00 9F 00 9F 
3b056     00 9F 00 9F 
3b05a     00 9F 00 9F 
3b05e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b062     00 9F 00 9F 
3b066     00 9F 00 9F 
3b06a     00 9F 00 9F 
3b06e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b072     00 9F 00 9F 
3b076     00 9F 00 9F 
3b07a     00 9F 00 9F 
3b07e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b082     00 9F 00 9F 
3b086     00 9F 00 9F 
3b08a     00 9F 00 9F 
3b08e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b092     00 9F 00 9F 
3b096     00 9F 00 9F 
3b09a     00 9F 00 9F 
3b09e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b0a2     00 9F 00 9F 
3b0a6     00 9F 00 9F 
3b0aa     00 9F 00 9F 
3b0ae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b0b2     00 9F 00 9F 
3b0b6     00 9F 00 9F 
3b0ba     00 9F 00 9F 
3b0be     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3b0c2     00 9F 00 9F 
3b0c6     00 9F 00 A0 
3b0ca     00 A0 00 A0 
3b0ce     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b0d2     00 A0 00 A0 
3b0d6     00 A0 00 A0 
3b0da     00 A0 00 A0 
3b0de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b0e2     00 A0 00 A0 
3b0e6     00 A0 00 A0 
3b0ea     00 A0 00 A0 
3b0ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b0f2     00 A0 00 A0 
3b0f6     00 A0 00 A0 
3b0fa     00 A0 00 A0 
3b0fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b102     00 A0 00 A0 
3b106     00 A0 00 A0 
3b10a     00 A0 00 A0 
3b10e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b112     00 A0 00 A0 
3b116     00 A0 00 A0 
3b11a     00 A0 00 A0 
3b11e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b122     00 A0 00 A0 
3b126     00 A0 00 A0 
3b12a     00 A0 00 A0 
3b12e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b132     00 A0 00 A0 
3b136     00 A0 00 A0 
3b13a     00 A0 00 A0 
3b13e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b142     00 A0 00 A0 
3b146     00 A0 00 A0 
3b14a     00 A0 00 A0 
3b14e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b152     00 A0 00 A0 
3b156     00 A0 00 A0 
3b15a     00 A0 00 A0 
3b15e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b162     00 A0 00 A0 
3b166     00 A0 00 A0 
3b16a     00 A0 00 A0 
3b16e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b172     00 A0 00 A0 
3b176     00 A0 00 A0 
3b17a     00 A0 00 A0 
3b17e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b182     00 A0 00 A0 
3b186     00 A0 00 A0 
3b18a     00 A0 00 A0 
3b18e     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3b192     00 6D 00 6D 
3b196     00 6D 00 6D 
3b19a     00 6D 00 6D 
3b19e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b1a2     00 6D 00 6D 
3b1a6     00 6D 00 6D 
3b1aa     00 6D 00 6D 
3b1ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b1b2     00 6D 00 6D 
3b1b6     00 6D 00 6D 
3b1ba     00 6D 00 6D 
3b1be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b1c2     00 6D 00 6D 
3b1c6     00 6D 00 6D 
3b1ca     00 6D 00 6D 
3b1ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b1d2     00 6D 00 6D 
3b1d6     00 6D 00 6D 
3b1da     00 6D 00 6D 
3b1de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b1e2     00 6D 00 6D 
3b1e6     00 6D 00 6D 
3b1ea     00 6D 00 6D 
3b1ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b1f2     00 6D 00 6D 
3b1f6     00 6D 00 6D 
3b1fa     00 6D 00 6D 
3b1fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b202     00 6D 00 6D 
3b206     00 6D 00 6D 
3b20a     00 6D 00 6D 
3b20e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b212     00 6D 00 6D 
3b216     00 A0 00 A0 
3b21a     00 A0 00 A0 
3b21e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b222     00 A0 00 A0 
3b226     00 A0 00 A0 
3b22a     00 A0 00 A0 
3b22e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b232     00 A0 00 A0 
3b236     00 A0 00 A0 
3b23a     00 A0 00 A0 
3b23e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b242     00 A0 00 A0 
3b246     00 A0 00 A0 
3b24a     00 A0 00 A0 
3b24e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b252     00 A0 00 A0 
3b256     00 A0 00 A0 
3b25a     00 A0 00 A0 
3b25e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b262     00 A0 00 A0 
3b266     00 A0 00 A0 
3b26a     00 A0 00 A0 
3b26e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b272     00 A0 00 A0 
3b276     00 A0 00 A0 
3b27a     00 A0 00 A0 
3b27e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b282     00 A0 00 A0 
3b286     00 A0 00 A0 
3b28a     00 A0 00 A0 
3b28e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b292     00 A0 00 A0 
3b296     00 A0 00 A0 
3b29a     00 A0 00 A0 
3b29e     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3b2a2     00 6D 00 6D 
3b2a6     00 6D 00 6D 
3b2aa     00 6D 00 6D 
3b2ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b2b2     00 6D 00 6D 
3b2b6     00 6D 00 6D 
3b2ba     00 6D 00 6D 
3b2be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b2c2     00 6D 00 6D 
3b2c6     00 6D 00 6D 
3b2ca     00 6D 00 6D 
3b2ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b2d2     00 6D 00 6D 
3b2d6     00 6D 00 6D 
3b2da     00 6D 00 6D 
3b2de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b2e2     00 6D 00 6D 
3b2e6     00 6D 00 6D 
3b2ea     00 6D 00 6D 
3b2ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b2f2     00 6D 00 6D 
3b2f6     00 6D 00 6D 
3b2fa     00 6D 00 6D 
3b2fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b302     00 6D 00 6D 
3b306     00 6D 00 6D 
3b30a     00 6D 00 6D 
3b30e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b312     00 6D 00 6D 
3b316     00 6D 00 6D 
3b31a     00 6D 00 6D 
3b31e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b322     00 6D 00 6D 
3b326     00 6C 00 A0 
3b32a     00 9F 00 A0 
3b32e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3b332     00 A0 00 A0 
3b336     00 A0 00 A0 
3b33a     00 A0 00 A0 
3b33e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b342     00 A0 00 A0 
3b346     00 A0 00 A0 
3b34a     00 A0 00 A0 
3b34e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b352     00 A0 00 A0 
3b356     00 A0 00 A0 
3b35a     00 A0 00 A0 
3b35e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b362     00 A0 00 A0 
3b366     00 A0 00 A0 
3b36a     00 A0 00 A0 
3b36e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b372     00 A0 00 A0 
3b376     00 A0 00 A0 
3b37a     00 A0 00 A0 
3b37e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b382     00 A0 00 A0 
3b386     00 A0 00 A0 
3b38a     00 A0 00 A0 
3b38e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b392     00 A0 00 A0 
3b396     00 A0 00 A0 
3b39a     00 A0 00 A0 
3b39e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b3a2     00 A0 00 A0 
3b3a6     00 A0 00 A0 
3b3aa     00 A0 00 A0 
3b3ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b3b2     00 A0 00 A0 
3b3b6     00 A0 00 A0 
3b3ba     00 A0 00 A0 
3b3be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b3c2     00 A0 00 A0 
3b3c6     00 A0 00 A0 
3b3ca     00 A0 00 A0 
3b3ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b3d2     00 A0 00 A0 
3b3d6     00 A0 00 A0 
3b3da     00 A0 00 A0 
3b3de     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3b3e2     00 A1 00 A1 
3b3e6     00 A1 00 A1 
3b3ea     00 A1 00 A1 
3b3ee     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3b3f2     00 A1 00 A1 
3b3f6     00 A1 00 A1 
3b3fa     00 A1 00 A1 
3b3fe     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3b402     00 A1 00 A1 
3b406     00 A1 00 A1 
3b40a     00 A1 00 A1 
3b40e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3b412     00 A1 00 A1 
3b416     00 A1 00 A1 
3b41a     00 A1 00 A1 
3b41e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3b422     00 A1 00 A1 
3b426     00 A1 00 A1 
3b42a     00 A1 00 A1 
3b42e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3b432     00 A1 00 A1 
3b436     00 A1 00 A1 
3b43a     00 6E 00 6E 
3b43e     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3b442     00 6E 00 6E 
3b446     00 6E 00 6E 
3b44a     00 6E 00 6E 
3b44e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3b452     00 6E 00 6E 
3b456     00 6E 00 6E 
3b45a     00 6E 00 6E 
3b45e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3b462     00 6E 00 6E 
3b466     00 6E 00 6E 
3b46a     00 6E 00 6E 
3b46e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3b472     00 6E 00 6D 
3b476     00 6D 00 6D 
3b47a     00 6D 00 6D 
3b47e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b482     00 6D 00 6D 
3b486     00 6D 00 6D 
3b48a     00 6D 00 6D 
3b48e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b492     00 6D 00 6D 
3b496     00 6D 00 6D 
3b49a     00 6D 00 6D 
3b49e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b4a2     00 6D 00 6D 
3b4a6     00 6D 00 6D 
3b4aa     00 6D 00 6D 
3b4ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b4b2     00 6D 00 6D 
3b4b6     00 6D 00 6D 
3b4ba     00 6D 00 6D 
3b4be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b4c2     00 6D 00 6D 
3b4c6     00 6D 00 6D 
3b4ca     00 6D 00 6D 
3b4ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b4d2     00 6D 00 6D 
3b4d6     00 6D 00 6D 
3b4da     00 6D 00 6D 
3b4de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b4e2     00 6D 00 6D 
3b4e6     00 6D 00 6D 
3b4ea     00 6D 00 6D 
3b4ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b4f2     00 6D 00 6D 
3b4f6     00 6D 00 6D 
3b4fa     00 6D 00 6D 
3b4fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b502     00 6D 00 6D 
3b506     00 6D 00 6D 
3b50a     00 6D 00 6D 
3b50e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b512     00 6D 00 6D 
3b516     00 6D 00 6D 
3b51a     00 6D 00 6D 
3b51e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3b522     00 6D 00 6D 
3b526     00 6C 00 6C 
3b52a     00 6C 00 6C 
3b52e     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b532     00 6C 00 6C 
3b536     00 6C 00 6C 
3b53a     00 6C 00 6C 
3b53e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3b542     00 6C 00 6C 
3b546     00 6C 00 6C 
3b54a     00 9D 00 9F 
3b54e     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3b552     00 9F 00 9F 
3b556     00 9F 00 9F 
3b55a     00 A0 00 A0 
3b55e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b562     00 A0 00 A0 
3b566     00 A0 00 A0 
3b56a     00 A0 00 A0 
3b56e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b572     00 A0 00 A0 
3b576     00 A0 00 A0 
3b57a     00 A0 00 A0 
3b57e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b582     00 A0 00 A0 
3b586     00 A0 00 A0 
3b58a     00 A0 00 A0 
3b58e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b592     00 A0 00 A0 
3b596     00 A0 00 A0 
3b59a     00 A0 00 A0 
3b59e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b5a2     00 A0 00 A0 
3b5a6     00 A0 00 A0 
3b5aa     00 A0 00 A0 
3b5ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b5b2     00 A0 00 A0 
3b5b6     00 A0 00 A0 
3b5ba     00 A0 00 A0 
3b5be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b5c2     00 A0 00 A0 
3b5c6     00 A0 00 A0 
3b5ca     00 A0 00 A0 
3b5ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3b5d2     01 00 00 00 
3b5d6     00 00 00 00 
3b5da     00 00 00 00 
3b5de     00 00 00 00 | mouse  file "mouse2.def"
3b5e2     00 00 00 00 
3b5e6     00 00 00 00 
3b5ea     00 00 00 00 
3b5ee     00 00 00 00 | 	byte	$00[16]
3b5f2     01 01 00 00 
3b5f6     00 00 00 00 
3b5fa     00 00 00 00 
3b5fe     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b602     00 00 00 00 
3b606     00 00 00 00 
3b60a     00 00 00 00 
3b60e     00 00 00 00 | 	byte	$00[16]
3b612     01 0D 01 00 
3b616     00 00 00 00 
3b61a     00 00 00 00 
3b61e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b622     00 00 00 00 
3b626     00 00 00 00 
3b62a     00 00 00 00 
3b62e     00 00 00 00 | 	byte	$00[16]
3b632     01 0D 0D 01 
3b636     00 00 00 00 
3b63a     00 00 00 00 
3b63e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b642     00 00 00 00 
3b646     00 00 00 00 
3b64a     00 00 00 00 
3b64e     00 00 00 00 | 	byte	$00[16]
3b652     01 0D 0D 0D 
3b656     01 00 00 00 
3b65a     00 00 00 00 
3b65e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b662     00 00 00 00 
3b666     00 00 00 00 
3b66a     00 00 00 00 
3b66e     00 00 00 00 | 	byte	$00[16]
3b672     01 0D 0D 0D 
3b676     0D 01 00 00 
3b67a     00 00 00 00 
3b67e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b682     00 00 00 00 
3b686     00 00 00 00 
3b68a     00 00 00 00 
3b68e     00 00 00 00 | 	byte	$00[16]
3b692     01 0D 0D 0D 
3b696     0D 0D 01 00 
3b69a     00 00 00 00 
3b69e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b6a2     00 00 00 00 
3b6a6     00 00 00 00 
3b6aa     00 00 00 00 
3b6ae     00 00 00 00 | 	byte	$00[16]
3b6b2     01 0D 0D 0D 
3b6b6     0D 0D 0D 01 
3b6ba     00 00 00 00 
3b6be     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3b6c2     00 00 00 00 
3b6c6     00 00 00 00 
3b6ca     00 00 00 00 
3b6ce     00 00 00 00 | 	byte	$00[16]
3b6d2     01 0D 0D 0D 
3b6d6     0D 0D 0D 0C 
3b6da     01 00 00 00 
3b6de     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3b6e2     00 00 00 00 
3b6e6     00 00 00 00 
3b6ea     00 00 00 00 
3b6ee     00 00 00 00 | 	byte	$00[16]
3b6f2     01 0D 0D 0D 
3b6f6     0D 0D 0D 0D 
3b6fa     0C 01 00 00 
3b6fe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3b702     00 00 00 00 
3b706     00 00 00 00 
3b70a     00 00 00 00 
3b70e     00 00 00 00 | 	byte	$00[16]
3b712     01 0D 0D 0D 
3b716     0D 0D 0D 0D 
3b71a     0D 0C 01 00 
3b71e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3b722     00 00 00 00 
3b726     00 00 00 00 
3b72a     00 00 00 00 
3b72e     00 00 00 00 | 	byte	$00[16]
3b732     01 0D 0D 0D 
3b736     0D 0D 0D 0D 
3b73a     0D 0D 0B 01 
3b73e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3b742     00 00 00 00 
3b746     00 00 00 00 
3b74a     00 00 00 00 
3b74e     00 00 00 00 | 	byte	$00[16]
3b752     01 0D 0D 0D 
3b756     0C 0D 0D 03 
3b75a     01 01 01 01 
3b75e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3b762     00 00 00 00 
3b766     00 00 00 00 
3b76a     00 00 00 00 
3b76e     00 00 00 00 | 	byte	$00[16]
3b772     01 0D 0D 0C 
3b776     01 09 0D 03 
3b77a     00 00 00 00 
3b77e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3b782     00 00 00 00 
3b786     00 00 00 00 
3b78a     00 00 00 00 
3b78e     00 00 00 00 | 	byte	$00[16]
3b792     01 0D 0C 01 
3b796     00 01 0D 0B 
3b79a     01 00 00 00 
3b79e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3b7a2     00 00 00 00 
3b7a6     00 00 00 00 
3b7aa     00 00 00 00 
3b7ae     00 00 00 00 | 	byte	$00[16]
3b7b2     01 0C 01 00 
3b7b6     00 01 0A 0D 
3b7ba     01 00 00 00 
3b7be     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3b7c2     00 00 00 00 
3b7c6     00 00 00 00 
3b7ca     00 00 00 00 
3b7ce     00 00 00 00 | 	byte	$00[16]
3b7d2     01 01 00 00 
3b7d6     00 00 01 0D 
3b7da     0B 01 00 00 
3b7de     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3b7e2     00 00 00 00 
3b7e6     00 00 00 00 
3b7ea     00 00 00 00 
3b7ee     00 00 00 00 
3b7f2     00 00 00 00 
3b7f6     00 00       | 	byte	$00[22]
3b7f8     01 0B 0D 01 
3b7fc     00 00 00 00 
3b800     00 00 00 00 
3b804     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b808     00 00 00 00 
3b80c     00 00 00 00 
3b810     00 00 00 00 
3b814     00 00 00 00 
3b818     00          | 	byte	$00[17]
3b819     01 01 00 00 
3b81d     00 00 00 00 
3b821     00 00 00 00 
3b825     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b829     00 00 00 00 
      ...             
3b9cd     00 00 00 00 
3b9d1     00          | 	byte	$00[425]
3b9d2                 | 
3b9d2     00 00       |              	org
3b9d4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3b9d8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3b9dc 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3b9e0 003             | 
3b9e0 003 00 30 04 F6 |                 mov     psramaddr,#0
3b9e4 004             | 
3b9e4 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3b9e8 005 20 00 00 FF 
3b9ec 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3b9f0 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3b9f4 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3b9f8 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3b9fc 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3ba00 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3ba04 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3ba08 00d             | 
3ba08 00d 20 00 00 FF 
3ba0c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3ba10 00f E0 03 00 FF 
3ba14 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3ba18 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3ba1c 012             | 
3ba1c 012             |                 
3ba1c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3ba20 013             |     
3ba20 013 01 2C 60 FD |                 cogid 	t11				' get id
3ba24 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3ba28 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3ba2c 016             | 
3ba2c 016 00 00 00 00 | t11 		long 	0
3ba30 017 00 FF 07 00 | mailbox 	long 	$7FF00
3ba34 018 00 00 00 00 | psramaddr 	long 	0
3ba38 019 00 00 00 00 | pslockval	long 	0
3ba3c 01a 00 00 00 00 | cmd             long    0
3ba40 01b 00 00 00 00 | buf1            long    0
3ba44 01c 00 40 00 00 | buf2            long    16384
3ba48 01d 4C BA 03 00 | 	long	@@@_dat_ + 12612
3ba4c 01e 50 32 20 52 
3ba50 01f 65 74 72 6F 
3ba54 020 6D 61 63 68 
3ba58 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3ba5c 022 42 41 53 49 
3ba60 023 43 20 76 65 
3ba64 024 72 73 69 6F 
3ba68 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3ba6c 026 34 39 20 62 
3ba70 027 65 74 61 20 
3ba74 028 31 00 00 00 | 	byte	$34, $39, $20, $62, $65, $74, $61, $20, $31, $00, $00, $00
3ba78 029             | 	alignl
3ba78 029             | _hg010b_spin2_dat_
3ba78 029             | 
3ba78 029 00 00 00 00 
3ba7c 02a 00 00 00 00 
3ba80 02b 00 00 00 00 
3ba84 02c 00 00 00 00 
3ba88 02d 00 00 00    | vga_font       file "vgafont.def"
3ba8b 02d 7E 81 A5 81 
3ba8f 02e 81 BD 99 81 
3ba93 02f 81 7E 00 00 
3ba97 030 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3ba9b 031 7E FF DB FF 
3ba9f 032 FF C3 E7 FF 
3baa3 033 FF 7E 00 00 
3baa7 034 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3baab 035 00 36 7F 7F 
3baaf 036 7F 7F 3E 1C 
3bab3 037 08 00 00 00 
3bab7 038 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3babb 039 00 08 1C 3E 
3babf 03a 7F 3E 1C 08 
3bac3 03b 00 00 00 00 
3bac7 03c 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3bacb 03d 18 3C 3C E7 
3bacf 03e E7 E7 18 18 
3bad3 03f 3C 00 00 00 
3bad7 040 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3badb 041 18 3C 7E FF 
3badf 042 FF 7E 18 18 
3bae3 043 3C 00 00 00 
3bae7 044 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3baeb 045 00 00 00 18 
3baef 046 3C 3C 18 00 
3baf3 047 00 00 00 00 
3baf7 048 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3bafb 049 FF FF FF E7 
3baff 04a C3 C3 E7 FF 
3bb03 04b FF FF FF FF 
3bb07 04c FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3bb0b 04d 00 00 3C 66 
3bb0f 04e 42 42 66 3C 
3bb13 04f 00 00 00 00 
3bb17 050 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3bb1b 051 FF FF C3 99 
3bb1f 052 BD BD 99 C3 
3bb23 053 FF FF FF FF 
3bb27 054 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3bb2b 055 78 70 58 4C 
3bb2f 056 1E 33 33 33 
3bb33 057 33 1E 00 00 
3bb37 058 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3bb3b 059 3C 66 66 66 
3bb3f 05a 66 3C 18 7E 
3bb43 05b 18 18 00 00 
3bb47 05c 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3bb4b 05d FC CC FC 0C 
3bb4f 05e 0C 0C 0C 0E 
3bb53 05f 0F 07 00 00 
3bb57 060 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3bb5b 061 FE C6 FE C6 
3bb5f 062 C6 C6 C6 E6 
3bb63 063 E7 67 03 00 
3bb67 064 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3bb6b 065 18 18 DB 3C 
3bb6f 066 E7 3C DB 18 
3bb73 067 18 00 00 00 
3bb77 068 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3bb7b 069 03 07 0F 1F 
3bb7f 06a 7F 1F 0F 07 
3bb83 06b 03 01 00 00 
3bb87 06c 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3bb8b 06d 60 70 78 7C 
3bb8f 06e 7F 7C 78 70 
3bb93 06f 60 40 00 00 
3bb97 070 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3bb9b 071 18 3C 7E 18 
3bb9f 072 18 18 7E 3C 
3bba3 073 18 00 00 00 
3bba7 074 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3bbab 075 66 66 66 66 
3bbaf 076 66 66 66    | 	byte	$66[7]
3bbb2 077 00 66 66 00 
3bbb6 078 00 00 00 00 
3bbba 079 00 FE DB DB 
3bbbe 07a DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3bbc2 07b D8 D8 D8 00 
3bbc6 07c 00 00 00 3E 
3bbca 07d 63 06 1C 36 
3bbce 07e 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3bbd2 07f 30 63 3E 00 
3bbd6 080 00 00 00 00 
3bbda 081 00 00 00 00 
3bbde 082 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3bbe2 083 7F 7F 7F 00 
3bbe6 084 00 00 00 00 
3bbea 085 00 18 3C 7E 
3bbee 086 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3bbf2 087 3C 18 7E 00 
3bbf6 088 00 00 00 00 
3bbfa 089 00 18 3C 7E 
3bbfe 08a 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3bc02 08b 18 18 18 00 
3bc06 08c 00 00 00 00 
3bc0a 08d 00 18 18 18 
3bc0e 08e 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3bc12 08f 7E 3C 18 00 
3bc16 090 00 00 00 00 
3bc1a 091 00 00 00 18 
3bc1e 092 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3bc22 093 00 00 00 00 
3bc26 094 00 00 00 00 
3bc2a 095 00 00 00    | 	byte	$00[11]
3bc2d 096 0C 06 7F 06 
3bc31 097 0C 00 00 00 
3bc35 098 00 00 00 00 
3bc39 099 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bc3d 09a 00 03 03 03 
3bc41 09b 7F 00 00 00 
3bc45 09c 00 00 00 00 
3bc49 09d 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bc4d 09e 14 36 7F 36 
3bc51 09f 14 00 00 00 
3bc55 0a0 00 00 00 00 
3bc59 0a1 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3bc5d 0a2 1C 1C 3E 3E 
3bc61 0a3 7F 7F 00 00 
3bc65 0a4 00 00 00 00 
3bc69 0a5 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3bc6d 0a6 7F 3E 3E 1C 
3bc71 0a7 1C 08 00 00 
3bc75 0a8 00 00 00 00 
3bc79 0a9 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bc7d 0aa 00 00 00 00 
3bc81 0ab 00 00 00 00 
3bc85 0ac 00 00 00 00 
3bc89 0ad 00 00       | 	byte	$00[14]
3bc8b 0ad 18 3C 3C 3C 
3bc8f 0ae 18 18 18 00 
3bc93 0af 18 18 00 00 
3bc97 0b0 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3bc9b 0b1 66 24 00 00 
3bc9f 0b2 00 00 00 00 
3bca3 0b3 00 00 00 00 
3bca7 0b4 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bcab 0b5 00 36 36 7F 
3bcaf 0b6 36 36 36 7F 
3bcb3 0b7 36 36 00 00 
3bcb7 0b8 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3bcbb 0b9 3E 63 43 03 
3bcbf 0ba 3E 60 60 61 
3bcc3 0bb 63 3E 18 18 
3bcc7 0bc 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3bccb 0bd 00 00 43 63 
3bccf 0be 30 18 0C 06 
3bcd3 0bf 63 61 00 00 
3bcd7 0c0 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3bcdb 0c1 1C 36 36 1C 
3bcdf 0c2 6E 3B 33 33 
3bce3 0c3 33 6E 00 00 
3bce7 0c4 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3bceb 0c5 0C 0C 0C 06 
3bcef 0c6 00 00 00 00 
3bcf3 0c7 00 00 00 00 
3bcf7 0c8 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bcfb 0c9 30 18 0C 0C 
3bcff 0ca 0C 0C 0C 0C 
3bd03 0cb 18 30 00 00 
3bd07 0cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3bd0b 0cd 0C 18 30 30 
3bd0f 0ce 30 30 30 30 
3bd13 0cf 18 0C 00 00 
3bd17 0d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3bd1b 0d1 00 00 00 66 
3bd1f 0d2 3C FF 3C 66 
3bd23 0d3 00 00 00 00 
3bd27 0d4 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3bd2b 0d5 00 00 00 18 
3bd2f 0d6 18 7E 18 18 
3bd33 0d7 00 00 00 00 
3bd37 0d8 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3bd3b 0d9 00 00 00 00 
3bd3f 0da 00 00 00 00 | 	byte	$00[8]
3bd43 0db 18 18 18 0C 
3bd47 0dc 00 00 00 00 
3bd4b 0dd 00 00 00 00 
3bd4f 0de 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3bd53 0df 00 00 00 00 
3bd57 0e0 00 00 00 00 
3bd5b 0e1 00 00 00 00 
3bd5f 0e2 00 00 00 00 | 	byte	$00[16]
3bd63 0e3 18 18 00 00 
3bd67 0e4 00 00 00 00 
3bd6b 0e5 00 00 40 60 
3bd6f 0e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3bd73 0e7 03 01 00 00 
3bd77 0e8 00 00 00 00 
3bd7b 0e9 1C 36 63 63 
3bd7f 0ea 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3bd83 0eb 36 1C 00 00 
3bd87 0ec 00 00 00 00 
3bd8b 0ed 18 1C 1E 18 
3bd8f 0ee 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3bd93 0ef 18 7E 00 00 
3bd97 0f0 00 00 00 00 
3bd9b 0f1 3E 63 60 30 
3bd9f 0f2 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3bda3 0f3 63 7F 00 00 
3bda7 0f4 00 00 00 00 
3bdab 0f5 3E 63 60 60 
3bdaf 0f6 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3bdb3 0f7 63 3E 00 00 
3bdb7 0f8 00 00 00 00 
3bdbb 0f9 30 38 3C 36 
3bdbf 0fa 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3bdc3 0fb 30 78 00 00 
3bdc7 0fc 00 00 00 00 
3bdcb 0fd 7F 03 03 03 
3bdcf 0fe 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3bdd3 0ff 63 3E 00 00 
3bdd7 100 00 00 00 00 
3bddb 101 1C 06 03 03 
3bddf 102 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3bde3 103 63 3E 00 00 
3bde7 104 00 00 00 00 
3bdeb 105 7F 63 60 60 
3bdef 106 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3bdf3 107 0C 0C 00 00 
3bdf7 108 00 00 00 00 
3bdfb 109 3E 63 63 63 
3bdff 10a 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3be03 10b 63 3E 00 00 
3be07 10c 00 00 00 00 
3be0b 10d 3E 63 63 63 
3be0f 10e 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3be13 10f 30 1E 00 00 
3be17 110 00 00 00 00 
3be1b 111 00 00 00 18 
3be1f 112 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3be23 113 18 18 00 00 
3be27 114 00 00 00 00 
3be2b 115 00 00 00 18 
3be2f 116 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3be33 117 18 18 0C 00 
3be37 118 00 00 00 00 
3be3b 119 00 60 30 18 
3be3f 11a 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3be43 11b 30 60 00 00 
3be47 11c 00 00 00 00 
3be4b 11d 00 00 00 7E 
3be4f 11e 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3be53 11f 00 00 00 00 
3be57 120 00 00 00 00 
3be5b 121 00          | 	byte	$00[9]
3be5c 122 06 0C 18 30 
3be60 123 60 30 18 0C 
3be64 124 06 00 00 00 
3be68 125 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3be6c 126 63 63 30 18 
3be70 127 18 18 00 18 
3be74 128 18 00 00 00 
3be78 129 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3be7c 12a 3E 63 63 7B 
3be80 12b 7B 7B 3B 03 
3be84 12c 3E 00 00 00 
3be88 12d 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3be8c 12e 1C 36 63 63 
3be90 12f 7F 63 63 63 
3be94 130 63 00 00 00 
3be98 131 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3be9c 132 66 66 66 3E 
3bea0 133 66 66 66 66 
3bea4 134 3F 00 00 00 
3bea8 135 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3beac 136 66 43 03 03 
3beb0 137 03 03 43 66 
3beb4 138 3C 00 00 00 
3beb8 139 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3bebc 13a 36 66 66 66 
3bec0 13b 66 66 66 36 
3bec4 13c 1F 00 00 00 
3bec8 13d 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3becc 13e 66 46 16 1E 
3bed0 13f 16 06 46 66 
3bed4 140 7F 00 00 00 
3bed8 141 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3bedc 142 66 46 16 1E 
3bee0 143 16 06 06 06 
3bee4 144 0F 00 00 00 
3bee8 145 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3beec 146 66 43 03 03 
3bef0 147 7B 63 63 66 
3bef4 148 5C 00 00 00 
3bef8 149 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3befc 14a 63 63 63 7F 
3bf00 14b 63 63 63 63 
3bf04 14c 63 00 00 00 
3bf08 14d 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3bf0c 14e 18 18 18 18 
3bf10 14f 18 18 18 18 | 	byte	$18[8]
3bf14 150 3C 00 00 00 
3bf18 151 00 00 00 78 
3bf1c 152 30 30 30 30 
3bf20 153 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3bf24 154 1E 00 00 00 
3bf28 155 00 00 00 67 
3bf2c 156 66 66 36 1E 
3bf30 157 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3bf34 158 67 00 00 00 
3bf38 159 00 00 00 0F 
3bf3c 15a 06 06 06 06 
3bf40 15b 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3bf44 15c 7F 00 00 00 
3bf48 15d 00 00 00 63 
3bf4c 15e 77 7F 7F 6B 
3bf50 15f 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3bf54 160 63 00 00 00 
3bf58 161 00 00 00 63 
3bf5c 162 67 6F 7F 7B 
3bf60 163 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3bf64 164 63 00 00 00 
3bf68 165 00 00 00 3E 
3bf6c 166 63 63 63 63 
3bf70 167 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3bf74 168 3E 00 00 00 
3bf78 169 00 00 00 3F 
3bf7c 16a 66 66 66 3E 
3bf80 16b 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3bf84 16c 0F 00 00 00 
3bf88 16d 00 00 00 3E 
3bf8c 16e 63 63 63 63 
3bf90 16f 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3bf94 170 3E 30 70 00 
3bf98 171 00 00 00 3F 
3bf9c 172 66 66 66 3E 
3bfa0 173 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3bfa4 174 67 00 00 00 
3bfa8 175 00 00 00 3E 
3bfac 176 63 63 06 1C 
3bfb0 177 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3bfb4 178 3E 00 00 00 
3bfb8 179 00 00 00 7E 
3bfbc 17a 7E 5A 18 18 
3bfc0 17b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3bfc4 17c 3C 00 00 00 
3bfc8 17d 00 00 00 63 
3bfcc 17e 63 63 63 63 
3bfd0 17f 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3bfd4 180 3E 00 00 00 
3bfd8 181 00 00 00 63 
3bfdc 182 63 63 63 63 
3bfe0 183 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3bfe4 184 08 00 00 00 
3bfe8 185 00 00 00 63 
3bfec 186 63 63 63 6B 
3bff0 187 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3bff4 188 36 00 00 00 
3bff8 189 00 00 00 63 
3bffc 18a 63 36 3E 1C 
3c000 18b 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3c004 18c 63 00 00 00 
3c008 18d 00 00 00 66 
3c00c 18e 66 66 66 3C 
3c010 18f 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3c014 190 3C 00 00 00 
3c018 191 00 00 00 7F 
3c01c 192 63 61 30 18 
3c020 193 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3c024 194 7F 00 00 00 
3c028 195 00 00 00 3C 
3c02c 196 0C 0C 0C 0C 
3c030 197 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3c034 198 3C 00 00 00 
3c038 199 00 00 00 00 
3c03c 19a 01 03 07 0E 
3c040 19b 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3c044 19c 40 00 00 00 
3c048 19d 00 00 00 3C 
3c04c 19e 30 30 30 30 
3c050 19f 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3c054 1a0 3C 00 00 00 
3c058 1a1 1C 36 00 00 
3c05c 1a2 00 00 00 00 
3c060 1a3 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c064 1a4 00 00 00 00 
3c068 1a5 00 00 00 00 
3c06c 1a6 00 00 00 00 
3c070 1a7 00 00 00 00 
3c074 1a8 00          | 	byte	$00[17]
3c075 1a8 FF 00 00 0C 
3c079 1a9 18 00 00 00 
3c07d 1aa 00 00 00 00 
3c081 1ab 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c085 1ac 00 00 00 00 
3c089 1ad 00 00 00 00 
3c08d 1ae 00          | 	byte	$00[9]
3c08e 1ae 1E 30 3E 33 
3c092 1af 33 33 6E 00 
3c096 1b0 00 00 00 00 
3c09a 1b1 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3c09e 1b2 1E 36 66 66 
3c0a2 1b3 66 66 3E 00 
3c0a6 1b4 00 00 00 00 
3c0aa 1b5 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c0ae 1b6 3E 63 03 03 
3c0b2 1b7 03 63 3E 00 
3c0b6 1b8 00 00 00 00 
3c0ba 1b9 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3c0be 1ba 3C 36 33 33 
3c0c2 1bb 33 33 6E 00 
3c0c6 1bc 00 00 00 00 
3c0ca 1bd 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c0ce 1be 3E 63 7F 03 
3c0d2 1bf 03 63 3E 00 
3c0d6 1c0 00 00 00 00 
3c0da 1c1 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3c0de 1c2 0C 1E 0C 0C 
3c0e2 1c3 0C 0C 1E 00 
3c0e6 1c4 00 00 00 00 
3c0ea 1c5 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c0ee 1c6 6E 33 33 33 
3c0f2 1c7 33 33 3E 30 
3c0f6 1c8 33 1E 00 00 
3c0fa 1c9 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3c0fe 1ca 36 6E 66 66 
3c102 1cb 66 66 67 00 
3c106 1cc 00 00 00 00 
3c10a 1cd 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3c10e 1ce 1C 18 18 18 
3c112 1cf 18 18 3C 00 
3c116 1d0 00 00 00 00 
3c11a 1d1 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3c11e 1d2 70 60 60 60 
3c122 1d3 60 60 60 66 
3c126 1d4 66 3C 00 00 
3c12a 1d5 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3c12e 1d6 66 36 1E 1E 
3c132 1d7 36 66 67 00 
3c136 1d8 00 00 00 00 
3c13a 1d9 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3c13e 1da 18 18 18 18 
3c142 1db 18 18       | 	byte	$18[6]
3c144 1dc 3C 00 00 00 
3c148 1dd 00 00 00 00 
3c14c 1de 00 00 37 7F 
3c150 1df 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3c154 1e0 63 00 00 00 
3c158 1e1 00 00 00 00 
3c15c 1e2 00 00 3B 66 
3c160 1e3 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3c164 1e4 66 00 00 00 
3c168 1e5 00 00 00 00 
3c16c 1e6 00 00 3E 63 
3c170 1e7 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3c174 1e8 3E 00 00 00 
3c178 1e9 00 00 00 00 
3c17c 1ea 00 00 3B 66 
3c180 1eb 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3c184 1ec 3E 06 06 0F 
3c188 1ed 00 00 00 00 
3c18c 1ee 00 00 6E 33 
3c190 1ef 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3c194 1f0 3E 30 30 78 
3c198 1f1 00 00 00 00 
3c19c 1f2 00 00 3B 6E 
3c1a0 1f3 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3c1a4 1f4 0F 00 00 00 
3c1a8 1f5 00 00 00 00 
3c1ac 1f6 00 00 3E 63 
3c1b0 1f7 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3c1b4 1f8 3E 00 00 00 
3c1b8 1f9 00 00 00 08 
3c1bc 1fa 0C 0C 3F 0C 
3c1c0 1fb 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3c1c4 1fc 38 00 00 00 
3c1c8 1fd 00 00 00 00 
3c1cc 1fe 00 00 33 33 
3c1d0 1ff 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3c1d4 200 6E 00 00 00 
3c1d8 201 00 00 00 00 
3c1dc 202 00 00 63 63 
3c1e0 203 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3c1e4 204 1C 00 00 00 
3c1e8 205 00 00 00 00 
3c1ec 206 00 00 63 63 
3c1f0 207 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3c1f4 208 36 00 00 00 
3c1f8 209 00 00 00 00 
3c1fc 20a 00 00 63 36 
3c200 20b 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3c204 20c 63 00 00 00 
3c208 20d 00 00 00 00 
3c20c 20e 00 00 63 63 
3c210 20f 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3c214 210 7E 60 30 1F 
3c218 211 00 00 00 00 
3c21c 212 00 00 7F 33 
3c220 213 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3c224 214 7F 00 00 00 
3c228 215 00 00 00 70 
3c22c 216 18 18 18 0E 
3c230 217 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3c234 218 70 00 00 00 
3c238 219 00 00 00 18 
3c23c 21a 18 18 18 18 
3c240 21b 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3c244 21c 18 00 00 00 
3c248 21d 00 00 00 0E 
3c24c 21e 18 18 18 70 
3c250 21f 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3c254 220 0E 00 00 00 
3c258 221 6E 3B 00 00 
3c25c 222 00 00 00 00 
3c260 223 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c264 224 00 00 00 00 
3c268 225 00 00 00 00 
3c26c 226 00 00       | 	byte	$00[10]
3c26e 226 08 1C 36 63 
3c272 227 63 63 7F 00 
3c276 228 00 00 00 00 
3c27a 229 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3c27e 22a 03 03 03 03 
3c282 22b 43 66 3C 18 
3c286 22c 30 1E 00 00 
3c28a 22d 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3c28e 22e 33 33 33 33 
3c292 22f 33 33       | 	byte	$33[6]
3c294 230 6E 00 00 00 
3c298 231 00 00 60 30 
3c29c 232 18 00 3E 63 
3c2a0 233 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3c2a4 234 3E 00 00 00 
3c2a8 235 00 00 08 1C 
3c2ac 236 36 00 1E 30 
3c2b0 237 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3c2b4 238 6E 00 00 00 
3c2b8 239 00 00 00 00 
3c2bc 23a 33 00 1E 30 
3c2c0 23b 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3c2c4 23c 6E 00 00 00 
3c2c8 23d 00 00 1C 36 
3c2cc 23e 1C 00 33 33 
3c2d0 23f 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3c2d4 240 6E 00 00 00 
3c2d8 241 00 00 60 30 
3c2dc 242 18 00 3E 63 
3c2e0 243 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3c2e4 244 3E 00 00 00 
3c2e8 245 00 00 00 00 
3c2ec 246 00 00 3E 63 
3c2f0 247 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3c2f4 248 3E 18 30 1E 
3c2f8 249 00 00 00 1C 
3c2fc 24a 58 78 38 18 
3c300 24b 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3c304 24c 3C 00 00 00 
3c308 24d 00 00 00 00 
3c30c 24e 63 00 3E 63 
3c310 24f 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3c314 250 3E 00 00 00 
3c318 251 66 33 00 3E 
3c31c 252 63 63 63 63 
3c320 253 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3c324 254 3E 00 00 00 
3c328 255 00 00 CC 66 
3c32c 256 33 00 3E 63 
3c330 257 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3c334 258 3E 00 00 00 
3c338 259 00 00 18 3C 
3c33c 25a 66 00 1C 18 
3c340 25b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3c344 25c 3C 00 00 00 
3c348 25d 30 18 00 7F 
3c34c 25e 63 61 30 18 
3c350 25f 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3c354 260 7F 00 00 00 
3c358 261 00 63 00 08 
3c35c 262 1C 36 63 63 
3c360 263 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3c364 264 63 00 00 00 
3c368 265 30 18 00 3C 
3c36c 266 66 43 03 03 
3c370 267 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3c374 268 3C 00 00 00 
3c378 269 30 18 00 7F 
3c37c 26a 66 46 16 1E 
3c380 26b 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3c384 26c 7F 00 00 00 
3c388 26d 0C 06 00 0F 
3c38c 26e 06 06 06 06 
3c390 26f 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3c394 270 7F 00 00 00 
3c398 271 30 18 00 1C 
3c39c 272 18 18 18 18 
3c3a0 273 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3c3a4 274 3C 00 00 00 
3c3a8 275 00 00 08 1C 
3c3ac 276 36 00 3E 63 
3c3b0 277 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3c3b4 278 3E 00 00 00 
3c3b8 279 00 00 00 00 
3c3bc 27a 63 00 3E 63 
3c3c0 27b 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3c3c4 27c 3E 00 00 00 
3c3c8 27d 00 00 00 6F 
3c3cc 27e 46 26 06 06 
3c3d0 27f 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3c3d4 280 7F 00 00 00 
3c3d8 281 00 00 00 6E 
3c3dc 282 4C 2C 0C 0C 
3c3e0 283 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3c3e4 284 1E 00 00 00 
3c3e8 285 30 18 00 3E 
3c3ec 286 63 63 06 1C 
3c3f0 287 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3c3f4 288 3E 00 00 00 
3c3f8 289 00 00 60 30 
3c3fc 28a 18 00 3E 63 
3c400 28b 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3c404 28c 3E 00 00 00 
3c408 28d 00 63 00 3E 
3c40c 28e 63 63 63 63 
3c410 28f 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3c414 290 3E 00 00 00 
3c418 291 00 63 00 63 
3c41c 292 63 63 63 63 
3c420 293 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3c424 294 3E 00 00 00 
3c428 295 6C 38 00 7E 
3c42c 296 7E 5A 18 18 
3c430 297 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3c434 298 3C 00 00 00 
3c438 299 00 00 60 48 
3c43c 29a 2C 0C 3F 0C 
3c440 29b 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3c444 29c 38 00 00 00 
3c448 29d 00 00 00 0F 
3c44c 29e 26 36 1E 0E 
3c450 29f 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3c454 2a0 7F 00 00 00 
3c458 2a1 00 00 00 00 
3c45c 2a2 00 63 36 1C 
3c460 2a3 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3c464 2a4 00 00 00 00 
3c468 2a5 00 00       | 	byte	$00[6]
3c46a 2a5 36 1C 08 00 
3c46e 2a6 3E 63 03 03 
3c472 2a7 03 63 3E 00 
3c476 2a8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3c47a 2a9 30 18 0C 00 
3c47e 2aa 1E 30 3E 33 
3c482 2ab 33 33 6E 00 
3c486 2ac 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3c48a 2ad 60 30 18 00 
3c48e 2ae 1C 18 18 18 
3c492 2af 18 18 3C 00 
3c496 2b0 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3c49a 2b1 60 30 18 00 
3c49e 2b2 3E 63 63 63 
3c4a2 2b3 63 63 3E 00 
3c4a6 2b4 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3c4aa 2b5 30 18 0C 00 
3c4ae 2b6 33 33 33 33 
3c4b2 2b7 33 33 6E 00 
3c4b6 2b8 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3c4ba 2b9 00 08 1C 36 
3c4be 2ba 63 63 7F 63 
3c4c2 2bb 63 63 63 18 
3c4c6 2bc 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3c4ca 2bd 00 00 00 00 
3c4ce 2be 1E 30 3E 33 
3c4d2 2bf 33 33 6E 18 
3c4d6 2c0 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3c4da 2c1 00 7F 63 61 
3c4de 2c2 30 18 0C 06 
3c4e2 2c3 43 63 7F 00 
3c4e6 2c4 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3c4ea 2c5 36 1C 08 00 
3c4ee 2c6 7F 33 18 0C 
3c4f2 2c7 06 63 7F 00 
3c4f6 2c8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3c4fa 2c9 00 7F 66 46 
3c4fe 2ca 16 1E 16 06 
3c502 2cb 46 66 7F 18 
3c506 2cc 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3c50a 2cd 00 00 00 00 
3c50e 2ce 3E 63 7F 03 
3c512 2cf 03 63 3E 18 
3c516 2d0 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3c51a 2d1 00 3C 66 03 
3c51e 2d2 1F 03 0F 03 
3c522 2d3 03 66 3C 00 
3c526 2d4 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3c52a 2d5 60 30 18 00 
3c52e 2d6 7F 33 18 0C 
3c532 2d7 06 63 7F 00 
3c536 2d8 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3c53a 2d9 00 3C 66 43 
3c53e 2da 03 03 03 03 
3c542 2db 43 66 3C 00 
3c546 2dc 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3c54a 2dd 00 00 00 00 
3c54e 2de 3E 63 06 1C 
3c552 2df 30 63 3E 18 
3c556 2e0 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3c55a 2e1 00 00 00 00 
3c55e 2e2 00 00       | 	byte	$00[6]
3c560 2e3 6C 36 1B 36 
3c564 2e4 6C 00 00 00 
3c568 2e5 00 00 00 00 
3c56c 2e6 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c570 2e7 1B 36 6C 36 
3c574 2e8 1B 00 00 00 
3c578 2e9 88 22 88 22 
3c57c 2ea 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3c580 2eb 88 22 88 22 
3c584 2ec 88 22 88 22 
3c588 2ed AA 55 AA 55 
3c58c 2ee AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3c590 2ef AA 55 AA 55 
3c594 2f0 AA 55 AA 55 
3c598 2f1 BB EE BB EE 
3c59c 2f2 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3c5a0 2f3 BB EE BB EE 
3c5a4 2f4 BB EE BB EE 
3c5a8 2f5 18 18 18 18 
3c5ac 2f6 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3c5b0 2f7 18 18 18 18 
3c5b4 2f8 18 18 18 18 
3c5b8 2f9 18 18 18 18 
3c5bc 2fa 18 18 18    | 	byte	$18[15]
3c5bf 2fa 1F 18 18 18 
3c5c3 2fb 18 18 18 18 
3c5c7 2fc 18 30 18 00 
3c5cb 2fd 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3c5cf 2fe 63 7F 63 63 
3c5d3 2ff 63 63 00 00 
3c5d7 300 00 1C 36 00 
3c5db 301 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3c5df 302 63 7F 63 63 
3c5e3 303 63 63 00 00 
3c5e7 304 00 36 1C 00 
3c5eb 305 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3c5ef 306 1E 16 06 46 
3c5f3 307 66 7F 00 00 
3c5f7 308 00 00 00 00 
3c5fb 309 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3c5ff 30a 1C 30 60 63 
3c603 30b 63 3E 18 30 
3c607 30c 1E 6C 6C 6C 
3c60b 30d 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3c60f 30e 6F 6C 6C 6C 
3c613 30f 6C 6C 6C 6C 
3c617 310 6C 6C 6C 6C 
3c61b 311 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3c61f 312 6C 6C 6C 6C 
3c623 313 6C 6C 6C 6C 
3c627 314 6C          | 	byte	$6c[9]
3c628 315 00 00 00 00 
3c62c 316 00          | 	byte	$00[5]
3c62d 316 7F 60 6F 6C 
3c631 317 6C 6C 6C 6C 
3c635 318 6C 6C 6C 6C 
3c639 319 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3c63d 31a 6F 60 7F 00 
3c641 31b 00 00 00 00 
3c645 31c 00 00 00 18 
3c649 31d 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3c64d 31e 61 30 18 0C 
3c651 31f 06 43 63 7F 
3c655 320 00 00 00 00 
3c659 321 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3c65d 322 00 7F 33 18 
3c661 323 0C 06 63 7F 
3c665 324 00 00 00 00 
3c669 325 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3c66d 326 00 00 1F 18 
3c671 327 18 18 18 18 
3c675 328 18 18 18 18 
3c679 329 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3c67d 32a 18 18 F8 00 
3c681 32b 00 00 00 00 
3c685 32c 00 00 00 18 
3c689 32d 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3c68d 32e 18 18 FF 00 
3c691 32f 00 00 00 00 
3c695 330 00 00 00 00 
3c699 331 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c69d 332 00 00 FF 18 
3c6a1 333 18 18 18 18 
3c6a5 334 18 18 18 18 
3c6a9 335 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3c6ad 336 18 18 F8 18 
3c6b1 337 18 18 18 18 
3c6b5 338 18 18 18 00 
3c6b9 339 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3c6bd 33a 00 00 FF 00 
3c6c1 33b 00 00 00 00 
3c6c5 33c 00 00 00 18 
3c6c9 33d 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3c6cd 33e 18 18 FF 18 
3c6d1 33f 18 18 18 18 
3c6d5 340 18 18 18 63 
3c6d9 341 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3c6dd 342 36 63 63 7F 
3c6e1 343 63 63 63 63 
3c6e5 344 00 00 00 00 
3c6e9 345 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3c6ed 346 00 1E 30 3E 
3c6f1 347 33 33 33 6E 
3c6f5 348 00 00 00 6C 
3c6f9 349 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3c6fd 34a EC 0C FC 00 
3c701 34b 00 00 00 00 
3c705 34c 00 00 00 00 
3c709 34d 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c70d 34e FC 0C EC 6C 
3c711 34f 6C 6C 6C 6C 
3c715 350 6C 6C 6C 6C 
3c719 351 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3c71d 352 EF 00 FF 00 
3c721 353 00 00 00 00 
3c725 354 00 00 00 00 
3c729 355 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c72d 356 FF 00 EF 6C 
3c731 357 6C 6C 6C 6C 
3c735 358 6C 6C 6C 6C 
3c739 359 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3c73d 35a EC 0C EC 6C 
3c741 35b 6C 6C 6C 6C 
3c745 35c 6C 6C 6C 00 
3c749 35d 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3c74d 35e FF 00 FF 00 
3c751 35f 00 00 00 00 
3c755 360 00 00 00 6C 
3c759 361 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3c75d 362 EF 00 EF 6C 
3c761 363 6C 6C 6C 6C 
3c765 364 6C 6C 6C 00 
3c769 365 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3c76d 366 63 3E 63 63 
3c771 367 63 63 3E 63 
3c775 368 00 00 00 00 
3c779 369 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3c77d 36a 30 3C 36 33 
3c781 36b 33 33 33 6E 
3c785 36c 00 00 00 00 
3c789 36d 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3c78d 36e 66 66 6F 66 
3c791 36f 66 66 36 1F 
3c795 370 00 00 00 36 
3c799 371 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3c79d 372 66 66 66 66 
3c7a1 373 66 66       | 	byte	$66[6]
3c7a3 373 36 1F 00 00 
3c7a7 374 00 00 63 00 
3c7ab 375 7F 66 46 16 
3c7af 376 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3c7b3 377 66 7F 00 00 
3c7b7 378 00 6C 38 00 
3c7bb 379 38 30 30 3C 
3c7bf 37a 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3c7c3 37b 33 6E 00 00 
3c7c7 37c 00 36 1C 00 
3c7cb 37d 63 67 6F 7F 
3c7cf 37e 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3c7d3 37f 63 63 00 00 
3c7d7 380 00 30 18 00 
3c7db 381 3C 18 18 18 
3c7df 382 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3c7e3 383 18 3C 00 00 
3c7e7 384 00 3C 66 00 
3c7eb 385 3C 18 18 18 
3c7ef 386 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3c7f3 387 18 3C 00 00 
3c7f7 388 00 00 00 36 
3c7fb 389 1C 08 00 3E 
3c7ff 38a 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3c803 38b 63 3E 00 00 
3c807 38c 00 18 18 18 
3c80b 38d 18 18 18 18 
3c80f 38e 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3c813 38f 00 00 00 00 
3c817 390 00 00 00 00 
3c81b 391 00 00 00 00 | 	byte	$00[12]
3c81f 392 F8 18 18 18 
3c823 393 18 18 18 18 
3c827 394 18 FF FF FF 
3c82b 395 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3c82f 396 FF FF FF FF 
3c833 397 FF FF FF FF 
3c837 398 FF          | 	byte	$ff[9]
3c838 399 00 00 00 00 
3c83c 39a 00 00 00    | 	byte	$00[7]
3c83f 39a FF FF FF FF 
3c843 39b FF FF FF FF 
3c847 39c FF          | 	byte	$ff[9]
3c848 39d 00 00 00 7E 
3c84c 39e 7E 5A 18 18 
3c850 39f 18 18 18 18 
3c854 3a0 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3c858 3a1 1C 36 1C 63 
3c85c 3a2 63 63 63 63 
3c860 3a3 63 63 63 63 
3c864 3a4 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3c868 3a5 FF FF FF FF 
3c86c 3a6 FF FF FF    | 	byte	$ff[7]
3c86f 3a6 00 00 00 00 
3c873 3a7 00 00 00 00 
3c877 3a8 00          | 	byte	$00[9]
3c878 3a9 30 18 00 3E 
3c87c 3aa 63 63 63 63 
3c880 3ab 63 63 63 63 
3c884 3ac 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3c888 3ad 00 00 00 1E 
3c88c 3ae 33 33 33 1B 
3c890 3af 33 63 63 63 
3c894 3b0 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3c898 3b1 1C 36 00 3E 
3c89c 3b2 63 63 63 63 
3c8a0 3b3 63 63 63 63 
3c8a4 3b4 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3c8a8 3b5 30 18 00 63 
3c8ac 3b6 67 6F 7F 7B 
3c8b0 3b7 73 63 63 63 
3c8b4 3b8 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3c8b8 3b9 00 00 60 30 
3c8bc 3ba 18 00 3B 66 
3c8c0 3bb 66 66 66 66 
3c8c4 3bc 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3c8c8 3bd 00 00 36 1C 
3c8cc 3be 08 00 3B 66 
3c8d0 3bf 66 66 66 66 
3c8d4 3c0 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3c8d8 3c1 36 1C 00 3E 
3c8dc 3c2 63 63 06 1C 
3c8e0 3c3 30 60 63 63 
3c8e4 3c4 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3c8e8 3c5 00 00 36 1C 
3c8ec 3c6 08 00 3E 63 
3c8f0 3c7 06 1C 30 63 
3c8f4 3c8 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3c8f8 3c9 30 18 00 3F 
3c8fc 3ca 66 66 66 3E 
3c900 3cb 36 66 66 66 
3c904 3cc 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3c908 3cd 30 18 00 63 
3c90c 3ce 63 63 63 63 
3c910 3cf 63 63 63 63 
3c914 3d0 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3c918 3d1 00 00 60 30 
3c91c 3d2 18 00 3B 6E 
3c920 3d3 66 06 06 06 
3c924 3d4 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3c928 3d5 66 33 00 63 
3c92c 3d6 63 63 63 63 
3c930 3d7 63 63 63 63 
3c934 3d8 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3c938 3d9 00 00 60 30 
3c93c 3da 18 00 63 63 
3c940 3db 63 63 63 63 
3c944 3dc 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3c948 3dd 30 18 00 66 
3c94c 3de 66 66 66 3C 
3c950 3df 18 18 18 18 
3c954 3e0 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3c958 3e1 00 00 00 08 
3c95c 3e2 0C 0C 3F 0C 
3c960 3e3 0C 0C 0C 6C 
3c964 3e4 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3c968 3e5 30 18 00 00 
3c96c 3e6 00 00 00 00 
3c970 3e7 00 00 00 00 
3c974 3e8 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c978 3e9 00 00 00 00 
3c97c 3ea 00 00 00 00 | 	byte	$00[8]
3c980 3eb 7F 00 00 00 
3c984 3ec 00 00 00 00 
3c988 3ed 66 33 00 00 
3c98c 3ee 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3c990 3ef 00 00 00 00 
3c994 3f0 00 00 00 00 
3c998 3f1 00 00 00 00 
3c99c 3f2 00 00 00 00 
3c9a0 3f3 00 00 00 00 
3c9a4 3f4 00          | 	byte	$00[21]
3c9a5 3f4 0C 06 3C 36 
3c9a9 3f5 1C 00 00 00 
3c9ad 3f6 00 00 00 00 
3c9b1 3f7 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c9b5 3f8 00 00 00 63 
3c9b9 3f9 3E 00 00 00 
3c9bd 3fa 00 00 00 00 
3c9c1 3fb 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c9c5 3fc 00 00 00 00 
3c9c9 3fd 3E 63 06 1C 
3c9cd 3fe 36 63 63 36 
3c9d1 3ff 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3c9d5 400 00 00 00 00 
3c9d9 401 00 00 00 00 | 	byte	$00[8]
3c9dd 402 18 00 7E 00 
3c9e1 403 18 00 00 00 
3c9e5 404 00 00 00 00 
3c9e9 405 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c9ed 406 00 00 00 00 
3c9f1 407 00 00 00 00 | 	byte	$00[8]
3c9f5 408 18 30 1E 00 
3c9f9 409 00 00 1C 36 
3c9fd 40a 36 1C 00 00 
3ca01 40b 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3ca05 40c 00 00 00 00 
3ca09 40d 63 00 00 00 
3ca0d 40e 00 00 00 00 
3ca11 40f 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ca15 410 00 00 00 18 
3ca19 411 18 00 00 00 
3ca1d 412 00 00 00 00 
3ca21 413 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ca25 414 00 00 00 00 
3ca29 415 00          | 	byte	$00[5]
3ca2a 415 CC 66 33 00 
3ca2e 416 33 33 33 33 
3ca32 417 33 33 6E 00 
3ca36 418 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3ca3a 419 00 3F 66 66 
3ca3e 41a 66 3E 36 66 
3ca42 41b 66 66 6F 00 
3ca46 41c 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3ca4a 41d 36 1C 08 00 
3ca4e 41e 3B 6E 66 06 
3ca52 41f 06 06 0F 00 
3ca56 420 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3ca5a 421 00 00 00 7E 
3ca5e 422 7E 7E 7E 7E 
3ca62 423 7E 7E 00 00 
3ca66 424 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3ca6a 425 00 00 00 00 
3ca6e 426 00 00 00 00 
3ca72 427 00 00 00 00 
3ca76 428 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ca78 429 00 00 00 00 
      ...             
3caa8 435 00 00 00 00 
3caac 436 00 00 00    | st_font        file "st4font.def"
3caaf 436 FF FF 00 00 
3cab3 437 00 00 00 00 
3cab7 438 00 18 18 18 
3cabb 439 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3cabf 43a 18 18 18 18 
3cac3 43b 18 18 18 18 
3cac7 43c 18          | 	byte	$18[9]
3cac8 43d 00 00 00 00 
3cacc 43e 00 00 00    | 	byte	$00[7]
3cacf 43e FF FF 18 18 
3cad3 43f 18 18 18 18 
3cad7 440 18 18 18 18 
3cadb 441 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3cadf 442 FF FF 00 00 
3cae3 443 00 00 00 00 
3cae7 444 00 18 18 18 
3caeb 445 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3caef 446 1F 1F 18 18 
3caf3 447 18 18 18 18 
3caf7 448 18 18 18 18 
3cafb 449 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3caff 44a F8 F8 18 18 
3cb03 44b 18 18 18 18 
3cb07 44c 18 00 00 00 
3cb0b 44d 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3cb0f 44e 1F 1F 18 18 
3cb13 44f 18 18 18 18 
3cb17 450 18 00 00 00 
3cb1b 451 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3cb1f 452 F8 F8 18 18 
3cb23 453 18 18 18 18 
3cb27 454 18 18 18 18 
3cb2b 455 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3cb2f 456 1F 1F 00 00 
3cb33 457 00 00 00 00 
3cb37 458 00 18 18 18 
3cb3b 459 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3cb3f 45a F8 F8 00 00 
3cb43 45b 00 00 00 00 
3cb47 45c 00 18 18 18 
3cb4b 45d 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3cb4f 45e FF FF 18 18 
3cb53 45f 18 18 18 18 
3cb57 460 18 00 00 18 
3cb5b 461 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3cb5f 462 66 7E 7E 66 
3cb63 463 66 66 66 30 
3cb67 464 18 00 00 7E 
3cb6b 465 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3cb6f 466 3E 06 06 06 
3cb73 467 06 7E 7E 18 
3cb77 468 0C 30 18 3C 
3cb7b 469 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3cb7f 46a 06 06 06 66 
3cb83 46b 66 7E 3C 00 
3cb87 46c 00 30 18 66 
3cb8b 46d 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3cb8f 46e 7E 7E 76 76 
3cb93 46f 66 66 66 00 
3cb97 470 00 30 18 7C 
3cb9b 471 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3cb9f 472 1C 38 70 60 
3cba3 473 60 7E 3E 00 
3cba7 474 00 30 18 7E 
3cbab 475 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3cbaf 476 18 0C 0C 06 
3cbb3 477 06 7E 7E 00 
3cbb7 478 00 18 18 00 
3cbbb 479 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3cbbf 47a 18 18 0C 0C 
3cbc3 47b 06 7E 7E 00 
3cbc7 47c 00 30 18 3C 
3cbcb 47d 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3cbcf 47e 66 66 66 66 
3cbd3 47f 66          | 	byte	$66[5]
3cbd4 480 7E 3C 00 00 
3cbd8 481 00 00 06 06 
3cbdc 482 06 06 16 1E 
3cbe0 483 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3cbe4 484 7E 7E 00 00 
3cbe8 485 00 00 00 00 
3cbec 486 00 3C 7C 60 
3cbf0 487 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3cbf4 488 7E 7C 30 18 
3cbf8 489 00 00 00 00 
3cbfc 48a 00 3C 7E 66 
3cc00 48b 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3cc04 48c 7E 7C 18 0C 
3cc08 48d 00 00 30 18 
3cc0c 48e 00 3C 3E 06 
3cc10 48f 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3cc14 490 7E 7C 00 00 
3cc18 491 00 00 30 18 
3cc1c 492 00 3E 7E 66 
3cc20 493 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3cc24 494 66 66 00 00 
3cc28 495 00 00 30 18 
3cc2c 496 00 7C 7E 06 
3cc30 497 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3cc34 498 7E 3E 00 00 
3cc38 499 00 00 30 18 
3cc3c 49a 00 7E 7E 30 
3cc40 49b 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3cc44 49c 7E 7E 00 00 
3cc48 49d 00 00 18 18 
3cc4c 49e 00 7E 7E 30 
3cc50 49f 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3cc54 4a0 7E 7E 00 00 
3cc58 4a1 00 00 30 18 
3cc5c 4a2 00 3C 7E 66 
3cc60 4a3 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3cc64 4a4 7E 3C 00 00 
3cc68 4a5 00 00 1C 1C 
3cc6c 4a6 18 18 38 3C 
3cc70 4a7 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3cc74 4a8 3C 3C 00 00 
3cc78 4a9 00 00 00 00 
3cc7c 4aa 00 00 00 00 
3cc80 4ab 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cc84 4ac 00 00 00 00 
3cc88 4ad 00 00       | 	byte	$00[6]
3cc8a 4ad 18 18 18 18 
3cc8e 4ae 18 18 18 18 | 	byte	$18[8]
3cc92 4af 00 00 18 18 
3cc96 4b0 00 00 00 00 
3cc9a 4b1 66 66 66 66 
3cc9e 4b2 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3cca2 4b3 00 00 00 00 
3cca6 4b4 00 00 00 00 
3ccaa 4b5 00          | 	byte	$00[9]
3ccab 4b5 66 66 FF FF 
3ccaf 4b6 66 66 FF FF 
3ccb3 4b7 66 66 00 00 
3ccb7 4b8 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3ccbb 4b9 7C 7E 06 06 
3ccbf 4ba 3E 7C 60 60 
3ccc3 4bb 7E 3E 18 18 
3ccc7 4bc 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3cccb 4bd 66 30 30 18 
3cccf 4be 18 0C 0C 66 
3ccd3 4bf 66 00 00 00 
3ccd7 4c0 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3ccdb 4c1 66 66 3C 1C 
3ccdf 4c2 1C FC FE 66 
3cce3 4c3 66 FE FC 00 
3cce7 4c4 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3cceb 4c5 18 18 18 18 
3ccef 4c6 00 00 00 00 
3ccf3 4c7 00 00 00 00 
3ccf7 4c8 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3ccfb 4c9 18 1C 0C 0C 
3ccff 4ca 0C 0C 0C 0C 
3cd03 4cb 1C 18 30 00 
3cd07 4cc 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3cd0b 4cd 18 38 30 30 
3cd0f 4ce 30 30 30 30 
3cd13 4cf 38 18 0C 00 
3cd17 4d0 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3cd1b 4d1 66 66 3C 3C 
3cd1f 4d2 FF FF 3C 3C 
3cd23 4d3 66 66 00 00 
3cd27 4d4 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3cd2b 4d5 00 18 18 18 
3cd2f 4d6 7E 7E 18 18 
3cd33 4d7 18 00 00 00 
3cd37 4d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3cd3b 4d9 00 00 00 00 
3cd3f 4da 00 00       | 	byte	$00[6]
3cd41 4db 18 18 18 18 
3cd45 4dc 18          | 	byte	$18[5]
3cd46 4dc 0C 04 00 00 
3cd4a 4dd 00 00 00 00 
3cd4e 4de 7E 7E 00 00 
3cd52 4df 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3cd56 4e0 00 00 00 00 
3cd5a 4e1 00 00 00 00 
3cd5e 4e2 00 00 00 00 
3cd62 4e3 00          | 	byte	$00[13]
3cd63 4e3 18 18 18 00 
3cd67 4e4 00 00 00 60 
3cd6b 4e5 60 60 30 30 
3cd6f 4e6 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3cd73 4e7 06 06 06 00 
3cd77 4e8 00 00 00 3C 
3cd7b 4e9 7E 66 66 66 
3cd7f 4ea 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3cd83 4eb 66 7E 3C 00 
3cd87 4ec 00 00 00 18 
3cd8b 4ed 18 1C 1C 18 
3cd8f 4ee 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3cd93 4ef 18 7E 7E 00 
3cd97 4f0 00 00 00 3C 
3cd9b 4f1 7E 66 66 30 
3cd9f 4f2 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3cda3 4f3 0C 7E 7E 00 
3cda7 4f4 00 00 00 7E 
3cdab 4f5 7E 30 30 18 
3cdaf 4f6 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3cdb3 4f7 66 7E 3C 00 
3cdb7 4f8 00 00 00 30 
3cdbb 4f9 30 38 38 3C 
3cdbf 4fa 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3cdc3 4fb 7E 30 30 00 
3cdc7 4fc 00 00 00 7E 
3cdcb 4fd 7E 06 06 3E 
3cdcf 4fe 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3cdd3 4ff 66 7E 3C 00 
3cdd7 500 00 00 00 38 
3cddb 501 3C 0E 06 06 
3cddf 502 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3cde3 503 66 7E 3C 00 
3cde7 504 00 00 00 7E 
3cdeb 505 7E 60 60 30 
3cdef 506 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3cdf3 507 0C 0C 0C 00 
3cdf7 508 00 00 00 3C 
3cdfb 509 7E 66 66 3C 
3cdff 50a 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3ce03 50b 66 7E 3C 00 
3ce07 50c 00 00 00 3C 
3ce0b 50d 7E 66 66 7E 
3ce0f 50e 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3ce13 50f 70 3C 1C 00 
3ce17 510 00 00 00 00 
3ce1b 511 00 00 18 18 
3ce1f 512 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3ce23 513 18 18 18 00 
3ce27 514 00 00 00 00 
3ce2b 515 00 00 18 18 
3ce2f 516 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3ce33 517 18 18 18 0C 
3ce37 518 04 00 00 00 
3ce3b 519 70 38 1C 0E 
3ce3f 51a 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3ce43 51b 70 00 00 00 
3ce47 51c 00 00 00 00 
3ce4b 51d 00 00 7E 7E 
3ce4f 51e 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3ce53 51f 00 00 00 00 
3ce57 520 00 00 00 00 | 	byte	$00[8]
3ce5b 521 0E 1C 38 70 
3ce5f 522 E0 70 38 1C 
3ce63 523 0E 00 00 00 
3ce67 524 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3ce6b 525 7E 66 66 30 
3ce6f 526 30 18 18 18 
3ce73 527 00 18 18 00 
3ce77 528 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3ce7b 529 7E 66 66 66 
3ce7f 52a 66 36 06 66 
3ce83 52b 66 7E 3C 00 
3ce87 52c 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3ce8b 52d 3C 7E 66 66 
3ce8f 52e 66 7E 7E 66 
3ce93 52f 66 66 66 00 
3ce97 530 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3ce9b 531 7E 66 66 7E 
3ce9f 532 3E 66 66 66 
3cea3 533 66 7E 3E 00 
3cea7 534 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3ceab 535 7E 66 66 06 
3ceaf 536 06 06 06 66 
3ceb3 537 66 7E 3C 00 
3ceb7 538 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3cebb 539 7E 66 66 66 
3cebf 53a 66 66 66 66 
3cec3 53b 66 7E 3E 00 
3cec7 53c 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3cecb 53d 7E 06 06 3E 
3cecf 53e 3E 06 06 06 
3ced3 53f 06 7E 7E 00 
3ced7 540 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3cedb 541 7E 06 06 3E 
3cedf 542 3E 06 06 06 
3cee3 543 06 06 06 00 
3cee7 544 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3ceeb 545 7E 06 06 76 
3ceef 546 76 66 66 66 
3cef3 547 66 7E 3C 00 
3cef7 548 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3cefb 549 66 66 66 7E 
3ceff 54a 7E 66 66 66 
3cf03 54b 66 66 66 00 
3cf07 54c 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3cf0b 54d 7E 18 18 18 
3cf0f 54e 18 18 18 18 
3cf13 54f 18 7E 7E 00 
3cf17 550 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3cf1b 551 60 60 60 60 
3cf1f 552 60 60 60    | 	byte	$60[7]
3cf22 553 66 66 7E 3C 
3cf26 554 00 00 00 00 
3cf2a 555 66 66 36 36 
3cf2e 556 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3cf32 557 66 66 C6 C6 
3cf36 558 00 00 00 00 
3cf3a 559 06 06 06 06 
3cf3e 55a 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3cf42 55b 06 06 7E 7E 
3cf46 55c 00 00 00 00 
3cf4a 55d C6 C6 EE EE 
3cf4e 55e FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3cf52 55f C6 C6 C6 C6 
3cf56 560 00 00 00 00 
3cf5a 561 66 66 66 6E 
3cf5e 562 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3cf62 563 76 66 66 66 
3cf66 564 00 00 00 00 
3cf6a 565 3C 7E 66 66 
3cf6e 566 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3cf72 567 66 66 7E 3C 
3cf76 568 00 00 00 00 
3cf7a 569 3E 7E 66 66 
3cf7e 56a 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3cf82 56b 06 06 06 06 
3cf86 56c 00 00 00 00 
3cf8a 56d 3C 7E 66 66 
3cf8e 56e 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3cf92 56f 66 56 3E 6C 
3cf96 570 00 00 00 00 
3cf9a 571 3E 7E 66 66 
3cf9e 572 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3cfa2 573 66 66 C6 C6 
3cfa6 574 00 00 00 00 
3cfaa 575 7C 7E 06 06 
3cfae 576 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3cfb2 577 60 60 7E 3E 
3cfb6 578 00 00 00 00 
3cfba 579 7E 7E 18 18 
3cfbe 57a 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3cfc2 57b 18 18 18 18 
3cfc6 57c 00 00 00 00 
3cfca 57d 66 66 66 66 
3cfce 57e 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3cfd2 57f 66 66 7E 3C 
3cfd6 580 00 00 00 00 
3cfda 581 66 66 66 66 
3cfde 582 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3cfe2 583 3C 3C 18 18 
3cfe6 584 00 00 00 00 
3cfea 585 C6 C6 C6 C6 
3cfee 586 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3cff2 587 FE EE C6 82 
3cff6 588 00 00 00 00 
3cffa 589 66 66 66 3C 
3cffe 58a 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3d002 58b 3C 66 66 66 
3d006 58c 00 00 00 00 
3d00a 58d 66 66 66 66 
3d00e 58e 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3d012 58f 18 18 18 18 
3d016 590 00 00 00 00 
3d01a 591 7E 7E 30 30 
3d01e 592 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3d022 593 06 06 7E 7E 
3d026 594 00 00 00 00 
3d02a 595 3C 3C 0C 0C 
3d02e 596 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3d032 597 0C 0C 3C 3C 
3d036 598 00 00 00 00 
3d03a 599 06 06 0C 0C 
3d03e 59a 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3d042 59b 60 60 C0 C0 
3d046 59c 00 00 00 00 
3d04a 59d 3C 3C 30 30 
3d04e 59e 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3d052 59f 30 30 3C 3C 
3d056 5a0 00 00 00 00 
3d05a 5a1 18 18 3C 3C 
3d05e 5a2 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3d062 5a3 00 00 00 00 
3d066 5a4 00 00 00 00 
3d06a 5a5 00 00 00 00 
3d06e 5a6 00 00 00 00 
3d072 5a7 00 00       | 	byte	$00[18]
3d074 5a8 FE FE 00 00 
3d078 5a9 00 00 0C 0C 
3d07c 5aa 18 18 00 00 
3d080 5ab 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3d084 5ac 00 00 00 00 
3d088 5ad 00 00 00 00 
3d08c 5ae 00          | 	byte	$00[9]
3d08d 5ae 3C 7C 60 7C 
3d091 5af 7E 66 66 7E 
3d095 5b0 7C 00 00 00 
3d099 5b1 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3d09d 5b2 3E 7E 66 66 
3d0a1 5b3 66 66 66 7E 
3d0a5 5b4 3E 00 00 00 
3d0a9 5b5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3d0ad 5b6 3C 3E 06 06 
3d0b1 5b7 06 06 06 7E 
3d0b5 5b8 7C 00 00 00 
3d0b9 5b9 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3d0bd 5ba 7C 7E 66 66 
3d0c1 5bb 66 66 66 7E 
3d0c5 5bc 7C 00 00 00 
3d0c9 5bd 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3d0cd 5be 3C 7E 66 66 
3d0d1 5bf 7E 06 06 7E 
3d0d5 5c0 7C 00 00 00 
3d0d9 5c1 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3d0dd 5c2 18 7E 7E 18 
3d0e1 5c3 18 18 18 18 
3d0e5 5c4 18 00 00 00 
3d0e9 5c5 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d0ed 5c6 7C 7E 66 66 
3d0f1 5c7 66 66 7E 7C 
3d0f5 5c8 60 7E 3E 00 
3d0f9 5c9 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3d0fd 5ca 3E 7E 66 66 
3d101 5cb 66 66 66 66 
3d105 5cc 66 00 00 00 
3d109 5cd 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3d10d 5ce 1C 1C 18 18 
3d111 5cf 18 18 18 3C 
3d115 5d0 3C 00 00 00 
3d119 5d1 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3d11d 5d2 30 30 30 30 
3d121 5d3 30 30 30 30 
3d125 5d4 30          | 	byte	$30[9]
3d126 5d4 3E 1E 00 00 
3d12a 5d5 06 06 06 36 
3d12e 5d6 36 1E 1E 1E 
3d132 5d7 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3d136 5d8 00 00 00 00 
3d13a 5d9 1C 1C 18 18 
3d13e 5da 18 18 18 18 
3d142 5db 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3d146 5dc 00 00 00 00 
3d14a 5dd 00 00 00    | 	byte	$00[7]
3d14d 5de 6C FE FE D6 
3d151 5df D6 C6 C6 C6 
3d155 5e0 C6 00 00 00 
3d159 5e1 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3d15d 5e2 3E 7E 66 66 
3d161 5e3 66 66 66 66 
3d165 5e4 66 00 00 00 
3d169 5e5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3d16d 5e6 3C 7E 66 66 
3d171 5e7 66 66 66 7E 
3d175 5e8 3C 00 00 00 
3d179 5e9 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3d17d 5ea 3E 7E 66 66 
3d181 5eb 66 66 66 7E 
3d185 5ec 3E 06 06 00 
3d189 5ed 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3d18d 5ee 7C 7E 66 66 
3d191 5ef 66 66 66 7E 
3d195 5f0 7C 60 60 00 
3d199 5f1 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3d19d 5f2 3E 7E 66 06 
3d1a1 5f3 06 06 06 06 
3d1a5 5f4 06 00 00 00 
3d1a9 5f5 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3d1ad 5f6 7C 7E 06 0E 
3d1b1 5f7 3C 70 60 7E 
3d1b5 5f8 3E 00 00 00 
3d1b9 5f9 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3d1bd 5fa 7E 7E 18 18 
3d1c1 5fb 18 18 18 78 
3d1c5 5fc 70 00 00 00 
3d1c9 5fd 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3d1cd 5fe 66 66 66 66 
3d1d1 5ff 66 66 66    | 	byte	$66[7]
3d1d4 600 7E 7C 00 00 
3d1d8 601 00 00 00 00 
3d1dc 602 00 66 66 66 
3d1e0 603 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3d1e4 604 18 18 00 00 
3d1e8 605 00 00 00 00 
3d1ec 606 00 C6 C6 D6 
3d1f0 607 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3d1f4 608 C6 82 00 00 
3d1f8 609 00 00 00 00 
3d1fc 60a 00 66 66 3C 
3d200 60b 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3d204 60c 66 66 00 00 
3d208 60d 00 00 00 00 
3d20c 60e 00 66 66 66 
3d210 60f 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3d214 610 7C 60 7E 3E 
3d218 611 00 00 00 00 
3d21c 612 00 7E 7E 30 
3d220 613 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3d224 614 7E 7E 00 00 
3d228 615 00 00 30 18 
3d22c 616 18 18 18 0C 
3d230 617 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3d234 618 18 30 00 00 
3d238 619 00 00 18 18 
3d23c 61a 18 18 18 18 
3d240 61b 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3d244 61c 18 18 00 00 
3d248 61d 00 00 0C 18 
3d24c 61e 18 18 18 30 
3d250 61f 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3d254 620 18 0C 00 00 
3d258 621 00 00 6C 7E 
3d25c 622 36 00 00 00 
3d260 623 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3d264 624 00 00 00 00 
3d268 625 00 00 00 00 
3d26c 626 00          | 	byte	$00[9]
3d26d 626 18 18 18 18 
3d271 627 18 18 00 00 
3d275 628 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3d278 629 00 6C FE FE 
3d27c 62a 7C 38 10 00 
3d280 62b 18 18 18 F8 
3d284 62c F8 18 18 18 | a8_font        file "atari8.fnt"
3d288 62d C0 C0 C0 C0 
3d28c 62e C0 C0 C0 C0 | 	byte	$c0[8]
3d290 62f 18 18 18 1F 
3d294 630 1F 00 00 00 
3d298 631 18 18 18 1F 
3d29c 632 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3d2a0 633 00 00 00 1F 
3d2a4 634 1F 18 18 18 
3d2a8 635 C0 E0 70 38 
3d2ac 636 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3d2b0 637 03 07 0E 1C 
3d2b4 638 38 70 E0 C0 
3d2b8 639 80 C0 E0 F0 
3d2bc 63a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3d2c0 63b 00 00 00 00 
3d2c4 63c F0 F0 F0 F0 
3d2c8 63d 01 03 07 0F 
3d2cc 63e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3d2d0 63f F0 F0 F0 F0 
3d2d4 640 00 00 00 00 
3d2d8 641 0F 0F 0F 0F 
3d2dc 642 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3d2e0 643 FF FF 00 00 
3d2e4 644 00 00 00 00 
3d2e8 645 00 00 00 00 
3d2ec 646 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3d2f0 647 00 00 00 00 
3d2f4 648 0F 0F 0F 0F 
3d2f8 649 00 38 38 EE 
3d2fc 64a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3d300 64b 00 00 00 F8 
3d304 64c F8 18 18 18 
3d308 64d 00 00 00 FF 
3d30c 64e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3d310 64f 18 18 18 FF 
3d314 650 FF 18 18 18 
3d318 651 00 00 3C 7E 
3d31c 652 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3d320 653 00 00 00 00 
3d324 654 FF FF FF FF 
3d328 655 03 03 03 03 
3d32c 656 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3d330 657 00 00 00 FF 
3d334 658 FF 18 18 18 
3d338 659 18 18 18 FF 
3d33c 65a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3d340 65b 0F 0F 0F 0F 
3d344 65c 0F 0F 0F 0F | 	byte	$0f[8]
3d348 65d 18 18 18 F8 
3d34c 65e F8 00 00 00 
3d350 65f 1E 06 1E 06 
3d354 660 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3d358 661 00 18 3C 7E 
3d35c 662 18 18 18 00 
3d360 663 00 18 18 18 
3d364 664 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3d368 665 00 18 0C 7E 
3d36c 666 0C 18 00 00 
3d370 667 00 18 30 7E 
3d374 668 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3d378 669 00 00 00 00 
3d37c 66a 00 00 00 00 
3d380 66b 00          | 	byte	$00[9]
3d381 66b 18 18 18 18 
3d385 66c 00 18 00 00 
3d389 66d 66 66 66 00 
3d38d 66e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3d391 66f 66 FF 66 66 
3d395 670 FF 66 00 18 
3d399 671 7C 06 3C 60 
3d39d 672 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3d3a1 673 66 36 18 0C 
3d3a5 674 66 62 00 38 
3d3a9 675 6C 38 1C F6 
3d3ad 676 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3d3b1 677 18 18 18 00 
3d3b5 678 00 00 00 00 
3d3b9 679 70 38 18 18 
3d3bd 67a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3d3c1 67b 0E 1C 18 18 
3d3c5 67c 1C 0E 00 00 
3d3c9 67d 66 3C FF 3C 
3d3cd 67e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3d3d1 67f 18 18 7E 18 
3d3d5 680 18 00 00 00 
3d3d9 681 00 00 00 00 
3d3dd 682 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3d3e1 683 00 00 7E 00 
3d3e5 684 00 00 00 00 
3d3e9 685 00 00 00 00 
3d3ed 686 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3d3f1 687 60 30 18 0C 
3d3f5 688 06 02 00 00 
3d3f9 689 3C 66 76 6E 
3d3fd 68a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3d401 68b 18 1C 18 18 
3d405 68c 18 7E 00 00 
3d409 68d 3C 66 30 18 
3d40d 68e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3d411 68f 7E 30 18 30 
3d415 690 66 3C 00 00 
3d419 691 30 38 3C 36 
3d41d 692 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3d421 693 7E 06 3E 60 
3d425 694 66 3C 00 00 
3d429 695 3C 06 3E 66 
3d42d 696 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3d431 697 7E 60 30 18 
3d435 698 0C 0C 00 00 
3d439 699 3C 66 3C 66 
3d43d 69a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3d441 69b 3C 66 7C 60 
3d445 69c 30 1C 00 00 
3d449 69d 00 18 18 00 
3d44d 69e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3d451 69f 00 18 18 00 
3d455 6a0 18 18 0C 60 
3d459 6a1 30 18 0C 18 
3d45d 6a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3d461 6a3 00 7E 00 00 
3d465 6a4 7E 00 00 06 
3d469 6a5 0C 18 30 18 
3d46d 6a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3d471 6a7 3C 66 30 18 
3d475 6a8 00 18 00 00 
3d479 6a9 3C 66 76 76 
3d47d 6aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3d481 6ab 18 3C 66 66 
3d485 6ac 7E 66 00 00 
3d489 6ad 3E 66 3E 66 
3d48d 6ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3d491 6af 3C 66 06 06 
3d495 6b0 66 3C 00 00 
3d499 6b1 1E 36 66 66 
3d49d 6b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3d4a1 6b3 7E 06 3E 06 
3d4a5 6b4 06 7E 00 00 
3d4a9 6b5 7E 06 3E 06 
3d4ad 6b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3d4b1 6b7 7C 06 06 76 
3d4b5 6b8 66 7C 00 00 
3d4b9 6b9 66 66 7E 66 
3d4bd 6ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3d4c1 6bb 7E 18 18 18 
3d4c5 6bc 18 7E 00 00 
3d4c9 6bd 60 60 60 60 
3d4cd 6be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3d4d1 6bf 66 36 1E 1E 
3d4d5 6c0 36 66 00 00 
3d4d9 6c1 06 06 06 06 
3d4dd 6c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3d4e1 6c3 C6 EE FE D6 
3d4e5 6c4 C6 C6 00 00 
3d4e9 6c5 66 6E 7E 7E 
3d4ed 6c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3d4f1 6c7 3C 66 66 66 
3d4f5 6c8 66 3C 00 00 
3d4f9 6c9 3E 66 66 3E 
3d4fd 6ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3d501 6cb 3C 66 66 66 
3d505 6cc 36 6C 00 00 
3d509 6cd 3E 66 66 3E 
3d50d 6ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3d511 6cf 3C 06 3C 60 
3d515 6d0 60 3C 00 00 
3d519 6d1 7E 18 18 18 
3d51d 6d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3d521 6d3 66 66 66 66 
3d525 6d4 66          | 	byte	$66[5]
3d526 6d4 7E 00 00 66 
3d52a 6d5 66 66 66 3C 
3d52e 6d6 18 00 00 C6 
3d532 6d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3d536 6d8 C6 00 00 66 
3d53a 6d9 66 3C 3C 66 
3d53e 6da 66 00 00 66 
3d542 6db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3d546 6dc 18 00 00 7E 
3d54a 6dd 30 18 0C 06 
3d54e 6de 7E 00 00 78 
3d552 6df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3d556 6e0 78 00 00 02 
3d55a 6e1 06 0C 18 30 
3d55e 6e2 60 00 00 1E 
3d562 6e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3d566 6e4 1E 00 00 10 
3d56a 6e5 38 6C C6 00 
3d56e 6e6 00 00 00 00 
3d572 6e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d576 6e8 FF 00 00 18 
3d57a 6e9 3C 7E 7E 3C 
3d57e 6ea 18 00 00 00 
3d582 6eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3d586 6ec 7C 00 00 06 
3d58a 6ed 06 3E 66 66 
3d58e 6ee 3E 00 00 00 
3d592 6ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3d596 6f0 3C 00 00 60 
3d59a 6f1 60 7C 66 66 
3d59e 6f2 7C 00 00 00 
3d5a2 6f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3d5a6 6f4 3C 00 00 70 
3d5aa 6f5 18 7C 18 18 
3d5ae 6f6 18 00 00 00 
3d5b2 6f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3d5b6 6f8 60 3E 00 06 
3d5ba 6f9 06 3E 66 66 
3d5be 6fa 66 00 00 18 
3d5c2 6fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3d5c6 6fc 3C 00 00 60 
3d5ca 6fd 00 60 60 60 
3d5ce 6fe 60 3C 00 06 
3d5d2 6ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3d5d6 700 66 00 00 1C 
3d5da 701 18 18 18 18 
3d5de 702 3C 00 00 00 
3d5e2 703 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3d5e6 704 C6 00 00 00 
3d5ea 705 3E 66 66 66 
3d5ee 706 66 00 00 00 
3d5f2 707 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3d5f6 708 3C 00 00 00 
3d5fa 709 3E 66 66 3E 
3d5fe 70a 06 06 00 00 
3d602 70b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3d606 70c 60 60 00 00 
3d60a 70d 3E 66 06 06 
3d60e 70e 06 00 00 00 
3d612 70f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3d616 710 3E 00 00 18 
3d61a 711 7E 18 18 18 
3d61e 712 70 00 00 00 
3d622 713 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3d626 714 7C 00 00 00 
3d62a 715 66 66 66 3C 
3d62e 716 18 00 00 00 
3d632 717 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3d636 718 6C 00 00 00 
3d63a 719 66 3C 18 3C 
3d63e 71a 66 00 00 00 
3d642 71b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3d646 71c 30 1E 00 00 
3d64a 71d 7E 30 18 0C 
3d64e 71e 7E 00 00 18 
3d652 71f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3d656 720 3C 00 18 18 
3d65a 721 18 18 18 18 
3d65e 722 18 18 00 7E 
3d662 723 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3d666 724 60 00 10 18 
3d66a 725 1C 1E 1C 18 
3d66e 726 10 00 08 18 
3d672 727 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3d676 728 08 00       | 	byte	$08, $00
3d678 729 00 6C FE FE 
3d67c 72a 7C 38 10 00 
3d680 72b 18 18 18 F8 
3d684 72c F8 18 18 18 | a8_font2       file "atari8.fnt"
3d688 72d C0 C0 C0 C0 
3d68c 72e C0 C0 C0 C0 | 	byte	$c0[8]
3d690 72f 18 18 18 1F 
3d694 730 1F 00 00 00 
3d698 731 18 18 18 1F 
3d69c 732 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3d6a0 733 00 00 00 1F 
3d6a4 734 1F 18 18 18 
3d6a8 735 C0 E0 70 38 
3d6ac 736 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3d6b0 737 03 07 0E 1C 
3d6b4 738 38 70 E0 C0 
3d6b8 739 80 C0 E0 F0 
3d6bc 73a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3d6c0 73b 00 00 00 00 
3d6c4 73c F0 F0 F0 F0 
3d6c8 73d 01 03 07 0F 
3d6cc 73e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3d6d0 73f F0 F0 F0 F0 
3d6d4 740 00 00 00 00 
3d6d8 741 0F 0F 0F 0F 
3d6dc 742 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3d6e0 743 FF FF 00 00 
3d6e4 744 00 00 00 00 
3d6e8 745 00 00 00 00 
3d6ec 746 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3d6f0 747 00 00 00 00 
3d6f4 748 0F 0F 0F 0F 
3d6f8 749 00 38 38 EE 
3d6fc 74a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3d700 74b 00 00 00 F8 
3d704 74c F8 18 18 18 
3d708 74d 00 00 00 FF 
3d70c 74e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3d710 74f 18 18 18 FF 
3d714 750 FF 18 18 18 
3d718 751 00 00 3C 7E 
3d71c 752 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3d720 753 00 00 00 00 
3d724 754 FF FF FF FF 
3d728 755 03 03 03 03 
3d72c 756 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3d730 757 00 00 00 FF 
3d734 758 FF 18 18 18 
3d738 759 18 18 18 FF 
3d73c 75a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3d740 75b 0F 0F 0F 0F 
3d744 75c 0F 0F 0F 0F | 	byte	$0f[8]
3d748 75d 18 18 18 F8 
3d74c 75e F8 00 00 00 
3d750 75f 1E 06 1E 06 
3d754 760 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3d758 761 00 18 3C 7E 
3d75c 762 18 18 18 00 
3d760 763 00 18 18 18 
3d764 764 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3d768 765 00 18 0C 7E 
3d76c 766 0C 18 00 00 
3d770 767 00 18 30 7E 
3d774 768 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3d778 769 00 00 00 00 
3d77c 76a 00 00 00 00 
3d780 76b 00          | 	byte	$00[9]
3d781 76b 18 18 18 18 
3d785 76c 00 18 00 00 
3d789 76d 66 66 66 00 
3d78d 76e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3d791 76f 66 FF 66 66 
3d795 770 FF 66 00 18 
3d799 771 7C 06 3C 60 
3d79d 772 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3d7a1 773 66 36 18 0C 
3d7a5 774 66 62 00 38 
3d7a9 775 6C 38 1C F6 
3d7ad 776 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3d7b1 777 18 18 18 00 
3d7b5 778 00 00 00 00 
3d7b9 779 70 38 18 18 
3d7bd 77a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3d7c1 77b 0E 1C 18 18 
3d7c5 77c 1C 0E 00 00 
3d7c9 77d 66 3C FF 3C 
3d7cd 77e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3d7d1 77f 18 18 7E 18 
3d7d5 780 18 00 00 00 
3d7d9 781 00 00 00 00 
3d7dd 782 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3d7e1 783 00 00 7E 00 
3d7e5 784 00 00 00 00 
3d7e9 785 00 00 00 00 
3d7ed 786 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3d7f1 787 60 30 18 0C 
3d7f5 788 06 02 00 00 
3d7f9 789 3C 66 76 6E 
3d7fd 78a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3d801 78b 18 1C 18 18 
3d805 78c 18 7E 00 00 
3d809 78d 3C 66 30 18 
3d80d 78e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3d811 78f 7E 30 18 30 
3d815 790 66 3C 00 00 
3d819 791 30 38 3C 36 
3d81d 792 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3d821 793 7E 06 3E 60 
3d825 794 66 3C 00 00 
3d829 795 3C 06 3E 66 
3d82d 796 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3d831 797 7E 60 30 18 
3d835 798 0C 0C 00 00 
3d839 799 3C 66 3C 66 
3d83d 79a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3d841 79b 3C 66 7C 60 
3d845 79c 30 1C 00 00 
3d849 79d 00 18 18 00 
3d84d 79e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3d851 79f 00 18 18 00 
3d855 7a0 18 18 0C 60 
3d859 7a1 30 18 0C 18 
3d85d 7a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3d861 7a3 00 7E 00 00 
3d865 7a4 7E 00 00 06 
3d869 7a5 0C 18 30 18 
3d86d 7a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3d871 7a7 3C 66 30 18 
3d875 7a8 00 18 00 00 
3d879 7a9 3C 66 76 76 
3d87d 7aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3d881 7ab 18 3C 66 66 
3d885 7ac 7E 66 00 00 
3d889 7ad 3E 66 3E 66 
3d88d 7ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3d891 7af 3C 66 06 06 
3d895 7b0 66 3C 00 00 
3d899 7b1 1E 36 66 66 
3d89d 7b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3d8a1 7b3 7E 06 3E 06 
3d8a5 7b4 06 7E 00 00 
3d8a9 7b5 7E 06 3E 06 
3d8ad 7b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3d8b1 7b7 7C 06 06 76 
3d8b5 7b8 66 7C 00 00 
3d8b9 7b9 66 66 7E 66 
3d8bd 7ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3d8c1 7bb 7E 18 18 18 
3d8c5 7bc 18 7E 00 00 
3d8c9 7bd 60 60 60 60 
3d8cd 7be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3d8d1 7bf 66 36 1E 1E 
3d8d5 7c0 36 66 00 00 
3d8d9 7c1 06 06 06 06 
3d8dd 7c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3d8e1 7c3 C6 EE FE D6 
3d8e5 7c4 C6 C6 00 00 
3d8e9 7c5 66 6E 7E 7E 
3d8ed 7c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3d8f1 7c7 3C 66 66 66 
3d8f5 7c8 66 3C 00 00 
3d8f9 7c9 3E 66 66 3E 
3d8fd 7ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3d901 7cb 3C 66 66 66 
3d905 7cc 36 6C 00 00 
3d909 7cd 3E 66 66 3E 
3d90d 7ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3d911 7cf 3C 06 3C 60 
3d915 7d0 60 3C 00 00 
3d919 7d1 7E 18 18 18 
3d91d 7d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3d921 7d3 66 66 66 66 
3d925 7d4 66          | 	byte	$66[5]
3d926 7d4 7E 00 00 66 
3d92a 7d5 66 66 66 3C 
3d92e 7d6 18 00 00 C6 
3d932 7d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3d936 7d8 C6 00 00 66 
3d93a 7d9 66 3C 3C 66 
3d93e 7da 66 00 00 66 
3d942 7db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3d946 7dc 18 00 00 7E 
3d94a 7dd 30 18 0C 06 
3d94e 7de 7E 00 00 78 
3d952 7df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3d956 7e0 78 00 00 02 
3d95a 7e1 06 0C 18 30 
3d95e 7e2 60 00 00 1E 
3d962 7e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3d966 7e4 1E 00 00 10 
3d96a 7e5 38 6C C6 00 
3d96e 7e6 00 00 00 00 
3d972 7e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d976 7e8 FF 00 00 18 
3d97a 7e9 3C 7E 7E 3C 
3d97e 7ea 18 00 00 00 
3d982 7eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3d986 7ec 7C 00 00 06 
3d98a 7ed 06 3E 66 66 
3d98e 7ee 3E 00 00 00 
3d992 7ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3d996 7f0 3C 00 00 60 
3d99a 7f1 60 7C 66 66 
3d99e 7f2 7C 00 00 00 
3d9a2 7f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3d9a6 7f4 3C 00 00 70 
3d9aa 7f5 18 7C 18 18 
3d9ae 7f6 18 00 00 00 
3d9b2 7f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3d9b6 7f8 60 3E 00 06 
3d9ba 7f9 06 3E 66 66 
3d9be 7fa 66 00 00 18 
3d9c2 7fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3d9c6 7fc 3C 00 00 60 
3d9ca 7fd 00 60 60 60 
3d9ce 7fe 60 3C 00 06 
3d9d2 7ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3d9d6 800 66 00 00 1C 
3d9da 801 18 18 18 18 
3d9de 802 3C 00 00 00 
3d9e2 803 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3d9e6 804 C6 00 00 00 
3d9ea 805 3E 66 66 66 
3d9ee 806 66 00 00 00 
3d9f2 807 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3d9f6 808 3C 00 00 00 
3d9fa 809 3E 66 66 3E 
3d9fe 80a 06 06 00 00 
3da02 80b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3da06 80c 60 60 00 00 
3da0a 80d 3E 66 06 06 
3da0e 80e 06 00 00 00 
3da12 80f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3da16 810 3E 00 00 18 
3da1a 811 7E 18 18 18 
3da1e 812 70 00 00 00 
3da22 813 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3da26 814 7C 00 00 00 
3da2a 815 66 66 66 3C 
3da2e 816 18 00 00 00 
3da32 817 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3da36 818 6C 00 00 00 
3da3a 819 66 3C 18 3C 
3da3e 81a 66 00 00 00 
3da42 81b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3da46 81c 30 1E 00 00 
3da4a 81d 7E 30 18 0C 
3da4e 81e 7E 00 00 18 
3da52 81f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3da56 820 3C 00 18 18 
3da5a 821 18 18 18 18 
3da5e 822 18 18 00 7E 
3da62 823 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3da66 824 60 00 10 18 
3da6a 825 1C 1E 1C 18 
3da6e 826 10 00 08 18 
3da72 827 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3da76 828 08 00       | 	byte	$08, $00
3da78 829 00 00 00 00 
      ...             
3dc84 8ac 00 00 00 00 
3dc88 8ad 00 00       | amiga_font     file "amigafont.def"
3dc8a 8ad 18 18 18 18 
3dc8e 8ae 18 18       | 	byte	$18[6]
3dc90 8af 00 18 18 00 
3dc94 8b0 00 00 00 00 
3dc98 8b1 00 00 66 66 
3dc9c 8b2 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
3dca0 8b3 00 00 00 00 
3dca4 8b4 00 00 00 00 
3dca8 8b5 00 00       | 	byte	$00[10]
3dcaa 8b5 36 36 7F 36 
3dcae 8b6 36 36 7F 36 
3dcb2 8b7 36 00 00 00 
3dcb6 8b8 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
3dcba 8b9 18 7C 06 06 
3dcbe 8ba 3C 60 60 3E 
3dcc2 8bb 18 00 00 00 
3dcc6 8bc 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
3dcca 8bd 00 00 C6 69 
3dcce 8be 36 18 6C 96 
3dcd2 8bf 63 00 00 00 
3dcd6 8c0 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
3dcda 8c1 1C 36 36 1E 
3dcde 8c2 6E 3B 33 73 
3dce2 8c3 DE 00 00 00 
3dce6 8c4 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
3dcea 8c5 18 18 0C 00 
3dcee 8c6 00 00 00 00 
3dcf2 8c7 00 00 00 00 
3dcf6 8c8 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3dcfa 8c9 30 18 0C 0C 
3dcfe 8ca 0C 0C 0C 18 
3dd02 8cb 30 00 00 00 
3dd06 8cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
3dd0a 8cd 0C 18 30 30 
3dd0e 8ce 30 30 30 18 
3dd12 8cf 0C 00 00 00 
3dd16 8d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
3dd1a 8d1 00 66 66 3C 
3dd1e 8d2 FF 3C 66 66 
3dd22 8d3 00 00 00 00 
3dd26 8d4 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
3dd2a 8d5 00 18 18 18 
3dd2e 8d6 7E 18 18 18 
3dd32 8d7 00 00 00 00 
3dd36 8d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3dd3a 8d9 00 00 00 00 
3dd3e 8da 00 00 00    | 	byte	$00[7]
3dd41 8db 18 18 0C 00 
3dd45 8dc 00 00 00 00 
3dd49 8dd 00 00 00 00 
3dd4d 8de 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
3dd51 8df 00 00 00 00 
3dd55 8e0 00 00 00 00 
3dd59 8e1 00 00 00 00 
3dd5d 8e2 00 00 00 00 | 	byte	$00[16]
3dd61 8e3 18 18 00 00 
3dd65 8e4 00 00 00 00 
3dd69 8e5 00 00 C0 60 
3dd6d 8e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
3dd71 8e7 03 00 00 00 
3dd75 8e8 00 00 00 00 
3dd79 8e9 00 3C 66 66 
3dd7d 8ea 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
3dd81 8eb 66 3C 00 00 
3dd85 8ec 00 00 00 00 
3dd89 8ed 00 18 1C 1E 
3dd8d 8ee 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
3dd91 8ef 18 18 00 00 
3dd95 8f0 00 00 00 00 
3dd99 8f1 00 3C 66 60 
3dd9d 8f2 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
3dda1 8f3 06 7E 00 00 
3dda5 8f4 00 00 00 00 
3dda9 8f5 00 3C 66 60 
3ddad 8f6 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
3ddb1 8f7 66 3C 00 00 
3ddb5 8f8 00 00 00 00 
3ddb9 8f9 00 30 38 3C 
3ddbd 8fa 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
3ddc1 8fb 30 30 00 00 
3ddc5 8fc 00 00 00 00 
3ddc9 8fd 00 7E 06 06 
3ddcd 8fe 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
3ddd1 8ff 66 3C 00 00 
3ddd5 900 00 00 00 00 
3ddd9 901 00 38 0C 06 
3dddd 902 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
3dde1 903 66 3C 00 00 
3dde5 904 00 00 00 00 
3dde9 905 00 7E 60 60 
3dded 906 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
3ddf1 907 18 18 00 00 
3ddf5 908 00 00 00 00 
3ddf9 909 00 3C 66 66 
3ddfd 90a 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
3de01 90b 66 3C 00 00 
3de05 90c 00 00 00 00 
3de09 90d 00 3C 66 66 
3de0d 90e 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
3de11 90f 30 1C 00 00 
3de15 910 00 00 00 00 
3de19 911 00 00 00 18 
3de1d 912 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
3de21 913 18 00 00 00 
3de25 914 00 00 00 00 
3de29 915 00 00 00 18 
3de2d 916 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3de31 917 18 18 0C 00 
3de35 918 00 00 00 00 
3de39 919 00 00 00 60 
3de3d 91a 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
3de41 91b 00 00 00 00 
3de45 91c 00 00 00 00 
3de49 91d 00 00 00 00 | 	byte	$00[12]
3de4d 91e 7E 00 7E 00 
3de51 91f 00 00 00 00 
3de55 920 00 00 00 00 
3de59 921 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
3de5d 922 18 60 18 06 
3de61 923 00 00 00 00 
3de65 924 00 00 00 00 
3de69 925 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
3de6d 926 60 30 18 00 
3de71 927 18 18 00 00 
3de75 928 00 00 00 00 
3de79 929 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3de7d 92a 7B 6B 7B 03 
3de81 92b 03 1E 00 00 
3de85 92c 00 00 00 00 
3de89 92d 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3de8d 92e 63 7F 63 63 
3de91 92f 63 63 00 00 
3de95 930 00 00 00 00 
3de99 931 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
3de9d 932 66 3E 66 66 
3dea1 933 66 3E 00 00 
3dea5 934 00 00 00 00 
3dea9 935 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
3dead 936 06 06 06 06 
3deb1 937 0C 78 00 00 
3deb5 938 00 00 00 00 
3deb9 939 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
3debd 93a 63 63 63 63 
3dec1 93b 33 1F 00 00 
3dec5 93c 00 00 00 00 
3dec9 93d 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3decd 93e 06 1E 06 06 
3ded1 93f 06 7E 00 00 
3ded5 940 00 00 00 00 
3ded9 941 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3dedd 942 06 1E 06 06 
3dee1 943 06 06 00 00 
3dee5 944 00 00 00 00 
3dee9 945 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
3deed 946 06 76 66 66 
3def1 947 66 7C 00 00 
3def5 948 00 00 00 00 
3def9 949 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
3defd 94a 63 7F 63 63 
3df01 94b 63 63 00 00 
3df05 94c 00 00 00 00 
3df09 94d 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
3df0d 94e 18 18 18 18 
3df11 94f 18          | 	byte	$18[5]
3df12 94f 3C 00 00 00 
3df16 950 00 00 00 00 
3df1a 951 60 60 60 60 
3df1e 952 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
3df22 953 3E 00 00 00 
3df26 954 00 00 00 00 
3df2a 955 C3 63 33 1B 
3df2e 956 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
3df32 957 C3 00 00 00 
3df36 958 00 00 00 00 
3df3a 959 03 03 03 03 
3df3e 95a 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
3df42 95b 7F 00 00 00 
3df46 95c 00 00 00 00 
3df4a 95d 63 77 7F 6B 
3df4e 95e 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
3df52 95f 63 00 00 00 
3df56 960 00 00 00 00 
3df5a 961 63 67 6F 7B 
3df5e 962 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
3df62 963 63 00 00 00 
3df66 964 00 00 00 00 
3df6a 965 3E 63 63 63 
3df6e 966 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
3df72 967 3E 00 00 00 
3df76 968 00 00 00 00 
3df7a 969 3E 66 66 66 
3df7e 96a 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
3df82 96b 06 00 00 00 
3df86 96c 00 00 00 00 
3df8a 96d 3E 63 63 63 
3df8e 96e 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
3df92 96f FE 00 00 00 
3df96 970 00 00 00 00 
3df9a 971 1F 33 33 33 
3df9e 972 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
3dfa2 973 63 00 00 00 
3dfa6 974 00 00 00 00 
3dfaa 975 3C 66 06 0C 
3dfae 976 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
3dfb2 977 3C 00 00 00 
3dfb6 978 00 00 00 00 
3dfba 979 7E 18 18 18 
3dfbe 97a 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
3dfc2 97b 18 00 00 00 
3dfc6 97c 00 00 00 00 
3dfca 97d 63 63 63 63 
3dfce 97e 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
3dfd2 97f 3E 00 00 00 
3dfd6 980 00 00 00 00 
3dfda 981 63 63 63 63 
3dfde 982 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
3dfe2 983 08 00 00 00 
3dfe6 984 00 00 00 00 
3dfea 985 C3 C3 C3 C3 
3dfee 986 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
3dff2 987 C3 00 00 00 
3dff6 988 00 00 00 00 
3dffa 989 C3 C3 66 3C 
3dffe 98a 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
3e002 98b C3 00 00 00 
3e006 98c 00 00 00 00 
3e00a 98d C3 C3 66 3C 
3e00e 98e 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
3e012 98f 18 00 00 00 
3e016 990 00 00 00 00 
3e01a 991 7F 60 60 30 
3e01e 992 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
3e022 993 7F 00 00 00 
3e026 994 00 00 00 00 
3e02a 995 3C 0C 0C 0C 
3e02e 996 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3e032 997 3C 00 00 00 
3e036 998 00 00 00 00 
3e03a 999 00 03 06 0C 
3e03e 99a 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
3e042 99b 00 00 00 00 
3e046 99c 00 00 00 00 | 	byte	$00[8]
3e04a 99d 3C 30 30 30 
3e04e 99e 30 30 30 30 
3e052 99f 3C 00 00 00 
3e056 9a0 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
3e05a 9a1 08 1C 36 63 
3e05e 9a2 00 00 00 00 
3e062 9a3 00 00 00 00 
3e066 9a4 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e06a 9a5 00 00 00 00 
3e06e 9a6 00 00 00 00 
3e072 9a7 00          | 	byte	$00[9]
3e073 9a7 7F 00 00 00 
3e077 9a8 00 00 00 18 
3e07b 9a9 18 30 00 00 
3e07f 9aa 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
3e083 9ab 00 00 00 00 
3e087 9ac 00 00 00 00 
3e08b 9ad 00 00       | 	byte	$00[10]
3e08d 9ae 3C 60 7C 66 
3e091 9af 66 7C 00 00 
3e095 9b0 00 00 00 00 
3e099 9b1 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
3e09d 9b2 3E 66 66 66 
3e0a1 9b3 66 3E 00 00 
3e0a5 9b4 00 00 00 00 
3e0a9 9b5 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e0ad 9b6 3C 06 06 06 
3e0b1 9b7 06 3C 00 00 
3e0b5 9b8 00 00 00 00 
3e0b9 9b9 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
3e0bd 9ba 7C 66 66 66 
3e0c1 9bb 66 7C 00 00 
3e0c5 9bc 00 00 00 00 
3e0c9 9bd 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e0cd 9be 3C 66 7E 06 
3e0d1 9bf 06 3C 00 00 
3e0d5 9c0 00 00 00 00 
3e0d9 9c1 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
3e0dd 9c2 3E 0C 0C 0C 
3e0e1 9c3 0C 0C 00 00 
3e0e5 9c4 00 00 00 00 
3e0e9 9c5 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e0ed 9c6 7C 66 66 66 
3e0f1 9c7 7C 60 60 3C 
3e0f5 9c8 00 00 00 00 
3e0f9 9c9 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
3e0fd 9ca 3E 66 66 66 
3e101 9cb 66 66 00 00 
3e105 9cc 00 00 00 00 
3e109 9cd 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
3e10d 9ce 18 18 18 18 
3e111 9cf 18          | 	byte	$18[5]
3e112 9cf 30 00 00 00 
3e116 9d0 00 00 00 00 
3e11a 9d1 00 30 00 30 
3e11e 9d2 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
3e122 9d3 30 30 1E 00 
3e126 9d4 00 00 00 00 
3e12a 9d5 03 03 03 33 
3e12e 9d6 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
3e132 9d7 63 00 00 00 
3e136 9d8 00 00 00 00 
3e13a 9d9 18 18 18 18 
3e13e 9da 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3e142 9db 30 00 00 00 
3e146 9dc 00 00 00 00 
3e14a 9dd 00 00 00 37 
3e14e 9de 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
3e152 9df 63 00 00 00 
3e156 9e0 00 00 00 00 
3e15a 9e1 00 00 00 3E 
3e15e 9e2 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
3e162 9e3 66 00 00 00 
3e166 9e4 00 00 00 00 
3e16a 9e5 00 00 00 3C 
3e16e 9e6 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
3e172 9e7 3C 00 00 00 
3e176 9e8 00 00 00 00 
3e17a 9e9 00 00 00 3E 
3e17e 9ea 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
3e182 9eb 06 06 06 00 
3e186 9ec 00 00 00 00 
3e18a 9ed 00 00 00 7C 
3e18e 9ee 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
3e192 9ef 60 60 60 00 
3e196 9f0 00 00 00 00 
3e19a 9f1 00 00 00 3E 
3e19e 9f2 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
3e1a2 9f3 06 00 00 00 
3e1a6 9f4 00 00 00 00 
3e1aa 9f5 00 00 00 3C 
3e1ae 9f6 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
3e1b2 9f7 3E 00 00 00 
3e1b6 9f8 00 00 00 00 
3e1ba 9f9 00 0C 0C 3E 
3e1be 9fa 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
3e1c2 9fb 38 00 00 00 
3e1c6 9fc 00 00 00 00 
3e1ca 9fd 00 00 00 66 
3e1ce 9fe 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
3e1d2 9ff 7C 00 00 00 
3e1d6 a00 00 00 00 00 
3e1da a01 00 00 00 66 
3e1de a02 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3e1e2 a03 18 00 00 00 
3e1e6 a04 00 00 00 00 
3e1ea a05 00 00 00 63 
3e1ee a06 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
3e1f2 a07 36 00 00 00 
3e1f6 a08 00 00 00 00 
3e1fa a09 00 00 00 63 
3e1fe a0a 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
3e202 a0b 63 00 00 00 
3e206 a0c 00 00 00 00 
3e20a a0d 00 00 00 66 
3e20e a0e 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3e212 a0f 18 0C 06 00 
3e216 a10 00 00 00 00 
3e21a a11 00 00 00 7E 
3e21e a12 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
3e222 a13 7E 00 00 00 
3e226 a14 00 00 00 00 
3e22a a15 70 18 18 18 
3e22e a16 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
3e232 a17 70 00 00 00 
3e236 a18 00 00 00 00 
3e23a a19 18 18 18 18 
3e23e a1a 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3e242 a1b 18 00 00 00 
3e246 a1c 00 00 00 00 
3e24a a1d 0E 18 18 18 
3e24e a1e 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
3e252 a1f 0E 00 00 00 
3e256 a20 00 00 00 00 
3e25a a21 46 5D 31 00 
3e25e a22 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
3e262 a23 00 00 00 00 
3e266 a24 00 00 00 00 | 	byte	$00[8]
3e26a a25 C0 F0 3C 0F 
3e26e a26 C3 F0 3C 0F 
3e272 a27 03 00 00 00 
3e276 a28 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
3e27a a29 18 18 00 18 
3e27e a2a 18 18 18 18 
3e282 a2b 18 00 00 00 
3e286 a2c 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3e28a a2d 18 18 7E 1B 
3e28e a2e 1B 7E 18 18 
3e292 a2f 00 00 00 00 
3e296 a30 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3e29a a31 78 CC 0C 0C 
3e29e a32 1E 0C 0C 06 
3e2a2 a33 7F 00 00 00 
3e2a6 a34 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3e2aa a35 66 3C 66 66 
3e2ae a36 3C 66 00 00 
3e2b2 a37 00 00 00 00 
3e2b6 a38 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e2ba a39 C3 C3 66 3C 
3e2be a3a 18 7E 18 18 
3e2c2 a3b 18 00 00 00 
3e2c6 a3c 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3e2ca a3d 18 18 18 18 
3e2ce a3e 00 18 18 18 
3e2d2 a3f 18 00 00 00 
3e2d6 a40 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3e2da a41 3C 06 06 3C 
3e2de a42 66 66 66 3C 
3e2e2 a43 60 60 3C 00 
3e2e6 a44 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3e2ea a45 66 66 00 00 
3e2ee a46 00 00 00 00 
3e2f2 a47 00 00 00 00 
3e2f6 a48 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e2fa a49 7E 81 B9 85 
3e2fe a4a 85 B9 81 7E 
3e302 a4b 00 00 00 00 
3e306 a4c 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3e30a a4d 3C 33 33 7E 
3e30e a4e 00 7F 00 00 
3e312 a4f 00 00 00 00 
3e316 a50 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e31a a51 00 00 CC 66 
3e31e a52 33 66 CC 00 
3e322 a53 00 00 00 00 
3e326 a54 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e32a a55 7E 60 60 00 
3e32e a56 00 00 00 00 
3e332 a57 00 00 00 00 
3e336 a58 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e33a a59 7E 81 9D A5 
3e33e a5a 9D A5 81 7E 
3e342 a5b 00 00 00 00 
3e346 a5c 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3e34a a5d 7E 00 00 00 
3e34e a5e 00 00 00 00 
3e352 a5f 00 00 00 00 
3e356 a60 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e35a a61 3C 66 66 3C 
3e35e a62 00 00 00 00 
3e362 a63 00 00 00 00 
3e366 a64 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e36a a65 18 18 18 7E 
3e36e a66 18 18 18 00 
3e372 a67 7E 00 00 00 
3e376 a68 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
3e37a a69 1E 30 30 18 
3e37e a6a 0C 06 3E 00 
3e382 a6b 00 00 00 00 
3e386 a6c 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e38a a6d 1E 30 30 1C 
3e38e a6e 30 30 1E 00 
3e392 a6f 00 00 00 00 
3e396 a70 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e39a a71 30 18 0C 06 
3e39e a72 00 00 00 00 
3e3a2 a73 00 00 00 00 
3e3a6 a74 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e3aa a75 00 00 00 66 
3e3ae a76 66 66 66 66 
3e3b2 a77 FE 06 06 00 
3e3b6 a78 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3e3ba a79 7C 5E 5E 5E 
3e3be a7a 5C 50 50 50 
3e3c2 a7b 50 50 00 00 
3e3c6 a7c 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3e3ca a7d 00 00 00 18 
3e3ce a7e 18 00 00 00 
3e3d2 a7f 00 00 00 00 
3e3d6 a80 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e3da a81 00 00 00 00 
3e3de a82 00 00 00 00 
3e3e2 a83 00          | 	byte	$00[9]
3e3e3 a83 30 18 00 00 
3e3e7 a84 00 00 00 18 
3e3eb a85 1C 18 18 18 
3e3ef a86 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
3e3f3 a87 00 00 00 00 
3e3f7 a88 00 00 00    | 	byte	$00[7]
3e3fa a89 3C 66 66 3C 
3e3fe a8a 00 7E 00 00 
3e402 a8b 00 00 00 00 
3e406 a8c 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e40a a8d 00 00 33 66 
3e40e a8e CC 66 33 00 
3e412 a8f 00 00 00 00 
3e416 a90 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e41a a91 02 63 32 1A 
3e41e a92 4E 66 F3 40 
3e422 a93 40 00 00 00 
3e426 a94 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
3e42a a95 04 C6 64 34 
3e42e a96 7C 8C 46 23 
3e432 a97 F0 00 00 00 
3e436 a98 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
3e43a a99 03 C4 66 34 
3e43e a9a 5B 6C F6 43 
3e442 a9b 40 00 00 00 
3e446 a9c 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
3e44a a9d 18 18 00 18 
3e44e a9e 0C 06 06 66 
3e452 a9f 3C 00 00 00 
3e456 aa0 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e45a aa1 06 0C 3E 63 
3e45e aa2 63 7F 63 63 
3e462 aa3 63 00 00 00 
3e466 aa4 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3e46a aa5 30 18 3E 63 
3e46e aa6 63 7F 63 63 
3e472 aa7 63 00 00 00 
3e476 aa8 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3e47a aa9 0C 33 3E 63 
3e47e aaa 63 63 7F 63 
3e482 aab 63 00 00 00 
3e486 aac 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3e48a aad 4E 39 3E 63 
3e48e aae 63 7F 63 63 
3e492 aaf 63 00 00 00 
3e496 ab0 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3e49a ab1 63 00 3E 63 
3e49e ab2 63 7F 63 63 
3e4a2 ab3 63 00 00 00 
3e4a6 ab4 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3e4aa ab5 1C 22 1C 36 
3e4ae ab6 63 63 7F 63 
3e4b2 ab7 63 00 00 00 
3e4b6 ab8 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3e4ba ab9 F8 3C 3C 36 
3e4be aba F6 3F 33 33 
3e4c2 abb F3 00 00 00 
3e4c6 abc 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3e4ca abd 78 0C 06 06 
3e4ce abe 06 06 06 0C 
3e4d2 abf 78 30 18 00 
3e4d6 ac0 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3e4da ac1 0C 18 7E 06 
3e4de ac2 06 3E 06 06 
3e4e2 ac3 7E 00 00 00 
3e4e6 ac4 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3e4ea ac5 30 18 7E 06 
3e4ee ac6 06 3E 06 06 
3e4f2 ac7 7E 00 00 00 
3e4f6 ac8 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3e4fa ac9 18 66 7E 06 
3e4fe aca 06 3E 06 06 
3e502 acb 7E 00 00 00 
3e506 acc 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3e50a acd 66 00 7E 06 
3e50e ace 06 3E 06 06 
3e512 acf 7E 00 00 00 
3e516 ad0 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3e51a ad1 0C 18 3C 18 
3e51e ad2 18 18 18 18 
3e522 ad3 3C 00 00 00 
3e526 ad4 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3e52a ad5 30 18 3C 18 
3e52e ad6 18 18 18 18 
3e532 ad7 3C 00 00 00 
3e536 ad8 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3e53a ad9 18 66 3C 18 
3e53e ada 18 18 18 18 
3e542 adb 3C 00 00 00 
3e546 adc 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3e54a add 66 00 3C 18 
3e54e ade 18 18 18 18 
3e552 adf 3C 00 00 00 
3e556 ae0 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3e55a ae1 1E 36 66 66 
3e55e ae2 6F 66 66 36 
3e562 ae3 1E 00 00 00 
3e566 ae4 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
3e56a ae5 8E 73 67 6F 
3e56e ae6 7B 73 63 63 
3e572 ae7 63 00 00 00 
3e576 ae8 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3e57a ae9 06 0C 3E 63 
3e57e aea 63 63 63 63 
3e582 aeb 3E 00 00 00 
3e586 aec 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3e58a aed 30 18 3E 63 
3e58e aee 63 63 63 63 
3e592 aef 3E 00 00 00 
3e596 af0 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3e59a af1 0C 33 3E 63 
3e59e af2 63 63 63 63 
3e5a2 af3 3E 00 00 00 
3e5a6 af4 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3e5aa af5 8E 71 3E 63 
3e5ae af6 63 63 63 63 
3e5b2 af7 3E 00 00 00 
3e5b6 af8 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3e5ba af9 63 00 3E 63 
3e5be afa 63 63 63 63 
3e5c2 afb 3E 00 00 00 
3e5c6 afc 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3e5ca afd 00 00 63 36 
3e5ce afe 1C 1C 36 63 
3e5d2 aff 00 00 00 00 
3e5d6 b00 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3e5da b01 BE 63 73 7B 
3e5de b02 6B 6F 67 63 
3e5e2 b03 3F 00 00 00 
3e5e6 b04 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3e5ea b05 0C 18 63 63 
3e5ee b06 63 63 63 63 
3e5f2 b07 3E 00 00 00 
3e5f6 b08 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3e5fa b09 18 0C 63 63 
3e5fe b0a 63 63 63 63 
3e602 b0b 3E 00 00 00 
3e606 b0c 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3e60a b0d 08 36 63 63 
3e60e b0e 63 63 63 63 
3e612 b0f 3E 00 00 00 
3e616 b10 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3e61a b11 63 00 63 63 
3e61e b12 63 63 63 63 
3e622 b13 3E 00 00 00 
3e626 b14 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3e62a b15 30 18 C3 66 
3e62e b16 3C 18 18 18 
3e632 b17 18 00 00 00 
3e636 b18 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3e63a b19 03 03 3F 63 
3e63e b1a 63 3F 03 03 
3e642 b1b 03 00 00 00 
3e646 b1c 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
3e64a b1d 3C 66 66 66 
3e64e b1e 36 66 66 66 
3e652 b1f 36 06 06 00 
3e656 b20 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
3e65a b21 06 0C 00 3C 
3e65e b22 60 7C 66 66 
3e662 b23 7C 00 00 00 
3e666 b24 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e66a b25 60 30 00 3C 
3e66e b26 60 7C 66 66 
3e672 b27 7C 00 00 00 
3e676 b28 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e67a b29 18 66 00 3C 
3e67e b2a 60 7C 66 66 
3e682 b2b 7C 00 00 00 
3e686 b2c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e68a b2d 8E 71 00 3C 
3e68e b2e 60 7C 66 66 
3e692 b2f 7C 00 00 00 
3e696 b30 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e69a b31 00 66 00 3C 
3e69e b32 60 7C 66 66 
3e6a2 b33 7C 00 00 00 
3e6a6 b34 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e6aa b35 18 24 18 3C 
3e6ae b36 60 7C 66 66 
3e6b2 b37 7C 00 00 00 
3e6b6 b38 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e6ba b39 00 00 00 7E 
3e6be b3a D8 FE 1B 1B 
3e6c2 b3b EE 00 00 00 
3e6c6 b3c 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3e6ca b3d 00 00 00 3C 
3e6ce b3e 06 06 06 06 
3e6d2 b3f 3C 18 0C 00 
3e6d6 b40 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3e6da b41 06 0C 00 3C 
3e6de b42 66 7E 06 06 
3e6e2 b43 3C 00 00 00 
3e6e6 b44 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3e6ea b45 60 30 00 3C 
3e6ee b46 66 7E 06 06 
3e6f2 b47 3C 00 00 00 
3e6f6 b48 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3e6fa b49 18 66 00 3C 
3e6fe b4a 66 7E 06 06 
3e702 b4b 3C 00 00 00 
3e706 b4c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3e70a b4d 00 66 00 3C 
3e70e b4e 66 7E 06 06 
3e712 b4f 3C 00 00 00 
3e716 b50 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3e71a b51 0C 18 00 18 
3e71e b52 18 18 18 18 
3e722 b53 30 00 00 00 
3e726 b54 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3e72a b55 18 0C 00 0C 
3e72e b56 0C 0C 0C 0C 
3e732 b57 18 00 00 00 
3e736 b58 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
3e73a b59 18 66 00 18 
3e73e b5a 18 18 18 18 
3e742 b5b 30 00 00 00 
3e746 b5c 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3e74a b5d 00 66 00 18 
3e74e b5e 18 18 18 18 
3e752 b5f 30 00 00 00 
3e756 b60 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3e75a b61 03 06 3F 18 
3e75e b62 3C 66 66 66 
3e762 b63 3C 00 00 00 
3e766 b64 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e76a b65 8E 71 00 3E 
3e76e b66 66 66 66 66 
3e772 b67 66 00 00 00 
3e776 b68 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3e77a b69 06 0C 00 3C 
3e77e b6a 66 66 66 66 
3e782 b6b 3C 00 00 00 
3e786 b6c 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e78a b6d 60 30 00 3C 
3e78e b6e 66 66 66 66 
3e792 b6f 3C 00 00 00 
3e796 b70 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e79a b71 18 66 00 3C 
3e79e b72 66 66 66 66 
3e7a2 b73 3C 00 00 00 
3e7a6 b74 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e7aa b75 8E 71 00 3C 
3e7ae b76 66 66 66 66 
3e7b2 b77 3C 00 00 00 
3e7b6 b78 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e7ba b79 00 66 00 3C 
3e7be b7a 66 66 66 66 
3e7c2 b7b 3C 00 00 00 
3e7c6 b7c 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3e7ca b7d 00 18 18 00 
3e7ce b7e 7E 00 18 18 
3e7d2 b7f 00 00 00 00 
3e7d6 b80 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3e7da b81 00 00 00 7E 
3e7de b82 73 7B 6F 67 
3e7e2 b83 3F 00 00 00 
3e7e6 b84 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3e7ea b85 0C 18 00 66 
3e7ee b86 66 66 66 66 
3e7f2 b87 7C 00 00 00 
3e7f6 b88 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e7fa b89 30 18 00 66 
3e7fe b8a 66 66 66 66 
3e802 b8b 7C 00 00 00 
3e806 b8c 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e80a b8d 18 66 00 66 
3e80e b8e 66 66 66 66 
3e812 b8f 7C 00 00 00 
3e816 b90 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e81a b91 00 66 00 66 
3e81e b92 66 66 66 66 
3e822 b93 7C 00 00 00 
3e826 b94 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3e82a b95 30 18 00 66 
3e82e b96 66 66 66 3C 
3e832 b97 18 0C 06 00 
3e836 b98 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3e83a b99 06 06 06 3E 
3e83e b9a 66 66 66 3E 
3e842 b9b 06 06 06 00 
3e846 b9c 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
3e84a b9d 00 66 00 66 
3e84e b9e 66 66 66 3C 
3e852 b9f 18 0C 06 00 
3e856 ba0 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3e85a ba1 00 7E 66 66 
3e85e ba2 66 66 66 66 
3e862 ba3 66 7E 00 00 
3e866 ba4 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
3e86a ba5 00 00 00 00 
      ...             
3ea72 c27 00 00 00 00 
3ea76 c28 00 00       | 	byte	$00[526]
3ea78 c29 00 00 00 00 
3ea7c c2a 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3ea7d c2a 80 00 00 00 
3ea81 c2b 00 80 00 00 
3ea85 c2c 80 80 00 00 
3ea89 c2d 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3ea8d c2e 80 00 80 00 
3ea91 c2f 00 40 80 00 
3ea95 c30 AA AA AA 00 
3ea99 c31 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3ea9d c32 FF 00 00 00 
3eaa1 c33 00 FF 00 00 
3eaa5 c34 FF FF 00 00 
3eaa9 c35 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3eaad c36 FF 00 FF 00 
3eab1 c37 00 FF FF 00 
3eab5 c38 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3eab8 c39 00 00 00 00 
3eabc c3a 00          | ataripalette   file "ataripalettep2.def"
3eabd c3a 11 11 11 00 
3eac1 c3b 22 22 22 00 
3eac5 c3c 33 33 33 00 
3eac9 c3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3eacd c3e 55 55 55 00 
3ead1 c3f 66 66 66 00 
3ead5 c40 77 77 77 00 
3ead9 c41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3eadd c42 99 99 99 00 
3eae1 c43 AA AA AA 00 
3eae5 c44 BB BB BB 00 
3eae9 c45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3eaed c46 DD DD DD 00 
3eaf1 c47 EE EE EE 00 
3eaf5 c48 FF FF FF 00 
3eaf9 c49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3eafd c4a 00 14 40 00 
3eb01 c4b 00 1E 60 00 
3eb05 c4c 00 28 80 00 
3eb09 c4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3eb0d c4e 00 3C BF 00 
3eb11 c4f 00 46 DF 00 
3eb15 c50 00 50 FF 00 
3eb19 c51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3eb1d c52 39 77 FF 00 
3eb21 c53 55 8A FF 00 
3eb25 c54 71 9E FF 00 
3eb29 c55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3eb2d c56 AA C5 FF 00 
3eb31 c57 C6 D8 FF 00 
3eb35 c58 E3 EC FF 00 
3eb39 c59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3eb3d c5a 00 00 40 00 
3eb41 c5b 00 00 60 00 
3eb45 c5c 00 00 80 00 
3eb49 c5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3eb4d c5e 00 00 BF 00 
3eb51 c5f 00 00 DF 00 
3eb55 c60 00 00 FF 00 
3eb59 c61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3eb5d c62 39 39 FF 00 
3eb61 c63 55 55 FF 00 
3eb65 c64 71 71 FF 00 
3eb69 c65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3eb6d c66 AA AA FF 00 
3eb71 c67 C6 C6 FF 00 
3eb75 c68 E3 E3 FF 00 
3eb79 c69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3eb7d c6a 20 00 40 00 
3eb81 c6b 30 00 60 00 
3eb85 c6c 40 00 80 00 
3eb89 c6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3eb8d c6e 60 00 BF 00 
3eb91 c6f 70 00 DF 00 
3eb95 c70 80 00 FF 00 
3eb99 c71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3eb9d c72 9C 39 FF 00 
3eba1 c73 AA 55 FF 00 
3eba5 c74 B8 71 FF 00 
3eba9 c75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3ebad c76 D5 AA FF 00 
3ebb1 c77 E3 C6 FF 00 
3ebb5 c78 F1 E3 FF 00 
3ebb9 c79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3ebbd c7a 40 00 40 00 
3ebc1 c7b 60 00 60 00 
3ebc5 c7c 80 00 80 00 
3ebc9 c7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3ebcd c7e BF 00 BF 00 
3ebd1 c7f DF 00 DF 00 
3ebd5 c80 FF 00 FF 00 
3ebd9 c81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3ebdd c82 FF 39 FF 00 
3ebe1 c83 FF 55 FF 00 
3ebe5 c84 FF 71 FF 00 
3ebe9 c85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3ebed c86 FF AA FF 00 
3ebf1 c87 FF C6 FF 00 
3ebf5 c88 FF E3 FF 00 
3ebf9 c89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3ebfd c8a 40 00 20 00 
3ec01 c8b 60 00 30 00 
3ec05 c8c 80 00 40 00 
3ec09 c8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3ec0d c8e BF 00 60 00 
3ec11 c8f DF 00 70 00 
3ec15 c90 FF 00 80 00 
3ec19 c91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3ec1d c92 FF 39 9C 00 
3ec21 c93 FF 55 AA 00 
3ec25 c94 FF 71 B8 00 
3ec29 c95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3ec2d c96 FF AA D5 00 
3ec31 c97 FF C6 E3 00 
3ec35 c98 FF E3 F1 00 
3ec39 c99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3ec3d c9a 40 00 00 00 
3ec41 c9b 60 00 00 00 
3ec45 c9c 80 00 00 00 
3ec49 c9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3ec4d c9e BF 00 00 00 
3ec51 c9f DF 00 00 00 
3ec55 ca0 FF 00 00 00 
3ec59 ca1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3ec5d ca2 FF 39 39 00 
3ec61 ca3 FF 55 55 00 
3ec65 ca4 FF 71 71 00 
3ec69 ca5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3ec6d ca6 FF AA AA 00 
3ec71 ca7 FF C6 C6 00 
3ec75 ca8 FF E3 E3 00 
3ec79 ca9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3ec7d caa 40 10 00 00 
3ec81 cab 60 18 00 00 
3ec85 cac 80 20 00 00 
3ec89 cad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3ec8d cae BF 30 00 00 
3ec91 caf DF 38 00 00 
3ec95 cb0 FF 40 00 00 
3ec99 cb1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3ec9d cb2 FF 6A 39 00 
3eca1 cb3 FF 80 55 00 
3eca5 cb4 FF 95 71 00 
3eca9 cb5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3ecad cb6 FF BF AA 00 
3ecb1 cb7 FF D5 C6 00 
3ecb5 cb8 FF EA E3 00 
3ecb9 cb9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3ecbd cba 40 20 00 00 
3ecc1 cbb 60 30 00 00 
3ecc5 cbc 80 40 00 00 
3ecc9 cbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3eccd cbe BF 60 00 00 
3ecd1 cbf DF 70 00 00 
3ecd5 cc0 FF 80 00 00 
3ecd9 cc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3ecdd cc2 FF 9C 39 00 
3ece1 cc3 FF AA 55 00 
3ece5 cc4 FF B8 71 00 
3ece9 cc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3eced cc6 FF D5 AA 00 
3ecf1 cc7 FF E3 C6 00 
3ecf5 cc8 FF F1 E3 00 
3ecf9 cc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3ecfd cca 40 30 00 00 
3ed01 ccb 60 48 00 00 
3ed05 ccc 80 60 00 00 
3ed09 ccd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3ed0d cce BF 90 00 00 
3ed11 ccf DF A8 00 00 
3ed15 cd0 FF C0 00 00 
3ed19 cd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3ed1d cd2 FF CE 39 00 
3ed21 cd3 FF D5 55 00 
3ed25 cd4 FF DC 71 00 
3ed29 cd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3ed2d cd6 FF EA AA 00 
3ed31 cd7 FF F1 C6 00 
3ed35 cd8 FF F8 E3 00 
3ed39 cd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3ed3d cda 30 40 00 00 
3ed41 cdb 48 60 00 00 
3ed45 cdc 60 80 00 00 
3ed49 cdd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3ed4d cde 90 BF 00 00 
3ed51 cdf A8 DF 00 00 
3ed55 ce0 C0 FF 00 00 
3ed59 ce1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3ed5d ce2 CE FF 39 00 
3ed61 ce3 D5 FF 55 00 
3ed65 ce4 DC FF 71 00 
3ed69 ce5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3ed6d ce6 EA FF AA 00 
3ed71 ce7 F1 FF C6 00 
3ed75 ce8 F8 FF E3 00 
3ed79 ce9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3ed7d cea 00 40 00 00 
3ed81 ceb 00 60 00 00 
3ed85 cec 00 80 00 00 
3ed89 ced 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3ed8d cee 00 BF 00 00 
3ed91 cef 00 DF 00 00 
3ed95 cf0 00 FF 00 00 
3ed99 cf1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3ed9d cf2 39 FF 39 00 
3eda1 cf3 55 FF 55 00 
3eda5 cf4 71 FF 71 00 
3eda9 cf5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3edad cf6 AA FF AA 00 
3edb1 cf7 C6 FF C6 00 
3edb5 cf8 E3 FF E3 00 
3edb9 cf9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3edbd cfa 00 40 14 00 
3edc1 cfb 00 60 1E 00 
3edc5 cfc 00 80 28 00 
3edc9 cfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3edcd cfe 00 BF 3C 00 
3edd1 cff 00 DF 46 00 
3edd5 d00 00 FF 50 00 
3edd9 d01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3eddd d02 39 FF 77 00 
3ede1 d03 55 FF 8A 00 
3ede5 d04 71 FF 9E 00 
3ede9 d05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3eded d06 AA FF C5 00 
3edf1 d07 C6 FF D8 00 
3edf5 d08 E3 FF EC 00 
3edf9 d09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3edfd d0a 00 40 28 00 
3ee01 d0b 00 60 3C 00 
3ee05 d0c 00 80 50 00 
3ee09 d0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3ee0d d0e 00 BF 78 00 
3ee11 d0f 00 DF 8C 00 
3ee15 d10 00 FF A0 00 
3ee19 d11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3ee1d d12 39 FF B5 00 
3ee21 d13 55 FF C0 00 
3ee25 d14 71 FF CA 00 
3ee29 d15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3ee2d d16 AA FF DF 00 
3ee31 d17 C6 FF EA 00 
3ee35 d18 E3 FF F4 00 
3ee39 d19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3ee3d d1a 00 40 40 00 
3ee41 d1b 00 60 60 00 
3ee45 d1c 00 80 80 00 
3ee49 d1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3ee4d d1e 00 BF BF 00 
3ee51 d1f 00 DF DF 00 
3ee55 d20 00 FF FF 00 
3ee59 d21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3ee5d d22 39 FF FF 00 
3ee61 d23 55 FF FF 00 
3ee65 d24 71 FF FF 00 
3ee69 d25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3ee6d d26 AA FF FF 00 
3ee71 d27 C6 FF FF 00 
3ee75 d28 E3 FF FF 00 
3ee79 d29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3ee7d d2a 00 28 40 00 
3ee81 d2b 00 3C 60 00 
3ee85 d2c 00 50 80 00 
3ee89 d2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3ee8d d2e 00 78 BF 00 
3ee91 d2f 00 8C DF 00 
3ee95 d30 00 A0 FF 00 
3ee99 d31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3ee9d d32 39 B5 FF 00 
3eea1 d33 55 C0 FF 00 
3eea5 d34 71 CA FF 00 
3eea9 d35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3eead d36 AA DF FF 00 
3eeb1 d37 C6 EA FF 00 
3eeb5 d38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3eeb8 d39 00 00 00 00 
3eebc d3a 00          | ataripalette2  file "ataripalettep2.def"
3eebd d3a 11 11 11 00 
3eec1 d3b 22 22 22 00 
3eec5 d3c 33 33 33 00 
3eec9 d3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3eecd d3e 55 55 55 00 
3eed1 d3f 66 66 66 00 
3eed5 d40 77 77 77 00 
3eed9 d41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3eedd d42 99 99 99 00 
3eee1 d43 AA AA AA 00 
3eee5 d44 BB BB BB 00 
3eee9 d45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3eeed d46 DD DD DD 00 
3eef1 d47 EE EE EE 00 
3eef5 d48 FF FF FF 00 
3eef9 d49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3eefd d4a 00 14 40 00 
3ef01 d4b 00 1E 60 00 
3ef05 d4c 00 28 80 00 
3ef09 d4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3ef0d d4e 00 3C BF 00 
3ef11 d4f 00 46 DF 00 
3ef15 d50 00 50 FF 00 
3ef19 d51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3ef1d d52 39 77 FF 00 
3ef21 d53 55 8A FF 00 
3ef25 d54 71 9E FF 00 
3ef29 d55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3ef2d d56 AA C5 FF 00 
3ef31 d57 C6 D8 FF 00 
3ef35 d58 E3 EC FF 00 
3ef39 d59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3ef3d d5a 00 00 40 00 
3ef41 d5b 00 00 60 00 
3ef45 d5c 00 00 80 00 
3ef49 d5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3ef4d d5e 00 00 BF 00 
3ef51 d5f 00 00 DF 00 
3ef55 d60 00 00 FF 00 
3ef59 d61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3ef5d d62 39 39 FF 00 
3ef61 d63 55 55 FF 00 
3ef65 d64 71 71 FF 00 
3ef69 d65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3ef6d d66 AA AA FF 00 
3ef71 d67 C6 C6 FF 00 
3ef75 d68 E3 E3 FF 00 
3ef79 d69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3ef7d d6a 20 00 40 00 
3ef81 d6b 30 00 60 00 
3ef85 d6c 40 00 80 00 
3ef89 d6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3ef8d d6e 60 00 BF 00 
3ef91 d6f 70 00 DF 00 
3ef95 d70 80 00 FF 00 
3ef99 d71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3ef9d d72 9C 39 FF 00 
3efa1 d73 AA 55 FF 00 
3efa5 d74 B8 71 FF 00 
3efa9 d75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3efad d76 D5 AA FF 00 
3efb1 d77 E3 C6 FF 00 
3efb5 d78 F1 E3 FF 00 
3efb9 d79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3efbd d7a 40 00 40 00 
3efc1 d7b 60 00 60 00 
3efc5 d7c 80 00 80 00 
3efc9 d7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3efcd d7e BF 00 BF 00 
3efd1 d7f DF 00 DF 00 
3efd5 d80 FF 00 FF 00 
3efd9 d81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3efdd d82 FF 39 FF 00 
3efe1 d83 FF 55 FF 00 
3efe5 d84 FF 71 FF 00 
3efe9 d85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3efed d86 FF AA FF 00 
3eff1 d87 FF C6 FF 00 
3eff5 d88 FF E3 FF 00 
3eff9 d89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3effd d8a 40 00 20 00 
3f001 d8b 60 00 30 00 
3f005 d8c 80 00 40 00 
3f009 d8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3f00d d8e BF 00 60 00 
3f011 d8f DF 00 70 00 
3f015 d90 FF 00 80 00 
3f019 d91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3f01d d92 FF 39 9C 00 
3f021 d93 FF 55 AA 00 
3f025 d94 FF 71 B8 00 
3f029 d95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3f02d d96 FF AA D5 00 
3f031 d97 FF C6 E3 00 
3f035 d98 FF E3 F1 00 
3f039 d99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3f03d d9a 40 00 00 00 
3f041 d9b 60 00 00 00 
3f045 d9c 80 00 00 00 
3f049 d9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3f04d d9e BF 00 00 00 
3f051 d9f DF 00 00 00 
3f055 da0 FF 00 00 00 
3f059 da1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3f05d da2 FF 39 39 00 
3f061 da3 FF 55 55 00 
3f065 da4 FF 71 71 00 
3f069 da5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3f06d da6 FF AA AA 00 
3f071 da7 FF C6 C6 00 
3f075 da8 FF E3 E3 00 
3f079 da9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3f07d daa 40 10 00 00 
3f081 dab 60 18 00 00 
3f085 dac 80 20 00 00 
3f089 dad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3f08d dae BF 30 00 00 
3f091 daf DF 38 00 00 
3f095 db0 FF 40 00 00 
3f099 db1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3f09d db2 FF 6A 39 00 
3f0a1 db3 FF 80 55 00 
3f0a5 db4 FF 95 71 00 
3f0a9 db5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3f0ad db6 FF BF AA 00 
3f0b1 db7 FF D5 C6 00 
3f0b5 db8 FF EA E3 00 
3f0b9 db9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3f0bd dba 40 20 00 00 
3f0c1 dbb 60 30 00 00 
3f0c5 dbc 80 40 00 00 
3f0c9 dbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3f0cd dbe BF 60 00 00 
3f0d1 dbf DF 70 00 00 
3f0d5 dc0 FF 80 00 00 
3f0d9 dc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3f0dd dc2 FF 9C 39 00 
3f0e1 dc3 FF AA 55 00 
3f0e5 dc4 FF B8 71 00 
3f0e9 dc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3f0ed dc6 FF D5 AA 00 
3f0f1 dc7 FF E3 C6 00 
3f0f5 dc8 FF F1 E3 00 
3f0f9 dc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3f0fd dca 40 30 00 00 
3f101 dcb 60 48 00 00 
3f105 dcc 80 60 00 00 
3f109 dcd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3f10d dce BF 90 00 00 
3f111 dcf DF A8 00 00 
3f115 dd0 FF C0 00 00 
3f119 dd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3f11d dd2 FF CE 39 00 
3f121 dd3 FF D5 55 00 
3f125 dd4 FF DC 71 00 
3f129 dd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3f12d dd6 FF EA AA 00 
3f131 dd7 FF F1 C6 00 
3f135 dd8 FF F8 E3 00 
3f139 dd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3f13d dda 30 40 00 00 
3f141 ddb 48 60 00 00 
3f145 ddc 60 80 00 00 
3f149 ddd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3f14d dde 90 BF 00 00 
3f151 ddf A8 DF 00 00 
3f155 de0 C0 FF 00 00 
3f159 de1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3f15d de2 CE FF 39 00 
3f161 de3 D5 FF 55 00 
3f165 de4 DC FF 71 00 
3f169 de5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3f16d de6 EA FF AA 00 
3f171 de7 F1 FF C6 00 
3f175 de8 F8 FF E3 00 
3f179 de9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3f17d dea 00 40 00 00 
3f181 deb 00 60 00 00 
3f185 dec 00 80 00 00 
3f189 ded 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3f18d dee 00 BF 00 00 
3f191 def 00 DF 00 00 
3f195 df0 00 FF 00 00 
3f199 df1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3f19d df2 39 FF 39 00 
3f1a1 df3 55 FF 55 00 
3f1a5 df4 71 FF 71 00 
3f1a9 df5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3f1ad df6 AA FF AA 00 
3f1b1 df7 C6 FF C6 00 
3f1b5 df8 E3 FF E3 00 
3f1b9 df9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3f1bd dfa 00 40 14 00 
3f1c1 dfb 00 60 1E 00 
3f1c5 dfc 00 80 28 00 
3f1c9 dfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3f1cd dfe 00 BF 3C 00 
3f1d1 dff 00 DF 46 00 
3f1d5 e00 00 FF 50 00 
3f1d9 e01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3f1dd e02 39 FF 77 00 
3f1e1 e03 55 FF 8A 00 
3f1e5 e04 71 FF 9E 00 
3f1e9 e05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3f1ed e06 AA FF C5 00 
3f1f1 e07 C6 FF D8 00 
3f1f5 e08 E3 FF EC 00 
3f1f9 e09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3f1fd e0a 00 40 28 00 
3f201 e0b 00 60 3C 00 
3f205 e0c 00 80 50 00 
3f209 e0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3f20d e0e 00 BF 78 00 
3f211 e0f 00 DF 8C 00 
3f215 e10 00 FF A0 00 
3f219 e11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3f21d e12 39 FF B5 00 
3f221 e13 55 FF C0 00 
3f225 e14 71 FF CA 00 
3f229 e15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3f22d e16 AA FF DF 00 
3f231 e17 C6 FF EA 00 
3f235 e18 E3 FF F4 00 
3f239 e19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3f23d e1a 00 40 40 00 
3f241 e1b 00 60 60 00 
3f245 e1c 00 80 80 00 
3f249 e1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3f24d e1e 00 BF BF 00 
3f251 e1f 00 DF DF 00 
3f255 e20 00 FF FF 00 
3f259 e21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3f25d e22 39 FF FF 00 
3f261 e23 55 FF FF 00 
3f265 e24 71 FF FF 00 
3f269 e25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3f26d e26 AA FF FF 00 
3f271 e27 C6 FF FF 00 
3f275 e28 E3 FF FF 00 
3f279 e29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3f27d e2a 00 28 40 00 
3f281 e2b 00 3C 60 00 
3f285 e2c 00 50 80 00 
3f289 e2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3f28d e2e 00 78 BF 00 
3f291 e2f 00 8C DF 00 
3f295 e30 00 A0 FF 00 
3f299 e31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3f29d e32 39 B5 FF 00 
3f2a1 e33 55 C0 FF 00 
3f2a5 e34 71 CA FF 00 
3f2a9 e35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3f2ad e36 AA DF FF 00 
3f2b1 e37 C6 EA FF 00 
3f2b5 e38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3f2b8 e39             | 
3f2b8 e39             | '**********************************************************************************
3f2b8 e39             | '
3f2b8 e39             | '        Timings and colors definitions
3f2b8 e39             | '
3f2b8 e39             | '**********************************************************************************
3f2b8 e39             | 
3f2b8 e39             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3f2b8 e39 08 00 00 00 
3f2bc e3a 3C 00 00 00 
3f2c0 e3b 08 00 00 00 
3f2c4 e3c 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3f2c8 e3d 07 00 00 00 
3f2cc e3e 04 00 00 00 
3f2d0 e3f 01 00 00 00 
3f2d4 e40 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3f2d8 e41 58 02 00 00 
3f2dc e42 20 9E 4B 14 
3f2e0 e43 FB A8 9E 01 
3f2e4 e44 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3f2e8 e45 00 00 00 00 
3f2ec e46 C0 00 00 00 
3f2f0 e47 00 00 00 00 
3f2f4 e48 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3f2f8 e49             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3f2f8 e49 00 75 C7 97 
3f2fc e4a 27 47 F6 0A 
3f300 e4b 05 79 CB 9B 
3f304 e4c 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3f308 e4d             | 
3f308 e4d             | ''--------  Initialization  ----------------------------------------------------------------
3f308 e4d             | 
3f308 e4d 28 0C 64 FD | hdmi            setq    #6
3f30c e4e 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3f310 e4f 28 10 64 FD |                 setq    #8
3f314 e50 D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3f318 e51             | 
3f318 e51 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3f31c e52 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3f320 e53 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3f324 e54 D6 C6 01 F1 |                 add     t1,hbase
3f328 e55 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3f32c e56 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3f330 e57 7B 0B 80 5F 
3f334 e58 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3f338 e59 66 66 86 FF 
3f33c e5a 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3f340 e5b             | '
3f340 e5b D6 C6 01 F6 |                 mov 	t1,hbase			   '
3f344 e5c 11 C6 65 F0 |                 shl 	t1,#17                             '
3f348 e5d E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3f34c e5e 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3f350 e5f             | 
3f350 e5f 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3f354 e60 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3f358 e61 E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3f35c e62             | 
3f35c e62             | ''--------  frame rendering main loop  ---------------------------------------------------
3f35c e62             | 
3f35c e62 28 06 64 FD | p101            setq 	#3
3f360 e63 00 A5 05 FB | 		rdlong  vblankptr,ptra
3f364 e64 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3f368 e65 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3f36c e66 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3f370 e67 00 A0 05 F6 |                 mov     dlinum, #0
3f374 e68 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3f378 e69 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3f37c e6a             | 
3f37c e6a             | 
3f37c e6a 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3f380 e6b 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3f384 e6c ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3f388 e6d             |                 
3f388 e6d             | 
3f388 e6d             | 
3f388 e6d             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3f388 e6d             |   
3f388 e6d 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3f38c e6e 29 FE 65 3D |          if_nc  setq2   #255
3f390 e6f D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3f394 e70             | 
3f394 e70             | '' -----   up porch (before the picture)
3f394 e70             | 
3f394 e70 C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3f398 e71 C1 C4 01 F6 |                 mov     hsync1,sync_001	
3f39c e72 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3f3a0 e73 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3f3a4 e74             |  
3f3a4 e74             |    
3f3a4 e74             |  
3f3a4 e74 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3f3a8 e75 E2 8C B1 FC |                 xzero   m_sn,hsync1
3f3ac e76 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3f3b0 e77 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3f3b4 e78 E1 90 C1 FC |                 xcont   m_vi,hsync0
3f3b8 e79 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3f3bc e7a             | 
3f3bc e7a E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3f3c0 e7b E2 8C B1 FC |                 xzero   m_sn,hsync1
3f3c4 e7c 48 00 B0 FD | 		call    #dli
3f3c8 e7d E1 8E C1 FC |                 xcont   m_bv,hsync0     
3f3cc e7e E1 90 C1 FC |                 xcont   m_vi,hsync0
3f3d0 e7f 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3f3d4 e80             |                 	
3f3d4 e80             |                 
3f3d4 e80             | 
3f3d4 e80             |  
3f3d4 e80             | '' ------- the main screen drawing starts here
3f3d4 e80             | 
3f3d4 e80 E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3f3d8 e81 E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3f3dc e82 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3f3e0 e83 E1 8E C1 FC |                 xcont   m_bv,hsync0
3f3e4 e84 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3f3e8 e85 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3f3ec e86 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3f3f0 e87             |               
3f3f0 e87             | 
3f3f0 e87 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3f3f4 e88 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3f3f8 e89             | 
3f3f8 e89             | ' ---------------- All visible lines displayed now, start vblank  
3f3f8 e89             | 
3f3f8 e89 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3f3fc e8a 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3f400 e8b C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3f404 e8c C3 C4 01 F6 |                 mov     hsync1,sync_223
3f408 e8d 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3f40c e8e 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3f410 e8f             | 
3f410 e8f             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3f410 e8f             | 
3f410 e8f             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3f410 e8f             | 
3f410 e8f 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3f414 e90             | 
3f414 e90 DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3f418 e91 04 B8 05 A1 |     if_z        add     dlptr2,#4
3f41c e92 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3f420 e93             | 
3f420 e93 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3f424 e94 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3f428 e95 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3f42c e96 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3f430 e97 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3f434 e98             | 
3f434 e98 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3f438 e99 DD C6 41 F8 |                 getnib  t1,dl,#0
3f43c e9a 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3f440 e9b 70 00 90 AD |     if_z        jmp     #preload
3f444 e9c 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3f448 e9d 94 00 90 AD |     if_z        jmp     #preload2
3f44c e9e 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3f450 e9f 0C 00 90 AD |     if_z        jmp     #p390
3f454 ea0 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3f458 ea1 28 00 90 AD |     if_z        jmp     #p391  
3f45c ea2             | 
3f45c ea2 2D 00 64 FD | p308            ret
3f460 ea3             |    
3f460 ea3 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3f464 ea4 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3f468 ea5 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3f46c ea6 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3f470 ea7 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3f474 ea8 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3f478 ea9 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3f47c eaa 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3f480 eab 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3f484 eac             |  
3f484 eac             | '' --------  Reload palette. To do 
3f484 eac             | 
3f484 eac E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3f488 ead 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3f48c eae 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3f490 eaf 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3f494 eb0 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3f498 eb1 E0 00 00 FB |         	rdlong  $000, framebuf2         	
3f49c eb2 70 FF 9F FD |         	jmp     #dli                
3f4a0 eb3             |       
3f4a0 eb3             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3f4a0 eb3             | 
3f4a0 eb3             | 
3f4a0 eb3             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3f4a0 eb3             | 
3f4a0 eb3 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3f4a4 eb4 E2 8C B1 FC |                 xzero   m_sn,hsync1
3f4a8 eb5 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3f4ac eb6 E1 90 C1 FC |                 xcont   m_vi,hsync0
3f4b0 eb7 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3f4b4 eb8             |         
3f4b4 eb8             | '' -------------- Preload a line from PSRAM        
3f4b4 eb8             |         
3f4b4 eb8 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3f4b8 eb9 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3f4bc eba DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3f4c0 ebb DE B4 01 F6 |                 mov     buf1,buf1c
3f4c4 ebc 03 A0 05 F7 |                 incmod  dlinum,#3
3f4c8 ebd             | 
3f4c8 ebd 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3f4cc ebe 32 B7 01 F6 |                 mov     buf2,a1024
3f4d0 ebf E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3f4d4 ec0 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3f4d8 ec1 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3f4dc ec2 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3f4e0 ec3             |  
3f4e0 ec3             |  
3f4e0 ec3             | preload2      '  incmod  dlinum,#3
3f4e0 ec3 04 C0 45 F0 |                 shr 	framebuf2,#4
3f4e4 ec4 ED B2 01 F6 |                 mov 	cmd,affffffff
3f4e8 ec5 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3f4ec ec6 28 02 64 FD |                 setq	#1
3f4f0 ec7 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3f4f4 ec8             |                 
3f4f4 ec8             | 
3f4f4 ec8             | '' -------------- Draw sprites
3f4f4 ec8             | 
3f4f4 ec8 CF 5C 02 F6 | sprite          mov t8,frames
3f4f8 ec9 10 5C 0E F5 | 		and t8,#16 wz
3f4fc eca 11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
3f500 ecb 10 48 06 A6 | 	if_z    mov spritenum, #16	
3f504 ecc             | 		
3f504 ecc             | 
3f504 ecc 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3f508 ecd 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3f50c ece EF 56 96 F9 |                 alts    t5,#sprite1xy
3f510 ecf 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3f514 ed0 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3f518 ed1 EF 56 96 F9 |                 alts    t5,#sprite1xy
3f51c ed2 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3f520 ed3 0F 4C 66 F7 |                 signx	sprite_x,#15
3f524 ed4 F0 56 96 F9 |                 alts    t5,#sprite1wh
3f528 ed5 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3f52c ed6 01 52 86 F1 |                 sub     sprite_h,#1
3f530 ed7 F0 56 96 F9 |                 alts    t5,#sprite1wh
3f534 ed8 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3f538 ed9             | 
3f538 ed9             | 
3f538 ed9 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3f53c eda BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3f540 edb 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3f544 edc B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3f548 edd 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3f54c ede AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3f550 edf 00 5E 06 F6 |                 mov 	t9,#0
3f554 ee0 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3f558 ee1 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3f55c ee2 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3f560 ee3             |      
3f560 ee3 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3f564 ee4 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3f568 ee5 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3f56c ee6 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3f570 ee7 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3f574 ee8             |                 
3f574 ee8 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3f578 ee9 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3f57c eea DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3f580 eeb             |   		
3f580 eeb 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3f584 eec 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3f588 eed             | 
3f588 eed 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3f58c eee 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3f590 eef 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3f594 ef0             |  
3f594 ef0 EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3f598 ef1 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3f59c ef2 10 00 90 CD |      if_c 	jmp     #p899		
3f5a0 ef3             | 	
3f5a0 ef3             | 	
3f5a0 ef3 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3f5a4 ef4 28 CD 01 F1 | 		add	t4,sprite_w
3f5a8 ef5 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3f5ac ef6             | 
3f5ac ef6 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3f5b0 ef7             | 
3f5b0 ef7 28 59 02 F6 | p899		mov 	t6,sprite_w
3f5b4 ef8 01 58 86 F1 | 	 	sub     t6,#1
3f5b8 ef9 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3f5bc efa             | 
3f5bc efa 28 58 62 FD |                 setq   	t6
3f5c0 efb E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3f5c4 efc 28 5D 02 F6 |                 mov t8,sprite_w
3f5c8 efd 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3f5cc efe 24 00 90 AD |         if_z    jmp #p898
3f5d0 eff             |          
3f5d0 eff             |         
3f5d0 eff 70 5F 06 F6 |                 mov  t9,#368
3f5d4 f00 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3f5d8 f01             | 
3f5d8 f01 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3f5dc f02 08 5C 06 FA |                 mul t8,#8				' bits to shr
3f5e0 f03 FF FF 7F FF 
3f5e4 f04 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3f5e8 f05 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3f5ec f06 00 5E 8E F9 |                 altd t9,#0				' and mask 
3f5f0 f07 2D 01 00 F5 |                 and 0-0, t7
3f5f4 f08             |                
3f5f4 f08             | 
3f5f4 f08 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3f5f8 f09 E5 E0 7A FA |                 wmlong 368,t3				
3f5fc f0a             |                 
3f5fc f0a C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3f600 f0b 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3f604 f0c 2D 00 64 FD |                 ret
3f608 f0d             | 	
3f608 f0d             | 	
3f608 f0d             |                
3f608 f0d             |  
3f608 f0d             | '' -------------- Graphics line ------------------------------------------------------------
3f608 f0d             |  
3f608 f0d             | 
3f608 f0d             | '' consts and vars
3f608 f0d             | 
3f608 f0d 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3f60c f0e AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3f610 f0f 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3f614 f10 AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3f618 f11             | 
3f618 f11 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3f61c f12             | 
3f61c f12             | '------ these longs will be set by setmode function
3f61c f12             | 
3f61c f12 00 00 00 00 | m_bs            long    0        'blanks before sync
3f620 f13 00 00 00 00 | m_sn            long    0        'sync
3f624 f14 00 00 00 00 | m_bv            long    0        'blanks before visible
3f628 f15 00 00 00 00 | m_vi            long    0        'visible pixels #
3f62c f16             | 'm_border        long    0        'left/right borders
3f62c f16 00 00 00 00 | i_upporch       long    0        'up porch lines
3f630 f17 00 00 00 00 | i_vsync         long    0        'vsync lines
3f634 f18 00 00 00 00 | i_downporch     long    0        'down porch lines
3f638 f19 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3f63c f1a 00 00 00 00 | i_totalvis      long    0
3f640 f1b             | 
3f640 f1b             | '-------------------------------------
3f640 f1b             |  
3f640 f1b 00 00 00 00 | linenum         long    0
3f644 f1c 00 00 00 00 | frames          long    0
3f648 f1d 00 00 00 00 | dlinum long 0
3f64c f1e 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3f650 f1f             | 
3f650 f1f 00 00 00 00 | vblankptr       long    0
3f654 f20 00 00 00 00 | modeptr         long    0
3f658 f21 00 00 00 00 | paletteptr      long    0
3f65c f22 00 00 00 00 | dlptr           long    0
3f660 f23 01 00 00 00 | hbase           long    1
3f664 f24 00 00 00 00 | mailbox         long    0
3f668 f25 00 00 00 00 | spriteptr          long 0
3f66c f26             | 
3f66c f26 00 00 00 00 | cmd             long    0
3f670 f27 00 EC 07 00 | buf1            long    $80000-1024-4096
3f674 f28 00 04 00 00 | buf2            long    1024
3f678 f29 01 00 00 00 | dlptr2          long    1
3f67c f2a 01 00 00 00 | dl              long    1
3f680 f2b             | 
3f680 f2b 00 00 00 00 | buf1c long 0
3f684 f2c 00 EC 07 00 | buf1d            long    $80000-1024-4096
3f688 f2d 01 00 00 00 | framebuf2       long    1
3f68c f2e 01 00 00 00 | hsync0          long    1
3f690 f2f 01 00 00 00 | hsync1          long    1
3f694 f30             | 
3f694 f30 01 00 00 00 | t1              long    1
3f698 f31 00 00 00 00 | t2 long 0
3f69c f32 00 00 00 00 | t3 long 0
3f6a0 f33 00 00 00 00 | t4 long 0
3f6a4 f34             | 
3f6a4 f34 00 00 00 00 | rcnt            long    0  'dl repeat count
3f6a8 f35 00 00 00 00 | rcnt2           long    0
3f6ac f36 00 00 00 00 | rcnt2a          long    0
3f6b0 f37 00 00 00 00 | roffset         long    0
3f6b4 f38 00 00 00 00 | rdl             long    0  'dl repeat line
3f6b8 f39 00 00 00 00 | dlc             long    0  'dl command
3f6bc f3a             | 
3f6bc f3a FF FF FF FF | affffffff       long    $ffffffff
3f6c0 f3b 00 00 00 00 | sprite1pointer long 0
3f6c4 f3c 00 00 00 00 | sprite1xy      long 0
3f6c8 f3d 00 00 00 00 | sprite1wh      long 0
3f6cc f3e 00 00 00 00 | sprite2pointer long 0
3f6d0 f3f 00 00 00 00 | sprite2xy      long 0
3f6d4 f40 00 00 00 00 | sprite2wh      long 0
3f6d8 f41 00 00 00 00 | sprite3pointer long 0
3f6dc f42 00 00 00 00 | sprite3xy      long 0
3f6e0 f43 00 00 00 00 | sprite3wh      long 0
3f6e4 f44 00 00 00 00 | sprite4pointer long 0
3f6e8 f45 00 00 00 00 | sprite4xy      long 0
3f6ec f46 00 00 00 00 | sprite4wh      long 0
3f6f0 f47 00 00 00 00 | sprite5pointer long 0
3f6f4 f48 00 00 00 00 | sprite5xy      long 0
3f6f8 f49 00 00 00 00 | sprite5wh      long 0
3f6fc f4a 00 00 00 00 | sprite6pointer long 0
3f700 f4b 00 00 00 00 | sprite6xy      long 0
3f704 f4c 00 00 00 00 | sprite6wh      long 0
3f708 f4d 00 00 00 00 | sprite7pointer long 0
3f70c f4e 00 00 00 00 | sprite7xy      long 0
3f710 f4f 00 00 00 00 | sprite7wh      long 0
3f714 f50 00 00 00 00 | sprite8pointer long 0
3f718 f51 00 00 00 00 | sprite8xy      long 0
3f71c f52 00 00 00 00 | sprite8wh      long 0
3f720 f53 00 00 00 00 | sprite9pointer long 0
3f724 f54 00 00 00 00 | sprite9xy      long 0
3f728 f55 00 00 00 00 | sprite9wh      long 0
3f72c f56 00 00 00 00 | sprite10pointer long 0
3f730 f57 00 00 00 00 | sprite10xy      long 0
3f734 f58 00 00 00 00 | sprite10wh      long 0
3f738 f59 00 00 00 00 | sprite11pointer long 0
3f73c f5a 00 00 00 00 | sprite11xy      long 0
3f740 f5b 00 00 00 00 | sprite11wh      long 0
3f744 f5c 00 00 00 00 | sprite12pointer long 0
3f748 f5d 00 00 00 00 | sprite12xy      long 0
3f74c f5e 00 00 00 00 | sprite12wh      long 0
3f750 f5f 00 00 00 00 | sprite13pointer long 0
3f754 f60 00 00 00 00 | sprite13xy      long 0
3f758 f61 00 00 00 00 | sprite13wh      long 0
3f75c f62 00 00 00 00 | sprite14pointer long 0
3f760 f63 00 00 00 00 | sprite14xy      long 0
3f764 f64 00 00 00 00 | sprite14wh      long 0
3f768 f65 00 00 00 00 | sprite15pointer long 0
3f76c f66 00 00 00 00 | sprite15xy      long 0
3f770 f67 00 00 00 00 | sprite15wh      long 0
3f774 f68 00 00 00 00 | sprite16pointer long 0
3f778 f69 00 00 00 00 | sprite16xy      long 0
3f77c f6a 00 00 00 00 | sprite16wh      long 0
3f780 f6b 00 00 00 00 | sprite17pointer long 0
3f784 f6c 00 00 00 00 | sprite17xy      long 0
3f788 f6d 00 00 00 00 | sprite17wh      long 0
3f78c f6e 00 00 00 00 | sprite18pointer long 0
3f790 f6f 00 00 00 00 | sprite18xy      long 0
3f794 f70 00 00 00 00 | sprite18wh      long 0
3f798 f71 00 00 00 00 | spritenum long 0
3f79c f72             | 
3f79c f72 00 00 00 00 | spriteline long 0
3f7a0 f73 84 03 00 00 | sprite_x long 900
3f7a4 f74 00 00 00 00 | sprite_y long 0
3f7a8 f75 10 00 00 00 | sprite_w long 16
3f7ac f76 40 00 00 00 | sprite_h long 64
3f7b0 f77 00 00 00 00 | l2 long 0
3f7b4 f78 00 00 00 00 | t5 long 0
3f7b8 f79 00 00 00 00 | t6 long 0
3f7bc f7a 00 00 00 00 | t7 long 0
3f7c0 f7b 00 00 00 00 | t8 long 0
3f7c4 f7c 00 00 00 00 | t9 long 0
3f7c8 f7d 00 00 00 00 | preloadaddr long 0
3f7cc f7e 00 00 00 00 | preloadlineaddr long 0
3f7d0 f7f 00 04 00 00 | a1024 long 1024
3f7d4 f80             | 
3f7d4 f80 E0 03 00 00 | aa long 992
3f7d8 f81 FF 03 00 00 | a1023 long 1023
3f7dc f82 00 10 00 00 | a4096 long 4096
3f7e0 f83             |  fit 368
3f7e0 f83             | _psram_spin2_dat_
3f7e0 f83 00 00 00 00 
      ...             
3f8d8 fc1 00 00 00 00 
3f8dc fc2 00 00 00 00 |     listdata long 0[8*8]
3f8e0 fc3             |             orgh
3f8e0                 | 
3f8e0                 | ' driver state
3f8e0     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3f8e4     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3f8e8                 | 
3f8e8                 | ' delay profile
3f8e8     07 00 00 00 
3f8ec     00 CF 7B 05 
3f8f0     80 D1 F0 08 
3f8f4     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3f8f8     80 C4 60 0F 
3f8fc     80 39 7A 12 
3f900     40 2D D9 13 
3f904     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3f908                 | 
3f908                 | ' data to be passed to driver when starting it
3f908                 | startupData
3f908     00 00 00 00 |     long    0           ' current frequency
3f90c     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3f910     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3f914     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3f918     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3f91c     28 F9 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3f920     A8 F9 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3f924     C8 F9 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3f928                 | 
3f928                 | ' data for memory
3f928                 | deviceData
3f928                 |     ' 16 bank parameters follow (16MB per bank)
3f928     00 00 00 00 
      ...             
3f960     00 00 00 00 
3f964     00 00 00 00 |     long    0[16]                               ' banks 0-15
3f968                 |     ' 16 banks of pin parameters follow
3f968     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3f96c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3f970     FF FF FF FF 
      ...             
3f9a0     FF FF FF FF 
3f9a4     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3f9a8                 | 
3f9a8                 | ' data for COG polling
3f9a8                 | qosData 
3f9a8     00 00 FF FF 
3f9ac     00 00 FF FF 
3f9b0     00 00 FF FF 
3f9b4     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3f9b8     00 00 FF FF 
3f9bc     00 00 FF FF 
3f9c0     00 00 FF FF 
3f9c4     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3f9c8                 |     
3f9c8                 | ' mailbox storage
3f9c8                 | 
3f9c8                 | mailboxes
3f9c8     00 00 00 00 
      ...             
3fa20     00 00 00 00 
3fa24     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3fa28                 | 	alignl
3fa28                 | _psram16drv_spin2_dat_
3fa28                 |                             orgh
3fa28     00 00 00 00 
      ...             
3fa40     00 00 00 00 
3fa44     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3fa48                 | 
3fa48                 | driver_start
3fa48                 |                             org
3fa48 000             | '..................................................................................................
3fa48 000             | ' Memory layout for COG RAM once operational:
3fa48 000             | '
3fa48 000             | '  COG RAM address      Usage
3fa48 000             | '  ---------------      ----
3fa48 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3fa48 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3fa48 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3fa48 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3fa48 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3fa48 000             | '  ~$198-$1F3           State and register variables
3fa48 000             | '
3fa48 000             | ' Also during driver COG startup:
3fa48 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3fa48 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3fa48 000             | '..................................................................................................
3fa48 000             |                             
3fa48 000             | ' Mailbox storage after vector initialization
3fa48 000             | 
3fa48 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3fa4c 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3fa50 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3fa54 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3fa58 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3fa5c 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3fa60 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3fa64 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3fa68 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3fa6c 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3fa70 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3fa74 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3fa78 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3fa7c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3fa80 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3fa84 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3fa88 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3fa8c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3fa90 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3fa94 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3fa98 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3fa9c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3faa0 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3faa4 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3faa8 018             | 
3faa8 018             | ' Mailbox parameter addresses per COG once patched
3faa8 018             |                             
3faa8 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3faac 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3fab0 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3fab4 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3fab8 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3fabc 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3fac0 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3fac4 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3fac8 020             | 
3fac8 020             | '..................................................................................................
3fac8 020             | ' Per COG request and state setup and service branching
3fac8 020             |         
3fac8 020             | cog0                 
3fac8 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3facc 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3fad0 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3fad4 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3fad8 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3fadc 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3fae0 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3fae4 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3fae8 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3faec 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3faf0 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3faf4 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3faf8 02c             | cog1                        
3faf8 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3fafc 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3fb00 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3fb04 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3fb08 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3fb0c 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3fb10 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3fb14 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3fb18 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3fb1c 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3fb20 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3fb24 037 33 CA 63 FD |                             execf   request-0               'jump to service
3fb28 038             | cog2                         
3fb28 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3fb2c 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3fb30 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3fb34 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3fb38 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3fb3c 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3fb40 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3fb44 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3fb48 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3fb4c 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3fb50 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3fb54 043 33 CA 63 FD |                             execf   request-0               'jump to service
3fb58 044             | cog3                        
3fb58 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3fb5c 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3fb60 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3fb64 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3fb68 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3fb6c 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3fb70 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3fb74 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3fb78 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3fb7c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3fb80 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3fb84 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3fb88 050             | cog4                        
3fb88 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3fb8c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3fb90 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3fb94 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3fb98 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3fb9c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3fba0 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3fba4 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3fba8 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3fbac 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3fbb0 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3fbb4 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3fbb8 05c             | cog5                        
3fbb8 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3fbbc 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3fbc0 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3fbc4 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3fbc8 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3fbcc 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3fbd0 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3fbd4 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3fbd8 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3fbdc 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3fbe0 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3fbe4 067 33 CA 63 FD |                             execf   request-0               'jump to service
3fbe8 068             | cog6                        
3fbe8 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3fbec 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3fbf0 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3fbf4 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3fbf8 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3fbfc 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3fc00 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3fc04 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3fc08 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3fc0c 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3fc10 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3fc14 073 33 CA 63 FD |                             execf   request-0               'jump to service
3fc18 074             | cog7                        
3fc18 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3fc1c 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3fc20 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3fc24 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3fc28 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3fc2c 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3fc30 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3fc34 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3fc38 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3fc3c 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3fc40 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3fc44 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3fc48 080             |                             fit     128
3fc48 080             | 
3fc48 080             |                             fit     128
3fc48 080             | pad                         long    0[128-$]                'align init code to $80
3fc48 080             | 
3fc48 080             | '..................................................................................................
3fc48 080             | 
3fc48 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3fc48 080             | 
3fc48 080             | init                        
3fc48 080             |                             ' get driver scratch long address in hub
3fc48 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3fc4c 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3fc50 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3fc54 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3fc58 084             |                     
3fc58 084             |                             ' read in the additional LUT RAM code
3fc58 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3fc5c 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3fc60 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3fc64 087             | 
3fc64 087             |                             ' read the startup parameters
3fc64 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3fc68 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3fc6c 089             | 
3fc6c 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3fc6c 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3fc70 08a             | 
3fc70 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3fc74 08b 01 00 00 5F 
3fc78 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3fc7c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3fc80 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3fc84 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3fc88 090             | 
3fc88 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3fc88 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3fc8c 091 01 00 00 FF 
3fc90 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3fc94 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3fc98 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3fc9c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3fca0 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3fca4 097 08 DE 47 F5 |                             or      a, #8
3fca8 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3fcac 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3fcb0 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3fcb4 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3fcb8 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3fcbc 09d 01 DE 07 F1 |                             add     a, #1
3fcc0 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3fcc4 09f             |  
3fcc4 09f             |                             ' setup device control pin states
3fcc4 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3fcc8 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3fccc 0a1 01 00 00 FF 
3fcd0 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3fcd4 0a3             | 
3fcd4 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3fcd8 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3fcdc 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3fce0 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3fce4 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3fce8 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3fcec 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3fcf0 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3fcf4 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3fcf8 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3fcfc 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3fd00 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3fd04 0af             | pinloop
3fd04 0af             |                             ' generate minimum CE high time before access
3fd04 0af A1 07 00 FF 
3fd08 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3fd0c 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3fd10 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3fd14 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3fd18 0b4 1F DE 63 FD |                             waitx   a                       'delay
3fd1c 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3fd20 0b6             | 
3fd20 0b6             |                             ' setup the COG mailboxes and addresses 
3fd20 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3fd24 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3fd28 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3fd2c 0b9             | 
3fd2c 0b9 28 2E 64 FD |                             setq    #24-1
3fd30 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3fd34 0bb             | 
3fd34 0bb             |                             ' setup the polling loop for active COGs 
3fd34 0bb 01 C2 63 FD |                             cogid   id
3fd38 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3fd3c 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3fd40 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3fd44 0bf 0A F0 07 F6 |                             mov     ptra, #10
3fd48 0c0 E1 F1 03 FA |                             mul     ptra, id
3fd4c 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3fd50 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3fd54 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3fd58 0c4 03 C2 07 FA |                             mul     id, #3
3fd5c 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3fd60 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3fd64 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3fd68 0c8 D8 01 B0 FD |                             call    #reloadcogs
3fd6c 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3fd70 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3fd74 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3fd74 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3fd78 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3fd7c 0cd 08 04 DC FC |                             rep     #2, #8
3fd80 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3fd84 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3fd88 0d0             | 
3fd88 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3fd88 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3fd88 0d0 01 C2 63 FD |                             cogid   id
3fd8c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3fd90 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3fd94 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3fd98 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3fd9c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3fda0 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3fda4 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3fda8 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3fdac 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3fdb0 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3fdb4 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3fdb8 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3fdbc 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3fdc0 0de A5 E5 03 F1 |                             add     d, const512
3fdc4 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3fdc8 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3fdcc 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3fdd0 0e2             |                             
3fdd0 0e2             |                             ' setup register values for control vector loop setup after we return
3fdd0 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3fdd4 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3fdd8 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3fddc 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3fde0 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3fde4 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3fde8 0e8 D0 C3 8F F9 |                             altd    id, #id0
3fdec 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3fdf0 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3fdf4 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3fdf8 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3fdfc 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3fe00 0ee             |  
3fe00 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3fe04 0ef 07 CA 07 F5 |                             and     request, #7
3fe08 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3fe0c 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3fe10 0f2             |                             fit     $100                    'ensure all init code fits this space
3fe10 0f2             | 
3fe10 0f2             |                             fit     $100                    'ensure all init code fits this space
3fe10 0f2             | 
3fe10 0f2 00 00 00 00 
      ...             
3fe40 0fe 00 00 00 00 
3fe44 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3fe48 100             | 
3fe48 100             | '..................................................................................................
3fe48 100             | ' Error result handling and COG notification of request completion
3fe48 100             | 
3fe48 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3fe4c 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3fe50 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3fe54 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3fe58 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3fe5c 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3fe60 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3fe64 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3fe68 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3fe6c 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3fe70 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3fe74 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3fe78 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3fe7c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3fe80 10e             | ' Poller re-starts here after a COG is serviced
3fe80 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3fe84 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3fe88 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3fe8c 111             | ' Main dynamic polling loop repeats until a request arrives
3fe8c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3fe90 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3fe94 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3fe98 114             | 
3fe98 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3fe9c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3fea0 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3fea4 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3fea8 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3feac 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3feb0 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3feb4 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3feb8 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3febc 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3fec0 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3fec4 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3fec8 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3fecc 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3fed0 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3fed4 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3fed8 124             | 
3fed8 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3fedc 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3fee0 126             |  
3fee0 126             | '..................................................................................................
3fee0 126             | ' List handler                               
3fee0 126             | 
3fee0 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3fee4 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3fee8 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3feec 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3fef0 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3fef4 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3fef8 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3fefc 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3ff00 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3ff04 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3ff08 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3ff0c 131 33 00 60 FD |                             execf   0-0                     'process the request 
3ff10 132             | 
3ff10 132             | '..................................................................................................
3ff10 132             | ' Restoring per COG state and resuming where we left off
3ff10 132             | 
3ff10 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3ff14 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3ff18 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3ff1c 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3ff20 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3ff24 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3ff28 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3ff2c 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3ff30 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3ff34 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3ff38 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3ff3c 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3ff40 13e             |                    
3ff40 13e             | '..................................................................................................
3ff40 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3ff40 13e             | 
3ff40 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3ff44 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3ff48 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3ff4c 141 D0 DF B7 F9 |                             setd    a, #id0
3ff50 142 D8 DF BF F9 |                             sets    a, #addr1
3ff54 143 FE FF FF FF 
3ff58 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3ff5c 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3ff60 146 3F DE A7 F9 |                             alti    a, #%111_111 
3ff64 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3ff68 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3ff6c 149 01 E2 63 FD |                             cogid   c
3ff70 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3ff74 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3ff78 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3ff7c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3ff80 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3ff84 14f 00 E0 03 F6 |                             mov     b, 0-0
3ff88 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3ff8c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3ff90 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3ff94 153 0C 00 90 AD |             if_z            jmp     #excluded               
3ff98 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3ff9c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3ffa0 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3ffa4 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3ffa8 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3ffac 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3ffb0 15a             | 
3ffb0 15a             | 'determine priority cogs and build instructions for the polling sequence
3ffb0 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3ffb4 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3ffb8 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3ffbc 15d             | 
3ffbc 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3ffc0 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3ffc4 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3ffc8 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3ffcc 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3ffd0 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3ffd4 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3ffd8 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3ffdc 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3ffe0 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3ffe4 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3ffe8 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3ffec 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3fff0 16a             | endprioloop
3fff0 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3fff4 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3fff8 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3fffc 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
40000 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
40004 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
40008 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
4000c 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
40010 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
40014 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
40018 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
4001c 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
40020 176             | 
40020 176             | ' populate the round robin COG polling instructions
40020 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
40024 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
40028 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
4002c 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
40030 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
40034 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
40038 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
4003c 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
40040 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
40044 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
40048 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
4004c 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
40050 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
40054 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
40058 184             | '..................................................................................................
40058 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
40058 184             | 
40058 184             | set_latency                                                 '            (a) set latency
40058 184             | get_latency                                                 '            (b) get latency
40058 184             | set_burst                                                   '            (c) set burst size of bank
40058 184             | get_burst                                                   '            (d) get burst size of bank
40058 184             |                                                             '            (e) dump state
40058 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
4005c 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
40060 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
40064 187             |                                                             ' | | | | e  account for following AUGS
40064 187 04 00 00 FF 
40068 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
4006c 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
40070 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
40074 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
40078 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
4007c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
40080 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
40084 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
40088 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
4008c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
40090 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
40094 193             | 
40094 193             | '..................................................................................................
40094 193             | ' Misc EXECF code
40094 193             | 
40094 193 33 72 63 FD | start_read_exec             execf   newburstr
40098 194 33 7C 63 FD | start_write_exec            execf   resumewrites
4009c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
400a0 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
400a4 197             | 
400a4 197             | '..................................................................................................
400a4 197             | ' Variables
400a4 197             | 
400a4 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
400a8 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
400ac 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
400b0 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
400b4 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
400b8 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
400bc 19d             | 
400bc 19d 00 00 00 80 | xfreq1          long    $80000000
400c0 19e 00 00 00 40 | xfreq2          long    $40000000
400c4 19f 03 00 00 00 | delay           long    3
400c8 1a0             | 
400c8 1a0             | lutcodeaddr                 
400c8 1a0             | startupparams
400c8 1a0             | excludedcogs                                    'careful: shared register use!
400c8 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
400cc 1a1 00 00 00 00 | flags           long    0
400d0 1a2             | mask                                            'careful: shared register use!
400d0 1a2 00 00 00 00 | resetmaskA      long    0
400d4 1a3             | limit                                           'careful: shared register use!
400d4 1a3 00 00 00 00 | resetmaskB      long    0
400d8 1a4 00 00 00 00 | datapins        long    0
400dc 1a5             | const512                                        'careful: shared register use!
400dc 1a5 00 00 00 00 | devicelist      long    0
400e0 1a6 00 00 00 00 | coglist         long    0
400e4 1a7 00 00 00 00 | mbox            long    0 
400e8 1a8             | 
400e8 1a8             | clkpin                                          'shared with code patched during init
400e8 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
400ec 1a9             | cspin                                           'shared with code patched during init
400ec 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
400f0 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
400f4 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
400f8 1ac 01 00 00 00 | clkdelay        long    1
400fc 1ad 00 00 00 00 | regdatabus      long    0
40100 1ae             | 
40100 1ae 10 00 00 00 | deviceaddr      long    $10
40104 1af             | rrcounter
40104 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
40108 1b0             | 
40108 1b0             | ' jump addresses for the per COG handlers
40108 1b0 20 00 00 00 | cog0_handler    long    cog0
4010c 1b1 2C 00 00 00 | cog1_handler    long    cog1
40110 1b2 38 00 00 00 | cog2_handler    long    cog2
40114 1b3 44 00 00 00 | cog3_handler    long    cog3
40118 1b4 50 00 00 00 | cog4_handler    long    cog4
4011c 1b5 5C 00 00 00 | cog5_handler    long    cog5
40120 1b6 68 00 00 00 | cog6_handler    long    cog6
40124 1b7 74 00 00 00 | cog7_handler    long    cog7
40128 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
4012c 1b9             | 
4012c 1b9             | ' EXECF sequences
4012c 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
40130 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
40134 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
40138 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
4013c 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
40140 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
40144 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
40148 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
40148 1c0             | 
40148 1c0             | 
40148 1c0             | ' SKIPF sequences
40148 1c0             | skiptable
40148 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
4014c 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
40150 1c2 00 00 00 00 |                 long    0                      ' read modify write long
40154 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
40158 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
4015c 1c5 00 00 00 00 | pattern2        long    0
40160 1c6 00 00 00 00 | pattern3        long    0
40164 1c7 77 02 00 00 | singlelong      long    %1001110111  
40168 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
4016c 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
40170 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
40174 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
40178 1cc             | 
40178 1cc             | ' LUT RAM address values
40178 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
4017c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
40180 1ce DB 02 00 00 | continue_write  long    continue_write_lut
40184 1cf F6 02 00 00 | noread          long    noread_lut
40188 1d0             | 
40188 1d0 00 00 00 00 | id0             long    0
4018c 1d1 01 00 00 00 | id1             long    1
40190 1d2 02 00 00 00 | id2             long    2
40194 1d3 03 00 00 00 | id3             long    3
40198 1d4 04 00 00 00 | id4             long    4
4019c 1d5 05 00 00 00 | id5             long    5
401a0 1d6 06 00 00 00 | id6             long    6
401a4 1d7 07 00 00 00 | id7             long    7
401a8 1d8             | 
401a8 1d8             | 'These next 10 request registers below are also temporarily reused during init 
401a8 1d8             | 'and COG updates and need to follow immediately after id0-id7
401a8 1d8 00 00 00 00 | addr1           long    0
401ac 1d9 00 00 00 00 | hubdata         long    0
401b0 1da 00 00 00 00 | count           long    0
401b4 1db 00 00 00 00 | addr2           long    0
401b8 1dc 00 00 00 00 | total           long    0
401bc 1dd 00 00 00 00 | offset1         long    0
401c0 1de 00 00 00 00 | offset2         long    0
401c4 1df 00 00 00 00 | link            long    0
401c8 1e0             | 
401c8 1e0             | burstwrite                                      'note shared register use during init
401c8 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
401cc 1e1 00 00 00 00 | id              long    0
401d0 1e2             | 
401d0 1e2 00 00 00 00 | header          long    0
401d4 1e3 00 00 00 00 | trailer         long    0
401d8 1e4 00 00 00 00 | cmdaddr         long    0
401dc 1e5 00 00 00 00 | request         long    0
401e0 1e6 00 00 00 00 | rrlimit         long    0
401e4 1e7 00 00 00 00 | pinconfig       long    0
401e8 1e8 00 00 00 00 | clks            long    0
401ec 1e9 00 00 00 00 | resume          long    0
401f0 1ea 00 00 00 00 | orighubsize     long    0
401f4 1eb 00 00 00 00 | wrclks          long    0
401f8 1ec             | 
401f8 1ec 00 00 00 00 | pattern         long    0
401fc 1ed 00 00 00 00 | hubscratch      long    0
40200 1ee 00 10 00 00 | val4k           long    4096
40204 1ef             | 
40204 1ef             | ' temporary general purpose regs
40204 1ef 00 00 00 00 | a               long    0
40208 1f0 00 00 00 00 | b               long    0
4020c 1f1 00 00 00 00 | c               long    0
40210 1f2 00 00 00 00 | d               long    0
40214 1f3             |                 fit     502
40214 1f3             | 
40214 1f3             |                 fit     502
40214 1f3             | 
40214 1f3             | '..................................................................................................
40214 1f3             | 
40214 1f3             |             orgh
40214                 | 
40214                 | lut_code
40214                 | 'HW init code up to 80 longs
40214                 | 
40214                 | '..................................................................................................
40214                 | ' Memory layout for LUT RAM once operational:
40214                 | '
40214                 | '  LUT RAM address      Usage
40214                 | '  ---------------      ----
40214                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
40214                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
40214                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
40214                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
40214                 | '
40214                 | ' Also during driver COG startup:
40214                 | ' $230-$24F is used for HW init setup
40214                 | ' $250-$26F is used as temporary vector storage 
40214                 | '..................................................................................................
40214                 | 
40214                 |                 org $230    
40214 230             | 
40214 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
40214 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
40218 231 24 16 60 FD |                             pollxfi
4021c 232 FF AA 2A FF 
40220 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
40224 234 28 00 B0 FD |                             call    #sendqspi
40228 235 07 F8 07 FF 
4022c 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
40230 237 28 00 B0 FD |                             call    #sendspi
40234 238 F8 07 78 FF 
40238 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
4023c 23a 1C 00 B0 FD |                             call    #sendspi
40240 23b 7F 78 78 FF 
40244 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
40248 23d 10 00 B0 FD |                             call    #sendspi 
4024c 23e 2D 00 64 FD |                             ret
40250 23f             | 
40250 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
40254 240 32 0C 64 FD |                             skipf   #%110
40258 241 9C EF 03 F6 |                             mov     pb, xsendimm
4025c 242             | 
4025c 242 10 D0 07 F6 | sendspi                     mov     clks, #16
40260 243 97 EF 03 F6 |                             mov     pb, ximm8lut
40264 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
40268 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
4026c 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
40270 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
40274 248 24 36 60 FD |                             waitxfi                         'wait for the completion
40278 249 50 48 63 FD |                             fltl    datapins                'float data bus
4027c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
40280 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
40284 24c             | 
40284 24c 00 00 00 00 
40288 24d 00 00 00 00 
4028c 24e 00 00 00 00 
40290 24f 00 00 00 00 |                 long    0[$270-32-$]
40294 250             |                 fit     $270-32  ' keep room for 32 vector longs
40294 250             |     
40294 250             |                 fit     $270-32  ' keep room for 32 vector longs
40294 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
40294 250             | rw_vect ' PSRAM jump vectors
40294 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
40298 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
4029c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
402a0 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
402a4 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
402a8 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
402ac 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
402b0 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
402b4 258             | ro_vect ' R/O PSRAM jump vectors
402b4 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
402b8 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
402bc 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
402c0 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
402c4 25c 00 01 00 00 |                 long    unsupported
402c8 25d 00 01 00 00 |                 long    unsupported
402cc 25e 00 01 00 00 |                 long    unsupported
402d0 25f 00 01 00 00 |                 long    unsupported
402d4 260             | ctrl_vect ' Control jump vectors
402d4 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
402d8 261 00 01 00 00 |                 long    unsupported
402dc 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
402e0 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
402e4 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
402e8 265 00 01 00 00 |                 long    unsupported
402ec 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
402f0 267 3E 01 00 00 |                 long    reconfig 
402f4 268             | no_vect ' Invalid bank jump vectors
402f4 268 01 01 00 00 |                 long    invalidbank
402f8 269 01 01 00 00 |                 long    invalidbank
402fc 26a 01 01 00 00 |                 long    invalidbank
40300 26b 01 01 00 00 |                 long    invalidbank
40304 26c 01 01 00 00 |                 long    invalidbank
40308 26d 01 01 00 00 |                 long    invalidbank
4030c 26e 01 01 00 00 |                 long    invalidbank
40310 26f 01 01 00 00 |                 long    invalidbank
40314 270             |                 fit     $270
40314 270             | 
40314 270             |                 fit     $270
40314 270             | '..................................................................................................
40314 270             | ' PSRAM READS
40314 270             |                                                             ' a b c d e f
40314 270             |                                                             ' B W L B R L  (a) byte read
40314 270             |                                                             ' Y O O U E O  (b) word read
40314 270             |                                                             ' T R N R S C  (c) long read
40314 270             |                                                             ' E D G S U K  (d) new burst read
40314 270             |                                                             '       T M E  (e) resumed sub-burst
40314 270             |                                                             '         E D  (f) locked sub-burst
40314 270             | 
40314 270             | 
40314 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
40318 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
4031c 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
40320 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
40324 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
40328 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
4032c 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
40330 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
40334 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
40338 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
4033c 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
40340 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
40344 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
40348 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
4034c 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
40350 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
40354 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
40358 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
4035c 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
40360 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
40364 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
40368 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
4036c 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
40370 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
40374 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
40378 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
4037c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
40380 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
40384 28c             | 
40384 28c             |                             ' fall through to read bursts
40384 28c             |                         
40384 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
40384 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
40388 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
4038c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
40390 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
40394 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
40398 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
4039c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
403a0 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
403a4 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
403a8 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
403ac 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
403b0 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
403b4 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
403b8 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
403bc 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
403c0 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
403c4 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
403c8 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
403cc 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
403d0 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
403d4 2a0 E8 D1 03 F1 |                             add     clks, clks
403d8 2a1             | readcommon
403d8 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
403dc 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
403e0 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
403e4 2a4             | 
403e4 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
403e8 2a5 69 C8 63 FD |                             rev     cmdaddr
403ec 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
403f0 2a7 61 C8 63 FD |                             mergeb  cmdaddr
403f4 2a8             | 
403f4 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
403f8 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
403fc 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
403fc 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
40400 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
40404 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
40408 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
4040c 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
4040c 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
40410 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
40414 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
40418 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
4041c 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
40420 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
40424 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
40424 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
40428 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
4042c 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
40430 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
40434 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
40438 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
4043c 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
40440 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
40444 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
40448 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
4044c 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
40450 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
40454 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
40458 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
4045c 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
4045c 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
40460 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
40464 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
40468 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
4046c 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
40470 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
40474 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
40478 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
4047c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
40480 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
40484 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
40488 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
4048c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
40490 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
40494 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
40498 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
4049c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
404a0 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
404a4 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
404a8 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
404ac 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
404b0 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
404b4 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
404b8 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
404bc 2da 10 03 90 FD |                             jmp     #writecommon
404c0 2db             | 
404c0 2db             | '..................................................................................................
404c0 2db             | ' Burst continuation testing
404c0 2db             | 
404c0 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
404c4 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
404c8 2dd             | continue_read_lut          
404c8 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
404cc 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
404d0 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
404d4 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
404d8 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
404dc 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
404e0 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
404e4 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
404e8 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
404ec 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
404f0 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
404f4 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
404f8 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
404fc 2ea             | 
404fc 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
40500 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
40504 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
40508 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
4050c 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
40510 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
40514 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
40518 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
4051c 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
40520 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
40524 2f4 2A 1C 66 0D |             _ret_           push    #poller
40528 2f5             | 
40528 2f5             | 
40528 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
4052c 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
4052c 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
40530 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
40534 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
40538 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
4053c 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
40540 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
40544 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
40548 2fd 2D 00 64 FD |                             ret                             ' | continue processing
4054c 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
40550 2ff             | '..................................................................................................
40550 2ff             | ' Completion of requests
40550 2ff             | 
40550 2ff             | complete_rw_lut             
40550 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
40554 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
40558 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
4055c 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
40560 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
40564 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
40568 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
4056c 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
40570 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
40574 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
40578 309 32 62 64 AD |             if_z            skipf   #%110001
4057c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
40580 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
40584 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
40588 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
4058c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
40590 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
40594 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
40598 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
4059c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
405a0 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
405a4 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
405a8 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
405ac 316             |                                                             ' skipcase (a) gfx copy to/from hub
405ac 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
405ac 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
405ac 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
405b0 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
405b4 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
405b8 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
405bc 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
405c0 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
405c4 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
405c8 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
405cc 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
405d0 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
405d4 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
405d8 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
405dc 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
405e0 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
405e4 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
405e8 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
405ec 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
405f0 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
405f4 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
405f8 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
405fc 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
40600 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
40604 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
40608 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
4060c 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
40610 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
40614 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
40618 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
4061c 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
40620 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
40624 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
40628 335 DF B7 03 A6 |             if_z            mov     addr2, link
4062c 336 34 FF 9F AD |             if_z            jmp     #checknext
40630 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
40634 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
40638 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
4063c 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
40640 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
40644 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
40648 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
4064c 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
40650 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
40654 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
40658 341             | 
40658 341             | '..................................................................................................
40658 341             | ' PSRAM WRITES
40658 341             |                                                             '  a b c d e f g h
40658 341             | 
40658 341             |                                                             '  B W L F B R L L (a) byte write(s)
40658 341             |                                                             '  Y O O I U E O O (b) word write(s)
40658 341             |                                                             '  T R N L R S C C (c) long write(s)
40658 341             |                                                             '  E D G L S U K K (d) resumed fill
40658 341             |                                                             '          T M E E (e) new burst write
40658 341             |                                                             '            E D D (f) resumed burst
40658 341             |                                                             '              F B (g) locked fill
40658 341             |                                                             '              I U (h) locked burst write
40658 341             |                                                             '              L R 
40658 341             |                                                             '              L S 
40658 341             |                                                             '                T 
40658 341             | 
40658 341             | w_single                   
40658 341             | w_fill_cont           
40658 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
4065c 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
40660 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
40664 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
40668 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
4066c 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
40670 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
40674 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
40678 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
4067c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
40680 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
40684 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
40688 34d             |                ' disable call to r_resume_burst for single longs when z=0
40688 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
4068c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
40690 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
40694 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
40698 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
4069c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
406a0 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
406a4 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
406a8 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
406ac 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
406b0 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
406b4 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
406b8 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
406bc 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
406c0 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
406c4 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
406c8 35d             |         
406c8 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
406c8 35d             |             '
406c8 35d             |             '  At least one of these 3 optional components will be sent
406c8 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
406c8 35d             |             '     body - N x full longs of data
406c8 35d             |             '     trailer - last partial long of data
406c8 35d             |             '
406c8 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
406c8 35d             |             '
406c8 35d             |             'Case    Type                           Sends
406c8 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
406c8 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
406c8 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
406c8 35d             |             ' 4)     Multiple long fill             body only
406c8 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
406c8 35d             | 
406c8 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
406c8 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
406cc 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
406d0 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
406d4 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
406d8 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
406dc 362 13 8C 07 F6 |                             mov     pattern3, #%10011
406e0 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
406e4 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
406e8 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
406ec 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
406f0 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
406f4 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
406f8 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
406fc 36a             |                             
406fc 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
40700 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
40704 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
40708 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
4070c 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
40710 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
40714 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
40718 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
4071c 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
40720 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
40724 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
40728 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
4072c 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
40730 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
40734 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
40738 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
4073c 37a             | 
4073c 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
40740 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
40744 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
40748 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
4074c 37e             |                  
4074c 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
40750 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
40754 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
40758 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
4075c 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
40760 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
40764 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
40768 385             | 
40768 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
4076c 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
40770 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
40774 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
40778 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
4077c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
40780 38b             | 
40780 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
40780 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
40784 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
40788 38d 2A B0 63 FD |                             push    addr1                   'save address
4078c 38e             | 
4078c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
4078c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
40790 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
40794 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
40798 391             |             
40798 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
4079c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
407a0 393 2B B0 63 FD |                             pop     addr1                   'restore address
407a4 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
407a8 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
407ac 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
407b0 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
407b4 398             | 
407b4 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
407b8 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
407bc 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
407c0 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
407c4 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
407c8 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
407cc 39e             | 
407cc 39e             |                             'trailer is done
407cc 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
407d0 39f             | 
407d0 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
407d4 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
407d8 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
407dc 3a2             | 
407dc 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
407e0 3a3 69 C8 63 FD |                             rev     cmdaddr                 
407e4 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
407e8 3a5 61 C8 63 FD |                             mergeb  cmdaddr
407ec 3a6             |                             
407ec 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
407f0 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
407f4 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
407f8 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
407fc 3aa             |                                                          
407fc 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
40800 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
40804 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
40808 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
4080c 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
40810 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
40814 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
40818 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
4081c 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
40820 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
40824 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
40828 3b5             |  
40828 3b5 59 52 63 FD |                             drvh    cspin
4082c 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
40830 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
40834 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
40838 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
4083c 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
40840 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
40844 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
40848 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
4084c 3be EA E5 03 F6 |                             mov     d, orighubsize
40850 3bf EF E5 63 F0 |                             shl     d, a
40854 3c0 F2 E3 83 F1 |                             sub     c, d
40858 3c1 DD E3 03 F1 |                             add     c, offset1
4085c 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
40860 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
40864 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
40868 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
4086c 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
40870 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
40874 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
40878 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
4087c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
40880 3cb BB D3 03 F6 |                             mov     resume, restorefill
40884 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
40888 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
4088c 3ce 6C FC BF CD |             if_c            call    #yield
40890 3cf 2D 00 64 FD |                             ret
40894 3d0             |                            
40894 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
40894 3d0             |                       '     rczl    pa                      'rotate left into address offset
40894 3d0             |                       '     rczl    c wcz                   'restore count and flags
40894 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
40898 3d1 02 EC 67 F0 |                             shl     pa, #2
4089c 3d2 28 06 64 AD |             if_z            setq    #3
408a0 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
408a4 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
408a8 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
408ac 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
408b0 3d7             | 
408b0 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
408b4 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
408b8 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
408bc 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
408c0 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
408c4 3dc             |                 fit 1024-32
408c4 3dc             |         
408c4 3dc             | 
408c4 3dc             | '..................................................................................................
408c4 3dc             | 
408c4 3dc             |                 fit 1024-32
408c4 3dc 00 00 00 00 
408c8 3dd 00 00 00 00 
408cc 3de 00 00 00 00 
408d0 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
408d4 3e0             |                 org 1024-32
408d4 000             | 
408d4 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
408d4 000 00 00 00 00 |                 long $0000
408d8 001 11 11 00 00 |                 long $1111
408dc 002 22 22 00 00 |                 long $2222
408e0 003 33 33 00 00 |                 long $3333
408e4 004 44 44 00 00 |                 long $4444
408e8 005 55 55 00 00 |                 long $5555
408ec 006 66 66 00 00 |                 long $6666
408f0 007 77 77 00 00 |                 long $7777
408f4 008 88 88 00 00 |                 long $8888
408f8 009 99 99 00 00 |                 long $9999
408fc 00a AA AA 00 00 |                 long $aaaa
40900 00b BB BB 00 00 |                 long $bbbb
40904 00c CC CC 00 00 |                 long $cccc
40908 00d DD DD 00 00 |                 long $dddd
4090c 00e EE EE 00 00 |                 long $eeee
40910 00f FF FF 00 00 |                 long $ffff
40914 010             | 
40914 010             | 'masks
40914 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
40918 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
4091c 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
40920 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
40924 014             | 
40924 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
40928 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
4092c 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
40930 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
40934 018             | 
40934 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
40938 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
4093c 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
40940 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
40944 01c             | 
40944 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
40948 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
4094c 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
40950 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
40954 020             |         fit 1024
40954 020             | 
40954 020             |         fit 1024
40954 020             | 
40954 020             | '--------------------------------------------------------------------------------------------------
40954 020             |         orgh
40954                 | 
40954                 | gfxexpansion
40954                 |                             'simple line drawing graphics expansion of memory driver
40954                 |                             'jmp     #donerepeats                'just return for now
40954                 | 
40954     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
40958     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
4095c     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
40960     DD E1 03 F6 |                             mov     b, offset1              'get error term
40964     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
40968     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
4096c     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
40970     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
40974     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
40978     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
4097c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
40980     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
40984     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
40988     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
4098c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
40990     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
40994     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
40998     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
4099c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
409a0     DC E5 33 F9 |                             getword d, total, #0            'get line width
409a4     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
409a8     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
409ac     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
409b0     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
409b4     C3 03 80 FD |                             jmp     #readmask               'continue filling
409b8                 | 	alignl
409b8                 | _usbnew_spin2_dat_
409b8                 |                 org     $000
409b8 000             | 
409b8 000             | usb_host_start
409b8 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
409bc 001             | 
409bc 001 03 00 00 FF 
409c0 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
409c4 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
409c8 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
409cc 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
409d0 006 29 72 63 FD |                 setq2   htmp
409d4 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
409d8 008             | 
409d8 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
409dc 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
409e0 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
409e4 00b             | 
409e4 00b             | '------------------------------------------------------------------------------
409e4 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
409e4 00b             | ' special because the receiving function must not respond with either STALL or
409e4 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
409e4 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
409e4 00b             | ' corrupt packet, it must ignore the transaction
409e4 00b             | '------------------------------------------------------------------------------
409e4 00b             | ' On entry:
409e4 00b             | '   PTRA - start address of the SETUP data struct.
409e4 00b             | ' On exit:
409e4 00b             | '   retval - PID_ACK on success, otherwise error code.
409e4 00b             | '------------------------------------------------------------------------------
409e4 00b             | txn_setup
409e4 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
409e8 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
409ec 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
409f0 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
409f4 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
409f8 010             | .setup
409f8 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
409fc 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40a00 012 2D 00 64 AD |         if_z    ret
40a04 013 7C 0B B0 FD |                 call    #retry_wait
40a08 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40a0c 015 2D 00 64 AD |         if_z    ret
40a10 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
40a14 017 E0 FF 9F FD |                 jmp     #.setup
40a18 018             | 
40a18 018             | '------------------------------------------------------------------------------
40a18 018             | ' IN/INTERRUPT transaction.
40a18 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
40a18 018             | '------------------------------------------------------------------------------
40a18 018             | ' On entry:
40a18 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
40a18 018             | '     CRC(b19..23).
40a18 018             | ' On exit:
40a18 018             | '------------------------------------------------------------------------------
40a18 018             | txn_in
40a18 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
40a1c 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
40a20 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
40a24 01b             | 
40a24 01b             |                 ' Fall through to urx_packet
40a24 01b             | 
40a24 01b             | '------------------------------------------------------------------------------
40a24 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
40a24 01b             | ' received are handshakes and IN DATAx.
40a24 01b             | '------------------------------------------------------------------------------
40a24 01b             | ' On entry:
40a24 01b             | ' On exit:
40a24 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
40a24 01b             | '     returned.
40a24 01b             | '------------------------------------------------------------------------------
40a24 01b             | urx_packet
40a24 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
40a28 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
40a2c 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
40a30 01e 1A 94 63 FD |                 getct   hct2
40a34 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
40a38 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
40a3c 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
40a40 022             | .wait_sop
40a40 022 22 A7 8A FA |                 rdpin   urx, dm
40a44 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
40a48 024 08 00 90 CD |         if_c    jmp     #.get_pid
40a4c 025 FC 25 CC FB |                 jnct2   #.wait_sop
40a50 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
40a54 027             | .get_pid
40a54 027 28 02 B0 FD |                 call    #urx_next
40a58 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
40a5c 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
40a60 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
40a64 02b             | .chk_pid
40a64 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40a68 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
40a6c 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
40a70 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
40a74 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
40a78 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
40a7c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
40a80 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
40a84 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
40a88 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
40a8c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
40a90 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
40a94 037             | .ack_resend
40a94 037 22 A7 82 FA |                 rqpin   urx, dm
40a98 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
40a9c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
40aa0 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
40aa4 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
40aa8 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
40aac 03d             | .chk_eop
40aac 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
40ab0 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
40ab4 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
40ab8 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
40abc 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
40ac0 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
40ac4 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
40ac8 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
40acc 045 2D 00 64 FD |                 ret
40ad0 046             | .idle
40ad0 046 22 A7 82 FA |                 rqpin   urx, dm
40ad4 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
40ad8 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
40adc 049 2D 00 64 FD |                 ret
40ae0 04a             | 
40ae0 04a             | '------------------------------------------------------------------------------
40ae0 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
40ae0 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
40ae0 04a             | ' if one is required.
40ae0 04a             | '------------------------------------------------------------------------------
40ae0 04a             | ' On entry:
40ae0 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
40ae0 04a             | ' On exit:
40ae0 04a             | '------------------------------------------------------------------------------
40ae0 04a             | utx_token
40ae0 04a 22 A7 82 FA |                 rqpin   urx, dm
40ae4 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
40ae8 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
40aec 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
40af0 04e 34 0D B0 CD |         if_c    call    #utx_pre
40af4 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
40af8 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
40afc 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
40b00 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
40b04 053             | .next_byte
40b04 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
40b08 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
40b0c 055             | .wait
40b0c 055 40 46 72 FD |                 testp   dp                      wc
40b10 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
40b14 057 23 03 08 FC |                 akpin   dp
40b18 058 22 A5 22 FC |                 wypin   utx, dm
40b1c 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
40b20 05a             | 
40b20 05a             | '------------------------------------------------------------------------------
40b20 05a             | ' SETUP/OUT/INTERRUPT transaction.
40b20 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
40b20 05a             | '------------------------------------------------------------------------------
40b20 05a             | ' On entry:
40b20 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
40b20 05a             | '     CRC(b19..23).
40b20 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
40b20 05a             | '   pkt_data - count of DATAx payload bytes to send.
40b20 05a             | ' On exit:
40b20 05a             | '------------------------------------------------------------------------------
40b20 05a             | txn_out
40b20 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
40b24 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
40b28 05c 00 00 C0 FF 
40b2c 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
40b30 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
40b34 05f             | 
40b34 05f             |                 ' Fall through to utx_data
40b34 05f             | 
40b34 05f             | '------------------------------------------------------------------------------
40b34 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
40b34 05f             | ' calculated while the data byte is being shifted out. Since data stage
40b34 05f             | ' success/fail is not determined until the status stage of the transaction,
40b34 05f             | ' this routine is only concerned about the current DATAx packet.
40b34 05f             | '------------------------------------------------------------------------------
40b34 05f             | ' On entry:
40b34 05f             | '   PTRA - hub start address of the data to read.
40b34 05f             | '   pkt_cnt - data payload size.
40b34 05f             | ' On exit:
40b34 05f             | '------------------------------------------------------------------------------
40b34 05f             | utx_data
40b34 05f 22 A7 82 FA |                 rqpin   urx, dm
40b38 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
40b3c 061 F4 FF 9F CD |         if_c    jmp     #utx_data
40b40 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
40b44 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
40b48 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
40b4c 065 D8 0C B0 CD |         if_c    call    #utx_pre
40b50 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
40b54 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
40b58 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
40b5c 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
40b60 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
40b64 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
40b68 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
40b6c 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
40b70 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
40b74 06f             | .read_byte
40b74 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
40b78 070 F0 00 B0 FD |                 call    #utx_byte
40b7c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
40b80 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
40b84 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
40b88 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
40b8c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
40b90 076             | .send_crc
40b90 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
40b94 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
40b98 078 D0 00 B0 FD |                 call    #utx_byte
40b9c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
40ba0 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
40ba4 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
40ba8 07c             | 
40ba8 07c             | '------------------------------------------------------------------------------
40ba8 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
40ba8 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
40ba8 07c             | ' expects that the packet includes at least the CRC word.
40ba8 07c             | '
40ba8 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
40ba8 07c             | ' was requested, which makes it difficult to determine where the data stops
40ba8 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
40ba8 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
40ba8 07c             | ' USB-16 expected residual value of 0xB001.
40ba8 07c             | '
40ba8 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
40ba8 07c             | ' so the caller can verify IN success before writing the data to its final
40ba8 07c             | ' destination.
40ba8 07c             | '------------------------------------------------------------------------------
40ba8 07c             | ' On entry:
40ba8 07c             | '   pkt_data - max byte count expected to be in the packet.
40ba8 07c             | '   newb_flg - signals new byte ready when toggled.
40ba8 07c             | ' On exit:
40ba8 07c             | '   pkt_cnt - actual number of bytes read.
40ba8 07c             | '------------------------------------------------------------------------------
40ba8 07c             | urx_data
40ba8 07c F7 77 03 F6 |                 mov     htmp2, pb
40bac 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
40bb0 07e 00 00 C0 FF 
40bb4 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
40bb8 080 BB EF 03 F6 |                 mov     pb, htmp2
40bbc 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
40bc0 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
40bc4 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
40bc8 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
40bcc 085             | .wait_byte
40bcc 085             | ' In-line rx for max speed
40bcc 085 22 A7 82 FA |                 rqpin   urx, dm
40bd0 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
40bd4 087 53 A5 02 F5 |                 and     utx, urx
40bd8 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
40bdc 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
40be0 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
40be4 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
40be8 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
40bec 08d DC FF 9F FD |                 jmp     #.wait_byte
40bf0 08e             | .get_byte
40bf0 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
40bf4 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
40bf8 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
40bfc 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
40c00 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
40c04 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
40c08 094             | .end_crc
40c08 094 01 B8 06 F1 |                 add     pkt_cnt, #1
40c0c 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
40c10 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
40c14 097 2D 00 64 1D |         if_a    ret
40c18 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
40c18 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
40c18 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
40c18 098             | ' to miss it, so cheat a bit and look for SOP clear here.
40c18 098 22 A7 82 FA |                 rqpin   urx, dm
40c1c 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
40c20 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
40c24 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
40c24 09b             | .chk_crc
40c24 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
40c28 09c 58 00 00 FF 
40c2c 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
40c30 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
40c34 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
40c38 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
40c3c 0a1 34 09 B0 FD |                 call    #poll_waitx
40c40 0a2             | 
40c40 0a2             |                 ' Fall through to utx_handshake
40c40 0a2             | 
40c40 0a2             | '------------------------------------------------------------------------------
40c40 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
40c40 0a2             | ' the appropriate IP delay has been inserted.
40c40 0a2             | '------------------------------------------------------------------------------
40c40 0a2             | ' On entry:
40c40 0a2             | '   retval - handshake PID to send.
40c40 0a2             | ' On exit:
40c40 0a2             | '   retval unchanged.
40c40 0a2             | '------------------------------------------------------------------------------
40c40 0a2             | utx_handshake
40c40 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
40c44 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
40c48 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
40c4c 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
40c50 0a6 5F A5 02 F6 |                 mov     utx, retval
40c54 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
40c58 0a8             | .idle
40c58 0a8 22 A7 82 FA |                 rqpin   urx, dm
40c5c 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
40c60 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
40c64 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
40c68 0ac 08 09 90 FD |                 jmp     #poll_waitx
40c6c 0ad             | 
40c6c 0ad             | '------------------------------------------------------------------------------
40c6c 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
40c6c 0ad             | '------------------------------------------------------------------------------
40c6c 0ad             | ' On entry:
40c6c 0ad             | '   utx - byte to transmit.
40c6c 0ad             | ' On exit:
40c6c 0ad             | '------------------------------------------------------------------------------
40c6c 0ad             | utx_byte
40c6c 0ad 40 46 72 FD |                 testp   dp                      wc
40c70 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
40c74 0af 23 03 08 FC |                 akpin   dp
40c78 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
40c7c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
40c80 0b2             | 
40c80 0b2             | '------------------------------------------------------------------------------
40c80 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
40c80 0b2             | '------------------------------------------------------------------------------
40c80 0b2             | ' On entry:
40c80 0b2             | ' On exit:
40c80 0b2             | '   retval - the byte read.
40c80 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
40c80 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
40c80 0b2             | '     received.
40c80 0b2             | '------------------------------------------------------------------------------
40c80 0b2             | urx_next
40c80 0b2 22 A7 8A FA |                 rdpin   urx, dm
40c84 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
40c88 0b4 53 A5 02 F5 |                 and     utx, urx
40c8c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
40c90 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
40c94 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
40c98 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
40c9c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
40ca0 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
40ca4 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
40ca8 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
40cac 0bd 2D 00 64 FD |                 ret
40cb0 0be             | 
40cb0 0be             | '------------------------------------------------------------------------------
40cb0 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
40cb0 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
40cb0 0be             | ' length, and the PID is not included in the CRC calculation:
40cb0 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
40cb0 0be             | '  CRC5  ENDP ADDRESS PID
40cb0 0be             | ' %00000_1111_1111111_xxxxxxxx
40cb0 0be             | '------------------------------------------------------------------------------
40cb0 0be             | ' On entry:
40cb0 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
40cb0 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
40cb0 0be             | ' On exit:
40cb0 0be             | '   ep_addr_pid - CRC value appended to the packet.
40cb0 0be             | '------------------------------------------------------------------------------
40cb0 0be             | calc_crc5
40cb0 0be FF 03 00 FF 
40cb4 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
40cb8 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
40cbc 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
40cc0 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
40cc4 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
40cc8 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
40ccc 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
40cd0 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
40cd4 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
40cd8 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
40cdc 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
40ce0 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
40ce4 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
40ce8 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
40cec 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
40cf0 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
40cf4 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
40cf8 0d0             | 
40cf8 0d0             | '------------------------------------------------------------------------------
40cf8 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
40cf8 0d0             | '------------------------------------------------------------------------------
40cf8 0d0             | isr1_fsframe
40cf8 0d0 1A 92 62 FD |                 getct   iframe_ct_base
40cfc 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40d00 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
40d04 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
40d08 0d4             | .wait
40d08 0d4 40 46 72 FD |                 testp   dp                      wc
40d0c 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
40d10 0d6 23 03 08 FC |                 akpin   dp
40d14 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
40d18 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
40d1c 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
40d20 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
40d24 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
40d28 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
40d2c 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
40d30 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
40d34 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
40d38 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
40d3c 0e1 2C FF BF FD |                 call    #utx_byte
40d40 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
40d44 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
40d48 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
40d4c 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
40d50 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
40d54 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
40d58 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
40d5c 0e9 5B A5 42 F5 |                 or      utx, icrc
40d60 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
40d64 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
40d68 0ec 20 00 90 FD |                 jmp     #isr1_wait
40d6c 0ed             | isr1_lsframe
40d6c 0ed 1A 92 62 FD |                 getct   iframe_ct_base
40d70 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40d74 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
40d78 0f0             | .wait
40d78 0f0 40 46 72 FD |                 testp   dp                      wc
40d7c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
40d80 0f2 23 03 08 FC |                 akpin   dp
40d84 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
40d88 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
40d8c 0f5             | isr1_wait
40d8c 0f5 22 A5 82 FA |                 rqpin   utx, dm
40d90 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
40d94 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
40d98 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
40d9c 0f9 03 00 00 FF 
40da0 0fa FF B3 06 F5 |                 and     frame, ##$7ff
40da4 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
40da8 0fc F5 FF 3B FB |                 reti1
40dac 0fd             | 
40dac 0fd             | '------------------------------------------------------------------------------
40dac 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
40dac 0fd             | ' transaction will complete before the next frame is triggered.
40dac 0fd             | '------------------------------------------------------------------------------
40dac 0fd             | ' On entry:
40dac 0fd             | ' On exit:
40dac 0fd             | '------------------------------------------------------------------------------
40dac 0fd             | wait_txn_ok
40dac 0fd 1A 76 63 FD |                 getct   htmp2
40db0 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
40db4 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
40db8 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
40dbc 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
40dc0 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
40dc4 103 2D 00 64 FD |                 ret
40dc8 104             | 
40dc8 104             | '------------------------------------------------------------------------------
40dc8 104             | ' A device connection was detected, or a bus reset was requested by the USB
40dc8 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
40dc8 104             | ' and perform a reset sequence prior to device enumeration.
40dc8 104             | '------------------------------------------------------------------------------
40dc8 104             | dev_reset
40dc8 104 22 A7 82 FA |                 rqpin   urx, dm
40dcc 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
40dd0 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
40dd4 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
40dd8 108             | reset
40dd8 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
40ddc 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
40de0 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
40de4 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
40de8 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
40dec 10d 1A 92 62 FD |                 getct   iframe_ct_base
40df0 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40df4 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
40df8 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
40dfc 111 24 72 07 F1 |                 add     htmp, #36
40e00 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
40e04 113             | .framewait
40e04 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
40e08 114 F8 FF 9F CD |         if_b    jmp     #.framewait
40e0c 115 2D 00 64 FD |                 ret
40e10 116             | 
40e10 116             | '------------------------------------------------------------------------------
40e10 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
40e10 116             | '------------------------------------------------------------------------------
40e10 116             | ' On entry:
40e10 116             | '   PTRA - source address.
40e10 116             | '   PB - destination address.
40e10 116             | '   hr0 - length of copy, in bytes.
40e10 116             | ' On exit:
40e10 116             | '------------------------------------------------------------------------------
40e10 116             | hmemcpy
40e10 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
40e14 117 F7 73 43 FC |                 wrbyte  htmp, pb
40e18 118 01 EE 07 F1 |                 add     pb, #1
40e1c 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
40e20 11a             | 
40e20 11a             | '------------------------------------------------------------------------------
40e20 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
40e20 11a             | ' loop until the errant device is disconnected.
40e20 11a             | '------------------------------------------------------------------------------
40e20 11a             | ' On entry:
40e20 11a             | ' On exit:
40e20 11a             | '------------------------------------------------------------------------------
40e20 11a             | host_error
40e20 11a             |           if ERROR_LED >= 0
40e20 11a             |           end
40e20 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
40e24 11b             | 
40e24 11b             | '------------------------------------------------------------------------------
40e24 11b             | ' Get HID descriptor buffer for current port
40e24 11b             | '------------------------------------------------------------------------------
40e24 11b             | ' On entry:
40e24 11b             | ' On exit:
40e24 11b             | '   PB - HID descriptor buffer pointer
40e24 11b             | '------------------------------------------------------------------------------
40e24 11b             | get_hid_descr_buffer
40e24 11b 2D EF 03 F6 |                 mov     pb, hdev_port
40e28 11c 01 EE E7 F2 |                 cmpsub  pb, #1
40e2c 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
40e30 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
40e34 11f             | 
40e34 11f             | 
40e34 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
40e38 120             | 
40e38 120             | ' USB commands and error codes
40e38 120 00 00 00 00 | cmd_data        long    0
40e3c 121 00 00 00 00 | usb_err_code    long    ERR_NONE
40e40 122             | 
40e40 122             | ' Parameters block assigned at cog startup
40e40 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
40e44 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
40e48 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
40e4c 125             | if ACTIVITY_LED >= 0
40e4c 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
40e4c 125             | end
40e4c 125             | if ERROR_LED >= 0
40e4c 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
40e4c 125             | end
40e4c 125 00 00 00 00 | hid_descr_p     long    0
40e50 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
40e50 126             | 'hkbd_report_p   long    0
40e50 126 00 00 00 00 | hub_descr_p     long    0
40e54 127 00 00 00 00 | urx_buff_p      long    0
40e58 128 00 00 00 00 | dev_desc_buff_p long    0
40e5c 129 00 00 00 00 | con_desc_buff_p long    0
40e60 12a 00 00 00 00 | cache_start_p   long    0
40e64 12b 00 00 00 00 | cache_end_p     long    0
40e68 12c             | if EMUPAD_MAX_PLAYER > 0
40e68 12c             | emupad_out_ptr  long    0
40e68 12c             | end
40e68 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
40e6c 12d             | 
40e6c 12d             | hdev_init_start
40e6c 12d             | hdev_port       res     1
40e6c 12d             | hdev_port       res     1
40e6c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
40e6c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
40e6c 12d             | kbm_next_datax  res     1
40e6c 12d             | kbm_next_datax  res     1
40e6c 12d             | hub_intf_num    res     1
40e6c 12d             | hub_intf_num    res     1
40e6c 12d             | hub_next_datax  res     1
40e6c 12d             | hub_next_datax  res     1
40e6c 12d             | hub_status_chg  res     1
40e6c 12d             | hub_status_chg  res     1
40e6c 12d             | hub_port_status res     1
40e6c 12d             | hub_port_status res     1
40e6c 12d             | if HAVE_MOUSE
40e6c 12d             | ms_intf_num     res     1
40e6c 12d             | ms_intf_num     res     1
40e6c 12d             | ms_in_max_pkt   res     1
40e6c 12d             | ms_in_max_pkt   res     1
40e6c 12d             | end
40e6c 12d             | kb_intf_num     res     1
40e6c 12d             | kb_intf_num     res     1
40e6c 12d             | kb_interval     res     1
40e6c 12d             | kb_interval     res     1
40e6c 12d             | kb_in_max_pkt   res     1
40e6c 12d             | kb_in_max_pkt   res     1
40e6c 12d             | kb_max_index    res     1
40e6c 12d             | kb_max_index    res     1
40e6c 12d             | kb_led_states   res     1
40e6c 12d             | kb_led_states   res     1
40e6c 12d             | gp_intf_num     res     1
40e6c 12d             | gp_intf_num     res     1
40e6c 12d             | gp_interval     res     1
40e6c 12d             | gp_interval     res     1
40e6c 12d             | gp_max_index    res     1
40e6c 12d             | gp_max_index    res     1
40e6c 12d             | gp_descr_len    res     1+MAX_DEVICES
40e6c 12d             | gp_descr_len    res     1+MAX_DEVICES
40e6c 12d             | hdev_init_end
40e6c 12d             | 
40e6c 12d             | ' Initialized at cog startup:
40e6c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
40e6c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
40e6c 12d             | iframe_ct_new   res     1
40e6c 12d             | iframe_ct_new   res     1
40e6c 12d             | iframe_ct_base  res     1
40e6c 12d             | iframe_ct_base  res     1
40e6c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
40e6c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
40e6c 12d             | 
40e6c 12d             | ' This register block is reset to zero when a USB device connects
40e6c 12d             | hreg_init_start
40e6c 12d             | hstatus         res     1         ' Host status flags
40e6c 12d             | hstatus         res     1         ' Host status flags
40e6c 12d             | hctwait         res     1         ' Poll-based wait clocks
40e6c 12d             | hctwait         res     1         ' Poll-based wait clocks
40e6c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
40e6c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
40e6c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
40e6c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
40e6c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
40e6c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
40e6c 12d             | xfer_retry      res     1         ' Control transfer retry count
40e6c 12d             | xfer_retry      res     1         ' Control transfer retry count
40e6c 12d             | retry           res     1         ' Transaction retry count
40e6c 12d             | retry           res     1         ' Transaction retry count
40e6c 12d             | utx             res     1         ' Byte to transmit on USB
40e6c 12d             | utx             res     1         ' Byte to transmit on USB
40e6c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
40e6c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
40e6c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
40e6c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
40e6c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
40e6c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
40e6c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
40e6c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
40e6c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
40e6c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
40e6c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
40e6c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
40e6c 12d             | frame           res     1         ' USB 1ms frame counter value
40e6c 12d             | frame           res     1         ' USB 1ms frame counter value
40e6c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
40e6c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
40e6c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
40e6c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
40e6c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
40e6c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
40e6c 12d             | crc             res     1         ' Used for CRC16 calculation
40e6c 12d             | crc             res     1         ' Used for CRC16 calculation
40e6c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
40e6c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
40e6c 12d             | retval          res     1         ' Global success/fail return parameter
40e6c 12d             | retval          res     1         ' Global success/fail return parameter
40e6c 12d             | context_retval  res     1         ' Operation contextual return parameter
40e6c 12d             | context_retval  res     1         ' Operation contextual return parameter
40e6c 12d             | ' Device stuff
40e6c 12d             | hdev_id         res     1+MAX_DEVICES
40e6c 12d             | hdev_id         res     1+MAX_DEVICES
40e6c 12d             | hdev_bcd        res     1
40e6c 12d             | hdev_bcd        res     1
40e6c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
40e6c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
40e6c 12d             | ' Keyboard/mouse stuff
40e6c 12d             | hctrl_ep_addr   res     1
40e6c 12d             | hctrl_ep_addr   res     1
40e6c 12d             | hctrl_max_pkt   res     1
40e6c 12d             | hctrl_max_pkt   res     1
40e6c 12d             | hconfig_base    res     1
40e6c 12d             | hconfig_base    res     1
40e6c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
40e6c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
40e6c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
40e6c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
40e6c 12d             | hdev_class      res     1
40e6c 12d             | hdev_class      res     1
40e6c 12d             | hdev_subclass   res     1
40e6c 12d             | hdev_subclass   res     1
40e6c 12d             | hdev_protocol   res     1
40e6c 12d             | hdev_protocol   res     1
40e6c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
40e6c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
40e6c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
40e6c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
40e6c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
40e6c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
40e6c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
40e6c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
40e6c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
40e6c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
40e6c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
40e6c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
40e6c 12d             | if HAVE_MOUSE
40e6c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
40e6c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
40e6c 12d             | end
40e6c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
40e6c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
40e6c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
40e6c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
40e6c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
40e6c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
40e6c 12d             | hdev_out_addr   res     1
40e6c 12d             | hdev_out_addr   res     1
40e6c 12d             | 
40e6c 12d             | if EMUPAD_MAX_PLAYER > 0
40e6c 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
40e6c 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
40e6c 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
40e6c 12d             | end
40e6c 12d             | 
40e6c 12d             | hreg_init_end
40e6c 12d             | 
40e6c 12d             | hidr_start
40e6c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
40e6c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
40e6c 12d             | hidr_flags      res     1
40e6c 12d             | hidr_flags      res     1
40e6c 12d             | hidr_axis       res     4
40e6c 12d             | hidr_axis       res     4
40e6c 12d             | hidr_buttons    res     1
40e6c 12d             | hidr_buttons    res     1
40e6c 12d             | hidr_hats       res     1
40e6c 12d             | hidr_hats       res     1
40e6c 12d             | '' Above are actually useful values, 6 longs
40e6c 12d             | hidr_type       res     1
40e6c 12d             | hidr_type       res     1
40e6c 12d             | hidr_id         res     1
40e6c 12d             | hidr_id         res     1
40e6c 12d             | hidr_offset     res     1
40e6c 12d             | hidr_offset     res     1
40e6c 12d             | hidr_usage_idx  res     1
40e6c 12d             | hidr_usage_idx  res     1
40e6c 12d             | ' below need to be push/pop'd
40e6c 12d             | hidr_state      res     1
40e6c 12d             | hidr_state      res     1
40e6c 12d             | hidr_size       res     1
40e6c 12d             | hidr_size       res     1
40e6c 12d             | hidr_count      res     1
40e6c 12d             | hidr_count      res     1
40e6c 12d             | hidr_lminmax    res     1
40e6c 12d             | hidr_lminmax    res     1
40e6c 12d             | hidr_pminmax    res     1
40e6c 12d             | hidr_pminmax    res     1
40e6c 12d             | hidr_end
40e6c 12d             | 
40e6c 12d             | ' Variables dependent on the system freqency
40e6c 12d             | _var_64_lower_  res     1
40e6c 12d             | _var_64_lower_  res     1
40e6c 12d             | _var_64_upper_  res     1
40e6c 12d             | _var_64_upper_  res     1
40e6c 12d             | _12Mbps_        res     1
40e6c 12d             | _12Mbps_        res     1
40e6c 12d             | _1_5Mbps_       res     1
40e6c 12d             | _1_5Mbps_       res     1
40e6c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
40e6c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
40e6c 12d             | _1us_           res     1         ' 1us
40e6c 12d             | _1us_           res     1         ' 1us
40e6c 12d             | _10us_          res     1         ' 10us
40e6c 12d             | _10us_          res     1         ' 10us
40e6c 12d             | _33us_          res     1         ' 33us
40e6c 12d             | _33us_          res     1         ' 33us
40e6c 12d             | _txn_err_       res     1         ' 250us
40e6c 12d             | _txn_err_       res     1         ' 250us
40e6c 12d             | _500us_         res     1         ' 500us
40e6c 12d             | _500us_         res     1         ' 500us
40e6c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
40e6c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
40e6c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
40e6c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
40e6c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
40e6c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
40e6c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
40e6c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
40e6c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
40e6c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
40e6c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
40e6c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
40e6c 12d             | _preamble_wait_ res     1
40e6c 12d             | _preamble_wait_ res     1
40e6c 12d             | _1ms_           res     1         ' 1ms
40e6c 12d             | _1ms_           res     1         ' 1ms
40e6c 12d             | _2ms_           res     1         ' 2ms
40e6c 12d             | _2ms_           res     1         ' 2ms
40e6c 12d             | _suspend_wait_  res     1         ' 3ms
40e6c 12d             | _suspend_wait_  res     1         ' 3ms
40e6c 12d             | _4ms_           res     1         ' 4ms
40e6c 12d             | _4ms_           res     1         ' 4ms
40e6c 12d             | _xfer_wait_     res     1         ' 5ms
40e6c 12d             | _xfer_wait_     res     1         ' 5ms
40e6c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
40e6c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
40e6c 12d             | _reset_hold_    res     1         ' 15ms
40e6c 12d             | _reset_hold_    res     1         ' 15ms
40e6c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
40e6c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
40e6c 12d             | _21ms_          res     1         ' 21ms
40e6c 12d             | _21ms_          res     1         ' 21ms
40e6c 12d             | _100ms_         res     1         ' 100ms
40e6c 12d             | _100ms_         res     1         ' 100ms
40e6c 12d             | _500ms_         res     1         ' 500ms
40e6c 12d             | _500ms_         res     1         ' 500ms
40e6c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
40e6c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
40e6c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
40e6c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
40e6c 12d             | '------------------------------------------------------------------------------
40e6c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
40e6c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
40e6c 12d             | _usb_d_ls_nco_  res     1
40e6c 12d             | _usb_d_ls_nco_  res     1
40e6c 12d             | _usb_h_fs_nco_  res     1
40e6c 12d             | _usb_h_fs_nco_  res     1
40e6c 12d             | _usb_d_fs_nco_  res     1
40e6c 12d             | _usb_d_fs_nco_  res     1
40e6c 12d             | '------------------------------------------------------------------------------
40e6c 12d             | ' Scratch registers
40e6c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
40e6c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
40e6c 12d             | htmp1           res     1
40e6c 12d             | htmp1           res     1
40e6c 12d             | htmp2           res     1
40e6c 12d             | htmp2           res     1
40e6c 12d             | htmp3           res     1
40e6c 12d             | htmp3           res     1
40e6c 12d             | hrep            res     1         ' Repeat count
40e6c 12d             | hrep            res     1         ' Repeat count
40e6c 12d             | hsave0          res     1         ' Subroutine parameter saves
40e6c 12d             | hsave0          res     1         ' Subroutine parameter saves
40e6c 12d             | hsave1          res     1
40e6c 12d             | hsave1          res     1
40e6c 12d             | hsave2          res     1
40e6c 12d             | hsave2          res     1
40e6c 12d             | isrtmp1         res     1
40e6c 12d             | isrtmp1         res     1
40e6c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
40e6c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
40e6c 12d             | hr0             res     1         ' Multi-purpose registers
40e6c 12d             | hr0             res     1         ' Multi-purpose registers
40e6c 12d             | hr1             res     1
40e6c 12d             | hr1             res     1
40e6c 12d             | hr2             res     1
40e6c 12d             | hr2             res     1
40e6c 12d             | hr3             res     1
40e6c 12d             | hr3             res     1
40e6c 12d             | hpar1           res     1         ' Routine entry/exit parameters
40e6c 12d             | hpar1           res     1         ' Routine entry/exit parameters
40e6c 12d             | hpar2           res     1
40e6c 12d             | hpar2           res     1
40e6c 12d             | hpar3           res     1
40e6c 12d             | hpar3           res     1
40e6c 12d             | hct2            res     1         ' Function response bus turn-around timer
40e6c 12d             | hct2            res     1         ' Function response bus turn-around timer
40e6c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
40e6c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
40e6c 12d             | mod_cnt         res     1         ' Used in idle loops
40e6c 12d             | mod_cnt         res     1         ' Used in idle loops
40e6c 12d             |                 fit     $1F0
40e6c 12d             |                 org     $200
40e6c 200             | hlut_start
40e6c 200             | 
40e6c 200             | '------------------------------------------------------------------------------
40e6c 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
40e6c 200             | ' settings to startup defaults.
40e6c 200             | '------------------------------------------------------------------------------
40e6c 200             | ' On entry:
40e6c 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
40e6c 200             | '------------------------------------------------------------------------------
40e6c 200             | set_speed_full
40e6c 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
40e70 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
40e74 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
40e78 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
40e7c 204             | '                ret                             wcz     ' Restore caller flags on exit
40e7c 204             | 
40e7c 204             | '------------------------------------------------------------------------------
40e7c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
40e7c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
40e7c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
40e7c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
40e7c 204             | ' putting the smart pins into reset.
40e7c 204             | '------------------------------------------------------------------------------
40e7c 204             | ' On entry:
40e7c 204             | ' On exit: CZ flags restored to caller states
40e7c 204             | '------------------------------------------------------------------------------
40e7c 204             | set_speed_low
40e7c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
40e80 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
40e84 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
40e88 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
40e8c 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
40e90 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
40e94 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
40e98 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
40e9c 20c             | 
40e9c 20c             | '------------------------------------------------------------------------------
40e9c 20c             | ' Perform configuration stuff required when a device intitially connects.
40e9c 20c             | '------------------------------------------------------------------------------
40e9c 20c             | ' On entry:
40e9c 20c             | ' On exit:
40e9c 20c             | '------------------------------------------------------------------------------
40e9c 20c             | on_connect
40e9c 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
40ea0 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
40ea4 20e             | .retry
40ea4 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
40ea8 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
40eac 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
40eb0 211 00 08 00 FF 
40eb4 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
40eb8 213 28 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
40ebc 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
40ec0 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
40ec4 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
40ec8 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
40ecc 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40ed0 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
40ed4 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
40ed8 21b 4C 03 B0 FD |                 call    #poll_waitx
40edc 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
40ee0 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
40ee4 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
40ee8 21f B8 FF 9F FD |                 jmp     #.retry
40eec 220             | .get_dev_desc
40eec 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
40ef0 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
40ef4 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
40ef8 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
40efc 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
40f00 225 88 FB BF FD |                 call    #reset
40f04 226 40 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
40f08 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
40f0c 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
40f10 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
40f14 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40f18 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
40f1c 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
40f20 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
40f24 22e 04 00 00 FF 
40f28 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
40f2c 230 34 FA BF FD |                 call    #calc_crc5
40f30 231 28 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
40f34 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
40f38 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
40f3c 234 F7 AD C2 FA |                 rdbyte  total_data, pb
40f40 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
40f44 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
40f48 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40f4c 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
40f50 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
40f54 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
40f58 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
40f5c 23c A0 99 02 F6 |                 mov     hctwait, _500us_
40f60 23d C4 02 B0 FD |                 call    #poll_waitx
40f64 23e 30 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
40f68 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
40f6c 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
40f70 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
40f74 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
40f78 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40f7c 244 2D 00 64 5D |         if_nz   ret
40f80 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
40f84 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
40f88 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
40f8c 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
40f90 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
40f94 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
40f98 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
40f9c 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
40fa0 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
40fa4 24e 2C FB 9F CD |         if_b    jmp     #host_error
40fa8 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
40fac 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
40fb0 251 2D EC 63 FD |                 call    pa
40fb4 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
40fb8 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
40fbc 254 2C EC 63 FD |                 jmp     pa
40fc0 255             | 
40fc0 255             | '------------------------------------------------------------------------------
40fc0 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
40fc0 255             | ' Status reporting is always in the function-to-host direction.
40fc0 255             | '------------------------------------------------------------------------------
40fc0 255             | ' On entry:
40fc0 255             | '   PTRA - start address of the SETUP data in hub.
40fc0 255             | '   PB - start address of the buffer/struct to be written to during the IN data
40fc0 255             | '     stage.
40fc0 255             | '   ep_addr_pid - device address, endpoint and CRC5.
40fc0 255             | ' On exit:
40fc0 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
40fc0 255             | '     contains the count of data stage bytes actually received, which must
40fc0 255             | '     always be <= the count requested.
40fc0 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
40fc0 255             | '     more specific USB operation error code.
40fc0 255             | '------------------------------------------------------------------------------
40fc0 255             | control_read
40fc0 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
40fc4 256 F8 91 03 F6 |                 mov     hpar2, ptra
40fc8 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
40fcc 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
40fd0 259             | .xfer_start
40fd0 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
40fd4 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
40fd8 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40fdc 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
40fe0 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
40fe4 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
40fe8 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
40fec 260 61 00 00 FF 
40ff0 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
40ff4 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
40ff8 263             | .data
40ff8 263 56 B1 02 F6 |                 mov     pkt_data, total_data
40ffc 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
41000 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
41004 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
41008 267             | .nak_retry
41008 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
4100c 268             | .in_retry
4100c 268 BC F6 BF FD |                 call    #txn_in
41010 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
41014 26a 28 00 90 AD |         if_z    jmp     #.commit
41018 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
4101c 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
41020 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
41024 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
41028 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
4102c 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
41030 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
41034 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
41038 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
4103c 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
41040 275             | .commit
41040 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
41044 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
41048 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
4104c 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
41050 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
41054 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
41058 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
4105c 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
41060 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
41064 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
41068 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
4106c 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
41070 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
41074 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
41078 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
4107c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
41080 285             | .pre_status
41080 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
41084 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
41088 287 00 B0 06 F6 |                 mov     pkt_data, #0
4108c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
41090 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
41094 28a 61 00 00 FF 
41098 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
4109c 28c             | .out_retry
4109c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
410a0 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
410a4 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
410a8 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
410ac 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
410b0 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
410b4 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
410b8 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
410bc 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
410c0 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
410c4 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
410c8 297             | ' I've encountered transfer STALL, even though the data looks correct, and
410c8 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
410c8 297             | ' ControlRead() transfer gets things unstuck most of the time...
410c8 297             | .xfer_retry
410c8 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
410cc 298 58 01 B0 FD |                 call    #poll_waitx
410d0 299 8C F9 BF FD |                 call    #wait_txn_ok
410d4 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
410d8 29b C8 F1 03 F6 |                 mov     ptra, hpar2
410dc 29c C9 EF 03 F6 |                 mov     pb, hpar3
410e0 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
410e4 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
410e8 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
410ec 2a0             | 
410ec 2a0             | '------------------------------------------------------------------------------
410ec 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
410ec 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
410ec 2a0             | ' the SETUP data struct is filled with the required values.
410ec 2a0             | '------------------------------------------------------------------------------
410ec 2a0             | ' On entry:
410ec 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
410ec 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
410ec 2a0             | '     stage.
410ec 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
410ec 2a0             | ' On exit:
410ec 2a0             | '   retval - used to convey the success/failure of each stage.
410ec 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
410ec 2a0             | '     more specific USB operation error code.
410ec 2a0             | '------------------------------------------------------------------------------
410ec 2a0             | control_write
410ec 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
410f0 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
410f4 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
410f8 2a3             | 
410f8 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
410fc 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
41100 2a5 F7 93 03 F6 |                 mov     hpar3, pb
41104 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
41108 2a7             | .xfer_start
41108 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
4110c 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
41110 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
41114 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41118 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
4111c 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
41120 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
41124 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
41128 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
4112c 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
41130 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
41134 2b2             | .data
41134 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
41138 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
4113c 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
41140 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
41144 2b6             | .out_retry
41144 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
41148 2b7 88 F6 BF FD |                 call    #txn_out
4114c 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41150 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
41154 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
41158 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
4115c 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
41160 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
41164 2be             | .commit
41164 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
41168 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
4116c 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
41170 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
41174 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
41178 2c3             | pre_status_in
41178 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
4117c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
41180 2c5             | .status_retry
41180 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
41184 2c6 44 F5 BF FD |                 call    #txn_in
41188 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
4118c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
41190 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
41194 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
41198 2cb 2D 00 64 AD |         if_z    ret
4119c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
411a0 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
411a4 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
411a8 2cf             | '               ret                                     ' Caller must handle transfer retirement
411a8 2cf             | 
411a8 2cf             | '------------------------------------------------------------------------------
411a8 2cf             | ' Execute an IN interrupt transaction.
411a8 2cf             | '------------------------------------------------------------------------------
411a8 2cf             | ' On entry:
411a8 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
411a8 2cf             | '   hpar2 - Address of the IN data buffer
411a8 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
411a8 2cf             | ' On exit:
411a8 2cf             | '   retval - the result of the operation.
411a8 2cf             | '   hpar3 - the count of IN data bytes actually received.
411a8 2cf             | '------------------------------------------------------------------------------
411a8 2cf             | do_int_in
411a8 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
411ac 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
411b0 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
411b4 2d2             | 
411b4 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
411b8 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
411bc 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
411c0 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
411c4 2d6             | .retry
411c4 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
411c8 2d7 00 F5 BF FD |                 call    #txn_in
411cc 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
411d0 2d9 1C 00 90 AD |         if_z    jmp     #.commit
411d4 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
411d8 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
411dc 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
411e0 2dd 54 00 B0 FD |                 call    #retry_wait
411e4 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
411e8 2df 18 00 90 AD |         if_z    jmp     #.post_ret
411ec 2e0 D4 FF 9F FD |                 jmp     #.retry
411f0 2e1             | .commit
411f0 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
411f4 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
411f8 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
411fc 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
41200 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
41204 2e6             | .post_ret
41204 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
41208 2e7             | 
41208 2e7             | 
41208 2e7             | '------------------------------------------------------------------------------
41208 2e7             | ' Resets the downstream hub port to FS
41208 2e7             | '------------------------------------------------------------------------------
41208 2e7             | dwnstream_reset
41208 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
4120c 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
41210 2e9             | 
41210 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
41214 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
41218 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
4121c 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
41220 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
41224 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
41228 2ef             | 
41228 2ef             | '------------------------------------------------------------------------------
41228 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
41228 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
41228 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
41228 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
41228 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
41228 2ef             | '------------------------------------------------------------------------------
41228 2ef             | ' On entry:
41228 2ef             | '   hctwait - wait interval in sysclocks.
41228 2ef             | ' On exit:
41228 2ef             | '------------------------------------------------------------------------------
41228 2ef             | poll_waitx
41228 2ef 1A 94 63 FD |                 getct   hct2
4122c 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
41230 2f1             | .wait
41230 2f1 FF 25 CC FB |                 jnct2   #.wait
41234 2f2 2D 00 64 FD |                 ret
41238 2f3             | 
41238 2f3             | '------------------------------------------------------------------------------
41238 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
41238 2f3             | '------------------------------------------------------------------------------
41238 2f3             | ' On entry:
41238 2f3             | '   retval - transaction response PID or error code.
41238 2f3             | ' On exit:
41238 2f3             | '------------------------------------------------------------------------------
41238 2f3             | retry_wait
41238 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
4123c 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
41240 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
41244 2f6 14 00 90 AD |         if_z    jmp     #.nak
41248 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
4124c 2f8 D8 FF BF FD |                 call    #poll_waitx
41250 2f9             | .dec
41250 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
41254 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
41258 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
4125c 2fc             | .nak
4125c 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
41260 2fd C4 FF BF FD |                 call    #poll_waitx
41264 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
41268 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
4126c 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
41270 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
41274 302 2D 00 64 FD |                 ret
41278 303             | 
41278 303             | host_reset
41278 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
4127c 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
41280 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
41280 305 BD 01 05 FF 
41284 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
41288 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
4128c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
41290 309             | ' Check to see if the system clock has been changed.
41290 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
41294 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
41298 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
4129c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
412a0 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
412a4 30e 40 46 62 FD |                 dirl    dp
412a8 30f             | 
412a8 30f 28 02 64 FD |                 setq    #1
412ac 310 80 00 80 FF 
412b0 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
412b4 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
412b8 313             | .enable
412b8 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
412bc 314 41 46 62 FD |                 dirh    dp
412c0 315 1F 38 63 FD |                 waitx   _1us_
412c4 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
412c8 317             | 
412c8 317             |                 ' Handle Port protection enable and startup delay
412c8 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
412cc 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
412d0 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
412d4 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
412d8 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
412dc 31c             | 
412dc 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
412e0 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
412e4 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
412e8 31f 00 00 04 F6 |                 mov     0-0, #0
412ec 320             | .regloop
412ec 320             | 
412ec 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
412ec 320             | 
412ec 320             | discon_entry
412ec 320 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
412f0 321             | 
412f0 321             |               
412f0 321             |         if HAVE_HIDPAD
412f0 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
412f4 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
412f8 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
412fc 324 F7 01 68 FC |                 wrlong  #0,pb
41300 325             |         end
41300 325             |         if EMUPAD_MAX_PLAYER > 0
41300 325             |         end
41300 325             | 
41300 325             |                 ' Fall through to disconnected loop
41300 325             | 
41300 325             | '-----------------------------------------------------------------------------------------------------------------
41300 325             | ' Device connect handling (Section 7.1.7.3).
41300 325             | '-----------------------------------------------------------------------------------------------------------------
41300 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
41300 325             | ' device to connect (Section 7.1.7.3).
41300 325             | '-----------------------------------------------------------------------------------------------------------------
41300 325             | disconnected
41300 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
41304 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
41308 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
4130c 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
41310 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
41314 32a             |         if ACTIVITY_LED >= 0
41314 32a             |         end
41314 32a 22 A7 82 FA |                 rqpin   urx, dm
41318 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
4131c 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
41320 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
41324 32e             | .se1_test
41324 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
41328 32f FC FE BF FD |                 call    #poll_waitx
4132c 330 22 A7 82 FA |                 rqpin   urx, dm
41330 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
41334 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
41338 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
4133c 334             | .se1            'SE1 is a fatal error condition
4133c 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
41340 335 E4 FE BF FD |                 call    #poll_waitx
41344 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
41348 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
4134c 338             | .connect_test                                           ' Test lines until stable J/K state seen
4134c 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
41350 339 22 A7 82 FA |                 rqpin   urx, dm
41354 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
41358 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
4135c 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
41360 33d             | connected
41360 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
41364 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
41368 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
4136c 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
41370 341             | .set_pulse
41370 341 1A 66 63 FD |                 getct   _pulse_time_
41374 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
41378 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
41378 343             | ' of 1ms and make a correction, if necessary.
41378 343             | '                mov     htmp, _1ms_
41378 343             | '                subs    htmp, iframe_delta
41378 343             | '                adds    _frame1ms_clks_, htmp
41378 343             | '                debug(udec(_frame1ms_clks_))
41378 343             | 
41378 343             |                 ' Fall through to idle/processing loop
41378 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
4137c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
41380 345             | 
41380 345             | hidle
41380 345 22 A7 82 FA |                 rqpin   urx, dm
41384 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
41388 347 98 00 90 CD |         if_c    jmp     #.se0_test
4138c 348 24 06 70 FD |                 pollct3                         wc
41390 349 68 00 90 3D |         if_nc   jmp     #.nopoll
41394 34a 1A 96 63 FD |                 getct   hct3
41398 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
4139c 34c             | 
4139c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
413a0 34d 00 72 E3 F8 |                 getbyte htmp
413a4 34e             | 
413a4 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
413a8 34f 94 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
413ac 350 40 00 90 AD |         if_z    jmp     #.poll
413b0 351             | 
413b0 351             |         if _HAVE_GAMEPAD
413b0 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
413b4 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
413b8 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
413bc 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
413c0 355 2C 00 90 AD |         if_z    jmp     #.poll
413c4 356             |         end
413c4 356             | 
413c4 356             |         if HAVE_MOUSE
413c4 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
413c8 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
413cc 358 20 00 90 AD |         if_z    jmp     #.poll
413d0 359             |         end
413d0 359             | 
413d0 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
413d4 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
413d8 35b 14 00 90 AD |         if_z    jmp     #.poll
413dc 35c             | 
413dc 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
413e0 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
413e4 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
413e8 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
413ec 360             |         if HAVE_MOUSE
413ec 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
413f0 361             |         else
413f0 361             |         end
413f0 361             | 
413f0 361             | .poll
413f0 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
413f4 362 2D EC 63 FD |                 call    pa
413f8 363             | .skip_poll
413f8 363             | 
413f8 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
413fc 364             | 
413fc 364             | .nopoll
413fc 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
41400 365 44 00 90 AD |         if_z    jmp     #hsuspend
41404 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
41408 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
4140c 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
41410 369 1A 86 63 FD |                 getct   hr0
41414 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
41418 36b             |         if ACTIVITY_LED >= 0
41418 36b             |         end
41418 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
4141c 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
41420 36d 5C FF 9F FD |                 jmp     #hidle
41424 36e             | ' Check for extended SE0 state on the bus
41424 36e             | .se0_test
41424 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
41428 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
4142c 370 22 A7 82 FA |                 rqpin   urx, dm
41430 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
41434 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
41438 373 24 F6 BF FD |                 call    #wait_txn_ok
4143c 374 00 00 80 FF 
41440 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
41444 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
41444 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
41448 377             | 
41448 377             | hsuspend
41448 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
4144c 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
41450 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
41454 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
41458 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
4145c 37c 00 98 07 F6 |                 mov     mod_cnt, #0
41460 37d             | 
41460 37d             |                 ' Fall through to resume wait loop
41460 37d             | 
41460 37d             | hwait_resume
41460 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
41464 37e 02 88 47 F0 |                 shr     hr1, #2
41468 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
4146c 380             |         if ACTIVITY_LED >= 0
4146c 380             |         end
4146c 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
41470 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
41474 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
41478 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
4147c 384 18 00 90 AD |         if_z    jmp     #.resume
41480 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
41484 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
41488 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
4148c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
41490 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
41494 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
41498 38b             | .resume
41498 38b 22 05 28 FC |                 wypin   #OUT_K, dm
4149c 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
414a0 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
414a4 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
414a8 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
414ac 390 1F 72 63 FD |                 waitx   htmp
414b0 391 22 07 28 FC |                 wypin   #OUT_J, dm
414b4 392 01 72 47 F0 |                 shr     htmp, #1
414b8 393 1F 72 63 FD |                 waitx   htmp
414bc 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
414c0 395 1A 92 62 FD |                 getct   iframe_ct_base
414c4 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
414c8 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
414cc 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
414d0 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
414d4 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
414d8 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
414dc 39c             | 
414dc 39c             | '------------------------------------------------------------------------------
414dc 39c             | ' Send preamble to enable low-speed HUB ports
414dc 39c             | '------------------------------------------------------------------------------
414dc 39c             | ' On entry:
414dc 39c             | ' On exit:
414dc 39c             | '   USB baud rate set to low-speed
414dc 39c             | '------------------------------------------------------------------------------
414dc 39c             | utx_pre
414dc 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
414e0 39d 40 46 62 FD |                 dirl    dp
414e4 39e 28 02 64 FD |                 setq    #1
414e8 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
414ec 3a0 58 44 62 FD |                 drvl    dm
414f0 3a1 59 46 62 FD |                 drvh    dp
414f4 3a2             | 
414f4 3a2 1E 00 00 FF 
414f8 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
414fc 3a4             | 
414fc 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
41500 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
41504 3a6 28 02 64 3D |         if_nc   setq    #1
41508 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
4150c 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
41510 3a9             | .l1
41510 3a9             | 
41510 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
41514 3aa 40 46 62 FD |                 dirl    dp
41518 3ab 28 02 64 FD |                 setq    #1
4151c 3ac 80 00 80 FF 
41520 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
41524 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
41528 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
4152c 3b0 41 46 62 FD |                 dirh    dp
41530 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
41534 3b2             | 
41534 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
41538 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
4153c 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
41540 3b5             | 
41540 3b5             | hlut_end
41540 3b5             |                 fit     $400
41540 3b5             |                 orgh
41540                 | if OVERLAP_MEMORY
41540                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
41540                 | end
41540                 | '------------------------------------------------------------------------------
41540                 | ' Routines called from cog space.
41540                 | '------------------------------------------------------------------------------
41540                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
41540                 | '------------------------------------------------------------------------------
41540                 | 
41540                 | '------------------------------------------------------------------------------
41540                 | ' USB host cog initialization.
41540                 | '------------------------------------------------------------------------------
41540                 | usb_host_init
41540                 |                 ' Initialize buffer pointers
41540                 |         if OVERLAP_MEMORY
41540                 |         else
41540     4C 15 B0 FE |                 loc     pb, #hid_descr
41544                 |         end
41544     F7 4B 02 F6 |                 mov     hid_descr_p, pb
41548                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
41548                 |                 {
41548                 |                 }
41548                 |         
41548                 |                 {
41548                 |                 }
41548                 |                 'loc     pb,#hkbd_report
41548                 |                 'mov     hkbd_report_p,pb
41548                 | 
41548     44 1D B0 FE |                 loc     pb, #hub_descr
4154c     F7 4D 02 F6 |                 mov     hub_descr_p, pb
41550     59 1D B0 FE |                 loc     pb, #urx_buff
41554     F7 4F 02 F6 |                 mov     urx_buff_p, pb
41558     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
4155c     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
41560     DB 1D B0 FE |                 loc     pb, #con_desc_buff
41564     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
41568     24 15 B0 FE |                 loc     pb, #usb_cache_start
4156c     F7 55 02 F6 |                 mov     cache_start_p, pb
41570     25 1D B0 FE |                 loc     pb, #usb_cache_end
41574     F7 57 02 F6 |                 mov     cache_end_p, pb
41578                 | 
41578                 |         if ERROR_LED >= 0
41578                 |         end
41578                 | 
41578                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
41578                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
41578                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
41578                 | ' Configure and enable the Serial Host USB port.
41578     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
4157c                 | 
4157c                 | '------------------------------------------------------------------------------
4157c                 | ' Timing calculations happen before any interrupt(s) are enabled.
4157c                 | '------------------------------------------------------------------------------
4157c                 | ' On entry:
4157c                 | '   htmp - current CLKFREQ value.
4157c                 | '------------------------------------------------------------------------------
4157c                 | hinit_usb_timings
4157c                 | '                getct   htmp2
4157c     B9 59 02 F6 |                 mov     save_sysclk, htmp
41580     8D 5B 80 FF 
41584     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
41588     18 32 63 FD |                 getqx   _12Mbps_
4158c     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
41590     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
41594     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
41598     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
4159c     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
415a0     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
415a4     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
415a8     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
415ac     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
415b0     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
415b4     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
415b8     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
415bc     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
415c0     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
415c4     80 00 00 FF 
415c8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
415cc     18 2E 63 FD |                 getqx   _var_64_lower_
415d0     19 30 63 FD |                 getqy   _var_64_upper_
415d4     28 2E 63 FD |                 setq    _var_64_lower_
415d8     65 CD 1D FF 
415dc     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
415e0     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
415e4     01 00 00 FF 
415e8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
415ec     18 2E 63 FD |                 getqx   _var_64_lower_
415f0     19 30 63 FD |                 getqy   _var_64_upper_
415f4     28 2E 63 FD |                 setq    _var_64_lower_
415f8     A1 07 00 FF 
415fc     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
41600     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
41604     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
41608     09 38 57 F0 |                 shr     _1us_, #9               wc
4160c     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
41610     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
41614     18 3A 63 FD |                 getqx   _10us_
41618     09 3A 57 F0 |                 shr     _10us_, #9              wc
4161c     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
41620     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
41624     18 3C 63 FD |                 getqx   _33us_
41628     09 3C 57 F0 |                 shr     _33us_, #9              wc
4162c     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
41630     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
41634     18 3E 63 FD |                 getqx   _txn_err_
41638     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
4163c     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
41640     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
41644     18 40 63 FD |                 getqx   _500us_
41648     09 40 57 F0 |                 shr     _500us_, #9             wc
4164c     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
41650     01 00 00 FF 
41654     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
41658     18 42 63 FD |                 getqx   _txn_ok_ls_
4165c     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
41660     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
41664     01 00 00 FF 
41668     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
4166c     18 44 63 FD |                 getqx   _txn_ok_fs_
41670     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
41674     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
41678     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
4167c     05 00 00 FF 
41680     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
41684     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
41688     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
4168c     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
41690     1C 00 00 FF 
41694     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
41698     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
4169c     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
416a0     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
416a4     00 00 00 FF 
416a8     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
416ac     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
416b0     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
416b4     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
416b8     04 00 00 FF 
416bc     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
416c0     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
416c4     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
416c8     8D 5B 00 FF 
416cc     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
416d0     18 4E 63 FD |                 getqx   _preamble_wait_
416d4     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
416d8     01 00 00 FF 
416dc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
416e0     18 2E 63 FD |                 getqx   _var_64_lower_
416e4     19 30 63 FD |                 getqy   _var_64_upper_
416e8     28 2E 63 FD |                 setq    _var_64_lower_
416ec     01 00 00 FF 
416f0     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
416f4     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
416f8     09 50 57 F0 |                 shr     _1ms_, #9               wc
416fc     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
41700     FF FF 7F FF 
41704     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
41708     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
4170c     A8 53 03 F6 |                 mov     _2ms_, _1ms_
41710     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
41714     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
41718     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
4171c     A8 57 03 F6 |                 mov     _4ms_, _1ms_
41720     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
41724     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
41728     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
4172c     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
41730     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
41734     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
41738     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
4173c     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
41740     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
41744     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
41748     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
4174c     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
41750     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
41754     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
41758     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
4175c     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
41760     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
41764     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
41768     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
4176c     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
41770                 | '        _ret_   mov     _1sec_, save_sysclk
41770                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
41770                 | '                ret
41770                 | {
41770                 | }
41770                 | 
41770                 | '------------------------------------------------------------------------------
41770                 | ' Parse a configuration descriptor chain to see if the device is a recognized
41770                 | ' one. If it is, start the task progression that will configure the device for
41770                 | ' use.
41770                 | '------------------------------------------------------------------------------
41770                 | ' On entry:
41770                 | '   hconfig_base - start address of the cached config descriptor chain.
41770                 | ' On exit:
41770                 | '------------------------------------------------------------------------------
41770                 | hparse_con_desc
41770     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
41774     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
41778     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
4177c     4E 72 FF F9 |                 movbyts htmp,#%%1032
41780     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
41784                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
41784                 | 
41784     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
41788     6E ED 03 F1 |                 add     pa, hconfig_base
4178c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
41790                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
41790                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
41790                 | ' that defines a keyboard and/or mouse.
41790     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
41794                 | .next_intf
41794     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
41798     B8 01 90 3D |         if_ae   jmp     #hset_config
4179c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
417a0     75 F3 03 F1 |                 add     ptrb, hnext_desc
417a4     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
417a8     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
417ac     0C 00 90 AD |         if_z    jmp     #.intf
417b0     80 73 C7 FA |                 rdbyte  htmp, ptrb
417b4     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
417b8     D8 FF 9F FD |                 jmp     #.next_intf
417bc                 | .intf
417bc     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
417c0     00 92 07 F6 |                 mov     hpar3, #0
417c4     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
417c8     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
417cc     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
417d0     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
417d4                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
417d4                 | 
417d4                 | .endp
417d4     80 73 C7 FA |                 rdbyte  htmp, ptrb
417d8     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
417dc     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
417e0     78 00 90 3D |         if_ae   jmp     #.get_device
417e4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
417e8     75 F3 03 F1 |                 add     ptrb, hnext_desc
417ec     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
417f0     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
417f4     64 00 90 AD |         if_z    jmp     #.get_device
417f8     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
417fc     04 00 90 AD |         if_z    jmp     #.get_ep
41800     D0 FF 9F FD |                 jmp     #.endp
41804                 | .get_ep
41804     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
41808     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
4180c     0F 88 67 F0 |                 shl     hr1, #8 + 7
41810     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
41814     3F 00 00 FF 
41818     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
4181c     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
41820     00 90 0F F2 |                 cmp     hpar2, #0               wz
41824     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
41828     00 92 0F F2 |                 cmp     hpar3, #0               wz
4182c     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
41830     A0 FF 9F FD |                 jmp     #.endp
41834                 | .in_ep
41834     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
41838     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
4183c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
4183c     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
41840     C3 8B DB F8 |                 setbyte hr2, hr0, #3
41844     8C FF 9F FD |                 jmp     #.endp
41848                 | .out_ep
41848     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
4184c     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
41850                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
41850     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
41854     C3 8D DB F8 |                 setbyte hr3, hr0, #3
41858     78 FF 9F FD |                 jmp     #.endp
4185c                 | 
4185c                 | .get_device
4185c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
41860     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
41864     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
41868     64 00 90 AD |         if_z    jmp     #.gamepad
4186c     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
41870     A8 00 90 AD |         if_z    jmp     #.hub
41874     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
41878     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
4187c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
41880     4C 00 90 AD |         if_z    jmp     #.gamepad
41884     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
41888     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
4188c                 | .keyboard
4188c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
41890                 |         if HAVE_MOUSE
41890     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
41894                 |         else
41894                 |         end
41894     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
41898     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
4189c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
418a0     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
418a4     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
418a8     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
418ac                 |                 'debug(udec(kb_intf_num))
418ac                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
418ac     E4 FE 9F FD |                 jmp     #.next_intf
418b0                 | if HAVE_MOUSE
418b0                 | .mouse
418b0     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
418b4     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
418b8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
418bc     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
418c0     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
418c4                 |                 'getbyte ms_interval, hr2, #3
418c4     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
418c8     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
418cc                 |                 'debug(udec(kb_intf_num))
418cc                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
418cc     C4 FE 9F FD |                 jmp     #.next_intf
418d0                 | end
418d0                 | .gamepad
418d0     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
418d4     C8 73 63 F5 |                 xor     htmp, hpar2
418d8     3F 00 00 FF 
418dc     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
418e0     B0 FE 9F AD |         if_z    jmp     #.next_intf
418e4                 |         if HAVE_MOUSE
418e4     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
418e8     C8 73 63 F5 |                 xor     htmp, hpar2
418ec     3F 00 00 FF 
418f0     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
418f4     9C FE 9F AD |         if_z    jmp     #.next_intf
418f8                 |         end
418f8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
418fc     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
41900     90 FE 9F 5D |         if_nz   jmp     #.next_intf
41904                 | 
41904     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
41908     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
4190c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
41910     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
41914     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
41918                 |                 'debug(udec(gp_intf_num))
41918                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
41918     78 FE 9F FD |                 jmp     #.next_intf
4191c                 | .hub
4191c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
41920     70 FE 9F 5D |         if_nz   jmp     #.next_intf
41924     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
41928     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
4192c     64 FE 9F 5D |         if_nz   jmp     #.next_intf
41930     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
41934     5C FE 9F 5D |         if_nz   jmp     #.next_intf
41938     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
4193c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
41940     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
41944     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
41948     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
4194c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
41950                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
41950     40 FE 9F FD |                 jmp     #.next_intf
41954                 | 
41954                 | '------------------------------------------------------------------------------
41954                 | ' If a newly-connected device is recognized, do whatever is needed to configure
41954                 | ' it according to its function, or functions. In the case of this boot protocol
41954                 | ' keyboard/mouse class driver:
41954                 | ' - SetConfiguration(config_num)
41954                 | ' - SetProtocol(boot)
41954                 | ' - SetIdle(indefinite)
41954                 | ' - Enter the device interrupt IN polling task stage.
41954                 | '------------------------------------------------------------------------------
41954                 | ' On entry:
41954                 | ' On exit:
41954                 | '------------------------------------------------------------------------------
41954                 | hset_config
41954                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
41954                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
41954     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
41958     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
4195c     00 00 0C F2 |                 cmp     0-0, #0                 wz
41960     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
41964                 |         if HAVE_MOUSE
41964     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
41968                 |         end
41968     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
4196c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
41970                 | .set_config
41970     7C 0E D0 FE |                 loc     ptra, #set_config
41974     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
41978     6E ED 03 F1 |                 add     pa, hconfig_base
4197c     F6 8F C3 FA |                 rdbyte  hpar1, pa
41980     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
41984     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
41988     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
4198c     A0 02 A0 FD |                 call    #control_write
41990     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41994     2D 00 64 5D |         if_nz   ret
41998                 | .kbd_config
41998     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
4199c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
419a0                 | 
419a0     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
419a4     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
419a8     3F 00 00 FF 
419ac     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
419b0     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
419b4                 | 
419b4     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
419b8     44 0E D0 FE |                 loc     ptra, #set_protocol
419bc     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
419c0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
419c4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
419c8     A0 02 A0 FD |                 call    #control_write
419cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
419d0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
419d4     E4 02 90 5D |         if_nz   jmp     #.notify_client
419d8     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
419dc     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
419e0     30 03 B0 FD |                 call    #hset_idle
419e4                 |                 'cmp     retval, #PID_ACK        wz
419e4                 |         'if_nz   mov     hkbd_ep_addr, #0
419e4                 |         'if_nz   jmp     #.notify_client
419e4     A9 99 02 F6 |                 mov     hctwait, _2ms_
419e8     EF 02 A0 FD |                 call    #poll_waitx
419ec     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
419f0     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
419f4     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
419f8     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
419fc     2C 03 B0 FD |                 call    #hset_kbdled_report
41a00     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41a04     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
41a08     B0 02 90 5D |         if_nz   jmp     #.notify_client
41a0c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
41a10     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
41a14     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
41a18     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
41a1c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
41a20     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
41a24     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
41a28     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
41a2c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
41a30     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
41a34     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
41a38                 |         if !!HAVE_MOUSE
41a38                 |         end
41a38                 | 
41a38                 | .mouse_config
41a38                 | if HAVE_MOUSE
41a38     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
41a3c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
41a40     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
41a44     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
41a48     3F 00 00 FF 
41a4c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
41a50     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
41a54                 | 
41a54                 |                 debug("mouse passed addr check")
41a54                 | 
41a54     C0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
41a58     00 00 80 FF 
41a5c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
41a60     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
41a64     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41a68     55 02 A0 FD |                 call    #control_read
41a6c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41a70     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
41a74     44 02 90 5D |         if_nz   jmp     #.notify_client
41a78     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
41a7c     56 01 00 F6 |                 mov     0-0, total_data
41a80     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41a84                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
41a84                 | 
41a84     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
41a88     74 0D D0 FE |                 loc     ptra, #set_protocol
41a8c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
41a90     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
41a94     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
41a98     A0 02 A0 FD |                 call    #control_write
41a9c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41aa0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
41aa4     14 02 90 5D |         if_nz   jmp     #.notify_client
41aa8                 |                 debug("mouse passed SetProtocol")
41aa8     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
41aac     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
41ab0     60 02 B0 FD |                 call    #hset_idle
41ab4                 |                 'cmp     retval, #PID_ACK        wz
41ab4                 |         'if_nz   mov     hmouse_ep_addr, #0
41ab4                 |         'if_nz   jmp     #.notify_client
41ab4                 |                 debug("mouse passed SetIdle")
41ab4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
41ab8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
41abc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
41ac0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
41ac4     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
41ac8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
41acc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
41ad0     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
41ad4     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
41ad8     3F 00 00 FF 
41adc     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
41ae0     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
41ae4     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
41ae8     D0 01 90 FD |                 jmp     #.notify_client
41aec                 | end
41aec                 | .gamepad_config
41aec                 | if _HAVE_GAMEPAD
41aec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
41af0     00 00 0C F2 |                 cmp     0-0, #0                 wz
41af4     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
41af8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
41afc     00 72 03 F6 |                 mov     htmp, 0-0
41b00     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
41b04     3F 00 00 FF 
41b08     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
41b0c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
41b10                 | 
41b10     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
41b14     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
41b18     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
41b1c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
41b20     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
41b24     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
41b28     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
41b2c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
41b30     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
41b34     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
41b38     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
41b3c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
41b40     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
41b44     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
41b48                 | 
41b48                 |                 if EMUPAD_MAX_PLAYER > 0
41b48                 |                 
41b48                 | .rule_loop           
41b48                 |                 end
41b48                 | 
41b48     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
41b4c     5C 00 90 AD |         if_e    jmp     #.xinput
41b50     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
41b54     00 72 03 F6 |                 mov     htmp,0-0
41b58     01 A6 02 FF 
41b5c     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
41b60     7C 00 90 AD |         if_e    jmp     #.ps3
41b64                 | 
41b64     B0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
41b68     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
41b6c     00 00 80 5F 
41b70     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
41b74     03 00 80 AF 
41b78     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
41b7c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
41b80     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41b84     55 02 A0 FD |                 call    #control_read
41b88     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41b8c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
41b90     00 00 04 56 |         if_nz   mov     0-0, #0
41b94     24 01 90 5D |         if_nz   jmp     #.notify_client
41b98     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
41b9c     56 01 00 F6 |                 mov     0-0, total_data
41ba0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41ba4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
41ba4                 | 
41ba4     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
41ba8     10 01 90 FD |                 jmp     #.notify_client
41bac                 | .xinput
41bac     C4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
41bb0     2D EF 03 F6 |                 mov     pb,hdev_port
41bb4     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
41bb8     03 EE 27 F3 |                 fle     pb,#3
41bbc     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
41bc0     02 EF 47 FC |                 wrbyte  pb, ptra[2]
41bc4                 | 
41bc4     03 B0 06 F6 |                 mov     pkt_data, #3
41bc8     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
41bcc     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
41bd0     5A 00 A0 FD |                 call    #txn_out
41bd4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
41bd8                 | 
41bd8     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
41bdc     DC 00 90 FD |                 jmp     #.notify_client
41be0                 | .ps3
41be0     60 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
41be4     2D EF 03 F6 |                 mov     pb,hdev_port
41be8     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
41bec     04 EE 27 F3 |                 fle     pb,#4
41bf0     F7 EF C3 F9 |                 decod   pb
41bf4     09 EF 47 FC |                 wrbyte  pb, ptra[9]
41bf8                 | 
41bf8     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
41bfc     10 0C D0 FE |                 loc     ptra, #set_report
41c00     01 00 80 FF 
41c04     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
41c08     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
41c0c     03 61 5C FC |                 wrword  #48, ptra[wLength]
41c10     30 0C B0 FE |                 loc     pb, #ps3_command_buff
41c14     A0 02 A0 FD |                 call    #control_write
41c18                 | 
41c18     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
41c1c     F0 0B D0 FE |                 loc     ptra, #set_report
41c20     01 00 80 FF 
41c24     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
41c28     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
41c2c     03 09 5C FC |                 wrword  #4, ptra[wLength]
41c30     0C 0C B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
41c34     A0 02 A0 FD |                 call    #control_write
41c38     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
41c3c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
41c40     00 00 04 56 |         if_nz   mov     0-0, #0
41c44     74 00 90 5D |         if_nz   jmp     #.notify_client
41c48                 | 
41c48     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
41c4c     6C 00 90 FD |                 jmp     #.notify_client
41c50                 | end
41c50                 | 
41c50                 | .hub_config
41c50     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
41c54     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
41c58     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
41c5c     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
41c60     3F 00 00 FF 
41c64     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
41c68     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
41c6c                 | 
41c6c     B0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
41c70     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
41c74     26 EF 03 F6 |                 mov     pb, hub_descr_p
41c78     55 02 A0 FD |                 call    #control_read
41c7c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41c80     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
41c84     34 00 90 5D |         if_nz   jmp     #.notify_client
41c88                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
41c88                 | 
41c88     26 F1 03 F6 |                 mov     ptra, hub_descr_p
41c8c     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
41c90     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
41c94                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
41c94                 | .pwr_loop
41c94     90 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
41c98     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
41c9c     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
41ca0     A0 02 A0 FD |                 call    #control_write
41ca4     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
41ca8                 | 
41ca8     B2 99 02 F6 |                 mov     hctwait, _500ms_
41cac     B1 99 02 F1 |                 add     hctwait, _100ms_
41cb0     EF 02 A0 FD |                 call    #poll_waitx
41cb4                 | 
41cb4     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
41cb8     00 00 90 FD |                 jmp     #.notify_client
41cbc                 | 
41cbc                 | .notify_client
41cbc     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
41cc0     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
41cc4                 |                 debug(uhex_long(hdev_type,hdev_type+1))
41cc4                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
41cc4     2D 00 64 FD |                 ret
41cc8                 | 
41cc8                 | '------------------------------------------------------------------------------
41cc8                 | ' Initialize the keyboard/mouse data area to start-up values.
41cc8                 | '------------------------------------------------------------------------------
41cc8                 | ' On entry:
41cc8                 | ' On exit:
41cc8                 | '------------------------------------------------------------------------------
41cc8                 | init_kbdm_data
41cc8     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
41ccc     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
41cd0                 | 
41cd0     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
41cd4     2B ED 03 F6 |                 mov     pa, cache_end_p
41cd8                 | .loop
41cd8     61 01 4C FC |                 wrbyte  #0, ptra++
41cdc     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
41ce0     F4 FF 9F CD |         if_b    jmp     #.loop
41ce4                 |         
41ce4                 |         if EMUPAD_MAX_PLAYER > 0
41ce4                 |         end
41ce4                 | 
41ce4                 | 
41ce4     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
41ce8                 | .regloop
41ce8     00 EC 8F F9 |                 altd    pa
41cec     00 00 04 F6 |                 mov     0-0, #0
41cf0     01 EC 07 F1 |                 add     pa, #1
41cf4     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
41cf8     EC FF 9F 5D |         if_nz   jmp     #.regloop
41cfc                 | 
41cfc     E1 E1 61 FF 
41d00     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
41d04     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
41d08     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
41d0c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
41d10                 | 
41d10     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
41d14                 | 
41d14                 | '------------------------------------------------------------------------------
41d14                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
41d14                 | ' function.
41d14                 | '------------------------------------------------------------------------------
41d14                 | ' On entry:
41d14                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
41d14                 | '   hpar2 - index number of the target interface.
41d14                 | ' On exit:
41d14                 | '------------------------------------------------------------------------------
41d14                 | hset_idle
41d14     A9 99 02 F6 |                 mov     hctwait, _2ms_
41d18     EF 02 A0 FD |                 call    #poll_waitx
41d1c     E8 0A D0 FE |                 loc     ptra, #set_idle
41d20     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
41d24     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
41d28     A0 02 80 FD |                 jmp     #control_write
41d2c                 | 
41d2c                 | '------------------------------------------------------------------------------
41d2c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
41d2c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
41d2c                 | '------------------------------------------------------------------------------
41d2c                 | ' On entry:
41d2c                 | '   ep_addr_pid - device address and enpoint for the request.
41d2c                 | ' On exit:
41d2c                 | '   retval - transaction result.
41d2c                 | '------------------------------------------------------------------------------
41d2c                 | hset_kbdled_report
41d2c     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
41d30     DC 0A D0 FE |                 loc     ptra, #set_report
41d34     01 00 80 FF 
41d38     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
41d3c     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
41d40     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
41d44     27 EF 03 F6 |                 mov     pb, urx_buff_p
41d48     F7 77 42 FC |                 wrbyte  kb_led_states, pb
41d4c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
41d50                 | 
41d50                 | '------------------------------------------------------------------------------
41d50                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
41d50                 | '------------------------------------------------------------------------------
41d50                 | ' On entry:
41d50                 | ' On exit:
41d50                 | '------------------------------------------------------------------------------
41d50                 | hget_kbd_in_report
41d50     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
41d54     27 91 03 F6 |                 mov     hpar2, urx_buff_p
41d58     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
41d5c     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
41d60     CF 02 A0 FD |                 call    #do_int_in
41d64     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41d68     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
41d6c                 | 
41d6c     00 92 0F F2 |                 cmp     hpar3, #0               wz
41d70     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
41d74                 | 
41d74     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
41d78     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
41d7c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
41d80     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
41d84                 | 
41d84     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
41d88     18 00 B0 FD |                 call    #hkbd_compare
41d8c                 |         if EMUPAD_MAX_PLAYER > 0
41d8c                 |         end
41d8c                 | 
41d8c                 | .led_check
41d8c     3B 73 03 F6 |                 mov     htmp, kb_led_states
41d90     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
41d94     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
41d98     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
41d9c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
41da0     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
41da4                 | 
41da4                 | '------------------------------------------------------------------------------
41da4                 | ' Compare current and previous keyboard data buffers for keypress changes.
41da4                 | '------------------------------------------------------------------------------
41da4                 | hkbd_compare
41da4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
41da8     E4 13 F0 FE |                 loc     ptrb, #hkbd_report
41dac     61 75 07 FB |                 rdlong  htmp1, ptra++
41db0     E1 77 07 FB |                 rdlong  htmp2, ptrb++
41db4     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
41db8     61 75 07 FB |                 rdlong  htmp1, ptra++
41dbc     E1 77 07 FB |                 rdlong  htmp2, ptrb++
41dc0     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
41dc4     2D 00 64 AD |         if_z    ret
41dc8                 | 
41dc8     C4 13 D0 FE |                 loc     ptra, #hkbd_report
41dcc                 | 
41dcc                 |                 ' Handle modifiers
41dcc     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
41dd0     00 89 C7 FA |                 rdbyte  hr1, ptra
41dd4     C8 89 43 F9 |                 rolword hr1,hpar2,#0
41dd8     63 88 63 FD |                 mergew  hr1
41ddc     08 EC 07 F6 |                 mov     pa,#8
41de0                 | .modloop
41de0     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
41de4     E8 8E 07 F6 |                 mov     hpar1,#$E8
41de8     F6 8F 83 F1 |                 sub     hpar1,pa
41dec     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
41df0     FB ED 6F FB |                 djnz    pa,#.modloop
41df4                 | 
41df4     6F E0 75 FD | .release        modc    _set    wc
41df8                 |                 'alts    hdev_port, #hid_report_p
41df8                 |                 'mov     ptra, hid_report_p
41df8     02 F0 07 F1 |                 add     ptra, #2
41dfc     06 EC 07 F6 |                 mov     pa, #6
41e00     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
41e04     20 00 90 AD |         if_z    jmp     #.rl3
41e08     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
41e0c     02 F2 07 F1 |                 add     ptrb, #2
41e10     06 EE 07 F6 |                 mov     pb, #6
41e14     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
41e18     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
41e1c     08 00 90 AD |         if_z    jmp     #.rl3
41e20     FC EF 6F FB |                 djnz    pb, #.rl2
41e24     68 00 B0 FD |                 call    #hkbd_translate
41e28     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
41e2c                 | 
41e2c     00 92 07 F6 |                 mov     hpar3, #0
41e30     1F 92 27 F4 |                 bith    hpar3, #31
41e34                 | 
41e34     6F 00 74 FD | .press          modc    _clr    wc
41e38     27 F1 03 F6 |                 mov     ptra, urx_buff_p
41e3c     02 F0 07 F1 |                 add     ptra, #2
41e40     06 EC 07 F6 |                 mov     pa, #6
41e44     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
41e48     20 00 90 AD |         if_z    jmp     #.pl3
41e4c     40 13 F0 FE |                 loc     ptrb, #hkbd_report
41e50     02 F2 07 F1 |                 add     ptrb, #2
41e54     06 EE 07 F6 |                 mov     pb, #6
41e58     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
41e5c     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
41e60     08 00 90 AD |         if_z    jmp     #.pl3
41e64     FC EF 6F FB |                 djnz    pb, #.pl2
41e68     24 00 B0 FD |                 call    #hkbd_translate
41e6c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
41e70                 | 
41e70     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
41e74     18 13 F0 FE |                 loc     ptrb, #hkbd_report
41e78     28 02 64 FD |                 setq #1
41e7c     61 75 07 FB |                 rdlong  htmp1, ptra++
41e80     28 02 64 FD |                 setq #1
41e84     E1 75 67 FC |                 wrlong  htmp1, ptrb++
41e88     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
41e8c                 | 
41e8c     2D 00 64 FD |                 ret
41e90                 | 
41e90                 | '------------------------------------------------------------------------------
41e90                 | ' Translate keyboard scancode to ASCII
41e90                 | '------------------------------------------------------------------------------
41e90                 | ' On entry:
41e90                 | '   hpar1 - scancode
41e90                 | '   hpar2 - key modifiers state
41e90                 | '       c - pressed (0) or released (1) flag
41e90                 | ' On exit:
41e90                 | '   hpar1 - bit     31 = 0 pressed, 1 released
41e90                 | '               30..17 = unused
41e90                 | '                   18 = scroll-lock state 
41e90                 | '                   17 = caps-lock state
41e90                 | '                   16 = num-lock state 
41e90                 | '                15..8 = key modifiers state
41e90                 | '                 7..0 = scancode
41e90                 | '------------------------------------------------------------------------------
41e90                 | hkbd_translate
41e90     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
41e94     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
41e98     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
41e9c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
41ea0     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
41ea4     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
41ea8                 | 
41ea8                 |         if EMUPAD_MAX_PLAYER > 0
41ea8                 | 
41ea8                 |         if EMUPAD_BT0_BIT >= 0
41ea8                 |         end
41ea8                 |         if EMUPAD_BT1_BIT >= 0
41ea8                 |         end
41ea8                 |         if EMUPAD_BT2_BIT >= 0
41ea8                 |         end
41ea8                 |         if EMUPAD_BT3_BIT >= 0
41ea8                 |         end
41ea8                 |         if EMUPAD_BT4_BIT >= 0
41ea8                 |         end
41ea8                 |         if EMUPAD_BT5_BIT >= 0
41ea8                 |         end
41ea8                 |         if EMUPAD_BT6_BIT >= 0
41ea8                 |         end
41ea8                 |         if EMUPAD_BT7_BIT >= 0
41ea8                 |         end
41ea8                 |         if EMUPAD_BT8_BIT >= 0
41ea8                 |         end
41ea8                 |         if EMUPAD_BT9_BIT >= 0
41ea8                 |         end
41ea8                 | 
41ea8                 |         end
41ea8     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
41eac     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
41eb0     1F 8E 47 F4 |                 bitc    hpar1, #31
41eb4                 |         if KEYQUEUE_SIZE > 0
41eb4     D4 09 B0 FE |                 loc pb,#keyq_head
41eb8     F7 73 E3 FA |                 rdword htmp,pb
41ebc     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
41ec0     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
41ec4     B9 77 03 F6 |                 mov htmp2,htmp
41ec8     04 76 07 FA |                 mul htmp2,#4
41ecc     F7 77 03 F1 |                 add htmp2,pb
41ed0     02 76 07 F1 |                 add htmp2,#2
41ed4     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
41ed8     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
41edc     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
41ee0     F7 73 43 5C |         if_nz   wrbyte htmp,pb
41ee4                 |         end
41ee4     2D 00 7C FD |                 ret wcz
41ee8                 | 
41ee8                 | if HAVE_MOUSE
41ee8                 | '------------------------------------------------------------------------------
41ee8                 | ' Execute an IN interrupt transaction to poll for mouse activity.
41ee8                 | '------------------------------------------------------------------------------
41ee8                 | ' On entry:
41ee8                 | ' On exit:
41ee8                 | '------------------------------------------------------------------------------
41ee8                 | hget_mouse_in_report
41ee8     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
41eec     27 91 03 F6 |                 mov     hpar2, urx_buff_p
41ef0     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
41ef4     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
41ef8     CF 02 A0 FD |                 call    #do_int_in
41efc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41f00     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
41f04                 | 
41f04     00 92 0F F2 |                 cmp     hpar3, #0               wz
41f08     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
41f0c                 | 
41f0c     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
41f10     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
41f14     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
41f18     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
41f1c                 | 
41f1c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
41f20     05 92 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
41f24     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
41f28     01 92 87 31 |         if_ae   sub     hpar3, #1
41f2c                 | 
41f2c     50 09 90 FE |                 loc     pa, #mouse_limits
41f30     65 13 F0 FE |                 loc     ptrb, #mouse_xacc
41f34                 | 
41f34                 |                 ' load xacc,yacc,zacc
41f34     28 04 64 FD |                 setq    #3-1
41f38     80 89 07 FB |                 rdlong  hr1,ptrb
41f3c                 |                 ' load limits and outptr
41f3c     28 04 64 FD |                 setq    #3-1
41f40     F6 75 03 FB |                 rdlong  htmp1,pa
41f44                 | 
41f44     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
41f48     8C 73 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
41f4c     00 72 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
41f50     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
41f54     01 72 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
41f58     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
41f5c     02 72 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
41f60     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
41f64                 |               
41f64                 | 
41f64     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
41f68     07 72 67 F7 |                 signx   htmp, #7
41f6c     B9 89 03 F1 |                 add     hr1,htmp
41f70     00 74 0F F2 |                 cmp     htmp1,#0 wz
41f74     BA 89 63 53 |         if_ne   fles    hr1,htmp1
41f78     00 88 47 53 |         if_ne   fges    hr1,#0
41f7c                 | 
41f7c     61 73 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
41f80     07 72 67 F7 |                 signx   htmp, #7
41f84     B9 8B 03 F1 |                 add     hr2,htmp
41f88     00 76 0F F2 |                 cmp     htmp2,#0 wz
41f8c     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
41f90     00 8A 47 53 |         if_ne   fges    hr2,#0
41f94                 |                 
41f94                 | 
41f94     04 92 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
41f98     00 73 C7 AA |         if_z    rdbyte  htmp, ptra
41f9c     07 72 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
41fa0     B9 8D 03 A1 |         if_z    add     hr3,htmp
41fa4                 | 
41fa4     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
41fa8     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
41fac                 | 
41fac                 |                 ' write back accumulators
41fac     28 04 64 FD |                 setq    #3-1
41fb0     80 89 67 FC |                 wrlong  hr1,ptrb
41fb4                 |                 ' if outptr set, write X/Y words
41fb4     00 78 0F F2 |                 cmp htmp3,#0                    wz
41fb8     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
41fbc     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
41fc0     2D 00 64 FD |                 ret
41fc4                 | end
41fc4                 | 
41fc4                 | '------------------------------------------------------------------------------
41fc4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
41fc4                 | '------------------------------------------------------------------------------
41fc4                 | ' On entry:
41fc4                 | ' On exit:
41fc4                 | '------------------------------------------------------------------------------
41fc4                 | if _HAVE_GAMEPAD
41fc4                 | hget_gp_in_report
41fc4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
41fc8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
41fcc                 | 
41fcc     27 91 03 F6 |                 mov     hpar2, urx_buff_p
41fd0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
41fd4     00 92 E3 F8 |                 getbyte hpar3
41fd8     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
41fdc     CF 02 A0 FD |                 call    #do_int_in
41fe0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41fe4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
41fe8                 | 
41fe8     00 92 0F F2 |                 cmp     hpar3, #0               wz
41fec     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
41ff0                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
41ff0                 | 
41ff0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
41ff4     00 72 E3 F8 |                 getbyte htmp                            ' |
41ff8     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
41ffc     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
42000     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
42004     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
42008     B9 01 C0 F8 |                 setbyte htmp                            ' |
4200c                 | 
4200c                 | ' Note: the following code compares the current and previous reports
4200c                 | ' and process the data if there are changes to ease the debug output.
4200c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
4200c                 | ' gpPreReport buffer.
4200c                 | 
4200c                 |                 ' ----- start of block to remove
4200c                 |                 {
4200c                 |                 }
4200c                 |                 ' ----- end of block to remove
4200c     04 05 90 FE |                 loc pa,#hpad_translate
42010     2A EC 63 FD |                 push pa
42014                 | 
42014                 |                 ' FALL THROUGH !!!!
42014                 | 
42014                 | '------------------------------------------------------------------------------
42014                 | ' Decode controller report
42014                 | '------------------------------------------------------------------------------
42014                 | hid_decode
42014                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
42014     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
42018     00 04 00 FF 
4201c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
42020                 | 
42020     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
42024                 | 
42024     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
42028     00 1C E3 F8 |                 getbyte hidr_type
4202c     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
42030     44 02 90 AD |         if_z    jmp     #hpad_xinput
42034     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
42038     2C 03 90 AD |         if_z    jmp     #hpad_ps3
4203c     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
42040     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
42044     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
42048                 |                 
42048                 | 
42048                 | '------------------------------------------------------------------------------
42048                 | ' Handle HID controller (or mouse now
42048                 | ' On entry:
42048                 | '   ptrb - controller report
42048                 | '------------------------------------------------------------------------------
42048                 | hpad_hid
42048     1B 01 A0 FD |                 call    #get_hid_descr_buffer
4204c     F7 F1 03 F6 |                 mov     ptra, pb
42050     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
42054     00 EC 03 F6 |                 mov     pa, 0-0
42058                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
42058     19 2A 3B FF 
4205c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
42060                 | 
42060                 | .next
42060     00 EC 5F F2 |                 cmps    pa, #0      wcz
42064     2D 00 7C ED |         if_be   ret     wcz
42068                 | 
42068     61 8F C7 FA |                 rdbyte  hpar1, ptra++
4206c     01 EC 87 F1 |                 sub     pa, #1
42070     00 90 07 F6 |                 mov     hpar2, #0
42074                 | 
42074     C7 73 03 F6 |                 mov     htmp, hpar1
42078     03 72 07 F5 |                 and     htmp, #$03
4207c     01 72 0F F2 |                 cmp     htmp, #1    wz
42080     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
42084     07 90 67 A7 |         if_z    signx   hpar2,#7
42088     01 EC 87 A1 |         if_z    sub     pa, #1
4208c     02 72 0F F2 |                 cmp     htmp, #2    wz
42090     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
42094     0F 90 67 A7 |         if_z    signx   hpar2,#15
42098     02 EC 87 A1 |         if_z    sub     pa, #2
4209c     03 72 0F F2 |                 cmp     htmp, #3    wz
420a0     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
420a4     04 EC 87 A1 |         if_z    sub     pa, #4
420a8                 | 
420a8     FC 8E 07 F5 |                 and     hpar1, #$FC
420ac                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
420ac                 | 
420ac     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
420b0     18 01 90 AD |         if_z    jmp     #.report_id
420b4     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
420b8     30 01 90 AD |         if_z    jmp     #.usage_page
420bc     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
420c0     38 01 90 AD |         if_z    jmp     #.usage
420c4     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
420c8     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
420cc     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
420d0     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
420d4     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
420d8     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
420dc     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
420e0     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
420e4     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
420e8     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
420ec     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
420f0     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
420f4     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
420f8     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
420fc     60 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
42100     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
42104     58 FF 9F 5D |         if_nz   jmp     #.next
42108                 | 
42108     D5 25 A7 FB |                 tjf     hidr_state,#.next
4210c                 | 
4210c     03 90 07 F5 |                 and     hpar2, #$03
42110     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
42114     18 00 90 5D |         if_nz   jmp     #.skip
42118                 | 
42118     02 24 0F F2 |                 cmp     hidr_state, #2  wz
4211c     20 00 90 AD |         if_z    jmp     #.axes
42120     03 24 0F F2 |                 cmp     hidr_state, #3  wz
42124     5C 00 90 AD |         if_z    jmp     #.hats
42128     04 24 0F F2 |                 cmp     hidr_state, #4  wz
4212c     70 00 90 AD |         if_z    jmp     #.buttons
42130                 | .skip
42130     93 73 03 F6 |                 mov     htmp, hidr_size
42134     94 73 03 FA |                 mul     htmp, hidr_count
42138     B9 21 03 F1 |                 add     hidr_offset, htmp
4213c     20 FF 9F FD |                 jmp     #.next
42140                 | .axes
42140                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
42140     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
42144     94 89 03 F6 |                 mov     hr1, hidr_count
42148                 | .l1
42148     90 8F 03 F6 |                 mov     hpar1, hidr_offset
4214c     93 91 03 F6 |                 mov     hpar2, hidr_size
42150     08 03 B0 FD |                 call    #hpad_getbits
42154     68 03 B0 FD |                 call    #hpad_normalize
42158     08 86 1F F2 |                 cmp     hr0, #8         wcz
4215c     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
42160     00 8A 43 C8 |         if_b    getnib  hr2
42164     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
42168     5F 01 20 C9 |         if_b    setword retval
4216c     01 86 07 C1 |         if_b    add     hr0, #1
42170     93 21 03 F1 |                 add     hidr_offset, hidr_size
42174     F4 89 6F FB |                 djnz    hr1, #.l1
42178                 | 
42178     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
4217c     01 24 07 F6 |                 mov     hidr_state, #1
42180     DC FE 9F FD |                 jmp     #.next
42184                 | .hats
42184                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
42184     90 8F 03 F6 |                 mov     hpar1, hidr_offset
42188     93 91 03 F6 |                 mov     hpar2, hidr_size
4218c     CC 02 B0 FD |                 call    #hpad_getbits
42190     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
42194     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
42198     01 24 07 F6 |                 mov     hidr_state, #1
4219c     90 FF 9F FD |                 jmp     #.skip
421a0                 | .buttons
421a0                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
421a0     90 8F 03 F6 |                 mov     hpar1, hidr_offset
421a4     93 91 03 F6 |                 mov     hpar2, hidr_size
421a8     94 91 03 FA |                 mul     hpar2, hidr_count
421ac     AC 02 B0 FD |                 call    #hpad_getbits
421b0     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
421b4     B9 BF 62 F0 |                 shl     retval, htmp
421b8     5F 19 43 F5 |                 or      hidr_buttons, retval
421bc     94 73 03 F1 |                 add     htmp, hidr_count
421c0     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
421c4     01 24 07 F6 |                 mov     hidr_state, #1
421c8     64 FF 9F FD |                 jmp     #.skip
421cc                 | .report_id
421cc     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
421d0     2D 00 7C 5D |         if_nz   ret     wcz
421d4     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
421d8     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
421dc     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
421e0     01 24 67 56 |         if_nz   neg     hidr_state,#1
421e4     01 F2 87 51 |         if_nz   sub     ptrb,#1
421e8     74 FE 9F FD |                 jmp     #.next
421ec                 | .usage_page
421ec     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
421f0     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
421f4     04 24 07 A6 |         if_z    mov     hidr_state, #4
421f8     64 FE 9F FD |                 jmp     #.next
421fc                 | .usage
421fc     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
42200     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
42204     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
42208     01 24 07 A6 |         if_z    mov     hidr_state, #1
4220c     50 FE 9F AD |         if_z    jmp     #.next
42210     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
42214     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
42218     01 24 07 A6 |         if_z    mov     hidr_state, #1
4221c     40 FE 9F AD |         if_z    jmp     #.next
42220     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
42224     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
42228     10 00 90 3D |         if_nc   jmp     #.usage_axis
4222c     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
42230     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
42234     03 24 07 A6 |         if_z    mov     hidr_state, #3
42238     24 FE 9F FD |                 jmp     #.next
4223c                 | .usage_axis
4223c     01 24 57 F2 |                 cmps    hidr_state, #1          wc
42240     1C FE 9F CD |         if_b    jmp     #.next
42244     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
42248     C8 01 00 F8 |                 setnib  hpar2
4224c                 | 
4224c     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
42250     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
42254                 | 
42254     01 22 07 F1 |                 add     hidr_usage_idx, #1
42258     02 24 07 F6 |                 mov     hidr_state, #2
4225c     00 FE 9F FD |                 jmp     #.next
42260                 | .pushpop
42260                 |                 ' Entering with C set if PUSH  
42260     38 0F B0 FE |                 loc     pb, #hid_stack
42264     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
42268     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
4226c     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
42270     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
42274     E8 FD 9F FD |                 jmp     #.next
42278                 |         
42278                 | 
42278                 | '------------------------------------------------------------------------------
42278                 | ' Handle XInput controller
42278                 | ' On entry:
42278                 | '   ptrb - controller report
42278                 | '------------------------------------------------------------------------------
42278                 | '   Default implementation translates the report to a pseudo-defacto hid
42278                 | '   standard and jumps to hpad_translate for actions.
42278                 | '   Implementors may take specific actions for this kind of controller.
42278                 | '------------------------------------------------------------------------------
42278                 | hpad_xinput
42278     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
4227c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
42280     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
42284     14 72 0F F2 |                 cmp     htmp, #$14      wz
42288     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
4228c                 | 
4228c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
4228c                 | 
4228c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
42290     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
42294                 | 
42294     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
42298     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
4229c     5F BF 22 F6 |                 not     retval
422a0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
422a4     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
422a8     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
422ac     5F BF 22 F6 |                 not     retval
422b0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
422b4                 | 
422b4     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
422b8     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
422bc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
422c0     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
422c4     F8 01 B0 FD |                 call    #hpad_normalize
422c8     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
422cc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
422d0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
422d4     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
422d8     E4 01 B0 FD |                 call    #hpad_normalize
422dc     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
422e0                 | 
422e0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
422e4     81 BF E6 FA |                 rdword  retval, ptrb[1]
422e8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
422ec     00 18 47 F4 |                 bitc    hidr_buttons, #0
422f0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
422f4     01 18 47 F4 |                 bitc    hidr_buttons, #1
422f8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
422fc     02 18 47 F4 |                 bitc    hidr_buttons, #2
42300     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
42304     03 18 47 F4 |                 bitc    hidr_buttons, #3
42308     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
4230c     04 18 47 F4 |                 bitc    hidr_buttons, #4
42310     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
42314     05 18 47 F4 |                 bitc    hidr_buttons, #5
42318     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
4231c     08 18 47 F4 |                 bitc    hidr_buttons, #8
42320     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
42324     09 18 47 F4 |                 bitc    hidr_buttons, #9
42328     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
4232c     0A 18 47 F4 |                 bitc    hidr_buttons, #10
42330     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
42334     0B 18 47 F4 |                 bitc    hidr_buttons, #11
42338     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
4233c     0C 18 47 F4 |                 bitc    hidr_buttons, #12
42340                 | 
42340     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
42344     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
42348     7A BB 7A FF 
4234c     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
42350     F9 FF 7F FF 
42354     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
42358     BA 73 5F F9 |                 altgn   htmp, #htmp1
4235c     00 72 43 F8 |                 getnib  htmp
42360     B9 1B C3 F8 |                 setbyte hidr_hats, htmp, #0
42364                 | 
42364     AC 01 90 FD |                 jmp     #hpad_translate
42368                 | 
42368                 | '------------------------------------------------------------------------------
42368                 | ' Handle PS3 controller
42368                 | ' On entry:
42368                 | '   ptrb - controller report
42368                 | '------------------------------------------------------------------------------
42368                 | '   Default implementation translates the report to a pseudo-defacto hid
42368                 | '   standard and jumps to hpad_translate for actions.
42368                 | '   Implementors may take specific actions for this kind of controller.
42368                 | '------------------------------------------------------------------------------
42368                 | hpad_ps3
42368     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
4236c     01 72 0F F2 |                 cmp     htmp, #$01      wz
42370     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
42374                 | 
42374                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
42374                 | 
42374     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
42378     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
4237c     40 01 B0 FD |                 call    #hpad_normalize
42380     5F 11 23 F9 |                 setword hidr_axis, retval, #0
42384     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
42388     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
4238c     30 01 B0 FD |                 call    #hpad_normalize
42390     5F 11 2B F9 |                 setword hidr_axis, retval, #1
42394     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
42398     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
4239c     20 01 B0 FD |                 call    #hpad_normalize
423a0     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
423a4     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
423a8     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
423ac     10 01 B0 FD |                 call    #hpad_normalize
423b0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
423b4     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
423b8     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
423bc                 | 
423bc     08 8E 07 F6 |                 mov     hpar1, #8
423c0     13 90 07 F6 |                 mov     hpar2, #19
423c4     94 00 B0 FD |                 call    #hpad_getbits
423c8                 | 
423c8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
423cc     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
423d0     00 18 47 F4 |                 bitc    hidr_buttons, #0
423d4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
423d8     01 18 47 F4 |                 bitc    hidr_buttons, #1
423dc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
423e0     02 18 47 F4 |                 bitc    hidr_buttons, #2
423e4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
423e8     03 18 47 F4 |                 bitc    hidr_buttons, #3
423ec     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
423f0     04 18 47 F4 |                 bitc    hidr_buttons, #4
423f4     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
423f8     05 18 47 F4 |                 bitc    hidr_buttons, #5
423fc     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
42400     06 18 47 F4 |                 bitc    hidr_buttons, #6
42404     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
42408     07 18 47 F4 |                 bitc    hidr_buttons, #7
4240c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
42410     08 18 47 F4 |                 bitc    hidr_buttons, #8
42414     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
42418     09 18 47 F4 |                 bitc    hidr_buttons, #9
4241c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
42420     0A 18 47 F4 |                 bitc    hidr_buttons, #10
42424     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
42428     0B 18 47 F4 |                 bitc    hidr_buttons, #11
4242c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
42430     0C 18 47 F4 |                 bitc    hidr_buttons, #12
42434                 | 
42434     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
42438     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
4243c     09 FA 79 FF 
42440     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
42444     FF FA 7F FF 
42448     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
4244c     BA 73 5F F9 |                 altgn   htmp, #htmp1
42450     00 72 43 F8 |                 getnib  htmp
42454     B9 1B C3 F8 |                 setbyte hidr_hats, htmp, #0
42458                 | 
42458     B8 00 90 FD |                 jmp     #hpad_translate
4245c                 | 
4245c                 | '------------------------------------------------------------------------------
4245c                 | ' Read bits from report data buffer
4245c                 | '------------------------------------------------------------------------------
4245c                 | ' On entry:
4245c                 | '   PTRB - report buffer
4245c                 | '   hpar1 - start bit
4245c                 | '   hpar2 - number of bits
4245c                 | ' On exit:
4245c                 | '   retval - bits
4245c                 | '------------------------------------------------------------------------------
4245c                 | hpad_getbits
4245c     C7 73 03 F6 |                 mov     htmp, hpar1
42460     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
42464     F9 73 03 F1 |                 add     htmp, ptrb
42468     B9 BF 02 FB |                 rdlong  retval, htmp
4246c                 | 
4246c     C7 75 03 F6 |                 mov     htmp1, hpar1
42470     07 74 07 F5 |                 and     htmp1, #$07     ' shift
42474     BA BF 42 F0 |                 shr     retval, htmp1
42478                 | 
42478     18 90 1F F2 |                 cmp     hpar2, #24      wcz
4247c     10 00 90 1D |         if_a    jmp     #.l1
42480                 | 
42480     C8 91 C3 F9 |                 decod   hpar2
42484     01 90 87 F1 |                 sub     hpar2, #1
42488     C8 BF 02 F5 |                 and     retval, hpar2
4248c     2D 00 64 FD |                 ret
42490                 | .l1
42490     FF 7F 00 FF 
42494     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
42498     03 72 07 F1 |                 add     htmp, #3
4249c     B9 77 03 FB |                 rdlong  htmp2, htmp
424a0     18 90 87 F1 |                 sub     hpar2, #24
424a4     C8 91 C3 F9 |                 decod   hpar2
424a8     01 90 87 F1 |                 sub     hpar2, #1
424ac     BA 77 43 F0 |                 shr     htmp2, htmp1
424b0     C8 77 03 F5 |                 and     htmp2, hpar2
424b4     18 76 67 F0 |                 shl     htmp2, #24
424b8     BB BF 42 F5 |                 or      retval, htmp2
424bc     2D 00 64 FD |                 ret
424c0                 | 
424c0                 | '------------------------------------------------------------------------------
424c0                 | ' Normalize value to signed word (-32768 / 32767)
424c0                 | '------------------------------------------------------------------------------
424c0                 | ' On entry:
424c0                 | '   retval - value to normalize
424c0                 | '   hidr_lminmax - min (word 1) max (word 0) value range
424c0                 | '   - or -
424c0                 | '   hidr_pminmax - min (word 1) max (word 0) value range
424c0                 | '   hidr_size - value bits length
424c0                 | ' On exit:
424c0                 | '   retval - normalized value
424c0                 | '------------------------------------------------------------------------------
424c0                 | hpad_normalize
424c0     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
424c4     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
424c8     2D 00 64 AD |         if_z    ret
424cc     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
424d0     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
424d4     0F 74 77 F7 |                 signx   htmp1, #15      wc
424d8     FF 27 97 C9 |         if_c    alts    hidr_size, #511
424dc     00 BE 66 C7 |         if_c    signx   retval, #0-0
424e0     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
424e4     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
424e8     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
424ec     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
424f0     B9 73 53 F6 |                 abs     htmp            wc
424f4     1F BE 0E F4 |                 testb   retval, #31     wz
424f8     5F BF 42 F6 |                 abs     retval
424fc     B9 BF 12 FD |                 qdiv    retval, htmp
42500     18 BE 62 FD |                 getqx   retval
42504     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
42508     C0 FF 7F FF 
4250c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
42510     2D 00 64 FD |                 ret
42514                 | 
42514                 | '------------------------------------------------------------------------------
42514                 | ' Perform controller actions
42514                 | ' On entry:
42514                 | '    hidr_id        report id
42514                 | '    hidr_axis      axis value (signed word, 2 axes per long)
42514                 | '                      X = hidr_axis+0, #0
42514                 | '                      Y = hidr_axis+0, #1
42514                 | '                      Z = hidr_axis+1, #0
42514                 | '                     RX = hidr_axis+1, #1
42514                 | '                     RY = hidr_axis+2, #0
42514                 | '                     RZ = hidr_axis+2, #1
42514                 | '                     Sl = hidr_axis+3, #0
42514                 | '                     Wh = hidr_axis+3, #1
42514                 | '    hidr_buttons   buttons state (bits 0 to 31)
42514                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
42514                 | '
42514                 | '                     -------3 -------2 -------1 -------0 byte
42514                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
42514                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
42514                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
42514                 | '                              |||||||| ||||++++--------- n. axes
42514                 | '                              |||||||| ++++------------- n. hats
42514                 | '                              ++++++++------------------ valid axes
42514                 | '------------------------------------------------------------------------------
42514                 | hpad_translate
42514                 | 
42514                 | 
42514                 |         if HAVE_HIDPAD
42514     98 0C F0 FE |                 loc     ptrb,#hidpad_report
42518     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
4251c     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
42520     01 72 E7 F2 |                 cmpsub  htmp,#1
42524     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
42528     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
4252c     2D 00 7C 3D |         if_ae   ret     wcz
42530     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
42534     B9 F3 03 F1 |                 add     ptrb,htmp
42538     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
4253c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
42540     28 0E 64 FD |                 setq    #8-1
42544     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
42548                 |         end
42548                 | 
42548                 | 
42548                 |         if EMUPAD_MAX_PLAYER > 0
42548                 | .emupad_no_hat
42548                 |         if EMUPAD_BT0_BIT >= 0
42548                 |         end
42548                 |         if EMUPAD_BT1_BIT >= 0
42548                 |         end
42548                 |         if EMUPAD_BT2_BIT >= 0
42548                 |         end
42548                 |         if EMUPAD_BT3_BIT >= 0
42548                 |         end
42548                 |         if EMUPAD_BT4_BIT >= 0
42548                 |         end
42548                 |         if EMUPAD_BT5_BIT >= 0
42548                 |         end
42548                 |         if EMUPAD_BT6_BIT >= 0
42548                 |         end
42548                 |         if EMUPAD_BT7_BIT >= 0
42548                 |         end
42548                 |         if EMUPAD_BT8_BIT >= 0
42548                 |         end
42548                 |         if EMUPAD_BT9_BIT >= 0
42548                 |         end
42548                 | .emupad_slot_over
42548                 |         end
42548                 | 
42548                 |         if 0
42548                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
42548                 | 
42548                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
42548                 | 
42548                 |         end
42548     2D 00 64 FD |                 ret
4254c                 | end
4254c                 | 
4254c                 | if EMUPAD_MAX_PLAYER > 0
4254c                 | '------------------------------------------------------------------------------
4254c                 | ' Clear EmuPad state
4254c                 | '------------------------------------------------------------------------------
4254c                 | emupad_reset
4254c                 | 
4254c                 | '------------------------------------------------------------------------------
4254c                 | ' Get EmuPad Player number for current device (into retval)
4254c                 | ' Z flag is also set if current device is valid
4254c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
4254c                 | '------------------------------------------------------------------------------
4254c                 | emupad_getnum
4254c                 | .loop
4254c                 | '------------------------------------------------------------------------------
4254c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
4254c                 | '------------------------------------------------------------------------------
4254c                 | emupad_discon
4254c                 | .loop         
4254c                 |         
4254c                 |         ' FALL THROUGH!!!
4254c                 | 
4254c                 | '------------------------------------------------------------------------------
4254c                 | ' Update EmuPad reports (all of them...)
4254c                 | '------------------------------------------------------------------------------
4254c                 | emupad_write_reports
4254c                 | .devloop
4254c                 | 
4254c                 | end
4254c                 | 
4254c                 | 
4254c                 | '------------------------------------------------------------------------------
4254c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
4254c                 | '------------------------------------------------------------------------------
4254c                 | ' On entry:
4254c                 | ' On exit:
4254c                 | '------------------------------------------------------------------------------
4254c                 | hget_hub_status
4254c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
42550     27 91 03 F6 |                 mov     hpar2, urx_buff_p
42554     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
42558     01 92 2F F9 |                 setword hpar3, #1, #1
4255c     CF 02 A0 FD |                 call    #do_int_in
42560     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42564     0C 00 90 AD |         if_z    jmp     #.data
42568     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
4256c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
42570     2D 00 64 FD |                 ret
42574                 | .data
42574     00 92 0F F2 |                 cmp     hpar3, #0               wz
42578     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
4257c                 | 
4257c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
42580     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
42584     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
42588     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
4258c                 |                 debug(ubin_long(hub_status_chg))
4258c                 | 
4258c     01 5A 06 F6 |                 mov     hdev_port, #1
42590                 | .loop
42590     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
42594     0C 00 B0 AD |         if_x1   call    #hub_port_handler
42598     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
4259c     F0 FF 9F 3D |         if_nc   jmp     #.loop
425a0     2D 00 64 FD |                 ret
425a4                 | 
425a4                 | hub_port_handler
425a4     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
425a8     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
425ac     27 EF 03 F6 |                 mov     pb, urx_buff_p
425b0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
425b4     55 02 A0 FD |                 call    #control_read
425b8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
425bc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
425bc                 | 
425bc     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
425c0     50 01 90 5D |         if_x0   jmp     #.other
425c4     68 02 D0 FE |                 loc     ptra, #clr_port_feat
425c8     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
425cc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
425d0     A0 02 A0 FD |                 call    #control_write
425d4     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
425d8     7C 01 90 5D |         if_x0   jmp     #.disconnect
425dc     B1 99 02 F6 |                 mov     hctwait, _100ms_
425e0     EF 02 A0 FD |                 call    #poll_waitx
425e4                 | 
425e4     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
425e8     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
425ec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
425f0     A0 02 A0 FD |                 call    #control_write
425f4                 | 
425f4     02 78 07 F6 |                 mov     htmp3, #2
425f8                 | .wait_reset
425f8     AD 99 02 F6 |                 mov     hctwait, _8ms_
425fc     EF 02 A0 FD |                 call    #poll_waitx
42600     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
42604     27 EF 03 F6 |                 mov     pb, urx_buff_p
42608     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
4260c     55 02 A0 FD |                 call    #control_read
42610     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
42614     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
42618     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
4261c                 | 
4261c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
42620     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
42624     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42628     A0 02 A0 FD |                 call    #control_write
4262c                 | 
4262c     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
42630                 | .wait_recover
42630     A8 99 02 F6 |                 mov     hctwait, _1ms_
42634     EF 02 A0 FD |                 call    #poll_waitx
42638     FD 73 6F FB |                 djnz    htmp,#.wait_recover
4263c                 | 
4263c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
42640     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
42644     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
42648                 | 
42648     00 08 00 FF 
4264c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
42650     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
42654     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
42658     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
4265c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
42660     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42664     48 01 90 5D |         if_nz   jmp     #.done
42668                 | .get_dev_desc
42668     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
4266c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
42670     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
42674     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
42678     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
4267c     01 73 57 FC |                 wrword  htmp, ptra[wValue]
42680     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
42684     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
42688     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
4268c     AD 99 02 F6 |                 mov     hctwait, _8ms_
42690     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
42694     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
42698     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
4269c     BE 00 A0 FD |                 call    #calc_crc5
426a0     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
426a4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
426a8     F7 AD C2 FA |                 rdbyte  total_data, pb
426ac     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
426b0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
426b4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
426b8     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
426bc     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
426c0     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
426c4                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
426c4     A0 99 02 F6 |                 mov     hctwait, _500us_
426c8     EF 02 A0 FD |                 call    #poll_waitx
426cc     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
426d0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
426d4     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
426d8     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
426dc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
426e0     CC 00 90 5D |         if_nz   jmp     #.done
426e4     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
426e8     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
426ec     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
426f0     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
426f4     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
426f8     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
426fc     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
42700     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
42704     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
42708     A4 00 90 CD |         if_b    jmp     #.done
4270c     60 F0 BF FD |                 call    #hparse_con_desc
42710     9C 00 90 FD |                 jmp     #.done
42714                 | 
42714                 | .other
42714     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
42718     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
4271c     28 00 90 AD |         if_x1   jmp     #.reset_feature
42720     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
42724     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
42728     1C 00 90 AD |         if_x1   jmp     #.reset_feature
4272c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
42730     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
42734     10 00 90 AD |         if_x1   jmp     #.reset_feature
42738     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
4273c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
42740     04 00 90 AD |         if_x1   jmp     #.reset_feature
42744     68 00 90 FD |                 jmp     #.done
42748                 | .reset_feature
42748     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
4274c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
42750     A0 02 A0 FD |                 call    #control_write
42754     58 00 90 FD |                 jmp     #.done
42758                 | .disconnect
42758                 | 
42758     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
4275c     00 72 E3 F8 |                 getbyte htmp
42760     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
42764     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
42768     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
4276c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
42770     00 76 06 A6 |         if_z    mov     kb_led_states, #0
42774     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
42778                 |         if EMUPAD_MAX_PLAYER > 0
42778                 |         end
42778                 |         if HAVE_MOUSE
42778     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
4277c     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
42780     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
42784                 |         end
42784                 |         if HAVE_HIDPAD
42784     28 0A F0 FE |                 loc ptrb,#hidpad_report
42788     2D 73 03 F6 |                 mov htmp,hdev_port
4278c     01 72 E7 F2 |                 cmpsub htmp,#1
42790     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
42794     B9 F3 03 F1 |                 add ptrb,htmp
42798     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
4279c     80 01 6C FC |                 wrlong #0,ptrb
427a0                 |         end
427a0                 | 
427a0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
427a4     00 00 C4 F8 |                 setbyte #0
427a8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
427ac     00 00 04 F6 |                 mov     0-0, #0
427b0                 | 
427b0                 | .done
427b0     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
427b4     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
427b8     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
427bc     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
427c0     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
427c4     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
427c8                 | 
427c8     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
427cc     27 EF 03 F6 |                 mov     pb, urx_buff_p
427d0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
427d4     55 02 A0 FD |                 call    #control_read
427d8     00 69 06 FB |                 rdlong  hub_port_status, ptra
427dc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
427dc     2D 00 64 FD |                 ret
427e0                 | 
427e0                 | '------------------------------------------------------------------------------
427e0                 | ' Partially populated SETUP packets
427e0                 | '------------------------------------------------------------------------------
427e0     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
427e1     06          |                 byte    REQ_GET_DESC
427e2     00 01       |                 word    TYPE_DEVICE << 8
427e4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
427e6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
427e8     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
427e9     06          |                 byte    REQ_GET_DESC
427ea     00 02       |                 word    TYPE_CONFIG << 8
427ec     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
427ee     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
427f0     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
427f1     09          |                 byte    REQ_SET_CONFIG
427f2     00 00       |                 word    0       ' Configuration value
427f4     00 00       |                 word    0       ' Zero
427f6     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
427f8     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
427f9     05          |                 byte    REQ_SET_ADDR
427fa     00 00       |                 word    0       ' Zero
427fc     00 00       |                 word    0       ' Zero
427fe     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
42800                 | '------------------------------------------------------------------------------
42800                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
42800                 | ' wValue field dictates which protocol should be used.
42800                 | '
42800                 | ' When initialized, all devices default to report protocol. However the host
42800                 | ' should not make any assumptions about the device state and should set the
42800                 | ' desired protocol whenever initializing a device.
42800                 | '------------------------------------------------------------------------------
42800     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
42801     0B          |                 byte    HID_SET_PROTO
42802     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
42804                 |                                                 ' (HID 1.11 Section 7.2.6).
42804     00 00       |                 word    0               ' Interface index number.
42806     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
42808                 | '------------------------------------------------------------------------------
42808     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
42809     0A          |                 byte    HID_SET_IDLE
4280a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
4280c                 |                                         ' reporting until a change is detected in the report data
4280c                 | 
4280c                 |                                         ' (HID 1.11 Section 7.2.4).
4280c     00 00       |                 word    0       ' Interface index number.
4280e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
42810     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
42811     09          |                 byte    HID_SET_REPORT
42812     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
42814                 |                                         ' (HID 1.11 Section 7.2.2).
42814     00 00       |                 word    0       ' Interface index number.
42816     00 00       |                 word    0       ' Size of the report, in bytes.
42818     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
42819     06          |                 byte    REQ_GET_DESC
4281a     00 22       |                 word    TYPE_REPORT << 8
4281c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
4281e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42820                 | '------------------------------------------------------------------------------
42820     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
42821     06          |                 byte    REQ_GET_DESC
42822     00 29       |                 word    TYPE_HUB << 8
42824     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
42826     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42828     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
42829     03          |                 byte    REQ_SET_FEATURE
4282a     00 00       |                 word    0       ' port power
4282c     01 00       |                 word    1       ' Port index number (1+)
4282e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42830     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
42831     01          |                 byte    REQ_CLEAR_FEATURE
42832     00 00       |                 word    0       ' port power
42834     01 00       |                 word    1       ' Port index number (1+)
42836     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
42838     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
42839     00          |                 byte    REQ_GET_STATUS
4283a     00 00       |                 word    0
4283c     01 00       |                 word    1       ' Port index number (1+)
4283e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
42840                 | '------------------------------------------------------------------------------
42840                 | if _HAVE_GAMEPAD
42840     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
42844                 | ps3_command_buff
42844     00 00 00 00 
42848     00          |                 byte    $00, $00, $00, $00, $00
42849     00 00 00 00 
4284d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
4284e     FF 27 10 00 
42852     32          |                 byte    $FF, $27, $10, $00, $32
42853     FF 27 10 00 
42857     32          |                 byte    $FF, $27, $10, $00, $32
42858     FF 27 10 00 
4285c     32          |                 byte    $FF, $27, $10, $00, $32
4285d     FF 27 10 00 
42861     32          |                 byte    $FF, $27, $10, $00, $32
42862     00 00 00 00 
42866     00          |                 byte    $00, $00, $00, $00, $00
42867     00 00 00 00 
4286b     00          |                 byte    $00, $00, $00, $00, $00
4286c     00 00 00 00 
42870     00          |                 byte    $00, $00, $00, $00, $00
42871     00 00 00    |                 byte    $00, $00, $00
42874                 | '------------------------------------------------------------------------------
42874     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
42877                 |                                         ' 0x01 All blinking
42877                 |                                         ' 0x02 1 flashes, then on
42877                 |                                         ' 0x03 2 flashes, then on
42877                 |                                         ' 0x04 3 flashes, then on
42877                 |                                         ' 0x05 4 flashes, then on
42877                 |                                         ' 0x06 1 on
42877                 |                                         ' 0x07 2 on
42877                 |                                         ' 0x08 3 on
42877                 |                                         ' 0x09 4 on
42877                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
42877                 |                                         ' 0x0B Blinking*
42877                 |                                         ' 0x0C Slow blinking*
42877                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
42877     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
4287a     00          |                 byte    $00             ' Left rumble
4287b     00          |                 byte    $00             ' Right rumble
4287c     00 00 00    |                 byte    $00, $00, $00
4287f     00          | end
42880                 | alignl
42880                 | 
42880                 | if HAVE_MOUSE
42880     00 00 00 00 
42884     00 00 00 00 | mouse_limits long 0[2]
42888     00 00 00 00 | mouse_outptr long 0
4288c                 | end
4288c                 | 
4288c                 | if KEYQUEUE_SIZE > 0
4288c     00          | keyq_head byte 0
4288d     00          | keyq_tail byte 0
4288e     00 00 00 00 
      ...             
42a8a     00 00 00 00 
42a8e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
42a90                 | alignl
42a90                 | end
42a90                 | 
42a90                 | if EMUPAD_MAX_PLAYER > 0
42a90                 | emupad_rule_buffer
42a90                 | if EMUPAD_BUILTIN_RULES
42a90                 | file "padmap_builtin.dat"
42a90                 | end
42a90                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
42a90                 | '' Default rule directly follows!
42a90                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
42a90                 | end
42a90                 | 
42a90                 | '------------------------------------------------------------------------------
42a90                 | ' The USB data cache area gets zero-filled at every device disconnect
42a90                 | '------------------------------------------------------------------------------
42a90                 | usb_cache_start
42a90                 | 
42a90                 | ' HID descriptor and report buffers
42a90                 | if !!OVERLAP_MEMORY
42a90     00 00 00 00 
      ...             
43188     00 00 00 00 
4318c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
43190                 | end
43190     00 00 00 00 
43194     00 00 00 00 | hkbd_report     byte    0[8]
43198     00 00 00 00 | hkbd_led_rep    byte    0
4319c                 | alignl
4319c                 | 
4319c     00 00 00 00 
431a0     00 00 00 00 
431a4     00 00 00 00 
431a8     00 00 00 00 
431ac     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
431b0                 | 
431b0                 | if HAVE_HIDPAD
431b0     00 00 00 00 
      ...             
43288     00 00 00 00 
4328c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
43290                 | end
43290                 | 
43290                 | ' HUB descriptor
43290     00          | hub_descr       byte    0   ' bDescLength
43291     00          |                 byte    0   ' bDescriptorType
43292     00          |                 byte    0   ' bNbrPorts
43293     00 00       |                 word    0   ' wHubCharacteristics
43295     00          |                 byte    0   ' bPwrOn2PwrGood
43296     00          |                 byte    0   ' bHubContrCurrent
43297     00          |                 byte    0   ' DeviceRemoveable
43298     00          |                 byte    0   ' PortPwrCtrlMask
43299                 | 
43299                 | usb_cache_end
43299                 | 
43299                 | if HAVE_MOUSE
43299     00 00 00 00 | mouse_xacc      long 0
4329d     00 00 00 00 | mouse_yacc      long 0
432a1     00 00 00 00 | mouse_zacc      long 0
432a5     00          | mouse_bstate    byte 0
432a6     00          | mouse_lpending  byte 0
432a7     00          | mouse_rpending  byte 0
432a8     00          | mouse_mpending  byte 0
432a9     00          | mouse_lock      byte 0
432aa     00 00 00    |                 byte 0[3] ' padding
432ad                 | end
432ad                 | 
432ad     00 00 00 00 
      ...             
43325     00 00 00 00 
43329     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
4332d     00 00 00 00 
43331     00 00 00 00 
43335     00 00 00 00 
43339     00 00 00 00 
4333d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
4333f     00 00 00 00 
      ...             
43437     00 00 00 00 
4343b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
4343f                 | 
4343f     00          | driver_cog      byte    0                       ' Current driver cog + 1
43440                 | 	alignl
43440                 | _audio096_spin2_dat_
43440                 | 
43440                 | audio       org     0
43440                 | 
43440     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
43444     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
43448     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
4344c                 |  
4344c     01 EC 63 FD |             cogid   pa                   ' compute cogid
43450     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
43454     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
43458     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
4345c                 | 
4345c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
43460     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
43464     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
43468     0F 24 06 FC |             wrpin   dac2,#right
4346c     0F 00 1E FC |             wxpin   #256,#right    
43470     41 9C 64 FD |             dirh    #left addpins 1
43474     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
43478     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
4347c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
43480                 |             
43480                 | '---------------------------------------------------------------------------------        
43480                 | '----------------- The main loop -------------------------------------------------
43480                 | '---------------------------------------------------------------------------------
43480                 | 
43480     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
43484     10 00 90 CD |       if_c  jmp     #loop1
43488                 |   
43488     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
4348c     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
43490     D5 00 80 F1 |             sub     0-0,a40000000
43494     FD 01 6E FB |             djnz    cn,#p402
43498                 |     
43498     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
4349c     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
434a0     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
434a4     01 00 06 C6 |     if_c    mov     cn,#1
434a8     DA 02 3A F3 |             fle     ct,time3 wcz
434ac     02 00 06 C6 |     if_c    mov     cn,#2     
434b0     DB 02 3A F3 |             fle     ct,time4 wcz
434b4     03 00 06 C6 |     if_c    mov     cn,#3
434b8     DC 02 3A F3 |             fle     ct,time5 wcz
434bc     04 00 06 C6 |     if_c    mov     cn,#4
434c0     DD 02 3A F3 |             fle     ct,time6 wcz
434c4     05 00 06 C6 |     if_c    mov     cn,#5
434c8     DE 02 3A F3 |             fle     ct,time7 wcz
434cc     06 00 06 C6 |     if_c    mov     cn,#6
434d0     DF 02 3A F3 |             fle     ct,time8 wcz
434d4     07 00 06 C6 |     if_c    mov     cn,#7
434d8                 | 
434d8                 | 
434d8                 | '----------------------------------------------------------------------------------
434d8                 | '------------- Compute channel samples --------------------------------------------
434d8                 | '----------------------------------------------------------------------------------
434d8                 | 
434d8                 | 
434d8     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
434dc     06 C0 65 F0 |             shl     channeladd,#6
434e0     E0 F0 03 F1 |             add     ptra,channeladd
434e4                 | 
434e4     28 16 64 FD |             setq    #11                        	' read parameters
434e8     00 D7 05 FB |             rdlong  pointer0,ptra
434ec                 |     	    
434ec     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
434f0     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
434f4     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
434f8     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
434fc     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
43500     00 C4 0D F2 |             cmp     qq,#0 wz                         
43504     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
43508     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
4350c                 |             
4350c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
43510     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
43514     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
43518                 | 
43518     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
4351c     EC 08 3A F9 |             getword oldrs,sample0,#1
43520     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
43524     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
43528     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
4352c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
43530                 | 
43530     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
43534     00 04 02 F6 |             mov     dt0,0-0    
43538     D7 04 82 F1 |             sub     dt0,time0
4353c                 |             
4353c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
43540     FB 00 00 F1 |             add     0-0,afreq0  	
43544                 |             
43544                 | '---- envelopes
43544                 |             
43544     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
43548     20 00 00 AF 
4354c     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
43550     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
43554                 | 
43554     FB 48 02 F6 |             mov     envs1,afreq0
43558     F5 48 02 FA |             mul     envs1,envspd0
4355c     24 E7 01 F1 |             add     envph0,envs1 
43560                 | 
43560     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
43564     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
43568     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
4356c     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
43570     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
43574     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
43578     00 46 06 36 |     if_ge   mov     envlo,#0
4357c     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
43580     16 E6 65 30 |     if_ge   shl     envph0,#22
43584                 | 
43584     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
43588     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
4358c     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
43590     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
43594     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
43598     24 49 32 F9 |             getword envs1,envs1,#0		' current value
4359c     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
435a0     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
435a4     23 49 02 FA |             mul     envs1,envlo
435a8     25 49 02 F1 |             add     envs1,envs2
435ac     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
435b0                 |             
435b0     1B DA 0D F4 | p410        testb   sstart0, #27 wz
435b4     1B C6 61 AD |     if_z    getrnd  spl
435b8     58 00 90 AD |     if_z    jmp     #p406
435bc                 |  
435bc     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
435c0     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
435c4     08 D6 45 F0 |             shr     pointer0,#8
435c8                 |          
435c8     1F DA 0D F4 |             testb   sstart0,#31 wz            
435cc     01 D6 65 A0 |     if_z    shl     pointer0,#1        
435d0     1C DA 0D F4 |             testb   sstart0,#28 wz            
435d4     01 D6 65 A0 |     if_z    shl     pointer0,#1        
435d8                 |         
435d8     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
435dc     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
435e0     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
435e4                 |             
435e4     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
435e8     ED C4 01 F1 |             add     qq,sstart0            
435ec                 | 
435ec     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
435f0     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
435f4     1C 01 B0 1D |     if_gt   call    #cache_read
435f8                 |          
435f8     1F DA 0D F4 |             testb   sstart0,#31 wz 
435fc     08 C6 65 50 |     if_nz   shl     spl,#8
43600     08 D6 65 50 |     if_nz   shl     pointer0,#8
43604     07 D6 65 A0 |     if_z    shl     pointer0,#7
43608     1C DA 0D F4 |             testb   sstart0,#28 wz            
4360c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
43610     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
43614                 | 
43614                 | 
43614     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
43618     00 C6 01 F6 |             mov     spl,0-0
4361c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
43620     00 C6 01 F6 |             mov     spl,0-0
43624                 | 
43624     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
43628     00 0A 02 F6 |             mov     ls0,0-0
4362c     20 00 00 FF 
43630     00 C4 05 F6 |             mov     qq,##16384
43634     FE C4 81 F1 |             sub     qq,apan0
43638     E2 C6 31 FA |             scas    spl,qq
4363c     00 0C 02 F6 |             mov     rs0, 0-0
43640                 | 
43640     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
43644     06 11 02 F1 |             add     rs,rs0
43648     03 0F 82 F1 |             sub     ls,oldls
4364c     05 0F 02 F1 |             add     ls,ls0
43650                 |    
43650     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
43654     05 D9 21 F9 |             setword sample0,ls0,#0
43658                 |             
43658     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
4365c     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
43660     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
43664                 |   '  if_z    mov     sample0,#0
43664     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
43668     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
4366c     04 00 00 AF 
43670     00 B0 05 A1 |     if_z    add     time1,##2048
43674     D8 B2 01 A6 |     if_z    mov     time2,time1
43678     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
4367c                 | 
4367c     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
43680     00 D7 65 FC |             wrlong  pointer0,ptra
43684     08 E7 65 FC |             wrlong  envph0,ptra[8]
43688     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
4368c                 |                       
4368c     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
43690     FF C3 25 A7 |     if_z    decmod  front, #511          
43694                 |          
43694     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
43698     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
4369c     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
436a0     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
436a4                 | 	    
436a4                 | 		    
436a4     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
436a8     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
436ac     04 15 02 F6 |             mov     newsample, oldrs       
436b0                 | 
436b0     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
436b4     02 AF 01 F1 |             add     time0,dt0    
436b8                 |                                      
436b8     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
436bc     D8 FD 9F AD |     if_z    jmp     #loop1
436c0     02 C5 01 F6 |             mov     qq,dt0
436c4                 | 
436c4                 |     
436c4                 |             
436c4     01 4E 36 F0 | p301        rol     dropper,#1 wc
436c8     40 00 90 3D |     if_nc   jmp     #p399
436cc     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
436d0     00 C2 9D F2 |             cmpr    front, #0-0 wcz
436d4     F4 FF 9F AD |     if_e    jmp     #p398   
436d8                 | 		
436d8     00 1A 0E F2 | 	    cmp     scbase,#0 wz
436dc     20 00 90 AD |     if_z    jmp     #p302	   
436e0                 |   
436e0     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
436e4     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
436e8     02 1E 66 C0 |     if_c    shl     scptr2,#2
436ec     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
436f0     60 1E 66 FC |             wrlong  scptr2,#$60
436f4     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
436f8     01 00 00 CF 
436fc     7F 1C 06 C7 |     if_c    incmod  scptr,##639
43700                 | 			    
43700     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
43704     00 00 00 FF 
43708     FF C3 05 F7 |             incmod  front, ##511
4370c     ED C5 6D FB | p399        djnz    qq,#p301
43710                 |             
43710     6C FD 9F FD |             jmp     #loop            'loop
43714                 | 
43714                 | '----------------------------------------------------------------------------------
43714                 | '------------- This is the end of the main loop -----------------------------------
43714                 | '----------------------------------------------------------------------------------
43714                 | 
43714                 | '----------------------------------------------------------------------------------
43714                 | '------------- PSRAM cache ----------- --------------------------------------------
43714                 | '----------------------------------------------------------------------------------
43714                 | 
43714                 | ' There are 8 cache pointers for 8 channels
43714                 | ' if 24 higher bits of address=cache, then get a word from the cache
43714                 | ' else load the cache from PSRAM, update the pointer, then read a sample
43714                 | 
43714                 | 
43714     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
43718                 |             
43718     E2 40 02 F6 | 	    mov     addrhi,qq		
4371c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
43720     14 01 96 F9 | 	    alts    cn,#cache1            
43724     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
43728     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
4372c                 | 	
4372c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
43730     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
43734     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
43738     08 38 66 F0 | 	    shl     cmd,#8
4373c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
43740     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
43744     08 3A 66 F0 |             shl     hubaddr,#8                  '
43748     13 3B 02 F1 |             add     hubaddr,hubptr 
4374c     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
43750     28 04 64 FD |             setq    #2                          ' write 3 longs
43754     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
43758     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
4375c     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
43760                 |             
43760                 | 	
43760     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
43764     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
43768     13 C5 01 F1 | 	    add     qq,hubptr
4376c     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
43770     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
43774                 |           
43774                 | 
43774                 | '--------------------------------------------------------------------------
43774                 | '------ Interrupt service -------------------------------------------------
43774                 | '------ Output the sample, get the next one if exists ---------------------
43774                 | '--------------------------------------------------------------------------
43774                 | 
43774     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
43778     0F D0 25 FC |             wypin   rsample,#right       '4
4377c     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
43780     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
43784     FF F3 07 57 |     if_ne   incmod  ptrb,#511
43788     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
4378c     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
43790                 |     
43790     F5 FF 3B FB |             reti1                        '17/19 
43794                 |           
43794                 | '---------------------------------------------------------------------------
43794                 | '-------- End of interrupt -------------------------------------------------
43794                 | '---------------------------------------------------------------------------    
43794                 | 
43794                 | 
43794                 | '---------------------------------------------------------------------------
43794                 | '------- Variables ---------------------------------------------------------
43794                 | '---------------------------------------------------------------------------
43794                 | 
43794                 | ' constants
43794                 | 
43794     00 00 00 40 | a40000000   long $40000000
43798     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
4379c                 | 
4379c                 | ' Time variables
4379c                 | 
4379c     00 00 00 00 | time0       long 0    ' Global sample computing time
437a0     01 00 00 00 | time1       long 1    ' Local channels time
437a4     02 00 00 00 | time2       long 2
437a8     03 00 00 00 | time3       long 3
437ac     04 00 00 00 | time4       long 4
437b0     05 00 00 00 | time5       long 5
437b4     06 00 00 00 | time6       long 6
437b8     07 00 00 00 | time7       long 7
437bc     08 00 00 00 | time8       long 8
437c0                 | 
437c0     00 00 00 00 | channeladd long 0
437c4                 | 
437c4     00 00 00 00 | front       long 0
437c8                 | 
437c8                 | ' temporary variables 
437c8     00 00 00 00 | qq          long 0
437cc     00 00 00 00 | spl         long 0
437d0     00 00 00 00 | zero        long 0
437d4     00 00 00 00 | mailbox     long 0
437d8     00 00 00 00 | mailbox2 long 0
437dc                 | 
437dc                 | ' Interrupt ISR variables
437dc                 | 
437dc     00 00 00 00 | lsample     long 0
437e0     00 00 00 00 | rsample     long 0
437e4     00 00 00 00 | lsnext      long 0
437e8     00 00 00 00 | rsnext      long 0 
437ec                 | 
437ec                 | ' channel parameter block
437ec                 | 
437ec     00 00 00 00 | pointer0    long 0     
437f0     00 00 00 00 | sample0     long 0
437f4     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
437f8     00 00 00 00 | lstart0     long 0
437fc     00 00 00 00 | lend0       long 0
43800     00 00 00 00 | volpan0     long 0
43804     00 00 00 00 | freqskip0   long 0
43808     00 00 00 00 | command0    long 0
4380c     00 00 00 00 | envph0	    long 0
43810     00 00 00 00 | envptr0	    long 0
43814     00 00 00 00 | envspd0	    long 0
43818     00 00 00 00 | envlen0	    long 0
4381c     00 00 00 00 | res5	    long 0
43820     00 00 00 00 | res6	    long 0
43824     00 00 00 00 | res7	    long 0
43828     00 00 00 00 | res8	    long 0
4382c                 | 
4382c     00 00 00 00 | afreq0      long 0
43830     00 00 00 00 | askip0      long 0
43834     00 00 00 00 | avol0       long 0
43838     00 00 00 00 | apan0       long 0
4383c                 | 
4383c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
43840     00 00 00 00 | cn          long 0
43844     00 00 00 00 | ct          long 0
43848     00 00 00 00 | dt0         long 0
4384c                 | 
4384c                 | ' Samples
4384c     00 00 00 00 | oldls       long 0
43850     00 00 00 00 | oldrs       long 0
43854                 | 
43854     00 00 00 00 | ls0         long 0
43858     00 00 00 00 | rs0         long 0
4385c                 | 
4385c     00 00 00 00 | ls          long 0    
43860     00 00 00 00 | rs          long 0
43864                 | 
43864     00 00 00 00 | oldsample   long 0
43868     00 00 00 00 | newsample   long 0
4386c                 | 
4386c     00 00 00 00 | nrsample    long 0
43870     00 00 00 00 | nlsample    long 0
43874                 | 
43874     00 00 00 00 | scbase long 0
43878     00 00 00 00 | scptr long 0
4387c     00 00 00 00 | scptr2 long 0
43880     00 00 00 00 | scope long 0
43884                 | 
43884     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
43888     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
4388c                 | 
4388c     00 18 07 00 | hubptr      long $71800
43890     00 00 00 00 | cache1      long 0
43894     00 00 00 00 | cache2      long 0
43898     00 00 00 00 | cache3      long 0
4389c     00 00 00 00 | cache4      long 0
438a0     00 00 00 00 | cache5      long 0
438a4     00 00 00 00 | cache6      long 0
438a8     00 00 00 00 | cache7      long 0
438ac     00 00 00 00 | cache8      long 0
438b0                 | 
438b0                 | 
438b0     00 00 00 00 | cmd         long 0
438b4     00 00 00 00 | hubaddr     long 0
438b8     00 01 00 00 | count       long 256
438bc     00 00 00 00 | addrlo long 0
438c0     00 00 00 00 | addrhi long 0
438c4     00 00 00 00 | pointer00 long 0
438c8     00 00 00 00 | envhi long 0
438cc     00 00 00 00 | envlo long 0
438d0     00 00 00 00 | envs1 long 0
438d4     00 00 00 00 | envs2 long 0
438d8     00 00 00 00 | noise0 long 0
438dc     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
438e0     00 00 00 00 
438e4     00 00 00 00 | null  			long 	0,0           ' for channel reset
438e8                 | 	alignl
438e8                 | __system__dat_
438e8     00 00 00 00 
438ec     00 00 00 00 | 	byte	$00[8]
438f0     03 00 00 00 
438f4     00 00 00 00 
438f8     00 00 00 00 
438fc     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
43900     00 00 00 00 
      ...             
43b8c     00 00 00 00 
43b90     00 00 00 00 | 	byte	$00[660]
43b94     00 00 10 0B | 	long	(177 {__system____root_opendir})<<20
43b98     00 00 20 0B | 	long	(178 {__system____root_closedir})<<20
43b9c     00 00 30 0B | 	long	(179 {__system____root_readdir})<<20
43ba0     00 00 40 0B | 	long	(180 {__system____root_stat})<<20
43ba4     00 00 00 00 
43ba8     00 00 00 00 
43bac     00 00 00 00 
43bb0     00 00 00 00 
43bb4     00 00 00 00 
43bb8     00 00 00 00 
43bbc     00 00 00 00 | 	byte	$00[28]
43bc0     28 3C 04 00 | 	long	@@@__system__dat_ + 832
43bc4     2B 3C 04 00 | 	long	@@@__system__dat_ + 835
43bc8     4C 3C 04 00 | 	long	@@@__system__dat_ + 868
43bcc     65 3C 04 00 | 	long	@@@__system__dat_ + 893
43bd0     80 3C 04 00 | 	long	@@@__system__dat_ + 920
43bd4     9A 3C 04 00 | 	long	@@@__system__dat_ + 946
43bd8     AA 3C 04 00 | 	long	@@@__system__dat_ + 962
43bdc     BC 3C 04 00 | 	long	@@@__system__dat_ + 980
43be0     CE 3C 04 00 | 	long	@@@__system__dat_ + 998
43be4     E0 3C 04 00 | 	long	@@@__system__dat_ + 1016
43be8     EC 3C 04 00 | 	long	@@@__system__dat_ + 1028
43bec     FD 3C 04 00 | 	long	@@@__system__dat_ + 1045
43bf0     11 3D 04 00 | 	long	@@@__system__dat_ + 1065
43bf4     1B 3D 04 00 | 	long	@@@__system__dat_ + 1075
43bf8     2B 3D 04 00 | 	long	@@@__system__dat_ + 1091
43bfc     3A 3D 04 00 | 	long	@@@__system__dat_ + 1106
43c00     50 3D 04 00 | 	long	@@@__system__dat_ + 1128
43c04     69 3D 04 00 | 	long	@@@__system__dat_ + 1153
43c08     7D 3D 04 00 | 	long	@@@__system__dat_ + 1173
43c0c     8B 3D 04 00 | 	long	@@@__system__dat_ + 1187
43c10     9F 3D 04 00 | 	long	@@@__system__dat_ + 1207
43c14     AB 3D 04 00 | 	long	@@@__system__dat_ + 1219
43c18     BD 3D 04 00 | 	long	@@@__system__dat_ + 1237
43c1c     D5 3D 04 00 | 	long	@@@__system__dat_ + 1261
43c20     E7 3D 04 00 | 	long	@@@__system__dat_ + 1279
43c24     FA 3D 04 00 | 	long	@@@__system__dat_ + 1298
43c28     4F 4B 00 4E 
43c2c     75 6D 65 72 
43c30     69 63 61 6C 
43c34     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
43c38     75 6D 65 6E 
43c3c     74 20 6F 75 
43c40     74 20 6F 66 
43c44     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
43c48     61 69 6E 00 
43c4c     52 65 73 75 
43c50     6C 74 20 6E 
43c54     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
43c58     65 70 72 65 
43c5c     73 65 6E 74 
43c60     61 62 6C 65 
43c64     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
43c68     65 67 61 6C 
43c6c     20 6D 75 6C 
43c70     74 69 62 79 
43c74     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
43c78     65 71 75 65 
43c7c     6E 63 65 00 
43c80     4E 6F 20 73 
43c84     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
43c88     66 69 6C 65 
43c8c     20 6F 72 20 
43c90     64 69 72 65 
43c94     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
43c98     79 00 42 61 
43c9c     64 20 66 69 
43ca0     6C 65 20 6E 
43ca4     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
43ca8     72 00 50 65 
43cac     72 6D 69 73 
43cb0     73 69 6F 6E 
43cb4     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
43cb8     69 65 64 00 
43cbc     4E 6F 74 20 
43cc0     65 6E 6F 75 
43cc4     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
43cc8     65 6D 6F 72 
43ccc     79 00 54 65 
43cd0     6D 70 6F 72 
43cd4     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
43cd8     66 61 69 6C 
43cdc     75 72 65 00 
43ce0     46 69 6C 65 
43ce4     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
43ce8     73 74 73 00 
43cec     49 6E 76 61 
43cf0     6C 69 64 20 
43cf4     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
43cf8     6D 65 6E 74 
43cfc     00 54 6F 6F 
43d00     20 6D 61 6E 
43d04     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
43d08     65 6E 20 66 
43d0c     69 6C 65 73 
43d10     00 49 2F 4F 
43d14     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
43d18     6F 72 00 4E 
43d1c     6F 74 20 61 
43d20     20 64 69 72 
43d24     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
43d28     72 79 00 49 
43d2c     73 20 61 20 
43d30     64 69 72 65 
43d34     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
43d38     79 00 52 65 
43d3c     61 64 20 6F 
43d40     6E 6C 79 20 
43d44     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
43d48     20 73 79 73 
43d4c     74 65 6D 00 
43d50     46 75 6E 63 
43d54     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
43d58     20 6E 6F 74 
43d5c     20 69 6D 70 
43d60     6C 65 6D 65 
43d64     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
43d68     00 44 69 72 
43d6c     65 63 74 6F 
43d70     72 79 20 6E 
43d74     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
43d78     6D 70 74 79 
43d7c     00 4E 61 6D 
43d80     65 20 74 6F 
43d84     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
43d88     6E 67 00 44 
43d8c     65 76 69 63 
43d90     65 20 6E 6F 
43d94     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
43d98     65 6B 61 62 
43d9c     6C 65 00 42 
43da0     61 64 20 61 
43da4     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
43da8     73 73 00 42 
43dac     72 6F 6B 65 
43db0     6E 20 63 6F 
43db4     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
43db8     74 69 6F 6E 
43dbc     00 44 65 76 
43dc0     69 63 65 20 
43dc4     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
43dc8     65 73 6F 75 
43dcc     72 63 65 20 
43dd0     62 75 73 79 
43dd4     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
43dd8     73 73 20 64 
43ddc     65 76 69 63 
43de0     65 20 6C 69 
43de4     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
43de8     6F 20 73 70 
43dec     61 63 65 20 
43df0     6F 6E 20 64 
43df4     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
43df8     65 00 55 6E 
43dfc     6B 6E 6F 77 
43e00     6E 20 65 72 
43e04     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
43e08     00 00 00 00 
43e0c     00 00 00 00 
43e10     00 00 00 00 | 	byte	$00[12]
43e14     05 00 00 00 
43e18     00 00 00 00 
43e1c     00 00 00 00 
43e20     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
43e24     00 00 00 00 | 	byte	$00, $00, $00, $00
43e28     00 00 90 0C | 	long	(201 {__system___tx})<<20
43e2c     00 00 A0 0C | 	long	(202 {__system___rx})<<20
43e30     00 00 00 00 | 	byte	$00, $00, $00, $00
43e34     00 00 B0 0C | 	long	(203 {__system___rxtxioctl_0785})<<20
43e38     00 00 C0 0C | 	long	(204 {__system____dummy_flush_0786})<<20
43e3c     00 00 00 00 
43e40     00 00 00 00 | 	byte	$00[8]
43e44     01 00 00 00 
43e48     06 00 00 00 
43e4c     00 00 00 00 
43e50     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
43e54     00 00 00 00 
43e58     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
43e5c     00 00 90 0C | 	long	(201 {__system___tx})<<20
43e60     00 00 A0 0C | 	long	(202 {__system___rx})<<20
43e64     00 00 00 00 | 	byte	$00, $00, $00, $00
43e68     00 00 B0 0C | 	long	(203 {__system___rxtxioctl_0785})<<20
43e6c     00 00 C0 0C | 	long	(204 {__system____dummy_flush_0786})<<20
43e70     00 00 00 00 
43e74     00 00 00 00 | 	byte	$00[8]
43e78     01 00 00 00 
43e7c     06 00 00 00 
43e80     00 00 00 00 
43e84     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
43e88     00 00 00 00 
43e8c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
43e90     00 00 90 0C | 	long	(201 {__system___tx})<<20
43e94     00 00 A0 0C | 	long	(202 {__system___rx})<<20
43e98     00 00 00 00 | 	byte	$00, $00, $00, $00
43e9c     00 00 B0 0C | 	long	(203 {__system___rxtxioctl_0785})<<20
43ea0     00 00 C0 0C | 	long	(204 {__system____dummy_flush_0786})<<20
43ea4     00 00 00 00 
      ...             
44014     00 00 00 00 
44018     00 00 00 00 | 	byte	$00[376]
4401c     20 40 04 00 | 	long	@@@__system__dat_ + 1848
44020     00 00 00 00 
44024     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
44028                 | 	alignl
44028                 | _fatfs_cc_dat_
44028     C7 00 FC 00 
4402c     E9 00 E2 00 
44030     E4 00 E0 00 
44034     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
44038     EA 00 EB 00 
4403c     E8 00 EF 00 
44040     EE 00 EC 00 
44044     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
44048     C9 00 E6 00 
4404c     C6 00 F4 00 
44050     F6 00 F2 00 
44054     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
44058     FF 00 D6 00 
4405c     DC 00 F8 00 
44060     A3 00 D8 00 
44064     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
44068     E1 00 ED 00 
4406c     F3 00 FA 00 
44070     F1 00 D1 00 
44074     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
44078     BF 00 AE 00 
4407c     AC 00 BD 00 
44080     BC 00 A1 00 
44084     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
44088     91 25 92 25 
4408c     93 25 02 25 
44090     24 25 C1 00 
44094     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
44098     A9 00 63 25 
4409c     51 25 57 25 
440a0     5D 25 A2 00 
440a4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
440a8     14 25 34 25 
440ac     2C 25 1C 25 
440b0     00 25 3C 25 
440b4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
440b8     5A 25 54 25 
440bc     69 25 66 25 
440c0     60 25 50 25 
440c4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
440c8     F0 00 D0 00 
440cc     CA 00 CB 00 
440d0     C8 00 31 01 
440d4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
440d8     CF 00 18 25 
440dc     0C 25 88 25 
440e0     84 25 A6 00 
440e4     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
440e8     D3 00 DF 00 
440ec     D4 00 D2 00 
440f0     F5 00 D5 00 
440f4     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
440f8     DE 00 DA 00 
440fc     DB 00 D9 00 
44100     FD 00 DD 00 
44104     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
44108     AD 00 B1 00 
4410c     17 20 BE 00 
44110     B6 00 A7 00 
44114     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
44118     B0 00 A8 00 
4411c     B7 00 B9 00 
44120     B3 00 B2 00 
44124     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
44128     61 00 1A 03 
4412c     E0 00 17 03 
44130     F8 00 07 03 
44134     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
44138     78 01 00 01 
4413c     30 01 32 01 
44140     06 01 39 01 
44144     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
44148     2E 01 79 01 
4414c     06 01 80 01 
44150     4D 00 43 02 
44154     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
44158     82 01 84 01 
4415c     84 01 86 01 
44160     87 01 87 01 
44164     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
44168     8B 01 8B 01 
4416c     8D 01 8E 01 
44170     8F 01 90 01 
44174     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
44178     93 01 94 01 
4417c     F6 01 96 01 
44180     97 01 98 01 
44184     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
44188     9B 01 9C 01 
4418c     9D 01 20 02 
44190     9F 01 A0 01 
44194     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
44198     A2 01 A4 01 
4419c     A4 01 A6 01 
441a0     A7 01 A7 01 
441a4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
441a8     AB 01 AC 01 
441ac     AC 01 AE 01 
441b0     AF 01 AF 01 
441b4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
441b8     B3 01 B3 01 
441bc     B5 01 B5 01 
441c0     B7 01 B8 01 
441c4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
441c8     BB 01 BC 01 
441cc     BC 01 BE 01 
441d0     F7 01 C0 01 
441d4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
441d8     C3 01 C4 01 
441dc     C5 01 C4 01 
441e0     C7 01 C8 01 
441e4     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
441e8     CB 01 CA 01 
441ec     CD 01 10 01 
441f0     DD 01 01 00 
441f4     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
441f8     12 01 F3 01 
441fc     03 00 F1 01 
44200     F4 01 F4 01 
44204     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
44208     22 02 12 01 
4420c     3A 02 09 00 
44210     65 2C 3B 02 
44214     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
44218     66 2C 3F 02 
4421c     40 02 41 02 
44220     41 02 46 02 
44224     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
44228     40 00 81 01 
4422c     86 01 55 02 
44230     89 01 8A 01 
44234     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
44238     5A 02 90 01 
4423c     5C 02 5D 02 
44240     5E 02 5F 02 
44244     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
44248     62 02 94 01 
4424c     64 02 65 02 
44250     66 02 67 02 
44254     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
44258     6A 02 62 2C 
4425c     6C 02 6D 02 
44260     6E 02 9C 01 
44264     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
44268     9D 01 73 02 
4426c     74 02 9F 01 
44270     76 02 77 02 
44274     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
44278     7A 02 7B 02 
4427c     7C 02 64 2C 
44280     7E 02 7F 02 
44284     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
44288     82 02 A9 01 
4428c     84 02 85 02 
44290     86 02 87 02 
44294     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
44298     B1 01 B2 01 
4429c     45 02 8D 02 
442a0     8E 02 8F 02 
442a4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
442a8     B7 01 7B 03 
442ac     03 00 FD 03 
442b0     FE 03 FF 03 
442b4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
442b8     86 03 88 03 
442bc     89 03 8A 03 
442c0     B1 03 11 03 
442c4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
442c8     A3 03 A3 03 
442cc     C4 03 08 03 
442d0     CC 03 03 00 
442d4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
442d8     8F 03 D8 03 
442dc     18 01 F2 03 
442e0     0A 00 F9 03 
442e4     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
442e8     F5 03 F6 03 
442ec     F7 03 F7 03 
442f0     F9 03 FA 03 
442f4     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
442f8     20 03 50 04 
442fc     10 07 60 04 
44300     22 01 8A 04 
44304     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
44308     0E 01 CF 04 
4430c     01 00 C0 04 
44310     D0 04 44 01 
44314     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
44318     00 00 7D 1D 
4431c     01 00 63 2C 
44320     00 1E 96 01 
44324     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
44328     00 1F 08 06 
4432c     10 1F 06 06 
44330     20 1F 08 06 
44334     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
44338     40 1F 06 06 
4433c     51 1F 07 00 
44340     59 1F 52 1F 
44344     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
44348     5D 1F 56 1F 
4434c     5F 1F 60 1F 
44350     08 06 70 1F 
44354     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
44358     BB 1F C8 1F 
4435c     C9 1F CA 1F 
44360     CB 1F DA 1F 
44364     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
44368     F9 1F EA 1F 
4436c     EB 1F FA 1F 
44370     FB 1F 80 1F 
44374     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
44378     08 06 A0 1F 
4437c     08 06 B0 1F 
44380     04 00 B8 1F 
44384     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
44388     BC 1F CC 1F 
4438c     01 00 C3 1F 
44390     D0 1F 02 06 
44394     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
44398     E5 1F 01 00 
4439c     EC 1F F3 1F 
443a0     01 00 FC 1F 
443a4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
443a8     32 21 70 21 
443ac     10 02 84 21 
443b0     01 00 83 21 
443b4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
443b8     30 2C 2F 04 
443bc     60 2C 02 01 
443c0     67 2C 06 01 
443c4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
443c8     80 2C 64 01 
443cc     00 2D 26 08 
443d0     41 FF 1A 03 
443d4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
443d8     05 07 09 0E 
443dc     10 12 14 16 
443e0     18 1C 1E 43 
443e4     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
443e8     41 41 43 45 
443ec     45 45 49 49 
443f0     49 41 41 45 
443f4     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
443f8     4F 55 55 59 
443fc     4F 55 4F 9C 
44400     4F 9E 9F 41 
44404     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
44408     A5 A6 A7 A8 
4440c     A9 AA AB AC 
44410     AD AE AF B0 
44414     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
44418     41 41 41 B8 
4441c     B9 BA BB BC 
44420     BD BE BF C0 
44424     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
44428     C5 41 41 C8 
4442c     C9 CA CB CC 
44430     CD CE CF D1 
44434     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
44438     49 49 49 49 
4443c     D9 DA DB DC 
44440     DD 49 DF 4F 
44444     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
44448     4F E6 E8 E8 
4444c     55 55 55 59 
44450     59 EE EF F0 
44454     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
44458     F5 F6 F7 F8 
4445c     F9 FA FB FC 
44460     FD FE FF 00 
44464     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
44468     00 00 00 00 | 	byte	$00, $00, $00, $00
4446c     00 00 80 0B | 	long	(184 {_fatfs_cc_v_close})<<20
44470     00 00 90 0B | 	long	(185 {_fatfs_cc_v_read})<<20
44474     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_write})<<20
44478     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_lseek})<<20
4447c     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_ioctl})<<20
44480     00 00 D0 0C | 	long	(205 {_fatfs_cc_v_flush})<<20
44484     00 00 00 00 
44488     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
4448c     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_open})<<20
44490     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_creat})<<20
44494     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_opendir})<<20
44498     00 00 00 0C | 	long	(192 {_fatfs_cc_v_closedir})<<20
4449c     00 00 10 0C | 	long	(193 {_fatfs_cc_v_readdir})<<20
444a0     00 00 20 0C | 	long	(194 {_fatfs_cc_v_stat})<<20
444a4     00 00 30 0C | 	long	(195 {_fatfs_cc_v_mkdir})<<20
444a8     00 00 40 0C | 	long	(196 {_fatfs_cc_v_rmdir})<<20
444ac     00 00 50 0C | 	long	(197 {_fatfs_cc_v_remove})<<20
444b0     00 00 60 0C | 	long	(198 {_fatfs_cc_v_rename})<<20
444b4     00 00 70 0C | 	long	(199 {_fatfs_cc_v_init})<<20
444b8     00 00 80 0C | 	long	(200 {_fatfs_cc_v_deinit})<<20
444bc     FF FF FF FF 
444c0     1F 00 00 00 
444c4     1C 00 00 00 
444c8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
444cc     1E 00 00 00 
444d0     1F 00 00 00 
444d4     1E 00 00 00 
444d8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
444dc     1F 00 00 00 
444e0     1E 00 00 00 
444e4     1F 00 00 00 
444e8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
444ec     1F 00 00 00 
444f0     00 00 00 00 
444f4     1F 00 00 00 
444f8     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
444fc     5A 00 00 00 
44500     78 00 00 00 
44504     97 00 00 00 
44508     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
4450c     D4 00 00 00 
44510     F3 00 00 00 
44514     11 01 00 00 
44518     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
4451c     4E 01 00 00 
44520     6D 01 00 00 
44524     FF FF FF FF 
44528     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
4452c     00 00 00 00 
      ...             
44544     00 00 00 00 
44548     00 00 00 00 | 	byte	$00[32]
4454c     6A 45 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
44550     6E 45 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
44554     00 00 00 00 
44558     00 00 00 00 
4455c     00 00 00 00 
44560     00 00 00 00 
44564     00 00       | 	byte	$00[18]
44566     3F 3F 3F 00 
4456a     55 43 54 00 
4456e     55 43 54 00 
44572     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
44576     00 00 00 00 
4457a     00 00 00    | 	byte	$00[7]
4457d     CA 9A 3B 00 
44581     00 00 00 01 
44585     01 01 01 01 
44589     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
4458d     91 11 11 11 
44591     11 01 01 01 
44595     01 01 01 01 
44599     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
4459d     01 01 01 01 
445a1     01 01 01    | 	byte	$01[7]
445a4     90 20 20 20 
445a8     20 20 20 20 
445ac     20 20 20 20 
445b0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
445b4     42 42 42 42 
445b8     42 42 42 42 
445bc     42 42       | 	byte	$42[10]
445be     20 20 20 20 
445c2     20 20 20    | 	byte	$20[7]
445c5     44 44 44 44 
445c9     44 44       | 	byte	$44[6]
445cb     04 04 04 04 
445cf     04 04 04 04 
445d3     04 04 04 04 
445d7     04 04 04 04 
445db     04 04 04 04 | 	byte	$04[20]
445df     20 20 20 20 
445e3     20 20       | 	byte	$20[6]
445e5     48 48 48 48 
445e9     48 48       | 	byte	$48[6]
445eb     08 08 08 08 
445ef     08 08 08 08 
445f3     08 08 08 08 
445f7     08 08 08 08 
445fb     08 08 08 08 | 	byte	$08[20]
445ff     20 20 20 20 
44603     01 00 00 00 
44607     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
44608                 | __methodtable__
44608     94 6D 01 00 | 	long	@_do_no_command
4460c     90 15 02 00 | 	long	@_do_plus
44610     B0 05 02 00 | 	long	@_do_minus
44614     78 14 02 00 | 	long	@_do_or
44618     30 0C 02 00 | 	long	@_do_mul
4461c     74 F0 01 00 | 	long	@_do_fdiv
44620     60 E8 01 00 | 	long	@_do_and
44624     78 E9 01 00 | 	long	@_do_div
44628     10 0A 02 00 | 	long	@_do_mod
4462c     44 1C 02 00 | 	long	@_do_shl
44630     5C 1D 02 00 | 	long	@_do_shr
44634     7C 1A 02 00 | 	long	@_do_power
44638     18 DE 01 00 | 	long	@_do_getvar
4463c     C0 9E 01 00 | 	long	@_do_push
44640     10 D8 01 00 | 	long	@_do_assign
44644     34 F8 00 00 | 	long	@_do_cls
44648     60 67 01 00 | 	long	@_do_new
4464c     04 97 01 00 | 	long	@_do_plot
44650     B0 21 01 00 | 	long	@_do_draw
44654     6C 99 01 00 | 	long	@_do_print
44658     14 F6 00 00 | 	long	@_do_circle
4465c     E4 23 01 00 | 	long	@_do_fcircle
44660     F8 E4 00 00 | 	long	@_do_box
44664     1C 2D 01 00 | 	long	@_do_frame
44668     F0 FA 00 00 | 	long	@_do_color
4466c     AC 2A 01 00 | 	long	@_do_for
44670     CC 69 01 00 | 	long	@_do_next
44674     6C 54 01 00 | 	long	@_do_list
44678     E4 BA 01 00 | 	long	@_do_run
4467c     0C 23 01 00 | 	long	@_do_error
44680     74 3A 01 00 | 	long	@_do_fast_goto
44684     64 3B 01 00 | 	long	@_do_find_goto
44688     78 3D 01 00 | 	long	@_do_slow_goto
4468c     B4 6D 01 00 | 	long	@_do_nothing
44690     00 BF 01 00 | 	long	@_do_save
44694     08 57 01 00 | 	long	@_do_load
44698     C0 89 01 00 | 	long	@_do_pinwrite
4469c     50 D5 01 00 | 	long	@_do_waitms
446a0     84 D6 01 00 | 	long	@_do_waitvbl
446a4     6C 40 01 00 | 	long	@_do_if
446a8     A4 22 01 00 | 	long	@_do_else
446ac     98 EB 01 00 | 	long	@_do_eq
446b0     3C F2 01 00 | 	long	@_do_ge
446b4     08 FC 01 00 | 	long	@_do_le
446b8     24 F7 01 00 | 	long	@_do_gt
446bc     E4 00 02 00 | 	long	@_do_lt
446c0     9C 0F 02 00 | 	long	@_do_ne
446c4     4C B8 01 00 | 	long	@_do_rnd
446c8     E0 E6 00 00 | 	long	@_do_brun
446cc     7C E0 00 00 | 	long	@_do_beep
446d0     40 1A 01 00 | 	long	@_do_dir
446d4     F4 85 01 00 | 	long	@_do_paper
446d8     28 44 01 00 | 	long	@_do_ink
446dc     30 2A 01 00 | 	long	@_do_font
446e0     D4 61 01 00 | 	long	@_do_mode
446e4     1C 66 01 00 | 	long	@_do_mouse
446e8     F4 38 01 00 | 	long	@_do_gettime
446ec     2C 00 01 00 | 	long	@_do_cursor
446f0     8C F7 00 00 | 	long	@_do_click
446f4     D8 66 01 00 | 	long	@_do_mousex
446f8     1C 67 01 00 | 	long	@_do_mousey
446fc     50 66 01 00 | 	long	@_do_mousek
44700     94 66 01 00 | 	long	@_do_mousew
44704     B8 CA 01 00 | 	long	@_do_sin
44708     F0 CD 01 00 | 	long	@_do_stick
4470c     80 CF 01 00 | 	long	@_do_strig
44710     10 CC 01 00 | 	long	@_do_sprite
44714     64 15 01 00 | 	long	@_do_defsprite
44718     A0 37 01 00 | 	long	@_do_getpixel
4471c     2C D5 01 00 | 	long	@_do_waitclock
44720     60 09 02 00 | 	long	@_do_negative
44724     44 A5 01 00 | 	long	@_do_rdpin
44728     70 BA 01 00 | 	long	@_do_rqpin
4472c     EC 87 01 00 | 	long	@_do_pinread
44730     90 D6 01 00 | 	long	@_do_wrpin
44734     10 D7 01 00 | 	long	@_do_wxpin
44738     90 D7 01 00 | 	long	@_do_wypin
4473c     2C 87 01 00 | 	long	@_do_pinfloat
44740     AC 87 01 00 | 	long	@_do_pinlo
44744     6C 87 01 00 | 	long	@_do_pinhi
44748     70 88 01 00 | 	long	@_do_pinstart
4474c     80 89 01 00 | 	long	@_do_pintoggle
44750     E4 98 01 00 | 	long	@_do_position
44754     08 FF 00 00 | 	long	@_do_cos
44758     10 D1 01 00 | 	long	@_do_tan
4475c     64 DF 00 00 | 	long	@_do_atn
44760     54 DE 00 00 | 	long	@_do_asin
44764     E4 DB 00 00 | 	long	@_do_acos
44768     FC CC 01 00 | 	long	@_do_sqr
4476c     C8 24 01 00 | 	long	@_do_fill
44770     74 0C 01 00 | 	long	@_do_defsnd
44774     74 01 01 00 | 	long	@_do_defenv
44778     1C A5 01 00 | 	long	@_do_rad
4477c     D8 18 01 00 | 	long	@_do_deg
44780     A8 44 01 00 | 	long	@_do_int
44784     48 8A 01 00 | 	long	@_do_play
44788     10 C5 01 00 | 	long	@_do_setdelay
4478c     B8 C5 01 00 | 	long	@_do_setenv
44790     60 C6 01 00 | 	long	@_do_setlen
44794     08 C7 01 00 | 	long	@_do_setpan
44798     58 C8 01 00 | 	long	@_do_setvol
4479c     00 C9 01 00 | 	long	@_do_setwave
447a0     B0 C7 01 00 | 	long	@_do_setsustain
447a4     3C B5 01 00 | 	long	@_do_release
447a8     8C 35 01 00 | 	long	@_do_getenvsustain
447ac     D4 97 01 00 | 	long	@_do_poke
447b0     D8 20 01 00 | 	long	@_do_dpoke
447b4     E8 5D 01 00 | 	long	@_do_lpoke
447b8     7C 86 01 00 | 	long	@_do_peek
447bc     2C 20 01 00 | 	long	@_do_dpeek
447c0     3C 5D 01 00 | 	long	@_do_lpeek
447c4     78 2E 01 00 | 	long	@_do_fre
447c8     9C 36 01 00 | 	long	@_do_getnotevalue
447cc     D0 E3 01 00 | 	long	@_do_getaddr
447d0     50 41 01 00 | 	long	@_do_inkey
447d4     64 DB 00 00 | 	long	@_do_abs
447d8     08 3F 01 00 | 	long	@_do_hex
447dc     94 E3 00 00 | 	long	@_do_bin
447e0     20 D2 01 00 | 	long	@_do_val
447e4     14 F5 00 00 | 	long	@_do_chr
447e8     F4 DC 00 00 | 	long	@_do_asc
447ec     6C 51 01 00 | 	long	@_do_left
447f0     C0 B6 01 00 | 	long	@_do_right
447f4     48 5F 01 00 | 	long	@_do_mid
447f8     F8 52 01 00 | 	long	@_do_len
447fc     5C 39 01 00 | 	long	@_do_gosub
44800     14 B6 01 00 | 	long	@_do_return
44804     C8 22 01 00 | 	long	@_do_end
44808     AC 98 01 00 | 	long	@_do_pop
4480c     C0 5B 01 00 | 	long	@_do_log
44810     08 F3 00 00 | 	long	@_do_changevol
44814     E8 F3 00 00 | 	long	@_do_changewav
44818     F8 F1 00 00 | 	long	@_do_changepan
4481c     DC EE 00 00 | 	long	@_do_changefreq
44820     A8 C9 01 00 | 	long	@_do_shutup
44824     1C BA 01 00 | 	long	@_do_round
44828     FC 22 01 00 | 	long	@_do_enter
4482c     DC 6E 01 00 | 	long	@_do_open
44830     B8 F7 00 00 | 	long	@_do_close
44834     DC 2E 01 00 | 	long	@_do_get
44838     DC 9F 01 00 | 	long	@_do_put
4483c     1C E9 00 00 | 	long	@_do_cd
44840     00 19 01 00 | 	long	@_do_delete
44844     14 61 01 00 | 	long	@_do_mkdir
44848     90 E1 00 00 | 	long	@_do_blit
4484c     44 2E 01 00 | 	long	@_do_framebuf
44850     B8 6D 01 00 | 	long	@_do_on
44854     C8 CB 01 00 | 	long	@_do_skip
44858     64 45 01 00 | 	long	@_do_input
4485c     A8 A7 01 00 | 	long	@_do_read
44860     D4 B5 01 00 | 	long	@_do_restore
44864     74 7E 01 00 | 	long	@_do_padx
44868     F4 80 01 00 | 	long	@_do_pady
4486c     74 83 01 00 | 	long	@_do_padz
44870     F4 71 01 00 | 	long	@_do_padrx
44874     74 74 01 00 | 	long	@_do_padry
44878     F4 76 01 00 | 	long	@_do_padrz
4487c     F4 7B 01 00 | 	long	@_do_padw
44880     74 79 01 00 | 	long	@_do_pads
44884     28 FB 00 00 | 	long	@_do_copy
44888     74 F8 00 00 | 	long	@_do_coginit
4488c     B0 FA 00 00 | 	long	@_do_cogstop
44890     C0 5E 01 00 | 	long	@_do_memlo
44894     04 5F 01 00 | 	long	@_do_memtop
44898     A4 C2 01 00 | 	long	@_do_setcolor
4489c     80 34 01 00 | 	long	@_do_getcolor
448a0     60 00 01 00 | 	long	@_do_defchar
448a4     0C B6 01 00 | 	long	@_do_restorepalette
448a8     DC 25 01 00 | 	long	@_do_findfirst
448ac     68 29 01 00 | 	long	@_do_findnext
448b0     D4 5F 02 00 | 	long	@_hg010b_spin2_putchar
448b4     A4 75 03 00 | 	long	@__system___struct___bas_wrap_sender_tx_
448b8     E8 75 03 00 | 	long	@__system___struct___bas_wrap_sender_rx_
448bc     30 76 03 00 | 	long	@__system___struct___bas_wrap_sender_close_
448c0     D4 74 03 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
448c4     44 75 03 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
448c8     8C 74 03 00 | 	long	@__system____strs_cl_pfunc_
448cc     1C D2 02 00 | 	long	@__system____root_opendir
448d0     B8 D2 02 00 | 	long	@__system____root_closedir
448d4     34 D2 02 00 | 	long	@__system____root_readdir
448d8     C0 D2 02 00 | 	long	@__system____root_stat
448dc     08 CB 02 00 | 	long	@__system____default_putc
448e0     8C CA 02 00 | 	long	@__system____default_getc
448e4     B0 CB 02 00 | 	long	@__system____default_flush
448e8     94 5F 03 00 | 	long	@_fatfs_cc_v_close
448ec     B0 63 03 00 | 	long	@_fatfs_cc_v_read
448f0     C4 64 03 00 | 	long	@_fatfs_cc_v_write
448f4     A4 65 03 00 | 	long	@_fatfs_cc_v_lseek
448f8     2C 66 03 00 | 	long	@_fatfs_cc_v_ioctl
448fc     80 66 03 00 | 	long	@_fatfs_cc_v_open
44900     F8 5E 03 00 | 	long	@_fatfs_cc_v_creat
44904     D8 5F 03 00 | 	long	@_fatfs_cc_v_opendir
44908     4C 60 03 00 | 	long	@_fatfs_cc_v_closedir
4490c     8C 60 03 00 | 	long	@_fatfs_cc_v_readdir
44910     C0 61 03 00 | 	long	@_fatfs_cc_v_stat
44914     40 66 03 00 | 	long	@_fatfs_cc_v_mkdir
44918     60 66 03 00 | 	long	@_fatfs_cc_v_rmdir
4491c     50 66 03 00 | 	long	@_fatfs_cc_v_remove
44920     70 66 03 00 | 	long	@_fatfs_cc_v_rename
44924     90 67 03 00 | 	long	@_fatfs_cc_v_init
44928     98 67 03 00 | 	long	@_fatfs_cc_v_deinit
4492c     54 7C 02 00 | 	long	@__system___tx
44930     94 7C 02 00 | 	long	@__system___rx
44934     30 DE 02 00 | 	long	@__system___rxtxioctl_0785
44938     88 DE 02 00 | 	long	@__system____dummy_flush_0786
4493c     60 67 03 00 | 	long	@_fatfs_cc_v_flush
44940                 | __heap_base
44940     00 00 00 00 
      ...             
5c040     00 00 00 00 
5c044     00 00 00 00 | 	long	0[24002]
5c048                 | objmem
5c048     00 00 00 00 
      ...             
6659c     00 00 00 00 
665a0     00 00 00 00 | 	long	0[10583]
665a4                 | stackspace
665a4     00 00 00 00 | 	long	0[1]
665a8 100             | 	org	COG_BSS_START
665a8 100             | _var01
665a8 100             | 	res	1
665a8 101             | _var02
665a8 101             | 	res	1
665a8 102             | _var03
665a8 102             | 	res	1
665a8 103             | _var04
665a8 103             | 	res	1
665a8 104             | _var05
665a8 104             | 	res	1
665a8 105             | _var06
665a8 105             | 	res	1
665a8 106             | _var07
665a8 106             | 	res	1
665a8 107             | _var08
665a8 107             | 	res	1
665a8 108             | _var09
665a8 108             | 	res	1
665a8 109             | arg01
665a8 109             | 	res	1
665a8 10a             | arg02
665a8 10a             | 	res	1
665a8 10b             | arg03
665a8 10b             | 	res	1
665a8 10c             | arg04
665a8 10c             | 	res	1
665a8 10d             | arg05
665a8 10d             | 	res	1
665a8 10e             | arg06
665a8 10e             | 	res	1
665a8 10f             | arg07
665a8 10f             | 	res	1
665a8 110             | arg08
665a8 110             | 	res	1
665a8 111             | arg09
665a8 111             | 	res	1
665a8 112             | arg10
665a8 112             | 	res	1
665a8 113             | local01
665a8 113             | 	res	1
665a8 114             | local02
665a8 114             | 	res	1
665a8 115             | local03
665a8 115             | 	res	1
665a8 116             | local04
665a8 116             | 	res	1
665a8 117             | local05
665a8 117             | 	res	1
665a8 118             | local06
665a8 118             | 	res	1
665a8 119             | local07
665a8 119             | 	res	1
665a8 11a             | local08
665a8 11a             | 	res	1
665a8 11b             | local09
665a8 11b             | 	res	1
665a8 11c             | local10
665a8 11c             | 	res	1
665a8 11d             | local11
665a8 11d             | 	res	1
665a8 11e             | local12
665a8 11e             | 	res	1
665a8 11f             | local13
665a8 11f             | 	res	1
665a8 120             | local14
665a8 120             | 	res	1
665a8 121             | local15
665a8 121             | 	res	1
665a8 122             | local16
665a8 122             | 	res	1
665a8 123             | local17
665a8 123             | 	res	1
665a8 124             | local18
665a8 124             | 	res	1
665a8 125             | local19
665a8 125             | 	res	1
665a8 126             | local20
665a8 126             | 	res	1
665a8 127             | local21
665a8 127             | 	res	1
665a8 128             | local22
665a8 128             | 	res	1
665a8 129             | local23
665a8 129             | 	res	1
665a8 12a             | local24
665a8 12a             | 	res	1
665a8 12b             | local25
665a8 12b             | 	res	1
665a8 12c             | local26
665a8 12c             | 	res	1
665a8 12d             | local27
665a8 12d             | 	res	1
665a8 12e             | local28
665a8 12e             | 	res	1
665a8 12f             | local29
665a8 12f             | 	res	1
665a8 130             | local30
665a8 130             | 	res	1
665a8 131             | local31
665a8 131             | 	res	1
665a8 132             | local32
665a8 132             | 	res	1
665a8 133             | local33
665a8 133             | 	res	1
665a8 134             | local34
665a8 134             | 	res	1
665a8 135             | local35
665a8 135             | 	res	1
665a8 136             | local36
665a8 136             | 	res	1
665a8 137             | local37
665a8 137             | 	res	1
665a8 138             | local38
665a8 138             | 	res	1
665a8 139             | local39
665a8 139             | 	res	1
665a8 13a             | local40
665a8 13a             | 	res	1
665a8 13b             | local41
665a8 13b             | 	res	1
665a8 13c             | local42
665a8 13c             | 	res	1
665a8 13d             | local43
665a8 13d             | 	res	1
665a8 13e             | local44
665a8 13e             | 	res	1
665a8 13f             | local45
665a8 13f             | 	res	1
665a8 140             | local46
665a8 140             | 	res	1
665a8 141             | local47
665a8 141             | 	res	1
665a8 142             | local48
665a8 142             | 	res	1
665a8 143             | local49
665a8 143             | 	res	1
665a8 144             | local50
665a8 144             | 	res	1
665a8 145             | local51
665a8 145             | 	res	1
665a8 146             | local52
665a8 146             | 	res	1
665a8 147             | local53
665a8 147             | 	res	1
665a8 148             | muldiva_
665a8 148             | 	res	1
665a8 149             | muldivb_
665a8 149             | 	res	1
665a8 14a             | 	fit	480
665a8 14a             | 
